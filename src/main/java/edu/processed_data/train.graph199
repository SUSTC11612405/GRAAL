class C{  private void sortTransportsToUnload(final List<Unit> transports,final Route route){  if (transports.isEmpty()) {    return;  }  Collections.sort(transports,UnitComparator.getUnloadableTransportsComparator(transports,route,getUnitOwner(transports),true));}  }
class C{  private static DataInput jobConfDataInput(HadoopJob job) throws IgniteCheckedException {  JobConf jobConf=new JobConf();  for (  Map.Entry<String,String> e : ((HadoopDefaultJobInfo)job.info()).properties().entrySet())   jobConf.set(e.getKey(),e.getValue());  ByteArrayOutputStream buf=new ByteArrayOutputStream();  try {    jobConf.write(new DataOutputStream(buf));  } catch (  IOException e) {    throw new IgniteCheckedException(e);  }  return new DataInputStream(new ByteArrayInputStream(buf.toByteArray()));}  }
class C{  public boolean isPointer(Value val){  if (!(val.getType() instanceof RefLikeType))   return false;  if (getInternalNode(val) != null)   return true;  return false;}  }
class C{  public static DecomposableMatchBuilder0<Integer> caseInt(int i){  List<Matcher<Object>> matchers=new ArrayList<>();  matchers.add(eq(i));  return new DecomposableMatchBuilder0<>(matchers,new PrimitiveFieldExtractor<>(Integer.class));}  }
class C{  public void characters(char[] ch,int start,int length) throws SAXException {  Object top=stack.peek();  StringBuffer sb;  if (top instanceof StringBuffer) {    sb=(StringBuffer)top;  } else {    sb=new StringBuffer();    stack.push(sb);  }  sb.append(ch,start,length);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == StrictModeRelevant.class) {switch (baseFeatureID) {case N4JSPackage.STRICT_MODE_RELEVANT__STRICT_MODE:      return N4JSPackage.IDENTIFIER_REF__STRICT_MODE;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public String jquery_header(){  return "<!DOCTYPE html>\n" + "<html>\n" + "<head>\n"+ "<title>Spec</title>\n"+ "<script src='http://people.csail.mit.edu/jhp/jquery.js'></script>\n"+ "<script src='http://people.csail.mit.edu/jhp/utils.js'></script>\n"+ "<script src='http://code.jquery.com/ui/1.10.0/jquery-ui.js'></script>\n"+ "<script src='../spec.js'></script>"+ "<link rel='stylesheet' href='http://code.jquery.com/ui/1.10.0/themes/base/jquery-ui.css' />\n"+ "<link rel='stylesheet' href='http://people.csail.mit.edu/jhp/specdump.css' />\n"+ "<style> a {text-decoration:none} h4 {margin-top:0px;margin-bottom:0px;} </style>\n"+ "</head>\n"+ "<body>\n";}  }
class C{  void bind(String modName,ModulePointer modPointer){  context.put(modName,modPointer);}  }
class C{  private void handleServiceUnavailable(State state,HttpResponse response) throws StopRequest {  if (Constants.LOGVV) {    Log.v(Constants.TAG,"got HTTP response code 503");  }  state.mCountRetry=true;  Header header=response.getFirstHeader("Retry-After");  if (header != null) {    try {      if (Constants.LOGVV) {        Log.v(Constants.TAG,"Retry-After :" + header.getValue());      }      state.mRetryAfter=Integer.parseInt(header.getValue());      if (state.mRetryAfter < 0) {        state.mRetryAfter=0;      } else {        if (state.mRetryAfter < Constants.MIN_RETRY_AFTER) {          state.mRetryAfter=Constants.MIN_RETRY_AFTER;        } else         if (state.mRetryAfter > Constants.MAX_RETRY_AFTER) {          state.mRetryAfter=Constants.MAX_RETRY_AFTER;        }        state.mRetryAfter+=Helpers.sRandom.nextInt(Constants.MIN_RETRY_AFTER + 1);        state.mRetryAfter*=1000;      }    } catch (    NumberFormatException ex) {    }  }  throw new StopRequest(DownloaderService.STATUS_WAITING_TO_RETRY,"got 503 Service Unavailable, will retry later");}  }
class C{  private static String invokeNvcc(String cuFileName,String targetFileType,boolean forceRebuild,String... nvccArguments){  if (!"cubin".equalsIgnoreCase(targetFileType) && !"ptx".equalsIgnoreCase(targetFileType)) {    throw new IllegalArgumentException("Target file type must be \"ptx\" or \"cubin\", but is " + targetFileType);  }  logger.fine("Creating " + targetFileType + " file for "+ cuFileName);  int dotIndex=cuFileName.lastIndexOf('.');  if (dotIndex == -1) {    dotIndex=cuFileName.length();  }  String otuputFileName=cuFileName.substring(0,dotIndex) + "." + targetFileType.toLowerCase();  File ptxFile=new File(otuputFileName);  if (ptxFile.exists() && !forceRebuild) {    return otuputFileName;  }  File cuFile=new File(cuFileName);  if (!cuFile.exists()) {    throw new CudaException("Input file not found: " + cuFileName + " ("+ cuFile.getAbsolutePath()+ ")");  }  String modelString="-m" + System.getProperty("sun.arch.data.model");  String command="nvcc ";  command+=modelString + " ";  command+="-" + targetFileType + " ";  for (  String a : nvccArguments) {    command+=a + " ";  }  command+=cuFileName + " -o " + otuputFileName;  logger.fine("Executing\n" + command);  try {    Process process=Runtime.getRuntime().exec(command);    String errorMessage=new String(toByteArray(process.getErrorStream()));    String outputMessage=new String(toByteArray(process.getInputStream()));    int exitValue=0;    try {      exitValue=process.waitFor();    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();      throw new CudaException("Interrupted while waiting for nvcc output",e);    }    if (exitValue != 0) {      logger.severe("nvcc process exitValue " + exitValue);      logger.severe("errorMessage:\n" + errorMessage);      logger.severe("outputMessage:\n" + outputMessage);      throw new CudaException("Could not create " + targetFileType + " file: "+ errorMessage);    }  } catch (  IOException e) {    throw new CudaException("Could not create " + targetFileType + " file",e);  }  logger.fine("Finished creating " + targetFileType + " file");  return otuputFileName;}  }
class C{  final public LoadStats loadData(final String[] resource,final String[] baseURL,final RDFFormat[] rdfFormat) throws IOException {  if (resource.length != baseURL.length)   throw new IllegalArgumentException();  if (resource.length != rdfFormat.length)   throw new IllegalArgumentException();  if (log.isInfoEnabled())   log.info("commit=" + commitEnum + ", closure="+ closureEnum+ ", resource="+ Arrays.toString(resource));  final MyLoadStats totals=newLoadStats();  for (int i=0; i < resource.length; i++) {    final boolean endOfBatch=i + 1 == resource.length;    loadData2(totals,resource[i],baseURL[i],rdfFormat[i],endOfBatch);  }  doCommit(totals);  if (log.isInfoEnabled())   log.info("Loaded " + resource.length + " resources: "+ totals);  return totals;}  }
class C{  public synchronized void error(String s){  println(a("ERROR:\n" + s),ALL_MESSAGE_LOGS,true);  errors=true;}  }
class C{  public BatchStatus(ServiceException e){  code=e.getHttpErrorCodeOverride();  if (code == -1) {    code=HttpURLConnection.HTTP_INTERNAL_ERROR;  }  reason=e.getMessage();  contentType=e.getResponseContentType();  content=e.getResponseBody();}  }
class C{  private void addSpan(CacheSpan span){  TreeSet<CacheSpan> spansForKey=cachedSpans.get(span.key);  if (spansForKey == null) {    spansForKey=new TreeSet<CacheSpan>();    cachedSpans.put(span.key,spansForKey);  }  spansForKey.add(span);  totalSpace+=span.length;  notifySpanAdded(span);}  }
class C{  protected ConcreteMethodDeclaration_Impl(){  super();}  }
class C{  public static Address alignDown(Address addr,int bits){  return alignWord(addr.toWord(),bits,true).toAddress();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  final static public String[] toStrings(char[][] array){  if (array == null)   return NO_STRINGS;  int length=array.length;  if (length == 0)   return NO_STRINGS;  String[] result=new String[length];  for (int i=0; i < length; i++)   result[i]=new String(array[i]);  return result;}  }
class C{  public static RVMThread objectAsThread(Object object){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return null;}  }
class C{  public InvalidDataException(String string){  super(string);}  }
class C{  protected void meetNode(QueryModelNode node) throws X {  node.visitChildren(this);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGraphPackage.SCOPE__DECLARATIONS:    getDeclarations().clear();  return;case SGraphPackage.SCOPE__REACTIONS:getReactions().clear();return;}super.eUnset(featureID);}  }
class C{  public static void registerConfig(){  Config.registerSelf(DefaultDestinationFactory.class);  if (!Config.isInvalid()) {    destBase=Config.parms.getInt("db");    destMax=Config.parms.getInt("dx");    destNumber=Config.parms.getInt("dn");    destPrefix=Config.parms.getString("d");    if (destBase > 0 && destMax > 0 && destNumber > 0) {      mode=MODE_DIST;      nextDest=destNumber;      destNumber=destMax - destBase + 1;      if (destNumber < destBase || destNumber > destMax) {        Config.logger.warning("-dn must be within the specified bounds of -db and -dx");      }    } else     if (destBase > 0 || destMax > 0 || destNumber > 0) {      mode=MODE_DIST;      if (destBase == 0) {        if (destMax > 0 && destNumber > 0) {          destBase=destMax - destNumber + 1;        } else {          destBase=1;        }      }      nextDest=destBase;      if (destMax == 0) {        if (destNumber > 0) {          destMax=destNumber + destBase - 1;        } else {        }      }      if (destNumber == 0) {        if (destMax > 0) {          destNumber=destMax - destBase + 1;        } else {        }      }    }    if (destBase < 0 || (destMax != 0 && destMax < destBase)) {      Config.logger.warning("Destination range is negative.");    }    if (Config.parms.getBoolean("dr") == true) {      mode=MODE_RANDOM;      if (destMax == 0) {        Config.logger.warning("-dx and -dn cannot both be 0 in random mode");      }      destRandomRange=destMax - destBase + 1;    }  }}  }
class C{  public void reset(){  length=0;}  }
class C{  public static Date parseDate(String dateValue) throws DateParseException {  return parseDate(dateValue,null,null);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) protected Object readBean(Deserializer deserializer,Object bean){  storeReference(bean);  Class theClass=bean.getClass();  while (hasMoreProperties()) {    String name=readPropertyName();    Type type=getPropertyType(bean,name);    Object property=deserializer.deserialize(this,type);    if (property != null) {      try {        if (type instanceof Class) {          Class t=(Class)type;          if (!t.isAssignableFrom(property.getClass())) {            property=ConversionUtils.convert(property,t);          }        }        final Field field=theClass.getField(name);        field.set(bean,property);      } catch (      Exception ex2) {        try {        } catch (        Exception ex) {          log.error("Error mapping property: {} ({})",name,property);        }      }    } else {    }    if (hasMoreProperties()) {      skipPropertySeparator();    }  }  skipEndObject();  return bean;}  }
class C{  private void removeByDiskStoreID(Set<PersistentMemberID> membersToWaitFor,DiskStoreID diskStoreID){  for (Iterator<PersistentMemberID> itr=membersToWaitFor.iterator(); itr.hasNext(); ) {    PersistentMemberID id=itr.next();    if (id.diskStoreId.equals(diskStoreID)) {      if (logger.isDebugEnabled(LogMarker.PERSIST_ADVISOR)) {        logger.debug(LogMarker.PERSIST_ADVISOR,"{}-{}: Not waiting for {} because it no longer has this region in it's disk store",shortDiskStoreId(),regionPath,id);      }      itr.remove();      memberRemoved(id,false);    }  }}  }
class C{  protected void doDrawInteriorVBO(DrawContext dc,Geometry geometry,int[] vboIds){  GL2 gl=dc.getGL().getGL2();  if (geometry.offset == -1)   return;  try {    gl.glBindBuffer(GL.GL_ARRAY_BUFFER,vboIds[0]);    gl.glVertexPointer(ColladaAbstractGeometry.COORDS_PER_VERTEX,GL.GL_FLOAT,0,0);    if (!dc.isPickingMode() && this.mustApplyLighting(dc,null) && this.normalBuffer != null) {      gl.glNormalPointer(GL.GL_FLOAT,0,this.normalBufferPosition * Buffers.SIZEOF_FLOAT);    }    gl.glDrawArrays(this.elementType,geometry.offset,geometry.colladaGeometry.getCount() * this.vertsPerShape);  }  finally {    gl.glBindBuffer(GL.GL_ARRAY_BUFFER,0);  }}  }
class C{  public SparseArrayCompatSerializable(int initialCapacity){  if (initialCapacity == 0) {    mKeys=ContainerHelpers.EMPTY_INTS;    mValues=ContainerHelpers.EMPTY_OBJECTS;  } else {    initialCapacity=ContainerHelpers.idealIntArraySize(initialCapacity);    mKeys=new int[initialCapacity];    mValues=new Object[initialCapacity];  }  mSize=0;}  }
class C{  @Override public byte[] serialize(){  byte[] payloadData=null;  if (payload != null) {    payload.setParent(this);    payloadData=payload.serialize();  }  int optionsLength=0;  if (this.options != null)   optionsLength=this.options.length / 4;  this.headerLength=(byte)(5 + optionsLength);  this.totalLength=(short)(this.headerLength * 4 + ((payloadData == null) ? 0 : payloadData.length));  byte[] data=new byte[this.totalLength];  ByteBuffer bb=ByteBuffer.wrap(data);  bb.put((byte)(((this.version & 0xf) << 4) | (this.headerLength & 0xf)));  bb.put(this.diffServ);  bb.putShort(this.totalLength);  bb.putShort(this.identification);  bb.putShort((short)(((this.flags & IPV4_FLAGS_MASK) << IPV4_FLAGS_SHIFT) | (this.fragmentOffset & IPV4_OFFSET_MASK)));  bb.put(this.ttl);  bb.put(this.protocol);  bb.putShort(this.checksum);  bb.putInt(this.sourceAddress);  bb.putInt(this.destinationAddress);  if (this.options != null)   bb.put(this.options);  if (payloadData != null)   bb.put(payloadData);  if (this.checksum == 0) {    bb.rewind();    int accumulation=0;    for (int i=0; i < this.headerLength * 2; ++i) {      accumulation+=0xffff & bb.getShort();    }    accumulation=((accumulation >> 16) & 0xffff) + (accumulation & 0xffff);    this.checksum=(short)(~accumulation & 0xffff);    bb.putShort(10,this.checksum);  }  return data;}  }
class C{  @DSSource({DSSourceKind.FILE}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.179 -0400",hash_original_method="514B53EAF74C98998110AA9D495193D2",hash_generated_method="EE4A58E734701902E489D319FB6E4670") public static List<String> readLines(File file,Charset encoding) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.readLines(in,Charsets.toCharset(encoding));  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  public static boolean checkThinVolumePreAllocationChanged(Integer thinVolumePreAllocationPercentage,Integer thinVolumePreAllocationUpdateParam){  boolean isModified=false;  if (null != thinVolumePreAllocationUpdateParam) {    if (null == thinVolumePreAllocationPercentage) {      isModified=true;    } else     if (thinVolumePreAllocationPercentage != thinVolumePreAllocationUpdateParam) {      isModified=true;    }  }  if (null == thinVolumePreAllocationPercentage && null != thinVolumePreAllocationUpdateParam) {    isModified=true;  }  return isModified;}  }
class C{  public synchronized void removeIndexPath(IPath path){  if (JobManager.VERBOSE || DEBUG)   Util.verbose("removing index path " + path);  Object[] keyTable=this.indexes.keyTable;  Object[] valueTable=this.indexes.valueTable;  IndexLocation[] locations=null;  int max=this.indexes.elementSize;  int count=0;  for (int i=0, l=keyTable.length; i < l; i++) {    IndexLocation indexLocation=(IndexLocation)keyTable[i];    if (indexLocation == null)     continue;    if (indexLocation.startsWith(path)) {      Index index=(Index)valueTable[i];      index.monitor=null;      if (locations == null)       locations=new IndexLocation[max];      locations[count++]=indexLocation;      if (this.indexStates.get(indexLocation) == REUSE_STATE) {        indexLocation.close();      } else {        if (DEBUG)         Util.verbose("removing index file " + indexLocation);        indexLocation.delete();      }    } else {      max--;    }  }  if (locations != null) {    for (int i=0; i < count; i++)     this.indexes.removeKey(locations[i]);    removeIndexesState(locations);    if (this.participantsContainers != null) {      boolean update=false;      for (int i=0; i < count; i++) {        if (this.participantsContainers.get(locations[i]) != null) {          update=true;          this.participantsContainers.removeKey(locations[i]);        }      }      if (update)       writeParticipantsIndexNamesFile();    }  }}  }
class C{  public JLabel(String text){  this(text,null,LEADING);}  }
class C{  public void start(@NonNull Context context,@NonNull android.support.v4.app.Fragment fragment){  start(context,fragment,REQUEST_CROP);}  }
class C{  private void afterVote(Vote vote,Post post,String result){  post.setVotesUp(countingService.getVoteUp(post.getId()));  post.setVotesDown(countingService.getVoteDown(post.getId()));  rabbitTemplate.convertAndSend(RabbitmqConfiguration.QUEUE_UPDATE_POST_SCORE,post);  messageService.newVoteMessage(vote,post,result);}  }
class C{  public boolean isCreditCardAvailable(){  return isPaymentTypeAvailable(getSelectedOrganization(),PaymentInfoType.CREDIT_CARD);}  }
class C{  public static RepositoryMetaData readFrom(StreamInput in) throws IOException {  String name=in.readString();  String type=in.readString();  Settings settings=Settings.readSettingsFromStream(in);  return new RepositoryMetaData(name,type,settings);}  }
class C{  private static int floor(double value){  return (int)Math.floor(value);}  }
class C{  @Deprecated public void reset(com.alibaba.dubbo.common.Parameters parameters){  reset(getUrl().addParameters(parameters.getParameters()));}  }
class C{  public void removeNodesFromPartition(List<IGroupMemberNode> nodesToRemove){  for (  final IGroupMemberNode nodeToRemove : nodesToRemove) {    if (nodeToRemove != null) {      if (!nonOptionalNonMinusNodes.remove(nodeToRemove)) {        if (nodeToRemove.equals(optionalOrMinus)) {          optionalOrMinus=null;        }      }    }  }  recomputeDefinitelyProduced();}  }
class C{  @SuppressWarnings("unused") public BatchViewAsList(DataflowRunner runner,View.AsList<T> transform){  this.runner=runner;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private static Arc<Object>[] cacheRootArcs(FST<Object> automaton){  try {    List<Arc<Object>> rootArcs=new ArrayList<>();    Arc<Object> arc=automaton.getFirstArc(new Arc<>());    FST.BytesReader fstReader=automaton.getBytesReader();    automaton.readFirstTargetArc(arc,arc,fstReader);    while (true) {      rootArcs.add(new Arc<>().copyFrom(arc));      if (arc.isLast())       break;      automaton.readNextArc(arc,fstReader);    }    Collections.reverse(rootArcs);    return rootArcs.toArray(new Arc[rootArcs.size()]);  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  void updateKeeper(SolrZooKeeper keeper) throws InterruptedException {  SolrZooKeeper oldKeeper=this.keeper;  this.keeper=keeper;  if (oldKeeper != null) {    oldKeeper.close();  }  if (isClosed)   this.keeper.close();}  }
class C{  @SuppressWarnings("unchecked") static final <K,V>HashEntry<K,V> entryAt(HashEntry<K,V>[] tab,int i){  return (tab == null) ? null : (HashEntry<K,V>)UNSAFE.getObjectVolatile(tab,((long)i << TSHIFT) + TBASE);}  }
class C{  public String beamString(int k){  StringBuilder sb=new StringBuilder();  final String nl=System.getProperty("line.separator");  int i=0;  for (  Derivation<TK,FV> h : this) {    if (sb.length() > 0)     sb.append(nl);    sb.append(i++).append(" ").append(h.toString());    if (i >= k)     break;  }  return sb.toString();}  }
class C{  private AllocatableValue allocateSpillSlot(Variable var){  int variableIndex=var.index;  AllocatableValue cachedStackSlot=stackSlots[variableIndex];  if (cachedStackSlot != null) {    TraceRegisterAllocationPhase.globalStackSlots.increment();    assert cachedStackSlot.getValueKind().equals(var.getValueKind()) : "CachedStackSlot: kind mismatch? " + var.getValueKind() + " vs. "+ cachedStackSlot.getValueKind();    return cachedStackSlot;  }  VirtualStackSlot slot=lirGenRes.getFrameMapBuilder().allocateSpillSlot(var.getValueKind());  stackSlots[variableIndex]=slot;  TraceRegisterAllocationPhase.allocatedStackSlots.increment();  return slot;}  }
class C{  protected boolean addElement(VirtualFile item){  if (item == null) {    return false;  }  if (myAllFiles.contains(item)) {    return false;  }  if (isUrlInserted()) {    getListModel().insertElementAt(item,getRowCount() - 1);  } else {    getListModel().addElement(item);  }  myAllFiles.add(item);  return true;}  }
class C{  synchronized private void handleException(Exception e,boolean resumable) throws IOException {  if ((debug != null) && Debug.isOn("ssl")) {    System.out.println(Thread.currentThread().getName() + ", handling exception: " + e.toString());  }  if (e instanceof InterruptedIOException && resumable) {    throw (IOException)e;  }  if (closeReason != null) {    if (e instanceof IOException) {      throw (IOException)e;    } else {      throw Alerts.getSSLException(Alerts.alert_internal_error,e,"Unexpected exception");    }  }  boolean isSSLException=(e instanceof SSLException);  if ((isSSLException == false) && (e instanceof IOException)) {    try {      fatal(Alerts.alert_unexpected_message,e);    } catch (    IOException ee) {    }    throw (IOException)e;  }  byte alertType;  if (isSSLException) {    if (e instanceof SSLHandshakeException) {      alertType=Alerts.alert_handshake_failure;    } else {      alertType=Alerts.alert_unexpected_message;    }  } else {    alertType=Alerts.alert_internal_error;  }  fatal(alertType,e);}  }
class C{  public static Sentence distribute(Sentence sentence){  Sentence result=null;  DistributeOrOverAnd distributeOrOverAnd=new DistributeOrOverAnd();  result=sentence.accept(distributeOrOverAnd,null);  return result;}  }
class C{  public static Map<Object,Long> valueHistogram(GeoTimeSerie gts){  Map<Object,Long> occurrences=new HashMap<Object,Long>();  for (int i=0; i < gts.values; i++) {    Object value=GTSHelper.valueAtIndex(gts,i);    if (!occurrences.containsKey(value)) {      occurrences.put(value,1L);    } else {      occurrences.put(value,1L + occurrences.get(value));    }  }  if (GTSHelper.isBucketized(gts) && gts.bucketcount != gts.values) {    occurrences.put(null,(long)(gts.bucketcount - gts.values));  }  return occurrences;}  }
class C{  long totalLength(){  return mTotalLength;}  }
class C{  public void testProviderConfig() throws Exception {  ObjectMapper mapper=new ObjectMapper();  assertEquals(0,mapper.getDeserializerProvider().cachedDeserializersCount());  AnnoBean bean=mapper.readValue("{ \"y\" : 3 }",AnnoBean.class);  assertNotNull(bean);  assertEquals(1,mapper.getDeserializerProvider().cachedDeserializersCount());  mapper.getDeserializerProvider().flushCachedDeserializers();  assertEquals(0,mapper.getDeserializerProvider().cachedDeserializersCount());}  }
class C{  public boolean is2byte(){  char c=currentChar();  return c == 'D' || c == 'J';}  }
class C{  public static void writeln(boolean b){  writeln(b,true);}  }
class C{  private void parseContext(){  if (this.context == null) {    String ctx=getFileHandler().getName(getFile());    int warIndex=ctx.toLowerCase().lastIndexOf(".war");    if (warIndex >= 0) {      ctx=ctx.substring(0,warIndex);    }    getLogger().debug("Parsed web context = [" + ctx + "]",this.getClass().getName());    setContext(ctx);  }}  }
class C{  public static boolean addOreToIngotSmeltingRecipe(ItemStack aInput,ItemStack aOutput){  aOutput=GT_OreDictUnificator.get(true,aOutput);  if (aInput == null || aOutput == null)   return false;  FurnaceRecipes.smelting().func_151394_a(aInput,GT_Utility.copy(aOutput),0.0F);  return true;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  ArrayList<Integer> list=new ArrayList<Integer>();  System.out.print("Enter a list of integers ending with 0: ");  Integer number=input.nextInt();  while (number.intValue() != 0) {    list.add(number);    number=input.nextInt();  }  shuffle(list);  for (int i=0; i < list.size(); i++) {    System.out.print(list.get(i) + " ");  }  System.out.println();}  }
class C{  public ModeledAuthenticatedUser(AuthenticationProvider authenticationProvider,ModeledUser user,Credentials credentials){  super(authenticationProvider,credentials);  this.modelAuthenticationProvider=authenticationProvider;  this.user=user;}  }
class C{  public static String randomUnicodeString(Random r){  return randomUnicodeString(r,20);}  }
class C{  public String treatZeroAsMissingTipText(){  return "If enabled, zero (that is, the first value of a nominal) is " + "treated in the same way as a missing value.";}  }
class C{  public PrivateKeyUnencryptedException(){  super();}  }
class C{  public ActionType subtypeAsActionType() throws ReplicatorException {  if (type != ETYPE_LCR_DATA) {    throw new ReplicatorException("subtypeAsActionType should be called on DML (LCR_DATA) only");  }switch (this.subtype) {case ESTYPE_LCR_INSERT:    return ActionType.INSERT;case ESTYPE_LCR_UPDATE:  return ActionType.UPDATE;case ESTYPE_LCR_DELETE:return ActionType.DELETE;case ESTYPE_LCR_LOB_WRITE:return ActionType.UPDATE;default :throw new ReplicatorException("subtypeAsActionType: unsupported data LCR subtype " + subtype);}}  }
class C{  @Override public void writeToParcel(Parcel parcel,int flags){  parcel.writeByteArray(getPayload());  parcel.writeInt(getQos());  parcel.writeBooleanArray(new boolean[]{isRetained(),isDuplicate()});  parcel.writeString(messageId);}  }
class C{  @Override public AgentAppFrame createFrame(){  return new OsmAgentFrame();}  }
class C{  public DdlException(Throwable baseEx){  super(baseEx);}  }
class C{  public static ConfigurationSetting updateConfigurationSetting(VOConfigurationSetting voObj,ConfigurationSetting domObj) throws ValidationException, ConcurrentModificationException {  if (domObj.getKey() != 0) {    verifyVersionAndKey(domObj,voObj);  }  validate(domObj,voObj);  copyToDomainAttributes(domObj,voObj);  return domObj;}  }
class C{  public void restoreAutoRangeBounds(){  Plot plot=this.chart.getPlot();  if (plot instanceof Zoomable) {    Zoomable z=(Zoomable)plot;    boolean savedNotify=plot.isNotify();    plot.setNotify(false);    Point2D zp=(this.zoomPoint != null ? this.zoomPoint : new Point());    z.zoomRangeAxes(0.0,this.info.getPlotInfo(),zp);    plot.setNotify(savedNotify);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected void updateCriteriumScalars(int selectedBasis){  Matrix SigmaStuff=(PHI_t.transpose()).times(SIGMA.times(PHI_t));  double S=beta * innerProduct(phi[selectedBasis],phi[selectedBasis]) - beta * beta * innerProduct(phi[selectedBasis],SigmaStuff.times(new Matrix(phi[selectedBasis],phi[selectedBasis].length)).getRowPackedCopy());  double Q=beta * innerProduct(phi[selectedBasis],tVector) - beta * beta * innerProduct(phi[selectedBasis],SigmaStuff.times(new Matrix(t)).getRowPackedCopy());  s=alpha[selectedBasis] * S / (alpha[selectedBasis] - S);  q=alpha[selectedBasis] * Q / (alpha[selectedBasis] - S);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:47.068 -0500",hash_original_method="0630A8D079D2F2EA09859A2EAC923D24",hash_generated_method="207D2E135165673D977230B8DEEA32C8") protected boolean canResponseHaveBody(final HttpRequest request,final HttpResponse response){  if ("HEAD".equalsIgnoreCase(request.getRequestLine().getMethod())) {    return false;  }  int status=response.getStatusLine().getStatusCode();  return status >= HttpStatus.SC_OK && status != HttpStatus.SC_NO_CONTENT && status != HttpStatus.SC_NOT_MODIFIED && status != HttpStatus.SC_RESET_CONTENT;}  }
class C{  private JSONWriter end(char mode,char c) throws JSONException {  if (this.mode != mode) {    throw new JSONException(mode == 'a' ? "Misplaced endArray." : "Misplaced endObject.");  }  this.pop(mode);  try {    this.writer.write(c);  } catch (  IOException e) {    throw new JSONException(e);  }  this.comma=true;  return this;}  }
class C{  @Beta public static <K,V>ImmutableSortedMap<K,V> copyOf(Iterable<? extends Entry<? extends K,? extends V>> entries,Comparator<? super K> comparator){  return fromEntries(checkNotNull(comparator),false,entries);}  }
class C{  public FirebirdBlob detach() throws SQLException {  return new FBBlob(gdsHelper,blob_id,blobListener);}  }
class C{  public long commit2() throws RepositoryException {  if (isAutoCommit() && !((BigdataSailConnection)getSailConnection()).getAllowAutoCommit()) {    throw new RepositoryException("please set autoCommit to false");  }  try {    return getSailConnection().commit2();  } catch (  SailException e) {    throw new RepositoryException(e);  }}  }
class C{  public void test_DELETE_accessPath_delete_c() throws Exception {  if (TestMode.quads != getTestMode())   return;  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.trig");  final URI base=new URIImpl("http://www.bigdata.com/");  final URI c1=new URIImpl("http://www.bigdata.com/c1");  final URI c2=new URIImpl("http://www.bigdata.com/c2");  assertEquals(3,m_repo.rangeCount(null,null,null,base));  assertEquals(2,m_repo.rangeCount(null,null,null,c1));  assertEquals(2,m_repo.rangeCount(null,null,null,c2));  final long mutationResult=doDeleteWithAccessPath(null,null,null,base);  assertEquals(3,mutationResult);  final long rangeCount_base=m_repo.rangeCount(null,null,null,base);  final long rangeCount_c1=m_repo.rangeCount(null,null,null,c1);  final long rangeCount_c2=m_repo.rangeCount(null,null,null,c2);  assertEquals(0,rangeCount_base);  assertEquals(2,rangeCount_c1);  assertEquals(2,rangeCount_c2);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.TRACE_CASE___TRACE_CASE_DEF_1:    getTraceCaseDef_1().clear();  getTraceCaseDef_1().addAll((Collection<? extends TraceCaseDef_>)newValue);return;case UmplePackage.TRACE_CASE___TRACE_CASE_ACTIVATION_1:getTraceCaseActivation_1().clear();getTraceCaseActivation_1().addAll((Collection<? extends TraceCaseActivation_>)newValue);return;case UmplePackage.TRACE_CASE___TRACE_CASE_DEACTIVATION_1:getTraceCaseDeactivation_1().clear();getTraceCaseDeactivation_1().addAll((Collection<? extends TraceCaseDeactivation_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static void main(String[] args) throws CloneNotSupportedException {  System.out.print("Enter the first complex number: ");  Complex complexNumber1=getComplex();  System.out.print("Enter the second complex number: ");  Complex complexNumber2=getComplex();  System.out.print(complexNumber1 + " + " + complexNumber2+ " = ");  print(complexNumber1.add(complexNumber2));  System.out.print(complexNumber1 + " - " + complexNumber2+ " = ");  print(complexNumber1.subtract(complexNumber2));  System.out.print(complexNumber1 + " * " + complexNumber2+ " = ");  print(complexNumber1.multiply(complexNumber2));  System.out.print(complexNumber1 + " / " + complexNumber2+ " = ");  print(complexNumber1.divide(complexNumber2));  System.out.println("|" + complexNumber1 + "| = "+ complexNumber1.abs());}  }
class C{  public Iterator<String> iterator(){  return keySet().iterator();}  }
class C{  private void writeVariableLengthInt(final int value) throws IOException {  int valueToWrite=getValueToWrite(value);  while (true) {    writeByte(valueToWrite & 0xff);    if ((valueToWrite & 0x80) != 0) {      valueToWrite>>>=8;    } else {      break;    }  }}  }
class C{  public void actionPerformed(java.awt.event.ActionEvent e){  String command=e.getActionCommand();  if (Debug.debugging("layerbuttons")) {    Debug.output("LayersPanel.actionPerformed(): " + command);  }  if (command == LayersPanel.LayerTopCmd || command == LayersPanel.LayerBottomCmd || command == LayersPanel.LayerUpCmd || command == LayersPanel.LayerDownCmd || command == LayersPanel.LayerRemoveCmd) {    if (selected != null) {      if (Debug.debugging("layercontrol")) {        Debug.output("LayerControlButtonPanel: button firing " + command + " event for "+ selected.getName());      }      firePropertyChange(command,null,selected);    } else {      if (Debug.debugging("layercontrol")) {        Debug.output("LayerControlButtonPanel: button firing " + command + " event with no layer selected");      }    }    if (command == LayersPanel.LayerRemoveCmd) {      selected=null;      delete.setEnabled(false);    }  } else   if (command.equals(LayersPanel.LayerAddCmd)) {    if (layerAddPanel != null) {      layerAddPanel.showPanel();    }  }}  }
class C{  public boolean isContentProcessed(Trace trace,Node node,Direction direction){  boolean ret=false;  if (trace.getBusinessTransaction() != null) {    List<ProcessorWrapper> procs=null;synchronized (processors) {      procs=processors.get(trace.getBusinessTransaction());    }    if (procs != null) {      for (int i=0; !ret && i < procs.size(); i++) {        ret=procs.get(i).isProcessed(trace,node,direction) && procs.get(i).usesContent();      }    }  }  if (log.isLoggable(Level.FINEST)) {    log.finest("ProcessManager: isContentProcessed trace=" + trace + " node="+ node+ " direction="+ direction+ "? "+ ret);  }  return ret;}  }
class C{  public EaseOutIn(){  this(DEFAULT_AMPLITUDE,DEFAULT_PERIOD);}  }
class C{  public void show(){  show(false,null);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  @Override public int capacity(){  if (queue == null)   return 0;  return queue.capacity();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.IDENTIFIABLE_ELEMENT__NAME:    setName((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void initialize(final Body b1,final Body b2,final Vec2 anchor1,final Vec2 anchor2){  bodyA=b1;  bodyB=b2;  localAnchorA.set(bodyA.getLocalPoint(anchor1));  localAnchorB.set(bodyB.getLocalPoint(anchor2));  Vec2 d=anchor2.sub(anchor1);  length=d.length();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void connect(LocalSocketAddress endpoint) throws IOException {synchronized (this) {    if (isConnected) {      throw new IOException("already connected");    }    implCreateIfNeeded();    impl.connect(endpoint,0);    isConnected=true;    isBound=true;  }}  }
class C{  boolean gridError(Graphics g){  boolean error=false;  if (imageChecker == null || (imageChecker.getWidth() != testW) || (imageChecker.getHeight() != testH)) {    GraphicsConfiguration gc=getGraphicsConfiguration();    ColorModel cm=gc.getColorModel();    WritableRaster wr=cm.createCompatibleWritableRaster(getWidth(),getHeight());    imageChecker=new BufferedImage(cm,wr,cm.isAlphaPremultiplied(),null);  }  Graphics gChecker=imageChecker.getGraphics();  gChecker.drawImage(testImage,0,0,this);  int clippedPixelColor=clippedColor.getRGB();  int unclippedPixelColor=unclippedColor.getRGB();  int wrongPixelColor=clippedPixelColor;  boolean insideClip=false;  for (int row=0; row < getHeight(); ++row) {    for (int col=0; col < getWidth(); ++col) {      if (row >= clipY1 && row < (clipY1 + clipSize) && col >= clipX1 && col < (clipX1 + clipSize)) {        wrongPixelColor=unclippedPixelColor;      } else {        wrongPixelColor=clippedPixelColor;      }      int pixel=imageChecker.getRGB(col,row);      if (pixel == wrongPixelColor) {        System.out.println("FAILED: pixel = " + Integer.toHexString(pixel) + " at (x, y) = "+ col+ ", "+ row);        g.setColor(Color.magenta);        g.drawRect(col - 1,row - 1,2,2);        error=true;      }    }  }  return error;}  }
class C{  public static boolean isTablet(Context context){  if (context == null)   return false;  boolean isTablet=context.getResources().getBoolean(R.bool.isTablet);  return isTablet;}  }
class C{  public double distanceSq(final Int3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return (dx * dx + dy * dy + dz * dz);}  }
class C{  public void apply() throws IllegalStateException {  try {    System.setSecurityManager(this);  } catch (  SecurityException e) {    logger.error("Cannot instantiate mock security manager",e);    throw new IllegalStateException(e);  }}  }
class C{  public AttachmentObject(){  super();}  }
class C{  @SuppressWarnings("unchecked") public final void testValidateWhenAllValidatorsSucceed(){  Validator<Object> validator1=new AbstractValidatorImplementation("foo",true);  Validator<Object> validator2=new AbstractValidatorImplementation("bar",true);  Validator<Object>[] validators=new Validator[2];  validators[0]=validator1;  validators[1]=validator2;  ConjunctiveValidator<Object> conjunctiveValidator=new ConjunctiveValidator<>("foo",validators);  assertTrue(conjunctiveValidator.validate(new Object()));}  }
class C{  public boolean isBrowse(){  return browse;}  }
class C{  public void output(String string){  output.append(string + "\n");}  }
class C{  protected LinkingOp_Impl(){  super();}  }
class C{  private static void assertArrayNotNull(final Object array){  JBBPUtils.assertNotNull(array,"Array must not be null");}  }
class C{  public void onReferClicked(){  if (ENABLED) {    trackOpt("Refer Clicked On Post",null);  }}  }
class C{  private Primes(){}  }
class C{  public Y ne(X value){  return add(" <> ?",value);}  }
class C{  public IonObjectReader(Class typeClass,IIonObjectReaderConfigurator configurator){  this.typeClass=typeClass;  Field[] fields=this.typeClass.getDeclaredFields();  IonFieldReaderConfiguration fieldConfiguration=new IonFieldReaderConfiguration();  for (int i=0; i < fields.length; i++) {    fieldConfiguration.field=fields[i];    fieldConfiguration.include=true;    fieldConfiguration.fieldName=fields[i].getName();    fieldConfiguration.alias=null;    configurator.configure(fieldConfiguration);    if (fieldConfiguration.include) {      if (fieldConfiguration.alias == null) {        putFieldReader(fields[i].getName(),IonUtil.createFieldReader(fields[i],configurator));      } else {        putFieldReader(fieldConfiguration.alias,IonUtil.createFieldReader(fields[i],configurator));      }    }  }}  }
class C{  public String addStepsForUntagVolumes(Workflow workflow,String waitFor,List<VolumeDescriptor> volumes,String taskId) throws ControllerException {  List<VolumeDescriptor> untagVolumeDescriptors=VolumeDescriptor.filterByType(volumes,new VolumeDescriptor.Type[]{VolumeDescriptor.Type.BLOCK_DATA},null);  if (untagVolumeDescriptors.isEmpty()) {    return waitFor;  }  Map<URI,List<VolumeDescriptor>> untagVolumeDeviceMap=VolumeDescriptor.getDeviceMap(untagVolumeDescriptors);  for (  URI deviceURI : untagVolumeDeviceMap.keySet()) {    if (deviceURI != null) {      untagVolumeDescriptors=untagVolumeDeviceMap.get(deviceURI);      List<URI> volumeURIs=VolumeDescriptor.getVolumeURIs(untagVolumeDescriptors);      workflow.createStep(UNTAG_VOLUME_STEP_GROUP,String.format("Untagging volumes:%n%s",getVolumesMsg(_dbClient,volumeURIs)),waitFor,deviceURI,getDeviceType(deviceURI),this.getClass(),untagVolumesMethod(deviceURI,volumeURIs),rollbackMethodNullMethod(),null);      _log.info(String.format("Adding step to untag volumes (%s)",Joiner.on(",").join(volumeURIs)));    }  }  return UNTAG_VOLUME_STEP_GROUP;}  }
class C{  public static void close(FileDescriptor fd) throws IOException {  try {    if (fd != null && fd.valid()) {      Libcore.os.close(fd);    }  } catch (  ErrnoException errnoException) {    throw errnoException.rethrowAsIOException();  }}  }
class C{  public void addValue(String functionColumnName,BigDecimal functionValue){  if (!isFunctionColumn(functionColumnName))   return;  for (int i=0; i < m_groups.size(); i++) {    String groupColumnName=(String)m_groups.get(i);    String key=groupColumnName + DELIMITER + functionColumnName;    PrintDataFunction pdf=(PrintDataFunction)m_groupFunction.get(key);    if (pdf == null)     pdf=new PrintDataFunction();    pdf.addValue(functionValue);    m_groupFunction.put(key,pdf);  }}  }
class C{  public void componentAdded(final ContainerEvent e){  if (e.getContainer() instanceof JRootPane) {    final JRootPane root=(JRootPane)e.getContainer();    if (e.getChild() == root.getLayeredPane()) {      final JLayeredPane layered=root.getLayeredPane();      layered.addContainerListener(this);    }  } else {    if (e.getChild() instanceof JMenuBar) {      final JMenuBar jmb=(JMenuBar)e.getChild();      final MenuBarUI mbui=jmb.getUI();      if (mbui instanceof AquaMenuBarUI) {        final Window owningWindow=SwingUtilities.getWindowAncestor(jmb);        if (owningWindow != null && owningWindow instanceof JFrame) {          ((AquaMenuBarUI)mbui).setScreenMenuBar((JFrame)owningWindow);        }      }    }  }}  }
class C{  public EventEntry(){  super();}  }
class C{  public BaseThumbnailStreamRequest(String requestUrl,IOneDriveClient client,List<Option> options){  super(requestUrl,client,options,Thumbnail.class);}  }
class C{  public boolean containsNode(Node node){  return nodes.contains(node);}  }
class C{  public static void scale(Bitmap src,Bitmap dest){  scale(src,dest,CLEAR_COLOR);}  }
class C{  public Token<HtmlTokenType> next() throws ParseException {  return pending.isEmpty() ? lexer.next() : pending.remove(0);}  }
class C{  @TargetApi(VERSION_CODES.LOLLIPOP) public ListenableFuture<android.hardware.camera2.CameraDevice> openCamera2Device(Lifetime requestLifetime,CameraId cameraId){  CameraDeviceKey key=new CameraDeviceKey(ApiType.CAMERA_API2,cameraId);  return openDevice(requestLifetime,key,mCamera2ActionProvider);}  }
class C{  public void testFirstTermHighestDocFreqAllFields() throws Exception {  int numTerms=12;  String field=null;  TermStats[] terms=HighFreqTerms.getHighFreqTerms(reader,numTerms,field,new HighFreqTerms.DocFreqComparator());  assertEquals("Term with highest docfreq is first",20,terms[0].docFreq);}  }
class C{  public static int lastIndexNotOf(String str,String chars,int fromIndex){  fromIndex=Math.min(fromIndex,str.length() - 1);  for (int pos=fromIndex; pos >= 0; pos--) {    if (chars.indexOf(str.charAt(pos)) < 0) {      return pos;    }  }  return -1;}  }
class C{  public ClassMetaobject(String[] params){  try {    javaClass=getClassObject(params[0]);  } catch (  ClassNotFoundException e) {    throw new RuntimeException("not found: " + params[0] + ", useContextClassLoader: "+ Boolean.toString(useContextClassLoader),e);  }  constructors=javaClass.getConstructors();  methods=null;}  }
class C{  public RequestAnnounce(final byte[] data,final byte[] signature){  this.data=data;  this.signature=signature;}  }
class C{  public void map(Text key,Writable value,OutputCollector<Text,ObjectWritable> output,Reporter reporter) throws IOException {  ObjectWritable objWrite=new ObjectWritable();  objWrite.set(value);  output.collect(key,objWrite);}  }
class C{  public String mapInvokeDynamicMethodName(String name,String desc){  return name;}  }
class C{  public static void checkNotNull(Object object,String message){  if (object == null) {    throw new IllegalArgumentException(message);  }}  }
class C{  @Override public String modelDescription(){  return modelDescription(null);}  }
class C{  public synchronized final void incrementProgressBy(int diff){  setProgress(mProgress + diff);}  }
class C{  public int fillBuffer() throws IOException {  if (readBuffer()) {    return _readLength;  } else {    return -1;  }}  }
class C{  public void addActor(TvShowActor obj){  if (StringUtils.isBlank(obj.getEntityRoot())) {    obj.setEntityRoot(getPathNIO().toString());  }  actors.add(obj);  firePropertyChange(ACTORS,null,this.getActors());}  }
class C{  public boolean check(){  return (m_File != null) && (m_Handler != null) && m_File.exists();}  }
class C{  public static PreviousExpression previousCount(String property){  return new PreviousExpression(PreviousExpressionType.PREVCOUNT,property(property));}  }
class C{  static String normalizeCollection(final String type){  if (isAssignableTo(type,Types.COLLECTION)) {    if (!getTypeParameters(type).isEmpty()) {      return getTypeParameters(type).get(0);    }    return Types.OBJECT;  }  return type;}  }
class C{  public UIViewRootTestCase(String name){  super(name);}  }
class C{  private void checkExternalMods(){  if (modules.getExtModRefList() == null)   return;  for (  final ExtModRefBean extModRef : modules.getExtModRefList()) {    final OffExtModConfBean conf=offExtModConfsBean.getModuleConfForFolder(extModRef.getFolder());    if (conf == null || !Boolean.TRUE.equals(conf.getAutoUpdate()))     continue;    launcherFrame.setProgressIndeterminate(true);    final ModuleBean mod=retrieveExtModuleBean(extModRef);    if (mod == null) {      failedExtMods=true;      continue;    }    if (modules.getRetrievedExtModList() == null)     modules.setRetrievedExtModList(new ArrayList<ModuleBean>());    modules.getRetrievedExtModList().add(mod);    final Path extModPath=LEnv.PATH_EXT_MODS.resolve(mod.getFolder()).resolve(mod.getVersion().toString());    try {      if (Files.exists(extModPath) && Files.isDirectory(extModPath))       validateModule(mod,true); else       updateModule(mod,true,false);    } catch (    final FinishException fe) {      failedExtMods=true;    }    acknowledgeModChecked();  }}  }
class C{  public void paintPanelBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public Builder coordC(Double coordC){  this.coordC=coordC;  return this;}  }
class C{  private static void emitVerify(int argNumber,ArgumentType argEncoding,int level){  emitTab(level);  emit("if (VM.VerifyAssertions && !");  emitTest(argNumber,argEncoding);  emit(") throw new OptimizingCompilerException(\"Unexpected operand \" + inst.toString());\n");}  }
class C{  public boolean isNaN(){  return Float.isNaN(value);}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,Charset encoding) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  Charset cs=Charsets.toCharset(encoding);  for (  Object line : lines) {    if (line != null) {      output.write(line.toString().getBytes(cs));    }    output.write(lineEnding.getBytes(cs));  }}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.179 -0400",hash_original_method="70E4F3C3FEAB5D0D9C0E284738BF962F",hash_generated_method="074D0A761D757E520937CCF7F4BE2EC6") public static byte[] toByteArray(URL url) throws IOException {  URLConnection conn=url.openConnection();  try {    return IOUtils.toByteArray(conn);  }  finally {    close(conn);  }}  }
class C{  public MuteData(UUID muter,String reason,Duration timeFromNextLogin){  this(muter,reason);  this.timeFromNextLogin=timeFromNextLogin.getSeconds();}  }
class C{  public SearchScrollRequest scroll(TimeValue keepAlive){  return scroll(new Scroll(keepAlive));}  }
class C{  public void testGetIndex(){  DefaultPieDataset d=new DefaultPieDataset();  d.setValue("A",1.0);  d.setValue("B",2.0);  assertEquals(0,d.getIndex("A"));  assertEquals(1,d.getIndex("B"));  assertEquals(-1,d.getIndex("XX"));  boolean pass=false;  try {    d.getIndex(null);  } catch (  IllegalArgumentException e) {    pass=true;  }  assertTrue(pass);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.689 -0500",hash_original_method="5A72AC369AA326C1E4BE607E2D1E31FF",hash_generated_method="5A72AC369AA326C1E4BE607E2D1E31FF") void releaseAckSem(){  if (this.isBackToBackUserAgent) {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("releaseAckSem]" + this);    }    this.ackSem.release();  }}  }
class C{  public boolean hasFullName(){  return super.hasElement(FullName.KEY);}  }
class C{  private void writeControlTotals(String folder,String zone){  String[] sa=this.controlTotalsMap.get(zone).split(",");  BufferedWriter bw=null;  bw=IOUtils.getBufferedWriter(folder + "individualCT.dat");  try {    bw.write(String.format("POP\tGEN\tN\n"));    bw.write(String.format("1\t1\t%s\n",sa[2]));    bw.write(String.format("2\t1\t%s\n",sa[3]));    bw.write(String.format("3\t1\t%s\n",sa[4]));    bw.write(String.format("4\t1\t%s\n",sa[5]));    bw.write(String.format("1\t2\t%s\n",sa[6]));    bw.write(String.format("2\t2\t%s\n",sa[7]));    bw.write(String.format("3\t2\t%s\n",sa[8]));    bw.write(String.format("4\t2\t%s",sa[9]));  } catch (  IOException e) {    throw new RuntimeException("Could not write to BufferedWriter for individual control totals for zone " + zone);  } finally {    try {      bw.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedWriter for individual control totals for zone " + zone);    }  }  bw=IOUtils.getBufferedWriter(folder + "groupCT.dat");  try {    bw.write(String.format("INC\tN\n"));    bw.write(String.format("1\t%s\n",sa[10]));    bw.write(String.format("3\t%s\n",sa[11]));    bw.write(String.format("5\t%s\n",sa[12]));    bw.write(String.format("7\t%s\n",sa[13]));    bw.write(String.format("9\t%s\n",sa[14]));    bw.write(String.format("11\t%s\n",sa[15]));    bw.write(String.format("12\t%s",sa[16]));  } catch (  IOException e) {    throw new RuntimeException("Could not write to BufferedWriter for group control totals for zone " + zone);  } finally {    try {      bw.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedWriter for group control totals for zone " + zone);    }  }}  }
class C{  private String createWorkflowStepForResyncNativeSnapshot(Workflow workflow,BlockSnapshot snapshot,String waitFor,Workflow.Method rollbackMethod){  URI snapshotURI=snapshot.getId();  URI parentSystemURI=snapshot.getStorageController();  StorageSystem parentSystem=getDataObject(StorageSystem.class,parentSystemURI,_dbClient);  URI parentVolumeURI=snapshot.getParent().getURI();  Workflow.Method resyncSnapshotMethod=new Workflow.Method(RESYNC_SNAPSHOT_METHOD_NAME,parentSystemURI,parentVolumeURI,snapshotURI,Boolean.FALSE);  workflow.createStep(RESYNC_SNAPSHOT_STEP,String.format("Resynchronize VPLEX backend snapshot %s from source %s",snapshotURI,parentVolumeURI),waitFor,parentSystemURI,parentSystem.getSystemType(),BlockDeviceController.class,resyncSnapshotMethod,rollbackMethod,null);  _log.info("Created workflow step to resync VPLEX backend snapshot {} from source {}",snapshotURI,parentVolumeURI);  return RESYNC_SNAPSHOT_STEP;}  }
class C{  public boolean isDefault(){  for (  String var : map.keySet()) {    if (!map.get(var).equals(ValueFactory.none())) {      return false;    }  }  return true;}  }
class C{  public boolean isTransaction(){  return m_vo.WindowType.equals(GridWindowVO.WINDOWTYPE_TRX);}  }
class C{  public Arg(QName qname,XObject val,boolean isFromWithParam){  m_qname=qname;  m_val=val;  m_isFromWithParam=isFromWithParam;  m_isVisible=!isFromWithParam;  m_expression=null;}  }
class C{  public static UDN uniqueSystemIdentifier(String salt){  StringBuilder systemSalt=new StringBuilder();  if (!ModelUtil.ANDROID_RUNTIME) {    try {      java.net.InetAddress i=java.net.InetAddress.getLocalHost();      systemSalt.append(i.getHostName()).append(i.getHostAddress());    } catch (    Exception ex) {      try {        systemSalt.append(new String(ModelUtil.getFirstNetworkInterfaceHardwareAddress()));      } catch (      Throwable ex1) {        log.severe("Couldn't get host/network interface information on this machine, " + "generated UDN might not be unique!");      }    }  } else {    throw new RuntimeException("This method does not create a unique identifier on Android, see the Javadoc and " + "use new UDN(UUID) instead!");  }  systemSalt.append(System.getProperty("os.name"));  systemSalt.append(System.getProperty("os.version"));  try {    byte[] hash=MessageDigest.getInstance("MD5").digest(systemSalt.toString().getBytes());    return new UDN(new UUID(new BigInteger(-1,hash).longValue(),salt.hashCode()));  } catch (  Exception ex) {    throw new RuntimeException(ex);  }}  }
class C{  private HashMap<String,List<AutoTieringPolicy>> discoverAutoTierPolicies(StorageSystem system,VNXeApiClient apiClient){  HashMap<String,List<AutoTieringPolicy>> policies=new HashMap<String,List<AutoTieringPolicy>>();  List<AutoTieringPolicy> newPolicies=new ArrayList<AutoTieringPolicy>();  List<AutoTieringPolicy> updatePolicies=new ArrayList<AutoTieringPolicy>();  String[] tierPolicies=apiClient.getAutoTierPolicies();  String systemNativeGuid=NativeGUIDGenerator.generateNativeGuid(system);  for (  String policyName : tierPolicies) {    String policyNativeGuid=NativeGUIDGenerator.generateAutoTierPolicyNativeGuid(systemNativeGuid,policyName,NativeGUIDGenerator.FASTPOLICY);    URIQueryResultList result=new URIQueryResultList();    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getAutoTieringPolicyByNativeGuidConstraint(policyNativeGuid),result);    AutoTieringPolicy policy=null;    if (result.iterator().hasNext()) {      policy=_dbClient.queryObject(AutoTieringPolicy.class,result.iterator().next());    }    boolean newPolicy=false;    if (null == policy) {      newPolicy=true;      policy=new AutoTieringPolicy();      policy.setId(URIUtil.createId(AutoTieringPolicy.class));      policy.setStorageSystem(system.getId());      policy.setNativeGuid(policyNativeGuid);      policy.setSystemType(system.getSystemType());    }    policy.setLabel(policyName);    policy.setPolicyName(policyName);    policy.setPolicyEnabled(true);    policy.setProvisioningType(AutoTieringPolicy.ProvisioningType.All.name());    if (newPolicy) {      newPolicies.add(policy);    } else {      updatePolicies.add(policy);    }  }  policies.put(NEW,newPolicies);  policies.put(EXISTING,updatePolicies);  return policies;}  }
class C{  public void preStateChange(State<S,E> state,Message<E> message,Transition<S,E> transition,StateMachine<S,E> stateMachine){  for (  StateMachineInterceptor<S,E> interceptor : interceptors) {    interceptor.preStateChange(state,message,transition,stateMachine);  }}  }
class C{  void onDropChild(View child){  if (child != null) {    LayoutParams lp=(LayoutParams)child.getLayoutParams();    lp.dropped=true;    child.requestLayout();    markCellsAsOccupiedForView(child);  }}  }
class C{  public boolean isInScroll(){  return mInScroll;}  }
class C{  private void readObject(){}  }
class C{  private Process createProcess(final File sourceFile) throws IOException {  notNull(sourceFile);  final String[] commandLine=getCommandLine(sourceFile.getPath());  LOG.debug("CommandLine arguments: {}",Arrays.asList(commandLine));  return new ProcessBuilder(commandLine).redirectErrorStream(true).start();}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  private void enableUpdates(){  if (lmgr != null) {    try {      lmgr.addGpsStatusListener(this);      lmgr.requestLocationUpdates(LocationManager.GPS_PROVIDER,gpsLoggingInterval,0,this);    } catch (    SecurityException e) {      Log.e(TAG,"You denied GPS permission, so this app won't work");    }  }}  }
class C{  private boolean actionText(int only_Warehouse_ID,int only_Product_ID){  String text=m_text.getText();  log.fine(text);  if (text == null || text.length() == 0) {    if (isMandatory())     return false; else {      setValue(null,true);      return true;    }  }  if (text.endsWith("%"))   text=text.toUpperCase(); else   text=text.toUpperCase() + "%";  StringBuffer sql=new StringBuffer("SELECT M_Locator_ID FROM M_Locator ").append(" WHERE IsActive='Y' AND UPPER(Value) LIKE ").append(DB.TO_STRING(text));  if (getOnly_Warehouse_ID() != 0)   sql.append(" AND M_Warehouse_ID=?");  if (getOnly_Product_ID() != 0)   sql.append(" AND (IsDefault='Y' ").append("OR EXISTS (SELECT * FROM M_Product p ").append("WHERE p.M_Locator_ID=M_Locator.M_Locator_ID AND p.M_Product_ID=?)").append("OR EXISTS (SELECT * FROM M_Storage s ").append("WHERE s.M_Locator_ID=M_Locator.M_Locator_ID AND s.M_Product_ID=?))");  String finalSql=MRole.getDefault(Env.getCtx(),false).addAccessSQL(sql.toString(),"M_Locator",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  int M_Locator_ID=0;  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(finalSql,null);    int index=1;    if (only_Warehouse_ID != 0)     pstmt.setInt(index++,only_Warehouse_ID);    if (only_Product_ID != 0) {      pstmt.setInt(index++,only_Product_ID);      pstmt.setInt(index++,only_Product_ID);    }    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      M_Locator_ID=rs.getInt(1);      if (rs.next())       M_Locator_ID=0;    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  SQLException ex) {    log.log(Level.SEVERE,finalSql,ex);  }  try {    if (pstmt != null)     pstmt.close();  } catch (  SQLException ex1) {  }  pstmt=null;  if (M_Locator_ID == 0)   return false;  setValue(new Integer(M_Locator_ID),true);  return true;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMGlyphRefElement(prefix,(AbstractDocument)doc);}  }
class C{  public static void showInputSheet(Component parentComponent,Object message,int messageType,SheetListener listener){  showInputSheet(parentComponent,message,messageType,null,null,null,listener);}  }
class C{  public ByteArrayBuilder(byte[] initialContents,int initialCapacity){  buffer=new ArrayList<>(initialCapacity);  if (initialContents != null) {    append(initialContents);  }}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals(org.compiere.model.GridField.PROPERTY))   setValue(evt.getNewValue());}  }
class C{  public static byte[] serializeToCompressedByteArray(Object value){  try {    ByteArrayOutputStream buffer=new ByteArrayOutputStream();    try (ObjectOutputStream oos=new ObjectOutputStream(new SnappyOutputStream(buffer))){      oos.writeObject(value);    }     return buffer.toByteArray();  } catch (  IOException exn) {    throw new IllegalArgumentException("unable to serialize " + value,exn);  }}  }
class C{  public void beginDrawing(GL10 gl,float viewWidth,float viewHeight){  checkState(STATE_INITIALIZED,STATE_DRAWING);  gl.glBindTexture(GL10.GL_TEXTURE_2D,mTextureID);  gl.glShadeModel(GL10.GL_FLAT);  gl.glEnable(GL10.GL_BLEND);  gl.glBlendFunc(GL10.GL_SRC_ALPHA,GL10.GL_ONE_MINUS_SRC_ALPHA);  gl.glColor4x(0x10000,0x10000,0x10000,0x10000);  gl.glMatrixMode(GL10.GL_PROJECTION);  gl.glPushMatrix();  gl.glLoadIdentity();  gl.glOrthof(0.0f,viewWidth,0.0f,viewHeight,0.0f,1.0f);  gl.glMatrixMode(GL10.GL_MODELVIEW);  gl.glPushMatrix();  gl.glLoadIdentity();  gl.glTranslatef(0.375f,0.375f,0.0f);}  }
class C{  public ObjectFactory(){}  }
class C{  public static void rotateGCD(int[] a,int k){  int gcd=gcd(a.length,k), temp, i, j, p;  for (i=0; i < gcd; i++) {    temp=a[i];    j=i;    while (true) {      p=j + k;      if (p >= a.length)       p=p - a.length;      if (p == i)       break;      a[j]=a[p];      j=p;    }    a[j]=temp;  }}  }
class C{  private static boolean acceptRecord(final SamFilterParams params,final SAMRecord rec){  final int flags=rec.getFlags();  if ((flags & params.requireUnsetFlags()) != 0) {    return false;  }  if ((flags & params.requireSetFlags()) != params.requireSetFlags()) {    return false;  }  if (rec.getAlignmentStart() == 0 && params.excludeUnplaced()) {    return false;  }  final boolean mated=(flags & SamBamConstants.SAM_READ_IS_MAPPED_IN_PROPER_PAIR) != 0;  final boolean unmapped=rec.getReadUnmappedFlag();  if (params.excludeUnmated() && !mated && !unmapped) {    return false;  }  final int minMapQ=params.minMapQ();  if (minMapQ >= 0 && rec.getMappingQuality() < minMapQ) {    return false;  }  final Integer nh=SamUtils.getNHOrIH(rec);  final int maxNH=params.maxAlignmentCount();  if (maxNH >= 0 && nh != null && nh > maxNH) {    return false;  }  if (params.excludeVariantInvalid()) {    if (nh != null && nh == 0) {      return false;    }    if (!rec.getReadUnmappedFlag() && rec.getAlignmentStart() <= 0) {      return false;    }  }  final IntegerOrPercentage maxAS=mated ? params.maxMatedAlignmentScore() : params.maxUnmatedAlignmentScore();  if (maxAS != null) {    final Integer as=rec.getIntegerAttribute(SamUtils.ATTRIBUTE_ALIGNMENT_SCORE);    if (as != null && as > maxAS.getValue(rec.getReadLength())) {      return false;    }  }  return true;}  }
class C{  SubMap(ConcurrentSkipListMap<K,V> map,K fromKey,boolean fromInclusive,K toKey,boolean toInclusive,boolean isDescending){  if (fromKey != null && toKey != null && map.compare(fromKey,toKey) > 0)   throw new IllegalArgumentException("inconsistent range");  this.m=map;  this.lo=fromKey;  this.hi=toKey;  this.loInclusive=fromInclusive;  this.hiInclusive=toInclusive;  this.isDescending=isDescending;}  }
class C{  @Override public void broadcast(ChannelEvent event){  for (  ChannelEventListener listener : mListeners) {    listener.channelChanged(event);  }  if (event.getChannel().getChannelType() == ChannelType.STANDARD) {switch (event.getEvent()) {case NOTIFICATION_CONFIGURATION_CHANGE:case NOTIFICATION_PROCESSING_START:case NOTIFICATION_PROCESSING_STOP:case NOTIFICATION_SELECTION_CHANGE:      int index=mChannels.indexOf(event.getChannel());    fireTableRowsUpdated(index,index);  break;default :break;}}if (event.getEvent() == Event.REQUEST_DELETE) {removeChannel(event.getChannel());}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:45.897 -0500",hash_original_method="C32C8611EF5F2627AFE89485D07DC5FB",hash_generated_method="2C323292DDEB32D1F5154AFD362D1329") public Builder addParameter(String kind,String value){  if (!TextUtils.isEmpty(value)) {    mKinds.add(kind);    mValues.add(value);  }  return this;}  }
class C{  @Override public void shortWrite(ObjectReference src,Address slot,short value,Word metaDataA,Word metaDataB,int mode){  VM.barriers.shortWrite(src,value,metaDataA,metaDataB,mode);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN}) @Path("/storage-systems") public TaskResourceRep addStorageSystem(StorageSystemSMISCreateParam param) throws ControllerException {  TaskResourceRep taskRep;  URIQueryResultList list=new URIQueryResultList();  ArgValidator.checkFieldNotEmpty(param.getSystemType(),"system_type");  if (!StorageSystem.Type.isProviderStorageSystem(param.getSystemType())) {    throw APIException.badRequests.cannotAddStorageSystemTypeToStorageProvider(param.getSystemType());  }  if ((Type.valueOf(param.getSystemType()) == Type.vnxblock) && StringUtils.isNotBlank(param.getIpAddress())) {    ArgValidator.checkFieldNotEmpty(param.getSecondaryIPs(),"secondary_ips");    ArgValidator.checkFieldNotEmpty(param.getSecondaryIPs().get(0),"secondary_ips");    ArgValidator.checkFieldNotEmpty(param.getPassword(),"password");    ArgValidator.checkFieldNotEmpty(param.getUserName(),"userName");  }  if (param.getSmisProviders() == null || param.getSmisProviders().isEmpty()) {    throw APIException.badRequests.invalidParameterSMISProviderListIsEmpty();  }  ArgValidator.checkFieldNotEmpty(param.getSerialNumber(),"serialNumber");  String nativeGuid=NativeGUIDGenerator.generateNativeGuid(param.getSystemType(),param.getSerialNumber());  List<StorageSystem> systems=CustomQueryUtility.getActiveStorageSystemByNativeGuid(_dbClient,nativeGuid);  if (systems != null && !systems.isEmpty()) {    throw APIException.badRequests.invalidParameterProviderStorageSystemAlreadyExists("nativeGuid",nativeGuid);  }  String taskId=UUID.randomUUID().toString();  URI[] providers=new URI[param.getSmisProviders().size()];  int idx=0;  for (  URI provider : param.getSmisProviders()) {    StorageProvider providerObj=_dbClient.queryObject(StorageProvider.class,provider);    ArgValidator.checkEntity(providerObj,provider,isIdEmbeddedInURL(provider));    if (!providerObj.connected()) {      throw APIException.badRequests.invalidParameterSMISProviderNotConnected(providerObj.getIPAddress());    }    providers[idx++]=provider;  }  StorageSystem system=prepareStorageSystem(param);  BlockController controller=getController(BlockController.class,param.getSystemType());  Operation op=_dbClient.createTaskOpStatus(StorageSystem.class,system.getId(),taskId,ResourceOperationTypeEnum.CREATE_STORAGE_SYSTEM);  controller.addStorageSystem(system.getId(),providers,true,taskId);  return toTask(system,taskId,op);}  }
class C{  @SuppressWarnings("deprecation") public CLQueue createQueue(CLContext context,QueueProperties... queueProperties){}  }
class C{  public <K>List<ClusterNode> mapKeyToPrimaryAndBackups(@Nullable String cacheName,K key,AffinityTopologyVersion topVer) throws IgniteCheckedException {  A.notNull(key,"key");  AffinityInfo affInfo=affinityCache(cacheName,topVer);  if (affInfo == null)   return Collections.emptyList();  int part=partition(cacheName,key,affInfo);  return affInfo.assignment.get(part);}  }
class C{  public static String quoteJavaStringArray(String[] array){  if (array == null) {    return "null";  }  StatementBuilder buff=new StatementBuilder("new String[]{");  for (  String a : array) {    buff.appendExceptFirst(", ");    buff.append(quoteJavaString(a));  }  return buff.append('}').toString();}  }
class C{  public static void e(String tag,String s,Throwable e){  if (LOG.ERROR >= LOGLEVEL)   Log.e(tag,s,e);}  }
class C{  public DatabaseConnectionDialog(Frame parentFrame){  this(parentFrame,"","");}  }
class C{  public GOCDataBuilder withLastNotifiedAt(final long smLastNotifiedAtc){  this.smLastNotifiedAtc=smLastNotifiedAtc;  return this;}  }
class C{  public TransactionInput(NetworkParameters params,Transaction parentTransaction,byte[] payload,int offset) throws ProtocolException {  super(params,payload,offset);  this.parentTransaction=parentTransaction;}  }
class C{  public int isInWhichTier(Node node){  for (int i=0; i < tierSpecs.size(); i++) {    Set<MyNode> tier=tierSpecs.get(i);    for (    MyNode myNode : tier) {      if (myNode.getName().equals(node.getName())) {        return i;      }    }  }  return -1;}  }
class C{  private static void initLibraries(){  Security.addProvider(new BouncyCastleProvider());  AxolotlLoggerProvider.setProvider(new AxolotlLoggerImpl());}  }
class C{  protected QName createQName(String name){  return new QName(name);}  }
class C{  public static void testPrim2Prim(){  for (  Wrapper from : Wrapper.values()) {    for (    Wrapper to : Wrapper.values()) {      if (from == Wrapper.VOID || to == Wrapper.VOID || from == Wrapper.OBJECT || to == Wrapper.OBJECT) {        continue;      }      Object value=RANDOM_VALUES.get(from);      Object convValue=to.wrap(value);      for (      TestConversionMode mode : TestConversionMode.values()) {        testConversion(mode,from.primitiveType(),to.primitiveType(),value,convValue,false,null);      }    }  }}  }
class C{  @Override protected void checkCompatibility(ExampleSet exampleSet) throws OperatorException {}  }
class C{  public static boolean isUrlGcp(@Nullable String url){  return (url != null && (StringUtil.startsWithIgnoreCase(url,GOOGLE_URL) || StringUtil.startsWithIgnoreCase(url,GOOGLE_URL_ALT)));}  }
class C{  private Object doGetValue(int rowPos,int colPos) throws LookupException {  Object rVal=null;  if (rowPos != -1) {    try {      Vector<?> row=(Vector<?>)m_data.elementAt(rowPos);      rVal=row.elementAt(colPos);    } catch (    Throwable t) {      throw new LookupException(t,"Out of bounds");    }  }  return (rVal);}  }
class C{  public static void run(Options options) throws Exception {  boolean isPub=options.get(OPT_PUB);  DevelopmentProvider tp=new DevelopmentProvider();  Topology top;  if (isPub) {    PublisherApp publisher=new PublisherApp(tp,options);    top=publisher.buildAppTopology();  } else {    SubscriberApp subscriber=new SubscriberApp(tp,options);    top=subscriber.buildAppTopology();  }  System.out.println("Using MQTT broker at " + options.get(OPT_SERVER_URI) + "\n"+ (isPub ? "Publishing" : "Subscribing")+ " to topic "+ options.get(OPT_TOPIC));  System.out.println("Console URL for the job: " + tp.getServices().getService(HttpServer.class).getConsoleUrl());  tp.submit(top);}  }
class C{  public ImplPermissions(int allow,int deny){  this.allowed=allow;  this.denied=deny;}  }
class C{  @Override public void onDestroyView(){  if (getDialog() != null && getRetainInstance()) {    getDialog().setDismissMessage(null);  }  super.onDestroyView();}  }
class C{  public HexStatusLine(Composite parent,int style,boolean withLeftSeparator){  super(parent,style);  initialize(withLeftSeparator);}  }
class C{  @TargetApi(21) public static MovieDetailsFragment newInstance(MovieListFragment.ViewHolder vh){  MovieDetailsFragment fragment=new MovieDetailsFragment();  Bundle args=new Bundle();  args.putInt(BUNDLE_KEY_MOVIEID,vh.movieId);  args.putString(BUNDLE_KEY_MOVIETITLE,vh.movieTitle);  args.putString(BUNDLE_KEY_MOVIEPLOT,vh.movieTagline);  args.putString(BUNDLE_KEY_MOVIEGENRES,vh.movieGenres);  args.putInt(BUNDLE_KEY_MOVIEYEAR,vh.movieYear);  args.putInt(BUNDLE_KEY_MOVIERUNTIME,vh.movieRuntime);  args.putDouble(BUNDLE_KEY_MOVIERATING,vh.movieRating);  if (Utils.isLollipopOrLater()) {    args.putString(POSTER_TRANS_NAME,vh.artView.getTransitionName());  }  fragment.setArguments(args);  return fragment;}  }
class C{  public static int versionStringToInt(String version){  return new Version(version).intValue();}  }
class C{  public MutableDouble(final String value) throws NumberFormatException {  super();  this.value=Double.parseDouble(value);}  }
class C{  @NotNull default B append(@NotNull CharSequence cs,int start,int end) throws IndexOutOfBoundsException, BufferOverflowException {  BytesInternal.appendUtf8(this,cs,start,end - start);  return (B)this;}  }
class C{  public List<Note> queryForAllInRect(Box box){  return noteDao.queryForAllInRect(box);}  }
class C{  public void addAllOf(DoubleArrayList values){  addAllOfFromTo(values,0,values.size() - 1);}  }
class C{  public void part(){  bot.sendRaw().rawLine("PART " + channel.getName());}  }
class C{  private IgniteConfiguration config(String name,TcpDiscoveryVmIpFinder ipFinder) throws Exception {  CacheConfiguration dataCcfg=new CacheConfiguration();  dataCcfg.setName(DATA_CACHE_NAME);  dataCcfg.setCacheMode(CacheMode.REPLICATED);  dataCcfg.setAtomicityMode(TRANSACTIONAL);  dataCcfg.setWriteSynchronizationMode(FULL_SYNC);  dataCcfg.setAffinityMapper(new DummyAffinityMapper(1));  dataCcfg.setMaxConcurrentAsyncOperations(1);  CacheConfiguration metaCcfg=new CacheConfiguration();  metaCcfg.setName(META_CACHE_NAME);  metaCcfg.setCacheMode(CacheMode.REPLICATED);  metaCcfg.setAtomicityMode(TRANSACTIONAL);  metaCcfg.setWriteSynchronizationMode(FULL_SYNC);  FileSystemConfiguration igfsCfg=new FileSystemConfiguration();  igfsCfg.setDefaultMode(IgfsMode.PRIMARY);  igfsCfg.setDataCacheName(DATA_CACHE_NAME);  igfsCfg.setMetaCacheName(META_CACHE_NAME);  igfsCfg.setFragmentizerEnabled(false);  igfsCfg.setBlockSize(1024);  IgniteConfiguration cfg=getConfiguration(name);  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();  discoSpi.setIpFinder(ipFinder);  cfg.setDiscoverySpi(discoSpi);  cfg.setCacheConfiguration(dataCcfg,metaCcfg);  cfg.setFileSystemConfiguration(igfsCfg);  cfg.setLocalHost("127.0.0.1");  cfg.setConnectorConfiguration(null);  cfg.setSystemThreadPoolSize(2);  cfg.setRebalanceThreadPoolSize(1);  cfg.setPublicThreadPoolSize(1);  return cfg;}  }
class C{  protected void referenceCache(int index){  if (cache == null) {    return;  }  if (index == cache.LRU_head) {    return;  } else   if (index == cache.LRU_tail) {    cache.LRU_tail=cache.subframe[cache.LRU_tail].prevSubframe;  } else {    int next=cache.subframe[index].nextSubframe;    int prev=cache.subframe[index].prevSubframe;    cache.subframe[next].prevSubframe=prev;    cache.subframe[prev].nextSubframe=next;  }  cache.subframe[cache.LRU_head].prevSubframe=index;  cache.subframe[index].nextSubframe=cache.LRU_head;  cache.LRU_head=index;}  }
class C{  public World createWorldFromSaveGame(File file) throws FileNotFoundException, IOException, IllegalStateException, MinecraftInterfaceException, MojangApiParsingException {  MinecraftInterface minecraftInterface=this.minecraftInterface;  if (minecraftInterface != null) {    return worldBuilder.fromSaveGame(minecraftInterface,SaveDirectory.from(file));  } else {    throw new IllegalStateException("cannot create a world without a minecraft interface");  }}  }
class C{  public MultipleCategorySeries(String title){  mTitle=title;}  }
class C{  public boolean isObscure(){  return obscure;}  }
class C{  public WriteBuffer put(byte[] bytes,int offset,int length){  ensureCapacity(length).put(bytes,offset,length);  return this;}  }
class C{  public List toBeanList(ResultSet rs,Class type) throws SQLException {  List results=new ArrayList();  if (!rs.next()) {    return results;  }  PropertyDescriptor[] props=this.propertyDescriptors(type);  ResultSetMetaData rsmd=rs.getMetaData();  int[] columnToProperty=this.mapColumnsToProperties(rsmd,props);  do {    results.add(this.createBean(rs,type,props,columnToProperty));  } while (rs.next());  return results;}  }
class C{  public void processValueChange(ValueChangeEvent event) throws AbortProcessingException {  String selectedMarketplaceId=(String)event.getNewValue();  if (selectedMarketplaceId.equals("0")) {    marketplaceBean.setMarketplaceId(null);  } else {    marketplaceBean.setMarketplaceId(selectedMarketplaceId);  }  resetMembers();  resetStage();  this.marketplaceBean.processValueChange(event);}  }
class C{  public Builder deleteRole(Role role){  Role deleteRole=new Role.Builder().setValue(role.getValue()).setOperation(DELETE).build();  roles.add(deleteRole);  return this;}  }
class C{  public void displayMessage(String message){}  }
class C{  public void onAnimationRepeat(Animator animation){}  }
class C{  protected final void assertLogThrowableMessageContains(String needle){  LoggingEvent hit=null;  Iterator<LoggingEvent> iter=loggedEvents.iterator();  while (hit == null && iter.hasNext()) {    LoggingEvent event=iter.next();    if (event.getThrowableInformation().getThrowable().toString().contains(needle)) {      hit=event;    }  }  assertNotNull("Could not find log message with a Throwable containing '" + needle + "'",hit);  assertTrue("Could not remove log message with a Throwable containing '" + needle + "'",loggedEvents.remove(hit));}  }
class C{  public void removePubGruuParam(){  if (parameters != null)   parameters.delete(ParameterNames.PUB_GRUU);}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  TaskUtils.sendSelfPatch(this,buildPatch(TaskState.TaskStage.FAILED,e));}  }
class C{  public void snapshotSession(final String fileName,final SessionListener callback){  getSession().snapshot(fileName,callback);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:19.216 -0400",hash_original_method="432A9B2ACB5398DF220568E8BD2B2E52",hash_generated_method="DB8BAD6F4A7B51A7E28791ECC9677AA8") public boolean isMixed(){  return direction == UBiDiDirection_UBIDI_MIXED;}  }
class C{  public void fireDOMNodeRemovedFromDocumentEvent(){  AbstractDocument doc=getCurrentDocument();  if (doc.getEventsEnabled()) {    super.fireDOMNodeRemovedFromDocumentEvent();    for (Node n=getFirstChild(); n != null; n=n.getNextSibling()) {      ((AbstractNode)n).fireDOMNodeRemovedFromDocumentEvent();    }  }}  }
class C{  private boolean isAngleAtFront(double angle){  return (Math.sin(Math.toRadians(angle)) < 0.0);}  }
class C{  public StringModel(Object object,BeansWrapper wrapper){  super(object,wrapper);}  }
class C{  @Override public SpatialSampledVertexDecorator<V> createVertex(V delegate){  return new SpatialSampledVertexDecorator<V>(delegate);}  }
class C{  public boolean isRejectRecipientNotFound(){  return fieldRejectRecipientNotFound;}  }
class C{  private void tql2(){  for (int i=1; i < n; i++) {    e[i - 1]=e[i];  }  e[n - 1]=0.0;  double f=0.0;  double tst1=0.0;  double eps=Math.pow(2.0,-52.0);  for (int l=0; l < n; l++) {    tst1=Math.max(tst1,Math.abs(d[l]) + Math.abs(e[l]));    int m=l;    while (m < n) {      if (Math.abs(e[m]) <= eps * tst1) {        break;      }      m++;    }    if (m > l) {      int iter=0;      do {        iter=iter + 1;        double g=d[l];        double p=(d[l + 1] - g) / (2.0 * e[l]);        double r=Algebra.hypot(p,1.0);        if (p < 0) {          r=-r;        }        d[l]=e[l] / (p + r);        d[l + 1]=e[l] * (p + r);        double dl1=d[l + 1];        double h=g - d[l];        for (int i=l + 2; i < n; i++) {          d[i]-=h;        }        f=f + h;        p=d[m];        double c=1.0;        double c2=c;        double c3=c;        double el1=e[l + 1];        double s=0.0;        double s2=0.0;        for (int i=m - 1; i >= l; i--) {          c3=c2;          c2=c;          s2=s;          g=c * e[i];          h=c * p;          r=Algebra.hypot(p,e[i]);          e[i + 1]=s * r;          s=e[i] / r;          c=p / r;          p=c * d[i] - s * g;          d[i + 1]=h + s * (c * g + s * d[i]);          for (int k=0; k < n; k++) {            h=V[k][i + 1];            V[k][i + 1]=s * V[k][i] + c * h;            V[k][i]=c * V[k][i] - s * h;          }        }        p=-s * s2 * c3* el1* e[l] / dl1;        e[l]=s * p;        d[l]=c * p;      } while (Math.abs(e[l]) > eps * tst1);    }    d[l]=d[l] + f;    e[l]=0.0;  }  for (int i=0; i < n - 1; i++) {    int k=i;    double p=d[i];    for (int j=i + 1; j < n; j++) {      if (d[j] < p) {        k=j;        p=d[j];      }    }    if (k != i) {      d[k]=d[i];      d[i]=p;      for (int j=0; j < n; j++) {        p=V[j][i];        V[j][i]=V[j][k];        V[j][k]=p;      }    }  }}  }
class C{  public void printPopulationForHumans(final EvolutionState state,final int log){  state.output.println(NUM_SUBPOPS_PREAMBLE + subpops.length,log);  for (int i=0; i < subpops.length; i++) {    state.output.println(SUBPOP_INDEX_PREAMBLE + i,log);    subpops[i].printSubpopulationForHumans(state,log);  }}  }
class C{  SharedFsTimeData(long expTime,long lastAcsTime,String key){  assert expTime >= 0;  assert lastAcsTime > 0;  this.lastAcsTime=lastAcsTime;  this.expTime=expTime;  this.key=key;}  }
class C{  public static NbtTag readTagCompressed(File in,NbtLimiter limiter) throws IOException {  return readTagCompressed(new FileInputStream(in),limiter);}  }
class C{  protected double distanceToHrect(KDTreeNode node,Instance x) throws Exception {  double distance=0.0;  Instance closestPoint=(Instance)x.copy();  boolean inside;  inside=clipToInsideHrect(node,closestPoint);  if (!inside)   distance=m_EuclideanDistance.distance(closestPoint,x);  return distance;}  }
class C{  public SelectClicked(Collection<DefaultNode> paintedNodes,GraphPanel component,Color color){  this.paintedNodes=paintedNodes;  this.component=component;  this.color=color;}  }
class C{  public Optional<Map<String,Rule>> fetch() throws NotificationStoreException {  final FetchMap fetchMap=new FetchMap.Builder(LOCATION).withOption(FetchDatatype.Option.INCLUDE_CONTEXT,false).build();  LOGGER.debug("Fetching key: {}",LOCATION);  try (Timer.Context context=fetchTimer.time()){    final FetchMap.Response response=client.execute(fetchMap);    final RiakMap map=response.getDatatype();    if (map == null) {      return Optional.empty();    }    return Optional.of(getRules(map));  } catch (  ExecutionException e) {    LOGGER.error("Unable to fetch key: " + LOCATION,e);    throw new NotificationStoreException(e);  }catch (  InterruptedException e) {    LOGGER.warn("Fetch request was interrupted",e);    Thread.currentThread().interrupt();    throw new NotificationStoreException(e);  }}  }
class C{  public int write(OutputStreamWithBuffer os,char[] cbuf,int off,int len) throws IOException {  for (int i=0; i < len; i++) {    os.write(cbuf[off + i]);  }  return len;}  }
class C{  public Address nextChunk(Address chunk){  return nextChunk(chunk,chunk);}  }
class C{  public Builder database(int database){  this.database=database;  return this;}  }
class C{  private static void addInputField(JFormattedTextField input,String labelText,java.awt.Container cont,Object initialValue,PropertyChangeListener pcl){  JLabel label=new JLabel(labelText);  label.setHorizontalAlignment(JLabel.RIGHT);  cont.add(label);  input.setValue(initialValue);  input.setHorizontalAlignment(JFormattedTextField.RIGHT);  input.addPropertyChangeListener("value",pcl);  cont.add(input);  label.setLabelFor(input);}  }
class C{  public static void loop(MastersSlavesListener listener,final List<HostAddress> addresses,SearchFilter searchFilter) throws QueryException {  MastersSlavesProtocol protocol;  ArrayDeque<HostAddress> loopAddresses=new ArrayDeque<>((!addresses.isEmpty()) ? addresses : listener.getBlacklistKeys());  if (loopAddresses.isEmpty()) {    loopAddresses.addAll(listener.getUrlParser().getHostAddresses());  }  int maxConnectionTry=listener.getRetriesAllDown();  QueryException lastQueryException=null;  while (!loopAddresses.isEmpty() || (!searchFilter.isFailoverLoop() && maxConnectionTry > 0)) {    protocol=getNewProtocol(listener.getProxy(),listener.getUrlParser());    if (listener.isExplicitClosed() || (!listener.isSecondaryHostFailReconnect() && !listener.isMasterHostFailReconnect())) {      return;    }    maxConnectionTry--;    try {      HostAddress host=loopAddresses.pollFirst();      if (host == null) {        loopAddresses.addAll(listener.getUrlParser().getHostAddresses());        host=loopAddresses.pollFirst();      }      protocol.setHostAddress(host);      protocol.connect();      if (listener.isExplicitClosed()) {        protocol.close();        return;      }      listener.removeFromBlacklist(protocol.getHostAddress());      if (listener.isMasterHostFailReconnect() && protocol.isMasterConnection()) {        if (foundMaster(listener,protocol,searchFilter)) {          return;        }      } else       if (listener.isSecondaryHostFailReconnect() && !protocol.isMasterConnection()) {        if (foundSecondary(listener,protocol,searchFilter)) {          return;        }      } else {        protocol.close();      }    } catch (    QueryException e) {      lastQueryException=e;      listener.addToBlacklist(protocol.getHostAddress());    }    if (!listener.isMasterHostFailReconnect() && !listener.isSecondaryHostFailReconnect()) {      return;    }    if (loopAddresses.isEmpty() && !searchFilter.isFailoverLoop() && maxConnectionTry > 0) {      loopAddresses=new ArrayDeque<>(listener.getBlacklistKeys());    }  }  if (listener.isMasterHostFailReconnect() || listener.isSecondaryHostFailReconnect()) {    String error="No active connection found for replica";    if (listener.isMasterHostFailReconnect()) {      error="No active connection found for master";    }    if (lastQueryException != null) {      throw new QueryException(error + " : " + lastQueryException.getMessage(),lastQueryException.getErrorCode(),lastQueryException.getSqlState(),lastQueryException);    }    throw new QueryException(error);  }}  }
class C{  private CountingSource(){}  }
class C{  @Nullable public static PsiElement[] adjustForMove(Project project,final PsiElement[] sourceElements,final PsiElement targetElement){  for (  MoveHandlerDelegate delegate : Extensions.getExtensions(MoveHandlerDelegate.EP_NAME)) {    if (delegate.canMove(sourceElements,targetElement)) {      return delegate.adjustForMove(project,sourceElements,targetElement);    }  }  return sourceElements;}  }
class C{  public void insertBefore(final AbstractInsnNode location,final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  AbstractInsnNode ifirst=insns.first;  AbstractInsnNode ilast=insns.last;  AbstractInsnNode prev=location.prev;  if (prev == null) {    first=ifirst;  } else {    prev.next=ifirst;  }  location.prev=ilast;  ilast.next=location;  ifirst.prev=prev;  cache=null;  insns.removeAll(false);}  }
class C{  public String toString(){  String result;  result=super.toString();  result=result.substring(0,result.length() - 1);  result+=",url=" + m_DbUtils.getDatabaseURL() + ",user="+ m_DbUtils.getUsername()+ ",password="+ m_DbUtils.getPassword().replaceAll(".","*")+ ",connected="+ isConnected()+ ",exception="+ getException()+ "]";  return result;}  }
class C{  private static int[] parsePortAttribute(final String portValue) throws MalformedCookieException {  StringTokenizer st=new StringTokenizer(portValue,",");  int[] ports=new int[st.countTokens()];  try {    int i=0;    while (st.hasMoreTokens()) {      ports[i]=Integer.parseInt(st.nextToken().trim());      if (ports[i] < 0) {        throw new MalformedCookieException("Invalid Port attribute.");      }      ++i;    }  } catch (  NumberFormatException e) {    throw new MalformedCookieException("Invalid Port " + "attribute: " + e.getMessage());  }  return ports;}  }
class C{  public boolean generate(Projection proj){  setNeedToRegenerate(true);  if (proj == null) {    Debug.message("omgraphic","OMLine: null projection in generate!");    return false;  }  isPolyline=false;  initLabelingDuringGenerate();  GeneralPath projectedShape=null;switch (renderType) {case RENDERTYPE_XY:    if (pts == null) {      return false;    }  if (arc != null) {    xpoints=new float[1][];    ypoints=new float[1][];    arc.generate(pts[0],pts[1],pts[2],pts[3]);    xpoints[0]=arc.getXPoints();    ypoints[0]=arc.getYPoints();  } else {    xpoints=new float[1][2];    ypoints=new float[1][2];    xpoints[0][0]=pts[0];    ypoints[0][0]=pts[1];    xpoints[0][1]=pts[2];    ypoints[0][1]=pts[3];  }projectedShape=createShape(xpoints[0],ypoints[0],false);break;case RENDERTYPE_OFFSET:if (pts == null || latlons == null || !proj.isPlotable(latlons[0],latlons[1])) {setNeedToRegenerate(true);return false;}Point p1=(Point)proj.forward(latlons[0],latlons[1],new Point());if (arc != null) {xpoints=new float[1][];ypoints=new float[1][];arc.generate(p1.x + pts[0],p1.y + pts[1],p1.x + pts[2],p1.y + pts[3]);xpoints[0]=arc.getXPoints();ypoints[0]=arc.getYPoints();} else {xpoints=new float[1][2];ypoints=new float[1][2];xpoints[0][0]=p1.x + pts[0];ypoints[0][0]=p1.y + pts[1];xpoints[0][1]=p1.x + pts[2];ypoints[0][1]=p1.y + pts[3];}projectedShape=createShape(xpoints[0],ypoints[0],false);break;case RENDERTYPE_LATLON:if (latlons == null) {setNeedToRegenerate(true);return false;}if (arc != null) {p1=(Point)proj.forward(latlons[0],latlons[1],new Point());Point p2=(Point)proj.forward(latlons[2],latlons[3],new Point());xpoints=new float[1][];ypoints=new float[1][];arc.generate(p1.x,p1.y,p2.x,p2.y);xpoints[0]=arc.getXPoints();ypoints[0]=arc.getYPoints();projectedShape=createShape(xpoints[0],ypoints[0],false);isPolyline=true;} else {ArrayList<float[]> lines=null;if (proj instanceof GeoProj) {lines=((GeoProj)proj).forwardLine(new LatLonPoint.Double(latlons[0],latlons[1]),new LatLonPoint.Double(latlons[2],latlons[3]),lineType,nsegs);} else {lines=proj.forwardLine(new Point2D.Double(latlons[1],latlons[0]),new Point2D.Double(latlons[3],latlons[2]));}int size=lines.size();xpoints=new float[(int)(size / 2)][0];ypoints=new float[xpoints.length][0];for (int i=0, j=0; i < size; i+=2, j++) {float[] xps=(float[])lines.get(i);float[] yps=(float[])lines.get(i + 1);xpoints[j]=xps;ypoints[j]=yps;GeneralPath gp=createShape(xps,yps,false);projectedShape=appendShapeEdge(projectedShape,gp,false);}isPolyline=(lineType != LINETYPE_STRAIGHT);}break;case RENDERTYPE_UNKNOWN:System.err.println("OMLine.generate: invalid RenderType");setNeedToRegenerate(true);return false;}setShape(projectedShape);setLabelLocation(projectedShape,proj);if (arrowhead != null) {arrowhead.generate(this);}if (arc != null) {arc.generate(proj);}setNeedToRegenerate(false);return true;}  }
class C{  public static long deadlocks(){  long[] deadlockIDs=ManagementFactory.getThreadMXBean().findDeadlockedThreads();  if (deadlockIDs == null)   return 0;  return deadlockIDs.length;}  }
class C{  public ModelAndView deleteRepresentante(HttpServletRequest request,HttpServletResponse response,HttpSession session){  ArrayList interesados=(ArrayList)WebUtils.getOrCreateSessionAttribute(session,INTERESADOS,ArrayList.class);  String idInteresadosToResetRepresentante=WebUtils.findParameterValue(request,"interesadosToResetRepresentante");  String[] ids=null;  if (StringUtils.isNotBlank(idInteresadosToResetRepresentante)) {    ids=idInteresadosToResetRepresentante.split(",");  }  if (!ArrayUtils.isEmpty(ids)) {    List<Predicate> predicates=new ArrayList<Predicate>();    for (    String id : ids) {      predicates.add(new BeanPropertyValueEqualsPredicate("tercero.id",id));    }    Collection interesadosToResetRepresentante=CollectionUtils.select(interesados,PredicateUtils.anyPredicate(predicates));    CollectionUtils.forAllDo(interesadosToResetRepresentante,ClosureUtils.invokerClosure("setRepresentante",new Class[]{RepresentanteInteresadoVO.class},new Object[]{null}));  } else {    if (logger.isDebugEnabled()) {      logger.debug("No se elimina ningun representante porque no se ha recibido ningun identificador");    }  }  return new ModelAndView("forward:/interesado/crud.action?method=listInteresados");}  }
class C{  public static void load(String pathName){  Runtime.getRuntime().load0(pathName,RVMClass.getClassLoaderFromStackFrame(1),true);}  }
class C{  public void UnsetInstanceOption(){  OptionInstance=false;}  }
class C{  public void lerp(Vector4f input,Vector4f output,float t){  output.points[0]=(points[0] * (1.0f * t) + input.points[0] * t);  output.points[1]=(points[1] * (1.0f * t) + input.points[1] * t);  output.points[2]=(points[2] * (1.0f * t) + input.points[2] * t);  output.points[3]=(points[3] * (1.0f * t) + input.points[3] * t);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","cust");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public void runTest() throws Throwable {  Document doc;  EntityReference newEntRefNode;  String entRefValue;  String entRefName;  int entRefType;  doc=(Document)load("staff",true);  newEntRefNode=doc.createEntityReference("ent1");  assertNotNull("createdEntRefNotNull",newEntRefNode);  entRefValue=newEntRefNode.getNodeValue();  assertNull("value",entRefValue);  entRefName=newEntRefNode.getNodeName();  assertEquals("name","ent1",entRefName);  entRefType=(int)newEntRefNode.getNodeType();  assertEquals("type",5,entRefType);}  }
class C{  @Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){  Number value=dataset.getValue(row,column);  if (value != null) {    double x1=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());    double y1=rangeAxis.valueToJava2D(value.doubleValue(),dataArea,plot.getRangeAxisEdge());    Shape hotspot=new Rectangle2D.Double(x1 - 4,y1 - 4,8.0,8.0);    g2.setPaint(getItemPaint(row,column));    g2.setStroke(getItemStroke(row,column));    PlotOrientation orient=plot.getOrientation();    if (orient == PlotOrientation.VERTICAL) {      this.objectIcon.paintIcon(null,g2,(int)x1,(int)y1);    } else {      this.objectIcon.paintIcon(null,g2,(int)y1,(int)x1);    }    if (this.lastCategory == column) {      if (this.min > value.doubleValue()) {        this.min=value.doubleValue();      }      if (this.max < value.doubleValue()) {        this.max=value.doubleValue();      }      if (dataset.getRowCount() - 1 == row) {        g2.setPaint(this.groupPaint);        g2.setStroke(this.groupStroke);        double minY=rangeAxis.valueToJava2D(this.min,dataArea,plot.getRangeAxisEdge());        double maxY=rangeAxis.valueToJava2D(this.max,dataArea,plot.getRangeAxisEdge());        if (orient == PlotOrientation.VERTICAL) {          g2.draw(new Line2D.Double(x1,minY,x1,maxY));          this.minIcon.paintIcon(null,g2,(int)x1,(int)minY);          this.maxIcon.paintIcon(null,g2,(int)x1,(int)maxY);        } else {          g2.draw(new Line2D.Double(minY,x1,maxY,x1));          this.minIcon.paintIcon(null,g2,(int)minY,(int)x1);          this.maxIcon.paintIcon(null,g2,(int)maxY,(int)x1);        }      }    } else {      this.lastCategory=column;      this.min=value.doubleValue();      this.max=value.doubleValue();    }    if (this.plotLines) {      if (column != 0) {        Number previousValue=dataset.getValue(row,column - 1);        if (previousValue != null) {          double previous=previousValue.doubleValue();          double x0=domainAxis.getCategoryMiddle(column - 1,getColumnCount(),dataArea,plot.getDomainAxisEdge());          double y0=rangeAxis.valueToJava2D(previous,dataArea,plot.getRangeAxisEdge());          g2.setPaint(getItemPaint(row,column));          g2.setStroke(getItemStroke(row,column));          Line2D line;          if (orient == PlotOrientation.VERTICAL) {            line=new Line2D.Double(x0,y0,x1,y1);          } else {            line=new Line2D.Double(y0,x0,y1,x1);          }          g2.draw(line);        }      }    }    EntityCollection entities=state.getEntityCollection();    if (entities != null) {      addItemEntity(entities,dataset,row,column,hotspot);    }  }}  }
class C{  public void createDatabaseEntitiesForStorageUnitNotificationRegistrationTesting(){  createDatabaseEntitiesForStorageUnitNotificationRegistrationTesting(AbstractServiceTest.NAMESPACE,Arrays.asList(NotificationEventTypeEntity.EventTypesStorageUnit.STRGE_UNIT_STTS_CHG.name(),AbstractServiceTest.NOTIFICATION_EVENT_TYPE),AbstractServiceTest.BDEF_NAMESPACE,AbstractServiceTest.BDEF_NAME,Arrays.asList(AbstractServiceTest.FORMAT_FILE_TYPE_CODE),Arrays.asList(AbstractServiceTest.STORAGE_NAME),Arrays.asList(AbstractServiceTest.STORAGE_UNIT_STATUS,AbstractServiceTest.STORAGE_UNIT_STATUS_2),notificationRegistrationDaoTestHelper.getTestJobActions());}  }
class C{  public static void process(SsaMethod ssaMethod){  DeadCodeRemover dc=new DeadCodeRemover(ssaMethod);  dc.run();}  }
class C{  private void validateStackPush(int bytesActuallyWritten){  if (VM.VerifyAssertions) {    boolean pushDoesNotOverwrite=(spTopOffset - bytesActuallyWritten) >= fullStackOffset;    if (!pushDoesNotOverwrite) {      String msg=" spTopOffset=" + spTopOffset + ", empty="+ emptyStackOffset+ ", full="+ fullStackOffset+ ", bw="+ bytesActuallyWritten;      VM._assert(VM.NOT_REACHED,msg);    }  }}  }
class C{  public void addChildCluster(Cluster<M> parent,Cluster<M> child){  hierarchy.add(parent,child);}  }
class C{  public static boolean ignorableWhitespace(String value){  Matcher m;  m=whitespacePattern.matcher(value);  if (m.matches())   return true; else   return false;}  }
class C{  public void addCapability(String capability){  capabilities.add(capability);}  }
class C{  public void updateQuantityToMove(ItemBean original,ItemBean itemToAdd,boolean add){  BigDecimal originalQuantity=original.getQtyToMove();  BigDecimal quantityToAdd=itemToAdd.getQtyToMove();  BigDecimal finalQuantity=null;  if (!add)   finalQuantity=originalQuantity.subtract(quantityToAdd); else   finalQuantity=originalQuantity.add(quantityToAdd);  original.setQtyToMove(finalQuantity);}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public CodesTMU220(){}  }
class C{  public RangeTable(Schema schema,Expression min,Expression max,boolean noColumns){  super(schema,0,NAME);  Column[] cols=noColumns ? new Column[0] : new Column[]{new Column("X",Value.LONG)};  this.min=min;  this.max=max;  setColumns(cols);}  }
class C{  private boolean exactMatch(List<Group> currentGroups,Group group){  if (!currentGroups.contains(group))   return false;  for (  Group g : currentGroups) {    if ((group.getName().equalsIgnoreCase(g.getName())) && (group.getGroupType().getValue() == g.getGroupType().getValue())) {      if ((group.getDataType().getValue() == g.getDataType().getValue()) && (group.getRuleName().equals(g.getRuleName())) && (group.getEvaluationOrder() == g.getEvaluationOrder())) {        return true;      } else {        group.setUid(g.getUid());      }    }  }  return false;}  }
class C{  public GreyPalette(){  super();  initialize();}  }
class C{  public MutableDouble3D(final Int2D p){  x=p.x;  y=p.y;  z=0.0;}  }
class C{  public String generateHelp(){  String result;  Enumeration<Option> enm;  Option option;  result=getClass().getName().replaceAll(".*\\.","") + " Options:\n\n";  enm=listOptions();  while (enm.hasMoreElements()) {    option=enm.nextElement();    result+=option.synopsis() + "\n" + option.description()+ "\n";  }  return result;}  }
class C{  public Encryption(final byte[] key){  makeKey(key);}  }
class C{  public static void clearAppDisabled(){  if (ensureInitialized()) {    preferences.clearAppDisabled();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:42.709 -0500",hash_original_method="0FE324461208CCFE4D6285DE537F7763",hash_generated_method="3BE473E08D4F05FEC17F97DA1BCD3410") protected String elapsedTimeAsString(long runTime){  return Double.toString((double)runTime / 1000);}  }
class C{  public boolean isTextFieldEditable(){  return true;}  }
class C{  private void prepareReminders(){  CalendarEventModel model=mModel;  Resources r=mActivity.getResources();  mReminderMinuteValues=loadIntegerArray(r,R.array.reminder_minutes_values);  mReminderMinuteLabels=loadStringArray(r,R.array.reminder_minutes_labels);  mReminderMethodValues=loadIntegerArray(r,R.array.reminder_methods_values);  mReminderMethodLabels=loadStringArray(r,R.array.reminder_methods_labels);  if (mModel.mCalendarAllowedReminders != null) {    EventViewUtils.reduceMethodList(mReminderMethodValues,mReminderMethodLabels,mModel.mCalendarAllowedReminders);  }  int numReminders=0;  if (model.mHasAlarm) {    ArrayList<ReminderEntry> reminders=model.mReminders;    numReminders=reminders.size();    for (    ReminderEntry re : reminders) {      if (mReminderMethodValues.contains(re.getMethod())) {        EventViewUtils.addMinutesToList(mActivity,mReminderMinuteValues,mReminderMinuteLabels,re.getMinutes());      }    }    mUnsupportedReminders.clear();    for (    ReminderEntry re : reminders) {      if (mReminderMethodValues.contains(re.getMethod()) || re.getMethod() == Reminders.METHOD_DEFAULT) {        EventViewUtils.addReminder(mActivity,mScrollView,this,mReminderItems,mReminderMinuteValues,mReminderMinuteLabels,mReminderMethodValues,mReminderMethodLabels,re,Integer.MAX_VALUE,null);      } else {        mUnsupportedReminders.add(re);      }    }  }  updateRemindersVisibility(numReminders);  EventViewUtils.updateAddReminderButton(mView,mReminderItems,mModel.mCalendarMaxReminders);}  }
class C{  public boolean hasAttachment(){  if (m_Attachments == null)   loadAttachments();  if (m_Attachments == null || m_Attachments.isEmpty())   return false;  Integer key=new Integer(m_mTable.getKeyID(m_currentRow));  return m_Attachments.containsKey(key);}  }
class C{  public static void cursorStringToContentValues(Cursor cursor,String field,ContentValues values){  cursorStringToContentValues(cursor,field,values,field);}  }
class C{  public void pushIlevCmask(int cmask){  ilev=(ilev << 4) | (cmask & Ilev_Cmask_mask);}  }
class C{  public void unset(final int i){  this.data[i / 64]&=~(1l << (i % 64));}  }
class C{  public short[][] multMatrix(short scalar,short[][] matrix){  short[][] rslt=new short[matrix.length][matrix[0].length];  for (int i=0; i < matrix.length; i++) {    for (int j=0; j < matrix[0].length; j++) {      rslt[i][j]=GF2Field.multElem(scalar,matrix[i][j]);    }  }  return rslt;}  }
class C{  public T caseDelegatingMethodDeclaration(DelegatingMethodDeclaration object){  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:31.703 -0500",hash_original_method="27B4992A0A3B9BF53AD43F01217A5C6E",hash_generated_method="F056BF1B70871DD93562AA3B815C94A7") public static PropertyValuesHolder ofInt(String propertyName,int... values){  return new IntPropertyValuesHolder(propertyName,values);}  }
class C{  public Map attributes(){  return this.node.attributes();}  }
class C{  public static IPRange CClassLocalIPRange(){  return new IPRange(new IP(192,168,0,0),new IP(192,168,255,255));}  }
class C{  @Deprecated @SuppressWarnings("unused") public static List<Pair<SHAHash,Date>> onlyHashesHistory(Project project,FilePath path,final String... parameters) throws VcsException {  final VirtualFile root=GitUtil.getGitRoot(path);  return onlyHashesHistory(project,path,root,parameters);}  }
class C{  public MultisigTransaction createMultisig(){  return new MultisigTransaction(TimeInstant.ZERO,Utils.generateRandomAccount(),this.innerTransaction);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public GraphicsNode createGraphicsNode(BridgeContext ctx,Element e){  if (!SVGUtilities.matchUserAgent(e,ctx.getUserAgent())) {    return null;  }  CanvasGraphicsNode cgn;  cgn=(CanvasGraphicsNode)instantiateGraphicsNode();  associateSVGContext(ctx,e,cgn);  try {    SVGDocument doc=(SVGDocument)e.getOwnerDocument();    SVGOMSVGElement se=(SVGOMSVGElement)e;    boolean isOutermost=(doc.getRootElement() == e);    float x=0;    float y=0;    if (!isOutermost) {      AbstractSVGAnimatedLength _x=(AbstractSVGAnimatedLength)se.getX();      x=_x.getCheckedValue();      AbstractSVGAnimatedLength _y=(AbstractSVGAnimatedLength)se.getY();      y=_y.getCheckedValue();    }    AbstractSVGAnimatedLength _width=(AbstractSVGAnimatedLength)se.getWidth();    float w=_width.getCheckedValue();    AbstractSVGAnimatedLength _height=(AbstractSVGAnimatedLength)se.getHeight();    float h=_height.getCheckedValue();    cgn.setVisible(CSSUtilities.convertVisibility(e));    SVGOMAnimatedRect vb=(SVGOMAnimatedRect)se.getViewBox();    SVGAnimatedPreserveAspectRatio par=se.getPreserveAspectRatio();    AffineTransform viewingTransform=ViewBox.getPreserveAspectRatioTransform(e,vb,par,w,h,ctx);    float actualWidth=w;    float actualHeight=h;    try {      AffineTransform vtInv=viewingTransform.createInverse();      actualWidth=(float)(w * vtInv.getScaleX());      actualHeight=(float)(h * vtInv.getScaleY());    } catch (    NoninvertibleTransformException ex) {    }    AffineTransform positionTransform=AffineTransform.getTranslateInstance(x,y);    if (!isOutermost) {      cgn.setPositionTransform(positionTransform);    } else     if (doc == ctx.getDocument()) {      ctx.setDocumentSize(new Dimension((int)(w + 0.5f),(int)(h + 0.5f)));    }    cgn.setViewingTransform(viewingTransform);    Shape clip=null;    if (CSSUtilities.convertOverflow(e)) {      float[] offsets=CSSUtilities.convertClip(e);      if (offsets == null) {        clip=new Rectangle2D.Float(x,y,w,h);      } else {        clip=new Rectangle2D.Float(x + offsets[3],y + offsets[0],w - offsets[1] - offsets[3],h - offsets[2] - offsets[0]);      }    }    if (clip != null) {      try {        AffineTransform at=new AffineTransform(positionTransform);        at.concatenate(viewingTransform);        at=at.createInverse();        clip=at.createTransformedShape(clip);        Filter filter=cgn.getGraphicsNodeRable(true);        cgn.setClip(new ClipRable8Bit(filter,clip));      } catch (      NoninvertibleTransformException ex) {      }    }    RenderingHints hints=null;    hints=CSSUtilities.convertColorRendering(e,hints);    if (hints != null)     cgn.setRenderingHints(hints);    Rectangle2D r=CSSUtilities.convertEnableBackground(e);    if (r != null) {      cgn.setBackgroundEnable(r);    }    if (vb.isSpecified()) {      SVGRect vbr=vb.getAnimVal();      actualWidth=vbr.getWidth();      actualHeight=vbr.getHeight();    }    ctx.openViewport(e,new SVGSVGElementViewport(actualWidth,actualHeight));    return cgn;  } catch (  LiveAttributeException ex) {    throw new BridgeException(ctx,ex);  }}  }
class C{  public MemoryByteArray(byte[] b){  this(b,b.length);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public MoePlainView(Element elem,int leftMargin){  super(elem);  this.leftMargin=leftMargin;}  }
class C{  private synchronized int decreaseRefCount(){  ensureValid();  Preconditions.checkArgument(mRefCount > 0);  mRefCount--;  return mRefCount;}  }
class C{  public static Drawable tintDrawable(Drawable drawable,int color){  int red=(color & 0xFF0000) / 0xFFFF;  int green=(color & 0xFF00) / 0xFF;  int blue=color & 0xFF;  float[] matrix={0,0,0,0,red,0,0,0,0,green,0,0,0,0,blue,0,0,0,1,0};  ColorFilter colorFilter=new ColorMatrixColorFilter(matrix);  if (drawable != null) {    drawable.setColorFilter(colorFilter);  }  return drawable;}  }
class C{  public static void main(String... a) throws Exception {  TestIntPerfectHash test=(TestIntPerfectHash)TestBase.createCaller().init();  test.measure();  test.test();  test.measure();}  }
class C{  public final void testEqualWithContextParameter(){  assertNotNull(Validators.equal(getContext(),new EditText(getContext())));}  }
class C{  public byte[] toByteArray(){  int totalLen=_pastLen + _currBlockPtr;  if (totalLen == 0) {    return NO_BYTES;  }  byte[] result=new byte[totalLen];  int offset=0;  for (  byte[] block : _pastBlocks) {    int len=block.length;    System.arraycopy(block,0,result,offset,len);    offset+=len;  }  System.arraycopy(_currBlock,0,result,offset,_currBlockPtr);  offset+=_currBlockPtr;  if (offset != totalLen) {    throw new RuntimeException("Internal error: total len assumed to be " + totalLen + ", copied "+ offset+ " bytes");  }  if (!_pastBlocks.isEmpty()) {    reset();  }  return result;}  }
class C{  public MutableLocation add(double dx,double dy,double dz){  return new MutableLocation(x + dx,y + dy,z + dz,w);}  }
class C{  public XML addGlobal(Class<?> aClass,Global global){  checksGlobalAbsence(aClass);  findXmlClass(aClass).global=Converter.toXmlGlobal(global);  return this;}  }
class C{  public void runTo(int index){  if (!m_cacheNodes)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_CANNOT_INDEX,null));  if ((index >= 0) && (m_next < m_firstFree))   m_next=index; else   m_next=m_firstFree - 1;}  }
class C{  private static void addStickyFooterDivider(Context ctx,ViewGroup footerView){  LinearLayout divider=new LinearLayout(ctx);  LinearLayout.LayoutParams dividerParams=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);  divider.setMinimumHeight((int)UIUtils.convertDpToPixel(1,ctx));  divider.setOrientation(LinearLayout.VERTICAL);  divider.setBackgroundColor(UIUtils.getThemeColorFromAttrOrRes(ctx,R.attr.material_drawer_divider,R.color.material_drawer_divider));  footerView.addView(divider,dividerParams);}  }
class C{  public void showNotificationOrThrow(VcsException e) throws VcsException {  if (checkExecutableAndNotifyIfNeeded()) {    throw e;  }}  }
class C{  public boolean isSQLDetailEnabled(){  return params.isSQLDetailEnabled;}  }
class C{  public double total(){  double total=0;  for (int row=0; row < size(); row++) {    for (int col=0; col < size(); col++) {      total+=get(row,col);    }  }  return total;}  }
class C{  protected void appendString(final String text){  final HTMLDocument doc=(HTMLDocument)textPane.getDocument();  try {    final Element root=doc.getParagraphElement(0);    doc.insertBeforeEnd(root,text);  } catch (  final BadLocationException e) {    logger.error(e,e);  }catch (  final IOException e) {    logger.error(e,e);  }}  }
class C{  public int port(){  ensureSingle();  if (port == 0) {    throw new IllegalStateException("port not specified");  }  return port;}  }
class C{  private static void validateExpandSizeField(CatalogServiceRestRep catalogService,ServiceFieldRestRep field,String fieldName,String value){  validateNumber(fieldName,value);  boolean hasMinSize=field.getMin() != null;  boolean hasMaxSize=(catalogService.getMaxSize() != null) && (catalogService.getMaxSize() >= 1);  Integer min=Math.max(1,hasMinSize ? field.getMin() : 1);  Integer max=hasMaxSize ? catalogService.getMaxSize() : null;  validateRange(fieldName,value,min,max);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void countDown(){  sync.releaseShared(1);}  }
class C{  public RangeQueryBuilder from(double from){  this.from=from;  return this;}  }
class C{  public static String runBashCommand(Vector<String> commands) throws IOException, InterruptedException {  Vector<String> bashcommand=new Vector<String>();  bashcommand.add("/bin/bash");  bashcommand.add("-c");  bashcommand.addAll(commands);  ProcessBuilder pb=new ProcessBuilder(bashcommand);  Process pr=pb.start();  pr.waitFor();  if (pr.exitValue() == 0) {    BufferedReader outReader=new BufferedReader(new InputStreamReader(pr.getInputStream()));    String output="";    String line=null;    while ((line=outReader.readLine()) != null) {      output+=line + "\n";    }    return output;  } else {    System.out.println("Error in running " + commands.toString());  }  return null;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:08.158 -0500",hash_original_method="95455CDE829A27B48DAF238C4403FA5A",hash_generated_method="A8390121371D7D9D59758E1993A98F69") private javax.security.cert.X509Certificate[] createPeerCertificateChain() throws SSLPeerUnverifiedException {  try {    javax.security.cert.X509Certificate[] chain=new javax.security.cert.X509Certificate[peerCertificates.length];    for (int i=0; i < peerCertificates.length; i++) {      byte[] encoded=peerCertificates[i].getEncoded();      chain[i]=javax.security.cert.X509Certificate.getInstance(encoded);    }    return chain;  } catch (  CertificateEncodingException e) {    SSLPeerUnverifiedException exception=new SSLPeerUnverifiedException(e.getMessage());    exception.initCause(exception);    throw exception;  }catch (  CertificateException e) {    SSLPeerUnverifiedException exception=new SSLPeerUnverifiedException(e.getMessage());    exception.initCause(exception);    throw exception;  }}  }
class C{  public Boolean(boolean value){}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.503 -0500",hash_original_method="5BBE3077A529F887080D848A31F1E40F",hash_generated_method="3192B333EC6E5C498F80E759DA81C637") public void putCharArray(String key,char[] value){  unparcel();  mMap.put(key,value);}  }
class C{  public static double length2(Vector3 v){  return length2(v.x,v.y,v.z);}  }
class C{  public void evalMaxAggregatedValue(final String field,final String fieldValue,final long value) throws RequiredInputMissingException {  if (StringUtils.isBlank(field))   throw new RequiredInputMissingException("Missing required input for parameter 'field'");  if (StringUtils.isBlank(fieldValue))   throw new RequiredInputMissingException("Missing required input for parameter 'fieldValue'");  String fieldKey=StringUtils.lowerCase(StringUtils.trim(field));  String fieldValueKey=StringUtils.lowerCase(StringUtils.trim(fieldValue));  Map<String,Long> fieldAggregationValues=this.aggregatedValues.get(fieldKey);  if (fieldAggregationValues == null)   fieldAggregationValues=new HashMap<>();  long aggregationValue=(fieldAggregationValues.containsKey(fieldValueKey) ? fieldAggregationValues.get(fieldValueKey) : Integer.MIN_VALUE);  if (value > aggregationValue) {    fieldAggregationValues.put(fieldValue,value);    this.aggregatedValues.put(fieldKey,fieldAggregationValues);  }}  }
class C{  public TcFeature(Class<? extends Resource> classOfFeat,String id,Object[] params){  this.classOfFeat=classOfFeat;  this.id=id;  this.fullFeatureName=classOfFeat.getName();  this.params=params;}  }
class C{  public OneToNBroadcastConnector(int outputOperatorNumber){  this.inputTupleList=new ArrayList<>();  inputOperatorOpened=false;  this.outputOperatorNumber=outputOperatorNumber;  intializeOutputOperators();}  }
class C{  private boolean isConfigInvalid(WifiP2pConfig config){  if (config == null)   return true;  if (TextUtils.isEmpty(config.deviceAddress))   return true;  if (mPeers.get(config.deviceAddress) == null)   return true;  return false;}  }
class C{  void removeAll(final boolean mark){  if (mark) {    AbstractInsnNode insn=first;    while (insn != null) {      AbstractInsnNode next=insn.next;      insn.index=-1;      insn.prev=null;      insn.next=null;      insn=next;    }  }  size=0;  first=null;  last=null;  cache=null;}  }
class C{  public static Number createNumber(String val) throws NumberFormatException {  if (val == null) {    return null;  }  if (val.length() == 0) {    throw new NumberFormatException("\"\" is not a valid number.");  }  if (val.length() == 1 && !Character.isDigit(val.charAt(0))) {    throw new NumberFormatException(val + " is not a valid number.");  }  if (val.startsWith("--")) {    return null;  }  if (val.startsWith("0x") || val.startsWith("-0x")) {    return createInteger(val);  }  char lastChar=val.charAt(val.length() - 1);  String mant;  String dec;  String exp;  int decPos=val.indexOf('.');  int expPos=val.indexOf('e') + val.indexOf('E') + 1;  if (decPos > -1) {    if (expPos > -1) {      if (expPos < decPos) {        throw new NumberFormatException(val + " is not a valid number.");      }      dec=val.substring(decPos + 1,expPos);    } else {      dec=val.substring(decPos + 1);    }    mant=val.substring(0,decPos);  } else {    if (expPos > -1) {      mant=val.substring(0,expPos);    } else {      mant=val;    }    dec=null;  }  if (!Character.isDigit(lastChar)) {    if (expPos > -1 && expPos < val.length() - 1) {      exp=val.substring(expPos + 1,val.length() - 1);    } else {      exp=null;    }    String numeric=val.substring(0,val.length() - 1);    boolean allZeros=isAllZeros(mant) && isAllZeros(exp);switch (lastChar) {case 'l':case 'L':      if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {        try {          return createLong(numeric);        } catch (        NumberFormatException nfe) {        }        return createBigInteger(numeric);      }    throw new NumberFormatException(val + " is not a valid number.");case 'f':case 'F':  try {    Float f=NumberUtils.createFloat(numeric);    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {      return f;    }  } catch (  NumberFormatException e) {  }case 'd':case 'D':try {  Double d=NumberUtils.createDouble(numeric);  if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {    return d;  }} catch (NumberFormatException nfe) {}try {return createBigDecimal(numeric);} catch (NumberFormatException e) {}default :throw new NumberFormatException(val + " is not a valid number.");}} else {if (expPos > -1 && expPos < val.length() - 1) {exp=val.substring(expPos + 1,val.length());} else {exp=null;}if (dec == null && exp == null) {try {return createInteger(val);} catch (NumberFormatException nfe) {}try {return createLong(val);} catch (NumberFormatException nfe) {}return createBigInteger(val);} else {boolean allZeros=isAllZeros(mant) && isAllZeros(exp);try {Float f=createFloat(val);if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {return f;}} catch (NumberFormatException nfe) {}try {Double d=createDouble(val);if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {return d;}} catch (NumberFormatException nfe) {}return createBigDecimal(val);}}}  }
class C{  public CSSOMViewCSS(CSSEngine engine){  cssEngine=engine;}  }
class C{  public InferenceResult solveFromSupertypes(final Set<TypeVariable> remainingTargets,final ConstraintMap constraintMap,final AnnotatedTypeFactory typeFactory){  final Lubs lubs=targetToTypeLubs(remainingTargets,constraintMap,typeFactory);  final InferenceResult solution=new InferenceResult();  for (  final TypeVariable target : remainingTargets) {    final AnnotatedTypeMirror lub=lubs.getType(target);    Map<AnnotationMirror,AnnotationMirror> lubAnnos=lubs.getPrimaries(target);    final InferredValue inferred;    if (lub != null) {      inferred=mergeLubTypeWithEqualities(target,lub,constraintMap,typeFactory);    } else     if (lubAnnos != null) {      inferred=mergeLubAnnosWithEqualities(target,lubAnnos,constraintMap,typeFactory);    } else {      inferred=null;    }    if (inferred != null) {      solution.put(target,inferred);    }  }  return solution;}  }
class C{  public List<NamedRelatedVirtualPoolRep> listByVDC(String shortVdcId){  UriBuilder builder=client.uriBuilder(baseUrl);  builder.queryParam(SearchConstants.VDC_ID_PARAM,shortVdcId);  VirtualPoolList response=client.getURI(VirtualPoolList.class,builder.build());  return ResourceUtils.defaultList(response.getVirtualPool());}  }
class C{  @GuardedBy("mLock") private boolean maybeUpdateFileCacheSize(){  long now=mClock.now();  if ((!mCacheStats.isInitialized()) || mCacheSizeLastUpdateTime == UNINITIALIZED || (now - mCacheSizeLastUpdateTime) > FILECACHE_SIZE_UPDATE_PERIOD_MS) {    return maybeUpdateFileCacheSizeAndIndex();  }  return false;}  }
class C{  void invalidConversion(Converter converter,Object value){  String valueType=(value == null ? "null" : value.getClass().getName());  String msg="Converting '" + valueType + "' value '"+ value+ "'";  try {    Object result=converter.convert(getExpectedType(),value);    fail(msg + ", expected ConversionException, but result = '" + result+ "'");  } catch (  ConversionException ex) {  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:33.739 -0500",hash_original_method="8ADD93432A1FBC3F2D5AE95E2101E8B1",hash_generated_method="5B95961678D1CE45A2252124B8A179F4") public boolean hasThumbnail(){  return mHasThumbnail;}  }
class C{  public int[] testOnDataSet(NNDataSet nnds){  int[] result=new int[]{0,0};  nnds.refreshDataset();  while (nnds.hasMoreExamples()) {    NNExample nne=nnds.getExampleAtRandom();    Vector prediction=predict(nne);    if (nne.isCorrect(prediction)) {      result[0]=result[0] + 1;    } else {      result[1]=result[1] + 1;    }  }  return result;}  }
class C{  public CPanel(LayoutManager layout,boolean isDoubleBuffered){  super(layout,isDoubleBuffered);  init();}  }
class C{  private void dataStmt(ColumnFormat cf) throws ParserException, IOException {  match(DATA);  Expression e=expression();  cf.setExpression(e);  log(pdebug,"Parsed: data -> " + e);}  }
class C{  public static IPackageFragmentRoot addLibraryWithImport(IJavaProject jproject,IPath jarPath,IPath sourceAttachPath,IPath sourceAttachRoot) throws IOException, CoreException {  IProject project=jproject.getProject();  IFile newFile=project.getFile(jarPath.lastSegment());  InputStream inputStream=null;  try {    inputStream=new FileInputStream(jarPath.toFile());    newFile.create(inputStream,true,null);  }  finally {    if (inputStream != null) {      try {        inputStream.close();      } catch (      IOException e) {      }    }  }  return addLibrary(jproject,newFile.getFullPath(),sourceAttachPath,sourceAttachRoot);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void init() throws ServletException {}  }
class C{  public boolean isSpaceAvailable(Car car){  int carLength=car.getTotalLength();  if (car.getKernel() != null) {    carLength=car.getKernel().getTotalLength();  }  int trackLength=getLength();  if (trackLength < carLength) {    return false;  }  if (car.getTrack() != null && car.getTrack().getTrackType().equals(STAGING)) {    return (getLength() * getReservationFactor() / 100 - (getReservedInRoute() + carLength) >= 0);  }  if (getAlternateTrack() != null) {    trackLength=trackLength + getAlternateTrack().getLength();  }  return (trackLength - (getReservedInRoute() + carLength) >= 0);}  }
class C{  public Instrumenter attachEpsilonProgressCollector(){  includeEpsilonProgress=true;  return this;}  }
class C{  public Tool addTool(ToolState state,boolean update){  Tool tool=null;switch (state.mapElementType) {case Figure:case Placemark:case Billboard:    break;case Path:  tool=new Path((PathState)state);break;case Plane:tool=new Plane((PlaneState)state);break;case Profile:tool=new Profile((ProfileState)state);break;case FieldCamera:tool=new FieldCamera((FieldCameraState)state);Landscape.getInstance().getLayerManager().addFieldCamera((FieldCamera)tool);break;case CartesianGrid:tool=new CartesianGrid((GridState)state);break;case RadialGrid:tool=new RadialGrid((GridState)state);break;case Scale:tool=new ScaleBar((ScaleBarState)state);break;case Waypoint:case Marble:case LineSet:break;}if (tool != null) {Spatial spatial=(Spatial)tool;attachChild(spatial);if (update) {spatial.updateGeometricState(0,true);tool.update(Dert.getWorldView().getViewpointNode().getCamera());}if ((tool instanceof FieldCamera) || (tool instanceof Profile)) {state.open();spatial.markDirty(DirtyType.Transform);}}return (tool);}  }
class C{  public JsonObject broadlinkVersion(){  return broadlinkExecuteCommand(BroadlinkConstants.CMD_SDK_VERSION_ID,BroadlinkConstants.CMD_SDK_VERSION);}  }
class C{  private void deleteNewVersionFile() throws IOException {  deleteFile(fName(newVersionFile));}  }
class C{  public static double[] makeBuckets(double[] vals,int numBuckets,double min,double max,boolean logScale){  double[] b=new double[numBuckets];  if (vals == null || numBuckets == 0)   return b;  if (logScale) {    min=Math.log(min);    max=Math.log(max);  }  if (min > max) {    double tmp=min;    min=max;    max=tmp;  } else   if (min == max) {    b[0]+=vals.length;    return b;  }  int count=0;  for (int x=0; x < vals.length; x++) {    double v=vals[x];    if (logScale) {      if (v < 0)       continue;      v=Math.log(v);    }    if (v < min || v > max)     continue;    int bucketnum=(int)((v - min) * numBuckets / (max - min));    if (bucketnum >= numBuckets)     bucketnum=numBuckets - 1;    b[bucketnum]++;    count++;  }  if (count != 0)   for (int x=0; x < b.length; x++)   b[x]/=count;  return b;}  }
class C{  public static boolean isValidPxStrict(String san){  if (san.length() == 2) {    return FILES.indexOf(san.charAt(0)) != -1 && FILES.indexOf(san.charAt(1)) != -1;  } else {    return false;  }}  }
class C{  public boolean isRTPMulticast(){  return rtpMulticast;}  }
class C{  private GF2nONBElement(GF2nONBField gf2n,long[] val){  mField=gf2n;  mDegree=mField.getDegree();  mLength=gf2n.getONBLength();  mBit=gf2n.getONBBit();  mPol=val;}  }
class C{  @Override protected void removeAt(int index){  _values[index]=0;  super.removeAt(index);}  }
class C{  public ThreadLocalAdderCounter(MonitorConfig config){  super(config.withAdditionalTag(DataSourceType.COUNTER));}  }
class C{  public double eval(boolean useTrainingData,int valueIndex){  if (parsedGeneExpressions == null)   parseGenes();  double result=parsedGeneExpressions[0].eval(useTrainingData,valueIndex);  if (Double.isNaN(result))   return result;  if (genome.length == 1)   return result;  GEPSpecies species=(GEPSpecies)this.myGEPIndividual.species;  GEPFunctionSymbol fs=species.linkingFunctionSymbol;  int functionArity=fs.arity;  double params[]=new double[functionArity];  for (int i=1; i < genome.length; ) {    params[0]=result;    for (int j=1; j < functionArity; j++)     params[j]=parsedGeneExpressions[i++].eval(useTrainingData,valueIndex);    result=fs.eval(params);    if (Double.isNaN(result))     return result;  }  if (GEPIndividual.isThresholdON())   result=(result >= GEPIndividual.getThreshold()) ? 1 : 0;  return result;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Socks5(String host,int port,Credentials credentials) throws UnknownHostException {  init();  this.inetAddress=InetAddress.getByName(host);  this.port=port;  this.credentials=credentials;}  }
class C{  public static MatrixBlock convertToMatrixBlock(double[][] data) throws DMLRuntimeException {  int rows=data.length;  int cols=(rows > 0) ? data[0].length : 0;  MatrixBlock mb=new MatrixBlock(rows,cols,false);  try {    mb.init(data,rows,cols);  } catch (  Exception e) {  }  mb.examSparsity();  return mb;}  }
class C{  public ExchangeRate lookup(final Currency source,final Currency target,Date date,final ExchangeRate.Type type){  if (source.eq(target))   return new ExchangeRate(source,target,1.0);  if (date.isToday()) {    date=new Settings().evaluationDate();  }  if (type == ExchangeRate.Type.Direct)   return directLookup(source,target,date); else   if (!source.triangulationCurrency().empty()) {    final Currency link=source.triangulationCurrency();    if (link.eq(target))     return directLookup(source,link,date); else     return ExchangeRate.chain(directLookup(source,link,date),lookup(link,target,date));  } else   if (!target.triangulationCurrency().empty()) {    final Currency link=target.triangulationCurrency();    if (source.eq(link))     return directLookup(link,target,date); else     return ExchangeRate.chain(lookup(source,link,date),directLookup(link,target,date));  } else   return smartLookup(source,target,date);}  }
class C{  public NbtTag readTag(NbtLimiter limiter) throws IOException {  byte type=this.readByte();  NbtTagType tagType=NbtTagType.valueOf(type);  if (tagType == null) {    throw new IOException("Invalid NBT tag: Found unknown tag type " + type + ".");  }  return this.readTag(tagType,false,limiter);}  }
class C{  @Ignore @Test public void testGetPodcastByUrl() throws Exception {  LOG.debug(" \n\n------ executing PodcastDaoTest.testGetPodcastByUrl -------");  String podcastUrl="http://podcast.wdr.de/wissenmachtah.xml";  Podcast response=podcastDao.getPodcastByURL(podcastUrl);  assert response.getCategories().size() == 4;  String podcastUrl2="http://www.zdf.de/ZDFmediathek/podcast/1193018?view=podcast";  Podcast response2=podcastDao.getPodcastByURL(podcastUrl2);  assert response2.getCategories().size() == 0;}  }
class C{  public static File createTemporaryDirectory(String prefix){  while (true) {    String candidateName=prefix + TEMPORARY_DIRECTORY_PRNG.nextInt();    File result=new File(System.getProperty("java.io.tmpdir"),candidateName);    if (result.mkdir()) {      return result;    }  }}  }
class C{  private View2D show(final CGraphWindow graphWindow,final View view,final IViewContainer container){  for (  final CGraphWindow window : CWindowManager.instance()) {    for (    final IGraphPanel panel : window) {      if (panel.getModel().getGraph().getRawView() == view.getNative()) {        return panel.getModel().getView2D();      }    }  }  final WindowWaiter waiter=new WindowWaiter(view.getNative());  CWindowManager.instance().addListener(waiter);  final List<CGraphWindow> openBefore=CWindowManager.instance().getOpenWindows();  for (  final CGraphWindow window : openBefore) {    window.addListener(waiter);  }  CViewOpener.showView(mainWindow.getFrame(),container,view.getNative(),graphWindow);  while (waiter.getModel() == null) {    try {      Thread.sleep(1000);    } catch (    final InterruptedException exception) {      CUtilityFunctions.logException(exception);      java.lang.Thread.currentThread().interrupt();    }  }  final CGraphModel model=waiter.getModel();  CWindowManager.instance().removeListener(waiter);  for (  final CGraphWindow window : openBefore) {    window.removeListener(waiter);  }  return model.getView2D();}  }
class C{  public static Element drawFilled(SVGPlot svgp,String cls,Projection2D proj,SpatialComparable box){  Element group=svgp.svgElement(SVGConstants.SVG_G_TAG);  ArrayList<double[]> edges=getVisibleEdges(proj,box);  final int dim=box.getDimensionality();  double[] min=new double[dim];  for (int i=0; i < dim; i++) {    min[i]=box.getMin(i);  }  double[] rv_min=proj.fastProjectDataToRenderSpace(min);  recDrawSides(svgp,group,cls,rv_min[0],rv_min[1],edges,0,BitsUtil.zero(edges.size()));  return group;}  }
class C{  private RandoopOptions(){  this.options=new ArrayList<>();  this.classnames=new HashSet<>();  this.packageName="";  this.regressionBasename="";  this.errorBasename="";}  }
class C{  public synchronized void writeTo(OutputStream out) throws IOException {  int remaining=count;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    out.write(buf,0,c);    remaining-=c;    if (remaining == 0) {      break;    }  }}  }
class C{  public static ServiceSettings load(){  ServiceSettings ss=new ServiceSettings();  InputStream is=null;  try {    is=new FileInputStream(SETTINGS_FILE_NAME);    Properties pr=new Properties();    pr.load(is);    ss.properties=pr;  } catch (  FileNotFoundException e) {    log.warn("The settings file '" + SETTINGS_FILE_NAME + "' does not exist.");  }catch (  IOException e) {    log.warn("Failed to load the settings from the file: " + SETTINGS_FILE_NAME);  } finally {    if (is != null) {      try {        is.close();      } catch (      IOException e) {      }    }  }  return ss;}  }
class C{  public void addCompareCol(int sortCol,boolean naturalOrder){  sortCols.add(new ArrayElementComparator(sortCol,naturalOrder));}  }
class C{  public void executeTrials(int n){  for (int i=0; i < n; i++) {    executeTrial();  }}  }
class C{  public CipherOutputStream(OutputStream os,StreamCipher cipher){  super(os);  this.streamCipher=cipher;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  final WbXmlToken other=(WbXmlToken)obj;  if (this.token != other.token) {    return false;  }  if (this.pageCode != other.pageCode) {    return false;  }  return true;}  }
class C{  public static LatLon[] greatCircleArcExtremeLocations(LatLon begin,LatLon end){  if (begin == null) {    throw new IllegalArgumentException("Begin Is Null");  }  if (end == null) {    throw new IllegalArgumentException("End Is Null");  }  LatLon minLatLocation=null;  LatLon maxLatLocation=null;  double minLat=Angle.POS90.degrees;  double maxLat=Angle.NEG90.degrees;  for (  LatLon ll : java.util.Arrays.asList(begin,end)) {    if (minLat >= ll.getLatitude().degrees) {      minLat=ll.getLatitude().degrees;      minLatLocation=ll;    }    if (maxLat <= ll.getLatitude().degrees) {      maxLat=ll.getLatitude().degrees;      maxLatLocation=ll;    }  }  Angle greatArcAzimuth=greatCircleAzimuth(begin,end);  Angle greatArcDistance=greatCircleDistance(begin,end);  LatLon[] greatCircleExtremes=greatCircleExtremeLocations(begin,greatArcAzimuth);  for (  LatLon ll : greatCircleExtremes) {    Angle az=LatLon.greatCircleAzimuth(begin,ll);    Angle d=LatLon.greatCircleDistance(begin,ll);    if (Math.signum(az.degrees) == Math.signum(greatArcAzimuth.degrees)) {      if (d.degrees >= 0 && d.degrees <= greatArcDistance.degrees) {        if (minLat >= ll.getLatitude().degrees) {          minLat=ll.getLatitude().degrees;          minLatLocation=ll;        }        if (maxLat <= ll.getLatitude().degrees) {          maxLat=ll.getLatitude().degrees;          maxLatLocation=ll;        }      }    }  }  return new LatLon[]{minLatLocation,maxLatLocation};}  }
class C{  public ObjectFactory(){}  }
class C{  public SimpleResolver(String hostname) throws UnknownHostException {  if (hostname == null) {    hostname=ResolverConfig.getCurrentConfig().server();    if (hostname == null)     hostname=defaultResolver;  }  InetAddress addr;  if (hostname.equals("0"))   addr=InetAddress.getLocalHost(); else   addr=InetAddress.getByName(hostname);  address=new InetSocketAddress(addr,DEFAULT_PORT);}  }
class C{  public static synchronized void startProcessing(){  if (dispatcher == null) {    dispatcher=new Thread(new RequestProcessor(),"Request Processor");    dispatcher.setPriority(Thread.NORM_PRIORITY + 2);    dispatcher.start();  }}  }
class C{  public Stoppable scheduleRepeating(final double time,final Steppable event,final double interval){  return scheduleRepeating(time,0,event,interval);}  }
class C{  public T onmouseup(String value){  return attr("onmouseup",value);}  }
class C{  public void testVirtualDestinationsDinamicallyIncludedBehavior1() throws Exception {  startAllBrokers();  Destination dest=createDestination("global.test",true);  MessageConsumer clientB1=createConsumer("BrokerB",dest);  MessageConsumer clientB2=createConsumer("BrokerB",createDestination("Consumer.foo-bar.global.test",false));  Thread.sleep(2 * 1000);  int messageCount=MESSAGE_COUNT;  sendMessages("BrokerA",dest,messageCount);  MessageIdList msgsB1=getConsumerMessages("BrokerB",clientB1);  msgsB1.waitForMessagesToArrive(messageCount);  assertEquals(messageCount,msgsB1.getMessageCount());  MessageIdList msgsB2=getConsumerMessages("BrokerB",clientB2);  msgsB2.waitForMessagesToArrive(messageCount);  assertEquals(messageCount,msgsB2.getMessageCount());}  }
class C{  synchronized public int read() throws IOException {  if (buf.remaining() == 0) {    return -1;  }  final byte b=buf.get();  return (0xff & b);}  }
class C{  public void clear(){  int n=mSize;  WeakReference<?>[] values=mValues;  for (int i=0; i < n; i++) {    values[i]=null;  }  mSize=0;  mGarbage=false;}  }
class C{  public OsmElement pasteFrom(){  List<Way> ways=storage.getWays();  List<Node> nodes=storage.getNodes();  if (mode == Mode.CUT) {    reset();    if (ways != null && ways.size() == 1) {      Way w=ways.get(0);      w.setState(savedState);      for (      Node nd : w.getNodes()) {        Log.d("PasteFrom","Restoring state for " + nd.getOsmId());        nd.setState(savedNdState.get(nd));      }      return w;    } else     if (nodes != null && nodes.size() == 1) {      Node n=nodes.get(0);      n.setState(savedState);      return n;    }  } else {    if (ways != null && ways.size() == 1) {      return ways.get(0);    } else     if (nodes != null && nodes.size() == 1) {      return nodes.get(0);    }  }  return null;}  }
class C{  public GSSContextImpl(GSSManagerImpl gssManager,byte[] interProcessToken) throws GSSException {  this.gssManager=gssManager;  mechCtxt=gssManager.getMechanismContext(interProcessToken);  initiator=mechCtxt.isInitiator();  this.mechOid=mechCtxt.getMech();}  }
class C{  public boolean forEach(TFloatProcedure procedure){  for (int i=0; i < _pos; i++) {    if (!procedure.execute(_data[i])) {      return false;    }  }  return true;}  }
class C{  public void invalidate(){}  }
class C{  public void removeZoomListener(ZoomListener listener){  if (mPinchZoom != null) {    mPinchZoom.removeZoomListener(listener);  }}  }
class C{  @Override public void createFieldEditors(){  url=new StringFieldEditor(PreferenceConstants.GS_DB_URL,Messages.getString("GSImportPreferencePage.17"),getFieldEditorParent());  addField(url);  user=new StringFieldEditor(PreferenceConstants.GS_DB_USER,Messages.getString("GSImportPreferencePage.18"),getFieldEditorParent());  addField(user);  pass=new StringFieldEditor(PreferenceConstants.GS_DB_PASS,Messages.getString("GSImportPreferencePage.19"),getFieldEditorParent());  addField(pass);  createTestButton();}  }
class C{  public boolean isText(){  return text;}  }
class C{  public void initializeHardwareClock(double rate,Date now,boolean getTime){  return;}  }
class C{  public static void validateServiceName(String serviceName){  if (serviceName == null || serviceName.length() == 0) {    throw new IllegalArgumentException(LocalizedStrings.DLockService_LOCK_SERVICE_NAME_MUST_NOT_BE_NULL_OR_EMPTY.toLocalizedString());  }  for (int i=0; i < reservedNames.length; i++) {    if (serviceName.startsWith(reservedNames[i])) {      throw new IllegalArgumentException(LocalizedStrings.DLockService_SERVICE_NAMED_0_IS_RESERVED_FOR_INTERNAL_USE_ONLY.toLocalizedString(serviceName));    }  }}  }
class C{  public static void walk(Node doc,URL base,WebPage page,Configuration conf) throws ParseException {  Walker walker=new Walker(base);  walker.walk(doc);  String licenseUrl=null;  String licenseLocation=null;  if (walker.rdfLicense != null) {    licenseLocation="rdf";    licenseUrl=walker.rdfLicense;  } else   if (walker.relLicense != null) {    licenseLocation="rel";    licenseUrl=walker.relLicense.toString();  } else   if (walker.anchorLicense != null) {    licenseLocation="a";    licenseUrl=walker.anchorLicense.toString();  } else   if (conf.getBoolean("creativecommons.exclude.unlicensed",false)) {    throw new ParseException("No CC license.  Excluding.");  }  if (licenseUrl != null) {    if (LOG.isDebugEnabled()) {      LOG.debug("CC: found " + licenseUrl + " in "+ licenseLocation+ " of "+ base);    }    page.getMetadata().put(new Utf8(CreativeCommons.LICENSE_URL),ByteBuffer.wrap(licenseUrl.getBytes()));    page.getMetadata().put(new Utf8(CreativeCommons.LICENSE_LOCATION),ByteBuffer.wrap(licenseLocation.getBytes()));  }  if (walker.workType != null) {    if (LOG.isDebugEnabled()) {      LOG.debug("CC: found " + walker.workType + " in "+ base);    }    page.getMetadata().put(new Utf8(CreativeCommons.WORK_TYPE),ByteBuffer.wrap(walker.workType.getBytes()));  }}  }
class C{  @Override public boolean longClick(Selector obj,String corner) throws UiObjectNotFoundException {  return longClick(device.findObject(obj.toUiSelector()),corner);}  }
class C{  public <T>Iterable<T> loadObjects(final Class<T> loadClass,final Criteria criteria,final Optional<Set<Order>> sortingRules,final Optional<Pagination> pagination){  if (sortingRules.isPresent()) {    sortingRules.get().forEach(null);  }  if (pagination.isPresent()) {    final Pagination paginationData=pagination.get();    paginationData.evaluate(loadClass);    criteria.setFirstResult(paginationData.getOffset());    criteria.setMaxResults(paginationData.getLimit());  } else {    Integer queryLimit=getQueryLimit();    if (queryLimit != null) {      criteria.setMaxResults(queryLimit);    }  }  if (isJoinQuery()) {    joinCriteria(criteria,loadClass);  }  criteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);  if (!isScrollEnabled || isJoinQuery()) {    return criteria.list();  }  return new ScrollableIterator(criteria.scroll(scrollMode));}  }
class C{  public String substring(String subject,int start){  return substring(subject,start,-1);}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer("  DDFFieldDefn:\n");  buf.append("      Tag = ").append(pszTag).append("\n");  buf.append("      _fieldName = ").append(_fieldName).append("\n");  buf.append("      _arrayDescr = ").append(_arrayDescr).append("\n");  buf.append("      _formatControls = ").append(_formatControls).append("\n");  buf.append("      _data_struct_code = ").append(_data_struct_code).append("\n");  buf.append("      _data_type_code = ").append(_data_type_code).append("\n");  if (paoSubfieldDefns != null) {    for (Iterator it=paoSubfieldDefns.iterator(); it.hasNext(); ) {      buf.append((DDFSubfieldDefinition)it.next());    }  }  return buf.toString();}  }
class C{  public static void presignedPutObject_test2() throws Exception {  println("Test: presignedPutObject(String bucketName, String objectName, Integer expires)");  String fileName=createFile(3 * MB);  String urlString=client.presignedPutObject(bucketName,fileName,3600);  Request.Builder requestBuilder=new Request.Builder();  Request request=requestBuilder.url(HttpUrl.parse(urlString)).method("PUT",RequestBody.create(null,Files.readAllBytes(Paths.get(fileName)))).build();  OkHttpClient transport=new OkHttpClient();  Response response=transport.newCall(request).execute();  if (response != null) {    if (!response.isSuccessful()) {      String errorXml="";      Scanner scanner=new java.util.Scanner(response.body().charStream()).useDelimiter("\\A");      if (scanner.hasNext()) {        errorXml=scanner.next();      }      println("FAILED",response,errorXml);    }  } else {    println("NO RESPONSE");  }  Files.delete(Paths.get(fileName));  client.removeObject(bucketName,fileName);}  }
class C{  public static Flag registerExcludeDuplicatesFlag(final CFlags flags){  return flags.registerOptional(EXCLUDE_DUPLICATES_FLAG,EXCLUDE_DUPLICATES_DESC).setCategory(SENSITIVITY_TUNING);}  }
class C{  public static <K,V>Map<K,V> map(K[] keys,V[] values){  if (keys.length != values.length) {    throw new IllegalArgumentException("Cannot create a Map: " + "The number of keys and values differs.");  }  Map<K,V> map=new LinkedHashMap<K,V>();  for (int i=0; i < keys.length; i++) {    K key=keys[i];    V value=values[i];    map.put(key,value);  }  return map;}  }
class C{  private BasicBlock logicalEntryBlock(){  return isForwards ? cfg.getEntry() : cfg.getExit();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  public final void testDisjunctive(){  assertNotNull(Constraints.disjunctive(Constraints.minLength(1),Constraints.containsLetter()));}  }
class C{  public void receive(float newSample){  mBuffer.set(mBufferPointer,newSample);  mBufferPointer++;  if (mBufferPointer >= mBufferSize) {    mBufferPointer=0;  }  mDispatchFlag=!mDispatchFlag;  if (mDispatchFlag) {    float accumulator=0;    accumulator+=mCoefficients[mCenterCoefficient] * mBuffer.get(mIndexMap[mBufferPointer][mCenterCoefficientMapIndex]);    for (int x=0; x < mCenterCoefficientMapIndex; x+=2) {      accumulator+=mCoefficients[x] * (mBuffer.get(mIndexMap[mBufferPointer][x]) + mBuffer.get(mIndexMap[mBufferPointer][x + 1]));    }    if (mListener != null) {      mListener.receive((float)(accumulator * mGain));    }  }}  }
class C{  public String toString(){  if (m_InitOptions == null)   return "CVParameterSelection: No model built yet.";  String result="Cross-validated Parameter selection.\n" + "Classifier: " + m_Classifier.getClass().getName() + "\n";  try {    for (int i=0; i < m_CVParams.size(); i++) {      CVParameter cvParam=(CVParameter)m_CVParams.elementAt(i);      result+="Cross-validation Parameter: '-" + cvParam.m_ParamChar + "'"+ " ranged from "+ cvParam.m_Lower+ " to ";switch ((int)(cvParam.m_Lower - cvParam.m_Upper + 0.5)) {case 1:        result+=m_NumAttributes;      break;case 2:    result+=m_TrainFoldSize;  break;default :result+=cvParam.m_Upper;break;}result+=" with " + cvParam.m_Steps + " steps\n";}} catch (Exception ex) {result+=ex.getMessage();}result+="Classifier Options: " + Utils.joinOptions(m_BestClassifierOptions) + "\n\n"+ m_Classifier.toString();return result;}  }
class C{  public boolean isActive(){  return active;}  }
class C{  protected void acceptState(){}  }
class C{  public boolean isCompleteAt(int length){  if (mImageFormat != ImageFormat.JPEG) {    return true;  }  if (mInputStreamSupplier != null) {    return true;  }  Preconditions.checkNotNull(mPooledByteBufferRef);  PooledByteBuffer buf=mPooledByteBufferRef.get();  return (buf.read(length - 2) == (byte)JfifUtil.MARKER_FIRST_BYTE) && (buf.read(length - 1) == (byte)JfifUtil.MARKER_EOI);}  }
class C{  private void rCheckCandidates(Candidate c,DataType cdt,ArrayList<StatementBlock> asb,Integer sCount,boolean[] dep) throws LanguageException {  if (cdt == DataType.SCALAR || cdt == DataType.OBJECT) {    dep[0]=true;    if (ABORT_ON_FIRST_DEPENDENCY)     return;  } else   if (cdt == DataType.MATRIX) {    if (runConstantCheck(c._dat)) {      LOG.trace("PARFOR: Possible output dependency detected via constant self-check: var '" + c._var + "'.");      dep[0]=true;      if (ABORT_ON_FIRST_DEPENDENCY)       return;    }  }  for (  StatementBlock sb : asb)   for (  Statement s : sb._statements) {    sCount++;    if (s instanceof ForStatement) {      rCheckCandidates(c,cdt,((ForStatement)s).getBody(),sCount,dep);    } else     if (s instanceof WhileStatement) {      rCheckCandidates(c,cdt,((WhileStatement)s).getBody(),sCount,dep);    } else     if (s instanceof IfStatement) {      rCheckCandidates(c,cdt,((IfStatement)s).getIfBody(),sCount,dep);      rCheckCandidates(c,cdt,((IfStatement)s).getElseBody(),sCount,dep);    } else     if (s instanceof FunctionStatement) {      rCheckCandidates(c,cdt,((FunctionStatement)s).getBody(),sCount,dep);    } else {      List<DataIdentifier> datsUpdated=getDataIdentifiers(s,true);      if (datsUpdated != null)       for (      DataIdentifier write : datsUpdated) {        String writeStr=write.getName();        if (c._var.equals(writeStr)) {          DataIdentifier dat2=write;          if (cdt == DataType.MATRIX) {            if (c._dat != dat2) {              if (runEqualsCheck(c._dat,dat2)) {              } else               if (runBanerjeeGCDTest(c._dat,dat2)) {                LOG.trace("PARFOR: Possible output dependency detected via GCD/Banerjee: var '" + write + "'.");                dep[0]=true;                if (ABORT_ON_FIRST_DEPENDENCY)                 return;              }            }          } else {            throw new LanguageException("PARFOR loop dependency analysis: cannot check for dependencies " + "due to unknown datatype of var '" + c._var + "'.");          }        }      }      List<DataIdentifier> datsRead=getDataIdentifiers(s,false);      if (datsRead != null)       for (      DataIdentifier read : datsRead) {        String readStr=read.getName();        if (c._var.equals(readStr)) {          DataIdentifier dat2=read;          DataType dat2dt=_vsParent.getVariables().get(readStr).getDataType();          if (cdt == DataType.SCALAR || cdt == DataType.OBJECT || dat2dt == DataType.SCALAR || dat2dt == DataType.OBJECT) {            dep[1]=true;            if (ABORT_ON_FIRST_DEPENDENCY)             return;          } else           if (cdt == DataType.MATRIX && dat2dt == DataType.MATRIX) {            if (runEqualsCheck(c._dat,dat2)) {            } else             if (runBanerjeeGCDTest(c._dat,dat2)) {              LOG.trace("PARFOR: Possible data/anti dependency detected via GCD/Banerjee: var '" + read + "'.");              dep[1]=true;              dep[2]=true;              if (ABORT_ON_FIRST_DEPENDENCY)               return;            } else             if (!(dat2 instanceof IndexedIdentifier)) {              LOG.trace("PARFOR: Possible data/anti dependency detected via GCD/Banerjee: var '" + read + "'.");              dep[1]=true;              dep[2]=true;              if (ABORT_ON_FIRST_DEPENDENCY)               return;            }          } else {            throw new LanguageException("PARFOR loop dependency analysis: cannot check for dependencies " + "due to unknown datatype of var '" + c._var + "'.");          }        }      }    }  }}  }
class C{  public HashCodeBuilder append(int value){  iTotal=iTotal * iConstant + value;  return this;}  }
class C{  public ResultFileInfo(){  super();}  }
class C{  public static boolean[] join(boolean[]... arrays){  if (arrays.length == 0) {    return new boolean[0];  }  if (arrays.length == 1) {    return arrays[0];  }  int length=0;  for (  boolean[] array : arrays) {    length+=array.length;  }  boolean[] result=new boolean[length];  length=0;  for (  boolean[] array : arrays) {    System.arraycopy(array,0,result,length,array.length);    length+=array.length;  }  return result;}  }
class C{  public URI retrieveUriFromServerUrls(Set<String> serverUrls){  URI authUri=null;  for (  String uri : serverUrls) {    authUri=URI.create(uri);    break;  }  return authUri;}  }
class C{  public boolean isInPast(long time){  return time > mCursor.getLong(mCursor.getColumnIndex(COLUMN_NAME_TIMESTAMP));}  }
class C{  protected boolean isAckSuccess(final Map<String,String> result){  return result.get("ACK") != null && ("Success".equalsIgnoreCase(result.get("ACK")) || "SuccessWithWarning".equalsIgnoreCase(result.get("ACK")));}  }
class C{  public void resize(int maxSize){  if (maxSize <= 0) {    throw new IllegalArgumentException("maxSize <= 0");  }synchronized (this) {    this.maxSize=maxSize;  }  trimToSize(maxSize);}  }
class C{  private void displayFirework(Player player){  Location location=player.getLocation();  try {    location.setY(location.getY() - 1);    Firework firework=player.getWorld().spawn(location,Firework.class);    FireworkMeta fireworkMeta=firework.getFireworkMeta();    FireworkEffect effect;    try {      effect=FireworkEffect.builder().flicker(false).trail(false).withColor(Color.WHITE.mixColors(Color.BLUE.mixColors(Color.NAVY))).with(Type.valueOf(fireworkStyle.toUpperCase())).withFade(Color.PURPLE).build();    } catch (    Exception e) {      effect=FireworkEffect.builder().flicker(false).trail(false).withColor(Color.WHITE.mixColors(Color.BLUE.mixColors(Color.NAVY))).with(Type.BALL_LARGE).withFade(Color.PURPLE).build();      plugin.getLogger().severe("Error while loading FireworkStyle. Please check your config. Loading default style.");    }    fireworkMeta.addEffects(effect);    firework.setVelocity(player.getLocation().getDirection().multiply(0));    firework.setFireworkMeta(fireworkMeta);  } catch (  IllegalArgumentException e) {    player.getWorld().playSound(location,Sound.ENTITY_FIREWORK_LAUNCH,1,0.6f);    ParticleEffect.FIREWORKS_SPARK.display(0,3,0,0.1f,500,location,1);    player.getWorld().playSound(location,Sound.ENTITY_FIREWORK_BLAST,1,0.6f);    player.getWorld().playSound(location,Sound.ENTITY_FIREWORK_TWINKLE,1,0.6f);  }}  }
class C{  @NoInline public final Address alloc(int bytes,int align,int offset){  Address cell=allocSlow(bytes,align,offset);  return alignAllocation(cell,align,offset);}  }
class C{  public VisibleWhitespaceToken(){  super();  dotRect=new Rectangle2D.Float(0,0,1,1);}  }
class C{  @GwtIncompatible @SuppressWarnings("unchecked") public static <T>T[] newArray(Class<T> type,int length){  return (T[])Array.newInstance(type,length);}  }
class C{  @Override public int hashCode(){  return year;}  }
class C{  @Override @SuppressWarnings("fallthrough") public void run(){  int chr;  try {    while ((chr=rdr.read()) >= 0) {switch (chr) {case 13:case 32:        break;case '>':      message+=(char)chr;case 10:    if (messageHandler != null)     messageHandler.handleTelegram(message.toCharArray());  message="";break;default :message+=(char)chr;}}} catch (Exception ex) {ex.printStackTrace();}}  }
class C{  public RemoteRunnerProcess run(RunRequest request) throws RunnerException {  final Link link=getLink(Constants.LINK_REL_RUN);  if (link == null) {    throw new RunnerException("Unable get URL for starting application's process");  }  final ApplicationProcessDescriptor process=runnerRequest(requestFactory.fromLink(link)).asDto(ApplicationProcessDescriptor.class);  lastUsage=System.currentTimeMillis();  return new RemoteRunnerProcess(baseUrl,name,process.getProcessId(),requestFactory);}  }
class C{  public synchronized E copy(E src) throws Exception {  reset();  Future<E> serResult=exec.submit(new Serialiser(src));  Future<E> desResult=exec.submit(new Deserialser());  E result=null;  try {    serResult.get();  } catch (  Exception e) {    throw new Exception("Copy failed in serialiser",e);  }  try {    result=desResult.get();  } catch (  Exception e) {    throw new Exception("Copy failed in deserialiser",e);  }  return result;}  }
class C{  public AffineTransform(float[] flatmatrix){  m00=flatmatrix[0];  m10=flatmatrix[1];  m01=flatmatrix[2];  m11=flatmatrix[3];  if (flatmatrix.length > 5) {    m02=flatmatrix[4];    m12=flatmatrix[5];  }  updateState();}  }
class C{  Declaration load(String name,List<TypeParameter> existing){  if (model == null) {    throw new IllegalStateException("No model available to load " + getNameAsString() + "::"+ name);  }  @SuppressWarnings("unchecked") final Map<String,Object> map=model == null ? null : (Map<String,Object>)model.get(name);  if (map == null) {    if ("Nothing".equals(name)) {      if (isLanguagePackage()) {        return nothing;      } else       if (getModule().getJsMajor() < 9 || (getModule().getJsMajor() == 9 && getModule().getJsMinor() < 1)) {        return nothing;      }    } else     if ("$U".equals(name)) {      return unknown;    }    throw new IllegalStateException("Cannot find " + pkgname + "::"+ name+ " in "+ model.keySet());  }  Object metatype=map.get(KEY_METATYPE);  if (metatype == null) {    throw new IllegalArgumentException("Missing metatype from entry " + map);  }  if (metatype.equals(METATYPE_ATTRIBUTE) || metatype.equals(METATYPE_GETTER)) {    return loadAttribute(name,map,this,null);  } else   if (metatype.equals(METATYPE_CLASS) || metatype instanceof com.redhat.ceylon.model.typechecker.model.Class) {    return loadClass(name,map,this,existing);  } else   if (metatype.equals(METATYPE_INTERFACE) || metatype instanceof com.redhat.ceylon.model.typechecker.model.Interface) {    return loadInterface(name,map,this,existing);  } else   if (metatype.equals(METATYPE_METHOD)) {    return loadMethod(name,map,this,existing);  } else   if (metatype.equals(METATYPE_OBJECT) || metatype instanceof Value) {    return loadObject(name,map,this,existing);  } else   if (metatype.equals(METATYPE_ALIAS)) {    return loadTypeAlias(name,map,this,existing);  }  System.out.println("WTF is this shit " + map);  return null;}  }
class C{  public T3Size decodePageContent(final PdfObject pdfObject) throws PdfException {  try {    parserOptions.imagesProcessedFully=true;    parserOptions.tooManyShapes=false;    imageCount=0;    parserOptions.setPdfLayerList(this.layers);    imagesInFile=null;    if (!parserOptions.renderDirectly() && statusBar != null) {      statusBar.percentageDone=0;    }    if (newGS != null) {      gs=newGS;    } else {      gs=new GraphicsState(0,0);    }    if (parserOptions.isRenderPage()) {      if (current == null) {        throw new PdfException("DynamicVectorRenderer not setup PdfStreamDecoder setStore(...) should be called");      }      current.drawClip(gs,parserOptions.defaultClip,false);      final int pageNum=parserOptions.getPageNumber();      current.writeCustom(DynamicVectorRenderer.PAINT_BACKGROUND,new Rectangle(pageData.getCropBoxX(pageNum),pageData.getCropBoxY(pageNum),pageData.getCropBoxWidth(pageNum),pageData.getCropBoxHeight(pageNum)));    }    final byte[] b_data;    byte[][] pageContents=null;    if (pdfObject != null) {      pageContents=pdfObject.getKeyArray(PdfDictionary.Contents);      isDataValid=pdfObject.streamMayBeCorrupt();    }    if (pdfObject != null && pageContents == null) {      b_data=currentPdfFile.readStream(pdfObject,true,true,false,false,false,pdfObject.getCacheName(currentPdfFile.getObjectReader()));    } else     if (pageStream != null) {      b_data=pageStream;    } else {      b_data=currentPdfFile.getObjectReader().readPageIntoStream(pdfObject);    }    lastDataPointer=-1;    if (b_data != null && b_data.length > 0) {      decodeStreamIntoObjects(b_data,false);    }    if (!parserOptions.isType3Font()) {      cache.resetFonts();    }    final T3Size t3=new T3Size();    if (t3Decoder != null) {      t3.x=t3Decoder.T3maxWidth;      t3.y=t3Decoder.T3maxHeight;      ignoreColors=t3Decoder.ignoreColors;      t3Decoder=null;    }    return t3;  } catch (  final Error err) {    LogWriter.writeLog("Error " + err);    if (ExternalHandlers.throwMissingCIDError && err.getMessage() != null && err.getMessage().contains("kochi")) {      throw err;    }    errorTracker.addPageFailureMessage("Problem decoding page " + err);  }  return null;}  }
class C{  private AppendingFilter(String param){  super(AppendingFilter.class.getSimpleName());  this.param=param;}  }
class C{  public static JSONObject serializeToJson(final SerializableEntity entity){  final JsonSerializer serializer=new JsonSerializer();  entity.serialize(serializer);  return serializer.getObject();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetelementsbytagnamevalue.class,args);}  }
class C{  public void testIterator() throws InterruptedException {  LinkedBlockingDeque q=populatedDeque(SIZE);  Iterator it=q.iterator();  while (it.hasNext()) {    assertEquals(it.next(),q.take());  }}  }
class C{  protected void displaySaveErrorDialog(){  SwingTools.showVerySimpleErrorMessage("configurable_dialog.save_configurable");}  }
class C{  void preReplaceChildEvent(ASTNode node,ASTNode child,ASTNode newChild,StructuralPropertyDescriptor property){}  }
class C{  @Override public String toString(){  return "CUtexObject[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  public static String generateActivationKey(){  return RandomStringUtils.randomNumeric(DEF_COUNT);}  }
class C{  public void openFile() throws IOException {  if (file == null) {    file=FileUtils.open(name,mode);    file.position(filePos);  }}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.setTitle("AgeraSimpleActivity");  ButterKnife.bind(this);  this.playAgera();}  }
class C{  public Long addFolderByExternalUserIdAndType(String SID,String externalUserId,Long parentFileExplorerItemId,String folderName,Long room_id,Boolean isOwner,Long externalFilesid,String externalType) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long User_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkWebServiceLevel(User_level)) {      Users userExternal=userManagement.getUserByExternalIdAndType(externalUserId,externalType);      Long userId=userExternal.getUser_id();      log.debug("addFolder " + parentFileExplorerItemId);      if (parentFileExplorerItemId == -2 && isOwner) {        return fileExplorerItemDao.add(folderName,"",0L,userId,room_id,userId,true,false,false,"",false,false,externalFilesid,externalType);      } else {        return fileExplorerItemDao.add(folderName,"",parentFileExplorerItemId,null,room_id,userId,true,false,false,"",false,false,externalFilesid,externalType);      }    }  } catch (  Exception err) {    log.error("[addFolderByExternalUserIdAndType]",err);  }  return null;}  }
class C{  public boolean isNodeChild(TreeNode aNode){  boolean retval;  if (aNode == null) {    retval=false;  } else {    if (getChildCount() == 0) {      retval=false;    } else {      retval=(aNode.getParent() == this);    }  }  return retval;}  }
class C{  public void incrementAndGetCount(){  refenceCount.incrementAndGet();}  }
class C{  private boolean canDeleteBlock(AbstractBlockBase<?> block){  if (block == null || block.getSuccessorCount() != 1 || block.getPredecessorCount() == 0 || block.getSuccessors()[0] == block) {    return false;  }  List<LIRInstruction> instructions=lir.getLIRforBlock(block);  assert instructions.size() >= 2 : "block must have label and branch";  assert instructions.get(0) instanceof StandardOp.LabelOp : "first instruction must always be a label";  assert instructions.get(instructions.size() - 1) instanceof StandardOp.JumpOp : "last instruction must always be a branch";  assert ((StandardOp.JumpOp)instructions.get(instructions.size() - 1)).destination().label() == ((StandardOp.LabelOp)lir.getLIRforBlock(block.getSuccessors()[0]).get(0)).getLabel() : "branch target must be the successor";  return instructions.size() == 2 && !instructions.get(instructions.size() - 1).hasState() && !block.isExceptionEntry();}  }
class C{  public boolean supportsSessionVariables(){  return false;}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  private void step_2(){  final SpeakerNPC npc=npcs.get(NPC_NAME);  npc.add(ConversationStates.IDLE,ConversationPhrases.GREETING_MESSAGES,new AndCondition(new GreetingMatchesNameCondition(npc.getName()),new QuestActiveCondition(QUEST_SLOT),new QuestNotInStateCondition(QUEST_SLOT,"reward")),ConversationStates.QUESTION_1,"Oh it's you again. Did you bring me any #items for my new crown?",null);  npc.add(ConversationStates.QUESTION_1,"items",null,ConversationStates.QUESTION_1,null,new SayRequiredItemsFromCollectionAction(QUEST_SLOT,"I need [items]. Did you bring something?"));  npc.add(ConversationStates.QUESTION_1,ConversationPhrases.YES_MESSAGES,null,ConversationStates.QUESTION_1,"Fine, what did you bring?",null);  ChatAction completeAction=new MultipleActions(new SetQuestAction(QUEST_SLOT,"reward"),new SayTextAction("You have served me well, my crown will be the mightiest of them all!" + " Go to see " + REWARD_NPC_NAME + " in the Wizard City to get your #reward."),new IncreaseXPAction(XP_REWARD));  final ItemCollection items=new ItemCollection();  items.addFromQuestStateString(NEEDED_ITEMS);  for (  final Map.Entry<String,Integer> item : items.entrySet()) {    npc.add(ConversationStates.QUESTION_1,item.getKey(),null,ConversationStates.QUESTION_1,null,new CollectRequestedItemsAction(item.getKey(),QUEST_SLOT,"Good, do you have anything else?","You have already brought that!",completeAction,ConversationStates.ATTENDING));  }  npc.add(ConversationStates.ATTENDING,ConversationPhrases.NO_MESSAGES,new AndCondition(new QuestActiveCondition(QUEST_SLOT),new QuestNotInStateCondition(QUEST_SLOT,"reward")),ConversationStates.IDLE,"Well don't come back before you find something for me!",null);  npc.add(ConversationStates.QUESTION_1,ConversationPhrases.NO_MESSAGES,new AndCondition(new QuestActiveCondition(QUEST_SLOT),new QuestNotInStateCondition(QUEST_SLOT,"reward")),ConversationStates.IDLE,"Farewell, come back after you have what I need!",null);  npc.add(ConversationStates.ATTENDING,"reward",null,ConversationStates.IDLE,"As I said, find priestess " + REWARD_NPC_NAME + " in a temple at the city of wizards. She will give you your reward. Now go, I'm busy!",null);  npc.add(ConversationStates.IDLE,ConversationPhrases.GREETING_MESSAGES,new AndCondition(new GreetingMatchesNameCondition(npc.getName()),new OrCondition(new QuestCompletedCondition(QUEST_SLOT),new QuestInStateCondition(QUEST_SLOT,"reward"))),ConversationStates.IDLE,"My new crown will be ready soon and I will dethrone the king! Mwahahaha!",null);}  }
class C{  public static LinkedHashSet<ClassNode> collectSelfTypes(ClassNode receiver,LinkedHashSet<ClassNode> selfTypes,boolean checkInterfaces,boolean checkSuper){  if (Traits.isTrait(receiver)) {    List<AnnotationNode> annotations=receiver.getAnnotations(SELFTYPE_CLASSNODE);    for (    AnnotationNode annotation : annotations) {      Expression value=annotation.getMember("value");      if (value instanceof ClassExpression) {        selfTypes.add(value.getType());      } else       if (value instanceof ListExpression) {        List<Expression> expressions=((ListExpression)value).getExpressions();        for (        Expression expression : expressions) {          if (expression instanceof ClassExpression) {            selfTypes.add(expression.getType());          }        }      }    }  }  if (checkInterfaces) {    ClassNode[] interfaces=receiver.getInterfaces();    for (    ClassNode anInterface : interfaces) {      collectSelfTypes(anInterface,selfTypes,true,checkSuper);    }  }  if (checkSuper) {    ClassNode superClass=receiver.getSuperClass();    if (superClass != null) {      collectSelfTypes(superClass,selfTypes,checkInterfaces,true);    }  }  return selfTypes;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:43.682 -0500",hash_original_method="96B84444EEB95F8262A1F514B70427CB",hash_generated_method="33B6AFAC50A132BCF2111D92B0BC9589") private void readAndDeleteLegacyAccountInfoLocked(){  File file=mContext.getDatabasePath("syncmanager.db");  if (!file.exists()) {    return;  }  String path=file.getPath();  SQLiteDatabase db=null;  try {    db=SQLiteDatabase.openDatabase(path,null,SQLiteDatabase.OPEN_READONLY);  } catch (  SQLiteException e) {  }  if (db != null) {    final boolean hasType=db.getVersion() >= 11;    if (DEBUG_FILE)     Log.v(TAG,"Reading legacy sync accounts db");    SQLiteQueryBuilder qb=new SQLiteQueryBuilder();    qb.setTables("stats, status");    HashMap<String,String> map=new HashMap<String,String>();    map.put("_id","status._id as _id");    map.put("account","stats.account as account");    if (hasType) {      map.put("account_type","stats.account_type as account_type");    }    map.put("authority","stats.authority as authority");    map.put("totalElapsedTime","totalElapsedTime");    map.put("numSyncs","numSyncs");    map.put("numSourceLocal","numSourceLocal");    map.put("numSourcePoll","numSourcePoll");    map.put("numSourceServer","numSourceServer");    map.put("numSourceUser","numSourceUser");    map.put("lastSuccessSource","lastSuccessSource");    map.put("lastSuccessTime","lastSuccessTime");    map.put("lastFailureSource","lastFailureSource");    map.put("lastFailureTime","lastFailureTime");    map.put("lastFailureMesg","lastFailureMesg");    map.put("pending","pending");    qb.setProjectionMap(map);    qb.appendWhere("stats._id = status.stats_id");    Cursor c=qb.query(db,null,null,null,null,null,null);    while (c.moveToNext()) {      String accountName=c.getString(c.getColumnIndex("account"));      String accountType=hasType ? c.getString(c.getColumnIndex("account_type")) : null;      if (accountType == null) {        accountType="com.google";      }      String authorityName=c.getString(c.getColumnIndex("authority"));      AuthorityInfo authority=this.getOrCreateAuthorityLocked(new Account(accountName,accountType),authorityName,-1,false);      if (authority != null) {        int i=mSyncStatus.size();        boolean found=false;        SyncStatusInfo st=null;        while (i > 0) {          i--;          st=mSyncStatus.valueAt(i);          if (st.authorityId == authority.ident) {            found=true;            break;          }        }        if (!found) {          st=new SyncStatusInfo(authority.ident);          mSyncStatus.put(authority.ident,st);        }        st.totalElapsedTime=getLongColumn(c,"totalElapsedTime");        st.numSyncs=getIntColumn(c,"numSyncs");        st.numSourceLocal=getIntColumn(c,"numSourceLocal");        st.numSourcePoll=getIntColumn(c,"numSourcePoll");        st.numSourceServer=getIntColumn(c,"numSourceServer");        st.numSourceUser=getIntColumn(c,"numSourceUser");        st.numSourcePeriodic=0;        st.lastSuccessSource=getIntColumn(c,"lastSuccessSource");        st.lastSuccessTime=getLongColumn(c,"lastSuccessTime");        st.lastFailureSource=getIntColumn(c,"lastFailureSource");        st.lastFailureTime=getLongColumn(c,"lastFailureTime");        st.lastFailureMesg=c.getString(c.getColumnIndex("lastFailureMesg"));        st.pending=getIntColumn(c,"pending") != 0;      }    }    c.close();    qb=new SQLiteQueryBuilder();    qb.setTables("settings");    c=qb.query(db,null,null,null,null,null,null);    while (c.moveToNext()) {      String name=c.getString(c.getColumnIndex("name"));      String value=c.getString(c.getColumnIndex("value"));      if (name == null)       continue;      if (name.equals("listen_for_tickles")) {        setMasterSyncAutomatically(value == null || Boolean.parseBoolean(value));      } else       if (name.startsWith("sync_provider_")) {        String provider=name.substring("sync_provider_".length(),name.length());        int i=mAuthorities.size();        while (i > 0) {          i--;          AuthorityInfo authority=mAuthorities.valueAt(i);          if (authority.authority.equals(provider)) {            authority.enabled=value == null || Boolean.parseBoolean(value);            authority.syncable=1;          }        }      }    }    c.close();    db.close();    (new File(path)).delete();  }}  }
class C{  public void makeFieldTraced(RVMField field){  int[] oldOffsets=referenceOffsets;  int fieldOffset=field.getOffset().toInt();  referenceOffsets=MemoryManager.newNonMovingIntArray(oldOffsets.length + 1);  int i;  for (i=0; i < oldOffsets.length && oldOffsets[i] < fieldOffset; i++) {    referenceOffsets[i]=oldOffsets[i];  }  referenceOffsets[i++]=fieldOffset;  while (i < referenceOffsets.length) {    referenceOffsets[i]=oldOffsets[i - 1];    i++;  }  SpecializedMethodManager.refreshSpecializedMethods(this);  for (  RVMClass klass : subClasses) {    klass.makeFieldTraced(field);  }}  }
class C{  public OutlierList(Outlier outlier){  this.outliers=new ArrayList();  setAveragedOutlier(outlier);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(isSupported07.class,args);}  }
class C{  default <K>Traversable<Tuple2<K,Seq<T>>> grouped(final Function<? super T,? extends K> classifier){  return traversable().grouped(classifier);}  }
class C{  protected boolean beforeSave(boolean newRecord){  if ((COSTELEMENTTYPE_Material.equals(getCostElementType()) || COSTELEMENTTYPE_OutsideProcessing.equals(getCostElementType())) && (newRecord || is_ValueChanged(COLUMNNAME_CostingMethod))) {    String sql="SELECT  COALESCE(MAX(M_CostElement_ID),0) FROM M_CostElement " + "WHERE AD_Client_ID=? AND CostingMethod=? AND CostElementType=?";    int id=DB.getSQLValue(get_TrxName(),sql,getAD_Client_ID(),getCostingMethod(),getCostElementType());    if (id > 0 && id != get_ID()) {      log.saveError("AlreadyExists",Msg.getElement(getCtx(),"CostingMethod"));      return false;    }  }  if (getAD_Org_ID() != 0)   setAD_Org_ID(0);  return true;}  }
class C{  private Bitmap onSaveClicked(Bitmap bm){  if (mSaving)   return bm;  if (mCrop == null) {    return bm;  }  mSaving=true;  Rect r=mCrop.getCropRect();  int width=360;  int height=360;  Bitmap croppedImage=Bitmap.createBitmap(width,height,Bitmap.Config.RGB_565);  Canvas canvas=new Canvas(croppedImage);  Rect dstRect=new Rect(0,0,width,height);  canvas.drawBitmap(bm,r,dstRect,null);  return croppedImage;}  }
class C{  protected VariableEnvironmentElementImpl(){  super();}  }
class C{  protected boolean excludeFile(String file){  if (excluded == null)   return false;  Iterator<String> iter=excluded.iterator();  while (iter.hasNext())   if (file.endsWith(iter.next()))   return true;  return false;}  }
class C{  public void addRow(Assignment condition,Value head,double prob){  if (prob < 0.0f || prob > 1.05f) {    log.warning("probability is not well-formed: " + prob);    return;  }  if (!table.containsKey(condition)) {    table.put(condition,new CategoricalTable.Builder(headVar));  }  table.get(condition).addRow(head,prob);}  }
class C{  public static boolean isWritable(@NonNull final File file){  boolean isExisting=file.exists();  try {    FileOutputStream output=new FileOutputStream(file,true);    try {      output.close();    } catch (    IOException e) {    }  } catch (  FileNotFoundException e) {    if (!file.isDirectory()) {      return false;    }  }  boolean result=file.canWrite();  if (!isExisting) {    file.delete();  }  return result;}  }
class C{  public void refreshListAfterBroadcastReceiver(int id,boolean status){  for (int i=0; i < lists.size(); i++) {    if (Integer.valueOf(lists.get(i).contentId) == id) {      lists.get(i).isfav=status ? Config.STORE : Config.NO_ST;      adapter.notifyItemChanged(i,lists.get(i));    }  }}  }
class C{  public static final boolean isASCII(File file) throws IOException, StlParseException {  if (file.exists())   throw new StlParseException("Passed file does not exist.");  if (!file.isFile())   throw new StlParseException("This is not a file.");  final BufferedReader buffer=new BufferedReader(new FileReader(file));  boolean isASCII=isASCII(buffer);  buffer.close();  return isASCII;}  }
class C{  @Override public String toString(){  return "cudaFuncAttributes[" + "sharedSizeBytes=" + sharedSizeBytes + ","+ "constSizeBytes="+ constSizeBytes+ ","+ "localSizeBytes="+ localSizeBytes+ ","+ "maxThreadsPerBlock="+ maxThreadsPerBlock+ ","+ "numRegs="+ numRegs+ ","+ "ptxVersion="+ ptxVersion+ ","+ "binaryVersion="+ binaryVersion+ ","+ "cacheModeCA="+ cacheModeCA+ "]";}  }
class C{  public HistogramBuilder order(Histogram.Order order){  this.order=order;  return this;}  }
class C{  public Map<SignatureLibrary,SignatureLibraryIntegratedMethods> unmarshal(InputStream xmlIs) throws XMLStreamException {  final Map<SignatureLibrary,SignatureLibraryIntegratedMethods> libraryMethods=new HashMap<SignatureLibrary,SignatureLibraryIntegratedMethods>();  XMLEventReader reader=null;  try {    XMLInputFactory factory=XMLInputFactory.newInstance();    factory.setProperty(XMLInputFactory.IS_VALIDATING,false);    reader=factory.createXMLEventReader(xmlIs);    XMLEvent currentEvent;    while (!(currentEvent=reader.nextEvent()).isEndDocument()) {      if (currentEvent.isStartElement()) {        final StartElement startElement=currentEvent.asStartElement();        if (EL_INTERPRO.equals(startElement.getName().getLocalPart())) {          processEntryElement(startElement,reader,libraryMethods);        }      }    }  } catch (  NoSuchElementException nsee) {    LOGGER.error("NoSuchElementException thrown",nsee);    throw new IllegalStateException("The InterPro XML file that is being unmarshalled is incomplete - a NoSuchElementException has been thrown before the end tag has been reached.",nsee);  } finally {    if (reader != null) {      reader.close();    }  }  return libraryMethods;}  }
class C{  public static boolean isBasicType(byte type){  return type <= CORE_DATE;}  }
class C{  public boolean prackRecieved(){  if (this.pendingReliableResponse == null)   return false;  if (provisionalResponseTask != null)   this.provisionalResponseTask.cancel();  this.pendingReliableResponse=null;  this.provisionalResponseSem.release();  return true;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public boolean uses(){  return getInputRegisters().size() != 0;}  }
class C{  private void updateButtonGroupForRow(int row){  int startEndMargin=row == ROW_MAIN ? mMargin : 0;  mButtonGroup.setHorizontalMode(mMargin / 2,startEndMargin,startEndMargin);  mButtonGroup.gravity=Gravity.END;  if (row == ROW_OTHER && mButtonGroup.views.length >= 2) {    int extraWidth=availableWidth() - getWidthWithMargins(mButtonGroup);    if (extraWidth < 0) {      mButtonGroup.setVerticalMode(mMargin / 2,0);      mButtonGroup.gravity=Gravity.FILL_HORIZONTAL;    } else     if (mTertiaryButton != null) {      ((LayoutParams)mTertiaryButton.getLayoutParams()).endMargin+=extraWidth;    }  }  if (row == ROW_MAIN && mCustomButton != null) {    ((LayoutParams)mCustomButton.getLayoutParams()).endMargin=mMargin;  }}  }
class C{  private String describeKarma(double karma){  if (karma > 499) {    return "You have unusually good karma";  } else   if (karma > 99) {    return "You have great karma";  } else   if (karma > 5) {    return "You have good karma";  } else   if (karma > -5) {    return "You have average karma";  } else   if (karma > -99) {    return "You have bad karma";  } else   if (karma > -499) {    return "You have terrible karma";  }  return "You have disastrously bad karma";}  }
class C{  protected LayoutManager createLayoutManager(){  if (tabPane.getTabLayoutPolicy() == JTabbedPane.SCROLL_TAB_LAYOUT) {    return new TabbedPaneScrollLayout();  } else {    return new TabbedPaneLayout();  }}  }
class C{  public ColorDecorator(Color startColor){  this();  this.fadeFrom(startColor);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  static <T>GeneralRange<T> upTo(Comparator<? super T> comparator,@Nullable T endpoint,BoundType boundType){  return new GeneralRange<T>(comparator,false,null,OPEN,true,endpoint,boundType);}  }
class C{  public static Map<String,Object> searchDuplicatedAncestor(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  String productId=(String)context.get("productId");  String productIdKey=(String)context.get("productIdTo");  Timestamp fromDate=(Timestamp)context.get("fromDate");  String bomType=(String)context.get("productAssocTypeId");  if (fromDate == null) {    fromDate=Timestamp.valueOf((new Date()).toString());  }  GenericValue duplicatedProductAssoc=null;  try {    duplicatedProductAssoc=BOMHelper.searchDuplicatedAncestor(productId,productIdKey,bomType,fromDate,delegator,dispatcher,userLogin);  } catch (  GenericEntityException gee) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingBomErrorRunningDuplicatedAncestorSearch",UtilMisc.toMap("errorString",gee.getMessage()),locale));  }  result.put("duplicatedProductAssoc",duplicatedProductAssoc);  return result;}  }
class C{  public void stopSong(){  mediaPlayer.stop();}  }
class C{  @Override protected boolean shouldComposeCreationImage(){  return true;}  }
class C{  private int doScale(int number,double factor){  return (int)StrictMath.round(number * factor);}  }
class C{  public static void reverse(final int[] array){  if (array == null) {    return;  }  int i=0;  int j=array.length - 1;  int tmp;  while (j > i) {    tmp=array[j];    array[j]=array[i];    array[i]=tmp;    j--;    i++;  }}  }
class C{  public final void testGetDigestAlgorithm(){  PSSParameterSpec pssps=new PSSParameterSpec("SHA-1","MGF1",MGF1ParameterSpec.SHA1,20,1);  assertEquals("SHA-1",pssps.getDigestAlgorithm());}  }
class C{  protected Size2D arrangeRF(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  Size2D s=arrangeNF(container,g2,constraint);  if (constraint.getWidthRange().contains(s.width)) {    return s;  } else {    RectangleConstraint c=constraint.toFixedWidth(constraint.getWidthRange().constrain(s.getWidth()));    return arrangeFF(container,g2,c);  }}  }
class C{  protected void runTimer(TimerMode mode,int millisecondExecutionPeriod,int sampleTimeInMilliseconds){  try {    Strongback.configure().useExecutionTimerMode(mode).useExecutionPeriod(millisecondExecutionPeriod,TimeUnit.MILLISECONDS).initialize();    assertThat(ExecutableTimer.measureTimingAndPrint(Strongback.executor(),mode.toString() + " for " + millisecondExecutionPeriod+ " ms",sampleTimeInMilliseconds / millisecondExecutionPeriod).await(10,TimeUnit.SECONDS).isComplete());  } catch (  InterruptedException e) {    Thread.interrupted();    throw new AssertionFailedError();  }}  }
class C{  public void scrollToFinishActivity(){  final int childWidth=mContentView.getWidth();  int left=childWidth + mShadowLeft.getIntrinsicWidth() + mEdgeFlingDistance;  mViewDragHelper.smoothSlideViewTo(mContentView,left,0);  invalidate();}  }
class C{  private void synchronizeTenantAuthenticationPolicy(String tenantName) throws Exception {  boolean passwordAuthEnabled=false;  boolean windowsAuthEnabled=false;  boolean certAuthEnabled=false;  boolean rsaSecureIDAuthnEnabled=false;  Collection<IIdentityStoreData> providers=getProviders(tenantName);  Set<Integer> tenantPermissibleAuthnTypes=new HashSet<Integer>();  for (  IIdentityStoreData provider : providers) {    int[] authnTypes=provider.getExtendedIdentityStoreData().getAuthnTypes();    for (    int authnType : authnTypes) {      tenantPermissibleAuthnTypes.add(Integer.valueOf(authnType));    }  }  if (tenantPermissibleAuthnTypes.contains(DirectoryConfigStore.FLAG_AUTHN_TYPE_ALLOW_PASSWORD)) {    passwordAuthEnabled=true;  }  if (tenantPermissibleAuthnTypes.contains(DirectoryConfigStore.FLAG_AUTHN_TYPE_ALLOW_WINDOWS)) {    windowsAuthEnabled=true;  }  if (tenantPermissibleAuthnTypes.contains(DirectoryConfigStore.FLAG_AUTHN_TYPE_ALLOW_TLS_CERTIFICATE)) {    certAuthEnabled=true;  }  if (tenantPermissibleAuthnTypes.contains(DirectoryConfigStore.FLAG_AUTHN_TYPE_ALLOW_RSA_SECUREID)) {    rsaSecureIDAuthnEnabled=true;  }  _configStore.setAuthnTypes(tenantName,passwordAuthEnabled,windowsAuthEnabled,certAuthEnabled,rsaSecureIDAuthnEnabled);}  }
class C{  protected void configureTestPG(final boolean authorise,final boolean perShipment){  if (authorise) {    activateTestPgParameterSetOn("SUPPORTED_OPERATIONS_SupportAuthorize");  } else {    activateTestPgParameterSetOff("SUPPORTED_OPERATIONS_SupportAuthorize");  }  if (perShipment) {    activateTestPgParameterSetOn("SUPPORTED_OPERATIONS_SupportAuthorizePerShipment");  } else {    activateTestPgParameterSetOff("SUPPORTED_OPERATIONS_SupportAuthorizePerShipment");  }}  }
class C{  public boolean parseConstantPool(InputStream is) throws IOException {  int count=readShort(is);  _cpCount=count;  if (_cpData == null || _cpData.length <= count) {    _cpData=new int[count];    _cpLengths=new int[count];    _classData=new int[count];  }  Arrays.fill(_cpData,0);  Arrays.fill(_cpLengths,0);  Arrays.fill(_classData,0);  int i=1;  while (i < count) {    int index=i;    int code=is.read();    if (code == ByteCodeParser.CP_LONG || code == ByteCodeParser.CP_DOUBLE)     i+=2; else     i+=1;switch (code) {case ByteCodeParser.CP_CLASS:      int utf8Index=readShort(is);    _classData[index]=utf8Index;  break;case ByteCodeParser.CP_FIELD_REF:is.skip(4);break;case ByteCodeParser.CP_METHOD_REF:is.skip(4);break;case ByteCodeParser.CP_INTERFACE_METHOD_REF:is.skip(4);break;case ByteCodeParser.CP_STRING:is.skip(2);break;case ByteCodeParser.CP_INTEGER:is.skip(4);break;case ByteCodeParser.CP_FLOAT:is.skip(4);break;case ByteCodeParser.CP_LONG:is.skip(8);break;case ByteCodeParser.CP_DOUBLE:is.skip(8);break;case ByteCodeParser.CP_NAME_AND_TYPE:is.skip(4);break;case ByteCodeParser.CP_UTF8:{int length=readShort(is);_cpData[index]=_charBufferOffset;_cpLengths[index]=parseUtf8(is,length);break;}case ByteCodeParser.CP_METHOD_HANDLE:is.skip(3);break;case ByteCodeParser.CP_METHOD_TYPE:is.skip(2);break;case ByteCodeParser.CP_INVOKE_DYNAMIC:is.skip(4);break;default :throw error(L.l("'{0}' is an unknown constant pool type.",code));}}return false;}  }
class C{  @Override public void addBean(Object bean){  Assert.notNull(bean);  addBean(bean.getClass().getName(),bean);}  }
class C{  public KafkaConfig reloadKafkaConfigLocal(String name) throws IOException {  String path=KafkaConfig.concatResourcePath(name);  KafkaConfig ndesc=loadKafkaConfigAt(path);  kafkaMap.putLocal(ndesc.getName(),ndesc);  return ndesc;}  }
class C{  public static boolean isNotFirstCap(String str){  return !isFirstCap(str);}  }
class C{  public void add(long[] vals){  add(vals,0,vals.length);}  }
class C{  private boolean isDataEmpty(){  DataWrapper wrapper=this.dataEditor.getDataWrapper();  DataModelList dataModels=wrapper.getDataModelList();  for (  DataModel model : dataModels) {    if (model instanceof DataSet) {      return ((DataSet)model).getNumRows() == 0;    } else {      return false;    }  }  return true;}  }
class C{  public HelpCommand(Server server){  super(server,"help","Lists all of the commands available, or gives help on a specific command.  Usage: /help [command]");}  }
class C{  void loadTypeIds() throws IOException {  int count=mHeaderItem.typeIdsSize;  mTypeIds=new TypeIdItem[count];  seek(mHeaderItem.typeIdsOff);  for (int i=0; i < count; i++) {    mTypeIds[i]=new TypeIdItem();    mTypeIds[i].descriptorIdx=readInt();  }}  }
class C{  public static byte[] calculateMD5Digest(@NotNull InputStream in) throws NoSuchAlgorithmException, IOException {  MessageDigest md=MessageDigest.getInstance("MD5");  InputStream fis=new BufferedInputStream(in);  byte[] dataBytes=new byte[1024];  int nread;  while ((nread=fis.read(dataBytes)) != -1)   md.update(dataBytes,0,nread);  return md.digest();}  }
class C{  public Scroller(Context context,Interpolator interpolator){  this(context,interpolator,true);}  }
class C{  static boolean isWifi(Context context){  if (context == null) {    return false;  }  ConnectivityManager manager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo info=manager.getActiveNetworkInfo();  return info != null && (info.getType() == ConnectivityManager.TYPE_WIFI);}  }
class C{  protected SimState(long seed,Schedule schedule){  this(seed,new MersenneTwisterFast(seed),schedule);}  }
class C{  public final void testValidateWhenValidatorFails(){  Validator<Object> validator=new AbstractValidatorImplementation("foo",false);  NegateValidator<Object> negateValidator=new NegateValidator<>("foo",validator);  assertTrue(negateValidator.validate(new Object()));}  }
class C{  public void receiveResultdeleteServiceSession(org.oscm.example.client.SessionServiceStub.DeleteServiceSessionResponseE result){}  }
class C{  private static List<RegisterDescription> parseRegisterInformation(final Node node) throws MessageParserException {  final List<RegisterDescription> registers=new ArrayList<>();  final NodeList nodes=node.getChildNodes();  for (int i=0; i < nodes.getLength(); ++i) {    final Node child=nodes.item(i);    final String registerName=getAttribute(child,"name");    final String registerSize=getAttribute(child,"size");    final String registerEditable=getAttribute(child,"editable");    registers.add(new RegisterDescription(registerName,Integer.valueOf(registerSize),Boolean.valueOf(registerEditable)));  }  return registers;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeDouble(get());}  }
class C{  public void paintToggleButtonBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public DoubleFactor copy(){  return new DoubleFactor(this);}  }
class C{  private boolean addLinkToStructure(Map<NodePortTuple,Set<Link>> s,Link l){  boolean result1=false, result2=false;  NodePortTuple n1=new NodePortTuple(l.getSrc(),l.getSrcPort());  NodePortTuple n2=new NodePortTuple(l.getDst(),l.getDstPort());  if (s.get(n1) == null) {    s.put(n1,new HashSet<Link>());  }  if (s.get(n2) == null) {    s.put(n2,new HashSet<Link>());  }  result1=s.get(n1).add(l);  result2=s.get(n2).add(l);  return (result1 || result2);}  }
class C{  private static boolean isInvoiceTypeRecurse(GenericValue invoiceType,String inputTypeId) throws GenericEntityException {  String invoiceTypeId=invoiceType.getString("invoiceTypeId");  String parentTypeId=invoiceType.getString("parentTypeId");  if (parentTypeId == null || invoiceTypeId.equals(parentTypeId)) {    return false;  }  if (parentTypeId.equals(inputTypeId)) {    return true;  }  return isInvoiceTypeRecurse(invoiceType.getRelatedOne("ParentInvoiceType",false),inputTypeId);}  }
class C{  public final void testClone(){  LDAPCertStoreParameters cp1=new LDAPCertStoreParameters("myhost",1100);  LDAPCertStoreParameters cp2=(LDAPCertStoreParameters)cp1.clone();  assertTrue("newObject",cp1 != cp2);  assertTrue("hostsTheSame",cp1.getServerName().equals(cp2.getServerName()));  assertTrue("portsTheSame",cp1.getPort() == cp2.getPort());}  }
class C{  public void commence(HttpServletRequest request,HttpServletResponse response,AuthenticationException arg2) throws IOException, ServletException {  log.debug("Pre-authenticated entry point called. Rejecting access");  response.sendError(HttpServletResponse.SC_UNAUTHORIZED,"Access Denied");}  }
class C{  @SuppressWarnings("unchecked") public static void addEquivalenceClassesForPrimaryIndexAccess(ILogicalOperator operator,List<LogicalVariable> indexSearchVars,ARecordType recordType,ARecordType metaRecordType,Dataset dataset,IOptimizationContext context) throws AlgebricksException {  if (dataset.getDatasetDetails().getDatasetType() != DatasetType.INTERNAL) {    return;  }  InternalDatasetDetails datasetDetails=(InternalDatasetDetails)dataset.getDatasetDetails();  List<List<String>> primaryKey=datasetDetails.getPrimaryKey();  Map<String,Integer> fieldNameToIndexMap=new HashMap<String,Integer>();  String[] fieldNames=recordType.getFieldNames();  for (int fieldIndex=0; fieldIndex < fieldNames.length; ++fieldIndex) {    fieldNameToIndexMap.put(fieldNames[fieldIndex],fieldIndex);  }  boolean hasMeta=dataset.hasMetaPart();  Map<String,Integer> metaFieldNameToIndexMap=new HashMap<>();  if (hasMeta) {    String[] metaFieldNames=metaRecordType.getFieldNames();    for (int metaFieldIndex=0; metaFieldIndex < metaFieldNames.length; ++metaFieldIndex) {      metaFieldNameToIndexMap.put(metaFieldNames[metaFieldIndex],metaFieldIndex);    }  }  List<Integer> keySourceIndicators=datasetDetails.getKeySourceIndicator();  LogicalVariable recordVar=hasMeta ? indexSearchVars.get(indexSearchVars.size() - 2) : indexSearchVars.get(indexSearchVars.size() - 1);  LogicalVariable metaRecordVar=hasMeta ? indexSearchVars.get(indexSearchVars.size() - 1) : null;  for (int pkIndex=0; pkIndex < primaryKey.size(); ++pkIndex) {    LogicalVariable referredRecordVar=recordVar;    String pkFieldName=primaryKey.get(pkIndex).get(0);    int source=keySourceIndicators.get(pkIndex);    Integer fieldIndexInRecord;    if (source == 0) {      fieldIndexInRecord=fieldNameToIndexMap.get(pkFieldName);    } else {      referredRecordVar=metaRecordVar;      fieldIndexInRecord=metaFieldNameToIndexMap.get(pkFieldName);    }    LogicalVariable var=indexSearchVars.get(pkIndex);    ILogicalExpression expr=new ScalarFunctionCallExpression(FunctionUtil.getFunctionInfo(AsterixBuiltinFunctions.FIELD_ACCESS_BY_INDEX),new MutableObject<ILogicalExpression>(new VariableReferenceExpression(referredRecordVar)),new MutableObject<ILogicalExpression>(new ConstantExpression(new AsterixConstantValue(new AInt32(fieldIndexInRecord)))));    EquivalenceClass equivClass=new EquivalenceClass(Collections.singletonList(var),var,Collections.singletonList(expr));    Map<LogicalVariable,EquivalenceClass> equivalenceMap=context.getEquivalenceClassMap(operator);    if (equivalenceMap == null) {      equivalenceMap=new HashMap<LogicalVariable,EquivalenceClass>();      context.putEquivalenceClassMap(operator,equivalenceMap);    }    equivalenceMap.put(var,equivClass);  }}  }
class C{  public Builder keyFile(final String keyFile){  this.keyFile=keyFile;  return this;}  }
class C{  public void testSeqnoTracking() throws Exception {  TungstenProperties config=helper.createSimpleRuntime();  ReplicatorRuntime runtime=new ReplicatorRuntime(config,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  runtime.configure();  runtime.prepare();  Pipeline pipeline=runtime.getPipeline();  pipeline.start(new MockEventDispatcher());  Thread.sleep(1000);  long seqno=pipeline.getLastExtractedSeqno();  assertEquals("Expect seqno to be 9 after 10 Xacts",9,seqno);  pipeline.shutdown(false);  pipeline.release(runtime);}  }
class C{  public void Done(){  buffer=null;  bufline=null;  bufcolumn=null;}  }
class C{  boolean isHeader(Object object){  return headers.contains(object);}  }
class C{  private Boolean validateNumber(String testString){  try {    Double res=Double.parseDouble(testString);    return (true);  } catch (  NumberFormatException e) {    return (false);  }}  }
class C{  public int countOpsNeeded(boolean read,boolean changes){  Set<Integer> set=new HashSet<Integer>(cvList.size() + varList.size() + 50);  return makeOpsNeededSet(read,changes,set).size();}  }
class C{  public boolean isIconRowHeaderEnabled(){  return gutter.isIconRowHeaderEnabled();}  }
class C{  public void composeBefore(final AffineTransform3D m){  final double a00=m.m00 * m00 + m.m01 * m10 + m.m02 * m20;  final double a01=m.m00 * m01 + m.m01 * m11 + m.m02 * m21;  final double a02=m.m00 * m02 + m.m01 * m12 + m.m02 * m22;  final double a03=m.m00 * m03 + m.m01 * m13 + m.m02 * m23 + m.m03;  final double a10=m.m10 * m00 + m.m11 * m10 + m.m12 * m20;  final double a11=m.m10 * m01 + m.m11 * m11 + m.m12 * m21;  final double a12=m.m10 * m02 + m.m11 * m12 + m.m12 * m22;  final double a13=m.m10 * m03 + m.m11 * m13 + m.m12 * m23 + m.m13;  final double a20=m.m20 * m00 + m.m21 * m10 + m.m22 * m20;  final double a21=m.m20 * m01 + m.m21 * m11 + m.m22 * m21;  final double a22=m.m20 * m02 + m.m21 * m12 + m.m22 * m22;  final double a23=m.m20 * m03 + m.m21 * m13 + m.m22 * m23 + m.m23;  m00=a00;  m01=a01;  m02=a02;  m03=a03;  m10=a10;  m11=a11;  m12=a12;  m13=a13;  m20=a20;  m21=a21;  m22=a22;  m23=a23;}  }
class C{  @DSComment("no input, no suspicious activity") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:11.131 -0500",hash_original_method="2C5D59A27A6C313C8872AC341D9D75C0",hash_generated_method="3AACFABE68E73FA43986B37F3043990F") public int length(){  return values.size();}  }
class C{  public static CharSequence toText(LuaValue luaValue){  if (LuaUtil.isString(luaValue)) {    return luaValue.optjstring(null);  } else   if (LuaUtil.isUserdata(luaValue)) {    if (luaValue instanceof UDSpannableString) {      return ((UDSpannableString)luaValue).getSpannableStringBuilder();    } else     if (luaValue instanceof UDUnicode) {      return ((UDUnicode)luaValue).toString();    }  }  return null;}  }
class C{  protected void closeSubpath(){  mPSStream.println(CLOSEPATH_STR);  mPenX=mStartPathX;  mPenY=mStartPathY;}  }
class C{  public static void main(String[] args) throws Throwable {  BadKeyUsageTest test=new BadKeyUsageTest();  test.start();}  }
class C{  @Override public void perform(IR ir){  GlobalValueNumberState gvns=ir.HIRInfo.valueNumbers;  DominatorTree dt=ir.HIRInfo.dominatorTree;  for (Enumeration<BasicBlock> bbs=ir.getBasicBlocks(); bbs.hasMoreElements(); ) {    BasicBlock candBB=bbs.nextElement();    Instruction candTest=candBB.firstBranchInstruction();    if (candTest == null)     continue;    if (!(IfCmp.conforms(candTest) || InlineGuard.conforms(candTest)))     continue;    GVCongruenceClass cc=gvns.congruenceClass(candTest);    if (cc.size() > 1) {      for (      ValueGraphVertex vertex : cc) {        Instruction poss=(Instruction)vertex.getName();        if (poss != candTest) {          BasicBlock notTaken=getNotTakenBlock(poss);          BasicBlock taken=poss.getBranchTarget();          if (taken == notTaken)           continue;          if (notTaken.hasOneIn() && dt.dominates(notTaken,candBB)) {            if (DEBUG)             VM.sysWrite(candTest + " is dominated by not-taken branch of " + poss+ "\n");            removeCondBranch(candBB,candTest,ir,poss);            cc.removeVertex(gvns.valueGraph.getVertex(candTest));            break;          }          if (taken.hasOneIn() && dt.dominates(taken,candBB)) {            if (DEBUG)             VM.sysWrite(candTest + " is dominated by taken branch of " + poss+ "\n");            takeCondBranch(candBB,candTest,ir);            cc.removeVertex(gvns.valueGraph.getVertex(candTest));            break;          }        }      }    }  }  removeUnreachableCode(ir);}  }
class C{  public Property monthOfYear(){  return new Property(this,MONTH_OF_YEAR);}  }
class C{  public void addObject(String name,Object o){  m_Objs.put(name,o);}  }
class C{  public boolean isLookAtEnabled(){  return mLookAtEnabled;}  }
class C{  public CountRequest source(byte[] querySource){  return source(querySource,0,querySource.length);}  }
class C{  public int read() throws IOException {  if (filePosition < dataEnd) {    int pos=(int)(filePosition - bufferStart);    filePosition++;    return (buffer[pos] & 0xff);  } else   if (endOfFile) {    return -1;  } else {    seek(filePosition);    return read();  }}  }
class C{  public void advance(){  if (frameCount > 0) {    framePointer=(framePointer + 1) % frameCount;  }}  }
class C{  public void replaceBoardWithRandom(String board){  if (board == null) {    return;  }  for (int i=0; i < boardsSelected.size(); i++) {    if (board.equals(boardsSelected.get(i))) {      int rindex;      if (boardsAvailable.size() == 1) {        rindex=0;      } else {        rindex=Compute.randomInt(boardsAvailable.size() - 3) + 3;      }      if (0 == Compute.randomInt(2)) {        boardsSelected.set(i,Board.BOARD_REQUEST_ROTATION + boardsAvailable.get(rindex));      } else {        boardsSelected.set(i,boardsAvailable.get(rindex));      }    }  }}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  String name;  JSONObject jo=new JSONObject();  Object value;  JSONTokener x=new JSONTokener(string);  jo.put("name",x.nextTo('='));  x.next('=');  jo.put("value",x.nextTo(';'));  x.next();  while (x.more()) {    name=unescape(x.nextTo("=;"));    if (x.next() != '=') {      if (name.equals("secure")) {        value=Boolean.TRUE;      } else {        throw x.syntaxError("Missing '=' in cookie parameter.");      }    } else {      value=unescape(x.nextTo(';'));      x.next();    }    jo.put(name,value);  }  return jo;}  }
class C{  public boolean isRel(){  boolean isRel=false;  if (!isMult() && (getType() != ArchiveFldType.LONG_TEXT))   isRel=true;  return isRel;}  }
class C{  protected void convertInstance(Instance instance){  int index=0;  double[] vals=new double[outputFormatPeek().numAttributes()];  for (int i=0; i < getInputFormat().numAttributes(); i++) {    if (m_DiscretizeCols.isInRange(i) && getInputFormat().attribute(i).isNumeric() && (getInputFormat().classIndex() != i)) {      int j;      double currentVal=instance.value(i);      if (m_CutPoints[i] == null) {        if (instance.isMissing(i)) {          vals[index]=Utils.missingValue();        } else {          vals[index]=0;        }        index++;      } else {        if (!m_MakeBinary) {          if (instance.isMissing(i)) {            vals[index]=Utils.missingValue();          } else {            for (j=0; j < m_CutPoints[i].length; j++) {              if (currentVal <= m_CutPoints[i][j]) {                break;              }            }            vals[index]=j;          }          index++;        } else {          for (j=0; j < m_CutPoints[i].length; j++) {            if (instance.isMissing(i)) {              vals[index]=Utils.missingValue();            } else             if (currentVal <= m_CutPoints[i][j]) {              vals[index]=0;            } else {              vals[index]=1;            }            index++;          }        }      }    } else {      vals[index]=instance.value(i);      index++;    }  }  Instance inst=null;  if (instance instanceof SparseInstance) {    inst=new SparseInstance(instance.weight(),vals);  } else {    inst=new DenseInstance(instance.weight(),vals);  }  inst.setDataset(getOutputFormat());  copyValues(inst,false,instance.dataset(),getOutputFormat());  inst.setDataset(getOutputFormat());  push(inst);}  }
class C{  public void testJson(){  TungstenProperties prop=this.makeProperties();  TungstenProperties propEmbedded=this.makeProperties();  prop.setTungstenProperties("myEmbeddedProp",propEmbedded);  try {    String jsonString=null;    jsonString=prop.toJSON(true);    TungstenProperties propFromJson=TungstenProperties.loadFromJSON(jsonString);    String stringProp=propFromJson.get("string");    assertNotNull(stringProp);    TungstenProperties tungstenProp=propFromJson.getTungstenProperties("myEmbeddedProp");    assertNotNull(tungstenProp);  } catch (  Exception e) {    assertFalse("Problem during JSON serialization/deserialization",true);  }}  }
class C{  public void printArray(String text,byte[] array){  System.out.println(text);  int counter=0;  for (int i=0; i < array.length; i++) {    System.out.println(counter + "; " + array[i]);    counter++;  }}  }
class C{  VarSymbol addParametersReturnReceiver(){  Type samDesc=localContext.bridgedRefSig();  List<Type> samPTypes=samDesc.getParameterTypes();  List<Type> descPTypes=tree.getDescriptorType(types).getParameterTypes();  VarSymbol rcvr;switch (tree.kind) {case BOUND:    rcvr=addParameter("rec$",tree.getQualifierExpression().type,false);  receiverExpression=attr.makeNullCheck(tree.getQualifierExpression());break;case UNBOUND:rcvr=addParameter("rec$",samDesc.getParameterTypes().head,false);samPTypes=samPTypes.tail;descPTypes=descPTypes.tail;break;default :rcvr=null;break;}List<Type> implPTypes=tree.sym.type.getParameterTypes();int implSize=implPTypes.size();int samSize=samPTypes.size();int last=localContext.needsVarArgsConversion() ? implSize - 1 : implSize;boolean checkForIntersection=tree.varargsElement != null || implSize == descPTypes.size();for (int i=0; implPTypes.nonEmpty() && i < last; ++i) {Type parmType=implPTypes.head;if (checkForIntersection && descPTypes.head.getKind() == TypeKind.TYPEVAR) {TypeVar tv=(TypeVar)descPTypes.head;if (tv.bound.getKind() == TypeKind.INTERSECTION) {parmType=samPTypes.head;}}addParameter("x$" + i,parmType,true);implPTypes=implPTypes.tail;samPTypes=samPTypes.tail;descPTypes=descPTypes.tail;}for (int i=last; i < samSize; ++i) {addParameter("xva$" + i,tree.varargsElement,true);}return rcvr;}  }
class C{  private void sum(Object targetObj,TaggedLogAPIEntity srcObj,String fieldName) throws Exception {  try {    String fn=fieldName.substring(0,1).toUpperCase() + fieldName.substring(1,fieldName.length());    Method srcGetMethod=srcObj.getClass().getMethod("get" + fn);    Object srcValue=srcGetMethod.invoke(srcObj);    if (srcValue == null) {      return;    }    Method targetGetMethod=targetObj.getClass().getMethod("get" + fn);    Object targetValue=targetGetMethod.invoke(targetObj);    if (targetValue instanceof Long) {      Method setM=targetObj.getClass().getMethod("set" + fn,long.class);      Long tmp1=(Long)targetValue;      Long tmp2=null;      if (srcValue instanceof String) {        tmp2=Long.valueOf((String)srcValue);      } else       if (srcValue instanceof Long) {        tmp2=(Long)srcValue;      } else {        throw new IllegalAggregateFieldTypeException(srcValue.getClass().toString() + " type is not support. The source type must be Long or String");      }      setM.invoke(targetObj,tmp1.longValue() + tmp2.longValue());    } else     if (targetValue instanceof Double) {      Method setM=targetObj.getClass().getMethod("set" + fn,double.class);      Double tmp1=(Double)targetValue;      String src=(String)srcValue;      Double tmp2=Double.valueOf(src);      setM.invoke(targetObj,tmp1.doubleValue() + tmp2.doubleValue());    } else {      throw new IllegalAggregateFieldTypeException(targetValue.getClass().toString() + " type is not support. The target type must be long or double");    }  } catch (  Exception ex) {    LOG.error("Cannot do sum aggregation for field " + fieldName,ex);    throw ex;  }}  }
class C{  private static void report(String message){  if (DEBUG) {    VM.sysWrite(message);  }}  }
class C{  public boolean exportPvk(){  return jrbPvk.isSelected();}  }
class C{  private boolean proxyippatternmatch(final String key){  final String[] cfgippattern=Switchboard.getSwitchboard().getConfigArray("proxyURL.access","*");  if (cfgippattern[0].equals("*")) {    return true;  }  for (  String pattern : cfgippattern) {    try {      if (key.matches(pattern)) {        return true;      }    } catch (    PatternSyntaxException ex) {      ConcurrentLog.warn("PROXY","wrong ip pattern in url proxy config " + ex.getMessage());    }  }  return false;}  }
class C{  @Override public void closeElement(){  current=current.getParentNode();}  }
class C{  public JSONObject(Map map){  this.map=new LinkedHashMap();  if (map != null) {    Iterator i=map.entrySet().iterator();    while (i.hasNext()) {      Map.Entry e=(Map.Entry)i.next();      Object value=e.getValue();      if (value != null) {        this.map.put(e.getKey(),wrap(value));      }    }  }}  }
class C{  public boolean isPartUniqueIndex(){  Object oo=get_Value(COLUMNNAME_IsPartUniqueIndex);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void transitionToActive(){  this.role=HARole.ACTIVE.getOFRole();}  }
class C{  public Document createDocument(String encoding){  Document answer=createDocument();  answer.setXMLEncoding(encoding);  return answer;}  }
class C{  public static boolean linkSequenceHasLoops(List<Link> linkSequence){  Set tmpSet=new HashSet<>(linkSequence);  return tmpSet.size() < linkSequence.size();}  }
class C{  public boolean attemptReconnect() throws InterruptedException, IOException {  boolean restarted=false;  if (this.stoppedForReconnect) {    logger.info("attempting to restart locator");    boolean tcpServerStarted=false;    InternalDistributedSystem ds=this.myDs;    long waitTime=ds.getConfig().getMaxWaitTimeForReconnect() / 2;    QuorumChecker checker=null;    while (ds.getReconnectedSystem() == null && !ds.isReconnectCancelled()) {      if (checker == null) {        checker=this.myDs.getQuorumChecker();        if (checker != null) {          logger.info("The distributed system returned this quorum checker: {}",checker);        }      }      if (checker != null && !tcpServerStarted) {        boolean start=checker.checkForQuorum(3 * this.myDs.getConfig().getMemberTimeout());        if (start) {          logger.info("starting peer location");          if (this.locatorListener != null) {            this.locatorListener.clearLocatorInfo();          }          this.stoppedForReconnect=false;          this.myDs=null;          this.myCache=null;          restartWithoutDS();          tcpServerStarted=true;          setLocator(this);        }      }      ds.waitUntilReconnected(waitTime,TimeUnit.MILLISECONDS);    }    InternalDistributedSystem newSystem=(InternalDistributedSystem)ds.getReconnectedSystem();    if (newSystem != null) {      if (!tcpServerStarted) {        if (this.locatorListener != null) {          this.locatorListener.clearLocatorInfo();        }        this.stoppedForReconnect=false;      }      restartWithDS(newSystem,GemFireCacheImpl.getInstance());      setLocator(this);      restarted=true;    }  }  logger.info("restart thread exiting.  Service was " + (restarted ? "" : "not ") + "restarted");  return restarted;}  }
class C{  protected final void fail(Throwable ex){  ExceptionHelper.throwIfFatal(ex);  s.cancel();  error(ex);}  }
class C{  public AppPackage(File file,File contentFolder,boolean processAppDirectory) throws IOException, ZipException {  super(file);  if (contentFolder != null) {    FileUtils.forceMkdir(contentFolder);    cleanOnClose=false;  } else {    cleanOnClose=true;    contentFolder=Files.createTempDirectory("dt-appPackage-").toFile();  }  directory=contentFolder;  Manifest manifest=getManifest();  if (manifest == null) {    throw new IOException("Not a valid app package. MANIFEST.MF is not present.");  }  Attributes attr=manifest.getMainAttributes();  appPackageName=attr.getValue(ATTRIBUTE_DT_APP_PACKAGE_NAME);  appPackageVersion=attr.getValue(ATTRIBUTE_DT_APP_PACKAGE_VERSION);  appPackageGroupId=attr.getValue(ATTRIBUTE_DT_APP_PACKAGE_GROUP_ID);  dtEngineVersion=attr.getValue(ATTRIBUTE_DT_ENGINE_VERSION);  appPackageDisplayName=attr.getValue(ATTRIBUTE_DT_APP_PACKAGE_DISPLAY_NAME);  appPackageDescription=attr.getValue(ATTRIBUTE_DT_APP_PACKAGE_DESCRIPTION);  String classPathString=attr.getValue(ATTRIBUTE_CLASS_PATH);  if (appPackageName == null || appPackageVersion == null || classPathString == null) {    throw new IOException("Not a valid app package.  App Package Name or Version or Class-Path is missing from MANIFEST.MF");  }  classPath.addAll(Arrays.asList(StringUtils.split(classPathString," ")));  extractToDirectory(directory,file);  File confDirectory=new File(directory,"conf");  if (confDirectory.exists()) {    processConfDirectory(confDirectory);  }  resourcesDirectory=new File(directory,"resources");  File propertiesXml=new File(directory,"META-INF/properties.xml");  if (propertiesXml.exists()) {    processPropertiesXml(propertiesXml,null);  }  if (processAppDirectory) {    processAppDirectory(false);  }}  }
class C{  public void end(){  if (cleanupCounter.get() == null || cleanupCounter.get() < 0) {    log.warn("Cleanup counter is null or invalid");  } else   if (cleanupCounter.get() == 0) {    log.trace("Cleanup SecurityContext");    AppContext.setSecurityContext(null);    cleanupCounter.remove();  } else {    log.trace("Do not own authentication, cleanup not required");    cleanupCounter.set(cleanupCounter.get() - 1);    log.trace("New cleanup counter value: {}",cleanupCounter.get());  }}  }
class C{  public Protocol read() throws IOException {  if (!resourceDir.exists()) {    throw new FileNotFoundException(resourceDir.toString());  }  List<Protocol.StructDefinition> definitions=new ArrayList<>();  log.info("Reading protocol definition from {}",resourceDir.getAbsolutePath());  Files.walk(resourceDir.toPath()).filter(null).forEach(null);  if (definitions.size() == 0) {    throw new IOException("Protocol definition not found in " + resourceDir);  }  return new Protocol(definitions);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void run(){  if (isTransient) {    throw new RuntimeException("Service is transient");  }  lock.lock();  try {    final long begin=System.currentTimeMillis();    final int i=(int)snapshotCount % 2;    final File file=new File(dataDir,BASENAME + i + EXT);    if (!dataDir.exists()) {      if (!dataDir.mkdirs() && !dataDir.mkdirs()) {        throw new RuntimeException("Could not create: " + dataDir);      }    }    final long entryCount;synchronized (commitTimeIndex) {      entryCount=SnapshotHelper.write(commitTimeIndex,file);    }    snapshotCount++;    final long elapsed=System.currentTimeMillis() - begin;    log.warn("snapshot: snapshotCount=" + snapshotCount + ", entryCount="+ entryCount+ ", file="+ file+ ", elapsed="+ elapsed);  } catch (  Throwable t) {    log.error(t.getMessage(),t);    return;  } finally {    lock.unlock();  }}  }
class C{  public TermSuggestionBuilder minDocFreq(float minDocFreq){  this.minDocFreq=minDocFreq;  return this;}  }
class C{  public CipherParameters generateDerivedMacParameters(int keySize){  return generateDerivedParameters(keySize);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private void checkDirExistence(String outFileName){  File outFile=new File(outFileName);  File outDir=outFile.getParentFile();  if (outDir != null && !outDir.exists()) {    if (!createDirs(outDir)) {      throw new SimError("Couldn't create report directory '" + outDir.getAbsolutePath() + "'");    }  }}  }
class C{  public Months minus(int months){  return plus(FieldUtils.safeNegate(months));}  }
class C{  public void updateUI(){  setUI((MenuItemUI)UIManager.getUI(this));}  }
class C{  public static String toHexString(byte[] ba,int offset,int length){  char[] buf;  if (WITH_BYTE_SEPARATOR) {    buf=new char[length * 3];  } else {    buf=new char[length * 2];  }  for (int i=offset, j=0, k; i < offset + length; ) {    k=ba[i++];    buf[j++]=HEX_DIGITS[(k >>> 4) & 0x0F];    buf[j++]=HEX_DIGITS[k & 0x0F];    if (WITH_BYTE_SEPARATOR) {      buf[j++]=BYTE_SEPARATOR;    }  }  return new String(buf);}  }
class C{  @Override public void write(byte[] buffer,int offset,int count) throws IOException {synchronized (intThread) {    int avail=(wroteIndex - dataEndIndex + data.length) % data.length;    if (avail == 0)     avail=data.length;    if (avail < count) {      throw new IOException("Buffer overrun, have " + avail + " bytes available and want to write "+ count);    }    if (count > data.length - dataEndIndex) {      int firstPart=data.length - dataEndIndex;      int secondPart=count - firstPart;      System.arraycopy(buffer,offset,data,dataEndIndex,firstPart);      System.arraycopy(buffer,offset + firstPart,data,0,secondPart);      dataEndIndex=secondPart;    } else {      System.arraycopy(buffer,offset,data,dataEndIndex,count);      dataEndIndex+=count;    }    intThread.notify();  }}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColors[mColorIndex]);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  @Override protected double solveImpl(final DoubleOp f,final double xAccuracy){  double fl, froot, dx, xl;  if (Math.abs(fxMin) < Math.abs(fxMax)) {    root=xMin;    froot=fxMin;    xl=xMax;    fl=fxMax;  } else {    root=xMax;    froot=fxMax;    xl=xMin;    fl=fxMin;  }  while (evaluationNumber <= getMaxEvaluations()) {    dx=(xl - root) * froot / (froot - fl);    xl=root;    fl=froot;    root+=dx;    froot=f.op(root);    evaluationNumber++;    if (Math.abs(dx) < xAccuracy || froot == 0.0)     return root;  }  throw new ArithmeticException("maximum number of function evaluations exceeded");}  }
class C{  public static boolean search(String[] strs,String target){  for (  Object o : strs)   if (o != null && o.equals(target))   return true;  return false;}  }
class C{  Map<String,IndexMetaData> findNewDanglingIndices(MetaData metaData){  final Set<String> indices;  try {    indices=nodeEnv.findAllIndices();  } catch (  Throwable e) {    logger.warn("failed to list dangling indices",e);    return ImmutableMap.of();  }  Map<String,IndexMetaData> newIndices=Maps.newHashMap();  for (  String indexName : indices) {    if (metaData.hasIndex(indexName) == false && danglingIndices.containsKey(indexName) == false) {      try {        IndexMetaData indexMetaData=metaStateService.loadIndexState(indexName);        if (indexMetaData != null) {          logger.info("[{}] dangling index, exists on local file system, but not in cluster metadata, auto import to cluster state",indexName);          if (!indexMetaData.getIndex().equals(indexName)) {            logger.info("dangled index directory name is [{}], state name is [{}], renaming to directory name",indexName,indexMetaData.getIndex());            indexMetaData=IndexMetaData.builder(indexMetaData).index(indexName).build();          }          newIndices.put(indexName,indexMetaData);        } else {          logger.debug("[{}] dangling index directory detected, but no state found",indexName);        }      } catch (      Throwable t) {        logger.warn("[{}] failed to load index state for detected dangled index",t,indexName);      }    }  }  return newIndices;}  }
class C{  public static int executeCommand(String command,String[] envp,File workingDirectory,Logger logger){  int exitValue=-1;  if (logger.isDebugEnabled()) {    logger.debug("Lanzando el comando: [" + command + "]");  }  try {    Process process=Runtime.getRuntime().exec(command,envp,workingDirectory);    StreamGobbler outputGobbler=new StreamGobbler(process.getInputStream(),"PROCESS",logger);    StreamGobbler errorGobbler=new StreamGobbler(process.getErrorStream(),"PROCESS",logger);    outputGobbler.start();    errorGobbler.start();    exitValue=process.waitFor();  } catch (  Throwable t) {    logger.error("Error ejecutando el comando: [" + command + "]",t);  }  if (logger.isDebugEnabled()) {    logger.debug("Valor de retorno del comando [" + command + "]: "+ exitValue);  }  return exitValue;}  }
class C{  private static String printRowIdData(StringBuilder stringBuilder,RowIdData rowid,String lastSchema,boolean pureSQL,int sqlIndex){  String type;switch (rowid.getType()) {case RowIdData.LAST_INSERT_ID:    type="LAST_INSERT_ID";  break;case RowIdData.INSERT_ID:type="INSERT_ID";break;default :type="INSERT_ID";break;}if (pureSQL) {println(stringBuilder,"SET " + type + " = "+ rowid.getRowId());} else {println(stringBuilder,"- SQL(" + sqlIndex + ") = "+ "SET "+ type+ " = "+ rowid.getRowId());}return lastSchema;}  }
class C{  public InfoResponse(){}  }
class C{  public static byte[] decodeFromFile(final String filename){  byte[] decodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      System.err.println("File is too big for this convenience method (" + file.length() + " bytes).");      return null;    }    buffer=new byte[(int)file.length()];    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    System.err.println("Error decoding from file " + filename);  } finally {    try {      if (bis != null) {        bis.close();      }    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  public static void quickSort(Object[] a,Comparator c){  quickSort1(a,0,a.length,c);}  }
class C{  public void writeRaw(byte b) throws IOException, JsonGenerationException {  _writeByte(TOKEN_LITERAL_START_ARRAY);}  }
class C{  public AbstractJPAMailboxMessage(JPAMailbox mailbox,MessageUid uid,long modSeq,MailboxMessage original) throws MailboxException {  super();  this.mailbox=mailbox;  this.uid=uid.asLong();  this.modSeq=modSeq;  this.userFlags=new ArrayList<JPAUserFlag>();  setFlags(original.createFlags());  this.recent=true;  this.contentOctets=original.getFullContentOctets();  this.bodyStartOctet=(int)(original.getFullContentOctets() - original.getBodyOctets());  this.internalDate=original.getInternalDate();  PropertyBuilder pBuilder=new PropertyBuilder(original.getProperties());  this.textualLineCount=original.getTextualLineCount();  this.mediaType=original.getMediaType();  this.subType=original.getSubType();  final List<Property> properties=pBuilder.toProperties();  this.properties=new ArrayList<JPAProperty>(properties.size());  int order=0;  for (  Property property : properties) {    this.properties.add(new JPAProperty(property,order++));  }}  }
class C{  public static int fontSize(){  return _fontSize;}  }
class C{  public final Boolean isAffectedScore(){  return affectedScore;}  }
class C{  public Ingredient(String unlocalized,int hunger,float saturation){  this.unlocalized=unlocalized;  this.hunger=hunger;  this.saturation=saturation;  this.exhaustion=0F;  this.eatTime=4;  equivalents.add(this);  INGREDIENTS.put(unlocalized,this);}  }
class C{  public static String guessMimeTypeFromExtension(String extension){  if (TextUtils.isEmpty(extension)) {    return null;  }  return extensionToMimeTypeMap.get(extension);}  }
class C{  protected void initializePhase(int w){  Arrays.fill(committedWorkers,false);  Arrays.fill(parentWorkerByCommittedJob,-1);  committedWorkers[w]=true;  for (int j=0; j < dim; j++) {    minSlackValueByJob[j]=costMatrix[w][j] - labelByWorker[w] - labelByJob[j];    minSlackWorkerByJob[j]=w;  }}  }
class C{  public ObserveController(Game game,Connector connector){  super(new GameCursor(game,GameCursor.Mode.MakeMovesOnMasterSetCursorToLast),connector);  cursor=(GameCursor)getGame();}  }
class C{  @Override public boolean isBusy(){  return (m_buildThread != null);}  }
class C{  public static boolean isUnion(FTypeRef typeRef){  return isUserDefinedType(typeRef,FUnionType.class);}  }
class C{  public void append(StringBuffer buffer,String fieldName,char[] array,Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  public void putBoolean(String key,boolean value){  preferences.edit().putBoolean(key,value).apply();}  }
class C{  @Override protected Object resolve(final Object obj){  final IElement e=(IElement)obj;  final IBindingSet bset=new ContextBindingSet(BOpContext.this,new ListBindingSet());  copyValues(e,pred,bset);  return bset;}  }
class C{  private void checkPUTStatusCode(String requestUrl,String body,int statusCode){  with().body(body).put(requestUrl).then().assertThat().statusCode(statusCode);}  }
class C{  public static void write(int x1,int y1,int w,int h,byte[] bytes,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.BITMAP_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_BITMAP);  dos.writeByte(RENDERTYPE_XY);  dos.writeInt(x1);  dos.writeInt(y1);  dos.writeInt(w);  dos.writeInt(h);  dos.writeInt(bytes.length);  dos.write(bytes,0,bytes.length);  properties.write(dos);}  }
class C{  public void e(String msg){  Log.e(mTag,msg);}  }
class C{  public HostQueue(final File hostsPath,final DigestURL hostUrl,final boolean onDemand,final boolean exceed134217727) throws MalformedURLException {  this.onDemand=onDemand;  this.exceed134217727=exceed134217727;  this.hostName=(hostUrl.getHost() == null) ? "localhost" : hostUrl.getHost();  this.port=hostUrl.getPort();  this.hostHash=hostUrl.hosthash();  this.hostPath=new File(hostsPath,this.hostName + "-#" + this.hostHash+ "."+ this.port);  init();}  }
class C{  public InputStream newInputStream(final int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    return new FileInputStream(entry.getCleanFile(index));  }}  }
class C{  public RepaintAction(Visualization vis){  super(vis);}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public ColladaSource(String ns){  super(ns);}  }
class C{  @Override public void registerListener(RadioListener mRadioListener){  if (isServiceConnected)   mService.registerListener(mRadioListener); else   mRadioListenerQueue.add(mRadioListener);}  }
class C{  public static ServiceResolver fromFileDescriptors(FileDescriptor... descriptors){  return new ServiceResolver(Arrays.asList(descriptors));}  }
class C{  public boolean isUserChoice(){  return getNode().isUserChoice();}  }
class C{  private void initResponseSource() throws IOException {  responseSource=ResponseSource.NETWORK;  if (!policy.getUseCaches())   return;  OkResponseCache responseCache=client.getOkResponseCache();  if (responseCache == null)   return;  CacheResponse candidate=responseCache.get(uri,method,requestHeaders.getHeaders().toMultimap(false));  if (candidate == null)   return;  Map<String,List<String>> responseHeadersMap=candidate.getHeaders();  cachedResponseBody=candidate.getBody();  if (!acceptCacheResponseType(candidate) || responseHeadersMap == null || cachedResponseBody == null) {    Util.closeQuietly(cachedResponseBody);    return;  }  RawHeaders rawResponseHeaders=RawHeaders.fromMultimap(responseHeadersMap,true);  cachedResponseHeaders=new ResponseHeaders(uri,rawResponseHeaders);  long now=System.currentTimeMillis();  this.responseSource=cachedResponseHeaders.chooseResponseSource(now,requestHeaders);  if (responseSource == ResponseSource.CACHE) {    this.cacheResponse=candidate;    setResponse(cachedResponseHeaders,cachedResponseBody);  } else   if (responseSource == ResponseSource.CONDITIONAL_CACHE) {    this.cacheResponse=candidate;  } else   if (responseSource == ResponseSource.NETWORK) {    Util.closeQuietly(cachedResponseBody);  } else {    throw new AssertionError();  }}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    this.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      this.out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        this.out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  private void generateResourceManager() throws SAXException {  AttributesImpl atts=new AttributesImpl();  if (this.cache instanceof CacheCreation && this.creation.hasResourceManager()) {    boolean generateIt=false;    if (this.creation.getResourceManager().hasCriticalHeap()) {      float chp=this.creation.getResourceManager().getCriticalHeapPercentage();      if (generateDefaults() || chp != MemoryThresholds.DEFAULT_CRITICAL_PERCENTAGE) {        atts.addAttribute("","",CRITICAL_HEAP_PERCENTAGE,"",String.valueOf(chp));        generateIt=true;      }    }    if (this.creation.getResourceManager().hasEvictionHeap()) {      float ehp=this.creation.getResourceManager().getEvictionHeapPercentage();      if (generateDefaults() || ehp != MemoryThresholds.DEFAULT_EVICTION_PERCENTAGE) {        atts.addAttribute("","",EVICTION_HEAP_PERCENTAGE,"",String.valueOf(ehp));        generateIt=true;      }    }    if (this.version.compareTo(CacheXmlVersion.GEODE_1_0) >= 0) {      if (this.creation.getResourceManager().hasCriticalOffHeap()) {        float chp=this.creation.getResourceManager().getCriticalOffHeapPercentage();        if (generateDefaults() || chp != MemoryThresholds.DEFAULT_CRITICAL_PERCENTAGE) {          atts.addAttribute("","",CRITICAL_OFF_HEAP_PERCENTAGE,"",String.valueOf(chp));          generateIt=true;        }      }      if (this.creation.getResourceManager().hasEvictionOffHeap()) {        float ehp=this.creation.getResourceManager().getEvictionOffHeapPercentage();        if (generateDefaults() || ehp != MemoryThresholds.DEFAULT_EVICTION_PERCENTAGE) {          atts.addAttribute("","",EVICTION_OFF_HEAP_PERCENTAGE,"",String.valueOf(ehp));          generateIt=true;        }      }    }    if (generateIt) {      generateResourceManagerElement(atts);    }  } else   if (this.cache instanceof GemFireCacheImpl) {{      int chp=(int)this.cache.getResourceManager().getCriticalHeapPercentage();      if (generateDefaults() || chp != MemoryThresholds.DEFAULT_CRITICAL_PERCENTAGE)       atts.addAttribute("","",CRITICAL_HEAP_PERCENTAGE,"",String.valueOf(chp));    }{      int ehp=(int)this.cache.getResourceManager().getEvictionHeapPercentage();      if (generateDefaults() || ehp != MemoryThresholds.DEFAULT_EVICTION_PERCENTAGE)       atts.addAttribute("","",EVICTION_HEAP_PERCENTAGE,"",String.valueOf(ehp));    }    if (this.version.compareTo(CacheXmlVersion.GEODE_1_0) >= 0) {{        int chp=(int)this.cache.getResourceManager().getCriticalOffHeapPercentage();        if (generateDefaults() || chp != MemoryThresholds.DEFAULT_CRITICAL_PERCENTAGE)         atts.addAttribute("","",CRITICAL_OFF_HEAP_PERCENTAGE,"",String.valueOf(chp));      }{        int ehp=(int)this.cache.getResourceManager().getEvictionOffHeapPercentage();        if (generateDefaults() || ehp != MemoryThresholds.DEFAULT_EVICTION_PERCENTAGE)         atts.addAttribute("","",EVICTION_OFF_HEAP_PERCENTAGE,"",String.valueOf(ehp));      }    }    if (generateDefaults() || atts.getLength() > 0)     generateResourceManagerElement(atts);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void endGetClientPartitionAttributesSend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(getClientPartitionAttributesSendInProgressId,-1);  int endGetClientPartitionAttributesSendId;  if (failed) {    endGetClientPartitionAttributesSendId=getClientPartitionAttributesSendFailedId;  } else {    endGetClientPartitionAttributesSendId=getClientPartitionAttributesSendId;  }  this.sendStats.incInt(endGetClientPartitionAttributesSendId,1);  this.stats.incLong(getClientPartitionAttributesSendDurationId,duration);}  }
class C{  public void onResume(boolean multitasking){}  }
class C{  protected void fire(final SelectionEvent event){  if (this.listener == null)   return;  this.listener.widgetSelected(event);}  }
class C{  public Set<SolutionUser> findDisabledSolutionUsers(String tenantName,String searchString) throws Exception {  return getService().findDisabledSolutionUsers(tenantName,searchString,this.getServiceContext());}  }
class C{  public void beforeInterestRecovery(){}  }
class C{  public void cleanTemporalSession(HttpServletRequest request){  getInvocationStack(request).cleanSession(request);}  }
class C{  public static void orientUsingMeekRulesLocally(IKnowledge knowledge,Graph graph,IndependenceTest test,int depth){  TetradLogger.getInstance().log("info","Starting Orientation Step D.");  boolean changed;  do {    changed=meekR1Locally(graph,knowledge,test,depth) || meekR2(graph,knowledge) || meekR3(graph,knowledge)|| meekR4(graph,knowledge);  } while (changed);  TetradLogger.getInstance().log("info","Finishing Orientation Step D.");}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy){  startScroll(startX,startY,dx,dy,DEFAULT_DURATION);}  }
class C{  public static int validateGeohashMaxLevels(Integer userMaxLevels,int defaultMaxLevels){  int maxLevels=userMaxLevels == null ? defaultMaxLevels : userMaxLevels;  if (maxLevels < 1 || maxLevels > GeohashPrefixTree.getMaxLevelsPossible()) {    throw new IndexException("max_levels must be in range [1, {}], but found {}",GeohashPrefixTree.getMaxLevelsPossible(),maxLevels);  }  return maxLevels;}  }
class C{  static Class<?>[] loadSignatureClasses(String signature[],ClassLoader loader) throws ReflectionException {  if (signature == null)   return null;  final ClassLoader aLoader=(loader == null ? MBeanInstantiator.class.getClassLoader() : loader);  final int length=signature.length;  final Class<?> tab[]=new Class<?>[length];  if (length == 0)   return tab;  try {    for (int i=0; i < length; i++) {      final Class<?> primCla=primitiveClasses.get(signature[i]);      if (primCla != null) {        tab[i]=primCla;        continue;      }      ReflectUtil.checkPackageAccess(signature[i]);      tab[i]=Class.forName(signature[i],false,aLoader);    }  } catch (  ClassNotFoundException e) {    if (MBEANSERVER_LOGGER.isLoggable(Level.FINEST)) {      MBEANSERVER_LOGGER.logp(Level.FINEST,MBeanInstantiator.class.getName(),"findSignatureClasses","The parameter class could not be found",e);    }    throw new ReflectionException(e,"The parameter class could not be found");  }catch (  RuntimeException e) {    if (MBEANSERVER_LOGGER.isLoggable(Level.FINEST)) {      MBEANSERVER_LOGGER.logp(Level.FINEST,MBeanInstantiator.class.getName(),"findSignatureClasses","Unexpected exception",e);    }    throw e;  }  return tab;}  }
class C{  public ImageSource tilingDisabled(){  return tiling(false);}  }
class C{  public static boolean isCompositeURI(URI uri){  String ssp=stripPrefix(uri.getRawSchemeSpecificPart().trim(),"//").trim();  if (ssp.indexOf('(') == 0 && checkParenthesis(ssp)) {    return true;  }  return false;}  }
class C{  @Override public void validate(Factory factory,String userId) throws ApiException {  boolean granted=validateAuthor(factory,userId);  if (!granted) {    validateAccountOwner(factory,userId);  }}  }
class C{  private static Paint createFundamentalPaint(Bitmap favicon,int forceFillColor){  final Paint fillPaint=new Paint();  if (forceFillColor != COLOR_AUTO)   fillPaint.setColor(forceFillColor); else   fillPaint.setColor(guessFundamentalColor(favicon));  return fillPaint;}  }
class C{  public static boolean isAfterDay(Calendar cal1,Calendar cal2){  if (cal1 == null || cal2 == null) {    throw new IllegalArgumentException("The dates must not be null");  }  if (cal1.get(Calendar.ERA) < cal2.get(Calendar.ERA))   return false;  if (cal1.get(Calendar.ERA) > cal2.get(Calendar.ERA))   return true;  if (cal1.get(Calendar.YEAR) < cal2.get(Calendar.YEAR))   return false;  if (cal1.get(Calendar.YEAR) > cal2.get(Calendar.YEAR))   return true;  return cal1.get(Calendar.DAY_OF_YEAR) > cal2.get(Calendar.DAY_OF_YEAR);}  }
class C{  public RpfCoverageSection parseCoverageSection(BinaryFile binFile){  RpfLocationRecord lr=getRpfLocationRecord(LOC_COVERAGE_SECTION);  if (lr == null)   return null;  try {    binFile.seek(lr.componentLocation);    RpfCoverageSection coverage=new RpfCoverageSection();    if (coverage.read(binFile)) {      if (DEBUG_RPFDETAIL)       Debug.output(coverage.toString());      return coverage;    }  } catch (  IOException ioe) {    Debug.error("RpfFileSections: IO ERROR parsing coverage!\n" + ioe);  }  return null;}  }
class C{  public boolean isProvisioningSupported(){  return provisioningSupported;}  }
class C{  public static boolean isDeveloper(){  return IS_DEVELOPER;}  }
class C{  public Struct valueFromColumnData(Object[] columnData){  return columnData == null ? null : valueGenerator.apply(columnData);}  }
class C{  public Set<String> keySet(){  HashSet<String> set=new HashSet<String>(m_keys);  return set;}  }
class C{  public void reboot(String into) throws TimeoutException, AdbCommandRejectedException, IOException {  AdbHelper.reboot(into,AndroidDebugBridge.getSocketAddress(),this);}  }
class C{  public String dump(){  return "fetch \"" + parentDb.getRrdBackend().getPath() + "\" "+ consolFun+ " --start "+ fetchStart+ " --end "+ fetchEnd+ (resolution > 1 ? " --resolution " + resolution : "");}  }
class C{  public <T>T time(Callable<T> event) throws Exception {  final long startTime=clock.getTick();  try {    return event.call();  }  finally {    update(clock.getTick() - startTime);  }}  }
class C{  private void createDynamicCallGraphOrganizer(){  if (dcgOrg == null) {    dcgOrg=new DynamicCallGraphOrganizer(new EdgeListener());    Controller.organizers.add(dcgOrg);  }}  }
class C{  public byte[] serialize(){  byte[] payloadData=null;  if (payload != null) {    payload.setParent(this);    payloadData=payload.serialize();  }  this.length=(short)(8 + ((payloadData == null) ? 0 : payloadData.length));  byte[] data=new byte[this.length];  ByteBuffer bb=ByteBuffer.wrap(data);  bb.putShort((short)this.sourcePort.getPort());  bb.putShort((short)this.destinationPort.getPort());  bb.putShort(this.length);  bb.putShort(this.checksum);  if (payloadData != null)   bb.put(payloadData);  if (this.parent != null && this.parent instanceof IPv4)   ((IPv4)this.parent).setProtocol(IpProtocol.UDP);  if (this.checksum == 0) {    bb.rewind();    int accumulation=0;    if (this.parent != null && this.parent instanceof IPv4) {      IPv4 ipv4=(IPv4)this.parent;      accumulation+=((ipv4.getSourceAddress().getInt() >> 16) & 0xffff) + (ipv4.getSourceAddress().getInt() & 0xffff);      accumulation+=((ipv4.getDestinationAddress().getInt() >> 16) & 0xffff) + (ipv4.getDestinationAddress().getInt() & 0xffff);      accumulation+=ipv4.getProtocol().getIpProtocolNumber() & 0xff;      accumulation+=this.length & 0xffff;    }    for (int i=0; i < this.length / 2; ++i) {      accumulation+=0xffff & bb.getShort();    }    if (this.length % 2 > 0) {      accumulation+=(bb.get() & 0xff) << 8;    }    accumulation=((accumulation >> 16) & 0xffff) + (accumulation & 0xffff);    this.checksum=(short)(~accumulation & 0xffff);    bb.putShort(6,this.checksum);  }  return data;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.AFTER_CODE___OPERATION_NAME_1:    return getOperationName_1();case UmplePackage.AFTER_CODE___ANONYMOUS_AFTER_CODE_11:  return getAnonymous_afterCode_1_1();case UmplePackage.AFTER_CODE___CODE_1:return getCode_1();case UmplePackage.AFTER_CODE___ANONYMOUS_AFTER_CODE_21:return getAnonymous_afterCode_2_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static ValueNamePair retrieveError(){  ValueNamePair vp=(ValueNamePair)Env.getCtx().remove(LAST_ERROR);  return vp;}  }
class C{  public String toLog(){  String out=getQuirk();  if (StringUtil.isNullOrEmpty(getLocation()))   return out;  return out + "\t" + getLocation()+ "\t"+ getSlot()+ "\t"+ getWeaponName();}  }
class C{  public void testGridPolygonsHolesRoundTrip() throws SQLException {  GridGenerator grid=new GridGenerator();  grid.setGeometryFactory(geometryFactory);  grid.setBoundingBox(new Envelope(0,10,0,10));  grid.setNumberColumns(10);  grid.setNumberRows(10);  Polygon[] pt=new Polygon[100];  STRUCT[] st=new STRUCT[100];  PolygonGenerator pg=new PolygonGenerator();  pg.setGeometryFactory(geometryFactory);  pg.setNumberPoints(10);  pg.setNumberHoles(4);  OraWriter ow=new OraWriter();  int i=0;  while (grid.canCreate() && i < 100) {    pg.setBoundingBox(grid.createEnv());    pt[i]=(Polygon)pg.create();    st[i]=ow.write(pt[i],getConnection());    i++;  }  OraReader or=new OraReader();  i=0;  while (i < 100 && pt[i] != null) {    Polygon pt2=(Polygon)or.read(st[i]);    assertTrue("The input polygon is not the same as the output polygon",pt[i].equals(pt2));    i++;  }}  }
class C{  private Map<String,ListenableFuture<?>> loadSnapshotKinds(List<String> kindNames) throws Exception {  ImmutableMap.Builder<String,ListenableFuture<?>> builder=new ImmutableMap.Builder<>();  for (  String kind : kindNames) {    String filename=String.format("gs://%s/%s.%s.backup_info",snapshotGcsBucket,snapshotPrefix,kind);    builder.put(kind,loadSnapshotFile(filename,kind));    System.err.println("Started load job for kind: " + kind);  }  return builder.build();}  }
class C{  public static void sort(ArrayList<Number> list){  for (int i=0; i < list.size() - 1; i++) {    Number min=list.get(i);    int minIndex=i;    for (int j=i + 1; j < list.size(); j++) {      if (min.doubleValue() > list.get(j).doubleValue()) {        min=list.get(j);        minIndex=j;      }    }    if (minIndex != i) {      list.set(minIndex,list.get(i));      list.set(i,min);    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:46.139 -0500",hash_original_method="633BAC1354102784355BBDC241836385",hash_generated_method="A13785571FD4CA7158438247806281C0") private boolean handleResponseForSynchronousRequest(String username,String password){  LoadListener loader=null;synchronized (mLoaderQueue) {    loader=mLoaderQueue.peek();  }  if (loader.isSynchronous()) {    mUsername=username;    mPassword=password;    return true;  }  return false;}  }
class C{  public static void fill(StringBuilder strb,int offset){  while (strb.length() < offset)   strb.append(' ');}  }
class C{  private void manageProxyUriRequest(Request request) throws URISyntaxException {  URI proxyUri=new URI(request.getOptions().getProxyUri());  String clientPath;  if (proxyUri.getScheme() != null && proxyUri.getScheme().matches("^http.*")) {    clientPath=PROXY_HTTP_CLIENT;  } else {    clientPath=PROXY_COAP_CLIENT;  }  LOGGER.info("Chose " + clientPath + " as clientPath");  request.getOptions().setUriPath(clientPath);}  }
class C{  public void clear(){  typeMatching=false;  exactMatching=false;  similarMatching=false;  caseInsensitive=false;  jokerMatching=false;}  }
class C{  @Override public String sendUntamperedRequest(){  RequestObject requestObject=model.getUntamperedRequestObject();  return this.sendRequestHttpClient(requestObject);}  }
class C{  @Override public final Integer add(K key,int counter){  mSum+=counter;  Integer res=mCount.get(key);  if (res != null) {    res+=counter;  } else {    res=counter;  }  mCount.put(key,res);  return res;}  }
class C{  public GenLayout(Class<? extends Layout> clazz){  this.clazz=clazz;  this.interfaceClassName=ImplHelper.getInterfaceClassName(clazz);  this.implClassName=ImplHelper.getImplClassName(clazz);}  }
class C{  public static boolean isError(int status){  return (status >= 400 && status < 600);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:37.597 -0500",hash_original_method="7F4B810E9804FBBDFC86C2FF467D8B0D",hash_generated_method="8B1F59C259D35D31F112C0FD4763D4E1") public void addObserver(Observer observer){  if (observer == null) {    throw new NullPointerException();  }synchronized (this) {    if (!observers.contains(observer))     observers.add(observer);  }}  }
class C{  public static Request request(){  return threadLocal.get();}  }
class C{  void writeFrame(byte[] bytes,int offset,int length) throws IOException {synchronized (spdyWriter) {    spdyWriter.out.write(bytes,offset,length);  }}  }
class C{  public static String co_(final String name){  return "icon/country/" + name + ".gif";}  }
class C{  @Override public void postSetUp(){  log.info("####POSTSETUP " + getTestName());}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar,int line){  this(reader,separator,quotechar,CSVParser.DEFAULT_ESCAPE_CHARACTER,line,CSVParser.DEFAULT_STRICT_QUOTES);}  }
class C{  public static void main(String[] args){  Debug.init();  ImageMaster master=null;  for (int i=0; i < args.length; i++) {    if (args[i].equalsIgnoreCase("-file")) {      master=new ImageMaster(args[++i]);    } else     if (args[i].equalsIgnoreCase("-url")) {      String url=null;      try {        url=args[++i];        master=new ImageMaster(new URL(url));      } catch (      MalformedURLException mue) {        Debug.output("ImageMaster: Malformed URL: " + url);        master=null;      }    } else     if (args[i].equalsIgnoreCase("-masterprops")) {      printMasterProps();    } else     if (args[i].equalsIgnoreCase("-serverprops")) {      printServerProps();    } else     if (args[i].equalsIgnoreCase("-h")) {      printHelp();    }  }  if (master != null) {    master.run();  } else {    printHelp();  }}  }
class C{  public double nextDouble(double mean,double gamma,double cut){  double val, rval, displ;  if (gamma == 0.0)   return mean;  if (cut == Double.NEGATIVE_INFINITY) {    rval=2.0 * randomGenerator.nextDouble() - 1.0;    displ=0.5 * gamma * Math.tan(rval * (Math.PI / 2.0));    return mean + displ;  } else {    val=Math.atan(2.0 * cut / gamma);    rval=2.0 * randomGenerator.nextDouble() - 1.0;    displ=0.5 * gamma * Math.tan(rval * val);    return mean + displ;  }}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:33.094 -0500",hash_original_method="8EA2EBB87AD36DFCCFE2AFAE0E37BC47",hash_generated_method="017308E48D7250A3BF3BE12CDE53806C") public WeakReference(T r){  super(r,null);}  }
class C{  public WriteException(Collection<WriteRequest> requests,Throwable cause){  initCause(cause);  this.requests=asRequestList(requests);}  }
class C{  void locateFileFailed(String f){  log.warn("Could not locate file " + f);}  }
class C{  @SuppressWarnings("resource") public byte[] encodeAsUTF8(String text){  ByteArrayBuilder byteBuilder=_byteBuilder;  if (byteBuilder == null) {    _byteBuilder=byteBuilder=new ByteArrayBuilder(null);  }  int inputPtr=0;  int inputEnd=text.length();  int outputPtr=0;  byte[] outputBuffer=byteBuilder.resetAndGetFirstSegment();  int outputEnd=outputBuffer.length;  main_loop:   while (inputPtr < inputEnd) {    int c=text.charAt(inputPtr++);    while (c <= 0x7F) {      if (outputPtr >= outputEnd) {        outputBuffer=byteBuilder.finishCurrentSegment();        outputEnd=outputBuffer.length;        outputPtr=0;      }      outputBuffer[outputPtr++]=(byte)c;      if (inputPtr >= inputEnd) {        break main_loop;      }      c=text.charAt(inputPtr++);    }    if (outputPtr >= outputEnd) {      outputBuffer=byteBuilder.finishCurrentSegment();      outputEnd=outputBuffer.length;      outputPtr=0;    }    if (c < 0x800) {      outputBuffer[outputPtr++]=(byte)(0xc0 | (c >> 6));    } else {      if (c < SURR1_FIRST || c > SURR2_LAST) {        outputBuffer[outputPtr++]=(byte)(0xe0 | (c >> 12));        if (outputPtr >= outputEnd) {          outputBuffer=byteBuilder.finishCurrentSegment();          outputEnd=outputBuffer.length;          outputPtr=0;        }        outputBuffer[outputPtr++]=(byte)(0x80 | ((c >> 6) & 0x3f));      } else {        if (c > SURR1_LAST) {          _throwIllegalSurrogate(c);        }        if (inputPtr >= inputEnd) {          _throwIllegalSurrogate(c);        }        c=_convertSurrogate(c,text.charAt(inputPtr++));        if (c > 0x10FFFF) {          _throwIllegalSurrogate(c);        }        outputBuffer[outputPtr++]=(byte)(0xf0 | (c >> 18));        if (outputPtr >= outputEnd) {          outputBuffer=byteBuilder.finishCurrentSegment();          outputEnd=outputBuffer.length;          outputPtr=0;        }        outputBuffer[outputPtr++]=(byte)(0x80 | ((c >> 12) & 0x3f));        if (outputPtr >= outputEnd) {          outputBuffer=byteBuilder.finishCurrentSegment();          outputEnd=outputBuffer.length;          outputPtr=0;        }        outputBuffer[outputPtr++]=(byte)(0x80 | ((c >> 6) & 0x3f));      }    }    if (outputPtr >= outputEnd) {      outputBuffer=byteBuilder.finishCurrentSegment();      outputEnd=outputBuffer.length;      outputPtr=0;    }    outputBuffer[outputPtr++]=(byte)(0x80 | (c & 0x3f));  }  return _byteBuilder.completeAndCoalesce(outputPtr);}  }
class C{  static short readShort(final byte[] b,final int index){  return (short)(((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF));}  }
class C{  public static void dispose(){  register.dispose();  keys.clear();}  }
class C{  private void triggerIpLeaseDeleteService(final State current,List<DhcpSubnetService.State> dhcpSubnetList){  if (dhcpSubnetList.size() == 0) {    ServiceUtils.logInfo(this,"No DhcpSubnets found any more.");    sendStageProgressPatch(current);    return;  }  for (  DhcpSubnetService.State state : dhcpSubnetList) {    triggerIpLeaseDeleteService(ServiceUtils.getIDFromDocumentSelfLink(state.documentSelfLink));  }  sendStageProgressPatch(current);}  }
class C{  protected Environment(Applet applet){  env=this;  setApplet(applet);  setAppletProperties(applet,this);  commonInit();}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_Client_ID"))     p_AD_Client_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("AD_Table_ID"))     p_AD_Table_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("DeletePosting"))     p_DeletePosting="Y".equals(para[i].getParameter()); else     if (name.equals("DateAcct")) {      p_DateAcct_From=(Timestamp)para[i].getParameter();      p_DateAcct_To=(Timestamp)para[i].getParameter_To();    } else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public static double quantile(double y,double lower,double upper){  if (!(y >= 0.0 && y <= 1.0))   throw new IllegalArgumentException("y must in range [0,1]");  return (y * (upper - lower)) + lower;}  }
class C{  public CSVParser(char separator,char quotechar){  this(separator,quotechar,DEFAULT_ESCAPE_CHARACTER);}  }
class C{  protected void updateRenderer(){  if (tree != null) {    TreeCellRenderer newCellRenderer;    newCellRenderer=tree.getCellRenderer();    if (newCellRenderer == null) {      tree.setCellRenderer(createDefaultCellRenderer());      createdRenderer=true;    } else {      createdRenderer=false;      currentCellRenderer=newCellRenderer;      if (createdCellEditor) {        tree.setCellEditor(null);      }    }  } else {    createdRenderer=false;    currentCellRenderer=null;  }  updateCellEditor();}  }
class C{  public DomainElement createDomainElement(){  DomainElementImpl domainElement=new DomainElementImpl();  return domainElement;}  }
class C{  public double angle(S2Point va){  return Math.atan2(crossProd(this,va).norm(),this.dotProd(va));}  }
class C{  public final boolean next(){  int startSP=parenSP;  if (scriptLimit >= textLimit) {    return false;  }  scriptCode=Script.COMMON;  scriptStart=scriptLimit;  int ch;  while ((ch=nextCodePoint()) != DONE) {    int sc=ScriptRunData.getScript(ch);    int pairIndex=handlePairedChars && sc == Script.COMMON ? getPairIndex(ch) : -1;    if (pairIndex >= 0) {      if ((pairIndex & 1) == 0) {        if (stack == null) {          stack=new int[32];        } else         if (parenSP == stack.length) {          int[] newstack=new int[stack.length + 32];          System.arraycopy(stack,0,newstack,0,stack.length);          stack=newstack;        }        stack[parenSP++]=pairIndex;        stack[parenSP++]=scriptCode;      } else       if (parenSP > 0) {        int pi=pairIndex & ~1;        while ((parenSP-=2) >= 0 && stack[parenSP] != pi)         ;        if (parenSP >= 0) {          sc=stack[parenSP + 1];        } else {          parenSP=0;        }        if (parenSP < startSP) {          startSP=parenSP;        }      }    }    if (sameScript(scriptCode,sc)) {      if (scriptCode <= Script.INHERITED && sc > Script.INHERITED) {        scriptCode=sc;        while (startSP < parenSP) {          stack[startSP + 1]=scriptCode;          startSP+=2;        }      }      if (pairIndex > 0 && (pairIndex & 1) != 0 && parenSP > 0) {        parenSP-=2;      }    } else {      pushback(ch);      break;    }  }  return true;}  }
class C{  @Override public void draw(final Graphics g,final int destx,final int desty,final int x,final int y,final int w,final int h){  sprite.draw(g,destx,desty,x + this.x,y + this.y,Math.min(w,width),Math.min(h,height));}  }
class C{  public void breaks(Map<String,List<BreakStmt>> breaksReaching){  for (  ParseTreeNode child : children()) {    if (child instanceof Statement) {      ((Statement)child).breaks(breaksReaching);    }  }}  }
class C{  public static List<String> readLines(File file,String encoding) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.readLines(in,encoding);  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  @Override public boolean last() throws SQLException {  try {    debugCodeCall("last");    checkClosed();    return absolute(-1);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public Builder withText(@StringRes int text){  this.textResourceId=text;  return this;}  }
class C{  protected void paintBackground(Graphics g){  super.paintBackground(g);}  }
class C{  static boolean isElementParentName(Element element,String name){  Element parent=element.getParentElement();  if (parent == null) {    return false;  }  return isElementName(parent,name);}  }
class C{  @Override public MapsCard title(@NotNull String title){  mTitle=title;  return this;}  }
class C{  public void recordBeginning(){  final String msg="Usage beginning module=" + mModuleName + " runId="+ mRunId;  mUsageMessages.add(msg);  Diagnostic.developerLog(msg);  mClient.recordBeginning(mModuleName,mRunId);}  }
class C{  public void addFilterToActiveTab(String name,String value){  setNotSaved();  RoundedTextNode newNode=createFilterNode(name,value);  this.filterPanelList.get(this.focusTab).addNode(newNode);  this.filterPanelList.get(this.focusTab).resize();}  }
class C{  public final void testGetPrimeExponentQ(){  RSAPrivateCrtKeySpec ks=new RSAPrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.valueOf(5L),BigInteger.ONE);  assertTrue(BigInteger.valueOf(5L).equals(ks.getPrimeExponentQ()));}  }
class C{  public IndependentDistribution concatenate(CategoricalTable other){  if (!variable.equals(other.getVariable())) {    log.warning("can only concatenate tables with same variable");  }  CategoricalTable.Builder builder=new CategoricalTable.Builder(variable);  for (  Value thisA : new HashSet<Value>(getValues())) {    for (    Value otherA : other.getValues()) {      try {        Value concat=thisA.concatenate(otherA);        builder.addRow(concat,getProb(thisA) * other.getProb(otherA));      } catch (      RuntimeException e) {        log.warning("could not concatenated the tables " + this + " and "+ other);        return this.copy();      }    }  }  return builder.build();}  }
class C{  public void forwardEvent(EventType eventType){  dispatch(eventType);}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  public ByteArrayDataSource(String stringData,String charSetName,String type){  if (charSetName == null || charSetName.length() == 0)   charSetName="UTF-8";  try {    m_data=stringData.getBytes(charSetName);  } catch (  UnsupportedEncodingException uex) {    log.log(Level.WARNING,"CharSetName=" + charSetName,uex);  }  if (type != null && type.length() > 0)   m_type=type;}  }
class C{  public synchronized int addLog(File file,boolean appendOnRestart,boolean gzip) throws IOException {  return addLog(file,false,appendOnRestart,gzip);}  }
class C{  public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public boolean unbound(HashSet<CollectData> collects){  if (collects == null)   return false;  boolean unbound=false;  int count=0;  if (collects.size() >= (SVController.getCurrentViewN() - SVController.getCurrentViewF())) {    for (    CollectData c : collects) {      if (c.getQuorumWrites().getTimestamp() == 0)       count++;    }  } else   return false;  if (SVController.getStaticConf().isBFT()) {    unbound=count > ((SVController.getCurrentViewN() + SVController.getCurrentViewF()) / 2);  } else {    unbound=count > ((SVController.getCurrentViewN()) / 2);  }  return unbound;}  }
class C{  public void testDefaultFactoryNormal(){  Map<String,Object> props=new HashMap<>();  props.put("fBoolean",true);  props.put("fByte",(byte)1);  props.put("fShort",(short)2);  props.put("fChar",'3');  props.put("fInt",4);  props.put("fLong",5L);  props.put("fFloat",6.6f);  props.put("fDouble",7.7d);  UUID obj=UUID.randomUUID();  props.put("fObj",obj);  props.put("fIntBoxed",10);  PlatformJavaObjectFactoryProxy proxy=new PlatformJavaObjectFactoryProxy(PlatformJavaObjectFactoryProxy.TYP_DEFAULT,null,CLS_NAME,props);  TestJavaObject val=(TestJavaObject)proxy.factory(ctx).create();  TestJavaObject expVal=new TestJavaObject().setBoolean(true).setByte((byte)1).setShort((short)2).setChar('3').setInt(4).setLong(5L).setFloat(6.6f).setDouble(7.7d).setObject(obj).setIntBoxed(10);  assertEquals(expVal,val);}  }
class C{  private void analize(){  StringTokenizer tokenizer=new StringTokenizer(sourceData,"|");  String nextToken=tokenizer.nextToken();  ver=nextToken.substring(1,nextToken.length() - 1);  dlgDef=new FDlgDef(tokenizer);  vardefs=new FVarDefs(tokenizer);}  }
class C{  boolean doesOccur(QName refName){  return m_refs.contains(refName);}  }
class C{  public StreamImpl openReadImpl() throws IOException {  if (_isWindows && isAux())   throw new FileNotFoundException(_file.toString());  return new FileReadStream(new FileInputStream(getFile()),this);}  }
class C{  public static void require(final boolean condition,final String message) throws RuntimeException {  if (!condition)   throw new LibraryException(message);}  }
class C{  public boolean isInline(){  return inline;}  }
class C{  public long index(){  return Long.valueOf(file.getName().substring(file.getName().lastIndexOf(PART_SEPARATOR,file.getName().lastIndexOf(PART_SEPARATOR) - 1) + 1,file.getName().lastIndexOf(PART_SEPARATOR)));}  }
class C{  public Singleton_ createSingleton_(){  Singleton_Impl singleton_=new Singleton_Impl();  return singleton_;}  }
class C{  public String toString(){  if (soid == null) {    StringBuilder sb=new StringBuilder(4 * oid.length);    for (int i=0; i < oid.length - 1; ++i) {      sb.append(oid[i]);      sb.append('.');    }    sb.append(oid[oid.length - 1]);    soid=sb.toString();  }  return soid;}  }
class C{  private String createFictionalProgressXml(String progressDescription){  return "<fictional_progress>" + progressDescription + "</fictional_progress>";}  }
class C{  static Set<String> filterEntities(List<Class<?>> classes){  Set<String> names=new HashSet<String>();  for (  Class<?> clazz : classes) {    if (clazz.getAnnotation(Entity.class) != null) {      names.add(clazz.getSimpleName());    }  }  return names;}  }
class C{  private Map<String,TeamExplorerPageConfig> discoverPages(){  final Map<String,TeamExplorerPageConfig> map=new HashMap<String,TeamExplorerPageConfig>();  for (  final IConfigurationElement element : getExtensions(PAGE_EXTENSION_POINT_ID)) {    final TeamExplorerPageConfig page=TeamExplorerPageConfig.fromConfigurationElement(element);    map.put(page.getID(),page);  }  return map;}  }
class C{  private boolean hasNextInetSocketAddress(){  return socketAddresses != null;}  }
class C{  public Vector4d rotate(Quaterniondc quat){  return rotate(quat,this);}  }
class C{  protected void serializeText(Text node) throws SAXException {  if (fNextIsRaw) {    fNextIsRaw=false;    fSerializer.processingInstruction(javax.xml.transform.Result.PI_DISABLE_OUTPUT_ESCAPING,"");    dispatachChars(node);    fSerializer.processingInstruction(javax.xml.transform.Result.PI_ENABLE_OUTPUT_ESCAPING,"");  } else {    boolean bDispatch=false;    if ((fFeatures & WELLFORMED) != 0) {      isTextWellFormed(node);    }    boolean isElementContentWhitespace=false;    if (fIsLevel3DOM) {      isElementContentWhitespace=node.isElementContentWhitespace();    }    if (isElementContentWhitespace) {      if ((fFeatures & ELEM_CONTENT_WHITESPACE) != 0) {        bDispatch=true;      }    } else {      bDispatch=true;    }    if (!applyFilter(node,NodeFilter.SHOW_TEXT)) {      return;    }    if (bDispatch) {      dispatachChars(node);    }  }}  }
class C{  protected void installListeners(JSeparator s){}  }
class C{  public static GramBooleanQuery deepCopy(GramBooleanQuery query){  if (query.operator == QueryOp.ANY || query.operator == QueryOp.NONE) {    return new GramBooleanQuery(query.operator);  } else   if (query.operator == QueryOp.LEAF) {    return newLeafNode(query.leaf);  } else {    GramBooleanQuery toReturn=new GramBooleanQuery(query.operator);    for (    GramBooleanQuery subQuery : query.subQuerySet) {      toReturn.subQuerySet.add(deepCopy(subQuery));    }    return toReturn;  }}  }
class C{  @Override public void test(Number t) throws ParameterException {  if (t.doubleValue() <= constraintValue.doubleValue()) {    throw new WrongParameterValueException("Parameter Constraint Error:\n" + "The parameter value specified has to be greater than " + constraintValue.toString() + ". (current value: "+ t.doubleValue()+ ")\n");  }}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){  int w=width;  int h=height;  g.translate(x,y);  g.setColor(etchType == LOWERED ? getShadowColor(c) : getHighlightColor(c));  g.drawRect(0,0,w - 2,h - 2);  g.setColor(etchType == LOWERED ? getHighlightColor(c) : getShadowColor(c));  g.drawLine(1,h - 3,1,1);  g.drawLine(1,1,w - 3,1);  g.drawLine(0,h - 1,w - 1,h - 1);  g.drawLine(w - 1,h - 1,w - 1,0);  g.translate(-x,-y);}  }
class C{  public void copyDatabase(){}  }
class C{  private Server fetchServerOrThrow(){  final Server server=loadBalancer.chooseServer();  if (server == null) {    throw new IllegalStateException("No available servers for " + loadBalancer.getName());  }  return server;}  }
class C{  private void initClientToken(){  clientToken=kerberosTicketService.getClientToken();}  }
class C{  public String toString(){  return this.binding.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:56.779 -0500",hash_original_method="40C5594A7A5C74207DFB0150B38ADFE3",hash_generated_method="C0F3368B28E6315AC137FC3953CEE799") public static SmsMessage newFromParcel(Parcel p){  SmsMessage msg=new SmsMessage();  SmsEnvelope env=new SmsEnvelope();  CdmaSmsAddress addr=new CdmaSmsAddress();  CdmaSmsSubaddress subaddr=new CdmaSmsSubaddress();  byte[] data;  byte count;  int countInt;  int addressDigitMode;  env.teleService=p.readInt();  if (0 != p.readByte()) {    env.messageType=SmsEnvelope.MESSAGE_TYPE_BROADCAST;  } else {    if (SmsEnvelope.TELESERVICE_NOT_SET == env.teleService) {      env.messageType=SmsEnvelope.MESSAGE_TYPE_ACKNOWLEDGE;    } else {      env.messageType=SmsEnvelope.MESSAGE_TYPE_POINT_TO_POINT;    }  }  env.serviceCategory=p.readInt();  addressDigitMode=p.readInt();  addr.digitMode=(byte)(0xFF & addressDigitMode);  addr.numberMode=(byte)(0xFF & p.readInt());  addr.ton=p.readInt();  addr.numberPlan=(byte)(0xFF & p.readInt());  count=p.readByte();  addr.numberOfDigits=count;  data=new byte[count];  for (int index=0; index < count; index++) {    data[index]=p.readByte();    if (addressDigitMode == CdmaSmsAddress.DIGIT_MODE_4BIT_DTMF) {      data[index]=msg.convertDtmfToAscii(data[index]);    }  }  addr.origBytes=data;  subaddr.type=p.readInt();  subaddr.odd=p.readByte();  count=p.readByte();  if (count < 0) {    count=0;  }  data=new byte[count];  for (int index=0; index < count; ++index) {    data[index]=p.readByte();  }  subaddr.origBytes=data;  countInt=p.readInt();  if (countInt > 0) {    data=new byte[countInt];    for (int index=0; index < countInt; index++) {      data[index]=p.readByte();    }    env.bearerData=data;  }  env.origAddress=addr;  env.origSubaddress=subaddr;  msg.originatingAddress=addr;  msg.mEnvelope=env;  msg.createPdu();  return msg;}  }
class C{  public void testCase13(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=-1;  int bSign=1;  byte rBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  private final void unlockRoot(){  lockState=0;}  }
class C{  public boolean isSentToMultiSig(){  if (chunks.size() < 4)   return false;  ScriptChunk chunk=chunks.get(chunks.size() - 1);  if (!chunk.isOpCode())   return false;  if (!(chunk.equalsOpCode(OP_CHECKMULTISIG) || chunk.equalsOpCode(OP_CHECKMULTISIGVERIFY)))   return false;  try {    ScriptChunk m=chunks.get(chunks.size() - 2);    if (!m.isOpCode())     return false;    int numKeys=decodeFromOpN(m.opcode);    if (numKeys < 1 || chunks.size() != 3 + numKeys)     return false;    for (int i=1; i < chunks.size() - 2; i++) {      if (chunks.get(i).isOpCode())       return false;    }    if (decodeFromOpN(chunks.get(0).opcode) < 1)     return false;  } catch (  IllegalStateException e) {    return false;  }  return true;}  }
class C{  private String escape(String inputName){  return inputName.replace("\\","\\\\").replace("{","\\{").replace("}","\\}");}  }
class C{  public JTableHelper(JTable table){  this.m_Table=table;}  }
class C{  public static void mergeSort(float[] a,int fromIndex,int toIndex){  mergeSort2(a,fromIndex,toIndex);}  }
class C{  public boolean isEmpty(){  return extOrdering.isEmpty();}  }
class C{  @Override public void clear(){  if (null != columnReverseDictionaryInfo) {    columnReverseDictionaryInfo.clear();    columnReverseDictionaryInfo=null;  }}  }
class C{  public synchronized void progressValue(int value){  if (this.progressDialog != null) {    this.progressDialog.setProgress(value);  }}  }
class C{  @Override public void run(){  amIActive=true;  String dataImageHeader=null;  String featureImageHeader=null;  String outputHeader=null;  WhiteboxRasterInfo dataImage;  WhiteboxRasterInfo featureImage;  WhiteboxRaster output;  int cols, rows;  double imageTotal=0;  long imageN=0;  double imageAverage=0;  double imageTotalDeviation=0;  double stdDeviation=0;  float progress=0;  int col, row;  int i;  String statType=null;  boolean textOutput=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      dataImageHeader=args[i];    } else     if (i == 1) {      featureImageHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    } else     if (i == 3) {      statType=args[i].toLowerCase();    } else     if (i == 4) {      textOutput=Boolean.parseBoolean(args[i]);    }  }  if ((dataImageHeader == null) || (featureImageHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dataImage=new WhiteboxRasterInfo(dataImageHeader);    rows=dataImage.getNumberRows();    cols=dataImage.getNumberColumns();    double noData=dataImage.getNoDataValue();    featureImage=new WhiteboxRasterInfo(featureImageHeader);    if (featureImage.getNumberColumns() != cols || featureImage.getNumberRows() != rows) {      showFeedback("Input images must have the same dimensions (i.e. rows and columns).");      return;    }    double featureNoData=featureImage.getNoDataValue();    String featureImageShortName=featureImage.getShortHeaderFile();    String dataImageShortName=dataImage.getShortHeaderFile();    int numFeatures=0;    double[] featureData;    double[] data;    int minFeatureID=99999999;    int maxFeatureID=-99999999;    for (row=0; row < rows; row++) {      featureData=featureImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (featureData[col] != featureNoData) {          if (Math.rint(featureData[col]) != featureData[col]) {            showFeedback("The feature definition image should " + "contain integer values only.");            return;          }          if ((int)featureData[col] < minFeatureID) {            minFeatureID=(int)featureData[col];          }          if ((int)featureData[col] > maxFeatureID) {            maxFeatureID=(int)featureData[col];          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    numFeatures=maxFeatureID - minFeatureID + 1;    double[] featureTotal=new double[numFeatures];    long[] featureN=new long[numFeatures];    double[] featureAverage=new double[numFeatures];    double[] featureTotalDeviation=new double[numFeatures];    double[] featureStdDeviation=new double[numFeatures];    double[] featureMins=new double[numFeatures];    double[] featureMaxs=new double[numFeatures];    boolean[] featurePresent=new boolean[numFeatures];    for (i=0; i < numFeatures; i++) {      featureMins[i]=99999999;      featureMaxs[i]=-99999999;    }    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      data=dataImage.getRowValues(row);      featureData=featureImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (featureData[col] != featureNoData) {          i=(int)(featureData[col] - minFeatureID);          featurePresent[i]=true;          if (data[col] != noData) {            featureTotal[i]+=data[col];            featureN[i]++;            if (data[col] < featureMins[i]) {              featureMins[i]=data[col];            }            if (data[col] > featureMaxs[i]) {              featureMaxs[i]=data[col];            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    for (i=0; i < numFeatures; i++) {      if (featureN[i] > 0) {        featureAverage[i]=featureTotal[i] / featureN[i];      }    }    updateProgress("Loop 2 of 2:",(int)progress);    for (row=0; row < rows; row++) {      data=dataImage.getRowValues(row);      featureData=featureImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (featureData[col] != featureNoData && data[col] != noData) {          i=(int)(featureData[col] - minFeatureID);          featureTotalDeviation[i]+=(data[col] - featureAverage[i]) * (data[col] - featureAverage[i]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    for (i=0; i < numFeatures; i++) {      if (featureN[i] > 0) {        featureStdDeviation[i]=Math.sqrt(featureTotalDeviation[i] / (featureN[i] - 1));      }    }    dataImage.close();    if (!outputHeader.toLowerCase().equals("not specified")) {      output=new WhiteboxRaster(outputHeader,"rw",dataImageHeader,WhiteboxRaster.DataType.FLOAT,noData);      output.setPreferredPalette(dataImage.getPreferredPalette());      output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);      updateProgress("Outputing image data:",(int)progress);      if (statType.equals("average")) {        for (row=0; row < rows; row++) {          featureData=featureImage.getRowValues(row);          for (col=0; col < cols; col++) {            if (featureData[col] != featureNoData) {              i=(int)(featureData[col] - minFeatureID);              output.setValue(row,col,featureAverage[i]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Outputing image data:",(int)progress);        }      } else       if (statType.equals("minimum")) {        for (row=0; row < rows; row++) {          featureData=featureImage.getRowValues(row);          for (col=0; col < cols; col++) {            if (featureData[col] != featureNoData) {              i=(int)(featureData[col] - minFeatureID);              output.setValue(row,col,featureMins[i]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Outputing image data:",(int)progress);        }      } else       if (statType.equals("maximum")) {        for (row=0; row < rows; row++) {          featureData=featureImage.getRowValues(row);          for (col=0; col < cols; col++) {            if (featureData[col] != featureNoData) {              i=(int)(featureData[col] - minFeatureID);              output.setValue(row,col,featureMaxs[i]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Outputing image data:",(int)progress);        }      } else       if (statType.equals("range")) {        for (row=0; row < rows; row++) {          featureData=featureImage.getRowValues(row);          for (col=0; col < cols; col++) {            if (featureData[col] != featureNoData) {              i=(int)(featureData[col] - minFeatureID);              output.setValue(row,col,featureMaxs[i] - featureMins[i]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Outputing image data:",(int)progress);        }      } else       if (statType.equals("standard deviation")) {        for (row=0; row < rows; row++) {          featureData=featureImage.getRowValues(row);          for (col=0; col < cols; col++) {            if (featureData[col] != featureNoData) {              i=(int)(featureData[col] - minFeatureID);              output.setValue(row,col,featureStdDeviation[i]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Outputing image data:",(int)progress);        }      } else       if (statType.equals("total")) {        for (row=0; row < rows; row++) {          featureData=featureImage.getRowValues(row);          for (col=0; col < cols; col++) {            if (featureData[col] != featureNoData) {              i=(int)(featureData[col] - minFeatureID);              output.setValue(row,col,featureTotal[i]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Outputing image data:",(int)progress);        }      } else {        showFeedback("Specified statistic type not recognized");        return;      }      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.close();      returnData(outputHeader);    }    if (textOutput) {      DecimalFormat df;      df=new DecimalFormat("0.000");      String retstr=null;      retstr="EXTRACT STATISTICS\n\n";      retstr+="Data Image:\t" + dataImageShortName + "\n";      retstr+="Feature Image:\t" + featureImageShortName + "\n";      retstr+="NoData Value:\t" + noData + "\n";      retstr+="Output Stat:\t" + statType + "\n\n";      retstr+="ID\t" + "Value" + "\n";      if (statType.equals("average")) {        for (i=0; i < numFeatures; i++) {          if (featureN[i] > 0) {            retstr+=(i + minFeatureID) + "\t" + df.format(featureAverage[i])+ "\n";          } else           if (featurePresent[i]) {            retstr+=(i + minFeatureID) + "\t" + df.format(noData)+ "\n";          }        }      } else       if (statType.equals("minimum")) {        for (i=0; i < numFeatures; i++) {          if (featureN[i] > 0) {            retstr+=(i + minFeatureID) + "\t" + df.format(featureMins[i])+ "\n";          } else           if (featurePresent[i]) {            retstr+=(i + minFeatureID) + "\t" + df.format(noData)+ "\n";          }        }      } else       if (statType.equals("maximum")) {        for (i=0; i < numFeatures; i++) {          if (featureN[i] > 0) {            retstr+=(i + minFeatureID) + "\t" + df.format(featureMaxs[i])+ "\n";          } else           if (featurePresent[i]) {            retstr+=(i + minFeatureID) + "\t" + df.format(noData)+ "\n";          }        }      } else       if (statType.equals("range")) {        for (i=0; i < numFeatures; i++) {          if (featureN[i] > 0) {            retstr+=(i + minFeatureID) + "\t" + df.format((featureMaxs[i] - featureMins[i]))+ "\n";          } else           if (featurePresent[i]) {            retstr+=(i + minFeatureID) + "\t" + df.format(noData)+ "\n";          }        }      } else       if (statType.equals("standard deviation")) {        for (i=0; i < numFeatures; i++) {          if (featureN[i] > 0) {            retstr+=(i + minFeatureID) + "\t" + df.format(featureStdDeviation[i])+ "\n";          } else           if (featurePresent[i]) {            retstr+=(i + minFeatureID) + "\t" + df.format(noData)+ "\n";          }        }      } else       if (statType.equals("total")) {        for (i=0; i < numFeatures; i++) {          if (featureN[i] > 0) {            retstr+=(i + minFeatureID) + "\t" + df.format(featureTotal[i])+ "\n";          } else           if (featurePresent[i]) {            retstr+=(i + minFeatureID) + "\t" + df.format(noData)+ "\n";          }        }      } else {        showFeedback("Specified statistic type not recognized");        return;      }      returnData(retstr);    }    featureImage.close();  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public SamFilterParams create(){  return new SamFilterParams(this);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void updateTexture(){  mRenderer.updateTexture();}  }
class C{  private static String applySpacePolicy(String in,boolean treatLineFeedAsSpace){  String out=in.replaceAll("\r\n","\n");  out=out.replaceAll(" *\n *","\n");  out=treatLineFeedAsSpace ? out.replaceAll("\n"," ") : out;  out=out.replaceAll("[ \t\\x0B\f\r]+"," ");  return out;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:35.650 -0500",hash_original_method="ECF04A8977F592B6B34B54A1AB720125",hash_generated_method="52AF108A6E18123F1928924A90B876C3") public Response createResponse(int statusCode,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards,Object content,ContentTypeHeader contentType) throws ParseException {  if (callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null || content == null || contentType == null)   throw new NullPointerException(" unable to create the response");  SIPResponse sipResponse=new SIPResponse();  StatusLine statusLine=new StatusLine();  statusLine.setStatusCode(statusCode);  String reasonPhrase=SIPResponse.getReasonPhrase(statusCode);  statusLine.setReasonPhrase(reasonPhrase);  sipResponse.setStatusLine(statusLine);  sipResponse.setCallId(callId);  sipResponse.setCSeq(cSeq);  sipResponse.setFrom(from);  sipResponse.setTo(to);  sipResponse.setVia(via);  sipResponse.setMaxForwards(maxForwards);  sipResponse.setContent(content,contentType);  if (userAgent != null) {    sipResponse.setHeader(userAgent);  }  return sipResponse;}  }
class C{  public static boolean equalsOne(char c,char[] match){  for (  char aMatch : match) {    if (c == aMatch) {      return true;    }  }  return false;}  }
class C{  public boolean isSecureMsrpOverMobile(){  return readBoolean(RcsSettingsData.SECURE_MSRP_OVER_MOBILE);}  }
class C{  public ByteVector putInt(final int i){  int length=this.length;  if (length + 4 > data.length) {    enlarge(4);  }  byte[] data=this.data;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static Class<?>[] classesForParams(List<String> params){  Class<?>[] result=new Class<?>[params.size()];  for (int i=0; i < params.size(); i++) {    result[i]=classForParam(params.get(i));  }  return result;}  }
class C{  public UnsupportedHeader createUnsupportedHeader(String optionTag) throws ParseException {  if (optionTag == null)   throw new NullPointerException(optionTag);  Unsupported unsupported=new Unsupported();  unsupported.setOptionTag(optionTag);  return unsupported;}  }
class C{  public static boolean isLocationReachable(InetSocketAddress endpoint,int timeoutMs,int retryCount,int retryIntervalMs){  int retryLeft=retryCount;  while (retryLeft > 0) {    try (Socket s=new Socket()){      s.connect(endpoint,timeoutMs);      return true;    } catch (    IOException e) {    } finally {      SysUtils.sleep(retryIntervalMs);      retryLeft--;    }  }  LOG.log(Level.FINE,"Failed to connect to: {0}",endpoint.toString());  return false;}  }
class C{  @FlashException public static void registerNetworks(String virtualArrayId,@As(",") String[] ids){  if (ids != null) {    Networks.registerNetworks(uris(ids));  }  networks(virtualArrayId);}  }
class C{  public boolean hasNode(final String nodeId){  return this.processingNodes.containsKey(StringUtils.lowerCase(StringUtils.trim(nodeId)));}  }
class C{  private void parseName(){  if (this.name == null) {    String name=getFileHandler().getName(getFile());    int nameIndex=name.toLowerCase().lastIndexOf(".rar");    if (nameIndex >= 0) {      name=name.substring(0,nameIndex);    }    getLogger().debug("Parsed RAR name = [" + name + "]",this.getClass().getName());    setName(name);  }}  }
class C{  public void save(Writer out) throws IOException {  if (doctype != null) {    out.write("<!DOCTYPE ");    out.write(doctype);    out.write(">\n");  }  XMLWriter writer=new XMLWriter(out);  writer.write((XMLElement)document.getChildren().get(0));}  }
class C{  @SuppressWarnings({"unchecked"}) public void addHandler(int cacheId,Class<? extends GridCacheMessage> type,IgniteBiInClosure<UUID,? extends GridCacheMessage> c){  int msgIdx=messageIndex(type);  if (msgIdx != -1) {    Map<Integer,IgniteBiInClosure[]> idxClsHandlers0=idxClsHandlers;    IgniteBiInClosure[] cacheClsHandlers=idxClsHandlers0.get(cacheId);    if (cacheClsHandlers == null) {      cacheClsHandlers=new IgniteBiInClosure[GridCacheMessage.MAX_CACHE_MSG_LOOKUP_INDEX];      idxClsHandlers0.put(cacheId,cacheClsHandlers);    }    if (cacheClsHandlers[msgIdx] != null)     throw new IgniteException("Duplicate cache message ID found [cacheId=" + cacheId + ", type="+ type+ ']');    cacheClsHandlers[msgIdx]=c;    idxClsHandlers=idxClsHandlers0;    return;  } else {    ListenerKey key=new ListenerKey(cacheId,type);    if (clsHandlers.putIfAbsent(key,(IgniteBiInClosure<UUID,GridCacheMessage>)c) != null)     assert false : "Handler for class already registered [cacheId=" + cacheId + ", cls="+ type+ ", old="+ clsHandlers.get(key)+ ", new="+ c+ ']';  }  IgniteLogger log0=log;  if (log0 != null && log0.isTraceEnabled())   log0.trace("Registered cache communication handler [cacheId=" + cacheId + ", type="+ type+ ", msgIdx="+ msgIdx+ ", handler="+ c+ ']');}  }
class C{  public Object clone(){  byte[] newData=new byte[length];  System.arraycopy(data,0,newData,0,newData.length);  SysexMessage event=new SysexMessage(newData);  return event;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("HTMLElement[");  sb.append("Bounds=").append(getBounds()).append(",Height=").append(p_height).append("(").append(p_maxHeight).append("),Width=").append(p_width).append("(").append(p_maxHeight).append("),PageLocation=").append(p_pageLocation).append(" - ");  sb.append("]");  return sb.toString();}  }
class C{  public boolean hasPublishPermissions(){  throw new RuntimeException("Native facebook unsupported");}  }
class C{  public CaseSwitchExpression add(Expression when,Expression then){  int size=this.getChildren().size();  if (size % 2 != 0) {    this.addChild(when);    this.addChild(then);  } else {    this.getChildren().add(this.getChildren().size() - 1,when);    this.getChildren().add(this.getChildren().size() - 1,then);  }  return this;}  }
class C{  public int size(){  return mCapabilities.size();}  }
class C{  public static void save(String fileName,List<File> files) throws IOException {  File playListFile=new File(fileName);  if (files.size() == 0) {    return;  }  PrintWriter m3uFile=null;  try {    m3uFile=new PrintWriter(new FileWriter(playListFile.getCanonicalPath(),false));    m3uFile.write(M3U_HEADER);    m3uFile.println();    for (    File currFile : files) {      if (currFile.isFile()) {        File locFile;        locFile=new File(currFile.toURI());        m3uFile.write(SONG_DELIM);        m3uFile.write(SEC_DELIM);        m3uFile.write("" + -1 + ",");        m3uFile.write(currFile.getName());        m3uFile.println();        m3uFile.write(locFile.getCanonicalPath());        m3uFile.println();      }    }  }  finally {    IOUtils.closeQuietly(m3uFile);  }}  }
class C{  private static String[] splitByCharacterType(String str,boolean camelCase){  if (str == null) {    return null;  }  if (str.length() == 0) {    return ArrayUtils.EMPTY_STRING_ARRAY;  }  char[] c=str.toCharArray();  List list=new ArrayList();  int tokenStart=0;  int currentType=Character.getType(c[tokenStart]);  for (int pos=tokenStart + 1; pos < c.length; pos++) {    int type=Character.getType(c[pos]);    if (type == currentType) {      continue;    }    if (camelCase && type == Character.LOWERCASE_LETTER && currentType == Character.UPPERCASE_LETTER) {      int newTokenStart=pos - 1;      if (newTokenStart != tokenStart) {        list.add(new String(c,tokenStart,newTokenStart - tokenStart));        tokenStart=newTokenStart;      }    } else {      list.add(new String(c,tokenStart,pos - tokenStart));      tokenStart=pos;    }    currentType=type;  }  list.add(new String(c,tokenStart,c.length - tokenStart));  return (String[])list.toArray(new String[list.size()]);}  }
class C{  public static String truncateString(String str,int width){  int excess=str.length() - width;  if (excess <= 0) {    return (str);  }  excess+=3;  int token_start=-1;  int max_len=0;  int max_start=0;  for (int i=0; i < str.length(); i++) {    char c=str.charAt(i);    if (Character.isLetterOrDigit(c) || c == '-' || c == '~') {      if (token_start == -1) {        token_start=i;      } else {        int len=i - token_start;        if (len > max_len) {          max_len=len;          max_start=token_start;        }      }    } else {      token_start=-1;    }  }  if (max_len >= excess) {    int trim_point=max_start + max_len;    return (str.substring(0,trim_point - excess) + "..." + str.substring(trim_point));  } else {    return (str.substring(0,width - 3) + "...");  }}  }
class C{  public KMLCoordinateTokenizer(String s){  this.buffer=s.trim().toCharArray();}  }
class C{  private void handleEnvEditButtonSelected(){  IStructuredSelection sel=(IStructuredSelection)environmentTable.getSelection();  EnvironmentVariable originalVar=(EnvironmentVariable)sel.getFirstElement();  if (originalVar == null) {    return;  }  String originalName=originalVar.getName();  String value=originalVar.getValue();  MultipleInputDialog dialog=new MultipleInputDialog(getShell(),LaunchConfigurationsMessages.EnvironmentTab_11);  dialog.addTextField(NAME_LABEL,originalName,false);  if (value != null && value.indexOf(System.getProperty("line.separator")) > -1) {    dialog.addMultilinedVariablesField(VALUE_LABEL,value,true);  } else {    dialog.addVariablesField(VALUE_LABEL,value,true);  }  if (dialog.open() != Window.OK) {    return;  }  String name=dialog.getStringValue(NAME_LABEL);  value=dialog.getStringValue(VALUE_LABEL);  if (!originalName.equals(name)) {    if (addVariable(new EnvironmentVariable(name,value))) {      getFieldValue().envVars.remove(originalVar.getName());      notifyFieldChanged();    }  } else {    getFieldValue().envVars.put(name,value);    notifyFieldChanged();  }}  }
class C{  public void enableLCV(boolean state){  isLCVHeuristicEnabled=state;}  }
class C{  public void shutdown(){  if (server != null) {    server.shutdown();  }}  }
class C{  private void testEqualsIgnoreCase(Locale locale){  Locale defaultLocale=Locale.getDefault();  Locale.setDefault(locale);  try {    for (    String a : LATIN_I_VARIANTS) {      for (      String b : LATIN_I_VARIANTS) {        if (!a.equalsIgnoreCase(b)) {          fail("Expected " + a + " to equal "+ b+ " in "+ locale);        }      }    }  }  finally {    Locale.setDefault(defaultLocale);  }}  }
class C{  public MailMessage addRecipientBcc(String address){  if (address != null) {    bcc.add(address);  }  return this;}  }
class C{  public void executeQuery(KeyNamePair docTypeKNPair,IMiniTable miniTable){  log.info("");  int AD_Client_ID=Env.getAD_Client_ID(Env.getCtx());  String sql="";  if (docTypeKNPair.getKey() == MRMA.Table_ID) {    sql=getRMASql();  } else {    sql=getOrderSQL();  }  log.fine(sql);  int row=0;  miniTable.setRowCount(row);  try {    PreparedStatement pstmt=DB.prepareStatement(sql.toString(),null);    pstmt.setInt(1,AD_Client_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      miniTable.setRowCount(row + 1);      miniTable.setValueAt(new IDColumn(rs.getInt(1)),row,0);      miniTable.setValueAt(rs.getString(2),row,1);      miniTable.setValueAt(rs.getString(3),row,2);      miniTable.setValueAt(rs.getString(4),row,3);      miniTable.setValueAt(rs.getString(5),row,4);      miniTable.setValueAt(rs.getTimestamp(6),row,5);      miniTable.setValueAt(rs.getBigDecimal(7),row,6);      row++;    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql.toString(),e);  }  miniTable.autoSize();}  }
class C{  public boolean isProcessed(Trace trace,Node node,Direction direction){  boolean ret=false;  if (trace.getBusinessTransaction() != null) {    List<ProcessorWrapper> procs=null;synchronized (processors) {      procs=processors.get(trace.getBusinessTransaction());    }    if (procs != null) {      for (int i=0; !ret && i < procs.size(); i++) {        ret=procs.get(i).isProcessed(trace,node,direction);      }    }  }  if (log.isLoggable(Level.FINEST)) {    log.finest("ProcessManager: isProcessed trace=" + trace + " node="+ node+ " direction="+ direction+ "? "+ ret);  }  return ret;}  }
class C{  public void forward(HttpServerRequest request){  forward(request,null);}  }
class C{  String toString(int indentFactor,int indent) throws JSONException {  int len=length();  if (len == 0) {    return "[]";  }  int i;  StringBuffer sb=new StringBuffer("[");  if (len == 1) {    sb.append(JSONObject.valueToString(this.myArrayList.get(0),indentFactor,indent));  } else {    int newindent=indent + indentFactor;    sb.append('\n');    for (i=0; i < len; i+=1) {      if (i > 0) {        sb.append(",\n");      }      for (int j=0; j < newindent; j+=1) {        sb.append(' ');      }      sb.append(JSONObject.valueToString(this.myArrayList.get(i),indentFactor,newindent));    }    sb.append('\n');    for (i=0; i < indent; i+=1) {      sb.append(' ');    }  }  sb.append(']');  return sb.toString();}  }
class C{  public GPUImageFilterGroup(List<GPUImageFilter> filters){  mFilters=filters;  if (mFilters == null) {    mFilters=new ArrayList<GPUImageFilter>();  } else {    updateMergedFilters();  }  mGLCubeBuffer=ByteBuffer.allocateDirect(CUBE.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();  mGLCubeBuffer.put(CUBE).position(0);  mGLTextureBuffer=ByteBuffer.allocateDirect(TEXTURE_NO_ROTATION.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();  mGLTextureBuffer.put(TEXTURE_NO_ROTATION).position(0);  float[] flipTexture=TextureRotationUtil.getRotation(Rotation.NORMAL,false,true);  mGLTextureFlipBuffer=ByteBuffer.allocateDirect(flipTexture.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();  mGLTextureFlipBuffer.put(flipTexture).position(0);}  }
class C{  public java.lang.StringBuilder append(boolean b){  return null;}  }
class C{  public StepEvent(@IntRange(from=0) int stepCount,@NonNull String eventKey){  super(eventKey);  this.stepCount=stepCount;  this.remainingStepCount=stepCount;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public Table(InputStream input,String options) throws IOException {  init();  parse(input,options);}  }
class C{  public static IMultiPoint[] randomPoints(int n,int d,int scale){  IMultiPoint points[]=new IMultiPoint[n];  for (int i=0; i < n; i++) {    StringBuilder sb=new StringBuilder();    for (int j=0; j < d; j++) {      sb.append(rGen.nextDouble() * scale);      if (j < d - 1) {        sb.append(",");      }    }    points[i]=new Hyperpoint(sb.toString());  }  return points;}  }
class C{  @Override public int hashCode(){  int hash=7;  hash=HashUtilities.hashCode(hash,this.visible);  hash=HashUtilities.hashCode(hash,this.value);  hash=HashUtilities.hashCode(hash,this.paint);  hash=HashUtilities.hashCode(hash,this.stroke);  hash=HashUtilities.hashCode(hash,this.labelVisible);  hash=HashUtilities.hashCode(hash,this.labelAnchor);  hash=HashUtilities.hashCode(hash,this.labelGenerator);  hash=HashUtilities.hashCode(hash,this.labelXOffset);  hash=HashUtilities.hashCode(hash,this.labelYOffset);  hash=HashUtilities.hashCode(hash,this.labelFont);  hash=HashUtilities.hashCode(hash,this.labelPaint);  hash=HashUtilities.hashCode(hash,this.labelBackgroundPaint);  hash=HashUtilities.hashCode(hash,this.labelOutlineVisible);  hash=HashUtilities.hashCode(hash,this.labelOutlineStroke);  hash=HashUtilities.hashCode(hash,this.labelOutlinePaint);  return hash;}  }
class C{  public static LongBuffer createLongBuffer(int elements){  ByteBuffer byteBuffer=ByteBuffer.allocateDirect(elements * 8);  byteBuffer.order(ByteOrder.nativeOrder());  return byteBuffer.asLongBuffer();}  }
class C{  private String securityDocumentResolver(){  if (!config.isInterDocumentCrossReferencesEnabled() || outputPath == null)   return null; else   return defaultString(config.getInterDocumentCrossReferencesPrefix()) + markupDocBuilder.addFileExtension(config.getSecurityDocument());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:03.023 -0500",hash_original_method="0EFC2C7DB10B5AB62D9BC5D8C29D3C9A",hash_generated_method="4CC284166F1D9E8EDAD728C9AB1ED2BD") protected void truncateHistory(ContentResolver cr,int maxEntries){  if (maxEntries < 0) {    throw new IllegalArgumentException();  }  try {    String selection=null;    if (maxEntries > 0) {      selection="_id IN " + "(SELECT _id FROM suggestions" + " ORDER BY " + SuggestionColumns.DATE + " DESC"+ " LIMIT -1 OFFSET "+ String.valueOf(maxEntries)+ ")";    }    cr.delete(mSuggestionsUri,selection,null);  } catch (  RuntimeException e) {    Log.e(LOG_TAG,"truncateHistory",e);  }}  }
class C{  private static void transferRemoteCandidates(Component localComponent,Component remoteComponent){  List<LocalCandidate> remoteCandidates=remoteComponent.getLocalCandidates();  localComponent.setDefaultRemoteCandidate(remoteComponent.getDefaultCandidate());  for (  Candidate<?> rCand : remoteCandidates) {    localComponent.addRemoteCandidate(new RemoteCandidate(rCand.getTransportAddress(),localComponent,rCand.getType(),rCand.getFoundation(),rCand.getPriority(),null));  }}  }
class C{  protected void assertStaticCallEquals(ClassLoader loader,Class clzz,String method,Object value){  java.lang.Class<?> cls=null;  try {    cls=java.lang.Class.forName(clzz.getName(),true,loader);  } catch (  ClassNotFoundException e) {  }  assertNotNull(cls);  java.lang.reflect.Method m=null;  try {    m=cls.getMethod(method);  } catch (  NoSuchMethodException e) {  }  assertNotNull(m);  try {    Object res=m.invoke(null);    assertNotNull(res);    if (value != null) {      assertEquals(res,value);    }  } catch (  InvocationTargetException|IllegalAccessException e) {    fail("Unexpected exception thrown: " + e.getCause());  }}  }
class C{  public static double P(Instances D,int j,int v,int k,int w){  return P(MLUtils.getYfromD(D),j,v,k,w);}  }
class C{  private Item newString(final String value){  key2.set(STR,value,null,null);  Item result=get(key2);  if (result == null) {    pool.put12(STR,newUTF8(value).index);    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void assertNotAnonymousVariable(final TermNode t) throws VisitorException {  if (t.isVariable()) {    final VarNode v=(VarNode)t;    if (v.isAnonymous())     throw new VisitorException("BlankNode not permitted in this context: " + t);  } else {    final IV iv=t.getValueExpression().get();    if (iv.isBNode())     throw new VisitorException("BlankNode not permitted in this context: " + t);  }}  }
class C{  public StoredBlock build(Block block) throws VerificationException {  BigInteger chainWork=this.chainWork.add(block.getWork());  int height=this.height + 1;  return new StoredBlock(block,chainWork,height);}  }
class C{  public ConditionalRabaCoder(){}  }
class C{  public StoreContext(Protos.FrameworkID frameworkId,Map<Protos.TaskID,NodeTask> tasks,Set<Protos.TaskID> pendingTasks,Set<Protos.TaskID> stagingTasks,Set<Protos.TaskID> activeTasks,Set<Protos.TaskID> lostTasks,Set<Protos.TaskID> killableTasks){  setFrameworkId(frameworkId);  setTasks(tasks);  setPendingTasks(pendingTasks);  setStagingTasks(stagingTasks);  setActiveTasks(activeTasks);  setLostTasks(lostTasks);  setKillableTasks(killableTasks);}  }
class C{  public void addBuySellTradeArrow(String action,Money price,ZonedDateTime time,Integer quantity) throws ValueTypeException {  String label=Action.newInstance(action) + " " + quantity+ "@"+ price;  XYPointerAnnotation arrow=new XYPointerAnnotation(label,TradingCalendar.geMillisFromZonedDateTime(time),price.doubleValue(),90d);  arrow.setLabelOffset(5.0);  arrow.setBackgroundPaint(Color.GREEN);  if (action.equals(Action.SELL)) {    arrow.setAngle(-90d);    arrow.setBackgroundPaint(Color.RED);  }  CombinedDomainXYPlot combinedXYplot=(CombinedDomainXYPlot)this.chart.getPlot();  @SuppressWarnings("unchecked") List<XYPlot> subplots=combinedXYplot.getSubplots();  XYPlot xyplot=subplots.get(0);  xyplot.addAnnotation(arrow);  this.chart.fireChartChanged();}  }
class C{  public static void CF10(double[] x,double[] f,double[] c,int nx){  int count1=0;  int count2=0;  int count3=0;  double sum1=0.0;  double sum2=0.0;  double sum3=0.0;  double yj;  double hj;  double N=2.0;  double a=1.0;  for (int j=3; j <= nx; j++) {    yj=x[j - 1] - 2.0 * x[1] * Math.sin(2.0 * PI * x[0] + j * PI / nx);    hj=4.0 * yj * yj - Math.cos(8.0 * PI * yj) + 1.0;    if (j % 3 == 1) {      sum1+=hj;      count1++;    } else     if (j % 3 == 2) {      sum2+=hj;      count2++;    } else {      sum3+=hj;      count3++;    }  }  f[0]=Math.cos(0.5 * PI * x[0]) * Math.cos(0.5 * PI * x[1]) + 2.0 * sum1 / (double)count1;  f[1]=Math.cos(0.5 * PI * x[0]) * Math.sin(0.5 * PI * x[1]) + 2.0 * sum2 / (double)count2;  f[2]=Math.sin(0.5 * PI * x[0]) + 2.0 * sum3 / (double)count3;  c[0]=(f[0] * f[0] + f[1] * f[1]) / (1 - f[2] * f[2]) - a * Math.sin(N * PI * ((f[0] * f[0] - f[1] * f[1]) / (1 - f[2] * f[2]) + 1.0)) - 1.0;}  }
class C{  public boolean isClientIdValid(String clientId){  return this.clientIdPattern == null || this.clientIdPattern.matcher(clientId).matches();}  }
class C{  public void addVirtualMethod(EncodedMethod method){  classData.addVirtualMethod(method);}  }
class C{  public ValueRange(Map<String,Set<Value>> range){  this.range=new HashMap<String,Set<Value>>(range);}  }
class C{  private <E extends Enum<E>>Object convertToEnum(NodeType nd,Object value) throws IllegalQueryStateException {  Object result=NodeType.convertToEnum(nd,value);  if (result != null) {    return result;  }  throw new IllegalQueryStateException("Could not convert value '" + value + " to enum of type "+ nd.getEnumSpec().getClassName());}  }
class C{  public SolrQuery removeSort(SortClause sortClause){  return removeSort(sortClause.getItem());}  }
class C{  public static String encodeSAMLObject(SignableSAMLObject signableSAMLObject,boolean doCompress) throws MarshallingException, IOException {  Marshaller marshaller=org.opensaml.Configuration.getMarshallerFactory().getMarshaller(signableSAMLObject);  org.w3c.dom.Element authDOM=marshaller.marshall(signableSAMLObject);  StringWriter rspWrt=new StringWriter();  XMLHelper.writeNode(authDOM,rspWrt);  String messageXML=rspWrt.toString();  String samlRequestParameter=null;  log.debug("encodeSAMLObject...before encoding: " + messageXML);  if (doCompress) {    Deflater deflater=new Deflater(Deflater.DEFLATED,true);    ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();    DeflaterOutputStream deflaterOutputStream=new DeflaterOutputStream(byteArrayOutputStream,deflater);    deflaterOutputStream.write(messageXML.getBytes("UTF-8"));    deflaterOutputStream.close();    samlRequestParameter=SharedUtils.encodeBytes(byteArrayOutputStream.toByteArray());  } else {    samlRequestParameter=SharedUtils.encodeString(messageXML);  }  log.trace("encodeSAMLObject...after encoding: " + samlRequestParameter);  return samlRequestParameter;}  }
class C{  private void adjustLeftByAspectRatio(RectF rect,float aspectRatio){  rect.left=rect.right - rect.height() * aspectRatio;}  }
class C{  public void onUnloaded(){}  }
class C{  public String toString(){  return super.toString() + "; Link Remaining Name: '" + this.linkRemainingName+ "'";}  }
class C{  public static Object castObject(Object fromValue,Class toType,int operation) throws UtilEvalError {  if (fromValue == null)   throw new InterpreterError("null fromValue");  Class fromType=fromValue instanceof Primitive ? ((Primitive)fromValue).getType() : fromValue.getClass();  return castObject(toType,fromType,fromValue,operation,false);}  }
class C{  @Override public String toString(){  return "Class " + getCoordinate();}  }
class C{  @Override public void putAll(Map<? extends Long,? extends V> map){  Iterator<? extends Entry<? extends Long,? extends V>> it=map.entrySet().iterator();  for (int i=map.size(); i-- > 0; ) {    Entry<? extends Long,? extends V> e=it.next();    this.put(e.getKey(),e.getValue());  }}  }
class C{  public static View convertText(View convertView,String text,int position){  if (convertView.getTag() != null && ((String)convertView.getTag()).equals("text")) {    ((TextView)convertView).setText(text);    convertView.setId(position);    return convertView;  } else {    return null;  }}  }
class C{  private byte[] iv2key(final IKeyBuilder keyBuilder,final IV<?,?> iv){  if (keyBuilder == null)   throw new IllegalArgumentException();  if (iv == null)   throw new IllegalArgumentException();  keyBuilder.reset();  return iv.encode(keyBuilder).getKey();}  }
class C{  public JsonFlattener withSeparator(char separator){  this.separator=separator;  flattenedMap=null;  return this;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.ANNOTABLE_EXPRESSION___GET_ANNOTATIONS:    return getAnnotations();case N4JSPackage.ANNOTABLE_EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET:  return isValidSimpleAssignmentTarget();}return super.eInvoke(operationID,arguments);}  }
class C{  private void createReport(Job job,Map<String,Long> timingMap) throws IOException, ClassNotFoundException {  Class cls=job.getConfiguration().getClassByName(getReporterClass(job));  ((BaseReporter)ReflectionUtils.newInstance(cls,job.getConfiguration())).report(job,timingMap);}  }
class C{  public void declareExtensions(ExtensionProfile extProfile){}  }
class C{  @SuppressWarnings("unchecked") public static <T extends AnnotatedTypeMirror>T castedAsSuper(final AnnotatedTypeMirror subtype,final T supertype){  final Types types=subtype.atypeFactory.getProcessingEnv().getTypeUtils();  final Elements elements=subtype.atypeFactory.getProcessingEnv().getElementUtils();  final T asSuperType=AnnotatedTypes.asSuper(subtype.atypeFactory,subtype,supertype);  fixUpRawTypes(subtype,asSuperType,supertype,types);  if (asSuperType != null && isEnum(asSuperType) && isDeclarationOfJavaLangEnum(types,elements,supertype)) {    final AnnotatedDeclaredType resultAtd=((AnnotatedDeclaredType)supertype).deepCopy();    resultAtd.clearAnnotations();    resultAtd.addAnnotations(asSuperType.getAnnotations());    final AnnotatedDeclaredType asSuperAdt=(AnnotatedDeclaredType)asSuperType;    if (resultAtd.getTypeArguments().size() > 0 && asSuperAdt.getTypeArguments().size() > 0) {      final AnnotatedTypeMirror sourceTypeArg=asSuperAdt.getTypeArguments().get(0);      final AnnotatedTypeMirror resultTypeArg=resultAtd.getTypeArguments().get(0);      resultTypeArg.clearAnnotations();      resultTypeArg.addAnnotations(sourceTypeArg.getAnnotations());      return (T)resultAtd;    }  }  return asSuperType;}  }
class C{  public Path makeUNC(boolean toUNC){  if (!(toUNC ^ isUNC()))   return this;  int newSeparators=this.separators;  if (toUNC) {    newSeparators|=HAS_LEADING | IS_UNC;  } else {    newSeparators&=HAS_LEADING | HAS_TRAILING;  }  return new Path(toUNC ? null : device,segments,newSeparators);}  }
class C{  @CanIgnoreReturnValue public Builder<C> addAll(RangeSet<C> ranges){  for (  Range<C> range : ranges.asRanges()) {    add(range);  }  return this;}  }
class C{  public NotUpdatable(String reason){  super(reason + Messages.getString("NotUpdatable.1") + Messages.getString("NotUpdatable.2")+ Messages.getString("NotUpdatable.3")+ Messages.getString("NotUpdatable.4")+ Messages.getString("NotUpdatable.5"),SQLError.SQL_STATE_GENERAL_ERROR);}  }
class C{  boolean shouldBackup(@NonNull final Uri uri){  final String backup=uri.getQueryParameter("backup");  return !"false".equals(backup);}  }
class C{  public synchronized void flush(){  Enumeration e=logs.elements();  while (e.hasMoreElements()) {    Log log=(Log)e.nextElement();    log.writer.flush();  }  System.out.flush();  System.err.flush();}  }
class C{  @Override protected boolean compareValues(Object previous,Object value){  if ((previous == null) && (value != null)) {    return (true);  } else   if ((previous != null) && (value == null)) {    return (true);  } else   if ((previous == null)) {    return (false);  }  boolean valueChanged=false;  Object oldarray[];  Object newarray[];  if (!(previous instanceof Object[])) {    previous=toObjectArray(previous);  }  if (!(value instanceof Object[])) {    value=toObjectArray(value);  }  if (!(previous instanceof Object[]) || !(value instanceof Object[])) {    return false;  }  oldarray=(Object[])previous;  newarray=(Object[])value;  if (oldarray.length != newarray.length) {    return true;  }  int count1;  int count2;  for (int i=0; i < oldarray.length; ++i) {    count1=countElementOccurrence(oldarray[i],oldarray);    count2=countElementOccurrence(oldarray[i],newarray);    if (count1 != count2) {      valueChanged=true;      break;    }  }  return valueChanged;}  }
class C{  public static byte[] readFullyNoClose(InputStream in) throws IOException {  ByteArrayOutputStream bytes=new ByteArrayOutputStream();  byte[] buffer=new byte[1024];  int count;  while ((count=in.read(buffer)) != -1) {    bytes.write(buffer,0,count);  }  return bytes.toByteArray();}  }
class C{  public void sendRoleUpdateNotification(String relationId,Role newRole,List<ObjectName> oldValue) throws IllegalArgumentException, RelationNotFoundException {  if (relationId == null || newRole == null || oldValue == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  if (!(oldValue instanceof ArrayList<?>))   oldValue=new ArrayList<ObjectName>(oldValue);  RELATION_LOGGER.entering(RelationService.class.getName(),"sendRoleUpdateNotification",new Object[]{relationId,newRole,oldValue});  String roleName=newRole.getRoleName();  List<ObjectName> newRoleVal=newRole.getRoleValue();  String newRoleValString=Role.roleValueToString(newRoleVal);  String oldRoleValString=Role.roleValueToString(oldValue);  StringBuilder ntfMsg=new StringBuilder("Value of role ");  ntfMsg.append(roleName);  ntfMsg.append(" has changed\nOld value:\n");  ntfMsg.append(oldRoleValString);  ntfMsg.append("\nNew value:\n");  ntfMsg.append(newRoleValString);  sendNotificationInt(2,ntfMsg.toString(),relationId,null,roleName,newRoleVal,oldValue);  RELATION_LOGGER.exiting(RelationService.class.getName(),"sendRoleUpdateNotification");}  }
class C{  public static boolean hasSuperClass(Resource subClass,Resource superClass){  return hasSuperClass(subClass,superClass,new HashSet<Resource>());}  }
class C{  public static double bachelierBlackFormula(final Option.Type optionType,@Real final double strike,@Real final double forward,@StdDev final double stddev,final @DiscountFactor double discount){  QL.require(stddev >= 0.0,"blackPrice must be non-negative");  QL.require(discount > 0.0,"discount must be positive");  final double d=(forward - strike) * optionType.ordinal(), h=d / stddev;  if (stddev == 0.0)   return discount * Math.max(d,0.0);  final CumulativeNormalDistribution phi=new CumulativeNormalDistribution();  @NonNegative final double result=discount * stddev * phi.derivative(h) + d * phi.op(h);  if (result >= 0.0)   return result;  throw new ArithmeticException("negative value");}  }
class C{  @Override public synchronized void realClose(boolean calledExplicitly) throws SQLException {  if (this.isClosed) {    return;  }  SQLException sqlEx=null;  if (this.useUsageAdvisor) {    if ((this.deleter == null) && (this.inserter == null) && (this.refresher == null)&& (this.updater == null)) {      this.eventSink=ProfilerEventHandlerFactory.getInstance(this.connection);      String message=Messages.getString("UpdatableResultSet.34");      this.eventSink.consumeEvent(new ProfilerEvent(ProfilerEvent.TYPE_WARN,"",(this.owningStatement == null) ? "N/A" : this.owningStatement.currentCatalog,this.connectionId,(this.owningStatement == null) ? (-1) : this.owningStatement.getId(),this.resultId,System.currentTimeMillis(),0,Constants.MILLIS_I18N,null,this.pointOfOrigin,message));    }  }  try {    if (this.deleter != null) {      this.deleter.close();    }  } catch (  SQLException ex) {    sqlEx=ex;  }  try {    if (this.inserter != null) {      this.inserter.close();    }  } catch (  SQLException ex) {    sqlEx=ex;  }  try {    if (this.refresher != null) {      this.refresher.close();    }  } catch (  SQLException ex) {    sqlEx=ex;  }  try {    if (this.updater != null) {      this.updater.close();    }  } catch (  SQLException ex) {    sqlEx=ex;  }  super.realClose(calledExplicitly);  if (sqlEx != null) {    throw sqlEx;  }}  }
class C{  public void addRtpStreamListener(RtpStreamListener rtpStreamListener){  mRtpStreamListener=rtpStreamListener;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public GroupChatIntentService(){  super("GroupChatIntentService");}  }
class C{  public LabeledOMSpline(double[] llPoints,int units,int lType,int nsegs){  super(llPoints,units,lType,nsegs);}  }
class C{  public synchronized void addSocket(Socket socket){  sockets.add(socket);}  }
class C{  public boolean offer(E e,long timeout,TimeUnit unit) throws InterruptedException {  checkNotNull(e);  long nanos=unit.toNanos(timeout);  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  try {    while (count == items.length) {      if (nanos <= 0)       return false;      nanos=notFull.awaitNanos(nanos);    }    enqueue(e);    return true;  }  finally {    lock.unlock();  }}  }
class C{  public int remainingCapacity(){  return Integer.MAX_VALUE;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.925 -0500",hash_original_method="DE79F9BA4E2E1E76FD6FB5837E125869",hash_generated_method="31D5A49FB0C938CA56A2082C4C3D20DD") protected void onQueryComplete(int token,Object cookie,Cursor cursor){}  }
class C{  protected boolean computeChildren(OpenableElementInfo info,File underlyingResource) throws JavaModelException {  try {    if (underlyingResource.isDirectory() || underlyingResource.isFile()) {      ArrayList vChildren=new ArrayList(5);      char[][] inclusionPatterns=fullInclusionPatternChars();      char[][] exclusionPatterns=fullExclusionPatternChars();      computeFolderChildren(underlyingResource,!Util.isExcluded(new Path(underlyingResource.getAbsolutePath()),inclusionPatterns,exclusionPatterns,true),CharOperation.NO_STRINGS,vChildren,inclusionPatterns,exclusionPatterns);      IJavaElement[] children=new IJavaElement[vChildren.size()];      vChildren.toArray(children);      info.setChildren(children);    }  } catch (  JavaModelException e) {    info.setChildren(new IJavaElement[]{});    throw e;  }  return true;}  }
class C{  public TestRunner(ResultPrinter printer){  fPrinter=printer;}  }
class C{  public void reset(){synchronized (timerThread) {synchronized (this) {      setRemainingTime(interval);    }  }}  }
class C{  public Minutes toStandardMinutes(){  return Minutes.minutes(FieldUtils.safeMultiply(getValue(),DateTimeConstants.MINUTES_PER_HOUR));}  }
class C{  private static int checkTypeVariableSignature(final String signature,int pos){  pos=checkChar('T',signature,pos);  pos=checkIdentifier(signature,pos);  return checkChar(';',signature,pos);}  }
class C{  public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {  String urlFile=jarUrl.getFile();  int separatorIndex=urlFile.indexOf(JAR_URL_SEPARATOR);  if (separatorIndex != -1) {    String jarFile=urlFile.substring(0,separatorIndex);    try {      return new URL(jarFile);    } catch (    MalformedURLException ex) {      if (!jarFile.startsWith("/")) {        jarFile="/" + jarFile;      }      return new URL(FILE_URL_PREFIX + jarFile);    }  } else {    return jarUrl;  }}  }
class C{  private void verifyAssignmentChanges(ComputeVirtualPool cvp,VirtualArrayAssignmentChanges varrayAssignmentChanges){  VirtualArrayAssignments addAssignments=varrayAssignmentChanges.getAdd();  VirtualArrayAssignments removeAssignments=varrayAssignmentChanges.getRemove();  if ((addAssignments != null) && (removeAssignments != null)) {    Set<String> addVArrays=addAssignments.getVarrays();    Set<String> removeVArrays=removeAssignments.getVarrays();    if ((addVArrays != null) && (removeVArrays != null)) {      Set<String> addSet=new HashSet<String>(addVArrays);      Set<String> removeSet=new HashSet<String>(removeVArrays);      addSet.retainAll(removeSet);      if (!addSet.isEmpty()) {        _log.error("Request specifies the same virtual array(s) in both the add and remove lists {}",addSet);        throw APIException.badRequests.sameVirtualArrayInAddRemoveList();      }    }  }}  }
class C{  public static void assertEquals(double expected,double actual){  assertEquals(expected,actual,0d);}  }
class C{  private void cmd_report(){  ListItem li=comboReport.getSelectedItem();  if (li == null || li.getValue() == null)   return;  Object pp=li.getValue();  if (pp == null)   return;  MPrintFormat pf=null;  int AD_PrintFormat_ID=Integer.valueOf(pp.toString());  if (AD_PrintFormat_ID == -1) {    int AD_ReportView_ID=m_reportEngine.getPrintFormat().getAD_ReportView_ID();    if (AD_ReportView_ID != 0) {      String name=m_reportEngine.getName();      int index=name.lastIndexOf('_');      if (index != -1)       name=name.substring(0,index);      pf=MPrintFormat.createFromReportView(m_ctx,AD_ReportView_ID,name);    } else {      int AD_Table_ID=m_reportEngine.getPrintFormat().getAD_Table_ID();      pf=MPrintFormat.createFromTable(m_ctx,AD_Table_ID);    }    if (pf != null)     fillComboReport(pf.get_ID()); else     return;  }  if (AD_PrintFormat_ID == -2) {    MPrintFormat current=m_reportEngine.getPrintFormat();    if (current != null) {      pf=MPrintFormat.copyToClient(m_ctx,current.getAD_PrintFormat_ID(),Env.getAD_Client_ID(m_ctx));      if (pf != null)       fillComboReport(pf.get_ID()); else       return;    } else     return;  } else   pf=MPrintFormat.get(Env.getCtx(),AD_PrintFormat_ID,true);  if (m_reportEngine.getPrintFormat() != null) {    pf.setLanguage(m_reportEngine.getPrintFormat().getLanguage());    pf.setTranslationLanguage(m_reportEngine.getPrintFormat().getLanguage());  }  m_reportEngine.setPrintFormat(pf);  try {    renderReport();  } catch (  Exception e) {    throw new AdempiereException("Failed to render report",e);  }  revalidate();}  }
class C{  public SVGRectFigure(){  this(0,0,0,0);}  }
class C{  public void syncTraktMovieCollection(List<Movie> moviesInTmm){  if (!isEnabled()) {    return;  }  List<Movie> tmmMovies=new ArrayList<>(moviesInTmm);  LOGGER.info("got up to " + tmmMovies.size() + " movies for Trakt.tv collection sync");  List<BaseMovie> traktMovies=new ArrayList<>();  try {    traktMovies=TRAKT.sync().collectionMovies(Extended.DEFAULT_MIN);  } catch (  RetrofitError e) {    handleRetrofitError(e);    return;  }catch (  OAuthUnauthorizedException e) {    try {      refreshAccessToken();      traktMovies=TRAKT.sync().collectionMovies(Extended.DEFAULT_MIN);    } catch (    Exception e1) {      if (e1.getCause() instanceof RetrofitError) {        handleRetrofitError((RetrofitError)e1.getCause());      } else {        LOGGER.error("could not retrieve trakt.tv response: ",e1.getMessage());      }      return;    }  }  LOGGER.info("You have " + traktMovies.size() + " movies in your Trakt.tv collection");  for (  BaseMovie traktMovie : traktMovies) {    for (int i=tmmMovies.size() - 1; i >= 0; i--) {      Movie tmmMovie=tmmMovies.get(i);      if (matches(tmmMovie,traktMovie.movie.ids)) {        boolean dirty=updateIDs(tmmMovie,traktMovie.movie.ids);        if (traktMovie.collected_at != null && !(traktMovie.collected_at.toDate().equals(tmmMovie.getDateAdded()))) {          LOGGER.trace("Marking movie '" + tmmMovie.getTitle() + "' as collected on "+ traktMovie.collected_at.toDate()+ " (was "+ tmmMovie.getDateAddedAsString()+ ")");          tmmMovie.setDateAdded(traktMovie.collected_at.toDate());          dirty=true;        }        if (dirty) {          tmmMovie.writeNFO();          tmmMovie.saveToDb();        }        tmmMovies.remove(i);      }    }  }  if (tmmMovies.size() == 0) {    LOGGER.info("Already up-to-date - no need to add anything :)");    return;  }  LOGGER.debug("prepare " + tmmMovies.size() + " movies for Trakt.tv collection sync");  List<SyncMovie> movies=new ArrayList<>();  int nosync=0;  for (  Movie tmmMovie : tmmMovies) {    if (tmmMovie.getIdAsInt(providerInfo.getId()) != 0 || !tmmMovie.getIdAsString(Constants.IMDB).isEmpty() || tmmMovie.getIdAsInt(Constants.TMDB) != 0) {      movies.add(toSyncMovie(tmmMovie,false));    } else {      nosync++;      continue;    }  }  if (nosync > 0) {    LOGGER.debug("skipping " + nosync + " movies, because they have not been scraped yet!");  }  if (movies.size() == 0) {    LOGGER.info("no new movies for Trakt collection sync found.");    return;  }  try {    LOGGER.info("Adding " + movies.size() + " movies to Trakt.tv collection");    SyncItems items=new SyncItems().movies(movies);    response=TRAKT.sync().addItemsToCollection(items);    LOGGER.info("Trakt add-to-library status:");    printStatus(response);  } catch (  RetrofitError e) {    handleRetrofitError(e);    return;  }catch (  OAuthUnauthorizedException e) {    handleRetrofitError((RetrofitError)e.getCause());    return;  }}  }
class C{  public static CCAnimation animation(String name){  return new CCAnimation(name);}  }
class C{  public static Marketplace updateMarketplace(Marketplace domObj,VOMarketplace voObj) throws ValidationException, ConcurrentModificationException {  if (domObj == null || voObj == null) {    IllegalArgumentException e=new IllegalArgumentException("Parameters must not be null");    logger.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR_PARAMETER_NULL);    throw e;  }  if (domObj.getKey() != 0) {    verifyVersionAndKey(domObj,voObj);  }  validate(voObj);  copyAttributes(domObj,voObj);  return domObj;}  }
class C{  public void addChild(final TFSItem child){  if (children == null) {    setChildrenEmpty();  }  final String childFullPath=child.getFullPath();  if (child.getDeletionID() != 0) {    final TFSItem existingChild=children.get(childFullPath);    if (existingChild != null) {      if (existingChild.getDeletionID() == 0) {        return;      }      if (existingChild.getDeletionID() > child.getDeletionID()) {        return;      }    }  }  children.put(childFullPath,child);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.294 -0500",hash_original_method="014BBC0AF3F984A031B4F01243EED110",hash_generated_method="5E417D0279DE411E7B89E6E44D91B70C") public void drawBitmapMesh(Bitmap bitmap,int meshWidth,int meshHeight,float[] verts,int vertOffset,int[] colors,int colorOffset,Paint paint){  if ((meshWidth | meshHeight | vertOffset| colorOffset) < 0) {    throw new ArrayIndexOutOfBoundsException();  }  if (meshWidth == 0 || meshHeight == 0) {    return;  }  int count=(meshWidth + 1) * (meshHeight + 1);  checkRange(verts.length,vertOffset,count * 2);  if (colors != null) {    checkRange(colors.length,colorOffset,count);  }  nativeDrawBitmapMesh(mNativeCanvas,bitmap.ni(),meshWidth,meshHeight,verts,vertOffset,colors,colorOffset,paint != null ? paint.mNativePaint : 0);}  }
class C{  public boolean isEmpty(){  return lo() > hi();}  }
class C{  protected void deleteEntry(BalancedBinaryNode<K,V> p){  size--;  if (p.left != null && p.right != null) {    BalancedBinaryNode<K,V> s=successor(p);    p.key=s.key;    p.value=s.value;    p=s;  }  BalancedBinaryNode<K,V> replacement=(p.left != null ? p.left : p.right);  if (replacement != null) {    replacement.parent=p.parent;    if (p.parent == null)     root=replacement; else     if (p == p.parent.left)     p.parent.left=replacement; else     p.parent.right=replacement;    p.left=p.right=p.parent=null;    if (p.color == BalancedBinaryNode.BLACK)     fixAfterDeletion(replacement);  } else   if (p.parent == null) {    root=null;  } else {    if (p.color == BalancedBinaryNode.BLACK)     fixAfterDeletion(p);    if (p.parent != null) {      if (p == p.parent.left)       p.parent.left=null; else       if (p == p.parent.right)       p.parent.right=null;      p.parent=null;    }  }}  }
class C{  public SAX2DTM2(DTMManager mgr,Source source,int dtmIdentity,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory,boolean doIndexing){  this(mgr,source,dtmIdentity,whiteSpaceFilter,xstringfactory,doIndexing,DEFAULT_BLOCKSIZE,true,true,false);}  }
class C{  private void changeButtonOkState(){  final boolean loginEntered=this.login != null && !this.login.trim().equals("");  final boolean passwordEntered=this.password != null && !this.password.trim().equals("");  this.buttonOk.setEnabled(loginEntered && passwordEntered);}  }
class C{  public static IMultiPoint[] randomPoints(int n,int d){  IMultiPoint points[]=new IMultiPoint[n];  for (int i=0; i < n; i++) {    StringBuilder sb=new StringBuilder();    for (int j=0; j < d; j++) {      sb.append(rGen.nextDouble());      if (j < d - 1) {        sb.append(",");      }    }    points[i]=new Hyperpoint(sb.toString());  }  return points;}  }
class C{  private TopologyEvent(boolean added,GridClientNode node){  this.added=added;  this.node=node;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case FunctionblockPackage.PARAM__MULTIPLICITY:    return multiplicity != MULTIPLICITY_EDEFAULT;case FunctionblockPackage.PARAM__NAME:  return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case FunctionblockPackage.PARAM__DESCRIPTION:return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);}return super.eIsSet(featureID);}  }
class C{  public BloomFilter(int bitSetSize,int expectedNumberOElements){  this(bitSetSize / (double)expectedNumberOElements,expectedNumberOElements,(int)Math.round((bitSetSize / (double)expectedNumberOElements) * Math.log(2.0)));}  }
class C{  public boolean isBottomNavigationColored(){  return bottomNavigation.isColored();}  }
class C{  @Override public boolean compareCount(int val1,int val2){  return val1 < val2;}  }
class C{  public static void clearInitialContext(String jndiServerName){  contexts.remove(jndiServerName);}  }
class C{  static public final float cosDeg(float degrees){  return Sin.table[(int)((degrees + 90) * degToIndex) & SIN_MASK];}  }
class C{  public void addRows(Map<Assignment,Double> heads){  for (  Assignment head : heads.keySet()) {    addRow(head,heads.get(head));  }}  }
class C{  public final boolean isTraceEnabled(){  return isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE);}  }
class C{  @Override protected void sendFunctionGroup3(){  sendSpeedCmd();}  }
class C{  public void bumpSongCount(final long songId){  if (songId < 0) {    return;  }  final SQLiteDatabase database=mMusicDatabase.getWritableDatabase();  updateExistingRow(database,songId,true);}  }
class C{  public QualityIndicator(Problem problem,NondominatedPopulation referenceSet){  this.problem=problem;  this.referenceSet=referenceSet;  normalizer=new Normalizer(problem,referenceSet);  normalizedReferenceSet=normalizer.normalize(referenceSet);  hypervolumeNormalizer=new Normalizer(problem,referenceSet,Settings.getHypervolumeDelta());}  }
class C{  ModulePointer resolve(String modName){  return (ModulePointer)context.get(modName);}  }
class C{  boolean isOldestExistingOplog(long id){synchronized (this.oplogIdToOplog) {    Iterator<Long> it=this.oplogIdToOplog.keySet().iterator();    while (it.hasNext()) {      long otherId=it.next().longValue();      if (id > otherId) {        return false;      }    }    it=this.inactiveOplogs.keySet().iterator();    while (it.hasNext()) {      long otherId=it.next().longValue();      if (id > otherId) {        return false;      }    }  }  return true;}  }
class C{  public void testComputeSignificanceDoesntAlterAverage() throws Exception {  TransferEntropyCalculatorMultiVariateGaussian teCalc=new TransferEntropyCalculatorMultiVariateGaussian();  super.testComputeSignificanceDoesntAlterAverage(teCalc,2,100,1);}  }
class C{  public MonitoredItemModifyRequest clone(){  MonitoredItemModifyRequest result=new MonitoredItemModifyRequest();  result.MonitoredItemId=MonitoredItemId;  result.RequestedParameters=RequestedParameters == null ? null : RequestedParameters.clone();  return result;}  }
class C{  public void paintToolTipBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static boolean isMessageImdnType(String mime){  return mime != null && mime.toLowerCase().startsWith(ImdnDocument.MIME_TYPE);}  }
class C{  public void write(char x){  if (x < 0 || x >= 256)   throw new IllegalArgumentException("Illegal 8-bit char = " + x);  writeByte(x);}  }
class C{  public void writeMessage(final int fieldNumber,final MessageLite value) throws IOException {  writeTag(fieldNumber,WireFormat.WIRETYPE_LENGTH_DELIMITED);  writeMessageNoTag(value);}  }
class C{  public synchronized Object[] toArray(){  return Arrays.copyOf(elementData,elementCount);}  }
class C{  public static Population createTestPopulation(int nPersons){  Scenario scenario=ScenarioUtils.createScenario(ConfigUtils.createConfig());  Population population=scenario.getPopulation();  for (int i=0; i < nPersons; i++) {    Person person=population.getFactory().createPerson(Id.create(i,Person.class));    PersonUtils.setAge(person,30);    Plan plan=population.getFactory().createPlan();    Activity home=population.getFactory().createActivityFromCoord("home",new Coord((double)0,(double)100));    home.setEndTime(8. * 3600);    Activity work=population.getFactory().createActivityFromCoord("work",new Coord((double)200,(double)100));    work.setEndTime(17. * 3600);    Activity home2=population.getFactory().createActivityFromCoord("home",new Coord((double)0,(double)100));    home2.setEndTime(24. * 3600);    Leg leg=population.getFactory().createLeg(TransportMode.car);    plan.addActivity(home);    plan.addLeg(leg);    plan.addActivity(work);    plan.addLeg(leg);    plan.addActivity(home2);    person.addPlan(plan);    population.addPerson(person);  }  return population;}  }
class C{  public void showEditListNameDialog(){  DialogFragment dialog=EditListNameDialogFragment.newInstance(mShoppingList,mListId,mEncodedEmail,mSharedWithUsers);  dialog.show(this.getFragmentManager(),"EditListNameDialogFragment");}  }
class C{  public boolean isConnectionBased(){  return true;}  }
class C{  public boolean isIndirect(){  return (type == INDIRECT);}  }
class C{  public final void writeInt(final int value){  byteBuffer.putInt(value);}  }
class C{  public void severe(String message){  log(message,SEVERE);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int i;  int progress;  int row, col;  double z=0;  double gridRes=0;  double currentVal=0;  double maxDist=0;  double lineSlope=0;  double azimuth=0;  double deltaX=0;  double deltaY=0;  double x=0;  int x1=0;  int x2=0;  double y=0;  int y1=0;  int y2=0;  double z1=0;  double z2=0;  double dist=0;  double oldDist=0;  double yIntercept=0;  int xStep=0;  int yStep=0;  double noData=0;  boolean flag=false;  double totalElevation=0;  double numElevations=0;  boolean useMaxDist=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      azimuth=Double.parseDouble(args[i]);      if (azimuth > 360 || azimuth < 0) {        azimuth=0.1;      }      if (azimuth == 0) {        azimuth=0.1;      }      if (azimuth == 180) {        azimuth=179.9;      }      if (azimuth == 360) {        azimuth=359.9;      }      if (azimuth < 180) {        lineSlope=Math.tan(Math.toRadians(90 - azimuth));      } else {        lineSlope=Math.tan(Math.toRadians(270 - azimuth));      }    } else     if (i == 3) {      if (!args[i].toLowerCase().equals("not specified")) {        maxDist=Double.parseDouble(args[i]);        useMaxDist=true;      }    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    DEM.isReflectedAtEdges=true;    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    gridRes=(DEM.getCellSizeX() + DEM.getCellSizeY()) / 2;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    if (azimuth > 0 && azimuth <= 90) {      xStep=1;      yStep=1;    } else     if (azimuth <= 180) {      xStep=1;      yStep=-1;    } else     if (azimuth <= 270) {      xStep=-1;      yStep=-1;    } else {      xStep=-1;      yStep=1;    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        currentVal=DEM.getValue(row,col);        if (currentVal != noData) {          totalElevation=0;          numElevations=0;          yIntercept=-row - lineSlope * col;          x=col;          flag=true;          do {            x=x + xStep;            if (x < 0 || x >= cols) {              flag=false;              break;            }            y=(lineSlope * x + yIntercept) * -1;            if (y < 0 || y >= rows) {              flag=false;              break;            }            if (useMaxDist) {              deltaX=(x - col) * gridRes;              deltaY=(y - row) * gridRes;              dist=Math.sqrt(deltaX * deltaX + deltaY * deltaY);              if (dist > maxDist) {                flag=false;                break;              }            }            y1=(int)(y);            y2=y1 + yStep * -1;            z1=DEM.getValue(y1,(int)x);            z2=DEM.getValue(y2,(int)x);            if (z1 != noData && z2 != noData) {              z=z1 + (y - y1) * (z2 - z1);              totalElevation+=z;              numElevations++;            }          } while (flag);          y=-row;          flag=true;          do {            y=y + yStep;            if (-y < 0 || -y >= rows) {              flag=false;              break;            }            x=(y - yIntercept) / lineSlope;            if (x < 0 || x >= cols) {              flag=false;              break;            }            if (useMaxDist) {              deltaX=(x - col) * gridRes;              deltaY=(-y - row) * gridRes;              dist=Math.sqrt(deltaX * deltaX + deltaY * deltaY);              if (dist > maxDist) {                flag=false;                break;              }            }            x1=(int)x;            x2=x1 + xStep;            if (x2 < 0 || x2 >= cols) {              flag=false;              break;            }            z1=DEM.getValue((int)-y,x1);            z2=DEM.getValue((int)y,x2);            if (z1 != noData && z2 != noData) {              z=z1 + (x - x1) * (z2 - z1);              totalElevation+=z;              numElevations++;            }          } while (flag);          if (numElevations > 0) {            z=totalElevation / numElevations - currentVal;            output.setValue(row,col,z);          } else {            output.setValue(row,col,0);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean isFirstProvisioningAfterBoot(){  return mFirstProvAfterBoot;}  }
class C{  public void touch(){  tsFile=null;  jsFile=null;  jsMapFile=null;  javaFileLastTranspiled=0;  jsFileLastTranspiled=0;}  }
class C{  protected Node newNode(){  return new SVGOMGlyphRefElement();}  }
class C{  @Override public byte[] executeAttack(){  LOG.info("FindIV method started");  byte lastIvByte=iv[blockSize - 1];  findPaddingMasks();  while (executePaddingAttack(lastIvByte))   ;  if (processingLastBlock) {    iv[blockSize - 1]=lastIvByte;  } else {    decryptLastByte(lastIvByte);  }  int decryptedLastByte=properties.getByte(blockSize - 1);  FindByteMethod findByteMethod=new FindByteMethod(m_Oracle,iv,c1);  int notPaddedBytes=blockSize;  if (processingLastBlock) {    notPaddedBytes=notPaddedBytes - decryptedLastByte;  }  LOG.info("FindByte method initialized");  for (int i=0; i < notPaddedBytes; i++) {    try {      if (!properties.isByteDecrypted(i)) {        LOG.info("attack on byte: " + i);        byte b=findByteMethod.executeAttack(i);        properties.setByte(i,b);        LOG.info("\tresult " + b);      }    } catch (    NoColumnFoundException ncfe) {      LOG.warn("Byte " + i + " could not be decrypted. Is the file using"+ "a different character set or includes strange special"+ " characters?");      LOG.debug("debug ",ncfe);    }  }  byte[] decrypted=Arrays.copyOf(properties.getDecryptedBytes(),notPaddedBytes);  return decrypted;}  }
class C{  public CouldntLoadDataException(final String msg){  super(msg);  m_stacktrace=super.getStackTrace();}  }
class C{  @NonNull public static <Output>ChronosOperationResult<Output> run(@NonNull final ChronosOperation<Output> operation){  return ChronosService.getInstance().runSync(operation,false);}  }
class C{  synchronized public void rename(String gcTraceName,String newName){  ArgumentChecking.notNull(gcTraceName,"gcTraceName");  ArgumentChecking.notNull(newName,"newName");  GCTrace gcTrace=findGCTrace(gcTraceName);  ErrorReporting.fatalError(gcTrace != null,gcTraceName + " does not exist in the GC trace set.");  if (findGCTrace(newName) == null) {    gcTrace.setName(newName);    listeners.callGCTraceRenamed(gcTrace);  } else {    ErrorReporting.warning("GC trace name " + newName + " already exists.");  }}  }
class C{  public boolean updateDownload(DownloadInfo di){  ContentValues cv=new ContentValues();  cv.put(DownloadColumns.INDEX,di.mIndex);  cv.put(DownloadColumns.FILENAME,di.mFileName);  cv.put(DownloadColumns.URI,di.mUri);  cv.put(DownloadColumns.ETAG,di.mETag);  cv.put(DownloadColumns.TOTALBYTES,di.mTotalBytes);  cv.put(DownloadColumns.CURRENTBYTES,di.mCurrentBytes);  cv.put(DownloadColumns.LASTMOD,di.mLastMod);  cv.put(DownloadColumns.STATUS,di.mStatus);  cv.put(DownloadColumns.CONTROL,di.mControl);  cv.put(DownloadColumns.NUM_FAILED,di.mNumFailed);  cv.put(DownloadColumns.RETRY_AFTER,di.mRetryAfter);  cv.put(DownloadColumns.REDIRECT_COUNT,di.mRedirectCount);  return updateDownload(di,cv);}  }
class C{  @PostConstruct public void init(){  createComponents();  createListeners();  buildLayout();  restoreOnLoad();  setUpCaptionLayout(filterManagementUIState.isCreateFilterViewDisplayed());  eventBus.subscribe(this);}  }
class C{  public static <K,V,R extends Map<K,V>>R selectMapOnEntry(Map<K,V> map,Predicate2<? super K,? super V> predicate,R target){  Procedure2<K,V> mapTransferProcedure=new MapPutProcedure<>(target);  Procedure2<K,V> procedure=null;  MapIterate.forEachKeyValue(map,procedure);  return target;}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public ObjectVirtualPoolRestRep updateObjectVirtualPool(@PathParam("id") URI id,ObjectVirtualPoolUpdateParam param){  VirtualPool cos=null;  ArgValidator.checkFieldUriType(id,VirtualPool.class,"id");  cos=_dbClient.queryObject(VirtualPool.class,id);  ArgValidator.checkEntity(cos,id,isIdEmbeddedInURL(id));  if (!cos.getType().equals(VirtualPool.Type.object.name())) {    throw APIException.badRequests.unexpectedValueForProperty("VPool type",VirtualPool.Type.object.name(),cos.getType());  }  VirtualPoolUtil.validateObjectVirtualPoolUpdateParams(cos,param,_dbClient);  if (getNumResources(cos,_dbClient) > 0 && checkAttributeValuesChanged(param,cos)) {    throw APIException.badRequests.vPoolUpdateNotAllowed("Bucket");  }  populateCommonVirtualPoolUpdateParams(cos,param);  if (null != param.getMaxRetention()) {    cos.setMaxRetention(param.getMaxRetention());  }  if (null != param.getMinDataCenters()) {    if (!cos.getMinDataCenters().equals(param.getMinDataCenters())) {      ArgValidator.checkReference(VirtualPool.class,id,checkForDelete(cos));    }    cos.setMinDataCenters(param.getMinDataCenters());  }  if (null != param.getSystemType()) {    if (cos.getArrayInfo() != null && cos.getArrayInfo().containsKey(VirtualPoolCapabilityValuesWrapper.SYSTEM_TYPE)) {      for (      String systemType : cos.getArrayInfo().get(VirtualPoolCapabilityValuesWrapper.SYSTEM_TYPE)) {        cos.getArrayInfo().remove(VirtualPoolCapabilityValuesWrapper.SYSTEM_TYPE,systemType);      }    }    if (!(VirtualPool.SystemType.NONE.name().equalsIgnoreCase(param.getSystemType()) || VirtualPool.SystemType.isObjectTypeSystem(param.getSystemType()))) {      throw APIException.badRequests.invalidSystemType("Object");    }    if (cos.getArrayInfo() == null) {      cos.setArrayInfo(new StringSetMap());    }    cos.getArrayInfo().put(VirtualPoolCapabilityValuesWrapper.SYSTEM_TYPE,param.getSystemType());  }  StringBuffer errorMessage=new StringBuffer();  ImplicitPoolMatcher.matchVirtualPoolWithAllStoragePools(cos,_dbClient,_coordinator,errorMessage);  _dbClient.updateAndReindexObject(cos);  recordOperation(OperationTypeEnum.UPDATE_VPOOL,VPOOL_UPDATED_DESCRIPTION,cos);  return toObjectVirtualPool(cos);}  }
class C{  @Override int lookForSelectablePosition(int position,boolean lookDown){  final ListAdapter adapter=mAdapter;  if (adapter == null || isInTouchMode()) {    return INVALID_POSITION;  }  final int count=adapter.getCount();  if (!mAreAllItemsSelectable) {    if (lookDown) {      position=Math.max(0,position);      while (position < count && !adapter.isEnabled(position)) {        position++;      }    } else {      position=Math.min(position,count - 1);      while (position >= 0 && !adapter.isEnabled(position)) {        position--;      }    }    if (position < 0 || position >= count) {      return INVALID_POSITION;    }    return position;  } else {    if (position < 0 || position >= count) {      return INVALID_POSITION;    }    return position;  }}  }
class C{  private void byte2hex(byte b,StringBuffer buf){  char[] hexChars={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};  int high=((b & 0xf0) >> 4);  int low=(b & 0x0f);  buf.append(hexChars[high]);  buf.append(hexChars[low]);}  }
class C{  @Deprecated public static void retransformIfNeeded(ClassLoader classLoader,String... classNames){  List<Class<?>> classes=new ArrayList<>();  for (  String name : classNames) {    try {      classes.add(classLoader.loadClass(name));    } catch (    ClassNotFoundException e) {      java.lang.System.err.println("Could not load: " + name);    }  }  retransformIfNeeded(classes);}  }
class C{  public boolean isEnabled(){  return myEnabled;}  }
class C{  private static boolean isHex(char p_char){  return (isDigit(p_char) || (p_char >= 'a' && p_char <= 'f') || (p_char >= 'A' && p_char <= 'F'));}  }
class C{  public byte[] generateSignature(byte[] message){  Layer[] layer=((RainbowPrivateKeyParameters)this.key).getLayers();  int numberOfLayers=layer.length;  x=new short[((RainbowPrivateKeyParameters)this.key).getInvA2().length];  short[] Y_;  short[] y_i;  int counter;  short[] solVec;  short[] tmpVec;  short[] signature;  byte[] S=new byte[layer[numberOfLayers - 1].getViNext()];  short[] msgHashVals=makeMessageRepresentative(message);  boolean ok;  do {    ok=true;    counter=0;    try {      Y_=initSign(layer,msgHashVals);      for (int i=0; i < numberOfLayers; i++) {        y_i=new short[layer[i].getOi()];        solVec=new short[layer[i].getOi()];        for (int k=0; k < layer[i].getOi(); k++) {          y_i[k]=Y_[counter];          counter++;        }        solVec=cf.solveEquation(layer[i].plugInVinegars(x),y_i);        if (solVec == null) {          throw new Exception("LES is not solveable!");        }        for (int j=0; j < solVec.length; j++) {          x[layer[i].getVi() + j]=solVec[j];        }      }      tmpVec=cf.addVect(((RainbowPrivateKeyParameters)this.key).getB2(),x);      signature=cf.multiplyMatrix(((RainbowPrivateKeyParameters)this.key).getInvA2(),tmpVec);      for (int i=0; i < S.length; i++) {        S[i]=((byte)signature[i]);      }    } catch (    Exception se) {      ok=false;    }  } while (!ok);  return S;}  }
class C{  @ColorInt private int defaultPressedColor(int normalColor){  if (maskBrightnessThreshold > 0 && Coloring.getColorBrightness(normalColor) < maskBrightnessThreshold) {    return Coloring.mix(maskColorPressedInverse,normalColor);  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && rippleUseControlHighlight) {    return Coloring.getThemeColor(mView.getContext(),R.attr.colorControlHighlight);  } else {    return Coloring.mix(maskColorPressed,normalColor);  }}  }
class C{  public void addDropItem(final String name,final double probability,final int min,final int max){  dropsItems.add(new DropItem(name,probability,min,max));}  }
class C{  @Override public Color match(FileElement element){  return getColor(ColorPreferencesIds.COLOR_FILE);}  }
class C{  public Object readBeanVisual(Element node) throws Exception {  Object result;  Vector<Element> children;  Element child;  int i;  String name;  String text;  String iconPath;  String animIconPath;  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  result=null;  children=XMLDocument.getChildTags(node);  text="";  iconPath="";  animIconPath="";  for (i=0; i < children.size(); i++) {    child=children.get(i);    name=child.getAttribute(ATT_NAME);    if (name.equals(VAL_TEXT)) {      text=(String)invokeReadFromXML(child);    } else     if (name.equals(VAL_ICONPATH)) {      iconPath=(String)invokeReadFromXML(child);    } else     if (name.equals(VAL_ANIMATEDICONPATH)) {      animIconPath=(String)invokeReadFromXML(child);    }  }  result=new BeanVisual(text,iconPath,animIconPath);  for (i=0; i < children.size(); i++) {    readFromXML(result,node.getAttribute(ATT_NAME),children.get(i));  }  return result;}  }
class C{  public boolean hasSameSignature(String name,ClassInfo returnType,ClassInfo... paramTypes){  return hasSameSignature(MethodInfo.makePrototype(name,returnType,paramTypes,0));}  }
class C{  public static Double toDouble(CharSequence self){  return Double.valueOf(self.toString().trim());}  }
class C{  public void log(String errorString){  log.log(errorString);}  }
class C{  public void show(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);}  }
class C{  @Override public void performRequest(String request){  if (request.compareTo("Stop") == 0) {    stop();  } else {    throw new IllegalArgumentException(request + " not supported (Filter)");  }}  }
class C{  public Quaterniond rotateAxis(double angle,double axisX,double axisY,double axisZ){  return rotateAxis(angle,axisX,axisY,axisZ,this);}  }
class C{  private void assertDocList(QueryResponse rsp,Object... ids){  SolrDocumentList docs=extractDocList(rsp);  assertEquals("Wrong number of docs in response",ids.length,docs.size());  int i=0;  for (  Object id : ids) {    assertEquals(rsp.toString(),id,docs.get(i).get("id"));    i++;  }}  }
class C{  XSLTAttributeDef(String namespace,String name,int type,boolean required,boolean supportsAVT,int errorType){  this.m_namespace=namespace;  this.m_name=name;  this.m_type=type;  this.m_required=required;  this.m_supportsAVT=supportsAVT;  this.m_errorType=errorType;}  }
class C{  public Builder untilDate(Date date){  untilDate=QUERY_DATE.format(date);  return this;}  }
class C{  public void add(char[] w,int wLen){  if (i + wLen >= b.length) {    char[] new_b=new char[i + wLen + INC];    for (int c=0; c < i; c++)     new_b[c]=b[c];    b=new_b;  }  for (int c=0; c < wLen; c++)   b[i++]=w[c];}  }
class C{  public BufferedImage createAvatar(final String hash,final int size){  final boolean[][] array=new boolean[6][5];  for (int i=0; i < 6; i++) {    for (int j=0; j < 5; j++) {      array[i][j]=false;    }  }  for (int i=0; i < hash.length(); i+=2) {    final int s=i / 2;    final boolean v=Math.random() > 0.5;    if (s % 3 == 0) {      array[s / 3][0]=v;      array[s / 3][4]=v;    } else     if (s % 3 == 1) {      array[s / 3][1]=v;      array[s / 3][3]=v;    } else {      array[s / 3][2]=v;    }  }  final int ratio=Math.round(size / 5);  final BufferedImage ret=new BufferedImage(ratio * 5,ratio * 5,BufferedImage.TYPE_3BYTE_BGR);  final Graphics graphics=ret.getGraphics();  graphics.setColor(new Color(Integer.parseInt(String.valueOf(hash.charAt(0)),16) * 16,Integer.parseInt(String.valueOf(hash.charAt(1)),16) * 16,Integer.parseInt(String.valueOf(hash.charAt(2)),16) * 16));  graphics.fillRect(0,0,ret.getWidth(),ret.getHeight());  graphics.setColor(new Color(Integer.parseInt(String.valueOf(hash.charAt(hash.length() - 1)),16) * 16,Integer.parseInt(String.valueOf(hash.charAt(hash.length() - 2)),16) * 16,Integer.parseInt(String.valueOf(hash.charAt(hash.length() - 3)),16) * 16));  for (int i=0; i < 6; i++) {    for (int j=0; j < 5; j++) {      if (array[i][j]) {        graphics.fillRect(j * ratio,i * ratio,ratio,ratio);      }    }  }  return ret;}  }
class C{  @Override public DummyProjectClient project(){  return projectClient;}  }
class C{  public static int beS4(byte[] data,int bci){  return (data[bci] << 24) | ((data[bci + 1] & 0xff) << 16) | ((data[bci + 2] & 0xff) << 8)| (data[bci + 3] & 0xff);}  }
class C{  public static Action audio(){  return create(AUDIO);}  }
class C{  @Path("commit") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) @RolesAllowed("workspace/developer") public CLIOutputWithRevisionResponse commit(final CommitRequest request) throws ServerException, IOException {  request.setProjectPath(getRealPath(request.getProjectPath()));  return this.subversionApi.commit(request);}  }
class C{  public CRemoveFilesAction(){  super("<<");}  }
class C{  public static void main(String[] args) throws Exception {  new GridJobLoadTest().run();}  }
class C{  public static TopicFragment newInstance(Topic topic){  TopicFragment fragment=new TopicFragment();  Bundle args=new Bundle();  args.putParcelable(ARG_TOPIC,topic);  fragment.setArguments(args);  return fragment;}  }
class C{  @Ignore public java.lang.String asString(){  return new java.lang.String(chars);}  }
class C{  public static JSONArray toJSONArray(String string) throws JSONException {  return toJSONArray(new JSONTokener(string));}  }
class C{  public NBTInputStream(InputStream is) throws IOException {  this(is,true);}  }
class C{  public void render(ShapeRenderer renderer){  if (!inCloseupMode) {    Vector2 bottomLeft=myUnproject(closeupCamera,0,closeupCamera.viewportHeight);    Vector2 bottomRight=myUnproject(closeupCamera,closeupCamera.viewportWidth,closeupCamera.viewportHeight);    Vector2 topRight=myUnproject(closeupCamera,closeupCamera.viewportWidth,0);    Vector2 topLeft=myUnproject(closeupCamera,0,0);    renderer.begin(ShapeType.Line);    renderer.setColor(Color.BLUE);    float[] poly={bottomLeft.x,bottomLeft.y,bottomRight.x,bottomRight.y,topRight.x,topRight.y,topLeft.x,topLeft.y};    renderer.set(ShapeType.Line);    renderer.polygon(poly);    renderer.end();  }}  }
class C{  public int available(){  return buffer.available();}  }
class C{  public void doFinalOrientation(Graph graph){  if (completeRuleSetUsed) {    zhangFinalOrientation(graph);  } else {    spirtesFinalOrientation(graph);  }}  }
class C{  private void ensureNoRemoteLdapUsed(Organization organization,LogMessageIdentifier messageId){  if (organization.isRemoteLdapActive()) {    UnsupportedOperationException e=new UnsupportedOperationException("It is forbidden to perform this operation if a remote LDAP is active.");    logger.logError(Log4jLogger.SYSTEM_LOG,e,messageId);    sessionCtx.setRollbackOnly();    throw e;  }}  }
class C{  protected void testHookDoConcurrentModification(){}  }
class C{  public static Motor victorSP(int channel){  return victorSP(channel,SPEED_LIMITER);}  }
class C{  public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {  String str=str();  ch.characters(str.toCharArray(),0,str.length());}  }
class C{  public void addMutedUsername(final String username){  addMutedUsername(username,null);}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,Writer writer) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  for (  Object line : lines) {    if (line != null) {      writer.write(line.toString());    }    writer.write(lineEnding);  }}  }
class C{  protected String localGlobalSummary(Object local,Object global){  return getString(R.string.status_local_global,local,global);}  }
class C{  public CSSPseudoElementSelector(String uri,String name){  super(uri,name);}  }
class C{  public void analyseSampleDurationsForR(int sample,int sampleSize){  log.info("===============================================================");  log.info("Extracting sample " + sample + " activities for `R' analysis.");  log.info("===============================================================");  List<File> sampleFiles=sampler.sampleFiles(sampleSize,filter);  CommercialActivityExtractor cae=new CommercialActivityExtractor(fromCoordinateSystem,toCoordinateSystem);  cae.readSignals(signalFilename);  String outputFile="/Users/johanwjoubert/R-Source/Input/SampleActivityDuration-" + ds.toString() + "-Sample"+ String.format("%02d",sample)+ ".txt";  try {    BufferedWriter output=new BufferedWriter(new FileWriter(new File(outputFile)));    try {      output.write("Duration,Hour");      output.newLine();      int fileCounter=0;      int fileMultiplier=1;      int pointCounter=0;      for (      File file : sampleFiles) {        List<Activity> listActivities=cae.extractActivities(file);        pointCounter+=listActivities.size();        for (        Activity activity : listActivities) {          output.write(String.valueOf(activity.getDuration()));          output.write(",");          output.write(String.valueOf(activity.getStartHour()));          output.newLine();        }        if (++fileCounter == fileMultiplier) {          log.info("Files processed: " + String.format("%5d",fileCounter) + " ["+ String.format("%3.2f",((double)cae.getTotalBoinkPoints() / (double)pointCounter) * 100)+ "%]");          fileMultiplier*=2;        }      }      log.info("Files processed: " + String.format("%5d",fileCounter) + " ["+ String.format("%3.2f",((double)cae.getTotalBoinkPoints() / (double)pointCounter) * 100)+ "%] (Done)");    }  finally {      output.close();    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public int countLinesInFile(String filename) throws IOException {  InputStream is=new BufferedInputStream(new FileInputStream(filename));  try {    byte[] c=new byte[1024];    int count=0;    int readChars=0;    while ((readChars=is.read(c)) != -1) {      for (int i=0; i < readChars; ++i) {        if (c[i] == '\n') {          ++count;        }      }    }    return count;  }  finally {    is.close();  }}  }
class C{  public static int differenceAt(String s1,String s2){  int i;  for (i=0; (i < s1.length()) && (i < s2.length()); ++i) {    if (s1.charAt(i) != s2.charAt(i)) {      break;    }  }  if ((i < s2.length()) || (i < s1.length())) {    return i;  }  return -1;}  }
class C{  public static boolean isFontEmbedded(PdfObject pdfObject){  final int fontType=pdfObject.getParameterConstant(PdfDictionary.Subtype);  if (fontType == StandardFonts.TYPE0) {    pdfObject=pdfObject.getDictionary(PdfDictionary.DescendantFonts);  }  final PdfObject descFontObj=pdfObject.getDictionary(PdfDictionary.FontDescriptor);  if (descFontObj == null) {    return false;  } else {    return descFontObj.hasStream();  }}  }
class C{  protected PotentialConsumer(WorkspaceComponent parent,Object object,String methodName,Class<?>[] argDataTypes,Object[] argValues,String description){  super(parent,object,methodName,argDataTypes[0],argDataTypes,argValues,description);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:20.024 -0500",hash_original_method="B742BF2BEC1472EF6E9612211814463C",hash_generated_method="B742BF2BEC1472EF6E9612211814463C") void onHangupLocal(){  for (int i=0, s=connections.size(); i < s; i++) {    GsmConnection cn=(GsmConnection)connections.get(i);    cn.onHangupLocal();  }  state=State.DISCONNECTING;}  }
class C{  public static Credential decode(Object encoded,Resource rolesDir) throws PageException {  String dec;  try {    dec=Base64Coder.decodeToString(Caster.toString(encoded),"UTF-8");  } catch (  Exception e) {    throw Caster.toPageException(e);  }  Array arr=ListUtil.listToArray(dec,"" + ONE);  int len=arr.size();  if (len == 3) {    String str=Caster.toString(arr.get(3,""));    if (str.startsWith("md5:")) {      if (!rolesDir.exists())       rolesDir.mkdirs();      str=str.substring(4);      Resource md5=rolesDir.getRealResource(str);      try {        str=IOUtil.toString(md5,"utf-8");      } catch (      IOException e) {        str="";      }    }    return new CredentialImpl(Caster.toString(arr.get(1,"")),Caster.toString(arr.get(2,"")),str,rolesDir);  }  if (len == 2)   return new CredentialImpl(Caster.toString(arr.get(1,"")),Caster.toString(arr.get(2,"")),rolesDir);  if (len == 1)   return new CredentialImpl(Caster.toString(arr.get(1,"")),rolesDir);  return null;}  }
class C{  @Override public String toString(){  if (m_zeroR != null) {    return "No attributes other than class. Using ZeroR.\n\n" + m_zeroR.toString();  }  if ((m_Tree == null)) {    return "REPTree: No model built yet.";  }  return "\nREPTree\n============\n" + m_Tree.toString(0,null) + "\n"+ "\nSize of the tree : "+ numNodes();}  }
class C{  public static byte[] decode(byte[] source){  byte[] decoded=null;  try {    decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : "IOExceptions only come from GZipping, which is turned off: " + ex.getMessage();  }  return decoded;}  }
class C{  public int end(){  return matcher.end();}  }
class C{  @Override void animateValue(float fraction){  super.animateValue(fraction);  int numValues=mValues.length;  for (int i=0; i < numValues; ++i) {    mValues[i].setAnimatedValue(mTarget);  }}  }
class C{  public static char encodeUrl(long d){  return _encodeUrl[(int)(d & 0x3f)];}  }
class C{  final boolean isOnSyncQueue(Node node){  if (node.waitStatus == Node.CONDITION || node.prev == null)   return false;  if (node.next != null)   return true;  return findNodeFromTail(node);}  }
class C{  @Override public boolean start() throws ContainerException {  Debug.logInfo("Start BIRT container",module);  if (getName() == null) {    throw new ContainerException("Unknown container config name");  }  ContainerConfig.Container cc=ContainerConfig.getContainer(getName(),configFile);  if (cc == null) {    throw new ContainerException("No " + getName() + " configuration found in container config!");  }  EngineConfig config=new EngineConfig();  String ofbizHome=System.getProperty("ofbiz.home");  config.setTempDir(ofbizHome + File.separatorChar + "runtime"+ File.separatorChar+ "tempfiles");  config.setLogConfig(ofbizHome + File.separatorChar + "runtime"+ File.separatorChar+ "logs"+ File.separatorChar+ "birt",Level.ALL);  System.setProperty(IBirtConstants.SYS_PROP_WORKING_PATH,config.getTempDir());  try {    Debug.logInfo("Startup BIRT platform",module);    Platform.startup(config);  } catch (  BirtException e) {    throw new ContainerException(e);  }  Debug.logInfo("Create factory object",module);  IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);  if (factory == null) {    throw new ContainerException("can not create birt engine factory");  }  Debug.logInfo("Create report engine",module);  IReportEngine engine=factory.createReportEngine(config);  BirtFactory.setReportEngine(engine);  String[] supportedFormats=engine.getSupportedFormats();  String formatList=null;  for (  String supportedFormat : supportedFormats) {    if (formatList != null) {      formatList+=", " + supportedFormat;    } else {      formatList=supportedFormat;    }  }  Debug.logInfo("BIRT supported formats: " + formatList,module);  return false;}  }
class C{  public static float spline(float x,int numKnots,int[] xknots,int[] yknots){  int span;  int numSpans=numKnots - 3;  float k0, k1, k2, k3;  float c0, c1, c2, c3;  if (numSpans < 1)   throw new IllegalArgumentException("Too few knots in spline");  for (span=0; span < numSpans; span++)   if (xknots[span + 1] > x)   break;  if (span > numKnots - 3)   span=numKnots - 3;  float t=(x - xknots[span]) / (xknots[span + 1] - xknots[span]);  span--;  if (span < 0) {    span=0;    t=0;  }  k0=yknots[span];  k1=yknots[span + 1];  k2=yknots[span + 2];  k3=yknots[span + 3];  c3=m00 * k0 + m01 * k1 + m02 * k2 + m03 * k3;  c2=m10 * k0 + m11 * k1 + m12 * k2 + m13 * k3;  c1=m20 * k0 + m21 * k1 + m22 * k2 + m23 * k3;  c0=m30 * k0 + m31 * k1 + m32 * k2 + m33 * k3;  return ((c3 * t + c2) * t + c1) * t + c0;}  }
class C{  public float RM1Auth(String mac,int password){  JsonObject initJsonObjectParams=broadlinkStandardParams(BroadlinkConstants.CMD_RM1_AUTH_ID,BroadlinkConstants.CMD_RM1_AUTH);  initJsonObjectParams.addProperty("mac",mac);  initJsonObjectParams.addProperty("password",password);  JsonObject out=broadlinkExecuteCommand(initJsonObjectParams);  int code=out.get(BroadlinkConstants.CODE).getAsInt();  if (code != 0)   return BroadlinkConstants.INVALID_TEMPERATURE;  return out.get(BroadlinkConstants.TEMPERATURE).getAsFloat();}  }
class C{  public RMIExtendedSocketFactory(InetAddress inetAddress){  this.hostInetAddress=inetAddress;}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length < 7) {    System.err.println("Please check command line arguments.");    System.err.println("Usage :");    System.err.println(HdfsSpoutTopology.class.toString() + " topologyName hdfsUri fileFormat sourceDir sourceArchiveDir badDir destinationDir.");    System.err.println(" topologyName - topology name.");    System.err.println(" hdfsUri - hdfs name node URI");    System.err.println(" fileFormat -  Set to 'TEXT' for reading text files or 'SEQ' for sequence files.");    System.err.println(" sourceDir  - read files from this HDFS dir using HdfsSpout.");    System.err.println(" archiveDir - after a file in sourceDir is read completely, it is moved to this HDFS location.");    System.err.println(" badDir - files that cannot be read properly will be moved to this HDFS location.");    System.err.println(" spoutCount - Num of spout instances.");    System.err.println();    System.exit(-1);  }  String topologyName=args[0];  String hdfsUri=args[1];  String fileFormat=args[2];  String sourceDir=args[3];  String sourceArchiveDir=args[4];  String badDir=args[5];  int spoutNum=Integer.parseInt(args[6]);  ConstBolt bolt=new ConstBolt();  HdfsSpout spout=new HdfsSpout().withOutputFields("line");  Config conf=new Config();  conf.put(Configs.SOURCE_DIR,sourceDir);  conf.put(Configs.ARCHIVE_DIR,sourceArchiveDir);  conf.put(Configs.BAD_DIR,badDir);  conf.put(Configs.READER_TYPE,fileFormat);  conf.put(Configs.HDFS_URI,hdfsUri);  conf.setDebug(true);  conf.setNumWorkers(1);  conf.setNumAckers(1);  conf.setMaxTaskParallelism(1);  conf.setDebug(true);  conf.setNumWorkers(WORKER_NUM);  conf.registerMetricsConsumer(LoggingMetricsConsumer.class);  TopologyBuilder builder=new TopologyBuilder();  builder.setSpout(SPOUT_ID,spout,spoutNum);  builder.setBolt(BOLT_ID,bolt,1).shuffleGrouping(SPOUT_ID);  Map clusterConf=Utils.readStormConfig();  StormSubmitter.submitTopologyWithProgressBar(topologyName,conf,builder.createTopology());  Nimbus.Client client=NimbusClient.getConfiguredClient(clusterConf).getClient();  for (int i=0; i < 40; i++) {    Thread.sleep(30 * 1000);    FastWordCountTopology.printMetrics(client,topologyName);  }  FastWordCountTopology.kill(client,topologyName);}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:56.236 -0500",hash_original_method="D2539732F50CEA46903EFE3EE2FFBB7D",hash_generated_method="08D5F86E631D94343F37D23A8C84BEB9") public final byte[] update(byte[] input){  if (mode != ENCRYPT_MODE && mode != DECRYPT_MODE) {    throw new IllegalStateException();  }  if (input == null) {    throw new IllegalArgumentException("input == null");  }  if (input.length == 0) {    return null;  }  return spiImpl.engineUpdate(input,0,input.length);}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return (left.notEquals(right)) ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  public static PsiDirectory mkdirs(PsiManager manager,String path) throws IncorrectOperationException {  if (File.separatorChar != '/') {    if (path.indexOf(File.separatorChar) != -1) {      throw new IllegalArgumentException("separators must be '/'; path is " + path);    }  }  String existingPath=path;  PsiDirectory directory=null;  while (existingPath.length() > 0) {    VirtualFile file=LocalFileSystem.getInstance().findFileByPath(existingPath);    if (file != null) {      directory=manager.findDirectory(file);      if (directory == null) {        return null;      }      break;    }    if (StringUtil.endsWithChar(existingPath,'/')) {      existingPath=existingPath.substring(0,existingPath.length() - 1);      if (SystemInfo.isWindows && existingPath.length() == 2 && existingPath.charAt(1) == ':') {        return null;      }    }    int index=existingPath.lastIndexOf('/');    if (index == -1) {      return null;    }    existingPath=existingPath.substring(0,index);  }  if (directory == null) {    return null;  }  if (existingPath.equals(path)) {    return directory;  }  String postfix=path.substring(existingPath.length() + 1,path.length());  StringTokenizer tokenizer=new StringTokenizer(postfix,"/");  while (tokenizer.hasMoreTokens()) {    directory=directory.createSubdirectory(tokenizer.nextToken());  }  return directory;}  }
class C{  public boolean isFloating(){  return modelType == FLOATING || modelType == FLOATING_SINGLE;}  }
class C{  @Catch({UnexpectedException.class,ViPRException.class}) public static void handleJsonError(Exception e){  if (request.isAjax() || StringUtils.endsWithIgnoreCase(request.action,"json")) {    Throwable cause=Common.unwrap(e);    String message=Common.getUserMessage(cause);    Logger.error(e,"AJAX request failed: %s.%s [%s]",request.controller,request.action,message);    error(message);  }}  }
class C{  static <K>Node<K> untreeify(Node<K> b){  Node<K> hd=null, tl=null;  for (Node<K> q=b; q != null; q=q.next) {    Node<K> p=new Node<K>(q.hash,q.key,null);    if (tl == null)     hd=p; else     tl.next=p;    tl=p;  }  return hd;}  }
class C{  private PlatformCache copy(IgniteCache cache,boolean keepBinary){  return new PlatformCache(platformCtx,cache,keepBinary,exts);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public String addPreRestoreResyncSteps(Workflow workflow,Map<Volume,Volume> vplexToArrayVolumes,Map<URI,String> vplexVolumeIdToDetachStep,String inputWaitFor){  if (vplexToArrayVolumes.isEmpty()) {    return inputWaitFor;  }  Map<URI,List<Volume>> vplexSystemToVolumes=new HashMap<URI,List<Volume>>();  for (  Volume vplexVolume : vplexToArrayVolumes.keySet()) {    URI storageController=vplexVolume.getStorageController();    if (!vplexSystemToVolumes.containsKey(storageController)) {      vplexSystemToVolumes.put(storageController,new ArrayList<Volume>());    }    vplexSystemToVolumes.get(storageController).add(vplexVolume);  }  for (  Map.Entry<URI,List<Volume>> entry : vplexSystemToVolumes.entrySet()) {    StorageSystem vplexSystem=_dbClient.queryObject(StorageSystem.class,entry.getKey());    String waitFor=inputWaitFor;    List<Volume> volumesToFlush=new ArrayList<Volume>();    List<Volume> distributedVolumes=new ArrayList<Volume>();    for (    Volume vplexVolume : entry.getValue()) {      if (null == vplexVolume.getAssociatedVolumes() || vplexVolume.getAssociatedVolumes().isEmpty()) {        _log.error("VPLEX volume {} has no backend volumes.",vplexVolume.forDisplay());        throw InternalServerErrorException.internalServerErrors.noAssociatedVolumesForVPLEXVolume(vplexVolume.forDisplay());      }      if (vplexVolume.getAssociatedVolumes().size() > 1) {        distributedVolumes.add(vplexVolume);      }      volumesToFlush.add(vplexVolume);    }    for (    Volume distributedVolume : distributedVolumes) {      URI legToDetachURI=null;      for (      String associatedVolume : distributedVolume.getAssociatedVolumes()) {        if (!associatedVolume.equals(vplexToArrayVolumes.get(distributedVolume).getId().toString())) {          legToDetachURI=URI.create(associatedVolume);        }      }      String detachStepId=workflow.createStepId();      Workflow.Method restoreVolumeRollbackMethod=createRestoreResyncRollbackMethod(entry.getKey(),distributedVolume.getId(),legToDetachURI,distributedVolume.getConsistencyGroup(),detachStepId);      createWorkflowStepForDetachMirror(workflow,vplexSystem,distributedVolume,legToDetachURI,detachStepId,waitFor,restoreVolumeRollbackMethod);      vplexVolumeIdToDetachStep.put(distributedVolume.getId(),detachStepId);    }    if (!distributedVolumes.isEmpty()) {      waitFor=DETACH_MIRROR_STEP;    }    for (    Volume volumeToFlush : volumesToFlush) {      createWorkflowStepForInvalidateCache(workflow,vplexSystem,volumeToFlush.getId(),waitFor,rollbackMethodNullMethod());    }  }  return INVALIDATE_CACHE_STEP;}  }
class C{  public static void exitWithSuccess(){  System.out.println("SUCCESS");  System.exit(0);}  }
class C{  void postRemove(HashMapEntry<K,V> e){}  }
class C{  public String localeToString(Locale locale){  return useLocaleLanguageOnly() ? locale.getLanguage() : locale.toString();}  }
class C{  public void addPush(int k){  if ((byte)k == k) {    if (k == -1) {      add(ByteCode.ICONST_M1);    } else     if (0 <= k && k <= 5) {      add((byte)(ByteCode.ICONST_0 + k));    } else {      add(ByteCode.BIPUSH,(byte)k);    }  } else   if ((short)k == k) {    add(ByteCode.SIPUSH,(short)k);  } else {    addLoadConstant(k);  }}  }
class C{  void zoomInOut(final double center,final double factor){  final double t1, t2;  if (isLogScaleEnabled()) {    final double l=Math.log10(getRange().getUpper()) - Math.log10(getRange().getLower());    final double r1=(Math.log10(center) - Math.log10(getRange().getLower())) / l;    final double r2=(Math.log10(getRange().getUpper()) - Math.log10(center)) / l;    t1=Math.pow(10,Math.log10(getRange().getLower()) + r1 * factor * l);    t2=Math.pow(10,Math.log10(getRange().getUpper()) - r2 * factor * l);  } else {    final double l=getRange().getUpper() - getRange().getLower();    final double r1=(center - getRange().getLower()) / l;    final double r2=(getRange().getUpper() - center) / l;    t1=getRange().getLower() + r1 * factor * l;    t2=getRange().getUpper() - r2 * factor * l;  }  setRange(t1,t2,true);}  }
class C{  @Override public Result decode(BinaryBitmap image,Map<DecodeHintType,?> hints) throws NotFoundException {  setHints(hints);  return decodeInternal(image);}  }
class C{  public boolean isEnclosed(){  return manualEnclosed;}  }
class C{  public static OFGroup createMPLSForwardingECMP(U32 index){  return OFGroup.of(0 | (index.getRaw() & 0x00ffFFff) | (MPLSSubType.MPLS_ECMP << 24)| (OFDPAGroupType.MPLS_FORWARDING << 28));}  }
class C{  public RoundRobinCluster(){  super();  currentServerNumber=0;  numberOfServers=0;}  }
class C{  public boolean contains(File file) throws IOException {  File cFile=file.getCanonicalFile();  return appFilesDir.equals(cFile) || cFile.getPath().startsWith(appFilesDir + File.separator);}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    target.visit(v);    element.visit(v);  }}  }
class C{  public void play(){  checkState();  if (mState == STATE_PAUSED) {    PlaybackService.resume(getContext(),mClientKey);  } else   if (mState == STATE_STOPPED) {    SoundCloudTrack track=mPlayerPlaylist.getCurrentTrack();    if (track != null) {      PlaybackService.play(getContext(),mClientKey,track);    } else {      return;    }  }  mState=STATE_PLAYING;}  }
class C{  public int depth(){  return depth.get();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:34.245 -0500",hash_original_method="9FAB8376A6C98C10EDB080B222142712",hash_generated_method="54D55286371F9536EBD7253B98ACC56B") public boolean hasConditions(){  return ifModifiedSince != null || ifNoneMatch != null;}  }
class C{  public Builder doNotBlockTouches(){  showcaseView.setBlocksTouches(false);  return this;}  }
class C{  private Shape scaleShape(Shape shape,double scalingFactor){  if (scalingFactor != 1) {    AffineTransform t=new AffineTransform();    t.scale(scalingFactor,scalingFactor);    shape=t.createTransformedShape(shape);  }  return shape;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void append(File file,Object text,boolean writeBom) throws IOException {  append(file,text,Charset.defaultCharset().name(),writeBom);}  }
class C{  public static void write(float latPoint,float lonPoint,int[] xpoints,int[] ypoints,int cMode,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.POLY_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_POLY);  dos.writeByte(RENDERTYPE_OFFSET);  dos.writeFloat(latPoint);  dos.writeFloat(lonPoint);  int numPoints=xpoints.length + ypoints.length;  dos.writeInt(numPoints);  for (int i=0; i < numPoints / 2; i++) {    dos.writeInt(xpoints[i]);    dos.writeInt(ypoints[i]);  }  dos.writeByte(cMode);  properties.write(dos);}  }
class C{  public int computeSubpopulationLength(EvolutionState state,Population newpop,int subpopulation,int threadnum){  if (!shouldBreedSubpop(state,subpopulation,threadnum))   return newpop.subpops[subpopulation].individuals.length;  return newpop.subpops[subpopulation].individuals.length - numElites(state,subpopulation);}  }
class C{  public TourStep(Placement placement,Element... targets){  peer=StepPeer.newInstance();  peer.setPlacement(placement.getValue());  JsArrayString values=JsArrayString.createArray().cast();  for (  Element el : targets) {    values.push(getOrCreateId(el));  }  peer.setTarget(values);}  }
class C{  public Builder clear(){  reinitialize();  return this;}  }
class C{  public IgniteAuthenticationException(String msg){  super(msg);}  }
class C{  public RestoreSnapshot(ExecutorDriver driver,RestoreSnapshotTask cassandraTask,String version){  this.driver=driver;  this.version=version;  this.cassandraTask=cassandraTask;  this.context=cassandraTask.getBackupRestoreContext();}  }
class C{  public void addForeignKey(int idx,ForeignKey foreignKey){  if (foreignKey != null) {    foreignKeys.add(idx,foreignKey);  }}  }
class C{  public void testMoveToString() throws ChessParseError {  Position pos=TextIO.readFEN(TextIO.startPosFEN);  assertEquals(TextIO.startPosFEN,TextIO.toFEN(pos));  Move move=new Move(Position.getSquare(4,1),Position.getSquare(4,3),Piece.EMPTY);  boolean longForm=true;  String result=moveToString(pos,move,longForm);  assertEquals("e2-e4",result);  move=new Move(Position.getSquare(6,0),Position.getSquare(5,2),Piece.EMPTY);  result=moveToString(pos,move,longForm);  assertEquals("Ng1-f3",result);  move=new Move(Position.getSquare(4,7),Position.getSquare(2,7),Piece.EMPTY);  result=moveToString(pos,move,longForm);  assertEquals("O-O-O",result);  String fen="1r3k2/2P5/8/8/8/4K3/8/8 w - - 0 1";  pos=TextIO.readFEN(fen);  assertEquals(fen,TextIO.toFEN(pos));  move=new Move(Position.getSquare(2,6),Position.getSquare(1,7),Piece.WROOK);  result=moveToString(pos,move,longForm);  assertEquals("c7xb8R+",result);  move=new Move(Position.getSquare(2,6),Position.getSquare(2,7),Piece.WKNIGHT);  result=moveToString(pos,move,longForm);  assertEquals("c7-c8N",result);  move=new Move(Position.getSquare(2,6),Position.getSquare(2,7),Piece.WQUEEN);  result=moveToString(pos,move,longForm);  assertEquals("c7-c8Q+",result);  pos=TextIO.readFEN(TextIO.startPosFEN);  Move nullMove=new Move(0,0,0);  result=moveToString(pos,nullMove,false);  assertEquals("--",result);  result=moveToString(pos,nullMove,true);  assertEquals("--",result);}  }
class C{  void expectNonObsolete(ThreadReference thread) throws Exception {  if (isObsolete(thread)) {    failure("FAIL: Method should NOT be obsolete");  } else {    println("as it should be, not obsolete");  }}  }
class C{  public void toEPL(StringWriter writer,EPStatementFormatter formatter,boolean isTopLevel){  formatter.beginInsertInto(writer,isTopLevel);  writer.write("insert ");  if (streamSelector != StreamSelector.ISTREAM_ONLY) {    writer.write(streamSelector.getEpl());    writer.write(" ");  }  writer.write("into ");  writer.write(streamName);  if (columnNames.size() > 0) {    writer.write("(");    String delimiter="";    for (    String name : columnNames) {      writer.write(delimiter);      writer.write(name);      delimiter=", ";    }    writer.write(")");  }}  }
class C{  public static float convertDpToPixel(float dp,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float px=dp * (metrics.densityDpi / 160f);  return px;}  }
class C{  protected String convertValue(String value){  return value;}  }
class C{  protected void postorder(TreeNode<E> root){  if (root == null)   return;  postorder(root.left);  postorder(root.right);  System.out.print(root.element + " ");}  }
class C{  public boolean isDirty(){  return isDirty;}  }
class C{  @Override protected void mouseClicked(int par1,int par2,int par3) throws IOException {  super.mouseClicked(par1,par2,par3);  proxyBox.mouseClicked(par1,par2,par3);  if (proxyBox.isFocused())   error="";}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private int confirmContinueScheduledOnClose(){  String message="<html><body style='width:240'>" + "There is currently a commercial scheduled to be run. It can also" + " be run if you close this. What do you want to do?";  String[] options=new String[]{"Run on schedule","Cancel commercial"};  int result=JOptionPane.showOptionDialog(main,message,"Closing Admin Dialog while commercial is scheduled",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);  return result;}  }
class C{  public JColorChooser(Color initialColor){  this(new DefaultColorSelectionModel(initialColor));}  }
class C{  public static void cutSchedule(TransitSchedule schedule,Coord center,double radius){  Set<Id<TransitStopFacility>> stopsInArea=new HashSet<>();  for (  TransitStopFacility stopFacility : schedule.getFacilities().values()) {    if (CoordUtils.calcEuclideanDistance(center,stopFacility.getCoord()) <= radius) {      stopsInArea.add(stopFacility.getId());    }  }  cutSchedule(schedule,stopsInArea);}  }
class C{  public static char[] copyOfRange(char[] original,int start,int end){  if (start <= end) {    if (original.length >= start && 0 <= start) {      int length=end - start;      int copyLength=Math.min(length,original.length - start);      char[] copy=new char[length];      System.arraycopy(original,start,copy,0,copyLength);      return copy;    }    throw new ArrayIndexOutOfBoundsException();  }  throw new IllegalArgumentException();}  }
class C{  public DrawerBuilder withSelectedItemByPosition(int selectedItemPosition){  this.mSelectedItemPosition=selectedItemPosition;  return this;}  }
class C{  public SimpleBeanContainer findEnclosingContainer(LatLonPoint llp){  Vector containers=getAllContainers();  for (int i=0; i < containers.size(); i++) {    SimpleBeanContainer container=(SimpleBeanContainer)containers.get(i);    if (encloses(container,llp))     return container;  }  return null;}  }
class C{  public static long generate(long hash,final byte[] buffer,final int offset,final int length){  final long m=0xc6a4a7935bd1e995L;  final int r=47;  hash^=length * m;  int len8=length / 8;  for (int i=0; i < len8; i++) {    final int index=i * 8 + offset;    long k=((buffer[index + 0] & 0xffL) | ((buffer[index + 1] & 0xffL) << 8) | ((buffer[index + 2] & 0xffL) << 16)| ((buffer[index + 3] & 0xffL) << 24)| ((buffer[index + 4] & 0xffL) << 32)| ((buffer[index + 5] & 0xffL) << 40)| ((buffer[index + 6] & 0xffL) << 48)| ((buffer[index + 7] & 0xffL) << 56));    k*=m;    k^=k >>> r;    k*=m;    hash^=k;    hash*=m;  }  final int off=offset + (length & ~0x7);switch (length % 8) {case 7:    hash^=(buffer[off + 6] & 0xffL) << 48;case 6:  hash^=(buffer[off + 5] & 0xffL) << 40;case 5:hash^=(buffer[off + 4] & 0xffL) << 32;case 4:hash^=(buffer[off + 3] & 0xffL) << 24;case 3:hash^=(buffer[off + 2] & 0xffL) << 16;case 2:hash^=(buffer[off + 1] & 0xffL) << 8;case 1:hash^=(buffer[off + 0] & 0xffL);hash*=m;}hash^=hash >>> r;hash*=m;hash^=hash >>> r;return hash;}  }
class C{  public void characters(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem() && org.apache.xml.utils.XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;  if (m_inCData) {    cdata(ch,start,length);    return;  }  String s=new String(ch,start,length);  Node childNode;  childNode=m_currentNode != null ? m_currentNode.getLastChild() : null;  if (childNode != null && childNode.getNodeType() == Node.TEXT_NODE) {    ((Text)childNode).appendData(s);  } else {    Text text=m_doc.createTextNode(s);    append(text);  }}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  private void animatePropertyBy(int constantName,float byValue){  float fromValue=getValue(constantName);  animatePropertyBy(constantName,fromValue,byValue);}  }
class C{  private td createTD(Element element){  td td=new td().addElement(element).setAlign(AlignType.LEFT).setVAlign(AlignType.TOP);  return td;}  }
class C{  public Builder(@NonNull AuthorizationServiceConfiguration configuration,@NonNull String clientId){  setConfiguration(configuration);  setClientId(clientId);  mAdditionalParameters=new LinkedHashMap<>();}  }
class C{  public static Command createAppendTextIfAbsentToFileCommand(Path pathToFile,String textToAppend,String checkIfTextPresentRegex){  return createCommand(getAppendTextToFileCommand(pathToFile,textToAppend,checkIfTextPresentRegex,true));}  }
class C{  private void sincronizarBase(){  listaDesignacao=ControleDAO.getBanco().getDesignacaoDAO().listar();}  }
class C{  public void storageType(int type){  closedStorage=type;}  }
class C{  public static void startServer(){  startServer(Charset.defaultCharset(),null);}  }
class C{  public void dataStatusChanged(DataStatusEvent e){  log.config(e.toString());  String info=(String)m_mTab.getValue("Description");  f_Description.setText(info);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:14.921 -0400",hash_original_method="4D2B03AB36108D48F19C7175F7C0CB28",hash_generated_method="95976D1ADF890E5B9396DAB65491CE75") public boolean verify(PublicKey verificationKey,Signature verificationEngine) throws InvalidKeyException, SignatureException {  verificationEngine.initVerify(verificationKey);  verificationEngine.update(content);  return verificationEngine.verify(signature);}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_main);  if (savedInstanceState == null) {    FragmentManager mgr=getFragmentManager();    AcquisitionFrag=AcquisitionFragment.newInstance();    AcquisitionFrag.setListener(this);    mgr.beginTransaction().replace(R.id.central,AcquisitionFrag).commit();  }}  }
class C{  public static boolean hasExtension(String extension){  if (extension == null || extension.isEmpty()) {    return false;  }  return extensionToMimeTypeMap.containsKey(extension);}  }
class C{  @Override public void doRunKeys(int run) throws Exception {  if (m_ResultProducer == null) {    throw new Exception("No ResultProducer set");  }  if (m_ResultListener == null) {    throw new Exception("No ResultListener set");  }  if (m_Instances == null) {    throw new Exception("No Instances set");  }  m_ResultProducer.setResultListener(this);  m_ResultProducer.setInstances(m_Instances);  if (m_LowerSize == 0) {    m_CurrentSize=m_StepSize;  } else {    m_CurrentSize=m_LowerSize;  }  while (m_CurrentSize <= m_Instances.numInstances() && ((m_UpperSize == -1) || (m_CurrentSize <= m_UpperSize))) {    m_ResultProducer.doRunKeys(run);    m_CurrentSize+=m_StepSize;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:53.552 -0500",hash_original_method="1B5F4BD94220D105FC0E737C13196363",hash_generated_method="D572663DB0E9861E86A86CD824369BE6") @Override protected void handlePollStateResult(int what,AsyncResult ar){  if (ar.userObj != pollingContext)   return;  if (ar.exception != null) {    CommandException.Error err=null;    if (ar.exception instanceof CommandException) {      err=((CommandException)(ar.exception)).getCommandError();    }    if (err == CommandException.Error.RADIO_NOT_AVAILABLE) {      cancelPollState();      return;    }    if (!cm.getRadioState().isOn()) {      cancelPollState();      return;    }    if (err != CommandException.Error.OP_NOT_ALLOWED_BEFORE_REG_NW) {      loge("handlePollStateResult: RIL returned an error where it must succeed" + ar.exception);    }  } else   try {    handlePollStateResultMessage(what,ar);  } catch (  RuntimeException ex) {    loge("handlePollStateResult: Exception while polling service state. " + "Probably malformed RIL response." + ex);  }  pollingContext[0]--;  if (pollingContext[0] == 0) {    boolean namMatch=false;    if (!isSidsAllZeros() && isHomeSid(newSS.getSystemId())) {      namMatch=true;    }    if (isSubscriptionFromRuim) {      newSS.setRoaming(isRoamingBetweenOperators(mCdmaRoaming,newSS));    } else {      newSS.setRoaming(mCdmaRoaming);    }    newSS.setCdmaDefaultRoamingIndicator(mDefaultRoamingIndicator);    newSS.setCdmaRoamingIndicator(mRoamingIndicator);    boolean isPrlLoaded=true;    if (TextUtils.isEmpty(mPrlVersion)) {      isPrlLoaded=false;    }    if (!isPrlLoaded) {      newSS.setCdmaRoamingIndicator(EriInfo.ROAMING_INDICATOR_OFF);    } else     if (!isSidsAllZeros()) {      if (!namMatch && !mIsInPrl) {        newSS.setCdmaRoamingIndicator(mDefaultRoamingIndicator);      } else       if (namMatch && !mIsInPrl) {        newSS.setCdmaRoamingIndicator(EriInfo.ROAMING_INDICATOR_FLASH);      } else       if (!namMatch && mIsInPrl) {        newSS.setCdmaRoamingIndicator(mRoamingIndicator);      } else {        if ((mRoamingIndicator <= 2)) {          newSS.setCdmaRoamingIndicator(EriInfo.ROAMING_INDICATOR_OFF);        } else {          newSS.setCdmaRoamingIndicator(mRoamingIndicator);        }      }    }    int roamingIndicator=newSS.getCdmaRoamingIndicator();    newSS.setCdmaEriIconIndex(phone.mEriManager.getCdmaEriIconIndex(roamingIndicator,mDefaultRoamingIndicator));    newSS.setCdmaEriIconMode(phone.mEriManager.getCdmaEriIconMode(roamingIndicator,mDefaultRoamingIndicator));    if (DBG) {      log("Set CDMA Roaming Indicator to: " + newSS.getCdmaRoamingIndicator() + ". mCdmaRoaming = "+ mCdmaRoaming+ ", isPrlLoaded = "+ isPrlLoaded+ ". namMatch = "+ namMatch+ " , mIsInPrl = "+ mIsInPrl+ ", mRoamingIndicator = "+ mRoamingIndicator+ ", mDefaultRoamingIndicator= "+ mDefaultRoamingIndicator);    }    pollStateDone();  }}  }
class C{  public boolean await(final long timeout,final TimeUnit unit) throws InterruptedException {  final long start=System.nanoTime();  final long nanos=unit.toNanos(timeout);  long remaining=nanos;  if (lock.tryLock(remaining,TimeUnit.NANOSECONDS)) {    try {      remaining=nanos - (System.nanoTime() - start);      long c;      while ((c=counter.get()) != 0) {        if (c < 0)         throw new IllegalStateException(toString());        if (remaining > 0)         remaining=cond.awaitNanos(remaining); else         return false;      }      return true;    }  finally {      lock.unlock();    }  }  return false;}  }
class C{  @SuppressWarnings("unused") public static void blackhole(boolean value){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:29.050 -0500",hash_original_method="7C266202E2C105591C60939D1875F8A0",hash_generated_method="8B3F48C6D2897370E1340E49CE28A798") public static ParcelFileDescriptor fromDatagramSocket(DatagramSocket datagramSocket){  FileDescriptor fd=datagramSocket.getFileDescriptor$();  return fd != null ? new ParcelFileDescriptor(fd) : null;}  }
class C{  public RangeFilterParser(FilterModule filterModule,Match match,Element element) throws FilterException {  super(filterModule,match,element);  min=Numbers.parseInteger(ParseUtil.getFirstAttribute("min",element),0);  max=Numbers.parseInteger(ParseUtil.getFirstAttribute("max",element),Integer.MAX_VALUE);}  }
class C{  public boolean isDestroying(){  return getState().isDestroying();}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value={"UW_UNCOND_WAIT","WA_NOT_IN_LOOP","NO_NOTIFY_NOT_NOTIFYALL"},justification="Wait is for external hardware, which doesn't necessarilly respond, to process the data.  Notify is used because Having more than one thread waiting on xmtRunnable is an error.") public void handleOneIncomingReply() throws java.io.IOException {  byte buffer[]=new byte[100];  DatagramPacket receivePacket=new DatagramPacket(buffer,100,host,port);  ((Z21Adapter)controller).getSocket().receive(receivePacket);  Z21Reply msg=new Z21Reply(buffer,receivePacket.getLength());  replyInDispatch=true;  if (log.isDebugEnabled()) {    log.debug("dispatch reply of length " + msg.getNumDataElements() + " contains "+ msg.toString()+ " state "+ mCurrentState);  }  Runnable r=new RcvNotifier(msg,mLastSender,this);  try {    javax.swing.SwingUtilities.invokeAndWait(r);  } catch (  Exception e) {    log.error("Unexpected exception in invokeAndWait:" + e);    e.printStackTrace();  }  if (log.isDebugEnabled()) {    log.debug("dispatch thread invoked");  }  if (!msg.isUnsolicited()) {switch (mCurrentState) {case WAITMSGREPLYSTATE:{        if (msg.isRetransmittableErrorMsg()) {          if (log.isDebugEnabled()) {            log.debug("Automatic Recovery from Error Message: +msg.toString()");          }synchronized (xmtRunnable) {            mCurrentState=AUTORETRYSTATE;            replyInDispatch=false;            xmtRunnable.notify();          }        } else {synchronized (xmtRunnable) {            mCurrentState=NOTIFIEDSTATE;            replyInDispatch=false;            xmtRunnable.notify();          }        }        break;      }case WAITREPLYINPROGMODESTATE:{      mCurrentMode=PROGRAMINGMODE;      replyInDispatch=false;      int warmUpDelay=enterProgModeDelayTime();      if (warmUpDelay != 0) {        try {synchronized (xmtRunnable) {            xmtRunnable.wait(warmUpDelay);          }        } catch (        InterruptedException e) {          Thread.currentThread().interrupt();        }      }synchronized (xmtRunnable) {        mCurrentState=OKSENDMSGSTATE;        xmtRunnable.notify();      }      break;    }case WAITREPLYINNORMMODESTATE:{    mCurrentMode=NORMALMODE;    replyInDispatch=false;synchronized (xmtRunnable) {      mCurrentState=OKSENDMSGSTATE;      xmtRunnable.notify();    }    break;  }default :{  replyInDispatch=false;  if (allowUnexpectedReply == true) {    if (log.isDebugEnabled()) {      log.debug("Allowed unexpected reply received in state: " + mCurrentState + " was "+ msg.toString());    }synchronized (xmtRunnable) {      xmtRunnable.notify();    }  } else {    log.error("reply complete in unexpected state: " + mCurrentState + " was "+ msg.toString());  }}}} else {if (log.isDebugEnabled()) {log.debug("Unsolicited Message Received " + msg.toString());}replyInDispatch=false;}}  }
class C{  public void forEachMultiply(Allocation ain,Allocation aout){  blend(14,ain,aout);}  }
class C{  public SQLPermission(String name,String actions){  super(name,actions);}  }
class C{  @SuppressWarnings("unchecked") private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {  s.defaultReadObject();  Object listenerOrNull;  while (null != (listenerOrNull=s.readObject())) {    add((E)listenerOrNull);  }}  }
class C{  public static void connect(Object stub,Object orb) throws IOException {  if (proxy == null)   throw new IOException("Connection to ORB failed, RMI/IIOP not available");  proxy.connect(stub,orb);}  }
class C{  public WriteRequest(final Mode mode,final int objectId,final int objectInstanceId,final LwM2mResource... resources){  this(mode,ContentFormat.TLV,new LwM2mPath(objectId,objectInstanceId),new LwM2mObjectInstance(objectId,resources));}  }
class C{  public void start(){  if (!G.v().Timer_isGarbageCollecting && Options.v() != null && Options.v().subtract_gc() && ((G.v().Timer_count++ % 4) == 0)) {    G.v().Timer_isGarbageCollecting=true;    G.v().Timer_forcedGarbageCollectionTimer.start();{      Iterator<Timer> timerIt=G.v().Timer_outstandingTimers.iterator();      while (timerIt.hasNext()) {        Timer t=timerIt.next();        t.end();      }    }    System.gc();{      Iterator<Timer> timerIt=G.v().Timer_outstandingTimers.iterator();      while (timerIt.hasNext()) {        Timer t=timerIt.next();        t.start();      }    }    G.v().Timer_forcedGarbageCollectionTimer.end();    G.v().Timer_isGarbageCollecting=false;  }  startTime=System.currentTimeMillis();  if (hasStarted)   throw new RuntimeException("timer " + name + " has already been started!"); else   hasStarted=true;  if (!G.v().Timer_isGarbageCollecting) {    G.v().Timer_outstandingTimers.add(this);  }}  }
class C{  private void moveCursorForward(int columnsToMove){}  }
class C{  public static boolean decodeToFile(String dataToDecode,String filename){  boolean success=false;  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));    success=true;  } catch (  java.io.IOException e) {    success=false;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }  return success;}  }
class C{  protected NumericalMultiplyDivideExpressionImpl(){  super();}  }
class C{  public Topic(Object topicObject){  this.topicObject=topicObject;}  }
class C{  @Override public boolean onUnit(Graphics g,int x,int y,int w,int h){  FontMetrics fm=g.getFontMetrics();  int l=(int)(m_x * w) - fm.stringWidth(m_id) / 2;  int t=(int)(m_y * h) - fm.getHeight() / 2;  if (x < l || x > l + fm.stringWidth(m_id) + 4 || y < t || y > t + fm.getHeight() + fm.getDescent()+ 4) {    return false;  }  return true;}  }
class C{  private void prepareVolumeData() throws Exception {  log.info("Preparing Volumes for VolumeAccessStateLinkStatusMigration");  TenantOrg tenantOrg=new TenantOrg();  URI tenantOrgURI=URIUtil.createId(TenantOrg.class);  tenantOrg.setId(tenantOrgURI);  _dbClient.createObject(tenantOrg);  volumeAccessStateLinkStatusURIs=new ArrayList<URI>();  Project proj=new Project();  URI projectURI=URIUtil.createId(Project.class);  String projectLabel="project";  proj.setId(projectURI);  proj.setLabel(projectLabel);  proj.setTenantOrg(new NamedURI(tenantOrgURI,projectLabel));  _dbClient.createObject(proj);  Volume sourceVolume=new Volume();  URI sourceVolumeURI=URIUtil.createId(Volume.class);  volumeAccessStateLinkStatusURIs.add(sourceVolumeURI);  sourceVolume.setId(sourceVolumeURI);  sourceVolume.setLabel("SOURCE");  sourceVolume.setPersonality(Volume.PersonalityTypes.SOURCE.toString());  sourceVolume.setRpCopyName("COPY");  _dbClient.createObject(sourceVolume);  Volume targetVolume=new Volume();  URI targetVolumeURI=URIUtil.createId(Volume.class);  volumeAccessStateLinkStatusURIs.add(targetVolumeURI);  targetVolume.setId(targetVolumeURI);  targetVolume.setLabel("TARGET");  targetVolume.setPersonality(Volume.PersonalityTypes.TARGET.toString());  targetVolume.setRpCopyName("COPY");  _dbClient.createObject(targetVolume);  Volume journalVolume=new Volume();  URI journalVolumeURI=URIUtil.createId(Volume.class);  volumeAccessStateLinkStatusURIs.add(journalVolumeURI);  journalVolume.setId(journalVolumeURI);  journalVolume.setLabel("METADATA");  journalVolume.setPersonality(Volume.PersonalityTypes.METADATA.toString());  journalVolume.setRpCopyName("COPY");  _dbClient.createObject(journalVolume);  Volume srdfSourceVolume=new Volume();  URI srdfSourceVolumeURI=URIUtil.createId(Volume.class);  volumeAccessStateLinkStatusURIs.add(srdfSourceVolumeURI);  srdfSourceVolume.setId(srdfSourceVolumeURI);  srdfSourceVolume.setLabel("SOURCE");  srdfSourceVolume.setPersonality(Volume.PersonalityTypes.SOURCE.toString());  srdfSourceVolume.setSrdfParent(new NamedURI(sourceVolume.getId(),"source-srdf"));  _dbClient.createObject(srdfSourceVolume);  Volume srdfTargetVolume=new Volume();  URI srdfTargetVolumeURI=URIUtil.createId(Volume.class);  volumeAccessStateLinkStatusURIs.add(srdfTargetVolumeURI);  srdfTargetVolume.setId(srdfTargetVolumeURI);  srdfTargetVolume.setLabel("TARGET");  srdfTargetVolume.setPersonality(Volume.PersonalityTypes.TARGET.toString());  srdfTargetVolume.setSrdfParent(new NamedURI(targetVolume.getId(),"target-srdf"));  _dbClient.createObject(srdfTargetVolume);  Volume volume=new Volume();  URI volumeURI=URIUtil.createId(Volume.class);  volumeAccessStateLinkStatusURIs.add(volumeURI);  volume.setId(volumeURI);  volume.setLabel("NORMAL");  _dbClient.createObject(volume);}  }
class C{  public static CCSprite sprite(CCSpriteFrame spriteFrame){  return new CCSprite(spriteFrame);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:11.924 -0500",hash_original_method="B7940401E9D410C3E0007DD81BDA911F",hash_generated_method="A02E352C63788D84A841872A26CC26AC") public void bind(final Socket socket,final HttpParams params) throws IOException {  if (socket == null) {    throw new IllegalArgumentException("Socket may not be null");  }  if (params == null) {    throw new IllegalArgumentException("HTTP parameters may not be null");  }  assertNotOpen();  socket.setTcpNoDelay(HttpConnectionParams.getTcpNoDelay(params));  socket.setSoTimeout(HttpConnectionParams.getSoTimeout(params));  int linger=HttpConnectionParams.getLinger(params);  if (linger >= 0) {    socket.setSoLinger(linger > 0,linger);  }  this.socket=socket;  int buffersize=HttpConnectionParams.getSocketBufferSize(params);  this.inbuffer=new SocketInputBuffer(socket,buffersize,params);  this.outbuffer=new SocketOutputBuffer(socket,buffersize,params);  maxHeaderCount=params.getIntParameter(CoreConnectionPNames.MAX_HEADER_COUNT,-1);  maxLineLength=params.getIntParameter(CoreConnectionPNames.MAX_LINE_LENGTH,-1);  this.requestWriter=new HttpRequestWriter(outbuffer,null,params);  this.metrics=new HttpConnectionMetricsImpl(inbuffer.getMetrics(),outbuffer.getMetrics());  this.open=true;}  }
class C{  public String func(Character arg){  called=true;  actualValue=arg;  return "called";}  }
class C{  public Boolean isNestedHVSupported(){  return nestedHVSupported;}  }
class C{  protected <T extends Node>T pop(String location,FragmentBuilder builder,Class<T> cls,String uri){  if (builder == null) {    if (log.isLoggable(Level.WARNING)) {      log.warning("No fragment builder for this thread (" + Thread.currentThread() + ") - trying to pop node of type: "+ cls);    }    return null;  }  if (builder.getCurrentNode() == null) {    if (log.isLoggable(Level.FINEST)) {      log.finest("WARNING: No 'current node' for this thread (" + Thread.currentThread() + ") - trying to pop node of type: "+ cls);    }    return null;  }  processInContent(location,builder,-1);  processOutContent(location,builder,-1);  Node node=builder.popNode(cls,uri);  if (node != null) {    builder.finishNode(node);    return cls.cast(node);  }  if (log.isLoggable(Level.FINEST)) {    log.finest("Current node (type=" + builder.getCurrentNode().getClass() + ") does not match required cls="+ cls+ " and uri="+ uri+ " at location="+ location);  }  return null;}  }
class C{  public GeometryExtracter(Class clz,List comps){  this.clz=clz;  this.comps=comps;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DomPackage.LITERAL__VALUE:    return getValue();case DomPackage.LITERAL__NAME:  return getName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean allows(WebURL webURL){  if (config.isEnabled()) {    try {      URL url=new URL(webURL.getURL());      String host=getHost(url);      String path=url.getPath();      HostDirectives directives=host2directivesCache.get(host);      if ((directives != null) && directives.needsRefetch()) {synchronized (host2directivesCache) {          host2directivesCache.remove(host);          directives=null;        }      }      if (directives == null) {        directives=fetchDirectives(url);      }      return directives.allows(path);    } catch (    MalformedURLException e) {      logger.error("Bad URL in Robots.txt: " + webURL.getURL(),e);    }  }  return true;}  }
class C{  public static <V>boolean isEmpty(V[] sourceArray){  return (sourceArray == null || sourceArray.length == 0);}  }
class C{  public void videoPlayer(NativeAppDriver driver,String fullscreenButton,String lmsButton,String settingsButton,String rewindButton,String seekBar,String playPauseButton,String videoPlayerId,boolean downloaded,boolean isAndroid) throws InterruptedException {  if (!downloaded) {    driver.insertWait(settingsButton);  }  Thread.sleep(3500);  driver.clickElementById(videoPlayerId);  driver.verifyElementPresentById(settingsButton);  Thread.sleep(3500);  driver.clickElementById(videoPlayerId);  driver.verifyElementPresentById(rewindButton);  Thread.sleep(3500);  driver.clickElementById(videoPlayerId);  driver.verifyElementPresentById(lmsButton);  Thread.sleep(3500);  driver.clickElementById(videoPlayerId);  driver.verifyElementPresentById(playPauseButton);  Thread.sleep(3500);  driver.clickElementById(videoPlayerId);  driver.verifyElementPresentById(fullscreenButton);  Thread.sleep(3500);  if (isAndroid) {    driver.clickElementById(videoPlayerId);    driver.clickElementById(fullscreenButton);    driver.clickElementById(videoPlayerId);    driver.verifyElementPresentById(rewindButton);    driver.verifyElementPresentById(lmsButton);    driver.verifyElementPresentById(playPauseButton);    driver.clickElementById(videoPlayerId);    driver.clickElementById(fullscreenButton);  }}  }
class C{  public void writeAnyString(String s) throws IOException {  if (s == null) {    this.writeInt(-1);  } else {    this.writeInt(s.length());    this.writeString(s);  }}  }
class C{  public @Test final void testRemoveUserNegative(){  Role role=new Role(TEST_ROLE);  thrown.expect(IllegalArgumentException.class);  role.removeUser(null);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (modifier_1: ");  result.append(modifier_1);  result.append(", arrow_1: ");  result.append(arrow_1);  result.append(')');  return result.toString();}  }
class C{  private E advance(){  lastRet=nextNode;  E x=nextItem;  Node<E> pred, p;  if (nextNode == null) {    p=first();    pred=null;  } else {    pred=nextNode;    p=succ(nextNode);  }  for (; ; ) {    if (p == null) {      nextNode=null;      nextItem=null;      return x;    }    E item=p.item;    if (item != null) {      nextNode=p;      nextItem=item;      return x;    } else {      Node<E> next=succ(p);      if (pred != null && next != null)       pred.casNext(p,next);      p=next;    }  }}  }
class C{  public CmplExpr newCmplExpr(Value op1,Value op2){  return new JCmplExpr(op1,op2);}  }
class C{  public boolean isShowGridY(){  return mShowGridY;}  }
class C{  static void withRandom(Consumer<Random> cons){  long seed=ThreadLocalRandom.current().nextLong();  withRandom(seed,cons);}  }
class C{  void mult(int factor){  mult(BigInteger.valueOf(factor));}  }
class C{  public boolean isSet(final OPTION option){  return options == null ? false : options.contains(option);}  }
class C{  public static MatrixObject matmult(ExecutionContext ec,MatrixObject left1,MatrixObject right1,String outputName,boolean isLeftTransposed1,boolean isRightTransposed1) throws DMLRuntimeException {  if (!left1.getGPUObject().isAllocated() || !right1.getGPUObject().isAllocated())   throw new DMLRuntimeException("One of input is not allocated:" + left1.getGPUObject().isAllocated() + " "+ right1.getGPUObject().isAllocated());  boolean bothDense=!left1.getGPUObject().isInSparseFormat() && !right1.getGPUObject().isInSparseFormat();  boolean bothSparse=left1.getGPUObject().isInSparseFormat() && right1.getGPUObject().isInSparseFormat();  MatrixObject output=ec.getMatrixObject(outputName);  if (bothDense) {    ec.getDenseMatrixOutputForGPUInstruction(outputName);    denseDenseMatmult(output,left1,right1,isLeftTransposed1,isRightTransposed1);  } else   if (bothSparse) {    ec.allocateGPUMatrixObject(outputName);    bothSparseMatmult(output,left1,right1,isLeftTransposed1,isRightTransposed1);  } else {    ec.allocateGPUMatrixObject(outputName);    eitherSparseMatmult(output,left1,right1,isLeftTransposed1,isRightTransposed1);  }  return output;}  }
class C{  @DSComment("Data structure only") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:01.381 -0500",hash_original_method="8588CDCF553966E03782186D08715F65",hash_generated_method="61D93F6C69B04716C494CCB5945DB85B") public boolean hasAltitude(){  return mHasAltitude;}  }
class C{  public JobBuilder requestRecovery(){  this.shouldRecover=true;  return this;}  }
class C{  public boolean containsKey(Object key){  processQueue();  return hash.containsKey(key);}  }
class C{  public void build(String code){  try {    result.put(resources.getString(R.string.intent_extra_status),resources.getString(R.string.shared_pref_default_status));    result.put(resources.getString(R.string.intent_extra_code),code);    operationListResult.put(result);  } catch (  JSONException e) {    Log.e(TAG,"Invalid JSON format." + e.toString());  }}  }
