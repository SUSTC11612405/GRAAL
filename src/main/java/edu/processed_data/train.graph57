class C{  public synchronized Object[] toArray(Object[] a){  if (a.length < elementCount) {    a=(Object[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),elementCount);  }  System.arraycopy(elementData,0,a,0,elementCount);  if (a.length > elementCount) {    a[elementCount]=null;  }  return a;}  }
class C{  private void calculateCovariance(){  double sumValues=0, sumConds=0;  for (int i=0; i < m_Values.size(); i++) {    sumValues+=m_Values.elementAt(i).doubleValue() * m_Weights.elementAt(i).doubleValue();    sumConds+=m_CondValues.elementAt(i).doubleValue() * m_Weights.elementAt(i).doubleValue();  }  m_ValueMean=sumValues / m_SumOfWeights;  m_CondMean=sumConds / m_SumOfWeights;  double c00=0, c01=0, c10=0, c11=0;  for (int i=0; i < m_Values.size(); i++) {    double x=m_Values.elementAt(i).doubleValue();    double y=m_CondValues.elementAt(i).doubleValue();    double weight=m_Weights.elementAt(i).doubleValue();    c00+=(x - m_ValueMean) * (x - m_ValueMean) * weight;    c01+=(x - m_ValueMean) * (y - m_CondMean) * weight;    c11+=(y - m_CondMean) * (y - m_CondMean) * weight;  }  c00/=(m_SumOfWeights - 1.0);  c01/=(m_SumOfWeights - 1.0);  c10=c01;  c11/=(m_SumOfWeights - 1.0);  m_Covariance=new Matrix(2,2);  m_Covariance.set(0,0,c00);  m_Covariance.set(0,1,c01);  m_Covariance.set(1,0,c10);  m_Covariance.set(1,1,c11);}  }
class C{  @Ignore @Test public void testFire(){  final SpeakerNPC npc=SpeakerNPCTestHelper.createSpeakerNPC();  npc.setName("TestNPC");  EventRaiser raiser=new EventRaiser(npc);  new NPCEmoteAction("hugs").fire(PlayerTestHelper.createPlayer("player"),ConversationParser.parse("!me hugs TestNPC"),raiser);  new NPCEmoteAction("hugs").fire(PlayerTestHelper.createPlayer("player"),ConversationParser.parse("!me killing TestNPC"),raiser);  new NPCEmoteAction("hugs").fire(PlayerTestHelper.createPlayer("player"),ConversationParser.parse("I killing TestNPC"),raiser);  new NPCEmoteAction("hugs").fire(PlayerTestHelper.createPlayer("player"),ConversationParser.parse("!me hugs Monogenes"),raiser);  new NPCEmoteAction("hugs").fire(PlayerTestHelper.createPlayer("player"),ConversationParser.parse("!me hugs "),raiser);}  }
class C{  public void putAsString(String key,Integer value){  String strValue=value.toString();  super.put(key,strValue);}  }
class C{  public static boolean useSetModeToHackSpeaker(){  return (isSamsung() && !isSamsungGalaxyMini() && getSDKVersion() <= 7) || sBuildModel.equalsIgnoreCase("blade") || sBuildModel.equalsIgnoreCase("htc_supersonic")|| sBuildModel.equalsIgnoreCase("U8110")|| sBuildModel.equalsIgnoreCase("U8150");}  }
class C{  int hashBlockLen(){  return macAlg.hashBlockSize;}  }
class C{  public void beginObject() throws IOException {  int p=peeked;  if (p == PEEKED_NONE) {    p=doPeek();  }  if (p == PEEKED_BEGIN_OBJECT) {    push(JsonScope.EMPTY_OBJECT);    peeked=PEEKED_NONE;  } else {    throw new IllegalStateException("Expected BEGIN_OBJECT but was " + peek() + locationString());  }}  }
class C{  public boolean isCardDismissible(String tag){  return mDismissibleCards.contains(tag);}  }
class C{  public static Typeface freedom(Context context){  sFreedom=getFontFromRes(R.raw.freedom,context);  return sFreedom;}  }
class C{  private void drawYTickMarks(Graphics gc,ArrayList<Integer> tickLabelPositions,LabelSide tickLabelSide,int width,int height){  updateMinorTickParas();  gc.setLineStyle(SWTConstants.LINE_SOLID);  int x=0;  int y=0;  if (scale.isLogScaleEnabled()) {    ArrayList<Boolean> tickLabelVisibilities=scale.getScaleTickLabels().getTickVisibilities();    for (int i=0; i < tickLabelPositions.size(); i++) {      int tickLength=0;      if (tickLabelVisibilities.get(i))       tickLength=MAJOR_TICK_LENGTH; else       tickLength=MINOR_TICK_LENGTH;      if (tickLabelSide == LabelSide.Primary) {        x=width - 1 - LINE_WIDTH- tickLength;      } else {        x=LINE_WIDTH;      }      y=height - tickLabelPositions.get(i);      if (tickLabelVisibilities.get(i) || scale.isMinorTicksVisible())       gc.drawLine(x,y,x + tickLength,y);    }  } else {    for (int i=0; i < tickLabelPositions.size(); i++) {      if (tickLabelSide == LabelSide.Primary) {        x=width - 1 - LINE_WIDTH- MAJOR_TICK_LENGTH;      } else {        x=LINE_WIDTH;      }      y=height - tickLabelPositions.get(i);      gc.drawLine(x,y,x + MAJOR_TICK_LENGTH,y);      if (scale.isMinorTicksVisible()) {        if (i > 0) {          if (i == 1 && (tickLabelPositions.get(1) - tickLabelPositions.get(0)) < scale.getScaleTickLabels().getGridStepInPixel()) {            y=tickLabelPositions.get(1);            while ((y - tickLabelPositions.get(0)) > minorGridStepInPixel + 3) {              y=y - minorGridStepInPixel;              drawYMinorTicks(gc,tickLabelSide,x,height - y);            }          } else           if (i == tickLabelPositions.size() - 1 && (tickLabelPositions.get(i) - tickLabelPositions.get(i - 1)) < scale.getScaleTickLabels().getGridStepInPixel()) {            y=tickLabelPositions.get(i - 1);            while ((tickLabelPositions.get(i) - y) > minorGridStepInPixel + 3) {              y=y + minorGridStepInPixel;              drawYMinorTicks(gc,tickLabelSide,x,height - y);            }          } else {            for (int j=0; j < minorTicksNumber; j++) {              y=height - tickLabelPositions.get(i - 1) - (tickLabelPositions.get(i) - tickLabelPositions.get(i - 1)) * j / minorTicksNumber;              drawYMinorTicks(gc,tickLabelSide,x,y);            }          }        }      }    }  }  if (scale.isScaleLineVisible()) {    if (tickLabelSide == LabelSide.Primary) {      gc.drawLine(width - 1,scale.getMargin(),width - 1,height - scale.getMargin());    } else {      gc.drawLine(0,scale.getMargin(),0,height - scale.getMargin());    }  }}  }
class C{  public void responseReceived(boolean hasPermissions){synchronized (sInstance) {    mHasPermissions=hasPermissions;    super.notify();  }}  }
class C{  private void releaseServicesForChild(BCSSChild bcssChild,boolean delegatedServices){  if (bcssChild.serviceRecords == null || bcssChild.serviceRecords.isEmpty()) {    return;  }synchronized (bcssChild.child) {    Object records[]=bcssChild.serviceRecords.toArray();    for (int i=0; i < records.length; i++) {      ServiceRecord rec=(ServiceRecord)records[i];      if (delegatedServices) {        if (rec.isDelegate) {          releaseServiceWithoutCheck(rec.child,bcssChild,rec.requestor,rec.service,true);        }      } else {        releaseServiceWithoutCheck(rec.child,bcssChild,rec.requestor,rec.service,false);      }    }  }}  }
class C{  public T caseInternalScope(InternalScope object){  return null;}  }
class C{  @Override public SparseGraph readGraph(String file){  return super.readGraph(file);}  }
class C{  public BelowRegionParser(Element element) throws RegionException {  String xAxisValue=element.getAttributeValue("x");  if (xAxisValue != null && !Numbers.isDecimal(xAxisValue)) {    throw new InvalidRegionAttributeException("x",element);  }  String yAxisValue=element.getAttributeValue("y");  if (yAxisValue != null && !Numbers.isDecimal(yAxisValue)) {    throw new InvalidRegionAttributeException("y",element);  }  String zAxisValue=element.getAttributeValue("z");  if (zAxisValue != null && !Numbers.isDecimal(zAxisValue)) {    throw new InvalidRegionAttributeException("z",element);  }  max=new Vector(Numbers.parseDouble(xAxisValue,Double.POSITIVE_INFINITY),Numbers.parseDouble(yAxisValue,Double.POSITIVE_INFINITY),Numbers.parseDouble(zAxisValue,Double.POSITIVE_INFINITY));}  }
class C{  public static BiomeDictionary.Type fetchBiomeType(String name) throws BiomeTypeNotFound {  final String upcasedName=name.toUpperCase();  for (  BiomeDictionary.Type type : BiomeDictionary.Type.values()) {    if (type.name().equals(upcasedName))     return type;  }  throw new BiomeTypeNotFound("Biome type '" + name + "' not found.");}  }
class C{  @Override public String toString(){  return getName() + "(" + getClass().getName()+ ")";}  }
class C{  private int calculateSpanCount(){  int avatarSize=getResources().getDimensionPixelSize(R.dimen.size_fab);  int avatarPadding=getResources().getDimensionPixelSize(R.dimen.spacing_double);  return mAvatarGrid.getWidth() / (avatarSize + avatarPadding);}  }
class C{  public String maxInstNumTipText(){  return "The upper boundary for instances per cluster.";}  }
class C{  public synchronized void addTextListener(TextListener cl){  m_textListeners.addElement(cl);}  }
class C{  public boolean isCompositeName(){  return isCompositeName;}  }
class C{  public RequestCreator error(int errorResId){  if (errorResId == 0) {    throw new IllegalArgumentException("Error image resource invalid.");  }  if (errorDrawable != null) {    throw new IllegalStateException("Error image already set.");  }  this.errorResId=errorResId;  return this;}  }
class C{  public void testUnsupportedCallbackException06(){  myCallback c=new myCallback();  assertNotNull("Callback object is null",c);  UnsupportedCallbackException ucE;  for (int i=0; i < msgs.length; i++) {    ucE=new UnsupportedCallbackException(c,msgs[i]);    assertEquals("getMessage() must return: ".concat(msgs[i]),ucE.getMessage(),msgs[i]);    assertEquals("Incorrect callback object was returned",c,ucE.getCallback());  }}  }
class C{  public static void prepareOut(Object[] newOutArr,ByteBuffer[] byteBufferArr,Object[] out,int dimCount){  byte[] nonDictionaryCols=RemoveDictionaryUtil.packByteBufferIntoSingleByteArray(byteBufferArr);  Integer[] dimArray=new Integer[dimCount];  for (int i=0; i < dimCount; i++) {    dimArray[i]=(Integer)out[i];  }  Object[] measureArray=new Object[out.length - dimCount];  int index=0;  for (int j=dimCount; j < out.length; j++) {    measureArray[index++]=out[j];  }  newOutArr[IgnoreDictionary.DIMENSION_INDEX_IN_ROW.getIndex()]=dimArray;  newOutArr[IgnoreDictionary.BYTE_ARRAY_INDEX_IN_ROW.getIndex()]=nonDictionaryCols;  newOutArr[IgnoreDictionary.MEASURES_INDEX_IN_ROW.getIndex()]=measureArray;}  }
class C{  @Override public String toString(){  return "Speech data (size: " + data.length / 1000 + " kb.)";}  }
class C{  public ClockPane(){  setCurrentTime();  animation=new Timeline(new KeyFrame(Duration.millis(1000),null));  animation.setCycleCount(Timeline.INDEFINITE);  animation.play();}  }
class C{  private void applyConfig(){  this.components.applyConfig(config);switch (config.getConfigType()) {case DEFAULT:    break;case IMPORT:  this.archives.applyConfiguration(config);}repaint();}  }
class C{  public void testCertPathValidator10() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  CertPathValidator certPV;  for (int i=0; i < invalidValues.length; i++) {    certPV=CertPathValidator.getInstance(validValues[i],defaultProvider);    assertEquals("Incorrect algorithm",certPV.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider name",certPV.getProvider(),defaultProvider);  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder(this.getClass().getName());  sb.append(System.getProperty("line.separator"));  sb.append("prefix: ");  sb.append(prefix);  sb.append(System.getProperty("line.separator"));  sb.append("namespace: ");  sb.append(namespace);  sb.append(System.getProperty("line.separator"));  return sb.toString();}  }
class C{  @Subscribe public void startBrother(StartBrotherEvent event){  start(event.targetFragment);}  }
class C{  public void toEPL(StringWriter writer){  writer.append("create");  if (typeDefinition != null) {    typeDefinition.write(writer);  }  writer.append(" schema ");  writer.append(schemaName);  writer.append(" as ");  if ((types != null) && (!types.isEmpty())) {    String delimiter="";    for (    String type : types) {      writer.append(delimiter);      writer.append(type);      delimiter=", ";    }  } else {    writer.append("(");    String delimiter="";    for (    SchemaColumnDesc col : columns) {      writer.append(delimiter);      col.toEPL(writer);      delimiter=", ";    }    writer.append(")");  }  if ((inherits != null) && (!inherits.isEmpty())) {    writer.append(" inherits ");    String delimiter="";    for (    String name : inherits) {      writer.append(delimiter);      writer.append(name);      delimiter=", ";    }  }  if (startTimestampPropertyName != null) {    writer.append(" starttimestamp ");    writer.append(startTimestampPropertyName);  }  if (endTimestampPropertyName != null) {    writer.append(" endtimestamp ");    writer.append(endTimestampPropertyName);  }  if ((copyFrom != null) && (!copyFrom.isEmpty())) {    writer.append(" copyFrom ");    String delimiter="";    for (    String name : copyFrom) {      writer.append(delimiter);      writer.append(name);      delimiter=", ";    }  }}  }
class C{  public boolean equals(Object other){  if (this == other)   return true;  if (other instanceof Address) {    final Address o=(Address)other;    return this.getURI().equals(o.getURI());  }  return false;}  }
class C{  public void testFloatMissingFacet() throws Exception {  checkSortMissingFacet("floatdv","-1.3","4.2");}  }
class C{  public static DateTime fromMillis(long value){  return new DateTime(value * 10000 + OffsetToGregorianCalendarZero);}  }
class C{  @Override public int hashCode(){  int hash=1;  hash=hash * 31 + (null == methodSignature ? 0 : methodSignature.hashCode());  hash=hash * 31 + (null == methodName ? 0 : methodName.hashCode());  hash=hash * 31 + (null == classElement ? 0 : classElement.hashCode());  return hash;}  }
class C{  public static <T>List<List<T>> shuffle(int samples,Collection<T> workingSet){  List<List<T>> sets=newArrayListWithCapacity(samples);  for (int i=0; i < samples; i++) {    List<T> set=newArrayList(workingSet);    Collections.shuffle(set);    sets.add(set);  }  return sets;}  }
class C{  public static MaxCore storedLocally(File storedResults){  return new MaxCore(storedResults);}  }
class C{  public void execute(){  boolean rKey=getParams().getBoolean("BPCrDown",false);  BpcAlgorithmType algorithm=(BpcAlgorithmType)getParams().get("bpcAlgorithmthmType",BpcAlgorithmType.FIND_ONE_FACTOR_CLUSTERS);  Graph searchGraph;  if (rKey) {    Washdown washdown;    Object source=getData();    if (source instanceof DataSet) {      washdown=new Washdown((DataSet)source,getParams().getDouble("alpha",0.001));    } else {      washdown=new Washdown((CovarianceMatrix)source,getParams().getDouble("alpha",0.001));    }    searchGraph=washdown.search();  } else {    TestType tetradTestType=(TestType)getParams().get("tetradTestType",TestType.TETRAD_WISHART);    if (algorithm == BpcAlgorithmType.TETRAD_PURIFY_WASHDOWN) {      BpcTetradPurifyWashdown bpc;      Object source=getData();      if (source instanceof DataSet) {        bpc=new BpcTetradPurifyWashdown((DataSet)source,tetradTestType,getParams().getDouble("alpha",0.001));      } else {        bpc=new BpcTetradPurifyWashdown((ICovarianceMatrix)source,tetradTestType,getParams().getDouble("alpha",0.001));      }      searchGraph=bpc.search();    } else     if (algorithm == BpcAlgorithmType.BUILD_PURE_CLUSTERS) {      BuildPureClusters bpc;      DataModel source=getData();      TestType testType=(TestType)getParams().get("tetradTestType",TestType.TETRAD_WISHART);      TestType purifyType=TestType.TETRAD_BASED;      if (source instanceof ICovarianceMatrix) {        bpc=new BuildPureClusters((ICovarianceMatrix)source,getParams().getDouble("alpha",0.001),testType,purifyType);      } else       if (source instanceof DataSet) {        bpc=new BuildPureClusters((DataSet)source,getParams().getDouble("alpha",0.001),testType,purifyType);      } else {        throw new IllegalArgumentException();      }      searchGraph=bpc.search();    } else {      throw new IllegalStateException();    }  }  if (semIm != null) {    List<List<Node>> partition=MimUtils.convertToClusters2(searchGraph);    List<String> variableNames=ReidentifyVariables.reidentifyVariables2(partition,trueGraph,(DataSet)getData());    rename(searchGraph,partition,variableNames);  } else   if (trueGraph != null) {    List<List<Node>> partition=MimUtils.convertToClusters2(searchGraph);    List<String> variableNames=ReidentifyVariables.reidentifyVariables1(partition,trueGraph);    rename(searchGraph,partition,variableNames);  }  System.out.println("Search Graph " + searchGraph);  try {    Graph graph=new MarshalledObject<>(searchGraph).get();    GraphUtils.circleLayout(graph,200,200,150);    GraphUtils.fruchtermanReingoldLayout(graph);    setResultGraph(graph);    setClusters(MimUtils.convertToClusters(graph,getData().getVariables()));  } catch (  Exception e) {    e.printStackTrace();    throw new RuntimeException(e);  }}  }
class C{  public ActivityChooserView(Context context){  this(context,null);}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.ASSERTION;}  }
class C{  protected void paintBorder(Graphics g){  Border b=getBorder();  if (b != null) {    g.setColor(getStyle().getFgColor());    b.paint(g,this);  }}  }
class C{  public Set<K> keySet(){  return counterMap.keySet();}  }
class C{  public SupportCubicLineChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer,float smoothness){  super(dataset,renderer);  firstMultiplier=smoothness;  secondMultiplier=1 - firstMultiplier;}  }
class C{  public void logSystemInfo(){  log(INFO,"SystemInfo:\n" + new SystemInfo().toString());}  }
class C{  public Complex evaluate(Complex c){  Complex retval=new Complex(a[order]);  for (int i=order - 1; i >= 0; i--) {    retval=retval.times(c).plus(a[i]);  }  return retval;}  }
class C{  public boolean remove(Interval itemInterval,Object item){  Interval insertInterval=ensureExtent(itemInterval,minExtent);  return root.remove(insertInterval,item);}  }
class C{  @Override public int[] createPartition(double[] ratio,int size){  Attribute label=exampleSet.getAttributes().getLabel();  if (size != exampleSet.size()) {    throw new RuntimeException("Cannot create stratified Partition: given size and size of the example set must be equal!");  }  if (label == null) {    throw new RuntimeException("Cannot create stratified Partition: example set must have a label!");  }  if (!label.isNominal()) {    throw new RuntimeException("Cannot create stratified Partition: label of example set must be nominal!");  }  double firstValue=ratio[0];  for (int i=1; i < ratio.length; i++) {    if (ratio[i] != firstValue) {      LogService.getRoot().log(Level.FINE,"com.rapidminer.example.set.StratifiedPartitionBuilder.not_all_ratio_values_are_equal");      return createNonEqualPartition(ratio,size,label);    }  }  LogService.getRoot().log(Level.FINE,"com.rapidminer.example.set.StratifiedPartitionBuilder.all_ratio_values_are_equal");  return createEqualPartition(ratio,size,label);}  }
class C{  public static SoftwareAttribute createSoftwareAttribute(byte software[]){  SoftwareAttribute attribute=new SoftwareAttribute();  attribute.setSoftware(software);  return attribute;}  }
class C{  public SourceRuntimeEnvironment(final String processingNodeId,final String pipelineId,final Source source,final StreamingMessageQueueProducer queueProducer) throws RequiredInputMissingException {  this(processingNodeId,pipelineId,source,queueProducer,Executors.newCachedThreadPool());  this.localExecutorService=true;}  }
class C{  public void allowUnsignedChanges(){  allowsUnsignedChanges=true;}  }
class C{  @Override public int[] executeBatch() throws SQLException {  try {    debugCodeCall("executeBatch");    checkClosed();    try {      if (batchCommands == null) {        batchCommands=New.arrayList();      }      int size=batchCommands.size();      int[] result=new int[size];      boolean error=false;      SQLException next=null;      for (int i=0; i < size; i++) {        String sql=batchCommands.get(i);        try {          result[i]=executeUpdateInternal(sql);        } catch (        Exception re) {          SQLException e=logAndConvert(re);          if (next == null) {            next=e;          } else {            e.setNextException(next);            next=e;          }          result[i]=Statement.EXECUTE_FAILED;          error=true;        }      }      batchCommands=null;      if (error) {        throw new JdbcBatchUpdateException(next,result);      }      return result;    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public GPUImage3x3ConvolutionFilter(){  this(new float[]{0.0f,0.0f,0.0f,0.0f,1.0f,0.0f,0.0f,0.0f,0.0f});}  }
class C{  void removeMapping(V delegate){  vMapping.remove(delegate);}  }
class C{  public JStackView(final IStackModel model){  super(new BorderLayout());  Preconditions.checkNotNull(model,"Error: Model argument can not be null");  m_model=model;  m_panel=new JStackPanel(model);  add(m_panel);  setFocusable(true);  initScrollbar();  setPreferredSize(new Dimension(400,400));  m_model.addListener(m_listener);  addComponentListener(m_listener);  addMouseWheelListener(new InternalMouseListener());}  }
class C{  public void addToplevelCluster(Cluster<M> clus){  toplevelclusters.add(clus);  hierarchy.add(clus);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.CLASS_DEFINITION___NAME_1:    setName_1(NAME_1_EDEFAULT);  return;case UmplePackage.CLASS_DEFINITION___CLASS_CONTENT_1:getClassContent_1().clear();return;}super.eUnset(featureID);}  }
class C{  public static void openOpmlFileChooser(Fragment fragment){  Intent intent=new Intent(Intent.ACTION_OPEN_DOCUMENT);  intent.addCategory(Intent.CATEGORY_OPENABLE);  intent.setType("text/*");  fragment.startActivityForResult(intent,REQUEST_CODE_OPEN_OPML_FILE);}  }
class C{  protected double calculateVBF(long rto){  return config.getFloat(NetworkConfig.Keys.ACK_TIMEOUT_SCALE);}  }
class C{  public void sortInstances(int columnIndex,boolean ascending){  ((DataTableModel)getModel()).sortInstances(columnIndex,ascending);}  }
class C{  public void changed(){  changed(null);}  }
class C{  public MBeanDumper(MBeanServerConnection server) throws IOException {  setMBeanServerConnection(server);  try {    objname=new ObjectName(ManagementFactory.THREAD_MXBEAN_NAME);  } catch (  MalformedObjectNameException e) {    InternalError ie=new InternalError(e.getMessage());    ie.initCause(e);    throw ie;  }  parseMBeanInfo();}  }
class C{  private void optimizeBasicBlockHIR(IR ir,BasicBlock bb){  AvExCache cache=new AvExCache(ir.options,true);  for (Instruction inst=bb.firstRealInstruction(), sentinel=bb.lastInstruction(), nextInstr=null; inst != sentinel; inst=nextInstr) {    nextInstr=inst.nextInstructionInCodeOrder();    if (isLoadInstruction(inst)) {      loadHelper(ir,cache,inst);    } else     if (isStoreInstruction(inst)) {      storeHelper(cache,inst);    } else     if (isExpression(inst)) {      expressionHelper(ir,cache,inst);    } else     if (isCheck(inst)) {      checkHelper(ir,cache,inst);    } else     if (isTypeCheck(inst)) {      typeCheckHelper(ir,cache,inst);    }    cache.eliminate(inst);    if (inst.isNonPureCall()) {      cache.invalidateAllLoads();    } else     if (isSynchronizing(inst) || inst.isDynamicLinkingPoint()) {      cache.invalidateAllLoads();    }  }}  }
class C{  public boolean updateSensorConfig(StringConstraintSensorConfig sensorConfig){  if (Objects.equals(this.sensorConfig.getClassName(),sensorConfig.getClassName())) {    this.sensorConfig=sensorConfig;    return true;  }  return false;}  }
class C{  public void makeModel() throws IOException, InterruptedException {  int folder=1;  HashSet<CFD> seenCFDs=new HashSet<CFD>();  for (  CFD cfd : CFDs) {    if (seenCFDs.contains(cfd))     continue;    System.out.println("\nMaking model..");    TreeSet<Integer> targets=new TreeSet<Integer>();    for (    SimpleImmutableEntry<Integer,String> lhs : cfd.getPremise()) {      targets.add(lhs.getKey());    }    for (    CFD otherCFDsWithSamePremise : CFDs) {      if (otherCFDsWithSamePremise.equals(cfd))       continue;      TreeSet<Integer> otherTargets=new TreeSet<Integer>();      for (      SimpleImmutableEntry<Integer,String> lhs : otherCFDsWithSamePremise.getPremise()) {        otherTargets.add(lhs.getKey());      }      if (otherTargets.equals(targets)) {        seenCFDs.add(otherCFDsWithSamePremise);      }    }    for (    CFD seenCFD : seenCFDs) {      targets.add(seenCFD.getRHS().getKey());    }    targets.add(cfd.getRHS().getKey());    Util.saveArff(i,"exp/" + folder + "/train.arff");    Util.saveArff(violated,"exp/" + folder + "/test.arff");    Util.makeSettingFile("exp/" + folder + "/train.arff","exp/" + folder + "/test.arff",targets,HeuristicType.Gain,"exp/" + folder + "/");    System.out.println("building...");    long start=System.nanoTime();    Process proc=Runtime.getRuntime().exec("java -jar lib/Clus.jar " + "exp/" + folder + "/setting.s");    BufferedReader input=new BufferedReader(new InputStreamReader(proc.getInputStream()));    String line;    while ((line=input.readLine()) != null) {      System.out.println(line);    }    long elapsedTime=System.nanoTime() - start;    System.out.println("Elapsed Training Time: " + elapsedTime);    input.close();    folder++;    seenCFDs.add(cfd);  }  CFDsMergedSize=folder - 1;}  }
class C{  public void addMethodNoBidirectionalUpdate(MethodType type){  if (methods == null) {    methods=new MethodTypeSet();  }  methods.add(type);}  }
class C{  public void addAction(Action action){  getActions().add(action);}  }
class C{  protected Paint buildGradient(Element paintElement,Element paintedElement,GraphicsNode paintedNode,MultipleGradientPaint.CycleMethodEnum spreadMethod,MultipleGradientPaint.ColorSpaceEnum colorSpace,AffineTransform transform,Color[] colors,float[] offsets,BridgeContext ctx){  String cxStr=SVGUtilities.getChainableAttributeNS(paintElement,null,SVG_CX_ATTRIBUTE,ctx);  if (cxStr.length() == 0) {    cxStr=SVG_RADIAL_GRADIENT_CX_DEFAULT_VALUE;  }  String cyStr=SVGUtilities.getChainableAttributeNS(paintElement,null,SVG_CY_ATTRIBUTE,ctx);  if (cyStr.length() == 0) {    cyStr=SVG_RADIAL_GRADIENT_CY_DEFAULT_VALUE;  }  String rStr=SVGUtilities.getChainableAttributeNS(paintElement,null,SVG_R_ATTRIBUTE,ctx);  if (rStr.length() == 0) {    rStr=SVG_RADIAL_GRADIENT_R_DEFAULT_VALUE;  }  String fxStr=SVGUtilities.getChainableAttributeNS(paintElement,null,SVG_FX_ATTRIBUTE,ctx);  if (fxStr.length() == 0) {    fxStr=cxStr;  }  String fyStr=SVGUtilities.getChainableAttributeNS(paintElement,null,SVG_FY_ATTRIBUTE,ctx);  if (fyStr.length() == 0) {    fyStr=cyStr;  }  short coordSystemType;  String s=SVGUtilities.getChainableAttributeNS(paintElement,null,SVG_GRADIENT_UNITS_ATTRIBUTE,ctx);  if (s.length() == 0) {    coordSystemType=SVGUtilities.OBJECT_BOUNDING_BOX;  } else {    coordSystemType=SVGUtilities.parseCoordinateSystem(paintElement,SVG_GRADIENT_UNITS_ATTRIBUTE,s,ctx);  }  SVGContext bridge=BridgeContext.getSVGContext(paintedElement);  if (coordSystemType == SVGUtilities.OBJECT_BOUNDING_BOX && bridge instanceof AbstractGraphicsNodeBridge) {    Rectangle2D bbox=((AbstractGraphicsNodeBridge)bridge).getBBox();    if (bbox != null && bbox.getWidth() == 0 || bbox.getHeight() == 0) {      return null;    }  }  if (coordSystemType == SVGUtilities.OBJECT_BOUNDING_BOX) {    transform=SVGUtilities.toObjectBBox(transform,paintedNode);  }  UnitProcessor.Context uctx=UnitProcessor.createContext(ctx,paintElement);  float r=SVGUtilities.convertLength(rStr,SVG_R_ATTRIBUTE,coordSystemType,uctx);  if (r == 0) {    return colors[colors.length - 1];  } else {    Point2D c=SVGUtilities.convertPoint(cxStr,SVG_CX_ATTRIBUTE,cyStr,SVG_CY_ATTRIBUTE,coordSystemType,uctx);    Point2D f=SVGUtilities.convertPoint(fxStr,SVG_FX_ATTRIBUTE,fyStr,SVG_FY_ATTRIBUTE,coordSystemType,uctx);    return new RadialGradientPaint(c,r,f,offsets,colors,spreadMethod,RadialGradientPaint.SRGB,transform);  }}  }
class C{  public Session createNonXASession(final boolean transacted,final int acknowledgeMode) throws JMSException {  checkClosed();  return createSessionInternal(false,transacted,acknowledgeMode,ActiveMQConnection.TYPE_GENERIC_CONNECTION);}  }
class C{  protected void write(DataOutputStream stream) throws Exception {  stream.writeInt(value);}  }
class C{  @Override public byte[] serializeKey(final Object obj){  final IKeyBuilder keyBuilder=getKeyBuilder();  final byte[] a=keyBuilder.reset().append((String)obj).getKey();  return a;}  }
class C{  public void addExceptionHandler(int start,int end,int handler,int type){  tryblocks.add(start,end,handler,type);}  }
class C{  private double scoreTrackResult(SearchQuery query,Track track){  double score=1.0;  score*=getTitleBoost(query,track.getName(),track.getDescription(),track.getCategory());  TripStatistics statistics=track.getTripStatistics();  score*=getDistanceBoost(query,statistics.getMeanLatitude(),statistics.getMeanLongitude());  long meanTimestamp=(statistics.getStartTime() + statistics.getStopTime()) / 2L;  score*=getTimeBoost(query,meanTimestamp);  if (track.getId() == query.currentTrackId) {    score*=CURRENT_TRACK_DEMOTION;  }  return score;}  }
class C{  private boolean hasMultipleEnabledIMEsOrSubtypes(InputMethodManager imm,final boolean shouldIncludeAuxiliarySubtypes){  final List<InputMethodInfo> enabledImis=imm.getEnabledInputMethodList();  int filteredImisCount=0;  for (  InputMethodInfo imi : enabledImis) {    if (filteredImisCount > 1)     return true;    final List<InputMethodSubtype> subtypes=imm.getEnabledInputMethodSubtypeList(imi,true);    if (subtypes.isEmpty()) {      ++filteredImisCount;      continue;    }    int auxCount=0;    for (    InputMethodSubtype subtype : subtypes) {      if (subtype.isAuxiliary()) {        ++auxCount;      }    }    final int nonAuxCount=subtypes.size() - auxCount;    if (nonAuxCount > 0 || (shouldIncludeAuxiliarySubtypes && auxCount > 1)) {      ++filteredImisCount;      continue;    }  }  return filteredImisCount > 1 || imm.getEnabledInputMethodSubtypeList(null,false).size() > 1;}  }
class C{  private void updateBackup(){  for (  Configurable configurable : listOfConfigurables) {    Map<String,String> parameterMap=new HashMap<>();    for (    String key : configurable.getParameters().keySet()) {      if (configurable instanceof AbstractConfigurable) {        parameterMap.put(key,((AbstractConfigurable)configurable).getParameterAsXMLString(key));      } else {        parameterMap.put(key,configurable.getParameter(key));      }    }    originalParameters.put(configurable,new HashMap<>(parameterMap));    originalNames.put(configurable,configurable.getName());    originalPermittedUserGroups.put(configurable,ConfigurationManager.getInstance().getPermittedGroupsForConfigurable(configurable));  }}  }
class C{  protected void focusLost(){}  }
class C{  private void addTraceAndType(String name){  if (tracesType.get(name) == null) {    traces.add(createTrace(name,TraceType.REAL));    tracesType.put(name,TraceType.REAL);  } else {    traces.add(createTrace(name,tracesType.get(name)));  }}  }
class C{  public boolean isSetCursorResponse(){  return this.cursorResponse != null;}  }
class C{  private Object[] next() throws CarbonSortKeyAndGroupByException {  return getSortedRecordFromFile();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (declaredModifiers: ");  result.append(declaredModifiers);  result.append(')');  return result.toString();}  }
class C{  public synchronized void clear(){  this.credMap.clear();}  }
class C{  public void unpackStart(String line){  String detail=URLDecoder.decode(line);  detail=detail.substring(detail.indexOf("?"));  String tcStart=null;  if (detail.indexOf(" HTTP") != -1)   tcStart=detail.substring(1,detail.indexOf(" HTTP")); else   tcStart=detail.substring(1);  manageTimer(detail.substring(1));  startedCases.add(tcStart);  lastTestCaseStartTime=System.currentTimeMillis();  lastTestCaseStart=tcStart;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (evalBool(stack.pop())) {    Sage.putBoolean("miniclient/enable_cached_authentication",true);  } else {    Sage.putBoolean("miniclient/enable_cached_authentication",false);    Sage.removeNode("miniclient/cached_authentication");  }  return null;}  }
class C{  public boolean addBcc(String newBcc){  if (newBcc == null || newBcc.length() == 0)   return false;  InternetAddress ia=null;  try {    ia=new InternetAddress(newBcc,true);  } catch (  Exception e) {    log.log(Level.WARNING,newBcc + ": " + e.getMessage());    return false;  }  if (m_bcc == null)   m_bcc=new ArrayList<InternetAddress>();  m_bcc.add(ia);  return true;}  }
class C{  public short[][] multVects(short[] vector1,short[] vector2){  if (vector1.length != vector2.length) {    throw new RuntimeException("Multiplication is not possible!");  }  short rslt[][]=new short[vector1.length][vector2.length];  for (int i=0; i < vector1.length; i++) {    for (int j=0; j < vector2.length; j++) {      rslt[i][j]=GF2Field.multElem(vector1[i],vector2[j]);    }  }  return rslt;}  }
class C{  @Override public boolean renderAsNormalBlock(){  return false;}  }
class C{  public static String logical2physical(String logical){  logical=logical.toUpperCase();  for (  DictionaryEntry entry : loadFromPreferenceStore(DBPlugin.getDefault().getPreferenceStore())) {    logical=logical.replace(entry.logicalName,"_" + entry.physicalName + "_");  }  logical=logical.replaceAll("_+","_");  logical=logical.replaceAll("^_|_$","");  return logical;}  }
class C{  public E poll(long timeout,TimeUnit unit) throws InterruptedException {  long nanos=unit.toNanos(timeout);  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  try {    for (; ; ) {      E first=q.peek();      if (first == null) {        if (nanos <= 0)         return null; else         nanos=available.awaitNanos(nanos);      } else {        long delay=first.getDelay(NANOSECONDS);        if (delay <= 0)         return q.poll();        if (nanos <= 0)         return null;        first=null;        if (nanos < delay || leader != null)         nanos=available.awaitNanos(nanos); else {          Thread thisThread=Thread.currentThread();          leader=thisThread;          try {            long timeLeft=available.awaitNanos(delay);            nanos-=delay - timeLeft;          }  finally {            if (leader == thisThread)             leader=null;          }        }      }    }  }  finally {    if (leader == null && q.peek() != null)     available.signal();    lock.unlock();  }}  }
class C{  @Override public synchronized int size(){  return elementCount;}  }
class C{  public static MatrixBlock convertToMatrixBlock(FrameBlock frame) throws DMLRuntimeException {  int m=frame.getNumRows();  int n=frame.getNumColumns();  MatrixBlock mb=new MatrixBlock(m,n,false);  mb.allocateDenseBlock();  ValueType[] schema=frame.getSchema();  int dFreq=UtilFunctions.frequency(schema,ValueType.DOUBLE);  if (dFreq == schema.length) {    double[][] a=new double[n][];    double[] c=mb.getDenseBlock();    for (int j=0; j < n; j++)     a[j]=(double[])frame.getColumn(j);    int blocksizeIJ=16;    for (int bi=0; bi < m; bi+=blocksizeIJ)     for (int bj=0; bj < n; bj+=blocksizeIJ) {      int bimin=Math.min(bi + blocksizeIJ,m);      int bjmin=Math.min(bj + blocksizeIJ,n);      for (int i=bi, aix=bi * n; i < bimin; i++, aix+=n)       for (int j=bj; j < bjmin; j++)       c[aix + j]=a[j][i];    }  } else {    for (int i=0; i < frame.getNumRows(); i++)     for (int j=0; j < frame.getNumColumns(); j++) {      mb.appendValue(i,j,UtilFunctions.objectToDouble(schema[j],frame.get(i,j)));    }  }  mb.examSparsity();  return mb;}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,int nbatches,int ncycles) throws Exception {  for (int i=0; i < nbatches; i++) {    sbuf.reset();    for (int j=0; j < ncycles; j++) {      oout.writeDouble(0.0);    }    oout.flush();    for (int j=0; j < ncycles; j++) {      oin.readDouble();    }  }}  }
class C{  public List<TypedRelatedResourceRep> listResources(URI id){  ResourceList response=client.get(ResourceList.class,getIdUrl() + "/resources",id);  return defaultList(response.getResources());}  }
class C{  @DatabindingMethod public void onTextClick(View v,Integer position,ImageInfo item,AdapterManager<?> am){  mToaster.show("on text click: position = " + position + " ,item = "+ item);}  }
class C{  public ReflectivePropertyEditor(final Object toEdit){  this.toEdit=toEdit;  this.add(itemPanel);  initPanel();}  }
class C{  public static boolean isDrmMimeType(Context context,String mimetype){  boolean result=false;  if (context != null) {    try {      DrmManagerClient drmClient=new DrmManagerClient(context);      if (drmClient != null && mimetype != null && mimetype.length() > 0) {        result=drmClient.canHandle("",mimetype);      }    } catch (    IllegalArgumentException e) {      Log.w(TAG,"DrmManagerClient instance could not be created, context is Illegal.");    }catch (    IllegalStateException e) {      Log.w(TAG,"DrmManagerClient didn't initialize properly.");    }  }  return result;}  }
class C{  public static void paintComponent(Graphics g,Component c,Container p,int x,int y,int w,int h){  getCellRendererPane(c,p).paintComponent(g,c,p,x,y,w,h,false);}  }
class C{  private static void createEntry(String name,int ttl,ExpirationAction action,GenericListener l) throws CacheException {  Region region=getRegion();  AttributesFactory factory=new AttributesFactory(region.getAttributes());  factory.setStatisticsEnabled(true);  factory.setEntryTimeToLive(new ExpirationAttributes(ttl,action));  factory.setScope(SCOPE);  factory.setCacheListener(l);  Region sub=region.createSubregion(name,factory.create());  sub.create(name,new Integer(0),sub.getCache().getDistributedSystem().getDistributedMember());}  }
class C{  @Override public void respond(String response){  getChannel().send().message(getUser(),response);}  }
class C{  public FrameEncryptionHandler(final SecretKey encryptionKey,final int nonceLen,final CryptoAlgorithm cryptoAlgo,final byte[] messageId,final int frameSize){  encryptionKey_=encryptionKey;  cryptoAlgo_=cryptoAlgo;  nonceLen_=nonceLen;  messageId_=messageId.clone();  frameSize_=frameSize;  tagLenBytes_=cryptoAlgo_.getTagLen();  bytesToFrame_=new byte[frameSize_];  bytesToFrameLen_=0;}  }
class C{  public float apply(float sample){  float adjusted=sample * mGain;  if (adjusted > mMaxValue) {    adjusted=mMaxValue;  }  if (adjusted < -mMaxValue) {    adjusted=-mMaxValue;  }  return adjusted;}  }
class C{  protected String columnToTypeString(Column c,String tableType){switch (c.getType()) {case Types.TINYINT:    return "SMALLINT";case Types.SMALLINT:  return "SMALLINT";case Types.INTEGER:return "INTEGER";case Types.BIGINT:return "BIGINT";case Types.BOOLEAN:return "BOOLEAN";case Types.CHAR:{if (c.getLength() == 1) return "BOOLEAN"; else return "CHAR(" + c.getLength() + ")";}case Types.VARCHAR:return "VARCHAR(" + c.getLength() + ")";case Types.DATE:return "DATE";case Types.TIMESTAMP:return "TIMESTAMP";case Types.CLOB:return "VARCHAR(65535)";default :return "UNKNOWN";}}  }
class C{  public void addExtension(ASN1ObjectIdentifier oid,boolean critical,byte[] value){  if (extensions.containsKey(oid)) {    throw new IllegalArgumentException("extension " + oid + " already added");  }  extOrdering.addElement(oid);  extensions.put(oid,new Extension(oid,critical,new DEROctetString(value)));}  }
class C{  private static String loadContents(Object fileData) throws IOException {  String path=Draft2FileValueHelper.getPath(fileData);  InputStream is=null;  try {    File file=new File(path);    is=new FileInputStream(file);    byte[] buffer=new byte[Math.min(CONTENTS_NUMBER_OF_BYTES,(int)file.length())];    is.read(buffer);    return new String(buffer,"UTF-8");  }  finally {    if (is != null) {      try {        is.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public void testNegNegFirstShorter(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-1,127,-10,-57,-101,1,2,2,2,-96,-16,8,-40,-59,68,-88,-88,16,73};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public void error(IgniteCheckedException err){  this.err=err;}  }
class C{  public static byte[] sha256(byte[] data){  try {    MessageDigest a=MessageDigest.getInstance("SHA-256");    return a.digest(data);  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }}  }
class C{  protected void clearOtherErrors(String formName,String... fieldsToKeep){  Set<play.data.validation.Error> errors=Sets.newHashSet();  for (  String name : fieldsToKeep) {    play.data.validation.Error error=Validation.error(String.format("%s.%s",formName,name));    if (error != null) {      errors.add(error);    }  }  Validation.clear();  for (  play.data.validation.Error error : errors) {    Validation.addError(error.getKey(),error.message());  }}  }
class C{  public K[] array(){  return array;}  }
class C{  public void accept(IVisitor<T> visitor){  if (root == null)   return;  accept(null,root,visitor);}  }
class C{  public int end(int group){  loadGroup(group);  return groups[2 * group + 1];}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    if (!useOneShotPreviewCallback) {      camera.setPreviewCallback(null);    }    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public static void main(String[] args) throws Exception {  System.out.println("building TreeVisualizer...");  weka.gui.treevisualizer.TreeBuild builder=new weka.gui.treevisualizer.TreeBuild();  weka.gui.treevisualizer.NodePlace arrange=new weka.gui.treevisualizer.PlaceNode2();  weka.gui.treevisualizer.Node top=builder.create(new java.io.StringReader("digraph atree { top [label=\"the top\"] a [label=\"the first node\"] b [label=\"the second nodes\"] c [label=\"comes off of first\"] top->a top->b b->c }"));  weka.gui.treevisualizer.TreeVisualizer tv=new weka.gui.treevisualizer.TreeVisualizer(null,top,arrange);  tv.setSize(800,600);  String filename=System.getProperty("java.io.tmpdir") + File.separator + "test.png";  System.out.println("outputting to '" + filename + "'...");  toOutput(new PNGWriter(),tv,new File(filename));  System.out.println("done!");}  }
class C{  public void pull(String image,String tag,String registry,ProgressMonitor progressMonitor) throws IOException, InterruptedException {  doPull(image,tag,registry,progressMonitor,dockerDaemonUri);}  }
class C{  public boolean isOutputShutdown(){  return isOutputShutdown;}  }
class C{  private void returnOrCloseDirect(NettyChannelContext context,NettyChannelGroup group,boolean isClose){  Operation pendingOp=null;synchronized (group) {    pendingOp=group.pendingRequests.poll();    if (isClose) {      group.inUseChannels.remove(context);    } else     if (!this.isHttp2Only) {      if (pendingOp == null) {        group.availableChannels.add(context);        group.inUseChannels.remove(context);      }    }  }  if (isClose) {    context.close();  }  if (pendingOp == null) {    return;  }  if (isClose) {    connectOrReuse(context.getKey(),pendingOp);  } else {    context.setOperation(pendingOp);    pendingOp.complete();  }}  }
class C{  public int calcHeaderWidth(int col){  return calcHeaderWidth(getJTable(),col);}  }
class C{  private List<Context> initOneDimensionalDenseContextsAndContext2Data(List<ContextualDatum> data,int dimension,double curDensityThreshold){  int discreteDimensions=contextualDiscreteAttributes.size();  List<Context> result=new ArrayList<Context>();  if (dimension < discreteDimensions) {    Map<Integer,List<Integer>> distinctValue2Data=new HashMap<Integer,List<Integer>>();    for (int i=0; i < data.size(); i++) {      ContextualDatum datum=data.get(i);      Integer value=datum.getContextualDiscreteAttributes().get(dimension);      if (distinctValue2Data.containsKey(value)) {        distinctValue2Data.get(value).add(i);      } else {        List<Integer> temp=new ArrayList<Integer>();        temp.add(i);        distinctValue2Data.put(value,temp);      }    }    for (    Integer value : distinctValue2Data.keySet()) {      boolean denseContext=((double)distinctValue2Data.get(value).size() / data.size() >= curDensityThreshold) ? true : false;      if (denseContext) {        Interval interval=new IntervalDiscrete(dimension,contextualDiscreteAttributes.get(dimension),value);        if (isInterestingInterval(interval)) {          Context context=new Context(dimension,interval,globalContext);          result.add(context);          BitSet bs=indexes2BitSet(distinctValue2Data.get(value),data.size());          context2BitSet.put(context,bs);        }      }    }  } else {    double min=Double.MAX_VALUE;    double max=Double.MIN_VALUE;    for (    ContextualDatum datum : data) {      double value=datum.getContextualDoubleAttributes().getEntry(dimension - discreteDimensions);      if (value > max) {        max=value;      }      if (value < min) {        min=value;      }    }    HashSet<Interval> allIntervals=new HashSet<Interval>();    double step=(max - min) / numIntervals;    double start=min;    for (int i=0; i < numIntervals; i++) {      if (i != numIntervals - 1) {        Interval interval=new IntervalDouble(dimension,contextualDoubleAttributes.get(dimension - discreteDimensions),start,start + step);        start+=step;        allIntervals.add(interval);      } else {        Interval interval=new IntervalDouble(dimension,contextualDoubleAttributes.get(dimension - discreteDimensions),start,max + 0.000001);        allIntervals.add(interval);      }    }    HashMap<Interval,List<Integer>> interval2Data=new HashMap<Interval,List<Integer>>();    for (int i=0; i < data.size(); i++) {      ContextualDatum datum=data.get(i);      double value=datum.getContextualDoubleAttributes().getEntry(dimension - discreteDimensions);      for (      Interval interval : allIntervals) {        if (interval.contains(value)) {          if (interval2Data.containsKey(interval)) {            interval2Data.get(interval).add(i);          } else {            List<Integer> temp=new ArrayList<Integer>();            temp.add(i);            interval2Data.put(interval,temp);          }          break;        }      }    }    for (    Interval interval : interval2Data.keySet()) {      boolean denseContext=((double)interval2Data.get(interval).size() / data.size() >= curDensityThreshold) ? true : false;      if (denseContext) {        if (isInterestingInterval(interval)) {          Context context=new Context(dimension,interval,globalContext);          result.add(context);          BitSet bs=indexes2BitSet(interval2Data.get(interval),data.size());          context2BitSet.put(context,bs);        }      }    }  }  return result;}  }
class C{  public java.lang.StringBuffer delete(int start,int end){  internal.delete(start,end);  return this;}  }
class C{  @Override public int filter(double[] eigenValues){  double eigenValueSum=eigenValues[eigenValues.length - 1];  for (int i=eigenValues.length - 2; i >= 0; i--) {    eigenValueSum+=eigenValues[i];    double needEigenvalue=eigenValueSum / (eigenValues.length - i) * ralpha;    if (eigenValues[i] >= needEigenvalue) {      return i + 1;    }  }  return eigenValues.length;}  }
class C{  private Point readPointText() throws IOException, ParseException {  String nextToken=getNextEmptyOrOpener();  if (nextToken.equals(EMPTY)) {    return geometryFactory.createPoint((Coordinate)null);  }  Point point=geometryFactory.createPoint(getPreciseCoordinate());  getNextCloser();  return point;}  }
class C{  public void startBridgeServer(int port,boolean notifyBySubscription) throws IOException {  Cache cache=getCache();  CacheServer bridge=cache.addCacheServer();  bridge.setPort(port);  bridge.setNotifyBySubscription(notifyBySubscription);  bridge.start();  bridgeServerPort=bridge.getPort();}  }
class C{  @Bean public OAuth2RestOperations restTemplate(OAuth2ClientContext oauth2ClientContext){  return new OAuth2RestTemplate(resource(),oauth2ClientContext);}  }
class C{  public void invalidateSize(){  size=-1;}  }
class C{  public Parameters(List<ParameterType> parameterTypes){  for (  ParameterType type : parameterTypes) {    addParameterType(type);  }}  }
class C{  public boolean containsFolder(String name){  return folder.containsKey(name);}  }
class C{  public static void addProgramRecord(SAMFileHeader header,SAMProgramRecord record){  if (record.getProgramName() == null) {    record.setProgramName(record.getId());  }  final HashSet<String> idsUsed=new HashSet<>();  final HashMap<String,SAMProgramRecord> toAppend=new HashMap<>();  for (  final SAMProgramRecord r : header.getProgramRecords()) {    idsUsed.add(r.getId());    toAppend.put(r.getId(),r);  }  for (  final SAMProgramRecord r : header.getProgramRecords()) {    if (r.getPreviousProgramGroupId() != null && toAppend.containsKey(r.getPreviousProgramGroupId())) {      toAppend.remove(r.getPreviousProgramGroupId());    }  }  if (toAppend.size() == 0) {    header.addProgramRecord(record);  } else {    for (    final SAMProgramRecord r : toAppend.values()) {      String idStr;      if (r.getId().matches("^[a-zA-Z]+-[0-9]+$")) {        final String[] split=StringUtils.split(r.getId(),'-');        int id=Integer.parseInt(split[1]);        do {          id++;          idStr=split[0] + "-" + id;        } while (idsUsed.contains(idStr));      } else {        int id=1;        idStr=r.getId() + "-" + id;        while (idsUsed.contains(idStr)) {          id++;          idStr=r.getId() + "-" + id;        }      }      final SAMProgramRecord real=new SAMProgramRecord(idStr);      real.setCommandLine(record.getCommandLine());      real.setPreviousProgramGroupId(r.getId());      real.setProgramName(record.getProgramName());      real.setProgramVersion(record.getProgramVersion());      header.addProgramRecord(real);    }  }}  }
class C{  public ASTLimit(Token t){  super(t);}  }
class C{  public boolean isVerticalCover(){  return (transitionType == TYPE_COVER || transitionType == TYPE_FAST_SLIDE) && slideType == SLIDE_VERTICAL;}  }
class C{  private void checkRecording(){  if (EndToEndTestUtils.hasActionBar) {    assertTrue(EndToEndTestUtils.SOLO.searchText(trackListActivity.getString(R.string.generic_recording)));  }}  }
class C{  public static final boolean wearHasSpeaker(Context context){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {    PackageManager packageManager=context.getPackageManager();    if (!packageManager.hasSystemFeature(PackageManager.FEATURE_AUDIO_OUTPUT)) {      return false;    }    AudioManager audioManager=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);    AudioDeviceInfo[] devices=audioManager.getDevices(AudioManager.GET_DEVICES_OUTPUTS);    for (    AudioDeviceInfo device : devices) {      if (device.getType() == AudioDeviceInfo.TYPE_BUILTIN_SPEAKER) {        return true;      }    }  }  return false;}  }
class C{  public TaskResourceRep deactivateFileSystem(URI fsId,String token,FileSystemDeleteParam fileSystemDeleteParam){  WebResource rRoot=createRequest(INTERNAL_FILE_ROOT + fsId + DEACTIVATE);  WebResource.Builder requestBuilder=addSignature(rRoot);  TaskResourceRep resp=addToken(requestBuilder,token).post(TaskResourceRep.class,fileSystemDeleteParam);  return resp;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(stack.getUIMgrSafe().getVideoFrame().hasFile());}  }
class C{  static <T>GeneralRange<T> downTo(Comparator<? super T> comparator,@Nullable T endpoint,BoundType boundType){  return new GeneralRange<T>(comparator,true,endpoint,boundType,false,null,OPEN);}  }
class C{  public boolean containsFieldValues(Object[] fieldValues){  if (this.hasLimitIterator) {    Iterator fieldItr=this.fieldValuesIterator();    while (fieldItr.hasNext()) {      if (Arrays.equals((Object[])fieldItr.next(),fieldValues)) {        return true;      }    }    return false;  } else {    return super.contains(fieldValues);  }}  }
class C{  public boolean isMultiValued(){  return numMultiValuedDocs > 0;}  }
class C{  public static void passedUnconditionalBranch(int opcode,int branch,int bytecode_id){  ExecutionTracer tracer=getExecutionTracer();  if (tracer.disabled)   return;  if (isThreadNeqCurrentThread())   return;  tracer.trace.branchPassed(branch,bytecode_id,0.0,0.0);}  }
class C{  public void deleteTag(int tagId,int ifdId){  mData.removeTag(getTrueTagKey(tagId),ifdId);}  }
class C{  @Override public void drag(int from,int to){}  }
class C{  protected Node deepExport(Node n,AbstractDocument d){  super.deepExport(n,d);  AbstractNotation an=(AbstractNotation)n;  an.nodeName=nodeName;  an.publicId=publicId;  an.systemId=systemId;  return n;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:41.952 -0500",hash_original_method="B7EDB63E53FAEFA939E2D19889BCA5A2",hash_generated_method="52EDEE112409FFDDBC0C0F57A75C82A9") public int decode(byte[] data,int off,int length,OutputStream out) throws IOException {  byte b1, b2;  int outLen=0;  int end=off + length;  while (end > off) {    if (!ignore((char)data[end - 1])) {      break;    }    end--;  }  int i=off;  while (i < end) {    while (i < end && ignore((char)data[i])) {      i++;    }    b1=decodingTable[data[i++]];    while (i < end && ignore((char)data[i])) {      i++;    }    b2=decodingTable[data[i++]];    out.write((b1 << 4) | b2);    outLen++;  }  return outLen;}  }
class C{  @Override public void handlePut(Operation put){  ServiceRuntimeContext s=(ServiceRuntimeContext)put.getBodyRaw();  if (s.serializedService != null) {    handleSerializePut(put,s);  } else {    handleDeserializePut(put,s.selfLink);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:45.404 -0500",hash_original_method="8850B92ED3324DB77471CF2A1052D726",hash_generated_method="827F310DEB1F388C181FD1C8E221D99B") public boolean isRepeatable(){  return true;}  }
class C{  public boolean isStripOutlineVisible(){  return this.stripOutlineVisible;}  }
class C{  private String tokenClass(String string){  if (string == null) {    return null;  } else   if (string.startsWith("http://")) {    return "#UrL#";  } else   if (isNumberAndPunctuation(string)) {    return "#0#";  }  return string;}  }
class C{  public void onButton(ButtonEvent event,Interaction iact){}  }
class C{  public String checkScheduleValid(){  String status=SCHEDULE_OKAY;  if (getScheduleId().equals(NONE)) {    return status;  }  Schedule schedule=getSchedule();  if (schedule == null) {    return MessageFormat.format(Bundle.getMessage("CanNotFindSchedule"),new Object[]{getScheduleId()});  }  List<ScheduleItem> scheduleItems=schedule.getItemsBySequenceList();  if (scheduleItems.size() == 0) {    return Bundle.getMessage("empty");  }  for (  ScheduleItem si : scheduleItems) {    if (!si.getSetoutTrainScheduleId().equals(ScheduleItem.NONE) && TrainScheduleManager.instance().getScheduleById(si.getSetoutTrainScheduleId()) == null) {      status=MessageFormat.format(Bundle.getMessage("NotValid"),new Object[]{si.getSetoutTrainScheduleId()});      break;    }    if (!si.getPickupTrainScheduleId().equals(ScheduleItem.NONE) && TrainScheduleManager.instance().getScheduleById(si.getPickupTrainScheduleId()) == null) {      status=MessageFormat.format(Bundle.getMessage("NotValid"),new Object[]{si.getPickupTrainScheduleId()});      break;    }    if (!_location.acceptsTypeName(si.getTypeName())) {      status=MessageFormat.format(Bundle.getMessage("NotValid"),new Object[]{si.getTypeName()});      break;    }    if (!acceptsTypeName(si.getTypeName())) {      status=MessageFormat.format(Bundle.getMessage("NotValid"),new Object[]{si.getTypeName()});      break;    }    if (!si.getRoadName().equals(ScheduleItem.NONE) && (!acceptsRoadName(si.getRoadName()) || !CarRoads.instance().containsName(si.getRoadName()) || CarManager.instance().getByTypeAndRoad(si.getTypeName(),si.getRoadName()) == null)) {      status=MessageFormat.format(Bundle.getMessage("NotValid"),new Object[]{si.getRoadName()});      break;    }    List<String> loads=CarLoads.instance().getNames(si.getTypeName());    if (!si.getReceiveLoadName().equals(ScheduleItem.NONE) && (!acceptsLoad(si.getReceiveLoadName(),si.getTypeName()) || !loads.contains(si.getReceiveLoadName()))) {      status=MessageFormat.format(Bundle.getMessage("NotValid"),new Object[]{si.getReceiveLoadName()});      break;    }    if (!si.getShipLoadName().equals(ScheduleItem.NONE) && !loads.contains(si.getShipLoadName())) {      status=MessageFormat.format(Bundle.getMessage("NotValid"),new Object[]{si.getShipLoadName()});      break;    }    if (si.getDestination() != null && (!si.getDestination().acceptsTypeName(si.getTypeName()) || LocationManager.instance().getLocationById(si.getDestination().getId()) == null)) {      status=MessageFormat.format(Bundle.getMessage("NotValid"),new Object[]{si.getDestination()});      break;    }    if (si.getDestination() != null && si.getDestinationTrack() != null) {      if (!si.getDestination().isTrackAtLocation(si.getDestinationTrack())) {        status=MessageFormat.format(Bundle.getMessage("NotValid"),new Object[]{si.getDestinationTrack() + " (" + Bundle.getMessage("Track")+ ")"});        break;      }      if (!si.getDestinationTrack().acceptsTypeName(si.getTypeName())) {        status=MessageFormat.format(Bundle.getMessage("NotValid"),new Object[]{si.getDestinationTrack() + " (" + Bundle.getMessage("Type")+ ")"});        break;      }      if (!si.getRoadName().equals(ScheduleItem.NONE) && !si.getDestinationTrack().acceptsRoadName(si.getRoadName())) {        status=MessageFormat.format(Bundle.getMessage("NotValid"),new Object[]{si.getDestinationTrack() + " (" + Bundle.getMessage("Road")+ ")"});        break;      }      if (!si.getShipLoadName().equals(ScheduleItem.NONE) && !si.getDestinationTrack().acceptsLoad(si.getShipLoadName(),si.getTypeName())) {        status=MessageFormat.format(Bundle.getMessage("NotValid"),new Object[]{si.getDestinationTrack() + " (" + Bundle.getMessage("Load")+ ")"});        break;      }    }  }  return status;}  }
class C{  public static void charset(HttpResponse response,String charset){  String type=getHeader(response,"Content-Type");  if (type == null) {    type="text/plain";  }  String newType=type.replaceAll(";\\s*charset=[^;]*","") + "; charset=" + charset;  response.getHeaders().remove("Content-Type");  header(response,"Content-Type",newType);}  }
class C{  @Deprecated public static JavaClassAndMethod findMethod(JavaClass[] classList,String methodName,String methodSig){  return findMethod(classList,methodName,methodSig,ANY_METHOD);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node ownerElement;  Attr attr;  doc=(Document)load("staffNS",false);  attr=doc.createAttributeNS("http://www.w3.org/DOM","dom:attr");  ownerElement=attr.getOwnerElement();  assertNull("attrgetownerelement03",ownerElement);}  }
class C{  public void clearCounters(){  counters.clear();}  }
class C{  private void write(Coordinate[] coords,int level,StringBuffer buf){  startLine("<coordinates>",level,buf);  boolean isNewLine=false;  for (int i=0; i < coords.length; i++) {    if (i > 0) {      buf.append(TUPLE_SEPARATOR);    }    if (isNewLine) {      startLine("  ",level,buf);      isNewLine=false;    }    write(coords[i],buf);    if ((i + 1) % maxCoordinatesPerLine == 0 && i < coords.length - 1) {      buf.append("\n");      isNewLine=true;    }  }  buf.append("</coordinates>\n");}  }
class C{  public static void writeKdbxHeader(KdbxHeader kdbxHeader,OutputStream outputStream) throws IOException {  MessageDigest messageDigest=Encryption.getMessageDigestInstance();  DigestOutputStream digestOutputStream=new DigestOutputStream(outputStream,messageDigest);  LittleEndianDataOutputStream ledos=new LittleEndianDataOutputStream(digestOutputStream);  ledos.writeInt(SIG1);  ledos.writeInt(SIG2);  ledos.writeInt(FILE_VERSION_32);  ledos.writeByte(HeaderType.CIPHER_ID);  ledos.writeShort(16);  byte[] b=new byte[16];  ByteBuffer bb=ByteBuffer.wrap(b);  bb.putLong(kdbxHeader.getCipherUuid().getMostSignificantBits());  bb.putLong(8,kdbxHeader.getCipherUuid().getLeastSignificantBits());  ledos.write(b);  ledos.writeByte(HeaderType.COMPRESSION_FLAGS);  ledos.writeShort(4);  ledos.writeInt(kdbxHeader.getCompressionFlags().ordinal());  ledos.writeByte(HeaderType.MASTER_SEED);  ledos.writeShort(kdbxHeader.getMasterSeed().length);  ledos.write(kdbxHeader.getMasterSeed());  ledos.writeByte(HeaderType.TRANSFORM_SEED);  ledos.writeShort(kdbxHeader.getTransformSeed().length);  ledos.write(kdbxHeader.getTransformSeed());  ledos.writeByte(HeaderType.TRANSFORM_ROUNDS);  ledos.writeShort(8);  ledos.writeLong(kdbxHeader.getTransformRounds());  ledos.writeByte(HeaderType.ENCRYPTION_IV);  ledos.writeShort(kdbxHeader.getEncryptionIv().length);  ledos.write(kdbxHeader.getEncryptionIv());  ledos.writeByte(HeaderType.PROTECTED_STREAM_KEY);  ledos.writeShort(kdbxHeader.getProtectedStreamKey().length);  ledos.write(kdbxHeader.getProtectedStreamKey());  ledos.writeByte(HeaderType.STREAM_START_BYTES);  ledos.writeShort(kdbxHeader.getStreamStartBytes().length);  ledos.write(kdbxHeader.getStreamStartBytes());  ledos.writeByte(HeaderType.INNER_RANDOM_STREAM_ID);  ledos.writeShort(4);  ledos.writeInt(kdbxHeader.getProtectedStreamAlgorithm().ordinal());  ledos.writeByte(HeaderType.END);  ledos.writeShort(0);  MessageDigest digest=digestOutputStream.getMessageDigest();  kdbxHeader.setHeaderHash(digest.digest());}  }
class C{  private void initialize(){  this.view.blockNewSubmissions();  this.getContentPane().setLayout(new BorderLayout());  this.getContentPane().add(getJTopPanel(),java.awt.BorderLayout.CENTER);}  }
class C{  public View findView(int position,int dataSize){  if (isInHeader(position))   return getHeaderView(position);  if (isInFooter(position,dataSize)) {    int headerSize=getHeaderViewSize();    return getFooterView(position - headerSize - dataSize);  }  return null;}  }
class C{  public Optional<UserNotifications> fetch(@Nonnull final String username) throws NotificationStoreException {  Objects.requireNonNull(username);  Preconditions.checkArgument(!username.isEmpty(),"username cannot be empty");  final Location location=new Location(NAMESPACE,username);  LOGGER.debug("Fetching key: {}",location);  final NotificationListObject list;  final FetchValue fv=new FetchValue.Builder(location).build();  try (Timer.Context context=fetchTimer.time()){    final FetchValue.Response response=client.execute(fv);    if (response.isNotFound()) {      return Optional.empty();    }    list=response.getValue(NotificationListObject.class);  } catch (  UnresolvedConflictException e) {    LOGGER.error("Unable to resolve siblings for key: " + location,e);    throw new NotificationStoreException(e);  }catch (  ExecutionException e) {    LOGGER.error("Unable to fetch key: " + location,e);    throw new NotificationStoreException(e);  }catch (  InterruptedException e) {    LOGGER.warn("Interrupted fetching key: " + location,e);    Thread.currentThread().interrupt();    throw new NotificationStoreException(e);  }  if (list == null) {    return Optional.empty();  }  return Optional.of(splitNotifications(username,list.getNotifications()));}  }
class C{  public static boolean readInstallPolicy(){  return readInstallPolicy(INSTALL_POLICY_FILE);}  }
class C{  private void init(Context context){  if (mInitialised) {    return;  }  mInitialised=true;  mDraweeHolder=DraweeHolder.create(null,context);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    ColorStateList imageTintList=getImageTintList();    if (imageTintList == null) {      return;    }    setColorFilter(imageTintList.getDefaultColor());  }}  }
class C{  public JavaScriptFieldElement(String enumName){  this.enumName=enumName;}  }
class C{  public void actionPerformed(Event e){  if (m_setting)   return;  if (e.getTarget() == comboReport)   cmd_report(); else   if (e.getTarget() == bFind)   cmd_find(); else   if (e.getTarget() == bExport)   cmd_export(); else   if (e.getTarget() == previewType)   cmd_render(); else   if (e.getTarget() == bSendMail)   cmd_sendMail(); else   if (e.getTarget() == bArchive)   cmd_archive(); else   if (e.getTarget() == bCustomize)   cmd_customize(); else   if (e.getTarget() == bRefresh)   cmd_report(); else   if (e.getTarget() == m_ddM)   cmd_window(m_ddQ); else   if (e.getTarget() == m_daM)   cmd_window(m_daQ);}  }
class C{  CircuitBreakerStateMachine(String name,CircuitBreakerConfig circuitBreakerConfig){  this.name=name;  this.circuitBreakerConfig=circuitBreakerConfig;  this.stateReference=new AtomicReference<>(new ClosedState(this));}  }
class C{  @ExceptionHandler(NoResultException.class) public ResponseEntity<Map<String,Object>> handleNoResultException(NoResultException noResultException,HttpServletRequest request){  logger.info("> handleNoResultException");  ExceptionAttributes exceptionAttributes=new DefaultExceptionAttributes();  Map<String,Object> responseBody=exceptionAttributes.getExceptionAttributes(noResultException,request,HttpStatus.NOT_FOUND);  logger.info("< handleNoResultException");  return new ResponseEntity<Map<String,Object>>(responseBody,HttpStatus.NOT_FOUND);}  }
class C{  public Matrix4f scale(Vector3fc xyz){  return scale(xyz.x(),xyz.y(),xyz.z(),this);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public int isSSL(){  return sslConnection ? 1 : 0;}  }
class C{  public int minIndex(){  if (n == 0)   throw new NoSuchElementException("Priority queue underflow");  return pq[1];}  }
class C{  public List<GenericValue> queryList() throws GenericEntityException {  return query(null);}  }
class C{  public static <S>ServiceLoader<S> load(Class<S> service,ClassLoader loader){  return new ServiceLoader<>(service,loader);}  }
class C{  public static void main(String[] args) throws IOException {  String s=doc(svg(160,200,rect(0,0,160,200,"fill:red;") + svg(10,10,100,100,rect(0,0,100,100,"fill:orange; stroke:rgb(0,0,0);")) + line(20,20,100,100,"stroke:black; stroke-width:2px;")+ line(20,100,100,20,"stroke:black; stroke-width:2px;")+ text(10,140,"font-family:verdana; font-size:20px; font-weight:bold;","Hello world")));  File file=new File("demo.svg");  FileWriter w=null;  try {    w=new FileWriter(file);    w.write(s);  }  finally {    if (w != null) {      w.close();    }  }  System.out.println(String.format("File written: %s",file.getAbsolutePath()));  if (args.length > 0 && args[0].equals("-view")) {    if (!viewSVG(file)) {      System.err.println("'-view' not supported on this platform");    }  }}  }
class C{  public ExtendedGeneralPath(Shape s){  this();  append(s,false);}  }
class C{  public MRUMap(int maxSize){  Assert.isLegal(maxSize > 0);  fMaxSize=maxSize;}  }
class C{  public ContentAssistHistory(){  this(DEFAULT_TRACKED_LHS,DEFAULT_TRACKED_RHS);}  }
class C{  @Override public String createUniqueId(FacesContext context,String seed){  if (isPrependId()) {    Integer i=(Integer)getStateHelper().get(PropertyKeys.lastId);    int lastId=((i != null) ? i : 0);    getStateHelper().put(PropertyKeys.lastId,++lastId);    return UIViewRoot.UNIQUE_ID_PREFIX + (seed == null ? lastId : seed);  } else {    UIComponent ancestorNamingContainer=(getParent() == null) ? null : getParent().getNamingContainer();    String uid=null;    if (null != ancestorNamingContainer && ancestorNamingContainer instanceof UniqueIdVendor) {      uid=((UniqueIdVendor)ancestorNamingContainer).createUniqueId(context,seed);    } else {      uid=context.getViewRoot().createUniqueId(context,seed);    }    return uid;  }}  }
class C{  private void fillLookup(){  for (int j=0; j < m_plots.size(); j++) {    PlotData2D temp_plot=(m_plots.get(j));    if (temp_plot.m_plotInstances.numInstances() > 0 && temp_plot.m_plotInstances.numAttributes() > 0) {      for (int i=0; i < temp_plot.m_plotInstances.numInstances(); i++) {        if (temp_plot.m_plotInstances.instance(i).isMissing(m_xIndex) || temp_plot.m_plotInstances.instance(i).isMissing(m_yIndex)) {          temp_plot.m_pointLookup[i][0]=Double.NEGATIVE_INFINITY;          temp_plot.m_pointLookup[i][1]=Double.NEGATIVE_INFINITY;        } else {          double x=convertToPanelX(temp_plot.m_plotInstances.instance(i).value(m_xIndex));          double y=convertToPanelY(temp_plot.m_plotInstances.instance(i).value(m_yIndex));          temp_plot.m_pointLookup[i][0]=x;          temp_plot.m_pointLookup[i][1]=y;        }      }    }  }}  }
class C{  public static Function sum(Object column){  return new Function(format("sum(%s)",column));}  }
class C{  public double det(){  return new LUDecomposition(this).det();}  }
class C{  public boolean exists(){  return fileIO.exists(filePath);}  }
class C{  public static BigInteger toBigInteger(final byte[] bytes){  final byte[] bigEndianBytes=new byte[bytes.length + 1];  for (int i=0; i < bytes.length; ++i) {    bigEndianBytes[i + 1]=bytes[bytes.length - i - 1];  }  return new BigInteger(bigEndianBytes);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return NODE_ID;case 2:  return DOMAIN_ID;case 3:return HOSTNAME;case 4:return PORT;default :return null;}}  }
class C{  public static boolean canRemoveParentheses(Expression expression){  return canRemoveParentheses(expression,expression.getParent(),expression.getLocationInParent());}  }
class C{  public void close() throws PcalResourceFileReaderException {  try {    inputReader.close();  } catch (  java.io.IOException e) {    throw new PcalResourceFileReaderException("Error trying to close the +cal translator resource file " + name + ".\n"+ "    You may be having file system problems");  }  ;}  }
class C{  public static double crossValidate(NaiveBayesUpdateable fullModel,Instances trainingSet,Random r) throws Exception {  Classifier[] copies=AbstractClassifier.makeCopies(fullModel,5);  Evaluation eval=new Evaluation(trainingSet);  for (int j=0; j < 5; j++) {    Instances test=trainingSet.testCV(5,j);    for (int k=0; k < test.numInstances(); k++) {      test.instance(k).setWeight(-test.instance(k).weight());      ((NaiveBayesUpdateable)copies[j]).updateClassifier(test.instance(k));      test.instance(k).setWeight(-test.instance(k).weight());    }    eval.evaluateModel(copies[j],test);  }  return eval.incorrect();}  }
class C{  private boolean isRunInForegroundFlagSet(){  return runInForeground;}  }
class C{  public static OutputStream createOutputStream(File file,boolean zip,boolean append,boolean terminate) throws IOException {  Diagnostic.developerLog("FileUtils.outputStream " + file.getAbsolutePath() + " "+ zip+ " "+ append);  OutputStream outStream=new FileOutputStream(file,append);  outStream=new BufferedOutputStreamFix(outStream,BUFFERED_STREAM_SIZE);  if (zip) {    outStream=new GzipAsynchOutputStream(outStream,terminate);  }  return outStream;}  }
class C{  public LabeledBorder(JComponent label){  this(null,label);}  }
class C{  public void sendNoWait(MqttWireMessage message,MqttToken token) throws MqttException {  final String methodName="sendNoWait";  if (isConnected() || (!isConnected() && message instanceof MqttConnect) || (isDisconnecting() && message instanceof MqttDisconnect)) {    if (disconnectedMessageBuffer != null && disconnectedMessageBuffer.getMessageCount() != 0) {      log.fine(CLASS_NAME,methodName,"507",new Object[]{message.getKey()});      this.clientState.persistBufferedMessage(message);      disconnectedMessageBuffer.putMessage(message,token);    } else {      this.internalSend(message,token);    }  } else   if (disconnectedMessageBuffer != null && isResting()) {    log.fine(CLASS_NAME,methodName,"508",new Object[]{message.getKey()});    this.clientState.persistBufferedMessage(message);    disconnectedMessageBuffer.putMessage(message,token);  } else {    log.fine(CLASS_NAME,methodName,"208");    throw ExceptionHelper.createMqttException(MqttException.REASON_CODE_CLIENT_NOT_CONNECTED);  }}  }
class C{  public void start(){}  }
class C{  public static ClientPidMap random(Integer pid){  String uuid=UUID.randomUUID().toString();  return new ClientPidMap(pid,"urn:uuid:" + uuid);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void drawWind(Canvas canvas,float y,float xOffset){  float cof=(mScreenWidth + xOffset) / (LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT);  float time=mLoadingAnimationTime;  if (mLastAnimationTime - mLoadingAnimationTime > 0) {    mInverseDirection=true;    time=(LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT) - mLoadingAnimationTime;  } else {    mNewWindSet=true;    mInverseDirection=false;  }  float x=(mScreenWidth - (time * cof)) + xOffset - mWindLineWidth;  float xEnd=x + mWindLineWidth;  canvas.drawLine(x,y,xEnd,y,mWindPaint);}  }
class C{  protected void invoke(int slot,FieldPacker v){  if (v != null) {    mRS.nScriptInvokeV(getID(mRS),slot,v.getData());  } else {    mRS.nScriptInvoke(getID(mRS),slot);  }}  }
class C{  public boolean isCharacterElementContentWhitespace(int nodeHandle){  return false;}  }
class C{  public GetSettingValue(String setting){  super();  addParameterToRequest("setting",setting);}  }
class C{  @Override public Dimension minimumLayoutSize(Container target){  Dimension minimum=layoutSize(target,false);  minimum.width-=(getHgap() + 1);  return minimum;}  }
class C{  public static long[] andI(long[] v,long[] o){  int i=0;  for (; i < o.length; i++) {    v[i]&=o[i];  }  Arrays.fill(v,i,v.length,0);  return v;}  }
class C{  public void showCertificateSelectedEntry(){  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    KeyStore keyStore=history.getCurrentState().getKeyStore();    String alias=kseFrame.getSelectedEntryAlias();    X509Certificate[] certs=X509CertUtil.convertCertificates(keyStore.getCertificateChain(alias));    DViewCertificate dViewCertificate=new DViewCertificate(frame,MessageFormat.format(res.getString("KeyPairCertificateChainDetailsAction.CertDetailsEntry.Title"),alias),certs,kseFrame,DViewCertificate.EXPORT);    dViewCertificate.setLocationRelativeTo(frame);    dViewCertificate.setVisible(true);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  @Override protected void update(){  m_ButtonStart.setEnabled(hasData());  m_ButtonStop.setEnabled(isRunning());}  }
class C{  public static InetAddress longToIp(long ip){  try {    return InetAddress.getByAddress(longToNetworkByteOrderArray(ip));  } catch (  UnknownHostException e) {    throw new IllegalArgumentException("Invalid IP " + ip);  }}  }
class C{  @MainThread public final void register(StorageAccessListener storageAccessListener){  if (CHECK_THREADS) {    UiThreadContext.assertUiThread();  }  if (listeners.contains(storageAccessListener)) {    throw new StorageAccessException("Listener already registered");  }  listeners.add(storageAccessListener);}  }
class C{  @Override public void onQueryComplete(int taskId,Object cookie,Cursor cursor){}  }
class C{  public boolean isPrimary(){  return primary;}  }
class C{  public final char yycharat(int pos){  return zzBuffer.charAt(zzStartRead + pos);}  }
class C{  public void onClear(){switch (getArmorSlot()) {case HELMET:    if (getOwner().getCurrentHat() != null) {      getOwner().removeHat();    }  if (getOwner().getCurrentEmote() != null) {    getOwner().removeEmote();  }getPlayer().getInventory().setHelmet(null);break;case CHESTPLATE:getPlayer().getInventory().setChestplate(null);break;case LEGGINGS:getPlayer().getInventory().setLeggings(null);break;case BOOTS:getPlayer().getInventory().setBoots(null);break;}getOwner().setSuit(getArmorSlot(),null);armorSlot=null;suitType=null;itemStack=null;}  }
class C{  private void initComponents(){  setLayout(new BorderLayout());  Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();  WIDTH=screenSize.width;  HEIGHT=screenSize.height - 40;  setPreferredSize(new Dimension(WIDTH,HEIGHT));  cf=new ChromeForensics();  initToolBar();  add(toolBar,BorderLayout.NORTH);  initTabbedPane();  add(tabbedPane,BorderLayout.CENTER);  add(new StatusBar(),BorderLayout.SOUTH);}  }
class C{  @Override protected boolean isInAlphabet(final byte octet){  return octet >= 0 && octet < decodeTable.length && decodeTable[octet] != -1;}  }
class C{  public boolean isServer(){  if (this.cache.getCacheServers().isEmpty()) {    return false;  }  return true;}  }
class C{  public boolean isConnected(){  return keeper != null && keeper.getState() == ZooKeeper.States.CONNECTED;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (operationName_1: ");  result.append(operationName_1);  result.append(", code_1: ");  result.append(code_1);  result.append(')');  return result.toString();}  }
class C{  public BindException(){}  }
class C{  public void resetToPreferredSizes(JSplitPane a){  for (int i=0; i < uis.size(); i++) {    ((SplitPaneUI)(uis.elementAt(i))).resetToPreferredSizes(a);  }}  }
class C{  public double fullPathDistance(final DistanceStyle distanceStyle){synchronized (fullDistanceCache) {    Double dist=fullDistanceCache.get(distanceStyle);    if (dist == null) {      dist=new Double(distanceStyle.computeDistance(start,end.x,end.y,end.z));      fullDistanceCache.put(distanceStyle,dist);    }    return dist.doubleValue();  }}  }
class C{  public void createDiskAsync(final String projectId,final DiskCreateSpec diskCreateSpec,final FutureCallback<Task> responseCallback) throws IOException {  final String path=String.format("%s/%s/disks",getBasePath(),projectId);  createObjectAsync(path,serializeObjectAsJson(diskCreateSpec),responseCallback);}  }
class C{  protected String toToken(final Serializable serializable) throws CartTuplizationException {  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();synchronized (desCipher) {    Base64OutputStream base64EncoderStream=new Base64OutputStream(byteArrayOutputStream,true,Integer.MAX_VALUE,null);    CipherOutputStream cipherOutputStream=new CipherOutputStream(base64EncoderStream,desCipher);    ObjectOutputStream objectOutputStream=null;    try {      objectOutputStream=new ObjectOutputStream(cipherOutputStream);      objectOutputStream.writeObject(serializable);      objectOutputStream.flush();      objectOutputStream.close();    } catch (    Throwable ioe) {      ShopCodeContext.getLog(this).error(MessageFormat.format("Unable to serialize object {0}",serializable),ioe);      throw new CartTuplizationException(ioe);    } finally {      try {        if (objectOutputStream != null) {          objectOutputStream.close();        }        cipherOutputStream.close();        base64EncoderStream.close();        byteArrayOutputStream.close();      } catch (      IOException e) {        ShopCodeContext.getLog(this).error("Can not close stream",e);      }    }  }  return byteArrayOutputStream.toString();}  }
class C{  protected void performFiltering(CharSequence text,int start,int end,int keyCode){  if (mAutoCompleteMode == AUTOCOMPLETE_MODE_MULTI)   ((InternalMultiAutoCompleteTextView)mInputView).superPerformFiltering(text,start,end,keyCode);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.113 -0400",hash_original_method="2C99B5F9FA30CE949BAD9F2A49471B0A",hash_generated_method="8E28D71268F5F4103562E15B17C0F106") public void shape(char[] text,int start,int count){  if (isContextual()) {    contextualShape(text,start,count,fDefaultContextIndex);  } else {    nonContextualShape(text,start,count);  }}  }
class C{  public void removeAnimation(int reactTag,int animationID){  mUIImplementation.removeAnimation(reactTag,animationID);}  }
class C{  public boolean dismissPopupMenus(){  boolean result=hideOverflowMenu();  result|=hideSubMenus();  return result;}  }
class C{  @Override public void printStackTrace(PrintStream s){  if (s != null) {    super.printStackTrace(s);    SQLException next=getNextException();    for (int i=0; i < 100 && next != null; i++) {      s.println(next.toString());      next=next.getNextException();    }    if (next != null) {      s.println("(truncated)");    }  }}  }
class C{  public Object read(InputNode node,Object result) throws Exception {  Instance type=factory.getInstance(node);  if (type.isReference()) {    return type.getInstance();  }  type.setInstance(result);  if (result != null) {    return populate(node,result);  }  return result;}  }
class C{  public static boolean isValid(SharedReference<?> ref){  return ref != null && ref.isValid();}  }
class C{  private void enableRecoverPointTagOn803(DbClient dbClient,WBEMClient client,StorageSystem storage,JobContext jobContext){  try {    boolean isRPTagNeeded=false;    List<URI> blockObjectUris=new ArrayList<URI>();    for (    VolumeURIHLU volUriHlu : _volumeURIHLUs) {      URI volumeURI=volUriHlu.getVolumeURI();      BlockObject bo=null;      if (URIUtil.isType(volumeURI,BlockSnapshot.class)) {        bo=dbClient.queryObject(BlockSnapshot.class,volumeURI);      } else       if (URIUtil.isType(volumeURI,Volume.class)) {        bo=dbClient.queryObject(Volume.class,volumeURI);      }      if (bo != null) {        blockObjectUris.add(bo.getId());        if (BlockObject.checkForRP(dbClient,bo.getId())) {          isRPTagNeeded=true;        }      }    }    if (isRPTagNeeded) {      SmisCommandHelper helper=jobContext.getSmisCommandHelper();      helper.setRecoverPointTag(storage,helper.getVolumeMembers(storage,blockObjectUris),true);    }  } catch (  WBEMException e) {    _log.error("Encountered an error while trying to set the RecoverPoint tag",e);  }catch (  DatabaseException e) {    _log.error("Encountered an error while trying to set the RecoverPoint tag",e);  }catch (  Exception e) {    _log.error("Encountered an error while trying to set the RecoverPoint tag",e);  }}  }
class C{  public boolean arePermissionsGranted(@NonNull int[] grantResults){  for (  int result : grantResults) {    if (result != PERMISSION_GRANTED) {      return false;    }  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:43.653 -0500",hash_original_method="9C11F1BCAAD785FEF89EC2FF8E172198",hash_generated_method="26A919B3D88DD9507FE4C514B76C8A9E") public void clearFormData(){  if (!checkInitialized()) {    return;  }synchronized (mFormLock) {    mDatabase.delete(mTableNames[TABLE_FORMURL_ID],null,null);    mDatabase.delete(mTableNames[TABLE_FORMDATA_ID],null,null);  }}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.CALL;}  }
class C{  public byte ID(){  return 1;}  }
class C{  public static double binomial(long n,long k){  if (k == 0 || k == n) {    return 1.0;  }  if (k > n / 2.0)   k=n - k;  double binomial=1.0;  long N=n - k + 1;  for (long i=k; i > 0; ) {    binomial*=((double)N++) / (double)(i--);  }  return binomial;}  }
class C{  synchronized protected void timeout(){  SprogVersion v;switch (state) {case CRSENT:    log.debug("Timeout no SPROG prompt");  state=QueryState.IDLE;v=new SprogVersion(new SprogType(SprogType.TIMEOUT));notifyVersion(v);break;case QUERYSENT:log.debug("Timeout no SPROG found");state=QueryState.IDLE;v=new SprogVersion(new SprogType(SprogType.NOT_A_SPROG));notifyVersion(v);break;case DONE:case IDLE:log.error("Timeout in unexpected state: " + state);break;}}  }
class C{  public TargetHostMeta(){}  }
class C{  public void findAndUndo(Object someObj){  if (someObj instanceof MapPanel && someObj instanceof Container) {    Debug.message("basic","OpenMapApplet: MapPanel is being removed from applet");    getContentPane().remove((Container)someObj);    if (getJMenuBar() == ((MapPanel)someObj).getMapMenuBar()) {      Debug.message("basic","OpenMapApplet: Menu Bar is being removed");      setJMenuBar(null);    }  }  if (someObj instanceof JMenuBar) {    if (getJMenuBar() == (JMenuBar)someObj) {      Debug.message("basic","OpenMapApplet: MenuBar is being removed from applet");      setJMenuBar(null);    }  }}  }
class C{  public ReplicationJob createJobForCopyPartition(long auditLogId,long auditLogEntryCreateTime,HiveObjectSpec spec) throws StateUpdateException {  Map<String,String> extras=new HashMap<>();  extras.put(PersistedJobInfo.AUDIT_LOG_ID_EXTRAS_KEY,Long.toString(auditLogId));  extras.put(PersistedJobInfo.AUDIT_LOG_ENTRY_CREATE_TIME_KEY,Long.toString(auditLogEntryCreateTime));  List<String> partitionNames=new ArrayList<>();  partitionNames.add(spec.getPartitionName());  ReplicationOperation replicationOperation=ReplicationOperation.COPY_PARTITION;  PersistedJobInfo persistedJobInfo=jobInfoStore.resilientCreate(replicationOperation,ReplicationStatus.PENDING,Optional.empty(),srcCluster.getName(),spec,partitionNames,Optional.empty(),Optional.empty(),Optional.empty(),extras);  ReplicationTask replicationTask=new CopyPartitionTask(conf,destinationObjectFactory,objectConflictHandler,srcCluster,destCluster,spec,Optional.<Path>empty(),Optional.<Path>empty(),directoryCopier,true);  return new ReplicationJob(conf,replicationTask,onStateChangeHandler,persistedJobInfo);}  }
class C{  public boolean equals(XObject obj2){  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.equals(this);  if (null != m_obj) {    return m_obj.equals(obj2.m_obj);  } else {    return obj2.m_obj == null;  }}  }
class C{  protected BaseDuration(ReadableInstant start,ReadableInstant end){  super();  if (start == end) {    iMillis=0L;  } else {    long startMillis=DateTimeUtils.getInstantMillis(start);    long endMillis=DateTimeUtils.getInstantMillis(end);    iMillis=FieldUtils.safeAdd(endMillis,-startMillis);  }}  }
class C{  public boolean isError(){  return this.byteBuffer[4] == (byte)0xFF;}  }
class C{  protected AbstractReferenceMap(final ReferenceStrength keyType,final ReferenceStrength valueType,final int capacity,final float loadFactor,final boolean purgeValues){  super(capacity,loadFactor);  this.keyType=keyType;  this.valueType=valueType;  this.purgeValues=purgeValues;}  }
class C{  public CustomChartPanel(List<JFreeChart> charts,ChartLayoutInstructions layoutInstructions){  super();  this.layoutInstructions=layoutInstructions;  for (  JFreeChart chart : charts) {    this.charts.add(chart);  }  createUIComponents();}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  if (this.extensionValue == null) {    this.extensionId=PKIXExtensions.ReasonCode_Id;    this.critical=false;    encodeThis();  }  super.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  private void initialize(){  this.setLayout(new CardLayout());  this.setName(PANEL_NAME);  regexesPanel=new MultipleRegexesOptionsPanel(View.getSingleton().getSessionDialog());  this.add(getPanelSession(),getPanelSession().getName());}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(serialNumber.toString());  sb.append("  On: " + revocationDate.toString());  if (certIssuer != null) {    sb.append("\n    Certificate issuer: " + certIssuer);  }  if (extensions != null) {    Collection<Extension> allEntryExts=extensions.getAllExtensions();    Extension[] exts=allEntryExts.toArray(new Extension[0]);    sb.append("\n    CRL Entry Extensions: " + exts.length);    for (int i=0; i < exts.length; i++) {      sb.append("\n    [" + (i + 1) + "]: ");      Extension ext=exts[i];      try {        if (OIDMap.getClass(ext.getExtensionId()) == null) {          sb.append(ext.toString());          byte[] extValue=ext.getExtensionValue();          if (extValue != null) {            DerOutputStream out=new DerOutputStream();            out.putOctetString(extValue);            extValue=out.toByteArray();            HexDumpEncoder enc=new HexDumpEncoder();            sb.append("Extension unknown: " + "DER encoded OCTET string =\n" + enc.encodeBuffer(extValue) + "\n");          }        } else         sb.append(ext.toString());      } catch (      Exception e) {        sb.append(", Error parsing this extension");      }    }  }  sb.append("\n");  return sb.toString();}  }
class C{  public void invalidateContainerSize(){  colFlowSpecs=null;  invalidateComponentSizes();}  }
class C{  private static String removeSpace(String s){  return s.trim().replace(" ","");}  }
class C{  public byte[] unwrap(byte[] incoming,int offset,int len) throws SaslException {  if (completed) {    throw new IllegalStateException("CRAM-MD5 supports neither integrity nor privacy");  } else {    throw new IllegalStateException("CRAM-MD5 authentication not completed");  }}  }
class C{  void updateBucketMetaFile(long bucketId) throws IOException {  Map<Long,MutableTimeBucketMeta> timeBuckets;synchronized (timeBucketsMeta) {    timeBuckets=timeBucketsMeta.row(bucketId);    Preconditions.checkNotNull(timeBuckets,"timeBuckets");    String tmpFileName=getTmpFileName();    try (DataOutputStream dos=getOutputStream(bucketId,tmpFileName)){      dos.writeInt(META_FILE_VERSION);      dos.writeInt(timeBuckets.size());      for (      Map.Entry<Long,MutableTimeBucketMeta> entry : timeBuckets.entrySet()) {        MutableTimeBucketMeta tbm=entry.getValue();        dos.writeLong(tbm.getTimeBucketId());        dos.writeLong(tbm.getSizeInBytes());        dos.writeLong(tbm.getLastTransferredWindowId());        dos.writeInt(tbm.getFirstKey().length);        dos.write(tbm.getFirstKey().toByteArray());      }    }     rename(bucketId,tmpFileName,META_FILE_NAME);  }}  }
class C{  public void writeFacilityCoordinates(String file){  log.info("Writing facility coordinates to " + file);  BufferedWriter bw=IOUtils.getBufferedWriter(file);  try {    bw.write("FacilityId,Long,Lat,Type");    bw.newLine();    for (    Id<ActivityFacility> id : this.facilities.getFacilities().keySet()) {      ActivityFacility facility=this.facilities.getFacilities().get(id);      bw.write(id.toString());      bw.write(",");      bw.write(String.format("%.0f,%.0f\n",facility.getCoord().getX(),facility.getCoord().getY()));    }  } catch (  IOException e) {    throw new RuntimeException("Could not write to BufferedWriter " + file);  } finally {    try {      bw.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedWriter " + file);    }  }  log.info("Done writing coordinates to file.");}  }
class C{  public QueryInformation(String query){  this.query=query;}  }
class C{  public void normalizeAll(){  for (int nodeIndex=0; nodeIndex < nodes.length; nodeIndex++) {    normalizeNode(nodeIndex);  }}  }
class C{  public int size(){  return attributes.size();}  }
class C{  public static boolean isPointInPolygon(Geo x,float[] poly,boolean polyInDegrees){  if (polyInDegrees) {    return isPointInPolygon(x,GeoArray.Float.createFromLatLonDegrees(poly));  } else {    return isPointInPolygon(x,GeoArray.Float.createFromLatLonRadians(poly));  }}  }
class C{  public static String joinLongs(long[] tokens,String delimiter){  if (tokens == null)   return "";  StringBuilder result=new StringBuilder();  for (int i=0; i < tokens.length; i++) {    if (i > 0 && delimiter != null) {      result.append(delimiter);    }    result.append(String.valueOf(tokens[i]));  }  return result.toString();}  }
class C{  protected int __indirect(int offset){  return offset + bb.getInt(offset);}  }
class C{  public static Object convertStringToObject(String s){  return convertStringToObject(s,new Properties());}  }
class C{  public PlayerProfile(String name,UUID uuid){  this(name,uuid,Collections.emptyList());}  }
class C{  public synchronized void shutdown(){  if (active) {    active=false;    listenersMap.entrySet().forEach(null);    for (    SelectorThread t : selectorThreads) {      t.selector.wakeup();      try {        t.join();      } catch (      InterruptedException e) {      }    }    try {      channelHandlersLock.writeLock().tryLock(CHANNEL_HANDLER_TIMEOUT,TimeUnit.SECONDS);    } catch (    InterruptedException e) {    }    executorService.shutdown();    try {      executorService.awaitTermination(interpreter.persistentConnectionTimeout(),TimeUnit.MILLISECONDS);    } catch (    InterruptedException e) {    }    threadGroup.interrupt();  }}  }
class C{  @Override public Object adapt(Object object,Object type){  if (isFactoryForType(type)) {    Object adapter=super.adapt(object,type);    if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {      return adapter;    }  }  return null;}  }
class C{  protected static Tuple<String,String> createTuple(String one,int two){  return MatsimXmlWriter.createTuple(one,Integer.toString(two));}  }
class C{  public ExecutorCompletionService(Executor executor,BlockingQueue<Future<V>> completionQueue){  if (executor == null || completionQueue == null)   throw new NullPointerException();  this.executor=executor;  this.aes=(executor instanceof AbstractExecutorService) ? (AbstractExecutorService)executor : null;  this.completionQueue=completionQueue;}  }
class C{  public String retrieveURL(){  return m_URL;}  }
class C{  @Entrypoint static boolean instanceOf(Object object,int targetID) throws NoClassDefFoundError {  TypeReference tRef=TypeReference.getTypeRef(targetID);  RVMType lhsType=tRef.peekType();  if (lhsType == null) {    lhsType=tRef.resolve();  }  if (!lhsType.isResolved()) {    lhsType.resolve();  }  if (object == null) {    return false;  }  RVMType rhsType=ObjectModel.getObjectType(object);  if (VM.VerifyAssertions)   VM._assert(rhsType.isResolved());  if (VM.VerifyAssertions)   VM._assert(lhsType.isResolved());  return lhsType == rhsType || DynamicTypeCheck.instanceOfResolved(lhsType,rhsType);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:14.392 -0500",hash_original_method="EF4145D98D5D09EB61112BFE6D9F064E",hash_generated_method="AFF442A41B5EB089E4FCD76C4CDDE7F4") public float estimateX(float time){  return estimate(time,xCoeff);}  }
class C{  public String toString(){  return contact.toString();}  }
class C{  @Override public void notifyProgress(IWorker worker){  if (_listener != null)   _listener.onProgress(worker.getId());}  }
class C{  protected IssueCommentsEntry makeClosingComment(){  Person author=new Person();  author.setName(username);  Updates updates=new Updates();  updates.setStatus(new Status("Fixed"));  IssueCommentsEntry entry=new IssueCommentsEntry();  entry.getAuthors().add(author);  entry.setContent(new HtmlTextConstruct("This was fixed last week."));  entry.setUpdates(updates);  entry.setSendEmail(new SendEmail("False"));  return entry;}  }
class C{  public static long nanosFromDate(long ms){  Calendar cal=CACHED_CALENDAR.get();  cal.clear();  cal.setTimeInMillis(ms);  return nanosFromCalendar(cal);}  }
class C{  public void transformValues(TObjectFunction<V,V> function){  V[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (isFull(values,i)) {      values[i]=wrapNull(function.execute(unwrapNull(values[i])));    }  }}  }
class C{  public static boolean equals(boolean[] a,boolean[] a2){  if (a == a2)   return true;  if (a == null || a2 == null)   return false;  int length=a.length;  if (a2.length != length)   return false;  for (int i=0; i < length; i++)   if (a[i] != a2[i])   return false;  return true;}  }
class C{  public E first(){  return backingMap.firstKey();}  }
class C{  public boolean isInstantiable(){  int modifiers=type.getModifiers();  if (Modifier.isStatic(modifiers)) {    return true;  }  return !type.isMemberClass();}  }
class C{  private String marshal(Marshaller marshaller,Object o) throws IOException {  Writer writer=new StringWriter();  marshaller.marshal(o,new StreamResult(writer));  String xml=writer.toString();  LOGGER.debug("\n" + xml);  return xml;}  }
class C{  public String toString(){  return "MassStorageDevice[name: " + drive_name + ", path: "+ drivePath+ "]";}  }
class C{  protected void writeColumnAutoIncrementStmt(Table table,Column column,StringBuilder ddl){  ddl.append("IDENTITY");}  }
class C{  public static Map deleteOrderItemShipGroup(DispatchContext ctx,Map context) throws GenericEntityException {  Delegator delegator=ctx.getDelegator();  Map<String,Object> result=new HashMap<String,Object>();  GenericValue orderItemShipGroup=(GenericValue)context.get("orderItemShipGroup");  if (UtilValidate.isEmpty(orderItemShipGroup)) {    String orderId=(String)context.get("orderId");    GenericValue orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();    String shipGroupSeqId=(String)context.get("shipGroupSeqId");    if (UtilValidate.isNotEmpty(orderHeader) && UtilValidate.isNotEmpty(shipGroupSeqId)) {      orderItemShipGroup=EntityQuery.use(delegator).from("OrderItemShipGroup").where("orderId",orderId,"shipGroupSeqId",shipGroupSeqId).queryOne();      if (UtilValidate.isEmpty(orderItemShipGroup)) {        return ServiceUtil.returnError("OrderItemShipGroup Does Not Exist");      }    }  }  if (UtilValidate.isNotEmpty(orderItemShipGroup)) {    orderItemShipGroup.remove();    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  }  return result;}  }
class C{  @Override public void updateAsciiStream(int columnIndex,InputStream x,int length) throws SQLException {  updateAsciiStream(columnIndex,x,(long)length);}  }
class C{  public boolean contains(SootMethod method){  return methods.contains(method);}  }
class C{  public void toggle(){  mSlidingMenu.toggle();}  }
class C{  public static void main(String[] args){  PolyglotEngine vm=initializeR(args);  RStartParams startParams=ContextInfo.getContextInfo(vm).getStartParams();  startParams.setEmbedded();  startParams.setLoadInitFile(false);  startParams.setNoRenviron(true);  setupRmainloop(vm);  runRmainloop(vm);}  }
class C{  @Override public String globalInfo(){  return "The Bayesian Classifier Chains (BCC) method.\n" + "Multi-target version of the BCC method (directly applicable).";}  }
class C{  public static String toJSONString(Object value){  if (value == null) {    return "null";  }  if (value instanceof String) {    return "\"" + escape((String)value) + "\"";  }  if (value instanceof Double) {    if (((Double)value).isInfinite() || ((Double)value).isNaN()) {      return "null";    } else {      return value.toString();    }  }  if (value instanceof Float) {    if (((Float)value).isInfinite() || ((Float)value).isNaN()) {      return "null";    } else {      return value.toString();    }  }  if (value instanceof Number) {    return value.toString();  }  if (value instanceof Boolean) {    return value.toString();  }  if ((value instanceof JSONAware)) {    return ((JSONAware)value).toJSONString();  }  if (value instanceof Map) {    return JSONObject.toJSONString((Map)value);  }  if (value instanceof List) {    return JSONArray.toJSONString((List)value);  }  return value.toString();}  }
class C{  public boolean visit(MethodDeclaration node){  boolean isConstr=node.isConstructor();  String methodId=node.getName().getIdentifier();  if (isConstr) {    methodId=methodId + getParamsSig(node);  }  int offset=node.getStartPosition();  int length=node.getLength();  int startLine;  try {    startLine=document.getLineOfOffset(offset);    int endLine=document.getLineOfOffset(offset + length - 1) + 1;    if (fUnreachableSourceMethodMap != null) {      Set<IntRange> ranges=fUnreachableSourceMethodMap.get(methodId);      if (ranges != null) {        for (        IntRange range : ranges) {          if (methodRangeMatches(startLine,endLine,isConstr,range)) {            Position pos=new Position(offset,length);            fDeadCodePositions.add(pos);            return false;          }        }      }    }    if (fTaintedDataMap != null) {      Map<IntRange,Map<String,Set<CallLocationModel>>> rangeMap=fTaintedDataMap.get(methodId);      if (rangeMap != null) {        for (        IntRange range : rangeMap.keySet()) {          if (methodRangeMatches(startLine,endLine,isConstr,range)) {            Map<String,Set<CallLocationModel>> dataMap=rangeMap.get(range);            taintedDataMapStack.push(dataMap);            return true;          }        }      }      taintedDataMapStack.push(Collections.EMPTY_MAP);    }  } catch (  BadLocationException e) {    DroidsafePluginUtilities.showError("Error","Error in visiting method declaration",e);    e.printStackTrace();  }  return true;}  }
class C{  public static HLL generateRandomHLL(){  final int randomTypeInt=randomIntBetween(0,HLLType.values().length - 1);  final HLLType type;switch (randomTypeInt) {case 0:    type=HLLType.EMPTY;  break;case 1:type=HLLType.EXPLICIT;break;case 2:type=HLLType.FULL;break;case 3:type=HLLType.EMPTY;break;case 4:type=HLLType.SPARSE;break;default :throw new RuntimeException("Unassigned type int " + randomTypeInt);}final int cardinalityCap;final int cardinalityBaseline;switch (type) {case EMPTY:return newHLL(HLLType.EMPTY);case EXPLICIT:cardinalityCap=EXPLICIT_THRESHOLD;cardinalityBaseline=1;break;case SPARSE:cardinalityCap=SPARSE_THRESHOLD;cardinalityBaseline=(EXPLICIT_THRESHOLD + 1);break;case FULL:cardinalityCap=100000;cardinalityBaseline=(SPARSE_THRESHOLD * 10);break;default :throw new RuntimeException("We should never be here.");}final HLL hll=newHLL(HLLType.EMPTY);for (int i=0; i < cardinalityBaseline; i++) {hll.addRaw(randomLong());}for (int i=0; i < randomInt(cardinalityCap - cardinalityBaseline); i++) {hll.addRaw(randomLong());}return hll;}  }
class C{  public static void main(String[] args){  parseCmdLine(args);  long start0=System.currentTimeMillis();  TreeNode root=new TreeNode(levels);  long end0=System.currentTimeMillis();  long start1=System.currentTimeMillis();  int result=root.addTree();  long end1=System.currentTimeMillis();  if (printResult || printMsgs) {    System.out.println("Received results of " + result);  }  if (printMsgs) {    System.out.println("Treeadd alloc time " + (end0 - start0) / 1000.0);    System.out.println("Treeadd add time " + (end1 - start1) / 1000.0);    System.out.println("Treeadd total time " + (end1 - start0) / 1000.0);  }  System.out.println("Done!");}  }
class C{  private int indexOf(Object x){  if (x != null) {    if (x instanceof ScheduledFutureTask) {      int i=((ScheduledFutureTask)x).heapIndex;      if (i >= 0 && i < size && queue[i] == x)       return i;    } else {      for (int i=0; i < size; i++)       if (x.equals(queue[i]))       return i;    }  }  return -1;}  }
class C{  protected void finalizeGraph(StructuredGraph graph){  if (!GraalOptions.SnippetCounters.getValue() || graph.getNodes().filter(SnippetCounterNode.class).isEmpty()) {    int sideEffectCount=0;    assert (sideEffectCount=graph.getNodes().filter(null).count()) >= 0;    new ConvertDeoptimizeToGuardPhase().apply(graph,null);    assert sideEffectCount == graph.getNodes().filter(null).count() : "deleted side effecting node";    new DeadCodeEliminationPhase(Required).apply(graph);  } else {  }}  }
class C{  protected char[] resolvePath(char[] basePath,final char[] relPath) throws URIException {  final String base=(basePath == null) ? "" : new String(basePath);  if (relPath == null || relPath.length == 0) {    return normalize(basePath);  } else   if (relPath[0] == '/') {    return normalize(relPath);  } else {    final int at=base.lastIndexOf('/');    if (at != -1) {      basePath=base.substring(0,at + 1).toCharArray();    }    final StringBuffer buff=new StringBuffer(base.length() + relPath.length);    buff.append((at != -1) ? base.substring(0,at + 1) : "/");    buff.append(relPath);    return normalize(buff.toString().toCharArray());  }}  }
class C{  private boolean isSpecialCase(GenericClass clazz){  if (clazz.isAssignableTo(Collection.class))   return true;  if (clazz.isAssignableTo(Map.class))   return true;  if (clazz.isAssignableTo(Number.class))   return true;  return false;}  }
class C{  public void traverseChildren(Consumer<List<ParseTreeNode>> consumer){  consumer.accept(Collections.singletonList(root));  root.traverseChildren(consumer);}  }
class C{  private PcapMerger(){}  }
class C{  public static int showDialog(Component parent,String title){  return showDialog(parent,title,"");}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == Literal.class) {switch (baseOperationID) {case N4JSPackage.LITERAL___GET_VALUE_AS_STRING:      return N4JSPackage.REGULAR_EXPRESSION_LITERAL___GET_VALUE_AS_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  @Override public boolean add(Struct obj){  if (!(obj instanceof StructImpl)) {    throw new IllegalArgumentException(LocalizedStrings.SortedStructSet_THIS_SET_ONLY_ACCEPTS_STRUCTIMPL.toLocalizedString());  }  StructImpl s=(StructImpl)obj;  if (!s.getStructType().equals(this.structType)) {    throw new IllegalArgumentException(LocalizedStrings.SortedStructSet_OBJ_DOES_NOT_HAVE_THE_SAME_STRUCTTYPE.toLocalizedString());  }  return super.add(s);}  }
class C{  private int bitIndex(int index) throws IndexOutOfBoundsException {  if (index < 0 || index >= data.length * 8) {    throw new IndexOutOfBoundsException();  } else {    return index % 8;  }}  }
class C{  private String fieldRefToString(FieldRef fieldRef){  if (fieldRef instanceof InstanceFieldRef) {    InstanceFieldRef instanceFieldRef=(InstanceFieldRef)fieldRef;    Value base=instanceFieldRef.getBase();    String baseStr=(base instanceof FieldRef) ? fieldRefToString((FieldRef)base) : base.toString();    return baseStr + "." + instanceFieldRef.getField().getName();  } else {    StaticFieldRef staticFieldRef=(StaticFieldRef)fieldRef;    String className=staticFieldRef.getFieldRef().declaringClass().getName();    return className + "." + staticFieldRef.getField().getName();  }}  }
class C{  public void delete(int key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    System.arraycopy(mKeys,i + 1,mKeys,i,mSize - (i + 1));    System.arraycopy(mValues,i + 1,mValues,i,mSize - (i + 1));    mSize--;  }}  }
class C{  public static void main(String[] args){  Out out;  out=new Out();  out.println("Test 1");  out.close();  out=new Out("test.txt");  out.println("Test 2");  out.close();}  }
class C{  public boolean isNoImplicitReturns(){  return noImplicitReturns;}  }
class C{  @Nullable public UUID subjectId(){  return subjId;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:55.069 -0500",hash_original_method="0119351D8B397CC03524377768328668",hash_generated_method="694F8F6CDA78A953478E162FD1FBA255") private static boolean isPrintableString(String str){  for (int i=0; i < str.length(); ++i) {    char ch=str.charAt(i);    if (!(ch == 0x20 || ch >= 0x27 && ch <= 0x29 || ch >= 0x2B && ch <= 0x3A || ch == '=' || ch == '?' || ch >= 'A' && ch <= 'Z' || ch >= 'a' && ch <= 'z')) {      return false;    }  }  return true;}  }
class C{  @Override public Model learn(ExampleSet exampleSet) throws OperatorException {  this.runVector=new RunVector();  BayBoostModel ensembleNewBatch=null;  BayBoostModel ensembleExtBatch=null;  final Vector<BayBoostBaseModelInfo> modelInfo=new Vector<BayBoostBaseModelInfo>();  Vector<BayBoostBaseModelInfo> modelInfo2=new Vector<BayBoostBaseModelInfo>();  this.currentIteration=0;  int firstOpenBatch=1;  final Attribute streamControlAttribute;{    Attribute attr=null;    if ((attr=exampleSet.getAttributes().get(STREAM_CONTROL_ATTRIB_NAME)) == null) {      streamControlAttribute=com.rapidminer.example.Tools.createSpecialAttribute(exampleSet,STREAM_CONTROL_ATTRIB_NAME,Ontology.INTEGER);    } else {      streamControlAttribute=attr;      logWarning("Attribute with the (reserved) name of the stream control attribute exists. It is probably an old version created by this operator. Trying to recycle it... ");      Iterator<Example> e=exampleSet.iterator();      while (e.hasNext()) {        e.next().setValue(streamControlAttribute,0);      }    }  }  if (exampleSet.getAttributes().getWeight() == null) {    this.prepareWeights(exampleSet);  }  boolean estimateFavoursExtBatch=true;  Iterator<Example> reader=exampleSet.iterator();  while (reader.hasNext()) {    double[] classPriors=this.prepareBatch(++this.currentIteration,reader,streamControlAttribute);    ConditionedExampleSet trainingSet=new ConditionedExampleSet(exampleSet,new BatchFilterCondition(streamControlAttribute,this.currentIteration));    final EstimatedPerformance estPerf;    if (ensembleExtBatch != null) {      trainingSet=(ConditionedExampleSet)ensembleExtBatch.apply(trainingSet);      this.performance=evaluatePredictions(trainingSet);      trainingSet=(ConditionedExampleSet)ensembleNewBatch.apply(trainingSet);      double newBatchPerformance=evaluatePredictions(trainingSet);      if (estimateFavoursExtBatch == true) {        estPerf=new EstimatedPerformance("accuracy",this.performance,trainingSet.size(),false);      } else {        estPerf=new EstimatedPerformance("accuracy",newBatchPerformance,trainingSet.size(),false);      }      if (newBatchPerformance > this.performance) {        this.performance=newBatchPerformance;        firstOpenBatch=Math.max(1,this.currentIteration - 1);      } else {        modelInfo.clear();        modelInfo.addAll(modelInfo2);      }    } else     if (ensembleNewBatch != null) {      trainingSet=(ConditionedExampleSet)ensembleNewBatch.apply(trainingSet);      this.performance=evaluatePredictions(trainingSet);      firstOpenBatch=Math.max(1,this.currentIteration - 1);      estPerf=new EstimatedPerformance("accuracy",this.performance,trainingSet.size(),false);    } else {      estPerf=null;    }    if (estPerf != null) {      PerformanceVector perf=new PerformanceVector();      perf.addAveragable(estPerf);      this.runVector.addVector(perf);    }    if (this.getParameterAsBoolean(PARAMETER_RESCALE_LABEL_PRIORS) == true) {      this.rescalePriors(trainingSet,classPriors);    }    estimateFavoursExtBatch=true;    if (modelInfo.size() > 0) {      modelInfo2=new Vector<BayBoostBaseModelInfo>();      for (      BayBoostBaseModelInfo bbbmi : modelInfo) {        modelInfo2.add(bbbmi);      }      final double holdOutRatio=this.getParameterAsDouble(PARAMETER_FRACTION_HOLD_OUT_SET);      Vector<Example> holdOutExamples=new Vector<Example>();      if (holdOutRatio > 0) {        RandomGenerator random=RandomGenerator.getRandomGenerator(this);        Iterator<Example> randBatchReader=trainingSet.iterator();        while (randBatchReader.hasNext()) {          Example example=randBatchReader.next();          if (random.nextDoubleInRange(0,1) <= holdOutRatio) {            example.setValue(streamControlAttribute,0);            holdOutExamples.add(example);          }        }      }      boolean trainingExamplesLeft=this.adjustBaseModelWeights(trainingSet,modelInfo);      if (trainingExamplesLeft) {        if (!this.trainAdditionalModel(trainingSet,modelInfo)) {        }      }      ensembleNewBatch=new BayBoostModel(exampleSet,modelInfo,classPriors);      ExampleSet extendedBatch=new ConditionedExampleSet(exampleSet,new BatchFilterCondition(streamControlAttribute,firstOpenBatch));      classPriors=this.prepareExtendedBatch(extendedBatch);      if (this.getParameterAsBoolean(PARAMETER_RESCALE_LABEL_PRIORS) == true) {        this.rescalePriors(extendedBatch,classPriors);      }      modelInfo2.remove(modelInfo2.size() - 1);      trainingExamplesLeft=this.adjustBaseModelWeights(extendedBatch,modelInfo2);      if (trainingExamplesLeft == false) {        ensembleExtBatch=new BayBoostModel(exampleSet,modelInfo2,classPriors);      } else {        boolean success=this.trainAdditionalModel(extendedBatch,modelInfo2);        if (success) {          ensembleExtBatch=new BayBoostModel(exampleSet,modelInfo2,classPriors);        } else {          ensembleExtBatch=null;          estimateFavoursExtBatch=false;        }      }      if (holdOutRatio > 0) {        Iterator hoEit=holdOutExamples.iterator();        while (hoEit.hasNext()) {          ((Example)hoEit.next()).setValue(streamControlAttribute,this.currentIteration);        }        if (ensembleExtBatch != null) {          trainingSet=(ConditionedExampleSet)ensembleNewBatch.apply(trainingSet);          hoEit=holdOutExamples.iterator();          int errors=0;          while (hoEit.hasNext()) {            Example example=(Example)hoEit.next();            if (example.getPredictedLabel() != example.getLabel()) {              errors++;            }          }          double newBatchErr=(double)errors / holdOutExamples.size();          trainingSet=(ConditionedExampleSet)ensembleExtBatch.apply(trainingSet);          hoEit=holdOutExamples.iterator();          errors=0;          while (hoEit.hasNext()) {            Example example=(Example)hoEit.next();            if (example.getPredictedLabel() != example.getLabel()) {              errors++;            }          }          double extBatchErr=(double)errors / holdOutExamples.size();          estimateFavoursExtBatch=extBatchErr <= newBatchErr;          if (estimateFavoursExtBatch) {            ensembleExtBatch=this.retrainLastWeight(ensembleExtBatch,trainingSet,holdOutExamples);          } else {            ensembleNewBatch=this.retrainLastWeight(ensembleNewBatch,trainingSet,holdOutExamples);          }        } else {          ensembleNewBatch=this.retrainLastWeight(ensembleNewBatch,trainingSet,holdOutExamples);        }      }    } else {      this.trainAdditionalModel(trainingSet,modelInfo);      ensembleNewBatch=new BayBoostModel(exampleSet,modelInfo,classPriors);      ensembleExtBatch=null;      estimateFavoursExtBatch=false;    }  }  this.restoreOldWeights(exampleSet);  return ensembleExtBatch == null ? ensembleNewBatch : ensembleExtBatch;}  }
class C{  public boolean isSetData(){  return this.data != null;}  }
class C{  public final void edit(){  EditSensorDialog d=new EditSensorDialog(sensor);  d.setBounds(100,100,450,500);  d.setVisible(true);}  }
class C{  TableWriterServiceImpl(TableKelp table,StoreReadWrite store,SegmentService segmentService){  Objects.requireNonNull(table);  Objects.requireNonNull(store);  _table=table;  _segmentService=segmentService;  _store=store;  _nodeStream=new SegmentStream();  _segmentSizeNew=table.database().getSegmentSizeMin();  _segmentSizeGc=table.database().getSegmentSizeMin();  _compressor=_segmentService.compressor();  Objects.requireNonNull(_compressor);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.SETTER_DECLARATION___GET_DEFINED_ACCESSOR:    return getDefinedAccessor();case N4JSPackage.SETTER_DECLARATION___GET_DECLARED_TYPE_REF:  return getDeclaredTypeRef();}return super.eInvoke(operationID,arguments);}  }
class C{  public boolean containsKey(Object key){  return internalMap.containsKey(key);}  }
class C{  private ClearAction(){  super("Clear");}  }
class C{  public boolean isShowNotDue(){  Object oo=get_Value(COLUMNNAME_IsShowNotDue);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  static void printarray(PrintStream out,String name,int expectedLen,double[] array){  out.println(name + "=");  checkLen(expectedLen,array.length);  out.println(TABLE_START_DECL);  for (  double d : array) {    out.printf("        %s%n",format(d));  }  out.println(TABLE_END_DECL);}  }
class C{  private void _scheduleAfter(Activity before,Activity after){  before.addActivityListener(new ScheduleAfterActivity(after,true));}  }
class C{  public RsFluent withType(final CharSequence ctype){  return new RsFluent(new RsWithType(this,ctype));}  }
class C{  public void paintComponent(Graphics g){  super.paintComponent(g);  int multiplier=getZoomMultiplier();  double binPixelWidth=getBinPixelWidth(multiplier);  int offset=(int)(getPixelOffset(multiplier) - binPixelWidth);  g.drawImage(mWaterfallImage,offset,0,(getWidth() * multiplier) + (int)binPixelWidth,mImageHeight,this);  Graphics2D graphics=(Graphics2D)g;  graphics.setColor(mColorSpectrumCursor);  if (mCursorVisible) {    graphics.draw(new Line2D.Float(mCursorLocation.x,0,mCursorLocation.x,(float)(getSize().getHeight())));    String frequency=CURSOR_FORMAT.format(mCursorFrequency / 1000000.0D);    graphics.drawString(frequency,mCursorLocation.x + 5,mCursorLocation.y);  }  if (mPaused) {    graphics.drawString(PAUSED,20,20);  }  paintZoomIndicator(graphics);  graphics.dispose();}  }
class C{  public Observation(int[] cps){  this.cps=new int[cps.length];  for (int i=0; i < cps.length; i++) {    this.cps[i]=cps[i];  }}  }
class C{  protected void generateAttributes(List<XmlWriter.Attribute> attrs,AttributeGenerator generator){  for (  Map.Entry<String,String> entry : generator.entrySet()) {    String value=entry.getValue();    if (value != null) {      attrs.add(new XmlWriter.Attribute(entry.getKey(),value));    }  }}  }
class C{  private void compileMove(final IGame game,final Entity entity,MoveStep prev){  IHex destHex=game.getBoard().getHex(getPosition());  if (Compute.canMoveOnPavement(game,prev.getPosition(),getPosition(),this)) {    setPavementStep(true);  } else {    setPavementStep(false);    setOnlyPavement(false);  }  setHasJustStood(false);  if (prev.isThisStepBackwards() != isThisStepBackwards()) {    setDistance(0);  }  addDistance(1);  if (entity.isAirborne() && game.getBoard().onGround()) {    setNMoved(getNMoved() + 1);    if ((entity.getMovementMode() != EntityMovementMode.SPHEROID) && (getNMoved() >= 16)) {      setVelocityLeft(getVelocityLeft() - 1);      setNMoved(0);    }  } else   if (entity.isAirborne() && !game.useVectorMove() && !useSpheroidAtmosphere(game,entity)) {    setVelocityLeft(getVelocityLeft() - 1);    setNTurns(0);  }  if (useAeroAtmosphere(game,entity)) {    setNStraight(getNStraight() + 1);    if (game.getBoard().onGround() && (getNStraight() > 7)) {      setNTurns(0);    }    if (!hasFreeTurn()) {      if (dueFreeTurn()) {        setFreeTurn(true);      }    }  }  if (getType() == MoveStepType.DFA) {    IHex hex=game.getBoard().getHex(getPosition());    setElevation(Math.max(0,hex.terrainLevel(Terrains.BLDG_ELEV)));    int otherEl=0;    IHex hex2=game.getBoard().getHex(prev.getPosition());    otherEl=Math.max(0,hex2.terrainLevel(Terrains.BLDG_ELEV));    if (otherEl > getElevation()) {      setElevation(otherEl);    }    setElevation(getElevation() + 1);  } else   if (isJumping()) {    IHex hex=game.getBoard().getHex(getPosition());    int maxElevation=(entity.getJumpMP() + entity.getElevation() + game.getBoard().getHex(entity.getPosition()).surface()) - hex.surface();    int building=hex.terrainLevel(Terrains.BLDG_ELEV);    int depth=-hex.depth(true);    if ((hex.containsTerrain(Terrains.ICE) && hex.containsTerrain(Terrains.WATER)) || (entity.getMovementMode() == EntityMovementMode.HOVER)) {      depth=0;    }    boolean grdDropship=false;    if (building < 10) {      for (      Entity inHex : game.getEntitiesVector(getPosition())) {        if (inHex.equals(entity)) {          continue;        }        if ((inHex instanceof Dropship) && !inHex.isAirborne() && !inHex.isSpaceborne()) {          building=10;          grdDropship=true;        }      }    }    if ((entity instanceof Infantry) && !grdDropship) {      setElevation(Math.max(depth,Math.min(building,maxElevation)));    } else {      setElevation(Math.max(depth,building));    }    if (climbMode() && (maxElevation >= hex.terrainLevel(Terrains.BRIDGE_ELEV))) {      setElevation(Math.max(getElevation(),hex.terrainLevel(Terrains.BRIDGE_ELEV)));    }  } else {    Building bld=game.getBoard().getBuildingAt(getPosition());    if (bld != null) {      IHex hex=game.getBoard().getHex(getPosition());      int maxElevation=(entity.getElevation() + game.getBoard().getHex(entity.getPosition()).surface()) - hex.surface();      if (entity instanceof Mech) {        maxElevation+=2;      } else {        maxElevation++;      }      if (bld.getType() == Building.WALL) {        if (maxElevation >= hex.terrainLevel(Terrains.BLDG_ELEV)) {          setElevation(Math.max(getElevation(),hex.terrainLevel(Terrains.BLDG_ELEV)));        } else {          return;        }      } else {        setElevation(entity.calcElevation(game.getBoard().getHex(prev.getPosition()),game.getBoard().getHex(getPosition()),elevation,climbMode(),(entity.getMovementMode() == EntityMovementMode.WIGE) && (prev.getType() == MoveStepType.CLIMB_MODE_OFF)));      }    } else {      setElevation(entity.calcElevation(game.getBoard().getHex(prev.getPosition()),game.getBoard().getHex(getPosition()),elevation,climbMode(),(entity.getMovementMode() == EntityMovementMode.WIGE) && (prev.getType() == MoveStepType.CLIMB_MODE_OFF)));    }  }  if (entity.isAirborne()) {    setMp(0);    if (useSpheroidAtmosphere(game,entity)) {      if (game.getBoard().onGround()) {        if ((distance % 8) == 1) {          setMp(1);        }      } else {        setMp(2);      }    }  } else {    calcMovementCostFor(game,prev);  }  if (!isPavementStep() && (destHex.terrainLevel(Terrains.WATER) > 0) && !(destHex.containsTerrain(Terrains.ICE) && (elevation >= 0))&& !(destHex.terrainLevel(Terrains.BRIDGE_ELEV) == elevation)&& (entity.getMovementMode() != EntityMovementMode.HOVER)&& (entity.getMovementMode() != EntityMovementMode.NAVAL)&& (entity.getMovementMode() != EntityMovementMode.HYDROFOIL)&& (entity.getMovementMode() != EntityMovementMode.INF_UMU)&& (entity.getMovementMode() != EntityMovementMode.SUBMARINE)&& (entity.getMovementMode() != EntityMovementMode.VTOL)&& (entity.getMovementMode() != EntityMovementMode.WIGE)) {    setRunProhibited(true);  }  if (entity.getMovedBackwards() && !entity.hasQuirk(OptionsConstants.QUIRK_POS_POWER_REVERSE)) {    setRunProhibited(true);  }  int magmaLevel=destHex.terrainLevel(Terrains.MAGMA);  if (elevation > 0) {    magmaLevel=0;  }  if (destHex.containsTerrain(Terrains.FIRE) || (magmaLevel == 1)) {    heat=2;    totalHeat+=2;  } else   if (magmaLevel == 2) {    heat=5;    totalHeat+=5;  }  if ((entity instanceof Dropship) && !entity.isAirborne()) {    ArrayList<Coords> secondaryPositions=new ArrayList<Coords>();    secondaryPositions.add(getPosition());    for (int dir=0; dir < 6; dir++) {      secondaryPositions.add(getPosition().translated(dir));    }    for (    Coords pos : secondaryPositions) {      Building bld=game.getBoard().getBuildingAt(pos);      if (bld != null) {        crushedBuildingLocs.add(pos);        danger=true;      }    }  }}  }
class C{  public PropertyPath(String name){  this.name=name;}  }
class C{  public void useXFA(final boolean useXFA){  this.useXFA=useXFA;}  }
class C{  private RelocationChecker(){}  }
class C{  public CPreviousDirectoriesBox(final List<String> previousDirectories){  for (  final String directory : previousDirectories) {    addItem(directory);  }}  }
class C{  public boolean isIncludeNullsActivity(){  Object oo=get_Value(COLUMNNAME_IsIncludeNullsActivity);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public SQLException(Throwable theCause){  this(theCause == null ? null : theCause.toString(),null,0,theCause);}  }
class C{  public Context initControlContext() throws Exception {  return new VelocityContext();}  }
class C{  public int transformToRTF(ElemTemplateElement templateParent) throws TransformerException {  DTM dtmFrag=m_xcontext.getRTFDTM();  return transformToRTF(templateParent,dtmFrag);}  }
class C{  public float dot(Quaternionf otherQuat){  return this.x * otherQuat.x + this.y * otherQuat.y + this.z * otherQuat.z + this.w * otherQuat.w;}  }
class C{  public String subtype(){  return subtype;}  }
class C{  public void testDisconnect_NonBlockWithServerServerClosed() throws IOException {  this.channel1.configureBlocking(false);  assertFalse(this.channel1.isBlocking());  connectLocalServer();  this.datagramSocket1.close();  assertTrue(this.channel1.isOpen());  assertTrue(this.channel1.isConnected());  disconnectAfterConnected();}  }
class C{  public SingleAgentMeasureDiscreteInContextOfPastCalculator(int base,int history){  super(base,history);}  }
class C{  public static ScoredGraphsWrapper serializableInstance(){  return new ScoredGraphsWrapper(PcRunner.serializableInstance(),new Parameters());}  }
class C{  public GitlabProject updateProject(Integer projectId,String name,String description,Boolean issuesEnabled,Boolean wallEnabled,Boolean mergeRequestsEnabled,Boolean wikiEnabled,Boolean snippetsEnabled,Boolean publik,Integer visibilityLevel) throws IOException {  Query query=new Query().appendIf("name",name).appendIf("description",description).appendIf("issues_enabled",issuesEnabled).appendIf("wall_enabled",wallEnabled).appendIf("merge_requests_enabled",mergeRequestsEnabled).appendIf("wiki_enabled",wikiEnabled).appendIf("snippets_enabled",snippetsEnabled).appendIf("public",publik).appendIf("visibility_level",visibilityLevel);  String tailUrl=GitlabProject.URL + "/" + projectId+ query.toString();  return retrieve().method("PUT").to(tailUrl,GitlabProject.class);}  }
class C{  public static ReminderEntry valueOf(int minutes,int method){  return new ReminderEntry(minutes,method);}  }
class C{  private void cacheStyle(List styles,SynthStyle style){  BakedArrayList cachedStyles=new BakedArrayList(styles);  _resolvedStyles.put(cachedStyles,style);}  }
class C{  public static void dumpCurrentRow(Cursor cursor,StringBuilder sb){  String[] cols=cursor.getColumnNames();  sb.append("" + cursor.getPosition() + " {\n");  int length=cols.length;  for (int i=0; i < length; i++) {    String value;    try {      value=cursor.getString(i);    } catch (    SQLiteException e) {      value="<unprintable>";    }    sb.append("   " + cols[i] + '='+ value+ "\n");  }  sb.append("}\n");}  }
class C{  public void processAll() throws IOException {  ListIterator<Entry> i=paintList.listIterator();  while (i.hasNext()) {    Entry e=(Entry)i.next();    if (!e.written) {      e.written=true;      if (e.paint instanceof GradientPaint) {        addGradientPaint(e);      } else       if (e.paint instanceof TexturePaint) {        addTexturePaint(e);      } else {        System.err.println("PDFWriter: Paint of class '" + e.paint.getClass() + "' not supported.");      }    }  }}  }
class C{  @PostConstruct public void init() throws ConfigException, IOException {  if (_path != null) {    _rotateStream=RotateStream.create(_path);  } else   if (_pathFormat != null) {    _rotateStream=RotateStream.create(_pathFormat);  } else {    throw new ConfigException(L.l("'path' is a required attribute of <{0}>.  Each <{0}> must configure the destination stream.",getTagName()));  }  if (_path != null && Files.exists(_path) && !Files.isReadable(_path) && (_rolloverPeriod != null || _rolloverSize != null || _archiveFormat != null)) {    throw new ConfigException(L.l("log path '{0}' is not readable and therefore cannot be rotated.",_path.toUri()));  }  RolloverLogBase rolloverLog=_rotateStream.getRolloverLog();  if (_rolloverPeriod != null) {    rolloverLog.setRolloverPeriod(_rolloverPeriod);  }  if (_rolloverSize != null) {    rolloverLog.setRolloverSize(_rolloverSize);  }  _rotateStream.setMaxRolloverCount(_rolloverCount);  if (_archiveFormat != null) {    rolloverLog.setArchiveFormat(_archiveFormat);  }  _rotateStream.init();}  }
class C{  public String[] parsePaths(String path){  String[] ret=null;  String tok=";";  if (path != null) {    if (Debug.debugging("vpfspecialist")) {      System.out.println("VPFSpecialist: parsing path string: " + path);    }    try {      StringTokenizer token=new StringTokenizer(path,tok);      int numPaths=token.countTokens();      ret=new String[numPaths];      for (int i=0; i < numPaths; i++) {        ret[i]=token.nextToken();      }      return ret;    } catch (    java.util.NoSuchElementException e) {      e.printStackTrace();    }  }  return ret;}  }
class C{  public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize,ThreadFactory threadFactory){  return new ScheduledThreadPoolExecutor(corePoolSize,threadFactory);}  }
class C{  public static void printUserSites(WebmasterToolsService myService) throws ServiceException, IOException {  try {    System.out.println("Printing user's sites:");    URL feedUrl=getSitesFeedUrl();    SitesFeed sitesResultFeed=myService.getFeed(feedUrl,SitesFeed.class);    for (    SitesEntry entry : sitesResultFeed.getEntries()) {      System.out.println("\t" + entry.getTitle().getPlainText());    }  } catch (  MalformedURLException e) {    throw new IOException("URL for sites feed is malformed.");  }}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tRandom number seed.\n" + "\t(default 1)","S",1,"-S <num>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public LinkedHashMapPro(int initialCapacity){  super(initialCapacity);  accessOrder=false;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == StructuralTypeRef.class) {switch (derivedFeatureID) {case TypeRefsPackage.BOUND_THIS_TYPE_REF__AST_STRUCTURAL_MEMBERS:      return TypeRefsPackage.STRUCTURAL_TYPE_REF__AST_STRUCTURAL_MEMBERS;case TypeRefsPackage.BOUND_THIS_TYPE_REF__STRUCTURAL_TYPE:    return TypeRefsPackage.STRUCTURAL_TYPE_REF__STRUCTURAL_TYPE;case TypeRefsPackage.BOUND_THIS_TYPE_REF__GEN_STRUCTURAL_MEMBERS:  return TypeRefsPackage.STRUCTURAL_TYPE_REF__GEN_STRUCTURAL_MEMBERS;case TypeRefsPackage.BOUND_THIS_TYPE_REF__POSTPONED_SUBSTITUTIONS:return TypeRefsPackage.STRUCTURAL_TYPE_REF__POSTPONED_SUBSTITUTIONS;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if (argNum != 0)   reportWrongNumberArgs();}  }
class C{  public static void writeJSONString(List list,Writer out) throws IOException {  if (list == null) {    out.write("null");    return;  }  boolean first=true;  Iterator iter=list.iterator();  out.write('[');  while (iter.hasNext()) {    if (first)     first=false; else     out.write(',');    Object value=iter.next();    if (value == null) {      out.write("null");      continue;    }    JSONValue.writeJSONString(value,out);  }  out.write(']');}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.245 -0500",hash_original_method="57AD0B4E4FE03197F2B52972D6060CBA",hash_generated_method="40A032A3A8D301529979F4966F793C9E") public ReasonHeader createReasonHeader(String protocol,int cause,String text) throws InvalidArgumentException, ParseException {  if (protocol == null)   throw new NullPointerException("bad protocol arg");  if (cause < 0)   throw new InvalidArgumentException("bad cause");  Reason reason=new Reason();  reason.setProtocol(protocol);  reason.setCause(cause);  reason.setText(text);  return reason;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodevalue09.class,args);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public boolean isAlbatrosRelease(){  return (GsmaRelease.ALBATROS.equals(getGsmaRelease()));}  }
class C{  public void addBiome(BiomeGenBase biome){  ArrayList<BiomeGenBase> biomes=new ArrayList<BiomeGenBase>();  biomes.add(biome);  allowedBiomes.addAll(getBiomesEntries(biomes));}  }
class C{  @DSComment("exception message, is only a data structure") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.628 -0500",hash_original_method="9DCF8CB18681541ED5194D8FB0295B7F",hash_generated_method="837332240A809019E15EECCF3637FEBC") public InterruptedIOException(String detailMessage){  super(detailMessage);}  }
class C{  private boolean doEmit(){  return tupleAvailable;}  }
class C{  static boolean hasAlertFiredInSharedPrefs(Context context,long eventId,long beginTime,long alarmTime){  SharedPreferences prefs=getFiredAlertsTable(context);  return prefs.contains(getFiredAlertsKey(eventId,beginTime,alarmTime));}  }
class C{  public Statm statm() throws IOException {  return Statm.get(pid);}  }
class C{  public static void downto(Double self,Number to,@ClosureParams(FirstParam.class) Closure closure){  double to1=to.doubleValue();  if (self >= to1) {    for (double i=self; i >= to1; i--) {      closure.call(i);    }  } else   throw new GroovyRuntimeException("The argument (" + to + ") to downto() cannot be greater than the value ("+ self+ ") it's called on.");}  }
class C{  private void initStaticResourcesProductionFilter(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Registering static resources production Filter");  FilterRegistration.Dynamic staticResourcesProductionFilter=servletContext.addFilter("staticResourcesProductionFilter",new StaticResourcesProductionFilter());  staticResourcesProductionFilter.addMappingForUrlPatterns(disps,true,"/");  staticResourcesProductionFilter.addMappingForUrlPatterns(disps,true,"/index.html");  staticResourcesProductionFilter.addMappingForUrlPatterns(disps,true,"/assets/*");  staticResourcesProductionFilter.addMappingForUrlPatterns(disps,true,"/scripts/*");  staticResourcesProductionFilter.setAsyncSupported(true);}  }
class C{  public boolean test(String testPattern,String value,char escapeChar){  initPattern(testPattern,escapeChar);  if (invalidPattern) {    return false;  }  return compareAt(value,0,0,value.length(),patternChars,patternTypes);}  }
class C{  private void openPatientList(){  waitForProgressFragment();  click(viewWithId(R.id.location_selection_all_patients));  waitForProgressFragment();}  }
class C{  private int calcAlpha(){  int alpha=255;  if (mSafeZone == null || mSafeZone.right == mSafeZone.left) {  } else {    int backWidth=mSafeZone.right - mConf.getThumbWidth() - mSafeZone.left;    if (backWidth > 0) {      alpha=(mThumbZone.left - mSafeZone.left) * 255 / backWidth;    }  }  return alpha;}  }
class C{  public void focusGained(FocusEvent e){  if (m_text != null)   m_text.selectAll();}  }
class C{  public String chooseEngineClientAlias(String[] keyType,Principal[] issuers,SSLEngine engine){  return null;}  }
class C{  @Override public ExpectedPartitionValuesInformation createExpectedPartitionValues(ExpectedPartitionValuesCreateRequest expectedPartitionValuesCreateRequest){  validateExpectedPartitionValuesCreateRequest(expectedPartitionValuesCreateRequest);  PartitionKeyGroupEntity partitionKeyGroupEntity=partitionKeyGroupDaoHelper.getPartitionKeyGroupEntity(expectedPartitionValuesCreateRequest.getPartitionKeyGroupKey());  Map<String,ExpectedPartitionValueEntity> expectedPartitionValueEntityMap=getExpectedPartitionValueEntityMap(partitionKeyGroupEntity.getExpectedPartitionValues());  for (  String expectedPartitionValue : expectedPartitionValuesCreateRequest.getExpectedPartitionValues()) {    if (expectedPartitionValueEntityMap.containsKey(expectedPartitionValue)) {      throw new IllegalArgumentException(String.format("Expected partition value \"%s\" already exists in \"%s\" partition key group.",expectedPartitionValue,partitionKeyGroupEntity.getPartitionKeyGroupName()));    }  }  Collection<ExpectedPartitionValueEntity> createdExpectedPartitionValueEntities=new ArrayList<>();  for (  String expectedPartitionValue : expectedPartitionValuesCreateRequest.getExpectedPartitionValues()) {    ExpectedPartitionValueEntity expectedPartitionValueEntity=new ExpectedPartitionValueEntity();    createdExpectedPartitionValueEntities.add(expectedPartitionValueEntity);    expectedPartitionValueEntity.setPartitionKeyGroup(partitionKeyGroupEntity);    expectedPartitionValueEntity.setPartitionValue(expectedPartitionValue);    expectedPartitionValueDao.saveAndRefresh(expectedPartitionValueEntity);  }  expectedPartitionValueDao.saveAndRefresh(partitionKeyGroupEntity);  return createExpectedPartitionValuesInformationFromEntities(partitionKeyGroupEntity,createdExpectedPartitionValueEntities);}  }
class C{  public long majorIndex(){  return majorIndex;}  }
class C{  private void onTrigger4(){  addInstruction(R.string.accessibility_tutorial_lesson_5_text_5,true);  mLayout.setAccessibilityDelegate(mMoveCursorToEndDelegate);}  }
class C{  public void mouseMoved(MouseEvent e){  mouseSupport.fireMapMouseMoved(e);  if (e.getSource() instanceof MapBean) {    if (drawDistanceObjects && theMap != null) {      double lat1, lat2, long1, long2;      rPoint2=theMap.getCoordinates(e);      theMap.repaint();      if (infoDelegator != null) {        Debug.message("mousemodedetail","DistanceMouseMode: firing mouse location");        lat1=rPoint1.getY();        long1=rPoint1.getX();        lat2=rPoint2.getY();        long2=rPoint2.getX();        distance=GreatCircle.sphericalDistance(ProjMath.degToRad(lat1),ProjMath.degToRad(long1),ProjMath.degToRad(lat2),ProjMath.degToRad(long2));        double azimuth=getSphericalAzimuth(lat1,long1,lat2,long2);        double tmpDistance=totalDistance + distance;        String infoLine=createDistanceInformationLine(rPoint2,tmpDistance,azimuth);        InfoDisplayEvent info=new InfoDisplayEvent(this,infoLine,InformationDelegator.COORDINATE_INFO_LINE);        infoDelegator.requestInfoLine(info);      }    } else {      fireMouseLocation(e);    }  }}  }
class C{  public Trace(){  super(Harness.options,"Trace","Harness debugging trace options",org.mmtk.harness.lang.Trace.itemNames(),System.getProperty("mmtk.harness.trace",""));}  }
class C{  public SpiderParam(){}  }
class C{  private static <T extends AbstractBlockBase<T>>void addBlock(T header,List<T> order){  assert !order.contains(header) : "Cannot insert block twice";  order.add(header);}  }
class C{  private void populateFromCentralDirectory() throws IOException {  positionAtCentralDirectory();  byte[] cfh=new byte[CFH_LEN];  byte[] signatureBytes=new byte[4];  archive.readFully(signatureBytes);  ZipLong sig=new ZipLong(signatureBytes);  while (sig.equals(ZipOutputStream.CFH_SIG)) {    archive.readFully(cfh);    int off=0;    ZipEntry ze=new ZipEntry();    ZipShort versionMadeBy=new ZipShort(cfh,off);    off+=2;    ze.setPlatform((versionMadeBy.getValue() >> 8) & 0x0F);    off+=4;    ze.setMethod((new ZipShort(cfh,off)).getValue());    off+=2;    ze.setTime(fromDosTime(new ZipLong(cfh,off)).getTime());    off+=4;    ze.setCrc((new ZipLong(cfh,off)).getValue());    off+=4;    ze.setCompressedSize((new ZipLong(cfh,off)).getValue());    off+=4;    ze.setSize((new ZipLong(cfh,off)).getValue());    off+=4;    int fileNameLen=(new ZipShort(cfh,off)).getValue();    off+=2;    int extraLen=(new ZipShort(cfh,off)).getValue();    off+=2;    int commentLen=(new ZipShort(cfh,off)).getValue();    off+=2;    off+=2;    ze.setInternalAttributes((new ZipShort(cfh,off)).getValue());    off+=2;    ze.setExternalAttributes((new ZipLong(cfh,off)).getValue());    off+=4;    entries.put(ze,new Long((new ZipLong(cfh,off)).getValue()));    byte[] fileName=new byte[fileNameLen];    archive.readFully(fileName);    ze.setName(getString(fileName));    nameMap.put(ze.getName(),ze);    archive.skipBytes(extraLen);    byte[] comment=new byte[commentLen];    archive.readFully(comment);    ze.setComment(getString(comment));    archive.readFully(signatureBytes);    sig=new ZipLong(signatureBytes);  }}  }
class C{  @SuppressWarnings("unchecked") public ConcurrentHashMap(int initialCapacity,float loadFactor,int concurrencyLevel){  if (!(loadFactor > 0) || initialCapacity < 0 || concurrencyLevel <= 0)   throw new IllegalArgumentException();  if (concurrencyLevel > MAX_SEGMENTS)   concurrencyLevel=MAX_SEGMENTS;  int sshift=0;  int ssize=1;  while (ssize < concurrencyLevel) {    ++sshift;    ssize<<=1;  }  this.segmentShift=32 - sshift;  this.segmentMask=ssize - 1;  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  int c=initialCapacity / ssize;  if (c * ssize < initialCapacity)   ++c;  int cap=MIN_SEGMENT_TABLE_CAPACITY;  while (cap < c)   cap<<=1;  Segment<K,V> s0=new Segment<K,V>(loadFactor,(int)(cap * loadFactor),(HashEntry<K,V>[])new HashEntry<?,?>[cap]);  Segment<K,V>[] ss=(Segment<K,V>[])new Segment<?,?>[ssize];  UNSAFE.putOrderedObject(ss,SBASE,s0);  this.segments=ss;}  }
class C{  @Override protected Date handleUnparsableDateString(final String value) throws ConversionException {  try {    return durationFormat.parse(value);  } catch (  final ParseException e1) {    try {      return additionalFormat.parse("000000".substring(value.length() <= 6 ? value.length() : 6) + value);    } catch (    final ParseException e2) {    }  }  throw new ConversionException("input is not in HH:MM:SS format.");}  }
class C{  public static AuthToken basic(String username,String password,String realm){  return new InternalAuthToken(parameters("scheme","basic","principal",username,"credentials",password,"realm",realm).asMap(Values.ofValue()));}  }
class C{  public static void main(String[] a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public JSONObject(Map map){  super(map);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public void receive(float newSample){  mBuffer.set(mBufferPointer,newSample);  mBufferPointer++;  if (mBufferPointer >= mBufferSize) {    mBufferPointer=0;  }  float accumulator=0;  accumulator+=mCoefficients[mCenterCoefficient] * mBuffer.get(mIndexMap[mBufferPointer][mCenterCoefficientMapIndex]);  for (int x=0; x < mCenterCoefficientMapIndex; x+=2) {    accumulator+=mCoefficients[x] * (mBuffer.get(mIndexMap[mBufferPointer][x]) + mBuffer.get(mIndexMap[mBufferPointer][x + 1]));  }  if (mListener != null) {    mListener.receive((float)(accumulator * mGain));  }}  }
class C{  private List<E> insert(E e,List<E> tuple,int i){  List<E> extTuple=new ArrayList<>(tuple);  if (i < tuple.size()) {    extTuple.add(i,e);  } else {    extTuple.add(e);  }  return extTuple;}  }
class C{  public boolean replaceIn(final StringBuilder source){  if (source == null) {    return false;  }  return replaceIn(source,0,source.length());}  }
class C{  private void rollbackIfCorrupted(ChcpError error){  if (error != ChcpError.LOCAL_VERSION_OF_APPLICATION_CONFIG_NOT_FOUND && error != ChcpError.LOCAL_VERSION_OF_MANIFEST_NOT_FOUND) {    return;  }  if (pluginInternalPrefs.getPreviousReleaseVersionName().length() > 0) {    Log.d("CHCP","Current release is corrupted, trying to rollback to the previous one");    rollbackToPreviousRelease();  } else {    Log.d("CHCP","Current release is corrupted, reinstalling www folder from assets");    installWwwFolder();  }}  }
class C{  public void visitEnd(){  if (mv != null) {    mv.visitEnd();  }}  }
class C{  public Message checkout(){  Message message=pool.poll();  if (message == null) {    if (createdCount >= warnThreshold) {      if (leakTracing) {        PhantomRef<? extends Message> pr=(PhantomRef<? extends Message>)leakQueue.poll();        if (pr != null) {          logger.error("Message leaked: id={} type={} refCount={} size={}",pr.id,pr.type,pr.refCount.get(),pr.size);          pr.clear();          phantomRefs.remove(pr);        }      }      message=pool.poll();    }  }  if (message == null) {    message=new Message(config,this,stats);    if (config.getBoolean("gondola.tracing.message_leak")) {      phantomRefs.add(new PhantomRef<>(message,leakQueue));    }    createdCount++;  }  message.acquire();  message.byteBuffer.clear();  return message;}  }
class C{  public static void write(OutputStream out,Reader reader,long length,boolean noBackslashEscapes) throws IOException {  out.write(QUOTE);  char[] buffer=new char[1024];  long charsLeft=length;  int len;  for (; ; ) {    int charsToRead=(int)Math.min(charsLeft,buffer.length);    if (charsToRead == 0) {      break;    }    len=reader.read(buffer,0,charsToRead);    if (len <= 0) {      break;    }    byte[] bytes=new String(buffer,0,len).getBytes("UTF-8");    writeBytesEscaped(out,bytes,bytes.length,noBackslashEscapes);    charsLeft-=len;  }  out.write(QUOTE);}  }
class C{  Node(T t,double percentX,double percentY,double percentWidth,double percentHeight){  this(t,null,percentX,percentY,percentWidth,percentHeight);}  }
class C{  public double eval(double params[]){  return (params[0] - params[1] - params[2]);}  }
class C{  public String nextToken() throws JSONException {  char c;  char q;  StringBuilder sb=new StringBuilder();  do {    c=next();  } while (Character.isWhitespace(c));  if (c == '"' || c == '\'') {    q=c;    for (; ; ) {      c=next();      if (c < ' ') {        throw syntaxError("Unterminated string.");      }      if (c == q) {        return sb.toString();      }      sb.append(c);    }  }  for (; ; ) {    if (c == 0 || Character.isWhitespace(c)) {      return sb.toString();    }    sb.append(c);    c=next();  }}  }
class C{  public void java_lang_Class_getName(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getStringObject());}  }
class C{  protected void flushCache() throws IOException {  if (cachePosition > 0) {    final byte chunkHeader[]=EncodingUtil.getAsciiBytes(Integer.toHexString(cachePosition) + "\r\n");    stream.write(chunkHeader,0,chunkHeader.length);    stream.write(cache,0,cachePosition);    stream.write(ENDCHUNK,0,ENDCHUNK.length);    cachePosition=0;  }}  }
class C{  public static MGRSCoord fromLatLon(Angle latitude,Angle longitude,Globe globe){  return fromLatLon(latitude,longitude,globe,5);}  }
class C{  public ZyGraphProximitySettings(final GraphSettingsConfigItem type){  Preconditions.checkNotNull(type,"IE02025: Type argument can't be null");  m_type=type;}  }
class C{  public AlgIdDSA(byte[] encodedAlg) throws IOException {  super(new DerValue(encodedAlg).getOID());}  }
class C{  public static int EOVERFLOW(){  return Errno.EOVERFLOW.intValue();}  }
class C{  public IssueMatcher column(int expectedColumn){  return addEqualsMatcher("column",expectedColumn,null);}  }
class C{  public static boolean isAbsolute(String fileName){  return FilePath.get(fileName).isAbsolute();}  }
class C{  private void showNotification(){  CharSequence text=getText(R.string.remote_service_started);  PendingIntent contentIntent=PendingIntent.getActivity(this,0,new Intent(this,Controller.class),0);  Notification notification=new Notification.Builder(this).setSmallIcon(R.drawable.stat_sample).setTicker(text).setWhen(System.currentTimeMillis()).setContentTitle(getText(R.string.local_service_label)).setContentText(text).setContentIntent(contentIntent).build();  mNM.notify(R.string.remote_service_started,notification);}  }
class C{  public static final void sort(int[] a,int[] b,int begin,int end){  mergesort(a,b,begin,end - 1);}  }
class C{  public static R1Interval empty(){  return new R1Interval(1,0);}  }
class C{  @Override protected void initListeners(){  this.internalLoadSoButton.setOnClickListener(this);}  }
class C{  public static DeactivateInstanceResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeactivateInstanceResponse object=new DeactivateInstanceResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"deactivateInstanceResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (DeactivateInstanceResponse)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","return").equals(reader.getName())) {      object.set_return(org.oscm.xsd.BaseResult.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static int upperBound(final List<Date> dates,final Date value){  int len=dates.size();  int from=0;  int half;  int middle;  while (len > 0) {    half=len >> 1;    middle=from;    middle=middle + half;    if (value.compareTo(dates.get(middle)) == -1) {      len=half;    } else {      from=middle;      from++;      len=len - half - 1;    }  }  return from;}  }
class C{  public boolean hasLastModifiedBy(){  return hasExtension(LastModifiedBy.class);}  }
class C{  private static void mergeForSparseBinary(BinaryOperator op,double[] values1,int[] cols1,int pos1,int size1,double[] values2,int[] cols2,int pos2,int size2,int resultRow,MatrixBlock result) throws DMLRuntimeException {  int p1=0, p2=0, column;  while (p1 < size1 && p2 < size2) {    double value=0;    if (cols1[pos1 + p1] < cols2[pos2 + p2]) {      value=op.fn.execute(values1[pos1 + p1],0);      column=cols1[pos1 + p1];      p1++;    } else     if (cols1[pos1 + p1] == cols2[pos2 + p2]) {      value=op.fn.execute(values1[pos1 + p1],values2[pos2 + p2]);      column=cols1[pos1 + p1];      p1++;      p2++;    } else {      value=op.fn.execute(0,values2[pos2 + p2]);      column=cols2[pos2 + p2];      p2++;    }    result.appendValue(resultRow,column,value);  }  appendLeftForSparseBinary(op,values1,cols1,pos1,size1,p1,resultRow,result);  appendRightForSparseBinary(op,values2,cols2,pos2,size2,p2,resultRow,result);}  }
class C{  public void read(ExceptionlessInputStream in){  size=in.readInt();  if (size == 0)   vector=new int[defaultCapacity]; else {    vector=new int[size];    for (int i=0; i < size; ++i)     vector[i]=in.readInt();  }}  }
class C{  public static void stopRecording(Context context,TrackRecordingServiceConnection trackRecordingServiceConnection,boolean showEditor){  ITrackRecordingService trackRecordingService=trackRecordingServiceConnection.getServiceIfBound();  if (trackRecordingService != null) {    try {      if (showEditor) {        long recordingTrackId=PreferencesUtils.getLong(context,R.string.recording_track_id_key);        trackRecordingService.endCurrentTrack();        if (recordingTrackId != PreferencesUtils.RECORDING_TRACK_ID_DEFAULT) {          Intent intent=IntentUtils.newIntent(context,TrackEditActivity.class).putExtra(TrackEditActivity.EXTRA_TRACK_ID,recordingTrackId).putExtra(TrackEditActivity.EXTRA_NEW_TRACK,true);          context.startActivity(intent);        }      } else {        trackRecordingService.endCurrentTrack();      }    } catch (    Exception e) {      Log.e(TAG,"Unable to stop recording.",e);    }  } else {    resetRecordingState(context);  }  trackRecordingServiceConnection.unbindAndStop();}  }
class C{  @Override public String toString(){  Locale l=Locale.getDefault();  return LnSv2MessageContents.this.toString(l);}  }
class C{  public void add(String k,String v){  grow();  keys[nkeys]=k;  values[nkeys]=v;  nkeys++;}  }
class C{  public static String trimIndent(String line,int indentsToRemove,IJavaProject project){  return IndentManipulation.trimIndent(line,indentsToRemove,CodeFormatterUtil.getTabWidth(project),CodeFormatterUtil.getIndentWidth(project));}  }
class C{  public void clearAllShown(){  for (  Notification n : new LinkedList<>(displayed)) {    n.close();  }}  }
class C{  private Future<ReplDBMSHeader> waitForProcessedEvent(WatchPredicate<ReplDBMSHeader> predicate,boolean cancel) throws InterruptedException {  return waitForEvent(predicate,cancel,processingWatches,false);}  }
class C{  public Geo normalize(){  return this.scale(1.0 / this.length());}  }
class C{  public void dataRefresh(){  dataRefresh(true);}  }
class C{  public void addBookmarkedURL(BookmarkedURL bookmarkedURL){  bookmarkedURLS.add(bookmarkedURL);}  }
class C{  private void releaseAllCapacity(){  mLock.lock();  try {    releaseCapacity(mCapacity);  }  finally {    mLock.unlock();  }}  }
class C{  public DocumentedElement createDocumentedElement(){  DocumentedElementImpl documentedElement=new DocumentedElementImpl();  return documentedElement;}  }
class C{  public QueryBuilder(@NotNull String sql,Object... arguments){  append(sql,arguments);}  }
class C{  public static void shareIntent(Context context){  String text=String.format(context.getResources().getString(R.string.invite_default_text),CommonUtils.getApplicationName(context),CommonUtils.getPlayStoreUrl(context));  Intent sendIntent=new Intent();  sendIntent.setAction(Intent.ACTION_SEND);  sendIntent.putExtra(Intent.EXTRA_TEXT,text);  sendIntent.setType("text/plain");  context.startActivity(Intent.createChooser(sendIntent,context.getResources().getString(R.string.invite_via)));}  }
class C{  public Arg(QName qname,XObject val){  m_qname=qname;  m_val=val;  m_isVisible=true;  m_isFromWithParam=false;  m_expression=null;}  }
class C{  @Override public boolean csConsistNeedsSeperateAddress(){  return false;}  }
class C{  public StdOutWriter(){  super(System.out,true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:15.481 -0400",hash_original_method="953C45E0AC0E3330C0DA112A167E7505",hash_generated_method="D4744E6A8E81B3052A8AD8080D4B0E46") public void testConnectHeadset(){  int iterations=BluetoothTestRunner.sConnectHeadsetIterations;  if (iterations == 0) {    return;  }  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  BluetoothDevice device=adapter.getRemoteDevice(BluetoothTestRunner.sDeviceAddress);  mTestUtils.disable(adapter);  mTestUtils.enable(adapter);  mTestUtils.unpair(adapter,device);  mTestUtils.pair(adapter,device,BluetoothTestRunner.sDevicePairPasskey,BluetoothTestRunner.sDevicePairPin);  mTestUtils.disconnectProfile(adapter,device,BluetoothProfile.HEADSET,null);  for (int i=0; i < iterations; i++) {    mTestUtils.writeOutput("connectHeadset iteration " + (i + 1) + " of "+ iterations);    mTestUtils.connectProfile(adapter,device,BluetoothProfile.HEADSET,String.format("connectHeadset(device=%s)",device));    mTestUtils.disconnectProfile(adapter,device,BluetoothProfile.HEADSET,String.format("disconnectHeadset(device=%s)",device));  }  mTestUtils.unpair(adapter,device);  mTestUtils.disable(adapter);}  }
class C{  static void computePositions(ArrayList<Event> eventsList,long minimumDurationMillis){  if (eventsList == null) {    return;  }  doComputePositions(eventsList,minimumDurationMillis,false);  doComputePositions(eventsList,minimumDurationMillis,true);}  }
class C{  public ChaChaEngine(){  super();}  }
class C{  static int commandArguments(char type){switch (type) {case CMD_PLACEHOLDER:case 'z':case 'Z':    return 0;case 'm':case 'M':case 'l':case 'L':case 't':case 'T':  return 2;case 'h':case 'H':case 'v':case 'V':return 1;case 'c':case 'C':return 6;case 's':case 'S':case 'q':case 'Q':return 4;case 'a':case 'A':return 7;}return -1;}  }
class C{  public void updateTotalCount(int totalCount){  assert totalCount >= 0;  this.totalCount=totalCount;}  }
class C{  public ScatterVulns(String title,int height,String category,Set<Report> toolResults,String focus){  this.category=category;  this.focus=focus;  display("          " + title,height,category,toolResults);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private void goToLastLine(){  getInputPane().setCaretPosition(getInputPane().getText().length());}  }
class C{  public final synchronized UnicodeBOMInputStream skipBOM() throws IOException {  if (!skipped) {    in.skip(bom.bytes.length);    skipped=true;  }  return this;}  }
class C{  private boolean checkStoppingBlock(){  boolean ret=false;  _stoppingBlock.removePropertyChangeListener(this);  if (log.isDebugEnabled()) {    log.debug("checkStoppingBlock for warrant \"" + getDisplayName() + "\" _stoppingBlock= \""+ _stoppingBlock.getDisplayName());  }  String msg=_stoppingBlock.allocate(this);  if (msg == null) {    int idx=getIndexOfBlock(_stoppingBlock,_idxLastOrder);    if (idx >= 0) {      msg=_orders.get(idx).setPath(this);    } else {      msg="BlockOrder not found for _stoppingBlock= " + _stoppingBlock.getDisplayName() + " _idxLastOrder= "+ _idxLastOrder;    }    if (msg == null) {      if (_runMode == MODE_RUN) {        ret=true;      }    } else {      log.info("Warrant \"" + getDisplayName() + "\" shares a turnout. "+ msg);      ret=false;    }    if (log.isDebugEnabled()) {      log.debug("Warrant \"" + getDisplayName() + "\" _stoppingBlock= \""+ _stoppingBlock.getDisplayName()+ "\" Cleared.");    }    _stoppingBlock=null;  } else {    _stoppingBlock.addPropertyChangeListener(this);    log.warn("StoppingBlock not alllocated in warrant \"" + getDisplayName() + "\". "+ msg);    ret=false;  }  if (log.isDebugEnabled()) {    log.debug("checkStoppingBlock " + ret + " for warrant \""+ getDisplayName()+ ", msg= "+ msg);  }  return ret;}  }
class C{  public ScaleAndIndexes indexes(Collection<Integer> indexes){  return new ScaleAndIndexes(scale,Ints.toArray(indexes));}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateprocessinginstruction.class,args);}  }
class C{  public void initialize(Supplier<DataSource<Bitmap>> dataSourceSupplier,String id,Object callerContext){  super.initialize(id,callerContext);  init(dataSourceSupplier);}  }
class C{  @CliCommand(value={CliStrings.EXPORT_CONFIG},help=CliStrings.EXPORT_CONFIG__HELP) @CliMetaData(interceptor="org.apache.geode.management.internal.cli.commands.ConfigCommands$Interceptor",relatedTopic={CliStrings.TOPIC_GEODE_CONFIG}) @ResourceOperation(resource=Resource.CLUSTER,operation=Operation.READ) public Result exportConfig(@CliOption(key={CliStrings.EXPORT_CONFIG__MEMBER},optionContext=ConverterHint.ALL_MEMBER_IDNAME,help=CliStrings.EXPORT_CONFIG__MEMBER__HELP) @CliMetaData(valueSeparator=",") String member,@CliOption(key={CliStrings.EXPORT_CONFIG__GROUP},optionContext=ConverterHint.MEMBERGROUP,help=CliStrings.EXPORT_CONFIG__GROUP__HELP) @CliMetaData(valueSeparator=",") String group,@CliOption(key={CliStrings.EXPORT_CONFIG__DIR},help=CliStrings.EXPORT_CONFIG__DIR__HELP) String dir){  InfoResultData infoData=ResultBuilder.createInfoResultData();  Set<DistributedMember> targetMembers;  try {    targetMembers=CliUtil.findAllMatchingMembers(group,member);  } catch (  CommandResultException crex) {    return crex.getResult();  }  try {    ResultCollector<?,?> rc=CliUtil.executeFunction(this.exportConfigFunction,null,targetMembers);    List<CliFunctionResult> results=CliFunctionResult.cleanResults((List<?>)rc.getResult());    for (    CliFunctionResult result : results) {      if (result.getThrowable() != null) {        infoData.addLine(CliStrings.format(CliStrings.EXPORT_CONFIG__MSG__EXCEPTION,result.getMemberIdOrName(),result.getThrowable()));      } else       if (result.isSuccessful()) {        String cacheFileName=result.getMemberIdOrName() + "-cache.xml";        String propsFileName=result.getMemberIdOrName() + "-gf.properties";        String[] fileContent=(String[])result.getSerializables();        infoData.addAsFile(cacheFileName,fileContent[0],"Downloading Cache XML file: {0}",false);        infoData.addAsFile(propsFileName,fileContent[1],"Downloading properties file: {0}",false);      }    }    return ResultBuilder.buildResult(infoData);  } catch (  VirtualMachineError e) {    SystemFailure.initiateFailure(e);    throw e;  }catch (  Throwable th) {    SystemFailure.checkFailure();    th.printStackTrace(System.err);    return ResultBuilder.createGemFireErrorResult(CliStrings.format(CliStrings.EXPORT_CONFIG__MSG__EXCEPTION,th.getClass().getName() + ": " + th.getMessage()));  }}  }
class C{  public void publish(IProject project,IPath destination,IProgressMonitor monitor) throws CoreException {  if (monitor.isCanceled()) {    throw new OperationCanceledException();  }  Preconditions.checkNotNull(project,"project is null");  Preconditions.checkNotNull(destination,"destination is null");  Preconditions.checkArgument(!destination.isEmpty(),"destination is empty path");  SubMonitor progress=SubMonitor.convert(monitor,100);  progress.setTaskName(Messages.getString("task.name.publish.war"));  PublishHelper publishHelper=new PublishHelper(null);  J2EEFlexProjDeployable deployable=new J2EEFlexProjDeployable(project,ComponentCore.createComponent(project));  publishHelper.publishSmart(deployable.members(),destination,progress.newChild(100));}  }
class C{  private boolean isInZonesets(IvrZone ivrZone,List<IvrZoneset> ivrZonesetInFabric){  boolean inZoneset=false;  for (  IvrZoneset ivrZoneset : ivrZonesetInFabric) {    inZoneset=ivrZoneset.getZones().contains(ivrZone);    if (inZoneset) {      break;    }  }  return inZoneset;}  }
class C{  public void insertUpdate(DocumentEvent changes,Shape a,ViewFactory f){  updateChildren(changes,a);  Rectangle alloc=((a != null) && isAllocationValid()) ? getInsideAllocation(a) : null;  int pos=changes.getOffset();  View v=getViewAtPosition(pos,alloc);  if (v != null)   v.insertUpdate(changes,alloc,f);}  }
class C{  public Define(String functionName,Class<?> returnType,String[] variableNames,Class<?>[] variableTypes){  super(Void.class,returnType);  this.functionName=functionName;  this.variableNames=variableNames;  this.variableTypes=variableTypes;}  }
class C{  public SimpleConstant(String name,String stringValue){  if (name == null) {    throw new IllegalArgumentException("name must not be null");  }  this.type=ExpressionType.STRING;  this.name=name;  this.stringValue=stringValue;  this.doubleValue=0;  this.booleanValue=false;  this.dateValue=null;}  }
class C{  public boolean isInDispute(){  Object oo=get_Value(COLUMNNAME_IsInDispute);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static String lookup(String colorName){  return LOOKUP_TABLE.get(colorName.toUpperCase());}  }
class C{  public String mostOfString(){  String typeName="";switch (type) {case BUILTIN:    typeName="BUILTIN";  break;case NUMBER:typeName="NUMBER";break;case STRING:typeName="STRING";break;case PF_STEP:typeName="PF_STEP";break;case IDENT:typeName="IDENT";break;case COMMENT:typeName="COMMENT";break;case DASHES:typeName="DASHES";break;case END_MODULE:typeName="END_MODULE";break;case PROLOG:typeName="PROLOG";break;case EPILOG:typeName="EPILOG";break;case PCAL_LABEL:typeName="PCAL_LABEL";break;};String str="\"" + string + "\"";if (string == null) {str="null";};String result="[str |-> " + str + ",\t type |-> "+ typeName+ ",\t col |-> "+ column+ ",\t width |-> "+ getWidth();if (aboveAlign.line != -1) {result=result + ",\t above |-> " + aboveAlign.toString();};if (belowAlign.line != -1) {result=result + ",\t below |-> " + belowAlign.toString();};if (preSpace != 0) {result=result + ", space |-> " + preSpace;};if (isAlignmentPoint) {result=result + ", align |-> true";};if (distFromMargin != 0) {result=result + ", dist |-> " + distFromMargin;};if (subscript) {result=result + ", sub |-> true";};return result;}  }
class C{  @SuppressWarnings("null") public SprogReply(SprogReply m){  this();  if (m == null) {    log.error("copy ctor of null message");    return;  }  _nDataChars=m._nDataChars;  _isBoot=m._isBoot;  if (m.isUnsolicited()) {    super.setUnsolicited();  }  for (int i=0; i < _nDataChars; i++) {    _dataChars[i]=m._dataChars[i];  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:43.598 -0500",hash_original_method="CAA5F0320575B2151920B0F146B122B7",hash_generated_method="CAA5F0320575B2151920B0F146B122B7") void clearSessionCookies(){  if (!checkInitialized()) {    return;  }  final String sessionExpired=COOKIES_EXPIRES_COL + " ISNULL";synchronized (mCookieLock) {    mDatabase.delete(mTableNames[TABLE_COOKIES_ID],sessionExpired,null);  }}  }
class C{  protected void closeDialogOk(){  KWTA kWTA=new KWTA(networkPanel.getNetwork(),Integer.parseInt(tfK.getText()));  layoutPanel.commitChanges();  Layout layout=layoutPanel.getCurrentLayout();  layout.setInitialLocation(networkPanel.getLastClickedPosition());  layout.layoutNeurons(kWTA.getNeuronList());  networkPanel.getNetwork().addGroup(kWTA);  networkPanel.repaint();  super.closeDialogOk();}  }
class C{  public Mat dstRows(boolean scale){  DenseDoubleMatrix2D dm=new DenseDoubleMatrix2D(getArray());  dm.dstRows(scale);  return new Mat(dm.toArray());}  }
class C{  public int readSignedExpGolombCodedInt(){  int codeNum=readExpGolombCodeNum();  return ((codeNum % 2) == 0 ? -1 : 1) * ((codeNum + 1) / 2);}  }
class C{  public EMailDialog(Dialog owner,String title,MUser from,String to,String subject,String message,File attachment){  super(owner,title,true);  commonInit(from,to,subject,message,attachment);}  }
class C{  @Override protected void onServerResponse(int code,String response){  if (code == 4) {    onRegister();    return;  }  if ((code == 372 || code == 375) && ignoreMOTD) {    return;  }  if (code == 376 && ignoreMOTD) {    Message motdMessage=new Message(service.getString(R.string.message_motd_suppressed));    motdMessage.setColor(Message.COLOR_GREY);    server.getConversation(ServerInfo.DEFAULT_NAME).addMessage(motdMessage);    ignoreMOTD=false;    return;  }  if (code >= 200 && code < 300) {    return;  }  if (code == 353 || code == 366 || code == 332 || code == 333) {    return;  }  if (code < 10) {    return;  }  Message message=new Message(response);  message.setColor(Message.COLOR_GREY);  server.getConversation(ServerInfo.DEFAULT_NAME).addMessage(message);  Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),ServerInfo.DEFAULT_NAME);  service.sendBroadcast(intent);}  }
class C{  MarshalledObjectInputStream(InputStream objIn,InputStream locIn) throws IOException {  super(objIn);  this.locIn=(locIn == null ? null : new ObjectInputStream(locIn));}  }
class C{  synchronized public void saveContactList(List<EaseUser> contactList){  SQLiteDatabase db=dbHelper.getWritableDatabase();  if (db.isOpen()) {    db.delete(UserDao.TABLE_NAME,null,null);    for (    EaseUser user : contactList) {      ContentValues values=new ContentValues();      values.put(UserDao.COLUMN_NAME_ID,user.getUsername());      if (user.getNick() != null)       values.put(UserDao.COLUMN_NAME_NICK,user.getNick());      if (user.getAvatar() != null)       values.put(UserDao.COLUMN_NAME_AVATAR,user.getAvatar());      if (user.getUserInfo() != null)       values.put(UserDao.COLUMN_NAME_INFO,user.getUserInfo());      db.replace(UserDao.TABLE_NAME,null,values);    }  }}  }
class C{  private Surrogates(){}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public GeneralName(int tag,ASN1Encodable name){  this.obj=name;  this.tag=tag;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:29.461 -0500",hash_original_method="DAD47A54D3A856226CAD2FBA5A8D36F7",hash_generated_method="AD499F2ECD39B002F58477D70DEC1000") protected int proxiedStep(RouteInfo plan,RouteInfo fact){  if (fact.getHopCount() <= 1)   return UNREACHABLE;  if (!plan.getTargetHost().equals(fact.getTargetHost()))   return UNREACHABLE;  final int phc=plan.getHopCount();  final int fhc=fact.getHopCount();  if (phc < fhc)   return UNREACHABLE;  for (int i=0; i < fhc - 1; i++) {    if (!plan.getHopTarget(i).equals(fact.getHopTarget(i)))     return UNREACHABLE;  }  if (phc > fhc)   return TUNNEL_PROXY;  if ((fact.isTunnelled() && !plan.isTunnelled()) || (fact.isLayered() && !plan.isLayered()))   return UNREACHABLE;  if (plan.isTunnelled() && !fact.isTunnelled())   return TUNNEL_TARGET;  if (plan.isLayered() && !fact.isLayered())   return LAYER_PROTOCOL;  if (plan.isSecure() != fact.isSecure())   return UNREACHABLE;  return COMPLETE;}  }
class C{  public String globalInfo(){  return "Suppresses all output.";}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  private void activateSuspendedSubscriptions(Organization cust,PaymentInfo usedPayment){  List<Subscription> subscriptions=cust.getSubscriptions();  for (  Subscription subscription : subscriptions) {    final SubscriptionStatus current=subscription.getStatus();    if (current.isSuspendedOrSuspendedUpd()) {      if (subscription.getPaymentInfo() != null) {        if (subscription.getPaymentInfo().getKey() == usedPayment.getKey()) {          subscription.setStatus(current.getNextForPaymentTypeRevoked());          try {            appManager.activateInstance(subscription);          } catch (          TechnicalServiceNotAliveException e) {            logger.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR_ACTIVATE_INSTANCE);          }catch (          TechnicalServiceOperationException e) {            logger.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR_ACTIVATE_INSTANCE);          }        }      }    }  }}  }
class C{  public void push(ElementType type){  stack.add(type);}  }
class C{  public void clear(){  this.referent=null;}  }
class C{  public static IntInterval fromToBy(int from,int to,int stepBy){  if (stepBy == 0) {    throw new IllegalArgumentException("Cannot use a step by of 0");  }  if (from > to && stepBy > 0 || from < to && stepBy < 0) {    throw new IllegalArgumentException("Step by is incorrect for the range");  }  return new IntInterval(from,to,stepBy);}  }
class C{  public void clear(){  added_values=0;  last_value=0;  for (int i=0; i < values.length; i++)   values[i]=0;  dirty=true;}  }
class C{  static void mark(Address address,final byte markValue){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!Block.isUnused(Block.align(address)));  getMarkAddress(address).store(markValue);}  }
class C{  @Override public synchronized void flush() throws IOException {  logger.log(Level.FINE,"Flushing...");  long start=System.currentTimeMillis();  final Object ackNotify=pseudoTcp.getAckNotify();synchronized (ackNotify) {    while (pseudoTcp.getBytesBufferedNotSent() > 0) {      try {        if (writeTimeout > 0) {          long elapsed=System.currentTimeMillis() - start;          long left=writeTimeout - elapsed;          if (left <= 0) {            IOException e=new IOException("Flush operation timeout");            pseudoTcp.closedown(e);            throw e;          }          ackNotify.wait(left);        } else {          ackNotify.wait();        }      } catch (      InterruptedException ex) {        throw new IOException("Flush stream interrupted",ex);      }    }  }  logger.log(Level.FINE,"Flushing completed");}  }
class C{  public T caseAnonymous_methodBody_1_(Anonymous_methodBody_1_ object){  return null;}  }
class C{  public static void toggleStyleName(final UIObject uiObject,final boolean toggleStyle,final String styleName){  if (toggleStyle) {    uiObject.addStyleName(styleName);  } else {    uiObject.removeStyleName(styleName);  }}  }
class C{  public void testSimpleNotRegistered() throws Exception {  checkSimple(false);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static byte[] toMinimalByteArray(BigInteger value){  byte[] valBytes=value.toByteArray();  if ((valBytes.length == 1) || (value.bitLength() & 0x07) != 0) {    return valBytes;  }  byte[] result=new byte[value.bitLength() >> 3];  System.arraycopy(valBytes,1,result,0,result.length);  return result;}  }
class C{  private void boardSaveImage(){  if (curfileImage == null) {    boardSaveAsImage();    return;  }  JDialog waitD=new JDialog(frame,Messages.getString("BoardEditor.waitDialog.title"));  waitD.add(new JLabel(Messages.getString("BoardEditor.waitDialog.message")));  waitD.setSize(250,130);  waitD.setLocation((frame.getSize().width / 2) - (waitD.getSize().width / 2),(frame.getSize().height / 2) - (waitD.getSize().height / 2));  waitD.setVisible(true);  frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  waitD.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  try {    ImageIO.write(bv.getEntireBoardImage(),"png",curfileImage);  } catch (  IOException e) {    e.printStackTrace();  }  waitD.setVisible(false);  frame.setCursor(Cursor.getDefaultCursor());}  }
class C{  public File tmpFile(String path){  return dataFile(TMP_DIR + "/" + path);}  }
class C{  private static void addOmittedMessage(FacesContext jsf,String clientId,String key){  Object[] params=new Object[]{};  FacesMessage m=MessageUtils.getExceptionMessage(key,params);  m.setSeverity(FacesMessage.SEVERITY_WARN);  jsf.addMessage(clientId,m);}  }
class C{  public ImmutableLocation toImmutableLocation(World w){  return new ImmutableLocation(x,y,z,w);}  }
class C{  double computeFactorForTimeSlice(TimeSlice timeSlice,long usagePeriodStart,long usagePeriodEnd,boolean adjustsPeriodStart,boolean adjustsPeriodEnd){  if (usagePeriodEnd < usagePeriodStart) {    throw new IllegalArgumentException("Usage period end (" + new Date(usagePeriodEnd) + ") before usage period start ("+ new Date(usagePeriodStart)+ ")");  }  Calendar startTimeForFactorCalculation=determineStartTimeForFactorCalculation(timeSlice.getPeriod(),timeSlice.getStartAsCalendar(),usagePeriodStart,adjustsPeriodStart);  Calendar endTimeForFactorCalculation=determineEndTimeForFactorCalculation(timeSlice.getPeriod(),timeSlice.getStartOfNextSliceAsCalendar(),usagePeriodEnd,adjustsPeriodEnd);  if (startTimeForFactorCalculation.after(endTimeForFactorCalculation)) {    throw new BillingRunFailed("Usage period start (" + new Date(usagePeriodStart) + ") and usage period end ("+ new Date(usagePeriodEnd)+ ") do not match time slice ("+ timeSlice+ ")");  } else {    return computeFractionalFactorForTimeUnit(startTimeForFactorCalculation.getTimeInMillis(),endTimeForFactorCalculation.getTimeInMillis(),timeSlice.getPeriod());  }}  }
class C{  public static float triangle(float x){  float r=mod(x,1.0f);  return 2.0f * (r < 0.5 ? r : 1 - r);}  }
class C{  private void logException(String errorMessage){  SaaSSystemException sse=new SaaSSystemException(errorMessage);  logger.logError(Log4jLogger.SYSTEM_LOG,sse,LogMessageIdentifier.ERROR_EVALUATE_PSP_RESPONSE_FAILED);}  }
class C{  boolean process(Segment seg){  if (seg.conv != m_conv) {    logger.info(debugName + " wrong conversation number, this: " + m_conv+ " remote: "+ seg.conv);    return false;  }  long now=now();  m_lasttraffic=m_lastrecv=now;  m_bOutgoing=false;  if (m_state == PseudoTcpState.TCP_CLOSED) {    closedown(new IOException(debugName + " in closed state"));    return false;  }  if ((seg.flags & FLAG_RST) > 0) {    closedown(new IOException("Connection reset"));    return false;  }  boolean bConnect=false;  if ((seg.flags & FLAG_CTL) > 0) {    if (seg.len == 0) {      logger.log(Level.SEVERE,debugName + " Missing control code");      return false;    } else {      if (seg.data[0] == CTL_CONNECT) {        bConnect=true;        if (!parseOptions(seg.data,1,seg.len - 1)) {          return false;        }        if (m_state == PseudoTcpState.TCP_LISTEN) {          m_state=PseudoTcpState.TCP_SYN_RECEIVED;          logger.log(Level.FINE,debugName + " State: TCP_SYN_RECEIVED");          queueConnectMessage();        } else {          if (m_state == PseudoTcpState.TCP_SYN_SENT) {            m_state=PseudoTcpState.TCP_ESTABLISHED;            logger.log(Level.FINE,debugName + " State: TCP_ESTABLISHED");            adjustMTU();            if (m_notify != null) {              m_notify.onTcpOpen(this);            }          }        }      } else {        logger.log(Level.SEVERE,debugName + " Unknown control code: " + seg.data[0]);        return false;      }    }  }  if ((seg.seq <= m_ts_lastack) && (m_ts_lastack < seg.seq + seg.len)) {    m_ts_recent=seg.tsval;  }  if ((seg.ack > m_snd_una) && (seg.ack <= m_snd_nxt)) {    if (seg.tsecr > 0) {      long rtt=timeDiff(now,seg.tsecr);      assert rtt >= 0;      if (m_rx_srtt == 0) {        m_rx_srtt=rtt;        m_rx_rttvar=rtt / 2;      } else {        m_rx_rttvar=(3 * m_rx_rttvar + Math.abs(rtt - m_rx_srtt)) / 4;        m_rx_srtt=(7 * m_rx_srtt + rtt) / 8;      }      m_rx_rto=bound(MIN_RTO,m_rx_srtt + Math.max(1,4 * m_rx_rttvar),MAX_RTO);      if (logger.isLoggable(Level.FINER)) {        logger.log(Level.FINER,"rtt: " + rtt + " srtt: "+ m_rx_srtt+ " rto: "+ m_rx_rto);      }    }    m_snd_wnd=seg.wnd << m_swnd_scale;    long nAcked=seg.ack - m_snd_una;synchronized (ack_notify) {      m_snd_una=seg.ack;      m_rto_base=(m_snd_una == m_snd_nxt) ? 0 : now;      m_sbuf.consumeReadData((int)nAcked);      if (logger.isLoggable(Level.FINER)) {        logger.log(Level.FINER,debugName + " acked: " + nAcked+ " m_snd_una: "+ m_snd_una);      }      ack_notify.notifyAll();    }    for (long nFree=nAcked; nFree > 0; ) {      assert !m_slist.isEmpty();      if (nFree < m_slist.get(0).len) {        m_slist.get(0).len-=nFree;        m_slist.get(0).seq+=nFree;        nFree=0;      } else {        if (m_slist.get(0).len > m_largest) {          m_largest=m_slist.get(0).len;        }        nFree-=m_slist.get(0).len;        m_slist.remove(0);      }    }    if (m_dup_acks >= 3) {      if (m_snd_una >= m_recover) {        long nInFlight=m_snd_nxt - m_snd_una;        m_cwnd=Math.min(m_ssthresh,nInFlight + m_mss);        logger.log(Level.FINE,"exit recovery");        m_dup_acks=0;      } else {        logger.log(Level.FINE,"recovery retransmit");        if (!transmit(m_slist.get(0),now)) {          closedown(new IOException("Connection aborted"));          return false;        }        m_cwnd+=m_mss - Math.min(nAcked,m_cwnd);      }    } else {      m_dup_acks=0;      if (m_cwnd < m_ssthresh) {        m_cwnd+=m_mss;      } else {        m_cwnd+=Math.max(1,m_mss * m_mss / m_cwnd);      }    }  } else {    if (seg.ack == m_snd_una) {      m_snd_wnd=seg.wnd << m_swnd_scale;      if (seg.len > 0) {      } else {        if (m_snd_una != m_snd_nxt) {          m_dup_acks+=1;          if (m_dup_acks == 3) {            if (logger.isLoggable(Level.FINE)) {              logger.log(Level.FINE,debugName + " enter recovery");              logger.log(Level.FINE,debugName + " recovery retransmit");            }            if (!transmit(m_slist.get(0),now)) {              closedown(new IOException("Connection aborted"));              return false;            }            m_recover=m_snd_nxt;            long nInFlight=m_snd_nxt - m_snd_una;            m_ssthresh=Math.max(nInFlight / 2,2 * m_mss);            m_cwnd=m_ssthresh + 3 * m_mss;          } else {            if (m_dup_acks > 3) {              m_cwnd+=m_mss;            }          }        } else {          m_dup_acks=0;        }      }    }  }  if ((m_state == PseudoTcpState.TCP_SYN_RECEIVED) && !bConnect) {    m_state=PseudoTcpState.TCP_ESTABLISHED;    logger.log(Level.FINE,debugName + " State: TCP_ESTABLISHED");    adjustMTU();    if (m_notify != null) {      m_notify.onTcpOpen(this);    }  }  long kIdealRefillSize=(m_sbuf_len + m_rbuf_len) / 2;  long snd_buffered=m_sbuf.getBuffered();  if (m_bWriteEnable && snd_buffered < kIdealRefillSize) {    m_bWriteEnable=false;    if (m_notify != null) {      m_notify.onTcpWriteable(this);    }  }  SendFlags sflags=SendFlags.sfNone;  if (seg.seq != m_rcv_nxt) {    sflags=SendFlags.sfImmediateAck;  } else {    if (seg.len != 0) {      if (m_ack_delay == 0) {        sflags=SendFlags.sfImmediateAck;      } else {        sflags=SendFlags.sfDelayedAck;      }    }  }  if (sflags == SendFlags.sfImmediateAck) {    if (seg.seq > m_rcv_nxt) {      logger.log(Level.FINER,"too new, seq.seq=" + seg.seq + ", seg.len="+ seg.len+ ", m_rcv_nxt="+ m_rcv_nxt);    } else {      if (seg.seq + seg.len <= m_rcv_nxt) {        logger.log(Level.FINER,"too old, seq.seq=" + seg.seq + ", seg.len="+ seg.len+ ", m_rcv_nxt="+ m_rcv_nxt);      }    }  }  if (seg.seq < m_rcv_nxt) {    long nAdjust=m_rcv_nxt - seg.seq;    if (nAdjust < seg.len) {      seg.seq+=nAdjust;      seg.data=scrollBuffer(seg.data,(int)nAdjust);      seg.len-=nAdjust;    } else {      seg.len=0;    }  }  long available_space=m_rbuf.getWriteRemaining();  if ((seg.seq + seg.len - m_rcv_nxt) > available_space) {    long nAdjust=seg.seq + seg.len - m_rcv_nxt - available_space;    if (nAdjust < seg.len) {      seg.len-=nAdjust;    } else {      seg.len=0;    }  }  boolean bIgnoreData=((seg.flags & FLAG_CTL) > 0) || (m_shutdown != EnShutdown.SD_NONE);  boolean bNewData=false;  if (seg.len > 0) {    if (bIgnoreData) {      if (seg.seq == m_rcv_nxt) {        m_rcv_nxt+=seg.len;      }    } else {      long nOffset=seg.seq - m_rcv_nxt;      int result=m_rbuf.writeOffset(seg.data,seg.len,(int)nOffset);      assert result == seg.len;      if (seg.seq == m_rcv_nxt) {        if (logger.isLoggable(Level.FINEST)) {          logger.log(Level.FINEST,"Avail space: " + available_space + " seg.len: "+ seg.len);        }        m_rbuf.consumeWriteBuffer(seg.len);        m_rcv_nxt+=seg.len;        m_rcv_wnd-=seg.len;        bNewData=true;        Iterator<RSegment> iter=m_rlist.iterator();        List<RSegment> toBeRemoved=new ArrayList<>();        while (iter.hasNext()) {          RSegment it=iter.next();          if (it.seq > m_rcv_nxt) {            break;          }          if (it.seq + it.len > m_rcv_nxt) {            sflags=SendFlags.sfImmediateAck;            long nAdjust=(it.seq + it.len) - m_rcv_nxt;            if (logger.isLoggable(Level.FINE)) {              logger.log(Level.FINE,"Recovered " + nAdjust + " bytes ("+ m_rcv_nxt+ " -> "+ (m_rcv_nxt + nAdjust)+ ")");            }            m_rbuf.consumeWriteBuffer((int)nAdjust);            m_rcv_nxt+=nAdjust;            m_rcv_wnd-=nAdjust;          }          toBeRemoved.add(it);        }        m_rlist.removeAll(toBeRemoved);      } else {        if (logger.isLoggable(Level.FINE)) {          logger.log(Level.FINE,"Saving " + seg.len + " bytes ("+ seg.seq+ " -> "+ (seg.seq + seg.len)+ ")");        }        RSegment rseg=new RSegment(seg.seq,seg.len);        int insertPos;        for (insertPos=0; insertPos < m_rlist.size(); insertPos++) {          RSegment it=m_rlist.get(insertPos);          if (it.seq >= rseg.seq) {            break;          }        }        m_rlist.add(insertPos,rseg);      }    }  }  attemptSend(sflags);  if (bNewData && m_bReadEnable) {    m_bReadEnable=false;    if (m_notify != null) {      m_notify.onTcpReadable(this);    }  }  return true;}  }
class C{  public static void addHideAction(JComponent jc){  InputMap map=jc.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);  map.put(getHideKeystroke(),"limewire.hideWindow");  jc.getActionMap().put("limewire.hideWindow",getDisposeAction());}  }
class C{  private void jsInstallUpdate(CallbackContext callback){  if (!isPluginReadyForWork) {    sendPluginNotReadyToWork(UpdateInstallationErrorEvent.EVENT_NAME,callback);    return;  }  installUpdate(callback);}  }
class C{  public static int randomInt(int maxValue){  Roll roll=new MMRoll(random,maxValue);  return roll.getIntValue();}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 35:{        int temp=zzStartRead;        addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);        addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_DOCUMENTATION);        start=zzMarkedPos;      }case 36:    break;case 28:{    addToken(Token.PREPROCESSOR);  }case 37:break;case 3:{addNullToken();return firstToken;}case 38:break;case 30:{addToken(Token.LITERAL_CHAR);}case 39:break;case 25:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 40:break;case 4:{addToken(Token.WHITESPACE);}case 41:break;case 29:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 42:break;case 22:{addToken(Token.ERROR_CHAR);}case 43:break;case 31:{addToken(Token.ERROR_STRING_DOUBLE);}case 44:break;case 19:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 45:break;case 21:{addToken(Token.RESERVED_WORD);}case 46:break;case 10:{addToken(Token.SEPARATOR);}case 47:break;case 12:{addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addNullToken();return firstToken;}case 48:break;case 6:{addToken(Token.IDENTIFIER);}case 49:break;case 13:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addToken(temp,zzEndRead,Token.PREPROCESSOR);addNullToken();return firstToken;}case 50:break;case 8:{addToken(Token.ERROR_CHAR);addNullToken();return firstToken;}case 51:break;case 9:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 52:break;case 32:{addToken(Token.DATA_TYPE);}case 53:break;case 2:{addToken(Token.ERROR_IDENTIFIER);}case 54:break;case 23:{addToken(Token.ERROR_CHAR);}case 55:break;case 33:{addToken(Token.LITERAL_BOOLEAN);}case 56:break;case 20:{start=zzMarkedPos - 2;yybegin(VERBATIMSTRING);}case 57:break;case 24:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 58:break;case 14:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 59:break;case 34:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_MULTILINE);start=zzMarkedPos;}case 60:break;case 16:{addToken(Token.COMMENT_EOL);addNullToken();return firstToken;}case 61:break;case 18:{addToken(Token.ERROR_NUMBER_FORMAT);}case 62:break;case 27:{start=zzMarkedPos - 3;yybegin(DOCUMENTCOMMENT);}case 63:break;case 17:{start=zzMarkedPos - 2;yybegin(DELIMITEDCOMMENT);}case 64:break;case 7:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 65:break;case 5:{addToken(Token.OPERATOR);}case 66:break;case 26:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addToken(temp,zzMarkedPos - 1,Token.PREPROCESSOR);start=zzMarkedPos;}case 67:break;case 15:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 68:break;case 1:{}case 69:break;case 11:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 70:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case VERBATIMSTRING:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 365:break;case DOCUMENTCOMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addNullToken();return firstToken;}case 366:break;case YYINITIAL:{addNullToken();return firstToken;}case 367:break;case DELIMITEDCOMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 368:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public static Document parseXml(String xml){  try {    ByteArrayInputStream xmlStream=new ByteArrayInputStream(xml.getBytes("UTF-8"));    return getDocumentBuilderFactory().newDocumentBuilder().parse(xmlStream);  } catch (  UnsupportedEncodingException e) {    throw new Error("UTF-8 must be supported");  }catch (  Exception e) {    throw new XmlException(e);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void processBlockLike(Collection<? extends EObject> elemsInIM,char open,String lineEnd,String lastLineEnd,char close){  if (elemsInIM.isEmpty()) {    write(open);    write(close);    return;  }  write(open);  out.indent();  newLine();  process(elemsInIM,null);  if (lastLineEnd != null)   write(lineEnd);  out.undent();  newLine();  write(close);}  }
class C{  public boolean on(ASN1ObjectIdentifier stem){  String id=getId(), stemId=stem.getId();  return id.length() > stemId.length() && id.charAt(stemId.length()) == '.' && id.startsWith(stemId);}  }
class C{  public void putGenericFontFamily(String familyName,Font font){  genericFontFamilies.put(familyName.toLowerCase(),font);}  }
class C{  static public void validateExportGroupVolumeMap(String exportGroupName,Map<URI,Integer> volumeMap) throws ControllerException {  Map<Integer,List<URI>> reversedVolumeMap=new HashMap<Integer,List<URI>>();  for (  Entry<URI,Integer> entry : volumeMap.entrySet()) {    List<URI> uriList=reversedVolumeMap.get(entry.getValue());    if (null == uriList) {      uriList=new ArrayList<URI>();      reversedVolumeMap.put(entry.getValue(),uriList);    }    uriList.add(entry.getKey());  }  List<String> validationErrors=new ArrayList<String>();  reversedVolumeMap.remove(ExportGroup.LUN_UNASSIGNED);  for (  Entry<Integer,List<URI>> entry : reversedVolumeMap.entrySet()) {    if (entry.getValue().size() > 1) {      String vols=Joiner.on(", ").join(entry.getValue());      String error="LUN " + entry.getKey() + " is mapped to more than one volume ("+ vols+ ")";      _log.error("ExportGroup {} has LUN inconsistency: {}",exportGroupName,error);      validationErrors.add(error);    }  }  if (!validationErrors.isEmpty()) {    String details=Joiner.on(". ").join(validationErrors);    throw DeviceControllerException.exceptions.exportGroupInconsistentLunViolation(exportGroupName,details);  }  _log.info("volume map for Export Group {} has valid LUN information: {}",exportGroupName,volumeMap);}  }
class C{  public SafeTimeTracker(long delay,long random){  internalDelay=delay;  randomRange=random;}  }
class C{  public boolean isBlocking(){  return blocking;}  }
class C{  void resetPhysicalRegisters(IR ir){  GenericPhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();  for (Enumeration<Register> e=phys.enumerateAll(); e.hasMoreElements(); ) {    Register reg=e.nextElement();    reg.deallocateRegister();    reg.mapsToRegister=null;    reg.defList=null;    reg.useList=null;    setSpill(reg,0);  }}  }
class C{  public static ARGTrace loadARGTrace(Reader r) throws IOException, Importer.ImportException {  BufferedReader reader=new BufferedReader(r);  ARGTrace trace=new ARGTrace();  dr.evolution.util.TaxonList taxonList=null;  int minState=-1;  int stepSize=0;  String line;  ARGModel nullARG=new ARGModel(null,null,0,0);  ArrayList<String> nameList=new ArrayList<String>();  taxonList=(TaxonList)nullARG;  while ((line=reader.readLine()) != null) {    line.trim();    if (line.toUpperCase().startsWith("ARG")) {      StringTokenizer st=new StringTokenizer(line,"=");      nameList.add(st.nextToken());      ARGModel arg=nullARG.fromGraphStringCompressed(st.nextToken().trim());      trace.add(arg);    }  }  if (nameList.size() < 2) {    throw new Importer.ImportException("Less than two ARGs in the trace file");  }  minState=getStateNumber(nameList.get(0));  stepSize=getStateNumber(nameList.get(1)) - minState;  trace.setMinimumState(minState);  trace.setStepSize(stepSize);  return trace;}  }
class C{  private void validateSendMessage0(byte[] msg,OutputStream out,InputStream in) throws Exception {  out.write(msg);  byte[] res=new byte[MSG_SIZE];  int rcvd=0;  while (rcvd < res.length) {    int cnt=in.read(res,rcvd,res.length - rcvd);    if (cnt == -1)     fail("Server closed connection before echo reply was fully sent");    rcvd+=cnt;  }  assertEquals(msg.length,res.length);  for (int i=0; i < msg.length; i++)   assertEquals("Mismatch in position " + i,msg[i],res[i]);}  }
class C{  public void updateDoneText(ArrayList<String> resultList){  if (menuItemDone == null || resultList == null) {    return;  }  menuItemDone.setVisible(resultList.size() > 0);  menuItemDone.setTitle(getString(R.string.action_button_string,getString(R.string.action_done),resultList.size(),mDefaultCount));}  }
class C{  @Override public int hashCode(){  return type.hashCode();}  }
class C{  public static ToleratedUpdateError parseMap(SimpleOrderedMap<String> data){  final String id=data.get("id");  final String message=data.get("message");  final String t=data.get("type");  if (null == t || null == id || null == message) {    throw new SolrException(ErrorCode.SERVER_ERROR,"Map does not represent a ToleratedUpdateError, must contain 'type', 'id', and 'message'");  }  try {    return new ToleratedUpdateError(CmdType.valueOf(t),id,message);  } catch (  IllegalArgumentException iae) {    throw new SolrException(ErrorCode.SERVER_ERROR,"Invalid type for ToleratedUpdateError: " + t,iae);  }}  }
class C{  public static void initializeDefaults(IPreferenceStore store,Command cmd,int instId){  store.setDefault(PreferenceEntry.preferenceTargetEnabled.getString(instId),false);  store.setDefault(PreferenceEntry.preferenceTargetOpen.getString(instId),cmd.getOpenCmd());  store.setDefault(PreferenceEntry.preferenceTargetRun.getString(instId),cmd.getRunCmd());  store.setDefault(PreferenceEntry.preferenceTargetExplore.getString(instId),cmd.getExploreCmd());  store.setDefault(PreferenceEntry.preferenceTargetCopyPath.getString(instId),cmd.getCopyPathCmd());  store.setDefault(PreferenceEntry.preferenceListId.getString(instId),cmd.getId() - 1);  store.setDefault(PreferenceEntry.preferenceListString.getString(instId),cmd.name());  store.setDefault(PreferenceEntry.preferenceQuotes.getString(instId),Quotes.quotesNo.name());  store.setDefault(PreferenceEntry.preferenceDebug.getString(instId),Debug.debugNo.name());  store.setDefault(PreferenceEntry.preferenceTokenizer.getString(instId),Tokenizer.EasyShellTokenizerYes.name());}  }
class C{  public SQLClientInfoException(String reason,Map<String,ClientInfoStatus> failedProperties,Throwable cause){  super(reason,cause);  this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties);}  }
class C{  @Override public boolean execute(String action,JSONArray args,CallbackContext callbackContext){  this.callbackContext=callbackContext;  if (action.equals(ENCODE)) {    JSONObject obj=args.optJSONObject(0);    if (obj != null) {      String type=obj.optString(TYPE);      String data=obj.optString(DATA);      if (type == null) {        type=TEXT_TYPE;      }      if (data == null) {        callbackContext.error("User did not specify data to encode");        return true;      }      encode(type,data);    } else {      callbackContext.error("User did not specify data to encode");      return true;    }  } else   if (action.equals(SCAN)) {    scan(args);  } else {    return false;  }  return true;}  }
class C{  public IndicesAliasesRequestBuilder addAlias(String indices[],String alias,QueryBuilder filterBuilder){  request.addAlias(alias,filterBuilder,indices);  return this;}  }
class C{  private String generateFileParentDirectory(final String entityType,final Long entityId){  return FileSystemContentRepository.FINERACT_BASE_DIR + File.separator + ThreadLocalContextUtil.getTenant().getName().replaceAll(" ","").trim()+ File.separator+ "documents"+ File.separator+ entityType+ File.separator+ entityId+ File.separator+ ContentRepositoryUtils.generateRandomString();}  }
class C{  public void test_binarySearchLjava_util_ListLjava_lang_ObjectLjava_util_Comparator(){  final int rSize=myReversedLinkedList.size();  ReversedMyIntComparator comp=new ReversedMyIntComparator();  try {    Collections.binarySearch(null,new Object(),comp);    fail("Expected NullPointerException for null list parameter");  } catch (  NullPointerException e) {  }  for (int counter=0; counter < rSize; counter++) {    assertTrue("Returned incorrect binary search item position using custom comparator",myReversedLinkedList.get(Collections.binarySearch(myReversedLinkedList,myReversedLinkedList.get(counter),comp)) == myReversedLinkedList.get(counter));  }}  }
class C{  public static void deploy(Config config){  if (!contextIsValid(config))   return;synchronized (config) {    Resource dir=config.getDeployDirectory();    if (!dir.exists())     dir.mkdirs();    Resource[] children=dir.listResources(ALL_EXT);    Resource child;    String ext;    for (int i=0; i < children.length; i++) {      child=children[i];      try {        ext=ResourceUtil.getExtension(child,null);        if ("lar".equalsIgnoreCase(ext)) {          XMLConfigAdmin.updateArchive((ConfigImpl)config,child,true);        } else         if ("lex".equalsIgnoreCase(ext))         XMLConfigAdmin._updateRHExtension((ConfigImpl)config,child,true); else         if (config instanceof ConfigServer && "lco".equalsIgnoreCase(ext))         XMLConfigAdmin.updateCore((ConfigServerImpl)config,child,true);      } catch (      Throwable t) {        Log log=config.getLog("deploy");        log.error("Extension",t);      }    }  }}  }
class C{  @Deprecated public static DataflowPackage createPackage(File classpathElement,String stagingPath,String overridePackageName){  return createPackageAttributes(classpathElement,stagingPath,overridePackageName).getDataflowPackage();}  }
class C{  static void testUri(String s) throws Exception {  URI uri=URI.create(s);  log.println(uri);  Path path=Paths.get(uri);  log.println("  --> " + path);  URI result=path.toUri();  log.println("  --> " + result);  if (!result.equals(uri)) {    log.println("FAIL: Expected " + uri + ", got "+ result);    failures++;  }  log.println();}  }
class C{  protected void addMailAttributes(Mail aMail) throws MessagingException {  aMail.setAttribute(getAttributePrefix() + "taskName",getFetchTaskName());  aMail.setAttribute(getAttributePrefix() + "folderName",getMessageIn().getFolder().getFullName());  if (isRemoteRecipient())   aMail.setAttribute(getAttributePrefix() + "isRemoteRecipient",null);  if (isUserUndefined())   aMail.setAttribute(getAttributePrefix() + "isUserUndefined",true);  if (isBlacklistedRecipient())   aMail.setAttribute(getAttributePrefix() + "isBlacklistedRecipient",true);  if (isRecipientNotFound())   aMail.setAttribute(getAttributePrefix() + "isRecipientNotFound",true);  if (isMaxMessageSizeExceeded())   aMail.setAttribute(getAttributePrefix() + "isMaxMessageSizeExceeded",Integer.toString(getMessageIn().getSize()));  if (isRemoteReceivedHeaderInvalid())   aMail.setAttribute(getAttributePrefix() + "isRemoteReceivedHeaderInvalid",true);  if (isDefaultSenderLocalPart())   aMail.setAttribute(getAttributePrefix() + "isDefaultSenderLocalPart",true);  if (isDefaultSenderDomainPart())   aMail.setAttribute(getAttributePrefix() + "isDefaultSenderDomainPart",true);  if (isDefaultRemoteAddress())   aMail.setAttribute(getAttributePrefix() + "isDefaultRemoteAddress",true);}  }
class C{  public Rectangle(List<Vec> points){  uB=new DenseVector(points.get(0).length());  lB=new DenseVector(uB.length());  for (int i=0; i < uB.length(); i++) {    double max=Double.MIN_VALUE, min=Double.MAX_VALUE;    for (int j=0; j < points.size(); j++) {      max=Math.max(max,points.get(j).get(i));      min=Math.min(min,points.get(j).get(i));    }    uB.set(i,max);    lB.set(i,min);  }}  }
class C{  public static void runFileLoader(AbstractFileLoader loader,String[] options){  try {    String[] tmpOptions=options.clone();    if (Utils.getFlag('h',tmpOptions)) {      System.err.println("\nHelp requested\n" + makeOptionStr(loader));      return;    }  } catch (  Exception e) {  }  if (options.length > 0) {    if (loader instanceof OptionHandler) {      try {        ((OptionHandler)loader).setOptions(options);        for (int i=0; i < options.length; i++) {          if (options[i].length() > 0) {            options=new String[]{options[i]};            break;          }        }      } catch (      Exception ex) {        System.err.println(makeOptionStr(loader));        System.exit(1);      }    }    try {      loader.setFile(new File(options[0]));      if (loader instanceof IncrementalConverter) {        Instances structure=loader.getStructure();        System.out.println(structure);        Instance temp;        do {          temp=loader.getNextInstance(structure);          if (temp != null) {            System.out.println(temp);          }        } while (temp != null);      } else {        System.out.println(loader.getDataSet());      }    } catch (    Exception ex) {      ex.printStackTrace();    }  } else {    System.err.println(makeOptionStr(loader));  }}  }
class C{  public boolean matches(InventoryCrafting matrix,World world){  ArrayList arraylist=new ArrayList(this.recipeItems);  for (int i=0; i < 9; ++i) {    for (int j=0; j < 9; ++j) {      ItemStack itemstack=matrix.getStackInRowAndColumn(j,i);      if (itemstack != null) {        boolean flag=false;        Iterator iterator=arraylist.iterator();        while (iterator.hasNext()) {          ItemStack itemstack1=(ItemStack)iterator.next();          if (itemstack.getItem() == itemstack1.getItem() && (itemstack1.getItemDamage() == 32767 || itemstack.getItemDamage() == itemstack1.getItemDamage())) {            flag=true;            arraylist.remove(itemstack1);            break;          }        }        if (!flag) {          return false;        }      }    }  }  return arraylist.isEmpty();}  }
class C{  boolean cancel(){  return complete(null,null,CANCELLED);}  }
class C{  public static void resetPin(){  pin="";}  }
class C{  public boolean[][][] checkOutCoverage(String[] paths){  if (paths == null || paths.length == 0) {    logger.warning("No paths for DTED data given.");    return null;  }  logger.fine("checking out DTED at paths:");  for (int d1=0; d1 < paths.length; d1++) {    if (logger.isLoggable(Level.FINE)) {      logger.fine("       " + paths[d1]);    }    if (!BinaryFile.exists(paths[d1])) {      paths[d1]=null;      logger.fine("       - path invalid, ignoring.");    }  }  CoverageWandererCallback callback=new CoverageWandererCallback();  Wanderer wanderer=new Wanderer(callback);  for (int pathNum=0; pathNum < paths.length; pathNum++) {    wanderer.handleEntry(new File(paths[pathNum]));  }  return callback.getCoverage();}  }
class C{  public void commitResize(){  resizeWidgetIfNeeded(true);  requestLayout();}  }
class C{  static private HashSet<String> initTwoPartTLDs(){  HashSet<String> set=new HashSet<String>(900);  for (  String multiPartTLD : multiPartTLDs) {    try {      if (multiPartTLD.matches("^" + tld2 + "$")) {        set.add(multiPartTLD);      }    } catch (    Exception ex) {      debugOut(ex);    }  }  debugOut("initTwoPartTLDs size=" + set.size());  return set;}  }
class C{  private void registerEventHandler(){  if (specificView != null) {    specificView.addPropertyChangeListener(eventHandler);  } else {    if (editor != null) {      editor.addPropertyChangeListener(new WeakPropertyChangeListener(eventHandler));      if (activeView != null) {        activeView.removePropertyChangeListener(eventHandler);      }      activeView=editor.getActiveView();      if (activeView != null) {        activeView.addPropertyChangeListener(eventHandler);      }    }  }}  }
class C{  public static HashMap<Integer,ArrayList<IComment>> loadMultipleCommentsById(final SQLProvider provider,final Collection<Integer> commentIds) throws CouldntLoadDataException {  Preconditions.checkNotNull(provider,"IE00480: provider argument can not be null");  Preconditions.checkNotNull(commentIds,"IE00481: commentIds argument can not be null");  final String query="SELECT * FROM get_all_comment_ancestors_multiple(?)";  final HashMap<Integer,IComment> commentIdToComment=new HashMap<>();  final Object[] commentIdsArray=commentIds.toArray();  final HashMap<Integer,ArrayList<IComment>> commentIdToComments=new HashMap<>();  try (PreparedStatement statement=provider.getConnection().getConnection().prepareCall(query)){    statement.setArray(1,provider.getConnection().getConnection().createArrayOf("int4",commentIdsArray));    final ResultSet resultSet=statement.executeQuery();    while (resultSet.next()) {      final int rootComment=resultSet.getInt("commentid");      resultSet.getInt("level");      final int commentId=resultSet.getInt("id");      final int parentId=resultSet.getInt("parent_id");      final int userId=resultSet.getInt("user_id");      final String commentText=resultSet.getString("comment");      final IUser user=CUserManager.get(provider).getUserById(userId);      final CComment comment=new CComment(commentId,user,commentIdToComment.get(parentId),commentText);      commentIdToComment.put(commentId,comment);      if (commentIdToComments.containsKey(rootComment)) {        commentIdToComments.get(rootComment).add(comment);      } else {        commentIdToComments.put(rootComment,Lists.<IComment>newArrayList(comment));      }    }  } catch (  final SQLException exception) {    throw new CouldntLoadDataException(exception);  }  return commentIdToComments;}  }
class C{  public Response createUser(UserEntity userEntity){  return restClient.post("users",userEntity,new HashMap<String,String>());}  }
class C{  @Override public Object create(final ConfigurableFactoryContext ctx){  return new LockedDoor(getKey(ctx),getClass(ctx));}  }
class C{  public MapMetaBuilder start(){  return new MapMetaBuilder();}  }
class C{  public static double parseDouble(String s){  return parseDoubleDefault(s,0.0);}  }
class C{  public void addPropertyChangeListener(final PropertyChangeListener listener){  propertyChangeSupport.addPropertyChangeListener(listener);}  }
class C{  public void model(DataSet dataSet,int topics){  model(dataSet,topics,new FakeExecutor());}  }
class C{  private void loadCurrency(){  int C_Currency_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNo,"C_Currency_ID");  if (C_Currency_ID == 0)   C_Currency_ID=Env.getContextAsInt(Env.getCtx(),"$C_Currency_ID");  String sql="SELECT C_Currency_ID, ISO_Code FROM C_Currency " + "WHERE IsActive='Y' ORDER BY 2";  KeyNamePair defaultValue=null;  try {    Statement stmt=DB.createStatement();    ResultSet rs=stmt.executeQuery(sql);    while (rs.next()) {      int id=rs.getInt("C_Currency_ID");      String s=rs.getString("ISO_Code");      KeyNamePair p=new KeyNamePair(id,s);      curFrom.addItem(p);      curTo.addItem(p);      if (id == C_Currency_ID)       defaultValue=p;    }    rs.close();    stmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,"Calculator.loadCurrency",e);  }  if (defaultValue != null) {    curFrom.setSelectedItem(defaultValue);    curTo.setSelectedItem(defaultValue);  }  curTo.addActionListener(this);  m_currencyOK=true;}  }
class C{  protected void installComponents(){  if (scrollableTabLayoutEnabled()) {    if (tabScroller == null) {      tabScroller=new ScrollableTabSupport(tabPane.getTabPlacement());      tabPane.add(tabScroller.viewport);    }  }  installTabContainer();}  }
class C{  public void delete(Key key){  if (key == null)   throw new NullPointerException("called delete() with null key");  st.remove(key);}  }
class C{  private void fileFieldChanged(){  IFile file=getFileFieldValue();  if (file == null || !file.exists()) {    return;  }  if (methodNameField.getText().length() == 0) {    methodNameField.setText(ClientBundleUtilities.suggestMethodName(file));  }  if (resourceTypeField.getText().length() == 0) {    resourceTypeField.setText(ClientBundleUtilities.suggestResourceTypeName(javaProject,file));  }}  }
class C{  @Ignore public void estLongTravelTimeInEmptySlotShortBinsSimultaneousLinkEnter(){  Scenario scenario=ScenarioUtils.createScenario(ConfigUtils.createConfig());  Network network=scenario.getNetwork();  ((Network)network).setCapacityPeriod(3600.0);  Node node1=network.getFactory().createNode(Id.create(1,Node.class),new Coord(0,0));  Node node2=network.getFactory().createNode(Id.create(2,Node.class),new Coord(1000,0));  network.addNode(node1);  network.addNode(node2);  Link link1=network.getFactory().createLink(Id.create(1,Link.class),node1,node2);  link1.setCapacity(6.0);  link1.setFreespeed(5.56);  link1.setLength(1000.0);  link1.setNumberOfLanes(1.0);  network.addLink(link1);  int timeBinSize=5 * 60;  TravelTimeCalculator ttcalc=new TravelTimeCalculator(network,timeBinSize,12 * 3600,scenario.getConfig().travelTimeCalculator());  Id<Vehicle> vehId1=Id.create(1,Vehicle.class);  Id<Vehicle> vehId2=Id.create(2,Vehicle.class);  Id<Vehicle> vehId3=Id.create(3,Vehicle.class);  double linkEnterTime1=7.0 * 3600;  double linkTravelTime1=3.0 * 60;  double linkEnterTime2=7.0 * 3600;  double linkTravelTime2=10.0 * 60;  double linkEnterTime3=7.0 * 3600 + 6.0 * 60;  double linkTravelTime3=14.0 * 60;  ttcalc.handleEvent(new LinkEnterEvent(linkEnterTime1,vehId1,link1.getId()));  ttcalc.handleEvent(new LinkEnterEvent(linkEnterTime2,vehId2,link1.getId()));  ttcalc.handleEvent(new LinkLeaveEvent(linkEnterTime1 + linkTravelTime1,vehId1,link1.getId()));  ttcalc.handleEvent(new LinkEnterEvent(linkEnterTime3,vehId3,link1.getId()));  ttcalc.handleEvent(new LinkLeaveEvent(linkEnterTime2 + linkTravelTime2,vehId2,link1.getId()));  ttcalc.handleEvent(new LinkLeaveEvent(linkEnterTime3 + linkTravelTime3,vehId3,link1.getId()));  assertEquals(6.5 * 60,ttcalc.getLinkTravelTimes().getLinkTravelTime(link1,linkEnterTime1,null,null));  assertEquals(14.0 * 60,ttcalc.getLinkTravelTimes().getLinkTravelTime(link1,linkEnterTime3,null,null));  assertEquals(19.0 * 60,ttcalc.getLinkTravelTimes().getLinkTravelTime(link1,7.0 * 3600.0 + 11.0 * 60,null,null));}  }
class C{  public boolean isSetAuthChallengeResponse(){  return this.authChallengeResponse != null;}  }
class C{  public boolean hasLocalColumn(Column column){  for (int idx=0; idx < getReferenceCount(); idx++) {    if (column.equals(getReference(idx).getLocalColumn())) {      return true;    }  }  return false;}  }
class C{  public TSActionDelay(TransitSectionAction tsa,int delay){  _tsa=tsa;  _delay=delay;}  }
class C{  public void testLogRead() throws Exception {  IgfsLogger log=IgfsLogger.logger(ENDPOINT,IGFS_NAME,LOG_DIR,10);  log.logOpen(1,PATH,PRIMARY,2,3L);  log.logRandomRead(1,4L,5);  log.logSeek(1,6L);  log.logSkip(1,7L);  log.logMark(1,8L);  log.logReset(1);  log.logCloseIn(1,9L,10L,11);  log.close();  checkLog(new SB().a(U.jvmPid() + d() + TYPE_OPEN_IN+ d()+ PATH_STR_ESCAPED+ d()+ PRIMARY+ d()+ 1+ d()+ 2+ d()+ 3+ d(14)).toString(),new SB().a(U.jvmPid() + d() + TYPE_RANDOM_READ+ d(3)+ 1+ d(7)+ 4+ d()+ 5+ d(8)).toString(),new SB().a(U.jvmPid() + d() + TYPE_SEEK+ d(3)+ 1+ d(7)+ 6+ d(9)).toString(),new SB().a(U.jvmPid() + d() + TYPE_SKIP+ d(3)+ 1+ d(9)+ 7+ d(7)).toString(),new SB().a(U.jvmPid() + d() + TYPE_MARK+ d(3)+ 1+ d(10)+ 8+ d(6)).toString(),new SB().a(U.jvmPid() + d() + TYPE_RESET+ d(3)+ 1+ d(16)).toString(),new SB().a(U.jvmPid() + d() + TYPE_CLOSE_IN+ d(3)+ 1+ d(11)+ 9+ d()+ 10+ d()+ 11+ d(3)).toString());}  }
class C{  @Override public Leaf prior(){  if (leaf.isDeleted())   throw new IllegalStateException("deleted");  backup();  AbstractNode<?> sibling=null;{    AbstractNode<?> child=leaf;    Node p=child.getParent();    while (true) {      if (p == null) {        restore();        return null;      }      sibling=p.getLeftSibling(child,true);      if (sibling != null)       break;      if (p != stack.pop())       throw new AssertionError();      child=p;      p=p.getParent();    }  }{    while (!sibling.isLeaf()) {      stack.push((Node)sibling);      sibling=((Node)sibling).getChild(sibling.getKeyCount());    }  }  return leaf=(Leaf)sibling;}  }
class C{  public PlaceEvent(Entity placer,Direction side,Vector3D hit,Item item){  this.placer=placer;  this.side=side;  this.hit=hit;  this.item=item;}  }
class C{  public void parse(ExtensionProfile extProfile,Reader reader) throws IOException, ParseException {  XmlNamespace openSearchDescNs=Namespaces.getOpenSearchDescNs();  new XmlParser().parse(reader,new Handler(extProfile),openSearchDescNs.getUri(),"OpenSearchDescription");}  }
class C{  public static Monitor newHeavyCondLock(String name){  return factory.newMonitor(name);}  }
class C{  @After public void tearDown(){  parameterFile=null;}  }
class C{  public boolean isFilteringEnabled(){  return mFilterData;}  }
class C{  private RandoopRunStatus generateAndCompile(TestEnvironment environment,RandoopOptions options){  return generateAndCompile(environment,options,false);}  }
class C{  public option addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  protected XYSeries toSeries(String legend,List<XYDataItem> stats){  XYSeries xySeries=new XYSeries(legend,true,false);synchronized (stats) {    for (    XYDataItem item : stats) {      xySeries.addOrUpdate(item.getX(),item.getY());    }  }  return xySeries;}  }
class C{  public ExecutorCompletionService(Executor executor,BlockingQueue<Future<V>> completionQueue){  if (executor == null || completionQueue == null)   throw new NullPointerException();  this.executor=executor;  this.aes=(executor instanceof AbstractExecutorService) ? (AbstractExecutorService)executor : null;  this.completionQueue=completionQueue;}  }
class C{  private ThreadGroup(){  this.name="system";  this.maxPriority=Thread.MAX_PRIORITY;  this.parent=null;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public static void stopProgressDialog(ProgressDialog progressDialog){  if (progressDialog != null && progressDialog.isShowing()) {    progressDialog.dismiss();  }}  }
class C{  @Override public int length(){  return 1;}  }
class C{  @Override public void start(){  assert cacheFlushFreq != 0 || cacheMaxSize != 0;  if (stopping.compareAndSet(true,false)) {    if (log.isDebugEnabled())     log.debug("Starting write-behind store for cache '" + cacheName + '\'');    cacheCriticalSize=(int)(cacheMaxSize * CACHE_OVERFLOW_RATIO);    if (cacheCriticalSize == 0)     cacheCriticalSize=CacheConfiguration.DFLT_WRITE_BEHIND_CRITICAL_SIZE;    flushThreads=new GridWorker[flushThreadCnt];    writeCache=new ConcurrentLinkedHashMap<>(initCap,0.75f,concurLvl);    for (int i=0; i < flushThreads.length; i++) {      flushThreads[i]=new Flusher(gridName,"flusher-" + i,log);      new IgniteThread(flushThreads[i]).start();    }  }}  }
class C{  public boolean isSelected(int index){  return mask[elements[index]];}  }
class C{  @Override public synchronized int read(){  return pos < count ? buf[pos++] & 0xFF : -1;}  }
class C{  public ProcessBuilder redirectErrorStream(boolean redirectErrorStream){  this.redirectErrorStream=redirectErrorStream;  return this;}  }
class C{  @Deprecated public ObjectName[] manageBridgeServers() throws AdminException, MalformedObjectNameException {  return manageCacheServers();}  }
class C{  public CacheAtomicUpdateTimeoutException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  @Override public String toString(){  return super.toString() + ": connectionId=" + connectionId;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("DbConnectionConfig[");  buffer.append("cntByDriver = ").append(m_cntByDriver);  buffer.append(", cntParam = ").append(m_cntParam);  buffer.append(", url = ").append(m_url);  buffer.append(", user = ").append(m_user);  buffer.append(", pwd = ").append(m_pwd);  buffer.append("]");  return buffer.toString();}  }
class C{  private static Object add(final Object array,final int index,final Object element,final Class<?> clss){  if (array == null) {    if (index != 0) {      throw new IndexOutOfBoundsException("Index: " + index + ", Length: 0");    }    Object joinedArray=Array.newInstance(clss,1);    Array.set(joinedArray,0,element);    return joinedArray;  }  int length=Array.getLength(array);  if (index > length || index < 0) {    throw new IndexOutOfBoundsException("Index: " + index + ", Length: "+ length);  }  Object result=Array.newInstance(clss,length + 1);  System.arraycopy(array,0,result,0,index);  Array.set(result,index,element);  if (index < length) {    System.arraycopy(array,index,result,index + 1,length - index);  }  return result;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:26.358 -0500",hash_original_method="8C87E0C6EBD471788AC0CD93A9D4E893",hash_generated_method="4E3BD280C1BAB2E4AFBDDAC8A45B8091") private void handleSetSelectNetwork(AsyncResult ar){  if (!(ar.userObj instanceof NetworkSelectMessage)) {    if (LOCAL_DEBUG)     Log.d(LOG_TAG,"unexpected result from user object.");    return;  }  NetworkSelectMessage nsm=(NetworkSelectMessage)ar.userObj;  if (nsm.message != null) {    if (LOCAL_DEBUG)     Log.d(LOG_TAG,"sending original message to recipient");    AsyncResult.forMessage(nsm.message,ar.result,ar.exception);    nsm.message.sendToTarget();  }  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(getContext());  SharedPreferences.Editor editor=sp.edit();  editor.putString(NETWORK_SELECTION_KEY,nsm.operatorNumeric);  editor.putString(NETWORK_SELECTION_NAME_KEY,nsm.operatorAlphaLong);  if (!editor.commit()) {    Log.e(LOG_TAG,"failed to commit network selection preference");  }}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String f=getString(stack);  if (f != null)   Seeker.getInstance().addArchiveDirectory(f,Seeker.ALL_DIR_MASK);  return null;}  }
class C{  public PaymentGatewayBluePayAUTHNETEMU(){  m_sCommerceID=AppConfig.getInstance().getProperty("payment.BluePay.accountID");  this.m_sCommercePassword=AppConfig.getInstance().getProperty("payment.BluePay.secretKey");  m_bTestMode=AppConfig.getInstance().getBoolean("payment.testmode");  ENDPOINTADDRESS=AppConfig.getInstance().getProperty("payment.BluePay.URL");}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.util.Properties props=null;  if (curNumberOfParameters == 4)   props=(java.util.Properties)stack.pop();  java.io.File dest=getFile(stack);  String src=getString(stack);  String serverName=getString(stack);  return FileDownloader.getFileDownloader(stack.getUIMgrSafe()).downloadFile(serverName,src,dest,false,props);}  }
class C{  public HadoopMapReducePlanGroup groupForId(UUID id){  return idToGrp.get(id);}  }
class C{  public static Object invokeMethod(Object instance,String methodName,Object... arguments) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException {  return getMethod(instance.getClass(),methodName,DataType.getPrimitive(arguments)).invoke(instance,arguments);}  }
class C{  public boolean stem(char[] word){  return stem(word,word.length);}  }
class C{  public static final void normalize(Vector3d v,double length){  if ((v.x == 0.0) && (v.y == 0.0) && (v.z == 0.0))   return;  v.scale(1 / length);}  }
class C{  public PublisherMap(Publisher<? extends T> source,Function<? super T,? extends R> mapper){  super(source);  this.mapper=Objects.requireNonNull(mapper,"mapper");}  }
class C{  private List<String> divideOriginalTextToStringLineList(String originalText){  List<String> listStringLine=new ArrayList<String>();  String line="";  float textWidth;  String[] listParageraphes=originalText.split("\n");  for (int j=0; j < listParageraphes.length; j++) {    String[] arrayWords=listParageraphes[j].split(" ");    for (int i=0; i < arrayWords.length; i++) {      line+=arrayWords[i] + " ";      textWidth=getTextPaint().measureText(line);      if (getTextAreaWidth() == textWidth) {        listStringLine.add(line);        line="";        continue;      } else       if (getTextAreaWidth() < textWidth) {        int lastWordCount=arrayWords[i].length();        line=line.substring(0,line.length() - lastWordCount - 1);        if (line.trim().length() == 0)         continue;        line=justifyTextLine(textPaint,line.trim(),getTextAreaWidth());        listStringLine.add(line);        line="";        i--;        continue;      }      if (i == arrayWords.length - 1) {        listStringLine.add(line);        line="";      }    }  }  return listStringLine;}  }
class C{  public Object remove(String name){  return nameValuePairs.remove(name);}  }
class C{  protected void appendSummarySize(final StringBuffer buffer,final String fieldName,final int size){  buffer.append(sizeStartText);  buffer.append(size);  buffer.append(sizeEndText);}  }
class C{  public static boolean checkExtensionsDependencies(JarFile jar){  if (providers == null) {    return true;  }  try {    ExtensionDependency extDep=new ExtensionDependency();    return extDep.checkExtensions(jar);  } catch (  ExtensionInstallationException e) {    debug(e.getMessage());  }  return false;}  }
class C{  @Override public int EOF_sym(){  return 0;}  }
class C{  public void testAddNull(){  try {    LinkedBlockingQueue q=new LinkedBlockingQueue(1);    q.add(null);    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  private static <O,A,C extends Attribute<O,A>,R extends Class<? extends C>>R generateSimpleAttribute(Class<C> attributeSuperClass,Class<O> pojoClass,Class<A> attributeValueType,String attributeName,String target){  try {    ClassPool pool=new ClassPool(false);    pool.appendClassPath(new ClassClassPath(pojoClass));    CtClass attributeClass=pool.makeClass(pojoClass.getName() + "$$CQEngine_" + attributeSuperClass.getSimpleName()+ "_"+ attributeName);    attributeClass.setSuperclass(pool.get(attributeSuperClass.getName()));    SignatureAttribute.ClassType genericTypeOfAttribute=new SignatureAttribute.ClassType(attributeSuperClass.getName(),new SignatureAttribute.TypeArgument[]{new SignatureAttribute.TypeArgument(new SignatureAttribute.ClassType(pojoClass.getName())),new SignatureAttribute.TypeArgument(new SignatureAttribute.ClassType(attributeValueType.getName()))});    attributeClass.setGenericSignature(genericTypeOfAttribute.encode());    CtConstructor constructor=CtNewConstructor.make("public " + attributeClass.getSimpleName() + "() { "+ "super(\""+ attributeName+ "\");"+ " }",attributeClass);    attributeClass.addConstructor(constructor);    CtMethod getterMethod=CtMethod.make("public " + attributeValueType.getName() + " getValue("+ pojoClass.getName()+ " object, "+ QueryOptions.class.getName()+ " queryOptions) { "+ "return ("+ attributeValueType.getName()+ ") "+ GeneratedAttributeSupport.class.getName()+ ".valueOf("+ target+ ");"+ " }",attributeClass);    attributeClass.addMethod(getterMethod);    CtMethod getterBridgeMethod=CtMethod.make("public java.lang.Object getValue(java.lang.Object object, " + QueryOptions.class.getName() + " queryOptions) { "+ "return getValue(("+ pojoClass.getName()+ ")object, queryOptions);"+ " }",attributeClass);    getterBridgeMethod.setModifiers(getterBridgeMethod.getModifiers() | AccessFlag.BRIDGE);    attributeClass.addMethod(getterBridgeMethod);    @SuppressWarnings("unchecked") R result=(R)attributeClass.toClass(pojoClass.getClassLoader(),pojoClass.getProtectionDomain());    attributeClass.detach();    return result;  } catch (  Exception e) {    throw new IllegalStateException(getExceptionMessage(pojoClass,attributeValueType,attributeName),e);  }}  }
class C{  public Wildcards withNwSrcMask(int srcCidrMask){  int flags=Flag.NW_SRC.setInt(this.flags,Math.max(0,32 - srcCidrMask));  if (flags == this.flags)   return this; else   return new Wildcards(flags);}  }
class C{  public JSONObject put(String key,Object value) throws JSONException {  if (key == null) {    throw new NullPointerException("Null key.");  }  if (value != null) {    testValidity(value);    this.map.put(key,value);  } else {    this.remove(key);  }  return this;}  }
class C{  private SystemPropertiesProxy(){}  }
class C{  protected DefaultPathHandler(){}  }
class C{  public ModifiableSolrParams(SolrParams params){  vals=new LinkedHashMap<>();  if (params != null) {    this.add(params);  }}  }
class C{  public static void main(String[] args) throws Exception {  Ignition.setClientMode(true);  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    if (!ExamplesUtils.hasServerNodes(ignite))     return;    IgniteServices svcs=ignite.services(ignite.cluster().forServers());    try {      svcs.deployClusterSingleton("myClusterSingletonService",new SimpleMapServiceImpl());      svcs.deployNodeSingleton("myNodeSingletonService",new SimpleMapServiceImpl());      svcs.deployMultiple("myMultiService",new SimpleMapServiceImpl(),2,0);      serviceProxyExample(ignite);      serviceInjectionExample(ignite);    }  finally {      ignite.services().cancelAll();    }  } }  }
class C{  public void remove(String containerRelativePath,IPath indexedContainer){  request(new RemoveFromIndex(containerRelativePath,indexedContainer,this));}  }
class C{  protected Angle normalizeAzimuth(Angle azimuth){  if (azimuth != null)   return Angle.normalizedLongitude(azimuth);  return null;}  }
class C{  public static OnMergeClause create(String windowName,String optionalAsName,List<OnMergeMatchItem> matchItems){  return new OnMergeClause(windowName,optionalAsName,matchItems);}  }
class C{  @Override public void connectionOpen(){  lock.lock();  try {    connectionOpen=true;    StoredPaymentChannelClientStates channels=(StoredPaymentChannelClientStates)wallet.getExtensions().get(StoredPaymentChannelClientStates.EXTENSION_ID);    if (channels != null)     storedChannel=channels.getUsableChannelForServerID(serverId);    step=InitStep.WAITING_FOR_VERSION_NEGOTIATION;    Protos.ClientVersion.Builder versionNegotiationBuilder=Protos.ClientVersion.newBuilder().setMajor(1).setMinor(0);    if (storedChannel != null) {      versionNegotiationBuilder.setPreviousChannelContractHash(ByteString.copyFrom(storedChannel.contract.getHash().getBytes()));      log.info("Begun version handshake, attempting to reopen channel with contract hash {}",storedChannel.contract.getHash());    } else     log.info("Begun version handshake creating new channel");    conn.sendToServer(Protos.TwoWayChannelMessage.newBuilder().setType(Protos.TwoWayChannelMessage.MessageType.CLIENT_VERSION).setClientVersion(versionNegotiationBuilder).build());  }  finally {    lock.unlock();  }}  }
class C{  private int[] makeKenLMInput(Sequence<IString> sequence,int[] priorState){  final int sequenceSize=sequence.size();  int[] ngramIds=new int[sequenceSize + priorState.length];  if (priorState.length > 0) {    System.arraycopy(priorState,0,ngramIds,sequenceSize,priorState.length);  }  for (int i=0; i < sequenceSize; i++) {    ngramIds[sequenceSize - 1 - i]=toKenLMId(sequence.get(i));  }  return ngramIds;}  }
class C{  public BaseThumbnailRequest(String requestUrl,IOneDriveClient client,List<Option> options){  super(requestUrl,client,options,Thumbnail.class);}  }
class C{  public DrawingAttributes(String prefix,Properties props){  this();  setProperties(prefix,props);}  }
class C{  public int insertFiredTrigger(Connection conn,OperableTrigger trigger,String state,JobDetail job) throws SQLException {  PreparedStatement ps=null;  try {    ps=conn.prepareStatement(rtp(INSERT_FIRED_TRIGGER));    ps.setString(1,trigger.getFireInstanceId());    ps.setString(2,trigger.getKey().getName());    ps.setString(3,trigger.getKey().getGroup());    ps.setString(4,instanceId);    ps.setBigDecimal(5,new BigDecimal(String.valueOf(System.currentTimeMillis())));    ps.setBigDecimal(6,new BigDecimal(String.valueOf(trigger.getNextFireTime().getTime())));    ps.setString(7,state);    if (job != null) {      ps.setString(8,trigger.getJobKey().getName());      ps.setString(9,trigger.getJobKey().getGroup());      setBoolean(ps,10,job.isConcurrentExectionDisallowed());      setBoolean(ps,11,job.requestsRecovery());    } else {      ps.setString(8,null);      ps.setString(9,null);      setBoolean(ps,10,false);      setBoolean(ps,11,false);    }    ps.setInt(12,trigger.getPriority());    return ps.executeUpdate();  }  finally {    closeStatement(ps);  }}  }
class C{  public SpkacMissingPropertyException(String message,Throwable causeThrowable){  super(message,causeThrowable);}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws IOException {  this.doGet(request,response);}  }
class C{  protected String encodeDiff(final Task<Diff> task,final Diff diff) throws ConfigurationException, UnsupportedEncodingException, DecodingException, EncodingException, SQLConsumerException {  RevisionCodecData codecData=diff.getCodecData();  String encoding=encoder.encodeDiff(codecData,diff);  if (VERIFICATION_ENCODING) {    RevisionDecoder decoder=new RevisionDecoder(WIKIPEDIA_ENCODING);    decoder.setInput(encoding);    Diff decDiff=decoder.decode();    verify(task,decDiff,diff);  }  return encoding;}  }
class C{  public h3 addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    byte numNeighbouringStreamCells=0;    double currentID=0;    double currentValue=0;    updateProgress("Finding network links:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  currentValue=output.getValue(y,x);                  if (currentValue == 2) {                    flag=false;                    break;                  }                  output.setValue(y,x,output.getValue(y,x) + 1);                }              } else {                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Finding network links:",(int)progress);    }    updateProgress("Finding network nodes:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          if (pntr.getValue(row,col) == 0) {            output.setValue(row,col,5);          } else {            numNeighbouringStreamCells=0;            for (c=0; c < 8; c++) {              x=col + dX[c];              y=row + dY[c];              if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {                numNeighbouringStreamCells++;              }            }            if (numNeighbouringStreamCells == 0) {              output.setValue(row,col,3);            } else             if (numNeighbouringStreamCells > 1) {              output.setValue(row,col,4);            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Finding network nodes:",(int)progress);    }    String retData="Classification Key\n\n";    retData=retData + "Exterior Link\t1\n";    retData=retData + "Interior Link\t2\n";    retData=retData + "Source Node\t3\n";    retData=retData + "Link Node\t4\n";    retData=retData + "Sink Node\t5\n";    returnData(retData);    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public int hashCode(){  return hash;}  }
class C{  protected void copyMatrix(int from[][],int to[][]){  for (int i=0; i < from.length; i++) {    for (int j=0; j < from[i].length; j++) {      to[i][j]=from[i][j];    }  }}  }
class C{  public final int countWifis(final int session){  final Cursor cursor=contentResolver.query(ContentUris.withAppendedId(Uri.withAppendedPath(ContentProvider.CONTENT_URI_WIFI,ContentProvider.CONTENT_URI_OVERVIEW_SUFFIX),session),new String[]{Schema.COL_ID},null,null,null);  final int count=cursor.getCount();  cursor.close();  return count;}  }
class C{  public boolean isEdgeAddable(Edge edge,Graph graph){  return !edge.getNode1().equals(edge.getNode2());}  }
class C{  public static void copyFiles(String original,String copy) throws IOException {  InputStream in=FileUtils.newInputStream(original);  OutputStream out=FileUtils.newOutputStream(copy,false);  copyAndClose(in,out);}  }
class C{  public Matrix4x3f rotationYXZ(float angleY,float angleX,float angleZ){  float cosY=(float)Math.cos(angleY);  float sinY=(float)Math.sin(angleY);  float cosX=(float)Math.cos(angleX);  float sinX=(float)Math.sin(angleX);  float cosZ=(float)Math.cos(angleZ);  float sinZ=(float)Math.sin(angleZ);  float m_sinY=-sinY;  float m_sinX=-sinX;  float m_sinZ=-sinZ;  float nm00=cosY;  float nm02=m_sinY;  float nm20=sinY;  float nm22=cosY;  float nm10=nm20 * sinX;  float nm11=cosX;  float nm12=nm22 * sinX;  m20=nm20 * cosX;  m21=m_sinX;  m22=nm22 * cosX;  m00=nm00 * cosZ + nm10 * sinZ;  m01=nm11 * sinZ;  m02=nm02 * cosZ + nm12 * sinZ;  m10=nm00 * m_sinZ + nm10 * cosZ;  m11=nm11 * cosZ;  m12=nm02 * m_sinZ + nm12 * cosZ;  m30=0.0f;  m31=0.0f;  m32=0.0f;  properties=0;  return this;}  }
class C{  public void reset(EvolutionState state,int thread){  IntegerVectorSpecies s=(IntegerVectorSpecies)species;  for (int x=0; x < genome.length; x++)   genome[x]=randomValueFromClosedInterval(0,s.computeMaxGene(x,genome),state.random[thread]);}  }
class C{  public static short toShort(NibbleArray nibbles,int start){  return toShort(nibbles.get(start),nibbles.get(start + 1),nibbles.get(start + 2),nibbles.get(start + 3));}  }
class C{  public static Instances rmCoveredBySuccessives(Instances data,ArrayList<Rule> rules,int index){  Instances rt=new Instances(data,0);  for (int i=0; i < data.numInstances(); i++) {    Instance datum=data.instance(i);    boolean covered=false;    for (int j=index + 1; j < rules.size(); j++) {      Rule rule=rules.get(j);      if (rule.covers(datum)) {        covered=true;        break;      }    }    if (!covered) {      rt.add(datum);    }  }  return rt;}  }
class C{  public double normalizeLatitude(double lat){  if (lat > NORTH_BOUNDARY) {    return NORTH_BOUNDARY;  } else   if (lat < SOUTH_BOUNDARY) {    return SOUTH_BOUNDARY;  }  return lat;}  }
class C{  public List<GenericDataDB> queryDeep(String where,String... selectionArg){  Cursor cursor=db.rawQuery(getSelectDeep() + where,selectionArg);  return loadDeepAllAndCloseCursor(cursor);}  }
class C{  public ReplEvent peek() throws InterruptedException {  return eventQueue.peek();}  }
class C{  public synchronized void shutdown(){  shutdown=true;  notifyAll();}  }
class C{  public void dragAndDrop(final HtmlElement element,final int offsetX,final int offsetY){  TestLogging.logWebStep("dragAndDrop " + element.toHTML() + " to offset(x,y): ("+ offsetX+ ","+ offsetY+ ")",false);  element.captureSnapshot("before draging");  new Actions(driver).dragAndDropBy((WebElement)element.getElement(),offsetX,offsetY).perform();  element.captureSnapshot("after dropping");}  }
class C{  public Object readCostMatrixOld(Element node) throws Exception {  weka.classifiers.CostMatrix matrix;  weka.core.matrix.Matrix matrixNew;  StringWriter writer;  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  matrixNew=(weka.core.matrix.Matrix)readMatrix(node);  writer=new StringWriter();  matrixNew.write(writer);  matrix=new weka.classifiers.CostMatrix(new StringReader(writer.toString()));  return matrix;}  }
class C{  public boolean hasContinuityOfCareRecord(){  return hasExtension(ContinuityOfCareRecord.class);}  }
class C{  public boolean invalidateIt(){  log.info("invalidateIt - " + toString());  setDocAction(DOCACTION_Prepare);  return true;}  }
class C{  public void testTokens() throws Exception {  ByteTranslationStateMachine bsm=new ByteTranslationStateMachine();  bsm.init();  final int NULL=1;  final int EVEN=2;  final int EVEN_SUB=3;  for (int i=0; i < 256; i++) {    byte[] string=new byte[1];    string[0]=(byte)i;    if (i == 0)     bsm.load(string,NULL,null,false); else     if (i % 4 == 0)     bsm.load(string,EVEN_SUB,"sub".getBytes(),false); else     if (i % 2 == 0)     bsm.load(string,EVEN,null,false);  }  for (int i=0; i < 256; i++) {    ByteState state=bsm.add((byte)i);    assertEquals("should be accepted",ByteState.ACCEPTED,state);    if (i == 0) {      assertTrue("null should be token",bsm.isToken());      assertEquals("token should be NULL",NULL,bsm.getToken());    } else     if (i % 2 == 0) {      assertTrue("even byte should be token",bsm.isToken());      if (i % 4 == 0) {        assertEquals("token should be EVEN_SUB",EVEN_SUB,bsm.getToken());        assertTrue("EVEN_SUB should have sub",bsm.isSubstitute());        assertEquals("looking for substitution","sub",new String(bsm.getSubstitute()));      } else {        assertEquals("token should be EVEN",EVEN,bsm.getToken());        assertFalse("EVEN should not have sub",bsm.isSubstitute());        assertEquals("looking for substitution",null,bsm.getSubstitute());      }    } else {      assertEquals("odd should just be accepted",ByteState.ACCEPTED,state);    }  }}  }
class C{  public boolean isClosedOrPartial(){  return ((ConsCell)getTerm()).isClosedOrPartial();}  }
class C{  @SuppressWarnings("rawtypes") public void testHttpBroMessageWithZeroDecimalTruncation() throws ParseException {{    String rawMessage="{\"http\": {\"ts\":1467657279,\"uid\":\"CMYLzP3PKiwZAgBa51\",\"id.orig_h\":\"192.168.138.158\",\"id.orig_p\":49206,\"id.resp_h\":\"95.163.121.204\"," + "\"id.resp_p\":80,\"trans_depth\":2,\"method\":\"GET\",\"host\":\"7oqnsnzwwnm6zb7y.gigapaysun.com\",\"uri\":\"/img/flags/it.png\",\"referrer\":\"http://7oqnsnzwwnm6zb7y.gigapaysun.com/11iQmfg\",\"user_agent\":\"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0)\",\"request_body_len\":0,\"response_body_len\":552,\"status_code\":200,\"status_msg\":\"OK\",\"tags\":[],\"resp_fuids\":[\"F3m7vB2RjUe4n01aqj\"],\"resp_mime_types\":[\"image/png\"]}}";    Map rawMessageMap=(Map)jsonParser.parse(rawMessage);    JSONObject rawJson=(JSONObject)rawMessageMap.get(rawMessageMap.keySet().iterator().next());    JSONObject broJson=broParser.parse(rawMessage.getBytes()).get(0);    String expectedTimestamp="1467657279000";    Assert.assertEquals(broJson.get("timestamp").toString(),expectedTimestamp);    String expectedBroTimestamp="1467657279.0";    Assert.assertEquals(broJson.get("bro_timestamp").toString(),expectedBroTimestamp);  }{    String rawMessage="{\"http\": {\"ts\":1467657279.0,\"uid\":\"CMYLzP3PKiwZAgBa51\",\"id.orig_h\":\"192.168.138.158\",\"id.orig_p\":49206,\"id.resp_h\":\"95.163.121.204\"," + "\"id.resp_p\":80,\"trans_depth\":2,\"method\":\"GET\",\"host\":\"7oqnsnzwwnm6zb7y.gigapaysun.com\",\"uri\":\"/img/flags/it.png\",\"referrer\":\"http://7oqnsnzwwnm6zb7y.gigapaysun.com/11iQmfg\",\"user_agent\":\"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0)\",\"request_body_len\":0,\"response_body_len\":552,\"status_code\":200,\"status_msg\":\"OK\",\"tags\":[],\"resp_fuids\":[\"F3m7vB2RjUe4n01aqj\"],\"resp_mime_types\":[\"image/png\"]}}";    Map rawMessageMap=(Map)jsonParser.parse(rawMessage);    JSONObject rawJson=(JSONObject)rawMessageMap.get(rawMessageMap.keySet().iterator().next());    JSONObject broJson=broParser.parse(rawMessage.getBytes()).get(0);    String expectedTimestamp="1467657279000";    Assert.assertEquals(broJson.get("timestamp").toString(),expectedTimestamp);    String expectedBroTimestamp="1467657279.0";    Assert.assertEquals(broJson.get("bro_timestamp").toString(),expectedBroTimestamp);  }{    String rawMessage="{\"http\": {\"ts\":1467657279.1,\"uid\":\"CMYLzP3PKiwZAgBa51\",\"id.orig_h\":\"192.168.138.158\",\"id.orig_p\":49206,\"id.resp_h\":\"95.163.121.204\"," + "\"id.resp_p\":80,\"trans_depth\":2,\"method\":\"GET\",\"host\":\"7oqnsnzwwnm6zb7y.gigapaysun.com\",\"uri\":\"/img/flags/it.png\",\"referrer\":\"http://7oqnsnzwwnm6zb7y.gigapaysun.com/11iQmfg\",\"user_agent\":\"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0)\",\"request_body_len\":0,\"response_body_len\":552,\"status_code\":200,\"status_msg\":\"OK\",\"tags\":[],\"resp_fuids\":[\"F3m7vB2RjUe4n01aqj\"],\"resp_mime_types\":[\"image/png\"]}}";    Map rawMessageMap=(Map)jsonParser.parse(rawMessage);    JSONObject rawJson=(JSONObject)rawMessageMap.get(rawMessageMap.keySet().iterator().next());    JSONObject broJson=broParser.parse(rawMessage.getBytes()).get(0);    String expectedTimestamp="1467657279100";    Assert.assertEquals(broJson.get("timestamp").toString(),expectedTimestamp);    String expectedBroTimestamp="1467657279.1";    Assert.assertEquals(broJson.get("bro_timestamp").toString(),expectedBroTimestamp);  }{    String rawMessage="{\"http\": {\"ts\":1467657279.11,\"uid\":\"CMYLzP3PKiwZAgBa51\",\"id.orig_h\":\"192.168.138.158\",\"id.orig_p\":49206,\"id.resp_h\":\"95.163.121.204\"," + "\"id.resp_p\":80,\"trans_depth\":2,\"method\":\"GET\",\"host\":\"7oqnsnzwwnm6zb7y.gigapaysun.com\",\"uri\":\"/img/flags/it.png\",\"referrer\":\"http://7oqnsnzwwnm6zb7y.gigapaysun.com/11iQmfg\",\"user_agent\":\"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0)\",\"request_body_len\":0,\"response_body_len\":552,\"status_code\":200,\"status_msg\":\"OK\",\"tags\":[],\"resp_fuids\":[\"F3m7vB2RjUe4n01aqj\"],\"resp_mime_types\":[\"image/png\"]}}";    Map rawMessageMap=(Map)jsonParser.parse(rawMessage);    JSONObject rawJson=(JSONObject)rawMessageMap.get(rawMessageMap.keySet().iterator().next());    JSONObject broJson=broParser.parse(rawMessage.getBytes()).get(0);    String expectedTimestamp="1467657279110";    Assert.assertEquals(broJson.get("timestamp").toString(),expectedTimestamp);    String expectedBroTimestamp="1467657279.11";    Assert.assertEquals(broJson.get("bro_timestamp").toString(),expectedBroTimestamp);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (andOp_1: ");  result.append(andOp_1);  result.append(')');  return result.toString();}  }
class C{  @Override public int splitSegment(Point2D.Double split,double tolerance){  if (get(TRANSFORM) != null) {    try {      split=(Point2D.Double)get(TRANSFORM).inverseTransform(split,new Point2D.Double());    } catch (    NoninvertibleTransformException ex) {      System.err.println("Warning: SVGBezierFigure.findSegment. Figure has noninvertible Transform.");    }  }  int i=getBezierPath().findSegment(split,tolerance);  if (i != -1) {    addNode(i + 1,new BezierPath.Node(split));  }  return i + 1;}  }
class C{  public RepeatedFieldBuilder<MType,BType,IType> addMessage(int index,MType message){  if (message == null) {    throw new NullPointerException();  }  ensureMutableMessageList();  messages.add(index,message);  if (builders != null) {    builders.add(index,null);  }  onChanged();  incrementModCounts();  return this;}  }
class C{  @Override public String toString(){  return m_source.toString() + ":" + m_line;}  }
class C{  private void parseLoggingConfig(final Node node,final ConfigSettings config){  String name;  String value;  Node nnode;  NodeList list=node.getChildNodes();  int length=list.getLength();  for (int i=0; i < length; i++) {    nnode=list.item(i);    name=nnode.getNodeName().toUpperCase();    if (name.equals(KEY_ROOT_FOLDER)) {      value=nnode.getChildNodes().item(0).getNodeValue();      value=value.substring(1,value.length() - 1);      config.setConfigParameter(ConfigurationKeys.LOGGING_PATH_DIFFTOOL,value);    } else     if (name.equals(SUBSUBSECTION_DIFF_TOOL)) {      parseLoggerConfig(nnode,config,null,ConfigurationKeys.LOGGING_LOGLEVEL_DIFFTOOL);    }  }}  }
class C{  public ResourceQueue(final R resource){  if (resource == null)   throw new IllegalArgumentException();  this.resource=resource;}  }
class C{  public DANN(int kn,int k,double eps,VectorCollectionFactory<VecPaired<Vec,Integer>> vcf){  this(kn,k,eps,DEFAULT_ITERATIONS,vcf);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Long(((Agent)stack.pop()).getStartPadding());}  }
class C{  public Matrix correlation(){  final Matrix corr=covariance();  final Array v=corr.diagonal();  for (int i=0; i < dimension_; i++) {    for (int j=0; j < dimension_; j++) {      if (i == j) {        if (v.$[v._(i)] == 0.0) {          corr.$[corr._(i,j)]=1.0;        } else {          corr.$[corr._(i,j)]*=1.0 / Math.sqrt(v.$[v._(i)] * v.$[v._(j)]);        }      } else {        if (v.$[v._(i)] == 0.0 && v.$[v._(j)] == 0) {          corr.$[corr._(i,j)]=1.0;        } else         if (v.$[v._(i)] == 0.0 || v.$[v._(j)] == 0.0) {          corr.$[corr._(i,j)]=0.0;        } else {          corr.$[corr._(i,j)]*=1.0 / Math.sqrt(v.$[v._(i)] * v.$[v._(j)]);        }      }    }  }  return corr;}  }
class C{  public STGroupFile(URL url,String encoding,char delimiterStartChar,char delimiterStopChar){  super(delimiterStartChar,delimiterStopChar);  this.url=url;  this.encoding=encoding;  this.fileName=null;}  }
class C{  public ConnectionEvent(Object source,int type,DbUtils utils){  this(source,type,utils,null);}  }
class C{  private void printIDInfo(String message,Object o){  if (o == null) {    return;  }  Class c=o.getClass();  ClassLoader l=c.getClassLoader();  int hash=-1;  if (l != null) {    hash=l.hashCode();  }  logln(message + System.identityHashCode(o) + "  Class: "+ c+ "  ClassLoader: "+ l+ "  loaderHash: "+ hash+ "  loaderPrimHash: "+ System.identityHashCode(l));}  }
class C{  public static void main(String[] args){  TestRunner.run(suite());}  }
class C{  public static byte[] decode(String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  public TemporalOMScalingIcon(Object id,int renderType,boolean interpolate,int w,int h,byte[] bytes,Color[] colorTable,int trans,float baseScale){  this(id,renderType,interpolate);  setColorModel(OMRasterObject.COLORMODEL_INDEXED);  setBaseScale(baseScale);  setWidth(w);  setHeight(h);  setBits(bytes);  setColors(colorTable);  setTransparent(trans);}  }
class C{  public CHAR_ARRAY(String mimeType){  super(mimeType,"[C");}  }
class C{  public void threadStarted(ThreadStartEvent event){  println("Got ThreadStartEvent: " + event);  if (stepRequest != null) {    erm.deleteEventRequest(stepRequest);    stepRequest=null;    println("Deleted stepRequest");  }  if (mainIsDead) {    stepRequest=erm.createStepRequest(mainThread,StepRequest.STEP_LINE,StepRequest.STEP_OVER);    stepRequest.addCountFilter(1);    stepRequest.setSuspendPolicy(EventRequest.SUSPEND_ALL);    try {      stepRequest.enable();    } catch (    IllegalThreadStateException ee) {      println("Ok; got expected IllegalThreadStateException");      return;    }catch (    Exception ee) {      failure("FAILED: Did not get expected" + " IllegalThreadStateException" + " on a StepRequest.enable().  \n"+ "        Got this exception instead: "+ ee);      return;    }    failure("FAILED: Did not get expected IllegalThreadStateException" + " on a StepRequest.enable()");  }}  }
class C{  public boolean arrayContainsBlock(IBlockState[] list,IBlockState block){  for (  IBlockState block1 : list)   if (block == block1)   return true;  return false;}  }
class C{  boolean readModule(int row,int column,int numRows,int numColumns){  if (row < 0) {    row+=numRows;    column+=4 - ((numRows + 4) & 0x07);  }  if (column < 0) {    column+=numColumns;    row+=4 - ((numColumns + 4) & 0x07);  }  readMappingMatrix.set(column,row);  return mappingBitMatrix.get(column,row);}  }
class C{  public NBTreeSplit(int attIndex,int minNoObj,double sumOfWeights){  m_attIndex=attIndex;  m_sumOfWeights=sumOfWeights;}  }
class C{  @Override public boolean removeVertex(V vertex){  return removeVertex(vertex,true);}  }
class C{  public void removeYTextLabel(double y){  removeYTextLabel(y,0);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected final void writeOut(byte[] data) throws IOException {  writeOut(data,0,data.length);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:26.200 -0400",hash_original_method="65AB02636E5EC817DCEA869C92925535",hash_generated_method="893F683D5D542552F1787323782AF5A0") public synchronized boolean fetchRemoteUuids(String address,ParcelUuid uuid,IBluetoothCallback callback){  mContext.enforceCallingOrSelfPermission(BLUETOOTH_PERM,"Need BLUETOOTH permission");  if (!isEnabledInternal())   return false;  if (!BluetoothAdapter.checkBluetoothAddress(address)) {    return false;  }  RemoteService service=new RemoteService(address,uuid);  if (uuid != null && mUuidCallbackTracker.get(service) != null) {    return false;  }  if (mUuidIntentTracker.contains(address)) {    if (uuid != null) {      mUuidCallbackTracker.put(new RemoteService(address,uuid),callback);    }    return true;  }  boolean ret=createDeviceNative(address);  mUuidIntentTracker.add(address);  if (uuid != null) {    mUuidCallbackTracker.put(new RemoteService(address,uuid),callback);  }  Message message=mHandler.obtainMessage(MESSAGE_UUID_INTENT);  message.obj=address;  mHandler.sendMessageDelayed(message,UUID_INTENT_DELAY);  return ret;}  }
class C{  private String normalizeNumber(String phoneNumber){  if (TextUtils.isEmpty(phoneNumber)) {    return "";  }  final StringBuilder sb=new StringBuilder();  final int len=phoneNumber.length();  for (int i=0; i < len; i++) {    final char c=phoneNumber.charAt(i);    final int digit=Character.digit(c,10);    if (digit != -1) {      sb.append(digit);    } else     if (i == 0 && c == '+') {      sb.append(c);    } else     if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {      return normalizeNumber(PhoneNumberUtils.convertKeypadLettersToDigits(phoneNumber));    }  }  return sb.toString();}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  protected void createEmbeddedFields(MetaClass metaClass,Entity item,String fqnPrefix){  for (  MetaProperty metaProperty : metaClass.getProperties()) {    String fqn=metaProperty.getName();    if (StringUtils.isNotEmpty(fqnPrefix)) {      fqn=fqnPrefix + "." + fqn;    }    if (managedEmbeddedProperties.contains(fqn) && metadataTools.isEmbedded(metaProperty)) {      MetaClass embeddedMetaClass=metaProperty.getRange().asClass();      Entity embedded=item.getValue(metaProperty.getName());      if (embedded == null) {        embedded=metadata.create(embeddedMetaClass);        item.setValue(metaProperty.getName(),embedded);      }      createEmbeddedFields(embeddedMetaClass,embedded,fqn);    }  }}  }
class C{  public static String gotoTableToString(OFInstructionGotoTable inst,Logger log){  return Short.toString(inst.getTableId().getValue());}  }
class C{  private static boolean isSpecialDomain(final String domain){  final String ucDomain=domain.toUpperCase();  if (ucDomain.endsWith(".COM") || ucDomain.endsWith(".EDU") || ucDomain.endsWith(".NET")|| ucDomain.endsWith(".GOV")|| ucDomain.endsWith(".MIL")|| ucDomain.endsWith(".ORG")|| ucDomain.endsWith(".INT")) {    return true;  }  return false;}  }
class C{  public char[] mergeToCharArray(@NotNull char[] text,int textLength,@NotNull List<? extends TextChange> changes){  int newLength=textLength;  for (  TextChange change : changes) {    newLength+=change.getText().length() - (change.getEnd() - change.getStart());  }  char[] data=new char[newLength];  int oldEndOffset=textLength;  int newEndOffset=data.length;  for (int i=changes.size() - 1; i >= 0; i--) {    TextChange change=changes.get(i);    int symbolsToMoveNumber=oldEndOffset - change.getEnd();    System.arraycopy(text,change.getEnd(),data,newEndOffset - symbolsToMoveNumber,symbolsToMoveNumber);    newEndOffset-=symbolsToMoveNumber;    char[] changeSymbols=change.getChars();    newEndOffset-=changeSymbols.length;    System.arraycopy(changeSymbols,0,data,newEndOffset,changeSymbols.length);    oldEndOffset=change.getStart();  }  if (oldEndOffset > 0) {    System.arraycopy(text,0,data,0,oldEndOffset);  }  return data;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  double centreValue;  float progress=0;  int a, j, n;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  ArrayList<Double> data=new ArrayList<Double>();  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("blue_white_red.pal");    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=inputFile.getValue(row,col);        if (centreValue != noData) {          data.clear();          n=0;          z=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              data.add(z);              n++;            }          }          Collections.sort(data);          j=-1;          for (a=0; a < numPixelsInFilter; a++) {            if (data.get(a) == centreValue) {              j=a;              break;            }          }          if (j >= 0) {            outputFile.setValue(row,col,(double)j / n * 100);          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Iterator items(String group,String expr){  Expression e=ExpressionParser.parse(expr);  if (!(e instanceof Predicate) || ExpressionParser.getError() != null) {    return Collections.EMPTY_LIST.iterator();  }  return items(group,(Predicate)e);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildSixthFloor(zone);}  }
class C{  public final void cleanup(Instances justHeaderInfo){  m_train=justHeaderInfo;  m_test=null;  if (!m_isLeaf) {    for (    ClassifierDecList m_son : m_sons) {      if (m_son != null) {        m_son.cleanup(justHeaderInfo);      }    }  }}  }
class C{  public String shortSummary(){  return "StopWatch '" + this.id + "': running time  = "+ totalTime();}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case TRIGGER_ID:    return isSetTriggerId();case TRIGGER_NAME:  return isSetTriggerName();case CREATE_TIME:return isSetCreateTime();case OPERATOR_ID:return isSetOperatorId();case TRIGGER_TYPE:return isSetTriggerType();case BEGIN_TIME:return isSetBeginTime();case END_TIME:return isSetEndTime();case TIMES:return isSetTimes();case EXECUTE_INTERVAL:return isSetExecuteInterval();case INTERVAL_UNIT:return isSetIntervalUnit();default :;}throw new IllegalStateException();}  }
class C{  public String toString(){  return "[RestrictedMove @ (" + col + ","+ row+ ")]";}  }
class C{  public ObjectLiteral(Object value){  m_value=value;}  }
class C{  void elementDequeued(){  if (count == 0)   queueIsEmpty(); else   if (takeIndex == 0)   takeIndexWrapped();}  }
class C{  public ActionPopupButton(final ActionGroup action,ActionManager actionManager,KeyBindingAgent keyBindingAgent,final PresentationFactory presentationFactory,String place,ToolbarResources toolbarResources){  this.action=action;  this.actionManager=actionManager;  this.keyBindingAgent=keyBindingAgent;  this.presentationFactory=presentationFactory;  this.place=place;  this.toolbarResources=toolbarResources;  panel=new ButtonPanel();  tooltip=DOM.createDiv();  tooltipBody=DOM.createDiv();  tooltipArrow=DOM.createDiv();  initWidget(panel);  panel.setStyleName(toolbarResources.toolbar().popupButtonPanel());  SVGResource icon=presentationFactory.getPresentation(action).getSVGIcon();  if (icon != null) {    SVGImage image=new SVGImage(icon);    image.getElement().setAttribute("class",toolbarResources.toolbar().popupButtonIcon());    panel.add(image);  } else   if (presentationFactory.getPresentation(action).getIcon() != null) {    Image image=new Image(presentationFactory.getPresentation(action).getIcon());    image.setStyleName(toolbarResources.toolbar().popupButtonIcon());    panel.add(image);  }  renderIcon();  InlineLabel caret=new InlineLabel("");  caret.setStyleName(toolbarResources.toolbar().caret());  panel.add(caret);  final String description=presentationFactory.getPresentation(action).getDescription();  if (description != null) {    tooltipArrow.addClassName(toolbarResources.toolbar().tooltipArrow());    tooltipBody.setInnerText(description);    tooltipBody.addClassName(toolbarResources.toolbar().tooltipBody());    tooltip.addClassName(toolbarResources.toolbar().tooltip());    tooltip.appendChild(tooltipArrow);    tooltip.appendChild(tooltipBody);    panel.getElement().appendChild(tooltip);  }  this.ensureDebugId(place + "/" + action.getTemplatePresentation().getText());}  }
class C{  public TriggerOption withLateFiringsAtEvery(long count){  CountTrigger trigger=new CountTrigger(Type.LATE,count);  triggerList.add(trigger);  return this;}  }
class C{  public DataBoundAdapter(@LayoutRes int layoutId){  mLayoutId=layoutId;}  }
class C{  public DoubleBuffer2D(DoubleBuffer2DConsumer target,int capacity){  this.target=target;  this.capacity=capacity;  this.xElements=new double[capacity];  this.yElements=new double[capacity];  this.xList=new DoubleArrayList(xElements);  this.yList=new DoubleArrayList(yElements);  this.size=0;}  }
class C{  protected void rejectDrag(){  DropTargetContextPeer peer=getDropTargetContextPeer();  if (peer != null) {    peer.rejectDrag();  }}  }
class C{  public BatteryInfo(Parcel in){  usagePercent=in.readInt();  durationMicros=in.readLong();  usageDetails=in.readString();  checkinDetails=in.readString();}  }
class C{  boolean isSealed(){  return mSealed;}  }
class C{  public JSONStringer value(Object o) throws JSONException {  if (JSONObject.NULL.equals(o)) {    return this.append("null");  }  if (o instanceof Number) {    JSONObject.testValidity(o);    return this.append(JSONObject.numberToString((Number)o));  }  if (o instanceof Boolean || o instanceof JSONArray || o instanceof JSONObject) {    return this.append(o.toString());  }  return this.append(JSONObject.quote(o.toString()));}  }
class C{  public int executeUpdate(final String sql,final int autoGeneratedKeys) throws SQLException {  if (executeInternal(sql,fetchSize)) {    return 0;  }  return getUpdateCount();}  }
class C{  public void tableChanged(TableModelEvent e){  int rowsSelected=0;  int rows=miniTable.getRowCount();  for (int i=0; i < rows; i++) {    IDColumn id=(IDColumn)miniTable.getValueAt(i,0);    if (id != null && id.isSelected())     rowsSelected++;  }  statusBar.setStatusDB(" " + rowsSelected + " ");}  }
class C{  public static void appendEscapedTextToBuilder(StringBuilder out,String item,char separator){  for (int i=0; i < item.length(); i++) {    char ch=item.charAt(i);    if (ch == '\\' || ch == separator) {      out.append('\\');    }    out.append(ch);  }}  }
class C{  public ArraySet(E[] elements){  this();  for (  E element : elements)   add(element);}  }
class C{  public CompiledST lookupTemplate(String name){  if (name.charAt(0) != '/')   name="/" + name;  if (verbose)   System.out.println(getName() + ".lookupTemplate(" + name+ ")");  CompiledST code=rawGetTemplate(name);  if (code == NOT_FOUND_ST) {    if (verbose)     System.out.println(name + " previously seen as not found");    return null;  }  if (code == null)   code=load(name);  if (code == null)   code=lookupImportedTemplate(name);  if (code == null) {    if (verbose)     System.out.println(name + " recorded not found");    templates.put(name,NOT_FOUND_ST);  }  if (verbose)   if (code != null)   System.out.println(getName() + ".lookupTemplate(" + name+ ") found");  return code;}  }
class C{  @Override public void discover(AccessProfile accessProfile) throws VNXeException {  URI storageSystemURI=accessProfile.getSystemId();  StorageSystem viprStorageSystem=null;  String detailedStatusMessage="Unknown Status";  try {    _logger.info("Access Profile Details :  IpAddress : {}, PortNumber : {}",accessProfile.getIpAddress(),accessProfile.getPortNumber());    if (null != accessProfile.getnamespace() && (accessProfile.getnamespace().equals(StorageSystem.Discovery_Namespaces.UNMANAGED_VOLUMES.toString()) || accessProfile.getnamespace().equals(StorageSystem.Discovery_Namespaces.UNMANAGED_FILESYSTEMS.toString()))) {      discoverUnmanagedObjects(accessProfile);    } else {      viprStorageSystem=_dbClient.queryObject(StorageSystem.class,storageSystemURI);      _logger.info(String.format("Discover VnxUnity storage system %s at IP:%s, PORT:%s",storageSystemURI.toString(),accessProfile.getIpAddress(),accessProfile.getPortNumber()));      VNXeApiClient client=getVnxUnityClient(accessProfile);      _logger.debug("Got handle to Vnx unity service client");      _logger.info("Discovering storage system properties.");      VNXeStorageSystem system=client.getStorageSystem();      boolean isFASTVPEnabled=client.isFASTVPEnabled();      viprStorageSystem=discoverStorageSystemInfo(client,accessProfile,system,isFASTVPEnabled,viprStorageSystem);      StringSet arraySupportedProtocols=new StringSet();      Map<String,URI> nasServerIdMap=new HashMap<String,URI>();      Map<String,List<StorageHADomain>> nasServers=discoverNasServers(viprStorageSystem,client,nasServerIdMap,arraySupportedProtocols);      _logger.info("No of newly discovered NasServers {}",nasServers.get(NEW).size());      _logger.info("No of existing discovered NasServers {}",nasServers.get(EXISTING).size());      if (!nasServers.get(NEW).isEmpty()) {        _dbClient.createObject(nasServers.get(NEW));      }      if (!nasServers.get(EXISTING).isEmpty()) {        _dbClient.updateObject(nasServers.get(EXISTING));      }      _completer.statusPending(_dbClient,"Completed NAS Server discovery");      List<StoragePort> allExistingPorts=new ArrayList<StoragePort>();      List<StoragePort> allNewPorts=new ArrayList<StoragePort>();      Map<String,List<StoragePort>> ports=discoverFileStoragePorts(viprStorageSystem,client,nasServerIdMap);      if (ports.get(NEW) != null && !ports.get(NEW).isEmpty()) {        allNewPorts.addAll(ports.get(NEW));        _dbClient.createObject(ports.get(NEW));      }      if (ports.get(EXISTING) != null && !ports.get(EXISTING).isEmpty()) {        allExistingPorts.addAll(ports.get(EXISTING));        _dbClient.updateObject(ports.get(EXISTING));      }      _completer.statusPending(_dbClient,"Completed file ports discovery");      Map<String,URI> spIdMap=new HashMap<String,URI>();      Map<String,List<StorageHADomain>> sps=discoverStorageProcessors(viprStorageSystem,client,spIdMap);      if (!sps.get(NEW).isEmpty()) {        _dbClient.createObject(sps.get(NEW));      }      if (!sps.get(EXISTING).isEmpty()) {        _dbClient.updateObject(sps.get(EXISTING));      }      _completer.statusPending(_dbClient,"Completed storage processor discovery");      Map<String,List<StoragePort>> iscsiPorts=discoverIscsiPorts(viprStorageSystem,client,spIdMap);      boolean hasIscsiPorts=false;      if (iscsiPorts.get(NEW) != null && !iscsiPorts.get(NEW).isEmpty()) {        allNewPorts.addAll(iscsiPorts.get(NEW));        hasIscsiPorts=true;        _dbClient.createObject(iscsiPorts.get(NEW));      }      if (iscsiPorts.get(EXISTING) != null && !iscsiPorts.get(EXISTING).isEmpty()) {        allExistingPorts.addAll(iscsiPorts.get(EXISTING));        hasIscsiPorts=true;        _dbClient.updateObject(iscsiPorts.get(EXISTING));      }      if (hasIscsiPorts) {        arraySupportedProtocols.add(StorageProtocol.Block.iSCSI.name());      }      _completer.statusPending(_dbClient,"Completed iscsi ports discovery");      Map<String,List<StoragePort>> fcPorts=discoverFcPorts(viprStorageSystem,client,spIdMap);      boolean hasFcPorts=false;      if (fcPorts.get(NEW) != null && !fcPorts.get(NEW).isEmpty()) {        allNewPorts.addAll(fcPorts.get(NEW));        hasFcPorts=true;        _dbClient.createObject(fcPorts.get(NEW));      }      if (fcPorts.get(EXISTING) != null && !fcPorts.get(EXISTING).isEmpty()) {        allExistingPorts.addAll(fcPorts.get(EXISTING));        hasFcPorts=true;        _dbClient.updateObject(fcPorts.get(EXISTING));      }      if (hasFcPorts) {        arraySupportedProtocols.add(StorageProtocol.Block.FC.name());      }      _completer.statusPending(_dbClient,"Completed FC ports discovery");      List<StoragePort> allPorts=new ArrayList<StoragePort>(allNewPorts);      allPorts.addAll(allExistingPorts);      List<StoragePort> notVisiblePorts=DiscoveryUtils.checkStoragePortsNotVisible(allPorts,_dbClient,viprStorageSystem.getId());      if (notVisiblePorts != null && !notVisiblePorts.isEmpty()) {        allExistingPorts.addAll(notVisiblePorts);      }      _logger.info("Discovering storage pools.");      List<StoragePool> poolsToMatchWithVpool=new ArrayList<StoragePool>();      List<StoragePool> allPools=new ArrayList<StoragePool>();      Map<String,List<StoragePool>> pools=discoverStoragePools(viprStorageSystem,client,arraySupportedProtocols,poolsToMatchWithVpool);      _logger.info("No of newly discovered pools {}",pools.get(NEW).size());      _logger.info("No of existing discovered pools {}",pools.get(EXISTING).size());      if (!pools.get(NEW).isEmpty()) {        allPools.addAll(pools.get(NEW));        _dbClient.createObject(pools.get(NEW));        StoragePoolAssociationHelper.setStoragePoolVarrays(viprStorageSystem.getId(),pools.get(NEW),_dbClient);      }      if (!pools.get(EXISTING).isEmpty()) {        allPools.addAll(pools.get(EXISTING));        _dbClient.updateObject(pools.get(EXISTING));      }      List<StoragePool> notVisiblePools=DiscoveryUtils.checkStoragePoolsNotVisible(allPools,_dbClient,viprStorageSystem.getId());      if (notVisiblePools != null && !notVisiblePools.isEmpty()) {        poolsToMatchWithVpool.addAll(notVisiblePools);      }      StoragePortAssociationHelper.runUpdatePortAssociationsProcess(allNewPorts,allExistingPorts,_dbClient,_coordinator,poolsToMatchWithVpool);      _completer.statusPending(_dbClient,"Completed pool discovery");      StoragePortAssociationHelper.runUpdateVirtualNasAssociationsProcess(allExistingPorts,null,_dbClient);      _logger.info("update virtual nas association for unity");      if (isFASTVPEnabled) {        _logger.info("FASTVP is enabled");        HashMap<String,List<AutoTieringPolicy>> policies=discoverAutoTierPolicies(viprStorageSystem,client);        if (!policies.get(NEW).isEmpty()) {          _dbClient.createObject(policies.get(NEW));        }        if (!policies.get(EXISTING).isEmpty()) {          _dbClient.updateObject(policies.get(EXISTING));        }        HashMap<String,List<StorageTier>> tiers=discoverStorageTier(viprStorageSystem,client);        if (!tiers.get(NEW).isEmpty()) {          _dbClient.createObject(tiers.get(NEW));        }        if (!tiers.get(EXISTING).isEmpty()) {          _dbClient.updateObject(tiers.get(EXISTING));        }      }      detailedStatusMessage=String.format("Discovery completed successfully for Storage System: %s",storageSystemURI.toString());    }  } catch (  Exception e) {    detailedStatusMessage=String.format("Discovery failed for VNX Unity %s: %s",storageSystemURI.toString(),e.getLocalizedMessage());    _logger.error(detailedStatusMessage,e);    throw VNXeException.exceptions.discoveryError("Discovery error",e);  } finally {    if (viprStorageSystem != null) {      try {        viprStorageSystem.setLastDiscoveryStatusMessage(detailedStatusMessage);        _dbClient.updateObject(viprStorageSystem);      } catch (      DatabaseException ex) {        _logger.error("Error while persisting object to DB",ex);      }    }  }}  }
class C{  @Override public void close() throws SecurityException {}  }
class C{  public Curve makeCurve(int color,int size){  Curve c=new Curve(color,size);  curves.add(c);  return c;}  }
class C{  @Override public void close() throws IOException {  getDelegate().close();  logStream().close();}  }
class C{  private void cmd_archive(){  boolean success=false;  byte[] data=Document.getPDFAsArray(m_reportEngine.getLayout().getPageable(false));  if (data != null) {    MArchive archive=new MArchive(Env.getCtx(),m_reportEngine.getPrintInfo(),null);    archive.setBinaryData(data);    success=archive.save();  }  if (success)   FDialog.info(m_WindowNo,this,"Archived"); else   FDialog.error(m_WindowNo,this,"ArchiveError");}  }
class C{  private static void shrink(Mat img,Size approxSize,boolean integerScale){  double scale=makeScale(img,approxSize,false,integerScale);  if (MathUtil.equal(scale,1) || scale > 1) {    return;  }  scale(img,scale);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public NceTurnout(NceTrafficController tc,String p,int i){  super(p + "T" + i);  this.tc=tc;  this.prefix=p + "T";  _number=i;  if (_number < NmraPacket.accIdLowLimit || _number > NmraPacket.accIdHighLimit) {    throw new IllegalArgumentException("Turnout value: " + _number + " not in the range "+ NmraPacket.accIdLowLimit+ " to "+ NmraPacket.accIdHighLimit);  }  initialize();}  }
class C{  public String toString(){  return TransactionID.toString(transactionID);}  }
class C{  public void add(int n,Label lbl){  if (tab.size() == 0) {    minValue=n;    maxValue=n;  } else {    if (n < minValue) {      minValue=n;    }    if (n > maxValue) {      maxValue=n;    }  }  tab.put(Integer.valueOf(n),lbl);}  }
class C{  FiringPlan guessBestFiringPlanUnderHeat(Entity shooter,@Nullable EntityState shooterState,Targetable target,@Nullable EntityState targetState,int maxHeat,IGame game){  if (maxHeat < 0) {    maxHeat=0;  }  FiringPlan alphaStrike=guessFullFiringPlan(shooter,shooterState,target,targetState,game);  if (alphaStrike.getHeat() <= maxHeat && !(shooter instanceof Infantry) && !(shooter instanceof BattleArmor)) {    return alphaStrike;  }  FiringPlan heatPlans[]=calcFiringPlansUnderHeat(shooter,alphaStrike);  Arrays.sort(heatPlans);  if (heatPlans.length > 0) {    return heatPlans[0];  } else {    return new FiringPlan(target);  }}  }
class C{  public ActivateSessionResponse activate(String username,String password) throws ServiceResultException {  UserIdentityToken token=EndpointUtil.createUserNameIdentityToken(session.getEndpoint(),session.getServerNonce(),username,password);  return activate(token,null);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case RegularExpressionPackage.SEQUENCE__ELEMENTS:    getElements().clear();  getElements().addAll((Collection<? extends Pattern>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void readCompressed(){  in=new InflaterInputStream(in);}  }
class C{  @SuppressWarnings("unchecked") public RegistryContext(String host,int port,Hashtable<?,?> env) throws NamingException {  environment=(env == null) ? new Hashtable<String,Object>(5) : (Hashtable<String,Object>)env;  if (environment.get(SECURITY_MGR) != null) {    installSecurityMgr();  }  if ((host != null) && (host.charAt(0) == '[')) {    host=host.substring(1,host.length() - 1);  }  RMIClientSocketFactory socketFactory=(RMIClientSocketFactory)environment.get(SOCKET_FACTORY);  registry=getRegistry(host,port,socketFactory);  this.host=host;  this.port=port;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("Get from " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  Properties ctx=JSPEnv.getCtx(request);  HttpSession session=request.getSession(false);  String url="/assets.jsp";  if (session == null || session.getAttribute(WebInfo.NAME) == null || session.getAttribute(WebUser.NAME) == null)   url="/login.jsp"; else {    session.removeAttribute(WebSessionCtx.HDR_MESSAGE);    WebInfo info=(WebInfo)session.getAttribute(WebInfo.NAME);    if (info != null)     info.setMessage("");    String msg=streamAsset(request,response);    if (info != null)     info.setMessage(Msg.parseTranslation(ctx,msg));    if (msg == null || msg.length() == 0 || msg.startsWith("**"))     return;  }  log.info("Forward to " + url);  RequestDispatcher dispatcher=getServletContext().getRequestDispatcher(url);  dispatcher.forward(request,response);}  }
class C{  private List<LocalCandidate> createLocalCandidates(Component component){  List<TcpHostCandidate> hostCandidates=new LinkedList<>();  for (  TransportAddress transportAddress : localAddresses) {    TcpHostCandidate candidate=new TcpHostCandidate(transportAddress,component);    candidate.setTcpType(CandidateTcpType.PASSIVE);    if (ssltcp)     candidate.setSSL(true);    hostCandidates.add(candidate);  }  List<LocalCandidate> mappedCandidates=new LinkedList<>();  for (  Map.Entry<InetAddress,InetAddress> mapping : mappedAddresses.entrySet()) {    InetAddress localAddress=mapping.getValue();    for (    TcpHostCandidate base : hostCandidates) {      TransportAddress baseTransportAddress=base.getTransportAddress();      if (localAddress.equals(baseTransportAddress.getAddress())) {        InetAddress publicAddress=mapping.getKey();        ServerReflexiveCandidate mappedCandidate=new ServerReflexiveCandidate(new TransportAddress(publicAddress,baseTransportAddress.getPort(),Transport.TCP),base,base.getStunServerAddress(),CandidateExtendedType.STATICALLY_MAPPED_CANDIDATE);        if (base.isSSL())         mappedCandidate.setSSL(true);        mappedCandidate.setTcpType(CandidateTcpType.PASSIVE);        mappedCandidates.add(mappedCandidate);      }    }  }  List<LocalCandidate> portMappedCandidates=new LinkedList<>();  for (  TcpHostCandidate base : hostCandidates) {    for (    Integer port : mappedPorts) {      ServerReflexiveCandidate portMappedCandidate=new ServerReflexiveCandidate(new TransportAddress(base.getTransportAddress().getAddress(),port,Transport.TCP),base,base.getStunServerAddress(),CandidateExtendedType.STATICALLY_MAPPED_CANDIDATE);      if (base.isSSL())       portMappedCandidate.setSSL(true);      portMappedCandidate.setTcpType(CandidateTcpType.PASSIVE);      portMappedCandidates.add(portMappedCandidate);    }  }  for (  LocalCandidate mappedCandidate : mappedCandidates) {    TcpHostCandidate base=(TcpHostCandidate)mappedCandidate.getBase();    for (    Integer port : mappedPorts) {      ServerReflexiveCandidate portMappedCandidate=new ServerReflexiveCandidate(new TransportAddress(mappedCandidate.getTransportAddress().getAddress(),port,Transport.TCP),base,base.getStunServerAddress(),CandidateExtendedType.STATICALLY_MAPPED_CANDIDATE);      if (base.isSSL())       portMappedCandidate.setSSL(true);      portMappedCandidate.setTcpType(CandidateTcpType.PASSIVE);      portMappedCandidates.add(portMappedCandidate);    }  }  LinkedList<LocalCandidate> allCandidates=new LinkedList<>();  allCandidates.addAll(hostCandidates);  allCandidates.addAll(mappedCandidates);  allCandidates.addAll(portMappedCandidates);  return allCandidates;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }  previousProgress=progress;}  }
class C{  protected void mutate(Node node,Rules rules){  if (!node.isFixed() && (PRNG.nextDouble() <= probability)) {    List<Node> mutations=rules.listAvailableMutations(node);    if (!mutations.isEmpty()) {      Node mutation=PRNG.nextItem(mutations).copyNode();      Node parent=node.getParent();      for (int i=0; i < parent.getNumberOfArguments(); i++) {        if (parent.getArgument(i) == node) {          parent.setArgument(i,mutation);          break;        }      }      for (int i=0; i < node.getNumberOfArguments(); i++) {        mutation.setArgument(i,node.getArgument(i));      }      node=mutation;    }  }  for (int i=0; i < node.getNumberOfArguments(); i++) {    mutate(node.getArgument(i),rules);  }}  }
class C{  @Override protected void onRestart(){  super.onRestart();  Log.d(TAG,"onRestart() - the activity is about to be restarted()");}  }
class C{  @Override public long id(){  return _connectionId;}  }
class C{  public void append(Token t){  content.append(t.content);  end=t.end;}  }
class C{  private Node newFloatingComment(){  Node c=new Node(Token.EMPTY);  linkCommentToNode(c);  return c;}  }
class C{  private void drawSteering(){  if (selectedCharacter != null && selectedCharacter.steerer != null) {    selectedCharacter.steerer.draw(this);  }}  }
class C{  protected void error(String msg,Object[] args) throws javax.xml.transform.TransformerException {  String fmsg=XSLMessages.createXPATHMessage(msg,args);{    throw new XPathException(fmsg,this);  }}  }
class C{  public Integer saveMessage(InviteMessage message){  return DemoDBManager.getInstance().saveMessage(message);}  }
class C{  private void updateStateViewLater(int itCount,Collection<Individual<Double>> gen){  funcPlotterCtrl.update();  if (gen != null) {    for (    Individual<Double> ind : gen) {      Optional<Paint> fill=Optional.empty();      if (ind.getDescendants() > 0)       fill=Optional.of(Color.rgb(Math.max(255 - ind.getDescendants() * 20,0),0,0)); else       fill=Optional.of(Color.RED.brighter());      double x=ind.getRepresentation().get(0);      funcPlotterCtrl.setMarker(x,fill);    }    simPaneCtrl.setStatus(experiment.getIterationInfo(itCount,gen));  } else {    simPaneCtrl.setStatus("");  }}  }
class C{  @SuppressWarnings("unchecked") private void notifyTextListeners(TextEvent ge){  Vector<EventListener> l;synchronized (this) {    l=(Vector<EventListener>)m_textListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      ((TextListener)l.elementAt(i)).acceptText(ge);    }  }}  }
class C{  public int sizeOfMap(){  return this.collisionMap.size();}  }
class C{  @DELETE @Produces(Servlets.JSON_MEDIA_TYPE) public Response deleteEntities(@QueryParam("guid") List<String> guids,@QueryParam("type") String entityType,@QueryParam("property") String attribute,@QueryParam("value") String value){  AtlasPerfTracer perf=null;  try {    if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {      perf=AtlasPerfTracer.getPerfTracer(PERF_LOG,"EntityResource.deleteEntities()");    }    AtlasClient.EntityResult entityResult;    if (guids != null && !guids.isEmpty()) {      LOG.info("Deleting entities {}",guids);      entityResult=metadataService.deleteEntities(guids);    } else {      LOG.info("Deleting entity type={} with property {}={}",entityType,attribute,value);      entityResult=metadataService.deleteEntityByUniqueAttribute(entityType,attribute,value);    }    LOG.info("Deleted entity result: {}",entityResult);    JSONObject response=getResponse(entityResult);    return Response.ok(response).build();  } catch (  EntityNotFoundException e) {    if (guids != null && !guids.isEmpty()) {      LOG.error("An entity with GUID={} does not exist ",guids,e);    } else {      LOG.error("An entity with qualifiedName {}-{}-{} does not exist",entityType,attribute,value,e);    }    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.NOT_FOUND));  }catch (  AtlasException|IllegalArgumentException e) {    LOG.error("Unable to delete entities {} {} {} {} ",guids,entityType,attribute,value,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.BAD_REQUEST));  }catch (  Throwable e) {    LOG.error("Unable to delete entities {} {} {} {} ",guids,entityType,attribute,value,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.INTERNAL_SERVER_ERROR));  } finally {    AtlasPerfTracer.log(perf);  }}  }
class C{  @Override public <A extends Annotation>ExpressionResult checkSpecificFieldPermissionsDeferred(PersistentResource<?> resource,ChangeSpec changeSpec,Class<A> annotationClass,String field){  if (requestScope.getSecurityMode() == SecurityMode.SECURITY_INACTIVE) {    return ExpressionResult.PASS;  }  ExpressionResult expressionResult=this.checkUserPermissions(resource,annotationClass,field);  if (expressionResult == PASS) {    return expressionResult;  }  Expressions expressions=expressionBuilder.buildSpecificFieldExpressions(resource,annotationClass,field,changeSpec);  Expression commitExpression=expressions.getCommitExpression();  if (commitExpression != null) {    commitCheckQueue.add(new QueuedCheck(commitExpression,annotationClass));  }  return ExpressionResult.DEFERRED;}  }
class C{  Entity ce(){  return clientgui.getClient().getGame().getEntity(cen);}  }
class C{  @Override public void repaint(long tm,int x,int y,int width,int height){}  }
class C{  public Builder traceTaskExecution(boolean trace){  this.traceTaskExecution=trace;  return this;}  }
class C{  public void onCloseMenu(){  selectedMenuBarItem.setNormalState();  selectedMenuBarItem=null;  lockLayer=null;}  }
class C{  public void paintScrollBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public SVGOMPatternElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  @SuppressWarnings("unchecked") public SingleFieldBuilder<MType,BType,IType> clear(){  message=(MType)(message != null ? message.getDefaultInstanceForType() : builder.getDefaultInstanceForType());  if (builder != null) {    builder.dispose();    builder=null;  }  onChanged();  return this;}  }
class C{  public void removeElemento(DefFmtElementoSeccion elemento){  elementos.remove(elemento);}  }
class C{  public static Element asElement(Resource resource){  final TriplePattern triplePattern=asTriplePattern(resource);  if (triplePattern != null) {    return triplePattern;  } else   if (resource.canAs(TriplePath.class)) {    return resource.as(TriplePath.class);  } else   if (resource.canAs(Filter.class)) {    return resource.as(Filter.class);  } else   if (resource.canAs(Bind.class)) {    return resource.as(Bind.class);  } else   if (resource.canAs(Optional.class)) {    return resource.as(Optional.class);  } else   if (resource.canAs(NamedGraph.class)) {    return resource.as(NamedGraph.class);  } else   if (resource.canAs(Minus.class)) {    return resource.as(Minus.class);  } else   if (resource.canAs(Exists.class)) {    return resource.as(Exists.class);  } else   if (resource.canAs(NotExists.class)) {    return resource.as(NotExists.class);  } else   if (resource.canAs(Service.class)) {    return resource.as(Service.class);  } else   if (resource.canAs(SubQuery.class)) {    return resource.as(SubQuery.class);  } else   if (resource.canAs(Union.class)) {    return resource.as(Union.class);  } else   if (resource.canAs(Values.class)) {    return resource.as(Values.class);  } else   if (isElementList(resource)) {    return resource.as(ElementList.class);  } else {    return null;  }}  }
class C{  public void writeLine() throws IOException, IllegalStateException {  LOG.trace("enter HttpConnection.writeLine()");  write(CRLF);}  }
class C{  @Override public String toString(){  if (stackTrace == null) {    return super.toString();  }  return stackTrace;}  }
class C{  public static JCardValue single(Object value){  return new JCardValue(new JsonValue(value));}  }
class C{  public ZookeeperDataReplicator(String destinationZkServer,String rootReplicatePath,ZkDataNode sourceZkData){  this.sourceZkDataNode=sourceZkData;  this.sourceCloneZkPath=rootReplicatePath;  this.zkHandle=ZKConnectionManager.connectToZookeeper(destinationZkServer);}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("AcceptParser.parse");  AcceptList list=new AcceptList();  try {    headerName(TokenTypes.ACCEPT);    Accept accept=new Accept();    accept.setHeaderName(SIPHeaderNames.ACCEPT);    this.lexer.SPorHT();    this.lexer.match(TokenTypes.ID);    Token token=lexer.getNextToken();    accept.setContentType(token.getTokenValue());    this.lexer.match('/');    this.lexer.match(TokenTypes.ID);    token=lexer.getNextToken();    accept.setContentSubType(token.getTokenValue());    this.lexer.SPorHT();    super.parse(accept);    list.add(accept);    while (lexer.lookAhead(0) == ',') {      this.lexer.match(',');      this.lexer.SPorHT();      accept=new Accept();      this.lexer.match(TokenTypes.ID);      token=lexer.getNextToken();      accept.setContentType(token.getTokenValue());      this.lexer.match('/');      this.lexer.match(TokenTypes.ID);      token=lexer.getNextToken();      accept.setContentSubType(token.getTokenValue());      this.lexer.SPorHT();      super.parse(accept);      list.add(accept);    }    return list;  }  finally {    if (debug)     dbg_leave("AcceptParser.parse");  }}  }
class C{  public void writeMessageNoTag(final MessageLite value) throws IOException {  writeRawVarint32(value.getSerializedSize());  value.writeTo(this);}  }
class C{  protected static Boolean tryToLock(String serviceName){  DistributedLockService service=DistributedLockService.getServiceNamed(serviceName);  boolean locked=service.lock("obj",1000,-1);  if (locked) {    service.unlock("obj");  }  return Boolean.valueOf(locked);}  }
class C{  public void point(double x,double y){  double xs=scaleX(x);  double ys=scaleY(y);  double r=penRadius;  if (r <= 1)   pixel(x,y); else   offscreen.fill(new Ellipse2D.Double(xs - r / 2,ys - r / 2,r,r));  draw();}  }
class C{  public static void checkSameHost(Path path,ExecutionSystem es){  Host pathHost=Host.fromUri(path.toUri());  Host esHost=Host.fromUri(es.uri());  checkArgument(pathHost.equals(esHost),"path host (%s) must equal execution system host (%s)",pathHost,esHost);}  }
class C{  public void testParseSetLargestElement() throws Exception {  String largest="12345678901234567890123456789012345678901234567890";  String setDefinition="SET('1','12','123','1234567890','" + largest + "','12345')";  String[] setValues=SetToStringFilter.parseSet(setDefinition);  int parsedLargestPos=SetToStringFilter.largestElement(setValues);  Assert.assertEquals("Largest element's position determined incorrectly",4,parsedLargestPos);  int parsedLargestLen=SetToStringFilter.largestElementLen(setDefinition);  Assert.assertEquals("Largest element's length incorrect (" + setValues[parsedLargestPos] + ")",largest.length(),parsedLargestLen);}  }
class C{  public void assignField(Object data,Object val,boolean parentObject,ObjectCache objectCache) throws SQLException {  if (foreignIdField != null && val != null) {    Object foreignId=extractJavaFieldValue(data);    if (foreignId != null && foreignId.equals(val)) {      return;    }    Object cachedVal;    ObjectCache foreignCache=foreignDao.getObjectCache();    if (foreignCache == null) {      cachedVal=null;    } else {      cachedVal=foreignCache.get(getType(),val);    }    if (cachedVal != null) {      val=cachedVal;    } else     if (!parentObject) {      Object foreignObject;      LevelCounters levelCounters=threadLevelCounters.get();      if (levelCounters.autoRefreshLevel == 0) {        levelCounters.autoRefreshLevelMax=fieldConfig.getMaxForeignAutoRefreshLevel();      }      if (levelCounters.autoRefreshLevel >= levelCounters.autoRefreshLevelMax) {        foreignObject=foreignTableInfo.createObject();        foreignIdField.assignField(foreignObject,val,false,objectCache);      } else {        if (mappedQueryForId == null) {          @SuppressWarnings("unchecked") MappedQueryForId<Object,Object> castMappedQueryForId=(MappedQueryForId<Object,Object>)MappedQueryForId.build(connectionSource.getDatabaseType(),((BaseDaoImpl<?,?>)foreignDao).getTableInfo(),foreignIdField);          mappedQueryForId=castMappedQueryForId;        }        levelCounters.autoRefreshLevel++;        try {          DatabaseConnection databaseConnection=connectionSource.getReadOnlyConnection();          try {            foreignObject=mappedQueryForId.execute(databaseConnection,val,objectCache);          }  finally {            connectionSource.releaseConnection(databaseConnection);          }        }  finally {          levelCounters.autoRefreshLevel--;          if (levelCounters.autoRefreshLevel <= 0) {            threadLevelCounters.remove();          }        }      }      val=foreignObject;    }  }  if (fieldSetMethod == null) {    try {      field.set(data,val);    } catch (    IllegalArgumentException e) {      throw SqlExceptionUtil.create("Could not assign object '" + val + "' to field "+ this,e);    }catch (    IllegalAccessException e) {      throw SqlExceptionUtil.create("Could not assign object '" + val + "' to field "+ this,e);    }  } else {    try {      fieldSetMethod.invoke(data,val);    } catch (    Exception e) {      throw SqlExceptionUtil.create("Could not call " + fieldSetMethod + " on object with '"+ val+ "' for "+ this,e);    }  }}  }
class C{  static <E>ImmutableList<E> asImmutableList(Object[] elements){  return asImmutableList(elements,elements.length);}  }
class C{  public Hamsi224(){  super();}  }
class C{  public Property yearOfCentury(){  return new Property(this,getChronology().yearOfCentury());}  }
class C{  public final Texture superTexture(Texture other,VerticalDirection direction){  Image topImage;  Image bottomImage;  if (direction == VerticalDirection.DOWN) {    topImage=this.getImage();    bottomImage=other.getImage();  } else {    topImage=other.getImage();    bottomImage=this.getImage();  }  int width=(int)Math.max(topImage.getWidth(),bottomImage.getWidth());  int height=(int)(topImage.getHeight() + bottomImage.getHeight());  PixelReader topReader=topImage.getPixelReader();  PixelReader bottomReader=bottomImage.getPixelReader();  WritableImage image=new WritableImage(width,height);  PixelWriter pixelWriter=image.getPixelWriter();  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      Color color;      if (y < topImage.getHeight()) {        if (x < topImage.getWidth()) {          color=topReader.getColor(x,y);        } else {          color=Color.TRANSPARENT;        }      } else {        if (x < bottomImage.getWidth()) {          color=bottomReader.getColor(x,y - (int)topImage.getHeight());        } else {          color=Color.TRANSPARENT;        }      }      pixelWriter.setColor(x,y,color);    }  }  return new Texture(image);}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() == bOK) {    ProcessCtl.process(m_ASyncProcess,m_WindowNo,parameterPanel,m_pi,null);    dispose();  } else   if (e.getSource() == southPanel.getCancelButton())   dispose();}  }
class C{  public Type2Message(int flags,byte[] challenge,String target){  setFlags(flags);  setChallenge(challenge);  setTarget(target);  if (target != null)   setTargetInformation(getDefaultTargetInformation());}  }
class C{  public NumeralNode(String s,TreeNode stn) throws AbortException {  super(NumeralKind,stn);  this.image=s;  String num=s.toLowerCase();  int radix=10;  if (num.charAt(0) == '\\') {    if (num.charAt(1) == 'b') {      radix=2;    } else     if (num.charAt(1) == 'o') {      radix=8;    } else     if (num.charAt(1) == 'h') {      radix=16;    } else {      throw new AbortException();    }    num=num.substring(2);  }  try {    this.value=Integer.parseInt(num,radix);  } catch (  NumberFormatException e) {    this.bigValue=new BigInteger(s,radix);  }}  }
class C{  private void parse(final MimePart part) throws MessagingException, IOException {  extractCustomUserHeaders(part);  if (isMimeType(part,"text/plain") && plainContent == null && !Part.ATTACHMENT.equalsIgnoreCase(part.getDisposition())) {    plainContent=(String)part.getContent();  } else {    if (isMimeType(part,"text/html") && htmlContent == null && !Part.ATTACHMENT.equalsIgnoreCase(part.getDisposition())) {      htmlContent=(String)part.getContent();    } else {      if (isMimeType(part,"multipart/*")) {        final Multipart mp=(Multipart)part.getContent();        final int count=mp.getCount();        for (int i=0; i < count; i++) {          parse((MimeBodyPart)mp.getBodyPart(i));        }      } else {        final DataSource ds=createDataSource(part);        if (part.getDisposition() == null || Part.ATTACHMENT.equalsIgnoreCase(part.getDisposition())) {          this.attachmentList.put(parseResourceName(part.getContentID(),part.getFileName()),ds);        } else         if (Part.INLINE.equalsIgnoreCase(part.getDisposition())) {          this.cidMap.put(part.getContentID(),ds);        } else {          throw new IllegalStateException("invalid attachment type");        }      }    }  }}  }
class C{  public boolean fullScroll(int direction,boolean horizontal){  if (!horizontal) {    boolean down=direction == View.FOCUS_DOWN;    int height=getHeight();    mTempRect.top=0;    mTempRect.bottom=height;    if (down) {      int count=getChildCount();      if (count > 0) {        View view=getChildAt(count - 1);        mTempRect.bottom=view.getBottom();        mTempRect.top=mTempRect.bottom - height;      }    }    return scrollAndFocus(direction,mTempRect.top,mTempRect.bottom,0,0,0);  } else {    boolean right=direction == View.FOCUS_DOWN;    int width=getWidth();    mTempRect.left=0;    mTempRect.right=width;    if (right) {      int count=getChildCount();      if (count > 0) {        View view=getChildAt(count - 1);        mTempRect.right=view.getBottom();        mTempRect.left=mTempRect.right - width;      }    }    return scrollAndFocus(0,0,0,direction,mTempRect.top,mTempRect.bottom);  }}  }
class C{  @SuppressWarnings("squid:S1201") public static boolean equals(URI first,URI second){  if ((first != null) && (second != null)) {    return first.equals(second);  }  return false;}  }
class C{  public Family(GenomeRelationships pedigree,String father,String mother,String... children){  mPedigree=pedigree;  mFather=father;  mMother=mother;  if (father.equals(mother)) {    throw new IllegalArgumentException("Mother and father cannot be the same sample: '" + father + "'");  }  mSampleIds=new int[children.length + 2];  for (int i=0; i < mSampleIds.length; i++) {    mSampleIds[i]=i;  }  for (  final String c : children) {    final Relationship[] rel=pedigree.relationships(c,new RelationshipTypeFilter(RelationshipType.PARENT_CHILD),new SecondInRelationshipFilter(c));    if (rel.length != 2) {      throw new IllegalArgumentException("Child sample: '" + c + "' has "+ rel.length+ " parents");    }    if (rel[0].first().equals(rel[1].first())) {      throw new IllegalArgumentException("Child sample: '" + c + "' had the same parent '"+ rel[0].first()+ "' specified twice");    }    if (c.equals(mother) || c.equals(father)) {      throw new IllegalArgumentException("The sample: '" + c + "' cannot be both a parent and a child in the family");    }    for (    String parent : new String[]{rel[0].first(),rel[1].first()}) {      if (!(parent.equals(mother) || parent.equals(father))) {        throw new IllegalArgumentException("The sample: '" + c + "' had non-family parent '"+ parent+ "'");      }    }    mChildren.add(c);  }  mMembers=new String[mChildren.size() + FIRST_CHILD_INDEX];  mIsDiseased=new boolean[mChildren.size() + FIRST_CHILD_INDEX];  mMembers[FATHER_INDEX]=mFather;  mIsDiseased[FATHER_INDEX]=isDiseased(mFather);  mMembers[MOTHER_INDEX]=mMother;  mIsDiseased[MOTHER_INDEX]=isDiseased(mMother);  int i=FIRST_CHILD_INDEX;  for (  final String child : mChildren) {    mMembers[i]=child;    mIsDiseased[i]=isDiseased(child);    i++;  }}  }
class C{  public LocalPathCellEditor normalizePath(boolean value){  myNormalizePath=value;  return this;}  }
class C{  public int hashCode(){  int retval=0;  for (int i=1; i < this.key.length; i++) {    retval+=this.key[i] * i;  }  return (retval^="desede".hashCode());}  }
class C{  protected void delete(String dir){  println("Deleting " + dir);  delete(new File(dir));}  }
class C{  public Fraction subtract(final Fraction fraction){  return addSub(fraction,false);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tSpecify the seed of randomization\n" + "\tused to randomize the class\n" + "\torder (default: 1)","R",1,"-R <seed>"));  newVector.addElement(new Option("\tSpecify the class order to be\n" + "\tsorted, could be 0: ascending\n" + "\t1: descending and 2: random.(default: 0)","C",1,"-C <order>"));  return newVector.elements();}  }
class C{  public Object[] keys(){  Object[] keys=new Object[size()];  K[] k=(K[])_set;  for (int i=k.length, j=0; i-- > 0; ) {    if (k[i] != null && k[i] != REMOVED) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  public void dividirUDocExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  OrganizacionUDocsForm formulario=(OrganizacionUDocsForm)form;  List listaUDocs=getListaUDocs(request);  ActionErrors errors=comprobacionesBasicas(formulario,listaUDocs,DIVIDIR,request);  if (errors != null && !errors.isEmpty()) {    obtenerErrores(request,true).add(errors);    formulario.setUdocsSeleccionadas(null);  } else {    int posicion=formulario.getNuevasPosUdocsSeleccionadas()[0];    UDocEnUiDepositoVO udoc=(UDocEnUiDepositoVO)listaUDocs.get(posicion);    UDocEnUiDepositoVO udocNueva=new UDocEnUiDepositoVO();    PropertyUtils.copyProperties(udocNueva,udoc);    udocNueva.setSignaturaudoc(null);    udocNueva.setPosudocenui(-1);    listaUDocs.add(posicion + 1,udocNueva);    setInTemporalSession(request,DepositoConstants.HAY_CAMBIOS_SIN_GUARDAR,Boolean.TRUE);  }  setReturnActionFordward(request,mappings.findForward("organizacion_udocs"));}  }
class C{  public static ValueDate fromDateValue(long dateValue){  return (ValueDate)Value.cache(new ValueDate(dateValue));}  }
class C{  String rrToString(){  StringBuffer sb=new StringBuffer();  sb.append(certificateUsage);  sb.append(" ");  sb.append(selector);  sb.append(" ");  sb.append(matchingType);  sb.append(" ");  sb.append(base16.toString(certificateAssociationData));  return sb.toString();}  }
class C{  public SOMNetwork(Network net,int numSOMNeurons,int numInputNeurons,Point2D initialPosition){  super(net);  this.setLabel("SOM Network");  som=new SOMGroup(net,numSOMNeurons);  inputLayer=new NeuronGroup(net,initialPosition,numInputNeurons);  inputLayer.setLayoutBasedOnSize();  if (net == null) {    return;  }  this.addNeuronGroup(som);  this.addNeuronGroup(inputLayer);  for (  Neuron neuron : inputLayer.getNeuronList()) {    neuron.setLowerBound(0);  }  inputLayer.setLabel("Input layer");  inputLayer.setClamped(true);  this.connectNeuronGroups(inputLayer,som);  layoutNetwork();}  }
class C{  @SuppressWarnings("unchecked") public final void testValidateWhenNoValidatorsSucceed(){  Validator<Object> validator1=new AbstractValidatorImplementation("foo",false);  Validator<Object> validator2=new AbstractValidatorImplementation("bar",false);  Validator<Object>[] validators=new Validator[2];  validators[0]=validator1;  validators[1]=validator2;  DisjunctiveValidator<Object> disjunctiveValidator=new DisjunctiveValidator<>("foo",validators);  assertFalse(disjunctiveValidator.validate(new Object()));}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public SampleCreature replicate(){  energy=energy * repEnergyRetained;  double babyEnergy=energy * repEnergyGiven;  return new SampleCreature(babyEnergy);}  }
class C{  public String debugDecodeSortKeyBytes(byte[] bytes,int index,int length){  return internalDecodeSortKeyBytes(bytes,index,length);}  }
class C{  final boolean casRight(Index<K,V> cmp,Index<K,V> val){  return UNSAFE.compareAndSwapObject(this,rightOffset,cmp,val);}  }
class C{  public boolean isOutline(){  return this.showOutline;}  }
class C{  public UserBuilder phone(String phone){  this.phone=phone;  return this;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.NUMERIC_LITERAL__VALUE:    return getValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean hasComposer(){  return hasExtension(Composer.class);}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer(getClass().getName());  buf.append("@");  buf.append(Integer.toHexString(hashCode()));  buf.append("[");  extendToString(buf);  buf.append("]");  return buf.toString();}  }
class C{  public ConnectionManagerService(ProtocolInfos sourceProtocolInfo,ProtocolInfos sinkProtocolInfo){  this(sourceProtocolInfo,sinkProtocolInfo,new ConnectionInfo());}  }
class C{  public static String cutBetween(String string,String left,String right){  int leftNdx=string.indexOf(left);  if (leftNdx == -1) {    return null;  }  int rightNdx=string.indexOf(right);  if (rightNdx == -1) {    return null;  }  leftNdx+=left.length();  if (leftNdx >= rightNdx) {    return StringPool.EMPTY;  }  return string.substring(leftNdx,rightNdx);}  }
class C{  public SQLDataException(){}  }
class C{  public AddressbookEntry add(String name,String categories){  return add(name,getCategoriesFromString(categories));}  }
class C{  public static void integrateNetwork(final Network networkA,final Network networkB){  final NetworkFactory factory=networkA.getFactory();  for (  Node node : networkB.getNodes().values()) {    Id<Node> nodeId=Id.create(node.getId().toString(),Node.class);    if (!networkA.getNodes().containsKey(nodeId)) {      Node newNode=factory.createNode(nodeId,node.getCoord());      networkA.addNode(newNode);    }  }  double capacityFactor=networkA.getCapacityPeriod() / networkB.getCapacityPeriod();  for (  Link link : networkB.getLinks().values()) {    Id<Link> linkId=Id.create(link.getId().toString(),Link.class);    if (!networkA.getLinks().containsKey(linkId)) {      Id<Node> fromNodeId=Id.create(link.getFromNode().getId().toString(),Node.class);      Id<Node> toNodeId=Id.create(link.getToNode().getId().toString(),Node.class);      Link newLink=factory.createLink(linkId,networkA.getNodes().get(fromNodeId),networkA.getNodes().get(toNodeId));      newLink.setAllowedModes(link.getAllowedModes());      newLink.setCapacity(link.getCapacity() * capacityFactor);      newLink.setFreespeed(link.getFreespeed());      newLink.setLength(link.getLength());      newLink.setNumberOfLanes(link.getNumberOfLanes());      networkA.addLink(newLink);    }  }}  }
class C{  protected void loadOrder(int C_Order_ID,boolean forInvoice,int M_Locator_ID){  loadTableOIS(getOrderData(C_Order_ID,forInvoice,M_Locator_ID));}  }
class C{  public void logEvent(AnalyticsEvent event) throws IllegalStateException {  if (event.isTimed()) {    if (this.timedEvents == null) {      timedEvents=new HashMap<>();    }    timedEvents.put(event.name(),event);  }  if (providers.size() > 0) {    for (    AnalyticsKitProvider provider : providers) {      if (provider.getPriorityFilter() == null) {        throw new IllegalStateException("Your provider doesn't have a valid PriorityFilter set. Please update your provider implementation.");      }      if (provider.getPriorityFilter().shouldLog(event.getPriority())) {        provider.sendEvent(event);      }    }  }}  }
class C{  public UniformGenerator(int ratio){  this.length=1.0 / ratio;}  }
class C{  public void writeGraphics(Vector list,SColor lineColor,SColor fillColor) throws IOException {  int nPolys=polygons.length;  if (nPolys <= 0)   return;  SPoly sp=null;  double[] pts;  LLPoint[] ll;  for (int i=0; i < nPolys; i++) {    pts=((ESRIPoly.ESRIFloatPoly)polygons[i]).getDecimalDegrees();    ll=new LLPoint[pts.length / 2];    for (int j=0; j < ll.length; j++) {      ll[j]=new LLPoint((float)pts[j * 2],(float)pts[(j * 2) + 1]);    }    sp=new SPoly(ll,LineType.LT_GreatCircle);    sp.color(lineColor);    if (fillColor != null) {      sp.fillColor(fillColor);    }    list.addElement(sp);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public double thresholdPercentageFromWatermark(String watermark){  try {    return RatioValue.parseRatioValue(watermark).getAsPercent();  } catch (  ElasticsearchParseException ex) {    return 100.0;  }}  }
class C{  public MySqlConnectionFactory(MySqlConfig sqlConfig){  HikariConfig config=new HikariConfig();  config.setJdbcUrl(getJdbcUrl(sqlConfig));  config.setUsername(sqlConfig.getUser());  config.setPassword(sqlConfig.getPassword());  this.dataSource=new HikariDataSource(config);}  }
class C{  private LinuxVersion findVersion(List<LinuxVersion> versions){  for (  LinuxVersion version : versions) {    if (getVersionValidator().isValidLinuxVersion(version)) {      return version;    }  }  return !versions.isEmpty() ? versions.get(0) : new LinuxVersion(LinuxDistribution.UNKNOWN,"");}  }
class C{  public ServerBehaviourGUI(AbstractPlugin plugin,OptionServerErrorBehaviour option){  this.m_EncryptionPlugin=(XMLEncryptionAttack)plugin;  this.m_Option=option;  initComponents();  initTable();  cbPKCS1GenWithEncData.setEnabled(false);}  }
class C{  public void reportCancellation(long waitTime){  mSumOfWaitTime+=waitTime;  mCancelledRequests++;}  }
class C{  public int read(byte b[],int off,int len) throws IOException {  if (inputStream == null) {    throw new IOException("Stream closed");  }  int gotsofar=0;  while (gotsofar < len) {    int read=inputStream.read(b,off + gotsofar,len - gotsofar);    if (read == -1) {      if (gotsofar > 0) {        count(gotsofar);        return gotsofar;      } else {        return read;      }    } else {      gotsofar+=read;    }  }  count(gotsofar);  return gotsofar;}  }
class C{  public Matrix4x3d m10(double m10){  this.m10=m10;  properties&=~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);  return this;}  }
class C{  public void clear(String className,String methodName){  if (instructionMap.containsKey(className))   instructionMap.get(className).remove(methodName);}  }
class C{  @Override public E peek(){  if (top == null) {    throw new EmptyStackException();  }  return top.item;}  }
class C{  private static boolean sync(FileOutputStream stream){  try {    if (stream != null) {      stream.getFD().sync();    }    return true;  } catch (  IOException e) {  }  return false;}  }
class C{  public static Map<String,String> parseUrl(String url){  url=url.replace("fbconnect","http");  try {    URL u=new URL(url);    Map<String,String> params=decodeUrl(u.getQuery());    params.putAll(decodeUrl(u.getRef()));    return params;  } catch (  MalformedURLException e) {    return new HashMap<>();  }}  }
class C{  protected void RelativePathPattern() throws javax.xml.transform.TransformerException {  boolean trailingSlashConsumed=StepPattern(false);  while (tokenIs('/')) {    nextToken();    trailingSlashConsumed=StepPattern(!trailingSlashConsumed);  }}  }
class C{  public EntityQuery orderBy(String... fields){  this.orderBy=Arrays.asList(fields);  return this;}  }
class C{  public void testGetWarContextWhenJbossWebXmlWithNoRootContext() throws Exception {  JBossWAR war=new JBossWAR(getResourcePath(PACKAGE_PATH + "jboss-nocontext.war"));  assertEquals("jboss-nocontext",war.getContext());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:34.924 -0500",hash_original_method="683DE9908ACD912FB40AB2EA7112FC1F",hash_generated_method="5F837B5EEEF568F0D8B6971471D8B2EC") public ServerResponseInterface newSIPServerResponse(SIPResponse sipResponse,MessageChannel messageChannel){  SIPTransactionStack theStack=(SIPTransactionStack)messageChannel.getSIPStack();  SIPTransaction tr=(SIPTransaction)((SIPTransactionStack)theStack).findTransaction(sipResponse,false);  if (sipStack.isLoggingEnabled())   sipStack.getStackLogger().logDebug("Found Transaction " + tr + " for "+ sipResponse);  if (tr != null) {    if (tr.getState() == null) {      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Dropping response - null transaction state");      return null;    } else     if (TransactionState.COMPLETED == tr.getState() && sipResponse.getStatusCode() / 100 == 1) {      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Dropping response - late arriving " + sipResponse.getStatusCode());      return null;    }  }  DialogFilter retval=new DialogFilter(sipStack);  retval.transactionChannel=tr;  retval.listeningPoint=messageChannel.getMessageProcessor().getListeningPoint();  return retval;}  }
class C{  public Adapter createAdapter(){  AdapterImpl adapter=new AdapterImpl();  return adapter;}  }
class C{  public boolean isText(){  return isText;}  }
class C{  private void updateMenuItemIconColor(Menu menu,int itemId,int color){  MenuItem menuItem=menu.findItem(itemId);  if (menuItem != null) {    Drawable menuItemIcon=menuItem.getIcon();    if (menuItemIcon != null) {      try {        menuItemIcon.mutate();        menuItemIcon.setColorFilter(color,PorterDuff.Mode.SRC_ATOP);        menuItem.setIcon(menuItemIcon);      } catch (      Exception e) {      }    }  }}  }
class C{  public SelectConfigDestinationFolderDialog(@Nullable Project project,ConfigFileType fileType){  super(project);  setTitle(GctBundle.message("appengine.flex.config.destination.chooser.title"));  init();  destinationFolderChooser.addBrowseFolderListener(GctBundle.message("appengine.flex.config.choose.destination.folder.window.title"),null,project,FileChooserDescriptorFactory.createSingleFolderDescriptor());  if (project != null && project.getBasePath() != null) {    if (fileType == ConfigFileType.APP_YAML) {      Path appYamlPath=Paths.get(project.getBasePath() + AppEngineDeploymentRunConfigurationEditor.DEFAULT_APP_YAML_DIR);      destinationFolderChooser.setText(appYamlPath.toString());    } else     if (fileType == ConfigFileType.DOCKERFILE) {      Path dockerfilePath=Paths.get(project.getBasePath() + AppEngineDeploymentRunConfigurationEditor.DEFAULT_DOCKERFILE_DIR);      destinationFolderChooser.setText(dockerfilePath.toString());    } else {      destinationFolderChooser.setText(project.getBasePath());    }  }}  }
class C{  public void writeBytes(final byte[] bytes,final int off,final int len){  if (len > remaining()) {    writeBytesSlow(bytes,off,len);    return;  }  final Block block=current;  System.arraycopy(bytes,off,block.data,block.limit,len);  block.limit+=len;}  }
class C{  public static byte[] usbOpsModeAccy(int accyAddr,int cvAddr,int cvData){  byte[] retVal=new byte[6];  int accyAddr_h=accyAddr / 256;  int accyAddr_l=accyAddr & 0xFF;  int cvAddr_h=cvAddr / 256;  int cvAddr_l=cvAddr & 0xFF;  retVal[0]=(byte)(OPS_PROG_ACCY_CMD);  retVal[1]=(byte)(accyAddr_h);  retVal[2]=(byte)(accyAddr_l);  retVal[3]=(byte)(cvAddr_h);  retVal[4]=(byte)(cvAddr_l);  retVal[5]=(byte)(cvData);  return retVal;}  }
class C{  public void add(T item){  add(item,true);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Long(stack.getUIMgrSafe().getVideoFrame().getBaseMediaTimeMillis(true));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (!Sage.isNonLocalClient())   return Boolean.FALSE;  return (pluggy != null && sage.plugin.CorePluginManager.getInstance().isPluginInstalledSameVersion(pluggy)) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(4);  newVector.addElement(new Option("\tSpecify list of columns to transform. First and last are\n" + "\tvalid indexes (default none). Non-numeric columns are \n" + "\tskipped.","R",1,"-R <index1,index2-index4,...>"));  newVector.addElement(new Option("\tInvert matching sense.","V",0,"-V"));  newVector.addElement(new Option("\tSets the class containing transformation method.\n" + "\t(default java.lang.Math)","C",1,"-C <string>"));  newVector.addElement(new Option("\tSets the method. (default abs)","M",1,"-M <string>"));  return newVector.elements();}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:43.894 -0500",hash_original_method="6EF8346EA0EE517139281306D8FFC8B9",hash_generated_method="20A1D10A60BEC37424055D9940BDC000") public CircularRedirectException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void cacheMethods(Class<?> cls,Class<? extends Annotation> annCls,Collection<Method> mtds){  assert cls != null;  assert annCls != null;  assert mtds != null;  Map<Class<? extends Annotation>,Collection<Method>> annMtds=F.addIfAbsent(mtdCache,cls,F.<Class<? extends Annotation>,Collection<Method>>newCMap());  assert annMtds != null;  annMtds.put(annCls,mtds);}  }
class C{  public static String quoteIdentifier(String s){  int length=s.length();  StringBuilder buff=new StringBuilder(length + 2);  buff.append('\"');  for (int i=0; i < length; i++) {    char c=s.charAt(i);    if (c == '"') {      buff.append(c);    }    buff.append(c);  }  return buff.append('\"').toString();}  }
class C{  @Override public int hashCode(){  return toString().toLowerCase(Locale.US).hashCode();}  }
class C{  @Override public void doubleWrite(ObjectReference src,Address slot,double value,Word metaDataA,Word metaDataB,int mode){  VM.barriers.doubleWrite(src,value,metaDataA,metaDataB,mode);}  }
class C{  public WrapToken(Krb5Context context,byte[] tokenBytes,int tokenOffset,int tokenLen,MessageProp prop) throws GSSException {  super(Krb5Token.WRAP_ID,context,tokenBytes,tokenOffset,tokenLen,prop);  this.readTokenFromInputStream=false;  this.tokenBytes=tokenBytes;  this.tokenOffset=tokenOffset;  this.tokenLen=tokenLen;  this.privacy=prop.getPrivacy();  dataSize=getGSSHeader().getMechTokenLength() - getKrb5TokenSize();}  }
class C{  public static boolean checkGroupElem(BigInteger g){  return !(g.compareTo(BigInteger.valueOf(2)) > 0 && g.compareTo(SM.MODULUS_MINUS_2) < 0);}  }
class C{  public boolean isRelationTableExist(){  return relationTableExist;}  }
class C{  public void addChild(TreeStructure treeStruct){  Util.notNull("treeStruct",treeStruct);  if (children == null) {    children=new ArrayList<TreeStructure>();  }  children.add(treeStruct);}  }
class C{  public boolean isThereALevel(final String signatureId){  SignatureWrapper signatureWrapper=getSignatureByIdNullSafe(signatureId);  return signatureWrapper.isThereALevel();}  }
class C{  @Override protected AccessCheckingPortal createPortal(final ConfigurableFactoryContext ctx){  return new LevelCheckingPortal(getMinimumLevel(ctx),getMaximumLevel(ctx));}  }
class C{  @Override public void fillInProfile(final ResourceManagerProfile profile){  final MemoryEvent tempEvent=this.upcomingEvent.get();  if (tempEvent != null) {    this.mostRecentEvent=tempEvent;    this.upcomingEvent.set(null);  }  final MemoryEvent eventToPopulate=this.mostRecentEvent;  profile.setHeapData(eventToPopulate.getBytesUsed(),eventToPopulate.getState(),eventToPopulate.getThresholds());}  }
class C{  public static @Nullable <T>CloseableReference<T> of(@Nullable T t,ResourceReleaser<T> resourceReleaser){  if (t == null) {    return null;  } else {    return new CloseableReference<T>(t,resourceReleaser);  }}  }
class C{  public boolean hasReadOnly(){  return m_hasReadOnly;}  }
class C{  public HttpVersion(int major,int minor){  super(HTTP,major,minor);}  }
class C{  @Override protected EClass eStaticClass(){  return InformationModelPackage.Literals.INFORMATION_MODEL;}  }
class C{  final public void println(String s){  Writer out=this.out;  if (out == null)   return;  try {    if (s == null)     out.write(_nullChars,0,_nullChars.length); else     out.write(s,0,s.length());    out.write(_newline,0,_newline.length);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public void notify(final Player player,boolean playerAction){  for (  TeleportListener listener : listeners) {    try {      listener.onTeleport(player,playerAction);    } catch (    RuntimeException e) {      logger.error(e + " in " + listener+ " for "+ player,e);    }  }}  }
class C{  public <T>T passthrough(Type<T> type) throws Exception {  T value=read(type);  write(type,value);  return value;}  }
class C{  static public XObject create(Object val){  return XObjectFactory.create(val);}  }
class C{  public static int execCommand(List<String> commands,boolean isRoot){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot);}  }
class C{  @VisibleForTesting void updateGrade(double run,double rise){  runBuffer.setNext(run);  double smoothedRun=runBuffer.getAverage();  if (smoothedRun < 5.0) {    return;  }  gradeBuffer.setNext(rise / smoothedRun);  currentSegment.updateGradeExtremities(gradeBuffer.getAverage());}  }
class C{  protected void onDraw(Canvas canvas){  super.onDraw(canvas);  drawBackground(canvas);  drawFourthFloor(canvas);  drawThirdFloor(canvas);  drawSecondFloor(canvas);  drawFirstFloor(canvas);}  }
class C{  private static void info(XYChart.Data<String,Number> data){  Text texto=new Text(data.getYValue().toString());  texto.setStyle("-fx-fill: #555; -fx-font-size: 11px;");  data.getNode().parentProperty().addListener(null);  data.getNode().boundsInParentProperty().addListener(null);}  }
class C{  public static void initSamRg(CFlags flags,String examplePlatform,String category){  flags.registerOptional(SAM_RG,String.class,STRING_OR_FILE,"file containing a single valid read group SAM header line or a string in the form \"@RG\\tID:READGROUP1\\tSM:BACT_SAMPLE\\tPL:" + examplePlatform + "\"").setCategory(category);}  }
class C{  static StringBuilder appendQuotedString(StringBuilder target,String key){  target.append('"');  for (int i=0, len=key.length(); i < len; i++) {    char ch=key.charAt(i);switch (ch) {case '\n':      target.append("%0A");    break;case '\r':  target.append("%0D");break;case '"':target.append("%22");break;default :target.append(ch);break;}}target.append('"');return target;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  @Override public int compareTo(Object o1){  int result;  if (o1 instanceof Hour) {    Hour h=(Hour)o1;    result=getDay().compareTo(h.getDay());    if (result == 0) {      result=this.hour - h.getHour();    }  } else   if (o1 instanceof RegularTimePeriod) {    result=0;  } else {    result=1;  }  return result;}  }
class C{  public static String convertMethodSignature(MethodGen methodGen){  return convertMethodSignature(methodGen.getClassName(),methodGen.getName(),methodGen.getSignature());}  }
class C{  @Override public void processChildren(SourcePrinter out,GridFactoryContext context) throws CruxGeneratorException {  JSONArray children=ensureChildren(context.getWidgetElement(),true,context.getWidgetId());  int count=getNonNullChildrenCount(children);  if (count > 0) {    String widget=context.getWidget();    out.println(widget + ".resizeRows(" + count+ ");");  }}  }
class C{  protected boolean isCorrectSeason(World world,BlockPos pos,C crop){  Season toMatch=HFApi.calendar.getSeasonAtCoordinates(world,pos);  if (crop.getSeasons() == null)   return false;  for (  Season season : crop.getSeasons()) {    if (toMatch == season)     return true;  }  return false;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @ExceptionHandler(AccessDeniedException.class) @ResponseStatus(value=HttpStatus.FORBIDDEN) public Map<String,Object> handleAuthorizationException(AccessDeniedException ex){  log.warn("User does not have proper rights:",ex);  return LemonUtil.mapOf("exception","AccessDeniedException","message",ex.getMessage());}  }
class C{  public void clearSscrSSD(){  setReg(SSCR,Format.clearBit(getReg(SSCR),Sscr_SSD_pos));}  }
class C{  public static synchronized double makeNoise(double mean,double standardDiviation){  return random.nextGaussian() * Math.sqrt(standardDiviation) + mean;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case ID1:    return is_set_id1();case ID2:  return is_set_id2();}throw new IllegalStateException();}  }
class C{  public static void addHydraProperties(final Properties properties){  Properties dsProperties=DUnitEnv.get().getDistributedSystemProperties();  for (Iterator<Map.Entry<Object,Object>> iter=dsProperties.entrySet().iterator(); iter.hasNext(); ) {    Map.Entry<Object,Object> entry=iter.next();    String key=(String)entry.getKey();    String value=(String)entry.getValue();    if (properties.getProperty(key) == null) {      properties.setProperty(key,value);    }  }}  }
class C{  protected CoverTreeNode new_node(Integer idx){  CoverTreeNode new_node=new CoverTreeNode();  new_node.idx=idx;  return new_node;}  }
class C{  private static <T>Object findAux(Subject subject,String serverPrincipal,String clientPrincipal,Class<T> credClass,boolean oneOnly){  if (subject == null) {    return null;  } else {    List<T> answer=(oneOnly ? null : new ArrayList<T>());    if (credClass == KeyTab.class) {      Iterator<KeyTab> iterator=subject.getPrivateCredentials(KeyTab.class).iterator();      while (iterator.hasNext()) {        KeyTab t=iterator.next();        if (serverPrincipal != null && t.isBound()) {          KerberosPrincipal name=t.getPrincipal();          if (name != null) {            if (!serverPrincipal.equals(name.getName())) {              continue;            }          } else {            boolean found=false;            for (            KerberosPrincipal princ : subject.getPrincipals(KerberosPrincipal.class)) {              if (princ.getName().equals(serverPrincipal)) {                found=true;                break;              }            }            if (!found)             continue;          }        }        if (DEBUG) {          System.out.println("Found " + credClass.getSimpleName() + " "+ t);        }        if (oneOnly) {          return t;        } else {          answer.add(credClass.cast(t));        }      }    } else     if (credClass == KerberosKey.class) {      Iterator<KerberosKey> iterator=subject.getPrivateCredentials(KerberosKey.class).iterator();      while (iterator.hasNext()) {        KerberosKey t=iterator.next();        String name=t.getPrincipal().getName();        if (serverPrincipal == null || serverPrincipal.equals(name)) {          if (DEBUG) {            System.out.println("Found " + credClass.getSimpleName() + " for "+ name);          }          if (oneOnly) {            return t;          } else {            answer.add(credClass.cast(t));          }        }      }    } else     if (credClass == KerberosTicket.class) {      Set<Object> pcs=subject.getPrivateCredentials();synchronized (pcs) {        Iterator<Object> iterator=pcs.iterator();        while (iterator.hasNext()) {          Object obj=iterator.next();          if (obj instanceof KerberosTicket) {            @SuppressWarnings("unchecked") KerberosTicket ticket=(KerberosTicket)obj;            if (DEBUG) {              System.out.println("Found ticket for " + ticket.getClient() + " to go to "+ ticket.getServer()+ " expiring on "+ ticket.getEndTime());            }            if (!ticket.isCurrent()) {              if (!subject.isReadOnly()) {                iterator.remove();                try {                  ticket.destroy();                  if (DEBUG) {                    System.out.println("Removed and destroyed " + "the expired Ticket \n" + ticket);                  }                } catch (                DestroyFailedException dfe) {                  if (DEBUG) {                    System.out.println("Expired ticket not" + " detroyed successfully. " + dfe);                  }                }              }            } else {              if (serverPrincipal == null || ticket.getServer().getName().equals(serverPrincipal)) {                if (clientPrincipal == null || clientPrincipal.equals(ticket.getClient().getName())) {                  if (oneOnly) {                    return ticket;                  } else {                    if (clientPrincipal == null) {                      clientPrincipal=ticket.getClient().getName();                    }                    if (serverPrincipal == null) {                      serverPrincipal=ticket.getServer().getName();                    }                    answer.add(credClass.cast(ticket));                  }                }              }            }          }        }      }    }    return answer;  }}  }
class C{  private pairLinkLink fixLink(Link toFix,Node endPoint){  Node from=toFix.getFromNode();  Node to=toFix.getToNode();  net.removeLink(toFix.getId());  double rel=calculateRelation(new MutableCoord(toFix.getFromNode().getCoord()),new MutableCoord(toFix.getToNode().getCoord()),new MutableCoord(endPoint.getCoord()));  System.out.println(rel);  Id<Link> aux=getRandomLinkId();  Link newLink1=createLinkFromExistent(toFix,rel,aux,from,endPoint);  net.addLink(newLink1);  aux=getRandomLinkId();  Link newLink2=createLinkFromExistent(toFix,1 - rel,aux,endPoint,to);  net.addLink(newLink2);  return new pairLinkLink(newLink1,newLink2);}  }
class C{  public JCalendarPanel(){  this(new Date());}  }
class C{  public CRLNumberExtension(Boolean critical,Object value) throws IOException {  this(PKIXExtensions.CRLNumber_Id,critical,value,NAME,LABEL);}  }
class C{  public int rows(){  return rows;}  }
class C{  public void addTime(long interval){  add(interval);}  }
class C{  public void testFloat() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new FloatPoint("value",30.1f));  doc.add(new StoredField("value",30.1f));  writer.addDocument(doc);  doc=new Document();  doc.add(new FloatPoint("value",-1.3f));  doc.add(new StoredField("value",-1.3f));  writer.addDocument(doc);  doc=new Document();  doc.add(new FloatPoint("value",4.2f));  doc.add(new StoredField("value",4.2f));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.FLOAT_POINT));  writer.close();  IndexSearcher searcher=newSearcher(ir,false);  Sort sort=new Sort(new SortField("value",SortField.Type.FLOAT));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1.3",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4.2",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("30.1",searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:40.309 -0500",hash_original_method="0E0FB59047FF987C205DC97754DD32D6",hash_generated_method="F1412A9895E136A58AC23FEB82DCADFB") void updateTextSize(){  Assert.assertNotNull("updateTextSize should only be called from " + "mWebView, so mWebView should never be null!",mWebView);  float size=mWebView.nativeFocusCandidateTextSize() * mWebView.getScale();  setTextSize(TypedValue.COMPLEX_UNIT_PX,size);}  }
class C{  public SQLInvalidAuthorizationSpecException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  default URI historyRemoved(){  return RDRHistory.Vocab.REMOVED;}  }
class C{  public IntegerRangeValidator(final int min,final int max){  m_min=min;  m_max=max;}  }
class C{  public static CommandContext workingDirectory(UniformPath path){  return builder().workingDirectory(path).build();}  }
class C{  public static synchronized BiolinguaDigraph BiolinguaAlgorithm(SymMatrixF correlMatrix,SymMatrixF signifMatrix,BiolinguaDigraph initGraph,float vBitsAnnotat,float vBitsErrors,float vbitsLinks,float vBitsPredic){  return doBiolinguaAlgorithm(correlMatrix,signifMatrix,initGraph,vbitsLinks,vBitsPredic,vBitsAnnotat,vBitsErrors);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:30.332 -0500",hash_original_method="914BD43FF0612F84BA345FA6F486595C",hash_generated_method="A561E003CE14A65B9914402F4DEBD08B") final public boolean isRemoving(){  return mRemoving;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  private Object executeStellar(String expression){  Object result=null;  try {    result=executor.execute(expression);  } catch (  Throwable t) {    writeLine(ERROR_PROMPT + t.getMessage());    t.printStackTrace();  }  return result;}  }
class C{  public long cminflt(){  return Long.parseLong(fields[10]);}  }
class C{  protected boolean accept(XSLTVisitor visitor){  return visitor.visitVariableOrParamDecl(this);}  }
class C{  public void addError(ServiceError error){  if (ServiceError.DATA_TYPE.equals(error.getType())) {    dataErrors.add(error);  } else {    requestErrors.add(error);  }}  }
class C{  protected Query parseOriginalQuery(ExtendedSolrQueryParser up,String mainUserQuery,List<Clause> clauses,ExtendedDismaxConfiguration config){  Query query=null;  try {    up.setRemoveStopFilter(!config.stopwords);    up.exceptions=true;    query=up.parse(mainUserQuery);    if (shouldRemoveStopFilter(config,query)) {      up.setRemoveStopFilter(true);      query=up.parse(mainUserQuery);    }  } catch (  Exception e) {    up.exceptions=false;  }  if (query == null) {    return null;  }  boolean doMinMatched=doMinMatched(clauses,config.lowercaseOperators);  if (doMinMatched && query instanceof BooleanQuery) {    SolrPluginUtils.setMinShouldMatch((BooleanQuery)query,config.minShouldMatch);  }  return query;}  }
class C{  public CapabilityFilter(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:57.110 -0500",hash_original_method="98097DD6E6764877F7A5356FC5E050F1",hash_generated_method="34F7F61637DBA8B7EB4DE3C660C7B1B6") public SubjectKeyIdentifier(byte[] keyIdentifier){  this.keyIdentifier=keyIdentifier;}  }
class C{  public void remove(ZonedDateTime open,ZonedDateTime close){synchronized (this.tradingdays) {    for (ListIterator<Tradingday> itemIter=this.tradingdays.listIterator(); itemIter.hasNext(); ) {      Tradingday item=itemIter.next();      if (item.getOpen().compareTo(open) == 0 && item.getClose().compareTo(close) == 0) {        itemIter.remove();        break;      }    }  }}  }
class C{  public byte[] encryptData(final byte[] plain,final int offset,int len){  if (Cfg.DEBUG) {    Check.asserts(len > 0," (encryptData) Assert failed, zero len");  }  final byte[] padplain=pad(plain,offset,len);  final int clen=padplain.length;  if (Cfg.DEBUG) {    Check.asserts(clen % 16 == 0,"Wrong padding");  }  byte[] crypted=null;  try {    crypted=crypto.encrypt(padplain);  } catch (  Exception e1) {    if (Cfg.DEBUG) {      Check.log(TAG + " (encryptData) Error: " + e1);    }  }  if (Cfg.DEBUG) {    Check.asserts(crypted != null," (encryptData) Assert failed, no crypted");  }  return crypted;}  }
class C{  public final String leftSide(Instances data){  return data.attribute(m_attIndex).name();}  }
class C{  public int depth(){  if (elementStack == null) {    return 0;  }  return elementStack.size();}  }
class C{  public void launch() throws Exception {  if (!CheckBcel.check()) {    System.exit(1);  }  int launchProperty=getLaunchProperty();  if (GraphicsEnvironment.isHeadless() || launchProperty == TEXTUI) {    FindBugs2.main(args);  } else   if (launchProperty == SHOW_HELP) {    ShowHelp.main(args);  } else   if (launchProperty == SHOW_VERSION) {    Version.main(new String[]{"-release"});  } else {    Class<?> launchClass=Class.forName("edu.umd.cs.findbugs.gui2.Driver");    Method mainMethod=launchClass.getMethod("main",args.getClass());    mainMethod.invoke(null,(Object)args);  }}  }
class C{  public int countLinesInFile(String filename) throws IOException {  InputStream is=new BufferedInputStream(new FileInputStream(filename));  try {    byte[] c=new byte[1024];    int count=0;    int readChars=0;    while ((readChars=is.read(c)) != -1) {      for (int i=0; i < readChars; ++i) {        if (c[i] == '\n') {          ++count;        }      }    }    return count;  }  finally {    is.close();  }}  }
class C{  public <T>T createDtoFromJson(String json,Class<T> dtoInterface){  return getDtoProvider(dtoInterface).fromJson(json);}  }
class C{  static boolean isVoid(Type type){  return type.asClassDoc() == null && type.typeName().equals("void");}  }
class C{  public void test_problem2_buildOrder3() throws Exception {  final BTree btree=getProblem2();  btree.dump(Level.DEBUG,System.err);  doBuildAndDiscardCache(btree,3);  final IndexSegment seg=new IndexSegmentStore(outFile).loadIndexSegment();  try {    assertEquals(3,seg.getBranchingFactor());    assertEquals(1,seg.getHeight());    assertEquals(3,seg.getLeafCount());    assertEquals(1,seg.getNodeCount());    assertEquals(9,seg.getEntryCount());    dumpIndexSegment(seg);{      final Node A=(Node)seg.getRoot();      final Leaf a=(Leaf)A.getChild(0);      final Leaf b=(Leaf)A.getChild(1);      final Leaf c=(Leaf)A.getChild(2);      assertKeys(new int[]{4,7},A);      assertEntryCounts(new int[]{3,3,3},A);      assertKeys(new int[]{1,2,3},a);      assertKeys(new int[]{4,5,6},b);      assertKeys(new int[]{7,8,9},c);    }    assertSameBTree(btree,seg);  }  finally {    seg.close();  }}  }
class C{  private static Pair<Character,Integer> normalizeCodepoint(String origString_,Charset encoding_,int offset_){  char normalizedChar='?';  boolean isOk=false;  final int codepoint=origString_.codePointAt(offset_);  if (encoding_.equals(Charset.forName("US-ASCII"))) {    if (codepoint < 128)     isOk=true;  } else   if (encoding_.equals(Charset.forName("ISO-8859-1"))) {    if (codepoint < 256)     isOk=true;  } else   if (encoding_.equals(Charset.forName("UTF-8"))) {    if (codepoint < 1114111)     isOk=true;  }  if (isOk) {    normalizedChar=(char)codepoint;  } else {    isOk=true;    final int type=Character.getType(codepoint);    if (type == Character.CURRENCY_SYMBOL)     normalizedChar='$'; else     if (type == Character.DASH_PUNCTUATION)     normalizedChar='-'; else     if (type == Character.FINAL_QUOTE_PUNCTUATION) {      normalizedChar='"';    } else     if (type == Character.INITIAL_QUOTE_PUNCTUATION) {      normalizedChar='"';    } else     if (type == Character.END_PUNCTUATION)     normalizedChar='.'; else     if (type == Character.DASH_PUNCTUATION)     normalizedChar='-'; else     if (type == Character.OTHER_LETTER)     normalizedChar='a'; else     if (type == Character.OTHER_NUMBER)     normalizedChar='0'; else     if (type == Character.OTHER_PUNCTUATION)     normalizedChar='-'; else     if (type == Character.OTHER_SYMBOL)     normalizedChar=' '; else     isOk=false;  }  Character newChar=null;  if (isOk)   newChar=normalizedChar;  return new Pair<>(newChar,codepoint);}  }
class C{  protected int addNode(int type,int expandedTypeID,int parentIndex,int previousSibling,int dataOrPrefix,boolean canHaveFirstChild){  int nodeIndex=m_size++;  if (m_dtmIdent.size() == (nodeIndex >>> DTMManager.IDENT_DTM_NODE_BITS)) {    addNewDTMID(nodeIndex);  }  m_firstch.addElement(canHaveFirstChild ? NOTPROCESSED : DTM.NULL);  m_nextsib.addElement(NOTPROCESSED);  m_parent.addElement(parentIndex);  m_exptype.addElement(expandedTypeID);  m_dataOrQName.addElement(dataOrPrefix);  if (m_prevsib != null) {    m_prevsib.addElement(previousSibling);  }  if (DTM.NULL != previousSibling) {    m_nextsib.setElementAt(nodeIndex,previousSibling);  }  if (m_locator != null && m_useSourceLocationProperty) {    setSourceLocation();  }switch (type) {case DTM.NAMESPACE_NODE:    declareNamespaceInContext(parentIndex,nodeIndex);  break;case DTM.ATTRIBUTE_NODE:break;default :if (DTM.NULL == previousSibling && DTM.NULL != parentIndex) {m_firstch.setElementAt(nodeIndex,parentIndex);}break;}return nodeIndex;}  }
class C{  public static Timestamp toTimestamp(String input,String format){  ToDateParser parser=getTimestampParser(input,format);  return parser.getResultingTimestamp();}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/start") public TaskList startFullCopy(@PathParam("id") URI fullCopyURI) throws InternalException {  Volume fullCopyVolume=queryFullCopy(fullCopyURI);  return getFullCopyManager().startFullCopy(fullCopyVolume.getAssociatedSourceVolume(),fullCopyURI);}  }
class C{  public static boolean shouldUseOpaqueTextboxBackground(int color){  return getLightnessForColor(color) > LIGHTNESS_OPAQUE_BOX_THRESHOLD;}  }
class C{  private void init() throws IgniteException {  if (initGuard.compareAndSet(false,true)) {    if (log.isDebugEnabled())     log.debug("Initializing cache store.");    try {      if (sesFactory != null)       return;      if (!F.isEmpty(hibernateCfgPath)) {        try {          URL url=new URL(hibernateCfgPath);          sesFactory=new Configuration().configure(url).buildSessionFactory();          if (log.isDebugEnabled())           log.debug("Configured session factory using URL: " + url);          return;        } catch (        MalformedURLException e) {          if (log.isDebugEnabled())           log.debug("Caught malformed URL exception: " + e.getMessage());        }        File cfgFile=new File(hibernateCfgPath);        if (cfgFile.exists()) {          sesFactory=new Configuration().configure(cfgFile).buildSessionFactory();          if (log.isDebugEnabled())           log.debug("Configured session factory using file: " + hibernateCfgPath);          return;        }        sesFactory=new Configuration().configure(hibernateCfgPath).buildSessionFactory();        if (log.isDebugEnabled())         log.debug("Configured session factory using classpath resource: " + hibernateCfgPath);      } else {        if (hibernateProps == null) {          U.warn(log,"No Hibernate configuration has been provided for store (will use default).");          hibernateProps=new Properties();          hibernateProps.setProperty("hibernate.connection.url",DFLT_CONN_URL);          hibernateProps.setProperty("hibernate.show_sql",DFLT_SHOW_SQL);          hibernateProps.setProperty("hibernate.hbm2ddl.auto",DFLT_HBM2DDL_AUTO);        }        Configuration cfg=new Configuration();        cfg.setProperties(hibernateProps);        assert resourceAvailable(MAPPING_RESOURCE) : MAPPING_RESOURCE;        cfg.addResource(MAPPING_RESOURCE);        sesFactory=cfg.buildSessionFactory();        if (log.isDebugEnabled())         log.debug("Configured session factory using properties: " + hibernateProps);      }    } catch (    HibernateException e) {      throw new IgniteException("Failed to initialize store.",e);    } finally {      initLatch.countDown();    }  } else   if (initLatch.getCount() > 0) {    try {      U.await(initLatch);    } catch (    IgniteInterruptedCheckedException e) {      throw new IgniteException(e);    }  }  if (sesFactory == null)   throw new IgniteException("Cache store was not properly initialized.");}  }
class C{  public byte[] writeFont(){  ByteBuffer buf=ByteBuffer.allocate(getLength());  buf.putInt(getType());  buf.putShort(getNumTables());  buf.putShort(getSearchRange());  buf.putShort(getEntrySelector());  buf.putShort(getRangeShift());  int curOffset=12 + (getNumTables() * 16);  for (Iterator i=tables.keySet().iterator(); i.hasNext(); ) {    String tagString=(String)i.next();    int tag=TrueTypeTable.stringToTag(tagString);    ByteBuffer data=null;    Object tableObj=tables.get(tagString);    if (tableObj instanceof TrueTypeTable) {      data=((TrueTypeTable)tableObj).getData();    } else {      data=(ByteBuffer)tableObj;    }    int dataLen=data.remaining();    buf.putInt(tag);    buf.putInt(calculateChecksum(tagString,data));    buf.putInt(curOffset);    buf.putInt(dataLen);    buf.mark();    buf.position(curOffset);    buf.put(data);    data.flip();    buf.reset();    curOffset+=dataLen;    while ((curOffset % 4) > 0) {      curOffset++;    }  }  buf.position(curOffset);  buf.flip();  updateChecksumAdj(buf);  return buf.array();}  }
class C{  public int numDocs(Query a,DocSet b) throws IOException {  if (filterCache != null) {    Query absQ=QueryUtils.getAbs(a);    DocSet positiveA=getPositiveDocSet(absQ);    return a == absQ ? b.intersectionSize(positiveA) : b.andNotSize(positiveA);  } else {    TotalHitCountCollector collector=new TotalHitCountCollector();    BooleanQuery.Builder bq=new BooleanQuery.Builder();    bq.add(QueryUtils.makeQueryable(a),BooleanClause.Occur.MUST);    bq.add(new ConstantScoreQuery(b.getTopFilter()),BooleanClause.Occur.MUST);    super.search(bq.build(),collector);    return collector.getTotalHits();  }}  }
class C{  public static void main(String[] args){  TestEncoding tester=new TestEncoding();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  public static void parseOptions(String[] args,Options options){  GnuParser parser=new GnuParser();  try {    CommandLine line=parser.parse(options,args);    NUMBER_OF_PEOPLE=parseIntegerArg(line,"nn",NUMBER_OF_PEOPLE);    if (NUMBER_OF_PEOPLE < 1) {      HelpFormatter formatter=new HelpFormatter();      formatter.printHelp("ProximitySimulation",options,true);      System.err.println("\n\nYou must enter a valid number of people.");      return;    }    NUMBER_OF_ADVERSARIES=parseIntegerArg(line,"na",NUMBER_OF_ADVERSARIES);    NUMBER_OF_ADVERSARIES=Math.min(NUMBER_OF_PEOPLE,NUMBER_OF_ADVERSARIES);    if (line.hasOption("author")) {      String popularity=line.getOptionValue("author");      if (popularity.equals("random")) {        messageAuthor=RANDOM_AUTHOR;      } else       if (popularity.equals("popular")) {        messageAuthor=POPULAR_AUTHOR;        popularAuthor=true;      } else       if (popularity.equals("unpopular")) {        messageAuthor=POPULAR_AUTHOR;        popularAuthor=false;      } else       if (popularity.equals("adversarial")) {        messageAuthor=ADVERSARIAL_AUTHOR;      } else {        System.err.println("Not a valid popularity flag.");      }    }    NUMBER_OF_STATIC_JAMMERS=parseIntegerArg(line,"jamStationary",NUMBER_OF_STATIC_JAMMERS);    if (NUMBER_OF_STATIC_JAMMERS > 0) {      staticJamming=true;    }    if (line.hasOption("jamOpt")) {      staticJammingOptimal=true;    }    NUMBER_OF_MOBILE_JAMMERS=parseIntegerArg(line,"jamMobile",NUMBER_OF_MOBILE_JAMMERS);    if (NUMBER_OF_MOBILE_JAMMERS > 0) {      mobileJamming=true;    }    JAMMING_RADIUS=parseDoubleArg(line,"radius",JAMMING_RADIUS);  } catch (  Exception exp) {    System.err.println("Parsing failed.  Reason: " + exp.getMessage());  }}  }
class C{  public T caseTracePeriod_(TracePeriod_ object){  return null;}  }
class C{  public Range<C> next(BiFunction<C,Integer,C> next){  Objects.requireNonNull(next);  this.biNext=next;  return this;}  }
class C{  public static String encodeFromString(String plain,String charset) throws CoderException, UnsupportedEncodingException {  return encode(plain.getBytes(charset));}  }
class C{  public void message(Map headers,String body){  transmit(Command.MESSAGE,headers,body);}  }
class C{  @Override public void write(byte b[],int off,int len) throws IOException {  Iterator<Client> it=clients.iterator();  while (it.hasNext()) {    Client client=it.next();    try {      client.output.write(b,off,len);    } catch (    Exception e) {      it.remove();      close(client);    }  }}  }
class C{  public ServiceError(String type,String field,String reason){  this.type=type;  this.field=field;  this.reason=reason;}  }
class C{  private void EM_Report(Instances inst){  int i, j, l, m;  System.out.println("======================================");  for (j=0; j < m_num_clusters; j++) {    for (i=0; i < m_num_attribs; i++) {      System.out.println("Clust: " + j + " att: "+ i+ "\n");      if (m_theInstances.attribute(i).isNominal()) {        if (m_model[j][i] != null) {          System.out.println(m_model[j][i].toString());        }      } else {        System.out.println("Normal Distribution. Mean = " + Utils.doubleToString(m_modelNormal[j][i][0],8,4) + " StandardDev = "+ Utils.doubleToString(m_modelNormal[j][i][1],8,4)+ " WeightSum = "+ Utils.doubleToString(m_modelNormal[j][i][2],8,4));      }    }  }  for (l=0; l < inst.numInstances(); l++) {    m=Utils.maxIndex(m_weights[l]);    System.out.print("Inst " + Utils.doubleToString(l,5,0) + " Class "+ m+ "\t");    for (j=0; j < m_num_clusters; j++) {      System.out.print(Utils.doubleToString(m_weights[l][j],7,5) + "  ");    }    System.out.println();  }}  }
class C{  public static void writeAsSVG(Drawable drawable,int w,int h,File file){  if (!ExportUtils.isJFreeSVGAvailable()) {    throw new IllegalStateException("JFreeSVG is not present on the classpath.");  }  ParamChecks.nullNotPermitted(drawable,"drawable");  ParamChecks.nullNotPermitted(file,"file");  try {    Class<?> svg2Class=Class.forName("org.jfree.graphics2d.svg.SVGGraphics2D");    Constructor<?> c1=svg2Class.getConstructor(int.class,int.class);    Graphics2D svg2=(Graphics2D)c1.newInstance(w,h);    Rectangle2D drawArea=new Rectangle2D.Double(0,0,w,h);    drawable.draw(svg2,drawArea);    Class<?> svgUtilsClass=Class.forName("org.jfree.graphics2d.svg.SVGUtils");    Method m1=svg2Class.getMethod("getSVGElement",(Class[])null);    String element=(String)m1.invoke(svg2,(Object[])null);    Method m2=svgUtilsClass.getMethod("writeToSVG",File.class,String.class);    m2.invoke(svgUtilsClass,file,element);  } catch (  ClassNotFoundException ex) {    throw new RuntimeException(ex);  }catch (  InstantiationException ex) {    throw new RuntimeException(ex);  }catch (  IllegalAccessException ex) {    throw new RuntimeException(ex);  }catch (  NoSuchMethodException ex) {    throw new RuntimeException(ex);  }catch (  SecurityException ex) {    throw new RuntimeException(ex);  }catch (  IllegalArgumentException ex) {    throw new RuntimeException(ex);  }catch (  InvocationTargetException ex) {    throw new RuntimeException(ex);  }}  }
class C{  public static ECKey fromPublicOnly(ECPoint pub){  return new ECKey(null,pub);}  }
class C{  private static float convertFromMicrometers(int x,int units){  if (units < 1) {    throw new IllegalArgumentException("units is < 1");  }  return ((float)x) / ((float)units);}  }
class C{  public void testLineAndBlockEndComment() throws IOException {  final InputStream stream=this.getStream(R.raw.line_comment_and_block_end);  List<String> commands=SqlParser.parse(stream);  assertEquals(1,commands.size());  assertEquals(sql1,commands.get(0));}  }
class C{  public boolean connected(int p,int q){  return find(p) == find(q);}  }
class C{  protected static String sizeToString(int size){  if (size == WRAP_CONTENT) {    return "wrap-content";  }  if (size == MATCH_PARENT) {    return "match-parent";  }  return String.valueOf(size);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean equals(Object other){  if (!(other instanceof GF2Matrix)) {    return false;  }  GF2Matrix otherMatrix=(GF2Matrix)other;  if ((numRows != otherMatrix.numRows) || (numColumns != otherMatrix.numColumns) || (length != otherMatrix.length)) {    return false;  }  for (int i=0; i < numRows; i++) {    if (!IntUtils.equals(matrix[i],otherMatrix.matrix[i])) {      return false;    }  }  return true;}  }
class C{  public boolean apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  final StringValueExp val;  try {    val=(StringValueExp)classNameValue.apply(name);  } catch (  ClassCastException x) {    final BadStringOperationException y=new BadStringOperationException(x.toString());    y.initCause(x);    throw y;  }  try {    return getMBeanServer().isInstanceOf(name,val.getValue());  } catch (  InstanceNotFoundException infe) {    return false;  }}  }
class C{  public void onRetry(int downloadId){}  }
class C{  public int purge(TungstenProperties params) throws Exception {  long timeout=params.getLong("timeout","60",true);  String role=properties.getString(ReplicatorConf.ROLE);  if (timeout < 0)   throw new Exception("Timeout value may not be less than 0: " + timeout);  if (!"master".equals(role))   throw new Exception("Purge only allowed on master: current role=" + role);  Future<Integer> purgeFuture=null;  int killCount=0;  try {    PurgeTask task=new PurgeTask(properties);    purgeFuture=purgeService.submit(task);    killCount=purgeFuture.get(timeout,TimeUnit.SECONDS);    logger.info(String.format("Purged %d user sessions",killCount));    return killCount;  } catch (  RejectedExecutionException e) {    String message="Unable to submit purge task: " + e.getMessage();    logger.error(message,e);    throw new Exception(message);  }catch (  TimeoutException e) {    String message="Purge task timed out after killing " + killCount + " user sessions; timeout="+ timeout;    logger.error(message,e);    throw new Exception(message);  }catch (  InterruptedException e) {    String message="Purge task was interrupted after killing " + killCount + " user sessions; timeout="+ timeout;    logger.error(message,e);    throw new Exception(message);  }catch (  ExecutionException e) {    String message="Purge task failed: " + e.getMessage();    logger.error(message,e);    throw new Exception(message);  } finally {    if (purgeFuture != null) {      purgeFuture.cancel(true);    }  }}  }
class C{  public XMLString trim(){  return new XString(str().trim());}  }
class C{  public boolean isPlainSelect(){  if (statement instanceof Select && ((Select)statement).getSelectBody() instanceof PlainSelect) {    PlainSelect selectBody=(PlainSelect)((Select)statement).getSelectBody();    return selectBody.getFromItem() != null && CommonUtils.isEmpty(selectBody.getIntoTables()) && selectBody.getLimit() == null && selectBody.getTop() == null && !selectBody.isForUpdate();  }  return false;}  }
class C{  private void drawNode(int n,Graphics g){  if (m_NodeColor == null) {    g.setColor(m_nodes[n].m_node.getColor());  } else {    g.setColor(m_NodeColor);  }  g.setPaintMode();  calcScreenCoords(n);  int x=m_nodes[n].m_center - m_nodes[n].m_side;  int y=m_nodes[n].m_top;  if (m_nodes[n].m_node.getShape() == 1) {    g.fill3DRect(x,y,m_nodes[n].m_width,m_nodes[n].m_height,true);    drawText(x,y,n,false,g);  } else   if (m_nodes[n].m_node.getShape() == 2) {    g.fillOval(x,y,m_nodes[n].m_width,m_nodes[n].m_height);    drawText(x,y + (int)(m_nodes[n].m_height * .15),n,false,g);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:15.163 -0500",hash_original_method="402CE948C1020CDD411F4962B0A96E04",hash_generated_method="FB34F21E38C960E2AA3188CC7A171CE2") public boolean removeShutdownHook(Thread hook){  if (hook == null) {    throw new NullPointerException("Hook may not be null.");  }  if (shuttingDown) {    throw new IllegalStateException("VM already shutting down");  }synchronized (shutdownHooks) {    return shutdownHooks.remove(hook);  }}  }
class C{  public static short[] copyOfRange(short[] original,int start,int end){  if (start <= end) {    if (original.length >= start && 0 <= start) {      int length=end - start;      int copyLength=Math.min(length,original.length - start);      short[] copy=new short[length];      System.arraycopy(original,start,copy,0,copyLength);      return copy;    }    throw new ArrayIndexOutOfBoundsException();  }  throw new IllegalArgumentException();}  }
class C{  public StrTokenizer reset(char[] input){  reset();  this.chars=input;  return this;}  }
class C{  private void cleanUpUnusedFiles() throws IOException {}  }
class C{  @Override public synchronized List<E> subList(int start,int end){  return new Collections.SynchronizedRandomAccessList<E>(super.subList(start,end),this);}  }
class C{  public void isWithText(boolean withText){  this.withText=withText;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(stack.getUIMgrSafe().isAsleep());}  }
class C{  public Quaternion nor(){  float len=len2();  if (len != 0.f && (Math.abs(len - 1.0f) > NORMALIZATION_TOLERANCE)) {    len=(float)Math.sqrt(len);    w/=len;    x/=len;    y/=len;    z/=len;  }  return this;}  }
class C{  @Deprecated public void removeRecipientFromEmailList(String recipientAddress,String emailList) throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Removing '" + recipientAddress + "' from emailList '"+ emailList+ "'.");  URL deleteUrl=new URL(domainUrlBase + "emailList/" + SERVICE_VERSION+ "/"+ emailList+ "/recipient/"+ recipientAddress);  emailListRecipientService.delete(deleteUrl);}  }
class C{  public boolean readArgs(String[] argv,int argIndex) throws ArrayIndexOutOfBoundsException, NegativeArraySizeException {  if (numExpectedValues != TO_END) {    values=new String[numExpectedValues];  } else {    values=new String[argv.length - argIndex];  }  for (int i=0; i < values.length; i++) {    values[i]=argv[argIndex + i];    if (values[i].charAt(0) == option && !dashedArguments) {      if (numExpectedValues != TO_END) {        Debug.output("ArgParser: Option " + name + " expects "+ numExpectedValues+ (numExpectedValues == 1 ? " argument." : " arguments."));      } else {        Debug.output("ArgParser: Option " + name + " not expecting options after its values.");      }      return false;    }  }  flagged=true;  return true;}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot,boolean isNeedResultMsg){  return execCommand(new String[]{command},isRoot,isNeedResultMsg);}  }
class C{  public static boolean contains(Collection c,Object o,Comparator comparator){  if (comparator == null) {    return c.contains(o);  } else {    for (    Object o2 : c) {      if (comparator.compare(o,o2) == 0) {        return true;      }    }  }  return false;}  }
class C{  public void dismissAutoSigninSnackbar(){  if (mSnackbarManager.isShowing()) {    mSnackbarManager.removeMatchingSnackbars(this);  }}  }
class C{  protected MenuComponent copyMenuComponent(MenuComponent mc){  MenuComponent menuComponent=new SelectableMenuComponent();  menuComponent.setAction(mc.getAction());  menuComponent.setAltImage(mc.getAltImage());  menuComponent.setDescription(mc.getDescription());  menuComponent.setForward(mc.getForward());  menuComponent.setImage(mc.getImage());  menuComponent.setLocation(mc.getLocation());  menuComponent.setName(mc.getName());  menuComponent.setPage(mc.getPage());  menuComponent.setTitle(mc.getTitle());  menuComponent.setToolTip(mc.getToolTip());  menuComponent.setUrl(mc.getUrl());  return menuComponent;}  }
class C{  private boolean repairRoleConflict(StunMessageEvent evt){  Message req=evt.getMessage();  long ourTieBreaker=parentAgent.getTieBreaker();  if (parentAgent.isControlling() && req.containsAttribute(Attribute.ICE_CONTROLLING)) {    IceControllingAttribute controlling=(IceControllingAttribute)req.getAttribute(Attribute.ICE_CONTROLLING);    long theirTieBreaker=controlling.getTieBreaker();    if (compareUnsignedLong(ourTieBreaker,theirTieBreaker) >= 0) {      Response response=MessageFactory.createBindingErrorResponse(ErrorCodeAttribute.ROLE_CONFLICT);      try {        stunStack.sendResponse(evt.getTransactionID().getBytes(),response,evt.getLocalAddress(),evt.getRemoteAddress());        return false;      } catch (      Exception exc) {        throw new RuntimeException("Failed to send a 487",exc);      }    } else {      logger.finer("Switching to controlled because theirTieBreaker=" + theirTieBreaker + " and ourTieBreaker="+ ourTieBreaker);      parentAgent.setControlling(false);      return true;    }  } else   if (!parentAgent.isControlling() && req.containsAttribute(Attribute.ICE_CONTROLLED)) {    IceControlledAttribute controlled=(IceControlledAttribute)req.getAttribute(Attribute.ICE_CONTROLLED);    long theirTieBreaker=controlled.getTieBreaker();    if (compareUnsignedLong(ourTieBreaker,theirTieBreaker) >= 0) {      logger.finer("Switching to controlling because theirTieBreaker=" + theirTieBreaker + " and ourTieBreaker="+ ourTieBreaker);      parentAgent.setControlling(true);      return true;    } else {      Response response=MessageFactory.createBindingErrorResponse(ErrorCodeAttribute.ROLE_CONFLICT);      try {        stunStack.sendResponse(evt.getTransactionID().getBytes(),response,evt.getLocalAddress(),evt.getRemoteAddress());        return false;      } catch (      Exception exc) {        throw new RuntimeException("Failed to send a 487",exc);      }    }  }  return true;}  }
class C{  public static SourceFile scanSingleFile(File file,SquidAstVisitor<SwiftGrammar>... visitors){  if (!file.isFile()) {    throw new IllegalArgumentException("File '" + file + "' not found.");  }  AstScanner<SwiftGrammar> scanner=create(new SwiftConfiguration(),visitors);  scanner.scanFile(file);  Collection<SourceCode> sources=scanner.getIndex().search(new QueryByType(SourceFile.class));  if (sources.size() != 1) {    throw new IllegalStateException("Only one SourceFile was expected whereas " + sources.size() + " has been returned.");  }  return (SourceFile)sources.iterator().next();}  }
class C{  private String issueProjectLine(){  MProjectLine pl=new MProjectLine(getCtx(),m_C_ProjectLine_ID,get_TrxName());  if (pl.getM_Product_ID() == 0)   throw new IllegalArgumentException("Projet Line has no Product");  if (pl.getC_ProjectIssue_ID() != 0)   throw new IllegalArgumentException("Projet Line already been issued");  if (m_M_Locator_ID == 0)   throw new IllegalArgumentException("No Locator");  if (pl.getPlannedQty() == null || pl.getPlannedQty().signum() == 0)   pl.setPlannedQty(Env.ONE);  MProjectIssue pi=new MProjectIssue(m_project);  pi.setMandatory(m_M_Locator_ID,pl.getM_Product_ID(),pl.getPlannedQty());  if (m_MovementDate != null)   pi.setMovementDate(m_MovementDate);  if (m_Description != null && m_Description.length() > 0)   pi.setDescription(m_Description); else   if (pl.getDescription() != null)   pi.setDescription(pl.getDescription());  pi.process();  pl.setMProjectIssue(pi);  pl.saveEx();  addLog(pi.getLine(),pi.getMovementDate(),pi.getMovementQty(),null);  return "@Created@ 1";}  }
class C{  public static boolean isCollector(TileEntity tile){  if (tile != null)   return tile instanceof IEnergyContainer && ((IEnergyContainer)tile).canAcceptPE();  return false;}  }
class C{  protected int checkAuthenticator(MBeanServerConnection mbs,int expectedAuthenticatorCallCount) throws Exception {  int errorCount=0;  int callCount=((Integer)mbs.getAttribute(new ObjectName(SERVER_DELEGATE_MBEAN_NAME),"TestJMXAuthenticatorCallCount")).intValue();  if (callCount == expectedAuthenticatorCallCount) {    System.out.println("---- OK Authenticator has been called " + expectedAuthenticatorCallCount + " time");  } else {    errorCount++;    System.out.println("---- ERROR Authenticator has been called " + callCount + " times in place of "+ expectedAuthenticatorCallCount);  }  String principalString=(String)mbs.getAttribute(new ObjectName(SERVER_DELEGATE_MBEAN_NAME),"TestJMXAuthenticatorPrincipalString");  if (principalString == null) {    errorCount++;    System.out.println("---- ERROR Authenticator has been called" + " with a null Principal");  } else {    if (principalString.length() > 0) {      System.out.println("---- OK Authenticator has been called" + " with the Principal " + principalString);    } else {      errorCount++;      System.out.println("---- ERROR Authenticator has been called" + " with an empty Principal");    }  }  return errorCount;}  }
class C{  public void encodeImage(BufferedImage buf,OutputStream os) throws IOException {  Base64EncoderStream b64Encoder=new Base64EncoderStream(os);  ImageWriter writer=ImageWriterRegistry.getInstance().getWriterFor("image/png");  writer.writeImage(buf,b64Encoder);  b64Encoder.close();}  }
class C{  public final void testGetSeed02(){  ECFieldFp f=new ECFieldFp(BigInteger.valueOf(23L));  BigInteger a=BigInteger.ONE;  BigInteger b=BigInteger.valueOf(19L);  byte[] seed=new byte[24];  EllipticCurve c=new EllipticCurve(f,a,b,seed.clone());  byte[] seedRet=c.getSeed();  seedRet[0]=(byte)1;  assertTrue(Arrays.equals(seed,c.getSeed()));}  }
class C{  public MaterializeBuilder withStatusBarColorRes(@ColorRes int statusBarColorRes){  this.mStatusBarColorRes=statusBarColorRes;  return this;}  }
class C{  public ApprovalDialog(Frame owner,String title,boolean modal){  super(owner,title,modal);}  }
class C{  public void disconnectPort(Mx1PortController p){  istream=null;  ostream=null;  if (controller != p) {    log.warn("disconnectPort: disconnect called from non-connected Mx1PortController");  }  controller=null;}  }
class C{  public void testDirectFactory() throws Exception {  MockConfigurableSimilarity sim=getSimilarity("sim2text",MockConfigurableSimilarity.class);  assertEquals("is there an echo?",sim.getPassthrough());}  }
class C{  public ReturnOp(AST source){  super(source,"return");  this.operand=NO_SUCH_SLOT;}  }
class C{  public SearchObject(ImageResource resource,String keyword,String link){  this.resource=resource;  this.keyword=keyword;  this.link=link;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:58.352 -0500",hash_original_method="0E7A1CD360B45111318BE8F6B32E8E98",hash_generated_method="F62683C44332C899647B093DB2541D5A") public static boolean isHorizontal(int gravity){  return gravity > 0 && (gravity & RELATIVE_HORIZONTAL_GRAVITY_MASK) != 0;}  }
class C{  private static void updateSystemVarrays(URI systemUri,DbClient dbClient){  StorageSystem system=dbClient.queryObject(StorageSystem.class,systemUri);  if (!system.getInactive()) {    _log.info("Updating the virtual arrays for storage system {}",system.getNativeGuid());    if (ConnectivityUtil.isAVPlex(system)) {      StringSet varrays=getSystemConnectedVarrays(systemUri,PortType.frontend.name(),dbClient);      _log.info("vplex system {} varrays will be set to {}",system.getNativeGuid(),varrays);      if (system.getVirtualArrays() == null) {        system.setVirtualArrays(varrays);      } else {        system.getVirtualArrays().replace(varrays);      }      dbClient.updateAndReindexObject(system);      _log.info("Updated vplex system {} varrays to {}",system.getNativeGuid(),varrays);    } else {      StringSet varrays=getSystemConnectedVarrays(systemUri,null,dbClient);      _log.info("The pools of storage system {} varrays will be set to {}",system.getNativeGuid(),varrays);      List<StoragePool> pools=getSystemPools(systemUri,dbClient);      for (      StoragePool pool : pools) {        pool.replaceConnectedVirtualArray(varrays);        _log.info("Updated storage pool {} varrays to {}",pool.getNativeGuid(),varrays);      }      dbClient.updateAndReindexObject(pools);    }  }}  }
class C{  @RequestMapping(value="/SAML2/SLO/{tenant:.*}") public void sloError(Locale locale,@PathVariable(value="tenant") String tenant,HttpServletResponse response) throws IOException {  logger.info("SLO binding error! The client locale is " + locale.toString() + ", tenant is "+ tenant);  sloDefaultTenantBindingError(locale,response);}  }
class C{  public static TypeFactory defaultInstance(){  return instance;}  }
class C{  public String toString(){  String s="CertificatePolicyMap: [\n" + "IssuerDomain:" + issuerDomain.toString() + "SubjectDomain:"+ subjectDomain.toString()+ "]\n";  return (s);}  }
class C{  protected ActionArgumentsImpl(){  super();}  }
class C{  public void clear(){  requiredTEs.clear();  optionalTEs.clear();  constraints.clear();}  }
class C{  @Override public boolean hasShield(){  for (  Mounted m : getMisc()) {    EquipmentType type=m.getType();    if (((m.getLocation() == Mech.LOC_LARM) || (m.getLocation() == Mech.LOC_RARM)) && (type instanceof MiscType) && ((MiscType)type).isShield()&& !m.isInoperable()&& (this.getInternal(m.getLocation()) > 0)) {      for (int slot=0; slot < this.getNumberOfCriticals(m.getLocation()); slot++) {        CriticalSlot cs=getCritical(m.getLocation(),slot);        if ((cs != null) && (cs.getType() == CriticalSlot.TYPE_EQUIPMENT) && cs.getMount().equals(m)&& !cs.isDestroyed()&& !cs.isMissing()) {          return true;        }      }    }  }  return false;}  }
class C{  static Object[] toArray(Iterable<?> iterable){  return castOrCopyToCollection(iterable).toArray();}  }
class C{  @Override public void printStackTrace(final PrintWriter s){  try {    final Class[] paramsClasses=new Class[]{};    this.getClass().getMethod("getStackTrace",paramsClasses);    super.printStackTrace(s);  } catch (  final Exception ex) {    super.printStackTrace(s);    if (cause != null) {      s.print("Caused by: ");      cause.printStackTrace(s);    }  }}  }
class C{  public static Document parseFile(Path path) throws IOException {  try (InputStream in=Files.newInputStream(path)){    Document doc=newBuilder().parse(in);    compact(doc);    return doc;  } catch (  NoSuchFileException e) {    return null;  }catch (  SAXException|ParserConfigurationException|IOException e) {    throw new IOException("Error reading " + path,e);  }}  }
class C{  public static <T extends BOp>T deepCopy(final T op){  if (op == null)   return op;  if (op instanceof IVariableOrConstant<?>) {    return op;  }  if (op instanceof BOpBase) {    return op;  }  final int arity=op.arity();  final BOp[] args=arity == 0 ? BOp.NOARGS : new BOp[arity];  for (int i=0; i < arity; i++) {    final BOp child=op.get(i);    args[i]=deepCopy(child);  }  final LinkedHashMap<String,Object> anns=new LinkedHashMap<String,Object>();  for (  Map.Entry<String,Object> e : op.annotations().entrySet()) {    final String name=e.getKey();    final Object oval=e.getValue();    final Object nval;    if (oval instanceof BOp) {      nval=deepCopy((BOp)oval);    } else {      nval=oval;    }    anns.put(name,nval);  }  try {    @SuppressWarnings("unchecked") final Constructor<T> ctor=(Constructor<T>)op.getClass().getConstructor(BOp[].class,Map.class);    final T copy=ctor.newInstance(args,anns);    if (copy instanceof GroupNodeBase<?>) {      for (int i=0; i < arity; i++) {        final IGroupMemberNode child=(IGroupMemberNode)copy.get(i);        child.setParent((GroupNodeBase<IGroupMemberNode>)copy);      }    }    return copy;  } catch (  Exception e1) {    throw new RuntimeException(e1);  }}  }
class C{  public static boolean hasOperationSucceeded(final Message message){  if (!ManagementHelper.isOperationResult(message)) {    return false;  }  if (message.containsProperty(ManagementHelper.HDR_OPERATION_SUCCEEDED)) {    return message.getBooleanProperty(ManagementHelper.HDR_OPERATION_SUCCEEDED);  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:26.020 -0500",hash_original_method="D8599DD48DDC4CC4612B88C72AEC4FC6",hash_generated_method="1539942E00305A340455726C65C054B0") public static byte[] readFileAsByteArray(String path) throws IOException {  return readFileAsBytes(path).toByteArray();}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  GreenNewsDao.dropTable(db,ifExists);  GreenStatDao.dropTable(db,ifExists);}  }
class C{  static String rawFile(){  return Errors.rethrow().get(null);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:58.512 -0500",hash_original_method="32802909F6EBAD9D75292258771F56F1",hash_generated_method="3BA613D5324C3D37BC1D540DE0F7918B") public static void adjustMetaAfterKeypress(Spannable content){  adjust(content,CAP);  adjust(content,ALT);  adjust(content,SYM);}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  m_expr.fixupVariables(vars,globalsSize);}  }
class C{  private String fromList(List<String> description){  StringBuilder stringBuilder=new StringBuilder();  for (int i=0; i < description.size(); i++)   stringBuilder.append(description.get(i)).append(i < description.size() - 1 ? "\n" : "");  return stringBuilder.toString();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildTavern(zone,attributes);}  }
class C{  public boolean isIncludeDerived(){  return fVisitDerived;}  }
class C{  public void receiveResultqueryStoragePorts(com.emc.storageos.vasa.VasaServiceStub.QueryStoragePortsResponse result){}  }
class C{  public DropTarget() throws HeadlessException {  this(null,DnDConstants.ACTION_COPY_OR_MOVE,null,true,null);}  }
class C{  public static StringBuilder formatTo(StringBuilder buf,short[] d,String sep){  if (d == null) {    return buf.append("null");  }  if (d.length == 0) {    return buf;  }  buf.append(d[0]);  for (int i=1; i < d.length; i++) {    buf.append(sep);    buf.append(d[i]);  }  return buf;}  }
class C{  public JFreeChartEntity(Shape area,JFreeChart chart,String toolTipText,String urlText){  super(area,toolTipText,urlText);  ParamChecks.nullNotPermitted(chart,"chart");  this.chart=chart;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGraphPackage.IMPORT_DECLARATION__DECLARATION:    return declaration != null;}return super.eIsSet(featureID);}  }
class C{  public static boolean isMobileNum(String mobiles){  Pattern p=Pattern.compile("^((13[0-9])|(15[^4,\\D])|(17[^4,\\D])|(18[0-9]))\\d{8}$");  Matcher m=p.matcher(mobiles);  return m.matches();}  }
class C{  public static void addClassTest(Closure test){  tests.add(test);}  }
class C{  public boolean isAttributeAdditive(String ns,String ln){  return true;}  }
class C{  public WrongParameterValueException(Parameter<?> parameter,String read,Throwable cause){  this("Wrong value of parameter \"" + parameter.getName() + "\".\n"+ "Read: "+ read+ ".\n"+ "Expected: "+ parameter.getFullDescription()+ "\n"+ formatCause(cause),cause);}  }
class C{  public static void main(final String[] args){  System.out.println(args.length);  for (  String arg : args) {    System.out.println(arg);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static Plane constructNormalizedZPlane(final Vector... planePoints){  double bestDistance=0.0;  Vector bestPoint=null;  for (  final Vector point : planePoints) {    final double pointDist=point.x * point.x + point.y * point.y;    if (pointDist > bestDistance) {      bestDistance=pointDist;      bestPoint=point;    }  }  return constructNormalizedZPlane(bestPoint.x,bestPoint.y);}  }
class C{  public int size(){  return cache.size();}  }
class C{  public static ApplicationExceptionBeanE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ApplicationExceptionBeanE object=new ApplicationExceptionBeanE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","ApplicationExceptionBean").equals(reader.getName())) {          object.setApplicationExceptionBean(ApplicationExceptionBean.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public AppEvent(EventType type,Object data){  super(type);  this.data=data;}  }
class C{  public static void endEntityViaReflection(HttpEntity entity){  if (entity instanceof HttpEntityWrapper) {    try {      Field f=null;      Field[] fields=HttpEntityWrapper.class.getDeclaredFields();      for (      Field ff : fields) {        if (ff.getName().equals("wrappedEntity")) {          f=ff;          break;        }      }      if (f != null) {        f.setAccessible(true);        HttpEntity wrapped=(HttpEntity)f.get(entity);        if (wrapped != null) {          wrapped.consumeContent();        }      }    } catch (    Throwable t) {      log.e(LOG_TAG,"wrappedEntity consume",t);    }  }}  }
class C{  protected static Boolean unlock(String serviceName,Object name){  DistributedLockService service=DistributedLockService.getServiceNamed(serviceName);  try {    service.unlock(name);    return Boolean.TRUE;  } catch (  LockNotHeldException e) {    return Boolean.FALSE;  }catch (  Exception e) {    e.printStackTrace();    return Boolean.FALSE;  }}  }
class C{  @Override protected void doPost(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  if (req.getRequestURI().endsWith("/dataloader")) {    if (log.isDebugEnabled()) {      log.debug("");    }    doBulkLoad(req,resp);    return;  }  m_restServlet.doPost(req,resp);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public AppLauncher env(String name,String value){  if (name == null) {    throw new NullPointerException("name");  }  if (value == null) {    throw new NullPointerException("value");  }  this.env.put(name,value);  return this;}  }
class C{  public static void addField(MobileSessionCtx wsc,form line,GridField field,Object oData,boolean hasDependents,int recordID,int tableID,boolean tabRO,int fieldNumber,GridTab mTab,MRole role){  String columnName=field.getColumnName();  boolean error=field.isErrorValue();  if (error)   oData=field.getErrorValue();  int dt=field.getDisplayType();  boolean hasCallout=field.getCallout().length() > 0;  String fieldgroup=field.getFieldGroup();  if (fieldgroup != null && !fieldgroup.equals(sectionNameOld) && !fieldgroup.equals("")) {    fs=new fieldset();    line.addElement(new h2(fieldgroup));    line.addElement(fs);    sectionNameOld=field.getFieldGroup();  }  boolean fieldRO=true;  if (tabRO == true)   fieldRO=true; else   fieldRO=!field.isEditable(true);  WebField wField=new WebField(wsc,columnName,field.getHeader(),field.getDescription(),dt,field.getFieldLength(),field.getDisplayLength(),field.isLongField(),fieldRO,field.isMandatory(false),error,hasDependents,hasCallout,field.getAD_Process_ID(),field.getAD_Window_ID(),recordID,tableID,fieldNumber,field.getDefault(),field.getCallout(),mTab,field,role);  div div=new div();  div.setClass("row");  div.addElement(wField.getLabel(!tabRO)).addElement(wField.getField(field.getLookup(),oData));  fs.addElement(div);}  }
class C{  public static <T>T[] concatenate(final T[] A,final T[] B){  int aLen=A.length;  int bLen=B.length;  @SuppressWarnings("unchecked") T[] C=(T[])Array.newInstance(A.getClass().getComponentType(),aLen + bLen);  System.arraycopy(A,0,C,0,aLen);  System.arraycopy(B,0,C,aLen,bLen);  return C;}  }
class C{  @Override public int incrementFirstValue(int key){  return readerAccessibleInfo.array.incrementEntry(getKeyPosition(key,readerAccessibleInfo) + 1,1);}  }
class C{  private boolean placeZone(List<NetworkFCZoneInfo> zoneInfos,ExportGroup exportGroup,URI varrayURI,Initiator initiator,StoragePort sp,Collection<URI> volumeURIs,List<Zone> existingZones,boolean checkZones){  boolean foundMatch=false;  NetworkFCZoneInfo zoneInfo=placeZones(exportGroup.getId(),varrayURI,initiator.getProtocol(),formatWWN(initiator.getInitiatorPort()),sp,initiator.getHostName(),existingZones,checkZones);  if (zoneInfo != null) {    for (    URI volumeURI : volumeURIs) {      BlockObject volume=BlockObject.fetch(_dbClient,volumeURI);      if (!volume.getStorageController().equals(sp.getStorageDevice())) {        continue;      }      NetworkFCZoneInfo volZoneInfo=zoneInfo.clone();      volZoneInfo.setVolumeId(volumeURI);      zoneInfos.add(volZoneInfo);    }    foundMatch=true;  }  return foundMatch;}  }
class C{  public boolean isLockAlreadyAcquired(){  boolean result=false;  try {    boolean success=lock.acquire(0L);    if (success) {      result=lock.getDepth() > 1;      lock.release();    }  } catch (  InterruptedException e) {  }  return result;}  }
class C{  @Beta public static <K,V>ImmutableListMultimap<K,V> copyOf(Iterable<? extends Entry<? extends K,? extends V>> entries){  return new Builder<K,V>().putAll(entries).build();}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return KEY;case 2:  return VALUES;default :return null;}}  }
class C{  @SuppressWarnings("unused") private static void stopServer() throws Exception {  getJettyServer().stop();}  }
class C{  public GuacamoleUpstreamTimeoutException(String message){  super(message);}  }
class C{  public BasicHeaderIterator(Header[] headers,String name){  if (headers == null) {    throw new IllegalArgumentException("Header array must not be null.");  }  this.allHeaders=headers;  this.headerName=name;  this.currentIndex=findNext(-1);}  }
class C{  public void addColumn(int idx,Column column){  if (column != null) {    columns.add(idx,column);  }}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  private void initRMIParameters() throws Exception {  if (rmiHostMaster == null || rmiPortMaster == null) {    File confDir=ReplicatorRuntimeConf.locateReplicatorConfDir();    File propsFile=new File(confDir,ReplicationServiceManager.CONFIG_SERVICES);    println(String.format("Not all RMI parameters provided, using configuration: %s",propsFile));    TungstenProperties serviceProps=PropertiesManager.loadProperties(propsFile);    if (rmiPortMaster == null)     rmiPortMaster=serviceProps.getString(ReplicatorConf.RMI_PORT,ReplicatorConf.RMI_DEFAULT_PORT,false);    if (rmiHostMaster == null)     rmiHostMaster=ReplicationServiceManager.getHostName(serviceProps);  }}  }
class C{  @NonNull public Builder fromResponseJson(@NonNull JSONObject json) throws JSONException, MissingArgumentException {  setClientId(JsonUtil.getString(json,PARAM_CLIENT_ID));  setClientIdIssuedAt(JsonUtil.getLongIfDefined(json,PARAM_CLIENT_ID_ISSUED_AT));  if (json.has(PARAM_CLIENT_SECRET)) {    if (!json.has(PARAM_CLIENT_SECRET_EXPIRES_AT)) {      throw new MissingArgumentException(PARAM_CLIENT_SECRET_EXPIRES_AT);    }    setClientSecret(json.getString(PARAM_CLIENT_SECRET));    setClientSecretExpiresAt(json.getLong(PARAM_CLIENT_SECRET_EXPIRES_AT));  }  if (json.has(PARAM_REGISTRATION_ACCESS_TOKEN) != json.has(PARAM_REGISTRATION_CLIENT_URI)) {    String missingParameter=json.has(PARAM_REGISTRATION_ACCESS_TOKEN) ? PARAM_REGISTRATION_CLIENT_URI : PARAM_REGISTRATION_ACCESS_TOKEN;    throw new MissingArgumentException(missingParameter);  }  setRegistrationAccessToken(JsonUtil.getStringIfDefined(json,PARAM_REGISTRATION_ACCESS_TOKEN));  setRegistrationClientUri(JsonUtil.getUriIfDefined(json,PARAM_REGISTRATION_CLIENT_URI));  setTokenEndpointAuthMethod(JsonUtil.getStringIfDefined(json,PARAM_TOKEN_ENDPOINT_AUTH_METHOD));  setAdditionalParameters(extractAdditionalParams(json,BUILT_IN_PARAMS));  return this;}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  protected void assertStartsWith(String text,String expectedStart){  if (!text.startsWith(expectedStart)) {    fail("[" + text + "] does not start with: ["+ expectedStart+ "]");  }}  }
class C{  public static void parse(final ConfigurationBuffer buffer,final String defaultvar,final String[] args) throws ConfigurationException {  assert defaultvar == null || buffer.isValidVar(defaultvar) : "coding error: config must provide default var " + defaultvar;  Map<String,String> aliases=getAliases(buffer);  final int START=1;  final int ARGS=2;  final int EXEC=3;  final int DONE=4;  int i=0, iStart=0, iEnd=0;  String var=null;  int varArgCount=-2;  List<String> argList=new LinkedList<String>();  Set<String> vars=new HashSet<String>();  boolean append=false;  boolean dash=true;  int mode=START;  while (mode != DONE) {switch (mode) {case START:{        iStart=i;        if (args.length == i) {          mode=DONE;          break;        }        mode=ARGS;        varArgCount=-2;        if (args[i].equals("--")) {          dash=false;          if (defaultvar != null)           var=defaultvar; else           mode=START;          ++i;        } else         if (dash && args[i].startsWith("+")) {          String token=null;          int c=(args[i].length() > 1 && args[i].charAt(1) == '+') ? 2 : 1;          int equals=args[i].indexOf('=');          String rest=null;          if (equals != -1) {            rest=args[i].substring(equals + 1);            token=args[i++].substring(c,equals);          } else {            token=args[i++].substring(c);          }          if (equals != -1) {            iEnd=i;            buffer.setToken(token,rest);            buffer.addPosition(token,iStart,iEnd);          } else {            if (i == args.length) {              throw new ConfigurationException.Token(ConfigurationException.Token.INSUFFICIENT_ARGS,token,var,source,-1);            }            rest=args[i++];            iEnd=i;            buffer.setToken(token,rest);            buffer.addPosition(token,iStart,iEnd);          }          mode=START;          break;        } else         if (dash && isAnArgument(args[i])) {          int c=(args[i].length() > 1 && args[i].charAt(1) == '-') ? 2 : 1;          int plusequals=args[i].indexOf("+=");          int equals=args[i].indexOf('=');          String rest=null;          if (plusequals != -1) {            rest=args[i].substring(plusequals + 2);            var=args[i++].substring(c,plusequals);            append=true;          } else           if (equals != -1) {            rest=args[i].substring(equals + 1);            var=args[i++].substring(c,equals);          } else {            var=args[i++].substring(c);          }          if (aliases.containsKey(var))           var=aliases.get(var);          if (!buffer.isValidVar(var)) {            throw new ConfigurationException.UnknownVariable(var,source,-1);          }          if (equals != -1) {            if ((rest == null) || (rest.length() == 0)) {              iEnd=i;              buffer.clearVar(var,source,-1);              buffer.addPosition(var,iStart,iEnd);              mode=START;            } else {              String seps=null;              if (buffer.getInfo(var).isPath()) {                seps="[," + File.pathSeparatorChar + "]";              } else {                seps=",";              }              String[] tokens=rest.split(seps);              argList.addAll(Arrays.asList(tokens));              varArgCount=buffer.getVarArgCount(var);              mode=EXEC;            }          }        } else {          if (defaultvar != null && !defaultvar.equals("no-default-arg")) {            var=defaultvar;          } else {            throw new ConfigurationException.UnexpectedDefaults(null,null,-1);          }        }        break;      }case ARGS:{      if (varArgCount == -2) {        if (isBoolean(buffer,var)) {          varArgCount=0;          mode=EXEC;          break;        } else {          varArgCount=buffer.getVarArgCount(var);        }      }      assert varArgCount >= -1;      if (args.length == i) {        mode=EXEC;        break;      }      boolean greedy=buffer.getInfo(var).isGreedy();      if (!greedy && dash && isAnArgument(args[i])) {        if (varArgCount == -1) {          mode=EXEC;          break;        }        throw new ConfigurationException.IncorrectArgumentCount(varArgCount,argList.size(),var,source,-1);      }      if ((varArgCount == -1) && !greedy && (defaultvar != null)&& !defaultvar.equals(var)&& !vars.contains(defaultvar)&& ((args.length - i) > 1)&& buffer.getInfo(defaultvar) != null) {        boolean ok=false;        for (int j=i + 1; j < args.length; ++j) {          if (dash && isAnArgument(args[j])) {            ok=true;            break;          }        }        if (!ok) {          throw new ConfigurationException.AmbiguousParse(defaultvar,var,source,-1);        }      }      argList.add(args[i++]);      if (argList.size() == varArgCount) {        mode=EXEC;      }      break;    }case EXEC:{    if ((varArgCount != -1) && (argList.size() != varArgCount)) {      throw new ConfigurationException.IncorrectArgumentCount(varArgCount,argList.size(),var,source,-1);    }    if (varArgCount == 0)     argList.add("true");    if (vars.contains(var)) {      if ((defaultvar != null) && var.equals(defaultvar)) {        throw new ConfigurationException.InterspersedDefaults(var,source,-1);      }    }    iEnd=i;    buffer.setVar(var,new LinkedList<String>(argList),source,-1,null,append);    buffer.addPosition(var,iStart,iEnd);    append=false;    vars.add(var);    argList.clear();    mode=START;    break;  }case DONE:{  assert false;  break;}}}}  }
class C{  public TransferSubscriptionsResponse TransferSubscriptions(TransferSubscriptionsRequest req) throws ServiceFaultException, ServiceResultException {  return (TransferSubscriptionsResponse)channel.serviceRequest(req);}  }
class C{  public Ray(Vector2 direction){  this(new Vector2(),direction);}  }
class C{  @Override public PilotingRollData addEntityBonuses(PilotingRollData prd){  return prd;}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    FileOutputStream fos=new FileOutputStream(file);    CacheHeader e=new CacheHeader(key,entry);    e.writeHeader(fos);    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  public void addLibClass(SootClass clz){  libClasses.add(clz.getName());}  }
class C{  public short shortValue(){  return 0;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.legendBar=SerialUtilities.readShape(stream);}  }
class C{  public void subdivide(Quadradic q0,Quadradic q1){  if ((q0 == null) && (q1 == null))   return;  double x=(p1.x - 2 * p2.x + p3.x) * .25 + (p2.x - p1.x) + p1.x;  double y=(p1.y - 2 * p2.y + p3.y) * .25 + (p2.y - p1.y) + p1.y;  double dx=(p1.x - 2 * p2.x + p3.x) * .25 + (p2.x - p1.x) * .5;  double dy=(p1.y - 2 * p2.y + p3.y) * .25 + (p2.y - p1.y) * .5;  if (q0 != null) {    q0.p1.x=p1.x;    q0.p1.y=p1.y;    q0.p2.x=x - dx;    q0.p2.y=y - dy;    q0.p3.x=x;    q0.p3.y=y;  }  if (q1 != null) {    q1.p1.x=x;    q1.p1.y=y;    q1.p2.x=x + dx;    q1.p2.y=y + dy;    q1.p3.x=p3.x;    q1.p3.y=p3.y;  }}  }
class C{  Entry(int h,K k,V v,Entry<K,V> n,Equality keyEquality){  value=v;  next=n;  key=k;  hash=h;  this.keyEquality=keyEquality;}  }
class C{  public boolean isGeneralDiscoverable(){  return mGeneralDiscoverable;}  }
class C{  public AugmentedNode(K key,K value,AugmentedNode<K> parent){  super(key,value,parent);  this.max=value;  this.min=value;}  }
class C{  public void addInvokevirtual(CtClass clazz,String name,CtClass returnType,CtClass[] paramTypes){  String desc=Descriptor.ofMethod(returnType,paramTypes);  addInvokevirtual(clazz,name,desc);}  }
class C{  public void initialize(Element collection){  this.id=DOMUtil.getChildText(collection.getElementsByTagName(TAG_ID).item(0)).trim();  this.name=DOMUtil.getChildText(collection.getElementsByTagName(TAG_NAME).item(0)).trim();  this.wlString=DOMUtil.getChildText(collection.getElementsByTagName(TAG_WHITELIST).item(0)).trim();  parseList(this.whiteList,wlString);  NodeList nodeList=collection.getElementsByTagName(TAG_BLACKLIST);  if (nodeList.getLength() > 0) {    this.blString=DOMUtil.getChildText(nodeList.item(0)).trim();    parseList(this.blackList,blString);  }}  }
class C{  private static String toHex(int i){  String hex=Integer.toHexString(i).toUpperCase();  if (hex.length() == 1)   return "0" + hex; else   return hex;}  }
class C{  public VarInt(byte[] buf,int offset){  int first=0xFF & buf[offset];  if (first < 253) {    value=first;    originallyEncodedSize=1;  } else   if (first == 253) {    value=(0xFF & buf[offset + 1]) | ((0xFF & buf[offset + 2]) << 8);    originallyEncodedSize=3;  } else   if (first == 254) {    value=Utils.readUint32(buf,offset + 1);    originallyEncodedSize=5;  } else {    value=Utils.readInt64(buf,offset + 1);    originallyEncodedSize=9;  }}  }
class C{  public static synchronized boolean saveTemplates(){  if (!getTemplatesEnabled()) {    return false;  }  return getCodeTemplateManager().saveTemplates();}  }
class C{  public boolean existsTrek(Node node1,Node node2){  for (  Node node : getNodes()) {    if (isAncestorOf((node),node1) && isAncestorOf((node),node2)) {      return true;    }  }  return false;}  }
class C{  private IgfsPathSummary summary0(IgfsPath path) throws IgniteCheckedException {  IgfsFile info=info(path);  if (info == null)   throw new IgfsPathNotFoundException("Failed to get path summary (path not found): " + path);  IgfsPathSummary sum=new IgfsPathSummary(path);  summaryRecursive(info,sum);  return sum;}  }
class C{  public boolean isReference(){  return true;}  }
class C{  public void freezeSynapses(final boolean freeze){  for (  SynapseGroup group : getSynapseGroups()) {    group.setFrozen(freeze,Polarity.BOTH);  }  for (  Synapse synapse : this.getSynapseList()) {    synapse.setFrozen(freeze);  }}  }
class C{  synchronized public void saveRobotList(List<RobotUser> robotList){  SQLiteDatabase db=dbHelper.getWritableDatabase();  if (db.isOpen()) {    db.delete(UserDao.ROBOT_TABLE_NAME,null,null);    for (    RobotUser item : robotList) {      ContentValues values=new ContentValues();      values.put(UserDao.ROBOT_COLUMN_NAME_ID,item.getUsername());      if (item.getNick() != null)       values.put(UserDao.ROBOT_COLUMN_NAME_NICK,item.getNick());      if (item.getAvatar() != null)       values.put(UserDao.ROBOT_COLUMN_NAME_AVATAR,item.getAvatar());      db.replace(UserDao.ROBOT_TABLE_NAME,null,values);    }  }}  }
class C{  public void add(Row r){  list.add(r);  memory+=r.getMemory() + Constants.MEMORY_POINTER;  if (maxMemory > 0 && memory > maxMemory) {    writeAllRows();  }  size++;}  }
class C{  public <T extends JCTree>T translate(T tree,Type pt){  Type prevPt=this.pt;  try {    this.pt=pt;    return translate(tree);  }  finally {    this.pt=prevPt;  }}  }
class C{  private static List<List<String>> searchInLDAPSchema(LdapTemplate template,String[] returnAttributes,final RootDSE rootDSE,final List<String> ldapServerUrls,StringBuilder errorString){  try {    String schemaDN=rootDSE.getSchemaNamingContext();    _log.debug("Searching in LDAP schema DN {} ",schemaDN);    @SuppressWarnings("unchecked") List<List<String>> attributeList=template.search(schemaDN,"(objectclass=*)",SearchControls.OBJECT_SCOPE,returnAttributes,new LDAPSchemaContextMapper());    if (CollectionUtils.isEmpty(attributeList)) {      errorString.append(MessageFormat.format("The attributes {0} could not be found in LDAP schema {1} at server {2}",returnAttributes.toString(),schemaDN,ldapServerUrls.toString()));    }    return attributeList;  } catch (  CommunicationException e) {    errorString.append(MessageFormat.format("Connection to LDAP server {0} failed during search for attribute {1}. LDAP error: {2}",ldapServerUrls.toString(),returnAttributes.toString(),stripNonPrintableCharacters(e.getMessage())));    return null;  }catch (  Exception e) {    errorString.append(MessageFormat.format("Exception during attribute {0} search against server {1} failed because of LDAP error: {2}",returnAttributes.toString(),ldapServerUrls.toString(),stripNonPrintableCharacters(e.getMessage())));    return null;  }}  }
class C{  public void fireControlerIterationStartsEvent(final int iteration){  IterationStartsEvent event=new IterationStartsEvent(this.controler,iteration);  IterationStartsListener[] listener=this.coreListenerList.getListeners(IterationStartsListener.class);  for (  IterationStartsListener aListener : listener) {    log.info("calling notifyIterationStarts on " + aListener.getClass().getCanonicalName());    aListener.notifyIterationStarts(event);  }  listener=this.listenerList.getListeners(IterationStartsListener.class);  for (  IterationStartsListener aListener : listener) {    log.info("calling notifyIterationStarts on " + aListener.getClass().getCanonicalName());    aListener.notifyIterationStarts(event);  }  log.info("[it." + iteration + "] all ControlerIterationStartsListeners called.");}  }
class C{  protected final void copyAttributes(final int nodeID,SerializationHandler handler) throws SAXException {  for (int current=getFirstAttributeIdentity(nodeID); current != DTM.NULL; current=getNextAttributeIdentity(current)) {    int eType=_exptype2(current);    copyAttribute(current,eType,handler);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, rows, cols;  int progress=0;  double z, zN1, zN2, noData, outputNoData;  int[] dX=new int[]{0,0,-1,1};  int[] dY=new int[]{-1,1,0,0};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  boolean performLineThinning=Boolean.parseBoolean(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    outputNoData=-32768;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setNoDataValue(outputNoData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setZUnits("dimensionless");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          zN1=DEM.getValue(row + dY[0],col + dX[0]);          zN2=DEM.getValue(row + dY[1],col + dX[1]);          if ((zN1 != noData) && (zN2 != noData) && (zN1 > z)&& (zN2 > z)) {            output.setValue(row,col,1);          } else {            zN1=DEM.getValue(row + dY[2],col + dX[2]);            zN2=DEM.getValue(row + dY[3],col + dX[3]);            if ((zN1 != noData) && (zN2 != noData) && (zN1 > z)&& (zN2 > z)) {              output.setValue(row,col,1);            }          }        } else {          output.setValue(row,col,outputNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    if (performLineThinning) {      long counter=0;      int loopNum=0;      int i, a;      dX=new int[]{1,1,1,0,-1,-1,-1,0};      dY=new int[]{-1,0,1,1,1,0,-1,-1};      int[][] elements={{6,7,0,4,3,2},{7,0,1,3,5},{0,1,2,4,5,6},{1,2,3,5,7},{2,3,4,6,7,0},{3,4,5,7,1},{4,5,6,0,1,2},{5,6,7,1,3}};      double[][] vals={{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1}};      double[] neighbours=new double[8];      boolean patternMatch=false;      do {        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        counter=0;        for (row=0; row < rows; row++) {          for (col=0; col < cols; col++) {            z=output.getValue(row,col);            if (z > 0 && z != noData) {              for (i=0; i < 8; i++) {                neighbours[i]=output.getValue(row + dY[i],col + dX[i]);              }              for (a=0; a < 8; a++) {                patternMatch=true;                for (i=0; i < elements[a].length; i++) {                  if (neighbours[elements[a][i]] != vals[a][i]) {                    patternMatch=false;                  }                }                if (patternMatch) {                  output.setValue(row,col,0);                  counter++;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      } while (counter > 0);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static boolean parseStringifiedExpression(PsiBuilder b,int l){  assert b instanceof PerlBuilder;  boolean oldState=((PerlBuilder)b).setStringify(true);  boolean r=PerlParserImpl.expr(b,l,-1);  ((PerlBuilder)b).setStringify(oldState);  return r;}  }
class C{  protected boolean shouldEvaluate(Element element){  return ((((HTMLElement)element).getTagId() != HTMLElement.TAG_UNSUPPORTED) || (!element.getTagName().equalsIgnoreCase("script")));}  }
class C{  public void addRoad(Road road){  roads.addElement(road);}  }
class C{  public int size(){  assert (this.index != null) : "index == null; closeDate=" + this.closeDate + ", now="+ new Date();  if (this.index == null) {    log.severe("this.index == null in size(); closeDate=" + this.closeDate + ", now="+ new Date()+ this.heapFile == null ? "" : (" file = " + this.heapFile.toString()));    return 0;  }  return (this.index == null) ? 0 : this.index.size();}  }
class C{  protected void closeAllActivities() throws Exception {  try {    for (int i=0; i < 20; i++) {      pressBack();      Thread.sleep(100);    }  } catch (  NoActivityResumedException|InterruptedException e) {  }}  }
class C{  public GitlabLabel updateLabel(Serializable projectId,String name,String newName,String newColor) throws IOException {  String tailUrl=GitlabProject.URL + "/" + projectId+ GitlabLabel.URL;  GitlabHTTPRequestor requestor=retrieve().method("PUT");  requestor.with("name",name);  if (newName != null) {    requestor.with("new_name",newName);  }  if (newColor != null) {    requestor=requestor.with("color",newColor);  }  return requestor.to(tailUrl,GitlabLabel.class);}  }
class C{  public void copyRunningConfigToStartupFabric() throws NetworkDeviceControllerException {  _log.info(MessageFormat.format("Host: {0}, Port: {1} - BEGIN copyRunningConfigToStartupFabric",new Object[]{getSession().getSession().getHost(),getSession().getSession().getPort()}));  if (!inConfigMode) {    throw NetworkDeviceControllerException.exceptions.mdsDeviceNotInConfigMode();  }  if (lastPrompt != SSHPrompt.MDS_CONFIG) {    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedLastPrompt(lastPrompt.toString(),SSHPrompt.MDS_CONFIG.toString());  }  SSHPrompt[] prompts={SSHPrompt.MDS_CONFIG,SSHPrompt.MDS_CONTINUE_QUERY};  StringBuilder buf=new StringBuilder();  String payload=MDSDialogProperties.getString("MDSDialog.copyRunningConfigToStartupFabric.cmd");  lastPrompt=sendWaitFor(payload,defaultTimeout,prompts,buf);  if (lastPrompt == SSHPrompt.MDS_CONTINUE_QUERY) {    payload=MDSDialogProperties.getString("MDSDialog.copyRunningConfigToStartupFabric.y.cmd");    SSHPrompt[] prompts2={SSHPrompt.MDS_CONFIG};    buf=new StringBuilder();    lastPrompt=sendWaitFor(payload,defaultTimeout,prompts2,buf);    String[] lines=getLines(buf);    String[] regex={MDSDialogProperties.getString("MDSDialog.copyRunningConfigToStartupFabric.100Percent.match")};    String[] groups=new String[2];    boolean done=false;    for (    String line : lines) {      int index=match(line,regex,groups);switch (index) {case 0:        done=true;      break;  }}if (!done) {  _log.error("Copy running-config to startup-config fabric did not complete... trying non-fabric version");  copyRunningConfigToStartup();}}_log.info(MessageFormat.format("Host: {0}, Port: {1} - END copyRunningConfigToStartupFabric",new Object[]{getSession().getSession().getHost(),getSession().getSession().getPort()}));}  }
class C{  @Override public void combine(double[] coords,Object[] vertexData,float[] weight,Object[] outData){  outData[0]=coords;}  }
class C{  public void forceRoll(){  diskStore.forceRoll();}  }
class C{  public static String makeLogTag(Class cls){  return makeLogTag(cls.getSimpleName());}  }
class C{  public UpdateStructureDataDetails clone(){  UpdateStructureDataDetails result=new UpdateStructureDataDetails();  result.NodeId=NodeId;  result.PerformInsertReplace=PerformInsertReplace;  result.UpdateValues=UpdateValues == null ? null : UpdateValues.clone();  return result;}  }
class C{  private HashMap readFault() throws IOException {  HashMap map=new HashMap();  int code=read();  for (; code > 0 && code != 'Z'; code=read()) {    _offset--;    Object key=readObject();    Object value=readObject();    if (key != null && value != null)     map.put(key,value);  }  if (code != 'Z')   throw expect("fault",code);  return map;}  }
class C{  public JmxManager(String host,int registryPort,String serviceName){  this(host,registryPort + 1,registryPort,serviceName);}  }
class C{  @Override public int calculateBattleValue(){  if (useManualBV) {    return manualBV;  }  return calculateBattleValue(false,false);}  }
class C{  private void logToast(String str){  Toast.makeText(activity,str,Toast.LENGTH_LONG).show();}  }
