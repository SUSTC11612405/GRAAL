class C{  private String findIDPMetaAlias(String idpEntityID,String spEntityID,String realm,String protocol){  try {    IDFFMetaManager idffManager=new IDFFMetaManager(null);    List hostedIdps=idffManager.getAllHostedIdentityProviderIDs(realm);    if ((hostedIdps == null) || hostedIdps.isEmpty()) {      return null;    }    CircleOfTrustManager cotManager=new CircleOfTrustManager();    Set cots=cotManager.getAllActiveCirclesOfTrust(realm);    int num=hostedIdps.size();    for (int i=0; i < num; i++) {      String idpId=(String)hostedIdps.get(i);      Iterator it=cots.iterator();      while (it.hasNext()) {        String cotName=(String)it.next();        Set providers=cotManager.listCircleOfTrustMember(realm,cotName,SingleLogoutManager.IDFF);        if ((providers == null) || !providers.contains(idpId)) {          continue;        }        providers=cotManager.listCircleOfTrustMember(realm,cotName,protocol);        if ((providers == null) || !providers.contains(idpEntityID)) {          continue;        }        if ((spEntityID != null) && !providers.contains(spEntityID)) {          continue;        }        if (SingleLogoutManager.debug.messageEnabled()) {          SingleLogoutManager.debug.message("IDFFSingleLogoutHandler.findIDPMetaAlias : " + "found IDP " + idpId + " in COT "+ cotName);        }        IDPDescriptorConfigElement config=idffManager.getIDPDescriptorConfig(realm,idpId);        return config.getMetaAlias();      }    }  } catch (  Exception e) {    SingleLogoutManager.debug.error("IDFFSingleLogoutHandler." + "findIDPMetaAlias",e);  }  return null;}  }
class C{  public static void resetRecipes(){  server.resetRecipes();}  }
class C{  private void processModifyDN(DN oldEntryDN,DN newEntryDN){  for (  DN baseDN : getBaseDNsToSearch()) {    searchBaseDN(baseDN,oldEntryDN,newEntryDN);  }}  }
class C{  public synchronized void deselect(int index){  ListPeer peer=(ListPeer)this.peer;  if (peer != null) {    if (isMultipleMode() || (getSelectedIndex() == index)) {      peer.deselect(index);    }  }  for (int i=0; i < selected.length; i++) {    if (selected[i] == index) {      int newsel[]=new int[selected.length - 1];      System.arraycopy(selected,0,newsel,0,i);      System.arraycopy(selected,i + 1,newsel,i,selected.length - (i + 1));      selected=newsel;      return;    }  }}  }
class C{  static <T>ReplayPromise<Void> anyReplay(final Duration timeout,long time,final List<Promise<T>> promises){  return new AnyReplayPromise(timeout,time,promises.toArray(new Promise[promises.size()]));}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.nist.gov";  String qualifiedName="prefix:newAttr";  Document doc;  Node arg;  NodeList elementList;  Node testAddress;  NamedNodeMap attributes;  Node retnode;  String value;  Node setNode;  doc=(Document)load("staffNS",true);  arg=doc.createAttributeNS(namespaceURI,qualifiedName);  arg.setNodeValue("newValue");  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(0);  attributes=testAddress.getAttributes();  setNode=attributes.setNamedItemNS(arg);  retnode=attributes.getNamedItemNS(namespaceURI,"newAttr");  value=retnode.getNodeValue();  assertEquals("throw_Equals","newValue",value);}  }
class C{  public boolean isRoot(){  return getParent() == null;}  }
class C{  public DoNotCacheCondition(){}  }
class C{  public Lyrics3v2Field(ByteBuffer byteBuffer) throws InvalidTagException {  this.read(byteBuffer);}  }
class C{  public Tag read(RandomAccessFile raf) throws CannotReadException, IOException {  logger.config("Starting to read ogg vorbis tag from file:");  byte[] rawVorbisCommentData=readRawPacketData(raf);  VorbisCommentTag tag=vorbisCommentReader.read(rawVorbisCommentData,true);  logger.fine("CompletedReadCommentTag");  return tag;}  }
class C{  public boolean isBorderPainted(){  return paintBorder;}  }
class C{  @RequestMapping(value="/json",method=RequestMethod.GET,produces=MediaTypes.JSON_UTF_8) public User json(String name){  User user=new User();  user.setName(name);  user.setAge(23);  return user;}  }
class C{  public Response createResponse(int statusCode,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards,byte[] content,ContentTypeHeader contentType) throws ParseException {  if (callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null || content == null || contentType == null)   throw new NullPointerException("Null params ");  SIPResponse sipResponse=new SIPResponse();  sipResponse.setStatusCode(statusCode);  sipResponse.setCallId(callId);  sipResponse.setCSeq(cSeq);  sipResponse.setFrom(from);  sipResponse.setTo(to);  sipResponse.setVia(via);  sipResponse.setMaxForwards(maxForwards);  sipResponse.setHeader((ContentType)contentType);  sipResponse.setMessageContent(content);  if (userAgent != null) {    sipResponse.setHeader(userAgent);  }  return sipResponse;}  }
class C{  public void testCertStore10() throws InvalidAlgorithmParameterException, NoSuchAlgorithmException, NoSuchProviderException {  if (!initParams()) {    return;  }  CertStore certS;  for (int i=0; i < dValid.length; i++) {    certS=CertStore.getInstance(dValid[i],dParams,dName);    assertEquals("Incorrect type",certS.getType(),dValid[i]);    certS.getCertStoreParameters();  }}  }
class C{  public void testToStringZeroScale(){  String a="-123809648392384754573567356745735635678902957849027687876782870";  BigDecimal aNumber=new BigDecimal(new BigInteger(a));  String result="-123809648392384754573567356745735635678902957849027687876782870";  assertTrue("incorrect value",aNumber.toString().equals(result));}  }
class C{  public void mouseExited(MouseEvent e){}  }
class C{  public Builder addActions(Map<String,Boolean> actions){  this.actions.putAll(actions);  return this;}  }
class C{  private void addSubtreeGroupTestEntries() throws Exception {  TestCaseUtils.addEntries("dn: ou=people,dc=example,dc=com","objectClass: organizationalUnit","objectClass: top","ou: people","","dn: uid=test1,ou=people,dc=example,dc=com","objectClass: person","objectClass: inetOrgPerson","objectClass: organizationalPerson","objectClass: top","uid: test1","cn: test","sn: test","userPassword: password","","dn: ou=groups,dc=example,dc=com","objectClass: organizationalUnit","objectClass: top","ou: groups","","dn: cn=group1,ou=groups,dc=example,dc=com","objectClass: groupOfNames","objectClass: top","member: uid=test1,ou=people,dc=example,dc=com","cn: group1","","dn: cn=group2,ou=groups,dc=example,dc=com","objectClass: groupOfNames","objectClass: top","member: uid=test1,ou=people,dc=example,dc=com","cn: group2","","dn: ou=moregroups,dc=example,dc=com","objectClass: organizationalUnit","objectClass: top","ou: moregroups","","dn: cn=group1,ou=moregroups,dc=example,dc=com","objectClass: groupOfNames","objectClass: top","member: uid=test1,ou=people,dc=example,dc=com","cn: group1");}  }
class C{  public WritableRaster createWritableTranslatedChild(int childMinX,int childMinY){  return createWritableChild(minX,minY,width,height,childMinX,childMinY,null);}  }
class C{  public DsnNetClass(String p_name,String p_trace_clearance_class,Collection<String> p_net_list,Collection<DsnRule> p_rules,Collection<DsnRuleLayer> p_layer_rules,Collection<String> p_use_via,Collection<String> p_use_layer,String p_via_rule,boolean p_shove_fixed,boolean p_pull_tight,double p_min_trace_length,double p_max_trace_length){  name=p_name;  trace_clearance_class=p_trace_clearance_class;  net_list=p_net_list;  rules=p_rules;  layer_rules=p_layer_rules;  use_via=p_use_via;  use_layer=p_use_layer;  via_rule=p_via_rule;  shove_fixed=p_shove_fixed;  pull_tight=p_pull_tight;  min_trace_length=p_min_trace_length;  max_trace_length=p_max_trace_length;}  }
class C{  public ImportEntityViewBean(){  super("ImportEntity");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  createPageTitleModel();  createPropertyModel();  registerChildren();}  }
class C{  public BasicStroke(){  this(1.0f,CAP_SQUARE,JOIN_MITER,10.0f,null,0.0f);}  }
class C{  public void entering(String sourceClass,String sourceMethod){  logp(Level.FINER,sourceClass,sourceMethod,"ENTRY");}  }
class C{  public boolean isCanceled(){  if (pane == null)   return false;  Object v=pane.getValue();  return ((v != null) && (cancelOption.length == 1) && (v.equals(cancelOption[0])));}  }
class C{  public boolean orgTemplateExists(String serviceName) throws AMException, SSOException {  ServiceConfig sc=AMServiceUtils.getOrgConfig(token,entryDN,serviceName);  return (sc != null);}  }
class C{  public final PlaVectorInt negate(){  return new PlaVectorInt(-v_x,-v_y);}  }
class C{  public static boolean entryExists(DN entryDN) throws DirectoryException {  return DirectoryServer.entryExists(entryDN);}  }
class C{  public static void writeVMState(PrintWriter writer,int mode) throws Exception {  SortedMap<String,MemoryPoolMXBean> memoryPoolMBeans=new TreeMap<>();  for (  MemoryPoolMXBean mbean : ManagementFactory.getMemoryPoolMXBeans()) {    String sortKey=mbean.getType() + ":" + mbean.getName();    memoryPoolMBeans.put(sortKey,mbean);  }  if (mode == 0) {    writer.print("<h1>JVM</h1>");    writer.print("<p>");    writer.print(" Free memory: ");    writer.print(formatSize(Long.valueOf(Runtime.getRuntime().freeMemory()),true));    writer.print(" Total memory: ");    writer.print(formatSize(Long.valueOf(Runtime.getRuntime().totalMemory()),true));    writer.print(" Max memory: ");    writer.print(formatSize(Long.valueOf(Runtime.getRuntime().maxMemory()),true));    writer.print("</p>");    writer.write("<table border=\"0\"><thead><tr><th>Memory Pool</th><th>Type</th><th>Initial</th><th>Total</th><th>Maximum</th><th>Used</th></tr></thead><tbody>");    for (    MemoryPoolMXBean memoryPoolMBean : memoryPoolMBeans.values()) {      MemoryUsage usage=memoryPoolMBean.getUsage();      writer.write("<tr><td>");      writer.print(memoryPoolMBean.getName());      writer.write("</td><td>");      writer.print(memoryPoolMBean.getType());      writer.write("</td><td>");      writer.print(formatSize(Long.valueOf(usage.getInit()),true));      writer.write("</td><td>");      writer.print(formatSize(Long.valueOf(usage.getCommitted()),true));      writer.write("</td><td>");      writer.print(formatSize(Long.valueOf(usage.getMax()),true));      writer.write("</td><td>");      writer.print(formatSize(Long.valueOf(usage.getUsed()),true));      if (usage.getMax() > 0) {        writer.write(" (" + (usage.getUsed() * 100 / usage.getMax()) + "%)");      }      writer.write("</td></tr>");    }    writer.write("</tbody></table>");  } else   if (mode == 1) {    writer.write("<jvm>");    writer.write("<memory");    writer.write(" free='" + Runtime.getRuntime().freeMemory() + "'");    writer.write(" total='" + Runtime.getRuntime().totalMemory() + "'");    writer.write(" max='" + Runtime.getRuntime().maxMemory() + "'/>");    for (    MemoryPoolMXBean memoryPoolMBean : memoryPoolMBeans.values()) {      MemoryUsage usage=memoryPoolMBean.getUsage();      writer.write("<memorypool");      writer.write(" name='" + memoryPoolMBean.getName() + "'");      writer.write(" type='" + memoryPoolMBean.getType() + "'");      writer.write(" usageInit='" + usage.getInit() + "'");      writer.write(" usageCommitted='" + usage.getCommitted() + "'");      writer.write(" usageMax='" + usage.getMax() + "'");      writer.write(" usageUsed='" + usage.getUsed() + "'/>");    }    writer.write("</jvm>");  }}  }
class C{  public void paintScrollPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  protected void trimEdits(int from,int to){  if (from <= to) {    for (int i=to; from <= i; i--) {      UndoableEdit e=edits.elementAt(i);      e.die();      edits.removeElementAt(i);    }    if (indexOfNextAdd > to) {      indexOfNextAdd-=to - from + 1;    } else     if (indexOfNextAdd >= from) {      indexOfNextAdd=from;    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatadeletedataexceedslength.class,args);}  }
class C{  public PluginResult.Startup invokeStartupPlugins(){  PluginResult.Startup result=null;  for (  DirectoryServerPlugin p : startupPlugins) {    try {      result=p.doStartup();    } catch (    Exception e) {      logger.traceException(e);      LocalizableMessage message=ERR_PLUGIN_STARTUP_PLUGIN_EXCEPTION.get(p.getPluginEntryDN(),stackTraceToSingleLineString(e));      return PluginResult.Startup.stopStartup(message);    }    if (result == null) {      LocalizableMessage message=ERR_PLUGIN_STARTUP_PLUGIN_RETURNED_NULL.get(p.getPluginEntryDN());      logger.error(message);      return PluginResult.Startup.stopStartup(message);    } else     if (!result.continueProcessing()) {      logger.error(ERR_PLUGIN_STARTUP_PLUGIN_FAIL_ABORT,p.getPluginEntryDN(),result.getErrorMessage(),result.getErrorMessage().ordinal());      return result;    }  }  if (result == null) {    result=PluginResult.Startup.continueStartup();  }  return result;}  }
class C{  protected Request createRequest(String method,AddressFactory addressFactory,HeaderFactory headerFactory,MessageFactory messageFactory,SipProvider srcProvider,SipProvider dstProvider,String contentType,String contentSubType,Object content) throws Exception {  ListeningPoint srclp=srcProvider.getListeningPoints()[0];  SipURI srcSipURI=addressFactory.createSipURI(null,srclp.getIPAddress());  srcSipURI.setPort(srclp.getPort());  srcSipURI.setTransportParam(srclp.getTransport());  ListeningPoint dstlp=dstProvider.getListeningPoints()[0];  SipURI dstSipURI=addressFactory.createSipURI(null,dstlp.getIPAddress());  dstSipURI.setPort(dstlp.getPort());  dstSipURI.setTransportParam(dstlp.getTransport());  CallIdHeader callId=srcProvider.getNewCallId();  callId=headerFactory.createCallIdHeader(callId.getCallId());  CSeqHeader cSeq=headerFactory.createCSeqHeader(1L,method);  Address fromAddress=addressFactory.createAddress(srcSipURI);  FromHeader from=headerFactory.createFromHeader(fromAddress,Integer.toString(srcProvider.hashCode()));  Address toAddress=addressFactory.createAddress(dstSipURI);  ToHeader to=headerFactory.createToHeader(toAddress,null);  ContactHeader contact=headerFactory.createContactHeader(fromAddress);  List via=new LinkedList();  ViaHeader viaHeader=headerFactory.createViaHeader(srclp.getIPAddress(),srclp.getPort(),srclp.getTransport(),"z9hG4bK" + Long.toString(System.currentTimeMillis()));  via.add(viaHeader);  MaxForwardsHeader maxForwards=headerFactory.createMaxForwardsHeader(3);  Request request=messageFactory.createRequest(dstSipURI,method,callId,cSeq,from,to,via,maxForwards);  request.addHeader(contact);  if (contentType != null && contentSubType != null && content != null) {    ContentTypeHeader contentTypeHdr=headerFactory.createContentTypeHeader(contentType,contentSubType);    request.setContent(content,contentTypeHdr);  }  addStatus(headerFactory,request);  return request;}  }
class C{  public void testEqualsUnequal2(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="92948782094488478231212478987482988429808779810457634781384756794987";  int bScale=13;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  assertFalse(aNumber.equals(bNumber));}  }
class C{  public static TypeReference newTypeParameterReference(int sort,int paramIndex){  return new TypeReference((sort << 24) | (paramIndex << 16));}  }
class C{  public Permission addParent(String name,boolean value){  PluginManager pm=Bukkit.getServer().getPluginManager();  String lname=name.toLowerCase(java.util.Locale.ENGLISH);  Permission perm=pm.getPermission(lname);  if (perm == null) {    perm=new Permission(lname);    pm.addPermission(perm);  }  addParent(perm,value);  return perm;}  }
class C{  public void resetSpamCheck(long currentWaitPeriod){  this.currentWaitPeriod=currentWaitPeriod;  this.lastSendTime=Time.currentTimeMillis();  spamStrike=0;}  }
class C{  public Paragraph add(String text){  return add(new Text(text));}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element root;  String rootName;  doc=(Document)load("staff",false);  root=doc.getDocumentElement();  rootName=root.getNodeName();  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("svgRootNode","svg",rootName);  } else {    assertEquals("documentGetRootNodeAssert","staff",rootName);  }}  }
class C{  public void testLongValuePositive2(){  byte aBytes[]={12,56,100,18,-105,34,-18,45};  long result=880563758158769709L;  long aNumber=new BigInteger(aBytes).longValue();  assertTrue(aNumber == result);}  }
class C{  public void putAttribute(AttributeType attributeType,List<Attribute> attributeList){  attachment=null;  List<Attribute> attrList=userAttributes.get(attributeType);  if (attrList != null) {    userAttributes.put(attributeType,attributeList);    return;  }  attrList=operationalAttributes.get(attributeType);  if (attrList != null) {    operationalAttributes.put(attributeType,attributeList);    return;  }  putAttributes(attributeType,attributeList);}  }
class C{  public static void write(File file,CharSequence data,String encoding,boolean append) throws IOException {  write(file,data,Charsets.toCharset(encoding),append);}  }
class C{  public SimpleCountingIdlingResource(String resourceName){  mResourceName=checkNotNull(resourceName);}  }
class C{  protected KeyListener createKeyListener(){  return getHandler();}  }
class C{  public ManagedObjectNotFoundException(){  super(ERR_MANAGED_OBJECT_NOT_FOUND_EXCEPTION.get());}  }
class C{  private void initiateIDPSingleLogout(String sessionIndex,String metaAlias,String realm,String binding,NameID nameID,String spEntityID,Map paramsMap) throws SAML2MetaException, SAML2Exception, SessionException {  SPSSODescriptorElement spsso=sm.getSPSSODescriptor(realm,spEntityID);  if (spsso == null) {    String[] data={spEntityID};    LogUtil.error(Level.INFO,LogUtil.SP_METADATA_ERROR,data,null);    throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));  }  List<EndpointType> slosList=spsso.getSingleLogoutService();  String location=LogoutUtil.getSLOServiceLocation(slosList,SAML2Constants.SOAP);  if (location == null) {    if (debug.messageEnabled()) {      debug.message("IDPSessionListener.initiateIDPSingleLogout(): Unable to synchronize sessions with SP \"" + spEntityID + "\" since the SP does not have SOAP SLO endpoint specified in its metadata");    }    return;  }  SPSSOConfigElement spConfig=sm.getSPSSOConfig(realm,spEntityID);  LogoutUtil.doLogout(metaAlias,spEntityID,slosList,null,binding,null,sessionIndex,nameID,null,null,paramsMap,spConfig);}  }
class C{  @Override public String toString(){  final StringBuilder buffer=new StringBuilder();  toString(buffer);  return buffer.toString();}  }
class C{  public static void printWrappedText(final PrintStream stream,final String message){  if (stream != null && message != null && !message.isEmpty()) {    stream.println(wrapText(message,MAX_LINE_WIDTH));  }}  }
class C{  public GrayFilter(boolean b,int p){  brighter=b;  percent=p;  canFilterIndexColorModel=true;}  }
class C{  public void key_typed_action(char p_key_char){  if (board_is_read_only)   return;  StateInteractive return_state=interactive_state.key_typed(p_key_char);  if (return_state != null && return_state != interactive_state) {    set_interactive_state(return_state);    board_panel.board_frame.hilight_selected_button();    repaint();  }}  }
class C{  public void fireGenerateEvent(int eventType,String data){}  }
class C{  public SpinnerListModel(){  this(new Object[]{"empty"});}  }
class C{  protected void initializeGlobalArguments(Collection<Argument> args,ArgumentGroup argGroup) throws ArgumentException {  for (  Argument arg : args) {    addGlobalArgument(arg,argGroup);  }  setFilePropertiesArgument(propertiesFileArg);}  }
class C{  public byte[] writeByteArray(){  String value=getValue().toString();  byte[] data;  try {    if (TagOptionSingleton.getInstance().isRemoveTrailingTerminatorOnWrite()) {      if (value.length() > 0) {        if (value.charAt(value.length() - 1) == '\0') {          value=value.substring(0,value.length() - 1);        }      }    }    String charSetName=getTextEncodingCharSet();    if (charSetName.equals(TextEncoding.CHARSET_UTF_16)) {      charSetName=TextEncoding.CHARSET_UTF_16_LE_ENCODING_FORMAT;      CharsetEncoder encoder=Charset.forName(charSetName).newEncoder();      encoder.onMalformedInput(CodingErrorAction.IGNORE);      encoder.onUnmappableCharacter(CodingErrorAction.IGNORE);      ByteBuffer bb=encoder.encode(CharBuffer.wrap('\ufeff' + value));      data=new byte[bb.limit()];      bb.get(data,0,bb.limit());    } else {      CharsetEncoder encoder=Charset.forName(charSetName).newEncoder();      ByteBuffer bb=encoder.encode(CharBuffer.wrap(value));      encoder.onMalformedInput(CodingErrorAction.IGNORE);      encoder.onUnmappableCharacter(CodingErrorAction.IGNORE);      data=new byte[bb.limit()];      bb.get(data,0,bb.limit());    }  } catch (  CharacterCodingException ce) {    logger.severe(ce.getMessage());    throw new RuntimeException(ce);  }  setSize(data.length);  return data;}  }
class C{  protected void layoutMinorAxis(int targetSpan,int axis,int[] offsets,int[] spans){  updateGrid();  int n=getRowCount();  for (int i=0; i < n; i++) {    RowView row=getRow(i);    row.layoutChanged(axis);  }  layoutColumns(targetSpan,columnOffsets,columnSpans,columnRequirements);  super.layoutMinorAxis(targetSpan,axis,offsets,spans);}  }
class C{  boolean deleteRecord(WriteableTransaction txn,TreeName indexTreeName) throws StorageRuntimeException {  checkNotNull(txn,"txn must not be null");  checkNotNull(indexTreeName,"indexTreeName must not be null");  return txn.delete(getName(),keyForIndex(indexTreeName));}  }
class C{  public synchronized void okToUseGui(){  if (!okToUseGui) {    okToUseGui=true;synchronized (children) {      for (Iterator i=children.keySet().iterator(); i.hasNext(); ) {        Visibility v=getChildVisibility(i.next());        if (v != null)         v.okToUseGui();      }    }  }}  }
class C{  public static void sort(long[] a){  doSort(a,0,a.length - 1);}  }
class C{  @Override public String toString(){  return temporal.toString();}  }
class C{  @Override public Foo fetchByUuid_First(String uuid,OrderByComparator<Foo> orderByComparator){  List<Foo> list=findByUuid(uuid,0,1,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiTextUI();  return MultiLookAndFeel.createUIs(mui,((MultiTextUI)mui).uis,a);}  }
class C{  public void testMaxLess(){  byte aBytes[]={45,91,3,-15,35,26,3,91};  byte bBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=1;  int bSign=1;  byte rBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.max(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertTrue("incorrect sign",result.signum() == 1);}  }
class C{  public void insert_long(int value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_long",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    $self.insert_long(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void syncBeginTagFile(){  saveNestedVariables();}  }
class C{  public ArtResult autoroute(BrdItem p_item,IteraSettings p_settings,int p_via_costs,ThreadStoppable p_stoppable_thread){  if (!(p_item instanceof BrdConnectable)) {    userPrintln(classname + "autoroute p_item NOT connectable " + p_item);    return ArtResult.ALREADY_CONNECTED;  }  if (p_item.net_count() == 0) {    userPrintln(classname + "autoroute p_item has NO nets " + p_item);    return ArtResult.ALREADY_CONNECTED;  }  if (p_item.net_count() > 1) {    userPrintln(classname + "autoroute p_item net_count() > 1 NOT possible " + p_item);    return ArtResult.ALREADY_CONNECTED;  }  int route_net_no=p_item.get_net_no(0);  ArtControl ctrl_settings=new ArtControl(this,route_net_no,p_settings,p_via_costs,p_settings.autoroute_settings.get_trace_cost_arr());  ctrl_settings.stop_remove_fanout_vias=false;  Set<BrdItem> route_start_set=p_item.get_connected_set(route_net_no);  RuleNet route_net=brd_rules.nets.get(route_net_no);  if (route_net != null && route_net.contains_plane()) {    for (    BrdItem curr_item : route_start_set) {      if (curr_item instanceof board.items.BrdAreaConduction) {        return ArtResult.ALREADY_CONNECTED;      }    }  }  Set<BrdItem> route_dest_set=p_item.get_unconnected_set(route_net_no);  if (route_dest_set.size() == 0) {    return ArtResult.ALREADY_CONNECTED;  }  TimeLimitStoppable t_limit=new TimeLimitStoppable(10,p_stoppable_thread);  ArtEngine a_engine=new ArtEngine(this,p_item.get_net_no(0),ctrl_settings.trace_clearance_idx,t_limit);  SortedSet<BrdItem> ripped_item_list=new TreeSet<BrdItem>();  ArtResult result;  try {    result=a_engine.autoroute_connection(route_start_set,route_dest_set,ctrl_settings,ripped_item_list);  } catch (  Exception exc) {    userPrintln(classname + "autoroute_connection ",exc);    result=ArtResult.EXCEPTION;  }  if (result == ArtResult.ROUTED) {    changed_area_optimize(NetNosList.EMPTY,p_settings.trace_pullt_min_move,ctrl_settings.trace_costs,t_limit);  }  return result;}  }
class C{  public TypeMismatch(String reason){  super(reason);}  }
class C{  public static <T extends Object & Comparable<? super T>>T max(Collection<? extends T> coll){  Iterator<? extends T> i=coll.iterator();  T candidate=i.next();  while (i.hasNext()) {    T next=i.next();    if (next.compareTo(candidate) > 0)     candidate=next;  }  return candidate;}  }
class C{  public void updateApps(List<AppInfo> apps){  mApps.updateApps(apps);}  }
class C{  public static void main(final String[] args){  if (args.length != 2) {    System.err.println("Usage: host port");    System.err.println("For example: localhost 1389");    System.exit(1);  }  final String host=args[0];  final int port=Integer.parseInt(args[1]);  final LDAPConnectionFactory factory=new LDAPConnectionFactory(host,port);  try (Connection connection=factory.getConnection()){    checkSupportedControls(connection);    final String user="cn=Directory Manager";    final char[] password="password".toCharArray();    connection.bind(user,password);    useAuthorizationIdentityRequestControl(connection);  } catch (  final LdapException e) {    System.err.println(e.getMessage());    System.exit(e.getResult().getResultCode().intValue());    return;  }}  }
class C{  public void insert_val(java.io.Serializable value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_val",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    $self.insert_val(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.TokenIssuerNameElement createTokenIssuerNameElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.TokenIssuerNameElementImpl();}  }
class C{  private void try_correct_net(BrdItem p_item){  if (!(p_item instanceof BrdTracep))   return;  BrdTracep curr_trace=(BrdTracep)p_item;  Set<BrdItem> contacts=curr_trace.get_normal_contacts(curr_trace.corner_first(),true);  contacts.addAll(curr_trace.get_normal_contacts(curr_trace.corner_last(),true));  int corrected_net_no=0;  for (  BrdItem curr_contact : contacts) {    if (curr_contact.net_count() == 1) {      corrected_net_no=curr_contact.get_net_no(0);      break;    }  }  if (corrected_net_no != 0) {    p_item.set_net_no(corrected_net_no);  }}  }
class C{  public static boolean isTime(final Class type){  return Time.class.isAssignableFrom(type);}  }
class C{  public String encode(String pString){  return soundex(pString);}  }
class C{  public WebRuleSet(String prefix,boolean fragment){  super();  this.namespaceURI=null;  this.prefix=prefix;  this.fragment=fragment;  if (fragment) {    fullPrefix=prefix + "web-fragment";  } else {    fullPrefix=prefix + "web-app";  }  absoluteOrdering=new AbsoluteOrderingRule(fragment);  relativeOrdering=new RelativeOrderingRule(fragment);}  }
class C{  public static final BigInteger[] add_rational_coordinates(BigInteger[] p_first,BigInteger[] p_second){  BigInteger[] result=new BigInteger[3];  if (p_first[2].equals(p_second[2])) {    result[2]=p_first[2];    result[0]=p_first[0].add(p_second[0]);    result[1]=p_first[1].add(p_second[1]);  } else {    result[2]=p_first[2].multiply(p_second[2]);    BigInteger tmp_1=p_first[0].multiply(p_second[2]);    BigInteger tmp_2=p_second[0].multiply(p_first[2]);    result[0]=tmp_1.add(tmp_2);    tmp_1=p_first[1].multiply(p_second[2]);    tmp_2=p_second[1].multiply(p_first[2]);    result[1]=tmp_1.add(tmp_2);  }  return result;}  }
class C{  public Table addCell(String content){  return addCell(new Cell().add(new Paragraph(content)));}  }
class C{  public static List<Control> createShortCircuitControlList(int resultCode,String section){  return newArrayList(createShortCircuitControl(resultCode,section));}  }
class C{  public NoConnectionPendingException(){}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.EmptyType createEmptyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.EmptyTypeImpl();}  }
class C{  public void addSection(String tag,Section section){  this.sections.put(tag,section);  this.sectionViewTypeNumbers.put(tag,viewTypeCount);  viewTypeCount+=VIEW_TYPE_QTY;}  }
class C{  private Map handleLogoutRequest(Element elt,FSLogoutNotification logoutRequest,SOAPMessage msgLogout,HttpServletRequest request,HttpServletResponse response,ProviderDescriptorType hostedProviderDesc,BaseConfigType hostedConfig,String providerAlias,String realm,String hostedEntityId,String hostedRole){  try {    String remoteEntityId=logoutRequest.getProviderId();    ProviderDescriptorType remoteDesc=getRemoteProviderDescriptor(hostedRole,remoteEntityId,realm);    if (remoteDesc == null) {      return null;    }    boolean isIDP=false;    if (hostedRole.equalsIgnoreCase(IFSConstants.SP)) {      isIDP=true;    }    X509Certificate remoteCert=KeyUtil.getVerificationCert(remoteDesc,remoteEntityId,isIDP);    if (!FSServiceUtils.isSigningOn() || verifyRequestSignature(elt,msgLogout,remoteCert)) {      FSUtils.debug.message("Logout Signature successfully verified");      if (providerAlias == null || providerAlias.length() < 1) {        FSUtils.debug.message("Unable to retrieve alias, " + "Hosted Provider Cannot process logout request");        return null;      }      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSSOAPReceiver:handleLogoutRequest: " + "Completed forming request FSLogoutNotification");      }      IDFFMetaManager metaManager=FSUtils.getIDFFMetaManager();      if (metaManager.isTrustedProvider(realm,hostedEntityId,remoteEntityId)) {        String userID=FSLogoutUtil.getUserFromRequest(logoutRequest,realm,hostedEntityId,hostedRole,hostedConfig,providerAlias);        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSSOAPReceiver:handleLogoutRequest" + " found user Id = " + userID);        }        if (hostedRole != null && hostedRole.equalsIgnoreCase(IFSConstants.SP)) {          FederationSPAdapter spAdapter=FSServiceUtils.getSPAdapter(hostedEntityId,hostedConfig);          if (spAdapter != null) {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSSOAPReceiver, " + "call preSingleLogoutProcess, IDP/SOAP");            }            try {              spAdapter.preSingleLogoutProcess(hostedEntityId,request,response,userID,logoutRequest,null,IFSConstants.LOGOUT_IDP_SOAP_PROFILE);            } catch (            Exception e) {              FSUtils.debug.error("preSingleLogoutProcess." + "IDP/SOAP",e);            }          }        }        if (!isUserExists(userID,providerAlias)) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSSOAPReceiver:handleLogoutRequest: User " + "does not exist locally. Finding remotely");          }          List platformList=null;          try {            platformList=SystemConfigurationUtil.getServerList();          } catch (          SystemConfigurationException se) {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSSOAPReceiver:handleLogoutRequest: " + "Couldn't find remote server:",se);            }          }          if (platformList == null) {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSSOAPReceiver:handleLogoutRequest" + "platformList is null");            }            return null;          }          Iterator iter=platformList.iterator();          while (iter.hasNext()) {            String remoteServerURL=(String)iter.next();            StringBuffer tmpremoteURL=new StringBuffer(remoteServerURL);            tmpremoteURL.append(SystemConfigurationUtil.getProperty("com.iplanet.am.services." + "deploymentDescriptor"));            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSSOAPReceiver:handleLogoutRequest" + "remoteServerURL = " + remoteServerURL + " and self serverUrl ="+ FSServiceUtils.getBaseURL());            }            if ((FSServiceUtils.getBaseURL()).equalsIgnoreCase(remoteServerURL.toString())) {              continue;            }            FSAssertionManagerClient amc=new FSAssertionManagerClient(providerAlias,getFullServiceURL(remoteServerURL));            if (amc.isUserExists(userID)) {              if (FSUtils.debug.messageEnabled()) {                FSUtils.debug.message("FSSOAPReceiver:handleLogoutRequest" + "user found here =" + remoteServerURL);              }              StringBuffer remoteURL=new StringBuffer();              remoteURL.append(remoteServerURL.toString()).append(SystemConfigurationUtil.getProperty("com.iplanet.am.services." + "deploymentDescriptor")).append(IFSConstants.SOAP_END_POINT_VALUE).append("/").append(IFSConstants.META_ALIAS).append(providerAlias);              FSSOAPService instSOAP=FSSOAPService.getInstance();              SOAPMessage retSOAPMessage=null;              if (instSOAP != null) {                try {                  if (FSUtils.debug.messageEnabled()) {                    FSUtils.debug.message("Forward logout request to " + remoteURL.toString());                  }                  retSOAPMessage=instSOAP.sendMessage(msgLogout,remoteURL.toString());                  if (retSOAPMessage != null) {                    Map map=new HashMap();                    map.put(MESSAGE,retSOAPMessage);                    if (userID != null) {                      map.put(USERID,userID);                    }                    return map;                  } else {                    return null;                  }                } catch (                SOAPException e) {                  FSUtils.debug.error("FSSOAPException in doSOAPProfile" + " Cannot send request",e);                  return null;                }              } else {                return null;              }            }          }        }        FSServiceManager instService=FSServiceManager.getInstance();        if (instService != null) {          FSPreLogoutHandler logoutHandler=instService.getPreLogoutHandler();          if (logoutHandler != null) {            logoutHandler.setHostedDescriptor(hostedProviderDesc);            logoutHandler.setHostedDescriptorConfig(hostedConfig);            logoutHandler.setHostedEntityId(hostedEntityId);            logoutHandler.setHostedProviderRole(hostedRole);            logoutHandler.setMetaAlias(providerAlias);            logoutHandler.setRealm(realm);            logoutHandler.setRemoteDescriptor(remoteDesc);            logoutHandler.setRemoteEntityId(remoteEntityId);            logoutHandler.setLogoutRequest(logoutRequest);            FSLogoutStatus bProcessStatus=logoutHandler.processSingleLogoutRequest(logoutRequest);            if (bProcessStatus.getStatus().equalsIgnoreCase(IFSConstants.SAML_SUCCESS)) {              MessageFactory factory=MessageFactory.newInstance();              SOAPMessage successSOAP=factory.createMessage();              if (successSOAP != null) {                Map map=new HashMap();                map.put(MESSAGE,successSOAP);                if (userID != null) {                  map.put(USERID,userID);                }                return map;              } else {                return null;              }            } else             if (bProcessStatus.getStatus().equalsIgnoreCase(IFSConstants.SAML_UNSUPPORTED)) {              SOAPMessage retSOAPMessage=soapService.formSOAPError("Server","cannotProcessRequest",null);              if (retSOAPMessage != null) {                Map map=new HashMap();                map.put(MESSAGE,retSOAPMessage);                if (userID != null) {                  map.put(USERID,userID);                }                return map;              } else {                return null;              }            } else {              return null;            }          } else {            FSUtils.debug.error("Unable to get PreLogoutHandler");            FSUtils.debug.error("Cannot process request");            return null;          }        } else {          FSUtils.debug.message("FSServiceManager instance is" + "null. Cannot process logout request");          return null;        }      }      FSUtils.debug.message("Remote provider not in trusted list");      return null;    } else {      FSUtils.debug.error("Logout Signature failed verification");      return null;    }  } catch (  Exception se) {    FSUtils.debug.error("FSSOAPService::handleLogoutRequest failed",se);    return null;  }}  }
class C{  public Object clone() throws CloneNotSupportedException {  try {    return new SessionDescriptionImpl(this);  } catch (  SdpException e) {    throw new CloneNotSupportedException();  }}  }
class C{  public AllowHeader createAllowHeader(String method) throws ParseException {  if (method == null)   throw new NullPointerException("null arg method");  Allow allow=new Allow();  allow.setMethod(method);  return allow;}  }
class C{  public ProxyOutputStream(OutputStream proxy){  super(proxy);}  }
class C{  public String encodeBody(){  return encodeBody(new StringBuilder()).toString();}  }
class C{  protected ListDataListener createListDataListener(){  return getHandler();}  }
class C{  private IdentityServicesFactory(Class clazz){  provider=clazz;}  }
class C{  public String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  public final void addElement(String value){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    String newMap[]=new String[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_map[m_firstFree]=value;  m_firstFree++;}  }
class C{  private void pushRun(int runBase,int runLen){  this.runBase[stackSize]=runBase;  this.runLen[stackSize]=runLen;  stackSize++;}  }
class C{  public ReferredByHeader createReferredByHeader(Address address){  if (address == null)   throw new NullPointerException("null address!");  ReferredBy referredBy=new ReferredBy();  referredBy.setAddress(address);  return referredBy;}  }
class C{  public boolean verifyXMLSignature(java.lang.String xmlString) throws XMLSignatureException {  return verifyXMLSignature(xmlString,null);}  }
class C{  public boolean isAccessToUnderlyingConnectionAllowed(){  return accessToUnderlyingConnectionAllowed;}  }
class C{  @VisibleForTesting static boolean isTextualContent(final ContentTypeHeader contentType){  String type=(contentType.getType() != null ? contentType.getType().toLowerCase() : null);  return contentType.getCharset() != null || (type != null && (TEXT_TYPES.contains(type) || type.startsWith("text/")));}  }
class C{  public String toString(){  return label;}  }
class C{  protected String format(FieldError error){  String code=error.getCode();  String value=error.getValue();  String field=error.getField();  if (FieldError.CODE_INVALID.equals(code))   if (value != null)   return MessageFormat.format(FIELD_INVALID_WITH_VALUE,value,field); else   return MessageFormat.format(FIELD_INVALID,field);  if (FieldError.CODE_MISSING_FIELD.equals(code))   return MessageFormat.format(FIELD_MISSING,field);  if (FieldError.CODE_ALREADY_EXISTS.equals(code))   return MessageFormat.format(FIELD_EXISTS,error.getResource(),field);  if (FieldError.CODE_CUSTOM.equals(code)) {    String message=error.getMessage();    if (message != null && message.length() > 0)     return message;  }  return MessageFormat.format(FIELD_ERROR,field,error.getResource());}  }
class C{  public void write(String s,int off,int len){  try {synchronized (lock) {      ensureOpen();      out.write(s,off,len);    }  } catch (  InterruptedIOException x) {    Thread.currentThread().interrupt();  }catch (  IOException x) {    trouble=true;  }}  }
class C{  public static ArgumentException unableToResetPropertyWithValue(String name,String resetOption){  LocalizableMessage message=ERR_DSCFG_ERROR_UNABLE_TO_RESET_PROPERTY_WITH_VALUE.get(resetOption,name,resetOption);  return new ArgumentException(message);}  }
class C{  public void testEntityReferenceSetTextContent() throws TransformerException {  document=builder.newDocument();  Element root=document.createElement("menu");  document.appendChild(root);  EntityReference entityReference=document.createEntityReference("sp");  root.appendChild(entityReference);  try {    entityReference.setTextContent("Lite Syrup");    fail();  } catch (  DOMException e) {  }}  }
class C{  public boolean release(DTM dtm,boolean shouldHardDelete){  if (m_rtfdtm_stack != null && m_rtfdtm_stack.contains(dtm)) {    return false;  }  return m_dtmManager.release(dtm,shouldHardDelete);}  }
class C{  public void add(SDPObject s){  super.add(s);}  }
class C{  public void testToPlainStringNegNegExp(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E-100";  BigDecimal aNumber=new BigDecimal(a);  String result="-0.000000000000000000000000000000000000000000000000000000000000000000012380964839238475457356735674573563567890295784902768787678287";  assertTrue("incorrect value",aNumber.toPlainString().equals(result));}  }
class C{  public PdfSignatureBuildProperties(){  super(new PdfDictionary());}  }
class C{  private ResultCode runUpdateStateEntry(DN serverStateEntryDN){  LDAPAttribute attr=new LDAPAttribute(REPLICATION_STATE,state.toASN1ArrayList());  RawModification mod=new LDAPModification(ModificationType.REPLACE,attr);  ModifyOperationBasis op=new ModifyOperationBasis(getRootConnection(),nextOperationID(),nextMessageID(),null,ByteString.valueOfUtf8(serverStateEntryDN.toString()),Collections.singletonList(mod));  op.setInternalOperation(true);  op.setSynchronizationOperation(true);  op.setDontSynchronize(true);  op.run();  final ResultCode resultCode=op.getResultCode();  if (resultCode != ResultCode.SUCCESS && !(resultCode == ResultCode.NO_SUCH_OBJECT && serverStateEntryDN.equals(baseDN))) {    logger.error(DEBUG_ERROR_UPDATING_RUV,resultCode.getName(),op,op.getErrorMessage(),serverStateEntryDN);  }  return resultCode;}  }
class C{  public static boolean encode(ByteBuffer buffer,String toEncode,boolean forceLowercase){  if (buffer.remaining() <= toEncode.length()) {    return false;  }  int start=buffer.position();  int length=0;  for (int i=0; i < toEncode.length(); ++i) {    byte c=(byte)toEncode.charAt(i);    if (forceLowercase) {      c=Hpack.toLower(c);    }    HuffmanCode code=HUFFMAN_CODES[c];    length+=code.length;  }  int byteLength=length / 8 + (length % 8 == 0 ? 0 : 1);  buffer.put((byte)(1 << 7));  Hpack.encodeInteger(buffer,byteLength,7);  int bytePos=0;  byte currentBufferByte=0;  for (int i=0; i < toEncode.length(); ++i) {    byte c=(byte)toEncode.charAt(i);    if (forceLowercase) {      c=Hpack.toLower(c);    }    HuffmanCode code=HUFFMAN_CODES[c];    if (code.length + bytePos <= 8) {      currentBufferByte|=((code.value & 0xFF) << 8 - (code.length + bytePos));      bytePos+=code.length;    } else {      int val=code.value;      int rem=code.length;      while (rem > 0) {        if (!buffer.hasRemaining()) {          buffer.position(start);          return false;        }        int remainingInByte=8 - bytePos;        if (rem > remainingInByte) {          currentBufferByte|=(val >> (rem - remainingInByte));        } else {          currentBufferByte|=(val << (remainingInByte - rem));        }        if (rem > remainingInByte) {          buffer.put(currentBufferByte);          currentBufferByte=0;          bytePos=0;        } else {          bytePos=rem;        }        rem-=remainingInByte;      }    }    if (bytePos == 8) {      if (!buffer.hasRemaining()) {        buffer.position(start);        return false;      }      buffer.put(currentBufferByte);      currentBufferByte=0;      bytePos=0;    }    if (buffer.position() - start > toEncode.length()) {      buffer.position(start);      return false;    }  }  if (bytePos > 0) {    if (!buffer.hasRemaining()) {      buffer.position(start);      return false;    }    buffer.put((byte)(currentBufferByte | ((0xFF) >> bytePos)));  }  return true;}  }
class C{  public Map.Entry<String,String> issueToken(AccessToken accessToken,OAuth2Request request) throws ServerException, InvalidClientException, NotFoundException {  final Set<String> scope=accessToken.getScope();  if (scope != null && scope.contains(OAuth2Constants.Params.OPENID)) {    final ResourceOwner resourceOwner;    try {      request.setSession(accessToken.getSessionId());      resourceOwner=resourceOwnerSessionValidator.validate(request);      final String nonce=accessToken.getNonce();      final OpenIdConnectToken openIdToken=tokenStore.createOpenIDToken(resourceOwner,accessToken.getClientId(),accessToken.getClientId(),nonce,getOps(accessToken,request),request);      return new AbstractMap.SimpleEntry<>(OAuth2Constants.JWTTokenParams.ID_TOKEN,openIdToken.getTokenId());    } catch (    OAuth2Exception e) {      logger.error("User must be authenticated to issue ID tokens.",e);      throw new ServerException("User must be authenticated to issue ID tokens.");    }  }  return null;}  }
class C{  protected void paint(SynthContext context,Graphics g){  JSeparator separator=(JSeparator)context.getComponent();  context.getPainter().paintSeparatorForeground(context,g,0,0,separator.getWidth(),separator.getHeight(),separator.getOrientation());}  }
class C{  public void shareWeiXin(String webUrl,String msgTitle,String msgText){  shareToWeiXin(webUrl,msgTitle,msgText);}  }
class C{  boolean isDServerUp(){  return isDServerUp(false);}  }
class C{  public boolean isFocusTraversable(){  return false;}  }
class C{  public boolean isLdapConnection(){  return ldapConnect;}  }
class C{  public void login(IndexType type,String indexName,String locale) throws AuthLoginException {  login(type,indexName,null,null,locale);}  }
class C{  public static Map mergeMaps(Map mapA,Map mapB){  if (mapA == null && mapB == null) {    return null;  }  if (mapA == null || mapA.isEmpty()) {    return mapB;  } else   if (mapB == null || mapB.isEmpty()) {    return mapA;  }  Map bigMap=((mapA.size() > mapB.size()) ? mapA : mapB);  Map smallMap=((mapA.size() <= mapB.size()) ? mapA : mapB);  Iterator itr=smallMap.keySet().iterator();  while (itr.hasNext()) {    String attrName=(String)itr.next();    Set values=(Set)bigMap.get(attrName);    if (values != null) {      values.addAll((Set)smallMap.get(attrName));    } else {      bigMap.put(attrName,(Set)smallMap.get(attrName));    }  }  return bigMap;}  }
class C{  CancelExtendedRequestImpl(final int requestID){  this.requestID=requestID;}  }
class C{  public static Name upperCamel(String... pieces){  return upperCamelInternal(AcronymMode.CAMEL_CASE,pieces);}  }
class C{  public void initializeConnectionHandlerConfig() throws ConfigException, InitializationException {  connectionHandlers.clear();  initializeAdministrationConnectorConfig();  RootCfg root=serverContext.getRootConfig();  root.addConnectionHandlerAddListener(this);  root.addConnectionHandlerDeleteListener(this);  for (  String name : root.listConnectionHandlers()) {    ConnectionHandlerCfg config=root.getConnectionHandler(name);    config.addChangeListener(this);    if (config.isEnabled()) {      ConnectionHandler<? extends ConnectionHandlerCfg> connectionHandler=getConnectionHandler(config);      connectionHandlers.put(config.dn(),connectionHandler);      DirectoryServer.registerConnectionHandler(connectionHandler);    }  }}  }
class C{  public boolean isURIRoute(){  return uriRoute;}  }
class C{  public boolean isInNative(){  return inNative;}  }
class C{  public Set createSubOrganizations(Map subOrganizationsMap) throws AMException, SSOException {  Iterator iter=subOrganizationsMap.keySet().iterator();  Set subOrgs=new HashSet();  while (iter.hasNext()) {    String subOrgName=(String)iter.next();    StringBuilder subOrgDNSB=new StringBuilder();    subOrgDNSB.append(AMNamingAttrManager.getNamingAttr(ORGANIZATION)).append("=").append(subOrgName).append(",").append(super.entryDN);    Map attributes=(Map)subOrganizationsMap.get(subOrgName);    AMOrganizationImpl subOrgImpl=new AMOrganizationImpl(super.token,subOrgDNSB.toString());    subOrgImpl.setAttributes(attributes);    subOrgImpl.create();    subOrgs.add(subOrgImpl);  }  return subOrgs;}  }
class C{  private void fillGridForPreLayout(RecyclerView.Recycler recycler,RecyclerView.State state){  while (fakeSpanBottomMin <= bottomBorder && mCurrentPosition >= 0 && mCurrentPosition < state.getItemCount()) {    layoutChunk(recycler,state,true,true);  }}  }
class C{  public void push(long val){  this.push(new BaseTypeWrapper(val));}  }
class C{  public final void testToString() throws InvalidKeySpecException, NoSuchAlgorithmException {  TrustAnchor ta=TestUtils.getTrustAnchor();  if (ta == null) {    fail(getName() + ": not performed (could not create test TrustAnchor)");  }  CertPathBuilderResult r=new PKIXCertPathBuilderResult(new MyCertPath(testEncoding),ta,TestUtils.getPolicyTree(),testPublicKey);  assertNotNull(r.toString());}  }
class C{  public boolean isRolloverEnabled(){  return rolloverEnabled;}  }
class C{  private void writeLength(final int length) throws IOException {  if (length < 128) {    out.write((byte)length);  } else   if ((length & 0x000000FF) == length) {    out.write((byte)0x81);    out.write((byte)(length & 0xFF));  } else   if ((length & 0x0000FFFF) == length) {    out.write((byte)0x82);    out.write((byte)((length >> 8) & 0xFF));    out.write((byte)(length & 0xFF));  } else   if ((length & 0x00FFFFFF) == length) {    out.write((byte)0x83);    out.write((byte)((length >> 16) & 0xFF));    out.write((byte)((length >> 8) & 0xFF));    out.write((byte)(length & 0xFF));  } else {    out.write((byte)0x84);    out.write((byte)((length >> 24) & 0xFF));    out.write((byte)((length >> 16) & 0xFF));    out.write((byte)((length >> 8) & 0xFF));    out.write((byte)(length & 0xFF));  }}  }
class C{  @DataProvider(name="testSafeDataLevelHighNightlyProvider") private Object[][] testSafeDataLevelHighNightlyProvider(){  return new Object[][]{{2,true,DEFAULT_GID,DEFAULT_GENID,DEFAULT_GID,DEFAULT_GENID,TIMEOUT_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,TIMEOUT_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,TIMEOUT_RS_SCENARIO},{2,true,DEFAULT_GID,DEFAULT_GENID,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,OTHER_GENID,REPLY_OK_RS_SCENARIO},{2,true,DEFAULT_GID,DEFAULT_GENID,DEFAULT_GID,OTHER_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{2,true,DEFAULT_GID,DEFAULT_GENID,OTHER_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{2,true,DEFAULT_GID,DEFAULT_GENID,OTHER_GID,OTHER_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{2,true,DEFAULT_GID,DEFAULT_GENID,OTHER_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,OTHER_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{2,true,DEFAULT_GID,DEFAULT_GENID,OTHER_GID,DEFAULT_GENID,TIMEOUT_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{2,true,DEFAULT_GID,DEFAULT_GENID,OTHER_GID,OTHER_GENID,TIMEOUT_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{2,true,DEFAULT_GID,DEFAULT_GENID,OTHER_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,OTHER_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{2,true,DEFAULT_GID,DEFAULT_GENID,OTHER_GID,OTHER_GENID,REPLY_OK_RS_SCENARIO,OTHER_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{2,true,DEFAULT_GID,DEFAULT_GENID,OTHER_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,OTHER_GID,OTHER_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{2,true,DEFAULT_GID,DEFAULT_GENID,OTHER_GID,DEFAULT_GENID,TIMEOUT_RS_SCENARIO,OTHER_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{2,true,DEFAULT_GID,DEFAULT_GENID,OTHER_GID,OTHER_GENID,TIMEOUT_RS_SCENARIO,OTHER_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{2,true,DEFAULT_GID,DEFAULT_GENID,DEFAULT_GID,OTHER_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,OTHER_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{3,true,DEFAULT_GID,DEFAULT_GENID,DEFAULT_GID,DEFAULT_GENID,TIMEOUT_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,TIMEOUT_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,TIMEOUT_RS_SCENARIO},{3,true,DEFAULT_GID,DEFAULT_GENID,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,OTHER_GENID,REPLY_OK_RS_SCENARIO},{3,true,DEFAULT_GID,DEFAULT_GENID,DEFAULT_GID,OTHER_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{3,true,DEFAULT_GID,DEFAULT_GENID,OTHER_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{3,true,DEFAULT_GID,DEFAULT_GENID,OTHER_GID,OTHER_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{3,true,DEFAULT_GID,DEFAULT_GENID,OTHER_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,OTHER_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{3,true,DEFAULT_GID,DEFAULT_GENID,OTHER_GID,DEFAULT_GENID,TIMEOUT_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{3,true,DEFAULT_GID,DEFAULT_GENID,OTHER_GID,OTHER_GENID,TIMEOUT_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{3,true,DEFAULT_GID,DEFAULT_GENID,OTHER_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,OTHER_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{3,true,DEFAULT_GID,DEFAULT_GENID,OTHER_GID,OTHER_GENID,REPLY_OK_RS_SCENARIO,OTHER_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{3,true,DEFAULT_GID,DEFAULT_GENID,OTHER_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,OTHER_GID,OTHER_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{3,true,DEFAULT_GID,DEFAULT_GENID,OTHER_GID,DEFAULT_GENID,TIMEOUT_RS_SCENARIO,OTHER_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{3,true,DEFAULT_GID,DEFAULT_GENID,OTHER_GID,OTHER_GENID,TIMEOUT_RS_SCENARIO,OTHER_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{3,true,DEFAULT_GID,DEFAULT_GENID,DEFAULT_GID,OTHER_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,OTHER_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO}};}  }
class C{  protected void alert(byte level,byte description){  if (logger != null) {    logger.println("SSLRecordProtocol.allert: " + level + " "+ description);  }  alertProtocol.alert(level,description);}  }
class C{  public void modify(String attrName,String value,ModificationType modificationType){  modify(new Attr(attrName,value),modificationType);}  }
class C{  public ApplicationRequest(ServletRequest request){  super(request);  setRequest(request);}  }
class C{  @Override public String toString(){  return "Internal Connection Handler";}  }
class C{  public void append(final CommandBuilder builder){  for (  final Argument arg : builder.args) {    if (builder.isObfuscated(arg)) {      addObfuscatedArgument(arg);    } else {      addArgument(arg);    }  }}  }
class C{  @DataProvider(name="createFormatData") public Object[][] createFormatData(){  return new Object[][]{{1,0,1,0,0,0,0,"00010101000000.000Z"},{9,0,1,0,0,0,0,"00090101000000.000Z"},{10,0,1,0,0,0,0,"00100101000000.000Z"},{99,0,1,0,0,0,0,"00990101000000.000Z"},{100,0,1,0,0,0,0,"01000101000000.000Z"},{999,0,1,0,0,0,0,"09990101000000.000Z"},{1000,0,1,0,0,0,0,"10000101000000.000Z"},{2000,0,1,0,0,0,0,"20000101000000.000Z"},{2099,0,1,0,0,0,0,"20990101000000.000Z"},{2000,8,1,0,0,0,0,"20000901000000.000Z"},{2000,9,1,0,0,0,0,"20001001000000.000Z"},{2000,10,1,0,0,0,0,"20001101000000.000Z"},{2000,11,1,0,0,0,0,"20001201000000.000Z"},{2000,0,9,0,0,0,0,"20000109000000.000Z"},{2000,0,10,0,0,0,0,"20000110000000.000Z"},{2000,0,19,0,0,0,0,"20000119000000.000Z"},{2000,0,20,0,0,0,0,"20000120000000.000Z"},{2000,0,29,0,0,0,0,"20000129000000.000Z"},{2000,0,30,0,0,0,0,"20000130000000.000Z"},{2000,0,31,0,0,0,0,"20000131000000.000Z"},{2000,0,1,9,0,0,0,"20000101090000.000Z"},{2000,0,1,10,0,0,0,"20000101100000.000Z"},{2000,0,1,19,0,0,0,"20000101190000.000Z"},{2000,0,1,20,0,0,0,"20000101200000.000Z"},{2000,0,1,23,0,0,0,"20000101230000.000Z"},{2000,0,1,0,9,0,0,"20000101000900.000Z"},{2000,0,1,0,10,0,0,"20000101001000.000Z"},{2000,0,1,0,59,0,0,"20000101005900.000Z"},{2000,0,1,0,0,9,0,"20000101000009.000Z"},{2000,0,1,0,0,10,0,"20000101000010.000Z"},{2000,0,1,0,0,59,0,"20000101000059.000Z"},{2000,0,1,0,0,0,9,"20000101000000.009Z"},{2000,0,1,0,0,0,10,"20000101000000.010Z"},{2000,0,1,0,0,0,99,"20000101000000.099Z"},{2000,0,1,0,0,0,100,"20000101000000.100Z"},{2000,0,1,0,0,0,999,"20000101000000.999Z"}};}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  return super.modelToView(pos,adjustAllocation(a),b);}  }
class C{  public ContentDispositionHeader createContentDispositionHeader(String contentDisposition) throws ParseException {  if (contentDisposition == null)   throw new NullPointerException("null arg contentDisposition");  ContentDisposition c=new ContentDisposition();  c.setDispositionType(contentDisposition);  return c;}  }
class C{  ICC_ProfileGray(Profile p){  super(p);}  }
class C{  public void clear(){  valueToName.clear();  nameToCount.clear();}  }
class C{  public HttpCallback(String authorizationHeader,String negotiationHeader,String errorCode){  this.tokenHeader=authorizationHeader;  try {    this.errorCode=Integer.parseInt(errorCode);  } catch (  Exception e) {  }  int index=negotiationHeader.indexOf(":");  if (index != -1) {    this.negoHeader=negotiationHeader.substring(0,index);    this.negoValue=negotiationHeader.substring(index + 1);  } else {    this.negoHeader=negotiationHeader;  }}  }
class C{  public void paintImmediately(Rectangle r){  paintImmediately(r.x,r.y,r.width,r.height);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.StatusType createStatusType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.StatusTypeImpl();}  }
class C{  public final boolean hasFatal(){  return this.hasFatal;}  }
class C{  public ModifyDNOperation processModifyDN(ModifyDNRequest modifyDNRequest){  ModifyDNRequest r=modifyDNRequest;  ByteString rawNewSuperior=r.getNewSuperior() != null ? valueOfObject(r.getNewSuperior()) : null;  return processModifyDN(valueOfObject(r.getName()),valueOfObject(r.getNewRDN()),r.isDeleteOldRDN(),rawNewSuperior,to(r.getControls()));}  }
class C{  public boolean isStrikeout(){  return strikeout;}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.ManageNameIDServiceElement createManageNameIDServiceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.ManageNameIDServiceElementImpl();}  }
class C{  private static String escapeRegexp(String pattern){  String[] specialCharacters=new String[]{"\\","*","+","?","|","{","[","(",")","^","$",".","#"};  String[] escapedCharacters=new String[]{"\\\\","\\*","\\+","\\?","\\|","\\{","\\[","\\(","\\)","\\^","\\$","\\.","\\#"};  return StringUtils.replaceEach(pattern,specialCharacters,escapedCharacters);}  }
class C{  private static Object maskNull(Object key){  return (key == null ? NULL_KEY : key);}  }
class C{  void addSubordinateTemplate(final String name,final int numEntries){  subordinateTemplateNames.add(name);  numEntriesPerTemplate.add(numEntries);}  }
class C{  public static String intToString(int i){  return convertInt(null,i);}  }
class C{  boolean matchMode(QName m1){  return matchModes(m1,m_template.getMode());}  }
class C{  public LineUnavailableException(String message){  super(message);}  }
class C{  private boolean updateStateEntry(){  ResultCode result=runUpdateStateEntry(baseDN);  if (result == ResultCode.NO_SUCH_OBJECT) {    SearchResultEntry configEntry=searchConfigEntry();    if (configEntry != null) {      result=runUpdateStateEntry(configEntry.getName());    }  }  return result == ResultCode.SUCCESS;}  }
class C{  public void invalidate(){}  }
class C{  public void write(String str,int off,int len) throws IOException {  out.write(str,off,len);}  }
class C{  public UpdateMsg first(){synchronized (lock) {    return map.get(map.firstKey());  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.KeySharingElement createKeySharingElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.KeySharingElementImpl();}  }
class C{  public FSLoginHelperException(String msg,Throwable t){  super(t,msg);}  }
class C{  public boolean accept(File f){  if (f.isHidden() || !f.canRead()) {    return false;  }  if (f.isDirectory()) {    return allowDirectories;  }  String ext=Utils.getExtension(f);  try {    if (SupportedFileFormat.valueOf(ext.toUpperCase()) != null) {      return true;    }  } catch (  IllegalArgumentException iae) {    return false;  }  return false;}  }
class C{  public void addPair(String text){  StringTokenizer stz=new StringTokenizer(text,"\0");  if (stz.countTokens() == 2) {    addPair(stz.nextToken(),stz.nextToken());  }}  }
class C{  protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, java.io.IOException {  processRequest(request,response);}  }
class C{  public SQLiteSession(SQLiteConnectionPool connectionPool){  if (connectionPool == null) {    throw new IllegalArgumentException("connectionPool must not be null");  }  mConnectionPool=connectionPool;}  }
class C{  public boolean isRoleIDP(){  return this.isRoleIDP;}  }
class C{  public static void writeToFile(String fileName,String content){  String classMethod="UpgradeUtils:writeToFile : ";  FileWriter fout=null;  try {    fout=new FileWriter(fileName);    fout.write(content);  } catch (  IOException e) {    debug.error(classMethod + "Error writing to bootstrap file " + fileName);  } finally {    if (fout != null) {      try {        fout.close();      } catch (      Exception ex) {      }    }  }}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  return toXMLString(includeNS,declareNS,false);}  }
class C{  public boolean canBeDeleted(String clientType){  return !clientCapDataIntInstance.isClientPresent(clientType);}  }
class C{  public SemanticProcessor(Map<String,List<Statement>> mapOfStatements,ClassLoader classLoader,ErrorManager err){  this.mapOfStatements=mapOfStatements;  this.classLoader=classLoader;  this.err=err;  err.setFastFail(true);  types.put("int",IntTypeDef.get());  types.put("long",LongTypeDef.get());  types.put("double",DoubleTypeDef.get());  types.put("float",FloatTypeDef.get());  types.put("boolean",BoolTypeDef.get());  types.put("bool",BoolTypeDef.get());  types.put("char",CharTypeDef.get());  types.put("short",ShortTypeDef.get());  types.put("byte",ByteTypeDef.get());}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> patchInstance(Context context,String resourceId,PatchRequest request){  return RestUtils.generateUnsupportedOperation();}  }
class C{  private void start(int interval){  previousDelay=interval;  lastCall=0;  if (timer == null) {    timer=new Timer(interval,this);  } else {    timer.setDelay(interval);  }  if (ADJUSTTIMER) {    timer.setRepeats(false);    timer.setCoalesce(false);  }  timer.start();}  }
class C{  public void interruptRunningTasks(TaskState interruptState,LocalizableMessage interruptReason,boolean waitForStop){  LinkedList<TaskThread> threadList=new LinkedList<>();  schedulerLock.lock();  try {    threadList.addAll(activeThreads.values());  }  finally {    schedulerLock.unlock();  }  for (  TaskThread t : threadList) {    try {      t.interruptTask(interruptState,interruptReason,true);    } catch (    Exception e) {      logger.traceException(e);    }  }  if (waitForStop) {    for (    TaskThread t : threadList) {      try {        t.join();      } catch (      Exception e) {        logger.traceException(e);      }    }  }}  }
class C{  public X500Principal(InputStream in){  if (in == null) {    throw new NullPointerException("in == null");  }  try {    dn=(Name)Name.ASN1.decode(in);  } catch (  IOException e) {    throw incorrectInputEncoding(e);  }}  }
class C{  public void addLayoutComponent(Component comp,Object constraints){  invalidateLayout(comp.getParent());}  }
class C{  public static OggPageHeader read(RandomAccessFile raf) throws IOException, CannotReadException {  long start=raf.getFilePointer();  logger.fine("Trying to read OggPage at:" + start);  byte[] b=new byte[OggPageHeader.CAPTURE_PATTERN.length];  raf.read(b);  if (!(Arrays.equals(b,OggPageHeader.CAPTURE_PATTERN))) {    raf.seek(start);    if (AbstractID3v2Tag.isId3Tag(raf)) {      logger.warning(ErrorMessage.OGG_CONTAINS_ID3TAG.getMsg(raf.getFilePointer() - start));      raf.read(b);      if ((Arrays.equals(b,OggPageHeader.CAPTURE_PATTERN))) {        start=raf.getFilePointer() - OggPageHeader.CAPTURE_PATTERN.length;      }    } else {      throw new CannotReadException(ErrorMessage.OGG_HEADER_CANNOT_BE_FOUND.getMsg(new String(b)));    }  }  raf.seek(start + OggPageHeader.FIELD_PAGE_SEGMENTS_POS);  int pageSegments=raf.readByte() & 0xFF;  raf.seek(start);  b=new byte[OggPageHeader.OGG_PAGE_HEADER_FIXED_LENGTH + pageSegments];  raf.read(b);  OggPageHeader pageHeader=new OggPageHeader(b);  pageHeader.setStartByte(start);  return pageHeader;}  }
class C{  public static void runTransformThread(Runnable runnable){  ThreadControllerWrapper.runThread(runnable,-1);}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public InvalidAlgorithmParameterException(String msg){  super(msg);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_noderemovechildgetnodename.class,args);}  }
class C{  private void initializeArguments(final boolean isMultipleBackends) throws ArgumentException {  argParser.setShortToolDescription(REF_SHORT_DESC_REBUILD_INDEX.get());  configFile=StringArgument.builder("configFile").shortIdentifier('f').description(INFO_DESCRIPTION_CONFIG_FILE.get()).hidden().required().valuePlaceholder(INFO_CONFIGFILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);  final StringArgument.Builder builder=StringArgument.builder("baseDN").shortIdentifier('b').description(INFO_REBUILDINDEX_DESCRIPTION_BASE_DN.get()).required().valuePlaceholder(INFO_BASEDN_PLACEHOLDER.get());  if (isMultipleBackends) {    builder.multiValued();  }  baseDNString=builder.buildAndAddToParser(argParser);  indexList=StringArgument.builder("index").shortIdentifier('i').description(INFO_REBUILDINDEX_DESCRIPTION_INDEX_NAME.get()).multiValued().valuePlaceholder(INFO_INDEX_PLACEHOLDER.get()).buildAndAddToParser(argParser);  rebuildAll=BooleanArgument.builder("rebuildAll").description(INFO_REBUILDINDEX_DESCRIPTION_REBUILD_ALL.get()).buildAndAddToParser(argParser);  rebuildDegraded=BooleanArgument.builder("rebuildDegraded").description(INFO_REBUILDINDEX_DESCRIPTION_REBUILD_DEGRADED.get()).buildAndAddToParser(argParser);  clearDegradedState=BooleanArgument.builder("clearDegradedState").description(INFO_REBUILDINDEX_DESCRIPTION_CLEAR_DEGRADED_STATE.get()).buildAndAddToParser(argParser);  tmpDirectory=StringArgument.builder("tmpdirectory").description(INFO_REBUILDINDEX_DESCRIPTION_TEMP_DIRECTORY.get()).defaultValue("import-tmp").valuePlaceholder(INFO_REBUILDINDEX_TEMP_DIR_PLACEHOLDER.get()).buildAndAddToParser(argParser);  final BooleanArgument displayUsage=showUsageArgument();  argParser.addArgument(displayUsage);  argParser.setUsageArgument(displayUsage);}  }
class C{  public void identityChanged(String universalId){  if (DelegationManager.debug.messageEnabled()) {    DelegationManager.debug.message("DelegationPolicyImpl: changed universalId=" + universalId);  }  cleanupCache();}  }
class C{  private void adjust_table(){  this.table_model=new NetClassTableModel();  this.table=new NetClassTable(this.table_model);  this.main_panel.remove(this.center_panel);  this.add_table();  this.pack();  this.board_frame.refresh_windows();}  }
class C{  public JSlider(BoundedRangeModel brm){  this.orientation=JSlider.HORIZONTAL;  setModel(brm);  updateUI();}  }
class C{  public WaitForMetaData(Throwable cause){  super(cause);}  }
class C{  public static boolean isXML11Name(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NAME) != 0) || (c >= 0x10000 && c < 0xF0000);}  }
class C{  public String format(DateTimeFormatter formatter){  Objects.requireNonNull(formatter,"formatter");  return formatter.format(this);}  }
class C{  public SchemaException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  public Unmarshaller createUnmarshaller() throws JAXBException {  return new UnmarshallerImpl(this,gi);}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  menu.add(Menu.NONE,MENU_HELP,Menu.NONE,getString(R.string.help)).setIcon(android.R.drawable.ic_menu_help).setAlphabeticShortcut('h');  return super.onCreateOptionsMenu(menu);}  }
class C{  public void testDisableExternalParameterEntities() throws Exception {  String xml="<!DOCTYPE foo [" + "  <!ENTITY % bar SYSTEM \"/no-such-document.xml\">" + "  %bar;"+ "]>"+ "<foo/>";  testDisableExternalEntities("http://xml.org/sax/features/external-parameter-entities",xml);}  }
class C{  @Override public boolean isPowered(){  return getItemType() == Material.DIODE_BLOCK_ON;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.FacadeElement createFacadeElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.FacadeElementImpl();}  }
class C{  public Cursor fetch(Long failedActionParameterID){  if (failedActionParameterID == null) {    throw new IllegalArgumentException("primary key null.");  }  Cursor mCursor=database.query(true,DATABASE_TABLE,KEYS,KEY_FAILEDACTIONPARAMETERID + "=" + failedActionParameterID,null,null,null,null,null);  if (mCursor != null) {    mCursor.moveToFirst();  }  return mCursor;}  }
class C{  public void logDebug(String message){  if (needsLogging) {    String newMessage=this.enhanceMessage(message);    if (this.lineCount == 0) {      getLogger().debug("BUILD TIMESTAMP = " + this.buildTimeStamp);      getLogger().debug("Config Propeties = " + this.configurationProperties);    }    countLines(newMessage);    getLogger().debug(newMessage);  }}  }
class C{  @Override public void begin(String namespace,String theName,Attributes attributes) throws Exception {  Object top=digester.peek();  if (digester.log.isDebugEnabled()) {    if (top != null) {      digester.log.debug("[SetPropertiesRule]{" + digester.match + "} Set "+ top.getClass().getName()+ " properties");    } else {      digester.log.debug("[SetPropertiesRule]{" + digester.match + "} Set NULL properties");    }  }  for (int i=0; i < attributes.getLength(); i++) {    String name=attributes.getLocalName(i);    if ("".equals(name)) {      name=attributes.getQName(i);    }    String value=attributes.getValue(i);    if (digester.log.isDebugEnabled()) {      digester.log.debug("[SetPropertiesRule]{" + digester.match + "} Setting property '"+ name+ "' to '"+ value+ "'");    }    if (!digester.isFakeAttribute(top,name) && !IntrospectionUtils.setProperty(top,name,value) && digester.getRulesValidation()) {      digester.log.warn("[SetPropertiesRule]{" + digester.match + "} Setting property '"+ name+ "' to '"+ value+ "' did not find a matching property.");    }  }}  }
class C{  void fullyUnlock(){  takeLock.unlock();  putLock.unlock();}  }
class C{  public PdfCanvas(PdfDocument doc,int pageNum){  this(doc.getPage(pageNum));}  }
class C{  public Cursor fetchAll(String appName,String pkgName,Boolean enabled,Boolean loginEnabled,String username,String password){  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();  qb.setTables(DATABASE_TABLE);  qb.appendWhere("1=1");  if (appName != null) {    qb.appendWhere(" AND " + KEY_APPNAME + " = ");    qb.appendWhereEscapeString(appName);  }  if (pkgName != null) {    qb.appendWhere(" AND " + KEY_PKGNAME + " = ");    qb.appendWhereEscapeString(pkgName);  }  if (enabled != null) {    qb.appendWhere(" AND " + KEY_ENABLED + " = "+ (enabled ? 1 : 0));  }  if (loginEnabled != null) {    qb.appendWhere(" AND " + KEY_LOGIN + " = "+ (loginEnabled ? 1 : 0));  }  if (username != null) {    qb.appendWhere(" AND " + KEY_USERNAME + " = ");    qb.appendWhereEscapeString(username);  }  if (password != null) {    qb.appendWhere(" AND " + KEY_PASSWORD + " = ");    qb.appendWhereEscapeString(password);  }  return qb.query(database,KEYS,null,null,null,null,null);}  }
class C{  public boolean register(final Supplier<Optional<Consumer<ReturnCode>>> handler){  try {    final Optional<Consumer<ReturnCode>> end=handler.get();    if (end.isPresent()) {      stack.push(end.get());      return true;    } else {      return false;    }  } catch (  final RuntimeException ex) {    State.LOGGER.warn("Failed to register state handler.",ex);    return false;  }}  }
class C{  public static SchemaElement updateSchemaElementExtraPropertyMultiplesValues(ServerContext serverContext,SchemaElement element,String property,List<String> values){  org.forgerock.opendj.ldap.schema.Schema schema=serverContext != null ? serverContext.getSchema() : org.forgerock.opendj.ldap.schema.Schema.getDefaultSchema();  SchemaBuilder schemaBuilder=new SchemaBuilder(schema);  if (element instanceof AttributeType) {    AttributeType attr=(AttributeType)element;    AttributeType.Builder builder=schemaBuilder.buildAttributeType(attr).removeExtraProperty(property,(String)null);    if (values != null && !values.isEmpty()) {      builder.extraProperties(property,values);    }    return builder.addToSchemaOverwrite().toSchema().getAttributeType(attr.getNameOrOID());  } else   if (element instanceof ObjectClass) {    ObjectClass oc=(ObjectClass)element;    ObjectClass.Builder builder=schemaBuilder.buildObjectClass(oc).removeExtraProperty(property,(String)null);    if (values != null && !values.isEmpty()) {      builder.extraProperties(property,values);    }    return builder.addToSchemaOverwrite().toSchema().getObjectClass(oc.getNameOrOID());  }  throw new RuntimeException("updateSchemaElementExtraPropertyMultiplesValues() not implemented for element of type " + element.getClass());}  }
class C{  @SuppressWarnings("unused") static <T>Promise<Set<T>> blockingPromiseSet(Class<T> componentType){  return new BlockingPromise<>();}  }
class C{  public void logError(String message,Exception ex){  Logger logger=this.getLogger();  logger.error(message,ex);}  }
class C{  private void updateYLocationsFrom(int location){  if (location >= 0 && location < getRowCount()) {    int counter, maxCounter, newYOrigin;    TreeStateNode aNode;    aNode=getNode(location);    newYOrigin=aNode.getYOrigin() + aNode.getPreferredHeight();    for (counter=location + 1, maxCounter=visibleNodes.size(); counter < maxCounter; counter++) {      aNode=(TreeStateNode)visibleNodes.elementAt(counter);      aNode.setYOrigin(newYOrigin);      newYOrigin+=aNode.getPreferredHeight();    }  }}  }
class C{  public void removeAssignableDynamicGroup(String assignableDynamicGroupDN) throws AMException, SSOException {  SSOTokenManager.getInstance().validateToken(super.token);  Set userDNs=new HashSet();  userDNs.add(super.entryDN);  dsServices.modifyMemberShip(super.token,userDNs,assignableDynamicGroupDN,ASSIGNABLE_DYNAMIC_GROUP,REMOVE_MEMBER);}  }
class C{  public static String HTMLEncode(String srcStr,char ch){  if (srcStr == null) {    return null;  }  int fromIndex=0;  int toIndex;  StringBuffer dstSB=new StringBuffer();  while ((toIndex=srcStr.indexOf(ch,fromIndex)) != -1) {    dstSB.append(srcStr.substring(fromIndex,toIndex)).append("&#" + (int)ch + ";");    fromIndex=toIndex + 1;  }  dstSB.append(srcStr.substring(fromIndex));  return dstSB.toString();}  }
class C{  public boolean allowStartTLS(){  return currentConfig.isAllowStartTLS() && !currentConfig.isUseSSL();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Node textNode;  Node retval;  Node lastChild;  Document otherDoc;  doc=(Document)load("hc_staff",true);  otherDoc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=otherDoc.createTextNode("terday");{    boolean success=false;    try {      retval=titleAttr.appendChild(textNode);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  public int size(){  return m_firstFree;}  }
class C{  @Override public boolean accept(Serializable msg,Member sender){  return (msg instanceof ClusterMessage);}  }
class C{  private synchronized boolean updateDerivedGauge(Object scanGauge,GaugeMonitorObservedObject o){  boolean is_derived_gauge_valid;  if (differenceMode) {    if (o.getPreviousScanGauge() != null) {      setDerivedGaugeWithDifference((Number)scanGauge,o);      is_derived_gauge_valid=true;    } else {      is_derived_gauge_valid=false;    }    o.setPreviousScanGauge((Number)scanGauge);  } else {    o.setDerivedGauge((Number)scanGauge);    is_derived_gauge_valid=true;  }  return is_derived_gauge_valid;}  }
class C{  public static CacheStats createInstance(String instanceName,Debug debugObject){  CacheStats cStats=new CacheStats(instanceName,debugObject);  if (stats.isEnabled()) {    stats.addStatsListener(cStats);  }  return cStats;}  }
class C{  public synchronized Servlet loadServlet() throws ServletException {  if (!singleThreadModel && (instance != null))   return instance;  PrintStream out=System.out;  if (swallowOutput) {    SystemLogHandler.startCapture();  }  Servlet servlet;  try {    long t1=System.currentTimeMillis();    if (servletClass == null) {      unavailable(null);      throw new ServletException(sm.getString("standardWrapper.notClass",getName()));    }    InstanceManager instanceManager=((StandardContext)getParent()).getInstanceManager();    try {      servlet=(Servlet)instanceManager.newInstance(servletClass);    } catch (    ClassCastException e) {      unavailable(null);      throw new ServletException(sm.getString("standardWrapper.notServlet",servletClass),e);    }catch (    Throwable e) {      e=ExceptionUtils.unwrapInvocationTargetException(e);      ExceptionUtils.handleThrowable(e);      unavailable(null);      if (log.isDebugEnabled()) {        log.debug(sm.getString("standardWrapper.instantiate",servletClass),e);      }      throw new ServletException(sm.getString("standardWrapper.instantiate",servletClass),e);    }    if (multipartConfigElement == null) {      MultipartConfig annotation=servlet.getClass().getAnnotation(MultipartConfig.class);      if (annotation != null) {        multipartConfigElement=new MultipartConfigElement(annotation);      }    }    processServletSecurityAnnotation(servlet.getClass());    if ((servlet instanceof ContainerServlet) && (isContainerProvidedServlet(servletClass) || ((Context)getParent()).getPrivileged())) {      ((ContainerServlet)servlet).setWrapper(this);    }    classLoadTime=(int)(System.currentTimeMillis() - t1);    if (servlet instanceof SingleThreadModel) {      if (instancePool == null) {        instancePool=new Stack<>();      }      singleThreadModel=true;    }    initServlet(servlet);    fireContainerEvent("load",this);    loadTime=System.currentTimeMillis() - t1;  }  finally {    if (swallowOutput) {      String log=SystemLogHandler.stopCapture();      if (log != null && log.length() > 0) {        if (getServletContext() != null) {          getServletContext().log(log);        } else {          out.println(log);        }      }    }  }  return servlet;}  }
class C{  public AudioStreamChunk(final BigInteger chunkLen){  super(GUID.GUID_AUDIOSTREAM,chunkLen);}  }
class C{  public AutoCloseInputStream(InputStream in){  super(in);}  }
class C{  public static void writeManager(PrintWriter writer,ObjectName objectName,MBeanServer mBeanServer,int mode) throws Exception {  if (mode == 0) {    writer.print("<br>");    writer.print(" Active sessions: ");    writer.print(mBeanServer.getAttribute(objectName,"activeSessions"));    writer.print(" Session count: ");    writer.print(mBeanServer.getAttribute(objectName,"sessionCounter"));    writer.print(" Max active sessions: ");    writer.print(mBeanServer.getAttribute(objectName,"maxActive"));    writer.print(" Rejected session creations: ");    writer.print(mBeanServer.getAttribute(objectName,"rejectedSessions"));    writer.print(" Expired sessions: ");    writer.print(mBeanServer.getAttribute(objectName,"expiredSessions"));    writer.print(" Longest session alive time: ");    writer.print(formatSeconds(mBeanServer.getAttribute(objectName,"sessionMaxAliveTime")));    writer.print(" Average session alive time: ");    writer.print(formatSeconds(mBeanServer.getAttribute(objectName,"sessionAverageAliveTime")));    writer.print(" Processing time: ");    writer.print(formatTime(mBeanServer.getAttribute(objectName,"processingTime"),false));  } else   if (mode == 1) {  }}  }
class C{  public void removeAll(){  leftComponent=rightComponent=null;  super.removeAll();  revalidate();  repaint();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node rootNode;  boolean state;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("Core","");  assertTrue("Core",state);}  }
class C{  public static void logAtLevel(Logger logger,LogLevel level,String message){switch (level) {case TRACE:    logger.trace(message);  break;case DEBUG:logger.debug(message);break;case INFO:logger.info(message);break;case WARN:logger.warn(message);break;case ERROR:logger.error(message);break;default :break;}}  }
class C{  private static boolean isSpace(char ch){  return XMLCharacterRecognizer.isWhiteSpace(ch);}  }
class C{  public static ObjectName createObjectName(String domain,ContextResource resource) throws MalformedObjectNameException {  ObjectName name=null;  String quotedResourceName=ObjectName.quote(resource.getName());  Object container=resource.getNamingResources().getContainer();  if (container instanceof Server) {    name=new ObjectName(domain + ":type=Resource" + ",resourcetype=Global,class="+ resource.getType()+ ",name="+ quotedResourceName);  } else   if (container instanceof Context) {    Context context=((Context)container);    ContextName cn=new ContextName(context.getName(),false);    Container host=context.getParent();    name=new ObjectName(domain + ":type=Resource" + ",resourcetype=Context,host="+ host.getName()+ ",context="+ cn.getDisplayName()+ ",class="+ resource.getType()+ ",name="+ quotedResourceName);  }  return (name);}  }
class C{  public Boolean isRequired(){  return required;}  }
class C{  public JsonValue read(String id) throws CoreTokenException {  Token token=cts.read(tokenIdFactory.generateTokenId(id));  if (token == null) {    return null;  }  return tokenAdapter.fromToken(token);}  }
class C{  public static Entry modifyEntryPermissive(final Entry entry,final Collection<Modification> changes) throws LdapException {  return modifyEntry0(entry,changes,true);}  }
class C{  public short readShort(){  if (remaining() < 2) {    throw new IndexOutOfBoundsException();  }  short v=0;  for (int i=0; i < 2; i++) {    v<<=8;    v|=sequence.byteAt(pos++) & 0xFF;  }  return v;}  }
class C{  public static IntroFragment newInstance(String title,int titleColor,String description,int descriptionColor){  Bundle args=new Bundle();  args.putString(TITLE,title);  args.putInt(TITLE_COLOR,titleColor);  args.putString(DESCRIPTION,description);  args.putInt(DESCRIPTION_COLOR,descriptionColor);  IntroFragment fragment=new IntroFragment();  fragment.setArguments(args);  return fragment;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.soap.FaultElement createFaultElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.soap.impl.FaultElementImpl();}  }
class C{  public String emitPattern(boolean withWhiteSpace){  StringBuffer result=new StringBuffer();  for (int i=0; i < patterns.size(); ++i) {    PatternEntry entry=patterns.get(i);    if (entry != null) {      entry.addToBuffer(result,true,withWhiteSpace,null);    }  }  return result.toString();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.SePartsType createSePartsType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.SePartsTypeImpl();}  }
class C{  protected View createChild(String name){  View view=null;  if (name.equals(TBL_CLIENTS)) {    view=new CCActionTable(this,tblModel,name);  } else   if (name.equals(TAB_CLIENT_DETECTION)) {    view=createTab(name);  } else   if (name.equals(SEC_MH_COMMON)) {    view=new CCSecondaryMasthead(this,name);  } else   if (name.equals(PGTITLE)) {    view=new CCPageTitle(this,ptModel,name);  } else   if (ptModel.isChildSupported(name)) {    view=ptModel.createChild(this,name);  } else   if (tblModel.isChildSupported(name)) {    view=tblModel.createChild(this,name);  } else {    view=super.createChild(name);  }  return view;}  }
class C{  @DataProvider(name="certificateExactMatchInvalidAssertionValues") public Object[][] createCertificateExactMatchingRuleInvalidAssertionValues(){  return new Object[][]{{"{serialnumber 123,issuer rdnSequence:\"c=DE\"}"},{"{serialNumber 123,issuer rdnSequence:\"invalid\"}"},{"{serialNumber 0123,issuer rdnSequence: \"cn=issuer\"}"},{"{  serialNumber  123  ,  issuer  rdnSequence:\"c=DE\"  }  trailing"}};}  }
class C{  public void testCase14(){  byte rBytes[]={1};  BigInteger aNumber=BigInteger.ONE;  BigInteger bNumber=BigInteger.ONE;  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void flush() throws IOException {  for (  Entry<String,Aggregator> entry : getFlushMap().entrySet()) {    if (store != null) {      store.persist(taskId,entry.getKey(),entry.getValue());    }    entry.getValue().reset();  }}  }
class C{  public ServiceTypeAttribute(byte[] octets){  super(octets);  type=OctetUtils.toIntVal(octets);}  }
class C{  public void makeImmutable(){}  }
class C{  public FloatHolder(float initial){  value=initial;}  }
class C{  public void addRating(final String rating){  addField(createRatingField(rating));}  }
class C{  public AMSearchResults searchOrganizations(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(ORGANIZATION),getSearchFilter(AMObject.ORGANIZATION),wildcard,avPairs,searchControl);}  }
class C{  public void printStackTrace(PrintWriter s){  super.printStackTrace(s);  if (cause != null) {    cause.printStackTrace(s);  }}  }
class C{  private static int streamtoword(byte data[],int offp[]){  int i;  int word=0;  int off=offp[0];  for (i=0; i < 4; i++) {    word=(word << 8) | (data[off] & 0xff);    off=(off + 1) % data.length;  }  offp[0]=off;  return word;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length) {    char newBuffer[]=new char[zzCurrentPos * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;  }  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);  if (numRead > 0) {    zzEndRead+=numRead;    return false;  }  if (numRead == 0) {    int c=zzReader.read();    if (c == -1) {      return true;    } else {      zzBuffer[zzEndRead++]=(char)c;      return false;    }  }  return true;}  }
class C{  protected void copyPrimitives(AbstractID3v2Tag copyObj){  logger.config("Copying primitives");  super.copyPrimitives(copyObj);  if (copyObj instanceof ID3v24Tag) {    ID3v24Tag copyObject=(ID3v24Tag)copyObj;    this.footer=copyObject.footer;    this.tagRestriction=copyObject.tagRestriction;    this.updateTag=copyObject.updateTag;    this.imageEncodingRestriction=copyObject.imageEncodingRestriction;    this.imageSizeRestriction=copyObject.imageSizeRestriction;    this.tagSizeRestriction=copyObject.tagSizeRestriction;    this.textEncodingRestriction=copyObject.textEncodingRestriction;    this.textFieldSizeRestriction=copyObject.textFieldSizeRestriction;  }}  }
class C{  public Observable<DriveId> createFile(DriveFolder folder,final Uri uri){  return createFile(folder,uri,uri.getLastPathSegment());}  }
class C{  public BevelBorder(int bevelType){  this.bevelType=bevelType;}  }
class C{  public boolean isBorderOpaque(){  return false;}  }
class C{  public ProxyWriter(Writer proxy){  super(proxy);}  }
class C{  public boolean failed(){  return (failure != null);}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public void testValueOfLongZero(){  long longVal=0L;  BigInteger aNumber=BigInteger.valueOf(longVal);  byte rBytes[]={0};  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,aNumber.signum());}  }
class C{  @Override public void removeAttribute(String name){  this.request.removeAttribute(name);}  }
class C{  public boolean isStale(){  return this.getParameterAsBoolean(ParameterNames.STALE);}  }
class C{  public void ancestorResized(HierarchyEvent e){}  }
class C{  public int count(){  return array.length;}  }
class C{  private static Charset toCharset(String csn) throws UnsupportedEncodingException {  requireNonNull(csn,"charsetName");  try {    return Charset.forName(csn);  } catch (  IllegalCharsetNameException|UnsupportedCharsetException unused) {    throw new UnsupportedEncodingException(csn);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementnormalize2.class,args);}  }
class C{  public synchronized boolean hasChanged(){  return changed;}  }
class C{  public CTSDJLDAPv3PersistentSearchBuilder withSearchBaseDN(DN searchBaseDN){  Reject.ifNull(searchBaseDN);  this.searchBaseDN=searchBaseDN;  return this;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_choose_filters_and_actions);  initializeListView();  initializeButtonPanel();  state=getSharedPreferences(ActivityChooseFiltersAndActions.KEY_STATE,Context.MODE_WORLD_READABLE | Context.MODE_WORLD_WRITEABLE);  listView.setItemChecked(state.getInt(KEY_PREF,0),true);}  }
class C{  public PdfCanvas curveTo(double x2,double y2,double x3,double y3){  contentStream.getOutputStream().writeDouble(x2).writeSpace().writeDouble(y2).writeSpace().writeDouble(x3).writeSpace().writeDouble(y3).writeSpace().writeBytes(v);  return this;}  }
class C{  public String toString(final String lineSeparator){  return toString(false,lineSeparator);}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws SAXException {  return null;}  }
class C{  public BasicSplitPaneDivider(BasicSplitPaneUI ui){  oneTouchSize=DefaultLookup.getInt(ui.getSplitPane(),ui,"SplitPane.oneTouchButtonSize",ONE_TOUCH_SIZE);  oneTouchOffset=DefaultLookup.getInt(ui.getSplitPane(),ui,"SplitPane.oneTouchButtonOffset",ONE_TOUCH_OFFSET);  centerOneTouchButtons=DefaultLookup.getBoolean(ui.getSplitPane(),ui,"SplitPane.centerOneTouchButtons",true);  setLayout(new DividerLayout());  setBasicSplitPaneUI(ui);  orientation=splitPane.getOrientation();  setCursor((orientation == JSplitPane.HORIZONTAL_SPLIT) ? Cursor.getPredefinedCursor(Cursor.E_RESIZE_CURSOR) : Cursor.getPredefinedCursor(Cursor.S_RESIZE_CURSOR));  setBackground(UIManager.getColor("SplitPane.background"));}  }
class C{  public boolean clearBackend(){  return clearBackend;}  }
class C{  public <O extends CustomBaseObject>List<O> flagLast(List<O> list){  if (list != null && !list.isEmpty()) {    list.get(list.size() - 1).setIsLast(true);  }  return list;}  }
class C{  protected void runSQL(String sql){  try {    DataSource dataSource=fooPersistence.getDataSource();    DB db=DBManagerUtil.getDB();    sql=db.buildSQL(sql);    sql=PortalUtil.transformSQL(sql);    SqlUpdate sqlUpdate=SqlUpdateFactoryUtil.getSqlUpdate(dataSource,sql);    sqlUpdate.update();  } catch (  Exception e) {    throw new SystemException(e);  }}  }
class C{  public static Border createLoweredSoftBevelBorder(){  if (sharedSoftLoweredBevel == null) {    sharedSoftLoweredBevel=new SoftBevelBorder(BevelBorder.LOWERED);  }  return sharedSoftLoweredBevel;}  }
class C{  public static boolean isValidName(String name){  if (name.length() == 0)   return false;  char ch=name.charAt(0);  if (isNameStart(ch) == false)   return false;  for (int i=1; i < name.length(); i++) {    ch=name.charAt(i);    if (isName(ch) == false) {      return false;    }  }  return true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapwrongdocumenterr.class,args);}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public boolean overlaps(ShapeTileBox p_other){  if (p_other.box_ll.v_x >= box_ur.v_x)   return false;  if (p_other.box_ll.v_y >= box_ur.v_y)   return false;  if (box_ll.v_x >= p_other.box_ur.v_x)   return false;  if (box_ll.v_y >= p_other.box_ur.v_y)   return false;  return true;}  }
class C{  public static String toHexString(byte b,boolean upperCase){  return IntegralToString.byteToHexString(b,upperCase);}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  public FactoryConfigurationError(Exception e){  super(e.toString());  this.exception=e;}  }
class C{  public PropertyDefinitionUsageBuilder(boolean isDetailed){  this.pimpl=new MyPropertyDefinitionVisitor(isDetailed);}  }
class C{  public PlaSide side_of(PlaPointFloat p_1,PlaPointFloat p_2){  double line_dir_x=p_2.v_x - p_1.v_x;  double line_dir_y=p_2.v_y - p_1.v_y;  double point_dir_x=v_x - p_1.v_x;  double point_dir_y=v_y - p_1.v_y;  double determinant=line_dir_x * point_dir_y - line_dir_y * point_dir_x;  return PlaSide.get_side_of(determinant);}  }
class C{  public String chooseServerAlias(String keyType,Principal[] issuers,Socket sock){  return sunX509KeyManager.chooseServerAlias(keyType,issuers,sock);}  }
class C{  private void checkUpdateEvent(boolean taskIsStarting){  int newSize=refreshQueue.size();  if (!taskIsStarting) {    newSize=newSize - 1;  }  if (newSize != queueTotalSize) {    if (queueTotalSize == 0 && newSize >= 1) {      fireEvent(BrowserEvent.Type.UPDATE_START);    } else     if (queueTotalSize >= 1 && newSize == 0) {      fireEvent(BrowserEvent.Type.UPDATE_END);    }    queueTotalSize=newSize;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList testList;  Node piNode;  int nodeType;  doc=(Document)load("staff",false);  testList=doc.getChildNodes();  piNode=testList.item(0);  nodeType=(int)piNode.getNodeType();  assertEquals("nodeProcessingInstructionNodeTypeAssert1",7,nodeType);}  }
class C{  public void initialize(Map configParams){  String delimiterConfig=(String)configParams.get(ResourceMatch.RESOURCE_COMPARATOR_DELIMITER);  if (delimiterConfig != null) {    this.delimiter=delimiterConfig;  }  String caseConfig=(String)configParams.get(ResourceMatch.RESOURCE_COMPARATOR_CASE_SENSITIVE);  if (caseConfig != null) {    if (caseConfig.equals("true")) {      this.caseSensitive=true;    } else     if (caseConfig.equals("false")) {      this.caseSensitive=false;    } else {      this.caseSensitive=true;    }  }  String wildcardConfig=(String)configParams.get(ResourceMatch.RESOURCE_COMPARATOR_WILDCARD);  if (wildcardConfig != null) {    this.wildcard=wildcardConfig;  }  String oneLevelWildcardConfig=(String)configParams.get(ResourceMatch.RESOURCE_COMPARATOR_ONE_LEVEL_WILDCARD);  if (oneLevelWildcardConfig != null) {    this.oneLevelWildcard=oneLevelWildcardConfig;  }  if (debug.messageEnabled()) {    debug.message("PrefixResourceName:initialize():" + " delimiter = " + delimiter + " wildcard = "+ wildcard+ " oneLevelWildcard = "+ oneLevelWildcard+ " case = "+ caseConfig);  }  oneLevelWildcardLength=oneLevelWildcard.length();  wildcardLength=wildcard.length();  if (oneLevelWildcard.indexOf(wildcard) != -1) {    wildcardEmbedded=true;  } else {    wildcardEmbedded=false;  }  if (wildcard.indexOf(oneLevelWildcard) != -1) {    oneLevelWildcardEmbedded=true;  } else {    oneLevelWildcardEmbedded=false;  }  if (debug.messageEnabled()) {    debug.message("wildcardEmbedded,oneLevelWildcardEmbedded" + wildcardEmbedded + ","+ oneLevelWildcardEmbedded);  }  return;}  }
class C{  private boolean authenticateToDatastore(String userName,String userPassword) throws AuthLoginException {  boolean retval=false;  Callback[] callbacks=new Callback[2];  NameCallback nameCallback=new NameCallback("NamePrompt");  nameCallback.setName(userName);  callbacks[0]=nameCallback;  PasswordCallback passwordCallback=new PasswordCallback("PasswordPrompt",false);  passwordCallback.setPassword(userPassword.toCharArray());  callbacks[1]=passwordCallback;  try {    AMIdentityRepository idrepo=getAMIdentityRepository(getRequestOrg());    retval=idrepo.authenticate(IdType.AGENT,callbacks);  } catch (  IdRepoException idrepoExp) {    debug.message("Application.authenticateToDatastore: IdRepo Exception",idrepoExp);  }  return retval;}  }
class C{  public SuffixFileFilter(List<String> suffixes){  this(suffixes,IOCase.SENSITIVE);}  }
class C{  public static void saveTokenWithKey(String key,Object value){  localCache.put(key,value);}  }
class C{  public TimeoutEvent(Object source,ClientTransaction clientTransaction,Timeout timeout){  super(source);  m_clientTransaction=clientTransaction;  m_isServerTransaction=false;  m_timeout=timeout;}  }
class C{  private ResourceException generateException(CoreTokenException e){  return new InternalServerErrorException(e.getMessage(),e);}  }
class C{  public static boolean deleteQuietly(File file){  if (file == null) {    return false;  }  try {    if (file.isDirectory()) {      cleanDirectory(file);    }  } catch (  Exception ignored) {  }  try {    return file.delete();  } catch (  Exception ignored) {    return false;  }}  }
class C{  public boolean isLeafNode(){  return (children.size() == 0);}  }
class C{  public W3CEndpointReferenceBuilder interfaceName(QName interfaceName){  this.interfaceName=interfaceName;  return this;}  }
class C{  private boolean hostMatch(String host1,String host2){  if (host1 == null) {    throw new IllegalArgumentException("The host1 parameter cannot be null");  }  if (host2 == null) {    throw new IllegalArgumentException("The host2 parameter cannot be null");  }  String[] h1=host1.split("\\.");  String[] h2=host2.split("\\.");  boolean hostMatch=h1.length == h2.length;  for (int i=0; i < h1.length && hostMatch; i++) {    if (!"*".equals(h1[i]) && !"*".equals(h2[i])) {      hostMatch=h1[i].equalsIgnoreCase(h2[i]);    }  }  return hostMatch;}  }
class C{  private String computeExpectedRootElements(){  String r="";  String[] probePoints=grammarInfo.getProbePoints();  for (int i=0; i < probePoints.length; i+=2) {    if (grammarInfo.recognize(probePoints[i],probePoints[i + 1])) {      if (r.length() != 0)       r+=',';      r+="<{" + probePoints[i] + "}"+ probePoints[i + 1]+ ">";    }  }  return r;}  }
class C{  private boolean verifyLogoutSignature(HttpServletRequest request,ProviderDescriptorType remoteDescriptor,String remoteEntityId,boolean isIDP) throws SAMLException, FSException {  FSUtils.debug.message("Entered FSProcessLogoutServlet::verifyLogoutSignature");  X509Certificate cert=KeyUtil.getVerificationCert(remoteDescriptor,remoteEntityId,isIDP);  if (cert == null) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSProcessLogoutServlet.verifyLogoutSignature: " + "couldn't obtain this site's cert.");    }    throw new SAMLResponderException(FSUtils.bundle.getString(IFSConstants.NO_CERT));  }  boolean isValidSign=FSSignatureUtil.verifyRequestSignature(request,cert);  if (!isValidSign) {    FSUtils.debug.error("Logout request is not properly signed");    return false;  } else {    FSUtils.debug.message("Logout request is properly signed");    return true;  }}  }
class C{  public NameID createNameID(Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.NAMEID,elem);  if (obj == null) {    return new NameIDImpl(elem);  } else {    return (NameID)obj;  }}  }
class C{  public int capacity(){  return delegate.capacity();}  }
class C{  @Override public boolean supportsPredictiveItemAnimations(){  return false;}  }
class C{  public void handleTblBootstrapResOffButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {  setSubmitCycle(true);  CCActionTable table=(CCActionTable)getChild(AMAdminConstants.DISCOVERY_SERVICE_NAME_BOOTSTRAP_RES_OFF);  table.restoreStateData();  CCActionTableModel tblModel=(CCActionTableModel)propertySheetModel.getModel(AMAdminConstants.DISCOVERY_SERVICE_NAME_BOOTSTRAP_RES_OFF);  Integer[] selected=tblModel.getSelectedRows();  if ((selected != null) && (selected.length > 0)) {    try {      OrderedSet tblValues=(OrderedSet)getPageSessionAttribute(AMAdminConstants.DISCOVERY_SERVICE_NAME_BOOTSTRAP_RES_OFF);      SMDiscoveryServiceData smEntry=SMDiscoveryServiceData.getEntries(tblValues);      smEntry.deleteDiscoEntries(selected);      tblValues=(OrderedSet)smEntry.getDiscoveryEntries();      setPageSessionAttribute(AMAdminConstants.DISCOVERY_SERVICE_NAME_BOOTSTRAP_RES_OFF,tblValues);      populateBootstrapResOffTable(tblValues);    } catch (    AMConsoleException e) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    }  }  forwardTo();}  }
class C{  public Value concatValuesToString(List<Value> values,SemanticScope scope,LineCol lineCol) throws SyntaxException {  if (values.size() == 1 && values.get(0) instanceof StringConstantValue) {    return values.get(0);  } else {    if (!(values.get(0) instanceof StringConstantValue) && !(values.get(1) instanceof StringConstantValue)) {      StringConstantValue emptyString=new StringConstantValue("");      emptyString.setType((SClassDef)getTypeWithName("java.lang.String",LineCol.SYNTHETIC));      values.add(0,emptyString);    }    Iterator<Value> it=values.iterator();    Value finalValue=it.next();    while (it.hasNext()) {      finalValue=parseValueFromTwoVarOp(finalValue,"+",it.next(),scope,lineCol);    }    STypeDef STRING=getTypeWithName("java.lang.String",LineCol.SYNTHETIC);    if (finalValue.type().equals(STRING)) {      return finalValue;    } else {      return new Ins.CheckCast(finalValue,STRING,LineCol.SYNTHETIC);    }  }}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  DTMIterator nodes=m_arg0.asIterator(xctxt,xctxt.getCurrentNode());  double sum=0.0;  int pos;  while (DTM.NULL != (pos=nodes.nextNode())) {    DTM dtm=nodes.getDTM(pos);    XMLString s=dtm.getStringValue(pos);    if (null != s)     sum+=s.toDouble();  }  nodes.detach();  return new XNumber(sum);}  }
class C{  public void scheduleAtFixedRate(TimerTask task,long delay,long period){  if (delay < 0)   throw new IllegalArgumentException("Negative delay.");  if (period <= 0)   throw new IllegalArgumentException("Non-positive period.");  sched(task,System.currentTimeMillis() + delay,period);}  }
class C{  public ExtensionValue(byte[] encoding){  this.encoding=encoding;}  }
class C{  public int readCapArray(){  if (null != mService) {    return mService.getCapArray();  }  return 0;}  }
class C{  public RPSigninResponse(HttpServletRequest request,HttpServletResponse response,String wresult,String wctx){  super(request,response);  this.wresult=wresult;  this.wctx=wctx;}  }
class C{  public static String toString(long n){  return IntegralToString.longToString(n);}  }
class C{  public void auditCreate(Map<String,Object> newState){  if (shouldAudit(ConfigOperation.CREATE)) {    JsonValue afterState=convertObjectToJsonValue(newState);    AMConfigAuditEventBuilder builder=getBaseBuilder().operation(ConfigOperation.CREATE);    recordBeforeStateIfNotNull(builder,beforeState);    recordAfterStateIfNotNull(builder,afterState);    auditEventPublisher.tryPublish(CONFIG_TOPIC,builder.toEvent());  }}  }
class C{  public boolean isSelected(){  return (stateMask & SELECTED) != 0;}  }
class C{  public int hashCode(){  if (!isHashValueSet) {    hashValue=super.hashCode();    isHashValueSet=true;  }  return hashValue;}  }
class C{  public void write(String str,int off,int len){  buf.append(str.substring(off,off + len));}  }
class C{  private void createOrModifySocialService(String realm,String chainName,String providerName,String icon) throws WorkflowException {  try {    SSOToken token=getAdminToken();    OrganizationConfigManager ocm=new OrganizationConfigManager(token,realm);    Map<String,Set<String>> attrs=new HashMap<String,Set<String>>(4);    String prefix="[" + providerName + "]=";    attrs.put(SERVICE_DISPLAY_NAME,asSet(prefix + providerName));    attrs.put(SERVICE_CHAIN_NAME,asSet(prefix + chainName));    attrs.put(SERVICE_ICON,asSet(prefix + icon));    attrs.put(SERVICE_ENABLED,asSet(providerName));    if (ocm.getAssignedServices().contains(SERVICE_NAME)) {      ServiceConfig serviceConfig=ocm.getServiceConfig(SERVICE_NAME);      serviceConfig.setAttributes(mergeAttributes(serviceConfig.getAttributesWithoutDefaults(),attrs));    } else {      ocm.assignService(SERVICE_NAME,attrs);    }  } catch (  SMSException smse) {    DEBUG.error("An error occurred while creating/modifying social authentication service",smse);    throw new WorkflowException("social-service-error",null);  }catch (  SSOException ssoe) {    DEBUG.warning("A session error occurred while creating/modifying social authentication service",ssoe);    throw new WorkflowException("social-service-error",null);  }}  }
class C{  public BlockVector(Vector vec){  this.x=vec.getX();  this.y=vec.getY();  this.z=vec.getZ();}  }
class C{  public void printAlloffsets(){  System.out.println("Print Offsets:start");  dataBuffer.rewind();  dataBuffer.position(VERSION_FLAG_LENGTH + OTHER_FLAG_LENGTH + NO_OF_OFFSETS_LENGTH);  for (int i=0; i < noOfOffSets - 1; i++) {    int offset=Utils.getIntBE(dataBuffer,dataBuffer.position(),(dataBuffer.position() + OFFSET_LENGTH - 1));    System.out.println("offset into audio data is:" + offset);    dataBuffer.position(dataBuffer.position() + OFFSET_LENGTH);  }  int offset=Utils.getIntBE(dataBuffer,dataBuffer.position(),(dataBuffer.position() + OFFSET_LENGTH - 1));  System.out.println("offset into audio data is:" + offset);  System.out.println("Print Offsets:end");}  }
class C{  @Override public Object lookupLink(Name name) throws NamingException {  return lookup(name,false);}  }
class C{  public DOMStructure(Node node){  if (node == null) {    throw new NullPointerException("node cannot be null");  }  this.node=node;}  }
class C{  private String configure(Properties config){  String serverURL=config.getProperty(SERVER_URL);  String deploymentURI=config.getProperty(DEPLOYMENT_URI);  userStoreType=config.getProperty(USERSTORE_TYPE);  if (config.getProperty(ACCEPT_LICENSES) != null && !config.getProperty(ACCEPT_LICENSES).isEmpty()) {    acceptLicense=Boolean.parseBoolean(config.getProperty(ACCEPT_LICENSES));  }  for (  String key : config.stringPropertyNames()) {    if (key.equals(ACCEPT_LICENSES) || key.equals(DEPLOYMENT_URI)) {      continue;    }    String val=config.getProperty(key);    if (val == null || val.length() < 1) {      continue;    }    if (postBodySB.length() > 0) {      postBodySB.append("&");    }    String encodedVal;    try {      encodedVal=URLEncoder.encode(val,"UTF-8");    } catch (    UnsupportedEncodingException ueex) {      encodedVal=val;    }    postBodySB.append(key).append("=").append(encodedVal);    if (key.equals(ADMIN_PWD)) {      postBodySB.append("&").append(ADMIN_CONFIRM_PWD).append("=").append(encodedVal);    } else     if (key.equals(AMLDAPUSERPASSWD)) {      postBodySB.append("&").append(AMLDAPUSERPASSWD_CONFIRM).append("=").append(encodedVal);    }  }  if (serverURL == null) {    System.out.println(rb.getString("errorServerURL"));    System.exit(-1);  }  if (deploymentURI == null) {    System.out.println(rb.getString("errorDeploymentURI"));    System.exit(-1);  }  if (!deploymentURI.startsWith("/")) {    deploymentURI="/" + deploymentURI;  }  if (serverURL.endsWith("/")) {    serverURL=serverURL.substring(0,serverURL.length() - 1);  }  return serverURL + deploymentURI;}  }
class C{  private boolean checkCurrentAnimationPart(AnimationPart part){switch (part) {case FIRST:{      return mLoadingAnimationTime < getAnimationTimePart(AnimationPart.FOURTH);    }case SECOND:case THIRD:{    return mLoadingAnimationTime < getAnimationTimePart(part);  }case FOURTH:{  return mLoadingAnimationTime > getAnimationTimePart(AnimationPart.THIRD);}default :return false;}}  }
class C{  public final void clearPassword(){  Arrays.fill(password,'?');  password=null;}  }
class C{  static boolean createDirectory(File f) throws IOException {  if (f.exists()) {    return f.isDirectory();  }  return f.mkdirs();}  }
class C{  public R visitDN(DNPropertyDefinition pd,P p){  return visitUnknown(pd,p);}  }
class C{  private ArrayList<LocalizableMessage> checkPort(){  ArrayList<LocalizableMessage> errorMsgs=new ArrayList<>();  if (cbEnableSSL.isSelected()) {    String sPort=tfPort.getText();    int port=-1;    try {      port=Integer.parseInt(sPort);      if (port < Installer.MIN_PORT_VALUE || port > Installer.MAX_PORT_VALUE) {        errorMsgs.add(INFO_INVALID_SECURE_PORT_VALUE_RANGE.get(Installer.MIN_PORT_VALUE,Installer.MAX_PORT_VALUE));      } else       if (!Utils.canUseAsPort(port)) {        if (Utils.isPrivilegedPort(port)) {          errorMsgs.add(INFO_CANNOT_BIND_PRIVILEDGED_PORT.get(port));        } else {          errorMsgs.add(INFO_CANNOT_BIND_PORT.get(port));        }      }    } catch (    NumberFormatException nfe) {      errorMsgs.add(INFO_INVALID_SECURE_PORT_VALUE_RANGE.get(Installer.MIN_PORT_VALUE,Installer.MAX_PORT_VALUE));    }  }  setValidLater(cbEnableSSL,errorMsgs.isEmpty());  return errorMsgs;}  }
class C{  public void testToString() throws Exception {  assertTrue(CoderResult.OVERFLOW.toString().indexOf("OVERFLOW") != -1);  assertTrue(CoderResult.UNDERFLOW.toString().indexOf("UNDERFLOW") != -1);  assertTrue(CoderResult.malformedForLength(666).toString().indexOf("666") != -1);  assertTrue(CoderResult.unmappableForLength(666).toString().indexOf("666") != -1);}  }
class C{  public ChannelBinding(byte[] appData){  this(null,null,appData);}  }
class C{  public boolean existsHash(String hashName){  try {    String realname=Utils.md5(hashName);    String directory=path + "/" + Utils.md5(dbName)+ "/"+ realname;    return new File(directory).exists();  } catch (  Exception e) {    return false;  }}  }
class C{  public static RequirementsBuilder newArray(int minItems,RequirementsBuilder builder){  return newArray(minItems,builder,null);}  }
class C{  public final void characters(char chars[],int start,int length) throws org.xml.sax.SAXException {  if (m_elemContext.m_isRaw) {    try {      if (m_elemContext.m_startTagOpen) {        closeStartTag();        m_elemContext.m_startTagOpen=false;      }      m_ispreserve=true;      writeNormalizedChars(chars,start,length,false,m_lineSepUse);      if (m_tracer != null)       super.fireCharEvent(chars,start,length);      return;    } catch (    IOException ioe) {      throw new org.xml.sax.SAXException(Utils.messages.createMessage(MsgKey.ER_OIERROR,null),ioe);    }  } else {    super.characters(chars,start,length);  }}  }
class C{  private String retrieveGenerationId(final File directory){  final File generationId=retrieveGenerationIdFile(directory);  if (generationId != null) {    String filename=generationId.getName();    return filename.substring(GENERATION_ID_FILE_PREFIX.length(),filename.length() - GENERATION_ID_FILE_SUFFIX.length());  }  return null;}  }
class C{  public boolean isRepeats(){  return repeats;}  }
class C{  public TransactionTerminatedEvent(Object source,ServerTransaction serverTransaction){  super(source);  m_serverTransaction=serverTransaction;  m_isServerTransaction=true;}  }
class C{  public PlaPoint nearest_end_point(PlaPointInt p_from_point){  PlaPoint p1=corner_first();  PlaPoint p2=corner_last();  PlaPointFloat from_point=p_from_point.to_float();  double d1=from_point.distance(p1.to_float());  double d2=from_point.distance(p2.to_float());  if (d1 < d2)   return p1; else   return p2;}  }
class C{  int[] decodeEnd(BitArray row) throws NotFoundException {  row.reverse();  try {    int endStart=skipWhiteSpace(row);    int[] endPattern=findGuardPattern(row,endStart,END_PATTERN_REVERSED);    validateQuietZone(row,endPattern[0]);    int temp=endPattern[0];    endPattern[0]=row.getSize() - endPattern[1];    endPattern[1]=row.getSize() - temp;    return endPattern;  }  finally {    row.reverse();  }}  }
class C{  public int rtf(XPathContext support){  DTM frag=support.createDocumentFragment();  frag.appendTextChild(str());  return frag.getDocument();}  }
class C{  public void pushRTFContext(){  m_last_pushed_rtfdtm.push(m_which_rtfdtm);  if (null != m_rtfdtm_stack)   ((SAX2RTFDTM)(getRTFDTM())).pushRewindMark();}  }
class C{  public StateEdit(StateEditable anObject,String name){  super();  init(anObject,name);}  }
class C{  public static byte[] genKey(byte[] keyBytes){  byte[] key=new byte[SECRET_KEY_SIZE_BYTES];  for (int i=0; i < keyBytes.length; i++) {    key[i % SECRET_KEY_SIZE_BYTES]^=keyBytes[i];  }  return key;}  }
class C{  static synchronized void cancel(final TimerTask task){  task.cancel();  _usageCount--;  if (_usageCount == 0) {    _timer.cancel();    _timer=null;  }}  }
class C{  static String format(String property,Object[] args){  String text=ResourceBundle.getBundle(Messages.class.getName()).getString(property);  return MessageFormat.format(text,args);}  }
class C{  public void closeEntry() throws IOException {  ensureOpen();  while (read(tmpbuf,0,tmpbuf.length) != -1)   ;  entryEOF=true;}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mCurrentColor);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public void start(){  timerQueue().addTimer(this,getInitialDelay());}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.SignedEndorsingEncryptedSupportingTokensElement createSignedEndorsingEncryptedSupportingTokensElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.SignedEndorsingEncryptedSupportingTokensElementImpl();}  }
class C{  public PWResetException(String bundleName,String errCode,Object[] args){  super(bundleName,errCode,args);  errList=new ArrayList(1);  errList.add(getMessage());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeelementnodename.class,args);}  }
class C{  public BasicPoolEntryRef(BasicPoolEntry entry,ReferenceQueue<Object> queue){  super(entry,queue);  if (entry == null) {    throw new IllegalArgumentException("Pool entry must not be null.");  }  route=entry.getPlannedRoute();}  }
class C{  public Iterator<E> iterator(){  return m.navigableKeySet().iterator();}  }
class C{  public void checkFinalAndOverride(SMethodDef method,SMethodDef overriddenMethod) throws SyntaxException {  if (overriddenMethod.modifiers().contains(SModifier.FINAL)) {    err.SyntaxException(overriddenMethod + " cannot be overridden",method.line_col());    return;  }  if (!overriddenMethod.getReturnType().isAssignableFrom(method.getReturnType())) {    err.SyntaxException("Trying to override " + overriddenMethod + " but return type mismatch",method.line_col());  }  overriddenMethod.overridden().add(method);  method.overRide().add(overriddenMethod);}  }
class C{  void addPermission(Permission permission){  if ((securityManager != null) && (permission != null)) {    permissionList.add(permission);  }}  }
class C{  public static SimpleBindRequest newSimpleBindRequest(final String name,final char[] password){  return Requests.newSimpleBindRequest(name,password).addControl(TransactionIdControl.newControl(AuditRequestContext.createSubTransactionIdValue()));}  }
class C{  public void runTransformThread(){  ThreadControllerWrapper.runThread(this,-1);}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  UrlCollectDao.dropTable(db,ifExists);  CustomerDao.dropTable(db,ifExists);  OrderDao.dropTable(db,ifExists);}  }
class C{  public ServletException(String message){  super(message);}  }
class C{  protected void addCustomMetadataExtensions(XMPMeta xmpMeta){}  }
class C{  @Override public String toString(){  if (stringValue == null) {    final StringBuilder builder=new StringBuilder();    builder.append(rdn);    for (DN dn=parent; dn.rdn != null; dn=dn.parent) {      builder.append(RDN_CHAR_SEPARATOR);      if (dn.stringValue != null) {        builder.append(dn.stringValue);        break;      }      builder.append(dn.rdn);    }    stringValue=builder.toString();  }  return stringValue;}  }
class C{  private void resizeRow(int width,View view){  LinearLayout.LayoutParams params=(LinearLayout.LayoutParams)mRow.getLayoutParams();  mRowWidth=mRowWidth + width;  params.weight=mRow.getChildCount();  mRow.setLayoutParams(params);}  }
class C{  public OffsetDateTime plusWeeks(long weeks){  return with(dateTime.plusWeeks(weeks),offset);}  }
class C{  Node(Object item,boolean isData){  UNSAFE.putObject(this,itemOffset,item);  this.isData=isData;}  }
class C{  public DomainFakeCfg(DN baseDN,int serverId,SortedSet<String> replServers,int groupId){  this.baseDN=baseDN;  this.serverId=serverId;  this.replicationServers=replServers;  this.groupId=groupId;}  }
class C{  @Override public Foo findByUuid_C_Last(String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByUuid_C_Last(uuid,companyId,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(6);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("uuid=");  msg.append(uuid);  msg.append(", companyId=");  msg.append(companyId);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  private void doReleaseShared(){  for (; ; ) {    Node h=head;    if (h != null && h != tail) {      int ws=h.waitStatus;      if (ws == Node.SIGNAL) {        if (!compareAndSetWaitStatus(h,Node.SIGNAL,0))         continue;        unparkSuccessor(h);      } else       if (ws == 0 && !compareAndSetWaitStatus(h,0,Node.PROPAGATE))       continue;    }    if (h == head)     break;  }}  }
class C{  public static Object evaluateExpressionToObject(final String el){  if (el == null) {    return null;  }  final Application application=FacesContext.getCurrentInstance().getApplication();  return application.evaluateExpressionGet(FacesContext.getCurrentInstance(),el,Object.class);}  }
class C{  public static boolean isDateEqaualed(final java.util.Date date1,final java.util.Date date2){  final String d1=JKFormatUtil.formatDate(date1,JKFormatUtil.MYSQL_DATE_DB_PATTERN);  final String d2=JKFormatUtil.formatDate(date2,JKFormatUtil.MYSQL_DATE_DB_PATTERN);  return d1.equalsIgnoreCase(d2);}  }
class C{  public int value(){  return _value;}  }
class C{  public static boolean isSupplementaryCodePoint(int codePoint){  return codePoint >= MIN_SUPPLEMENTARY_CODE_POINT && codePoint < MAX_CODE_POINT + 1;}  }
class C{  private int calculateDeficit(final ObjectDeque<T> objectDeque){  if (objectDeque == null) {    return getMinIdlePerKey();  }  final int maxTotal=getMaxTotal();  final int maxTotalPerKeySave=getMaxTotalPerKey();  int objectDefecit=0;  objectDefecit=getMinIdlePerKey() - objectDeque.getIdleObjects().size();  if (maxTotalPerKeySave > 0) {    final int growLimit=Math.max(0,maxTotalPerKeySave - objectDeque.getIdleObjects().size());    objectDefecit=Math.min(objectDefecit,growLimit);  }  if (maxTotal > 0) {    final int growLimit=Math.max(0,maxTotal - getNumActive() - getNumIdle());    objectDefecit=Math.min(objectDefecit,growLimit);  }  return objectDefecit;}  }
class C{  public void dumpResourceConfigs(Writer writer,boolean showKeys) throws IOException {  try (AutoCloseableCsvWriter csvWriter=new AutoCloseableCsvWriter(writer)){    csvWriter.writeNext(CONFIGS_COLUMNS);    for (    TypeChunk typeChunk : getTypeChunksBySparsity()) {      csvWriter.writeNext(dumpResourceConfig(typeChunk,showKeys));    }  } }  }
class C{  public static List<Foo> findByUuid(java.lang.String uuid){  return getPersistence().findByUuid(uuid);}  }
class C{  private void checkFileWrittenCorrectly(RandomAccessFile rafTemp,Mp4BoxHeader mdatHeader,FileChannel fileWriteChannel,Mp4StcoBox stco) throws CannotWriteException, IOException {  logger.config("Checking file has been written correctly");  try {    Mp4AtomTree newAtomTree;    newAtomTree=new Mp4AtomTree(rafTemp,false);    Mp4BoxHeader newMdatHeader=newAtomTree.getBoxHeader(newAtomTree.getMdatNode());    if (newMdatHeader == null) {      throw new CannotWriteException(ErrorMessage.MP4_CHANGES_TO_FILE_FAILED_NO_DATA.getMsg());    }    if (newMdatHeader.getLength() != mdatHeader.getLength()) {      throw new CannotWriteException(ErrorMessage.MP4_CHANGES_TO_FILE_FAILED_DATA_CORRUPT.getMsg());    }    Mp4BoxHeader newUdtaHeader=newAtomTree.getBoxHeader(newAtomTree.getUdtaNode());    if (newUdtaHeader == null) {      throw new CannotWriteException(ErrorMessage.MP4_CHANGES_TO_FILE_FAILED_NO_TAG_DATA.getMsg());    }    Mp4BoxHeader newMetaHeader=newAtomTree.getBoxHeader(newAtomTree.getMetaNode());    if (newMetaHeader == null) {      throw new CannotWriteException(ErrorMessage.MP4_CHANGES_TO_FILE_FAILED_NO_TAG_DATA.getMsg());    }    Mp4StcoBox newStco=newAtomTree.getStco();    logger.finer("stco:Original First Offset" + stco.getFirstOffSet());    logger.finer("stco:Original Diff" + (int)(stco.getFirstOffSet() - mdatHeader.getFilePos()));    logger.finer("stco:Original Mdat Pos" + mdatHeader.getFilePos());    logger.finer("stco:New First Offset" + newStco.getFirstOffSet());    logger.finer("stco:New Diff" + (int)((newStco.getFirstOffSet() - newMdatHeader.getFilePos())));    logger.finer("stco:New Mdat Pos" + newMdatHeader.getFilePos());    int diff=(int)(stco.getFirstOffSet() - mdatHeader.getFilePos());    if ((newStco.getFirstOffSet() - newMdatHeader.getFilePos()) != diff) {      int discrepancy=(int)((newStco.getFirstOffSet() - newMdatHeader.getFilePos()) - diff);      throw new CannotWriteException(ErrorMessage.MP4_CHANGES_TO_FILE_FAILED_INCORRECT_OFFSETS.getMsg(discrepancy));    }  } catch (  Exception e) {    if (e instanceof CannotWriteException) {      throw (CannotWriteException)e;    } else {      e.printStackTrace();      throw new CannotWriteException(ErrorMessage.MP4_CHANGES_TO_FILE_FAILED.getMsg() + ":" + e.getMessage());    }  } finally {    rafTemp.close();    fileWriteChannel.close();  }  logger.config("File has been written correctly");}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  init(getName());}  }
class C{  @Override public boolean onPreparePanel(final int featureId,final View view,final Menu menu){  return super.onPreparePanel(featureId,view,menu);}  }
class C{  private void DrawViewsAtList(){  for (int i=0; i < listViews.size(); ++i) {    DetailView dvView=listViews.get(i);    View vChild=getChildAt(i);    int iL=dvView.getPoint().x * mUnitWidth;    int iT=dvView.getPoint().y * mUnitHeight;    int iR=iL + dvView.getWidthNum() * mUnitWidth;    int iB=iT + dvView.getHeightNum() * mUnitHeight;    vChild.setLeft(iL + mViewPadding);    vChild.setTop(iT + mViewPadding);    vChild.setRight(iR - mViewPadding);    vChild.setBottom(iB - mViewPadding);  }}  }
class C{  public void removeFromParent(){  MutableTreeNode parent=(MutableTreeNode)getParent();  if (parent != null) {    parent.remove(this);  }}  }
class C{  public static Object copyObject(Object obj,ORB orb) throws RemoteException {  if (utilDelegate != null) {    return utilDelegate.copyObject(obj,orb);  }  return null;}  }
class C{  protected void deleteExpiredEntries(){  if (defaultLifetime <= 0) {    return;  }  LinkedListNode node=ageList.getLast();  if (node == null) {    return;  }  while (node.timestamp < System.currentTimeMillis() - node.creationTimes) {    remove(node.object);    node=ageList.getLast();    if (node == null) {      return;    }  }}  }
class C{  public static void closeSession() throws HibernateException {  Session session=(Session)threadLocal.get();  threadLocal.set(null);  if (session != null) {    session.close();  }}  }
class C{  private void exportConfigExport(){  if (currentRecord.getRecordProperties().isConfigExportEnabled()) {    SSOToken adminSSOToken=AccessController.doPrivileged(AdminTokenAction.getInstance());    try {      ServiceManager sm=new ServiceManager(adminSSOToken);      AMEncryption encryptObj=new JCEEncryption();      ((ConfigurableKey)encryptObj).setPassword(currentRecord.getRecordProperties().getConfigExportPassword());      String resultXML=sm.toXML(encryptObj);      SimpleDateFormat dateFormat=new SimpleDateFormat(DATE_FORMAT_UID);      String xmlName=RecordConstants.OPENAM_CONFIG_EXPORT_FILE_NAME.replace("$DATE$",dateFormat.format(newDate()));      File file=new File(currentRecord.getFolderPath() + File.separator + xmlName);      PrintWriter printWriter=new PrintWriter(new FileWriter(file,false),true);      printWriter.println(resultXML);      printWriter.flush();    } catch (    Exception e) {      debug.error("Can't export OpenAM configuration",e);    }  }}  }
class C{  private static String removeBackslashes(String s){  int n=s.length();  char[] result=new char[n];  int i;  int j=0;  char c;  for (i=0; i < n; ++i) {    c=s.charAt(i);    if (c == '\\') {      c=s.charAt(++i);    }    result[j++]=c;  }  return new String(result,0,j);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrnextsiblingnull.class,args);}  }
class C{  public void testPosNegFirstLonger(){  String numA="2837462783428374767845648748973847593874837948575684767";  String numB="-293478573489347658763745839457637";  String res="-2837462783428374767845615168483972194300564226167553532";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public void test_ConstructorLjava_lang_ObjectLjava_lang_ref_ReferenceQueue(){  ReferenceQueue rq=new ReferenceQueue();  bool=new Boolean(true);  try {    PhantomReference pr=new PhantomReference(bool,rq);    Thread.sleep(1000);    assertTrue("Initialization failed.",!pr.isEnqueued());  } catch (  Exception e) {    fail("Exception during test : " + e.getMessage());  }  assertTrue("should always pass",bool.booleanValue());  boolean exception=false;  try {    new PhantomReference(bool,null);  } catch (  NullPointerException e) {    exception=true;  }  assertTrue("Should not throw NullPointerException",!exception);}  }
class C{  public static boolean dispatchCommand(CommandSender sender,String commandLine) throws CommandException {  return server.dispatchCommand(sender,commandLine);}  }
class C{  public CopyOnWriteArraySet(Collection<? extends E> c){  if (c.getClass() == CopyOnWriteArraySet.class) {    @SuppressWarnings("unchecked") CopyOnWriteArraySet<E> cc=(CopyOnWriteArraySet<E>)c;    al=new CopyOnWriteArrayList<E>(cc.al);  } else {    al=new CopyOnWriteArrayList<E>();    al.addAllAbsent(c);  }}  }
class C{  public final int size(){  return (m_lastChunk << m_chunkBits) + m_firstFree;}  }
class C{  public static int[] transformIntArray(Integer[] source){  int[] destin=new int[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public void processedPasswordChange(Long eventTime,String userDN) throws AMAuthCallBackException {  Map eventParams=new HashMap();  eventParams.put(AMAuthCallBack.TIME_KEY,eventTime);  eventParams.put(AMAuthCallBack.REALM_KEY,theRealm);  eventParams.put(AMAuthCallBack.USER_KEY,userDN);  processedEvent(AMAuthCallBack.PASSWORD_CHANGE,eventParams);}  }
class C{  public static DN rootDN(){  return ROOT_DN;}  }
class C{  public AnyType createAnyType() throws javax.xml.bind.JAXBException {  return new org.w3._2001.xmlschema.impl.AnyTypeImpl();}  }
class C{  protected String printStack(){  if (stack.size() == 0) {    return "";  }  StringBuilder s=new StringBuilder();  for (int k=0; k < stack.size(); ++k)   s.append('.').append(stack.get(k));  return s.substring(1);}  }
class C{  public synchronized boolean syncSeen(){  return syncSeen;}  }
class C{  public PlaLineInt opposite(){  return new PlaLineInt(point_b,point_a);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.AuthorityBindingElement createAuthorityBindingElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AuthorityBindingElementImpl();}  }
class C{  public Book(){  mPages=new Vector();}  }
class C{  public static void writeSwappedLong(OutputStream output,long value) throws IOException {  output.write((byte)((value >> 0) & 0xff));  output.write((byte)((value >> 8) & 0xff));  output.write((byte)((value >> 16) & 0xff));  output.write((byte)((value >> 24) & 0xff));  output.write((byte)((value >> 32) & 0xff));  output.write((byte)((value >> 40) & 0xff));  output.write((byte)((value >> 48) & 0xff));  output.write((byte)((value >> 56) & 0xff));}  }
class C{  public boolean add(AccessibleRelation relation){  if (relations == null) {    relations=new Vector();  }  AccessibleRelation existingRelation=get(relation.getKey());  if (existingRelation == null) {    relations.addElement(relation);    return true;  } else {    Object[] existingTarget=existingRelation.getTarget();    Object[] newTarget=relation.getTarget();    int mergedLength=existingTarget.length + newTarget.length;    Object[] mergedTarget=new Object[mergedLength];    for (int i=0; i < existingTarget.length; i++) {      mergedTarget[i]=existingTarget[i];    }    for (int i=existingTarget.length, j=0; i < mergedLength; i++, j++) {      mergedTarget[i]=newTarget[j];    }    existingRelation.setTarget(mergedTarget);  }  return true;}  }
class C{  public void paintToolBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  final boolean cannotPrecede(boolean haveData){  boolean d=isData;  Object x;  return d != haveData && (x=item) != this && (x != null) == d;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(notationgetsystemid.class,args);}  }
class C{  public static String escapeColonInString(String str){  if (str != null) {    if (str.indexOf(":") >= 0) {      str=str.replaceAll(":","&#58;");    }  }  return str;}  }
class C{  static TargAttrFilterList decode(int mask,String expression) throws AciException {  LinkedHashMap<AttributeType,SearchFilter> attrFilterList=new LinkedHashMap<>();  String[] subExpressions=expression.split(filterListSeperator,-1);  for (  String subs : subExpressions) {    Pattern pattern=Pattern.compile(attributeFilter);    Matcher matcher=pattern.matcher(subs);    if (!matcher.find() || matcher.groupCount() != expectedGroupCount) {      LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGATTRFILTERS_FILTER_LIST_FORMAT.get(expression);      throw new AciException(message);    }    String attributeName=matcher.group(attributePos).toLowerCase();    int semicolon=attributeName.indexOf(';');    if (semicolon != -1) {      attributeName=attributeName.substring(0,semicolon);    }    String filterString=matcher.group(filterPos);    AttributeType attrType=DirectoryServer.getSchema().getAttributeType(attributeName);    SearchFilter filter;    try {      filter=SearchFilter.createFilterFromString(filterString);      attrFilterList.put(attrType,filter);    } catch (    DirectoryException ex) {      LocalizableMessage er=ex.getMessageObject();      LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGATTRFILTERS_FILTER_LISTS_FILTER.get(filterString,er);      throw new AciException(message);    }    verifyFilterComponents(filter,attrType);  }  return new TargAttrFilterList(mask,attrFilterList);}  }
class C{  public ByteArrayBuilder appendLong(long l){  builder.appendLong(l);  return this;}  }
class C{  public boolean typesOnly(){  return typesOnly;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment docFragment;  String nodeValue;  Text txtNode;  Node retval;  doc=(Document)load("hc_staff",true);  docFragment=doc.createDocumentFragment();  txtNode=doc.createTextNode("foo");  retval=docFragment.appendChild(txtNode);  txtNode=doc.createTextNode("bar");  retval=docFragment.appendChild(txtNode);  docFragment.normalize();  txtNode=(Text)docFragment.getFirstChild();  nodeValue=txtNode.getNodeValue();  assertEquals("normalizedNodeValue","foobar",nodeValue);  retval=txtNode.getNextSibling();  assertNull("singleChild",retval);}  }
class C{  boolean isApplicableToUser(SSOToken token) throws PolicyException, SSOException {  return users.isMember(token);}  }
class C{  public static void badPop(MethodNode mn){  if (AccessHelper.isAbstract(mn.access)) {    return;  }  for (  AbstractInsnNode ain : mn.instructions.toArray()) {    int op=ain.getOpcode();    if (op == Opcodes.ALOAD || op == Opcodes.ILOAD || op == Opcodes.FLOAD) {      VarInsnNode vin=(VarInsnNode)ain;      mn.instructions.insert(vin,new InsnNode(Opcodes.POP2));      mn.instructions.insertBefore(vin,new VarInsnNode(op,vin.var));      mn.instructions.insertBefore(vin,new VarInsnNode(op,vin.var));    }  }}  }
class C{  public static boolean execute(Operation operation,DN entryDN) throws CanceledOperationException {  LocalBackendWorkflowElement workflow=getLocalBackendWorkflowElement(entryDN);  if (workflow == null) {    if (operation instanceof AbstractOperation) {      ((AbstractOperation)operation).updateOperationErrMsgAndResCode();    }    return false;  }  if (workflow.getBaseDN().isRootDN()) {    executeOnRootDSE(operation,workflow);  } else {    executeOnNonRootDSE(operation,workflow);  }  return true;}  }
class C{  public NumberFormatException(){  super();}  }
class C{  public PBEKeySpec(char[] password,byte[] salt,int iterationCount,int keyLength){  if (salt == null) {    throw new NullPointerException("salt == null");  }  if (salt.length == 0) {    throw new IllegalArgumentException("salt.length == 0");  }  if (iterationCount <= 0) {    throw new IllegalArgumentException("iterationCount <= 0");  }  if (keyLength <= 0) {    throw new IllegalArgumentException("keyLength <= 0");  }  if (password == null) {    this.password=EmptyArray.CHAR;  } else {    this.password=new char[password.length];    System.arraycopy(password,0,this.password,0,password.length);  }  this.salt=new byte[salt.length];  System.arraycopy(salt,0,this.salt,0,salt.length);  this.iterationCount=iterationCount;  this.keyLength=keyLength;}  }
class C{  protected boolean isValidQName(String prefix,String local,boolean xml11Version){  if (local == null)   return false;  boolean validNCName=false;  if (!xml11Version) {    validNCName=(prefix == null || XMLChar.isValidNCName(prefix)) && XMLChar.isValidNCName(local);  } else {    validNCName=(prefix == null || XML11Char.isXML11ValidNCName(prefix)) && XML11Char.isXML11ValidNCName(local);  }  return validNCName;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element rootNode;  int nodeType;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  nodeType=(int)rootNode.getNodeType();  assertEquals("nodeElementNodeTypeAssert1",1,nodeType);}  }
class C{  public IllegalStateException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String type=getStringOptionValue(ARGUMENT_ID_TYPE);  List idNames=(List)rc.getOption(ARGUMENT_ID_NAMES);  String file=getStringOptionValue(IArgument.FILE);  if (idNames == null) {    idNames=new ArrayList();  }  if (file != null) {    idNames.addAll(AttributeValues.parseValues(file));  }  if (idNames.isEmpty()) {    throw new CLIException(getResourceString("missing-identity-names"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }  String displayableIdNames=tokenize(idNames);  String[] params={realm,type,displayableIdNames};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_DELETE_IDENTITY",params);  try {    new OrganizationConfigManager(adminSSOToken,realm);  } catch (  SMSException e) {    String[] args={realm,type,displayableIdNames,e.getMessage()};    debugError("DeleteIdentities.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_DELETE_IDENTITY",args);    Object[] msgArg={realm};    throw new CLIException(MessageFormat.format(getResourceString("realm-does-not-exist"),msgArg),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }  try {    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);    IdType idType=convert2IdType(type);    Set setDelete=new HashSet();    for (Iterator i=idNames.iterator(); i.hasNext(); ) {      String idName=(String)i.next();      AMIdentity amid=new AMIdentity(adminSSOToken,idName,idType,realm,null);      boolean exist=false;      try {        exist=amid.isExists();      } catch (      IdRepoException e) {      }      if (!exist) {        String[] args={realm,type,displayableIdNames,"user " + idName + " does not exist"};        writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_DELETE_IDENTITY",args);        Object[] msgArg={idName};        throw new CLIException(MessageFormat.format(getResourceString("identity-does-not-exist"),msgArg),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);      }      setDelete.add(amid);    }    amir.deleteIdentities(setDelete);    IOutput outputWriter=getOutputWriter();    Object[] objects={realm,type};    if (idNames.size() > 1) {      outputWriter.printlnMessage(MessageFormat.format(getResourceString("delete-identities-succeed"),objects));    } else {      outputWriter.printlnMessage(MessageFormat.format(getResourceString("delete-identity-succeed"),objects));    }    for (Iterator i=idNames.iterator(); i.hasNext(); ) {      outputWriter.printlnMessage("    " + (String)i.next());    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_DELETE_IDENTITY",params);  } catch (  IdRepoException e) {    String[] args={realm,type,displayableIdNames,e.getMessage()};    debugError("DeleteIdentities.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_DELETE_IDENTITY",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,type,displayableIdNames,e.getMessage()};    debugError("DeleteIdentities.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_DELETE_IDENTITY",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public static String toJSONString(Map map){  if (map == null)   return "null";  StringBuffer sb=new StringBuffer();  boolean first=true;  Iterator iter=map.entrySet().iterator();  sb.append('{');  while (iter.hasNext()) {    if (first)     first=false; else     sb.append(',');    Map.Entry entry=(Map.Entry)iter.next();    toJSONString(String.valueOf(entry.getKey()),entry.getValue(),sb);  }  sb.append('}');  return sb.toString();}  }
class C{  static DynamicMBean createMBean(User user) throws Exception {  String mname=createManagedName(user);  ManagedBean managed=registry.findManagedBean(mname);  if (managed == null) {    Exception e=new Exception("ManagedBean is not found with " + mname);    throw new MBeanException(e);  }  String domain=managed.getDomain();  if (domain == null)   domain=mserver.getDefaultDomain();  DynamicMBean mbean=managed.createMBean(user);  ObjectName oname=createObjectName(domain,user);  if (mserver.isRegistered(oname)) {    mserver.unregisterMBean(oname);  }  mserver.registerMBean(mbean,oname);  return (mbean);}  }
class C{  public ZoneView(Element elem,int axis){  super(elem,axis);  loadedZones=new Vector<View>();}  }
class C{  private int fillRecord(de.rub.nds.tlsattacker.dtls.record.DtlsRecord record,ProtocolMessageType contentType,byte[] data,int dataPointer){  record.setContentType(contentType.getValue());  record.setProtocolVersion(tlsContext.getProtocolVersion().getValue());  byte[] pmData;  int returnPointer=data.length;  pmData=Arrays.copyOfRange(data,dataPointer,data.length);  if (record.getMaxRecordLengthConfig() != null) {    int missingLength=data.length - dataPointer;    if (record.getMaxRecordLengthConfig() < missingLength) {      pmData=Arrays.copyOfRange(data,dataPointer,(dataPointer + record.getMaxRecordLengthConfig()));      returnPointer=(dataPointer + record.getMaxRecordLengthConfig());    }  }  record.setSequenceNumber(BigInteger.valueOf(sequenceCounter));  record.setEpoch(epochCounter);  record.setLength(pmData.length);  record.setProtocolMessageBytes(pmData);  if (recordCipher != null && contentType != ProtocolMessageType.CHANGE_CIPHER_SPEC && epochCounter > 0) {    byte[] mac=recordCipher.calculateDtlsMac(tlsContext.getProtocolVersion(),contentType,record.getProtocolMessageBytes().getValue(),record.getSequenceNumber().getValue().longValue(),record.getEpoch().getValue());    record.setMac(mac);    byte[] macedData=ArrayConverter.concatenate(record.getProtocolMessageBytes().getValue(),record.getMac().getValue());    int paddingLength=recordCipher.calculatePaddingLength(macedData.length);    record.setPaddingLength(paddingLength);    byte[] padding=recordCipher.calculatePadding(record.getPaddingLength().getValue());    record.setPadding(padding);    byte[] paddedMacedData=ArrayConverter.concatenate(macedData,record.getPadding().getValue());    record.setPlainRecordBytes(paddedMacedData);    LOGGER.debug("Padded data before encryption:  {}",ArrayConverter.bytesToHexString(record.getPlainRecordBytes().getValue()));    byte[] encData=recordCipher.encrypt(record.getPlainRecordBytes().getValue());    record.setEncryptedProtocolMessageBytes(encData);    record.setLength(encData.length);    LOGGER.debug("Padded data after encryption:  {}",ArrayConverter.bytesToHexString(encData));  }  sequenceCounter++;  return returnPointer;}  }
class C{  private void initialize(){  final BluetoothManager bluetoothManager=(BluetoothManager)getSystemService(BLUETOOTH_SERVICE);  mAdapter=bluetoothManager.getAdapter();}  }
class C{  @Override public long dynamicQueryCount(DynamicQuery dynamicQuery){  return fooPersistence.countWithDynamicQuery(dynamicQuery);}  }
class C{  private static void defineTrustManager(KeyStore trustStore,String algorithm) throws SOAPBindingException {  boolean error=false;  try {    TrustManagerFactory tf=TrustManagerFactory.getInstance(algorithm);    tf.init(trustStore);    TrustManager[] defaultTrustManagers=tf.getTrustManagers();    String trustManagerDefinition=SystemPropertiesManager.get(SOAP_TRUST_MNGR_PROP);    if (trustManagerDefinition != null && trustManagerDefinition.length() > 0) {      tms=new TrustManager[defaultTrustManagers.length + 1];      tms[0]=(TrustManager)Class.forName(trustManagerDefinition).newInstance();      for (int i=0; i < defaultTrustManagers.length; i++) {        tms[i + 1]=defaultTrustManagers[i];      }    } else {      tms=defaultTrustManagers;    }  } catch (  ClassNotFoundException cnfe) {    Utils.debug.error("Client.defineTrustManager class not found: ",cnfe);    error=true;  }catch (  InstantiationException ie) {    Utils.debug.error("Client.defineTrustManager cannot instantiate: ",ie);    error=true;  }catch (  NoSuchAlgorithmException nsae) {    Utils.debug.error("Client.defineTrustManager no algorithm: ",nsae);    error=true;  }catch (  IllegalAccessException iae) {    Utils.debug.error("Client.defineTrustManager illegal access: ",iae);    error=true;  }catch (  KeyStoreException kse) {    Utils.debug.error("Client.defineTrustManager keystore: ",kse);    error=true;  }  if (error) {    String msg=Utils.bundle.getString("cannotDefineTrustManager");    throw new SOAPBindingException(msg);  }}  }
class C{  public void testDivideByZero(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=15;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=BigDecimal.valueOf(0L);  try {    aNumber.divide(bNumber);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {    assertEquals("Improper exception message","Division by zero",e.getMessage());  }}  }
class C{  public static byte parseByte(String lexicalXSDByte){  if (theConverter == null)   initConverter();  return theConverter.parseByte(lexicalXSDByte);}  }
class C{  private static ModificationType register(final int intValue,final String name,final Enum modificationTypeEnum){  final ModificationType t=new ModificationType(intValue,name,modificationTypeEnum);  ELEMENTS[intValue]=t;  return t;}  }
class C{  public Object[] parse(String source,ParsePosition pos){  if (source == null) {    Object[] empty={};    return empty;  }  int maximumArgumentNumber=-1;  for (int i=0; i <= maxOffset; i++) {    if (argumentNumbers[i] > maximumArgumentNumber) {      maximumArgumentNumber=argumentNumbers[i];    }  }  Object[] resultArray=new Object[maximumArgumentNumber + 1];  int patternOffset=0;  int sourceOffset=pos.index;  ParsePosition tempStatus=new ParsePosition(0);  for (int i=0; i <= maxOffset; ++i) {    int len=offsets[i] - patternOffset;    if (len == 0 || pattern.regionMatches(patternOffset,source,sourceOffset,len)) {      sourceOffset+=len;      patternOffset+=len;    } else {      pos.errorIndex=sourceOffset;      return null;    }    if (formats[i] == null) {      int tempLength=(i != maxOffset) ? offsets[i + 1] : pattern.length();      int next;      if (patternOffset >= tempLength) {        next=source.length();      } else {        next=source.indexOf(pattern.substring(patternOffset,tempLength),sourceOffset);      }      if (next < 0) {        pos.errorIndex=sourceOffset;        return null;      } else {        String strValue=source.substring(sourceOffset,next);        if (!strValue.equals("{" + argumentNumbers[i] + "}"))         resultArray[argumentNumbers[i]]=source.substring(sourceOffset,next);        sourceOffset=next;      }    } else {      tempStatus.index=sourceOffset;      resultArray[argumentNumbers[i]]=formats[i].parseObject(source,tempStatus);      if (tempStatus.index == sourceOffset) {        pos.errorIndex=sourceOffset;        return null;      }      sourceOffset=tempStatus.index;    }  }  int len=pattern.length() - patternOffset;  if (len == 0 || pattern.regionMatches(patternOffset,source,sourceOffset,len)) {    pos.index=sourceOffset + len;  } else {    pos.errorIndex=sourceOffset;    return null;  }  return resultArray;}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  super.beginDisplay(event);  String filter=(String)getDisplayFieldValue(AuthLevelHelper.ATTR_FILTER);  if ((filter == null) || (filter.trim().length() == 0)) {    setDisplayFieldValue(AuthLevelHelper.ATTR_FILTER,"*");  }  PolicyModel model=(PolicyModel)getModel();  try {    Set realmNames=helper.getRealmNames(filter,model);    if (realmNames.isEmpty()) {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","policy.condition.authlevel.no.search.result.message");    } else {      realmNames.add("");    }    String realmValue=(String)propertySheetModel.getValue(AuthLevelHelper.ATTR_REALM);    if (realmValue == null) {      realmValue="";    }    if (!bSearchForRealm) {      if ((realmValue.length() > 0) && !realmNames.contains(realmValue)) {        realmNames.add(realmValue);        if (!isInlineAlertMessageSet()) {          String msg=model.getLocalizedString("policy.condition.authlevel.no.longer.exist.realm");          String[] param={realmValue};          setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information",MessageFormat.format(msg,(Object[])param));        }      }    }    CCSelect sl=(CCSelect)getChild(AuthLevelHelper.ATTR_REALM);    sl.setOptions(createOptionList(getLabelValueMap(realmNames)));    if (sl.getValue() == null) {      sl.setValue(realmValue);    }  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  private static final byte hexCharToByte(char ch){switch (ch) {case '0':    return 0x00;case '1':  return 0x01;case '2':return 0x02;case '3':return 0x03;case '4':return 0x04;case '5':return 0x05;case '6':return 0x06;case '7':return 0x07;case '8':return 0x08;case '9':return 0x09;case 'a':return 0x0A;case 'b':return 0x0B;case 'c':return 0x0C;case 'd':return 0x0D;case 'e':return 0x0E;case 'f':return 0x0F;}return 0x00;}  }
class C{  private static ModifyDNRequestProtocolOp readModifyDNRequest(ASN1Reader reader) throws LDAPException {  try {    reader.readStartSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_MODIFY_DN_REQUEST_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  ByteString entryDN;  try {    entryDN=reader.readOctetString();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_MODIFY_DN_REQUEST_DECODE_DN.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  ByteString newRDN;  try {    newRDN=reader.readOctetString();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_MODIFY_DN_REQUEST_DECODE_NEW_RDN.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  boolean deleteOldRDN;  try {    deleteOldRDN=reader.readBoolean();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_MODIFY_DN_REQUEST_DECODE_DELETE_OLD_RDN.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  ByteString newSuperior=null;  try {    if (reader.hasNextElement()) {      newSuperior=reader.readOctetString();    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_MODIFY_DN_REQUEST_DECODE_NEW_SUPERIOR.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  try {    reader.readEndSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_MODIFY_DN_REQUEST_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  return new ModifyDNRequestProtocolOp(entryDN,newRDN,deleteOldRDN,newSuperior);}  }
class C{  public PropertyChangeListenerProxy(String propertyName,PropertyChangeListener listener){  super(listener);  this.propertyName=propertyName;}  }
class C{  public void removeAttribute(String attrName,String value) throws SMSException {  Set attr=null;  if ((attrSet == null) || ((attr=(Set)attrSet.get(attrName)) == null) || (!attr.contains(value))) {    throw (new SMSException(LdapException.newLdapException(ResultCode.ATTRIBUTE_OR_VALUE_EXISTS,getBundleString(IUMSConstants.SMS_ATTR_OR_VAL_EXISTS)),"sms-ATTR_OR_VAL_EXISTS"));  }  attr.remove(value);  attrSet.put(attrName,attr);  if (modSet == null) {    modSet=new HashSet();  }  modSet.add(new ModificationItem(DirContext.REMOVE_ATTRIBUTE,new BasicAttribute(attrName,value)));}  }
class C{  public static LDAPReplicationDomain findDomain(DN dn,PluginOperation pluginOp){  if (pluginOp instanceof Operation) {    final Operation op=(Operation)pluginOp;    if (op.dontSynchronize()) {      return null;    }    for (Iterator<Control> it=op.getRequestControls().iterator(); it.hasNext(); ) {      Control c=it.next();      if (OID_REPLICATION_REPAIR_CONTROL.equals(c.getOID())) {        op.setSynchronizationOperation(true);        op.setDontSynchronize(true);        it.remove();        return null;      }    }  }  LDAPReplicationDomain domain=null;  DN temp=dn;  while (domain == null && temp != null) {    domain=domains.get(temp);    temp=DirectoryServer.getParentDNInSuffix(temp);  }  return domain;}  }
class C{  private <M extends Configuration>void deregisterDelayedDeleteListener(DN baseDN,ServerManagedObjectDeleteListener<M> listener) throws ConfigException {  DN parentDN=baseDN.parent();  int delayWrappers=0;  while (parentDN != null) {    if (!configRepository.hasEntry(parentDN)) {      parentDN=parentDN.parent();      delayWrappers++;    } else {      for (      ConfigAddListener configListener : configRepository.getAddListeners(parentDN)) {        if (configListener instanceof DelayedConfigAddListener) {          DelayedConfigAddListener delayListener=(DelayedConfigAddListener)configListener;          ConfigAddListener wrappedListener;          int i=delayWrappers;          for (; i > 0; i--) {            wrappedListener=delayListener.getDelayedAddListener();            if (wrappedListener instanceof DelayedConfigAddListener) {              delayListener=(DelayedConfigAddListener)configListener;            } else {              break;            }          }          if (i > 0) {            continue;          }          ConfigDeleteListener delayedListener=delayListener.getDelayedDeleteListener();          if (delayedListener instanceof ConfigDeleteListenerAdaptor) {            ConfigDeleteListenerAdaptor<?> adaptor=(ConfigDeleteListenerAdaptor<?>)delayedListener;            if (adaptor.getServerManagedObjectDeleteListener() == listener) {              configRepository.deregisterAddListener(parentDN,configListener);            }          }        }      }      return;    }  }}  }
class C{  @Override public String toString(){  final StringBuilder sb=new StringBuilder();  sb.append("DS id: ").append(dsId);  sb.append(" ; DS url: ").append(dsUrl);  sb.append(" ; RS id: ").append(rsId);  sb.append(" ; Generation id: ").append(generationId);  sb.append(" ; Status: ").append(status);  sb.append(" ; Assured replication: ").append(assuredFlag);  if (assuredFlag) {    sb.append(" ; Assured mode: ").append(assuredMode);    sb.append(" ; Safe data level: ").append(safeDataLevel);  }  sb.append(" ; Group id: ").append(groupId);  sb.append(" ; Protocol version: ").append(protocolVersion);  sb.append(" ; Referral URLs: ").append(refUrls);  sb.append(" ; ECL Include: ").append(eclIncludes);  sb.append(" ; ECL Include for Deletes: ").append(eclIncludesForDeletes);  return sb.toString();}  }
class C{  public LogoutResponse createLogoutResponse(org.w3c.dom.Element value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.LOGOUT_RESPONSE,value);  if (obj == null) {    return new LogoutResponseImpl(value);  } else {    return (LogoutResponse)obj;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testNode;  boolean state;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testNode=(Element)elementList.item(0);  state=testNode.hasAttribute("nomatch");  assertFalse("throw_False",state);}  }
class C{  public static final boolean isTokenChar(char c){  if (isAlphaDigit(c))   return true; else switch (c) {case '-':case '.':case '!':case '%':case '*':case '_':case '+':case '`':case '\'':case '~':    return true;default :  return false;}}  }
class C{  public RSeq(){  super(NAME);}  }
class C{  public String toXMLString() throws XACMLException {  return toXMLString(true,true);}  }
class C{  public static void shutdown(){  server.shutdown();}  }
class C{  ReplServerStartDSMsg(byte[] in) throws DataFormatException {  final ByteArrayScanner scanner=new ByteArrayScanner(in);  decodeHeader(scanner,MSG_TYPE_REPL_SERVER_START_DS);  baseDN=scanner.nextDN();  serverId=scanner.nextIntUTF8();  serverURL=scanner.nextString();  windowSize=scanner.nextIntUTF8();  sslEncryption=Boolean.valueOf(scanner.nextString());  degradedStatusThreshold=scanner.nextIntUTF8();  weight=scanner.nextIntUTF8();  connectedDSNumber=scanner.nextIntUTF8();  serverState=scanner.nextServerStateMustComeLast();}  }
class C{  @Override public BlockVector clone(){  return (BlockVector)super.clone();}  }
class C{  public XMLString xstr(){  return XMLStringFactoryImpl.getFactory().newstr(str());}  }
class C{  public SubConfigPropertyXMLBuilder(String serviceName,ServiceSchema serviceSchema,AMModel model) throws SMSException, SSOException {  this.model=model;  this.serviceSchema=serviceSchema;  this.serviceName=serviceName;  svcSchemaManager=new ServiceSchemaManager(serviceName,model.getUserSSOToken());  getServiceResourceBundle();  if (serviceBundle != null) {    mapTypeToAttributeSchema=getSubConfigAttributeSchemas();  }}  }
class C{  public void showScrollHint(int direction){  float fraction=(direction == DragController.SCROLL_LEFT) ^ mIsRtl ? -SCROLL_HINT_FRACTION : SCROLL_HINT_FRACTION;  int hint=(int)(fraction * getWidth());  int scroll=getScrollForPage(getNextPage()) + hint;  int delta=scroll - getScrollX();  if (delta != 0) {    mScroller.setInterpolator(new DecelerateInterpolator());    mScroller.startScroll(getScrollX(),0,delta,0,Folder.SCROLL_HINT_DURATION);    invalidate();  }}  }
class C{  public static void main(String args[]) throws ParseException {  String rou[]={"Privacy: none\n","Privacy: none;id;user\n"};  for (int i=0; i < rou.length; i++) {    PrivacyParser rp=new PrivacyParser(rou[i]);    PrivacyList list=(PrivacyList)rp.parse();    System.out.println("encoded = " + list.encode());  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.AlgorithmSuiteElement createAlgorithmSuiteElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.AlgorithmSuiteElementImpl();}  }
class C{  public void deferOnDragEnd(){  mDeferOnDragEnd=true;}  }
class C{  public void testSerializationCompatibility() throws Exception {  SerializationTest.verifyGolden(this,new HttpRetryException(DETAIL,100,LOCATION),comparator);}  }
class C{  public void initArgumentsWithConfiguration(final ArgumentParser parser){  try {    portArg=createPortArgument(getPortFromConfig());    trustStorePathArg=trustStorePathArgument(getTruststoreFileFromConfig());    parser.replaceArgument(portArg);    parser.replaceArgument(trustStorePathArg);  } catch (  ConfigException|ArgumentException e) {    logger.error(LocalizableMessage.raw("Internal error while reading arguments of this program from configuration"),e);  }}  }
class C{  public AWTPermission(String name,String actions){  super(name,actions);}  }
class C{  public DHParameterSpec(BigInteger p,BigInteger g,int l){  this.p=p;  this.g=g;  this.l=l;}  }
class C{  public String dereferenceRestrictedTokenID(SSOToken requester,String restrictedId) throws SSOException {  String masterSID;  try {    masterSID=session.dereferenceRestrictedTokenID(((SSOTokenImpl)requester).getSession(),restrictedId);  } catch (  Exception e) {    SSOProviderImpl.debug.error("Can't dereference master token for id :  " + restrictedId,e);    throw new SSOException(e);  }  return masterSID;}  }
class C{  @Override public boolean contains(final Object x){  ImmutableList<A> l=this;  while (l.tail != null) {    if (x == null) {      if (l.head == null) {        return true;      }    } else {      if (l.head.equals(x)) {        return true;      }    }    l=l.tail;  }  return false;}  }
class C{  public boolean cover(CSN covered){  final CSN csn=this.serverIdToCSN.get(covered.getServerId());  return csn != null && !csn.isOlderThan(covered);}  }
class C{  protected void clearAutoscroll(){  if (autoScroller != null) {    autoScroller.stop();    autoScroller=null;  }}  }
class C{  private boolean isCauseException(Throwable ex,Class<?> clazz,int maxLevels){  if (maxLevels > 0) {    Throwable cause=ex.getCause();    if (cause != null) {      return clazz.isInstance(cause) || isCauseException(cause,clazz,maxLevels - 1);    }  }  return false;}  }
class C{  private PorterDuffColorFilter createTintFilter(ColorStateList tint,PorterDuff.Mode tintMode){  if (tint == null || tintMode == null) {    return null;  }  final int color=tint.getColorForState(getState(),Color.TRANSPARENT);  return new PorterDuffColorFilter(color,tintMode);}  }
class C{  private void writeMetadataSameSize(ByteBuffer rawIlstData,long oldIlstSize,long startIstWithinFile,FileChannel fileReadChannel,FileChannel fileWriteChannel,Mp4BoxHeader tagsHeader) throws CannotWriteException, IOException {  fileReadChannel.position(0);  fileWriteChannel.transferFrom(fileReadChannel,0,startIstWithinFile);  fileWriteChannel.position(startIstWithinFile);  fileWriteChannel.write(rawIlstData);  fileReadChannel.position(startIstWithinFile + oldIlstSize);  writeDataAfterIlst(fileReadChannel,fileWriteChannel,tagsHeader);}  }
class C{  private void parseMinorVersion(String minorVer) throws SAMLException {  try {    minorVersion=Integer.parseInt(minorVer);  } catch (  NumberFormatException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("Request(Element): invalid " + "MinorVersion",e);    }    throw new SAMLRequesterException(FSUtils.BUNDLE_NAME,"wrongInput",null);  }  if (minorVersion > IFSConstants.FF_12_SAML_PROTOCOL_MINOR_VERSION) {    FSUtils.debug.error("Request(Element): MinorVersion" + " of the Request is too high.");    throw new SAMLRequestVersionTooHighException(FSUtils.BUNDLE_NAME,"requestVersionTooHigh",null);  } else   if (minorVersion < IFSConstants.FF_11_SAML_PROTOCOL_MINOR_VERSION) {    FSUtils.debug.error("Request(Element): MinorVersion" + " of the Request is too low.");    throw new SAMLRequestVersionTooLowException(FSUtils.BUNDLE_NAME,"requestVersionTooLow",null);  }}  }
class C{  private void visualizeResizeForDelta(int deltaX,int deltaY,boolean onDismiss){  updateDeltas(deltaX,deltaY);  DragLayer.LayoutParams lp=(DragLayer.LayoutParams)getLayoutParams();  if (mLeftBorderActive) {    lp.x=mBaselineX + mDeltaX;    lp.width=mBaselineWidth - mDeltaX;  } else   if (mRightBorderActive) {    lp.width=mBaselineWidth + mDeltaX;  }  if (mTopBorderActive) {    lp.y=mBaselineY + mDeltaY;    lp.height=mBaselineHeight - mDeltaY;  } else   if (mBottomBorderActive) {    lp.height=mBaselineHeight + mDeltaY;  }  resizeWidgetIfNeeded(onDismiss);  requestLayout();}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("MessageDestination[");  sb.append("name=");  sb.append(getName());  if (link != null) {    sb.append(", link=");    sb.append(link);  }  if (getType() != null) {    sb.append(", type=");    sb.append(getType());  }  if (usage != null) {    sb.append(", usage=");    sb.append(usage);  }  if (getDescription() != null) {    sb.append(", description=");    sb.append(getDescription());  }  sb.append("]");  return (sb.toString());}  }
class C{  public BufferCapabilities(ImageCapabilities frontCaps,ImageCapabilities backCaps,FlipContents flipContents){  if (frontCaps == null || backCaps == null) {    throw new IllegalArgumentException("Image capabilities specified cannot be null");  }  this.frontCaps=frontCaps;  this.backCaps=backCaps;  this.flipContents=flipContents;}  }
class C{  public static boolean isHexDigit(final char c){  final ASCIICharProp cp=ASCIICharProp.valueOf(c);  return cp != null ? cp.isHexDigit() : false;}  }
class C{  public RouterHandler(final RouteBuilder builder,final DirectoryMonitor directoryMonitor){  this.builder=builder;  this.directoryMonitor=directoryMonitor;  ReadWriteLock lock=new ReentrantReadWriteLock();  this.read=lock.readLock();  this.write=lock.writeLock();}  }
class C{  public int hashCode(){  return (color.hashCode() << 31 ^ media.hashCode() << 24 ^ orientationRequested.hashCode() << 23 ^ origin.hashCode() << 22 ^ printQuality.hashCode() << 20 ^ printerResolution[2] >> 2 << 19 ^ printerResolution[1] << 10 ^ printerResolution[0]);}  }
class C{  protected void firePopupMenuWillBecomeInvisible(){  Object[] listeners=listenerList.getListenerList();  PopupMenuEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == PopupMenuListener.class) {      if (e == null)       e=new PopupMenuEvent(this);      ((PopupMenuListener)listeners[i + 1]).popupMenuWillBecomeInvisible(e);    }  }}  }
class C{  @Override protected void computeTime(){  if (!isLenient()) {    if (originalFields == null) {      originalFields=new int[FIELD_COUNT];    }    for (int field=0; field < FIELD_COUNT; field++) {      int value=internalGet(field);      if (isExternallySet(field)) {        if (value < getMinimum(field) || value > getMaximum(field)) {          throw new IllegalArgumentException(getFieldName(field));        }      }      originalFields[field]=value;    }  }  int fieldMask=selectFields();  int year=isSet(YEAR) ? internalGet(YEAR) : EPOCH_YEAR;  int era=internalGetEra();  if (era == BCE) {    year=1 - year;  } else   if (era != CE) {    throw new IllegalArgumentException("Invalid era");  }  if (year <= 0 && !isSet(ERA)) {    fieldMask|=ERA_MASK;    setFieldsComputed(ERA_MASK);  }  long timeOfDay=0;  if (isFieldSet(fieldMask,HOUR_OF_DAY)) {    timeOfDay+=(long)internalGet(HOUR_OF_DAY);  } else {    timeOfDay+=internalGet(HOUR);    if (isFieldSet(fieldMask,AM_PM)) {      timeOfDay+=12 * internalGet(AM_PM);    }  }  timeOfDay*=60;  timeOfDay+=internalGet(MINUTE);  timeOfDay*=60;  timeOfDay+=internalGet(SECOND);  timeOfDay*=1000;  timeOfDay+=internalGet(MILLISECOND);  long fixedDate=timeOfDay / ONE_DAY;  timeOfDay%=ONE_DAY;  while (timeOfDay < 0) {    timeOfDay+=ONE_DAY;    --fixedDate;  }  calculateFixedDate: {    long gfd, jfd;    if (year > gregorianCutoverYear && year > gregorianCutoverYearJulian) {      gfd=fixedDate + getFixedDate(gcal,year,fieldMask);      if (gfd >= gregorianCutoverDate) {        fixedDate=gfd;        break calculateFixedDate;      }      jfd=fixedDate + getFixedDate(getJulianCalendarSystem(),year,fieldMask);    } else     if (year < gregorianCutoverYear && year < gregorianCutoverYearJulian) {      jfd=fixedDate + getFixedDate(getJulianCalendarSystem(),year,fieldMask);      if (jfd < gregorianCutoverDate) {        fixedDate=jfd;        break calculateFixedDate;      }      gfd=jfd;    } else {      jfd=fixedDate + getFixedDate(getJulianCalendarSystem(),year,fieldMask);      gfd=fixedDate + getFixedDate(gcal,year,fieldMask);    }    if (isFieldSet(fieldMask,DAY_OF_YEAR) || isFieldSet(fieldMask,WEEK_OF_YEAR)) {      if (gregorianCutoverYear == gregorianCutoverYearJulian) {        fixedDate=jfd;        break calculateFixedDate;      } else       if (year == gregorianCutoverYear) {        fixedDate=gfd;        break calculateFixedDate;      }    }    if (gfd >= gregorianCutoverDate) {      if (jfd >= gregorianCutoverDate) {        fixedDate=gfd;      } else {        if (calsys == gcal || calsys == null) {          fixedDate=gfd;        } else {          fixedDate=jfd;        }      }    } else {      if (jfd < gregorianCutoverDate) {        fixedDate=jfd;      } else {        if (!isLenient()) {          throw new IllegalArgumentException("the specified date doesn't exist");        }        fixedDate=jfd;      }    }  }  long millis=(fixedDate - EPOCH_OFFSET) * ONE_DAY + timeOfDay;  TimeZone zone=getZone();  if (zoneOffsets == null) {    zoneOffsets=new int[2];  }  int tzMask=fieldMask & (ZONE_OFFSET_MASK | DST_OFFSET_MASK);  if (tzMask != (ZONE_OFFSET_MASK | DST_OFFSET_MASK)) {    if (zone instanceof ZoneInfo) {      ((ZoneInfo)zone).getOffsetsByWall(millis,zoneOffsets);    } else {      int gmtOffset=isFieldSet(fieldMask,ZONE_OFFSET) ? internalGet(ZONE_OFFSET) : zone.getRawOffset();      zone.getOffsets(millis - gmtOffset,zoneOffsets);    }  }  if (tzMask != 0) {    if (isFieldSet(tzMask,ZONE_OFFSET)) {      zoneOffsets[0]=internalGet(ZONE_OFFSET);    }    if (isFieldSet(tzMask,DST_OFFSET)) {      zoneOffsets[1]=internalGet(DST_OFFSET);    }  }  millis-=zoneOffsets[0] + zoneOffsets[1];  time=millis;  int mask=computeFields(fieldMask | getSetStateFields(),tzMask);  if (!isLenient()) {    for (int field=0; field < FIELD_COUNT; field++) {      if (!isExternallySet(field)) {        continue;      }      if (originalFields[field] != internalGet(field)) {        String s=originalFields[field] + " -> " + internalGet(field);        System.arraycopy(originalFields,0,fields,0,fields.length);        throw new IllegalArgumentException(getFieldName(field) + ": " + s);      }    }  }  setFieldsNormalized(mask);}  }
class C{  public WSFederationException(Throwable t){  super(t);}  }
class C{  private synchronized void writeObject(java.io.ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  s.writeChar(separatorChar);}  }
class C{  public int size(){  return values.size();}  }
class C{  public static void sort(Object[] array,int start,int end){  ComparableTimSort.sort(array,start,end);}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws org.xml.sax.SAXException {  m_prefixMappings.addElement(prefix);  m_prefixMappings.addElement(uri);}  }
class C{  public String createServiceFuncName(String apiTypeName){  return publicMethodName(Name.upperCamel("Create",apiTypeName,"Service"));}  }
class C{  public Observable<Order> retrieveOrderObservable(Long orderId){  io.vertx.rx.java.ObservableFuture<Order> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  retrieveOrder(orderId,resultHandler.toHandler());  return resultHandler;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.LJobTitleElement createLJobTitleElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LJobTitleElementImpl();}  }
class C{  protected static void parseCondFlag(String line,RewriteCond condition,String flag){  if (flag.equals("NC") || flag.equals("nocase")) {    condition.setNocase(true);  } else   if (flag.equals("OR") || flag.equals("ornext")) {    condition.setOrnext(true);  } else {    throw new IllegalArgumentException("Invalid flag in: " + line + " flags: "+ flag);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatareplacedataexceedslengthofarg.class,args);}  }
class C{  public static void removeAll(){synchronized (registeredLocalBackendsLock) {    for (    LocalBackendWorkflowElement localBackend : registeredLocalBackends.values()) {      deregisterLocalBackend(localBackend.getBaseDN());    }  }}  }
class C{  public Node item(int index){  if (m_iter != null) {    int node;    int count=m_cachedNodes.size();    if (count > index) {      node=m_cachedNodes.elementAt(index);      return m_dtm.getNode(node);    } else     if (m_last == -1) {      while (((node=m_iter.next()) != DTMAxisIterator.END) && count <= index) {        m_cachedNodes.addElement(node);        count++;      }      if (node == DTMAxisIterator.END) {        m_last=count;      } else {        return m_dtm.getNode(node);      }    }  }  return null;}  }
class C{  public void joinGroup(SocketAddress groupAddress,NetworkInterface netInterface) throws IOException {  checkJoinOrLeave(groupAddress,netInterface);  impl.joinGroup(groupAddress,netInterface);}  }
class C{  public void remove(Object key){  if (arrayTable != null) {    arrayTable.remove(key);  }}  }
class C{  public boolean isSubsetOf(Object obj){  if (!(obj instanceof AbstractTagFrame)) {    return false;  }  if ((frameBody == null) && (((AbstractTagFrame)obj).frameBody == null)) {    return true;  }  if ((frameBody == null) || (((AbstractTagFrame)obj).frameBody == null)) {    return false;  }  return frameBody.isSubsetOf(((AbstractTagFrame)obj).frameBody) && super.isSubsetOf(obj);}  }
class C{  public void pushStylesheet(Stylesheet s){  if (m_stylesheets.size() == 0)   m_stylesheetRoot=(StylesheetRoot)s;  m_stylesheets.push(s);}  }
class C{  public int size(){  return delegate.size();}  }
class C{  private final void primitiveRightShift(int n){  int[] val=value;  int n2=32 - n;  for (int i=offset + intLen - 1, c=val[i]; i > offset; i--) {    int b=c;    c=val[i - 1];    val[i]=(c << n2) | (b >>> n);  }  val[offset]>>>=n;}  }
class C{  public static boolean isRestricted(SSOToken token) throws SSOException {  return token.getProperty(TOKEN_RESTRICTION_PROP) != null;}  }
class C{  public Enumeration<Permission> elements(){synchronized (this) {    return new PermissionsEnumerator(permsMap.values().iterator());  }}  }
class C{  private TrustAll(){}  }
class C{  public static KeywordBindRule decode(String expr,EnumBindRuleType type) throws AciException {  String lowerExpr=expr.toLowerCase();  if ("none".equals(lowerExpr)) {    return new AuthMethod(EnumAuthMethod.AUTHMETHOD_NONE,null,type);  } else   if ("simple".equals(lowerExpr)) {    return new AuthMethod(EnumAuthMethod.AUTHMETHOD_SIMPLE,null,type);  } else   if ("ssl".equals(lowerExpr)) {    return new AuthMethod(EnumAuthMethod.AUTHMETHOD_SSL,"EXTERNAL",type);  } else   if (expr.length() > 5 && lowerExpr.startsWith("sasl ")) {    String saslMech=expr.substring(5);    if (DirectoryServer.getSASLMechanismHandler(saslMech) == null) {      logger.info(NOTE_ACI_SYNTAX_DUBIOUS_AUTHMETHOD_SASL_MECHANISM,saslMech);    }    return new AuthMethod(EnumAuthMethod.AUTHMETHOD_SASL,saslMech,type);  }  throw new AciException(WARN_ACI_SYNTAX_INVALID_AUTHMETHOD_EXPRESSION.get(expr));}  }
class C{  public String toXMLString() throws XACMLException {  return toXMLString(true,false);}  }
class C{  public DBFormatter(){}  }
class C{  public void insert_ulonglong(long value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_ulonglong",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    $self.insert_ulonglong(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public URI(String scheme,String schemeSpecificPart,String fragment) throws URISyntaxException {  StringBuilder uri=new StringBuilder();  if (scheme != null) {    uri.append(scheme);    uri.append(':');  }  if (schemeSpecificPart != null) {    ALL_LEGAL_ENCODER.appendEncoded(uri,schemeSpecificPart);  }  if (fragment != null) {    uri.append('#');    ALL_LEGAL_ENCODER.appendEncoded(uri,fragment);  }  parseURI(uri.toString(),false);}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  XPathContext xctxt=transformer.getXPathContext();  int sourceNode=xctxt.getCurrentNode();  String piName=m_name_atv == null ? null : m_name_atv.evaluate(xctxt,sourceNode,this);  if (piName == null)   return;  if (piName.equalsIgnoreCase("xml")) {    transformer.getMsgMgr().warn(this,XSLTErrorResources.WG_PROCESSINGINSTRUCTION_NAME_CANT_BE_XML,new Object[]{Constants.ATTRNAME_NAME,piName});    return;  } else   if ((!m_name_atv.isSimple()) && (!XML11Char.isXML11ValidNCName(piName))) {    transformer.getMsgMgr().warn(this,XSLTErrorResources.WG_PROCESSINGINSTRUCTION_NOTVALID_NCNAME,new Object[]{Constants.ATTRNAME_NAME,piName});    return;  }  String data=transformer.transformToString(this);  try {    transformer.getResultTreeHandler().processingInstruction(piName,data);  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  }}  }
class C{  public void entering(String sourceClass,String sourceMethod,Object param1){  logp(Level.FINER,sourceClass,sourceMethod,"ENTRY {0}",param1);}  }
class C{  private boolean fractionalFilterOperation(PreOperationAddOperation addOperation,boolean performFiltering){  return fractionalRemoveAttributesFromEntry(fractionalConfig,addOperation.getEntryDN().rdn(),addOperation.getObjectClasses(),addOperation.getUserAttributes(),performFiltering);}  }
class C{  public DSAPublicKeyImpl(DSAPublicKeySpec keySpec){  super("DSA");  SubjectPublicKeyInfo spki;  p=keySpec.getP();  q=keySpec.getQ();  g=keySpec.getG();  ThreeIntegerSequence threeInts=new ThreeIntegerSequence(p.toByteArray(),q.toByteArray(),g.toByteArray());  AlgorithmIdentifier ai=new AlgorithmIdentifier(AlgNameMapper.map2OID("DSA"),threeInts.getEncoded());  y=keySpec.getY();  spki=new SubjectPublicKeyInfo(ai,ASN1Integer.getInstance().encode(y.toByteArray()));  setEncoding(spki.getEncoded());  params=(DSAParams)(new DSAParameterSpec(p,q,g));}  }
class C{  private boolean validateTimes(Set startTimeSet,Set endTimeSet) throws PolicyException {  if (startTimeSet.size() != 1) {    String[] args={START_TIME};    throw new PolicyException(ResBundleUtils.rbName,"property_does_not_allow_multiple_values",args,null);  }  if (endTimeSet.size() != 1) {    String[] args={END_TIME};    throw new PolicyException(ResBundleUtils.rbName,"property_does_not_allow_multiple_values",args,null);  }  String startTimeString=(String)(startTimeSet.iterator().next());  startTime=parseTimeString(startTimeString);  startHour=startTime / 60;  startMinute=startTime - startHour * 60;  String endTimeString=(String)(endTimeSet.iterator().next());  endTime=parseTimeString(endTimeString);  endHour=endTime / 60;  endMinute=endTime - endHour * 60;  return true;}  }
class C{  public void test_initLjava_security_KeyStore_01() throws Exception {  KeyStore ksNull=null;  TrustManagerFactory[] trustMF=createTMFac();  assertNotNull("TrustManagerFactory objects were not created",trustMF);  try {    trustMF[0].init(ksNull);  } catch (  Exception ex) {    fail(ex + " unexpected exception was thrown for null parameter");  }}  }
class C{  private SampleApplication(){}  }
class C{  TokenEndpointAuthMethod(String type){  this.type=type;}  }
class C{  public static void removeAll(){  getPersistence().removeAll();}  }
class C{  protected ServiceConfig parentSubConfigFor(Context context,ServiceConfigManager scm) throws SMSException, SSOException, NotFoundException {  Map<String,String> uriTemplateVariables=getUriTemplateVariables(context);  ServiceConfig config;  if (type == SchemaType.GLOBAL) {    config=scm.getGlobalConfig(hasInstanceName ? uriTemplateVariables.get("name") : null);  } else {    config=scm.getOrganizationConfig(realmFor(context),null);    if (!SmsRequestHandler.USE_PARENT_PATH.equals(schema.getResourceName()) && !config.exists()) {      throw new NotFoundException("Parent service does not exist.");    }  }  for (int i=0; i < subSchemaPath.size() - 1; i++) {    ServiceSchema schema=subSchemaPath.get(i);    String subConfigName=schema.getResourceName();    boolean configNeedsToExist=true;    if (subConfigName == null || SmsRequestHandler.USE_PARENT_PATH.equals(subConfigName)) {      subConfigName=schema.getName();      configNeedsToExist=false;    }    if (uriPath.contains("{" + subConfigName + "}")) {      subConfigName=uriTemplateVariables.get(subConfigName);      configNeedsToExist=true;    }    config=config.getSubConfig(subConfigName);    if (configNeedsToExist && !config.exists()) {      throw new NotFoundException("Parent subconfig of type " + subConfigName + " does not exist.");    }  }  return config;}  }
class C{  public boolean preSingleSignOn(String hostedEntityID,String realm,HttpServletRequest request,HttpServletResponse response,AuthnRequest authnRequest,String reqID) throws SAML2Exception {  return false;}  }
class C{  public void reset(){  cipher.reset();}  }
class C{  public static void chop(String filename) throws IOException {  int fileIdx=filename.lastIndexOf('/');  String baseDir=(fileIdx == -1) ? "./" : filename.substring(0,fileIdx + 1);  File fileHandle=new File(filename);  FileReader in=null;  try {    in=new FileReader(filename);    BufferedReader buff=new BufferedReader(in);    StringBuffer sb=new StringBuffer();    String curFileName=null;    String line=buff.readLine();    while (line != null) {      int idx=line.indexOf("Index: ");      if (idx == 0) {        writeToFile(curFileName,sb.toString());        curFileName=baseDir + normalizeFilename(line.substring(7));        sb=new StringBuffer();      }      if (curFileName != null) {        sb.append(line).append("\n");      }      line=buff.readLine();    }    writeToFile(curFileName,sb.toString());  }  finally {    if (in != null) {      in.close();    }  }}  }
class C{  public Matcher reset(CharSequence input){  text=input;  return reset();}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    int offs=target.getCaretPosition();    boolean failed=false;    try {      Element curPara=Utilities.getParagraphElement(target,offs);      offs=Utilities.getPreviousWord(target,offs);      if (offs < curPara.getStartOffset()) {        offs=Utilities.getParagraphElement(target,offs).getEndOffset() - 1;      }    } catch (    BadLocationException bl) {      if (offs != 0) {        offs=0;      } else {        failed=true;      }    }    if (!failed) {      if (select) {        target.moveCaretPosition(offs);      } else {        target.setCaretPosition(offs);      }    } else {      UIManager.getLookAndFeel().provideErrorFeedback(target);    }  }}  }
class C{  protected void registerChildren(){  registerChild(REDIRECT_URL,StaticTextField.class);}  }
class C{  public Policy(String policyName,String description) throws InvalidNameException {  this(policyName,description,false,true);}  }
class C{  public int lengthOfMonth(){  return getMonth().length(isLeapYear());}  }
class C{  public IdentityResourceV2(String userType,MailServerLoader mailServerLoader,IdentityServicesImpl identityServices,CoreWrapper coreWrapper,RestSecurityProvider restSecurityProvider,ConsoleConfigHandler configHandler,BaseURLProviderFactory baseURLProviderFactory,Set<UiRolePredicate> uiRolePredicates){  this(userType,null,null,mailServerLoader,identityServices,coreWrapper,restSecurityProvider,configHandler,baseURLProviderFactory,uiRolePredicates);}  }
class C{  public void paintTextPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public Policy(String policyName,String description,boolean referralPolicy,boolean active) throws InvalidNameException {  validateName(policyName);  this.policyName=policyName;  if (description != null) {    this.description=description;  }  this.referralPolicy=referralPolicy;  this.active=active;}  }
class C{  public void reset(){  if (response != null) {    this.response.reset();  }}  }
class C{  public UnresolvedAddressException(){}  }
class C{  private <T>void addModification(PropertyEditorModification<T> mod){  mods.add(mod);}  }
class C{  public static DataReplicationOptions createStandalone(){  DataReplicationOptions options=new DataReplicationOptions();  options.type=Type.STANDALONE;  return options;}  }
class C{  @Override @Deprecated public void putValue(String name,Object value){  setAttribute(name,value);}  }
class C{  public static void printError(String debugName,String message,Throwable ex){  SimpleDateFormat dateFormat=new SimpleDateFormat("MM/dd/yyyy hh:mm:ss:SSS a zzz");  String prefix=debugName + ":" + dateFormat.format(newDate())+ ": "+ Thread.currentThread().toString()+ "\n";  System.err.println(prefix + message);  if (ex != null) {    ex.printStackTrace(System.err);  }}  }
class C{  public boolean delete(Long ruleFilterID){  if (ruleFilterID == null) {    throw new IllegalArgumentException("primary key null.");  }  return database.delete(DATABASE_TABLE,KEY_RULEFILTERID + "=" + ruleFilterID,null) > 0;}  }
class C{  @SuppressWarnings({"unchecked","boxing"}) public void testSerializationCompatibility() throws Exception {  EnumSet<EnumFoo> set=EnumSet.allOf(EnumFoo.class);  SerializationTest.verifyGolden(this,set);}  }
class C{  @After public void afterTest(){}  }
class C{  @Override public Foo fetchByUuid_First(String uuid,OrderByComparator<Foo> orderByComparator){  List<Foo> list=findByUuid(uuid,0,1,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  public Set canAddMembers(){  Set results=(Set)IdUtils.typesCanAddMembers.get(getName());  return (results == null) ? Collections.EMPTY_SET : results;}  }
class C{  public final ShapeTile[] calculate_tree_shapes(BrdAbit p_drill_item){  ShapeTile[] result=new ShapeTile[p_drill_item.tile_shape_count()];  for (int index=0; index < result.length; ++index) {    PlaShape curr_shape=p_drill_item.get_shape(index);    if (curr_shape == null) {      result[index]=null;    } else {      ShapeTile curr_tile_shape;      if (r_board.brd_rules.is_trace_snap_45())       curr_tile_shape=curr_shape.bounding_octagon(); else       curr_tile_shape=curr_shape.bounding_tile();      if (curr_tile_shape == null) {        System.out.println("ShapeSearchTree.calculate_tree_shapes: shape is null");      } else {        int offset_width=get_clearance_compensation(p_drill_item.clearance_idx(),p_drill_item.shape_layer(index));        curr_tile_shape=curr_tile_shape.enlarge(offset_width);      }      result[index]=curr_tile_shape;    }  }  return result;}  }
class C{  private static void runCommands(String[] args) throws Exception {  String command=args[0];switch (command) {case "help":case "-help":case "--help":case "-h":case "/h":case "/help":    System.out.println("" + "usage: -s <script-location> [arguments [,...]]\n" + "       -c <source-directory> [-r] [-o <output-directory>] [-cp <classpath[:...]>]\n"+ "       ClassName [-cp <classpath[:...]>]\n"+ "       -gb <project-directory>\n"+ "       -repl\n"+ "       -v | -version\n"+ "\n"+ "-s       Specify the script location and run the script\n"+ "-c       Specify the source file directory and compile *.lt files\n"+ "-r       [option] Add sub directory files to compiling list.\n"+ "-o       [option] Specify the output directory. (the source-directory/target/classes/ as default)\n"+ "-cp      [option] The classpath. use ':' to separate the class-paths\n"+ "-repl    Start the repl (or run the program with 0 arguments)\n"+ "-gb      Generate build.lts and run.lts in the given directory\n"+ "-version Show current version\n");  break;case "-v":case "-version":System.out.println("Latte-lang 0.0.5-ALPHA");break;case "-s":if (args.length < 2) {System.err.println("invalid command -s. the script file location should be specified\n" + "see --help");return;}String path=args[1];File f=new File(path);ScriptCompiler s=new ScriptCompiler(ClassLoader.getSystemClassLoader());try {ScriptCompiler.Script script=s.compile(f);String[] scriptArgs=new String[args.length - 2];System.arraycopy(args,2,scriptArgs,0,args.length - 2);script.run(scriptArgs);} catch (Throwable e) {if (e instanceof SyntaxException) {System.err.println("[ERROR] " + e.getMessage());} else {e.printStackTrace();}}break;case "-c":if (args.length < 2) {System.err.println("invalid command -c. the source directory should be specified\n" + "see --help");return;}String sourceDir=args[1].trim();if (sourceDir.endsWith(File.separator)) {sourceDir=sourceDir.substring(0,sourceDir.length() - File.separator.length());}boolean recursive=false;String outputDir=sourceDir + File.separator + "target"+ File.separator+ "classes";List<URL> classPaths=new ArrayList<>();for (int i=2; i < args.length; ++i) {String cmd=args[i];switch (cmd) {case "-r":recursive=true;break;case "-o":if (args.length - 1 == i) {System.err.println("invalid option -o. the output directory should be specified");System.err.println("see --help");return;}outputDir=args[++i];break;case "-cp":if (args.length - 1 == i) {System.err.println("invalid option -cp. the class-path should be specified");System.err.println("see --help");return;}String[] class_paths=args[++i].split(":");for (String class_path : class_paths) {try {classPaths.add(new URL(new File(class_path).toURI().toString()));} catch (MalformedURLException e) {System.err.println("[ERROR] " + e.getMessage());return;}}break;default :System.err.println("unknown option " + cmd);System.err.println("see --help");return;}}Compiler compiler=new Compiler();File outputDirFile=new File(outputDir);if (!outputDirFile.exists()) outputDirFile.mkdirs();compiler.config.result.outputDir=outputDirFile;compiler.config.classpath=classPaths;try {compiler.compile(Utils.filesInDirectory(sourceDir,".*\\.lt",recursive));} catch (Exception e) {if (e instanceof SyntaxException) {System.err.println("[ERROR] " + e.getMessage());} else {e.printStackTrace();}return;}break;case "-gb":final List<String> theFilesToBeGenerated=Arrays.asList("build.lts","run.lts");if (args.length != 2) {System.err.println("invalid command -gb.");System.err.println("see --help");return;}String projectDir=args[1].trim();if (projectDir.endsWith(File.separator)) {projectDir=projectDir.substring(0,projectDir.length() - File.separator.length());}String core=String.valueOf(Runtime.getRuntime().availableProcessors());String separator=File.separator;for (String theFile : theFilesToBeGenerated) {String filePath=projectDir + File.separator + theFile;File file=new File(filePath);if (file.exists()) {System.out.println("[INFO] " + filePath + " exists");} else {try {file.createNewFile();} catch (IOException e) {e.printStackTrace();}}try {FileWriter fw=new FileWriter(file);BufferedReader br=new BufferedReader(new InputStreamReader(REPL.class.getClassLoader().getResourceAsStream(theFile + ".template")));String ss;while ((ss=br.readLine()) != null) {ss=ss.replace("${core}",core).replace("${dir}",projectDir.replace("\\","\\\\")).replace("${separator}",separator) + "\n";fw.write(ss.toCharArray());}fw.flush();fw.close();} catch (IOException e) {e.printStackTrace();}}break;case "-repl":main(new String[0]);break;default :List<URL> urls=new ArrayList<>();try {String url=new File("").toURI().toString();urls.add(new URL(url));} catch (MalformedURLException e) {System.err.println("[ERROR] " + e.getMessage());return;}String[] runArgs=new String[0];loop: for (int i=1; i < args.length; ++i) {String cmd=args[i];switch (cmd) {case "-cp":if (i == args.length - 1) {System.err.println("invalid option -cp. the class-path should be specified");System.err.println("see --help");return;}String cps=args[++i];for (String cp : cps.split(":")) {try {urls.add(new URL(new File(cp).toURI().toString()));} catch (MalformedURLException e) {System.err.println("[ERROR] " + e.getMessage());return;}}break;case "-args":runArgs=new String[args.length - 1 - i];System.arraycopy(args,i + 1,runArgs,0,runArgs.length);break loop;default :System.err.println("unknown option " + cmd);System.err.println("see --help");return;}}try {Run run=new Run(urls,command);run.exec(runArgs);} catch (Throwable t) {t.printStackTrace();}}}  }
class C{  public NewID createNewID(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.NEWID,value);  if (obj == null) {    return new NewIDImpl(value);  } else {    return (NewID)obj;  }}  }
class C{  public Set searchGroups(String wildcard,int level) throws AMException, SSOException {  return searchGroups(wildcard,null,level);}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  CCActionTable table=(CCActionTable)getChild(AUTH_ENTRY_TABLE);  table.restoreStateData();  acModel=(AuthConfigurationModel)getModel();  acModel.setEntries(getTableData());  try {    Map original=acModel.getValues();    AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);    Map updated=ps.getAttributeValues(original,true,acModel);    acModel.setValues(updated);    acModel.store(getRealmName(),getConfigName());    setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","authentication.save.ok");  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    tablePopulated=false;  }  forwardTo();}  }
class C{  public HttpRoute(HttpHost target,InetAddress local,boolean secure){  this(local,target,null,secure,TunnelType.PLAIN,LayerType.PLAIN);}  }
class C{  public boolean is_selected(ItemSelectionChoice p_choice){  return sel_array[p_choice.ordinal()];}  }
class C{  public final int hashCode(){  return super.hashCode();}  }
class C{  public void test_DivideBigDecimalRoundingModeDOWN(){  String a="-37361671119238118911893939591735";  String b="74723342238476237823787879183470";  RoundingMode rm=RoundingMode.DOWN;  String c="0";  BigDecimal aNumber=new BigDecimal(new BigInteger(a));  BigDecimal bNumber=new BigDecimal(new BigInteger(b));  BigDecimal result=aNumber.divide(bNumber,rm);  assertEquals("incorrect value",c,result.toString());}  }
class C{  public PdfCanvas endText(){  contentStream.getOutputStream().writeBytes(ET);  return this;}  }
class C{  protected Expression minus(int opPos) throws TransformerException {  return compileOperation(new Minus(),opPos);}  }
class C{  protected void runSQL(String sql){  try {    DataSource dataSource=fooPersistence.getDataSource();    DB db=DBManagerUtil.getDB();    sql=db.buildSQL(sql);    sql=PortalUtil.transformSQL(sql);    SqlUpdate sqlUpdate=SqlUpdateFactoryUtil.getSqlUpdate(dataSource,sql);    sqlUpdate.update();  } catch (  Exception e) {    throw new SystemException(e);  }}  }
class C{  @Override void encode(final byte[] in,int inPos,final int inAvail,final Context context){  if (context.eof) {    return;  }  if (inAvail < 0) {    context.eof=true;    if (0 == context.modulus && lineLength == 0) {      return;    }    final byte[] buffer=ensureBufferSize(encodeSize,context);    final int savedPos=context.pos;switch (context.modulus) {case 0:      break;case 1:    buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 2) & MASK_6BITS];  buffer[context.pos++]=encodeTable[(context.ibitWorkArea << 4) & MASK_6BITS];if (encodeTable == STANDARD_ENCODE_TABLE) {  buffer[context.pos++]=pad;  buffer[context.pos++]=pad;}break;case 2:buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 10) & MASK_6BITS];buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 4) & MASK_6BITS];buffer[context.pos++]=encodeTable[(context.ibitWorkArea << 2) & MASK_6BITS];if (encodeTable == STANDARD_ENCODE_TABLE) {buffer[context.pos++]=pad;}break;default :throw new IllegalStateException("Impossible modulus " + context.modulus);}context.currentLinePos+=context.pos - savedPos;if (lineLength > 0 && context.currentLinePos > 0) {System.arraycopy(lineSeparator,0,buffer,context.pos,lineSeparator.length);context.pos+=lineSeparator.length;}} else {for (int i=0; i < inAvail; i++) {final byte[] buffer=ensureBufferSize(encodeSize,context);context.modulus=(context.modulus + 1) % BYTES_PER_UNENCODED_BLOCK;int b=in[inPos++];if (b < 0) {b+=256;}context.ibitWorkArea=(context.ibitWorkArea << 8) + b;if (0 == context.modulus) {buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 18) & MASK_6BITS];buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 12) & MASK_6BITS];buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 6) & MASK_6BITS];buffer[context.pos++]=encodeTable[context.ibitWorkArea & MASK_6BITS];context.currentLinePos+=BYTES_PER_ENCODED_BLOCK;if (lineLength > 0 && lineLength <= context.currentLinePos) {System.arraycopy(lineSeparator,0,buffer,context.pos,lineSeparator.length);context.pos+=lineSeparator.length;context.currentLinePos=0;}}}}}  }
class C{  public Response createResponse(String xml) throws XACMLException {  Object object=XACMLSDKUtils.getObjectInstance(XACMLConstants.RESPONSE,xml);  if (object == null) {    return new ResponseImpl(xml);  } else {    return (Response)object;  }}  }
class C{  public NSNumber(int i){  doubleValue=longValue=i;  type=INTEGER;}  }
class C{  public String toString(int units,String unitsName){  if (unitsName == null) {    unitsName="";  }  float[] vals=getPrintableArea(units);  String str="(" + vals[0] + ","+ vals[1]+ ")->("+ vals[2]+ ","+ vals[3]+ ")";  return str + unitsName;}  }
class C{  public boolean isReplicationServer(){  return isReplicationServer;}  }
class C{  private void updateMenuIcon(){  Icon frameIcon=frame.getFrameIcon();  SynthContext context=getContext(this);  if (frameIcon != null) {    Dimension maxSize=(Dimension)context.getStyle().get(context,"InternalFrameTitlePane.maxFrameIconSize");    int maxWidth=16;    int maxHeight=16;    if (maxSize != null) {      maxWidth=maxSize.width;      maxHeight=maxSize.height;    }    if ((frameIcon.getIconWidth() > maxWidth || frameIcon.getIconHeight() > maxHeight) && (frameIcon instanceof ImageIcon)) {      frameIcon=new ImageIcon(((ImageIcon)frameIcon).getImage().getScaledInstance(maxWidth,maxHeight,Image.SCALE_SMOOTH));    }  }  context.dispose();  menuButton.setIcon(frameIcon);}  }
class C{  public void addSeparator(){  add(new JPopupMenu.Separator());}  }
class C{  @Override public void close(){  connection.close();}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    checkNotClosed();    if (pos == count) {      return -1;    }    return buf[pos++];  }}  }
class C{  public void insert_reference(org.omg.CORBA.Object value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_reference",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    $self.insert_reference(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void removeListener(String listenerID) throws ConfigurationException {  if (hasOrgSchema) {    scm.removeListener(listenerID);  } else {    ssm.removeListener(listenerID);  }}  }
class C{  public PERSIST_STORE(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  @Override public void clear_doors(){  super.clear_doors();  target_doors.clear();}  }
class C{  public ShapelessRecipe addIngredient(Material ingredient){  return addIngredient(1,ingredient,0);}  }
class C{  protected CGIRunner(String command,Hashtable<String,String> env,File wd,ArrayList<String> params){  this.command=command;  this.env=env;  this.wd=wd;  this.params=params;  updateReadyStatus();}  }
class C{  public PageIterator(PagedRequest<V> request,GitHubClient client){  this.request=request;  this.client=client;  next=request.getUri();  nextPage=parsePageNumber(next);}  }
class C{  @Override public void processServerShutdown(LocalizableMessage reason){  stopRequested=true;  while (rotaterThread != null && rotaterThread.isAlive()) {    try {      rotaterThread.interrupt();      rotaterThread.join();    } catch (    InterruptedException ex) {    }  }  DirectoryServer.deregisterShutdownListener(this);  removeAllRotationPolicies();  removeAllRetentionPolicies();}  }
class C{  public static ProfileStack decode(ASN1Reader reader) throws IOException {  reader.readStartSequence();  int numFrames=(int)reader.readInteger();  String[] classNames=new String[numFrames];  String[] methodNames=new String[numFrames];  int[] lineNumbers=new int[numFrames];  int i=0;  while (reader.hasNextElement()) {    classNames[i]=reader.readOctetStringAsString();    methodNames[i]=reader.readOctetStringAsString();    lineNumbers[i]=(int)reader.readInteger();    i++;  }  reader.readEndSequence();  return new ProfileStack(classNames,methodNames,lineNumbers);}  }
class C{  public static int countByUUID_G(java.lang.String uuid,long groupId){  return getPersistence().countByUUID_G(uuid,groupId);}  }
class C{  @AfterClass public void afterClass() throws Exception {}  }
class C{  public com.sun.identity.liberty.ws.authnsvc.jaxb.SASLRequestElement createSASLRequestElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.authnsvc.jaxb.impl.SASLRequestElementImpl();}  }
class C{  public Dimension preferredLayoutSize(Container target){synchronized (target.getTreeLock()) {    Dimension dim=new Dimension(0,0);    int nmembers=target.getComponentCount();    boolean firstVisibleComponent=true;    boolean useBaseline=getAlignOnBaseline();    int maxAscent=0;    int maxDescent=0;    for (int i=0; i < nmembers; i++) {      Component m=target.getComponent(i);      if (m.isVisible()) {        Dimension d=m.getPreferredSize();        dim.height=Math.max(dim.height,d.height);        if (firstVisibleComponent) {          firstVisibleComponent=false;        } else {          dim.width+=hgap;        }        dim.width+=d.width;        if (useBaseline) {          int baseline=m.getBaseline(d.width,d.height);          if (baseline >= 0) {            maxAscent=Math.max(maxAscent,baseline);            maxDescent=Math.max(maxDescent,d.height - baseline);          }        }      }    }    if (useBaseline) {      dim.height=Math.max(maxAscent + maxDescent,dim.height);    }    Insets insets=target.getInsets();    dim.width+=insets.left + insets.right + hgap * 2;    dim.height+=insets.top + insets.bottom + vgap * 2;    return dim;  }}  }
class C{  public boolean isActive(){  return isAlive() && operation != null;}  }
class C{  public SpinnerNumberModel(){  this(Integer.valueOf(0),null,null,Integer.valueOf(1));}  }
class C{  @Override public void close(){  connection.close();}  }
class C{  @Override public void cancelCall(){  getCall().cancel();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hasAttribute03.class,args);}  }
class C{  public TooManyActiveSessionsException(String message,int maxActive){  super(message);  maxActiveSessions=maxActive;}  }
class C{  public CustomObjectInputStream(InputStream stream,ClassLoader classLoader) throws IOException {  this(stream,classLoader,null,null,false);}  }
class C{  public static boolean isEmpty(CharSequence str){  if (str == null || str.length() == 0) {    return true;  } else {    return false;  }}  }
class C{  public static boolean isIgnoredProfile(String realm){  return IGNORE_PROFILE.equalsIgnoreCase(getProfileAttribute(realm));}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof JobKOctetsSupported);}  }
class C{  public void readFully(byte[] data) throws IOException, EOFException {  readFully(data,0,data.length);}  }
class C{  public W3CEndpointReference build(){  if (elements.isEmpty() && attributes.isEmpty() && interfaceName == null) {    return Provider.provider().createW3CEndpointReference(address,serviceName,endpointName,metadata,wsdlDocumentLocation,referenceParameters);  }  return Provider.provider().createW3CEndpointReference(address,interfaceName,serviceName,endpointName,metadata,wsdlDocumentLocation,referenceParameters,elements,attributes);}  }
class C{  public final void toString(StringBuilder buffer){  if (this.accessType != null) {    buffer.append(accessType.toString().toLowerCase());    Set<EnumRight> enumRights=EnumRight.getEnumRight(rights);    if (enumRights != null) {      buffer.append("(");      for (Iterator<EnumRight> iter=enumRights.iterator(); iter.hasNext(); ) {        buffer.append(iter.next().getRight());        if (iter.hasNext()) {          buffer.append(",");        }      }      buffer.append(")");    } else {      buffer.append("(all)");    }  }}  }
class C{  private void skipWhitespacesAndComments(){  boolean commentSkipped;  do {    commentSkipped=false;    while (accept(WHITESPACE_CARRIAGE_RETURN,WHITESPACE_NEWLINE,WHITESPACE_SPACE,WHITESPACE_TAB)) {      skip();    }    if (acceptSequence(COMMENT_BEGIN_TOKEN,SINGLELINE_COMMENT_SECOND_TOKEN)) {      skip(2);      readInputUntil(WHITESPACE_CARRIAGE_RETURN,WHITESPACE_NEWLINE);      commentSkipped=true;    } else     if (acceptSequence(COMMENT_BEGIN_TOKEN,MULTILINE_COMMENT_SECOND_TOKEN)) {      skip(2);      while (true) {        if (acceptSequence(MULTILINE_COMMENT_SECOND_TOKEN,MULTILINE_COMMENT_END_TOKEN)) {          skip(2);          break;        }        skip();      }      commentSkipped=true;    }  } while (commentSkipped);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node lcNode;  Node nsNode;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  lcNode=employeeNode.getLastChild();  nsNode=lcNode.getNextSibling();  assertNull("nodeGetNextSiblingNullAssert1",nsNode);}  }
class C{  public void attributeDecl(String eName,String aName,String type,String valueDefault,String value) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#attributeDecl: " + eName + ", "+ aName+ ", etc...");  if (null != m_declHandler) {    m_declHandler.attributeDecl(eName,aName,type,valueDefault,value);  }}  }
class C{  protected void UnaryExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  boolean isNeg=false;  if (m_tokenChar == '-') {    nextToken();    appendOp(2,OpCodes.OP_NEG);    isNeg=true;  }  UnionExpr();  if (isNeg)   m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  public static String printString(String val){  if (theConverter == null)   initConverter();  return theConverter.printString(val);}  }
class C{  private void interruptWorkers(){  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    for (    Worker w : workers)     w.interruptIfStarted();  }  finally {    mainLock.unlock();  }}  }
class C{  protected List<Record> fetchRecords() throws IOException {  List<Record> records;  if (recordHandler.getFinishedBytes() != null) {    records=recordHandler.parseRecords(recordHandler.getFinishedBytes());    recordHandler.setFinishedBytes(null);  } else {    byte[] rawResponse=transportHandler.fetchData();    while ((records=recordHandler.parseRecords(rawResponse)) == null) {      rawResponse=ArrayConverter.concatenate(rawResponse,transportHandler.fetchData());    }    if (records.isEmpty()) {      throw new WorkflowExecutionException("The configured protocol message was not found, " + "the TLS peer does not send any data.");    }  }  return records;}  }
class C{  public boolean canWriteTiles(){  return canWriteTiles;}  }
class C{  public void layoutContainer(Container container){  Dimension containerSize=container.getSize();  if (containerSize.height <= 0 || containerSize.width <= 0) {    lastSplitPaneSize=0;    return;  }  int spDividerLocation=splitPane.getDividerLocation();  Insets insets=splitPane.getInsets();  int availableSize=getAvailableSize(containerSize,insets);  int newSize=getSizeForPrimaryAxis(containerSize);  int beginLocation=getDividerLocation(splitPane);  int dOffset=getSizeForPrimaryAxis(insets,true);  Dimension dSize=(components[2] == null) ? null : components[2].getPreferredSize();  if ((doReset && !dividerLocationIsSet) || spDividerLocation < 0) {    resetToPreferredSizes(availableSize);  } else   if (lastSplitPaneSize <= 0 || availableSize == lastSplitPaneSize || !painted || (dSize != null && getSizeForPrimaryAxis(dSize) != sizes[2])) {    if (dSize != null) {      sizes[2]=getSizeForPrimaryAxis(dSize);    } else {      sizes[2]=0;    }    setDividerLocation(spDividerLocation - dOffset,availableSize);    dividerLocationIsSet=false;  } else   if (availableSize != lastSplitPaneSize) {    distributeSpace(availableSize - lastSplitPaneSize,getKeepHidden());  }  doReset=false;  dividerLocationIsSet=false;  lastSplitPaneSize=availableSize;  int nextLocation=getInitialLocation(insets);  int counter=0;  while (counter < 3) {    if (components[counter] != null && components[counter].isVisible()) {      setComponentToSize(components[counter],sizes[counter],nextLocation,insets,containerSize);      nextLocation+=sizes[counter];    }switch (counter) {case 0:      counter=2;    break;case 2:  counter=1;break;case 1:counter=3;break;}}if (painted) {int newLocation=getDividerLocation(splitPane);if (newLocation != (spDividerLocation - dOffset)) {int lastLocation=splitPane.getLastDividerLocation();ignoreDividerLocationChange=true;try {splitPane.setDividerLocation(newLocation);splitPane.setLastDividerLocation(lastLocation);}  finally {ignoreDividerLocationChange=false;}}}}  }
class C{  public PdfException(String message,Object obj){  this(message);  this.object=obj;}  }
class C{  public static void closeSession() throws HibernateException {  Session session=(Session)threadLocal.get();  threadLocal.set(null);  if (session != null) {    session.close();  }}  }
class C{  public boolean isPrimitiveArray(){  return primitiveArray;}  }
class C{  protected boolean shouldClose(PooledConnection con,int action){  if (con.getConnectionVersion() < getPoolVersion())   return true;  if (con.isDiscarded())   return true;  if (isClosed())   return true;  if (!con.validate(action))   return true;  if (!terminateTransaction(con))   return true;  if (con.isMaxAgeExpired())   return true; else   return false;}  }
class C{  String popBaseIndentifier(){  return (String)m_baseIdentifiers.pop();}  }
class C{  private void rangeCheckForAdd(int index){  if (index > size || index < 0)   throw new IndexOutOfBoundsException(outOfBoundsMsg(index));}  }
class C{  public AuthenticatedUsers(){  super(DN.valueOf(CONFIG_DN),EnumSet.of(POST_RESPONSE_MODIFY,POST_RESPONSE_MODIFY_DN,POST_RESPONSE_DELETE),true);  userMap=new DITCacheMap<>();  lock=new ReentrantReadWriteLock();  DirectoryServer.registerInternalPlugin(this);}  }
class C{  public HttpAccessAuditFilter(RequestHandler auditServiceHandler,TimeService time){  this.auditServiceHandler=auditServiceHandler;  this.time=time;}  }
class C{  public String toString(){  return "[My test Certificate, type: " + getType() + "]";}  }
class C{  @Descriptor("Exit from the console.") public void exit(){  System.exit(0);}  }
class C{  public static String convertFromUtf32(int[] text,int startPos,int endPos){  StringBuilder sb=new StringBuilder();  for (int i=startPos; i < endPos; i++) {    sb.append(convertFromUtf32ToCharArray(text[i]));  }  return sb.toString();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.replaceData(10,-3,"ABC");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  public final void testVerifyPublicKey2() throws InvalidKeyException, CertificateException, NoSuchAlgorithmException, NoSuchProviderException, SignatureException, InvalidAlgorithmParameterException, IOException {  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  c1.verify(null);  cert.verify(cert.getPublicKey());  PublicKey k=cert.getPublicKey();  MyModifiablePublicKey changedEncoding=new MyModifiablePublicKey(k);  changedEncoding.setEncoding(new byte[cert.getEncoded().length - 1]);  try {    cert.verify(c1.getPublicKey());    fail();  } catch (  InvalidKeyException expected) {  }  try {    cert.verify(changedEncoding);    fail();  } catch (  Exception expected) {  }}  }
class C{  @Override public void onTokenRefresh(){  Intent intent=new Intent(this,RegistrationIntentService.class);  startService(intent);}  }
class C{  public double length(){  return Math.sqrt(NumberConversions.square(x) + NumberConversions.square(y) + NumberConversions.square(z));}  }
class C{  public boolean isCacheable(RequestHeaders request){  int responseCode=headers.getResponseCode();  if (responseCode != HttpURLConnection.HTTP_OK && responseCode != HttpURLConnection.HTTP_NOT_AUTHORITATIVE && responseCode != HttpURLConnection.HTTP_MULT_CHOICE && responseCode != HttpURLConnection.HTTP_MOVED_PERM && responseCode != HttpURLConnection.HTTP_GONE) {    return false;  }  if (request.hasAuthorization() && !isPublic && !mustRevalidate&& sMaxAgeSeconds == -1) {    return false;  }  if (noStore) {    return false;  }  return true;}  }
class C{  public void resetWait(){  spamChecker.resetSpamCheck(getWaitPeriod());}  }
class C{  public static JRadioButton makeJRadioButton(LocalizableMessage text,LocalizableMessage tooltip,TextStyle style){  JRadioButton rb=new JRadioButton();  rb.setOpaque(false);  if (text != null) {    rb.setText(text.toString());  }  if (tooltip != null) {    rb.setToolTipText(tooltip.toString());  }  setTextStyle(rb,style);  return rb;}  }
class C{  public static void convert(RandomAccessFileOrArray input,OutputStream output) throws java.io.IOException {  Pfm2afm p=new Pfm2afm(input,output);  p.openpfm();  p.putheader();  p.putchartab();  p.putkerntab();  p.puttrailer();  p.output.flush();}  }
class C{  public NSNumber(byte[] bytes,final int startIndex,final int endIndex,final int type){switch (type) {case INTEGER:{      doubleValue=longValue=BinaryPropertyListParser.parseLong(bytes,startIndex,endIndex);      break;    }case REAL:{    doubleValue=BinaryPropertyListParser.parseDouble(bytes,startIndex,endIndex);    longValue=Math.round(doubleValue);    break;  }default :{  throw new IllegalArgumentException("Type argument is not valid.");}}this.type=type;}  }
class C{  public InternationalFormatter(Format format){  this();  setFormat(format);}  }
class C{  public OperationMonitor(){  this(new RateTimer());}  }
class C{  public void deleteAgents(String realmName,Set agents) throws AMConsoleException {  if ((agents != null) && !agents.isEmpty()) {    String idNames=AMFormatUtils.toCommaSeparatedFormat(agents);    String[] params={realmName,idNames};    logEvent("ATTEMPT_DELETE_AGENT",params);    try {      AMIdentityRepository repo=new AMIdentityRepository(getUserSSOToken(),realmName);      repo.deleteIdentities(getAMIdentity(agents));      logEvent("SUCCEED_DELETE_AGENT",params);    } catch (    IdRepoException e) {      String[] paramsEx={realmName,idNames,getErrorString(e)};      logEvent("EXCEPTION_DELETE_AGENT",paramsEx);      throw new AMConsoleException(getErrorString(e));    }catch (    SSOException e) {      String[] paramsEx={realmName,idNames,getErrorString(e)};      logEvent("EXCEPTION_DELETE_AGENT",paramsEx);      throw new AMConsoleException(getErrorString(e));    }  }}  }
class C{  @SuppressWarnings("null") public static void main(String args[]){  if (catalinaHome == null) {    log.error("Must set '" + Globals.CATALINA_HOME_PROP + "' system property");    System.exit(1);  }  int index=0;  while (true) {    if (index == args.length) {      usage();      System.exit(1);    }    if ("-ant".equals(args[index]))     ant=true; else     if ("-common".equals(args[index]))     common=true; else     if ("-server".equals(args[index]))     server=true; else     if ("-shared".equals(args[index]))     shared=true; else     break;    index++;  }  if (index > args.length) {    usage();    System.exit(1);  }  if (ant)   System.setProperty("ant.home",catalinaHome);  ClassLoader classLoader=null;  try {    ArrayList<File> packed=new ArrayList<>();    ArrayList<File> unpacked=new ArrayList<>();    unpacked.add(new File(catalinaHome,"classes"));    packed.add(new File(catalinaHome,"lib"));    if (common) {      unpacked.add(new File(catalinaHome,"common" + File.separator + "classes"));      packed.add(new File(catalinaHome,"common" + File.separator + "lib"));    }    if (server) {      unpacked.add(new File(catalinaHome,"server" + File.separator + "classes"));      packed.add(new File(catalinaHome,"server" + File.separator + "lib"));    }    if (shared) {      unpacked.add(new File(catalinaHome,"shared" + File.separator + "classes"));      packed.add(new File(catalinaHome,"shared" + File.separator + "lib"));    }    classLoader=ClassLoaderFactory.createClassLoader(unpacked.toArray(new File[0]),packed.toArray(new File[0]),null);  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    log.error("Class loader creation threw exception",t);    System.exit(1);  }  Thread.currentThread().setContextClassLoader(classLoader);  Class<?> clazz=null;  String className=args[index++];  try {    if (log.isDebugEnabled())     log.debug("Loading application class " + className);    clazz=classLoader.loadClass(className);  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    log.error("Exception creating instance of " + className,t);    System.exit(1);  }  Method method=null;  String params[]=new String[args.length - index];  System.arraycopy(args,index,params,0,params.length);  try {    if (log.isDebugEnabled())     log.debug("Identifying main() method");    String methodName="main";    Class<?> paramTypes[]=new Class[1];    paramTypes[0]=params.getClass();    method=clazz.getMethod(methodName,paramTypes);  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    log.error("Exception locating main() method",t);    System.exit(1);  }  try {    if (log.isDebugEnabled())     log.debug("Calling main() method");    Object paramValues[]=new Object[1];    paramValues[0]=params;    method.invoke(null,paramValues);  } catch (  Throwable t) {    t=ExceptionUtils.unwrapInvocationTargetException(t);    ExceptionUtils.handleThrowable(t);    log.error("Exception calling main() method",t);    System.exit(1);  }}  }
class C{  protected void locateUriRoot(File f){  String tUriBase=uriBase;  if (tUriBase == null) {    tUriBase="/";  }  try {    if (f.exists()) {      f=new File(f.getAbsolutePath());      while (true) {        File g=new File(f,"WEB-INF");        if (g.exists() && g.isDirectory()) {          uriRoot=f.getCanonicalPath();          uriBase=tUriBase;          if (log.isInfoEnabled()) {            log.info(Localizer.getMessage("jspc.implicit.uriRoot",uriRoot));          }          break;        }        if (f.exists() && f.isDirectory()) {          tUriBase="/" + f.getName() + "/"+ tUriBase;        }        String fParent=f.getParent();        if (fParent == null) {          break;        } else {          f=new File(fParent);        }      }      if (uriRoot != null) {        File froot=new File(uriRoot);        uriRoot=froot.getCanonicalPath();      }    }  } catch (  IOException ioe) {  }}  }
class C{  public int search(Object o){  int i=lastIndexOf(o);  if (i >= 0) {    return size() - i;  }  return -1;}  }
class C{  public String toLocalizedPattern(){  return ndf.toLocalizedPattern();}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  public boolean isClosed(){  return isClosed;}  }
class C{  protected void serveResource(HttpServletRequest request,HttpServletResponse response,boolean content,String encoding) throws IOException, ServletException {  boolean serveContent=content;  String path=getRelativePath(request,true);  if (debug > 0) {    if (serveContent)     log("DefaultServlet.serveResource:  Serving resource '" + path + "' headers and data"); else     log("DefaultServlet.serveResource:  Serving resource '" + path + "' headers only");  }  if (path.length() == 0) {    doDirectoryRedirect(request,response);    return;  }  WebResource resource=resources.getResource(path);  if (!resource.exists()) {    String requestUri=(String)request.getAttribute(RequestDispatcher.INCLUDE_REQUEST_URI);    if (requestUri == null) {      requestUri=request.getRequestURI();    } else {      throw new FileNotFoundException(sm.getString("defaultServlet.missingResource",requestUri));    }    response.sendError(HttpServletResponse.SC_NOT_FOUND,requestUri);    return;  }  if (!resource.canRead()) {    String requestUri=(String)request.getAttribute(RequestDispatcher.INCLUDE_REQUEST_URI);    if (requestUri == null) {      requestUri=request.getRequestURI();    } else {      throw new FileNotFoundException(sm.getString("defaultServlet.missingResource",requestUri));    }    response.sendError(HttpServletResponse.SC_FORBIDDEN,requestUri);    return;  }  if (resource.isFile() && (path.endsWith("/") || path.endsWith("\\"))) {    String requestUri=(String)request.getAttribute(RequestDispatcher.INCLUDE_REQUEST_URI);    if (requestUri == null) {      requestUri=request.getRequestURI();    }    response.sendError(HttpServletResponse.SC_NOT_FOUND,requestUri);    return;  }  boolean isError=response.getStatus() >= HttpServletResponse.SC_BAD_REQUEST;  boolean included=false;  if (resource.isFile()) {    included=(request.getAttribute(RequestDispatcher.INCLUDE_CONTEXT_PATH) != null);    if (!included && !isError && !checkIfHeaders(request,response,resource)) {      return;    }  }  String contentType=resource.getMimeType();  if (contentType == null) {    contentType=getServletContext().getMimeType(resource.getName());    resource.setMimeType(contentType);  }  String eTag=null;  String lastModifiedHttp=null;  if (resource.isFile() && !isError) {    eTag=resource.getETag();    lastModifiedHttp=resource.getLastModifiedHttp();  }  boolean usingPrecompressedVersion=false;  if (compressionFormats.length > 0 && !included && resource.isFile() && !pathEndsWithCompressedExtension(path)) {    List<PrecompressedResource> precompressedResources=getAvailablePrecompressedResources(path);    if (!precompressedResources.isEmpty()) {      Collection<String> varyHeaders=response.getHeaders("Vary");      boolean addRequired=true;      for (      String varyHeader : varyHeaders) {        if ("*".equals(varyHeader) || "accept-encoding".equalsIgnoreCase(varyHeader)) {          addRequired=false;          break;        }      }      if (addRequired) {        response.addHeader("Vary","accept-encoding");      }      PrecompressedResource bestResource=getBestPrecompressedResource(request,precompressedResources);      if (bestResource != null) {        response.addHeader("Content-Encoding",bestResource.format.encoding);        resource=bestResource.resource;        usingPrecompressedVersion=true;      }    }  }  ArrayList<Range> ranges=null;  long contentLength=-1L;  if (resource.isDirectory()) {    if (!path.endsWith("/")) {      doDirectoryRedirect(request,response);      return;    }    if (!listings) {      response.sendError(HttpServletResponse.SC_NOT_FOUND,request.getRequestURI());      return;    }    contentType="text/html;charset=UTF-8";  } else {    if (!isError) {      if (useAcceptRanges) {        response.setHeader("Accept-Ranges","bytes");      }      ranges=parseRange(request,response,resource);      response.setHeader("ETag",eTag);      response.setHeader("Last-Modified",lastModifiedHttp);    }    contentLength=resource.getContentLength();    if (contentLength == 0L) {      serveContent=false;    }  }  ServletOutputStream ostream=null;  PrintWriter writer=null;  if (serveContent) {    try {      ostream=response.getOutputStream();    } catch (    IllegalStateException e) {      if (!usingPrecompressedVersion && ((contentType == null) || (contentType.startsWith("text")) || (contentType.endsWith("xml"))|| (contentType.contains("/javascript")))) {        writer=response.getWriter();        ranges=FULL;      } else {        throw e;      }    }  }  ServletResponse r=response;  long contentWritten=0;  while (r instanceof ServletResponseWrapper) {    r=((ServletResponseWrapper)r).getResponse();  }  if (r instanceof ResponseFacade) {    contentWritten=((ResponseFacade)r).getContentWritten();  }  if (contentWritten > 0) {    ranges=FULL;  }  if (resource.isDirectory() || isError || ((ranges == null || ranges.isEmpty()) && request.getHeader("Range") == null)|| ranges == FULL) {    if (contentType != null) {      if (debug > 0)       log("DefaultServlet.serveFile:  contentType='" + contentType + "'");      response.setContentType(contentType);    }    if (resource.isFile() && contentLength >= 0 && (!serveContent || ostream != null)) {      if (debug > 0)       log("DefaultServlet.serveFile:  contentLength=" + contentLength);      if (contentWritten == 0) {        response.setContentLengthLong(contentLength);      }    }    if (serveContent) {      try {        response.setBufferSize(output);      } catch (      IllegalStateException e) {      }      InputStream renderResult=null;      if (ostream == null) {        if (resource.isDirectory()) {          renderResult=render(getPathPrefix(request),resource,encoding);        } else {          renderResult=resource.getInputStream();        }        copy(resource,renderResult,writer,encoding);      } else {        if (resource.isDirectory()) {          renderResult=render(getPathPrefix(request),resource,encoding);        } else {          if (!checkSendfile(request,response,resource,contentLength,null)) {            byte[] resourceBody=resource.getContent();            if (resourceBody == null) {              renderResult=resource.getInputStream();            } else {              ostream.write(resourceBody);            }          }        }        if (renderResult != null) {          copy(resource,renderResult,ostream);        }      }    }  } else {    if ((ranges == null) || (ranges.isEmpty()))     return;    response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT);    if (ranges.size() == 1) {      Range range=ranges.get(0);      response.addHeader("Content-Range","bytes " + range.start + "-"+ range.end+ "/"+ range.length);      long length=range.end - range.start + 1;      response.setContentLengthLong(length);      if (contentType != null) {        if (debug > 0)         log("DefaultServlet.serveFile:  contentType='" + contentType + "'");        response.setContentType(contentType);      }      if (serveContent) {        try {          response.setBufferSize(output);        } catch (        IllegalStateException e) {        }        if (ostream != null) {          if (!checkSendfile(request,response,resource,range.end - range.start + 1,range))           copy(resource,ostream,range);        } else {          throw new IllegalStateException();        }      }    } else {      response.setContentType("multipart/byteranges; boundary=" + mimeSeparation);      if (serveContent) {        try {          response.setBufferSize(output);        } catch (        IllegalStateException e) {        }        if (ostream != null) {          copy(resource,ostream,ranges.iterator(),contentType);        } else {          throw new IllegalStateException();        }      }    }  }}  }
class C{  public Response execute(AuditEventPublisher auditEventPublisher,AuditEventFactory auditEventFactory){  Response res=new Response("OK");  SsoServerLoggingSvcImpl slsi=null;  SsoServerLoggingHdlrEntryImpl slei=null;  if (MonitoringUtil.isRunning()) {    slsi=Agent.getLoggingSvcMBean();    slei=slsi.getHandler(SsoServerLoggingSvcImpl.REMOTE_HANDLER_NAME);  }  Logger logger=(Logger)Logger.getLogger(_logname);  if (Debug.messageEnabled()) {    Debug.message("LogRecWrite: exec: logname = " + _logname);  }  Level level=Level.parse(((com.sun.identity.log.service.LogRecord)_records.elementAt(0)).level);  String msg=((com.sun.identity.log.service.LogRecord)_records.elementAt(0)).msg;  Map logInfoMap=((com.sun.identity.log.service.LogRecord)_records.elementAt(0)).logInfoMap;  Object[] parameters=((com.sun.identity.log.service.LogRecord)_records.elementAt(0)).parameters;  try {    msg=new String(com.sun.identity.shared.encode.Base64.decode(msg));  } catch (  RuntimeException ex) {    if (Debug.messageEnabled()) {      Debug.message("LogRecWrite: message is not base64 encoded");    }  }  LogRecord rec=new LogRecord(level,msg);  if (logInfoMap != null) {    String loginIDSid=(String)logInfoMap.get(LogConstants.LOGIN_ID_SID);    if (loginIDSid != null && loginIDSid.length() > 0) {      SSOToken loginIDToken=null;      try {        SSOTokenManager ssom=SSOTokenManager.getInstance();        loginIDToken=ssom.createSSOToken(loginIDSid);      } catch (      SSOException e) {        if (Debug.warningEnabled()) {          Debug.warning("LogService::process(): SSOException",e);        }        rec.setLogInfoMap(logInfoMap);      }      if (loginIDToken != null) {        rec=LogSSOTokenDetails.logSSOTokenInfo(rec,loginIDToken);        Set keySet=logInfoMap.keySet();        Iterator i=keySet.iterator();        String key=null;        String value=null;        while (i.hasNext()) {          key=(String)i.next();          value=(String)logInfoMap.get(key);          if (value != null && value.length() > 0) {            if (key.equalsIgnoreCase(LogConstants.DATA)) {              try {                value=new String(com.sun.identity.shared.encode.Base64.decode(value));              } catch (              RuntimeException ex) {                if (Debug.messageEnabled()) {                  Debug.message("LogRecWrite: data is not " + "base64 encoded");                }              }            }            rec.addLogInfo(key,value);          }        }      }    } else {      rec.setLogInfoMap(logInfoMap);    }  }  rec.addLogInfo(LogConstants.LOG_LEVEL,rec.getLevel().toString());  rec.setParameters(parameters);  SSOToken loggedByToken=null;  String realm=NO_REALM;  try {    SSOTokenManager ssom=SSOTokenManager.getInstance();    loggedByToken=ssom.createSSOToken(_loggedBySid);    Map<String,Set<String>> appAttributes=IdUtils.getIdentity(loggedByToken).getAttributes();    realm=getFirstItem(appAttributes.get(EVALUATION_REALM),NO_REALM);  } catch (  IdRepoException|SSOException ssoe) {    Debug.error("LogRecWrite: exec:SSOException: ",ssoe);  }  if (MonitoringUtil.isRunning()) {    slei.incHandlerRequestCount(1);  }  auditAccessMessage(auditEventPublisher,auditEventFactory,rec,realm);  logger.log(rec,loggedByToken);  if (MonitoringUtil.isRunning()) {    slei.incHandlerSuccessCount(1);  }  return res;}  }
class C{  public void testDivideExpEqualsZero(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=-15;  String b="747233429293018787918347987234564568";  int bScale=10;  String c="1.64769459009933764189139568605273529E+40";  int resScale=-5;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_CEILING);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public int lengthOfYear(){  return (isLeapYear() ? 366 : 365);}  }
class C{  public ChoiceFormat(String newPattern){  applyPattern(newPattern);}  }
class C{  public File createFile(String name) throws IOException {  File file=new File(getFolder(),name);  file.createNewFile();  return file;}  }
class C{  public static Map<String,Object> sendAuthRequestToOrigServer(HttpServletRequest request,HttpServletResponse response,String cookieURL){  Map<String,Object> origRequestData=new HashMap<String,Object>();  if (utilDebug.messageEnabled()) {    StringBuilder message=new StringBuilder();    Enumeration<String> requestHeaders=request.getHeaderNames();    while (requestHeaders.hasMoreElements()) {      String name=requestHeaders.nextElement();      Enumeration value=(Enumeration)request.getHeaders(name);      message.append("Header name='").append(name).append("', Value='").append(value).append("'\n");    }    utilDebug.message(message.toString());  }  HttpURLConnection conn=null;  OutputStream out=null;  String strCookies=null;  URL authURL=null;  try {    String queryString=request.getQueryString();    if (queryString != null) {      authURL=new URL(cookieURL + "?" + queryString);    } else {      authURL=new URL(cookieURL);    }    if (utilDebug.messageEnabled()) {      utilDebug.message("Connecting to : " + authURL);    }    conn=HttpURLConnectionManager.getConnection(authURL);    conn.setUseCaches(useCache);    conn.setFollowRedirects(false);    conn.setInstanceFollowRedirects(false);    conn.setRequestProperty(ISAuthConstants.ACCEPT_LANG_HEADER,request.getHeader(ISAuthConstants.ACCEPT_LANG_HEADER));    conn.setRequestProperty("Host",request.getHeader("host"));    List<Cookie> cookies=removeLocalLoadBalancingCookie(asList(request.getCookies()));    strCookies=getCookiesString(cookies);    if (strCookies != null) {      if (utilDebug.messageEnabled()) {        utilDebug.message("Sending cookies : " + strCookies);      }      conn.setRequestProperty("Cookie",strCookies);    }    utilDebug.message("SENDING DATA ... ");    copyRequestHeaders(request,conn);    if (request.getMethod().equals("GET")) {      conn.connect();    } else {      Map<String,Set<String>> queryParams=new HashMap<String,Set<String>>();      if (queryString != null) {        for (        String param : queryString.split("&")) {          int idx=param.indexOf('=');          if (idx != -1) {            String paramName=param.substring(0,idx);            String paramValue=param.substring(idx + 1);            Set<String> values=queryParams.get(paramName);            if (values == null) {              values=new HashSet<String>();              queryParams.put(paramName,values);            }            values.add(paramValue);          }        }      }      conn.setRequestProperty("Content-Type","application/x-www-form-urlencoded");      Map<String,String[]> params=request.getParameterMap();      Map<String,Set<String>> postParams=new HashMap<String,Set<String>>();      for (      Map.Entry<String,String[]> entry : params.entrySet()) {        if (queryParams.containsKey(entry.getKey())) {        } else {          Set<String> values=new HashSet<String>();          for (          String value : entry.getValue()) {            values.add(getCharDecodedField(value,"UTF-8"));          }          postParams.put(entry.getKey(),values);        }      }      String postData=getFormData(postParams);      if (utilDebug.messageEnabled()) {        utilDebug.message("Request data : " + postData);      }      if (postData.trim().length() > 0) {        conn.setDoOutput(true);        conn.setRequestMethod("POST");        out=conn.getOutputStream();        PrintWriter pw=new PrintWriter(out);        pw.print(postData);        pw.flush();        pw.close();      }    }    utilDebug.message("RECEIVING DATA ... ");    if (utilDebug.messageEnabled()) {      utilDebug.message("Response Code='{}', Response Message='{}' ",conn.getResponseCode(),conn.getResponseMessage());    }    if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {      StringBuilder in_buf=new StringBuilder();      BufferedReader in=new BufferedReader(new InputStreamReader(conn.getInputStream(),"UTF-8"));      int len;      char[] buf=new char[1024];      while ((len=in.read(buf,0,buf.length)) != -1) {        in_buf.append(buf,0,len);      }      String in_string=in_buf.toString();      if (utilDebug.messageEnabled()) {        utilDebug.message("Received response data : " + in_string);      }      origRequestData.put("OUTPUT_DATA",in_string);    } else {      utilDebug.warning("Response code for proxied auth is NOT OK");    }    String client_type=conn.getHeaderField("AM_CLIENT_TYPE");    if (client_type != null) {      origRequestData.put("AM_CLIENT_TYPE",client_type);    }    String redirect_url=conn.getHeaderField("Location");    if (redirect_url != null) {      try {        URL gotoURL=new URL(redirect_url);        if (isSameServer(authURL,gotoURL)) {          if (utilDebug.messageEnabled()) {            utilDebug.message("Relative redirect detected");          }          String path=gotoURL.getPath();          String query=gotoURL.getQuery();          redirect_url=(path != null ? path : "") + (query != null ? "?" + gotoURL.getQuery() : "");        }        if (utilDebug.messageEnabled()) {          utilDebug.message("sendAuthRequestToOrigServer(): Setting redirect URL to: " + redirect_url);        }        origRequestData.put("AM_REDIRECT_URL",redirect_url);      } catch (      MalformedURLException murle) {        origRequestData.put("AM_REDIRECT_URL",redirect_url);      }    }    String content_type=conn.getHeaderField("Content-Type");    if (content_type != null) {      origRequestData.put("CONTENT_TYPE",content_type);    }    origRequestData.put("RESPONSE_CODE",conn.getResponseCode());    copyResponseHeaders(conn.getHeaderFields(),response);  } catch (  IOException ioe) {    origRequestData.put("EXCEPTION",ioe);  }catch (  Exception e) {    if (utilDebug.warningEnabled()) {      utilDebug.warning("send exception : ",e);    }  } finally {    if (out != null) {      try {        out.close();      } catch (      IOException ioe) {        if (utilDebug.messageEnabled()) {          utilDebug.message("send IOException : ",ioe);        }      }    }  }  return origRequestData;}  }
class C{  private static JsonValue toThreadDumpJson(RecordProperties recordProperties){  JsonObject threadsDumpsProperties=JsonValueBuilder.jsonValue();  threadsDumpsProperties.put(RecordConstants.THREAD_DUMP_ENABLE_LABEL,recordProperties.threadDumpEnable);  if (recordProperties.threadDumpEnable) {    JsonObject threadsDumpsDelayProperties=JsonValueBuilder.jsonValue();    threadsDumpsDelayProperties.put(RecordConstants.THREAD_DUMP_DELAY_TIME_UNIT_LABEL,TimeUnit.SECONDS.toString());    threadsDumpsDelayProperties.put(RecordConstants.THREAD_DUMP_DELAY_VALUE_LABEL,recordProperties.threadDumpDelayInSeconds);    threadsDumpsProperties.put(RecordConstants.THREAD_DUMP_DELAY_LABEL,threadsDumpsDelayProperties.build().asMap());  }  return threadsDumpsProperties.build();}  }
class C{  public Document createDefaultDocument(){  return new PlainDocument();}  }
class C{  protected void createProperty(String propertyPrefix,Object result){  if (propertyPrefix == null)   propertyPrefix="";  if (result instanceof CompositeDataSupport) {    CompositeDataSupport data=(CompositeDataSupport)result;    CompositeType compositeType=data.getCompositeType();    Set<String> keys=compositeType.keySet();    for (Iterator<String> iter=keys.iterator(); iter.hasNext(); ) {      String key=iter.next();      Object value=data.get(key);      OpenType<?> type=compositeType.getType(key);      if (type instanceof SimpleType<?>) {        setProperty(propertyPrefix + "." + key,value);      } else {        createProperty(propertyPrefix + "." + key,value);      }    }  } else   if (result instanceof TabularDataSupport) {    TabularDataSupport data=(TabularDataSupport)result;    for (Iterator<Object> iter=data.keySet().iterator(); iter.hasNext(); ) {      Object key=iter.next();      for (Iterator<?> iter1=((List<?>)key).iterator(); iter1.hasNext(); ) {        Object key1=iter1.next();        CompositeData valuedata=data.get(new Object[]{key1});        Object value=valuedata.get("value");        OpenType<?> type=valuedata.getCompositeType().getType("value");        if (type instanceof SimpleType<?>) {          setProperty(propertyPrefix + "." + key1,value);        } else {          createProperty(propertyPrefix + "." + key1,value);        }      }    }  } else   if (result.getClass().isArray()) {    if (isSeparatearrayresults()) {      int size=0;      for (int i=0; i < Array.getLength(result); i++) {        if (setProperty(propertyPrefix + "." + size,Array.get(result,i))) {          size++;        }      }      if (size > 0) {        setProperty(propertyPrefix + ".Length",Integer.toString(size));      }    }  } else {    String delim=getDelimiter();    if (delim != null) {      StringTokenizer tokenizer=new StringTokenizer(result.toString(),delim);      int size=0;      for (; tokenizer.hasMoreTokens(); ) {        String token=tokenizer.nextToken();        if (setProperty(propertyPrefix + "." + size,token)) {          size++;        }      }      if (size > 0)       setProperty(propertyPrefix + ".Length",Integer.toString(size));    } else {      setProperty(propertyPrefix,result.toString());    }  }}  }
class C{  private void markDone(UUID id){  BoundStatement delete=new BoundStatement(deleteFromNotDoneStmt);  bindUUIDWhere(delete,id);  getSession().execute(delete);}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof Set) {    Set<?> s=(Set<?>)object;    try {      return size() == s.size() && containsAll(s);    } catch (    NullPointerException ignored) {      return false;    }catch (    ClassCastException ignored) {      return false;    }  }  return false;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsaddr.RelatesToElement createRelatesToElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.RelatesToElementImpl();}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("parse");  try {    this.lexer.match(TokenTypes.CALL_ID);    this.lexer.SPorHT();    this.lexer.match(':');    this.lexer.SPorHT();    CallID callID=new CallID();    this.lexer.SPorHT();    String rest=lexer.getRest();    callID.setCallId(rest.trim());    return callID;  }  finally {    if (debug)     dbg_leave("parse");  }}  }
class C{  private boolean compareAndDecrementWorkerCount(int expect){  return ctl.compareAndSet(expect,expect - 1);}  }
class C{  public MaxForwardsHeader createMaxForwardsHeader(int maxForwards) throws InvalidArgumentException {  if (maxForwards < 0 || maxForwards > 255)   throw new InvalidArgumentException("bad maxForwards arg " + maxForwards);  MaxForwards m=new MaxForwards();  m.setMaxForwards(maxForwards);  return m;}  }
class C{  public AMSearchResults searchStaticGroups(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),getSearchFilter(AMObject.GROUP),wildcard,avPairs,searchControl);}  }
class C{  private static void cacheUserSourceFiles(String sourcePaths) throws IOException {  String[] paths=sourcePaths.equals("") ? new String[]{projectPath} : sourcePaths.split(File.pathSeparator);  Whyline.getWorkingSourceFolder().mkdir();  for (  String path : paths) {    File source=new File(path);    if (!source.isAbsolute())     source=new File(projectPath,path);    if (!source.exists())     fail("I couldn't find a file or directory with the name \"" + path + "\""); else     if (source.isDirectory())     findJavaSourceFilesInApplicationPath(source,""); else     if (source.getName().endsWith(".jar")) {      JarFile jar=new JarFile(source);      Enumeration<JarEntry> e=jar.entries();      while (e.hasMoreElements()) {        JarEntry entry=e.nextElement();        if (entry.getName().endsWith(".java")) {          DataInputStream stream=new DataInputStream(jar.getInputStream(entry));          byte[] bytes=new byte[(int)entry.getSize()];          stream.readFully(bytes);          FileOutputStream out=new FileOutputStream(new File(entry.getName().replace('/',File.separatorChar)));          out.write(bytes);        }      }    }  }}  }
class C{  private synchronized void updateAuthConfiguration(String serviceName,String orgName,String componentName){  Set<String> set=authConfigListenerMap.get(serviceName);  if (set == null || set.isEmpty()) {    return;  }  Set<String> updatedEntries=null;  for (  final String configName : set) {    if (processAuthConfigEntry(serviceName,orgName,componentName,configName)) {      if (updatedEntries == null) {        updatedEntries=new HashSet<>();      }      updatedEntries.add(configName);    }  }  if (updatedEntries == null) {    return;  }  if (debug.messageEnabled()) {    debug.message("updateAuthConfiguration, updated=" + updatedEntries);  }  removeConfigListenerEntry(updatedEntries);}  }
class C{  public ElementIterator(Document document){  root=document.getDefaultRootElement();}  }
class C{  public void unregisterComponent(JComponent component){  component.removeMouseListener(this);  component.removeMouseMotionListener(moveBeforeEnterListener);  component.removeKeyListener(accessibilityKeyListener);}  }
class C{  public static DOMImplementationRegistry newInstance() throws ClassNotFoundException, InstantiationException, IllegalAccessException, ClassCastException {  Vector sources=new Vector();  ClassLoader classLoader=getClassLoader();  String p=getSystemProperty(PROPERTY);  if (p == null) {    p=getServiceValue(classLoader);  }  if (p == null) {    p=FALLBACK_CLASS;  }  if (p != null) {    StringTokenizer st=new StringTokenizer(p);    while (st.hasMoreTokens()) {      String sourceName=st.nextToken();      boolean internal=false;      if (System.getSecurityManager() != null) {        if (sourceName != null && sourceName.startsWith(DEFAULT_PACKAGE)) {          internal=true;        }      }      Class sourceClass=null;      if (classLoader != null && !internal) {        sourceClass=classLoader.loadClass(sourceName);      } else {        sourceClass=Class.forName(sourceName);      }      DOMImplementationSource source=(DOMImplementationSource)sourceClass.newInstance();      sources.addElement(source);    }  }  return new DOMImplementationRegistry(sources);}  }
class C{  public SQLOutputImpl(Vector<?> attributes,Map<String,?> map) throws SQLException {  if ((attributes == null) || (map == null)) {    throw new SQLException("Cannot instantiate a SQLOutputImpl " + "instance with null parameters");  }  this.attribs=attributes;  this.map=map;}  }
class C{  public boolean baseIsLeftToRight(){  return bidiBase.baseIsLeftToRight();}  }
class C{  public BindException(String msg){  super(msg);}  }
class C{  void recomposeNamespaceAliases(NamespaceAlias nsAlias){  m_namespaceAliasComposed.put(nsAlias.getStylesheetNamespace(),nsAlias);}  }
class C{  public Enumeration depthFirstEnumeration(){  return postorderEnumeration();}  }
class C{  public boolean on(ASN1ObjectIdentifier stem){  String id=getId(), stemId=stem.getId();  return id.length() > stemId.length() && id.charAt(stemId.length()) == '.' && id.startsWith(stemId);}  }
class C{  public String post(String url,String json,Map<String,String> headers,Map<String,String> params,final int expectedStatusCode){  HttpPost post=new HttpPost(url);  if (json != null) {    post.setEntity(new StringEntity(json,ContentType.APPLICATION_JSON));  }  setHeaders(post,headers);  setParams(post,params);  return method(post,expectedStatusCode);}  }
class C{  public XmlPullParser newPullParser() throws XmlPullParserException {  if (parserClasses == null)   throw new XmlPullParserException("Factory initialization was incomplete - has not tried " + classNamesLocation);  if (parserClasses.size() == 0)   throw new XmlPullParserException("No valid parser classes found in " + classNamesLocation);  final StringBuilder issues=new StringBuilder();  for (int i=0; i < parserClasses.size(); i++) {    final Class ppClass=(Class)parserClasses.get(i);    try {      final XmlPullParser pp=(XmlPullParser)ppClass.newInstance();      for (Iterator iter=features.keySet().iterator(); iter.hasNext(); ) {        final String key=(String)iter.next();        final Boolean value=(Boolean)features.get(key);        if (value != null && value.booleanValue()) {          pp.setFeature(key,true);        }      }      return pp;    } catch (    Exception ex) {      issues.append(ppClass.getName() + ": " + ex.toString()+ "; ");    }  }  throw new XmlPullParserException("could not create parser: " + issues);}  }
class C{  static Class lookUpFactoryClass(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  String factoryClassName=lookUpFactoryClassName(factoryId,propertiesFilename,fallbackClassName);  ClassLoader cl=findClassLoader();  if (factoryClassName == null) {    factoryClassName=fallbackClassName;  }  try {    Class providerClass=findProviderClass(factoryClassName,cl,true);    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return providerClass;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + factoryClassName + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + factoryClassName + " could not be instantiated: "+ x,x);  }}  }
class C{  public static void updateCommandBuilderWithTaskSchedule(CommandBuilder commandBuilder,TaskScheduleUserData taskSchedule){  TaskScheduleArgs argsToClone=new TaskScheduleArgs();  String sDate=null;  String recurringDateTime=null;  if (!taskSchedule.isStartNow()) {    Date date=taskSchedule.getStartDate();    if (date != null) {      sDate=StaticUtils.formatDateTimeString(date);    }    recurringDateTime=taskSchedule.getRecurringDateTime();  }  String sFailedDependencyAction=null;  FailedDependencyAction fAction=taskSchedule.getFailedDependencyAction();  if (fAction != null) {    sFailedDependencyAction=fAction.name();  }  String[] sValues={sDate,recurringDateTime,sFailedDependencyAction};  StringArgument[] args={argsToClone.startArg,argsToClone.recurringArg,argsToClone.failedDependencyActionArg};  for (int i=0; i < sValues.length; i++) {    if (sValues[i] != null) {      commandBuilder.addArgument(getArgument(args[i],Collections.singleton(sValues[i])));    }  }  List<?>[] values={taskSchedule.getDependencyIds(),taskSchedule.getNotifyUponCompletionEmailAddresses(),taskSchedule.getNotifyUponErrorEmailAddresses()};  args=new StringArgument[]{argsToClone.dependencyArg,argsToClone.completionNotificationArg,argsToClone.errorNotificationArg};  for (int i=0; i < values.length; i++) {    if (!values[i].isEmpty()) {      commandBuilder.addArgument(getArgument(args[i],values[i]));    }  }}  }
class C{  public boolean hasAge(){  return fieldSetFlags()[0];}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.ExtensionElement createExtensionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ExtensionElementImpl();}  }
class C{  @SuppressWarnings("unchecked") public void writeCharacterStream(java.io.Reader x) throws SQLException {  BufferedReader bufReader=new BufferedReader(x);  try {    int i;    while ((i=bufReader.read()) != -1) {      char ch=(char)i;      StringBuffer strBuf=new StringBuffer();      strBuf.append(ch);      String str=new String(strBuf);      String strLine=bufReader.readLine();      writeString(str.concat(strLine));    }  } catch (  IOException ioe) {  }}  }
class C{  private Object writeReplace(){  return new Ser(Ser.LOCAL_DATE_TYPE,this);}  }
class C{  public com.sun.identity.liberty.ws.paos.jaxb.RequestType createRequestType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.paos.jaxb.impl.RequestTypeImpl();}  }
class C{  public boolean isResourceOfferingModified(){  return resourceOfferingModified;}  }
class C{  @Override public void backgroundProcess(){}  }
class C{  public ValidationMessage(String id,String message){  this.id=id;  this.message=message;}  }
class C{  public Vector divide(Vector vec){  x/=vec.x;  y/=vec.y;  z/=vec.z;  return this;}  }
class C{  public SaltedMD5PasswordStorageScheme(){  super();}  }
class C{  public SQLTransientException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public ConfigParameters configurationFile(String file){  configurationFile=file;  return this;}  }
class C{  public int size(){  return _frameTop;}  }
class C{  public synchronized boolean isRequestConsumable(SIPRequest dialogRequest){  if (dialogRequest.getMethod().equals(Request.ACK))   throw new RuntimeException("Illegal method");  if (!this.isSequenceNumberValidation()) {    return true;  }  return remoteSequenceNumber < dialogRequest.getCSeq().getSeqNumber();}  }
class C{  public void write(char c[],int off,int len){  if ((off < 0) || (off > c.length) || (len < 0)|| ((off + len) > c.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }synchronized (lock) {    int newcount=count + len;    if (newcount > buf.length) {      buf=Arrays.copyOf(buf,Math.max(buf.length << 1,newcount));    }    System.arraycopy(c,off,buf,count,len);    count=newcount;  }}  }
class C{  public PartiallyOrderedSet(){}  }
class C{  public X509CertificateHolderSelector(X500Name issuer,BigInteger serialNumber,byte[] subjectKeyId){  this.issuer=issuer;  this.serialNumber=serialNumber;  this.subjectKeyId=subjectKeyId;}  }
class C{  public static int readSingleByte(InputStream in) throws IOException {  byte[] buffer=new byte[1];  int result=in.read(buffer,0,1);  return (result != -1) ? buffer[0] & 0xff : -1;}  }
class C{  private void status(Request request,Response response){  int statusCode=response.getStatus();  Context context=request.getContext();  if (context == null) {    return;  }  if (!response.isError()) {    return;  }  ErrorPage errorPage=context.findErrorPage(statusCode);  if (errorPage == null) {    errorPage=context.findErrorPage(0);  }  if (errorPage != null && response.isErrorReportRequired()) {    response.setAppCommitted(false);    request.setAttribute(RequestDispatcher.ERROR_STATUS_CODE,Integer.valueOf(statusCode));    String message=response.getMessage();    if (message == null) {      message="";    }    request.setAttribute(RequestDispatcher.ERROR_MESSAGE,message);    request.setAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR,errorPage.getLocation());    request.setAttribute(Globals.DISPATCHER_TYPE_ATTR,DispatcherType.ERROR);    Wrapper wrapper=request.getWrapper();    if (wrapper != null) {      request.setAttribute(RequestDispatcher.ERROR_SERVLET_NAME,wrapper.getName());    }    request.setAttribute(RequestDispatcher.ERROR_REQUEST_URI,request.getRequestURI());    if (custom(request,response,errorPage)) {      response.setErrorReported();      try {        response.finishResponse();      } catch (      ClientAbortException e) {      }catch (      IOException e) {        container.getLogger().warn("Exception Processing " + errorPage,e);      }    }  }}  }
class C{  protected void paintThumb(SynthContext context,Graphics g,Rectangle thumbBounds){  SynthLookAndFeel.updateSubregion(context,g,thumbBounds);  int orientation=scrollbar.getOrientation();  context.getPainter().paintScrollBarThumbBackground(context,g,thumbBounds.x,thumbBounds.y,thumbBounds.width,thumbBounds.height,orientation);  context.getPainter().paintScrollBarThumbBorder(context,g,thumbBounds.x,thumbBounds.y,thumbBounds.width,thumbBounds.height,orientation);}  }
class C{  public int compare(Object o1,Object o2){  AttributeSchema attr1=(AttributeSchema)o1;  AttributeSchema attr2=(AttributeSchema)o2;  String key1=attr1.getI18NKey();  String key2=attr2.getI18NKey();  if (key1 != null && key2 != null) {    if (collator != null) {      return collator.compare(key1,key2);    } else {      return key1.compareTo(key2);    }  }  return -1;}  }
class C{  public PdfCanvas circle(double x,double y,double r){  final double curve=0.5523f;  moveTo(x + r,y);  curveTo(x + r,y + r * curve,x + r * curve,y + r,x,y + r);  curveTo(x - r * curve,y + r,x - r,y + r * curve,x - r,y);  curveTo(x - r,y - r * curve,x - r * curve,y - r,x,y - r);  curveTo(x + r * curve,y - r,x + r,y - r * curve,x + r,y);  return this;}  }
class C{  public SdpEncoderImpl(){}  }
class C{  public Segment(){  this(null,0,0);}  }
class C{  public void handleTblDataServerActionHrefRequest(RequestInvocationEvent event) throws ModelControlException {  String serverName=(String)getDisplayFieldValue(TBL_DATA_SERVER_ACTION_HREF);  forwardToServerProfilePage(serverName);}  }
class C{  public void closeAll(){  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))   logger.logDebug("Closing " + socketTable.size() + " sockets from IOHandler");  for (Enumeration<SocketChannel> values=socketTable.elements(); values.hasMoreElements(); ) {    SocketChannel s=(SocketChannel)values.nextElement();    try {      s.close();    } catch (    IOException ex) {    }  }}  }
class C{  public ReplacesParser(String callID){  super(callID);}  }
class C{  void mul(int y,MutableBigInteger z){  if (y == 1) {    z.copyValue(this);    return;  }  if (y == 0) {    z.clear();    return;  }  long ylong=y & LONG_MASK;  int[] zval=(z.value.length < intLen + 1 ? new int[intLen + 1] : z.value);  long carry=0;  for (int i=intLen - 1; i >= 0; i--) {    long product=ylong * (value[i + offset] & LONG_MASK) + carry;    zval[i + 1]=(int)product;    carry=product >>> 32;  }  if (carry == 0) {    z.offset=1;    z.intLen=intLen;  } else {    z.offset=0;    z.intLen=intLen + 1;    zval[0]=(int)carry;  }  z.value=zval;}  }
class C{  public RowView(Element elem){  super(elem,View.X_AXIS);  fillColumns=new BitSet();  RowView.this.setPropertiesFromAttributes();}  }
class C{  @Override public HijrahDate dateYearDay(int prolepticYear,int dayOfYear){  HijrahDate date=HijrahDate.of(this,prolepticYear,1,1);  if (dayOfYear > date.lengthOfYear()) {    throw new DateTimeException("Invalid dayOfYear: " + dayOfYear);  }  return date.plusDays(dayOfYear - 1);}  }
class C{  public SearchOperationBasis(ClientConnection clientConnection,long operationID,int messageID,List<Control> requestControls,ByteString rawBaseDN,SearchScope scope,DereferenceAliasesPolicy derefPolicy,int sizeLimit,int timeLimit,boolean typesOnly,RawFilter rawFilter,Set<String> attributes){  super(clientConnection,operationID,messageID,requestControls);  this.rawBaseDN=rawBaseDN;  this.scope=scope;  this.derefPolicy=derefPolicy;  this.sizeLimit=sizeLimit;  this.timeLimit=timeLimit;  this.typesOnly=typesOnly;  this.rawFilter=rawFilter;  this.attributes=attributes != null ? attributes : new LinkedHashSet<String>(0);  this.sizeLimit=getSizeLimit(sizeLimit,clientConnection);  this.timeLimit=getTimeLimit(timeLimit,clientConnection);}  }
class C{  static Class lookUpFactoryClass(String factoryId) throws ConfigurationError {  return lookUpFactoryClass(factoryId,null,null);}  }
class C{  public void endAttributes() throws SAXException {  String uri=getCurrentElementUri();  String local=getCurrentElementLocal();  String prefix=nsContext.getPrefix(uri);  _assert(prefix != null);  String qname;  if (prefix.length() != 0)   qname=prefix + ':' + local; else   qname=local;  nsContext.iterateDeclaredPrefixes(startPrefixCallback);  writer.startElement(uri,local,qname,attributes);  attributes.clear();  textBuf.setLength(0);}  }
class C{  protected void tearDown(){  try {    os.close();  } catch (  Exception e) {  }  try {    dis.close();  } catch (  Exception e) {  }}  }
class C{  Route flipTlsMode(){  return new Route(address,proxy,inetSocketAddress,!modernTls);}  }
class C{  public boolean beforeEveryday(OmniDate compareDate){  Calendar calendar=Calendar.getInstance();  calendar.setTime(compareDate.getDate());  int compareHour=calendar.get(Calendar.HOUR_OF_DAY);  int compareMinute=calendar.get(Calendar.MINUTE);  int compareSecond=calendar.get(Calendar.SECOND);  int compareSecondInDay=compareHour * SECONDS_IN_HOUR + compareMinute * SECONDS_IN_MINUTE + compareSecond;  calendar.setTime(value);  int hour=calendar.get(Calendar.HOUR_OF_DAY);  int minute=calendar.get(Calendar.MINUTE);  int second=calendar.get(Calendar.SECOND);  int secondInDay=hour * SECONDS_IN_HOUR + minute * SECONDS_IN_MINUTE + second;  if (secondInDay <= compareSecondInDay) {    return true;  }  return false;}  }
class C{  public FileWriterWithEncoding(File file,Charset encoding) throws IOException {  this(file,encoding,false);}  }
class C{  public void readAndExecute(LDAPConnection connection,List<String> lines,LDAPDeleteOptions deleteOptions) throws IOException, LDAPException {  for (  String line : lines) {    executeDelete(connection,line,deleteOptions);  }}  }
class C{  public boolean containsKey(String key){  return dict.containsKey(key);}  }
class C{  public boolean verifyWSSSignature(org.w3c.dom.Document document,java.lang.String certAlias) throws XMLSignatureException {  return false;}  }
class C{  public StateInteractive assign_clearance_class(int p_cl_class_index){  if (p_cl_class_index < 0 || p_cl_class_index >= r_brd.brd_rules.clearance_matrix.get_class_count()) {    return return_state;  }  actlog_start_scope(LogfileScope.ASSIGN_CLEARANCE_CLASS,p_cl_class_index);  r_brd.generate_snapshot();  for (  BrdItem curr_item : items_list) {    if (curr_item.clearance_idx() == p_cl_class_index) {      continue;    }    curr_item.change_clearance_idx(p_cl_class_index);  }  return return_state;}  }
class C{  public void instanceOf(final Type type){  typeInsn(Opcodes.INSTANCEOF,type);}  }
class C{  public void addApplicationEventListener(Object listener){  applicationEventListenersList.add(listener);}  }
class C{  private void prePaintDirtyRegions(){  Map<Component,Rectangle> dirtyComponents;  java.util.List<Runnable> runnableList;synchronized (this) {    dirtyComponents=this.dirtyComponents;    runnableList=this.runnableList;    this.runnableList=null;  }  if (runnableList != null) {    for (    Runnable runnable : runnableList) {      runnable.run();    }  }  paintDirtyRegions();  if (dirtyComponents.size() > 0) {    paintDirtyRegions(dirtyComponents);  }}  }
class C{  public JspException(){}  }
class C{  @Override public void processingInstruction(String target,String data) throws SAXException {  if (saxLog.isDebugEnabled()) {    saxLog.debug("processingInstruction('" + target + "','"+ data+ "')");  }}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {  if (dtdHandler != null) {    dtdHandler.unparsedEntityDecl(name,publicId,systemId,notationName);  }}  }
class C{  public void insert_char(char value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_char",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    $self.insert_char(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static final boolean isMultipartContent(HttpServletRequest request){  if (!POST_METHOD.equalsIgnoreCase(request.getMethod())) {    return false;  }  return FileUploadBase.isMultipartContent(new ServletRequestContext(request));}  }
class C{  static Map<String,List<String>> unmodifiableCopyOfExtraProperties(final Map<String,List<String>> extraProperties){  if (extraProperties == null || extraProperties.isEmpty()) {    return Collections.emptyMap();  }  final Map<String,List<String>> tmp=new LinkedHashMap<>(extraProperties.size());  for (  final Map.Entry<String,List<String>> e : extraProperties.entrySet()) {    tmp.put(e.getKey(),unmodifiableCopyOfList(e.getValue()));  }  return Collections.unmodifiableMap(tmp);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetdoctype.class,args);}  }
class C{  private static String linkId(String id){  StringBuilder sb=new StringBuilder("repo/link");  if (id != null) {    sb.append('/').append(id);  }  return sb.toString();}  }
class C{  public static boolean putBoolean(Context context,String key,boolean value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putBoolean(key,value);  return editor.commit();}  }
class C{  private Map checkAndSetTrustedProviders(String realm,CircleOfTrustDescriptor cotDescriptor) throws COTException {  Set tp=cotDescriptor.getTrustedProviders();  Map map=null;  if ((tp != null) && !tp.isEmpty()) {    map=COTUtils.trustedProviderSetToProtocolMap(tp,realm);    retainValidEntityIDs(map,COTConstants.SAML2,realm);    retainValidEntityIDs(map,COTConstants.IDFF,realm);    retainValidEntityIDs(map,COTConstants.WS_FED,realm);  }  return map;}  }
class C{  public ID3v23Frame(AbstractID3v2Frame frame) throws InvalidFrameException {  logger.finer("Creating frame from a frame of a different version");  if (frame instanceof ID3v23Frame) {    throw new UnsupportedOperationException("Copy Constructor not called. Please type cast the argument");  }  if (frame instanceof ID3v24Frame) {    statusFlags=new StatusFlags((ID3v24Frame.StatusFlags)frame.getStatusFlags());    encodingFlags=new EncodingFlags(frame.getEncodingFlags().getFlags());  }  if (frame instanceof ID3v24Frame) {    if (frame.getBody() instanceof FrameBodyUnsupported) {      this.frameBody=new FrameBodyUnsupported((FrameBodyUnsupported)frame.getBody());      this.frameBody.setHeader(this);      identifier=frame.getIdentifier();      logger.config("UNKNOWN:Orig id is:" + frame.getIdentifier() + ":New id is:"+ identifier);      return;    } else     if (frame.getBody() instanceof FrameBodyDeprecated) {      if (ID3Tags.isID3v23FrameIdentifier(frame.getIdentifier())) {        this.frameBody=((FrameBodyDeprecated)frame.getBody()).getOriginalFrameBody();        this.frameBody.setHeader(this);        this.frameBody.setTextEncoding(ID3TextEncodingConversion.getTextEncoding(this,this.frameBody.getTextEncoding()));        identifier=frame.getIdentifier();        logger.config("DEPRECATED:Orig id is:" + frame.getIdentifier() + ":New id is:"+ identifier);      } else {        this.frameBody=new FrameBodyDeprecated((FrameBodyDeprecated)frame.getBody());        this.frameBody.setHeader(this);        this.frameBody.setTextEncoding(ID3TextEncodingConversion.getTextEncoding(this,this.frameBody.getTextEncoding()));        identifier=frame.getIdentifier();        logger.config("DEPRECATED:Orig id is:" + frame.getIdentifier() + ":New id is:"+ identifier);        return;      }    } else     if (ID3Tags.isID3v24FrameIdentifier(frame.getIdentifier())) {      logger.finer("isID3v24FrameIdentifier");      identifier=ID3Tags.convertFrameID24To23(frame.getIdentifier());      if (identifier != null) {        logger.finer("V4:Orig id is:" + frame.getIdentifier() + ":New id is:"+ identifier);        this.frameBody=(AbstractTagFrameBody)ID3Tags.copyObject(frame.getBody());        this.frameBody.setHeader(this);        this.frameBody.setTextEncoding(ID3TextEncodingConversion.getTextEncoding(this,this.frameBody.getTextEncoding()));        return;      } else {        identifier=ID3Tags.forceFrameID24To23(frame.getIdentifier());        if (identifier != null) {          logger.finer("V4:Orig id is:" + frame.getIdentifier() + ":New id is:"+ identifier);          this.frameBody=this.readBody(identifier,(AbstractID3v2FrameBody)frame.getBody());          this.frameBody.setHeader(this);          this.frameBody.setTextEncoding(ID3TextEncodingConversion.getTextEncoding(this,this.frameBody.getTextEncoding()));          return;        } else {          ByteArrayOutputStream baos=new ByteArrayOutputStream();          ((AbstractID3v2FrameBody)frame.getBody()).write(baos);          identifier=frame.getIdentifier();          this.frameBody=new FrameBodyUnsupported(identifier,baos.toByteArray());          this.frameBody.setHeader(this);          logger.finer("V4:Orig id is:" + frame.getIdentifier() + ":New Id Unsupported is:"+ identifier);          return;        }      }    } else {      logger.severe("Orig id is:" + frame.getIdentifier() + "Unable to create Frame Body");      throw new InvalidFrameException("Orig id is:" + frame.getIdentifier() + "Unable to create Frame Body");    }  } else   if (frame instanceof ID3v22Frame) {    if (ID3Tags.isID3v22FrameIdentifier(frame.getIdentifier())) {      identifier=ID3Tags.convertFrameID22To23(frame.getIdentifier());      if (identifier != null) {        logger.config("V3:Orig id is:" + frame.getIdentifier() + ":New id is:"+ identifier);        this.frameBody=(AbstractTagFrameBody)ID3Tags.copyObject(frame.getBody());        this.frameBody.setHeader(this);        return;      } else       if (ID3Tags.isID3v22FrameIdentifier(frame.getIdentifier())) {        identifier=ID3Tags.forceFrameID22To23(frame.getIdentifier());        if (identifier != null) {          logger.config("V22Orig id is:" + frame.getIdentifier() + "New id is:"+ identifier);          this.frameBody=this.readBody(identifier,(AbstractID3v2FrameBody)frame.getBody());          this.frameBody.setHeader(this);          return;        } else {          this.frameBody=new FrameBodyDeprecated((AbstractID3v2FrameBody)frame.getBody());          this.frameBody.setHeader(this);          identifier=frame.getIdentifier();          logger.config("Deprecated:V22:orig id id is:" + frame.getIdentifier() + ":New id is:"+ identifier);          return;        }      }    } else {      this.frameBody=new FrameBodyUnsupported((FrameBodyUnsupported)frame.getBody());      this.frameBody.setHeader(this);      identifier=frame.getIdentifier();      logger.config("UNKNOWN:Orig id is:" + frame.getIdentifier() + ":New id is:"+ identifier);      return;    }  }  logger.warning("Frame is unknown version:" + frame.getClass());}  }
class C{  protected void readFrames(ByteBuffer byteBuffer,int size){  logger.finest(getLoggingFilename() + ":" + "Start of frame body at"+ byteBuffer.position());  ID3v24Frame next;  frameMap=new LinkedHashMap();  encryptedFrameMap=new LinkedHashMap();  this.fileReadSize=size;  logger.finest(getLoggingFilename() + ":" + "Start of frame body at:"+ byteBuffer.position()+ ",frames data size is:"+ size);  while (byteBuffer.position() <= size) {    String id;    try {      logger.finest(getLoggingFilename() + ":" + "looking for next frame at:"+ byteBuffer.position());      next=new ID3v24Frame(byteBuffer,getLoggingFilename());      id=next.getIdentifier();      loadFrameIntoMap(id,next);    } catch (    PaddingException ex) {      logger.config(getLoggingFilename() + ":Found padding starting at:" + byteBuffer.position());      break;    }catch (    EmptyFrameException ex) {      logger.warning(getLoggingFilename() + ":" + "Empty Frame:"+ ex.getMessage());      this.emptyFrameBytes+=TAG_HEADER_LENGTH;    }catch (    InvalidFrameIdentifierException ifie) {      logger.config(getLoggingFilename() + ":" + "Invalid Frame Identifier:"+ ifie.getMessage());      this.invalidFrames++;      break;    }catch (    InvalidFrameException ife) {      logger.warning(getLoggingFilename() + ":" + "Invalid Frame:"+ ife.getMessage());      this.invalidFrames++;      break;    }catch (    InvalidDataTypeException idete) {      logger.warning(getLoggingFilename() + ":Corrupt Frame:" + idete.getMessage());      this.invalidFrames++;      continue;    }  }}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request);    serverTransactionId.sendResponse(response);    logger.info("Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    TestHarness.fail(ex.getMessage());    System.exit(0);  }}  }
class C{  public BindException(){}  }
class C{  private boolean isHHSign(String str){  boolean sign=true;  try {    char r=(char)Integer.parseInt(str,16);  } catch (  NumberFormatException e) {    sign=false;  }  return sign;}  }
class C{  private BigInteger(long val){  if (val < 0) {    val=-val;    signum=-1;  } else {    signum=1;  }  int highWord=(int)(val >>> 32);  if (highWord == 0) {    mag=new int[1];    mag[0]=(int)val;  } else {    mag=new int[2];    mag[0]=highWord;    mag[1]=(int)val;  }}  }
class C{  public Entitlement(String applicationName,Set<String> resourceNames,Map<String,Boolean> actionValues){  setApplicationName(applicationName);  setResourceNames(resourceNames);  setActionValues(actionValues);}  }
class C{  public JmsMessageSubscriber(final String name,final JsonValue propertiesConfig){  super(name);  sessionMode=SessionModeConfig.valueOf(propertiesConfig.get("sessionMode").required().asString());  messageSelector=propertiesConfig.get("messageSelector").asString();  jndiConfiguration=new JndiConfiguration(propertiesConfig.get("jndi").required());}  }
class C{  public void upFocusCycle(Component aComponent){  if (aComponent != null) {    aComponent.transferFocusUpCycle();  }}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String siteName=getStringOptionValue(IArgument.SITE_NAME);  String[] params={siteName};  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SHOW_SITE",params);    if (SiteConfiguration.isSiteExist(adminSSOToken,siteName)) {      String primaryURL=SiteConfiguration.getSitePrimaryURL(adminSSOToken,siteName);      Set failoverURLs=SiteConfiguration.getSiteSecondaryURLs(adminSSOToken,siteName);      String siteId=SiteConfiguration.getSiteID(adminSSOToken,siteName);      Object[] args={primaryURL};      outputWriter.printlnMessage(MessageFormat.format(getResourceString("show-site-primaryURL"),args));      if ((failoverURLs != null) && !failoverURLs.isEmpty()) {        outputWriter.printlnMessage(getResourceString("show-site-secondaryURL"));        for (Iterator i=failoverURLs.iterator(); i.hasNext(); ) {          outputWriter.printlnMessage((String)i.next());        }      } else {        outputWriter.printlnMessage(getResourceString("show-site-no-secondaryURL"));      }      outputWriter.printlnMessage("");      args[0]=siteId;      outputWriter.printlnMessage(MessageFormat.format(getResourceString("show-site-ID"),args));    } else {      outputWriter.printlnMessage(MessageFormat.format(getResourceString("show-site-no-exists"),(Object[])params));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_SHOW_SITE",params);  } catch (  SSOException e) {    String[] args={siteName,e.getMessage()};    debugError("ShowSite.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SHOW_SITE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={siteName,e.getMessage()};    debugError("ShowSite.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SHOW_SITE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public String toString(){  return "LDAPModificationSet: " + modifications.toString();}  }
class C{  public String metricsSeparator(){  return values.metricsSeparator;}  }
class C{  public NTLMEngineException(String message){  super(message);}  }
class C{  private void readObject(ObjectInputStream p_stream) throws IOException, ClassNotFoundException {  p_stream.defaultReadObject();  settings_read_only=false;}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.TextType createTextType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.TextTypeImpl();}  }
class C{  protected final void assertStillUp() throws IllegalStateException {  if (this.isShutDown)   throw new IllegalStateException("Manager is shut down.");}  }
class C{  public void defineFunction(String prefix,String function,Method method) throws java.lang.NoSuchMethodException {  if (prefix == null || function == null || method == null) {    throw new NullPointerException(Util.message(context,"elProcessor.defineFunctionNullParams"));  }  int modifiers=method.getModifiers();  if (!Modifier.isStatic(modifiers) || !Modifier.isPublic(modifiers)) {    throw new NoSuchMethodException(Util.message(context,"elProcessor.defineFunctionInvalidMethod",method.getName(),method.getDeclaringClass().getName()));  }  manager.mapFunction(prefix,function,method);}  }
class C{  public static synchronized void registerAdditionalHyphenationFileDirectory(String directory){  if (additionalHyphenationFileDirectories == null) {    additionalHyphenationFileDirectories=new ArrayList<>();  }  additionalHyphenationFileDirectories.add(directory);}  }
class C{  public void test_lastIndexOfLjava_lang_ObjectI(){  assertEquals("Failed to find object",0,tVector.lastIndexOf("Test 0",0));  assertTrue("Found Object outside of index",(tVector.lastIndexOf("Test 0",10) > -1));  tVector.setElementAt(null,20);  tVector.setElementAt(null,40);  tVector.setElementAt(null,60);  assertTrue("Incorrect lastIndexOf returned for null: " + tVector.lastIndexOf(null,15),tVector.lastIndexOf(null,15) == -1);  assertTrue("Incorrect lastIndexOf returned for null: " + tVector.lastIndexOf(null,45),tVector.lastIndexOf(null,45) == 40);  try {    tVector.lastIndexOf(null,tVector.size());    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }}  }
class C{  static public void assertFalse(boolean condition){  assertFalse(null,condition);}  }
class C{  public PdfCanvas fill(){  document.checkIsoConformance(currentGs,IsoKey.DRAWMODE_FILL,resources);  contentStream.getOutputStream().writeBytes(f);  return this;}  }
class C{  public void testGetAlgorithm() throws Exception {  String secret="secret string";  String algorithm="DES";  KeyGenerator kg=KeyGenerator.getInstance(algorithm);  Key key=kg.generateKey();  Cipher cipher=Cipher.getInstance(algorithm);  cipher.init(Cipher.ENCRYPT_MODE,key);  SealedObject so=new SealedObject(secret,cipher);  assertEquals("The algorithm name should be the same as used " + "in cipher.",algorithm,so.getAlgorithm());}  }
class C{  public <M extends Configuration>void deregisterAddListener(InstantiableRelationDefinition<?,M> d,ServerManagedObjectAddListener<M> listener){  validateRelationDefinition(d);  DN baseDN=DNBuilder.create(path,d);  deregisterAddListener(baseDN,listener);}  }
class C{  public JTree(Vector<?> value){  this(createTreeModel(value));  this.setRootVisible(false);  this.setShowsRootHandles(true);  expandRoot();}  }
class C{  private void disconnect(boolean finalize){  if (isDiscarded() && connection == null) {    return;  }  setDiscarded(true);  if (connection != null) {    try {      parent.disconnectEvent(this,finalize);      if (xaConnection == null) {        connection.close();      } else {        xaConnection.close();      }    } catch (    Exception ignore) {      if (log.isDebugEnabled()) {        log.debug("Unable to close underlying SQL connection",ignore);      }    }  }  connection=null;  xaConnection=null;  lastConnected=-1;  if (finalize)   parent.finalize(this);}  }
class C{  public CLIException(Throwable cause,int exitCode,String subcommandName){  super(cause);  this.exitCode=exitCode;  this.subcommandName=subcommandName;}  }
class C{  public static Reader newReader(ReadableByteChannel channel,String charsetName){  if (charsetName == null) {    throw new NullPointerException("charsetName == null");  }  return newReader(channel,Charset.forName(charsetName).newDecoder(),-1);}  }
class C{  @Override public void mark(int readlimit){}  }
class C{  public IdentitySubjectAddViewBean(){  super("IdentitySubjectAdd",DEFAULT_DISPLAY_URL);}  }
class C{  public void clear(){  final Object[] items=this.items;  final ReentrantLock lock=this.lock;  lock.lock();  try {    int k=count;    if (k > 0) {      final int putIndex=this.putIndex;      int i=takeIndex;      do {        items[i]=null;      } while ((i=inc(i)) != putIndex);      takeIndex=putIndex;      count=0;      if (itrs != null)       itrs.queueIsEmpty();      for (; k > 0 && lock.hasWaiters(notFull); k--)       notFull.signal();    }  }  finally {    lock.unlock();  }}  }
class C{  public void globalConfigChanged(String serviceName,String version,String groupName,String serviceComponent,int changeType){}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  retval.append(LESS_THAN);  errorInfo.encode(retval);  retval.append(GREATER_THAN);  if (!parameters.isEmpty()) {    retval.append(SEMICOLON);    parameters.encode(retval);  }  return retval;}  }
class C{  private void grow(int minCapacity){  int oldCapacity=buf.length;  int newCapacity=oldCapacity << 1;  if (newCapacity - minCapacity < 0)   newCapacity=minCapacity;  if (newCapacity - MAX_ARRAY_SIZE > 0)   newCapacity=hugeCapacity(minCapacity);  buf=Arrays.copyOf(buf,newCapacity);}  }
class C{  public static String generateMessageHandleWithServerID(){  if (random == null) {    return null;  }  byte bytes[]=new byte[SAML2Constants.ID_LENGTH];  random.nextBytes(bytes);  String id=byteArrayToString(bytes);  return embedServerID(id);}  }
class C{  public void expandPath(TreePath path){  TreeModel model=getModel();  if (path != null && model != null && !model.isLeaf(path.getLastPathComponent())) {    setExpandedState(path,true);  }}  }
class C{  protected void installComboBoxListeners(){  if ((propertyChangeListener=createPropertyChangeListener()) != null) {    comboBox.addPropertyChangeListener(propertyChangeListener);  }  if ((itemListener=createItemListener()) != null) {    comboBox.addItemListener(itemListener);  }  installComboBoxModelListeners(comboBox.getModel());}  }
class C{  public void paintSeparatorBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  protected void endNode(Node node) throws org.xml.sax.SAXException {switch (node.getNodeType()) {case Node.DOCUMENT_NODE:    break;case Node.ELEMENT_NODE:  String ns=m_dh.getNamespaceOfNode(node);if (null == ns) ns="";this.m_contentHandler.endElement(ns,m_dh.getLocalNameOfNode(node),node.getNodeName());if (m_Serializer == null) {Element elem_node=(Element)node;NamedNodeMap atts=elem_node.getAttributes();int nAttrs=atts.getLength();for (int i=(nAttrs - 1); 0 <= i; i--) {final Node attr=atts.item(i);final String attrName=attr.getNodeName();final int colon=attrName.indexOf(':');final String prefix;if (attrName.equals("xmlns") || attrName.startsWith("xmlns:")) {  if (colon < 0)   prefix=""; else   prefix=attrName.substring(colon + 1);  this.m_contentHandler.endPrefixMapping(prefix);} else if (colon > 0) {  prefix=attrName.substring(0,colon);  this.m_contentHandler.endPrefixMapping(prefix);}}{String uri=elem_node.getNamespaceURI();if (uri != null) {  String prefix=elem_node.getPrefix();  if (prefix == null)   prefix="";  this.m_contentHandler.endPrefixMapping(prefix);}}}break;case Node.CDATA_SECTION_NODE:break;case Node.ENTITY_REFERENCE_NODE:{EntityReference eref=(EntityReference)node;if (m_contentHandler instanceof LexicalHandler) {LexicalHandler lh=((LexicalHandler)this.m_contentHandler);lh.endEntity(eref.getNodeName());}}break;default :}}  }
class C{  private synchronized Style createResolvedStyle(String selector,String[] tags,String[] ids,String[] classes){  SearchBuffer sb=SearchBuffer.obtainSearchBuffer();  Vector<SelectorMapping> tempVector=sb.getVector();  Hashtable<SelectorMapping,SelectorMapping> tempHashtable=sb.getHashtable();  try {    SelectorMapping mapping=getRootSelectorMapping();    int numElements=tags.length;    String tagString=tags[0];    SelectorMapping childMapping=mapping.getChildSelectorMapping(tagString,false);    if (childMapping != null) {      getStyles(childMapping,tempVector,tags,ids,classes,1,numElements,tempHashtable);    }    if (classes[0] != null) {      String className=classes[0];      childMapping=mapping.getChildSelectorMapping(tagString + "." + className,false);      if (childMapping != null) {        getStyles(childMapping,tempVector,tags,ids,classes,1,numElements,tempHashtable);      }      childMapping=mapping.getChildSelectorMapping("." + className,false);      if (childMapping != null) {        getStyles(childMapping,tempVector,tags,ids,classes,1,numElements,tempHashtable);      }    }    if (ids[0] != null) {      String idName=ids[0];      childMapping=mapping.getChildSelectorMapping(tagString + "#" + idName,false);      if (childMapping != null) {        getStyles(childMapping,tempVector,tags,ids,classes,1,numElements,tempHashtable);      }      childMapping=mapping.getChildSelectorMapping("#" + idName,false);      if (childMapping != null) {        getStyles(childMapping,tempVector,tags,ids,classes,1,numElements,tempHashtable);      }    }    int numLinkedSS=(linkedStyleSheets != null) ? linkedStyleSheets.size() : 0;    int numStyles=tempVector.size();    AttributeSet[] attrs=new AttributeSet[numStyles + numLinkedSS];    for (int counter=0; counter < numStyles; counter++) {      attrs[counter]=tempVector.elementAt(counter).getStyle();    }    for (int counter=0; counter < numLinkedSS; counter++) {      AttributeSet attr=linkedStyleSheets.elementAt(counter).getRule(selector);      if (attr == null) {        attrs[counter + numStyles]=SimpleAttributeSet.EMPTY;      } else {        attrs[counter + numStyles]=attr;      }    }    ResolvedStyle retStyle=new ResolvedStyle(selector,attrs,numStyles);    resolvedStyles.put(selector,retStyle);    return retStyle;  }  finally {    SearchBuffer.releaseSearchBuffer(sb);  }}  }
class C{  LambdaFormBuffer renameParameter(int pos,Name newParam){  assert (newParam.isParam());  replaceName(pos,newParam);  return this;}  }
class C{  public static ViewItemGroup buildLoginUI(ModelApplication modelApp,Activity activity){  ViewItemGroup viewItems=new ViewItemGroup(activity);  TextView usernameText=new TextView(activity);  usernameText.setText(R.string.username);  viewItems.addView(usernameText);  ViewItemFactory viewItemFactory=ViewItemFactory.instance();  ViewItem usernameItem=viewItemFactory.create(LoginViewID.USERNAME,viewItemFactory.TEXT_DATATYPE_DB_ID,activity);  viewItems.addViewItem(usernameItem,new OmniText(modelApp.getUsername()));  TextView passwordText=new TextView(activity);  passwordText.setText(R.string.password);  viewItems.addView(passwordText);  ViewItem passwordItem=viewItemFactory.create(LoginViewID.PASSWORD,viewItemFactory.PASSWORD_INPUT_DATATYPE_DB_ID,activity);  viewItems.addViewItem(passwordItem,new OmniPasswordInput(modelApp.getPassword()));  return viewItems;}  }
class C{  Support_TestWebData(int length,int lastModified,String name,String type,boolean isDir,long expDate){  testLength=length;  testLastModified=lastModified;  testName=name;  testType=type;  testDir=isDir;  testExp=expDate;}  }
class C{  public Observable<List<Product>> retrieveAllProductsObservable(){  io.vertx.rx.java.ObservableFuture<List<Product>> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  retrieveAllProducts(resultHandler.toHandler());  return resultHandler;}  }
class C{  @Override public int hashCode(){  return PlainSocketFactory.class.hashCode();}  }
class C{  public ReplicatedMap(MapOwner owner,Channel channel,long timeout,String mapContextName,ClassLoader[] cls){  super(owner,channel,timeout,mapContextName,AbstractReplicatedMap.DEFAULT_INITIAL_CAPACITY,AbstractReplicatedMap.DEFAULT_LOAD_FACTOR,Channel.SEND_OPTIONS_DEFAULT,cls,true);}  }
class C{  public PdfA3Checker(PdfAConformanceLevel conformanceLevel){  super(conformanceLevel);}  }
class C{  @Override protected void finalize() throws Throwable {  close();}  }
class C{  private void addInclude(Node parent,Collection<String> files) throws JasperException {  if (files != null) {    Iterator<String> iter=files.iterator();    while (iter.hasNext()) {      String file=iter.next();      AttributesImpl attrs=new AttributesImpl();      attrs.addAttribute("","file","file","CDATA",file);      Node includeNode=new Node.IncludeDirective(attrs,reader.mark(),parent);      processIncludeDirective(file,includeNode);    }  }}  }
class C{  public Enumeration<Permission> elements(){synchronized (this) {    return Collections.enumeration(permsMap.values());  }}  }
class C{  public boolean isSort(){  return getFieldFlag(FF_SORT);}  }
class C{  public IntVector(int blocksize,int increaseSize){  m_blocksize=increaseSize;  m_mapSize=blocksize;  m_map=new int[blocksize];}  }
class C{  public boolean isFresh(){  return (m_next == 0);}  }
class C{  public XercesHTMLDocumentBuilderFactory(DocumentBuilderSetting[] settings) throws DOMTestIncompatibleException {  super(settings);  try {    ClassLoader classLoader=ClassLoader.getSystemClassLoader();    Class htmlBuilderClass=classLoader.loadClass("org.apache.html.dom.HTMLBuilder");    htmlBuilderConstructor=htmlBuilderClass.getConstructor(NO_CLASSES);    getHTMLDocumentMethod=htmlBuilderClass.getMethod("getHTMLDocument",NO_CLASSES);    Class htmlDOMImpl=classLoader.loadClass("org.apache.html.dom.HTMLDOMImplementationImpl");    Method method=htmlDOMImpl.getMethod("getHTMLDOMImplementation",NO_CLASSES);    domImpl=(DOMImplementation)method.invoke(null,NO_OBJECTS);    Class saxFactoryClass=classLoader.loadClass("org.apache.xerces.jaxp.SAXParserFactoryImpl");    factory=(SAXParserFactory)saxFactoryClass.newInstance();  } catch (  InvocationTargetException ex) {    throw new DOMTestIncompatibleException(ex.getTargetException(),null);  }catch (  Exception ex) {    throw new DOMTestIncompatibleException(ex,null);  }  if (settings != null) {    for (int i=0; i < settings.length; i++) {    }  }  try {    factory.newSAXParser();  } catch (  ParserConfigurationException ex) {    throw new DOMTestIncompatibleException(ex,null);  }catch (  SAXException ex) {    throw new DOMTestIncompatibleException(ex,null);  }}  }
class C{  public static Guid[] toGuidArray(Set set){  Object[] obj=set.toArray();  Guid[] ss=new Guid[obj.length];  for (int i=0; i < obj.length; i++) {    ss[i]=new Guid((String)obj[i]);  }  return ss;}  }
class C{  public void addAttributes(AttributeSet attributes){  Enumeration names=attributes.getAttributeNames();  while (names.hasMoreElements()) {    Object name=names.nextElement();    addAttribute(name,attributes.getAttribute(name));  }}  }
class C{  public void menuSelectionChanged(boolean isIncluded){}  }
class C{  public GroundStoreTest(String testName){  super(testName);}  }
class C{  public void eventError(String errorStr){  debug.error("ACIEventListener.eventError(): " + errorStr);}  }
class C{  public int viewToModel(float x,float y,Shape a,Position.Bias[] bias){  if (!isAllocationValid()) {    Rectangle alloc=a.getBounds();    setSize(alloc.width,alloc.height);  }  return super.viewToModel(x,y,a,bias);}  }
class C{  @DataProvider(name="recurringTaskSchedules") public Object[][] createRecurringTaskSchedules(){  return new Object[][]{{"* * * *",false},{"* * * * * *",false},{"*:*:*:*:*",false},{"60 * * * *",false},{"-1 * * * *",false},{"1-60 * * * *",false},{"1,60 * * * *",false},{"* 24 * * *",false},{"* -1 * * *",false},{"* 1-24 * * *",false},{"* 1,24 * * *",false},{"* * 32 * *",false},{"* * 0 * *",false},{"* * 1-32 * *",false},{"* * 1,32 * *",false},{"* * * 13 *",false},{"* * * 0 *",false},{"* * * 1-13 *",false},{"* * * 1,13 *",false},{"* * * * 7",false},{"* * * * -1",false},{"* * * * 1-7",false},{"* * * * 1,7",false},{"* * 31 2 *",false},{"*/foo * * * *",false},{"1-3,10/4,13 * * * *",false},{"1-5/,10,13 * * * *",false},{"1-5/foo,10,13 * * * *",false},{"* * 29 2 *",true},{"* * * * *",true},{"59 * * * *",true},{"0 * * * *",true},{"0-59 * * * *",true},{"0,59 * * * *",true},{"* 23 * * *",true},{"* 0 * * *",true},{"* 0-23 * * *",true},{"* 0,23 * * *",true},{"* * 31 * *",true},{"* * 1 * *",true},{"* * 1-31 * *",true},{"* * 1,31 * *",true},{"* * * 12 *",true},{"* * * 1 *",true},{"* * * 1-12 *",true},{"* * * 1,12 *",true},{"* * * * 6",true},{"* * * * 0",true},{"* * * * 0-6",true},{"* * * * 0,6",true},{"*/2 * * * *",true},{"1-3,10-13 * * * *",true},{"1-3,10,13 * * * *",true},{"1-5/2,10,13 * * * *",true},{"1-5/2,11-15/2 * * * *",true}};}  }
class C{  public CharacterCodingException(){}  }
class C{  public static String toString(InputStream input,String encoding) throws IOException {  return toString(input,Charsets.toCharset(encoding));}  }
class C{  @Inject public ConfigChangeListener(@Named("RadiusServer") ServiceConfigManager serviceConfigurationManager){  this.svcConfigMgr=serviceConfigurationManager;  configChangedQueue.add("Loading RADIUS config.");}  }
class C{  public Identity(String name,IdentityScope scope) throws KeyManagementException {  this(name);  if (scope != null) {    scope.addIdentity(this);  }  this.scope=scope;}  }
class C{  public static void hideToast(){  if (null != toast) {    toast.cancel();  }}  }
class C{  public static void main(final String[] args){  final int retCode=new LDIFModify().run(args);  System.exit(filterExitCode(retCode));}  }
class C{  public ClientFaultException(final SAML2IdentityProviderAdapter idpAdapter,final String messageCode,final String detail){  super(idpAdapter,messageCode,detail);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element newNode;  String newValue;  doc=(Document)load("hc_staff",true);  newNode=doc.createElement("acronym");  newValue=newNode.getNodeValue();  assertNull("initiallyNull",newValue);  newNode.setNodeValue("This should have no effect");  newValue=newNode.getNodeValue();  assertNull("nullAfterAttemptedChange",newValue);}  }
class C{  private Object writeReplace(){  return new Ser(Ser.ZRULES,this);}  }
class C{  private SchemaManager(Principal principal) throws UMSException {  m_datalayer=DataLayer.getInstance();  m_principal=principal;}  }
class C{  public static int calculateInSampleSize(BitmapFactory.Options options,int reqWidth,int reqHeight){  final int height=options.outHeight;  final int width=options.outWidth;  int inSampleSize=1;  if (height > reqHeight || width > reqWidth) {    final int halfHeight=height / 2;    final int halfWidth=width / 2;    while ((halfHeight / inSampleSize) >= reqHeight && (halfWidth / inSampleSize) >= reqWidth) {      inSampleSize*=2;    }  }  return inSampleSize;}  }
class C{  public double popDouble(){  BaseTypeWrapper wrapper=(BaseTypeWrapper)this.pop();  Double value=(Double)wrapper.getValue();  return value.doubleValue();}  }
class C{  public List<Value> castArgsForMethodInvoke(List<Value> args,List<SParameter> parameters,LineCol lineCol) throws SyntaxException {  List<Value> result=new ArrayList<>();  for (int i=0; i < parameters.size(); ++i) {    Value v=args.get(i);    SParameter param=parameters.get(i);    result.add(cast(param.type(),v,lineCol));  }  return result;}  }
class C{  public static void startServer() throws Exception {  LDAPServer.getInstance().start();}  }
class C{  @Override public synchronized void putAll(Map<?,?> t){  check("putProviderProperty." + name);  if (debug != null) {    debug.println("Put all " + name + " provider properties");  }  implPutAll(t);}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  private Collection findAttributesNotRead(String[] attrNames){  ArrayList attributesNotInCache=new ArrayList();  if (m_attrSet == null) {    m_attrSet=new AttrSet();  }  if (m_nullAttributes == null) {    m_nullAttributes=new ArrayList();  }  int length=attrNames.length;  for (int i=0; i < length; i++) {    if ((m_attrSet.getAttribute(attrNames[i]) == null) && !m_nullAttributes.contains(attrNames[i])) {      attributesNotInCache.add(attrNames[i]);    }  }  return attributesNotInCache;}  }
class C{  public static Object convertByteString(ByteString bs){  try {    return new String(bs.toCharArray());  } catch (  Exception e) {    return bs.toByteArray();  }}  }
class C{  public boolean hasMember(Guid guid) throws UMSException {  if (getPrincipal() == null) {    throw new IllegalArgumentException(i18n.getString(IUMSConstants.NULL_PRINCIPAL));  }  PersistentObject object=UMSObject.getObject(getPrincipal(),guid);  Attr attr=object.getAttribute(MEMBER_ATTR_NAME);  if (attr == null) {    if (debug.messageEnabled()) {      debug.message("AssignableDynamicGroup.hasMember: no " + "attribute " + MEMBER_ATTR_NAME + " in "+ guid.getDn());    }    return false;  }  String normalized=getGuid().getDn();  String[] members=attr.getStringValues();  for (int i=0; i < members.length; i++) {    String target=members[i];    if (debug.messageEnabled()) {      debug.message("AssignableDynamicGroup.hasMember: comparing " + normalized + " to "+ target);    }    if (Guid.equals(normalized,target)) {      return true;    }  }  return false;}  }
class C{  void updateCache(String org) throws ConfigManagerException {  Set eNames=new HashSet();  Set sNames=new HashSet();  Set cNames=new HashSet();  if (org.equals(_rootDN)) {    Set oSet=new HashSet();    oSet.add(OBJECTRESOLVERPATH);    loadCache(org,oSet,OBJECTRESOLVER);  }  try {    eNames=getServiceComponents(org,ENTITYPATH,true);  } catch (  SMSException smse) {    if (_debug.warningEnabled())     _debug.warning("ConfigManager->updateCache: SMSException: " + smse.toString());  }catch (  SSOException ssoe) {    if (_debug.warningEnabled())     _debug.warning("ConfigManager->updateCache: SSOException: " + ssoe.toString());  }  try {    sNames=getServiceComponents(org,SEARCHPATH,true);  } catch (  SMSException smse) {    if (_debug.warningEnabled())     _debug.warning("ConfigManager->updateCache: SMSException: " + smse.toString());  }catch (  SSOException ssoe) {    if (_debug.warningEnabled())     _debug.warning("ConfigManager->updateCache: SSOException: " + ssoe.toString());  }  try {    cNames=getServiceComponents(org,CREATIONPATH,true);  } catch (  SMSException smse) {    if (_debug.warningEnabled())     _debug.warning("ConfigManager->updateCache: SMSException: " + smse.toString());  }catch (  SSOException ssoe) {    if (_debug.warningEnabled())     _debug.warning("ConfigManager->updateCache: SSOException: " + ssoe.toString());  }  if (cNames.isEmpty() && eNames.isEmpty() && sNames.isEmpty()) {    _checkListCache.put(org.toLowerCase(),"dummy");    return;  }  if (!sNames.isEmpty()) {    Iterator it=sNames.iterator();    Set set=new HashSet();    while (it.hasNext()) {      String s=new String();      String t;      t=(String)it.next();      int count=t.lastIndexOf("/");      s=t.substring(count + 1);      set.add(s);    }    _cch.put(org + "/" + SEARCH+ "Names",set);    if (_debug.messageEnabled())     _debug.message("ConfigManager->updateCache: " + org + "/"+ SEARCH+ "Names :"+ set);  }  if (!cNames.isEmpty()) {    Iterator it=cNames.iterator();    Set set=new HashSet();    while (it.hasNext()) {      String s=new String();      String t;      t=(String)it.next();      int count=t.lastIndexOf("/");      s=t.substring(count + 1);      set.add(s);    }    _cch.put(org + "/" + CREATION+ "Names",set);    if (_debug.messageEnabled())     _debug.message("ConfigManager->updateCache: " + org + "/"+ CREATION+ "Names :"+ set);  }  loadCache(org,eNames,ENTITY);  loadCache(org,cNames,CREATION);  loadCache(org,sNames,SEARCH);  _checkListCache.put(org.toLowerCase(),"dummy");}  }
class C{  public static Foo[] findByUuid_PrevAndNext(long fooId,java.lang.String uuid,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_PrevAndNext(fooId,uuid,orderByComparator);}  }
class C{  public void textValueChanged(TextEvent textEvent){  Integer cpos=Integer.valueOf(TextComponent.this.getCaretPosition());  firePropertyChange(ACCESSIBLE_TEXT_PROPERTY,null,cpos);}  }
class C{  private final Object arenaExchange(Object item,boolean timed,long ns){  Node[] a=arena;  Node p=participant.get();  for (int i=p.index; ; ) {    int b, m, c;    long j;    Node q=(Node)U.getObjectVolatile(a,j=(i << ASHIFT) + ABASE);    if (q != null && U.compareAndSwapObject(a,j,q,null)) {      Object v=q.item;      q.match=item;      Thread w=q.parked;      if (w != null)       U.unpark(w);      return v;    } else     if (i <= (m=(b=bound) & MMASK) && q == null) {      p.item=item;      if (U.compareAndSwapObject(a,j,null,p)) {        long end=(timed && m == 0) ? System.nanoTime() + ns : 0L;        Thread t=Thread.currentThread();        for (int h=p.hash, spins=SPINS; ; ) {          Object v=p.match;          if (v != null) {            U.putOrderedObject(p,MATCH,null);            p.item=null;            p.hash=h;            return v;          } else           if (spins > 0) {            h^=h << 1;            h^=h >>> 3;            h^=h << 10;            if (h == 0)             h=SPINS | (int)t.getId(); else             if (h < 0 && (--spins & ((SPINS >>> 1) - 1)) == 0)             Thread.yield();          } else           if (U.getObjectVolatile(a,j) != p)           spins=SPINS; else           if (!t.isInterrupted() && m == 0 && (!timed || (ns=end - System.nanoTime()) > 0L)) {            U.putObject(t,BLOCKER,this);            p.parked=t;            if (U.getObjectVolatile(a,j) == p)             U.park(false,ns);            p.parked=null;            U.putObject(t,BLOCKER,null);          } else           if (U.getObjectVolatile(a,j) == p && U.compareAndSwapObject(a,j,p,null)) {            if (m != 0)             U.compareAndSwapInt(this,BOUND,b,b + SEQ - 1);            p.item=null;            p.hash=h;            i=p.index>>>=1;            if (Thread.interrupted())             return null;            if (timed && m == 0 && ns <= 0L)             return TIMED_OUT;            break;          }        }      } else       p.item=null;    } else {      if (p.bound != b) {        p.bound=b;        p.collides=0;        i=(i != m || m == 0) ? m : m - 1;      } else       if ((c=p.collides) < m || m == FULL || !U.compareAndSwapInt(this,BOUND,b,b + SEQ + 1)) {        p.collides=c + 1;        i=(i == 0) ? m : i - 1;      } else       i=m + 1;      p.index=i;    }  }}  }
class C{  private String fieldAttributeComment(Field field){  String comment="@!attribute [rw] " + field.getSimpleName() + "\n"+ "  @return ["+ fieldTypeCardinalityComment(field)+ "]";  String fieldComment=DocumentationUtil.getScopedDescription(field);  if (!Strings.isNullOrEmpty(fieldComment)) {    fieldComment=RDocCommentFixer.rdocify(fieldComment);    comment+="\n    " + fieldComment.replaceAll("(\\r?\\n)","\n    ");  }  return comment + "\n";}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node lchildNode;  String childName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  lchildNode=employeeNode.getLastChild();  childName=lchildNode.getNodeName();  if (equals("#text",childName)) {    lchildNode=lchildNode.getPreviousSibling();    childName=lchildNode.getNodeName();  }  assertEquals("nodeName","address",childName);}  }
class C{  private void log(String message){  if (context != null)   context.log("SessionListener: " + message); else   System.out.println("SessionListener: " + message);}  }
class C{  public void mouseDragged(MouseEvent event){}  }
class C{  protected void loadChildren(ViewFactory f){  Element e=getElement();  int n=e.getElementCount();  if (n > 0) {    View[] added=new View[n];    for (int i=0; i < n; i++) {      added[i]=new WrappedLine(e.getElement(i));    }    replace(0,0,added);  }}  }
class C{  public void contentsChanged(ListDataEvent e){  firePropertyChange(AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,Boolean.valueOf(false),Boolean.valueOf(true));}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy){  startScroll(startX,startY,dx,dy,DEFAULT_DURATION);}  }
class C{  public RuntimePermission(String name,String actions){  super(name,actions);}  }
class C{  public Builder type(final ObjectClassType type){  this.type=type;  return this;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment documentFragmentNode;  int nodeType;  doc=(Document)load("hc_staff",true);  documentFragmentNode=doc.createDocumentFragment();  nodeType=(int)documentFragmentNode.getNodeType();  assertEquals("nodeDocumentFragmentNodeTypeAssert1",11,nodeType);}  }
class C{  public DOMValidateContext(KeySelector ks,Node node){  if (ks == null) {    throw new NullPointerException("key selector is null");  }  init(node,ks);}  }
class C{  public SetupLauncher(String[] args){  super(args,LOG_FILE_PREFIX);  if (System.getProperty(PROPERTY_SCRIPT_NAME) == null) {    System.setProperty(PROPERTY_SCRIPT_NAME,Installation.getSetupFileName());  }  initializeParser();}  }
class C{  public void test_read$BII() throws IOException {  byte[] buf=new byte[10];  oos.writeBytes("HelloWorld");  oos.close();  ois=new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));  ois.read(buf,0,10);  ois.close();  assertEquals("Read incorrect bytes","HelloWorld",new String(buf,0,10,"UTF-8"));}  }
class C{  private MethodType(Class<?> rtype,Class<?>[] ptypes,boolean trusted){  checkRtype(rtype);  checkPtypes(ptypes);  this.rtype=rtype;  this.ptypes=trusted ? ptypes : Arrays.copyOf(ptypes,ptypes.length);}  }
class C{  public String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  @Override public int hashCode(){  return oid.hashCode();}  }
class C{  public SQLFeatureNotSupportedException(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  public static String readPackageName(ByteBuffer buffer,int offset){  Charset utf16=Charset.forName("UTF-16LE");  String str=new String(buffer.array(),offset,PACKAGE_NAME_SIZE,utf16);  buffer.position(offset + PACKAGE_NAME_SIZE);  return str;}  }
class C{  public DirectoryException(ResultCode resultCode,LocalizableMessage errorMessage,DN matchedDN,Throwable cause){  super(errorMessage,cause);  this.resultCode=resultCode;  this.matchedDN=matchedDN;  this.referralURLs=null;}  }
class C{  private boolean extractAndWriteToken(StringBuffer resultData,StringBuffer tokenQueue){  boolean written=false;  if (tokenQueue.length() > 0) {    String key=tokenQueue.substring(1);    String replaceValue=(String)getTokens().get(key);    if (replaceValue == null || replaceValue.trim().length() == 0) {      replaceValue=tokenQueue.append(TOKEN_MARKER).toString();    }    resultData.append(replaceValue);    tokenQueue.delete(0,tokenQueue.length());    written=true;  }  return written;}  }
class C{  synchronized void receivedLast(){  closedByWriter=true;  notifyAll();}  }
class C{  public boolean isCachedMemory(){  return true;}  }
class C{  public HttpCallback(String authRHeader,String negoName,String negoValue,int errorCode){  this.tokenHeader=authRHeader;  this.negoHeader=negoName;  this.negoValue=negoValue;  this.errorCode=errorCode;}  }
class C{  public void test_parseObjectLjava_lang_StringLjavajava_text_ParsePosition(){  MessageFormat mf=new MessageFormat("{0,number,#.##}, {0,number,#.#}");  try {    Object[] objs={new Double(3.1415)};    String result=mf.format(objs);    Object[] res=null;    ParsePosition pp=new ParsePosition(0);    int parseIndex=pp.getIndex();    res=(Object[])mf.parseObject(result,pp);    assertTrue("Parse operation return null",res != null);    assertTrue("parse operation return array with incorrect length",1 == res.length);    assertTrue("ParseIndex is incorrect",pp.getIndex() != parseIndex);    assertTrue("Result object is incorrect",new Double(3.1).equals(res[0]));    pp.setIndex(0);    char[] cur=result.toCharArray();    cur[cur.length / 2]='Z';    String partialCorrect=new String(cur);    res=(Object[])mf.parseObject(partialCorrect,pp);    assertTrue("Parse operation return null",res == null);    assertTrue("ParseIndex is incorrect",pp.getIndex() == 0);    assertTrue("ParseErrorIndex is incorrect",pp.getErrorIndex() == cur.length / 2);    try {      mf.parseObject(result,null);      fail("Expected NullPointerException was not thrown");    } catch (    NullPointerException e) {    }  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  public void visitVarInsn(int opcode,int var){  if (mv != null) {    mv.visitVarInsn(opcode,var);  }}  }
class C{  @Override public void execute() throws BuildException {  super.execute();  if (type != null) {    try {      execute("/resources?type=" + URLEncoder.encode(type,getCharset()));    } catch (    UnsupportedEncodingException e) {      throw new BuildException("Invalid 'charset' attribute: " + getCharset());    }  } else {    execute("/resources");  }}  }
class C{  public boolean deleteAll(){  return database.delete(DATABASE_TABLE,null,null) > 0;}  }
class C{  public SAXNotSupportedException(String message){  super(message);}  }
class C{  public static PlainSASLBindRequest newPlainSASLBindRequest(final String authenticationID,final char[] password){  return new PlainSASLBindRequestImpl(authenticationID,getBytes(password));}  }
class C{  public Vector(double x,double y,double z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public final void testReadbyteArrayintint02() throws IOException {  assertEquals(0,MY_MESSAGE_LEN % CHUNK_SIZE);  for (int ii=0; ii < algorithmName.length; ii++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      InputStream is=new ByteArrayInputStream(myMessage);      DigestInputStream dis=new DigestInputStream(is,md);      byte[] bArray=new byte[MY_MESSAGE_LEN];      for (int i=0; i < MY_MESSAGE_LEN / CHUNK_SIZE; i++) {        assertTrue("retval",dis.read(bArray,i * CHUNK_SIZE,CHUNK_SIZE) == CHUNK_SIZE);      }      assertTrue("bArray",Arrays.equals(myMessage,bArray));      assertTrue("update",Arrays.equals(dis.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[ii])));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  @Override public boolean onCreatePanelMenu(final int featureId,final Menu menu){  return delegate.onCreatePanelMenu(featureId,menu);}  }
class C{  public RequirementsBuilder addProperty(String name,RequirementsBuilder builder){  Reject.ifNull(name,builder);  properties.put(name,prepareChildJsonValue(builder));  return this;}  }
class C{  public static <C extends ConfigurationClient,S extends Configuration>MenuResult<String> createManagedObject(ConsoleApplication app,ManagementContext context,ManagedObject<?> parent,InstantiableRelationDefinition<C,S> rd) throws ClientException {  return createManagedObject(app,context,parent,rd,null);}  }
class C{  public static boolean isPrimaryThread(){  return server.isPrimaryThread();}  }
class C{  public DigestOutputStream(OutputStream stream,MessageDigest digest){  super(stream);  setMessageDigest(digest);}  }
class C{  @SuppressWarnings("deprecation") public IdentityStub(String name){  super(name);}  }
class C{  public boolean isCurrent(EGLSurface eglSurface){  return mEGLContext.equals(EGL14.eglGetCurrentContext()) && eglSurface.equals(EGL14.eglGetCurrentSurface(EGL14.EGL_DRAW));}  }
class C{  public Object clone(){  ResponseProviders answer=null;  try {    answer=(ResponseProviders)super.clone();  } catch (  CloneNotSupportedException se) {    answer=new ResponseProviders();  }  answer.name=name;  answer.description=description;  answer.providers=new HashMap();  Iterator items=providers.keySet().iterator();  while (items.hasNext()) {    Object item=items.next();    ResponseProvider responseProvider=(ResponseProvider)providers.get(item);    answer.providers.put(item,responseProvider.clone());  }  return (answer);}  }
class C{  MigrationReport dryRunPolicyUpgrade(Privilege policy) throws EntitlementException, UpgradeException {  MigrationReport migrationReport=new MigrationReport(policy.getName());  migrateSubjectConditions(policy,migrationReport);  migrateEnvironmentConditions(policy,migrationReport);  return migrationReport;}  }
class C{  @Override public Foo findByUuid_Last(String uuid,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByUuid_Last(uuid,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(4);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("uuid=");  msg.append(uuid);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  protected Expression plus(int opPos) throws TransformerException {  return compileOperation(new Plus(),opPos);}  }
class C{  public boolean removeParameter(String name){  return authParams.delete(name);}  }
class C{  public void rejectedExecution(Runnable r,ThreadPoolExecutor e){}  }
class C{  public static boolean isTeslaCapability(Capability<?> capability){  return isHolderCapability(capability) || isConsumerCapability(capability) || isProducerCapability(capability);}  }
class C{  public final void testIsStatePreserved02(){  int[] a=new int[]{981,2,1};  int[] aCopy=a.clone();  ECFieldF2m f=new ECFieldF2m(2000,aCopy);  f.getMidTermsOfReductionPolynomial()[0]=1532;  assertTrue(Arrays.equals(a,f.getMidTermsOfReductionPolynomial()));}  }
class C{  private String reverseString(String str){  int strlen=str.length();  if (strlen < 2) {    return str;  }  char[] chars=new char[strlen];  for (int i=0; i < strlen; i++) {    chars[i]=str.charAt(strlen - i - 1);  }  return (new String(chars));}  }
class C{  public ServletFileUpload(){  super();}  }
class C{  public final boolean isWild(){  return m_wild;}  }
class C{  private int convertLocationToRow(int x,int y0,boolean closest){  int size=list.getModel().getSize();  if (size <= 0) {    return -1;  }  Insets insets=list.getInsets();  if (cellHeights == null) {    int row=(cellHeight == 0) ? 0 : ((y0 - insets.top) / cellHeight);    if (closest) {      if (row < 0) {        row=0;      } else       if (row >= size) {        row=size - 1;      }    }    return row;  } else   if (size > cellHeights.length) {    return -1;  } else {    int y=insets.top;    int row=0;    if (closest && y0 < y) {      return 0;    }    int i;    for (i=0; i < size; i++) {      if ((y0 >= y) && (y0 < y + cellHeights[i])) {        return row;      }      y+=cellHeights[i];      row+=1;    }    return i - 1;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node child;  String childName;  java.util.List result=new java.util.ArrayList();  java.util.List expectedResult=new java.util.ArrayList();  expectedResult.add("address");  expectedResult.add("address");  expectedResult.add("address");  expectedResult.add("emp:address");  expectedResult.add("address");  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagNameNS("*","address");  for (int indexN10059=0; indexN10059 < elementList.getLength(); indexN10059++) {    child=(Node)elementList.item(indexN10059);    childName=child.getNodeName();    result.add(childName);  }  assertEquals("nodeNames",expectedResult,result);}  }
class C{  public void insert_long(int value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_long",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    $self.insert_long(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private T[] ensureCapacity(int minCapacity){  if (tmpLen < minCapacity) {    int newSize=minCapacity;    newSize|=newSize >> 1;    newSize|=newSize >> 2;    newSize|=newSize >> 4;    newSize|=newSize >> 8;    newSize|=newSize >> 16;    newSize++;    if (newSize < 0)     newSize=minCapacity; else     newSize=Math.min(newSize,a.length >>> 1);    @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) T[] newArray=(T[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),newSize);    tmp=newArray;    tmpLen=newSize;    tmpBase=0;  }  return tmp;}  }
class C{  public void addCertificatesAndCRLs(CertStore certStore) throws CertStoreException, CMSException {  certs.addAll(CMSUtils.getCertificatesFromStore(certStore));  crls.addAll(CMSUtils.getCRLsFromStore(certStore));}  }
class C{  public void testCase3(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3};  int aSign=1;  int bSign=-1;  byte rBytes[]={11,22,33,44,55,66,77,11,22,33};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(1,result.signum());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrlastchild.class,args);}  }
class C{  public static String toString(InputStream input,Charset encoding) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw,encoding);  return sw.toString();}  }
class C{  public List<String> tablesForLogging(){  return Collections.unmodifiableList(values.tablesForLogging);}  }
class C{  public boolean isNew(){  return (bytesWritten == 0) && (charsWritten == 0);}  }
class C{  @Override public synchronized Object clone() throws RuntimeOperationsException {  if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {    MODELMBEAN_LOGGER.logp(Level.FINEST,DescriptorSupport.class.getName(),"clone()","Entry");  }  return (new DescriptorSupport(this));}  }
class C{  public boolean isCompiledTemplate(){  return false;}  }
class C{  private static final String makeJavaIdentifier(String identifier,boolean periodToUnderscore){  StringBuilder modifiedIdentifier=new StringBuilder(identifier.length());  if (!Character.isJavaIdentifierStart(identifier.charAt(0))) {    modifiedIdentifier.append('_');  }  for (int i=0; i < identifier.length(); i++) {    char ch=identifier.charAt(i);    if (Character.isJavaIdentifierPart(ch) && (ch != '_' || !periodToUnderscore)) {      modifiedIdentifier.append(ch);    } else     if (ch == '.' && periodToUnderscore) {      modifiedIdentifier.append('_');    } else {      modifiedIdentifier.append(mangleChar(ch));    }  }  if (isJavaKeyword(modifiedIdentifier.toString())) {    modifiedIdentifier.append('_');  }  return modifiedIdentifier.toString();}  }
class C{  public PdfObject fillDictionary(){  PdfArray gr=new PdfArray();  for (  PdfLayer layer : layers) {    if (layer.getTitle() == null)     gr.add(layer.getIndirectReference());  }  getPdfObject().put(PdfName.OCGs,gr);  PdfArray rbGroups=null;  PdfDictionary d=getPdfObject().getAsDictionary(PdfName.D);  if (d != null)   rbGroups=d.getAsArray(PdfName.RBGroups);  d=new PdfDictionary();  if (rbGroups != null)   d.put(PdfName.RBGroups,rbGroups);  getPdfObject().put(PdfName.D,d);  List<PdfLayer> docOrder=new ArrayList<>(layers);  for (int i=0; i < docOrder.size(); i++) {    PdfLayer layer=docOrder.get(i);    if (layer.getParent() != null) {      docOrder.remove(layer);      i--;    }  }  PdfArray order=new PdfArray();  for (  Object element : docOrder) {    PdfLayer layer=(PdfLayer)element;    getOCGOrder(order,layer);  }  d.put(PdfName.Order,order);  PdfArray off=new PdfArray();  for (  Object element : layers) {    PdfLayer layer=(PdfLayer)element;    if (layer.getTitle() == null && !layer.isOn())     off.add(layer.getIndirectReference());  }  if (off.size() > 0)   d.put(PdfName.OFF,off); else   d.remove(PdfName.OFF);  PdfArray locked=new PdfArray();  for (  PdfLayer layer : layers) {    if (layer.getTitle() == null && layer.isLocked())     locked.add(layer.getIndirectReference());  }  if (locked.size() > 0)   d.put(PdfName.Locked,locked); else   d.remove(PdfName.Locked);  d.remove(PdfName.AS);  addASEvent(PdfName.View,PdfName.Zoom);  addASEvent(PdfName.View,PdfName.View);  addASEvent(PdfName.Print,PdfName.Print);  addASEvent(PdfName.Export,PdfName.Export);  return getPdfObject();}  }
class C{  public ID3v23Frame(){}  }
class C{  public String retryBackoffMethodName(String key){  return privateMethodName(Name.from("get").join(key).join("retry").join("backoff"));}  }
class C{  public UnsupportedResponseTypeException(final String message){  this(message,OAuth2Constants.UrlLocation.QUERY);}  }
class C{  public static Foo fetchByField2_First(boolean field2,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByField2_First(field2,orderByComparator);}  }
class C{  protected String generateNonce(Request request){  long currentTime=System.currentTimeMillis();synchronized (lastTimestampLock) {    if (currentTime > lastTimestamp) {      lastTimestamp=currentTime;    } else {      currentTime=++lastTimestamp;    }  }  String ipTimeKey=request.getRemoteAddr() + ":" + currentTime+ ":"+ getKey();  byte[] buffer=ConcurrentMessageDigest.digestMD5(ipTimeKey.getBytes(StandardCharsets.ISO_8859_1));  String nonce=currentTime + ":" + MD5Encoder.encode(buffer);  NonceInfo info=new NonceInfo(currentTime,getNonceCountWindowSize());synchronized (nonces) {    nonces.put(nonce,info);  }  return nonce;}  }
class C{  public static Map processResponse(Response samlResponse,String target) throws SAMLException {  List assertions=null;  SAMLServiceManager.SOAPEntry partnerdest=null;  Subject assertionSubject=null;  if (samlResponse.isSigned()) {    boolean isSignedandValid=verifySignature(samlResponse);    if (!isSignedandValid) {      throw new SAMLException(bundle.getString("invalidResponse"));    }  }  Map ssMap=verifyAssertionAndGetSSMap(samlResponse);  if (debug.messageEnabled()) {    debug.message("processResponse: ssMap = " + ssMap);  }  if (ssMap == null) {    throw new SAMLException(bundle.getString("invalidAssertion"));  }  assertionSubject=(com.sun.identity.saml.assertion.Subject)ssMap.get(SAMLConstants.SUBJECT);  if (assertionSubject == null) {    throw new SAMLException(bundle.getString("nullSubject"));  }  partnerdest=(SAMLServiceManager.SOAPEntry)ssMap.get(SAMLConstants.SOURCE_SITE_SOAP_ENTRY);  if (partnerdest == null) {    throw new SAMLException(bundle.getString("failedAccountMapping"));  }  assertions=(List)ssMap.get(SAMLConstants.POST_ASSERTION);  Map sessMap=null;  try {    sessMap=getAttributeMap(partnerdest,assertions,assertionSubject,target);  } catch (  Exception se) {    debug.error("SAMLUtils.processResponse :",se);    throw new SAMLException(bundle.getString("failProcessResponse"));  }  return sessMap;}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodesetnodevaluenomodificationallowederrEE.class,args);}  }
class C{  @Override public void close() throws IOException {  while (in != null) {    nextStream();  }  e=null;}  }
class C{  public static long copyFile(File input,OutputStream output) throws IOException {  final FileInputStream fis=new FileInputStream(input);  try {    return IOUtils.copyLarge(fis,output);  }  finally {    fis.close();  }}  }
class C{  public TransformerFactoryConfigurationError(Exception e,String msg){  super(msg);  this.exception=e;}  }
class C{  public void layoutContainer(Container target){  checkContainer(target);  int nChildren=target.getComponentCount();  int[] xOffsets=new int[nChildren];  int[] xSpans=new int[nChildren];  int[] yOffsets=new int[nChildren];  int[] ySpans=new int[nChildren];  Dimension alloc=target.getSize();  Insets in=target.getInsets();  alloc.width-=in.left + in.right;  alloc.height-=in.top + in.bottom;  ComponentOrientation o=target.getComponentOrientation();  int absoluteAxis=resolveAxis(axis,o);  boolean ltr=(absoluteAxis != axis) ? o.isLeftToRight() : true;synchronized (this) {    checkRequests();    if (absoluteAxis == X_AXIS) {      SizeRequirements.calculateTiledPositions(alloc.width,xTotal,xChildren,xOffsets,xSpans,ltr);      SizeRequirements.calculateAlignedPositions(alloc.height,yTotal,yChildren,yOffsets,ySpans);    } else {      SizeRequirements.calculateAlignedPositions(alloc.width,xTotal,xChildren,xOffsets,xSpans,ltr);      SizeRequirements.calculateTiledPositions(alloc.height,yTotal,yChildren,yOffsets,ySpans);    }  }  for (int i=0; i < nChildren; i++) {    Component c=target.getComponent(i);    c.setBounds((int)Math.min((long)in.left + (long)xOffsets[i],Integer.MAX_VALUE),(int)Math.min((long)in.top + (long)yOffsets[i],Integer.MAX_VALUE),xSpans[i],ySpans[i]);  }  if (dbg != null) {    for (int i=0; i < nChildren; i++) {      Component c=target.getComponent(i);      dbg.println(c.toString());      dbg.println("X: " + xChildren[i]);      dbg.println("Y: " + yChildren[i]);    }  }}  }
class C{  public void reset(){  count=0;}  }
class C{  public void destroyModuleState(){  userPrincipal=null;  userTokenId=null;}  }
class C{  @Override public void invalidate(){  if (!isValidInternal())   throw new IllegalStateException(sm.getString("standardSession.invalidate.ise"));  expire();}  }
class C{  public byte[] writeByteArray(){  logger.finer("Writing PairTextEncodedStringNullTerminated");  int localSize=0;  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  try {    for (    Pair pair : ((ValuePairs)value).mapping) {{        TextEncodedStringNullTerminated next=new TextEncodedStringNullTerminated(identifier,frameBody,pair.getKey());        buffer.write(next.writeByteArray());        localSize+=next.getSize();      }{        TextEncodedStringNullTerminated next=new TextEncodedStringNullTerminated(identifier,frameBody,pair.getValue());        buffer.write(next.writeByteArray());        localSize+=next.getSize();      }    }  } catch (  IOException ioe) {    logger.log(Level.SEVERE,"IOException in MultipleTextEncodedStringNullTerminated when writing byte array",ioe);    throw new RuntimeException(ioe);  }  size=localSize;  logger.finer("Written PairTextEncodedStringNullTerminated");  return buffer.toByteArray();}  }
class C{  public boolean isNowWithinInterval(String intervalString) throws IllegalArgumentException {  Interval interval=Interval.parse(intervalString);  return interval.contains(DateTime.now());}  }
class C{  private void sendResponse(final Response response,String method){  if (response.node == null) {    try {      mySocket.close();    } catch (    Throwable t) {    }    return;  }  try {    if (response.status == null)     throw new Error("sendResponse(): Status can't be null.");    final OutputStream o=mySocket.getOutputStream();    PrintWriter pw=new PrintWriter(o);    pw.print("HTTP/1.0 " + response.status + " \r\n");    String mime=null;    String fileName=response.node.getName();    int extensionIndex=fileName.lastIndexOf('.');    if (extensionIndex >= 0)     mime=MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileName.substring(extensionIndex + 1).toLowerCase(Locale.ENGLISH));    if (mime == null)     mime="video/x-msvideo";    pw.print("Content-Type: " + mime + "\r\n");    if (response.header == null || response.header.getProperty("Date") == null)     pw.print("Date: " + gmtFrmt.format(new Date()) + "\r\n");    if (response.header != null) {      Enumeration<Object> e=response.header.keys();      while (e.hasMoreElements()) {        String key=e.nextElement().toString();        String value=response.header.getProperty(key);        pw.print(key + ": " + value+ "\r\n");        System.out.println("Response-> " + key + ": "+ value);      }    }    pw.print("\r\n");    pw.flush();    o.flush();    long totalBytes=response.endAt - response.startFrom + 1;    long writtenBytes=0;    StreamingBuffer streamingBuffer=new StreamingBuffer();    streamingBuffer.setErrorBit();    while (writtenBytes < totalBytes) {      byte[] inputBuffer=streamingBuffer.read();      if (inputBuffer == null) {        System.out.println("Input pipe closed. Opening a new one");        streamingBuffer.resetErrorBit();        if (folderLink) {          megaApiFolder.startStreaming(response.node,response.startFrom + writtenBytes,totalBytes - writtenBytes,new MegaStreamReader(streamingBuffer));        } else {          megaApi.startStreaming(response.node,response.startFrom + writtenBytes,totalBytes - writtenBytes,new MegaStreamReader(streamingBuffer));        }        continue;      }      try {        o.write(inputBuffer);      } catch (      Exception e) {        System.out.println("SOCKET CLOSED. ABORTING");        streamingBuffer.abort();        break;      }      writtenBytes+=inputBuffer.length;    }    System.out.println("Closing connection");    try {      o.flush();      o.close();      in.close();      is.close();    } catch (    IOException ex) {    }    try {      mySocket.close();    } catch (    Throwable t) {    }  } catch (  IOException ioe) {    ioe.printStackTrace();    try {      mySocket.close();    } catch (    Throwable t) {    }  }}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthSliderUI((JSlider)c);}  }
class C{  public FSLogoutStatus(String status){  this.status=status;}  }
class C{  public short compareDocumentPosition(Node other) throws DOMException {  return 0;}  }
class C{  private YearMonth with(int newYear,int newMonth){  if (year == newYear && month == newMonth) {    return this;  }  return new YearMonth(newYear,newMonth);}  }
class C{  public BeepAction(){  super(beepAction);}  }
class C{  public void logEvent(String eventName,double valueToSum){  logEvent(eventName,valueToSum,null);}  }
class C{  public void intervalRemoved(ListDataEvent e){  firePropertyChange(AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,Boolean.valueOf(false),Boolean.valueOf(true));}  }
class C{  @Override public synchronized void connect() throws IOException {  if (connecting || isConnected())   return;  connecting=true;  if (isConnected())   throw new IOException(sm.getString("nioSender.already.connected"));  if (readbuf == null) {    readbuf=getReadBuffer();  } else {    readbuf.clear();  }  if (writebuf == null) {    writebuf=getWriteBuffer();  } else {    writebuf.clear();  }  if (isUdpBased()) {    InetSocketAddress daddr=new InetSocketAddress(getAddress(),getUdpPort());    if (dataChannel != null)     throw new IOException(sm.getString("nioSender.datagram.already.established"));    dataChannel=DatagramChannel.open();    configureSocket();    dataChannel.connect(daddr);    completeConnect();    dataChannel.register(getSelector(),SelectionKey.OP_WRITE,this);  } else {    InetSocketAddress addr=new InetSocketAddress(getAddress(),getPort());    if (socketChannel != null)     throw new IOException(sm.getString("nioSender.socketChannel.already.established"));    socketChannel=SocketChannel.open();    configureSocket();    if (socketChannel.connect(addr)) {      completeConnect();      socketChannel.register(getSelector(),SelectionKey.OP_WRITE,this);    } else {      socketChannel.register(getSelector(),SelectionKey.OP_CONNECT,this);    }  }}  }
class C{  public void clearPasswordResetState(){  operations.add(PasswordPolicyStateOperationType.CLEAR_PASSWORD_RESET_STATE);}  }
class C{  public Location toLocation(World world,float yaw,float pitch){  return new Location(world,x,y,z,yaw,pitch);}  }
class C{  public OAuth2BearerWWWAuthenticateHeader(OAuth2Error error){  this.error=error;}  }
class C{  public static NSObject parse(final byte[] bytes) throws ParserConfigurationException, ParseException, SAXException, PropertyListFormatException, IOException {  ByteArrayInputStream bis=new ByteArrayInputStream(bytes);  return parse(bis);}  }
class C{  public PERSIST_STORE(){  this("");}  }
class C{  @Override public void disconnect(DisconnectReason disconnectReason,boolean sendNotification,LocalizableMessage message){synchronized (opsInProgressLock) {    if (disconnectRequested) {      return;    }    disconnectRequested=true;  }  if (keepStats) {    statTracker.updateDisconnect();  }  if (connectionID >= 0) {    DirectoryServer.connectionClosed(this);  }  connectionValid=false;  final LocalizableMessage cancelMessage;  if (message != null) {    cancelMessage=new LocalizableMessageBuilder().append(disconnectReason.getClosureMessage()).append(": ").append(message).toMessage();  } else {    cancelMessage=disconnectReason.getClosureMessage();  }  cancelAllOperations(new CancelRequest(true,cancelMessage));  finalizeConnectionInternal();  Selector selector=writeSelector.get();  close(selector);  if (sendNotification && ldapVersion != 2) {    try {      int resultCode=toResultCode(disconnectReason);      LocalizableMessage errMsg=message != null ? message : INFO_LDAP_CLIENT_GENERIC_NOTICE_OF_DISCONNECTION.get();      ExtendedResponseProtocolOp notificationOp=new ExtendedResponseProtocolOp(resultCode,errMsg,null,null,OID_NOTICE_OF_DISCONNECTION,null);      sendLDAPMessage(new LDAPMessage(0,notificationOp,null));    } catch (    Exception e) {      logger.traceException(e);    }  }  Runnable r=new ConnectionFinalizerJob(asn1Reader,clientChannel);  connectionHandler.registerConnectionFinalizer(r);  logDisconnect(this,disconnectReason,message);  try {    PluginConfigManager pluginManager=DirectoryServer.getPluginConfigManager();    pluginManager.invokePostDisconnectPlugins(this,disconnectReason,message);  } catch (  Exception e) {    logger.traceException(e);  }}  }
class C{  public PdfCanvas moveTo(double x,double y){  contentStream.getOutputStream().writeDouble(x).writeSpace().writeDouble(y).writeSpace().writeBytes(m);  return this;}  }
class C{  public static void main(final String[] args){  if (args.length < 5) {    System.err.println("Usage: host port username password baseDN");    System.exit(1);  }  final String hostName=args[0];  final int port=Integer.parseInt(args[1]);  final String userName=args[2];  final String password=args[3];  final String baseDN=args[4];  final SearchScope scope=SearchScope.WHOLE_SUBTREE;  final String filter="(objectclass=*)";  final String[] attributes={"objectclass","objectGUID","isDeleted","uSNChanged"};  final LDIFEntryWriter writer=new LDIFEntryWriter(System.out);  final LDAPConnectionFactory factory=new LDAPConnectionFactory(hostName,port);  Connection connection=null;  try {    connection=factory.getConnection();    connection.bind(userName,password.toCharArray());    final SearchRequest request=Requests.newSearchRequest(baseDN,scope,filter,attributes).addControl(GenericControl.newControl("1.2.840.113556.1.4.528",true));    final ConnectionEntryReader reader=connection.search(request);    while (reader.hasNext()) {      if (!reader.isReference()) {        final SearchResultEntry entry=reader.readEntry();        writer.writeComment("Search result entry: " + entry.getName());        writer.writeEntry(entry);        writer.flush();      } else {        final SearchResultReference ref=reader.readReference();        writer.writeComment("Search result reference: " + ref.getURIs());      }    }  } catch (  final LdapException e) {    System.err.println(e.getMessage());    System.exit(e.getResult().getResultCode().intValue());  }catch (  final IOException e) {    System.err.println(e.getMessage());    System.exit(ResultCode.CLIENT_SIDE_LOCAL_ERROR.intValue());  } finally {    if (connection != null) {      connection.close();    }  }}  }
class C{  private boolean supportSOAPProfile(ProviderDescriptorType currentDesc){  FSUtils.debug.message("Entered FSSingleLogoutHandler::supportSOAPProfile");  if (currentDesc == null) {    return false;  }  List profiles=currentDesc.getSingleLogoutProtocolProfile();  if (profiles != null && (profiles.contains(IFSConstants.LOGOUT_IDP_SOAP_PROFILE) || profiles.contains(IFSConstants.LOGOUT_SP_SOAP_PROFILE))) {    return true;  }  return false;}  }
class C{  public boolean canBuild(){  return this.canBuild;}  }
class C{  public Mp4EsdsBox(Mp4BoxHeader header,ByteBuffer dataBuffer){  this.header=header;  int sectionThreeLength;  int sectionFourLength;  int sectionFiveLength;  int sectionSixLength;  dataBuffer.position(dataBuffer.position() + VERSION_FLAG_LENGTH + OTHER_FLAG_LENGTH);  if (dataBuffer.get() == SECTION_THREE) {    sectionThreeLength=processSectionHeader(dataBuffer);    dataBuffer.position(dataBuffer.position() + ES_ID_LENGTH + STREAM_PRIORITY_LENGTH);  }  if (dataBuffer.get() == SECTION_FOUR) {    sectionFourLength=processSectionHeader(dataBuffer);    kind=kindMap.get((int)dataBuffer.get());    dataBuffer.position(dataBuffer.position() + STREAM_TYPE_LENGTH + BUFFER_SIZE_LENGTH);    this.maxBitrate=Utils.getIntBE(dataBuffer,dataBuffer.position(),(dataBuffer.position() + MAX_BITRATE_LENGTH - 1));    dataBuffer.position(dataBuffer.position() + MAX_BITRATE_LENGTH);    this.avgBitrate=Utils.getIntBE(dataBuffer,dataBuffer.position(),(dataBuffer.position() + AVERAGE_BITRATE_LENGTH - 1));    dataBuffer.position(dataBuffer.position() + AVERAGE_BITRATE_LENGTH);  }  if (dataBuffer.get() == SECTION_FIVE) {    sectionFiveLength=processSectionHeader(dataBuffer);    audioProfile=audioProfileMap.get((dataBuffer.get() >> 3));    byte channelByte=dataBuffer.get();    numberOfChannels=(channelByte << 1) >> 4;  }}  }
class C{  public static boolean connect(FileDescriptor fd,InetAddress inetAddress,int port,int timeoutMs) throws SocketException, SocketTimeoutException {  try {    return connectErrno(fd,inetAddress,port,timeoutMs);  } catch (  ErrnoException errnoException) {    throw new ConnectException(connectDetail(inetAddress,port,timeoutMs,errnoException),errnoException);  }catch (  SocketException ex) {    throw ex;  }catch (  SocketTimeoutException ex) {    throw ex;  }catch (  IOException ex) {    throw new SocketException(ex);  }}  }
class C{  private String generateResourceTypeName(CreateRequest request) throws EntitlementException {  String applicationName=request.getNewResourceId();  if (applicationName == null) {    applicationName=request.getContent().get(APPLICATION_NAME).asString();    if (applicationName == null) {      throw new EntitlementException(EntitlementException.INVALID_VALUE,APPLICATION_NAME);    }  }  return applicationName + "ResourceType" + RandomStringUtils.randomNumeric(4);}  }
class C{  public void test_GetOrder(){  assertEquals("wrong order was reteurned",BigInteger.valueOf(1),ecps.getOrder());}  }
class C{  public AuthContextLocalWrapper(AuthContextLocal authContextLocal){  this.authContextLocal=authContextLocal;}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(LESS_THAN);  }  address.encode(retval);  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(GREATER_THAN);  }  if (!parameters.isEmpty()) {    retval.append(SEMICOLON);    parameters.encode(retval);  }  return retval;}  }
class C{  private static final int[] squareToLen(int[] x,int len,int[] z){  int zlen=len << 1;  if (z == null || z.length < zlen)   z=new int[zlen];  int lastProductLowWord=0;  for (int j=0, i=0; j < len; j++) {    long piece=(x[j] & LONG_MASK);    long product=piece * piece;    z[i++]=(lastProductLowWord << 31) | (int)(product >>> 33);    z[i++]=(int)(product >>> 1);    lastProductLowWord=(int)product;  }  for (int i=len, offset=1; i > 0; i--, offset+=2) {    int t=x[i - 1];    t=mulAdd(z,x,offset,i - 1,t);    addOne(z,offset - 1,i,t);  }  primitiveLeftShift(z,zlen,1);  z[zlen - 1]|=x[len - 1] & 1;  return z;}  }
class C{  private static LocalDate resolvePreviousValid(int year,int month,int day){switch (month) {case 2:    day=Math.min(day,IsoChronology.INSTANCE.isLeapYear(year) ? 29 : 28);  break;case 4:case 6:case 9:case 11:day=Math.min(day,30);break;}return new LocalDate(year,month,day);}  }
class C{  public void addNamedDestination(String key,PdfObject value){  checkClosingStatus();  catalog.addNamedDestination(key,value);}  }
class C{  public boolean messageEnabled(){  return debugInst.messageEnabled();}  }
class C{  @Override public synchronized Object[] toArray(){  Object[] result=new Object[elementCount];  System.arraycopy(elementData,0,result,0,elementCount);  return result;}  }
class C{  @BeforeMethod public void initialize() throws Exception {  if (TEST_LOG_FILE.exists()) {    TEST_LOG_FILE.delete();  }  try (LogFile<String,String> logFile=getLogFile(RECORD_PARSER)){    for (int i=1; i <= 10; i++) {      logFile.append(Record.from(String.format("key%02d",i),"value" + i));    }  } }  }
class C{  public void append(Printable painter,PageFormat page){  mPages.addElement(new BookPage(painter,page));}  }
class C{  public void close() throws IOException {  if (!this.closed) {    this.closed=true;    this.out.flush();  }}  }
class C{  public void toString(StringBuilder buffer){  buffer.append("EntryEncodeConfig(excludeDN=");  buffer.append(excludeDN);  buffer.append(", compressAttrDescriptions=");  buffer.append(compressAttrDescriptions);  buffer.append(", compressObjectClassSets=");  buffer.append(compressObjectClassSets);  buffer.append(")");}  }
class C{  public SelectRealmViewBean(){  super("SelectRealm");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  createPageTitleModel();  createPropertyModel();  registerChildren();}  }
class C{  public ScenarioBuilder(){  try {    this.scenario=new Scenario(new File(Files.createTempDir(),".git"));    this.repository=FileRepositoryBuilder.create(scenario.getRepositoryLocation());    repository.create();    this.git=new Git(repository);  } catch (  Exception ex) {    throw new IllegalStateException("failure building scenario",ex);  }}  }
class C{  public DoubleHolder(){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemns03.class,args);}  }
class C{  protected AbstractOperation(ClientConnection clientConnection,long operationID,int messageID,List<Control> requestControls){  this.clientConnection=clientConnection;  this.operationID=operationID;  this.messageID=messageID;  this.useNanoTime=DirectoryServer.getUseNanoTime();  this.requestControls=requestControls != null ? requestControls : new ArrayList<Control>(0);  authorizationEntry=clientConnection.getAuthenticationInfo().getAuthorizationEntry();}  }
class C{  private TargetControl(EnumTargetOperator op,Set<String> controlOIDS){  this.controlOIDS=controlOIDS;  this.op=op;}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  private NumberEditor(JSpinner spinner,DecimalFormat format){  super(spinner);  if (!(spinner.getModel() instanceof SpinnerNumberModel)) {    throw new IllegalArgumentException("model not a SpinnerNumberModel");  }  SpinnerNumberModel model=(SpinnerNumberModel)spinner.getModel();  NumberFormatter formatter=new NumberEditorFormatter(model,format);  DefaultFormatterFactory factory=new DefaultFormatterFactory(formatter);  JFormattedTextField ftf=getTextField();  ftf.setEditable(true);  ftf.setFormatterFactory(factory);  ftf.setHorizontalAlignment(JTextField.RIGHT);  try {    String maxString=formatter.valueToString(model.getMinimum());    String minString=formatter.valueToString(model.getMaximum());    ftf.setColumns(Math.max(maxString.length(),minString.length()));  } catch (  ParseException e) {  }}  }
class C{  public void test3360(){  String str="!\"#%&'(),-./";  Pattern p=Pattern.compile("\\s");  Matcher m=p.matcher(str);  assertFalse(m.find());}  }
class C{  @Override public void initialize() throws UpgradeException {  if (!isCurrentVersionLessThan(1300,true)) {    return;  }  try {    DEBUG.message("Initializing OldPolicyConditionMigrationStep");    for (    String realm : getRealmNames()) {      if (!realm.startsWith("/")) {        realm="/" + realm;      }      PrivilegeManager privilegeManager=getPrivilegeManager(realm);      List<Privilege> privileges;      try {        privileges=privilegeManager.findAllPolicies();      } catch (      EntitlementException e) {        continue;      }      for (      Privilege privilege : privileges) {        if (conditionUpgrader.isPolicyUpgradable(privilege)) {          try {            MigrationReport report=conditionUpgrader.dryRunPolicyUpgrade(privilege);            addReport(realm,report);            addUpgradablePolicy(realm,privilege);          } catch (          Exception e) {            addUnupgradablePolicy(realm,privilege);          }        }      }    }  } catch (  UpgradeException e) {    DEBUG.error("Error while trying to detect changes in entitlements",e);    throw e;  }catch (  Exception ex) {    DEBUG.error("Error while trying to detect changes in entitlements",ex);    throw new UpgradeException(ex);  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.X509DataType.X509SKI createX509DataTypeX509SKI(byte[] value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.X509DataTypeImpl.X509SKIImpl(value);}  }
class C{  void parseLiteral(boolean replace) throws IOException {  while (true) {    int c=ch;switch (c) {case -1:      error("eof.literal",stack.elem.getName());    endTag(true);  return;case '>':ch=readCh();int i=textpos - (stack.elem.name.length() + 2), j=0;if ((i >= 0) && (text[i++] == '<') && (text[i] == '/')) {while ((++i < textpos) && (Character.toLowerCase(text[i]) == stack.elem.name.charAt(j++))) ;if (i == textpos) {textpos-=(stack.elem.name.length() + 2);if ((textpos > 0) && (text[textpos - 1] == '\n')) {  textpos--;}endTag(false);return;}}break;case '&':char data[]=parseEntityReference();if (textpos + data.length > text.length) {char newtext[]=new char[Math.max(textpos + data.length + 128,text.length * 2)];System.arraycopy(text,0,newtext,0,text.length);text=newtext;}System.arraycopy(data,0,text,textpos,data.length);textpos+=data.length;continue;case '\n':ln++;ch=readCh();lfCount++;break;case '\r':ln++;if ((ch=readCh()) == '\n') {ch=readCh();crlfCount++;} else {crCount++;}c='\n';break;default :ch=readCh();break;}if (textpos == text.length) {char newtext[]=new char[text.length + 128];System.arraycopy(text,0,newtext,0,text.length);text=newtext;}text[textpos++]=(char)c;}}  }
class C{  public PdfCanvas closePathStroke(){  contentStream.getOutputStream().writeBytes(s);  return this;}  }
class C{  public boolean checkDateValidity(long someTime){  if (notBefore == null) {    if (notOnOrAfter == null) {      return true;    } else {      if (someTime < notOnOrAfter.getTime()) {        return true;      }    }  } else   if (notOnOrAfter == null) {    if (someTime >= notBefore.getTime()) {      return true;    }  } else   if ((someTime >= notBefore.getTime()) && (someTime < notOnOrAfter.getTime())) {    return true;  }  return false;}  }
class C{  private static void legacyMergeSort(Object[] a){  Object[] aux=a.clone();  mergeSort(aux,a,0,a.length,0);}  }
class C{  public double num(){  return toDouble();}  }
class C{  public ModifyChangeRecordEntry(DN dn,Collection<RawModification> modifications){  super(dn);  ifNull(modifications);  this.modifications=new ArrayList<>(modifications);}  }
class C{  public TagField createLinkedArtworkField(String url){  return new MetadataBlockDataPicture(Utils.getDefaultBytes(url,TextEncoding.CHARSET_ISO_8859_1),PictureTypes.DEFAULT_ID,MetadataBlockDataPicture.IMAGE_IS_URL,"",0,0,0,0);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Node nodeV;  String value;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(2);  nodeV=nameNode.getFirstChild();  value=nodeV.getNodeValue();  assertEquals("textWithNoMarkupAssert","Roger\n Jones",value);}  }
class C{  @Fluent public Job onFailureAttempt(Handler<JsonObject> failureHandler){  this.on("failed_attempt",null);  return this;}  }
class C{  @Override public void flush() throws IOException {synchronized (lock) {    out.flush();  }}  }
class C{  private void displayUsage(PrintStream p,LocalizableMessage usage){  TableBuilder builder=new TableBuilder();  builder.startRow();  builder.appendCell(INFO_DSCFG_HELP_HEADING_SYNTAX.get());  builder.appendCell(HEADING_SEPARATOR);  builder.appendCell(usage);  TextTablePrinter factory=new TextTablePrinter(p);  factory.setDisplayHeadings(false);  factory.setColumnWidth(0,HEADING_WIDTH);  factory.setColumnWidth(2,0);  factory.setPadding(0);  builder.print(factory);}  }
class C{  public SOAPClientException(){  super();}  }
class C{  private static JsonValue flattenJson(JsonValue original){  return flattenJson("",original);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.security.RequesterAuthorizationElement createRequesterAuthorizationElement(javax.xml.namespace.QName value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.security.impl.RequesterAuthorizationElementImpl(value);}  }
class C{  public static boolean checkConfiguredProtocolMessagesOrder(TlsContext tlsContext){  List<ProtocolMessage> protocolMessages=tlsContext.getWorkflowTrace().getProtocolMessages();  List<ProtocolMessageTypeHolder> configuredProtocolMessageOrder=tlsContext.getPreconfiguredProtocolMessages();  int min=(protocolMessages.size() < configuredProtocolMessageOrder.size()) ? protocolMessages.size() : configuredProtocolMessageOrder.size();  LOGGER.info("The configured message order contains {}, there are {} protocol messages",configuredProtocolMessageOrder.size(),protocolMessages.size());  for (int i=0; i < min; i++) {    ProtocolMessageTypeHolder typeWorkflow=new ProtocolMessageTypeHolder(protocolMessages.get(i));    ProtocolMessageTypeHolder typeConfigured=configuredProtocolMessageOrder.get(i);    if (!typeConfigured.equals(typeWorkflow)) {      ProtocolMessage pm=getNextProtocolMessageFromPeer(tlsContext,i - 1);      if (pm.getProtocolMessageType() != ProtocolMessageType.ALERT) {        LOGGER.info("The configured message order was not equal to the executed one. Our peer has NOT " + "responded with an Alert. Verify the message flow manually");        return false;      } else {        LOGGER.info("The configured message order was not equal to the executed one, but our peer has " + "responded with an Alert, everything seems to go well.");        return true;      }    }  }  LOGGER.info("The configured message order was equal to the executed one");  return true;}  }
class C{  public ArrayList<ArtLayer> art_layer_list(){  return layers_list;}  }
class C{  String[] toCommandLineArguments(String configurationFile){  return new String[]{"--configFile",configurationFile,"--baseDN",baseDN,"--rebuildAll","--noPropertiesFile"};}  }
class C{  public static String dateToString(Date date){  return dateToString(date,UTC_DATE_FORMAT);}  }
class C{  private Set<String> toScopeSet(String value) throws EntitlementException {  final Set<String> scopes=new LinkedHashSet<String>();  if (value != null) {    for (    String scope : value.split(SCOPE_DELIMITERS)) {      if (!VALID_SCOPE_PATTERN.matcher(scope.trim()).matches()) {        if (debug.errorEnabled()) {          debug.error("OAuth2ScopeCondition.toScopeSet(): invalid OAuth2 scope, " + scope);        }        throw new EntitlementException(INVALID_OAUTH2_SCOPE,scope);      }      scopes.add(scope.trim());    }  }  return scopes;}  }
class C{  public OAuth2BearerWWWAuthenticateHeader(){  this(null);}  }
class C{  public static CustomTokenOperation fromJson(JsonValue json){  return new CustomTokenOperation(json.get(CUSTOM_TOKEN_NAME).asString(),json.get(CUSTOM_OPERATION_CLASS_NAME).asString());}  }
class C{  public void _write(OutputStream output){  output.write_string(value);}  }
class C{  public String readLine() throws IOException {synchronized (lock) {    String l=super.readLine(skipLF);    skipLF=false;    if (l != null)     lineNumber++;    return l;  }}  }
class C{  public void test_minLjava_util_CollectionLjava_util_Comparator(){  ReversedMyIntComparator rmic=new ReversedMyIntComparator();  assertTrue("Returned incorrect min element using custom comparator",Collections.min(mys,rmic) == myobjArray[objArray.length - 1]);  ArrayList al=new ArrayList();  try {    Collections.min(al,rmic);    fail("NoSuchElementException expected");  } catch (  NoSuchElementException e) {  }  al.add("String");  al.add(new Integer(1));  al.add(new Double(3.14));  try {    Collections.min(al,rmic);    fail("ClassCastException expected");  } catch (  ClassCastException e) {  }}  }
class C{  public Name add(String comp) throws InvalidNameException {  return add(size(),comp);}  }
class C{  public void removeDuration(){  super.removeParameter(DURATION);}  }
class C{  public void replaceCondition(String name,Condition condition) throws NameNotFoundException {  conditions.replaceCondition(name,condition);}  }
class C{  public Object remove(int posn) throws InvalidNameException {  unparsed=null;  return rdns.remove(posn).toString();}  }
class C{  public void testCompareLessScale2(){  String a="12380964839238475457356735674573";  int aScale=36;  String b="45735635948573894578349572001798379183767890295784902768787678287";  int bScale=48;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  int result=-1;  assertEquals("incorrect result",result,aNumber.compareTo(bNumber));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode17.class,args);}  }
class C{  public String toString(){  return toString(true,false);}  }
class C{  public void insert_typecode(org.omg.CORBA.TypeCode value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_typecode",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    $self.insert_typecode(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static Map<String,String> processLogoutResponse(HttpServletRequest request,HttpServletResponse response,String samlResponse,String relayState) throws SAML2Exception, SessionException {  String method="SPSingleLogout:processLogoutResponse : ";  if (debug.messageEnabled()) {    debug.message(method + "samlResponse : " + samlResponse);    debug.message(method + "relayState : " + relayState);  }  String rmethod=request.getMethod();  String binding=SAML2Constants.HTTP_REDIRECT;  if (rmethod.equals("POST")) {    binding=SAML2Constants.HTTP_POST;  }  String metaAlias=SAML2MetaUtils.getMetaAliasByUri(request.getRequestURI());  if ((SPCache.isFedlet) && ((metaAlias == null) || (metaAlias.length() == 0))) {    List spMetaAliases=sm.getAllHostedServiceProviderMetaAliases("/");    if ((spMetaAliases != null) && !spMetaAliases.isEmpty()) {      metaAlias=(String)spMetaAliases.get(0);    }  }  if ((metaAlias == null) || (metaAlias.length() == 0)) {    throw new SAML2Exception(SAML2Utils.bundle.getString("nullSPEntityID"));  }  String realm=SAML2Utils.getRealm(SAML2MetaUtils.getRealmByMetaAlias(metaAlias));  String spEntityID=sm.getEntityByMetaAlias(metaAlias);  if (!SAML2Utils.isSPProfileBindingSupported(realm,spEntityID,SAML2Constants.SLO_SERVICE,binding)) {    throw new SAML2Exception(SAML2Utils.bundle.getString("unsupportedBinding"));  }  SAML2Utils.validateRelayStateURL(realm,spEntityID,relayState,SAML2Constants.SP_ROLE);  LogoutResponse logoutRes=null;  if (rmethod.equals("POST")) {    logoutRes=LogoutUtil.getLogoutResponseFromPost(samlResponse,response);  } else   if (rmethod.equals("GET")) {    String decodedStr=SAML2Utils.decodeFromRedirect(samlResponse);    if (decodedStr == null) {      throw new SAML2Exception(SAML2Utils.bundle.getString("nullDecodedStrFromSamlResponse"));    }    logoutRes=ProtocolFactory.getInstance().createLogoutResponse(decodedStr);  }  if (logoutRes == null) {    if (debug.messageEnabled()) {      debug.message("SSingleLogout:processLogoutResponse: logoutRes " + "is null");    }    return null;  }  String idpEntityID=logoutRes.getIssuer().getValue();  Issuer resIssuer=logoutRes.getIssuer();  String inResponseTo=logoutRes.getInResponseTo();  LogoutRequest logoutReq=(LogoutRequest)SPCache.logoutRequestIDHash.remove(inResponseTo);  if (logoutReq == null) {    logoutReq=(LogoutRequest)SAML2Store.getTokenFromStore(inResponseTo);  }  if (logoutReq == null && SAML2FailoverUtils.isSAML2FailoverEnabled()) {    try {      logoutReq=(LogoutRequest)SAML2FailoverUtils.retrieveSAML2Token(inResponseTo);    } catch (    SAML2TokenRepositoryException e) {      throw new SAML2Exception(SAML2Utils.bundle.getString("LogoutRequestIDandInResponseToDoNotMatch"));    }  }  String userId=null;  if (!SPCache.isFedlet) {    userId=preSingleLogoutProcess(spEntityID,realm,request,response,null,logoutReq,logoutRes,binding);  }  SAML2Utils.verifyResponseIssuer(realm,spEntityID,resIssuer,inResponseTo);  boolean needToVerify=SAML2Utils.getWantLogoutResponseSigned(realm,spEntityID,SAML2Constants.SP_ROLE);  if (debug.messageEnabled()) {    debug.message(method + "metaAlias : " + metaAlias);    debug.message(method + "realm : " + realm);    debug.message(method + "idpEntityID : " + idpEntityID);    debug.message(method + "spEntityID : " + spEntityID);  }  Map<String,String> infoMap=new HashMap<String,String>();  infoMap.put("entityid",spEntityID);  infoMap.put(SAML2Constants.REALM,realm);  if (needToVerify) {    boolean valid=false;    if (rmethod.equals("GET")) {      String queryString=request.getQueryString();      valid=SAML2Utils.verifyQueryString(queryString,realm,SAML2Constants.SP_ROLE,idpEntityID);    } else {      valid=LogoutUtil.verifySLOResponse(logoutRes,realm,idpEntityID,spEntityID,SAML2Constants.SP_ROLE);    }    if (!valid) {      debug.error("SPSingleLogout.processLogoutResponse: " + "Invalid signature in SLO Response.");      throw new SAML2Exception(SAML2Utils.bundle.getString("invalidSignInResponse"));    }    SPSSODescriptorElement spsso=sm.getSPSSODescriptor(realm,spEntityID);    String loc=getSLOResponseLocationOrLocation(spsso,binding);    if (!SAML2Utils.verifyDestination(logoutRes.getDestination(),loc)) {      throw new SAML2Exception(SAML2Utils.bundle.getString("invalidDestination"));    }  }  if (inResponseTo == null || inResponseTo.length() == 0) {    if (debug.messageEnabled()) {      debug.message("LogoutResponse inResponseTo is null");    }    throw new SAML2Exception(SAML2Utils.bundle.getString("nullInResponseToFromSamlResponse"));  }  if (logoutReq != null) {    if (debug.messageEnabled()) {      debug.message("LogoutResponse inResponseTo matches " + "LogoutRequest ID.");    }  } else {    if (debug.messageEnabled()) {      debug.message("LogoutResponse inResponseTo does not match " + "LogoutRequest ID.");    }    throw new SAML2Exception(SAML2Utils.bundle.getString("LogoutRequestIDandInResponseToDoNotMatch"));  }  infoMap.put("inResponseTo",inResponseTo);  infoMap.put(SAML2Constants.RELAY_STATE,relayState);  try {    Object session=sessionProvider.getSession(request);    if ((session != null) && sessionProvider.isValid(session)) {      sessionProvider.invalidateSession(session,request,response);    }  } catch (  SessionException se) {    debug.message("SPSingleLogout.processLogoutResponse() : Unable to invalidate session: " + se.getMessage());  }  if (!SPCache.isFedlet) {    if (isSuccess(logoutRes)) {      postSingleLogoutSuccess(spEntityID,realm,request,response,userId,logoutReq,logoutRes,binding);    } else {      throw new SAML2Exception(SAML2Utils.BUNDLE_NAME,"sloFailed",null);    }  } else {    FedletAdapter fedletAdapter=SAML2Utils.getFedletAdapterClass(spEntityID,realm);    if (fedletAdapter != null) {      if (isSuccess(logoutRes)) {        fedletAdapter.onFedletSLOSuccess(request,response,logoutReq,logoutRes,spEntityID,idpEntityID,binding);      } else {        fedletAdapter.onFedletSLOFailure(request,response,logoutReq,logoutRes,spEntityID,idpEntityID,binding);        throw new SAML2Exception(SAML2Utils.BUNDLE_NAME,"sloFailed",null);      }    }  }  return infoMap;}  }
class C{  public EddystoneEidrGenerator(byte[] serviceEcdhPublicKey,byte[] beaconEcdhPrivateKey){  checkArgument(serviceEcdhPublicKey != null && serviceEcdhPublicKey.length == 32);  checkArgument(beaconEcdhPrivateKey != null && beaconEcdhPrivateKey.length == 32);  this.serviceEcdhPublicKey=serviceEcdhPublicKey;  this.beaconPrivateKey=beaconEcdhPrivateKey;  beaconPublicKey=generateBeaconPublicKey();}  }
class C{  public JobPrioritySupported(int value){  super(value,1,100);}  }
class C{  public Holder(){}  }
class C{  public CancelException(File file,int depth){  this("Operation Cancelled",file,depth);}  }
class C{  public void checkHeaders() throws ParseException {  if (getCSeq() == null) {    throw new ParseException(CSeq.NAME + " Is missing ",0);  }  if (getTo() == null) {    throw new ParseException(To.NAME + " Is missing ",0);  }  if (getFrom() == null) {    throw new ParseException(From.NAME + " Is missing ",0);  }  if (getViaHeaders() == null) {    throw new ParseException(Via.NAME + " Is missing ",0);  }  if (getCallId() == null) {    throw new ParseException(CallID.NAME + " Is missing ",0);  }  if (getStatusCode() > 699) {    throw new ParseException("Unknown error code!" + getStatusCode(),0);  }}  }
class C{  public boolean isAfter(Instant otherInstant){  return compareTo(otherInstant) > 0;}  }
class C{  public SearchRequest asSearchRequest(){  final SearchRequest request=Requests.newSearchRequest(name,scope,filter);  for (  final String a : attributes) {    request.addAttribute(a);  }  return request;}  }
class C{  private void ensureCapacity(int n){  if (n <= 0) {    return;  }  int max;  if (data == null || data.length == 0) {    max=25;  } else   if (data.length >= n * 5) {    return;  } else {    max=data.length;  }  while (max < n * 5) {    max*=2;  }  String newData[]=new String[max];  if (length > 0) {    System.arraycopy(data,0,newData,0,length * 5);  }  data=newData;}  }
class C{  public static ObjectName createObjectName(String domain,ContextEnvironment environment) throws MalformedObjectNameException {  ObjectName name=null;  Object container=environment.getNamingResources().getContainer();  if (container instanceof Server) {    name=new ObjectName(domain + ":type=Environment" + ",resourcetype=Global,name="+ environment.getName());  } else   if (container instanceof Context) {    Context context=((Context)container);    ContextName cn=new ContextName(context.getName(),false);    Container host=context.getParent();    name=new ObjectName(domain + ":type=Environment" + ",resourcetype=Context,host="+ host.getName()+ ",context="+ cn.getDisplayName()+ ",name="+ environment.getName());  }  return (name);}  }
class C{  ServerInstance(ServerGroup group,Server theServer,LDAPUser theUser){  serverGroup=group;  server=theServer;  user=theUser;}  }
class C{  public static String generateID(){  if (random == null) {    return null;  }  byte bytes[]=new byte[SAMLConstants.ID_LENGTH];  random.nextBytes(bytes);  String encodedID=SAMLID_PREFIX + byteArrayToHexString(bytes);  if (SAMLUtilsCommon.debug.messageEnabled()) {    SAMLUtilsCommon.debug.message("SAMLUtils.generated ID is: " + encodedID);  }  return encodedID;}  }
class C{  public void sendRequest() throws RequestException, RouteException, IOException {  if (cacheStrategy != null)   return;  if (httpStream != null)   throw new IllegalStateException();  Request request=networkRequest(userRequest);  InternalCache responseCache=Internal.instance.internalCache(client);  Response cacheCandidate=responseCache != null ? responseCache.get(request) : null;  long now=System.currentTimeMillis();  cacheStrategy=new CacheStrategy.Factory(now,request,cacheCandidate).get();  networkRequest=cacheStrategy.networkRequest;  cacheResponse=cacheStrategy.cacheResponse;  if (responseCache != null) {    responseCache.trackResponse(cacheStrategy);  }  if (cacheCandidate != null && cacheResponse == null) {    closeQuietly(cacheCandidate.body());  }  if (networkRequest != null) {    httpStream=connect();    httpStream.setHttpEngine(this);    if (callerWritesRequestBody && permitsRequestBody(networkRequest) && requestBodyOut == null) {      long contentLength=OkHeaders.contentLength(request);      if (bufferRequestBody) {        if (contentLength > Integer.MAX_VALUE) {          throw new IllegalStateException("Use setFixedLengthStreamingMode() or " + "setChunkedStreamingMode() for requests larger than 2 GiB.");        }        if (contentLength != -1) {          httpStream.writeRequestHeaders(networkRequest);          requestBodyOut=new RetryableSink((int)contentLength);        } else {          requestBodyOut=new RetryableSink();        }      } else {        httpStream.writeRequestHeaders(networkRequest);        requestBodyOut=httpStream.createRequestBody(networkRequest,contentLength);      }    }  } else {    streamAllocation.release();    if (cacheResponse != null) {      this.userResponse=cacheResponse.newBuilder().request(userRequest).priorResponse(stripBody(priorResponse)).cacheResponse(stripBody(cacheResponse)).build();    } else {      this.userResponse=new Response.Builder().request(userRequest).priorResponse(stripBody(priorResponse)).protocol(Protocol.HTTP_1_1).code(504).message("Unsatisfiable Request (only-if-cached)").body(EMPTY_BODY).build();    }    userResponse=unzip(userResponse);  }}  }
class C{  @Override public void toString(StringBuilder buffer,int indent){  StringBuilder indentBuf=new StringBuilder(indent);  for (int i=0; i < indent; i++) {    indentBuf.append(' ');  }  buffer.append(indentBuf);  buffer.append("Compare Request");  buffer.append(EOL);  buffer.append(indentBuf);  buffer.append("  Target DN:  ");  buffer.append(dn);  buffer.append(EOL);  buffer.append(indentBuf);  buffer.append("  Attribute Type:  ");  buffer.append(attributeType);  buffer.append(EOL);  buffer.append(indentBuf);  buffer.append("  Assertion Value:");  buffer.append(EOL);  buffer.append(assertionValue.toHexPlusAsciiString(indent + 4));}  }
class C{  public org.w3c.dom.Document encryptAndReplaceWSSElements(org.w3c.dom.Document doc,java.util.Map elmMap,java.lang.String encDataEncAlg,int encDataEncAlgStrength,String certAlias,int kekStrength,java.lang.String tokenType,java.lang.String providerID) throws EncryptionException {  return null;}  }
class C{  public void close() throws IOException {  if (!closed) {    super.close();    eos=true;    closed=true;  }}  }
class C{  public static void writeFile(String name,String contents) throws IOException {  writeFile(name,contents.getBytes());}  }
class C{  public void elementDecl(String name,String model) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#elementDecl: " + name + ", "+ model);  if (null != m_declHandler) {    m_declHandler.elementDecl(name,model);  }}  }
class C{  public PWResetInvalidURLModelImpl(){  super();}  }
class C{  public SnsHttpDelegate(AmazonSNSClient client,PushNotificationServiceConfig config,SnsPushMessageConverter pushMessageConverter,String realm,MessageDispatcher messageDispatcher){  this.client=client;  this.config=config;  this.pushMessageConverter=pushMessageConverter;  this.realm=realm;  this.messageDispatcher=messageDispatcher;}  }
class C{  public void removeEntryReadListener(EntryReadListener listener){  listeners.remove(listener);}  }
class C{  public void run(){  HeadTaskRunnable localHeadTask=null;  TaskRunnable localTask=null;  TaskRunnable runTask=null;  WorkerThread t=this;  while (true) {    try {synchronized (this) {        if ((!shouldTerminate) && (task == null)) {          this.wait();        }        localHeadTask=task;        task=null;      }      if (shouldTerminate) {        break;      }      if (localHeadTask != null) {        if (localHeadTask.acquireValidLock()) {          try {            localHeadTask.timeout();            localTask=localHeadTask.next();            while (localTask != null) {              runTask=localTask;              localTask=localTask.next();              runTask.setNext(null);              runTask.run();              if (runTask.getRunPeriod() >= 0) {                pool.schedule(runTask,new Date(localHeadTask.scheduledExecutionTime() + runTask.getRunPeriod()));              }            }            localHeadTask.expire();          }  finally {            localHeadTask.releaseLockAndNotify();          }        }      }    } catch (    IllegalStateException ex) {      if (debug != null) {        debug.message("TimerPool$WorkerThread:run() " + name,ex);      }      shouldTerminate=true;    }catch (    RuntimeException ex) {      if (debug != null) {        debug.error("TimerPool$WorkerThread:run() " + name,ex);      }      if (localHeadTask != null) {        if (localHeadTask.acquireValidLock()) {          try {            if ((runTask.getRunPeriod() >= 0) && (runTask.scheduledExecutionTime() == localHeadTask.scheduledExecutionTime())) {              pool.schedule(runTask,new Date(localHeadTask.scheduledExecutionTime() + runTask.getRunPeriod()));            }            if (localTask != null) {              localHeadTask.setNext(localTask);              localTask.setPrevious(localHeadTask);            }          } catch (          IllegalStateException iex) {            if (debug != null) {              debug.message("TimerPool$WorkerThread:" + "run() " + name,iex);            }            shouldTerminate=true;          } finally {            localHeadTask.releaseLockAndNotify();          }        }      }synchronized (pool) {        pool.deductCurrentThreadCount();        if (localTask != null) {          WorkerThread thread=pool.getAvailableThread();          thread.runTask(localHeadTask);        }      }      shouldTerminate=true;      needReturn=false;    }catch (    Exception ex) {      if (debug != null) {        debug.error("TimerPool$WorkerThread:run() " + name,ex);      }    }catch (    Throwable e) {      if (debug != null) {        debug.error("TimerPool$WorkerThread:run() " + name,e);      }      if (localHeadTask != null) {        if (localHeadTask.acquireValidLock()) {          try {            if ((runTask.getRunPeriod() >= 0) && (runTask.scheduledExecutionTime() == localHeadTask.scheduledExecutionTime())) {              pool.schedule(runTask,new Date(localHeadTask.scheduledExecutionTime() + runTask.getRunPeriod()));            }            if (localTask != null) {              localHeadTask.setNext(localTask);              localTask.setPrevious(localHeadTask);            }          } catch (          IllegalStateException iex) {            if (debug != null) {              debug.message("TimerPool$WorkerThread:" + "run() " + name,iex);            }            shouldTerminate=true;          } finally {            localHeadTask.releaseLockAndNotify();          }        }      }synchronized (pool) {        pool.deductCurrentThreadCount();        if (localTask != null) {          WorkerThread thread=pool.getAvailableThread();          thread.runTask(localHeadTask);        }      }      shouldTerminate=true;      needReturn=false;      throw new Error(e);    } finally {      localHeadTask=null;      localTask=null;      runTask=null;      if (needReturn) {        pool.returnThread(t);      }    }    if (shouldTerminate) {      break;    }  }}  }
class C{  private void doAcquireInterruptibly(int arg) throws InterruptedException {  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public UserDefinedVirtualAttributeProvider(){  super();}  }
class C{  public void paintSpinnerBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  private static int capacity(int expectedMaxSize){  return (expectedMaxSize > MAXIMUM_CAPACITY / 3) ? MAXIMUM_CAPACITY : (expectedMaxSize <= 2 * MINIMUM_CAPACITY / 3) ? MINIMUM_CAPACITY : Integer.highestOneBit(expectedMaxSize + (expectedMaxSize << 1));}  }
class C{  @Inject public ResourceSetService(ResourceSetStoreFactory resourceSetStoreFactory,UmaPolicyService policyService,CoreWrapper coreWrapper,UmaProviderSettingsFactory umaProviderSettingsFactory){  this.resourceSetStoreFactory=resourceSetStoreFactory;  this.policyService=policyService;  this.coreWrapper=coreWrapper;  this.umaProviderSettingsFactory=umaProviderSettingsFactory;}  }
class C{  public EndpointValidator(){  this.hostnameValidator=new HostnameValidator();  this.urlValidator=new URLValidator();}  }
class C{  private Object writeReplace(){  return new SerializationProxy(this);}  }
class C{  private void parseMinorVersion(String minorVer) throws FSMsgException {  try {    minorVersion=Integer.parseInt(minorVer);  } catch (  NumberFormatException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSRegisResp(Element): " + "invalid MinorVersion",e);    }    throw new FSMsgException("wrongInput",null);  }  if (minorVersion > IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {    FSUtils.debug.error("FSRegisResp(Element):MinorVersion of" + " the Response is too high.");    throw new FSMsgException("responseVersionTooHigh",null);  } else   if (minorVersion < IFSConstants.FF_11_PROTOCOL_MINOR_VERSION) {    FSUtils.debug.error("FSRegisResp(Element):MinorVersion of" + " the Response is too low.");    throw new FSMsgException("responseVersionTooLow",null);  }}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.AgreementMethodType.OriginatorKeyInfo createAgreementMethodTypeOriginatorKeyInfo() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.AgreementMethodTypeImpl.OriginatorKeyInfoImpl();}  }
class C{  protected void registerChildren(){  registerChild(LBL_QUESTION,StaticTextField.class);  registerChild(TF_ANSWER,TextField.class);  registerChild(FLD_ATTR_NAME,HiddenField.class);}  }
class C{  public boolean isCompromised(){  return fIsCompromised;}  }
class C{  public static String printInt(int val){  if (theConverter == null)   initConverter();  return theConverter.printInt(val);}  }
class C{  public Object[] toArray(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return Arrays.copyOf(queue,size);  }  finally {    lock.unlock();  }}  }
class C{  public static <T>boolean replaceAll(List<T> list,T oldVal,T newVal){  boolean result=false;  int size=list.size();  if (size < REPLACEALL_THRESHOLD || list instanceof RandomAccess) {    if (oldVal == null) {      for (int i=0; i < size; i++) {        if (list.get(i) == null) {          list.set(i,newVal);          result=true;        }      }    } else {      for (int i=0; i < size; i++) {        if (oldVal.equals(list.get(i))) {          list.set(i,newVal);          result=true;        }      }    }  } else {    ListIterator<T> itr=list.listIterator();    if (oldVal == null) {      for (int i=0; i < size; i++) {        if (itr.next() == null) {          itr.set(newVal);          result=true;        }      }    } else {      for (int i=0; i < size; i++) {        if (oldVal.equals(itr.next())) {          itr.set(newVal);          result=true;        }      }    }  }  return result;}  }
class C{  public final int elementAt(int i){  return m_map[i];}  }
class C{  void addToParent(Element headerE){  Document doc=headerE.getOwnerDocument();  Element providerHeaderE=doc.createElementNS(SOAPBindingConstants.NS_SOAP_BINDING,SOAPBindingConstants.PTAG_PROVIDER);  headerE.appendChild(providerHeaderE);  providerHeaderE.setAttributeNS(null,SOAPBindingConstants.ATTR_PROVIDER_ID,providerID);  if (affiliationID != null) {    providerHeaderE.setAttributeNS(null,SOAPBindingConstants.ATTR_AFFILIATION_ID,affiliationID);  }  if (id != null) {    providerHeaderE.setAttributeNS(null,SOAPBindingConstants.ATTR_id,id);  }  if (mustUnderstand != null) {    providerHeaderE.setAttributeNS(SOAPBindingConstants.NS_SOAP,SOAPBindingConstants.PATTR_MUSTUNDERSTAND,Utils.BooleanToString(mustUnderstand));  }  if (actor != null) {    providerHeaderE.setAttributeNS(SOAPBindingConstants.NS_SOAP,SOAPBindingConstants.PATTR_ACTOR,actor);  }}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("ServerSideSortRequestControl(");  if (sortKeys == null) {    buffer.append("SortOrder(");    if (!decodedKeyList.isEmpty()) {      decodedKeyToString(decodedKeyList.get(0),buffer);      for (int i=1; i < decodedKeyList.size(); i++) {        buffer.append(",");        decodedKeyToString(decodedKeyList.get(i),buffer);      }    }    buffer.append(")");  } else {    buffer.append(sortKeys);  }  buffer.append(")");}  }
class C{  public boolean isUnshared(){  return unshared;}  }
class C{  public void test_unwrap_ByteBuffer_ByteBuffer_05(){  String host="new host";  int port=8080;  ByteBuffer bbs=ByteBuffer.allocate(10);  ByteBuffer bbd=ByteBuffer.allocate(100);  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    SSLEngineResult res=sse.unwrap(bbs,bbd);    assertEquals(0,res.bytesConsumed());    assertEquals(0,res.bytesProduced());  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }}  }
class C{  public static final long parseDate(String value,DateFormat[] threadLocalformats){  Long cachedDate=parseCache.get(value);  if (cachedDate != null) {    return cachedDate.longValue();  }  Long date=null;  if (threadLocalformats != null) {    date=internalParseDate(value,threadLocalformats);    updateParseCache(value,date);  } else {    throw new IllegalArgumentException();  }  if (date == null) {    return (-1L);  }  return date.longValue();}  }
class C{  public static ResourceType.Builder createResourceTypeBuilder(String applicationName,String resourceTypeName,Set<String> patterns,Map<String,Boolean> actions,String uuid){  if (resourceTypeName == null) {    resourceTypeName=generateResourceTypeName(applicationName);  }  ResourceType.Builder builder=ResourceType.builder().setName(resourceTypeName).setDescription("Generated resource type").addPatterns(patterns).addActions(actions);  if (uuid == null) {    builder.generateUUID();  } else {    builder.setUUID(uuid);  }  return builder;}  }
class C{  public void initializeExtendedOperationHandlers() throws ConfigException, InitializationException {  RootCfg root=serverContext.getRootConfig();  root.addExtendedOperationHandlerAddListener(this);  root.addExtendedOperationHandlerDeleteListener(this);  for (  String name : root.listExtendedOperationHandlers()) {    ExtendedOperationHandlerCfg config=root.getExtendedOperationHandler(name);    config.addChangeListener(this);    if (config.isEnabled()) {      ExtendedOperationHandler handler=getHandler(config);      handlers.put(config.dn(),handler);    }  }}  }
class C{  public Assertion(String assertionID,java.lang.String issuer,Date issueInstant,Conditions conditions,Advice advice,Set statements) throws SAMLException {  super(assertionID,issuer,issueInstant,conditions,advice,statements);}  }
class C{  public synchronized boolean isAccessToUnderlyingConnectionAllowed(){  return this.accessToUnderlyingConnectionAllowed;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hasAttributeNS05.class,args);}  }
class C{  public XACMLAuthzDecisionQuery createXACMLAuthzDecisionQuery(String xml) throws XACMLException, SAML2Exception {  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.XACML_AUTHZ_DECISION_QUERY,xml);  if (obj == null) {    return new XACMLAuthzDecisionQueryImpl(xml);  } else {    return (XACMLAuthzDecisionQuery)obj;  }}  }
class C{  protected Region(String name,String ui,boolean subregion){  this(name,subregion);  if (ui != null) {    getUItoRegionMap().put(ui,this);  }}  }
class C{  private Tag parseAttributeTag(String tagString,Branch branch,Template template,int lineNumber,List<LocalizableMessage> warnings) throws InitializationException, MakeLDIFException {  StringTokenizer tokenizer=new StringTokenizer(tagString,":");  ArrayList<String> argList=new ArrayList<>();  while (tokenizer.hasMoreTokens()) {    argList.add(tokenizer.nextToken());  }  String[] args=new String[argList.size()];  argList.toArray(args);  AttributeValueTag tag=new AttributeValueTag();  if (branch != null) {    tag.initializeForBranch(this,branch,args,lineNumber,warnings);  } else {    tag.initializeForTemplate(this,template,args,lineNumber,warnings);  }  return tag;}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.AffiliationDescriptorElement createAffiliationDescriptorElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.AffiliationDescriptorElementImpl();}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public void skippedEntity(String name) throws org.xml.sax.SAXException {  if (!m_shouldProcess)   return;  getCurrentProcessor().skippedEntity(this,name);}  }
class C{  public static void flushFromCaches(Class<?> clz){  if (clz == null) {    throw new NullPointerException();  }synchronized (declaredMethodCache) {    ThreadGroupContext.getContext().removeBeanInfo(clz);    declaredMethodCache.put(clz,null);  }}  }
class C{  @AfterClass public void cleanup() throws Exception {  int resultCode=TestCaseUtils.applyModifications(true,"dn: cn=schema","changetype: modify","delete: ditStructureRules","dITStructureRules: ( 22 NAME 'organizationalStructureRule' FORM organizationalNameForm SUP 21 )","dITStructureRules: ( 21 NAME 'domainStructureRule' FORM domainNameForm )","-","delete: nameForms","nameForms: ( domainNameForm-oid NAME 'domainNameForm' OC domain MUST ( dc ) )","nameForms: ( organizationalNameForm-oid NAME 'organizationalNameForm' OC organization MUST ( o ) )");  assertEquals(resultCode,0);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entRef;  Node entElement;  Node createdNode;  int nodeType;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entRef=genderNode.getFirstChild();  nodeType=(int)entRef.getNodeType();  if (equals(1,nodeType)) {    entRef=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entRef);  }  entElement=entRef.getFirstChild();  assertNotNull("entElement",entElement);  createdNode=doc.createElement("text3");{    boolean success=false;    try {      entElement.setPrefix("newPrefix");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  protected boolean hasUncompressedStrip(){  return mStripBytes.size() != 0;}  }
class C{  @Override public synchronized int read() throws IOException {  byte[] localBuf=buf;  InputStream localIn=in;  if (localBuf == null || localIn == null) {    throw streamClosed();  }  if (pos >= count && fillbuf(localIn,localBuf) == -1) {    return -1;  }  if (localBuf != buf) {    localBuf=buf;    if (localBuf == null) {      throw streamClosed();    }  }  if (count - pos > 0) {    return localBuf[pos++] & 0xFF;  }  return -1;}  }
class C{  private static final StringBuilder convertToAbbr(StringBuilder sb,String name){  sb.append(Character.toUpperCase(name.charAt(0)));  sb.append(name.charAt(1)).append(name.charAt(2));  return sb;}  }
class C{  public EntryCacheConfigManager(ServerContext serverContext){  this.serverContext=serverContext;}  }
class C{  public void changedUpdate(DocumentEvent e,Shape a,ViewFactory f){  super.changedUpdate(e,a,f);  StyleSheet sheet=getStyleSheet();  attr=sheet.getViewAttributes(this);  preferenceChanged(null,true,true);}  }
class C{  public void shutdown(){  shutdown.set(true);}  }
class C{  public ShapeTileSimplex(ArrayList<PlaLineInt> p_line_arr){  lines_list=p_line_arr;  Collections.sort(lines_list);}  }
class C{  public String toGnuStepASCIIPropertyList(){  StringBuilder ascii=new StringBuilder();  toASCIIGnuStep(ascii,0);  ascii.append(NEWLINE);  return ascii.toString();}  }
class C{  public static Foo findByField2_Last(boolean field2,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByField2_Last(field2,orderByComparator);}  }
class C{  public ResourceAccessStatement(Element element) throws SAMLException {  if (element == null) {    SAMLUtils.debug.message("ResourceAccessStatement: null input.");    throw new SAMLRequesterException(SAMLUtils.bundle.getString("nullInput"));  }  boolean valid=SAMLUtils.checkStatement(element,"ResourceAccessStatement");  if (!valid) {    SAMLUtils.debug.message("ResourceAccessStatement: Wrong input.");    throw new SAMLRequesterException(SAMLUtils.bundle.getString("wrongInput"));  }  NodeList nodes=element.getChildNodes();  int nodeCount=nodes.getLength();  if (nodeCount > 0) {    for (int i=0; i < nodeCount; i++) {      Node currentNode=nodes.item(i);      if (currentNode.getNodeType() == Node.ELEMENT_NODE) {        String tagName=currentNode.getLocalName();        String tagNS=currentNode.getNamespaceURI();        if ((tagName == null) || tagName.length() == 0 || tagNS == null || tagNS.length() == 0) {          if (SAMLUtils.debug.messageEnabled()) {            SAMLUtils.debug.message("ResourceAccessStatement:" + "The tag name or tag namespace of child" + " element is either null or empty.");          }          throw new SAMLRequesterException(SAMLUtils.bundle.getString("nullInput"));        }        if (tagName.equals("Subject") && tagNS.equals(SAMLConstants.assertionSAMLNameSpaceURI)) {          if (this._subject != null) {            if (SAMLUtils.debug.messageEnabled()) {              SAMLUtils.debug.message("ResourceAccess" + "Statement:should only contain one subject");            }            throw new SAMLRequesterException(SAMLUtils.bundle.getString("oneElement"));          } else {            this._subject=new Subject((Element)currentNode);          }        } else         if (tagName.equals("ResourceID") && tagNS.equals(WSSEConstants.NS_DISCO)) {          if (_resourceID != null || _encryptedResourceID != null) {            if (SAMLUtils.debug.messageEnabled()) {              SAMLUtils.debug.message("ResourceAccess" + "Statement: should at most " + "contain one ResourceIDGroup.");            }            throw new SAMLRequesterException(SAMLUtils.bundle.getString("oneElement"));          }          try {            _resourceID=new ResourceID((Element)currentNode);          } catch (          Exception ex) {            throw new SAMLRequesterException(ex.getMessage());          }        } else         if (tagName.equals("EncryptedResourceID") && tagNS.equals(WSSEConstants.NS_DISCO)) {          if (_resourceID != null || _encryptedResourceID != null) {            if (SAMLUtils.debug.messageEnabled()) {              SAMLUtils.debug.message("ResourceAccess" + "Statement: should at most " + "contain one ResourceIDGroup.");            }            throw new SAMLRequesterException(SAMLUtils.bundle.getString("oneElement"));          }          try {            _encryptedResourceID=new EncryptedResourceID((Element)currentNode);          } catch (          Exception ex) {            throw new SAMLRequesterException(ex.getMessage());          }        } else         if (tagName.equals("ProxySubject") && tagNS.equals(WSSEConstants.NS_SEC)) {          if (_proxySubject != null) {            if (SAMLUtils.debug.messageEnabled()) {              SAMLUtils.debug.message("ResourceAccess" + "Statement: should at most " + "contain one ProxySubject.");            }            throw new SAMLRequesterException(SAMLUtils.bundle.getString("oneElement"));          } else {            _proxySubject=new ProxySubject((Element)currentNode);          }        } else         if (tagName.equals("SessionContext") && tagNS.equals(WSSEConstants.NS_SEC)) {          if (_sessionContext != null) {            if (SAMLUtils.debug.messageEnabled()) {              SAMLUtils.debug.message("ResourceAccess" + "Statement: should at most " + "contain one SessionContext.");            }            throw new SAMLRequesterException(SAMLUtils.bundle.getString("oneElement"));          } else {            _sessionContext=new SessionContext((Element)currentNode);          }        } else {          if (SAMLUtils.debug.messageEnabled()) {            SAMLUtils.debug.message("ResourceAccessStatement:" + "Wrong element " + tagName + "included.");          }          throw new SAMLRequesterException(SAMLUtils.bundle.getString("wrongInput"));        }      }    }  }  if (this._subject == null) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("ResourceAccessStatement should " + "contain one subject.");    }    throw new SAMLRequesterException(SAMLUtils.bundle.getString("missingElement"));  }}  }
class C{  public VimeoParser(@NonNull String url){  this.url=url;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap notations;  DocumentType docType;  Node retval;  Element elem;  doc=(Document)load("hc_staff",true);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);    notations=docType.getNotations();    assertNotNull("notationsNotNull",notations);    elem=doc.createElementNS("http://www.w3.org/1999/xhtml","br");    try {      retval=notations.setNamedItemNS(elem);      fail("throw_HIER_OR_NO_MOD_ERR");    } catch (    DOMException ex) {switch (ex.code) {case 3:        break;case 7:      break;default :    throw ex;}}}}  }
class C{  void processAck(AckMsg ack,ServerHandler ackingServer){  CSN csn=ack.getCSN();  ExpectedAcksInfo expectedAcksInfo=waitingAcks.get(csn);  if (expectedAcksInfo != null) {synchronized (expectedAcksInfo) {      if (expectedAcksInfo.isCompleted()) {        return;      }      if (expectedAcksInfo.processReceivedAck(ackingServer,ack)) {        waitingAcks.remove(csn);        AckMsg finalAck=expectedAcksInfo.createAck(false);        ServerHandler origServer=expectedAcksInfo.getRequesterServer();        try {          origServer.send(finalAck);        } catch (        IOException e) {          LocalizableMessageBuilder mb=new LocalizableMessageBuilder();          mb.append(ERR_RS_ERROR_SENDING_ACK.get(localReplicationServer.getServerId(),origServer.getServerId(),csn,baseDN));          mb.append(" ");          mb.append(stackTraceToSingleLineString(e));          logger.error(mb.toMessage());          stopServer(origServer,false);        }        expectedAcksInfo.completed();      }    }  }}  }
class C{  public org.w3c.dom.Element signXML(org.w3c.dom.Document doc,java.lang.String certAlias,java.lang.String algorithm,java.lang.String transformAlag,java.util.List ids) throws XMLSignatureException {  if (doc == null) {    SAMLUtilsCommon.debug.error("signXML: doc is null.");    throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  if (certAlias == null || certAlias.length() == 0) {    SAMLUtilsCommon.debug.error("signXML: certAlias is null.");    throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  org.w3c.dom.Element root=doc.getDocumentElement();  XMLSignature signature=null;  try {    ElementProxy.setDefaultPrefix(Constants.SignatureSpecNS,SAMLConstants.PREFIX_DS);    PrivateKey privateKey=(PrivateKey)keystore.getPrivateKey(certAlias);    if (privateKey == null) {      SAMLUtilsCommon.debug.error("private key is null");      throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullprivatekey"));    }    if (algorithm == null || algorithm.length() == 0) {      algorithm=getKeyAlgorithm(privateKey);    }    if (!isValidAlgorithm(algorithm)) {      throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("invalidalgorithm"));    }    signature=new XMLSignature(doc,"",algorithm,Canonicalizer.ALGO_ID_C14N_EXCL_OMIT_COMMENTS);    root.appendChild(signature.getElement());    int size=ids.size();    for (int i=0; i < size; ++i) {      Transforms transforms=new Transforms(doc);      if (transformAlag != null) {        transforms.addTransform(transformAlag);      }      transforms.addTransform(Transforms.TRANSFORM_C14N_EXCL_OMIT_COMMENTS);      String id=(String)ids.get(i);      if (SAMLUtilsCommon.debug.messageEnabled()) {        SAMLUtilsCommon.debug.message("id = " + id);      }      signature.addDocument("#" + id,transforms,digestAlg);    }    X509Certificate cert=(X509Certificate)keystore.getX509Certificate(certAlias);    signature.addKeyInfo(cert);    signature.sign(privateKey);  } catch (  Exception e) {    SAMLUtilsCommon.debug.error("signXML Exception: ",e);    throw new XMLSignatureException(e.getMessage());  }  return (signature.getElement());}  }
class C{  public java.lang.String toString(){  return toString(true,false);}  }
class C{  protected PropertyChangeListener createActionChangeListener(JMenuItem b){  return b.createActionPropertyChangeListener0(b.getAction());}  }
class C{  void emitInvoke(Name name){  assert (!isLinkerMethodInvoke(name));  if (true) {    MethodHandle target=name.function.resolvedHandle;    assert (target != null) : name.exprString();    mv.visitLdcInsn(constantPlaceholder(target));    emitReferenceCast(MethodHandle.class,target);  } else {    emitAloadInsn(0);    emitReferenceCast(MethodHandle.class,null);    mv.visitFieldInsn(Opcodes.GETFIELD,MH,"form",LF_SIG);    mv.visitFieldInsn(Opcodes.GETFIELD,LF,"names",LFN_SIG);  }  emitPushArguments(name);  MethodType type=name.function.methodType();  mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,MH,"invokeBasic",type.basicType().toMethodDescriptorString(),false);}  }
class C{  public void test_EnabledProtocols() throws IOException {  SSLSocket ssl=getSSLSocket();  try {    ssl.setEnabledProtocols(null);    fail();  } catch (  IllegalArgumentException expected) {  }  ssl.setEnabledProtocols(new String[]{});  try {    ssl.setEnabledProtocols(new String[]{"blubb"});    fail();  } catch (  IllegalArgumentException expected) {  }  ssl.setEnabledProtocols(ssl.getEnabledProtocols());  String[] res=ssl.getEnabledProtocols();  assertEquals("no enabled protocols set",ssl.getEnabledProtocols().length,res.length);  ssl.close();}  }
class C{  public static boolean unequal(final String first,final String second){  return !Objects.equals(first,second);}  }
class C{  public void incrementTotalDeletes(){  totalDeletes++;  totalRequests++;}  }
class C{  public byte[] encodeAsBytes(String transport){  byte[] slbytes=null;  if (statusLine != null) {    try {      slbytes=statusLine.encode().getBytes("UTF-8");    } catch (    UnsupportedEncodingException ex) {      InternalErrorHandler.handleException(ex);    }  }  byte[] superbytes=super.encodeAsBytes(transport);  byte[] retval=new byte[slbytes.length + superbytes.length];  System.arraycopy(slbytes,0,retval,0,slbytes.length);  System.arraycopy(superbytes,0,retval,slbytes.length,superbytes.length);  return retval;}  }
