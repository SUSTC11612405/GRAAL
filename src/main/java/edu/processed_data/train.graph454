class C{  private Drawable createShape(int backgroundColor,int strokeColor){  GradientDrawable shape=new GradientDrawable();  shape.setColor(backgroundColor);  final float[] radiusArray=new float[8];  Arrays.fill(radiusArray,radius);  if (radiusTopLeft >= 0) {    radiusArray[0]=radiusTopLeft;    radiusArray[1]=radiusTopLeft;  }  if (radiusTopRight >= 0) {    radiusArray[2]=radiusTopRight;    radiusArray[3]=radiusTopRight;  }  if (radiusBottomRight >= 0) {    radiusArray[4]=radiusBottomRight;    radiusArray[5]=radiusBottomRight;  }  if (radiusBottomLeft >= 0) {    radiusArray[6]=radiusBottomLeft;    radiusArray[7]=radiusBottomLeft;  }  shape.setCornerRadii(radiusArray);  shape.setStroke(stroke,strokeColor);  return shape;}  }
class C{  public static FactoryService createFactory(){  return TaskFactoryService.create(ExampleTaskService.class,ServiceOption.IDEMPOTENT_POST,ServiceOption.INSTRUMENTATION);}  }
class C{  public static int ELOOP(){  return Errno.ELOOP.intValue();}  }
class C{  public boolean stopped(){  return state == State.STOPPED;}  }
class C{  @SuppressWarnings("unchecked") protected TypeToken(){  this.type=getSuperclassTypeParameter(getClass());  this.rawType=(Class<? super T>)$Gson$Types.getRawType(type);  this.hashCode=type.hashCode();}  }
class C{  private void initWheel(int id){  WheelView wheel=getWheel(id);  wheel.setViewAdapter(new SlotMachineAdapter(this));  wheel.setCurrentItem((int)(Math.random() * 10));  wheel.addChangingListener(changedListener);  wheel.addScrollingListener(scrolledListener);  wheel.setCyclic(true);  wheel.setEnabled(false);}  }
class C{  public static int staticNextInt(double mean){synchronized (shared) {    shared.setMean(mean);    return shared.nextInt();  }}  }
class C{  private static boolean hasNoRequiredParameters(Functional model){  List<ParameterList> parameterLists=model.getParameterLists();  if (parameterLists == null || parameterLists.size() != 1)   return false;  ParameterList parameterList=parameterLists.get(0);  if (parameterList == null)   return false;  List<Parameter> parameters=parameterList.getParameters();  if (parameters == null)   return false;  if (parameters.isEmpty())   return true;  return parameters.get(0).isDefaulted();}  }
class C{  public BabyDragon(final RPObject object,final Player owner){  super(object,owner);  setRPClass("baby_dragon");  put("type","baby_dragon");  update();}  }
class C{  public static double pchisq(double x){  double xh=Math.sqrt(x);  return pnorm(xh) - pnorm(-xh);}  }
class C{  public void beginTask(String name,int totalWork){}  }
class C{  protected int indexFirstOf(final char[] s,final char delim,int offset){  if (s == null || s.length == 0) {    return -1;  }  if (offset < 0) {    offset=0;  } else   if (offset > s.length) {    return -1;  }  for (int i=offset; i < s.length; i++) {    if (s[i] == delim) {      return i;    }  }  return -1;}  }
class C{  protected static void doLogin() throws Exception {  System.out.println("BaseServiceTest ::  Executing doLogin with user : admin, password : admin.");  CloseableHttpResponse loginResponse=null;  try {    BasicCookieStore cookieStore=new BasicCookieStore();    httpclient=HttpClients.custom().setDefaultCookieStore(cookieStore).build();    HttpUriRequest login=RequestBuilder.post().setUri(new URI(LOGIN_URL)).addParameter("j_username","admin").addParameter("j_password","admin").build();    loginResponse=httpclient.execute(login);    try {      HttpEntity entity=loginResponse.getEntity();      EntityUtils.consume(entity);      System.out.println("BaseServiceTest :: HTTP request status : " + loginResponse.getStatusLine());      List<Cookie> cookies=cookieStore.getCookies();      if (cookies.isEmpty()) {      } else {        for (int i=0; i < cookies.size(); i++) {        }      }    }  finally {      if (loginResponse != null)       loginResponse.close();    }  } catch (  Exception failed) {    logException(failed);    throw failed;  }  System.out.println("BaseServiceTest ::  Executed doLogin");}  }
class C{  public void flush(MpegEncContext s){  s.flush_dpb();}  }
class C{  public static double hypot(double x,double y){  if (USE_JDK_MATH) {    return STRICT_MATH ? StrictMath.hypot(x,y) : Math.hypot(x,y);  }  x=Math.abs(x);  y=Math.abs(y);  if (y < x) {    double a=x;    x=y;    y=a;  } else   if (!(y >= x)) {    if ((x == Double.POSITIVE_INFINITY) || (y == Double.POSITIVE_INFINITY)) {      return Double.POSITIVE_INFINITY;    } else {      return Double.NaN;    }  }  if (y - x == y) {    return y;  } else {    double factor;    if (x > TWO_POW_450) {      x*=TWO_POW_N750;      y*=TWO_POW_N750;      factor=TWO_POW_750;    } else     if (y < TWO_POW_N450) {      x*=TWO_POW_750;      y*=TWO_POW_750;      factor=TWO_POW_N750;    } else {      factor=1.0;    }    return factor * FastMath.sqrt(x * x + y * y);  }}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof JobMediaSheetsSupported);}  }
class C{  public void testFindUsersOpenLdap() throws Exception {  LdapManager mgr=getLdapOpenLdap();  List ret=null;  AndFilter filter=new AndFilter();  filter.and(new LikeFilter(mgr.getUsersReturningAttribute(LdapUserAttributeConstants.LDAP_USER_ATTRIBUTE_GIVEN_NAME),"*a*"));  try {    LdapSearchManagerVO searchMgrVO=new LdapSearchManagerVO();    searchMgrVO.setFilter(filter);    searchMgrVO.setAddUserClasses(true);    ret=mgr.findUsers(searchMgrVO);  } catch (  Exception e) {  }  assertEquals(3,ret.size());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:37.789 -0500",hash_original_method="9E3D2B1FB08CF1797AC579D62B860551",hash_generated_method="F8DE0D2F60DE4172922B582382B2C7B7") public static long fieldsToDay(int year,int month,int dom){  int y=year - 1;  long julian=365 * y + floorDivide(y,4) + (JULIAN_1_CE - 3) + floorDivide(y,400) - floorDivide(y,100) + 2 + DAYS_BEFORE[month + (isLeapYear(year) ? 12 : 0)] + dom;  return julian - JULIAN_1970_CE;}  }
class C{  private LexicalOrderImpl(int fromIndex){  this.fromIndex=fromIndex;}  }
class C{  public SuffixArraySample sample(final int[] sourceQuery,int maxSamples){  return sample(sourceQuery,maxSamples,0,-1);}  }
class C{  public boolean requiresTunnel(){  return route.address.sslSocketFactory != null && route.proxy.type() == Proxy.Type.HTTP;}  }
class C{  public static byte[] generateSHA1HashAndBase64Encode(File file) throws IOException {  try {    MessageDigest messageDigest=MessageDigest.getInstance("SHA1");    FileInputStream fileInputStream=new FileInputStream(file);    byte[] bytes=new byte[1024];    int bytesRead=0;    while ((bytesRead=fileInputStream.read(bytes)) != -1) {      messageDigest.update(bytes,0,bytesRead);    }    byte[] digest=messageDigest.digest();    byte[] base64EncodedDigest=Base64.getEncoder().encodeToString(digest).getBytes("UTF-8");    fileInputStream.close();    return base64EncodedDigest;  } catch (  NoSuchAlgorithmException|FileNotFoundException e) {    throw new IMFException(e);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public AuthenticationProviderConfigurer(SAMLAuthenticationProvider provider){  authenticationProvider=provider;}  }
class C{  private void processCreatedMiscFileAgain(int level,Comparator<String> comparator,int nextFileNumber) throws IOException {  File folder=getOutputFolder(level);  File misc=new File(folder,"99999999");  if (!misc.exists()) {    return;  }  FrequencyDistribution<String> letterFD=createFreqDistForMiscFile(misc);  float oldThreshold=splitThreshold;  splitThreshold/=10;  Web1TFileSplitter splitter=new Web1TFileSplitter(misc,folder,"UTF-8",letterFD,splitThreshold,nextFileNumber);  splitter.split();  List<File> splittedFiles=splitter.getFiles();  Web1TFileSorter sorter=new Web1TFileSorter(splittedFiles,comparator);  sorter.sort();  List<File> sortedFiles=splitter.getFiles();  splitThreshold=oldThreshold;  misc.delete();  Web1TFileConsolidator consolidator=new Web1TFileConsolidator(sortedFiles,comparator,outputEncoding,minFrequency);  consolidator.consolidate();  LinkedList<File> consolidatedFiles=consolidator.getConsolidatedFiles();  for (  File file : consolidatedFiles) {    String name=Web1TUtil.cutOffUnderscoredSuffixFromFileName(file);    file.renameTo(new File(name));  }  splitter.cleanUp();  sorter.cleanUp();  consolidator.cleanUp();}  }
class C{  @Override public void process(final DM dm,final ReplyProcessor21 rp){  final long startTime=getTimestamp();  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"InvalidateReplyMessage process invoking reply processor with processorId:{}",this.processorId);  }  if (rp == null) {    if (logger.isTraceEnabled(LogMarker.DM)) {      logger.trace(LogMarker.DM,"InvalidateReplyMessage processor not found");    }    return;  }  if (this.versionTag != null) {    this.versionTag.replaceNullIDs(getSender());  }  if (rp instanceof InvalidateResponse) {    InvalidateResponse processor=(InvalidateResponse)rp;    processor.setResponse(this.versionTag);  }  rp.process(this);  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"{} processed {}",rp,this);  }  dm.getStats().incReplyMessageTime(NanoTimer.getTime() - startTime);}  }
class C{  public MatcherBuilder<T> only(){  builder.only();  return this;}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  public void deletePickupRS(){  int old=_pickupRS;  _pickupRS--;  setDirtyAndFirePropertyChange("locationDeletePickupRS",Integer.toString(old),Integer.toString(_pickupRS));}  }
class C{  public static boolean isAbsoluteOrRelativeUrl(String value){  return RELATIVE_URL_VALIDATOR.isValid(value);}  }
class C{  public void elementEnded(String name,String systemId,int lineNr){}  }
class C{  public static int toIntValue(Object decoded){  return new BigInteger((byte[])decoded).intValue();}  }
class C{  public static int calculateAlpha(int alpha,int originalColor){  int originalAlpha=Color.alpha(originalColor);  return originalAlpha * alpha / 255;}  }
class C{  public CNativeCallgraphViewsNodeComponent(final JTree projectTree,final INaviModule module,final IViewContainer container){  super(new CNativeCallgraphViewsTable(projectTree,module,container),null,null);  updateBorderText("Native Callgraph");}  }
class C{  public RectangleRDD(JavaRDD<Envelope> rawRectangleRDD){  this.setRawRectangleRDD(rawRectangleRDD);}  }
class C{  public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<K,V>(map);}  }
class C{  public SVGFeFuncGElementBridge(){}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=(operation == null) ? 0 : operation.hashCode();  result+=prime * ((text == null) ? 0 : text.hashCode());  return result;}  }
class C{  private static AdvancingFrontNode pointEvent(DTSweepContext tcx,TriangulationPoint point){  AdvancingFrontNode node, newNode;  node=tcx.locateNode(point);  if (tcx.isDebugEnabled()) {    tcx.getDebugContext().setActiveNode(node);  }  newNode=newFrontTriangle(tcx,point,node);  if (point.getX() <= node.point.getX() + EPSILON) {    fill(tcx,node);  }  tcx.addNode(newNode);  fillAdvancingFront(tcx,newNode);  return newNode;}  }
class C{  public void add(RegularTimePeriod period,BigDecimal vwapPrice){  if (!this.isEmpty()) {    VwapItem item0=(VwapItem)this.getDataItem(0);    if (!period.getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(new VwapItem(period,vwapPrice),true);}  }
class C{  public void connect(String dstName,int dstPort) throws UnknownHostException, IOException {  if (DBG)   log("connect(dstName, dstPort, timeout) EX");}  }
class C{  public boolean draw(Canvas canvas){  update();  final float centerX=mBounds.centerX();  final float centerY=mBounds.height() - mRadius;  canvas.scale(1.f,Math.min(mGlowScaleY,1.f) * mBaseGlowScale,centerX,0);  final float displacement=Math.max(0,Math.min(mDisplacement,1.f)) - 0.5f;  float translateX=mBounds.width() * displacement / 2;  mPaint.setAlpha((int)(0xff * mGlowAlpha));  canvas.drawCircle(centerX + translateX,centerY,mRadius,mPaint);  boolean oneLastFrame=false;  if (mState == STATE_RECEDE && mGlowScaleY == 0) {    mState=STATE_IDLE;    oneLastFrame=true;  }  return mState != STATE_IDLE || oneLastFrame;}  }
class C{  public void deleteMemberFromGroup(String groupId,String memberName) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  delete(new URL(baseDomainUrl + groupId + "/member/"+ memberName));}  }
class C{  public void postTweet(int userId,int tweetId){  if (followMap.get(userId) == null) {    Map<Integer,Integer> map=new HashMap<Integer,Integer>();    map.put(userId,1);    followMap.put(userId,map);  }  tweetList.add(tweetId);  userList.add(userId);}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public void delete(int start,int end,boolean notify){  if (end < start) {    throw new IllegalArgumentException("Requires start <= end.");  }  for (int i=0; i <= (end - start); i++) {    this.data.remove(start);  }  updateMinMaxYByIteration();  if (this.data.isEmpty()) {    this.timePeriodClass=null;  }  if (notify) {    fireSeriesChanged();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public <T>Builder addTypeConverter(Type clazz,TypeConverter<T> converterForClass){  config.typeConverters.add(clazz,converterForClass);  return this;}  }
class C{  void withGroup(Node node,boolean visualItems,Consumer cb){  Consumer callback;  if (visualItems) {    callback=null;  } else {    callback=cb;  }  Node proxy=getProxy(node);  callback.accept(proxy);  if (groups.containsKey(proxy)) {    groups.get(proxy).forEach(callback);  }}  }
class C{  public Rational(long numerator,long denominator){  long gcd=gcd(numerator,denominator);  r[0]=((denominator > 0) ? 1 : -1) * numerator / gcd;  r[1]=Math.abs(denominator) / gcd;}  }
class C{  private void processRecord(SignatureLibraryRelease release,String accession,String name,String description){  if (accession != null) {    Model model=new Model(name,description,null,null);    if (signatures.containsKey(accession)) {      Signature signature=signatures.get(accession);      signature.addModel(model);    } else {      Signature signature=new Signature(accession,description,null,null,null,release,new HashSet<Model>());      signature.addModel(model);      signatures.put(accession,signature);    }  }}  }
class C{  public void testBug77449() throws Exception {  if (!versionMeetsMinimum(5,6,4)) {    return;  }  Timestamp originalTs=new Timestamp(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").parse("2014-12-31 23:59:59.999").getTime());  Timestamp roundedTs=new Timestamp(originalTs.getTime() + 1);  Timestamp truncatedTs=new Timestamp(originalTs.getTime() - 999);  assertEquals("2014-12-31 23:59:59.999",originalTs.toString());  assertEquals("2014-12-31 23:59:59.0",TimeUtil.truncateFractionalSeconds(originalTs).toString());  createTable("testBug77449","(id INT PRIMARY KEY, ts_short TIMESTAMP, ts_long TIMESTAMP(6) DEFAULT CURRENT_TIMESTAMP(6))");  createProcedure("testBug77449","(ts_short TIMESTAMP, ts_long TIMESTAMP(6)) BEGIN SELECT ts_short, ts_long; END");  for (int tst=0; tst < 8; tst++) {    boolean useLegacyDatetimeCode=(tst & 0x1) != 0;    boolean useServerPrepStmts=(tst & 0x2) != 0;    boolean sendFractionalSeconds=(tst & 0x4) != 0;    String testCase=String.format("Case: %d [ %s | %s | %s ]",tst,useLegacyDatetimeCode ? "useLegDTCode" : "-",useServerPrepStmts ? "useSSPS" : "-",sendFractionalSeconds ? "sendFracSecs" : "-");    Properties props=new Properties();    props.setProperty("statementInterceptors",TestBug77449StatementInterceptor.class.getName());    props.setProperty("useLegacyDatetimeCode",Boolean.toString(useLegacyDatetimeCode));    props.setProperty("useServerPrepStmts",Boolean.toString(useServerPrepStmts));    props.setProperty("sendFractionalSeconds",Boolean.toString(sendFractionalSeconds));    Connection testConn=getConnectionWithProps(props);    Statement testStmt=testConn.createStatement();    testStmt.executeUpdate("INSERT INTO testBug77449 VALUES (1, '2014-12-31 23:59:59.999', '2014-12-31 23:59:59.999')/* no_ts_trunk */");    testStmt.close();    PreparedStatement testPStmt=testConn.prepareStatement("INSERT INTO testBug77449 VALUES (2, ?, ?)");    testPStmt.setTimestamp(1,originalTs);    testPStmt.setTimestamp(2,originalTs);    assertEquals(testCase,1,testPStmt.executeUpdate());    testPStmt.close();    testStmt=testConn.createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE);    testStmt.executeUpdate("INSERT INTO testBug77449 VALUES (3, NOW(), NOW())/* no_ts_trunk */");    this.rs=testStmt.executeQuery("SELECT * FROM testBug77449 WHERE id = 3");    assertTrue(testCase,this.rs.next());    this.rs.updateTimestamp("ts_short",originalTs);    this.rs.updateTimestamp("ts_long",originalTs);    this.rs.updateRow();    this.rs.moveToInsertRow();    this.rs.updateInt("id",4);    this.rs.updateTimestamp("ts_short",originalTs);    this.rs.updateTimestamp("ts_long",originalTs);    this.rs.insertRow();    this.rs=this.stmt.executeQuery("SELECT * FROM testBug77449 WHERE id = 1");    assertTrue(testCase,this.rs.next());    assertEquals(testCase,1,this.rs.getInt(1));    assertEquals(testCase,roundedTs,this.rs.getTimestamp(2));    assertEquals(testCase,originalTs,this.rs.getTimestamp(3));    this.rs=testStmt.executeQuery("SELECT * FROM testBug77449 WHERE id >= 2");    for (int i=2; i <= 4; i++) {      assertTrue(testCase,this.rs.next());      assertEquals(testCase,i,this.rs.getInt(1));      assertEquals(testCase,sendFractionalSeconds ? roundedTs : truncatedTs,this.rs.getTimestamp(2));      assertEquals(testCase,sendFractionalSeconds ? originalTs : truncatedTs,this.rs.getTimestamp(3));    }    this.stmt.execute("DELETE FROM testBug77449");    testPStmt=testConn.prepareStatement("SELECT ? = ?");    testPStmt.setTimestamp(1,originalTs);    testPStmt.setTimestamp(2,truncatedTs);    this.rs=testPStmt.executeQuery();    assertTrue(testCase,this.rs.next());    if (sendFractionalSeconds) {      assertFalse(testCase,this.rs.getBoolean(1));    } else {      assertTrue(testCase,this.rs.getBoolean(1));    }    testPStmt.close();    CallableStatement cstmt=testConn.prepareCall("{call testBug77449(?, ?)}");    cstmt.setTimestamp("ts_short",originalTs);    cstmt.setTimestamp("ts_long",originalTs);    cstmt.execute();    this.rs=cstmt.getResultSet();    assertTrue(testCase,this.rs.next());    assertEquals(testCase,sendFractionalSeconds ? roundedTs : truncatedTs,this.rs.getTimestamp(1));    assertEquals(testCase,sendFractionalSeconds ? originalTs : truncatedTs,this.rs.getTimestamp(2));    testConn.close();  }}  }
class C{  public void drawLine(Canvas canvas,LineSet set){  float minY=this.getInnerChartBottom();  Path path=new Path();  Path bgPath=new Path();  int begin=set.getBegin();  int end=set.getEnd();  float x;  float y;  for (int i=begin; i < end; i++) {    x=set.getEntry(i).getX();    y=set.getEntry(i).getY();    if (y < minY)     minY=y;    if (i == begin) {      path.moveTo(x,y);      bgPath.moveTo(x,y);    } else {      path.lineTo(x,y);      bgPath.lineTo(x,y);    }  }  if (set.hasFill() || set.hasGradientFill())   drawBackground(canvas,bgPath,set,minY);  canvas.drawPath(path,mStyle.mLinePaint);}  }
class C{  private String processButtonCallout(VButton button){  GridField field=m_curTab.getField(button.getColumnName());  return m_curTab.processCallout(field);}  }
class C{  public S2CellId prevWrap(){  S2CellId p=prev();  if (p.id < WRAP_OFFSET) {    return p;  }  return new S2CellId(p.id + WRAP_OFFSET);}  }
class C{  public void playTogether(Animator... items){  if (items != null) {    mNeedsSort=true;    Builder builder=play(items[0]);    for (int i=1; i < items.length; ++i) {      builder.with(items[i]);    }  }}  }
class C{  public void expandAcronymAsync(View v){  final String acronym=Utils.uppercaseInput(this,mEditText.getText().toString().trim(),true);  if (acronym != null) {    Log.d(TAG,"calling expandAcronymAsync() for " + acronym);    if (getOps().expandAcronymAsync(acronym) == false)     Utils.showToast(this,"Call already in progress");    mEditText.requestFocus();    mEditText.selectAll();  }}  }
class C{  void encodeFromArray(byte[] data,int offset,int len) throws IOException {  byte a, b, c;  if (len == 0)   return;  if (atomLen != 0) {switch (atomLen) {case 1:      atom[1]=data[offset++];    len--;  atomLen++;if (len == 0) return;atom[2]=data[offset++];len--;atomLen++;break;case 2:atom[2]=data[offset++];len--;atomLen++;break;default :}encodeAtom();}while (len >= 3) {a=data[offset++];b=data[offset++];c=data[offset++];encodeBuf[0]=pem_array[((a >>> 2) & 0x3F)];encodeBuf[1]=pem_array[(((a << 4) & 0x30) | ((b >>> 4) & 0x0F))];encodeBuf[2]=pem_array[(((b << 2) & 0x3C) | ((c >>> 6) & 0x03))];encodeBuf[3]=pem_array[c & 0x3F];out.write(encodeBuf);lineLen+=4;if (lineLen == 64) {out.println();lineLen=0;}len-=3;}switch (len) {case 1:atom[0]=data[offset];break;case 2:atom[0]=data[offset];atom[1]=data[offset + 1];break;default :}atomLen=len;}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  private CPluginLoader(){}  }
class C{  public void push(final V value) throws IndexOutOfBoundsException {  if (top + locals >= values.length) {    throw new IndexOutOfBoundsException("Insufficient maximum stack size.");  }  values[top++ + locals]=value;}  }
class C{  public static <T1,T2,T3,T4,R>TriFunction<T2,T3,T4,R> partial4(final T1 t1,final QuadFunction<T1,T2,T3,T4,R> quadFunc){  return null;}  }
class C{  public void onStop(GruntProcess gruntProcess,GruntRunnerConfiguration gruntRunnerConfiguration){  if (gruntRunnerConfiguration != null) {    portService.release(gruntRunnerConfiguration.getHttpPort());    portService.release(gruntRunnerConfiguration.getLiveReloadPort());    RunRequest runRequest=gruntRunnerConfiguration.getRequest();    String projectName=runRequest.getProject();    String workspace=runRequest.getWorkspace();    projectEventService.removeListener(workspace,projectName,gruntProcess);  }}  }
class C{  public void testGetNormalizedName(){  assertEquals("Content-Type",SpellCheckedMetadata.getNormalizedName("Content-Type"));  assertEquals("Content-Type",SpellCheckedMetadata.getNormalizedName("ContentType"));  assertEquals("Content-Type",SpellCheckedMetadata.getNormalizedName("Content-type"));  assertEquals("Content-Type",SpellCheckedMetadata.getNormalizedName("contenttype"));  assertEquals("Content-Type",SpellCheckedMetadata.getNormalizedName("contentype"));  assertEquals("Content-Type",SpellCheckedMetadata.getNormalizedName("contntype"));}  }
class C{  public static double sumOfSquaredDeviations(int size,double variance){  return variance * (size - 1);}  }
class C{  public boolean isUncertain(){  return (value & SEVERITY_MASK) == SEVERITY_UNCERTAIN;}  }
class C{  public boolean dump_pag(){  return soot.PhaseOptions.getBoolean(options,"dump-pag");}  }
class C{  public int addVertex(double lat,double lon){  return addVertexFixed(floatingDegreesToFixed(lat),floatingDegreesToFixed(lon));}  }
class C{  public static double calculateFeet(double meters){  double feet=meters * 3.281;  return feet;}  }
class C{  private void ensureInstalled() throws Exception {  if (!isInstalled()) {    install();  }}  }
class C{  private void postProcessEdgeDeletion(EdgeChange edgeChange){  Set<Diff> requiredOutgoingTransitionDeletions=new HashSet<Diff>();  for (  Diff requireds : edgeChange.getRequiredBy()) {    if (requireds instanceof ReferenceChange) {      ReferenceChange requiredRefChange=(ReferenceChange)requireds;      if (requiredRefChange.getReference() == SGraphPackage.Literals.VERTEX__OUTGOING_TRANSITIONS && requiredRefChange.getKind() == DifferenceKind.DELETE) {        requiredOutgoingTransitionDeletions.add(requiredRefChange);      }    }  }  edgeChange.getRequires().addAll(requiredOutgoingTransitionDeletions);}  }
class C{  private static void logVersionWarnings(String label1,String version1,String label2,String version2){  if (version1 == null) {    if (version2 != null) {      warning(null,"Unknown version"," for {}, version for {} is '{}'",new Object[]{label1,label2,version2});    }  } else {    if (version2 == null) {      warning(null,"Unknown version"," for {}, version for {} is '{}'",new Object[]{label2,label1,version1});    } else     if (!version1.equals(version2)) {      warning(null,"Mismatched versions",": {} is '{}', while {} is '{}'",new Object[]{label1,version1,label2,version2});    }  }}  }
class C{  @Override protected Set<Class<? extends Annotation>> createSupportedTypeQualifiers(){  AnnotationClassLoader loader=new AnnotationClassLoader(checker);  Set<Class<? extends Annotation>> qualSet=new LinkedHashSet<Class<? extends Annotation>>();  String qualNames=checker.getOption("quals");  String qualDirectories=checker.getOption("qualDirs");  if (qualNames != null) {    for (    String qualName : qualNames.split(",")) {      qualSet.add(loader.loadExternalAnnotationClass(qualName));    }  }  if (qualDirectories != null) {    for (    String dirName : qualDirectories.split(":")) {      qualSet.addAll(loader.loadExternalAnnotationClassesFromDirectory(dirName));    }  }  qualSet.add(FenumTop.class);  qualSet.add(Fenum.class);  qualSet.add(FenumUnqualified.class);  qualSet.add(FenumBottom.class);  qualSet.add(PolyFenum.class);  qualSet.addAll(getBundledTypeQualifiersWithPolyAll());  return qualSet;}  }
class C{  public ValidateQueryRequest(String... indices){  super(indices);  indicesOptions(IndicesOptions.fromOptions(false,false,true,false));}  }
class C{  public InlineQueryResultMpeg4Gif.InlineQueryResultMpeg4GifBuilder caption(String caption){  this.caption=caption;  return this;}  }
class C{  public ManagedArray(final Class<? extends T> elementClass,final int initialCapacity){  if (elementClass == null)   throw new IllegalArgumentException();  this.elementClass=elementClass;  this.buf=newArray(assertNonNegative("initialCapacity",initialCapacity));}  }
class C{  private PerformanceVector count(ExampleSet exampleSet,PerformanceVector performanceCriteria) throws OperatorException {  if (performanceCriteria == null) {    performanceCriteria=new PerformanceVector();  }  MDLCriterion mdlCriterion=new MDLCriterion(getParameterAsInt(PARAMETER_OPTIMIZATION_DIRECTION));  mdlCriterion.startCounting(exampleSet,true);  this.lastCount=mdlCriterion.getAverage();  performanceCriteria.addCriterion(mdlCriterion);  return performanceCriteria;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void updateInsertModeText(boolean insert){  if (isDisposed() || insertMode.isDisposed())   return;  insertMode.setText(insert ? TEXT_INSERT : TEXT_OVERWRITE);}  }
class C{  public TestCase(String name){  fName=name;}  }
class C{  public MBeanAttributeInfo(String name,String type,String description,boolean isReadable,boolean isWritable,boolean isIs,Descriptor descriptor){  super(name,description,descriptor);  this.attributeType=type;  this.isRead=isReadable;  this.isWrite=isWritable;  if (isIs && !isReadable) {    throw new IllegalArgumentException("Cannot have an \"is\" getter " + "for a non-readable attribute");  }  if (isIs && !type.equals("java.lang.Boolean") && !type.equals("boolean")) {    throw new IllegalArgumentException("Cannot have an \"is\" getter " + "for a non-boolean attribute");  }  this.is=isIs;}  }
class C{  public boolean showFullscreenSites(){  return mContentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_FULLSCREEN;}  }
class C{  protected PluginSpecification specifyPlugin(String prefix,String name) throws ReplicatorException {  String pluginPrefix=prefix + "." + name.trim();  String rawClassName=properties.getString(pluginPrefix);  if (rawClassName == null)   throw new ReplicatorException("Plugin class name property is missing or null:  key=" + pluginPrefix);  String pluginClassName=rawClassName.trim();  if (logger.isDebugEnabled())   logger.debug("Loading plugin: key=" + pluginPrefix + " class name="+ pluginClassName);  TungstenProperties pluginProperties=properties.subset(pluginPrefix + ".",true);  if (logger.isDebugEnabled())   logger.debug("Plugin properties: " + pluginProperties.toString());  Class<?> pluginClass;  try {    pluginClass=PluginLoader.loadClass(pluginClassName);  } catch (  PluginException e) {    throw new ReplicatorException("Unable to instantiate plugin class: key=" + pluginPrefix + " class name="+ pluginClassName,e);  }  return new PluginSpecification(pluginPrefix,name,pluginClass,pluginProperties);}  }
class C{  protected void putAction(KeyStroke keyStroke,KeyboardCallback keyboardCallback){synchronized (actions) {    if (!actions.containsKey(keyStroke)) {      actions.put(keyStroke,new HashSet<>());    }synchronized (actions.get(keyStroke)) {      actions.get(keyStroke).add(keyboardCallback);    }  }}  }
class C{  public boolean removeTransactionPendingAck(SIPServerTransaction serverTransaction){  String branchId=((SIPRequest)serverTransaction.getRequest()).getTopmostVia().getBranch();  if (branchId != null && this.terminatedServerTransactionsPendingAck.containsKey(branchId)) {    this.terminatedServerTransactionsPendingAck.remove(branchId);    return true;  } else {    return false;  }}  }
class C{  public Map map(){  if (mapBuilder == null) {    throw new JoinerException("No map items pushed");  }  Map outputMap=mapBuilder.buildMapStructure();  mapBuilder=null;  return outputMap;}  }
class C{  public ImplicitClient registerImplicitClient(URI loginRedirectURI,URI logoutRedirectURI) throws AuthException {  try {    OIDCTokens tokens=tokenHandler.getAdminServerAccessToken(user,password);    OIDCClientDTO oidcClientDTO=registerClient(loginRedirectURI,loginRedirectURI,logoutRedirectURI);    ClientID clientID=new ClientID(oidcClientDTO.getClientId());    URI loginURI=buildAuthenticationRequestURI(clientID,loginRedirectURI);    URI logoutURI=buildLogoutRequestURI(clientID,tokens.getClientIDToken(),logoutRedirectURI);    return new ImplicitClient(oidcClientDTO.getClientId(),loginURI.toString(),logoutURI.toString());  } catch (  Exception e) {    throw new AuthException(String.format("Failed to register implicit client with loginRedirectURI %s and " + "logoutRedirectURI %s ",loginRedirectURI,logoutRedirectURI),e);  }}  }
class C{  public void release(){  int n=refCount.decrementAndGet();  if (n == 0) {    tracingInfo=null;    pool.checkin(this);  }  assert n >= 0 : String.format("Message is over-released: type=%d from=%d",getType(),getFromMemberId());}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public void test_ticket_1007_number3() throws Exception {  new TestHelper("ticket-1007-number3","ticket-1007-number3.rq","ticket-1007-custom.trig","ticket-1007-number-integer.srx",false).runTest();}  }
class C{  protected SimpleWizardInfo(String title,String[] steps,String[] descriptions,WizardPanelProvider provider){  if (steps == null)   throw new NullPointerException("Null steps");  if (descriptions == null)   throw new NullPointerException("Null descriptions");  this.steps=steps;  this.descriptions=descriptions;  if (new HashSet(Arrays.asList(steps)).size() < steps.length)   throw new IllegalArgumentException("Duplicate ID: " + Arrays.asList(steps));  if (descriptions.length != steps.length)   if (steps.length != descriptions.length + 1 && !WizardImplementation.UNDETERMINED_STEP.equals(steps[steps.length - 1]))   throw new IllegalArgumentException("Steps and descriptions " + "array lengths not equal: " + Arrays.asList(steps) + ":"+ Arrays.asList(descriptions));  navModeByPanel=new int[steps.length];  Arrays.fill(navModeByPanel,-1);  this.title=title;  this.provider=provider;}  }
class C{  public Vehicles createVehicles(TransitSchedule pTransitSchedule){  Vehicles vehicles=VehicleUtils.createVehiclesContainer();  VehiclesFactory vehFactory=vehicles.getFactory();  VehicleType vehType=vehFactory.createVehicleType(Id.create(this.pConfig.getPIdentifier(),VehicleType.class));  VehicleCapacity capacity=new VehicleCapacityImpl();  capacity.setSeats(this.pConfig.getPaxPerVehicle() + 1);  capacity.setStandingRoom(0);  vehType.setCapacity(capacity);  vehType.setPcuEquivalents(this.pConfig.getPassengerCarEquivalents());  vehType.setMaximumVelocity(this.pConfig.getVehicleMaximumVelocity());  vehType.setAccessTime(this.pConfig.getDelayPerBoardingPassenger());  vehType.setEgressTime(this.pConfig.getDelayPerAlightingPassenger());  vehType.setDoorOperationMode(this.pConfig.getDoorOperationMode());  vehicles.addVehicleType(vehType);  for (  TransitLine line : pTransitSchedule.getTransitLines().values()) {    for (    TransitRoute route : line.getRoutes().values()) {      for (      Departure departure : route.getDepartures().values()) {        if (!vehicles.getVehicles().keySet().contains(departure.getVehicleId())) {          Vehicle vehicle=vehFactory.createVehicle(departure.getVehicleId(),vehType);          vehicles.addVehicle(vehicle);        }      }    }  }  return vehicles;}  }
class C{  public void respond(Response response){  if (response == null)   throw new NullPointerException();  if (locationPath != null)   response.getOptions().setLocationPath(locationPath);  if (locationQuery != null)   response.getOptions().setLocationQuery(locationQuery);  if (maxAge != 60)   response.getOptions().setMaxAge(maxAge);  if (eTag != null) {    response.getOptions().clearETags();    response.getOptions().addETag(eTag);  }  resource.checkObserveRelation(exchange,response);  exchange.sendResponse(response);}  }
class C{  public void testFileIsFetchedFromLocal() throws Throwable {  boolean thrown=false;  try {    AssetManager assetManager=mainActivity.getResources().getAssets();    assetManager.open("data/raw_data/data_phantom.csv");  } catch (  FileNotFoundException e) {    thrown=true;    e.printStackTrace();  }  assertFalse(thrown);}  }
class C{  public static Typeface robotoThin(Context context){  sRobotoThin=getFontFromRes(R.raw.roboto_thin,context);  return sRobotoThin;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter an integer: ");  int number=input.nextInt();  System.out.println(number + (isPalindrome(number) ? " is " : " is not ") + "a palindrome.");}  }
class C{  public boolean equals(CoordinateDD o){  return northSouth == o.northSouth && eastWest == o.eastWest;}  }
class C{  public static Writable filterLine(Path self,String charset,@ClosureParams(value=SimpleType.class,options="java.lang.String") Closure closure) throws IOException {  return IOGroovyMethods.filterLine(newReader(self,charset),closure);}  }
class C{  public DataParseException(String message){  super(message);}  }
class C{  Values values(Thread current){  return current.localValues;}  }
class C{  public static boolean isBlank(String str){  int strLen;  if (str != null && (strLen=str.length()) != 0) {    for (int i=0; i < strLen; i++) {      if (!Character.isWhitespace(str.charAt(i))) {        return false;      }    }  }  return true;}  }
class C{  public int read(char[] buf,int offset,int length) throws IOException {  for (int i=0; i < length; i++) {    int ch=is.read();    if (ch < 0)     return i > 0 ? i : -1; else {      buf[offset + i]=(char)ch;    }  }  return length;}  }
class C{  Queue(){  elements=new int[DEFAULT_CAPACITY];}  }
class C{  public void removeAll(){  m_nodes.clear();  m_lines.clear();}  }
class C{  public static final boolean isProperIP(final String ipString){  if (ipString == null)   return false;  if (ipString.length() < 3)   return false;  if (Switchboard.getSwitchboard().isAllIPMode())   return true;  final boolean islocal=Domains.isLocal(ipString,null);  return islocal == Switchboard.getSwitchboard().isIntranetMode();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:33.879 -0500",hash_original_method="B18DC4486E3B23A71F43236C6D4E20D9",hash_generated_method="A3602EF00600F3986C8AAF7BA25206BA") public void scheduleSyncOperation(SyncOperation syncOperation){  boolean queueChanged;synchronized (mSyncQueue) {    queueChanged=mSyncQueue.add(syncOperation);  }  if (queueChanged) {    if (Log.isLoggable(TAG,Log.VERBOSE)) {      Log.v(TAG,"scheduleSyncOperation: enqueued " + syncOperation);    }    sendCheckAlarmsMessage();  } else {    if (Log.isLoggable(TAG,Log.VERBOSE)) {      Log.v(TAG,"scheduleSyncOperation: dropping duplicate sync operation " + syncOperation);    }  }}  }
class C{  public boolean importData(JComponent comp,Transferable t){  JTextComponent c=(JTextComponent)comp;  withinSameComponent=c == exportComp;  if (withinSameComponent && c.getCaretPosition() >= p0 && c.getCaretPosition() <= p1) {    shouldRemove=false;    return true;  }  boolean imported=false;  DataFlavor importFlavor=getImportFlavor(t.getTransferDataFlavors(),c);  if (importFlavor != null) {    try {      InputContext ic=c.getInputContext();      if (ic != null)       ic.endComposition();      Reader r=importFlavor.getReaderForText(t);      handleReaderImport(r,c);      imported=true;    } catch (    UnsupportedFlavorException ufe) {      ufe.printStackTrace();    }catch (    BadLocationException ble) {      ble.printStackTrace();    }catch (    IOException ioe) {      ioe.printStackTrace();    }  }  return imported;}  }
class C{  public static double nm(double radians){  return Length.NM.fromRadians(radians);}  }
class C{  public ThrowingInsn(Rop opcode,SourcePosition position,RegisterSpecList sources,TypeList catches){  super(opcode,position,null,sources);  if (opcode.getBranchingness() != Rop.BRANCH_THROW) {    throw new IllegalArgumentException("bogus branchingness");  }  if (catches == null) {    throw new NullPointerException("catches == null");  }  this.catches=catches;}  }
class C{  @Override public void baselineEmitLoadTIB(MachineRegister dest,MachineRegister object){  Offset tibOffset=JavaHeader.getTibOffset();  emitLAddrOffset((GPR)dest,(GPR)object,tibOffset);}  }
class C{  private void rightMultByVector(MatrixBlock vector,MatrixBlock result) throws DMLRuntimeException {  result.allocateDenseBlock();  for (  ColGroup grp : _colGroups)   if (grp instanceof ColGroupUncompressed)   grp.rightMultByVector(vector,result,0,result.getNumRows());  for (  ColGroup grp : _colGroups)   if (!(grp instanceof ColGroupUncompressed))   grp.rightMultByVector(vector,result,0,result.getNumRows());  result.recomputeNonZeros();}  }
class C{  public void testCarRouting(){  TrainManager tmanager=TrainManager.instance();  RouteManager rmanager=RouteManager.instance();  LocationManager lmanager=LocationManager.instance();  Router router=Router.instance();  CarManager cmanager=CarManager.instance();  CarTypes ct=CarTypes.instance();  ct.addName("Boxcar");  ct.addName("Caboose");  ct.addName("Flat");  Location Acton=lmanager.newLocation("Acton MA");  Assert.assertEquals("Location 1 Name","Acton MA",Acton.getName());  Assert.assertEquals("Location 1 Initial Length",0,Acton.getLength());  Track AS1=Acton.addTrack("Acton Siding 1",Track.SPUR);  AS1.setLength(300);  Assert.assertEquals("Location AS1 Name","Acton Siding 1",AS1.getName());  Assert.assertEquals("Location AS1 Length",300,AS1.getLength());  Track AS2=Acton.addTrack("Acton Siding 2",Track.SPUR);  AS2.setLength(300);  Assert.assertEquals("Location AS2 Name","Acton Siding 2",AS2.getName());  Assert.assertEquals("Location AS2 Length",300,AS2.getLength());  Track AY=Acton.addTrack("Acton Yard",Track.YARD);  AY.setLength(400);  Assert.assertEquals("Location AY Name","Acton Yard",AY.getName());  Assert.assertEquals("Location AY Length",400,AY.getLength());  Track AI=Acton.addTrack("Acton Interchange",Track.INTERCHANGE);  AI.setLength(500);  Assert.assertEquals("Track AI Name","Acton Interchange",AI.getName());  Assert.assertEquals("Track AI Length",500,AI.getLength());  Assert.assertEquals("Track AI Train Directions",DIRECTION_ALL,AI.getTrainDirections());  Track AI2=Acton.addTrack("Acton Interchange 2",Track.INTERCHANGE);  AI2.setLength(500);  AI2.setMoves(100);  Assert.assertEquals("Track AI2 Name","Acton Interchange 2",AI2.getName());  Assert.assertEquals("Track AI2 Length",500,AI2.getLength());  Assert.assertEquals("Track AI2 Train Directions",DIRECTION_ALL,AI2.getTrainDirections());  Location Bedford=lmanager.newLocation("Bedford MA");  Assert.assertEquals("Location 1 Name","Bedford MA",Bedford.getName());  Assert.assertEquals("Location 1 Initial Length",0,Bedford.getLength());  Track BS1=Bedford.addTrack("Bedford Siding 1",Track.SPUR);  BS1.setLength(300);  Assert.assertEquals("Location BS1 Name","Bedford Siding 1",BS1.getName());  Assert.assertEquals("Location BS1 Length",300,BS1.getLength());  Track BS2=Bedford.addTrack("Bedford Siding 2",Track.SPUR);  BS2.setLength(300);  Assert.assertEquals("Location BS2 Name","Bedford Siding 2",BS2.getName());  Assert.assertEquals("Location BS2 Length",300,BS2.getLength());  Track BY=Bedford.addTrack("Bedford Yard",Track.YARD);  BY.setLength(400);  Assert.assertEquals("Location BY Name","Bedford Yard",BY.getName());  Assert.assertEquals("Location BY Length",400,BY.getLength());  Track BI=Bedford.addTrack("Bedford Interchange",Track.INTERCHANGE);  BI.setLength(500);  Assert.assertEquals("Track BI Name","Bedford Interchange",BI.getName());  Assert.assertEquals("Track BI Length",500,BI.getLength());  Location Clinton=lmanager.newLocation("Clinton MA");  Assert.assertEquals("Location 1 Name","Clinton MA",Clinton.getName());  Assert.assertEquals("Location 1 Initial Length",0,Clinton.getLength());  Track CS1=Clinton.addTrack("Clinton Siding 1",Track.SPUR);  CS1.setLength(300);  Assert.assertEquals("Location CS1 Name","Clinton Siding 1",CS1.getName());  Assert.assertEquals("Location CS1 Length",300,CS1.getLength());  Track CS2=Clinton.addTrack("Clinton Siding 2",Track.SPUR);  CS2.setLength(300);  Assert.assertEquals("Location CS2 Name","Clinton Siding 2",CS2.getName());  Assert.assertEquals("Location CS2 Length",300,BS2.getLength());  Track CY=Clinton.addTrack("Clinton Yard",Track.YARD);  CY.setLength(400);  Assert.assertEquals("Location CY Name","Clinton Yard",CY.getName());  Assert.assertEquals("Location CY Length",400,CY.getLength());  Track CI=Clinton.addTrack("Clinton Interchange",Track.INTERCHANGE);  CI.setLength(500);  Assert.assertEquals("Track CI Name","Clinton Interchange",CI.getName());  Assert.assertEquals("Track CI Length",500,CI.getLength());  Location Danbury=lmanager.newLocation("Danbury MA");  Track DS1=Danbury.addTrack("Danbury Siding 1",Track.SPUR);  DS1.setLength(300);  Track DS2=Danbury.addTrack("Danbury Siding 2",Track.SPUR);  DS2.setLength(300);  Track DY=Danbury.addTrack("Danbury Yard",Track.YARD);  DY.setLength(400);  Track DI=Danbury.addTrack("Danbury Interchange",Track.INTERCHANGE);  DI.setLength(500);  Location Essex=lmanager.newLocation("Essex MA");  Track ES1=Essex.addTrack("Essex Siding 1",Track.SPUR);  ES1.setLength(300);  Track ES2=Essex.addTrack("Essex Siding 2",Track.SPUR);  ES2.setLength(300);  Track EY=Essex.addTrack("Essex Yard",Track.YARD);  EY.setLength(400);  Track EI=Essex.addTrack("Essex Interchange",Track.INTERCHANGE);  EI.setLength(500);  Location Foxboro=lmanager.newLocation("Foxboro MA");  Track FS1=Foxboro.addTrack("Foxboro Siding 1",Track.SPUR);  FS1.setLength(300);  Track FS2=Foxboro.addTrack("Foxboro Siding 2",Track.SPUR);  FS2.setLength(300);  Track FY=Foxboro.addTrack("Foxboro Yard",Track.YARD);  FY.setLength(400);  Track FI=Foxboro.addTrack("Foxboro Interchange",Track.INTERCHANGE);  FI.setLength(500);  Car c3=cmanager.newCar("BA","3");  c3.setTypeName("Boxcar");  c3.setLength("40");  c3.setOwner("DAB");  c3.setBuilt("1984");  Assert.assertEquals("Box Car 3 Length","40",c3.getLength());  Car c4=cmanager.newCar("BB","4");  c4.setTypeName("Flat");  c4.setLength("40");  c4.setOwner("AT");  c4.setBuilt("1-86");  Assert.assertEquals("Box Car 4 Length","40",c4.getLength());  Assert.assertEquals("place car at BI",Track.OKAY,c3.setLocation(Acton,AS1));  Assert.assertFalse("Try routing no final destination",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  Assert.assertEquals("place car at Acton",Track.OKAY,c4.setLocation(Acton,AS1));  Assert.assertFalse("Try routing no final destination",router.setDestination(c4,null,null));  Assert.assertEquals("Check car's destination","",c4.getDestinationName());  Setup.setCarRoutingEnabled(false);  c3.setFinalDestination(Bedford);  Assert.assertFalse("Test router disabled",router.setDestination(c3,null,null));  Assert.assertEquals("Router status",Router.STATUS_ROUTER_DISABLED,router.getStatus());  Setup.setCarRoutingEnabled(true);  c3.setFinalDestination(Acton);  Assert.assertFalse("Try routing final destination equal to current",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  Assert.assertEquals("Router status",Router.STATUS_CAR_AT_DESINATION,router.getStatus());  c3.setFinalDestination(Acton);  c3.setFinalDestinationTrack(AS2);  Assert.assertFalse("Try routing final track not equal to current",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  Assert.assertEquals("Router status",Router.STATUS_NOT_ABLE,router.getStatus());  c3.setFinalDestination(Acton);  c3.setFinalDestinationTrack(AS1);  Assert.assertFalse("Try routing final track equal to current",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  Assert.assertEquals("Router status",Router.STATUS_CAR_AT_DESINATION,router.getStatus());  Train ActonTrain=tmanager.newTrain("Acton Local");  Route routeA=rmanager.newRoute("A");  RouteLocation rlA=routeA.addLocation(Acton);  rlA.setTrainIconX(25);  rlA.setTrainIconY(250);  ActonTrain.setRoute(routeA);  c3.setFinalDestination(Acton);  c3.setFinalDestinationTrack(AS2);  Assert.assertTrue("Try routing final track with Acton Local",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","Acton Siding 2",c3.getDestinationTrackName());  Assert.assertEquals("Router status",Track.OKAY,router.getStatus());  c3.setDestination(null,null);  c3.setFinalDestination(Acton);  c3.setFinalDestinationTrack(AS2);  Assert.assertTrue("Try routing final track with Acton Local",router.setDestination(c3,ActonTrain,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","Acton Siding 2",c3.getDestinationTrackName());  Assert.assertEquals("Router status",Track.OKAY,router.getStatus());  AS2.setLength(c3.getTotalLength() - 1);  c3.setDestination(null,null);  c3.setFinalDestination(Acton);  c3.setFinalDestinationTrack(AS2);  Assert.assertTrue("Try routing final track with Acton Local",router.setDestination(c3,ActonTrain,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","",c3.getDestinationTrackName());  Assert.assertTrue("Should report that the issue was track length",router.getStatus().startsWith(Track.CAPACITY));  AS2.setLength(300);  ActonTrain.deleteTypeName("Boxcar");  c3.setDestination(null,null);  c3.setFinalDestination(Acton);  c3.setFinalDestinationTrack(AS2);  Assert.assertFalse("Try routing with train that doesn't service Boxcar",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  Assert.assertEquals("Router status",Router.STATUS_NOT_ABLE,router.getStatus());  c4.setDestination(null,null);  c4.setFinalDestination(Acton);  c4.setFinalDestinationTrack(AS2);  Assert.assertTrue("Try routing with train that service Flat",router.setDestination(c4,null,null));  Assert.assertEquals("Check car's destination","Acton MA",c4.getDestinationName());  Assert.assertEquals("Router status",Track.OKAY,router.getStatus());  ActonTrain.addTypeName("Boxcar");  Assert.assertTrue("Try routing with train that does service Boxcar",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  Assert.assertEquals("Router status",Track.OKAY,router.getStatus());  ActonTrain.addRoadName("BA");  ActonTrain.setRoadOption(Train.EXCLUDE_ROADS);  c3.setDestination(null,null);  c3.setFinalDestination(Acton);  c3.setFinalDestinationTrack(AS2);  Assert.assertFalse("Try routing with train that doesn't service road name BA",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  Assert.assertEquals("Router status",Router.STATUS_NOT_ABLE,router.getStatus());  c4.setDestination(null,null);  c4.setFinalDestination(Acton);  c4.setFinalDestinationTrack(AS2);  Assert.assertTrue("Try routing with train that services road BB",router.setDestination(c4,null,null));  Assert.assertEquals("Check car's destination","Acton MA",c4.getDestinationName());  Assert.assertEquals("Router status",Track.OKAY,router.getStatus());  ActonTrain.setRoadOption(Train.ALL_ROADS);  Assert.assertTrue("Try routing with train that does service road name BA",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  Assert.assertEquals("Router status",Track.OKAY,router.getStatus());  ActonTrain.setBuiltStartYear("1985");  ActonTrain.setBuiltEndYear("2010");  c3.setDestination(null,null);  c3.setFinalDestination(Acton);  c3.setFinalDestinationTrack(AS2);  Assert.assertFalse("Try routing with train that doesn't service car built before 1985",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  Assert.assertEquals("Router status",Router.STATUS_NOT_ABLE,router.getStatus());  c4.setDestination(null,null);  c4.setFinalDestination(Acton);  c4.setFinalDestinationTrack(AS2);  Assert.assertTrue("Try routing with train that services car built after 1985",router.setDestination(c4,null,null));  Assert.assertEquals("Check car's destination","Acton MA",c4.getDestinationName());  Assert.assertEquals("Router status",Track.OKAY,router.getStatus());  ActonTrain.setBuiltStartYear("1983");  Assert.assertTrue("Try routing with train that doesn't service car built before 1983",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  Assert.assertEquals("Router status",Track.OKAY,router.getStatus());  c3.setLoadName("Tools");  ActonTrain.addLoadName("Tools");  ActonTrain.setLoadOption(Train.EXCLUDE_LOADS);  c3.setDestination(null,null);  c3.setFinalDestination(Acton);  c3.setFinalDestinationTrack(AS2);  Assert.assertFalse("Try routing with train that doesn't service load Tools",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  Assert.assertEquals("Router status",Router.STATUS_NOT_ABLE,router.getStatus());  c4.setDestination(null,null);  c4.setFinalDestination(Acton);  c4.setFinalDestinationTrack(AS2);  Assert.assertTrue("Try routing with train that services load E",router.setDestination(c4,null,null));  Assert.assertEquals("Check car's destination","Acton MA",c4.getDestinationName());  ActonTrain.setLoadOption(Train.ALL_LOADS);  Assert.assertTrue("Try routing with train that that does service load Tools",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  rlA.setPickUpAllowed(false);  c3.setDestination(null,null);  c3.setFinalDestination(Acton);  c3.setFinalDestinationTrack(AS2);  Assert.assertFalse("Try routing with train that doesn't pickup cars",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  Assert.assertEquals("Router status",Router.STATUS_NOT_ABLE,router.getStatus());  rlA.setPickUpAllowed(true);  Assert.assertTrue("Try routing with train that that can pickup cars",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  rlA.setDropAllowed(false);  c3.setDestination(null,null);  c3.setFinalDestination(Acton);  c3.setFinalDestinationTrack(AS2);  Assert.assertFalse("Try routing with train that doesn't drop cars",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  Assert.assertEquals("Router status",Router.STATUS_NOT_ABLE,router.getStatus());  rlA.setDropAllowed(true);  Assert.assertTrue("Try routing with train that that can drop cars",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  rlA.setMaxCarMoves(0);  c3.setDestination(null,null);  c3.setFinalDestination(Acton);  c3.setFinalDestinationTrack(AS2);  Assert.assertFalse("Try routing with train that doesn't service location",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  Assert.assertEquals("Router status",Router.STATUS_NOT_ABLE,router.getStatus());  rlA.setMaxCarMoves(10);  Assert.assertTrue("Try routing with train that does service location",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  Assert.assertEquals("check default direction",Track.NORTH,rlA.getTrainDirection());  Acton.setTrainDirections(Track.SOUTH);  c3.setDestination(null,null);  c3.setFinalDestination(Acton);  c3.setFinalDestinationTrack(AS2);  Assert.assertTrue("Try routing with local train that departs north, location south",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  Acton.setTrainDirections(Track.NORTH);  c3.setDestination(null,null);  c3.setFinalDestination(Acton);  c3.setFinalDestinationTrack(AS2);  Assert.assertTrue("Try routing with local train that departs north, location north",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  AS1.setTrainDirections(0);  c3.setDestination(null,null);  c3.setFinalDestination(Acton);  c3.setFinalDestinationTrack(AS2);  Assert.assertTrue("Try routing with local only",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  c3.setDestination(null,null);  c3.setFinalDestination(Acton);  c3.setFinalDestinationTrack(AS2);  AS1.setTrainDirections(Track.NORTH);  Assert.assertTrue("Try routing with local train that departs north, track north",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  AS2.setTrainDirections(0);  c3.setDestination(null,null);  c3.setFinalDestination(Acton);  c3.setFinalDestinationTrack(AS2);  Assert.assertTrue("Try routing with local train",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  AS2.setTrainDirections(Track.NORTH);  c3.setDestination(null,null);  c3.setFinalDestination(Acton);  c3.setFinalDestinationTrack(AS2);  Assert.assertTrue("Try routing with train that departs north, track north",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  Route routeA2=rmanager.newRoute("A2");  RouteLocation rlA2=routeA2.addLocation(Acton);  rlA2.setTrainIconX(25);  rlA2.setTrainIconY(250);  Train ActonTrain2=tmanager.newTrain("Acton Local 2");  ActonTrain2.setRoute(routeA2);  c3.setDestination(null,null);  c3.setFinalDestination(Acton);  c3.setFinalDestinationTrack(AS2);  Assert.assertTrue("Try routing final track with Acton Local",router.setDestination(c3,ActonTrain2,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","Acton Siding 2",c3.getDestinationTrackName());  ActonTrain2.deleteTypeName("Boxcar");  c3.setDestination(null,null);  c3.setFinalDestination(Acton);  c3.setFinalDestinationTrack(AS2);  Assert.assertTrue("Try routing with train that doesn't service Boxcar",router.setDestination(c3,ActonTrain2,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  Assert.assertEquals("Router status",Router.STATUS_NOT_THIS_TRAIN,router.getStatus());  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  c3.setFinalDestinationTrack(null);  Assert.assertFalse("Try routing with final destination",router.setDestination(c3,null,null));  Train ActonToBedfordTrain=tmanager.newTrain("Acton to Bedford");  Route routeAB=rmanager.newRoute("AB");  RouteLocation rlActon=routeAB.addLocation(Acton);  RouteLocation rlBedford=routeAB.addLocation(Bedford);  rlBedford.setTrainIconX(100);  rlBedford.setTrainIconY(250);  ActonToBedfordTrain.setRoute(routeAB);  Assert.assertTrue("Try routing with final destination and train",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Bedford MA",c3.getDestinationName());  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  c3.setFinalDestinationTrack(null);  Assert.assertTrue("Try routing with final destination and train",router.setDestination(c3,ActonToBedfordTrain,null));  Assert.assertEquals("Check car's destination","Bedford MA",c3.getDestinationName());  ActonToBedfordTrain.deleteTypeName("Boxcar");  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  Assert.assertFalse("Try routing with train that doesn't service Boxcar",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  Assert.assertEquals("Router status",Router.STATUS_NOT_ABLE,router.getStatus());  c4.setDestination(null,null);  c4.setFinalDestination(Bedford);  c4.setFinalDestinationTrack(null);  Assert.assertTrue("Try routing with train that service Flat",router.setDestination(c4,null,null));  Assert.assertEquals("Check car's destination","Bedford MA",c4.getDestinationName());  ActonToBedfordTrain.addTypeName("Boxcar");  Assert.assertTrue("Try routing with train that does service Boxcar",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Bedford MA",c3.getDestinationName());  ActonToBedfordTrain.addRoadName("BA");  ActonToBedfordTrain.setRoadOption(Train.EXCLUDE_ROADS);  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  Assert.assertFalse("Try routing with train that doesn't service road name BA",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  Assert.assertEquals("Router status",Router.STATUS_NOT_ABLE,router.getStatus());  c4.setDestination(null,null);  c4.setFinalDestination(Bedford);  Assert.assertTrue("Try routing with train that services road BB",router.setDestination(c4,null,null));  Assert.assertEquals("Check car's destination","Bedford MA",c4.getDestinationName());  ActonToBedfordTrain.setRoadOption(Train.ALL_ROADS);  Assert.assertTrue("Try routing with train that does service road name BA",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Bedford MA",c3.getDestinationName());  ActonToBedfordTrain.setBuiltStartYear("1985");  ActonToBedfordTrain.setBuiltEndYear("2010");  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  Assert.assertFalse("Try routing with train that doesn't service car built before 1985",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  c4.setDestination(null,null);  c4.setFinalDestination(Bedford);  Assert.assertTrue("Try routing with train that services car built after 1985",router.setDestination(c4,null,null));  Assert.assertEquals("Check car's destination","Bedford MA",c4.getDestinationName());  ActonToBedfordTrain.setBuiltStartYear("1983");  Assert.assertTrue("Try routing with train that doesn't service car built before 1983",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Bedford MA",c3.getDestinationName());  c3.setLoadName("Tools");  ActonToBedfordTrain.addLoadName("Tools");  ActonToBedfordTrain.setLoadOption(Train.EXCLUDE_LOADS);  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  Assert.assertFalse("Try routing with train that doesn't service load Tools",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  c4.setDestination(null,null);  c4.setFinalDestination(Bedford);  Assert.assertTrue("Try routing with train that services load E",router.setDestination(c4,null,null));  Assert.assertEquals("Check car's destination","Bedford MA",c4.getDestinationName());  ActonToBedfordTrain.setLoadOption(Train.ALL_LOADS);  Assert.assertTrue("Try routing with train that that does service load Tools",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Bedford MA",c3.getDestinationName());  c4.setDestination(null,null);  c4.setFinalDestination(Bedford);  Bedford.deleteTypeName("Flat");  Assert.assertFalse("Try routing with Bedford that does not service Flat",router.setDestination(c4,null,null));  Assert.assertEquals("Check car's destination","",c4.getDestinationName());  Assert.assertTrue("Router status",router.getStatus().startsWith(Track.TYPE));  Bedford.addTypeName("Flat");  rlActon.setPickUpAllowed(false);  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  Assert.assertFalse("Try routing with train that doesn't pickup cars",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  rlActon.setPickUpAllowed(true);  Assert.assertTrue("Try routing with train that that can pickup cars",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Bedford MA",c3.getDestinationName());  rlBedford.setDropAllowed(false);  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  Assert.assertFalse("Try routing with train that doesn't drop cars",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  rlBedford.setDropAllowed(true);  Assert.assertTrue("Try routing with train that that can drop cars",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Bedford MA",c3.getDestinationName());  rlBedford.setMaxCarMoves(0);  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  Assert.assertFalse("Try routing with train that doesn't service destination",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  rlBedford.setMaxCarMoves(5);  Assert.assertTrue("Try routing with train that does service destination",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Bedford MA",c3.getDestinationName());  rlActon.setMaxCarMoves(0);  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  Assert.assertFalse("Try routing with train that doesn't service location",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  rlActon.setMaxCarMoves(5);  Assert.assertTrue("Try routing with train that does service location",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Bedford MA",c3.getDestinationName());  Assert.assertEquals("check default direction",Track.NORTH,rlActon.getTrainDirection());  Acton.setTrainDirections(Track.SOUTH);  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  ActonTrain.deleteTypeName("Boxcar");  Assert.assertFalse("Try routing with train that departs north, location south",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  Acton.setTrainDirections(Track.NORTH);  Assert.assertTrue("Try routing with train that departs north, location north",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Bedford MA",c3.getDestinationName());  AS1.setTrainDirections(Track.SOUTH);  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  Assert.assertFalse("Try routing with train that departs north, track south",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  AS1.setTrainDirections(Track.NORTH);  Assert.assertTrue("Try routing with train that departs north, track north",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Bedford MA",c3.getDestinationName());  Bedford.setTrainDirections(Track.SOUTH);  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  Assert.assertFalse("Try routing with train that arrives north, destination south",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  Bedford.setTrainDirections(Track.NORTH);  Assert.assertTrue("Try routing with train that arrives north, destination north",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Bedford MA",c3.getDestinationName());  BS1.setTrainDirections(Track.SOUTH);  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  Assert.assertTrue("Try routing with train that arrives north, but no final track",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Bedford MA",c3.getDestinationName());  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  c3.setFinalDestinationTrack(BS1);  Assert.assertFalse("Try routing with train that arrives north, now with track",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  BS1.setTrainDirections(Track.NORTH);  Assert.assertTrue("Try routing with train that departs north, track north",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Bedford MA",c3.getDestinationName());  Setup.setOnlyActiveTrainsEnabled(true);  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  Assert.assertTrue("Try routing only active trains",router.setDestination(c3,null,null));  ActonToBedfordTrain.setBuildEnabled(false);  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  Assert.assertFalse("Try routing only active trains, Action to Beford deselected",router.setDestination(c3,null,null));  Assert.assertEquals("Router status",Router.STATUS_NOT_ABLE,router.getStatus());  Setup.setOnlyActiveTrainsEnabled(false);  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  Assert.assertTrue("Try routing, only active trains deselected",router.setDestination(c3,null,null));  BS1.setLength(c3.getTotalLength());  Assert.assertEquals("Use up all of the space for BS1",Track.OKAY,c4.setLocation(Bedford,BS1));  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  c3.setFinalDestinationTrack(BS1);  Assert.assertTrue("Test search for yard",router.setDestination(c3,null,null));  Assert.assertEquals("Destination","Bedford MA",c3.getDestinationName());  Assert.assertEquals("Destination track should be yard","Bedford Yard",c3.getDestinationTrackName());  Assert.assertTrue("Should be reporting length issue",router.getStatus().startsWith(Track.LENGTH));  BY.setTrackType(Track.SPUR);  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  c3.setFinalDestinationTrack(BS1);  Assert.assertTrue("Test search for yard that doesn't exist",router.setDestination(c3,null,null));  Assert.assertEquals("Destination","",c3.getDestinationName());  Assert.assertTrue("Should be reporting length issue",router.getStatus().startsWith(Track.LENGTH));  BY.setTrackType(Track.YARD);  BS1.setAlternateTrack(BS2);  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  c3.setFinalDestinationTrack(BS1);  Assert.assertTrue("Test use alternate",router.setDestination(c3,null,null));  Assert.assertEquals("Destination","Bedford MA",c3.getDestinationName());  Assert.assertEquals("Destination track should be siding","Bedford Siding 2",c3.getDestinationTrackName());  Assert.assertTrue("Should be reporting length issue",router.getStatus().startsWith(Track.LENGTH));  BS1.setLength(300);  BS1.setAlternateTrack(null);  AS1.setTrainDirections(0);  ActonTrain.addTypeName("Boxcar");  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  c3.setFinalDestinationTrack(BS1);  Assert.assertTrue("Try routing two trains via interchange",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","Acton Interchange",c3.getDestinationTrackName());  AI.setDropOption(Track.TRAINS);  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  c3.setFinalDestinationTrack(BS1);  Assert.assertTrue("Try routing two trains via interchange",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","Acton Interchange 2",c3.getDestinationTrackName());  AI2.setDropOption(Track.TRAINS);  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  c3.setFinalDestinationTrack(BS1);  Assert.assertTrue("Try routing two trains via yard",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","Acton Yard",c3.getDestinationTrackName());  AI.setDropOption(Track.ANY);  AI2.setDropOption(Track.ANY);  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  c3.setFinalDestinationTrack(BS1);  ActonTrain2.addTypeName("Boxcar");  Assert.assertTrue("Try routing two trains",router.setDestination(c3,ActonTrain2,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","Acton Interchange",c3.getDestinationTrackName());  AI.setLength(c3.getTotalLength() - 1);  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  c3.setFinalDestinationTrack(BS1);  Assert.assertTrue("Try routing two trains to interchange track 2",router.setDestination(c3,ActonTrain2,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","Acton Interchange 2",c3.getDestinationTrackName());  Assert.assertEquals("Router status",Track.OKAY,router.getStatus());  AI2.setLength(c3.getTotalLength() - 1);  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  c3.setFinalDestinationTrack(BS1);  Assert.assertTrue("Try routing two trains to yard track",router.setDestination(c3,ActonTrain2,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","Acton Yard",c3.getDestinationTrackName());  Setup.setCarRoutingViaYardsEnabled(false);  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  c3.setFinalDestinationTrack(BS1);  router.setDestination(c3,ActonTrain2,null);  Assert.assertFalse("Try routing two trains to yard track",router.setDestination(c3,ActonTrain2,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","",c3.getDestinationTrackName());  AI.setLength(500);  AI2.setLength(500);  Setup.setCarRoutingViaYardsEnabled(true);  ActonTrain2.addRoadName("BA");  ActonTrain2.setRoadOption(Train.EXCLUDE_ROADS);  c3.setDestination(null,null);  c3.setFinalDestination(Bedford);  c3.setFinalDestinationTrack(BS1);  Assert.assertTrue("Try routing two trains via yard",router.setDestination(c3,ActonTrain2,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","",c3.getDestinationTrackName());  c3.setDestination(null,null);  c3.setFinalDestination(Clinton);  c3.setFinalDestinationTrack(null);  Assert.assertFalse("Try routing with final destination",router.setDestination(c3,null,null));  Train BedfordToClintonTrain=tmanager.newTrain("Bedford to Clinton");  Route routeBC=rmanager.newRoute("BC");  routeBC.addLocation(Bedford);  RouteLocation rlchelmsford=routeBC.addLocation(Clinton);  rlchelmsford.setTrainIconX(175);  rlchelmsford.setTrainIconY(250);  BedfordToClintonTrain.setRoute(routeBC);  Assert.assertTrue("Try routing with final destination and train",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","Acton Interchange",c3.getDestinationTrackName());  ActonTrain2.setRoadOption(Train.ALL_ROADS);  c3.setDestination(null,null);  c3.setFinalDestination(Clinton);  Assert.assertTrue("Try routing three trains",router.setDestination(c3,ActonTrain2,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","Acton Interchange",c3.getDestinationTrackName());  c3.setDestination(null,null);  c3.setFinalDestination(Clinton);  AI.setLength(c3.getTotalLength() - 1);  c3.setDestination(null,null);  c3.setFinalDestination(Clinton);  Assert.assertTrue("Try routing three trains to interchange track 2",router.setDestination(c3,ActonTrain2,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","Acton Interchange 2",c3.getDestinationTrackName());  AI2.setLength(c3.getTotalLength() - 1);  c3.setDestination(null,null);  c3.setFinalDestination(Clinton);  Assert.assertTrue("Try routing three trains to yard track",router.setDestination(c3,ActonTrain2,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","Acton Yard",c3.getDestinationTrackName());  Setup.setCarRoutingViaYardsEnabled(false);  c3.setDestination(null,null);  c3.setFinalDestination(Clinton);  Assert.assertFalse("Try routing three trains to yard track, option disabled",router.setDestination(c3,ActonTrain2,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","",c3.getDestinationTrackName());  AI.setLength(c3.getTotalLength());  Assert.assertEquals("c4 consumes all of the interchange track",Track.OKAY,c4.setLocation(AI.getLocation(),AI));  Assert.assertTrue("Try routing three trains to yard track, option disabled",router.setDestination(c3,ActonTrain2,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","",c3.getDestinationTrackName());  AI.setLength(500);  AI2.setLength(500);  Setup.setCarRoutingViaYardsEnabled(true);  c3.setDestination(null,null);  c3.setFinalDestination(Clinton);  ActonTrain2.setBuiltStartYear("1985");  ActonTrain2.setBuiltEndYear("2010");  Assert.assertTrue("Try routing three trains",router.setDestination(c3,ActonTrain2,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","",c3.getDestinationTrackName());  ActonTrain2.setBuiltStartYear("1983");  c3.setDestination(null,null);  c3.setFinalDestination(Danbury);  Assert.assertFalse("Try routing with final destination",router.setDestination(c3,null,null));  Train ClintonToDanburyTrain=tmanager.newTrain("Clinton to Danbury");  Route routeCD=rmanager.newRoute("CD");  routeCD.addLocation(Clinton);  RouteLocation rlDanbury=routeCD.addLocation(Danbury);  rlDanbury.setTrainIconX(250);  rlDanbury.setTrainIconY(250);  ClintonToDanburyTrain.setRoute(routeCD);  Assert.assertTrue("Try routing with final destination and train",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","Acton Interchange",c3.getDestinationTrackName());  c3.setDestination(null,null);  c3.setFinalDestination(Danbury);  Assert.assertTrue("Try routing four trains",router.setDestination(c3,ActonTrain2,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","Acton Interchange",c3.getDestinationTrackName());  c3.setDestination(null,null);  c3.setFinalDestination(Danbury);  ActonTrain2.addLoadName("Tools");  ActonTrain2.setLoadOption(Train.EXCLUDE_LOADS);  Assert.assertTrue("Try routing four trains",router.setDestination(c3,ActonTrain2,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","",c3.getDestinationTrackName());  ActonTrain2.setLoadOption(Train.ALL_LOADS);  c3.setDestination(null,null);  c3.setFinalDestination(Essex);  Assert.assertFalse("Try routing with final destination",router.setDestination(c3,null,null));  Train DanburyToEssexTrain=tmanager.newTrain("Danbury to Essex");  Route routeDE=rmanager.newRoute("DE");  RouteLocation rlDanbury2=routeDE.addLocation(Danbury);  RouteLocation rlEssex=routeDE.addLocation(Essex);  rlDanbury2.setMaxCarMoves(8);  rlEssex.setMaxCarMoves(8);  rlEssex.setTrainIconX(25);  rlEssex.setTrainIconY(275);  DanburyToEssexTrain.setRoute(routeDE);  Assert.assertTrue("Try routing with final destination and train",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","Acton Interchange",c3.getDestinationTrackName());  c3.setDestination(null,null);  c3.setFinalDestination(Essex);  Assert.assertTrue("Try routing five trains",router.setDestination(c3,ActonTrain2,null));  Assert.assertEquals("Check car's destination","Acton MA",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","Acton Interchange",c3.getDestinationTrackName());  c3.setDestination(null,null);  c3.setFinalDestination(Essex);  rlA2.setPickUpAllowed(false);  Assert.assertTrue("Try routing five trains",router.setDestination(c3,ActonTrain2,null));  Assert.assertEquals("Check car's destination","",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","",c3.getDestinationTrackName());  Assert.assertEquals("Check status",Router.STATUS_NOT_THIS_TRAIN,router.getStatus());  c3.setDestination(null,null);  c3.setFinalDestination(Foxboro);  Assert.assertFalse("Try routing with final destination",router.setDestination(c3,null,null));  Train EssexToFoxboroTrain=tmanager.newTrain("Essex to Foxboro");  Route routeEF=rmanager.newRoute("EF");  routeEF.addLocation(Essex);  RouteLocation rlFoxboro=routeEF.addLocation(Foxboro);  rlFoxboro.setTrainIconX(100);  rlFoxboro.setTrainIconY(275);  EssexToFoxboroTrain.setRoute(routeEF);  Assert.assertFalse("Try routing with final destination and train",router.setDestination(c3,null,null));  Assert.assertFalse("Try routing with final destination and train",router.setDestination(c3,ActonTrain,null));  Assert.assertFalse("Try routing with final destination and train",router.setDestination(c3,ActonTrain2,null));  AS1.setTrainDirections(Track.NORTH);  Assert.assertTrue("Try routing with final destination and train",router.setDestination(c3,null,null));  Assert.assertEquals("Check car's destination","Bedford MA",c3.getDestinationName());  Assert.assertEquals("Check car's destination track","Bedford Interchange",c3.getDestinationTrackName());  AS1.setTrainDirections(0);}  }
class C{  public void whitespaceChars(int low,int hi){  if (low < 0)   low=0;  if (hi >= ctype.length)   hi=ctype.length - 1;  while (low <= hi)   ctype[low++]=CT_WHITESPACE;}  }
class C{  public BasicRequestHandler(RequestLogger logger){  this.logger=logger;}  }
class C{  public FileReadStream(FileInputStream is,PathImpl path){  init(is);}  }
class C{  protected void sendFunctionGroup1(){  log.debug("sendFunctionGroup1 called for address {}, dir={},F0={},F1={},F2={},F3={},F4={}",this.address,(this.isForward ? "FWD" : "REV"),(this.f0 ? "On" : "Off"),(this.f1 ? "On" : "Off"),(this.f2 ? "On" : "Off"),(this.f3 ? "On" : "Off"),(this.f4 ? "On" : "Off"));}  }
class C{  void transfer(Entry<K,V>[] newTable){  Entry[] src=table;  int newCapacity=newTable.length;  for (int j=0; j < src.length; j++) {    Entry<K,V> e=src[j];    if (e != null) {      src[j]=null;      do {        Entry<K,V> next=e.next;        int i=indexFor(e.hash,newCapacity);        e.next=newTable[i];        newTable[i]=e;        e=next;      } while (e != null);    }  }}  }
class C{  public boolean tableExists(String tableName) throws Exception {  if (!isConnected()) {    throw new IllegalStateException("Not connected, please connect first!");  }  if (m_Debug) {    System.err.println("Checking if table " + tableName + " exists...");  }  DatabaseMetaData dbmd=m_Connection.getMetaData();  ResultSet rs;  if (m_checkForUpperCaseNames) {    rs=dbmd.getTables(null,null,tableName.toUpperCase(),null);  } else   if (m_checkForLowerCaseNames) {    rs=dbmd.getTables(null,null,tableName.toLowerCase(),null);  } else {    rs=dbmd.getTables(null,null,tableName,null);  }  boolean tableExists=rs.next();  if (rs.next()) {    throw new Exception("This table seems to exist more than once!");  }  rs.close();  if (m_Debug) {    if (tableExists) {      System.err.println("... " + tableName + " exists");    } else {      System.err.println("... " + tableName + " does not exist");    }  }  return tableExists;}  }
class C{  public static DBEmailQueue makeAddressVerification(String recipientAddress,String code,String serverUrl){  if (allowsExperimentalEmails(recipientAddress)) {    Map<String,String> queryParams=new HashMap<String,String>();    queryParams.put("user",recipientAddress);    queryParams.put("code",code);    String verificationUrl=Util.buildUrl(serverUrl,VERIFY_ACCOUNT_PATH,queryParams);    Map<String,String> emailParams=new HashMap<String,String>();    emailParams.put("verification_url",verificationUrl);    return makeMandrillEmail(recipientAddress,emailParams,Type.MANDRILL_ADDRESS_VERIFICATION);  } else {    DBEmailQueue email=new DBEmailQueue();    email.typeString=Type.ADDRESS_VERIFICATION.getValue();    email.setArguments(recipientAddress,code);    return email;  }}  }
class C{  public LinkProperties(Link link) throws IOException {  super();  read(link.dis);}  }
class C{  private double calcRelativePos(boolean absoluteMousePos,int mousePos,int entityLocation,double gridSize){  double xCalcBase=mousePos * 1.0;  if (absoluteMousePos) {    xCalcBase-=entityLocation;  }  return xCalcBase / gridSize;}  }
class C{  public final CC height(String size){  ver.setSize(ConstraintParser.parseBoundSize(size,false,false));  return this;}  }
class C{  public void calculateChainWaveBuffer(float maxAngle,int bufferTime,float angleDecrement,float divisor,EntityLivingBase entity){  this.prevPitchVariation=this.pitchVariation;  if (entity.rotationPitch != entity.prevRotationPitch && MathHelper.abs(this.pitchVariation) < maxAngle) {    this.pitchVariation+=(entity.prevRotationPitch - entity.rotationPitch) / divisor;  }  if (this.pitchVariation > 0.7F * angleDecrement) {    if (this.pitchTimer > bufferTime) {      this.pitchVariation-=angleDecrement;      if (MathHelper.abs(this.pitchVariation) < angleDecrement) {        this.pitchVariation=0.0F;        this.pitchTimer=0;      }    } else {      this.pitchTimer++;    }  } else   if (this.pitchVariation < -0.7F * angleDecrement) {    if (this.pitchTimer > bufferTime) {      this.pitchVariation+=angleDecrement;      if (MathHelper.abs(this.pitchVariation) < angleDecrement) {        this.pitchVariation=0.0F;        this.pitchTimer=0;      }    } else {      this.pitchTimer++;    }  }}  }
class C{  public Address(Type type,byte[] address) throws HyperLedgerException {  this.type=type;  if (address.length != 20) {    throw new HyperLedgerException("invalid digest length for an address");  }  this.bytes=Arrays.clone(address);}  }
class C{  public void enhance(JCas jCas,List<Mention> mentions){  final Set<WordToken> pronounAnnotation=mentions.stream().filter(null).map(null).collect(Collectors.toSet());  final Set<Entity> entityAnnotation=mentions.stream().filter(null).map(null).collect(Collectors.toSet());  final Set<PhraseChunk> npAnnotation=mentions.stream().filter(null).map(null).collect(Collectors.toSet());  final Map<WordToken,Collection<Sentence>> wordToSentence=JCasUtil.indexCovering(jCas,WordToken.class,Sentence.class).entrySet().stream().filter(null).collect(Collectors.toMap(null,null));  final Map<Entity,Collection<Sentence>> entityToSentence=JCasUtil.indexCovering(jCas,Entity.class,Sentence.class).entrySet().stream().filter(null).collect(Collectors.toMap(null,null));  final Map<PhraseChunk,Collection<Sentence>> npToSentence=JCasUtil.indexCovering(jCas,PhraseChunk.class,Sentence.class).entrySet().stream().filter(null).collect(Collectors.toMap(null,null));  final List<Sentence> sentences=new ArrayList<Sentence>(JCasUtil.select(jCas,Sentence.class));  final Map<Sentence,Integer> sentenceIndex=IntStream.range(0,sentences.size()).boxed().collect(Collectors.toMap(null,null));  mentions.forEach(null);}  }
class C{  public boolean isMinXSet(){  return isMinXSet(0);}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TSTRUCTURAL_TYPE;}  }
class C{  private static void enableFirebug(final WebEngine engine){  engine.executeScript("if (!document.getElementById('FirebugLite')){E = document['createElement' + 'NS'] && document.documentElement.namespaceURI;E = E ? document['createElement' + 'NS'](E, 'script') : document['createElement']('script');E['setAttribute']('id', 'FirebugLite');E['setAttribute']('src', 'https://getfirebug.com/' + 'firebug-lite.js' + '#startOpened');E['setAttribute']('FirebugLite', '4');(document['getElementsByTagName']('head')[0] || document['getElementsByTagName']('body')[0]).appendChild(E);E = new Image;E['setAttribute']('src', 'https://getfirebug.com/' + '#startOpened');}");}  }
class C{  public NodesInfoRequest all(){  settings=true;  os=true;  process=true;  jvm=true;  threadPool=true;  transport=true;  http=true;  plugins=true;  return this;}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  String fMsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_INCORRECT_PROGRAMMER_ASSERTION,new Object[]{"Programmer's assertion:  the method FunctionMultiArgs.reportWrongNumberArgs() should never be called."});  throw new RuntimeException(fMsg);}  }
class C{  public TIntIntHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void add(double x,double y){  xStats.add(x);  if (isFinite(x) && isFinite(y)) {    if (xStats.count() > 1) {      sumOfProductsOfDeltas+=(x - xStats.mean()) * (y - yStats.mean());    }  } else {    sumOfProductsOfDeltas=NaN;  }  yStats.add(y);}  }
class C{  public static boolean deleteContact(String id){  return Display.getInstance().deleteContact(id);}  }
class C{  private static boolean eq(Object o1,Object o2){  return (o1 == null) ? o2 == null : o1.equals(o2);}  }
class C{  public static String createZookeeperQuorumString(List<String> zookeeperIps){  StringBuilder sb=new StringBuilder();  for (int i=0; i < zookeeperIps.size(); i++) {    sb.append(zookeeperIps.get(i) + ":" + ClusterManagerConstants.Mesos.ZOOKEEPER_PORT);    if (i != zookeeperIps.size() - 1) {      sb.append(",");    }  }  return sb.toString();}  }
class C{  public void pathValueToPixel(Path path){  path.transform(mMatrixValueToPx);  path.transform(mViewPortHandler.getMatrixTouch());  path.transform(mMatrixOffset);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.196 -0400",hash_original_method="F4C23A3AFAC9597BE94C0EF987E25145",hash_generated_method="88B7967C47844A303B16F918A2BA120D") public static InputStream toInputStream(String input,Charset encoding){  return new ByteArrayInputStream(input.getBytes(Charsets.toCharset(encoding)));}  }
class C{  public static PreviousExpression previousTail(Expression expression,String property){  PreviousExpression expr=new PreviousExpression(expression,property);  expr.setType(PreviousExpressionType.PREVTAIL);  return expr;}  }
class C{  public static Sequence<IString> toIStringSequence(List<String> seq){  IString[] istrs=toIStringArray(seq);  return new ArraySequence<IString>(true,istrs);}  }
class C{  private boolean isSameCharacter(char c1,char c2){  return c1 != NULL_CHARACTER && c1 == c2;}  }
class C{  public void bratSetHighlight(AjaxRequestTarget aTarget,VID aAnnotationId){  if (!aAnnotationId.isSet()) {    aTarget.appendJavaScript("Wicket.$('" + vis.getMarkupId() + "').dispatcher.post('current', "+ "['"+ getCollection()+ "', '1234', {edited:[]}, false]);");  } else {    aTarget.appendJavaScript("Wicket.$('" + vis.getMarkupId() + "').dispatcher.post('current', "+ "['"+ getCollection()+ "', '1234', {edited:[[\""+ aAnnotationId+ "\"]]}, false]);");  }}  }
class C{  public void refreshOnlineStatusText(){  updateOnlineStatusText(statusEnum);}  }
class C{  public boolean isRELToken(){  return relToken;}  }
class C{  static void checkMethodIdentifier(int version,final String name,final String msg){  if (name == null || name.length() == 0) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null or empty)");  }  if ((version & 0xFFFF) >= Opcodes.V1_5) {    for (int i=0; i < name.length(); ++i) {      if (".;[/<>".indexOf(name.charAt(i)) != -1) {        throw new IllegalArgumentException("Invalid " + msg + " (must be a valid unqualified name): "+ name);      }    }    return;  }  if (!Character.isJavaIdentifierStart(name.charAt(0))) {    throw new IllegalArgumentException("Invalid " + msg + " (must be a '<init>', '<clinit>' or a valid Java identifier): "+ name);  }  for (int i=1; i < name.length(); ++i) {    if (!Character.isJavaIdentifierPart(name.charAt(i))) {      throw new IllegalArgumentException("Invalid " + msg + " (must be '<init>' or '<clinit>' or a valid Java identifier): "+ name);    }  }}  }
class C{  public static <T1,T2,T3,T4,T5,T6,T7,T8,R>TriFunction<T6,T7,T8,R> partial8(final T1 t1,final T2 t2,final T3 t3,final T4 t4,final T5 t5,final OctFunction<T1,T2,T3,T4,T5,T6,T7,T8,R> octFunc){  return null;}  }
class C{  public static final Object readValueXml(XmlPullParser parser,String[] name) throws XmlPullParserException, IOException {  int eventType=parser.getEventType();  do {    if (eventType == parser.START_TAG) {      return readThisValueXml(parser,name);    } else     if (eventType == parser.END_TAG) {      throw new XmlPullParserException("Unexpected end tag at: " + parser.getName());    } else     if (eventType == parser.TEXT) {      throw new XmlPullParserException("Unexpected text: " + parser.getText());    }    eventType=parser.next();  } while (eventType != parser.END_DOCUMENT);  throw new XmlPullParserException("Unexpected end of document");}  }
class C{  public void testCurrentTimeSeconds(){  long timeMillis=System.currentTimeMillis();  long timeSeconds=DefaultGroovyStaticMethods.currentTimeSeconds(null);  long timeMillis2=System.currentTimeMillis();  assertTrue(timeMillis / 1000 <= timeSeconds);  assertTrue(timeMillis2 / 1000 >= timeSeconds);}  }
class C{  public void paintPasswordFieldBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static double p(Instances D,int j,int j_){  return p(MLUtils.getYfromD(D),j,j_);}  }
class C{  Object writeReplace() throws ObjectStreamException {  if (javaFilter != null)   return javaFilter;  return filter == null ? null : platformCtx.createContinuousQueryFilter(filter);}  }
class C{  @Override public void offset(Point offset){  this.rect=new RotatedRect(new Point(rect.center.x + offset.x,rect.center.y + offset.y),rect.size,rect.angle);}  }
class C{  public void close() throws IOException {  closeStartIfNecessary();  writer.close();}  }
class C{  public void terminate(int delay) throws RemoteException {  System.exit(0);}  }
class C{  public ProcessDrawer(final ProcessRendererModel model,final boolean drawHighlight){  if (model == null) {    throw new IllegalArgumentException("model must not be null!");  }  this.model=model;  this.drawHighlight=drawHighlight;  decorators=new HashMap<>();  for (  RenderPhase phase : RenderPhase.drawOrder()) {    decorators.put(phase,new CopyOnWriteArrayList<ProcessDrawDecorator>());  }  operatorDecorators=new CopyOnWriteArrayList<OperatorDrawDecorator>();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  return pluggy == null ? "" : pluggy.getType();}  }
class C{  public CptInvariantUpdater(BayesIm bayesIm,Evidence evidence){  if (bayesIm == null) {    throw new NullPointerException();  }  this.bayesIm=bayesIm;  setEvidence(evidence);}  }
class C{  private static byte divmod(byte[] number,int firstDigit,int base,int divisor){  int remainder=0;  for (int i=firstDigit; i < number.length; i++) {    int digit=(int)number[i] & 0xFF;    int temp=remainder * base + digit;    number[i]=(byte)(temp / divisor);    remainder=temp % divisor;  }  return (byte)remainder;}  }
class C{  public static int monthSize(long monthMillis){  if (isNotTime(monthMillis)) {    return 0;  }  DateOnlyCalendar calendar=DateOnlyCalendar.fromTime(monthMillis);  int size=calendar.getActualMaximum(Calendar.DAY_OF_MONTH);  calendar.recycle();  return size;}  }
class C{  @Reference(authors="Fowlkes, E.B. and Mallows, C.L.",title="A method for comparing two hierarchical clusterings",booktitle="Journal of the American Statistical Association, Vol. 78 Issue 383") public double fowlkesMallows(){  return Math.sqrt(precision() * recall());}  }
class C{  private Bitmap loadImage(int id){  Bitmap bitmap=BitmapFactory.decodeResource(context.getResources(),id);  Bitmap scaled=Bitmap.createScaledBitmap(bitmap,IMAGE_WIDTH,IMAGE_HEIGHT,true);  bitmap.recycle();  return scaled;}  }
class C{  public void onAnimationEnd(Animator animation){  if (mRule == Dependency.AFTER) {    startIfReady(animation);  }}  }
class C{  @Override public String toString(){  StringBuffer FString=new StringBuffer();  FString.append("\tGreedy Stepwise (" + ((m_backward) ? "backwards)" : "forwards)") + ".\n\tStart set: ");  if (m_starting == null) {    if (m_backward) {      FString.append("all attributes\n");    } else {      FString.append("no attributes\n");    }  } else {    FString.append(startSetToString() + "\n");  }  if (!m_doneRanking) {    FString.append("\tMerit of best subset found: " + Utils.doubleToString(Math.abs(m_bestMerit),8,3) + "\n");  } else {    if (m_backward) {      FString.append("\n\tRanking is the order that attributes were removed, " + "starting \n\twith all attributes. The merit scores in the left" + "\n\tcolumn are the goodness of the remaining attributes in the"+ "\n\tsubset after removing the corresponding in the right column"+ "\n\tattribute from the subset.\n");    } else {      FString.append("\n\tRanking is the order that attributes were added, starting " + "\n\twith no attributes. The merit scores in the left column" + "\n\tare the goodness of the subset after the adding the"+ "\n\tcorresponding attribute in the right column to the subset.\n");    }  }  if ((m_threshold != -Double.MAX_VALUE) && (m_doneRanking)) {    FString.append("\tThreshold for discarding attributes: " + Utils.doubleToString(m_threshold,8,4) + "\n");  }  return FString.toString();}  }
class C{  public void clear(){  Iterator<MouseButton> buttons=this.buttons.values().iterator();  while (buttons.hasNext()) {    buttons.next().clear();  }  this.moved=false;  this.scroll=0;}  }
class C{  public static List<Blog> parse(String data){  List<Blog> blogList=null;  Blog blog=null;  if (data != null && !data.equals(""))   try {    JSONTokener jsonParser=new JSONTokener(data);    JSONObject content=(JSONObject)jsonParser.nextValue();    JSONArray list=content.getJSONArray("data");    if (list.length() > 0)     blogList=new ArrayList<>();    for (int i=0; i < list.length(); ++i) {      JSONObject info=(JSONObject)list.get(i);      blog=new Blog();      blog.setAuthor_name(info.getString("author"));      blog.setPostId(info.getString("blog_id"));      blog.setUrl(StringUtils.toUrl(info.getString("blog_url")));      blog.setBlogId(StringUtils.toInt(info.getString("blog_id")));      blog.setBlogapp(info.getString("blogapp"));      blog.setComments(StringUtils.toInt(info.getString("comment")));      blog.setSummary(info.getString("content"));      blog.setReads(StringUtils.toInt(info.getString("hit")));      blog.setTitle(info.getString("title"));      blog.setUpdated(StringUtils.toDate(info.getString("public_time")));      if (blogList != null) {        blogList.add(blog);      }    }  } catch (  Exception e) {    e.printStackTrace();  }  return blogList;}  }
class C{  public FitsLineAppender(){  this.buffer=new StringBuilder(HeaderCard.FITS_HEADER_CARD_SIZE);}  }
class C{  Values initializeValues(Thread current){  return current.localValues=new Values();}  }
class C{  public boolean complete(V val){  this.value=val;  this.isDone=true;  return true;}  }
class C{  @Override protected void onRemoveInviteOnly(String target,String sourceNick,String sourceLogin,String sourceHostname){  Message message=new Message(service.getString(R.string.message_remove_invite_only,sourceNick));  message.setColor(Message.COLOR_BLUE);  server.getConversation(target).addMessage(message);  service.sendBroadcast(Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target));}  }
class C{  public Class<V> valueType(){  return valueType;}  }
class C{  public Builder gravity(int gravity){  this.drawerGravity=gravity;  return this;}  }
class C{  @Override public void onBuildHeaders(List<Header> headers){  loadHeadersFromResource(R.xml.settings_headers,headers);  updateHeaderList(headers);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.241 -0500",hash_original_method="E858B13EC4F52DD7B2125F2E9BA15919",hash_generated_method="56583347CE4DAE881DB0E0B40B64B1D2") private View fillFromTop(int nextTop){  mFirstPosition=Math.min(mFirstPosition,mSelectedPosition);  mFirstPosition=Math.min(mFirstPosition,mItemCount - 1);  if (mFirstPosition < 0) {    mFirstPosition=0;  }  return fillDown(mFirstPosition,nextTop);}  }
class C{  void remove(File file){  assert file != null;synchronized (mux) {    files.remove(file);  }}  }
class C{  public synchronized void ackNewMentions(int serverId,String convTitle){  if (convTitle == null) {    return;  }  Conversation conversation=mentions.remove(getConversationId(serverId,convTitle));  if (conversation == null) {    return;  }  newMentions-=conversation.getNewMentions();  conversation.clearNewMentions();  if (newMentions < 0) {    newMentions=0;  }  updateNotification(null,null,false,false,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:34.358 -0500",hash_original_method="6046B077AB394D3EE192C203E1B5357E",hash_generated_method="3AE9973997983BDE421D39586AF6DF26") public static void sort(int[] a){  doSort(a,0,a.length - 1);}  }
class C{  protected void startProgrammer(DecoderFile decoderFile,RosterEntry r,String programmerName){  log.error("startProgrammer method in NewLocoSelPane should have been overridden");}  }
class C{  public static InlineQueryResultGifBuilder builder(){  return new InlineQueryResultGifBuilder();}  }
class C{  public ConnectionInfo(){  this(0,0,0,null,null,-1,Direction.Input,Status.Unknown);}  }
class C{  public void paint(final Graphics2D g,final Rect bounds,final Rect visibleRect){  this.g=g;  this.bounds=bounds;  this.visibleRect=visibleRect;}  }
class C{  protected IAnalysisCache createAnalysisCache() throws IOException {  IAnalysisCache analysisCache=ClassFactory.instance().createAnalysisCache(classPath,bugReporter);  registerBuiltInAnalysisEngines(analysisCache);  registerPluginAnalysisEngines(detectorFactoryCollection,analysisCache);  analysisCache.eagerlyPutDatabase(DetectorFactoryCollection.class,detectorFactoryCollection);  Global.setAnalysisCacheForCurrentThread(analysisCache);  return analysisCache;}  }
class C{  public MapBinaryHeap(){  initialize(new ComparableComparator());}  }
class C{  public static void shiftRight(int[] vix,double[] vmb){  for (int i=vix.length - 1; i > 0; ) {    int iPrevInd=i;    double dPrevVal=vmb[iPrevInd];    while (i >= 0 && dPrevVal == vmb[i])     --i;    if (i >= 0) {      for (int j=i + 1; j <= iPrevInd; ++j)       vix[j]=vix[i];    }  }}  }
class C{  public void withdraw(double amount){  balance-=amount;  transactions.add(new Transaction('W',amount,balance,"Withdrawal from account"));}  }
class C{  protected static String extractServerException(Exception e){  final String message=e.getMessage();  final int delimiterIndex=message.indexOf(DELIMITER_PIPE);  if (delimiterIndex > 0 && delimiterIndex < message.length() - 1) {    return message.substring(delimiterIndex + 1);  }  return message;}  }
class C{  public boolean isSetDpid(){  return EncodingUtils.testBit(__isset_bitfield,__DPID_ISSET_ID);}  }
class C{  public static boolean asBoolean(Matcher matcher){  RegexSupport.setLastMatcher(matcher);  return matcher.find();}  }
class C{  private boolean removeClientFromList(int netId,String addr,boolean isRemovable){  StringBuilder modifiedClientList=new StringBuilder();  String[] currentClientList=getClientList(netId);  boolean isClientRemoved=false;  if (currentClientList != null) {    for (    String client : currentClientList) {      if (!client.equalsIgnoreCase(addr)) {        modifiedClientList.append(" ");        modifiedClientList.append(client);      } else {        isClientRemoved=true;      }    }  }  if (modifiedClientList.length() == 0 && isRemovable) {    if (DBG)     logd("Remove unknown network");    mGroups.remove(netId);    return true;  }  if (!isClientRemoved) {    return false;  }  if (DBG)   logd("Modified client list: " + modifiedClientList);  if (modifiedClientList.length() == 0) {    modifiedClientList.append("\"\"");  }  mWifiNative.setNetworkVariable(netId,"p2p_client_list",modifiedClientList.toString());  mWifiNative.saveConfig();  return true;}  }
class C{  @Override protected void onStop(){  super.onStop();  Log.d(TAG,"onStop() - the activity is no longer visible (it is now \"stopped\")");}  }
class C{  private StateConnection requestLoop() throws IOException {  StateConnection state=_state;  StateConnection tailState=state;  try {    while (!_port.isClosed()) {switch (state) {case IDLE:        tailState=state;      return tailState;case ACTIVE:    ServiceRef.flushOutbox();  state=dispatchRequest();break;case READ:ServiceRef.flushOutbox();state=processPoll();break;case POLL:System.out.println("POLL: " + this + " "+ port().pollManager());ServiceRef.flushOutbox();tailState=state;return tailState;case CLOSE_READ_S:ServiceRef.flushOutboxAndExecuteLast();tailState=state;return tailState;case CLOSE_READ_A:state=closeRead();break;case CLOSE:_state=state;tailState=state;ServiceRef.flushOutboxAndExecuteLast();close();tailState=_state;return tailState;case FREE:tailState=state;ServiceRef.flushOutboxAndExecuteLast();System.out.println("FREE: " + this);return tailState;default :System.out.println("UNKNOWN-STATE: " + state + " "+ this);_state=tailState=StateConnection.DESTROY;ServiceRef.flushOutbox();destroy();throw new IllegalStateException(String.valueOf(state));}}} catch (ClientDisconnectException e) {_port.stats().addLifetimeClientDisconnectCount();if (log.isLoggable(Level.FINER)) {log.finer(dbgId() + e);}}catch (InterruptedIOException e) {if (log.isLoggable(Level.FINEST)) {log.log(Level.FINEST,dbgId() + e,e);}}catch (IOException e) {if (log.isLoggable(Level.FINE)) {log.log(Level.FINE,dbgId() + e,e);}}catch (OutOfMemoryError e) {String msg="TcpSocketLink OutOfMemory";Shutdown.shutdownOutOfMemory(msg);}catch (Throwable e) {if (log.isLoggable(Level.FINE)) {log.log(Level.FINE,dbgId() + e,e);}} finally {_state=tailState;}return state;}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  public XMLSignatureException(Throwable cause){  super(cause == null ? null : cause.toString());  this.cause=cause;}  }
class C{  public Task<BucketRestRep> deactivate(URI id,BucketDeleteParam input){  return postTask(input,getDeactivateUrl(),id);}  }
class C{  public boolean isPreserveConstEnums(){  return preserveConstEnums;}  }
class C{  public Matrix[] predict(Matrix xstar){  if (alpha == null || L == null) {    System.out.println("GP needs to be trained first..");    System.exit(-1);  }  if (xstar.getColumnDimension() != X.getColumnDimension())   throw new IllegalArgumentException("Wrong size of the input " + xstar.getColumnDimension() + " instead of "+ X.getColumnDimension());  Matrix[] star=covFunction.compute(logtheta,X,xstar);  Matrix Kstar=star[1];  Matrix Kss=star[0];  Matrix ystar=Kstar.transpose().times(alpha);  Matrix v=fSubstitution(L,Kstar);  v.arrayTimesEquals(v);  Matrix Sstar=Kss.minus(sumColumns(v).transpose());  return new Matrix[]{ystar,Sstar};}  }
class C{  @Inline @Override public final Extent extentRead(ObjectReference ref,Word offset,Word location,int mode){  return Magic.getExtentAtOffset(ref.toObject(),offset.toOffset(),location.toInt());}  }
class C{  public static Expression unmap(ExprNode expression){  return unmapExpressionDeep(expression,new StatementSpecUnMapContext());}  }
class C{  public ScaleException(String msg){  super(msg);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected Date evaluateWrapper(VariableWrapper variableWrapper,Locale locale,TimeZone tz){  Date date=null;  Object variableval=resolveWrapper(variableWrapper,locale,tz);  if (variableval instanceof Date) {    date=(Date)variableval;  } else {    String s=variableval.toString();    try {      date=getDateFormat(DEFAULT_DATE_FORMAT,tz,locale).parse(s);    } catch (    ParseException exp) {      wrapAndThrow(SEVERE,exp,"Invalid expression for date");    }  }  return date;}  }
class C{  public boolean isAbstract(){  return false;}  }
class C{  private KdNode insertExact(Coordinate p,Object data){  KdNode currentNode=root;  KdNode leafNode=root;  boolean isOddLevel=true;  boolean isLessThan=true;  while (currentNode != null) {    if (currentNode != null) {      boolean isInTolerance=p.distance(currentNode.getCoordinate()) <= tolerance;      if (isInTolerance) {        currentNode.increment();        return currentNode;      }    }    if (isOddLevel) {      isLessThan=p.x < currentNode.getX();    } else {      isLessThan=p.y < currentNode.getY();    }    leafNode=currentNode;    if (isLessThan) {      currentNode=currentNode.getLeft();    } else {      currentNode=currentNode.getRight();    }    isOddLevel=!isOddLevel;  }  numberOfNodes=numberOfNodes + 1;  KdNode node=new KdNode(p,data);  if (isLessThan) {    leafNode.setLeft(node);  } else {    leafNode.setRight(node);  }  return node;}  }
class C{  public TreeIterator iterator(){  return new TreeIterator();}  }
class C{  void removeMigrationCheckpoint(){  Configuration config=_coordinator.queryConfiguration(_coordinator.getSiteId(),getDbConfigPath(),Constants.GLOBAL_ID);  _log.debug("removeMigrationCheckpoint: target version \"{}\"",_coordinator.getTargetDbSchemaVersion());  if (config != null) {    config.removeConfig(DbConfigConstants.MIGRATION_CHECKPOINT);    _coordinator.persistServiceConfiguration(_coordinator.getSiteId(),config);  }}  }
class C{  @DSSource({DSSourceKind.LOCATION}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.165 -0500",hash_original_method="2F9FE5236662F74D39C5964ED1AC733E",hash_generated_method="91F8FCFA8E864025E14A6A32CC90A733") static public Allocation createTyped(RenderScript rs,Type type){  return createTyped(rs,type,MipmapControl.MIPMAP_NONE,USAGE_SCRIPT);}  }
class C{  public static String indicesToRangeList(int[] indices){  StringBuffer rl=new StringBuffer();  int last=-2;  boolean range=false;  for (int i=0; i < indices.length; i++) {    if (i == 0) {      rl.append(indices[i] + 1);    } else     if (indices[i] == last) {      range=true;    } else {      if (range) {        rl.append('-').append(last);        range=false;      }      rl.append(',').append(indices[i] + 1);    }    last=indices[i] + 1;  }  if (range) {    rl.append('-').append(last);  }  return rl.toString();}  }
class C{  protected void prepare(){  ProcessInfoParameter[] paramaters=getParameter();  for (  ProcessInfoParameter para : paramaters) {    String name=para.getParameterName();    if (para.getParameter() == null)     ; else     if (name.equals("IsImportOnlyNoErrors"))     p_IsImportOnlyNoErrors="Y".equals(para.getParameter()); else     if (name.equals("DeleteOldImported"))     p_DeleteOldImported="Y".equals(para.getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public static JarArchive open(InputStream is) throws IOException {  return new DefaultJarArchive(is);}  }
class C{  public void loadConfig(ConfigurationSection config){  ConfigurationSection general=config.getConfigurationSection("general-topics");  if (general != null) {    for (    String key : general.getKeys(false)) {      ConfigurationSection topic=general.getConfigurationSection(key);      if (topic != null) {        String shortText=topic.getString("shortText","");        String fullText=topic.getString("fullText","");        if (!shortText.isEmpty()) {          if (fullText.isEmpty()) {            fullText=shortText;          } else {            fullText=shortText + "\n" + ChatColor.RESET+ fullText;          }        }        addTopic(new GeneralHelpTopic(key,color(shortText),color(fullText),topic.getString("permission",null)));      }    }  }  ConfigurationSection index=config.getConfigurationSection("index-topics");  if (index != null) {    for (    String key : index.getKeys(false)) {      ConfigurationSection topic=index.getConfigurationSection(key);      if (topic != null) {        String shortText=color(topic.getString("shortText",""));        String preamble=color(topic.getString("preamble",null));        String permission=topic.getString("permission",null);        HelpTopic helpTopic=new LazyIndexTopic(key,shortText,permission,topic.getStringList("commands"),preamble);        if (key.equals("Default")) {          defaultTopic=helpTopic;        } else {          addTopic(helpTopic);        }      }    }  }  ignoredPlugins.addAll(config.getStringList("ignore-plugins"));  commandsInIndex=config.getBoolean("command-topics-in-master-index",true);}  }
class C{  public void verify(ClientId sender,SignatureData signature) throws Exception {  log.trace("Verify, {} parts. Signature: {}",parts.size(),signature);  if (SystemProperties.IGNORE_SIGNATURE_VERIFICATION) {    return;  }  try {    SignatureVerifier signatureVerifier=new SignatureVerifier(signature);    signatureVerifier.addParts(parts);    signatureVerifier.verify(sender,new Date());  } catch (  Exception ex) {    throw translateWithPrefix(X_SIGNATURE_VERIFICATION_X,ex);  }}  }
class C{  public static void registerEditorKitForContentType(String type,String classname){  registerEditorKitForContentType(type,classname,Thread.currentThread().getContextClassLoader());}  }
class C{  public DateTimeFormatterBuilder appendDayOfWeek(int minDigits){  return appendDecimal(DateTimeFieldType.dayOfWeek(),minDigits,1);}  }
class C{  public void addStateGroup(String groupName,String stateName,int line){  if (stateNames != null && stateNames.contains(groupName)) {    ThreadLocalToolkit.log(new AmbiguousStateIdentifier(groupName),path,line);  }  stateGroups=(stateGroups != null) ? stateGroups : new HashMap<String,Collection<String>>();  Collection<String> states=stateGroups.get(groupName);  states=(states != null) ? states : new ArrayList<String>();  states.add(stateName);  stateGroups.put(groupName,states);}  }
class C{  public static FuzzyQueryBuilder fuzzyQuery(String name,Object value){  return new FuzzyQueryBuilder(name,value);}  }
class C{  protected int insertionIndex(float val){  byte[] states=_states;  float[] set=_set;  int length=states.length;  int hash=_hashingStrategy.computeHashCode(val) & 0x7fffffff;  int index=hash % length;  if (states[index] == FREE) {    return index;  } else   if (states[index] == FULL && set[index] == val) {    return -index - 1;  } else {    int probe=1 + (hash % (length - 2));    do {      index-=probe;      if (index < 0) {        index+=length;      }    } while (states[index] == FULL && set[index] != val);    if (states[index] == REMOVED) {      int firstRemoved=index;      while (states[index] != FREE && (states[index] == REMOVED || set[index] != val)) {        index-=probe;        if (index < 0) {          index+=length;        }      }      return states[index] == FULL ? -index - 1 : firstRemoved;    }    return states[index] == FULL ? -index - 1 : index;  }}  }
class C{  public void fix(CtClass clazz){  fix(clazz.getName());}  }
class C{  public void tint(int rgb){  colorCalc(rgb);  tintFromCalc();}  }
class C{  protected void notifyUsers(Connection dbConnection,Properties unProperties) throws SQLException, MailOperationException {  List<UserData> userData=getUserData(dbConnection);  sendMail(userData,unProperties);  cleanTable(dbConnection);}  }
class C{  @RequiresQualifiers({@RequiresQualifier(expression="f1",qualifier=Value.class),@RequiresQualifier(expression="f2",qualifier=Odd.class)}) void multi(){  @Value String l1=f1;  @Odd String l2=f2;  @Value String l3=f2;  @Odd String l4=f1;}  }
class C{  public ModifiableHyperBoundingBox(SpatialComparable hbb){  super(SpatialUtil.getMin(hbb),SpatialUtil.getMax(hbb));}  }
class C{  public void dispose(){  m_debuggerBox.dispose();  m_synchronizer.dispose();}  }
class C{  public GeneralSettingsPanel(AssetPackProject project){  this.project=project;  initComponents();  setName("General");  jTextField1.setText(project.getProjectName());  jTextField2.setText(project.getDistributorName());  jTextField3.setText(project.getVersion());  jTextArea1.setText(project.getDescription());}  }
class C{  public HeatBugs(long seed){  this(seed,100,100,100);}  }
class C{  public boolean isClickEnabled(){  return mClickEnabled;}  }
class C{  public boolean isRealtimeBarsRunning(Tradestrategy tradestrategy){  if (m_realTimeBarsRequests.containsKey(tradestrategy.getContract().getId())) {    Contract contract=m_realTimeBarsRequests.get(tradestrategy.getContract().getId());    for (    Tradestrategy item : contract.getTradestrategies()) {      if (item.equals(tradestrategy)) {        return true;      }    }  }  return false;}  }
class C{  public Object jsass_import_stack_pop(){  this.importStack.pop();  return null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public JavaContext(TemplateContextType type,IDocument document,int completionOffset,int completionLength,ISourceFile compilationUnit){  super(type,document,completionOffset,completionLength,compilationUnit);}  }
class C{  public E push(E object){  addElement(object);  return object;}  }
class C{  private ParseOperationSet(String uuid){  this.uuid=uuid;}  }
class C{  public void mouseMoved(){  if (coolMM) {    getCurrentLayerMapMouseListener().mouseMoved();  }}  }
class C{  public void deleteAsync(final String clusterId,final FutureCallback<Task> responseCallback) throws IOException {  deleteObjectAsync(clusterId,responseCallback);}  }
class C{  BigIntPolynomial(int N){  coeffs=new BigInteger[N];  for (int i=0; i < N; i++) {    coeffs[i]=Constants.BIGINT_ZERO;  }}  }
class C{  public void uploadImageAsync(String message,String fileName,Bitmap bitmap,int quality,SocialAuthListener<Integer> listener) throws Exception {  ByteArrayOutputStream bos=new ByteArrayOutputStream();  if (fileName.endsWith("PNG") || fileName.endsWith("png")) {    bitmap.compress(CompressFormat.PNG,0,bos);  } else   if (fileName.endsWith("JPEG") || fileName.endsWith("JPG") || fileName.endsWith("jpg")|| fileName.endsWith("jpeg")) {    bitmap.compress(CompressFormat.JPEG,quality,bos);  } else {    throw new SocialAuthException("Image Format not supported");  }  InputStream inputStream=new ByteArrayInputStream(bos.toByteArray());  try {    if (getCurrentProvider().getProviderId().equalsIgnoreCase("facebook") || getCurrentProvider().getProviderId().equalsIgnoreCase("twitter")) {      new UploadImageTask(listener).execute(message,fileName,inputStream);    } else {      throw new SocialAuthException("Provider not Supported");    }  } catch (  NullPointerException e) {    e.printStackTrace();    throw new SocialAuthException("Provider not Supported");  }}  }
class C{  @CliCommand(value={CliStrings.LIST_DEPLOYED},help=CliStrings.LIST_DEPLOYED__HELP) @CliMetaData(relatedTopic={CliStrings.TOPIC_GEODE_CONFIG}) @ResourceOperation(resource=Resource.CLUSTER,operation=Operation.READ) public final Result listDeployed(@CliOption(key={CliStrings.LIST_DEPLOYED__GROUP},help=CliStrings.LIST_DEPLOYED__GROUP__HELP) @CliMetaData(valueSeparator=",") String group){  try {    TabularResultData tabularData=ResultBuilder.createTabularResultData();    boolean accumulatedData=false;    Set<DistributedMember> targetMembers;    try {      targetMembers=CliUtil.findAllMatchingMembers(group,null);    } catch (    CommandResultException crex) {      return crex.getResult();    }    ResultCollector<?,?> rc=CliUtil.executeFunction(this.listDeployedFunction,null,targetMembers);    List<CliFunctionResult> results=CliFunctionResult.cleanResults((List<?>)rc.getResult());    for (    CliFunctionResult result : results) {      if (result.getThrowable() != null) {        tabularData.accumulate("Member",result.getMemberIdOrName());        tabularData.accumulate("JAR","");        tabularData.accumulate("JAR Location","ERROR: " + result.getThrowable().getClass().getName() + ": "+ result.getThrowable().getMessage());        accumulatedData=true;        tabularData.setStatus(Status.ERROR);      } else {        String[] strings=(String[])result.getSerializables();        for (int i=0; i < strings.length; i+=2) {          tabularData.accumulate("Member",result.getMemberIdOrName());          tabularData.accumulate("JAR",strings[i]);          tabularData.accumulate("JAR Location",strings[i + 1]);          accumulatedData=true;        }      }    }    if (!accumulatedData) {      return ResultBuilder.createInfoResult(CliStrings.LIST_DEPLOYED__NO_JARS_FOUND_MESSAGE);    }    return ResultBuilder.buildResult(tabularData);  } catch (  VirtualMachineError e) {    SystemFailure.initiateFailure(e);    throw e;  }catch (  Throwable th) {    SystemFailure.checkFailure();    return ResultBuilder.createGemFireErrorResult("Exception while attempting to list deployed: " + th.getClass().getName() + ": "+ th.getMessage());  }}  }
class C{  public void putLongFromTo(long value,int from,int to){  int width=to - from + 1;  if (width == 0)   return;  if (from < 0 || from >= nbits || to < 0 || to >= nbits || width < 0 || width > QuickBitVector.BITS_PER_UNIT)   throw new IndexOutOfBoundsException("from:" + from + ", to:"+ to);  QuickBitVector.putLongFromTo(bits,value,from,to);}  }
class C{  private int findLine(int offset){  int[] lineEnds=lineCache.get();  if (offset < lineEnds[0]) {    return 0;  } else   if (offset > lineEnds[lineCount - 1]) {    return lineCount;  } else {    return findLine(lineEnds,offset,0,lineCount - 1);  }}  }
class C{  public void testQueryTableShardSelection() throws Exception {  if (!this.isSetForFabricTest) {    return;  }  this.conn.setCatalog("employees");  this.conn.addQueryTable("name of non-existing table");  try {    this.conn.createStatement();    fail("Cannot do anything without a mapping/server group");  } catch (  SQLException ex) {    assertEquals(com.mysql.jdbc.SQLError.SQL_STATE_CONNECTION_REJECTED,ex.getSQLState());  }  this.conn.addQueryTable("employees");  this.conn.createStatement();  this.conn.clearQueryTables();}  }
class C{  public HttpBusinessException(String pMessage,HttpStatus pHttpStatus){  super(pMessage);  this.httpStatus=pHttpStatus;}  }
class C{  public void disallowIn(){  teleRules.disallowIn();}  }
class C{  public dim3(){  x=1;  y=1;  z=1;}  }
class C{  public ServerRuntimeException(String msg){  super(msg);}  }
class C{  protected void convertOrder(SqlSelect select,Blackboard bb,RelCollation collation,List<SqlNode> orderExprList,SqlNode offset,SqlNode fetch){  if (select.getOrderList() == null || select.getOrderList().getList().isEmpty()) {    assert collation.getFieldCollations().isEmpty();    if ((offset == null || ((SqlLiteral)offset).bigDecimalValue().equals(BigDecimal.ZERO)) && fetch == null) {      return;    }  }  bb.setRoot(LogicalSort.create(bb.root,collation,offset == null ? null : convertExpression(offset),fetch == null ? null : convertExpression(fetch)),false);  if (orderExprList.size() > 0 && !bb.top) {    final List<RexNode> exprs=new ArrayList<>();    final RelDataType rowType=bb.root.getRowType();    final int fieldCount=rowType.getFieldCount() - orderExprList.size();    for (int i=0; i < fieldCount; i++) {      exprs.add(rexBuilder.makeInputRef(bb.root,i));    }    bb.setRoot(LogicalProject.create(bb.root,exprs,rowType.getFieldNames().subList(0,fieldCount)),false);  }}  }
class C{  public NoSuchMechanismException(Throwable cause){  super(cause == null ? null : cause.toString());  this.cause=cause;}  }
class C{  @Override public boolean isMultiple(){  return false;}  }
class C{  public boolean isExpired(){  return TimeUtils.getCurrentTimeInLong() > expiredTime;}  }
class C{  public void removeItem(T item){  int position=contents.indexOf(item);  if (position != -1) {    removeItem(position);  }}  }
class C{  private boolean containsMixedBackingArrays(BlockConsistencyGroup cg){  List<Volume> vplexVolumes=BlockConsistencyGroupUtils.getActiveVplexVolumesInCG(cg,_dbClient,PersonalityTypes.SOURCE);  if (vplexVolumes.size() > 1) {    URI storageSystemToCompare=getSourceBackingVolumeStorageSystem(vplexVolumes.get(0));    for (    Volume volume : vplexVolumes) {      URI storageSystem=getSourceBackingVolumeStorageSystem(volume);      if (!storageSystem.equals(storageSystemToCompare)) {        return true;      }    }  }  return false;}  }
class C{  public boolean member(T value){  if (value == null) {    throw new IllegalArgumentException("BinaryTree cannot store 'null' values.");  }  if (root == null) {    return false;  }  BinaryNode<T> node=root;  while (node != null) {    int c=value.compareTo(node.value);    if (c == 0) {      return true;    }    if (c < 0) {      node=node.getLeftSon();    } else {      node=node.getRightSon();    }  }  return false;}  }
class C{  public Extensions generate(){  Extension[] exts=new Extension[extOrdering.size()];  for (int i=0; i != extOrdering.size(); i++) {    exts[i]=(Extension)extensions.get(extOrdering.elementAt(i));  }  return new Extensions(exts);}  }
class C{  private boolean filledOrders(Contract contract,TradestrategyOrders positionOrders,Candle candle) throws Exception {  boolean orderfilled=false;  for (  TradeOrder order : positionOrders.getTradeOrders()) {    if (OrderStatus.UNSUBMIT.equals(order.getStatus())) {      OrderState orderState=new OrderState();      orderState.m_status=OrderStatus.SUBMITTED;      this.brokerModel.openOrder(order.getOrderKey(),contract,order,orderState);      order.setStatus(OrderStatus.SUBMITTED);    }  }  for (  TradeOrder order : positionOrders.getTradeOrders()) {    if (OrderStatus.SUBMITTED.equals(order.getStatus()) && order.getTransmit()) {      BigDecimal filledPrice=getFilledPrice(order,candle);      if (null != filledPrice) {        if (!orderfilled)         orderfilled=true;        if (null == order.getOcaGroupName()) {          createOrderExecution(contract,order,filledPrice,candle.getStartPeriod());        } else {          for (          TradeOrder orderOCA : positionOrders.getTradeOrders()) {            if (orderOCA.isDirty())             continue;            if (order.getOcaGroupName().equals(orderOCA.getOcaGroupName()) && !order.getOrderKey().equals(orderOCA.getOrderKey()) && !orderOCA.getIsFilled()) {              BigDecimal orderOCAFilledPrice=getFilledPrice(orderOCA,candle);              if (null != orderOCAFilledPrice) {                if (candle.getClose().compareTo(candle.getOpen()) > 0) {                  if (filledPrice.compareTo(orderOCAFilledPrice) > 0) {                    cancelOrder(contract,order);                    order.setDirty(true);                    createOrderExecution(contract,orderOCA,orderOCAFilledPrice,candle.getStartPeriod());                    orderOCA.setDirty(true);                    break;                  }                } else {                  if (filledPrice.compareTo(orderOCAFilledPrice) < 0) {                    cancelOrder(contract,order);                    order.setDirty(true);                    createOrderExecution(contract,orderOCA,orderOCAFilledPrice,candle.getStartPeriod());                    orderOCA.setDirty(true);                    break;                  }                }              }              cancelOrder(contract,orderOCA);              orderOCA.setDirty(true);              createOrderExecution(contract,order,filledPrice,candle.getStartPeriod());              order.setDirty(true);              break;            }          }        }      }    }  }  return orderfilled;}  }
class C{  private void reapOld(final GatewaySenderStats statistics,boolean forceEventReap){synchronized (this.unprocessedEventsLock) {    if (uncheckedCount > REAP_THRESHOLD) {      uncheckedCount=0;      long now=System.currentTimeMillis();      if (!forceEventReap && this.unprocessedTokens.size() > REAP_THRESHOLD) {        Iterator<Map.Entry<EventID,Long>> it=this.unprocessedTokens.entrySet().iterator();        int count=0;        while (it.hasNext()) {          Map.Entry<EventID,Long> me=it.next();          long meValue=me.getValue().longValue();          if (meValue <= now) {            it.remove();            count++;          } else {            break;          }        }        if (count > 0) {        }      }      if (forceEventReap || this.unprocessedEvents.size() > REAP_THRESHOLD) {        Iterator<Map.Entry<EventID,EventWrapper>> it=this.unprocessedEvents.entrySet().iterator();        int count=0;        while (it.hasNext()) {          Map.Entry<EventID,EventWrapper> me=it.next();          EventWrapper ew=me.getValue();          if (ew.timeout <= now) {            it.remove();            ew.event.release();            count++;          } else {            break;          }        }        if (count > 0) {        }      }    } else {      uncheckedCount++;    }  }}  }
class C{  public void close(){  try {    if (wrtr != null) {      wrtr.close();      wrtr=null;    }    if (rdr != null) {      rdr.close();      rdr=null;    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void writeXML(Writer out,boolean hideDefault) throws IOException {  try {    XMLTools.stream(new XMLExporter().exportProcess(this,hideDefault),new StreamResult(out),XMLImporter.PROCESS_FILE_CHARSET);  } catch (  XMLException e) {    throw new IOException("Cannot create process XML: " + e,e);  }}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey,Base64.DEFAULT);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }}  }
class C{  public JSONWriter value(boolean b) throws JSONException {  return this.append(b ? "true" : "false");}  }
class C{  @Override protected void process(DistributionManager dm){  doGet(dm);}  }
class C{  private String convertTagsToHtmlTextProperty(Map<String,String> tags){  StringBuilder stringBuilder=new StringBuilder();  for (  Entry<String,String> tagKeyValuePair : tags.entrySet()) {    if (stringBuilder.length() > 0) {      stringBuilder.append("<br />");    }    stringBuilder.append(tagKeyValuePair.getKey()).append('=').append(tagKeyValuePair.getValue());  }  return stringBuilder.toString();}  }
class C{  public boolean enforcesContext(){  return enforceContext;}  }
class C{  public static Collection<ObjectReference> dumpLogicalObject(int width,ObjectReference object){  int refCount=getRefs(object);  int dataCount=getDataCount(object);  boolean hashed=(object.toAddress().loadInt(STATUS_OFFSET) & HASHED) == HASHED;  List<ObjectReference> pointers=new ArrayList<ObjectReference>(refCount);  System.err.printf("  Object %s <%d %d %1s> [",ObjectModel.formatObject(width,object),refCount,dataCount,(hashed ? "H" : ""));  if (refCount > 0) {    for (int i=0; i < refCount; i++) {      ObjectReference ref=ActivePlan.plan.loadObjectReference(getRefSlot(object,i));      System.err.print(" ");      System.err.print(ObjectModel.formatObject(width,ref));      if (!ref.isNull()) {        pointers.add(ref);      }    }  }  System.err.println(" ]");  return pointers;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MRfQResponseLineQty[");  sb.append(get_ID()).append(",Rank=").append(getRanking()).append(",Price=").append(getPrice()).append(",Discount=").append(getDiscount()).append(",Net=").append(getNetAmt()).append("]");  return sb.toString();}  }
class C{  protected boolean isIgnoringWhitespace(){  return _config.isIgnoringWhitespace();}  }
class C{  public void writeV1(final String filename){  new org.matsim.core.network.io.NetworkWriter(network).writeFileV1(filename);}  }
class C{  private void copyFileToStream(String filename,String dirname,ZipOutputStream zipper,String comment) throws IOException {  File file=new File(filename);  String entryName;  if (dirname != null) {    entryName=dirname + "/" + file.getName();  } else {    entryName=file.getName();  }  ZipEntry zipEntry=new ZipEntry(entryName);  zipEntry.setTime(file.lastModified());  zipEntry.setSize(file.length());  if (comment != null) {    zipEntry.setComment(comment);  }  zipper.putNextEntry(zipEntry);  FileInputStream fis=new FileInputStream(file);  try {    int c;    while ((c=fis.read()) != -1) {      zipper.write(c);    }  }  finally {    fis.close();  }  zipper.closeEntry();}  }
class C{  public void addDefault(String path,Object value){  if (!fileConfiguration.contains(path))   set(path,value);}  }
class C{  public static boolean hasICS(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH;}  }
class C{  private static int calculateChecksum(BinaryMessage frame,int startIndex){  int calculated=0;  for (int i=frame.nextSetBit(startIndex); i >= startIndex && i < startIndex + 11; i=frame.nextSetBit(i + 1)) {    calculated^=CHECKSUMS[i - startIndex];  }  return calculated;}  }
class C{  public String asString(){  return String.valueOf(version);}  }
class C{  public BreakException(){}  }
class C{  public synchronized boolean isClosed(){  return journalWriter == null;}  }
class C{  public void cleanUp(){  m_canopyNumMissingForNumerics=null;  m_canopyT2Density=null;  m_canopyCenters=null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:07.479 -0500",hash_original_method="6F637DE57BFF0697961ABB272635A4DE",hash_generated_method="A214DD609BE48B31838063BF1BAE6AA3") public Builder addIndexSetType(Type t,Primitive p){  Entry indexType=new Entry();  indexType.t=t;  indexType.e=null;  indexType.size=0;  indexType.prim=p;  mIndexTypes.addElement(indexType);  return this;}  }
class C{  @Override protected TextView geSubHeaderTextLayout(Context context,TypedArray attrs){  return (TextView)findViewById(R.id.pull_to_refresh_sub_text);}  }
class C{  public static void navigate(final Navigatable... navigatables){  navigate(true,navigatables);}  }
class C{  public AsciiTableHDU(Header h,AsciiTable d){  super(h,d);}  }
class C{  public static byte[] encodeString(final String str){  return DnaUtils.encodeArray(str.getBytes());}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:03.298 -0500",hash_original_method="6D74A2161397D319519D26FF483664C7",hash_generated_method="BEFAF99C1B8ECA9E79E2ECB776545B01") private final void moveValueGapTo(int column,int where){  final int[] valuegap=mValueGap;  final int[] values=mValues;  final int columns=mColumns;  if (where == valuegap[column]) {    return;  } else   if (where > valuegap[column]) {    for (int i=valuegap[column]; i < where; i++) {      values[i * columns + column]+=valuegap[column + columns];    }  } else {    for (int i=where; i < valuegap[column]; i++) {      values[i * columns + column]-=valuegap[column + columns];    }  }  valuegap[column]=where;}  }
class C{  @Override public boolean mayFireAgain(){  return (getNextFireTime() != null);}  }
class C{  public static void register(PageSource ps){  local.set(ps);}  }
class C{  public void clear(){  Set<DataSource> sources=new HashSet<DataSource>(this.sources);  for (  DataSource source : sources) {    remove(source);  }}  }
class C{  public static Fragment newInstance(){  return new BookListFragment();}  }
class C{  public void testGetNamedItemNS1() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Attr domesticAttr;  String attrName;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagName("address");  testEmployee=elementList.item(1);  attributes=testEmployee.getAttributes();  domesticAttr=(Attr)attributes.getNamedItemNS("http://www.usa.com","domestic");  attrName=domesticAttr.getNodeName();  assertEquals("attrName","dmstc:domestic",attrName);}  }
class C{  public synchronized void engineLoad(InputStream stream,char[] password) throws IOException, NoSuchAlgorithmException, CertificateException {  token.ensureValid();  if (NSS_TEST) {    ATTR_SKEY_TOKEN_TRUE=new CK_ATTRIBUTE(CKA_TOKEN,false);  }  if (stream != null && !token.config.getKeyStoreCompatibilityMode()) {    throw new IOException("input stream must be null");  }  if (useSecmodTrust) {    nssTrustType=Secmod.TrustType.ALL;  }  try {    if (password == null) {      login(null);    } else {      login(new PasswordCallbackHandler(password));    }  } catch (  LoginException e) {    Throwable cause=e.getCause();    if (cause instanceof PKCS11Exception) {      PKCS11Exception pe=(PKCS11Exception)cause;      if (pe.getErrorCode() == CKR_PIN_INCORRECT) {        throw new IOException("load failed",new UnrecoverableKeyException().initCause(e));      }    }    throw new IOException("load failed",e);  }  try {    if (mapLabels() == true) {      writeDisabled=true;    }    if (debug != null) {      dumpTokenMap();    }  } catch (  KeyStoreException|PKCS11Exception e) {    throw new IOException("load failed",e);  }}  }
class C{  public Map<Long,String> zip(Map<Long,String> originalDatapoints,Map<Long,String> baseDatapoints){  SystemAssert.requireArgument(baseDatapoints != null && !baseDatapoints.isEmpty(),"Zipper transform requires valid baseDatapoints from base metric!");  Map<Long,String> zippedDP=new HashMap<Long,String>();  for (  Map.Entry<Long,String> originalDP : originalDatapoints.entrySet()) {    Long originalKey=originalDP.getKey();    String originalDpStr=originalDP.getValue();    String baseDpStr=baseDatapoints.containsKey(originalKey) ? baseDatapoints.get(originalKey) : null;    zippedDP.put(originalKey,this.valueZipper.zip(originalDpStr,baseDpStr));  }  return zippedDP;}  }
class C{  public static void time(String message){  if (Options.time) {    out.println(message);  }}  }
class C{  @Override public void processChallenge(final String challenge) throws MalformedChallengeException {  complete=true;}  }
class C{  public void save(Graph<V,E> g,Writer w,Function<V,String> vs,Function<E,Number> nev) throws IOException {  save(g,w,vs,nev,null);}  }
class C{  public void ResetRestitution(){  contact.resetRestitution();}  }
class C{  public boolean isIncremental(String var){  return incrementalVars.contains(var.replace("'",""));}  }
class C{  public static String match(String content,String pattern,boolean caseInsensitive){  Pattern p=null;  if (caseInsensitive) {    p=Pattern.compile(pattern,Pattern.CASE_INSENSITIVE);  } else {    p=Pattern.compile(pattern);  }  Matcher matcher=p.matcher(content);  while (matcher.find()) {    int groupCount=matcher.groupCount();    for (int i=1; i <= groupCount; i++) {      String result=matcher.group(i);      if (result != null && !result.isEmpty())       return result;    }  }  return null;}  }
class C{  public TwitLongerResponse post(final String status,final String user_name,final long in_reply_to_status_id,final String in_reply_to_screen_name) throws TwitLongerException {  final ArrayList<NameValuePair> args=new ArrayList<>();  args.add(new BasicNameValuePair("application",app_name));  args.add(new BasicNameValuePair("api_key",api_key));  args.add(new BasicNameValuePair("username",user_name));  args.add(new BasicNameValuePair("message",status));  if (in_reply_to_status_id > 0) {    args.add(new BasicNameValuePair("in_reply",Long.toString(in_reply_to_status_id)));    if (in_reply_to_screen_name != null && in_reply_to_screen_name.trim().length() != 0) {      args.add(new BasicNameValuePair("in_reply_user",in_reply_to_screen_name));    }  }  try {    final HttpClient httpclient=new DefaultHttpClient();    final HttpPost httppost=new HttpPost(TWITLONGER_API_POST);    httppost.setEntity(new UrlEncodedFormEntity(args,HTTP.UTF_8));    final HttpResponse response=httpclient.execute(httppost);    final StatusLine statusLine=response.getStatusLine();    final int statusCode=statusLine.getStatusCode();    if (statusCode >= 200 && statusCode <= 202)     return parseTwitLongerResponse(response.getEntity().getContent());    throw new TwitLongerException(statusLine.getReasonPhrase(),statusCode);  } catch (  final IOException e) {    throw new TwitLongerException(e);  }}  }
class C{  public static Object allocateInstance(Class cls) throws InstantiationException {  return UNSAFE.allocateInstance(cls);}  }
class C{  public void onToggleLevelPicker(View view){  showLevelPicker=!showLevelPicker;  mMap.getUiSettings().setIndoorLevelPickerEnabled(showLevelPicker);}  }
class C{  public int size(){  return mRows - mRowGapLength;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.bounds=(Rectangle2D)SerialUtilities.readShape(stream);}  }
class C{  private void updateActions(final INaviProject project){  m_loadProjectAction.setEnabled(!project.isLoaded());  if (m_addAddressSpaceAction != null) {    m_addAddressSpaceAction.setEnabled(project.isLoaded());  }  m_searchViewAction.setEnabled(project.isLoaded());  m_forwardAction.setEnabled(project.isLoaded());}  }
class C{  @Override protected char[] escape(int cp){  if (cp < safeOctets.length && safeOctets[cp]) {    return null;  } else   if (cp == ' ' && plusForSpace) {    return URI_ESCAPED_SPACE;  } else   if (cp <= 0x7F) {    char[] dest=new char[3];    dest[0]='%';    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];    dest[1]=UPPER_HEX_DIGITS[cp >>> 4];    return dest;  } else   if (cp <= 0x7ff) {    char[] dest=new char[6];    dest[0]='%';    dest[3]='%';    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[1]=UPPER_HEX_DIGITS[0xC | cp];    return dest;  } else   if (cp <= 0xffff) {    char[] dest=new char[9];    dest[0]='%';    dest[1]='E';    dest[3]='%';    dest[6]='%';    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp];    return dest;  } else   if (cp <= 0x10ffff) {    char[] dest=new char[12];    dest[0]='%';    dest[1]='F';    dest[3]='%';    dest[6]='%';    dest[9]='%';    dest[11]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[10]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp & 0x7];    return dest;  } else {    throw new IllegalArgumentException("Invalid unicode character value " + cp);  }}  }
class C{  protected void emit_AnnotatedN4MemberDeclaration_SemicolonKeyword_1_1_5_q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  @Deprecated public URI(final char[] escaped,final String charset) throws URIException, NullPointerException {  protocolCharset=charset;  parseUriReference(new String(escaped),true);}  }
class C{  @NotNull public static SaveDirectory from(File file) throws FileNotFoundException {  File currentFile=file;  SaveDirectory result=null;  if (currentFile == null) {  } else {    result=createValidSaveDirectory(currentFile);    currentFile=currentFile.getParentFile();    if (result != null) {      return result;    } else     if (currentFile == null) {    } else {      result=createValidSaveDirectory(currentFile);      currentFile=currentFile.getParentFile();      if (result != null) {        return result;      } else {      }    }  }  throw new FileNotFoundException("unable to load save directory: " + file);}  }
class C{  public void addListener(final IAddressSpaceListener listener){  m_listeners.addListener(listener);}  }
class C{  @RequestMapping(value="/jobDefinitions/namespaces/{namespace}/jobNames/{jobName}",method=RequestMethod.PUT,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_JOB_DEFINITIONS_PUT) public JobDefinition updateJobDefinition(@PathVariable("namespace") String namespace,@PathVariable("jobName") String jobName,@RequestBody JobDefinitionUpdateRequest request) throws Exception {  return jobDefinitionService.updateJobDefinition(namespace,jobName,request,true);}  }
class C{  public void execute(boolean store) throws Exception {  execute(store,true);}  }
class C{  public static void storeRootFilename(IProject project,String rootFilename){  final IPath path=new Path(rootFilename);  Assert.isTrue(ResourceHelper.isProjectParent(path.removeLastSegments(1),project),project.getLocation().toOSString() + " is *not* a subdirectory of " + rootFilename+ ". This is commonly caused by a symlink contained in the latter path.");  rootFilename=ResourceHelper.PARENT_ONE_PROJECT_LOC + path.lastSegment();  IEclipsePreferences projectPrefs=getProjectPreferences(project);  projectPrefs.put(IPreferenceConstants.P_PROJECT_ROOT_FILE,rootFilename);  storePreferences(projectPrefs);}  }
class C{  protected Button createSoftButton(String uiid){  Button b=new Button();  b.setUIID(uiid);  b.addActionListener(this);  b.setFocusable(false);  b.setTactileTouch(true);  updateSoftButtonStyle(b);  return b;}  }
class C{  public static int blockNestingLevel(PsiElement element){  int depth=0;  PsiElement current=findEnclosingBlock(element);  while (current != null) {    depth++;    current=findEnclosingBlock(current);  }  return depth;}  }
class C{  private Query makeQueryQuery(){  String wiql=selectedQueryDefinition.getQueryText();  if (haveFilters && workItemTypes.length > 0) {    final NodeSelect select=Parser.parseSyntax(wiql);    final Node where=select.getWhere();    Node addition;    if (workItemTypes.length == 1) {      addition=new NodeCondition(Condition.EQUALS,new NodeFieldName("System.WorkItemType"),new NodeString(workItemTypes[0].getName()));    } else {      final NodeOrOperator nodeOr=new NodeOrOperator();      for (int i=0; i < workItemTypes.length; i++) {        nodeOr.add(new NodeCondition(Condition.EQUALS,new NodeFieldName("System.WorkItemType"),new NodeString(workItemTypes[i].getName())));      }      addition=nodeOr;    }    if (where == null) {      select.setWhere(addition);    } else {      final NodeAndOperator nodeAnd=new NodeAndOperator();      nodeAnd.add(where);      nodeAnd.add(addition);      select.setWhere(nodeAnd);    }    wiql=select.toString();  }  return workItemClient.createQuery(wiql,WorkItemQueryUtils.makeContext(initialProject,WorkItemHelpers.getCurrentTeamName()));}  }
class C{  public synchronized void dragOver(DropTargetDragEvent dtde){  if (!active)   return;  if (dtListener != null && active)   dtListener.dragOver(dtde);  updateAutoscroll(dtde.getLocation());}  }
class C{  private static void sort1(long[] x,int off,int len){  if (len < 7) {    for (int i=off; i < len + off; i++)     for (int j=i; j > off && x[j - 1] > x[j]; j--)     swap(x,j,j - 1);    return;  }  int m=off + (len >> 1);  if (len > 7) {    int l=off;    int n=off + len - 1;    if (len > 40) {      int s=len / 8;      l=med3(x,l,l + s,l + 2 * s);      m=med3(x,m - s,m,m + s);      n=med3(x,n - 2 * s,n - s,n);    }    m=med3(x,l,m,n);  }  long v=x[m];  int a=off, b=a, c=off + len - 1, d=c;  while (true) {    while (b <= c && x[b] <= v) {      if (x[b] == v)       swap(x,a++,b);      b++;    }    while (c >= b && x[c] >= v) {      if (x[c] == v)       swap(x,c,d--);      c--;    }    if (b > c)     break;    swap(x,b++,c--);  }  int s, n=off + len;  s=Math.min(a - off,b - a);  vecswap(x,off,b - s,s);  s=Math.min(d - c,n - d - 1);  vecswap(x,b,n - s,s);  if ((s=b - a) > 1)   sort1(x,off,s);  if ((s=d - c) > 1)   sort1(x,n - s,s);}  }
class C{  public static PMML initPMML(){  PMML pmml=new PMML();  pmml.setVersion(PMML_VERSION);  Header header=new Header();  header.setCopyright("WEKA");  header.setApplication(new Application("WEKA",Version.VERSION));  pmml.setHeader(header);  return pmml;}  }
class C{  public int counter(){  return _ctr;}  }
class C{  public static void isAssignableTo(String argumentName,Object argumentObject,Class<?> targetClass){  notNull(argumentName,argumentObject);  if (!targetClass.isAssignableFrom(argumentObject.getClass())) {    throw new IllegalArgumentException(argumentName + " cannot be assigned to " + targetClass.getName());  }}  }
class C{  protected final void SSE2_NEG(boolean single,Instruction s,Operand result,Operand value){  if (VM.VerifyAssertions)   opt_assert(result.isRegister());  if (!result.similar(value)) {    EMIT(CPOS(s,MIR_Move.create(single ? IA32_MOVSS : IA32_MOVSD,result.copy(),value)));  }  Offset signMaskOffset=single ? floatSignMask : doubleSignMask;  EMIT(MIR_BinaryAcc.mutate(s,single ? IA32_XORPS : IA32_XORPD,result,loadFromJTOC(burs.ir,signMaskOffset,PARAGRAPH)));}  }
class C{  private synchronized static void log(int logType,String tag,String message,int methodCount){  if (settings.logLevel == LogLevel.NONE) {    return;  }  logTopBorder(logType,tag);  logHeaderContent(logType,tag,methodCount);  byte[] bytes=message.getBytes();  int length=bytes.length;  if (length <= CHUNK_SIZE) {    if (methodCount > 0) {      logDivider(logType,tag);    }    logContent(logType,tag,message);    logBottomBorder(logType,tag);    return;  }  if (methodCount > 0) {    logDivider(logType,tag);  }  for (int i=0; i < length; i+=CHUNK_SIZE) {    int count=Math.min(length - i,CHUNK_SIZE);    logContent(logType,tag,new String(bytes,i,count));  }  logBottomBorder(logType,tag);}  }
class C{  static boolean sleep(final double howMuch){  try {    Thread.sleep((int)(1000 * howMuch));    return true;  } catch (  @SuppressWarnings("unused") final InterruptedException __) {    return false;  }}  }
class C{  private void writeInternal(byte[] b,int off,int len) throws IOException {  try {    if (off == 0 && len == b.length && len <= owner.getBufferLength()) {      writeSegment(b);    } else {      int chunk=Math.min(owner.getBufferLength(),len);      byte[] buffer=new byte[chunk];      while (len > 0) {        chunk=Math.min(len,chunk);        if (chunk != buffer.length) {          buffer=new byte[chunk];        }        System.arraycopy(b,off,buffer,0,chunk);        writeSegment(buffer);        len-=chunk;        off+=chunk;      }    }  } catch (  SQLException ge) {    throw new IOException("Problem writing to FBBlobOutputStream: " + ge.getMessage(),ge);  }}  }
class C{  private static boolean allHaveEquality(UpdateStatement updateStmt,Collection<Column> vulnerableColumns){  ExpressionsHKeyScan hkeyScan=findInput(updateStmt,ExpressionsHKeyScan.class);  boolean allExact=(hkeyScan != null) && equalityConditionsPresent(vulnerableColumns,hkeyScan.getConditions());  if (!allExact) {    Select select=findInput(updateStmt,Select.class);    allExact=(select != null) && equalityConditionsPresent(vulnerableColumns,select.getConditions());  }  if (!allExact) {    SingleIndexScan singleIndex=findInput(updateStmt,SingleIndexScan.class);    allExact=(singleIndex != null) && equalityConditionsPresent(vulnerableColumns,singleIndex.getConditions());  }  return allExact;}  }
class C{  public StringMemberValue(int index,ConstPool cp){  super('s',cp);  this.valueIndex=index;}  }
class C{  public RabinKarp(String pat){  this.pat=pat;  R=256;  m=pat.length();  q=longRandomPrime();  RM=1;  for (int i=1; i <= m - 1; i++)   RM=(R * RM) % q;  patHash=hash(pat,m);}  }
class C{  public ParetoObjectiveComparator(){  super();}  }
class C{  public static String parsePlaceHolder(String path){  if (path == null)   return path;  if (path.startsWith("{temp")) {    if (path.startsWith("}",5))     path=new File(getTempDirectory(),path.substring(6)).toString(); else     if (path.startsWith("-dir}",5))     path=new File(getTempDirectory(),path.substring(10)).toString(); else     if (path.startsWith("-directory}",5))     path=new File(getTempDirectory(),path.substring(16)).toString();  } else   if (path.startsWith("{system")) {    if (path.charAt(7) == ':') {      int end=path.indexOf('}',8);      if (end > 8) {        String name=path.substring(8,end);        String prop=System.getProperty(name);        if (prop != null)         return new File(new File(prop),path.substring(end + 1)).getAbsolutePath();      }    } else     if (path.startsWith("}",7))     path=new File(getSystemDirectory(),path.substring(8)).toString(); else     if (path.startsWith("-dir}",7))     path=new File(getSystemDirectory(),path.substring(12)).toString(); else     if (path.startsWith("-directory}",7))     path=new File(getSystemDirectory(),path.substring(18)).toString();  } else   if (path.startsWith("{env:")) {    int end=path.indexOf('}',5);    if (end > 5) {      String name=path.substring(5,end);      String env=System.getenv(name);      if (env != null)       return new File(new File(env),path.substring(end + 1)).getAbsolutePath();    }  } else   if (path.startsWith("{home")) {    if (path.startsWith("}",5))     path=new File(getHomeDirectory(),path.substring(6)).toString(); else     if (path.startsWith("-dir}",5))     path=new File(getHomeDirectory(),path.substring(10)).toString(); else     if (path.startsWith("-directory}",5))     path=new File(getHomeDirectory(),path.substring(16)).toString();  }  if (path.startsWith("{classloader")) {    if (path.startsWith("}",12))     path=new File(getClassLoaderDirectory(),path.substring(13)).toString(); else     if (path.startsWith("-dir}",12))     path=new File(getClassLoaderDirectory(),path.substring(17)).toString(); else     if (path.startsWith("-directory}",12))     path=new File(getClassLoaderDirectory(),path.substring(23)).toString();  }  return path;}  }
class C{  public void addSize(long size){  this.size+=size;}  }
class C{  public void removeVideoSharing(String sharingId){  if (sLogger.isActivated()) {    sLogger.debug("Remove a video sharing");  }  mVideoSharingCache.remove(sharingId);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:37.882 -0500",hash_original_method="8262152376D5F60373B8E0AFA26377AD",hash_generated_method="BC119D8F436168A72D4F83C32096CA47") public boolean match(Object matchObj){  if (matchObj == null)   return true; else   if (!matchObj.getClass().equals(this.getClass()))   return false; else   if (matchObj == this)   return true;  SIPRequest that=(SIPRequest)matchObj;  RequestLine rline=that.requestLine;  if (this.requestLine == null && rline != null)   return false; else   if (this.requestLine == rline)   return super.match(matchObj);  return requestLine.match(that.requestLine) && super.match(matchObj);}  }
class C{  public Builder convertRatesTo(TimeUnit rateUnit){  this.rateUnit=rateUnit;  return this;}  }
class C{  @Override public void collectMetaInformation(final GamlProperties meta){  getDefinitionDescription().collectMetaInformation(meta);}  }
class C{  public CoapClient(){  this("");}  }
class C{  public FloatMatrix put(int[] indices,float v){  for (int i=0; i < indices.length; i++) {    put(indices[i],v);  }  return this;}  }
class C{  private void compileRegexPattern(){  if (null == regex) {    regex=Pattern.compile(getRegularExpression());  }}  }
class C{  public static long[] flipI(long[] v,int off){  final int wordindex=off >>> LONG_LOG2_SIZE;  v[wordindex]^=(1L << off);  return v;}  }
class C{  public boolean isDocOrdered(){  return true;}  }
class C{  public void multThisWithElement(int element){  if (!field.isElementOfThisField(element)) {    throw new ArithmeticException("Not an element of the finite field this polynomial is defined over.");  }  coefficients=multWithElement(coefficients,element);  computeDegree();}  }
class C{  private void createDefaultSearchPanel(){  setLayout(new BoxLayout(this,BoxPanel.Y_AXIS));  ;  add(createSearchButtonPanel());}  }
class C{  private void checkIsOpen() throws MqttPersistenceException {  if (clientDir == null) {    throw new MqttPersistenceException();  }}  }
class C{  public void sendToAll(){  sendTo(null);}  }
class C{  public void removeFromCFG(BasicBlock bb){  bb.deleteIn();  bb.deleteOut();}  }
class C{  public UTF8StreamWriter(OutputStream outputStream){  _bytes=new byte[2048];  _outputStream=outputStream;}  }
class C{  private void switchToTab(com.codename1.ui.Component c){  com.codename1.ui.Container p=c.getParent();  while (p != null) {    if (p.getUIID().equals("TabbedPane")) {      c.setSmoothScrolling(false);      p.setSmoothScrolling(false);      p.getParent().setSmoothScrolling(false);      ((com.codename1.ui.Tabs)p.getParent()).setSelectedIndex(p.getComponentIndex(c));      c.getComponentForm().revalidate();      return;    }    c=p;    p=c.getParent();  }}  }
class C{  public MHRPaySelectionCheck(MHRPaySelectionLine line,String PaymentRule){  this(line.getCtx(),0,line.get_TrxName());  setClientOrg(line);  setHR_PaySelection_ID(line.getHR_PaySelection_ID());  setAD_Org_ID(line.getHR_Movement().getAD_Org_ID());  int C_BPartner_ID=line.getHR_Movement().getC_BPartner_ID();  setC_BPartner_ID(C_BPartner_ID);  if (X_C_Order.PAYMENTRULE_DirectDebit.equals(PaymentRule)) {    MBPBankAccount[] bas=MBPBankAccount.getOfBPartner(line.getCtx(),C_BPartner_ID);    for (int i=0; i < bas.length; i++) {      MBPBankAccount account=bas[i];      if (account.isDirectDebit()) {        setC_BP_BankAccount_ID(account.getC_BP_BankAccount_ID());        break;      }    }  } else   if (X_C_Order.PAYMENTRULE_DirectDeposit.equals(PaymentRule)) {    MBPBankAccount[] bas=MBPBankAccount.getOfBPartner(line.getCtx(),C_BPartner_ID);    for (int i=0; i < bas.length; i++) {      MBPBankAccount account=bas[i];      if (account.isDirectDeposit()) {        setC_BP_BankAccount_ID(account.getC_BP_BankAccount_ID());        break;      }    }  }  setPaymentRule(PaymentRule);  setIsReceipt(line.isSOTrx());  setPayAmt(line.getPayAmt());  setDiscountAmt(line.getDiscountAmt());  setQty(1);}  }
class C{  public Solution(int numberOfVariables,int numberOfObjectives,int numberOfConstraints){  variables=new Variable[numberOfVariables];  objectives=new double[numberOfObjectives];  constraints=new double[numberOfConstraints];  attributes=new HashMap<String,Serializable>();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:25.883 -0500",hash_original_method="74532D23F47B58A7B943BD7A29A6F5A5",hash_generated_method="0688AD0FCF54E3601A33DFBBE5746A1C") public DERSequence(ASN1EncodableVector v){  for (int i=0; i != v.size(); i++) {    this.addObject(v.get(i));  }}  }
class C{  public SecurityCheckException(String message){  super(message);}  }
class C{  private static void parseTrun(TrackBundle trackBundle,long decodeTime,int flags,ParsableByteArray trun){  trun.setPosition(Atom.HEADER_SIZE);  int fullAtom=trun.readInt();  int atomFlags=Atom.parseFullAtomFlags(fullAtom);  Track track=trackBundle.track;  TrackFragment fragment=trackBundle.fragment;  DefaultSampleValues defaultSampleValues=fragment.header;  int sampleCount=trun.readUnsignedIntToInt();  if ((atomFlags & 0x01) != 0) {    fragment.dataPosition+=trun.readInt();  }  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;  int firstSampleFlags=defaultSampleValues.flags;  if (firstSampleFlagsPresent) {    firstSampleFlags=trun.readUnsignedIntToInt();  }  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;  long edtsOffset=0;  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {    edtsOffset=Util.scaleLargeTimestamp(track.editListMediaTimes[0],1000,track.timescale);  }  fragment.initTables(sampleCount);  int[] sampleSizeTable=fragment.sampleSizeTable;  int[] sampleCompositionTimeOffsetTable=fragment.sampleCompositionTimeOffsetTable;  long[] sampleDecodingTimeTable=fragment.sampleDecodingTimeTable;  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;  long timescale=track.timescale;  long cumulativeTime=decodeTime;  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == Track.TYPE_vide && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;  for (int i=0; i < sampleCount; i++) {    int sampleDuration=sampleDurationsPresent ? trun.readUnsignedIntToInt() : defaultSampleValues.duration;    int sampleSize=sampleSizesPresent ? trun.readUnsignedIntToInt() : defaultSampleValues.size;    int sampleFlags=(i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : sampleFlagsPresent ? trun.readInt() : defaultSampleValues.flags;    if (sampleCompositionTimeOffsetsPresent) {      int sampleOffset=trun.readInt();      sampleCompositionTimeOffsetTable[i]=(int)((sampleOffset * 1000) / timescale);    } else {      sampleCompositionTimeOffsetTable[i]=0;    }    sampleDecodingTimeTable[i]=Util.scaleLargeTimestamp(cumulativeTime,1000,timescale) - edtsOffset;    sampleSizeTable[i]=sampleSize;    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);    cumulativeTime+=sampleDuration;  }  fragment.nextFragmentDecodeTime=cumulativeTime;}  }
class C{  public SimpleEdgePortrayal2D(Paint edgePaint,Paint labelPaint){  this(edgePaint,edgePaint,labelPaint);}  }
class C{  public void createSubUsageScenario08() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.hoursToMillis(253.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO08_PERUNIT_HOUR",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_HOUR_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO08_PERUNIT_HOUR",serviceDetails,null,role);  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") - DateTimeHandling.hoursToMillis(85.4);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO08_PERUNIT_HOUR",subDetails);}  }
class C{  public synchronized void clear(){  mXY.clear();  initRange();}  }
class C{  public void disableProgress(){  this.enableProgress=false;}  }
class C{  public void clearLights(){  this.lightSources.clear();}  }
class C{  public SOAP12Service(final URI endpoint,final QName port){  super(endpoint,port);}  }
class C{  private boolean isAffirmative(final String input){  requireNonNull(input);  for (  final String affirmativeString : affirmativeStrings) {    if (input.equalsIgnoreCase(affirmativeString)) {      return true;    }  }  return false;}  }
class C{  public void add(TradelogDetail tradelogDetail){  this.tradelogDetail.add(tradelogDetail);}  }
class C{  public Zipper<A> forwards() throws NoSuchElementException {  return new Zipper<>(front.plus(back.head()),back.tail(),position + 1);}  }
class C{  public void updateInt(String columnName,int x) throws SQLException {  updateInt(findColumn(columnName),x);}  }
class C{  @Override public void buildClassifier(Instances instances) throws Exception {  init(instances);  if (m_bUseVariant1) {    optimize1();  } else {    optimize2();  }  wrapUp();}  }
class C{  private List<IRuntimeClasspathEntry> dependenciesForProject(IJavaProject project) throws CoreException {  ArrayList<IRuntimeClasspathEntry> out=new ArrayList<IRuntimeClasspathEntry>();  String[] deps=JavaRuntime.computeDefaultRuntimeClassPath(project);  for (  String dep : deps) {    IRuntimeClasspathEntry cpEntry=JavaRuntime.newArchiveRuntimeClasspathEntry(new Path(dep));    out.add(cpEntry);  }  return out;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:15.318 -0500",hash_original_method="0F3CD055205E18F01917D382EBA2EDD8",hash_generated_method="8BE42697A3029C89891D7182DE5D0221") private E dequeue(){  Node<E> h=head;  Node<E> first=h.next;  h.next=h;  head=first;  E x=first.item;  first.item=null;  return x;}  }
class C{  public void startNewStream(Reader reader,boolean isInternalEntity){  StackedReader oldReader=this.currentReader;  this.readers.push(this.currentReader);  this.currentReader=new StackedReader();  if (isInternalEntity) {    this.currentReader.lineReader=null;    this.currentReader.pbReader=new PushbackReader(reader,2);  } else {    this.currentReader.lineReader=new LineNumberReader(reader);    this.currentReader.pbReader=new PushbackReader(this.currentReader.lineReader,2);  }  this.currentReader.systemId=oldReader.systemId;  this.currentReader.publicId=oldReader.publicId;}  }
class C{  public EglCore(){  this(null,0);}  }
class C{  public Signer(final KeyPair keyPair){  this(keyPair,CryptoEngines.defaultEngine());}  }
class C{  static boolean isPrinting(Graphics g){  return (Boolean)invokeSwingUtilities2StaticMethod("isPrinting",new Class[]{Graphics.class},new Object[]{g});}  }
class C{  @Override public void endWindow(){  if (flag) {    max.emit(high);  }  flag=false;  high=null;}  }
class C{  public BasicPoolEntry allocEntry(final Object state){  if (!freeEntries.isEmpty()) {    ListIterator<BasicPoolEntry> it=freeEntries.listIterator(freeEntries.size());    while (it.hasPrevious()) {      BasicPoolEntry entry=it.previous();      if (LangUtils.equals(state,entry.getState())) {        it.remove();        return entry;      }    }  }  if (!freeEntries.isEmpty()) {    BasicPoolEntry entry=freeEntries.remove();    entry.setState(null);    OperatedClientConnection conn=entry.getConnection();    try {      conn.close();    } catch (    IOException ex) {      log.debug("I/O error closing connection",ex);    }    return entry;  }  return null;}  }
class C{  private void stubWarnIfOverwritesBytecode(String warning){  if (warnings.add(warning) && (warnIfStubOverwritesBytecode || debugStubParser)) {    processingEnv.getMessager().printMessage(javax.tools.Diagnostic.Kind.WARNING,"StubParser: " + warning);  }}  }
class C{  public boolean isProperAncestorOf(Node node1,Node node2){  return existsDirectedPathFromTo(node1,node2);}  }
class C{  public TeXIcon createTeXIcon(int style,float size){  return new TeXIconBuilder().setStyle(style).setSize(size).build();}  }
class C{  public static boolean isDefaultGracefulShutdownEnabled(){  return DEFAULT_GRACEFUL_SHUTDOWN_ENABLED;}  }
class C{  private void initProgram(){  glUseProgram(this.program);  vec3ArrayUniform=glGetUniformLocation(this.program,"cols");  chosenUniform=glGetUniformLocation(this.program,"chosen");  glUseProgram(0);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static boolean isNumber(String str){  if (StringUtils.isEmpty(str)) {    return false;  }  char[] chars=str.toCharArray();  int sz=chars.length;  boolean hasExp=false;  boolean hasDecPoint=false;  boolean allowSigns=false;  boolean foundDigit=false;  int start=(chars[0] == '-') ? 1 : 0;  if (sz > start + 1) {    if (chars[start] == '0' && chars[start + 1] == 'x') {      int i=start + 2;      if (i == sz) {        return false;      }      for (; i < chars.length; i++) {        if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {          return false;        }      }      return true;    }  }  sz--;  int i=start;  while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {    if (chars[i] >= '0' && chars[i] <= '9') {      foundDigit=true;      allowSigns=false;    } else     if (chars[i] == '.') {      if (hasDecPoint || hasExp) {        return false;      }      hasDecPoint=true;    } else     if (chars[i] == 'e' || chars[i] == 'E') {      if (hasExp) {        return false;      }      if (!foundDigit) {        return false;      }      hasExp=true;      allowSigns=true;    } else     if (chars[i] == '+' || chars[i] == '-') {      if (!allowSigns) {        return false;      }      allowSigns=false;      foundDigit=false;    } else {      return false;    }    i++;  }  if (i < chars.length) {    if (chars[i] >= '0' && chars[i] <= '9') {      return true;    }    if (chars[i] == 'e' || chars[i] == 'E') {      return false;    }    if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {      return foundDigit;    }    if (chars[i] == 'l' || chars[i] == 'L') {      return foundDigit && !hasExp;    }    return false;  }  return !allowSigns && foundDigit;}  }
class C{  private boolean shouldImport(Generator gen,Type type){  final DependencyManager mgr=gen.getDependencyMgr();  if (mgr.isIgnored(type.getName())) {    return false;  }  if (mgr.isLoaded(type.getName())) {    return false;  }  final Optional<String> current=mgr.getCurrentPackage();  final Optional<String> suggested=packageName(type.getName());  return !(current.isPresent() && suggested.isPresent() && current.get().equals(suggested.get()));}  }
class C{  public EditableOMPoint(OMPoint omc){  setGraphic(omc);}  }
class C{  final public boolean addElement(E e){  if (e == null)   throw new RuntimeException("oops");  if (numElements == maxElements)   doubleCapacity();  elements[numElements++]=e;  return true;}  }
class C{  @Ignore @Test public void testFetch() throws Exception {  contributorRepository.deleteAll();  statisticsRepository.deleteAll();  projectRepository.deleteAll();  String result=template.getForEntity(fetchUrl(),String.class).getBody();  assertThat(result,equalTo("OK"));  List<Statistics> statisticses=newArrayList(statisticsRepository.findAll());  List<Contributor> contributors=newArrayList(contributorRepository.findAll());  List<Project> projects=newArrayList(projectRepository.findAll());  assertThat(statisticses.size(),equalTo(2));  assertThat(projects.size(),equalTo(2));  assertThat(contributors.size(),equalTo(2));  Statistics statistics=sort(statisticses,"organizationName").get(0);  Project project=sort(projects,"organizationName").get(0);  assertThat(statistics.getOrganizationName(),equalTo("rwitzeltestorg"));  assertThat(project.getName(),equalTo("testrepo1"));  assertThat(contributors.get(0).getName(),equalTo("Rodrigo Witzel"));  assertThat(contributors.get(1).getName(),equalTo("Rodrigo Witzel"));}  }
class C{  public Map<String,Object> write(final Schema schema,final Map<String,Object> propertySet,final long writeTime){  return write(schema,propertySet,writeTime,null,null).asMap();}  }
class C{  DateTimeDatatype(String template){  super(makePattern(template));  this.template=template;  this.lexicalSpaceKey=makeLexicalSpaceKey(template);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public final void sendUrgentData(int data) throws SocketException {  throw new SocketException("This method is not supported " + "by SSLSockets");}  }
class C{  private IoBuffer encodeServerBW(ServerBW serverBW){  final IoBuffer out=IoBuffer.allocate(4);  out.putInt(serverBW.getBandwidth());  return out;}  }
class C{  public boolean isEligibleForQuery(String query){  query=query.toLowerCase();  return getName().toLowerCase().contains(query) || getNameCode().toLowerCase().contains(query) || getPhoneCode().toLowerCase().contains(query);}  }
class C{  ElementMetadataRegistry create(Schema schema){  return new ElementMetadataRegistry(schema,this);}  }
class C{  public void repaint(long tm,int x,int y,int width,int height){}  }
class C{  public static <T>T[] remove(T[] array,T objToRemove){  for (int i=0; i < array.length; i++) {    T elem=array[i];    if (areEqual(elem,objToRemove))     return removeAt(array,i);  }  return array;}  }
class C{  private BigDecimal parseNumber(NumberBuffer buffer){  BigDecimal sum=BigDecimal.ZERO;  BigDecimal result=parseLargePair(buffer);  if (result == null) {    return null;  }  while (result != null) {    sum=sum.add(result);    result=parseLargePair(buffer);  }  return sum;}  }
class C{  private boolean idCorrectFormat(String value){  return Character.isLowerCase(value.charAt(0)) && !value.contains("_") && !value.contains("-");}  }
class C{  public static double blackFormula(final Option.Type optionType,@Real final double strike,@Real final double forward,@StdDev final double stddev,@DiscountFactor final double discount){  return blackFormula(optionType,strike,forward,stddev,discount,0.0);}  }
class C{  @Override public void updateState(double currentTime){  this.secondInCycle++;  if (this.forcedExtensionActive) {    this.extensionTime++;    if (this.checkForcedExtensionCondition()) {      return;    } else {      this.forcedExtensionActive=false;    }  } else   if (this.extensionActive) {    this.extensionTime++;    if (this.checkExtensionCondition(currentTime,this.currentExtensionPoint)) {      return;    } else {      this.extensionActive=false;      this.currentExtensionPoint=null;    }  } else {    this.secondInSylviaCycle++;    if (this.forcedExtensionPointMap.containsKey(this.secondInSylviaCycle)) {      if (this.checkForcedExtensionCondition()) {        this.forcedExtensionActive=true;        return;      }    } else     if (this.extensionPointMap.containsKey(this.secondInSylviaCycle)) {      this.currentExtensionPoint=this.extensionPointMap.get(this.secondInSylviaCycle);      if (this.checkExtensionCondition(currentTime,this.currentExtensionPoint)) {        this.extensionActive=true;        return;      } else {        this.currentExtensionPoint=null;      }    }  }  List<Id<SignalGroup>> droppings=this.activeSylviaPlan.getDroppings(this.secondInSylviaCycle);  if (droppings != null) {    for (    Id<SignalGroup> groupId : droppings) {      this.system.scheduleDropping(currentTime,groupId);      this.greenGroupId2OnsetMap.remove(groupId);    }  }  List<Id<SignalGroup>> onsets=this.activeSylviaPlan.getOnsets(this.secondInSylviaCycle);  if (onsets != null) {    for (    Id<SignalGroup> groupId : onsets) {      this.system.scheduleOnset(currentTime,groupId);      this.greenGroupId2OnsetMap.put(groupId,currentTime);    }  }  if (this.secondInSylviaCycle == this.activeSylviaPlan.getCycleTime() - 1) {    this.initCycle();  }}  }
class C{  private static boolean winRegistryValueExists(String key,String value){  return Advapi32Util.registryKeyExists(WinReg.HKEY_LOCAL_MACHINE,key) && Advapi32Util.registryValueExists(WinReg.HKEY_LOCAL_MACHINE,key,value);}  }
class C{  public void imprimirentradaExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));  GestionPrestamosBI prestamosService=services.lookupGestionPrestamosBI();  ArrayList udocs=(ArrayList)getFromTemporalSession(request,PrestamosConstants.LISTA_UDOCS_DEVUELTAS);  Collection detalles=prestamosService.getDetallesUDocs(udocs);  if (detalles != null && detalles.size() > 0) {    setInTemporalSession(request,ConsultaUnidadesDocumentalesConstants.DETALLES_UDOCS_KEY,detalles);    setReturnActionFordward(request,mappings.findForward("imprimir_entrada"));  }}  }
class C{  @SuppressWarnings({"UnnecessaryLocalVariable"}) public static Sector parseUTM(double[] values,int imageWidth,int imageHeight,int zone,String hemisphere){  if (values.length < 6) {    String message=Logging.getMessage("WorldFile.TooFewWorldFileValues");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (imageWidth <= 0 || imageHeight <= 0) {    String message=Logging.getMessage("generic.InvalidImageSize");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (zone < 1 || zone > 60) {    String message=Logging.getMessage("generic.ZoneIsInvalid",zone);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (!AVKey.NORTH.equals(hemisphere) && !AVKey.SOUTH.equals(hemisphere)) {    String msg=Logging.getMessage("generic.HemisphereIsInvalid",hemisphere);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  double A=values[0];  double D=values[1];  double B=values[2];  double E=values[3];  double C=values[4];  double F=values[5];  double ULx=C;  double ULy=F;  double LRx=A * (imageWidth - 1) + B * (imageHeight - 1) + ULx;  double LRy=D * (imageWidth - 1) + E * (imageHeight - 1) + ULy;  UTMCoord UL=UTMCoord.fromUTM(zone,hemisphere,ULx,ULy);  UTMCoord LR=UTMCoord.fromUTM(zone,hemisphere,LRx,LRy);  Sector sector=new Sector(LR.getLatitude(),UL.getLatitude(),UL.getLongitude(),LR.getLongitude());  if (!sector.isWithinLatLonLimits()) {    String message=Logging.getMessage("generic.SectorNotGeographic");    Logging.logger().severe(message);    throw new IllegalStateException(message);  }  return sector;}  }
class C{  @SuppressWarnings("deprecation") public boolean containsOnly(int blockId){  for (  Block b : this) {    if (b.getTypeId() != blockId)     return false;  }  return true;}  }
class C{  public dt(String value){  addElement(value);}  }
class C{  public static void showDebuggerOptionsDialogAlways(final JFrame parent,final DebugTargetSettings target,final IDebugger debugger){  Preconditions.checkNotNull(parent,"IE01559: Parent argument can not be null");  Preconditions.checkNotNull(target,"IE01560: Target argument can not be null");  Preconditions.checkNotNull(debugger,"IE01561: Debugger argument can not be null");  final TargetInformation targetInformation=debugger.getProcessManager().getTargetInformation();  if (targetInformation == null) {    CMessageBox.showInformation(parent,"Debugger information can not be shown before the debugger is active.");    return;  }  DebuggerOptions options=targetInformation.getDebuggerOptions();  if (options == null) {    CMessageBox.showInformation(parent,"Debugger information can not be shown before the debugger is active.");    return;  }  if (!debugger.isConnected()) {    CMessageBox.showInformation(parent,"Debugger information can not be shown since the debugger is not currently connected.");    return;  }  try {    options.setExceptions(new ArrayList<DebuggerException>(mergeExceptionsSettings(target,options.getExceptions(),debugger.getId())));  } catch (  final CouldntLoadDataException exception) {    CUtilityFunctions.logException(exception);    final String message="Exception settings could not be loaded.";    final String description=CUtilityFunctions.createDescription(String.format("BinNavi could not load the exception settings from the database."),new String[]{"Communication error while contacting the database"},new String[]{"BinNavi is unable to show the debugger options dialog until the problem is resolved." + " The default debugger options will be used during this session."});    NaviErrorDialog.show(parent,message,description,exception);  }  final DebuggerEventSettings eventSettings=readDebuggerEventSettings(parent,debugger,target);  final COptionsDialog dlg=new COptionsDialog(parent,options,eventSettings);  dlg.setVisible(true);  options=dlg.getDebuggerOptions();  try {    writeDebuggerExceptionSettings(options,target,debugger.getId());    writeDebuggerEventSettings(debugger,target,dlg.getDebuggerEventSettings());  } catch (  final CouldntSaveDataException exception) {    CUtilityFunctions.logException(exception);    CUtilityFunctions.logException(exception);    final String message="Exception settings could not be written.";    final String description=CUtilityFunctions.createDescription(String.format("BinNavi could not write the debugger options to the database."),new String[]{"Communication error while contacting the database"},new String[]{"BinNavi is unable to store the debugger options in the database.","Nevertheless, the debugger options will be sent to the debugger."});    NaviErrorDialog.show(parent,message,description,exception);  }  sendExceptionSettings(parent,debugger,options.getExceptions());  sendDebuggerEventSettings(parent,debugger,target);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  private static void objectToString(final StringBuilder sb,final Object obj,final String prefix){  if (obj instanceof Iterable) {    iterableToString(sb,(Iterable<?>)obj,prefix);    return;  }  final Class<?> clazz=obj.getClass();  if (toStringDeclared(clazz)) {    sb.append(prefix);    sb.append(obj.toString());  } else {    toString(obj,sb,prefix + "  ");  }}  }
class C{  void recycleCurrentGroup(){  currentGroup=domTreeManager.getDOMFactory().createElementNS(SVG_NAMESPACE_URI,SVG_G_TAG);}  }
class C{  private void writeJarFiles(final String dirPath,final String[] jarNames,final byte[][] jarBytes){  for (int i=0; i < jarNames.length; i++) {    String filePath=FilenameUtils.concat(dirPath,jarNames[i]);    File jarFile=new File(filePath);    try {      FileUtils.writeByteArrayToFile(jarFile,jarBytes[i]);    } catch (    IOException e) {      logger.info(e);    }  }}  }
class C{  public Boolean isAll(){  return all;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public boolean clearBut(TrayPreferences... modules){  return mProviderHelper.clearBut(modules);}  }
class C{  public void testShiftRight1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=0;  byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftRight(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public CpuState(int freq,long duration){  this.freq=freq;  this.duration=duration;}  }
class C{  public void cast_numeric(Type from,Type to){  if (from != to) {    if (from == Type.DOUBLE_TYPE) {      if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Constants.D2F);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Constants.D2L);      } else {        mv.visitInsn(Constants.D2I);        cast_numeric(Type.INT_TYPE,to);      }    } else     if (from == Type.FLOAT_TYPE) {      if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Constants.F2D);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Constants.F2L);      } else {        mv.visitInsn(Constants.F2I);        cast_numeric(Type.INT_TYPE,to);      }    } else     if (from == Type.LONG_TYPE) {      if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Constants.L2D);      } else       if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Constants.L2F);      } else {        mv.visitInsn(Constants.L2I);        cast_numeric(Type.INT_TYPE,to);      }    } else {      if (to == Type.BYTE_TYPE) {        mv.visitInsn(Constants.I2B);      } else       if (to == Type.CHAR_TYPE) {        mv.visitInsn(Constants.I2C);      } else       if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Constants.I2D);      } else       if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Constants.I2F);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Constants.I2L);      } else       if (to == Type.SHORT_TYPE) {        mv.visitInsn(Constants.I2S);      }    }  }}  }
class C{  public void closeSoftKeyboard(){  mCardNumber.closeSoftKeyboard();}  }
class C{  public void resetSyntax(){  for (int i=0; i < 256; i++) {    tokenTypes[i]=0;  }}  }
class C{  public void saveFile(){  ArffPanel panel;  String filename;  AbstractSaver saver;  panel=getCurrentPanel();  if (panel == null) {    return;  }  filename=panel.getFilename();  if (filename.equals(ArffPanel.TAB_INSTANCES)) {    saveFileAs();  } else {    saver=ConverterUtils.getSaverForFile(filename);    try {      saver.setFile(new File(filename));      saver.setInstances(panel.getInstances());      saver.writeBatch();      panel.setChanged(false);      setCurrentFilename(filename);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  private Chunk captureLayers(View rootView){  ByteArrayOutputStream b=new ByteArrayOutputStream(1024);  DataOutputStream dos=new DataOutputStream(b);  try {    ViewDebug.captureLayers(rootView,dos);  } catch (  IOException e) {    return createFailChunk(1,"Unexpected error while obtaining view hierarchy: " + e.getMessage());  } finally {    try {      dos.close();    } catch (    IOException e) {    }  }  byte[] data=b.toByteArray();  return new Chunk(CHUNK_VURT,data,0,data.length);}  }
class C{  public void testDeployableDirIsAutoDeploy(){  String name=this.deployer.getDeployableDir(null).replaceAll("\\\\","/");  assertEquals(DOMAIN_HOME + "/autodeploy",name);}  }
class C{  private void createOrganizerThreads(){  AOSOptions opts=Controller.options;  if (opts.sampling()) {    Controller.methodSamples=new MethodCountData();    Controller.organizers.add(new MethodSampleOrganizer(opts.DERIVED_FILTER_OPT_LEVEL));    if (opts.ADAPTIVE_INLINING) {      Organizer decayOrganizer=new DecayOrganizer(new YieldCounterListener(opts.DECAY_FREQUENCY));      Controller.organizers.add(decayOrganizer);      createDynamicCallGraphOrganizer();    }  }  if ((!opts.ENABLE_PRECOMPILE) && (!opts.ENABLE_BULK_COMPILE)) {    Controller.osrOrganizer=new OSROrganizerThread();    Controller.osrOrganizer.start();  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  GoogleOAuthHelper createOAuthHelper(OAuthHmacSha1Signer oauthSigner){  return new GoogleOAuthHelper(oauthSigner);}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  public void applyCurrentConnection(List<Neuron> source,List<Neuron> target){  List<Synapse> retList=null;  if (currentConnector == allToAll) {    retList=((AllToAll)currentConnector).connectAllToAll(source,target);  } else   if (currentConnector == oneToOne) {    retList=((OneToOne)currentConnector).connectOneToOne(source,target);  } else   if (currentConnector == sparse) {    retList=((Sparse)currentConnector).connectSparse(source,target);  }  if (retList != null) {    ConnectionUtilities.polarizeSynapses(retList,excitatoryRatio);    if (this.isUseExcitatoryRandomization()) {      ConnectionUtilities.randomizeExcitatorySynapses(retList,exRandomizer);    }    if (this.isUseInhibitoryRandomization()) {      ConnectionUtilities.randomizeInhibitorySynapses(retList,exRandomizer);    }  }}  }
class C{  public static boolean isNull(Timestamp timestamp){  return ((timestamp == null) || (timestamp.getTime() == NULL_TIME));}  }
class C{  public static void scale(Mat img,Size approxSize){  scale(img,approxSize,false,false);}  }
class C{  public FilterEditorException(){  super();}  }
class C{  private Style createResolvedStyle(String selector,Vector elements,HTML.Tag t){  int numElements=elements.size();  String tags[]=new String[numElements];  String ids[]=new String[numElements];  String classes[]=new String[numElements];  for (int counter=0; counter < numElements; counter++) {    Element e=(Element)elements.elementAt(counter);    AttributeSet attr=e.getAttributes();    if (counter == 0 && e.isLeaf()) {      Object testAttr=attr.getAttribute(t);      if (testAttr instanceof AttributeSet) {        attr=(AttributeSet)testAttr;      } else {        attr=null;      }    }    if (attr != null) {      HTML.Tag tag=(HTML.Tag)attr.getAttribute(StyleConstants.NameAttribute);      if (tag != null) {        tags[counter]=tag.toString();      } else {        tags[counter]=null;      }      if (attr.isDefined(HTML.Attribute.CLASS)) {        classes[counter]=attr.getAttribute(HTML.Attribute.CLASS).toString();      } else {        classes[counter]=null;      }      if (attr.isDefined(HTML.Attribute.ID)) {        ids[counter]=attr.getAttribute(HTML.Attribute.ID).toString();      } else {        ids[counter]=null;      }    } else {      tags[counter]=ids[counter]=classes[counter]=null;    }  }  tags[0]=t.toString();  return createResolvedStyle(selector,tags,ids,classes);}  }
class C{  public KeyedValuesItemKey(Comparable<? extends Object> key){  ParamChecks.nullNotPermitted(key,"key");  this.key=key;}  }
class C{  public static Label createLabel(Composite parent,String text,Font font,int hspan){  Label l=new Label(parent,SWT.NONE);  l.setFont(font);  if (text != null) {    l.setText(text);  }  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=hspan;  l.setLayoutData(gd);  return l;}  }
class C{  private void checkCalibrationOutOfTime(){  if ((calibrationFactor > 0) && (calibrationStatus != MedtronicConstants.WITHOUT_ANY_CALIBRATION) && calibrationStatus != MedtronicConstants.LAST_CALIBRATION_FAILED_USING_PREVIOUS && calibrationStatus != MedtronicConstants.CALIBRATION_MORE_THAN_12H_OLD) {    if (lastCalibrationDate > 0 && (System.currentTimeMillis() - lastCalibrationDate) > MedtronicConstants.TIME_12_HOURS_IN_MS) {      calibrationStatus=MedtronicConstants.CALIBRATION_MORE_THAN_12H_OLD;      SharedPreferences.Editor editor=settings.edit();      editor.putInt("calibrationStatus",calibrationStatus);      editor.commit();    }  }}  }
class C{  private void updateHeadersWithStaticHeaders(final MultiMap queueHeaders,final Map<String,String> staticHeaders){  if (staticHeaders != null) {    for (    Map.Entry<String,String> entry : staticHeaders.entrySet()) {      String entryValue=entry.getValue();      if (entryValue != null && entryValue.length() > 0) {        queueHeaders.set(entry.getKey(),entry.getValue());      } else {        queueHeaders.remove(entry.getKey());      }    }  }}  }
class C{  public static HistoryEvent createAdded(long timestamp,Recordable recordable,String referrer){  return new RecordableHistoryEvent(ADDED_TYPE,timestamp,recordable,referrer,"added");}  }
class C{  public SlidingActivityHelper(Activity activity){  mActivity=activity;}  }
class C{  private boolean hasImproved(double fitnessBefore,TestSuiteChromosome individual,LocalSearchObjective<TestSuiteChromosome> objective){  return objective.isMaximizationObjective() ? fitnessBefore < individual.getFitness() : fitnessBefore > individual.getFitness();}  }
class C{  public HttpAuthenticationException(){  super();}  }
class C{  public void remove(String name){  if (impl.formalArguments == null) {    if (impl.hasFormalArgs) {      throw new IllegalArgumentException("no such attribute: " + name);    }    return;  }  FormalArgument arg=impl.formalArguments.get(name);  if (arg == null) {    throw new IllegalArgumentException("no such attribute: " + name);  }  locals[arg.index]=EMPTY_ATTR;}  }
class C{  public boolean coordinateInZone(Id<ActivityFacility> zoneID,Coord coordinate){  Point point=MGC.xy2Point(coordinate.getX(),coordinate.getY());  return pointInZone(zoneID,point);}  }
class C{  private void init(SSLParametersImpl sslParameters,String[] enabledProtocols,String[] enabledCipherSuites) throws IOException {  this.sslParameters=sslParameters;  this.enabledProtocols=enabledProtocols;  this.enabledCipherSuites=enabledCipherSuites;}  }
class C{  public SealedObject(Serializable object,Cipher c) throws IOException, IllegalBlockSizeException {  ByteArrayOutputStream b=new ByteArrayOutputStream();  ObjectOutput a=new ObjectOutputStream(b);  byte[] content;  try {    a.writeObject(object);    a.flush();    content=b.toByteArray();  }  finally {    a.close();  }  try {    this.encryptedContent=c.doFinal(content);  } catch (  BadPaddingException ex) {  }  if (c.getParameters() != null) {    this.encodedParams=c.getParameters().getEncoded();    this.paramsAlg=c.getParameters().getAlgorithm();  }  this.sealAlg=c.getAlgorithm();}  }
class C{  public boolean checkUpdateAfterCondition(Set<MultiKey<EventBean>> newEvents,StatementContext statementContext){  return isAfterConditionSatisfied || checkAfterCondition(newEvents == null ? 0 : newEvents.size(),statementContext);}  }
class C{  @Override public boolean next() throws SQLException {  try {    debugCodeCall("next");    checkClosed();    return nextRow();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public final void writeUTF(java.lang.String str) throws java.io.IOException {  return;}  }
class C{  public String fastDistanceCalcTipText(){  return "Uses cut-off values for speeding up distance calculation, but " + "suppresses also the calculation and output of the within cluster sum " + "of squared errors/sum of distances.";}  }
class C{  static boolean isValidEnum(final Class<?> type){  if (type == null) {    return false;  }  if (type.isEnum()) {    return true;  }  final Method m;  try {    final String valuesMethod="values";    m=type.getDeclaredMethod(valuesMethod);    if (m == null) {      return false;    }  } catch (  final SecurityException|NoSuchMethodException e) {    return false;  }  if (!Modifier.isStatic(m.getModifiers())) {    return false;  }  final Class<?> returnType=m.getReturnType();  if (!returnType.isArray()) {    return false;  }  final Method v;  try {    final String valueOfMethod="valueOf";    v=type.getMethod(valueOfMethod,String.class);    if (v == null) {      return false;    }  } catch (  final SecurityException|NoSuchMethodException e) {    return false;  }  if (!Modifier.isStatic(v.getModifiers())) {    return false;  }  final Class<?> returnTypev=v.getReturnType();  if (!type.isAssignableFrom(returnTypev)) {    return false;  }  return true;}  }
class C{  public static CCRenderTexture renderTexture(int width,int height){  return new CCRenderTexture(width,height);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == NamedElement.class) {switch (baseFeatureID) {case BasePackage.NAMED_ELEMENT__NAME:      return TypesPackage.DECLARATION__NAME;default :    return -1;}}if (baseClass == AnnotatableElement.class) {switch (baseFeatureID) {case TypesPackage.ANNOTATABLE_ELEMENT__ANNOTATIONS:  return TypesPackage.DECLARATION__ANNOTATIONS;default :return -1;}}if (baseClass == PackageMember.class) {switch (baseFeatureID) {case TypesPackage.PACKAGE_MEMBER__ID:return TypesPackage.DECLARATION__ID;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public static FieldAnnotation isRead(Instruction ins,ConstantPoolGen cpg){  if (ins instanceof GETFIELD || ins instanceof GETSTATIC) {    FieldInstruction fins=(FieldInstruction)ins;    String className=fins.getClassName(cpg);    return new FieldAnnotation(className,fins.getName(cpg),fins.getSignature(cpg),fins instanceof GETSTATIC);  } else {    return null;  }}  }
class C{  public void testZeroPosIncrSloppyMpqAnd() throws IOException {  final MultiPhraseQuery.Builder mpqb=new MultiPhraseQuery.Builder();  int pos=-1;  for (  Token tap : INCR_0_QUERY_TOKENS_AND) {    pos+=tap.getPositionIncrement();    mpqb.add(new Term[]{new Term("field",tap.toString())},pos);  }  doTestZeroPosIncrSloppy(mpqb.build(),0);  mpqb.setSlop(1);  doTestZeroPosIncrSloppy(mpqb.build(),0);  mpqb.setSlop(2);  doTestZeroPosIncrSloppy(mpqb.build(),1);}  }
class C{  public void addExtension(String oid,boolean critical,ASN1Encodable value){  this.addExtension(new DERObjectIdentifier(oid),critical,value);}  }
class C{  public NodeLoader(){  this(null);}  }
class C{  public AABB growToContainPoint(ReadonlyVec3D p){  min.minSelf(p);  max.maxSelf(p);  set(min.interpolateTo(max,0.5f));  extent.set(max.sub(min).scaleSelf(0.5f));  return this;}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem())   return;  String s=new String(ch,start,length);  append(m_doc.createTextNode(s));}  }
class C{  public int romanToInt(String s){  int res=0;  if (s == null || s.length() == 0) {    return res;  }  int len=s.length() - 1;  for (int i=len; i >= 0; i--) {    char c=s.charAt(i);switch (c) {case 'M':      res+=1000;    break;case 'D':  res+=500;break;case 'C':res+=100 * (res >= 500 ? -1 : 1);break;case 'L':res+=50;break;case 'X':res+=10 * (res >= 50 ? -1 : 1);break;case 'V':res+=5;break;case 'I':res+=(res >= 5 ? -1 : 1);break;default :break;}}return res;}  }
class C{  public TermsByQueryRequest expectedTerms(Long expectedTerms){  this.expectedTerms=expectedTerms;  return this;}  }
class C{  public boolean translateLeftRecursiveRule(GrammarRootAST ast,LeftRecursiveRule r,String language){  GrammarAST prevRuleAST=r.ast;  String ruleName=prevRuleAST.getChild(0).getText();  LeftRecursiveRuleAnalyzer leftRecursiveRuleWalker=new LeftRecursiveRuleAnalyzer(prevRuleAST,tool,ruleName,language);  boolean isLeftRec;  try {    isLeftRec=leftRecursiveRuleWalker.rec_rule();  } catch (  RecognitionException re) {    isLeftRec=false;  }  if (!isLeftRec)   return false;  GrammarAST RULES=(GrammarAST)ast.getFirstChildWithType(ANTLRParser.RULES);  String newRuleText=leftRecursiveRuleWalker.getArtificialOpPrecRule();  RuleAST t=parseArtificialRule(prevRuleAST.g,newRuleText);  ((GrammarAST)t.getChild(0)).token=((GrammarAST)prevRuleAST.getChild(0)).getToken();  RULES.setChild(prevRuleAST.getChildIndex(),t);  r.ast=t;  GrammarTransformPipeline transform=new GrammarTransformPipeline(g,g.tool);  transform.reduceBlocksToSets(r.ast);  transform.expandParameterizedLoops(r.ast);  RuleCollector ruleCollector=new RuleCollector(g);  ruleCollector.visit(t,"rule");  BasicSemanticChecks basics=new BasicSemanticChecks(g,ruleCollector);  basics.checkAssocElementOption=false;  basics.visit(t,"rule");  r.recPrimaryAlts=new ArrayList<LeftRecursiveRuleAltInfo>();  r.recPrimaryAlts.addAll(leftRecursiveRuleWalker.prefixAndOtherAlts);  if (r.recPrimaryAlts.isEmpty()) {    tool.errMgr.grammarError(ErrorType.NO_NON_LR_ALTS,g.fileName,((GrammarAST)r.ast.getChild(0)).getToken(),r.name);  }  r.recOpAlts=new OrderedHashMap<Integer,LeftRecursiveRuleAltInfo>();  r.recOpAlts.putAll(leftRecursiveRuleWalker.binaryAlts);  r.recOpAlts.putAll(leftRecursiveRuleWalker.ternaryAlts);  r.recOpAlts.putAll(leftRecursiveRuleWalker.suffixAlts);  setAltASTPointers(r,t);  ActionAST arg=(ActionAST)r.ast.getFirstChildWithType(ANTLRParser.ARG_ACTION);  if (arg != null) {    r.args=ScopeParser.parseTypedArgList(arg,arg.getText(),g);    r.args.type=AttributeDict.DictType.ARG;    r.args.ast=arg;    arg.resolver=r.alt[1];  }  for (  Pair<GrammarAST,String> pair : leftRecursiveRuleWalker.leftRecursiveRuleRefLabels) {    GrammarAST labelNode=pair.a;    GrammarAST labelOpNode=(GrammarAST)labelNode.getParent();    GrammarAST elementNode=(GrammarAST)labelOpNode.getChild(1);    LabelElementPair lp=new LabelElementPair(g,labelNode,elementNode,labelOpNode.getType());    r.alt[1].labelDefs.map(labelNode.getText(),lp);  }  r.leftRecursiveRuleRefLabels=leftRecursiveRuleWalker.leftRecursiveRuleRefLabels;  tool.log("grammar","added: " + t.toStringTree());  return true;}  }
class C{  private void clearFlags(int clearedFlags){  flags=getLayoutFlags() & ~clearedFlags;}  }
class C{  public MultiSearchRequest add(SearchRequest request){  requests.add(request);  return this;}  }
class C{  static Map<ServerLocation,Object> submitBulkOp(List callableTasks,ClientMetadataService cms,LocalRegion region,Map<ServerLocation,RuntimeException> failedServers){  if (callableTasks != null && !callableTasks.isEmpty()) {    Map<ServerLocation,Object> resultMap=new HashMap<ServerLocation,Object>();    boolean anyPartialResults=false;    List futures=null;    try {      futures=execService.invokeAll(callableTasks);    } catch (    RejectedExecutionException rejectedExecutionEx) {      throw rejectedExecutionEx;    }catch (    InterruptedException e) {      throw new InternalGemFireException(e.getMessage());    }    if (futures != null) {      Iterator futureItr=futures.iterator();      Iterator taskItr=callableTasks.iterator();      RuntimeException rte=null;      final boolean isDebugEnabled=logger.isDebugEnabled();      while (futureItr.hasNext() && !execService.isShutdown() && !execService.isTerminated()) {        Future fut=(Future)futureItr.next();        SingleHopOperationCallable task=(SingleHopOperationCallable)taskItr.next();        ServerLocation server=task.getServer();        try {          VersionedObjectList versions=(VersionedObjectList)fut.get();          if (logger.isDebugEnabled()) {            logger.debug("submitBulkOp#got result from {}:{}",server,versions);          }          resultMap.put(server,versions);        } catch (        InterruptedException e) {          InternalGemFireException ige=new InternalGemFireException(e);          failedServers.put(server,ige);          if (rte == null) {            rte=ige;          }        }catch (        ExecutionException ee) {          if (ee.getCause() instanceof ServerOperationException) {            if (logger.isDebugEnabled()) {              logger.debug("submitBulkOp#ExecutionException from server {}",server,ee);            }            ServerOperationException soe=(ServerOperationException)ee.getCause();            failedServers.put(server,soe);            if (rte == null) {              rte=soe;            }          } else           if (ee.getCause() instanceof ServerConnectivityException) {            if (logger.isDebugEnabled()) {              logger.debug("submitBulkOp#ExecutionException for server {}",server,ee);            }            cms=region.getCache().getClientMetadataService();            cms.removeBucketServerLocation(server);            cms.scheduleGetPRMetaData(region,false);            failedServers.put(server,(ServerConnectivityException)ee.getCause());          } else {            Throwable t=ee.getCause();            if (t instanceof PutAllPartialResultException) {              resultMap.put(server,t);              anyPartialResults=true;              failedServers.put(server,(PutAllPartialResultException)t);            } else {              RuntimeException other_rte=executionThrowable(ee.getCause());              failedServers.put(server,other_rte);              if (rte == null) {                rte=other_rte;              }            }          }        }      }      if (rte != null && !anyPartialResults) {        throw rte;      }    }    return resultMap;  }  return null;}  }
class C{  private static Recharge buildDataRecharge(String title){  Recharge.Amount amount=new Recharge.Amount(1,PlanConstants.DATA_STEP_AMOUNT);  Recharge.MetaData metaData=new Recharge.MetaData(title,PlanConstants.DATA_UNIT,R.drawable.data_dark_gray);  return new Recharge(amount,PlanConstants.DATA_DOLLARS_PER_STEP,metaData);}  }
class C{  public void clear(){  m_keys.clear();  m_values.clear();}  }
class C{  @Override public BindRequest connectAndOutbind(String host,int port,String systemId,String password,long timeout) throws IOException {  return connectAndOutbind(host,port,new OutbindParameter(systemId,password),timeout);}  }
class C{  public boolean minValue(int val,int minVal){  return GenericValidator.minValue(val,minVal);}  }
class C{  public static String validateCreditCardVV(String creditCardVV){  if (creditCardVV == null)   return "";  int length=checkNumeric(creditCardVV).length();  if (length == 3 || length == 4)   return "";  try {    Integer.parseInt(creditCardVV);    return "";  } catch (  NumberFormatException ex) {    s_log.fine("validateCreditCardVV - " + ex);  }  s_log.fine("validateCreditCardVV - length=" + length);  return "CreditCardVVError";}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void createMemoryFromTemplate(String database,boolean templateIsSchema,String template,boolean isSchema){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private boolean subscribe() throws JSONException, IOException {  JSONObject postJSON=new JSONObject();  JSONObject bodyJSON=new JSONObject();  bodyJSON.put(KEY_ACTION,"subscribe");  bodyJSON.put(KEY_TYPE,"pns_peer");  bodyJSON.put(KEY_PNS_TOKEN,ESP_PNS_TOKEN);  bodyJSON.put(KEY_PEER_TOKEN,getPeerToken());  JSONObject metaJSON=new JSONObject();  metaJSON.put(KEY_AUTHORIZATION,"token " + mUser.getUserKey());  postJSON.put(KEY_PATH,"/v1/mbox/");  postJSON.put(KEY_METHOD,"POST");  postJSON.put(KEY_BODY,bodyJSON);  postJSON.put(KEY_META,metaJSON);  post(postJSON.toString());  String response=receive();  log.info("subscribe response = " + response);  if (response == null) {    return false;  }  JSONObject reponseJSON=new JSONObject(response);  int httpStatus=reponseJSON.getInt(KEY_STATUS);  return httpStatus == HttpStatus.SC_OK;}  }
class C{  public static <T>T result(Future<T> result) throws IOException {  return result(result,Duration.Top());}  }
class C{  @HLEFunction(nid=0x7945ECDA,version=150) public int sceNetAdhocMatchingTerm(){  isInitialized=false;  return 0;}  }
class C{  public void httpTransferPausedByRemote(){}  }
class C{  public CDefaultModifier(final ZyGraphViewSettings settings,final BackEndDebuggerProvider provider){  m_settings=Preconditions.checkNotNull(settings,"IE02109: Settings argument can not be null");  m_provider=Preconditions.checkNotNull(provider,"IE02110: Provider argument can not be null");}  }
class C{  public boolean isAutoJoin(){  return autoJoin;}  }
class C{  public Statement in(Statement stmt){  statement.append(" IN (").append(stmt).append(')');  return this;}  }
class C{  public static Bundle buildArguments(InboxType inboxType){  Bundle args=new Bundle();  args.putInt(ARG_INBOX_TYPE,inboxType.ordinal());  return args;}  }
class C{  public void pauseApp(){}  }
class C{  public static void log(String TAG,String msg,int type,Exception e){  if (msg != null && !msg.equals("")) {    if (debugMode) {      if (TAG == null) {        TAG=Constants.TAG;      }switch (type) {case 1:        Log.v(TAG,msg);      break;case 2:    Log.e(TAG,msg,e);  break;case 3:Log.d(TAG,msg);break;}}}}  }
class C{  public RemoteAuthenticatedUser(AuthenticationProvider authenticationProvider,Credentials credentials){  this.authenticationProvider=authenticationProvider;  this.credentials=credentials;  this.remoteHost=getRemoteHost(credentials);}  }
class C{  public static int showYesNoError(final Component parent,final String msg){  return JOptionPane.showConfirmDialog(isIconified(parent) ? null : parent,msg,System.getProperty(DEFAULT_WINDOW_TITLE_PROPERTY),JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);}  }
class C{  public void check(Environment env) throws ClassNotFound {  if (tracing)   env.dtEnter("SourceMember.check: " + getName() + ", status = "+ status);  if (status == PARSED) {    if (isSynthetic() && getValue() == null) {      status=CHECKED;      if (tracing)       env.dtExit("SourceMember.check: BREAKING CYCLE");      return;    }    if (tracing)     env.dtEvent("SourceMember.check: CHECKING CLASS");    clazz.check(env);    if (status == PARSED) {      if (getClassDefinition().getError()) {        status=ERROR;      } else {        if (tracing)         env.dtExit("SourceMember.check: CHECK FAILED");        throw new CompilerError("check failed");      }    }  }  if (tracing)   env.dtExit("SourceMember.check: DONE " + getName() + ", status = "+ status);}  }
class C{  public static <T extends Object & java.lang.Comparable<? super T>>T max(Collection<? extends T> collection){  Iterator<? extends T> it=collection.iterator();  T max=it.next();  while (it.hasNext()) {    T next=it.next();    if (max.compareTo(next) < 0) {      max=next;    }  }  return max;}  }
class C{  public static String toHumanString(final Value value){  return toHumanString(value == null ? null : value.get());}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public int readLong(int index){  return this.readByte(index) << 24 | this.readUByte(index + 1) << 16 | this.readUByte(index + 2) << 8 | this.readUByte(index + 3);}  }
class C{  private final static byte[] readBytes(RandomAccessFile f,long offs,int len) throws IOException {  byte[] ret=new byte[len];  f.seek(offs);  f.readFully(ret);  return ret;}  }
class C{  public EmtpyRegionFunctionException(Throwable cause){  super(cause);}  }
class C{  public Boolean isClusterSettings(){  return clusterSettings;}  }
class C{  public T caseRequiredRuntimeLibraries(RequiredRuntimeLibraries object){  return null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'THREAD_REPLY' ("+ "'TID' TEXT,"+ "'PID' TEXT,"+ "'PUID' TEXT,"+ "'VIA' TEXT,"+ "'CONTENT' TEXT,"+ "'CREATE_TIME' TEXT,"+ "'UPDATE_INFO' TEXT,"+ "'LIGHT_COUNT' INTEGER,"+ "'USER_BANNED' INTEGER,"+ "'FLOOR' INTEGER,"+ "'TIME' TEXT,"+ "'USER_NAME' TEXT,"+ "'USER_IMG' TEXT,"+ "'SMALLCONTENT' TEXT,"+ "'TOGGLECONTENT' TEXT,"+ "'INDEX' INTEGER,"+ "'IS_LIGHT' INTEGER,"+ "'QUOTE_HEADER' TEXT,"+ "'QUOTE_CONTENT' TEXT,"+ "'QUOTE_TOGGLE' TEXT,"+ "'PAGE_INDEX' INTEGER);");}  }
class C{  public void textFont(PFont which){  if (which == null) {    throw new RuntimeException(ERROR_TEXTFONT_NULL_PFONT);  }  textFontImpl(which,which.getDefaultSize());}  }
class C{  public static void scrollToVisible(JTable table,int row,int col){  if (!(table.getParent() instanceof JViewport)) {    return;  }  JViewport viewport=(JViewport)table.getParent();  Rectangle rect=table.getCellRect(row,col,true);  Point pt=viewport.getViewPosition();  rect.setLocation(rect.x - pt.x,rect.y - pt.y);  viewport.scrollRectToVisible(rect);}  }
class C{  public void addState(int[] specs,Animator animation,Animator.AnimatorListener listener){  Tuple tuple=new Tuple(specs,animation,listener);  animation.addListener(mAnimationListener);  mTuples.add(tuple);}  }
class C{  @VisibleForTesting void copyDirectoryAndRename(File srcFile,File srcFolder,File destFolder) throws IOException {  if (filesystem.isDirectory(srcFile)) {    File[] files=filesystem.listFiles(srcFile);    for (    File subFile : files) {      copyDirectoryAndRename(subFile,srcFolder,destFolder);    }  } else {    String relativePath=srcFolder.toURI().relativize(srcFile.toURI()).getPath();    File renamedFile=new File(destFolder,renameFile(relativePath));    filesystem.makeDirsForFile(renamedFile);    filesystem.copyFile(srcFile,renamedFile);  }}  }
class C{  public static void cursorIntToContentValues(Cursor cursor,String field,ContentValues values,String key){  int colIndex=cursor.getColumnIndex(field);  if (!cursor.isNull(colIndex)) {    values.put(key,cursor.getInt(colIndex));  } else {    values.put(key,(Integer)null);  }}  }
class C{  private void calculateExpirationClaim(final ClientDetailsEntity client,final OAuth2AccessTokenEntity idTokenEntity,final JWTClaimsSet.Builder idClaims){  if (client.getIdTokenValiditySeconds() != null) {    final long exp=client.getIdTokenValiditySeconds() * 1000L;    final Date expiration=new Date(System.currentTimeMillis() + exp);    idClaims.expirationTime(expiration);    idTokenEntity.setExpiration(expiration);    log.debug("Claim expiration is set to {}",expiration);  }}  }
class C{  private static boolean validateString(String string){  return !string.contains("\n");}  }
class C{  public final void testRemoveValidator(){  Validator<CharSequence> validator1=Validators.notEmpty("foo");  Validator<CharSequence> validator2=Validators.noWhitespace("bar");  AbstractValidateableViewImplementation abstractValidateableView=new AbstractValidateableViewImplementation(getContext());  abstractValidateableView.addValidator(validator1);  abstractValidateableView.addValidator(validator2);  abstractValidateableView.removeValidator(validator1);  abstractValidateableView.removeValidator(validator1);  Collection<Validator<CharSequence>> validators=abstractValidateableView.getValidators();  assertEquals(1,validators.size());  assertEquals(validator2,validators.iterator().next());}  }
class C{  protected void onStart(){  if (mActionBar != null)   mActionBar.setShowHideAnimationEnabled(true);}  }
class C{  public void fireStatementErrorOccured(Statement st,SQLException ex){  if (st instanceof PreparedStatement) {    StatementEvent event=new StatementEvent(this,(PreparedStatement)st,ex);    for (    StatementEventListener listener : statementEventListeners) {      listener.statementErrorOccurred(event);    }  }}  }
class C{  private AffineTransform computeMarkerTransform(Marker marker,Point2D markerPosition,double rotation){  Point2D ref=marker.getRef();  AffineTransform txf=new AffineTransform();  txf.translate(markerPosition.getX() - ref.getX(),markerPosition.getY() - ref.getY());  if (!Double.isNaN(rotation)) {    txf.rotate(Math.toRadians(rotation),ref.getX(),ref.getY());  }  return txf;}  }
class C{  boolean computeSuperProperties(){  Set<OwlProperty> ancestors=new HashSet<OwlProperty>();  Set<OwlProperty> frontier=new HashSet<OwlProperty>(superProperties);  while (!frontier.isEmpty()) {    Set<OwlProperty> next=new HashSet<OwlProperty>();    for (    OwlProperty ancestor : frontier) {      ancestors.add(ancestor);      next.addAll(ancestor.superProperties);    }    next.removeAll(ancestors);    frontier=next;  }  boolean newInfo=!ancestors.equals(superProperties);  superProperties=ancestors;  return newInfo;}  }
class C{  protected final Buffer readPacket() throws SQLException {  try {    int lengthRead=readFully(this.mysqlInput,this.packetHeaderBuf,0,4);    if (lengthRead < 4) {      forceClose();      throw new IOException(Messages.getString("MysqlIO.1"));    }    int packetLength=(this.packetHeaderBuf[0] & 0xff) + ((this.packetHeaderBuf[1] & 0xff) << 8) + ((this.packetHeaderBuf[2] & 0xff) << 16);    if (packetLength > this.maxAllowedPacket) {      throw new PacketTooBigException(packetLength,this.maxAllowedPacket);    }    if (this.traceProtocol) {      StringBuilder traceMessageBuf=new StringBuilder();      traceMessageBuf.append(Messages.getString("MysqlIO.2"));      traceMessageBuf.append(packetLength);      traceMessageBuf.append(Messages.getString("MysqlIO.3"));      traceMessageBuf.append(StringUtils.dumpAsHex(this.packetHeaderBuf,4));      this.connection.getLog().logTrace(traceMessageBuf.toString());    }    byte multiPacketSeq=this.packetHeaderBuf[3];    if (!this.packetSequenceReset) {      if (this.enablePacketDebug && this.checkPacketSequence) {        checkPacketSequencing(multiPacketSeq);      }    } else {      this.packetSequenceReset=false;    }    this.readPacketSequence=multiPacketSeq;    byte[] buffer=new byte[packetLength];    int numBytesRead=readFully(this.mysqlInput,buffer,0,packetLength);    if (numBytesRead != packetLength) {      throw new IOException("Short read, expected " + packetLength + " bytes, only read "+ numBytesRead);    }    Buffer packet=new Buffer(buffer);    if (this.traceProtocol) {      StringBuilder traceMessageBuf=new StringBuilder();      traceMessageBuf.append(Messages.getString("MysqlIO.4"));      traceMessageBuf.append(getPacketDumpToLog(packet,packetLength));      this.connection.getLog().logTrace(traceMessageBuf.toString());    }    if (this.enablePacketDebug) {      enqueuePacketForDebugging(false,false,0,this.packetHeaderBuf,packet);    }    if (this.connection.getMaintainTimeStats()) {      this.lastPacketReceivedTimeMs=System.currentTimeMillis();    }    return packet;  } catch (  IOException ioEx) {    throw SQLError.createCommunicationsException(this.connection,this.lastPacketSentTimeMs,this.lastPacketReceivedTimeMs,ioEx,getExceptionInterceptor());  }catch (  OutOfMemoryError oom) {    try {      this.connection.realClose(false,false,true,oom);    } catch (    Exception ex) {    }    throw oom;  }}  }
class C{  private LoggerHolder(){  throw new AssertionError("This should never be instantiated");}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("Selection"))     p_Selection="Y".equals(para[i].getParameter()); else     if (name.equals("DateInvoiced"))     p_DateInvoiced=(Timestamp)para[i].getParameter(); else     if (name.equals("AD_Org_ID"))     p_AD_Org_ID=para[i].getParameterAsInt(); else     if (name.equals("C_BPartner_ID"))     p_C_BPartner_ID=para[i].getParameterAsInt(); else     if (name.equals("C_Order_ID"))     p_C_Order_ID=para[i].getParameterAsInt(); else     if (name.equals("ConsolidateDocument"))     p_ConsolidateDocument="Y".equals(para[i].getParameter()); else     if (name.equals("DocAction"))     p_docAction=(String)para[i].getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  if (p_DateInvoiced == null)   p_DateInvoiced=Env.getContextAsDate(getCtx(),"#Date");  if (p_DateInvoiced == null)   p_DateInvoiced=new Timestamp(System.currentTimeMillis());  if (!DocAction.ACTION_Complete.equals(p_docAction))   p_docAction=DocAction.ACTION_Prepare;}  }
class C{  @Override protected void createShapes(DrawContext dc){  this.paths=new Path[4];  List<Position> curvePositions=new ArrayList<Position>();  Globe globe=dc.getGlobe();  Vec4 p1=globe.computePointFromLocation(this.startPosition);  Vec4 p2=globe.computePointFromLocation(this.endPosition);  Vec4 t1=p2.subtract3(p1);  Vec4 normal=globe.computeSurfaceNormalAtPoint(p1);  Matrix rot=Matrix.fromAxisAngle(this.getCurvature(),normal);  t1=t1.transformBy3(rot);  int intervals=this.getIntervals();  double delta=1.0 / intervals;  for (int i=0; i < intervals; i++) {    double t=i * delta;    Vec4 p=this.hermiteCurve(p1,p2,t1,t1,t);    Position pos=globe.computePositionFromPoint(p);    curvePositions.add(pos);  }  curvePositions.add(this.endPosition);  int numPositions=curvePositions.size();  double bowTieScale=this.getBowTieLength();  int bowTieIndex1=(int)(numPositions * (0.5 - bowTieScale));  int bowTieIndex2=(int)(numPositions * (0.5 + bowTieScale));  bowTieIndex1=WWMath.clamp(bowTieIndex1,0,numPositions);  bowTieIndex2=WWMath.clamp(bowTieIndex2,0,numPositions);  Position bowTiePos1=curvePositions.get(bowTieIndex1);  Position bowTiePos2=curvePositions.get(bowTieIndex2);  this.paths[0]=this.createPath(curvePositions.subList(0,bowTieIndex1 + 1));  this.paths[1]=this.createPath(curvePositions.subList(bowTieIndex2,numPositions));  double arrowheadLength=p2.subtract3(p1).getLength3() * this.getArrowLength();  List<Position> positions=this.computeArrowheadPositions(dc,p2,t1.multiply3(-1),arrowheadLength);  this.paths[2]=this.createPath(positions);  positions=this.createBowTie(dc,bowTiePos1,bowTiePos2);  this.paths[3]=this.createPath(positions);}  }
class C{  private static void showMenuItem(){  showMenuItem(0);}  }
class C{  public void testCountOrderBy(){  cleanTable();  populateTable();  From from=new Select().from(MockModel.class).where("intField = ?",1).orderBy("intField ASC");  final List<MockModel> list=from.execute();  final boolean exists=from.exists();  assertTrue(exists);  assertTrue(list.size() > 0);}  }
class C{  public VwapDataset(){  this.data=new ArrayList<IndicatorSeries>();}  }
class C{  protected void checkSaltelli(double[][] sequence,int D){  for (int i=0; i < sequence.length; i++) {    int index=(2 * D + 2) * (i / (2 * D + 2));    for (int j=0; j < D; j++) {      Assert.assertTrue((sequence[i][j] == sequence[index][j]) || (sequence[i][j] == sequence[index + 2 * D + 1][j]));    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public MetaDataInfo equalHeader(ExampleSetMetaData other){  if (other == this) {    return MetaDataInfo.YES;  }  if (other.getAllAttributes().size() != getAllAttributes().size() && other.getAttributeSetRelation() == SetRelation.EQUAL && getAttributeSetRelation() == SetRelation.EQUAL) {    return MetaDataInfo.NO;  }  if (other.getAllAttributes().size() == getAllAttributes().size() && other.getAttributeSetRelation() == SetRelation.EQUAL && getAttributeSetRelation() == SetRelation.EQUAL) {    for (    AttributeMetaData amd : getAllAttributes()) {      AttributeMetaData otherAMD=other.getAttributeByName(amd.getName());      if (otherAMD == null) {        return MetaDataInfo.NO;      }      String otherRole=otherAMD.getRole();      if (otherRole != null) {        if (!otherAMD.getRole().equals(amd.getRole())) {          return MetaDataInfo.NO;        }      }      if (otherAMD.getValueType() != amd.getValueType()) {        return MetaDataInfo.NO;      }    }    return MetaDataInfo.YES;  }  return MetaDataInfo.UNKNOWN;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  Impl(File directory) throws IOException {  boolean exists=directory.exists();  if (exists && !directory.isDirectory()) {    throw new IOException(directory + " exists but is not a directory.");  }  if (exists) {    initialFiles=directory.list();    if (initialFiles == null) {      throw new IOException(directory + " exists but cannot list contents.");    }    Arrays.sort(initialFiles);    size=initialFiles.length;  } else {    if (!directory.mkdirs()) {      throw new IOException("Creation of " + directory + " directory failed.");    }    size=0;  }  this.directory=directory;}  }
class C{  public double distance(final MutableInt2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  private static String nodeDigest(ParseTreeNode node){  StringBuilder sb=new StringBuilder();  nodeDigest(node,sb);  return sb.toString();}  }
class C{  protected String buildForeignKeyConstraintName(String tableName,String fieldName,int maximumNameLength,DatabasePlatform platform){  String startDelimiter="";  String endDelimiter="";  boolean useDelimiters=!platform.getStartDelimiter().equals("") && (tableName.startsWith(platform.getStartDelimiter()) || fieldName.startsWith(platform.getStartDelimiter()));  if (useDelimiters) {    startDelimiter=platform.getStartDelimiter();    endDelimiter=platform.getEndDelimiter();  }  String adjustedTableName=tableName;  if (adjustedTableName.indexOf(' ') != -1 || adjustedTableName.indexOf('\"') != -1 || adjustedTableName.indexOf('`') != -1) {    StringBuilder buff=new StringBuilder();    for (int i=0; i < tableName.length(); i++) {      char c=tableName.charAt(i);      if (c != ' ' && c != '\"' && c != '`') {        buff.append(c);      }    }    adjustedTableName=buff.toString();  }  StringBuilder buff=new StringBuilder();  for (int i=0; i < fieldName.length(); i++) {    char c=fieldName.charAt(i);    if (c != ' ' && c != '\"' && c != '`') {      buff.append(c);    }  }  String adjustedFieldName=buff.toString();  String foreignKeyName=startDelimiter + "FK_" + adjustedTableName+ "_"+ adjustedFieldName+ endDelimiter;  if (foreignKeyName.length() > maximumNameLength) {    foreignKeyName=startDelimiter + adjustedTableName + "_"+ adjustedFieldName+ endDelimiter;    if (foreignKeyName.length() > maximumNameLength) {      foreignKeyName=startDelimiter + Helper.removeAllButAlphaNumericToFit(adjustedTableName + adjustedFieldName,maximumNameLength) + endDelimiter;      if (foreignKeyName.length() > maximumNameLength) {        String onlyAlphaNumericTableName=Helper.removeAllButAlphaNumericToFit(adjustedTableName,0);        String onlyAlphaNumericFieldName=Helper.removeAllButAlphaNumericToFit(adjustedFieldName,0);        foreignKeyName=startDelimiter + Helper.shortenStringsByRemovingVowelsToFit(onlyAlphaNumericTableName,onlyAlphaNumericFieldName,maximumNameLength) + endDelimiter;        if (foreignKeyName.length() > maximumNameLength) {          String shortenedFieldName=Helper.removeVowels(onlyAlphaNumericFieldName);          String shortenedTableName=Helper.removeVowels(onlyAlphaNumericTableName);          int delimiterLength=startDelimiter.length() + endDelimiter.length();          if (shortenedFieldName.length() + delimiterLength >= maximumNameLength) {            foreignKeyName=startDelimiter + Helper.truncate(shortenedFieldName,maximumNameLength - delimiterLength) + endDelimiter;          } else {            foreignKeyName=startDelimiter + Helper.truncate(shortenedTableName,maximumNameLength - shortenedFieldName.length() - delimiterLength) + shortenedFieldName+ endDelimiter;          }        }      }    }  }  return foreignKeyName;}  }
class C{  @Override protected void closeFile(InputStream is) throws IOException {  super.closeFile(is);  br.close();  br=null;  path=null;}  }
class C{  public void sendRegistrationEvent(){  client.post(String.class,CALLHOME_REGISTRATION_URL);}  }
class C{  public static boolean checkIfCanInstrument(String className){  return RuntimeInstrumentation.checkIfCanInstrument(className);}  }
class C{  public WorkspaceWizardPageForm(Composite parent,int style){  super(parent,style);  this.setLayout(new GridLayout(3,false));  Label projectLabel=new Label(this,SWT.NONE);  projectLabel.setText("Project:");  projectLabel.setLayoutData(GridDataFactory.swtDefaults().create());  projectText=new Text(this,SWT.BORDER);  projectText.setLayoutData(fillTextDefaults());  projectBrowseButton=new Button(this,SWT.NONE);  projectBrowseButton.setToolTipText("Opens a dialog to choose the project");  projectBrowseButton.setText("Browse...");  Label sourceFolderLabel=new Label(this,SWT.NONE);  sourceFolderLabel.setText("Source folder:");  sourceFolderLabel.setLayoutData(fillLabelDefaults());  sourceFolderText=new Text(this,SWT.BORDER);  sourceFolderText.setLayoutData(fillTextDefaults());  sourceFolderBrowseButton=new Button(this,SWT.NONE);  sourceFolderBrowseButton.setToolTipText("Opens a dialog to choose the source folder");  sourceFolderBrowseButton.setText("Browse...");  Label moduleSpecifierLabel=new Label(this,SWT.NONE);  moduleSpecifierLabel.setLayoutData(fillLabelDefaults());  moduleSpecifierLabel.setText("Module specifier:");  moduleSpecifierSuffixText=new SuffixText(this,SWT.BORDER);  getModuleSpecifierText().setLayoutData(fillTextDefaults());  moduleSpecifierBrowseButton=new Button(this,SWT.NONE);  moduleSpecifierBrowseButton.setToolTipText("Opens a dialog to choose the module specifier");  moduleSpecifierBrowseButton.setText("Browse...");  insertHorizontalSeparator(this);}  }
class C{  public static double cauchy(double mu,double sigma){  double x=sigma * Math.tan(Math.PI * (raw() - 0.5)) + mu;  return x;}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public int failureCount(){  return result.getFailures().size();}  }
class C{  public static String locationsContainPole(Iterable<? extends LatLon> locations){  if (locations == null) {    String msg=Logging.getMessage("nullValue.LocationsListIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  boolean containsPole=false;  double minLatitude=90.0;  double maxLatitude=-90.0;  LatLon first=null;  LatLon prev=null;  for (  LatLon ll : locations) {    if (first == null)     first=ll;    if (prev != null && LatLon.locationsCrossDateline(prev,ll))     containsPole=!containsPole;    if (ll.latitude.degrees < minLatitude)     minLatitude=ll.latitude.degrees;    if (ll.latitude.degrees > maxLatitude)     maxLatitude=ll.latitude.degrees;    prev=ll;  }  if (first != null && LatLon.locationsCrossDateline(first,prev))   containsPole=!containsPole;  if (!containsPole)   return null;  if (minLatitude > 0)   return AVKey.NORTH; else   if (maxLatitude < 0)   return AVKey.SOUTH; else   if (Math.abs(maxLatitude) >= Math.abs(minLatitude))   return AVKey.NORTH; else   return AVKey.SOUTH;}  }
class C{  private void refreshSelfAvatar(){  if (null != mAvatarImageView) {    VectorUtils.loadUserAvatar(this,mSession,mAvatarImageView,mSession.getMyUser());  }}  }
class C{  public void info(String s,Object... params){  if (isEnabled(TraceSystem.INFO)) {    s=MessageFormat.format(s,params);    traceWriter.write(TraceSystem.INFO,s,null);  }}  }
class C{  public String nextToken(){  currentPosition=(newPosition >= 0 && !delimsChanged) ? newPosition : skipDelimiters(currentPosition);  delimsChanged=false;  newPosition=-1;  if (currentPosition >= maxPosition)   throw new NoSuchElementException();  int start=currentPosition;  currentPosition=scanToken(currentPosition);  return str.substring(start,currentPosition);}  }
class C{  public void stop(){  m_module.removeListener(m_listener);  CGlobalProgressManager.instance().remove(this);}  }
class C{  public void shutdown(){  this.running=false;}  }
class C{  public NameSpace(String prefix,String uri){  m_prefix=prefix;  m_uri=uri;}  }
class C{  public double f1Measure(){  return Util.f1Measure(precision(),recall());}  }
class C{  public static Parameter updateParameter(Parameter parameter,VOParameter voParameter) throws ConcurrentModificationException {  verifyVersionAndKey(parameter,voParameter);  parameter.setConfigurable(voParameter.isConfigurable());  String paramValue=voParameter.getValue();  parameter.setValue(paramValue);  return parameter;}  }
class C{  public boolean isFailure(){  return throwable != null;}  }
class C{  public static StoragePool queryFullCopySourceStoragePool(BlockObject fcSourceObj,DbClient dbClient){  URI fcSourceURI=fcSourceObj.getId();  URI poolURI=null;  if (URIUtil.isType(fcSourceURI,Volume.class)) {    poolURI=((Volume)fcSourceObj).getPool();  } else   if (URIUtil.isType(fcSourceURI,BlockSnapshot.class)) {    URI parentVolURI=((BlockSnapshot)fcSourceObj).getParent().getURI();    Volume parentVolume=dbClient.queryObject(Volume.class,parentVolURI);    poolURI=parentVolume.getPool();  } else {    throw APIException.badRequests.invalidFullCopySource(fcSourceURI.toString());  }  StoragePool storagePool=null;  if (!NullColumnValueGetter.isNullURI(poolURI)) {    storagePool=dbClient.queryObject(StoragePool.class,poolURI);  }  return storagePool;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"setalc");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not an setalc instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final String subResult=environment.getNextVariableString();  final String truncatedSubResult=environment.getNextVariableString();  final String clearedEax=environment.getNextVariableString();  instructions.add(ReilHelpers.createSub(offset++,OperandSize.BYTE,"0",OperandSize.BYTE,Helpers.CARRY_FLAG,OperandSize.WORD,subResult));  instructions.add(ReilHelpers.createAnd(offset++,OperandSize.WORD,subResult,OperandSize.BYTE,"255",OperandSize.BYTE,truncatedSubResult));  instructions.add(ReilHelpers.createAnd(offset++,OperandSize.DWORD,"eax",OperandSize.DWORD,String.valueOf(0xFFFFFF00l),OperandSize.DWORD,clearedEax));  instructions.add(ReilHelpers.createOr(offset++,OperandSize.DWORD,clearedEax,OperandSize.BYTE,truncatedSubResult,OperandSize.DWORD,"eax"));}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:30.470 -0500",hash_original_method="60B9AE2C87715653387DA9AC24F555A4",hash_generated_method="60B9AE2C87715653387DA9AC24F555A4") BluetoothServerSocket(int type,boolean auth,boolean encrypt,int port) throws IOException {  mChannel=port;  mSocket=new BluetoothSocket(type,-1,auth,encrypt,null,port,null);}  }
class C{  public static <T,S extends MutableStack<T>>SynchronizedStack<T> of(S stack){  return new SynchronizedStack<>(stack);}  }
class C{  public SidedPlane(Vector p,double x,double y){  super(x,y);  sigNum=Math.signum(evaluate(p));  if (sigNum == 0.0)   throw new IllegalArgumentException("Cannot determine sidedness because check point is on plane.");}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node newChild;  Node appendNode;  String childName;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  newChild=doc.createElement("newChild");  appendNode=employeeNode.appendChild(newChild);  childName=appendNode.getNodeName();  assertEquals("nodeAppendChildGetNodeNameAssert1","newChild",childName);}  }
class C{  public static long toLong(byte[] bytes){  return toLong(bytes[0],bytes[1],bytes[2],bytes[3],bytes[4],bytes[5],bytes[6],bytes[7]);}  }
class C{  public void rem(int size,Register dst,Register n,Register d){  super.sdiv(size,dst,n,d);  super.msub(size,dst,dst,d,n);}  }
class C{  protected void initPool(){  running=true;  for (int i=size; --i >= 0; ) {    PoolThread thread=new PoolThread();    threadPool.add(thread);    thread.start();  }}  }
class C{  public void addObservations(int var1[],int var2[],int cond[],boolean[] valid){  int rows=var1.length;  for (int r=0; r < rows; r++) {    if (valid[r]) {      firstSecondCondCount[var1[r]][var2[r]][cond[r]]++;      firstCondCount[var1[r]][cond[r]]++;      secondCondCount[var2[r]][cond[r]]++;      condCount[cond[r]]++;      observations++;    }  }}  }
class C{  public LongArrayList top(int n){  LongArrayList top=new LongArrayList();  long[] values=data.toLongArray();  LongArrays.parallelQuickSort(values,ReverseLongComparator.instance());  for (int i=0; i < n && i < values.length; i++) {    top.add(values[i]);  }  return top;}  }
class C{  synchronized public long findIndexOf(final long timestamp){  long pos=super.indexOf(encodeKey(timestamp));  if (pos < 0) {    pos=-(pos + 1);    if (pos == 0) {      return -1;    }    pos--;    return pos;  } else {    return pos;  }}  }
class C{  public ProfileVisit distance(int distance){  this.distance=distance;  return this;}  }
class C{  @Override public void updateScreen(){  super.updateScreen();}  }
class C{  static boolean handleIconKeyEvent(View v,int keyCode,KeyEvent e){  boolean consume=FocusLogic.shouldConsume(keyCode);  if (e.getAction() == KeyEvent.ACTION_UP || !consume) {    return consume;  }  Launcher launcher=(Launcher)v.getContext();  DeviceProfile profile=launcher.getDeviceProfile();  if (DEBUG) {    Log.v(TAG,String.format("Handle WORKSPACE ICONS keyevent=[%s] isVerticalBar=%s",KeyEvent.keyCodeToString(keyCode),profile.isVerticalBarLayout()));  }  ShortcutAndWidgetContainer parent=(ShortcutAndWidgetContainer)v.getParent();  CellLayout iconLayout=(CellLayout)parent.getParent();  final Workspace workspace=(Workspace)iconLayout.getParent();  final ViewGroup dragLayer=(ViewGroup)workspace.getParent();  final ViewGroup tabs=(ViewGroup)dragLayer.findViewById(R.id.search_drop_target_bar);  final Hotseat hotseat=(Hotseat)dragLayer.findViewById(R.id.hotseat);  final ItemInfo itemInfo=(ItemInfo)v.getTag();  final int iconIndex=parent.indexOfChild(v);  final int pageIndex=workspace.indexOfChild(iconLayout);  final int pageCount=workspace.getChildCount();  CellLayout hotseatLayout=(CellLayout)hotseat.getChildAt(0);  ShortcutAndWidgetContainer hotseatParent=hotseatLayout.getShortcutsAndWidgets();  int[][] matrix;  if (keyCode == KeyEvent.KEYCODE_DPAD_DOWN && !profile.isVerticalBarLayout()) {    matrix=FocusLogic.createSparseMatrixWithHotseat(iconLayout,hotseatLayout,true,profile.inv.hotseatAllAppsRank);  } else   if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT && profile.isVerticalBarLayout()) {    matrix=FocusLogic.createSparseMatrixWithHotseat(iconLayout,hotseatLayout,false,profile.inv.hotseatAllAppsRank);  } else   if (isUninstallKeyChord(e)) {    matrix=FocusLogic.createSparseMatrix(iconLayout);    if (UninstallDropTarget.supportsDrop(launcher,itemInfo)) {      UninstallDropTarget.startUninstallActivity(launcher,itemInfo);    }  } else   if (isDeleteKeyChord(e)) {    matrix=FocusLogic.createSparseMatrix(iconLayout);    launcher.removeItem(v,itemInfo,true);  } else {    matrix=FocusLogic.createSparseMatrix(iconLayout);  }  int newIconIndex=FocusLogic.handleKeyEvent(keyCode,matrix,iconIndex,pageIndex,pageCount,Utilities.isRtl(v.getResources()));  boolean isRtl=Utilities.isRtl(v.getResources());  View newIcon=null;  CellLayout workspaceLayout=(CellLayout)workspace.getChildAt(pageIndex);switch (newIconIndex) {case FocusLogic.NOOP:    if (keyCode == KeyEvent.KEYCODE_DPAD_UP) {      newIcon=tabs;    }  break;case FocusLogic.PREVIOUS_PAGE_RIGHT_COLUMN:case FocusLogic.NEXT_PAGE_RIGHT_COLUMN:int newPageIndex=pageIndex - 1;if (newIconIndex == FocusLogic.NEXT_PAGE_RIGHT_COLUMN) {newPageIndex=pageIndex + 1;}int row=((CellLayout.LayoutParams)v.getLayoutParams()).cellY;parent=getCellLayoutChildrenForIndex(workspace,newPageIndex);if (parent != null) {iconLayout=(CellLayout)parent.getParent();matrix=FocusLogic.createSparseMatrixWithPivotColumn(iconLayout,iconLayout.getCountX(),row);newIconIndex=FocusLogic.handleKeyEvent(keyCode,matrix,FocusLogic.PIVOT,newPageIndex,pageCount,Utilities.isRtl(v.getResources()));if (newIconIndex == FocusLogic.NEXT_PAGE_FIRST_ITEM) {newIcon=handleNextPageFirstItem(workspace,hotseatLayout,pageIndex,isRtl);} else if (newIconIndex == FocusLogic.PREVIOUS_PAGE_LAST_ITEM) {newIcon=handlePreviousPageLastItem(workspace,hotseatLayout,pageIndex,isRtl);} else {newIcon=parent.getChildAt(newIconIndex);}}break;case FocusLogic.PREVIOUS_PAGE_FIRST_ITEM:workspaceLayout=(CellLayout)workspace.getChildAt(pageIndex - 1);newIcon=getFirstFocusableIconInReadingOrder(workspaceLayout,isRtl);if (newIcon == null) {newIcon=getFirstFocusableIconInReadingOrder(hotseatLayout,isRtl);workspace.snapToPage(pageIndex - 1);}break;case FocusLogic.PREVIOUS_PAGE_LAST_ITEM:newIcon=handlePreviousPageLastItem(workspace,hotseatLayout,pageIndex,isRtl);break;case FocusLogic.NEXT_PAGE_FIRST_ITEM:newIcon=handleNextPageFirstItem(workspace,hotseatLayout,pageIndex,isRtl);break;case FocusLogic.NEXT_PAGE_LEFT_COLUMN:case FocusLogic.PREVIOUS_PAGE_LEFT_COLUMN:newPageIndex=pageIndex + 1;if (newIconIndex == FocusLogic.PREVIOUS_PAGE_LEFT_COLUMN) {newPageIndex=pageIndex - 1;}row=((CellLayout.LayoutParams)v.getLayoutParams()).cellY;parent=getCellLayoutChildrenForIndex(workspace,newPageIndex);if (parent != null) {iconLayout=(CellLayout)parent.getParent();matrix=FocusLogic.createSparseMatrixWithPivotColumn(iconLayout,-1,row);newIconIndex=FocusLogic.handleKeyEvent(keyCode,matrix,FocusLogic.PIVOT,newPageIndex,pageCount,Utilities.isRtl(v.getResources()));if (newIconIndex == FocusLogic.NEXT_PAGE_FIRST_ITEM) {newIcon=handleNextPageFirstItem(workspace,hotseatLayout,pageIndex,isRtl);} else if (newIconIndex == FocusLogic.PREVIOUS_PAGE_LAST_ITEM) {newIcon=handlePreviousPageLastItem(workspace,hotseatLayout,pageIndex,isRtl);} else {newIcon=parent.getChildAt(newIconIndex);}}break;case FocusLogic.CURRENT_PAGE_FIRST_ITEM:newIcon=getFirstFocusableIconInReadingOrder(workspaceLayout,isRtl);if (newIcon == null) {newIcon=getFirstFocusableIconInReadingOrder(hotseatLayout,isRtl);}break;case FocusLogic.CURRENT_PAGE_LAST_ITEM:newIcon=getFirstFocusableIconInReverseReadingOrder(workspaceLayout,isRtl);if (newIcon == null) {newIcon=getFirstFocusableIconInReverseReadingOrder(hotseatLayout,isRtl);}break;default :if (0 <= newIconIndex && newIconIndex < parent.getChildCount()) {newIcon=parent.getChildAt(newIconIndex);} else if (parent.getChildCount() <= newIconIndex && newIconIndex < parent.getChildCount() + hotseatParent.getChildCount()) {newIcon=hotseatParent.getChildAt(newIconIndex - parent.getChildCount());}break;}if (newIcon != null) {newIcon.requestFocus();playSoundEffect(keyCode,v);}return consume;}  }
class C{  public HashSet(int initialCapacity,float loadFactor){  map=new HashMap(initialCapacity,loadFactor);}  }
class C{  public static void main(String[] args){  runClusterer(new FilteredClusterer(),args);}  }
class C{  public void toggle(){  mSlidingMenu.toggle();}  }
class C{  public RowBuilder floatCol(String name){  ColumnFloat column=new ColumnFloat(_columns.size(),name,_offset);  _offset+=column.length();  _columns.add(column);  return this;}  }
class C{  public FLAME(DistanceMetric dm,int k,int maxIterations){  setDistanceMetric(dm);  setK(k);  setMaxIterations(maxIterations);}  }
class C{  public Type basicGetDefinedType(){  return definedType;}  }
class C{  public int numSentences(){  return numSentences;}  }
class C{  public static void writeStatistics(TDoubleObjectHashMap<DescriptiveStatistics> statsMap,String keyLabel,String file) throws IOException {  double[] keys=statsMap.keys();  Arrays.sort(keys);  BufferedWriter writer=new BufferedWriter(new FileWriter(file));  writer.write(keyLabel);  writer.write(TAB);  writer.write("mean");  writer.write(TAB);  writer.write("median");  writer.write(TAB);  writer.write("min");  writer.write(TAB);  writer.write("max");  writer.write(TAB);  writer.write("n");  writer.newLine();  for (  double key : keys) {    DescriptiveStatistics stats=statsMap.get(key);    writer.write(String.valueOf(key));    writer.write(TAB);    writer.write(String.valueOf(stats.getMean()));    writer.write(TAB);    writer.write(String.valueOf(stats.getPercentile(50)));    writer.write(TAB);    writer.write(String.valueOf(stats.getMin()));    writer.write(TAB);    writer.write(String.valueOf(stats.getMax()));    writer.write(TAB);    writer.write(String.valueOf(stats.getN()));    writer.newLine();  }  writer.close();}  }
class C{  public IncognitoNewTabPage(Activity activity){  mActivity=activity;  mTitle=activity.getResources().getString(R.string.button_new_tab);  mBackgroundColor=activity.getResources().getColor(R.color.ntp_bg_incognito);  LayoutInflater inflater=LayoutInflater.from(activity);  mIncognitoNewTabPageView=(IncognitoNewTabPageView)inflater.inflate(R.layout.new_tab_page_incognito,null);  mIncognitoNewTabPageView.initialize(mIncognitoNewTabPageManager);}  }
class C{  private void updateShapeOffset(){  int offsetX=scroller.getOffsetX();  int offsetY=scroller.getOffsetY();  shape.setOffset(offsetX,offsetY);}  }
class C{  public void saveFolder(OCFile folder,Collection<OCFile> updatedFiles,Collection<OCFile> filesToRemove){  Log_OC.d(TAG,"Saving folder " + folder.getRemotePath() + " with "+ updatedFiles.size()+ " children and "+ filesToRemove.size()+ " files to remove");  ArrayList<ContentProviderOperation> operations=new ArrayList<ContentProviderOperation>(updatedFiles.size());  for (  OCFile file : updatedFiles) {    ContentValues cv=new ContentValues();    cv.put(ProviderTableMeta.FILE_MODIFIED,file.getModificationTimestamp());    cv.put(ProviderTableMeta.FILE_MODIFIED_AT_LAST_SYNC_FOR_DATA,file.getModificationTimestampAtLastSyncForData());    cv.put(ProviderTableMeta.FILE_CREATION,file.getCreationTimestamp());    cv.put(ProviderTableMeta.FILE_CONTENT_LENGTH,file.getFileLength());    cv.put(ProviderTableMeta.FILE_CONTENT_TYPE,file.getMimetype());    cv.put(ProviderTableMeta.FILE_NAME,file.getFileName());    cv.put(ProviderTableMeta.FILE_PARENT,folder.getFileId());    cv.put(ProviderTableMeta.FILE_PATH,file.getRemotePath());    if (!file.isFolder()) {      cv.put(ProviderTableMeta.FILE_STORAGE_PATH,file.getStoragePath());    }    cv.put(ProviderTableMeta.FILE_ACCOUNT_OWNER,mAccount.name);    cv.put(ProviderTableMeta.FILE_LAST_SYNC_DATE,file.getLastSyncDateForProperties());    cv.put(ProviderTableMeta.FILE_LAST_SYNC_DATE_FOR_DATA,file.getLastSyncDateForData());    cv.put(ProviderTableMeta.FILE_KEEP_IN_SYNC,file.isFavorite() ? 1 : 0);    cv.put(ProviderTableMeta.FILE_ETAG,file.getEtag());    cv.put(ProviderTableMeta.FILE_SHARED_VIA_LINK,file.isSharedViaLink() ? 1 : 0);    cv.put(ProviderTableMeta.FILE_SHARED_WITH_SHAREE,file.isSharedWithSharee() ? 1 : 0);    cv.put(ProviderTableMeta.FILE_PUBLIC_LINK,file.getPublicLink());    cv.put(ProviderTableMeta.FILE_PERMISSIONS,file.getPermissions());    cv.put(ProviderTableMeta.FILE_REMOTE_ID,file.getRemoteId());    cv.put(ProviderTableMeta.FILE_UPDATE_THUMBNAIL,file.needsUpdateThumbnail());    cv.put(ProviderTableMeta.FILE_IS_DOWNLOADING,file.isDownloading());    cv.put(ProviderTableMeta.FILE_ETAG_IN_CONFLICT,file.getEtagInConflict());    boolean existsByPath=fileExists(file.getRemotePath());    if (existsByPath || fileExists(file.getFileId())) {      operations.add(ContentProviderOperation.newUpdate(ProviderTableMeta.CONTENT_URI).withValues(cv).withSelection(ProviderTableMeta._ID + "=?",new String[]{String.valueOf(file.getFileId())}).build());    } else {      operations.add(ContentProviderOperation.newInsert(ProviderTableMeta.CONTENT_URI).withValues(cv).build());    }  }  String where=ProviderTableMeta.FILE_ACCOUNT_OWNER + "=?" + " AND "+ ProviderTableMeta.FILE_PATH+ "=?";  String[] whereArgs=null;  for (  OCFile file : filesToRemove) {    if (file.getParentId() == folder.getFileId()) {      whereArgs=new String[]{mAccount.name,file.getRemotePath()};      if (file.isFolder()) {        operations.add(ContentProviderOperation.newDelete(ContentUris.withAppendedId(ProviderTableMeta.CONTENT_URI_DIR,file.getFileId())).withSelection(where,whereArgs).build());        File localFolder=new File(FileStorageUtils.getDefaultSavePathFor(mAccount.name,file));        if (localFolder.exists()) {          removeLocalFolder(localFolder);        }      } else {        operations.add(ContentProviderOperation.newDelete(ContentUris.withAppendedId(ProviderTableMeta.CONTENT_URI_FILE,file.getFileId())).withSelection(where,whereArgs).build());        if (file.isDown()) {          String path=file.getStoragePath();          new File(path).delete();          triggerMediaScan(path);        }      }    }  }  ContentValues cv=new ContentValues();  cv.put(ProviderTableMeta.FILE_MODIFIED,folder.getModificationTimestamp());  cv.put(ProviderTableMeta.FILE_MODIFIED_AT_LAST_SYNC_FOR_DATA,folder.getModificationTimestampAtLastSyncForData());  cv.put(ProviderTableMeta.FILE_CREATION,folder.getCreationTimestamp());  cv.put(ProviderTableMeta.FILE_CONTENT_LENGTH,folder.getFileLength());  cv.put(ProviderTableMeta.FILE_CONTENT_TYPE,folder.getMimetype());  cv.put(ProviderTableMeta.FILE_NAME,folder.getFileName());  cv.put(ProviderTableMeta.FILE_PARENT,folder.getParentId());  cv.put(ProviderTableMeta.FILE_PATH,folder.getRemotePath());  cv.put(ProviderTableMeta.FILE_ACCOUNT_OWNER,mAccount.name);  cv.put(ProviderTableMeta.FILE_LAST_SYNC_DATE,folder.getLastSyncDateForProperties());  cv.put(ProviderTableMeta.FILE_LAST_SYNC_DATE_FOR_DATA,folder.getLastSyncDateForData());  cv.put(ProviderTableMeta.FILE_KEEP_IN_SYNC,folder.isFavorite() ? 1 : 0);  cv.put(ProviderTableMeta.FILE_ETAG,folder.getEtag());  cv.put(ProviderTableMeta.FILE_SHARED_VIA_LINK,folder.isSharedViaLink() ? 1 : 0);  cv.put(ProviderTableMeta.FILE_SHARED_WITH_SHAREE,folder.isSharedWithSharee() ? 1 : 0);  cv.put(ProviderTableMeta.FILE_PUBLIC_LINK,folder.getPublicLink());  cv.put(ProviderTableMeta.FILE_PERMISSIONS,folder.getPermissions());  cv.put(ProviderTableMeta.FILE_REMOTE_ID,folder.getRemoteId());  operations.add(ContentProviderOperation.newUpdate(ProviderTableMeta.CONTENT_URI).withValues(cv).withSelection(ProviderTableMeta._ID + "=?",new String[]{String.valueOf(folder.getFileId())}).build());  ContentProviderResult[] results=null;  Log_OC.d(TAG,"Sending " + operations.size() + " operations to FileContentProvider");  try {    if (getContentResolver() != null) {      results=getContentResolver().applyBatch(MainApp.getAuthority(),operations);    } else {      results=getContentProviderClient().applyBatch(operations);    }  } catch (  OperationApplicationException e) {    Log_OC.e(TAG,"Exception in batch of operations " + e.getMessage());  }catch (  RemoteException e) {    Log_OC.e(TAG,"Exception in batch of operations  " + e.getMessage());  }  if (results != null) {    long newId;    Iterator<OCFile> filesIt=updatedFiles.iterator();    OCFile file=null;    for (int i=0; i < results.length; i++) {      if (filesIt.hasNext()) {        file=filesIt.next();      } else {        file=null;      }      if (results[i].uri != null) {        newId=Long.parseLong(results[i].uri.getPathSegments().get(1));        if (file != null) {          file.setFileId(newId);        }      }    }  }}  }
class C{  public ContentStorageBO(KLVPacket.Header header,ByteProvider byteProvider,Map<Integer,MXFUID> localTagToUIDMap,IMFErrorLogger imfErrorLogger) throws IOException {  super(header);  long numBytesToRead=this.header.getVSize();  StructuralMetadata.populate(this,byteProvider,numBytesToRead,localTagToUIDMap);  if (this.instance_uid == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,ContentStorage.ERROR_DESCRIPTION_PREFIX + "instance_uid is null");  }  if (this.packages == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,ContentStorage.ERROR_DESCRIPTION_PREFIX + "packages is null");  } else {    for (    StrongRef strongRef : this.packages.getEntries()) {      this.packageInstanceUIDs.add(strongRef.getInstanceUID());    }  }  if (this.essencecontainer_data == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,ContentStorage.ERROR_DESCRIPTION_PREFIX + "essencecontainer_data is null");  } else {    for (    StrongRef strongRef : this.essencecontainer_data.getEntries()) {      this.essenceContainerDataInstanceUIDs.add(strongRef.getInstanceUID());    }  }}  }
class C{  private void validateConfiguration(SessionConfiguration configuration){  String nullError="%s must not be null";  String sampleError="Please update your %s in the gradle.properties of the project before " + "using the Uber SDK Sample app. For a more secure storage location, " + "please investigate storing in your user home gradle.properties ";  checkNotNull(configuration,String.format(nullError,"SessionConfiguration"));  checkNotNull(configuration.getClientId(),String.format(nullError,"Client ID"));  checkNotNull(configuration.getRedirectUri(),String.format(nullError,"Redirect URI"));  checkNotNull(configuration.getServerToken(),String.format(nullError,"Server Token"));  checkState(!configuration.getClientId().equals("insert_your_client_id_here"),String.format(sampleError,"Client ID"));  checkState(!configuration.getRedirectUri().equals("insert_your_redirect_uri_here"),String.format(sampleError,"Redirect URI"));  checkState(!configuration.getRedirectUri().equals("insert_your_server_token_here"),String.format(sampleError,"Server Token"));}  }
class C{  public static <I,A,SEP>Parser<I,IList<A>> sepEndBy(Parser<I,A> p,Parser<I,SEP> sep){  return or(sepEndBy1(p,sep),retn(IList.of()));}  }
class C{  public static IJavaSearchScope createReferencedScope(IJavaElement[] javaElements,int includeMask){  Set<IJavaProject> projects=new HashSet<IJavaProject>();  for (int i=0; i < javaElements.length; i++) {    projects.add(javaElements[i].getJavaProject());  }  IJavaProject[] prj=projects.toArray(new IJavaProject[projects.size()]);  return SearchEngine.createJavaSearchScope(prj,includeMask);}  }
class C{  private void execute(final int[] program,final TTGraphicsState gs){  if (program == null) {    return;  }  if (showDebugWindow && stepInto && debugWindow != null && debugWindow.isVisible()) {    codeStack.push(programToDebug);    numberStack.push(debugPointer);    functionsLineCount+=program.length;    setCurrentCodeForDebug(program,-1,!debuggerRunningInBackground);    return;  }  for (int currentPointer=0; currentPointer < program.length; currentPointer++) {    if (printOut) {      System.out.print(currentPointer + "\t");    }    currentPointer=process(program[currentPointer],currentPointer,program,gs);    if (watchAPoint && (watchX != x[GLYPH_ZONE][watchPoint] || watchY != y[GLYPH_ZONE][watchPoint])) {      final int diffX=x[GLYPH_ZONE][watchPoint] - watchX;      final int diffY=y[GLYPH_ZONE][watchPoint] - watchY;      watchX=x[GLYPH_ZONE][watchPoint];      watchY=y[GLYPH_ZONE][watchPoint];      System.out.print("Changed point " + watchPoint + " (");      if (diffX > 0) {        System.out.print("x+" + diffX);      } else       if (diffX != 0) {        System.out.print("x" + diffX);      }      if (diffX != 0 && diffY != 0) {        System.out.print(", ");      }      if (diffY > 0) {        System.out.print("y+" + diffY);      } else       if (diffY != 0) {        System.out.print("y" + diffY);      }      System.out.println(")");      printCoords();    }    if (printCoordsAfterEachInstruction && printOut) {      printCoords();    }    if (BaseTTGlyph.redecodePage) {      return;    }  }}  }
class C{  @Override public void topologyChanged(List<LDUpdate> updateList){  Iterator<Device> diter=deviceMap.values().iterator();  if (updateList != null) {    if (logger.isTraceEnabled()) {      for (      LDUpdate update : updateList) {        logger.trace("Topo update: {}",update);      }    }  }  while (diter.hasNext()) {    Device d=diter.next();    if (d.updateAttachmentPoint()) {      if (logger.isDebugEnabled()) {        logger.debug("Attachment point changed for device: {}",d);      }      sendDeviceMovedNotification(d);    }  }  debugEventService.flushEvents();}  }
class C{  private String constructMetricQueryKey(Long startTimeStampBoundary,MetricQuery query){  StringBuilder sb=new StringBuilder();  sb.append(startTimeStampBoundary).append(":");  sb.append(query.getNamespace()).append(":");  sb.append(query.getScope()).append(":");  sb.append(query.getMetric()).append(":");  Map<String,String> treeMap=new TreeMap<String,String>();  for (  Map.Entry<String,String> tag : query.getTags().entrySet()) {    String[] tagValues=tag.getValue().split("\\|");    Arrays.sort(tagValues);    StringBuilder sbTag=new StringBuilder();    String separator="";    for (    String tagValue : tagValues) {      sbTag.append(separator);      separator="|";      sbTag.append(tagValue);    }    treeMap.put(tag.getKey(),sbTag.toString());  }  sb.append(treeMap).append(":");  sb.append(query.getAggregator()).append(":");  sb.append(query.getDownsampler()).append(":");  sb.append(query.getDownsamplingPeriod());  return sb.toString();}  }
class C{  static int currentUserCheck(String stmt,int offset){  int length=offset + _CURRENT_USER.length;  if (stmt.length() >= length) {    if (ParseUtil.compare(stmt,offset,_CURRENT_USER)) {      if (stmt.length() > length && stmt.charAt(length) != ' ') {        return OTHER;      }      return USER;    }  }  return OTHER;}  }
class C{  @Override public void createMirrorFileShareLink(StorageSystem system,URI source,URI target,TaskCompleter completer) throws DeviceControllerException {  FileShare sourceFileShare=_dbClient.queryObject(FileShare.class,source);  FileShare targetFileShare=_dbClient.queryObject(FileShare.class,target);  StorageSystem sourceStorageSystem=_dbClient.queryObject(StorageSystem.class,sourceFileShare.getStorageDevice());  StorageSystem targetStorageSystem=_dbClient.queryObject(StorageSystem.class,targetFileShare.getStorageDevice());  String policyName=targetFileShare.getLabel();  VirtualPool virtualPool=_dbClient.queryObject(VirtualPool.class,sourceFileShare.getVirtualPool());  String schedule=null;  if (virtualPool != null) {    if (virtualPool.getFrRpoValue() == 0) {      schedule="";    } else {      schedule=createSchedule(virtualPool.getFrRpoValue().toString(),virtualPool.getFrRpoType());    }  }  BiosCommandResult cmdResult=doCreateReplicationPolicy(sourceStorageSystem,policyName,sourceFileShare.getPath(),targetStorageSystem.getIpAddress(),targetFileShare.getPath(),IsilonSyncPolicy.Action.sync,"",schedule);  if (cmdResult.getCommandSuccess()) {    completer.ready(_dbClient);  } else {    completer.error(_dbClient,cmdResult.getServiceCoded());  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public CtClass makeAnnotation(String name) throws RuntimeException {  try {    CtClass cc=makeInterface(name,get("java.lang.annotation.Annotation"));    cc.setModifiers(cc.getModifiers() | Modifier.ANNOTATION);    return cc;  } catch (  NotFoundException e) {    throw new RuntimeException(e.getMessage(),e);  }}  }
class C{  public List<Path> addLUNPathsToHSDs(String systemId,List<Path> pathList,String model) throws Exception {  InputStream responseStream=null;  List<Path> pathResponseList=null;  try {    String addLUNQuery=constructAddLUNQuery(systemId,pathList,model);    log.info("Query to addLUN Query: {}",addLUNQuery);    URI endpointURI=hdsApiClient.getBaseURI();    ClientResponse response=hdsApiClient.post(endpointURI,addLUNQuery);    if (HttpStatus.SC_OK == response.getStatus()) {      responseStream=response.getEntityInputStream();      JavaResult javaResult=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.SMOOKS_CONFIG_FILE);      verifyErrorPayload(javaResult);      pathResponseList=(List<Path>)javaResult.getBean(HDSConstants.PATHLIST_RESPONSE_BEANID);      if (null == pathResponseList || pathResponseList.isEmpty()) {        throw HDSException.exceptions.notAbleToAddVolumeToHSD(null,systemId);      }    } else {      throw HDSException.exceptions.invalidResponseFromHDS(String.format("Not able to add Volume to HostStorageDomain due to invalid response %1$s from server",response.getStatus()));    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("IOException occurred while closing the response stream");      }    }  }  return pathResponseList;}  }
class C{  void closeConnection(){synchronized (this) {    openConnectionCount--;  }}  }
class C{  @Nullable public CommonProblemDescriptor[] checkElement(@NotNull RefEntity refEntity,@NotNull AnalysisScope scope,@NotNull InspectionManager manager,@NotNull GlobalInspectionContext globalContext,@NotNull ProblemDescriptionsProcessor processor){  return checkElement(refEntity,scope,manager,globalContext);}  }
class C{  private int[][] houghTransformation(boolean[][] mat){  final int xres=mat.length, yres=mat[0].length;  final double tscale=STEPS * .5 / (xres + yres);  final int[][] ret=new int[STEPS][STEPS];  for (int x=0; x < mat.length; x++) {    for (int y=0; y < mat[0].length; y++) {      if (mat[x][y]) {        for (int i=0; i < STEPS; i++) {          final int d=(STEPS >> 1) + (int)(tscale * (x * table.cos(i) + y * table.sin(i)));          if (d > 0 && d < STEPS) {            ret[d][i]++;          }        }      }    }  }  return ret;}  }
class C{  public MigrationException(final String message,final Throwable throwable){  super(message,throwable);}  }
class C{  private void load(String projectTypeId){  try {    final URL url=Thread.currentThread().getContextClassLoader().getResource(projectTypeId + ".json");    if (url != null) {      try (InputStream inputStream=url.openStream()){        resolveTemplate(projectTypeId,inputStream);      }     }  } catch (  IOException e) {    LOG.debug(String.format("Can't load information about project templates for %s project type",projectTypeId),e);  }}  }
class C{  public void testGetF4(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF4();  assertEquals(expResult,result);}  }
class C{  private List<ClusteredPatterns> cluster(List<PatternReference> patterns){  final List<ClusteredPatterns> clusters=new ArrayList<>();  for (  final PatternReference pr : patterns) {    double maxScore=Double.NEGATIVE_INFINITY;    ClusteredPatterns bestCluster=null;    for (    final ClusteredPatterns cp : clusters) {      final double score=cp.calculateSimilarity(pr);      if (score > maxScore) {        maxScore=score;        bestCluster=cp;      }    }    if (maxScore > threshold && bestCluster != null) {      bestCluster.add(pr);    } else {      clusters.add(new ClusteredPatterns(pr));    }  }  return clusters;}  }
class C{  public Iterator edgesOutOf(Unit u){  return new ArrayList(unitMap.get(u)).iterator();}  }
class C{  public static Object parse(Reader in){  try {    JSONParser parser=new JSONParser();    return parser.parse(in);  } catch (  Exception e) {    return null;  }}  }
class C{  private SettingsManager(String fileName){  if (!UltraCosmeticsData.get().getPlugin().getDataFolder().exists()) {    UltraCosmeticsData.get().getPlugin().getDataFolder().mkdir();  }  File f=new File(UltraCosmeticsData.get().getPlugin().getDataFolder(),"/data");  if (!f.exists())   f.mkdirs();  file=new File(UltraCosmeticsData.get().getPlugin().getDataFolder(),fileName + ".yml");  if (!file.exists()) {    try {      file.createNewFile();    } catch (    Exception e) {      e.printStackTrace();    }  }  fileConfiguration=YamlConfiguration.loadConfiguration(file);}  }
class C{  @Deprecated public boolean validate(String regex,CharSequence errorText){  boolean isValid=isValid(regex);  if (!isValid) {    setError(errorText);  }  postInvalidate();  return isValid;}  }
class C{  public static Image createDisabledImage(Image i){  GrayFilter filter=new GrayFilter(true,50);  ImageProducer prod=new FilteredImageSource(i.getSource(),filter);  Image grayImage=Toolkit.getDefaultToolkit().createImage(prod);  return grayImage;}  }
class C{  public InlineQueryResultCachedGifBuilder replyMarkup(InlineReplyMarkup replyMarkup){  this.reply_markup=replyMarkup;  return this;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return VERSIONS;case 2:  return TIMESTAMP;default :return null;}}  }
class C{  public static void openPlayStore(Context context){  openPlayStore(context,context.getPackageName());}  }
class C{  protected int insertIndexForLayer(int layer,int position){  return insertIndexForLayer(null,layer,position);}  }
class C{  public static void main(String[] args){  FlagOption suppressStatusOutOpt=new FlagOption("suppressStatusOut",'S',SUPPRESS_STATUS_OUT_MSG);  FlagOption suppressResultOutOpt=new FlagOption("suppressResultOut",'R',SUPPRESS_RESULT_OUT_MSG);  IntOption statusUpdateFreqOpt=new IntOption("statusUpdateFrequency",'F',STATUS_UPDATE_FREQ_MSG,1000,0,Integer.MAX_VALUE);  Option[] extraOptions=new Option[]{suppressStatusOutOpt,suppressResultOutOpt,statusUpdateFreqOpt};  StringBuilder cliString=new StringBuilder();  for (  String arg : args) {    cliString.append(" ").append(arg);  }  logger.debug("Command line string = {}",cliString.toString());  System.out.println("Command line string = " + cliString.toString());  Task task;  try {    task=ClassOption.cliStringToObject(cliString.toString(),Task.class,extraOptions);    logger.info("Successfully instantiating {}",task.getClass().getCanonicalName());  } catch (  Exception e) {    logger.error("Fail to initialize the task",e);    System.out.println("Fail to initialize the task" + e);    return;  }  task.setFactory(new SimpleComponentFactory());  task.init();  SimpleEngine.submitTopology(task.getTopology());}  }
class C{  public void testValueOfDoubleNeg(){  double a=-65678765876567576.98788767;  BigDecimal result=BigDecimal.valueOf(a);  String res="-65678765876567576";  int resScale=0;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public void saveLocaleInPreferences(final String preferencesPath,final String preferenceName){  if (Strings.isEmpty(preferencesPath) || Strings.isEmpty(preferenceName)) {    throw new GdxRuntimeException("Preference path and name cannot be empty! These are set automatically if you annotate a path to preference with @I18nBundle and pass a corrent path to the preferences.");  }  final Preferences preferences=ApplicationPreferences.getPreferences(preferencesPath);  preferences.putString(preferenceName,fromLocale(currentLocale.get()));  preferences.flush();}  }
class C{  public double cdf(int k){  return Probability.poisson(k,this.mean);}  }
class C{  @Deprecated @Override public void putAll(Map<? extends TypeToken<? extends B>,? extends B> map){  throw new UnsupportedOperationException();}  }
class C{  public static char toCharValue(Object o,char defaultValue){  if (o instanceof Character)   return ((Character)o).charValue(); else   if (o instanceof Boolean)   return (char)((((Boolean)o).booleanValue()) ? 1 : 0); else   if (o instanceof Double)   return (char)(((Double)o).doubleValue()); else   if (o instanceof Number)   return (char)(((Number)o).doubleValue()); else   if (o instanceof String) {    String str=o.toString();    if (str.length() > 0)     return str.charAt(0);    return defaultValue;  } else   if (o instanceof ObjectWrap) {    return toCharValue(((ObjectWrap)o).getEmbededObject(toCharacter(defaultValue)),defaultValue);  } else   if (o == null)   return toCharValue("",defaultValue);  return defaultValue;}  }
class C{  public void discoverArrayAffinity(AccessProfile accessProfile,DbClient dbClient,PartitionManager partitionManager) throws Exception {  logger.info("Started array affinity discovery for system {}",accessProfile.getSystemId());  VNXeApiClient apiClient=vnxeApiClientFactory.getUnityClient(accessProfile.getIpAddress(),accessProfile.getPortNumber(),accessProfile.getUserName(),accessProfile.getPassword());  StorageSystem system=dbClient.queryObject(StorageSystem.class,accessProfile.getSystemId());  String hostIdsStr=accessProfile.getProps().get(Constants.HOST_IDS);  if (hostIdsStr != null) {    logger.info("Processing hosts {}",hostIdsStr);    String[] hostIds=hostIdsStr.split(Constants.ID_DELIMITER);    for (    String hostId : hostIds) {      logger.info("Processing host {}",hostId);      processHost(system,apiClient,dbClient,hostId);    }  } else {    logger.info("Processing all hosts");    processAllHosts(system,apiClient,dbClient,partitionManager);  }}  }
class C{  public static void main(String... args) throws Exception {  if (System.getProperty("boot.module.loader") == null) {    System.setProperty("boot.module.loader","org.wildfly.swarm.bootstrap.modules.BootModuleLoader");  }  Swarm swarm=new Swarm(args);  swarm.start().deploy();}  }
class C{  private static String normalize(final String str){  char c;  StringBuffer buf=new StringBuffer();  for (int i=0; i < str.length(); i++) {    c=str.charAt(i);    if (Character.isLetter(c)) {      buf.append(Character.toLowerCase(c));    }  }  return buf.toString();}  }
class C{  public void onReceive(Object message) throws Exception {  if (HookAndEvents.class.isAssignableFrom(message.getClass())) {    @SuppressWarnings("unused") Future<HookExecutor.STATUS> hookResult=new HookExecutor(((HookAndEvents)message).getHook(),((HookAndEvents)message).getEvents()).queue();    getSender().tell(HookExecutor.STATUS.EXECUTION_SCHEDULED,getSelf());  } else {    logger.error("Hook received a message that it cannot process. Only com.flipkart.flux.impl.message.HookAndEvents is supported. Message type received is : " + message.getClass().getName());    unhandled(message);  }}  }
class C{  public String toString(){  return "now()";}  }
class C{  public void updateRequestTimeout(TimeSpan span) throws SecurityException, ApplicationException {  checkWriteAccess();  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_SETTING);  if (!hasAccess)   throw new SecurityException("no access to update scope setting");  Element scope=_getRootElement("scope");  Element application=_getRootElement("application");  if (span != null) {    if (span.getMillis() <= 0)     throw new ApplicationException("value must be a positive number");    application.setAttribute("requesttimeout",span.getDay() + "," + span.getHour()+ ","+ span.getMinute()+ ","+ span.getSecond());  } else   application.removeAttribute("requesttimeout");  if (scope.hasAttribute("requesttimeout"))   scope.removeAttribute("requesttimeout");}  }
class C{  private void initDownloadFileInfoMapFromDb(){  ContentDbDao dao=mDownloadFileDbHelper.getContentDbDao(DownloadFileInfo.Table.TABLE_NAME_OF_DOWNLOAD_FILE);  if (dao == null) {    return;  }  Cursor cursor=dao.query(null,null,null,null);  List<DownloadFileInfo> downloadFileInfos=getDownloadFilesFromCursor(cursor);  if (cursor != null && !cursor.isClosed()) {    cursor.close();  }  if (CollectionUtil.isEmpty(downloadFileInfos)) {    return;  }  for (  DownloadFileInfo downloadFileInfo : downloadFileInfos) {    if (!DownloadFileUtil.isLegal(downloadFileInfo)) {      continue;    }synchronized (mModifyLock) {      mDownloadFileInfoMap.put(downloadFileInfo.getUrl(),downloadFileInfo);    }  }}  }
class C{  public void init(int size,int certainty,SecureRandom random){  this.use186_3=false;  this.L=size;  this.N=getDefaultN(size);  this.certainty=certainty;  this.random=random;}  }
class C{  public static SchedulerTestEnvironment create(HostClientFactory hostClientFactory,RootSchedulerConfig config,ConstraintChecker checker,CloudStoreHelper cloudStoreHelper,int hostCount) throws Throwable {  SchedulerTestEnvironment schedulerTestEnvironment=new SchedulerTestEnvironment(hostClientFactory,config,checker,cloudStoreHelper,hostCount);  schedulerTestEnvironment.start();  return schedulerTestEnvironment;}  }
class C{  int deleteFrom(int index,int lastIndex) throws GondolaException {  int deleted=0;  if (lastIndex < 0) {    lastIndex=savedIndex;    LogEntry entry=storage.getLastLogEntry(cmember.memberId);    if (entry != null) {      lastIndex=entry.index;    }  }  for (int i=lastIndex; i >= index; i--) {    LogEntry entry=storage.getLogEntry(cmember.memberId,i);    if (entry != null) {      logger.info("[{}-{}] SaveQueue: deleting index={}",gondola.getHostId(),cmember.memberId,i);      storage.delete(cmember.memberId,i);      deleted++;    }  }  return deleted;}  }
class C{  public void testClearBitPositiveOutside2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=191;  byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public int size(){  return end - start;}  }
class C{  public String globalInfo(){  return "K-nearest neighbours classifier. Can " + "select appropriate value of K based on cross-validation. Can also do " + "distance weighting.\n\n"+ "For more information, see\n\n"+ getTechnicalInformation().toString();}  }
class C{  @Around("execution(* org.yes.cart.service.payment.impl.PaymentProcessorImpl.cancelOrder(..))") public Object doCancel(final ProceedingJoinPoint pjp) throws Throwable {  final String rez=(String)pjp.proceed();  doNotify(pjp,rez,cancelShopperTemplates,cancelAdminTemplates);  return rez;}  }
class C{  public String greetServer(String input) throws IllegalArgumentException {  return "";}  }
class C{  public static int[][] convertToIntArray(double[][] vals){  int[][] ret=new int[vals.length][];  for (int i=0; i < vals.length; i++) {    double[] valsi=vals[i];    int[] reti=ret[i]=new int[valsi.length];    for (int j=0; j < valsi.length; j++) {      int a=(int)valsi[j];      if (a == valsi[j])       reti[j]=a; else       return null;    }  }  return ret;}  }
class C{  public boolean equals(Object object){  if (this == object)   return true;  if (object instanceof ClasspathEntry) {    ClasspathEntry otherEntry=(ClasspathEntry)object;    if (this.contentKind != otherEntry.getContentKind())     return false;    if (this.entryKind != otherEntry.getEntryKind())     return false;    if (this.isExported != otherEntry.isExported())     return false;    if (!this.path.equals(otherEntry.getPath()))     return false;    IPath otherPath=otherEntry.getSourceAttachmentPath();    if (this.sourceAttachmentPath == null) {      if (otherPath != null)       return false;    } else {      if (!this.sourceAttachmentPath.equals(otherPath))       return false;    }    otherPath=otherEntry.getSourceAttachmentRootPath();    if (this.sourceAttachmentRootPath == null) {      if (otherPath != null)       return false;    } else {      if (!this.sourceAttachmentRootPath.equals(otherPath))       return false;    }    if (!equalPatterns(this.inclusionPatterns,otherEntry.getInclusionPatterns()))     return false;    if (!equalPatterns(this.exclusionPatterns,otherEntry.getExclusionPatterns()))     return false;    AccessRuleSet otherRuleSet=otherEntry.getAccessRuleSet();    if (getAccessRuleSet() != null) {      if (!getAccessRuleSet().equals(otherRuleSet))       return false;    } else     if (otherRuleSet != null)     return false;    if (this.combineAccessRules != otherEntry.combineAccessRules())     return false;    otherPath=otherEntry.getOutputLocation();    if (this.specificOutputLocation == null) {      if (otherPath != null)       return false;    } else {      if (!this.specificOutputLocation.equals(otherPath))       return false;    }    if (!equalAttributes(this.extraAttributes,otherEntry.getExtraAttributes()))     return false;    return true;  } else {    return false;  }}  }
class C{  public static void handleException(final Exception e){  QLog.e(e.toString());  e.printStackTrace();}  }
class C{  public NTRUEncryptionPublicKeyParameters(IntegerPolynomial h,NTRUEncryptionParameters params){  super(false,params);  this.h=h;}  }
class C{  public String toString(){  return "[id=" + id + ",length="+ length+ "]";}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void typeInsn(final int opcode,final Type type){  mv.visitTypeInsn(opcode,type.getInternalName());}  }
class C{  @Override public short[][] production_table(){  return _production_table;}  }
class C{  protected ElevationModel createNonCompoundModel(Element domElement,AVList params){  ElevationModel em;  String serviceName=WWXML.getText(domElement,"Service/@serviceName");  if (serviceName.equals("Offline")) {    em=new BasicElevationModel(domElement,params);  } else   if (serviceName.equals("WWTileService")) {    em=new BasicElevationModel(domElement,params);  } else   if (serviceName.equals(OGCConstants.WMS_SERVICE_NAME)) {    em=new WMSBasicElevationModel(domElement,params);  } else   if (serviceName.equals(OGCConstants.WCS_SERVICE_NAME)) {    em=new WCSElevationModel(domElement,params);  } else   if (AVKey.SERVICE_NAME_LOCAL_RASTER_SERVER.equals(serviceName)) {    em=new LocalRasterServerElevationModel(domElement,params);  } else {    String msg=Logging.getMessage("generic.UnrecognizedServiceName",serviceName);    throw new WWUnrecognizedException(msg);  }  return em;}  }
class C{  protected void updateMenu(){  if (m_MenuBar == null)   return;  m_MenuItemFileOpen.setEnabled(true);  m_MenuItemFileClose.setEnabled(true);}  }
class C{  public static void validateNotEmpty(SequencesReader reader){  if (reader == null || reader.numberSequences() == 0) {    final String dir;    if (reader == null || reader.path() == null) {      dir="<Unknown>";    } else {      dir=reader.path().getAbsolutePath();    }    throw new NoTalkbackSlimException(ErrorType.INFO_ERROR,"The SDF \"" + dir + "\" was empty.");  }}  }
class C{  public void testElementOrderFilterBeforeServlet() throws Exception {  String xml=WEBAPP_TEST_HEADER + "" + "  <servlet>".trim()+ "    <servlet-name>s1</servlet-name>".trim()+ "    <servlet-class>s1class</servlet-class>".trim()+ "  </servlet>".trim()+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  webXml.addTag(createFilterElement(webXml.getDescriptorType(),"f1","f1class"));  List<Content> order=webXml.getRootElement().getChildren();  assertEquals("filter",((Element)order.get(0)).getName());  assertEquals("servlet",((Element)order.get(1)).getName());}  }
class C{  private LastFmApi(){}  }
class C{  public boolean isLastLevel(){  return this.levelNumber == this.parent.numLevels() - 1;}  }
class C{  private boolean isUsed(File path){  return path.exists();}  }
class C{  public static Class<?> findCommonElementType(Collection<?> collection){  if (isEmpty(collection)) {    return null;  }  Class<?> candidate=null;  for (  Object val : collection) {    if (val != null) {      if (candidate == null) {        candidate=val.getClass();      } else       if (candidate != val.getClass()) {        return null;      }    }  }  return candidate;}  }
class C{  public VectorClock incremented(int nodeId,long time){  if (nodeId < 0 || nodeId > Short.MAX_VALUE)   throw new IllegalArgumentException(nodeId + " is outside the acceptable range of node ids.");  List<ClockEntry> newversions=Lists.newArrayList(versions);  boolean found=false;  int index=0;  for (; index < newversions.size(); index++) {    if (newversions.get(index).getNodeId() == nodeId) {      found=true;      break;    } else     if (newversions.get(index).getNodeId() > nodeId) {      found=false;      break;    }  }  if (found) {    newversions.set(index,newversions.get(index).incremented());  } else   if (index < newversions.size() - 1) {    newversions.add(index,new ClockEntry((short)nodeId,1));  } else {    if (newversions.size() > MAX_NUMBER_OF_VERSIONS)     throw new IllegalStateException("Vector clock is full!");    newversions.add(index,new ClockEntry((short)nodeId,1));  }  return new VectorClock(newversions,time);}  }
class C{  @DSComment("Wifi subsystem") @DSSpec(DSCat.WIFI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.314 -0500",hash_original_method="AD9DD9C3B4130EB49C99A6BF92BCA383",hash_generated_method="77CCB71F17073013C1ADA1E87119797F") public boolean reconnect(){  try {    mService.reconnect();    return true;  } catch (  RemoteException e) {    return false;  }}  }
class C{  public static void main(String[] args){  In in=new In(args[0]);  int context=Integer.parseInt(args[1]);  String text=in.readAll().replaceAll("\\s+"," ");  int n=text.length();  SuffixArray sa=new SuffixArray(text);  while (StdIn.hasNextLine()) {    String query=StdIn.readLine();    for (int i=sa.rank(query); i < n; i++) {      int from1=sa.index(i);      int to1=Math.min(n,from1 + query.length());      if (!query.equals(text.substring(from1,to1)))       break;      int from2=Math.max(0,sa.index(i) - context);      int to2=Math.min(n,sa.index(i) + context + query.length());      StdOut.println(text.substring(from2,to2));    }    StdOut.println();  }}  }
class C{  public void addConcept(Class<?> concept) throws ObjectStoreConfigException {  if (concepts.containsKey(concept))   throw new ObjectStoreConfigException(concept.getSimpleName() + " can only be added once");  concepts.put(concept,null);}  }
class C{  public T caseHexEscapeSequence(HexEscapeSequence object){  return null;}  }
class C{  public void push(final float value){  int bits=Float.floatToIntBits(value);  if (bits == 0L || bits == 0x3f800000 || bits == 0x40000000) {    mv.visitInsn(Opcodes.FCONST_0 + (int)value);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  static Object doFloorMod(int x,int y){  try {    return Math.floorMod(x,y);  } catch (  ArithmeticException ae) {    return ae;  }}  }
class C{  public ViewEngine find(Viewable viewable){  Optional<ViewEngine> engine;  final String view=viewable.getView();  final Class<? extends ViewEngine> engineClass=viewable.getViewEngine();  if (engineClass != null) {    engine=Optional.of(cdiUtils.newBean(engineClass));  } else {    engine=Optional.ofNullable(cache.get(view));    if (!engine.isPresent()) {      List<ViewEngine> engines=CdiUtils.getApplicationBeans(ViewEngine.class);      final Set<ViewEngine> candidates=engines.stream().filter(null).collect(toSet());      engine=candidates.stream().max(null);      if (engine.isPresent()) {        cache.put(view,engine.get());      }    }  }  return engine.isPresent() ? engine.get() : null;}  }
class C{  protected void onOpened(int position,boolean toRight){  if (swipeListViewListener != null && position != ListView.INVALID_POSITION) {    swipeListViewListener.onOpened(position,toRight);  }}  }
class C{  public boolean isComputerNode(File dir){  return false;}  }
class C{  @Override public void onCommit(List<? extends IndexCommit> commits){  int size=commits.size();  for (int i=0; i < size - 1; i++) {    commits.get(i).delete();  }}  }
class C{  public static MedianProjectionExpression medianDistinct(Expression expression){  return new MedianProjectionExpression(expression,true);}  }
class C{  public DeadEvent(Object source,Object event){  this.source=source;  this.event=event;}  }
class C{  public FullPrunedBlockChain(Context context,FullPrunedBlockStore blockStore) throws BlockStoreException {  this(context,new ArrayList<Wallet>(),blockStore);}  }
class C{  public String generateSkinSource(String fullClassName,String baseClassName,boolean needsIBorder,boolean needsBorderMetrics,boolean needsIFlexDisplayObject,boolean needsMeasuredHeight,boolean needsMeasuredWidth,boolean needsMove,boolean needsSetActualSize,boolean flexMovieClipOrSprite,Logger logger){  String result=null;  try {    result=SkinTranscoder.generateSource(fullClassName,baseClassName,needsIBorder,needsBorderMetrics,needsIFlexDisplayObject,needsMeasuredHeight,needsMeasuredWidth,needsMove,needsSetActualSize,flexMovieClipOrSprite);  } catch (  TranscoderException transcoderException) {    logger.log(transcoderException,-1,null);  }  return result;}  }
class C{  protected void printAttributeSummary(AttrTypes attrTypes,int classType){  String str="";  if (attrTypes.numeric) {    str+=" numeric";  }  if (attrTypes.nominal) {    if (str.length() > 0) {      str+=" &";    }    str+=" nominal";  }  if (attrTypes.string) {    if (str.length() > 0) {      str+=" &";    }    str+=" string";  }  if (attrTypes.date) {    if (str.length() > 0) {      str+=" &";    }    str+=" date";  }  if (attrTypes.relational) {    if (str.length() > 0) {      str+=" &";    }    str+=" relational";  }  str+=" attributes)";switch (classType) {case Attribute.NUMERIC:    str=" (numeric class," + str;  break;case Attribute.NOMINAL:str=" (nominal class," + str;break;case Attribute.STRING:str=" (string class," + str;break;case Attribute.DATE:str=" (date class," + str;break;case Attribute.RELATIONAL:str=" (relational class," + str;break;}print(str);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TSTRUCT_FIELD__DEFINED_MEMBER:    setDefinedMember((TStructMember)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @Override public void delete(){  Path path=file.file().toPath();  if (Files.exists(path)) {    try {      Files.delete(file.file().toPath());    } catch (    IOException e) {    }  }}  }
class C{  public final long deleteSession(final long id){  return contentResolver.delete(ContentUris.withAppendedId(ContentProvider.CONTENT_URI_SESSION,id),null,null);}  }
class C{  public EcuDataItem(){}  }
class C{  public GCMParameterSpec(int tLen,byte[] src,int offset,int len){  init(tLen,src,offset,len);}  }
class C{  public void insertUpdate(DocumentEvent e,Shape a,ViewFactory f){  super.insertUpdate(e,a,this);}  }
class C{  @Override public CategoricalTable copy(){  Map<Value,Double> newTable=new HashMap<Value,Double>();  for (  Value v : table.keySet()) {    newTable.put(v,table.get(v));  }  return new CategoricalTable(variable,newTable);}  }
class C{  public final int resolvePort(int port){  return ((port <= 0) || (port > 0xffff)) ? defaultPort : port;}  }
class C{  public boolean hasErrors(){  return fError;}  }
class C{  protected static void save(final MultipartFile... files) throws IOException {  if (files != null) {    for (    final MultipartFile file : files) {      save(file);    }  }}  }
class C{  public OscProperties properties(){  return _myOscProperties;}  }
class C{  @Override public void run(){  if (ActiveMQRASession.trace) {    ActiveMQRALogger.LOGGER.trace("run()");  }  throw new Error("Method not allowed");}  }
class C{  public static double magnitude(final double x,final double y,final double z){  return Math.sqrt(x * x + y * y + z * z);}  }
class C{  protected void startDocumentInternal() throws org.xml.sax.SAXException {  super.startDocumentInternal();  m_needToCallStartDocument=false;}  }
class C{  public boolean isData(){  return data;}  }
class C{  public void slashStarComments(boolean flag){  slashStarComments=flag;}  }
class C{  private int appendNextCharacterAndAdvanceLoop(String line,StringBuilder sb,int i){  sb.append(line.charAt(i + 1));  i++;  return i;}  }
class C{  private boolean saveOverwriteAppend(StringBuffer buf,File sFile,boolean append){  try {    String path=sFile.getPath();    if (m_Log != null) {      if (append) {        m_Log.statusMessage("Appending to file...");      } else {        m_Log.statusMessage("Saving to file...");      }    }    PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(path,append)));    out.write(buf.toString(),0,buf.toString().length());    out.close();    if (m_Log != null) {      m_Log.statusMessage("OK");    }  } catch (  Exception ex) {    ex.printStackTrace();    if (m_Log != null) {      m_Log.logMessage(ex.getMessage());    }    return false;  }  return true;}  }
class C{  private void debug(Object variable,String name){  if (variable != null) {    System.out.println("*************" + name + "="+ variable);  } else   System.out.println("*************" + name + " is null");}  }
class C{  public boolean isOverlayVisible(){  return overlayVisible;}  }
class C{  protected void installDefaults(JPanel p){  super.installDefaults(p);}  }
class C{  public PendingCall(String name,String method,Object[] args){  super(name,method,args);}  }
class C{  void generateTrunk(){  int var1=this.basePos[0];  int var2=this.basePos[1];  int var3=this.basePos[1] + this.height;  int var4=this.basePos[2];  int[] var5=new int[]{var1,var2,var4};  int[] var6=new int[]{var1,var3,var4};  this.placeBlockLine(var5,var6,Blocks.log);  if (this.trunkSize == 2) {    ++var5[0];    ++var6[0];    this.placeBlockLine(var5,var6,Blocks.log);    ++var5[2];    ++var6[2];    this.placeBlockLine(var5,var6,Blocks.log);    var5[0]+=-1;    var6[0]+=-1;    this.placeBlockLine(var5,var6,Blocks.log);  }}  }
class C{  public static String pasteStringFromClipboard(){  return ClipboardHelper.pasteStringFromClipboard();}  }
class C{  public static Config convertJSONObjectToConfig(JsonElement configInJson){  return new Gson().fromJson(configInJson,Config.class);}  }
class C{  public void sendRelationCreationNotification(String relationId) throws IllegalArgumentException, RelationNotFoundException {  if (relationId == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"sendRelationCreationNotification",relationId);  StringBuilder ntfMsg=new StringBuilder("Creation of relation ");  ntfMsg.append(relationId);  sendNotificationInt(1,ntfMsg.toString(),relationId,null,null,null,null);  RELATION_LOGGER.exiting(RelationService.class.getName(),"sendRelationCreationNotification");  return;}  }
class C{  @Override public boolean isDateAllowed(LocalDate date){  if ((date.getDayOfMonth() >= 7) && (date.getDayOfMonth() <= 11)) {    return false;  }  if ((date.getDayOfWeek() == DayOfWeek.SATURDAY) && ((date.getDayOfMonth() % 2) == 1)) {    return false;  }  return true;}  }
class C{  public static void registerGUIBundle(ResourceBundle bundle,boolean overwrite){  if (!overwrite) {    GUI_BUNDLE.addResourceBundle(bundle);  } else {    GUI_BUNDLE.addResourceBundleAndOverwrite(bundle);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static RestrictionsHolder empty(){  return EMPTY;}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.062 -0400",hash_original_method="6E71F74AE8E714A009EC36E9EAC6B88D",hash_generated_method="4837D2A5F41F728A93AB085148E628E7") @Override public void write(byte[] b,int off,int len){}  }
class C{  public Vector add(Vector other){  return new Vector(x + other.x,y + other.y,z + other.z);}  }
class C{  private BytesRef ser2bytes(Serializable ser) throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream();  ObjectOutputStream oos=null;  try {    oos=new ObjectOutputStream(out);    oos.writeObject(ser);    oos.flush();  }  finally {    if (oos != null) {      try {        oos.close();      } catch (      Exception ignore) {      }    }  }  return new BytesRef(out.toByteArray());}  }
class C{  @Override public String toString(){  return "" + set.toString();}  }
class C{  public void clearHex(IHex hex){  hexTileset.clearHex(hex);}  }
class C{  public static void timeUntil(final StringBuilder sbuf,int seconds,final boolean forceSeconds){  boolean appended=false;  int count=seconds / SECONDS_IN_WEEK;  if (count != 0) {    seconds-=(count * SECONDS_IN_WEEK);    sbuf.append(count);    sbuf.append(' ');    sbuf.append(Grammar.plnoun(count,"week"));    appended=true;  }  count=seconds / SECONDS_IN_DAY;  if (count != 0) {    seconds-=(count * SECONDS_IN_DAY);    if (appended) {      sbuf.append(", ");    } else {      appended=true;    }    sbuf.append(count);    sbuf.append(' ');    sbuf.append(Grammar.plnoun(count,"day"));  }  count=seconds / SECONDS_IN_HOUR;  if (count != 0) {    seconds-=(count * SECONDS_IN_HOUR);    if (appended) {      sbuf.append(", ");    } else {      appended=true;    }    sbuf.append(count);    sbuf.append(' ');    sbuf.append(Grammar.plnoun(count,"hour"));  }  count=seconds / SECONDS_IN_MINUTE;  if (count != 0) {    seconds-=(count * SECONDS_IN_MINUTE);    if (appended) {      sbuf.append(", ");    } else {      appended=true;    }    sbuf.append(count);    sbuf.append(' ');    sbuf.append(Grammar.plnoun(count,"minute"));  }  if (!appended || (forceSeconds && (seconds != 0))) {    if (appended) {      sbuf.append(", ");    }    sbuf.append(seconds);    sbuf.append(' ');    sbuf.append(Grammar.plnoun(count,"second"));  }}  }
class C{  public void createMonthScenarioBug10249_perUnit_steppedEvents() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.daysToMillis(3.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"BUG10249_PER_UNIT_MONTH_EVENTS",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_MONTH_STEPPED_EVENTS,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("BUG10249_PER_UNIT_MONTH_EVENTS",serviceDetails,basicSetup.getCustomerUser1(),role);  container.login(basicSetup.getSupplierAdminKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  subscrSetup.recordEventForSubscription(subDetails,usageStartTime + DateTimeHandling.daysToMillis(8),"FILE_DOWNLOAD",75);  subscrSetup.recordEventForSubscription(subDetails,usageStartTime + DateTimeHandling.daysToMillis(10),"FILE_UPLOAD",13);  subscrSetup.recordEventForSubscription(subDetails,usageStartTime + DateTimeHandling.daysToMillis(10),"FOLDER_NEW",1);  long usageEndTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.daysToMillis(10);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("BUG10249_PER_UNIT_MONTH_EVENTS",subDetails);}  }
class C{  public boolean isPannable(){  return pannable;}  }
class C{  public boolean isMultiRowOnly(){  Object oo=get_Value(COLUMNNAME_IsMultiRowOnly);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public <T extends Number>void addFeature(List<Integer> fIdxList,List<T> fValueList){  idxList.addAll(fIdxList);  for (int i=0; i < fValueList.size(); i++)   valList.add((float)fValueList.get(i).floatValue());}  }
class C{  protected ManagedSystemMemberImpl(AdminDistributedSystemImpl system,ManagedEntityConfig config) throws AdminException {  super(system);  this.internalId=null;  this.id=getNewId();  this.host=config.getHost();  this.name=this.id;  this.controller=system.getEntityController();}  }
class C{  public void keyPressed(KeyEvent e){  if (!plotSupported) {    return;  }  int keyCode=e.getKeyCode();  if ((keyCode < 37) || (keyCode > 40)) {    return;  }  ValueAxis[] axes=null;  boolean domainShift=false;  if ((keyCode == KeyEvent.VK_LEFT) || (keyCode == KeyEvent.VK_RIGHT)) {    axes=getPlotAxis(chartPanel.getChart(),!axesSwaped);    domainShift=true;  } else {    axes=getPlotAxis(chartPanel.getChart(),axesSwaped);  }  double[] delta=new double[axes.length];  for (int i=0; i < axes.length; i++) {switch (shiftType) {case SHIFT_PERCENTUAL:      delta[i]=(axes[i].getUpperBound() - axes[i].getLowerBound()) / 100.0;    break;case SHIFT_FIXED:  delta[i]=(domainShift ? fixedDomainShiftUnits : fixedRangeShiftUnits);break;case SHIFT_PIXEL:default :final Rectangle2D scaledDataArea=chartPanel.getScreenDataArea();delta[i]=axes[i].getRange().getLength() / (scaledDataArea.getWidth());break;}}if (e.isShiftDown()) {for (int i=0; i < delta.length; i++) {delta[i]*=10;}}for (int i=0; i < axes.length; i++) {switch (keyCode) {case KeyEvent.VK_LEFT:case KeyEvent.VK_DOWN:axes[i].setRange(axes[i].getLowerBound() - delta[i],axes[i].getUpperBound() - delta[i]);break;case KeyEvent.VK_UP:case KeyEvent.VK_RIGHT:axes[i].setRange(axes[i].getLowerBound() + delta[i],axes[i].getUpperBound() + delta[i]);break;}}}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.175 -0400",hash_original_method="CE23EAC8D9C52BC01B585ADBA21C19FD",hash_generated_method="F9EE0D3E1ECCCD31DB5B99B5C0CE8D24") public static byte[] toByteArray(Reader input) throws IOException {  return toByteArray(input,Charset.defaultCharset());}  }
class C{  public void contextCreated(Context cx){  if (type != IPROXY_LISTEN)   Kit.codeBug();  ContextData contextData=new ContextData();  Debugger debugger=new DimIProxy(dim,IPROXY_DEBUG);  cx.setDebugger(debugger,contextData);  cx.setGeneratingDebug(true);  cx.setOptimizationLevel(-1);}  }
class C{  @Override public boolean updateElevation(QuadTree quadTree){  boolean modified=false;  for (int i=0; i < getNumberOfChildren(); ++i) {    Spatial child=getChild(i);    if (child instanceof LineStrip) {      LineStrip lineStrip=(LineStrip)child;      if (lineStrip.intersects(quadTree)) {        lineStrip.updateElevation(quadTree);        modified=true;      }    }  }  return (modified);}  }
class C{  public N4JSNewInterfaceWizardPage(){  this.setTitle("New N4JS Interface");  this.setMessage("Create a new N4JS Interface");  this.setPageComplete(false);}  }
class C{  public static void startObservationsAndOrdersSync(){  SyncAccountService.startObservationsAndOrdersSync();}  }
class C{  protected void addTrailerToOutput(byte[] msg,int offset,AbstractMRMessage m){  incomingLength=((SerialMessage)m).getResponseLength();  currentAddr=((SerialMessage)m).getAddr();  return;}  }
class C{  public void incBoughtForItem(String name,int quantity){  itemCounter.incBoughtForItem(name,quantity);}  }
class C{  private void sendDataToWearable(List<Attraction> attractions){  GoogleApiClient googleApiClient=new GoogleApiClient.Builder(this).addApi(Wearable.API).build();  ConnectionResult connectionResult=googleApiClient.blockingConnect(Constants.GOOGLE_API_CLIENT_TIMEOUT_S,TimeUnit.SECONDS);  int count=attractions.size() > Constants.MAX_ATTRACTIONS ? Constants.MAX_ATTRACTIONS : attractions.size();  ArrayList<DataMap> attractionsData=new ArrayList<>(count);  for (int i=0; i < count; i++) {    Attraction attraction=attractions.get(i);    Bitmap image=null;    Bitmap secondaryImage=null;    try {      image=Glide.with(this).load(attraction.imageUrl).asBitmap().diskCacheStrategy(DiskCacheStrategy.SOURCE).into(Constants.WEAR_IMAGE_SIZE_PARALLAX_WIDTH,Constants.WEAR_IMAGE_SIZE).get();      secondaryImage=Glide.with(this).load(attraction.secondaryImageUrl).asBitmap().diskCacheStrategy(DiskCacheStrategy.SOURCE).into(Constants.WEAR_IMAGE_SIZE_PARALLAX_WIDTH,Constants.WEAR_IMAGE_SIZE).get();    } catch (    InterruptedException|ExecutionException e) {      Log.e(TAG,"Exception loading bitmap from network");    }    if (image != null && secondaryImage != null) {      DataMap attractionData=new DataMap();      String distance=Utils.formatDistanceBetween(Utils.getLocation(this),attraction.location);      attractionData.putString(Constants.EXTRA_TITLE,attraction.name);      attractionData.putString(Constants.EXTRA_DESCRIPTION,attraction.description);      attractionData.putDouble(Constants.EXTRA_LOCATION_LAT,attraction.location.latitude);      attractionData.putDouble(Constants.EXTRA_LOCATION_LNG,attraction.location.longitude);      attractionData.putString(Constants.EXTRA_DISTANCE,distance);      attractionData.putString(Constants.EXTRA_CITY,attraction.city);      attractionData.putAsset(Constants.EXTRA_IMAGE,Utils.createAssetFromBitmap(image));      attractionData.putAsset(Constants.EXTRA_IMAGE_SECONDARY,Utils.createAssetFromBitmap(secondaryImage));      attractionsData.add(attractionData);    }  }  if (connectionResult.isSuccess() && googleApiClient.isConnected() && attractionsData.size() > 0) {    PutDataMapRequest dataMap=PutDataMapRequest.create(Constants.ATTRACTION_PATH);    dataMap.getDataMap().putDataMapArrayList(Constants.EXTRA_ATTRACTIONS,attractionsData);    dataMap.getDataMap().putLong(Constants.EXTRA_TIMESTAMP,new Date().getTime());    PutDataRequest request=dataMap.asPutDataRequest();    DataApi.DataItemResult result=Wearable.DataApi.putDataItem(googleApiClient,request).await();    if (!result.getStatus().isSuccess()) {      Log.e(TAG,String.format("Error sending data using DataApi (error code = %d)",result.getStatus().getStatusCode()));    }  } else {    Log.e(TAG,String.format(Constants.GOOGLE_API_CLIENT_ERROR_MSG,connectionResult.getErrorCode()));  }  googleApiClient.disconnect();}  }
class C{  public void drawLine(SynthContext context,Object paintKey,Graphics g,int x1,int y1,int x2,int y2){  g.drawLine(x1,y1,x2,y2);}  }
class C{  public ByteCodePattern add(PatternElement element){  if (first != null) {    addInterElementWild();  }  addElement(element);  return this;}  }
class C{  public static void applyContinuousQueryEvents(PlatformContext ctx,long lsnrPtr,Iterable<CacheEntryEvent> evts) throws CacheEntryListenerException {  assert lsnrPtr != 0;  assert evts != null;  try (PlatformMemory mem=ctx.memory().allocate()){    PlatformOutputStream out=mem.output();    BinaryRawWriterEx writer=ctx.writer(out);    int cntPos=writer.reserveInt();    int cnt=0;    for (    CacheEntryEvent evt : evts) {      writeCacheEntryEvent(writer,evt);      cnt++;    }    writer.writeInt(cntPos,cnt);    out.synchronize();    ctx.gateway().continuousQueryListenerApply(lsnrPtr,mem.pointer());  } catch (  Exception e) {    throw toCacheEntryListenerException(e);  }}  }
class C{  public static Bitmap imageWithTextNoLayout(Context context,Bitmap bitmap,GenerateParams params){  Paint paint=new Paint();  paint.setColor(params.color);  paint.setTextAlign(Paint.Align.CENTER);  paint.setTextSize(applyDimension(COMPLEX_UNIT_SP,20,context.getResources().getDisplayMetrics()));  paint.setTypeface(Typeface.DEFAULT_BOLD);  Canvas canvas=new Canvas(bitmap);  canvas.drawColor(params.background);  canvas.drawText(params.text,canvas.getWidth() / 2,canvas.getHeight() / 2,paint);  return bitmap;}  }
class C{  public static boolean isOdd(MyInteger myInteger){  return myInteger.isOdd();}  }
class C{  public void doGroovyCast(ClassNode targetType){  doConvertAndCast(targetType,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:15.315 -0500",hash_original_method="050BE5B4C52573633224C87BCCA985D9",hash_generated_method="73748087A8CC92E9D7D425E1F5AB01E7") private void enqueue(Node<E> node){}  }
class C{  public StudentT(double freedom,MersenneTwisterFast randomGenerator){  setRandomGenerator(randomGenerator);  setState(freedom);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  static <T>T checkNotNull(T reference,String errorMessage,Object... args){  if (reference == null) {    throw new NullPointerException(String.format(errorMessage,args));  }  return reference;}  }
class C{  public void close() throws SQLException {  if (result != null) {    result.close();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.297 -0500",hash_original_method="ADB5E41EE7B502A26DF78C97B20911AD",hash_generated_method="FC4F6549A1A31E55CFA635B884C805D6") public static boolean isLowerCase(int codePoint){  if ('a' <= codePoint && codePoint <= 'z') {    return true;  }  if (codePoint < 128) {    return false;  }  return isLowerCaseImpl(codePoint);}  }
class C{  public boolean childBlockProcessed(@NotNull Block child,@NotNull AbstractBlockWrapper wrappedChild){  myWrappedChildren.add(wrappedChild);  previousBlock=child;  int subBlocksNumber=parentBlock.getSubBlocks().size();  if (myWrappedChildren.size() > subBlocksNumber) {    return true;  } else   if (myWrappedChildren.size() == subBlocksNumber) {    setDefaultIndents(myWrappedChildren);    wrappedBlock.setChildren(myWrappedChildren);    return true;  }  return false;}  }
class C{  public NodeVersion(final int majorVersion,final int minorVersion,final int buildVersion){  this(majorVersion,minorVersion,buildVersion,null);}  }
class C{  public void resetTransformations(){  mMatrix.set(mOriginalMatrix);  invalidate();}  }
class C{  public Node importNode(Node importedNode,boolean deep) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  private void writeFlowMod(IOFSwitch sw,OFFlowModCommand command,OFBufferId bufferId,Match match,OFPort outPort){  OFFlowMod.Builder fmb;  if (command == OFFlowModCommand.DELETE) {    fmb=sw.getOFFactory().buildFlowDelete();  } else {    fmb=sw.getOFFactory().buildFlowAdd();  }  fmb.setMatch(match);  fmb.setCookie((U64.of(LearningSwitch.LEARNING_SWITCH_COOKIE)));  fmb.setIdleTimeout(LearningSwitch.FLOWMOD_DEFAULT_IDLE_TIMEOUT);  fmb.setHardTimeout(LearningSwitch.FLOWMOD_DEFAULT_HARD_TIMEOUT);  fmb.setPriority(LearningSwitch.FLOWMOD_PRIORITY);  fmb.setBufferId(bufferId);  fmb.setOutPort((command == OFFlowModCommand.DELETE) ? OFPort.ANY : outPort);  Set<OFFlowModFlags> sfmf=new HashSet<OFFlowModFlags>();  if (command != OFFlowModCommand.DELETE) {    sfmf.add(OFFlowModFlags.SEND_FLOW_REM);  }  fmb.setFlags(sfmf);  List<OFAction> al=new ArrayList<OFAction>();  al.add(sw.getOFFactory().actions().buildOutput().setPort(outPort).setMaxLen(0xffFFffFF).build());  fmb.setActions(al);  if (log.isTraceEnabled()) {    log.trace("{} {} flow mod {}",new Object[]{sw,(command == OFFlowModCommand.DELETE) ? "deleting" : "adding",fmb.build()});  }  counterFlowMod.increment();  sw.write(fmb.build());}  }
class C{  public static void hist(double[] data,int fmax){  double[] hist=new double[data.length];  double hmax=0;  for (int i=0; i < data.length; i++) {    hmax=Math.max(data[i],hmax);  }  double shrink=fmax / hmax;  for (int i=0; i < data.length; i++) {    hist[i]=shrink * data[i];  }  NumberFormat nf=new DecimalFormat("00");  String scale="";  for (int i=1; i < fmax / 10 + 1; i++) {    scale+="    .    " + i % 10;  }  System.out.println("x" + nf.format(hmax / fmax) + "\t0"+ scale);  for (int i=0; i < hist.length; i++) {    System.out.print(i + "\t|");    for (int j=0; j < Math.round(hist[i]); j++) {      if ((j + 1) % 10 == 0)       System.out.print("]"); else       System.out.print("|");    }    System.out.println();  }}  }
class C{  public boolean equals(Object obj){  if (obj instanceof VMID) {    VMID vmid=(VMID)obj;    if (!uid.equals(vmid.uid))     return false;    if ((addr == null) ^ (vmid.addr == null))     return false;    if (addr != null) {      if (addr.length != vmid.addr.length)       return false;      for (int i=0; i < addr.length; ++i)       if (addr[i] != vmid.addr[i])       return false;    }    return true;  } else {    return false;  }}  }
class C{  protected boolean doDamage(final RPEntity entity){  final int hp=entity.getHP();  if (hp == 0) {    return false;  }  if (entity.isGhost()) {    return true;  }  int damage=(int)(hp * damageRatio);  damage=Math.max(damage,minimumDamage);  damage=Math.min(damage,hp);  if (damage != 0) {    entity.onDamaged(this,damage);  }  return true;}  }
class C{  protected void addAnnotationsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_AnnotatableElement_annotations_feature"),getString("_UI_PropertyDescriptor_description","_UI_AnnotatableElement_annotations_feature","_UI_AnnotatableElement_type"),TypesPackage.Literals.ANNOTATABLE_ELEMENT__ANNOTATIONS,true,false,true,null,null,null));}  }
class C{  public void addSeries(final String title,final double[] values){  int cnt=1;  for (  double value : values) {    String category=(cnt > this.categories.length ? Integer.toString(cnt) : this.categories[cnt - 1]);    this.dataset.addValue(value,title,category);    cnt++;  }}  }
class C{  Socket newSocket() throws RemoteException {  if (TCPTransport.tcpLog.isLoggable(Log.VERBOSE)) {    TCPTransport.tcpLog.log(Log.VERBOSE,"opening socket to " + this);  }  Socket socket;  try {    RMIClientSocketFactory clientFactory=csf;    if (clientFactory == null) {      clientFactory=chooseFactory();    }    socket=clientFactory.createSocket(host,port);  } catch (  java.net.UnknownHostException e) {    throw new java.rmi.UnknownHostException("Unknown host: " + host,e);  }catch (  java.net.ConnectException e) {    throw new java.rmi.ConnectException("Connection refused to host: " + host,e);  }catch (  IOException e) {    try {      TCPEndpoint.shedConnectionCaches();    } catch (    OutOfMemoryError|Exception mem) {    }    throw new ConnectIOException("Exception creating connection to: " + host,e);  }  try {    socket.setTcpNoDelay(true);  } catch (  Exception e) {  }  try {    socket.setKeepAlive(true);  } catch (  Exception e) {  }  return socket;}  }
class C{  public RequestParams(Map<String,String> source){  init();  if (source != null) {    for (    Map.Entry<String,String> entry : source.entrySet()) {      put(entry.getKey(),entry.getValue());    }  }}  }
class C{  public static String loadStateFullPatterns(String dirName,String fileName,ConfigData configData){  String filePath=dirName + fileName;  _stateFullFileName=fileName;  _stateFullFilePath=filePath;  _stateFullLastModified=0;  _stateFullPatterns=DEFAULT_STATE_FULL_PATTERNS;  PatternsInfo patternsInfo=loadPatterns(filePath,"state-full");  if (patternsInfo.patterns != null) {    _stateFullPatterns=patternsInfo.patterns;    _stateFullVersion=patternsInfo.version;    _stateFullLastModified=new File(filePath).lastModified();  }  configData.setStateFullPatterns(_stateFullPatterns);  return patternsInfo.html.toString();}  }
class C{  public FormalParameter createFormalParameter(){  FormalParameterImpl formalParameter=new FormalParameterImpl();  return formalParameter;}  }
class C{  public DuplicateItemException(String message){  super(message);}  }
class C{  public int typeInfoArray(int pos,int offset,int num,boolean isLocals){  for (int k=0; k < num; k++)   pos=typeInfoArray2(k,pos);  return pos;}  }
class C{  public RasterPlotGui(final GenericFrame frame,final RasterPlotComponent component){  super(frame,component);  actionManager=new PlotActionManager(this);  rasterPanel=new RasterPlotPanel(component.getModel());  createAttachMenuBar();  this.setLayout(new BorderLayout());  add("Center",rasterPanel);}  }
class C{  @Override public boolean implies(Permission permission){  if (!(permission instanceof ServicePermission))   return (false);  ServicePermission sp=(ServicePermission)permission;  ServicePermission x;  int desired=sp.getMask();  int effective=0;  if (all_allowed) {    x=(ServicePermission)permissions.get("*");    if (x != null) {      effective|=x.getMask();      if ((effective & desired) == desired)       return (true);    }  }  String name=sp.getName();  x=(ServicePermission)permissions.get(name);  if (x != null) {    effective|=x.getMask();    if ((effective & desired) == desired)     return (true);  }  int last, offset;  offset=name.length() - 1;  while ((last=name.lastIndexOf(".",offset)) != -1) {    name=name.substring(0,last + 1) + "*";    x=(ServicePermission)permissions.get(name);    if (x != null) {      effective|=x.getMask();      if ((effective & desired) == desired)       return (true);    }    offset=last - 1;  }  return (false);}  }
class C{  public byte[] engineCanonicalizeSubTree(Node rootNode,String inclusiveNamespaces) throws CanonicalizationException {  throw new CanonicalizationException("c14n.Canonicalizer.UnsupportedOperation");}  }
class C{  @Override protected void afterExecute(Runnable r,Throwable t){  if (isAppendTaskName()) {    NamedThreadPoolHelper.resetNameAfterExecute(r,t);  }  super.afterExecute(r,t);}  }
class C{  public String toString(){  if (schema != null) {    return schema + "." + name;  }  return name;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public int nextOffset(float wrappingWidth,int offsetLimit,boolean requireNextWord){  int nextOffset=pos;  if (pos < limit) {    if (offsetLimit <= pos) {      throw new IllegalArgumentException("offsetLimit must be after current position");    }    int charAtMaxAdvance=measurer.getLineBreakIndex(pos,wrappingWidth);    if (charAtMaxAdvance == limit) {      nextOffset=limit;    } else     if (Character.isWhitespace(measurer.getChars()[charAtMaxAdvance - start])) {      nextOffset=breakIter.following(charAtMaxAdvance);    } else {      int testPos=charAtMaxAdvance + 1;      if (testPos == limit) {        breakIter.last();        nextOffset=breakIter.previous();      } else {        nextOffset=breakIter.preceding(testPos);      }      if (nextOffset <= pos) {        if (requireNextWord) {          nextOffset=pos;        } else {          nextOffset=Math.max(pos + 1,charAtMaxAdvance);        }      }    }  }  if (nextOffset > offsetLimit) {    nextOffset=offsetLimit;  }  return nextOffset;}  }
class C{  public double computeAverageLocalOfObservations(){  double mi=0.0;  for (int b=0; b < totalObservations; b++) {    double prob1=mvkeSource.getProbability(sourceObservations[b],b);    double prob2=mvkeDest.getProbability(destObservations[b],b);    double probJoint=mvkeJoint.getProbability(sourceObservations[b],destObservations[b],b);    double logTerm=0.0;    double cont=0.0;    if (probJoint > 0.0) {      logTerm=probJoint / (prob1 * prob2);      cont=Math.log(logTerm);    }    mi+=cont;    if (debug) {      System.out.printf("%d: (%.5f, %.5f, %.5f) %.5f -> %.5f -> %.5f\n",b,prob1,prob2,probJoint,logTerm,cont,mi);    }  }  lastAverage=mi / (double)totalObservations / Math.log(2.0);  miComputed=true;  return lastAverage;}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"or");  if (instruction.getOperands().size() != 2) {    throw new InternalTranslationException("Error: Argument instruction is not a or instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final IOperandTree targetOperand=operands.get(0);  final IOperandTree sourceOperand=operands.get(1);  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,sourceOperand,true);  instructions.addAll(sourceResult.getInstructions());  offset=baseOffset + instructions.size();  final TranslationResult targetResult=Helpers.translateOperand(environment,offset,targetOperand,true);  instructions.addAll(targetResult.getInstructions());  offset=baseOffset + instructions.size();  final OperandSize size=targetResult.getSize();  final String sourceRegister=sourceResult.getRegister();  final String targetRegister=targetResult.getRegister();  final String orResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createOr(offset,size,sourceRegister,size,targetRegister,size,orResult));  Helpers.generateBinaryOperationFlags(environment,offset + 1,orResult,size,instructions);  offset=baseOffset + instructions.size();  Helpers.writeBack(environment,offset,targetOperand,orResult,size,targetResult.getAddress(),targetResult.getType(),instructions);}  }
class C{  public static String cronExpression(String periodExpression,String phaseExpression){  return cronExpression(inSeconds(periodExpression),inSeconds(phaseExpression));}  }
class C{  public final static float lonDistance(float lon1,float lon2){  return (float)Math.min(Math.abs(lon1 - lon2),((lon1 < 0) ? lon1 + Math.PI : Math.PI - lon1) + ((lon2 < 0) ? lon2 + Math.PI : Math.PI - lon2));}  }
class C{  public void serializeFormDef(FormDef fd,String filepath){  String hash=FileUtils.getMd5Hash(new File(filepath));  File formDef=new File(Collect.CACHE_PATH + File.separator + hash+ ".formdef");  if (!formDef.exists()) {    FileOutputStream fos;    try {      fos=new FileOutputStream(formDef);      DataOutputStream dos=new DataOutputStream(fos);      fd.writeExternal(dos);      dos.flush();      dos.close();    } catch (    FileNotFoundException e) {      e.printStackTrace();    }catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  private int updateSelectedKeys(int entries) throws IOException {  int numKeysUpdated=0;  boolean interrupted=false;  updateCount++;  for (int i=0; i < entries; i++) {    int nextFD=kqueueWrapper.getDescriptor(i);    if (nextFD == fd0) {      interrupted=true;    } else {      MapEntry me=fdMap.get(Integer.valueOf(nextFD));      if (me != null) {        int rOps=kqueueWrapper.getReventOps(i);        SelectionKeyImpl ski=me.ski;        if (selectedKeys.contains(ski)) {          if (me.updateCount != updateCount) {            if (ski.channel.translateAndSetReadyOps(rOps,ski)) {              numKeysUpdated++;              me.updateCount=updateCount;            }          } else {            ski.channel.translateAndUpdateReadyOps(rOps,ski);          }        } else {          ski.channel.translateAndSetReadyOps(rOps,ski);          if ((ski.nioReadyOps() & ski.nioInterestOps()) != 0) {            selectedKeys.add(ski);            numKeysUpdated++;            me.updateCount=updateCount;          }        }      }    }  }  if (interrupted) {synchronized (interruptLock) {      IOUtil.drain(fd0);      interruptTriggered=false;    }  }  return numKeysUpdated;}  }
class C{  protected Drawing createDrawing(){  Drawing drawing=new ODGDrawing();  LinkedList<InputFormat> inputFormats=new LinkedList<InputFormat>();  inputFormats.add(new ODGInputFormat());  inputFormats.add(new ImageInputFormat(new SVGImageFigure()));  inputFormats.add(new TextInputFormat(new SVGTextFigure()));  drawing.setInputFormats(inputFormats);  LinkedList<OutputFormat> outputFormats=new LinkedList<OutputFormat>();  outputFormats.add(new SVGOutputFormat());  outputFormats.add(new SVGZOutputFormat());  outputFormats.add(new ImageOutputFormat());  outputFormats.add(new ImageOutputFormat("JPG","Joint Photographics Experts Group (JPEG)","jpg",BufferedImage.TYPE_INT_RGB));  outputFormats.add(new ImageOutputFormat("BMP","Windows Bitmap (BMP)","bmp",BufferedImage.TYPE_BYTE_INDEXED));  outputFormats.add(new ImageMapOutputFormat());  drawing.setOutputFormats(outputFormats);  return drawing;}  }
class C{  @Override public void onAnimationUpdate(ValueAnimator animation){  float fraction=animation.getAnimatedFraction();  PropertyBundle propertyBundle=mAnimatorMap.get(animation);  int propertyMask=propertyBundle.mPropertyMask;  if ((propertyMask & TRANSFORM_MASK) != 0) {    View v=mView.get();    if (v != null) {      v.invalidate();    }  }  ArrayList<NameValuesHolder> valueList=propertyBundle.mNameValuesHolder;  if (valueList != null) {    int count=valueList.size();    for (int i=0; i < count; ++i) {      NameValuesHolder values=valueList.get(i);      float value=values.mFromValue + fraction * values.mDeltaValue;      setValue(values.mNameConstant,value);    }  }  View v=mView.get();  if (v != null) {    v.invalidate();  }}  }
class C{  protected String formattedValue(int value){  if (renderValueOnTop) {    return ("" + value);  }  if (renderPercentageOnTop) {    return (value + "%");  }  return ("");}  }
class C{  public DrawerBuilder withSliderBackgroundColorRes(@ColorRes int sliderBackgroundColorRes){  this.mSliderBackgroundColorRes=sliderBackgroundColorRes;  return this;}  }
class C{  public static void clearLastNetworkState(Object object){  ConnectionBuddy.getInstance().getConfiguration().getInMemoryCache().remove(object.toString());}  }
class C{  private String validateBody(ValidationData original,ValidationData item,Variables variables,BaseResponse reqResponse,String uniqueName){  String actualValue=reqResponse.getValue(item.getKey());  LOG.debug("Body compare actual value: " + actualValue);  boolean result=evaluateResult(actualValue,item.getValue(),item.getCondition(),variables);  if (result) {    return TankConstants.HTTP_CASE_PASS;  }  String msg="Failed body validation: body value = " + actualValue;  LOG.error(LogUtil.getLogMessage(item.toString() + " " + msg,LogEventType.Validation,LoggingProfile.USER_VARIABLE));  tsc.addError(new ErrorContainer("BODY",original,item,msg));  return TankConstants.HTTP_CASE_FAIL;}  }
class C{  Object toType(String value,String pattern,Locale locale){  Calendar calendar=toCalendar(value,pattern,locale);  return toType(calendar);}  }
class C{  public static boolean isValidID(int id,Account[] a){  for (int i=0; i < a.length; i++) {    if (id == a[i].getId())     return true;  }  return false;}  }
class C{  public static void normalize(double[] doubles){  double sum=0;  for (int i=0; i < doubles.length; i++) {    sum+=doubles[i];  }  normalize(doubles,sum);}  }
class C{  public boolean isCloseEnough(){  final User user=User.get();  if ((user != null) && (parent != null)) {    RPObject root=parent.getRPObject().getBaseContainer();    final String type=root.getRPClass().getName();    if (type.equals("player") && root.has("name")) {      if (StendhalClient.get().getCharacter().equalsIgnoreCase(root.get("name"))) {        return true;      }    }    return isCloseEnough(user.getX(),user.getY());  }  return true;}  }
class C{  public static int extractLowSignedNibble(int value){  return (value << 28) >> 28;}  }
class C{  public Base64OutputStreamWriter(int size,Writer writer){  if (size < 0) {    throw new IllegalArgumentException("Negative initial size: " + size);  }  buf=new byte[size];  chars=new char[size];  totalCharsWritten=0;  this.writer=writer;}  }
class C{  public int findLastCompletelyVisibleItemPosition(){  final View child=findOneVisibleChild(layoutManager.getChildCount() - 1,-1,true,false);  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  public boolean isEmpty(){  return extOrdering.isEmpty();}  }
class C{  public void exitApp(){  this.webView.postMessage("exit",null);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.io.File f=getFile(stack);  if (f != null)   Seeker.getInstance().removeArchiveDirectory(f,Seeker.PICTURE_DIR_MASK);  return null;}  }
class C{  public TClassifier basicGetAutoboxedType(){  return autoboxedType;}  }
class C{  public Object pop(){  return stack.pop();}  }
class C{  private Object writeReplace(){  return new Ser(Ser.THAIBUDDHIST_DATE_TYPE,this);}  }
class C{  public boolean isToolsInstallerMounted(){  return toolsInstallerMounted;}  }
class C{  public <T>void publisher(Class<T> api,Result<T> result){  String path=api.getName();  String address=address(path);  ServicesAmp manager=ServicesAmp.current();  ServiceRefAmp pubRef=manager.service(address);  result.ok(pubRef.as(api));}  }
class C{  long nextConnectionSequence(){  return _connectionSequence.incrementAndGet();}  }
class C{  private static void test0(ByteArrayOutputStream bo,String expected) throws Exception {  PrintStream oldout=System.out;  boolean failed=false;  System.setOut(new PrintStream(bo));  try {    Context.fromUserPass(OneKDC.USER,OneKDC.PASS,false);  } catch (  Exception e) {    failed=true;  } finally {    System.setOut(oldout);  }  String[] lines=new String(bo.toByteArray()).split("\n");  StringBuilder sb=new StringBuilder();  for (  String line : lines) {    Matcher m=re.matcher(line);    if (m.find()) {      System.out.println(line);      sb.append(m.group(1)).append(toSymbolicSec(Integer.parseInt(m.group(2))));    }  }  if (failed)   sb.append('-');  String output=sb.toString();  System.out.println("Expected: " + expected + ", actual "+ output);  if (!output.matches(expected)) {    throw new Exception("Does not match");  }}  }
class C{  public POSBaseLineFeatureExtractor(String viewName,String json){  this.viewName=viewName;  this.counter=POSBaseLineCounter.read(json);}  }
class C{  void calculateNextFrame(){  if (mPrevFrameWhenNsec == 0) {    mPrevFrameWhenNsec=System.nanoTime();    mRecentTimeDeltaNext=-1;    return;  }  long nowNsec=System.nanoTime();  double curDeltaSec=(nowNsec - mPrevFrameWhenNsec) / NANOS_PER_SECOND;  if (curDeltaSec > MAX_FRAME_DELTA_SEC) {    Log.d(TAG,"delta time was " + curDeltaSec + ", capping at "+ MAX_FRAME_DELTA_SEC);    curDeltaSec=MAX_FRAME_DELTA_SEC;  }  double deltaSec;  if (FRAME_RATE_SMOOTHING) {    if (mRecentTimeDeltaNext < 0) {      for (int i=0; i < RECENT_TIME_DELTA_COUNT; i++) {        mRecentTimeDelta[i]=curDeltaSec;      }      mRecentTimeDeltaNext=0;    }    mRecentTimeDelta[mRecentTimeDeltaNext]=curDeltaSec;    mRecentTimeDeltaNext=(mRecentTimeDeltaNext + 1) % RECENT_TIME_DELTA_COUNT;    deltaSec=0.0f;    for (int i=0; i < RECENT_TIME_DELTA_COUNT; i++) {      deltaSec+=mRecentTimeDelta[i];    }    deltaSec/=RECENT_TIME_DELTA_COUNT;  } else {    deltaSec=curDeltaSec;  }  boolean advanceFrame=true;  if (mPauseDuration > 0.0f) {    advanceFrame=false;    if (mPauseDuration > deltaSec) {      mPauseDuration-=deltaSec;      if (mGamePlayState == GAME_PLAYING) {        float[] colors=mPaddle.getColor();        if (colors[0] == 0.0f) {          mPaddle.setColor(1.0f,0.0f,1.0f);        } else         if (colors[1] == 0.0f) {          mPaddle.setColor(1.0f,1.0f,0.0f);        } else {          mPaddle.setColor(0.0f,1.0f,1.0f);        }      }    } else {      mPauseDuration=0.0f;      mPaddle.setColor(1.0f,1.0f,1.0f);    }  }switch (mGamePlayState) {case GAME_INITIALIZING:    mGamePlayState=GAME_READY;  break;case GAME_READY:mGameStatusMessageNum=TextResources.READY;if (advanceFrame) {mGamePlayState=GAME_PLAYING;mGameStatusMessageNum=TextResources.NO_MESSAGE;setPauseTime(0.5f);advanceFrame=false;}break;case GAME_WON:mGameStatusMessageNum=TextResources.WINNER;mIsAnimating=false;advanceFrame=false;break;case GAME_LOST:mGameStatusMessageNum=TextResources.GAME_OVER;mIsAnimating=false;advanceFrame=false;break;case GAME_PLAYING:break;default :Log.e(TAG,"GLITCH: bad state " + mGamePlayState);break;}if (advanceFrame) {int event=moveBall(deltaSec);switch (event) {case EVENT_LAST_BRICK:mGamePlayState=GAME_WON;SoundResources.play(SoundResources.PADDLE_HIT);SoundResources.play(SoundResources.WALL_HIT);SoundResources.play(SoundResources.BALL_LOST);break;case EVENT_BALL_LOST:if (--mLivesRemaining == 0) {mGamePlayState=GAME_LOST;} else {mGamePlayState=GAME_READY;mGameStatusMessageNum=TextResources.READY;setPauseTime(1.5f);resetBall();}break;case EVENT_NONE:break;default :throw new RuntimeException("bad game event: " + event);}}mPrevFrameWhenNsec=nowNsec;}  }
class C{  public COutdegreeCriteriumPanel(final COutdegreeCriterium criterium){  super(new BorderLayout());  m_operatorBox=new CRelationBox(criterium);  m_inputField=new CTextInputField(criterium,new CDecFormatter(8));  initPanel();}  }
class C{  private static int ceilingPowerOf2(int n){  if (n <= 1) {    return 1;  }  int topPwrOf2=1 << 30;  return (n >= topPwrOf2) ? topPwrOf2 : Integer.highestOneBit((n - 1) << 1);}  }
class C{  public MilStd2525PointGraphicRetriever(String retrieverPath){  super(retrieverPath);}  }
class C{  private void showPopup(MouseEvent event){  if (event.isPopupTrigger()) {    this.copyMenu.show(this.txtStackTrace,event.getX(),event.getY());  }}  }
class C{  public boolean checkForValidSpaceStations(int playerId){  Iterator<Entity> iter=getPlayerEntities(getPlayer(playerId),false).iterator();  while (iter.hasNext()) {    Entity entity=iter.next();    if ((entity instanceof SpaceStation) && getTurn().isValidEntity(entity,this)) {      return true;    }  }  return false;}  }
class C{  public StructuredSyntaxHandler(StructuredSyntaxDocumentFilter filter){  this.filter=filter;}  }
class C{  public Class asSubclass(Class superclass){  return null;}  }
class C{  public List<Page> relevantPages(String query){  List<Page> relevantPages=new ArrayList<Page>();  for (  Page p : pTable.values()) {    if (matches(query,p.getContent())) {      relevantPages.add(p);    }  }  return relevantPages;}  }
class C{  public TSetter basicGetDefinedSetter(){  return definedSetter;}  }
class C{  public void addDload(int n){  if (n < 4)   addOpcode(38 + n); else   if (n < 0x100) {    addOpcode(DLOAD);    add(n);  } else {    addOpcode(WIDE);    addOpcode(DLOAD);    addIndex(n);  }}  }
class C{  public synchronized ArrayList<V> removeAll(@Nullable Predicate<K> predicate){  ArrayList<V> oldValues=new ArrayList<>();  Iterator<LinkedHashMap.Entry<K,V>> iterator=mMap.entrySet().iterator();  while (iterator.hasNext()) {    LinkedHashMap.Entry<K,V> entry=iterator.next();    if (predicate == null || predicate.apply(entry.getKey())) {      oldValues.add(entry.getValue());      mSizeInBytes-=getValueSizeInBytes(entry.getValue());      iterator.remove();    }  }  return oldValues;}  }
class C{  public final int size(){  return m_Size;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  final Rectangle2D shape=new Rectangle2D.Double();  shape.setRect(88,77,112 - 88 + 1,94 - 77 + 1);  final Area arena=new Area(zone,shape);  final AdosDeathmatch deathmatch=new AdosDeathmatch(zone,arena);  deathmatch.createHelmet(102,75);  deathmatch.createNPC("Thanatos",98,77);}  }
class C{  protected static int removeWhiteSpace(char[] data){  if (data == null)   return 0;  int newSize=0;  int len=data.length;  for (int i=0; i < len; i++) {    if (!isWhiteSpace(data[i]))     data[newSize++]=data[i];  }  return newSize;}  }
class C{  public TermsQueryBuilder(String name,long... values){  this.name=name;  this.values=values;}  }
class C{  HeapKey(int number,T type){  this.number=number;  this.type=type;}  }
class C{  public int selectPivotIndex(Comparable<?>[] ar,int left,int right){  return (int)left + (int)((right - left + 1) * Math.random());}  }
class C{  public String exportRessourceFromJar(String filename) throws IOException {  InputStream inputStream=getClass().getClassLoader().getResourceAsStream(filename);  File outputFile=File.createTempFile(filename,"");  outputFile.deleteOnExit();  Files.copy(inputStream,outputFile.toPath(),java.nio.file.StandardCopyOption.REPLACE_EXISTING);  return outputFile.getAbsolutePath();}  }
class C{  public static void main(String[] args) throws IOException, GeneralSecurityException {  if (args.length != 2) {    System.err.println("Usage:");    System.err.printf("\tjava %s \"command\" \"text to analyze\"\n",Analyze.class.getCanonicalName());    System.exit(1);  }  String command=args[0];  String text=args[1];  Analyze app=new Analyze(getLanguageService());  if (command.equals("entities")) {    printEntities(System.out,app.analyzeEntities(text));  } else   if (command.equals("sentiment")) {    printSentiment(System.out,app.analyzeSentiment(text));  } else   if (command.equals("syntax")) {    printSyntax(System.out,app.analyzeSyntax(text));  }}  }
class C{  public FileConverter(final Object defaultValue){  super(defaultValue);}  }
class C{  public static int round(final float value){  final int bits=Float.floatToRawIntBits(value);  final int biasedExp=bits >> 23 & 0xFF;  final int shift=23 - 1 + MAX_FLOAT_EXPONENT - biasedExp;  if ((shift & -32) == 0) {    int extendedMantissa=0x00800000 | bits & 0x007FFFFF;    if (bits < 0) {      extendedMantissa=-extendedMantissa;    }    return (extendedMantissa >> shift) + 1 >> 1;  } else {    return (int)value;  }}  }
class C{  private int handleAggregationPacket(Buffer input,Buffer output){  byte[] bufferData=(byte[])input.getData();  if (aggregationPositon + 1 >= bufferData.length) {    aggregationPositon=1;    output.setDiscard(true);    return BUFFER_PROCESSED_OK;  }  int nalu_size=(((bufferData[aggregationPositon] & 0xff) << 8) | (bufferData[aggregationPositon + 1] & 0xff));  aggregationPositon+=2;  if (aggregationPositon + nalu_size > bufferData.length) {    aggregationPositon=1;    return BUFFER_PROCESSED_FAILED;  }  extractNalUnitHeader(aggregationPositon,input);  if (mNalUnitHeader.isSingleNalUnitPacket()) {    byte[] data=new byte[nalu_size];    System.arraycopy(bufferData,aggregationPositon,data,0,nalu_size);    aggregationPositon+=nalu_size;    output.setData(data);    output.setLength(data.length);    output.setOffset(0);    output.setTimeStamp(input.getTimeStamp());    output.setSequenceNumber(input.getSequenceNumber());    output.setVideoOrientation(input.getVideoOrientation());    output.setFormat(input.getFormat());    output.setFlags(input.getFlags());    return INPUT_BUFFER_NOT_CONSUMED;  } else {    aggregationPositon=1;    return BUFFER_PROCESSED_FAILED;  }}  }
class C{  public boolean isDomainZoomable(){  return this.domainZoomable;}  }
class C{  public boolean containsValue(Object value){  if (value == null)   throw new NullPointerException();  final Segment<K,V>[] segments=this.segments;  long previousSum=0L;  int lockCount=0;  try {    for (int retries=-1; ; retries++) {      long sum=0L;      for (int j=0; j < segments.length; j++) {        Segment<K,V> segment;        if (retries == RETRIES_BEFORE_LOCK) {          segment=ensureSegment(j);          segment.lock();          lockCount++;        } else {          segment=segmentAt(segments,j);          if (segment == null)           continue;        }        HashEntry<K,V>[] tab=segment.table;        if (tab != null) {          for (int i=0; i < tab.length; i++) {            HashEntry<K,V> e;            for (e=entryAt(tab,i); e != null; e=e.next) {              V v=e.value;              if (v != null && value.equals(v))               return true;            }          }          sum+=segment.modCount;        }      }      if ((retries >= 0 && sum == previousSum) || lockCount > 0)       return false;      previousSum=sum;    }  }  finally {    for (int j=0; j < lockCount; j++)     segments[j].unlock();  }}  }
class C{  public SurfaceMultiPolygon(){}  }
class C{  public OldIndicationEventHandler(MessageEventHandler indicationListener){  super((char)0x0110,indicationListener);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("C_Order_ID"))     p_C_Order_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_DocType_ID"))     p_C_DocType_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("DateDoc"))     p_DateDoc=(Timestamp)para[i].getParameter(); else     if (name.equals("IsCloseDocument"))     p_IsCloseDocument="Y".equals(para[i].getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  private boolean isMachineRunning(Machine machine){  return machine != null && machine.getStatus() == RUNNING;}  }
class C{  @Override public int eventToSquare(MotionEvent evt){  int sq=super.eventToSquare(evt);  if (sq != -1)   return sq;  int xCrd=(int)(evt.getX());  int yCrd=(int)(evt.getY());  if (sqSize > 0) {    int x=getXSq(xCrd);    int y=getYSq(yCrd);    if (landScape && (x >= 0) && (x < 10)&& (y >= 0)&& (y < 8) || !landScape && (x >= 0) && (x < 8)&& (y >= -2)&& (y < 0)) {      int p=extraPieces(x,y);      sq=-p - 2;    }  }  return sq;}  }
class C{  public static String escapeStringLiteral(String s){  boolean clean=true;  for (int i=0; i < s.length(); i++) {    final char c=s.charAt(i);    if (c < 32 || c > 127 || c == 34 || c == 39 || c == 92) {      clean=false;    }  }  if (clean) {    return s;  }  StringBuilder text=new StringBuilder(s);  for (int i=0; i < text.length(); i++) {    final char c=text.charAt(i);switch (c) {case 8:      text.replace(i,i + 1,"\\b");    i++;  break;case 9:text.replace(i,i + 1,"\\t");i++;break;case 10:text.replace(i,i + 1,"\\n");i++;break;case 12:text.replace(i,i + 1,"\\f");i++;break;case 13:text.replace(i,i + 1,"\\r");i++;break;case 34:text.replace(i,i + 1,"\\\"");i++;break;case 39:text.replace(i,i + 1,"\\'");i++;break;case 92:text.replace(i,i + 1,"\\\\");i++;break;default :if (c < 32 || c > 127) {final String rep=String.format("\\u%04x",(int)c);text.replace(i,i + 1,rep);i+=rep.length() - 1;}}}return text.toString();}  }
class C{  protected void assertBaseDirectoryContainsSpaces(){  assertFalse("Base directory cannot contain spaces.",new File(System.getProperty("basedir",".")).getAbsoluteFile().toString().contains(" "));}  }
class C{  public void color(boolean color){  this.color=color;}  }
class C{  public GifTextView(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);  init(attrs,defStyle,0);}  }
class C{  public Segment(char[] array,int offset,int count){  this.array=array;  this.offset=offset;  this.count=count;  partialReturn=false;}  }
class C{  public boolean hasAnonymousAuthentication(){  return serverMechanisms.contains("ANONYMOUS");}  }
class C{  private void drawChunk(Image image,Graphics g,boolean stretch,int dx1,int dy1,int dx2,int dy2,int sx1,int sy1,int sx2,int sy2,boolean xDirection){  if (dx2 - dx1 <= 0 || dy2 - dy1 <= 0 || sx2 - sx1 <= 0 || sy2 - sy1 <= 0) {    return;  }  if (stretch) {    g.drawImage(image,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,null);  } else {    int xSize=sx2 - sx1;    int ySize=sy2 - sy1;    int deltaX;    int deltaY;    if (xDirection) {      deltaX=xSize;      deltaY=0;    } else {      deltaX=0;      deltaY=ySize;    }    while (dx1 < dx2 && dy1 < dy2) {      int newDX2=Math.min(dx2,dx1 + xSize);      int newDY2=Math.min(dy2,dy1 + ySize);      g.drawImage(image,dx1,dy1,newDX2,newDY2,sx1,sy1,sx1 + newDX2 - dx1,sy1 + newDY2 - dy1,null);      dx1+=deltaX;      dy1+=deltaY;    }  }}  }
class C{  public void calcTransformVector(vec3 out,vec3 v){  out.m[0]=this.m[0] * v.m[0] + this.m[4] * v.m[1] + this.m[8] * v.m[2];  out.m[1]=this.m[1] * v.m[0] + this.m[5] * v.m[1] + this.m[9] * v.m[2];  out.m[2]=this.m[2] * v.m[0] + this.m[6] * v.m[1] + this.m[10] * v.m[2];}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.errorIndicatorPaint=SerialUtilities.readPaint(stream);  this.errorIndicatorStroke=SerialUtilities.readStroke(stream);}  }
class C{  public boolean isNull(String key){  return JSONObject.NULL.equals(this.opt(key));}  }
class C{  HttpsClient(SSLSocketFactory sf,URL url,String proxyHost,int proxyPort,int connectTimeout) throws IOException {  this(sf,url,(proxyHost == null ? null : HttpClient.newHttpProxy(proxyHost,proxyPort,"https")),connectTimeout);}  }
class C{  public boolean hasExtensions(){  return entry.hasExtensions();}  }
class C{  public void warn(String format,Object arg){  formatAndLog(Log.WARN,format,arg);}  }
class C{  private void addErrorMessage(String errorKey,boolean showContinueButton,boolean showContent){  addErrorMessage(errorKey,showContinueButton);  this.showContent=showContent;}  }
class C{  private boolean needLayout(){  for (int i=0; i < m_nodes.size(); i++) {    WFNode node=m_nodes.get(i);    Rectangle rect=node.getBounds();    if (rect.x == 0 && rect.y == 0) {      return true;    }  }  return false;}  }
class C{  private void extractKeys(Properties props){  String keyspec=props.getProperty(Configuration.EGRESS_HBASE_DATA_AES);  if (null != keyspec) {    byte[] key=this.keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length || 24 == key.length || 32 == key.length,"Key " + Configuration.EGRESS_HBASE_DATA_AES + " MUST be 128, 192 or 256 bits long.");    this.keystore.setKey(KeyStore.AES_HBASE_DATA,key);  }  keyspec=props.getProperty(Configuration.EGRESS_FETCHER_AES);  if (null != keyspec) {    byte[] key=this.keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length || 24 == key.length || 32 == key.length,"Key " + Configuration.EGRESS_FETCHER_AES + " MUST be 128, 192 or 256 bits long.");    this.keystore.setKey(KeyStore.AES_FETCHER,key);  }  keyspec=props.getProperty(Configuration.DIRECTORY_PSK);  if (null != keyspec) {    byte[] key=this.keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length,"Key " + Configuration.DIRECTORY_PSK + " MUST be 128 bits long.");    this.keystore.setKey(KeyStore.SIPHASH_DIRECTORY_PSK,key);  }  this.keystore.forget();}  }
class C{  public void testMovePointRightNeg(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=28;  int shift=-18;  int resScale=46;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.movePointRight(shift);  assertTrue("incorrect scale",bNumber.scale() == resScale);  assertTrue("incorrect value",bNumber.unscaledValue().toString().equals(a));}  }
class C{  public byte[] genBytecode() throws Exception {  ClassWriter cw=new ClassWriter(0);  MethodVisitor mv;  FieldVisitor fv;  final boolean itf=false;  cw.visit(V1_8,ACC_FINAL + ACC_SUPER,arrayImplClassName,arrayInterfaceClassSig,"java/lang/Object",new String[]{arrayInterfaceClassName});{    fv=cw.visitField(ACC_PROTECTED + ACC_FINAL,"elementSize","J",null,null);    fv.visitEnd();  }{    fv=cw.visitField(ACC_PRIVATE + ACC_FINAL,"arraySize","J",null,null);    fv.visitEnd();  }{    fv=cw.visitField(ACC_PROTECTED + ACC_FINAL,"length","J",null,null);    fv.visitEnd();  }{    mv=cw.visitMethod(ACC_PROTECTED,"<init>","(JJ)V",null,null);    mv.visitCode();    mv.visitVarInsn(ALOAD,0);    mv.visitMethodInsn(INVOKESPECIAL,"java/lang/Object","<init>","()V",false);    mv.visitVarInsn(ALOAD,0);    mv.visitVarInsn(LLOAD,1);    mv.visitFieldInsn(PUTFIELD,arrayImplClassName,"length","J");    mv.visitVarInsn(ALOAD,0);    mv.visitVarInsn(LLOAD,3);    mv.visitFieldInsn(PUTFIELD,arrayImplClassName,"elementSize","J");    mv.visitVarInsn(ALOAD,0);    mv.visitVarInsn(LLOAD,1);    mv.visitVarInsn(LLOAD,3);    mv.visitInsn(LMUL);    mv.visitFieldInsn(PUTFIELD,arrayImplClassName,"arraySize","J");    mv.visitInsn(RETURN);    mv.visitMaxs(5,5);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC,"sizeof","()J",null,null);    mv.visitCode();    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,arrayImplClassName,"arraySize","J");    mv.visitInsn(LRETURN);    mv.visitMaxs(2,1);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC,"toString","()Ljava/lang/String;",null,null);    mv.visitCode();    mv.visitTypeInsn(NEW,"java/lang/StringBuffer");    mv.visitInsn(DUP);    mv.visitLdcInsn("[");    mv.visitMethodInsn(INVOKESPECIAL,"java/lang/StringBuffer","<init>","(Ljava/lang/String;)V",false);    mv.visitVarInsn(ASTORE,1);    mv.visitInsn(LCONST_0);    mv.visitVarInsn(LSTORE,2);    Label l0=new Label();    mv.visitJumpInsn(GOTO,l0);    Label l1=new Label();    mv.visitLabel(l1);    mv.visitFrame(Opcodes.F_APPEND,2,new Object[]{"java/lang/StringBuffer",Opcodes.LONG},0,null);    mv.visitVarInsn(ALOAD,1);    mv.visitTypeInsn(NEW,"java/lang/StringBuilder");    mv.visitInsn(DUP);    mv.visitLdcInsn(" ");    mv.visitMethodInsn(INVOKESPECIAL,"java/lang/StringBuilder","<init>","(Ljava/lang/String;)V",false);    mv.visitVarInsn(ALOAD,0);    mv.visitVarInsn(LLOAD,2);    mv.visitMethodInsn(INVOKEVIRTUAL,arrayImplClassName,"at","(J)L" + elementInterfaceClassName + ";",false);    mv.visitMethodInsn(INVOKEINTERFACE,elementInterfaceClassName,"toString","()Ljava/lang/String;",true);    mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/StringBuilder","append","(Ljava/lang/String;)Ljava/lang/StringBuilder;",false);    mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/StringBuilder","toString","()Ljava/lang/String;",false);    mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/StringBuffer","append","(Ljava/lang/String;)Ljava/lang/StringBuffer;",false);    mv.visitInsn(POP);    mv.visitVarInsn(LLOAD,2);    mv.visitInsn(LCONST_1);    mv.visitInsn(LADD);    mv.visitVarInsn(LSTORE,2);    mv.visitLabel(l0);    mv.visitFrame(Opcodes.F_SAME,0,null,0,null);    mv.visitVarInsn(LLOAD,2);    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,arrayImplClassName,"length","J");    mv.visitInsn(LCMP);    mv.visitJumpInsn(IFLT,l1);    mv.visitVarInsn(ALOAD,1);    mv.visitLdcInsn(" ]");    mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/StringBuffer","append","(Ljava/lang/String;)Ljava/lang/StringBuffer;",false);    mv.visitInsn(POP);    mv.visitVarInsn(ALOAD,1);    mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/StringBuffer","toString","()Ljava/lang/String;",false);    mv.visitInsn(ARETURN);    mv.visitMaxs(5,4);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC + ACC_STATIC,"getComponentType","()Ljava/lang/Class;","()Ljava/lang/Class<*>;",null);    mv.visitCode();    mv.visitLdcInsn(Type.getType("L" + elementInterfaceClassName + ";"));    mv.visitInsn(ARETURN);    mv.visitMaxs(1,0);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC + ACC_FINAL,"getLength","()J",null,null);    mv.visitCode();    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,arrayImplClassName,"length","J");    mv.visitInsn(LRETURN);    mv.visitMaxs(2,1);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC,"at","(J)L" + elementInterfaceClassName + ";",null,null);    mv.visitCode();    mv.visitTypeInsn(NEW,elementImplClassName);    mv.visitInsn(DUP);    mv.visitMethodInsn(INVOKESPECIAL,elementImplClassName,"<init>","()V",itf);    mv.visitVarInsn(ASTORE,3);    mv.visitTypeInsn(NEW,"com/ibm/layout/Location");    mv.visitInsn(DUP);    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");    mv.visitVarInsn(LLOAD,1);    mv.visitVarInsn(ALOAD,3);    mv.visitMethodInsn(INVOKEVIRTUAL,elementImplClassName,"sizeof","()J",itf);    mv.visitInsn(LMUL);    mv.visitMethodInsn(INVOKESPECIAL,"com/ibm/layout/Location","<init>","(Lcom/ibm/layout/Location;J)V",itf);    mv.visitVarInsn(ASTORE,4);    mv.visitVarInsn(ALOAD,3);    mv.visitVarInsn(ALOAD,4);    mv.visitMethodInsn(INVOKEVIRTUAL,elementImplClassName,"bindLocation","(Lcom/ibm/layout/Location;)V",itf);    mv.visitVarInsn(ALOAD,3);    mv.visitInsn(ARETURN);    mv.visitMaxs(7,5);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC,"range","(JJ)Lcom/ibm/layout/Array1D;","(JJ)Lcom/ibm/layout/Array1D<" + elementInterfaceClassName + ";>;",null);    mv.visitCode();    mv.visitTypeInsn(NEW,arrayImplClassName);    mv.visitInsn(DUP);    mv.visitVarInsn(LLOAD,3);    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"elementSize","J");    mv.visitMethodInsn(INVOKESPECIAL,this.arrayImplClassName,"<init>","(JJ)V",itf);    mv.visitVarInsn(ASTORE,5);    mv.visitTypeInsn(NEW,"com/ibm/layout/Location");    mv.visitInsn(DUP);    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,arrayImplClassName,"location","Lcom/ibm/layout/Location;");    mv.visitVarInsn(LLOAD,1);    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,arrayImplClassName,"elementSize","J");    mv.visitInsn(LMUL);    mv.visitMethodInsn(INVOKESPECIAL,"com/ibm/layout/Location","<init>","(Lcom/ibm/layout/Location;J)V",itf);    mv.visitVarInsn(ASTORE,6);    mv.visitVarInsn(ALOAD,5);    mv.visitVarInsn(ALOAD,6);    mv.visitMethodInsn(INVOKEVIRTUAL,arrayImplClassName,"bindLocation","(Lcom/ibm/layout/Location;)V",itf);    mv.visitVarInsn(ALOAD,5);    mv.visitInsn(ARETURN);    mv.visitMaxs(7,7);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC,"put","(JL" + elementInterfaceClassName + ";)V",null,null);    mv.visitCode();    mv.visitVarInsn(ALOAD,0);    mv.visitVarInsn(LLOAD,1);    mv.visitMethodInsn(INVOKEVIRTUAL,arrayImplClassName,"at","(J)L" + elementInterfaceClassName + ";",itf);    mv.visitTypeInsn(CHECKCAST,elementImplClassName);    mv.visitVarInsn(ALOAD,3);    mv.visitTypeInsn(CHECKCAST,elementImplClassName);    mv.visitMethodInsn(INVOKEVIRTUAL,elementImplClassName,"copyFrom","(L" + elementImplClassName + ";)V",itf);    mv.visitInsn(RETURN);    mv.visitMaxs(3,4);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC + ACC_BRIDGE + ACC_SYNTHETIC,"at","(J)Lcom/ibm/layout/Layout;",null,null);    mv.visitCode();    mv.visitVarInsn(ALOAD,0);    mv.visitVarInsn(LLOAD,1);    mv.visitMethodInsn(INVOKEVIRTUAL,arrayImplClassName,"at","(J)L" + elementInterfaceClassName + ";",itf);    mv.visitInsn(ARETURN);    mv.visitMaxs(3,3);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC + ACC_BRIDGE + ACC_SYNTHETIC,"put","(JLcom/ibm/layout/Layout;)V",null,null);    mv.visitCode();    mv.visitVarInsn(ALOAD,0);    mv.visitVarInsn(LLOAD,1);    mv.visitVarInsn(ALOAD,3);    mv.visitTypeInsn(CHECKCAST,elementInterfaceClassName);    mv.visitMethodInsn(INVOKEVIRTUAL,arrayImplClassName,"put","(JL" + elementInterfaceClassName + ";)V",itf);    mv.visitInsn(RETURN);    mv.visitMaxs(4,4);    mv.visitEnd();  }  ImplHelper.genLayoutTypeImpl(cw,mv,fv,arrayImplClassName,false);  cw.visitEnd();  return cw.toByteArray();}  }
class C{  public boolean isExact(){  return flags == 0;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.378 -0500",hash_original_method="A1FA2FFB8197AA42C7B119825051565B",hash_generated_method="66B6388BD6DFE024922BB16B89670CD6") private void performTransitions(){  State destState=null;  while (mDestState != null) {    if (mDbg)     Log.d(TAG,"handleMessage: new destination call exit");    destState=mDestState;    mDestState=null;    StateInfo commonStateInfo=setupTempStateStackWithStatesToEnter(destState);    invokeExitMethods(commonStateInfo);    int stateStackEnteringIndex=moveTempStateStackToStateStack();    invokeEnterMethods(stateStackEnteringIndex);    moveDeferredMessageAtFrontOfQueue();  }  if (destState != null) {    if (destState == mQuittingState) {      cleanupAfterQuitting();    } else     if (destState == mHaltingState) {      mSm.halting();    }  }}  }
class C{  public void removeGeolocSharing(String sharingId){  if (sLogger.isActivated()) {    sLogger.debug("Remove a geoloc sharing from the list (size=" + mGeolocSharingCache.size() + ")");  }  mGeolocSharingCache.remove(sharingId);}  }
class C{  private Cluster.GatewaySender initGatewaySender(ObjectName mbeanName) throws InstanceNotFoundException, IntrospectionException, ReflectionException, IOException, AttributeNotFoundException, MBeanException {  Cluster.GatewaySender gatewaySender=new Cluster.GatewaySender();  AttributeList attributeList=this.mbs.getAttributes(mbeanName,PulseConstants.GATEWAYSENDER_MBEAN_ATTRIBUTES);  for (int i=0; i < attributeList.size(); i++) {    Attribute attribute=(Attribute)attributeList.get(i);    String name=attribute.getName();switch (name) {case PulseConstants.MBEAN_ATTRIBUTE_EVENTRECEIVEDDATE:      gatewaySender.setLinkThroughput(getDoubleAttribute(attribute.getValue(),attribute.getName()));    break;case PulseConstants.MBEAN_ATTRIBUTE_BATCHSIZE:  gatewaySender.setBatchSize(getIntegerAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_SENDERID:gatewaySender.setId(getStringAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_EVENTQUEUESIZE:gatewaySender.setQueueSize(getIntegerAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_RUNNING:gatewaySender.setStatus(getBooleanAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_PRIMARY:gatewaySender.setPrimary(getBooleanAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_PERSISTENCEENABLED:gatewaySender.setPersistenceEnabled(getBooleanAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_PARALLEL:gatewaySender.setSenderType(getBooleanAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_REMOTE_DS_ID:gatewaySender.setRemoteDSId(getIntegerAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_EVENTS_EXCEEDING_ALERT_THRESHOLD:gatewaySender.setEventsExceedingAlertThreshold(getIntegerAttribute(attribute.getValue(),attribute.getName()));break;}}return gatewaySender;}  }
class C{  public void onConnect(String host,Integer port,Integer clientId){}  }
class C{  void updateFinish(){  mWXSDKInstance.onUpdateFinish();}  }
class C{  SegmentReader(SegmentCommitInfo si,SegmentReader sr) throws IOException {  this(si,sr,si.hasDeletions() ? si.info.getCodec().liveDocsFormat().readLiveDocs(si.info.dir,si,IOContext.READONCE) : null,si.info.maxDoc() - si.getDelCount(),false);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  protected AbstractCharDecoder(InputStream is){  inputStream=is;}  }
class C{  void selectType(Environment env,Context ctx,int tm){  type=right.type;}  }
class C{  public EmptyQuery(){  requestFileName="empty.query";}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private static Object maskNull(Object key){  return (key == null) ? NULL_KEY : key;}  }
class C{  public void dispose() throws IOException {  close();  inputReader=null;}  }
class C{  public int previous(){  return this.icuIterator.previous();}  }
class C{  public JsonObject SP2Refresh(String mac){  return broadlinkExecuteCommand(BroadlinkConstants.CMD_SP2_REFRESH_ID,BroadlinkConstants.CMD_SP2_REFRESH,mac);}  }
class C{  public MappedBytes copy(){  throw new UnsupportedOperationException("copy");}  }
class C{  public Initiator initiator(){  return initiator;}  }
class C{  public String greetServer(String input) throws IllegalArgumentException {  return "";}  }
class C{  public FileUpload uploadFile(Uri file,boolean attachFileIcon) throws RcsMaxAllowedSessionLimitReachedException, RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    tryToGrantUriPermissionToStackServices(file);    IFileUpload uploadIntf=mApi.uploadFile(file,attachFileIcon);    if (uploadIntf != null) {      return new FileUpload(uploadIntf);    }    return null;  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsMaxAllowedSessionLimitReachedException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public boolean isConnected(){synchronized (this) {    return mState == State.CONNECTED;  }}  }
class C{  public void paintRootPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  protected String createLabelText(){  StringBuilder sb=new StringBuilder();  Object o=this.getModifier(SymbologyConstants.UNIQUE_DESIGNATION);  if (o != null) {    sb.append("Name: ");    sb.append(o);    sb.append("\n");  }  o=this.getModifier(SymbologyConstants.DISTANCE);  if (o != null) {    sb.append("Width: ");    sb.append(o);    sb.append(" m");    sb.append("\n");  }  Object[] altitudes=TacticalGraphicUtil.getAltitudeRange(this);  if (altitudes[0] != null) {    sb.append("Min Alt: ");    sb.append(altitudes[0]);    sb.append("\n");  }  if (altitudes[1] != null) {    sb.append("Max Alt: ");    sb.append(altitudes[1]);    sb.append("\n");  }  Object[] dates=TacticalGraphicUtil.getDateRange(this);  if (dates[0] != null) {    sb.append("DTG Start: ");    sb.append(dates[0]);    sb.append("\n");  }  if (dates[1] != null) {    sb.append("DTG End: ");    sb.append(dates[1]);  }  return sb.toString();}  }
class C{  @Override public void disconnect(){  if (mDBApi == null) {    AndroidAuthSession mSession=new AndroidAuthSession(mAppKeys);    mDBApi=new DropboxAPI<AndroidAuthSession>(mSession);  }  mDBApi.getSession().unlink();  settings.setDropboxAuthToken("");  settings.writeChanges();  accessToken="";}  }
class C{  public static String generateToken(String scope){  return generateToken(scope,getLoggedInEmailOrEmpty());}  }
class C{  private void initResourceBundle(UIDefaults table){  table.setDefaultLocale(Locale.getDefault());  table.addResourceBundle("com.sun.swing.internal.plaf.basic.resources.basic");}  }
class C{  public static ClientBuilder builder(){  return new Retrofit2ClientBuilder();}  }
class C{  @Override public void keyPressed(KeyEvent e){  int x=0;  int y=0;switch (e.getKeyCode()) {case KeyEvent.VK_UP:case KeyEvent.VK_KP_UP:case KeyEvent.VK_NUMPAD8:    y=-1;  break;case KeyEvent.VK_DOWN:case KeyEvent.VK_KP_DOWN:case KeyEvent.VK_NUMPAD2:y=1;break;case KeyEvent.VK_LEFT:case KeyEvent.VK_KP_LEFT:case KeyEvent.VK_NUMPAD4:x=-1;break;case KeyEvent.VK_RIGHT:case KeyEvent.VK_KP_RIGHT:case KeyEvent.VK_NUMPAD6:x=1;break;case KeyEvent.VK_D:case KeyEvent.VK_DELETE:case KeyEvent.VK_MINUS:_shapeDrawer.delete();break;case KeyEvent.VK_A:case KeyEvent.VK_INSERT:case KeyEvent.VK_PLUS:_shapeDrawer.add(e.isShiftDown());break;default :return;}if (e.isShiftDown()) {x*=5;y*=5;}if (_selectionGroup != null) {for (Positionable comp : _selectionGroup) {moveItem(comp,x,y);}}repaint();}  }
class C{  public org.oscm.example.client.SessionServiceStub.ResolveUserTokenResponseE resolveUserToken(org.oscm.example.client.SessionServiceStub.ResolveUserTokenE resolveUserToken16) throws java.rmi.RemoteException {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[8].getName());    _operationClient.getOptions().setAction("http://oscm.org/SessionService/resolveUserTokenRequest");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),resolveUserToken16,optimizeContent(new javax.xml.namespace.QName("http://oscm.org","resolveUserToken")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.oscm.example.client.SessionServiceStub.ResolveUserTokenResponseE.class,getEnvelopeNamespaces(_returnEnv));    return (org.oscm.example.client.SessionServiceStub.ResolveUserTokenResponseE)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  public StreamResult(File f){  setSystemId(f);}  }
class C{  public Builder(){  this(TweetUi.getInstance());}  }
class C{  private static String replaceTabsWithSpaces(final String input){  return input.replaceAll("\\t","  ").replaceAll("\\r","");}  }
class C{  @Override public void updateAddonCost(double changeAmount){  OperationalAnalyticsReporter.planChangeAccepted(AnalyticsCnsts.ADDON,changeAmount);  basePlan.setAddonCost(basePlan.getAddonCost() + changeAmount);  updateBasePlanMFP();  basePlanStream.onNext(basePlan);}  }
class C{  public Task<BlockSnapshotRestRep> activateForConsistencyGroup(URI consistencyGroupId,URI id){  return postTask(getByConsistencyGroupUrl() + "/{id}/activate",consistencyGroupId,id);}  }
class C{  public MediaDataImpl(ExtensionPoint extensionPoint){  this.extPoint=extensionPoint;}  }
class C{  @Override public String globalInfo(){  return "A Conditional Dependency Network. " + "For more information see:\n" + getTechnicalInformation().toString();}  }
class C{  protected void pushGlobalVars(int contextNode) throws TransformerException {  XPathContext xctxt=m_xcontext;  VariableStack vs=xctxt.getVarStack();  StylesheetRoot sr=getStylesheet();  Vector vars=sr.getVariablesAndParamsComposed();  int i=vars.size();  vs.link(i);  while (--i >= 0) {    ElemVariable v=(ElemVariable)vars.elementAt(i);    XObject xobj=new XUnresolvedVariable(v,contextNode,this,vs.getStackFrame(),0,true);    if (null == vs.elementAt(i))     vs.setGlobalVariable(i,xobj);  }}  }
class C{  protected static String quote(String s){  return StringUtils.quoteJavaString(s);}  }
class C{  public void purge(final boolean needReinit){  validateViPRServiceDown();  try {    dbRestoreHandler.purge();    geoDbRestoreHandler.purge();    geoDbRestoreHandler.checkReinitFile(needReinit);    zkRestoreHandler.purge();  } catch (  Exception ex) {    log.error("Failed to purge data(needReinit={})",needReinit,ex);    throw BackupException.fatals.failedToPurgeViprData(ex);  }  log.info(String.format(OUTPUT_FORMAT,"ViPR data purge validation",Validation.passed.name()));}  }
class C{  public void addName(String name){  _names.add(name);}  }
class C{  public boolean remove(Object o){  return map.remove(o) == PRESENT;}  }
class C{  private long calculateRevenueSharesPeriodEnd(long billingInvocationTime,long billingOffset){  Calendar cal=getCalendar();  cal.setTimeInMillis(subtractBillingOffset(billingInvocationTime,billingOffset));  cal.set(Calendar.DAY_OF_MONTH,1);  return cal.getTimeInMillis();}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.668 -0500",hash_original_method="FCDCA2DC24AB76EAA903F8369A9A45F8",hash_generated_method="140974EC04E609A75C5B666C07BE566A") public boolean isFullscreenMode(){  return mFullscreenMode;}  }
class C{  public void protect(boolean isProtected){  this.isProtected=isProtected;}  }
class C{  public void startElement(String name,AttributeList attributes) throws SAXException {}  }
class C{  public void assertExceptionThrown(String message,Class<? extends Exception> exceptionType,Runnable runnable) throws Exception {  Exception ex=null;  try {    runnable.run();  } catch (  Exception e) {    ex=e;  }  assertNotNull("No exception was throwed : " + message,ex);  if (exceptionType != null && !exceptionType.isAssignableFrom(ex.getClass())) {    throw ex;  }}  }
class C{  default boolean isTerminated(){  return false;}  }
class C{  public synchronized void put(Object[] keys,EventTable[] value){  Object key=DataCacheUtil.getLookupKey(keys);  cache.put(key,value);}  }
class C{  public ASN1InputStream(InputStream input,int limit){  this(input,limit,false);}  }
class C{  private void loadFile() throws IOException {  FileInputStream configFileInputStream=null;  try {    configFileInputStream=new FileInputStream(filename);    prop.load(configFileInputStream);  }  finally {    IOUtils.closeQuite(configFileInputStream);  }}  }
class C{  public void exprSetParent(ExpressionNode n){  setParentElem((ElemTemplateElement)n);}  }
class C{  public CDebuggerComboBox(final BackEndDebuggerProvider provider){  m_provider=Preconditions.checkNotNull(provider,"IE01363: Provider can not be null");  for (  final IDebugger debugger : provider.getDebuggers()) {    addItem(new CDebuggerWrapper(debugger));  }  provider.addListener(m_internalDebuggerListener);}  }
class C{  public BarPlot(DataSource... data){  super(data);  ((XYPlotArea2D)getPlotArea()).setMajorGridX(false);  barWidth=1.0;  barHeightMin=0.0;  paintAllBars=false;  Legend legend=new BarPlotLegend(this);  setLegend(legend);  autoscaleAxes();}  }
class C{  boolean isInputComplete(StringBuilder missing){  boolean checkOnly=missing == null;  if (checkOnly) {    missing=new StringBuilder();  }  for (  WidgetPort port : portWidgets()) {    WidgetPort widget=(WidgetPort)port;    if (widget.port.input && widget.value() == null) {      if (missing.length() > 0) {        missing.append(", ");      }      missing.append(widget.port.name());      if (!checkOnly) {        widget.view().setBackgroundColor(0x088ff0000);      }    }  }  return missing.length() == 0;}  }
class C{  public Owner owner(){  return owner;}  }
class C{  @Profile({"production"}) private void activateProtectionCRSF(HttpSecurity http) throws Exception {  http.csrf().csrfTokenRepository(csrfTokenRepository()).and().addFilterAfter(csrfHeaderFilter(),CsrfFilter.class);}  }
class C{  public boolean teleport(final StendhalRPZone zone,final int x,final int y,final Direction dir,final Player teleporter){  if (StendhalRPAction.placeat(zone,this,x,y)) {    if (dir != null) {      this.setDirection(dir);    }    notifyWorldAboutChanges();    return true;  } else {    final String text="Position [" + x + ","+ y+ "] is occupied";    if (teleporter != null) {      teleporter.sendPrivateText(text);    } else {      this.sendPrivateText(text);    }    return false;  }}  }
class C{  @Deprecated public static long UTC(int year,int month,int day,int hour,int minute,int second){  GregorianCalendar cal=new GregorianCalendar(false);  cal.setTimeZone(TimeZone.getTimeZone("GMT"));  cal.set(1900 + year,month,day,hour,minute,second);  return cal.getTimeInMillis();}  }
class C{  @HLEFunction(nid=0x47A0B729,version=150) public boolean sceKernelIsCpuIntrSuspended(int flagInterrupts){  return flagInterrupts == flagInterruptsDisabled;}  }
class C{  synchronized void processDelayedDirectionRelease(){  if ((directionRelease != null) && directionRelease.hasExpired()) {    client.removeDirection(directionRelease.getDirection(),directionRelease.isFacing());    directionRelease=null;  }}  }
class C{  protected int hashEntry(final Object key,final Object value){  return (key == null ? 0 : key.hashCode()) ^ (value == null ? 0 : value.hashCode());}  }
class C{  private void processTextInput(String qName,String data){  if (tagIsEqual(qName,TITLE_TAG))   input.setTitle(data);  if (tagIsEqual(qName,LINK_TAG))   input.setLink(data);  if (tagIsEqual(qName,NAME_TAG))   input.setInputName(data);  if (tagIsEqual(qName,DESCRIPTION_TAG))   input.setDescription(data);  if (qName.toUpperCase().startsWith("DC:"))   processDoublinCoreTags(qName,data,input);}  }
class C{  public void refresh(){  validate();  repaint();}  }
class C{  public Object remove(Object key){  key=convertKey(key);  int hashCode=hash(key);  int index=hashIndex(hashCode,data.length);  HashEntry entry=data[index];  HashEntry previous=null;  while (entry != null) {    if (entry.hashCode == hashCode && isEqualKey(key,entry.key)) {      Object oldValue=entry.getValue();      removeMapping(entry,index,previous);      return oldValue;    }    previous=entry;    entry=entry.next;  }  return null;}  }
class C{  public CompositeFigureEdit(Figure figure,String presentationName){  super(presentationName);  this.figure=figure;}  }
class C{  public ServiceFault clone(){  ServiceFault result=new ServiceFault();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  return result;}  }
class C{  public void postIdle(final Runnable runnable){  post(new IdleRunnable(runnable));}  }
class C{  public static void main(String[] args){  Header.printHeader(MyTollPotentialCalculator.class.toString(),args);  String baseFilename=args[0];  String linksFilename=args[1];  String populationFilename=args[2];  String networkFilename=args[3];  String outputFolder=args[4];  List<Id<Link>> breakList=new ArrayList<>();  for (int i=5; i < args.length; i++) {    breakList.add(Id.create(args[i],Link.class));  }  MyTollPotentialCalculator mtpc=new MyTollPotentialCalculator();  List<Id<Link>> linkList=mtpc.readLinkIdsFromRoadPricingScheme(linksFilename);  mtpc.readNetwork(networkFilename);  mtpc.readPopulation(populationFilename);  ConfigUtils.addOrGetModule(mtpc.getScenario().getConfig(),RoadPricingConfigGroup.GROUP_NAME,RoadPricingConfigGroup.class).setTollLinksFile(linksFilename);  log.info("-------------------------------------------------------------------------------");  String tollLinksFileName=ConfigUtils.addOrGetModule(mtpc.getScenario().getConfig(),RoadPricingConfigGroup.GROUP_NAME,RoadPricingConfigGroup.class).getTollLinksFile();  RoadPricingSchemeUsingTollFactor scheme=null;  System.err.println("SanralTollFactor does no longer exist; only exists with subpopulations.  Aborting ...");  System.exit(-1);  mtpc.processEventsFile(baseFilename,linkList,breakList,scheme);  mtpc.writeMaps(outputFolder);  log.info("-------------------------------------------------------------------------------");  log.info("                                 Completed");  log.info("===============================================================================");}  }
class C{  public void deleteItem(ScheduleItem si){  if (si != null) {    si.removePropertyChangeListener(this);    String id=si.getId();    si.dispose();    Integer old=Integer.valueOf(_scheduleHashTable.size());    _scheduleHashTable.remove(id);    resequenceIds();    setDirtyAndFirePropertyChange(LISTCHANGE_CHANGED_PROPERTY,old,Integer.valueOf(_scheduleHashTable.size()));  }}  }
class C{  public KeyPairPrivateKeyDetailsAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("KeyPairPrivateKeyDetailsAction.statusbar"));  putValue(NAME,res.getString("KeyPairPrivateKeyDetailsAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("KeyPairPrivateKeyDetailsAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("KeyPairPrivateKeyDetailsAction.image")))));}  }
class C{  @Override public void rotate(float angle,float v0,float v1,float v2){  rotateImpl(angle,v0,v1,v2);}  }
class C{  @Override protected Object convertToType(final Class type,final Object value) throws Throwable {  if (!type.isArray()) {    throw new ConversionException(this.toString(this.getClass()) + " cannot handle conversion to '" + this.toString(type)+ "' (not an array).");  }  int size=0;  Iterator iterator=null;  if (value.getClass().isArray()) {    size=Array.getLength(value);  } else {    Collection collection=this.convertToCollection(type,value);    size=collection.size();    iterator=collection.iterator();  }  Class componentType=type.getComponentType();  Object newArray=Array.newInstance(componentType,size);  for (int i=0; i < size; i++) {    Object element=iterator == null ? Array.get(value,i) : iterator.next();    element=this.elementConverter.convert(componentType,element);    Array.set(newArray,i,element);  }  return newArray;}  }
class C{  private List<Integer> findTgtMatches(Sequence<TK> targetPhrase){  return wordToPosition.getOrDefault(targetPhrase.get(0),Collections.emptyList()).stream().filter(null).collect(Collectors.toList());}  }
class C{  boolean hasNewReasons(ReasonsMask mask){  return ((_reasons | mask.getReasons() ^ _reasons) != 0);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private static boolean isUninstallKeyChord(KeyEvent event){  int keyCode=event.getKeyCode();  return (keyCode == KeyEvent.KEYCODE_DEL || keyCode == KeyEvent.KEYCODE_FORWARD_DEL) && event.hasModifiers(KeyEvent.META_CTRL_ON | KeyEvent.META_SHIFT_ON);}  }
class C{  @Override public Calendar next(){  if (spot.equals(endFinal)) {    throw new NoSuchElementException();  }  spot.add(Calendar.DATE,1);  return (Calendar)spot.clone();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static int createUniqueIdentifier(Request request){  return (request.url() + request.method()).hashCode();}  }
class C{  public static List<TvShowEpisode> parseNFO(File episodeFile){  List<TvShowEpisode> episodes=new ArrayList<>(1);  String filename=episodeFile.getParent() + File.separator + FilenameUtils.getBaseName(episodeFile.getName())+ ".nfo";  episodes.addAll(TvShowEpisodeToXbmcNfoConnector.getData(new File(filename)));  return episodes;}  }
class C{  public PathSegment(final PlanetModel planetModel,final GeoPoint start,final GeoPoint end,final Plane normalizedConnectingPlane,final double planeBoundingOffset){  this.start=start;  this.end=end;  this.normalizedConnectingPlane=normalizedConnectingPlane;  upperConnectingPlane=new SidedPlane(start,normalizedConnectingPlane,-planeBoundingOffset);  lowerConnectingPlane=new SidedPlane(start,normalizedConnectingPlane,planeBoundingOffset);  startCutoffPlane=new SidedPlane(end,normalizedConnectingPlane,start);  endCutoffPlane=new SidedPlane(start,normalizedConnectingPlane,end);  final Membership[] upperSide=new Membership[]{upperConnectingPlane};  final Membership[] lowerSide=new Membership[]{lowerConnectingPlane};  final Membership[] startSide=new Membership[]{startCutoffPlane};  final Membership[] endSide=new Membership[]{endCutoffPlane};  GeoPoint[] points;  points=upperConnectingPlane.findIntersections(planetModel,startCutoffPlane,lowerSide,endSide);  if (points.length == 0) {    throw new IllegalArgumentException("Some segment boundary points are off the ellipsoid; path too wide");  }  if (points.length > 1) {    throw new IllegalArgumentException("Ambiguous boundary points; path too short");  }  this.ULHC=points[0];  points=upperConnectingPlane.findIntersections(planetModel,endCutoffPlane,lowerSide,startSide);  if (points.length == 0) {    throw new IllegalArgumentException("Some segment boundary points are off the ellipsoid; path too wide");  }  if (points.length > 1) {    throw new IllegalArgumentException("Ambiguous boundary points; path too short");  }  this.URHC=points[0];  points=lowerConnectingPlane.findIntersections(planetModel,startCutoffPlane,upperSide,endSide);  if (points.length == 0) {    throw new IllegalArgumentException("Some segment boundary points are off the ellipsoid; path too wide");  }  if (points.length > 1) {    throw new IllegalArgumentException("Ambiguous boundary points; path too short");  }  this.LLHC=points[0];  points=lowerConnectingPlane.findIntersections(planetModel,endCutoffPlane,upperSide,startSide);  if (points.length == 0) {    throw new IllegalArgumentException("Some segment boundary points are off the ellipsoid; path too wide");  }  if (points.length > 1) {    throw new IllegalArgumentException("Ambiguous boundary points; path too short");  }  this.LRHC=points[0];  upperConnectingPlanePoints=new GeoPoint[]{ULHC,URHC};  lowerConnectingPlanePoints=new GeoPoint[]{LLHC,LRHC};  startCutoffPlanePoints=new GeoPoint[]{ULHC,LLHC};  endCutoffPlanePoints=new GeoPoint[]{URHC,LRHC};}  }
class C{  @Override protected boolean isSwitchFor(EPackage ePackage){  return ePackage == modelPackage;}  }
class C{  public static PingResult doPing(InetAddress ia,int timeOutMillis){  try {    PingResult result=PingTools.doNativePing(ia,timeOutMillis);    return result;  } catch (  Exception e) {  }  Log.v("AndroidNetworkTools","Native ping failed, using java");  return PingTools.doJavaPing(ia,timeOutMillis);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void eraseOrPaintMode(View v){  drawingView.setErase(v.getTag().toString().equals("erase"));}  }
class C{  public FastAdapterDialog<Item> withNegativeButton(@StringRes int textRes){  return withButton(BUTTON_NEGATIVE,textRes,null);}  }
class C{  public boolean canRedo(){  return actionsIndex < actionList.size() && currentAction == null;}  }
class C{  public LimitedSizeIntersectIteration(Iteration<? extends BindingSet,? extends QueryEvaluationException> arg1,Iteration<? extends BindingSet,? extends QueryEvaluationException> arg2,AtomicLong used,long maxSize){  this(arg1,arg2,false,used,maxSize);}  }
class C{  @Override public int parse(char[] buf,int start,int end,T data){  int hit=left.parse(buf,start,end,data);  if (hit != NO_MATCH) {    return hit;  }  return right.parse(buf,start,end,data);}  }
class C{  public Name2AddrTupleSerializer(){  super();  this.ser=EntrySerializer.INSTANCE;}  }
class C{  private void acquireWorkflowLockOrThrow(Workflow workflow,List<String> locks) throws LockRetryException {  log.info("Attempting to acquire workflow lock {}",Joiner.on(',').join(locks));  workflowService.acquireWorkflowLocks(workflow,locks,LockTimeoutValue.get(LockType.SRDF_PROVISIONING));}  }
class C{  private void expungeStaleEntries(){  for (Object x; (x=queue.poll()) != null; ) {synchronized (queue) {      @SuppressWarnings("unchecked") Entry<K,V> e=(Entry<K,V>)x;      int i=indexFor(e.hash,table.length);      Entry<K,V> prev=table[i];      Entry<K,V> p=prev;      while (p != null) {        Entry<K,V> next=p.next;        if (p == e) {          if (prev == e)           table[i]=next; else           prev.next=next;          e.value=null;          size--;          break;        }        prev=p;        p=next;      }    }  }}  }
class C{  public boolean hasNext(){  int p=peeked;  if (p == PEEKED_NONE) {    p=doPeek();  }  return p != PEEKED_END_OBJECT && p != PEEKED_END_ARRAY;}  }
class C{  public void remove(){  if (_expectedSize != _hash.size()) {    throw new ConcurrentModificationException();  }  try {    _hash.tempDisableAutoCompaction();    _hash.removeAt(_index);  }  finally {    _hash.reenableAutoCompaction(false);  }  _expectedSize--;}  }
class C{  protected void drawGeometry(DrawContext dc,int mode,int count,int type,Buffer elementBuffer,ShapeData shapeData,int face){  if (elementBuffer == null) {    String message="nullValue.ElementBufferIsNull";    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Geometry mesh=shapeData.getMesh(face);  if (mesh.getBuffer(Geometry.VERTEX) == null) {    String message="nullValue.VertexBufferIsNull";    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  GL2 gl=dc.getGL().getGL2();  int size, glType, stride;  Buffer vertexBuffer, normalBuffer;  size=mesh.getSize(Geometry.VERTEX);  glType=mesh.getGLType(Geometry.VERTEX);  stride=mesh.getStride(Geometry.VERTEX);  vertexBuffer=mesh.getBuffer(Geometry.VERTEX);  normalBuffer=null;  if (!dc.isPickingMode()) {    if (mustApplyLighting(dc,null)) {      normalBuffer=mesh.getBuffer(Geometry.NORMAL);      if (normalBuffer == null) {        gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);      } else {        glType=mesh.getGLType(Geometry.NORMAL);        stride=mesh.getStride(Geometry.NORMAL);        gl.glNormalPointer(glType,stride,normalBuffer);      }    }  }  boolean vboState=dc.getGLRuntimeCapabilities().isVertexBufferObjectEnabled();  if (this.shouldUseVBOs(dc) && (this.getVboIds(getSubdivisions(),dc)) != null) {    gl.glBindBuffer(GL.GL_ARRAY_BUFFER,getVboIds(getSubdivisions(),dc)[2 * face]);    gl.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER,this.getVboIds(getSubdivisions(),dc)[2 * face + 1]);    gl.glVertexPointer(size,glType,stride,0);    gl.glDrawElements(mode,count,type,0);    gl.glBindBuffer(GL.GL_ARRAY_BUFFER,0);    gl.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER,0);  } else {    gl.glVertexPointer(size,glType,stride,vertexBuffer.rewind());    gl.glDrawElements(mode,count,type,elementBuffer);  }  gl.glDisable(GL2.GL_RESCALE_NORMAL);  dc.getGLRuntimeCapabilities().setVertexBufferObjectEnabled(vboState);  if (!dc.isPickingMode()) {    if (mustApplyLighting(dc,null)) {      if (normalBuffer == null)       gl.glEnableClientState(GL2.GL_NORMAL_ARRAY);    }  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("ArchiveTokenValidation[");  for (int i=0; i < m_fldsVld.size(); i++) {    buffer.append(" [FieldValidation").append(i + 1);    buffer.append(" = ").append((m_fldsVld.get(i)).toString());    buffer.append("] ");  }  buffer.append("]");  return buffer.toString();}  }
class C{  public boolean hasQuotaLimitExt(){  return hasExtension(GphotoQuotaLimit.class);}  }
class C{  public static int reflectionHashCode(int initialNonZeroOddNumber,int multiplierNonZeroOddNumber,Object object,boolean testTransients){  return reflectionHashCode(initialNonZeroOddNumber,multiplierNonZeroOddNumber,object,testTransients,null,null);}  }
class C{  public FactLine balanceAccounting(){  BigDecimal diff=getAcctBalance();  log.fine("Balance=" + diff + ", CurrBal="+ m_acctSchema.isCurrencyBalancing()+ " - "+ toString());  FactLine line=null;  BigDecimal BSamount=Env.ZERO;  FactLine BSline=null;  BigDecimal PLamount=Env.ZERO;  FactLine PLline=null;  for (int i=0; i < m_lines.size(); i++) {    FactLine l=(FactLine)m_lines.get(i);    BigDecimal amt=l.getAcctBalance().abs();    if (l.isBalanceSheet() && amt.compareTo(BSamount) > 0) {      BSamount=amt;      BSline=l;    } else     if (!l.isBalanceSheet() && amt.compareTo(PLamount) > 0) {      PLamount=amt;      PLline=l;    }  }  if (m_acctSchema.isCurrencyBalancing()) {    line=new FactLine(m_doc.getCtx(),m_doc.get_Table_ID(),m_doc.get_ID(),0,m_trxName);    line.setDocumentInfo(m_doc,null);    line.setPostingType(m_postingType);    line.setAccount(m_acctSchema,m_acctSchema.getCurrencyBalancing_Acct());    line.setAmtSource(m_doc.getC_Currency_ID(),Env.ZERO,Env.ZERO);    line.convert();    BigDecimal drAmt=Env.ZERO;    BigDecimal crAmt=Env.ZERO;    boolean isDR=diff.signum() < 0;    BigDecimal difference=diff.abs();    if (isDR)     drAmt=difference; else     crAmt=difference;    boolean switchIt=BSline != null && ((BSline.isDrSourceBalance() && isDR) || (!BSline.isDrSourceBalance() && !isDR));    if (switchIt) {      drAmt=Env.ZERO;      crAmt=Env.ZERO;      if (isDR)       crAmt=difference.negate(); else       drAmt=difference.negate();    }    line.setAmtAcct(drAmt,crAmt);    log.fine(line.toString());    m_lines.add(line);  } else {    if (BSline != null)     line=BSline; else     line=PLline;    if (line == null)     log.severe("No Line found"); else {      log.fine("Adjusting Amt=" + diff + "; Line="+ line);      line.currencyCorrect(diff);      log.fine(line.toString());    }  }  return line;}  }
class C{  public void missingAttribute(String systemID,int lineNr,String elementName,String attributeName) throws XMLValidationException {  XMLUtil.errorMissingAttribute(systemID,lineNr,elementName,attributeName);}  }
class C{  static void loadSubDirectory(File main,File dig,ModuleCandidate candidate){  if (dig.isDirectory()) {    File[] files=dig.listFiles();    if (files != null)     for (    File f : files)     loadSubDirectory(main,f,candidate);  } else   if (classFile.matcher(dig.getName()).matches()) {    Path pathCurrent=Paths.get(dig.getAbsolutePath());    Path pathMain=Paths.get(main.getAbsolutePath());    Path relative=pathMain.relativize(pathCurrent);    candidate.addClassEntry(relative.toString());  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void join(Player player,Player targetPlayer){  Group group=SingletonRepository.getGroupManager().getGroup(player.getName());  if (group != null) {    player.sendPrivateText(NotificationType.ERROR,"You are already in a group.");    return;  }  group=SingletonRepository.getGroupManager().getGroup(targetPlayer.getName());  if ((group == null) || !group.hasBeenInvited(player.getName())) {    player.sendPrivateText(NotificationType.ERROR,"You have not been invited into this group or the invite expired.");    return;  }  if (group.isFull()) {    player.sendPrivateText(NotificationType.ERROR,"The group is already full.");    return;  }  group.addMember(player.getName());}  }
class C{  public boolean hasNewlyAddedEpisodes(){  for (  TvShowEpisode episode : new ArrayList<>(this.episodes)) {    if (episode.isNewlyAdded()) {      return true;    }  }  return false;}  }
class C{  protected void forceSetComponentCount(int count){  mComponentCountActual=count;}  }
class C{  public void initializeDefinition(String tableName,boolean isDeferrable,boolean isDeferred){  m_table=tableName;  m_isDeferrable=isDeferrable;  m_isDeferred=isDeferred;  s_logger.log(Level.FINEST,toString());}  }
class C{  public final void init(ManagerFactoryParameters spec) throws InvalidAlgorithmParameterException {  spiImpl.engineInit(spec);}  }
class C{  public java.lang.StringBuffer insert(int offset,java.lang.Object obj){  return null;}  }
class C{  protected Intent assertNextStartedActivityForResult(BaseFragmentActivity currentActivity,Class<? extends Activity> nextActivityClass,int requestCode){  ShadowActivity shadowActivity=Shadows.shadowOf(currentActivity);  ShadowActivity.IntentForResult intentForResult=shadowActivity.getNextStartedActivityForResult();  assertNotNull(intentForResult);  assertThat(intentForResult.intent).hasComponent(currentActivity,nextActivityClass);  assertEquals(requestCode,intentForResult.requestCode);  return intentForResult.intent;}  }
class C{  public static int isEquals(String[] compareStrings,String text){  for (int i=0; i < compareStrings.length; i++) {    if (text.equals(compareStrings[i]))     return i;  }  return -1;}  }
class C{  private boolean load(){  FileInputStream fileInput=null;  DataInputStream in=null;  try {    fileInput=ctx.openFileInput(SAVEFILE);    in=new DataInputStream(new BufferedInputStream(fileInput));    long size=fileInput.getChannel().size();    int records=(int)((size - 4) / TrackPoint.RECORD_SIZE);    loaded.ensureCapacity(records);    if (in.readInt() != TrackPoint.FORMAT_VERSION) {      Log.e(TAG,"cannot load track, incompatible data format");      return false;    }    for (int i=0; i < records; i++) {      loaded.add(TrackPoint.fromStream(in));    }    if ((size - 4) % TrackPoint.RECORD_SIZE != 0) {      Log.e(TAG,"track file contains partial record");      return false;    }    return true;  } catch (  FileNotFoundException e) {    Log.i(TAG,"No saved track");    return false;  }catch (  Exception e) {    Log.e(TAG,"failed to (completely) load track",e);    return false;  } finally {    SavingHelper.close(in);  }}  }
class C{  public static NtlmPasswordAuthentication requestNtlmPasswordAuthentication(String url,SmbAuthException sae){  if (auth == null) {    return null;  }synchronized (auth) {    auth.url=url;    auth.sae=sae;    return auth.getNtlmPasswordAuthentication();  }}  }
class C{  public List simulate(){  List[] val=new List[4];  for (int i=3; i >= 0; i--) {    Village v=forward[i];    if (v != null) {      val[i]=v.simulate();    }  }  for (int i=3; i >= 0; i--) {    List l=val[i];    if (l != null) {      for (Enumeration e=l.elements(); e.hasMoreElements(); ) {        Patient p=(Patient)e.nextElement();        hospital.putInHospital(p);      }    }  }  hospital.checkPatientsInside(returned);  List up=hospital.checkPatientsAssess(this);  hospital.checkPatientsWaiting();  Patient p=generatePatient();  if (p != null) {    hospital.putInHospital(p);  }  return up;}  }
class C{  public void clearTextLabels(){  clearXTextLabels();}  }
class C{  public TaxiRideSource(String dataFilePath,int maxEventDelaySecs,int servingSpeedFactor){  if (maxEventDelaySecs < 0) {    throw new IllegalArgumentException("Max event delay must be positive");  }  this.dataFilePath=dataFilePath;  this.maxDelayMsecs=maxEventDelaySecs * 1000;  this.watermarkDelayMSecs=maxDelayMsecs < 10000 ? 10000 : maxDelayMsecs;  this.servingSpeed=servingSpeedFactor;}  }
class C{  public void insert(E e){  if (e == null) {    throw new IllegalArgumentException("Cannot insert 'null' into DoubleLinkedList.");  }  if (comparator == null) {    append(e);    return;  }  DoubleNode<E> newNode=new DoubleNode<E>(e);  if (head == null) {    head=newNode;    last=newNode;    size++;    return;  }  size++;  DoubleNode<E> p=head;  while (p != null) {    int cmp=comparator.compare(p.value,e);    if (cmp <= 0) {      p=p.next;    } else {      if (p == head) {        p.prev=newNode;        newNode.next=p;        head=newNode;        return;      } else {        newNode.prev=p.prev;        p.prev.next=newNode;        p.prev=newNode;        newNode.next=p;        return;      }    }  }  last.next=newNode;  newNode.prev=last;  last=newNode;}  }
class C{  public String qty(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive() || value == null)   return "";  int M_Product_ID=Env.getContextAsInt(ctx,WindowNo,"M_Product_ID");  if (steps)   log.warning("init - M_Product_ID=" + M_Product_ID + " - ");  BigDecimal QtyOrdered=Env.ZERO;  BigDecimal QtyEntered;  if (M_Product_ID == 0) {    return "";  } else   if (mField.getColumnName().equals("C_UOM_ID")) {    int C_UOM_To_ID=((Integer)value).intValue();    QtyEntered=(BigDecimal)mTab.getValue("QtyEntered");    BigDecimal QtyEntered1=QtyEntered.setScale(MUOM.getPrecision(ctx,C_UOM_To_ID),BigDecimal.ROUND_HALF_UP);    if (QtyEntered.compareTo(QtyEntered1) != 0) {      log.fine("Corrected QtyEntered Scale UOM=" + C_UOM_To_ID + "; QtyEntered="+ QtyEntered+ "->"+ QtyEntered1);      QtyEntered=QtyEntered1;      mTab.setValue("QtyEntered",QtyEntered);    }    QtyOrdered=MUOMConversion.convertProductFrom(ctx,M_Product_ID,C_UOM_To_ID,QtyEntered);    if (QtyOrdered == null)     QtyOrdered=QtyEntered;    boolean conversion=QtyEntered.compareTo(QtyOrdered) != 0;    Env.setContext(ctx,WindowNo,"UOMConversion",conversion ? "Y" : "N");    mTab.setValue("QtyOrdered",QtyOrdered);  } else   if (mField.getColumnName().equals("QtyEntered")) {    int C_UOM_To_ID=Env.getContextAsInt(ctx,WindowNo,"C_UOM_ID");    QtyEntered=(BigDecimal)value;    BigDecimal QtyEntered1=QtyEntered.setScale(MUOM.getPrecision(ctx,C_UOM_To_ID),BigDecimal.ROUND_HALF_UP);    if (QtyEntered.compareTo(QtyEntered1) != 0) {      log.fine("Corrected QtyEntered Scale UOM=" + C_UOM_To_ID + "; QtyEntered="+ QtyEntered+ "->"+ QtyEntered1);      QtyEntered=QtyEntered1;      mTab.setValue("QtyEntered",QtyEntered);    }    QtyOrdered=MUOMConversion.convertProductFrom(ctx,M_Product_ID,C_UOM_To_ID,QtyEntered);    if (QtyOrdered == null)     QtyOrdered=QtyEntered;    boolean conversion=QtyEntered.compareTo(QtyOrdered) != 0;    log.fine("UOM=" + C_UOM_To_ID + ", QtyEntered="+ QtyEntered+ " -> "+ conversion+ " QtyOrdered="+ QtyOrdered);    Env.setContext(ctx,WindowNo,"UOMConversion",conversion ? "Y" : "N");    mTab.setValue("QtyOrdered",QtyOrdered);  } else   if (mField.getColumnName().equals("QtyOrdered")) {    int C_UOM_To_ID=Env.getContextAsInt(ctx,WindowNo,"C_UOM_ID");    QtyOrdered=(BigDecimal)value;    int precision=MProduct.get(ctx,M_Product_ID).getUOMPrecision();    BigDecimal QtyOrdered1=QtyOrdered.setScale(precision,BigDecimal.ROUND_HALF_UP);    if (QtyOrdered.compareTo(QtyOrdered1) != 0) {      log.fine("Corrected QtyOrdered Scale " + QtyOrdered + "->"+ QtyOrdered1);      QtyOrdered=QtyOrdered1;      mTab.setValue("QtyOrdered",QtyOrdered);    }    QtyEntered=MUOMConversion.convertProductTo(ctx,M_Product_ID,C_UOM_To_ID,QtyOrdered);    if (QtyEntered == null)     QtyEntered=QtyOrdered;    boolean conversion=QtyOrdered.compareTo(QtyEntered) != 0;    log.fine("UOM=" + C_UOM_To_ID + ", QtyOrdered="+ QtyOrdered+ " -> "+ conversion+ " QtyEntered="+ QtyEntered);    Env.setContext(ctx,WindowNo,"UOMConversion",conversion ? "Y" : "N");    mTab.setValue("QtyEntered",QtyEntered);  } else {    QtyOrdered=(BigDecimal)mTab.getValue("QtyOrdered");  }  if (M_Product_ID != 0 && Env.isSOTrx(ctx,WindowNo) && QtyOrdered.signum() > 0) {    MProduct product=MProduct.get(ctx,M_Product_ID);    if (product.isStocked()) {      int M_Locator_ID=Env.getContextAsInt(ctx,WindowNo,"M_Locator_ID");      int M_AttributeSetInstance_ID=Env.getContextAsInt(ctx,WindowNo,"M_AttributeSetInstance_ID");      int M_Warehouse_ID=MLocator.get(ctx,M_Locator_ID).getM_Warehouse_ID();      BigDecimal available=MStorage.getQtyAvailable(M_Warehouse_ID,0,M_Product_ID,M_AttributeSetInstance_ID,null);      if (available == null)       available=Env.ZERO;      if (available.signum() == 0)       mTab.fireDataStatusEEvent("NoQtyAvailable","0",false); else       if (available.compareTo(QtyOrdered) < 0)       mTab.fireDataStatusEEvent("InsufficientQtyAvailable",available.toString(),false); else {        Integer DD_OrderLine_ID=(Integer)mTab.getValue("DD_OrderLine_ID");        if (DD_OrderLine_ID == null)         DD_OrderLine_ID=new Integer(0);        BigDecimal notReserved=MDDOrderLine.getNotReserved(ctx,M_Locator_ID,M_Product_ID,M_AttributeSetInstance_ID,DD_OrderLine_ID.intValue());        if (notReserved == null)         notReserved=Env.ZERO;        BigDecimal total=available.subtract(notReserved);        if (total.compareTo(QtyOrdered) < 0) {          String info=Msg.parseTranslation(ctx,"@QtyAvailable@=" + available + "  -  @QtyNotReserved@="+ notReserved+ "  =  "+ total);          mTab.fireDataStatusEEvent("InsufficientQtyAvailable",info,false);        }      }    }  }  return "";}  }
class C{  public static IgniteBiTuple<Integer,Integer> footerAbsolute(BinaryPositionReadable in,int start){  short flags=in.readShortPositioned(start + GridBinaryMarshaller.FLAGS_POS);  int footerEnd=length(in,start);  if (hasSchema(flags)) {    int footerStart=in.readIntPositioned(start + GridBinaryMarshaller.SCHEMA_OR_RAW_OFF_POS);    if (hasRaw(flags))     footerEnd-=4;    assert footerStart <= footerEnd;    return F.t(start + footerStart,start + footerEnd);  } else   return F.t(start + footerEnd,start + footerEnd);}  }
class C{  private boolean isUpdateAvailable(){  final Boolean isUpdateAvailableWeb=isUpdateAvailableWeb();  if (isUpdateAvailableWeb != null) {    setLastTimeUpdateChecked(mContext);    return isUpdateAvailableWeb;  } else   return false;}  }
class C{  @Override public void start(final BundleContext context) throws Exception {  this.commandSessionTracker=new ServiceTracker(context,CommandSession.class,new CommandSessionListener(context));  commandSessionTracker.open();  this.serviceTrackerActions=new ServiceTracker(context,CommandWithAction.class,new SwitchActionListener(context));  serviceTrackerActions.open();}  }
class C{  public Tree(Table nodes,Table edges,String nodeKey,String sourceKey,String targetKey){  super(nodes,edges,false,nodeKey,sourceKey,targetKey);  for (IntIterator rows=nodes.rows(); rows.hasNext(); ) {    int n=rows.nextInt();    if (getParent(n) < 0) {      m_root=n;      break;    }  }}  }
class C{  private void writeLinkFiles(String outputFolder) throws IOException {  if (this.linksChecked) {    writeLinkStatisticsFile(outputFolder);    writeStorageCapacityWarningFile(outputFolder);  }  writeClustersAndNetwork2ESRIShape(outputFolder);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:50.824 -0500",hash_original_method="ED7F15B5071BF063BB4017E313468A57",hash_generated_method="D5D72AC315056B38568B3C9B6CCCE6B0") public BerInputStream(InputStream in,int initialSize) throws IOException {  this.in=in;  buffer=new byte[initialSize];  next();  if (length != INDEFINIT_LENGTH) {    if (buffer.length < (length + offset)) {      byte[] newBuffer=new byte[length + offset];      System.arraycopy(buffer,0,newBuffer,0,offset);      buffer=newBuffer;    }  } else {    isIndefinedLength=true;    throw new ASN1Exception("Decoding indefinite length encoding is not supported");  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void make_interpolation(int envelope_data[],int N_samples,int index_samp_line[],int image_index[],double weight_coef[],int N_values,int image[]){  if (image == null) {    throw new IllegalArgumentException("image must not be null");  }  if (image_index == null) {    throw new IllegalArgumentException("image_index must not be null");  }  if (envelope_data == null) {    throw new IllegalArgumentException("envelope_data must not be null");  }  if (weight_coef == null) {    throw new IllegalArgumentException("weight_coef must not be null");  }  if (index_samp_line == null) {    throw new IllegalArgumentException("index_samp_line must not be null");  }  int i;  int ij_index_coef;  int env_index;  int weight_index;  ij_index_coef=0;  for (i=0; i < N_values; i++) {    weight_index=ij_index_coef;    env_index=index_samp_line[i];    image[image_index[i]]=(char)(weight_coef[weight_index] * envelope_data[env_index] + weight_coef[weight_index + 1] * envelope_data[env_index + 1] + weight_coef[weight_index + 2] * envelope_data[env_index + N_samples] + weight_coef[weight_index + 3] * envelope_data[env_index + N_samples + 1] + 0.5);    ij_index_coef=ij_index_coef + 4;  }}  }
class C{  public SlideOutUnderneathAnimation(View view){  this.view=view;  direction=DIRECTION_LEFT;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  public void updateSize(){  int width=maxWidth();  int height=maxHeight();  log.trace("updateSize() w= {}, h= {} _namedIcon= {}",width,height,_namedIcon);  setSize(width,height);  if (_namedIcon != null && _text) {    setHorizontalTextPosition(CENTER);  }}  }
class C{  @Override public void write(int b) throws IOException {  if (b == '.' && this.statusLast != LAST_WAS_OTHER) {    this.out.write('.');  }  super.write(b);}  }
class C{  public T caseDeclaration(Declaration object){  return null;}  }
class C{  @Override public boolean isConsistent(DatapathId oldSw,OFPort oldPort,DatapathId newSw,OFPort newPort){  return isConsistent(oldSw,oldPort,newSw,newPort,true);}  }
class C{  public static PdxInstance fromJSON(String jsonString){  JsonParser jp=null;  try {    jp=new JsonFactory().createParser(jsonString);    enableJSONParserFeature(jp);    return new JSONFormatter().getPdxInstance(jp,states.NONE,null).getPdxInstance();  } catch (  JsonParseException jpe) {    throw new JSONFormatterException("Could not parse JSON document ",jpe);  }catch (  IOException e) {    throw new JSONFormatterException("Could not parse JSON document: " + jp.getCurrentLocation(),e);  }catch (  Exception e) {    throw new JSONFormatterException("Could not parse JSON document: " + jp.getCurrentLocation(),e);  }}  }
class C{  private void handleHtmlShutdownForm(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String title=servletText.pageTitleShutdown();  if (addTitle(requestAndResponse,title)) {    return;  }  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,title,true).setPaneId("shutdown");  pageWrapper.addHeader();  if (!isUserAnAdmin(requestAndResponse)) {    requestAndResponse.print(servletText.errorPageNotAllowed());  } else {    requestAndResponse.print("<table class=\"nopadding\"><tr><td>");    requestAndResponse.print(servletText.shutdownAreYouSure());    requestAndResponse.print("</td></tr><tr><td>");    requestAndResponse.print("<form action=\"/doShutdown/" + "\" method=\"POST\">" + "<input type=\"hidden\" name=\"csrft\" value=\"" + getCsrft(requestAndResponse) + "\">"+ "<button onclick=\"replacePaneForForm(event, '"+ servletText.pageTitleShutdown()+ "'); return false;\" class=\"specialbutton withTopMargin\">"+ servletText.pageTitleShutdown()+ "</button></form>");    requestAndResponse.print("</td></tr></table>");  }  pageWrapper.addFooter();}  }
class C{  public RecoveryStatus queryNodeRecoveryStatus(){  RecoveryStatus status=new RecoveryStatus();  Configuration cfg=coordinator.getCoordinatorClient().queryConfiguration(Constants.NODE_RECOVERY_STATUS,Constants.GLOBAL_ID);  if (cfg != null) {    String statusStr=cfg.getConfig(RecoveryConstants.RECOVERY_STATUS);    status.setStatus(RecoveryStatus.Status.valueOf(statusStr));    String startTimeStr=cfg.getConfig(RecoveryConstants.RECOVERY_STARTTIME);    if (startTimeStr != null && startTimeStr.length() > 0) {      status.setStartTime(new Date(Long.parseLong(startTimeStr)));    }    String endTimeStr=cfg.getConfig(RecoveryConstants.RECOVERY_ENDTIME);    if (endTimeStr != null && endTimeStr.length() > 0) {      status.setEndTime(new Date(Long.parseLong(endTimeStr)));    }    String errorCodeStr=cfg.getConfig(RecoveryConstants.RECOVERY_ERRCODE);    if (errorCodeStr != null && errorCodeStr.length() > 0) {      status.setErrorCode(RecoveryStatus.ErrorCode.valueOf(errorCodeStr));    }  }  log.info("Recovery status is: {}",status);  return status;}  }
class C{  private Response doRSET(SMTPSession session,String argument){  if ((argument == null) || (argument.length() == 0)) {    session.resetState();    return OK;  } else {    return SYNTAX_ERROR;  }}  }
class C{  public void testTrackPointsTableUpdate_reRegister(){  Capture<ContentObserver> contentObserverCapture=new Capture<ContentObserver>();  dataSource.registerContentObserver(eq(TrackPointsColumns.CONTENT_URI),capture(contentObserverCapture));  FixedSizeLocationIterator locationIterator=new FixedSizeLocationIterator(1,10,5);  expect(myTracksProviderUtils.getTrackPointLocationIterator(eq(TRACK_ID),eq(0L),eq(false),isA(LocationFactory.class))).andReturn(locationIterator);  expect(myTracksProviderUtils.getLastTrackPointId(TRACK_ID)).andReturn(10L);  trackDataListener1.clearTrackPoints();  locationIterator.expectLocationsDelivered(trackDataListener1);  trackDataListener1.onNewTrackPointsDone();  replay();  trackDataHub.start();  trackDataHub.loadTrack(TRACK_ID);  trackDataHub.registerTrackDataListener(trackDataListener1,EnumSet.of(TrackDataType.SAMPLED_IN_TRACK_POINTS_TABLE));  verifyAndReset();  ContentObserver observer=contentObserverCapture.getValue();  dataSource.unregisterContentObserver(observer);  replay();  trackDataHub.unregisterTrackDataListener(trackDataListener1);  verifyAndReset();  dataSource.registerContentObserver(eq(TrackPointsColumns.CONTENT_URI),capture(contentObserverCapture));  locationIterator=new FixedSizeLocationIterator(1,10,5);  expect(myTracksProviderUtils.getTrackPointLocationIterator(eq(TRACK_ID),eq(0L),eq(false),isA(LocationFactory.class))).andReturn(locationIterator);  expect(myTracksProviderUtils.getLastTrackPointId(TRACK_ID)).andReturn(10L);  trackDataListener1.clearTrackPoints();  locationIterator.expectLocationsDelivered(trackDataListener1);  trackDataListener1.onNewTrackPointsDone();  replay();  trackDataHub.registerTrackDataListener(trackDataListener1,EnumSet.of(TrackDataType.SAMPLED_IN_TRACK_POINTS_TABLE));  verifyAndReset();}  }
class C{  public SAXNotSupportedException(String message){  super(message);}  }
class C{  private static IContainer computeOutDir(IDETsconfigJson tsconfig){  CompilerOptions options=tsconfig.getCompilerOptions();  if (options != null) {    String outDir=options.getOutDir();    if (StringUtils.isEmpty(outDir)) {      return null;    }    try {      return tsconfig.getTsconfigFile().getParent().getFolder(new Path(outDir));    } catch (    Throwable e) {      Trace.trace(Trace.SEVERE,"Error while getting compilerOption/outDir",e);    }  }  return null;}  }
class C{  public Set<Value> hasValue(){  return new HashSet<Value>(values);}  }
class C{  public static boolean isActionUp(KeyEvent event){  return event.getAction() == KeyEvent.ACTION_UP;}  }
class C{  public boolean isIncludeSelectCancel(){  return includeSelectCancel;}  }
class C{  public static boolean hasEntryInBetween(List<Integer> list,Integer start,Integer end){  for (  Integer pos : list)   if (start < pos && pos < end)   return true;  return false;}  }
class C{  public RequestHandle head(Context context,String url,Header[] headers,RequestParams params,ResponseHandlerInterface responseHandler){  HttpUriRequest request=new HttpHead(getUrlWithQueryString(isUrlEncodingEnabled,url,params));  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,null,responseHandler,context);}  }
class C{  protected Link createLink(final CommandRequest command){  return createLink(LINK_RELATION,getHttpRequestUrl(command),HttpMethod.POST);}  }
class C{  public static void removeRunable(Runnable runnable){  HANDLER.removeCallbacks(runnable);}  }
class C{  @Override public void putAll(Map<? extends Double,? extends Long> map){  Iterator<? extends Entry<? extends Double,? extends Long>> it=map.entrySet().iterator();  for (int i=map.size(); i-- > 0; ) {    Entry<? extends Double,? extends Long> e=it.next();    this.put(e.getKey(),e.getValue());  }}  }
class C{  public static double MSEfitness(boolean useTrainingData,GEPIndividual ind){  double MSE=MSErawFitness(useTrainingData,ind,0);  return (1000.0) / (1.0 + MSE);}  }
class C{  public ShardRouting relocate(ShardRouting shard,String nodeId,long expectedShardSize){  ensureMutable();  relocatingShards++;  shard.relocate(nodeId,expectedShardSize);  ShardRouting target=shard.buildTargetRelocatingShard();  node(target.currentNodeId()).add(target);  assignedShardsAdd(target);  return target;}  }
class C{  static final public String hex(byte what){  return hex(what,2);}  }
class C{  public void saveElement(DataOutputStream out,Element elem) throws IOException {  out.writeShort(getNameId(elem.getName()));  out.writeByte(elem.getType());  byte flags=0;  if (elem.omitStart()) {    flags|=0x01;  }  if (elem.omitEnd()) {    flags|=0x02;  }  out.writeByte(flags);  saveContentModel(out,elem.getContent());  if (elem.exclusions == null) {    out.writeShort(0);  } else {    short num=0;    for (int i=0; i < elem.exclusions.size(); i++) {      if (elem.exclusions.get(i)) {        num++;      }    }    out.writeShort(num);    for (int i=0; i < elem.exclusions.size(); i++) {      if (elem.exclusions.get(i)) {        out.writeShort(getNameId(getElement(i).getName()));      }    }  }  if (elem.inclusions == null) {    out.writeShort(0);  } else {    short num=0;    for (int i=0; i < elem.inclusions.size(); i++) {      if (elem.inclusions.get(i)) {        num++;      }    }    out.writeShort(num);    for (int i=0; i < elem.inclusions.size(); i++) {      if (elem.inclusions.get(i)) {        out.writeShort(getNameId(getElement(i).getName()));      }    }  }{    short numAtts=0;    for (AttributeList atts=elem.getAttributes(); atts != null; atts=atts.getNext()) {      numAtts++;    }    out.writeByte(numAtts);    for (AttributeList atts=elem.getAttributes(); atts != null; atts=atts.getNext()) {      out.writeShort(getNameId(atts.getName()));      out.writeByte(atts.getType());      out.writeByte(atts.getModifier());      if (atts.getValue() == null) {        out.writeShort(-1);      } else {        out.writeShort(getNameId(atts.getValue()));      }      if (atts.values == null) {        out.writeShort(0);      } else {        out.writeShort((short)atts.values.size());        for (int i=0; i < atts.values.size(); i++) {          String s=(String)atts.values.elementAt(i);          out.writeShort(getNameId(s));        }      }    }  }}  }
class C{  public void addProject(final IProject project,final TFSRepository repository){  Check.notNull(project,"project");  Check.notNull(repository,"repository");  log.debug(MessageFormat.format("Adding project {0} for repository {1}",project.getName(),repository.getName()));  waitForManagerStartup();synchronized (projectDataLock) {    ProjectRepositoryData projectData=projectDataMap.get(project);    if (projectData != null) {      log.error(MessageFormat.format("Project Manager already contains project {0} (when adding)",project.getName()));      CodeMarkerDispatch.dispatch(FINISH_PROJECT_ADDITION);      return;    }    projectData=new ProjectRepositoryData();    projectData.setRepository(repository);    projectDataMap.put(project,projectData);    connectRepository(project,repository);  }  log.info(MessageFormat.format("Project {0} is now managed by TFS",project.getName()));  TFSEclipseClientPlugin.getDefault().getResourceDataManager().addProject(repository,project);  CodeMarkerDispatch.dispatch(FINISH_PROJECT_ADDITION);}  }
class C{  public void addSymbol(TokenizerSymbol symbol){  symbols.add(symbol);}  }
class C{  public final MutableDouble2D rotate(double theta){  final double sinTheta=Math.sin(theta);  final double cosTheta=Math.cos(theta);  final double x=this.x;  final double y=this.y;  this.x=cosTheta * x + -sinTheta * y;  this.y=sinTheta * x + cosTheta * y;  return this;}  }
class C{  public void testMoveDirectorySourceParentRoot() throws Exception {  IgfsPath dir=new IgfsPath("/" + SUBSUBDIR.name());  create(igfs,paths(DIR_NEW,SUBDIR_NEW,dir),null);  igfs.rename(dir,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,new IgfsPath(SUBDIR_NEW,SUBSUBDIR.name()));  checkNotExist(igfs,igfsSecondary,dir);}  }
class C{  final public void enable_tracing(){}  }
class C{  public static BloomFilter read(final IRawStore store,final long addr){  final BloomFilter filter=(BloomFilter)SerializerUtil.deserialize(store.read(addr));  filter.addr=addr;  if (log.isInfoEnabled())   log.info("Read bloom filter: bytesOnDisk=" + store.getByteCount(addr) + ": "+ filter);  return filter;}  }
class C{  public String outputFileTipText(){  return "Set the destination for saving raw output. If the rawOutput " + "option is selected, then output from the splitEvaluator for " + "individual folds is saved. If the destination is a directory, "+ "then each output is saved to an individual gzip file; if the "+ "destination is a file, then each output is saved as an entry "+ "in a zip file.";}  }
class C{  public static <T extends Key<T>>GroupMatcher<T> groupEndsWith(String compareTo){  return new GroupMatcher<T>(compareTo,StringOperatorName.ENDS_WITH);}  }
class C{  public static String createImageFile(String prefix,Properties props,Projection proj,String outputPath) throws MalformedURLException, IOException {  String appendix="";  ImageServer is=new ImageServer(props);  ImageFormatter formatter=is.getFormatter();  if (formatter == null) {    is.setFormatter(new SunJPEGFormatter());    appendix=".jpg";  } else {    String fileType=formatter.getFormatLabel();    if (fileType.equals(WMTConstants.IMAGEFORMAT_JPEG)) {      appendix=".jpg";    } else {      appendix="." + fileType.toLowerCase();    }  }  Color background=MapBean.DEFAULT_BACKGROUND_COLOR;  background=(Color)PropUtils.parseColorFromProperties(props,Environment.BackgroundColor,background);  is.setBackground(background);  if (proj == null) {    ProjectionFactory projFactory=is.getProjectionFactory();    String projName=props.getProperty(Environment.Projection);    Class<? extends Projection> projClass=projFactory.getProjClassForName(projName);    if (projClass == null) {      projClass=Mercator.class;    }    Point2D center=null;    if (GeoProj.class.isAssignableFrom(projClass)) {      center=new LatLonPoint.Float(PropUtils.floatFromProperties(props,Environment.Latitude,0f),PropUtils.floatFromProperties(props,Environment.Longitude,0f));    } else {      center=new Point2D.Float(PropUtils.floatFromProperties(props,Environment.Latitude,0f),PropUtils.floatFromProperties(props,Environment.Longitude,0f));    }    proj=projFactory.makeProjection(projClass,center,PropUtils.floatFromProperties(props,Environment.Scale,MapBean.DEFAULT_SCALE),PropUtils.intFromProperties(props,Environment.Width,MapBean.DEFAULT_WIDTH),PropUtils.intFromProperties(props,Environment.Height,MapBean.DEFAULT_HEIGHT));  }  if (logger.isLoggable(Level.FINE)) {    logger.fine("creating image with projection " + proj);  }  byte[] imageBytes=is.createImage(proj);  String finalOutputPath=outputPath + appendix;  FileOutputStream fos=new FileOutputStream(finalOutputPath);  fos.write(imageBytes);  fos.flush();  fos.close();  return finalOutputPath;}  }
class C{  protected StringBuilder processLine(String nextElement){  StringBuilder sb=new StringBuilder(INITIAL_STRING_SIZE);  for (int j=0; j < nextElement.length(); j++) {    char nextChar=nextElement.charAt(j);    processCharacter(sb,nextChar);  }  return sb;}  }
class C{  @Override public String toString(){  StringBuilder b=new StringBuilder();  toStringBuilder(b);  return b.toString();}  }
class C{  public String toString(){  String result="KK Conditional Estimator. " + m_NumValues + " Normal Kernels:\n"+ "StandardDev = "+ Utils.doubleToString(m_StandardDev,4,2)+ "  \nMeans =";  for (int i=0; i < m_NumValues; i++) {    result+=" (" + m_Values[i] + ", "+ m_CondValues[i]+ ")";    if (!m_AllWeightsOne) {      result+="w=" + m_Weights[i];    }  }  return result;}  }
class C{  public void addCollection(Collection collection){  super.addElement(Collection.KEY,collection);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document docImported;  doc=(Document)load("staffNS",true);{    boolean success=false;    try {      docImported=(Document)doc.importNode(doc,false);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_SUPPORTED_ERR);    }    assertTrue("throw_NOT_SUPPORTED_ERR",success);  }}  }
class C{  LaunchingConnector findLaunchingConnector(){  List<Connector> connectors=Bootstrap.virtualMachineManager().allConnectors();  for (  Connector connector : connectors) {    if (connector.name().equals("com.sun.jdi.CommandLineLaunch")) {      return (LaunchingConnector)connector;    }  }  throw new Error("No launching connector");}  }
class C{  public Response exportPath(@NotNull final String projectPath,@NotNull final String path,String revision) throws IOException, ServerException, UnauthorizedException {  final File project=new File(projectPath);  final List<String> uArgs=defaultArgs();  if (!isNullOrEmpty(revision)) {    addOption(uArgs,"--revision",revision);  }  uArgs.add("--force");  uArgs.add("export");  File tempDir=null;  File zip=null;  try {    tempDir=Files.createTempDir();    final CommandLineResult result=runCommand(null,uArgs,project,Arrays.asList(path,tempDir.getAbsolutePath()));    if (result.getExitCode() != 0) {      LOG.warn("Svn export process finished with exit status {}",result.getExitCode());      throw new ServerException("Export failed");    }    zip=new File(Files.createTempDir(),"export.zip");    ZipUtils.zipDir(tempDir.getPath(),tempDir,zip,IoUtil.ANY_FILTER);  }  finally {    if (tempDir != null) {      IoUtil.deleteRecursive(tempDir);    }  }  final Response.ResponseBuilder responseBuilder=Response.ok(new DeleteOnCloseFileInputStream(zip),MediaType.ZIP.toString()).lastModified(new Date(zip.lastModified())).header(HttpHeaders.CONTENT_LENGTH,Long.toString(zip.length())).header("Content-Disposition","attachment; filename=\"export.zip\"");  return responseBuilder.build();}  }
class C{  public boolean isDecimalPoint(){  if (m_decimalPoint == null) {    DecimalFormatSymbols dfs=new DecimalFormatSymbols(m_locale);    m_decimalPoint=new Boolean(dfs.getDecimalSeparator() == '.');  }  return m_decimalPoint.booleanValue();}  }
class C{  public void ruleComplete(final Tradestrategy tradestrategy){}  }
class C{  public void header(int version,long length2,int twipsWidth,int twipsHeight,int frameRate,int frameCount2) throws IOException {  int frameCount=frameCount2;  long length=length2;  frameSize=new Rect(0,0,twipsWidth,twipsHeight);  if (length < 0 || frameCount < 0) {    this.version=version;    this.rate=frameRate;    this.frameCount=0;    if (filename != null) {      length=0;      frameCount=0;    } else {      if (byteout == null) {        byteout=new ByteArrayOutputStream(20000);        out=new OutStream(byteout);      }      return;    }  }  writeHeader(version,length,frameRate,frameCount);}  }
class C{  private File determineExeForType(String type){  String it=null;  try {    String[] cmd=new String[]{"cmd","/d","/c","ftype",type};    Process p=Runtime.getRuntime().exec(cmd);    LineNumberReader lnr=new LineNumberReader(new InputStreamReader(p.getInputStream()));    String line=null;    type+="=";    while (it == null && (line=lnr.readLine()) != null) {      if (line.length() < type.length() || line.substring(0,type.length()).compareToIgnoreCase(type) == 0) {        it=line;        break;      }    }    p.destroy();    if (it != null) {      int equalSign=it.indexOf('=');      if (equalSign != -1)       it=it.substring(equalSign + 1);      it=extractExenameFromCommandString(it);    }  } catch (  IOException e) {  }  if (it != null)   return new File(it); else   return null;}  }
class C{  private static Object coerceToModelType(FacesContext ctx,Object value,Class toType){  Object newValue;  try {    ExpressionFactory ef=ctx.getApplication().getExpressionFactory();    newValue=ef.coerceToType(value,toType);  } catch (  ELException|IllegalArgumentException ele) {    newValue=value;  }  return newValue;}  }
class C{  protected HARegionQueue createHARegionQueue(String name,HARegionQueueAttributes attrs) throws IOException, ClassNotFoundException, CacheException, InterruptedException {  HARegionQueue regionqueue=HARegionQueue.getHARegionQueueInstance(name,cache,attrs,HARegionQueue.BLOCKING_HA_QUEUE,false);  return regionqueue;}  }
class C{  public boolean equals(Object rhs){  if (rhs != null) {    try {      TransformAttribute that=(TransformAttribute)rhs;      if (transform == null) {        return that.transform == null;      }      return transform.equals(that.transform);    } catch (    ClassCastException e) {    }  }  return false;}  }
class C{  public Source<Double> fromZeroToOne(){  return Compositions.weightWithValues(Doubles.fromZeroToOne(),1d,0d);}  }
class C{  public void reset(){  mRand=new Random(mSeed);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] shapefiles;  int numFiles;  String outputFile;  String shortFileName;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputFile=args[1];  if ((inputFilesString == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  shapefiles=inputFilesString.split(";");  numFiles=shapefiles.length;  if (numFiles < 2) {    showFeedback("At least two input vector files must be specified.");    return;  }  try {    ShapeFile output=null;    DBFWriter writer=null;    FID=0;    for (int k=0; k < numFiles; k++) {      ShapeFile input=new ShapeFile(shapefiles[k]);      shapeType=input.getShapeType();      numRecs=input.getNumberOfRecords();      shortFileName=input.getShortName();      if (shortFileName.length() > 25) {        String tempString=shortFileName.substring(0,24);        shortFileName=tempString;      }      if (k == 0) {        outputShapeType=shapeType;        output=new ShapeFile(outputFile,outputShapeType);        output.setProjectionStringFromOtherShapefile(new ShapeFile(shapefiles[0]));        DBFField fields[]=new DBFField[3];        fields[0]=new DBFField();        fields[0].setName("FID");        fields[0].setDataType(DBFField.DBFDataType.NUMERIC);        fields[0].setFieldLength(10);        fields[0].setDecimalCount(0);        fields[1]=new DBFField();        fields[1].setName("PARENTFILE");        fields[1].setDataType(DBFField.DBFDataType.STRING);        fields[1].setFieldLength(25);        fields[2]=new DBFField();        fields[2].setName("PFILE_ID");        fields[2].setDataType(DBFField.DBFDataType.NUMERIC);        fields[2].setFieldLength(10);        fields[2].setDecimalCount(0);        String DBFName=output.getDatabaseFile();        writer=new DBFWriter(new File(DBFName));        writer.setFields(fields);      }      if (shapeType != outputShapeType) {        showFeedback("This tool can only work when each input shapefile " + "is of the same type.");        return;      }      oneHundredthTotal=numRecs / 100;      progress=0;      n=0;      for (      ShapeFileRecord record : input.records) {        output.addRecord(record.getGeometry());        FID++;        Object[] rowData=new Object[3];        rowData[0]=new Double(FID);        rowData[1]=shortFileName;        rowData[2]=new Double(k + 1);        writer.addRecord(rowData);        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    }    output.write();    writer.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void addMsrpEventListener(MsrpEventListener listener){  mMsrpEventListener=listener;}  }
class C{  public static int computeRawVarint64Size(final long value){  if ((value & (0xffffffffffffffffL << 7)) == 0)   return 1;  if ((value & (0xffffffffffffffffL << 14)) == 0)   return 2;  if ((value & (0xffffffffffffffffL << 21)) == 0)   return 3;  if ((value & (0xffffffffffffffffL << 28)) == 0)   return 4;  if ((value & (0xffffffffffffffffL << 35)) == 0)   return 5;  if ((value & (0xffffffffffffffffL << 42)) == 0)   return 6;  if ((value & (0xffffffffffffffffL << 49)) == 0)   return 7;  if ((value & (0xffffffffffffffffL << 56)) == 0)   return 8;  if ((value & (0xffffffffffffffffL << 63)) == 0)   return 9;  return 10;}  }
class C{  public void removeInvalidRecord(String clientIP){  try {    if (isClientIPExist(clientIP)) {      InterProcessLock lock=null;      try {        lock=_coordinator.getLock(INVALID_LOGIN_CLEANER_LOCK);        lock.acquire();        _log.info("Got ZK lock to remove a record created for invalid logins from this client IP: {}",clientIP);        String zkPath=getZkPath(clientIP);        _distDataManager.removeNode(zkPath);        _log.info("Removed an invalid record entry: {}",zkPath);      } catch (      Exception ex) {        _log.warn("Unexpected exception during db maintenance",ex);      } finally {        if (lock != null) {          try {            lock.release();          } catch (          Exception ex) {            _log.warn("Unexpected exception unlocking the invalid login lock",ex);          }        }      }    } else {      _log.warn("Trying to remove an invalid record entry, the provided client IP is null or empty");    }  } catch (  Exception ex) {    _log.error("Unexpected exception",ex);  }}  }
class C{  private void init(SSLParametersImpl sslParameters) throws IOException {  init(sslParameters,NativeCrypto.getDefaultProtocols(),NativeCrypto.getDefaultCipherSuites());}  }
class C{  public void notify(final QuorumEvent e){  if (log.isInfoEnabled())   log.info(e.toString());switch (e.getEventType()) {case MEMBER_ADD:{      memberAdd(e.getServiceId());      break;    }case MEMBER_REMOVE:{    memberRemove(e.getServiceId());    break;  }case PIPELINE_ADD:{  pipelineAdd(e.getServiceId());  break;}case PIPELINE_REMOVE:{pipelineRemove(e.getServiceId());break;}case CAST_VOTE:{castVote(e.getServiceId(),e.lastCommitTime());break;}case WITHDRAW_VOTE:{withdrawVote(e.getServiceId());break;}case SERVICE_JOIN:{serviceJoin(e.getServiceId());break;}case SERVICE_LEAVE:{serviceLeave(e.getServiceId());break;}case QUORUM_MEET:{setToken(e.lastValidToken());break;}case QUORUM_BROKE:{clearToken();break;}default :log.warn("Ignoring : " + e);}}  }
class C{  public LZ1(){  super(30,2,21,21,1);}  }
class C{  private void cleanUp(FileResult fileResult,File fileOnCancel,String tempMediaPath){  if (fileResult == null) {    Log.w(t,"The user cancelled (or an exception happened) the download of a form at the very beginning.");  } else {    if (fileResult.getFile() != null) {      FileUtils.deleteAndReport(fileResult.getFile());    }  }  if (fileOnCancel != null) {    FileUtils.deleteAndReport(fileOnCancel);  }  if (tempMediaPath != null) {    FileUtils.purgeMediaPath(tempMediaPath);  }}  }
class C{  private void reopenWindows(){  for (  Window window : windowStateManager.getWindows()) {    reopenWindow(window);  }}  }
class C{  Route flipTlsMode(){  return new Route(address,proxy,inetSocketAddress,!modernTls);}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  private void finish(Env<AttrContext> env){  JavaFileObject prev=log.useSource(env.toplevel.sourcefile);  try {    JCClassDecl tree=(JCClassDecl)env.tree;    finishClass(tree,env);  }  finally {    log.useSource(prev);  }}  }
class C{  @Override public void delete(InternalLog log) throws IOException {  final byte[] rowkey=RowkeyHelper.getRowkey(log);  final Delete delete=createDelete(rowkey);  tbl.delete(delete);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static String formatCurrency(BigDecimal price,String isoCode,Locale locale,int maximumFractionDigits){  return formatCurrency(price.doubleValue(),isoCode,locale,maximumFractionDigits);}  }
class C{  public boolean isHighlightable(OMGraphic omg){  return true;}  }
class C{  private static void checkRobustInCircle(Coordinate a,Coordinate b,Coordinate c,Coordinate p){  boolean nonRobustInCircle=isInCircleNonRobust(a,b,c,p);  boolean isInCircleDD=TrianglePredicate.isInCircleDDSlow(a,b,c,p);  boolean isInCircleCC=TrianglePredicate.isInCircleCC(a,b,c,p);  Coordinate circumCentre=Triangle.circumcentre(a,b,c);  System.out.println("p radius diff a = " + Math.abs(p.distance(circumCentre) - a.distance(circumCentre)) / a.distance(circumCentre));  if (nonRobustInCircle != isInCircleDD || nonRobustInCircle != isInCircleCC) {    System.out.println("inCircle robustness failure (double result = " + nonRobustInCircle + ", DD result = "+ isInCircleDD+ ", CC result = "+ isInCircleCC+ ")");    System.out.println(WKTWriter.toLineString(new CoordinateArraySequence(new Coordinate[]{a,b,c,p})));    System.out.println("Circumcentre = " + WKTWriter.toPoint(circumCentre) + " radius = "+ a.distance(circumCentre));    System.out.println("p radius diff a = " + Math.abs(p.distance(circumCentre) / a.distance(circumCentre) - 1));    System.out.println("p radius diff b = " + Math.abs(p.distance(circumCentre) / b.distance(circumCentre) - 1));    System.out.println("p radius diff c = " + Math.abs(p.distance(circumCentre) / c.distance(circumCentre) - 1));    System.out.println();  }}  }
class C{  public static double[][] buildXY(double[] X,double[] Y){  return mergeColumns(X,Y);}  }
class C{  public static URI createURIWithQuery(URI uri,String query) throws URISyntaxException {  String schemeSpecificPart=uri.getRawSchemeSpecificPart();  int questionMark=schemeSpecificPart.lastIndexOf("?");  if (questionMark < schemeSpecificPart.lastIndexOf(")")) {    questionMark=-1;  }  if (questionMark > 0) {    schemeSpecificPart=schemeSpecificPart.substring(0,questionMark);  }  if (query != null && query.length() > 0) {    schemeSpecificPart+="?" + query;  }  return new URI(uri.getScheme(),schemeSpecificPart,uri.getFragment());}  }
class C{  public boolean isUseClientMode(){  return client;}  }
class C{  protected CertificateToken addCertificate(final CertificateToken certificate,final ServiceInfo serviceInfo){  final CertificateToken certToken=certPool.getInstance(certificate,getCertificateSourceType(),serviceInfo);  if (certificateTokens != null) {    if (!certificateTokens.contains(certToken)) {      certificateTokens.add(certToken);    }  }  return certToken;}  }
class C{  public ResourceNotFoundException(String message){  super(message);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int moduleNidToAddress(String modulename,int nid){  HashMap<Integer,Integer> nidToAddress;  Integer address;  nidToAddress=moduleToNidTable.get(modulename);  if (nidToAddress == null) {    return -1;  }  address=nidToAddress.get(nid);  if (address == null) {    return -1;  }  return address.intValue();}  }
class C{  public Version smallestVersion(){  return minNodeVersion;}  }
class C{  public JSONObject(Object bean){  this();  this.populateMap(bean);}  }
class C{  public boolean hasDeleted(){  return hasExtension(Deleted.class);}  }
class C{  @Override public String toString(){  return myFullName;}  }
class C{  public String nodeToString(){  StringBuffer text=new StringBuffer();  System.out.println("In to string");  text.append("Node:\n\tnum inst: " + m_numInstances);  if (m_isLeaf) {    text.append("\n\tleaf");  } else {    text.append("\tnode");  }  text.append("\n\tSplit att: " + m_instances.attribute(m_splitAtt).name());  text.append("\n\tSplit val: " + Utils.doubleToString(m_splitValue,1,3));  text.append("\n\tLM num: " + m_leafModelNum);  text.append("\n\tLinear model\n" + m_nodeModel.toString());  text.append("\n\n");  if (m_left != null) {    text.append(m_left.nodeToString());  }  if (m_right != null) {    text.append(m_right.nodeToString());  }  return text.toString();}  }
class C{  public Utf8Writer(File file,boolean append) throws FileNotFoundException {  this(new FileOutputStream(file,append));}  }
