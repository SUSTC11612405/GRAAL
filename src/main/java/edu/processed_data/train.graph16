class C{  public Pattern ipMustMatchPattern(){  if (this.crawleripmustmatch == null) {    final String r=get(CrawlAttribute.CRAWLER_IP_MUSTMATCH.key);    try {      this.crawleripmustmatch=(r == null || r.equals(CrawlProfile.MATCH_ALL_STRING)) ? CrawlProfile.MATCH_ALL_PATTERN : Pattern.compile(r,Pattern.CASE_INSENSITIVE);    } catch (    final PatternSyntaxException e) {      this.crawleripmustmatch=CrawlProfile.MATCH_NEVER_PATTERN;    }  }  return this.crawleripmustmatch;}  }
class C{  public PostAddToViewEvent(FacesContext facesContext,UIComponent component){  super(facesContext,component);}  }
class C{  @Override protected void reset() throws AdeException {  super.reset();  m_trained=false;  m_rawScores=null;}  }
class C{  public Builder cacheInMemory(){  cacheInMemory=true;  return this;}  }
class C{  public static <E>Set<E> of(E e1,E e2,E e3){  return new ImmutableCollections.SetN<E>(e1,e2,e3);}  }
class C{  public MockResultSetMetaData(Class clazz) throws SQLException {  this.clazz=clazz;  try {    descriptors=Introspector.getBeanInfo(clazz).getPropertyDescriptors();  } catch (  Exception e) {    throw new SQLException(e.getMessage());  }}  }
class C{  public int readBits(int n){  return (int)readBitsLong(n);}  }
class C{  @POST @Path("internal/wakeup/") public Response wakeupManager(@QueryParam("type") String managerType){  if (managerType == null) {    managerType="all";  }switch (managerType) {case "upgrade":    _upgradeManager.wakeup();  break;case "secrets":_secretsManager.wakeup();break;case "property":_propertyManager.wakeup();break;case "vdc":_vdcManager.wakeup();break;default :_upgradeManager.wakeup();_secretsManager.wakeup();_propertyManager.wakeup();_vdcManager.wakeup();}ClusterInfo clusterInfo=_coordinator.getClusterInfo();if (clusterInfo == null) {throw APIException.internalServerErrors.targetIsNullOrEmpty("Cluster info");}_log.debug("Successfully woke up {} manager(s)",managerType);return toClusterResponse(clusterInfo);}  }
class C{  public String toString(){  return "[Style: foreground: " + foreground + ", background: "+ background+ ", underline: "+ underline+ ", font: "+ font+ "]";}  }
class C{  public AttrContextEnv(JCTree tree,AttrContext info){  super(tree,info);}  }
class C{  public static void start(String[] args){  log.info("Starting HSQL database in server mode");  System.out.println("*** STARTING DATABASE ***");  startHsqlServer();  try {    hsql.stop();    while (true) {      hsql.checkRunning(false);      Thread.sleep(200);    }  } catch (  Exception ex) {    startHsqlServer();  }  System.out.println("*** DATABASE STARTED ***");  log.info("Starting Spring Boot application");  new SpringApplicationBuilder(Main.class).headless(false).run(args);}  }
class C{  public void addExtraParameter(String key,String value){  put(key,value,extraParameters);}  }
class C{  public PutIndexTemplateRequest source(XContentBuilder templateBuilder){  try {    return source(templateBuilder.bytes());  } catch (  Exception e) {    throw new IllegalArgumentException("Failed to build json for template request",e);  }}  }
class C{  void waitIfStalled(){  stallControl.waitIfStalled();}  }
class C{  @Override Object implRegister(Path obj,Set<? extends WatchEvent.Kind<?>> events,WatchEvent.Modifier... modifiers){  WindowsPath dir=(WindowsPath)obj;  boolean watchSubtree=false;  for (  WatchEvent.Modifier modifier : modifiers) {    if (modifier == ExtendedWatchEventModifier.FILE_TREE) {      watchSubtree=true;    } else {      if (modifier == null)       return new NullPointerException();      if (modifier instanceof com.sun.nio.file.SensitivityWatchEventModifier)       continue;      return new UnsupportedOperationException("Modifier not supported");    }  }  long handle;  try {    handle=CreateFile(dir.getPathForWin32Calls(),FILE_LIST_DIRECTORY,(FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE),OPEN_EXISTING,FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OVERLAPPED);  } catch (  WindowsException x) {    return x.asIOException(dir);  }  boolean registered=false;  try {    WindowsFileAttributes attrs;    try {      attrs=WindowsFileAttributes.readAttributes(handle);    } catch (    WindowsException x) {      return x.asIOException(dir);    }    if (!attrs.isDirectory()) {      return new NotDirectoryException(dir.getPathForExceptionMessage());    }    FileKey fk=new FileKey(attrs.volSerialNumber(),attrs.fileIndexHigh(),attrs.fileIndexLow());    WindowsWatchKey existing=fk2key.get(fk);    if (existing != null && watchSubtree == existing.watchSubtree()) {      existing.setEvents(events);      return existing;    }    int completionKey=++lastCompletionKey;    if (completionKey == WAKEUP_COMPLETION_KEY)     completionKey=++lastCompletionKey;    try {      CreateIoCompletionPort(handle,port,completionKey);    } catch (    WindowsException x) {      return new IOException(x.getMessage());    }    int size=CHANGES_BUFFER_SIZE + SIZEOF_DWORD + SIZEOF_OVERLAPPED;    NativeBuffer buffer=NativeBuffers.getNativeBuffer(size);    long bufferAddress=buffer.address();    long overlappedAddress=bufferAddress + size - SIZEOF_OVERLAPPED;    long countAddress=overlappedAddress - SIZEOF_DWORD;    UNSAFE.setMemory(overlappedAddress,SIZEOF_OVERLAPPED,(byte)0);    try {      createAndAttachEvent(overlappedAddress);      ReadDirectoryChangesW(handle,bufferAddress,CHANGES_BUFFER_SIZE,watchSubtree,ALL_FILE_NOTIFY_EVENTS,countAddress,overlappedAddress);    } catch (    WindowsException x) {      closeAttachedEvent(overlappedAddress);      buffer.release();      return new IOException(x.getMessage());    }    WindowsWatchKey watchKey;    if (existing == null) {      watchKey=new WindowsWatchKey(dir,watcher,fk).init(handle,events,watchSubtree,buffer,countAddress,overlappedAddress,completionKey);      fk2key.put(fk,watchKey);    } else {      ck2key.remove(existing.completionKey());      releaseResources(existing);      watchKey=existing.init(handle,events,watchSubtree,buffer,countAddress,overlappedAddress,completionKey);    }    ck2key.put(completionKey,watchKey);    registered=true;    return watchKey;  }  finally {    if (!registered)     CloseHandle(handle);  }}  }
class C{  public void addFlower(@Nonnull Block flower,int meta){  addFlower(new BlockKey(flower,meta),new GenericFlowerBlockEntry(flower,meta));}  }
class C{  public void accept(final AnnotationVisitor av){  if (av != null) {    if (values != null) {      for (int i=0; i < values.size(); i+=2) {        String name=(String)values.get(i);        Object value=values.get(i + 1);        accept(av,name,value);      }    }    av.visitEnd();  }}  }
class C{  static public float floatValue(String val) throws java.text.ParseException {  return java.text.NumberFormat.getInstance().parse(val).floatValue();}  }
class C{  @Override public ImmutableSetMultimap<K,V> build(){  if (keyComparator != null) {    Multimap<K,V> sortedCopy=MultimapBuilder.linkedHashKeys().linkedHashSetValues().<K,V>build();    List<Map.Entry<K,Collection<V>>> entries=Ordering.from(keyComparator).<K>onKeys().immutableSortedCopy(builderMultimap.asMap().entrySet());    for (    Map.Entry<K,Collection<V>> entry : entries) {      sortedCopy.putAll(entry.getKey(),entry.getValue());    }    builderMultimap=sortedCopy;  }  return copyOf(builderMultimap,valueComparator);}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  if (extensionValue == null) {    extensionId=PKIXExtensions.IssuerAlternativeName_Id;    critical=false;    encodeThis();  }  super.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  @Override public void reload() throws Exception {  String coreName=(String)evaluateXPath(adminQuery("/admin/cores?action=STATUS"),"//lst[@name='status']/lst[1]/str[@name='name']",XPathConstants.STRING);  String xml=checkAdminResponseStatus("/admin/cores?action=RELOAD&core=" + coreName,"0");  if (null != xml) {    throw new RuntimeException("RELOAD failed:\n" + xml);  }}  }
class C{  static <T>T first(T... ts){  for (  T t : ts) {    if (t != null) {      return t;    }  }  return null;}  }
class C{  private void checkArchiveExists(DbConnection dbConn) throws Exception {  int count;  ArchivesTable table=new ArchivesTable();  DirsTable tableNode=new DirsTable();  if (_logger.isDebugEnabled())   _logger.debug("checkArchiveExists");  try {    count=DbSelectFns.selectCount(dbConn,table.getArchHdrTableName(),table.getCountArchIdQual(_id,_name));    if (count > 0) {      count=DbSelectFns.selectCount(dbConn,tableNode.getNodeTableName(),tableNode.getCountDirNodeQual(_parentId));      if (count > 0)       AdminException.throwException(ArchiveErrorCodes.EC_ARCH_EXITS);    }  } catch (  Exception e) {    _logger.error(e);    throw e;  }}  }
class C{  public JSONObject put(String key,Object value) throws JSONException {  if (key == null) {    throw new NullPointerException("Null key.");  }  if (value != null) {    testValidity(value);    this.map.put(key,value);  } else {    this.remove(key);  }  return this;}  }
class C{  public <Type>Type finishLoading(final String assetPath,final Class<Type> assetClass){  return finishLoading(assetPath,assetClass,null);}  }
class C{  private void checkOpen(){  Assert.state(references.get() > 0,"commit not open");}  }
class C{  public LinuxSyslogMessageReader(AdeInputStream stream,String parseReportFilename,LinuxAdeExtProperties adeExtProperties) throws AdeException {  super(stream);  m_dataFactory=Ade.getAde().getDataFactory();  m_textClusteringComponentModel=Ade.getAde().getActionsFactory().getTextClusteringModel(true);  m_messageTextPreprocessor=new LinuxMessageTextPreprocessor();  m_textClusteringComponentModel.setMessageTextPreprocessor(m_messageTextPreprocessor);  initializeOtherInformation(adeExtProperties,parseReportFilename);}  }
class C{  public static void assertArrayEqual(Object[] expected,Object[] actual){  if (verbose) {    log("assertArrayEqual(" + arrayToString(expected) + ", "+ arrayToString(actual)+ ")");  }  if (expected.length != actual.length) {    TestUtils.assertBool(false);  }  for (int index=0; index < expected.length; ++index) {    assertEqual(expected[index],actual[index]);  }}  }
class C{  public String toString(){  return super.toString() + "<" + lowValue+ ":"+ highValue+ ">";}  }
class C{  public static int dp2px(Context context,int dp){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,context.getResources().getDisplayMetrics());}  }
class C{  public void register(Class type,Label label) throws Exception {  Label cache=new CacheLabel(label);  registerElement(type,cache);  registerText(cache);}  }
class C{  public Checkpoint(String partitionId,String offset,long sequenceNumber){  this.partitionId=partitionId;  this.offset=offset;  this.sequenceNumber=sequenceNumber;}  }
class C{  public static boolean installNormal(Context context,String filePath){  Intent i=new Intent(Intent.ACTION_VIEW);  File file=new File(filePath);  if (file == null || !file.exists() || !file.isFile() || file.length() <= 0) {    return false;  }  i.setDataAndType(Uri.parse("file://" + filePath),"application/vnd.android.package-archive");  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(i);  return true;}  }
class C{  public static String formatStringOrNull(String formatString,Object... args){  for (  Object o : args) {    if (o == null) {      return null;    }  }  return String.format(formatString,args);}  }
class C{  @Override protected void finalize() throws Throwable {  dispose();  super.finalize();}  }
class C{  @Override default <C extends Comparable<? super C>>Optional<T> maxBy(final Function<? super T,? extends C> f){  return reactiveSeq().maxBy(f);}  }
class C{  private static Recharge buildTextRecharge(String title){  Recharge.Amount amount=new Recharge.Amount(50,PlanConstants.TEXT_STEP_AMOUNT);  Recharge.MetaData metaData=new Recharge.MetaData(title,PlanConstants.TEXT_UNIT,R.drawable.text_dark_gray);  return new Recharge(amount,PlanConstants.TEXT_DOLLARS_PER_STEP,metaData);}  }
class C{  public ListenableFuture<PaymentIncrementAck> incrementPayment(Coin size,@Nullable ByteString info,@Nullable KeyParameter userKey) throws ValueOutOfRangeException, IllegalStateException {  return channelClient.incrementPayment(size,info,userKey);}  }
class C{  @Override public void actionPerformed(ActionEvent event){  String group=null;  if (Beans.hasProperty(wi,RosterGroupSelector.SELECTED_ROSTER_GROUP)) {    group=(String)Beans.getProperty(wi,RosterGroupSelector.SELECTED_ROSTER_GROUP);  }  if (group == null) {    group=(String)JOptionPane.showInputDialog(_who,"<html><b>Duplicate roster group</b><br>Select the roster group to duplicate.</html>","Duplicate Roster Group",JOptionPane.INFORMATION_MESSAGE,null,Roster.getDefault().getRosterGroupList().toArray(),null);  }  if (group == null || group.equals(Roster.ALLENTRIES)) {    return;  }  String entry=(String)JOptionPane.showInputDialog(_who,"<html><b>Duplicate roster group</b><br>Enter the name for the new roster group.</html>","Duplicate Roster Group " + group,JOptionPane.INFORMATION_MESSAGE,null,null,null);  if (entry == null || entry.equals(Roster.ALLENTRIES)) {    return;  } else   if (Roster.getDefault().getRosterGroupList().contains(entry)) {    JOptionPane.showMessageDialog(_who,"<html><b>Unable to duplicate roster group</b><br>The roster group named \"" + entry + "\" already exists.","Duplicate Roster Group " + group,JOptionPane.ERROR_MESSAGE);  }  Roster.getDefault().copyRosterGroupList(group,entry);  Roster.getDefault().writeRoster();}  }
class C{  private void checkSetTimes(IgfsPath path) throws Exception {  if (timesSupported()) {    IgfsFile info=igfs.info(path);    T2<Long,Long> secondaryTimes=dual ? igfsSecondary.times(path.toString()) : null;    assert info != null;    igfs.setTimes(path,-1,-1);    IgfsFile newInfo=igfs.info(path);    assert newInfo != null;    assertEquals(info.accessTime(),newInfo.accessTime());    assertEquals(info.modificationTime(),newInfo.modificationTime());    if (dual) {      T2<Long,Long> newSecondaryTimes=igfsSecondary.times(path.toString());      assertEquals(secondaryTimes.get1(),newSecondaryTimes.get1());      assertEquals(secondaryTimes.get2(),newSecondaryTimes.get2());    }    igfs.setTimes(path,info.accessTime() + 1,-1);    newInfo=igfs.info(path);    assert newInfo != null;    assertEquals(info.accessTime() + 1,newInfo.accessTime());    assertEquals(info.modificationTime(),newInfo.modificationTime());    if (dual) {      T2<Long,Long> newSecondaryTimes=igfsSecondary.times(path.toString());      assertEquals(newInfo.accessTime(),(long)newSecondaryTimes.get1());      assertEquals(secondaryTimes.get2(),newSecondaryTimes.get2());    }    igfs.setTimes(path,-1,info.modificationTime() + 1);    newInfo=igfs.info(path);    assert newInfo != null;    assertEquals(info.accessTime() + 1,newInfo.accessTime());    assertEquals(info.modificationTime() + 1,newInfo.modificationTime());    if (dual) {      T2<Long,Long> newSecondaryTimes=igfsSecondary.times(path.toString());      assertEquals(newInfo.accessTime(),(long)newSecondaryTimes.get1());      assertEquals(newInfo.modificationTime(),(long)newSecondaryTimes.get2());    }    igfs.setTimes(path,info.accessTime() + 2,info.modificationTime() + 2);    newInfo=igfs.info(path);    assert newInfo != null;    assertEquals(info.accessTime() + 2,newInfo.accessTime());    assertEquals(info.modificationTime() + 2,newInfo.modificationTime());    if (dual) {      T2<Long,Long> newSecondaryTimes=igfsSecondary.times(path.toString());      assertEquals(newInfo.accessTime(),(long)newSecondaryTimes.get1());      assertEquals(newInfo.modificationTime(),(long)newSecondaryTimes.get2());    }  }}  }
class C{  public void copy(){  build();  isCut=false;}  }
class C{  public static void markBoth(HalfEdge e){  ((MarkHalfEdge)e).mark();  ((MarkHalfEdge)e.sym()).mark();}  }
class C{  public void afterDataRegionCreated(final String indexName,final Analyzer analyzer,final String dataRegionPath,final Map<String,Analyzer> fieldAnalyzers,final String... fields){  LuceneIndexImpl index=createIndexRegions(indexName,dataRegionPath);  index.setSearchableFields(fields);  index.setAnalyzer(analyzer);  index.setFieldAnalyzers(fieldAnalyzers);  index.initialize();  registerIndex(index);  if (this.managementListener != null) {    this.managementListener.afterIndexCreated(index);  }}  }
class C{  public Builder notificationIcon(String value){  notificationParams.put("icon",value);  return this;}  }
class C{  public String serialize(){  return toLockId(socketAddress,shard);}  }
class C{  @Deprecated public static void write(StringBuffer data,Writer output) throws IOException {  if (data != null) {    output.write(data.toString());  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static Path createTempDirectory(Configuration conf) throws IOException {  Path tmpRoot=new Path(conf.get(ConfigurationKeys.DEST_HDFS_TMP));  String uuid=String.format("reair_%d_%s",System.currentTimeMillis(),UUID.randomUUID().toString());  Path tmpDir=new Path(tmpRoot,uuid);  FileSystem fs=tmpDir.getFileSystem(conf);  fs.mkdirs(tmpDir);  LOG.info(String.format("Registering %s to be deleted on exit",tmpDir));  fs.deleteOnExit(tmpDir);  return tmpDir;}  }
class C{  public void addMatrix(double[][] m){  assert (m.length == dim);  assert (m[0].length == dim);  inv=null;  double[][] ht=new double[dim + 1][dim + 1];  for (int i=0; i < dim; i++) {    for (int j=0; j < dim; j++) {      ht[i][j]=m[i][j];    }  }  ht[dim][dim]=1.0;  trans=times(ht,trans);}  }
class C{  public static String[] explode(String s,String delimiter){  int delimiterLength;  int stringLength=s.length();  if (delimiter == null || (delimiterLength=delimiter.length()) == 0) {    return new String[]{s};  }  int count=0;  int start=0;  int end;  while ((end=s.indexOf(delimiter,start)) != -1) {    count++;    start=end + delimiterLength;  }  count++;  String[] result=new String[count];  count=0;  start=0;  while ((end=s.indexOf(delimiter,start)) != -1) {    result[count]=s.substring(start,end);    count++;    start=end + delimiterLength;  }  end=stringLength;  result[count]=s.substring(start,end);  return result;}  }
class C{  private void reflectParametersInView(){  if (frontImageHolder != null) {    frontImageHolder.setImageBitmap(null);    frontImageHolder.setImageBitmap(frontImage);  }  if (backImageHolder != null) {    backImageHolder.setImageBitmap(null);    backImageHolder.setImageBitmap(backImage);  }  if (textHolder != null) {    textHolder.setText(null);    textHolder.setText(text);  }}  }
class C{  public boolean isReadOnly() throws SQLException {  return isReadOnly(true);}  }
class C{  public CDialogEditFunctionNodeComment(final CGraphModel model,final INaviFunctionNode node,final InitialTab initialTab){  super(model.getParent(),"Edit Function Node Comments",true);  new CDialogEscaper(this);  setLayout(new BorderLayout());  m_commentsPanel=new CFunctionCommentsPanel(node.getFunction(),node);  add(m_commentsPanel,BorderLayout.CENTER);  add(new OKButtonPanel(this),BorderLayout.SOUTH);  final Dimension dim=getPreferredSize();  if (dim.height < 300) {    dim.height=300;  }  dim.width=600;  setPreferredSize(dim);  setMinimumSize(dim);  pack();  if (initialTab == InitialTab.GlobalNodeComments) {    m_commentsPanel.focusGlobalField();  } else {    m_commentsPanel.focusLocalField();  }}  }
class C{  public void removeIntersectedLocations(){  repositoryLocations=RepositoryLocation.removeIntersectedLocations(repositoryLocations);}  }
class C{  public static Icon iconStream(String path,String name,String type){  checkNotNull(path);  checkNotNull(name);  checkNotNull(type);  return new Icon(null);}  }
class C{  public DropDownListView(Context context,boolean hijackFocus){  super(context,null,com.android.internal.R.attr.dropDownListViewStyle);  mHijackFocus=hijackFocus;  setCacheColorHint(0);}  }
class C{  public int convertPosition(int position){  return position;}  }
class C{  public RandomPolicyLength(){  super(Harness.options,"Random Policy Length","Sequence length for the random scheduler policy",Integer.valueOf(System.getProperty("mmtk.harness.yieldpolicy.random.length","10")));}  }
class C{  private void validateAndReport(){  if (mapping.getSource() == null) {    return;  }  ExtensionMappingValidator validator=new ExtensionMappingValidator();  ValidationStatus v=validator.validate(mapping,resource,peek,columns);  if (v != null && !v.isValid()) {    if (v.getIdProblem() != null) {      addActionWarning(getText(v.getIdProblem(),v.getIdProblemParams()));    }    for (    Term t : v.getMissingRequiredFields()) {      addActionWarning(getText("validation.required",new String[]{t.simpleName()}));    }    for (    Term t : v.getWrongDataTypeFields()) {      addActionWarning(getText("validation.wrong.datatype",new String[]{t.simpleName()}));    }    for (    String columnName : v.getMultipleTranslationsForSameColumn()) {      addActionError(getText("validation.column.multipleTranslations",new String[]{columnName}));    }  }}  }
class C{  public void paintRootPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'ADDRESS_ITEM' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'NAME' TEXT,"+ "'ADDRESS' TEXT,"+ "'CITY' TEXT,"+ "'STATE' TEXT,"+ "'PHONE' INTEGER);");}  }
class C{  public void onInsnsChanged(){  definitionList=null;  useList=null;  unmodifiableUseList=null;}  }
class C{  public BuildImageParams withForceRemoveIntermediateContainers(boolean forceRemoveIntermediateContainers){  this.forceRemoveIntermediateContainers=forceRemoveIntermediateContainers;  return this;}  }
class C{  @Override public int hashCode(){  return mainAttributes.hashCode() ^ getEntries().hashCode();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.114 -0500",hash_original_method="7094DD5A86271DA7E952B216F4C46CCD",hash_generated_method="39D9BB8A59FFD02C0A407B280CB1B697") private void transitionToCommitted(int loadType,boolean isMainFrame){  if (isMainFrame) {    mCommitted=true;    mWebViewCore.getWebView().mViewManager.postResetStateAll();  }}  }
class C{  public static IStatus validatePackageName(String name){  return validatePackageName(name,CompilerOptions.VERSION_1_3,CompilerOptions.VERSION_1_3);}  }
class C{  protected final void checkMainThread(){  if (Looper.getMainLooper().getThread() != Thread.currentThread()) {    throw new RuntimeException("Should run on main thread.");  }}  }
class C{  public Graph<T> toWorker(){  return to(new ThreadNode<>(false));}  }
class C{  static private int assertEntryCount(final long entryCount){  if (entryCount >= Integer.MAX_VALUE)   throw new UnsupportedOperationException("More than GT MAX_INT tuples: n=" + entryCount);  return (int)entryCount;}  }
class C{  public void testConstrCharMathContext(){  char[] biCA="12345678901234567890123456789012345.0E+10".toCharArray();  char[] nbiCA="-12345678901234567890123456789012345.E+10".toCharArray();  BigDecimal bd;  MathContext mc;  mc=new MathContext(31,RoundingMode.UP);  bd=new BigDecimal(biCA,mc);  assertEquals("incorrect value","1.234567890123456789012345678902E+44",bd.toString());  bd=new BigDecimal(nbiCA,mc);  assertEquals("incorrect value","-1.234567890123456789012345678902E+44",bd.toString());  mc=new MathContext(28,RoundingMode.DOWN);  bd=new BigDecimal(biCA,mc);  assertEquals("incorrect value","1.234567890123456789012345678E+44",bd.toString());  bd=new BigDecimal(nbiCA,mc);  assertEquals("incorrect value","-1.234567890123456789012345678E+44",bd.toString());  mc=new MathContext(33,RoundingMode.CEILING);  bd=new BigDecimal(biCA,mc);  assertEquals("incorrect value","1.23456789012345678901234567890124E+44",bd.toString());  bd=new BigDecimal(nbiCA,mc);  assertEquals("incorrect value","-1.23456789012345678901234567890123E+44",bd.toString());  mc=new MathContext(34,RoundingMode.UNNECESSARY);  try {    bd=new BigDecimal(biCA,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }  try {    bd=new BigDecimal(nbiCA,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }}  }
class C{  @Override public void addTouchables(@NonNull ArrayList<View> views){  for (int i=0; i < getChildCount(); i++) {    final View child=getChildAt(i);    if (child.getVisibility() == VISIBLE) {      ItemInfo ii=infoForChild(child);      if (ii != null && ii.position == currentItem) {        child.addTouchables(views);      }    }  }}  }
class C{  public ServiceCompatibilityException(){}  }
class C{  public SingleParentMemorySubjectData(PermissionService service){  super(service);}  }
class C{  public void printContext(PrintStream out){  out.println(getMessage());  out.print(context);}  }
class C{  void handleError(@NotNull Throwable throwable,StatusNotification notification,GitOutputConsole console){  notification.setStatus(FAIL);  if (throwable instanceof UnauthorizedException) {    console.printError(constant.messagesNotAuthorized());    notification.setTitle(constant.messagesNotAuthorized());    return;  }  String errorMessage=throwable.getMessage();  if (errorMessage == null) {    console.printError(constant.pushFail());    notification.setTitle(constant.pushFail());    return;  }  try {    errorMessage=dtoFactory.createDtoFromJson(errorMessage,ServiceError.class).getMessage();    if (errorMessage.equals("Unable get private ssh key")) {      console.printError(constant.messagesUnableGetSshKey());      notification.setTitle(constant.messagesUnableGetSshKey());      return;    }    console.printError(errorMessage);    notification.setTitle(errorMessage);  } catch (  Exception e) {    console.printError(errorMessage);    notification.setTitle(errorMessage);  }}  }
class C{  @SuppressWarnings("unchecked") private void mergeAt(int i){  if (DEBUG)   assert stackSize >= 2;  if (DEBUG)   assert i >= 0;  if (DEBUG)   assert i == stackSize - 2 || i == stackSize - 3;  int base1=runBase[i];  int len1=runLen[i];  int base2=runBase[i + 1];  int len2=runLen[i + 1];  if (DEBUG)   assert len1 > 0 && len2 > 0;  if (DEBUG)   assert base1 + len1 == base2;  runLen[i]=len1 + len2;  if (i == stackSize - 3) {    runBase[i + 1]=runBase[i + 2];    runLen[i + 1]=runLen[i + 2];  }  stackSize--;  int k=gallopRight((Comparable<Object>)a[base2],a,base1,len1,0);  if (DEBUG)   assert k >= 0;  base1+=k;  len1-=k;  if (len1 == 0)   return;  len2=gallopLeft((Comparable<Object>)a[base1 + len1 - 1],a,base2,len2,len2 - 1);  if (DEBUG)   assert len2 >= 0;  if (len2 == 0)   return;  if (len1 <= len2)   mergeLo(base1,len1,base2,len2); else   mergeHi(base1,len1,base2,len2);}  }
class C{  public void removeDivider(int divId) throws Exception {  checkDividerNoHasChildren(divId);  m_dividers.removeNode(divId);}  }
class C{  public static InputStream streamFromString(String location) throws IOException {  InputStream is=null;  URL url=urlFromString(location,null,false);  if (url != null) {    is=url.openStream();  } else {    File f=new File(location);    if (f.exists())     is=new FileInputStream(f);  }  if (is == null) {    return null;  } else   if (isGZipFile(location)) {    return new GZIPInputStream(is);  } else {    return is;  }}  }
class C{  public void requestUpdateFromLayout(){}  }
class C{  public ComparisonFailure(String message,String expected,String actual){  super(message);  fExpected=expected;  fActual=actual;}  }
class C{  protected void paintHorizontalPartOfLeg(Graphics g,Rectangle clipBounds,Insets insets,Rectangle bounds,TreePath path,int row,boolean isExpanded,boolean hasBeenExpanded,boolean isLeaf){  if (!paintLines) {    return;  }  int depth=path.getPathCount() - 1;  if ((depth == 0 || (depth == 1 && !isRootVisible())) && !getShowsRootHandles()) {    return;  }  int clipLeft=clipBounds.x;  int clipRight=clipBounds.x + clipBounds.width;  int clipTop=clipBounds.y;  int clipBottom=clipBounds.y + clipBounds.height;  int lineY=bounds.y + bounds.height / 2;  if (leftToRight) {    int leftX=bounds.x - getRightChildIndent();    int nodeX=bounds.x - getHorizontalLegBuffer();    if (lineY >= clipTop && lineY < clipBottom && nodeX >= clipLeft && leftX < clipRight && leftX < nodeX) {      g.setColor(getHashColor());      paintHorizontalLine(g,tree,lineY,leftX,nodeX - 1);    }  } else {    int nodeX=bounds.x + bounds.width + getHorizontalLegBuffer();    int rightX=bounds.x + bounds.width + getRightChildIndent();    if (lineY >= clipTop && lineY < clipBottom && rightX >= clipLeft && nodeX < clipRight && nodeX < rightX) {      g.setColor(getHashColor());      paintHorizontalLine(g,tree,lineY,nodeX,rightX - 1);    }  }}  }
class C{  @Override public void onEntered(final ActiveEntity entity,final StendhalRPZone zone,final int newX,final int newY){  if (entity instanceof Player) {    if (entity.isGhost()) {      return;    }    final Player occupant=getOccupant();    if ((occupant != null) && (occupant != entity)) {      if (occupant.isGhost()) {        clearOccupant();      }      LOGGER.error("Existing occupant: " + occupant.getName(),new Throwable());    }    setOccupant((Player)entity);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.ITERATION_STATEMENT__STATEMENT:    return getStatement();case N4JSPackage.ITERATION_STATEMENT__EXPRESSION:  return getExpression();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public FieldAction(String name){  super(I18n.tr(name));}  }
class C{  public static long[] toLongArray(int[] array){  long[] result=new long[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(long)array[i];  }  return result;}  }
class C{  public TaskAttemptID attemptId(){  TaskID tid=new TaskID(jobCtx.getJobID(),taskType(taskInfo().type()),taskInfo().taskNumber());  return new TaskAttemptID(tid,taskInfo().attempt());}  }
class C{  public boolean hasContentType(){  return getContentType() != null;}  }
class C{  protected void fireSettingsEvent(EventType type){  fireSettingsEvent(new SettingsGroupEvent(type,this));}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  static boolean validateServiceOptions(ServiceHost host,Service service,Operation post){  for (  ServiceOption o : service.getOptions()) {    String error=Utils.validateServiceOption(service.getOptions(),o);    if (error != null) {      host.log(Level.WARNING,error);      post.fail(new IllegalArgumentException(error));      return false;    }  }  if (service.getMaintenanceIntervalMicros() > 0 && service.getMaintenanceIntervalMicros() < host.getMaintenanceIntervalMicros()) {    host.log(Level.WARNING,"Service maint. interval %d is less than host interval %d, reducing host interval",service.getMaintenanceIntervalMicros(),host.getMaintenanceIntervalMicros());    host.setMaintenanceIntervalMicros(service.getMaintenanceIntervalMicros());  }  return true;}  }
class C{  public void testFindAppDeployments() throws Exception {  WAR war=createWar();  testConfigWar();  List<Element> l=deployer.selectAppDeployments(war,domain);  assertEquals(1,l.size());  deployer.removeDeployableFromDomain(war,domain);  l=deployer.selectAppDeployments(war,domain);  assertEquals(0,l.size());}  }
class C{  private final void treeifyBin(Node<V>[] tab,int index){  Node<V> b;  int n, sc;  if (tab != null) {    if ((n=tab.length) < MIN_TREEIFY_CAPACITY)     tryPresize(n << 1); else     if ((b=tabAt(tab,index)) != null && b.hash >= 0) {synchronized (b) {        if (tabAt(tab,index) == b) {          TreeNode<V> hd=null, tl=null;          for (Node<V> e=b; e != null; e=e.next) {            TreeNode<V> p=new TreeNode<V>(e.hash,e.key,null,null);            if ((p.prev=tl) == null)             hd=p; else             tl.next=p;            tl=p;          }          setTabAt(tab,index,new TreeBin<V>(hd));        }      }    }  }}  }
class C{  public void loadByteArray(){  int length=0;  for (int i=0; i < ops.size(); i++) {    length+=ops.get(i).totalLength();  }  buffer=new byte[length];  log.debug("create buffer of length " + length);  resetIndex();  for (int i=0; i < ops.size(); i++) {    ops.get(i).loadByteArray(this);  }  if (index != length) {    log.error("Lengths did not match: " + index + " "+ length);  }}  }
class C{  public void endDocument() throws IOException {  writer.flush();}  }
class C{  public void refine(RVMMethod target){  this.target=target;  setPreciseTarget();}  }
class C{  @SuppressWarnings("PMD.AvoidCatchingThrowable") private void print(final Request req,final OutputStream output) throws IOException {  try {    new RsPrint(this.take.act(req)).print(output);  } catch (  final HttpException ex) {    new RsPrint(BkBasic.failure(ex,ex.code())).print(output);  }catch (  final Throwable ex) {    new RsPrint(BkBasic.failure(ex,HttpURLConnection.HTTP_INTERNAL_ERROR)).print(output);  }}  }
class C{  public void append(Value v){  if (length == items.length) {    Value[] t=new Value[length * 2];    System.arraycopy(items,0,t,0,length);    items=t;  }  items[length++]=v;}  }
class C{  public static String parseCharset(Map<String,String> headers,String defaultCharset){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return defaultCharset;}  }
class C{  public synchronized long time(){  if (startNanoTime == 0) {    return 0;  }  if (time >= 0) {    return time;  }  return Math.max(0,TimeValue.nsecToMSec(System.nanoTime() - startNanoTime));}  }
class C{  public Subtract(){  super(Number.class,Number.class,Number.class);}  }
class C{  public RandomBallCoverOneShot(List<V> vecs,DistanceMetric dm,ExecutorService execServ){  this(vecs,dm,(int)Math.sqrt(vecs.size()),execServ);}  }
class C{  public static Builder createBuilder(Header header,WritableFontData data){  return new Builder(header,data);}  }
class C{  public JCExpression Create(Symbol ctor,List<JCExpression> args){  Type t=ctor.owner.erasure(types);  JCNewClass newclass=NewClass(null,null,Type(t),args,null);  newclass.constructor=ctor;  newclass.setType(t);  return newclass;}  }
class C{  protected void writeChunk(byte buffer[],int offset,int length) throws IOException {  this.out.write(buffer,offset,length);}  }
class C{  public static String logoBasePath(){  final HttpServletRequest request=ServletActionContext.getRequest();  final String url=WebUtils.extractRequestDomainURL(request,false);  final String imagePath=url.concat(ReportConstants.IMAGE_CONTEXT_PATH).concat((String)request.getSession().getAttribute("citylogo"));  return imagePath;}  }
class C{  public boolean containsTarget(Object target,int tweenType){  for (int i=0, n=objects.size(); i < n; i++) {    BaseTween<?> obj=objects.get(i);    if (obj.containsTarget(target,tweenType))     return true;  }  return false;}  }
class C{  protected int scanEntity(final char[] a,final int offset,final int length,final boolean loose,final MutableString entity){  int i, c=0;  String tmpEntity;  if (length < 2)   return -1;  if (a[offset + 1] == '#') {    if (length > 2 && a[offset + 2] == 'x') {      for (i=3; i < length && i < MAX_HEX_ENTITY_LENGTH && Character.digit(a[i + offset],HEXADECIMAL) != -1; i++)       ;      tmpEntity=new String(a,offset + 3,i - 3);      if (i != 3)       c=Integer.parseInt(tmpEntity,HEXADECIMAL);    } else {      for (i=2; i < length && i < MAX_DEC_ENTITY_LENGTH && Character.isDigit(a[i + offset]); i++)       ;      tmpEntity=new String(a,offset + 2,i - 2);      if (i != 2)       c=Integer.parseInt(tmpEntity);    }    if (c > 0 && c < MAX_ENTITY_VALUE) {      lastEntity=(char)c;      if (i < length && a[i + offset] == ';')       i++;      return i + offset;    }  } else {    if (Character.isLetter(a[offset + 1])) {      for (i=2; i < length && Character.isLetterOrDigit(a[offset + i]); i++)       ;      if (i != 1 && (loose || (i < length && (Character.isWhitespace(a[offset + i]) || a[offset + i] == ';'))) && (lastEntity=entity2Char(entity.length(0).append(a,offset + 1,i - 1))) != 0) {        if (i < length && a[i + offset] == ';')         i++;        return i + offset;      }    }  }  return -1;}  }
class C{  public DateStart(Date startDate){  super(startDate);}  }
class C{  void initialize(){  jLabel5=new JLabel();  GridBagConstraints gridBagConstraints28=new GridBagConstraints();  GridBagConstraints gridBagConstraints37=new GridBagConstraints();  jLabel10=new JLabel();  GridBagConstraints gridBagConstraints45=new GridBagConstraints();  jLabel6=new JLabel();  jLabel3=new JLabel();  jLabel2=new JLabel();  jLabel1=new JLabel();  jLabel=new JLabel();  GridBagConstraints gridBagConstraints1=new GridBagConstraints();  GridBagConstraints gridBagConstraints2=new GridBagConstraints();  GridBagConstraints gridBagConstraints4=new GridBagConstraints();  GridBagConstraints gridBagConstraints5=new GridBagConstraints();  GridBagConstraints gridBagConstraints6=new GridBagConstraints();  GridBagConstraints gridBagConstraints7=new GridBagConstraints();  GridBagConstraints gridBagConstraints8=new GridBagConstraints();  GridBagConstraints gridBagConstraints9=new GridBagConstraints();  GridBagConstraints gridBagConstraints10=new GridBagConstraints();  GridBagConstraints gridBagConstraints11=new GridBagConstraints();  GridBagConstraints gridBagConstraints25=new GridBagConstraints();  GridBagConstraints gridBagConstraints26=new GridBagConstraints();  GridBagConstraints gridBagConstraints35=new GridBagConstraints();  GridBagConstraints gridBagConstraints36=new GridBagConstraints();  this.setLayout(new GridBagLayout());  this.setSize(975,300);  this.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));  gridBagConstraints1.gridx=1;  gridBagConstraints1.gridy=2;  gridBagConstraints1.gridheight=1;  gridBagConstraints1.gridwidth=1;  gridBagConstraints1.anchor=java.awt.GridBagConstraints.WEST;  jLabel.setText("# Generations:");  gridBagConstraints2.gridx=2;  gridBagConstraints2.gridy=2;  gridBagConstraints2.fill=java.awt.GridBagConstraints.HORIZONTAL;  gridBagConstraints2.weightx=0.0D;  gridBagConstraints2.insets=new java.awt.Insets(0,5,0,0);  gridBagConstraints2.ipadx=30;  gridBagConstraints4.gridx=1;  gridBagConstraints4.gridy=6;  gridBagConstraints4.anchor=java.awt.GridBagConstraints.WEST;  gridBagConstraints4.gridwidth=2;  gridBagConstraints5.gridx=1;  gridBagConstraints5.gridy=0;  gridBagConstraints5.anchor=java.awt.GridBagConstraints.NORTHWEST;  jLabel1.setText("# Jobs:");  gridBagConstraints6.gridx=2;  gridBagConstraints6.gridy=0;  gridBagConstraints6.fill=java.awt.GridBagConstraints.HORIZONTAL;  gridBagConstraints6.insets=new java.awt.Insets(0,5,0,0);  gridBagConstraints6.anchor=java.awt.GridBagConstraints.NORTHWEST;  gridBagConstraints6.gridwidth=1;  gridBagConstraints7.gridx=1;  gridBagConstraints7.gridy=3;  gridBagConstraints7.anchor=java.awt.GridBagConstraints.WEST;  jLabel2.setText("# Evaluation Threads:");  gridBagConstraints8.gridx=1;  gridBagConstraints8.gridy=4;  gridBagConstraints8.anchor=java.awt.GridBagConstraints.WEST;  gridBagConstraints8.gridwidth=1;  jLabel3.setText("# Breeder Threads:");  gridBagConstraints9.gridx=2;  gridBagConstraints9.gridy=3;  gridBagConstraints9.fill=java.awt.GridBagConstraints.HORIZONTAL;  gridBagConstraints9.insets=new java.awt.Insets(0,5,0,0);  gridBagConstraints10.gridx=2;  gridBagConstraints10.gridy=4;  gridBagConstraints10.fill=java.awt.GridBagConstraints.HORIZONTAL;  gridBagConstraints10.insets=new java.awt.Insets(0,5,0,0);  gridBagConstraints11.gridx=11;  gridBagConstraints11.gridy=0;  gridBagConstraints11.gridwidth=6;  gridBagConstraints11.fill=java.awt.GridBagConstraints.BOTH;  gridBagConstraints11.gridheight=13;  gridBagConstraints11.weightx=1.0D;  gridBagConstraints25.gridx=1;  gridBagConstraints25.gridy=5;  gridBagConstraints25.anchor=java.awt.GridBagConstraints.WEST;  gridBagConstraints25.insets=new java.awt.Insets(0,0,0,0);  jLabel6.setText("Verbosity:");  gridBagConstraints26.gridx=2;  gridBagConstraints26.gridy=5;  gridBagConstraints26.fill=java.awt.GridBagConstraints.HORIZONTAL;  gridBagConstraints26.anchor=java.awt.GridBagConstraints.WEST;  gridBagConstraints26.weightx=0.0D;  gridBagConstraints26.insets=new java.awt.Insets(0,5,0,0);  gridBagConstraints26.ipadx=30;  gridBagConstraints35.gridx=1;  gridBagConstraints35.gridy=7;  gridBagConstraints35.anchor=java.awt.GridBagConstraints.WEST;  gridBagConstraints35.gridwidth=2;  gridBagConstraints35.gridheight=1;  gridBagConstraints36.gridx=1;  gridBagConstraints36.gridy=8;  gridBagConstraints36.gridheight=1;  gridBagConstraints36.gridwidth=3;  gridBagConstraints36.anchor=java.awt.GridBagConstraints.NORTH;  gridBagConstraints36.ipadx=107;  gridBagConstraints45.gridx=5;  gridBagConstraints45.gridy=8;  gridBagConstraints45.weighty=1.0D;  jLabel10.setText("");  gridBagConstraints28.gridx=1;  gridBagConstraints28.gridy=1;  gridBagConstraints28.anchor=java.awt.GridBagConstraints.WEST;  jLabel5.setText("Job file prefix:");  gridBagConstraints37.gridx=2;  gridBagConstraints37.gridy=1;  gridBagConstraints37.fill=java.awt.GridBagConstraints.HORIZONTAL;  gridBagConstraints37.insets=new java.awt.Insets(0,5,0,0);  gridBagConstraints37.gridwidth=3;  this.add(jLabel,gridBagConstraints1);  this.add(getNumGensField(),gridBagConstraints2);  this.add(getQuitOnRunCompleteCheckbox(),gridBagConstraints4);  this.add(jLabel1,gridBagConstraints5);  this.add(getNumJobsField(),gridBagConstraints6);  this.add(jLabel2,gridBagConstraints7);  this.add(jLabel3,gridBagConstraints8);  this.add(getEvalThreadsField(),gridBagConstraints9);  this.add(getBreedThreadsField(),gridBagConstraints10);  this.add(getJPanel(),gridBagConstraints11);  this.add(jLabel6,gridBagConstraints25);  this.add(getCheckpointCheckBox(),gridBagConstraints35);  this.add(getCheckpointPanel(),gridBagConstraints36);  this.add(jLabel10,gridBagConstraints45);  this.add(jLabel5,gridBagConstraints28);  this.add(getJobFilePrefixField(),gridBagConstraints37);  this.add(Box.createRigidArea(new Dimension(5,0)));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:21.694 -0500",hash_original_method="6C3907764C0BC2109F0045771A33B621",hash_generated_method="FC81C9DD59488DDB92951F61D633C0C4") public final CharSequence coerceToString(){  int t=type;  if (t == TYPE_STRING) {    return string;  }  return coerceToString(t,data);}  }
class C{  public AttributeList(AttributeList list){  super(list);}  }
class C{  public String useAverageTipText(){  return "If true, average estimates are used instead of one estimate from pooled predictions.";}  }
class C{  public BufferCapabilities(ImageCapabilities frontCaps,ImageCapabilities backCaps,FlipContents flipContents){  if (frontCaps == null || backCaps == null) {    throw new IllegalArgumentException("Image capabilities specified cannot be null");  }  this.frontCaps=frontCaps;  this.backCaps=backCaps;  this.flipContents=flipContents;}  }
class C{  protected ShaderVar addGlobal(IGlobalShaderVar var){  return addGlobal(var.getVarString(),var.getDataType());}  }
class C{  protected ArrayDBIDs affectedRkNN(List<? extends Collection<DoubleDBIDPair>> extract,DBIDs remove){  HashSetModifiableDBIDs ids=DBIDUtil.newHashSet();  for (  Collection<DoubleDBIDPair> drps : extract) {    for (    DoubleDBIDPair drp : drps) {      ids.add(drp);    }  }  ids.removeDBIDs(remove);  return DBIDUtil.newArray(ids);}  }
class C{  private FrequencyDistribution<String> createFreqDistForMiscFile(File misc) throws IOException {  BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(misc),outputEncoding));  FrequencyDistribution<String> letterFD=new FrequencyDistribution<String>();  String readLine=null;  while ((readLine=reader.readLine()) != null) {    int indexOfTab=readLine.indexOf(TAB);    String key=getStartingLetters(readLine,indexOfTab);    letterFD.addSample(key,1);  }  reader.close();  return letterFD;}  }
class C{  public static boolean isNonPublicProxyClass(Class<?> cls){  String name=cls.getName();  int i=name.lastIndexOf('.');  String pkg=(i != -1) ? name.substring(0,i) : "";  return Proxy.isProxyClass(cls) && !pkg.equals(PROXY_PACKAGE);}  }
class C{  public BigInteger findDeviceState(){  return new BigInteger("2");}  }
class C{  public String numCyclesTipText(){  return "The number of cycles to use (in combination with the 'Sine' pattern).";}  }
class C{  public MultiStatus(String pluginId,int code,String message,Throwable exception){  super(OK,pluginId,code,message,exception);  children=new IStatus[0];}  }
class C{  public CustomToken(int start,int end,IElementType type){  tokenStart=start;  tokenEnd=end;  tokenType=type;}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  java.lang.CloneNotSupportedException e) {    throw new RuntimeException(e.toString());  }}  }
class C{  void advanceTo(DateValue newStartUtc){  it.advanceTo(newStartUtc);}  }
class C{  public boolean isEmpty(){  return fMap.isEmpty();}  }
class C{  public boolean isActive(){  return active;}  }
class C{  public RequestCreator resize(int targetWidth,int targetHeight){  data.resize(targetWidth,targetHeight);  return this;}  }
class C{  public void testInit(){}  }
class C{  public static <T>ResponseOrError<T> fromData(@Nonnull T data){  return new ResponseOrError<>(checkNotNull(data),null);}  }
class C{  @SuppressWarnings("unchecked") public static <E>String serialize(E object) throws IOException {  return mapperFor((Class<E>)object.getClass()).serialize(object);}  }
class C{  public void addDocument(String referenceURI,Transforms trans) throws XMLSignatureException {  this.signedInfo.addDocument(this.baseURI,referenceURI,trans,Constants.ALGO_ID_DIGEST_SHA1,null,null);}  }
class C{  public ResolutionSyntax(int crossFeedResolution,int feedResolution,int units){  if (crossFeedResolution < 1) {    throw new IllegalArgumentException("crossFeedResolution is < 1");  }  if (feedResolution < 1) {    throw new IllegalArgumentException("feedResolution is < 1");  }  if (units < 1) {    throw new IllegalArgumentException("units is < 1");  }  this.crossFeedResolution=crossFeedResolution * units;  this.feedResolution=feedResolution * units;}  }
class C{  @Override public void onDestroy(){  super.onDestroy();  Log.d(LOG_TAG,"Removing location listeners");  stopListeners();  Toast.makeText(this,"Tracking service stopped",Toast.LENGTH_SHORT);}  }
class C{  @Override protected void prepareView(){  ExtendedMapAgentView mEnv=(ExtendedMapAgentView)frame.getEnvView();  mEnv.setData(scenario,destinations,null);  mEnv.setEnvironment(scenario.getEnv());}  }
class C{  public ManifestParser(){  parser=new JSONParser();  findHome();}  }
class C{  @Override public String initialize(){  String result;  result=super.initialize();  if (result == null) {    m_Statistics.clear();    if (m_File.exists()) {      log("File '" + m_File + "' exists, loading...");      m_Statistics.addAll(read());    }  }  return result;}  }
class C{  private void updateSeekBarsForSpringConfig(SpringConfig springConfig){  float tension=(float)OrigamiValueConverter.origamiValueFromTension(springConfig.tension);  float tensionRange=MAX_TENSION - MIN_TENSION;  int scaledTension=Math.round(((tension - MIN_TENSION) * MAX_SEEKBAR_VAL) / tensionRange);  float friction=(float)OrigamiValueConverter.origamiValueFromFriction(springConfig.friction);  float frictionRange=MAX_FRICTION - MIN_FRICTION;  int scaledFriction=Math.round(((friction - MIN_FRICTION) * MAX_SEEKBAR_VAL) / frictionRange);  mTensionSeekBar.setProgress(scaledTension);  mFrictionSeekBar.setProgress(scaledFriction);}  }
class C{  public Bag removeObjectsAtLocation(final Object location){  Bag objs=(Bag)objectHash.remove(location);  if (objs != null)   for (int j=0; j < objs.numObjs; j++) {    LocationAndIndex lai=(LocationAndIndex)(locationAndIndexHash.remove(objs.objs[j]));    assert sim.util.LocationLog.it(this,lai.location);    allObjects.remove(lai.index);    if (allObjects.numObjs > lai.index)     ((LocationAndIndex)(locationAndIndexHash.get(allObjects.objs[lai.index]))).index=lai.index;  }  return objs;}  }
class C{  public List<RawProperty> removeExtendedProperty(String name){  List<RawProperty> all=getExtendedProperties();  List<RawProperty> toRemove=new ArrayList<RawProperty>();  for (  RawProperty property : all) {    if (property.getPropertyName().equalsIgnoreCase(name)) {      toRemove.add(property);    }  }  all.removeAll(toRemove);  return Collections.unmodifiableList(toRemove);}  }
class C{  public void deleteInstanceAt(int rowIndex){  deleteInstanceAt(rowIndex,true);}  }
class C{  public DeltaInputStream(InputStream in,int distance){  if (in == null)   throw new NullPointerException();  this.in=in;  this.delta=new DeltaDecoder(distance);}  }
class C{  public static GdbDelete parse(GdbOutput gdbOutput) throws GdbParseException {  String output=gdbOutput.getOutput();  Matcher matcher=GDB_DELETE.matcher(output);  if (matcher.find()) {    return new GdbDelete();  }  throw new GdbParseException(GdbDelete.class,output);}  }
class C{  static public void removeNotificationListener(JMXConnector jmxConnector,Class<?> mbeanInterface,String mbeanName,NotificationListener notificationListener,boolean ignored) throws Exception {  MBeanServerConnection mbsc=jmxConnector.getMBeanServerConnection();  ObjectName objectName=generateMBeanObjectName(mbeanInterface.getName(),mbeanName);  mbsc.removeNotificationListener(objectName,notificationListener);}  }
class C{  public boolean appliesOnlyToBlockScopedElements(){  return false;}  }
class C{  public void damageRange(JTextComponent a,int b,int c,Position.Bias d,Position.Bias e){  for (int i=0; i < uis.size(); i++) {    ((TextUI)(uis.elementAt(i))).damageRange(a,b,c,d,e);  }}  }
class C{  public static void rgb2hsv(int r,int g,int b,int hsv[]){  int min=Math.min(Math.min(r,g),b);  int max=Math.max(Math.max(r,g),b);  double delta=(double)max - min;  double H=0d, S=0d;  double V=max / 255d;  if (delta != 0) {    S=(delta / max);    if (r == max) {      if (g >= b) {        H=((g - b) / delta) * 60;      } else {        H=((g - b) / delta) * 60 + 360;      }    } else     if (g == max) {      H=(2 + ((b - r) / delta)) * 60;    } else {      H=(4 + ((r - g) / delta)) * 60;    }  }  hsv[0]=(int)(H);  hsv[1]=(int)(S * 100);  hsv[2]=(int)(V * 100);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.791 -0400",hash_original_method="CC6A2D61A01777F134B61F210B4582B4",hash_generated_method="DC4F53437482264D89559E059DC0E69A") @Override public String toString(){  return getClass().getSimpleName();}  }
class C{  public ToolsToolBar(){  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels");  setName(labels.getString("tools.toolbar"));}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public void warn(SourceLocator srcLctr,Node styleNode,Node sourceNode,String msg) throws TransformerException {  warn(srcLctr,styleNode,sourceNode,msg,null);}  }
class C{  public synchronized Map<String,Long> avgMessagesSendTimes(){  return new HashMap<>(avgMsgsSndTimes);}  }
class C{  public void close(){  closeWriter();  closed=true;}  }
class C{  public void unsetTaskName(){  this.taskName=null;}  }
class C{  public BeanContextServicesSupport(BeanContextServices peer,Locale locale){  super(peer,locale);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.204 -0500",hash_original_method="854663FFCE0B2EEEA12F571F4E080752",hash_generated_method="12CB9C16CBE240104F270BEBAAE219EE") public void addFooterView(View v,Object data,boolean isSelectable){  FixedViewInfo info=new FixedViewInfo();  info.view=v;  info.data=data;  info.isSelectable=isSelectable;  mFooterViewInfos.add(info);  if (mAdapter != null && mDataSetObserver != null) {    mDataSetObserver.onChanged();  }}  }
class C{  public FilteredAttributes(IntSet indexSet,Attributes attributes){  this.indexSet=indexSet;  this.attributes=attributes;}  }
class C{  @Override public void onClick(View v){  long id=(Long)v.getTag(TAG_ID_CALENDAR_ID);  boolean newState;  boolean initialState=mCalendarInitialStates.get(id);  if (mCalendarChanges.containsKey(id)) {    newState=!mCalendarChanges.get(id);  } else {    newState=!initialState;  }  if (newState == initialState) {    mCalendarChanges.remove(id);  } else {    mCalendarChanges.put(id,newState);  }  ((CheckBox)v.getTag(TAG_ID_SYNC_CHECKBOX)).setChecked(newState);  setText(v,R.id.status,newState ? mSyncedText : mNotSyncedText);}  }
class C{  public static BezierPath fitBezierPath(Point2D.Double[] digitizedPoints,double error){  return fitBezierPath(Arrays.asList(digitizedPoints),error);}  }
class C{  public CUDA_POINTER_ATTRIBUTE_P2P_TOKENS(){}  }
class C{  protected SVGOMAltGlyphItemElement(){}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {switch (Ministry.getInstance().getJobStatusCode(getInt(stack))) {case TranscodeJob.COMPLETED:    return "COMPLETED";case TranscodeJob.TRANSCODING_SEGMENT_COMPLETE:case TranscodeJob.TRANSCODING:case TranscodeJob.LIMBO:  return "TRANSCODING";case TranscodeJob.TRANSCODE_FAILED:return "FAILED";default :return "WAITING TO START";}}  }
class C{  @SuppressWarnings("unchecked") public static <T>int binarySearch(List<? extends T> list,T object,Comparator<? super T> comparator){  if (comparator == null) {    return Collections.binarySearch((List<? extends Comparable<? super T>>)list,object);  }  if (!(list instanceof RandomAccess)) {    ListIterator<? extends T> it=list.listIterator();    while (it.hasNext()) {      int result;      if ((result=-comparator.compare(it.next(),object)) <= 0) {        if (result == 0) {          return it.previousIndex();        }        return -it.previousIndex() - 1;      }    }    return -list.size() - 1;  }  int low=0, mid=list.size(), high=mid - 1, result=-1;  while (low <= high) {    mid=(low + high) >>> 1;    if ((result=-comparator.compare(list.get(mid),object)) > 0) {      low=mid + 1;    } else     if (result == 0) {      return mid;    } else {      high=mid - 1;    }  }  return -mid - (result < 0 ? 1 : 2);}  }
class C{  void sendMessage(byte[] message,TransportAddress address) throws IOException {  DatagramPacket datagramPacket=new DatagramPacket(message,0,message.length,address);  sock.send(datagramPacket);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:15.053 -0500",hash_original_method="3C6E7329283D3C6C46FB3F90EF65A4A7",hash_generated_method="DF69A7831BD134C7DE03F61A47C2BF23") final public boolean isInLayout(){  return mInLayout;}  }
class C{  protected Object resolveWrapper(VariableWrapper variableWrapper,Locale locale,TimeZone tz){  return variableWrapper.resolve();}  }
class C{  private void extractExpectedHighlightsSet(final Document document){  final String text=document.getText();  final Set<String> markers=highlightingTypes.keySet();  final String typesRx="(?:" + StringUtil.join(markers,")|(?:") + ")";  final String openingTagRx="<(" + typesRx + ")"+ "(?:\\s+descr=\"((?:[^\"]|\\\\\"|\\\\\\\\\"|\\\\\\[|\\\\\\])*)\")?"+ "(?:\\s+type=\"([0-9A-Z_]+)\")?"+ "(?:\\s+foreground=\"([0-9xa-f]+)\")?"+ "(?:\\s+background=\"([0-9xa-f]+)\")?"+ "(?:\\s+effectcolor=\"([0-9xa-f]+)\")?"+ "(?:\\s+effecttype=\"([A-Z]+)\")?"+ "(?:\\s+fonttype=\"([0-9]+)\")?"+ "(?:\\s+textAttributesKey=\"((?:[^\"]|\\\\\"|\\\\\\\\\"|\\\\\\[|\\\\\\])*)\")?"+ "(/)?>";  final Matcher matcher=Pattern.compile(openingTagRx).matcher(text);  int pos=0;  final Ref<Integer> textOffset=Ref.create(0);  while (matcher.find(pos)) {    textOffset.set(textOffset.get() + matcher.start() - pos);    pos=extractExpectedHighlight(matcher,text,document,textOffset);  }}  }
class C{  public static synchronized EventManager init(Application application,PennStationOptions options){  if (sManager == null) {    sManager=new EventManager(application,options);  }  return sManager;}  }
class C{  static Object[] promotePrimitives(Object lhs,Object rhs){  lhs=promoteToInteger(lhs);  rhs=promoteToInteger(rhs);  if ((lhs instanceof Number) && (rhs instanceof Number)) {    Number lnum=(Number)lhs;    Number rnum=(Number)rhs;    boolean b;    if ((b=(lnum instanceof Double)) || (rnum instanceof Double)) {      if (b)       rhs=new Double(rnum.doubleValue()); else       lhs=new Double(lnum.doubleValue());    } else     if ((b=(lnum instanceof Float)) || (rnum instanceof Float)) {      if (b)       rhs=new Float(rnum.floatValue()); else       lhs=new Float(lnum.floatValue());    } else     if ((b=(lnum instanceof Long)) || (rnum instanceof Long)) {      if (b)       rhs=new Long(rnum.longValue()); else       lhs=new Long(lnum.longValue());    }  }  return new Object[]{lhs,rhs};}  }
class C{  protected void describeGraph(final Resource graph,final IVCount[] predicatePartitionCounts,final IVCount[] classPartitionCounts){  g.add(graph,RDF.TYPE,SD.Graph);  g.add(graph,VoidVocabularyDecl.triples,f.createLiteral(tripleStore.getStatementCount()));  g.add(graph,VoidVocabularyDecl.entities,f.createLiteral(tripleStore.getURICount()));  g.add(graph,VoidVocabularyDecl.properties,f.createLiteral(predicatePartitionCounts.length));  g.add(graph,VoidVocabularyDecl.classes,f.createLiteral(classPartitionCounts.length));  for (  IVCount tmp : predicatePartitionCounts) {    final BNode propertyPartition=f.createBNode();    final URI p=(URI)tmp.getValue();    g.add(graph,VoidVocabularyDecl.propertyPartition,propertyPartition);    g.add(propertyPartition,VoidVocabularyDecl.property,p);    g.add(propertyPartition,VoidVocabularyDecl.triples,f.createLiteral(tmp.count));  }{    for (    IVCount tmp : classPartitionCounts) {      final BNode classPartition=f.createBNode();      final BigdataValue cls=tmp.getValue();      g.add(graph,VoidVocabularyDecl.classPartition,classPartition);      g.add(classPartition,VoidVocabularyDecl.class_,cls);      g.add(classPartition,VoidVocabularyDecl.triples,f.createLiteral(tmp.count));    }  }}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeShape(this.legendLine,stream);  SerialUtilities.writeComposite(this.fillComposite,stream);}  }
class C{  public static int paintSyntaxLine(Segment line,Token tokens,SyntaxStyle[] styles,TabExpander expander,Graphics gfx,int x,int y){  Font defaultFont=gfx.getFont();  Color defaultColor=gfx.getColor();  int offset=0;  for (; ; ) {    byte id=tokens.id;    if (id == Token.END)     break;    int length=tokens.length;    if (id == Token.NULL) {      if (!defaultColor.equals(gfx.getColor()))       gfx.setColor(defaultColor);      if (!defaultFont.equals(gfx.getFont()))       gfx.setFont(defaultFont);    } else     styles[id].setGraphicsFlags(gfx,defaultFont);    line.count=length;    x=Utilities.drawTabbedText(line,x,y,gfx,expander,0);    line.offset+=length;    offset+=length;    tokens=tokens.next;  }  return x;}  }
class C{  public static boolean parseBoolean(String input){  if (null == input) {    return false;  } else   if (input.equalsIgnoreCase("true")) {    return true;  }  return false;}  }
class C{  public PdxSerializationException(String message){  super(message);}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  WIFILockManagerDao.createTable(db,ifNotExists);}  }
class C{  private void displayInternalServerError(){  alertDialog=CommonDialogUtils.getAlertDialogWithOneButtonAndTitle(context,getResources().getString(R.string.title_head_connection_error),getResources().getString(R.string.error_internal_server),getResources().getString(R.string.button_ok),null);  alertDialog.show();}  }
class C{  public final static byte[] readSecurityBufferTarget(byte[] msg,int securityBufferOffset){  byte[] securityBuffer=new byte[8];  System.arraycopy(msg,securityBufferOffset,securityBuffer,0,8);  ByteUtilities.changeWordEndianess(securityBuffer,0,8);  int length=ByteUtilities.makeIntFromByte2(securityBuffer);  int offset=ByteUtilities.makeIntFromByte4(securityBuffer,4);  byte[] secBufValue=new byte[length];  System.arraycopy(msg,offset,secBufValue,0,length);  return secBufValue;}  }
class C{  public static String join(Iterable<?> iterable,String separator){  final StringBuilder sb=new StringBuilder();  boolean first=true;  for (  Object item : iterable) {    if (first) {      first=false;    } else {      sb.append(separator);    }    sb.append(item.toString());  }  return sb.toString();}  }
class C{  protected void logWrapper(String message){}  }
class C{  static TestRunStatus runTests(TestEnvironment testEnvironment,String packageName,String basename) throws IOException {  String testClasspath=testEnvironment.testClassPath;  Path jacocoDir=testEnvironment.jacocoDir;  String execFile=jacocoDir.resolve(basename + "jacoco.exec").toString();  String jUnitTestSuiteName="";  if (!packageName.isEmpty()) {    jUnitTestSuiteName=packageName + ".";  }  jUnitTestSuiteName+=basename;  List<String> command=new ArrayList<>();  command.add("java");  command.add("-javaagent:" + testEnvironment.getJacocoAgentPath().toString() + "="+ "destfile="+ execFile+ ",excludes=org.junit.*");  command.add("-ea");  command.add("-classpath");  command.add(testClasspath);  command.add("org.junit.runner.JUnitCore");  command.add(jUnitTestSuiteName);  ProcessStatus status=ProcessStatus.runCommand(command);  File classesDirectory=testEnvironment.getTestInputClassDir().toFile();  MethodCoverageMap coverageMap=MethodCoverageMap.collectCoverage(execFile,classesDirectory);  return getTestRunStatus(status,coverageMap);}  }
class C{  public static <T>T splitEachLine(InputStream stream,String regex,String charset,@ClosureParams(value=FromString.class,options={"List<String>","String[]"},conflictResolutionStrategy=PickFirstResolver.class) Closure<T> closure) throws IOException {  return splitEachLine(new BufferedReader(new InputStreamReader(stream,charset)),regex,closure);}  }
class C{  public static Pattern compile(String regex){  return new Pattern(regex,0);}  }
class C{  public void sendReInvite(SipRequest request,int serviceContext) throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.debug("sendReInvite()");  }  SipTransactionContext ctx=mSession.getImsService().getImsModule().getSipManager().sendSipMessageAndWait(request,mSession.getResponseTimeout());  if (ctx.isSipResponse()) {switch (ctx.getStatusCode()) {case Response.OK:      mSession.getDialogPath().setRemoteContent(ctx.getSipResponse().getSdpContent());    mSession.handleReInviteResponse(InvitationStatus.INVITATION_ACCEPTED,ctx.getSipResponse(),serviceContext);  mSession.getImsService().getImsModule().getSipManager().sendSipAck(mSession.getDialogPath());return;case Response.DECLINE:mSession.handleReInviteResponse(InvitationStatus.INVITATION_REJECTED,ctx.getSipResponse(),serviceContext);return;case Response.REQUEST_TIMEOUT:mSession.handleReInviteResponse(InvitationStatus.INVITATION_TIMEOUT,ctx.getSipResponse(),serviceContext);return;case Response.PROXY_AUTHENTICATION_REQUIRED:mSession.handleReInvite407ProxyAuthent(ctx.getSipResponse(),serviceContext);return;default :mSession.handleError(new ImsSessionBasedServiceError(ImsSessionBasedServiceError.SESSION_INITIATION_FAILED));return;}}mSession.handleReInviteResponse(InvitationStatus.INVITATION_NOT_ANSWERED,ctx.getSipResponse(),serviceContext);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:13.917 -0500",hash_original_method="D4D6A5236E4F49764789FE2E4242FD0D",hash_generated_method="6FE3E50244FC16A4647325ADA5662A76") @Deprecated public SslError(int error,X509Certificate certificate){  this(error,certificate,"");}  }
class C{  public void test_initWithAlgorithmParameterSpec() throws Exception {  AlgorithmParameterSpec ap=new IvParameterSpec(IV);  Cipher cipher=Cipher.getInstance(ALGORITHM_3DES + "/CBC/PKCS5Padding");  cipher.init(Cipher.ENCRYPT_MODE,CIPHER_KEY_3DES,ap);  byte[] cipherIV=cipher.getIV();  assertTrue("IVs differ",Arrays.equals(cipherIV,IV));  cipher=Cipher.getInstance("DES/CBC/NoPadding");  try {    cipher.init(Cipher.ENCRYPT_MODE,CIPHER_KEY_3DES,ap);    fail();  } catch (  InvalidKeyException expected) {  }  cipher=Cipher.getInstance("DES/CBC/NoPadding");  ap=new RSAKeyGenParameterSpec(10,new BigInteger("10"));  try {    cipher.init(Cipher.ENCRYPT_MODE,CIPHER_KEY_DES,ap);    fail();  } catch (  InvalidAlgorithmParameterException expected) {  }}  }
class C{  private boolean checkInvocationBound(int invocationCount,Stack<MethodCall> callStack){  if (invocationCount % (UPPER_PAIR_SEARCH_INVOCATION_BOUND / 10) == 0) {    int percent=invocationCount / (UPPER_PAIR_SEARCH_INVOCATION_BOUND / 10);    System.out.print(percent + "0% .. ");  }  if (invocationCount >= UPPER_PAIR_SEARCH_INVOCATION_BOUND) {    if (!warnedAboutAbortion) {      System.out.println();      System.out.println("* ABORTED inter method pair search in " + callStack.peek() + "! Reached maximum invocation limit: "+ UPPER_PAIR_SEARCH_INVOCATION_BOUND);      warnedAboutAbortion=true;    }    return true;  }  return false;}  }
class C{  public void start(final String dbName){  HsqlProperties props=new HsqlProperties();  props.setProperty("server.database.0","target/" + dbName);  props.setProperty("server.dbname.0",dbName);  doStart(props);}  }
class C{  public static void assertSame(String message,Object expected,Object actual){  Assert.assertSame(message,expected,actual);}  }
class C{  public double[][] generateBivariateNormalData(int length,double mean1,double std1,double mean2,double std2,double covariance){  double[][] data=new double[length][2];  double sigma21=covariance / std1;  double sigma22=Math.sqrt(std2 * std2 - sigma21 * sigma21);  for (int i=0; i < length; i++) {    double x1=random.nextGaussian();    double x2=random.nextGaussian();    data[i][0]=mean1 + std1 * x1;    data[i][1]=mean2 + sigma21 * x1 + sigma22 * x2;  }  return data;}  }
class C{  public void drag(long time,float x,float y,float deltaX,float deltaY,float totalX,float totalY){  mModelSelectorButton.drag(x,y);  getActiveStripLayoutHelper().drag(time,x,y,deltaX,deltaY,totalX,totalY);}  }
class C{  public Collection addCollection(String collectionUri,String title,String... acceptedTypes){  Collection collection=new Collection(collectionUri,TextContent.plainText(title),acceptedTypes);  addCollection(collection);  return collection;}  }
class C{  public void testBoundedLongs(){  AtomicInteger fails=new AtomicInteger(0);  Random r=new Random();  long size=123L;  for (long least=-86028121; least < MAX_LONG_BOUND; least+=1982451653L) {    for (long bound=least + 2; bound > least && bound < MAX_LONG_BOUND; bound+=Math.abs(bound * 7919)) {      final long lo=least, hi=bound;      r.longs(size,lo,hi).forEach(null);    }  }  assertEquals(fails.get(),0);}  }
class C{  int parseIntOption(String key,String value) throws URISyntaxException {  try {    return Integer.parseInt(value);  } catch (  NumberFormatException nfe) {    throw new URISyntaxException(value,"Invalid " + key + " value: "+ value);  }}  }
class C{  private void writeSkeletonDispatchCase(IndentingWriter p,int opnum) throws IOException {  RemoteClass.Method method=remoteMethods[opnum];  MethodDoc methodDoc=method.methodDoc();  String methodName=methodDoc.name();  Type paramTypes[]=method.parameterTypes();  String paramNames[]=nameParameters(paramTypes);  Type returnType=methodDoc.returnType();  p.pOlnI("case " + opnum + ": // "+ Util.getFriendlyUnqualifiedSignature(methodDoc));  p.pOlnI("{");  if (paramTypes.length > 0) {    for (int i=0; i < paramTypes.length; i++) {      p.pln(paramTypes[i].toString() + " " + paramNames[i]+ ";");    }    p.plnI("try {");    p.pln("java.io.ObjectInput in = call.getInputStream();");    boolean objectsRead=writeUnmarshalArguments(p,"in",paramTypes,paramNames);    p.pOlnI("} catch (java.io.IOException e) {");    p.pln("throw new " + UNMARSHAL_EXCEPTION + "(\"error unmarshalling arguments\", e);");    if (objectsRead) {      p.pOlnI("} catch (java.lang.ClassNotFoundException e) {");      p.pln("throw new " + UNMARSHAL_EXCEPTION + "(\"error unmarshalling arguments\", e);");    }    p.pOlnI("} finally {");    p.pln("call.releaseInputStream();");    p.pOln("}");  } else {    p.pln("call.releaseInputStream();");  }  if (!Util.isVoid(returnType)) {    p.p(returnType.toString() + " $result = ");  }  String target=remoteClass.classDoc().isPrivate() ? "((" + methodDoc.containingClass().qualifiedName() + ") obj)" : "server";  p.p(target + "." + methodName+ "(");  for (int i=0; i < paramNames.length; i++) {    if (i > 0)     p.p(", ");    p.p(paramNames[i]);  }  p.pln(");");  p.plnI("try {");  if (!Util.isVoid(returnType)) {    p.p("java.io.ObjectOutput out = ");  }  p.pln("call.getResultStream(true);");  if (!Util.isVoid(returnType)) {    writeMarshalArgument(p,"out",returnType,"$result");    p.pln(";");  }  p.pOlnI("} catch (java.io.IOException e) {");  p.pln("throw new " + MARSHAL_EXCEPTION + "(\"error marshalling return\", e);");  p.pOln("}");  p.pln("break;");  p.pOlnI("}");  p.pln();}  }
class C{  public void readEncryptionObject(final PdfObject encyptionObj,final PdfFileReader pdfFileReader) throws PdfSecurityException {  stringsEncoded=false;  isMetaDataEncypted=true;  StmFObj=null;  StrFObj=null;  isAES=false;  if (!isInitialised) {    isInitialised=true;    SetSecurity.init();  }  if (SetSecurity.useBouncyCastle) {    decryptionMethods=new BouncyCastleDecryption();  } else {    decryptionMethods=new JCADecryption();  }  final int v=encyptionObj.getInt(PdfDictionary.V);  final PdfArrayIterator filters=encyptionObj.getMixedArray(PdfDictionary.Filter);  int firstValue=PdfDictionary.Standard;  if (filters != null && filters.hasMoreTokens()) {    firstValue=filters.getNextValueAsConstant(false);  }  if (v == 3) {    throw new PdfSecurityException("Unsupported Custom Adobe Encryption method");  } else   if ((v > 4) && (firstValue != PdfDictionary.Standard)) {    throw new PdfSecurityException("Unsupported Encryption method");  }  final int newLength=encyptionObj.getInt(PdfDictionary.Length) >> 3;  if (newLength != -1) {    this.keyLength=newLength;  }  rev=encyptionObj.getInt(PdfDictionary.R);  P=encyptionObj.getInt(PdfDictionary.P);  O=encyptionObj.getTextStreamValueAsByte(PdfDictionary.O);  U=encyptionObj.getTextStreamValueAsByte(PdfDictionary.U);  OE=encyptionObj.getTextStreamValueAsByte(PdfDictionary.OE);  UE=encyptionObj.getTextStreamValueAsByte(PdfDictionary.UE);  Perms=encyptionObj.getTextStreamValueAsByte(PdfDictionary.Perms);  if (v >= 4) {    isAES=true;    String CFkey;    final PdfObject CF=encyptionObj.getDictionary(PdfDictionary.CF);    if (v == 4) {      isMetaDataEncypted=encyptionObj.getBoolean(PdfDictionary.EncryptMetadata);    }    isAESIdentity=false;    String key=encyptionObj.getName(PdfDictionary.StrF);    if (key != null) {      isAESIdentity=key.equals("Identity");      stringsEncoded=true;      final PdfKeyPairsIterator keyPairs=CF.getKeyPairsIterator();      while (keyPairs.hasMorePairs()) {        CFkey=keyPairs.getNextKeyAsString();        if (CFkey.equals(key)) {          StrFObj=PdfObjectFactory.getPDFObjectObjectFromRefOrDirect(new EncryptionObject(encyptionObj.getObjectRefAsString()),pdfFileReader,keyPairs.getNextValueAsBytes(),PdfDictionary.CF);        }        keyPairs.nextPair();      }    }    key=encyptionObj.getName(PdfDictionary.StmF);    if (key != null) {      isAESIdentity=key.equals("Identity");      final PdfKeyPairsIterator keyPairs=CF.getKeyPairsIterator();      while (keyPairs.hasMorePairs()) {        CFkey=keyPairs.getNextKeyAsString();        if (CFkey.equals(key)) {          StmFObj=PdfObjectFactory.getPDFObjectObjectFromRefOrDirect(new EncryptionObject(encyptionObj.getObjectRefAsString()),pdfFileReader,keyPairs.getNextValueAsBytes(),PdfDictionary.CF);        }        keyPairs.nextPair();      }    }  }  isEncrypted=true;  isFileViewable=false;  LogWriter.writeLog("File has encryption settings");  if (firstValue == PdfDictionary.Standard) {    try {      verifyAccess();    } catch (    final PdfSecurityException e) {      LogWriter.writeLog("File requires password " + e);    }  } else   if (certificate != null) {    isFileViewable=true;    isPasswordSupplied=true;    extractionIsAllowed=true;    passwordStatus=PDFflags.VALID_OWNER_PASSWORD;  }  if (rev == 5) {    Perms=v5Decrypt(Perms,encryptionKey);    isMetaDataEncypted=Perms[8] == 'T';    P=(Perms[0] & 255) | ((Perms[1] & 255) << 8) | ((Perms[2] & 255) << 16)| ((Perms[2] & 255) << 24);  }}  }
class C{  public static boolean withinInterface(Tree.Declaration decl){  return container(decl) instanceof com.redhat.ceylon.model.typechecker.model.Interface;}  }
class C{  @Override public IndicesOptions indicesOptions(){  return indicesOptions;}  }
class C{  public void beginTransaction(HGTransactionConfig config){  getContext().beginTransaction(config);}  }
class C{  public T caseDefaultClause(DefaultClause object){  return null;}  }
class C{  public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY,int overX,int overY){  if (mFlywheel && !isFinished()) {    float oldVelocityX=mScrollerX.mCurrVelocity;    float oldVelocityY=mScrollerY.mCurrVelocity;    if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {      velocityX+=oldVelocityX;      velocityY+=oldVelocityY;    }  }  mMode=FLING_MODE;  mScrollerX.fling(startX,velocityX,minX,maxX,overX);  mScrollerY.fling(startY,velocityY,minY,maxY,overY);}  }
class C{  public MBrowseField(Properties ctx,int AD_SmartBrowseField_ID){  this(ctx,AD_SmartBrowseField_ID,null);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public void write(char[] bytes,int offset,int length) throws IOException {  for (int i=0; i < writer.length; i++) {    writer[i].write(bytes,offset,length);  }}  }
class C{  ImgComp(BufferedImage img,Rectangle off,boolean right){  this.img=img;  at=AffineTransform.getTranslateInstance(-off.x,0);  d=new Dimension(off.width,off.height);  isRight=right;}  }
class C{  public Pyramid(Position centerPosition,double northSouthRadius,double verticalRadius,double eastWestRadius){  if (centerPosition == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (northSouthRadius <= 0 || eastWestRadius <= 0 || verticalRadius <= 0) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","radius <= 0");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.centerPosition=centerPosition;  this.northSouthRadius=northSouthRadius;  this.verticalRadius=verticalRadius;  this.eastWestRadius=eastWestRadius;  this.setUpGeometryCache();}  }
class C{  public Builder withReuseAddress(boolean reuseAddress){  properties.setProperty(NettyOptions.REUSE_ADDRESS,String.valueOf(reuseAddress));  return this;}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  private static String encode(byte[] binaryData){  if (binaryData.length != 16) {    return null;  }  char[] buffer=new char[32];  for (int i=0; i < 16; i++) {    int low=(binaryData[i] & 0x0f);    int high=((binaryData[i] & 0xf0) >> 4);    buffer[i * 2]=HEXADECIMAL[high];    buffer[(i * 2) + 1]=HEXADECIMAL[low];  }  return new String(buffer);}  }
class C{  private void updateVisibilityOfNumStatPanels(){  for (  JPanel statPanel : listOfNumStatPanels) {    if (getModel() != null && getModel().isEnlarged()) {      statPanel.setPreferredSize(DIMENSION_PANEL_NUMERIC_PREF_SIZE_ENLARGED);      if (listOfAdditionalNumStatPanels.contains(statPanel)) {        statPanel.setVisible(true);      }    } else {      statPanel.setPreferredSize(DIMENSION_PANEL_NUMERIC_PREF_SIZE);      if (listOfAdditionalNumStatPanels.contains(statPanel)) {        statPanel.setVisible(false);      }    }  }}  }
class C{  public static boolean isValid(long number){  boolean valid=(getSize(number) >= 13 && getSize(number) <= 16) && (prefixMatched(number,4) || prefixMatched(number,5) || prefixMatched(number,37)|| prefixMatched(number,6)) && ((sumOfDoubleEvenPlace(number) + sumOfOddPlace(number)) % 10 == 0);  return valid;}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;  this.networkTimeMs=networkTimeMs;}  }
class C{  public void update(byte[] input,int offset,int len){  if (input == null) {    throw new IllegalArgumentException("No input buffer given");  }  if (input.length - offset < len) {    throw new IllegalArgumentException("Input buffer too short");  }  engineUpdate(input,offset,len);  state=IN_PROGRESS;}  }
class C{  public boolean visit(MoveSourceEdit edit){  return visitNode(edit);}  }
class C{  public void doCarDetail(HtmlPage carDetail) throws Exception {  assertNotNull(carDetail);  int previousPrice=0, basePrice=getNumberNearLabel("basePriceLabel",carDetail), currentPrice=getNumberNearLabel("yourPriceLabel",carDetail);  List buttons=getAllElementsOfGivenClass(carDetail,null,HtmlSubmitInput.class);  HtmlSubmitInput button=null;  int i=0;  String label=null;  Iterator iter=null;  assertEquals(basePrice,currentPrice);  if (LOGGER.isLoggable(Level.FINE)) {    LOGGER.fine("No package selected: base price: " + basePrice + " current price: "+ currentPrice);  }  for (i=0; i < packageLabelKeys.length; i++) {    previousPrice=currentPrice;    iter=buttons.iterator();    label=resources.getString(packageLabelKeys[i]).trim();    while (iter.hasNext()) {      button=(HtmlSubmitInput)iter.next();      if (-1 != (button.asText().indexOf(label))) {        carDetail=(HtmlPage)button.click();        currentPrice=getNumberNearLabel("yourPriceLabel",carDetail);        if (LOGGER.isLoggable(Level.FINE)) {          LOGGER.fine("Package: " + label + " currentPrice: "+ currentPrice);        }        assertTrue(previousPrice < currentPrice);        break;      }    }  }  HtmlCheckBoxInput checkbox=null;  List checkboxes=null;  Iterator checkboxIter=null;  boolean foundDisabled=false;  String disabledValue=null;  iter=buttons.iterator();  while (iter.hasNext()) {    button=(HtmlSubmitInput)iter.next();    label=resources.getString(packageLabelKeys[2]).trim();    if (-1 != (button.asText().indexOf(label))) {      carDetail=(HtmlPage)button.click();      checkboxes=getAllElementsOfGivenClass(carDetail,null,HtmlCheckBoxInput.class);      checkboxIter=checkboxes.iterator();      while (checkboxIter.hasNext()) {        checkbox=(HtmlCheckBoxInput)checkboxIter.next();        if (null != (disabledValue=checkbox.getDisabledAttribute())) {          if (LOGGER.isLoggable(Level.FINE)) {            LOGGER.fine("Checkbox disabled: " + disabledValue);          }          foundDisabled=true;        }        break;      }    }    if (foundDisabled) {      break;    }  }  assertTrue(foundDisabled);}  }
class C{  QuantifierDecomposition decomposeQuantifier(NodeRepresentation nodeRepArg,boolean isForAll){  QuantifierDecomposition result=new QuantifierDecomposition();  result.news=new Vector<NodeRepresentation>();  NodeRepresentation nodeRep=nodeRepArg;  Decomposition decomp=nodeRep.decomposition;  NodeTextRep newNodeText=null;  if ((decomp.definedOp != null) && (subexpressionButton.getSelection())) {    newNodeText=decomp.definedOpRep;  } else   if (nodeRep.isSubexpressionName) {    newNodeText=new NodeTextRep(nodeRep.nodeText,nodeRep.mapping);  } else   if (decomp.definedOp != null) {    try {      if (!(nodeRepArg.semanticNode instanceof OpApplNode)) {        MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","Something unexpected is going on at " + "line 4178 of NewDecomposeProofHandler.");        return null;      }      OpApplNode oan=(OpApplNode)nodeRepArg.semanticNode;      if (oan.getOperator().getName() == ASTConstants.OP_prime) {        oan=(OpApplNode)oan.getArgs()[0];      }      InstanceSubstitution instSubs=decomp.instantiationSubstitutions.clone();      ExprNode sn=((OpDefNode)oan.getOperator()).getBody();      while (sn instanceof SubstInNode) {        sn=((SubstInNode)sn).getBody();      }      String moduleName=sn.getLocation().source();      IDocument idoc=moduleNameToIDocument(moduleName);      NodeRepresentation res=new NodeRepresentation(idoc,sn);      nodeRep=res.subNodeRep(sn,nodeRepArg.getParentVector(),nodeRepArg.parentNode,null,decomp,!isForAll);      nodeRep.isPrimed=nodeRepArg.isPrimed;      nodeRep.fromGoal=nodeRepArg.fromGoal;      nodeRep.fromExists=nodeRepArg.fromExists;      nodeRep.fromDefs=nodeRepArg.fromDefs.clone();      nodeRep.instantiationSubstitutions=instSubs;      if (decomp.definedOp != null) {        nodeRep.fromDefs.add(nodeRepArg.instantiationSubstitutions.prefix + decomp.definedOp);      }      NodeTextRep ntr=nodeRep.toNodeTextRep();      ntr=instantiateInNodeText(OpDeclNodeVectorToArray(nodeRep.instantiationSubstitutions.params),StringVectorToArray(nodeRep.instantiationSubstitutions.substs),(OpApplNode)nodeRep.semanticNode,ntr);      ntr=renameInNodeText((OpApplNode)nodeRep.semanticNode,ntr,nodeRep.instantiationSubstitutions.prefix,"");      if (ntr == null) {        return null;      }      nodeRep.nodeText=ntr.nodeText;      nodeRep.mapping=ntr.mapping;      nodeRep.decomposition.formalParams=nodeRepArg.decomposition.formalParams;      nodeRep.decomposition.arguments=nodeRepArg.decomposition.arguments;      nodeRep.decomposition.argNodes=nodeRepArg.decomposition.argNodes;      NodeTextRep ntext=decompSubstituteInNodeText(nodeRep,sn,new NodeTextRep(nodeRep.nodeText,nodeRep.mapping),nodeRepArg);      nodeRep.nodeText=ntext.nodeText;      nodeRep.mapping=ntext.mapping;      if (nodeRep.decomposition != null) {        nodeRep.decomposition.renaming=ntext.renaming;      }    } catch (    BadLocationException e) {      e.printStackTrace();      MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","An error that should not happen has occurred in " + "line 4336 of NewDecomposeProofHandler.");      return null;    }  }  Vector<FormalParamNode> idsToRename=new Vector<FormalParamNode>();  Vector<String> idNewNames=new Vector<String>();  if (!isForAll) {    StringSet prevDeclared=this.declaredIdentifiers.clone();    addDeclaredSymbols(prevDeclared,nodeRepArg);    addSymbolsDeclaredLater(prevDeclared,nodeRepArg,true);    for (int i=0; i < decomp.quantIds.size(); i++) {      FormalParamNode id=decomp.quantIds.elementAt(i);      if (prevDeclared.contains(getCurrentName(id,decomp.renaming))) {        idsToRename.add(id);        idNewNames.add(getNewName(id,prevDeclared,decomp.renaming));      }    }    FormalParamNode[] formalParams=new FormalParamNode[idsToRename.size()];    String[] arguments=new String[idsToRename.size()];    boolean[] isBoundedIdRenaming=new boolean[idsToRename.size()];    SemanticNode[] argNodes=new SemanticNode[idsToRename.size()];    for (int i=0; i < idsToRename.size(); i++) {      formalParams[i]=idsToRename.elementAt(i);      arguments[i]=idNewNames.elementAt(i);      isBoundedIdRenaming[i]=true;      argNodes[i]=null;    }    NodeTextRep nText=substituteInNodeText(formalParams,arguments,isBoundedIdRenaming,argNodes,(ExprNode)nodeRep.semanticNode,new NodeTextRep(nodeRep.nodeText,nodeRep.mapping),nodeRep.decomposition);    nodeRep.nodeText=nText.nodeText;    nodeRep.mapping=nText.mapping;    for (int i=0; i < idsToRename.size(); i++) {      addCurrentName(idsToRename.elementAt(i),idNewNames.elementAt(i),nodeRep.decomposition.renaming);      addCurrentName(idsToRename.elementAt(i),idNewNames.elementAt(i),state.renaming);    }  }  int lastLine=-1;  for (int i=0; i < decomp.quantIds.size(); i++) {    NodeRepresentation rep=new NodeRepresentation();    rep.initialPosition=nodeRepArg.initialPosition;    rep.semanticNode=null;    rep.nodeType=NodeRepresentation.NEW_NODE;    rep.newId=getCurrentName(decomp.quantIds.elementAt(i),nodeRep.decomposition.renaming);    rep.isCreated=true;    rep.parentNode=nodeRep.parentNode;    if (nodeRep.getParentVector() != null) {      rep.setParentVector(nodeRep.getParentVector());    } else {      rep.setParentVector(this.state.assumeReps);    }    NodeTextRep ntrep=new NodeTextRep();    String id="NEW " + rep.newId;    int beginLine=((SyntaxTreeNode)decomp.quantIds.elementAt(i).stn).getLocation().beginLine();    if (decomp.quantBounds == null) {      ntrep.nodeText=new String[1];      ntrep.nodeText[0]=id;      ntrep.mapping=new Vector[1];      ntrep.mapping[0]=new Vector<MappingPair>();      ntrep.mapping[0].addElement(new MappingPair(1,-1));    } else {      if (newNodeText == null) {        ntrep=nodeRep.subNodeText(decomp.quantBounds.elementAt(i));        if (decomp.primed || nodeRep.isPrimed) {          if (primingNeedsParens(decomp.quantBounds.elementAt(i))) {            ntrep=prependToNodeText(appendToNodeText(ntrep,")'"),"(");          } else {            ntrep=appendToNodeText(ntrep,"'");          }        }      } else {        String str=decomp.quantBoundsubexpNames.elementAt(i);        if (decomp.primed) {          str=str + "'";        }        ntrep=appendToNodeText(newNodeText,str);      }      ntrep=prependToNodeText(ntrep," \\in ");      if (ntrep.nodeText.length > 1) {        beginLine=-1;      }    }    if (decomp.quantBounds != null) {      ntrep=prependToNodeText(ntrep,id);      rep.semanticNode=decomp.quantBounds.elementAt(i);    }    rep.nodeText=ntrep.nodeText;    rep.mapping=ntrep.mapping;    rep.contextStepName=nodeRepArg.contextStepName;    rep.fromGoal=nodeRepArg.fromGoal;    rep.fromDefs=nodeRep.fromDefs;    result.news.add(rep);    if ((beginLine != -1) && (beginLine == lastLine)) {      result.news.elementAt(i - 1).onSameLineAsNext=true;    }    lastLine=beginLine;  }  if (newNodeText != null) {    String str="!(";    for (int i=0; i < decomp.quantIds.size(); i++) {      if (i != 0) {        str=str + ", ";      }      str=str + decomp.quantIds.elementAt(i).getName().toString();    }    str=str + ")";    newNodeText=appendToNodeText(newNodeText,str);  }  result.body=nodeRep.subNodeRep(decomp.children.elementAt(0),nodeRep.getParentVector(),nodeRep.parentNode,newNodeText,nodeRep.decomposition,!isForAll);  result.body.isCreated=true;  result.body.isPrimed=result.body.isPrimed || decomp.primed;  result.body.isSubexpressionName=nodeRep.isSubexpressionName || (newNodeText != null);  result.body.initialPosition=nodeRepArg.initialPosition;  result.body.contextStepName=nodeRepArg.contextStepName;  result.body.fromGoal=nodeRep.fromGoal;  result.body.fromExists=nodeRep.fromExists;  result.body.fromDefs=nodeRep.fromDefs.clone();  return result;}  }
class C{  public LinkedList<Operator> createOperatorsFromSchedule(TransitSchedule originalSchedule){  return new CreateOperatorFromTransitSchedule(this.operatorFactory,this.routeProvider,this.pConfig,originalSchedule).run();}  }
class C{  public void createRPClasses(){  if (inited) {    return;  }  createRPClassesWithoutBaking();  RPClass.bakeAll();}  }
class C{  public Issue2194ITCase(String name){  super(name);}  }
class C{  private Class<?> findDexClass(String name) throws TestFailed, InvocationTargetException {  Object dexFile=null;  Class dexClass=null;  try {    try {      dexClass=ClassLoader.getSystemClassLoader().loadClass("dalvik.system.DexFile");      Constructor ctor=dexClass.getConstructor(new Class[]{String.class});      dexFile=ctor.newInstance(DEX_FILE);      Method meth=dexClass.getMethod("loadClass",new Class[]{String.class,ClassLoader.class});      meth.invoke(dexFile,name,this);    }  finally {      if (dexFile != null) {        Method meth=dexClass.getMethod("close",(Class[])null);        meth.invoke(dexFile);      }    }  } catch (  NoSuchMethodException nsme) {    throw new TestFailed(nsme);  }catch (  InstantiationException ie) {    throw new TestFailed(ie);  }catch (  IllegalAccessException iae) {    throw new TestFailed(iae);  }catch (  ClassNotFoundException cnfe) {    throw new TestFailed(cnfe);  }  return null;}  }
class C{  public static String stringFor(int n){switch (n) {case CU_JIT_CACHE_OPTION_NONE:    return "CU_JIT_CACHE_OPTION_NONE";case CU_JIT_CACHE_OPTION_CG:  return "CU_JIT_CACHE_OPTION_CG";case CU_JIT_CACHE_OPTION_CA:return "CU_JIT_CACHE_OPTION_CA";}return "INVALID CUjit_cacheMode: " + n;}  }
class C{  public SourceDisplayText(String displayText){  super(displayText);}  }
class C{  public void println(String x){  printHeader();  for (int i=0; i < size(); i++)   ((PrintStream)m_Streams.get(i)).println(x);  flush();}  }
class C{  private static void createAndShowGUI(){  JFrame.setDefaultLookAndFeelDecorated(true);  JFrame frame=new JFrame("IM with L&F");  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  JTextArea description=new JTextArea("Please try typing using below-the-spot IM.\n\n eg. Use City IM with the following arguement:\n    -Djava.awt.im.style=below-the-spot");  description.setPreferredSize(new Dimension(250,70));  description.setEditable(false);  frame.getContentPane().add(description,BorderLayout.NORTH);  JTextField textField=new JTextField();  textField.setPreferredSize(new Dimension(275,50));  frame.getContentPane().add(textField,BorderLayout.CENTER);  frame.pack();  frame.setVisible(true);}  }
class C{  private static void gatherSystemInfo(Ignite ignite) throws IgniteException {  Collection<String> res=ignite.compute().broadcast(null);  System.out.println();  System.out.println("Nodes system information:");  System.out.println();  res.forEach(null);}  }
class C{  public void createTempTableIfNeeded(final String childTableName) throws IOException {  try {    final AccumuloRdfConfiguration accumuloRdfConfiguration=new AccumuloRdfConfiguration(conf);    accumuloRdfConfiguration.setTablePrefix(childTablePrefix);    final Connector connector=AccumuloRyaUtils.setupConnector(accumuloRdfConfiguration);    if (!connector.tableOperations().exists(childTableName)) {      log.info("Creating table: " + childTableName);      connector.tableOperations().create(childTableName);      log.info("Created table: " + childTableName);      log.info("Granting authorizations to table: " + childTableName);      final SecurityOperations secOps=connector.securityOperations();      secOps.grantTablePermission(userName,childTableName,TablePermission.WRITE);      log.info("Granted authorizations to table: " + childTableName);      final Authorizations parentAuths=secOps.getUserAuthorizations(userName);      if (!parentAuths.equals(childAuthorizations)) {        final List<String> childAuthList=findUniqueAuthsFromChild(parentAuths.toString(),childAuthorizations.toString());        tempChildAuths=Joiner.on(",").join(childAuthList);        log.info("Adding the authorization, \"" + tempChildAuths + "\", to the parent user, \""+ userName+ "\"");        final Authorizations newAuths=AccumuloRyaUtils.addUserAuths(userName,secOps,new Authorizations(tempChildAuths));        secOps.changeUserAuthorizations(userName,newAuths);      }    }  } catch (  TableExistsException|AccumuloException|AccumuloSecurityException e) {    throw new IOException(e);  }}  }
class C{  protected static LuaValue[] newupl(LuaValue v){  return new LuaValue[]{v};}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder();  buf.append('[').append(getTokenName(type));  if (line != -1) {    buf.append('@').append(line);    if (column != -1)     buf.append(',').append(column);  }  buf.append("]:");  if (text != null)   buf.append('"').append(text).append('"'); else   if (type > 3 && type < 256)   buf.append((char)type); else   buf.append('<').append(type).append('>');  if (value != null)   buf.append('=').append(value);  return buf.toString();}  }
class C{  @Override public boolean put(int key,int firstValue,int secondValue){  int position=key << 1;  array.addEntry(firstValue,position);  array.addEntry(secondValue,position + 1);  numStoredKeysCounter.incr();  return false;}  }
class C{  protected void nodeCompleted(Object parent,Object node){  getProxyBuilder().getCurrentFactory().onNodeCompleted(getProxyBuilder().getChildBuilder(),parent,node);}  }
class C{  private void updateHomeTaskListAdapter(){  mHomeTaskListAdapter.notifyDataSetChanged();  mHomeTaskCountTextView.setText(String.valueOf(mHomeTaskListAdapter.getItemCount()));}  }
class C{  public static int convertToIntArray(final byte[] vals,final int[] dest){  checkSource(vals.length,4);  checkDestination(vals.length,dest.length,4);  return convertToIntArrayInternal(vals,0,vals.length,dest,0);}  }
class C{  private void run(){  try {    startServices();  } catch (  Throwable ex) {    Slog.e("System","******************************************");    Slog.e("System","************ Failure starting cm system services",ex);    throw ex;  }}  }
class C{  public Dependencies add(Dependency dependency){  dependencies.add(requireNonNull(dependency,"Required not null dependency"));  if (!isNew()) {    addDependencyToXML(dependency);  }  return this;}  }
class C{  public static PropertyListBuilder createBuilder(ConfigurationEventTypeLegacy optionalLegacyClassConfigs){  if (optionalLegacyClassConfigs == null) {    return new PropertyListBuilderJavaBean(null);  }  if (optionalLegacyClassConfigs.getAccessorStyle() == ConfigurationEventTypeLegacy.AccessorStyle.JAVABEAN) {    return new PropertyListBuilderJavaBean(optionalLegacyClassConfigs);  }  if (optionalLegacyClassConfigs.getAccessorStyle() == ConfigurationEventTypeLegacy.AccessorStyle.EXPLICIT) {    return new PropertyListBuilderExplicit(optionalLegacyClassConfigs);  }  if (optionalLegacyClassConfigs.getAccessorStyle() == ConfigurationEventTypeLegacy.AccessorStyle.PUBLIC) {    return new PropertyListBuilderPublic(optionalLegacyClassConfigs);  }  throw new IllegalArgumentException("Cannot match accessor style to property list builder");}  }
class C{  public Configuration(String name,String[] args) throws IOException, ConfigurationException {  configName=name;  parseCmdLine(args);  readConfigurationFile();  parseCmdLine(args);  setConfig(this);}  }
class C{  protected String computeRemoteHostName() throws MessagingException, UnknownHostException {  return getDNSServer().getHostName(getDNSServer().getByName(getRemoteAddress()));}  }
class C{  public TupleSerializer(){  super();}  }
class C{  public static Map<String,Object> createContentAssocMethod(DispatchContext dctx,Map<String,? extends Object> rcontext) throws GenericServiceException, GenericEntityException {  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);  List<String> targetOperationList=ContentWorker.prepTargetOperationList(context,"_CREATE");  List<String> contentPurposeList=ContentWorker.prepContentPurposeList(context);  context.put("targetOperationList",targetOperationList);  context.put("contentPurposeList",contentPurposeList);  Locale locale=(Locale)context.get("locale");  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Map<String,Object> result=FastMap.newInstance();  String contentIdFrom=(String)context.get("contentIdFrom");  String contentIdTo=(String)context.get("contentIdTo");  String contentId=(String)context.get("contentId");  int contentIdCount=0;  if (UtilValidate.isNotEmpty(contentIdFrom))   contentIdCount++;  if (UtilValidate.isNotEmpty(contentIdTo))   contentIdCount++;  if (UtilValidate.isNotEmpty(contentId))   contentIdCount++;  if (contentIdCount < 2) {    Debug.logError("Not 2 out of ContentId/To/From.","ContentServices");    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentCreateContentAssocMethodError",locale));  }  if (UtilValidate.isNotEmpty(contentIdFrom)) {    if (UtilValidate.isEmpty(contentIdTo))     contentIdTo=contentId;  }  if (UtilValidate.isNotEmpty(contentIdTo)) {    if (UtilValidate.isEmpty(contentIdFrom))     contentIdFrom=contentId;  }  GenericValue contentAssoc=delegator.makeValue("ContentAssoc",FastMap.newInstance());  contentAssoc.put("contentId",contentIdFrom);  contentAssoc.put("contentIdTo",contentIdTo);  contentAssoc.put("contentAssocTypeId",context.get("contentAssocTypeId"));  contentAssoc.put("contentAssocPredicateId",context.get("contentAssocPredicateIdFrom"));  contentAssoc.put("dataSourceId",context.get("dataSourceId"));  Timestamp fromDate=(Timestamp)context.get("fromDate");  if (fromDate == null) {    contentAssoc.put("fromDate",UtilDateTime.nowTimestamp());  } else {    contentAssoc.put("fromDate",fromDate);  }  Timestamp thruDate=(Timestamp)context.get("thruDate");  if (thruDate == null) {    contentAssoc.put("thruDate",null);  } else {    contentAssoc.put("thruDate",thruDate);  }  contentAssoc.put("sequenceNum",context.get("sequenceNum"));  contentAssoc.put("mapKey",context.get("mapKey"));  String upperCoordinateStr=(String)context.get("upperCoordinate");  if (UtilValidate.isEmpty(upperCoordinateStr)) {    contentAssoc.put("upperCoordinate",null);  } else {    contentAssoc.put("upperCoordinate",upperCoordinateStr);  }  String leftCoordinateStr=(String)context.get("leftCoordinate");  if (UtilValidate.isEmpty(leftCoordinateStr)) {    contentAssoc.put("leftCoordinate",null);  } else {    contentAssoc.put("leftCoordinate",leftCoordinateStr);  }  GenericValue userLogin=(GenericValue)context.get("userLogin");  String userLoginId=(String)userLogin.get("userLoginId");  String createdByUserLogin=userLoginId;  String lastModifiedByUserLogin=userLoginId;  Timestamp createdDate=UtilDateTime.nowTimestamp();  Timestamp lastModifiedDate=UtilDateTime.nowTimestamp();  contentAssoc.put("createdByUserLogin",createdByUserLogin);  contentAssoc.put("lastModifiedByUserLogin",lastModifiedByUserLogin);  contentAssoc.put("createdDate",createdDate);  contentAssoc.put("lastModifiedDate",lastModifiedDate);  Map<String,Object> serviceInMap=FastMap.newInstance();  String permissionStatus=null;  serviceInMap.put("userLogin",context.get("userLogin"));  serviceInMap.put("targetOperationList",targetOperationList);  serviceInMap.put("contentPurposeList",contentPurposeList);  serviceInMap.put("entityOperation",context.get("entityOperation"));  serviceInMap.put("contentAssocPredicateId",context.get("contentAssocPredicateId"));  serviceInMap.put("contentIdTo",contentIdTo);  serviceInMap.put("contentIdFrom",contentIdFrom);  serviceInMap.put("statusId",context.get("statusId"));  serviceInMap.put("privilegeEnumId",context.get("privilegeEnumId"));  serviceInMap.put("roleTypeList",context.get("roleTypeList"));  serviceInMap.put("displayFailCond",context.get("displayFailCond"));  Map<String,Object> permResults=null;  permResults=dispatcher.runSync("checkAssocPermission",serviceInMap);  permissionStatus=(String)permResults.get("permissionStatus");  if (permissionStatus != null && permissionStatus.equals("granted")) {    contentAssoc.create();  } else {    String errorMsg=(String)permResults.get(ModelService.ERROR_MESSAGE);    result.put(ModelService.ERROR_MESSAGE,errorMsg);    return ServiceUtil.returnFailure(errorMsg);  }  result.put("contentIdTo",contentIdTo);  result.put("contentIdFrom",contentIdFrom);  result.put("fromDate",contentAssoc.get("fromDate"));  result.put("contentAssocTypeId",contentAssoc.get("contentAssocTypeId"));  return result;}  }
class C{  public static void d(String msg,Throwable cause){  if (BuildConfig.DEBUG) {    Log.d(LOG_TAG,msg,cause);  }}  }
class C{  public void cancelCellEditing(){  delegate.cancelCellEditing();}  }
class C{  public static void register(){  final MoveAction move=new MoveAction();  CommandCenter.register(MOVE,move);}  }
class C{  final boolean ensureActivityConfigurationLocked(ActivityRecord r,int globalChanges){  if (mConfigWillChange) {    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG,"Skipping config check (will change): " + r);    return true;  }  if (DEBUG_SWITCH || DEBUG_CONFIGURATION)   Slog.v(TAG,"Ensuring correct configuration: " + r);  Configuration newConfig=mService.mConfiguration;  if (r.configuration == newConfig && !r.forceNewConfig) {    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG,"Configuration unchanged in " + r);    return true;  }  if (r.finishing) {    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG,"Configuration doesn't matter in finishing " + r);    r.stopFreezingScreenLocked(false);    return true;  }  Configuration oldConfig=r.configuration;  r.configuration=newConfig;  final int changes=oldConfig.diff(newConfig);  if (changes == 0 && !r.forceNewConfig) {    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG,"Configuration no differences in " + r);    return true;  }  if (r.app == null || r.app.thread == null) {    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG,"Configuration doesn't matter not running " + r);    r.stopFreezingScreenLocked(false);    r.forceNewConfig=false;    return true;  }  if (DEBUG_SWITCH || DEBUG_CONFIGURATION) {    Slog.v(TAG,"Checking to restart " + r.info.name + ": changed=0x"+ Integer.toHexString(changes)+ ", handles=0x"+ Integer.toHexString(r.info.getRealConfigChanged())+ ", newConfig="+ newConfig);  }  if ((changes & (~r.info.getRealConfigChanged())) != 0 || r.forceNewConfig) {    r.configChangeFlags|=changes;    r.startFreezingScreenLocked(r.app,globalChanges);    r.forceNewConfig=false;    if (r.app == null || r.app.thread == null) {      if (DEBUG_SWITCH || DEBUG_CONFIGURATION)       Slog.v(TAG,"Config is destroying non-running " + r);      destroyActivityLocked(r,true,false,"config");    } else     if (r.state == ActivityState.PAUSING) {      if (DEBUG_SWITCH || DEBUG_CONFIGURATION)       Slog.v(TAG,"Config is skipping already pausing " + r);      r.configDestroy=true;      return true;    } else     if (r.state == ActivityState.RESUMED) {      if (DEBUG_SWITCH || DEBUG_CONFIGURATION)       Slog.v(TAG,"Config is relaunching resumed " + r);      relaunchActivityLocked(r,r.configChangeFlags,true);      r.configChangeFlags=0;    } else {      if (DEBUG_SWITCH || DEBUG_CONFIGURATION)       Slog.v(TAG,"Config is relaunching non-resumed " + r);      relaunchActivityLocked(r,r.configChangeFlags,false);      r.configChangeFlags=0;    }    return false;  }  if (r.app != null && r.app.thread != null) {    try {      if (DEBUG_CONFIGURATION)       Slog.v(TAG,"Sending new config to " + r);      r.app.thread.scheduleActivityConfigurationChanged(r.appToken);    } catch (    RemoteException e) {    }  }  r.stopFreezingScreenLocked(false);  return true;}  }
class C{  static boolean keyEquals(long ptr,byte[] keyBytes,GridUnsafeMemory mem){  long len=readKeyLength(ptr,mem);  return len == keyBytes.length && GridUnsafeMemory.compare(ptr + HEADER_SIZE,keyBytes);}  }
class C{  public List<Contact> _queryAddressBook_ContactList(Long id){synchronized (this) {    if (addressBook_ContactListQuery == null) {      QueryBuilder<Contact> queryBuilder=queryBuilder();      queryBuilder.where(Properties.Id.eq(null));      addressBook_ContactListQuery=queryBuilder.build();    }  }  Query<Contact> query=addressBook_ContactListQuery.forCurrentThread();  query.setParameter(0,id);  return query.list();}  }
class C{  public SetSourceNeurons(final NetworkPanel networkPanel){  super(networkPanel,"Set Source Neurons",EnablingCondition.NEURONS);  putValue(NAME,"Set Source Neurons");  putValue(SHORT_DESCRIPTION,"Set selected neurons as source neurons.  They can then be connected to target neurons using the connect commands.");}  }
class C{  public void addEdge(T fromNode,T toNode){  if (!nodesMap.containsKey(fromNode)) {    addNode(fromNode);  }  if (!nodesMap.containsKey(toNode)) {    addNode(toNode);  }  if (nodesMap.get(fromNode).outEdges.add(nodesMap.get(toNode)) && nodesMap.get(toNode).inEdges.add(nodesMap.get(fromNode)))   countEdges++;}  }
class C{  private void createConstraintToast(FormIndex index,int saveStatus){  FormController formController=Collect.getInstance().getFormController();  String constraintText;switch (saveStatus) {case FormEntryController.ANSWER_CONSTRAINT_VIOLATED:    Collect.getInstance().getActivityLogger().logInstanceAction(this,"createConstraintToast.ANSWER_CONSTRAINT_VIOLATED","show",index);  constraintText=formController.getQuestionPromptConstraintText(index);if (constraintText == null) {  constraintText=formController.getQuestionPrompt(index).getSpecialFormQuestionText("constraintMsg");  if (constraintText == null) {    constraintText=getString(R.string.invalid_answer_error);  }}break;case FormEntryController.ANSWER_REQUIRED_BUT_EMPTY:Collect.getInstance().getActivityLogger().logInstanceAction(this,"createConstraintToast.ANSWER_REQUIRED_BUT_EMPTY","show",index);constraintText=formController.getQuestionPromptRequiredText(index);if (constraintText == null) {constraintText=formController.getQuestionPrompt(index).getSpecialFormQuestionText("requiredMsg");if (constraintText == null) {constraintText=getString(R.string.required_answer_error);}}break;default :return;}showCustomToast(constraintText,Toast.LENGTH_SHORT);}  }
class C{  public ModelKeyMap findKeyMap(String fieldName){  for (  ModelKeyMap keyMap : keyMaps) {    if (keyMap.getFieldName().equals(fieldName))     return keyMap;  }  return null;}  }
class C{  public void nodeAdded(SessionEvent event){}  }
class C{  @SuppressWarnings("unchecked") public static void addToNamedList(Node nd,NamedList nlst,List arr){  if (nd.getNodeType() != Node.ELEMENT_NODE)   return;  final String type=nd.getNodeName();  final String name=getAttr(nd,NAME);  Object val=null;  if ("lst".equals(type)) {    val=childNodesToNamedList(nd);  } else   if ("arr".equals(type)) {    val=childNodesToList(nd);  } else {    final String textValue=getText(nd);    try {      if ("str".equals(type)) {        val=textValue;      } else       if ("int".equals(type)) {        val=Integer.valueOf(textValue);      } else       if ("long".equals(type)) {        val=Long.valueOf(textValue);      } else       if ("float".equals(type)) {        val=Float.valueOf(textValue);      } else       if ("double".equals(type)) {        val=Double.valueOf(textValue);      } else       if ("bool".equals(type)) {        val=StrUtils.parseBool(textValue);      }    } catch (    NumberFormatException nfe) {      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Value " + (null != name ? ("of '" + name + "' ") : "") + "can not be parsed as '"+ type+ "': \""+ textValue+ "\"",nfe);    }  }  if (nlst != null)   nlst.add(name,val);  if (arr != null)   arr.add(val);}  }
class C{  public DirectedSparseMultigraph(){  super(EdgeType.DIRECTED);  vertices=new HashMap<V,Pair<Set<E>>>();  edges=new HashMap<E,Pair<V>>();}  }
class C{  protected void createShapes(DrawContext dc){  if (this.positions == null)   return;  this.rings=new ArrayList<SurfaceCircle>();  Iterator<? extends Position> iterator=this.positions.iterator();  Position center=iterator.next();  double globeRadius=dc.getGlobe().getRadius();  while (iterator.hasNext()) {    SurfaceCircle ring=this.createCircle();    ring.setCenter(center);    Position pos=iterator.next();    Angle radius=LatLon.greatCircleDistance(center,pos);    double radiusMeters=radius.radians * globeRadius;    ring.setRadius(radiusMeters);    this.rings.add(ring);  }}  }
class C{  @Override protected void init(){  super.init();  addTableStyleGenerator();}  }
class C{  private void fillCompetitiveNetworkFieldValues(){  updateMethod.setSelectedItem(((CompetitiveNetwork)competitive).getCompetitive().getUpdateMethod());  tfEpsilon.setText(Double.toString(((CompetitiveNetwork)competitive).getCompetitive().getLearningRate()));  tfLoserValue.setText(Double.toString(((CompetitiveNetwork)competitive).getCompetitive().getLoseValue()));  tfWinnerValue.setText(Double.toString(((CompetitiveNetwork)competitive).getCompetitive().getWinValue()));  tfLeakyEpsilon.setText(Double.toString(((CompetitiveNetwork)competitive).getCompetitive().getLeakyLearningRate()));  tfSynpaseDecayPercent.setText(Double.toString(((CompetitiveNetwork)competitive).getCompetitive().getSynpaseDecayPercent()));  cbUseLeakyLearning.setSelected(((CompetitiveNetwork)competitive).getCompetitive().getUseLeakyLearning());  cbNormalizeInputs.setSelected(((CompetitiveNetwork)competitive).getCompetitive().getNormalizeInputs());}  }
class C{  public Button extractLastClickedComponent(){  Button c=lastClickedComponent;  lastClickedComponent=null;  return c;}  }
class C{  @Override public void add(int index,Character element){}  }
class C{  @SuppressWarnings("unused") private final void printPaths(){  String[] bootclassPaths=System.getProperty("sun.boot.class.path").split(":");  processingEnv.getMessager().printMessage(Kind.NOTE,"bootclass path:");  for (  String path : bootclassPaths) {    processingEnv.getMessager().printMessage(Kind.NOTE,"\t" + path);  }  String[] extensionDirs=System.getProperty("java.ext.dirs").split(":");  processingEnv.getMessager().printMessage(Kind.NOTE,"extension dirs:");  for (  String path : extensionDirs) {    processingEnv.getMessager().printMessage(Kind.NOTE,"\t" + path);  }  String[] javaclassPaths=System.getProperty("java.class.path").split(":");  processingEnv.getMessager().printMessage(Kind.NOTE,"java classpaths:");  for (  String path : javaclassPaths) {    processingEnv.getMessager().printMessage(Kind.NOTE,"\t" + path);  }  ClassLoader applicationClassLoader=getAppClassLoader();  processingEnv.getMessager().printMessage(Kind.NOTE,"classloader examined paths:");  if (applicationClassLoader != null) {    URL[] urls=((URLClassLoader)applicationClassLoader).getURLs();    for (int i=0; i < urls.length; i++) {      processingEnv.getMessager().printMessage(Kind.NOTE,"\t" + urls[i].getFile());    }  } else {    processingEnv.getMessager().printMessage(Kind.NOTE,"classloader unavailable");  }}  }
class C{  public void commit(){  try {    endTransaction(true);  } catch (  HGTransactionException ex) {    throw new HGException(ex);  }}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=getBitmapSize(value) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  private void pushMetadataMessage(byte[] key,byte[] value) throws IOException {  AtomicLong mms=this.metadataMessagesSize.get();  List<KeyedMessage<byte[],byte[]>> msglist=this.metadataMessages.get();  if (null != key && null != value) {    byte[] kv=Arrays.copyOf(key,key.length + value.length);    System.arraycopy(value,0,kv,key.length,value.length);    value=kv;    if (null != this.AES_KAFKA_META) {      value=CryptoUtils.wrap(this.AES_KAFKA_META,value);    }    if (null != this.SIPHASH_KAFKA_META) {      value=CryptoUtils.addMAC(this.SIPHASH_KAFKA_META,value);    }    KeyedMessage<byte[],byte[]> message=new KeyedMessage<byte[],byte[]>(this.metaTopic,Arrays.copyOf(key,key.length),value);    msglist.add(message);    mms.addAndGet(key.length + value.length);    Sensision.update(SensisionConstants.SENSISION_CLASS_CONTINUUM_INGRESS_KAFKA_META_MESSAGES,Sensision.EMPTY_LABELS,1);  }  if (msglist.size() > 0 && (null == key || null == value || mms.get() > METADATA_MESSAGES_THRESHOLD)) {    Producer<byte[],byte[]> producer=this.metaProducerPool.getProducer();    try {      producer.send(msglist);    } catch (    Throwable t) {      for (      KeyedMessage<byte[],byte[]> msg : msglist) {synchronized (this.metadataCache) {          this.metadataCache.remove(new BigInteger(msg.key()));        }      }      throw t;    } finally {      this.metaProducerPool.recycleProducer(producer);    }    Sensision.update(SensisionConstants.SENSISION_CLASS_CONTINUUM_INGRESS_KAFKA_META_SEND,Sensision.EMPTY_LABELS,1);    msglist.clear();    mms.set(0L);    Sensision.set(SensisionConstants.SENSISION_CLASS_CONTINUUM_INGRESS_METADATA_CACHED,Sensision.EMPTY_LABELS,this.metadataCache.size());  }}  }
class C{  public static boolean isInvalid(){  return invalid;}  }
class C{  public double classifyInstance(Instance instance) throws Exception {  double[] dist=distributionForInstance(instance);  if (dist == null) {    throw new Exception("Null distribution predicted");  }switch (instance.classAttribute().type()) {case Attribute.NOMINAL:    double max=0;  int maxIndex=0;for (int i=0; i < dist.length; i++) {  if (dist[i] > max) {    maxIndex=i;    max=dist[i];  }}if (max > 0) {return maxIndex;} else {}case Attribute.NUMERIC:return dist[0];default :return -1;}}  }
class C{  @SuppressWarnings("unchecked") protected void onDeleteComplete(int token,Object cookie,int result){  ((AsyncProviderCommand<ArgType>)cookie).onCompletion(token,result);}  }
class C{  protected void resetCommon() throws XNIException {  int count=fCommonComponents.size();  for (int i=0; i < count; i++) {    XMLComponent c=(XMLComponent)fCommonComponents.get(i);    c.reset(this);  }}  }
class C{  public void testNonEscapeSequence() throws Exception {  check("'{fn test()}'","'{fn test()}'");  check("select '{fn test()}'","select '{fn test()}'");  check("select '{fn test()}' from table;","select '{fn test()}' from table;");  check("select test('arg')  from table;","select {fn test('arg')}  from table;");  check("select test('{fn func()}')  from table;","select {fn test('{fn func()}')}  from table;");  check("'{\\'some literal\\'}'","'{\\'some literal\\'}'");  check("select '{\\'some literal\\'}'","select '{\\'some literal\\'}'");  check("select '{\\'some literal\\'}' from table;","select '{\\'some literal\\'}' from table;");  check("select '{' + func() + '}' from table;","select '{' + {fn func()} + '}' from table;");  check("select '{''{fn test()}''}' from table;","select '{''{fn test()}''}' from table;");  checkFail("'{fn test()}");  checkFail("{fn func('arg)}");  checkFail("{fn func(arg')}");}  }
class C{  public void fireDOMNodeInsertedIntoDocumentEvent(){  AbstractDocument doc=getCurrentDocument();  if (doc.getEventsEnabled()) {    super.fireDOMNodeInsertedIntoDocumentEvent();    for (Node n=getFirstChild(); n != null; n=n.getNextSibling()) {      ((AbstractNode)n).fireDOMNodeInsertedIntoDocumentEvent();    }  }}  }
class C{  public boolean toBoolean(){  return TypeFormat.parseBoolean(this);}  }
class C{  public void componentAdded(final ContainerEvent e){  final Component child=e.getChild();  if (!(child instanceof JMenu))   return;  addSubmenu((JMenu)child);}  }
class C{  Calendar toCalendar(String value,String pattern,Locale locale){  Calendar calendar=null;  try {    DateFormat format=(locale == null) ? new SimpleDateFormat(pattern) : new SimpleDateFormat(pattern,locale);    format.setLenient(false);    format.parse(value);    calendar=format.getCalendar();  } catch (  Exception e) {    fail("Error creating Calendar value ='" + value + ", pattern='"+ pattern+ "' "+ e.toString());  }  return calendar;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public final boolean push(boolean val){  if (m_index == m_allocatedSize - 1)   grow();  return (m_values[++m_index]=val);}  }
class C{  private void flushBitBuffer() throws IOException {  if (this.bitBufferCount > 0) {    this.bitBufferCount=0;    writeByte(this.bitBuffer);  }}  }
class C{  public boolean isInMemoryDb(){  return path.equalsIgnoreCase(MEMORY_DB_PATH);}  }
class C{  private boolean isPreviousVersionInitial(TriggerProcess process){  if (process.getVersion() == 2) {    return true;  }  return false;}  }
class C{  public boolean isKeepResourcesInRam(){  return keepResourcesInRam;}  }
class C{  private static void debugPrintln(String msg){  if (debug) {    System.err.println(CLASS_NAME + ":" + msg);  }}  }
class C{  @Override public boolean okPressed(){  return (true);}  }
class C{  protected void showCrosshairs(){  if (this.animatorSet.isStarted()) {    this.animatorSet.cancel();  }  this.crosshairs.setAlpha(1.0f);  this.crosshairsActive=true;}  }
class C{  public void validate(){  if (pc < 0 || pc >= instructions.size()) {    pc=0;  }}  }
class C{  public LineDecorationIcon(LineDecoration decoration,boolean isStartDecoration){  lineFigure=new LineFigure();  lineFigure.setBounds(new Point2D.Double(2,8),new Point2D.Double(23,8));  if (isStartDecoration) {    lineFigure.set(START_DECORATION,decoration);  } else {    lineFigure.set(END_DECORATION,decoration);  }  lineFigure.set(STROKE_COLOR,Color.black);}  }
class C{  public static Vectorizer load(File f,boolean hasHeaderLine) throws IOException {  return new TextFormatVectorizer(TextFormatVectorizerUtils.readEmbeddingFileTxt(f,hasHeaderLine));}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static X509Certificate createMockCertificateWithName(final String name){  final X509Certificate certificate=Mockito.mock(X509Certificate.class);  final X500Principal principal=new X500Principal(name);  Mockito.when(certificate.getIssuerX500Principal()).thenReturn(principal);  return certificate;}  }
class C{  @Override public void clear(){  this._set.clear();}  }
class C{  public void enableInputMethods(boolean enable){  checkForEnableIM=false;  super.enableInputMethods(enable);}  }
class C{  public static int toPixels(Resources res,float dp){  return (int)(dp * res.getDisplayMetrics().density);}  }
class C{  public void logWarning(String message){  logger.warning(logPrefix + message);}  }
class C{  public KeyedVersions(KeyedVersions other){  if (other.isSetKey()) {    this.key=org.apache.thrift.TBaseHelper.copyBinary(other.key);    ;  }  if (other.isSetVersions()) {    List<VectorClock> __this__versions=new ArrayList<VectorClock>();    for (    VectorClock other_element : other.versions) {      __this__versions.add(new VectorClock(other_element));    }    this.versions=__this__versions;  }}  }
class C{  private void queueOutgoingData(byte[] data,String identifier){  if (!outBuffers.containsKey(identifier)) {    outBuffers.put(identifier,new ArrayDeque<byte[]>());  }  int mtu=getMtuForIdentifier(identifier);  int readIdx=0;  while (readIdx < data.length) {    if (data.length - readIdx > mtu) {      ByteArrayOutputStream bos=new ByteArrayOutputStream(mtu);      bos.write(data,readIdx,mtu);      Timber.d("Adding %d byte chunk to queue",bos.size());      outBuffers.get(identifier).add(bos.toByteArray());      readIdx+=mtu;    } else {      Timber.d("Adding %d byte chunk to queue",data.length);      outBuffers.get(identifier).add(data);      break;    }  }}  }
class C{  public String globalInfo(){  return "Class for building and using a simple decision table majority " + "classifier.\n\n" + "For more information see: \n\n"+ getTechnicalInformation().toString();}  }
class C{  protected void nextLine(String s){  if (s.length() < 5) {    return;  }  if (s.startsWith("DATA,,")) {    setReceivers(s);    return;  }  Reading r;  try {    r=makeReading(s);  } catch (  Exception e) {    log.error("Exception formatting input line \"" + s + "\": "+ e);    return;  }  if (r == null) {    return;  }  try {    Distributor.instance().submitReading(r);  } catch (  Exception e) {    log.error("Exception forwarding reading: " + e);  }}  }
class C{  public <OUT>DataStreamSource<OUT> fromCollectionWithTimestamp(Collection<StreamRecord<OUT>> data,TypeInformation<OUT> outType,Boolean flushWindows){  Preconditions.checkNotNull(data,"Collection must not be null");  TypeInformation<StreamRecord<OUT>> typeInfo;  StreamRecord<OUT> first=data.iterator().next();  try {    typeInfo=TypeExtractor.getForObject(first);  } catch (  Exception e) {    throw new RuntimeException("Could not startWith TypeInformation for type " + first.getClass() + "; please specify the TypeInformation manually via "+ "StreamExecutionEnvironment#fromElements(Collection, TypeInformation)");  }  FromElementsFunction.checkCollection(data,typeInfo.getTypeClass());  SourceFunction<OUT> function;  try {    function=new ParallelFromStreamRecordsFunction<OUT>(typeInfo.createSerializer(getConfig()),data,flushWindows);  } catch (  IOException e) {    throw new RuntimeException(e.getMessage(),e);  }  return addSource(function,"Collection Source",outType);}  }
class C{  public void printStackTrace(java.io.PrintStream s){  if (exception == null) {    super.printStackTrace(s);  } else {synchronized (s) {      s.println(this);      super.printStackTrace();    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void onTouchLetterSection(int sectionIndex,EasySection letterSection){  this.imageFloatingTv.setVisibility(View.VISIBLE);  this.imageFloatingIv.setVisibility(View.INVISIBLE);  this.imageFloatingTv.setText(letterSection.letter);  this.scrollToPosition(this.adapter.getPositionForSection(sectionIndex));}  }
class C{  public Id<ActivityFacility> sampleBiasedDestinationNode(Id<ActivityFacility> origin,String destinationType,Random random){  Tuple<Id<ActivityFacility>,String> weightMapTuple=new Tuple<Id<ActivityFacility>,String>(origin,destinationType);  Map<Id<ActivityFacility>,Integer> weightMap;  if (!nodeWeightMap.containsKey(weightMapTuple)) {    weightMap=new HashMap<Id<ActivityFacility>,Integer>();    for (    Tuple<Pair<Id<ActivityFacility>>,Pair<String>> tuple : this.weights.keySet()) {      if (tuple.getFirst().getFirst() == origin && tuple.getSecond().getSecond().equalsIgnoreCase(destinationType)) {        Id<ActivityFacility> destinationId=tuple.getFirst().getSecond();        weightMap.put(destinationId,weights.get(tuple));      }    }    nodeWeightMap.put(weightMapTuple,weightMap);  } else {    weightMap=nodeWeightMap.get(weightMapTuple);  }  if (weightMap.size() == 0) {    if (!destinationWeightMaps.containsKey(destinationType)) {      for (      Tuple<Pair<Id<ActivityFacility>>,Pair<String>> tuple : this.weights.keySet()) {        if (tuple.getSecond().getSecond().equalsIgnoreCase(destinationType)) {          Id<ActivityFacility> node=tuple.getFirst().getSecond();          if (!weightMap.containsKey(node)) {            weightMap.put(node,this.weights.get(tuple));          } else {            weightMap.put(node,weightMap.get(node) + this.weights.get(tuple));          }        }      }      destinationWeightMaps.put(destinationType,weightMap);    } else {      weightMap=destinationWeightMaps.get(destinationType);    }  }  WeightedChoice<Id<ActivityFacility>> vertexWeights=new WeightedChoice<Id<ActivityFacility>>(weightMap,random);  return vertexWeights.nextItem();}  }
class C{  public static boolean equals(long[] array1,long[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  @RequestMapping(value="/api/greetings/{id}/send",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) public ResponseEntity<Greeting> sendGreeting(@PathVariable("id") Long id,@RequestParam(value="wait",defaultValue="false") boolean waitForAsyncResult){  logger.info("> sendGreeting id:{}",id);  Greeting greeting=null;  try {    greeting=greetingService.findOne(id);    if (greeting == null) {      logger.info("< sendGreeting id:{}",id);      return new ResponseEntity<Greeting>(HttpStatus.NOT_FOUND);    }    if (waitForAsyncResult) {      Future<Boolean> asyncResponse=emailService.sendAsyncWithResult(greeting);      boolean emailSent=asyncResponse.get();      logger.info("- greeting email sent? {}",emailSent);    } else {      emailService.sendAsync(greeting);    }  } catch (  Exception e) {    logger.error("A problem occurred sending the Greeting.",e);    return new ResponseEntity<Greeting>(HttpStatus.INTERNAL_SERVER_ERROR);  }  logger.info("< sendGreeting id:{}",id);  return new ResponseEntity<Greeting>(greeting,HttpStatus.OK);}  }
class C{  public LinkWithEditorPartListener(ILinkedWithEditorView view){  this.view=view;}  }
class C{  public OMGraphic createGraphic(int renderType,int lineType){  OMGraphic g=null;switch (renderType) {case (OMGraphic.RENDERTYPE_LATLON):    g=new OMSpline(new double[0],OMGraphic.RADIANS,lineType);  break;case (OMGraphic.RENDERTYPE_OFFSET):g=new OMSpline(90f,-180f,new int[0],OMSpline.COORDMODE_ORIGIN);break;default :g=new OMSpline(new int[0]);}((OMSpline)g).setDoShapes(true);return g;}  }
class C{  public Expression parseExpression(String expression) throws ParseException {  this.lexer=new ExpressionLexer(expression);  nextToken();  Expression exp=parseExpression();  expect(Token.EOF);  return exp;}  }
class C{  public void resumeTransfer() throws RcsPermissionDeniedException, RcsPersistentStorageException, RcsGenericException {  try {    mTransferInf.resumeTransfer();  } catch (  Exception e) {    RcsPermissionDeniedException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public static boolean isCharAtEqual(String string,int index,char charToCompare){  if ((index < 0) || (index >= string.length())) {    return false;  }  return string.charAt(index) == charToCompare;}  }
class C{  private void checkContentLengthLimit(final Request request) throws BrowserException {  long length=-1;  if (request == null || request.getHttpConnection() == null || (length=request.getHttpConnection().getLongContentLength()) < 0) {    return;  } else   if (length > this.limit) {    final Logger llogger=this.getLogger();    if (llogger != null) {      llogger.severe(request.printHeaders());    }    throw new BrowserException("Content-length too big",request.getHttpConnection());  }}  }
class C{  public void cancel(){  this.canceled=true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:41.676 -0500",hash_original_method="840870BB0412797A5F6A599B61D1A09E",hash_generated_method="392B5DDB1E404545881718EFE88BA53A") @Deprecated public static void startMethodTracing(){}  }
class C{  public void shutdown(){  this.shallRun=false;  this.interrupt();  Log.getLog().info("catched QueuedIndexing termination signal");}  }
class C{  public Enumeration breadthFirstEnumeration(){  return new BreadthFirstEnumeration(this);}  }
class C{  private List<String> defaultArgs(){  List<String> args=new ArrayList<String>();  args.add("--no-auth-cache");  args.add("--non-interactive");  args.add("--trust-server-cert");  return args;}  }
class C{  @Override public void update(BasicCamera camera){  scale=camera.getPixelSizeAt(getWorldTranslation(),true) * PIXEL_SIZE;  if (Math.abs(scale - oldScale) > 0.0000001) {    oldScale=scale;    scaleShape(scale);  }}  }
class C{  public final boolean doPeriodicWork() throws Exception {synchronized (this.theFPSet) {    if (this.checkLiveness) {      if (!liveCheck.check(false)) {        return false;      }    }    if (TLCGlobals.doCheckPoint()) {      MP.printMessage(EC.TLC_CHECKPOINT_START,this.metadir);      this.theFPSet.beginChkpt();      if (this.checkLiveness) {        liveCheck.beginChkpt();      }      UniqueString.internTbl.beginChkpt(this.metadir);      this.theFPSet.commitChkpt();      if (this.checkLiveness) {        liveCheck.commitChkpt();      }      UniqueString.internTbl.commitChkpt(this.metadir);      MP.printMessage(EC.TLC_CHECKPOINT_END);    }  }  return true;}  }
class C{  private static void sumAggWithFn(double[] a,double[] c,int ai,int ci,final int len,KahanObject kbuff,KahanFunction kfunc){  for (int i=0; i < len; i++, ai++, ci++) {    kbuff._sum=c[ci];    kbuff._correction=c[ci + len];    kfunc.execute2(kbuff,a[ai]);    c[ci]=kbuff._sum;    c[ci + len]=kbuff._correction;  }}  }
class C{  public LabelledStatement basicGetLabel(){  return label;}  }
class C{  final public boolean isFull(){  return nkeys == keys.length;}  }
class C{  private ManaIndicator(final LinearScalingModel model){  super(model);  this.model=model;  setVisible(false);  setBarColor(new Color(49,75,253));}  }
class C{  public void initializeDelegate(Provider<T> delegate){  checkState(this.delegate == null,"delegate already initialized");  this.delegate=checkNotNull(delegate,"delegate");}  }
class C{  public static Collection<EmailType> all(){  return enums.all();}  }
class C{  public static void register(Config config){  cThreadLocal.set(config);}  }
class C{  private void updateAppearance(){  if (mAdapter.getCount() > 0) {    mExpandActivityOverflowButton.setEnabled(true);  } else {    mExpandActivityOverflowButton.setEnabled(false);  }  final int activityCount=mAdapter.getActivityCount();  final int historySize=mAdapter.getHistorySize();  if (activityCount > 0 && historySize > 0) {    mDefaultActivityButton.setVisibility(VISIBLE);    ResolveInfo activity=mAdapter.getDefaultActivity();    PackageManager packageManager=mContext.getPackageManager();    mDefaultActivityButtonImage.setImageDrawable(activity.loadIcon(packageManager));    if (mDefaultActionButtonContentDescription != 0) {      CharSequence label=activity.loadLabel(packageManager);      String contentDescription=mContext.getString(mDefaultActionButtonContentDescription,label);      mDefaultActivityButton.setContentDescription(contentDescription);    }    mAdapter.setShowDefaultActivity(false,false);  } else {    mDefaultActivityButton.setVisibility(View.GONE);  }  if (mDefaultActivityButton.getVisibility() == VISIBLE) {    mActivityChooserContent.setBackgroundDrawable(mActivityChooserContentBackground);  } else {    mActivityChooserContent.setBackgroundDrawable(null);    mActivityChooserContent.setPadding(0,0,0,0);  }}  }
class C{  public static int fieldModifiers(){  return PUBLIC | PROTECTED | PRIVATE| STATIC| FINAL| TRANSIENT| VOLATILE;}  }
class C{  protected void notifyListeners(DatasetChangeEvent event){  Object[] listeners=this.listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == DatasetChangeListener.class) {      ((DatasetChangeListener)listeners[i + 1]).datasetChanged(event);    }  }}  }
class C{  public void writeEntry(String tag,String logMsg){  writeEntry(TrackerEntry.createEntry(tag,logMsg));}  }
class C{  public static void append(Path file,Writer writer,boolean writeBom) throws IOException {  append(file,writer,Charset.defaultCharset().name(),writeBom);}  }
class C{  public HalfEdge prevNode(){  HalfEdge e=this;  while (e.degree() == 2) {    e=e.prev();    if (e == this)     return null;  }  return e;}  }
class C{  public CompactHashSet(){  this(INITIAL_SIZE);}  }
class C{  public Token(CharSequence text,int start,int end){  append(text);  setOffset(start,end);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TMETHOD__DECLARED_FINAL:    return isDeclaredFinal();case TypesPackage.TMETHOD__DECLARED_STATIC:  return isDeclaredStatic();case TypesPackage.TMETHOD__DECLARED_OVERRIDE:return isDeclaredOverride();case TypesPackage.TMETHOD__HAS_NO_BODY:return isHasNoBody();case TypesPackage.TMETHOD__DECLARED_MEMBER_ACCESS_MODIFIER:return getDeclaredMemberAccessModifier();case TypesPackage.TMETHOD__DECLARED_ABSTRACT:return isDeclaredAbstract();case TypesPackage.TMETHOD__LACKS_THIS_OR_SUPER_USAGE:return isLacksThisOrSuperUsage();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public void addEventLine(EventLine line){  System.out.println(ESC_COLOR_RESET + line + ESC_COLOR_INPUT);}  }
class C{  @RequestMapping(value="/download/single/initiation/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}" + "/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}" + "/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}"+ "/businessObjectDataVersions/{businessObjectDataVersion}",method=RequestMethod.GET) @Secured(SecurityFunctions.FN_DOWNLOAD_GET) public DownloadSingleInitiationResponse initiateDownloadSingle(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@PathVariable("partitionValue") String partitionValue,@PathVariable("businessObjectDataVersion") Integer businessObjectDataVersion){  return uploadDownloadService.initiateDownloadSingle(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,partitionValue,businessObjectDataVersion);}  }
class C{  void checkForClass(String clazz) throws ClassNotFoundException {  Class.forName(clazz,false,getClass().getClassLoader());}  }
class C{  public PlainSaslAuthenticator(final Vertx vertx){  this.vertx=Objects.requireNonNull(vertx);}  }
class C{  static String[] DefPrefixes(String prefix){  if (prefix.equals("")) {    return new String[]{""};  }  String[] split=prefix.split("!");  String[] result=new String[split.length + 1];  for (int i=0; i < result.length; i++) {    if (i == 0) {      result[i]="";    } else {      result[i]=result[i - 1] + split[i - 1];    }    if (i != 0) {      result[i]=result[i] + "!";    }  }  return result;}  }
class C{  @Override public String toString(){  return "CUdeviceptr[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + ","+ "byteOffset="+ getByteOffset()+ "]";}  }
class C{  public void closeEntityManager(){  EntityManagerHolder emHolder=(EntityManagerHolder)TransactionSynchronizationManager.getResource(getEntityManagerFactory());  if (emHolder == null) {    return;  }  logger.debug("Closing JPA EntityManager in EntityManagerUtil");  EntityManagerFactoryUtils.closeEntityManager(emHolder.getEntityManager());}  }
class C{  public void cmd(String cmd){  cmdLine.cmd(getProject().getProjectDir(),cmd);}  }
class C{  @Override public void generateRss(XmlWriter w,String elementName,RssFormat rssFormat) throws IOException {switch (rssFormat) {case FULL_HTML:    StringWriter sw=new StringWriter();  XmlWriter xw=new XmlWriter(sw);xw.innerXml(xhtml.getBlob());w.simpleElement(Namespaces.rssNs,elementName,null,sw.toString());break;case PLAIN_TEXT:w.simpleElement(Namespaces.rssNs,elementName,null,getPlainText());break;default :assert false;}}  }
class C{  public boolean equals(lalr_item_set other){  if (other == null || other.size() != size())   return false;  try {    return is_subset_of(other);  } catch (  internal_error e) {    e.crash();    return false;  }}  }
class C{  public boolean removeMetric(final String name){  return this.metricRegistry.remove(name);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:28.686 -0500",hash_original_method="C5F540EE3212366BBE1CC045B8933E13",hash_generated_method="262E961EDDD689037F17F32869A44BE3") public void userActivity(long when,boolean noChangeLights){  try {    mService.userActivity(when,noChangeLights);  } catch (  RemoteException e) {  }}  }
class C{  public X500Principal(byte[] name){  if (name == null) {    throw new IllegalArgumentException("Name cannot be null");  }  try {    dn=(Name)Name.ASN1.decode(name);  } catch (  IOException e) {    throw incorrectInputEncoding(e);  }}  }
class C{  public void deleteBackup(String backupTag){  checkOnStandby();  validateBackupName(backupTag);  InterProcessLock lock=null;  try {    lock=getLock(BackupConstants.BACKUP_LOCK,BackupConstants.LOCK_TIMEOUT,TimeUnit.MILLISECONDS);    deleteBackupWithoutLock(backupTag,false);  }  finally {    releaseLock(lock);  }}  }
class C{  public int decrement(int offset){  return increment(-offset);}  }
class C{  public boolean equalTo(FXGVersion version){  return (compareTo(version) == 0);}  }
class C{  private void validateMaxFileSize(){  String maxFileSizeStr=carbonProperties.getProperty(CarbonCommonConstants.MAX_FILE_SIZE,CarbonCommonConstants.MAX_FILE_SIZE_DEFAULT_VAL);  try {    int maxFileSize=Integer.parseInt(maxFileSizeStr);    if (maxFileSize < CarbonCommonConstants.MAX_FILE_SIZE_DEFAULT_VAL_MIN_VAL || maxFileSize > CarbonCommonConstants.MAX_FILE_SIZE_DEFAULT_VAL_MAX_VAL) {      LOGGER.info("The max file size value \"" + maxFileSizeStr + "\" is invalid. Using the default value \""+ CarbonCommonConstants.MAX_FILE_SIZE_DEFAULT_VAL);      carbonProperties.setProperty(CarbonCommonConstants.MAX_FILE_SIZE,CarbonCommonConstants.MAX_FILE_SIZE_DEFAULT_VAL);    }  } catch (  NumberFormatException e) {    LOGGER.info("The max file size value \"" + maxFileSizeStr + "\" is invalid. Using the default value \""+ CarbonCommonConstants.MAX_FILE_SIZE_DEFAULT_VAL);    carbonProperties.setProperty(CarbonCommonConstants.MAX_FILE_SIZE,CarbonCommonConstants.MAX_FILE_SIZE_DEFAULT_VAL);  }}  }
class C{  public void putTypeDescription(String extension,String typeDescription){  typeDescriptions.put(extension,typeDescription);}  }
class C{  @Override public DOMHandler beginCssLikeSelection(){  selectedElements=new Elements();  return this;}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public boolean exists(ID id){  return findOne(id) != null;}  }
class C{  public static boolean isApng(File file){  boolean isApng=false;  try {    PngReaderApng reader=new PngReaderApng(file);    reader.end();    int apngNumFrames=reader.getApngNumFrames();    isApng=apngNumFrames > 1;  } catch (  Exception e) {    if (enableDebugLog)     FLog.w("Error: %s",e.toString());  }  return isApng;}  }
class C{  public long id(FeedType type){  return type == FeedType.PROMOTED ? promotedId : id;}  }
class C{  @Override public boolean onInterceptTouchEvent(MotionEvent ev){  try {    if (isImmersiveSwipe(ev))     return false;    return super.onInterceptTouchEvent(ev);  } catch (  Exception e) {    Logger.e("VerticalViewPager",e);    return false;  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public static Media createMedia(String uri,boolean isVideo) throws IOException {  return createMedia(uri,isVideo,null);}  }
class C{  public static void write(int x1,int y1,int w,int h,int[] pix,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.RASTER_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_RASTER);  dos.writeByte(RENDERTYPE_XY);  dos.writeByte(COLORMODEL_DIRECT);  dos.writeInt(x1);  dos.writeInt(y1);  dos.writeInt(w);  dos.writeInt(h);  dos.writeInt(pix.length);  for (int i=0; i < pix.length; i++) {    dos.writeInt(pix[i]);  }  properties.write(dos);}  }
class C{  public int newLocal(final Type type){  Object t;switch (type.getSort()) {case Type.BOOLEAN:case Type.CHAR:case Type.BYTE:case Type.SHORT:case Type.INT:    t=Opcodes.INTEGER;  break;case Type.FLOAT:t=Opcodes.FLOAT;break;case Type.LONG:t=Opcodes.LONG;break;case Type.DOUBLE:t=Opcodes.DOUBLE;break;case Type.ARRAY:t=type.getDescriptor();break;default :t=type.getInternalName();break;}int local=newLocalMapping(type);setLocalType(local,type);setFrameLocal(local,t);return local;}  }
class C{  private RtpPacket parseRtpPacket(byte[] data){  RtpPacket packet=new RtpPacket();  try {    packet.length=data.length;    packet.receivedAt=System.currentTimeMillis();    packet.extension=(data[0] & 0x10) > 0;    if ((byte)((data[1] & 0xff) & 0x80) == (byte)0x80) {      packet.marker=1;    } else {      packet.marker=0;    }    packet.payloadType=(byte)((data[1] & 0xff) & 0x7f);    packet.seqnum=(char)((data[2] << 8) | (data[3] & 0xff));    packet.timestamp=(((data[4] & 0xff) << 24) | ((data[5] & 0xff) << 16) | ((data[6] & 0xff) << 8)| (data[7] & 0xff));    packet.ssrc=(((data[8] & 0xff) << 24) | ((data[9] & 0xff) << 16) | ((data[10] & 0xff) << 8)| (data[11] & 0xff));    if (packet.extension) {      int dataId=11;      int extensionHeaderId=((data[++dataId] & 0xff) << 8) | (data[++dataId] & 0xff);      int length=((data[++dataId] & 0xff) << 8) | (data[++dataId] & 0xff);      if (extensionHeaderId == RtpExtensionHeader.RTP_EXTENSION_HEADER_ID) {        extractExtensionHeader(data,length,dataId,packet);      }      packet.payloadoffset=16 + length * 4;    } else {      packet.payloadoffset=12;    }    packet.payloadlength=packet.length - packet.payloadoffset;    packet.data=new byte[packet.payloadlength];    System.arraycopy(data,packet.payloadoffset,packet.data,0,packet.payloadlength);  } catch (  Exception e) {    return null;  }  return packet;}  }
class C{  public void addPolygon(PositionTextureVertex[] verts,int[][] uv){  try {    for (int i=0; i < verts.length; i++) {      verts[i]=verts[i].setTexturePosition(uv[i][0] / textureWidth,uv[i][1] / textureHeight);    }  }  finally {    addPolygon(verts);  }}  }
class C{  public boolean isDelivered(){  Object oo=get_Value(COLUMNNAME_IsDelivered);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public double adaptedCoefficientOfDetermination(){  int n=getEstimatedResiduals().length;  return 1.0 - ((n - 1.0) / (n * 1.0 - p)) * (1 - coefficientOfDetermination());}  }
class C{  public AWTEventsListener(){  String version=System.getProperty("java.version");  if (version != null) {    runningOnJDK1_4=(version.compareTo("1.4") >= 0);  }  initializeIntrospection();  installListeners();  if (runningOnJDK1_4) {    MenuSelectionManager.defaultManager().addChangeListener(this);  }  EventQueueMonitor.addTopLevelWindowListener(this);}  }
class C{  public final Iterator<AuthorityEntry> authoritiesIterator(){  return mDataAuthorities != null ? mDataAuthorities.iterator() : null;}  }
class C{  public void testFormatContact(){  Log.i(TAG,"testFormatContact");  try {    ContactId contact=ContactUtil.getInstance(mContext).formatContact("06 81 63 90 59");    Log.i(TAG,"Formatted contact: " + contact.toString());  } catch (  RcsPermissionDeniedException e) {    Log.e(TAG,"Permission denied");  }  assertNotNull(remote);}  }
class C{  private Rectangle findBounds(int AD_WF_Node_ID){  for (int i=0; i < m_nodes.size(); i++) {    WFNode node=(WFNode)m_nodes.get(i);    if (node.getAD_WF_Node_ID() == AD_WF_Node_ID)     return node.getBounds();  }  return null;}  }
class C{  protected void finalize() throws Throwable {  this.parameterEntityResolver=null;  this.attributeDefaultValues.clear();  this.attributeDefaultValues=null;  this.currentElements.clear();  this.currentElements=null;  super.finalize();}  }
class C{  public DCheckUpdate(JFrame parent){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  initComponents();}  }
class C{  public InvalidSearchControlsException(){  super();}  }
class C{  private void addSortedStyle(SelectorMapping mapping,Vector<SelectorMapping> elements){  int size=elements.size();  if (size > 0) {    int specificity=mapping.getSpecificity();    for (int counter=0; counter < size; counter++) {      if (specificity >= elements.elementAt(counter).getSpecificity()) {        elements.insertElementAt(mapping,counter);        return;      }    }  }  elements.addElement(mapping);}  }
class C{  public void endRepresentation(){  if (!representationProtectionsSet) {    if (currentRepresentationProtections != null) {      Collections.sort(currentRepresentationProtections,this);    }    representationProtections=currentRepresentationProtections;    representationProtectionsSet=true;  } else {    if (currentRepresentationProtections == null) {      Assertions.checkState(representationProtections == null);    } else {      Collections.sort(currentRepresentationProtections,this);      Assertions.checkState(currentRepresentationProtections.equals(representationProtections));    }  }  currentRepresentationProtections=null;}  }
class C{  private void performTest(){  if (engine == null) {    testResultLabel.clear();    return;  }  final Path testRepPath=testRepPathField.getPath();  if (!Files.exists(testRepPath) || Files.isDirectory(testRepPath)) {    testResultLabel.setNotAvailable("No test replay selected.");    return;  }  final Path testResult=engine.apply(testRepPath);  if (testResult == null)   testResultLabel.setError("Failed to parse replay!"); else   testResultLabel.setSuccess(testResult.toString());}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 3:{        addNullToken();        return firstToken;      }case 24:    break;case 13:{    addToken(Token.LITERAL_CHAR);  }case 25:break;case 15:{start=zzMarkedPos - 2;yybegin(LONGSTRING);}case 26:break;case 19:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 27:break;case 4:{addToken(Token.WHITESPACE);}case 28:break;case 2:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 29:break;case 17:{addToken(Token.RESERVED_WORD);}case 30:break;case 21:{start=zzMarkedPos - 4;yybegin(MLC);}case 31:break;case 7:{addToken(Token.SEPARATOR);}case 32:break;case 1:{addToken(Token.IDENTIFIER);}case 33:break;case 18:{addToken(Token.FUNCTION);}case 34:break;case 5:{addToken(Token.ERROR_CHAR);addNullToken();return firstToken;}case 35:break;case 6:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 36:break;case 23:{addToken(Token.DATA_TYPE);}case 37:break;case 22:{addToken(Token.LITERAL_BOOLEAN);}case 38:break;case 20:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 39:break;case 14:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 40:break;case 11:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 41:break;case 12:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);return firstToken;}case 42:break;case 8:{addToken(Token.OPERATOR);}case 43:break;case 16:{start=zzMarkedPos - 2;yybegin(LINECOMMENT);}case 44:break;case 9:{}case 45:break;case 10:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 46:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case YYINITIAL:{addNullToken();return firstToken;}case 202:break;case LONGSTRING:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 203:break;case LINECOMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);return firstToken;}case 204:break;case MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 205:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  protected void handleFailedRequest(String taskId,TaskList taskList,List<Volume> volumes,ServiceCoded sc,boolean markInactive){  for (  TaskResourceRep volumeTask : taskList.getTaskList()) {    volumeTask.setState(Operation.Status.error.name());    volumeTask.setMessage(sc.getMessage());    URI resourceURI=volumeTask.getResource().getId();    DataObject dataObject=null;    if (URIUtil.isType(resourceURI,BlockConsistencyGroup.class)) {      dataObject=_dbClient.queryObject(BlockConsistencyGroup.class,resourceURI);    } else     if (URIUtil.isType(resourceURI,VolumeGroup.class)) {      dataObject=_dbClient.queryObject(VolumeGroup.class,resourceURI);    } else {      dataObject=_dbClient.queryObject(Volume.class,resourceURI);    }    Operation op=dataObject.getOpStatus().get(taskId);    if (op != null) {      op.error(sc);      dataObject.getOpStatus().updateTaskStatus(taskId,op);      _dbClient.updateObject(dataObject);    }  }  if (markInactive) {    for (    Volume volume : volumes) {      volume.setInactive(true);      _dbClient.updateObject(volume);    }  }}  }
class C{  public void clear(){  this.referent=null;}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  assert getLayoutParams().height == LayoutParams.WRAP_CONTENT : "InfoBar heights cannot be constrained.";  int unspecifiedSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);  for (int i=0; i < getChildCount(); i++) {    measureChild(getChildAt(i),unspecifiedSpec,unspecifiedSpec);  }  mWidth=Math.max(MeasureSpec.getSize(widthMeasureSpec),mMinWidth);  mTop=mBottom=0;  placeGroups();  setMeasuredDimension(mWidth,resolveSize(mBottom,heightMeasureSpec));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void dismiss(){  if (mDialog.isShowing()) {    mDialog.dismiss();  }}  }
class C{  protected void resetSizeAt(int index){  sizes[index]=0;  doReset=true;}  }
class C{  public static void createSimple() throws Exception {  MemoryStore memoryStore=new MemoryStore();  LuceneSail lucenesail=new LuceneSail();  lucenesail.setParameter(LuceneSail.INDEX_CLASS_KEY,ElasticsearchIndex.class.getName());  lucenesail.setBaseSail(memoryStore);  SailRepository repository=new SailRepository(lucenesail);  repository.initialize();  SailRepositoryConnection connection=repository.getConnection();  try {    connection.begin();    connection.add(ElasticsearchSailExample.class.getResourceAsStream("/org/openrdf/sail/lucene/examples/foaf.rdfs"),"",RDFFormat.RDFXML);    connection.commit();    String queryString="PREFIX search:   <" + LuceneSailSchema.NAMESPACE + "> \n"+ "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n"+ "SELECT * WHERE { \n"+ "?subject search:matches ?match . \n"+ "?match search:query \"person\" ; \n"+ "       search:property ?property ; \n"+ "       search:score ?score ; \n"+ "       search:snippet ?snippet . \n"+ "?subject rdf:type ?type . \n"+ "} LIMIT 3 \n"+ "BINDINGS ?type { \n"+ " (<http://www.w3.org/2002/07/owl#Class>) \n"+ "}";    tupleQuery(queryString,connection);    queryString="PREFIX search: <" + LuceneSailSchema.NAMESPACE + "> \n"+ "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> \n"+ "SELECT * WHERE { \n"+ "?subject rdfs:domain ?domain . \n"+ "?subject search:matches ?match . \n"+ "?match search:query \"chat\" ; \n"+ "       search:score ?score . \n"+ "?domain search:matches ?match2 . \n"+ "?match2 search:query \"person\" ; \n"+ "        search:score ?score2 . \n"+ "} LIMIT 5";    tupleQuery(queryString,connection);    queryString="PREFIX search:   <" + LuceneSailSchema.NAMESPACE + "> \n"+ "SELECT * WHERE { \n"+ "{ SELECT * WHERE { \n"+ "  ?subject search:matches ?match . \n"+ "  ?match search:query \"person\" ; \n"+ "         search:property ?property ; \n"+ "         search:score ?score ; \n"+ "         search:snippet ?snippet . \n"+ "} } \n"+ "FILTER(CONTAINS(STR(?subject), \"Person\")) \n"+ "} \n"+ "";    tupleQuery(queryString,connection);    queryString="PREFIX search: <" + LuceneSailSchema.NAMESPACE + "> \n"+ "PREFIX foaf: <http://xmlns.com/foaf/0.1/> \n"+ "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> \n"+ "CONSTRUCT { ?x rdfs:domain foaf:Person } \n"+ "WHERE { \n"+ "?x rdfs:domain foaf:Person . \n"+ "?x search:matches ?match . \n"+ "?match search:query \"homepage\" ; \n"+ "       search:property ?property ; \n"+ "       search:score ?score ; \n"+ "       search:snippet ?snippet . \n"+ "} LIMIT 3 \n";    graphQuery(queryString,connection);  }  finally {    connection.close();    repository.shutDown();  }}  }
class C{  @DSSink({DSSinkKind.SMS_MMS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:52.982 -0500",hash_original_method="D2AB66A7ACEF0D4C8C4D01478F148AA5",hash_generated_method="21DC2D4654A30F5918F7D07B4E0FBB8F") public boolean enableCellBroadcast(int messageIdentifier){  boolean success=false;  try {    ISms iccISms=ISms.Stub.asInterface(ServiceManager.getService("isms"));    if (iccISms != null) {      success=iccISms.enableCellBroadcast(messageIdentifier);    }  } catch (  RemoteException ex) {  }  return success;}  }
class C{  private void testTransferRate(){  Assert.assertNotNull(mExpectedTransferRateOps);  Assert.assertNotNull(mExpectedTransferRateBps);  Assert.assertTrue(mExpectedTransferRateBps.intValue() > 0);  Assert.assertTrue(mExpectedTransferRateOps.intValue() > 0);}  }
class C{  public static float intersectRayTriangleFront(float originX,float originY,float originZ,float dirX,float dirY,float dirZ,float v0X,float v0Y,float v0Z,float v1X,float v1Y,float v1Z,float v2X,float v2Y,float v2Z,float epsilon){  float edge1X=v1X - v0X;  float edge1Y=v1Y - v0Y;  float edge1Z=v1Z - v0Z;  float edge2X=v2X - v0X;  float edge2Y=v2Y - v0Y;  float edge2Z=v2Z - v0Z;  float pvecX=dirY * edge2Z - dirZ * edge2Y;  float pvecY=dirZ * edge2X - dirX * edge2Z;  float pvecZ=dirX * edge2Y - dirY * edge2X;  float det=edge1X * pvecX + edge1Y * pvecY + edge1Z * pvecZ;  if (det <= epsilon)   return -1.0f;  float tvecX=originX - v0X;  float tvecY=originY - v0Y;  float tvecZ=originZ - v0Z;  float u=tvecX * pvecX + tvecY * pvecY + tvecZ * pvecZ;  if (u < 0.0f || u > det)   return -1.0f;  float qvecX=tvecY * edge1Z - tvecZ * edge1Y;  float qvecY=tvecZ * edge1X - tvecX * edge1Z;  float qvecZ=tvecX * edge1Y - tvecY * edge1X;  float v=dirX * qvecX + dirY * qvecY + dirZ * qvecZ;  if (v < 0.0f || u + v > det)   return -1.0f;  float invDet=1.0f / det;  float t=(edge2X * qvecX + edge2Y * qvecY + edge2Z * qvecZ) * invDet;  return t;}  }
class C{  public void connectPort(AbstractPortController p){  istream=p.getInputStream();  ostream=p.getOutputStream();  if (controller != null) {    log.warn("connectPort: connect called while connected");  }  controller=p;}  }
class C{  @Override public String toString(){  return name;}  }
class C{  public GmlPoint(Point point){  if (point != null) {    if (!(point instanceof GmlPos)) {      point=new GmlPos(point);    }    setExtension(point);  }}  }
class C{  @Override protected Iterable<?> orderDomainValues(Variable var,Assignment assignment,CSP csp){  if (!isLCVHeuristicEnabled) {    return csp.getDomain(var);  } else {    return applyLeastConstrainingValueHeuristic(var,csp);  }}  }
class C{  public static void colorIcons(Menu menu,int color){  MenuTint.on(menu).setMenuItemIconColor(color).apply();}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  protected String dot(String base){  return dot(base,"");}  }
class C{  public static long[] values(Long[] array){  long[] dest=new long[array.length];  for (int i=0; i < array.length; i++) {    Long v=array[i];    if (v != null) {      dest[i]=v.longValue();    }  }  return dest;}  }
class C{  public static void handleError(String errorMessage,SimpleMethod method,Element element) throws ValidationException {  ValidationException e=new ValidationException(errorMessage,method,element);  if (strictOn()) {    throw e;  } else {    Debug.logWarning(e.getMessage(),module);  }}  }
class C{  public synchronized void onSuccess(){  reset();}  }
class C{  public boolean isTouched(Rect touchRect){  return Rect.intersects(this.touchRect,touchRect);}  }
class C{  private static Map<String,List<String>> splitQuery(Uri uri) throws UnsupportedEncodingException {  final Map<String,List<String>> query_pairs=new LinkedHashMap<>();  String query=uri.getQuery();  if (query == null)   return query_pairs;  final String[] pairs=query.split("&");  for (  String pair : pairs) {    final int idx=pair.indexOf("=");    final String key=idx > 0 ? URLDecoder.decode(pair.substring(0,idx),"UTF-8") : pair;    if (!query_pairs.containsKey(key)) {      query_pairs.put(key,new LinkedList<String>());    }    final String value=idx > 0 && pair.length() > idx + 1 ? URLDecoder.decode(pair.substring(idx + 1),"UTF-8") : "";    query_pairs.get(key).add(value);  }  return query_pairs;}  }
class C{  public static boolean contains(double x1,double y1,double w1,double h1,double x2,double y2,double w2,double h2){  return x1 <= x2 && y1 <= y2 && x1 + w1 >= x2 + w2 && y1 + h1 >= y2 + h2;}  }
class C{  public static Lexicon buildNameLexicon(){  Lexicon l=new Lexicon();  String[] names={"John","Mary","Boston","Xiao","Hollie","Kendrick","Beverly","Garnet","Zora","Shavonda","Peg","Katherin","Beatriz","Deirdre","Gaylord","Desirae","Tresa","Gwyneth","Rashida","Garfield","Pinkie","Claretta","Teressa","Andy","Eugena","Carie","Dinorah","Tess","Johnie","Keely","Antonetta","Darcey","Bud","Veta","Janey","Rosalina","Frederica","Lou","Essie","Marinda","Elene","Juliana","Marilyn","Maxima","Branden","Ethan","Donovan","Erinn","Ramon","Jacquiline"};  for (int i=0; i < names.length; i++) {    l.addLexWords("NAME",names[i],"0.02");  }  return l;}  }
class C{  protected void fireTreeStructureChanged(Object source,Object[] path,int[] childIndices,Object[] children){  Object[] listeners=listenerList.getListenerList();  TreeModelEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeModelListener.class) {      if (e == null)       e=new TreeModelEvent(source,path,childIndices,children);      ((TreeModelListener)listeners[i + 1]).treeStructureChanged(e);    }  }}  }
class C{  public Entry(int hash,Element element,int locationLine,int locationColumn,Entry next){  super(element);  this.hash=hash;  this.locationLine=locationLine;  this.locationColumn=locationColumn;  this.next=next;}  }
class C{  public BasicDataFileStore(){  String configPath=Configuration.getStringValue(AVKey.DATA_FILE_STORE_CONFIGURATION_FILE_NAME);  if (configPath == null) {    String message=Logging.getMessage("FileStore.NoConfiguration");    Logging.logger().severe(message);    throw new IllegalStateException(message);  }  java.io.InputStream is=null;  File configFile=new File(configPath);  if (configFile.exists()) {    try {      is=new FileInputStream(configFile);    } catch (    FileNotFoundException e) {      String message=Logging.getMessage("FileStore.LocalConfigFileNotFound",configPath);      Logging.logger().finest(message);    }  }  if (is == null) {    is=this.getClass().getClassLoader().getResourceAsStream(configPath);  }  if (is == null) {    String message=Logging.getMessage("FileStore.ConfigurationNotFound",configPath);    Logging.logger().severe(message);    throw new IllegalStateException(message);  }  this.initialize(is);}  }
class C{  public boolean aggregateContains(int row,VisualItem member){  return getAggregatedRow(row,member) >= 0;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitDoubleMemberValue(this);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSSink({DSSinkKind.DATABASE}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.457 -0500",hash_original_method="70AF33973781662CA48B1120B9D51D5F",hash_generated_method="3AA8A3379FD3EF5E8F74AFA39939EA2C") public void bind(int index,String value){  if (value == null) {    mPreparedStatement.bindNull(index);  } else {    mPreparedStatement.bindString(index,value);  }}  }
class C{  private void enlarge(final int size){  int length1=2 * data.length;  int length2=length + size;  byte[] newData=new byte[length1 > length2 ? length1 : length2];  System.arraycopy(data,0,newData,0,length);  data=newData;}  }
class C{  public Output compile(StringContext context) throws CompilationException {  final ImportStack importStack=new ImportStack();  return adapter.compile(context,importStack);}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if ((tipoBusqueda == TIPO_BUSQUEDA_POR_GESTOR) && StringUtils.isBlank(gestor))   errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(TransferenciasConstants.LABEL_TRANSFERENCIAS_USER_GESTOR,request.getLocale())));  return errors;}  }
class C{  public void replace(ClassNode type){  int size=stack.size();  try {    if (size == 0)     throw new ArrayIndexOutOfBoundsException("size==0");  } catch (  ArrayIndexOutOfBoundsException ai) {    System.err.println("index problem in " + controller.getSourceUnit().getName());    throw ai;  }  stack.set(size - 1,type);}  }
class C{  public void write(int c) throws IOException {  if (binaryMode) {    super.write(c);    return;  }  if (seenCR) {    if (c != '\n')     super.write(0);    super.write(c);    if (c != '\r')     seenCR=false;  } else {    if (c == '\n') {      super.write('\r');      super.write('\n');      return;    }    if (c == '\r') {      if (stickyCRLF)       seenCR=true; else {        super.write('\r');        c=0;      }    }    super.write(c);  }}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,false);}  }
class C{  @Override public List<NativeModule> createNativeModules(ReactApplicationContext reactContext){  return new ArrayList<>();}  }
class C{  public static void removeChannelIfDisconnected(Channel ch){  if (ch != null && !ch.isConnected()) {    ch.removeAttribute(CHANNEL_KEY);  }}  }
class C{  public void onSuccess(int statusCode,JSONObject response){  onSuccess(response);}  }
class C{  public OrganizationRemovedException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  private List<InstalledApp> _initialize_data(){  String where_clause="_isignored = 0";  Activity activity=getActivity();  if (activity != null) {    SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(activity);    boolean show_system=pref.getBoolean(SettingsFragment.KEY_PREF_SHOW_SYSTEM,false);    if (!show_system) {      where_clause+=" and _systemapp = 0";    }  }  List<InstalledApp> installed_apps=InstalledApp.find(InstalledApp.class,where_clause);  if (installed_apps.size() == 0 && activity != null) {    Log.v(MainActivity.TAG,"Populating database...");    InstalledApp.generate_applist_from_system(activity.getPackageManager());    installed_apps=InstalledApp.find(InstalledApp.class,"_systemapp = 0 AND _isignored = 0");    Log.v(MainActivity.TAG,"...database populated. " + InstalledApp.count(InstalledApp.class) + " records created.");    activity.invalidateOptionsMenu();  } else   if (activity != null) {    Log.v(MainActivity.TAG,installed_apps.size() + " records read from the database.");  }  return installed_apps;}  }
class C{  private static String stripAppleSpanFromMarkup(String markup){  StringBuilder stripped=new StringBuilder(markup);  int prefixBegIdx=stripped.indexOf(APPLE_SPAN_PREFIX);  while (prefixBegIdx >= 0) {    int prefixEndIdx=stripped.indexOf(">",prefixBegIdx) + 1;    stripped.replace(prefixBegIdx,prefixEndIdx,"");    int suffixBegIdx=stripped.lastIndexOf(APPLE_SPAN_SUFFIX);    int suffixEndIdx=suffixBegIdx + APPLE_SPAN_SUFFIX.length();    stripped.replace(suffixBegIdx,suffixEndIdx,"");    prefixBegIdx=stripped.indexOf(APPLE_SPAN_PREFIX);  }  return stripped.toString();}  }
class C{  public BaseRowSet(){  listeners=new Vector<RowSetListener>();}  }
class C{  public NumberTextField(double initialValue,double multiply,double add){  this(null,initialValue,multiply,add);}  }
class C{  public static void main(String[] args) throws Exception {  String nameOfNRCTrain="";  String nameOfGUMLTTrain="";  String nameOfKLUETrain="";  int evalmodelmode=0;  int trainmodelmode=0;  Options options=new Options();  options.addOption("on",true,"output Name");  options.addOption("tf",true,"Name of the NRC Trainfile");  options.addOption("tf2",true,"Name of the GU-MLT-LT Trainfile");  options.addOption("tf3",true,"Name of the KLUE Trainfile");  options.addOption("em",true,"Eval Modelmode");  options.addOption("tm",true,"Train Modelmode");  CommandLineParser parser=new GnuParser();  try {    String name="";    CommandLine line=parser.parse(options,args);    if (line.hasOption("on")) {      name="_" + line.getOptionValue("on");    }    if (line.hasOption("tf")) {      nameOfNRCTrain=line.getOptionValue("tf");    }    if (line.hasOption("tf2")) {      nameOfGUMLTTrain=line.getOptionValue("tf2");    }    if (line.hasOption("tf3")) {      nameOfKLUETrain=line.getOptionValue("tf3");    }    if (line.hasOption("em")) {      evalmodelmode=Integer.parseInt(line.getOptionValue("em"));    }    if (line.hasOption("tm")) {      trainmodelmode=Integer.parseInt(line.getOptionValue("tm"));    }    String[] argList=line.getArgs();    PATH=argList[1];    SentimentanalysisECIR sentimentanalysis=new SentimentanalysisECIR(PATH);switch (argList[0]) {case "eval":      sentimentanalysis.testSystem(evalmodelmode,nameOfNRCTrain);    break;case "evalAll":  sentimentanalysis.testAllSystem(nameOfNRCTrain,nameOfGUMLTTrain,nameOfKLUETrain);break;case "train":sentimentanalysis.trainSystem(trainmodelmode,name);break;case "trainAll":sentimentanalysis.trainAllSystems(name);break;default :throw new IllegalArgumentException("Invalid mode: " + argList[0]);}} catch (ParseException exp) {System.err.println("Parsing failed.  Reason: " + exp.getMessage());}long endTime=System.currentTimeMillis();System.out.println("It took " + ((endTime - startTime) / 1000) + " seconds");}  }
class C{  public String toString(){  return getName();}  }
class C{  protected void analyze(SampledGraphProjection<?,?,?> graph,String output){  try {    Level level=Logger.getRootLogger().getLevel();    Logger.getRootLogger().setLevel(Level.WARN);    for (    PiEstimator estimator : estimators) {      estimator.update(graph);    }    for (    Entry<String,AnalyzerTask> task : tasks.entrySet()) {      String taskOutput=String.format("%1$s/%2$s/",output,task.getKey());      File file=makeDirectories(taskOutput);      task.getValue().setOutputDirectoy(file.getAbsolutePath());      GraphAnalyzer.analyze(graph,task.getValue(),file.getAbsolutePath());    }    Logger.getRootLogger().setLevel(level);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void receiveErrorgetAlarms(java.lang.Exception e){}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.PARAMETERIZED_CALL_EXPRESSION__TYPE_ARGS:    getTypeArgs().clear();  return;case N4JSPackage.PARAMETERIZED_CALL_EXPRESSION__TARGET:setTarget((Expression)null);return;case N4JSPackage.PARAMETERIZED_CALL_EXPRESSION__ARGUMENTS:getArguments().clear();return;}super.eUnset(featureID);}  }
class C{  public static Text createText(Composite parent,int style,int hspan,int width,int height,int fill){  Text t=new Text(parent,style);  t.setFont(parent.getFont());  GridData gd=new GridData(fill);  gd.horizontalSpan=hspan;  gd.widthHint=width;  gd.heightHint=height;  t.setLayoutData(gd);  return t;}  }
class C{  public static void showFlowgraphSettingsDialog(final JFrame parent){  final ZyGraphViewSettings settings=ConfigManager.instance().getDefaultFlowGraphSettings();  final CGraphSettingsDialog dlg=new CGraphSettingsDialog(parent,"Initial Flow graph Settings",settings,true,false);  dlg.setVisible(true);  ConfigManager.instance().updateFlowgraphSettings(settings);  ConfigManager.instance().saveSettings(parent);}  }
class C{  public static boolean isValidEmail(String email){  Matcher matcher=validEmailPattern.matcher(email);  return matcher.find();}  }
class C{  public boolean isRippleCentered(){  return this.mRippleCentered;}  }
class C{  @CloudUnitSecurable @ResponseBody @RequestMapping(value="/alias",method=RequestMethod.POST) public JsonResponse addAlias(@RequestBody JsonInput input) throws ServiceException, CheckException {  if (logger.isDebugEnabled()) {    logger.debug(input.toString());  }  User user=this.authentificationUtils.getAuthentificatedUser();  Application application=applicationService.findByNameAndUser(user,input.getApplicationName());  CheckUtils.validateInput(input.getApplicationName(),"check.app.name");  CheckUtils.validateInput(input.getAlias(),"check.alias.name");  this.authentificationUtils.canStartNewAction(user,application,Locale.ENGLISH);  this.applicationService.addNewAlias(application,input.getAlias());  return new HttpOk();}  }
class C{  public RelTraitSet traitSet(){  return getPlanner().emptyTraitSet();}  }
class C{  protected Instances makeTestDataset(int seed,int numInstances,int numNominal,int numNumeric,int numString,int numDate,int numRelational,int numClasses,int classType,boolean multiInstance) throws Exception {  return makeTestDataset(seed,numInstances,numNominal,numNumeric,numString,numDate,numRelational,numClasses,classType,TestInstances.CLASS_IS_LAST,multiInstance);}  }
class C{  @Override public ValueLob copyToTemp(){  ValueLob lob;  if (type == CLOB) {    lob=ValueLob.createClob(getReader(),precision);  } else {    lob=ValueLob.createBlob(getInputStream(),precision);  }  return lob;}  }
class C{  public boolean containsValue(Object value){  if (value == null) {    for (int i=0, isize=data.length; i < isize; i++) {      HashEntry entry=data[i];      while (entry != null) {        if (entry.getValue() == null) {          return true;        }        entry=entry.next;      }    }  } else {    for (int i=0, isize=data.length; i < isize; i++) {      HashEntry entry=data[i];      while (entry != null) {        if (isEqualValue(value,entry.getValue())) {          return true;        }        entry=entry.next;      }    }  }  return false;}  }
class C{  public boolean isOccupant(final RPEntity entity){  return targets.contains(entity.getID());}  }
class C{  public static SupportedCurrency findOrCreate(DataService mgr,String currencyCode) throws NonUniqueBusinessKeyException {  SupportedCurrency result=(SupportedCurrency)mgr.find(new SupportedCurrency(currencyCode));  if (result == null) {    result=persistCurrency(mgr,currencyCode);  }  return result;}  }
class C{  public String limitLen(int maxlen,String string,String suffix){  String ret=string;  if (string.length() > maxlen) {    ret=string.substring(0,maxlen - suffix.length()) + suffix;  }  return ret;}  }
class C{  @Override public void updateDataCycle(Cycle cycle){  dataCycle=cycle;  dataCycleStream.onNext(dataCycle);}  }
class C{  public static IFilledList<ICallgraphView> loadCallgraphViews(final AbstractSQLProvider provider,final CModule module,final CTagManager viewTagManager,final CTagManager nodeTagManager) throws CouldntLoadDataException {  return loadModuleCallgraphs(provider,module,viewTagManager,nodeTagManager,ViewType.NonNative);}  }
class C{  public void onSendTextFinished(String text,boolean done){  if (TextDirectionHeuristicsCompat.FIRSTSTRONG_LTR.isRtl(text,0,text.length())) {    text=new StringBuilder(text).reverse().toString();  }  Input.SendText action=new Input.SendText(text,done);  action.execute(hostManager.getConnection(),null,null);}  }
class C{  public ObjIdConcurrentMap(int initialCapacity,float loadFactor){  this(initialCapacity,loadFactor,DEFAULT_CONCURRENCY_LEVEL);}  }
class C{  public SuffixArraySample sample(final int[] sourceQuery,int maxSamples,int minBound,int maxBound){  return sample(sourceQuery,maxSamples,minBound,maxBound,false);}  }
class C{  private Thread fullGetFirstQueuedThread(){  Node h, s;  Thread st;  if (((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null) || ((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null))   return st;  Node t=tail;  Thread firstThread=null;  while (t != null && t != head) {    Thread tt=t.thread;    if (tt != null)     firstThread=tt;    t=t.prev;  }  return firstThread;}  }
class C{  public TransformVariablesXHat(BBOBFunction function,long seed){  super(function);  this.seed=seed;}  }
class C{  private synchronized void _serializeDateTime(DateTime dateTime,StringBuilder sb){  Calendar c=JREDateTimeUtil.getThreadCalendar(ThreadLocalPageContext.getTimeZone());  c.setTime(dateTime);  sb.append(goIn());  sb.append("new Date(");  sb.append(c.get(Calendar.YEAR));  sb.append(",");  sb.append(c.get(Calendar.MONTH));  sb.append(",");  sb.append(c.get(Calendar.DAY_OF_MONTH));  sb.append(",");  sb.append(c.get(Calendar.HOUR_OF_DAY));  sb.append(",");  sb.append(c.get(Calendar.MINUTE));  sb.append(",");  sb.append(c.get(Calendar.SECOND));  sb.append(");");}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Node textNode;  int nodeType;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testAddr=(Element)elementList.item(0);  textNode=testAddr.getFirstChild();  nodeType=(int)textNode.getNodeType();  assertEquals("nodeTextNodeTypeAssert1",3,nodeType);}  }
class C{  public static _ExecutionSettingEnum fromString(final String value) throws SOAPSerializationException {  return (_ExecutionSettingEnum)Enumeration.fromString(value,_ExecutionSettingEnum.VALUES_TO_INSTANCES);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:17.148 -0500",hash_original_method="8CB3016823DC727CE96A9F34A7CC13A4",hash_generated_method="5A20A63F96B1A47B139B807B81054F73") public static Formatter formatDateRange(Context context,Formatter formatter,long startMillis,long endMillis,int flags,String timeZone){  Resources res=Resources.getSystem();  boolean showTime=(flags & FORMAT_SHOW_TIME) != 0;  boolean showWeekDay=(flags & FORMAT_SHOW_WEEKDAY) != 0;  boolean showYear=(flags & FORMAT_SHOW_YEAR) != 0;  boolean noYear=(flags & FORMAT_NO_YEAR) != 0;  boolean useUTC=(flags & FORMAT_UTC) != 0;  boolean abbrevWeekDay=(flags & (FORMAT_ABBREV_WEEKDAY | FORMAT_ABBREV_ALL)) != 0;  boolean abbrevMonth=(flags & (FORMAT_ABBREV_MONTH | FORMAT_ABBREV_ALL)) != 0;  boolean noMonthDay=(flags & FORMAT_NO_MONTH_DAY) != 0;  boolean numericDate=(flags & FORMAT_NUMERIC_DATE) != 0;  boolean isInstant=(startMillis == endMillis);  Time startDate;  if (timeZone != null) {    startDate=new Time(timeZone);  } else   if (useUTC) {    startDate=new Time(Time.TIMEZONE_UTC);  } else {    startDate=new Time();  }  startDate.set(startMillis);  Time endDate;  int dayDistance;  if (isInstant) {    endDate=startDate;    dayDistance=0;  } else {    if (timeZone != null) {      endDate=new Time(timeZone);    } else     if (useUTC) {      endDate=new Time(Time.TIMEZONE_UTC);    } else {      endDate=new Time();    }    endDate.set(endMillis);    int startJulianDay=Time.getJulianDay(startMillis,startDate.gmtoff);    int endJulianDay=Time.getJulianDay(endMillis,endDate.gmtoff);    dayDistance=endJulianDay - startJulianDay;  }  if (!isInstant && (endDate.hour | endDate.minute | endDate.second) == 0 && (!showTime || dayDistance <= 1)) {    endDate.monthDay-=1;    endDate.normalize(true);  }  int startDay=startDate.monthDay;  int startMonthNum=startDate.month;  int startYear=startDate.year;  int endDay=endDate.monthDay;  int endMonthNum=endDate.month;  int endYear=endDate.year;  String startWeekDayString="";  String endWeekDayString="";  if (showWeekDay) {    String weekDayFormat="";    if (abbrevWeekDay) {      weekDayFormat=ABBREV_WEEKDAY_FORMAT;    } else {      weekDayFormat=WEEKDAY_FORMAT;    }    startWeekDayString=startDate.format(weekDayFormat);    endWeekDayString=isInstant ? startWeekDayString : endDate.format(weekDayFormat);  }  String startTimeString="";  String endTimeString="";  if (showTime) {    String startTimeFormat="";    String endTimeFormat="";    boolean force24Hour=(flags & FORMAT_24HOUR) != 0;    boolean force12Hour=(flags & FORMAT_12HOUR) != 0;    boolean use24Hour;    if (force24Hour) {      use24Hour=true;    } else     if (force12Hour) {      use24Hour=false;    } else {      use24Hour=DateFormat.is24HourFormat(context);    }    if (use24Hour) {      startTimeFormat=endTimeFormat=res.getString(com.android.internal.R.string.hour_minute_24);    } else {      boolean abbrevTime=(flags & (FORMAT_ABBREV_TIME | FORMAT_ABBREV_ALL)) != 0;      boolean capAMPM=(flags & FORMAT_CAP_AMPM) != 0;      boolean noNoon=(flags & FORMAT_NO_NOON) != 0;      boolean capNoon=(flags & FORMAT_CAP_NOON) != 0;      boolean noMidnight=(flags & FORMAT_NO_MIDNIGHT) != 0;      boolean capMidnight=(flags & FORMAT_CAP_MIDNIGHT) != 0;      boolean startOnTheHour=startDate.minute == 0 && startDate.second == 0;      boolean endOnTheHour=endDate.minute == 0 && endDate.second == 0;      if (abbrevTime && startOnTheHour) {        if (capAMPM) {          startTimeFormat=res.getString(com.android.internal.R.string.hour_cap_ampm);        } else {          startTimeFormat=res.getString(com.android.internal.R.string.hour_ampm);        }      } else {        if (capAMPM) {          startTimeFormat=res.getString(com.android.internal.R.string.hour_minute_cap_ampm);        } else {          startTimeFormat=res.getString(com.android.internal.R.string.hour_minute_ampm);        }      }      if (!isInstant) {        if (abbrevTime && endOnTheHour) {          if (capAMPM) {            endTimeFormat=res.getString(com.android.internal.R.string.hour_cap_ampm);          } else {            endTimeFormat=res.getString(com.android.internal.R.string.hour_ampm);          }        } else {          if (capAMPM) {            endTimeFormat=res.getString(com.android.internal.R.string.hour_minute_cap_ampm);          } else {            endTimeFormat=res.getString(com.android.internal.R.string.hour_minute_ampm);          }        }        if (endDate.hour == 12 && endOnTheHour && !noNoon) {          if (capNoon) {            endTimeFormat=res.getString(com.android.internal.R.string.Noon);          } else {            endTimeFormat=res.getString(com.android.internal.R.string.noon);          }        } else         if (endDate.hour == 0 && endOnTheHour && !noMidnight) {          if (capMidnight) {            endTimeFormat=res.getString(com.android.internal.R.string.Midnight);          } else {            endTimeFormat=res.getString(com.android.internal.R.string.midnight);          }        }      }      if (startDate.hour == 12 && startOnTheHour && !noNoon) {        if (capNoon) {          startTimeFormat=res.getString(com.android.internal.R.string.Noon);        } else {          startTimeFormat=res.getString(com.android.internal.R.string.noon);        }      }    }    startTimeString=startDate.format(startTimeFormat);    endTimeString=isInstant ? startTimeString : endDate.format(endTimeFormat);  }  if (showYear) {  } else   if (noYear) {    showYear=false;  } else   if (startYear != endYear) {    showYear=true;  } else {    Time currentTime=new Time();    currentTime.setToNow();    showYear=startYear != currentTime.year;  }  String defaultDateFormat, fullFormat, dateRange;  if (numericDate) {    defaultDateFormat=res.getString(com.android.internal.R.string.numeric_date);  } else   if (showYear) {    if (abbrevMonth) {      if (noMonthDay) {        defaultDateFormat=res.getString(com.android.internal.R.string.abbrev_month_year);      } else {        defaultDateFormat=res.getString(com.android.internal.R.string.abbrev_month_day_year);      }    } else {      if (noMonthDay) {        defaultDateFormat=res.getString(com.android.internal.R.string.month_year);      } else {        defaultDateFormat=res.getString(com.android.internal.R.string.month_day_year);      }    }  } else {    if (abbrevMonth) {      if (noMonthDay) {        defaultDateFormat=res.getString(com.android.internal.R.string.abbrev_month);      } else {        defaultDateFormat=res.getString(com.android.internal.R.string.abbrev_month_day);      }    } else {      if (noMonthDay) {        defaultDateFormat=res.getString(com.android.internal.R.string.month);      } else {        defaultDateFormat=res.getString(com.android.internal.R.string.month_day);      }    }  }  if (showWeekDay) {    if (showTime) {      fullFormat=res.getString(com.android.internal.R.string.wday1_date1_time1_wday2_date2_time2);    } else {      fullFormat=res.getString(com.android.internal.R.string.wday1_date1_wday2_date2);    }  } else {    if (showTime) {      fullFormat=res.getString(com.android.internal.R.string.date1_time1_date2_time2);    } else {      fullFormat=res.getString(com.android.internal.R.string.date1_date2);    }  }  if (noMonthDay && startMonthNum == endMonthNum && startYear == endYear) {    return formatter.format("%s",startDate.format(defaultDateFormat));  }  if (startYear != endYear || noMonthDay) {    String startDateString=startDate.format(defaultDateFormat);    String endDateString=endDate.format(defaultDateFormat);    return formatter.format(fullFormat,startWeekDayString,startDateString,startTimeString,endWeekDayString,endDateString,endTimeString);  }  String monthFormat;  if (numericDate) {    monthFormat=NUMERIC_MONTH_FORMAT;  } else   if (abbrevMonth) {    monthFormat=res.getString(com.android.internal.R.string.short_format_month);  } else {    monthFormat=MONTH_FORMAT;  }  String startMonthString=startDate.format(monthFormat);  String startMonthDayString=startDate.format(MONTH_DAY_FORMAT);  String startYearString=startDate.format(YEAR_FORMAT);  String endMonthString=isInstant ? null : endDate.format(monthFormat);  String endMonthDayString=isInstant ? null : endDate.format(MONTH_DAY_FORMAT);  String endYearString=isInstant ? null : endDate.format(YEAR_FORMAT);  if (startMonthNum != endMonthNum) {    int index=0;    if (showWeekDay)     index=1;    if (showYear)     index+=2;    if (showTime)     index+=4;    if (numericDate)     index+=8;    int resId=sameYearTable[index];    fullFormat=res.getString(resId);    return formatter.format(fullFormat,startWeekDayString,startMonthString,startMonthDayString,startYearString,startTimeString,endWeekDayString,endMonthString,endMonthDayString,endYearString,endTimeString);  }  if (startDay != endDay) {    int index=0;    if (showWeekDay)     index=1;    if (showYear)     index+=2;    if (showTime)     index+=4;    if (numericDate)     index+=8;    int resId=sameMonthTable[index];    fullFormat=res.getString(resId);    return formatter.format(fullFormat,startWeekDayString,startMonthString,startMonthDayString,startYearString,startTimeString,endWeekDayString,endMonthString,endMonthDayString,endYearString,endTimeString);  }  boolean showDate=(flags & FORMAT_SHOW_DATE) != 0;  if (!showTime && !showDate && !showWeekDay)   showDate=true;  String timeString="";  if (showTime) {    if (isInstant) {      timeString=startTimeString;    } else {      String timeFormat=res.getString(com.android.internal.R.string.time1_time2);      timeString=String.format(timeFormat,startTimeString,endTimeString);    }  }  fullFormat="";  String dateString="";  if (showDate) {    dateString=startDate.format(defaultDateFormat);    if (showWeekDay) {      if (showTime) {        fullFormat=res.getString(com.android.internal.R.string.time_wday_date);      } else {        fullFormat=res.getString(com.android.internal.R.string.wday_date);      }    } else {      if (showTime) {        fullFormat=res.getString(com.android.internal.R.string.time_date);      } else {        return formatter.format("%s",dateString);      }    }  } else   if (showWeekDay) {    if (showTime) {      fullFormat=res.getString(com.android.internal.R.string.time_wday);    } else {      return formatter.format("%s",startWeekDayString);    }  } else   if (showTime) {    return formatter.format("%s",timeString);  }  return formatter.format(fullFormat,timeString,startWeekDayString,dateString);}  }
class C{  public void deactivate(){  int actionMask=0;  if (currentEditable != null) {    actionMask=currentEditable.getActionMask();  }  deactivate(actionMask);}  }
class C{  private void checkServerResponseCode(HttpURLConnection urlConnection) throws RequestFailureException {  try {    if (urlConnection.getResponseCode() != 200) {      throw new RequestFailureException("Received " + urlConnection.getResponseCode() + " code instead of 200 (OK) from the server.  Aborting.");    }  } catch (  IOException e) {    throw new RequestFailureException("Failed to read response code from server: ",e);  }}  }
class C{  public static RedditPostFragment newInstance(String param1,String param2){  RedditPostFragment fragment=new RedditPostFragment();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putString(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  public void xor(ShiftingBitSet set){  int wordsInCommon=Math.min(wordsInUse,set.wordsInUse);  if (wordsInUse < set.wordsInUse) {    ensureCapacity(set.wordsInUse);    wordsInUse=set.wordsInUse;  }  for (int i=0; i < wordsInCommon; i++)   words[i]^=set.words[i];  if (wordsInCommon < set.wordsInUse)   System.arraycopy(set.words,wordsInCommon,words,wordsInCommon,set.wordsInUse - wordsInCommon);  recalculateWordsInUse();  checkInvariants();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:19.018 -0500",hash_original_method="70B1862B4F6250E0DD71D86C1C84F44C",hash_generated_method="A3DE51B2043BB8B2898D278AD98EF725") @Deprecated public static boolean cacheDisabled(){  return mDisabled;}  }
class C{  protected ChannelCalculatorCommon assignCalcObjectContinuous(String selectedCalcType) throws Exception {  if (selectedCalcType.equalsIgnoreCase(CALC_TYPE_GAUSSIAN)) {    return new TransferEntropyCalculatorGaussian();  } else   if (selectedCalcType.equalsIgnoreCase(CALC_TYPE_KRASKOV)) {    return new TransferEntropyCalculatorKraskov();  } else   if (selectedCalcType.equalsIgnoreCase(CALC_TYPE_KERNEL)) {    return new TransferEntropyCalculatorKernel();  } else {    throw new Exception("No recognised continuous calculator selected: " + selectedCalcType);  }}  }
class C{  public SolrConfig() throws ParserConfigurationException, IOException, SAXException {  this((SolrResourceLoader)null,DEFAULT_CONF_FILE,null);}  }
class C{  public static void main(String[] args){  FindWithCapabilities find;  Vector<String> list;  String result;  int i;  boolean printMisses;  Iterator<Capability> iter;  boolean first;  printMisses=false;  try {    find=new FindWithCapabilities();    try {      printMisses=Utils.getFlag("misses",args);      find.setOptions(args);      Utils.checkForRemainingOptions(args);    } catch (    Exception ex) {      result=ex.getMessage() + "\n\n" + find.getClass().getName().replaceAll(".*\\.","")+ " Options:\n\n";      Enumeration<Option> enm=find.listOptions();      while (enm.hasMoreElements()) {        Option option=enm.nextElement();        result+=option.synopsis() + "\n" + option.description()+ "\n";      }      throw new Exception(result);    }    System.out.println("\nSearching for the following Capabilities:");    System.out.print("- allowed: ");    iter=find.getCapabilities().capabilities();    first=true;    while (iter.hasNext()) {      if (!first) {        System.out.print(", ");      }      first=false;      System.out.print(iter.next());    }    System.out.println();    System.out.print("- not allowed: ");    iter=find.getNotCapabilities().capabilities();    first=true;    if (iter.hasNext()) {      while (iter.hasNext()) {        if (!first) {          System.out.print(", ");        }        first=false;        System.out.print(iter.next());      }      System.out.println();    } else {      System.out.println("-");    }    find.find();    list=find.getMatches();    if (list.size() == 1) {      System.out.println("\nFound " + list.size() + " class that matched the criteria:\n");    } else {      System.out.println("\nFound " + list.size() + " classes that matched the criteria:\n");    }    for (i=0; i < list.size(); i++) {      System.out.println(list.get(i));    }    if (printMisses) {      list=find.getMisses();      if (list.size() == 1) {        System.out.println("\nFound " + list.size() + " class that didn't match the criteria:\n");      } else {        System.out.println("\nFound " + list.size() + " classes that didn't match the criteria:\n");      }      for (i=0; i < list.size(); i++) {        System.out.println(list.get(i));      }    }    System.out.println();  } catch (  Exception ex) {    System.err.println(ex.getMessage());  }}  }
class C{  UUID senderNodeId(){  return sndNode.id();}  }
class C{  public boolean isHittable(){  return hittable && !hit && !destroyed&& !missing;}  }
class C{  private static Object runJUnit3Test(Class scriptClass){  try {    Object testSuite=InvokerHelper.invokeConstructorOf("junit.framework.TestSuite",new Object[]{scriptClass});    return InvokerHelper.invokeStaticMethod("junit.textui.TestRunner","run",new Object[]{testSuite});  } catch (  ClassNotFoundException e) {    throw new GroovyRuntimeException("Failed to run the unit test. JUnit is not on the Classpath.",e);  }}  }
class C{  public ObjectArrayList copy(){  return (ObjectArrayList)clone();}  }
class C{  public ReceiveFileTransfer acceptResumeAndTransfer(File destination,long startPosition) throws IOException, InterruptedException {  ReceiveFileTransfer transfer=acceptResume(destination,startPosition);  transfer.transfer();  return transfer;}  }
class C{  @Override public String toString(){  return "LogKillEventCommand [frozenKilled=" + frozenKilled + ", frozenKiller="+ frozenKiller+ "]";}  }
class C{  public int optInt(String key){  return optInt(key,0);}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || getClass() != o.getClass()) {    return false;  }  if (!super.equals(o)) {    return false;  }  final SimpleClassLabel that=(SimpleClassLabel)o;  return label.equals(that.label);}  }
class C{  public void registerMediaButtonIntent(PendingIntent mediaIntent,ComponentName eventReceiver,IBinder token){  Log.i(TAG,"  Remote Control   registerMediaButtonIntent() for " + mediaIntent);synchronized (mAudioFocusLock) {synchronized (mRCStack) {      pushMediaButtonReceiver_syncAfRcs(mediaIntent,eventReceiver,token);      checkUpdateRemoteControlDisplay_syncAfRcs(RC_INFO_ALL);    }  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:24.254 -0500",hash_original_method="6B7A6AA30AC9918948A2664C57D48C07",hash_generated_method="6B7A6AA30AC9918948A2664C57D48C07") void append(byte[] xml,int offset,int length) throws SAXException {  try {    appendBytes(this.pointer,xml,offset,length);  } catch (  ExpatException e) {    throw new ParseException(e.getMessage(),this.locator);  }}  }
class C{  private void initTreeMap(){  if (entityType == null) {    entityType="Mouse";  }  if (entityType.equalsIgnoreCase("Circle")) {    imageMap=RotatingEntityManager.getCircle();  }  if (entityType.equalsIgnoreCase("Mouse")) {    imageMap=RotatingEntityManager.getMouse();  } else   if (entityType.equalsIgnoreCase("Amy")) {    imageMap=RotatingEntityManager.getRotatingTileset("amy",20);  } else   if (entityType.equalsIgnoreCase("Arnold")) {    imageMap=RotatingEntityManager.getRotatingTileset("arno",20);  } else   if (entityType.equalsIgnoreCase("Boy")) {    imageMap=RotatingEntityManager.getRotatingTileset("boy",20);  } else   if (entityType.equalsIgnoreCase("Cow")) {    imageMap=RotatingEntityManager.getRotatingTileset("cow",25);  } else   if (entityType.equalsIgnoreCase("Girl")) {    imageMap=RotatingEntityManager.getRotatingTileset("girl",20);  } else   if (entityType.equalsIgnoreCase("Lion")) {    imageMap=RotatingEntityManager.getRotatingTileset("lion",15);  } else   if (entityType.equalsIgnoreCase("Susi")) {    imageMap=RotatingEntityManager.getRotatingTileset("susi",20);  } else   if (entityType.equalsIgnoreCase("Jake")) {    imageMap=RotatingEntityManager.getRotatingTileset("jake",20);  } else   if (entityType.equalsIgnoreCase("Steve")) {    imageMap=RotatingEntityManager.getRotatingTileset("steve",20);  }  update();}  }
class C{  public static SecretKeys generateKeyFromPassword(String password,String salt) throws GeneralSecurityException {  return generateKeyFromPassword(password,Base64.decode(salt,BASE64_FLAGS));}  }
class C{  @Override protected Object convertToType(final Class type,final Object value) throws Throwable {  return new URL(value.toString());}  }
class C{  public boolean scheduleOnce(final Steppable event,final int ordering){synchronized (lock) {    return _scheduleOnce(new Key(time + 1.0,ordering),event);  }}  }
class C{  ResolvedMigration extractMigrationInfo(JavaMigration javaMigration){  Integer checksum=null;  if (javaMigration instanceof MigrationChecksumProvider) {    MigrationChecksumProvider checksumProvider=(MigrationChecksumProvider)javaMigration;    checksum=checksumProvider.getChecksum();  }  MigrationVersion version;  String description;  if (javaMigration instanceof MigrationInfoProvider) {    MigrationInfoProvider infoProvider=(MigrationInfoProvider)javaMigration;    version=infoProvider.getVersion();    description=infoProvider.getDescription();    if (!StringUtils.hasText(description)) {      throw new CassandraMigrationException("Missing description for migration " + version);    }  } else {    Pair<MigrationVersion,String> info=MigrationInfoHelper.extractVersionAndDescription(ClassUtils.getShortName(javaMigration.getClass()),"V","__","");    version=info.getLeft();    description=info.getRight();  }  String script=javaMigration.getClass().getName();  ResolvedMigration resolvedMigration=new ResolvedMigration();  resolvedMigration.setVersion(version);  resolvedMigration.setDescription(description);  resolvedMigration.setScript(script);  resolvedMigration.setChecksum(checksum);  resolvedMigration.setType(MigrationType.JAVA_DRIVER);  return resolvedMigration;}  }
class C{  protected void threadStop(){  if (thread == null) {    return;  }  threadDone=true;  thread.interrupt();  try {    thread.join();  } catch (  InterruptedException e) {    ;  }  thread=null;}  }
class C{  public String map(String typeName){  return typeName;}  }
class C{  public int next(){  TreeNode n=stack.pop();  pushAll(n.right);  return n.val;}  }
class C{  public boolean isRunning(){  return mIsRunning;}  }
class C{  public void sendSerialMessage(SerialMessage m,SerialListener reply){  sendMessage(m,reply);}  }
class C{  public MariaDbBlob(byte[] bytes){  if (bytes == null) {    throw new AssertionError("byte array is null");  }  this.blobContent=bytes;  this.actualSize=bytes.length;}  }
class C{  public static void warningcallRFFI(Object call,String message){  warningCallInvoke(call,RDataFactory.createStringVectorFromScalar(message));}  }
class C{  public ZeroLengthPath(Scope scope,Var subject,Var object){  this(scope,subject,object,null);}  }
class C{  @Parameterized.Parameters public static Collection<Object[]> params(){  return Arrays.asList(new Object[][]{{"/?x=y"},{"/robots.txt"},{"/xsl/layout.xsl"},{"/css/main.css"},{"/images/logo.svg"},{"/images/logo.png"}});}  }
class C{  static public void addTransformHandles(Figure f,Collection<Handle> handles){  handles.add(new BoundsOutlineHandle(f,true,false));  if (f.isTransformable()) {    addCornerTransformHandles(f,handles);    addEdgeTransformHandles(f,handles);    handles.add(new RotateHandle(f));  }}  }
class C{  @Deprecated public boolean readInstance(Reader reader) throws IOException {  ArffReader arff=new ArffReader(reader,this,m_Lines,1);  Instance inst=arff.readInstance(arff.getData(),false);  m_Lines=arff.getLineNo();  if (inst != null) {    add(inst);    return true;  } else {    return false;  }}  }
class C{  public MissingLabelsCondition(ExampleSet exampleSet,String parameterString){}  }
class C{  public int compareTo(Object other){  @SuppressWarnings("unchecked") Ranking<V> otherRanking=(Ranking<V>)other;  return Double.compare(otherRanking.rankScore,rankScore);}  }
class C{  public void error(JSONObject message){  try {    WritableMap writableMap=SQLitePluginConverter.jsonToReact(message);    errorCallback.invoke(writableMap);  } catch (  JSONException ex) {    errorCallback.invoke("Internal error converting results:" + ex.getMessage());  }}  }
class C{  public synchronized void nominate(CandidatePair pair) throws IllegalStateException {  if (!isControlling()) {    throw new IllegalStateException("Only controlling agents can nominate pairs");  }  Component parentComponent=pair.getParentComponent();  IceMediaStream parentStream=parentComponent.getParentStream();  if (!pair.isNominated() && !parentStream.validListContainsNomineeForComponent(parentComponent)) {    logger.info("verify if nominated pair answer again");    pair.nominate();    parentStream.getCheckList().scheduleTriggeredCheck(pair);  }}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public void deleteInstances(){  int[] indices;  if (m_TableArff.getSelectedRow() == -1) {    return;  }  indices=m_TableArff.getSelectedRows();  ((ArffSortedTableModel)m_TableArff.getModel()).deleteInstances(indices);}  }
class C{  public void testAllowAccess(){  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_settings),true);  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.settings_advanced));  assertTrue(EndToEndTestUtils.SOLO.waitForText(trackListActivity.getString(R.string.settings_sharing_allow_access),1,EndToEndTestUtils.NORMAL_WAIT_TIME));  EndToEndTestUtils.SOLO.clickOnCheckBox(0);  assertTrue(EndToEndTestUtils.SOLO.waitForText(trackListActivity.getString(R.string.settings_sharing_allow_access_confirm_message),1,EndToEndTestUtils.NORMAL_WAIT_TIME));  EndToEndTestUtils.SOLO.clickOnButton(trackListActivity.getString(R.string.generic_yes));  instrumentation.waitForIdleSync();  assertEquals(true,EndToEndTestUtils.SOLO.getCurrentViews(CheckBox.class).get(0).isChecked());  EndToEndTestUtils.SOLO.goBack();}  }
class C{  private FixedAllocator establishFreeFixedAllocator(final int block){  final ArrayList<FixedAllocator> list=m_freeFixed[block];  for (int i=0; i < list.size(); i++) {    FixedAllocator f=list.get(i);    if (!isOnCommitList(f)) {      list.remove(i);      return f;    }  }  final int allocSize=64 * m_allocSizes[block];  final FixedAllocator allocator=new FixedAllocator(this,allocSize);  allocator.setIndex(m_allocs.size());  m_allocs.add(allocator);  if (m_storageStats != null) {    m_storageStats.register(allocator,true);  }  return allocator;}  }
class C{  private void appendValueAsString(StringBuffer buffer,String value){  buffer.append("\"" + value + "\"");}  }
class C{  public void close(){  try {    this.connection.close();  } catch (  Exception e) {    System.err.println("JdbcXYDataset: swallowing exception.");  }}  }
class C{  private void removeOldCertificateValues(){  final Element toRemove=xadesSignature.getCertificateValues();  if (toRemove != null) {    unsignedSignaturePropertiesDom.removeChild(toRemove);    xadesSignature.resetCertificateSource();  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public static Throwable shouldFail(Class clazz,String script){  Throwable th=null;  try {    GroovyShell shell=new GroovyShell();    shell.evaluate(script,genericScriptName());  } catch (  GroovyRuntimeException gre) {    th=ScriptBytecodeAdapter.unwrap(gre);  }catch (  Throwable e) {    th=e;  }  if (th == null) {    fail("Script should have failed with an exception of type " + clazz.getName());  } else   if (!clazz.isInstance(th)) {    fail("Script should have failed with an exception of type " + clazz.getName() + ", instead got Exception "+ th);  }  return th;}  }
class C{  public boolean wasLastRunPaused(){  return mPrefs.getBoolean(KEY_LAST_RUN_PAUSED,false);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private static boolean isViewDescendantOf(View child,View parent){  if (child == parent) {    return true;  }  final ViewParent theParent=child.getParent();  return (theParent instanceof ViewGroup) && isViewDescendantOf((View)theParent,parent);}  }
class C{  public LocalResult(){}  }
class C{  public static Object newProxyInstance(List<ClassLoader> classLoadersToTry,Class<?>[] minimumSetOfInterfaces,Class<?>[] interfaces,InvocationHandler delegate) throws IllegalArgumentException {  Object ret=null;  try {    ret=newProxyInstance(classLoadersToTry,interfaces,delegate);  } catch (  IllegalArgumentException someClassNotFound) {    if (LOGGER.isTraceEnabled()) {      LOGGER.logTrace("could not create Atomikos proxy with all requested interfaces - trying again with minimum set of interfaces");    }    ret=newProxyInstance(classLoadersToTry,minimumSetOfInterfaces,delegate);  }  return ret;}  }
class C{  public void paintScrollBarTrackBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintScrollBarTrackBackground(context,g,x,y,w,h);}  }
class C{  public FrameworkException(){  super();}  }
class C{  @Post public String handlePost(String fmJson){  IFirewallService firewall=(IFirewallService)getContext().getAttributes().get(IFirewallService.class.getCanonicalName());  String newMask;  try {    newMask=jsonExtractSubnetMask(fmJson);  } catch (  IOException e) {    log.error("Error parsing new subnet mask: " + fmJson,e);    return "{\"status\" : \"Error! Could not parse new subnet mask, see log for details.\"}";  }  firewall.setSubnetMask(newMask);  return ("{\"status\" : \"subnet mask set\"}");}  }
class C{  public static String toString(byte[] id){  StringBuilder buff=new StringBuilder();  ByteBuffer idBuffer=ByteBuffer.wrap(id);  long length=0;  while (idBuffer.hasRemaining()) {    long block;    int len;switch (idBuffer.get()) {case 0:      len=DataUtils.readVarInt(idBuffer);    idBuffer.position(idBuffer.position() + len);  buff.append("data len=").append(len);length+=len;break;case 1:len=DataUtils.readVarInt(idBuffer);length+=len;block=DataUtils.readVarLong(idBuffer);buff.append("block ").append(block).append(" len=").append(len);break;case 2:len=DataUtils.readVarInt(idBuffer);length+=DataUtils.readVarLong(idBuffer);block=DataUtils.readVarLong(idBuffer);buff.append("indirect block ").append(block).append(" len=").append(len);break;default :buff.append("error");}buff.append(", ");}buff.append("length=").append(length);return buff.toString();}  }
class C{  private XML checksGlobalAbsence(Class<?> aClass){  if (!classExists(aClass))   Error.xmlClassInexistent(this.xmlPath,aClass);  if (findXmlClass(aClass).global != null)   Error.xmlGlobalExistent(aClass);  return this;}  }
class C{  final void refillStats() throws IOException {  final int offset=statsBlockOrd * numSkipInfo;  final int statsFP=(int)skipInfo[offset];  statsReader.setPosition(statsFP);  for (int i=0; i < INTERVAL && !statsReader.eof(); i++) {    int code=statsReader.readVInt();    if (hasFreqs()) {      docFreq[i]=(code >>> 1);      if ((code & 1) == 1) {        totalTermFreq[i]=docFreq[i];      } else {        totalTermFreq[i]=docFreq[i] + statsReader.readVLong();      }    } else {      docFreq[i]=code;    }  }}  }
class C{  @Override public IAgent firstValue(final IScope scope) throws GamaRuntimeException {  if (populationSets.size() == 0) {    return null;  }  return populationSets.get(0).firstValue(scope);}  }
class C{  public static String separatorsToUnix(String path){  if (path == null || path.indexOf(WINDOWS_SEPARATOR) == -1) {    return path;  }  return path.replace(WINDOWS_SEPARATOR,UNIX_SEPARATOR);}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public void testWithAlt() throws Exception {  Benchmark bm=execBenchmark(altAlg(true));  assertNotNull(bm);  assertNotNull(bm.getRunData().getPoints());}  }
class C{  private void enlargeOffset(){  if (offset == 0) {    offCount=offCount == 0 ? 1 : offCount * 2;    offset=offCount;    Object[] narr=new Object[arr.length + offset];    for (int i=0; i < size; i++) {      narr[offset + i]=arr[i];    }    arr=narr;  }}  }
class C{  protected byte[] newBuffer(int size){  return new byte[size];}  }
class C{  public Object load(String yaml){  return loadFromReader(new StreamReader(yaml),Object.class);}  }
class C{  public String runComplete(final EvolutionState state){  for (int x=0; x < state.population.subpops.length; x++)   for (int y=0; y < state.population.subpops[x].individuals.length; y++)   if (state.population.subpops[x].individuals[y].fitness.isIdealFitness())   return "Individual " + y + " of subpopulation "+ x+ " has an ideal fitness.";  if (runComplete != null)   return runComplete; else   return null;}  }
class C{  public int loadUnsigned16(int addr){  return (loadUnsigned8(addr) << 8) | loadUnsigned8(addr + 1);}  }
class C{  private void augmentEdge(RVMMethod caller,int bcIndex,RVMMethod callee,double weight){  CallSite callSite=new CallSite(caller,bcIndex);  WeightedCallTargets targets=callGraph.get(callSite);  if (targets == null) {    targets=WeightedCallTargets.create(callee,weight);    callGraph.put(callSite,targets);  } else {    WeightedCallTargets orig=targets;    targets=targets.augmentCount(callee,weight);    if (orig != targets) {      callGraph.put(callSite,targets);    }  }  totalEdgeWeights+=weight;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:55.079 -0500",hash_original_method="63614CD0FCED93BBCAC192EC682E4A51",hash_generated_method="A76D80282249E7E9D8EEBB57A30E4E4A") private String makeEscaped(String name){  int length=name.length();  if (length == 0) {    return name;  }  StringBuilder buf=new StringBuilder(length * 2);  for (int index=0; index < length; index++) {    char ch=name.charAt(index);switch (ch) {case ' ':      if (index == 0 || index == (length - 1)) {        buf.append('\\');      }    buf.append(' ');  break;case '"':case '\\':hasQE=true;buf.append('\\');buf.append(ch);break;case ',':case '+':case '<':case '>':case ';':case '#':case '=':buf.append('\\');buf.append(ch);break;default :buf.append(ch);break;}}return buf.toString();}  }
class C{  public DirectColorModel(ColorSpace space,int bits,int rmask,int gmask,int bmask,int amask,boolean isAlphaPremultiplied,int transferType){  super(space,bits,rmask,gmask,bmask,amask,isAlphaPremultiplied,amask == 0 ? Transparency.OPAQUE : Transparency.TRANSLUCENT,transferType);  if (ColorModel.isLinearRGBspace(colorSpace)) {    is_LinearRGB=true;    if (maxBits <= 8) {      lRGBprecision=8;      tosRGB8LUT=ColorModel.getLinearRGB8TosRGB8LUT();      fromsRGB8LUT8=ColorModel.getsRGB8ToLinearRGB8LUT();    } else {      lRGBprecision=16;      tosRGB8LUT=ColorModel.getLinearRGB16TosRGB8LUT();      fromsRGB8LUT16=ColorModel.getsRGB8ToLinearRGB16LUT();    }  } else   if (!is_sRGB) {    for (int i=0; i < 3; i++) {      if ((space.getMinValue(i) != 0.0f) || (space.getMaxValue(i) != 1.0f)) {        throw new IllegalArgumentException("Illegal min/max RGB component value");      }    }  }  setFields();}  }
class C{  public GCMParameterSpec(int tLen,byte[] src){  if (src == null) {    throw new IllegalArgumentException("src array is null");  }  init(tLen,src,0,src.length);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof BorderArrangement)) {    return false;  }  BorderArrangement that=(BorderArrangement)obj;  if (!ObjectUtilities.equal(this.topBlock,that.topBlock)) {    return false;  }  if (!ObjectUtilities.equal(this.bottomBlock,that.bottomBlock)) {    return false;  }  if (!ObjectUtilities.equal(this.leftBlock,that.leftBlock)) {    return false;  }  if (!ObjectUtilities.equal(this.rightBlock,that.rightBlock)) {    return false;  }  if (!ObjectUtilities.equal(this.centerBlock,that.centerBlock)) {    return false;  }  return true;}  }
class C{  public static void trimIndentation(String[] lines,IJavaProject project,boolean considerFirstLine){  trimIndentation(lines,CodeFormatterUtil.getTabWidth(project),CodeFormatterUtil.getIndentWidth(project),considerFirstLine);}  }
class C{  private Map<URI,StorageSystem> buildArrayMap(List<VolumeDescriptor> descriptors,VolumeDescriptor.Type type){  Map<URI,StorageSystem> arrayMap=new HashMap<URI,StorageSystem>();  if (type != null) {    descriptors=VolumeDescriptor.filterByType(descriptors,new VolumeDescriptor.Type[]{type},new VolumeDescriptor.Type[]{});  }  for (  VolumeDescriptor desc : descriptors) {    if (arrayMap.containsKey(desc.getDeviceURI()) == false) {      StorageSystem array=getDataObject(StorageSystem.class,desc.getDeviceURI(),_dbClient);      arrayMap.put(desc.getDeviceURI(),array);    }  }  return arrayMap;}  }
class C{  @Override public boolean encodingSet(){  return true;}  }
class C{  public void writeXmlText(PrintWriter writer,String prefix){  int indent=4;  StringBuilder indentStrBuf=new StringBuilder();  for (int i=0; i < indent; i++)   indentStrBuf.append(' ');  String indentString=indentStrBuf.toString();  if (prefix == null)   prefix="";  writer.print(indentString);  writer.print('<');  writer.print(prefix);  writer.print(this.getEntityName());  Map<String,String> cdataMap=new HashMap<String,String>();  Iterator<ModelField> modelFields=this.getModelEntity().getFieldsIterator();  while (modelFields.hasNext()) {    ModelField modelField=modelFields.next();    String name=modelField.getName();    String type=modelField.getType();    if (type != null && type.equals("blob")) {      Object obj=get(name);      boolean b1=obj instanceof byte[];      if (b1) {        byte[] binData=(byte[])obj;        String strData=new String(Base64.base64Encode(binData));        cdataMap.put(name,strData);      } else {        Debug.logWarning("Field:" + name + " is not of type 'byte[]'. obj: "+ obj,module);      }    } else {      String valueStr=this.getString(name);      if (valueStr != null) {        StringBuilder value=new StringBuilder(valueStr);        boolean needsCdata=false;        for (int i=0; i < value.length(); i++) {          char curChar=value.charAt(i);switch (curChar) {case '\'':            value.replace(i,i + 1,"&apos;");          break;case '"':        value.replace(i,i + 1,"&quot;");      break;case '&':    value.replace(i,i + 1,"&amp;");  break;case '<':value.replace(i,i + 1,"&lt;");break;case '>':value.replace(i,i + 1,"&gt;");break;case 0xA:needsCdata=true;break;case 0xD:needsCdata=true;break;case 0x9:break;case 0x5:value.replace(i,i + 1,"...");break;case 0x12:value.replace(i,i + 1,"&apos;");break;case 0x13:value.replace(i,i + 1,"&quot;");break;case 0x14:value.replace(i,i + 1,"&quot;");break;case 0x16:value.replace(i,i + 1,"-");break;case 0x17:value.replace(i,i + 1,"-");break;case 0x19:value.replace(i,i + 1,"tm");break;default :if (curChar < 0x20) {Debug.logInfo("Removing invalid character [" + curChar + "] numeric value ["+ (int)curChar+ "] for field "+ name+ " of entity with PK: "+ this.getPrimaryKey().toString(),module);value.deleteCharAt(i);} else if (curChar > 0x7F) {String replacement="&#" + (int)curChar + ";";if (Debug.verboseOn()) {Debug.logVerbose("Entity: " + this.getEntityName() + ", PK: "+ this.getPrimaryKey().toString()+ " -> char ["+ curChar+ "] replaced with ["+ replacement+ "]",module);}value.replace(i,i + 1,replacement);}}}if (needsCdata) {cdataMap.put(name,valueStr);} else {writer.print(' ');writer.print(name);writer.print("=\"");writer.print(value.toString());writer.print("\"");}}}}if (cdataMap.size() == 0) {writer.println("/>");} else {writer.println('>');for (Map.Entry<String,String> entry : cdataMap.entrySet()) {writer.print(indentString);writer.print(indentString);writer.print('<');writer.print(entry.getKey());writer.print("><![CDATA[");writer.print(entry.getValue());writer.print("]]></");writer.print(entry.getKey());writer.println('>');}writer.print(indentString);writer.print("</");writer.print(this.getEntityName());writer.println(">");}}  }
class C{  public void testRobLebowitz() throws Exception {  String text="<ul>" + "    <ul>" + "        <li/>"+ "            <ul>"+ "                <li/>"+ "            </ul>"+ "        <li/>"+ "    </ul>"+ "</ul>";  Document document=DocumentHelper.parseText(text);  List lists=document.selectNodes("//ul | //ol");  int count=0;  for (int i=0; i < lists.size(); i++) {    Element list=(Element)lists.get(i);    List nodes=list.selectNodes("ancestor::ul");    if ((nodes != null) && (nodes.size() > 0)) {      continue;    }    nodes=list.selectNodes("ancestor::ol");    if ((nodes != null) && (nodes.size() > 0)) {      continue;    }  }}  }
class C{  private LiteralOp evalScalarOperation(Hop bop) throws LopsException, DMLRuntimeException, IOException, HopsException {  DataOp tmpWrite=new DataOp(TMP_VARNAME,bop.getDataType(),bop.getValueType(),bop,DataOpTypes.TRANSIENTWRITE,TMP_VARNAME);  Dag<Lop> dag=new Dag<Lop>();  Recompiler.rClearLops(tmpWrite);  Lop lops=tmpWrite.constructLops();  lops.addToDag(dag);  ArrayList<Instruction> inst=dag.getJobs(null,ConfigurationManager.getDMLConfig());  ExecutionContext ec=getExecutionContext();  ProgramBlock pb=getProgramBlock();  pb.setInstructions(inst);  pb.execute(ec);  ScalarObject so=(ScalarObject)ec.getVariable(TMP_VARNAME);  LiteralOp literal=null;switch (so.getValueType()) {case DOUBLE:    literal=new LiteralOp(so.getDoubleValue());  break;case INT:literal=new LiteralOp(so.getLongValue());break;case BOOLEAN:literal=new LiteralOp(so.getBooleanValue());break;case STRING:literal=new LiteralOp(so.getStringValue());break;default :throw new HopsException("Unsupported literal value type: " + bop.getValueType());}tmpWrite.getInput().clear();bop.getParent().remove(tmpWrite);pb.setInstructions(null);ec.getVariables().removeAll();literal.setDim1(0);literal.setDim2(0);literal.setRowsInBlock(-1);literal.setColsInBlock(-1);return literal;}  }
class C{  public boolean isSpecified(String qName){  int idx=getIndex(qName);  if (idx < 0) {    throw new IllegalArgumentException("");  }  String str=mItems[(idx << 3) + 5];  return ((str != null) ? (str.charAt(0) == 'd') : true);}  }
class C{  @Override public Cursor queryCharacter(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){  return mOpenHelper.getReadableDatabase().query(CharacterContract.CharacterEntry.TABLE_NAME,projection,addKeyIdCheckToWhereStatement(selection,ContentUris.parseId(uri)),selectionArgs,null,null,sortOrder);}  }
class C{  public boolean isStateActive(State state){switch (state) {case r1_A:    return stateVector[0] == State.r1_A;case r1_B:  return stateVector[0] == State.r1_B;case r2_B:return stateVector[1] == State.r2_B;default :return false;}}  }
class C{  public CRootNode(final Window dialog,final IViewContainer container,final DefaultTreeModel model){  Preconditions.checkNotNull(container,"IE01822: Container argument can not be null");  final List<INaviAddressSpace> addressSpaces=container.getAddressSpaces();  if (addressSpaces == null) {    final INaviModule module=container.getModules().get(0);    add(new ViewSelectionModuleNode(dialog,module,model));  } else {    for (    final INaviAddressSpace addressSpace : addressSpaces) {      add(new CAddressSpaceNode(dialog,addressSpace,model));    }  }}  }
class C{  public Matrix3d(Matrix3d m1){  this.m00=m1.m00;  this.m01=m1.m01;  this.m02=m1.m02;  this.m10=m1.m10;  this.m11=m1.m11;  this.m12=m1.m12;  this.m20=m1.m20;  this.m21=m1.m21;  this.m22=m1.m22;}  }
class C{  private void grow(){  int newCap=(entries.length << 1) + 1;  Object[] newEntries=new Object[newCap];  System.arraycopy(entries,0,newEntries,0,size);  entries=newEntries;}  }
class C{  @Override public void visitClass(PsiClass aClass){  if (read || written) {    return;  }  super.visitClass(aClass);  final VariableUsedVisitor visitor=new VariableUsedVisitor(variable);  aClass.accept(visitor);  read=visitor.isUsed();}  }
class C{  public boolean verify(String provider) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  return verify(this.getPublicKey(provider),provider);}  }
class C{  public boolean restoreVolumeFromSnapshot(String volumeName,String snapshotName){  if (log.isDebugEnabled()) {    log.debug("Restoring volume from snapshot with params[volName,snapshotName]: " + volumeName + ","+ snapshotName);  }  FlexVolume vol=new FlexVolume(server.getNaServer(),volumeName);  boolean result=vol.restoreVolumeFromSnapshot(snapshotName);  return result;}  }
class C{  public static PropertyEvaluator makeEvaluator(PropertyEvalSpec spec,EventType sourceEventType,String optionalSourceStreamName,EventAdapterService eventAdapterService,EngineImportService engineImportService,final TimeProvider timeProvider,VariableService variableService,TableService tableService,String engineURI,int statementId,String statementName,Annotation[] annotations,Collection<Integer> assignedTypeNumberStack,ConfigurationInformation configuration,NamedWindowMgmtService namedWindowMgmtService,StatementExtensionSvcContext statementExtensionSvcContext) throws ExprValidationException {  int length=spec.getAtoms().size();  ContainedEventEval[] containedEventEvals=new ContainedEventEval[length];  FragmentEventType fragmentEventTypes[]=new FragmentEventType[length];  EventType currentEventType=sourceEventType;  ExprEvaluator whereClauses[]=new ExprEvaluator[length];  List<EventType> streamEventTypes=new ArrayList<EventType>();  List<String> streamNames=new ArrayList<String>();  Map<String,Integer> streamNameAndNumber=new HashMap<String,Integer>();  List<String> expressionTexts=new ArrayList<String>();  ExprEvaluatorContext validateContext=new ExprEvaluatorContextTimeOnly(timeProvider);  streamEventTypes.add(sourceEventType);  streamNames.add(optionalSourceStreamName);  streamNameAndNumber.put(optionalSourceStreamName,0);  expressionTexts.add(sourceEventType.getName());  List<SelectClauseElementCompiled> cumulativeSelectClause=new ArrayList<SelectClauseElementCompiled>();  for (int i=0; i < length; i++) {    PropertyEvalAtom atom=spec.getAtoms().get(i);    ContainedEventEval containedEventEval=null;    String expressionText=null;    EventType streamEventType=null;    FragmentEventType fragmentEventType=null;    if (atom.getSplitterExpression() instanceof ExprIdentNode) {      String propertyName=((ExprIdentNode)atom.getSplitterExpression()).getFullUnresolvedName();      fragmentEventType=currentEventType.getFragmentType(propertyName);      if (fragmentEventType != null) {        EventPropertyGetter getter=currentEventType.getGetter(propertyName);        if (getter != null) {          containedEventEval=new ContainedEventEvalGetter(getter);          expressionText=propertyName;          streamEventType=fragmentEventType.getFragmentType();        }      }    }    if (containedEventEval == null) {      ExprNodeUtility.validatePlainExpression(ExprNodeOrigin.CONTAINEDEVENT,ExprNodeUtility.toExpressionStringMinPrecedenceSafe(atom.getSplitterExpression()),atom.getSplitterExpression());      EventType[] availableTypes=streamEventTypes.toArray(new EventType[streamEventTypes.size()]);      String[] availableStreamNames=streamNames.toArray(new String[streamNames.size()]);      boolean[] isIStreamOnly=new boolean[streamNames.size()];      Arrays.fill(isIStreamOnly,true);      StreamTypeService streamTypeService=new StreamTypeServiceImpl(availableTypes,availableStreamNames,isIStreamOnly,engineURI,false);      ExprValidationContext validationContext=new ExprValidationContext(streamTypeService,engineImportService,statementExtensionSvcContext,null,timeProvider,variableService,tableService,validateContext,eventAdapterService,statementName,statementId,annotations,null,false,false,true,false,null,false);      ExprNode validatedExprNode=ExprNodeUtility.getValidatedSubtree(ExprNodeOrigin.CONTAINEDEVENT,atom.getSplitterExpression(),validationContext);      ExprEvaluator evaluator=validatedExprNode.getExprEvaluator();      if (atom.getOptionalResultEventType() == null) {        throw new ExprValidationException("Missing @type(name) declaration providing the event type name of the return type for expression '" + ExprNodeUtility.toExpressionStringMinPrecedenceSafe(atom.getSplitterExpression()) + "'");      }      streamEventType=eventAdapterService.getExistsTypeByName(atom.getOptionalResultEventType());      if (streamEventType == null) {        throw new ExprValidationException("Event type by name '" + atom.getOptionalResultEventType() + "' could not be found");      }      Class returnType=evaluator.getType();      if (returnType.isArray() && streamEventType.getPropertyNames().length == 1 && JavaClassHelper.isSubclassOrImplementsInterface(JavaClassHelper.getBoxedType(returnType.getComponentType()),JavaClassHelper.getBoxedType(streamEventType.getPropertyType(streamEventType.getPropertyNames()[0])))) {        Set<WriteablePropertyDescriptor> writables=eventAdapterService.getWriteableProperties(streamEventType,false);        if (!writables.isEmpty()) {          try {            EventBeanManufacturer manufacturer=EventAdapterServiceHelper.getManufacturer(eventAdapterService,streamEventType,new WriteablePropertyDescriptor[]{writables.iterator().next()},engineImportService,false);            containedEventEval=new ContainedEventEvalArrayToEvent(evaluator,manufacturer);          } catch (          EventBeanManufactureException e) {            throw new ExprValidationException("Event type '" + streamEventType.getName() + "' cannot be populated: "+ e.getMessage(),e);          }        } else {          throw new ExprValidationException("Event type '" + streamEventType.getName() + "' cannot be written to");        }      } else {        EventBeanFactory eventBeanFactory=EventAdapterServiceHelper.getFactoryForType(streamEventType,eventAdapterService);        if (returnType.isArray()) {          if ((!JavaClassHelper.isSubclassOrImplementsInterface(returnType.getComponentType(),streamEventType.getUnderlyingType()))) {            throw new ExprValidationException("Event type '" + streamEventType.getName() + "' underlying type "+ streamEventType.getUnderlyingType().getName()+ " cannot be assigned a value of type "+ JavaClassHelper.getClassNameFullyQualPretty(returnType));          }        } else         if (JavaClassHelper.isImplementsInterface(returnType,Iterable.class)) {        } else {          throw new ExprValidationException("Return type of expression '" + ExprNodeUtility.toExpressionStringMinPrecedenceSafe(atom.getSplitterExpression()) + "' is '"+ returnType.getName()+ "', expected an Iterable or array result");        }        containedEventEval=new ContainedEventEvalExprNode(evaluator,eventBeanFactory);      }      expressionText=ExprNodeUtility.toExpressionStringMinPrecedenceSafe(validatedExprNode);      fragmentEventType=new FragmentEventType(streamEventType,true,false);    }    streamEventTypes.add(streamEventType);    streamNames.add(atom.getOptionalAsName());    streamNameAndNumber.put(atom.getOptionalAsName(),i + 1);    expressionTexts.add(expressionText);    if (atom.getOptionalWhereClause() != null) {      EventType[] whereTypes=streamEventTypes.toArray(new EventType[streamEventTypes.size()]);      String[] whereStreamNames=streamNames.toArray(new String[streamNames.size()]);      boolean[] isIStreamOnly=new boolean[streamNames.size()];      Arrays.fill(isIStreamOnly,true);      StreamTypeService streamTypeService=new StreamTypeServiceImpl(whereTypes,whereStreamNames,isIStreamOnly,engineURI,false);      ExprValidationContext validationContext=new ExprValidationContext(streamTypeService,engineImportService,statementExtensionSvcContext,null,timeProvider,variableService,tableService,validateContext,eventAdapterService,statementName,statementId,annotations,null,false,false,true,false,null,false);      whereClauses[i]=ExprNodeUtility.getValidatedSubtree(ExprNodeOrigin.CONTAINEDEVENT,atom.getOptionalWhereClause(),validationContext).getExprEvaluator();    }    if (atom.getOptionalSelectClause() != null) {      EventType[] whereTypes=streamEventTypes.toArray(new EventType[streamEventTypes.size()]);      String[] whereStreamNames=streamNames.toArray(new String[streamNames.size()]);      boolean[] isIStreamOnly=new boolean[streamNames.size()];      Arrays.fill(isIStreamOnly,true);      StreamTypeService streamTypeService=new StreamTypeServiceImpl(whereTypes,whereStreamNames,isIStreamOnly,engineURI,false);      ExprValidationContext validationContext=new ExprValidationContext(streamTypeService,engineImportService,statementExtensionSvcContext,null,timeProvider,variableService,tableService,validateContext,eventAdapterService,statementName,statementId,annotations,null,false,false,true,false,null,false);      for (      SelectClauseElementRaw raw : atom.getOptionalSelectClause().getSelectExprList()) {        if (raw instanceof SelectClauseStreamRawSpec) {          SelectClauseStreamRawSpec rawStreamSpec=(SelectClauseStreamRawSpec)raw;          if (!streamNames.contains(rawStreamSpec.getStreamName())) {            throw new ExprValidationException("Property rename '" + rawStreamSpec.getStreamName() + "' not found in path");          }          SelectClauseStreamCompiledSpec streamSpec=new SelectClauseStreamCompiledSpec(rawStreamSpec.getStreamName(),rawStreamSpec.getOptionalAsName());          int streamNumber=streamNameAndNumber.get(rawStreamSpec.getStreamName());          streamSpec.setStreamNumber(streamNumber);          cumulativeSelectClause.add(streamSpec);        } else         if (raw instanceof SelectClauseExprRawSpec) {          SelectClauseExprRawSpec exprSpec=(SelectClauseExprRawSpec)raw;          ExprNode exprCompiled=ExprNodeUtility.getValidatedSubtree(ExprNodeOrigin.CONTAINEDEVENT,exprSpec.getSelectExpression(),validationContext);          String resultName=exprSpec.getOptionalAsName();          if (resultName == null) {            resultName=ExprNodeUtility.toExpressionStringMinPrecedenceSafe(exprCompiled);          }          cumulativeSelectClause.add(new SelectClauseExprCompiledSpec(exprCompiled,resultName,exprSpec.getOptionalAsName(),exprSpec.isEvents()));          String isMinimal=ExprNodeUtility.isMinimalExpression(exprCompiled);          if (isMinimal != null) {            throw new ExprValidationException("Expression in a property-selection may not utilize " + isMinimal);          }        } else         if (raw instanceof SelectClauseElementWildcard) {          String streamNameAtom=atom.getOptionalAsName();          if (streamNameAtom == null) {            streamNameAtom=UuidGenerator.generate();          }          SelectClauseStreamCompiledSpec streamSpec=new SelectClauseStreamCompiledSpec(streamNameAtom,atom.getOptionalAsName());          int streamNumber=i + 1;          streamSpec.setStreamNumber(streamNumber);          cumulativeSelectClause.add(streamSpec);        } else {          throw new IllegalStateException("Unknown select clause item:" + raw);        }      }    }    currentEventType=fragmentEventType.getFragmentType();    fragmentEventTypes[i]=fragmentEventType;    containedEventEvals[i]=containedEventEval;  }  if (cumulativeSelectClause.isEmpty()) {    if (length == 1) {      return new PropertyEvaluatorSimple(containedEventEvals[0],fragmentEventTypes[0],whereClauses[0],expressionTexts.get(0));    } else {      return new PropertyEvaluatorNested(containedEventEvals,fragmentEventTypes,whereClauses,expressionTexts);    }  } else {    PropertyEvaluatorAccumulative accumulative=new PropertyEvaluatorAccumulative(containedEventEvals,fragmentEventTypes,whereClauses,expressionTexts);    EventType[] whereTypes=streamEventTypes.toArray(new EventType[streamEventTypes.size()]);    String[] whereStreamNames=streamNames.toArray(new String[streamNames.size()]);    boolean[] isIStreamOnly=new boolean[streamNames.size()];    Arrays.fill(isIStreamOnly,true);    StreamTypeService streamTypeService=new StreamTypeServiceImpl(whereTypes,whereStreamNames,isIStreamOnly,engineURI,false);    SelectClauseElementCompiled[] cumulativeSelectArr=cumulativeSelectClause.toArray(new SelectClauseElementCompiled[cumulativeSelectClause.size()]);    SelectExprProcessor selectExpr=SelectExprProcessorFactory.getProcessor(assignedTypeNumberStack,cumulativeSelectArr,false,null,null,null,streamTypeService,eventAdapterService,null,null,null,engineImportService,validateContext,variableService,tableService,timeProvider,engineURI,statementId,statementName,annotations,null,configuration,null,namedWindowMgmtService,null,null,statementExtensionSvcContext);    return new PropertyEvaluatorSelect(selectExpr,accumulative);  }}  }
class C{  protected void unbind(Element e){  if (e instanceof BindableElement) {    setActiveDefinition((BindableElement)e,null);  } else {    NodeList nl=getXblScopedChildNodes(e);    for (int i=0; i < nl.getLength(); i++) {      Node n=nl.item(i);      if (n.getNodeType() == Node.ELEMENT_NODE) {        unbind((Element)n);      }    }  }}  }
class C{  public StreamCorruptedException(String reason){  super(reason);}  }
class C{  @Override protected void removeAt(int index){  _set[index]=(double)0;  super.removeAt(index);}  }
class C{  public DanmakuItem(Context context,CharSequence content,int startX){  this(context,new SpannableString(content),startX,0,0,0,1f);}  }
class C{  protected void crossValidate(){  try {    if (m_NNSearch instanceof weka.core.neighboursearch.CoverTree)     throw new Exception("CoverTree doesn't support hold-one-out " + "cross-validation. Use some other NN " + "method.");    double[] performanceStats=new double[m_kNNUpper];    double[] performanceStatsSq=new double[m_kNNUpper];    for (int i=0; i < m_kNNUpper; i++) {      performanceStats[i]=0;      performanceStatsSq[i]=0;    }    m_kNN=m_kNNUpper;    Instance instance;    Instances neighbours;    double[] origDistances, convertedDistances;    for (int i=0; i < m_Train.numInstances(); i++) {      if (m_Debug && (i % 50 == 0)) {        System.err.print("Cross validating " + i + "/"+ m_Train.numInstances()+ "\r");      }      instance=m_Train.instance(i);      neighbours=m_NNSearch.kNearestNeighbours(instance,m_kNN);      origDistances=m_NNSearch.getDistances();      for (int j=m_kNNUpper - 1; j >= 0; j--) {        convertedDistances=new double[origDistances.length];        System.arraycopy(origDistances,0,convertedDistances,0,origDistances.length);        double[] distribution=makeDistribution(neighbours,convertedDistances);        double thisPrediction=Utils.maxIndex(distribution);        if (m_Train.classAttribute().isNumeric()) {          thisPrediction=distribution[0];          double err=thisPrediction - instance.classValue();          performanceStatsSq[j]+=err * err;          performanceStats[j]+=Math.abs(err);        } else {          if (thisPrediction != instance.classValue()) {            performanceStats[j]++;          }        }        if (j >= 1) {          neighbours=pruneToK(neighbours,convertedDistances,j);        }      }    }    for (int i=0; i < m_kNNUpper; i++) {      if (m_Debug) {        System.err.print("Hold-one-out performance of " + (i + 1) + " neighbors ");      }      if (m_Train.classAttribute().isNumeric()) {        if (m_Debug) {          if (m_MeanSquared) {            System.err.println("(RMSE) = " + Math.sqrt(performanceStatsSq[i] / m_Train.numInstances()));          } else {            System.err.println("(MAE) = " + performanceStats[i] / m_Train.numInstances());          }        }      } else {        if (m_Debug) {          System.err.println("(%ERR) = " + 100.0 * performanceStats[i] / m_Train.numInstances());        }      }    }    double[] searchStats=performanceStats;    if (m_Train.classAttribute().isNumeric() && m_MeanSquared) {      searchStats=performanceStatsSq;    }    double bestPerformance=Double.NaN;    int bestK=1;    for (int i=0; i < m_kNNUpper; i++) {      if (Double.isNaN(bestPerformance) || (bestPerformance > searchStats[i])) {        bestPerformance=searchStats[i];        bestK=i + 1;      }    }    m_kNN=bestK;    if (m_Debug) {      System.err.println("Selected k = " + bestK);    }    m_kNNValid=true;  } catch (  Exception ex) {    throw new Error("Couldn't optimize by cross-validation: " + ex.getMessage());  }}  }
class C{  @VisibleForTesting protected void handleContainerAllocation(RMNode rmNode){  String host=rmNode.getNodeID().getHost();  ConsumedOffer consumedOffer=offerLifecycleMgr.drainConsumedOffer(host);  if (consumedOffer == null) {    LOGGER.debug("No offer consumed for {}",host);    return;  }  Node node=nodeStore.getNode(host);  Set<RMContainer> containersBeforeSched=node.getContainerSnapshot();  Set<RMContainer> containersAfterSched=new HashSet<>(node.getNode().getRunningContainers());  Set<RMContainer> containersAllocatedByMesosOffer=(containersBeforeSched == null) ? containersAfterSched : Sets.difference(containersAfterSched,containersBeforeSched);  if (containersAllocatedByMesosOffer.isEmpty()) {    LOGGER.debug("No containers allocated using Mesos offers for host: {}",host);    for (    Protos.Offer offer : consumedOffer.getOffers()) {      offerLifecycleMgr.declineOffer(offer);    }    decrementNodeCapacity(rmNode,OfferUtils.getYarnResourcesFromMesosOffers(consumedOffer.getOffers()));  } else {    LOGGER.debug("Containers allocated using Mesos offers for host: {} count: {}",host,containersAllocatedByMesosOffer.size());    List<Protos.TaskInfo> tasks=Lists.newArrayList();    Resource resUsed=Resource.newInstance(0,0);    for (    RMContainer newContainer : containersAllocatedByMesosOffer) {      tasks.add(getTaskInfoForContainer(newContainer,consumedOffer,node));      resUsed=Resources.add(resUsed,newContainer.getAllocatedResource());    }    Resource resOffered=OfferUtils.getYarnResourcesFromMesosOffers(consumedOffer.getOffers());    Resource resUnused=Resources.subtract(resOffered,resUsed);    decrementNodeCapacity(rmNode,resUnused);    myriadDriver.getDriver().launchTasks(consumedOffer.getOfferIds(),tasks);  }  node.removeContainerSnapshot();}  }
class C{  public static double normalizeZeroTwoPiFast(double angle){  if (angle >= 0.0 && angle <= 2 * Math.PI) {    return angle;  }  angle=remainderTwoPiFast(angle);  if (angle < 0.0) {    return angle + TWOPI_LO + TWOPI_HI;  } else {    return angle;  }}  }
class C{  public static Method lookup(final String method){  for (  final Method m : values()) {    if (m.toString().equalsIgnoreCase(method)) {      return m;    }  }  throw new IllegalArgumentException("Invalid http method: " + method + ". Valid methods are: "+ values());}  }
class C{  public static double[] readDoubles(){  return new In().readAllDoubles();}  }
class C{  public static int offsetByCodePoints(net.sourceforge.retroweaver.harmony.runtime.java.lang.CharSequence seq,int index,int codePointOffset){  if (seq == null) {    throw new NullPointerException();  }  int len=seq.length();  if (index < 0 || index > len) {    throw new IndexOutOfBoundsException();  }  if (codePointOffset == 0) {    return index;  }  if (codePointOffset > 0) {    int codePoints=codePointOffset;    int i=index;    while (codePoints > 0) {      codePoints--;      if (i >= len) {        throw new IndexOutOfBoundsException();      }      if (isHighSurrogate(seq.charAt(i))) {        int next=i + 1;        if (next < len && isLowSurrogate(seq.charAt(next))) {          i++;        }      }      i++;    }    return i;  }  int codePoints=-codePointOffset;  int i=index;  while (codePoints > 0) {    codePoints--;    i--;    if (i < 0) {      throw new IndexOutOfBoundsException();    }    if (isLowSurrogate(seq.charAt(i))) {      int prev=i - 1;      if (prev >= 0 && isHighSurrogate(seq.charAt(prev))) {        i--;      }    }  }  return i;}  }
class C{  public ConstraintViolation(Resource root,Collection<SimplePropertyPath> paths,Collection<TemplateCall> fixes,String message,Resource source){  this.fixes=fixes;  this.message=message;  this.root=root;  this.paths=paths;  this.source=source;}  }
class C{  public static DValue forPrimitive(Object primitiveValue,int isolateId){  if (primitiveValue == null)   return new DValue(VariableType.NULL,"null","",0,primitiveValue,isolateId); else   if (primitiveValue == Value.UNDEFINED)   return new DValue(VariableType.UNDEFINED,"undefined","",0,primitiveValue,isolateId); else   if (primitiveValue instanceof Boolean)   return new DValue(VariableType.BOOLEAN,"Boolean","",0,primitiveValue,isolateId); else   if (primitiveValue instanceof Double)   return new DValue(VariableType.NUMBER,"Number","",0,primitiveValue,isolateId); else   if (primitiveValue instanceof String)   return new DValue(VariableType.STRING,"String","",0,primitiveValue,isolateId);  assert false;  return null;}  }
class C{  public FractionAtom(Atom num,Atom den,float defFactor,int numAlign,int denomAlign){  this(num,den,true,numAlign,denomAlign);  this.defFactor=defFactor;  defFactorSet=true;}  }
class C{  public String code_string(){  return _code_string;}  }
class C{  protected final void closeSession(){  if (sessionTracker != null) {    Session currentSession=sessionTracker.getOpenSession();    if (currentSession != null) {      currentSession.close();    }  }}  }
class C{  protected void initialize(char[] input){  this.input=input;  this.ndx=-1;  this.total=input.length;}  }
class C{  protected void addIcon(Container top){  Icon sideIcon=getIcon();  if (sideIcon != null) {    JLabel iconLabel=new JLabel(sideIcon);    iconLabel.setName("OptionPane.iconLabel");    iconLabel.setVerticalAlignment(SwingConstants.TOP);    top.add(iconLabel,BorderLayout.BEFORE_LINE_BEGINS);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element newNode;  String newValue;  doc=(Document)load("hc_staff",true);  newNode=doc.createElement("acronym");  newValue=newNode.getNodeValue();  assertNull("initiallyNull",newValue);  newNode.setNodeValue("This should have no effect");  newValue=newNode.getNodeValue();  assertNull("nullAfterAttemptedChange",newValue);}  }
class C{  public void onUpdate(){  this.prevPosX=this.posX;  this.prevPosY=this.posY;  this.prevPosZ=this.posZ;  if (this.particleAge++ >= this.particleMaxAge) {    this.setExpired();  }  float percent=(float)this.particleAge / (float)this.particleMaxAge;  Vector3f dir=Vector3f.sub(to,from,null);  Vector3f spiralDir=Vector3f.cross(dir.normalise(null),up,null);  spiralDir.scale((float)Math.sin((particleAge + startTime) * 0.5) * orbitRadius);  Vector3f up=new Vector3f(this.up);  up.scale((float)Math.cos((particleAge + startTime) * 0.5) * orbitRadius);  Vector3f.add(spiralDir,up,spiralDir);  dir.scale(percent);  Vector3f posOnPath=Vector3f.add(from,dir,null);  setPosition(posOnPath.x + spiralDir.x,posOnPath.y + spiralDir.y,posOnPath.z + spiralDir.z);}  }
class C{  public Bag removeObjectsAtLocation(final int x,final int y){  Bag b=field[x][y];  field[x][y]=null;  return b;}  }
class C{  public static Header buildUserAgentHeader() throws ParseException {  return HEADER_FACTORY.createHeader(UserAgentHeader.NAME,userAgentString());}  }
class C{  public static void main(String[] args){  TestRunner.run(CompositeProcessorTest.class);}  }
class C{  public CharEscaperBuilder(){  this.map=new HashMap<Character,String>();}  }
class C{  private void writeException(DataOutputStream dos,byte type,Exception ex,Version clientVersion) throws IOException {  writeMessage(dos,type,ex.toString(),clientVersion);}  }
class C{  public static boolean isLocalFormSuperseded(String formId,String latestVersion){  if (formId == null) {    Log.e(t,"isLocalFormSuperseded: server is not OpenRosa-compliant. <formID> is null!");    return true;  }  String[] selectionArgs={formId};  String selection=FormsColumns.JR_FORM_ID + "=?";  String[] fields={FormsColumns.JR_VERSION};  Cursor formCursor=null;  try {    formCursor=Collect.getInstance().getContentResolver().query(FormsColumns.CONTENT_URI,fields,selection,selectionArgs,null);    if (formCursor.getCount() == 0) {      return true;    }    formCursor.moveToFirst();    int idxJrVersion=formCursor.getColumnIndex(fields[0]);    if (formCursor.isNull(idxJrVersion)) {      return (latestVersion != null);    }    String jr_version=formCursor.getString(idxJrVersion);    if (jr_version == null && latestVersion == null) {      return false;    }    if (jr_version == null) {      return true;    }    if (latestVersion == null) {      return false;    }    return (jr_version.compareTo(latestVersion) < 0);  }  finally {    if (formCursor != null) {      formCursor.close();    }  }}  }
class C{  public String globalInfo(){  return "Cluster data using the FarthestFirst algorithm.\n\n" + "For more information see:\n\n" + getTechnicalInformation().toString() + "\n\n"+ "Notes:\n"+ "- works as a fast simple approximate clusterer\n"+ "- modelled after SimpleKMeans, might be a useful initializer for it";}  }
class C{  private void sendBroadcast(){  LocalBroadcastManager.getInstance(this).sendBroadcast(new Intent(ACTION_UPLOAD_SERVICE_RESPONSE).addCategory(Intent.CATEGORY_DEFAULT));}  }
class C{  protected static void checkRectangularShape(DoubleMatrix2D[][] array){  int columns=-1;  for (int row=array.length; --row >= 0; ) {    if (array[row] != null) {      if (columns == -1)       columns=array[row].length;      if (array[row].length != columns)       throw new IllegalArgumentException("All rows of array must have same number of columns.");    }  }}  }
class C{  static int indexOf(final CharSequence cs,final CharSequence searchChar,final int start){  return cs.toString().indexOf(searchChar.toString(),start);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static <T1,T2,R>BiFunction<T1,T2,R> memoizeBiFunction(final BiFunction<T1,T2,R> fn){  val memoise2=memoizeFunction(null);  return null;}  }
class C{  public boolean isEnableDepthOffset(){  return false;}  }
class C{  @Override public String toString(){  return String.format("Callgraph [%d function nodes, %d edges]",nodeCount(),edgeCount());}  }
class C{  public static void runJavadoc(String[] javadocArgs){  if (com.sun.tools.javadoc.Main.execute(javadocArgs) != 0) {    throw new Error("Javadoc failed to execute");  }}  }
class C{  public void showAdvanced(boolean advanced){  advancedVisible=advanced;  if (null != advancedText) {    advancedText.setVisible(advanced);  }  if (CollectionUtils.isNotEmpty(propertyControls)) {    for (    AbstractPropertyControl<?,?> propertyControl : propertyControls) {      propertyControl.showIfAdvanced(advanced);    }    mainComposite.layout();    mainComposite.update();    if (allAdvancedProperties && !advancedVisible) {      setMessage("This page contains only advanced properties.",INFORMATION);    } else {      updateMessage();    }  }}  }
class C{  protected int readShort(){  return rawData.getShort();}  }
class C{  private void createOrUpdateAutoTierPolicies(com.emc.storageos.db.client.model.StorageSystem system,Map<String,List<com.emc.storageos.db.client.model.StoragePool>> autoTieringPolicyPoolMap,Map<String,Map<String,List<String>>> autoTieringPolicyPropertiesMap){  List<DataObject> objectsToCreate=new ArrayList<>();  List<DataObject> objectsToUpdate=new ArrayList<>();  for (  Entry<String,List<com.emc.storageos.db.client.model.StoragePool>> policyEntry : autoTieringPolicyPoolMap.entrySet()) {    String policyId=policyEntry.getKey();    String nativeGuid=NativeGUIDGenerator.generateAutoTierPolicyNativeGuid(system.getNativeGuid(),policyId,NativeGUIDGenerator.AUTO_TIERING_POLICY);    AutoTieringPolicy autoTieringPolicy=checkAutoTieringPolicyExistsInDB(nativeGuid);    if (autoTieringPolicy == null) {      autoTieringPolicy=new AutoTieringPolicy();      autoTieringPolicy.setId(URIUtil.createId(AutoTieringPolicy.class));      autoTieringPolicy.setPolicyName(policyId);      autoTieringPolicy.setStorageSystem(system.getId());      autoTieringPolicy.setNativeGuid(nativeGuid);      autoTieringPolicy.setLabel(policyId);      autoTieringPolicy.setSystemType(system.getSystemType());      autoTieringPolicy.setPolicyEnabled(Boolean.TRUE);      Map<String,List<String>> policyProperties=autoTieringPolicyPropertiesMap.get(policyId);      List<String> provTypeValueList=policyProperties.get(AutoTieringPolicyCapabilityDefinition.PROPERTY_NAME.PROVISIONING_TYPE.name());      if (!provTypeValueList.isEmpty()) {        autoTieringPolicy.setProvisioningType(provTypeValueList.get(0));      }      objectsToCreate.add(autoTieringPolicy);      _log.info(String.format("Creating new auto tiering policy %s, supported by storage pools %s",policyId,policyEntry.getValue()));    } else {      objectsToUpdate.add(autoTieringPolicy);      _log.info(String.format("Updating existing auto tiering policy %s, supported by storage pools %s",policyId,policyEntry.getValue()));    }    StringSet poolIds=new StringSet();    for (    com.emc.storageos.db.client.model.StoragePool pool : policyEntry.getValue()) {      poolIds.add(pool.getId().toString());      pool.setAutoTieringEnabled(true);    }    autoTieringPolicy.setPools(poolIds);    if (!system.getAutoTieringEnabled()) {      system.setAutoTieringEnabled(true);      _dbClient.updateObject(system);    }  }  disableRemovedAutoTieringPolicies(autoTieringPolicyPoolMap.keySet(),system.getId());  _dbClient.createObject(objectsToCreate);  _dbClient.updateObject(objectsToUpdate);}  }
class C{  private void sendStageProgressPatch(com.vmware.xenon.common.TaskState.TaskStage stage){  ServiceUtils.logInfo(this,"sendStageProgressPatch %s",stage);  TaskUtils.sendSelfPatch(this,buildPatch(stage,null));}  }
class C{  public void endReadFromPngRaw(){}  }
class C{  public static double nextLaplace(RandomEngine randomGenerator){  double u=randomGenerator.raw();  u=u + u - 1.0;  if (u > 0)   return -Math.log(1.0 - u); else   return Math.log(1.0 + u);}  }
class C{  @Override public String toString(){  return String.valueOf(value);}  }
class C{  synchronized void receive(char[] chars,int offset,int count) throws IOException {  Arrays.checkOffsetAndCount(chars.length,offset,count);  if (buffer == null) {    throw new IOException("Pipe is closed");  }  if (lastReader != null && !lastReader.isAlive()) {    throw new IOException("Pipe broken");  }  lastWriter=Thread.currentThread();  while (count > 0) {    try {      while (buffer != null && out == in) {        notifyAll();        wait(1000);        if (lastReader != null && !lastReader.isAlive()) {          throw new IOException("Pipe broken");        }      }    } catch (    InterruptedException e) {      IoUtils.throwInterruptedIoException();    }    if (buffer == null) {      throw new IOException("Pipe is closed");    }    if (in == -1) {      in=0;    }    if (in >= out) {      int length=buffer.length - in;      if (count < length) {        length=count;      }      System.arraycopy(chars,offset,buffer,in,length);      offset+=length;      count-=length;      in+=length;      if (in == buffer.length) {        in=0;      }    }    if (count > 0 && in != out) {      int length=out - in;      if (count < length) {        length=count;      }      System.arraycopy(chars,offset,buffer,in,length);      offset+=length;      count-=length;      in+=length;    }  }}  }
class C{  public ParseException(String message,int line,int column){  super(message);  exception=null;  lineNumber=line;  columnNumber=column;}  }
class C{  public Element store(Object o){  return storeDirectly(o);}  }
class C{  public static boolean isLmpOrAbove(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;}  }
class C{  public void writeChar(byte c) throws IOException {  this.write(c);}  }
class C{  protected int lexWhiteSpacesAndComments(int currentOffset,List<CustomToken> targetList){  CharSequence buffer=getBuffer();  int bufferEnd=getBufferEnd();  while (currentOffset < bufferEnd) {    char currentChar=buffer.charAt(currentOffset);    if (currentChar == '\n') {      targetList.add(getCustomToken(currentOffset++,currentOffset,TokenType.NEW_LINE_INDENT));    } else     if (Character.isWhitespace(currentChar)) {      int whiteSpaceStart=currentOffset;      while (currentOffset < bufferEnd && Character.isWhitespace(currentChar=buffer.charAt(currentOffset)) && currentChar != '\n') {        currentOffset++;      }      targetList.add(getCustomToken(whiteSpaceStart,currentOffset,TokenType.WHITE_SPACE));    } else     if (currentChar == '#') {      int commentStart=currentOffset;      while (currentOffset < bufferEnd && buffer.charAt(currentOffset) != '\n') {        currentOffset++;      }      targetList.add(getCustomToken(commentStart,currentOffset,COMMENT_LINE));    } else {      break;    }  }  return currentOffset;}  }
class C{  private PreparedStatement prepareStatement(String table,String statement,KeyValuePersistenceSettings settings,boolean tblExistenceRequired){  int attempt=0;  Throwable error=null;  String errorMsg="Failed to prepare Cassandra CQL statement: " + statement;  RandomSleeper sleeper=newSleeper();  incrementSessionRefs();  try {synchronized (sesStatements) {      if (sesStatements.containsKey(statement))       return sesStatements.get(statement);    }    while (attempt < CQL_EXECUTION_ATTEMPTS_COUNT) {      try {        PreparedStatement prepStatement=session().prepare(statement);synchronized (sesStatements) {          sesStatements.put(statement,prepStatement);        }        return prepStatement;      } catch (      Throwable e) {        if (CassandraHelper.isTableAbsenceError(e)) {          if (!tblExistenceRequired)           return null;          handleTableAbsenceError(table,settings);        } else         if (CassandraHelper.isHostsAvailabilityError(e))         handleHostsAvailabilityError(e,attempt,errorMsg); else         throw new IgniteException(errorMsg,e);        error=e;      }      if (!CassandraHelper.isTableAbsenceError(error))       sleeper.sleep();      attempt++;    }  }  finally {    decrementSessionRefs();  }  throw new IgniteException(errorMsg,error);}  }
class C{  public String currID(){  return (String)order.peek();}  }
class C{  protected void sequence_ExportSpecifier(ISerializationContext context,ExportSpecifier semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.RETURN_STATEMENT__EXPRESSION:    return getExpression();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public ContentAssistHistory(int maxLHS,int maxRHS){  Assert.isLegal(maxLHS > 0);  Assert.isLegal(maxRHS > 0);  fMaxLHS=maxLHS;  fMaxRHS=maxRHS;  fLHSCache=new MRUMap<String,MRUSet<String>>(fMaxLHS);}  }
class C{  public TodoObject(TodoObject parent){  this.id=parent.getId();  this.projectId=parent.getProjectId();  this.todolistId=parent.getTodolistId();  this.content=parent.getContent();  this.position=parent.getPosition();  this.completed=parent.getCompleted();  this.dueDate=parent.getDueDate();  this.creatorName=parent.getCreatorName();  this.creatorId=parent.getCreatorId();  this.assigneeId=parent.getAssigneeId();  this.deleted=parent.getDeleted();  this.created=parent.getCreated();  this.updated=parent.getUpdated();  this.companyId=parent.getCompanyId();  this.doing=parent.getDoing();  this.projectTodoId=parent.getProjectTodoId();  this.todoType=parent.getTodoType();  this.description=parent.getDescription();  this.estimate=parent.getEstimate();  this.spendTime=parent.getSpendTime();  this.priority=parent.getPriority();  this.status=parent.getStatus();  this.startTime=parent.getStartTime();  this.completeTime=parent.getCompleteTime();  this.completerId=parent.getCompleterId();  this.creatorAvatar=parent.getCreatorAvatar();}  }
class C{  public static <K,V>ImmutableSetMultimap<K,V> of(K k1,V v1){  ImmutableSetMultimap.Builder<K,V> builder=ImmutableSetMultimap.builder();  builder.put(k1,v1);  return builder.build();}  }
class C{  protected int legalIndex(int index){  while (index >= points.size())   index-=points.size();  while (index < 0) {    index+=points.size();  }  return index;}  }
class C{  public URI(String p_scheme,String p_schemeSpecificPart) throws MalformedURIException {  if (p_scheme == null || p_scheme.trim().length() == 0) {    throw new MalformedURIException("Cannot construct URI with null/empty scheme!");  }  if (p_schemeSpecificPart == null || p_schemeSpecificPart.trim().length() == 0) {    throw new MalformedURIException("Cannot construct URI with null/empty scheme-specific part!");  }  setScheme(p_scheme);  setPath(p_schemeSpecificPart);}  }
class C{  void restrictTo8Bits(Register r){  PhysicalRegisterSet phys=(PhysicalRegisterSet)this.phys;  Register ESP=phys.getESP();  Register EBP=phys.getEBP();  Register ESI=phys.getESI();  Register EDI=phys.getEDI();  addRestriction(r,ESP);  addRestriction(r,EBP);  addRestriction(r,ESI);  addRestriction(r,EDI);}  }
class C{  private static BitMatrix bitMatrixFrombitArray(byte[][] input){  int whiteSpace=30;  BitMatrix output=new BitMatrix(input[0].length + 2 * whiteSpace,input.length + 2 * whiteSpace);  output.clear();  for (int y=0, yOutput=output.getHeight() - whiteSpace; y < input.length; y++, yOutput--) {    for (int x=0; x < input[0].length; x++) {      if (input[y][x] == 1) {        output.set(x + whiteSpace,yOutput);      }    }  }  return output;}  }
class C{  public static JPanel createVerticalPanel(String title){  JPanel panel=new JPanel();  panel.setLayout(new GridLayout(0,1));  if (title != null) {    panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),title));  } else {    panel.setBorder(BorderFactory.createEtchedBorder());  }  return panel;}  }
class C{  public String createThickVolumes(String systemId,String arrayGroupId,Long luCapacityInBytes,int noOfLus,String volumeName,String formatType,String model,Integer devNum) throws Exception {  Long luCapacityInKB=luCapacityInBytes / 1024;  InputStream responseStream=null;  String asyncTaskMessageId=null;  try {    Map<String,Object> attributeMap=new HashMap<String,Object>();    StorageArray storageArray=new StorageArray(systemId);    Pool arrayGroup=new Pool(arrayGroupId);    Add addOp=new Add(HDSConstants.LOGICALUNIT,noOfLus,formatType);    addOp.setBulk(Boolean.TRUE);    LogicalUnit logicalUnit=new LogicalUnit(null,String.valueOf(luCapacityInKB),volumeName,null,devNum);    attributeMap.put(HDSConstants.STORAGEARRAY,storageArray);    attributeMap.put(HDSConstants.ARRAY_GROUP,arrayGroup);    attributeMap.put(HDSConstants.ADD,addOp);    attributeMap.put(HDSConstants.MODEL,model);    attributeMap.put(HDSConstants.LOGICALUNIT,logicalUnit);    String createVolumeInputXML=InputXMLGenerationClient.getInputXMLString(HDSConstants.CREATE_THICK_VOLUMES_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);    log.info("Query to create thick volume: {}",createVolumeInputXML);    URI endpointURI=hdsApiClient.getBaseURI();    ClientResponse response=hdsApiClient.post(endpointURI,createVolumeInputXML);    if (HttpStatus.SC_OK == response.getStatus()) {      responseStream=response.getEntityInputStream();      JavaResult result=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.SMOOKS_CONFIG_FILE);      EchoCommand command=result.getBean(EchoCommand.class);      if (HDSConstants.PROCESSING_STR.equalsIgnoreCase(command.getStatus())) {        asyncTaskMessageId=command.getMessageID();      } else       if (HDSConstants.FAILED_STR.equalsIgnoreCase(command.getStatus())) {        Error error=result.getBean(Error.class);        log.error("Volume creation failed status messageID: {}",command.getMessageID());        log.error("Volume creation failed with error code: {} with message: {}",error.getCode(),error.getDescription());        throw HDSException.exceptions.notAbleToCreateVolume(error.getCode(),error.getDescription());      }    } else {      log.error("LogicalUnit creation failed with invalid response code {}",response.getStatus());      throw HDSException.exceptions.invalidResponseFromHDS(String.format("LogicalUnit creation failed due to invalid response %1$s from server for system %2$s",response.getStatus(),systemId));    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("Exception occurred while close volume creation response stream");      }    }  }  return asyncTaskMessageId;}  }
class C{  public SaaSApplicationException(String message,Object[] params){  super(message);  init(params);}  }
class C{  @Override protected void visitLaunching(ModuleBuild build) throws Exception {  LOG.info("About to launch Singularity task for build {}",build);  singularityBuildLauncher.launchBuild(build);}  }
class C{  public int exit_signal(){  return Integer.parseInt(fields[37]);}  }
class C{  public CharSequenceReader(CharSequence seq){  this.seq=checkNotNull(seq);}  }
class C{  private void validateJMSResources(){  if (queue == null || qFactory == null) {    SaaSSystemException sse=new SaaSSystemException("JMS resources are not initialized!");    logger.logError(Log4jLogger.SYSTEM_LOG,sse,LogMessageIdentifier.ERROR_JMS_RESOURCE_NOT_INITIALIZED);    throw sse;  }}  }
class C{  public void CheckForDefaultInitValue() throws PcalSymTabException {  String errors="";  for (int i=0; i < symtab.size(); i++) {    SymTabEntry se=(SymTabEntry)symtab.elementAt(i);    if (se.id.equals("defaultInitValue")) {      if (errors.equals("")) {        errors="Cannot use `defaultInitValue' as ";      } else {        errors=errors + " or ";      }      ;      errors=errors + vtypeName[se.type] + " name";    }    ;  }  ;  if (!errors.equals("")) {    throw new PcalSymTabException(errors);  }  ;  return;}  }
class C{  @Override public void displayCycle(Cycle cycle){  this.cycle=cycle;  if (alreadyInitializedRecyclerList) {    populateDataRecyclerList();  } else {    initRecyclerView();    alreadyInitializedRecyclerList=true;    populateDataRecyclerList();  }}  }
class C{  @Override public boolean isEncodingAlpha(){  return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void addFileToZip(ZipArchiveOutputStream z_out,String path,String base) throws IOException {  File f=new File(path);  String entryName=base + f.getName();  ZipArchiveEntry zipEntry=new ZipArchiveEntry(f,entryName);  z_out.putArchiveEntry(zipEntry);  if (f.isFile()) {    FileInputStream fInputStream=null;    try {      fInputStream=new FileInputStream(f);      org.apache.commons.compress.utils.IOUtils.copy(fInputStream,z_out,65535);      z_out.closeArchiveEntry();    }  finally {      fInputStream.close();    }  } else {    z_out.closeArchiveEntry();    File[] children=f.listFiles();    if (children != null) {      for (      File child : children) {        LOGGER.debug("ZIP Adding " + child.getName());        addFileToZip(z_out,child.getAbsolutePath(),entryName + "/");      }    }  }}  }
class C{  public void close(){  myDebugger.getEventQueue().endDocument();  if (TRACE) {    trace("</trace>");  }}  }
class C{  protected void fireTreeNodesInserted(Object source,Object[] path,int[] childIndices,Object[] children){  Object[] listeners=listenerList.getListenerList();  TreeModelEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeModelListener.class) {      if (e == null)       e=new TreeModelEvent(source,path,childIndices,children);      ((TreeModelListener)listeners[i + 1]).treeNodesInserted(e);    }  }}  }
class C{  private boolean tryDisableEvents(IgniteEx ignite){  if (!listenVisor.values().contains(true)) {    listenVisor.clear();    ignite.events().disableLocal(VISOR_TASK_EVTS);  }  return ignite.allEventsUserRecordable(VISOR_TASK_EVTS);}  }
class C{  @Override public boolean eventGeneratable(String eventName){  if (eventName.equals("instance")) {    if (!m_listeneeTypes.contains(eventName)) {      return false;    }    for (    Object listenee : m_listenees.values()) {      if (listenee instanceof EventConstraints && !((EventConstraints)listenee).eventGeneratable(eventName)) {        return false;      }    }  }  if (eventName.equals("dataSet") || eventName.equals("trainingSet") || eventName.equals("testSet")) {    if (!m_listeneeTypes.contains("dataSet") && !m_listeneeTypes.contains("trainingSet") && !m_listeneeTypes.contains("testSet")) {      return false;    }    for (    Object listenee : m_listenees.values()) {      if (listenee instanceof EventConstraints) {        if (!((EventConstraints)listenee).eventGeneratable("dataSet") && !((EventConstraints)listenee).eventGeneratable("trainingSet") && !((EventConstraints)listenee).eventGeneratable("testSet")) {          return false;        }      }    }  }  return true;}  }
class C{  void invalidate(){  for (int i=0; i < mCursors.size(); i++) {    swapCursor(i,null,null);  }}  }
class C{  private boolean isMineshafterPresent(){  try {    Class.forName("mineshafter.MineServer");    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public void dropActionChanged(DragSourceDragEvent dsde){  ((DragSourceListener)a).dropActionChanged(dsde);  ((DragSourceListener)b).dropActionChanged(dsde);}  }
class C{  public String toString(){  return this.essenceContainerDataBO.toString();}  }
class C{  private static void verifyLog(ByteArrayOutputStream bout,String mustContain){  byte[] bytes=bout.toByteArray();  if (bytes.length == 0) {    TestLibrary.bomb("log data length is zero");  } else   if ((mustContain != null) && (bout.toString().indexOf(mustContain) < 0)) {    TestLibrary.bomb("log output did not contain: " + mustContain);  }}  }
class C{  @RequestMapping(value="/weights",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Weight> create(@Valid @RequestBody Weight weight) throws URISyntaxException {  log.debug("REST request to save Weight : {}",weight);  if (weight.getId() != null) {    return ResponseEntity.badRequest().header("Failure","A new weight cannot already have an ID").body(null);  }  if (!SecurityUtils.isUserInRole(AuthoritiesConstants.ADMIN)) {    log.debug("No user passed in, using current user: {}",SecurityUtils.getCurrentLogin());    weight.setUser(userRepository.findOneByLogin(SecurityUtils.getCurrentLogin()).get());  }  if (weight.getTimestamp() == null) {    weight.setTimestamp(new DateTime());  }  Weight result=weightRepository.save(weight);  weightSearchRepository.save(result);  return ResponseEntity.created(new URI("/api/weights/" + result.getId())).headers(HeaderUtil.createEntityCreationAlert("weight",result.getId().toString())).body(result);}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  s.writeInt(getStyle());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  void paintSkin(Graphics g,int dx,int dy,int dw,int dh,State state,boolean borderFill){  if (XPStyle.getXP() == null) {    return;  }  if (borderFill && "borderfill".equals(getTypeEnumName(component,part,state,Prop.BGTYPE))) {    return;  }  skinPainter.paint(null,g,dx,dy,dw,dh,this,state);}  }
class C{  DatastoreBackupInfo(Entity backupEntity){  backupName=(String)checkNotNull(backupEntity.getProperty("name"),"name");  @SuppressWarnings("unchecked") List<String> rawKinds=(List<String>)checkNotNull(backupEntity.getProperty("kinds"),"kinds");  Date rawStartTime=(Date)checkNotNull(backupEntity.getProperty("start_time"),"start_time");  Date rawCompleteTime=(Date)backupEntity.getProperty("complete_time");  Text rawGcsFilename=(Text)backupEntity.getProperty("gs_handle");  kinds=ImmutableSet.copyOf(rawKinds);  startTime=new DateTime(rawStartTime).withZone(UTC);  completeTime=Optional.fromNullable(rawCompleteTime == null ? null : new DateTime(rawCompleteTime).withZone(UTC));  gcsFilename=Optional.fromNullable(rawGcsFilename == null ? null : gcsPathToUri(rawGcsFilename.getValue()));}  }
class C{  public void onReadRemoteRssi(String address,int rssi,int status){  if (DBG)   Log.d(TAG,"onReadRemoteRssi() - Device=" + address + " rssi="+ rssi+ " status="+ status);  if (!address.equals(mDevice.getAddress())) {    return;  }  try {    mCallback.onReadRemoteRssi(BluetoothGatt.this,rssi,status);  } catch (  Exception ex) {    Log.w(TAG,"Unhandled exception: " + ex);  }}  }
class C{  private void markDirty(){  if (!dirty) {    dirty=true;    formPage.getManagedForm().dirtyStateChanged();  }}  }
class C{  final public void disable_tracing(){}  }
class C{  protected void postorder(TreeNode<E> root){  if (root == null)   return;  postorder(root.left);  postorder(root.right);  System.out.print(root.element + " ");}  }
class C{  int checkIfAssigned(String webappId){  if (webappId == null) {    return INVALID_ACTIVITY_INDEX;  }  for (int i=mActivityList.size() - 1; i >= 0; i--) {    if (webappId.equals(mActivityList.get(i).mWebappId)) {      return mActivityList.get(i).mActivityIndex;    }  }  return INVALID_ACTIVITY_INDEX;}  }
class C{  private <T>List<T> runLimitedParallel(final List<Callable<T>> tasks,long timeout,final TimeUnit unit,final int maxParallel) throws ExecutionException, InterruptedException, TimeoutException {  long nanos=timeout=unit.toNanos(timeout);  final long begin=System.nanoTime();  final Iterator<Callable<T>> titr=tasks.iterator();  final List<T> list=new LinkedList<T>();  while (titr.hasNext()) {    final List<Callable<T>> taskChunk=new LinkedList<Callable<T>>();    while (taskChunk.size() < maxParallel && titr.hasNext()) {      taskChunk.add(titr.next());    }    if (nanos <= 0)     throw new TimeoutException();    final List<Future<T>> futures=getThreadPool().invokeAll(taskChunk,nanos,TimeUnit.NANOSECONDS);    final Iterator<Future<T>> fitr=futures.iterator();    while (fitr.hasNext()) {      final Future<T> f=fitr.next();      list.add(f.get());    }    nanos=timeout - (System.nanoTime() - begin);  }  if (log.isInfoEnabled())   log.info("Ran " + tasks.size() + " tasks in parallel: elapsed="+ TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - begin));  return list;}  }
class C{  private CollectorUtil(){  instanceNotAllowed(getClass());}  }
class C{  default Eval<T> toEvalAlways(){  return Eval.always(this);}  }
class C{  private PostgreSQLNodeLoader(){}  }
class C{  public AccessibleJTreeNode(JTree t,TreePath p,Accessible ap){  tree=t;  path=p;  accessibleParent=ap;  treeModel=t.getModel();  obj=p.getLastPathComponent();  if (treeModel != null) {    isLeaf=treeModel.isLeaf(obj);  }}  }
class C{  private LoginStatus pullRemoteChanges(){  Log.d(getClass().getSimpleName(),"pullRemoteChanges()");  LoginStatus status=null;  try {    List<DBNote> localNotes=dbHelper.getNotes();    Map<Long,Long> localIDmap=new HashMap<>();    for (    DBNote note : localNotes) {      localIDmap.put(note.getRemoteId(),note.getId());    }    List<OwnCloudNote> remoteNotes=client.getNotes();    Set<Long> remoteIDs=new HashSet<>();    for (    OwnCloudNote remoteNote : remoteNotes) {      Log.d(getClass().getSimpleName(),"   Process Remote Note: " + remoteNote);      remoteIDs.add(remoteNote.getRemoteId());      if (localIDmap.containsKey(remoteNote.getRemoteId())) {        Log.d(getClass().getSimpleName(),"   ... found -> Update");        dbHelper.updateNote(localIDmap.get(remoteNote.getRemoteId()),remoteNote,null);      } else {        Log.d(getClass().getSimpleName(),"   ... create");        dbHelper.addNote(remoteNote);      }    }    Log.d(getClass().getSimpleName(),"   Remove remotely deleted Notes (only those without local changes)");    for (    DBNote note : localNotes) {      if (note.getStatus() == DBStatus.VOID && !remoteIDs.contains(note.getRemoteId())) {        Log.d(getClass().getSimpleName(),"   ... remove " + note);        dbHelper.deleteNote(note.getId(),DBStatus.VOID);      }    }    status=LoginStatus.OK;  } catch (  IOException e) {    Log.e(getClass().getSimpleName(),"Exception",e);    exceptions.add(e);    status=LoginStatus.CONNECTION_FAILED;  }catch (  JSONException e) {    Log.e(getClass().getSimpleName(),"Exception",e);    exceptions.add(e);    status=LoginStatus.JSON_FAILED;  }  return status;}  }
class C{  public static boolean canSendSms(Context context){  Uri smsUri=Uri.parse("smsto:12345");  Intent smsIntent=new Intent(Intent.ACTION_SENDTO,smsUri);  PackageManager smspackageManager=context.getPackageManager();  List<ResolveInfo> smsresolveInfos=smspackageManager.queryIntentActivities(smsIntent,0);  if (smsresolveInfos.size() > 0) {    return true;  } else {    return false;  }}  }
class C{  public Bundler putLong(String key,long value){  bundle.putLong(key,value);  return this;}  }
class C{  private SSLEngineResult.HandshakeStatus doTasks(){  Runnable runnable;  while ((runnable=sslEngine.getDelegatedTask()) != null) {    runnable.run();  }  return sslEngine.getHandshakeStatus();}  }
class C{  public static double blackFormula(final PlainVanillaPayoff payoff,@Real final double strike,@Real final double forward,@StdDev final double stddev,@DiscountFactor final double discount){  return blackFormula(payoff,strike,forward,stddev,discount,0.0);}  }
class C{  public void removeOldData(EventBean[] oldData){  if (rootView.getRevisionProcessor() != null) {    rootView.getRevisionProcessor().removeOldData(oldData,indexRepository);  } else {    for (    EventTable table : indexRepository.getTables()) {      table.remove(oldData);    }  }}  }
class C{  public Graph search(){  long time1=System.currentTimeMillis();  if (initialGraph != null) {    graph=new EdgeListGraph(initialGraph);    graph.reorientAllWith(Endpoint.TAIL);  } else   if (graph == null) {    graph=new EdgeListGraph(getIndependenceTest().getVariables());  } else {    graph=new EdgeListGraph(graph);    graph.reorientAllWith(Endpoint.TAIL);  }  sepsetProducer=new SepsetsMinScore(graph,getIndependenceTest(),-1);  meekRules=new MeekRules();  meekRules.setAggressivelyPreventCycles(isAggressivelyPreventCycles());  meekRules.setKnowledge(knowledge);  meekRules.setUndirectUnforcedEdges(true);  List<Node> nodes=getIndependenceTest().getVariables();  buildIndexing(nodes);  int numEdges=nodes.size() * (nodes.size() - 1) / 2;  int index=0;  for (int i=0; i < nodes.size(); i++) {    for (int j=i + 1; j < nodes.size(); j++) {      ++index;      if (verbose && index % 100 == 0) {        log("info",index + " of " + numEdges);      }      Node x=nodes.get(i);      Node y=nodes.get(j);      tryAddingEdge(x,y);    }  }  for (  Node node : nodes) {    reorientNode(node);  }  applyMeek(nodes);  this.logger.log("graph","\nReturning this graph: " + graph);  long time2=System.currentTimeMillis();  this.elapsedTime=time2 - time1;  return graph;}  }
class C{  public URLRasterLocation(double latitude,double longitude,int xOffset,int yOffset,String name,URL iconURL){  super(latitude,longitude,xOffset,yOffset,name,getIconRaster(latitude,longitude,xOffset,yOffset,iconURL));  if (location instanceof OMRaster) {    setHorizontalLabelBuffer((((OMRaster)location).getWidth() / 2) + SPACING);  }}  }
class C{  public static Transform makeScale(float x,float y){  return makeScale(x,y,1);}  }
class C{  public int executeQuery(String jpql){  this.bot.log(this,"JPQL",Level.FINE,jpql);  int rowCount=0;synchronized (this.bot.memory()) {    try {      this.entityManager.getTransaction().begin();      rowCount=this.entityManager.createQuery(jpql).executeUpdate();      this.entityManager.getTransaction().commit();      resetSize();    } catch (    RuntimeException failed) {      this.bot.log(this,failed);      if (this.entityManager.getTransaction().isActive()) {        this.entityManager.getTransaction().rollback();      }      clear();      throw failed;    }  }  ((DatabaseNetwork)this.bot.memory().getLongTermMemory()).resetSize();  return rowCount;}  }
class C{  public void endElement(XmlNamespace namespace,String name) throws IOException {  Element element=currentElement();  assert namespace == null || element.nsUri.equals(namespace.uri);  assert element.name.equals(name);  endElement();}  }
class C{  @NonNull public static String checkNotEmpty(String str,@Nullable Object errorMessage){  checkNotNull(str,errorMessage);  checkArgument(!TextUtils.isEmpty(str),errorMessage);  return str;}  }
class C{  protected ScriptDocValues.Strings docFieldStrings(String field){  return (ScriptDocValues.Strings)doc().get(field);}  }
class C{  long references(){  return references;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void fillLangs(final Map<String,Object> dataModel){  dataModel.putAll(langPropsService.getAll(Latkes.getLocale()));}  }
class C{  private Item newString(final String value){  key2.set(STR,value,null,null);  Item result=get(key2);  if (result == null) {    pool.put12(STR,newUTF8(value));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  private static void assertMp4WebvttSubtitleEquals(Subtitle sub,Cue... expectedCues){  assertEquals(1,sub.getEventTimeCount());  assertEquals(0,sub.getEventTime(0));  List<Cue> subtitleCues=sub.getCues(0);  assertEquals(expectedCues.length,subtitleCues.size());  for (int i=0; i < subtitleCues.size(); i++) {    List<String> differences=getCueDifferences(subtitleCues.get(i),expectedCues[i]);    assertTrue("Cues at position " + i + " are not equal. Different fields are "+ Arrays.toString(differences.toArray()),differences.isEmpty());  }}  }
class C{  protected void finalize(){  if (cmmProfile != null) {    CMSManager.getModule().freeProfile(cmmProfile);  } else   if (profileActivator != null) {    ProfileDeferralMgr.unregisterDeferral(profileActivator);  }}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) @Path("/{id}/ip-interfaces") public IpInterfaceRestRep createIpInterface(@PathParam("id") URI id,IpInterfaceCreateParam createParam) throws DatabaseException {  Host host=queryObject(Host.class,id,true);  validateIpInterfaceData(createParam,null);  IpInterface ipInterface=new IpInterface();  ipInterface.setHost(host.getId());  ipInterface.setId(URIUtil.createId(IpInterface.class));  populateIpInterface(createParam,ipInterface);  _dbClient.createObject(ipInterface);  auditOp(OperationTypeEnum.CREATE_HOST_IPINTERFACE,true,null,ipInterface.auditParameters());  return map(ipInterface);}  }
class C{  public static void refreshPlayerList(JList<String> playerList,Client client,boolean displayTeam){  ((DefaultListModel<String>)playerList.getModel()).removeAllElements();  for (  IPlayer player : client.getGame().getPlayersVector()) {    StringBuffer playerDisplay=new StringBuffer(player.getName());    if (displayTeam) {      Team team=client.getGame().getTeamForPlayer(player);      playerDisplay.append(", (");      if (team != null) {        if (team.getId() == IPlayer.TEAM_NONE) {          playerDisplay.append(Messages.getString("PlayerListDialog.NoTeam"));        } else {          playerDisplay.append(Messages.getString("PlayerListDialog.Team"));          playerDisplay.append(" " + team.getId());        }      } else {        playerDisplay.append(Messages.getString("PlayerListDialog.TeamLess"));      }      playerDisplay.append(")");    }    if (player.isGhost()) {      playerDisplay.append(" [");      playerDisplay.append(Messages.getString("PlayerListDialog.player_ghost"));      playerDisplay.append(']');    } else     if (player.isObserver()) {      playerDisplay.append(" [");      playerDisplay.append(Messages.getString("PlayerListDialog.player_observer"));      playerDisplay.append(']');    } else     if (player.isDone()) {      playerDisplay.append(" (");      playerDisplay.append(Messages.getString("PlayerListDialog.player_done"));      playerDisplay.append(')');    }    ((DefaultListModel<String>)playerList.getModel()).addElement(playerDisplay.toString());  }}  }
class C{  NodeID destNodeID(){  return (NodeID)nodeSelector.getSelectedItem();}  }
class C{  private static RemoteCandidate parseCandidate(Attribute attribute,IceMediaStream stream){  String value=null;  try {    value=attribute.getValue();  } catch (  Throwable t) {  }  StringTokenizer tokenizer=new StringTokenizer(value);  String foundation=tokenizer.nextToken();  int componentID=Integer.parseInt(tokenizer.nextToken());  Transport transport=Transport.parse(tokenizer.nextToken());  long priority=Long.parseLong(tokenizer.nextToken());  String address=tokenizer.nextToken();  int port=Integer.parseInt(tokenizer.nextToken());  TransportAddress transAddr=new TransportAddress(address,port,transport);  tokenizer.nextToken();  CandidateType type=CandidateType.parse(tokenizer.nextToken());  Component component=stream.getComponent(componentID);  if (component == null)   return null;  RemoteCandidate relatedCandidate=null;  if (tokenizer.countTokens() >= 4) {    tokenizer.nextToken();    String relatedAddr=tokenizer.nextToken();    tokenizer.nextToken();    int relatedPort=Integer.parseInt(tokenizer.nextToken());    TransportAddress raddr=new TransportAddress(relatedAddr,relatedPort,Transport.UDP);    relatedCandidate=component.findRemoteCandidate(raddr);  }  RemoteCandidate cand=new RemoteCandidate(transAddr,component,type,foundation,priority,relatedCandidate);  component.addRemoteCandidate(cand);  return cand;}  }
class C{  public String globalInfo(){  return "Generates the matrix output in LaTeX-syntax.";}  }
class C{  public byte[] scramble(byte[] serverRandom){  byte[] result=new byte[serverRandom.length];  byte mask=nextByte(100);  for (int i=0; i < serverRandom.length; i++) {    result[i]=(byte)(serverRandom[i] ^ (nextByte() & mask));  }  return result;}  }
class C{  public Document read(char[] text) throws DocumentException, IOException, XmlPullParserException {  getXPPParser().setInput(text);  return parseDocument();}  }
class C{  public void validateBusinessObjectDataDdl(BusinessObjectDataDdlRequest request,String expectedDdl,BusinessObjectDataDdl actualBusinessObjectDataDdl){  assertNotNull(actualBusinessObjectDataDdl);  assertEquals(request.getNamespace(),actualBusinessObjectDataDdl.getNamespace());  assertEquals(request.getBusinessObjectDefinitionName(),actualBusinessObjectDataDdl.getBusinessObjectDefinitionName());  assertEquals(request.getBusinessObjectFormatUsage(),actualBusinessObjectDataDdl.getBusinessObjectFormatUsage());  assertEquals(request.getBusinessObjectFormatFileType(),actualBusinessObjectDataDdl.getBusinessObjectFormatFileType());  assertEquals(request.getBusinessObjectFormatVersion(),actualBusinessObjectDataDdl.getBusinessObjectFormatVersion());  assertEquals(request.getPartitionValueFilter(),actualBusinessObjectDataDdl.getPartitionValueFilter());  assertEquals(request.getBusinessObjectDataVersion(),actualBusinessObjectDataDdl.getBusinessObjectDataVersion());  assertEquals(request.getStorageName(),actualBusinessObjectDataDdl.getStorageName());  assertEquals(request.getOutputFormat(),actualBusinessObjectDataDdl.getOutputFormat());  assertEquals(request.getTableName(),actualBusinessObjectDataDdl.getTableName());  assertEquals(expectedDdl,actualBusinessObjectDataDdl.getDdl());}  }
class C{  private void restoreFromKeypress(final KeyEvent keyEvent,final int keyNumber){  if (keyEvent.isAltDown()) {    final int arrayIndex=(keyNumber > 0 ? keyNumber : MAX_RECENT_MESSAGES) - 1;    if (arrayIndex < recentMessages.size()) {      displayMessage(recentMessages.get(arrayIndex));    }    keyEvent.consume();  }}  }
class C{  public boolean verifySignature(byte[] message,BigInteger r,BigInteger s){  byte[] mRev=new byte[message.length];  for (int i=0; i != mRev.length; i++) {    mRev[i]=message[mRev.length - 1 - i];  }  BigInteger m=new BigInteger(1,mRev);  GOST3410Parameters params=key.getParameters();  BigInteger zero=BigInteger.valueOf(0);  if (zero.compareTo(r) >= 0 || params.getQ().compareTo(r) <= 0) {    return false;  }  if (zero.compareTo(s) >= 0 || params.getQ().compareTo(s) <= 0) {    return false;  }  BigInteger v=m.modPow(params.getQ().subtract(new BigInteger("2")),params.getQ());  BigInteger z1=s.multiply(v).mod(params.getQ());  BigInteger z2=(params.getQ().subtract(r)).multiply(v).mod(params.getQ());  z1=params.getA().modPow(z1,params.getP());  z2=((GOST3410PublicKeyParameters)key).getY().modPow(z2,params.getP());  BigInteger u=z1.multiply(z2).mod(params.getP()).mod(params.getQ());  return u.equals(r);}  }
class C{  public XmlDom(Element element){  this.root=element;}  }
class C{  @Override protected void emit_invoke_compiledmethod(CompiledMethod cm){  Offset methodOffset=cm.getOsrJTOCoffset();  boolean takeThis=!cm.method.isStatic();  MethodReference ref=cm.method.getMemberRef().asMethodReference();  genParameterRegisterLoad(ref,takeThis);  asm.generateJTOCcall(methodOffset);  genResultRegisterUnload(ref);}  }
class C{  final public static List<int[]> generateWidePoly(int lw,int len,int[] xpts,int[] ypts,int[] altx,boolean connect){  ArrayList<int[]> ret_val=new ArrayList<int[]>(len * 4);  int off1=0, off2=0;  int[] x=null, y=null, a_x=null;  float slope;  int end=(connect) ? len : len - 1;  if (len <= 1)   return new ArrayList<int[]>();  off1=(int)lw / 2;  off2=(int)Math.ceil((float)lw / 2f);  for (int i=0, j=(i + 1) % len; i < end; i++, j=(i + 1) % len) {    x=new int[4];    y=new int[4];    if (xpts[i] == xpts[j])     slope=Float.POSITIVE_INFINITY; else     slope=Math.abs((float)(ypts[j] - ypts[i]) / (float)(xpts[j] - xpts[i]));    if (slope <= 1f) {      x[0]=x[3]=xpts[i];      x[1]=x[2]=xpts[j];      y[0]=ypts[i] + off1;      y[1]=ypts[j] + off1;      y[2]=ypts[j] - off2;      y[3]=ypts[i] - off2;      ret_val.add(x);      ret_val.add(y);      if (altx != null) {        a_x=new int[4];        a_x[0]=a_x[3]=altx[i];        a_x[1]=a_x[2]=altx[j];        ret_val.add(a_x);        ret_val.add(y);      }    } else {      x[0]=xpts[i] + off1;      x[1]=xpts[j] + off1;      x[2]=xpts[j] - off2;      x[3]=xpts[i] - off2;      y[0]=y[3]=ypts[i];      y[1]=y[2]=ypts[j];      ret_val.add(x);      ret_val.add(y);      if (altx != null) {        a_x=new int[4];        a_x[0]=altx[i] + off1;        a_x[1]=altx[j] + off1;        a_x[2]=altx[j] - off2;        a_x[3]=altx[i] - off2;        ret_val.add(a_x);        ret_val.add(y);      }    }  }  return ret_val;}  }
class C{  public void addInvokestatic(CtClass clazz,String name,String desc){  addInvokestatic(constPool.addClassInfo(clazz),name,desc);}  }
class C{  public LabeledOMPoly(double[] llPoints,int units,int lType){  super(llPoints,units,lType);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr streetAttr;  String name;  doc=(Document)load("staff",false);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(1);  attributes=testNode.getAttributes();  streetAttr=(Attr)attributes.getNamedItem("street");  name=streetAttr.getNodeName();  assertEquals("nodeName","street",name);  name=streetAttr.getName();  assertEquals("name","street",name);}  }
class C{  public boolean isReadOnly(){  return ((DataTableModel)getModel()).isReadOnly();}  }
class C{  private boolean contains(int cubeY){  int index=binarySearch(cubeY);  return index < cubes.size() && cubes.get(index).getY() == cubeY;}  }
class C{  public EventHistory(Event c){  super(c);  if (c.getTechnicalProduct() != null) {    this.technicalProductObjKey=Long.valueOf(c.getTechnicalProduct().getKey());  }}  }
class C{  protected DrmEvent(int uniqueId,int type,String message){  mUniqueId=uniqueId;  mType=type;  if (null != message) {    mMessage=message;  }}  }
class C{  public JSONObject append(String key,Object value) throws JSONException {  testValidity(value);  Object o=opt(key);  if (o == null) {    put(key,new JSONArray().put(value));  } else   if (o instanceof JSONArray) {    put(key,((JSONArray)o).put(value));  } else {    throw new JSONException("JSONObject[" + key + "] is not a JSONArray.");  }  return this;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMLineElement(prefix,(AbstractDocument)doc);}  }
class C{  public static void catchupEventStream(Context context){  if (VectorApp.isAppInBackground()) {    Log.d(LOG_TAG,"catchupEventStream");    sendEventStreamAction(context,EventStreamService.StreamAction.CATCHUP);  }}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.PACKAGE;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  MobileEnv.dump(request);  MobileSessionCtx wsc=MobileSessionCtx.get(request);  WWindowStatus ws=WWindowStatus.get(request);  if (wsc == null || ws == null) {    if (wsc == null)     MobileUtil.createTimeoutPage(request,response,this,"No Context"); else     doGet(request,response);    return;  }  String p_cmd=MobileUtil.getParameter(request,P_Command);  String column=MobileUtil.getParameter(request,P_ChangedColumn);  log.info("Cmd=" + p_cmd + " - ChangedColumn="+ column);  executeSave(request,wsc,ws);  MobileDoc doc=getSR_Form(request.getRequestURI(),wsc,ws);  MobileUtil.createResponseFragment(request,response,this,null,doc);  log.fine("Closed");}  }
class C{  protected Light createNewSpecificLight(String systemName,String userName){  if (isInsteon(systemName)) {    return new SpecificInsteonLight(systemName,tc,userName);  } else {    return new SpecificX10Light(systemName,tc,userName);  }}  }
class C{  public void clear(){  histogram.clear();}  }
class C{  public void run() throws InterpreterException, IOException {  init();  runCode();}  }
class C{  public void mouseMoved(MouseEvent e){  if (AWTEventMonitor.mouseMotionListener_private != null) {    AWTEventMonitor.mouseMotionListener_private.mouseMoved(e);  }}  }
class C{  private Clustering<Model> generateDefaultClustering(){  final Database db=ResultUtil.findDatabase(hier);  Clustering<Model> c=null;  try {    ByLabelHierarchicalClustering split=new ByLabelHierarchicalClustering();    c=split.run(db);  } catch (  NoSupportedDataTypeException e) {    c=new TrivialAllInOne().run(db);  }  return c;}  }
class C{  public void put(String fieldName,String v){  if (v == null) {    putNull(fieldName);  } else {    _put(fieldName,textNode(v));  }}  }
class C{  static public JComboBox<String> jComboBoxFromList(List<DecoderFile> l){  return new JComboBox<String>(jComboBoxModelFromList(l));}  }
class C{  public JsonParser createJsonParser(byte[] data) throws IOException, JsonParseException {  IOContext ctxt=_createContext(data,true);  if (_inputDecorator != null) {    InputStream in=_inputDecorator.decorate(ctxt,data,0,data.length);    if (in != null) {      return _createJsonParser(in,ctxt);    }  }  return _createJsonParser(data,0,data.length,ctxt);}  }
class C{  public RepositoryExpression atRevision(String revId){  return withOption("revision",revId);}  }
class C{  protected VisionWorldModelListenerSupport(){  listenerList=new EventListenerList();}  }
class C{  private static final void usage(){  System.err.println("usage: java MST -v <levels> [-p] [-m] [-h]");  System.err.println("    -v the number of vertices in the graph");  System.err.println("    -p (print the result>)");  System.err.println("    -m (print informative messages)");  System.err.println("    -h (this message)");  System.exit(0);}  }
class C{  public void addIssuerSerial(String X509IssuerName,int X509SerialNumber){  this.add(new XMLX509IssuerSerial(this.doc,X509IssuerName,X509SerialNumber));}  }
class C{  public void save() throws IOException {}  }
class C{  public String write(Map<String,String> outputProperties){  StringWriter sw=new StringWriter();  try {    write(sw,outputProperties);  } catch (  TransformerException e) {    throw new RuntimeException(e);  }  return sw.toString();}  }
class C{  public void updateGui(final boolean connected,final boolean suspended){  m_gotoAction.setEnabled(connected && suspended);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  SeriesInfo si=getSeriesInfo(stack);  return si == null ? "" : si.getNetwork();}  }
class C{  public static short toShortValue(Object o) throws PageException {  if (o instanceof Short)   return ((Short)o).shortValue();  if (o instanceof Character)   return (short)(((Character)o).charValue()); else   if (o instanceof Boolean)   return (short)((((Boolean)o).booleanValue()) ? 1 : 0); else   if (o instanceof Number)   return (((Number)o).shortValue()); else   if (o instanceof String)   return (short)toDoubleValue(o.toString()); else   if (o instanceof Castable)   return (short)((Castable)o).castToDoubleValue(); else   if (o instanceof ObjectWrap)   return toShortValue(((ObjectWrap)o).getEmbededObject());  throw new CasterException(o,"short");}  }
class C{  public void test_allocCommitFreeCommitWithHistory(){  Journal store=(Journal)getStore(4);  try {    RWStrategy bs=(RWStrategy)store.getBufferStrategy();    final long addr=bs.write(randomData(78));    store.commit();    bs.delete(addr);    assertTrue(bs.isCommitted(addr));    store.commit();    assertTrue(bs.isCommitted(addr));    Thread.currentThread().sleep(5000);    final long addr2=bs.write(randomData(220));    store.commit();    bs.delete(addr2);    store.commit();    assertFalse(bs.isCommitted(addr));  } catch (  InterruptedException e) {  } finally {    store.destroy();  }}  }
class C{  public static int[] toIntArray(Float[] array){  int[] result=new int[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].intValue();  }  return result;}  }
class C{  private void sort(Trie node,List<FeatureFunction> models){  if (node != null) {    if (node.hasRules()) {      RuleCollection rules=node.getRuleCollection();      LOG.debug("Sorting node {}",Arrays.toString(rules.getSourceSide()));      rules.getSortedRules(models);      if (LOG.isDebugEnabled()) {        StringBuilder s=new StringBuilder();        for (        Rule r : rules.getSortedRules(models)) {          s.append("\n\t").append(r.getLHS()).append(" ||| ").append(Arrays.toString(r.getFrench())).append(" ||| ").append(Arrays.toString(r.getEnglish())).append(" ||| ").append(r.getFeatureVector()).append(" ||| ").append(r.getEstimatedCost()).append("  ").append(r.getClass().getName()).append("@").append(Integer.toHexString(System.identityHashCode(r)));        }        LOG.debug("{}",s);      }    }    if (node.hasExtensions()) {      for (      Trie child : node.getExtensions()) {        sort(child,models);      }    } else {      LOG.debug("Node has 0 children to extend: {}",node);    }  }}  }
class C{  private void remove(Element element){  if (this.last == element) {    this.last=element.prev;  }  element.prev.next=element.next;  element.next.prev=element.prev;  element.obj=null;  this.size--;}  }
class C{  public void handleRegionCreateEvent(SystemMemberRegionEvent event){  String memberId=event.getMemberId();  SystemMemberJmx systemMemberJmx=(SystemMemberJmx)findCacheOrAppVmById(memberId);  if (systemMemberJmx != null) {    systemMemberJmx.handleRegionCreate(event);  }}  }
class C{  public void addYears(final int years){  setMillis(getChronology().years().add(getMillis(),years));}  }
class C{  public boolean isSystemTimeNotLockedToExternalReference(){  return mMessage.get(SYSTEM_TIME_NOT_LOCKED_TO_EXTERNAL_REFERENCE);}  }
class C{  public boolean isValidName(String name){  return name != null && VALID_ACCOUNT_NAME.matcher(name).matches();}  }
class C{  public Vertex search(Vertex source,Vertex variable){  for (int index=this.contextStack.size() - 1; index >= 0; index--) {    Vertex context=variable.getNetwork().findById(this.contextStack.get(index));    if ((context != null) && (!context.hasRelationship(Primitive.VARIABLE)) && (variable.matches(context,new HashMap<Vertex,Vertex>()) == Boolean.TRUE)) {      log("search",Level.FINE,context);      return context;    }  }  return null;}  }
class C{  public void endElement(String name) throws IOException {  if (name == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"name"));  }  dontEscape=false;  if (closeStart) {    boolean isEmptyElement=HtmlUtils.isEmptyElement(name);    if (isEmptyElement) {      writer.write(" />");      closeStart=false;      return;    }    writer.write(">");    closeStart=false;  }  writer.write("</");  writer.write(name);  writer.write(">");}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean b=evalBool(stack.pop());  Agent a=(Agent)stack.pop();  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr()) && Permissions.hasPermission(Permissions.PERMISSION_CONVERSION,stack.getUIMgr()))   Carny.getInstance().setAgentFlags(a,Agent.DELETE_AFTER_CONVERT_FLAG,b ? Agent.DELETE_AFTER_CONVERT_FLAG : 0);  return null;}  }
class C{  @Override public int read() throws IOException {  if (this.closed) {    throw new IOException("Attempted read from closed stream.");  }  if (this.pos >= this.contentLength) {    return -1;  }  this.pos++;  return this.wrappedStream.read();}  }
class C{  private File findFirstFile(Context context,Cursor cs){  long first=cs.getLong(cs.getColumnIndex(DatabaseManager.ROLL_COLUMN_FIRST_SERIAL));  int numimages=cs.getInt(cs.getColumnIndex(DatabaseManager.ROLL_COLUMN_NUM_IMAGES));  for (long i=first; i < (first + numimages); i++) {    String filename=String.format("%08d.iff",i);    File file=new File(context.getFilesDir(),filename);    if (file.exists())     return file;  }  return null;}  }
class C{  protected void initializeInputHandlers(){  ViewInputAttributes.ActionAttributes.MouseAction[] resetRollMouseEvents={new ViewInputAttributes.ActionAttributes.MouseAction(MouseEvent.BUTTON1_DOWN_MASK)};  this.getAttributes().setMouseActionAttributes(ORBITVIEW_RESET_ROLL,0,ViewInputAttributes.ActionAttributes.ActionTrigger.ON_PRESS,resetRollMouseEvents,ViewInputAttributes.DEFAULT_KEY_ROLL_MIN_VALUE,ViewInputAttributes.DEFAULT_KEY_ROLL_MAX_VALUE,false,0.0);  ViewInputAttributes.ActionAttributes actionAttrs=this.getAttributes().getActionMap(ViewInputAttributes.DEVICE_MOUSE).getActionAttributes(ORBITVIEW_RESET_ROLL);  actionAttrs.setMouseActionListener(new ResetRollActionListener());}  }
class C{  public T args(String... args){  bootique.args(args);  return (T)this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public double[] computeLocalOfPreviousObservations() throws Exception {  return computeLocalUsingPreviousObservations(null,null,true);}  }
class C{  public Bundler putCharSequence(String key,CharSequence value){  bundle.putCharSequence(key,value);  return this;}  }
class C{  public String toString(){  final String TAB=" ";  StringBuffer retValue=new StringBuffer();  retValue.append("DateOperator ( ").append("date = ").append(date.toString()).append(TAB).append("res = ").append(this.res.name()).append(TAB).append("type = ").append(this.type).append(TAB).append(TAB).append(" )");  return retValue.toString();}  }
class C{  protected boolean isEqualKey(Object key1,Object key2){  return (key1 == key2 || key1.equals(key2));}  }
class C{  public AttributeCertificateHolder(int digestedObjectType,String digestAlgorithm,String otherObjectTypeID,byte[] objectDigest){  holder=new Holder(new ObjectDigestInfo(digestedObjectType,new ASN1ObjectIdentifier(otherObjectTypeID),new AlgorithmIdentifier(digestAlgorithm),Arrays.clone(objectDigest)));}  }
class C{  public void noBody(){  if (headers.isEmpty()) {    size=0;  }}  }
class C{  @Path("/secrets/{secretId}/groups/{groupId}") @Timed @ExceptionMetered @PUT public Response allowAccess(@Auth User user,@PathParam("secretId") LongParam secretId,@PathParam("groupId") LongParam groupId){  logger.info("User '{}' allowing groupId {} access to secretId {}",user,groupId,secretId);  try {    aclDAO.findAndAllowAccess(secretId.get(),groupId.get(),auditLog,user.getName(),new HashMap<>());  } catch (  IllegalStateException e) {    throw new NotFoundException();  }  return Response.ok().build();}  }
class C{  public ChartEntity(Shape area,String toolTipText,String urlText){  ParamChecks.nullNotPermitted(area,"area");  this.area=area;  this.toolTipText=toolTipText;  this.urlText=urlText;}  }
class C{  public boolean isMaxXSet(){  return isMaxXSet(0);}  }
class C{  public static final boolean isLetterOrDigit(char ch){  return (ch <= 'z') && (dataTable[ch] & LETTER_OR_DIGIT_MASK) > 0;}  }
class C{  private void editSubscriptions(){  String packageName=getPackageName();  Intent i=new Intent(Intent.ACTION_VIEW,Uri.parse("market://details?id=" + packageName));  startActivity(i);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public void clear(){  map.clear();}  }
class C{  private static Account createSyncAccount(Context context){  Account newAccount=new Account(ACCOUNT_NAME,ACCOUNT_TYPE);  AccountManager accountManager=(AccountManager)context.getSystemService(ACCOUNT_SERVICE);  Account[] accountsByType=accountManager.getAccountsByType(ACCOUNT_TYPE);  if (!dummyAccountAlreadyAdded(accountsByType)) {    accountManager.addAccountExplicitly(newAccount,null,null);  }  return newAccount;}  }
class C{  private void clearIndexToFirst(){  for (; ; ) {    Index<K,V> q=head;    for (; ; ) {      Index<K,V> r=q.right;      if (r != null && r.indexesDeletedNode() && !q.unlink(r))       break;      if ((q=q.down) == null) {        if (head.right == null)         tryReduceLevel();        return;      }    }  }}  }
class C{  public static double tan(double radians){  return Math.tan(radians);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.696 -0400",hash_original_method="CEC383E8BE8AD02DFB1E0F8E166802C6",hash_generated_method="A1354CACA253C1ABA13FFB05377E0442") public SuffixFileFilter(List<String> suffixes,IOCase caseSensitivity){  if (suffixes == null) {    throw new IllegalArgumentException("The list of suffixes must not be null");  }  this.suffixes=suffixes.toArray(new String[suffixes.size()]);  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public void writeTaskContainerMapping(String taskName,Integer containerId){  Integer existingContainerId=taskNameToContainerId.get(taskName);  if (existingContainerId != null && !existingContainerId.equals(containerId)) {    log.info("Task \"{}\" moved from container {} to container {}",new Object[]{taskName,existingContainerId,containerId});  } else {    log.debug("Task \"{}\" assigned to container {}",taskName,containerId);  }  if (containerId == null) {    send(new Delete(getSource(),taskName,SetTaskContainerMapping.TYPE));    taskNameToContainerId.remove(taskName);  } else {    send(new SetTaskContainerMapping(getSource(),taskName,String.valueOf(containerId)));    taskNameToContainerId.put(taskName,containerId);  }}  }
class C{  protected void onBeforeClusterRendered(Cluster<T> cluster,MarkerOptions markerOptions){  int bucket=getBucket(cluster);  BitmapDescriptor descriptor=mIcons.get(bucket);  if (descriptor == null) {    mColoredCircleBackground.getPaint().setColor(getColor(bucket));    descriptor=BitmapDescriptorFactory.fromBitmap(mIconGenerator.makeIcon(getClusterText(bucket)));    mIcons.put(bucket,descriptor);  }  markerOptions.icon(descriptor);}  }
class C{  public void addPoint(float lt1,float ln1,int x1,int y1,int radius,LinkProperties properties) throws IOException {  LinkPoint.write(lt1,ln1,x1,y1,radius,properties,link.dos);}  }
class C{  protected void deleteLink(Link link,String reason){  if (link == null)   return;  List<Link> linkList=new ArrayList<Link>();  linkList.add(link);  deleteLinks(linkList,reason);}  }
class C{  public void committed(CompositeTransaction tx){  removeTransaction(tx);}  }
class C{  private void print(LogisticRegression.Result result,double alpha){  if (result == null) {    return;  }  String text=result.getNy0() + " cases have " + result.getTarget()+ " = 0; ";  text+=result.getNy1() + " cases have " + result.getTarget()+ " = 1.\n\n";  text+="Var\tAvg\tSD\n";  for (int i=1; i <= result.getNumRegressors(); i++) {    text+=result.getRegressorNames().get(i - 1) + "\t";    text+=nf.format(result.getxMeans()[i]) + "\t";    text+=nf.format(result.getxStdDevs()[i]) + "\n";  }  text+="\nCoefficients and Standard Errors:\n";  text+="Var\tCoeff.\tStdErr\tProb.\tSig.\n";  for (int i=1; i <= result.getNumRegressors(); i++) {    text+=result.getRegressorNames().get(i - 1) + "\t";    text+=nf.format(result.getCoefs()[i]) + "\t";    text+=nf.format(result.getStdErrs()[i]) + "\t";    text+=nf.format(result.getProbs()[i]) + "\t";    if (result.getProbs()[i] < alpha) {      text+="*\n";    } else {      text+="\n";    }  }  text+="\n\nIntercept = " + nf.format(result.getIntercept()) + "\n";  this.modelParameters.setText(text);}  }
class C{  public void orderlyClose(){  try {    server.orderlyCloseChannel(key);  } catch (  IOException e) {    System.out.println(e);  }}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public InputMethod createInputMethod() throws Exception {  return new CodePointInputMethod();}  }
class C{  public final void yyreset(java.io.Reader reader) throws IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public static void main(String[] args) throws Exception {  new AerovisConverter().start(args);}  }
class C{  public boolean isUseSuspenseBalancing(){  Object oo=get_Value(COLUMNNAME_UseSuspenseBalancing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void onHeadersTransitionStart(boolean withHeaders){}  }
class C{  public UndertowFraction enableHTTPS(String path,String keystorePassword,String keyPassword,String alias){  this.keystorePath=path;  this.keystorePassword=keystorePassword;  this.keyPassword=keyPassword;  this.alias=alias;  return this;}  }
class C{  protected void writeColumns(Table table,StringBuilder ddl){  for (int idx=0; idx < table.getColumnCount(); idx++) {    printIndent(ddl);    writeColumn(table,table.getColumn(idx),ddl);    if (idx < table.getColumnCount() - 1) {      println(",",ddl);    }  }}  }
class C{  public ImagePortrayal2D(Image image,double scale){  super(null,scale);  this.image=image;  this.scale=scale;}  }
class C{  public void test_construct_with_ground_terms() throws MalformedQueryException, TokenMgrError, ParseException {  final String sparql="" + "PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n" + "construct { ?s rdf:type ?o }\n"+ "where {?s rdf:type ?o}";  final QueryRoot expected=new QueryRoot(QueryType.CONSTRUCT);{{      final Map<String,String> prefixDecls=new LinkedHashMap<String,String>(PrefixDeclProcessor.defaultDecls);      prefixDecls.put("rdf",RDF.NAMESPACE);      expected.setPrefixDecls(prefixDecls);    }    final ConstructNode construct=new ConstructNode();    expected.setConstruct(construct);    construct.addChild(new StatementPatternNode(new VarNode("s"),new ConstantNode(makeIV(valueFactory.createURI(RDF.TYPE.toString()))),new VarNode("o"),null,Scope.DEFAULT_CONTEXTS));    final JoinGroupNode whereClause=new JoinGroupNode();    expected.setWhereClause(whereClause);    whereClause.addChild(new StatementPatternNode(new VarNode("s"),new ConstantNode(makeIV(valueFactory.createURI(RDF.TYPE.toString()))),new VarNode("o"),null,Scope.DEFAULT_CONTEXTS));  }  final QueryRoot actual=parse(sparql,baseURI);  assertSameAST(sparql,expected,actual);}  }
class C{  public boolean isFullyZoomedOut(){  return mViewPortHandler.isFullyZoomedOut();}  }
class C{  @RequestMapping(value="/replies/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> deleteReply(@PathVariable Long id){  log.debug("REST request to delete Reply : {}",id);  replyService.deleteReply(id);  return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("reply",id.toString())).build();}  }
class C{  public ZDT5(int numberOfVariables){  super(numberOfVariables);}  }
class C{  public void reset(final int maxSize,final String keyPrefix){  Check.notNullOrEmpty(keyPrefix,"keyPrefix");  for (int i=0; i < maxSize; i++) {    final String key=makeKey(keyPrefix,i);    if (preferenceStore.contains(key)) {      preferenceStore.setToDefault(key);    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static Region region(String name,Cache cache){  Region region=mock(Region.class);  RegionAttributes attributes=mock(RegionAttributes.class);  DataPolicy policy=mock(DataPolicy.class);  when(region.getAttributes()).thenReturn(attributes);  when(attributes.getDataPolicy()).thenReturn(policy);  when(region.getCache()).thenReturn(cache);  when(region.getRegionService()).thenReturn(cache);  return region;}  }
class C{  @Parameterized.Parameters(name="{index}: PaymentChannelStateTest({0})") public static Collection<PaymentChannelClient.VersionSelector> data(){  return Arrays.asList(PaymentChannelClient.VersionSelector.VERSION_1,PaymentChannelClient.VersionSelector.VERSION_2_ALLOW_1);}  }
class C{  public static Path currentDataDirectory(){  RootDirectorySystem rootService=getCurrent();  if (rootService == null)   throw new IllegalStateException(L.l("{0} must be active for getCurrentDataDirectory().",RootDirectorySystem.class.getSimpleName()));  return rootService.dataDirectory();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof Marker)) {    return false;  }  Marker that=(Marker)obj;  if (!PaintUtilities.equal(this.paint,that.paint)) {    return false;  }  if (!ObjectUtilities.equal(this.stroke,that.stroke)) {    return false;  }  if (!PaintUtilities.equal(this.outlinePaint,that.outlinePaint)) {    return false;  }  if (!ObjectUtilities.equal(this.outlineStroke,that.outlineStroke)) {    return false;  }  if (this.alpha != that.alpha) {    return false;  }  if (!ObjectUtilities.equal(this.label,that.label)) {    return false;  }  if (!ObjectUtilities.equal(this.labelFont,that.labelFont)) {    return false;  }  if (!PaintUtilities.equal(this.labelPaint,that.labelPaint)) {    return false;  }  if (!this.labelBackgroundColor.equals(that.labelBackgroundColor)) {    return false;  }  if (this.labelAnchor != that.labelAnchor) {    return false;  }  if (this.labelTextAnchor != that.labelTextAnchor) {    return false;  }  if (!ObjectUtilities.equal(this.labelOffset,that.labelOffset)) {    return false;  }  if (!this.labelOffsetType.equals(that.labelOffsetType)) {    return false;  }  return true;}  }
class C{  @RequestMapping(ResourceURL.WELCOME) public ResultVO welcome(@AuthenticationPrincipal User user){  return resultHelper.successResp(new WelcomeVO(user.getId(),String.format(template,user.getName())));}  }
class C{  public SecureRandomPool(String algorithm,int poolSize){  this(algorithm,poolSize,null);}  }
class C{  public void markChanges(SerialReply l){  try {    for (int i=0; i <= lastUsedSensor; i++) {      if (sensorArray[i] == null) {        continue;      }      int loc=i / 8;      int bit=i % 8;      boolean value=(((l.getElement(loc + 2) >> bit) & 0x01) == 1) ^ sensorArray[i].getInverted();      if (value) {        if (((sensorTempSetting[i] == Sensor.ACTIVE) || (sensorTempSetting[i] == Sensor.UNKNOWN)) && (sensorLastSetting[i] != Sensor.ACTIVE)) {          sensorLastSetting[i]=Sensor.ACTIVE;          sensorArray[i].setKnownState(Sensor.ACTIVE);        }        sensorTempSetting[i]=Sensor.ACTIVE;      } else {        if (((sensorTempSetting[i] == Sensor.INACTIVE) || (sensorTempSetting[i] == Sensor.UNKNOWN)) && (sensorLastSetting[i] != Sensor.INACTIVE)) {          sensorLastSetting[i]=Sensor.INACTIVE;          sensorArray[i].setKnownState(Sensor.INACTIVE);        }        sensorTempSetting[i]=Sensor.INACTIVE;      }    }  } catch (  JmriException e) {    log.error("exception in markChanges: " + e);  }}  }
class C{  public synchronized long exponentialWait(){  long maxDelayRet=minDelay + ((maxDelay - minDelay) / maxFailureCount) * currentFailureCount;  return (long)(random.nextFloat() * maxDelayRet);}  }
class C{  private double computeLogsum(double betaWalkTT,double betaWalkTD,double cik1TT,double cik2TT,double cik3TT,double cik1TD,double cik2TD,double cik3TD){  double Vik1=betaWalkTT * cik1TT + betaWalkTD * cik1TD;  double Vik2=betaWalkTT * cik2TT + betaWalkTD * cik2TD;  double Vik3=betaWalkTT * cik3TT + betaWalkTD * cik3TD;  double Ai=Math.log(Math.exp(Vik1) + Math.exp(Vik2) + Math.exp(Vik3));  System.out.println(Ai);  return Ai;}  }
class C{  public static boolean asBoolean(CharSequence string){  return string.length() > 0;}  }
class C{  public FrenchLightStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  @Override public boolean containsValue(Object value){  final Segment<K,V>[] segments=this.segments;  int[] mc=new int[segments.length];  for (int k=0; k < RETRIES_BEFORE_LOCK; ++k) {    int sum=0;    int mcsum=0;    for (int i=0; i < segments.length; ++i) {      int c=segments[i].count;      mcsum+=mc[i]=segments[i].modCount;      if (segments[i].containsValue(value))       return true;    }    boolean cleanSweep=true;    if (mcsum != 0) {      for (int i=0; i < segments.length; ++i) {        int c=segments[i].count;        if (mc[i] != segments[i].modCount) {          cleanSweep=false;          break;        }      }    }    if (cleanSweep)     return false;  }  for (int i=0; i < segments.length; ++i)   segments[i].lock();  boolean found=false;  try {    for (int i=0; i < segments.length; ++i) {      if (segments[i].containsValue(value)) {        found=true;        break;      }    }  }  finally {    for (int i=0; i < segments.length; ++i)     segments[i].unlock();  }  return found;}  }
class C{  private void emitLoop(List<Object> localQueue,Object current){  boolean once=true;  boolean skipFinal=false;  try {    do {      if (localQueue != null) {        for (        Object n : localQueue) {          accept(n);        }      }      if (once) {        once=false;        accept(current);      }synchronized (this) {        localQueue=queue;        queue=null;        if (localQueue == null) {          emitting=false;          skipFinal=true;          break;        }      }    } while (true);  }  finally {    if (!skipFinal) {synchronized (this) {        emitting=false;      }    }  }}  }
class C{  public static void startGooglePlay(Context context){  final String appPackageName=context.getPackageName();  try {    context.startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("market://details?id=" + appPackageName)));  } catch (  android.content.ActivityNotFoundException anfe) {    context.startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("http://play.google.com/store/apps/details?id=" + appPackageName)));  }}  }
class C{  public Class toClass(CtClass ct,ClassLoader loader) throws CannotCompileException {  return toClass(ct,loader,null);}  }
class C{  @DSComment("Data serialization/deserialization") @DSSpec(DSCat.SERIALIZATION) @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:46.127 -0500",hash_original_method="9A231220123F2F65AC76F55439204202",hash_generated_method="4B27DE55ED62E3465E0AE69468C5694B") @DSVerified("Called from BackupManager") @Override public void onBackup(ParcelFileDescriptor oldState,BackupDataOutput data,ParcelFileDescriptor newState) throws IOException {  mDispatcher.performBackup(oldState,data,newState);}  }
class C{  public boolean isEntering(){  return mFocusState == FocusState.STATE_ENTER;}  }
class C{  public static String trim(@NonNull String str,int start,int end){  return str.length() > start ? (str.length() > end ? str.substring(start,end) : str.substring(start)) : "";}  }
class C{  public void insert(Key key){  Node x=new Node();  x.key=key;  size++;  head=insert(x,head);  if (min == null)   min=head; else   min=(greater(min.key,key)) ? head : min;}  }
class C{  @Override public BNetwork reduce(Query.ReduceQuery query){  BNetwork network=query.getNetwork();  Collection<String> queryVars=query.getQueryVars();  Assignment evidence=query.getEvidence();  List<String> sortedNodesIds=network.getSortedNodesIds();  sortedNodesIds.retainAll(queryVars);  Collections.reverse(sortedNodesIds);  BNetwork reduced=new BNetwork();  for (  String var : sortedNodesIds) {    Set<String> directAncestors=network.getNode(var).getAncestorsIds(queryVars);    Map<String,Set<Value>> inputValues=new HashMap<String,Set<Value>>();    for (    String input : directAncestors) {      inputValues.put(input,network.getNode(var).getValues());    }    Set<Assignment> inputs=InferenceUtils.getAllCombinations(inputValues);    ConditionalTable.Builder builder=new ConditionalTable.Builder(var);    for (    Assignment a : inputs) {      Assignment evidence2=new Assignment(evidence,a);      CategoricalTable result=(CategoricalTable)queryProb(network,var,evidence2);      builder.addRows(a,result.getTable());    }    ChanceNode cn=new ChanceNode(var,builder.build());    for (    String ancestor : directAncestors) {      cn.addInputNode(reduced.getNode(ancestor));    }    reduced.addNode(cn);  }  return reduced;}  }
class C{  public Process run(RunConfiguration config,IExecutor executor){  return runnerRegistry.getRunner(config).run(config,executor);}  }
class C{  @SafeVarargs public static <Type>Constraint<Type> disjunctive(@NonNull final Constraint<Type>... constraints){  return DisjunctiveConstraint.create(constraints);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private boolean isIvrEnabled(NetworkSystem networkSystem) throws NetworkDeviceControllerException {  MDSDialog dialog=null;  try {    dialog=setUpDialog(networkSystem);    return dialog.isIvrEnabled();  } catch (  NetworkDeviceControllerException ex) {    _log.error("Cannot remove zones: " + (ex.getCause() != null ? ex.getCause().getMessage() : ex.getLocalizedMessage()));    throw ex;  } finally {    disconnect(dialog);  }}  }
class C{  public JSONObject put(String key,Map<String,Object> value) throws JSONException {  this.put(key,new JSONObject(value));  return this;}  }
class C{  public DNSOutput(){  this(32);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:27.178 -0500",hash_original_method="2C5263E549B4F001B6A4C4F0C63C3EBE",hash_generated_method="5447061C36967CD18D741AA45242B581") public void removeAtRange(int index,int size){  final int end=Math.min(mSize,index + size);  for (int i=index; i < end; i++) {    removeAt(i);  }}  }
class C{  public void testFailureCompressionNotWorking() throws IOException {  if (skip)   return;  long rawDataSize=writeRecords(10000,false,false,false);  if (!compression.equalsIgnoreCase(Compression.Algorithm.NONE.getName())) {    Assert.assertTrue(out.getPos() < rawDataSize);  }  closeOutput();}  }
class C{  public static void trace(byte level,String s){  trace(level,s,null);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LESSONS'";  db.execSQL(sql);}  }
class C{  public XmlHandler fromXmlToAnnotation(){  try {    for (    String className : xml.loadAttributes().keySet())     fromXmlToAnnotation(Class.forName(className));  } catch (  Exception e) {    JmapperLog.ERROR(e);  }  return this;}  }
class C{  private void renderComponent(final Graphics2D g2,final FormObject formObject,final boolean isPrinting){  final int page=formObject.getPageNumber();  final AffineTransform ax=g2.getTransform();  final Font backup=g2.getFont();  final Stroke st=g2.getStroke();  final Color old=g2.getColor();  final Shape oldClip=g2.getClip();  final Composite oldCom=g2.getComposite();  g2.translate(0,pageData.getMediaBoxHeight(page) - pageData.getCropBoxHeight(page));  if (formObject.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Text) {    final String name=formObject.getName(PdfDictionary.Name);    if (name != null && name.equals("Comment")) {      try {        final BufferedImage commentIcon=ImageIO.read(getClass().getResource("/org/jpedal/objects/acroforms/res/comment.png"));        g2.drawImage(commentIcon,formObject.getBoundingRectangle().x,pageData.getCropBoxHeight(page) - formObject.getBoundingRectangle().y,formObject.getBoundingRectangle().width,formObject.getBoundingRectangle().height,null);      } catch (      final Exception e) {        LogWriter.writeLog("Exception: " + e.getMessage());      }    }  }  if (formObject.getFloatArray(PdfDictionary.C) == null) {    formObject.setFloatArray(PdfDictionary.C,new float[]{255,255,0});  }  final float[] col=formObject.getFloatArray(PdfDictionary.C);  Color bgColor=null;  if (col != null) {    if (col[0] > 1 || col[1] > 1 || col[2] > 1) {      bgColor=new Color((int)col[0],(int)col[1],(int)col[2]);    } else {      bgColor=new Color(col[0],col[1],col[2]);    }  }  if (formObject.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Popup && formObject.getBoolean(PdfDictionary.Open)) {    FormRenderUtilsG2.renderPopupWindow(g2,formObject,bgColor,isPrinting,pageData.getCropBoxHeight(page));  }  g2.setFont(backup);  if (AcroRenderer.isAnnotation(formObject) && formObject.getParameterConstant(PdfDictionary.Subtype) != PdfDictionary.Widget) {    BufferedImage bi=AnnotationFactory.getIcon(formObject);    g2.drawImage(bi,formObject.getBoundingRectangle().x,pageData.getCropBoxHeight(page) - (formObject.getBoundingRectangle().y + formObject.getBoundingRectangle().height),null);  } else {    int borderWidth=FormRenderUtilsG2.renderBorder(g2,formObject,pageData.getCropBoxHeight(page));    g2.setStroke(st);    final String textValue=formObject.getValue();    if (textValue != null) {      FontMetrics metrics=FormRenderUtilsG2.renderFont(g2,formObject,textValue,borderWidth);      int justification=formObject.getAlignment();      Rectangle2D r=metrics.getStringBounds(textValue,g2);      if (formObject.getFieldFlags()[FormObject.PUSHBUTTON_ID]) {        justification=0;      }      if (formObject.getObjectArray(PdfDictionary.Opt) != null && !formObject.getFieldFlags()[FormObject.COMBO_ID]) {        FormRenderUtilsG2.renderComboForms(g2,formObject,metrics,r,borderWidth,justification,pageData.getCropBoxHeight(page));      } else {        if (!textValue.isEmpty()) {          g2.setClip(new Rectangle(formObject.getBoundingRectangle().x + borderWidth - 1,pageData.getCropBoxHeight(page) - (formObject.getBoundingRectangle().y + formObject.getBoundingRectangle().height) + borderWidth - 1,formObject.getBoundingRectangle().width - (borderWidth * 2) + 2,formObject.getBoundingRectangle().height - (borderWidth * 2) + 2));          if (formObject.getFieldFlags()[FormObject.MULTILINE_ID]) {            FormRenderUtilsG2.renderMultilineTextField(g2,formObject,metrics,r,textValue,borderWidth,justification,pageData.getCropBoxHeight(page));          } else {            FormRenderUtilsG2.renderSingleLineTextField(g2,formObject,metrics,r,textValue,borderWidth,justification,pageData.getCropBoxHeight(page));          }        }      }    }    FormRenderUtilsG2.renderQuadPoint(g2,formObject,bgColor,pageData.getCropBoxHeight(page));  }  g2.setTransform(ax);  g2.setFont(backup);  g2.setStroke(st);  g2.setColor(old);  g2.setClip(oldClip);  g2.setComposite(oldCom);}  }
class C{  Index(Node<K,V> node,Index<K,V> down,Index<K,V> right){  this.node=node;  this.down=down;  this.right=right;}  }
class C{  public LocalDate withDayOfMonth(int dayOfMonth){  return withLocalMillis(getChronology().dayOfMonth().set(getLocalMillis(),dayOfMonth));}  }
class C{  public void addDocument(Document d){  if (!m_readMode) {    try {      writer.addDocument(d);      m_hitCountCache.clear();    } catch (    IOException e) {      e.printStackTrace();    }  } else {    throw new IllegalStateException("Documents can not be added to the index unless" + "the LuceneSearcher is not in read mode");  }}  }
class C{  public static boolean isLongPressOnPowerOffEnabled(){  return SystemProperties.getInt("factory.long_press_power_off",0) != 0;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void installClientDecorations(JRootPane root){  installBorder(root);  JComponent titlePane=createTitlePane(root);  setTitlePane(root,titlePane);  installWindowListeners(root,root.getParent());  installLayout(root);  if (window != null) {    root.revalidate();    root.repaint();  }}  }
class C{  void processOFMessage(OFMessage m){  roleChanger.checkTimeout();switch (m.getType()) {case BARRIER_REPLY:    processOFBarrierReply((OFBarrierReply)m);  break;case ERROR:processOFError((OFErrorMsg)m);break;case FLOW_REMOVED:processOFFlowRemoved((OFFlowRemoved)m);break;case GET_CONFIG_REPLY:processOFGetConfigReply((OFGetConfigReply)m);break;case PACKET_IN:processOFPacketIn((OFPacketIn)m);break;case PORT_STATUS:processOFPortStatus((OFPortStatus)m);break;case QUEUE_GET_CONFIG_REPLY:processOFQueueGetConfigReply((OFQueueGetConfigReply)m);break;case STATS_REPLY:processOFStatsReply((OFStatsReply)m);break;case ROLE_REPLY:processOFRoleReply((OFRoleReply)m);break;case EXPERIMENTER:processOFExperimenter((OFExperimenter)m);break;default :illegalMessageReceived(m);break;}}  }
class C{  @Override protected void replaceBorderIfNecessary(){  if (!isNativeSearchField()) {    super.replaceBorderIfNecessary();  }}  }
class C{  public Vector add(int x,int y,int z){  return new Vector(this.x + x,this.y + y,this.z + z);}  }
class C{  public static AnimatedLabel createClassicSpinningLine(){  return createClassicSpinningLine(150);}  }
class C{  public byte[] engineDigest(){  int bufferNdx=(int)(count % BLOCK_LENGTH);  int padLen=(bufferNdx < 56) ? (56 - bufferNdx) : (120 - bufferNdx);  byte[] tail=new byte[padLen + 8];  tail[0]=(byte)0x80;  for (int i=0; i < 8; i++)   tail[padLen + i]=(byte)((count * 8) >>> (8 * i));  engineUpdate(tail,0,tail.length);  byte[] result=new byte[16];  for (int i=0; i < 4; i++)   for (int j=0; j < 4; j++)   result[i * 4 + j]=(byte)(context[i] >>> (8 * j));  engineReset();  return result;}  }
class C{  @Override public void put(String name,Object value){  emulatedFields.put(name,value);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private String productOwnership(){  log.info("productOwnership - M_Product_Category_ID=" + p_M_Product_Category_ID + ", M_Product_ID="+ p_M_Product_ID);  String set=" SET AD_Org_ID=" + p_AD_Org_ID;  if (p_M_Product_Category_ID > 0)   set+=" WHERE EXISTS (SELECT * FROM M_Product p" + " WHERE p.M_Product_ID=x.M_Product_ID AND p.M_Product_Category_ID=" + p_M_Product_Category_ID + ")"; else   set+=" WHERE M_Product_ID=" + p_M_Product_ID;  set+=" AND AD_Client_ID=" + getAD_Client_ID() + " AND AD_Org_ID<>"+ p_AD_Org_ID;  log.fine("productOwnership - " + set);  String sql="UPDATE M_Product x " + set;  int no=DB.executeUpdate(sql,get_TrxName());  addLog(0,null,new BigDecimal(no),Msg.translate(getCtx(),"M_Product_ID"));  sql="UPDATE M_Product_Acct x " + set;  no=DB.executeUpdate(sql,get_TrxName());  addLog(0,null,new BigDecimal(no),Msg.translate(getCtx(),"C_AcctSchema_ID"));  sql="UPDATE M_Product_BOM x " + set;  no=DB.executeUpdate(sql,get_TrxName());  addLog(0,null,new BigDecimal(no),Msg.translate(getCtx(),"M_Product_BOM_ID"));  sql="UPDATE M_Product_PO x " + set;  no=DB.executeUpdate(sql,get_TrxName());  addLog(0,null,new BigDecimal(no),Msg.translate(getCtx(),"PO"));  sql="UPDATE M_Product_Trl x " + set;  no=DB.executeUpdate(sql,get_TrxName());  addLog(0,null,new BigDecimal(no),Msg.translate(getCtx(),"AD_Language"));  return "";}  }
class C{  public PostConstructCustomScopeEvent(ScopeContext scopeContext){  super(scopeContext);}  }
class C{  private boolean processAccessKeys(String keyStr,HTMLComponent htmlC,Component ui){  int index=keyStr.indexOf(' ');  boolean isFirstKey=true;  while (index != -1) {    String key=keyStr.substring(0,index).trim();    keyStr=keyStr.substring(index + 1);    if (!processAccessKey(key,htmlC,ui,isFirstKey)) {      return false;    }    isFirstKey=false;    index=keyStr.indexOf(' ');  }  return processAccessKey(keyStr,htmlC,ui,isFirstKey);}  }
class C{  private static int searchSomeElementsInBFList(List<BloomFilter<Integer>> bfList,int[] values,int nbSearchesToDo){  int minSearchSteps=10000000;  int maxSearchSteps=0;  int sumSearchSteps=0;  int minSearchStepsToFirst=10000000;  int maxSearchStepsToFirst=0;  int sumSearchStepsToFirst=0;  int nbSearches=0;  int nbFound=0;  int nbResults=0;  int elem;  SearchStatistics stat=new SearchStatistics();  long sumSearchTime=0;  long sumSearchTimeToFirst=0;  for (int i=0; i < nbSearchesToDo; i++) {    int index=(int)Math.floor(Math.random() * values.length);    elem=values[index];    stat.clear();    long startTime=System.currentTimeMillis();    ArrayList<BloomFilter<Integer>> results=searchAllInBFList(bfList,elem,stat);    long endTime=System.currentTimeMillis();    long diffTime=endTime - startTime;    sumSearchTime+=diffTime;    if (results.size() > 0) {      nbFound++;    }    nbResults+=results.size();    nbSearches++;    if (stat.nbBFChecks < minSearchSteps) {      minSearchSteps=stat.nbBFChecks;    }    if (stat.nbBFChecks > maxSearchSteps) {      maxSearchSteps=stat.nbBFChecks;    }    sumSearchSteps+=stat.nbBFChecks;    stat.clear();    startTime=System.currentTimeMillis();    results=searchFirstInBFList(bfList,elem,stat);    endTime=System.currentTimeMillis();    diffTime=endTime - startTime;    sumSearchTimeToFirst+=diffTime;    if (stat.nbBFChecks < minSearchStepsToFirst) {      minSearchStepsToFirst=stat.nbBFChecks;    }    if (stat.nbBFChecks > maxSearchStepsToFirst) {      maxSearchStepsToFirst=stat.nbBFChecks;    }    sumSearchStepsToFirst+=stat.nbBFChecks;  }  System.out.print(" |Min steps| " + minSearchSteps + "| Max steps | "+ maxSearchSteps+ "| Avg steps | "+ (double)sumSearchSteps / nbSearches + "| Avg time millis | " + (double)sumSearchTime / nbSearches + "| Total time millis | " + sumSearchTime + "| Nb searches | " + nbSearches + "| Nb results | " + nbResults + " |Min steps to first| " + minSearchStepsToFirst + "| Max steps to first| " + maxSearchStepsToFirst + "| Avg steps to first| " + (double)sumSearchStepsToFirst / nbSearches + "| Avg time millis to first| " + (double)sumSearchTimeToFirst / nbSearches + "| Total time millis to first| " + sumSearchTimeToFirst);  return nbFound;}  }
class C{  public static double quantile(double y,double shape,double scale){  return 0.5 * scale * pointChi2(y,2.0 * shape);}  }
class C{  public float distance(Vector3f v){  return FastMath.sqrt(distanceSquared(v));}  }
class C{  public int numChildren(int row){  int count=0;  nextValidRowPositions.clear();  for (int i=0; i < n; i++) {    board[row][i]=true;    if (valid(row,i)) {      count++;      nextValidRowPositions.add(i);    }    board[row][i]=false;  }  return count;}  }
class C{  private static List<Territory> findFontier(final Territory start,final Match<Territory> endCondition,final Match<Territory> routeCondition,final int distance,final GameData data){  final Match<Territory> canGo=new CompositeMatchOr<>(endCondition,routeCondition);  final IntegerMap<Territory> visited=new IntegerMap<>();  final Queue<Territory> q=new LinkedList<>();  final List<Territory> frontier=new ArrayList<>();  q.addAll(data.getMap().getNeighbors(start,canGo));  Territory current=null;  visited.put(start,0);  for (  final Territory t : q) {    visited.put(t,1);    if (1 == distance && endCondition.match(t)) {      frontier.add(t);    }  }  while (!q.isEmpty()) {    current=q.remove();    if (visited.getInt(current) == distance) {      break;    } else {      for (      final Territory neighbor : data.getMap().getNeighbors(current,canGo)) {        if (!visited.keySet().contains(neighbor)) {          q.add(neighbor);          final int dist=visited.getInt(current) + 1;          visited.put(neighbor,dist);          if (dist == distance && endCondition.match(neighbor)) {            frontier.add(neighbor);          }        }      }    }  }  return frontier;}  }
class C{  public List<SootMethod> implicit(){  List<SootMethod> ret=new ArrayList<SootMethod>();  addMethod(ret,"<java.lang.System: void initializeSystemClass()>");  addMethod(ret,"<java.lang.ThreadGroup: void <init>()>");  addMethod(ret,"<java.lang.Thread: void exit()>");  addMethod(ret,"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>");  addMethod(ret,"<java.lang.ClassLoader: void <init>()>");  addMethod(ret,"<java.lang.ClassLoader: java.lang.Class loadClassInternal(java.lang.String)>");  addMethod(ret,"<java.lang.ClassLoader: void checkPackageAccess(java.lang.Class,java.security.ProtectionDomain)>");  addMethod(ret,"<java.lang.ClassLoader: void addClass(java.lang.Class)>");  addMethod(ret,"<java.lang.ClassLoader: long findNative(java.lang.ClassLoader,java.lang.String)>");  addMethod(ret,"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>");  addMethod(ret,"<java.lang.ref.Finalizer: void runFinalizer()>");  addMethod(ret,"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>");  addMethod(ret,"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>");  return ret;}  }
class C{  public static Float convertFontSize(Element e){  Value v=CSSUtilities.getComputedStyle(e,SVGCSSEngine.FONT_SIZE_INDEX);  return new Float(v.getFloatValue());}  }
class C{  public GoTo(int playerId,int to){  super();  addParameterToRequest("playerid",playerId);  addParameterToRequest("to",to);}  }
class C{  public void fireDisplayedChainChanged(){  fireModelChanged(ModelEvent.DISPLAYED_CHAIN_CHANGED);}  }
class C{  public boolean supportsAltitude(){  return mProperties.mSupportsAltitude;}  }
class C{  @HLEFunction(nid=0x2A3D44FF,version=150) public int sceKernelGetCallbackCount(@CheckArgument("checkCallbackID") int uid){  SceKernelCallbackInfo callback=getCallbackInfo(uid);  if (log.isDebugEnabled()) {    log.debug(String.format("sceKernelGetCallbackCount returning count=%d",callback.getNotifyCount()));  }  return callback.getNotifyCount();}  }
class C{  public long count(){  return xStats.count();}  }
class C{  protected void installPreviousButtonListeners(Component c){  installButtonListeners(c,previousButtonHandler);}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  public String toString(){  final String TAB=" ";  return "External ( " + "socket = " + this.socket + TAB+ "monitor = "+ this.monitor+ TAB+ "readBuffer = "+ this.readBuffer+ TAB+ "ascii = "+ this.ascii+ TAB+ "lineEndBuffer = "+ this.lineEndBuffer+ TAB+ "first = "+ this.first+ TAB+ "shabang = "+ this.shabang+ TAB+ " )";}  }
class C{  public void addPreBuiltClassifier(Classifier c){  m_preBuiltClassifiers.add(c);}  }
class C{  public void close(){  try {    this.out.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private static int polarCompare(Coordinate o,Coordinate p,Coordinate q){  double dxp=p.x - o.x;  double dyp=p.y - o.y;  double dxq=q.x - o.x;  double dyq=q.y - o.y;  int orient=CGAlgorithms.computeOrientation(o,p,q);  if (orient == CGAlgorithms.COUNTERCLOCKWISE)   return 1;  if (orient == CGAlgorithms.CLOCKWISE)   return -1;  double op=dxp * dxp + dyp * dyp;  double oq=dxq * dxq + dyq * dyq;  if (op < oq) {    return -1;  }  if (op > oq) {    return 1;  }  return 0;}  }
class C{  private static boolean isEmpty(IContainer container){  if (container instanceof IBlock) {    IBlock block=(IBlock)container;    return block.getInstructions().isEmpty() || block.contains(AFlag.RETURN);  } else   if (container instanceof IRegion) {    IRegion region=(IRegion)container;    for (    IContainer block : region.getSubBlocks()) {      if (!isEmpty(block)) {        return false;      }    }    return true;  } else {    throw new JadxRuntimeException("Unknown container type: " + container.getClass());  }}  }
class C{  public static void clearKeyboardFocus(final Stage stage){  if (stage != null) {    stage.setKeyboardFocus(null);  }}  }
class C{  public void testJobNotFailedOverWithStaticProjection() throws Exception {  failed.set(false);  routed.set(false);  try {    Ignite ignite1=startGrid(NODE1);    Ignite ignite2=startGrid(NODE2);    Ignite ignite3=startGrid(NODE3);    assert ignite1 != null;    assert ignite2 != null;    assert ignite3 != null;    ClusterGroup nodes=ignite1.cluster().forNodeIds(Arrays.asList(ignite1.cluster().localNode().id(),ignite2.cluster().localNode().id()));    Integer res=(Integer)compute(nodes.forPredicate(p)).withTimeout(10000).execute(JobFailTask.class.getName(),"1");    assert res == 1;  } catch (  ClusterTopologyException ignored) {    failed.set(true);  } finally {    assertTrue(failed.get());    assertFalse(routed.get());    stopGrid(NODE1);    stopGrid(NODE2);    stopGrid(NODE3);  }}  }
class C{  public byte[] lindex(final byte[] key,final long index){  checkIsInMulti();  client.lindex(key,index);  return client.getBinaryBulkReply();}  }
class C{  public SearchScrollRequest scroll(String keepAlive){  return scroll(new Scroll(TimeValue.parseTimeValue(keepAlive,null,getClass().getSimpleName() + ".keepAlive")));}  }
class C{  public boolean hasMyomerBooster(){  for (  Mounted mEquip : getMisc()) {    MiscType mtype=(MiscType)mEquip.getType();    if (mtype.hasFlag(MiscType.F_MASC) && !mEquip.isInoperable()) {      return true;    }  }  return false;}  }
class C{  public boolean requestReceived(TOMMessage request,boolean fromClient,ServerCommunicationSystem cs){  if (controller.getStaticConf().isBFT() && !verifier.isValidRequest(request.getContent()))   return false;  request.receptionTime=System.nanoTime();  int clientId=request.getSender();  boolean accounted=false;  ClientData clientData=getClientData(clientId);  clientData.clientLock.lock();  if (fromClient && (controller.getStaticConf().getUseControlFlow() != 0)) {    if (clientData.getPendingRequests().size() > controller.getStaticConf().getUseControlFlow()) {      clientData.setLastMessageReceived(request.getSequence());      clientData.setLastMessageReceivedTime(request.receptionTime);      clientData.clientLock.unlock();      return false;    }  }  if (clientData.getSession() != request.getSession()) {    clientData.setSession(request.getSession());    clientData.setLastMessageReceived(-1);    clientData.getOrderedRequests().clear();    clientData.getPendingRequests().clear();  }  if ((clientData.getLastMessageReceived() == -1) || (clientData.getLastMessageReceived() + 1 == request.getSequence()) || ((request.getSequence() > clientData.getLastMessageReceived()) && !fromClient)) {    if (!request.signed || clientData.verifySignature(request.serializedMessage,request.serializedMessageSignature)) {      request.recvFromClient=fromClient;      clientData.getPendingRequests().add(request);      clientData.setLastMessageReceived(request.getSequence());      clientData.setLastMessageReceivedTime(request.receptionTime);      if (timer != null) {        timer.watch(request);      }      accounted=true;    }  } else {    if (clientData.getLastMessageReceived() >= request.getSequence()) {      TOMMessage reply=clientData.getReply(request.getSequence());      if (reply != null && cs != null) {        if (reply.recvFromClient && fromClient) {          System.out.println("[CACHE] re-send reply [Sender: " + reply.getSender() + ", sequence: "+ reply.getSequence()+ ", session: "+ reply.getSession()+ "]");          cs.send(new int[]{request.getSender()},reply);        } else         if (!reply.recvFromClient && fromClient) {          reply.recvFromClient=true;        }      }      accounted=true;    } else {      accounted=false;    }  }  clientData.clientLock.unlock();  return accounted;}  }
class C{  private void addException(Segment segment){  if (segment.inIncludeSegments()) {    int p=binarySearchExceptionSegments(segment);    this.exceptionSegments.add(-(p + 1),segment);  }}  }
class C{  public FFT(int timeSize,float sampleRate){  super(timeSize,sampleRate);  if ((timeSize & (timeSize - 1)) != 0)   throw new IllegalArgumentException("FFT: timeSize must be a power of two.");  buildReverseTable();  buildTrigTables();}  }
class C{  public Builder byYearDay(Integer... yearDays){  return byYearDay(Arrays.asList(yearDays));}  }
class C{  public void remove(LogLine object){  if (mOriginalValues != null) {synchronized (mLock) {      mOriginalValues.remove(object);    }  } else {    mObjects.remove(object);  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public static void log(String msg,Object... args){  StringBuffer sb=new StringBuffer();  sb.append(MessageFormat.format("[{0,number,#}] ",System.currentTimeMillis()));  sb.append(MessageFormat.format(msg,args));  doLog(sb.toString());}  }
class C{  @Override public boolean equals(final Object obj){  if (obj == null) {    return false;  }  if (this == obj) {    return true;  }  if (obj instanceof Size) {    Size other=(Size)obj;    return mWidth == other.mWidth && mHeight == other.mHeight;  }  return false;}  }
class C{  public void addConnectingSocket(Socket socket,InetAddress addr){synchronized (connectingSockets) {    connectingSockets.put(socket,new ConnectingSocketInfo(addr));  }}  }
class C{  public void addImage(BufferedImage img,BufferedImage height,int x,int y){  ChunkImage chunk=new ChunkImage();  chunk.image=img;  chunk.height_map=height;  chunk.x=x;  chunk.y=y;synchronized (chunks) {    chunks.add(chunk);  }  redrawChunk(chunk);}  }
class C{  public void applyProperties(){  for (  ParameterType type : allParameterTypes) {    String value=allParameterValues.getProperty(type.getKey());    ParameterService.setParameterValue(type,value);  }}  }
class C{  protected void calculatePartialsPartialsPruning(double[] partials1,double[] matrices1,double[] partials2,double[] matrices2,double[] partials3,int[] matrixMap){  double sum1, sum2;  int u=0;  int v=0;  for (int k=0; k < patternCount; k++) {    int w=matrixMap[k] * matrixSize;    for (int i=0; i < stateCount; i++) {      sum1=sum2=0.0;      for (int j=0; j < stateCount; j++) {        sum1+=matrices1[w] * partials1[v + j];        sum2+=matrices2[w] * partials2[v + j];        w++;      }      partials3[u]=sum1 * sum2;      u++;    }    v+=stateCount;  }}  }
class C{  private void renderImage(){  panel.clear();  if (presentation.getImageResource() != null) {    Image img=new Image(presentation.getImageResource());    img.setStyleName(toolbarResources.toolbar().iconButtonIcon());    panel.add(img);  } else   if (presentation.getSVGResource() != null) {    SVGImage image=new SVGImage(presentation.getSVGResource());    image.getElement().setAttribute("class",toolbarResources.toolbar().iconButtonIcon());    panel.add(image);  } else   if (presentation.getHTMLResource() != null) {    FlowPanel icon=new FlowPanel();    icon.setStyleName(toolbarResources.toolbar().iconButtonIcon());    FlowPanel inner=new FlowPanel();    inner.setStyleName(toolbarResources.toolbar().iconButtonIconInner());    inner.getElement().setInnerHTML(presentation.getHTMLResource());    icon.add(inner);    panel.add(inner);  }}  }
class C{  public <E extends GenericEvent>Event waitFor(@NonNull List<Class<? extends E>> eventClasses,long timeout,@NonNull TimeUnit unit) throws InterruptedException {  while (true) {    Event curEvent=eventQueue.poll(timeout,unit);    if (curEvent == null)     return null;    for (    Class<? extends GenericEvent> curEventClass : eventClasses)     if (curEventClass.isInstance(curEvent))     return curEvent;  }}  }
class C{  public static void run(Options options) throws Exception {  boolean isPub=options.get(OPT_PUB);  DevelopmentProvider tp=new DevelopmentProvider();  Topology top;  if (isPub) {    PublisherApp publisher=new PublisherApp(tp,options);    top=publisher.buildAppTopology();  } else {    SubscriberApp subscriber=new SubscriberApp(tp,options);    top=subscriber.buildAppTopology();  }  System.out.println("Using MQTT broker at " + options.get(OPT_SERVER_URI) + "\n"+ (isPub ? "Publishing" : "Subscribing")+ " to topic "+ options.get(OPT_TOPIC));  System.out.println("Console URL for the job: " + tp.getServices().getService(HttpServer.class).getConsoleUrl());  tp.submit(top);}  }
class C{  void loginByIdInsecure() throws Exception {  System.out.println("Half Secure Systems Inc. - login by id");  String id=input("User ID?");  String password=input("Password?");  try {    PreparedStatement prep=conn.prepareStatement("SELECT * FROM USERS WHERE " + "ID=" + id + " AND PASSWORD=?");    prep.setString(1,password);    ResultSet rs=prep.executeQuery();    if (rs.next()) {      System.out.println("Welcome!");    } else {      System.out.println("Access denied!");    }    rs.close();    prep.close();  } catch (  SQLException e) {    System.out.println(e);  }}  }
class C{  public int describeContents(){  return 0;}  }
class C{  public synchronized void unreport(int id){  ThreadPosition tp=array.remove(id);  if (tp == null) {  } else {    if (tp.after == null) {      tail=tp.before;    } else {      tp.after.before=tp.before;    }    if (tp.before == null) {      head=tp.after;    } else {      tp.before.after=tp.after;    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:27.817 -0500",hash_original_method="7130CA0E46A667075374433A3B5D2D85",hash_generated_method="C3B932323D38DDFF2F46EAA9B5DA6CB9") public int lastIndexOf(String subString,int start){  this.addTaint(subString.getTaint());  addTaint(start);  return getTaintInt();}  }
class C{  protected boolean isValidConnection(IBlockState ownState,IBlockState neighbourState,IBlockAccess world,BlockPos ownPos,EnumFacing neighbourDirection){  return neighbourState.getBlock() instanceof BlockPipeBase;}  }
class C{  @Override public void close(){}  }
class C{  public ClientMessage sendMessage(byte[] body,Map<String,Object> properties){  ClientMessage message=createMessage(body);  sendMessage(message);  return message;}  }
class C{  ConcurrentSkipListMap.Node<K,V> loNode(Comparator<? super K> cmp){  if (lo == null)   return m.findFirst(); else   if (loInclusive)   return m.findNear(lo,GT | EQ,cmp); else   return m.findNear(lo,GT,cmp);}  }
class C{  public pre addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws NotSerializableException {  throw new NotSerializableException("Not serializable.");}  }
class C{  public ClientResponse head(URI url){  return _client.resource(url).head();}  }
class C{  public void addMacroRecord(MacroRecord record){  if (record != null)   macroRecords.add(record);}  }
class C{  protected void startTour(){  hopscotchTour.init();  if (domElementHelper == null) {    domElementHelper=new DomElementHelper();  }  this.tour=new Tour(tourName);  GwtTour.listen("end",new EndFunction());  GwtTour.startTour(tour);  inProgress=true;  Map<String,String> data=new HashMap<>();  data.put("name",tourName);  analyticsEventLogger.log(GuidedTour.class,"start",data);}  }
class C{  public synchronized void start(){  if (log.isInfoEnabled()) {    log.info("Starting EsperIO HTTP Adapter for engine URI '" + engineURI + "'");  }  EPServiceProviderSPI engineSPI=(EPServiceProviderSPI)EPServiceProviderManager.getProvider(engineURI);  for (  Request request : config.getRequests()) {    EventType eventType=engineSPI.getEventAdapterService().getExistsTypeByName(request.getStream());    if (eventType == null) {      throw new ConfigurationException("Event type by name '" + request.getStream() + "' not found");    }    try {      EsperIOHTTPSubscription subs=new EsperIOHTTPSubscription(request.getStream(),request.getUri());      subs.seteventTypeName(request.getStream());      subs.setSubscriptionName("EsperIOHTTP-" + request.getUri());      subs.registerAdapter(engineSPI);    } catch (    Throwable t) {      log.error("Error starting HTTP Request definition for URI " + request.getUri() + "'"+ t.getMessage(),t);    }  }  Set<Integer> ports=new HashSet<Integer>();  for (  Map.Entry<String,Service> entry : config.getServices().entrySet()) {    if (services.containsKey(entry.getKey())) {      throw new ConfigurationException("A service by name '" + entry.getKey() + "' has already been configured.");    }    int port=entry.getValue().getPort();    if (ports.contains(port)) {      throw new ConfigurationException("A service for port '" + port + "' has already been configured.");    }    ports.add(port);    EsperHttpServiceBase httpService;    if (entry.getValue().isNio()) {      try {        Class.forName("org.apache.http.nio.NHttpServiceHandler");      } catch (      ClassNotFoundException e) {        throw new ConfigurationException("NIO Handler not found in classpath, please ensure httpcore-nio exists in classpath.");      }      httpService=new EsperHttpServiceNIO(entry.getKey(),entry.getValue());    } else {      httpService=new EsperHttpServiceClassic(entry.getKey(),entry.getValue());    }    services.put(entry.getKey(),httpService);  }  for (  GetHandler handler : config.getGetHandlers()) {    if (!services.containsKey(handler.getService())) {      throw new ConfigurationException("A service by name '" + handler.getService() + "' has not been configured.");    }    EsperHttpServiceBase httpService=services.get(handler.getService());    httpService.add(handler);  }  for (  EsperHttpServiceBase service : services.values()) {    try {      service.start(engineSPI);    } catch (    IOException e) {      log.error("Error starting service '" + service.getServiceName() + "' :"+ e.getMessage());    }  }  if (log.isInfoEnabled()) {    log.info("Completed starting EsperIO HTTP Adapter for engine URI '" + engineURI + "'.");  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void doHealthStatus(HttpServletRequest req,HttpServletResponse resp) throws IOException {  if (log.isInfoEnabled()) {    log.info(WITHOUT_JINI_MSG);  }}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  public static boolean addSmeltingRecipe(ItemStack aInput,ItemStack aOutput){  aOutput=GT_OreDictUnificator.get(true,aOutput);  if (aInput == null || aOutput == null || GT_Utility.getContainerItem(aInput,false) != null)   return false;  if (!GregTech_API.sRecipeFile.get(ConfigCategories.Machines.smelting,aInput,true))   return false;  FurnaceRecipes.smelting().func_151394_a(aInput,GT_Utility.copy(aOutput),0.0F);  return true;}  }
class C{  protected void storeState(){  partialBufferHelper.storeState();  for (  SubstitutionModelDelegate substitutionModelDelegate : substitutionModelDelegates) {    substitutionModelDelegate.storeState();  }  if (useScaleFactors || useAutoScaling) {    scaleBufferHelper.storeState();    System.arraycopy(scaleBufferIndices,0,storedScaleBufferIndices,0,scaleBufferIndices.length);  }  super.storeState();}  }
class C{  public static String serializeDigestResponse(Map<String,String> paramMap){  StringBuilder sb=new StringBuilder("Digest ");  boolean prefixComma=false;  for (  Map.Entry<String,String> entry : paramMap.entrySet()) {    if (!prefixComma) {      prefixComma=true;    } else {      sb.append(", ");    }    sb.append(entry.getKey());    sb.append("=");    sb.append(entry.getValue());  }  return sb.toString();}  }
class C{  public boolean isPhraseHighlight(){  return phraseHighlight;}  }
class C{  protected void enu2ecef(double ecefVector[],double latitude,double longitude,double enuVector[]){  double temp[][]=new double[3][3];  double clat=Math.cos(latitude);  double slat=Math.sin(latitude);  double clon=Math.cos(longitude);  double slon=Math.sin(longitude);  temp[0][0]=-slon;  temp[0][1]=-clon * slat;  temp[0][2]=clon * clat;  temp[1][0]=clon;  temp[1][1]=-slon * slat;  temp[1][2]=slon * clat;  temp[2][0]=0.0;  temp[2][1]=clat;  temp[2][2]=slat;  for (int j=0; j < 3; ++j) {    ecefVector[j]=0.0;    for (int i=0; i < 3; i++) {      ecefVector[j]+=temp[j][i] * enuVector[i];    }  }}  }
class C{  public SerialLight(String systemName,String userName){  super(systemName,userName);  initializeLight(systemName);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4mfPackage.REQUIRED_RUNTIME_LIBRARIES__REQUIRED_RUNTIME_LIBRARIES:    getRequiredRuntimeLibraries().clear();  getRequiredRuntimeLibraries().addAll((Collection<? extends RequiredRuntimeLibraryDependency>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void stop(){  stopTime=System.currentTimeMillis();  running=false;}  }
class C{  @Override public void onDestroyed(CameraView cv) throws Exception {  stop();}  }
class C{  private void processImport(DetailAST aAST){  final FullIdent name=FullIdent.createFullIdentBelow(aAST);  if ((name != null) && !name.getText().endsWith(".*")) {    imports.add(name);  }}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public final GVector interpolateToSelf(GVector v,double alpha){  if (v.length != length) {    throw new MatrixSizeException();  }  for (int i=0; i < length; i++) {    values[i]+=(v.values[i] - values[i]) * alpha;  }  return this;}  }
class C{  private void close(){  if (getSupportFragmentManager().getBackStackEntryCount() > 0) {    getSupportFragmentManager().popBackStack();  } else {    finish();  }}  }
class C{  public static FetchBulkEntriesResponse send(InternalDistributedMember recipient,PartitionedRegion r,HashMap<Integer,HashSet> bucketKeys,HashSet<Integer> bucketIds,String regex,boolean allowTombstones) throws ForceReattemptException {  Assert.assertTrue(recipient != null,"FetchBulkEntriesMessage NULL reply message");  FetchBulkEntriesResponse p=new FetchBulkEntriesResponse(r.getSystem(),r,recipient);  FetchBulkEntriesMessage m=new FetchBulkEntriesMessage(recipient,r.getPRId(),p,bucketKeys,bucketIds,regex,allowTombstones);  Set failures=r.getDistributionManager().putOutgoing(m);  if (failures != null && failures.size() > 0) {    throw new ForceReattemptException(LocalizedStrings.FetchEntriesMessage_FAILED_SENDING_0.toLocalizedString(m));  }  return p;}  }
class C{  public FireworkEffectBuilder trail(boolean trail){  this.trail=trail;  return this;}  }
class C{  protected void checkDimensions() throws Exception {  if (getFilters().length != getRanges().length) {    throw new IllegalArgumentException("Number of filters (= " + getFilters().length + ") "+ "and ranges (= "+ getRanges().length+ ") don't match!");  }}  }
class C{  public void ifJump(String jumpLabel) throws IOException {  writeJump(jumpLabel,IF);}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (newRecord) {    MRole[] roles=MRole.getOf(getCtx(),"IsManual='N'");    for (int i=0; i < roles.length; i++) {      MProcessAccess pa=new MProcessAccess(this,roles[i].getAD_Role_ID());      pa.saveEx();    }  } else   if (is_ValueChanged("IsActive") || is_ValueChanged("Name") || is_ValueChanged("Description")|| is_ValueChanged("Help")) {    MMenu[] menues=MMenu.get(getCtx(),"AD_Process_ID=" + getAD_Process_ID(),get_TrxName());    for (int i=0; i < menues.length; i++) {      menues[i].setIsActive(isActive());      menues[i].setName(getName());      menues[i].setDescription(getDescription());      menues[i].saveEx();    }    MWFNode[] nodes=MWindow.getWFNodes(getCtx(),"AD_Process_ID=" + getAD_Process_ID(),get_TrxName());    for (int i=0; i < nodes.length; i++) {      boolean changed=false;      if (nodes[i].isActive() != isActive()) {        nodes[i].setIsActive(isActive());        changed=true;      }      if (nodes[i].isCentrallyMaintained()) {        nodes[i].setName(getName());        nodes[i].setDescription(getDescription());        nodes[i].setHelp(getHelp());        changed=true;      }      if (changed)       nodes[i].saveEx();    }  }  return success;}  }
class C{  public Attributes(int size){  map=new HashMap<>(size);}  }
class C{  public WbXmlElement addAttribute(WbXmlAttribute attribute){  this.attributes.add(attribute);  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean matchPasses=getBool(stack);  String technique=getString(stack);  MediaNode node=getMediaNode(stack);  node.setFiltering(VFSFactory.getInstance().getFilter(technique,matchPasses));  return null;}  }
class C{  public Matrix4f m03(float m03){  this.m03=m03;  this._properties(0);  return this;}  }
class C{  private static boolean isInHorizontalTargetZone(float x,float y,float handleXStart,float handleXEnd,float handleY,float targetRadius){  if (x > handleXStart && x < handleXEnd && Math.abs(y - handleY) <= targetRadius) {    return true;  }  return false;}  }
class C{  private String markdownBlockquote(String value){  return "> " + value.replace("\n","\n> ");}  }
class C{  static int mergeBasicConstraints(X509Certificate cert,int maxPathLength){  int pathLenConstraint=cert.getBasicConstraints();  if (!X509CertImpl.isSelfIssued(cert)) {    maxPathLength--;  }  if (pathLenConstraint < maxPathLength) {    maxPathLength=pathLenConstraint;  }  return maxPathLength;}  }
class C{  public void invokeMethodSynchronously(HDSApiFactory hdsApiFactory,String asyncMessageId,HDSJob job) throws Exception {  if (asyncMessageId != null) {    try {      waitForAsyncHDSJob(job.getStorageSystemURI(),asyncMessageId,job,hdsApiFactory);    } catch (    Exception ex) {      log.error("Exception occurred while waiting on async job {} to complete",asyncMessageId);      HDSException.exceptions.asyncTaskFailed(ex.getMessage());    }  } else {    HDSException.exceptions.asyncTaskFailedForMetaVolume(job.getStorageSystemURI());  }}  }
class C{  private boolean isVowel(char ch){  return VOWELS.indexOf(ch) != -1;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected <T extends KeySpec>T engineGetKeySpec(Key key,Class<T> keySpec) throws InvalidKeySpecException {  BigInteger p, q, g, x, y;  if (key != null) {    if (keySpec == null) {      throw new NullPointerException("keySpec == null");    }    if (key instanceof DSAPrivateKey) {      DSAPrivateKey privateKey=(DSAPrivateKey)key;      if (keySpec.equals(DSAPrivateKeySpec.class)) {        x=privateKey.getX();        DSAParams params=privateKey.getParams();        p=params.getP();        q=params.getQ();        g=params.getG();        return (T)(new DSAPrivateKeySpec(x,p,q,g));      }      if (keySpec.equals(PKCS8EncodedKeySpec.class)) {        return (T)(new PKCS8EncodedKeySpec(key.getEncoded()));      }      throw new InvalidKeySpecException("'keySpec' is neither DSAPrivateKeySpec nor PKCS8EncodedKeySpec");    }    if (key instanceof DSAPublicKey) {      DSAPublicKey publicKey=(DSAPublicKey)key;      if (keySpec.equals(DSAPublicKeySpec.class)) {        y=publicKey.getY();        DSAParams params=publicKey.getParams();        p=params.getP();        q=params.getQ();        g=params.getG();        return (T)(new DSAPublicKeySpec(y,p,q,g));      }      if (keySpec.equals(X509EncodedKeySpec.class)) {        return (T)(new X509EncodedKeySpec(key.getEncoded()));      }      throw new InvalidKeySpecException("'keySpec' is neither DSAPublicKeySpec nor X509EncodedKeySpec");    }  }  throw new InvalidKeySpecException("'key' is neither DSAPublicKey nor DSAPrivateKey");}  }
class C{  public GetContainerLogsParams withContainer(@NotNull String container){  requireNonNull(container);  this.container=container;  return this;}  }
class C{  public Boolean isIPVersion6(){  return ipVersion6;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.TRACE_LEVEL___TRACE_LEVEL_1:    return getTrace_level_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @SuppressWarnings("unchecked") public T withIndex(long index){  response.index=Assert.argNot(index,index < 0,"index cannot be negative");  return (T)this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void toFile(String filename){  Out out=new Out(filename);  out.print(this.toString());  out.close();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public boolean equals(Object other){  if (other == this)   return true;  if (other == null)   return false;  if (!(other instanceof DistributionLocatorId))   return false;  final DistributionLocatorId that=(DistributionLocatorId)other;  if (this.host != that.host && !(this.host != null && this.host.equals(that.host)))   return false;  if (this.port != that.port)   return false;  if (!StringUtils.equals(this.bindAddress,that.bindAddress))   return false;  return true;}  }
class C{  private MavenProject createProjectFromPom(File pom){  Model model=new Model();  try {    model=POM_READER.read(new FileReader(pom));  } catch (  Exception e) {    throw new IllegalStateException("Caught Exception reading pom.xml",e);  }  MavenProject project=new MavenProject(model);  project.setFile(pom);  return project;}  }
class C{  private void processColumnValuesForOneChunk(int chunkCountForSegment) throws IOException {  deleteStorePath();  CarbonDictionaryWriterImpl writer=prepareWriter();  writer.write(convertStringListToByteArray(dataSet1));  writer.close();  writer.commit();  long end_offset=CarbonUtil.getFileSize(this.dictionaryFilePath);  List<byte[]> dictionaryData=readDictionaryFile(0L,0L);  List<String> actual=convertByteArrayListToStringValueList(dictionaryData);  compareDictionaryData(actual,dataSet1);  List<CarbonDictionaryColumnMetaChunk> carbonDictionaryColumnMetaChunks=readDictionaryMetadataFile();  assertTrue(1 == carbonDictionaryColumnMetaChunks.size());  long start_offset=0L;  CarbonDictionaryColumnMetaChunk expected=new CarbonDictionaryColumnMetaChunk(1,2,start_offset,end_offset,1);  for (  CarbonDictionaryColumnMetaChunk chunk : carbonDictionaryColumnMetaChunks) {    validateDictionaryMetadata(chunk,expected);  }}  }
class C{  public void testDoubleMissing() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(new DoublePoint("value",-1.3));  doc.add(new StoredField("value",-1.3));  writer.addDocument(doc);  doc=new Document();  doc.add(new DoublePoint("value",4.2333333333333));  doc.add(new StoredField("value",4.2333333333333));  writer.addDocument(doc);  doc=new Document();  doc.add(new DoublePoint("value",4.2333333333332));  doc.add(new StoredField("value",4.2333333333332));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.DOUBLE_POINT));  writer.close();  IndexSearcher searcher=newSearcher(ir,false);  Sort sort=new Sort(new SortField("value",SortField.Type.DOUBLE));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(4,td.totalHits);  assertEquals("-1.3",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("4.2333333333332",searcher.doc(td.scoreDocs[2].doc).get("value"));  assertEquals("4.2333333333333",searcher.doc(td.scoreDocs[3].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static StringBuilder formatBit(StringBuilder buf,boolean b){  return buf.append(b ? '1' : '0');}  }
class C{  protected void engineSetMode(String mode){  if (!mode.equalsIgnoreCase("ECB")) {    throw new IllegalArgumentException("can't support mode " + mode);  }}  }
class C{  public static void normalizeRows(float[][] input){  for (int i=0; i < input.length; ++i) {    normalize(input[i]);  }}  }
class C{  @Override protected void beforeExecute(Thread t,Runnable r){  if (isAppendTaskName()) {    NamedThreadPoolHelper.changeNameBeforeExecute(t,r);  }  super.beforeExecute(t,r);}  }
class C{  public String rulesMustContainTipText(){  return "Only print rules that contain these items. Provide " + "a comma separated list of attribute names.";}  }
class C{  public FunctionAlias findFunction(String functionAlias){  return functions.get(functionAlias);}  }
class C{  public CDetachAction(final JFrame parent,final IFrontEndDebuggerProvider debugger){  m_parent=Preconditions.checkNotNull(parent,"IE00293: Parent argument can not be null");  m_debugger=Preconditions.checkNotNull(debugger,"IE01532: Debugger argument can not be null");  putValue(Action.SHORT_DESCRIPTION,"Detach");}  }
class C{  private WindowsFileAttributes(int fileAttrs,long creationTime,long lastAccessTime,long lastWriteTime,long size,int reparseTag,int volSerialNumber,int fileIndexHigh,int fileIndexLow){  this.fileAttrs=fileAttrs;  this.creationTime=creationTime;  this.lastAccessTime=lastAccessTime;  this.lastWriteTime=lastWriteTime;  this.size=size;  this.reparseTag=reparseTag;  this.volSerialNumber=volSerialNumber;  this.fileIndexHigh=fileIndexHigh;  this.fileIndexLow=fileIndexLow;}  }
class C{  public static String tranDateTime2Date(String strTime){  try {    SimpleDateFormat formatter=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss",Locale.getDefault());    formatter.setTimeZone(timeZone);    Date d=formatter.parse(strTime);    SimpleDateFormat formatter2=new SimpleDateFormat("yyyy-MM-dd",Locale.getDefault());    formatter2.setTimeZone(timeZone);    return formatter2.format(d);  } catch (  Throwable e) {    Log.e(TAG,e.toString());    return "2014-01-01";  }}  }
class C{  public GroupByClause(){  groupByExpressions=new ArrayList<GroupByClauseExpression>();}  }
class C{  public PacketBYE(){  super(PT_BYE);}  }
class C{  public void requestContactCapabilities(Set<ContactId> contacts) throws RcsServiceNotRegisteredException, RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  if (contacts == null || contacts.isEmpty()) {    throw new RcsIllegalArgumentException("contacts must not be null or empty!");  }  try {    mApi.requestContactCapabilities2(new ArrayList<>(contacts));  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsServiceNotRegisteredException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public InvalidCipherTextException(String message){  super(message);}  }
class C{  public CTraceListWrapper(final TraceList traceList){  m_traceList=traceList;}  }
class C{  public boolean isCreateNewJournal(){  Object oo=get_Value(COLUMNNAME_IsCreateNewJournal);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static cuDoubleComplex cuCmul(cuDoubleComplex x,cuDoubleComplex y){  cuDoubleComplex prod;  prod=cuCmplx((cuCreal(x) * cuCreal(y)) - (cuCimag(x) * cuCimag(y)),(cuCreal(x) * cuCimag(y)) + (cuCimag(x) * cuCreal(y)));  return prod;}  }
class C{  public void addAtom(Atom at){  formula.add(at);}  }
class C{  private void createTree(final ITreeNode<CTag> root){  m_tagTree.setRootVisible(false);  final DefaultTreeModel tagTreeModel=new DefaultTreeModel(new CTagTreeNode(root));  m_tagTree.setModel(tagTreeModel);  m_tagTree.setCellRenderer(new IconNodeRenderer());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static byte[] decodeHex(char[] data) throws DecoderException {  int len=data.length;  if ((len & 0x01) != 0) {    throw new DecoderException("Odd number of characters.");  }  byte[] out=new byte[len >> 1];  for (int i=0, j=0; j < len; i++) {    int f=toDigit(data[j],j) << 4;    j++;    f=f | toDigit(data[j],j);    j++;    out[i]=(byte)(f & 0xFF);  }  return out;}  }
class C{  @Override public int hashCode(){  int hashCode=0;  for (int i=0; i < choiceLimits.length; i++) {    long v=Double.doubleToLongBits(choiceLimits[i]);    hashCode+=(int)(v ^ (v >>> 32)) + choiceFormats[i].hashCode();  }  return hashCode;}  }
class C{  public static Stats of(long... values){  StatsAccumulator acummulator=new StatsAccumulator();  acummulator.addAll(values);  return acummulator.snapshot();}  }
class C{  public static void showViews(final Window parent,final IViewContainer container,final INaviView[] views,final CGraphWindow window){  for (  final INaviView view : views) {    CViewOpener.showView(parent,container,view,window);  }}  }
class C{  public static double trunc(Double number,int precision){  if (number < 0d) {    return Math.ceil(number * Math.pow(10,precision)) / Math.pow(10,precision);  }  return Math.floor(number * Math.pow(10,precision)) / Math.pow(10,precision);}  }
class C{  public Piece(BigDecimal magnitude,PieceUnit unitType){  this.magnitude=magnitude;  this.unitType=unitType;}  }
class C{  public InputStream executeAndReturnStdoutAsInputStream(String[] rawArgs,boolean mergeArgsWithDefaultOptions) throws IOException, InterruptedException, MameExecutionException {  InputStream is=this.inputStreamsToReturn.get(this.inputStreamIndex);  this.inputStreamIndex++;  return is;}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public void headphonesDisconnected(){}  }
class C{  public int indexOfIdenticalObject(Object obj){  NSObject nso=NSObject.fromJavaObject(obj);  for (int i=0; i < array.length; i++) {    if (array[i] == nso) {      return i;    }  }  return -1;}  }
class C{  public Element createElement(String tagName) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public Object monitor(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {  Object retVal=null;  String label=keyHelper.getLabel(proceedingJoinPoint);  String details=keyHelper.getDetails(proceedingJoinPoint);  MonKeyImp key=new MonKeyImp(label,details,"ms.");  Monitor mon=MonitorFactory.start(key);  try {    retVal=proceedingJoinPoint.proceed();  } catch (  Throwable t) {    String exceptionDetails=keyHelper.getDetails(proceedingJoinPoint,t);    key.setDetails(exceptionDetails);    trackException(t,exceptionDetails);    throw t;  } finally {    mon.stop();  }  return retVal;}  }
class C{  final int compareHalf(MutableBigInteger b){  int blen=b.intLen;  int len=intLen;  if (len <= 0)   return blen <= 0 ? 0 : -1;  if (len > blen)   return 1;  if (len < blen - 1)   return -1;  int[] bval=b.value;  int bstart=0;  int carry=0;  if (len != blen) {    if (bval[bstart] == 1) {      ++bstart;      carry=0x80000000;    } else     return -1;  }  int[] val=value;  for (int i=offset, j=bstart; i < len + offset; ) {    int bv=bval[j++];    long hb=((bv >>> 1) + carry) & LONG_MASK;    long v=val[i++] & LONG_MASK;    if (v != hb)     return v < hb ? -1 : 1;    carry=(bv & 1) << 31;  }  return carry == 0 ? 0 : -1;}  }
class C{  protected PublicKey engineGeneratePublic(KeySpec keySpec) throws InvalidKeySpecException {  if (keySpec != null) {    if (keySpec instanceof DSAPublicKeySpec) {      return new DSAPublicKeyImpl((DSAPublicKeySpec)keySpec);    }    if (keySpec instanceof X509EncodedKeySpec) {      return new DSAPublicKeyImpl((X509EncodedKeySpec)keySpec);    }  }  throw new InvalidKeySpecException("'keySpec' is neither DSAPublicKeySpec nor X509EncodedKeySpec");}  }
class C{  public void deactivate(){  if (mAccelerometerSensor != null) {    mSensorManager.unregisterListener(this,mAccelerometerSensor);  }  if (mMagneticSensor != null) {    mSensorManager.unregisterListener(this,mMagneticSensor);  }}  }
class C{  public int flags(){  return theType.flags();}  }
class C{  public String renamePattern(){  return renamePattern;}  }
class C{  public static RefactoringStatus createFatalErrorStatus(String msg){  return createStatus(FATAL,msg,null,null,RefactoringStatusEntry.NO_CODE,null);}  }
class C{  protected PostgresMessages readMessage() throws IOException {  return readMessage(true);}  }
class C{  protected String promptString(final String prompt,final Optional<String> defaultValue) throws IOException {  requireNonNull(prompt);  requireNonNull(defaultValue);  final ConsoleReader reader=getReader();  reader.setPrompt(prompt);  String value=null;  boolean prompting=true;  while (prompting) {    final String input=reader.readLine();    if (!input.isEmpty()) {      value=input;      prompting=false;    } else {      if (defaultValue.isPresent()) {        value=defaultValue.get();        prompting=false;      } else {        reader.println("Invalid response. Must provide a value.");      }    }  }  return value;}  }
class C{  @UiHandler("okButton") public void handleOkClick(final ClickEvent event){  this.actionDelegate.accepted();}  }
class C{  public int hashCode(){  StringBuilder sbuf=new StringBuilder();  sbuf.append(algid.toString());  sbuf.append(paramsToString());  return sbuf.toString().hashCode();}  }
class C{  private void connect(String urlPath){  try {    JMXServiceURL url=new JMXServiceURL("rmi","",0,urlPath);    this.jmxc=JMXConnectorFactory.connect(url);    this.server=jmxc.getMBeanServerConnection();  } catch (  MalformedURLException e) {  }catch (  IOException e) {    System.err.println("\nCommunication error: " + e.getMessage());    System.exit(1);  }}  }
class C{  static String readFile(String path,Charset encoding) throws IOException {  byte[] encoded=Files.readAllBytes(Paths.get(path));  return new String(encoded,encoding);}  }
class C{  private void statInit(){  label1.setLabelFor(textField1);  label1.setText("Label1");  label1.setHorizontalAlignment(JLabel.LEADING);  textField1.setBackground(AdempierePLAF.getInfoBackground());  label2.setLabelFor(textField2);  label2.setText("Label2");  label2.setHorizontalAlignment(JLabel.LEADING);  textField2.setBackground(AdempierePLAF.getInfoBackground());  label3.setLabelFor(textField3);  label3.setText("Label3");  label3.setHorizontalAlignment(JLabel.LEADING);  textField3.setBackground(AdempierePLAF.getInfoBackground());  label4.setLabelFor(textField4);  label4.setText("Label4");  label4.setHorizontalAlignment(JLabel.LEADING);  textField4.setBackground(AdempierePLAF.getInfoBackground());  p_criteriaGrid.setLayout(new ALayout());  p_criteriaGrid.add(label1,new ALayoutConstraint(0,0));  p_criteriaGrid.add(label2,null);  p_criteriaGrid.add(label3,null);  p_criteriaGrid.add(label4,null);  p_criteriaGrid.add(textField1,new ALayoutConstraint(1,0));  p_criteriaGrid.add(textField2,null);  p_criteriaGrid.add(textField3,null);  p_criteriaGrid.add(textField4,null);}  }
class C{  private boolean systemListenerChange(Object topic,GridMessageListener expected,GridMessageListener newVal){  assert Thread.holdsLock(sysLsnrsMux);  assert topic instanceof GridTopic;  int idx=systemListenerIndex(topic);  GridMessageListener old=sysLsnrs[idx];  if (old != null && old.equals(expected)) {    changeSystemListener(idx,newVal);    return true;  }  return false;}  }
class C{  public boolean equals(Object o){  if (o == this) {    return true;  }  if (!(o instanceof Set))   return false;  Collection c=(Collection)o;  if (c.size() != size())   return false;  try {    return containsAll(c);  } catch (  ClassCastException unused) {    return false;  }catch (  NullPointerException unused) {    return false;  }}  }
class C{  public ItemStack toItemStack(){  return toItemStack(1);}  }
class C{  public static int readHexInt(HashMap<String,? extends Object> map,String key,int defaultValue){  Object v=map.get(key);  if (v == null) {    return defaultValue;  } else   if (v instanceof Integer) {    return (Integer)v;  }  try {    return (int)Long.parseLong((String)v,16);  } catch (  NumberFormatException e) {    throw newIllegalStateException(ERROR_FILE_CORRUPT,"Error parsing the value {0}",v,e);  }}  }
class C{  public static ServiceAccountJwtAccessCredentials fromPkcs8(String clientId,String clientEmail,String privateKeyPkcs8,String privateKeyId) throws IOException {  return fromPkcs8(clientId,clientEmail,privateKeyPkcs8,privateKeyId,null);}  }
class C{  void checkPowerOff() throws IOException {  if (powerOffCount == 0) {    return;  }  if (powerOffCount > 1) {    powerOffCount--;    return;  }  powerOffCount=-1;  throw POWER_OFF;}  }
class C{  public static S2LatLngRect empty(){  return new S2LatLngRect(R1Interval.empty(),S1Interval.empty());}  }
class C{  public Builder backgroundDrawableRes(@DrawableRes int sliderBackgroundDrawableRes){  this.sliderBackgroundDrawableRes=sliderBackgroundDrawableRes;  return this;}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  public ResolveThread(Resolver res,Message query,Object id,ResolverListener listener){  this.res=res;  this.query=query;  this.id=id;  this.listener=listener;}  }
class C{  public RestResult post(String path,String payload){  HttpPost httpPost=new HttpPost(formatUrl(path));  StringEntity entity=new StringEntity(payload,StandardCharsets.UTF_8);  httpPost.setEntity(entity);  return executeRequest(httpPost);}  }
class C{  private void initList(){  mList=new ArrayList<>();  for (int i=0; i < names.length; i++) {    mList.add(new Item(images[i],names[i],textDescription));  }  mRecyclerView.setLayoutManager(new LinearLayoutManager(this));  myAdapterRecyclerView=new MyAdapterRecyclerView(mList);  mRecyclerView.setAdapter(myAdapterRecyclerView);  ItemTouchHelper.Callback callback=new MyItemTouchHelperCallback(this);  ItemTouchHelper touchHelper=new ItemTouchHelper(callback);  touchHelper.attachToRecyclerView(mRecyclerView);}  }
class C{  public ResourceNotFoundException(){}  }
class C{  private String documentToString(Document doc) throws TransformerException {  StringWriter writer=new StringWriter();  Source source=new DOMSource(doc);  Result result=new StreamResult(writer);  TransformerFactory factory=TransformerFactory.newInstance();  factory.setAttribute("indent-number","4");  Transformer transformer=factory.newTransformer();  transformer.setOutputProperty(OutputKeys.INDENT,"yes");  transformer.transform(source,result);  return writer.toString();}  }
class C{  void positionChanged(final double x,final double y){  playerX=x;  playerY=y;  updateView();}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 4294) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  private Base64(){}  }
class C{  public void add(String[] titles,double[] values){  add(mCategories.size() + "",titles,values);}  }
class C{  @Override public final void appendRectangle(final float x,final float y,final float w,final float h){  moveTo(x,y);  lineTo(x + w,y);  lineTo(x + w,y + h);  lineTo(x,y + h);  lineTo(x,y);  closeShape();}  }
class C{  public Vector2f zero(){  x=y=0;  return this;}  }
class C{  public HotspotPeerNetwork(ScanResult scanResult){  this.scanResult=scanResult;}  }
class C{  public Pkcs11SignatureToken(String pkcs11Path){  this(pkcs11Path,(PasswordInputCallback)null);}  }
class C{  public static void close() throws IgniteCheckedException {  fsMap.close();}  }
class C{  public static boolean isOperand(final String s){  String symbol=s.toLowerCase(Locale.ENGLISH);  return (!operators.contains(symbol));}  }
class C{  public void handleCUIInitializationMessage(String text){  checkNotNull(text);  String[] split=text.split("\\|");  if (split.length > 1 && split[0].equalsIgnoreCase("v")) {    setCUISupport(true);    try {      setCUIVersion(Integer.parseInt(split[1]));    } catch (    NumberFormatException e) {      WorldEdit.logger.warning("Error while reading CUI init message: " + e.getMessage());    }  }}  }
class C{  public boolean isLiteral(){  return false;}  }
class C{  public void update(){  if (firstRow > maxRows) {    firstRow=maxRows;    fromRowField.setText(firstRow + "");  }  if (lastRow > maxRows) {    lastRow=maxRows;    toRowField.setText(lastRow + "");  }  if (firstColumn > maxColumns) {    firstColumn=maxColumns;    fromColumnField.setText(firstColumn + "");  }  if (lastColumn > maxColumns) {    lastColumn=maxColumns;    toColumnField.setText(lastColumn + "");  }  Iterator i=listeners.iterator();  while (i.hasNext()) {    ((DataControlListener)i.next()).update(firstRow,lastRow,firstColumn,lastColumn,fractionDigits);  }}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy,int duration){  mMode=SCROLL_MODE;  mFinished=false;  mDuration=duration;  mStartTime=AnimationUtils.currentAnimationTimeMillis();  mStartX=startX;  mStartY=startY;  mFinalX=startX + dx;  mFinalY=startY + dy;  mDeltaX=dx;  mDeltaY=dy;  mDurationReciprocal=1.0f / (float)mDuration;}  }
class C{  public void addAll(Collection<BugInstance> collection,boolean updateActiveTime){  for (  BugInstance warning : collection) {    add(warning,updateActiveTime);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void generateEventsByClearRegionOperation() throws Exception {  Connection connection=pool.acquireConnection();  String regionName=Region.SEPARATOR + REGION_NAME;  ServerRegionProxy srp=new ServerRegionProxy(regionName,pool);  for (int i=0; i < eventIds.length; i++) {    srp.clearOnForTestsOnly(connection,eventIds[i],null);  }  srp.clearOnForTestsOnly(connection,eventIdForLastKey,null);}  }
class C{  public void notifyFunctionStateChanged(int functionNumber,boolean isSet){  if (mThrottle != null) {switch (functionNumber) {case 0:      mThrottle.setF0(isSet);    break;case 1:  mThrottle.setF1(isSet);break;case 2:mThrottle.setF2(isSet);break;case 3:mThrottle.setF3(isSet);break;case 4:mThrottle.setF4(isSet);break;case 5:mThrottle.setF5(isSet);break;case 6:mThrottle.setF6(isSet);break;case 7:mThrottle.setF7(isSet);break;case 8:mThrottle.setF8(isSet);break;case 9:mThrottle.setF9(isSet);break;case 10:mThrottle.setF10(isSet);break;case 11:mThrottle.setF11(isSet);break;case 12:mThrottle.setF12(isSet);break;case 13:mThrottle.setF13(isSet);break;case 14:mThrottle.setF14(isSet);break;case 15:mThrottle.setF15(isSet);break;case 16:mThrottle.setF16(isSet);break;case 17:mThrottle.setF17(isSet);break;case 18:mThrottle.setF18(isSet);break;case 19:mThrottle.setF19(isSet);break;case 20:mThrottle.setF20(isSet);break;case 21:mThrottle.setF21(isSet);break;case 22:mThrottle.setF22(isSet);break;case 23:mThrottle.setF23(isSet);break;case 24:mThrottle.setF24(isSet);break;case 25:mThrottle.setF25(isSet);break;case 26:mThrottle.setF26(isSet);break;case 27:mThrottle.setF27(isSet);break;case 28:mThrottle.setF28(isSet);break;default :break;}}}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setRetainInstance(true);}  }
class C{  public TargetMarker(int width,int height){  super(width,height);  init();}  }
class C{  public JsonNewUser(){  this.password=DEFAULT_PASSWORD;  this.username=generateUsername();}  }
class C{  public final long bytesWritten(){  return this.dataOut.getBytesWritten();}  }
class C{  protected void fixupBlocks(byte[] bytes2){  byte[] bytes=bytes2;  for (Iterator enumerator=blocks.iterator(); enumerator.hasNext(); ) {    int[] info=(int[])enumerator.next();    int codeSize=info[1];    int offset=info[0];    byte[] sizeBytes=OutStream.sintTo2Bytes(codeSize);    bytes[offset]=sizeBytes[0];    bytes[offset + 1]=sizeBytes[1];  }}  }
class C{  static void transferRemoteCandidates(Agent localAgent,Agent remotePeer){  List<IceMediaStream> streams=localAgent.getStreams();  for (  IceMediaStream localStream : streams) {    String streamName=localStream.getName();    IceMediaStream remoteStream=remotePeer.getStream(streamName);    if (remoteStream != null)     transferRemoteCandidates(localStream,remoteStream); else     localAgent.removeStream(localStream);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, rows, cols;  int progress=0;  double z, maxZ, noData, outputNoData;  int i, whichCell;  int[] dX=new int[]{-1,0,-1,0};  int[] dY=new int[]{-1,-1,0,0};  int numScanCells=dX.length;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  boolean performLineThinning=Boolean.parseBoolean(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    outputNoData=-32768;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,1);    output.setNoDataValue(outputNoData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setZUnits("dimensionless");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          maxZ=z;          whichCell=3;          for (i=0; i < (numScanCells - 1); i++) {            z=DEM.getValue(row + dY[i],col + dX[i]);            if (z != noData) {              if (z > maxZ) {                maxZ=z;                whichCell=i;              }            }          }          output.setValue(row + dY[whichCell],col + dX[whichCell],0);        } else {          output.setValue(row,col,outputNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    if (performLineThinning) {      long counter=0;      int loopNum=0;      int a;      dX=new int[]{1,1,1,0,-1,-1,-1,0};      dY=new int[]{-1,0,1,1,1,0,-1,-1};      int[][] elements={{6,7,0,4,3,2},{7,0,1,3,5},{0,1,2,4,5,6},{1,2,3,5,7},{2,3,4,6,7,0},{3,4,5,7,1},{4,5,6,0,1,2},{5,6,7,1,3}};      double[][] vals={{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1}};      double[] neighbours=new double[8];      boolean patternMatch=false;      do {        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        counter=0;        for (row=0; row < rows; row++) {          for (col=0; col < cols; col++) {            z=output.getValue(row,col);            if (z > 0 && z != noData) {              for (i=0; i < 8; i++) {                neighbours[i]=output.getValue(row + dY[i],col + dX[i]);              }              for (a=0; a < 8; a++) {                patternMatch=true;                for (i=0; i < elements[a].length; i++) {                  if (neighbours[elements[a][i]] != vals[a][i]) {                    patternMatch=false;                  }                }                if (patternMatch) {                  output.setValue(row,col,0);                  counter++;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      } while (counter > 0);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public final MessageBuilder header(String name,String value){  JsoArray<Pair> headers=message.getHeaders();  if (headers == null) {    headers=JsoArray.create();  }  for (int i=0; i < headers.size(); i++) {    Pair header=headers.get(i);    if (name.equals(header.getName())) {      header.setValue(value);      return this;    }  }  Pair header=Pair.create();  header.setName(name);  header.setValue(value);  headers.add(header);  message.setHeaders(headers);  return this;}  }
class C{  private byte[] pageToByteArray(P page){  try {    if (page == null) {      ByteArrayOutputStream baos=new ByteArrayOutputStream();      ObjectOutputStream oos=new ObjectOutputStream(baos);      oos.writeInt(EMPTY_PAGE);      oos.close();      baos.close();      byte[] array=baos.toByteArray();      byte[] result=new byte[pageSize];      System.arraycopy(array,0,result,0,array.length);      return result;    } else {      ByteArrayOutputStream baos=new ByteArrayOutputStream();      ObjectOutputStream oos=new ObjectOutputStream(baos);      oos.writeInt(FILLED_PAGE);      oos.writeObject(page);      oos.close();      baos.close();      byte[] array=baos.toByteArray();      if (array.length > this.pageSize) {        throw new IllegalArgumentException("Size of page " + page + " is greater than specified"+ " pagesize: "+ array.length+ " > "+ pageSize);      } else       if (array.length == this.pageSize) {        return array;      } else {        byte[] result=new byte[pageSize];        System.arraycopy(array,0,result,0,array.length);        return result;      }    }  } catch (  IOException e) {    throw new RuntimeException("IOException occurred! ",e);  }}  }
class C{  public void mutate(float amount){  for (int i=0; i < numKnots; i++) {    int rgb=yKnots[i];    int r=((rgb >> 16) & 0xff);    int g=((rgb >> 8) & 0xff);    int b=(rgb & 0xff);    r=PixelUtils.clamp((int)(r + amount * 255 * (Math.random() - 0.5)));    g=PixelUtils.clamp((int)(g + amount * 255 * (Math.random() - 0.5)));    b=PixelUtils.clamp((int)(b + amount * 255 * (Math.random() - 0.5)));    yKnots[i]=0xff000000 | (r << 16) | (g << 8)| b;    knotTypes[i]=RGB | SPLINE;  }  sortKnots();  rebuildGradient();}  }
class C{  public static boolean isLeftMouseButton(MouseEvent anEvent){  return ((anEvent.getModifiersEx() & InputEvent.BUTTON1_DOWN_MASK) != 0 || anEvent.getButton() == MouseEvent.BUTTON1);}  }
class C{  public ActionNode(String nodeId,Set<Value> actionValues){  this(nodeId);  this.actionValues=new HashSet<Value>(actionValues);}  }
class C{  public String correctQuotedFieldNames(String vendorName,String expression){  return m_interfaces.get(getDBVendorID(vendorName)).correctQuotedFieldNames(expression);}  }
class C{  public boolean isAccessibilityComputationAreaFromNetwork(){  return accessibilityComputationAreaFromNetwork;}  }
class C{  public void encode(final ActiveMQBuffer buffer){  buffer.writeString(name);  buffer.writeString(factoryClassName);  buffer.writeInt(params == null ? 0 : params.size());  if (params != null) {    encodeMap(buffer,params);  }  if (extraProps != null) {    encodeMap(buffer,extraProps);  }}  }
class C{  public SslSelectFastestProxyNoConnections(){  requestFileName="getstate.query";  responseFile="getstate.answer";}  }
class C{  public EditSensorDialog(final Sensor sensor){  super();  if (sensor == null) {    throw new IllegalArgumentException("sensor must not be null");  }  this.sensor=sensor;  setTitle("Edit Sensor:  (" + this.sensor.getReceptiveField().getX() + ", "+ this.sensor.getReceptiveField().getY()+ ")");  initComponents();  layoutComponents();}  }
class C{  public static double deriv(double pred,double y){  final double x=y * pred;  if (x >= 30)   return 0; else   if (x <= -30)   return y;  return -y / (1 + exp(y * pred));}  }
class C{  public static PeriodFormatter standard(){  if (cStandard == null) {    cStandard=new PeriodFormatterBuilder().appendLiteral("P").appendYears().appendSuffix("Y").appendMonths().appendSuffix("M").appendWeeks().appendSuffix("W").appendDays().appendSuffix("D").appendSeparatorIfFieldsAfter("T").appendHours().appendSuffix("H").appendMinutes().appendSuffix("M").appendSecondsWithOptionalMillis().appendSuffix("S").toFormatter();  }  return cStandard;}  }
class C{  private String format(Object... params){  StringBuilder buf=new StringBuilder();  for (  Object p : params) {    if (p instanceof String) {      formatTo(buf,(String)p);    } else     if (p instanceof List) {      formatTo(buf,(List<?>)p);    } else {      LOG.warning("Incorrect object type: " + p.getClass());    }  }  return buf.toString();}  }
class C{  public SimpleGrouperMediaNode(BasicMediaSource inSource,BasicMediaNode inParent,String inGroupLabel,String inGroupType,Object inGroupObject,MediaNode[] inChildren){  super(inSource,inParent,inGroupLabel,inGroupType,inGroupObject);  children=inChildren;  for (int i=0; i < children.length; i++) {    if (children[i] instanceof BasicMediaNode) {      ((BasicMediaNode)children[i]).parent=this;    }  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.CODE_LANG___CODE_LANG_1:    setCodeLang_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:05.168 -0500",hash_original_method="3156E5829AEB14A787F26082DFE50344",hash_generated_method="E56B43F48F2878D3CB0575C123027539") private void mergeCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] <= runLen[n] + runLen[n + 1]) {      if (runLen[n - 1] < runLen[n + 1])       n--;      mergeAt(n);    } else     if (runLen[n] <= runLen[n + 1]) {      mergeAt(n);    } else {      break;    }  }}  }
class C{  public InformationModel basicGetModel(){  return model;}  }
class C{  @RequestMapping(value="/businessObjectFormats/generateDdl",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_FORMATS_GENERATE_DDL_POST) public BusinessObjectFormatDdl generateBusinessObjectFormatDdl(@RequestBody BusinessObjectFormatDdlRequest businessObjectFormatDdlRequest){  return businessObjectFormatService.generateBusinessObjectFormatDdl(businessObjectFormatDdlRequest);}  }
class C{  protected void addInstrumentationForDefaultSwitchCase(BytecodeInstruction v,InsnList instrumentation){  if (v.isTableSwitch())   addInstrumentationForDefaultTableswitchCase(v,instrumentation);  if (v.isLookupSwitch())   addInstrumentationForDefaultLookupswitchCase(v,instrumentation);}  }
class C{  protected void doFunction(float[] inputs,int inputOffset,float[] outputs,int outputOffset){  float[] encoded=new float[getNumInputs()];  for (int i=0; i < getNumOutputs(); i++) {  }}  }
class C{  public void updateDBVersion(double dbVersion) throws CommandException {  final double maxPercent=100.0;  dbVersion=Math.round(dbVersion * maxPercent) / maxPercent;  if (getLog().isDebugEnabled()) {    getLog().debug("updateDBVersion, current version is: " + dbVersion);  }  executeUpdateCommand(dbVersion);}  }
class C{  public SafeAsyncTask(Executor executor){  this.executor=executor;}  }
class C{  public BoolQueryBuilder minimumShouldMatch(String minimumShouldMatch){  this.minimumShouldMatch=minimumShouldMatch;  return this;}  }
class C{  private void validate(int[][] b){  int found[]={0,0,0,0,0,0,0,0,0};  StringBuilder bs=new StringBuilder();  for (int r=0; r <= MaxR; r++) {    for (int c=0; c <= MaxC; c++) {      found[b[r][c]]=1;      bs.append(b[r][c]);    }    bs.append('|');  }  for (int i=0; i < found.length; i++) {    if (found[i] == 0) {      throw new IllegalArgumentException("Illegal board state:" + bs);    }  }}  }
class C{  public static boolean canPlaySong(Song s){  final boolean offlineMode=ProviderAggregator.getDefault().isOfflineMode();  return s != null && s.isAvailable() && (!offlineMode || s.getOfflineStatus() == BoundEntity.OFFLINE_STATUS_READY);}  }
class C{  @SuppressWarnings("unchecked") protected void receiveEntityUpdate(Packet c){  int eindex=c.getIntValue(0);  Entity entity=(Entity)c.getObject(1);  Vector<UnitLocation> movePath=(Vector<UnitLocation>)c.getObject(2);  getGame().setEntity(eindex,entity,movePath);}  }
class C{  public void leaveBusy(){  lock.readLock().unlock();}  }
class C{  public void initializeReservoir(NeuronGroup neuronGroup,SynapseGroup synapseGroup,double spectralRadius){  if (reservoirLayer != null) {    throw new IllegalStateException("The reservoir layer has already" + " been set.");  }  this.spectralRadius=spectralRadius;  reservoirLayer=neuronGroup;  reservoirLayer.setGridThreshold(9);  reservoirLayer.setLayoutBasedOnSize();  reservoirLayer.setLabel("Reservoir");  numResNodes=reservoirLayer.size();  addNeuronGroup(neuronGroup);  addSynapseGroup(synapseGroup);  SimnetUtils.scaleEigenvalue(reservoirLayer.getNeuronList(),reservoirLayer.getNeuronList(),spectralRadius);}  }
class C{  public boolean writeCharacteristic(BluetoothGattCharacteristic characteristic,String value){  return writeCharacteristic(characteristic,value.getBytes());}  }
class C{  @Override public double[] distributionForInstance(Instance instance) throws Exception {  double[] dist=new double[instance.numClasses()];switch (instance.classAttribute().type()) {case Attribute.NOMINAL:    double classification=classifyInstance(instance);  if (Utils.isMissingValue(classification)) {    return dist;  } else {    dist[(int)classification]=1.0;  }return dist;case Attribute.NUMERIC:case Attribute.DATE:dist[0]=classifyInstance(instance);return dist;default :return dist;}}  }
class C{  public Object key(){  return "" + s;}  }
