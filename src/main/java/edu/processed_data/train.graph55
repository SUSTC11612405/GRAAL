class C{  public MineralGenerator(final World world,final IBlockState state,final double minY,final double maxY,final int size,final double probability){  super(world);  this.vanillaGen=new MineralDepositGenerator(state,size);  this.minY=minY;  this.maxY=maxY;  this.probability=probability;}  }
class C{  public center removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public Jimenez(){  super(2,2,4);}  }
class C{  public static boolean isStatusClientError(int status){  return (status >= 400 && status < 500);}  }
class C{  public static ECKey fromPrivate(byte[] privKeyBytes){  return fromPrivate(new BigInteger(1,privKeyBytes));}  }
class C{  private void subscribeTopics(String token) throws IOException {}  }
class C{  public void stop(){  if (thread == null)   return;  thread.interrupt();  m_collecting=false;  isRunning=false;  try {    stream.close();  } catch (  Exception e1) {  }}  }
class C{  public void writeXML(WebRowSet caller,java.io.Writer wrt) throws SQLException {  stack=new java.util.Stack<>();  writer=wrt;  writeRowSet(caller);}  }
class C{  public void addClientDirection(final Direction direction){  if (hasPath()) {    clearPath();  }  startMoveTurn=SingletonRepository.getRuleProcessor().getTurn();  directions.remove(direction);  directions.add(direction);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  DefaultBoxAndWhiskerCategoryDataset clone=(DefaultBoxAndWhiskerCategoryDataset)super.clone();  clone.data=(KeyedObjects2D)this.data.clone();  return clone;}  }
class C{  @Override public void process(V tuple){  weightedSum+=currentWeight * tuple.doubleValue();  weightedCount+=currentWeight;}  }
class C{  private void initializeVolumeFields(){  log.info("Updating volume access state and link status.");  DbClient dbClient=this.getDbClient();  List<URI> volumeURIs=dbClient.queryByType(Volume.class,false);  Iterator<Volume> volumes=dbClient.queryIterativeObjects(Volume.class,volumeURIs);  while (volumes.hasNext()) {    Volume volume=volumes.next();    log.info("Examining Volume (id={}) for upgrade",volume.getId().toString());    if (volume.checkForRp() || volume.checkForSRDF()) {      volume.setLinkStatus(Volume.LinkStatus.IN_SYNC.toString());      if (volume.getPersonality().equals(Volume.PersonalityTypes.SOURCE.toString())) {        volume.setAccessState(Volume.VolumeAccessState.READWRITE.toString());      } else       if (volume.getPersonality().equals(Volume.PersonalityTypes.TARGET.toString())) {        volume.setAccessState(Volume.VolumeAccessState.NOT_READY.toString());      } else       if (volume.getPersonality().equals(Volume.PersonalityTypes.METADATA.toString())) {        volume.setAccessState(Volume.VolumeAccessState.NOT_READY.toString());      }    } else {      volume.setAccessState(Volume.VolumeAccessState.READWRITE.toString());    }    dbClient.persistObject(volume);  }}  }
class C{  @Override public double eval(double[] x,double[] y){  double result=0;  for (int i=0; i < x.length; i++) {    result+=x[i] * y[i];  }  result=Math.pow(Math.pow(lengthScale,-2) * result + bias,degree);  return result;}  }
class C{  public EncryptionHandler(final List<K> masterKeys,final Map<String,String> encryptionContext,final CryptoAlgorithm cryptoAlgorithm,final int frameSize) throws AwsCryptoException {  assertNonNull(masterKeys,"customerMasterKey");  cryptoAlgo_=assertNonNull(cryptoAlgorithm,"cryptoAlgorithm");  encryptionContext_=new HashMap<>(assertNonNull(encryptionContext,"encryptionContext"));  if (cryptoAlgo_.getTrailingSignatureLength() > 0) {    try {      trailingKeys_=generateTrailingSigKeyPair();      if (encryptionContext_.containsKey(Constants.EC_PUBLIC_KEY_FIELD)) {        throw new IllegalArgumentException("EncryptionContext contains reserved field " + Constants.EC_PUBLIC_KEY_FIELD);      }      encryptionContext_.put(Constants.EC_PUBLIC_KEY_FIELD,serializeTrailingKeyForEc());      trailingSig_=Signature.getInstance(cryptoAlgo_.getTrailingSignatureAlgo());      trailingSig_.initSign(trailingKeys_.getPrivate(),RND);    } catch (    final GeneralSecurityException ex) {      throw new AwsCryptoException(ex);    }  } else {    trailingKeys_=null;    trailingSig_=null;  }  version_=VersionInfo.CURRENT_CIPHERTEXT_VERSION;  type_=CIPHERTEXT_TYPE;  nonceLen_=cryptoAlgo_.getNonceLen();  if (masterKeys.isEmpty()) {    throw new IllegalArgumentException("No master keys provided");  }  masterKeys_=Collections.unmodifiableList(masterKeys);  dataKey_=masterKeys.get(0).generateDataKey(cryptoAlgorithm,encryptionContext_);  keyBlobs_=new ArrayList<>(masterKeys.size());  keyBlobs_.add(new KeyBlob(dataKey_));  for (int x=1; x < masterKeys.size(); x++) {    keyBlobs_.add(new KeyBlob(masterKeys.get(x).encryptDataKey(cryptoAlgo_,encryptionContext_,dataKey_)));  }  ContentType contentType;  if (frameSize > 0) {    contentType=ContentType.FRAME;  } else   if (frameSize == 0) {    contentType=ContentType.SINGLEBLOCK;  } else {    throw new AwsCryptoException("Frame size cannot be negative");  }  final CiphertextHeaders unsignedHeaders=createCiphertextHeaders(contentType,frameSize);  try {    encryptionKey_=cryptoAlgo_.getEncryptionKeyFromDataKey(dataKey_.getKey(),unsignedHeaders);  } catch (  final InvalidKeyException ex) {    throw new AwsCryptoException(ex);  }  ciphertextHeaders_=signCiphertextHeaders(unsignedHeaders);  ciphertextHeaderBytes_=ciphertextHeaders_.toByteArray();  messageId_=ciphertextHeaders_.getMessageId();switch (contentType) {case FRAME:    contentCryptoHandler_=new FrameEncryptionHandler(encryptionKey_,nonceLen_,cryptoAlgo_,messageId_,frameSize);  break;case SINGLEBLOCK:contentCryptoHandler_=new BlockEncryptionHandler(encryptionKey_,nonceLen_,cryptoAlgo_,messageId_);break;default :throw new AwsCryptoException("Unknown content type.");}}  }
class C{  public void closeFragment(Fragment mTargetFragment){  FragmentTransaction transaction=context.getSupportFragmentManager().beginTransaction();  transaction.remove(mTargetFragment).commit();}  }
class C{  public void actionPerformed(ActionEvent e){  DataModel selectedDataModel=getDataEditor().getSelectedDataModel();  if (selectedDataModel instanceof DataSet) {    DataSet dataSet=(DataSet)selectedDataModel;    for (int i=dataSet.getNumColumns(); i >= 0; i--) {      if (dataSet.getVariable(i) instanceof DiscreteVariable) {        dataSet.removeColumn(i);      }    }    DataModelList list=new DataModelList();    list.add(dataSet);    getDataEditor().reset(list);    getDataEditor().selectFirstTab();  } else {    JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"Requires a tabular data set.");  }}  }
class C{  private void scanHexExponentAndSuffix(int pos){  if (reader.ch == 'p' || reader.ch == 'P') {    reader.putChar(true);    skipIllegalUnderscores();    if (reader.ch == '+' || reader.ch == '-') {      reader.putChar(true);    }    skipIllegalUnderscores();    if ('0' <= reader.ch && reader.ch <= '9') {      scanDigits(pos,10);      if (!allowHexFloats) {        lexError(pos,"unsupported.fp.lit",source.name);        allowHexFloats=true;      } else       if (!hexFloatsWork)       lexError(pos,"unsupported.cross.fp.lit");    } else     lexError(pos,"malformed.fp.lit");  } else {    lexError(pos,"malformed.fp.lit");  }  if (reader.ch == 'f' || reader.ch == 'F') {    reader.putChar(true);    tk=TokenKind.FLOATLITERAL;    radix=16;  } else {    if (reader.ch == 'd' || reader.ch == 'D') {      reader.putChar(true);    }    tk=TokenKind.DOUBLELITERAL;    radix=16;  }}  }
class C{  public KMLSnippet(String namespaceURI){  super(namespaceURI);}  }
class C{  private Workflow.Method createVolumesMethod(URI systemURI,URI poolURI,List<URI> volumeURIs,VirtualPoolCapabilityValuesWrapper capabilities){  return new Workflow.Method("createVolumes",systemURI,poolURI,volumeURIs,capabilities);}  }
class C{  public static String uuid(int len){  return uuid(len,CHARS.length);}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  @Override synchronized public void write(int i) throws IOException {  oneByte[0]=(byte)i;  write(oneByte,0,1);}  }
class C{  public void selectParameters(List<Parameter> params){  double rate=1.0;  if (options.hasData()) {switch (clockType) {case STRICT_CLOCK:      break;case RANDOM_LOCAL_CLOCK:    getParameter(ClockType.LOCAL_CLOCK + ".changes");  params.add(getParameter("rateChanges"));params.add(getParameter(ClockType.LOCAL_CLOCK + ".relativeRates"));break;case FIXED_LOCAL_CLOCK:for (Taxa taxonSet : options.taxonSets) {if (options.taxonSetsMono.get(taxonSet)) {String parameterName=taxonSet.getId() + ".rate";if (!hasParameter(parameterName)) {  new Parameter.Builder(parameterName,"substitution rate").prior(PriorType.UNDEFINED).initial(rate).isCMTCRate(false).isNonNegative(true).partitionOptions(this).build(parameters);  createScaleOperator(parameterName,demoTuning,rateWeights);}params.add(getParameter(taxonSet.getId() + ".rate"));}}break;case UNCORRELATED:switch (clockDistributionType) {case LOGNORMAL:params.add(getParameter(ClockType.UCLD_STDEV));break;case GAMMA:params.add(getParameter(ClockType.UCGD_SHAPE));break;case CAUCHY:throw new UnsupportedOperationException("Uncorrelated Cauchy clock not implemented yet");case EXPONENTIAL:break;}break;case AUTOCORRELATED:throw new UnsupportedOperationException("Autocorrelated clock not implemented yet");default :throw new IllegalArgumentException("Unknown clock model");}Parameter rateParam=getClockRateParameter();params.add(rateParam);}}  }
class C{  boolean isReadOnly() throws SQLException {  if (this.connection.versionMeetsMinimum(4,1,0)) {    String orgColumnName=getOriginalName();    String orgTableName=getOriginalTableName();    return !(orgColumnName != null && orgColumnName.length() > 0 && orgTableName != null && orgTableName.length() > 0);  }  return false;}  }
class C{  final public MutableString toLowerCase(){  int n=length();  final char[] a=array;  while (n-- != 0)   a[n]=Character.toLowerCase(a[n]);  changed();  return this;}  }
class C{  public void assertTrue(boolean condition){  assertTrue("Expected: true got: false",condition);}  }
class C{  protected void sequence_S_Var(ISerializationContext context,S_Var semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.BUILTIN_EVENT_SPEC;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public int copyPhasesFrom(MProject fromProject){  if (isProcessed() || fromProject == null)   return 0;  int count=0;  int taskCount=0, lineCount=0;  MProjectPhase[] myPhases=getPhases();  MProjectPhase[] fromPhases=fromProject.getPhases();  for (int i=0; i < fromPhases.length; i++) {    int C_Phase_ID=fromPhases[i].getC_Phase_ID();    boolean exists=false;    if (C_Phase_ID == 0)     exists=false; else {      for (int ii=0; ii < myPhases.length; ii++) {        if (myPhases[ii].getC_Phase_ID() == C_Phase_ID) {          exists=true;          break;        }      }    }    if (exists)     log.info("Phase already exists here, ignored - " + fromPhases[i]); else {      MProjectPhase toPhase=new MProjectPhase(getCtx(),0,get_TrxName());      PO.copyValues(fromPhases[i],toPhase,getAD_Client_ID(),getAD_Org_ID());      toPhase.setC_Project_ID(getC_Project_ID());      toPhase.setC_Order_ID(0);      toPhase.setIsComplete(false);      if (toPhase.save()) {        count++;        taskCount+=toPhase.copyTasksFrom(fromPhases[i]);        lineCount+=toPhase.copyLinesFrom(fromPhases[i]);      }    }  }  if (fromPhases.length != count)   log.warning("Count difference - Project=" + fromPhases.length + " <> Saved="+ count);  return count + taskCount + lineCount;}  }
class C{  public static void translateTextWithOptions(String sourceText,String sourceLang,String targetLang,PrintStream out){  Translate translate=createTranslateService();  TranslateOption srcLang=TranslateOption.sourceLanguage(sourceLang);  TranslateOption tgtLang=TranslateOption.targetLanguage(targetLang);  Translation translation=translate.translate(sourceText,srcLang,tgtLang);  out.printf("Source Text:\n\tLang: %s, Text: %s\n",sourceLang,sourceText);  out.printf("TranslatedText:\n\tLang: %s, Text: %s\n",targetLang,translation.translatedText());}  }
class C{  private static ASTOptimizerList newOptimizerList(final AbstractTripleStore db){  final ASTOptimizerList optimizers;  try {    final Class<?> cls=Class.forName(QueryHints.DEFAULT_AST_OPTIMIZER_CLASS);    if (!ASTOptimizerList.class.isAssignableFrom(cls)) {      throw new RuntimeException(cls.getCanonicalName() + " does not extend " + ASTOptimizerList.class.getCanonicalName());    }    optimizers=(ASTOptimizerList)cls.newInstance();  } catch (  ClassNotFoundException|InstantiationException|IllegalAccessException e) {    throw new RuntimeException(e);  }  if (!db.isBottomUpEvaluation()) {    final Iterator<IASTOptimizer> itr=optimizers.iterator();    while (itr.hasNext()) {      final IASTOptimizer opt=itr.next();      if (opt instanceof ASTBottomUpOptimizer) {        itr.remove();        break;      }    }  }  return optimizers;}  }
class C{  protected void sequence_InitModules(ISerializationContext context,InitModules semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.109 -0500",hash_original_method="50E5FEDABD0DAB8D49656909229ED832",hash_generated_method="18A6F7B0EAF97290D9636286869ADF38") public EventParser(String event){  super(event);}  }
class C{  private void insertIndex(Node<K,V> z,int level){  HeadIndex<K,V> h=head;  int max=h.level;  if (level <= max) {    Index<K,V> idx=null;    for (int i=1; i <= level; ++i)     idx=new Index<K,V>(z,idx,null);    addIndex(idx,h,level);  } else {    level=max + 1;    Index<K,V>[] idxs=(Index<K,V>[])new Index<?,?>[level + 1];    Index<K,V> idx=null;    for (int i=1; i <= level; ++i)     idxs[i]=idx=new Index<K,V>(z,idx,null);    HeadIndex<K,V> oldh;    int k;    for (; ; ) {      oldh=head;      int oldLevel=oldh.level;      if (level <= oldLevel) {        k=level;        break;      }      HeadIndex<K,V> newh=oldh;      Node<K,V> oldbase=oldh.node;      for (int j=oldLevel + 1; j <= level; ++j)       newh=new HeadIndex<K,V>(oldbase,newh,idxs[j],j);      if (casHead(oldh,newh)) {        k=oldLevel;        break;      }    }    addIndex(idxs[k],oldh,k);  }}  }
class C{  public boolean buildHostPart(Appendable buffer,String url,boolean useSSL) throws WebAppConfigurationException, IOException {  boolean makeSecure=useSSL;  String[] pathElements=url.split("/");  String requestMapUri=pathElements[0];  int queryIndex=requestMapUri.indexOf("?");  if (queryIndex != -1) {    requestMapUri=requestMapUri.substring(0,queryIndex);  }  RequestMap requestMap=null;  if (config != null) {    requestMap=config.getRequestMapMap().get(requestMapUri);  }  if (!makeSecure && requestMap != null) {    makeSecure=requestMap.securityHttps;  }  makeSecure=webSiteProps.getEnableHttps() & makeSecure;  if (makeSecure) {    String server=webSiteProps.getHttpsHost();    if (server.isEmpty()) {      server="localhost";    }    buffer.append("https://");    buffer.append(server);    if (!webSiteProps.getHttpsPort().isEmpty()) {      buffer.append(":").append(webSiteProps.getHttpsPort());    }  } else {    String server=webSiteProps.getHttpHost();    if (server.isEmpty()) {      server="localhost";    }    buffer.append("http://");    buffer.append(server);    if (!webSiteProps.getHttpPort().isEmpty()) {      buffer.append(":").append(webSiteProps.getHttpPort());    }  }  return makeSecure;}  }
class C{  public boolean isRepresentationClassByteBuffer(){  return java.nio.ByteBuffer.class.isAssignableFrom(representationClass);}  }
class C{  public PowerVmAllocationPolicyMigrationInterQuartileRange(List<? extends Host> hostList,PowerVmSelectionPolicy vmSelectionPolicy,double safetyParameter,PowerVmAllocationPolicyMigrationAbstract fallbackVmAllocationPolicy,double utilizationThreshold){  super(hostList,vmSelectionPolicy);  setSafetyParameter(safetyParameter);  setFallbackVmAllocationPolicy(fallbackVmAllocationPolicy);}  }
class C{  private boolean isMultiValue(String componentType){  if (null == componentType) {    return false;  }  return (componentType.startsWith("javax.faces.SelectMany") || componentType.startsWith("javax.faces.SelectOne"));}  }
class C{  public static void endElement(XmlWriter w,XmlNamespace namespace,String elementName,XmlBlob xml) throws IOException {  if (xml != null && xml.getBlob() != null) {    w.innerXml(xml.getBlob());  }  w.endElement(namespace,elementName);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node fcNode;  Node psNode;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(2);  fcNode=employeeNode.getFirstChild();  psNode=fcNode.getPreviousSibling();  assertNull("nodeGetPreviousSiblingNullAssert1",psNode);}  }
class C{  public BarGraphRenderer(int divisions,Paint paint,boolean top){  super();  mDivisions=divisions;  mPaint=paint;  mTop=top;}  }
class C{  private void paintDraggedArea(SeaGlassContext context,Graphics g,int rMin,int rMax,TableColumn draggedColumn,int distance){  int draggedColumnIndex=viewIndexForColumn(draggedColumn);  Rectangle minCell=table.getCellRect(rMin,draggedColumnIndex,true);  Rectangle maxCell=table.getCellRect(rMax,draggedColumnIndex,true);  Rectangle vacatedColumnRect=minCell.union(maxCell);  g.setColor(table.getParent().getBackground());  g.fillRect(vacatedColumnRect.x,vacatedColumnRect.y,vacatedColumnRect.width,vacatedColumnRect.height);  vacatedColumnRect.x+=distance;  g.setColor(context.getStyle().getColor(context,ColorType.BACKGROUND));  g.fillRect(vacatedColumnRect.x,vacatedColumnRect.y,vacatedColumnRect.width,vacatedColumnRect.height);  SynthGraphicsUtils synthG=context.getStyle().getGraphicsUtils(context);  if (table.getShowVerticalLines()) {    g.setColor(table.getGridColor());    int x1=vacatedColumnRect.x;    int y1=vacatedColumnRect.y;    int x2=x1 + vacatedColumnRect.width - 1;    int y2=y1 + vacatedColumnRect.height - 1;    synthG.drawLine(context,"Table.grid",g,x1 - 1,y1,x1 - 1,y2);    synthG.drawLine(context,"Table.grid",g,x2,y1,x2,y2);  }  for (int row=rMin; row <= rMax; row++) {    Rectangle r=table.getCellRect(row,draggedColumnIndex,false);    r.x+=distance;    paintCell(context,g,r,row,draggedColumnIndex);    if (table.getShowHorizontalLines()) {      g.setColor(table.getGridColor());      Rectangle rcr=table.getCellRect(row,draggedColumnIndex,true);      rcr.x+=distance;      int x1=rcr.x;      int y1=rcr.y;      int x2=x1 + rcr.width - 1;      int y2=y1 + rcr.height - 1;      synthG.drawLine(context,"Table.grid",g,x1,y2,x2,y2);    }  }}  }
class C{  public String readLine(final String charset) throws IOException, IllegalStateException {  LOG.trace("enter HttpConnection.readLine()");  assertOpen();  try {    return HttpParser.readLine(inputStream,charset);  } catch (  final Throwable t) {    LOG.debug("",t);    if (t instanceof IOException) {      throw (IOException)t;    }    if (t instanceof IllegalStateException) {      throw (IllegalStateException)t;    }    throw new Error(t);  }}  }
class C{  private void hideConversationScope(){  conversationContext.setParameterName("conversationID");}  }
class C{  protected void discoverOnAllPorts(){  log.info("Sending LLDP packets out of all the enabled ports");  for (  DatapathId sw : switchService.getAllSwitchDpids()) {    IOFSwitch iofSwitch=switchService.getSwitch(sw);    if (iofSwitch == null)     continue;    if (!iofSwitch.isActive())     continue;    if (iofSwitch.getEnabledPorts() != null) {      for (      OFPortDesc ofp : iofSwitch.getEnabledPorts()) {        if (isLinkDiscoverySuppressed(sw,ofp.getPortNo())) {          continue;        }        sendDiscoveryMessage(sw,ofp.getPortNo(),true,false);        NodePortTuple npt=new NodePortTuple(sw,ofp.getPortNo());        addToMaintenanceQueue(npt);      }    }  }}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static Model readFrom(VirtualFile file) throws ServerException, ForbiddenException, IOException {  requireNonNull(file,"Required not null virtual file");  return fetchModel(XMLTree.from(file.getContent()));}  }
class C{  public void finish(){  if (mAccountAuthenticatorResponse != null) {    if (mResultBundle != null) {      mAccountAuthenticatorResponse.onResult(mResultBundle);    } else {      mAccountAuthenticatorResponse.onError(AccountManager.ERROR_CODE_CANCELED,"canceled");    }    mAccountAuthenticatorResponse=null;  }  super.finish();}  }
class C{  public static int dipToPX(final Context ctx,float dip){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dip,ctx.getResources().getDisplayMetrics());}  }
class C{  @Override protected void onStart(){  if (null != mDownloaderClientStub) {    mDownloaderClientStub.connect(this);  }  super.onStart();}  }
class C{  @Override public Object clone(){  RuleBasedCollator clone=(RuleBasedCollator)super.clone();  return clone;}  }
class C{  public void testBitCountPos(){  BigInteger aNumber=new BigInteger("12378634756343564757582937873487638746283767238657872368748726875");  assertEquals(107,aNumber.bitCount());}  }
class C{  @Override public void run(){  amIActive=true;  String[] shapefiles=new String[2];  String outputFile;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry g1=null;  com.vividsolutions.jts.geom.Geometry g2=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  shapefiles[0]=args[0];  shapefiles[1]=args[1];  outputFile=args[2];  if ((shapefiles[0].length() <= 0) || (shapefiles[1].length() <= 0) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    com.vividsolutions.jts.geom.Geometry[] recJTSGeometries=null;    ArrayList<com.vividsolutions.jts.geom.Geometry> inputGeometryList=new ArrayList<>();    com.vividsolutions.jts.geom.Geometry outputGeometry=null;    ShapeFile input1=new ShapeFile(shapefiles[0]);    shapeType=input1.getShapeType();    numRecs=input1.getNumberOfRecords();    if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      outputShapeType=ShapeType.POINT;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYLINE;    }    oneHundredthTotal=numRecs / 100;    progress=0;    n=0;    for (    ShapeFileRecord record : input1.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          recJTSGeometries[a].setUserData(record.getRecordNumber());          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Loop 1 of " + 2 + ": Reading data:",progress);      }    }    g1=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    ShapeFile input2=new ShapeFile(shapefiles[1]);    shapeType=input2.getShapeType();    numRecs=input2.getNumberOfRecords();    if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      outputShapeType=ShapeType.POINT;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYLINE;    }    oneHundredthTotal=numRecs / 100;    progress=0;    n=0;    for (    ShapeFileRecord record : input2.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          recJTSGeometries[a].setUserData(record.getRecordNumber());          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Loop 2 of " + 2 + ": Reading data:",progress);      }    }    g2=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    updateProgress("Performing operation (progress will not be updated):",-1);    try {      outputGeometry=g1.symDifference(g2);    } catch (    Exception ex) {      outputGeometry=com.vividsolutions.jts.operation.overlay.snap.SnapOverlayOp.symDifference(g1,g2);    }    ShapeFile output=null;    int numFields=3;    DBFField fields[]=new DBFField[numFields];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("PARENT1_ID");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(0);    fields[2]=new DBFField();    fields[2].setName("PARENT2_ID");    fields[2].setDataType(DBFField.DBFDataType.NUMERIC);    fields[2].setFieldLength(10);    fields[2].setDecimalCount(0);    output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input1);    PreparedGeometry[] tests1=new PreparedGeometry[g1.getNumGeometries()];    com.vividsolutions.jts.geom.Geometry[] testGs1=new com.vividsolutions.jts.geom.Geometry[g1.getNumGeometries()];    int[] userData1=new int[g1.getNumGeometries()];    for (int a=0; a < g1.getNumGeometries(); a++) {      tests1[a]=PreparedGeometryFactory.prepare(g1.getGeometryN(a));      userData1[a]=Integer.parseInt(g1.getGeometryN(a).getUserData().toString());      testGs1[a]=g1.getGeometryN(a);    }    PreparedGeometry[] tests2=new PreparedGeometry[g2.getNumGeometries()];    com.vividsolutions.jts.geom.Geometry[] testGs2=new com.vividsolutions.jts.geom.Geometry[g2.getNumGeometries()];    int[] userData2=new int[g2.getNumGeometries()];    for (int a=0; a < g2.getNumGeometries(); a++) {      tests2[a]=PreparedGeometryFactory.prepare(g2.getGeometryN(a));      userData2[a]=Integer.parseInt(g2.getGeometryN(a).getUserData().toString());      testGs2[a]=g2.getGeometryN(a);    }    if (outputGeometry instanceof GeometryCollection) {      int numGeometries=outputGeometry.getNumGeometries();      oneHundredthTotal=(int)(numGeometries / 100.0);      progress=0;      n=0;      FID=0;      int parentRecNum1=0;      int parentRecNum2=0;      for (int a=0; a < numGeometries; a++) {        parentRecNum1=-999;        parentRecNum2=-999;        com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);        if (gN instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POINT) {          Coordinate p=gN.getCoordinate();          for (int m=0; m < tests1.length; m++) {            if (tests1[m].overlaps(gN) || gN.distance(testGs1[m]) < 0.0001) {              parentRecNum1=userData1[m];              break;            }          }          for (int m=0; m < tests2.length; m++) {            if (tests2[m].overlaps(gN) || gN.distance(testGs2[m]) < 0.0001) {              parentRecNum2=userData2[m];              break;            }          }          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(p.x,p.y);          FID++;          Object[] rowData=new Object[numFields];          rowData[0]=new Double(FID);          rowData[1]=new Double(parentRecNum1);          rowData[2]=new Double(parentRecNum2);          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof LineString && outputShapeType == ShapeType.POLYLINE) {          for (int m=0; m < tests1.length; m++) {            if (tests1[m].overlaps(gN) || gN.distance(testGs1[m]) < 0.0001) {              parentRecNum1=userData1[m];              break;            }          }          for (int m=0; m < tests2.length; m++) {            if (tests2[m].crosses(gN) || gN.distance(testGs2[m]) < 0.0001) {              parentRecNum2=userData2[m];              break;            }          }          LineString ls=(LineString)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts={0};          Coordinate[] coords=ls.getCoordinates();          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          FID++;          Object[] rowData=new Object[numFields];          rowData[0]=new Double(FID);          if (parentRecNum1 != -999) {            rowData[1]=new Double(parentRecNum1);          }          if (parentRecNum2 != -999) {            rowData[2]=new Double(parentRecNum2);          }          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {          for (int m=0; m < tests1.length; m++) {            if (tests1[m].contains(gN.getInteriorPoint())) {              parentRecNum1=userData1[m];              break;            }          }          for (int m=0; m < tests2.length; m++) {            if (tests2[m].contains(gN.getInteriorPoint())) {              parentRecNum2=userData2[m];              break;            }          }          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (!Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          FID++;          Object[] rowData=new Object[numFields];          rowData[0]=new Double(FID);          if (parentRecNum1 != -999) {            rowData[1]=new Double(parentRecNum1);          }          if (parentRecNum2 != -999) {            rowData[2]=new Double(parentRecNum2);          }          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {          for (int m=0; m < tests1.length; m++) {            if (tests1[m].contains(gN.getInteriorPoint())) {              parentRecNum1=userData1[m];              break;            }          }          for (int m=0; m < tests2.length; m++) {            if (tests2[m].contains(gN.getInteriorPoint())) {              parentRecNum2=userData2[m];              break;            }          }          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (!Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          FID++;          Object[] rowData=new Object[numFields];          rowData[0]=new Double(FID);          if (parentRecNum1 != -999) {            rowData[1]=new Double(parentRecNum1);          }          if (parentRecNum2 != -999) {            rowData[2]=new Double(parentRecNum2);          }          output.addRecord(wbGeometry,rowData);        } else {        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    } else {      showFeedback("An error was encountered when saving the output file.");      return;    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void close() throws IOException {  InputStream is=_is;  _is=null;  if (is != null)   is.close();  _state.println();}  }
class C{  public void testHotDeployFailureRar(){  this.fileHandler.createFile("ram:///test.rar");  RAR rar=(RAR)factory.createDeployable("jonas4x","ram:///test.rar",DeployableType.RAR);  setupAdminHotDeploymentFailure();  try {    deployer.deploy(rar);    fail("No CargoException raised");  } catch (  CargoException expected) {    assertTrue(fileHandler.exists(deployer.getDeployableDir(rar) + "/test.rar"));  }}  }
class C{  public void centerOnScreen(){  UIUtilities.centerOnScreen(this);}  }
class C{  public void actionPerformed(ActionEvent e){  File nextPage=(File)JOptionPane.showInputDialog(eezeFrame,"Choose a demo file","Choose Demo",JOptionPane.PLAIN_MESSAGE,null,testFiles.toArray(),currentDisplayed);  try {    switchPage(nextPage,false);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public MultiblockCache<T> pullInventory(World world,int id){  MultiblockCache<T> toReturn=inventories.get(id);  for (  Coord4D obj : inventories.get(id).locations) {    TileEntityMultiblock<T> tileEntity=(TileEntityMultiblock<T>)obj.getTileEntity(world);    if (tileEntity != null) {      tileEntity.cachedData=tileEntity.getNewCache();      tileEntity.cachedID=-1;    }  }  inventories.remove(id);  return toReturn;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static String enclose(String s){  if (s.startsWith("(")) {    return s;  }  return "(" + s + ")";}  }
class C{  public void use24HourClockFormat(){  formatForDisplayTime=PickerUtilities.createFormatterFromPatternString("HH:mm",locale);  formatForMenuTimes=formatForDisplayTime;}  }
class C{  public DeleteIndexedScriptRequest(String scriptLang,String id){  this.scriptLang=scriptLang;  this.id=id;}  }
class C{  public PaymentProcessFacadeImpl(final CustomerOrderService customerOrderService){  this.customerOrderService=customerOrderService;}  }
class C{  protected CharArrayBuffer initBuffer(CharArrayBuffer buffer){  if (buffer != null) {    buffer.clear();  } else {    buffer=new CharArrayBuffer(64);  }  return buffer;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:14.909 -0500",hash_original_method="D65ED5C5B81BB78866247BEAE65AB728",hash_generated_method="34E36C8EBAFBBEDFE1CC6C6EAD7638E1") private void updateAppearance(){  if (mAdapter.getCount() > 0) {    mExpandActivityOverflowButton.setEnabled(true);  } else {    mExpandActivityOverflowButton.setEnabled(false);  }  final int activityCount=mAdapter.getActivityCount();  final int historySize=mAdapter.getHistorySize();  if (activityCount > 0 && historySize > 0) {    mDefaultActivityButton.setVisibility(VISIBLE);    ResolveInfo activity=mAdapter.getDefaultActivity();    PackageManager packageManager=mContext.getPackageManager();    mDefaultActivityButtonImage.setImageDrawable(activity.loadIcon(packageManager));    if (mDefaultActionButtonContentDescription != 0) {      CharSequence label=activity.loadLabel(packageManager);      String contentDescription=mContext.getString(mDefaultActionButtonContentDescription,label);      mDefaultActivityButton.setContentDescription(contentDescription);    }  } else {    mDefaultActivityButton.setVisibility(View.GONE);  }  if (mDefaultActivityButton.getVisibility() == VISIBLE) {    mActivityChooserContent.setBackgroundDrawable(mActivityChooserContentBackground);  } else {    mActivityChooserContent.setBackgroundDrawable(null);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void propagateMouseEventsToParent(){  this.addEventHandler(MouseEvent.ANY,null);}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  public SimpleTimeLimiter(ExecutorService executor){  this.executor=checkNotNull(executor);}  }
class C{  static void resizeIconDrawable(Drawable icon){  icon.setBounds(0,0,sIconWidth,sIconHeight);}  }
class C{  public span addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public TimeSeriesConverterCaller(final SolrDocument document,final TimeSeriesConverter<T> documentConverter,long queryStart,long queryEnd){  this.document=document;  this.documentConverter=documentConverter;  this.queryStart=queryStart;  this.queryEnd=queryEnd;}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  TextView syncRxSaveTV=(TextView)this.findViewById(R.id.rx_async_save_tv);  syncRxSaveTV.setText(OBJECT_IMAGE_URL);  this.asyncRxOneIV=(ImageView)this.findViewById(R.id.rx_async_one_iv);  this.asyncRxTwoIV=(ImageView)this.findViewById(R.id.rx_async_two_iv);  this.asyncRxSaveBT=(Button)this.findViewById(R.id.rx_async_save_bt);  this.dialog=new CustomProgressBarDialog(this);}  }
class C{  public byte[] compress(int[] unCompInput){  try {    return Snappy.compress(unCompInput);  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());    return null;  }}  }
class C{  @Override default Eval<OptionalDouble> averageLong(final ToLongFunction<? super T> fn){  return Eval.later(null);}  }
class C{  public String first(String localName){  for (  Element child : children()) {    if (localName.equals(child.getLocalName()) && XCAL_NS.equals(child.getNamespaceURI())) {      return child.getTextContent();    }  }  return null;}  }
class C{  public static boolean areEqual(final Object first,final Object second){  if (BusinessIdentityUtils.anyNull(first,second) || !BusinessIdentityUtils.sameClass(first,second)) {    return false;  }  IdentityFactory.getIdentityHandler(first).validate(first);  IdentityFactory.getIdentityHandler(second).validate(second);  return IdentityFactory.getIdentityHandler(first).areEqual(first,second);}  }
class C{  private llCost explodeProduct(int M_Product_ID,BigDecimal qty,BigDecimal accumQty){  MProduct product=MProduct.get(getCtx(),M_Product_ID);  X_T_BOM_Indented tboml=new X_T_BOM_Indented(getCtx(),0,get_TrxName());  tboml.setAD_Org_ID(p_AD_Org_ID);  tboml.setC_AcctSchema_ID(p_C_AcctSchema_ID);  tboml.setAD_PInstance_ID(getAD_PInstance_ID());  tboml.setM_CostElement_ID(p_M_CostElement_ID);  tboml.setSel_Product_ID(product.get_ID());  tboml.setM_Product_ID(p_M_Product_ID);  tboml.setQtyBOM(qty);  tboml.setQty(accumQty);  tboml.setSeqNo(m_SeqNo);  tboml.setLevelNo(m_LevelNo);  tboml.setLevels((m_LevelNo > 0 ? ":" : "") + StringUtils.repeat("    ",m_LevelNo) + " "+ product.getValue());  MCost cost=MCost.get(product,0,m_as,p_AD_Org_ID,0,p_M_CostElement_ID,get_TrxName());  tboml.setCurrentCostPrice(cost.getCurrentCostPrice());  tboml.setCost(cost.getCurrentCostPrice().multiply(accumQty));  tboml.setFutureCostPrice(cost.getFutureCostPrice());  tboml.setCostFuture(cost.getFutureCostPrice().multiply(accumQty));  m_SeqNo++;  BigDecimal llCost=Env.ZERO;  BigDecimal llFutureCost=Env.ZERO;  List<MPPProductBOMLine> list=getBOMs(product);  for (  MPPProductBOMLine bom : list) {    m_LevelNo++;    llCost ll=explodeProduct(bom.getM_Product_ID(),bom.getQtyBOM(),accumQty.multiply(bom.getQtyBOM()));    llCost=llCost.add(ll.currentCost.multiply(accumQty.multiply(bom.getQtyBOM())));    llFutureCost=llFutureCost.add(ll.futureCost.multiply(accumQty.multiply(bom.getQtyBOM())));    m_LevelNo--;  }  llCost retVal=new llCost();  if (list.size() == 0) {    tboml.setCurrentCostPriceLL(cost.getCurrentCostPrice());    tboml.setFutureCostPriceLL(cost.getFutureCostPrice());    retVal.currentCost=cost.getCurrentCostPrice();    retVal.futureCost=cost.getFutureCostPrice();  } else {    tboml.setCurrentCostPriceLL(llCost);    tboml.setFutureCostPriceLL(llFutureCost);    retVal.currentCost=llCost;    retVal.futureCost=llFutureCost;  }  tboml.saveEx();  return retVal;}  }
class C{  public ADD_COLUMN ADD_COLUMN(String columnDef){  return new ADD_COLUMN(this,columnDef);}  }
class C{  protected void eat(final SheepFood food){  final int amount=food.getAmount();  if (amount > 0) {    food.onFruitPicked(null);    if (weight < MAX_WEIGHT) {      setWeight(weight + 1);      updateSoundList();    }    heal(incHP);    hunger=0;  }}  }
class C{  private boolean initDesktopWorkbenches(){  String sql="SELECT AD_Workbench_ID " + "FROM AD_DesktopWorkbench " + "WHERE AD_Desktop_ID=? AND IsActive='Y' "+ "ORDER BY SeqNo";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Desktop_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      int AD_Workbench_ID=rs.getInt(1);      m_workbenches.add(new Integer(AD_Workbench_ID));    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,"MWorkbench.initDesktopWorkbenches",e);    return false;  }  return true;}  }
class C{  public final void testEqualsObject01(){  EllipticCurve c2=null, c1=new EllipticCurve(new ECFieldFp(BigInteger.valueOf(23L)),BigInteger.ONE,BigInteger.valueOf(19L));  assertTrue(c1.equals(c1));  c1=new EllipticCurve(new ECFieldFp(BigInteger.valueOf(23L)),BigInteger.ONE,BigInteger.valueOf(19L));  c2=new EllipticCurve(new ECFieldFp(BigInteger.valueOf(23L)),BigInteger.valueOf(1L),BigInteger.valueOf(19L));  assertTrue(c1.equals(c2) && c2.equals(c1));  c1=new EllipticCurve(new ECFieldFp(BigInteger.valueOf(23L)),BigInteger.ONE,BigInteger.valueOf(19L),new byte[24]);  c2=new EllipticCurve(new ECFieldFp(BigInteger.valueOf(23L)),BigInteger.valueOf(1L),BigInteger.valueOf(19L),new byte[24]);  assertTrue(c1.equals(c2) && c2.equals(c1));  c1=new EllipticCurve(new ECFieldFp(BigInteger.valueOf(23L)),BigInteger.ONE,BigInteger.valueOf(19L),new byte[24]);  MyEllipticCurve c3=new MyEllipticCurve(new ECFieldFp(BigInteger.valueOf(23L)),BigInteger.ONE,BigInteger.valueOf(19L),new byte[24]);  assertTrue(c1.equals(c3) && c3.equals(c1));  c1=new EllipticCurve(new ECFieldFp(BigInteger.valueOf(23L)),BigInteger.ONE,BigInteger.valueOf(19L));  c2=new EllipticCurve(new ECFieldFp(BigInteger.valueOf(23L)),BigInteger.valueOf(1L),BigInteger.valueOf(19L),null);  assertTrue(c1.equals(c2) && c2.equals(c1));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:00.273 -0500",hash_original_method="D068D99220BF43F7F5E36309EDDC7C96",hash_generated_method="84A22973CB9A6039FAE0D3EAACCE525D") public AccessibilityServiceInfo(ResolveInfo resolveInfo,Context context) throws XmlPullParserException, IOException {  ServiceInfo serviceInfo=resolveInfo.serviceInfo;  mId=new ComponentName(serviceInfo.packageName,serviceInfo.name).flattenToShortString();  mResolveInfo=resolveInfo;  XmlResourceParser parser=null;  try {    PackageManager packageManager=context.getPackageManager();    parser=serviceInfo.loadXmlMetaData(packageManager,AccessibilityService.SERVICE_META_DATA);    if (parser == null) {      return;    }    int type=0;    while (type != XmlPullParser.END_DOCUMENT && type != XmlPullParser.START_TAG) {      type=parser.next();    }    String nodeName=parser.getName();    if (!TAG_ACCESSIBILITY_SERVICE.equals(nodeName)) {      throw new XmlPullParserException("Meta-data does not start with" + TAG_ACCESSIBILITY_SERVICE + " tag");    }    AttributeSet allAttributes=Xml.asAttributeSet(parser);    Resources resources=packageManager.getResourcesForApplication(serviceInfo.applicationInfo);    TypedArray asAttributes=resources.obtainAttributes(allAttributes,com.android.internal.R.styleable.AccessibilityService);    eventTypes=asAttributes.getInt(com.android.internal.R.styleable.AccessibilityService_accessibilityEventTypes,0);    String packageNamez=asAttributes.getString(com.android.internal.R.styleable.AccessibilityService_packageNames);    if (packageNamez != null) {      packageNames=packageNamez.split("(\\s)*,(\\s)*");    }    feedbackType=asAttributes.getInt(com.android.internal.R.styleable.AccessibilityService_accessibilityFeedbackType,0);    notificationTimeout=asAttributes.getInt(com.android.internal.R.styleable.AccessibilityService_notificationTimeout,0);    flags=asAttributes.getInt(com.android.internal.R.styleable.AccessibilityService_accessibilityFlags,0);    mSettingsActivityName=asAttributes.getString(com.android.internal.R.styleable.AccessibilityService_settingsActivity);    mCanRetrieveWindowContent=asAttributes.getBoolean(com.android.internal.R.styleable.AccessibilityService_canRetrieveWindowContent,false);    mDescription=asAttributes.getString(com.android.internal.R.styleable.AccessibilityService_description);    asAttributes.recycle();  } catch (  NameNotFoundException e) {    throw new XmlPullParserException("Unable to create context for: " + serviceInfo.packageName);  } finally {    if (parser != null) {      parser.close();    }  }}  }
class C{  public Continuous2D(final double discretization,double width,double height){  this.discretization=discretization;  this.width=width;  this.height=height;}  }
class C{  public static Short valueOf(short i){  return new Short(i);}  }
class C{  public boolean isWarnEnabled(){  return true;}  }
class C{  public static <T>T checkNotNull(T reference,String referenceName){  if (reference == null) {    throw new IllegalArgumentException(referenceName + " must not be null");  }  return reference;}  }
class C{  @Override public void endWindow(){  if (doEmit()) {    sum.emit(getValue(sums));    sumDouble.emit(sums);    sumInteger.emit((int)sums);    sumLong.emit((long)sums);    sumShort.emit((short)sums);    sumFloat.emit((float)sums);    tupleAvailable=false;    Map<Integer,Integer> redis=new HashMap<Integer,Integer>();    redis.put(1,(int)sums);    redisport.emit(redis);  }  clearCache();}  }
class C{  private void preInit(){  dryRun=new CCheckBox("Dry Run",true);  clientLabel=new CLabel(Msg.getMsg(Env.getCtx(),"AD_Client_ID"));  String sql="SELECT AD_Client_ID, Name FROM AD_Client WHERE AD_Client_ID <> 0";  KeyNamePair[] clients=DB.getKeyNamePairs(sql,false);  clientPick=new CComboBox(clients);  clientPick.insertItemAt(null,0);  clientPick.setSelectedItem(null);  clientPick.setMandatory(true);  clientPick.setBackground(false);  tableLabel=new CLabel(Msg.getMsg(Env.getCtx(),"AD_Table_ID"));  tablePick=new VLookup("AD_Table_ID",true,false,true,MLookupFactory.get(Env.getCtx(),m_WindowNo,0,114,DisplayType.TableDir));  tablePick.setValue(new Integer((Integer)Env.getContextAsInt(Env.getCtx(),"$AD_Table_ID")));  tablePick.setMandatory(true);  tablePick.addActionListener(this);  DeleteEntitiesModel root=new DeleteEntitiesModel();  root.tableName="Tables";  rootNode=new DefaultMutableTreeNode(null);  tree=new CheckboxTree(rootNode);  treePane=new JScrollPane(tree);  JViewport viewPort=treePane.getViewport();  viewPort.add(tree);}  }
class C{  private static void checkElement(@Nullable Object node){  if (node == null) {    throw new NoSuchElementException();  }}  }
class C{  public void constValueIndex(byte value) throws IOException {  constValueIndex('B',pool.addIntegerInfo(value));}  }
class C{  private static ITLRestRep createInitiatorTargetRefRep(ExportGroup exportGroup,BlockObject blockObject,String hlu,Initiator initiator,StoragePort port,FCZoneReference fcZoneReference){  ITLRestRep rep=new ITLRestRep();  rep.setHlu(Integer.parseInt(hlu));  ITLRestRep.ITLBlockObjectRestRep blockObjectRestRep=new ITLRestRep.ITLBlockObjectRestRep();  blockObjectRestRep.setId(blockObject.getId());  blockObjectRestRep.setLink(new RestLinkRep("self",RestLinkFactory.newLink(blockObject)));  blockObjectRestRep.setWwn(getBlockObjectFormattedWWN(blockObject));  rep.setBlockObject(blockObjectRestRep);  ITLRestRep.ITLInitiatorRestRep initiatorRestRep=new ITLRestRep.ITLInitiatorRestRep();  initiatorRestRep.setId(initiator.getId());  initiatorRestRep.setLink(new RestLinkRep("self",RestLinkFactory.newLink(initiator)));  initiatorRestRep.setPort(initiator.getInitiatorPort());  rep.setInitiator(initiatorRestRep);  ITLRestRep.ITLStoragePortRestRep storagePortRestRep=new ITLRestRep.ITLStoragePortRestRep();  if (port != null) {    storagePortRestRep.setId(port.getId());    storagePortRestRep.setLink(new RestLinkRep("self",RestLinkFactory.newLink(port)));    storagePortRestRep.setPort(port.getPortNetworkId());    if (port.getIpAddress() != null) {      storagePortRestRep.setIpAddress(port.getIpAddress());      storagePortRestRep.setTcpPort(String.valueOf(port.getTcpPortNumber()));    }  }  rep.setStoragePort(storagePortRestRep);  rep.setExport(toNamedRelatedResource(exportGroup,exportGroup.getLabel()));  if (fcZoneReference != null) {    rep.setSanZoneName(fcZoneReference.getZoneName());  }  return rep;}  }
class C{  CreateCustomMetric(Monitoring monitoringService,String projectResource,String metricName,int bound){  this.monitoringService=monitoringService;  this.projectResource=projectResource;  this.metricType=CUSTOM_METRIC_DOMAIN + "/" + DEFAULT_METRIC_TYPE;  this.metricName=projectResource + "/metricDescriptors/" + metricType;  this.bound=bound;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:50.850 -0500",hash_original_method="D1E9408574A13A490CB1D3EF3A359E97",hash_generated_method="9A6122537C22D78D35FE6D79FCF7903D") public void readUTCTime() throws IOException {  if (tag == ASN1Constants.TAG_UTCTIME) {switch (length) {case ASN1UTCTime.UTC_HM:case ASN1UTCTime.UTC_HMS:      break;case ASN1UTCTime.UTC_LOCAL_HM:case ASN1UTCTime.UTC_LOCAL_HMS:    throw new ASN1Exception("ASN.1 UTCTime: local time format is not supported");default :  throw new ASN1Exception("ASN.1 UTCTime: wrong length, identifier at " + tagOffset);}readContent();if (buffer[offset - 1] != 'Z') {throw new ASN1Exception("ASN.1 UTCTime wrongly encoded at [" + contentOffset + ']');}if (times == null) {times=new int[7];}times[0]=strToInt(contentOffset,2);if (times[0] > 49) {times[0]+=1900;} else {times[0]+=2000;}times[1]=strToInt(contentOffset + 2,2);times[2]=strToInt(contentOffset + 4,2);times[3]=strToInt(contentOffset + 6,2);times[4]=strToInt(contentOffset + 8,2);if (length == ASN1UTCTime.UTC_HMS) {times[5]=strToInt(contentOffset + 10,2);}} else if (tag == ASN1Constants.TAG_C_UTCTIME) {throw new ASN1Exception("Decoding constructed ASN.1 UTCTime type is not supported");} else {throw expected("UTCTime");}}  }
class C{  private ReferenceContainer<WordReference>[] splitContainer(final ReferenceContainer<WordReference> container) throws SpaceExceededException {  final int partitionCount=this.seeds.scheme.verticalPartitions();  @SuppressWarnings("unchecked") final ReferenceContainer<WordReference>[] partitionBuffer=(ReferenceContainer<WordReference>[])Array.newInstance(ReferenceContainer.class,partitionCount);  for (int j=0; j < partitionBuffer.length; j++) {    partitionBuffer[j]=new ReferenceContainer<WordReference>(Segment.wordReferenceFactory,container.getTermHash(),container.size() / partitionCount);  }  final Iterator<WordReference> i=container.entries();  while (i.hasNext()) {    WordReference wordReference=i.next();    if (wordReference == null)     continue;    partitionBuffer[this.seeds.scheme.verticalDHTPosition(wordReference.urlhash())].add(wordReference);  }  return partitionBuffer;}  }
class C{  @Override public void flush(){}  }
class C{  public ColorList sortByComparator(Comparator<ReadonlyTColor> comp,boolean isReversed){  Collections.sort(colors,comp);  if (isReversed) {    Collections.reverse(colors);  }  return this;}  }
class C{  public XmlHandler addClass(Class<?> clazz,Global global){  try {    xml.addClass(clazz,global);    xml.write();  } catch (  Exception e) {    JmapperLog.ERROR(e);  }  return this;}  }
class C{  public boolean containsKey(long key){  return contains(key);}  }
class C{  @Override public final R visitTypeVariable(AnnotatedTypeVariable type,P p){  defaultAction(type,p);  return super.visitTypeVariable(type,p);}  }
class C{  public String nodeLabel(){  return legend;}  }
class C{  public void addContent(List<FunctionDescription> functions){  for (  FunctionDescription function : functions) {    if (modelMap.containsKey(function.getGroupName())) {      modelMap.get(function.getGroupName()).add(function);    } else {      modelMap.put(function.getGroupName(),new LinkedList<FunctionDescription>());      modelMap.get(function.getGroupName()).add(function);    }  }  applyFilter();  applySorting();}  }
class C{  public void showiosSearchActionBar(){  backup=statusnow;  statusnow=exstatus.SEARCH;  ab.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM | ActionBar.DISPLAY_SHOW_HOME);  ab.setDisplayShowCustomEnabled(true);  ab.setDisplayShowTitleEnabled(false);  ab.setDisplayShowHomeEnabled(false);  if (searchlayoutRef > 0)   ab.setCustomView(searchlayoutRef);  SearchCustomActionBar control=new SearchCustomActionBar(this,1000);  control.setOnSearchListener(searchlistener);  if (listener != null) {    listener.onShowSearchActionBarAfter(ab,control);  }}  }
class C{  private void adjustErrorForNode(Node node){  if (!showErrorTerms) {    Node errorNode=getErrorNode(node);    if (errorNode != null && graph.containsNode(errorNode)) {      moveAttachedBidirectedEdges(errorNode,node);      getGraph().removeNode(errorNode);      errorNodes.remove(node);      errorNodes.remove(errorNode);    }  } else {    Node errorNode=getErrorNode(node);    if (errorNode == null) {      addErrorNode(node);    }    errorNode=getErrorNode(node);    moveAttachedBidirectedEdges(node,errorNode);  }}  }
class C{  public void addEffect(Effect effect,Parameter param){  effects.put(effect,param);}  }
class C{  public boolean isDrawHighlightArrowEnabled(){  return mDrawHighlightArrow;}  }
class C{  private void processCarriageReturn(){}  }
class C{  private static boolean followsError(GrClosableBlock closure){  PsiElement prev=closure.getPrevSibling();  return prev instanceof PsiErrorElement || prev instanceof PsiWhiteSpace && prev.getPrevSibling() instanceof PsiErrorElement;}  }
class C{  public SVGOMRectElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  Viewer(){  initGUI();}  }
class C{  public String toString(){  if ("ROOT".equals(root.getTagName())) {    return root.getChildAt(0).toString();  }  return getText();}  }
class C{  final public void disable_tracing(){}  }
class C{  public Utf8Writer(File file) throws FileNotFoundException {  this(file,false);}  }
class C{  public static String toString(String desc){  return PrettyPrinter.toString(desc);}  }
class C{  public void removeBadSplits(SplitCriterion criterion,double lastCheckRatio,double lastCheckSDR,double lastCheckE){  removeBadSplitNodes(criterion,this.root,lastCheckRatio,lastCheckSDR,lastCheckE);}  }
class C{  public boolean checkLimits(DiagnosticPosition pos,Log log){  if (cp > ClassFile.MAX_CODE) {    log.error(pos,"limit.code");    return true;  }  if (max_locals > ClassFile.MAX_LOCALS) {    log.error(pos,"limit.locals");    return true;  }  if (max_stack > ClassFile.MAX_STACK) {    log.error(pos,"limit.stack");    return true;  }  return false;}  }
class C{  public ObdCodeItem(){  setKeyAttribute(FIELDS[0]);}  }
class C{  private List<VolumeDescriptor> createVolumeDescriptors(RPProtectionRecommendation recommendation,List<URI> volumeURIs,VirtualPoolCapabilityValuesWrapper capabilities,URI oldVpool,URI computeResource){  List<Volume> preparedVolumes=_dbClient.queryObject(Volume.class,volumeURIs);  List<VolumeDescriptor> descriptors=new ArrayList<VolumeDescriptor>();  for (  Volume volume : preparedVolumes) {    boolean vplex=RPHelper.isVPlexVolume(volume,_dbClient);    VolumeDescriptor.Type volumeType=VolumeDescriptor.Type.RP_SOURCE;    if (vplex) {      volumeType=VolumeDescriptor.Type.RP_VPLEX_VIRT_SOURCE;    }    if (RPHelper.protectXtremioVolume(volume,_dbClient) && capabilities != null) {      capabilities.put(VirtualPoolCapabilityValuesWrapper.RP_MAX_SNAPS,128);    }    VolumeDescriptor desc=null;    if (recommendation != null && (recommendation.getVpoolChangeVolume() != null) && Volume.PersonalityTypes.SOURCE.toString().equals(volume.getPersonality())) {      if (recommendation.isVpoolChangeProtectionAlreadyExists()) {        volumeType=VolumeDescriptor.Type.RP_EXISTING_PROTECTED_SOURCE;      } else {        volumeType=VolumeDescriptor.Type.RP_EXISTING_SOURCE;      }      desc=new VolumeDescriptor(volumeType,volume.getStorageController(),volume.getId(),volume.getPool(),null,capabilities,volume.getCapacity());      Map<String,Object> volumeParams=new HashMap<String,Object>();      volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_EXISTING_VOLUME_ID,recommendation.getVpoolChangeVolume());      volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_NEW_VPOOL_ID,recommendation.getVpoolChangeNewVpool());      volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_OLD_VPOOL_ID,oldVpool);      desc.setParameters(volumeParams);      descriptors.add(desc);    } else {      if (volume.getPersonality() == null) {        throw APIException.badRequests.missingPersonalityAttribute(String.valueOf(volume.getId()));      }      if (volume.getPersonality().equals(Volume.PersonalityTypes.TARGET.toString())) {        if (vplex) {          volumeType=VolumeDescriptor.Type.RP_VPLEX_VIRT_TARGET;        } else {          volumeType=VolumeDescriptor.Type.RP_TARGET;        }      } else       if (volume.getPersonality().equals(Volume.PersonalityTypes.METADATA.toString())) {        if (vplex) {          volumeType=VolumeDescriptor.Type.RP_VPLEX_VIRT_JOURNAL;        } else {          volumeType=VolumeDescriptor.Type.RP_JOURNAL;        }      }      desc=new VolumeDescriptor(volumeType,volume.getStorageController(),volume.getId(),volume.getPool(),null,capabilities,volume.getCapacity());      if (volume.checkPersonality(Volume.PersonalityTypes.SOURCE.name()) && computeResource != null) {        _log.info(String.format("Volume %s - will be exported to Host/Cluster: %s",volume.getLabel(),computeResource.toString()));        desc.setComputeResource(computeResource);      }      descriptors.add(desc);    }  }  return descriptors;}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,boolean value){  buffer.append(value);}  }
class C{  public void write(byte[] out){  ConnectedThread r;synchronized (this) {    if (mState != State.STATE_CONNECTED) {      return;    }    r=mConnectedThread;  }  r.write(out,0,out.length);}  }
class C{  public static Status game(String game){  return new Status(StatusType.GAME,game);}  }
class C{  public static boolean isClear(){  return (interrogate() == null);}  }
class C{  private Object[] unmarshalParameters(Object obj,Method method,MarshalInputStream in) throws IOException, ClassNotFoundException {  return (obj instanceof DeserializationChecker) ? unmarshalParametersChecked((DeserializationChecker)obj,method,in) : unmarshalParametersUnchecked(method,in);}  }
class C{  private int parseCmd(String cmd){  if (cmd == null || cmd.length() < 3)   return ERROR;  int blank=cmd.indexOf(' ');  if (blank < 0)   blank=cmd.length();  if (blank < 3)   return ERROR;  String s=cmd.substring(0,blank);  if (cmd.length() > blank + 1)   arg=cmd.substring(blank + 1,cmd.length()); else   arg=null;  for (int i=0; i < cmds.length; i++) {    if (s.equalsIgnoreCase(cmds[i]))     return i + 1;  }  return ERROR;}  }
class C{  public byte[] canonicalizeSubtree(Node node,String inclusiveNamespaces) throws CanonicalizationException {  return canonicalizerSpi.engineCanonicalizeSubTree(node,inclusiveNamespaces);}  }
class C{  private TimestampRecord saveTimestampRecord(Timestamper.TimestampSucceeded message) throws Exception {  log.trace("saveTimestampRecord()");  statusMap.put(message.getUrl(),new DiagnosticsStatus(DiagnosticsErrorCodes.RETURN_SUCCESS,LocalTime.now()));  TimestampRecord timestampRecord=new TimestampRecord();  timestampRecord.setTime(new Date().getTime());  timestampRecord.setTimestamp(encodeBase64(message.getTimestampDer()));  String hashChainResult=message.getHashChainResult() != null ? message.getHashChainResult() : null;  timestampRecord.setHashChainResult(hashChainResult);  storeTimestampAndSetStatus(message,timestampRecord);  return timestampRecord;}  }
class C{  protected String parse(Reader reader) throws IOException {  if (!reader.markSupported()) {    reader=new BufferedReader(reader);  }  StringWriter sw=new StringWriter();  startScript(sw);  int c;  while ((c=reader.read()) != -1) {    if (c == '<') {      reader.mark(1);      c=reader.read();      if (c != '%') {        sw.write('<');        reader.reset();      } else {        reader.mark(1);        c=reader.read();        if (c == '=') {          groovyExpression(reader,sw);        } else {          reader.reset();          groovySection(reader,sw);        }      }      continue;    }    if (c == '$') {      reader.mark(1);      c=reader.read();      if (c != '{') {        sw.write('$');        reader.reset();      } else {        reader.mark(1);        sw.write("${");        processGSstring(reader,sw);      }      continue;    }    if (c == '\"') {      sw.write('\\');    }    if (c == '\n' || c == '\r') {      if (c == '\r') {        reader.mark(1);        c=reader.read();        if (c != '\n') {          reader.reset();        }      }      sw.write("\n");      continue;    }    sw.write(c);  }  endScript(sw);  return sw.toString();}  }
class C{  public ShiftingBitSet(int nbits){  if (nbits < 0)   throw new NegativeArraySizeException("nbits < 0: " + nbits);  initWords(nbits);  sizeIsSticky=true;}  }
class C{  public RestoreSnapshotRequest(String repository,String snapshot){  this.snapshot=snapshot;  this.repository=repository;}  }
class C{  @Override public EndpointStatus join(InetSocketAddress endpoint,Map<String,InetSocketAddress> additionalEndpoints) throws Group.JoinException, InterruptedException {  throw new UnsupportedOperationException("NameServerSet does not support join");}  }
class C{  public int executeUpdate(String sql){  try {    Statement stat=conn.createStatement();    int updateCount=stat.executeUpdate(sql);    stat.close();    return updateCount;  } catch (  SQLException e) {    throw new RuntimeException(e);  }}  }
class C{  public void freeUseCount(){  if (_indirectSource != null) {    _indirectSource.freeUseCount();  } else   if (_useCount != null) {    if (_useCount.decrementAndGet() < 0) {      closeSelf();    }  }}  }
class C{  @After public void clearStored(){  if (housePortal != null) {    StendhalRPZone zone=housePortal.getZone();    if (zone != null) {      zone.remove(housePortal);      housePortal=null;    }  }  if (chest != null) {    StendhalRPZone zone=chest.getZone();    if (zone != null) {      zone.remove(chest);      chest=null;    }  }}  }
class C{  public void handleNoSelection(){  setButtonEnabled(SearchButtons.DOWNLOAD_BUTTON_INDEX,false);  setButtonEnabled(SearchButtons.TORRENT_DETAILS_BUTTON_INDEX,false);  setButtonEnabled(SearchButtons.STOP_SEARCH_BUTTON_INDEX,!isStopped());}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot,boolean isNeedResultMsg){  int result=-1;  if (commands == null || commands.length == 0) {    return new CommandResult(result,null,null);  }  Process process=null;  BufferedReader successResult=null;  BufferedReader errorResult=null;  StringBuilder successMsg=null;  StringBuilder errorMsg=null;  DataOutputStream os=null;  try {    process=Runtime.getRuntime().exec(isRoot ? COMMAND_SU : COMMAND_SH);    os=new DataOutputStream(process.getOutputStream());    for (    String command : commands) {      if (command == null) {        continue;      }      os.write(command.getBytes());      os.writeBytes(COMMAND_LINE_END);      os.flush();    }    os.writeBytes(COMMAND_EXIT);    os.flush();    result=process.waitFor();    if (isNeedResultMsg) {      successMsg=new StringBuilder();      errorMsg=new StringBuilder();      successResult=new BufferedReader(new InputStreamReader(process.getInputStream()));      errorResult=new BufferedReader(new InputStreamReader(process.getErrorStream()));      String s;      while ((s=successResult.readLine()) != null) {        successMsg.append(s);      }      while ((s=errorResult.readLine()) != null) {        errorMsg.append(s);      }    }  } catch (  IOException e) {    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  } finally {    try {      if (os != null) {        os.close();      }      if (successResult != null) {        successResult.close();      }      if (errorResult != null) {        errorResult.close();      }    } catch (    IOException e) {      e.printStackTrace();    }    if (process != null) {      process.destroy();    }  }  return new CommandResult(result,successMsg == null ? null : successMsg.toString(),errorMsg == null ? null : errorMsg.toString());}  }
class C{  public boolean retainAll(AbstractCharList other){  if (!(other instanceof CharArrayList))   return super.retainAll(other);  int limit=other.size() - 1;  int j=0;  char[] theElements=elements;  int mySize=size();  double N=(double)other.size();  double M=(double)mySize;  if ((N + M) * cern.jet.math.Arithmetic.log2(N) < M * N) {    CharArrayList sortedList=(CharArrayList)other.clone();    sortedList.quickSort();    for (int i=0; i < mySize; i++) {      if (sortedList.binarySearchFromTo(theElements[i],0,limit) >= 0)       theElements[j++]=theElements[i];    }  } else {    for (int i=0; i < mySize; i++) {      if (other.indexOfFromTo(theElements[i],0,limit) >= 0)       theElements[j++]=theElements[i];    }  }  boolean modified=(j != mySize);  setSize(j);  return modified;}  }
class C{  public ObjectFactory(){}  }
class C{  public static boolean isEquals(String actual,String expected){  return ObjectUtils.isEquals(actual,expected);}  }
class C{  private static PowerVmOpResponse checkPowerVmOpResponse(PowerVmOpResponse powerVmOpResponse) throws RpcException {  logger.info("Checking {}",powerVmOpResponse);switch (powerVmOpResponse.getResult()) {case OK:    break;case INVALID_VM_POWER_STATE:  throw new InvalidVmPowerStateException(powerVmOpResponse.getError());case SYSTEM_ERROR:throw new SystemErrorException(powerVmOpResponse.getError());case VM_NOT_FOUND:throw new VmNotFoundException(powerVmOpResponse.getError());default :throw new RpcException(String.format("Unknown result: %s",powerVmOpResponse.getResult()));}return powerVmOpResponse;}  }
class C{  public ColladaContributor(String ns){  super(ns);}  }
class C{  private final void dispatachChars(Node node) throws org.xml.sax.SAXException {  if (m_Serializer != null) {    this.m_Serializer.characters(node);  } else {    String data=((Text)node).getData();    this.m_contentHandler.characters(data.toCharArray(),0,data.length());  }}  }
class C{  public void swap(){  mv.visitInsn(Opcodes.SWAP);}  }
class C{  public static void addPart(World world,BlockPos pos,IMultipart part,UUID id){  IMultipartContainer container=world.isRemote ? getPartContainer(world,pos) : getOrConvertPartContainer(world,pos,true);  boolean newContainer=container == null;  if (newContainer) {    world.setBlockState(pos,MCMultiPartMod.multipart.getDefaultState().withProperty(BlockMultipartContainer.PROPERTY_TICKING,part instanceof ITickable));    TileEntity te=world.getTileEntity(pos);    if (te instanceof TileMultipartContainer)     container=(IMultipartContainer)te;    if (container == null)     world.setTileEntity(pos,(TileEntity)(container=new TileMultipartContainer()));  }  if (container.getPartFromID(id) != null)   return;  part.setContainer(container);  if (id != null)   container.addPart(id,part); else   container.addPart(part);  if (newContainer)   world.notifyLightSet(pos);}  }
class C{  ThreadGroup(){  this.name="system";}  }
class C{  private void validateTestDataLocalDTTypes(String tableName,int expectedRowCount) throws Exception {  this.rs=this.stmt.executeQuery("SELECT * FROM " + tableName);  int rowCount=0;  while (rs.next()) {    String row="Row " + this.rs.getInt(1);    assertEquals(row,++rowCount,this.rs.getInt(1));    assertEquals(row,testDateString,this.rs.getString(2));    assertEquals(row,testTimeString,this.rs.getString(3));    assertEquals(row,testDateTimeString,this.rs.getString(4));    assertEquals(row,testDateTimeString,this.rs.getString(5));    assertEquals(row,testSqlDate,this.rs.getDate(2));    assertEquals(row,testSqlTime,this.rs.getTime(3));    assertEquals(row,testSqlTimeStamp,this.rs.getTimestamp(4));    assertEquals(row,testSqlTimeStamp,this.rs.getTimestamp(5));    assertEquals(row,testLocalDate,this.rs.getObject(2,LocalDate.class));    assertEquals(row,testLocalTime,this.rs.getObject(3,LocalTime.class));    assertEquals(row,testLocalDateTime,this.rs.getObject(4,LocalDateTime.class));    assertEquals(row,testLocalDateTime,this.rs.getObject(5,LocalDateTime.class));    assertEquals(row,rowCount,this.rs.getInt("id"));    assertEquals(row,testDateString,this.rs.getString("d"));    assertEquals(row,testTimeString,this.rs.getString("t"));    assertEquals(row,testDateTimeString,this.rs.getString("dt"));    assertEquals(row,testDateTimeString,this.rs.getString("ts"));    assertEquals(row,testSqlDate,this.rs.getDate("d"));    assertEquals(row,testSqlTime,this.rs.getTime("t"));    assertEquals(row,testSqlTimeStamp,this.rs.getTimestamp("dt"));    assertEquals(row,testSqlTimeStamp,this.rs.getTimestamp("ts"));    assertEquals(row,testLocalDate,this.rs.getObject("d",LocalDate.class));    assertEquals(row,testLocalTime,this.rs.getObject("t",LocalTime.class));    assertEquals(row,testLocalDateTime,this.rs.getObject("dt",LocalDateTime.class));    assertEquals(row,testLocalDateTime,this.rs.getObject("ts",LocalDateTime.class));  }  assertEquals(expectedRowCount,rowCount);}  }
class C{  public void enableDucking(int threshold,int duckedTrackVolume){  if (threshold < 0 || threshold > 90) {    throw new IllegalArgumentException("Invalid threshold value: " + threshold);  }  if (duckedTrackVolume < 0 || duckedTrackVolume > 100) {    throw new IllegalArgumentException("Invalid duckedTrackVolume value: " + duckedTrackVolume);  }  mMANativeHelper.setGeneratePreview(true);  mDuckingThreshold=threshold;  mDuckedTrackVolume=duckedTrackVolume;  mIsDuckingEnabled=true;}  }
class C{  public static File storeOnCacheDir(Context context,Bitmap bitmap,String path,String filename,Bitmap.CompressFormat format,int quality){  File dir=new File(context.getCacheDir(),path);  FileUtils.makeDirsIfNeeded(dir);  File file=new File(dir,filename);  if (!storeAsFile(bitmap,file,format,quality)) {    return null;  }  return file;}  }
class C{  protected void notifyCursorMoved() throws SQLException {  checkforRowSetInterface();  if (listeners.isEmpty() == false) {    RowSetEvent event=new RowSetEvent((RowSet)this);    for (    RowSetListener rsl : listeners) {      rsl.cursorMoved(event);    }  }}  }
class C{  public boolean isAllSitesStable(){  try {    verifyIPsecOpAllowableWithinDR();    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public static JSONArray toJSONArray(JSONTokener x) throws JSONException {  return toJSONArray(rowToJSONArray(x),x);}  }
class C{  public List<byte[]> write(List<InternalLog> logs) throws IOException {  final List<Put> puts=new ArrayList<Put>(logs.size());  final List<byte[]> result=new ArrayList<byte[]>(logs.size());  for (  InternalLog log : logs) {    final byte[] rowkey=RowkeyBuilder.buildRowkey(log);    final Put p=new Put(rowkey);    populateColumnValues(p,log);    puts.add(p);    final List<byte[]> indexRowkeys=log.getIndexRowkeys();    if (indexRowkeys != null) {      writeIndexes(rowkey,indexRowkeys,puts);    }    result.add(rowkey);  }  tbl.put(puts);  return result;}  }
class C{  public TetradTheoryStrategy(int theta){  this.theta=theta;}  }
class C{  public void onFruitPicked(final Item picked){  hasPickableFruit=false;  if (picked != null) {    picked.setPlantGrower(null);  }  SingletonRepository.getTurnNotifier().notifyInTurns(getRandomTurnsForRegrow(),this);}  }
class C{  @Override public StreamBuilderImpl<T,U> peek(ConsumerSync<? super T> consumer){  return new Peek<T,U>(this,consumer);}  }
class C{  public String toString(){  return getValue();}  }
class C{  public CompiledST compile(String name,String template){  CompiledST code=compile(null,name,null,template,null);  code.hasFormalArgs=false;  return code;}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  @Override public String decode(String input){  if (Encoding.isURLEncoded(input)) {    return super.getCallbacks().getHelpers().urlDecode(input);  }  return input;}  }
class C{  public WriteFileRecordResponse(){  super();  setFunctionCode(Modbus.WRITE_FILE_RECORD);  setDataLength(7);}  }
class C{  private void checkDefendingPlanesCanLand(final IDelegateBridge bridge,final PlayerID defender){  if (m_headless) {    return;  }  if (!m_battleSite.isWater()) {    return;  }  final CompositeMatch<Unit> alliedDefendingAir=new CompositeMatchAnd<>(Matches.UnitIsAir,Matches.UnitWasScrambled.invert());  final Collection<Unit> m_defendingAir=Match.getMatches(m_defendingUnits,alliedDefendingAir);  if (m_defendingAir.isEmpty()) {    return;  }  int carrierCost=AirMovementValidator.carrierCost(m_defendingAir);  final int carrierCapacity=AirMovementValidator.carrierCapacity(m_defendingUnits,m_battleSite);  carrierCost+=AirMovementValidator.carrierCost(Match.getMatches(getDependentUnits(m_defendingUnits),alliedDefendingAir));  if (carrierCapacity >= carrierCost) {    return;  }  carrierCost=0;  carrierCost+=AirMovementValidator.carrierCost(Match.getMatches(getDependentUnits(m_defendingUnits),alliedDefendingAir));  for (  final Unit currentUnit : new ArrayList<>(m_defendingAir)) {    if (!Matches.UnitCanLandOnCarrier.match(currentUnit)) {      m_defendingAir.remove(currentUnit);      continue;    }    carrierCost+=UnitAttachment.get(currentUnit.getType()).getCarrierCost();    if (carrierCapacity >= carrierCost) {      m_defendingAir.remove(currentUnit);    }  }  m_battleTracker.addToDefendingAirThatCanNotLand(m_defendingAir,m_battleSite);}  }
class C{  static final int tableSizeFor(int cap){  int n=cap - 1;  n|=n >>> 1;  n|=n >>> 2;  n|=n >>> 4;  n|=n >>> 8;  n|=n >>> 16;  return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  public static void debug(String tag,String msg){  Log.d(kPanoramaGLTag + tag,msg);}  }
class C{  public final void replaceAll(Object from,Object to,boolean onlyIfSameObject){  final int width=this.width;  final int height=this.height;  Bag[] fieldx=null;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      Bag bag=fieldx[y];      int len=bag.size();      for (int i=0; i < len; i++) {        Object obj=bag.get(i);        if ((obj == null && from == null) || (onlyIfSameObject && obj == from) || (!onlyIfSameObject && obj.equals(from)))         bag.set(i,to);      }    }  }}  }
class C{  public PricedEvent copy(PriceModel owningPriceModel){  PricedEvent copy=new PricedEvent();  copy.setDataContainer(new PricedEventData());  copy.setEventPrice(getEventPrice());  copy.setEvent(this.getEvent());  copy.setPriceModel(owningPriceModel);  List<SteppedPrice> copiedSteppedPrices=new ArrayList<SteppedPrice>();  for (  SteppedPrice sp : getSteppedPrices()) {    SteppedPrice spCopy=sp.copy();    spCopy.setPricedEvent(copy);    copiedSteppedPrices.add(spCopy);  }  copy.setSteppedPrices(copiedSteppedPrices);  return copy;}  }
class C{  public void resume(){  if (currentController != null) {    currentController.resume();  }  messageDispatcher.postMessage(AutumnMessage.GAME_RESUMED);}  }
class C{  private byte[] copyCode(ConstPool destCp,Map classnames,ExceptionTable etable,CodeAttribute destCa) throws BadBytecode {  int len=getCodeLength();  byte[] newCode=new byte[len];  destCa.info=newCode;  LdcEntry ldc=copyCode(this.info,0,len,this.getConstPool(),newCode,destCp,classnames);  return LdcEntry.doit(newCode,ldc,etable,destCa);}  }
class C{  public static void main(String[] argv){  runClassifier(new NaiveBayesUpdateable(),argv);}  }
class C{  public void testRefinementStringEncodingWhiteBox(){  assertBiDirectionalEncoding(strs("foo,bar","yak","zat"),"~foo\\,bar,~yak,~zat");  assertBiDirectionalEncoding(strs("foo"),"~foo");  assertBiDirectionalEncoding(strs(),"");  assertBiDirectionalEncoding(strs(""),"~");  assertBiDirectionalEncoding(strs((String)null),"^");  assertBiDirectionalEncoding(strs("","foo","","",null,"bar"),"~,~foo,~,~,^,~bar");}  }
class C{  public int run(String[] args) throws Exception {  Options options=new Options();  Option helpOpts=OptionBuilder.withArgName("help").withDescription("show this help message").create("help");  Option crawlDbOpts=OptionBuilder.withArgName("crawldb").hasArg().withDescription("the crawldb to use").create("crawldb");  Option webGraphOpts=OptionBuilder.withArgName("webgraphdb").hasArg().withDescription("the webgraphdb to use").create("webgraphdb");  options.addOption(helpOpts);  options.addOption(crawlDbOpts);  options.addOption(webGraphOpts);  CommandLineParser parser=new GnuParser();  try {    CommandLine line=parser.parse(options,args);    if (line.hasOption("help") || !line.hasOption("webgraphdb") || !line.hasOption("crawldb")) {      HelpFormatter formatter=new HelpFormatter();      formatter.printHelp("ScoreUpdater",options);      return -1;    }    String crawlDb=line.getOptionValue("crawldb");    String webGraphDb=line.getOptionValue("webgraphdb");    update(new Path(crawlDb),new Path(webGraphDb));    return 0;  } catch (  Exception e) {    LOG.error("ScoreUpdater: " + StringUtils.stringifyException(e));    return -1;  }}  }
class C{  public AppEngineCloudConfigurable(){  appEngineMoreInfoLabel.setText(GctBundle.message("appengine.more.info",MORE_INFO_URI_OPEN_TAG,MORE_INFO_URI_CLOSE_TAG));  appEngineMoreInfoLabel.addHyperlinkListener(new BrowserOpeningHyperLinkListener());  appEngineMoreInfoLabel.setBackground(mainPanel.getBackground());}  }
class C{  public boolean validChar(String c){  if (getConstraint() == TextArea.NUMERIC) {    if (c.charAt(0) < '0' || c.charAt(0) > '9') {      return false;    }  } else   if (getConstraint() == TextArea.PHONENUMBER) {    if ((c.charAt(0) < '0' || c.charAt(0) > '9') && c.charAt(0) != '+') {      return false;    }  } else   if (getConstraint() == TextArea.DECIMAL) {    if ((c.charAt(0) < '0' || c.charAt(0) > '9') && c.charAt(0) != '+' && c.charAt(0) != '-' && c.charAt(0) != '.') {      return false;    }  }  return true;}  }
class C{  public boolean addStatemachine(IStatemachine statemachine){  lock.writeLock().lock();  boolean ret=statemachineList.add(statemachine);  lock.writeLock().unlock();  return ret;}  }
class C{  public static String encodeBytes(final byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  final java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  protected void sendSelfFinishedPatch(T task){  sendSelfPatch(task,TaskState.TaskStage.FINISHED,null);}  }
class C{  protected void sequence_S_Return(ISerializationContext context,S_Return semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public boolean isInside(int x,int y){  return super.isInside(x,codes[0] == KEYCODE_CANCEL ? y - 10 : y);}  }
class C{  protected FireworkEffectMetaBuilder(final FireworkEffectMeta meta){  this.meta=meta.clone();}  }
class C{  private FlowGraphHelpers(){}  }
class C{  public void reset(){  pos=0;}  }
class C{  public boolean isCallerValidForPackage(Context context,int authRequirements,String packageToMatch){  assert !TextUtils.isEmpty(packageToMatch);  return isCallerValid(context,authRequirements,packageToMatch);}  }
class C{  protected AbstractHttpClient createRawHTTPClient(int useConnectionTimeout,int useConnectionReadTimeout) throws AuthenticationException, GeneralSecurityException, RuntimeException {  ClientConnectionManager cm=null;  if (threadSafeClients) {    ThreadSafeClientConnManager tscm=new ThreadSafeClientConnManager();    tscm.setMaxTotal(maxConnections);    tscm.setDefaultMaxPerRoute(maxConnectionsPerHost);    cm=tscm;  } else {    cm=new SingleClientConnManager();  }  AbstractHttpClient httpClient=new DefaultHttpClient(cm);  if (relaxSSL) {    SSLHelper.configurePermissiveSSL(httpClient);  } else   if (isSecureSSL()) {    SSLHelper.configureSSLWithTrustManger(httpClient,coordinator);  }  HttpParams clientParams=httpClient.getParams();  HttpConnectionParams.setConnectionTimeout(clientParams,useConnectionTimeout);  HttpConnectionParams.setSoTimeout(clientParams,useConnectionReadTimeout);  HttpProtocolParams.setUseExpectContinue(clientParams,false);  httpClient.setHttpRequestRetryHandler(new DefaultHttpRequestRetryHandler(0,false));  return httpClient;}  }
class C{  public void valueChange(ValueChangeEvent evt){  Object c=null;  if (evt.getSource() instanceof WSearchEditor)   c=((WSearchEditor)evt.getSource()).getComponent(); else   if (evt.getSource() instanceof WPAttributeEditor)   c=((WPAttributeEditor)evt.getSource()).getComponent(); else   if (evt.getSource() instanceof WDateEditor)   c=((WDateEditor)evt.getSource()).getComponent();  if (c == null)   return;  Event e=new Event("onChange",(Component)c);  onEvent(e);}  }
class C{  private void genCommentContentUserName(final JSONObject comment){  String commentContent=comment.optString(Comment.COMMENT_CONTENT);  try {    final Set<String> userNames=userQueryService.getUserNames(commentContent);    for (    final String userName : userNames) {      commentContent=commentContent.replace('@' + userName,"@<a href='" + Latkes.getServePath() + "/member/"+ userName+ "'>"+ userName+ "</a>");    }  } catch (  final ServiceException e) {    LOGGER.log(Level.ERROR,"Generates @username home URL for comment content failed",e);  }  comment.put(Comment.COMMENT_CONTENT,commentContent);}  }
class C{  public boolean isAlive(){  return !socket.isClosed() && !socket.isInputShutdown() && !socket.isOutputShutdown();}  }
class C{  @Override public void processResult(Operation operation,Object resultObj,Map<String,Object> keyMap) throws BaseCollectionException {  CloseableIterator<CIMObjectPath> volumeInstances=null;  try {    @SuppressWarnings("unchecked") Map<String,String> policyToStorageGroupMapping=(Map<String,String>)keyMap.get(Constants.POLICY_STORAGE_GROUP_MAPPING);    CIMObjectPath storageGroupPath=getObjectPathfromCIMArgument(_args);    String groupId=storageGroupPath.getKey(Constants.INSTANCEID).getValue().toString();    String policyName=policyToStorageGroupMapping.get(groupId);    _logger.info("Group {}  policy Name {}",groupId,policyName);    if (null == policyName) {      return;    }    WBEMClient client=SMICommunicationInterface.getCIMClient(keyMap);    _unManagedVolumesUpdate=new ArrayList<UnManagedVolume>();    @SuppressWarnings("unchecked") EnumerateResponse<CIMObjectPath> volumeInstanceChunks=(EnumerateResponse<CIMObjectPath>)resultObj;    volumeInstances=volumeInstanceChunks.getResponses();    _dbClient=(DbClient)keyMap.get(Constants.dbClient);    processVolumes(volumeInstances,policyName,keyMap,operation);    while (!volumeInstanceChunks.isEnd()) {      _logger.debug("Processing Next Volume Chunk of size {}",BATCH_SIZE);      volumeInstanceChunks=client.getInstancePaths(storageGroupPath,volumeInstanceChunks.getContext(),new UnsignedInteger32(BATCH_SIZE));      processVolumes(volumeInstanceChunks.getResponses(),policyName,keyMap,operation);    }    if (!_unManagedVolumesUpdate.isEmpty()) {      _partitionManager.updateInBatches(_unManagedVolumesUpdate,getPartitionSize(keyMap),_dbClient,"VOLUME");      _unManagedVolumesUpdate.clear();    }  } catch (  Exception e) {    _logger.error("Discovering Tier Policies for vmax volumes failed",e);  } finally {    if (volumeInstances != null) {      volumeInstances.close();    }  }}  }
class C{  private void processFeaturesRemoved(final Map<String,String> changes){  for (  final String feature : changes.keySet()) {    if (features.containsKey(feature)) {      features.remove(feature);      fireFeatureDisabled(feature);    }  }}  }
class C{  public void log(Class c,Exception e){  LocalTime t=LocalTime.now();  String time=t.toString().substring(0,t.toString().length() - 4);  StackTraceElement[] stacktrace=e.getStackTrace();  String trace=e.toString() + "\n";  for (  StackTraceElement ste : stacktrace) {    trace+="\t" + ste.toString() + "\n";  }  stdout.println("[E] " + time + " - ["+ c.getName()+ "]:\t"+ "Error, see Errors tab.");  stderr.println("[E] " + time + " - ["+ c.getName()+ "]:\t"+ trace);}  }
class C{  public static void symbols(PrintStream out,boolean emit_non_terms){  terminal term;  non_terminal nt;  long start_time=System.currentTimeMillis();  out.println();  out.println("//----------------------------------------------------");  out.println("// The following code was generated by " + version.title_str);  out.println("// " + new Date());  out.println("//----------------------------------------------------");  out.println();  emit_package(out);  out.println("/** JavaCup generated class containing symbol constants. */");  out.println("public class " + symbol_const_class_name + " {");  out.println("  /* terminals */");  for (Enumeration e=terminal.all(); e.hasMoreElements(); ) {    term=(terminal)e.nextElement();    out.println("  static final int " + term.name() + " = "+ term.index()+ ";");  }  if (emit_non_terms) {    out.println("\n  /* non terminals */");    for (Enumeration e=non_terminal.all(); e.hasMoreElements(); ) {      nt=(non_terminal)e.nextElement();      out.println("  static final int " + nt.name() + " = "+ nt.index()+ ";");    }  }  out.println("};\n");  symbols_time=System.currentTimeMillis() - start_time;}  }
class C{  private void initShareViaLinkListener(View shareView){  mOnShareViaLinkSwitchCheckedChangeListener=new OnShareViaLinkListener();  Switch shareViaLinkSwitch=(Switch)shareView.findViewById(R.id.shareViaLinkSectionSwitch);  shareViaLinkSwitch.setOnCheckedChangeListener(mOnShareViaLinkSwitchCheckedChangeListener);}  }
class C{  public static Typeface robotoBlackItalic(Context context){  sRobotoBlackItalic=getFontFromRes(R.raw.roboto_blackitalic,context);  return sRobotoBlackItalic;}  }
class C{  @Deprecated static public QsiTrafficController instance(){  return null;}  }
class C{  public static Identifiability serializableInstance(){  return new Identifiability(MlBayesIm.serializableInstance());}  }
class C{  public boolean isRefreshing(){  return mStatus == PTR_STATUS_LOADING;}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN}) public Response updateProject(@PathParam("id") URI id,ProjectUpdateParam projectUpdate){  Project project=getProjectById(id,true);  if (null != projectUpdate.getName() && !projectUpdate.getName().isEmpty() && !project.getLabel().equalsIgnoreCase(projectUpdate.getName())) {    checkForDuplicateName(projectUpdate.getName(),Project.class,project.getTenantOrg().getURI(),"tenantOrg",_dbClient);    project.setLabel(projectUpdate.getName());    NamedURI tenant=project.getTenantOrg();    if (tenant != null) {      tenant.setName(projectUpdate.getName());      project.setTenantOrg(tenant);    }  }  if (null != projectUpdate.getOwner() && !projectUpdate.getOwner().isEmpty() && !projectUpdate.getOwner().equalsIgnoreCase(project.getOwner())) {    StringBuilder error=new StringBuilder();    if (!Validator.isValidPrincipal(new StorageOSPrincipal(projectUpdate.getOwner(),StorageOSPrincipal.Type.User),project.getTenantOrg().getURI(),error)) {      throw APIException.forbidden.specifiedOwnerIsNotValidForProjectTenant(error.toString());    }    boolean isRootInGeo=(projectUpdate.getOwner().equalsIgnoreCase("root") && !VdcUtil.isLocalVdcSingleSite());    if (isRootInGeo) {      throw APIException.forbidden.specifiedOwnerIsNotValidForProjectTenant("in GEO scenario, root can't be assigned as project owner");    }    project.removeAcl(new PermissionsKey(PermissionsKey.Type.SID,project.getOwner(),project.getTenantOrg().getURI()).toString(),ACL.OWN.toString());    project.setOwner(projectUpdate.getOwner());    project.addAcl(new PermissionsKey(PermissionsKey.Type.SID,project.getOwner(),project.getTenantOrg().getURI()).toString(),ACL.OWN.toString());  }  _dbClient.updateAndReindexObject(project);  recordOperation(OperationTypeEnum.UPDATE_PROJECT,true,project);  return Response.ok().build();}  }
class C{  public boolean isValid(){  return MathUtils.isCalculatable(min) && MathUtils.isCalculatable(max);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public PolynomialGF2mSmallM[] div(PolynomialGF2mSmallM f){  int[][] resultCoeffs=div(coefficients,f.coefficients);  return new PolynomialGF2mSmallM[]{new PolynomialGF2mSmallM(field,resultCoeffs[0]),new PolynomialGF2mSmallM(field,resultCoeffs[1])};}  }
class C{  public Object lookup(Object k){  return get(k);}  }
class C{  public static boolean useTwilightAdjustmentFeature(){  return true;}  }
class C{  public static double intPow(double b,int e){  if (e == 0) {    return 1;  }  float result=1;  double currPow=b;  do {    if ((e & 1) == 1)     result*=currPow;    currPow=currPow * currPow;    e>>=1;  } while (e > 0);  return result;}  }
class C{  private Base64(){}  }
class C{  public boolean merge(Frame frame){  boolean changed=false;  for (int i=0; i < locals.length; i++) {    if (locals[i] != null) {      Type prev=locals[i];      Type merged=prev.merge(frame.locals[i]);      locals[i]=merged;      if (!merged.equals(prev) || merged.popChanged()) {        changed=true;      }    } else     if (frame.locals[i] != null) {      locals[i]=frame.locals[i];      changed=true;    }  }  changed|=mergeStack(frame);  return changed;}  }
class C{  static boolean isSystemWindows(){  return SYSTEM_SEPARATOR == WINDOWS_SEPARATOR;}  }
class C{  public UrlValidator(String[] schemes,long options){  this(schemes,null,options);}  }
class C{  private static boolean verifyMagic(byte[] magic){  return Arrays.equals(magic,HeaderItem.DEX_FILE_MAGIC) || Arrays.equals(magic,HeaderItem.DEX_FILE_MAGIC_API_13);}  }
class C{  public int prepare(Xid xid) throws XAException {  StringBuilder commandBuf=new StringBuilder(MAX_COMMAND_LENGTH);  commandBuf.append("XA PREPARE ");  appendXid(commandBuf,xid);  dispatchCommand(commandBuf.toString());  return XA_OK;}  }
class C{  public static void deleteOnExit(){  deleteOnExit=true;}  }
class C{  protected void requireArguments(String... names){  StringBuilder missing=new StringBuilder();  for (  String name : names) {    if (!hasArgument(name)) {      if (missing.length() > 0) {        missing.append(", ");      }      missing.append(name);    }  }  if (missing.length() > 0) {    throw new CommandException("Missing required argument(s): " + missing);  }}  }
class C{  public MemberList(Collection<M> c){  super(c);}  }
class C{  @Override protected long[] computeMaxParameterSetSizeAndBatchSize(int numBatchedArgs) throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    long sizeOfEntireBatch=1 + +4 + 1+ 4;    long maxSizeOfParameterSet=0;    for (int i=0; i < numBatchedArgs; i++) {      BindValue[] paramArg=((BatchedBindValues)this.batchedArgs.get(i)).batchedParameterValues;      long sizeOfParameterSet=0;      sizeOfParameterSet+=(this.parameterCount + 7) / 8;      sizeOfParameterSet+=this.parameterCount * 2;      for (int j=0; j < this.parameterBindings.length; j++) {        if (!paramArg[j].isNull) {          long size=paramArg[j].getBoundLength();          if (paramArg[j].isLongData) {            if (size != -1) {              sizeOfParameterSet+=size;            }          } else {            sizeOfParameterSet+=size;          }        }      }      sizeOfEntireBatch+=sizeOfParameterSet;      if (sizeOfParameterSet > maxSizeOfParameterSet) {        maxSizeOfParameterSet=sizeOfParameterSet;      }    }    return new long[]{maxSizeOfParameterSet,sizeOfEntireBatch};  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static boolean isUdhi(byte esmClass){  return isSpecificFeatures(esmClass,SMPPConstant.ESMCLS_UDHI_INDICATOR_SET);}  }
class C{  protected void entregardesdevistaExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  String idConsulta=request.getParameter("idconsulta");  entregarConsultaCodeLogic(idConsulta,mapping,form,request,response);  setReturnActionFordward(request,verConsultaBeforeCreate(idConsulta));}  }
class C{  public static String captureVideo(){  CallBack c=new CallBack();  captureVideo(c);  Display.getInstance().invokeAndBlock(c);  return c.url;}  }
class C{  private void pop(final String desc){  char c=desc.charAt(0);  if (c == '(') {    pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1);  } else   if (c == 'J' || c == 'D') {    pop(2);  } else {    pop(1);  }}  }
class C{  public boolean hasChanged(){  if (getValue() != null)   if (m_oldValue != null)   return !m_oldValue.equals(getValue()); else   if (getValue() != " ")   return true; else   return false; else   if (m_oldValue != null)   if (m_oldValue != " ")   return true; else   return false; else   return false;}  }
class C{  public static List<GisFeatureDistance> transformToGisFeatureDistance(String aliasList[],List<?> resultList,Map<Long,Set<String>> featureIdToZipCodesMap,Class clazz){  List<GisFeatureDistance> results=new ArrayList<GisFeatureDistance>();  if (aliasList != null && !resultList.isEmpty()) {    ResultTransformer tr=new AliasToBeanResultTransformer(GisFeatureDistance.class);    Iterator<?> it=resultList.iterator();    Object[] obj;    GisFeatureDistance gisFeatureDistance;    while (it.hasNext()) {      obj=(Object[])it.next();      gisFeatureDistance=(GisFeatureDistance)tr.transformTuple(obj,aliasList);      int indexInList=results.indexOf(gisFeatureDistance);      if (indexInList == -1) {        gisFeatureDistanceFactory.updateFields(gisFeatureDistance,clazz);        results.add(gisFeatureDistance);        if (featureIdToZipCodesMap != null) {          gisFeatureDistance.setZipCodes(featureIdToZipCodesMap.get(gisFeatureDistance.getId()));        }      }    }  }  return results;}  }
class C{  public void testGetByte(){  byte[] bytes={3,0,0,1,0,(byte)-1,(byte)-127};  MySQLPacket array=new MySQLPacket(bytes.length - MySQLPacket.HEADER_LENGTH,bytes,(byte)1);  assertEquals(0,array.getByte());  assertEquals(-1,array.getByte());  assertEquals(-127,array.getByte());}  }
class C{  public GitlabGroupMember addGroupMember(GitlabGroup group,GitlabUser user,GitlabAccessLevel accessLevel) throws IOException {  return addGroupMember(group.getId(),user.getId(),accessLevel);}  }
class C{  @Override public void run(){  amIActive=true;  String dataImageHeader=null;  String featureImageHeader=null;  String outputHeader=null;  WhiteboxRasterInfo dataImage;  WhiteboxRasterInfo featureImage;  WhiteboxRaster output;  int cols, rows;  double imageTotal=0;  long imageN=0;  double imageAverage=0;  double imageTotalDeviation=0;  double stdDeviation=0;  float progress=0;  int col, row;  int i;  String statType=null;  boolean textOutput=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      dataImageHeader=args[i];    } else     if (i == 1) {      featureImageHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    } else     if (i == 3) {      statType=args[i].toLowerCase();    } else     if (i == 4) {      textOutput=Boolean.parseBoolean(args[i]);    }  }  if ((dataImageHeader == null) || (featureImageHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dataImage=new WhiteboxRasterInfo(dataImageHeader);    rows=dataImage.getNumberRows();    cols=dataImage.getNumberColumns();    double noData=dataImage.getNoDataValue();    featureImage=new WhiteboxRasterInfo(featureImageHeader);    if (featureImage.getNumberColumns() != cols || featureImage.getNumberRows() != rows) {      showFeedback("Input images must have the same dimensions (i.e. rows and columns).");      return;    }    double featureNoData=featureImage.getNoDataValue();    String featureImageShortName=featureImage.getShortHeaderFile();    String dataImageShortName=dataImage.getShortHeaderFile();    int numFeatures=0;    double[] featureData;    double[] data;    int minFeatureID=99999999;    int maxFeatureID=-99999999;    for (row=0; row < rows; row++) {      featureData=featureImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (featureData[col] != featureNoData) {          if (Math.rint(featureData[col]) != featureData[col]) {            showFeedback("The feature definition image should " + "contain integer values only.");            return;          }          if ((int)featureData[col] < minFeatureID) {            minFeatureID=(int)featureData[col];          }          if ((int)featureData[col] > maxFeatureID) {            maxFeatureID=(int)featureData[col];          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    numFeatures=maxFeatureID - minFeatureID + 1;    double[] featureTotal=new double[numFeatures];    long[] featureN=new long[numFeatures];    double[] featureAverage=new double[numFeatures];    double[] featureTotalDeviation=new double[numFeatures];    double[] featureStdDeviation=new double[numFeatures];    double[] featureMins=new double[numFeatures];    double[] featureMaxs=new double[numFeatures];    boolean[] featurePresent=new boolean[numFeatures];    for (i=0; i < numFeatures; i++) {      featureMins[i]=99999999;      featureMaxs[i]=-99999999;    }    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      data=dataImage.getRowValues(row);      featureData=featureImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (featureData[col] != featureNoData) {          i=(int)(featureData[col] - minFeatureID);          featurePresent[i]=true;          if (data[col] != noData) {            featureTotal[i]+=data[col];            featureN[i]++;            if (data[col] < featureMins[i]) {              featureMins[i]=data[col];            }            if (data[col] > featureMaxs[i]) {              featureMaxs[i]=data[col];            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    for (i=0; i < numFeatures; i++) {      if (featureN[i] > 0) {        featureAverage[i]=featureTotal[i] / featureN[i];      }    }    updateProgress("Loop 2 of 2:",(int)progress);    for (row=0; row < rows; row++) {      data=dataImage.getRowValues(row);      featureData=featureImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (featureData[col] != featureNoData && data[col] != noData) {          i=(int)(featureData[col] - minFeatureID);          featureTotalDeviation[i]+=(data[col] - featureAverage[i]) * (data[col] - featureAverage[i]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    for (i=0; i < numFeatures; i++) {      if (featureN[i] > 0) {        featureStdDeviation[i]=Math.sqrt(featureTotalDeviation[i] / (featureN[i] - 1));      }    }    dataImage.close();    if (!outputHeader.toLowerCase().equals("not specified")) {      output=new WhiteboxRaster(outputHeader,"rw",dataImageHeader,WhiteboxRaster.DataType.FLOAT,noData);      output.setPreferredPalette(dataImage.getPreferredPalette());      output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);      updateProgress("Outputing image data:",(int)progress);      if (statType.equals("average")) {        for (row=0; row < rows; row++) {          featureData=featureImage.getRowValues(row);          for (col=0; col < cols; col++) {            if (featureData[col] != featureNoData) {              i=(int)(featureData[col] - minFeatureID);              output.setValue(row,col,featureAverage[i]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Outputing image data:",(int)progress);        }      } else       if (statType.equals("minimum")) {        for (row=0; row < rows; row++) {          featureData=featureImage.getRowValues(row);          for (col=0; col < cols; col++) {            if (featureData[col] != featureNoData) {              i=(int)(featureData[col] - minFeatureID);              output.setValue(row,col,featureMins[i]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Outputing image data:",(int)progress);        }      } else       if (statType.equals("maximum")) {        for (row=0; row < rows; row++) {          featureData=featureImage.getRowValues(row);          for (col=0; col < cols; col++) {            if (featureData[col] != featureNoData) {              i=(int)(featureData[col] - minFeatureID);              output.setValue(row,col,featureMaxs[i]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Outputing image data:",(int)progress);        }      } else       if (statType.equals("range")) {        for (row=0; row < rows; row++) {          featureData=featureImage.getRowValues(row);          for (col=0; col < cols; col++) {            if (featureData[col] != featureNoData) {              i=(int)(featureData[col] - minFeatureID);              output.setValue(row,col,featureMaxs[i] - featureMins[i]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Outputing image data:",(int)progress);        }      } else       if (statType.equals("standard deviation")) {        for (row=0; row < rows; row++) {          featureData=featureImage.getRowValues(row);          for (col=0; col < cols; col++) {            if (featureData[col] != featureNoData) {              i=(int)(featureData[col] - minFeatureID);              output.setValue(row,col,featureStdDeviation[i]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Outputing image data:",(int)progress);        }      } else       if (statType.equals("total")) {        for (row=0; row < rows; row++) {          featureData=featureImage.getRowValues(row);          for (col=0; col < cols; col++) {            if (featureData[col] != featureNoData) {              i=(int)(featureData[col] - minFeatureID);              output.setValue(row,col,featureTotal[i]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Outputing image data:",(int)progress);        }      } else {        showFeedback("Specified statistic type not recognized");        return;      }      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.close();      returnData(outputHeader);    }    if (textOutput) {      DecimalFormat df;      df=new DecimalFormat("0.000");      String retstr=null;      retstr="EXTRACT STATISTICS\n\n";      retstr+="Data Image:\t" + dataImageShortName + "\n";      retstr+="Feature Image:\t" + featureImageShortName + "\n";      retstr+="NoData Value:\t" + noData + "\n";      retstr+="Output Stat:\t" + statType + "\n\n";      retstr+="ID\t" + "Value" + "\n";      if (statType.equals("average")) {        for (i=0; i < numFeatures; i++) {          if (featureN[i] > 0) {            retstr+=(i + minFeatureID) + "\t" + df.format(featureAverage[i])+ "\n";          } else           if (featurePresent[i]) {            retstr+=(i + minFeatureID) + "\t" + df.format(noData)+ "\n";          }        }      } else       if (statType.equals("minimum")) {        for (i=0; i < numFeatures; i++) {          if (featureN[i] > 0) {            retstr+=(i + minFeatureID) + "\t" + df.format(featureMins[i])+ "\n";          } else           if (featurePresent[i]) {            retstr+=(i + minFeatureID) + "\t" + df.format(noData)+ "\n";          }        }      } else       if (statType.equals("maximum")) {        for (i=0; i < numFeatures; i++) {          if (featureN[i] > 0) {            retstr+=(i + minFeatureID) + "\t" + df.format(featureMaxs[i])+ "\n";          } else           if (featurePresent[i]) {            retstr+=(i + minFeatureID) + "\t" + df.format(noData)+ "\n";          }        }      } else       if (statType.equals("range")) {        for (i=0; i < numFeatures; i++) {          if (featureN[i] > 0) {            retstr+=(i + minFeatureID) + "\t" + df.format((featureMaxs[i] - featureMins[i]))+ "\n";          } else           if (featurePresent[i]) {            retstr+=(i + minFeatureID) + "\t" + df.format(noData)+ "\n";          }        }      } else       if (statType.equals("standard deviation")) {        for (i=0; i < numFeatures; i++) {          if (featureN[i] > 0) {            retstr+=(i + minFeatureID) + "\t" + df.format(featureStdDeviation[i])+ "\n";          } else           if (featurePresent[i]) {            retstr+=(i + minFeatureID) + "\t" + df.format(noData)+ "\n";          }        }      } else       if (statType.equals("total")) {        for (i=0; i < numFeatures; i++) {          if (featureN[i] > 0) {            retstr+=(i + minFeatureID) + "\t" + df.format(featureTotal[i])+ "\n";          } else           if (featurePresent[i]) {            retstr+=(i + minFeatureID) + "\t" + df.format(noData)+ "\n";          }        }      } else {        showFeedback("Specified statistic type not recognized");        return;      }      returnData(retstr);    }    featureImage.close();  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public URIResolver(SVGDocument doc,DocumentLoader dl){  document=(SVGOMDocument)doc;  documentLoader=dl;}  }
class C{  public boolean put(int key,Object value){  int i=indexOfInsertion(key);  if (i < 0) {    i=-i - 1;    this.values[i]=value;    return false;  }  if (this.distinct > this.highWaterMark) {    int newCapacity=chooseGrowCapacity(this.distinct + 1,this.minLoadFactor,this.maxLoadFactor);    rehash(newCapacity);    return put(key,value);  }  this.table[i]=key;  this.values[i]=value;  if (this.state[i] == FREE)   this.freeEntries--;  this.state[i]=FULL;  this.distinct++;  if (this.freeEntries < 1) {    int newCapacity=chooseGrowCapacity(this.distinct + 1,this.minLoadFactor,this.maxLoadFactor);    rehash(newCapacity);  }  return true;}  }
class C{  public static boolean isNumeric(char a){  return a >= '0' && a <= '9';}  }
class C{  public void flush() throws IOException {  out.write(high >> 24);  out.write(high >> 16);  out.write(high >> 8);  out.write(high);}  }
class C{  public Integer ElementAt(int offset){  return (Integer)ptVector.get(offset);}  }
class C{  @Override public String globalInfo(){  return "Exports a single statistic to a LaTex file.\n" + "First column are datasets, first row are classifiers.\n" + "Automatically aggregates the statistics and displays the 'mean'.";}  }
class C{  @Override public void onEnabled(Context context,Intent intent){  super.onEnabled(context,intent);  if (Cfg.DEBUG) {    Check.log(TAG + " (onEnabled) ");  }  Status.self().setDeviceAdmin(true);}  }
class C{  public CustomColumnsValues(CustomPropertyManager customPropertyManager){  myManager=customPropertyManager;}  }
class C{  private boolean checkThatDefinitionIsNotInIgnoreList(String definitionName){  return !IGNORED_DEFINITIONS.contains(definitionName);}  }
class C{  public static int codeMin(int B,int H,int S,int nMax){  long range=codeRangeLong(B,H,nMax);  if (range >= (long)1 << 32 && nMax == B) {    return Integer.MIN_VALUE;  }  if (S == 0) {    return 0;  }  long maxNeg=range - 1;  while (!isNegativeCode(maxNeg,S))   --maxNeg;  if (maxNeg < 0)   return 0;  return decodeSign32(maxNeg,S);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.CONSTRAINT___ANONYMOUS_CONSTRAINT_11:    getAnonymous_constraint_1_1().clear();  return;case UmplePackage.CONSTRAINT___CONSTRAINT_BODY_1:getConstraintBody_1().clear();return;}super.eUnset(featureID);}  }
class C{  public UserProfileImpl(){  _userId=ISicresAdminDefsKeys.NULL_ID;  _product=ISicresAdminUserDefsKeys.PRODUCT_IDOC;  _profile=ISicresAdminUserDefsKeys.PROFILE_NONE;}  }
class C{  public static boolean decodeToFile(String dataToDecode,String filename){  boolean success=false;  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));    success=true;  } catch (  java.io.IOException e) {    logger.error(e,e);    success=false;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }  return success;}  }
class C{  public static <T extends BlockObject>List<UnManagedExportMask> findMatchingExportMaskForCluster(T volume,List<UnManagedExportMask> unManagedMasks,List<Set<String>> initiatorUris,DbClient dbClient,URI vArray,URI vPoolURI,URI cluster,List<String> errorMessages){  List<UnManagedExportMask> eligibleMasks=new ArrayList<UnManagedExportMask>();  Set<String> clusterInitiators=new HashSet<String>();  for (  Set<String> initiatorUriList : initiatorUris) {    clusterInitiators.addAll(initiatorUriList);  }  Map<String,Set<String>> clusterIniByProtocol=groupInitiatorsByProtocol(clusterInitiators,dbClient);  Iterator<UnManagedExportMask> itr=unManagedMasks.iterator();  List<String> maskErrorMessages=new ArrayList<String>();  try {    while (itr.hasNext()) {      UnManagedExportMask mask=itr.next();      if (!VolumeIngestionUtil.validateStoragePortsInVarray(dbClient,volume,vArray,mask.getKnownStoragePortUris(),mask,errorMessages)) {        itr.remove();        continue;      }      if (null != mask.getKnownInitiatorUris() && !mask.getKnownInitiatorUris().isEmpty()) {        for (        Entry<String,Set<String>> entry : clusterIniByProtocol.entrySet()) {          _logger.info("Processing Initiators by Protocol {} Group",entry.getValue());          _logger.info("Cluster- Comparing discovered [{}] with unmanaged [{}] ",Joiner.on(",").join(entry.getValue()),Joiner.on(",").join(mask.getKnownInitiatorUris()));          Set<String> existingknownInisToViprDiscDiff=Sets.difference(mask.getKnownInitiatorUris(),entry.getValue());          if (existingknownInisToViprDiscDiff.isEmpty()) {            _logger.info("Mask Found {}, as existing ViPR known initiators are a complete subset of ViPR discovered. try to find whether the subset is actually corresponds to 1" + "Node in a cluster, if yes then skip this, as the existing mask is meant for Exclusive mode exports.",mask.getMaskName());            if (groupInitiatorsByHost(mask.getKnownInitiatorUris(),dbClient).size() == 1) {              _logger.info("Skip this unmanaged mask {}, as the mask has only initiators from 1 Node in a cluster, probably meant for exclusive export",mask.getMaskName());            } else {              _logger.info("Mask Found {} with a subset of initiators from more than 1 node in a cluster",mask.getMaskName());              if (verifyNumPath(initiatorUris,mask.getZoningMap(),volume,vPoolURI,dbClient)) {                eligibleMasks.add(mask);              }              itr.remove();            }          } else {            _logger.info("Existing ViPR known Initiators are not a complete subset of ViPR discovered, check whether ViPR discovered are a subset of existing");            Set<String> ViPRDiscToExistingKnownInisDiff=Sets.difference(entry.getValue(),mask.getKnownInitiatorUris());            if (ViPRDiscToExistingKnownInisDiff.isEmpty()) {              _logger.info("Mask Found {} with a subset of ViPR initiators in existing mask.",mask.getMaskName());              if (verifyNumPath(initiatorUris,mask.getZoningMap(),volume,vPoolURI,dbClient)) {                eligibleMasks.add(mask);              }              itr.remove();            }          }        }      }    }    if (eligibleMasks.isEmpty() && !unManagedMasks.isEmpty()) {      _logger.info("Unable to find a MV/SG with all the cluster initiators, now trying to group initiators by Host and start the search");      for (      Set<String> initiatorUriList : initiatorUris) {        if (unManagedMasks.isEmpty()) {          break;        }        _logger.info("Looking a Mask for initiators {} belonging to a cluster node",Joiner.on(",").join(initiatorUriList));        Map<String,Set<String>> iniByProtocol=groupInitiatorsByProtocol(initiatorUriList,dbClient);        eligibleMasks.addAll(findMatchingExportMaskForHost(volume,unManagedMasks,initiatorUriList,iniByProtocol,dbClient,vArray,vPoolURI,true,clusterInitiators,cluster,errorMessages));      }    } else {      _logger.info("Either masks already found or there are no unmanaged masks available");    }  } catch (  IngestionException ex) {    _logger.error(ex.getLocalizedMessage());    if (!maskErrorMessages.contains(ex.getLocalizedMessage())) {      maskErrorMessages.add(ex.getLocalizedMessage());    }  }  if (!maskErrorMessages.isEmpty()) {    String message=maskErrorMessages.size() + " of " + unManagedMasks.size()+ " unmanaged export mask(s) failed zoning checks: ";    String messages=Joiner.on("; ").join(maskErrorMessages);    _logger.error(message + messages);    throw IngestionException.exceptions.inconsistentZoningAcrossHosts(message + messages);  }  return eligibleMasks;}  }
class C{  public String toXML(){  StringBuilder buf=new StringBuilder();  buf.append("<item");  if (this.isAllow()) {    buf.append(" action=\"allow\"");  } else {    buf.append(" action=\"deny\"");  }  buf.append(" order=\"").append(getOrder()).append("\"");  if (getType() != null) {    buf.append(" type=\"").append(getType()).append("\"");  }  if (getValue() != null) {    buf.append(" value=\"").append(getValue()).append("\"");  }  if (isFilterEverything()) {    buf.append("/>");  } else {    buf.append(">");    if (this.isFilterIQ()) {      buf.append("<iq/>");    }    if (this.isFilterMessage()) {      buf.append("<message/>");    }    if (this.isFilterPresence_in()) {      buf.append("<presence-in/>");    }    if (this.isFilterPresence_out()) {      buf.append("<presence-out/>");    }    buf.append("</item>");  }  return buf.toString();}  }
class C{  private void updateDueCounter(int amountDue){  if (amountDue > 0) {    mDueCountText.setTextColor(ContextCompat.getColor(itemView.getContext(),android.R.color.primary_text_light));    mDueCountText.setText(itemView.getResources().getQuantityString(R.plurals.challenges_due,amountDue,amountDue));  } else {    mDueCountText.setTextColor(ContextCompat.getColor(itemView.getContext(),android.R.color.tertiary_text_dark));    mDueCountText.setText(R.string.no_challenges_due);  }}  }
class C{  BugInstanceGroupNode(final GroupBy groupBy,final String groupName,final VisitableTreeNode parent,final Bug bug,final int depth,final Project project){  setParent(parent);  _project=project;  this.bug=bug;  _childs=new ArrayList<VisitableTreeNode>();  _groupBy=groupBy;  _groupName=groupName;  _simpleName=groupName;  _memberCount=0;  _depthFromRoot=depth;  setTooltip(_groupName);  setCollapsedIcon(new MaskIcon(getGroupByCollapsedIcon(groupBy),JBColor.BLACK));  setExpandedIcon(new MaskIcon(getGroupByExpandedIcon(groupBy),JBColor.BLACK));}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String watershedHeader=null;  String weightHeader=null;  int row, col, x, y;  int progress=0;  double z;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  boolean flag=false;  double flowDir=0;  double flowLength=0;  double watershedID=0;  boolean blnWatershed=false;  boolean blnWeight=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      if (!args[i].toLowerCase().contains("not specified")) {        watershedHeader=args[i];        blnWatershed=true;      }    } else     if (i == 2) {      if (!args[i].toLowerCase().contains("not specified")) {        weightHeader=args[i];        blnWeight=true;      }    } else     if (i == 3) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    double gridResX=pntr.getCellSizeX();    double gridResY=pntr.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,-999);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    if (!blnWatershed && !blnWeight) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=pntr.getValue(row,col);          if (output.getValue(row,col) == -999 && flowDir != noData) {            flag=false;            x=col;            y=row;            flowLength=0;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                flowLength+=gridLengths[c];                x+=dX[c];                y+=dY[c];                if (output.getValue(y,x) != -999) {                  flowLength+=output.getValue(y,x);                  flag=true;                }              } else {                flag=true;              }            } while (!flag);            flag=false;            x=col;            y=row;            do {              output.setValue(y,x,flowLength);              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                x+=dX[c];                y+=dY[c];                z=output.getValue(y,x);                if (z != -999) {                  flag=true;                } else {                  flowLength-=gridLengths[c];                }              } else {                output.setValue(y,x,0);                flag=true;              }            } while (!flag);          } else           if (flowDir == noData) {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else     if (blnWatershed && !blnWeight) {      WhiteboxRaster watershed=new WhiteboxRaster(watershedHeader,"r");      if (watershed.getNumberRows() != rows || watershed.getNumberColumns() != cols) {        showFeedback("The input images must be of the same dimensions.");        return;      }      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=pntr.getValue(row,col);          watershedID=watershed.getValue(row,col);          if (output.getValue(row,col) == -999 && flowDir != noData && watershedID != noData) {            flag=false;            x=col;            y=row;            flowLength=0;            watershedID=watershed.getValue(row,col);            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0 && watershed.getValue(y,x) == watershedID) {                c=(int)(Math.log(flowDir) / LnOf2);                flowLength+=gridLengths[c];                x+=dX[c];                y+=dY[c];                if (output.getValue(y,x) != -999) {                  flowLength+=output.getValue(y,x);                  flag=true;                }              } else {                flag=true;              }            } while (!flag);            flag=false;            x=col;            y=row;            do {              output.setValue(y,x,flowLength);              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                x+=dX[c];                y+=dY[c];                z=output.getValue(y,x);                if (z != -999 || watershed.getValue(y,x) != watershedID) {                  flag=true;                } else {                  flowLength-=gridLengths[c];                }              } else {                output.setValue(y,x,0);                flag=true;              }            } while (!flag);          } else           if (flowDir == noData || watershedID == noData) {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      watershed.close();    } else     if (!blnWatershed && blnWeight) {      WhiteboxRaster weight=new WhiteboxRaster(weightHeader,"r");      if (weight.getNumberRows() != rows || weight.getNumberColumns() != cols) {        showFeedback("The input images must be of the same dimensions.");        return;      }      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=pntr.getValue(row,col);          if (output.getValue(row,col) == -999 && flowDir != noData) {            flag=false;            x=col;            y=row;            flowLength=0;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                flowLength+=gridLengths[c] * weight.getValue(y,x);                x+=dX[c];                y+=dY[c];                if (output.getValue(y,x) != -999) {                  flowLength+=output.getValue(y,x);                  flag=true;                }              } else {                flag=true;              }            } while (!flag);            flag=false;            x=col;            y=row;            do {              output.setValue(y,x,flowLength);              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                x+=dX[c];                y+=dY[c];                z=output.getValue(y,x);                if (z != -999) {                  flag=true;                } else {                  flowLength-=gridLengths[c] * weight.getValue(y,x);                }              } else {                output.setValue(y,x,0);                flag=true;              }            } while (!flag);          } else           if (flowDir == noData) {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      weight.close();    } else {      WhiteboxRaster watershed=new WhiteboxRaster(watershedHeader,"r");      if (watershed.getNumberRows() != rows || watershed.getNumberColumns() != cols) {        showFeedback("The input images must be of the same dimensions.");        return;      }      WhiteboxRaster weight=new WhiteboxRaster(weightHeader,"r");      if (weight.getNumberRows() != rows || weight.getNumberColumns() != cols) {        showFeedback("The input images must be of the same dimensions.");        return;      }      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=pntr.getValue(row,col);          watershedID=watershed.getValue(row,col);          if (output.getValue(row,col) == -999 && flowDir != noData && watershedID != noData) {            flag=false;            x=col;            y=row;            flowLength=0;            watershedID=watershed.getValue(row,col);            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0 && watershed.getValue(y,x) == watershedID) {                c=(int)(Math.log(flowDir) / LnOf2);                flowLength+=gridLengths[c] * weight.getValue(y,x);                x+=dX[c];                y+=dY[c];                if (output.getValue(y,x) != -999) {                  flowLength+=output.getValue(y,x);                  flag=true;                }              } else {                flag=true;              }            } while (!flag);            flag=false;            x=col;            y=row;            do {              output.setValue(y,x,flowLength);              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                x+=dX[c];                y+=dY[c];                z=output.getValue(y,x);                if (z != -999 || watershed.getValue(y,x) != watershedID) {                  flag=true;                } else {                  flowLength-=gridLengths[c] * weight.getValue(y,x);                }              } else {                output.setValue(y,x,0);                flag=true;              }            } while (!flag);          } else           if (flowDir == noData || watershedID == noData) {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      weight.close();      watershed.close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Node node(final String tag,final String text) throws IOException {  closeHead();  m_nodes++;  final Node tmp=new Node(tag,this);  tmp.text(text);  final Node ret=tmp.close();  assert ret == this;  return ret;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return NODE_ID;case 2:  return VERSION;default :return null;}}  }
class C{  public void shutdown(){  running=false;  if (networkThreads != null) {    for (    NetworkThread n : networkThreads) {      n.stopped=true;    }  }  networkThreads=null;synchronized (LOCK) {    LOCK.notifyAll();  }}  }
class C{  short concurrency(){  return cnt;}  }
class C{  private void finishItemList(StringBuilder result){  result.append("</div></div>");}  }
class C{  public final static void writeUnescapedXML(Writer out,String tag,String val,Object... attrs) throws IOException {  out.write('<');  out.write(tag);  for (int i=0; i < attrs.length; i++) {    out.write(' ');    out.write(attrs[i++].toString());    out.write('=');    out.write('"');    out.write(attrs[i].toString());    out.write('"');  }  if (val == null) {    out.write('/');    out.write('>');  } else {    out.write('>');    out.write(val);    out.write('<');    out.write('/');    out.write(tag);    out.write('>');  }}  }
class C{  public Object peek() throws EmptyStackException {  int n=size();  if (n <= 0) {    throw new EmptyStackException();  } else {    return get(n - 1);  }}  }
class C{  public boolean isEditable(ServiceClient userVO){  boolean editable=false;  if (this.getEstado() == ConsultasConstants.ESTADO_CONSULTA_ABIERTA && this.getIdusrsolicitante().equalsIgnoreCase(userVO.getId()))   editable=true;  return editable;}  }
class C{  public ComputationException(@Nullable Throwable cause){  super(cause);}  }
class C{  public static MosaicSupplyChangeTransaction createMosaicSupplyChangeTransaction(){  return createMosaicSupplyChangeTransaction(TimeInstant.ZERO,Utils.generateRandomAccount());}  }
class C{  static public String formatPercDiff(double percDiff){  return percDiffFormatter().format(percDiff);}  }
class C{  public DoubleLiteral createDoubleLiteral(){  DoubleLiteralImpl doubleLiteral=new DoubleLiteralImpl();  return doubleLiteral;}  }
class C{  public JSONObject putOpt(String key,Object value) throws JSONException {  if (key != null && value != null) {    this.put(key,value);  }  return this;}  }
class C{  public synchronized void co_exit_to(Object arg_object,int thisCoroutine,int toCoroutine) throws java.lang.NoSuchMethodException {  if (!m_activeIDs.get(toCoroutine))   throw new java.lang.NoSuchMethodException(XMLMessages.createXMLMessage(XMLErrorResources.ER_COROUTINE_NOT_AVAIL,new Object[]{Integer.toString(toCoroutine)}));  m_yield=arg_object;  m_nextCoroutine=toCoroutine;  m_activeIDs.clear(thisCoroutine);  notify();}  }
class C{  public boolean hasHierarchy(){  return mDraweeHolder.hasHierarchy();}  }
class C{  public static boolean isFilePatternValid(){  String pattern=MovieModuleManager.MOVIE_SETTINGS.getMovieRenamerFilename().toUpperCase().trim();  if (pattern.contains("$T") || pattern.contains("$E") || pattern.contains("$O")) {    return true;  }  return false;}  }
class C{  public ConnectionGroupModel(){}  }
class C{  public Settings(){  explicitSettings=new HashSet<String>();  fillSettings(XMLUtils.extractMapping(SETTINGS_FILE));  explicitSettings.clear();  System.getProperties().setProperty("java.util.logging.SimpleFormatter.format","[%3$s] %4$s: %5$s %n");}  }
class C{  public void notifyObservers(){  notifyObservers(null);}  }
class C{  public AsyncResult CreateSessionAsync(CreateSessionRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  private static void assignLeftOverBlocks(Map<String,List<Distributable>> outputMap,Set<Distributable> uniqueBlocks,int noOfBlocksPerNode){  for (  Map.Entry<String,List<Distributable>> entry : outputMap.entrySet()) {    Iterator<Distributable> blocks=uniqueBlocks.iterator();    List<Distributable> blockLst=entry.getValue();    if (blockLst.size() == noOfBlocksPerNode) {      continue;    }    while (blocks.hasNext()) {      Distributable block=blocks.next();      blockLst.add(block);      blocks.remove();      if (blockLst.size() >= noOfBlocksPerNode) {        break;      }    }  }  for (  Map.Entry<String,List<Distributable>> entry : outputMap.entrySet()) {    Iterator<Distributable> blocks=uniqueBlocks.iterator();    if (blocks.hasNext()) {      Distributable block=blocks.next();      List<Distributable> blockLst=entry.getValue();      blockLst.add(block);      blocks.remove();    }  }}  }
class C{  public static List<ApiField> generateMergedList(List<ApiField> sequenceA,List<ApiField> sequenceB){  int[][] lcs=computeLcs(sequenceA,sequenceB);  List<ApiField> mergedFields=Lists.newArrayList();  int aPos=sequenceA.size();  int bPos=sequenceB.size();  while (aPos > 0 || bPos > 0) {    if (aPos > 0 && bPos > 0 && sequenceA.get(aPos - 1).compareTo(sequenceB.get(bPos - 1)) == 0) {      ApiField field=sequenceA.get(aPos - 1);      field.changeState=ChangeState.NOT_CHANGED;      mergedFields.add(field);      aPos--;      bPos--;    } else     if (bPos > 0 && (aPos == 0 || lcs[aPos][bPos - 1] >= lcs[aPos - 1][bPos])) {      ApiField field=sequenceB.get(bPos - 1);      field.changeState=ChangeState.ADDED;      mergedFields.add(field);      bPos--;    } else {      ApiField field=sequenceA.get(aPos - 1);      field.changeState=ChangeState.REMOVED;      mergedFields.add(field);      aPos--;    }  }  Collections.reverse(mergedFields);  return mergedFields;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:55.016 -0500",hash_original_method="7B6375E3361202B2623A569246ADB845",hash_generated_method="86CE4C043442D3BE24E2CEC21928CA6A") public static void add(Runnable finisher){  sPendingWorkFinishers.add(finisher);}  }
class C{  public final void matchEvent(EventBean theEvent,Collection<FilterHandle> matches){  nodeRWLock.readLock().lock();  try {    if (InstrumentationHelper.ENABLED) {      if (!indizes.isEmpty()) {        InstrumentationHelper.get().qFilterHandleSetIndexes(indizes);      }    }    for (    FilterParamIndexBase index : indizes) {      index.matchEvent(theEvent,matches);    }    if (InstrumentationHelper.ENABLED) {      if (!indizes.isEmpty()) {        InstrumentationHelper.get().aFilterHandleSetIndexes();      }    }    if (InstrumentationHelper.ENABLED) {      if (!callbackSet.isEmpty()) {        InstrumentationHelper.get().qaFilterHandleSetCallbacks(callbackSet);      }    }    for (    FilterHandle filterCallback : callbackSet) {      matches.add(filterCallback);    }  }  finally {    nodeRWLock.readLock().unlock();  }}  }
class C{  public static byte multiply(byte a,byte b){  if (a == 0 || b == 0) {    return 0;  } else {    int logA=LOG_TABLE[a & 0xFF];    int logB=LOG_TABLE[b & 0xFF];    int logResult=logA + logB;    return EXP_TABLE[logResult];  }}  }
class C{  public static String replaceSystemProperties(final Object source){  return new StrSubstitutor(StrLookup.systemPropertiesLookup()).replace(source);}  }
class C{  String popBaseIndentifier(){  return (String)m_baseIdentifiers.pop();}  }
class C{  public void draw(Graphics2D graphics2D){  AffineTransform tr=AffineTransform.getTranslateInstance(position.getX(),position.getY());  if (transform != null) {    tr.concatenate(transform);  }  if ((dShape != null) && (tpi != null)) {    Shape tShape=tr.createTransformedShape(dShape);    if (tpi.fillPaint != null) {      graphics2D.setPaint(tpi.fillPaint);      graphics2D.fill(tShape);    }    if (tpi.strokeStroke != null && tpi.strokePaint != null) {      graphics2D.setStroke(tpi.strokeStroke);      graphics2D.setPaint(tpi.strokePaint);      graphics2D.draw(tShape);    }  }  if (glyphChildrenNode != null) {    glyphChildrenNode.setTransform(tr);    glyphChildrenNode.paint(graphics2D);  }}  }
class C{  public LinkedList(){  head.next=head.previous=head;}  }
class C{  public boolean isMaxIterations(){  return (this.maxIterations >= 0) && (this.traversed.size() >= this.maxIterations);}  }
class C{  @Override protected void extendSignatureTag() throws DSSException {  super.extendSignatureTag();  xadesSignature.checkSignatureIntegrity();  final TimestampParameters archiveTimestampParameters=params.getArchiveTimestampParameters();  final String canonicalizationMethod=archiveTimestampParameters.getCanonicalizationMethod();  final byte[] data=xadesSignature.getArchiveTimestampData(null,canonicalizationMethod);  final DigestAlgorithm timestampDigestAlgorithm=archiveTimestampParameters.getDigestAlgorithm();  final byte[] digestBytes=DSSUtils.digest(timestampDigestAlgorithm,data);  createXAdESTimeStampType(TimestampType.ARCHIVE_TIMESTAMP,canonicalizationMethod,digestBytes);}  }
class C{  public void removeBlock(Block block){  block.deleteAllLinks();  if (block.belongsOnBottom()) {    this.bottomLayer.getChildren().remove(block);  } else {    this.blockLayer.getChildren().remove(block);  }}  }
class C{  @Override public void onLayoutChange(View v,int left,int top,int right,int bottom,int oldLeft,int oldTop,int oldRight,int oldBottom){  Layout layout=mUrlBar.getLayout();  if (layout == null)   return;  int urlBarWidth=mUrlBar.getWidth();  int iconWidth=mCurrentIconResource == 0 ? 0 : mIconResourceWidths.get(mCurrentIconResource);  int availableTextWidth=urlBarWidth - iconWidth;  int desiredWidth=(int)Layout.getDesiredWidth(layout.getText(),layout.getPaint());  if (desiredWidth > availableTextWidth) {    mUrlBar.scrollTo(desiredWidth - availableTextWidth,0);  } else {    mUrlBar.scrollTo(0,0);  }}  }
class C{  public static List<Integer> precomputeHashes(byte[] data,long tweak){  ArrayList<Integer> list=new ArrayList<>(MAX_HASH_FUNCS);  for (int i=0; i < MAX_HASH_FUNCS; ++i) {    list.add(murmurhash3bit(i,data,tweak));  }  return list;}  }
class C{  public void removeFrameSlot(Object identifier){  CompilerAsserts.neverPartOfCompilation(NEVER_PART_OF_COMPILATION_MESSAGE);  if (!identifierToSlotMap.containsKey(identifier)) {    throw new IllegalArgumentException("no such frame slot: " + identifier);  }  slots.remove(identifierToSlotMap.get(identifier));  identifierToSlotMap.remove(identifier);  updateVersion();  getNotInFrameAssumption(identifier);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:55.334 -0500",hash_original_method="35CEE337B7CF2CE947FEFF13BC2D0A5B",hash_generated_method="FB209E38D853AAC0B760690DC6CFAAB7") public TimeInfo(NtpV3Packet message,long returnTime,List comments,boolean doComputeDetails){  if (message == null)   throw new IllegalArgumentException("message cannot be null");  this._returnTime=returnTime;  this._message=message;  this._comments=comments;  if (doComputeDetails)   computeDetails();}  }
class C{  private static String parsePhoneNumberForMms(String address){  StringBuilder builder=new StringBuilder();  int len=address.length();  for (int i=0; i < len; i++) {    char c=address.charAt(i);    if (c == '+' && builder.length() == 0) {      builder.append(c);      continue;    }    if (Character.isDigit(c)) {      builder.append(c);      continue;    }    if (numericSugarMap.get(c) == null) {      return null;    }  }  return builder.toString();}  }
class C{  private static URI buildServiceUri(ServiceHost host,Class service,String path){  URI serviceUri;  String error;  if (path != null) {    serviceUri=UriUtils.buildUri(host,path);    error=String.format("Invalid path for starting service [%s]",path);  } else {    serviceUri=UriUtils.buildUri(host,service);    error=String.format("No SELF_LINK field in class %s",service.getCanonicalName());  }  if (serviceUri == null) {    throw new InvalidParameterException(error);  }  return serviceUri;}  }
class C{  public Map<String,Object> calculateStartDate(int daysToShip,GenericValue routing,Delegator delegator,LocalDispatcher dispatcher,GenericValue userLogin){  Map<String,Object> result=null;  Timestamp endDate=(Timestamp)requiredByDate.clone();  Timestamp startDate=endDate;  long timeToShip=daysToShip * 8 * 60* 60* 1000;  if (isBuilt) {    List<GenericValue> listRoutingTaskAssoc=null;    if (routing == null) {      try {        Map<String,Object> routingInMap=UtilMisc.<String,Object>toMap("productId",product.getString("productId"),"ignoreDefaultRouting","Y","userLogin",userLogin);        Map<String,Object> routingOutMap=dispatcher.runSync("getProductRouting",routingInMap);        routing=(GenericValue)routingOutMap.get("routing");        listRoutingTaskAssoc=UtilGenerics.checkList(routingOutMap.get("tasks"));        if (routing == null) {          BOMTree tree=null;          List<BOMNode> components=FastList.newInstance();          try {            tree=new BOMTree(product.getString("productId"),"MANUF_COMPONENT",requiredByDate,BOMTree.EXPLOSION_SINGLE_LEVEL,delegator,dispatcher,userLogin);            tree.setRootQuantity(quantity);            tree.print(components,true);            if (components.size() > 0)             components.remove(0);          } catch (          Exception exc) {            Debug.logWarning(exc.getMessage(),module);            tree=null;          }          if (tree != null && tree.getRoot() != null && tree.getRoot().getProduct() != null) {            routingInMap=UtilMisc.toMap("productId",tree.getRoot().getProduct().getString("productId"),"userLogin",userLogin);            routingOutMap=dispatcher.runSync("getProductRouting",routingInMap);            routing=(GenericValue)routingOutMap.get("routing");          }        }      } catch (      GenericServiceException gse) {        Debug.logWarning(gse.getMessage(),module);      }    }    if (routing != null) {      result=FastMap.newInstance();      if (listRoutingTaskAssoc == null) {        try {          Map<String,Object> routingTasksInMap=UtilMisc.<String,Object>toMap("workEffortId",routing.getString("workEffortId"),"userLogin",userLogin);          Map<String,Object> routingTasksOutMap=dispatcher.runSync("getRoutingTaskAssocs",routingTasksInMap);          listRoutingTaskAssoc=UtilGenerics.checkList(routingTasksOutMap.get("routingTaskAssocs"));        } catch (        GenericServiceException gse) {          Debug.logWarning(gse.getMessage(),module);        }      }    }    if (listRoutingTaskAssoc != null) {      for (int i=1; i <= listRoutingTaskAssoc.size(); i++) {        GenericValue routingTaskAssoc=listRoutingTaskAssoc.get(listRoutingTaskAssoc.size() - i);        if (EntityUtil.isValueActive(routingTaskAssoc,endDate)) {          GenericValue routingTask=null;          try {            routingTask=routingTaskAssoc.getRelatedOne("ToWorkEffort",true);          } catch (          GenericEntityException e) {            Debug.logError(e.getMessage(),module);          }          long totalTime=ProductionRun.getEstimatedTaskTime(routingTask,quantity,dispatcher);          if (i == listRoutingTaskAssoc.size()) {            totalTime+=timeToShip;          }          startDate=TechDataServices.addBackward(TechDataServices.getTechDataCalendar(routingTask),endDate,totalTime);          result.put(routingTask.getString("workEffortId"),startDate);          endDate=startDate;        }      }    } else {      Debug.logError("No routing found for product = " + product.getString("productId"),module);    }  } else {    try {      GenericValue techDataCalendar=product.getDelegator().findOne("TechDataCalendar",UtilMisc.toMap("calendarId","SUPPLIER"),true);      startDate=TechDataServices.addBackward(techDataCalendar,endDate,timeToShip);    } catch (    GenericEntityException e) {      Debug.logError(e,"Error : reading SUPPLIER TechDataCalendar: " + e.getMessage(),module);    }  }  requirementStartDate=startDate;  return result;}  }
class C{  protected void showHideTiles(String text,ImageTile[] selectedTiles2){  boolean isVisible=(SHOW_TILES_TITLE.equals(text));  for (int i=0; i < selectedTiles2.length; i++) {    selectedTiles2[i].setVisible(isVisible);  }  checkShowHideStatus();  repaint();  if (resultsList != null) {    resultsList.repaint();  }}  }
class C{  public boolean hasIndex(){  return getIndex() != null;}  }
class C{  public ProxyAsyncRequestHandler(String localResource,boolean proxyingEnabled){  super();  this.localResource=localResource;  this.proxyingEnabled=proxyingEnabled;}  }
class C{  public PrintGCStat(){  this.rmbean=getRuntimeMXBean();  this.mmbean=getMemoryMXBean();  this.pools=getMemoryPoolMXBeans();  this.gcmbeans=getGarbageCollectorMXBeans();}  }
class C{  public RelatedTo addRelatedTo(String uid){  RelatedTo prop=new RelatedTo(uid);  addRelatedTo(prop);  return prop;}  }
class C{  private boolean check(){  return isSorted() && rankCheck();}  }
class C{  public synchronized void removeActivityManagerListener(ActivityManagerListener l){  listeners.remove(l);}  }
class C{  public ResultFileMerger(){  super();}  }
class C{  public float value(){  return _map._values[_index];}  }
class C{  private void _serializeDate(Date date,StringBuilder sb){  _serializeDateTime(new DateTimeImpl(date),sb);}  }
class C{  public static boolean isEncodingCanonical(byte[] signature){  if (signature.length < 9 || signature.length > 73)   return false;  int hashType=signature[signature.length - 1] & ((int)(~Transaction.SIGHASH_ANYONECANPAY_VALUE));  if (hashType < (Transaction.SigHash.ALL.ordinal() + 1) || hashType > (Transaction.SigHash.SINGLE.ordinal() + 1))   return false;  if ((signature[0] & 0xff) != 0x30 || (signature[1] & 0xff) != signature.length - 3)   return false;  int lenR=signature[3] & 0xff;  if (5 + lenR >= signature.length || lenR == 0)   return false;  int lenS=signature[5 + lenR] & 0xff;  if (lenR + lenS + 7 != signature.length || lenS == 0)   return false;  if (signature[4 - 2] != 0x02 || (signature[4] & 0x80) == 0x80)   return false;  if (lenR > 1 && signature[4] == 0x00 && (signature[4 + 1] & 0x80) != 0x80)   return false;  if (signature[6 + lenR - 2] != 0x02 || (signature[6 + lenR] & 0x80) == 0x80)   return false;  if (lenS > 1 && signature[6 + lenR] == 0x00 && (signature[6 + lenR + 1] & 0x80) != 0x80)   return false;  return true;}  }
class C{  public final void resetDependencyCheckInterval(){  if (_lifecycle.isDestroyed())   return;  DependencyContainer dependencies=_dependencies;  if (dependencies == null)   return;  dependencies.resetDependencyCheckInterval();}  }
class C{  public static String replaceFirst(String original,String oldSubstring,String newSubstring){  return replace(original,oldSubstring,newSubstring,false);}  }
class C{  public static PrintWriter newPrintWriter(Path self,String charset) throws IOException {  return new GroovyPrintWriter(newWriter(self,charset));}  }
class C{  protected void parseDefineJPEG2(InStream in,int length) throws IOException {  int id=in.readUI16();  byte[] image=in.read(length - 2);  tagtypes.tagDefineBitsJPEG2(id,image);}  }
class C{  public void testListOfNumbers() throws Exception {  ObjectMapper m=new ObjectMapper();  m.enableDefaultTyping();  ListOfNumbers input=new ListOfNumbers(Long.valueOf(1L),Integer.valueOf(2),Double.valueOf(3.0));  String json=m.writeValueAsString(input);  assertEquals("{\"nums\":[\"java.util.ArrayList\",[[\"java.lang.Long\",1],2,3.0]]}",json);  ListOfNumbers output=m.readValue(json,ListOfNumbers.class);  assertNotNull(output.nums);  assertEquals(3,output.nums.size());  assertEquals(Long.valueOf(1L),output.nums.get(0));  assertEquals(Integer.valueOf(2),output.nums.get(1));  assertEquals(Double.valueOf(3.0),output.nums.get(2));}  }
class C{  public void testGetVersion22() throws Exception {  String xml=WEBAPP_22_HEADER + "</web-app>";  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  assertEquals(WebXmlVersion.V2_2,webXml.getVersion());}  }
class C{  public static String parseVdcIdFromURI(URI id){  return (id != null) ? parseVdcIdFromURI(id.toString()) : null;}  }
class C{  public Response createChatRoom(MUCRoomEntity chatRoom){  return restClient.post("chatrooms",chatRoom,new HashMap<String,String>());}  }
class C{  public MaxRowExpression add(Object object){  this.getChildren().add(new ConstantExpression(object));  return this;}  }
class C{  public double R2(){  return r2;}  }
class C{  public static String convertTenantUserMappingToString(TenantOrg tenant) throws Exception {  TenantOrgRestRep response=new TenantOrgRestRep();  if (tenant.getUserMappings() != null) {    for (    AbstractChangeTrackingSet<String> userMappingSet : tenant.getUserMappings().values()) {      for (      String existingMapping : userMappingSet) {        response.getUserMappings().add(BasePermissionsHelper.UserMapping.toParam(BasePermissionsHelper.UserMapping.fromString(existingMapping)));      }    }  }  StringWriter writer=new StringWriter();  JAXBContext jaxbContext=JAXBContext.newInstance(TenantOrgRestRep.class);  Marshaller jaxbMarshaller=jaxbContext.createMarshaller();  jaxbMarshaller.marshal(response,writer);  return writer.toString();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XYInterval)) {    return false;  }  XYInterval that=(XYInterval)obj;  if (this.xLow != that.xLow) {    return false;  }  if (this.xHigh != that.xHigh) {    return false;  }  if (this.y != that.y) {    return false;  }  if (this.yLow != that.yLow) {    return false;  }  if (this.yHigh != that.yHigh) {    return false;  }  return true;}  }
class C{  public void testUrlInValidWithUnderscore(){  setParameterToInitMockMethod("http://myurl.com/a/b_2/c/index.html",TestSolution.FAILED);  SeoRule01081 test=new SeoRule01081();  test.setProcessResultDataService(mockProcessResultDataService);  test.setTest(mockTest);  ProcessResult processResult=test.processImpl(mockSspHandler);  assertEquals(mockDefiniteResult,processResult);}  }
class C{  public void validateIfConnectionAvailable() throws IOException {  transport.doGet(combinePaths(updateEndpoint,"repository/properties/" + InstallManagerArtifact.NAME));}  }
class C{  void snapshot(final ISnapshotData tm){  if (m_diskAddr > 0)   tm.put(m_store.metaBit2Addr(m_diskAddr),commitData());}  }
class C{  public AdvancedStateMap.Builder withPropertySuffixExclusions(Function<UnmodifiablePropertiesMap,List<IProperty<?>>> exclusions){  this.suffixExclusions.add(exclusions);  return this;}  }
class C{  public EventValueReferenceExpressionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public FlickrIndexingThread(LireDemoFrame parent){  this.parent=parent;}  }
class C{  public void close(){  scanner.close();}  }
class C{  public boolean isAccessibleChildSelected(int i){  return isSelectedIndex(i);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.TMODULE__ANNOTATIONS:    return ((InternalEList<?>)getAnnotations()).basicRemove(otherEnd,msgs);case TypesPackage.TMODULE__TOP_LEVEL_TYPES:  return ((InternalEList<?>)getTopLevelTypes()).basicRemove(otherEnd,msgs);case TypesPackage.TMODULE__VARIABLES:return ((InternalEList<?>)getVariables()).basicRemove(otherEnd,msgs);case TypesPackage.TMODULE__INTERNAL_TYPES:return ((InternalEList<?>)getInternalTypes()).basicRemove(otherEnd,msgs);case TypesPackage.TMODULE__EXPOSED_INTERNAL_TYPES:return ((InternalEList<?>)getExposedInternalTypes()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void insert(final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  if (first == null) {    first=insns.first;    last=insns.last;  } else {    AbstractInsnNode elem=insns.last;    first.prev=elem;    elem.next=first;    first=insns.first;  }  cache=null;  insns.removeAll(false);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void deleteConnection(Connection connection){  new File(dataDir,connection.getId() + Constants.DATA_FILE_EXTENSION).delete();}  }
class C{  @Override public void installMarathonApps(){  waitFor();  List<AppConfig> apps=getConfig().getApps();  for (  AppConfig app : apps) {    try {      InputStream json=MesosCluster.getInputStream(app.getMarathonJson());      if (json != null) {        deployApp(IOUtils.toString(json,"UTF-8"));      } else {        throw new MinimesosException("Failed to find content of " + app.getMarathonJson());      }    } catch (    IOException ioe) {      throw new MinimesosException("Failed to load JSON from " + app.getMarathonJson(),ioe);    }  }}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  public static void playerError(Player player,Throwable t){  if (!Game.ignoreAllPlayerErrors) {    if (Game.ignoreSomePlayerErrors) {      if (Game.ignoreList.contains(player.getPlayerName())) {        return;      }    }    log(player.getPlayerName() + ":ERROR: " + "Exception during player call");    t.printStackTrace();  }}  }
class C{  @Override public void increment(int index,double val){  if (index > length - 1 || index < 0)   throw new IndexOutOfBoundsException("Can not access an index larger then the vector or a negative index");  if (val == 0)   return;  int location=Arrays.binarySearch(indexes,0,used,index);  if (location < 0)   insertValue(location,index,val); else {    values[location]+=val;    if (values[location] == 0.0)     removeNonZero(location);  }}  }
class C{  public V peek(K key){  Entry<K,V> e=find(key);  return e == null ? null : e.value;}  }
class C{  private void reinitialize(Class<PresenterType> opsType,RequiredViewOps view) throws java.lang.InstantiationException, IllegalAccessException {  mPresenterInstance=mStateMaintainer.get(opsType.getSimpleName());  if (mPresenterInstance == null) {    initialize(opsType,view);  } else {    mPresenterInstance.onConfigurationChanged(view);  }}  }
class C{  public Vertex createVerb(String text,Vertex meaning,Primitive tense,Network network,String[] conjugations){  Vertex word=createWord(text,meaning,false,network,Primitive.VERB,tense,null,null,conjugations);  return word;}  }
class C{  public static String randomWhitespace(Random r,int minLength,int maxLength){  final int end=TestUtil.nextInt(r,minLength,maxLength);  StringBuilder out=new StringBuilder();  for (int i=0; i < end; i++) {    int offset=TestUtil.nextInt(r,0,WHITESPACE_CHARACTERS.length - 1);    char c=WHITESPACE_CHARACTERS[offset];    assert Character.isWhitespace(c) : String.format(Locale.ENGLISH,"Not really whitespace? WHITESPACE_CHARACTERS[%d] is '\\u%04X'",offset,(int)c);    out.append(c);  }  return out.toString();}  }
class C{  public static boolean opaque(boolean value){  return value;}  }
class C{  @RequestMapping(value={"","/"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@RequestParam(value="page",defaultValue="0") int startPage,@RequestParam(value="size",defaultValue="10") int pageSize,Principal principal){  RestWrapper restWrapper=null;  try {    Integer counter=batchConsumpQueueDAO.totalRecordCount().intValue();    List<com.wipro.ats.bdre.md.dao.jpa.BatchConsumpQueue> jpaBcqList=batchConsumpQueueDAO.list(startPage,pageSize);    List<BatchConsumpQueue> batchConsumpQueues=new ArrayList<BatchConsumpQueue>();    for (    com.wipro.ats.bdre.md.dao.jpa.BatchConsumpQueue jpaBcq : jpaBcqList) {      BatchConsumpQueue batchConsumpQueue=new BatchConsumpQueue();      batchConsumpQueue.setQueueId(jpaBcq.getQueueId());      batchConsumpQueue.setStartTs(jpaBcq.getStartTs());      batchConsumpQueue.setEndTs(jpaBcq.getEndTs());      batchConsumpQueue.setInsertTs(jpaBcq.getInsertTs());      if (jpaBcq.getProcess() != null)       batchConsumpQueue.setProcessId(jpaBcq.getProcess().getProcessId());      batchConsumpQueue.setSourceProcessId(jpaBcq.getSourceProcessId());      batchConsumpQueue.setSourceBatchId(jpaBcq.getBatchBySourceBatchId().getBatchId());      if (jpaBcq.getBatchByTargetBatchId() != null) {        batchConsumpQueue.setTargetBatchId(jpaBcq.getBatchByTargetBatchId().getBatchId());      }      batchConsumpQueue.setBatchMarking(jpaBcq.getBatchMarking());      batchConsumpQueue.setBatchState(jpaBcq.getBatchStatus().getBatchStateId());      batchConsumpQueue.setCounter(counter);      LOGGER.info(batchConsumpQueue.getCounter());      batchConsumpQueues.add(batchConsumpQueue);    }    for (    BatchConsumpQueue bcq : batchConsumpQueues) {      if (bcq.getEndTs() != null) {        bcq.setTableEndTS(DateConverter.dateToString(bcq.getEndTs()));      }      if (bcq.getStartTs() != null) {        bcq.setTableStartTS(DateConverter.dateToString(bcq.getStartTs()));      }      bcq.setTableInsertTS(DateConverter.dateToString(bcq.getInsertTs()));    }    restWrapper=new RestWrapper(batchConsumpQueues,RestWrapper.OK);    LOGGER.info("All records listed from BatchConsumpQueue by User:" + principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public final CC height(String size){  ver.setSize(ConstraintParser.parseBoundSize(size,false,false));  return this;}  }
class C{  public boolean isLetterOrDigitAhead(){  int pos=currentPosition;  while (pos < maxPosition) {    if (Character.isLetterOrDigit(str.charAt(pos)))     return true;    pos++;  }  return false;}  }
class C{  public double valueDouble(int index) throws Exception {  if (m_type == ArrayType.STRING) {    throw new Exception("[Array] Array does not contain numbers!");  }  return Double.parseDouble(value(index));}  }
class C{  protected void split(Stack<DistanceNode> point_set,Stack<DistanceNode> far_set,int max_scale){  int new_index=0;  double fmax=dist_of_scale(max_scale);  for (int i=0; i < point_set.length; i++) {    DistanceNode n=point_set.element(i);    if (n.dist.element(n.dist.length - 1).doubleValue() <= fmax) {      point_set.set(new_index++,point_set.element(i));    } else {      far_set.push(point_set.element(i));    }  }  List<DistanceNode> l=new java.util.LinkedList<DistanceNode>();  for (int i=0; i < new_index; i++) {    l.add(point_set.element(i));  }  point_set.clear();  point_set.addAll(l);}  }
class C{  public void addBaseTimelineException(long domainValue){  Segment baseSegment=this.baseTimeline.getSegment(domainValue);  if (baseSegment.inIncludeSegments()) {    Segment segment=getSegment(baseSegment.getSegmentStart());    while (segment.getSegmentStart() <= baseSegment.getSegmentEnd()) {      if (segment.inIncludeSegments()) {        long fromDomainValue=segment.getSegmentStart();        long toDomainValue;        do {          toDomainValue=segment.getSegmentEnd();          segment.inc();        } while (segment.inIncludeSegments());        addException(fromDomainValue,toDomainValue);      } else {        segment.inc();      }    }  }}  }
class C{  protected void auditOp(URI tenantId,URI userId,OperationTypeEnum opType,boolean operationalStatus,String operationStage,Object... descparams){  _auditMgr.recordAuditLog(tenantId,userId,EVENT_SERVICE_TYPE,opType,System.currentTimeMillis(),operationalStatus ? AuditLogManager.AUDITLOG_SUCCESS : AuditLogManager.AUDITLOG_FAILURE,operationStage,descparams);}  }
class C{  public int read(byte[] b) throws IOException {  return read(b,0,b.length);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public static int[] unrulealt(int ra){  if (ra == -1)   return new int[]{-1,ATN.INVALID_ALT_NUMBER};  return new int[]{(ra >> 16) & 0xFFFF,ra & 0xFFFF};}  }
class C{  public static String formatTimestamp(Timestamp timestamp,String format){  if (null != timestamp) {    SimpleDateFormat sdf=new SimpleDateFormat(format);    return sdf.format(timestamp);  } else {    return "";  }}  }
class C{  @Override protected DeLiCluNode createNewLeafNode(){  return new DeLiCluNode(leafCapacity,true);}  }
class C{  public TLongHashSet(){}  }
class C{  public void newRound(Context context){  this.context=context;  this.log=Log.instance(context);  clearRoundState();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:49.340 -0400",hash_original_method="33F180031B438855CD8341D942A736A2",hash_generated_method="1822A5BEC7AF261DE838CCCCFB295CA9") public synchronized final void incrementSecondaryProgressBy(int diff){  setSecondaryProgress(mSecondaryProgress + diff);}  }
class C{  public boolean hasOperator(String operatorID){  return adjacencyList.containsKey(operatorID);}  }
class C{  @Override public void toXML(final StringBuilder builder,final ConfigVerification errors){  if (controller.isEnableSQLDatabaseOutput()) {    String database=new String(), user=new String(), password=new String(), host=new String();    host=sqlHostField.getText();    if (host.length() == 0) {      errors.add(new ConfigItem(ConfigItemTypes.ERROR,ConfigErrorKeys.MISSING_VALUE,"The name of the sqlproducer-host is missing."));    }    database=sqlDatabaseField.getText();    if (database.length() == 0) {      errors.add(new ConfigItem(ConfigItemTypes.ERROR,ConfigErrorKeys.MISSING_VALUE,"The name of the sqlproducer-database is missing."));    }    user=sqlUserField.getText();    if (database.length() == 0) {      errors.add(new ConfigItem(ConfigItemTypes.ERROR,ConfigErrorKeys.MISSING_VALUE,"The name of the sqlproducer-user is missing."));    }    password=sqlPasswordField.getText();    if (password.length() == 0) {      errors.add(new ConfigItem(ConfigItemTypes.ERROR,ConfigErrorKeys.MISSING_VALUE,"The password of the sqlproducer-user is missing."));    }    boolean zipComp=controller.isZipCompressionEnabled();    builder.append("\t<output>\r\n");    builder.append("\t\t<OUTPUT_MODE>" + OutputType.DATABASE + "</OUTPUT_MODE>\r\n");    builder.append("\t\t\t<sql>\r\n");    builder.append("\t\t\t\t<host>" + host + "</host>\r\n");    builder.append("\t\t\t\t<database>" + database + "</database>\r\n");    builder.append("\t\t\t\t<user>" + user + "</user>\r\n");    builder.append("\t\t\t\t<password>" + password + "</password>\r\n");    builder.append("\t\t\t</sql>\r\n");    builder.append("\t\t<MODE_ZIP_COMPRESSION_ENABLED>" + zipComp + "</MODE_ZIP_COMPRESSION_ENABLED>\r\n");    builder.append("\t</output>\r\n");  }}  }
class C{  static <T extends Comparable>GeneralRange<T> from(Range<T> range){  @Nullable T lowerEndpoint=range.hasLowerBound() ? range.lowerEndpoint() : null;  BoundType lowerBoundType=range.hasLowerBound() ? range.lowerBoundType() : OPEN;  @Nullable T upperEndpoint=range.hasUpperBound() ? range.upperEndpoint() : null;  BoundType upperBoundType=range.hasUpperBound() ? range.upperBoundType() : OPEN;  return new GeneralRange<T>(Ordering.natural(),range.hasLowerBound(),lowerEndpoint,lowerBoundType,range.hasUpperBound(),upperEndpoint,upperBoundType);}  }
class C{  public PaymentPanelBasic(JPaymentNotifier notifier){  m_notifier=notifier;  initComponents();}  }
class C{  @SuppressWarnings("unchecked") public static <F>FeatureVectorAdapter<F> featureVectorAdapter(FeatureVector<F> prototype){  return (FeatureVectorAdapter<F>)FEATUREVECTORADAPTER;}  }
class C{  private void onRecord(boolean start){  if (start) {    onPlay(STOP_PLAYING);    mPlayPause.setImageResource(R.drawable.ic_play);    startRecordingAsync();    startAnimate();  } else {    if (!mIsRecording) {      recordingAsync.cancel(true);    }    stopRecording();    stopAnimating();    try {      long size=0;      File forSize=new File(mFilePath);      if (forSize.exists()) {        size=forSize.length();        String text=getString(R.string.OK) + ", " + Tools.readableFileSize(size);        okButton.setText(text);      }    } catch (    Exception e) {      e.printStackTrace();    }    ;  }}  }
class C{  private Lifeline findCaller(boolean dropOneAnswer) throws SemanticError {  if (rootCaller == null) {    return null;  }  final String callerName=data.getCaller();  if (callerIsActor()) {    if (!diagram.isThreaded()) {      diagram.finish();    }    return rootCaller;  }  final LinkedList<Message> currentStack=diagram.currentStack();  if (currentStack == null) {    throw new SemanticError(provider,"Thread " + callerThread + " has died");  }  if (callerThread == 0 && currentStack.isEmpty() && diagram.firstCaller() == null) {    diagram.setFirstCaller(rootCaller);    rootCaller.setActive(true);    return rootCaller;  }  int occured=0;  while (!currentStack.isEmpty()) {    final Message theAnswer=currentStack.getLast();    if (dropOneAnswer) {      if (theAnswer.isSynchronous() && theAnswer.getCallee().getName().equals(data.getCaller())) {        diagram.sendAnswer(theAnswer,true);        return theAnswer.getCallee();      } else {        throw new SemanticError(provider,data.getCaller() + " cannot receive an answer here.");      }    }    if (theAnswer.getCaller().getName().equals(data.getCaller())) {      if (occured == data.getLevel()) {        return theAnswer.getCaller();      }      occured++;    }    currentStack.removeLast();    if (requireReturn) {      throw new SemanticError(provider,"Explicit answer required.");    }    diagram.sendAnswer(theAnswer);  }  if (diagram.firstCaller() != null && diagram.firstCaller().getName().equals(callerName)) {    if (occured == data.getLevel()) {      return diagram.firstCaller();    }    occured++;  }  throw objectNotFound(occured);}  }
class C{  public void flush(){  if (closed)   throw Exceptions.alreadyClosed();  tx().flush();}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement elem){  if (m_selectPattern != null) {    error(XSLTErrorResources.ER_CANT_HAVE_CONTENT_AND_SELECT,new Object[]{"xsl:" + this.getNodeName()});    return null;  }  return super.appendChild(elem);}  }
class C{  public GoogleBaseAttribute(String name,GoogleBaseAttributeType type,String textValue){  this(new GoogleBaseAttributeId(name,type),textValue);}  }
class C{  public static OutputStream makeCompressingOutputStream(OutputStream out){  try {    Class outz=Class.forName("com.jcraft.jzlib.JZlib");    int Z_BEST_SPEED=outz.getField("Z_BEST_SPEED").getInt(null);    int Z_SYNC_FLUSH=outz.getField("Z_SYNC_FLUSH").getInt(null);    Class outc=Class.forName("com.jcraft.jzlib.ZOutputStream");    Object outi=outc.getConstructor(new Class[]{OutputStream.class,Integer.TYPE}).newInstance(new Object[]{out,Integer.valueOf(Z_BEST_SPEED)});    outc.getMethod("setFlushMode",new Class[]{Integer.TYPE}).invoke(outi,new Object[]{new Integer(Z_SYNC_FLUSH)});    return (OutputStream)outi;  } catch (  Exception e) {    return null;  }}  }
class C{  static boolean luDecomposition(double[] matrix0,int[] row_perm){  double row_scale[]=new double[4];{    int i, j;    int ptr, rs;    double big, temp;    ptr=0;    rs=0;    i=4;    while (i-- != 0) {      big=0.0;      j=4;      while (j-- != 0) {        temp=matrix0[ptr++];        temp=Math.abs(temp);        if (temp > big) {          big=temp;        }      }      if (big == 0.0) {        return false;      }      row_scale[rs++]=1.0 / big;    }  }{    int j;    int mtx;    mtx=0;    for (j=0; j < 4; j++) {      int i, imax, k;      int target, p1, p2;      double sum, big, temp;      for (i=0; i < j; i++) {        target=mtx + (4 * i) + j;        sum=matrix0[target];        k=i;        p1=mtx + (4 * i);        p2=mtx + j;        while (k-- != 0) {          sum-=matrix0[p1] * matrix0[p2];          p1++;          p2+=4;        }        matrix0[target]=sum;      }      big=0.0;      imax=-1;      for (i=j; i < 4; i++) {        target=mtx + (4 * i) + j;        sum=matrix0[target];        k=j;        p1=mtx + (4 * i);        p2=mtx + j;        while (k-- != 0) {          sum-=matrix0[p1] * matrix0[p2];          p1++;          p2+=4;        }        matrix0[target]=sum;        if ((temp=row_scale[i] * Math.abs(sum)) >= big) {          big=temp;          imax=i;        }      }      if (imax < 0) {        throw new RuntimeException("PROBLEM!!! Matrix4f");      }      if (j != imax) {        k=4;        p1=mtx + (4 * imax);        p2=mtx + (4 * j);        while (k-- != 0) {          temp=matrix0[p1];          matrix0[p1++]=matrix0[p2];          matrix0[p2++]=temp;        }        row_scale[imax]=row_scale[j];      }      row_perm[j]=imax;      if (matrix0[(mtx + (4 * j) + j)] == 0.0) {        return false;      }      if (j != (4 - 1)) {        temp=1.0 / (matrix0[(mtx + (4 * j) + j)]);        target=mtx + (4 * (j + 1)) + j;        i=3 - j;        while (i-- != 0) {          matrix0[target]*=temp;          target+=4;        }      }    }  }  return true;}  }
class C{  public InvalidHeaderValueException(){  super();}  }
class C{  private boolean dispatchDrawUsingBitmap(Canvas canvas){  Bitmap unmaskBitmap=tryObtainRenderUnmaskBitmap();  Bitmap maskBitmap=tryObtainRenderMaskBitmap();  if (unmaskBitmap == null || maskBitmap == null) {    return false;  }  drawUnmasked(new Canvas(unmaskBitmap));  canvas.drawBitmap(unmaskBitmap,0,0,mAlphaPaint);  drawMasked(new Canvas(maskBitmap));  canvas.drawBitmap(maskBitmap,0,0,null);  return true;}  }
class C{  public Count<Link> addCountingStation(Link link,String stationName){  Count<Link> c=counts.createAndAddCount(link.getId(),stationName);  return c;}  }
class C{  public boolean okToSend(){  return true;}  }
class C{  @SuppressWarnings("unchecked") public static <T>PromisesArray<T> of(Collection<T> collection){  final ArrayList<Promise<T>> res=new ArrayList<>();  for (  T t : collection) {    res.add(Promise.success(t));  }  final Promise[] promises=res.toArray(new Promise[res.size()]);  return new PromisesArray<>((PromiseFunc<Promise<T>[]>)null);}  }
class C{  private void findInsertRecommendation(final SRDFRecommendation rec,final VirtualArray firstVarray,final List<Recommendation> recommendations,final List<StoragePool> candidatePools,final StoragePool recommendedPool,final Map<VirtualArray,Set<StorageSystem>> varrayTargetDeviceMap,final Project project,final URI consistencyGroupUri){  StorageSystem sourceStorageSystem=_dbClient.queryObject(StorageSystem.class,recommendedPool.getStorageDevice());  int found=0;  for (  VirtualArray compareVarray : varrayTargetDeviceMap.keySet()) {    _log.info("Testing to see if varray: " + compareVarray.getLabel() + " contains storage system: "+ sourceStorageSystem.getNativeGuid());    for (    StorageSystem targetStorageSystem : varrayTargetDeviceMap.get(compareVarray)) {      _log.info("Detailed Testing to see if varray: " + compareVarray.getLabel() + " matches with: "+ targetStorageSystem.getNativeGuid());      if (!sourceStorageSystem.getId().equals(targetStorageSystem.getId()) && sourceStorageSystem.containsRemotelyConnectedTo(targetStorageSystem.getId())) {        _log.info("Found the storage system we're trying to use.");        URI raGroupID=findRAGroup(sourceStorageSystem,targetStorageSystem,rec.getVirtualArrayTargetMap().get(compareVarray.getId()).getCopyMode(),project,consistencyGroupUri);        if (raGroupID != null) {          found++;          rec.getVirtualArrayTargetMap().get(compareVarray.getId()).setSourceRAGroup(raGroupID);          break;        }        _log.info("Did not find a qualifying RA Group that connects the two storage arrays.  Do you have an RDF Group preconfigured?");      }    }  }  if (found == varrayTargetDeviceMap.keySet().size()) {    candidatePools.remove(recommendedPool);    recommendations.add(rec);    _log.info("Storage System " + sourceStorageSystem.getLabel() + " is found with connectivity to targets in all varrays required");  } else {    _log.error("No matching storage system was found in all target varrays requested with the correct RDF groups.");    throw APIException.badRequests.unableToFindSuitableStorageSystemsforSRDF(StringUtils.join(SRDFUtils.getQualifyingRDFGroupNames(project),","));  }}  }
class C{  @Deprecated public static <T>UnmodifiableIterator<T> unmodifiableIterator(UnmodifiableIterator<T> iterator){  return checkNotNull(iterator);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String cnt=getString(stack);  Sage.put("mmc/country",cnt);  Sage.putInt("mmc/country_code",TVTuningFrequencies.getCountryCode(cnt));  return cnt;}  }
class C{  public static String slurpURL(URL u) throws IOException {  String lineSeparator=System.getProperty("line.separator");  URLConnection uc=u.openConnection();  InputStream is=uc.getInputStream();  BufferedReader br=new BufferedReader(new InputStreamReader(is));  String temp;  StringBuffer buff=new StringBuffer(16000);  while ((temp=br.readLine()) != null) {    buff.append(temp);    buff.append(lineSeparator);  }  br.close();  return buff.toString();}  }
class C{  public boolean contains(IResource resource){  for (int i=0; i < resources.length; i++) {    IResource member=resources[i];    if (contains(member,resource)) {      return true;    }  }  return false;}  }
class C{  public String toURI(){  final StringBuffer buffer=new StringBuffer(50);  buffer.append(protocol.getScheme());  buffer.append("://");  buffer.append(hostname);  if (port != protocol.getDefaultPort()) {    buffer.append(':');    buffer.append(port);  }  return buffer.toString();}  }
class C{  public static boolean hasFuture(Channel channel){  return CHANNELS.containsValue(channel);}  }
class C{  @Override public boolean transactAgreedDeal(ItemParserResult res,final EventRaiser npc,final Player player){  int amount=res.getAmount();  if (getMaximalAmount(player) < amount) {    npc.say("Hey! I'm over here! You'd better not be trying to trick me...");    return false;  } else {    for (    final Map.Entry<String,Integer> entry : getRequiredResourcesPerItem().entrySet()) {      final int amountToDrop=amount * entry.getValue();      player.drop(entry.getKey(),amountToDrop);    }    final long timeNow=new Date().getTime();    player.setQuest(mithrilcloak.getQuestSlot(),"makingthread;" + amount + ";"+ getProductName()+ ";"+ timeNow);    npc.say("It's unorthodox, but I will " + getProductionActivity() + " "+ amount+ " "+ getProductName()+ " for you. Please be discreet and come back in "+ TimeUtil.approxTimeUntil(REQUIRED_MINUTES_THREAD * amount * MathHelper.SECONDS_IN_ONE_MINUTE)+ ".");    return true;  }}  }
class C{  public void testSetterConflict() throws Exception {  try {    new ObjectMapper().readValue("{ }",ConflictBean.class);  } catch (  Exception e) {    verifyException(e,"Conflicting setter definitions");  }}  }
class C{  public AlphaComposite derive(float alpha){  return (this.extraAlpha == alpha) ? this : getInstance(this.rule,alpha);}  }
class C{  @Override public ScoringFunction createNewScoringFunction(Person person){  final CharyparNagelScoringParameters parameters=params.getScoringParameters(person);  SumScoringFunction sumScoringFunction=new SumScoringFunction();  sumScoringFunction.addScoringFunction(new CharyparNagelActivityScoring(parameters));  sumScoringFunction.addScoringFunction(new CharyparNagelLegScoring(parameters,this.network));  sumScoringFunction.addScoringFunction(new CharyparNagelMoneyScoring(parameters));  sumScoringFunction.addScoringFunction(new CharyparNagelAgentStuckScoring(parameters));  return sumScoringFunction;}  }
class C{  public void toggleTurnout(){  if (getTurnout() != null) {    if (getTurnout().getKnownState() == jmri.Turnout.CLOSED) {      setState(jmri.Turnout.THROWN);    } else {      setState(jmri.Turnout.CLOSED);    }  } else {    log.debug("Turnout Icon not associated with a Turnout");  }}  }
class C{  private static String decodeFormFields(final String content,final Charset charset){  if (content == null) {    return null;  }  return urldecode(content,charset != null ? charset : Charset.forName(HTTP.UTF_8),true);}  }
class C{  public void backupJsonForUser(User user,StringBuilder result) throws IOException {  result.append("{\n");  result.append("\"entries\": [");  if (user != null) {    boolean first=true;    List<?> entries=getEntriesByUserId(user.getId());    for (    Object entryUncasted : entries) {      Entry entry=(Entry)entryUncasted;      if (entry.getType().equals(DbLogic.Constants.tableofcontents)) {        continue;      }      if (!first) {        result.append(",");      } else {        first=false;      }      result.append("\n{\n");      boolean addedAnyYet=false;      String parentId=entry.getParentId();      if (parentId != null && !parentId.equals(user.getTableOfContentsId())) {        addedAnyYet=JsonBuilder.addPropertyToJsonString(result,entry.getParentId(),addedAnyYet,DbLogic.Constants.parentId);        addedAnyYet=JsonBuilder.addPropertyToJsonString(result,entry.getNextSiblingId(),addedAnyYet,DbLogic.Constants.nextSiblingId);      }      addedAnyYet=JsonBuilder.addPropertyToJsonString(result,entry.getQuotation(),addedAnyYet,DbLogic.Constants.quotation);      addedAnyYet=JsonBuilder.addPropertyToJsonString(result,entry.getNoteOrTitle(),addedAnyYet,DbLogic.Constants.note);      addedAnyYet=JsonBuilder.addPropertyToJsonString(result,entry.getModTime(),addedAnyYet,DbLogic.Constants.modTime);      addedAnyYet=JsonBuilder.addPropertyToJsonString(result,entry.getIsPublic(),addedAnyYet,DbLogic.Constants.isPublic);      addedAnyYet=JsonBuilder.addPropertyToJsonString(result,entry.getCreateTime(),addedAnyYet,DbLogic.Constants.createTime);      addedAnyYet=JsonBuilder.addPropertyToJsonString(result,entry.getId(),addedAnyYet,DbLogic.Constants.id);      addedAnyYet=JsonBuilder.addPropertyToJsonString(result,entry.getType(),addedAnyYet,DbLogic.Constants.type);      addedAnyYet=JsonBuilder.addPropertyToJsonString(result,entry.getSourceId(),addedAnyYet,DbLogic.Constants.sourceId);      addedAnyYet=JsonBuilder.addPropertyToJsonString(result,entry.getSourceUrl(),addedAnyYet,DbLogic.Constants.url);      addedAnyYet=JsonBuilder.addPropertyToJsonString(result,entry.getRootId(),addedAnyYet,DbLogic.Constants.rootId);      result.append("\n}");    }  }  result.append("\n]\n");  result.append("}\n");}  }
class C{  @GET @Path("/search") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public SearchResults search(){  Map<String,List<String>> parameters=uriInfo.getQueryParameters();  parameters.remove(RequestProcessingUtils.REQUESTING_COOKIES);  SearchedResRepList resRepList=null;  SearchResults result=new SearchResults();  String name=null;  if (parameters.containsKey(NAME)) {    name=parameters.get(NAME).get(0);    ArgValidator.checkFieldNotEmpty(name,NAME);    resRepList=new SearchedResRepList(getResourceType());    _dbClient.queryByConstraint(PrefixConstraint.Factory.getLabelPrefixConstraint(CustomConfig.class,name),resRepList);    String systemDefault=null;    if (parameters.containsKey(SYSTEM_DEFAULT)) {      systemDefault=parameters.get(SYSTEM_DEFAULT).get(0);      List<SearchResultResourceRep> searchResultList=new ArrayList<SearchResultResourceRep>();      Iterator<SearchResultResourceRep> it=resRepList.iterator();      while (it.hasNext()) {        SearchResultResourceRep rp=it.next();        URI id=rp.getId();        CustomConfig config=queryResource(id);        if (systemDefault.equals(config.getSystemDefault().toString())) {          RestLinkRep selfLink=new RestLinkRep("self",RestLinkFactory.newLink(getResourceType(),id));          SearchResultResourceRep searchResult=new SearchResultResourceRep(id,selfLink,config.getLabel());          searchResultList.add(searchResult);        }      }      result.setResource(searchResultList);    } else {      result.setResource(resRepList);    }  } else   if (parameters.containsKey(CONFIG_TYPE)) {    String configName=parameters.get(CONFIG_TYPE).get(0);    ArgValidator.checkFieldNotEmpty(configName,CONFIG_TYPE);    StringMap scopeMap=null;    if (parameters.containsKey(SCOPE)) {      String scope=parameters.get(SCOPE).get(0);      scopeMap=new StringMap();      if (scope.contains(".")) {        String[] scopeSplits=scope.split("\\.");        scopeMap.put(scopeSplits[0],scopeSplits[1]);      } else {        throw APIException.badRequests.invalidScopeFomart(scope);      }    }    String systemDefault=null;    if (parameters.containsKey(SYSTEM_DEFAULT)) {      systemDefault=parameters.get(SYSTEM_DEFAULT).get(0);    }    List<SearchResultResourceRep> searchResultList=new ArrayList<SearchResultResourceRep>();    List<CustomConfig> configList=getCustomConfig(configName,scopeMap);    for (    CustomConfig config : configList) {      if (config.getInactive()) {        continue;      }      if (systemDefault != null && !systemDefault.equals(config.getSystemDefault().toString())) {        continue;      }      RestLinkRep selfLink=new RestLinkRep("self",RestLinkFactory.newLink(getResourceType(),config.getId()));      SearchResultResourceRep searchResult=new SearchResultResourceRep(config.getId(),selfLink,config.getLabel());      searchResultList.add(searchResult);    }    result.setResource(searchResultList);  } else   if (parameters.containsKey(SYSTEM_DEFAULT)) {    List<SearchResultResourceRep> searchResultList=new ArrayList<SearchResultResourceRep>();    String systemDefault=parameters.get(SYSTEM_DEFAULT).get(0);    List<URI> ids=_dbClient.queryByType(CustomConfig.class,true);    Iterator<CustomConfig> iter=_dbClient.queryIterativeObjects(CustomConfig.class,ids);    while (iter.hasNext()) {      CustomConfig config=iter.next();      if (systemDefault.equals(config.getSystemDefault().toString())) {        RestLinkRep selfLink=new RestLinkRep("self",RestLinkFactory.newLink(getResourceType(),config.getId()));        SearchResultResourceRep searchResult=new SearchResultResourceRep(config.getId(),selfLink,config.getLabel());        searchResultList.add(searchResult);      }    }    result.setResource(searchResultList);  }  return result;}  }
class C{  public HashMapImpl(int initialCapacity){  int capacity;  for (capacity=16; capacity < 2 * initialCapacity; capacity*=2) {  }  _keys=(K[])new Object[capacity];  _values=(V[])new Object[capacity];  _mask=capacity - 1;  _capacity=initialCapacity;}  }
class C{  public int enumerate(Thread[] threads){  return enumerate(threads,true);}  }
class C{  public static long sizeOf(Class clazz){  long maxSize=headerSize(clazz);  while (clazz != Object.class) {    for (    Field f : clazz.getDeclaredFields()) {      if ((f.getModifiers() & Modifier.STATIC) == 0) {        long offset=unsafe.objectFieldOffset(f);        if (offset > maxSize) {          maxSize=offset + 1;        }      }    }    clazz=clazz.getSuperclass();  }  return roundUpTo8(maxSize);}  }
class C{  public void testDirectSockets_largeWrite_NotAccepted() throws IOException, InterruptedException {  final Random r=new Random();  final InetSocketAddress serverAddr=new InetSocketAddress(getPort(0));  final ServerSocket ss=new ServerSocket();  try {    final int receiveBufferSize=ss.getReceiveBufferSize();    final byte[] largeBuffer=new byte[receiveBufferSize * 10];    if (log.isInfoEnabled()) {      log.info("receiveBufferSize=" + receiveBufferSize + ", largeBufferSize="+ largeBuffer.length);    }    r.nextBytes(largeBuffer);    ss.bind(serverAddr);    final SocketChannel cs=SocketChannel.open();    try {      final boolean immediate=cs.connect(serverAddr);      if (!immediate) {        if (!cs.finishConnect()) {          fail("Did not connect.");        }      }      assertTimeout(10L,TimeUnit.SECONDS,new WriteBufferTask(cs,ByteBuffer.wrap(largeBuffer)));      accept(ss);    }  finally {      cs.close();    }  }  finally {    ss.close();  }}  }
class C{  @SuppressWarnings("unchecked") @Test public void clean(){  IBufferTreeComponent<DefaultData> component1=Mockito.mock(IBufferTreeComponent.class);  when(component1.clean()).thenReturn(true);  IBufferTreeComponent<DefaultData> component2=Mockito.mock(IBufferTreeComponent.class);  when(component2.clean()).thenReturn(false);  Map<Object,ITreeComponent<DefaultData,DefaultData>> componentMap=MapUtils.putAll(new HashMap<Object,IBufferTreeComponent<DefaultData>>(),new Object[]{"c1",component1,"c2",component2});  when(branch.getComponentMap()).thenReturn(componentMap);  boolean isClean=branch.clean();  assertThat(isClean,is(false));  assertThat(componentMap,not(hasValue((ITreeComponent<DefaultData,DefaultData>)component1)));  assertThat(componentMap,hasValue((ITreeComponent<DefaultData,DefaultData>)component2));  when(component2.clean()).thenReturn(true);  isClean=branch.clean();  assertThat(isClean,is(true));  assertThat(componentMap.values(),is(empty()));}  }
class C{  public static <V>boolean addListNotNullValue(List<V> sourceList,V value){  return (sourceList != null && value != null) ? sourceList.add(value) : false;}  }
class C{  public XmlTextParser(){  m_text=null;  m_pos=-1;}  }
class C{  public void init(Properties p) throws Exception {  ri.init(p);}  }
class C{  protected final void copyTextNode(final int nodeID,SerializationHandler handler) throws SAXException {  if (nodeID != DTM.NULL) {    int dataIndex=m_dataOrQName.elementAt(nodeID);    if (dataIndex >= 0) {      m_chars.sendSAXcharacters(handler,dataIndex >>> TEXT_LENGTH_BITS,dataIndex & TEXT_LENGTH_MAX);    } else {      m_chars.sendSAXcharacters(handler,m_data.elementAt(-dataIndex),m_data.elementAt(-dataIndex + 1));    }  }}  }
class C{  @SuppressWarnings("unchecked") @Override public boolean equals(Object that){  if (that == this)   return true;  if (that instanceof SipURI) {    final SipURI a=this;    final SipURI b=(SipURI)that;    if (a.isSecure() ^ b.isSecure())     return false;    if (a.getUser() == null ^ b.getUser() == null)     return false;    if (a.getUserPassword() == null ^ b.getUserPassword() == null)     return false;    if (a.getUser() != null && !RFC2396UrlDecoder.decode(a.getUser()).equals(RFC2396UrlDecoder.decode(b.getUser())))     return false;    if (a.getUserPassword() != null && !RFC2396UrlDecoder.decode(a.getUserPassword()).equals(RFC2396UrlDecoder.decode(b.getUserPassword())))     return false;    if (a.getHost() == null ^ b.getHost() == null)     return false;    if (a.getHost() != null && !a.getHost().equalsIgnoreCase(b.getHost()))     return false;    if (a.getPort() != b.getPort())     return false;    for (Iterator i=a.getParameterNames(); i.hasNext(); ) {      String pname=(String)i.next();      String p1=a.getParameter(pname);      String p2=b.getParameter(pname);      if (p1 != null && p2 != null && !RFC2396UrlDecoder.decode(p1).equalsIgnoreCase(RFC2396UrlDecoder.decode(p2)))       return false;    }    if (a.getTransportParam() == null ^ b.getTransportParam() == null)     return false;    if (a.getUserParam() == null ^ b.getUserParam() == null)     return false;    if (a.getTTLParam() == -1 ^ b.getTTLParam() == -1)     return false;    if (a.getMethodParam() == null ^ b.getMethodParam() == null)     return false;    if (a.getMAddrParam() == null ^ b.getMAddrParam() == null)     return false;    if (a.getHeaderNames().hasNext() && !b.getHeaderNames().hasNext())     return false;    if (!a.getHeaderNames().hasNext() && b.getHeaderNames().hasNext())     return false;    if (a.getHeaderNames().hasNext() && b.getHeaderNames().hasNext()) {      HeaderFactory headerFactory=null;      try {        headerFactory=SipFactory.getInstance().createHeaderFactory();      } catch (      PeerUnavailableException e) {        Debug.logError("Cannot get the header factory to parse the header of the sip uris to compare",e);        return false;      }      for (Iterator i=a.getHeaderNames(); i.hasNext(); ) {        String hname=(String)i.next();        String h1=a.getHeader(hname);        String h2=b.getHeader(hname);        if (h1 == null && h2 != null)         return false;        if (h2 == null && h1 != null)         return false;        if (h1 == null && h2 == null)         continue;        try {          Header header1=headerFactory.createHeader(hname,RFC2396UrlDecoder.decode(h1));          Header header2=headerFactory.createHeader(hname,RFC2396UrlDecoder.decode(h2));          if (!header1.equals(header2))           return false;        } catch (        ParseException e) {          Debug.logError("Cannot parse one of the header of the sip uris to compare " + a + " "+ b,e);          return false;        }      }    }    return true;  }  return false;}  }
class C{  public static boolean validateReads(CFlags flags,boolean sdf){  if (sdf && !validateSDF(flags,READS_FLAG)) {    return false;  }  return validateStartEnd(flags,CommonFlags.START_READ_ID,CommonFlags.END_READ_ID);}  }
class C{  private void visitImplicitFirstFrame(){  int frameIndex=startFrame(0,descriptor.length() + 1,0);  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & ACC_CONSTRUCTOR) == 0) {      frame[frameIndex++]=Frame.OBJECT | cw.addType(cw.thisName);    } else {      frame[frameIndex++]=6;    }  }  int i=1;  loop:   while (true) {    int j=i;switch (descriptor.charAt(i++)) {case 'Z':case 'C':case 'B':case 'S':case 'I':      frame[frameIndex++]=1;    break;case 'F':  frame[frameIndex++]=2;break;case 'J':frame[frameIndex++]=4;break;case 'D':frame[frameIndex++]=3;break;case '[':while (descriptor.charAt(i) == '[') {++i;}if (descriptor.charAt(i) == 'L') {++i;while (descriptor.charAt(i) != ';') {++i;}}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j,++i));break;case 'L':while (descriptor.charAt(i) != ';') {++i;}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j + 1,i++));break;default :break loop;}}frame[1]=frameIndex - 3;endFrame();}  }
class C{  public void start(){  oplet.start();}  }
class C{  @Override public boolean determineExportGroupCreateSteps(Workflow workflow,String previousStep,BlockStorageDevice device,StorageSystem storage,ExportGroup exportGroup,List<URI> initiatorURIs,Map<URI,Integer> volumeMap,boolean zoningStepNeeded,String token) throws Exception {  Map<String,URI> portNameToInitiatorURI=new HashMap<String,URI>();  List<URI> volumeURIs=new ArrayList<URI>();  volumeURIs.addAll(volumeMap.keySet());  Map<URI,URI> hostToExistingExportMaskMap=new HashMap<URI,URI>();  List<URI> hostURIs=new ArrayList<URI>();  List<String> portNames=new ArrayList<String>();  processInitiators(exportGroup,initiatorURIs,portNames,portNameToInitiatorURI,hostURIs);  queryHostInitiatorsAndAddToList(portNames,portNameToInitiatorURI,initiatorURIs,hostURIs);  updateVolumeHLU(storage,initiatorURIs,volumeMap);  Map<String,Set<URI>> matchingExportMaskURIs=device.findExportMasks(storage,portNames,false);  filterExportMaskForGroup(exportGroup,matchingExportMaskURIs);  if (matchingExportMaskURIs.isEmpty()) {    String attachGroupSnapshot=checkForSnapshotsToCopyToTarget(workflow,storage,previousStep,volumeMap,null);    _log.info(String.format("No existing mask found w/ initiators { %s }",Joiner.on(",").join(portNames)));    createNewExportMaskWorkflowForInitiators(initiatorURIs,exportGroup,workflow,volumeMap,storage,token,attachGroupSnapshot);  } else {    _log.info(String.format("Mask(s) found w/ initiators {%s}. " + "MatchingExportMaskURIs {%s}, portNameToInitiators {%s}",Joiner.on(",").join(portNames),Joiner.on(",").join(matchingExportMaskURIs.keySet()),Joiner.on(",").join(portNameToInitiatorURI.entrySet())));    List<URI> initiatorURIsCopy=new ArrayList<URI>();    initiatorURIsCopy.addAll(initiatorURIs);    Map<URI,Map<URI,Integer>> existingMasksToUpdateWithNewVolumes=new HashMap<URI,Map<URI,Integer>>();    Map<URI,Set<Initiator>> existingMasksToUpdateWithNewInitiators=new HashMap<URI,Set<Initiator>>();    for (    Map.Entry<String,Set<URI>> entry : matchingExportMaskURIs.entrySet()) {      URI initiatorURI=portNameToInitiatorURI.get(entry.getKey());      Initiator initiator=_dbClient.queryObject(Initiator.class,initiatorURI);      initiatorURIsCopy.remove(initiatorURI);      List<URI> exportMaskURIs=new ArrayList<URI>();      exportMaskURIs.addAll(entry.getValue());      List<ExportMask> masks=_dbClient.queryObject(ExportMask.class,exportMaskURIs);      _log.info(String.format("initiator %s masks {%s}",initiator.getInitiatorPort(),Joiner.on(',').join(exportMaskURIs)));      for (      ExportMask mask : masks) {        _log.info(String.format("mask %s has initiator %s",mask.getMaskName(),initiator.getInitiatorPort()));        if (mask.getMaskName() != null && mask.getMaskName().toUpperCase().contains(ExportUtils.NO_VIPR)) {          _log.info(String.format("ExportMask %s disqualified because the name contains %s (in upper or lower case) to exclude it",mask.getMaskName(),ExportUtils.NO_VIPR));          continue;        }        if (mask.getCreatedBySystem()) {          _log.info(String.format("initiator %s is in persisted mask %s",initiator.getInitiatorPort(),mask.getMaskName()));          if (mask.getInitiators() != null) {            for (            String existingMaskInitiatorStr : mask.getInitiators()) {              Iterator<URI> initiatorIter=initiatorURIsCopy.iterator();              while (initiatorIter.hasNext()) {                Initiator initiatorCopy=_dbClient.queryObject(Initiator.class,initiatorIter.next());                if (initiatorCopy != null && initiatorCopy.getId() != null && !mask.hasInitiator(initiatorCopy.getId().toString())) {                  Initiator existingMaskInitiator=_dbClient.queryObject(Initiator.class,URI.create(existingMaskInitiatorStr));                  if (existingMaskInitiator != null && initiatorCopy.getHost() != null && initiatorCopy.getHost().equals(existingMaskInitiator.getHost())) {                    Set<Initiator> existingMaskInitiators=existingMasksToUpdateWithNewInitiators.get(mask.getId());                    if (existingMaskInitiators == null) {                      existingMaskInitiators=new HashSet<Initiator>();                      existingMasksToUpdateWithNewInitiators.put(mask.getId(),existingMaskInitiators);                    }                    existingMaskInitiators.add(initiatorCopy);                    initiatorIter.remove();                  }                }              }            }          }        } else {          mask.addInitiator(initiator);          if (!NullColumnValueGetter.isNullURI(initiator.getHost())) {            hostToExistingExportMaskMap.put(initiator.getHost(),mask.getId());          }        }        for (        URI boURI : volumeURIs) {          BlockObject bo=Volume.fetchExportMaskBlockObject(_dbClient,boURI);          if (bo != null && !mask.hasExistingVolume(bo) && !mask.hasUserAddedVolume(bo.getWWN())) {            _log.info(String.format("volume %s is not in mask %s",bo.getWWN(),mask.getMaskName()));            Map<URI,Integer> newVolumes=existingMasksToUpdateWithNewVolumes.get(mask.getId());            if (newVolumes == null) {              newVolumes=new HashMap<URI,Integer>();              existingMasksToUpdateWithNewVolumes.put(mask.getId(),newVolumes);            }            Integer requestedHLU=volumeMap.get(boURI);            StringMap existingVolumesInMask=mask.getExistingVolumes();            if (existingVolumesInMask != null && requestedHLU.intValue() != ExportGroup.LUN_UNASSIGNED && !ExportGroup.LUN_UNASSIGNED_DECIMAL_STR.equals(requestedHLU.toString()) && existingVolumesInMask.containsValue(requestedHLU.toString())) {              ExportOrchestrationTask completer=new ExportOrchestrationTask(exportGroup.getId(),token);              ServiceError serviceError=DeviceControllerException.errors.exportHasExistingVolumeWithRequestedHLU(boURI.toString(),requestedHLU.toString());              completer.error(_dbClient,serviceError);              return false;            }            newVolumes.put(bo.getId(),requestedHLU);            mask.addToUserCreatedVolumes(bo);          }        }        Map<URI,Integer> volumeMapForExistingMask=existingMasksToUpdateWithNewVolumes.get(mask.getId());        if (volumeMapForExistingMask != null && !volumeMapForExistingMask.isEmpty()) {          mask.addVolumes(volumeMapForExistingMask);        }        Set<Initiator> initiatorSetForExistingMask=existingMasksToUpdateWithNewInitiators.get(mask.getId());        if (initiatorSetForExistingMask != null && initiatorSetForExistingMask.isEmpty()) {          mask.addInitiators(initiatorSetForExistingMask);        }        updateZoningMap(exportGroup,mask);        _dbClient.updateAndReindexObject(mask);        exportGroup.addExportMask(mask.getId());        _dbClient.updateAndReindexObject(exportGroup);      }    }    Map<URI,List<URI>> hostInitiatorMap=new HashMap<URI,List<URI>>();    if (!initiatorURIsCopy.isEmpty()) {      for (      URI newExportMaskInitiator : initiatorURIsCopy) {        Initiator initiator=_dbClient.queryObject(Initiator.class,newExportMaskInitiator);        List<URI> initiatorSet=hostInitiatorMap.get(initiator.getHost());        if (initiatorSet == null) {          initiatorSet=new ArrayList<URI>();          hostInitiatorMap.put(initiator.getHost(),initiatorSet);        }        initiatorSet.add(initiator.getId());        _log.info(String.format("host = %s, " + "initiators to add: %d, " + "existingMasksToUpdateWithNewVolumes.size = %d",initiator.getHost(),hostInitiatorMap.get(initiator.getHost()).size(),existingMasksToUpdateWithNewVolumes.size()));      }    }    _log.info(String.format("existingMasksToUpdateWithNewVolumes.size = %d",existingMasksToUpdateWithNewVolumes.size()));    String attachGroupSnapshot=checkForSnapshotsToCopyToTarget(workflow,storage,previousStep,volumeMap,existingMasksToUpdateWithNewVolumes.values());    if (!hostInitiatorMap.isEmpty()) {      for (      URI hostID : hostInitiatorMap.keySet()) {        if (hostToExistingExportMaskMap.containsKey(hostID)) {          URI existingExportMaskURI=hostToExistingExportMaskMap.get(hostID);          Set<Initiator> toAddInits=new HashSet<Initiator>();          List<URI> hostInitaitorList=hostInitiatorMap.get(hostID);          for (          URI initURI : hostInitaitorList) {            Initiator initiator=_dbClient.queryObject(Initiator.class,initURI);            if (!initiator.getInactive()) {              toAddInits.add(initiator);            }          }          _log.info(String.format("Need to add new initiators to existing mask %s, %s",existingExportMaskURI.toString(),Joiner.on(',').join(hostInitaitorList)));          existingMasksToUpdateWithNewInitiators.put(existingExportMaskURI,toAddInits);          continue;        }        _log.info(String.format("new export masks %s",Joiner.on(",").join(hostInitiatorMap.get(hostID))));        generateExportMaskCreateWorkflow(workflow,attachGroupSnapshot,storage,exportGroup,hostInitiatorMap.get(hostID),volumeMap,token);      }    }    Map<URI,String> stepMap=new HashMap<URI,String>();    for (    Map.Entry<URI,Map<URI,Integer>> entry : existingMasksToUpdateWithNewVolumes.entrySet()) {      ExportMask mask=_dbClient.queryObject(ExportMask.class,entry.getKey());      Map<URI,Integer> volumesToAdd=entry.getValue();      _log.info(String.format("adding these volumes %s to mask %s",Joiner.on(",").join(volumesToAdd.keySet()),mask.getMaskName()));      stepMap.put(entry.getKey(),generateExportMaskAddVolumesWorkflow(workflow,attachGroupSnapshot,storage,exportGroup,mask,volumesToAdd,null));    }    for (    Entry<URI,Set<Initiator>> entry : existingMasksToUpdateWithNewInitiators.entrySet()) {      ExportMask mask=_dbClient.queryObject(ExportMask.class,entry.getKey());      Set<Initiator> initiatorsToAdd=entry.getValue();      List<URI> initiatorsURIs=new ArrayList<URI>();      for (      Initiator initiator : initiatorsToAdd) {        initiatorsURIs.add(initiator.getId());      }      _log.info(String.format("adding these initiators %s to mask %s",Joiner.on(",").join(initiatorsURIs),mask.getMaskName()));      previousStep=stepMap.get(entry.getKey()) == null ? attachGroupSnapshot : stepMap.get(entry.getKey());      generateExportMaskAddInitiatorsWorkflow(workflow,previousStep,storage,exportGroup,mask,initiatorsURIs,null,token);    }  }  return true;}  }
class C{  @Override public synchronized boolean isValid(int timeout){  try {    debugCodeCall("isValid",timeout);    if (session == null || session.isClosed()) {      return false;    }    getTransactionIsolation();    return true;  } catch (  Exception e) {    logAndConvert(e);    return false;  }}  }
class C{  public static String guessExtensionFromMimeType(String mimeType){  if (mimeType == null || mimeType.isEmpty()) {    return null;  }  return mimeTypeToExtensionMap.get(mimeType);}  }
class C{  public void flattenTransform(){  if (get(TRANSFORM) != null) {    path.transform(get(TRANSFORM));    set(TRANSFORM,null);  }  invalidate();}  }
class C{  protected double[][][] embedSourceDestAndConditionalsForCondMI(double[] source,double[] destination,double[][] conditionals) throws Exception {  double[][] currentDestPastVectors=MatrixUtils.makeDelayEmbeddingVector(destination,k,k_tau,startTimeForFirstDestEmbedding,destination.length - startTimeForFirstDestEmbedding - 1);  double[][] currentDestNextVectors=MatrixUtils.makeDelayEmbeddingVector(destination,1,startTimeForFirstDestEmbedding + 1,destination.length - startTimeForFirstDestEmbedding - 1);  double[][] currentSourcePastVectors=MatrixUtils.makeDelayEmbeddingVector(source,l,l_tau,startTimeForFirstDestEmbedding + 1 - delay,source.length - startTimeForFirstDestEmbedding - 1);  double[][] currentCombinedConditionalVectors=new double[currentSourcePastVectors.length][k + dimOfConditionals];  MatrixUtils.arrayCopy(currentDestPastVectors,0,0,currentCombinedConditionalVectors,0,0,currentDestPastVectors.length,k);  int nextColumnToCopyInto=k;  for (int i=0; i < condEmbedDims.length; i++) {    double[][] currentThisConditonalVectors=MatrixUtils.makeDelayEmbeddingVector(conditionals,i,condEmbedDims[i],this.cond_taus[i],startTimeForFirstDestEmbedding + 1 - condDelays[i],conditionals.length - startTimeForFirstDestEmbedding - 1);    MatrixUtils.arrayCopy(currentThisConditonalVectors,0,0,currentCombinedConditionalVectors,0,nextColumnToCopyInto,currentThisConditonalVectors.length,condEmbedDims[i]);    nextColumnToCopyInto+=condEmbedDims[i];  }  double[][][] returnSet=new double[3][][];  returnSet[0]=currentSourcePastVectors;  returnSet[1]=currentDestNextVectors;  returnSet[2]=currentCombinedConditionalVectors;  return returnSet;}  }
class C{  public NoWhitespaceValidator(@NonNull final CharSequence errorMessage){  super(errorMessage);}  }
class C{  public void createInspectors(Bag locationWrappers,final GUIState simulation){  Bag inspectors=new Bag();  Bag names=new Bag();  for (int i=0; i < locationWrappers.size(); i++) {    LocationWrapper wrapper=(LocationWrapper)(locationWrappers.get(i));    inspectors.add(wrapper.fieldPortrayal.getInspector(wrapper,simulation));    names.add(wrapper.fieldPortrayal.getName(wrapper));  }  simulation.controller.setInspectors(inspectors,names);}  }
class C{  private int parseExternalGameId(StringMultiMap p){  String sExternalId=p.getString(PARAM_GAME_EXTERNAL_ID);  int ExternalGameId=0;  if (sExternalId != null) {    ExternalGameId=Integer.parseInt(sExternalId);  }  return ExternalGameId;}  }
class C{  public byte[] evaluateChallenge(byte[] challenge) throws SaslException {  byte[] response=null;switch (m_state) {case STATE_INITIAL:    if (challenge.length != 0) {      m_state=STATE_INVALID_SERVER_RESPONSE;      throw new SaslException("Unexpected non-zero length response.");    } else     m_state=STATE_VALID_SERVER_RESPONSE;  break;case STATE_INVALID_SERVER_RESPONSE:throw new SaslException("Authentication sequence is complete");case STATE_DISPOSED:throw new SaslException("Client has been disposed");default :throw new SaslException("Unknown client state.");}return response;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case FunctionblockPackage.CONFIGURATION__PROPERTIES:    getProperties().clear();  return;}super.eUnset(featureID);}  }
class C{  public static final String unescapeXml(final String input){  return UNESCAPE_XML.translate(input);}  }
class C{  public static void compressIdealState(IdealState is){  is.getRecord().setBooleanField("enableCompression",true);}  }
class C{  public int createPoisson(final double mean){  int x=0;  double t=0.0;  while (true) {    t-=Math.log(next()) / mean;    if (t > 1.0) {      break;    }    ++x;  }  return x;}  }
class C{  public <A,B,C,D>TheoryBuilder4<A,B,C,D> forAll(final Source<A> as,final Source<B> bs,final Source<C> cs,final Source<D> ds){  return new TheoryBuilder4<>(state,as,bs,cs,ds,null);}  }
class C{  public InternalTenantServiceClient(){}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public static int bytesToIntLittleEndian(final byte[] vals,final int from){  return (vals[from + 3] << 24) + ((vals[from + 2] & 0xFF) << 16) + ((vals[from + 1] & 0xFF) << 8)+ (vals[from] & 0xFF);}  }
class C{  private static void packSmsChar(byte[] packedChars,int bitOffset,int value){  int byteOffset=bitOffset / 8;  int shift=bitOffset % 8;  packedChars[++byteOffset]|=value << shift;  if (shift > 1) {    packedChars[++byteOffset]=(byte)(value >> (8 - shift));  }}  }
class C{  private BlockNode traverse(IRegion r,BlockNode block,RegionStack stack){  BlockNode next=null;  boolean processed=false;  List<LoopInfo> loops=block.getAll(AType.LOOP);  int loopCount=loops.size();  if (loopCount != 0 && block.contains(AFlag.LOOP_START)) {    if (loopCount == 1) {      next=processLoop(r,loops.get(0),stack);      processed=true;    } else {      for (      LoopInfo loop : loops) {        if (loop.getStart() == block) {          next=processLoop(r,loop,stack);          processed=true;          break;        }      }    }  }  if (!processed && block.getInstructions().size() == 1) {    InsnNode insn=block.getInstructions().get(0);switch (insn.getType()) {case IF:      next=processIf(r,block,(IfNode)insn,stack);    processed=true;  break;case SWITCH:next=processSwitch(r,block,(SwitchNode)insn,stack);processed=true;break;case MONITOR_ENTER:next=processMonitorEnter(r,block,insn,stack);processed=true;break;default :break;}}if (!processed) {r.getSubBlocks().add(block);next=getNextBlock(block);}if (next != null && !stack.containsExit(block) && !stack.containsExit(next)) {return next;}return null;}  }
class C{  public static boolean isSolo(String cc){  String first4digs=cc.substring(0,4);  String first2digs=cc.substring(0,2);  if (((cc.length() == 16) || (cc.length() == 18) || (cc.length() == 19)) && (first2digs.equals("63") || first4digs.equals("6767")))   return isCreditCard(cc);  return false;}  }
class C{  @Override public OptionGUI createOptionGUI(){  LOG.trace(getName() + ": " + "GUI Requested");  return new OptionPayloadGUI_NB(this);}  }
class C{  public static Settings init(){  return init(DEFAULT_TAG);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static String nullSafeToString(Object[] array){  if (array == null) {    return NULL_STRING;  }  int length=array.length;  if (length == 0) {    return EMPTY_ARRAY;  }  StringBuffer buffer=new StringBuffer();  for (int i=0; i < length; i++) {    if (i == 0) {      buffer.append(ARRAY_START);    } else {      buffer.append(ARRAY_ELEMENT_SEPARATOR);    }    buffer.append(String.valueOf(array[i]));  }  buffer.append(ARRAY_END);  return buffer.toString();}  }
class C{  public void clear(){  this.size=0;}  }
class C{  public void addSessionListener(SessionListener l){  if (!(this.sessionListeners.contains(l))) {    this.sessionListeners.add(l);  }}  }
class C{  public Builder options(@NonNull Options options){  if (null == options) {    throw new IllegalArgumentException("Options must not be null.");  }  if (null != this.options) {    throw new IllegalStateException("Options already set.");  }  this.options=options;  return this;}  }
class C{  public Settings copy(){  return new Settings(getFullMapping());}  }
class C{  public void paintRect(Graphics g,JComponent c,int x,int y,int w,int h){  getColorBackground(c).paintRect(g,c,x,y,w,h);}  }
class C{  public void clearParameters() throws SQLException {  checkValidity();  if (fieldValues == null)   return;  Arrays.fill(isParamSet,false);  for (  FieldValue fieldValue : fieldValues) {    fieldValue.reset();  }}  }
class C{  public void image(PImage image,float a,float b,float c,float d,int u1,int v1,int u2,int v2){  if (image.width == -1 || image.height == -1)   return;  if (imageMode == CORNER) {    if (c < 0) {      a+=c;      c=-c;    }    if (d < 0) {      b+=d;      d=-d;    }    imageImpl(image,a,b,a + c,b + d,u1,v1,u2,v2);  } else   if (imageMode == CORNERS) {    if (c < a) {      float temp=a;      a=c;      c=temp;    }    if (d < b) {      float temp=b;      b=d;      d=temp;    }    imageImpl(image,a,b,c,d,u1,v1,u2,v2);  } else   if (imageMode == CENTER) {    if (c < 0)     c=-c;    if (d < 0)     d=-d;    float x1=a - c / 2;    float y1=b - d / 2;    imageImpl(image,x1,y1,x1 + c,y1 + d,u1,v1,u2,v2);  }}  }
class C{  protected void elementalToSemantic(){  if (!isSparse) {    logger.warning("Tried to transform an elemental vector which is not in fact elemental." + "This may be a programming error.");    return;  }  votingRecord=new ArrayList<FixedBitSet>();  votingRecord.add((FixedBitSet)bitSet.clone());  totalNumberOfVotes.set(1);  tempSet=new FixedBitSet(dimension);  isSparse=false;}  }
class C{  static int readUnsignedShort(final byte[] b,final int index){  return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF);}  }
class C{  private void checkConnectionPool(String configuration,DataSourceFixture dataSourceFixture) throws Exception {  if (dataSourceFixture.url != null) {    XMLAssert.assertXpathEvaluatesTo(dataSourceFixture.url,pathToConnectionPool + "/@URL",configuration);  }  XMLAssert.assertXpathEvaluatesTo(dataSourceFixture.driverClass,pathToConnectionPool + "/@DriverName",configuration);  Assert.assertTrue(configuration.contains("user=" + dataSourceFixture.username));  XMLAssert.assertXpathEvaluatesTo(dataSourceFixture.password,pathToConnectionPool + "/@Password",configuration);  XMLAssert.assertXpathEvaluatesTo("server",pathToConnectionPool + "/@Targets",configuration);  XMLAssert.assertXpathEvaluatesTo(serverName,pathToConnectionPool + "/@Targets",configuration);  DataSource ds=dataSourceFixture.buildDataSource();  ds.getConnectionProperties().setProperty("user",ds.getUsername());  XMLAssert.assertXpathEvaluatesTo(new DataSourceConverter().getConnectionPropertiesAsASemicolonDelimitedString(ds),pathToConnectionPool + "/@Properties",configuration);}  }
class C{  public static double acosh1p(final double value){  if (!(value > 0.0)) {    if (ANTI_JIT_OPTIM_CRASH_ON_NAN) {      return value < 0.0 ? Double.NaN : value;    } else {      return value == 0.0 ? value : Double.NaN;    }  }  double result;  if (value < ASINH_ACOSH_SQRT_ELISION_THRESHOLD - 1) {    result=log1p(value + sqrt(value * (2 + value)));  } else {    result=LOG_2 + log(1 + value);  }  return result;}  }
class C{  private String cleanOutput(StringBuilder buf){  StringBuilder result=new StringBuilder();  String[] lines=getLines(buf);  for (int i=1; i < lines.length - 1; i++) {    if (i > 1) {      result.append('\n');    }    result.append(lines[i]);  }  return result.toString();}  }
class C{  protected static String quoteMap(Map<String,Class<?>> map){  if (map == null) {    return "null";  }  if (map.size() == 0) {    return "new Map()";  }  return "new Map() /* " + map.toString() + " */";}  }
class C{  public StackFrameDump dumpStackFrame() throws DebuggerStateException, DebuggerException {  StackFrameDump dump=DtoFactory.getInstance().createDto(StackFrameDump.class);  boolean existInformation=true;  JdiLocalVariable[] variables=new JdiLocalVariable[0];  try {    variables=getCurrentFrame().getLocalVariables();  } catch (  DebuggerAbsentInformationException e) {    existInformation=false;  }  for (  JdiField f : getCurrentFrame().getFields()) {    dump.getFields().add((Field)DtoFactory.getInstance().createDto(Field.class).withIsFinal(f.isFinal()).withIsStatic(f.isStatic()).withIsTransient(f.isTransient()).withIsVolatile(f.isVolatile()).withName(f.getName()).withExistInformation(existInformation).withValue(f.getValue().getAsString()).withType(f.getTypeName()).withVariablePath(DtoFactory.getInstance().createDto(VariablePath.class).withPath(Arrays.asList(f.isStatic() ? "static" : "this",f.getName()))).withPrimitive(f.isPrimitive()));  }  for (  JdiLocalVariable var : variables) {    dump.getLocalVariables().add(DtoFactory.getInstance().createDto(Variable.class).withName(var.getName()).withExistInformation(existInformation).withValue(var.getValue().getAsString()).withType(var.getTypeName()).withVariablePath(DtoFactory.getInstance().createDto(VariablePath.class).withPath(Collections.singletonList(var.getName()))).withPrimitive(var.isPrimitive()));  }  return dump;}  }
class C{  public static void renameBack(final Window parent,final INaviView view,final String originalName){  try {    view.getConfiguration().setName(originalName);  } catch (  final CouldntSaveDataException e) {    CUtilityFunctions.logException(e);    final String innerMessage="E00063: " + "View name could not be changed";    final String innerDescription=CUtilityFunctions.createDescription(String.format("The view name of view '%s' could not be changed.",view.getName()),new String[]{"There was a problem with the database connection."},new String[]{"The view was not updated and the new view name is lost."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,e);  }}  }
class C{  @Override protected boolean isLoggedInAndPlatformOperator(){  return super.isLoggedInAndPlatformOperator();}  }
class C{  @Override public boolean isFactoryForType(Object object){  if (object == modelPackage) {    return true;  }  if (object instanceof EObject) {    return ((EObject)object).eClass().getEPackage() == modelPackage;  }  return false;}  }
class C{  protected byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  mAddButton=(ImageButton)findViewById(R.id.btn_add);  mEditTextReveal=(EditText)findViewById(R.id.location);  mEditTextReveal.setVisibility(View.INVISIBLE);  mIsEditTextVisible=false;}  }
class C{  public boolean isInRing(){  return edgeRing != null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Nullable protected Peer selectDownloadPeer(List<Peer> peers){  if (peers.isEmpty())   return null;  int mostCommonChainHeight=getMostCommonChainHeight(peers);  List<Peer> candidates=new ArrayList<Peer>();  for (  Peer peer : peers) {    if (peer.getBestHeight() == mostCommonChainHeight)     candidates.add(peer);  }  int highestVersion=0, preferredVersion=0;  final int PREFERRED_VERSION=params.getProtocolVersionNum(NetworkParameters.ProtocolVersion.BLOOM_FILTER);  for (  Peer peer : candidates) {    highestVersion=Math.max(peer.getPeerVersionMessage().clientVersion,highestVersion);    preferredVersion=Math.min(highestVersion,PREFERRED_VERSION);  }  ArrayList<Peer> candidates2=new ArrayList<Peer>(candidates.size());  for (  Peer peer : candidates) {    if (peer.getPeerVersionMessage().clientVersion >= preferredVersion) {      candidates2.add(peer);    }  }  int index=(int)(Math.random() * candidates2.size());  return candidates2.get(index);}  }
class C{  @Override public ServiceExceptionUnavailable rethrow(String msg){  return new ServiceExceptionUnavailable(msg,this);}  }
class C{  public boolean isInteger(){  return (m_clustertype == SubspaceCluster.INTEGER);}  }
class C{  public JsonArray(JsonArray array){  this(array,false);}  }
class C{  public Object eval(String script,Bindings bindings) throws ScriptException {  ScriptContext ctxt=getScriptContext(bindings);  return eval(script,ctxt);}  }
class C{  String internalsprintf(long s) throws IllegalArgumentException {  String s2="";switch (conversionCharacter) {case 'd':case 'i':    if (optionalh)     s2=printDFormat((short)s); else     if (optionall)     s2=printDFormat(s); else     s2=printDFormat((int)s);  break;case 'x':case 'X':if (optionalh) s2=printXFormat((short)s); else if (optionall) s2=printXFormat(s); else s2=printXFormat((int)s);break;case 'o':if (optionalh) s2=printOFormat((short)s); else if (optionall) s2=printOFormat(s); else s2=printOFormat((int)s);break;case 'c':case 'C':s2=printCFormat((char)s);break;default :throw new IllegalArgumentException("Cannot format a long with a format using a " + conversionCharacter + " conversion character.");}return s2;}  }
class C{  public IMessage build() throws RateLimitException, DiscordException, MissingPermissionsException {  if (null == content || null == channel) {    throw new RuntimeException("You need content and a channel to send a message!");  } else {    return channel.sendMessage(content,tts);  }}  }
class C{  public ByteVector putByte(final int b){  int length=this.length;  if (length + 1 > data.length) {    enlarge(1);  }  data[length++]=(byte)b;  this.length=length;  return this;}  }
class C{  public void testFailoverAutoReconnect() throws Exception {  Set<String> downedHosts=new HashSet<String>();  downedHosts.add(HOST_1);  downedHosts.add(HOST_2);  Properties props=new Properties();  props.setProperty("retriesAllDown","2");  props.setProperty("maxReconnects","2");  props.setProperty("initialTimeout","1");  for (  boolean foAutoReconnect : new boolean[]{true,false}) {    props.setProperty("autoReconnect",Boolean.toString(foAutoReconnect));    Connection testConn=getUnreliableFailoverConnection(new String[]{HOST_1,HOST_2,HOST_3},props,downedHosts);    Statement testStmt1=null, testStmt2=null;    try {      assertEquals(HOST_3_OK,UnreliableSocketFactory.getHostFromLastConnection());      testStmt1=testConn.createStatement();      testStmt2=testConn.createStatement();      assertSingleValueQuery(testStmt1,"SELECT 1",1L);      assertSingleValueQuery(testStmt2,"SELECT 2",2L);      UnreliableSocketFactory.dontDownHost(HOST_2);      UnreliableSocketFactory.downHost(HOST_3);      assertEquals(HOST_3_OK,UnreliableSocketFactory.getHostFromLastConnection());      assertSQLException(testStmt1,"SELECT 1",COMM_LINK_ERR_PATTERN);      assertEquals(HOST_2_OK,UnreliableSocketFactory.getHostFromLastConnection());      UnreliableSocketFactory.dontDownHost(HOST_1);      if (!foAutoReconnect) {        assertSQLException(testStmt1,"SELECT 1",STMT_CLOSED_ERR_PATTERN);        assertSQLException(testStmt2,"SELECT 2",STMT_CLOSED_ERR_PATTERN);        testStmt1=testConn.createStatement();        testStmt2=testConn.createStatement();      }      assertSingleValueQuery(testStmt1,"SELECT 1",1L);      assertSingleValueQuery(testStmt2,"SELECT 2",2L);      UnreliableSocketFactory.downHost(HOST_2);      assertEquals(HOST_2_OK,UnreliableSocketFactory.getHostFromLastConnection());      assertSQLException(testStmt2,"SELECT 2",COMM_LINK_ERR_PATTERN);      assertEquals(HOST_1_OK,UnreliableSocketFactory.getHostFromLastConnection());      UnreliableSocketFactory.dontDownHost(HOST_3);      if (!foAutoReconnect) {        assertSQLException(testStmt1,"SELECT 1",STMT_CLOSED_ERR_PATTERN);        assertSQLException(testStmt2,"SELECT 2",STMT_CLOSED_ERR_PATTERN);        testStmt1=testConn.createStatement();        testStmt2=testConn.createStatement();      }      assertSingleValueQuery(testStmt1,"SELECT 1",1L);      assertSingleValueQuery(testStmt2,"SELECT 2",2L);      UnreliableSocketFactory.downHost(HOST_1);      assertEquals(HOST_1_OK,UnreliableSocketFactory.getHostFromLastConnection());      assertSQLException(testStmt1,"SELECT 1",COMM_LINK_ERR_PATTERN);      assertEquals(HOST_3_OK,UnreliableSocketFactory.getHostFromLastConnection());      if (!foAutoReconnect) {        assertSQLException(testStmt1,"SELECT 1",STMT_CLOSED_ERR_PATTERN);        assertSQLException(testStmt2,"SELECT 2",STMT_CLOSED_ERR_PATTERN);        testStmt1=testConn.createStatement();        testStmt2=testConn.createStatement();      }      assertSingleValueQuery(testStmt1,"SELECT 1",1L);      assertSingleValueQuery(testStmt2,"SELECT 2",2L);      if (foAutoReconnect) {        assertConnectionsHistory(HOST_1_FAIL,HOST_1_FAIL,HOST_2_FAIL,HOST_2_FAIL,HOST_3_OK,HOST_2_OK,HOST_3_FAIL,HOST_3_FAIL,HOST_2_FAIL,HOST_2_FAIL,HOST_3_FAIL,HOST_3_FAIL,HOST_1_OK,HOST_2_FAIL,HOST_2_FAIL,HOST_3_OK);      } else {        assertConnectionsHistory(HOST_1_FAIL,HOST_2_FAIL,HOST_3_OK,HOST_2_OK,HOST_3_FAIL,HOST_2_FAIL,HOST_3_FAIL,HOST_1_OK,HOST_2_FAIL,HOST_3_OK);      }    }  finally {      if (testStmt1 != null) {        testStmt1.close();      }      if (testStmt2 != null) {        testStmt2.close();      }      if (testConn != null) {        testConn.close();      }    }  }}  }
class C{  @Deprecated public EmailListFeed retrievePageOfEmailLists(String startEmailListName) throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Retrieving one page of email lists" + (startEmailListName != null ? " starting at " + startEmailListName : "") + ".");  URL retrieveUrl=new URL(domainUrlBase + "emailList/" + SERVICE_VERSION+ "/");  AppsForYourDomainQuery query=new AppsForYourDomainQuery(retrieveUrl);  query.setStartEmailListName(startEmailListName);  return emailListService.query(query,EmailListFeed.class);}  }
class C{  protected void resetOptions(){  m_minStdDev=1e-6;  m_max_iterations=100;  m_Seed=m_SeedDefault;  m_num_clusters=-1;  m_initialNumClusters=-1;  m_verbose=false;  m_minLogLikelihoodImprovementIterating=1e-6;  m_minLogLikelihoodImprovementCV=1e-6;  m_executionSlots=1;  m_cvFolds=10;}  }
class C{  @DSSink({DSSinkKind.VOIP}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.391 -0500",hash_original_method="3AD47119D9E3B66FC61FF1D5407F3E89",hash_generated_method="D86A3365F924BC5296466B4C2E2757C9") public void putDialog(SIPDialog dialog){  String dialogId=dialog.getDialogId();  if (dialogTable.containsKey(dialogId)) {    if (stackLogger.isLoggingEnabled()) {      stackLogger.logDebug("putDialog: dialog already exists" + dialogId + " in table = "+ dialogTable.get(dialogId));    }    return;  }  if (stackLogger.isLoggingEnabled()) {    stackLogger.logDebug("putDialog dialogId=" + dialogId + " dialog = "+ dialog);  }  dialog.setStack(this);  if (stackLogger.isLoggingEnabled())   stackLogger.logStackTrace();  dialogTable.put(dialogId,dialog);}  }
class C{  public UndoAction(Application app,@Nullable View view){  super(app,view);  labels.configureAction(this,ID);}  }
class C{  public float inPhaseAbsolute(){  return Math.abs(mLeft);}  }
class C{  private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {  ois.defaultReadObject();  initialize();  bcsPreDeserializationHook(ois);  if (this == getBeanContextPeer()) {    readChildren(ois);  }  deserialize(ois,bcmListeners);}  }
class C{  private void addFragment(final int index,final StringBuilder contentss,final float x1,final float x2,final float y1,final float y2,final boolean keepFontTokens,final Fragment fragment,final boolean isWordlist){  StringBuilder current_text=contentss;  final String str=current_text.toString();  final int text_len=fragment.getTextLength();  final String currentColorTag=fragment.getColorTag();  if (isWordlist) {    if (str.contains("&#")) {      current_text=Strip.stripAmpHash(current_text);    }    if ((isXMLExtraction) && ((str.contains("&lt;")) || (str.contains("&gt;")))) {      current_text=Strip.stripXMLArrows(current_text,true);    } else     if ((!isXMLExtraction) && ((str.indexOf('<') != -1) || (str.indexOf('>') != -1))) {      current_text=Strip.stripArrows(current_text);    }  }  if (getFirstChar(current_text) != -1) {    if (!keepFontTokens) {      current_text=Strip.stripXML(current_text,isXMLExtraction);    } else     if (isXMLExtraction) {      if (pdf_data.isColorExtracted() && (!current_text.toString().endsWith(GenericColorSpace.ce))) {        if (!current_text.toString().endsWith(Fonts.fe)) {          current_text=current_text.append(Fonts.fe);        }        current_text=current_text.append(GenericColorSpace.ce);      } else       if ((!pdf_data.isColorExtracted()) && (!current_text.toString().endsWith(Fonts.fe))) {        current_text=current_text.append(Fonts.fe);      }    }    int count=f_x1.length;    if (nextSlot < count) {      f_x1[nextSlot]=x1;      f_colorTag[nextSlot]=currentColorTag;      f_x2[nextSlot]=x2;      f_y1[nextSlot]=y1;      f_y2[nextSlot]=y2;      fontSize[nextSlot]=pdf_data.f_end_font_size[index];      writingMode[nextSlot]=pdf_data.f_writingMode[index];      textLength[nextSlot]=text_len;      spaceWidth[nextSlot]=pdf_data.space_width[index];      content[nextSlot]=current_text;      nextSlot++;    } else {      count+=increment;      final float[] t_x1=new float[count];      final String[] t_colorTag=new String[count];      final float[] t_x2=new float[count];      final float[] t_y1=new float[count];      final float[] t_y2=new float[count];      final float[] t_spaceWidth=new float[count];      final StringBuilder[] t_content=new StringBuilder[count];      final int[] t_font_size=new int[count];      final int[] t_text_len=new int[count];      final int[] t_writingMode=new int[count];      final boolean[] t_isUsed=new boolean[count];      final boolean[] t_hadSpace=new boolean[count];      for (int i=0; i < count - increment; i++) {        t_x1[i]=f_x1[i];        t_colorTag[i]=f_colorTag[i];        t_x2[i]=f_x2[i];        t_y1[i]=f_y1[i];        t_y2[i]=f_y2[i];        t_hadSpace[i]=hadSpace[i];        t_spaceWidth[i]=spaceWidth[i];        t_content[i]=content[i];        t_font_size[i]=fontSize[i];        t_writingMode[i]=writingMode[i];        t_text_len[i]=textLength[i];        t_isUsed[i]=isUsed[i];      }      f_x1=t_x1;      f_colorTag=t_colorTag;      hadSpace=t_hadSpace;      f_x2=t_x2;      f_y1=t_y1;      f_y2=t_y2;      isUsed=t_isUsed;      fontSize=t_font_size;      writingMode=t_writingMode;      textLength=t_text_len;      spaceWidth=t_spaceWidth;      content=t_content;      f_x1[nextSlot]=x1;      f_colorTag[nextSlot]=currentColorTag;      f_x2[nextSlot]=x2;      f_y1[nextSlot]=y1;      f_y2[nextSlot]=y2;      fontSize[nextSlot]=pdf_data.f_end_font_size[index];      writingMode[nextSlot]=pdf_data.f_writingMode[index];      t_text_len[nextSlot]=text_len;      content[nextSlot]=current_text;      spaceWidth[nextSlot]=pdf_data.space_width[index];      nextSlot++;    }  }}  }
class C{  public DynamicRows(){  list=new ArrayList();}  }
class C{  public CUserViewsTable(final JTree projectTree,final IViewContainer originContainer,final IViewContainer contextContainer){  super(projectTree,new CUserViewsModel(originContainer),contextContainer,new CUserViewsTableHelp());  m_contextContainer=contextContainer;  setDefaultRenderer(Object.class,new CViewsTableRenderer(this,originContainer));}  }
class C{  public void testNextInt(){  int f=ThreadLocalRandom.current().nextInt();  int i=0;  while (i < NCALLS && ThreadLocalRandom.current().nextInt() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  public void insert(EventPoint ep){  Iterator<EventPoint> it=events.iterator();  while (it.hasNext()) {    EventPoint exist=it.next();    if (exist.equals(ep)) {      exist.addUpperLineSegments(ep.upperEndpointSegments());      return;    }  }  events.add(ep);}  }
class C{  public Message authResponse(ParameterList requestParams,String userSelId,String userSelClaimed,boolean authenticatedAndApproved,String opEndpoint){  return authResponse(requestParams,userSelId,userSelClaimed,authenticatedAndApproved,opEndpoint,true);}  }
class C{  public T caseStatusSource(StatusSource object){  return null;}  }
class C{  public Path download(String path,String accessToken,Path destinationDir,String mediaType) throws IOException {  return download(path,"GET",accessToken,mediaType,destinationDir,false);}  }
class C{  public Tree simulateTree(TaxonList[] taxa,DemographicFunction[] demoFunctions,ColourChangeMatrix colourChangeMatrix){  SimpleNode[][] nodes=new SimpleNode[taxa.length][];  for (int i=0; i < taxa.length; i++) {    nodes[i]=new SimpleNode[taxa[i].getTaxonCount()];    for (int j=0; j < taxa[i].getTaxonCount(); j++) {      nodes[i][j]=new SimpleNode();      nodes[i][j].setTaxon(taxa[i].getTaxon(j));    }  }  dr.evolution.util.Date mostRecent=null;  boolean usingDates=false;  for (int i=0; i < taxa.length; i++) {    for (int j=0; j < taxa[i].getTaxonCount(); j++) {      if (TaxonList.Utils.hasAttribute(taxa[i],j,dr.evolution.util.Date.DATE)) {        usingDates=true;        dr.evolution.util.Date date=(dr.evolution.util.Date)taxa[i].getTaxonAttribute(j,dr.evolution.util.Date.DATE);        if ((date != null) && (mostRecent == null || date.after(mostRecent))) {          mostRecent=date;        }      } else {        nodes[i][j].setHeight(0.0);      }    }  }  if (usingDates) {    assert mostRecent != null;    TimeScale timeScale=new TimeScale(mostRecent.getUnits(),true,mostRecent.getAbsoluteTimeValue());    for (int i=0; i < taxa.length; i++) {      for (int j=0; j < taxa[i].getTaxonCount(); j++) {        dr.evolution.util.Date date=(dr.evolution.util.Date)taxa[i].getTaxonAttribute(j,dr.evolution.util.Date.DATE);        if (date == null) {          throw new IllegalArgumentException("Taxon, " + taxa[i].getTaxonId(j) + ", is missing its date");        }        nodes[i][j].setHeight(timeScale.convertTime(date.getTimeValue(),date));      }      if (demoFunctions[0].getUnits() != mostRecent.getUnits()) {      }    }  }  return new SimpleTree(simulateCoalescent(nodes,demoFunctions,colourChangeMatrix));}  }
class C{  public Name toName(Names names){  return names.fromUtf(elems,0,length);}  }
class C{  public void angularObjectAdd(AngularObject object){  sendEvent(new RemoteInterpreterEvent(RemoteInterpreterEventType.ANGULAR_OBJECT_ADD,gson.toJson(object)));}  }
class C{  public long min(){  if (size() == 0) {    throw new IllegalStateException("cannot find minimum of an empty list");  }  long min=_data[_pos - 1];  for (int i=_pos - 1; i-- > 0; ) {    min=Math.min(min,_data[_pos]);  }  return min;}  }
class C{  public Instruction reconstructInstructions(){  if (cfg != null)   return cfg.head; else   return null;}  }
class C{  public void createGraph(int numvert){  nodes=new Vertex[numvert];  Vertex v=null;  for (int i=numvert - 1; i >= 0; i--) {    Vertex tmp=nodes[i]=new Vertex(v,numvert);    v=tmp;  }  addEdges(numvert);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4mfPackage.MODULE_FILTER__MODULE_FILTER_TYPE:    return getModuleFilterType();case N4mfPackage.MODULE_FILTER__MODULE_SPECIFIERS:  return getModuleSpecifiers();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean userCanDeleteGroupUser(int connectedUserId,int groupId,String entidad) throws Exception {  boolean can=false;  try {    can=userCanEditGroup(connectedUserId,groupId,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public void clear(){  final Segment<K,V>[] segments=this.segments;  for (int j=0; j < segments.length; ++j) {    Segment<K,V> s=segmentAt(segments,j);    if (s != null)     s.clear();  }}  }
class C{  public static Request createConnectRequest(TransportAddress peerAddress,Request request) throws IllegalArgumentException {  Request connectRequest=new Request();  connectRequest.setMessageType(Message.CONNECT_REQUEST);  XorPeerAddressAttribute xorPeerAddressAttribute=AttributeFactory.createXorPeerAddressAttribute(peerAddress,request.getTransactionID());  connectRequest.putAttribute(xorPeerAddressAttribute);  return connectRequest;}  }
class C{  private void encryptBlock(byte[] src,int srcIndex,byte[] dst,int dstIndex){  int x0=BytesTo32Bits(src,srcIndex) ^ gSubKeys[INPUT_WHITEN];  int x1=BytesTo32Bits(src,srcIndex + 4) ^ gSubKeys[INPUT_WHITEN + 1];  int x2=BytesTo32Bits(src,srcIndex + 8) ^ gSubKeys[INPUT_WHITEN + 2];  int x3=BytesTo32Bits(src,srcIndex + 12) ^ gSubKeys[INPUT_WHITEN + 3];  int k=ROUND_SUBKEYS;  int t0, t1;  for (int r=0; r < ROUNDS; r+=2) {    t0=Fe32_0(x0);    t1=Fe32_3(x1);    x2^=t0 + t1 + gSubKeys[k++];    x2=x2 >>> 1 | x2 << 31;    x3=(x3 << 1 | x3 >>> 31) ^ (t0 + 2 * t1 + gSubKeys[k++]);    t0=Fe32_0(x2);    t1=Fe32_3(x3);    x0^=t0 + t1 + gSubKeys[k++];    x0=x0 >>> 1 | x0 << 31;    x1=(x1 << 1 | x1 >>> 31) ^ (t0 + 2 * t1 + gSubKeys[k++]);  }  Bits32ToBytes(x2 ^ gSubKeys[OUTPUT_WHITEN],dst,dstIndex);  Bits32ToBytes(x3 ^ gSubKeys[OUTPUT_WHITEN + 1],dst,dstIndex + 4);  Bits32ToBytes(x0 ^ gSubKeys[OUTPUT_WHITEN + 2],dst,dstIndex + 8);  Bits32ToBytes(x1 ^ gSubKeys[OUTPUT_WHITEN + 3],dst,dstIndex + 12);}  }
class C{  public BasicLineParser(ProtocolVersion proto){  if (proto == null) {    proto=HttpVersion.HTTP_1_1;  }  this.protocol=proto;}  }
class C{  protected void processWindowEvent(WindowEvent e){  super.processWindowEvent(e);  if (e.getID() == WindowEvent.WINDOW_OPENED) {    this.toFront();    confirmPanel.getOKButton().requestFocusInWindow();  }}  }
class C{  private void releaseResources(WindowsWatchKey key){  try {    CancelIo(key.handle());    GetOverlappedResult(key.handle(),key.overlappedAddress());  } catch (  WindowsException expected) {  }  CloseHandle(key.handle());  closeAttachedEvent(key.overlappedAddress());  key.buffer().cleaner().clean();}  }
class C{  public boolean isHistoryEvent(){  return historyEvent;}  }
class C{  public WireLogInputStream(final InputStream in,final Wire wire){  super(in);  this.in=in;  this.wire=wire;}  }
class C{  public static void serializeChar(char val,byte[] buffer,MutableInt offset){  int offsetInt=offset.intValue();  buffer[0 + offsetInt]=(byte)((val >> 8) & 0xFF);  buffer[1 + offsetInt]=(byte)(val & 0xFF);  offset.add(Type.CHAR.getByteSize());}  }
class C{  public boolean writeStatistics(){  logger.info("Writing statistics");  if (backend == null)   return false;  outputVariables.put(RuntimeVariable.Total_Time.name(),new OutputVariable<Object>(RuntimeVariable.Total_Time.name(),System.currentTimeMillis() - startTime));  if (bestIndividual.isEmpty()) {    logger.error("No statistics has been saved because EvoSuite failed to generate any test case");    return false;  }  TestSuiteChromosome individual=bestIndividual.values().iterator().next();  Map<String,OutputVariable<?>> map=getOutputVariables(individual);  if (map == null) {    try {      Thread.sleep(1000);    } catch (    InterruptedException e) {    }    boolean couldBeFine=MasterServices.getInstance().getMasterNode().getCurrentState().stream().anyMatch(null);    if (couldBeFine) {      int counter=0;      while (map == null && counter < 5) {        try {          Thread.sleep(1000);        } catch (        InterruptedException e) {        }        map=getOutputVariables(individual);        counter++;      }    }    if (map == null && Properties.IGNORE_MISSING_STATISTICS) {      map=getOutputVariables(individual,true);    }    if (map == null) {      logger.error("Not going to write down statistics data, as some are missing");      return false;    }  }  boolean valid=RuntimeVariable.validateRuntimeVariables(map);  if (!valid) {    logger.error("Not going to write down statistics data, as some data is invalid");    return false;  } else {    backend.writeData(individual,map);    return true;  }}  }
class C{  public static void dumpCursor(ICursor cursor,int maxColumnWidth){  StringBuilder builder=new StringBuilder("\n");  dumpCursor(cursor,maxColumnWidth,builder);  Logger.d(Logger.LOG_TAG,builder.toString());}  }
class C{  private V doPut(K kkey,V value,boolean onlyIfAbsent){  Comparable<? super K> key=comparable(kkey);  for (; ; ) {    Node<K,V> b=findPredecessor(key);    Node<K,V> n=b.next;    for (; ; ) {      if (n != null) {        Node<K,V> f=n.next;        if (n != b.next)         break;        Object v=n.value;        if (v == null) {          n.helpDelete(b,f);          break;        }        if (v == n || b.value == null)         break;        int c=key.compareTo(n.key);        if (c > 0) {          b=n;          n=f;          continue;        }        if (c == 0) {          if (onlyIfAbsent || n.casValue(v,value))           return (V)v; else           break;        }      }      Node<K,V> z=new Node<K,V>(kkey,value,n);      if (!b.casNext(n,z))       break;      int level=randomLevel();      if (level > 0)       insertIndex(z,level);      return null;    }  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isOpen(){  return is_open;}  }
class C{  public SwingPropertyChangeSupport(Object sourceBean){  this(sourceBean,false);}  }
class C{  int inputLength(){  return inputLength;}  }
class C{  @Override public Iterator<Expression> iterator(){  return expressions.iterator();}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  Enumeration<AclEntry> entries=entries();  while (entries.hasMoreElements()) {    AclEntry entry=entries.nextElement();    sb.append(entry.toString().trim());    sb.append("\n");  }  return sb.toString();}  }
class C{  @Override public void messageReceived(NextFilter nextFilter,IoSession session,Object message) throws Exception {  LOGGER.debug("Processing a MESSAGE_RECEIVED for session {}",session.getId());  if (!(message instanceof IoBuffer)) {    nextFilter.messageReceived(session,message);    return;  }  IoBuffer in=(IoBuffer)message;  ProtocolDecoder decoder=factory.getDecoder(session);  ProtocolDecoderOutput decoderOut=getDecoderOut(session,nextFilter);  while (in.hasRemaining()) {    int oldPos=in.position();    try {      lock.acquire();      decoder.decode(session,in,decoderOut);      decoderOut.flush(nextFilter,session);    } catch (    Exception e) {      ProtocolDecoderException pde;      if (e instanceof ProtocolDecoderException) {        pde=(ProtocolDecoderException)e;      } else {        pde=new ProtocolDecoderException(e);      }      if (pde.getHexdump() == null) {        int curPos=in.position();        in.position(oldPos);        pde.setHexdump(in.getHexDump());        in.position(curPos);      }      decoderOut.flush(nextFilter,session);      nextFilter.exceptionCaught(session,pde);      if (!(e instanceof RecoverableProtocolDecoderException) || (in.position() == oldPos)) {        break;      }    } finally {      lock.release();    }  }}  }
class C{  @Override public AnnotationVisitor visitAnnotation(String desc,boolean visible){  presentAnnotations.add(desc);  if (VERBOSE)   System.out.println("Found annotation: " + desc);  return mv.visitAnnotation(desc,visible);}  }
class C{  private static int uariminGt(double value,double[] bv,int bvi[],BinaryOperator bOp) throws DMLRuntimeException {  int ixMin=1;  if (value <= bv[0] || value > bv[bv.length - 1])   return ixMin;  int ix=Arrays.binarySearch(bv,value);  ix=Math.abs(ix) - 1;  ixMin=bvi[ix] + 1;  return ixMin;}  }
class C{  private void addToPanel(FlowPanel panel,Action action,PresentationFactory presentationFactory){  Presentation presentation=presentationFactory.getPresentation(action);  if (action instanceof Separator) {    panel.add(new SeparatorItem(resources.menuCss().panelSeparator()));  } else   if (action instanceof CustomComponentAction) {    CustomComponentAction customComponentAction=(CustomComponentAction)action;    Widget component=customComponentAction.createCustomComponent(presentation);    component.addStyleName(resources.menuCss().customComponent());    panel.add(component);  }}  }
class C{  public boolean paintRable(Graphics2D g2d){  Composite c=g2d.getComposite();  if (!SVGComposite.OVER.equals(c))   return false;  if (getPadMode() != PadMode.ZERO_PAD)   return false;  Rectangle2D padBounds=getPadRect();  Shape clip=g2d.getClip();  g2d.clip(padBounds);  GraphicsUtil.drawImage(g2d,getSource());  g2d.setClip(clip);  return true;}  }
class C{  @Override protected void entryRemoved(boolean evicted,String key,BitmapDrawable oldValue,BitmapDrawable newValue){  if (RecyclingBitmapDrawable.class.isInstance(oldValue)) {    ((RecyclingBitmapDrawable)oldValue).setIsCached(false);  } else {    if (Utils.hasHoneycomb()) {      mReusableBitmaps.add(new SoftReference<Bitmap>(oldValue.getBitmap()));    }  }}  }
class C{  public boolean canDraw(){  return g != null && surfaceReady && !paused && (looping || redraw);}  }
class C{  private boolean createPaymentLine(int C_Payment_ID,int C_Currency_ID,BigDecimal PayAmt,BigDecimal OpenAmt,int C_BPartner_ID,int c_DunningLevel_ID){  MDunningRunEntry entry=null;  try {    entry=m_run.getEntry(C_BPartner_ID,p_C_Currency_ID,p_SalesRep_ID,c_DunningLevel_ID);  } catch (  BPartnerNoAddressException e) {    MPayment payment=new MPayment(getCtx(),C_Payment_ID,null);    String msg="@Skip@ @C_Payment_ID@ " + payment.getDocumentInfo() + ", @C_BPartner_ID@ "+ MBPartner.get(getCtx(),C_BPartner_ID).getName()+ " @No@ @IsActive@ @C_BPartner_Location_ID@";    getProcessInfo().addLog(getProcessInfo().getAD_PInstance_ID(),null,null,msg);    return false;  }  if (entry.get_ID() == 0)   if (!entry.save())   throw new IllegalStateException("Cannot save MDunningRunEntry");  MDunningRunLine line=new MDunningRunLine(entry);  line.setPayment(C_Payment_ID,C_Currency_ID,PayAmt,OpenAmt);  if (!line.save())   throw new IllegalStateException("Cannot save MDunningRunLine");  return true;}  }
class C{  private final int yToLine(int y){  int line=-1;  int h=textArea.getVisibleRect().height;  if (y < h) {    float at=y / (float)h;    line=(int)(textArea.getLineCount() * at);  }  return line;}  }
class C{  public void addValue(IFitsHeader key,int val) throws HeaderCardException {  addValue(key.key(),val,key.comment());}  }
class C{  @Field(25) public Pointer<Double> pdate(){  return this.io.getPointerField(this,25);}  }
class C{  public static void checkExplanations(final Query q,final IndexSearcher s) throws IOException {  CheckHits.checkExplanations(q,null,s,true);}  }
class C{  protected void addGateway(String guid,IPv4Address ip){  if (ip.getInt() != 0) {    if (log.isDebugEnabled()) {      log.debug("Adding {} as gateway for GUID {}",ip.toString(),guid);    }    guidToGateway.put(guid,ip);    if (vNetsByGuid.get(guid) != null)     vNetsByGuid.get(guid).setGateway(ip.toString());    if (gatewayToGuid.containsKey(ip)) {      Set<String> gSet=gatewayToGuid.get(ip);      gSet.add(guid);    } else {      Set<String> gSet=Collections.synchronizedSet(new HashSet<String>());      gSet.add(guid);      gatewayToGuid.put(ip,gSet);    }  }}  }
class C{  public static boolean isVolatile(int mod){  return (mod & VOLATILE) != 0;}  }
class C{  @Override public void process(Number tuple){  numList.add(tuple);}  }
class C{  public static boolean is64BitVM(){  final String bits=System.getProperty("sun.arch.data.model","?");  return bits.equals("64");}  }
class C{  public Element(){  lbCntFidxes=new HashMap();  cpFeatures=new ArrayList();}  }
class C{  public void addDocument(String name,int parentDivId,String fileExt,String pathDocumentFile,String pathDocAnnFile) throws Exception {  int sortOrder=m_documents.getNextSortOrder();  addDocument(name,parentDivId,fileExt,sortOrder,pathDocumentFile,pathDocAnnFile);}  }
class C{  public static String toBundleLine(final String bundleLineId){  return '@' + bundleLineId;}  }
class C{  public static double deriv(double pred,double y,double eps){  final double x=pred - y;  if (eps < Math.abs(x))   return Math.signum(x); else   return 0;}  }
class C{  boolean isInside(int cross){  if (rule == WIND_NON_ZERO) {    return ShapeUtil.isInsideNonZero(cross);  }  return ShapeUtil.isInsideEvenOdd(cross);}  }
class C{  @ApiOperation(value="Start the specified engine") @RequestMapping(value="engine/{engine}/start",method=RequestMethod.POST) @ResponseStatus(HttpStatus.NO_CONTENT) @ResponseBody public final void postStartByEngine(@PathVariable("engine") String engineName){  startImpl(getSymmetricEngine(engineName));}  }
class C{  public void clearCaches(){  if (mImageCache != null) {    mImageCache.clearCaches();  }}  }
class C{  public static List<String> readLines(File file) throws IOException {  return IOGroovyMethods.readLines(newReader(file));}  }
class C{  public Ling(GraphWithParameters graphWP,int samples){  numSamples=samples;  makeDataSet(graphWP);}  }
class C{  private void drawCenterRect(Canvas canvas){  int center=getHeight() / 2;  int offset=getItemHeight() / 2;  centerDrawable.setBounds(0,center - offset,getWidth(),center + offset);  centerDrawable.draw(canvas);}  }
class C{  public static byte toByte(ByteBuffer buf,int offset){  if (buf.isDirect()) {    return theUnsafe.getByte(((DirectBuffer)buf).address() + offset);  } else {    return theUnsafe.getByte(buf.array(),BYTE_ARRAY_BASE_OFFSET + buf.arrayOffset() + offset);  }}  }
class C{  public CharArrayList(final int capacity){  if (capacity < 0)   throw new IllegalArgumentException("Initial capacity (" + capacity + ") is negative");  a=new char[capacity];}  }
class C{  private void drawTouchSelector(final Canvas canvas){  final int prevColor=mPaint.getColor();  mPaint.setShader(null);  mPaint.setColor(mTouchSelectorColor);  mPaint.setStyle(Paint.Style.FILL_AND_STROKE);  if (mBorderWidth > 0) {    canvas.drawRoundRect(mBorderRect,mCornerRadius,mCornerRadius,mPaint);  } else {    canvas.drawRoundRect(mImageRect,mCornerRadius,mCornerRadius,mPaint);  }  mPaint.setColor(prevColor);}  }
class C{  public static void filledEllipse(double x,double y,double semiMajorAxis,double semiMinorAxis){  if (semiMajorAxis < 0)   throw new IllegalArgumentException("ellipse semimajor axis must be nonnegative");  if (semiMinorAxis < 0)   throw new IllegalArgumentException("ellipse semiminor axis must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * semiMajorAxis);  double hs=factorY(2 * semiMinorAxis);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.fill(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public static void registerCondition(String conditionName,Class<? extends AttributeFilterCondition> conditionClass){  String[] newConditionNames=new String[CONDITION_NAMES.length + 1];  System.arraycopy(CONDITION_NAMES,0,newConditionNames,0,CONDITION_NAMES.length);  newConditionNames[newConditionNames.length - 1]=conditionName;  CONDITION_NAMES=newConditionNames;  Class<?>[] newConditionClasses=new Class[CONDITION_IMPLEMENTATIONS.length + 1];  System.arraycopy(CONDITION_IMPLEMENTATIONS,0,newConditionClasses,0,CONDITION_IMPLEMENTATIONS.length);  newConditionClasses[newConditionClasses.length - 1]=conditionClass;  CONDITION_IMPLEMENTATIONS=newConditionClasses;}  }
class C{  private void ensureCleanerIsRunning(){  if (cleaner == null) {    startCleaner();  }}  }
class C{  public void prepare(){  if (getRequest().getMethod().equalsIgnoreCase("post")) {    if (!"".equals(getRequest().getParameter("user.id"))) {      user=userManager.getUser(getRequest().getParameter("user.id"));    }  }}  }
class C{  public String remove(Long id,double latitude,double longitude){  String resultKey=null;  List<GeoPointDto> data=this.load();  if (data != null) {    final String key=(id == null) ? null : id.toString();    for (int i=data.size() - 1; i >= 0; i--) {      GeoPointDto item=data.get(i);      if ((item == null) || ((latitude == item.getLatitude()) && (longitude == item.getLongitude())) || ((key != null) && key.compareTo(item.getId()) == 0)) {        data.remove(i);        if ((item != null) && (item.getId() != null)) {          resultKey=item.getId();        }      }    }  }  return resultKey;}  }
class C{  private static int encodeWeight(long value){  if (value < 0 || value > Integer.MAX_VALUE) {    throw new UnsupportedOperationException("cannot encode value: " + value);  }  return Integer.MAX_VALUE - (int)value;}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){}  }
class C{  public boolean isBounded(InferenceVariable infVar){  return boundsPerInfVar.containsKey(infVar);}  }
class C{  private static boolean isFastMobileNetwork(Context context){  TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);  if (telephonyManager == null) {    return false;  }switch (telephonyManager.getNetworkType()) {case TelephonyManager.NETWORK_TYPE_1xRTT:    return false;case TelephonyManager.NETWORK_TYPE_CDMA:  return false;case TelephonyManager.NETWORK_TYPE_EDGE:return false;case TelephonyManager.NETWORK_TYPE_EVDO_0:return true;case TelephonyManager.NETWORK_TYPE_EVDO_A:return true;case TelephonyManager.NETWORK_TYPE_GPRS:return false;case TelephonyManager.NETWORK_TYPE_HSDPA:return true;case TelephonyManager.NETWORK_TYPE_HSPA:return true;case TelephonyManager.NETWORK_TYPE_HSUPA:return true;case TelephonyManager.NETWORK_TYPE_UMTS:return true;case TelephonyManager.NETWORK_TYPE_EHRPD:return true;case TelephonyManager.NETWORK_TYPE_EVDO_B:return true;case TelephonyManager.NETWORK_TYPE_HSPAP:return true;case TelephonyManager.NETWORK_TYPE_IDEN:return false;case TelephonyManager.NETWORK_TYPE_LTE:return true;case TelephonyManager.NETWORK_TYPE_UNKNOWN:return false;default :return false;}}  }
class C{  protected JvmMemGCEntryMeta createJvmMemGCEntryMetaNode(String snmpEntryName,String tableName,SnmpMib mib,MBeanServer server){  return new JvmMemGCEntryMeta(mib,objectserver);}  }
class C{  @Override public String globalInfo(){  return "Combining several multi-label classifiers using Bootstrap AGGregatING";}  }
class C{  void decode(FacesContext context,ELFlash flash,Cookie cookie) throws InvalidKeyException {  String temp;  String value;  String urlDecodedValue=null;  try {    urlDecodedValue=URLDecoder.decode(cookie.getValue(),"UTF-8");  } catch (  UnsupportedEncodingException uee) {    urlDecodedValue=cookie.getValue();  }  value=guard.decrypt(urlDecodedValue);  try {    int i=value.indexOf("_");    temp=value.substring(0,i++);    if (0 < temp.length()) {      nextRequestFlashInfo=new FlashInfo();      nextRequestFlashInfo.decode(temp);    }    previousRequestFlashInfo=new FlashInfo();    previousRequestFlashInfo.decode(value.substring(i));    if (previousRequestFlashInfo.isIsRedirect()) {      this.setIncomingCookieCameFromRedirect(true);      previousRequestFlashInfo.setIsRedirect(false);    } else {      if (!UIDebug.debugRequest(context)) {        previousRequestFlashInfo.setLifetimeMarker(LifetimeMarker.SecondTimeThru);        nextRequestFlashInfo=null;      }    }    Map<String,Object> flashMap;    if (null == (flashMap=innerMap.get(previousRequestFlashInfo.getSequenceNumber() + ""))) {      previousRequestFlashInfo=new FlashInfo();      previousRequestFlashInfo.setSequenceNumber(flash.getNewSequenceNumber());      previousRequestFlashInfo.setLifetimeMarker(LifetimeMarker.FirstTimeThru);      previousRequestFlashInfo.setIsRedirect(false);      innerMap.put(previousRequestFlashInfo.getSequenceNumber() + "",flashMap=new HashMap<>());    }    previousRequestFlashInfo.setFlashMap(flashMap);    if (null != nextRequestFlashInfo) {      if (null == (flashMap=innerMap.get(nextRequestFlashInfo.getSequenceNumber() + ""))) {        nextRequestFlashInfo=new FlashInfo();        nextRequestFlashInfo.setSequenceNumber(flash.getNewSequenceNumber());        nextRequestFlashInfo.setLifetimeMarker(LifetimeMarker.FirstTimeThru);        nextRequestFlashInfo.setIsRedirect(false);        innerMap.put(nextRequestFlashInfo.getSequenceNumber() + "",flashMap=new HashMap<>());      }      nextRequestFlashInfo.setFlashMap(flashMap);    }  } catch (  Throwable t) {    context.getAttributes().put(CONSTANTS.ForceSetMaxAgeZero,Boolean.TRUE);    if (LOGGER.isLoggable(Level.SEVERE)) {      LOGGER.log(Level.SEVERE,"jsf.externalcontext.flash.bad.cookie",new Object[]{value});    }  }}  }
class C{  public MapIcon(String name,String path,boolean editable){  super(name);  mPath=path;  mEditable=editable;}  }
class C{  public static List<Packet<?>> toPackets(SpongeParticleEffect effect,Vector3d position){  SpongeParticleType type=effect.getType();  EnumParticleTypes internal=type.getInternalType();  if (internal == null) {    if (type == ParticleTypes.FIREWORKS) {      final List<FireworkEffect> effects=type.getDefaultOption(ParticleOptions.FIREWORK_EFFECTS).get();      if (effects.isEmpty()) {        return Collections.emptyList();      }      final SPacketSpawnObject packetSpawnObject=new SPacketSpawnObject();      packetSpawnObject.entityId=FIREWORK_ROCKET_ID;      packetSpawnObject.uniqueId=FIREWORK_ROCKET_UNIQUE_ID;      packetSpawnObject.x=position.getX();      packetSpawnObject.y=position.getY();      packetSpawnObject.z=position.getZ();      packetSpawnObject.type=76;      final net.minecraft.item.ItemStack itemStack=new net.minecraft.item.ItemStack(Items.FIREWORKS);      FireworkUtils.setFireworkEffects(itemStack,effects);      final SPacketEntityMetadata packetEntityMetadata=new SPacketEntityMetadata();      packetEntityMetadata.entityId=FIREWORK_ROCKET_ID;      packetEntityMetadata.dataManagerEntries=new ArrayList<>();      packetEntityMetadata.dataManagerEntries.add(new EntityDataManager.DataEntry<>(EntityFireworkRocket.FIREWORK_ITEM,com.google.common.base.Optional.of(itemStack)));      final List<Packet<?>> packets=new ArrayList<>();      packets.add(packetSpawnObject);      packets.add(packetEntityMetadata);      packets.add(FIREWORK_ROCKET_DUMMY_EFFECT);      packets.add(DESTROY_FIREWORK_ROCKET_DUMMY);      return packets;    }    BlockPos pos=new BlockPos(Math.round(position.getX()),Math.round(position.getY()),Math.round(position.getZ()));    if (type == ParticleTypes.FERTILIZER) {      int quantity=effect.getOptionOrDefault(ParticleOptions.QUANTITY).get();      return Collections.singletonList(new SPacketEffect(2005,pos,quantity,false));    } else     if (type == ParticleTypes.SPLASH_POTION) {      Potion potion=(Potion)effect.getOptionOrDefault(ParticleOptions.POTION_EFFECT_TYPE).get();      for (      PotionType potionType : PotionType.REGISTRY) {        for (        net.minecraft.potion.PotionEffect potionEffect : potionType.getEffects()) {          if (potionEffect.getPotion() == potion) {            return Collections.singletonList(new SPacketEffect(2002,pos,PotionType.getID(potionType),false));          }        }      }      return Collections.emptyList();    } else     if (type == ParticleTypes.BREAK_BLOCK) {      int state=getBlockState(effect,type.getDefaultOption(ParticleOptions.BLOCK_STATE));      if (state == 0) {        return Collections.emptyList();      }      return Collections.singletonList(new SPacketEffect(2001,pos,state,false));    } else     if (type == ParticleTypes.MOBSPAWNER_FLAMES) {      return Collections.singletonList(new SPacketEffect(2004,pos,0,false));    } else     if (type == ParticleTypes.ENDER_TELEPORT) {      return Collections.singletonList(new SPacketEffect(2003,pos,0,false));    } else     if (type == ParticleTypes.DRAGON_BREATH_ATTACK) {      return Collections.singletonList(new SPacketEffect(2006,pos,0,false));    } else     if (type == ParticleTypes.FIRE_SMOKE) {      final Direction direction=effect.getOptionOrDefault(ParticleOptions.DIRECTION).get();      return Collections.singletonList(new SPacketEffect(2000,pos,getDirectionData(direction),false));    }    return Collections.emptyList();  }  Vector3d offset=effect.getOption(ParticleOptions.OFFSET).orElse(Vector3d.ZERO);  int quantity=effect.getOption(ParticleOptions.QUANTITY).orElse(1);  int[] extra=null;  float px=(float)position.getX();  float py=(float)position.getY();  float pz=(float)position.getZ();  double ox=offset.getX();  double oy=offset.getY();  double oz=offset.getZ();  double f0=0f;  double f1=0f;  double f2=0f;  Optional<BlockState> defaultBlockState;  if (internal != EnumParticleTypes.ITEM_CRACK && (defaultBlockState=type.getDefaultOption(ParticleOptions.BLOCK_STATE)).isPresent()) {    int state=getBlockState(effect,defaultBlockState);    if (state == 0) {      return Collections.emptyList();    }    extra=new int[]{state};  }  Optional<ItemStackSnapshot> defaultSnapshot;  if (extra == null && (defaultSnapshot=type.getDefaultOption(ParticleOptions.ITEM_STACK_SNAPSHOT)).isPresent()) {    Optional<ItemStackSnapshot> optSnapshot=effect.getOption(ParticleOptions.ITEM_STACK_SNAPSHOT);    if (optSnapshot.isPresent()) {      ItemStackSnapshot snapshot=optSnapshot.get();      extra=new int[]{Item.getIdFromItem((Item)snapshot.getType()),((SpongeItemStackSnapshot)snapshot).getDamageValue()};    } else {      Optional<BlockState> optBlockState=effect.getOption(ParticleOptions.BLOCK_STATE);      if (optBlockState.isPresent()) {        BlockState blockState=optBlockState.get();        Optional<ItemType> optItemType=blockState.getType().getItem();        if (optItemType.isPresent()) {          extra=new int[]{Item.getIdFromItem((Item)optItemType.get()),((Block)blockState.getType()).getMetaFromState((IBlockState)blockState)};        } else {          return Collections.emptyList();        }      } else {        ItemStackSnapshot snapshot=defaultSnapshot.get();        extra=new int[]{Item.getIdFromItem((Item)snapshot.getType()),((SpongeItemStackSnapshot)snapshot).getDamageValue()};      }    }  }  if (extra == null) {    extra=new int[0];  }  Optional<Double> defaultScale=type.getDefaultOption(ParticleOptions.SCALE);  Optional<Color> defaultColor;  Optional<NotePitch> defaultNote;  Optional<Vector3d> defaultVelocity;  if (defaultScale.isPresent()) {    double scale=effect.getOption(ParticleOptions.SCALE).orElse(defaultScale.get());    if (internal == EnumParticleTypes.EXPLOSION_LARGE || internal == EnumParticleTypes.SWEEP_ATTACK) {      scale=(-scale * 2f) + 2f;    }    if (scale == 0f) {      return Collections.singletonList(new SPacketParticles(internal,true,px,py,pz,(float)ox,(float)oy,(float)oz,0f,quantity,extra));    }    f0=scale;  } else   if ((defaultColor=type.getDefaultOption(ParticleOptions.COLOR)).isPresent()) {    Color color=effect.getOption(ParticleOptions.COLOR).orElse(null);    boolean isSpell=internal == EnumParticleTypes.SPELL_MOB || internal == EnumParticleTypes.SPELL_MOB_AMBIENT;    if (!isSpell && (color == null || color.equals(defaultColor.get()))) {      return Collections.singletonList(new SPacketParticles(internal,true,px,py,pz,(float)ox,(float)oy,(float)oz,0f,quantity,extra));    } else     if (isSpell && color == null) {      color=defaultColor.get();    }    f0=color.getRed() / 255f;    f1=color.getGreen() / 255f;    f2=color.getBlue() / 255f;    if (isSpell) {      f0=Math.max(f0,0.001f);      f2=Math.max(f0,0.001f);    }    if (f0 == 0f && internal == EnumParticleTypes.REDSTONE) {      f0=0.00001f;    }  } else   if ((defaultNote=type.getDefaultOption(ParticleOptions.NOTE)).isPresent()) {    NotePitch notePitch=effect.getOption(ParticleOptions.NOTE).orElse(defaultNote.get());    float note=((SpongeNotePitch)notePitch).getByteId();    if (note == 0f) {      return Collections.singletonList(new SPacketParticles(internal,true,px,py,pz,(float)ox,(float)oy,(float)oz,0f,quantity,extra));    }    f0=note / 24f;  } else   if ((defaultVelocity=type.getDefaultOption(ParticleOptions.VELOCITY)).isPresent()) {    Vector3d velocity=effect.getOption(ParticleOptions.VELOCITY).orElse(defaultVelocity.get());    f0=velocity.getX();    f1=velocity.getY();    f2=velocity.getZ();    Optional<Boolean> slowHorizontalVelocity=type.getDefaultOption(ParticleOptions.SLOW_HORIZONTAL_VELOCITY);    if (slowHorizontalVelocity.isPresent() && effect.getOption(ParticleOptions.SLOW_HORIZONTAL_VELOCITY).orElse(slowHorizontalVelocity.get())) {      f0=0f;      f2=0f;    }    if (internal == EnumParticleTypes.WATER_SPLASH) {      f1=0f;    }    if (f0 == 0f && f1 == 0f && f2 == 0f) {      return Collections.singletonList(new SPacketParticles(internal,true,px,py,pz,(float)ox,(float)oy,(float)oz,0f,quantity,extra));    }  }  if (f0 == 0f && f1 == 0f && f2 == 0f) {    return Collections.singletonList(new SPacketParticles(internal,true,px,py,pz,(float)ox,(float)oy,(float)oz,0f,quantity,extra));  }  List<Packet<?>> packets=new ArrayList<>(quantity);  if (ox == 0f && oy == 0f && oz == 0f) {    for (int i=0; i < quantity; i++) {      packets.add(new SPacketParticles(internal,true,px,py,pz,(float)f0,(float)f1,(float)f2,1f,0,extra));    }  } else {    Random random=new Random();    for (int i=0; i < quantity; i++) {      double px0=(px + (random.nextFloat() * 2f - 1f) * ox);      double py0=(py + (random.nextFloat() * 2f - 1f) * oy);      double pz0=(pz + (random.nextFloat() * 2f - 1f) * oz);      packets.add(new SPacketParticles(internal,true,(float)px0,(float)py0,(float)pz0,(float)f0,(float)f1,(float)f2,1f,0,extra));    }  }  return packets;}  }
class C{  public boolean isVerbose(){  return verbose;}  }
class C{  @Contract("null, _, _ -> false") public static boolean isAncestor(@Nullable PsiElement ancestor,@NotNull PsiElement element,boolean strict){  if (ancestor == null)   return false;  if (ancestor instanceof StubBasedPsiElement && ((StubBasedPsiElement)ancestor).getStub() != null || element instanceof StubBasedPsiElement && ((StubBasedPsiElement)element).getStub() != null) {    if (ancestor.getContainingFile() != element.getContainingFile())     return false;  }  boolean stopAtFileLevel=!(ancestor instanceof PsiFile || ancestor instanceof PsiDirectory);  PsiElement parent=strict ? element.getParent() : element;  while (true) {    if (parent == null)     return false;    if (parent.equals(ancestor))     return true;    if (stopAtFileLevel && parent instanceof PsiFile)     return false;    parent=parent.getParent();  }}  }
class C{  public static void validateWebvttHeaderLine(ParsableByteArray input) throws ParserException {  String line=input.readLine();  if (line == null || !HEADER.matcher(line).matches()) {    throw new ParserException("Expected WEBVTT. Got " + line);  }}  }
class C{  public ServiceHelper forwardingNonStubbedRequests(boolean forward){  this.forwardNonStubbedRequests=forward;  return this;}  }
class C{  public void merge(AttributeMetaData amd){  if (amd.isNominal() != this.isNominal()) {    this.type=Ontology.ATTRIBUTE_VALUE;  }  if (isNominal()) {    if (amd.valueSet != null && this.valueSet != null) {      if (!amd.valueSet.equals(this.valueSet)) {        this.valueSetRelation.merge(SetRelation.SUBSET);      }      this.valueSet.addAll(amd.valueSet);    }    this.valueSetRelation.merge(amd.valueSetRelation);  }  if (isNumerical()) {    if (valueRange != null && amd.valueRange != null) {      double min=Math.min(amd.valueRange.getLower(),this.valueRange.getLower());      double max=Math.max(amd.valueRange.getUpper(),this.valueRange.getUpper());      this.valueRange=new Range(min,max);    }    this.valueSetRelation.merge(amd.valueSetRelation);  }}  }
class C{  public CLIOutputWithRevisionResponse update(final UpdateRequest request) throws IOException, SubversionException {  final File projectPath=new File(request.getProjectPath());  final List<String> uArgs=defaultArgs();  addFlag(uArgs,"--ignore-externals",request.isIgnoreExternals());  addOption(uArgs,"--depth",request.getDepth());  addOption(uArgs,"--revision",request.getRevision());  uArgs.add("update");  final CommandLineResult result=runCommand(null,uArgs,projectPath,addWorkingCopyPathIfNecessary(request.getPaths()));  return DtoFactory.getInstance().createDto(CLIOutputWithRevisionResponse.class).withCommand(result.getCommandLine().toString()).withRevision(SubversionUtils.getUpdateRevision(result.getStdout())).withOutput(result.getStdout()).withErrOutput(result.getStderr());}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,ScaleType scaleType,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(DEFAULT_IMAGE_TIMEOUT_MS,DEFAULT_IMAGE_MAX_RETRIES,DEFAULT_IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;  mScaleType=scaleType;}  }
class C{  private Configuration buildConfiguration(ConnectionConfig config){  Configuration configuration=new BaseConfiguration();  String databaseName=config.getDatabaseName();  if (databaseName == null) {    LOG.warn(JdbcConstants.EAGLE_DATABASE + " is null, trying default database name as: eagle");    databaseName="eagle";  }  LOG.info("Using default database: " + databaseName + " (adapter: "+ config.getAdapter()+ ")");  configuration.addProperty("torque.database.default",config.getDatabaseName());  configuration.addProperty(String.format("torque.dsfactory.%s.factory",databaseName),DEFAULT_DATA_SOURCE_FACTORY_CLASS);  configuration.addProperty(String.format("torque.database.%s.adapter",databaseName),config.getAdapter());  configuration.addProperty(String.format("torque.dsfactory.%s.connection.driver",databaseName),config.getDriverClassName());  configuration.addProperty(String.format("torque.dsfactory.%s.connection.url",databaseName),config.getConnectionUrl());  configuration.addProperty(String.format("torque.dsfactory.%s.connection.user",databaseName),config.getUserName());  configuration.addProperty(String.format("torque.dsfactory.%s.connection.password",databaseName),config.getPassword());  configuration.addProperty(String.format("torque.dsfactory.%s.pool.maxActive",databaseName),Integer.toString(config.getConnectionMaxActive()));  return configuration;}  }
class C{  public void generateUniform(int numSamples,Callback2d callback){  for (int i=0; i < numSamples; i++) {    float r=rnd.nextFloat();    float a=rnd.nextFloat() * 2.0f * (float)Math.PI;    float sqrtR=(float)Math.sqrt(r);    float x=sqrtR * (float)Math.sin_roquen_9(a + 0.5 * Math.PI);    float y=sqrtR * (float)Math.sin_roquen_9(a);    callback.onNewSample(x,y);  }}  }
class C{  public GuardItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static void println(){  System.out.println();}  }
class C{  public static void callEMCRefresh(SmisCommandHelper helper,StorageSystem storage,boolean force){  try {    _log.info("Refreshing storagesystem: {}",storage.getId());    helper.callRefreshSystem(storage,null,force);  } catch (  Exception e) {    _log.error("Exception callEMCRefresh",e);  }}  }
class C{  public Boolean isSplit(){  return split;}  }
class C{  public void init() throws ServletException {}  }
class C{  public Flux<T> flux(){  return Flux.from(topic.stream());}  }
class C{  public XYTaskDataset(TaskSeriesCollection tasks){  ParamChecks.nullNotPermitted(tasks,"tasks");  this.underlying=tasks;  this.seriesWidth=0.8;  this.underlying.addChangeListener(this);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public AbstractMethodDeclaration declarationOf(MethodBinding methodBinding){  if (methodBinding != null && this.methods != null) {    for (int i=0, max=this.methods.length; i < max; i++) {      AbstractMethodDeclaration methodDecl;      if ((methodDecl=this.methods[i]).binding == methodBinding)       return methodDecl;    }  }  return null;}  }
class C{  public void visitFormalTypeParameter(String name){}  }
class C{  private void validateInteger(FacesContext context,UIComponent uiComponent,String value){  if (!GenericValidator.isInt(value.toString())) {    Object[] args=null;    String label=JSFUtils.getLabel(uiComponent);    if (label != null) {      args=new Object[]{label};    }    ValidationException e=new ValidationException(ValidationException.ReasonEnum.INTEGER,label,null);    String text=JSFUtils.getText(e.getMessageKey(),args,context);    throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR,text,null));  }}  }
class C{  public GammaDistributionModel(Variable<Double> shape,Variable<Double> scale){  this(GammaParameterizationType.ShapeScale,shape,scale,0.0);}  }
class C{  private static double maxScoreOfAllNodes(SortingNode<Debate> node,ToDoubleFunction<Debate> scoreCalc){  return node.depthFirst().mapToDouble(scoreCalc).max().orElseGet(null);}  }
class C{  public DirectoryOrFileNotFoundException(String entity,String name){  super(String.format(_errorMessage,entity,name));}  }
class C{  private static List<String> parseCommaDelimitedStrings(String commaDelimitedStrings){  if (commaDelimitedStrings == null || commaDelimitedStrings.trim().isEmpty()) {    return Collections.emptyList();  }  return Arrays.asList(commaDelimitedStrings.split("\\s*,\\s*"));}  }
class C{  public TemporalOMScalingIcon(Object id,int renderType,boolean interpolate,ImageIcon ii){  this(id,renderType,interpolate,ii.getImage(),4000000);  setMaxScale(4000000);  setMinScale(4000000);}  }
class C{  private void updateHighlight(){  highlighter.update(StringUtil.getStringList(client.settings.getList("highlight")));}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public ExtensionFilter(final String extension){  ext=extension;}  }
class C{  private void startTask(){synchronized (lock) {    if (shutdown) {      throw new RejectedExecutionException("Executor already shutdown");    }    runningTasks++;  }}  }
class C{  public void contentChanged(){  this.changeFlags|=F_CONTENT;}  }
class C{  public GammaDistribution(final double a){  QL.require(a >= 0.0,"invalid parameter for gamma distribution");  this.a=a;}  }
class C{  public CommandWrapperBuilder createFixedDepositAccount(){  this.actionName="CREATE";  this.entityName="FIXEDDEPOSITACCOUNT";  this.entityId=null;  this.href="/fixeddepositaccounts/template";  return this;}  }
class C{  protected void checkListStatesUpdated(){  boolean allListsEnded=true;  boolean atLeastOneListSucceeded=false;  if (getState().isEstablished())   return;  List<IceMediaStream> streams=getStreams();  for (  IceMediaStream stream : streams) {    CheckListState checkListState=stream.getCheckList().getState();    if (checkListState == CheckListState.RUNNING) {      allListsEnded=false;      break;    } else     if (checkListState == CheckListState.COMPLETED) {      logger.info("CheckList of stream " + stream.getName() + " is COMPLETED");      atLeastOneListSucceeded=true;    }  }  if (!allListsEnded)   return;  if (!atLeastOneListSucceeded) {    if (logger.isLoggable(Level.INFO)) {      if (connCheckClient.isAlive() || connCheckServer.isAlive()) {        logger.info("Suspicious ICE connectivity failure. Checks" + " failed but the remote end was able to reach us.");      }      logger.info("ICE state is FAILED");    }    terminate(IceProcessingState.FAILED);    return;  }  if (getState() != IceProcessingState.RUNNING) {    return;  }  if (!setState(IceProcessingState.COMPLETED))   return;  if (stunKeepAliveThread == null && !StackProperties.getBoolean(StackProperties.NO_KEEP_ALIVES,false)) {    scheduleStunKeepAlive();  }  scheduleTermination();  logCandTypes();}  }
class C{  public QName(String namespaceURI,String prefix,String localName,boolean validate){  if (localName == null)   throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_NULL,null));  if (validate) {    if (!XML11Char.isXML11ValidNCName(localName)) {      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null));    }    if ((null != prefix) && (!XML11Char.isXML11ValidNCName(prefix))) {      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_PREFIX_INVALID,null));    }  }  _namespaceURI=namespaceURI;  _prefix=prefix;  _localName=localName;  m_hashCode=toString().hashCode();}  }
class C{  public String toMatlab(){  StringBuffer result;  int i;  int n;  result=new StringBuffer();  result.append("[");  for (i=0; i < getRowDimension(); i++) {    if (i > 0) {      result.append("; ");    }    for (n=0; n < getColumnDimension(); n++) {      if (n > 0) {        result.append(" ");      }      result.append(Double.toString(get(i,n)));    }  }  result.append("]");  return result.toString();}  }
class C{  public static boolean isValid(int c){  return (c < 0x10000 && (CHARS[c] & MASK_VALID) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  public void run(){  if (ExecutionThread.currentThread().isKilled()) {    return;  }  varPath.getValue().multiply(expression.evaluate());}  }
class C{  private void addRouteProfilToRoutes(){  log.info("Adding arrivalOffsets and departureOffsets to transit lines.");  for (  Entry<Id<TransitLine>,TransitLine> transitLineEntry : this.osmScenario.getTransitSchedule().getTransitLines().entrySet()) {    int numberOfRoutesProcessed=0;    for (    TransitRoute transitRoute : transitLineEntry.getValue().getRoutes().values()) {      for (      TransitRouteStop transitRouteStop : transitRoute.getStops()) {      }    }    log.info("Added " + transitLineEntry.getKey() + " with "+ numberOfRoutesProcessed+ " routes");  }}  }
class C{  public Object createEdge(Object parent,String id,Object value,Object source,Object target,String style){  if (edgeTemplate != null) {    mxCell edge=(mxCell)cloneCells(new Object[]{edgeTemplate})[0];    edge.setId(id);    return edge;  }  return super.createEdge(parent,id,value,source,target,style);}  }
class C{  private void updateBounds(Relation<V> relation,WritableIntegerDataStore assignment,WritableDoubleDataStore upper,WritableDoubleDataStore lower,double[] move,double delta){  delta=-delta;  for (DBIDIter it=relation.iterDBIDs(); it.valid(); it.advance()) {    upper.increment(it,move[assignment.intValue(it)]);    lower.increment(it,delta);  }}  }
class C{  public void addListener(final IDebuggerListener listener){  m_listeners.addListener(listener);}  }
class C{  public void finish() throws Exception {}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:13.051 -0500",hash_original_method="CD2EAE34D95290C8C0E6CBB8BD3A8C00",hash_generated_method="BB4BB6AEDC75FA056864FEC70F3EB226") public boolean isCrossFadeEnabled(){  return mCrossFade;}  }
class C{  public final int length(){  return array.length;}  }
class C{  private void readMessageSummariesTable(Connection con) throws AdeException {  FileOutputStream fos=null;  Writer w=null;  PreparedStatement s=null;  try {    final String outputFileName=formFFDCDBExportedTableFileName(MESSAGE_SUMMARIES_TABLE);    fos=new FileOutputStream(outputFileName);    w=new BufferedWriter(new OutputStreamWriter(fos,StandardCharsets.UTF_8));    s=con.prepareStatement("SELECT " + SELECTED_COLUMNS + " FROM "+ MESSAGE_SUMMARIES_TABLE);    final ResultSet resultSet=s.executeQuery();    while (resultSet.next()) {      final int periodSummaryInternalID=resultSet.getInt(1);      final int intervalSerialNum=resultSet.getInt(2);      final int messageIntervalId=resultSet.getInt(3);      final int numMessages=resultSet.getInt(4);      w.write(periodSummaryInternalID + "," + intervalSerialNum+ ","+ messageIntervalId+ ","+ numMessages+ "\n");    }  } catch (  SQLException e) {    throw new AdeExtInternalException("SQLException caught: " + e,e);  }catch (  IOException e) {    throw new AdeExtInternalException("IOException caught: " + e,e);  } finally {    try {      if (s != null) {        s.close();      }      if (w != null) {        w.flush();        w.close();      }      if (fos != null) {        fos.close();      }    } catch (    SQLException e) {      logger.error("SQLException caught during close: " + e,e);    }catch (    IOException e) {      logger.error("IOException caught during close: " + e,e);    }  }}  }
class C{  public static String separate(String separator,String... blocks){  requireNonNullElements(blocks);  return Stream.of(blocks).collect(joining(separator));}  }
class C{  public String encode(final String clearText){  final BCryptPasswordEncoder encoder=new BCryptPasswordEncoder();  return encoder.encode(clearText);}  }
class C{  public static String indent(String s,int spaces,boolean newline){  StringBuilder buff=new StringBuilder(s.length() + spaces);  for (int i=0; i < s.length(); ) {    for (int j=0; j < spaces; j++) {      buff.append(' ');    }    int n=s.indexOf('\n',i);    n=n < 0 ? s.length() : n + 1;    buff.append(s.substring(i,n));    i=n;  }  if (newline && !s.endsWith("\n")) {    buff.append('\n');  }  return buff.toString();}  }
class C{  private long sizeOfObject(Object obj){  long size=SIZE_OBJECT;  Class clazz=obj.getClass();  while (clazz != null) {    Field[] fields=clazz.getDeclaredFields();    for (    Field field : fields) {      if (!Modifier.isStatic(field.getModifiers())) {        if (field.getType().isPrimitive()) {          size+=sizeOfPrimitive(field.getType());        } else {          Object val=ACCESSOR.get(obj,field);          if (field.getType().isArray()) {            size+=sizeOfArray(val);          } else {            size+=SIZE_REFERENCE;            nextQueue.add(val);          }        }      }    }    clazz=clazz.getSuperclass();  }  return size;}  }
class C{  public static String toJSON(PdxInstance pdxInstance){  try {    PdxToJSON pj=new PdxToJSON(pdxInstance);    return pj.getJSON();  } catch (  Exception e) {    throw new JSONFormatterException("Could not create JSON document from PdxInstance",e);  }}  }
class C{  @Autowired protected void registerAuthentication(final AuthenticationManagerBuilder auth) throws Exception {  auth.inMemoryAuthentication().withUser("coursera").password("changeit").authorities("admin","user").and().withUser("student").password("changeit").authorities("user");}  }
class C{  public void update(Result r){  for (  Evaluator evaluator : evaluators) {    Thread.currentThread().setName(evaluator.toString());    evaluator.processNewResult(hier,r);  }}  }
class C{  public static String whereAmI(){  final RuntimeException re=new RuntimeException();  return getStackTrace(re);}  }
class C{  public Vector2 mul(float scalar){  x*=scalar;  y*=scalar;  return this;}  }
class C{  public void yield(Object value){  yield(value.toString());}  }
class C{  public synchronized void addSeries(XYSeries series){  mSeries.add(series);}  }
class C{  public C third(){  return c;}  }
class C{  public ArtifactID(final String tool,final String artifactType,final String toolSpecificId){  this.tool=tool;  this.artifactType=artifactType;  this.toolSpecificId=toolSpecificId;}  }
class C{  private ICloseableIterator<IBindingSet> doExternalServiceCall(final ExternalServiceCall serviceCall,final IBindingSet left[]) throws Exception {  return doNonBigdataSesameServiceCall(serviceCall,left);}  }
class C{  public static void touch(File file) throws IOException {  if (!file.exists()) {    OutputStream out=openOutputStream(file);    IOUtils.closeQuietly(out);  }  boolean success=file.setLastModified(System.currentTimeMillis());  if (!success) {    throw new IOException("Unable to set the last modification time for " + file);  }}  }
class C{  @Override public int size(){  return elementCount;}  }
class C{  private void enterBinop(String name,Type left,Type right,Type res,int opcode){  predefClass.members().enter(new OperatorSymbol(makeOperatorName(name),new MethodType(List.of(left,right),res,List.<Type>nil(),methodClass),opcode,predefClass));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public TriggerProcessStatusException(String message,TriggerProcessStatus status){  super(message,new Object[]{status});}  }
class C{  protected void run(Function<U,Recommendation<U,I>> recProvider,Consumer<Recommendation<U,I>> consumer){  users.parallelStream().forEach(null);}  }
class C{  protected double computeLogFloor(double lower){  double logFloor;  if (this.allowNegativesFlag) {    if (lower > 10.0) {      logFloor=Math.log(lower) / LOG10_VALUE;      logFloor=Math.floor(logFloor);      logFloor=Math.pow(10,logFloor);    } else     if (lower < -10.0) {      logFloor=Math.log(-lower) / LOG10_VALUE;      logFloor=Math.floor(-logFloor);      logFloor=-Math.pow(10,-logFloor);    } else {      logFloor=Math.floor(lower);    }  } else {    if (lower > 0.0) {      logFloor=Math.log(lower) / LOG10_VALUE;      logFloor=Math.floor(logFloor);      logFloor=Math.pow(10,logFloor);    } else {      logFloor=Math.floor(lower);    }  }  return logFloor;}  }
class C{  public void onPackageAdded(String packageName,int uid){}  }
class C{  @SuppressWarnings("unchecked") public static <C extends Comparable>ImmutableRangeSet<C> of(){  return (ImmutableRangeSet<C>)EMPTY;}  }
class C{  public int sum(){  int sum=0;  while (iterator.hasNext()) {    sum+=iterator.nextInt();  }  return sum;}  }
class C{  @SuppressWarnings("unchecked") protected void notifyDataListeners(DataSetEvent tse){  ArrayList<DataSourceListener> l;synchronized (this) {    l=(ArrayList<DataSourceListener>)m_dataListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      l.get(i).acceptDataSet(tse);    }  }}  }
class C{  public DD(double x){  init(x);}  }
class C{  @Override public void registerDataSetObserver(DataSetObserver observer){  adapter1.registerDataSetObserver(observer);  adapter2.registerDataSetObserver(observer);}  }
class C{  void convertType(Class<?> arg,Class<?> target,Class<?> functional){  if (arg.equals(target) && arg.equals(functional)) {    return;  }  if (arg == Void.TYPE || target == Void.TYPE) {    return;  }  if (arg.isPrimitive()) {    Wrapper wArg=Wrapper.forPrimitiveType(arg);    if (target.isPrimitive()) {      widen(wArg,Wrapper.forPrimitiveType(target));    } else {      String dTarget=BytecodeDescriptor.unparse(target);      Wrapper wPrimTarget=wrapperOrNullFromDescriptor(dTarget);      if (wPrimTarget != null) {        widen(wArg,wPrimTarget);        box(wPrimTarget);      } else {        box(wArg);        cast(wrapperName(wArg),dTarget);      }    }  } else {    String dArg=BytecodeDescriptor.unparse(arg);    String dSrc;    if (functional.isPrimitive()) {      dSrc=dArg;    } else {      dSrc=BytecodeDescriptor.unparse(functional);      cast(dArg,dSrc);    }    String dTarget=BytecodeDescriptor.unparse(target);    if (target.isPrimitive()) {      Wrapper wTarget=toWrapper(dTarget);      Wrapper wps=wrapperOrNullFromDescriptor(dSrc);      if (wps != null) {        if (wps.isSigned() || wps.isFloating()) {          unbox(wrapperName(wps),wTarget);        } else {          unbox(wrapperName(wps),wps);          widen(wps,wTarget);        }      } else {        String intermediate;        if (wTarget.isSigned() || wTarget.isFloating()) {          intermediate="java/lang/Number";        } else {          intermediate=wrapperName(wTarget);        }        cast(dSrc,intermediate);        unbox(intermediate,wTarget);      }    } else {      cast(dSrc,dTarget);    }  }}  }
class C{  public Coord4D(int x,int y,int z,int dimension){  xCoord=x;  yCoord=y;  zCoord=z;  dimensionId=dimension;}  }
class C{  private void multiTouchController(){switch (mMode) {case MODE_NOTHING:    if (mCurrentTouchPoint.isDown()) {      selectedObject=objectCanvas.getDraggableObjectAtPoint(mCurrentTouchPoint);      if (selectedObject != null) {        objectCanvas.deselectAll();        ((ImageObject)selectedObject).setSelected(true);        if (objectCanvas.pointInObjectGrabArea(mCurrentTouchPoint,selectedObject)) {          setMode(MODE_ST_GRAB);          objectCanvas.selectObject(selectedObject,mCurrentTouchPoint);          anchorAtThisPositionAndScale();          mSettleStartTime=mSettleEndTime=mCurrentTouchPoint.getEventTime();        } else {          setMode(MODE_DRAG);          objectCanvas.selectObject(selectedObject,mCurrentTouchPoint);          anchorAtThisPositionAndScale();          mSettleStartTime=mSettleEndTime=mCurrentTouchPoint.getEventTime();        }      }    } else {      objectCanvas.canvasTouched();    }  break;case MODE_ST_GRAB:if (!mCurrentTouchPoint.isDown()) {  setMode(MODE_NOTHING);  objectCanvas.selectObject((selectedObject=null),mCurrentTouchPoint);  mDragOccurred=false;} else {  performDragOrPinch();}break;case MODE_DRAG:if (!mCurrentTouchPoint.isDown()) {setMode(MODE_NOTHING);objectCanvas.selectObject((selectedObject=null),mCurrentTouchPoint);mDragOccurred=false;} else if (mCurrentTouchPoint.isMultiTouch()) {setMode(MODE_PINCH);anchorAtThisPositionAndScale();mSettleStartTime=mCurrentTouchPoint.getEventTime();mSettleEndTime=mSettleStartTime + EVENT_SETTLE_TIME_INTERVAL;} else {if (mCurrentTouchPoint.getEventTime() < mSettleEndTime) {anchorAtThisPositionAndScale();} else {performDragOrPinch();}}break;case MODE_PINCH:if (!mCurrentTouchPoint.isMultiTouch() || !mCurrentTouchPoint.isDown()) {if (!mCurrentTouchPoint.isDown()) {setMode(MODE_NOTHING);objectCanvas.selectObject((selectedObject=null),mCurrentTouchPoint);} else {setMode(MODE_DRAG);anchorAtThisPositionAndScale();mSettleStartTime=mCurrentTouchPoint.getEventTime();mSettleEndTime=mSettleStartTime + EVENT_SETTLE_TIME_INTERVAL;}} else {if (Math.abs(mCurrentTouchPoint.getX() - mPrevTouchPoint.getX()) > MAX_MULTITOUCH_POS_JUMP_SIZE || Math.abs(mCurrentTouchPoint.getY() - mPrevTouchPoint.getY()) > MAX_MULTITOUCH_POS_JUMP_SIZE || Math.abs(mCurrentTouchPoint.getMultiTouchWidth() - mPrevTouchPoint.getMultiTouchWidth()) * .5f > MAX_MULTITOUCH_DIM_JUMP_SIZE || Math.abs(mCurrentTouchPoint.getMultiTouchHeight() - mPrevTouchPoint.getMultiTouchHeight()) * .5f > MAX_MULTITOUCH_DIM_JUMP_SIZE) {anchorAtThisPositionAndScale();mSettleStartTime=mCurrentTouchPoint.getEventTime();mSettleEndTime=mSettleStartTime + EVENT_SETTLE_TIME_INTERVAL;} else if (mCurrentTouchPoint.getEventTime() < mSettleEndTime) {anchorAtThisPositionAndScale();} else {performDragOrPinch();}}break;}}  }
class C{  @ObjectiveCName("sendMessageWithMentionsDetect:withText:withMarkdownText:") public void sendMessageWithMentionsDetect(@NotNull Peer peer,@NotNull String text,@NotNull String markdownText){  sendMessage(peer,text,markdownText,null,true);}  }
class C{  private State buildPatch(TaskState.TaskStage stage,TaskState.SubStage subStage,Throwable e){  State s=new State();  s.taskInfo=new TaskState();  s.taskInfo.stage=stage;  s.taskInfo.subStage=subStage;  if (e != null) {    s.taskInfo.failure=Utils.toServiceErrorResponse(e);  }  return s;}  }
class C{  public void initialize(){  if (initialized) {    return;  }  Landscape.getInstance().initialize();  contents.attachChild(Landscape.getInstance());  updateGeometricState(0);  landmarks.initialize();  tools.initialize();  lineSets.initialize();  contents.attachChild(landmarks);  contents.attachChild(tools);  contents.attachChild(lineSets);  root.setRenderState(lighting.getGlobalLightState());  lighting.getLight().setTranslation(Landscape.getInstance().getWorldBound().getCenter());  MarbleState marbleState=ConfigurationManager.getInstance().getCurrentConfiguration().marbleState;  marble=new Marble(marbleState);  marble.setNormal(Vector3.UNIT_Z);  marble.setTranslation(Landscape.getInstance().getCenter());  marble.setSolarDirection(lighting.getLightDirection());  contents.attachChild(marble);  ruler=new TapeMeasure();  ruler.getSceneHints().setCullHint(CullHint.Always);  CoordAction.listenerList.add(ruler);  contents.attachChild(ruler);  setTime(timeUTC);  lighting.enableShadow(lighting.isShadowEnabled());  SceneGraphManager.getSceneGraphManager().listenOnSpatial(root);  updateGeometricState(0);  ZBufferState buf=new ZBufferState();  buf.setFunction(ZBufferState.TestFunction.LessThanOrEqualTo);  buf.setEnabled(true);  root.setRenderState(buf);  BlendState as=new BlendState();  as.setBlendEnabled(true);  root.setRenderState(as);  root.getSceneHints().setRenderBucketType(RenderBucketType.Opaque);  root.getSceneHints().setNormalsMode(NormalsMode.NormalizeIfScaled);  updateGeometricState(0,true);  initialized=true;}  }
class C{  public CharClasses(){}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void await(CountDownLatch latch) throws IgniteInterruptedCheckedException {  try {    if (latch.getCount() > 0)     latch.await();  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();    throw new IgniteInterruptedCheckedException(e);  }}  }
class C{  public static String normalizeDateTime(String value){  XMLDateTime dt=new XMLDateTime(value);  dt.normalize();  return dt.toString();}  }
class C{  public TextStyle jsDocTextStyle(){  TextStyle textStyle=defaultTextStyle().copy();  textStyle.setColor(new RGB(90,139,227));  return textStyle;}  }
class C{  public void mask(int alpha[]){  loadPixels();  if (alpha.length != pixels.length) {    throw new RuntimeException("The PImage used with mask() must be " + "the same size as the applet.");  }  for (int i=0; i < pixels.length; i++) {    pixels[i]=((alpha[i] & 0xff) << 24) | (pixels[i] & 0xffffff);  }  format=ARGB;  updatePixels();}  }
class C{  public void onRenderingStarted(MapPaneEvent ev){}  }
class C{  public void onCenterUpdated(LatLng center){  if (circle != null)   circle.setCenter(center);  if (resizerMarker != null)   resizerMarker.setPosition(MarkerAreasUtils.toRadiusLatLng(center,radius));}  }
class C{  public void fireSensorRemoved(final Sensor sensor){  for (  WorldListener listener : listenerList) {    listener.sensorRemoved(sensor);  }}  }
class C{  @Override public CarbonIterator<Result> executeQuery(List<BlockExecutionInfo> executionInfos,int[] sliceIndexes) throws QueryExecutionException {  long startTime=System.currentTimeMillis();  QueryRunner task;  ScannedResultMerger scannedResultProcessor=new UnSortedScannedResultMerger(executionInfos.get(executionInfos.size() - 1),sliceIndexes.length);  ExecutorService execService=Executors.newFixedThreadPool(numberOfCores);  List<Future> listFutureObjects=new ArrayList<Future>();  try {    for (    int currentSliceIndex : sliceIndexes) {      if (currentSliceIndex == -1) {        continue;      }      executionInfos.get(currentSliceIndex).setScannedResultProcessor(scannedResultProcessor);      task=new QueryRunner(executionInfos.get(currentSliceIndex));      listFutureObjects.add(execService.submit(task));    }    execService.shutdown();    execService.awaitTermination(2,TimeUnit.DAYS);    LOGGER.info("Total time taken for scan " + (System.currentTimeMillis() - startTime));    for (    Future future : listFutureObjects) {      try {        future.get();      } catch (      ExecutionException e) {        throw new QueryExecutionException(e.getMessage());      }    }    return scannedResultProcessor.getQueryResultIterator();  } catch (  QueryExecutionException exception) {    throw new QueryExecutionException(exception);  }catch (  InterruptedException e) {    LOGGER.error(e,e.getMessage());    throw new QueryExecutionException(e);  } finally {    execService=null;    for (    int currentSliceIndex : sliceIndexes) {      if (currentSliceIndex == -1) {        continue;      }      executionInfos.get(currentSliceIndex).setScannedResultProcessor(null);    }  }}  }
class C{  public void unregisterListener(final TeleportListener listener){  listeners.remove(listener);}  }
class C{  public IDevice learnEntity(long macAddress,Short vlan,Integer ipv4Address,Long switchDPID,Integer switchPort){  return learnEntity(macAddress,vlan,ipv4Address,switchDPID,switchPort,true);}  }
class C{  @Override public String toString(){  return "CUDA_ARRAY3D_DESCRIPTOR[" + "Width=" + Width + ","+ "Height="+ Height+ ","+ "Depth="+ Depth+ ","+ "CUarray_format_Format="+ Format+ ","+ "NumChannels="+ NumChannels+ "]";}  }
class C{  @Override public void saveTweet(String tweet){  sPastTweets.add(tweet);}  }
class C{  public void store(@NotNull String licenseText) throws LicenseException {  Objects.requireNonNull(licenseText,"Codenvy license must not be null");  CodenvyLicense codenvyLicense=licenseFactory.create(licenseText);  try {    Files.write(licenseFile,codenvyLicense.getLicenseText().getBytes());  } catch (  IOException e) {    throw new LicenseException(e.getMessage(),e);  }}  }
class C{  GeneralRange<T> reverse(){  GeneralRange<T> result=reverse;  if (result == null) {    result=new GeneralRange<T>(Ordering.from(comparator).reverse(),hasUpperBound,getUpperEndpoint(),getUpperBoundType(),hasLowerBound,getLowerEndpoint(),getLowerBoundType());    result.reverse=this;    return this.reverse=result;  }  return result;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:27.845 -0500",hash_original_method="B3A89783274A7AC251D385A3D94E9779",hash_generated_method="2DF5B9E59D09FF1236C5A7118EDA6FF2") static private boolean isShortCodeUSSD(String dialString,GSMPhone phone){  if (dialString != null) {    if (phone.isInCall()) {      if (dialString.length() <= MAX_LENGTH_SHORT_CODE) {        return true;      }    }    if (dialString.length() <= MAX_LENGTH_SHORT_CODE) {      if (dialString.charAt(dialString.length() - 1) == END_OF_USSD_COMMAND) {        return true;      }    }  }  return false;}  }
class C{  public DotGraphEdge(DotGraphNode src,DotGraphNode dst,boolean directed){  this.start=src;  this.end=dst;  this.isDirected=directed;}  }
class C{  public static <T>T[] newArray(T[] reference,int length){  return Platform.newArray(reference,length);}  }
class C{  public List<Sector> refresh(DrawContext dc,double sectorSize,List<Sector> searchSectors){  if (dc == null) {    String message=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (sectorSize < Angle.SECOND.degrees || sectorSize > 180) {    String message=Logging.getMessage("generic.SizeOutOfRange",sectorSize);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (searchSectors == null) {    String message=Logging.getMessage("nullValue.SectorListIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.swapCylinderLists(dc);  this.sectors=new ArrayList<Sector>();  this.sectorSize=sectorSize;  for (  Sector s : searchSectors) {    this.tree.traverse(s,new Context(dc,sectorSize,this.sectors));  }  Collections.sort(this.sectors);  return this.sectors;}  }
class C{  public void addDropRS(){  int old=_dropRS;  _dropRS++;  setDirtyAndFirePropertyChange("locationAddDropRS",Integer.toString(old),Integer.toString(_dropRS));}  }
class C{  public EventBus(){  this("default");}  }
class C{  private void doUpdate(HttpServletRequest request,CrossListsModifyForm frm) throws Exception {  List ids=frm.getCourseOfferingIds();  String courseIds=Constants.arrayToStr(ids.toArray(),""," ");  String origCourseIds=frm.getOriginalOfferings();  CourseOfferingDAO cdao=new CourseOfferingDAO();  InstructionalOfferingDAO idao=new InstructionalOfferingDAO();  InstructionalOffering io=idao.get(frm.getInstrOfferingId());  Session hibSession=idao.getSession();  hibSession.setFlushMode(FlushMode.MANUAL);  Transaction tx=null;  HashMap saList=new HashMap();  List<CurriculumCourse> cc=new ArrayList<CurriculumCourse>();  try {    tx=hibSession.beginTransaction();    StringTokenizer strTok=new StringTokenizer(origCourseIds);    while (strTok.hasMoreTokens()) {      String origCrs=strTok.nextToken();      if (courseIds.indexOf(origCrs) < 0) {        Debug.debug("Course removed from offering: " + origCrs);        InstructionalOffering io1=new InstructionalOffering();        CourseOffering co1=cdao.get(new Long(origCrs.trim()));        sessionContext.checkPermission(co1,Right.CourseOfferingDeleteFromCrossList);        io1.setDemand(io.getDemand());        io1.setLimit(io.getLimit());        io1.setNotOffered(new Boolean(true));        io1.setSession(io.getSession());        io1.setByReservationOnly(io.getByReservationOnly());        CourseOffering co2=(CourseOffering)co1.clone();        co2.setIsControl(new Boolean(true));        for (        CurriculumCourse x : (List<CurriculumCourse>)hibSession.createQuery("from CurriculumCourse where course.uniqueId = :courseId").setLong("courseId",co1.getUniqueId()).list()) {          cc.add(x.clone(co2));          x.getClassification().getCourses().remove(x);          hibSession.delete(x);        }        Set offerings=io.getCourseOfferings();        for (Iterator i=offerings.iterator(); i.hasNext(); ) {          CourseOffering co3=(CourseOffering)i.next();          if (co3.equals(co1)) {            SubjectArea sa=co3.getSubjectArea();            sa.getCourseOfferings().remove(co1);            hibSession.saveOrUpdate(sa);            saList.put(sa.getSubjectAreaAbbreviation(),sa);          }        }        io.removeCourseOffering(co1);        Event.deleteFromEvents(hibSession,co1);        Exam.deleteFromExams(hibSession,co1);        String className=ApplicationProperty.ExternalActionCourseOfferingRemove.value();        if (className != null && className.trim().length() > 0) {          ExternalCourseOfferingRemoveAction removeAction=(ExternalCourseOfferingRemoveAction)(Class.forName(className).newInstance());          removeAction.performExternalCourseOfferingRemoveAction(co1,hibSession);        }        hibSession.delete(co1);        hibSession.saveOrUpdate(io);        hibSession.flush();        co2.setInstructionalOffering(io1);        io1.addTocourseOfferings(co2);        if (io1.getInstrOfferingPermId() == null)         io1.generateInstrOfferingPermId();        hibSession.saveOrUpdate(io1);        hibSession.flush();        hibSession.refresh(io);        hibSession.refresh(io1);        className=ApplicationProperty.ExternalActionInstructionalOfferingInCrosslistAdd.value();        if (className != null && className.trim().length() > 0) {          ExternalInstructionalOfferingInCrosslistAddAction addAction=(ExternalInstructionalOfferingInCrosslistAddAction)(Class.forName(className).newInstance());          addAction.performExternalInstructionalOfferingInCrosslistAddAction(io1,hibSession);        }      } else {        Debug.debug("Updating controlling course  and course reservation: " + origCrs);        CourseOffering co=cdao.get(new Long(origCrs));        if (frm.getCtrlCrsOfferingId().equals(co.getUniqueId()))         co.setIsControl(new Boolean(true)); else         co.setIsControl(new Boolean(false));        int indx=frm.getIndex(origCrs);        try {          co.setReservation(ids.size() > 1 ? Integer.valueOf(frm.getLimits(indx)) : null);        } catch (        NumberFormatException e) {          co.setReservation(null);        }        hibSession.saveOrUpdate(co);        hibSession.flush();        hibSession.refresh(co);      }    }    Vector addedOfferings=new Vector();    StringTokenizer strTok2=new StringTokenizer(courseIds);    while (strTok2.hasMoreTokens()) {      String course=strTok2.nextToken();      if (origCourseIds.indexOf(course) < 0) {        Debug.debug("Course added to offering: " + course);        CourseOffering co1=cdao.get(new Long(course.trim()));        InstructionalOffering io1=co1.getInstructionalOffering();        SubjectArea sa=io1.getControllingCourseOffering().getSubjectArea();        Set offerings=io1.getCourseOfferings();        for (Iterator i=offerings.iterator(); i.hasNext(); ) {          CourseOffering co2=(CourseOffering)i.next();          SubjectArea sa2=co2.getSubjectArea();          CourseOffering co3=(CourseOffering)co2.clone();          if (frm.getCtrlCrsOfferingId().equals(co2.getUniqueId()))           co3.setIsControl(new Boolean(true)); else           co3.setIsControl(new Boolean(false));          for (          CurriculumCourse x : (List<CurriculumCourse>)hibSession.createQuery("from CurriculumCourse where course.uniqueId = :courseId").setLong("courseId",co2.getUniqueId()).list()) {            cc.add(x.clone(co3));            x.getClassification().getCourses().remove(x);            hibSession.delete(x);          }          addedOfferings.addElement(co3);          int indx=frm.getIndex(course);          try {            co3.setReservation(Integer.valueOf(frm.getLimits(indx)));          } catch (          NumberFormatException e) {            co3.setReservation(null);          }          sa2.getCourseOfferings().remove(co2);          hibSession.saveOrUpdate(sa2);          saList.put(sa2.getSubjectAreaAbbreviation(),sa2);          io1.removeCourseOffering(co2);          Event.deleteFromEvents(hibSession,co2);          Exam.deleteFromExams(hibSession,co2);          String className=ApplicationProperty.ExternalActionCourseOfferingRemove.value();          if (className != null && className.trim().length() > 0) {            ExternalCourseOfferingRemoveAction removeAction=(ExternalCourseOfferingRemoveAction)(Class.forName(className).newInstance());            removeAction.performExternalCourseOfferingRemoveAction(co2,hibSession);          }          hibSession.delete(co2);          hibSession.flush();        }        Event.deleteFromEvents(hibSession,io1);        Exam.deleteFromExams(hibSession,io1);        hibSession.delete(io1);        hibSession.flush();        hibSession.saveOrUpdate(sa);        saList.put(sa.getSubjectAreaAbbreviation(),sa);      }    }    hibSession.flush();    for (int i=0; i < addedOfferings.size(); i++) {      CourseOffering co3=(CourseOffering)addedOfferings.elementAt(i);      co3.setInstructionalOffering(io);      io.addTocourseOfferings(co3);      hibSession.saveOrUpdate(co3);      hibSession.flush();      hibSession.refresh(co3);      hibSession.saveOrUpdate(io);    }    for (    CurriculumCourse x : cc)     hibSession.saveOrUpdate(x);    Department dept=io.getControllingCourseOffering().getDepartment();    Set cfgs=io.getInstrOfferingConfigs();    for (Iterator iterCfg=cfgs.iterator(); iterCfg.hasNext(); ) {      InstrOfferingConfig cfg=(InstrOfferingConfig)iterCfg.next();      Set subparts=cfg.getSchedulingSubparts();      for (Iterator iterSbp=subparts.iterator(); iterSbp.hasNext(); ) {        SchedulingSubpart subpart=(SchedulingSubpart)iterSbp.next();        Set classes=subpart.getClasses();        for (Iterator iterCls=classes.iterator(); iterCls.hasNext(); ) {          Class_ cls=(Class_)iterCls.next();          if (!cls.getManagingDept().isExternalManager()) {            cls.setManagingDept(dept,sessionContext.getUser(),hibSession);            hibSession.saveOrUpdate(cls);          }        }      }    }    ChangeLog.addChange(hibSession,sessionContext,io,ChangeLog.Source.CROSS_LIST,ChangeLog.Operation.UPDATE,io.getControllingCourseOffering().getSubjectArea(),null);    tx.commit();    hibSession.flush();    hibSession.clear();    hibSession.refresh(io);    for (Iterator i1=io.getInstrOfferingConfigs().iterator(); i1.hasNext(); ) {      InstrOfferingConfig cfg=(InstrOfferingConfig)i1.next();      for (Iterator i2=cfg.getSchedulingSubparts().iterator(); i2.hasNext(); ) {        SchedulingSubpart ss=(SchedulingSubpart)i2.next();        for (Iterator i3=ss.getClasses().iterator(); i3.hasNext(); ) {          Class_ c=(Class_)i3.next();          hibSession.refresh(c);        }        hibSession.refresh(ss);      }    }    Set keys=saList.keySet();    for (Iterator i1=keys.iterator(); i1.hasNext(); ) {      hibSession.refresh(saList.get(i1.next()));    }    String className=ApplicationProperty.ExternalActionCourseCrosslist.value();    if (className != null && className.trim().length() > 0) {      ExternalCourseCrosslistAction addAction=(ExternalCourseCrosslistAction)(Class.forName(className).newInstance());      addAction.performExternalCourseCrosslistAction(io,hibSession);    }  } catch (  Exception e) {    Debug.error(e);    try {      if (tx != null && tx.isActive())       tx.rollback();    } catch (    Exception e1) {    }    throw e;  }}  }
class C{  public final void printInitialClusteringChanges(File file,List<ClusterData> clusterData,int[] matIndexToMsgInternalId) throws AdeUsageException {  if (m_initialClusters == null) {    return;  }  final PrintWriter out=FileUtils.openPrintWriterToFile(file,true);  if (m_finalClusters == null) {    updateClusters(clusterData,matIndexToMsgInternalId);  }  int countNoChange=0;  int countContained=0;  for (  Map.Entry<String,ArrayList<Integer>> entry : m_initialClusters.entrySet()) {    final String name=entry.getKey();    final ArrayList<Integer> members=entry.getValue();    out.printf("%s %s ",name,members);    int countC=0;    boolean splitFlag=true;    final ArrayList<String> names=new ArrayList<String>();    for (    Map.Entry<String,Collection<Integer>> newEntry : m_finalClusters.entrySet()) {      final Collection<Integer> newMembers=newEntry.getValue();      final String newName=newEntry.getKey();      int countM=0;      boolean updateC=true;      for (      int m : newMembers) {        if (members.contains(matIndexToMsgInternalId[m])) {          if (updateC) {            countC++;            updateC=false;            names.add(newName);          }          countM++;        }      }      if (countM == members.size()) {        splitFlag=false;        if (members.size() == newMembers.size()) {          out.printf(" did not change.%n");          countNoChange++;        } else {          out.printf(" is contained in %s.%n",newName);          countContained++;        }        break;      }    }    if (splitFlag) {      out.printf("split to %d clusters: %s%n",countC,names);    }  }  out.printf("Summary:%n%d clusters did not change.%n%d clusters are contained.%n%d clusters split.%n",countNoChange,countContained,m_initialClusters.size() - countNoChange - countContained);  out.close();}  }
class C{  final public SimpleNode Directive() throws ParseException {  ASTDirective jjtn000=new ASTDirective(this,JJTDIRECTIVE);  boolean jjtc000=true;  jjtree.openNodeScope(jjtn000);  Token t=null;  int argType;  int argPos=0;  Directive d;  int directiveType;  boolean isVM=false;  boolean doItNow=false;  try {    t=jj_consume_token(WORD);    String directiveName=t.image.substring(1);    d=(Directive)directives.get(directiveName);    if (directiveName.equals("macro")) {      doItNow=true;    }    jjtn000.setDirectiveName(directiveName);    if (d == null) {      directiveType=Directive.LINE;    } else {      directiveType=d.getType();    }    token_source.SwitchTo(DIRECTIVE);    argPos=0;switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case WHITESPACE:      jj_consume_token(WHITESPACE);    break;default :  jj_la1[6]=jj_gen;;}jj_consume_token(LPAREN);label_3: while (true) {if (jj_2_4(2)) {;} else {break label_3;}switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case WHITESPACE:jj_consume_token(WHITESPACE);break;default :jj_la1[7]=jj_gen;;}argType=DirectiveArg();if (argType == ParserTreeConstants.JJTWORD) {if (doItNow && argPos == 0) {;} else if (t.image.equals("#foreach") && argPos == 1) {;} else {{if (true) throw new MacroParseException("Invalid arg #" + argPos + " in "+ (isVM ? "VM " : "directive ")+ t.image+ " at line "+ t.beginLine+ ", column "+ t.beginColumn+ " in template "+ currentTemplateName);}}} else {if (doItNow && argPos == 0) {{if (true) throw new MacroParseException("Invalid first arg " + " in #macro() directive - must be a" + " word token (no \' or \" surrounding)"+ " at line " + t.beginLine + ", column "+ t.beginColumn+ " in template "+ currentTemplateName);}}}argPos++;}switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case WHITESPACE:jj_consume_token(WHITESPACE);break;default :jj_la1[8]=jj_gen;;}jj_consume_token(RPAREN);if (directiveType == Directive.LINE) {{if (true) return jjtn000;}}ASTBlock jjtn001=new ASTBlock(this,JJTBLOCK);boolean jjtc001=true;jjtree.openNodeScope(jjtn001);try {label_4: while (true) {Statement();switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case LPAREN:case RPAREN:case ESCAPE_DIRECTIVE:case SET_DIRECTIVE:case DOUBLE_ESCAPE:case ESCAPE:case TEXT:case SINGLE_LINE_COMMENT:case FORMAL_COMMENT:case MULTI_LINE_COMMENT:case STRING_LITERAL:case IF_DIRECTIVE:case STOP_DIRECTIVE:case NUMBER_LITERAL:case WORD:case IDENTIFIER:case DOT:case LCURLY:case RCURLY:;break;default :jj_la1[9]=jj_gen;break label_4;}}} catch (Throwable jjte001) {if (jjtc001) {jjtree.clearNodeScope(jjtn001);jjtc001=false;} else {jjtree.popNode();}if (jjte001 instanceof RuntimeException) {{if (true) throw (RuntimeException)jjte001;}}if (jjte001 instanceof ParseException) {{if (true) throw (ParseException)jjte001;}}{if (true) throw (Error)jjte001;}} finally {if (jjtc001) {jjtree.closeNodeScope(jjtn001,true);}}jj_consume_token(END);jjtree.closeNodeScope(jjtn000,true);jjtc000=false;if (doItNow) {Macro.processAndRegister(rsvc,jjtn000,currentTemplateName);}{if (true) return jjtn000;}} catch (Throwable jjte000) {if (jjtc000) {jjtree.clearNodeScope(jjtn000);jjtc000=false;} else {jjtree.popNode();}if (jjte000 instanceof RuntimeException) {{if (true) throw (RuntimeException)jjte000;}}if (jjte000 instanceof ParseException) {{if (true) throw (ParseException)jjte000;}}{if (true) throw (Error)jjte000;}} finally {if (jjtc000) {jjtree.closeNodeScope(jjtn000,true);}}throw new Error("Missing return statement in function");}  }
class C{  void appendParameters(Document xmldoc,Element parent,LocalizerServiceLocal localizer,TechnicalProduct technicalProduct){  List<ParameterDefinition> definitions=technicalProduct.getParameterDefinitions();  for (  ParameterDefinition def : definitions) {    Element defNode=xmldoc.createElement("ParameterDefinition");    defNode.setAttribute("id",def.getParameterId());    defNode.setAttribute("valueType",def.getValueType().name());    defNode.setAttribute("mandatory",String.valueOf(def.isMandatory()));    defNode.setAttribute("configurable",String.valueOf(def.isConfigurable()));    Long minimumValue=def.getMinimumValue();    if (minimumValue != null) {      defNode.setAttribute("minValue",String.valueOf(minimumValue.longValue()));    }    Long maximumValue=def.getMaximumValue();    if (maximumValue != null) {      defNode.setAttribute("maxValue",String.valueOf(maximumValue.longValue()));    }    String defaultValue=def.getDefaultValue();    if (defaultValue != null) {      defNode.setAttribute("default",defaultValue);    }    ParameterModificationType modificationType=def.getModificationType();    if (modificationType == ParameterModificationType.ONE_TIME) {      defNode.setAttribute("modificationType",modificationType.name());    }    parent.appendChild(defNode);    appendOptions(xmldoc,localizer,def,defNode);    appendLocalizedValues(xmldoc,localizer,defNode,LocalizedObjectTypes.PARAMETER_DEF_DESC,def.getKey(),"LocalizedDescription");  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public Kernel mul(double v){  for (int i=0; i < values.length; i++) {    values[i]*=v;  }  return this;}  }
class C{  public int decryptBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if ((inOff + blockSize) > in.length) {    throw new DataLengthException("input buffer too short");  }  if ((outOff + blockSize) > out.length) {    throw new DataLengthException("output buffer too short");  }  cipher.processBlock(cfbV,0,cfbOutV,0);  System.arraycopy(cfbV,blockSize,cfbV,0,cfbV.length - blockSize);  System.arraycopy(in,inOff,cfbV,cfbV.length - blockSize,blockSize);  for (int i=0; i < blockSize; i++) {    out[outOff + i]=(byte)(cfbOutV[i] ^ in[inOff + i]);  }  return blockSize;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Vector3d reflect(double x,double y,double z){  double dot=this.dot(x,y,z);  this.x=this.x - (dot + dot) * x;  this.y=this.y - (dot + dot) * y;  this.z=this.z - (dot + dot) * z;  return this;}  }
class C{  public static MoveBucketResponse send(InternalDistributedMember recipient,PartitionedRegion region,int bucketId,InternalDistributedMember source){  Assert.assertTrue(recipient != null,"MoveBucketMessage NULL recipient");  MoveBucketResponse response=new MoveBucketResponse(region.getSystem(),recipient,region);  MoveBucketMessage msg=new MoveBucketMessage(recipient,region.getPRId(),response,bucketId,source);  Set<InternalDistributedMember> failures=region.getDistributionManager().putOutgoing(msg);  if (failures != null && failures.size() > 0) {    return null;  }  region.getPrStats().incPartitionMessagesSent();  return response;}  }
class C{  public void clearInactiveDownloads(){  for (int i=this.monitorPanel.getComponentCount() - 1; i >= 0; i--) {    Component c=this.monitorPanel.getComponents()[i];    if (c instanceof DownloadMonitorPanel) {      DownloadMonitorPanel panel=(DownloadMonitorPanel)c;      if (!panel.thread.isAlive() || panel.thread.isInterrupted()) {        this.monitorPanel.remove(i);      }    }  }  this.monitorPanel.validate();}  }
class C{  @Override protected void reloadSummaries(){  super.reloadSummaries();  long localLong, globalLong;  localLong=mDPM.getMaximumTimeToLock(mDeviceAdminSample);  globalLong=mDPM.getMaximumTimeToLock(null);  mMaxTimeScreenLock.setSummary(localGlobalSummary(localLong / MS_PER_MINUTE,globalLong / MS_PER_MINUTE));  int local, global;  local=mDPM.getMaximumFailedPasswordsForWipe(mDeviceAdminSample);  global=mDPM.getMaximumFailedPasswordsForWipe(null);  mMaxFailures.setSummary(localGlobalSummary(local,global));}  }
class C{  public static IStatus validateFieldName(String name,String sourceLevel,String complianceLevel){  return validateIdentifier(name,sourceLevel,complianceLevel);}  }
class C{  public JaspellLookup(){}  }
class C{  public SQLWarning(String reason,Throwable cause){  super(reason,cause);}  }
class C{  private void internalCreateEObjectDescription(TVariable type,IAcceptor<IEObjectDescription> acceptor){  QualifiedName qualifiedName=qualifiedNameProvider.getFullyQualifiedName(type);  if (qualifiedName != null) {    IEObjectDescription eod=EObjectDescription.create(qualifiedName,type);    acceptor.accept(eod);  }}  }
class C{  public ViolationInfo(){  crashInfo=null;  policy=0;}  }
class C{  public void testBug15141() throws Exception {  try {    createTable("testBug15141","(field1 VARCHAR(32))");    this.stmt.executeUpdate("INSERT INTO testBug15141 VALUES ('abc')");    this.pstmt=this.conn.prepareStatement("select {d '1997-05-24'} FROM testBug15141");    this.rs=this.pstmt.executeQuery();    assertTrue(this.rs.next());    assertEquals("1997-05-24",this.rs.getString(1));    this.rs.close();    this.rs=null;    this.pstmt.close();    this.pstmt=null;    this.pstmt=((com.mysql.jdbc.Connection)this.conn).clientPrepareStatement("select {d '1997-05-24'} FROM testBug15141");    this.rs=this.pstmt.executeQuery();    assertTrue(this.rs.next());    assertEquals("1997-05-24",this.rs.getString(1));    this.rs.close();    this.rs=null;    this.pstmt.close();    this.pstmt=null;  }  finally {    if (this.rs != null) {      ResultSet toCloseRs=this.rs;      this.rs=null;      toCloseRs.close();    }    if (this.pstmt != null) {      PreparedStatement toClosePstmt=this.pstmt;      this.pstmt=null;      toClosePstmt.close();    }  }}  }
class C{  private void makeButtonsForHidden(final int vnum,final int first,final int count,final int dim){  final double lpos, rpos;  if (vnum == 0) {    lpos=-getMarginLeft();  } else {    lpos=getVisibleAxisX(vnum - 1);  }  if (first + count + 1 >= dim) {    rpos=getWidth() + getMarginLeft();  } else {    rpos=getVisibleAxisX(vnum);  }  final double step=(rpos - lpos) / (count + 1.0);  for (int j=0; j < count; j++) {    final double apos=lpos + (j + 1) * step - buttonsize * .5;    Element border=svgp.svgRect(apos,ypos,buttonsize,buttonsize);    SVGUtil.addCSSClass(border,SAV_BORDER);    layer.appendChild(border);    Element rect=svgp.svgRect(apos,ypos,buttonsize,buttonsize);    SVGUtil.addCSSClass(rect,SAV_BUTTON);    addEventListener(rect,first + j);    layer.appendChild(rect);  }}  }
class C{  @AntDoc("A module to be compiled") public void addConfiguredModule(Module module){  this.moduleSet.addConfiguredModule(module);}  }
class C{  private void signalNotEmpty(){  final ReentrantLock takeLock=this.takeLock;  takeLock.lock();  try {    notEmpty.signal();  }  finally {    takeLock.unlock();  }}  }
class C{  public Ministry(){  jobCounter=Sage.getInt(NEXT_JOB_ID,1);  if (!Sage.EMBEDDED) {    for (int i=0; i < DEAD_FORMAT_NAMES.length; i++)     Sage.remove("transcoder/formats/" + DEAD_FORMAT_NAMES[i]);    for (int i=0; i < PREDEFINED_TRANSCODER_FORMATS.length; i++)     Sage.put("transcoder/formats/" + PREDEFINED_TRANSCODER_FORMATS[i][0],PREDEFINED_TRANSCODER_FORMATS[i][1]);    if (MMC.getInstance().isNTSCVideoFormat()) {      for (int i=0; i < PREDEFINED_TRANSCODER_FORMATS_NTSC.length; i++)       Sage.put("transcoder/formats/" + PREDEFINED_TRANSCODER_FORMATS_NTSC[i][0],PREDEFINED_TRANSCODER_FORMATS_NTSC[i][1]);    } else {      for (int i=0; i < PREDEFINED_TRANSCODER_FORMATS_PAL.length; i++)       Sage.put("transcoder/formats/" + PREDEFINED_TRANSCODER_FORMATS_PAL[i][0],PREDEFINED_TRANSCODER_FORMATS_PAL[i][1]);    }  }}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:07.046 -0500",hash_original_method="B75D6FC2C98C385FE0F3914F9044B1F0",hash_generated_method="AFC1647D93FCCD35E1201C8E70FF4F45") @Override public void send(HandshakeIODataStream out){  out.writeUint8(certificate_types.length);  for (int i=0; i < certificate_types.length; i++) {    out.write(certificate_types[i]);  }  int authoritiesLength=0;  for (int i=0; i < certificate_authorities.length; i++) {    authoritiesLength+=encoded_principals[i].length + 2;  }  out.writeUint16(authoritiesLength);  for (int i=0; i < certificate_authorities.length; i++) {    out.writeUint16(encoded_principals[i].length);    out.write(encoded_principals[i]);  }}  }
class C{  public Object convert(Class<?> targetType,Object valueToConvert) throws JavaTypeTranslatorException {  Decimal rVal=null;  if (valueToConvert == null) {    throw new JavaTypeTranslatorException("Null passed toObjectToDecimal.convert()");  }  if (valueToConvert instanceof String) {    String stringValue=(String)valueToConvert;    rVal=new Decimal(stringValue,2);  } else {    throw new JavaTypeTranslatorException("internal error parsing value");  }  return (rVal);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:55.363 -0500",hash_original_method="ABC17F5FB7BD95EF5278D9B937F06D5F",hash_generated_method="783A8969227B068302CF8EEB89CF506B") public void addProductToken(String pt){  productTokens.add(pt);}  }
class C{  private void crawlChildrenAndImport(String path) throws RepositoryException, CoreException, IOException, SerializationException {  logger.trace("crawlChildrenAndImport({0},  {1}, {2}, {3}",repository,path,project,projectRelativePath);  ResourceProxy resource=executeCommand(repository.newListChildrenNodeCommand(path));  SerializationData serializationData=builder.buildSerializationData(contentSyncRoot,resource);  logger.trace("For resource at path {0} got serialization data {1}",resource.getPath(),serializationData);  final List<ResourceProxy> resourceChildren=new LinkedList<ResourceProxy>(resource.getChildren());  if (serializationData != null) {    IPath serializationFolderPath=contentSyncRootDir.getProjectRelativePath().append(serializationData.getFolderPath());switch (serializationData.getSerializationKind()) {case FILE:{        byte[] contents=executeCommand(repository.newGetNodeCommand(path));        createFile(project,getPathForPlainFileNode(resource,serializationFolderPath),contents);        if (serializationData.hasContents()) {          createFolder(project,serializationFolderPath);          createFile(project,serializationFolderPath.append(serializationData.getFileName()),serializationData.getContents());          for (Iterator<ResourceProxy> it=resourceChildren.iterator(); it.hasNext(); ) {            ResourceProxy child=it.next();            if (Repository.NT_RESOURCE.equals(child.getProperties().get(Repository.JCR_PRIMARY_TYPE))) {              ResourceProxy reloadedChildResource=executeCommand(repository.newListChildrenNodeCommand(child.getPath()));              logger.trace("Skipping direct handling of {0} node at {1} ; will additionally handle {2} direct children",Repository.NT_RESOURCE,child.getPath(),reloadedChildResource.getChildren().size());              if (reloadedChildResource.getChildren().size() != 0) {                String pathName=Text.getName(reloadedChildResource.getPath());                pathName=serializationManager.getOsPath(pathName);                createFolder(project,serializationFolderPath.append(pathName));                for (                ResourceProxy grandChild : reloadedChildResource.getChildren()) {                  crawlChildrenAndImport(grandChild.getPath());                }              }              it.remove();              break;            }          }        }        break;      }case FOLDER:case METADATA_PARTIAL:{      IFolder folder=createFolder(project,serializationFolderPath);      parseIgnoreFiles(folder,path);      if (serializationData.hasContents()) {        createFile(project,serializationFolderPath.append(serializationData.getFileName()),serializationData.getContents());      }      break;    }case METADATA_FULL:{    if (serializationData.hasContents()) {      createFile(project,serializationFolderPath.append(serializationData.getFileName()),serializationData.getContents());    }    break;  }}logger.trace("Resource at {0} has children: {1}",resource.getPath(),resourceChildren);if (serializationData.getSerializationKind() == SerializationKind.METADATA_FULL) {return;}} else {logger.trace("No serialization data found for {0}",resource.getPath());}for (ResourceProxy child : resourceChildren) {if (ignoredResources.isIgnored(child.getPath())) {continue;}if (filter != null) {FilterResult filterResult=filter.filter(child.getPath());if (filterResult == FilterResult.DENY) {  continue;}}crawlChildrenAndImport(child.getPath());}}  }
class C{  void waitForExit(){  Runtime runtime=Runtime.getRuntime();  ShutdownSystem shutdown=_resinSystem.getSystem(ShutdownSystem.class);  if (shutdown == null) {    throw new IllegalStateException(L.l("'{0}' requires an active {1}",this,ShutdownSystem.class.getSimpleName()));  }  while (!_server.isClosing()) {    try {      Thread.sleep(10);      if (!checkMemory(runtime)) {        shutdown.shutdown(ShutdownModeAmp.IMMEDIATE,ExitCode.MEMORY,"Server shutdown from out of memory");        return;      }      if (!checkFileDescriptor()) {        shutdown.shutdown(ShutdownModeAmp.IMMEDIATE,ExitCode.MEMORY,"Server shutdown from out of file descriptors");        return;      }synchronized (this) {        wait(10000);      }    } catch (    OutOfMemoryError e) {      String msg="Server shutdown from out of memory";      ShutdownSystem.shutdownOutOfMemory(msg);    }catch (    Throwable e) {      log.log(Level.WARNING,e.toString(),e);      return;    }  }}  }
class C{  public static final boolean isLetter(char ch){  return (ch <= 'z') && (dataTable[ch] & LETTER_MASK) > 0;}  }
class C{  public DosResultJFrame(AttackModel model){  this.model=model;  resultGenerator=new ResultGenerator(model);  initComponents();}  }
class C{  public static <T>int binarySearchFloor(List<? extends Comparable<? super T>> list,T key,boolean inclusive,boolean stayInBounds){  int index=Collections.binarySearch(list,key);  index=index < 0 ? -(index + 2) : (inclusive ? index : (index - 1));  return stayInBounds ? Math.max(0,index) : index;}  }
class C{  static final int spread(int h){  return (h ^ (h >>> 16)) & HASH_BITS;}  }
class C{  public void addFload(int n){  if (n < 4)   addOpcode(34 + n); else   if (n < 0x100) {    addOpcode(FLOAD);    add(n);  } else {    addOpcode(WIDE);    addOpcode(FLOAD);    addIndex(n);  }}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster image;  int cols, rows, col, row, a, numImages, loopNum, progress;  double noData;  String inputFilesString;  String[] imageFiles;  String[] shortNames;  long[] imageNs;  boolean isZeroBackground;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  isZeroBackground=Boolean.parseBoolean(args[1]);  try {    imageNs=new long[numImages];    shortNames=new String[numImages];    double[] data;    loopNum=0;    for (a=0; a < numImages; a++) {      loopNum++;      updateProgress("Loop " + loopNum + " of "+ numImages+ ":",0);      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      rows=image.getNumberRows();      cols=image.getNumberColumns();      shortNames[a]=image.getShortHeaderFile();      if (isZeroBackground) {        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData && data[col] != 0) {              imageNs[a]++;            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(row * 100.0 / rows);          updateProgress("Loop " + loopNum + " of "+ numImages+ ":",progress);        }      } else {        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData) {              imageNs[a]++;            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(row * 100.0 / rows);          updateProgress("Loop " + loopNum + " of "+ numImages+ ":",progress);        }      }      image.close();    }    String retstr;    DecimalFormat df=new DecimalFormat("###,###,###,###");    retstr="Number of Grid Cells:\n\n";    for (a=0; a < numImages; a++) {      retstr+=shortNames[a] + ":\t" + df.format(imageNs[a])+ "\n";    }    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public int scanForward(int start,int bound,StopCondition condition){  assert (start >= 0);  if (bound == UNBOUND) {    bound=_document.getLength();  }  assert (bound <= _document.getLength());  try {    _pos=start;    while (_pos < bound) {      _char=_document.getChar(_pos);      if (condition.stop(_char,_pos,true)) {        return _pos;      }      _pos++;    }  } catch (  BadLocationException e) {  }  return NOT_FOUND;}  }
class C{  private SDCardUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public static List<VolumeDescriptor> filterByType(List<VolumeDescriptor> descriptors,Type[] inclusive,Type[] exclusive){  List<VolumeDescriptor> result=new ArrayList<VolumeDescriptor>();  if (descriptors == null) {    return result;  }  HashSet<Type> included=new HashSet<Type>();  if (inclusive != null) {    included.addAll(Arrays.asList(inclusive));  }  HashSet<Type> excluded=new HashSet<Type>();  if (exclusive != null) {    excluded.addAll(Arrays.asList(exclusive));  }  for (  VolumeDescriptor desc : descriptors) {    if (excluded.contains(desc.getType())) {      continue;    }    if (included.isEmpty() || included.contains(desc.getType())) {      result.add(desc);    }  }  return result;}  }
class C{  public void removeUpdate(DocumentEvent e){  m_ApplyButton.setEnabled(isValidFormat());}  }
class C{  public Builder withPreviousIndex(long index){  request.previousIndex=Assert.argNot(index,index < 0,"index cannot be less than 0");  return this;}  }
class C{  private static byte[] readBytes(InputStream source,int length) throws IOException {  byte[] result=new byte[length];  for (int i=0; i < length; i++) {    int bytik=source.read();    if (bytik == -1) {      return null;    }    result[i]=(byte)bytik;  }  return result;}  }
class C{  public void removeCouplings(final ArrayList<Coupling<?>> couplings){  for (  Coupling<?> coupling : couplings) {    removeCoupling(coupling);  }}  }
class C{  protected boolean onSendError(RecordBuffer<R> buffer,Throwable t){  sendError.incrementAndGet();  if (isRetriableSendException(t)) {    logger.error("{}:{} Retriable send error ({}: {}). Will retry.",name(),buffer,t.getClass().getName(),t.getMessage());    return queueBufferForRetry(buffer);  } else {    logger.error("{}:{} Non-retriable send error. Will NOT retry.",name(),buffer,t);    onBufferDropped(buffer,"non-retriable exception (" + t.getClass().getName() + ")");    return false;  }}  }
class C{  public static List<String> findSchemeMatch(Class<?> classType,String schemeToFind,boolean matchAnywhere,boolean notJustRunnables){  weka.core.ClassDiscovery.clearCache();  ArrayList<String> matches=weka.core.ClassDiscovery.find(schemeToFind);  ArrayList<String> prunedMatches=new ArrayList<String>();  for (int i=0; i < matches.size(); i++) {    if (matches.get(i).endsWith(schemeToFind) || matchAnywhere) {      try {        Object scheme=java.beans.Beans.instantiate((new Run()).getClass().getClassLoader(),matches.get(i));        if (classType == null || classType.isAssignableFrom(scheme.getClass())) {          if (notJustRunnables || scheme instanceof weka.classifiers.Classifier || scheme instanceof weka.clusterers.Clusterer|| scheme instanceof weka.associations.Associator|| scheme instanceof weka.attributeSelection.ASEvaluation|| scheme instanceof weka.filters.Filter|| scheme instanceof weka.core.converters.AbstractFileLoader|| scheme instanceof weka.core.converters.AbstractFileSaver|| scheme instanceof weka.datagenerators.DataGenerator|| scheme instanceof weka.core.CommandlineRunnable) {            prunedMatches.add(matches.get(i));          }        }      } catch (      Exception ex) {      }    }  }  return prunedMatches;}  }
class C{  protected static GenericsType fullyResolve(GenericsType gt,Map<String,GenericsType> placeholders){  GenericsType fromMap=placeholders.get(gt.getName());  if (gt.isPlaceholder() && fromMap != null) {    gt=fromMap;  }  ClassNode type=fullyResolveType(gt.getType(),placeholders);  ClassNode lowerBound=gt.getLowerBound();  if (lowerBound != null)   lowerBound=fullyResolveType(lowerBound,placeholders);  ClassNode[] upperBounds=gt.getUpperBounds();  if (upperBounds != null) {    ClassNode[] copy=new ClassNode[upperBounds.length];    for (int i=0, upperBoundsLength=upperBounds.length; i < upperBoundsLength; i++) {      final ClassNode upperBound=upperBounds[i];      copy[i]=fullyResolveType(upperBound,placeholders);    }    upperBounds=copy;  }  GenericsType genericsType=new GenericsType(type,upperBounds,lowerBound);  genericsType.setWildcard(gt.isWildcard());  return genericsType;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter an integer: ");  int value=input.nextInt();  reverseDisplay(value);}  }
class C{  protected static void param2Attr(HttpServletRequest request,String name){  String val=request.getParameter(name);  if (val != null) {    request.setAttribute(name,val.trim());  }}  }
class C{  private static Date cloneDate(Date date){  if (date == null) {    return null;  }  return (Date)date.clone();}  }
class C{  public static ValidationExceptionBean parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ValidationExceptionBean object=new ValidationExceptionBean();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"validationExceptionBean".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (ValidationExceptionBean)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list4=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","causeStackTrace").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setCauseStackTrace(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","id").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","messageKey").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setMessageKey(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","messageParams").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list4.add(null);        reader.next();      } else {        list4.add(reader.getElementText());      }      boolean loopDone4=false;      while (!loopDone4) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement())         reader.next();        if (reader.isEndElement()) {          loopDone4=true;        } else {          if (new javax.xml.namespace.QName("http://oscm.org","messageParams").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list4.add(null);              reader.next();            } else {              list4.add(reader.getElementText());            }          } else {            loopDone4=true;          }        }      }      object.setMessageParams((java.lang.String[])list4.toArray(new java.lang.String[list4.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","member").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setMember(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","reason").equals(reader.getName())) {      object.setReason(ReasonEnum.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  private void bind() throws BindException {  SocketAddress address=getBindAddress(Key.SERVER_PORT);  logger.info("Binding to address: " + address + "...");  ChannelFuture future=networkServer.bind(address);  Channel channel=future.awaitUninterruptibly().channel();  if (!channel.isActive()) {    Throwable cause=future.cause();    if (cause instanceof BindException) {      throw (BindException)cause;    }    throw new RuntimeException("Failed to bind to address",cause);  }  logger.info("Successfully bound to: " + channel.localAddress());  InetSocketAddress localAddress=(InetSocketAddress)channel.localAddress();  port=localAddress.getPort();  ip=localAddress.getHostString();}  }
class C{  @Ignore("TODO: test is disabled because of #52167") @Test public void testCreateAsyncIndexWhileDoingGIIAndCompareQueryResults() throws Exception {  Host host=Host.getHost(0);  VM vm0=host.getVM(0);  VM vm1=host.getVM(1);  final String fileName="IndexCreation.xml";  org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info("Creating index using an xml file name : " + fileName);  vm0.invoke(createIndexThrougXML("vm0testAsyncIndexAndCompareQResults",name,fileName));  vm0.invoke(loadRegion(name));  vm0.invoke(loadRegion(repRegName));  vm0.invoke(loadRegion(persistentRegName));  vm0.invoke(loadRegion(noIndexRepReg));  vm0.invokeAsync(loadRegion(name,500));  vm0.invokeAsync(loadRegion(repRegName,500));  AsyncInvocation asyInvk0=vm0.invokeAsync(loadRegion(persistentRegName,500));  vm0.invokeAsync(loadRegion(noIndexRepReg,500));  vm1.invoke(setTestHook());  vm1.invoke(createIndexThrougXML("vm1testAsyncIndexAndCompareQResults",name,fileName));  ThreadUtils.join(asyInvk0,30 * 1000);  if (asyInvk0.exceptionOccurred()) {    Assert.fail("asyInvk0 failed",asyInvk0.getException());  }  vm1.invoke(prIndexCreationCheck(persistentRegName,"secIndex",50));  vm1.invoke(indexCreationCheck(repRegName,"secIndex"));  vm0.invoke(executeQueryAndCompareResult(name,false));  vm1.invoke(executeQueryAndCompareResult(name,false));  vm1.invoke(resetTestHook());  vm0.invoke(close());  vm1.invoke(close());}  }
class C{  public Bundler putShort(String key,short value){  bundle.putShort(key,value);  return this;}  }
class C{  public Div4(){  super("div4",4);}  }
class C{  private static void markAssertionIdAttribute(Element assertionElement){  assert assertionElement != null;  assert assertionElement.hasAttribute(ASSERTION_ID_ATTR_NAME);  assertionElement.setIdAttribute(ASSERTION_ID_ATTR_NAME,true);}  }
class C{  public void putByteArray(String key,byte[] value){  unparcel();  mMap.put(key,value);}  }
class C{  public boolean isDebugOutputEnabled(){  return enableDebugOutput;}  }
class C{  public void play(){  if (nativePlayer && curentForm == null) {    curentForm=Display.getInstance().getCurrent();    Form f=new Form();    f.setLayout(new BorderLayout());    f.addComponent(BorderLayout.CENTER,new MediaPlayer(this));    f.show();  }  player.play();}  }
class C{  public static TimeOfDay hourAndMinuteFromDate(Date dateTime,TimeZone tz){  if (dateTime == null)   return null;  Calendar cal=Calendar.getInstance();  cal.setTime(dateTime);  if (tz != null)   cal.setTimeZone(tz);  return new TimeOfDay(cal.get(Calendar.HOUR_OF_DAY),cal.get(Calendar.MINUTE));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4mfPackage.PROJECT_DEPENDENCIES__PROJECT_DEPENDENCIES:    return projectDependencies != null && !projectDependencies.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @Override protected T doSwitch(int classifierID,EObject theEObject){switch (classifierID) {case RegularExpressionPackage.REGULAR_EXPRESSION_LITERAL:{      RegularExpressionLiteral regularExpressionLiteral=(RegularExpressionLiteral)theEObject;      T result=caseRegularExpressionLiteral(regularExpressionLiteral);      if (result == null)       result=defaultCase(theEObject);      return result;    }case RegularExpressionPackage.REGULAR_EXPRESSION_BODY:{    RegularExpressionBody regularExpressionBody=(RegularExpressionBody)theEObject;    T result=caseRegularExpressionBody(regularExpressionBody);    if (result == null)     result=defaultCase(theEObject);    return result;  }case RegularExpressionPackage.PATTERN:{  Pattern pattern=(Pattern)theEObject;  T result=casePattern(pattern);  if (result == null)   result=defaultCase(theEObject);  return result;}case RegularExpressionPackage.ASSERTION:{Assertion assertion=(Assertion)theEObject;T result=caseAssertion(assertion);if (result == null) result=casePattern(assertion);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.LINE_START:{LineStart lineStart=(LineStart)theEObject;T result=caseLineStart(lineStart);if (result == null) result=caseAssertion(lineStart);if (result == null) result=casePattern(lineStart);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.LINE_END:{LineEnd lineEnd=(LineEnd)theEObject;T result=caseLineEnd(lineEnd);if (result == null) result=caseAssertion(lineEnd);if (result == null) result=casePattern(lineEnd);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.WORD_BOUNDARY:{WordBoundary wordBoundary=(WordBoundary)theEObject;T result=caseWordBoundary(wordBoundary);if (result == null) result=caseAssertion(wordBoundary);if (result == null) result=casePattern(wordBoundary);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.LOOK_AHEAD:{LookAhead lookAhead=(LookAhead)theEObject;T result=caseLookAhead(lookAhead);if (result == null) result=caseAssertion(lookAhead);if (result == null) result=casePattern(lookAhead);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.PATTERN_CHARACTER:{PatternCharacter patternCharacter=(PatternCharacter)theEObject;T result=casePatternCharacter(patternCharacter);if (result == null) result=casePattern(patternCharacter);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.WILDCARD:{Wildcard wildcard=(Wildcard)theEObject;T result=caseWildcard(wildcard);if (result == null) result=casePattern(wildcard);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.ATOM_ESCAPE:{AtomEscape atomEscape=(AtomEscape)theEObject;T result=caseAtomEscape(atomEscape);if (result == null) result=casePattern(atomEscape);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.CHARACTER_CLASS_ESCAPE_SEQUENCE:{CharacterClassEscapeSequence characterClassEscapeSequence=(CharacterClassEscapeSequence)theEObject;T result=caseCharacterClassEscapeSequence(characterClassEscapeSequence);if (result == null) result=caseAtomEscape(characterClassEscapeSequence);if (result == null) result=caseEscapedCharacterClassAtom(characterClassEscapeSequence);if (result == null) result=casePattern(characterClassEscapeSequence);if (result == null) result=caseCharacterClassAtom(characterClassEscapeSequence);if (result == null) result=caseCharacterClassElement(characterClassEscapeSequence);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.CHARACTER_ESCAPE_SEQUENCE:{CharacterEscapeSequence characterEscapeSequence=(CharacterEscapeSequence)theEObject;T result=caseCharacterEscapeSequence(characterEscapeSequence);if (result == null) result=caseAtomEscape(characterEscapeSequence);if (result == null) result=caseEscapedCharacterClassAtom(characterEscapeSequence);if (result == null) result=casePattern(characterEscapeSequence);if (result == null) result=caseCharacterClassAtom(characterEscapeSequence);if (result == null) result=caseCharacterClassElement(characterEscapeSequence);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.CONTROL_LETTER_ESCAPE_SEQUENCE:{ControlLetterEscapeSequence controlLetterEscapeSequence=(ControlLetterEscapeSequence)theEObject;T result=caseControlLetterEscapeSequence(controlLetterEscapeSequence);if (result == null) result=caseAtomEscape(controlLetterEscapeSequence);if (result == null) result=caseEscapedCharacterClassAtom(controlLetterEscapeSequence);if (result == null) result=casePattern(controlLetterEscapeSequence);if (result == null) result=caseCharacterClassAtom(controlLetterEscapeSequence);if (result == null) result=caseCharacterClassElement(controlLetterEscapeSequence);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.HEX_ESCAPE_SEQUENCE:{HexEscapeSequence hexEscapeSequence=(HexEscapeSequence)theEObject;T result=caseHexEscapeSequence(hexEscapeSequence);if (result == null) result=caseAtomEscape(hexEscapeSequence);if (result == null) result=caseEscapedCharacterClassAtom(hexEscapeSequence);if (result == null) result=casePattern(hexEscapeSequence);if (result == null) result=caseCharacterClassAtom(hexEscapeSequence);if (result == null) result=caseCharacterClassElement(hexEscapeSequence);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.UNICODE_ESCAPE_SEQUENCE:{UnicodeEscapeSequence unicodeEscapeSequence=(UnicodeEscapeSequence)theEObject;T result=caseUnicodeEscapeSequence(unicodeEscapeSequence);if (result == null) result=caseAtomEscape(unicodeEscapeSequence);if (result == null) result=caseEscapedCharacterClassAtom(unicodeEscapeSequence);if (result == null) result=casePattern(unicodeEscapeSequence);if (result == null) result=caseCharacterClassAtom(unicodeEscapeSequence);if (result == null) result=caseCharacterClassElement(unicodeEscapeSequence);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.IDENTITY_ESCAPE_SEQUENCE:{IdentityEscapeSequence identityEscapeSequence=(IdentityEscapeSequence)theEObject;T result=caseIdentityEscapeSequence(identityEscapeSequence);if (result == null) result=caseAtomEscape(identityEscapeSequence);if (result == null) result=caseEscapedCharacterClassAtom(identityEscapeSequence);if (result == null) result=casePattern(identityEscapeSequence);if (result == null) result=caseCharacterClassAtom(identityEscapeSequence);if (result == null) result=caseCharacterClassElement(identityEscapeSequence);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.DECIMAL_ESCAPE_SEQUENCE:{DecimalEscapeSequence decimalEscapeSequence=(DecimalEscapeSequence)theEObject;T result=caseDecimalEscapeSequence(decimalEscapeSequence);if (result == null) result=caseAtomEscape(decimalEscapeSequence);if (result == null) result=caseEscapedCharacterClassAtom(decimalEscapeSequence);if (result == null) result=casePattern(decimalEscapeSequence);if (result == null) result=caseCharacterClassAtom(decimalEscapeSequence);if (result == null) result=caseCharacterClassElement(decimalEscapeSequence);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.CHARACTER_CLASS:{CharacterClass characterClass=(CharacterClass)theEObject;T result=caseCharacterClass(characterClass);if (result == null) result=casePattern(characterClass);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.CHARACTER_CLASS_ELEMENT:{CharacterClassElement characterClassElement=(CharacterClassElement)theEObject;T result=caseCharacterClassElement(characterClassElement);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.CHARACTER_CLASS_ATOM:{CharacterClassAtom characterClassAtom=(CharacterClassAtom)theEObject;T result=caseCharacterClassAtom(characterClassAtom);if (result == null) result=caseCharacterClassElement(characterClassAtom);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.ESCAPED_CHARACTER_CLASS_ATOM:{EscapedCharacterClassAtom escapedCharacterClassAtom=(EscapedCharacterClassAtom)theEObject;T result=caseEscapedCharacterClassAtom(escapedCharacterClassAtom);if (result == null) result=caseCharacterClassAtom(escapedCharacterClassAtom);if (result == null) result=caseCharacterClassElement(escapedCharacterClassAtom);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.BACKSPACE:{Backspace backspace=(Backspace)theEObject;T result=caseBackspace(backspace);if (result == null) result=caseEscapedCharacterClassAtom(backspace);if (result == null) result=caseCharacterClassAtom(backspace);if (result == null) result=caseCharacterClassElement(backspace);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.GROUP:{Group group=(Group)theEObject;T result=caseGroup(group);if (result == null) result=casePattern(group);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.QUANTIFIER:{Quantifier quantifier=(Quantifier)theEObject;T result=caseQuantifier(quantifier);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.SIMPLE_QUANTIFIER:{SimpleQuantifier simpleQuantifier=(SimpleQuantifier)theEObject;T result=caseSimpleQuantifier(simpleQuantifier);if (result == null) result=caseQuantifier(simpleQuantifier);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.EXACT_QUANTIFIER:{ExactQuantifier exactQuantifier=(ExactQuantifier)theEObject;T result=caseExactQuantifier(exactQuantifier);if (result == null) result=caseQuantifier(exactQuantifier);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.REGULAR_EXPRESSION_FLAGS:{RegularExpressionFlags regularExpressionFlags=(RegularExpressionFlags)theEObject;T result=caseRegularExpressionFlags(regularExpressionFlags);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.DISJUNCTION:{Disjunction disjunction=(Disjunction)theEObject;T result=caseDisjunction(disjunction);if (result == null) result=casePattern(disjunction);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.SEQUENCE:{Sequence sequence=(Sequence)theEObject;T result=caseSequence(sequence);if (result == null) result=casePattern(sequence);if (result == null) result=defaultCase(theEObject);return result;}case RegularExpressionPackage.CHARACTER_CLASS_RANGE:{CharacterClassRange characterClassRange=(CharacterClassRange)theEObject;T result=caseCharacterClassRange(characterClassRange);if (result == null) result=caseCharacterClassElement(characterClassRange);if (result == null) result=defaultCase(theEObject);return result;}default :return defaultCase(theEObject);}}  }
class C{  public final void inverse(Quaternion q1){  float norm;  norm=1.0f / (q1.w * q1.w + q1.x * q1.x + q1.y * q1.y + q1.z * q1.z);  this.w=norm * q1.w;  this.x=-norm * q1.x;  this.y=-norm * q1.y;  this.z=-norm * q1.z;}  }
class C{  public char nextcharClass(char c,boolean advance){  int distance=0;  if (c == '\\' && text.charAt(textPos) == 'u') {    int y, digit, thisChar=0;    for (y=textPos + 1; y < textPos + 5 && y < text.length(); y++) {      digit=Character.digit(text.charAt(y),16);      if (digit == -1)       break;      thisChar=(thisChar << 4) + digit;    }    if (y == textPos + 5 && Character.isDefined((char)thisChar)) {      c=(char)thisChar;      distance=5;    } else {      distance=1;    }  }  if (advance)   textPos+=distance;  return javaTypeOfToCharacterClass(Character.getType(c));}  }
class C{  public void initBeaHome(){  if (this.getHome() == null) {    throw new ContainerException("Please set container home to WL_HOME");  }  if (this.getBeaHome() == null) {    this.setBeaHome(this.getConfiguration().getPropertyValue(WebLogicPropertySet.BEA_HOME));  }  if (this.getBeaHome() == null) {    this.setBeaHome(new File(this.getHome()).getParent());  }}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  Object[] elements=getArray();  s.writeInt(elements.length);  for (  Object element : elements)   s.writeObject(element);}  }
class C{  public STRING(String mimeType){  super(mimeType,"java.lang.String");}  }
class C{  public void test_syntax_update_bad_09() throws MalformedQueryException {  final String query="CREATE GRAPH <:g> ; LOAD <:remote> into GRAPH <:g> ;;";  negativeTest(query);}  }
class C{  Watch watch(CompilationRequest request){  Watch watch=requestForThread.get();  if (watch == null) {    watch=new Watch();synchronized (requests) {      requests.put(Thread.currentThread(),watch);    }  }  watch.open(request);  return watch;}  }
class C{  protected void loadJsonData(String json){  if (!scheduledLoop) {    initLoop();  }  guidedTour.start(json);}  }
class C{  public Collection<File> processArgs(String[] flags){  return processArgs(flags,null);}  }
class C{  public void incQueueSize(){  this.stats.incInt(eventQueueSizeId,1);}  }
class C{  private TPrimality(){}  }
class C{  public static List<String> readLines(InputStream input) throws IOException {  return readLines(input,Charset.defaultCharset());}  }
class C{  private void drawCursor(Graphics2D graphics){  if (mCursorVisible) {    drawFrequencyLine(graphics,mCursorLocation.x,mColorSpectrumCursor);    double value=mBandwidth * (mCursorLocation.getX() / getSize().getWidth());    String frequency=sCURSOR_FORMAT.format(value);    graphics.drawString(frequency,mCursorLocation.x + 5,mCursorLocation.y);  }}  }
class C{  private void trackWeakOnes(int x,int y,BufferedImage gray){  for (int xx=x - 1; xx <= x + 1; xx++)   for (int yy=y - 1; yy <= y + 1; yy++) {    if (isWeak(xx,yy,gray)) {      gray.getRaster().setPixel(xx,yy,tmp000);      trackWeakOnes(xx,yy,gray);    }  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:29.513 -0400",hash_original_method="A04B79009CE228312B38627AAADD475C",hash_generated_method="D2A32CDCE886B3B6C4A424B9451ACCA7") public void onSupportActionModeStarted(ActionMode mode){}  }
class C{  public boolean equals(java.lang.Object obj){  return false;}  }
class C{  public SamFilterParamsBuilder maxAlignmentCount(final int val){  mMaxAlignmentCount=val;  return this;}  }
class C{  public BlockDXT3Compressor(){  this.dxt1Compressor=new BlockDXT1Compressor();}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(", value: ");  result.append(value);  result.append(')');  return result.toString();}  }
class C{  public String globalInfo(){  return "A filter that removes a given range of instances of a dataset.";}  }
class C{  protected boolean[] canHandleZeroTraining(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){  print("handle zero training instances");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  accepts.add("train");  accepts.add("value");  int numTrain=0, numTest=getNumInstances(), numClasses=2, missingLevel=0;  boolean predictorMissing=false, classMissing=false;  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,missingLevel,predictorMissing,classMissing,numTrain,numTest,numClasses,accepts);}  }
class C{  @Deprecated public void testServerPrepStmtAndDate() throws Exception {  createTable("testServerPrepStmtAndDate","(`P_ID` int(10) NOT NULL default '0', `R_Date` date default NULL, UNIQUE KEY `P_ID` (`P_ID`), KEY `R_Date` (`R_Date`))");  Date dt=new java.sql.Date(102,1,2);  PreparedStatement pStmt2=this.conn.prepareStatement("INSERT INTO testServerPrepStmtAndDate (P_ID, R_Date) VALUES (171576, ?)");  pStmt2.setDate(1,dt);  pStmt2.executeUpdate();  pStmt2.close();  this.rs=this.stmt.executeQuery("SELECT R_Date FROM testServerPrepStmtAndDate");  this.rs.next();  System.out.println("Date that was stored (as String) " + this.rs.getString(1));  PreparedStatement pStmt=this.conn.prepareStatement("Select P_ID,R_Date from testServerPrepStmtAndDate Where R_Date = ?   and P_ID = 171576");  pStmt.setDate(1,dt);  this.rs=pStmt.executeQuery();  assertTrue(this.rs.next());  assertEquals("171576",this.rs.getString(1));  assertEquals(dt,this.rs.getDate(2));}  }
class C{  private void pruneStack(){  while (true) {    Entry<K,V> last=stack.stackPrev;    if (last == stack || last.isHot()) {      break;    }    removeFromStack(last);  }}  }
class C{  void insertValueAtPosition(final T value,final int pos){  if (pos < 0 || pos >= getNumSamples()) {    throw new SketchesArgumentException("Insert position must be between 0 and " + getNumSamples() + ", "+ "inclusive. Received: "+ pos);  }  data_[pos]=value;}  }
class C{  public int size(){  return this.getBlockChangeCount();}  }
class C{  private long[] findPrimesInPrimitiveArray0(long[] input){  System.out.println(">>>");  System.out.println("Find primes in primitive array: " + Arrays.toString(input));  System.out.println(">>>");  Collection<Long> res=new ArrayList<>();  for (  Long val : input) {    Long divisor=checkPrime(val,2,val);    if (divisor == null)     res.add(val);  }  long[] arr=new long[res.size()];  int i=0;  for (  Long element : res) {    arr[i]=element;    i++;  }  return arr;}  }
class C{  @Override @SuppressWarnings("fallthrough") public void run(){  int chr;  log.info("RX Thread started");  try {    while (true) {      if (in.available() > 0) {        if ((chr=in.read()) >= 0) {          processRxChar(chr);        } else {          log.warn(this.toString() + " RX: End of stream!");          break;        }      } else {        Thread.sleep(1);      }    }  } catch (  Exception ex) {    log.warn("RX error",ex);  }  log.info("RX Thread stopped");}  }
class C{  public void recordLocation(boolean recordLocation){  mRecordLocation=recordLocation;  mLocationProvider.recordLocation(mRecordLocation);}  }
class C{  public static LTToken ltToken(final long token){  return new LTToken(token);}  }
class C{  public Person(int id,int orgId,String firstName,String lastName,double salary){  this.id=id;  this.orgId=orgId;  this.firstName=firstName;  this.lastName=lastName;  this.salary=salary;}  }
class C{  public NotificationChain basicSetValueType(PropertyType newValueType,NotificationChain msgs){  PropertyType oldValueType=valueType;  valueType=newValueType;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,DatatypePackage.DICTIONARY_PROPERTY_TYPE__VALUE_TYPE,oldValueType,newValueType);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public boolean handle(CallbackQuery query,int row,int button){  if (!validateCaller(InlineMenuRegistry.class)) {    throw new UnsupportedOperationException("Invalid caller! Caller must implement InlineMenuRegistry");  }  return (userPredicate == null || userPredicate.test(query.getFrom())) && row < rows.size() && rowAt(row).handle(query,button);}  }
class C{  public void addHandler(ExceptionHandler handler){  if (!handlers.contains(handler))   handlers.add(handler);}  }
class C{  public RequestHandle delete(Context context,String url,Header[] headers,ResponseHandlerInterface responseHandler){  final HttpDelete delete=new HttpDelete(getURI(url));  if (headers != null)   delete.setHeaders(headers);  return sendRequest(httpClient,httpContext,delete,null,responseHandler,context);}  }
class C{  public void removePort(){  authority.removePort();}  }
class C{  @Override protected void doAction(){  KeyStoreType currentType=KeyStoreType.resolveJce(kseFrame.getActiveKeyStoreHistory().getCurrentState().getKeyStore().getType());  if (currentType == newType) {    return;  }  boolean changeResult=changeKeyStoreType(newType);  if (!changeResult) {    kseFrame.updateControls(false);  }}  }
class C{  public static boolean isAvailable(ISourceRange range){  return range != null && range.getOffset() != -1;}  }
class C{  @Post @LogMessageDoc(level="ERROR",message="Error parsing push flow mod request: {request}",explanation="An invalid request was sent to static flow pusher",recommendation="Fix the format of the static flow mod request") public String store(String fmJson){  IStorageSourceService storageSource=(IStorageSourceService)getContext().getAttributes().get(IStorageSourceService.class.getCanonicalName());  Map<String,Object> rowValues;  try {    rowValues=StaticFlowEntries.jsonToStorageEntry(fmJson);    String status=null;    int state=checkFlow(rowValues);    if (state == 1) {      status="Warning! Must specify eth_type of IPv4/IPv6 to " + "match on IPv4/IPv6 fields! The flow has been discarded.";      log.error(status);    } else     if (state == 2) {      status="Warning! eth_type not recognized! The flow has been discarded.";      log.error(status);    } else     if (state == 3) {      status="Warning! Must specify ip_proto to match! The flow has been discarded.";      log.error(status);    } else     if (state == 4) {      status="Warning! ip_proto invalid! The flow has been discarded.";      log.error(status);    } else     if (state == 5) {      status="Warning! Must specify icmp6_type to match! The flow has been discarded.";      log.error(status);    } else     if (state == 6) {      status="Warning! icmp6_type invalid! The flow has been discarded.";      log.error(status);    } else     if (state == 7) {      status="Warning! IPv4 & IPv6 fields cannot be specified in the same flow! The flow has been discarded.";      log.error(status);    } else     if (state == 0) {      status="Entry pushed";      storageSource.insertRowAsync(StaticFlowEntryPusher.TABLE_NAME,rowValues);    }    return ("{\"status\" : \"" + status + "\"}");  } catch (  IOException e) {    log.error("Error parsing push flow mod request: " + fmJson,e);    return "{\"status\" : \"Error! Could not parse flow mod, see log for details.\"}";  }}  }
class C{  public boolean check(){  if (_namedBean == null) {    return false;  }  return _namedBean.getBean().getState() == _setting;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildLibrary(zone);}  }
class C{  public static boolean isAmericanExpress(String cc){  int firstdig=Integer.parseInt(cc.substring(0,1));  int seconddig=Integer.parseInt(cc.substring(1,2));  if ((cc.length() == 15) && (firstdig == 3) && ((seconddig == 4) || (seconddig == 7)))   return isCreditCard(cc);  return false;}  }
class C{  public String toStringX(Properties ctx){  StringBuffer sb=new StringBuffer();  sb.append(Msg.translate(ctx,"AD_Role_ID")).append("=").append(getName()).append(" - ").append(Msg.translate(ctx,"IsCanExport")).append("=").append(isCanExport()).append(" - ").append(Msg.translate(ctx,"IsCanReport")).append("=").append(isCanReport()).append(Env.NL).append(Env.NL);  for (int i=0; i < m_orgAccess.length; i++)   sb.append(m_orgAccess[i].toString()).append(Env.NL);  sb.append(Env.NL);  loadTableAccess(false);  for (int i=0; i < m_tableAccess.length; i++)   sb.append(m_tableAccess[i].toStringX(ctx)).append(Env.NL);  if (m_tableAccess.length > 0)   sb.append(Env.NL);  loadColumnAccess(false);  for (int i=0; i < m_columnAccess.length; i++)   sb.append(m_columnAccess[i].toStringX(ctx)).append(Env.NL);  if (m_columnAccess.length > 0)   sb.append(Env.NL);  loadRecordAccess(false);  for (int i=0; i < m_recordAccess.length; i++)   sb.append(m_recordAccess[i].toStringX(ctx)).append(Env.NL);  return sb.toString();}  }
class C{  public void onScreenChange(int currentScreen,int lastScreen){  ImageView[] points=platformGridView.points;  for (int i=0; i < points.length; i++) {    points[i].setImageBitmap(platformGridView.grayPoint);  }  points[currentScreen].setImageBitmap(platformGridView.bluePoint);}  }
class C{  public Process exec(String prog) throws java.io.IOException {  return exec(prog,null,null);}  }
class C{  public IOObject retrieve(final String name,final boolean remove){  if (remove) {    return this.storageMap.remove(name);  } else {    return this.storageMap.get(name);  }}  }
class C{  public ObserveController(Game game,boolean isBughouseOtherBoard,Connector connector){  super(new GameCursor(game,GameCursor.Mode.MakeMovesOnMasterSetCursorToLast),connector);  cursor=(GameCursor)getGame();  this.isBughouseOtherBoard=isBughouseOtherBoard;}  }
class C{  @Override public void registerBufferAutoReclaim(MemBufferHolder<A> mholder){  m_bufcollector.register(mholder);}  }
class C{  @Override public V remove(Object key){  return wrapValue(_map.remove(unwrapKey(key)));}  }
class C{  public void addPaths(Taxonomy source,Collection<Integer> ids){  for (  final Integer taxId : ids) {    addPath(source,taxId);  }}  }
class C{  private ClientTransaction createNewTransaction(SipRequest request) throws ParseException, SipException {  if (ListeningPoint.UDP.equals(mDefaultProtocol) && mTcpFallback && (request.getStackMessage().toString().length() > (mSipStack.getMtuSize() - 200))) {    if (sLogger.isActivated()) {      sLogger.debug("Transaction falls back to TCP as request size is " + request.getStackMessage().toString().length() + " and MTU size is "+ mSipStack.getMtuSize());    }    ViaHeader topViaHeader=((SIPMessage)request.getStackMessage()).getTopmostViaHeader();    if (topViaHeader != null) {      topViaHeader.setTransport("TCP");    } else {      topViaHeader=SipUtils.HEADER_FACTORY.createViaHeader(mLocalIpAddress,mListeningPort,"TCP",null);    }    request.getStackMessage().removeFirst(ViaHeader.NAME);    request.getStackMessage().addFirst(topViaHeader);    RouteHeader topRouteHeader=(RouteHeader)request.getStackMessage().getHeader(RouteHeader.NAME);    if (topRouteHeader != null) {      URI uri=topRouteHeader.getAddress().getURI();      if (uri.isSipURI()) {        SipURI sipUri=(SipURI)uri;        sipUri.setTransportParam("tcp");        AddressImpl address=new AddressImpl();        address.setURI(sipUri);        topRouteHeader=SipUtils.HEADER_FACTORY.createRouteHeader(address);      } else {        sLogger.error("Update of route header due to TCP fallback failed due to wrong address format!");      }      request.getStackMessage().removeFirst(RouteHeader.NAME);      request.getStackMessage().addFirst(topRouteHeader);    }  }  ClientTransaction transaction=mDefaultSipProvider.getNewClientTransaction(request.getStackMessage());  transaction.setRetransmitTimers((int)mTimerT1,(int)mTimerT2,(int)mTimerT4);  return transaction;}  }
class C{  public DataIOException(Throwable cause){  super(cause);}  }
class C{  public AntProblem(File file,int maxMoves) throws FileNotFoundException, IOException {  this(new FileReader(file),maxMoves);}  }
class C{  public static PrettyPrint indentWithSpaces(int number){  if (number < 0) {    throw new IllegalArgumentException("number is negative");  }  char[] chars=new char[number];  Arrays.fill(chars,' ');  return new PrettyPrint(chars);}  }
class C{  public boolean isModificationOne(){  return modificationOne;}  }
class C{  private static ColumnType selectType(List<ColumnType> typeCandidates){  if (typeCandidates.isEmpty()) {    return CATEGORY;  } else {    return typeCandidates.get(0);  }}  }
class C{  private static void declare(Scope s,Identifier ident,LocalType type){  String name=ident.getName();  if (UNMASKABLE_IDENTIFIERS.contains(name)) {    s.mq.addMessage(RewriterMessageType.CANNOT_MASK_IDENTIFIER,ident.getFilePosition(),MessagePart.Factory.valueOf(name));  }  Pair<LocalType,FilePosition> oldDefinition=s.locals.get(name);  if (oldDefinition != null) {    LocalType oldType=oldDefinition.a;    if (oldType != type || oldType.implies(LocalType.FUNCTION) || type.implies(LocalType.FUNCTION)) {      s.mq.getMessages().add(new Message(MessageType.SYMBOL_REDEFINED,MessageLevel.LINT,ident.getFilePosition(),MessagePart.Factory.valueOf(name),oldDefinition.b));    }  }  for (Scope ancestor=s.parent; ancestor != null; ancestor=ancestor.parent) {    Pair<LocalType,FilePosition> maskedDefinition=ancestor.locals.get(name);    if (maskedDefinition == null) {      continue;    }    LocalType maskedType=maskedDefinition.a;    if (maskedType != type && !(maskedType == LocalType.DECLARED_FUNCTION && type == LocalType.FUNCTION)) {      if (ident.getFilePosition() != null) {        s.mq.getMessages().add(new Message(MessageType.MASKING_SYMBOL,MessageLevel.LINT,ident.getFilePosition(),MessagePart.Factory.valueOf(name),maskedDefinition.b));      }    }    break;  }  s.locals.put(name,Pair.pair(type,ident.getFilePosition()));}  }
class C{  protected List<TreeNode> createChildList(){  Branch branch=getXmlBranch();  int size=branch.nodeCount();  List<TreeNode> childList=new ArrayList<TreeNode>(size);  for (int i=0; i < size; i++) {    Node node=branch.node(i);    if (node instanceof CharacterData) {      String text=node.getText();      if (text == null) {        continue;      }      text=text.trim();      if (text.length() <= 0) {        continue;      }    }    childList.add(createChildTreeNode(node));  }  return childList;}  }
class C{  public NetworkChangeEvent(double startTime){  this.startTime=startTime;}  }
class C{  public CancelNewOrderWithRefundOrderEventHandlerImpl(final PaymentProcessorFactory paymentProcessorFactory,final WarehouseService warehouseService,final SkuWarehouseService skuWarehouseService){  super(warehouseService,skuWarehouseService);  this.paymentProcessorFactory=paymentProcessorFactory;}  }
class C{  public synchronized ConnectionFactory lookupConnectionFactory(String name) throws JMSException, NamingException {  if (usingJNDI) {    return super.lookupConnectionFactory(name);  } else {    MQConnectionFactory cf=new MQConnectionFactory();    configureMQConnectionFactory(cf);    return cf;  }}  }
class C{  private static long toLong(byte[] bytes,int offset,final int length){  if (length != SIZEOF_LONG || offset + length > bytes.length) {    throw explainWrongLengthOrOffset(bytes,offset,length,SIZEOF_LONG);  }  long l=0;  for (int i=offset; i < offset + length; i++) {    l<<=8;    l^=bytes[i] & 0xFF;  }  return l;}  }
class C{  private void dismissPlay(View btn){  btn.setEnabled(false);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH)   btn.animate().alpha(0).scaleX(0).scaleY(0); else   btn.setVisibility(View.INVISIBLE);}  }
class C{  public int size(){  return len;}  }
class C{  static public void assertSameValue(Object expected,Object actual){  assertSameValue(null,expected,actual);}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case EipPackage.COMPOSITE_PROCESSOR__TO_CHANNELS:    return ((InternalEList<InternalEObject>)(InternalEList<?>)getToChannels()).basicAdd(otherEnd,msgs);case EipPackage.COMPOSITE_PROCESSOR__FROM_CHANNELS:  return ((InternalEList<InternalEObject>)(InternalEList<?>)getFromChannels()).basicAdd(otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  private boolean applyVolumesToMasksUsingRule(ExportGroup exportGroup,String token,Map<URI,Map<URI,Integer>> existingMasksToUpdateWithNewVolumes,Map<URI,Map<URI,Integer>> volumesWithNoMask,Map<ExportMask,ExportMaskPolicy> masks,Map<URI,Set<Initiator>> maskToInitiatorsMap,Set<URI> partialMasks,int rule,boolean isVMAX3){  Map<URI,Set<URI>> maskToInitiatorsToAddMap=new HashMap<URI,Set<URI>>();  if (maskToInitiatorsMap != null) {    for (    Entry<URI,Set<Initiator>> entry : maskToInitiatorsMap.entrySet()) {      for (      Initiator initiator : entry.getValue()) {        if (!maskToInitiatorsToAddMap.containsKey(entry.getKey())) {          maskToInitiatorsToAddMap.put(entry.getKey(),new HashSet<URI>());        }        maskToInitiatorsToAddMap.get(entry.getKey()).add(initiator.getId());      }    }  }  ListMultimap<URI,URI> volumesWithMask=ArrayListMultimap.create();  for (  ExportMask mask : ExportMaskUtils.sortMasksByEligibility(masks,exportGroup)) {    ExportMaskPolicy policy=masks.get(mask);    for (    URI initiatorId : volumesWithNoMask.keySet()) {      if ((mask.getInitiators() == null || !mask.getInitiators().contains(initiatorId.toString())) && (!maskToInitiatorsToAddMap.containsKey(mask.getId()) || !maskToInitiatorsToAddMap.get(mask.getId()).contains(initiatorId))) {        continue;      }      Map<URI,VirtualPool> uriVirtualPoolMap=new HashMap<URI,VirtualPool>();      for (      URI boURI : volumesWithNoMask.get(initiatorId).keySet()) {        BlockObject bo=Volume.fetchExportMaskBlockObject(_dbClient,boURI);        if (bo != null && !mask.hasExistingVolume(bo)) {          if (volumesWithMask.containsKey(initiatorId) && volumesWithMask.get(initiatorId).contains(boURI)) {            continue;          }          boolean match=false;          if (existingMasksToUpdateWithNewVolumes.containsKey(mask.getId()) && existingMasksToUpdateWithNewVolumes.get(mask.getId()).containsKey(boURI)) {            match=true;          } else {            List<Initiator> initiators=_dbClient.queryObjectField(Initiator.class,"iniport",Arrays.asList(initiatorId));            Initiator initiator=initiators.get(0);            _log.info(String.format("Pre-existing Mask Rule %d: volume %s is not exposed to initiator %s in mask %s.  Checking rule.",rule,bo.getLabel(),initiator.getInitiatorPort(),mask.getMaskName()));            Integer requestedHLU=volumesWithNoMask.get(initiatorId).get(boURI);            StringMap existingVolumesInMask=mask.getExistingVolumes();            if (existingVolumesInMask != null && requestedHLU.intValue() != ExportGroup.LUN_UNASSIGNED && !ExportGroup.LUN_UNASSIGNED_DECIMAL_STR.equals(requestedHLU.toString()) && existingVolumesInMask.containsValue(requestedHLU.toString())) {              ExportOrchestrationTask completer=new ExportOrchestrationTask(exportGroup.getId(),token);              ServiceError serviceError=DeviceControllerException.errors.exportHasExistingVolumeWithRequestedHLU(boURI.toString(),requestedHLU.toString());              completer.error(_dbClient,serviceError);              return false;            }            String volumePolicyName=ControllerUtils.getAutoTieringPolicyName(bo.getId(),_dbClient);            if (volumePolicyName.equalsIgnoreCase(Constants.NONE.toString())) {              volumePolicyName=null;            }            VirtualPool virtualPool=null;            if (bo instanceof Volume) {              Volume volume=(Volume)bo;              virtualPool=uriVirtualPoolMap.get(volume.getVirtualPool());              if (virtualPool == null) {                virtualPool=_dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());                uriVirtualPoolMap.put(volume.getVirtualPool(),virtualPool);              }            }            if (rule == 1) {              if (!partialMasks.contains(mask.getId()) || partialMasksContainSameSG(partialMasks,masks,mask) || volumePolicyName == null) {                if (volumePolicyName == null && (policy.localTierPolicy == null || (isVMAX3 && policy.localTierPolicy.contains(Constants.OPTIMIZED_SLO)))) {                  _log.info("Pre-existing Mask Matched rule 1B: volume and mask do not have FAST policy");                  match=true;                }                if (volumePolicyName != null) {                  if (policy.localTierPolicy != null) {                    if (isVMAX3) {                      match=SmisUtils.checkPolicyMatchForVMAX3(policy.localTierPolicy,volumePolicyName);                    } else {                      match=policy.localTierPolicy.equalsIgnoreCase(volumePolicyName);                    }                    if (match) {                      _log.info("Pre-existing Mask Matched rule 1C: volume has same FAST policy as masking view with non-cascading storage group");                    }                  }                  if (policy.localTierPolicy == null && policy.tierPolicies != null && policy.tierPolicies.size() == 1) {                    if (isVMAX3) {                      String policyName=policy.tierPolicies.iterator().next();                      match=SmisUtils.checkPolicyMatchForVMAX3(policyName,volumePolicyName);                    } else {                      match=policy.tierPolicies.contains(volumePolicyName);                    }                    if (match) {                      _log.info("Pre-existing Mask Matched rule 1D: volume has same FAST policy as masking view with cascading storage group");                    }                  }                }                if (virtualPool != null) {                  match&=HostIOLimitsParam.isEqualsLimit(policy.getHostIOLimitBandwidth(),virtualPool.getHostIOLimitBandwidth()) && HostIOLimitsParam.isEqualsLimit(policy.getHostIOLimitIOPs(),virtualPool.getHostIOLimitIOPs());                }              } else {                _log.info("Pre-existing Mask did not match rule 1A: volume is FAST, mask comprises only part of the compute resource, and the storage groups in each mask are not the same.  " + "Attempting to use this mask would cause a violation on the VMAX since the same volume can not be in more than one storage group with a FAST policy defined.");              }            }            if (rule == 2) {              if (!policy.simpleMask) {                _log.info("Pre-existing mask Matched rule 2A: volume has FAST policy and masking view has cascaded storage group");                if (!isVMAX3 && ExportMaskPolicy.EXPORT_TYPE.PHANTOM.name().equalsIgnoreCase(policy.getExportType())) {                  if (virtualPool != null) {                    if (HostIOLimitsParam.isEqualsLimit(policy.getHostIOLimitBandwidth(),virtualPool.getHostIOLimitBandwidth()) && HostIOLimitsParam.isEqualsLimit(policy.getHostIOLimitIOPs(),virtualPool.getHostIOLimitIOPs())) {                      _log.info("Pre-existing mask Matched rule 2A-1: Phantom SGs are available to add FAST volumes to this masking view, and expected HostIO limit is set on SG within masking view.");                      match=true;                    } else {                      _log.info("Pre-existing mask did not match rule 2A-1: Phantom SGs are available to add FAST volumes to this masking view, but HostIO limit is not set on SG within masking view.");                    }                  }                } else {                  match=true;                }              } else {                if (volumePolicyName == null) {                  _log.info("Pre-existing mask did not match rule 2A: volume does not have a FAST policy, and this rules requires the volume to have a FAST policy associated with it");                }                if (policy.simpleMask) {                  _log.info("Pre-existing mask did not match rule 2A: mask has a cascaded storage group, and this rule requires the storage group be non-cascaded in the mask");                }              }            }            if (!isVMAX3 && rule == 3) {              if (volumePolicyName != null) {                if ((policy.tierPolicies == null || policy.tierPolicies.isEmpty()) && policy.simpleMask) {                  _log.info("Pre-existing mask Matched rule 3A: volume has non-cascaded, non-FAST storage group, allowing VipR to make/use island storage groups for FAST");                  match=true;                  if (virtualPool != null) {                    match=HostIOLimitsParam.isEqualsLimit(policy.getHostIOLimitBandwidth(),virtualPool.getHostIOLimitBandwidth()) && HostIOLimitsParam.isEqualsLimit(policy.getHostIOLimitIOPs(),virtualPool.getHostIOLimitIOPs());                  }                } else {                  _log.info("Pre-existing mask did not match rule 3A: volume is FAST and mask does not have a non-cascaded, non-FAST storage group.  A non-cascaded, non-FAST storage group in the masking view allows ViPR to " + "create or use a separate island storage group for FAST volumes");                }              } else {                _log.info("Pre-existing mask did not match rule 3A: volume does not have a FAST policy, and this rule requires the volume to have a FAST policy associated with it");              }            }            if (match) {              _log.info(String.format("Found that we can add volume %s to export mask %s",bo.getLabel(),mask.getMaskName()));              Map<URI,Integer> newVolumes=existingMasksToUpdateWithNewVolumes.get(mask.getId());              if (newVolumes == null) {                newVolumes=new HashMap<URI,Integer>();                existingMasksToUpdateWithNewVolumes.put(mask.getId(),newVolumes);              }              if (!newVolumes.containsKey(bo.getId())) {                newVolumes.put(bo.getId(),requestedHLU);                mask.addToUserCreatedVolumes(bo);              } else {                _log.info(String.format("Found we already have volume %s in the list for mask %s",bo.getLabel(),mask.getMaskName()));              }            }          }          if (match) {            volumesWithMask.put(initiatorId,boURI);          }        } else         if (mask.hasExistingVolume(bo)) {          _log.info(String.format("rule %d: according to the database, volume %s is already in the mask: %s",rule,bo.getWWN(),mask.getMaskName()));          volumesWithMask.put(initiatorId,boURI);        }      }    }    Map<URI,Integer> volumeMapForExistingMask=existingMasksToUpdateWithNewVolumes.get(mask.getId());    if (volumeMapForExistingMask != null && !volumeMapForExistingMask.isEmpty()) {      mask.addVolumes(volumeMapForExistingMask);    }    for (    Entry<URI,Collection<URI>> entry : volumesWithMask.asMap().entrySet()) {      URI initiatorId=entry.getKey();      if (volumesWithNoMask != null && volumesWithNoMask.get(initiatorId) != null) {        for (        URI boId : entry.getValue()) {          if (volumesWithNoMask.get(initiatorId) != null) {            volumesWithNoMask.get(initiatorId).remove(boId);            if (volumesWithNoMask.get(initiatorId).isEmpty()) {              volumesWithNoMask.remove(initiatorId);            }          }        }      }    }  }  return true;}  }
class C{  public WHERE WHERE(String condition){  return new WHERE(this,condition);}  }
class C{  private static double q_ijZ(int i,int j,double[] z,int s){  double denom=1;  for (int k=0; k < s; k++) {    double diff=z_ij(i,k,z,s) - z_ij(j,k,z,s);    denom+=diff * diff;  }  return 1.0 / denom;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_LINKING_OP_1__CONSTRAINT_EXPR_1:    getConstraintExpr_1().clear();  return;}super.eUnset(featureID);}  }
class C{  public void registerPort(int port,IgnitePortProtocol proto,Class cls){  assert port > 0 && port < 65535;  assert proto != null;  assert cls != null;synchronized (recs) {    recs.add(new GridPortRecord(port,proto,cls));  }  notifyListeners();}  }
class C{  @Override public void pauseChanged(){}  }
class C{  protected Node newNode(){  return new SVGOMFECompositeElement();}  }
class C{  public Analyzer withIdealPoint(double... idealPoint){  this.idealPoint=idealPoint;  return this;}  }
class C{  protected void doUpdate(HttpServletRequest request,PreferencesForm frm,PreferenceGroup pg,Set s,boolean timeVertical) throws Exception {  pg.setPreferences(s);  if (pg instanceof DepartmentalInstructor) {    if (frm.getAvailability() != null && (frm.getAvailability().length() == 336 || frm.getAvailability().length() == 2016)) {      TimePref tp=new TimePref();      tp.setOwner(pg);      tp.setPreference(frm.getAvailability());      tp.setPrefLevel(PreferenceLevel.getPreferenceLevel(PreferenceLevel.sRequired));      tp.setTimePattern(null);      s.add(tp);    }  } else {    Set parentTimePrefs=pg.effectivePreferences(TimePref.class,false);    List lst=frm.getTimePatterns();    for (int i=0; i < lst.size(); i++) {      String id=(String)lst.get(i);      addToTimePref(request,pg,id,s,i,timeVertical,parentTimePrefs);    }    if (parentTimePrefs != null && !parentTimePrefs.isEmpty()) {      for (Iterator i=parentTimePrefs.iterator(); i.hasNext(); ) {        TimePref tp=(TimePref)((TimePref)i.next()).clone();        tp.setOwner(pg);        tp.setPrefLevel(PreferenceLevel.getPreferenceLevel(PreferenceLevel.sNeutral));        s.add(tp);      }    }  }  List lst=frm.getRoomPrefs();  List lstL=frm.getRoomPrefLevels();  Set parentRoomPrefs=pg.effectivePreferences(RoomPref.class);  for (int i=0; i < lst.size(); i++) {    String id=(String)lst.get(i);    if (id == null || id.equals(Preference.BLANK_PREF_VALUE))     continue;    String pref=(String)lstL.get(i);    Debug.debug("Room: " + id + ": "+ pref);    LocationDAO rdao=new LocationDAO();    Location room=rdao.get(new Long(id));    RoomPref rp=new RoomPref();    rp.setOwner(pg);    rp.setPrefLevel(PreferenceLevel.getPreferenceLevel(Integer.parseInt(pref)));    rp.setRoom(room);    RoomPref sameParentRp=null;    for (Iterator j=parentRoomPrefs.iterator(); j.hasNext(); ) {      RoomPref p=(RoomPref)j.next();      if (p.isSame(rp)) {        if (p.getPrefLevel().equals(rp.getPrefLevel()))         sameParentRp=rp;        j.remove();        break;      }    }    if (sameParentRp == null)     s.add(rp);  }  if (parentRoomPrefs != null && !parentRoomPrefs.isEmpty()) {    for (Iterator i=parentRoomPrefs.iterator(); i.hasNext(); ) {      RoomPref rp=(RoomPref)((RoomPref)i.next()).clone();      rp.setOwner(pg);      rp.setPrefLevel(PreferenceLevel.getPreferenceLevel(PreferenceLevel.sNeutral));      s.add(rp);    }  }  lst=frm.getBldgPrefs();  lstL=frm.getBldgPrefLevels();  Set parentBuildingPrefs=pg.effectivePreferences(BuildingPref.class);  for (int i=0; i < lst.size(); i++) {    String id=(String)lst.get(i);    if (id == null || id.equals(Preference.BLANK_PREF_VALUE))     continue;    String pref=(String)lstL.get(i);    Debug.debug("Bldg: " + id + ": "+ pref);    BuildingDAO bdao=new BuildingDAO();    Building bldg=bdao.get(new Long(id));    BuildingPref bp=new BuildingPref();    bp.setOwner(pg);    bp.setPrefLevel(PreferenceLevel.getPreferenceLevel(Integer.parseInt(pref)));    bp.setBuilding(bldg);    BuildingPref sameParentBp=null;    for (Iterator j=parentBuildingPrefs.iterator(); j.hasNext(); ) {      BuildingPref p=(BuildingPref)j.next();      if (p.isSame(bp)) {        if (p.getPrefLevel().equals(bp.getPrefLevel()))         sameParentBp=bp;        j.remove();        break;      }    }    if (sameParentBp == null)     s.add(bp);  }  if (parentBuildingPrefs != null && !parentBuildingPrefs.isEmpty()) {    for (Iterator i=parentBuildingPrefs.iterator(); i.hasNext(); ) {      BuildingPref bp=(BuildingPref)((BuildingPref)i.next()).clone();      bp.setOwner(pg);      bp.setPrefLevel(PreferenceLevel.getPreferenceLevel(PreferenceLevel.sNeutral));      s.add(bp);    }  }  lst=frm.getDistPrefs();  lstL=frm.getDistPrefLevels();  for (int i=0; i < lst.size(); i++) {    String id=(String)lst.get(i);    if (id == null || id.equals(Preference.BLANK_PREF_VALUE))     continue;    String pref=(String)lstL.get(i);    Debug.debug("Dist: " + id + ": "+ pref);    DistributionTypeDAO ddao=new DistributionTypeDAO();    DistributionType dist=ddao.get(new Long(id));    DistributionPref dp=new DistributionPref();    dp.setOwner(pg);    dp.setPrefLevel(PreferenceLevel.getPreferenceLevel(Integer.parseInt(pref)));    dp.setDistributionType(dist);    dp.setStructure(DistributionPref.Structure.AllClasses);    s.add(dp);  }  if (pg instanceof Exam) {    Exam exam=(Exam)pg;    if (ApplicationProperty.LegacyPeriodPreferences.isTrue()) {      ExamSolverProxy solver=WebSolver.getExamSolver(request.getSession());      ExamAssignment assignment=null;      if (solver != null && exam != null && exam.getUniqueId() != null)       assignment=solver.getAssignment(exam.getUniqueId()); else       if (exam.getAssignedPeriod() != null)       assignment=new ExamAssignment(exam);      if (ExamType.sExamTypeMidterm == exam.getExamType().getType()) {        MidtermPeriodPreferenceModel epx=new MidtermPeriodPreferenceModel(exam.getSession(),exam.getExamType(),assignment);        epx.load(exam);        epx.load(request);        epx.save(s,exam);      } else {        PeriodPreferenceModel px=new PeriodPreferenceModel(exam.getSession(),assignment,exam.getExamType().getUniqueId());        px.load(exam);        RequiredTimeTable rtt=new RequiredTimeTable(px);        rtt.setName("PeriodPref");        rtt.update(request);        px.save(s,exam);      }    } else {      String pattern=request.getParameter("periodPrefs");      if (pattern.indexOf(':') >= 0)       pattern=pattern.substring(pattern.lastIndexOf(':') + 1);      int idx=0;      String defaultPref=(exam.getExamType().getType() == ExamType.sExamTypeMidterm ? PreferenceLevel.sProhibited : PreferenceLevel.sNeutral);      for (      ExamPeriod period : ExamPeriod.findAll(exam.getSession().getUniqueId(),exam.getExamType().getUniqueId())) {        char ch=(exam.getExamType().getType() == ExamType.sExamTypeMidterm ? 'P' : '2');        try {          ch=pattern.charAt(idx++);        } catch (        IndexOutOfBoundsException e) {        }        String pref=PreferenceLevel.char2prolog(ch);        if (!defaultPref.equals(pref)) {          ExamPeriodPref p=new ExamPeriodPref();          p.setOwner(pg);          p.setExamPeriod(period);          p.setPrefLevel(PreferenceLevel.getPreferenceLevel(pref));          s.add(p);        }      }    }  }  lst=frm.getRoomFeaturePrefs();  lstL=frm.getRoomFeaturePrefLevels();  Set parentRoomFeaturePrefs=pg.effectivePreferences(RoomFeaturePref.class);  for (int i=0; i < lst.size(); i++) {    String id=(String)lst.get(i);    if (id == null || id.equals(Preference.BLANK_PREF_VALUE))     continue;    String pref=(String)lstL.get(i);    Debug.debug("Room Feat: " + id + ": "+ pref);    RoomFeatureDAO rfdao=new RoomFeatureDAO();    RoomFeature rf=rfdao.get(new Long(id));    RoomFeaturePref rfp=new RoomFeaturePref();    rfp.setOwner(pg);    rfp.setPrefLevel(PreferenceLevel.getPreferenceLevel(Integer.parseInt(pref)));    rfp.setRoomFeature(rf);    RoomFeaturePref sameParentRfp=null;    for (Iterator j=parentRoomFeaturePrefs.iterator(); j.hasNext(); ) {      RoomFeaturePref p=(RoomFeaturePref)j.next();      if (p.isSame(rfp)) {        if (p.getPrefLevel().equals(rfp.getPrefLevel()))         sameParentRfp=rfp;        j.remove();        break;      }    }    if (sameParentRfp == null)     s.add(rfp);  }  if (parentRoomFeaturePrefs != null && !parentRoomFeaturePrefs.isEmpty()) {    for (Iterator i=parentRoomFeaturePrefs.iterator(); i.hasNext(); ) {      RoomFeaturePref rp=(RoomFeaturePref)((RoomFeaturePref)i.next()).clone();      rp.setOwner(pg);      rp.setPrefLevel(PreferenceLevel.getPreferenceLevel(PreferenceLevel.sNeutral));      s.add(rp);    }  }  lst=frm.getRoomGroups();  lstL=frm.getRoomGroupLevels();  Set parentRoomGroupPrefs=pg.effectivePreferences(RoomGroupPref.class);  for (int i=0; i < lst.size(); i++) {    String id=(String)lst.get(i);    if (id == null || id.equals(Preference.BLANK_PREF_VALUE))     continue;    String pref=(String)lstL.get(i);    Debug.debug("Roomgr: " + id + ": "+ pref);    RoomGroupDAO gdao=new RoomGroupDAO();    RoomGroup gr=gdao.get(new Long(id));    RoomGroupPref gp=new RoomGroupPref();    gp.setOwner(pg);    gp.setPrefLevel(PreferenceLevel.getPreferenceLevel(Integer.parseInt(pref)));    gp.setRoomGroup(gr);    RoomGroupPref sameParentGp=null;    for (Iterator j=parentRoomGroupPrefs.iterator(); j.hasNext(); ) {      RoomGroupPref p=(RoomGroupPref)j.next();      if (p.isSame(gp)) {        if (p.getPrefLevel().equals(gp.getPrefLevel()))         sameParentGp=gp;        j.remove();        break;      }    }    if (sameParentGp == null)     s.add(gp);  }  if (parentRoomGroupPrefs != null && !parentRoomGroupPrefs.isEmpty()) {    for (Iterator i=parentRoomGroupPrefs.iterator(); i.hasNext(); ) {      RoomGroupPref gp=(RoomGroupPref)((RoomGroupPref)i.next()).clone();      gp.setOwner(pg);      gp.setPrefLevel(PreferenceLevel.getPreferenceLevel(PreferenceLevel.sNeutral));      s.add(gp);    }  }  lst=frm.getDatePatternPrefs();  lstL=frm.getDatePatternPrefLevels();  Set parentDatePatternPrefs=pg.effectivePreferences(DatePatternPref.class);  for (int i=0; i < lst.size(); i++) {    String id=(String)lst.get(i);    if (id == null || id.equals(Preference.BLANK_PREF_VALUE) || lstL.get(i).equals(PreferenceLevel.PREF_LEVEL_NEUTRAL))     continue;    String pref=(String)lstL.get(i);    Debug.debug("Datepattern: " + id + ": "+ pref);    DatePatternDAO dpdao=new DatePatternDAO();    DatePattern dp=dpdao.get(new Long(id));    DatePatternPref dpp=new DatePatternPref();    dpp.setOwner(pg);    dpp.setPrefLevel(PreferenceLevel.getPreferenceLevel(Integer.parseInt(pref)));    dpp.setDatePattern(dp);    DatePatternPref sameParentDp=null;    for (Iterator j=parentDatePatternPrefs.iterator(); j.hasNext(); ) {      DatePatternPref p=(DatePatternPref)j.next();      if (p.isSame(dpp)) {        if (p.getPrefLevel().equals(dpp.getPrefLevel()))         sameParentDp=dpp;        j.remove();        break;      }    }    if (sameParentDp == null)     s.add(dpp);  }  if (parentDatePatternPrefs != null && !parentDatePatternPrefs.isEmpty()) {    for (Iterator i=parentDatePatternPrefs.iterator(); i.hasNext(); ) {      DatePatternPref gp=(DatePatternPref)((DatePatternPref)i.next()).clone();      if (!pg.effectiveDatePattern().findChildren().contains(gp.getDatePattern())) {        continue;      }      gp.setOwner(pg);      gp.setPrefLevel(PreferenceLevel.getPreferenceLevel(PreferenceLevel.sNeutral));      s.add(gp);    }  }  pg.setPreferences(s);}  }
class C{  public XYItemRendererState(PlotRenderingInfo info){  super(info);  this.workingLine=new Line2D.Double();  this.processVisibleItemsOnly=true;}  }
class C{  public void toggle(){  setState((getState() + 1) % 2);}  }
class C{  public boolean drawImage(Image img,int x,int y,int width,int height,ImageObserver observer){  DebugGraphicsInfo info=info();  if (debugLog()) {    info.log(toShortString() + " Drawing image: " + img+ " at: "+ new Rectangle(x,y,width,height));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawImage(img,x,y,width,height,observer);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    int i, count=(info.flashCount * 2) - 1;    ImageProducer oldProducer=img.getSource();    ImageProducer newProducer=new FilteredImageSource(oldProducer,new DebugGraphicsFilter(info.flashColor));    Image newImage=Toolkit.getDefaultToolkit().createImage(newProducer);    DebugGraphicsObserver imageObserver=new DebugGraphicsObserver();    Image imageToDraw;    for (i=0; i < count; i++) {      imageToDraw=(i % 2) == 0 ? newImage : img;      loadImage(imageToDraw);      graphics.drawImage(imageToDraw,x,y,width,height,imageObserver);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }  }  return graphics.drawImage(img,x,y,width,height,observer);}  }
class C{  public ObjectMatrix2D assign(Object[][] values){  if (this.isNoView) {    if (values.length != rows)     throw new IllegalArgumentException("Must have same number of rows: rows=" + values.length + "rows()="+ rows());    int i=columns * (rows - 1);    for (int row=rows; --row >= 0; ) {      Object[] currentRow=values[row];      if (currentRow.length != columns)       throw new IllegalArgumentException("Must have same number of columns in every row: columns=" + currentRow.length + "columns()="+ columns());      System.arraycopy(currentRow,0,this.elements,i,columns);      i-=columns;    }  } else {    super.assign(values);  }  return this;}  }
class C{  public static boolean isDebugEnabled(){  return isDebugEnabled;}  }
class C{  public void open(){  showDropdown();}  }
class C{  protected void redrawSquares(boolean force){  if (decorators == null) {    return;  }  for (  SquareDecorator decorator : decorators) {    if (force) {      decorator.square.redraw();    } else {      decorator.square.setDirty(true);    }  }}  }
class C{  @Override public boolean willNotMoveInCurrentCollection(ObjectReference object){  return (SS.hi && !Space.isInSpace(SS.SS0,object)) || (!SS.hi && !Space.isInSpace(SS.SS1,object));}  }
class C{  public AppsForYourDomainGmailFilterClient(String username,String password,String domain,String destinationUser) throws Exception {  this.domain=domain;  if (destinationUser == null) {    this.destinationUser=username;  } else {    this.destinationUser=destinationUser;  }  gmailFilterService=new GmailFilterService("exampleCo-exampleApp-1");  gmailFilterService.setUserCredentials(username + "@" + domain,password);  runSample();}  }
class C{  public static VAlarm audio(Trigger trigger){  return audio(trigger,null);}  }
class C{  private void testGetHighestModSeq() throws Exception {  LOG.info("getHighestModSeq");  long highestModSeq=messageMapper.getHighestModSeq(MBOXES.get(1));  assertEquals(MESSAGE_NO.size(),highestModSeq);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  if (instruction.getMnemonic().startsWith("SHASX")) {    TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SHASX");    translateAll(environment,instruction,"SHASX",instructions);  } else {    TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SHADDSUBX");    translateAll(environment,instruction,"SHADDSUBX",instructions);  }}  }
class C{  public static void inlineFunction(final JFrame parent,final ZyGraph graph,final INaviFunctionNode node){  Preconditions.checkNotNull(parent,"IE01743: Parent argument can not be null");  Preconditions.checkNotNull(graph,"IE01744: Graph argument can not be null");  Preconditions.checkNotNull(node,"IE01745: Node argument can not be null");  final INaviView view=graph.getRawView();  final INaviFunction function=node.getFunction();  try {    if (!function.isLoaded()) {      function.load();    }    CInliningHelper.inlineFunctionNode(view,node);    if (graph.getSettings().getLayoutSettings().getAutomaticLayouting()) {      CGraphLayouter.refreshLayout(parent,graph);    }  } catch (  final CouldntLoadDataException e) {    exceptionDialog(parent,function,e);  }}  }
class C{  @Override public void receive(DatagramPacket p) throws IOException {synchronized (packetsToReceive) {    do {      if (closed) {        throw new SocketException(RelayedCandidateDatagramSocket.class.getSimpleName() + " has been closed.");      } else       if (packetsToReceive.isEmpty()) {        try {          packetsToReceive.wait();        } catch (        InterruptedException iex) {        }      } else {        DatagramPacket packetToReceive=packetsToReceive.remove(0);        MultiplexingXXXSocketSupport.copy(packetToReceive,p);        packetsToReceive.notifyAll();        break;      }    } while (true);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.747 -0500",hash_original_method="CA0F410F50592B0E0C8F6A16050EA193",hash_generated_method="E026598B6C32CD975181623693D96406") public void focusOut(View view){synchronized (mH) {    if (DEBUG)     Log.v(TAG,"focusOut: " + view + " mServedView="+ mServedView+ " winFocus="+ view.hasWindowFocus());    if (mServedView != view) {      if (false && view.hasWindowFocus()) {        mNextServedView=null;        scheduleCheckFocusLocked(view);      }    }  }}  }
class C{  public void pool(){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void deleteAllTracks(){  if (!isTrackListEmpty(false)) {    findMenuItem(trackListActivity.getString(R.string.menu_delete_all),true);    getButtonOnScreen(trackListActivity.getString(R.string.generic_yes),true,true);    waitTextToDisappear(trackListActivity.getString(R.string.generic_progress_title));  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("(");  sb.append(this.location);  if (this.certs != null && this.certs.length > 0) {    for (int i=0; i < this.certs.length; i++) {      sb.append(" " + this.certs[i]);    }  } else   if (this.signers != null && this.signers.length > 0) {    for (int i=0; i < this.signers.length; i++) {      sb.append(" " + this.signers[i]);    }  } else {    sb.append(" <no signer certificates>");  }  sb.append(")");  return sb.toString();}  }
class C{  private void addSpan(CacheSpan span){  TreeSet<CacheSpan> spansForKey=cachedSpans.get(span.key);  if (spansForKey == null) {    spansForKey=new TreeSet<>();    cachedSpans.put(span.key,spansForKey);  }  spansForKey.add(span);  totalSpace+=span.length;  notifySpanAdded(span);}  }
class C{  private static void storeProperties(Properties properties,OutputStream out) throws IOException {  BufferedWriter awriter;  awriter=new BufferedWriter(new OutputStreamWriter(out,"8859_1"));  for (Enumeration<Object> e=properties.keys(); e.hasMoreElements(); ) {    String key=(String)e.nextElement();    String val=(String)properties.get(key);    key=saveConvert(key,true);    val=saveConvert(val,false);    writeln(awriter,key + "=" + val);  }  awriter.flush();}  }
class C{  protected void finalize() throws Throwable {  this.builder=null;  this.reader=null;  this.entityResolver=null;  this.validator=null;  super.finalize();}  }
class C{  public void destroy(){  if (isNative) {    ((BrowserComponent)internal).setPage("<html><body></body></html>",null);    ((BrowserComponent)internal).destroy();  }  internal=null;}  }
class C{  protected JavaType _fromParamType(ParameterizedType type,TypeBindings context){  Class<?> rawType=(Class<?>)type.getRawType();  Type[] args=type.getActualTypeArguments();  int paramCount=(args == null) ? 0 : args.length;  JavaType[] pt;  if (paramCount == 0) {    pt=NO_TYPES;  } else {    pt=new JavaType[paramCount];    for (int i=0; i < paramCount; ++i) {      pt[i]=_constructType(args[i],context);    }  }  if (Map.class.isAssignableFrom(rawType)) {    JavaType subtype=constructSimpleType(rawType,pt);    JavaType[] mapParams=findTypeParameters(subtype,Map.class);    if (mapParams.length != 2) {      throw new IllegalArgumentException("Could not find 2 type parameters for Map class " + rawType.getName() + " (found "+ mapParams.length+ ")");    }    return MapType.construct(rawType,mapParams[0],mapParams[1]);  }  if (Collection.class.isAssignableFrom(rawType)) {    JavaType subtype=constructSimpleType(rawType,pt);    JavaType[] collectionParams=findTypeParameters(subtype,Collection.class);    if (collectionParams.length != 1) {      throw new IllegalArgumentException("Could not find 1 type parameter for Collection class " + rawType.getName() + " (found "+ collectionParams.length+ ")");    }    return CollectionType.construct(rawType,collectionParams[0]);  }  if (paramCount == 0) {    return new SimpleType(rawType);  }  return constructSimpleType(rawType,pt);}  }
class C{  public void visitLabel(Label label){  if (mv != null) {    mv.visitLabel(label);  }}  }
class C{  public void addField(FieldRef fref){  mFieldRefs.add(fref);}  }
class C{  public GridCacheWriteBehindStore(CacheStoreManager storeMgr,String gridName,String cacheName,IgniteLogger log,CacheStore<K,V> store){  this.storeMgr=storeMgr;  this.gridName=gridName;  this.cacheName=cacheName;  this.log=log;  this.store=store;}  }
class C{  public boolean isIncludeNullsLocation(){  Object oo=get_Value(COLUMNNAME_IsIncludeNullsLocation);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private final void dispatachChars(int node) throws org.xml.sax.SAXException {  m_dtm.dispatchCharactersEvents(node,m_contentHandler,false);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.IMPORT_DECLARATION__IMPORT_SPECIFIERS:    getImportSpecifiers().clear();  getImportSpecifiers().addAll((Collection<? extends ImportSpecifier>)newValue);return;case N4JSPackage.IMPORT_DECLARATION__IMPORT_FROM:setImportFrom((Boolean)newValue);return;case N4JSPackage.IMPORT_DECLARATION__MODULE:setModule((TModule)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @RequestMapping(value="/SAML2/Metadata/{tenant:.*}") public void metadataError(Locale locale,@PathVariable(value="tenant") String tenant,HttpServletResponse response) throws IOException {  logger.info("Metadata binding error! The client locale is {}, tenant is {}",locale.toString(),tenant);  metadataDefaultTenantBindingError(locale,response);}  }
class C{  public Speech(OdorWorldEntity parent,String phrase,double threshold){  super(parent,"Say: \"" + phrase + "\"");  this.phrase=phrase;  this.threshold=threshold;}  }
class C{  private JsonObject readDescriptor(InputStream in) throws IOException {  try {    return PARSER.parse(new InputStreamReader(in)).getAsJsonObject();  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  public static void register(String algorithmURI,Class<? extends TransformSpi> implementingClass) throws AlgorithmAlreadyRegisteredException {  JavaUtils.checkRegisterPermission();  Class<? extends TransformSpi> transformSpi=transformSpiHash.get(algorithmURI);  if (transformSpi != null) {    Object exArgs[]={algorithmURI,transformSpi};    throw new AlgorithmAlreadyRegisteredException("algorithm.alreadyRegistered",exArgs);  }  transformSpiHash.put(algorithmURI,implementingClass);}  }
class C{  public static BufferedImage algorithmicConvertYCbCrToRGB(final byte[] buffer,final int w,final int h){  BufferedImage image=null;  final byte[] new_data=new byte[w * h * 3];  int pixelCount=w * h * 3;  if (pixelCount > buffer.length) {    pixelCount=buffer.length;  }  int r=0, g=0, b=0;  int lastY=-1, lastCb=-1, lastCr=-1;  int pixelReached=0;  float val1;  for (int i=0; i < pixelCount; i+=3) {    final int Y=((buffer[i] & 255));    final int Cb=((buffer[1 + i] & 255));    final int Cr=((buffer[2 + i] & 255));    if ((lastY == Y) && (lastCb == Cb) && (lastCr == Cr)) {    } else {      val1=298.082f * Y;      r=(int)(((val1 + (408.583f * Cr)) / 256f) - 222.921);      if (r < 0) {        r=0;      }      if (r > 255) {        r=255;      }      g=(int)(((val1 - (100.291f * Cb) - (208.120f * Cr)) / 256f) + 135.576f);      if (g < 0) {        g=0;      }      if (g > 255) {        g=255;      }      b=(int)(((val1 + (516.412f * Cb)) / 256f) - 276.836f);      if (b < 0) {        b=0;      }      if (b > 255) {        b=255;      }      lastY=Y;      lastCb=Cb;      lastCr=Cr;    }    new_data[pixelReached++]=(byte)(r);    new_data[pixelReached++]=(byte)(g);    new_data[pixelReached++]=(byte)(b);  }  try {    image=new BufferedImage(w,h,BufferedImage.TYPE_INT_RGB);    final Raster raster=createInterleavedRaster(new_data,w,h);    image.setData(raster);  } catch (  final Exception e) {    LogWriter.writeLog("Exception " + e + " with 24 bit RGB image");  }  return image;}  }
class C{  private static Point2D.Double v2Negate(Point2D.Double v){  v.x=-v.x;  v.y=-v.y;  return v;}  }
class C{  void sendPeriodicAck(){  List events=new ArrayList();  boolean success=false;synchronized (threadIdToSequenceId) {    Iterator iterator=threadIdToSequenceId.entrySet().iterator();    while (iterator.hasNext()) {      Map.Entry entry=(Map.Entry)iterator.next();      SequenceIdAndExpirationObject seo=(SequenceIdAndExpirationObject)entry.getValue();      if (!seo.getAckSend()) {        ThreadIdentifier tid=(ThreadIdentifier)entry.getKey();        events.add(new EventID(tid.getMembershipID(),tid.getThreadID(),seo.getSequenceId()));        seo.setAckSend(true);      }    }  }  if (events.size() > 0) {    try {      PrimaryAckOp.execute(qManager.getAllConnections().getPrimary(),qManager.getPool(),events);      success=true;    } catch (    Exception ex) {      if (logger.isDebugEnabled())       logger.debug("Exception while sending an ack to the primary server: {}",ex);    } finally {      if (!success) {        Iterator iter=events.iterator();        while (iter.hasNext()) {          EventID eid=(EventID)iter.next();          ThreadIdentifier tid=new ThreadIdentifier(eid.getMembershipID(),eid.getThreadID());synchronized (threadIdToSequenceId) {            SequenceIdAndExpirationObject seo=(SequenceIdAndExpirationObject)threadIdToSequenceId.get(tid);            if (seo != null && seo.getAckSend()) {              seo=(SequenceIdAndExpirationObject)threadIdToSequenceId.remove(tid);              if (seo != null) {                SequenceIdAndExpirationObject siaeo=new SequenceIdAndExpirationObject(seo.getSequenceId(),seo.getPutAllSequenceId());                threadIdToSequenceId.put(tid,siaeo);              }            }          }        }      }    }  }}  }
class C{  public boolean containsValue(long val){  for (  NSObject o : dict.values()) {    if (o.getClass().equals(NSNumber.class)) {      NSNumber num=(NSNumber)o;      if (num.isInteger() && num.intValue() == val)       return true;    }  }  return false;}  }
class C{  public DataSet simulateData(DataSet dataSet,boolean latentDataSaved){  throw new UnsupportedOperationException();}  }
class C{  @RequestMapping(value="/{id}/body") public ModelAndView proteinBody(@PathVariable String id){  return new ModelAndView("protein-body",buildModelMap(retrieve(id),false));}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double z;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    WhiteboxRaster numInflowingStreamCells=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,noData);    numInflowingStreamCells.isTemporaryFile=true;    byte numNeighbouringStreamCells=0;    double currentValue=0;    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            output.setValue(row,col,1);            numInflowingStreamCells.setValue(row,col,-1);          } else {            output.setValue(row,col,0);            numInflowingStreamCells.setValue(row,col,numNeighbouringStreamCells);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (numInflowingStreamCells.getValue(row,col) == -1) {          x=col;          y=row;          flag=true;          do {            z=output.getValue(y,x);            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              if (c > 7) {                showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                return;              }              x+=dX[c];              y+=dY[c];              if (streams.getValue(y,x) <= 0) {                flag=false;              } else {                currentValue=numInflowingStreamCells.getValue(y,x) - 1;                numInflowingStreamCells.setValue(y,x,currentValue);                if (currentValue > 0) {                  flag=false;                }                currentValue=output.getValue(y,x);                output.setValue(y,x,z + currentValue);              }            } else {              flag=false;            }          } while (flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    numInflowingStreamCells.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @LargeTest public void testFillWindow(){  final String testTable="testV";  mDatabase.beginTransaction();  mDatabase.execSQL("CREATE TABLE " + testTable + " (col1 int, desc text not null);");  mDatabase.setTransactionSuccessful();  mDatabase.endTransaction();  StringBuilder buff=new StringBuilder();  for (int i=0; i < 500; i++) {    buff.append(i % 10 + "");  }  ContentValues values=new ContentValues();  values.put("desc",buff.toString());  int N=5000;  Set<Integer> rows=new HashSet<Integer>();  mDatabase.beginTransaction();  for (int j=0; j < N; j++) {    values.put("col1",j);    mDatabase.insert(testTable,null,values);    rows.add(j);  }  mDatabase.setTransactionSuccessful();  mDatabase.endTransaction();  assertEquals(N,rows.size());  Cursor c1=mDatabase.rawQuery("select * from " + testTable,null);  assertEquals(N,c1.getCount());  c1.close();  Cursor c=mDatabase.query(testTable,new String[]{"col1","desc"},null,null,null,null,null);  int i=0;  while (c.moveToNext()) {    int val=c.getInt(0);    assertTrue(rows.contains(val));    assertTrue(rows.remove(val));  }  assertTrue(rows.isEmpty());  rows=new HashSet<Integer>();  mDatabase.beginTransaction();  int M=N + 1000;  for (int j=0; j < M; j++) {    rows.add(j);    if (j < N) {      continue;    }    values.put("col1",j);    mDatabase.insert(testTable,null,values);  }  mDatabase.setTransactionSuccessful();  mDatabase.endTransaction();  assertEquals(M,rows.size());  c.requery();  i=0;  while (c.moveToNext()) {    int val=c.getInt(0);    assertTrue(rows.contains(val));    assertTrue(rows.remove(val));  }  assertTrue(rows.isEmpty());  c.moveToFirst();  int K=N / 2;  for (int p=0; p < K && c.moveToNext(); p++) {  }  mDatabase.beginTransaction();  mDatabase.delete(testTable,"col1 < ?",new String[]{(3 * M / 4) + ""});  mDatabase.setTransactionSuccessful();  mDatabase.endTransaction();  c.requery();  assertEquals(M / 4,c.getCount());  while (c.moveToNext()) {  }  c.close();}  }
class C{  public void execute(Iterator<String> ignored){  mOps.getLoaderManager().initLoader(0,null,this);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.ARROW_FUNCTION__HAS_BRACES_AROUND_BODY:    return isHasBracesAroundBody();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public boolean allProceduresAreCallable(){  debugCodeCall("allProceduresAreCallable");  return true;}  }
class C{  @LargeTest public void testWifiUpload() throws Exception {  mConnectionUtil.wifiTestInit();  assertTrue(setDeviceWifiAndAirplaneMode(mSsid));  uploadFile();}  }
class C{  private static Escape[] simpleEscapes(char[] chars){  Escape[] out=new Escape[chars.length];  for (int i=0; i < out.length; ++i) {    out[i]=new Escape(chars[i],"\\" + chars[i]);  }  return out;}  }
class C{  public static FloatMatrix rand(int rows,int columns){  FloatMatrix m=new FloatMatrix(rows,columns);  for (int i=0; i < rows * columns; i++) {    m.data[i]=(float)Random.nextFloat();  }  return m;}  }
class C{  public boolean hasNextPage(){  return getTotalPages() > getCurrentPage();}  }
class C{  public DrawerBuilder withShowDrawerOnFirstLaunch(boolean showDrawerOnFirstLaunch){  this.mShowDrawerOnFirstLaunch=showDrawerOnFirstLaunch;  return this;}  }
class C{  public static void logReleaseWithBuildNumber(Logger logger){  logger.info(ManifestParser.parseReleaseWithBuildNumber());}  }
class C{  public BufferedImage drawToBufferedImage(){  final BufferedImage bufImg=new BufferedImage(getIconWidth(),getIconHeight(),BufferedImage.TYPE_INT_ARGB);  final Graphics g=bufImg.getGraphics();  paintIcon(null,g,0,0);  g.dispose();  return bufImg;}  }
class C{  public void unknown(int code,byte[] data) throws IOException {  print("unknown code =",new String[]{Integer.toString(code)});}  }
class C{  static <T>Collection<T> cast(Iterable<T> iterable){  return (Collection<T>)iterable;}  }
class C{  public void reset(URL url){  server.reset(url);}  }
class C{  public static double distance(Geometry g1,Geometry g2){  IndexedFacetDistance dist=new IndexedFacetDistance(g1);  return dist.getDistance(g2);}  }
class C{  public ICalDate(Date date,boolean hasTime){  this(date,null,hasTime);}  }
class C{  public static Supplier<RSyntaxNode> createFromArguments(RFunction function,RArgsValuesAndNames arguments){  return createFromArgumentsInternal(function,arguments);}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  private static void appendJSONPair(final StringBuilder json,final String key,final String value) throws UnsupportedEncodingException {  boolean isValueNumeric=false;  try {    if (value.equals("0") || !value.endsWith("0")) {      Double.parseDouble(value);      isValueNumeric=true;    }  } catch (  final NumberFormatException e) {    isValueNumeric=false;  }  if (json.charAt(json.length() - 1) != '{') {    json.append(',');  }  json.append(escapeJSON(key));  json.append(':');  if (isValueNumeric) {    json.append(value);  } else {    json.append(escapeJSON(value));  }}  }
class C{  private void unifyLinks(Link segment1,Link segment2){  if (segment1.getToNode().getId().equals(segment2.getFromNode().getId()) == false)   return;  final Network network=net;  NetworkFactory r=net.getFactory();  Link newLink=NetworkUtils.createLink(this.getRandomLinkId(),segment1.getFromNode(),segment2.getToNode(),network,segment1.getLength() + segment2.getLength(),(segment1.getFreespeed() + segment2.getFreespeed()) / 2.0,(segment1.getCapacity() + segment2.getCapacity()) / 2.0,Math.min(segment1.getNumberOfLanes(),segment2.getNumberOfLanes()));  net.addLink(newLink);  net.removeLink(segment1.getId());  net.removeLink(segment2.getId());}  }
class C{  public ByteBuffer(){}  }
class C{  public void addDataSource(){  Integer currentSize=dataset.getSeriesCount();  dataset.addSeries(new XYSeries(currentSize + 1));  this.fireDataSourceAdded(currentSize);}  }
class C{  public boolean isEntityThere() throws SortJdbcException, SortQueryException {  return getEntityKey(false) != null;}  }
class C{  @CloudUnitSecurable @ResponseBody @RequestMapping(value="/{applicationName}/ports/{portToOpen}",method=RequestMethod.DELETE) public JsonResponse removePort(JsonInput input) throws ServiceException, CheckException {  String applicationName=input.getApplicationName();  if (logger.isDebugEnabled()) {    logger.debug("application.name=" + applicationName);    logger.debug("application.port=" + input.getPortToOpen());  }  User user=this.authentificationUtils.getAuthentificatedUser();  Application application=applicationService.findByNameAndUser(user,applicationName);  CheckUtils.validateOpenPort(input.getPortToOpen(),application);  Integer port=Integer.parseInt(input.getPortToOpen());  applicationService.removePort(application,port);  return new HttpOk();}  }
class C{  private static boolean isModuleFileSpecifier(IPath path){  if (path.segmentCount() < 1) {    return false;  }  String stringPath=path.toString();  return stringPath.charAt(stringPath.length() - 1) != '/';}  }
class C{  public static AdClients run(AdSense adsense,int maxPageSize) throws Exception {  System.out.println("=================================================================");  System.out.println("Listing all ad clients for default account");  System.out.println("=================================================================");  String pageToken=null;  AdClients adClients=null;  do {    adClients=adsense.adclients().list().setMaxResults(maxPageSize).setPageToken(pageToken).execute();    if (adClients.getItems() != null && !adClients.getItems().isEmpty()) {      for (      AdClient adClient : adClients.getItems()) {        System.out.printf("Ad client for product \"%s\" with ID \"%s\" was found.\n",adClient.getProductCode(),adClient.getId());        System.out.printf("\tSupports reporting: %s\n",adClient.getSupportsReporting() ? "Yes" : "No");      }    } else {      System.out.println("No ad clients found.");    }    pageToken=adClients.getNextPageToken();  } while (pageToken != null);  System.out.println();  return adClients;}  }
class C{  public static int findLogSegmentNotLessThanTxnId(List<LogSegmentMetadata> segments,long transactionId){  int found=-1;  for (int i=segments.size() - 1; i >= 0; i--) {    LogSegmentMetadata segment=segments.get(i);    if (segment.getFirstTxId() <= transactionId) {      found=i;      break;    }  }  if (found <= -1) {    return -1;  }  if (found == 0 && segments.get(0).getFirstTxId() == transactionId) {    return 0;  }  LogSegmentMetadata foundSegment=segments.get(found);  if (foundSegment.getFirstTxId() == transactionId) {    for (int i=found - 1; i >= 0; i--) {      LogSegmentMetadata segment=segments.get(i);      if (segment.isInProgress()) {        break;      }      if (segment.getLastTxId() < transactionId) {        break;      }      found=i;    }    return found;  } else {    if (foundSegment.isInProgress() || found == segments.size() - 1) {      return found;    }    if (foundSegment.getLastTxId() >= transactionId) {      return found;    }    return found + 1;  }}  }
class C{  protected String XMLNormalize(String sStr){  StringBuffer sStr2=new StringBuffer();  for (int iStr=0; iStr < sStr.length(); iStr++) {    char c=sStr.charAt(iStr);switch (c) {case '&':      sStr2.append("&amp;");    break;case '\'':  sStr2.append("&apos;");break;case '\"':sStr2.append("&quot;");break;case '<':sStr2.append("&lt;");break;case '>':sStr2.append("&gt;");break;default :sStr2.append(c);}}return sStr2.toString();}  }
class C{  public IStatus validateCreateLink(IFolder folder,int updateFlags,IPath location){  return Status.OK_STATUS;}  }
class C{  private static boolean isStackTraceLikelyConflictive(Throwable throwable,Class<? extends Activity> activityClass){  do {    StackTraceElement[] stackTrace=throwable.getStackTrace();    for (    StackTraceElement element : stackTrace) {      if ((element.getClassName().equals("android.app.ActivityThread") && element.getMethodName().equals("handleBindApplication")) || element.getClassName().equals(activityClass.getName())) {        return true;      }    }  } while ((throwable=throwable.getCause()) != null);  return false;}  }
class C{  @Override protected void realClose(boolean calledExplicitly,boolean closeOpenResults) throws SQLException {  MySQLConnection locallyScopedConn=this.connection;  if (locallyScopedConn == null) {    return;  }synchronized (locallyScopedConn.getConnectionMutex()) {    if (this.connection != null) {      if (this.connection.getAutoGenerateTestcaseScript()) {        dumpCloseForTestcase();      }      SQLException exceptionDuringClose=null;      if (calledExplicitly && !this.connection.isClosed()) {synchronized (this.connection.getConnectionMutex()) {          try {            MysqlIO mysql=this.connection.getIO();            Buffer packet=mysql.getSharedSendPacket();            packet.writeByte((byte)MysqlDefs.COM_CLOSE_STATEMENT);            packet.writeLong(this.serverStatementId);            mysql.sendCommand(MysqlDefs.COM_CLOSE_STATEMENT,null,packet,true,null,0);          } catch (          SQLException sqlEx) {            exceptionDuringClose=sqlEx;          }        }      }      if (this.isCached) {        this.connection.decachePreparedStatement(this);      }      super.realClose(calledExplicitly,closeOpenResults);      clearParametersInternal(false);      this.parameterBindings=null;      this.parameterFields=null;      this.resultFields=null;      if (exceptionDuringClose != null) {        throw exceptionDuringClose;      }    }  }}  }
class C{  public Block createBlock(){  BlockImpl block=new BlockImpl();  return block;}  }
class C{  public boolean isNOT_EQUAL(){  return value == NOT_EQUAL;}  }
class C{  public BaleenJob(String name,CollectionProcessingEngine engine){  super(name,engine);}  }
class C{  @Override public int allocateNewSpillLocation(int type){  int spillSize=PhysicalRegisterSet.getSpillSize(type);  spillPointer=align(spillPointer,spillSize);  spillPointer+=spillSize;  if (spillPointer > frameSize) {    frameSize=spillPointer;  }  return spillPointer - spillSize;}  }
class C{  public static boolean isInputStreamGZIPCompressed(final PushbackInputStream inputStream) throws IOException {  if (inputStream == null)   return false;  byte[] signature=new byte[2];  int count=0;  try {    while (count < 2) {      int readCount=inputStream.read(signature,count,2 - count);      if (readCount < 0)       return false;      count=count + readCount;    }  }  finally {    inputStream.unread(signature,0,count);  }  int streamHeader=((int)signature[0] & 0xff) | ((signature[1] << 8) & 0xff00);  return GZIPInputStream.GZIP_MAGIC == streamHeader;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public boolean skipIfChar(char c) throws ParseException {  if (index < orig.length) {    if (orig[index] == c) {      index++;      return true;    } else {      return false;    }  } else {    throw new ParseException("No more characters",index);  }}  }
class C{  public static void insertThriftRenameTableLogEntry(org.apache.hadoop.hive.metastore.api.Table oldTable,org.apache.hadoop.hive.metastore.api.Table newTable,HiveConf hiveConf) throws Exception {  final MetastoreAuditLogListener metastoreAuditLogListener=new MetastoreAuditLogListener(hiveConf);  AlterTableEvent event=new AlterTableEvent(oldTable,newTable,true,null);  metastoreAuditLogListener.onAlterTable(event);}  }
class C{  public static void exportAllAsJPEG(final Graph2DView view,final String filename) throws IOException {  final y.io.JPGIOHandler jpg=new y.io.JPGIOHandler();  jpg.setAntialiasingEnabled(true);  jpg.setQuality(0.9f);  exportGraphToImageFileFormat(view.getGraph2D(),jpg,filename,jpg.createDefaultGraph2DView(view.getGraph2D()));}  }
class C{  public void pointerPressed(int[] x,int[] y){  dragActivated=false;  pointerPressed(x[0],y[0]);  scrollOpacity=0xff;}  }
class C{  public Bootique bootLogger(BootLogger bootLogger){  this.bootLogger=bootLogger;  return this;}  }
class C{  public boolean isCancelled(){  AsyncHttpRequest _request=request.get();  return _request == null || _request.isCancelled();}  }
class C{  @VisibleForTesting void configureUsageTracking(){  UsageTrackerManager usageTrackerManager=UsageTrackerManager.getInstance();  if (usageTrackerManager.isUsageTrackingAvailable() && !usageTrackerManager.hasUserRecordedTrackingPreference()) {    NotificationsManager.getNotificationsManager();    NotificationsConfiguration.getNotificationsConfiguration().register(TrackerMessageBundle.message("notification.group.display.id"),NotificationDisplayType.STICKY_BALLOON);    UsageTrackerNotification.getInstance().showNotification();  }}  }
class C{  public boolean isSafeMode(){  return this.safeMode;}  }
class C{  public boolean addAll(int index,Collection<? extends E> c){  if (index > size || index < 0)   throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ size);  Object[] a=c.toArray();  int numNew=a.length;  ensureCapacity(size + numNew);  int numMoved=size - index;  if (numMoved > 0)   System.arraycopy(elementData,index,elementData,index + numNew,numMoved);  System.arraycopy(a,0,elementData,index,numNew);  size+=numNew;  return numNew != 0;}  }
class C{  private void notifyListeners(ContactId contact,Capabilities capabilities){  mCapabilitiesBroadcaster.broadcastCapabilitiesReceived(contact,capabilities);}  }
class C{  private String H(String data){  if (data == null) {    data="";  }  byte[] bytes=data.getBytes(UTF8);  mMd5Digest.update(bytes,0,bytes.length);  byte returnValue[]=new byte[mMd5Digest.getDigestSize()];  mMd5Digest.doFinal(returnValue,0);  return toHexString(returnValue);}  }
class C{  public void close() throws IOException {  stream.close();}  }
class C{  private void removePhiFunctions(){  ArrayList<SsaBasicBlock> blocks=ssaMeth.getBlocks();  for (  SsaBasicBlock block : blocks) {    block.forEachPhiInsn(new PhiVisitor(blocks));    block.removeAllPhiInsns();  }  for (  SsaBasicBlock block : blocks) {    block.scheduleMovesFromPhis();  }}  }
class C{  public boolean nextEppParams(){  return nextElement(RDE_EPP_PARAMS_URI,"eppParams");}  }
class C{  public static <E>Collection<E> constrainedCollection(Collection<E> collection,Constraint<? super E> constraint){  return new ConstrainedCollection<E>(collection,constraint);}  }
class C{  public static void writeVarInt(ByteBuffer buff,int x){  while ((x & ~0x7f) != 0) {    buff.put((byte)(0x80 | (x & 0x7f)));    x>>>=7;  }  buff.put((byte)x);}  }
class C{  public MBeanServerNotificationFilter(){  super();  RELATION_LOGGER.entering(MBeanServerNotificationFilter.class.getName(),"MBeanServerNotificationFilter");  enableType(MBeanServerNotification.REGISTRATION_NOTIFICATION);  enableType(MBeanServerNotification.UNREGISTRATION_NOTIFICATION);  RELATION_LOGGER.exiting(MBeanServerNotificationFilter.class.getName(),"MBeanServerNotificationFilter");  return;}  }
class C{  @Override public String toString(){  return "LogGammaDistribution(k=" + k + ", theta="+ theta+ ", shift="+ shift+ ")";}  }
class C{  @Override protected boolean operateOnRegion(DistributionManager dm,LocalRegion r,long startTime) throws EntryExistsException, RemoteOperationException {  InternalDistributedMember eventSender=originalSender;  if (eventSender == null) {    eventSender=getSender();  }  @Released EntryEventImpl event=null;  try {    if (this.bridgeContext != null) {      event=EntryEventImpl.create(r,getOperation(),getKey(),null,getCallbackArg(),false,eventSender,true);      event.setContext(this.bridgeContext);      if (this.hasOldValue) {        if (this.oldValueIsSerialized) {          event.setSerializedOldValue(getOldValueBytes());        } else {          event.setOldValue(getOldValueBytes());        }      }    } else {      event=EntryEventImpl.create(r,getOperation(),getKey(),null,getCallbackArg(),this.useOriginRemote,eventSender,true,false);    }    event.setCausedByMessage(this);    if (this.versionTag != null) {      this.versionTag.replaceNullIDs(getSender());      event.setVersionTag(this.versionTag);    }    if (this.hasOldValue) {      if (this.oldValueIsSerialized) {        event.setSerializedOldValue(getOldValueBytes());      } else {        event.setOldValue(getOldValueBytes());      }    }    Assert.assertTrue(eventId != null);    event.setEventId(eventId);    event.setPossibleDuplicate(this.possibleDuplicate);    try {      r.getDataView().destroyOnRemote(event,true,this.expectedOldValue);      sendReply(dm,event.getVersionTag());    } catch (    CacheWriterException cwe) {      sendReply(getSender(),this.processorId,dm,new ReplyException(cwe),r,startTime);      return false;    }catch (    EntryNotFoundException eee) {      if (logger.isDebugEnabled()) {        logger.debug("operateOnRegion caught EntryNotFoundException",eee);      }      ReplyMessage.send(getSender(),getProcessorId(),new ReplyException(eee),getReplySender(dm),r.isInternalRegion());    }catch (    DataLocationException e) {      if (logger.isDebugEnabled()) {        logger.debug("operateOnRegion caught DataLocationException");      }      ReplyMessage.send(getSender(),getProcessorId(),new ReplyException(e),getReplySender(dm),r.isInternalRegion());    }    return false;  }  finally {    if (event != null) {      event.release();    }  }}  }
class C{  private boolean configureClientCharacterSet(boolean dontCheckServerMatch) throws SQLException {  String realJavaEncoding=getEncoding();  boolean characterSetAlreadyConfigured=false;  try {    if (versionMeetsMinimum(4,1,0)) {      characterSetAlreadyConfigured=true;      setUseUnicode(true);      configureCharsetProperties();      realJavaEncoding=getEncoding();      try {        if (this.props != null && this.props.getProperty("com.mysql.jdbc.faultInjection.serverCharsetIndex") != null) {          this.io.serverCharsetIndex=Integer.parseInt(this.props.getProperty("com.mysql.jdbc.faultInjection.serverCharsetIndex"));        }        String serverEncodingToSet=CharsetMapping.getJavaEncodingForCollationIndex(this.io.serverCharsetIndex);        if (serverEncodingToSet == null || serverEncodingToSet.length() == 0) {          if (realJavaEncoding != null) {            setEncoding(realJavaEncoding);          } else {            throw SQLError.createSQLException("Unknown initial character set index '" + this.io.serverCharsetIndex + "' received from server. Initial client character set can be forced via the 'characterEncoding' property.",SQLError.SQL_STATE_GENERAL_ERROR,getExceptionInterceptor());          }        }        if (versionMeetsMinimum(4,1,0) && "ISO8859_1".equalsIgnoreCase(serverEncodingToSet)) {          serverEncodingToSet="Cp1252";        }        if ("UnicodeBig".equalsIgnoreCase(serverEncodingToSet) || "UTF-16".equalsIgnoreCase(serverEncodingToSet) || "UTF-16LE".equalsIgnoreCase(serverEncodingToSet)|| "UTF-32".equalsIgnoreCase(serverEncodingToSet)) {          serverEncodingToSet="UTF-8";        }        setEncoding(serverEncodingToSet);      } catch (      ArrayIndexOutOfBoundsException outOfBoundsEx) {        if (realJavaEncoding != null) {          setEncoding(realJavaEncoding);        } else {          throw SQLError.createSQLException("Unknown initial character set index '" + this.io.serverCharsetIndex + "' received from server. Initial client character set can be forced via the 'characterEncoding' property.",SQLError.SQL_STATE_GENERAL_ERROR,getExceptionInterceptor());        }      }catch (      SQLException ex) {        throw ex;      }catch (      RuntimeException ex) {        SQLException sqlEx=SQLError.createSQLException(ex.toString(),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,null);        sqlEx.initCause(ex);        throw sqlEx;      }      if (getEncoding() == null) {        setEncoding("ISO8859_1");      }      if (getUseUnicode()) {        if (realJavaEncoding != null) {          if (realJavaEncoding.equalsIgnoreCase("UTF-8") || realJavaEncoding.equalsIgnoreCase("UTF8")) {            boolean utf8mb4Supported=versionMeetsMinimum(5,5,2);            boolean useutf8mb4=utf8mb4Supported && (CharsetMapping.UTF8MB4_INDEXES.contains(this.io.serverCharsetIndex));            if (!getUseOldUTF8Behavior()) {              if (dontCheckServerMatch || !characterSetNamesMatches("utf8") || (utf8mb4Supported && !characterSetNamesMatches("utf8mb4"))) {                execSQL(null,"SET NAMES " + (useutf8mb4 ? "utf8mb4" : "utf8"),-1,null,DEFAULT_RESULT_SET_TYPE,DEFAULT_RESULT_SET_CONCURRENCY,false,this.database,null,false);                this.serverVariables.put("character_set_client",useutf8mb4 ? "utf8mb4" : "utf8");                this.serverVariables.put("character_set_connection",useutf8mb4 ? "utf8mb4" : "utf8");              }            } else {              execSQL(null,"SET NAMES latin1",-1,null,DEFAULT_RESULT_SET_TYPE,DEFAULT_RESULT_SET_CONCURRENCY,false,this.database,null,false);              this.serverVariables.put("character_set_client","latin1");              this.serverVariables.put("character_set_connection","latin1");            }            setEncoding(realJavaEncoding);          } else {            String mysqlCharsetName=CharsetMapping.getMysqlCharsetForJavaEncoding(realJavaEncoding.toUpperCase(Locale.ENGLISH),this);            if (mysqlCharsetName != null) {              if (dontCheckServerMatch || !characterSetNamesMatches(mysqlCharsetName)) {                execSQL(null,"SET NAMES " + mysqlCharsetName,-1,null,DEFAULT_RESULT_SET_TYPE,DEFAULT_RESULT_SET_CONCURRENCY,false,this.database,null,false);                this.serverVariables.put("character_set_client",mysqlCharsetName);                this.serverVariables.put("character_set_connection",mysqlCharsetName);              }            }            setEncoding(realJavaEncoding);          }        } else         if (getEncoding() != null) {          String mysqlCharsetName=getServerCharset();          if (getUseOldUTF8Behavior()) {            mysqlCharsetName="latin1";          }          boolean ucs2=false;          if ("ucs2".equalsIgnoreCase(mysqlCharsetName) || "utf16".equalsIgnoreCase(mysqlCharsetName) || "utf16le".equalsIgnoreCase(mysqlCharsetName)|| "utf32".equalsIgnoreCase(mysqlCharsetName)) {            mysqlCharsetName="utf8";            ucs2=true;            if (getCharacterSetResults() == null) {              setCharacterSetResults("UTF-8");            }          }          if (dontCheckServerMatch || !characterSetNamesMatches(mysqlCharsetName) || ucs2) {            try {              execSQL(null,"SET NAMES " + mysqlCharsetName,-1,null,DEFAULT_RESULT_SET_TYPE,DEFAULT_RESULT_SET_CONCURRENCY,false,this.database,null,false);              this.serverVariables.put("character_set_client",mysqlCharsetName);              this.serverVariables.put("character_set_connection",mysqlCharsetName);            } catch (            SQLException ex) {              if (ex.getErrorCode() != MysqlErrorNumbers.ER_MUST_CHANGE_PASSWORD || getDisconnectOnExpiredPasswords()) {                throw ex;              }            }          }          realJavaEncoding=getEncoding();        }      }      String onServer=null;      boolean isNullOnServer=false;      if (this.serverVariables != null) {        onServer=this.serverVariables.get("character_set_results");        isNullOnServer=onServer == null || "NULL".equalsIgnoreCase(onServer) || onServer.length() == 0;      }      if (getCharacterSetResults() == null) {        if (!isNullOnServer) {          try {            execSQL(null,"SET character_set_results = NULL",-1,null,DEFAULT_RESULT_SET_TYPE,DEFAULT_RESULT_SET_CONCURRENCY,false,this.database,null,false);          } catch (          SQLException ex) {            if (ex.getErrorCode() != MysqlErrorNumbers.ER_MUST_CHANGE_PASSWORD || getDisconnectOnExpiredPasswords()) {              throw ex;            }          }          this.serverVariables.put(JDBC_LOCAL_CHARACTER_SET_RESULTS,null);        } else {          this.serverVariables.put(JDBC_LOCAL_CHARACTER_SET_RESULTS,onServer);        }      } else {        if (getUseOldUTF8Behavior()) {          try {            execSQL(null,"SET NAMES latin1",-1,null,DEFAULT_RESULT_SET_TYPE,DEFAULT_RESULT_SET_CONCURRENCY,false,this.database,null,false);            this.serverVariables.put("character_set_client","latin1");            this.serverVariables.put("character_set_connection","latin1");          } catch (          SQLException ex) {            if (ex.getErrorCode() != MysqlErrorNumbers.ER_MUST_CHANGE_PASSWORD || getDisconnectOnExpiredPasswords()) {              throw ex;            }          }        }        String charsetResults=getCharacterSetResults();        String mysqlEncodingName=null;        if ("UTF-8".equalsIgnoreCase(charsetResults) || "UTF8".equalsIgnoreCase(charsetResults)) {          mysqlEncodingName="utf8";        } else         if ("null".equalsIgnoreCase(charsetResults)) {          mysqlEncodingName="NULL";        } else {          mysqlEncodingName=CharsetMapping.getMysqlCharsetForJavaEncoding(charsetResults.toUpperCase(Locale.ENGLISH),this);        }        if (mysqlEncodingName == null) {          throw SQLError.createSQLException("Can't map " + charsetResults + " given for characterSetResults to a supported MySQL encoding.",SQLError.SQL_STATE_ILLEGAL_ARGUMENT,getExceptionInterceptor());        }        if (!mysqlEncodingName.equalsIgnoreCase(this.serverVariables.get("character_set_results"))) {          StringBuilder setBuf=new StringBuilder("SET character_set_results = ".length() + mysqlEncodingName.length());          setBuf.append("SET character_set_results = ").append(mysqlEncodingName);          try {            execSQL(null,setBuf.toString(),-1,null,DEFAULT_RESULT_SET_TYPE,DEFAULT_RESULT_SET_CONCURRENCY,false,this.database,null,false);          } catch (          SQLException ex) {            if (ex.getErrorCode() != MysqlErrorNumbers.ER_MUST_CHANGE_PASSWORD || getDisconnectOnExpiredPasswords()) {              throw ex;            }          }          this.serverVariables.put(JDBC_LOCAL_CHARACTER_SET_RESULTS,mysqlEncodingName);          if (versionMeetsMinimum(5,5,0)) {            this.errorMessageEncoding=charsetResults;          }        } else {          this.serverVariables.put(JDBC_LOCAL_CHARACTER_SET_RESULTS,onServer);        }      }      if (getConnectionCollation() != null) {        StringBuilder setBuf=new StringBuilder("SET collation_connection = ".length() + getConnectionCollation().length());        setBuf.append("SET collation_connection = ").append(getConnectionCollation());        try {          execSQL(null,setBuf.toString(),-1,null,DEFAULT_RESULT_SET_TYPE,DEFAULT_RESULT_SET_CONCURRENCY,false,this.database,null,false);        } catch (        SQLException ex) {          if (ex.getErrorCode() != MysqlErrorNumbers.ER_MUST_CHANGE_PASSWORD || getDisconnectOnExpiredPasswords()) {            throw ex;          }        }      }    } else {      realJavaEncoding=getEncoding();    }  }  finally {    setEncoding(realJavaEncoding);  }  try {    CharsetEncoder enc=Charset.forName(getEncoding()).newEncoder();    CharBuffer cbuf=CharBuffer.allocate(1);    ByteBuffer bbuf=ByteBuffer.allocate(1);    cbuf.put("\u00a5");    cbuf.position(0);    enc.encode(cbuf,bbuf,true);    if (bbuf.get(0) == '\\') {      this.requiresEscapingEncoder=true;    } else {      cbuf.clear();      bbuf.clear();      cbuf.put("\u20a9");      cbuf.position(0);      enc.encode(cbuf,bbuf,true);      if (bbuf.get(0) == '\\') {        this.requiresEscapingEncoder=true;      }    }  } catch (  java.nio.charset.UnsupportedCharsetException ucex) {    try {      byte bbuf[]=StringUtils.getBytes("\u00a5",getEncoding());      if (bbuf[0] == '\\') {        this.requiresEscapingEncoder=true;      } else {        bbuf=StringUtils.getBytes("\u20a9",getEncoding());        if (bbuf[0] == '\\') {          this.requiresEscapingEncoder=true;        }      }    } catch (    UnsupportedEncodingException ueex) {      throw SQLError.createSQLException("Unable to use encoding: " + getEncoding(),SQLError.SQL_STATE_GENERAL_ERROR,ueex,getExceptionInterceptor());    }  }  return characterSetAlreadyConfigured;}  }
class C{  public boolean matches(CharSequence text){  if (text == null) {    return false;  }  final String textString=text.toString();  final String textLowerCase=textString.toLowerCase();  for (  String partialTextLowerCase : mContainsIgnoreCase) {    if (!textLowerCase.contains(partialTextLowerCase)) {      return false;    }  }  for (  Pattern pattern : mMatchesPattern) {    if (!pattern.matcher(text).matches()) {      return false;    }  }  return true;}  }
class C{  public boolean isShowing(){  return true;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeStroke(this.domainGridlineStroke,stream);  SerialUtilities.writePaint(this.domainGridlinePaint,stream);  SerialUtilities.writeStroke(this.rangeGridlineStroke,stream);  SerialUtilities.writePaint(this.rangeGridlinePaint,stream);  SerialUtilities.writeStroke(this.rangeCrosshairStroke,stream);  SerialUtilities.writePaint(this.rangeCrosshairPaint,stream);  SerialUtilities.writeStroke(this.domainCrosshairStroke,stream);  SerialUtilities.writePaint(this.domainCrosshairPaint,stream);  SerialUtilities.writeStroke(this.rangeMinorGridlineStroke,stream);  SerialUtilities.writePaint(this.rangeMinorGridlinePaint,stream);  SerialUtilities.writeStroke(this.rangeZeroBaselineStroke,stream);  SerialUtilities.writePaint(this.rangeZeroBaselinePaint,stream);}  }
class C{  public JmsSubdeploymentScriptCommand(Configuration configuration,String resourcePath,Resource resource){  super(configuration,resourcePath);  this.resource=resource;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4mfPackage.SOURCE_FRAGMENT__SOURCE_FRAGMENT_TYPE:    return getSourceFragmentType();case N4mfPackage.SOURCE_FRAGMENT__PATHS:  return getPaths();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public int size(){  return buffer.length;}  }
class C{  protected boolean isEnableFramebufferObjects(){  return false;}  }
class C{  LuceneService(Directory directory){  initialize(directory);}  }
class C{  public Utf8Reader(File file) throws FileNotFoundException {  this(new FileInputStream(file));}  }
class C{  public CoreException(IStatus status){  super(status.getMessage());  this.status=status;}  }
class C{  public GaussianBlurFilter(int radius){  if (radius < 1) {    radius=1;  }  this.radius=radius;}  }
class C{  public static NormalPlayTime parse(String stringRep) throws ParseException {  if (stringRep == null) {    return null;  }  if ("now".equals(stringRep)) {    return NOW;  }  NPTParser parser=new NPTParser(stringRep);  return new NormalPlayTime(parser.parse());}  }
class C{  public MultiLineLabel(String s,int pixels,int rows,int cols){  super(rows,cols);  if (s == null) {    throw new NullPointerException("null string in multilinelabel");  }  this.setOpaque(false);  setText(s,pixels);}  }
class C{  private void onBluetoothRemoteNameChange(Context context,Intent intent){  Log.d(TAG,"Remote device's name changed.");}  }
class C{  public static List<String> convertToList(String json){  try {    ObjectMapper om=new ObjectMapper();    return om.readValue(json,new TypeReference<List<String>>(){    });  } catch (  IOException e) {    return null;  }}  }
class C{  @Override public int hashCode(){  return super.hashCode() - 2 * evidence.hashCode();}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String outletHeader=null;  int row, col, x, y;  float progress=0;  double z;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  boolean flag=false;  double flowDir=0;  double outletID=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outletHeader=args[1];  outputHeader=args[2];  if (inputHeader.isEmpty() || outputHeader.isEmpty() || outletHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster outlet;    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    if (outletHeader.toLowerCase().endsWith(".shp")) {      ArrayList<Double> outletXs=new ArrayList<>();      ArrayList<Double> outletYs=new ArrayList<>();      ShapeFile input=new ShapeFile(outletHeader);      if (input.getShapeType().getBaseType() != ShapeType.POINT) {        showFeedback("The input pour point vector should be \n" + "of a Point or MultiPoint ShapeType.");        return;      }      for (      ShapeFileRecord record : input.records) {        double[][] vertices;        ShapeType shapeType=record.getShapeType();switch (shapeType) {case POINT:          whitebox.geospatialfiles.shapefile.Point recPoint=(whitebox.geospatialfiles.shapefile.Point)(record.getGeometry());        vertices=recPoint.getPoints();      outletXs.add(vertices[0][0]);    outletYs.add(vertices[0][1]);  break;case POINTZ:PointZ recPointZ=(PointZ)(record.getGeometry());vertices=recPointZ.getPoints();outletXs.add(vertices[0][0]);outletYs.add(vertices[0][1]);break;case POINTM:PointM recPointM=(PointM)(record.getGeometry());vertices=recPointM.getPoints();outletXs.add(vertices[0][0]);outletYs.add(vertices[0][1]);break;case MULTIPOINT:MultiPoint recMultiPoint=(MultiPoint)(record.getGeometry());vertices=recMultiPoint.getPoints();for (int j=0; j < vertices.length; j++) {outletXs.add(vertices[j][0]);outletYs.add(vertices[j][1]);}break;case MULTIPOINTZ:MultiPointZ recMultiPointZ=(MultiPointZ)(record.getGeometry());vertices=recMultiPointZ.getPoints();for (int j=0; j < vertices.length; j++) {outletXs.add(vertices[j][0]);outletYs.add(vertices[j][1]);}break;case MULTIPOINTM:MultiPointM recMultiPointM=(MultiPointM)(record.getGeometry());vertices=recMultiPointM.getPoints();for (int j=0; j < vertices.length; j++) {outletXs.add(vertices[j][0]);outletYs.add(vertices[j][1]);}break;}}outlet=new WhiteboxRaster(outletHeader.replace(".shp",".dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);outlet.isTemporaryFile=true;int numOutlets=outletXs.size();double outletX, outletY;int outletCol, outletRow;int outletNum=1;for (int a=0; a < numOutlets; a++) {outletX=outletXs.get(a);outletY=outletYs.get(a);outletRow=outlet.getRowFromYCoordinate(outletY);outletCol=outlet.getColumnFromXCoordinate(outletX);outlet.setValue(outletRow,outletCol,outletNum);outletNum++;}} else if (outletHeader.toLowerCase().endsWith(".dep")) {outlet=new WhiteboxRaster(outletHeader,"r");if (outlet.getNumberRows() != rows || outlet.getNumberColumns() != cols) {showFeedback("The input images must be of the same dimensions.");return;}} else {showFeedback("Unrecognized input outlets file type.");return;}WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,-999);output.setDataScale(WhiteboxRasterBase.DataScale.CATEGORICAL);output.setPreferredPalette("categorical1.pal");for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=outlet.getValue(row,col);if (z != 0 && z != noData) {output.setValue(row,col,z);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress("Loop 1 of 2:",(int)progress);}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {if (output.getValue(row,col) == -999 && pntr.getValue(row,col) != noData) {flag=false;x=col;y=row;do {flowDir=pntr.getValue(y,x);if (flowDir > 0) {c=(int)(Math.log(flowDir) / LnOf2);x+=dX[c];y+=dY[c];z=output.getValue(y,x);if (z != -999) {outletID=z;flag=true;}} else {outletID=noData;flag=true;}} while (!flag);flag=false;x=col;y=row;output.setValue(y,x,outletID);do {flowDir=pntr.getValue(y,x);if (flowDir > 0) {c=(int)(Math.log(flowDir) / LnOf2);x+=dX[c];y+=dY[c];z=output.getValue(y,x);if (z != -999) {flag=true;}} else {flag=true;}output.setValue(y,x,outletID);} while (!flag);} else if (pntr.getValue(row,col) == noData) {output.setValue(row,col,noData);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress("Loop 2 of 2:",(int)progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());pntr.close();outlet.close();output.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataindexsizeerrsubstringnegativeoffset.class,args);}  }
class C{  public JRadioButtonMenuItem createJRadioButtonMenuItem(String name) throws MissingResourceException, ResourceFormatException, MissingListenerException {  return createJRadioButtonMenuItem(name,null);}  }
class C{  public boolean isSetCursorId(){  return EncodingUtils.testBit(__isset_bitfield,__CURSORID_ISSET_ID);}  }
class C{  public final char[] buffer(){  return _buffer;}  }
class C{  public static void write(char x){  if (x < 0 || x >= 256)   throw new IllegalArgumentException("Illegal 8-bit char = " + x);  writeByte(x);}  }
class C{  public String toString(){  return getClass().getName();}  }
class C{  public boolean hasTime(){  return hours != null || minutes != null || seconds != null;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaNode node=getMediaNode(stack);  if (node != null) {    String rv="";    while (node != null) {      String currType;      if (MediaNode.DATATYPE_VIRTUAL.equals(node.getDataType())) {        if (node instanceof BrowserMediaFileNode)         currType="F"; else {          currType=node.getPrimaryLabel();          if (currType == null)           currType="V";        }      } else       currType=node.getDataType();      rv=currType + (rv.length() == 0 ? "" : "/") + rv;      node=node.getParent();    }    return rv;  }  return "";}  }
class C{  public DbJmxClient(String host,int port) throws IOException, InterruptedException {  this.host=host;  this.port=port;  connect();}  }
class C{  public boolean forEachValue(TIntProcedure procedure){  byte[] states=_states;  int[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  protected void computeAllowedScripts(){  scripts=new LinkedList();  if (!SVGAbstractTranscoder.this.hints.containsKey(KEY_ALLOWED_SCRIPT_TYPES)) {    return;  }  String allowedScripts=(String)SVGAbstractTranscoder.this.hints.get(KEY_ALLOWED_SCRIPT_TYPES);  StringTokenizer st=new StringTokenizer(allowedScripts,",");  while (st.hasMoreTokens()) {    scripts.add(st.nextToken());  }}  }
class C{  public CallbackClosure(Object callee,String callbackName,Class[] parameterTypes,Object[] parameters){  _callee=callee;  if ((parameterTypes == null) || (parameterTypes.length == 0)) {    _parameterTypes=new Class[]{null};    _parameters=new Object[]{null};    _callbackTypePos=0;  } else {    _parameterTypes=new Class[parameterTypes.length];    _parameters=new Object[parameterTypes.length];    for (int idx=0; idx < parameterTypes.length; idx++) {      if (parameterTypes[idx] == null) {        if (_callbackTypePos >= 0) {          throw new IllegalArgumentException("The parameter types may contain null only once");        }        _callbackTypePos=idx;      } else {        _parameterTypes[idx]=parameterTypes[idx];        _parameters[idx]=parameters[idx];      }    }    if (_callbackTypePos < 0) {      throw new IllegalArgumentException("The parameter types need to a null placeholder");    }  }  Class type=callee.getClass();  do {    Method[] methods=type.getDeclaredMethods();    if (methods != null) {      for (int idx=0; idx < methods.length; idx++) {        Method method=methods[idx];        Class[] paramTypes=methods[idx].getParameterTypes();        method.setAccessible(true);        if (method.getName().equals(callbackName) && typesMatch(paramTypes)) {          if (_callbacks.get(paramTypes[_callbackTypePos]) == null) {            _callbacks.put(paramTypes[_callbackTypePos],methods[idx]);          }        }      }    }    type=type.getSuperclass();  } while ((type != null) && !type.equals(Object.class));}  }
class C{  public DefaultMapEntry(){}  }
class C{  public void testExport_gpx(){  testExport(TrackFileFormat.GPX);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override protected void applyOneRowChangePrepared(OneRowChange oneRowChange,String sourceDbmsType) throws ReplicatorException {  if (!optimizeRowEvents) {    super.applyOneRowChangePrepared(oneRowChange,sourceDbmsType);    return;  }  getColumnInformation(oneRowChange);  String stmt=null;  ArrayList<OneRowChange.ColumnSpec> key=oneRowChange.getKeySpec();  ArrayList<OneRowChange.ColumnSpec> columns=oneRowChange.getColumnSpec();  try {    ArrayList<ArrayList<OneRowChange.ColumnVal>> keyValues=oneRowChange.getKeyValues();    ArrayList<ArrayList<OneRowChange.ColumnVal>> columnValues=oneRowChange.getColumnValues();    int row=0;    for (row=0; row < columnValues.size() || row < keyValues.size(); row++) {      if (row == 0 || needNewSQLStatement(row,keyValues,key,columnValues,columns)) {        ArrayList<OneRowChange.ColumnVal> keyValuesOfThisRow=null;        if (keyValues.size() > 0)         keyValuesOfThisRow=keyValues.get(row);        ArrayList<OneRowChange.ColumnVal> colValuesOfThisRow=null;        if (columnValues.size() > 0)         colValuesOfThisRow=columnValues.get(row);        stmt=constructStatement(oneRowChange.getAction(),oneRowChange.getSchemaName(),oneRowChange.getTableName(),columns,key,keyValuesOfThisRow,colValuesOfThisRow).toString();        if (pendingSqlStatement != null) {          if (!pendingSqlStatement.equals(stmt)) {            if (logger.isDebugEnabled()) {              logger.debug("Flushing batch due to different SQL: old=[" + pendingSqlStatement + "] new=["+ stmt+ "]");            }            executePendingBatch();            prepareNewBatch(stmt);          } else           if (pendingRowChanges.size() >= maxRowBatchSize) {            if (logger.isDebugEnabled()) {              logger.debug("Flushing batch due to maximum row changes: pendingRowChanges=" + pendingRowChanges.size() + " maxRowBatchSize="+ this.maxRowBatchSize);            }            executePendingBatch();            prepareNewBatch(stmt);          } else {            if (logger.isDebugEnabled()) {              logger.debug("Appending next change to batch");            }          }        } else {          prepareNewBatch(stmt);        }      }      int bindLoc=1;      if (columnValues.size() > 0) {        bindLoc=bindColumnValues(pendingPreparedStatement,columnValues.get(row),bindLoc,columns,false,sourceDbmsType);      }      if (oneRowChange.getAction() != RowChangeData.ActionType.INSERT && keyValues.size() > 0) {        bindLoc=bindColumnValues(pendingPreparedStatement,keyValues.get(row),bindLoc,key,true,sourceDbmsType);      }      this.addToPendingBatch(oneRowChange,row);      if (logger.isDebugEnabled()) {        logger.debug("Added change to batch: action=" + oneRowChange.getAction() + " row="+ row);      }    }  } catch (  SQLException e) {    ApplierException applierException=new ApplierException("Batch update failed: statement=" + stmt,e);    throw applierException;  }}  }
class C{  protected long computeSVUID() throws IOException {  ByteArrayOutputStream bos;  DataOutputStream dos=null;  long svuid=0;  try {    bos=new ByteArrayOutputStream();    dos=new DataOutputStream(bos);    dos.writeUTF(name.replace('/','.'));    int access=this.access;    if ((access & Opcodes.ACC_INTERFACE) != 0) {      access=(svuidMethods.size() > 0) ? (access | Opcodes.ACC_ABSTRACT) : (access & ~Opcodes.ACC_ABSTRACT);    }    dos.writeInt(access & (Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL | Opcodes.ACC_INTERFACE| Opcodes.ACC_ABSTRACT));    Arrays.sort(interfaces);    for (int i=0; i < interfaces.length; i++) {      dos.writeUTF(interfaces[i].replace('/','.'));    }    writeItems(svuidFields,dos,false);    if (hasStaticInitializer) {      dos.writeUTF("<clinit>");      dos.writeInt(Opcodes.ACC_STATIC);      dos.writeUTF("()V");    }    writeItems(svuidConstructors,dos,true);    writeItems(svuidMethods,dos,true);    dos.flush();    byte[] hashBytes=computeSHAdigest(bos.toByteArray());    for (int i=Math.min(hashBytes.length,8) - 1; i >= 0; i--) {      svuid=(svuid << 8) | (hashBytes[i] & 0xFF);    }  }  finally {    if (dos != null) {      dos.close();    }  }  return svuid;}  }
class C{  protected void reset() throws XNIException {  int count=fComponents.size();  for (int i=0; i < count; i++) {    XMLComponent c=(XMLComponent)fComponents.get(i);    c.reset(this);  }}  }
class C{  public static void printConfirm(int type,int Record_ID){  StringBuffer sql=new StringBuffer();  if (type == ORDER || type == SHIPMENT || type == INVOICE)   sql.append("UPDATE ").append(DOC_BASETABLES[type]).append(" SET DatePrinted=SysDate, IsPrinted='Y' WHERE ").append(DOC_IDS[type]).append("=").append(Record_ID);  if (sql.length() > 0) {    int no=DB.executeUpdate(sql.toString(),null);    if (no != 1)     log.log(Level.SEVERE,"Updated records=" + no + " - should be just one");  }}  }
class C{  public boolean handlesKeycode(int keyCode){  int game=Display.getInstance().getGameAction(keyCode);  if (keyCode == leftSK || (keyCode == rightSK || keyCode == rightSK2) || keyCode == backSK || (keyCode == clearSK && clearCommand != null) || (keyCode == backspaceSK && clearCommand != null) || (thirdSoftButton && game == Display.GAME_FIRE)) {    return true;  }  return false;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 90) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameter(s):"));}  }
class C{  public String createListCloneStep(Workflow workflow,StorageSystem storageSystem,List<URI> cloneList,String waitFor){  URI storage=storageSystem.getId();  Workflow.Method createMethod=createListCloneMethod(storage,cloneList,false);  Workflow.Method rollbackMethod=rollbackListCloneMethod(storage,cloneList);  waitFor=workflow.createStep(BlockDeviceController.FULL_COPY_CREATE_STEP_GROUP,"Creating list clone",waitFor,storage,storageSystem.getSystemType(),getClass(),createMethod,rollbackMethod,null);  if (storageSystem.deviceIsType(Type.vnxblock)) {    waitFor=workflow.createStep(BlockDeviceController.FULL_COPY_CREATE_STEP_GROUP,"fracture list clone",waitFor,storage,storageSystem.getSystemType(),BlockDeviceController.class,fractureListCloneMethod(storage,cloneList,false),null,null);  }  return waitFor;}  }
class C{  public static String normalizeNonNegativeInteger(String value){  return normalizeIntegerValue(value,"0",null);}  }
class C{  @Restricted(NoExternalUse.class) @CheckForNull public String expandAll(Run<?,?> run,TaskListener listener) throws IOException, InterruptedException {  return expandAll(getContent(),run,listener);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean load(){  return remoteFileBrowser.load();}  }
class C{  @Override protected void onDraw(Canvas canvas){  setClickable(true);  float cx=getWidth() / 2;  float cy=getHeight() / 2;  float radius=getWidth() / 2.6f;  float left=(float)(cx - (0.5 * mBitmap.getWidth()));  float top=(getHeight() - mBitmap.getHeight()) / 2;  canvas.drawCircle(cx,cy,radius,mButtonPaint);  canvas.drawBitmap(mBitmap,left,top,mDrawablePaint);}  }
class C{  public static int listContains(String list,String value,String delimiter,boolean includeEmptyFields,boolean multiCharacterDelimiter){  if (StringUtil.isEmpty(value))   return -1;  Array arr=listToArray(list,delimiter,includeEmptyFields,multiCharacterDelimiter);  int len=arr.size();  for (int i=1; i <= len; i++) {    if (arr.get(i,"").toString().indexOf(value) != -1)     return i - 1;  }  return -1;}  }
class C{  public static <T>ArrayList<T> read(String fileName,ITransformer<String,T> transformer) throws FileNotFoundException {  return read(fileName,Charset.defaultCharset().name(),transformer);}  }
class C{  private TextSelection(){  fOffset=-1;  fLength=-1;  fDocument=null;}  }
class C{  public final void show(){  ss.show();  los.show();  immortal.show();}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  throw new InvalidObjectException("can't deserialize enum");}  }
class C{  @Override public CCIntervalAction reverse(){  assert false : ("Reverse action not implemented");  return null;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGenPackage.GENERATOR_ENTRY__ELEMENT_REF:    setElementRef((EObject)newValue);  return;case SGenPackage.GENERATOR_ENTRY__FEATURES:getFeatures().clear();getFeatures().addAll((Collection<? extends FeatureConfiguration>)newValue);return;case SGenPackage.GENERATOR_ENTRY__CONTENT_TYPE:setContentType((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private static long lowerBound(long mid,final long to,final long firstCut,final LongComparator comp){  long len=to - mid;  while (len > 0) {    long half=len / 2;    long middle=mid + half;    if (comp.compare(middle,firstCut) < 0) {      mid=middle + 1;      len-=half + 1;    } else {      len=half;    }  }  return mid;}  }
class C{  protected void encode(OutputStream out,ObjectIdentifier extensionId,boolean isCritical) throws IOException {  DerOutputStream tmp=new DerOutputStream();  if (this.extensionValue == null) {    this.extensionId=extensionId;    this.critical=isCritical;    encodeThis();  }  super.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  public void addRelation(String fieldName,PersistentResource newRelation){  checkSharePermission(Collections.singleton(newRelation));  Object relation=this.getValueUnchecked(fieldName);  if (relation instanceof Collection) {    if (addToCollection((Collection)relation,fieldName,newRelation)) {      this.markDirty();    }    addInverseRelation(fieldName,newRelation.getObject());  } else {    updateRelation(fieldName,Collections.singleton(newRelation));    return;  }}  }
class C{  @Override public void onPaymentProductGroupCallComplete(PaymentProductGroup paymentProductGroup){  cachePaymentItem(paymentProductGroup);}  }
class C{  public static String double2Str(double d,int decimalPoints){  NumberFormat nf=NumberFormat.getInstance();  nf.setGroupingUsed(true);  nf.setMinimumIntegerDigits(1);  nf.setMaximumFractionDigits(decimalPoints);  nf.setMinimumFractionDigits(decimalPoints);  return nf.format(d);}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  private String readString(){  final byte[] stream_=this.stream;  int parenLevel=0;  final StringBuffer sb=new StringBuffer();  for (int to=stream_.length; loc < to; ) {    int c=stream_[loc++];    if (c == ')') {      if (parenLevel-- == 0) {        break;      }    } else     if (c == '(') {      parenLevel++;    } else     if (c == '\\') {      c=stream_[loc++];      if (c >= '0' && c < '8') {        int val=0;        for (int count=0; c >= '0' && c < '8' && count < 3; ++count) {          val=(val << 3) + c - '0';          c=stream_[loc++];        }        loc--;        c=val;      } else       if (c == 'n') {        c='\n';      } else       if (c == 'r') {        c='\r';      } else       if (c == 't') {        c='\t';      } else       if (c == 'b') {        c='\b';      } else       if (c == 'f') {        c='\f';      }    }    sb.append((char)c);  }  return sb.toString();}  }
class C{  public static void checkArgument(boolean expression,Object errorMessage){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && !expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  public MyMap(String mapName,String size,String mapUrl){  init();  this.mapName=mapName;  this.size=size;  initStatus();  setUrl(mapUrl + mapName + ".ghz");  generateContinentName(mapName);}  }
class C{  public int lengthX509Data(){  if (x509Datas != null) {    return x509Datas.size();  }  return this.length(Constants.SignatureSpecNS,Constants._TAG_X509DATA);}  }
class C{  public GmlLowerCorner(Double lat,Double lon){  super(Namespaces.GML_NAMESPACE,NAME,lat,lon);}  }
class C{  public Boolean isHome(){  return home;}  }
class C{  public ClassicFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public <T>T findUnique(@NotNull Class<T> cl,@NotNull @SQL String sql,Object... args){  return findUnique(cl,SqlQuery.query(sql,args));}  }
class C{  public ManualProxySelector(ProxyAddress httpProxyAddress,ProxyAddress httpsProxyAddress,ProxyAddress ftpProxyAddress,ProxyAddress socksProxyAddress){  this.httpProxyAddress=httpProxyAddress;  this.httpsProxyAddress=httpsProxyAddress;  this.ftpProxyAddress=ftpProxyAddress;  this.socksProxyAddress=socksProxyAddress;}  }
class C{  static String[] decodeRecoveryPasswordLink(String recoveryPasswordLink){  if (recoveryPasswordLink == null || recoveryPasswordLink.length() == 0) {    return null;  }  try {    recoveryPasswordLink=URLDecoder.decode(recoveryPasswordLink,"UTF-8");  } catch (  UnsupportedEncodingException e) {    return null;  }  if (recoveryPasswordLink.endsWith(tailString)) {    recoveryPasswordLink=recoveryPasswordLink.substring(0,recoveryPasswordLink.indexOf(tailString));  }  return ParameterEncoder.decodeParameters(recoveryPasswordLink);}  }
class C{  public void paint(Graphics g){  FontMetrics fm=getFontMetrics(DisplayNodeUtils.getFont());  Dimension size=getPreferredSize();  int stringWidth=fm.stringWidth(getName());  int stringX=(size.width - stringWidth) / 2;  int stringY=fm.getAscent() + (size.height - fm.getHeight()) / 2;  g.setColor(DisplayNodeUtils.getNodeTextColor());  g.drawString(getName(),stringX,stringY);}  }
class C{  public void mark(){  isMarked=true;}  }
class C{  public void accept(final MethodVisitor mv,boolean visible){  Label[] start=new Label[this.start.size()];  Label[] end=new Label[this.end.size()];  int[] index=new int[this.index.size()];  for (int i=0; i < start.length; ++i) {    start[i]=this.start.get(i).getLabel();    end[i]=this.end.get(i).getLabel();    index[i]=this.index.get(i);  }  accept(mv.visitLocalVariableAnnotation(typeRef,typePath,start,end,index,desc,true));}  }
class C{  public void testFloatMissingLast() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(new FloatPoint("value",-1.3f));  doc.add(new StoredField("value",-1.3f));  writer.addDocument(doc);  doc=new Document();  doc.add(new FloatPoint("value",4.2f));  doc.add(new StoredField("value",4.2f));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.FLOAT_POINT));  writer.close();  IndexSearcher searcher=newSearcher(ir,false);  SortField sortField=new SortField("value",SortField.Type.FLOAT);  sortField.setMissingValue(Float.MAX_VALUE);  Sort sort=new Sort(sortField);  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1.3",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4.2",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  @Override public Typeface resolveFont(String fontFamily,int fontWeight,String fontStyle){  Log.i(TAG,"resolveFont(" + fontFamily + ","+ fontWeight+ ","+ fontStyle+ ")");  try {    return Typeface.createFromAsset(assetManager,fontFamily + ".ttf");  } catch (  Exception e) {  }  try {    return Typeface.createFromAsset(assetManager,fontFamily + ".otf");  } catch (  Exception e) {    return null;  }}  }
class C{  public BitmapAjaxCallback imageView(ImageView view){  v=new WeakReference<ImageView>(view);  return this;}  }
class C{  public void initBenchmarks(){  if (compileTimes == null) {    compileTimes=new PerformanceData[POSTPROCESS + 1];  }  for (int j=0; j <= POSTPROCESS; j++) {    if (compileTimes[j] == null) {      compileTimes[j]=new PerformanceData();    } else {      compileTimes[j].invocationCount=0;      compileTimes[j].totalTime=0;    }  }}  }
class C{  public void write(int b) throws IOException {  out.write(b);}  }
class C{  public void writeToParcel(Parcel dest,int flags){  if (mHost != null) {    dest.writeByte((byte)1);    dest.writeString(mHost);    dest.writeInt(mPort);  } else {    dest.writeByte((byte)0);  }  dest.writeString(mExclusionList);  dest.writeStringArray(mParsedExclusionList);}  }
class C{  private static boolean isCompressedOops(){  if (IS_64BIT) {    RuntimeMXBean runtimeMXBean=ManagementFactory.getRuntimeMXBean();    if (null != runtimeMXBean) {      List<String> arguments=runtimeMXBean.getInputArguments();      for (      String argument : arguments) {        if ((argument.indexOf("+UseCompressedOops") != -1) || (argument.indexOf("compressedrefs") != -1)) {          return true;        } else         if (argument.indexOf("-UseCompressedOops") != -1) {          return false;        }      }    }switch (getJvmProvider()) {case SUN:case ORACLE:      if (getJavaVersion() == JavaVersion.JAVA_1_7) {        long max=Runtime.getRuntime().maxMemory();        return (max == Long.MAX_VALUE) || (max < MAX_COMPRESSED_OOPS_JAVA7_MEMORY);      } else       if (getJavaVersion() == JavaVersion.JAVA_1_6) {        try {          int subversionIndexStart=JAVA_VERSION_TRIMMED.indexOf('_');          boolean isAbove6u23=Integer.parseInt(JAVA_VERSION_TRIMMED.substring(subversionIndexStart + 1)) >= 23;          return isAbove6u23;        } catch (        NumberFormatException e) {          break;        }      }    break;default :  break;}}return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:28.986 -0500",hash_original_method="EF8E21E51839AAB1349659EC74B1B426",hash_generated_method="AC761BC7A5BAF33023980C3C9405E238") @DSSafe(DSCat.SAFE_OTHERS) public static String sha256Hex(byte[] data){  return Hex.encodeHexString(sha256(data));}  }
class C{  public Type merge(Type other,Scene cm){  if (other.equals(UnknownType.v()) || this.equals(other))   return this;  if (!(other instanceof RefType))   throw new RuntimeException("illegal type merge: " + this + " and "+ other);{    SootClass thisClass=cm.getSootClass((this).className);    SootClass otherClass=cm.getSootClass(((RefType)other).className);    SootClass javalangObject=cm.getSootClass("java.lang.Object");    LinkedList<SootClass> thisHierarchy=new LinkedList<SootClass>();    LinkedList<SootClass> otherHierarchy=new LinkedList<SootClass>();{      SootClass SootClass=thisClass;      for (; ; ) {        thisHierarchy.addFirst(SootClass);        if (SootClass == javalangObject)         break;        SootClass=SootClass.getSuperclass();      }    }{      SootClass SootClass=otherClass;      for (; ; ) {        otherHierarchy.addFirst(SootClass);        if (SootClass == javalangObject)         break;        SootClass=SootClass.getSuperclass();      }    }{      SootClass commonClass=null;      while (!otherHierarchy.isEmpty() && !thisHierarchy.isEmpty() && otherHierarchy.getFirst() == thisHierarchy.getFirst()) {        commonClass=otherHierarchy.removeFirst();        thisHierarchy.removeFirst();      }      return RefType.v(commonClass.getName());    }  }}  }
class C{  private RelDataType computeHistogramType(RelDataType type){  if (SqlTypeUtil.isExactNumeric(type) && type.getSqlTypeName() != SqlTypeName.BIGINT) {    return typeFactory.createSqlType(SqlTypeName.BIGINT);  } else   if (SqlTypeUtil.isApproximateNumeric(type) && type.getSqlTypeName() != SqlTypeName.DOUBLE) {    return typeFactory.createSqlType(SqlTypeName.DOUBLE);  } else {    return type;  }}  }
class C{  public ByteArrayList copy(){  return (ByteArrayList)clone();}  }
class C{  public void trustHosts(String... hosts){  trustAllHosts(false);  if (hosts.length > 0) {    StringBuilder builder=new StringBuilder(hosts[0]);    for (int i=1; i < hosts.length; i++) {      builder.append(",").append(hosts[i]);    }    session.getProperties().setProperty("mail.smtp.ssl.trust",builder.toString());  }}  }
class C{  public static Vector toLowerCase(List v){  Vector result=new Vector();  for (Iterator i=v.iterator(); i.hasNext(); ) {    String s=i.next().toString();    result.add(s.toLowerCase());  }  return result;}  }
class C{  public HookResult(int result){  this(result,null,null);}  }
class C{  public CloseIndexRequest indicesOptions(IndicesOptions indicesOptions){  this.indicesOptions=indicesOptions;  return this;}  }
class C{  SSLServerSocketImpl(int port,int backlog,SSLContextImpl context) throws IOException, SSLException {  super(port,backlog);  initServer(context);}  }
class C{  public void dynInit() throws Exception {  MLookup orgL=MLookupFactory.get(Env.getCtx(),form.getWindowNo(),0,2223,DisplayType.TableDir);  fWarehouse=new WTableDirEditor("M_Warehouse_ID",true,false,true,orgL);  lWarehouse.setText(Msg.translate(Env.getCtx(),"M_Warehouse_ID"));  fWarehouse.addValueChangeListener(this);  fWarehouse.setValue(Env.getContextAsInt(Env.getCtx(),"#M_Warehouse_ID"));  setM_Warehouse_ID(fWarehouse.getValue());  lDocAction.setText(Msg.translate(Env.getCtx(),"DocAction"));  MLookup docActionL=MLookupFactory.get(Env.getCtx(),form.getWindowNo(),4324,DisplayType.List,Env.getLanguage(Env.getCtx()),"DocAction",135,false,"AD_Ref_List.Value IN ('CO','PR')");  docAction=new WTableDirEditor("DocAction",true,false,true,docActionL);  docAction.setValue(DocAction.ACTION_Complete);  docAction.addValueChangeListener(this);  MLookup bpL=MLookupFactory.get(Env.getCtx(),form.getWindowNo(),0,2762,DisplayType.Search);  fBPartner=new WSearchEditor("C_BPartner_ID",false,false,true,bpL);  lBPartner.setText(Msg.translate(Env.getCtx(),"C_BPartner_ID"));  fBPartner.addValueChangeListener(this);  lDocType.setText(Msg.translate(Env.getCtx(),"C_DocType_ID"));  cmbDocType.addItem(new KeyNamePair(MOrder.Table_ID,Msg.translate(Env.getCtx(),"Order")));  cmbDocType.addItem(new KeyNamePair(MRMA.Table_ID,Msg.translate(Env.getCtx(),"VendorRMA")));  cmbDocType.addActionListener(this);  cmbDocType.setSelectedIndex(0);  form.getStatusBar().setStatusLine(Msg.getMsg(Env.getCtx(),"InOutGenerateSel"));}  }
class C{  public void dispose(){  clearAllBreakpoints();  dim.go();  debugGui.dispose();  dim=null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public SIPRequest createRequest(SipUri requestURI,Via via,CSeq cseq,From from,To to){  SIPRequest newRequest=new SIPRequest();  String method=cseq.getMethod();  newRequest.setMethod(method);  newRequest.setRequestURI(requestURI);  this.setBranch(via,method);  newRequest.setHeader(via);  newRequest.setHeader(cseq);  newRequest.setHeader(from);  newRequest.setHeader(to);  newRequest.setHeader(getCallId());  try {    newRequest.attachHeader(new MaxForwards(70),false);  } catch (  Exception d) {  }  if (MessageFactoryImpl.getDefaultUserAgentHeader() != null) {    newRequest.setHeader(MessageFactoryImpl.getDefaultUserAgentHeader());  }  return newRequest;}  }
class C{  protected void checkScriptHasTypeAndString(){  if (script == null) {    throw new MLContextException("Script is null");  } else   if (script.getScriptType() == null) {    throw new MLContextException("ScriptType (DML or PYDML) needs to be specified");  } else   if (script.getScriptString() == null) {    throw new MLContextException("Script string is null");  } else   if (StringUtils.isBlank(script.getScriptString())) {    throw new MLContextException("Script string is blank");  }}  }
class C{  public void stop() throws Exception {  Map<String,String> prevContext=MDC.getCopyOfContextMap();  MDC.clear();  try {    Filter filter=dispatchFilter.getFilter();    server.stop();    if (server.getState().equals(Server.FAILED)) {      filter.destroy();      if (extraFilters != null) {        for (        FilterHolder f : extraFilters) {          f.getFilter().destroy();        }      }    }    server.join();  }  finally {    if (prevContext != null) {      MDC.setContextMap(prevContext);    } else {      MDC.clear();    }  }}  }
class C{  public Base64OutputStream(OutputStream out,int flags){  this(out,flags,true);}  }
class C{  private static BigDecimal determineBillingAccountAmount(String billingAccountId,String billingAccountAmount,LocalDispatcher dispatcher){  BigDecimal billingAccountAmt=null;  if (UtilValidate.isNotEmpty(billingAccountId)) {    if (UtilValidate.isNotEmpty(billingAccountAmount)) {      try {        billingAccountAmt=new BigDecimal(billingAccountAmount);      } catch (      NumberFormatException e) {        return null;      }    }    if (billingAccountAmt == null) {      billingAccountAmt=BigDecimal.ZERO;    }    BigDecimal availableBalance=CheckOutHelper.availableAccountBalance(billingAccountId,dispatcher);    BigDecimal chargeAmount=BigDecimal.ZERO;    if (billingAccountAmt.compareTo(availableBalance) < 0) {      chargeAmount=billingAccountAmt;    } else {      chargeAmount=availableBalance;    }    if (chargeAmount.compareTo(BigDecimal.ZERO) < 0.0) {      chargeAmount=BigDecimal.ZERO;    }    return chargeAmount;  } else {    return null;  }}  }
class C{  @Override public void respond(String response){  getBot().sendRaw().rawLine(response);}  }
class C{  public void applyTo(Context ctx,GradientDrawable drawable){  if (mColorInt != 0) {    drawable.setColor(mColorInt);  } else   if (mColorRes != -1) {    drawable.setColor(ContextCompat.getColor(ctx,mColorRes));  }}  }
class C{  private void createJournalEntriesForChargePayments(final ClientTransactionDTO clientTransactionDTO,final Office office){  final Long clientId=clientTransactionDTO.getClientId();  final String currencyCode=clientTransactionDTO.getCurrencyCode();  final Long transactionId=clientTransactionDTO.getTransactionId();  final Date transactionDate=clientTransactionDTO.getTransactionDate();  final BigDecimal amount=clientTransactionDTO.getAmount();  final boolean isReversal=clientTransactionDTO.isReversed();  if (amount != null && !(amount.compareTo(BigDecimal.ZERO) == 0)) {    BigDecimal totalCreditedAmount=this.helper.createCreditJournalEntryOrReversalForClientPayments(office,currencyCode,clientId,transactionId,transactionDate,isReversal,clientTransactionDTO.getChargePayments());    this.helper.createDebitJournalEntryOrReversalForClientChargePayments(office,currencyCode,clientId,transactionId,transactionDate,totalCreditedAmount,isReversal);  }}  }
class C{  public static Matcher<BindingSet> binds(String name,String str,String language){  if (str == null && language == null) {    return notBinds(name);  }  if (language == null) {    return new BindsMatcher<Literal>(name,equalTo((Literal)new LiteralImpl(str)));  }  return new BindsMatcher<Literal>(name,equalTo((Literal)new LiteralImpl(str,language)));}  }
class C{  public final MutableDouble3D addIn(final Double3D other){  x=other.x + x;  y=other.y + y;  z=other.z + z;  return this;}  }
class C{  private static void showMessage(Component parent,Component toDisplay){  JOptionPane.showMessageDialog(parent,toDisplay,"Fatal Error - Review",JOptionPane.INFORMATION_MESSAGE);}  }
class C{  public String toString(){  Annotation[] a=getAnnotations();  StringBuilder sbuf=new StringBuilder();  int i=0;  while (i < a.length) {    sbuf.append(a[i++].toString());    if (i != a.length)     sbuf.append(", ");  }  return sbuf.toString();}  }
class C{  public void log(Level level,String msg,Object arg0){  innerLog(level,null,msg,arg0,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  public static boolean storeOnApplicationPrivateDir(Context context,Bitmap bitmap,String filename,Bitmap.CompressFormat format,int quality){  OutputStream out=null;  try {    out=new BufferedOutputStream(context.openFileOutput(filename,Context.MODE_PRIVATE));    return bitmap.compress(format,quality,out);  } catch (  FileNotFoundException e) {    Log.e(TAG,"no such file for saving bitmap: ",e);    return false;  } finally {    CloseableUtils.close(out);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void applyStyle(String keyword,Style style,String containingLine,int lineStartOffset){  String quoted=Pattern.quote(keyword);  Pattern p=Pattern.compile("(^|" + Parser.DELIM + ")("+ quoted+ ")("+ Parser.DELIM+ "|$)");  int matchstart=0;  Matcher m=p.matcher(containingLine.toUpperCase());  while (m.find(matchstart)) {    setCharacterAttributes(lineStartOffset + m.start(2),keyword.length(),style,true);    matchstart=m.end(2);  }}  }
class C{  public static String stringFor(int n){switch (n) {case CU_TR_FILTER_MODE_POINT:    return "CU_TR_FILTER_MODE_POINT";case CU_TR_FILTER_MODE_LINEAR:  return "CU_TR_FILTER_MODE_LINEAR";}return "INVALID CUfilter_mode: " + n;}  }
class C{  private BlockPos blockPosFromShort(short serialized){  int x=this.xPosition * 16 + (serialized & XZ_MASK);  int y=(serialized >> Y_SHIFT) & Y_SHORT_MASK;  int z=this.zPosition * 16 + ((serialized >> Z_SHORT_SHIFT) & XZ_MASK);  return new BlockPos(x,y,z);}  }
class C{  @Override public Object visit(final ASTBlankNode node,final Object data) throws VisitorException {  throw new VisitorException("Blank nodes must be replaced with variables before resolving RDF Values");}  }
class C{  public void showPanel(){  createPanel();  prefixTextField.setText(DefaultLayerName);  WindowSupport ws=getWindowSupport();  MapHandler mh=(MapHandler)getBeanContext();  Frame frame=null;  if (mh != null) {    frame=(Frame)mh.get(java.awt.Frame.class);  }  if (ws == null) {    ws=new WindowSupport(this,i18n.get(LayerAddPanel.class,"title","Add Layer"));    setWindowSupport(ws);  }  ws.displayInWindow(frame,-1,-1,-1,-1);}  }
class C{  protected String paramString(){  return super.paramString();}  }
class C{  public static void reportSubscriptionSet(){  if (log.isDebugEnabled()) {    log.debug("Duplicate Subscription has been detected",Exceptions.duplicateOnSubscribeException());  }}  }
class C{  public void paintMenuBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  @SafeVarargs final void pathModes(IgniteBiTuple<String,IgfsMode>... modes){  assert modes != null;  pathModes=new LinkedHashMap<>(modes.length,1.0f);  for (  IgniteBiTuple<String,IgfsMode> mode : modes)   pathModes.put(mode.getKey(),mode.getValue());}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public ImmutableSet<V> removeAll(Object key){  throw new UnsupportedOperationException();}  }
class C{  @SuppressWarnings("unused") @Test public void testStateCycle_EntryActionExclusion(){  MinimalTSC tsc=new MinimalTSC();  VariableDefinition v1=_createVariableDefinition("v1",TYPE_INTEGER,tsc.s_scope);  LocalReaction lr=_createEntryAction(tsc.s1);  ReactionEffect lr_eff=_createReactionEffect(lr);  AssignmentExpression assign1=_createVariableAssignment(v1,AssignmentOperator.ASSIGN,_createValue(42),lr_eff);  ExecutionFlow flow=sequencer.transform(tsc.sc);  ExecutionState s1=flow.getStates().get(0);  assertEquals(0,s1.getReactions().size());  assertNotNull(s1.getReactSequence());  assertEquals(1,s1.getReactSequence().getSteps().size());}  }
class C{  public boolean isLoaded(String name){  return solrCores.isLoaded(name);}  }
class C{  public double nextDouble(){  return nextDouble(mean,gamma,cut);}  }
class C{  public static InvalidLogin parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  InvalidLogin object=new InvalidLogin();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"InvalidLogin".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (InvalidLogin)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","Exception").equals(reader.getName())) {      object.setException(org.apache.axis2.databinding.utils.ConverterUtil.getAnyTypeObject(reader,ExtensionMapper.class));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public int double_set_old(){  String s=soot.PhaseOptions.getString(options,"double-set-old");  if (s.equalsIgnoreCase("hash"))   return double_set_old_hash;  if (s.equalsIgnoreCase("bit"))   return double_set_old_bit;  if (s.equalsIgnoreCase("hybrid"))   return double_set_old_hybrid;  if (s.equalsIgnoreCase("array"))   return double_set_old_array;  if (s.equalsIgnoreCase("heintze"))   return double_set_old_heintze;  throw new RuntimeException("Invalid value " + s + " of phase option double-set-old");}  }
class C{  public Offer prolongOffer(Offer offer){  offer.updateTimestamp();  if (getSlot(EXPIRED_OFFERS_SLOT_NAME).has(offer.getID())) {    this.getSlot(EXPIRED_OFFERS_SLOT_NAME).remove(offer.getID());    RPSlot slot=this.getSlot(OFFERS_SLOT_NAME);    slot.add(offer);  } else   if (!getSlot(OFFERS_SLOT_NAME).has(offer.getID())) {    return null;  }  this.getZone().storeToDatabase();  return offer;}  }
class C{  public String resolveTypeIfNeeded(ContentResolver resolver){  if (mComponent != null) {    return mType;  }  return resolveType(resolver);}  }
class C{  public void close(){  isClosing.countDown();}  }
class C{  public ArrayComparisonFailure(String message,AssertionError cause,int index){  this.fMessage=message;  initCause(cause);  addDimension(index);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof LabelValue)) {    return false;  }  LabelValue bean=(LabelValue)obj;  int nil=(this.getValue() == null) ? 1 : 0;  nil+=(bean.getValue() == null) ? 1 : 0;  if (nil == 2) {    return true;  } else   if (nil == 1) {    return false;  } else {    return this.getValue().equals(bean.getValue());  }}  }
class C{  public DiskRegionStats(StatisticsFactory f,String name){  this.stats=f.createAtomicStatistics(type,name);}  }
class C{  private void computeVideoUiLayout(){  String msgDebug="## computeVideoUiLayout():";  mLocalVideoLayoutConfig=new IMXCall.VideoLayoutConfiguration();  mLocalVideoLayoutConfig.mWidth=PERCENT_LOCAL_USER_VIDEO_SIZE;  mLocalVideoLayoutConfig.mHeight=PERCENT_LOCAL_USER_VIDEO_SIZE;  int screenOrientation=getResources().getConfiguration().orientation;  DisplayMetrics metrics=new DisplayMetrics();  getWindowManager().getDefaultDisplay().getMetrics(metrics);  float screenHeight=(float)(metrics.heightPixels);  float screenWidth=(float)(metrics.widthPixels);  int actionBarHeight;  TypedValue typedValue=new TypedValue();  if (getTheme().resolveAttribute(android.R.attr.actionBarSize,typedValue,true)) {    actionBarHeight=TypedValue.complexToDimensionPixelSize(typedValue.data,getResources().getDisplayMetrics());    screenHeight-=actionBarHeight;  }  View mMenuButtonsContainerView=VectorCallViewActivity.this.findViewById(R.id.hang_up_button);  ViewGroup.LayoutParams layout=mMenuButtonsContainerView.getLayoutParams();  float buttonsContainerHeight=(float)(layout.height);  float topMarginHeightNormalized;  float ratioVideoHeightNormalized;  float localVideoWidth=Math.min(screenHeight,screenWidth) * RATIO_LOCAL_USER_VIDEO_HEIGHT;  float estimatedLocalVideoHeight=((localVideoWidth) / (RATIO_LOCAL_USER_VIDEO_ASPECT));  if (Configuration.ORIENTATION_LANDSCAPE == screenOrientation) {    ratioVideoHeightNormalized=(localVideoWidth / screenHeight);  } else {    mLocalVideoLayoutConfig.mIsPortrait=true;    ratioVideoHeightNormalized=estimatedLocalVideoHeight / screenHeight;  }  Log.d(LOG_TAG,"## computeVideoUiLayout(): orientation = PORTRAIT");  mLocalVideoLayoutConfig.mX=(100 - PERCENT_LOCAL_USER_VIDEO_SIZE) / 2;  topMarginHeightNormalized=1 - ratioVideoHeightNormalized - VIDEO_TO_BUTTONS_VERTICAL_SPACE- (buttonsContainerHeight / screenHeight);  if (topMarginHeightNormalized >= 0) {    mLocalVideoLayoutConfig.mY=(int)(topMarginHeightNormalized * 100);  } else {    mLocalVideoLayoutConfig.mY=0;  }  msgDebug+=" VideoHeightRadio=" + ratioVideoHeightNormalized + " screenHeight="+ screenHeight+ " containerHeight="+ (int)buttonsContainerHeight+ " TopMarginRatio="+ mLocalVideoLayoutConfig.mY;  Log.d(LOG_TAG,msgDebug);}  }
class C{  public static <K,V>HashMap<K,V> newHashMap(int size){  return new HashMap<K,V>(size);}  }
class C{  public int indexOf(String arg){  return arguments.indexOf(arg);}  }
class C{  protected boolean signatureCheck(String package_name){  PackageManager pm=mContext.getPackageManager();  int match=pm.checkSignatures(mContext.getPackageName(),package_name);  if (LOCAL_LOGV)   Log.v(LOG_TAG,"compare signature " + mContext.getPackageName() + " and "+ package_name+ ", match="+ match);  return match == PackageManager.SIGNATURE_MATCH;}  }
class C{  public String createStub(IType topLevelType,IProgressMonitor monitor) throws JavaModelException {  Assert.isTrue(Checks.isTopLevel(topLevelType));  if (monitor == null)   monitor=new NullProgressMonitor();  fBuffer=new StringBuffer(2046);  appendTopLevelType(topLevelType,monitor);  String result=fBuffer.toString();  fBuffer=null;  return result;}  }
class C{  public static String postFixForDigits(long args){  long[] numbers=new long[]{args};  long numb=0;  for (  long number : numbers) {    numb=number;  }  return format(numb);}  }
class C{  @Override public Object[] toArray(){  return inner.toArray();}  }
class C{  public StaticSentence(Session s,ISQLBuilderStatic sentence,SerializerWrite serwrite,SerializerRead serread){  super(s);  m_sentence=sentence;  m_SerWrite=serwrite;  m_SerRead=serread;  m_Stmt=null;}  }
class C{  public void testPipelineShutdownAfterEvent() throws Exception {  TungstenProperties config=helper.createSimpleRuntime();  ReplicatorRuntime runtime=new ReplicatorRuntime(config,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  runtime.configure();  runtime.prepare();  Pipeline pipeline=runtime.getPipeline();  pipeline.start(new MockEventDispatcher());  Thread.sleep(1000);  Future<Pipeline> future=pipeline.shutdownAfterEventId("9");  Pipeline p=future.get(60,TimeUnit.SECONDS);  assertEquals("Future should return pipeline",pipeline,p);  assertTrue("Pipeline should have shut down",pipeline.isShutdown());  pipeline.shutdown(false);  pipeline.release(runtime);}  }
class C{  private void retrieveWaypoints(SearchQuery query,ArrayList<Waypoint> waypoints){  String queryLikeSelection2="%" + query.textQuery + "%";  String[] waypointSelectionArgs=new String[]{queryLikeSelection2,queryLikeSelection2,queryLikeSelection2};  Cursor cursor=null;  try {    cursor=providerUtils.getWaypointCursor(WAYPOINT_SELECTION_QUERY,waypointSelectionArgs,WAYPOINT_SELECTION_ORDER,MAX_SCORED_WAYPOINTS);    if (cursor != null) {      waypoints.ensureCapacity(cursor.getCount());      while (cursor.moveToNext()) {        Waypoint waypoint=providerUtils.createWaypoint(cursor);        if (LocationUtils.isValidLocation(waypoint.getLocation())) {          waypoints.add(waypoint);        }      }    }  }  finally {    if (cursor != null) {      cursor.close();    }  }}  }
class C{  public PerformanceData[] subtract(final CompilerBenchmarkHelper other){  PerformanceData[] ret=new PerformanceData[POSTPROCESS + 1];  try {    for (int i=PREPROCESS; i <= POSTPROCESS; ++i) {      ret[i]=new PerformanceData();      ret[i].invocationCount=this.compileTimes[i].invocationCount;      ret[i].totalTime=this.compileTimes[i].totalTime - other.compileTimes[i].totalTime;    }  } catch (  Exception e) {    System.err.println("error " + e.getMessage());  }  return ret;}  }
class C{  public static Map<String,String> parseKeyAndValueToMap(String source){  return parseKeyAndValueToMap(source,DEFAULT_KEY_AND_VALUE_SEPARATOR,DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR,true);}  }
class C{  private static void appendTimeZone(StringBuilder buff,short tz){  if (tz < 0) {    buff.append('-');    tz=(short)-tz;  } else {    buff.append('+');  }  int hours=tz / 60;  tz-=hours * 60;  int mins=tz;  StringUtils.appendZeroPadded(buff,2,hours);  if (mins != 0) {    buff.append(':');    StringUtils.appendZeroPadded(buff,2,mins);  }}  }
class C{  @Override @SuppressWarnings("unchecked") public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  super.readExternal(in);  final int capacity=in.readInt();  if (isLeaf()) {    entries=(E[])new SpatialPointLeafEntry[capacity];    for (int i=0; i < numEntries; i++) {      SpatialPointLeafEntry s=new SpatialPointLeafEntry();      s.readExternal(in);      entries[i]=(E)s;    }  } else {    entries=(E[])new SpatialDirectoryEntry[capacity];    for (int i=0; i < numEntries; i++) {      SpatialDirectoryEntry s=new SpatialDirectoryEntry();      s.readExternal(in);      entries[i]=(E)s;    }  }}  }
class C{  public Matrix4x3d sub(Matrix4x3fc subtrahend){  return sub(subtrahend,this);}  }
class C{  public Builder clearResize(){  targetWidth=0;  targetHeight=0;  centerCrop=false;  centerInside=false;  return this;}  }
class C{  public static String encodeXML(String text){  if (text == null) {    return null;  }  final StringBuilder result=new StringBuilder();  final StringCharacterIterator iterator=new StringCharacterIterator(text);  char character=iterator.current();  while (character != CharacterIterator.DONE) {    if (character == '<') {      result.append("&lt;");    } else     if (character == '>') {      result.append("&gt;");    } else     if (character == '\"') {      result.append("&quot;");    } else     if (character == '\'') {      result.append("&#039;");    } else     if (character == '&') {      result.append("&amp;");    } else {      result.append(character);    }    character=iterator.next();  }  return result.toString();}  }
class C{  public int read() throws IOException {  if (read(tmp,0,1) == -1) {    return -1;  }  return tmp[0] & 0xFF;}  }
