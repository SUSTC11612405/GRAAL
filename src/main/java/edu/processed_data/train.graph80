class C{  public PcMaxLocalRunner(Graph graph,Parameters params){  super(graph,params);  this.sourceGraph=graph;}  }
class C{  private int findPosition(@NonNull String key,@NonNull String tmpTotal,@NonNull SpannableStringBuilder ssb,@NonNull SpannableStringBuilder tmp){  String tmpTmpTotal=tmpTotal;  int position=tmpTmpTotal.indexOf(key);  if (position == -1) {    return -1;  } else {    if (checkInInlineCode(ssb,tmp.length() + position,key.length())) {      StringBuilder sb=new StringBuilder(tmpTmpTotal.substring(0,position)).append("$").append(tmpTmpTotal.substring(position + key.length(),tmpTmpTotal.length()));      return findPosition(key,sb.toString(),ssb,tmp);    } else {      return position;    }  }}  }
class C{  public boolean isExplain(){  return explain;}  }
class C{  public boolean hasAmbigPrefix(){  return (name.startsWith(ambigPrefix));}  }
class C{  private void uninstall(){  browser.setBrowserNavigationCallback(previousNavigationCallback);  browser.removeWebEventListener("scriptMessageReceived",scriptMessageListener);}  }
class C{  public boolean onError(MediaPlayer mp,int what,int extra){  Log_OC.e(TAG,"Error in audio playback, what = " + what + ", extra = "+ extra);  String message=getMessageForMediaError(this,what,extra);  Toast.makeText(getApplicationContext(),message,Toast.LENGTH_SHORT).show();  processStopRequest(true);  return true;}  }
class C{  @Override public Cursor query(Uri uri,String[] projection,String whereStatement,String[] whereStatementArgs,String sortOrder){  final SQLiteQueryBuilder queryBuilder=new SQLiteQueryBuilder();switch (sUriMatcher.match(uri)) {case WEATHER_VALUES_ITEMS:    queryBuilder.setTables(WEATHER_VALUES_TABLE_NAME);  break;case WEATHER_VALUES_ITEM:queryBuilder.setTables(WEATHER_VALUES_TABLE_NAME);whereStatement=addKeyIdCheckToWhereStatement(whereStatement,ContentUris.parseId(uri));break;case WEATHER_CONDITIONS_ITEMS:queryBuilder.setTables(WEATHER_CONDITIONS_TABLE_NAME);break;case WEATHER_CONDITIONS_ITEM:queryBuilder.setTables(WEATHER_CONDITIONS_TABLE_NAME);whereStatement=addKeyIdCheckToWhereStatement(whereStatement,ContentUris.parseId(uri));break;case ACCESS_ALL_DATA_FOR_LOCATION_ITEM:return getAllLocationsData(whereStatementArgs[0],uri);default :throw new IllegalArgumentException("Unknown URI " + uri);}final Cursor cursor=queryBuilder.query(mDatabaseHelper.getReadableDatabase(),projection,whereStatement,whereStatementArgs,null,null,sortOrder);cursor.setNotificationUri(getContext().getContentResolver(),uri);return cursor;}  }
class C{  public static ILaunchConfiguration chooseConfiguration(List<ILaunchConfiguration> configList,Shell shell){  IDebugModelPresentation labelProvider=DebugUITools.newDebugModelPresentation();  try {    ElementListSelectionDialog dialog=new ElementListSelectionDialog(shell,labelProvider);    dialog.setElements(configList.toArray());    dialog.setTitle("Choose a launch configuration:");    dialog.setMessage("More than one launch configuration is applicable; please choose one:");    dialog.setMultipleSelection(false);    int result=dialog.open();    if (result == Window.OK) {      return (ILaunchConfiguration)dialog.getFirstResult();    }    return null;  }  finally {    labelProvider.dispose();  }}  }
class C{  private static double[] computeLabels(final double start,final double end,final int approxNumLabels){  if (Math.abs(start - end) < 0.0000001f) {    return new double[]{start,start,0};  }  double s=start;  double e=end;  boolean switched=false;  if (s > e) {    switched=true;    double tmp=s;    s=e;    e=tmp;  }  double xStep=roundUp(Math.abs(s - e) / approxNumLabels);  double xStart=xStep * Math.ceil(s / xStep);  double xEnd=xStep * Math.floor(e / xStep);  if (switched) {    return new double[]{xEnd,xStart,-1.0 * xStep};  }  return new double[]{xStart,xEnd,xStep};}  }
class C{  protected void paintScrollButtonBackground(SeaGlassContext ss,Graphics g,JButton scrollButton){  Rectangle tabRect=scrollButton.getBounds();  int x=tabRect.x;  int y=tabRect.y;  int height=tabRect.height;  int width=tabRect.width;  boolean flipSegments=(orientation == ControlOrientation.HORIZONTAL && !tabPane.getComponentOrientation().isLeftToRight());  SeaGlassLookAndFeel.updateSubregion(ss,g,tabRect);  tabPane.putClientProperty("JTabbedPane.Tab.segmentPosition",((scrollButton == scrollBackwardButton) ^ flipSegments) ? "first" : "last");  int oldState=tabContext.getComponentState();  ButtonModel model=scrollButton.getModel();  int isPressed=model.isPressed() && model.isArmed() ? PRESSED : 0;  int buttonState=SeaGlassLookAndFeel.getComponentState(scrollButton) | isPressed;  tabContext.setComponentState(buttonState);  tabContext.getPainter().paintTabbedPaneTabBackground(tabContext,g,x,y,width,height,-1,tabPlacement);  tabContext.getPainter().paintTabbedPaneTabBorder(tabContext,g,x,y,width,height,-1,tabPlacement);  tabContext.setComponentState(oldState);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public static int color8888to4444(int color8888){  return ((color8888 >> 4) & 0x0000000F) | ((color8888 >> 8) & 0x000000F0) | ((color8888 >> 12) & 0x00000F00)| ((color8888 >> 16) & 0x0000F000);}  }
class C{  protected void updateMappingsFromZk(String collection) throws Exception {  List<CloudJettyRunner> cloudJettys=new ArrayList<>();  Map<String,List<CloudJettyRunner>> shardToJetty=new HashMap<>();  Map<String,CloudJettyRunner> shardToLeaderJetty=new HashMap<>();  CloudSolrClient cloudClient=this.createCloudClient(null);  try {    cloudClient.connect();    ZkStateReader zkStateReader=cloudClient.getZkStateReader();    ClusterState clusterState=zkStateReader.getClusterState();    DocCollection coll=clusterState.getCollection(collection);    for (    JettySolrRunner jetty : jettys) {      int port=jetty.getLocalPort();      if (port == -1) {        throw new RuntimeException("Cannot find the port for jetty");      }      nextJetty:       for (      Slice shard : coll.getSlices()) {        Set<Map.Entry<String,Replica>> entries=shard.getReplicasMap().entrySet();        for (        Map.Entry<String,Replica> entry : entries) {          Replica replica=entry.getValue();          if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(":" + port)) {            if (!shardToJetty.containsKey(shard.getName())) {              shardToJetty.put(shard.getName(),new ArrayList<CloudJettyRunner>());            }            boolean isLeader=shard.getLeader() == replica;            CloudJettyRunner cjr=new CloudJettyRunner(jetty,replica,collection,shard.getName(),entry.getKey());            shardToJetty.get(shard.getName()).add(cjr);            if (isLeader) {              shardToLeaderJetty.put(shard.getName(),cjr);            }            cloudJettys.add(cjr);            break nextJetty;          }        }      }    }    List<CloudJettyRunner> oldRunners=this.cloudJettys.putIfAbsent(collection,cloudJettys);    if (oldRunners != null) {      for (      CloudJettyRunner oldRunner : oldRunners) {        IOUtils.closeQuietly(oldRunner.client);      }    }    this.cloudJettys.put(collection,cloudJettys);    this.shardToJetty.put(collection,shardToJetty);    this.shardToLeaderJetty.put(collection,shardToLeaderJetty);  }  finally {    cloudClient.close();  }}  }
class C{  public XmlStats(){  super(Options.set,"Xml Stats","Print end-of-run statistics in XML format",false);}  }
class C{  private void openSimulationAction() throws ParserConfigurationException, SAXException, IOException {  JFileChooser fileBrowser=new JFileChooser();  fileBrowser.setDialogTitle(Messages.getString("dialog.open.title"));  fileBrowser.setMultiSelectionEnabled(false);  if (this.directory != null) {    fileBrowser.setCurrentDirectory(this.directory);  }  int option=fileBrowser.showOpenDialog(this);  if (option == JFileChooser.APPROVE_OPTION) {    File file=fileBrowser.getSelectedFile();    if (file.exists() && file.isFile()) {      this.directory=file.getParentFile();      this.currentFileName=file.getName();      option=JOptionPane.showConfirmDialog(this,Messages.getString("dialog.open.warning.text"),MessageFormat.format(Messages.getString("dialog.open.warning.title"),file.getName()),JOptionPane.YES_NO_CANCEL_OPTION);      if (option == JOptionPane.YES_OPTION) {        String name=Simulation.DEFAULT_SIMULATION_NAME;        Simulation simulation=XmlReader.fromXml(file);synchronized (Simulation.LOCK) {          this.simulation=simulation;          name=this.simulation.getWorld().getUserData().toString();          this.pnlSimulation.setSimulation(this.simulation);          this.pnlContacts.setContactCounter(this.simulation.getContactCounter());        }        this.clearAllSnapshots();        this.setTitle(this.getWindowTitle() + " - " + name);        this.setCompiledSimulation(false);      }    } else {      JOptionPane.showMessageDialog(this,Messages.getString("dialog.open.selection.error.text"),Messages.getString("dialog.open.selection.error.title"),JOptionPane.ERROR_MESSAGE);    }  }}  }
class C{  protected Node newNode(){  return new SVGOMRectElement();}  }
class C{  public Node(Settings preparedSettings){  this(InternalSettingsPreparer.prepareEnvironment(preparedSettings,null),Version.CURRENT,Collections.<Class<? extends Plugin>>emptyList());}  }
class C{  public boolean matchesAny(String... seq){  for (  String s : seq) {    if (matches(s))     return true;  }  return false;}  }
class C{  @NoInline public void initializeInternalLazyCompilationTrampoline(){  CodeArray source=LazyCompilationTrampoline.getInstructions();  int targetSlot=lazyMethodInvokerTrampolineIndex();  int logIPW=LOG_BYTES_IN_ADDRESS - ArchConstants.getLogInstructionWidth();  int logIPI=LOG_BYTES_IN_INT - ArchConstants.getLogInstructionWidth();  if (VM.VerifyAssertions)   VM._assert(ArchConstants.getLogInstructionWidth() <= LOG_BYTES_IN_INT);  int mask=0xFFFFFFFF >>> (((1 << logIPI) - 1) << LOG_BITS_IN_BYTE);  for (int i=0; i < lazyMethodInvokerTrampolineWords(); i++) {    Word currentWord=Word.zero();    int base=i << logIPW;    for (int j=0; j < (1 << logIPW) && (base + j) < source.length(); j++) {      Word currentEntry=Word.fromIntZeroExtend(source.get(base + j) & mask);      currentEntry=currentEntry.lsh(((VM.LittleEndian ? j : (1 << logIPW) - (j + 1)) << ArchConstants.getLogInstructionWidth()) << LOG_BITS_IN_BYTE);      currentWord=currentWord.or(currentEntry);    }    set(targetSlot + i,currentWord);  }}  }
class C{  @Override public void close() throws IOException {  running.set(false);  service.shutdown();  try {    if (!service.awaitTermination(SHUTDOWN_TIMEOUT,TimeUnit.SECONDS)) {      LOG.error("Was not able to process all remaining spans upon closing in: " + SHUTDOWN_TIMEOUT + " "+ TimeUnit.SECONDS+ ". Left Spans could be dropped.");    }  } catch (  InterruptedException e1) {    LOG.warn("Thread interrupted when terminating executor.",e1);  }}  }
class C{  public void handleEvent(Event evt){  EventTarget target=evt.getTarget();  if (target instanceof XBLOMDefinitionElement) {    if (getXblBoundElement((Node)target) == null) {      XBLOMDefinitionElement def=(XBLOMDefinitionElement)target;      if (def.getAttributeNS(null,XBL_REF_ATTRIBUTE).length() == 0) {        addDefinition(def.getElementNamespaceURI(),def.getElementLocalName(),def,null);      } else {        addDefinitionRef(def);      }    }  } else   if (target instanceof XBLOMImportElement) {    if (getXblBoundElement((Node)target) == null) {      addImport((Element)target);    }  } else {    evt=XBLEventSupport.getUltimateOriginalEvent(evt);    target=evt.getTarget();    Node parent=getXblParentNode((Node)target);    if (parent != null) {      invalidateChildNodes(parent);    }    if (target instanceof BindableElement) {      for (Node n=((Node)target).getParentNode(); n != null; n=n.getParentNode()) {        if (n instanceof BindableElement && getRecord(n).definitionElement != null) {          return;        }      }      bind((Element)target);    }  }}  }
class C{  public void zoomOut(){  if (sourceImage == null)   return;  Rectangle rect=getClientArea();  int w=rect.width, h=rect.height;  double dx=((double)w) / 2;  double dy=((double)h) / 2;  centerZoom(dx,dy,ZOOMOUT_RATE,transform);}  }
class C{  public boolean isLeftRed(){  return (left == BeaconColor.RED_BRIGHT || left == BeaconColor.RED);}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  public void removeCondition(C condition){  if (cfd.containsKey(condition)) {    cfd.put(condition,null);    cfd.remove(condition);  }}  }
class C{  public void append(final StringBuffer buffer,final String fieldName,final boolean[] array,final Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  public boolean hasStructuredPostalAddresses(){  return hasRepeatingExtension(StructuredPostalAddress.class);}  }
class C{  @SuppressWarnings("rawtypes") public SPOPredicate(final String[] relationName,final IVariableOrConstant<IV> s,final IVariableOrConstant<IV> p,final IVariableOrConstant<IV> o){  super(new IVariableOrConstant[]{s,p,o},new NV(Annotations.RELATION_NAME,relationName));}  }
class C{  private static void skipMemberValue(ByteBuffer buf){  int tag=buf.get();  skipMemberValue(tag,buf);}  }
class C{  LongBuffer modificationTimeStampBuffer(){  byteBuffer.position(PERFDATA_PROLOG_MODTIMESTAMP_OFFSET);  LongBuffer lb=byteBuffer.asLongBuffer();  lb.limit(1);  return lb;}  }
class C{  public boolean isValidOn(Date date){  return !date.before(x509Certificate.getStartDate().getDate()) && !date.after(x509Certificate.getEndDate().getDate());}  }
class C{  public <T>T createDtoFromJson(JsonElement json,Class<T> dtoInterface){  return getDtoProvider(dtoInterface).fromJson(json);}  }
class C{  public Chain branch(int opcode){  Chain result=null;  if (opcode == goto_) {    result=pendingJumps;    pendingJumps=null;  }  if (opcode != dontgoto && isAlive()) {    result=new Chain(emitJump(opcode),result,state.dup());    fixedPc=fatcode;    if (opcode == goto_)     alive=false;  }  return result;}  }
class C{  public SpanOrQuery(SpanQuery... clauses){  this.clauses=new ArrayList<>(clauses.length);  for (  SpanQuery seq : clauses) {    addClause(seq);  }}  }
class C{  private static void handleDomainConfigProperties(ConfigData configData){  int filesCount=0;  for (int i=1; i < 1000; i++) {    if (configData.getProperty("file" + Integer.toString(i) + ".suffix") != null)     filesCount=i; else     break;  }  configData.setFileReplaceParams(null,null,null,null,null,null,null);  if (filesCount > 0) {    String[] fileSuffixes=new String[filesCount];    byte[][] fileReplaceSrcs=new byte[filesCount][];    int[] fileReplaceDstSkipLens=new int[filesCount];    byte[][] fileReplaceDstPrefixes=new byte[filesCount][];    byte[][] fileReplaceDstSuffixes=new byte[filesCount][];    byte[][] fileReplaceBefores=new byte[filesCount][];    byte[][] fileReplaceAfters=new byte[filesCount][];    for (int i=0; i < filesCount; i++) {      String fileSuffix=configData.getProperty("file" + Integer.toString(i + 1) + ".suffix");      if (fileSuffix != null)       fileSuffixes[i]=fileSuffix;      String fileReplaceSrc=configData.getProperty("file" + Integer.toString(i + 1) + ".replace.src");      if (fileReplaceSrc != null) {        fileReplaceSrc=fileReplaceSrc.replace("&lt;","<");        fileReplaceSrc=fileReplaceSrc.replace("&gt;",">");        fileReplaceSrcs[i]=fileReplaceSrc.getBytes();      }      String fileReplaceDstSkip=configData.getProperty("file" + Integer.toString(i + 1) + ".replace.dst.skip");      if (fileReplaceDstSkip != null) {        try {          fileReplaceDstSkipLens[i]=Integer.parseInt(fileReplaceDstSkip);        } catch (        Exception e) {        }        ;      }      String fileReplaceDstPrefix=configData.getProperty("file" + Integer.toString(i + 1) + ".replace.dst.prefix");      if (fileReplaceDstPrefix != null) {        fileReplaceDstPrefix=fileReplaceDstPrefix.replace("&lt;","<");        fileReplaceDstPrefix=fileReplaceDstPrefix.replace("&gt;",">");        fileReplaceDstPrefixes[i]=fileReplaceDstPrefix.getBytes();      }      String fileReplaceDstSuffix=configData.getProperty("file" + Integer.toString(i + 1) + ".replace.dst.suffix");      if (fileReplaceDstSuffix != null) {        fileReplaceDstSuffix=fileReplaceDstSuffix.replace("&lt;","<");        fileReplaceDstSuffix=fileReplaceDstSuffix.replace("&gt;",">");        fileReplaceDstSuffixes[i]=fileReplaceDstSuffix.getBytes();      }      String fileReplaceBefore=configData.getProperty("file" + Integer.toString(i + 1) + ".replace.before");      if (fileReplaceBefore != null) {        fileReplaceBefore=fileReplaceBefore.replace("&lt;","<");        fileReplaceBefore=fileReplaceBefore.replace("&gt;",">");        fileReplaceBefores[i]=fileReplaceBefore.getBytes();      }      String fileReplaceAfter=configData.getProperty("file" + Integer.toString(i + 1) + ".replace.after");      if (fileReplaceAfter != null) {        fileReplaceAfter=fileReplaceAfter.replace("&lt;","<");        fileReplaceAfter=fileReplaceAfter.replace("&gt;",">");        fileReplaceAfters[i]=fileReplaceAfter.getBytes();      }    }    configData.setFileReplaceParams(fileSuffixes,fileReplaceSrcs,fileReplaceDstSkipLens,fileReplaceDstPrefixes,fileReplaceDstSuffixes,fileReplaceBefores,fileReplaceAfters);  }  String replaceSrc=configData.getProperty("replace.src");  byte[] defReplaceSrc=null;  if (replaceSrc != null) {    replaceSrc=replaceSrc.replace("&lt;","<");    replaceSrc=replaceSrc.replace("&gt;",">");    defReplaceSrc=replaceSrc.getBytes();  }  int defReplaceDstSkipLen=0;  String replaceDstSkipLen=configData.getProperty("replace.dst.skip");  if (replaceDstSkipLen != null) {    try {      defReplaceDstSkipLen=Integer.parseInt(replaceDstSkipLen);    } catch (    Exception e) {    }  }  String replaceDstPrefix=configData.getProperty("replace.dst.prefix");  byte[] defReplaceDstPrefix=null;  if (replaceDstPrefix != null) {    replaceDstPrefix=replaceDstPrefix.replace("&lt;","<");    replaceDstPrefix=replaceDstPrefix.replace("&gt;",">");    defReplaceDstPrefix=replaceDstPrefix.getBytes();  }  String replaceDstSuffix=configData.getProperty("replace.dst.suffix");  byte[] defReplaceDstSuffix=null;  if (replaceDstSuffix != null) {    replaceDstSuffix=replaceDstSuffix.replace("&lt;","<");    replaceDstSuffix=replaceDstSuffix.replace("&gt;",">");    defReplaceDstSuffix=replaceDstSuffix.getBytes();  }  String replaceBefore=configData.getProperty("replace.before");  byte[] defReplaceBefore=null;  if (replaceBefore != null) {    replaceBefore=replaceBefore.replace("&lt;","<");    replaceBefore=replaceBefore.replace("&gt;",">");    defReplaceBefore=replaceBefore.getBytes();  }  String replaceAfter=configData.getProperty("replace.after");  byte[] defReplaceAfter=null;  if (replaceAfter != null) {    replaceAfter=replaceAfter.replace("&lt;","<");    replaceAfter=replaceAfter.replace("&gt;",">");    defReplaceAfter=replaceAfter.getBytes();  }  boolean defIsReplacing=defReplaceSrc != null;  configData.setDefaultReplaceParams(defIsReplacing,defReplaceSrc,defReplaceDstSkipLen,defReplaceDstPrefix,defReplaceDstSuffix,defReplaceBefore,defReplaceAfter);  String isMobileHome=configData.getProperty("mobile.home");  configData.isMobileHome="true".equalsIgnoreCase(isMobileHome);  configData.jpegMin=(-1);  String jpegMin=configData.getProperty("jpeg.min");  if (jpegMin != null) {    try {      configData.jpegMin=Integer.parseInt(jpegMin) * 1024;      String jpegQuality=configData.getProperty("jpeg.quality");      if (jpegQuality == null) {        configData.jpegMin=(-1);        System.out.println("Missing property: jpeg.quality");      } else {        try {          configData.jpegQuality=Float.parseFloat(jpegQuality);          if (configData.jpegQuality < 0.0f || configData.jpegQuality > 1.0f) {            configData.jpegMin=(-1);            System.out.println("Illegal property: jpeg.quality " + jpegQuality);          }        } catch (        NumberFormatException exc) {          configData.jpegMin=(-1);          System.out.println("Illegal property: jpeg.quality " + jpegQuality);        }      }    } catch (    NumberFormatException exc) {      configData.jpegMin=(-1);      System.out.println("Illegal property: jpeg.min " + jpegMin);    }  }  String hostMap=configData.getProperty("hosts.map");  if (hostMap == null) {    configData.hostsMap=null;  } else {    String[] hostList=hostMap.split(",");    if (hostList.length % 2 != 0) {      System.out.println("Illegal property: hosts.map " + hostMap);    } else {      configData.hostsMap=new HashMap<String,String>();      for (int i=0; i < hostList.length; i+=2) {        configData.hostsMap.put(hostList[i],hostList[i + 1]);      }    }  }  String minHuge=configData.getProperty("min.huge");  int minHugeBuffer=64 * 1024;  if (minHuge != null) {    try {      minHugeBuffer=Integer.parseInt(minHuge);    } catch (    NumberFormatException e) {      System.out.println("Illegal property: min.huge " + minHuge);    }  }  configData.minHugeBuffer=minHugeBuffer;  String minLarge=configData.getProperty("min.large");  int minLargeBuffer=32 * 1024;  if (minLarge != null) {    try {      minLargeBuffer=Integer.parseInt(minLarge);    } catch (    NumberFormatException e) {      System.out.println("Illegal property: min.large " + minLarge);    }  }  configData.minLargeBuffer=minLargeBuffer;  String minMedium=configData.getProperty("min.medium");  int minMediumBuffer=8 * 1024;  if (minMedium != null) {    try {      minMediumBuffer=Integer.parseInt(minMedium);    } catch (    NumberFormatException e) {      System.out.println("Illegal property: min.medium " + minMedium);    }  }  configData.minMediumBuffer=minMediumBuffer;  String minSmall=configData.getProperty("min.small");  int minSmallBuffer=200;  if (minSmall != null) {    try {      minSmallBuffer=Integer.parseInt(minSmall);    } catch (    NumberFormatException e) {      System.out.println("Illegal property: min.small " + minSmall);    }  }  configData.minSmallBuffer=minSmallBuffer;  String isDebug=configData.getProperty("debug");  configData.isDebug="true".equalsIgnoreCase(isDebug);  String isSetCookieStatefull=configData.getProperty("set.cookie.statefull");  configData.isSetCookieStatefull=!"false".equalsIgnoreCase(isSetCookieStatefull);  configData.clearCdns();  for (int cdnInd=1; cdnInd < 1000; cdnInd++) {    String cdnRule=configData.getProperty("cdn-" + Integer.toString(cdnInd));    if (cdnRule == null)     break;    try {      String[] ruleParts=cdnRule.split(",");      if (ruleParts.length != 4 && ruleParts.length != 5) {        System.out.println("Illegal propertyl: cdn-" + cdnInd + " "+ cdnRule);        continue;      }      String srcHost=ruleParts[0];      int minSize=Integer.parseInt(ruleParts[1]) * 1024;      int maxSize=Integer.parseInt(ruleParts[2]) * 1024;      String cdnHost=ruleParts[3];      String cdnSslHost=ruleParts[3];      if (ruleParts.length == 5)       cdnSslHost=ruleParts[4];      configData.addCdn(srcHost,minSize,maxSize,cdnHost,cdnSslHost);    } catch (    NumberFormatException e) {      System.out.println("Illegal propertyl: cdn-" + cdnInd + " "+ cdnRule);    }  }  String removeFromHtml=configData.getProperty("remove.from.html");  if (removeFromHtml != null)   configData.removeFromHtml=removeFromHtml.getBytes(); else   configData.removeFromHtml=null;  String removeFromCss=configData.getProperty("remove.from.css");  if (removeFromCss != null)   configData.removeFromCss=removeFromCss.getBytes(); else   configData.removeFromCss=null;  String sslLocalhost=configData.getProperty("ssl.localhost");  configData.isSslLocalhost=!"false".equalsIgnoreCase(sslLocalhost);  String fixedMaxAge=configData.getProperty("fixed.maxage");  configData.isFixedMaxAge="true".equalsIgnoreCase(fixedMaxAge);  String minMaxAge=configData.getProperty("min.maxage");  configData.minStateLessMaxAge=7 * 60;  if (minMaxAge != null) {    try {      configData.minStateLessMaxAge=Long.parseLong(minMaxAge);    } catch (    NumberFormatException e) {      System.out.println("Illegal property: min.maxage " + minMaxAge);    }  }  String maxMaxAge=configData.getProperty("max.maxage");  configData.maxServerSideMaxAge=0;  if (maxMaxAge != null) {    try {      configData.maxServerSideMaxAge=Long.parseLong(maxMaxAge);    } catch (    NumberFormatException e) {      System.out.println("Illegal property: max.maxage " + maxMaxAge);    }  }  String variants=configData.getProperty("variants");  configData.minStateLessVariant=0;  configData.maxStateLessVariant=4;  configData.minStateFullVariant=0;  configData.maxStateFullVariant=4;  if (variants != null) {    try {      String[] offsets=variants.split(",");      if (offsets.length == 2) {        int minStateLess=Integer.parseInt(offsets[0]);        int maxStateLess=Integer.parseInt(offsets[1]);        configData.minStateLessVariant=minStateLess;        configData.maxStateLessVariant=maxStateLess;      }      if (offsets.length == 4) {        int minStateLess=Integer.parseInt(offsets[0]);        int maxStateLess=Integer.parseInt(offsets[1]);        int minStateFull=Integer.parseInt(offsets[2]);        int maxStateFull=Integer.parseInt(offsets[3]);        configData.minStateLessVariant=minStateLess;        configData.maxStateLessVariant=maxStateLess;        configData.minStateFullVariant=minStateFull;        configData.maxStateFullVariant=maxStateFull;      }    } catch (    NumberFormatException e) {      System.out.println("Illegal property: variants " + variants);    }  }  String isVersioning=configData.getProperty("versioning");  configData.isVersioning="true".equalsIgnoreCase(isVersioning);  String isBaseTargetParent=configData.getProperty("base.target.parent");  configData.isBaseTargetParent=!"false".equalsIgnoreCase(isBaseTargetParent);  configData.queryEncoding=configData.getProperty("query.encoding");  if (configData.queryEncoding == null)   configData.queryEncoding="ISO-8859-1";  String ieMinContentFirst=configData.getProperty("ie.min.content.first");  if (ieMinContentFirst != null) {    try {      configData.ieMinContentFirst=Integer.parseInt(ieMinContentFirst);    } catch (    NumberFormatException e) {      configData.ieMinContentFirst=ConfigData.IE_MIN_CONTENT_FIRST_DEFAULT;      System.out.println("Illegal property: ie.min.content.first " + ieMinContentFirst);    }  } else {    configData.ieMinContentFirst=ConfigData.IE_MIN_CONTENT_FIRST_DEFAULT;  }  if (isGaliel) {    configData.maxCacheTotalSize=1024 * 1024 * 50;    String maxCacheMega=configData.getProperty("max.cache.mega");    if (maxCacheMega != null) {      try {        configData.maxCacheTotalSize=1024 * 1024 * Integer.parseInt(maxCacheMega);      } catch (      NumberFormatException e) {        System.out.println("Illegal property: max.cache.mega " + ieMinContentFirst);      }    }    configData.lowerCacheTotalSize=configData.maxCacheTotalSize * 75 / 100;  } else {  }}  }
class C{  @Override public Savepoint connection_setSavepoint(FilterChain chain,ConnectionProxy connection) throws SQLException {  Savepoint savepoint=chain.connection_setSavepoint(connection);  return savepoint;}  }
class C{  public static <T>void sort(T[] data,Comparator<T> comp){  new InPlaceStableQuicksort<T>().sortArray(data,comp);}  }
class C{  public StandardAnalyzer(CharArraySet stopWords){  super(stopWords);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StandardXYToolTipGenerator)) {    return false;  }  return super.equals(obj);}  }
class C{  private void removeVariableReferences(ASTRewrite rewrite,SimpleName reference){  ASTNode parent=reference.getParent();  while (parent instanceof QualifiedName) {    parent=parent.getParent();  }  if (parent instanceof FieldAccess) {    parent=parent.getParent();  }  int nameParentType=parent.getNodeType();  if (nameParentType == ASTNode.ASSIGNMENT) {    Assignment assignment=(Assignment)parent;    Expression rightHand=assignment.getRightHandSide();    ASTNode assignParent=assignment.getParent();    if (assignParent.getNodeType() == ASTNode.EXPRESSION_STATEMENT && rightHand.getNodeType() != ASTNode.ASSIGNMENT) {      removeVariableWithInitializer(rewrite,rightHand,assignParent);    } else {      rewrite.replace(assignment,rewrite.createCopyTarget(rightHand),null);    }  } else   if (nameParentType == ASTNode.SINGLE_VARIABLE_DECLARATION) {    rewrite.remove(parent,null);  } else   if (nameParentType == ASTNode.VARIABLE_DECLARATION_FRAGMENT) {    VariableDeclarationFragment frag=(VariableDeclarationFragment)parent;    ASTNode varDecl=frag.getParent();    List<VariableDeclarationFragment> fragments;    if (varDecl instanceof VariableDeclarationExpression) {      fragments=((VariableDeclarationExpression)varDecl).fragments();    } else     if (varDecl instanceof FieldDeclaration) {      fragments=((FieldDeclaration)varDecl).fragments();    } else {      fragments=((VariableDeclarationStatement)varDecl).fragments();    }    if (fragments.size() == 1) {      rewrite.remove(varDecl,null);    } else {      rewrite.remove(frag,null);    }  }}  }
class C{  public int hashCode(){  int hash=super.hashCode();  hash=hash + (this.getName() == null ? 0 : this.getName().hashCode());  hash=hash + (this.getClassName() == null ? 0 : this.getClassName().hashCode());  return hash;}  }
class C{  public Matrix(double[][] a){  components=a;}  }
class C{  public static void preparePlugin(ReplicatorPlugin plugin,PluginContext context) throws ReplicatorException {  String pluginClassName=plugin.getClass().getName();  try {    plugin.prepare(context);  } catch (  ReplicatorException e) {    throw new ReplicatorException("Unable to prepare plugin: class name=" + pluginClassName + " message=["+ e.getMessage()+ "]",e);  }catch (  Throwable t) {    String message="Unable to prepare plugin: class name=" + pluginClassName + " message=["+ t.getMessage()+ "]";    logger.error(message,t);    throw new ReplicatorException(message,t);  }  if (logger.isDebugEnabled())   logger.debug("Plug-in prepared successfully: class name=" + pluginClassName);}  }
class C{  private void init(PathImpl path){  _contentLength=-1;  _isChunked=false;  _isRequestDone=false;  _didGet=false;  _isPost=false;  _isHead=false;  _method=null;  _attributes.clear();  if (path instanceof HttpPath)   _virtualHost=((HttpPath)path).getVirtualHost();}  }
class C{  public RawData(byte[] data,InetSocketAddress address,boolean multicast){  this(data,address,null,multicast);}  }
class C{  public boolean isFileOpenOnObb(){  return mFileOpenOnObb;}  }
class C{  public void error(Throwable t,String s,Object... params){  if (isEnabled(TraceSystem.ERROR)) {    s=MessageFormat.format(s,params);    traceWriter.write(TraceSystem.ERROR,module,s,t);  }}  }
class C{  @Override public boolean dpll(Set<Clause> clauses,List<PropositionSymbol> symbols,Model model){  boolean allTrue=true;  Set<Clause> unknownClauses=new LinkedHashSet<Clause>();  for (  Clause c : clauses) {    Boolean value=model.determineValue(c);    if (!Boolean.TRUE.equals(value)) {      allTrue=false;      if (Boolean.FALSE.equals(value)) {        return false;      }      unknownClauses.add(c);    }  }  if (allTrue) {    return true;  }  clauses=unknownClauses;  Pair<PropositionSymbol,Boolean> pAndValue=findPureSymbol(symbols,clauses,model);  if (pAndValue != null) {    return dpll(clauses,minus(symbols,pAndValue.getFirst()),model.unionInPlace(pAndValue.getFirst(),pAndValue.getSecond()));  }  pAndValue=findUnitClause(clauses,model);  if (pAndValue != null) {    return dpll(clauses,minus(symbols,pAndValue.getFirst()),model.unionInPlace(pAndValue.getFirst(),pAndValue.getSecond()));  }  PropositionSymbol p=Util.first(symbols);  List<PropositionSymbol> rest=Util.rest(symbols);  return callDPLL(clauses,rest,model,p,true) || callDPLL(clauses,rest,model,p,false);}  }
class C{  @Override public void onDirectoryCancel(int queryTypeId){  mDirPicker=null;}  }
class C{  public void endMethod(){  if ((access & Opcodes.ACC_ABSTRACT) == 0) {    mv.visitMaxs(0,0);  }  mv.visitEnd();}  }
class C{  public static void json(String json){  json(TAG,json);}  }
class C{  protected void paint(SynthContext context,Graphics g){  super.paint(g,getComponent());}  }
class C{  public boolean isVmDirectPathGen2Supported(){  return vmDirectPathGen2Supported;}  }
class C{  boolean matchMode(QName m1){  return matchModes(m1,m_template.getMode());}  }
class C{  @Override public void buildAclEntries(PrincipalImpl owner,AclImpl acl){}  }
class C{  public boolean logout() throws LoginException {  if (subject.isReadOnly()) {    throw new LoginException("logout Failed: Subject is Readonly");  }  subject.getPrincipals().remove(userPrincipal);  subject.getPrincipals().remove(UIDPrincipal);  subject.getPrincipals().remove(GIDPrincipal);  for (int i=0; i < supplementaryGroups.size(); i++) {    subject.getPrincipals().remove(supplementaryGroups.get(i));  }  ss=null;  succeeded=false;  commitSucceeded=false;  userPrincipal=null;  UIDPrincipal=null;  GIDPrincipal=null;  supplementaryGroups=new LinkedList<UnixNumericGroupPrincipal>();  if (debug) {    System.out.println("\t\t[UnixLoginModule]: " + "logged out Subject");  }  return true;}  }
class C{  private void drawArc(SVGPath path,double[] cent,double[] pre,double[] nex,double[] oPrev,double[] oNext,double scale){  final double[] rPrev=minus(pre,cent);  final double[] rNext=minus(nex,cent);  final double[] rPrNe=minus(pre,nex);  final double[] sPrev=plusTimes(cent,rPrev,scale);  final double[] sNext=plusTimes(cent,rNext,scale);  final double zp=rPrNe[0] * oNext[1] - rPrNe[1] * oNext[0];  final double zn=rPrNe[0] * oPrev[1] - rPrNe[1] * oPrev[0];  final double n=oPrev[1] * oNext[0] - oPrev[0] * oNext[1];  if (n == 0) {    LoggingUtil.warning("Parallel?!?");    path.drawTo(sNext[0],sNext[1]);    return;  }  final double tp=Math.abs(zp / n);  final double tn=Math.abs(zn / n);  final double[] gPrev=plusTimes(sPrev,oPrev,KAPPA * scale * tp);  final double[] gNext=minusTimes(sNext,oNext,KAPPA * scale * tn);  if (!path.isStarted()) {    path.moveTo(sPrev);  }  path.cubicTo(gPrev,gNext,sNext);}  }
class C{  private String quoteWrap(String text){  return "\\\"" + text + "\\\"";}  }
class C{  public NestableRuntimeException(Throwable cause){  super();  this.cause=cause;}  }
class C{  public int distance(Arc<Value> arc){  return this.getShortestPath(arc.getTail().getNumber(),arc.getHead().getNumber());}  }
class C{  public static MoviesFragment newInstance(){  final MoviesFragment fragment=new MoviesFragment();  final Bundle args=new Bundle();  fragment.setArguments(args);  return fragment;}  }
class C{  public SimulationGraphEditor(List<Graph> graphs,int tabPlacement){  this.tabbedPane=new JTabbedPane(tabPlacement);  this.graphs=graphs;  setLayout(new BorderLayout());  reset();}  }
class C{  public TSPProblem(TSPInstance instance){  super(1,1);  this.instance=instance;  heuristic=new TSP2OptHeuristic(instance);}  }
class C{  private static boolean isNewComment(IDocument document,int commandOffset,String partitioning){  try {    int lineIndex=document.getLineOfOffset(commandOffset) + 1;    if (lineIndex >= document.getNumberOfLines()) {      return true;    }    IRegion line=document.getLineInformation(lineIndex);    ITypedRegion partition=TextUtilities.getPartition(document,partitioning,commandOffset,false);    int partitionEnd=partition.getOffset() + partition.getLength();    if (line.getOffset() >= partitionEnd) {      return false;    }    if (document.getLength() == partitionEnd) {      return true;    }    String comment=document.get(partition.getOffset(),partition.getLength());    if (comment.indexOf("/*",2) != -1) {      return true;    }    return false;  } catch (  BadLocationException e) {    return false;  }}  }
class C{  public boolean isEmpty(){  return head == tail;}  }
class C{  public byte[] engineCanonicalizeSubTree(Node rootNode,String inclusiveNamespaces) throws CanonicalizationException {  throw new CanonicalizationException("c14n.Canonicalizer.UnsupportedOperation");}  }
class C{  protected boolean attemptCommit(){  pretendCommit();  if (isValid()) {    fDocumentUndoManager.commit();    return true;  }  return false;}  }
class C{  @Override public void memberDeparted(final InternalDistributedMember id,final boolean crashed){  if (removeMember(id,true)) {synchronized (this) {      if (this.departedMembers == null) {        this.departedMembers=new HashSet();      }      this.departedMembers.add(id);    }  }  checkIfDone();}  }
class C{  public double noise(double x,double y,double frequency,double amplitude,boolean normalized){  return this.noise(x,y,0,frequency,amplitude,normalized);}  }
class C{  public void enableHelpKey(String helpTopic){  JTextArea consoleArea=GlobalValues.gLabMainFrame.jLabConsole;  if (theHB != null)   theHB.enableHelpKey(consoleArea,helpTopic,theHS,"javax.help.SecondaryWindow",null);}  }
class C{  public NamedList<Integer> toNamedList(IndexSchema schema){  List<TermInfo> aslist=new LinkedList<>();  while (size() > 0) {    aslist.add(0,(TermInfo)pop());  }  NamedList<Integer> list=new NamedList<>();  for (  TermInfo i : aslist) {    String txt=i.term.text();    SchemaField ft=schema.getFieldOrNull(i.term.field());    if (ft != null) {      txt=ft.getType().indexedToReadable(txt);    }    list.add(txt,i.docFreq);  }  return list;}  }
class C{  public static DataType newInstance(String value){  final DataType returnInstance=new DataType();  returnInstance.setValue(value);  return returnInstance;}  }
class C{  private void ensureLegacyParsed(){  if ((legacyChanged == false) || (legacyStrings == null)) {    return;  }  serviceSet=null;  if (legacyMap == null) {    legacyMap=new LinkedHashMap<ServiceKey,Service>();  } else {    legacyMap.clear();  }  for (  Map.Entry<String,String> entry : legacyStrings.entrySet()) {    parseLegacyPut(entry.getKey(),entry.getValue());  }  removeInvalidServices(legacyMap);  legacyChanged=false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public int subtreeDepth() throws UnsupportedOperationException {  String subtree=name;  int i=1;  int atNdx=subtree.lastIndexOf('@');  if (atNdx >= 0) {    i++;    subtree=subtree.substring(atNdx + 1);  }  for (; subtree.lastIndexOf('.') >= 0; i++) {    subtree=subtree.substring(0,subtree.lastIndexOf('.'));  }  return i;}  }
class C{  public static String decodeString(String s){  int backSlashIdx=s.indexOf('\\');  if (backSlashIdx == -1) {    return s;  }  int startIdx=0;  int sLength=s.length();  StringBuilder sb=new StringBuilder(sLength);  while (backSlashIdx != -1) {    sb.append(s.substring(startIdx,backSlashIdx));    if (backSlashIdx + 1 >= sLength) {      throw new IllegalArgumentException("Unescaped backslash in: " + s);    }    char c=s.charAt(backSlashIdx + 1);    if (c == 't') {      sb.append('\t');      startIdx=backSlashIdx + 2;    } else     if (c == 'n') {      sb.append('\n');      startIdx=backSlashIdx + 2;    } else     if (c == 'r') {      sb.append('\r');      startIdx=backSlashIdx + 2;    } else     if (c == 'b') {      sb.append('\b');      startIdx=backSlashIdx + 2;    } else     if (c == 'f') {      sb.append('\f');      startIdx=backSlashIdx + 2;    } else     if (c == '"') {      sb.append('"');      startIdx=backSlashIdx + 2;    } else     if (c == '\'') {      sb.append('\'');      startIdx=backSlashIdx + 2;    } else     if (c == '\\') {      sb.append('\\');      startIdx=backSlashIdx + 2;    } else {      throw new IllegalArgumentException("Unescaped backslash in: " + s);    }    backSlashIdx=s.indexOf('\\',startIdx);  }  sb.append(s.substring(startIdx));  return sb.toString();}  }
class C{  public void clear(){  setURL(m_DbUtils.getDatabaseURL());  setUser(m_DbUtils.getUsername());  setPassword(m_DbUtils.getPassword());}  }
class C{  public TodolistObject(){  super();}  }
class C{  private String principalComponentsSummary(){  StringBuffer result=new StringBuffer();  double cumulative=0.0;  Instances output=null;  int numVectors=0;  try {    output=setOutputFormat();    numVectors=(output.classIndex() < 0) ? output.numAttributes() : output.numAttributes() - 1;  } catch (  Exception ex) {  }  String corrCov=(m_center) ? "Covariance " : "Correlation ";  result.append(corrCov + "matrix\n" + matrixToString(m_correlation)+ "\n\n");  result.append("eigenvalue\tproportion\tcumulative\n");  for (int i=m_numAttribs - 1; i > (m_numAttribs - numVectors - 1); i--) {    cumulative+=m_eigenvalues[m_sortedEigens[i]];    result.append(Utils.doubleToString(m_eigenvalues[m_sortedEigens[i]],9,5) + "\t" + Utils.doubleToString((m_eigenvalues[m_sortedEigens[i]] / m_sumOfEigenValues),9,5)+ "\t"+ Utils.doubleToString((cumulative / m_sumOfEigenValues),9,5)+ "\t"+ output.attribute(m_numAttribs - i - 1).name()+ "\n");  }  result.append("\nEigenvectors\n");  for (int j=1; j <= numVectors; j++) {    result.append(" V" + j + '\t');  }  result.append("\n");  for (int j=0; j < m_numAttribs; j++) {    for (int i=m_numAttribs - 1; i > (m_numAttribs - numVectors - 1); i--) {      result.append(Utils.doubleToString(m_eigenvectors[j][m_sortedEigens[i]],7,4) + "\t");    }    result.append(m_trainInstances.attribute(j).name() + '\n');  }  if (m_transBackToOriginal) {    result.append("\nPC space transformed back to original space.\n" + "(Note: can't evaluate attributes in the original " + "space)\n");  }  return result.toString();}  }
class C{  private boolean is(int flags){  return (m_flags & flags) != 0;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  final void addProcessToGcListLocked(ProcessRecord proc){  boolean added=false;  for (int i=mProcessesToGc.size() - 1; i >= 0; i--) {    if (mProcessesToGc.get(i).lastRequestedGc < proc.lastRequestedGc) {      added=true;      mProcessesToGc.add(i + 1,proc);      break;    }  }  if (!added) {    mProcessesToGc.add(0,proc);  }}  }
class C{  public AdvanceForFeint(String sidc){  super(sidc,2);  this.paths[1].setAttributes(this.dashedAttributes);}  }
class C{  AppletImageRef(URL url){  this.url=url;}  }
class C{  protected boolean isTracked(Message m){  return (this.reportedMessages == null || this.reportedMessages.contains(m.getId()));}  }
class C{  public void doHAStatus(HttpServletRequest req,HttpServletResponse resp) throws IOException {  if (log.isInfoEnabled()) {    log.info(WITHOUT_JINI_MSG);  }}  }
class C{  public void removeModel(Model model){  models.remove(model);}  }
class C{  public void move(int startTop,int finalTop,int milliseconds){  this.startTop=startTop;  this.finalTop=finalTop;  run(milliseconds);}  }
class C{  public void testConstrDouble(){  double a=732546982374982347892379283571094797.287346782359284756;  int aScale=0;  BigInteger bA=new BigInteger("732546982374982285073458350476230656");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  public static int maxIndex(int[] ints){  int maximum=0;  int maxIndex=0;  for (int i=0; i < ints.length; i++) {    if ((i == 0) || (ints[i] > maximum)) {      maxIndex=i;      maximum=ints[i];    }  }  return maxIndex;}  }
class C{  synchronized void notifyConnectionError(Exception e){  if (packetReader.done && packetWriter.done)   return;  packetReader.done=true;  packetWriter.done=true;  shutdown(new Presence(Presence.Type.unavailable));  for (  ConnectionListener listener : getConnectionListeners()) {    try {      listener.connectionClosedOnError(e);    } catch (    Exception e2) {      e2.printStackTrace();    }  }}  }
class C{  public static String resolveEntity(String entName){  if (entName.startsWith("#")) {    StringBuilder sb=new StringBuilder();    if (entName.charAt(1) == 'x') {      sb.append((char)Integer.parseInt(entName.substring(2),16));    } else {      sb.append((char)Integer.parseInt(entName.substring(1)));    }    return sb.toString();  } else   if (entName.equals("apos")) {    return "'";  } else   if (entName.equals("quot")) {    return "\"";  } else   if (entName.equals("gt")) {    return ">";  } else   if (entName.equals("lt")) {    return "<";  } else   if (entName.equals("amp")) {    return "&";  } else {    return entName;  }}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public void initialize(DatabaseImpl database,CodecProvider codecProvider) throws IOException {  _codecHandler=codecProvider.createHandler(this,database.getCharset());  if (!_codecHandler.canEncodePartialPage()) {    _fullPageEncodeBufferH=TempPageHolder.newHolder(TempBufferHolder.Type.SOFT);  }  if (!_codecHandler.canDecodeInline()) {    _tempDecodeBufferH=TempBufferHolder.newHolder(TempBufferHolder.Type.SOFT,true);  }  _globalUsageMap=UsageMap.read(database,PAGE_GLOBAL_USAGE_MAP,ROW_GLOBAL_USAGE_MAP,true);}  }
class C{  @EnsuresOdd("f1") void oddF1(){  f1=null;}  }
class C{  public final void testValidateLowercaseNotAllowingSpacesFails(){  char[] allowedCharacters=new char[]{'-'};  LetterValidator characterValidator=new LetterValidator("foo",Case.LOWERCASE,false,allowedCharacters);  assertFalse(characterValidator.validate("ab c-"));}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.map_in_pager_demo);  mAdapter=new MyAdapter(getSupportFragmentManager());  mPager=(ViewPager)findViewById(R.id.pager);  mPager.setAdapter(mAdapter);  mPager.requestTransparentRegion(mPager);}  }
class C{  public JavaModelStatus(int code,IJavaElement element,String string){  this(code,new IJavaElement[]{element});  this.string=string;}  }
class C{  @Override public void onChangedAdded(final RPObject object,final RPObject changes){  super.onChangedAdded(object,changes);  if (!inAdd) {    if (changes.has("text")) {      onTalk(changes.get("text"));    }    if (changes.has("outfit")) {      outfit=changes.getInt("outfit");      fireChange(PROP_OUTFIT);    }    setEatAndChoke(true,changes.has("eating"),changes.has("choking"));    for (    StatusID id : StatusID.values()) {      String status=id.getAttribute();      if (changes.has(status)) {        setStatus(id,true);        if (status.equals(StatusID.POISON.getAttribute())) {          onPoisoned(Math.abs(changes.getInt(status)));        }      }    }    if (changes.has("heal")) {      onHealed(changes.getInt("heal"));    }    boolean hpRatioChange=false;    if (changes.has("base_hp")) {      baseHP=changes.getInt("base_hp");      hpRatioChange=true;    }    if (changes.has("modified_base_hp")) {      baseHP=changes.getInt("modified_base_hp");      hpRatioChange=true;    }    if (changes.has("hp")) {      final int newHP=changes.getInt("hp");      final int change=newHP - hp;      hp=newHP;      if (object.has("hp") && (change != 0)) {        onHPChange(change);      }      hpRatioChange=true;    }    if (changes.has("modified_hp")) {      final int newHP=changes.getInt("modified_hp");      final int change=newHP - hp;      hp=newHP;      if (object.has("hp") && (change != 0)) {        onHPChange(change);      }      hpRatioChange=true;    }    if (hpRatioChange) {      if (hp >= baseHP) {        hpRatio=1.0f;      } else       if (hp <= 0) {        hpRatio=0.0f;      } else {        hpRatio=hp / (float)baseHP;      }      if (hp == 0) {        onDeath();      }      fireChange(PROP_HP_RATIO);    }    if (changes.has("no_hpbar")) {      showHP=false;      fireChange(PROP_HP_DISPLAY);    }    String target=changes.get("target");    if (target != null) {      setTarget(target,changes.get("zoneid"));    }    if (changes.has("adminlevel")) {      adminlevel=changes.getInt("adminlevel");      fireChange(PROP_ADMIN_LEVEL);    }    if (changes.has("title_type")) {      titleType=changes.get("title_type");      fireChange(PROP_TITLE_TYPE);    }    if (changes.has("class") || changes.has("name") || changes.has("title")) {      fireChange(PROP_TITLE);    }    if (changes.has("unnamed")) {      showTitle=false;      fireChange(PROP_TITLE);    }  }  if (changes.has("atk")) {    atk=changes.getInt("atk");  }  if (changes.has("modified_atk")) {    atk=changes.getInt("modified_atk");  }  if (changes.has("def")) {    def=changes.getInt("def");  }  if (changes.has("modified_def")) {    def=changes.getInt("modified_def");  }  if (Testing.COMBAT) {    if (changes.has("ratk")) {      ratk=changes.getInt("ratk");    }    if (changes.has("modified_ratk")) {      ratk=changes.getInt("modified_ratk");    }  }  if (changes.has("level")) {    level=changes.getInt("level");  }  if (changes.has("modified_level")) {    level=changes.getInt("modified_level");  }  if (changes.has("atk_xp")) {    atkXP=changes.getInt("atk_xp");  }  if (changes.has("def_xp")) {    defXP=changes.getInt("def_xp");  }  if (Testing.COMBAT) {    if (changes.has("ratk_xp")) {      ratkXP=changes.getInt("ratk_xp");    }  }  if (changes.has("atk_item")) {    atkItem=changes.getInt("atk_item");  }  if (changes.has("def_item")) {    defItem=changes.getInt("def_item");  }  if (Testing.COMBAT) {    if (changes.has("ratk_item")) {      ratkItem=changes.getInt("ratk_item");    }  }  if (changes.has("mana")) {    mana=changes.getInt("mana");  }  if (changes.has("modified_mana")) {    mana=changes.getInt("modified_mana");  }  if (changes.has("base_mana")) {    baseMana=changes.getInt("base_mana");  }  if (changes.has("modified_base_mana")) {    baseMana=changes.getInt("modified_base_mana");  }  if (changes.has("ghostmode")) {    ghostmode=true;    fireChange(PROP_GHOSTMODE);  }  if (changes.has("xp")) {    int newXp=changes.getInt("xp");    if (object.has("xp") && (User.squaredDistanceTo(x,y) < HEARING_DISTANCE_SQ)) {      final int amount=newXp - xp;      if (amount > 0) {        addTextIndicator("+" + amount,NotificationType.SIGNIFICANT_POSITIVE);        ClientSingletonRepository.getUserInterface().addEventLine(new HeaderLessEventLine(getTitle() + " earns " + Grammar.quantityplnoun(amount,"experience point")+ ".",NotificationType.SIGNIFICANT_POSITIVE));      } else       if (amount < 0) {        addTextIndicator(Integer.toString(amount),NotificationType.SIGNIFICANT_NEGATIVE);        ClientSingletonRepository.getUserInterface().addEventLine(new HeaderLessEventLine(getTitle() + " loses " + Grammar.quantityplnoun(-amount,"experience point")+ ".",NotificationType.SIGNIFICANT_NEGATIVE));      }    }    xp=newXp;  }  if (changes.has("level") && object.has("level") && (User.squaredDistanceTo(x,y) < HEARING_DISTANCE_SQ)) {    final String text=getTitle() + " reaches Level " + getLevel();    ClientSingletonRepository.getUserInterface().addEventLine(new HeaderLessEventLine(text,NotificationType.SIGNIFICANT_POSITIVE));    ClientSingletonRepository.getUserInterface().addGameScreenText(getX() + (getWidth() / 2.0),getY(),text,NotificationType.SIGNIFICANT_POSITIVE,false);  }}  }
class C{  public boolean usingRawMode(){  return this.data == null;}  }
class C{  private boolean isCurrentUserTheEditedUser(final User currentUser,final User editedUser){  return currentUser != null && editedUser != null && editedUser.getUserName().equals(currentUser.getUserName());}  }
class C{  private static int compateOids(ObjectIdentifier oid1,ObjectIdentifier oid2){  if (oid1 == oid2) {    return 0;  }  int[] ioid1=oid1.getOid();  int[] ioid2=oid2.getOid();  int min=ioid1.length < ioid2.length ? ioid1.length : ioid2.length;  for (int i=0; i < min; ++i) {    if (ioid1[i] < ioid2[i]) {      return -1;    }    if (ioid1[i] > ioid2[i]) {      return 1;    }    if ((i + 1) == ioid1.length && (i + 1) < ioid2.length) {      return -1;    }    if ((i + 1) < ioid1.length && (i + 1) == ioid2.length) {      return 1;    }  }  return 0;}  }
class C{  public void attribute(String elemName,String attrName,String type,String value){  ElementType e=getElementType(elemName);  if (e == null) {    throw new Error("Attribute " + attrName + " specified for unknown element type "+ elemName);  }  e.setAttribute(attrName,type,value);}  }
class C{  public final synchronized int size(){  return current_item + 1;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public BOSHConfiguration(boolean https,String host,int port,String filePath,String xmppDomain){  super(host,port,xmppDomain);  setSASLAuthenticationEnabled(true);  ssl=https;  file=(filePath != null ? filePath : "/");}  }
class C{  public void run(PrintStream out) throws Exception {  retrieveFeed(out);}  }
class C{  public static void validateMethodSignature(Method method){  Class<?>[] parameterTypes=method.getParameterTypes();  if ((parameterTypes.length == 0) || !parameterTypes[0].isAssignableFrom(AssetOptionsContext.class)) {    throw new IllegalArgumentException("AssetOptionsContext must be the first parameter: " + method.toGenericString());  }  int requiredNumberOfDependencies=parameterTypes.length - 1;  AssetDependencies dependencies=method.getAnnotation(AssetDependencies.class);  int dependencyCount=(dependencies != null) ? dependencies.value().length : 0;  if (dependencyCount < requiredNumberOfDependencies) {    throw new IllegalArgumentException("Method does not have enough parameters to satisfy dependencies: " + method.toGenericString());  } else   if (dependencyCount > requiredNumberOfDependencies) {    throw new IllegalArgumentException("Method has more parameters than will be provided by dependencies: " + method.toGenericString());  }}  }
class C{  public void removeVertex(Vertex vertex){  getVerticies().remove(vertex.getId());  if (vertex.hasData()) {    getVerticiesByData().remove(vertex.getData());  }}  }
class C{  public static void list(){  VirtualArrayDataTable dataTable=new VirtualArrayDataTable();  render(dataTable);}  }
class C{  public static float[] toPrimitiveFloatArray(NumberVector obj){  return toPrimitiveFloatArray(obj,numberVectorAdapter(obj));}  }
class C{  public int replicationFactor(){  return k;}  }
class C{  public static Matrix parseMatlab(String matlab) throws Exception {  StringTokenizer tokRow;  StringTokenizer tokCol;  int rows;  int cols;  Matrix result;  String cells;  cells=matlab.substring(matlab.indexOf("[") + 1,matlab.indexOf("]")).trim();  tokRow=new StringTokenizer(cells,";");  rows=tokRow.countTokens();  tokCol=new StringTokenizer(tokRow.nextToken()," ");  cols=tokCol.countTokens();  result=new Matrix(rows,cols);  tokRow=new StringTokenizer(cells,";");  rows=0;  while (tokRow.hasMoreTokens()) {    tokCol=new StringTokenizer(tokRow.nextToken()," ");    cols=0;    while (tokCol.hasMoreTokens()) {      result.set(rows,cols,Double.parseDouble(tokCol.nextToken()));      cols++;    }    rows++;  }  return result;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public DistTXCommitMessage(){}  }
class C{  WalkingIterator(Compiler compiler,int opPos,int analysis,boolean shouldLoadWalkers) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis,shouldLoadWalkers);  int firstStepPos=OpMap.getFirstChildPos(opPos);  if (shouldLoadWalkers) {    m_firstWalker=WalkerFactory.loadWalkers(this,compiler,firstStepPos,0);    m_lastUsedWalker=m_firstWalker;  }}  }
class C{  public void initiateActiveSlotsList(final List<String> slotList){  activeSlotsList=slotList;}  }
class C{  @Inline public boolean isLive(ObjectReference object){  Space space=Space.getSpaceForObject(object);  if (space == Plan.loSpace)   return Plan.loSpace.isLive(object); else   if (space == Plan.nonMovingSpace)   return Plan.nonMovingSpace.isLive(object); else   if (Plan.USE_CODE_SPACE && space == Plan.smallCodeSpace)   return Plan.smallCodeSpace.isLive(object); else   if (Plan.USE_CODE_SPACE && space == Plan.largeCodeSpace)   return Plan.largeCodeSpace.isLive(object); else   if (space == null) {    if (VM.VERIFY_ASSERTIONS) {      Log.write("space failure: ");      Log.writeln(object);    }  }  return true;}  }
class C{  public int viewToModel(float x,float y,Shape a,Position.Bias[] bias){  Rectangle alloc=(Rectangle)a;  if (x < alloc.x + (alloc.width / 2)) {    bias[0]=Position.Bias.Forward;    return getStartOffset();  }  bias[0]=Position.Bias.Backward;  return getEndOffset();}  }
class C{  public AutouniqueAttribute_ createAutouniqueAttribute_(){  AutouniqueAttribute_Impl autouniqueAttribute_=new AutouniqueAttribute_Impl();  return autouniqueAttribute_;}  }
class C{  public static void main(String[] args){  jh61b.junit.textui.runClasses(TestRemove.class);}  }
class C{  protected void linkActivated(URL u){  Cursor c=html.getCursor();  Cursor waitCursor=Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR);  html.setCursor(waitCursor);  SwingUtilities.invokeLater(new PageLoader(u,c));}  }
class C{  public static void copy(DimensionsEvent aeDest,DimensionsEvent aeSrc){  GPOMutable destAggs=aeDest.getAggregates();  GPOMutable srcAggs=aeSrc.getAggregates();  if (srcAggs.getFieldsBoolean() != null) {    System.arraycopy(srcAggs.getFieldsBoolean(),0,destAggs.getFieldsBoolean(),0,srcAggs.getFieldsBoolean().length);  }  if (srcAggs.getFieldsCharacter() != null) {    System.arraycopy(srcAggs.getFieldsCharacter(),0,destAggs.getFieldsCharacter(),0,srcAggs.getFieldsCharacter().length);  }  if (srcAggs.getFieldsString() != null) {    System.arraycopy(srcAggs.getFieldsString(),0,destAggs.getFieldsString(),0,srcAggs.getFieldsString().length);  }  if (srcAggs.getFieldsShort() != null) {    System.arraycopy(srcAggs.getFieldsShort(),0,destAggs.getFieldsShort(),0,srcAggs.getFieldsShort().length);  }  if (srcAggs.getFieldsInteger() != null) {    System.arraycopy(srcAggs.getFieldsInteger(),0,destAggs.getFieldsInteger(),0,srcAggs.getFieldsInteger().length);  }  if (srcAggs.getFieldsLong() != null) {    System.arraycopy(srcAggs.getFieldsLong(),0,destAggs.getFieldsLong(),0,srcAggs.getFieldsLong().length);  }  if (srcAggs.getFieldsFloat() != null) {    System.arraycopy(srcAggs.getFieldsFloat(),0,destAggs.getFieldsFloat(),0,srcAggs.getFieldsFloat().length);  }  if (srcAggs.getFieldsDouble() != null) {    System.arraycopy(srcAggs.getFieldsDouble(),0,destAggs.getFieldsDouble(),0,srcAggs.getFieldsDouble().length);  }}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/assign-file-policy/{filePolicyUri}") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep assignFilePolicy(@PathParam("id") URI id,@PathParam("filePolicyUri") URI filePolicyUri) throws InternalException {  _log.info("Assigning file policy {} to file system {}",filePolicyUri,id);  String task=UUID.randomUUID().toString();  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  FileShare fs=queryResource(id);  ArgValidator.checkEntity(fs,id,isIdEmbeddedInURL(id));  ArgValidator.checkFieldUriType(filePolicyUri,SchedulePolicy.class,"filePolicyUri");  ArgValidator.checkUri(filePolicyUri);  SchedulePolicy fp=_permissionsHelper.getObjectById(filePolicyUri,SchedulePolicy.class);  ArgValidator.checkEntityNotNull(fp,filePolicyUri,isIdEmbeddedInURL(filePolicyUri));  if (!fp.getTenantOrg().getURI().toString().equalsIgnoreCase(fs.getTenant().getURI().toString())) {    throw APIException.badRequests.associatedPolicyTenantMismatch(filePolicyUri,id);  }  VirtualPool vpool=_dbClient.queryObject(VirtualPool.class,fs.getVirtualPool());  if (!vpool.getScheduleSnapshots()) {    throw APIException.methodNotAllowed.notSupportedWithReason("Snapshot schedule is not supported by vpool: " + vpool.getLabel());  }  if (fs.getFilePolicies().contains(filePolicyUri.toString())) {    throw APIException.badRequests.duplicatePolicyAssociation(filePolicyUri);  }  StorageSystem device=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());  FileController controller=getController(FileController.class,device.getSystemType());  String path=fs.getMountPath();  _log.info("Mount path found {} ",path);  Operation op=_dbClient.createTaskOpStatus(FileShare.class,fs.getId(),task,ResourceOperationTypeEnum.ASSIGN_FILE_SYSTEM_SNAPSHOT_SCHEDULE);  op.setDescription("Filesystem assign policy");  try {    _log.info("No Errors found proceeding further {}, {}, {}",new Object[]{_dbClient,fs,fp});    controller.assignFileSystemSnapshotPolicy(device.getId(),fs.getId(),fp.getId(),task);    auditOp(OperationTypeEnum.ASSIGN_FILE_SYSTEM_SNAPSHOT_SCHEDULE,true,AuditLogManager.AUDITOP_BEGIN,fs.getId().toString(),device.getId().toString(),fp.getId());  } catch (  BadRequestException e) {    op=_dbClient.error(FileShare.class,fs.getId(),task,e);    _log.error("Error Assigning Filesystem policy {}, {}",e.getMessage(),e);    throw e;  }catch (  Exception e) {    _log.error("Error Assigning Filesystem policy {}, {}",e.getMessage(),e);    throw APIException.badRequests.unableToProcessRequest(e.getMessage());  }  return toTask(fs,task,op);}  }
class C{  public Builder compressionCodec(CompressionCodec.Type codec){  this._codec=codec;  return this;}  }
class C{  private static synchronized void initTrueRandom(long adjustedTimestamp){  _rand_m=971;  _rand_ia=11113;  _rand_ib=104322;  _rand_irand=4181;  int seed=(int)(adjustedTimestamp >>> 48) ^ (int)(adjustedTimestamp >>> 32) ^ (int)(adjustedTimestamp >>> 16)^ (int)(adjustedTimestamp & 0x000000000000FFFF);  _rand_irand=_rand_irand + seed + _osProcessId;}  }
class C{  public boolean isHomeSupported(){  return homeSupported;}  }
class C{  public static ITypedRegion mergePartitions(ITypedRegion[] regions){  Assert.isNotNull(regions);  if (regions.length == 0) {    return null;  }  String type=null;  int offset=-1;  int length=0;  int matcher=-1;  for (int i=0; i < regions.length; i++) {    if (type == null) {      type=regions[i].getType();    } else {      if (!type.equals(regions[i].getType())) {        return null;      }    }    if (offset == -1) {      offset=regions[i].getOffset();    } else {      if (regions[i].getOffset() != matcher) {        return null;      }    }    matcher=regions[i].getOffset() + regions[i].getLength();    length+=regions[i].getLength();  }  return new TypedRegion(offset,length,type);}  }
class C{  public static Map<String,Double> bytesMapToDoubleMap(Map<String,byte[]> map,EntityDefinition ed){  Map<String,Double> result=new HashMap<String,Double>();  for (  Map.Entry<String,byte[]> entry : map.entrySet()) {    String qualifierName=entry.getKey();    Qualifier qualifier=ed.getDisplayNameMap().get(qualifierName);    if (qualifier == null)     qualifier=ed.getQualifierNameMap().get(qualifierName);    if (qualifier != null && entry.getValue() != null) {      qualifierName=qualifier.getDisplayName();      Object value=qualifier.getSerDeser().deserialize(entry.getValue());      result.put(qualifierName,convertObjToDouble(value));    } else {      result.put(qualifierName,null);    }  }  return result;}  }
class C{  private void populateEnvMap(ExecutorConfig executorConfig,LogstashConfig logstashConfig){  addToList(native_mesos_library_key,native_mesos_library_path);  addToList(JAVA_OPTS,getExecutorHeap(executorConfig) + " " + getLogstashHeap(logstashConfig));}  }
class C{  public Entry locateEntry() throws RepositoryException {  Repository repos=getRepository();  if (repos != null) {    Entry entry=repos.locate(getPath());    return entry;  } else {    return null;  }}  }
class C{  public double computeSpamProbability(Reader stream) throws java.io.IOException {  Set<String> tokens=parse(stream);  Map<String,Double> workCorpus=getCorpus();  SortedSet<TokenProbabilityStrength> tokenProbabilityStrengths=getTokenProbabilityStrengths(tokens,workCorpus);  return computeOverallProbability(tokenProbabilityStrengths,workCorpus);}  }
class C{  public Cuboid expand(CuboidDirection dir,int amount){switch (dir) {case North:    return new Cuboid(this.worldName,this.x1 - amount,this.y1,this.z1,this.x2,this.y2,this.z2);case South:  return new Cuboid(this.worldName,this.x1,this.y1,this.z1,this.x2 + amount,this.y2,this.z2);case East:return new Cuboid(this.worldName,this.x1,this.y1,this.z1 - amount,this.x2,this.y2,this.z2);case West:return new Cuboid(this.worldName,this.x1,this.y1,this.z1,this.x2,this.y2,this.z2 + amount);case Down:return new Cuboid(this.worldName,this.x1,this.y1 - amount,this.z1,this.x2,this.y2,this.z2);case Up:return new Cuboid(this.worldName,this.x1,this.y1,this.z1,this.x2,this.y2 + amount,this.z2);default :throw new IllegalArgumentException("Invalid direction " + dir);}}  }
class C{  protected void addEntry(Sequence<IString> sourceSequence,Sequence<IString> targetSequence,PhraseAlignment alignment,float[] scores){  int[] sourceArray=Sequences.toIntArray(sourceSequence);  int[] targetArray=Sequences.toIntArray(targetSequence);  int fIndex=sourceToRuleIndex.insertIntoIndex(sourceArray);  int eIndex=this.targetIndex.indexOf(targetArray,true);  if (ruleLists.size() <= fIndex) {    while (ruleLists.size() <= fIndex)     ruleLists.add(null);  }  List<PhraseTableEntry> intTransOpts=ruleLists.get(fIndex);  if (intTransOpts == null) {    intTransOpts=new ArrayList<>();    ruleLists.set(fIndex,intTransOpts);  }  intTransOpts.add(new PhraseTableEntry(ruleIdCounter.getAndIncrement(),targetIndex.get(eIndex),scores,alignment));}  }
class C{  public void test_restartSafe_oneWrite(){  IAtomicStore store=(IAtomicStore)getStore();  try {    assertTrue(store.isStable());    final Random r=new Random();    final int len=100;    final byte[] expected=new byte[len];    r.nextBytes(expected);    final ByteBuffer tmp=ByteBuffer.wrap(expected);    final long addr1=store.write(tmp);    assertEquals(len,tmp.position());    assertEquals(tmp.position(),tmp.limit());    ByteBuffer actual=store.read(addr1);    assertEquals(expected,actual);    assertEquals(0,actual.position());    assertEquals(expected.length,actual.limit());    store.commit();    store=(IAtomicStore)reopenStore(store);    assertTrue(store.isStable());    actual=store.read(addr1);    assertEquals(expected,actual);  }  finally {    store.destroy();  }}  }
class C{  private void checkTSAServer(X509Certificate cert) throws CertificateException {  Set<String> exts=getCriticalExtensions(cert);  if (checkKeyUsage(cert,KU_SIGNATURE) == false) {    throw new ValidatorException("KeyUsage does not allow digital signatures",ValidatorException.T_EE_EXTENSIONS,cert);  }  if (cert.getExtendedKeyUsage() == null) {    throw new ValidatorException("Certificate does not contain an extended key usage " + "extension required for a TSA server",ValidatorException.T_EE_EXTENSIONS,cert);  }  if (checkEKU(cert,exts,OID_EKU_TIME_STAMPING) == false) {    throw new ValidatorException("Extended key usage does not permit use for TSA server",ValidatorException.T_EE_EXTENSIONS,cert);  }  exts.remove(SimpleValidator.OID_KEY_USAGE);  exts.remove(SimpleValidator.OID_EXTENDED_KEY_USAGE);  checkRemainingExtensions(exts);}  }
class C{  protected int index(double val){  double[] set=_set;  Object[] values=_values;  int length=set.length;  int hash=_hashingStrategy.computeHashCode(val) & 0x7fffffff;  int index=hash % length;  if (!isFree(values,index) && (isRemoved(values,index) || set[index] != val)) {    int probe=1 + (hash % (length - 2));    do {      index-=probe;      if (index < 0) {        index+=length;      }    } while (!isFree(values,index) && (isRemoved(values,index) || set[index] != val));  }  return isFree(values,index) ? -1 : index;}  }
class C{  static int opcodeCount(int opcode){switch (opcode) {case ByteCode.AALOAD:case ByteCode.AASTORE:case ByteCode.ACONST_NULL:case ByteCode.ALOAD_0:case ByteCode.ALOAD_1:case ByteCode.ALOAD_2:case ByteCode.ALOAD_3:case ByteCode.ARETURN:case ByteCode.ARRAYLENGTH:case ByteCode.ASTORE_0:case ByteCode.ASTORE_1:case ByteCode.ASTORE_2:case ByteCode.ASTORE_3:case ByteCode.ATHROW:case ByteCode.BALOAD:case ByteCode.BASTORE:case ByteCode.BREAKPOINT:case ByteCode.CALOAD:case ByteCode.CASTORE:case ByteCode.D2F:case ByteCode.D2I:case ByteCode.D2L:case ByteCode.DADD:case ByteCode.DALOAD:case ByteCode.DASTORE:case ByteCode.DCMPG:case ByteCode.DCMPL:case ByteCode.DCONST_0:case ByteCode.DCONST_1:case ByteCode.DDIV:case ByteCode.DLOAD_0:case ByteCode.DLOAD_1:case ByteCode.DLOAD_2:case ByteCode.DLOAD_3:case ByteCode.DMUL:case ByteCode.DNEG:case ByteCode.DREM:case ByteCode.DRETURN:case ByteCode.DSTORE_0:case ByteCode.DSTORE_1:case ByteCode.DSTORE_2:case ByteCode.DSTORE_3:case ByteCode.DSUB:case ByteCode.DUP:case ByteCode.DUP2:case ByteCode.DUP2_X1:case ByteCode.DUP2_X2:case ByteCode.DUP_X1:case ByteCode.DUP_X2:case ByteCode.F2D:case ByteCode.F2I:case ByteCode.F2L:case ByteCode.FADD:case ByteCode.FALOAD:case ByteCode.FASTORE:case ByteCode.FCMPG:case ByteCode.FCMPL:case ByteCode.FCONST_0:case ByteCode.FCONST_1:case ByteCode.FCONST_2:case ByteCode.FDIV:case ByteCode.FLOAD_0:case ByteCode.FLOAD_1:case ByteCode.FLOAD_2:case ByteCode.FLOAD_3:case ByteCode.FMUL:case ByteCode.FNEG:case ByteCode.FREM:case ByteCode.FRETURN:case ByteCode.FSTORE_0:case ByteCode.FSTORE_1:case ByteCode.FSTORE_2:case ByteCode.FSTORE_3:case ByteCode.FSUB:case ByteCode.I2B:case ByteCode.I2C:case ByteCode.I2D:case ByteCode.I2F:case ByteCode.I2L:case ByteCode.I2S:case ByteCode.IADD:case ByteCode.IALOAD:case ByteCode.IAND:case ByteCode.IASTORE:case ByteCode.ICONST_0:case ByteCode.ICONST_1:case ByteCode.ICONST_2:case ByteCode.ICONST_3:case ByteCode.ICONST_4:case ByteCode.ICONST_5:case ByteCode.ICONST_M1:case ByteCode.IDIV:case ByteCode.ILOAD_0:case ByteCode.ILOAD_1:case ByteCode.ILOAD_2:case ByteCode.ILOAD_3:case ByteCode.IMPDEP1:case ByteCode.IMPDEP2:case ByteCode.IMUL:case ByteCode.INEG:case ByteCode.IOR:case ByteCode.IREM:case ByteCode.IRETURN:case ByteCode.ISHL:case ByteCode.ISHR:case ByteCode.ISTORE_0:case ByteCode.ISTORE_1:case ByteCode.ISTORE_2:case ByteCode.ISTORE_3:case ByteCode.ISUB:case ByteCode.IUSHR:case ByteCode.IXOR:case ByteCode.L2D:case ByteCode.L2F:case ByteCode.L2I:case ByteCode.LADD:case ByteCode.LALOAD:case ByteCode.LAND:case ByteCode.LASTORE:case ByteCode.LCMP:case ByteCode.LCONST_0:case ByteCode.LCONST_1:case ByteCode.LDIV:case ByteCode.LLOAD_0:case ByteCode.LLOAD_1:case ByteCode.LLOAD_2:case ByteCode.LLOAD_3:case ByteCode.LMUL:case ByteCode.LNEG:case ByteCode.LOR:case ByteCode.LREM:case ByteCode.LRETURN:case ByteCode.LSHL:case ByteCode.LSHR:case ByteCode.LSTORE_0:case ByteCode.LSTORE_1:case ByteCode.LSTORE_2:case ByteCode.LSTORE_3:case ByteCode.LSUB:case ByteCode.LUSHR:case ByteCode.LXOR:case ByteCode.MONITORENTER:case ByteCode.MONITOREXIT:case ByteCode.NOP:case ByteCode.POP:case ByteCode.POP2:case ByteCode.RETURN:case ByteCode.SALOAD:case ByteCode.SASTORE:case ByteCode.SWAP:case ByteCode.WIDE:    return 0;case ByteCode.ALOAD:case ByteCode.ANEWARRAY:case ByteCode.ASTORE:case ByteCode.BIPUSH:case ByteCode.CHECKCAST:case ByteCode.DLOAD:case ByteCode.DSTORE:case ByteCode.FLOAD:case ByteCode.FSTORE:case ByteCode.GETFIELD:case ByteCode.GETSTATIC:case ByteCode.GOTO:case ByteCode.GOTO_W:case ByteCode.IFEQ:case ByteCode.IFGE:case ByteCode.IFGT:case ByteCode.IFLE:case ByteCode.IFLT:case ByteCode.IFNE:case ByteCode.IFNONNULL:case ByteCode.IFNULL:case ByteCode.IF_ACMPEQ:case ByteCode.IF_ACMPNE:case ByteCode.IF_ICMPEQ:case ByteCode.IF_ICMPGE:case ByteCode.IF_ICMPGT:case ByteCode.IF_ICMPLE:case ByteCode.IF_ICMPLT:case ByteCode.IF_ICMPNE:case ByteCode.ILOAD:case ByteCode.INSTANCEOF:case ByteCode.INVOKEINTERFACE:case ByteCode.INVOKESPECIAL:case ByteCode.INVOKESTATIC:case ByteCode.INVOKEVIRTUAL:case ByteCode.ISTORE:case ByteCode.JSR:case ByteCode.JSR_W:case ByteCode.LDC:case ByteCode.LDC2_W:case ByteCode.LDC_W:case ByteCode.LLOAD:case ByteCode.LSTORE:case ByteCode.NEW:case ByteCode.NEWARRAY:case ByteCode.PUTFIELD:case ByteCode.PUTSTATIC:case ByteCode.RET:case ByteCode.SIPUSH:  return 1;case ByteCode.IINC:case ByteCode.MULTIANEWARRAY:return 2;case ByteCode.LOOKUPSWITCH:case ByteCode.TABLESWITCH:return -1;}throw new IllegalArgumentException("Bad opcode: " + opcode);}  }
class C{  public ReversedWildcardFilterFactory(Map<String,String> args){  super(args);  withOriginal=getBoolean(args,"withOriginal",true);  maxPosAsterisk=getInt(args,"maxPosAsterisk",2);  maxPosQuestion=getInt(args,"maxPosQuestion",1);  minTrailing=getInt(args,"minTrailing",2);  maxFractionAsterisk=getFloat(args,"maxFractionAsterisk",0.0f);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public CassovaryOutIndexedDirectedGraph(DirectedGraph<Node> graph){  if (!graph.isDirStored(GraphDir.OutDir()) || graph.isBiDirectional()) {    throw new IncompatibleCassovaryGraphException();  }  this.graph=graph;}  }
class C{  private static void shrinkHeap(TreeSet<DoubleDBIDPair> hotset,int k){  ModifiableDBIDs seenids=DBIDUtil.newHashSet(2 * k);  int cnt=0;  for (Iterator<DoubleDBIDPair> i=hotset.iterator(); i.hasNext(); ) {    DoubleDBIDPair p=i.next();    if (cnt > k || seenids.contains(p)) {      i.remove();    } else {      seenids.add(p);      cnt++;    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodenotationnodeattributes.class,args);}  }
class C{  public boolean logout(String remoteName){  Remote remote;  if (remoteName == null) {    remote=getDefaultRemote();    remoteName=getDefaultRemoteName();  } else {    remote=getRemote(remoteName);  }  if (remote == null) {    System.out.println("Unable to find the given remote '" + remoteName + "'");    return false;  }  Preferences preferencesRemotes=globalPreferences.path("remotes");  RemoteCredentials remoteCredentials=preferencesRemotes.get(remoteName,RemoteCredentials.class);  remoteCredentials.setToken("");  preferencesRemotes.merge(remoteName,remoteCredentials);  refresh();  return true;}  }
class C{  private static List<String> deDuplicate(List<String> input){  if (input == null) {    return input;  }  HashSet hs=new HashSet();  hs.addAll(input);  List<String> result=new ArrayList<String>();  result.addAll(hs);  return result;}  }
class C{  public void clearRequestsFromSTOP(){  if (requestsFromSTOP != null)   requestsFromSTOP.clear();  requestsFromSTOP=null;}  }
class C{  public MutableString(final MutableString s){  makeCompactMutableString(s.length());  System.arraycopy(s.array,0,array,0,array.length);}  }
class C{  public static void main(String... args){  new JavaProcessKiller().run(args);}  }
class C{  protected void addVisitedLocations(){  while (mDestinations.hasNext() && mDestinations.isInPast(SantaPreferences.getCurrentTime())) {    Destination destination=mDestinations.getCurrent();    mMapFragment.addLocation(destination);    mAdapter.addDestination(false,destination,mSupportStreetView);    mDestinations.moveToNext();  }  mAdapter.notifyDataSetChanged();}  }
class C{  public final double relativeAbsoluteError() throws Exception {  return m_delegate.relativeAbsoluteError();}  }
class C{  protected static void dumpSVUID(Class<?> clazz){  String s=clazz.getName() + " ==\nstatic final long serialVersionUID = " + java.io.ObjectStreamClass.lookup(clazz).getSerialVersionUID()+ "L;\n";  System.out.println(s);}  }
class C{  public void initOptions(){  if (BugSettings.IGNORE_ALL_BUGS.getValue())   BGROUP.setSelected(DISCARD_BOX.getModel(),true); else   if (BugSettings.USE_AUTOMATIC_BUG.getValue())   BGROUP.setSelected(SEND_BOX.getModel(),true); else   BGROUP.setSelected(REVIEW_BOX.getModel(),true);  DEADLOCK_OPTION.setSelected(BugSettings.SEND_DEADLOCK_BUGS.getValue());}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GROUP_CLOUD_DEVICE_DB'";  db.execSQL(sql);}  }
class C{  public BufferedImage createCompatibleDestImage(BufferedImage src,ColorModel destCM){  BufferedImage image;  int w=src.getWidth();  int h=src.getHeight();  int transferType=DataBuffer.TYPE_BYTE;  if (destCM == null) {    ColorModel cm=src.getColorModel();    Raster raster=src.getRaster();    if (cm instanceof ComponentColorModel) {      DataBuffer db=raster.getDataBuffer();      boolean hasAlpha=cm.hasAlpha();      boolean isPre=cm.isAlphaPremultiplied();      int trans=cm.getTransparency();      int[] nbits=null;      if (ltable instanceof ByteLookupTable) {        if (db.getDataType() == db.TYPE_USHORT) {          if (hasAlpha) {            nbits=new int[2];            if (trans == cm.BITMASK) {              nbits[1]=1;            } else {              nbits[1]=8;            }          } else {            nbits=new int[1];          }          nbits[0]=8;        }      } else       if (ltable instanceof ShortLookupTable) {        transferType=DataBuffer.TYPE_USHORT;        if (db.getDataType() == db.TYPE_BYTE) {          if (hasAlpha) {            nbits=new int[2];            if (trans == cm.BITMASK) {              nbits[1]=1;            } else {              nbits[1]=16;            }          } else {            nbits=new int[1];          }          nbits[0]=16;        }      }      if (nbits != null) {        cm=new ComponentColorModel(cm.getColorSpace(),nbits,hasAlpha,isPre,trans,transferType);      }    }    image=new BufferedImage(cm,cm.createCompatibleWritableRaster(w,h),cm.isAlphaPremultiplied(),null);  } else {    image=new BufferedImage(destCM,destCM.createCompatibleWritableRaster(w,h),destCM.isAlphaPremultiplied(),null);  }  return image;}  }
class C{  public static InlineQueryResultCachedStickerBuilder builder(){  return new InlineQueryResultCachedStickerBuilder();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static final void closeCache(){  JUnit4CacheTestCase.closeCache();}  }
class C{  public void println(String s) throws IOException {  print(s);  println();}  }
class C{  private void closeDestination(State state){  try {    if (state.mStream != null) {      state.mStream.close();      state.mStream=null;    }  } catch (  IOException ex) {    if (Constants.LOGV) {      Log.v(Constants.TAG,"exception when closing the file after download : " + ex);    }  }}  }
class C{  public String preview(){  setShowConfirm(true);  return null;}  }
class C{  public JCVariableDecl VarDef(VarSymbol v,JCExpression init){  return (JCVariableDecl)new JCVariableDecl(Modifiers(v.flags(),Annotations(v.getRawAttributes())),v.name,Type(v.type),init,v).setPos(pos).setType(v.type);}  }
class C{  public Matrix4f(Matrix4f m1){  this.m00=m1.m00;  this.m01=m1.m01;  this.m02=m1.m02;  this.m03=m1.m03;  this.m10=m1.m10;  this.m11=m1.m11;  this.m12=m1.m12;  this.m13=m1.m13;  this.m20=m1.m20;  this.m21=m1.m21;  this.m22=m1.m22;  this.m23=m1.m23;  this.m30=m1.m30;  this.m31=m1.m31;  this.m32=m1.m32;  this.m33=m1.m33;}  }
class C{  public static void checkEquals(String message,BigDecimal expected,BigDecimal actual){  checkEqualsWithScaleOfTen(message,expected,actual);}  }
class C{  private void doClose(){  if (closed) {    return;  }  closed=true;}  }
class C{  public T caseN4GetterDeclaration(N4GetterDeclaration object){  return null;}  }
class C{  public void writeNext(String[] nextLine){  if (nextLine == null)   return;  StringBuilder sb=new StringBuilder(INITIAL_STRING_SIZE);  for (int i=0; i < nextLine.length; i++) {    if (i != 0) {      sb.append(separator);    }    String nextElement=nextLine[i];    if (nextElement == null)     continue;    if (quotechar != NO_QUOTE_CHARACTER)     sb.append(quotechar);    sb.append(stringContainsSpecialCharacters(nextElement) ? processLine(nextElement) : nextElement);    if (quotechar != NO_QUOTE_CHARACTER)     sb.append(quotechar);  }  sb.append(lineEnd);  pw.write(sb.toString());}  }
class C{  public static <V>void makeMapSerializable(Map<String,V> map){  Set<String> keysToRemove=new LinkedHashSet<String>();  for (  Map.Entry<String,V> mapEntry : map.entrySet()) {    Object entryValue=mapEntry.getValue();    if (entryValue != null && !(entryValue instanceof Serializable)) {      keysToRemove.add(mapEntry.getKey());    }  }  for (  String keyToRemove : keysToRemove) {    map.remove(keyToRemove);  }}  }
class C{  public void addFeatureType(WordNetFeatureClass name){  this.featureClasses.add(name);}  }
class C{  @SuppressWarnings("unchecked") public static void updateSocialTone(Map<String,Object> user,List<ToneScore> socialTone,Boolean maintainHistory){  List<String> currentSocial=new ArrayList<String>();  Map<String,Object> currentSocialObject=new HashMap<String,Object>();  for (  ToneScore tone : socialTone) {    if (tone.getScore() >= SOCIAL_HIGH_SCORE_THRESHOLD) {      currentSocial.add(tone.getName().toLowerCase() + "_high");      currentSocialObject.put("tone_name",tone.getName().toLowerCase());      currentSocialObject.put("score",tone.getScore());      currentSocialObject.put("interpretation","likely high");    } else     if (tone.getScore() <= SOCIAL_LOW_SCORE_THRESHOLD) {      currentSocial.add(tone.getName().toLowerCase() + "_low");      currentSocialObject.put("tone_name",tone.getName().toLowerCase());      currentSocialObject.put("score",tone.getScore());      currentSocialObject.put("interpretation","likely low");    } else {      currentSocialObject.put("tone_name",tone.getName().toLowerCase());      currentSocialObject.put("score",tone.getScore());      currentSocialObject.put("interpretation","likely medium");    }  }  Map<String,Object> social=(Map<String,Object>)((Map<String,Object>)user.get("tone")).get("social");  social.put("current",currentSocial);  if (maintainHistory) {    List<Map<String,Object>> history=new ArrayList<Map<String,Object>>();    if (social.get("history") != null) {      history=(List<Map<String,Object>>)social.get("history");    }    history.add(currentSocialObject);    social.put("history",history);  }}  }
class C{  private void name(){  while (off < source.count) {    char next=source.buf[off++];    if (next == '}') {      replace();      break;    } else {      name.append(next);    }  }  if (name.length() > 0) {    text.append("${");    text.append(name);  }}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public static ThreadSafeValue[] wrapArray(Object syncObj,Value[] values){  ThreadSafeValue[] threadSafeValues=new ThreadSafeValue[values.length];  for (int i=0; i < values.length; ++i) {    threadSafeValues[i]=wrap(syncObj,values[i]);  }  return threadSafeValues;}  }
class C{  protected void resetGUI(){  pack();  setResizable(false);  getEmbedPanel().getMsgFileTextField().setText("");  getEmbedPanel().getCoverFileTextField().setText("");  getEmbedPanel().getStegoFileTextField().setText("");  getEmbedPanel().getPasswordTextField().setText("");  getEmbedPanel().getConfPasswordTextField().setText("");  getEmbedPanel().getMsgFileTextField().requestFocus();}  }
class C{  @Override public String[] next(){  String[] temp=nextLine;  try {    nextLine=reader.readNext();  } catch (  IOException e) {    throw new NoSuchElementException();  }  return temp;}  }
class C{  FlexibleNode readInternalNode(HashMap<String,Taxon> translationList) throws IOException, ImportException {  FlexibleNode node=new FlexibleNode();  readCharacter();  FlexibleNode firstChild=readBranch(translationList);  node.addChild(firstChild);  if (getLastDelimiter() != ',') {    throw new BadFormatException("Missing ',' in tree in TREES block");  }  do {    node.addChild(readBranch(translationList));  } while (getLastDelimiter() == ',');  if (getLastDelimiter() != ')') {    throw new BadFormatException("Missing closing ')' in tree in TREES block");  }  readToken(":(),;");  if (getLastMetaComment() != null) {    parseMigrationString(getLastMetaComment(),node);    clearLastMetaComment();  }  return node;}  }
class C{  public long session(){  return session;}  }
class C{  public static File normalize(String name,File input){  File outputFile;  if (Options.getDir() == null)   if (input == null || input.getParent() == null)   outputFile=new File(name); else   outputFile=new File(input.getParent(),name); else   outputFile=new File(Options.getDir(),name);  if (outputFile.exists() && !Options.no_backup) {    File backup=new File(outputFile.toString() + "~");    if (backup.exists())     backup.delete();    if (outputFile.renameTo(backup))     Out.println("Old file \"" + outputFile + "\" saved as \""+ backup+ "\""); else     Out.println("Couldn't save old file \"" + outputFile + "\", overwriting!");  }  return outputFile;}  }
class C{  public WebRowSetImpl() throws SQLException {  super();  xmlReader=new WebRowSetXmlReader();  xmlWriter=new WebRowSetXmlWriter();}  }
class C{  private void statInit(){  fDocumentNo=new Textbox();  fDocumentNo.setWidth("100%");  fDocumentNo.addEventListener(Events.ON_CHANGE,this);  fDocumentNo.setAttribute("zk_component_ID","Lookup_Criteria_fDocumentNo");  fDocumentNo.addEventListener(Events.ON_CHANGE,this);  fDateFrom=new Datebox();  fDateFrom.setWidth("97px");  fDateFrom.setAttribute("zk_component_ID","Lookup_Criteria_DateFrom");  fDateFrom.addEventListener(Events.ON_CHANGE,this);  fDateTo=new Datebox();  fDateTo.setWidth("97px");  fDateTo.setAttribute("zk_component_ID","Lookup_Criteria_DateTo");  fDateTo.addEventListener(Events.ON_CHANGE,this);  SimpleDateFormat dateFormat=DisplayType.getDateFormat(DisplayType.Date,AEnv.getLanguage(Env.getCtx()));  fDateFrom.setFormat(dateFormat.toPattern());  fDateTo.setFormat(dateFormat.toPattern());  fAmtFrom=new NumberBox(false);  fAmtFrom.getDecimalbox().setWidth("90px");  fAmtFrom.setAttribute("zk_component_ID","Lookup_Criteria_AmtFrom");  fAmtFrom.addEventListener(Events.ON_CHANGE,this);  fAmtTo=new NumberBox(false);  fAmtTo.getDecimalbox().setWidth("90px");  fAmtTo.setAttribute("zk_component_ID","Lookup_Criteria_AmtTo");  fAmtTo.addEventListener(Events.ON_CHANGE,this);  DecimalFormat format=DisplayType.getNumberFormat(DisplayType.Amount,AEnv.getLanguage(Env.getCtx()));  fAmtFrom.getDecimalbox().setFormat(format.toPattern());  fAmtFrom.getDecimalbox().setStyle("text-align:right; " + fAmtFrom.getDecimalbox().getStyle());  fAmtTo.getDecimalbox().setFormat(format.toPattern());  fAmtTo.getDecimalbox().setStyle("text-align:right; " + fAmtTo.getDecimalbox().getStyle());  fCheckReceipt.setLabel(Msg.translate(Env.getCtx(),"OnlyReceipt"));  fCheckReceipt.setName("OnlyReceipt");  fCheckReceipt.addEventListener(Events.ON_CHECK,this);  fCheckReceipt.setAttribute("zk_component_ID","Lookup_Criteria_CheckReceipt");  fCheckPayment.setLabel(Msg.translate(Env.getCtx(),"OnlyPayment"));  fCheckPayment.setName("OnlyPayment");  fCheckPayment.addEventListener(Events.ON_CHECK,this);  fCheckPayment.setAttribute("zk_component_ID","Lookup_Criteria_CheckPayment");  fBPartner_ID=new WSearchEditor(MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MPayment.Table_Name,MPayment.COLUMNNAME_C_BPartner_ID),DisplayType.Search),Msg.translate(Env.getCtx(),"C_BPartner_ID"),"",false,false,true);  fBPartner_ID.getComponent().setAttribute("zk_component_ID","Lookup_Criteria_C_BPartner_ID");  fBPartner_ID.addValueChangeListener(this);  fBankAccount_ID=new WSearchEditor(MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MPayment.Table_Name,MPayment.COLUMNNAME_C_BankAccount_ID),DisplayType.Search),Msg.translate(Env.getCtx(),"C_BankAccount_ID"),"",false,false,true);  fBankAccount_ID.getComponent().setAttribute("zk_component_ID","Lookup_Criteria_C_BankAccount_ID");  fBankAccount_ID.addValueChangeListener(this);  Rows rows=new Rows();  Row row=new Row();  rows.appendChild(row);  row.appendChild(lDocumentNo.rightAlign());  row.appendChild(fDocumentNo);  row.appendChild(fBPartner_ID.getLabel().rightAlign());  row.appendChild(fBPartner_ID.getComponent());  row.appendChild(fCheckReceipt);  row=new Row();  rows.appendChild(row);  row.appendChild(fBankAccount_ID.getLabel().rightAlign());  row.appendChild(fBankAccount_ID.getComponent());  row.appendChild(lDateFrom.rightAlign());  Hbox hbox=new Hbox();  hbox.appendChild(fDateFrom);  hbox.appendChild(lDateTo);  hbox.appendChild(fDateTo);  row.appendChild(hbox);  row.appendChild(fCheckPayment);  row=new Row();  row.setSpans("3, 1");  rows.appendChild(row);  row.appendChild(lAmtFrom.rightAlign());  hbox=new Hbox();  hbox.appendChild(fAmtFrom);  hbox.appendChild(lAmtTo);  hbox.appendChild(fAmtTo);  row.appendChild(hbox);  p_criteriaGrid.appendChild(rows);  super.setSizes();}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  private void log(Level level,String message,Throwable ex){  LOGGER.log(level,"UserSync#" + getId() + ' '+ message,ex);}  }
class C{  public void killSelf(){  logD("killSelf %B %B %d",isDead,isPause,list.size());  isDead=true;  cancelAllMessage();}  }
class C{  private ComputeBigramRelativeFrequencyStripes(){}  }
class C{  public String findInContent(String content){  for (  BoyerMooreMatcher matcher : strings) {    if (matcher.findInContent(content) >= 0)     return matcher.getPattern();  }  Matcher matcher;  for (  Pattern pattern : patterns) {    matcher=pattern.matcher(content);    if (matcher.find()) {      return matcher.group();    }  }  return null;}  }
class C{  public CommandServiceInfo(){  metadata.put(VERSION,CURRENT_VERSION);  IProduct product=Platform.getProduct();  if (product != null) {    metadata.put(CLIENT_NAME,product.getName());    metadata.put(CLIENT_SYMBOLIC_NAME,product.getId());    Bundle bundle=product.getDefiningBundle();    if (bundle != null) {      Version version=bundle.getVersion();      metadata.put(CLIENT_VERSION,String.format("%s.%s.%s",version.getMajor(),version.getMinor(),version.getMicro()));      metadata.put(CLIENT_BUILD_ID,version.toString());    }  }}  }
class C{  public final void deserializeAndSet(JsonParser jp,DeserializationContext ctxt,Object instance,String propName) throws IOException, JsonProcessingException {  set(instance,propName,deserialize(jp,ctxt));}  }
class C{  public TextFieldSmartTableCell(String text,int textPosition){  textField=new JTextField(text);  textField.addFocusListener(fl);  textField.setScrollOffset(2);  textJL=new JLabel(text);  panel=new JPanel(new FlowLayout(textPosition));  panel.add(textJL);}  }
class C{  public static boolean isEmptyOrWhitespace(String s){  s=makeSafe(s);  for (int i=0, n=s.length(); i < n; i++) {    if (!Character.isWhitespace(s.charAt(i))) {      return false;    }  }  return true;}  }
class C{  void sendRoleRequestIfNotPending(OFControllerRole role){  try {    roleChanger.sendRoleRequestIfNotPending(role,0);  } catch (  IOException e) {    log.error("Disconnecting switch {} due to IO Error: {}",getSwitchInfoString(),e.getMessage());    mainConnection.disconnect();  }}  }
class C{  public FeatureVectorBuffer(int[] fIdxArray,float[] fValueArray){  assert fIdxArray.length == fValueArray.length;  idxList=new ArrayList<Integer>(Ints.asList(fIdxArray));  valList=new ArrayList<Float>(Floats.asList(fValueArray));}  }
class C{  public boolean canPerformAction(int dim,int bookType){  if (!dimToBookType.containsKey(dim))   return false;  return bookType >= dimToBookType.get(dim);}  }
class C{  public static org.oscm.vo.VOTriggerDefinition convertToApi(org.oscm.internal.vo.VOTriggerDefinition oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOTriggerDefinition newVO=new org.oscm.vo.VOTriggerDefinition();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setType(EnumConverter.convert(oldVO.getType(),org.oscm.types.enumtypes.TriggerType.class));  newVO.setTargetType(EnumConverter.convert(oldVO.getTargetType(),org.oscm.types.enumtypes.TriggerTargetType.class));  newVO.setTarget(oldVO.getTarget());  newVO.setSuspendProcess(oldVO.isSuspendProcess());  newVO.setName(oldVO.getName());  return newVO;}  }
class C{  public ExtendedBufferCapabilities(ImageCapabilities front,ImageCapabilities back,FlipContents flip){  super(front,back,flip);  this.vsync=VSyncType.VSYNC_DEFAULT;}  }
class C{  public void startDocument() throws org.xml.sax.SAXException {}  }
class C{  protected void endVisitNode(ASTNode node){}  }
class C{  public LoopArrow(Message msg,ArrowStroke stroke,Direction align,int y){  super(msg,stroke,align,y);  init();}  }
class C{  public boolean isValidIp(String ip){  return INET_ADDRESS_VALIDATOR.isValid(ip);}  }
class C{  public void removeInstance(WBEMClient client,CIMObjectPath path) throws WBEMException {  _log.info("Removing instance " + path);  client.deleteInstance(path);}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  @Nullable public KtFile parseText(@NotNull String text,@NotNull FileObject file){  StringUtil.assertValidSeparators(text);  Project kotlinProject=ProjectUtils.getKotlinProjectForFileObject(file);  if (kotlinProject == null) {    kotlinProject=ProjectUtils.getValidProject();    if (kotlinProject == null) {      KotlinLogger.INSTANCE.logWarning("Project is null");      return null;    }  }  com.intellij.openapi.project.Project project=KotlinEnvironment.getEnvironment(kotlinProject).getProject();  LightVirtualFile virtualFile=new KotlinLightVirtualFile(file,text);  virtualFile.setCharset(CharsetToolkit.UTF8_CHARSET);  PsiFileFactoryImpl psiFileFactory=(PsiFileFactoryImpl)PsiFileFactory.getInstance(project);  return (KtFile)psiFileFactory.trySetupPsiForFile(virtualFile,KotlinLanguage.INSTANCE,true,false);}  }
class C{  public void onBrokerData(final Tradestrategy tradestrategy,final ZonedDateTime endDate) throws BrokerModelException {  try {    if (this.isHistoricalDataRunning(tradestrategy)) {      throw new BrokerModelException(tradestrategy.getId(),3010,"Data request is already in progress for: " + tradestrategy.getContract().getSymbol() + " Please wait or cancel.");    }    m_historyDataRequests.put(tradestrategy.getId(),tradestrategy);    if (this.isBrokerDataOnly()) {      ZonedDateTime endDay=TradingCalendar.getDateAtTime(TradingCalendar.addTradingDays(endDate,backfillOffsetDays),endDate);      String endDateTime=TradingCalendar.getFormattedDate(endDay,"yyyyMMdd HH:mm:ss");      m_contractRequests.put(tradestrategy.getContract().getId(),tradestrategy.getContract());      _log.debug("onBrokerData ReqId: " + tradestrategy.getId() + " Symbol: "+ tradestrategy.getContract().getSymbol()+ " end Time: "+ endDateTime+ " Period length: "+ tradestrategy.getChartDays()+ " Bar size: "+ tradestrategy.getBarSize()+ " WhatToShow: "+ backfillWhatToShow+ " Regular Trading Hrs: "+ backfillUseRTH+ " Date format: "+ backfillDateFormat);      m_client.reqHistoricalData(tradestrategy.getId(),tradestrategy,endDateTime,ChartDays.newInstance(tradestrategy.getChartDays()).getDisplayName(),BarSize.newInstance(tradestrategy.getBarSize()).getDisplayName(),backfillWhatToShow,backfillUseRTH,backfillDateFormat);    } else {      m_client.reqHistoricalData(tradestrategy.getId(),tradestrategy,null,ChartDays.newInstance(tradestrategy.getChartDays()).getDisplayName(),BarSize.newInstance(tradestrategy.getBarSize()).getDisplayName(),backfillWhatToShow,backfillUseRTH,backfillDateFormat);    }  } catch (  Throwable ex) {    throw new BrokerModelException(tradestrategy.getId(),3020,"Error broker data Symbol: " + tradestrategy.getContract().getSymbol() + " Msg: "+ ex.getMessage());  }}  }
class C{  @Override public synchronized void vote(BooleanVote vote){  if (decision)   return;  if (vote.getVote()) {    total++;    latch.countDown();    if (total >= votesNeeded) {      decision=true;    }  }}  }
class C{  void parseString(String S,int[] I,int l){  int i=0;  for (int j=0; i < I.length && j < S.length(); j+=l)   I[i++]=Integer.parseInt(S.substring(j,j + l).trim());}  }
class C{  private static void removeIdsFromGrids(List<String> currentGridNames,List<Grid> grids){  for (  Grid grid : grids) {    grid.setId(-1);    for (    GridItem item : grid.getItems())     item.setId(-1);  }  for (  Grid grid : grids) {    if (currentGridNames.contains(grid.getName()))     grid.setName(grid.getName() + " (2)");  }}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="BC_UNCONFIRMED_CAST_OF_RETURN_VALUE",justification="CarManager only provides Car Objects") public File buildSwitchList(Location location){  File file=TrainManagerXml.instance().createCsvSwitchListFile(location.getName());  PrintWriter fileOut=null;  try {    fileOut=new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file),"UTF-8")),true);  } catch (  IOException e) {    log.error("Can not open CSV switch list file: {}",file.getName());    return null;  }  addLine(fileOut,HEADER);  addLine(fileOut,SWL);  addLine(fileOut,RN + ESC + Setup.getRailroadName()+ ESC);  addLine(fileOut,LN + ESC + splitString(location.getName())+ ESC);  addLine(fileOut,PRNTR + ESC + location.getDefaultPrinterName()+ ESC);  addLine(fileOut,SWLC + ESC + location.getSwitchListComment()+ ESC);  if (Setup.isPrintLocationCommentsEnabled() && !location.getComment().equals(Location.NONE)) {    String[] comments=location.getComment().split(NEW_LINE);    for (    String comment : comments) {      addLine(fileOut,LC + ESC + comment+ ESC);    }  }  addLine(fileOut,VT + getDate(true));  for (  Train train : TrainManager.instance().getTrainsByTimeList()) {    if (!train.isBuilt()) {      continue;    }    if (!Setup.isSwitchListRealTime() && train.getSwitchListStatus().equals(Train.PRINTED)) {      continue;    }    int pickupCars=0;    int dropCars=0;    int stops=1;    boolean trainDone=false;    List<Car> carList=CarManager.instance().getByTrainDestinationList(train);    List<Engine> enginesList=EngineManager.instance().getByTrainBlockingList(train);    Route route=train.getRoute();    if (route == null) {      continue;    }    List<RouteLocation> routeList=route.getLocationsBySequenceList();    RouteLocation rlPrevious=null;    for (    RouteLocation rl : routeList) {      if (!splitString(rl.getName()).equals(splitString(location.getName()))) {        rlPrevious=rl;        continue;      }      String expectedArrivalTime=train.getExpectedArrivalTime(rl);      if (expectedArrivalTime.equals(Train.ALREADY_SERVICED)) {        trainDone=true;      }      if (stops == 1) {        addLine(fileOut,TN + train.getName());        addLine(fileOut,TM + train.getDescription());        if (train.isTrainEnRoute()) {          addLine(fileOut,TIR);          addLine(fileOut,ETE + expectedArrivalTime);        } else {          addLine(fileOut,DL + splitString(splitString(train.getTrainDepartsName())));          addLine(fileOut,DT + train.getDepartureTime());          if (rl == train.getRoute().getDepartsRouteLocation() && routeList.size() > 1) {            addLine(fileOut,TD + splitString(rl.getName()) + DEL+ rl.getTrainDirectionString());          }          if (rl != train.getRoute().getDepartsRouteLocation()) {            addLine(fileOut,ETA + expectedArrivalTime);            addLine(fileOut,TA + splitString(rl.getName()) + DEL+ rl.getTrainDirectionString());          }        }        if (rl == train.getRoute().getTerminatesRouteLocation()) {          addLine(fileOut,TT + splitString(rl.getName()));        }      }      if (stops > 1) {        if (rlPrevious == null || !splitString(rl.getName()).equals(splitString(rlPrevious.getName()))) {          addLine(fileOut,VN + stops);          if (train.isTrainEnRoute()) {            addLine(fileOut,ETE + expectedArrivalTime);          } else {            addLine(fileOut,ETA + expectedArrivalTime);          }          addLine(fileOut,TA + splitString(rl.getName()) + DEL+ rl.getTrainDirectionString());          if (rl == train.getRoute().getTerminatesRouteLocation()) {            addLine(fileOut,TT + splitString(rl.getName()));          }        } else {          stops--;          if (rl.getTrainDirection() != rlPrevious.getTrainDirection()) {            addLine(fileOut,TDC + rl.getTrainDirectionString());          }        }      }      rlPrevious=rl;      if (!rl.getComment().equals(RouteLocation.NONE)) {        addLine(fileOut,RLC + ESC + rl.getComment()+ ESC);      }      checkForEngineOrCabooseChange(fileOut,train,rl);      for (      Engine engine : enginesList) {        if (engine.getRouteLocation() == rl && engine.getTrack() != null) {          fileOutCsvEngine(fileOut,engine,PL);        }      }      for (      RouteLocation rld : routeList) {        for (        Car car : carList) {          if (car.getRouteLocation() == rl && car.getTrack() != null && car.getRouteDestination() == rld) {            pickupCars++;            int count=0;            if (car.isUtility()) {              count=countPickupUtilityCars(carList,car,!IS_MANIFEST);              if (count == 0) {                continue;              }            }            fileOutCsvCar(fileOut,car,PC,count);          }        }      }      for (      Engine engine : enginesList) {        if (engine.getRouteDestination() == rl) {          fileOutCsvEngine(fileOut,engine,SL);        }      }      for (      Car car : carList) {        if (car.getRouteDestination() == rl) {          dropCars++;          int count=0;          if (car.isUtility()) {            count=countSetoutUtilityCars(carList,car,!LOCAL,!IS_MANIFEST);            if (count == 0) {              continue;            }          }          fileOutCsvCar(fileOut,car,SC,count);        }      }      stops++;    }    if (trainDone && pickupCars == 0 && dropCars == 0) {      addLine(fileOut,TDONE);    } else {      if (stops > 1 && pickupCars == 0) {        addLine(fileOut,NCPU);      }      if (stops > 1 && dropCars == 0) {        addLine(fileOut,NCSO);      }    }  }  addLine(fileOut,END);  List<RollingStock> rsByLocation=CarManager.instance().getByLocationList();  List<Car> carList=new ArrayList<Car>();  for (  RollingStock rs : rsByLocation) {    if (rs.getLocation() != null && splitString(rs.getLocation().getName()).equals(splitString(location.getName())) && rs.getRouteLocation() == null) {      carList.add((Car)rs);    }  }  clearUtilityCarTypes();  for (  Car car : carList) {    int count=0;    if (car.isUtility()) {      count=countPickupUtilityCars(carList,car,!IS_MANIFEST);      if (count == 0) {        continue;      }    }    fileOutCsvCar(fileOut,car,HOLD,count);  }  addLine(fileOut,END);  listCarsLocationUnknown(fileOut);  fileOut.flush();  fileOut.close();  location.setStatus(Location.CSV_GENERATED);  return file;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  protected void addNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_NamedElement_name_feature"),getString("_UI_PropertyDescriptor_description","_UI_NamedElement_name_feature","_UI_NamedElement_type"),BasePackage.Literals.NAMED_ELEMENT__NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  int p0=getStartOffset();  int p1=getEndOffset();  if ((pos >= p0) && (pos <= p1)) {    Rectangle r=a.getBounds();    if (pos == p1) {      r.x+=r.width;    }    r.width=0;    return r;  }  return null;}  }
class C{  @Override public void reset() throws IOException {  in.reset();  lineNumber=markedLineNumber;  lastChar=markedLastChar;}  }
class C{  public V next(){  if (offset != null) {    boolean accept=false;    for (    V element : collection) {      if (element == offset) {        accept=true;        continue;      }      if (accept) {        return offset=element;      }    }  }  return offset=collection.iterator().next();}  }
class C{  public void createNodeStates(int nodeIndex){  this.states[nodeIndex]=new int[patternCount];}  }
class C{  @Deprecated public EmailListEntry createEmailList(String emailList) throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Creating email list '" + emailList + "'.");  EmailListEntry entry=new EmailListEntry();  EmailList emailListExtension=new EmailList();  emailListExtension.setName(emailList);  entry.addExtension(emailListExtension);  URL insertUrl=new URL(domainUrlBase + "emailList/" + SERVICE_VERSION);  return emailListService.insert(insertUrl,entry);}  }
class C{  public void assertWriteCalled(String name,WriteMode... modes){  m_outputs.get(name).assertWriteCalled(modes);}  }
class C{  private final void prepareRun(final int logVerbosity) throws OperatorException {  initLogging(logVerbosity);  setProcessState(PROCESS_STATE_RUNNING);  getLogger().fine("Initialising process setup.");  RandomGenerator.init(this);  ResultService.init(this);  clearDataTables();  clearReportStreams();  clearMacros();  clearStorage();  if (getExecutionMode() != ExecutionMode.ONLY_DIRTY) {    getRootOperator().clear(Port.CLEAR_DATA);  }  AttributeFactory.resetNameCounters();  getLogger().fine("Process initialised.");}  }
class C{  public void testNull(){  DirectedGraph<Character,Number> g=new DirectedSparseMultigraph<Character,Number>();  long[] counts=TriadicCensus.getCounts(g);  for (int i=1; i < TriadicCensus.MAX_TRIADS; i++) {    assertEquals("Empty Graph doesn't have count 0",0,counts[i]);  }}  }
class C{  public void render(Graphics g){  if (decorator == null) {    super.render(g);    return;  }  Shape projectedShape=getShape();  if (projectedShape != null) {    decorator.draw(g,projectedShape);    return;  }  if (getNeedToRegenerate() || !isVisible())   return;  float[][] xpts=xpoints;  float[][] ypts=ypoints;  int len=xpts.length;  Paint displayPaint=getDisplayPaint();  Paint fillPaint=getFillPaint();  boolean isFillClear=isClear(fillPaint);  boolean isLineClear=isClear(displayPaint);  try {    for (int i=0; i < len; i++) {      float[] _x=xpts[i];      float[] _y=ypts[i];      if (isPolygon()) {        if (!isFillClear) {          setGraphicsForFill(g);          GeneralPath poly=new GeneralPath();          for (int j=0; j < _x.length; j++) {            if (j == 0) {              poly.moveTo(_x[0],_y[0]);            } else {              poly.lineTo(_x[j],_y[j]);            }          }          ((Graphics2D)g).fill(poly);        }        if (!isLineClear || !edgeMatchesFill) {          setGraphicsForEdge(g);          decorator.draw(g,_x,_y);        }      } else {        setGraphicsForEdge(g);        decorator.draw(g,_x,_y);      }    }  } catch (  Exception e) {    Debug.output("OMDecoratedSpline: caught Java rendering exception\n" + e.getMessage());  }}  }
class C{  public final boolean isFatalEnabled(){  return isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:45.986 -0400",hash_original_method="CC832A35FE601E9E0A1152E789C36A46",hash_generated_method="153ED34AB6DD9C923169A49265BFA595") public InetUnixAddress(String path){  this(path.getBytes(StandardCharsets.UTF_8));}  }
class C{  protected void printDebug(final String message,final Object... args){  if (isDebugEnabled()) {    printInfo(message,args);  }}  }
class C{  public void clear(){  infoQueue.clear();  while (!dataQueue.isEmpty()) {    allocator.release(dataQueue.remove());  }  totalBytesDropped=0;  totalBytesWritten=0;  lastAllocation=null;  lastAllocationOffset=allocationLength;}  }
class C{  public GTextField(String text){  super();  this.setDocument(new GPlainDocument(null));  this.setText(text);  this.setHorizontalAlignment(SwingConstants.RIGHT);}  }
class C{  public void test_describeDataSets01() throws Exception {  final Map<Resource,VoidSummary> summaries=getRepositoryDescriptions();  if (summaries.isEmpty()) {    fail("No repository descriptions");  }  final Iterator<Map.Entry<Resource,VoidSummary>> itr=summaries.entrySet().iterator();  while (itr.hasNext()) {    final Map.Entry<Resource,VoidSummary> e=itr.next();    final Resource namespaceName=e.getKey();    final VoidSummary summary=e.getValue();    final String namespaceStr=summary.namespace.stringValue();    assertEquals(new LiteralImpl(namespaceStr),summary.namespace);    assertFalse(summary.sparqlEndpoint.isEmpty());  }}  }
class C{  public boolean isServiceSuspended(){  return getVO().getStatus().equals(ServiceStatus.SUSPENDED);}  }
class C{  private static void activateChunkEntities(Chunk chunk){  for (  List<Entity> slice : chunk.entityLists) {    for (    Entity entity : slice) {      if (MinecraftServer.currentTick > entity.activatedTick) {        if (entity.defaultActivationState) {          entity.activatedTick=MinecraftServer.currentTick;          continue;        }switch (entity.activationType) {case 1:          if (monsterBB.intersectsWith(entity.boundingBox)) {            entity.activatedTick=MinecraftServer.currentTick;          }        break;case 2:      if (animalBB.intersectsWith(entity.boundingBox)) {        entity.activatedTick=MinecraftServer.currentTick;      }    break;case 3:default :  if (miscBB.intersectsWith(entity.boundingBox)) {    entity.activatedTick=MinecraftServer.currentTick;  }}}}}}  }
class C{  public static void main(String[] argv){  runClassifier(new SimpleLogistic(),argv);}  }
class C{  public Clock(){  put(Actions.ACTION,Actions.LOOK);  put("class","transparent");  imprecisionSeconds=Rand.rand(2 * MAX_IMPRECISION) - MAX_IMPRECISION;}  }
class C{  public StatusDetail toError(final String message){  return statusDetail(name,ERROR,message,details);}  }
class C{  private boolean confirmPassword(int request){  if (!mLockPatternUtils.isLockPasswordEnabled())   return false;  final Intent intent=new Intent();  intent.setClassName("com.android.settings","com.android.settings.ConfirmLockPassword");  if (mFragment != null) {    mFragment.startActivityForResult(intent,request);  } else {    mActivity.startActivityForResult(intent,request);  }  return true;}  }
class C{  public boolean isIdent(CSSName cssName,IdentValue val){  return valueByName(cssName) == val;}  }
class C{  public void testGetContextWhenWarHasNoExtension(){  WAR war=new WAR("/some/path/to/war/test");  assertEquals("test",war.getContext());}  }
class C{  public List<Interceptor> interceptors(){  return interceptors;}  }
class C{  private static boolean merge(final ClassWriter cw,int t,final int[] types,final int index){  int u=types[index];  if (u == t) {    return false;  }  if ((t & ~DIM) == NULL) {    if (u == NULL) {      return false;    }    t=NULL;  }  if (u == 0) {    types[index]=t;    return true;  }  int v;  if ((u & BASE_KIND) == OBJECT || (u & DIM) != 0) {    if (t == NULL) {      return false;    } else     if ((t & (DIM | BASE_KIND)) == (u & (DIM | BASE_KIND))) {      if ((u & BASE_KIND) == OBJECT) {        v=(t & DIM) | OBJECT | cw.getMergedType(t & BASE_VALUE,u & BASE_VALUE);      } else {        int vdim=ELEMENT_OF + (u & DIM);        v=vdim | OBJECT | cw.addType("java/lang/Object");      }    } else     if ((t & BASE_KIND) == OBJECT || (t & DIM) != 0) {      int tdim=(((t & DIM) == 0 || (t & BASE_KIND) == OBJECT) ? 0 : ELEMENT_OF) + (t & DIM);      int udim=(((u & DIM) == 0 || (u & BASE_KIND) == OBJECT) ? 0 : ELEMENT_OF) + (u & DIM);      v=Math.min(tdim,udim) | OBJECT | cw.addType("java/lang/Object");    } else {      v=TOP;    }  } else   if (u == NULL) {    v=(t & BASE_KIND) == OBJECT || (t & DIM) != 0 ? t : TOP;  } else {    v=TOP;  }  if (u != v) {    types[index]=v;    return true;  }  return false;}  }
class C{  public void addShortCut(Activity activity,String shortcutName,int resourceId){  Intent intent=new Intent();  intent.setClass(activity,activity.getClass());  intent.setAction("android.intent.action.MAIN");  intent.addCategory("android.intent.category.LAUNCHER");  Intent shortcutintent=new Intent("com.android.launcher.action.INSTALL_SHORTCUT");  shortcutintent.putExtra("duplicate",false);  shortcutintent.putExtra(Intent.EXTRA_SHORTCUT_NAME,shortcutName);  Parcelable icon=Intent.ShortcutIconResource.fromContext(activity.getApplicationContext(),resourceId);  shortcutintent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE,icon);  shortcutintent.putExtra(Intent.EXTRA_SHORTCUT_INTENT,intent);  activity.sendBroadcast(shortcutintent);}  }
class C{  private void releaseWaiters(int phase){  QNode q;  Thread t;  AtomicReference<QNode> head=(phase & 1) == 0 ? evenQ : oddQ;  while ((q=head.get()) != null && q.phase != (int)(root.state >>> PHASE_SHIFT)) {    if (head.compareAndSet(q,q.next) && (t=q.thread) != null) {      q.thread=null;      LockSupport.unpark(t);    }  }}  }
class C{  private static void SetStaticByteField(JNIEnvironment env,int classJREF,int fieldID,byte fieldValue){  if (traceJNI)   VM.sysWrite("JNI called: SetStaticByteField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    field.setByteValueUnchecked(null,fieldValue);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public static IO<String> readLine(){  return readLine(Nothing.instance);}  }
class C{  boolean canRefresh(Response response){  return response.header(HEADER_INVALID_SCOPES) == null;}  }
class C{  final void ensureActivitiesVisibleLocked(ActivityRecord top,ActivityRecord starting,String onlyThisProcess,int configChanges){  if (DEBUG_VISBILITY)   Slog.v(TAG,"ensureActivitiesVisible behind " + top + " configChanges=0x"+ Integer.toHexString(configChanges));  final int count=mHistory.size();  int i=count - 1;  while (mHistory.get(i) != top) {    i--;  }  ActivityRecord r;  boolean behindFullscreen=false;  for (; i >= 0; i--) {    if (i >= mHistory.size())     continue;    r=mHistory.get(i);    if (DEBUG_VISBILITY)     Slog.v(TAG,"Make visible? " + r + " finishing="+ r.finishing+ " state="+ r.state);    if (r.finishing) {      continue;    }    final boolean doThisProcess=onlyThisProcess == null || onlyThisProcess.equals(r.processName);    if (r != starting && doThisProcess) {      ensureActivityConfigurationLocked(r,0);    }    if (r.app == null || r.app.thread == null) {      if (onlyThisProcess == null || onlyThisProcess.equals(r.processName)) {        if (DEBUG_VISBILITY)         Slog.v(TAG,"Start and freeze screen for " + r);        if (r != starting) {          r.startFreezingScreenLocked(r.app,configChanges);        }        if (!r.visible) {          if (DEBUG_VISBILITY)           Slog.v(TAG,"Starting and making visible: " + r);          mService.mWindowManager.setAppVisibility(r.appToken,true);        }        if (r != starting) {          startSpecificActivityLocked(r,false,false);        }      }    } else     if (r.visible) {      if (DEBUG_VISBILITY)       Slog.v(TAG,"Skipping: already visible at " + r);      r.stopFreezingScreenLocked(false);    } else     if (onlyThisProcess == null) {      r.visible=true;      if (r.state != ActivityState.RESUMED && r != starting) {        if (DEBUG_VISBILITY)         Slog.v(TAG,"Making visible and scheduling visibility: " + r);        try {          mService.mWindowManager.setAppVisibility(r.appToken,true);          r.sleeping=false;          r.app.pendingUiClean=true;          r.app.thread.scheduleWindowVisibility(r.appToken,true);          r.stopFreezingScreenLocked(false);        } catch (        Exception e) {          Slog.w(TAG,"Exception thrown making visibile: " + r.intent.getComponent(),e);        }      }    }    configChanges|=r.configChangeFlags;    if (r.fullscreen) {      if (DEBUG_VISBILITY)       Slog.v(TAG,"Stopping: fullscreen at " + r);      behindFullscreen=true;      i--;      break;    }  }  while (i >= 0) {    r=mHistory.get(i);    if (DEBUG_VISBILITY)     Slog.v(TAG,"Make invisible? " + r + " finishing="+ r.finishing+ " state="+ r.state+ " behindFullscreen="+ behindFullscreen);    if (!r.finishing) {      if (behindFullscreen) {        if (r.visible) {          if (DEBUG_VISBILITY)           Slog.v(TAG,"Making invisible: " + r);          r.visible=false;          try {            mService.mWindowManager.setAppVisibility(r.appToken,false);            if ((r.state == ActivityState.STOPPING || r.state == ActivityState.STOPPED) && r.app != null && r.app.thread != null) {              if (DEBUG_VISBILITY)               Slog.v(TAG,"Scheduling invisibility: " + r);              r.app.thread.scheduleWindowVisibility(r.appToken,false);            }          } catch (          Exception e) {            Slog.w(TAG,"Exception thrown making hidden: " + r.intent.getComponent(),e);          }        } else {          if (DEBUG_VISBILITY)           Slog.v(TAG,"Already invisible: " + r);        }      } else       if (r.fullscreen) {        if (DEBUG_VISBILITY)         Slog.v(TAG,"Now behindFullscreen: " + r);        behindFullscreen=true;      }    }    i--;  }}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String createThinVolumes(String systemId,String arrayGroupId,Long luCapacityInBytes,int noOfLus,String volumeName,String formatType,String model) throws Exception {  Long luCapacityInKB=luCapacityInBytes / 1024;  InputStream responseStream=null;  String asyncTaskMessageId=null;  try {    Map<String,Object> attributeMap=new HashMap<String,Object>();    StorageArray storageArray=new StorageArray(systemId);    Pool arrayGroup=new Pool(null);    Add addOp=new Add(HDSConstants.VIRTUALVOLUME,noOfLus,null);    LogicalUnit logicalUnit=new LogicalUnit(arrayGroupId,String.valueOf(luCapacityInKB),volumeName,HDSConstants.EMULATION_OPENV,null);    attributeMap.put(HDSConstants.STORAGEARRAY,storageArray);    attributeMap.put(HDSConstants.ARRAY_GROUP,arrayGroup);    attributeMap.put(HDSConstants.ADD,addOp);    attributeMap.put(HDSConstants.LOGICALUNIT,logicalUnit);    attributeMap.put(HDSConstants.MODEL,model);    String createVolumeInputXML=InputXMLGenerationClient.getInputXMLString(HDSConstants.CREATE_THIN_VOLUMES_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);    log.info("Query to create thin Volume: {}",createVolumeInputXML);    URI endpointURI=hdsApiClient.getBaseURI();    ClientResponse response=hdsApiClient.post(endpointURI,createVolumeInputXML);    if (HttpStatus.SC_OK == response.getStatus()) {      responseStream=response.getEntityInputStream();      JavaResult result=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.SMOOKS_CONFIG_FILE);      EchoCommand command=result.getBean(EchoCommand.class);      if (HDSConstants.PROCESSING_STR.equalsIgnoreCase(command.getStatus())) {        asyncTaskMessageId=command.getMessageID();      } else       if (HDSConstants.FAILED_STR.equalsIgnoreCase(command.getStatus())) {        Error error=result.getBean(Error.class);        log.error("Thin Volume creation failed status messageID: {}",command.getMessageID());        log.error("Thin Volume creation failed with error code: {} with message: {}",error.getCode(),error.getDescription());        throw HDSException.exceptions.notAbleToCreateVolume(error.getCode(),error.getDescription());      }    } else {      log.error("Thin Volume creation failed with invalid response code {}",response.getStatus());      throw HDSException.exceptions.invalidResponseFromHDS(String.format("Thin Volume creation failed due to invalid response %1$s from server for system %2$s",response.getStatus(),systemId));    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("Exception occurred while close thin volume creation response stream");      }    }  }  return asyncTaskMessageId;}  }
class C{  private void processElements(Draft3Job parentJob,Draft3Job job) throws Draft3Exception {  Draft3JobApp app=job.getApp();  for (  Draft3InputPort port : app.getInputs()) {    port.setId(Draft2ToDraft3Converter.convertPortID(port.getId()));  }  for (  Draft3OutputPort port : app.getOutputs()) {    port.setId(Draft2ToDraft3Converter.convertPortID(port.getId()));  }  if (app.isWorkflow()) {    Draft3Workflow workflow=(Draft3Workflow)app;    if (CollectionUtils.isEmpty(workflow.getDataLinks())) {      createDataLinks(workflow);    }  }  processPorts(parentJob,job,app.getInputs());  processPorts(parentJob,job,app.getOutputs());}  }
class C{  public static void cacheInternalUserId(String consumerBean,String clientId,Long internalId){  String clientIdKey=MemCacheKeys.getUserInternalId(consumerBean,clientId);  MemCachePeer.put(clientIdKey,internalId,Constants.CACHING_TIME);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static String findLongestCurveName(){  String longestCurveName="";  for (  CurveSet curveSet : CurveSet.values()) {    List<String> curveNames=curveSet.getAllCurveNames();    for (    String curveName : curveNames) {      if (curveName.length() > longestCurveName.length()) {        longestCurveName=curveName;      }    }  }  return longestCurveName;}  }
class C{  private void houseOfCards(CommitItem item,List<Decision> decisions){  if (item == null || item.isDone()) {    return;  }  if (item.getStatus().equals(VerificationStatus.PASSED) || item.getStatus().equals(VerificationStatus.NOT_STARTED)) {    return;  }  item.setBuildNumberToStop(item.getBuildNumber());  if (item.getStatus().equals(VerificationStatus.RUNNING)) {    JenkinsUpdater.getInstance().unregister(item);    decisions.add(new Decision(item.getKey(),CollectorApi.getOnFailedByParentHandler(item)));  }  VerigreenLogger.get().log(getClass().getName(),RuntimeUtils.getCurrentMethodName(),String.format("Setting commit item status to not started (%s)",item));  try {    CommitItemUtils.createJsonFile(item,true);  } catch (  JSONException e) {    VerigreenLogger.get().error(getClass().getName(),RuntimeUtils.getCurrentMethodName(),String.format("Failed creating JSON object",e));  }catch (  IOException e) {    VerigreenLogger.get().error(getClass().getName(),RuntimeUtils.getCurrentMethodName(),String.format("Failed creating json file: " + System.getenv("VG_HOME") + "\\history.json",e));  }  item.setBuildNumber(0);  item.setRetriableCounter(0);  item.setTimeoutCounter(0);  item.setStatus(VerificationStatus.NOT_STARTED);  CollectorApi.getCommitItemContainer().save(item);  houseOfCards(item.getChild(),decisions);  item.setParent(null);  item.setChild(null);}  }
class C{  public void putTrip(String key,Trip trip){  trips.put(key,trip);}  }
class C{  protected boolean isFatalAlert(){  return (alert[0] == 2);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().pause();  return null;}  }
class C{  public CountRequest source(byte[] querySource,int offset,int length){  return source(new BytesArray(querySource,offset,length));}  }
class C{  public XYDataset createDataset(DataSequence ds,String label){  XYSeries observations=new XYSeries(label);  int n=ds.size();  for (int i=0; i < n; i++) {    observations.add(i,ds.get(i).value);  }  XYSeriesCollection collection=new XYSeriesCollection();  collection.addSeries(observations);  return collection;}  }
class C{  public static boolean isUnaryInstruction(final String mnemonic){  return mnemonic.equals(ReilHelpers.OPCODE_BISZ) || mnemonic.equals(ReilHelpers.OPCODE_STR);}  }
class C{  @Override public int read(byte[] b,int off,int len) throws IOException {  if (currentEntry != null) {    if (currentFileSize == currentEntry.getSize()) {      return -1;    } else     if ((currentEntry.getSize() - currentFileSize) < len) {      len=(int)(currentEntry.getSize() - currentFileSize);    }  }  int br=super.read(b,off,len);  if (br != -1) {    if (currentEntry != null) {      currentFileSize+=br;    }    bytesRead+=br;  }  return br;}  }
class C{  protected void onUpdateComplete(int token,Object cookie,int result){  if (localLOGV) {    Log.d(TAG,"########## default onUpdateComplete");  }}  }
class C{  public void clean(Configuration config){}  }
class C{  synchronized boolean readCertificates(){  if (metaEntries == null) {    return false;  }  Iterator<String> it=metaEntries.keySet().iterator();  while (it.hasNext()) {    String key=it.next();    if (key.endsWith(".DSA") || key.endsWith(".RSA") || key.endsWith(".EC")) {      verifyCertificate(key);      if (metaEntries == null) {        return false;      }      it.remove();    }  }  return true;}  }
class C{  static NumberFormatException forInputString(String s){  return new NumberFormatException("For input string: \"" + s + "\"");}  }
class C{  protected void _skipIncomplete() throws IOException, JsonParseException {  _tokenIncomplete=false;  int tb=_typeByte;switch ((tb >> 5) & 0x7) {case 1:    tb&=0x1F;switch (tb >> 2) {case 1:switch (tb & 0x3) {case 1:      _skipBytes(4);case 0:    while (true) {      final int end=_inputEnd;      final byte[] buf=_inputBuffer;      while (_inputPtr < end) {        if (buf[_inputPtr++] < 0) {          return;        }      }      loadMoreGuaranteed();    }case 2:  _skip7BitBinary();return;}break;case 2:switch (tb & 0x3) {case 0:_skipBytes(5);return;case 1:_skipBytes(10);return;case 2:_readUnsignedVInt();_skip7BitBinary();return;}break;}break;case 2:case 3:_skipBytes(1 + (tb & 0x3F));return;case 4:case 5:_skipBytes(2 + (tb & 0x3F));return;case 7:tb&=0x1F;switch (tb >> 2) {case 0:case 1:while (true) {final int end=_inputEnd;final byte[] buf=_inputBuffer;while (_inputPtr < end) {if (buf[_inputPtr++] == BYTE_MARKER_END_OF_STRING) {return;}}loadMoreGuaranteed();}case 2:_skip7BitBinary();return;case 7:_skipBytes(_readUnsignedVInt());return;}}_throwInternal();}  }
class C{  private void writeAttributes(OutputNode node,Object source,Section section) throws Exception {  LabelMap attributes=section.getAttributes();  for (  Label label : attributes) {    Contact contact=label.getContact();    Object value=contact.get(source);    Class expect=context.getType(type,source);    if (value == null) {      value=label.getEmpty(context);    }    if (value == null && label.isRequired()) {      throw new AttributeException("Value for %s is null in %s",label,expect);    }    writeAttribute(node,value,label);  }}  }
class C{  public static boolean streamToFile(final InputStream inputStream,final File targetFile){  return streamToFile(inputStream,targetFile,false);}  }
class C{  public Terrain(int terrainSize,float scale,float minY,float maxY,String heightMapFile,String textureFile,int textInc) throws Exception {  this.terrainSize=terrainSize;  gameItems=new GameItem[terrainSize * terrainSize];  BufferedImage heightMapImage=ImageIO.read(getClass().getResourceAsStream(heightMapFile));  verticesPerCol=heightMapImage.getWidth() - 1;  verticesPerRow=heightMapImage.getHeight() - 1;  heightMapMesh=new HeightMapMesh(minY,maxY,heightMapImage,textureFile,textInc);  boundingBoxes=new Rectangle2D.Float[terrainSize][terrainSize];  for (int row=0; row < terrainSize; row++) {    for (int col=0; col < terrainSize; col++) {      float xDisplacement=(col - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getXLength();      float zDisplacement=(row - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getZLength();      GameItem terrainBlock=new GameItem(heightMapMesh.getMesh());      terrainBlock.setScale(scale);      terrainBlock.setPosition(xDisplacement,0,zDisplacement);      gameItems[row * terrainSize + col]=terrainBlock;      boundingBoxes[row][col]=getBoundingBox(terrainBlock);    }  }}  }
class C{  public static _FilterType fromString(final String value) throws SOAPSerializationException {  return (_FilterType)Enumeration.fromString(value,_FilterType.VALUES_TO_INSTANCES);}  }
class C{  public void add(LeafAtom atom){  leafChildren.add(atom);}  }
class C{  private final Name addName(int[] quads,int qlen,int lastQuadBytes) throws JsonParseException {  int byteLen=(qlen << 2) - 4 + lastQuadBytes;  int lastQuad;  if (lastQuadBytes < 4) {    lastQuad=quads[qlen - 1];    quads[qlen - 1]=(lastQuad << ((4 - lastQuadBytes) << 3));  } else {    lastQuad=0;  }  char[] cbuf=_textBuffer.emptyAndGetCurrentSegment();  int cix=0;  for (int ix=0; ix < byteLen; ) {    int ch=quads[ix >> 2];    int byteIx=(ix & 3);    ch=(ch >> ((3 - byteIx) << 3)) & 0xFF;    ++ix;    if (ch > 127) {      int needed;      if ((ch & 0xE0) == 0xC0) {        ch&=0x1F;        needed=1;      } else       if ((ch & 0xF0) == 0xE0) {        ch&=0x0F;        needed=2;      } else       if ((ch & 0xF8) == 0xF0) {        ch&=0x07;        needed=3;      } else {        _reportInvalidInitial(ch);        needed=ch=1;      }      if ((ix + needed) > byteLen) {        _reportInvalidEOF(" in field name");      }      int ch2=quads[ix >> 2];      byteIx=(ix & 3);      ch2=(ch2 >> ((3 - byteIx) << 3));      ++ix;      if ((ch2 & 0xC0) != 0x080) {        _reportInvalidOther(ch2);      }      ch=(ch << 6) | (ch2 & 0x3F);      if (needed > 1) {        ch2=quads[ix >> 2];        byteIx=(ix & 3);        ch2=(ch2 >> ((3 - byteIx) << 3));        ++ix;        if ((ch2 & 0xC0) != 0x080) {          _reportInvalidOther(ch2);        }        ch=(ch << 6) | (ch2 & 0x3F);        if (needed > 2) {          ch2=quads[ix >> 2];          byteIx=(ix & 3);          ch2=(ch2 >> ((3 - byteIx) << 3));          ++ix;          if ((ch2 & 0xC0) != 0x080) {            _reportInvalidOther(ch2 & 0xFF);          }          ch=(ch << 6) | (ch2 & 0x3F);        }      }      if (needed > 2) {        ch-=0x10000;        if (cix >= cbuf.length) {          cbuf=_textBuffer.expandCurrentSegment();        }        cbuf[cix++]=(char)(0xD800 + (ch >> 10));        ch=0xDC00 | (ch & 0x03FF);      }    }    if (cix >= cbuf.length) {      cbuf=_textBuffer.expandCurrentSegment();    }    cbuf[cix++]=(char)ch;  }  String baseName=new String(cbuf,0,cix);  if (lastQuadBytes < 4) {    quads[qlen - 1]=lastQuad;  }  return _symbols.addName(baseName,quads,qlen);}  }
class C{  public int readByteUnsigned() throws IOException {  require(1);  return buffer[position++] & 0xFF;}  }
class C{  public void loadMultiply(Matrix2f lhs,Matrix2f rhs){  for (int i=0; i < 2; i++) {    float ri0=0;    float ri1=0;    for (int j=0; j < 2; j++) {      float rhs_ij=rhs.get(i,j);      ri0+=lhs.get(j,0) * rhs_ij;      ri1+=lhs.get(j,1) * rhs_ij;    }    set(i,0,ri0);    set(i,1,ri1);  }}  }
class C{  protected void notifyReceivedAck(MqttAck ack) throws MqttException {  final String methodName="notifyReceivedAck";  this.lastInboundActivity=System.currentTimeMillis();  log.fine(CLASS_NAME,methodName,"627",new Object[]{new Integer(ack.getMessageId()),ack});  MqttToken token=tokenStore.getToken(ack);  MqttException mex=null;  if (token == null) {    log.fine(CLASS_NAME,methodName,"662",new Object[]{new Integer(ack.getMessageId())});  } else   if (ack instanceof MqttPubRec) {    MqttPubRel rel=new MqttPubRel((MqttPubRec)ack);    this.send(rel,token);  } else   if (ack instanceof MqttPubAck || ack instanceof MqttPubComp) {    notifyResult(ack,token,mex);  } else   if (ack instanceof MqttPingResp) {synchronized (pingOutstandingLock) {      pingOutstanding=Math.max(0,pingOutstanding - 1);      notifyResult(ack,token,mex);      if (pingOutstanding == 0) {        tokenStore.removeToken(ack);      }    }    log.fine(CLASS_NAME,methodName,"636",new Object[]{new Integer(pingOutstanding)});  } else   if (ack instanceof MqttConnack) {    int rc=((MqttConnack)ack).getReturnCode();    if (rc == 0) {synchronized (queueLock) {        if (cleanSession) {          clearState();          tokenStore.saveToken(token,ack);        }        inFlightPubRels=0;        actualInFlight=0;        restoreInflightMessages();        connected();      }    } else {      mex=ExceptionHelper.createMqttException(rc);      throw mex;    }    clientComms.connectComplete((MqttConnack)ack,mex);    notifyResult(ack,token,mex);    tokenStore.removeToken(ack);synchronized (queueLock) {      queueLock.notifyAll();    }  } else {    notifyResult(ack,token,mex);    releaseMessageId(ack.getMessageId());    tokenStore.removeToken(ack);  }  checkQuiesceLock();}  }
class C{  @Override public Serializable disassemble(Object value) throws HibernateException {  return (String)this.deepCopy(value);}  }
class C{  public Matrix3f rotateZ(float ang){  return rotateZ(ang,this);}  }
class C{  public void put(String key,File file) throws FileNotFoundException {  put(key,file,null,null);}  }
class C{  public synchronized void removeFlavorListener(FlavorListener listener){  if (listener == null || flavorListeners == null) {    return;  }  flavorListeners.remove(listener);}  }
class C{  public static double nextExponential(double lambda){synchronized (random) {    return -1.0 * Math.log(1 - random.nextDouble()) / lambda;  }}  }
class C{  public static void i(String tag,String s,Throwable e){  if (LOG.INFO >= LOGLEVEL)   Log.i(tag,s,e);}  }
class C{  public double stDev(double[] series){  double num0=0D;  double sum=0D;  int count=0;  for (  double tp : series) {    num0=num0 + tp * tp;    sum=sum + tp;    count+=1;  }  double len=((Integer)count).doubleValue();  return Math.sqrt((len * num0 - sum * sum) / (len * (len - 1)));}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.451 -0400",hash_original_method="C244C034F5D60E2DBFF912D07EE9EFE9",hash_generated_method="DED07B33CEBD3C0F8835ED2ECA4DED35") @Override public boolean accept(File file){  String name=file.getName();  for (  String wildcard : wildcards) {    if (FilenameUtils.wildcardMatch(name,wildcard,caseSensitivity)) {      return true;    }  }  return false;}  }
class C{  public PublishingToMarketplaceNotPermittedException(){  super();}  }
class C{  public static ValidationException parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ValidationException object=new ValidationException();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {      while (!reader.isEndElement())       reader.next();      return object;    }    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","ValidationException").equals(reader.getName())) {          nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");          if ("true".equals(nillableValue) || "1".equals(nillableValue)) {            object.setValidationException(null);            reader.next();          } else {            object.setValidationException(ValidationExceptionBean.Factory.parse(reader));          }        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public void write(ByteCodeWriter out) throws IOException {  out.writeUTF8Const(getName());  out.writeIntUTF8(_value);}  }
class C{  public static boolean deepEquals(ExprNode nodeOne,ExprNode nodeTwo){  if (nodeOne.getChildNodes().length != nodeTwo.getChildNodes().length) {    return false;  }  if (!nodeOne.equalsNode(nodeTwo)) {    return false;  }  for (int i=0; i < nodeOne.getChildNodes().length; i++) {    ExprNode childNodeOne=nodeOne.getChildNodes()[i];    ExprNode childNodeTwo=nodeTwo.getChildNodes()[i];    if (!ExprNodeUtility.deepEquals(childNodeOne,childNodeTwo)) {      return false;    }  }  return true;}  }
class C{  public synchronized void removePanListener(PanListener listener){  mPanListeners.remove(listener);}  }
class C{  private void newRuleSelection(MigrationRule<?> rule){  this.selectedRule=rule;  if (null == rule) {    editorChooser.setNoEditor();    return;  }  editorChooser.setEditorFor(rule.getSource());}  }
class C{  public static GetNumberOfServiceSessionsResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  GetNumberOfServiceSessionsResponse object=new GetNumberOfServiceSessionsResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"getNumberOfServiceSessionsResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (GetNumberOfServiceSessionsResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","return").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.set_return(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));      reader.next();    } else {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @Override public void draw(Graphics2D g){  drawRectangle(g,(pressed) ? Color.orange : Color.white,Color.black);  Rectangle r=getBounds();  g.drawLine(r.x,r.y,r.x + r.width,r.y + r.height);  g.drawLine(r.x + r.width,r.y,r.x,r.y + r.height);}  }
class C{  public boolean isChanged(String field){  return (_changed != null && _changed.contains(field));}  }
class C{  public FilterQuery(final int count,final long[] follow,final String[] track){  this();  this.count=count;  this.follow=follow;  this.track=track;}  }
class C{  public static String makeInitCap(String name){  int i;  StringBuilder icap=new StringBuilder(name);  int nlen=icap.length();  boolean cap_flag=true;  for (i=0; i < nlen; ++i) {    char c=icap.charAt(i);    if (Character.isLetterOrDigit(c)) {      if (Character.isLowerCase(c)) {        if (cap_flag)         icap.setCharAt(i,Character.toUpperCase(c));      } else       if (Character.isUpperCase(c)) {        if (!cap_flag)         icap.setCharAt(i,Character.toLowerCase(c));      }      cap_flag=false;    } else {      cap_flag=true;    }  }  return (icap.toString());}  }
class C{  public static String parseCharacterEncoding(CharSequence contentTypeUtf8){  if (contentTypeUtf8 == null)   return (null);  String contentType=contentTypeUtf8.toString();  int start=contentType.indexOf("charset=");  if (start < 0)   return (null);  String encoding=contentType.substring(start + 8);  int end=encoding.indexOf(';');  if (end >= 0)   encoding=encoding.substring(0,end);  encoding=encoding.trim();  if ((encoding.length() > 2) && (encoding.startsWith("\"")) && (encoding.endsWith("\"")))   encoding=encoding.substring(1,encoding.length() - 1);  return (encoding.trim());}  }
class C{  private AssociationRequest createAssociationRequest(AssociationSessionType type,URL opUrl){  try {    if (_minAssocSessEnc.isBetter(type))     return null;    AssociationRequest assocReq=null;    DiffieHellmanSession dhSess;    if (type.getHAlgorithm() != null) {      dhSess=DiffieHellmanSession.create(type,_dhParams);      if (DiffieHellmanSession.isDhSupported(type) && Association.isHmacSupported(type.getAssociationType()))       assocReq=AssociationRequest.createAssociationRequest(type,dhSess);    } else     if (opUrl.getProtocol().equals("https") && Association.isHmacSupported(type.getAssociationType()))     assocReq=AssociationRequest.createAssociationRequest(type);    if (assocReq == null)     _log.warn("Could not create association of type: " + type);    return assocReq;  } catch (  OpenIDException e) {    _log.error("Error trying to create association request.",e);    return null;  }}  }
class C{  public void removeBlockQuotePrefix(){  Line line=this.lines;  while (line != null) {    if (!line.isEmpty) {      if (line.value.charAt(line.leading) == '>') {        int rem=line.leading + 1;        if (line.leading + 1 < line.value.length() && line.value.charAt(line.leading + 1) == ' ') {          rem++;        }        line.value=line.value.substring(rem);        line.initLeading();      }    }    line=line.next;  }}  }
class C{  public void keyPressed(final int keyCode){  if (impl.getCurrentForm() == null) {    return;  }  addSingleArgumentEvent(KEY_PRESSED,keyCode);  lastInteractionWasKeypad=lastInteractionWasKeypad || (keyCode != MenuBar.leftSK && keyCode != MenuBar.clearSK && keyCode != MenuBar.backSK);  keyRepeatCharged=(keyCode >= 0 || getGameAction(keyCode) > 0) || keyCode == impl.getClearKeyCode();  longPressCharged=keyRepeatCharged;  longKeyPressTime=System.currentTimeMillis();  keyRepeatValue=keyCode;  nextKeyRepeatEvent=System.currentTimeMillis() + keyRepeatInitialIntervalTime;  previousKeyPressed=lastKeyPressed;  lastKeyPressed=keyCode;}  }
class C{  public String testOp(String p1,int p2){  log.info("testOp called with: " + p1 + " "+ p2);  return innerService.join(p1,p2);}  }
class C{  public void next(){  SetupWindow newWindow=_currentWindow.getNext();  try {    _currentWindow.applySettings(true);    show(newWindow);  } catch (  ApplySettingsException ase) {    if (ase.getMessage() != null && ase.getMessage().length() > 0)     GUIMediator.showError(ase.getMessage());  }}  }
class C{  public void removeDisplayName(){  displayName=null;}  }
class C{  public void removeLast(){  DataChangeEvent[] events;synchronized (this) {    int row=getRowCount() - 1;    Row r=new Row(this,row);    events=new DataChangeEvent[getColumnCount()];    for (int col=0; col < events.length; col++) {      events[col]=new DataChangeEvent(this,col,row,r.get(col),null);    }    rows.remove(row);  }  notifyDataRemoved(events);}  }
class C{  public E element(){  E o=peek();  if (null == o) {    throw new NoSuchElementException();  }  return o;}  }
class C{  @DSComment("Scroller") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:11.183 -0500",hash_original_method="81DB7D22C5A12E34B7101A322373D8F4",hash_generated_method="42CF4D719D6A7D98303F02A1CB9DDB63") public void startScroll(int startX,int startY,int dx,int dy,int duration){  mMode=SCROLL_MODE;  mFinished=false;  mDuration=duration;  mStartTime=AnimationUtils.currentAnimationTimeMillis();  mStartX=startX;  mStartY=startY;  mFinalX=startX + dx;  mFinalY=startY + dy;  mDeltaX=dx;  mDeltaY=dy;  mDurationReciprocal=1.0f / (float)mDuration;}  }
class C{  public static void clearIP(){  ipMap.clear();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.MODIFIABLE_ELEMENT__DECLARED_MODIFIERS:    return getDeclaredModifiers();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static boolean isFloat(Class type) throws Exception {  if (type == Double.class) {    return true;  }  if (type == Float.class) {    return true;  }  if (type == float.class) {    return true;  }  if (type == double.class) {    return true;  }  return false;}  }
class C{  public String convertTemplate(String template){  String contents=StringUtils.fileContentsToString(template);  if (!contents.endsWith("\n")) {    contents+="\n";  }  Perl5Util perl=new Perl5Util();  for (int i=0; i < perLineREs.length; i+=2) {    contents=perl.substitute(makeSubstRE(i),contents);  }  if (perl.match("m/javascript/i",contents)) {    contents=perl.substitute("s/\n}/\n#end/g",contents);  } else {    contents=perl.substitute("s/(\n\\s*)}/$1#end/g",contents);    contents=perl.substitute("s/#end\\s*\n\\s*#else/#else/g",contents);  }  return contents;}  }
class C{  private boolean isSessionOriginating(ContentSharingSession session){  return (session instanceof OriginatingImageTransferSession || session instanceof OriginatingVideoStreamingSession);}  }
class C{  public static long gen(){  return m_guid.incrementAndGet();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:13.101 -0500",hash_original_method="1A554E4FCE47CCCA17DD555DAEE432BA",hash_generated_method="3BC6E3E02B5FDA6E0E22C4C7D76E833D") boolean isBetterCandidate(int direction,Rect source,Rect rect1,Rect rect2){  if (!isCandidate(source,rect1,direction)) {    return false;  }  if (!isCandidate(source,rect2,direction)) {    return true;  }  if (beamBeats(direction,source,rect1,rect2)) {    return true;  }  if (beamBeats(direction,source,rect2,rect1)) {    return false;  }  return (getWeightedDistanceFor(majorAxisDistance(direction,source,rect1),minorAxisDistance(direction,source,rect1)) < getWeightedDistanceFor(majorAxisDistance(direction,source,rect2),minorAxisDistance(direction,source,rect2)));}  }
class C{  public Object put(int key,Object value){  int bucket=Math.abs(key) % table.length;  for (Entry e=table[bucket]; e != null; e=e.next) {    if (e.key == key) {      Object old=e.value;      e.value=value;      return old;    }  }  if (this.count >= this.threshold) {    rehash();    bucket=Math.abs(key) % table.length;  }  Entry e=new Entry();  e.key=key;  e.value=value;  e.next=table[bucket];  table[bucket]=e;  count++;  return null;}  }
class C{  public SexecItemProviderAdapterFactory(){  supportedTypes.add(IEditingDomainItemProvider.class);  supportedTypes.add(IStructuredItemContentProvider.class);  supportedTypes.add(ITreeItemContentProvider.class);  supportedTypes.add(IItemLabelProvider.class);  supportedTypes.add(IItemPropertySource.class);}  }
class C{  public boolean isSecure(){  return mIsSecure;}  }
class C{  private String _serializeArray(Array array,Set<Object> done) throws ConverterException {  return _serializeList(array.toList(),done);}  }
class C{  public PacketExtension parseExtension(XmlPullParser parser) throws Exception {  String workgroupJID=parser.getAttributeValue("","jid");  parser.next();  return new WorkgroupInformation(workgroupJID);}  }
class C{  @SuppressWarnings("rawtypes") public static void main(final String[] args) throws Exception {  new SAILGASRunner(args).call();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.102 -0500",hash_original_method="737D447D9524E38B88FDFD3CE0E844F0",hash_generated_method="F2B7ACF724054E38903F869AC10500B5") public synchronized StringBuffer deleteCharAt(int location){  deleteCharAt0(location);  return this;}  }
class C{  public String toHexString(){  StringBuffer buf=new StringBuffer();  buf.append("0x" + Integer.toHexString(0xFF & _dataChars[0]));  for (int i=1; i < _nDataChars; i++) {    buf.append(", 0x" + Integer.toHexString(0xFF & _dataChars[i]));  }  return buf.toString();}  }
class C{  public void onSwapWrite(){  onSwapWrite(1);}  }
class C{  boolean validateAction(){  int itemType=_actionItemTypeBox.getSelectedIndex();  int actionType=Conditional.ACTION_NONE;  int selection=_actionTypeBox.getSelectedIndex();  if (selection == 0) {    javax.swing.JOptionPane.showMessageDialog(editConditionalFrame,rbx.getString("makeSelection"),Bundle.getMessage("WarningTitle"),javax.swing.JOptionPane.WARNING_MESSAGE);    return false;  }  String name=_actionNameField.getText().trim();  String actionString=_shortActionString.getText().trim();  _curAction.setActionString("");  _curAction.setActionData(-1);  boolean referenceByMemory=false;  if (name.length() > 0 && name.charAt(0) == '@') {    String memName=name.substring(1);    if (!confirmIndirectMemory(memName)) {      return false;    }    memName=validateMemoryReference(memName);    if (memName == null) {      return false;    }    referenceByMemory=true;  }switch (itemType) {case Conditional.ITEM_TYPE_SENSOR:    if (!referenceByMemory) {      name=validateSensorReference(name);      if (name == null) {        return false;      }    }  actionType=Conditional.ITEM_TO_SENSOR_ACTION[selection - 1];if ((actionType == Conditional.ACTION_RESET_DELAYED_SENSOR) || (actionType == Conditional.ACTION_DELAYED_SENSOR)) {  if (!validateTimeReference(actionType,actionString)) {    return (false);  }  _curAction.setActionString(actionString);}if ((actionType == Conditional.ACTION_SET_SENSOR) || (actionType == Conditional.ACTION_RESET_DELAYED_SENSOR) || (actionType == Conditional.ACTION_DELAYED_SENSOR)) {if (_actionBox.getSelectedIndex() == 0) {  _curAction.setActionData(Sensor.ACTIVE);} else if (_actionBox.getSelectedIndex() == 1) {  _curAction.setActionData(Sensor.INACTIVE);} else {  _curAction.setActionData(Route.TOGGLE);}}_actionNameField.setText(name);_curAction.setDeviceName(name);break;case Conditional.ITEM_TYPE_TURNOUT:if (!referenceByMemory) {name=validateTurnoutReference(name);if (name == null) {return false;}}actionType=Conditional.ITEM_TO_TURNOUT_ACTION[selection - 1];if ((actionType == Conditional.ACTION_RESET_DELAYED_TURNOUT) || (actionType == Conditional.ACTION_DELAYED_TURNOUT)) {if (!validateTimeReference(actionType,actionString)) {return (false);}_curAction.setActionString(actionString);}if ((actionType == Conditional.ACTION_SET_TURNOUT) || (actionType == Conditional.ACTION_RESET_DELAYED_TURNOUT) || (actionType == Conditional.ACTION_DELAYED_TURNOUT)) {if (_actionBox.getSelectedIndex() == 0) {_curAction.setActionData(Turnout.CLOSED);} else if (_actionBox.getSelectedIndex() == 1) {_curAction.setActionData(Turnout.THROWN);} else {_curAction.setActionData(Route.TOGGLE);}} else if (actionType == Conditional.ACTION_LOCK_TURNOUT) {if (_actionBox.getSelectedIndex() == 0) {_curAction.setActionData(Turnout.UNLOCKED);} else if (_actionBox.getSelectedIndex() == 1) {_curAction.setActionData(Turnout.LOCKED);} else {_curAction.setActionData(Route.TOGGLE);}}_actionNameField.setText(name);_curAction.setDeviceName(name);break;case Conditional.ITEM_TYPE_LIGHT:if (!referenceByMemory) {name=validateLightReference(name);if (name == null) {return false;}}actionType=Conditional.ITEM_TO_LIGHT_ACTION[selection - 1];if (actionType == Conditional.ACTION_SET_LIGHT_INTENSITY) {Light lgtx=getLight(name);if (lgtx == null) {return false;}if (!lgtx.isIntensityVariable()) {javax.swing.JOptionPane.showMessageDialog(editConditionalFrame,java.text.MessageFormat.format(rbx.getString("Error45"),new Object[]{name}),Bundle.getMessage("ErrorTitle"),javax.swing.JOptionPane.ERROR_MESSAGE);return (false);}if (!validateIntensityReference(actionType,actionString)) {return (false);}_curAction.setActionString(actionString);} else if (actionType == Conditional.ACTION_SET_LIGHT_TRANSITION_TIME) {Light lgtx=getLight(name);if (lgtx == null) {return false;}if (!lgtx.isTransitionAvailable()) {javax.swing.JOptionPane.showMessageDialog(editConditionalFrame,java.text.MessageFormat.format(rbx.getString("Error40"),new Object[]{name}),Bundle.getMessage("ErrorTitle"),javax.swing.JOptionPane.ERROR_MESSAGE);return (false);}if (!validateTimeReference(actionType,actionString)) {return (false);}_curAction.setActionString(actionString);} else if (actionType == Conditional.ACTION_SET_LIGHT) {if (_actionBox.getSelectedIndex() == 0) {_curAction.setActionData(Light.ON);} else if (_actionBox.getSelectedIndex() == 1) {_curAction.setActionData(Light.OFF);} else {_curAction.setActionData(Route.TOGGLE);}}_actionNameField.setText(name);_curAction.setDeviceName(name);break;case Conditional.ITEM_TYPE_SIGNALHEAD:if (!referenceByMemory) {name=validateSignalHeadReference(name);if (name == null) {return false;}}actionType=Conditional.ITEM_TO_SIGNAL_HEAD_ACTION[selection - 1];if (actionType == Conditional.ACTION_SET_SIGNAL_APPEARANCE) {String appStr=(String)_actionBox.getSelectedItem();_curAction.setActionData(DefaultConditionalAction.stringToActionData(appStr));_curAction.setActionString(appStr);}_actionNameField.setText(name);_curAction.setDeviceName(name);break;case Conditional.ITEM_TYPE_SIGNALMAST:if (!referenceByMemory) {name=validateSignalMastReference(name);if (name == null) {return false;}}actionType=Conditional.ITEM_TO_SIGNAL_MAST_ACTION[selection - 1];if (actionType == Conditional.ACTION_SET_SIGNALMAST_ASPECT) {_curAction.setActionString((String)_actionBox.getSelectedItem());}_actionNameField.setText(name);_curAction.setDeviceName(name);break;case Conditional.ITEM_TYPE_MEMORY:if (referenceByMemory) {javax.swing.JOptionPane.showMessageDialog(_editActionFrame,rbx.getString("Warn6"),Bundle.getMessage("WarningTitle"),javax.swing.JOptionPane.WARNING_MESSAGE);return false;}name=validateMemoryReference(name);if (name == null) {return false;}actionType=Conditional.ITEM_TO_MEMORY_ACTION[selection - 1];if (actionType == Conditional.ACTION_COPY_MEMORY) {actionString=validateMemoryReference(actionString);if (actionString == null) {return false;}}_actionNameField.setText(name);_curAction.setDeviceName(name);_curAction.setActionString(actionString);break;case Conditional.ITEM_TYPE_LOGIX:if (!referenceByMemory) {name=validateLogixReference(name);if (name == null) {return false;}}actionType=Conditional.ITEM_TO_LOGIX_ACTION[selection - 1];_actionNameField.setText(name);_curAction.setDeviceName(name);break;case Conditional.ITEM_TYPE_WARRANT:if (!referenceByMemory) {name=validateWarrantReference(name);if (name == null) {return false;}}actionType=Conditional.ITEM_TO_WARRANT_ACTION[selection - 1];_actionNameField.setText(name);_curAction.setDeviceName(name);if (actionType == Conditional.ACTION_CONTROL_TRAIN) {if (_actionBox.getSelectedIndex() == 0) {_curAction.setActionData(Warrant.HALT);} else if (_actionBox.getSelectedIndex() == 1) {_curAction.setActionData(Warrant.RESUME);} else {_curAction.setActionData(Warrant.ABORT);}} else if (actionType == Conditional.ACTION_SET_TRAIN_ID || actionType == Conditional.ACTION_SET_TRAIN_NAME || actionType == Conditional.ACTION_THROTTLE_FACTOR) {_curAction.setActionString(actionString);}break;case Conditional.ITEM_TYPE_OBLOCK:if (!referenceByMemory) {name=validateOBlockReference(name);if (name == null) {return false;}}actionType=Conditional.ITEM_TO_OBLOCK_ACTION[selection - 1];_actionNameField.setText(name);_curAction.setDeviceName(name);if (actionType == Conditional.ACTION_SET_BLOCK_VALUE) {_curAction.setActionString(actionString);}break;case Conditional.ITEM_TYPE_CLOCK:actionType=Conditional.ITEM_TO_CLOCK_ACTION[selection - 1];if (actionType == Conditional.ACTION_SET_FAST_CLOCK_TIME) {int time=parseTime(_longActionString.getText().trim());if (time < 0) {return (false);}_curAction.setActionData(time);}break;case Conditional.ITEM_TYPE_AUDIO:actionType=Conditional.ITEM_TO_AUDIO_ACTION[selection - 1];if (actionType == Conditional.ACTION_PLAY_SOUND) {_curAction.setActionString(_longActionString.getText().trim());} else if (actionType == Conditional.ACTION_CONTROL_AUDIO) {if (!referenceByMemory) {name=validateAudioReference(name);if (name == null) {return false;}}_actionNameField.setText(name);_curAction.setDeviceName(name);switch (_actionBox.getSelectedIndex()) {case 0:_curAction.setActionData(Audio.CMD_PLAY);break;case 1:_curAction.setActionData(Audio.CMD_STOP);break;case 2:_curAction.setActionData(Audio.CMD_PLAY_TOGGLE);break;case 3:_curAction.setActionData(Audio.CMD_PAUSE);break;case 4:_curAction.setActionData(Audio.CMD_RESUME);break;case 5:_curAction.setActionData(Audio.CMD_PAUSE_TOGGLE);break;case 6:_curAction.setActionData(Audio.CMD_REWIND);break;case 7:_curAction.setActionData(Audio.CMD_FADE_IN);break;case 8:_curAction.setActionData(Audio.CMD_FADE_OUT);break;case 9:_curAction.setActionData(Audio.CMD_RESET_POSITION);break;default :log.warn("Unexpected _actionBox.getSelectedIndex() of {}",_actionBox.getSelectedIndex());break;}}break;case Conditional.ITEM_TYPE_SCRIPT:actionType=Conditional.ITEM_TO_SCRIPT_ACTION[selection - 1];if (actionType == Conditional.ACTION_RUN_SCRIPT) {_curAction.setActionString(_longActionString.getText().trim());} else if (actionType == Conditional.ACTION_JYTHON_COMMAND) {_curAction.setActionString(_shortActionString.getText().trim());}break;case Conditional.ITEM_TYPE_OTHER:actionType=Conditional.ITEM_TO_OTHER_ACTION[selection - 1];if (actionType == Conditional.ACTION_TRIGGER_ROUTE) {if (!referenceByMemory) {name=validateRouteReference(name);if (name == null) {return false;}}_actionNameField.setText(name);_curAction.setDeviceName(name);}break;default :break;}_curAction.setType(actionType);if (actionType != Conditional.ACTION_NONE) {_curAction.setOption(_actionOptionBox.getSelectedIndex() + 1);} else {_curAction.setOption(0);}_editActionFrame.pack();return (true);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public InitiatorRestRep deregister(URI id){  return client.post(InitiatorRestRep.class,getIdUrl() + "/deregister",id);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public DataSourceConnectionPropertyScriptCommand(Configuration configuration,String resourcePath,DataSource dataSource,Entry<Object,Object> driverProperty){  super(configuration,resourcePath);  this.ds=dataSource;  this.driverProperty=driverProperty;}  }
class C{  public void close() throws IOException {  try {    pseudoTcp.close(true);    onTcpClosed(pseudoTcp,null);    socket.close();    joinAllThreads();  } catch (  InterruptedException ex) {    throw new IOException("Closing socket interrupted",ex);  }}  }
class C{  @DSModeled(DSC.SAFE) public void show(){}  }
class C{  public Object read(InputNode node) throws Exception {  Instance type=factory.getInstance(node);  Object list=type.getInstance();  if (!type.isReference()) {    return read(node,list);  }  return list;}  }
class C{  public static void validateOid(int[] oid){  if (oid == null) {    throw new NullPointerException("oid == null");  }  if (oid.length < 2) {    throw new IllegalArgumentException("OID MUST have at least 2 subidentifiers");  }  if (oid[0] > 2) {    throw new IllegalArgumentException("Valid values for first subidentifier are 0, 1 and 2");  } else   if (oid[0] != 2 && oid[1] > 39) {    throw new IllegalArgumentException("If the first subidentifier has 0 or 1 value the second subidentifier value MUST be less than 40");  }}  }
class C{  public void start(int conditions) throws IOException {}  }
class C{  public boolean isStatic(){  int acc=info.getAccessFlags();  return (acc & AccessFlag.STATIC) != 0;}  }
class C{  @Override public Set<Action> actions(Object s){  Set<Action> result=new LinkedHashSet<Action>();  MapNode from=(MapNode)s;  for (  WayRef wref : from.getWayRefs()) {    if (filter == null || filter.isAccepted(wref.getWay())) {      MapWay way=wref.getWay();      int nodeIdx=wref.getNodeIdx();      List<MapNode> wayNodes=way.getNodes();      MapNode to;      if (oneWayMode != OneWayMode.TRAVEL_BACKWARDS || !way.isOneway())       for (int idx=nodeIdx + 1; idx < wayNodes.size(); idx++) {        to=wayNodes.get(idx);        if (goal == null || goal == to || to.getWayRefs().size() > 1 || idx == wayNodes.size() - 1) {          result.add(new OsmMoveAction(way,nodeIdx,idx));          break;        }      }      if (oneWayMode != OneWayMode.TRAVEL_FORWARD || !way.isOneway()) {        for (int idx=nodeIdx - 1; idx >= 0; idx--) {          to=wayNodes.get(idx);          if (goal == null || goal == to || to.getWayRefs().size() > 1 || idx == 0) {            result.add(new OsmMoveAction(way,nodeIdx,idx));            break;          }        }      }    }  }  return result;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (!Sage.EMBEDDED)   return null;  if (Sage.DBG)   System.out.println("Preparing the system for a firmware load...free all the memory we can...");  if (Sage.DBG)   System.out.println("MemStats-1: Used=" + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1000000 + "MB Total=" + Runtime.getRuntime().totalMemory() / 1000000 + "MB Max=" + Runtime.getRuntime().maxMemory() / 1000000 + "MB");  Seeker.getInstance().disableLibraryScanning();  IOUtils.exec2(new String[]{"sh","-c","kill `pidof SGMRecording`"},true);  if (stack.getUIMgrSafe() != null)   stack.getUIMgrSafe().clearMenuCache();  Wizard.getInstance().freeAllDBMemory();  if (Sage.DBG)   System.out.println("MemStats-2: Used=" + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1000000 + "MB Total=" + Runtime.getRuntime().totalMemory() / 1000000 + "MB Max=" + Runtime.getRuntime().maxMemory() / 1000000 + "MB");  System.gc();  try {    Thread.sleep(750);  } catch (  Exception e) {  }  if (Sage.DBG)   System.out.println("MemStats-3: Used=" + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1000000 + "MB Total=" + Runtime.getRuntime().totalMemory() / 1000000 + "MB Max=" + Runtime.getRuntime().maxMemory() / 1000000 + "MB");  System.gc();  try {    Thread.sleep(750);  } catch (  Exception e) {  }  if (Sage.DBG)   System.out.println("MemStats-4: Used=" + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1000000 + "MB Total=" + Runtime.getRuntime().totalMemory() / 1000000 + "MB Max=" + Runtime.getRuntime().maxMemory() / 1000000 + "MB");  System.gc();  try {    Thread.sleep(750);  } catch (  Exception e) {  }  if (Sage.DBG)   System.out.println("MemStats-5: Used=" + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1000000 + "MB Total=" + Runtime.getRuntime().totalMemory() / 1000000 + "MB Max=" + Runtime.getRuntime().maxMemory() / 1000000 + "MB");  return null;}  }
class C{  public RelativePath clone(){  RelativePath result=new RelativePath();  if (Elements != null) {    result.Elements=new RelativePathElement[Elements.length];    for (int i=0; i < Elements.length; i++)     result.Elements[i]=Elements[i].clone();  }  return result;}  }
class C{  public void enableOnEditInProgress(boolean enable){  ResourceActionAdapter action=(ResourceActionAdapter)getAction();  if (enable) {    action.setCondition(ConditionalAction.EDIT_IN_PROGRESS,ConditionalAction.DONT_CARE);  } else {    action.setCondition(ConditionalAction.EDIT_IN_PROGRESS,ConditionalAction.DISALLOWED);  }}  }
class C{  public DefaultSignedAttributeTableGenerator(){  table=new Hashtable();}  }
class C{  void addAfter(Element here,Object obj){  Element e=new Element(obj);  e.next=here.next;  here.next.prev=e;  here.next=e;  e.prev=here;  if (last == here) {    last=e;  }  this.size++;}  }
class C{  private boolean invokeFunction(String name,Object... cmd){  for (  EngineInfo engine : engines) {    try {      Object result=engine.getEngine().invokeFunction(name,cmd);      if (null != result && result instanceof Boolean) {        if (!((Boolean)result).booleanValue()) {          return false;        }      }    } catch (    ScriptException e) {      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unable to invoke function " + name + " in script: "+ engine.getScriptFile().getFileName()+ ": "+ e.getMessage(),e);    }catch (    NoSuchMethodException e) {      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unable to invoke function " + name + " in script: "+ engine.getScriptFile().getFileName()+ ": "+ e.getMessage(),e);    }  }  return true;}  }
class C{  public void failRestore(SnapshotId snapshotId,ShardId shardId){  logger.debug("[{}] failed to restore shard  [{}]",snapshotId,shardId);  UpdateIndexShardRestoreStatusRequest request=new UpdateIndexShardRestoreStatusRequest(snapshotId,shardId,new ShardRestoreStatus(clusterService.state().nodes().localNodeId(),RestoreInProgress.State.FAILURE));  transportService.sendRequest(clusterService.state().nodes().masterNode(),UPDATE_RESTORE_ACTION_NAME,request,EmptyTransportResponseHandler.INSTANCE_SAME);}  }
class C{  public void store(byte val){  SimulatedMemory.setByte(this,val);}  }
class C{  public boolean isSetNodeId(){  return EncodingUtils.testBit(__isset_bitfield,__NODEID_ISSET_ID);}  }
class C{  static int firstIllegalCharacter(String source){  for (int i=0; i < source.length(); i++) {    if (isLegal(source.charAt(i)) == false) {      return i;    }  }  return -1;}  }
class C{  public boolean isAcknowledged(){  return acknowledged;}  }
class C{  public AttributeInitializer(int capacity){  keys=new String[capacity * 3];}  }
class C{  public static String regString(int reg){  return PREFIX + reg;}  }
class C{  public TriangleRenderer(GeContext context,CachedTextureResampled texture,boolean useVertexTexture){  init(context,texture,useVertexTexture,true);}  }
class C{  public void showStatus(String msg){  getAppletContext().showStatus(msg);}  }
class C{  private void dumpRCStack(PrintWriter pw){  pw.println("\nRemote Control stack entries (last is top of stack):");synchronized (mRCStack) {    Iterator<RemoteControlStackEntry> stackIterator=mRCStack.iterator();    while (stackIterator.hasNext()) {      RemoteControlStackEntry rcse=stackIterator.next();      pw.println("  pi: " + rcse.mMediaIntent + " -- pack: "+ rcse.mCallingPackageName+ "  -- ercvr: "+ rcse.mReceiverComponent+ "  -- client: "+ rcse.mRcClient+ "  -- uid: "+ rcse.mCallingUid+ "  -- type: "+ rcse.mPlaybackType+ "  state: "+ rcse.mPlaybackState);    }  }}  }
class C{  public SendableAudioMessage.SendableAudioMessageBuilder caption(String caption){  this.caption=caption;  return this;}  }
class C{  public void possiblyFlush(){  if (dirty) {    flush();  }}  }
class C{  public void pop(int n){  throwIfImmutable();  size-=n;}  }
class C{  private String createUniqueGCTraceName(GCTrace gcTrace){  assert gcTrace != null;  String originalName=gcTrace.getSuggestedName();  String name=originalName;  int i=0;  while (findGCTrace(name) != null) {    ++i;    name=originalName + "." + i;  }  return name;}  }
class C{  public CoderResult error(){  assert (error != null);  return error;}  }
class C{  public ReplDBMSFilteredEvent(ReplDBMSHeader firstFilteredEvent,ReplDBMSHeader lastFilteredEvent){  super(firstFilteredEvent.getSeqno(),new DBMSEvent(lastFilteredEvent.getEventId()));  this.seqnoEnd=lastFilteredEvent.getSeqno();  this.fragno=firstFilteredEvent.getFragno();  this.fragnoEnd=lastFilteredEvent.getFragno();  this.lastFrag=lastFilteredEvent.getLastFrag();  this.sourceId=firstFilteredEvent.getSourceId();  this.epochNumber=firstFilteredEvent.getEpochNumber();  this.shardId=firstFilteredEvent.getShardId();  this.extractedTstamp=lastFilteredEvent.getExtractedTstamp();}  }
class C{  public static boolean isPrintableString(String str){  for (int i=str.length() - 1; i >= 0; i--) {    char ch=str.charAt(i);    if (ch > 0x007f) {      return false;    }    if ('a' <= ch && ch <= 'z') {      continue;    }    if ('A' <= ch && ch <= 'Z') {      continue;    }    if ('0' <= ch && ch <= '9') {      continue;    }switch (ch) {case ' ':case '\'':case '(':case ')':case '+':case '-':case '.':case ':':case '=':case '?':case '/':case ',':      continue;  }  return false;}return true;}  }
class C{  public Builder addCompositeFieldClause(String parentFieldName,String nestedFieldName,String nestedFieldValue,Occurance occurance){  return addFieldClause(QuerySpecification.buildCompositeFieldName(parentFieldName,nestedFieldName),nestedFieldValue,occurance);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  protected void pushInstanceOfTypeInfo(final Expression objectOfInstanceOf,final Expression typeExpression){  final Map<Object,List<ClassNode>> tempo=typeCheckingContext.temporaryIfBranchTypeInformation.peek();  Object key=extractTemporaryTypeInfoKey(objectOfInstanceOf);  List<ClassNode> potentialTypes=tempo.get(key);  if (potentialTypes == null) {    potentialTypes=new LinkedList<ClassNode>();    tempo.put(key,potentialTypes);  }  potentialTypes.add(typeExpression.getType());}  }
class C{  public UnionTypeExpression createUnionTypeExpression(){  UnionTypeExpressionImpl unionTypeExpression=new UnionTypeExpressionImpl();  return unionTypeExpression;}  }
class C{  protected void addNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_NamedElement_name_feature"),getString("_UI_PropertyDescriptor_description","_UI_NamedElement_name_feature","_UI_NamedElement_type"),BasePackage.Literals.NAMED_ELEMENT__NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public static String correctFileName(String f){  f=f.replace('\\','/');  if (f.startsWith("/")) {    f=f.substring(1);  }  return f;}  }
class C{  private void initActions(){  getActionMap().put(UndoAction.ID,undo.getUndoAction());  getActionMap().put(RedoAction.ID,undo.getRedoAction());}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) static ByteBuffer createDirectByteBuffer(long address,int size){  if (dbbCreateFailed) {    return null;  }  Constructor ctor=dbbCtor;  if (ctor == null) {    Class c=dbbClass;    if (c == null) {      try {        c=Class.forName("java.nio.DirectByteBuffer");      } catch (      ClassNotFoundException e) {        dbbCreateFailed=true;        dbbAddressFailed=true;        return null;      }      dbbClass=c;    }    try {      ctor=c.getDeclaredConstructor(long.class,int.class);    } catch (    NoSuchMethodException|SecurityException e) {      dbbClass=null;      dbbCreateFailed=true;      return null;    }    ctor.setAccessible(true);    dbbCtor=ctor;  }  try {    return (ByteBuffer)ctor.newInstance(address,size);  } catch (  InstantiationException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {    dbbClass=null;    dbbCtor=null;    dbbCreateFailed=true;    return null;  }}  }
class C{  public boolean isPostfix(){  return isPostfix;}  }
class C{  void cancelAll(){synchronized (currentRequests) {    for (    DownloadRequest request : currentRequests) {      request.cancel();    }  }  currentRequests.clear();}  }
class C{  public void syncKnownUsersSynchronously() throws InterruptedException, ExecutionException, RemoteException, OperationApplicationException, UserSyncException {  onUsersSynced(mUserStore.syncKnownUsers());}  }
class C{  public static Validator<CharSequence> noWhitespace(@NonNull final CharSequence errorMessage){  return new NoWhitespaceValidator(errorMessage);}  }
class C{  public MeetingMember updateMeetingMember(MeetingMember meetingMember){  log.debug("");  if (meetingMember.getMeetingMemberId() > 0) {    try {      if (meetingMember.getMeetingMemberId() == null) {        em.persist(meetingMember);      } else {        if (!em.contains(meetingMember)) {          meetingMember=em.merge(meetingMember);        }      }      return meetingMember;    } catch (    Exception ex2) {      log.error("[updateMeetingMember] ",ex2);    }  } else {    log.error("[updateUser] " + "Error: No MeetingMemberId given");  }  return null;}  }
class C{  public static void circle(double x,double y,double radius){  if (!(radius >= 0))   throw new IllegalArgumentException("radius must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * radius);  double hs=factorY(2 * radius);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public AnimatableValue interpolate(AnimatableValue result,AnimatableValue to,float interpolation,AnimatableValue accumulation,int multiplier){  AnimatableColorValue res;  if (result == null) {    res=new AnimatableColorValue(target);  } else {    res=(AnimatableColorValue)result;  }  float oldRed=res.red;  float oldGreen=res.green;  float oldBlue=res.blue;  res.red=red;  res.green=green;  res.blue=blue;  AnimatableColorValue toColor=(AnimatableColorValue)to;  AnimatableColorValue accColor=(AnimatableColorValue)accumulation;  if (to != null) {    res.red+=interpolation * (toColor.red - res.red);    res.green+=interpolation * (toColor.green - res.green);    res.blue+=interpolation * (toColor.blue - res.blue);  }  if (accumulation != null) {    res.red+=multiplier * accColor.red;    res.green+=multiplier * accColor.green;    res.blue+=multiplier * accColor.blue;  }  if (res.red != oldRed || res.green != oldGreen || res.blue != oldBlue) {    res.hasChanged=true;  }  return res;}  }
class C{  public static void addNodeToRack(String name,String rackId){synchronized (nameToRackMap) {    nameToRackMap.put(name,rackId);  }}  }
class C{  private void writeQuestRecord(final Player player){  StringBuilder sb=new StringBuilder();  LinkedList<Creature> sortedcreatures=getBlordroughs();  sb.append("given");  for (int i=0; i < sortedcreatures.size(); i++) {    String temp;    int solo;    int shared;    temp=player.getKeyedSlot("!kills","solo." + sortedcreatures.get(i).getName());    if (temp == null) {      solo=0;    } else {      solo=Integer.parseInt(temp);    }    temp=player.getKeyedSlot("!kills","shared." + sortedcreatures.get(i).getName());    if (temp == null) {      shared=0;    } else {      shared=Integer.parseInt(temp);    }    sb.append(";" + solo);    sb.append(";" + shared);  }  player.setQuest(QUEST_SLOT,sb.toString());}  }
class C{  public MazeSign(){  updatePlayers();  put("class","book_blue");}  }
class C{  @NotNull @ObjectiveCName("loadGroupPermissionsWithGid:") public Promise<GroupPermissions> loadGroupPermissions(int gid){  return modules.getGroupsModule().loadAdminSettings(gid);}  }
class C{  public T caseVariableDeclarationContainer(VariableDeclarationContainer object){  return null;}  }
class C{  public static CCCallFunc action(Object target,String selector){  return new CCCallFunc(target,selector,null);}  }
class C{  public void onDrawerClosed(View view){  super.onDrawerClosed(view);}  }
class C{  public static void main(String[] args){  String pat=args[0];  String txt=args[1];  RabinKarp searcher=new RabinKarp(pat);  int offset=searcher.search(txt);  StdOut.println("text:    " + txt);  StdOut.print("pattern: ");  for (int i=0; i < offset; i++)   StdOut.print(" ");  StdOut.println(pat);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void testTimeZones() throws Exception {  Map<String,String> tzMap=new HashMap<String,String>();  tzMap.put("AUS Central Daylight Time","Australia/Darwin");  tzMap.put("AUS Central Standard Time","Australia/Darwin");  tzMap.put("AUS Eastern Daylight Time","Australia/Sydney");  tzMap.put("AUS Eastern Standard Time","Australia/Sydney");  tzMap.put("Afghanistan Daylight Time","Asia/Kabul");  tzMap.put("Afghanistan Standard Time","Asia/Kabul");  tzMap.put("Alaskan Daylight Time","America/Anchorage");  tzMap.put("Alaskan Standard Time","America/Anchorage");  tzMap.put("Arab Daylight Time","Asia/Riyadh");  tzMap.put("Arab Standard Time","Asia/Riyadh");  tzMap.put("Arabian Daylight Time","Asia/Dubai");  tzMap.put("Arabian Standard Time","Asia/Dubai");  tzMap.put("Arabic Daylight Time","Asia/Baghdad");  tzMap.put("Arabic Standard Time","Asia/Baghdad");  tzMap.put("Argentina Daylight Time","America/Buenos_Aires");  tzMap.put("Argentina Standard Time","America/Buenos_Aires");  tzMap.put("Atlantic Daylight Time","America/Halifax");  tzMap.put("Atlantic Standard Time","America/Halifax");  tzMap.put("Azerbaijan Daylight Time","Asia/Baku");  tzMap.put("Azerbaijan Standard Time","Asia/Baku");  tzMap.put("Azores Daylight Time","Atlantic/Azores");  tzMap.put("Azores Standard Time","Atlantic/Azores");  tzMap.put("Bahia Daylight Time","America/Bahia");  tzMap.put("Bahia Standard Time","America/Bahia");  tzMap.put("Bangladesh Daylight Time","Asia/Dhaka");  tzMap.put("Bangladesh Standard Time","Asia/Dhaka");  tzMap.put("Belarus Daylight Time","Europe/Minsk");  tzMap.put("Belarus Standard Time","Europe/Minsk");  tzMap.put("Canada Central Daylight Time","America/Regina");  tzMap.put("Canada Central Standard Time","America/Regina");  tzMap.put("Cape Verde Daylight Time","Atlantic/Cape_Verde");  tzMap.put("Cape Verde Standard Time","Atlantic/Cape_Verde");  tzMap.put("Caucasus Daylight Time","Asia/Yerevan");  tzMap.put("Caucasus Standard Time","Asia/Yerevan");  tzMap.put("Cen. Australia Daylight Time","Australia/Adelaide");  tzMap.put("Cen. Australia Standard Time","Australia/Adelaide");  tzMap.put("Central America Daylight Time","America/Guatemala");  tzMap.put("Central America Standard Time","America/Guatemala");  tzMap.put("Central Asia Daylight Time","Asia/Almaty");  tzMap.put("Central Asia Standard Time","Asia/Almaty");  tzMap.put("Central Brazilian Daylight Time","America/Cuiaba");  tzMap.put("Central Brazilian Standard Time","America/Cuiaba");  tzMap.put("Central Daylight Time","America/Chicago");  tzMap.put("Central Daylight Time (Mexico)","America/Mexico_City");  tzMap.put("Central Europe Daylight Time","Europe/Budapest");  tzMap.put("Central Europe Standard Time","Europe/Budapest");  tzMap.put("Central European Daylight Time","Europe/Warsaw");  tzMap.put("Central European Standard Time","Europe/Warsaw");  tzMap.put("Central Pacific Daylight Time","Pacific/Guadalcanal");  tzMap.put("Central Pacific Standard Time","Pacific/Guadalcanal");  tzMap.put("Central Standard Time","America/Chicago");  tzMap.put("Central Standard Time (Mexico)","America/Mexico_City");  tzMap.put("China Daylight Time","Asia/Shanghai");  tzMap.put("China Standard Time","Asia/Shanghai");  tzMap.put("Dateline Daylight Time","Etc/GMT+12");  tzMap.put("Dateline Standard Time","Etc/GMT+12");  tzMap.put("E. Africa Daylight Time","Africa/Nairobi");  tzMap.put("E. Africa Standard Time","Africa/Nairobi");  tzMap.put("E. Australia Daylight Time","Australia/Brisbane");  tzMap.put("E. Australia Standard Time","Australia/Brisbane");  tzMap.put("E. South America Daylight Time","America/Sao_Paulo");  tzMap.put("E. South America Standard Time","America/Sao_Paulo");  tzMap.put("Eastern Daylight Time","America/New_York");  tzMap.put("Eastern Daylight Time (Mexico)","America/Cancun");  tzMap.put("Eastern Standard Time","America/New_York");  tzMap.put("Eastern Standard Time (Mexico)","America/Cancun");  tzMap.put("Egypt Daylight Time","Africa/Cairo");  tzMap.put("Egypt Standard Time","Africa/Cairo");  tzMap.put("Ekaterinburg Daylight Time","Asia/Yekaterinburg");  tzMap.put("Ekaterinburg Standard Time","Asia/Yekaterinburg");  tzMap.put("FLE Daylight Time","Europe/Kiev");  tzMap.put("FLE Standard Time","Europe/Kiev");  tzMap.put("Fiji Daylight Time","Pacific/Fiji");  tzMap.put("Fiji Standard Time","Pacific/Fiji");  tzMap.put("GMT Daylight Time","Europe/London");  tzMap.put("GMT Standard Time","Europe/London");  tzMap.put("GTB Daylight Time","Europe/Bucharest");  tzMap.put("GTB Standard Time","Europe/Bucharest");  tzMap.put("Georgian Daylight Time","Asia/Tbilisi");  tzMap.put("Georgian Standard Time","Asia/Tbilisi");  tzMap.put("Greenland Daylight Time","America/Godthab");  tzMap.put("Greenland Standard Time","America/Godthab");  tzMap.put("Greenwich Daylight Time","Atlantic/Reykjavik");  tzMap.put("Greenwich Standard Time","Atlantic/Reykjavik");  tzMap.put("Hawaiian Daylight Time","Pacific/Honolulu");  tzMap.put("Hawaiian Standard Time","Pacific/Honolulu");  tzMap.put("India Daylight Time","Asia/Calcutta");  tzMap.put("India Standard Time","Asia/Calcutta");  tzMap.put("Iran Daylight Time","Asia/Tehran");  tzMap.put("Iran Standard Time","Asia/Tehran");  tzMap.put("Israel Daylight Time","Asia/Jerusalem");  tzMap.put("Israel Standard Time","Asia/Jerusalem");  tzMap.put("Jordan Daylight Time","Asia/Amman");  tzMap.put("Jordan Standard Time","Asia/Amman");  tzMap.put("Kaliningrad Daylight Time","Europe/Kaliningrad");  tzMap.put("Kaliningrad Standard Time","Europe/Kaliningrad");  tzMap.put("Korea Daylight Time","Asia/Seoul");  tzMap.put("Korea Standard Time","Asia/Seoul");  tzMap.put("Libya Daylight Time","Africa/Tripoli");  tzMap.put("Libya Standard Time","Africa/Tripoli");  tzMap.put("Line Islands Daylight Time","Pacific/Kiritimati");  tzMap.put("Line Islands Standard Time","Pacific/Kiritimati");  tzMap.put("Magadan Daylight Time","Asia/Magadan");  tzMap.put("Magadan Standard Time","Asia/Magadan");  tzMap.put("Mauritius Daylight Time","Indian/Mauritius");  tzMap.put("Mauritius Standard Time","Indian/Mauritius");  tzMap.put("Middle East Daylight Time","Asia/Beirut");  tzMap.put("Middle East Standard Time","Asia/Beirut");  tzMap.put("Montevideo Daylight Time","America/Montevideo");  tzMap.put("Montevideo Standard Time","America/Montevideo");  tzMap.put("Morocco Daylight Time","Africa/Casablanca");  tzMap.put("Morocco Standard Time","Africa/Casablanca");  tzMap.put("Mountain Daylight Time","America/Denver");  tzMap.put("Mountain Daylight Time (Mexico)","America/Chihuahua");  tzMap.put("Mountain Standard Time","America/Denver");  tzMap.put("Mountain Standard Time (Mexico)","America/Chihuahua");  tzMap.put("Myanmar Daylight Time","Asia/Rangoon");  tzMap.put("Myanmar Standard Time","Asia/Rangoon");  tzMap.put("N. Central Asia Daylight Time","Asia/Novosibirsk");  tzMap.put("N. Central Asia Standard Time","Asia/Novosibirsk");  tzMap.put("Namibia Daylight Time","Africa/Windhoek");  tzMap.put("Namibia Standard Time","Africa/Windhoek");  tzMap.put("Nepal Daylight Time","Asia/Katmandu");  tzMap.put("Nepal Standard Time","Asia/Katmandu");  tzMap.put("New Zealand Daylight Time","Pacific/Auckland");  tzMap.put("New Zealand Standard Time","Pacific/Auckland");  tzMap.put("Newfoundland Daylight Time","America/St_Johns");  tzMap.put("Newfoundland Standard Time","America/St_Johns");  tzMap.put("North Asia Daylight Time","Asia/Krasnoyarsk");  tzMap.put("North Asia East Daylight Time","Asia/Irkutsk");  tzMap.put("North Asia East Standard Time","Asia/Irkutsk");  tzMap.put("North Asia Standard Time","Asia/Krasnoyarsk");  tzMap.put("Pacific Daylight Time","America/Los_Angeles");  tzMap.put("Pacific Daylight Time (Mexico)","America/Santa_Isabel");  tzMap.put("Pacific SA Daylight Time","America/Santiago");  tzMap.put("Pacific SA Standard Time","America/Santiago");  tzMap.put("Pacific Standard Time","America/Los_Angeles");  tzMap.put("Pacific Standard Time (Mexico)","America/Santa_Isabel");  tzMap.put("Pakistan Daylight Time","Asia/Karachi");  tzMap.put("Pakistan Standard Time","Asia/Karachi");  tzMap.put("Paraguay Daylight Time","America/Asuncion");  tzMap.put("Paraguay Standard Time","America/Asuncion");  tzMap.put("Romance Daylight Time","Europe/Paris");  tzMap.put("Romance Standard Time","Europe/Paris");  tzMap.put("Russia Time Zone 10","Asia/Srednekolymsk");  tzMap.put("Russia Time Zone 11","Asia/Kamchatka");  tzMap.put("Russia Time Zone 3","Europe/Samara");  tzMap.put("Russian Daylight Time","Europe/Moscow");  tzMap.put("Russian Standard Time","Europe/Moscow");  tzMap.put("SA Eastern Daylight Time","America/Cayenne");  tzMap.put("SA Eastern Standard Time","America/Cayenne");  tzMap.put("SA Pacific Daylight Time","America/Bogota");  tzMap.put("SA Pacific Standard Time","America/Bogota");  tzMap.put("SA Western Daylight Time","America/La_Paz");  tzMap.put("SA Western Standard Time","America/La_Paz");  tzMap.put("SE Asia Daylight Time","Asia/Bangkok");  tzMap.put("SE Asia Standard Time","Asia/Bangkok");  tzMap.put("Samoa Daylight Time","Pacific/Apia");  tzMap.put("Samoa Standard Time","Pacific/Apia");  tzMap.put("Singapore Daylight Time","Asia/Singapore");  tzMap.put("Singapore Standard Time","Asia/Singapore");  tzMap.put("South Africa Daylight Time","Africa/Johannesburg");  tzMap.put("South Africa Standard Time","Africa/Johannesburg");  tzMap.put("Sri Lanka Daylight Time","Asia/Colombo");  tzMap.put("Sri Lanka Standard Time","Asia/Colombo");  tzMap.put("Syria Daylight Time","Asia/Damascus");  tzMap.put("Syria Standard Time","Asia/Damascus");  tzMap.put("Taipei Daylight Time","Asia/Taipei");  tzMap.put("Taipei Standard Time","Asia/Taipei");  tzMap.put("Tasmania Daylight Time","Australia/Hobart");  tzMap.put("Tasmania Standard Time","Australia/Hobart");  tzMap.put("Tokyo Daylight Time","Asia/Tokyo");  tzMap.put("Tokyo Standard Time","Asia/Tokyo");  tzMap.put("Tonga Daylight Time","Pacific/Tongatapu");  tzMap.put("Tonga Standard Time","Pacific/Tongatapu");  tzMap.put("Turkey Daylight Time","Europe/Istanbul");  tzMap.put("Turkey Standard Time","Europe/Istanbul");  tzMap.put("US Eastern Daylight Time","America/Indianapolis");  tzMap.put("US Eastern Standard Time","America/Indianapolis");  tzMap.put("US Mountain Daylight Time","America/Phoenix");  tzMap.put("US Mountain Standard Time","America/Phoenix");  tzMap.put("UTC","Etc/GMT");  tzMap.put("UTC+12","Etc/GMT-12");  tzMap.put("UTC-02","Etc/GMT+2");  tzMap.put("UTC-11","Etc/GMT+11");  tzMap.put("Ulaanbaatar Daylight Time","Asia/Ulaanbaatar");  tzMap.put("Ulaanbaatar Standard Time","Asia/Ulaanbaatar");  tzMap.put("Venezuela Daylight Time","America/Caracas");  tzMap.put("Venezuela Standard Time","America/Caracas");  tzMap.put("Vladivostok Daylight Time","Asia/Vladivostok");  tzMap.put("Vladivostok Standard Time","Asia/Vladivostok");  tzMap.put("W. Australia Daylight Time","Australia/Perth");  tzMap.put("W. Australia Standard Time","Australia/Perth");  tzMap.put("W. Central Africa Daylight Time","Africa/Lagos");  tzMap.put("W. Central Africa Standard Time","Africa/Lagos");  tzMap.put("W. Europe Daylight Time","Europe/Berlin");  tzMap.put("W. Europe Standard Time","Europe/Berlin");  tzMap.put("West Asia Daylight Time","Asia/Tashkent");  tzMap.put("West Asia Standard Time","Asia/Tashkent");  tzMap.put("West Pacific Daylight Time","Pacific/Port_Moresby");  tzMap.put("West Pacific Standard Time","Pacific/Port_Moresby");  tzMap.put("Yakutsk Daylight Time","Asia/Yakutsk");  tzMap.put("Yakutsk Standard Time","Asia/Yakutsk");  tzMap.put("Africa/Addis_Ababa","Africa/Nairobi");  tzMap.put("Africa/Asmara","Africa/Nairobi");  tzMap.put("Africa/Asmera","Africa/Nairobi");  tzMap.put("Africa/Bamako","Africa/Abidjan");  tzMap.put("Africa/Bangui","Africa/Lagos");  tzMap.put("Africa/Banjul","Africa/Abidjan");  tzMap.put("Africa/Blantyre","Africa/Maputo");  tzMap.put("Africa/Brazzaville","Africa/Lagos");  tzMap.put("Africa/Bujumbura","Africa/Maputo");  tzMap.put("Africa/Conakry","Africa/Abidjan");  tzMap.put("Africa/Dakar","Africa/Abidjan");  tzMap.put("Africa/Dar_es_Salaam","Africa/Nairobi");  tzMap.put("Africa/Djibouti","Africa/Nairobi");  tzMap.put("Africa/Douala","Africa/Lagos");  tzMap.put("Africa/Freetown","Africa/Abidjan");  tzMap.put("Africa/Gaborone","Africa/Maputo");  tzMap.put("Africa/Harare","Africa/Maputo");  tzMap.put("Africa/Juba","Africa/Khartoum");  tzMap.put("Africa/Kampala","Africa/Nairobi");  tzMap.put("Africa/Kigali","Africa/Maputo");  tzMap.put("Africa/Kinshasa","Africa/Lagos");  tzMap.put("Africa/Libreville","Africa/Lagos");  tzMap.put("Africa/Lome","Africa/Abidjan");  tzMap.put("Africa/Luanda","Africa/Lagos");  tzMap.put("Africa/Lubumbashi","Africa/Maputo");  tzMap.put("Africa/Lusaka","Africa/Maputo");  tzMap.put("Africa/Malabo","Africa/Lagos");  tzMap.put("Africa/Maseru","Africa/Johannesburg");  tzMap.put("Africa/Mbabane","Africa/Johannesburg");  tzMap.put("Africa/Mogadishu","Africa/Nairobi");  tzMap.put("Africa/Niamey","Africa/Lagos");  tzMap.put("Africa/Nouakchott","Africa/Abidjan");  tzMap.put("Africa/Ouagadougou","Africa/Abidjan");  tzMap.put("Africa/Porto-Novo","Africa/Lagos");  tzMap.put("Africa/Sao_Tome","Africa/Abidjan");  tzMap.put("Africa/Timbuktu","Africa/Abidjan");  tzMap.put("America/Anguilla","America/Port_of_Spain");  tzMap.put("America/Antigua","America/Port_of_Spain");  tzMap.put("America/Argentina/ComodRivadavia","America/Argentina/Catamarca");  tzMap.put("America/Aruba","America/Curacao");  tzMap.put("America/Atka","America/Adak");  tzMap.put("America/Buenos_Aires","America/Argentina/Buenos_Aires");  tzMap.put("America/Catamarca","America/Argentina/Catamarca");  tzMap.put("America/Coral_Harbour","America/Atikokan");  tzMap.put("America/Cordoba","America/Argentina/Cordoba");  tzMap.put("America/Dominica","America/Port_of_Spain");  tzMap.put("America/Ensenada","America/Tijuana");  tzMap.put("America/Fort_Wayne","America/Indiana/Indianapolis");  tzMap.put("America/Grenada","America/Port_of_Spain");  tzMap.put("America/Guadeloupe","America/Port_of_Spain");  tzMap.put("America/Indianapolis","America/Indiana/Indianapolis");  tzMap.put("America/Jujuy","America/Argentina/Jujuy");  tzMap.put("America/Knox_IN","America/Indiana/Knox");  tzMap.put("America/Kralendijk","America/Curacao");  tzMap.put("America/Louisville","America/Kentucky/Louisville");  tzMap.put("America/Lower_Princes","America/Curacao");  tzMap.put("America/Marigot","America/Port_of_Spain");  tzMap.put("America/Mendoza","America/Argentina/Mendoza");  tzMap.put("America/Montreal","America/Toronto");  tzMap.put("America/Montserrat","America/Port_of_Spain");  tzMap.put("America/Porto_Acre","America/Rio_Branco");  tzMap.put("America/Rosario","America/Argentina/Cordoba");  tzMap.put("America/Shiprock","America/Denver");  tzMap.put("America/St_Barthelemy","America/Port_of_Spain");  tzMap.put("America/St_Kitts","America/Port_of_Spain");  tzMap.put("America/St_Lucia","America/Port_of_Spain");  tzMap.put("America/St_Thomas","America/Port_of_Spain");  tzMap.put("America/St_Vincent","America/Port_of_Spain");  tzMap.put("America/Tortola","America/Port_of_Spain");  tzMap.put("America/Virgin","America/Port_of_Spain");  tzMap.put("Antarctica/McMurdo","Pacific/Auckland");  tzMap.put("Antarctica/South_Pole","Pacific/Auckland");  tzMap.put("Arctic/Longyearbyen","Europe/Oslo");  tzMap.put("Asia/Aden","Asia/Riyadh");  tzMap.put("Asia/Ashkhabad","Asia/Ashgabat");  tzMap.put("Asia/Bahrain","Asia/Qatar");  tzMap.put("Asia/Calcutta","Asia/Kolkata");  tzMap.put("Asia/Chongqing","Asia/Shanghai");  tzMap.put("Asia/Chungking","Asia/Shanghai");  tzMap.put("Asia/Dacca","Asia/Dhaka");  tzMap.put("Asia/Harbin","Asia/Shanghai");  tzMap.put("Asia/Istanbul","Europe/Istanbul");  tzMap.put("Asia/Kashgar","Asia/Urumqi");  tzMap.put("Asia/Katmandu","Asia/Kathmandu");  tzMap.put("Asia/Kuwait","Asia/Riyadh");  tzMap.put("Asia/Macao","Asia/Macau");  tzMap.put("Asia/Muscat","Asia/Dubai");  tzMap.put("Asia/Phnom_Penh","Asia/Bangkok");  tzMap.put("Asia/Saigon","Asia/Ho_Chi_Minh");  tzMap.put("Asia/Tel_Aviv","Asia/Jerusalem");  tzMap.put("Asia/Thimbu","Asia/Thimphu");  tzMap.put("Asia/Ujung_Pandang","Asia/Makassar");  tzMap.put("Asia/Ulan_Bator","Asia/Ulaanbaatar");  tzMap.put("Asia/Vientiane","Asia/Bangkok");  tzMap.put("Atlantic/Faeroe","Atlantic/Faroe");  tzMap.put("Atlantic/Jan_Mayen","Europe/Oslo");  tzMap.put("Atlantic/St_Helena","Africa/Abidjan");  tzMap.put("Australia/ACT","Australia/Sydney");  tzMap.put("Australia/Canberra","Australia/Sydney");  tzMap.put("Australia/LHI","Australia/Lord_Howe");  tzMap.put("Australia/NSW","Australia/Sydney");  tzMap.put("Australia/North","Australia/Darwin");  tzMap.put("Australia/Queensland","Australia/Brisbane");  tzMap.put("Australia/South","Australia/Adelaide");  tzMap.put("Australia/Tasmania","Australia/Hobart");  tzMap.put("Australia/Victoria","Australia/Melbourne");  tzMap.put("Australia/West","Australia/Perth");  tzMap.put("Australia/Yancowinna","Australia/Broken_Hill");  tzMap.put("Brazil/Acre","America/Rio_Branco");  tzMap.put("Brazil/DeNoronha","America/Noronha");  tzMap.put("Brazil/East","America/Sao_Paulo");  tzMap.put("Brazil/West","America/Manaus");  tzMap.put("Canada/Atlantic","America/Halifax");  tzMap.put("Canada/Central","America/Winnipeg");  tzMap.put("Canada/East-Saskatchewan","America/Regina");  tzMap.put("Canada/Eastern","America/Toronto");  tzMap.put("Canada/Mountain","America/Edmonton");  tzMap.put("Canada/Newfoundland","America/St_Johns");  tzMap.put("Canada/Pacific","America/Vancouver");  tzMap.put("Canada/Saskatchewan","America/Regina");  tzMap.put("Canada/Yukon","America/Whitehorse");  tzMap.put("Chile/Continental","America/Santiago");  tzMap.put("Chile/EasterIsland","Pacific/Easter");  tzMap.put("Cuba","America/Havana");  tzMap.put("Egypt","Africa/Cairo");  tzMap.put("Eire","Europe/Dublin");  tzMap.put("Europe/Belfast","Europe/London");  tzMap.put("Europe/Bratislava","Europe/Prague");  tzMap.put("Europe/Busingen","Europe/Zurich");  tzMap.put("Europe/Guernsey","Europe/London");  tzMap.put("Europe/Isle_of_Man","Europe/London");  tzMap.put("Europe/Jersey","Europe/London");  tzMap.put("Europe/Ljubljana","Europe/Belgrade");  tzMap.put("Europe/Mariehamn","Europe/Helsinki");  tzMap.put("Europe/Nicosia","Asia/Nicosia");  tzMap.put("Europe/Podgorica","Europe/Belgrade");  tzMap.put("Europe/San_Marino","Europe/Rome");  tzMap.put("Europe/Sarajevo","Europe/Belgrade");  tzMap.put("Europe/Skopje","Europe/Belgrade");  tzMap.put("Europe/Tiraspol","Europe/Chisinau");  tzMap.put("Europe/Vaduz","Europe/Zurich");  tzMap.put("Europe/Vatican","Europe/Rome");  tzMap.put("Europe/Zagreb","Europe/Belgrade");  tzMap.put("GB","Europe/London");  tzMap.put("GB-Eire","Europe/London");  tzMap.put("GMT+0","Etc/GMT");  tzMap.put("GMT-0","Etc/GMT");  tzMap.put("GMT0","Etc/GMT");  tzMap.put("Greenwich","Etc/GMT");  tzMap.put("Hongkong","Asia/Hong_Kong");  tzMap.put("Iceland","Atlantic/Reykjavik");  tzMap.put("Indian/Antananarivo","Africa/Nairobi");  tzMap.put("Indian/Comoro","Africa/Nairobi");  tzMap.put("Indian/Mayotte","Africa/Nairobi");  tzMap.put("Iran","Asia/Tehran");  tzMap.put("Israel","Asia/Jerusalem");  tzMap.put("Jamaica","America/Jamaica");  tzMap.put("Japan","Asia/Tokyo");  tzMap.put("Kwajalein","Pacific/Kwajalein");  tzMap.put("Libya","Africa/Tripoli");  tzMap.put("Mexico/BajaNorte","America/Tijuana");  tzMap.put("Mexico/BajaSur","America/Mazatlan");  tzMap.put("Mexico/General","America/Mexico_City");  tzMap.put("NZ","Pacific/Auckland");  tzMap.put("NZ-CHAT","Pacific/Chatham");  tzMap.put("Navajo","America/Denver");  tzMap.put("PRC","Asia/Shanghai");  tzMap.put("Pacific/Johnston","Pacific/Honolulu");  tzMap.put("Pacific/Midway","Pacific/Pago_Pago");  tzMap.put("Pacific/Ponape","Pacific/Pohnpei");  tzMap.put("Pacific/Saipan","Pacific/Guam");  tzMap.put("Pacific/Samoa","Pacific/Pago_Pago");  tzMap.put("Pacific/Truk","Pacific/Chuuk");  tzMap.put("Pacific/Yap","Pacific/Chuuk");  tzMap.put("Poland","Europe/Warsaw");  tzMap.put("Portugal","Europe/Lisbon");  tzMap.put("ROC","Asia/Taipei");  tzMap.put("ROK","Asia/Seoul");  tzMap.put("Singapore","Asia/Singapore");  tzMap.put("Turkey","Europe/Istanbul");  tzMap.put("UCT","Etc/UCT");  tzMap.put("US/Alaska","America/Anchorage");  tzMap.put("US/Aleutian","America/Adak");  tzMap.put("US/Arizona","America/Phoenix");  tzMap.put("US/Central","America/Chicago");  tzMap.put("US/East-Indiana","America/Indiana/Indianapolis");  tzMap.put("US/Eastern","America/New_York");  tzMap.put("US/Hawaii","Pacific/Honolulu");  tzMap.put("US/Indiana-Starke","America/Indiana/Knox");  tzMap.put("US/Michigan","America/Detroit");  tzMap.put("US/Mountain","America/Denver");  tzMap.put("US/Pacific","America/Los_Angeles");  tzMap.put("US/Pacific-New","America/Los_Angeles");  tzMap.put("US/Samoa","Pacific/Pago_Pago");  tzMap.put("Universal","Etc/UTC");  tzMap.put("W-SU","Europe/Moscow");  tzMap.put("Zulu","Etc/UTC");  tzMap.put("ACWST","Australia/Eucla");  tzMap.put("AFT","Asia/Kabul");  tzMap.put("ALMT","Asia/Almaty");  tzMap.put("ANAT","Asia/Anadyr");  tzMap.put("AZOST","Atlantic/Azores");  tzMap.put("AZOT","Atlantic/Azores");  tzMap.put("AZST","Asia/Baku");  tzMap.put("AZT","Asia/Baku");  tzMap.put("BDT","Asia/Dhaka");  tzMap.put("BNT","Asia/Brunei");  tzMap.put("BOT","America/La_Paz");  tzMap.put("BRST","America/Sao_Paulo");  tzMap.put("BTT","Asia/Thimphu");  tzMap.put("CAT","Africa/Maputo");  tzMap.put("CCT","Indian/Cocos");  tzMap.put("CHADT","Pacific/Chatham");  tzMap.put("CHAST","Pacific/Chatham");  tzMap.put("CHOST","Asia/Choibalsan");  tzMap.put("CHOT","Asia/Choibalsan");  tzMap.put("CHUT","Pacific/Chuuk");  tzMap.put("CKT","Pacific/Rarotonga");  tzMap.put("COT","America/Bogota");  tzMap.put("CVT","Atlantic/Cape_Verde");  tzMap.put("CXT","Indian/Christmas");  tzMap.put("ChST","Pacific/Guam");  tzMap.put("DAVT","Antarctica/Davis");  tzMap.put("DDUT","Antarctica/DumontDUrville");  tzMap.put("EAST","Pacific/Easter");  tzMap.put("ECT","America/Guayaquil");  tzMap.put("EGST","America/Scoresbysund");  tzMap.put("EGT","America/Scoresbysund");  tzMap.put("FJST","Pacific/Fiji");  tzMap.put("FJT","Pacific/Fiji");  tzMap.put("FKST","Atlantic/Stanley");  tzMap.put("FNT","America/Noronha");  tzMap.put("GALT","Pacific/Galapagos");  tzMap.put("GAMT","Pacific/Gambier");  tzMap.put("GET","Asia/Tbilisi");  tzMap.put("GFT","America/Cayenne");  tzMap.put("GILT","Pacific/Tarawa");  tzMap.put("GYT","America/Guyana");  tzMap.put("HDT","America/Adak");  tzMap.put("HKT","Asia/Hong_Kong");  tzMap.put("HOVST","Asia/Hovd");  tzMap.put("HOVT","Asia/Hovd");  tzMap.put("IDT","Asia/Jerusalem");  tzMap.put("IOT","Indian/Chagos");  tzMap.put("IRST","Asia/Tehran");  tzMap.put("JST","Asia/Tokyo");  tzMap.put("KGT","Asia/Bishkek");  tzMap.put("KOST","Pacific/Kosrae");  tzMap.put("LHDT","Australia/Lord_Howe");  tzMap.put("LHST","Australia/Lord_Howe");  tzMap.put("LINT","Pacific/Kiritimati");  tzMap.put("MAGT","Asia/Magadan");  tzMap.put("MART","Pacific/Marquesas");  tzMap.put("MAWT","Antarctica/Mawson");  tzMap.put("MEST","MET");  tzMap.put("MET","MET");  tzMap.put("MIST","Antarctica/Macquarie");  tzMap.put("MMT","Asia/Rangoon");  tzMap.put("MUT","Indian/Mauritius");  tzMap.put("MVT","Indian/Maldives");  tzMap.put("NCT","Pacific/Noumea");  tzMap.put("NDT","America/St_Johns");  tzMap.put("NFT","Pacific/Norfolk");  tzMap.put("NOVT","Asia/Novosibirsk");  tzMap.put("NPT","Asia/Kathmandu");  tzMap.put("NRT","Pacific/Nauru");  tzMap.put("NST","America/St_Johns");  tzMap.put("NUT","Pacific/Niue");  tzMap.put("NZDT","Pacific/Auckland");  tzMap.put("NZST","Pacific/Auckland");  tzMap.put("OMST","Asia/Omsk");  tzMap.put("ORAT","Asia/Oral");  tzMap.put("PET","America/Lima");  tzMap.put("PETT","Asia/Kamchatka");  tzMap.put("PGT","Pacific/Port_Moresby");  tzMap.put("PHOT","Pacific/Enderbury");  tzMap.put("PHT","Asia/Manila");  tzMap.put("PKT","Asia/Karachi");  tzMap.put("PMDT","America/Miquelon");  tzMap.put("PMST","America/Miquelon");  tzMap.put("PONT","Pacific/Pohnpei");  tzMap.put("PWT","Pacific/Palau");  tzMap.put("PYST","America/Asuncion");  tzMap.put("PYT","America/Asuncion");  tzMap.put("QYZT","Asia/Qyzylorda");  tzMap.put("RET","Indian/Reunion");  tzMap.put("ROTT","Antarctica/Rothera");  tzMap.put("SAKT","Asia/Sakhalin");  tzMap.put("SAMT","Europe/Samara");  tzMap.put("SAST","Africa/Johannesburg");  tzMap.put("SBT","Pacific/Guadalcanal");  tzMap.put("SCT","Indian/Mahe");  tzMap.put("SGT","Asia/Singapore");  tzMap.put("SRET","Asia/Srednekolymsk");  tzMap.put("SRT","America/Paramaribo");  tzMap.put("SST","Pacific/Pago_Pago");  tzMap.put("SYOT","Antarctica/Syowa");  tzMap.put("TAHT","Pacific/Tahiti");  tzMap.put("TFT","Indian/Kerguelen");  tzMap.put("TJT","Asia/Dushanbe");  tzMap.put("TKT","Pacific/Fakaofo");  tzMap.put("TLT","Asia/Dili");  tzMap.put("TMT","Asia/Ashgabat");  tzMap.put("TOT","Pacific/Tongatapu");  tzMap.put("TVT","Pacific/Funafuti");  tzMap.put("ULAST","Asia/Ulaanbaatar");  tzMap.put("ULAT","Asia/Ulaanbaatar");  tzMap.put("UYT","America/Montevideo");  tzMap.put("VET","America/Caracas");  tzMap.put("VOST","Antarctica/Vostok");  tzMap.put("VUT","Pacific/Efate");  tzMap.put("WAKT","Pacific/Wake");  tzMap.put("WAST","Africa/Windhoek");  tzMap.put("WFT","Pacific/Wallis");  tzMap.put("WGST","America/Godthab");  tzMap.put("WGT","America/Godthab");  tzMap.put("WIT","Asia/Jayapura");  tzMap.put("WITA","Asia/Makassar");  tzMap.put("WSDT","Pacific/Apia");  tzMap.put("WSST","Pacific/Apia");  tzMap.put("XJT","Asia/Urumqi");  tzMap.put("YEKT","Asia/Yekaterinburg");  for (  String key : tzMap.keySet()) {    assertEquals("Custom time Zone '" + key + "' mapping",tzMap.get(key),TimeUtil.getCanonicalTimezone(key,null));  }  for (  String tz : TimeZone.getAvailableIDs()) {    String canonicalTZ;    try {      canonicalTZ=TimeUtil.getCanonicalTimezone(tz,null);    } catch (    SQLException e) {      canonicalTZ=null;    }    assertNotNull("System Time Zone '" + tz + "' mapping missing",canonicalTZ);  }}  }
class C{  private void doQueryFirstScoring(Bits acceptDocs,LeafCollector collector,DocsAndCost[] dims) throws IOException {  int docID=baseScorer.docID();  nextDoc:   while (docID != PostingsEnum.NO_MORE_DOCS) {    if (acceptDocs != null && acceptDocs.get(docID) == false) {      docID=baseIterator.nextDoc();      continue;    }    LeafCollector failedCollector=null;    for (    DocsAndCost dim : dims) {      if (dim.approximation.docID() < docID) {        dim.approximation.advance(docID);      }      boolean matches=false;      if (dim.approximation.docID() == docID) {        if (dim.twoPhase == null) {          matches=true;        } else {          matches=dim.twoPhase.matches();        }      }      if (matches == false) {        if (failedCollector != null) {          docID=baseIterator.nextDoc();          continue nextDoc;        } else {          failedCollector=dim.sidewaysLeafCollector;        }      }    }    collectDocID=docID;    collectScore=baseScorer.score();    if (failedCollector == null) {      collectHit(collector,dims);    } else {      collectNearMiss(failedCollector);    }    docID=baseIterator.nextDoc();  }}  }
class C{  public void componentAdded(ContainerEvent e){  Layer childLayer=(Layer)e.getChild();  addProjectionListener(childLayer);  if (!removedLayers.removeElement(childLayer)) {    addedLayers.addElement(childLayer);  }  changeLayers(e);}  }
class C{  public synchronized long moveToNextSample(){  queueSize--;  int lastReadIndex=relativeReadIndex++;  absoluteReadIndex++;  if (relativeReadIndex == capacity) {    relativeReadIndex=0;  }  return queueSize > 0 ? offsets[relativeReadIndex] : (sizes[lastReadIndex] + offsets[lastReadIndex]);}  }
class C{  public static void search(String indexPath) throws IOException {  IndexReader reader=DirectoryReader.open(FSDirectory.open(Paths.get(indexPath)));  ImageSearcher imgSearcher=new GenericFastImageSearcher(1000,CEDD.class,SimpleExtractor.KeypointDetector.CVSURF,new BOVW(),128,true,reader,indexPath + ".config");  ImageSearchHits hits=imgSearcher.search(ImageIO.read(new File("testdata/ferrari/black/2828686873_2fa36f83d7_b.jpg")),reader);  for (int i=0; i < hits.length(); i++) {    System.out.printf("%.2f: (%d) %s\n",hits.score(i),hits.documentID(i),reader.document(hits.documentID(i)).getValues(DocumentBuilder.FIELD_NAME_IDENTIFIER)[0]);  }}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthSpinnerUI();}  }
class C{  public synchronized void severe(String sourceClass,String sourceMethod,String msg){  LogRecord record=new LogRecord(Level.SEVERE,msg);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  log(record);}  }
class C{  public final boolean isLenient(){  return lenient;}  }
class C{  public static ModifySubscriptionE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ModifySubscriptionE object=new ModifySubscriptionE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","modifySubscription").equals(reader.getName())) {          object.setModifySubscription(org.oscm.xsd.ModifySubscription.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @Override public ODataResponse readEntitySimplePropertyValue(GetSimplePropertyUriInfo uri_info,String content_type) throws ODataException {  try {    Object value=readPropertyValue(uri_info);    EdmProperty target=uri_info.getPropertyPath().get(uri_info.getPropertyPath().size() - 1);    if (target.getName().equals("Metalink")) {      return ODataResponse.fromResponse(EntityProvider.writeBinary(MetalinkBuilder.CONTENT_TYPE,value.toString().getBytes("UTF-8"))).header("Content-Disposition","inline; filename=product" + MetalinkBuilder.FILE_EXTENSION).build();    } else {      return EntityProvider.writePropertyValue(target,value);    }  } catch (  UnsupportedEncodingException e) {    throw new ODataException(e);  }}  }
class C{  public static int abs(int a){  return 0;}  }
class C{  public boolean isServerStarted(){  if (getJettyServer().isStarted() || getJettyServer().isStarting() || getJettyServer().isRunning()) {    return true;  } else {    return false;  }}  }
class C{  public void connect(String dbuser,String dbpwd,boolean readOnly) throws SQLException {  if (connection != null && !this.dbUser.equalsIgnoreCase(dbuser)) {    DBUtils.close(connection);  }  this.dbUser=dbuser;  java.util.Properties prop=new java.util.Properties();  prop.put("socketTimeout","600000");  prop.put("interactiveClient","true");  long connStartTime=System.currentTimeMillis();  connection=ConnectionFactory.connect(dbinfo,dbuser,dbpwd,frameworkContext,prop);  long connEndTime=System.currentTimeMillis();  this.connectionTime=connEndTime - connStartTime;  if (readOnly)   connection.setReadOnly(true);}  }
class C{  private void onLocationChangedAsync(Location location){  try {    if (!isRecording() || isPaused()) {      Log.w(TAG,"Ignore onLocationChangedAsync. Not recording or paused.");      return;    }    Track track=myTracksProviderUtils.getTrack(recordingTrackId);    if (track == null) {      Log.w(TAG,"Ignore onLocationChangedAsync. No track.");      return;    }    if (!LocationUtils.isValidLocation(location)) {      Log.w(TAG,"Ignore onLocationChangedAsync. location is invalid.");      return;    }    if (!location.hasAccuracy() || location.getAccuracy() >= recordingGpsAccuracy) {      Log.d(TAG,"Ignore onLocationChangedAsync. Poor accuracy.");      return;    }    if (location.getTime() == 0L) {      location.setTime(System.currentTimeMillis());    }    Location lastValidTrackPoint=getLastValidTrackPointInCurrentSegment(track.getId());    long idleTime=0L;    if (lastValidTrackPoint != null && location.getTime() > lastValidTrackPoint.getTime()) {      idleTime=location.getTime() - lastValidTrackPoint.getTime();    }    locationListenerPolicy.updateIdleTime(idleTime);    if (currentRecordingInterval != locationListenerPolicy.getDesiredPollingInterval()) {      registerLocationListener();    }    SensorDataSet sensorDataSet=getSensorDataSet();    if (sensorDataSet != null) {      location=new MyTracksLocation(location,sensorDataSet);    }    if (!currentSegmentHasLocation) {      insertLocation(track,location,null);      currentSegmentHasLocation=true;      lastLocation=location;      return;    }    if (!LocationUtils.isValidLocation(lastValidTrackPoint)) {      insertLocation(track,location,null);      lastLocation=location;      return;    }    double distanceToLastTrackLocation=location.distanceTo(lastValidTrackPoint);    if (distanceToLastTrackLocation > maxRecordingDistance) {      insertLocation(track,lastLocation,lastValidTrackPoint);      Location pause=new Location(LocationManager.GPS_PROVIDER);      pause.setLongitude(0);      pause.setLatitude(PAUSE_LATITUDE);      pause.setTime(lastLocation.getTime());      insertLocation(track,pause,null);      insertLocation(track,location,null);      isIdle=false;    } else     if (sensorDataSet != null || distanceToLastTrackLocation >= recordingDistanceInterval) {      insertLocation(track,lastLocation,lastValidTrackPoint);      insertLocation(track,location,null);      isIdle=false;    } else     if (!isIdle && location.hasSpeed() && location.getSpeed() < MAX_NO_MOVEMENT_SPEED) {      insertLocation(track,lastLocation,lastValidTrackPoint);      insertLocation(track,location,null);      isIdle=true;    } else     if (isIdle && location.hasSpeed() && location.getSpeed() >= MAX_NO_MOVEMENT_SPEED) {      insertLocation(track,lastLocation,lastValidTrackPoint);      insertLocation(track,location,null);      isIdle=false;    } else {      Log.d(TAG,"Not recording location, idle");    }    lastLocation=location;  } catch (  Error e) {    Log.e(TAG,"Error in onLocationChangedAsync",e);    throw e;  }catch (  RuntimeException e) {    Log.e(TAG,"RuntimeException in onLocationChangedAsync",e);    throw e;  }}  }
class C{  private static void readSystemEnv(){  System.getenv().forEach(null);}  }
class C{  protected long unwrapKey(Object key){  return ((Long)key).longValue();}  }
class C{  public Object remove(Object key){  Object k=maskNull(key);  int h=HashMap.hash(k);  Entry[] tab=getTable();  int i=indexFor(h,tab.length);  Entry prev=tab[i];  Entry e=prev;  while (e != null) {    Entry next=e.next;    if (h == e.hash && eq(k,e.get())) {      modCount++;      size--;      if (prev == e)       tab[i]=next; else       prev.next=next;      return e.value;    }    prev=e;    e=next;  }  return null;}  }
class C{  public Handler(){}  }
class C{  public static ComputeService.ComputeState createDefaultVMResource(VerificationHost host,String userEmail,String privateKey,String zoneId,String gcpVMName,String parentLink,String resourcePoolLink) throws Throwable {  AuthCredentialsService.AuthCredentialsServiceState auth=new AuthCredentialsService.AuthCredentialsServiceState();  auth.type=DEFAULT_AUTH_TYPE;  auth.userEmail=userEmail;  auth.privateKey=privateKey;  auth.documentSelfLink=UUID.randomUUID().toString();  TestUtils.doPost(host,auth,AuthCredentialsService.AuthCredentialsServiceState.class,UriUtils.buildUri(host,AuthCredentialsService.FACTORY_LINK));  String authLink=UriUtils.buildUriPath(AuthCredentialsService.FACTORY_LINK,auth.documentSelfLink);  ComputeDescriptionService.ComputeDescription gcpVMDesc=new ComputeDescriptionService.ComputeDescription();  gcpVMDesc.id=UUID.randomUUID().toString();  gcpVMDesc.name=gcpVMDesc.id;  gcpVMDesc.documentSelfLink=gcpVMDesc.id;  gcpVMDesc.zoneId=zoneId;  gcpVMDesc.authCredentialsLink=authLink;  gcpVMDesc.environmentName=ENVIRONMENT_NAME_GCP;  gcpVMDesc.customProperties=new HashMap<>();  gcpVMDesc.customProperties.put(CPU_PLATFORM,DEFAULT_CPU_PLATFORM);  ComputeDescriptionService.ComputeDescription vmComputeDesc=TestUtils.doPost(host,gcpVMDesc,ComputeDescriptionService.ComputeDescription.class,UriUtils.buildUri(host,ComputeDescriptionService.FACTORY_LINK));  List<String> vmDisks=new ArrayList<>();  DiskService.DiskState rootDisk=new DiskService.DiskState();  rootDisk.name=gcpVMName + BOOT_DISK_NAME_SUFFIX;  rootDisk.id=UUID.randomUUID().toString();  rootDisk.documentSelfLink=rootDisk.id;  rootDisk.type=DiskService.DiskType.HDD;  rootDisk.sourceImageReference=URI.create(DEFAULT_IMAGE_REFERENCE);  rootDisk.bootOrder=1;  rootDisk.documentSelfLink=rootDisk.id;  TestUtils.doPost(host,rootDisk,DiskService.DiskState.class,UriUtils.buildUri(host,DiskService.FACTORY_LINK));  vmDisks.add(UriUtils.buildUriPath(DiskService.FACTORY_LINK,rootDisk.id));  ComputeService.ComputeState resource=new ComputeService.ComputeState();  resource.id=String.valueOf(new Random().nextLong());  resource.name=gcpVMName;  resource.documentUpdateTimeMicros=Utils.getNowMicrosUtc();  resource.parentLink=parentLink;  resource.descriptionLink=vmComputeDesc.documentSelfLink;  resource.resourcePoolLink=resourcePoolLink;  resource.diskLinks=vmDisks;  resource.documentSelfLink=resource.id;  resource.customProperties=new HashMap<>();  return TestUtils.doPost(host,resource,ComputeService.ComputeState.class,UriUtils.buildUri(host,ComputeService.FACTORY_LINK));}  }
class C{  public boolean forEachValue(TIntProcedure procedure){  byte[] states=_states;  int[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  private Operation buildImageDatastoreSetQuery(final State current){  QueryTask.Query kindClause=new QueryTask.Query().setTermPropertyName(ServiceDocument.FIELD_NAME_KIND).setTermMatchValue(Utils.buildKind(DatastoreService.State.class));  QueryTask.Query imageDatastoreClause=new QueryTask.Query().setTermPropertyName("isImageDatastore").setTermMatchValue("true");  QueryTask.QuerySpecification querySpecification=new QueryTask.QuerySpecification();  querySpecification.query.addBooleanClause(kindClause);  querySpecification.query.addBooleanClause(imageDatastoreClause);  querySpecification.options=EnumSet.of(QueryTask.QuerySpecification.QueryOption.EXPAND_CONTENT);  return ((CloudStoreHelperProvider)getHost()).getCloudStoreHelper().createBroadcastPost(ServiceUriPaths.CORE_LOCAL_QUERY_TASKS,ServiceUriPaths.DEFAULT_NODE_SELECTOR).setBody(QueryTask.create(querySpecification).setDirect(true));}  }
class C{  public boolean accept(final IBindingSet bs){  XSDBooleanIV left, right;  try {    left=get(0).get(bs);  } catch (  SparqlTypeErrorException ex) {    left=null;  }  try {    right=get(1).get(bs);  } catch (  SparqlTypeErrorException ex) {    right=null;  }  if (left == null || right == null) {    if (left != null && left.booleanValue())     return true;    if (right != null && right.booleanValue())     return true;    throw new SparqlTypeErrorException();  }  return left.booleanValue() || right.booleanValue();}  }
class C{  protected final void doBracketMatching(){  if (match != null) {    repaint(match);  }  int pos=RSyntaxUtilities.getMatchingBracketPosition(this);  if (pos > -1 && pos != lastBracketMatchPos) {    try {      match=modelToView(pos);      if (match != null) {        if (getAnimateBracketMatching()) {          bracketRepaintTimer.restart();        }        repaint(match);      }    } catch (    BadLocationException ble) {      ble.printStackTrace();    }  } else   if (pos == -1) {    match=null;    bracketRepaintTimer.stop();  }  lastBracketMatchPos=pos;}  }
class C{  public void test_setIntLjava_lang_ObjectII(){  int[] x={0};  boolean thrown=false;  try {    Array.setInt(x,0,(int)1);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,Array.getInt(x,0));  try {    Array.setInt(new Object(),0,(int)9);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    Array.setInt(x,4,(int)9);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    Array.setInt(null,0,0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  private void updateContact(int index){  Contact contact=contacts.get(index);  Intent intent=new Intent(this,ViewActivity.class);  intent.putExtra("CONTACT",contact);  startActivity(intent);}  }
class C{  private <T extends SpatialComparable>void binarySplitSort(List<T> objs,final int start,final int end,int depth,final int numdim,int[] dims,Sorter comp){  final int mid=start + ((end - start) >>> 1);  comp.setDimension(dims != null ? dims[depth] : depth);  QuickSelect.quickSelect(objs,comp,start,end,mid);  final int nextdim=(depth + 1) % numdim;  if (start < mid - 1) {    binarySplitSort(objs,start,mid,nextdim,numdim,dims,comp);  }  if (mid + 2 < end) {    binarySplitSort(objs,mid + 1,end,nextdim,numdim,dims,comp);  }}  }
class C{  public HashIsoSurface(VolumetricSpace volume){  this(volume,0.5f);}  }
class C{  public static CellWorld<Double> createCellWorldForFig17_1(){  CellWorld<Double> cw=new CellWorld<Double>(4,3,-0.04);  cw.removeCell(2,2);  cw.getCellAt(4,3).setContent(1.0);  cw.getCellAt(4,2).setContent(-1.0);  return cw;}  }
class C{  public KeyGenerationParameters(SecureRandom random,int strength){  this.random=random;  this.strength=strength;}  }
class C{  public static JavaFXBinder<Float> bind(WritableFloatValue writableDoubleValue){  requireNonNull(writableDoubleValue,"writableDoubleValue");  return new DefaultJavaFXBinder(writableDoubleValue);}  }
class C{  public final void removeRequired(String var1,String var2){  if (requiredEdges.contains(new KnowledgeEdge(var1,var2))) {    requiredEdges.remove(new KnowledgeEdge(var1,var2));    this.generateRequiredEdgeSet();  }}  }
class C{  public Collection<String> listOperationDescriptions(){  List<String> list=new ArrayList<String>();  try {    MBeanOperationInfo[] operations=beanInfo.getOperations();    for (    MBeanOperationInfo operation : operations) {      list.add(describeOperation(operation));    }  } catch (  Exception e) {    throwException("Could not list operation descriptions. Reason: ",e);  }  return list;}  }
class C{  public void testSetErrorCode() throws StunException {  char errorCode=(char)(MsgFixture.ERROR_CLASS * 100 + MsgFixture.ERROR_NUMBER);  errorCodeAttribute.setErrorCode(errorCode);  assertEquals("An error class was not properly set after decoding an error code.",(int)MsgFixture.ERROR_CLASS,(int)errorCodeAttribute.getErrorClass());  assertEquals("An error number was not properly set after decoding an error code.",(int)MsgFixture.ERROR_NUMBER,(int)errorCodeAttribute.getErrorNumber());}  }
class C{  @Override public void deallocateBwForAllContainers(){  super.deallocateBwForAllContainers();  getContainerBwTable().clear();}  }
class C{  public AffineTransformation(AffineTransformation trans){  setTransformation(trans);}  }
class C{  protected ContentProtection parseContentProtection(XmlPullParser xpp) throws XmlPullParserException, IOException {  String schemeIdUri=xpp.getAttributeValue(null,"schemeIdUri");  UUID uuid=null;  byte[] data=null;  do {    xpp.next();    if (ParserUtil.isStartTag(xpp,"cenc:pssh") && xpp.next() == XmlPullParser.TEXT) {      byte[] decodedData=Base64.decode(xpp.getText(),Base64.DEFAULT);      ParsableByteArray psshAtom=new ParsableByteArray(decodedData);      byte[] header=new byte[12];      psshAtom.readBytes(header,0,12);      if (header == new byte[]{0,0,0,91,112,115,115,104,0,0,0,0}) {        uuid=new UUID(psshAtom.readLong(),psshAtom.readLong());        int dataSize=psshAtom.readInt();        if (dataSize <= decodedData.length) {          data=new byte[dataSize];          psshAtom.readBytes(data,0,dataSize);        }      } else {        data=decodedData;        String manifestUuid=schemeIdUri.substring(schemeIdUri.lastIndexOf(":") + 1).replace("-","");        uuid=new UUID(ByteBuffer.wrap(hexStringToByteArray(manifestUuid.substring(0,16))).getLong(),ByteBuffer.wrap(hexStringToByteArray(manifestUuid.substring(16,32))).getLong());      }    }  } while (!ParserUtil.isEndTag(xpp,"ContentProtection"));  return buildContentProtection(schemeIdUri,uuid,data);}  }
class C{  @SuppressWarnings("deprecation") protected double eval(HashMap<String,Double> symbols){  SymbolFactory sf;  ByteArrayInputStream parserInput;  Parser parser;  double result;  try {    sf=new DefaultSymbolFactory();    parserInput=new ByteArrayInputStream(m_expression.getBytes());    parser=new Parser(new Scanner(parserInput,sf),sf);    parser.setSymbols(symbols);    parser.parse();    result=parser.getResult();  } catch (  Exception e) {    result=Double.NaN;    e.printStackTrace();  }  return result;}  }
class C{  public static boolean isPrimitiveOrArrayOfPrimitives(final @Nullable String typeQName){  if (typeQName == null) {    return false;  }  return PRIMITIVES_NAMES.contains(deleteArraySigns(typeQName));}  }
class C{  public ImageTypeSpecifier(ColorModel colorModel,SampleModel sampleModel){  if (colorModel == null) {    throw new IllegalArgumentException("colorModel == null!");  }  if (sampleModel == null) {    throw new IllegalArgumentException("sampleModel == null!");  }  if (!colorModel.isCompatibleSampleModel(sampleModel)) {    throw new IllegalArgumentException("sampleModel is incompatible with colorModel!");  }  this.colorModel=colorModel;  this.sampleModel=sampleModel;}  }
class C{  public Asinh(){  super(Number.class,Number.class);}  }
class C{  public static List<org.oscm.vo.VOParameterDefinition> convertToApiVOParameterDefinition(List<org.oscm.internal.vo.VOParameterDefinition> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.vo.VOParameterDefinition> newVO=new ArrayList<org.oscm.vo.VOParameterDefinition>();  for (  org.oscm.internal.vo.VOParameterDefinition tmp : oldVO) {    newVO.add(convertToApi(tmp));  }  return newVO;}  }
class C{  public SearchCollectionPage(final BaseSearchCollectionResponse response,final ISearchRequestBuilder builder){  super(response,builder);}  }
class C{  public boolean equals(Object o){  if (!(o instanceof RegularEnumSet))   return super.equals(o);  RegularEnumSet<?> es=(RegularEnumSet<?>)o;  if (es.elementType != elementType)   return elements == 0 && es.elements == 0;  return es.elements == elements;}  }
class C{  public EclipseAST(CompilationUnitDeclaration ast){  super(toFileName(ast),packageDeclaration(ast),new EclipseImportList(ast));  this.compilationUnitDeclaration=ast;  setTop(buildCompilationUnit(ast));  this.completeParse=isComplete(ast);  clearChanged();}  }
class C{  public static int byteOnDisk(int numberOfDimensions,int numberOfPartitions){  return (int)(Math.ceil(numberOfDimensions * ((Math.log(numberOfPartitions) / Math.log(2))) + 32) / ByteArrayUtil.SIZE_DOUBLE);}  }
class C{  public boolean hasHref(){  return getHref() != null;}  }
class C{  public BLEUAfterPrefixMetric(List<List<Sequence<IString>>> referencesList,int order){  super(excludePrefix(referencesList,order),order);  if (referencesList == null || referencesList.size() < 1 || referencesList.get(0).size() < 2) {    throw new RuntimeException("BLEUAfterPrefixMetric requires at least two arguments: the prefix file and one reference.");  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int i=0;  int rows, cols;  double p1=0, p2=0, p3=0, p4=0;  int a;  int numCols;  int numRows;  int progress;  double halfPI=Math.PI / 2;  double outputVal;  double smallVal=-9999999;  double largeVal=9999999;  int row, col;  String modelType="sigmoidal";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      if (args[i].toLowerCase().contains("linear")) {        modelType="linear";      } else {        modelType="sigmoidal";      }    } else     if (i == 3) {      if (args[i].toLowerCase().equals("not specified")) {        p1=smallVal;      } else {        p1=Double.parseDouble(args[i]);      }    } else     if (i == 4) {      if (args[i].toLowerCase().equals("not specified")) {        p2=smallVal;      } else {        p2=Double.parseDouble(args[i]);      }    } else     if (i == 5) {      if (args[i].toLowerCase().equals("not specified")) {        p3=largeVal;      } else {        p3=Double.parseDouble(args[i]);      }    } else     if (i == 6) {      if (args[i].toLowerCase().equals("not specified")) {        p4=largeVal;      } else {        p4=Double.parseDouble(args[i]);      }    }  }  if (inputHeader == null || outputHeader == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if ((p1 == smallVal && p2 != smallVal) || (p1 != smallVal && p2 == smallVal) || (p3 == largeVal && p4 != largeVal)|| (p3 != largeVal && p4 == largeVal)) {    showFeedback("Sigmoid parameters not set properly");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setPreferredPalette("spectrum.pal");    double range1=p2 - p1;    double range2=p4 - p3;    double[] data=null;    if (modelType.equals("sigmoidal")) {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            if (data[col] <= p1) {              outputVal=0;            } else             if (data[col] > p1 && data[col] < p2) {              outputVal=1 - Math.cos(((data[col] - p1)) / range1 * halfPI) * Math.cos(((data[col] - p1)) / range1 * halfPI);            } else             if (data[col] >= p2 && data[col] <= p3) {              outputVal=1;            } else             if (data[col] > p3 && data[col] < p4) {              outputVal=(Math.cos((data[col] - p3) / range2 * halfPI) * Math.cos((data[col] - p3) / range2 * halfPI));            } else {              outputVal=0;            }            output.setValue(row,col,outputVal);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            if (data[col] <= p1) {              outputVal=0;            } else             if (data[col] > p1 && data[col] < p2) {              outputVal=(data[col] - p1) / range1;            } else             if (data[col] >= p2 && data[col] <= p3) {              outputVal=1;            } else             if (data[col] > p3 && data[col] < p4) {              outputVal=1 - (data[col] - p3) / range2;            } else {              outputVal=0;            }            output.setValue(row,col,outputVal);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    image.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static byte[] stringToByte(String string){  try {    com.sun.org.apache.xml.internal.security.Init.init();    return Base64.decode(string);  } catch (  Base64DecodingException e) {    throw new RuntimeException(e);  }}  }
class C{  void render(GraphicsContext g,Point2D viewportOrigin){  g.setGlobalAlpha(life);  g.setGlobalBlendMode(blendMode);  if (image != null) {    g.save();    g.translate(x - viewportOrigin.getX(),y - viewportOrigin.getY());    g.scale(radiusX * 2 / image.getWidth(),radiusY * 2 / image.getHeight());    g.drawImage(image,0,0);    g.restore();  } else {    g.setFill(color);    g.fillOval(x - viewportOrigin.getX(),y - viewportOrigin.getY(),radiusX * 2,radiusY * 2);  }}  }
class C{  public boolean isUnique(){  return unique;}  }
class C{  @Override public boolean equivalent(IMFBaseResourceType other){  if (other == null || !(other instanceof IMFMarkerResourceType)) {    return false;  }  IMFMarkerResourceType otherMarkerResource=IMFMarkerResourceType.class.cast(other);  boolean result=true;  result&=super.equivalent(otherMarkerResource);  List<IMFMarkerType> otherMarkerList=otherMarkerResource.getMarkerList();  if (otherMarkerList.size() != this.markerList.size()) {    return false;  }  for (int i=0; i < this.markerList.size(); i++) {    IMFMarkerType thisMarker=this.markerList.get(i);    IMFMarkerType otherMarker=otherMarkerList.get(i);    result&=thisMarker.equivalent(otherMarker);  }  return result;}  }
class C{  public static Long[] transformLongArray(long[] source){  Long[] destin=new Long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public boolean modelBuilt(){  return m_bModelBuilt;}  }
class C{  public int elementAt(int i){  if (null == m_map)   return DTM.NULL;  return m_map[i];}  }
class C{  public static State valueOf(int value){  State state=mValueToEnum.get(value);  if (state != null) {    return state;  }  throw new IllegalArgumentException("No enum const class " + State.class.getName() + ""+ value+ "!");}  }
class C{  public CipherTextIvMac(byte[] c,byte[] i,byte[] h){  cipherText=new byte[c.length];  System.arraycopy(c,0,cipherText,0,c.length);  iv=new byte[i.length];  System.arraycopy(i,0,iv,0,i.length);  mac=new byte[h.length];  System.arraycopy(h,0,mac,0,h.length);}  }
class C{  public byte[] readRawBytes(final int size) throws IOException {  if (size < 0) {    throw InvalidProtocolBufferNanoException.negativeSize();  }  if (bufferPos + size > currentLimit) {    skipRawBytes(currentLimit - bufferPos);    throw InvalidProtocolBufferNanoException.truncatedMessage();  }  if (size <= bufferSize - bufferPos) {    final byte[] bytes=new byte[size];    System.arraycopy(buffer,bufferPos,bytes,0,size);    bufferPos+=size;    return bytes;  } else {    throw InvalidProtocolBufferNanoException.truncatedMessage();  }}  }
class C{  public void paintSplitPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public NotificationChain basicSetLeftOperand(Expression newLeftOperand,NotificationChain msgs){  Expression oldLeftOperand=leftOperand;  leftOperand=newLeftOperand;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION__LEFT_OPERAND,oldLeftOperand,newLeftOperand);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public ProductListInfo(String name){  m_sName=name;}  }
class C{  public TaskBuilder realTime(){  this.isRealTime=true;  return this;}  }
class C{  private Vector loadOriginalConfig(Long configId,InstructionalOfferingConfigEditForm frm) throws Exception {  InstrOfferingConfigDAO cfgDao=new InstrOfferingConfigDAO();  InstrOfferingConfig config=cfgDao.get(configId);  frm.setLimit(config.getLimit().intValue());  Vector sp=toSimpleItypeConfig(config);  if (sp != null && sp.size() > 0)   Collections.sort(sp,new SicComparator());  return sp;}  }
class C{  public T style(String value){  return attr("style",value);}  }
class C{  private void deleteMessage(MessageTemplatePojo template,MessageBoxPojo message,String result) throws DaoException {  if (GlobalConstants.YES.equals(template.getSaveHistory())) {    Calendar calendar=Calendar.getInstance();    MessageHistoryPojo history=new MessageHistoryPojo();    history.setAttachmentsNum(message.getAttachmentsNum());    history.setContent(message.getContent());    history.setCreateTime(message.getCreateTime());    history.setMessageId(message.getMessageId());    history.setMessageTemplateId(message.getMessageTemplateId());    history.setMessageType(message.getMessageType());    history.setReceivers(message.getReceivers());    history.setResult(result);    history.setSender(message.getSender());    history.setSendTime(calendar.getTime());    history.setSendTimes(message.getSendTimes());    history.setSubject(message.getSubject());    if (template.getSaveDay() != null && template.getSaveDay() >= 1) {      calendar.add(Calendar.DAY_OF_YEAR,template.getSaveDay());      history.setExpDate(calendar.getTime());    }    messageHistoryDao.saveHistory(history);  }  messageBoxDao.delete(message);}  }
class C{  protected void processVmCreate(SimEvent ev,boolean ack){  Vm vm=(Vm)ev.getData();  boolean result=getVmAllocationPolicy().allocateHostForVm(vm);  if (ack) {    int[] data=new int[3];    data[0]=getId();    data[1]=vm.getId();    if (result) {      data[2]=CloudSimTags.TRUE;    } else {      data[2]=CloudSimTags.FALSE;    }    send(vm.getUserId(),CloudSim.getMinTimeBetweenEvents(),CloudSimTags.VM_CREATE_ACK,data);  }  if (result) {    getVmList().add(vm);    if (vm.isBeingInstantiated()) {      vm.setBeingInstantiated(false);    }    vm.updateVmProcessing(CloudSim.clock(),getVmAllocationPolicy().getHost(vm).getVmScheduler().getAllocatedMipsForVm(vm));  }}  }
class C{  public InspectableFileCachedInputStream() throws IOException {  this(DEFAULT_BUFFER_SIZE);}  }
class C{  public static String formatException(Exception exc){  StringWriter stringWriter=new StringWriter();  PrintWriter printWriter=new PrintWriter(stringWriter);  exc.printStackTrace(printWriter);  try {    stringWriter.close();  } catch (  IOException ex) {  }  return stringWriter.toString();}  }
class C{  public EditableOMRangeRings(OMRangeRings omc){  setGraphic(omc);}  }
class C{  public K key(){  return (K)_map._set[_index];}  }
class C{  public INode contains(INode n){  return closed.contains(n);}  }
class C{  @Override public void run(){  amIActive=true;  int row, col, x, y;  float progress=0;  double z;  int i, b, c, ICLCA;  boolean flag=false;  double flowDir=0;  double outletID=0;  double SCAValue;  double maxSCA, d1, d2;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String pointerHeader=args[0];  String caHeader=args[1];  String outputHeader=args[2];  double SCAThreshold=Double.parseDouble(args[3]);  if (pointerHeader.isEmpty() || caHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointer=new WhiteboxRaster(pointerHeader,"r");    int rows=pointer.getNumberRows();    int cols=pointer.getNumberColumns();    double noData=pointer.getNoDataValue();    String tempFile=caHeader.replace(".dep","_temp.dep");    FileUtilities.copyFile(new File(caHeader),new File(tempFile));    FileUtilities.copyFile(new File(caHeader.replace(".dep",".tas")),new File(tempFile.replace(".dep",".tas")));    contArea=new WhiteboxRaster(tempFile,"rw");    contArea.isTemporaryFile=true;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",caHeader,WhiteboxRaster.DataType.FLOAT,-999);    output.setDataScale(WhiteboxRasterBase.DataScale.CATEGORICAL);    output.setPreferredPalette("categorical1.pal");    outletID=1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (pointer.getValue(row,col) != noData) {          flag=false;          for (i=0; i < 8; i++) {            if (pointer.getValue(col + dX[i],row + dY[i]) == inflowingVals[i]) {              flag=true;            }          }          if (!flag) {            flag=false;            x=col;            y=row;            do {              flowDir=pointer.getValue(y,x);              if (flowDir > 0) {                i=(int)(Math.log(flowDir) / LnOf2);                x+=dX[i];                y+=dY[i];              } else {                flag=true;              }              SCAValue=contArea.getValue(y,x);              if (SCAValue >= SCAThreshold) {                maxSCA=-99999;                ICLCA=8;                for (i=0; i < 8; i++) {                  b=x + dX[i];                  c=y + dY[i];                  if (pointer.getValue(c,b) == inflowingVals[i]) {                    z=contArea.getValue(c,b);                    if (z > maxSCA) {                      maxSCA=z;                      ICLCA=i;                    }                  }                }                b=x + dX[ICLCA];                c=y + dY[ICLCA];                if (contArea.getValue(c,b) > SCAThreshold) {                  flag=true;                } else {                  d1=Math.abs(contArea.getValue(c,b) - SCAThreshold);                  d2=Math.abs(contArea.getValue(y,x) - SCAThreshold);                  if (d1 < d2) {                    output.setValue(c,b,outletID);                    decrementFlowpath(c,b,contArea.getValue(c,b));                  } else {                    output.setValue(y,x,outletID);                    decrementFlowpath(y,x,contArea.getValue(y,x));                  }                  outletID++;                }              }            } while (!flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (output.getValue(row,col) == -999 && pointer.getValue(row,col) != noData) {          flag=false;          x=col;          y=row;          do {            flowDir=pointer.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != -999) {                outletID=z;                flag=true;              }            } else {              outletID=noData;              flag=true;            }          } while (!flag);          flag=false;          x=col;          y=row;          output.setValue(y,x,outletID);          do {            flowDir=pointer.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != -999) {                flag=true;              }            } else {              flag=true;            }            output.setValue(y,x,outletID);          } while (!flag);        } else         if (pointer.getValue(row,col) == noData) {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pointer.close();    contArea.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void updateOption(final String optionId,final JSONObject option) throws ServiceException {  final Transaction transaction=optionRepository.beginTransaction();  try {    optionRepository.update(optionId,option);    transaction.commit();  } catch (  final RepositoryException e) {    if (transaction.isActive()) {      transaction.rollback();    }    LOGGER.log(Level.ERROR,"Updates an option[id=" + optionId + "] failed",e);    throw new ServiceException(e);  }}  }
class C{  public static OutputAnalyzer jps(String... toolArgs) throws Exception {  return jps(null,Arrays.asList(toolArgs));}  }
class C{  public JPanelCloseMoney(){  initComponents();}  }
class C{  public void modifyHostLunHlu(String hostId,String hostLunId,int hlu){  HostRequest req=new HostRequest(_khClient,hostId);  ModifyHostLUNsParam param=new ModifyHostLUNsParam();  HostLunModifyParam hostLunParam=new HostLunModifyParam();  hostLunParam.setHlu(hlu);  VNXeBase hostLun=new VNXeBase(hostLunId);  hostLunParam.setHostLun(hostLun);  List<HostLunModifyParam> parmList=new ArrayList<HostLunModifyParam>();  parmList.add(hostLunParam);  param.setHostLunModifyList(parmList);  req.modifyHostLun(param);}  }
class C{  public EEXECEncryption(OutputStream out){  this(out,EEXEC_R,N);}  }
class C{  protected void updateSprings(){  if (springs.size() > 0) {    for (int i=numIterations; i > 0; i--) {      for (      VerletSpring3D s : springs) {        s.update(i == 1);      }    }  }}  }
class C{  @DSComment("Potential intent to trigger other processing") @DSSafe(DSCat.INTENT_EXCHANGE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.463 -0500",hash_original_method="D504428E6A64263CB337167E8E11D24B",hash_generated_method="F6A29E038B705BB14118CC4BC5C94282") public Intent putExtra(String name,short value){  mExtras.put(name,value);  return this;}  }
class C{  public static Bitmap loadBitmapOptimized(Uri uri,Context context) throws ImageLoadException {  return loadBitmapOptimized(uri,context,MAX_PIXELS);}  }
class C{  public DeviceAutomator pressRecentApps(){  try {    mDevice.pressRecentApps();  } catch (  RemoteException e) {    throw new RuntimeException(e);  }  return this;}  }
class C{  @Override public String toJSONString(){  return toJSONString(this);}  }
class C{  @SuppressWarnings("rawtypes") public static String toString(final IV iv){  if (iv == null)   return IRawTripleStore.NULLSTR;  return iv.toString();}  }
class C{  public boolean remove(Class<?> category){  return category != null && AttributeSetUtilities.verifyAttributeCategory(category,Attribute.class) != null && attrMap.remove(category) != null;}  }
class C{  public Array(Array array){  this(array.ordered,array.size,(Class<T>)array.items.getClass().getComponentType());  size=array.size;  System.arraycopy(array.items,0,items,0,size);}  }
class C{  void checkActiveOrSuspendedWithMarketplaceOwner(VOServiceEntry service,String marketplaceId) throws OperationNotPermittedException {  if (service.getStatus() == ServiceStatus.ACTIVE) {    return;  }  if (service.getStatus() == ServiceStatus.SUSPENDED) {    if (!isMarketplaceOwnedByCurrentUser(marketplaceId)) {      throw new OperationNotPermittedException();    }  }}  }
class C{  public GetRepositoriesRequestBuilder addRepositories(String... repositories){  request.repositories(ObjectArrays.concat(request.repositories(),repositories,String.class));  return this;}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  int previewFormat=configManager.getPreviewFormat();  String previewFormatString=configManager.getPreviewFormatString();switch (previewFormat) {case PixelFormat.YCbCr_420_SP:case PixelFormat.YCbCr_422_SP:    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());default :  if ("yuv420p".equals(previewFormatString)) {    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());  }}throw new IllegalArgumentException("Unsupported picture format: " + previewFormat + '/'+ previewFormatString);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:03.635 -0500",hash_original_method="B4A6EFF0AEF4E7346E32BF1BFF73F137",hash_generated_method="EEBC88258808B4B70CDC42AD8BBDAACA") static void updateHash(int[] intArray,byte[] byteInput,int fromByte,int toByte){  int index=intArray[BYTES_OFFSET];  int i=fromByte;  int maxWord;  int nBytes;  int wordIndex=index >> 2;  int byteIndex=index & 0x03;  intArray[BYTES_OFFSET]=(index + toByte - fromByte + 1) & 077;  if (byteIndex != 0) {    for (; (i <= toByte) && (byteIndex < 4); i++) {      intArray[wordIndex]|=(byteInput[i] & 0xFF) << ((3 - byteIndex) << 3);      byteIndex++;    }    if (byteIndex == 4) {      wordIndex++;      if (wordIndex == 16) {        computeHash(intArray);        wordIndex=0;      }    }    if (i > toByte) {      return;    }  }  maxWord=(toByte - i + 1) >> 2;  for (int k=0; k < maxWord; k++) {    intArray[wordIndex]=(((int)byteInput[i] & 0xFF) << 24) | (((int)byteInput[i + 1] & 0xFF) << 16) | (((int)byteInput[i + 2] & 0xFF) << 8)| (((int)byteInput[i + 3] & 0xFF));    i+=4;    wordIndex++;    if (wordIndex < 16) {      continue;    }    computeHash(intArray);    wordIndex=0;  }  nBytes=toByte - i + 1;  if (nBytes != 0) {    int w=((int)byteInput[i] & 0xFF) << 24;    if (nBytes != 1) {      w|=((int)byteInput[i + 1] & 0xFF) << 16;      if (nBytes != 2) {        w|=((int)byteInput[i + 2] & 0xFF) << 8;      }    }    intArray[wordIndex]=w;  }  return;}  }
class C{  private boolean containsOffset(final MemoryMap memoryMap,final IAddress offset){  return ProcessHelpers.getSectionWith(memoryMap,offset) != null;}  }
class C{  public SIPHeader parse() throws ParseException {  RecordRouteList recordRouteList=new RecordRouteList();  if (debug)   dbg_enter("RecordRouteParser.parse");  try {    this.lexer.match(TokenTypes.RECORD_ROUTE);    this.lexer.SPorHT();    this.lexer.match(':');    this.lexer.SPorHT();    while (true) {      RecordRoute recordRoute=new RecordRoute();      super.parse(recordRoute);      recordRouteList.add(recordRoute);      this.lexer.SPorHT();      char la=lexer.lookAhead(0);      if (la == ',') {        this.lexer.match(',');        this.lexer.SPorHT();      } else       if (la == '\n')       break; else       throw createParseException("unexpected char");    }    return recordRouteList;  }  finally {    if (debug)     dbg_leave("RecordRouteParser.parse");  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @ApiOperation(value="Add a new member to account",notes="Add a new user to an account. This user will have account/member role. This API call requires account/owner, system/admin or system/manager role.",response=MemberDescriptor.class,position=6) @ApiResponses(value={@ApiResponse(code=204,message="OK"),@ApiResponse(code=404,message="Not Found"),@ApiResponse(code=409,message="No user ID specified"),@ApiResponse(code=500,message="Internal Server Error")}) @POST @Path("/{id}/members") @RolesAllowed({"account/owner","system/admin"}) @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response addMember(@ApiParam(value="Account ID") @PathParam("id") String accountId,@ApiParam(value="New membership",required=true) @Required NewMembership membership,@Context SecurityContext context) throws ConflictException, NotFoundException, ServerException {  requiredNotNull(membership,"New membership");  requiredNotNull(membership.getUserId(),"User ID");  requiredNotNull(membership.getRoles(),"Roles");  if (membership.getRoles().isEmpty()) {    throw new ConflictException("Roles should not be empty");  }  userDao.getById(membership.getUserId());  final Member newMember=new Member().withAccountId(accountId).withUserId(membership.getUserId()).withRoles(membership.getRoles());  accountDao.addMember(newMember);  LOG.info("EVENT#account-add-member# ACCOUNT-ID#{}# USER-ID#{}# ROLES#{}#",accountId,membership.getUserId(),membership.getRoles().toString());  return Response.status(Response.Status.CREATED).entity(toDescriptor(newMember,accountDao.getById(accountId),context)).build();}  }
class C{  protected static String stringProperty(String name,String dflt){  String val=property(name);  return val != null ? val : dflt;}  }
class C{  public static void localVarValueChanged(float newValue,String localVar,int lineNumber){  instance.localVarValueChanged(localVar,lineNumber,newValue);}  }
class C{  public TypeVariable typeVariable(){  int id=typeVariableList.size();  typeVariableList.add(null);  TypeVariable result=new TypeVariable(id,this);  typeVariableList.set(id,result);  return result;}  }
class C{  private void writeFilePostResource(Element postResourceEl,String path){  postResourceEl.setAttribute("className",JAR_RESOURCE_SET);  postResourceEl.setAttribute("base",getFileHandler().getParent(path).replace("&","&amp;"));  postResourceEl.setAttribute("internalPath",getFileHandler().getName(path).replace("&","&amp;"));}  }
class C{  public String newValue(String newValue){  return newValue;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.CATCH_VARIABLE__BINDING_PATTERN:    return bindingPattern != null;}return super.eIsSet(featureID);}  }
class C{  public LayerHandler(String prefix,Properties props){  init(prefix,props);}  }
class C{  public mxPartitionLayout(mxGraph graph,boolean horizontal,int spacing){  this(graph,horizontal,spacing,0);}  }
class C{  public static int bytesUsed(Object obj,RVMClass type){  return JavaHeader.bytesUsed(obj,type);}  }
class C{  public T caseImport(Import object){  return null;}  }
class C{  public void image(PImage image,float a,float b,float c,float d,int u1,int v1,int u2,int v2){  g.image(image,a,b,c,d,u1,v1,u2,v2);}  }
class C{  @Override public String serialize(final boolean includingBuiltIn){  final StringBuilder sb=new StringBuilder();  for (  final FacetProto f : possibleFacets.values()) {    final String s=f.serialize(includingBuiltIn);    if (!s.isEmpty()) {      sb.append(s).append(" ");    }  }  return getName() + " " + sb.toString();}  }
class C{  public static ClusterGroupEmptyCheckedException emptyTopologyException(){  return new ClusterGroupEmptyCheckedException("Cluster group is empty.");}  }
class C{  @Override public void layerMoved(final MapLayerListEvent event){  redrawBaseImage=true;  if (!isDisposed())   redraw();}  }
class C{  public boolean validateGitUrl(final String gitRemoteUrl){  try {    final String gitUrlToParse;    if (UrlHelper.isSshGitRemoteUrl(gitRemoteUrl)) {      gitUrlToParse=UrlHelper.getHttpsGitUrlFromSshUrl(gitRemoteUrl);    } else {      gitUrlToParse=gitRemoteUrl;    }    if (getVstsInfoForGit(gitUrlToParse)) {      return true;    }    final UrlHelper.ParseResult uriParseResult=UrlHelper.tryParse(gitUrlToParse,this);    if (uriParseResult.isSuccess()) {      return true;    }  } catch (  Throwable t) {    logger.warn("validate: {} of git remote url failed",gitRemoteUrl);    logger.warn("validate: unexpected exception ",t);  }  logger.info("validateGitUrl: failed to get VSTS repo, project and collection info");  return false;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:43.206 -0500",hash_original_method="7C0EA5C3612B6B07D60F3A7E9A05393C",hash_generated_method="A0CD67C0024A67AF6FE62D0CDBFBCB76") public void close() throws IOException {  if (!closed) {    try {      if (!eof) {        exhaustInputStream(this);      }    }  finally {      eof=true;      closed=true;    }  }}  }
class C{  public RecordCompressor(final int level){  _deflater=new Deflater(level);  this.level=level;}  }
class C{  public static Test suite(){  return (new TestSuite(CompositeComponentsWithEE6DependenciesITCase.class));}  }
class C{  public void newObservers(){  observers=new LinkedHashSet<>();}  }
class C{  private boolean isLastItemDisplayed(){  return mLoadingAdapter.getItemCount() == 0 || mLayoutManager.findLastVisibleItemPosition() == (mLoadingAdapter.getItemCount() - 1);}  }
class C{  public static boolean isSuper(int flags){  return (flags & AccSuper) != 0;}  }
class C{  @Override public void startPrefixMapping(String alias,String uri){  Stack<NamespaceDecl> mapping=namespaceMap.get(alias);  if (mapping == null) {    mapping=new Stack<NamespaceDecl>();    namespaceMap.put(alias,mapping);  }  XmlNamespace ns=new XmlNamespace(alias,uri);  NamespaceDecl nsDecl=new NamespaceDecl(ns);  mapping.push(nsDecl);  elementNamespaces.add(ns);}  }
class C{  public char last(){  return reorderedACI.last();}  }
class C{  public DragSortController(DragSortListView dslv,int dragHandleId,int dragInitMode,int removeMode,int clickRemoveId,int flingHandleId){  super(dslv);  mDslv=dslv;  mDetector=new GestureDetector(dslv.getContext(),this);  mFlingRemoveDetector=new GestureDetector(dslv.getContext(),mFlingRemoveListener);  mFlingRemoveDetector.setIsLongpressEnabled(false);  mTouchSlop=ViewConfiguration.get(dslv.getContext()).getScaledTouchSlop();  mDragHandleId=dragHandleId;  mClickRemoveId=clickRemoveId;  mFlingHandleId=flingHandleId;  setRemoveMode(removeMode);  setDragInitMode(dragInitMode);}  }
class C{  public final void testOnRestoreInstanceState(){  CharSequence errorMessage="errorMessage";  Validator<CharSequence> validator=Validators.notEmpty(errorMessage);  AbstractValidateableViewImplementation abstractValidateableView=new AbstractValidateableViewImplementation(getContext());  abstractValidateableView.addValidator(validator);  abstractValidateableView.validateOnValueChange(false);  abstractValidateableView.validateOnFocusLost(false);  abstractValidateableView.validate();  Parcelable parcelable=abstractValidateableView.onSaveInstanceState();  AbstractValidateableViewImplementation restoredAbstractValidateableView=new AbstractValidateableViewImplementation(getContext());  restoredAbstractValidateableView.addValidator(validator);  restoredAbstractValidateableView.onRestoreInstanceState(parcelable);  assertFalse(restoredAbstractValidateableView.isValidatedOnValueChange());  assertFalse(restoredAbstractValidateableView.isValidatedOnFocusLost());  assertEquals(errorMessage,restoredAbstractValidateableView.getError());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hasAttributeNS01.class,args);}  }
class C{  private void verifyTriggerProcessStatus(TriggerProcess triggerProcess,TriggerProcessStatus... statusArray) throws TriggerProcessStatusException {  if (statusArray != null) {    for (int i=0; i < statusArray.length; i++) {      if (triggerProcess.getStatus() == statusArray[i]) {        return;      }    }    TriggerProcessStatusException e=new TriggerProcessStatusException("Invalid trigger process status '" + triggerProcess.getStatus() + "'.",triggerProcess.getStatus());    logger.logError(Log4jLogger.SYSTEM_LOG | Log4jLogger.AUDIT_LOG,e,LogMessageIdentifier.ERROR_INVALID_STATUS_TRIGGER_PROCESS,String.valueOf(triggerProcess.getStatus()));    sessionCtx.setRollbackOnly();    throw e;  }}  }
class C{  @Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){  mItemName=getString(CATALOG[position].nameId);  mSku=CATALOG[position].sku;  mManagedType=CATALOG[position].managed;}  }
class C{  @SuppressWarnings("unchecked") public static <A>Set<A> empty(){  return (Set)EMPTY;}  }
class C{  protected String compute(Date dateDate,String patternString,String localeString){  if (dateDate == null || patternString == null || localeString == null) {    return null;  }  Locale locale=new Locale(localeString);  SimpleDateFormat simpleDateFormatter;  try {    simpleDateFormatter=new SimpleDateFormat(patternString,locale);  } catch (  IllegalArgumentException e) {    throw new FunctionInputException("invalid_argument.custom_format",getFunctionName());  }  String result=simpleDateFormatter.format(dateDate);  return result;}  }
class C{  public int subtreeDepth() throws UnsupportedOperationException {  throw new UnsupportedOperationException("subtreeDepth() not supported for OIDName.");}  }
class C{  protected NondominatedPopulation runSingleSeed(int seed,int numberOfSeeds,int maxEvaluations){  if (algorithmName == null) {    throw new IllegalArgumentException("no algorithm specified");  }  if ((problemName == null) && (problemClass == null)) {    throw new IllegalArgumentException("no problem specified");  }  Problem problem=null;  Algorithm algorithm=null;  ExecutorService executor=null;  try {    problem=getProblemInstance();    try {      if (executorService != null) {        problem=new DistributedProblem(problem,executorService);      } else       if (numberOfThreads > 1) {        executor=Executors.newFixedThreadPool(numberOfThreads);        problem=new DistributedProblem(problem,executor);      }      NondominatedPopulation result=newArchive();      try {        if (algorithmFactory == null) {          algorithm=AlgorithmFactory.getInstance().getAlgorithm(algorithmName,properties.getProperties(),problem);        } else {          algorithm=algorithmFactory.getAlgorithm(algorithmName,properties.getProperties(),problem);        }        if (checkpointFile != null) {          algorithm=new Checkpoints(algorithm,checkpointFile,checkpointFrequency);        }        if (instrumenter != null) {          algorithm=instrumenter.instrument(algorithm);        }        while (!algorithm.isTerminated() && (algorithm.getNumberOfEvaluations() < maxEvaluations)) {          if (isCanceled.get()) {            return null;          }          algorithm.step();          progress.setCurrentNFE(algorithm.getNumberOfEvaluations());        }        result.addAll(algorithm.getResult());      }  finally {        if (algorithm != null) {          algorithm.terminate();        }      }      return result;    }  finally {      if (executor != null) {        executor.shutdown();      }    }  }  finally {    if (problem != null) {      problem.close();    }  }}  }
class C{  public Instrumenter attachContributionCollector(){  includeContribution=true;  return this;}  }
class C{  public void loadLocal(final int local,final Type type){  setLocalType(local,type);  loadInsn(type,local);}  }
class C{  public EchoBreakpointsRemovedReply(final int packetId,final int errorCode,final List<Pair<RelocatedAddress,Integer>> addresses){  super(packetId,errorCode,addresses);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.YIELD_EXPRESSION__EXPRESSION:    return expression != null;case N4JSPackage.YIELD_EXPRESSION__MANY:  return many != MANY_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  private void orthes(){  int low=0;  int high=n - 1;  for (int m=low + 1; m <= high - 1; m++) {    double scale=0.0;    for (int i=m; i <= high; i++) {      scale=scale + Math.abs(H[i][m - 1]);    }    if (scale != 0.0) {      double h=0.0;      for (int i=high; i >= m; i--) {        ort[i]=H[i][m - 1] / scale;        h+=ort[i] * ort[i];      }      double g=Math.sqrt(h);      if (ort[m] > 0) {        g=-g;      }      h=h - ort[m] * g;      ort[m]=ort[m] - g;      for (int j=m; j < n; j++) {        double f=0.0;        for (int i=high; i >= m; i--) {          f+=ort[i] * H[i][j];        }        f=f / h;        for (int i=m; i <= high; i++) {          H[i][j]-=f * ort[i];        }      }      for (int i=0; i <= high; i++) {        double f=0.0;        for (int j=high; j >= m; j--) {          f+=ort[j] * H[i][j];        }        f=f / h;        for (int j=m; j <= high; j++) {          H[i][j]-=f * ort[j];        }      }      ort[m]=scale * ort[m];      H[m][m - 1]=scale * g;    }  }  for (int i=0; i < n; i++) {    for (int j=0; j < n; j++) {      V[i][j]=(i == j ? 1.0 : 0.0);    }  }  for (int m=high - 1; m >= low + 1; m--) {    if (H[m][m - 1] != 0.0) {      for (int i=m + 1; i <= high; i++) {        ort[i]=H[i][m - 1];      }      for (int j=m; j <= high; j++) {        double g=0.0;        for (int i=m; i <= high; i++) {          g+=ort[i] * V[i][j];        }        g=(g / ort[m]) / H[m][m - 1];        for (int i=m; i <= high; i++) {          V[i][j]+=g * ort[i];        }      }    }  }}  }
class C{  @Modifying @Transactional public void deleteCheque(@PathVariable Long chequeID){  chequeRepository.delete(chequeID);  photoRepository.deleteByChequeId(chequeID.toString());}  }
class C{  protected void drawRangeLine(Graphics2D g2,Rectangle2D dataArea,double value,Stroke stroke,Paint paint){  double java2D=getRangeAxis().valueToJava2D(value,dataArea,getRangeAxisEdge());  Line2D line=null;  if (this.orientation == PlotOrientation.HORIZONTAL) {    line=new Line2D.Double(java2D,dataArea.getMinY(),java2D,dataArea.getMaxY());  } else   if (this.orientation == PlotOrientation.VERTICAL) {    line=new Line2D.Double(dataArea.getMinX(),java2D,dataArea.getMaxX(),java2D);  }  g2.setStroke(stroke);  g2.setPaint(paint);  g2.draw(line);}  }
class C{  public void initValue(final GPO owner,final Value value){  final LinkValue newValue=new LinkValue(value);  newValue.m_next=m_values;  m_values=newValue;  m_size++;}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public TeleporterBehaviour(final SpeakerNPC speakerNPC,final List<String> setZones,final String zoneStartsWithLimiter,final String repeatedText,final boolean useHighProbabilityZones){  this(speakerNPC,setZones,zoneStartsWithLimiter,repeatedText);  if (useHighProbabilityZones) {    addHighProbability();  }}  }
class C{  public MLOutput execute(String dmlScriptFilePath,boolean parsePyDML) throws IOException, DMLException, ParseException {  return execute(dmlScriptFilePath,parsePyDML,null);}  }
class C{  private Request make(final byte[] boundary,final ReadableByteChannel body) throws IOException {  final File file=File.createTempFile(RqMultipart.class.getName(),".tmp");  try (WritableByteChannel channel=Files.newByteChannel(file.toPath(),StandardOpenOption.READ,StandardOpenOption.WRITE)){    channel.write(ByteBuffer.wrap(this.head().iterator().next().getBytes(RqMtBase.ENCODING)));    channel.write(ByteBuffer.wrap(RqMtBase.CRLF.getBytes(RqMtBase.ENCODING)));    this.copy(channel,boundary,body);  }   return new RqTemp(file);}  }
class C{  private Bitmap processBitmap(String key,int type){  Log.d(TAG,"processBitmap - " + key);  if (type == ImageData.IMAGE_TYPE_NORMAL) {    final File f=downloadBitmapToFile(mContext,key,mFetcherParams.mHttpCacheDir);    if (f != null) {      final Bitmap bitmap=decodeSampledBitmapFromFile(f.toString(),mFetcherParams.mImageWidth,mFetcherParams.mImageHeight);      f.delete();      return bitmap;    }  } else   if (type == ImageData.IMAGE_TYPE_THUMBNAIL) {    final byte[] bitmapBytes=downloadBitmapToMemory(mContext,key,mFetcherParams.mMaxThumbnailBytes);    if (bitmapBytes != null) {      return BitmapFactory.decodeByteArray(bitmapBytes,0,bitmapBytes.length);    }  } else   if (type == ImageData.IMAGE_TYPE_LOCAL) {    final Bitmap bitmap=decodeSampledBitmapFromFile(key,mFetcherParams.mImageThumbnailWidth,mFetcherParams.mImageThumbnailHeight);    return bitmap;  }  return null;}  }
class C{  private boolean isMirrorHome(Context context){  Intent homeIntent=new Intent(Intent.ACTION_MAIN);  homeIntent.addCategory(Intent.CATEGORY_HOME);  PackageManager packageManager=context.getPackageManager();  ResolveInfo homeInfo=packageManager.resolveActivity(homeIntent,0);  String homePackageName=homeInfo.activityInfo.packageName;  return context.getPackageName().equals(homePackageName);}  }
class C{  private void decodeLtp(LongTermPrediction ltp,int maxSfb){  ltp.lag=br.read(11);  ltp.coef=ltp_coef[br.read(3)];  for (int sfb=0; sfb < Math.min(maxSfb,MAX_LTP_LONG_SFB); sfb++) {    ltp.used[sfb]=br.readBool();  }}  }
class C{  protected void updateButtons(){  int size=userListModel.size();  int i=userList.getSelectedIndex();  boolean empty=size == 0;  boolean selected=i != -1;  boolean zeroSelected=i == 0;  boolean lastSelected=i == size - 1;  removeLanguageButton.setEnabled(!empty && selected);  upLanguageButton.setEnabled(!empty && selected && !zeroSelected);  downLanguageButton.setEnabled(!empty && selected && !lastSelected);  clearLanguageButton.setEnabled(!empty);  size=languageListModel.size();  i=languageList.getSelectedIndex();  empty=size == 0;  selected=i != -1;  addLanguageButton.setEnabled(!empty && selected);}  }
class C{  public ByteVector putByte(final int b){  int length=this.length;  if (length + 1 > data.length) {    enlarge(1);  }  data[length++]=(byte)b;  this.length=length;  return this;}  }
class C{  public void testMaxWordCount2() throws Exception {  Reader reader=new StringReader("one two three four");  TokenStream stream=keywordMockTokenizer(reader);  stream=tokenFilterFactory("Capitalization","maxWordCount","2").create(stream);  assertTokenStreamContents(stream,new String[]{"one two three four"});}  }
class C{  public static boolean parseResp(BaseQuestion question){  boolean found=false;  String response=question.getResponse().getResponseText();  List<String> expectedResponse=question.getExpectedResponse();  Iterator<String> iterator=expectedResponse.iterator();  while (iterator.hasNext()) {    String expectResponse=iterator.next();    logger.info("INFO: Expected response " + expectResponse);    if (response.contains(expectResponse)) {      found=true;      break;    }  }  return found;}  }
class C{  @Override Sprite createNormalSprite(){  BufferedImage img=getGraphicsConfiguration().createCompatibleImage(SPRITE_WIDTH,SPRITE_HEIGHT);  Graphics g=img.getGraphics();  for (int y=0; y < COLOR_MAP.length; y++) {    for (int x=0; x < COLOR_MAP[0].length; x++) {      g.setColor(new Color(COLOR_MAP[y][x].getColor()));      g.fillRect(x * COLOR_ITEM_WIDTH,y * COLOR_ITEM_HEIGHT,COLOR_ITEM_WIDTH,COLOR_ITEM_HEIGHT);    }  }  g.dispose();  return new ImageSprite(img,"skin_color_selection_id");}  }
class C{  public final void layerProtocol(boolean secure){  if (!this.connected) {    throw new IllegalStateException("No layered protocol unless connected.");  }  this.layered=LayerType.LAYERED;  this.secure=secure;}  }
class C{  public Object clone(){  ClassModel newModel=new ClassModel();  newModel.setAbstract(isAbstract());  newModel.setBackgroundColor(getBackgroundColor().getRGB());  newModel.setConstraint(new Rectangle(getConstraint()));  newModel.setForegroundColor(getForegroundColor().getRGB());  newModel.setName(getName());  newModel.setSimpleName(getSimpleName());  newModel.setParent(getParent());  newModel.setShowIcon(isShowIcon());  newModel.setStereoType(getStereoType());  List<AbstractUMLModel> children=getChildren();  for (int i=0; i < children.size(); i++) {    AbstractUMLModel child=children.get(i);    if (child instanceof AttributeModel) {      newModel.addChild((AttributeModel)((AttributeModel)child).clone());    } else     if (child instanceof OperationModel) {      newModel.addChild((OperationModel)((OperationModel)child).clone());    }  }  return newModel;}  }
class C{  private void initialize(@Nullable final AttributeSet attributeSet){  obtainStyledAttributes(attributeSet);  getView().addTextChangedListener(createTextChangeListener());}  }
class C{  public DefaultXYDataset createSampleDataset1(){  DefaultXYDataset d=new DefaultXYDataset();  double[] x1=new double[]{1.0,2.0,3.0};  double[] y1=new double[]{4.0,5.0,6.0};  double[][] data1=new double[][]{x1,y1};  d.addSeries("S1",data1);  double[] x2=new double[]{1.0,2.0,3.0};  double[] y2=new double[]{4.0,5.0,6.0};  double[][] data2=new double[][]{x2,y2};  d.addSeries("S2",data2);  return d;}  }
class C{  private boolean equals(Object o1,Object o2){  return o1 == null ? o2 == null : o1.equals(o2);}  }
class C{  public static double[][] reshape(double[] data,int rows,int columns){  double[][] matrix=new double[rows][columns];  int i=0;  for (int r=0; r < rows; r++) {    for (int c=0; c < columns; c++) {      matrix[r][c]=data[i++];    }  }  return matrix;}  }
class C{  protected void process(Document document) throws Exception {  TransformerFactory factory=TransformerFactory.newInstance();  Transformer transformer=factory.newTransformer(new StreamSource(xsl.toString()));  DOMWriter domWriter=new DOMWriter();  long start=System.currentTimeMillis();  org.w3c.dom.Document domDocument=domWriter.write(document);  long end=System.currentTimeMillis();  System.out.println("Converting to a W3C Document took: " + (end - start) + " milliseconds");  Source source=new DOMSource(domDocument);  StreamResult result=new StreamResult(System.out);  transformer.transform(source,result);}  }
class C{  public TableMouseListener(JTable table){  this.table=table;}  }
class C{  private Boolean isEven(BigDecimal decimal,int precision){  BigDecimal tempValue=decimal;  int i=0;  while (++i <= precision)   tempValue=tempValue.multiply(new BigDecimal(10));  return (tempValue.intValue() & 1) == 0;}  }
class C{  Token(final Object value){  this.value=value;  this.count=1;}  }
class C{  public int joinElection(ElectionContext context,boolean replacement,boolean joinAtHead) throws KeeperException, InterruptedException, IOException {  context.joinedElectionFired();  final String shardsElectZkPath=context.electionPath + LeaderElector.ELECTION_NODE;  long sessionId=zkClient.getSolrZooKeeper().getSessionId();  String id=sessionId + "-" + context.id;  String leaderSeqPath=null;  boolean cont=true;  int tries=0;  while (cont) {    try {      if (joinAtHead) {        log.info("node {} Trying to join election at the head ",id);        List<String> nodes=OverseerCollectionProcessor.getSortedElectionNodes(zkClient);        if (nodes.size() < 2) {          leaderSeqPath=zkClient.create(shardsElectZkPath + "/" + id+ "-n_",null,CreateMode.EPHEMERAL_SEQUENTIAL,false);        } else {          String firstInLine=nodes.get(1);          log.info("The current head: {}",firstInLine);          Matcher m=LEADER_SEQ.matcher(firstInLine);          if (!m.matches()) {            throw new IllegalStateException("Could not find regex match in:" + firstInLine);          }          leaderSeqPath=shardsElectZkPath + "/" + id+ "-n_"+ m.group(1);          zkClient.create(leaderSeqPath,null,CreateMode.EPHEMERAL,false);          log.info("Joined at the head  {}",leaderSeqPath);        }      } else {        leaderSeqPath=zkClient.create(shardsElectZkPath + "/" + id+ "-n_",null,CreateMode.EPHEMERAL_SEQUENTIAL,false);      }      context.leaderSeqPath=leaderSeqPath;      cont=false;    } catch (    ConnectionLossException e) {      List<String> entries=zkClient.getChildren(shardsElectZkPath,null,true);      boolean foundId=false;      for (      String entry : entries) {        String nodeId=getNodeId(entry);        if (id.equals(nodeId)) {          foundId=true;          break;        }      }      if (!foundId) {        cont=true;        if (tries++ > 20) {          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);        }        try {          Thread.sleep(50);        } catch (        InterruptedException e2) {          Thread.currentThread().interrupt();        }      }    }catch (    KeeperException.NoNodeException e) {      if (tries++ > 20) {        context=null;        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);      }      cont=true;      try {        Thread.sleep(50);      } catch (      InterruptedException e2) {        Thread.currentThread().interrupt();      }    }  }  int seq=getSeq(leaderSeqPath);  checkIfIamLeader(seq,context,replacement);  return seq;}  }
class C{  private SSLHelper(){}  }
class C{  private static Field findField(Object instance,String name) throws NoSuchFieldException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Field field=clazz.getDeclaredField(name);      if (!field.isAccessible()) {        field.setAccessible(true);      }      return field;    } catch (    NoSuchFieldException e) {    }  }  throw new NoSuchFieldException("Field " + name + " not found in "+ instance.getClass());}  }
class C{  private void assertKBExists(final Journal jnl,final String namespace) throws RepositoryException, SailException {  BigdataSailRepositoryConnection conn=null;  try {    conn=getQueryConnection(jnl,namespace,ITx.READ_COMMITTED);    assertNotNull(namespace,conn);  }  finally {    if (conn != null)     conn.close();  }}  }
class C{  void addEncoder(final MediaEncoder encoder){  if (encoder instanceof MediaVideoEncoder) {    if (mVideoEncoder != null)     throw new IllegalArgumentException("Video encoder already added.");    mVideoEncoder=encoder;  } else   if (encoder instanceof MediaAudioEncoder) {    if (mAudioEncoder != null)     throw new IllegalArgumentException("Video encoder already added.");    mAudioEncoder=encoder;  } else   throw new IllegalArgumentException("unsupported encoder");  mEncoderCount=(mVideoEncoder != null ? 1 : 0) + (mAudioEncoder != null ? 1 : 0);}  }
class C{  private double totalSquaredError(){  double totalSquaredError=0.0;  for (int k=0; k < centers.rows(); k++) {    totalSquaredError+=squaredError(k);  }  return totalSquaredError;}  }
class C{  public void zDrawTextFieldIndicators(){  if (settings == null) {    return;  }  if (!isEnabled()) {    dateTextField.setBackground(new Color(240,240,240));    dateTextField.setForeground(new Color(109,109,109));    dateTextField.setFont(settings.getFontValidDate());    return;  }  dateTextField.setBackground(settings.getColor(DateArea.TextFieldBackgroundValidDate));  dateTextField.setForeground(settings.getColor(DateArea.DatePickerTextValidDate));  dateTextField.setFont(settings.getFontValidDate());  String dateText=dateTextField.getText();  boolean textIsEmpty=dateText.trim().isEmpty();  if (textIsEmpty) {    if (!settings.getAllowEmptyDates()) {      dateTextField.setBackground(settings.getColor(DateArea.TextFieldBackgroundDisallowedEmptyDate));    }    return;  }  LocalDate parsedDate=InternalUtilities.getParsedDateOrNull(dateText,settings.getFormatForDatesCommonEra(),settings.getFormatForDatesBeforeCommonEra(),settings.getFormatsForParsing(),settings.getLocale());  if (parsedDate == null) {    dateTextField.setBackground(settings.getColor(DateArea.TextFieldBackgroundInvalidDate));    dateTextField.setForeground(settings.getColor(DateArea.DatePickerTextInvalidDate));    dateTextField.setFont(settings.getFontInvalidDate());    return;  }  DateVetoPolicy vetoPolicy=settings.getVetoPolicy();  boolean isDateVetoed=InternalUtilities.isDateVetoed(vetoPolicy,parsedDate);  if (isDateVetoed) {    dateTextField.setBackground(settings.getColor(DateArea.TextFieldBackgroundVetoedDate));    dateTextField.setForeground(settings.getColor(DateArea.DatePickerTextVetoedDate));    dateTextField.setFont(settings.getFontVetoedDate());  }}  }
class C{  public ResView(){}  }
class C{  private boolean requestContainsSensitiveInfo(){  boolean sensitive=false;  for (  Map.Entry<String,String> header : conf.headers.entrySet()) {    if (header.getKey().contains(VAULT_EL_PREFIX) || header.getValue().contains(VAULT_EL_PREFIX)) {      sensitive=true;      break;    }  }  if (conf.requestBody != null && conf.requestBody.contains(VAULT_EL_PREFIX)) {    sensitive=true;  }  return sensitive;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @Override public void onApplicationStart(){  instance=this;  if (!isEnabled()) {    return;  }  try {    Logger.info("Connecting to Coordinator Service");    context=new GenericXmlApplicationContext();    context.getEnvironment().setActiveProfiles(System.getProperty("buildType"));    context.load(getContextFiles());    context.refresh();    Logger.info("Connected to Coordinator Service");    zkConnection=getBean("zkconn",ZkConnection.class);    coordinatorClient=getBean("coordinator",CoordinatorClient.class);    encryptionProvider=getBean("encryptionProvider",EncryptionProvider.class);    authSvcEndPointLocator=getBean("authSvcEndpointLocator",AuthSvcEndPointLocator.class);    Validator.setAuthSvcEndPointLocator(authSvcEndPointLocator);    Validator.setCoordinator(coordinatorClient);    Validator.setStorageOSUserRepository(null);    coordinatorClient.start();    encryptionProvider.start();    Logger.info("Started ViPR connection, version: %s",version);    KeyStoreExporter keystoreExporter=getBean("keystoreExporter",KeyStoreExporter.class);    keystoreExporter.export();    coordinatorClient.addNodeListener(new CatalogAclListener());    Logger.info("added CatalogAclListener");  } catch (  Exception e) {    Logger.error(e,"Error initializing ViPR Connection");    shutdown();  }}  }
class C{  public static Status tentative(){  return create(TENTATIVE);}  }
class C{  @Transient public boolean isCompositionEnabled(){  return false;}  }
class C{  public void addSection(String tag,Section section){  this.sections.put(tag,section);  this.sectionViewTypeNumbers.put(tag,viewTypeCount);  viewTypeCount+=VIEW_TYPE_QTY;}  }
class C{  public void loadLocal(final int local){  loadInsn(getLocalType(local),local);}  }
class C{  @LargeTest public void testPropertiesVGAImage() throws Exception {  final String imageItemFilename=INPUT_FILE_PATH + "IMG_640x480.jpg";  final int imageItemDuration=10000;  final int aspectRatio=MediaProperties.ASPECT_RATIO_4_3;  final int fileType=MediaProperties.FILE_JPEG;  final int width=640;  final int height=MediaProperties.HEIGHT_480;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaImageItem mii=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",imageItemFilename,imageItemDuration,renderingMode);  validateImageProperties(aspectRatio,fileType,width,height,mii);}  }
class C{  public void enableNot(Capability c){  m_NotCapabilities.enable(c);}  }
class C{  public void begin() throws SQLException {  if (logger.isDebugEnabled())   logger.debug("Beginning transaction");  connection.setAutoCommit(false);}  }
class C{  public void removeAttribute(int index){  if (index >= 0 && index < length) {    if (index < length - 1) {      System.arraycopy(data,(index + 1) * 5,data,index * 5,(length - index - 1) * 5);    }    index=(length - 1) * 5;    data[index++]=null;    data[index++]=null;    data[index++]=null;    data[index++]=null;    data[index]=null;    length--;  } else {    badIndex(index);  }}  }
class C{  public void childrenRemoved(BeanContextMembershipEvent bcme){  findAndUndo(bcme.iterator());}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void initialize(Subject subject,CallbackHandler callbackHandler,Map<String,?> sharedState,Map<String,?> options){  this.subject=subject;  this.callbackHandler=callbackHandler;  this.sharedState=sharedState;  this.options=options;  debug="true".equalsIgnoreCase((String)options.get("debug"));}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  @Override public boolean removeAll(Collection<?> collection){  boolean result=false;  if (size() <= collection.size()) {    Iterator<?> it=iterator();    while (it.hasNext()) {      if (collection.contains(it.next())) {        it.remove();        result=true;      }    }  } else {    Iterator<?> it=collection.iterator();    while (it.hasNext()) {      result=remove(it.next()) || result;    }  }  return result;}  }
class C{  public static Angle computeColumnLongitude(int column,Angle delta,Angle origin){  if (delta == null || origin == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (column < 0) {    String msg=Logging.getMessage("generic.ColumnIndexOutOfRange",column);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (delta.degrees <= 0d) {    String message=Logging.getMessage("generic.DeltaAngleOutOfRange",delta);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double lonDegrees=origin.degrees + (column * delta.degrees);  return Angle.fromDegrees(lonDegrees);}  }
class C{  public void push(final String value){  if (value == null) {    mv.visitInsn(Opcodes.ACONST_NULL);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  private void savePreference(){  List<CmrRepositoryDefinition> toSave=new ArrayList<>();  for (  CmrRepositoryDefinition repositoryDefinition : cmrRepositoryDefinitions) {    toSave.add(repositoryDefinition);  }  PreferencesUtils.saveCmrRepositoryDefinitions(toSave,false);}  }
class C{  public boolean isLoggingEnabled(){  return this.stackLogger == null ? false : this.stackLogger.isLoggingEnabled();}  }
class C{  private Tuple<Message,Connection> tryOtherMessages(){  List<Tuple<Message,Connection>> messages=new ArrayList<Tuple<Message,Connection>>();  Collection<Message> msgCollection=getMessageCollection();  for (  Connection con : getConnections()) {    DTNHost other=con.getOtherNode(getHost());    MaxPropRouter othRouter=(MaxPropRouter)other.getRouter();    Set<String> sentMsgIds=this.sentMessages.get(other);    if (othRouter.isTransferring()) {      continue;    }    for (    Message m : msgCollection) {      if (othRouter.hasMessage(m.getId()) || m.getHops().contains(other)) {        continue;      }      if (sentMsgIds != null && sentMsgIds.contains(m.getId())) {        continue;      }      messages.add(new Tuple<Message,Connection>(m,con));    }  }  if (messages.size() == 0) {    return null;  }  Collections.sort(messages,new MaxPropTupleComparator(calcThreshold()));  return tryMessagesForConnected(messages);}  }
class C{  public void initialize(int keySize,SecureRandom secureRandom){  KeyGenerationParameters kgp;  if (keySize <= 10) {    int[] defh={10};    int[] defw={3};    int[] defk={2};    kgp=new GMSSKeyGenerationParameters(secureRandom,new GMSSParameters(defh.length,defh,defw,defk));  } else   if (keySize <= 20) {    int[] defh={10,10};    int[] defw={5,4};    int[] defk={2,2};    kgp=new GMSSKeyGenerationParameters(secureRandom,new GMSSParameters(defh.length,defh,defw,defk));  } else {    int[] defh={10,10,10,10};    int[] defw={9,9,9,3};    int[] defk={2,2,2,2};    kgp=new GMSSKeyGenerationParameters(secureRandom,new GMSSParameters(defh.length,defh,defw,defk));  }  this.initialize(kgp);}  }
class C{  protected void assertMessagesAreReceived() throws JMSException {  waitForMessagesToBeDelivered();  assertMessagesReceivedAreValid(messages);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeclonenodetrue.class,args);}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  final RPAction tell=new RPAction();  tell.put("type","support");  tell.put("text",remainder);  ClientSingletonRepository.getClientFramework().send(tell);  return true;}  }
class C{  protected Object escape(Object o){  if (o instanceof String) {    return escape((String)o);  } else {    return o;  }}  }
class C{  public static <K,V>Map<K,V> create(Collection<K> keys,V value){  Map<K,V> map=new LinkedHashMap<K,V>();  for (  K k : keys) {    map.put(k,value);  }  return map;}  }
class C{  private void checkCollapses(){  for (Iterator i=segStrings.iterator(); i.hasNext(); ) {    SegmentString ss=(SegmentString)i.next();    checkCollapses(ss);  }}  }
class C{  public void actionPerformed(ActionEvent e){  String cmd=e.getActionCommand();  if (cmd == showLocationsCommand) {    JCheckBox locationCheck=(JCheckBox)e.getSource();    setShowLocations(locationCheck.isSelected());    if (logger.isLoggable(Level.FINE)) {      logger.fine("DBLocationHandler::actionPerformed showLocations is " + isShowLocations());    }    getLayer().repaint();  } else   if (cmd == showNamesCommand) {    JCheckBox namesCheck=(JCheckBox)e.getSource();    setShowNames(namesCheck.isSelected());    if (logger.isLoggable(Level.FINE)) {      logger.fine("DBLocationHandler::actionPerformed showNames is " + isShowNames());    }    getLayer().repaint();  } else   if (cmd == readDataCommand) {    logger.fine("DBLocationHandler: Re-reading Locations file");    quadtree=null;    getLayer().doPrepare();  } else {    logger.warning("DBLocationHandler: Unknown action command \"" + cmd + "\" in actionPerformed().");  }}  }
class C{  private void createRule(){  rule=new Rule();  rule.setUrlPattern(urlPattern);  Matcher urlMatcher=URL_PARSE_PATTERN.matcher(httpHook.getDestination());  if (!urlMatcher.matches()) {    throw new IllegalArgumentException("Invalid url for " + httpHook.getDestination());  }  rule.setHost(urlMatcher.group("host"));  rule.setScheme(urlMatcher.group("scheme"));  rule.setPort(rule.getScheme().equals("https") ? 443 : 80);  String portString=urlMatcher.group("port");  if (portString != null) {    rule.setPort(Integer.parseInt(portString));  }  rule.setPath(urlMatcher.group("path"));  rule.setTimeout(1000 * CLIENT_DEFAULT_TIMEOUT_SEC);  rule.setPoolSize(CLIENT_DEFAULT_POOL_SIZE);  rule.setKeepAlive(CLIENT_DEFAULT_KEEP_ALIVE);  rule.setExpandOnBackend(CLIENT_DEFAULT_EXPAND_ON_BACKEND);  rule.setStorageExpand(CLIENT_DEFAULT_EXPAND_IN_STORAGE);  rule.setLogExpiry(CLIENT_DEFAULT_LOG_EXPIRY);  if (httpHook.getStaticHeaders() != null) {    rule.addStaticHeaders(httpHook.getStaticHeaders());  }  if (!httpHook.getMethods().isEmpty()) {    rule.setMethods(httpHook.getMethods().toArray(new String[httpHook.getMethods().size()]));  }}  }
class C{  private Instruction do_aload(int index){  Operand r=getLocal(index);  if (VM.VerifyAssertions && !(r.isRef() || r.isAddress())) {    String msg=r + " not ref, but a " + r.getType();    opt_assert(VM.NOT_REACHED,msg);  }  if (LOCALS_ON_STACK) {    push(r);    return null;  } else {    return _moveHelper(REF_MOVE,r,r.getType());  }}  }
class C{  private static String toSupplementaries(String s){  int length=s.length();  StringBuffer sb=new StringBuffer(length * 2);  for (int i=0; i < length; ) {    char c=s.charAt(i++);    if (c == '\\') {      sb.append(c);      if (i < length) {        c=s.charAt(i++);        sb.append(c);        if (c == 'u') {          sb.append(s.charAt(i++));          sb.append(s.charAt(i++));          sb.append(s.charAt(i++));          sb.append(s.charAt(i++));        }      }    } else     if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {      sb.append('\ud800').append((char)('\udc00' + c));    } else {      sb.append(c);    }  }  return sb.toString();}  }
class C{  private static void showNotification(Context context,NotificationId notificationId,Notification notification){  ((NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE)).notify(notificationId.ordinal(),notification);}  }
class C{  public JobRunShell(Scheduler scheduler,TriggerFiredBundle bndle){  this.scheduler=scheduler;  this.firedTriggerBundle=bndle;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  double x, y, x1, x2, y1, y2;  int progress;  int oldProgress;  int i, n;  double[][] vertices=null;  int numPolys=0;  ShapeType shapeType;  int[] parts={0};  double psi=0;  Object[] rowData;  double DegreeToRad=Math.PI / 180;  double[] axes=new double[2];  double newXAxis=0;  double newYAxis=0;  double longAxis;  double shortAxis;  final double rightAngle=Math.toRadians(90);  double midX, midY;  double[] newBoundingBox=new double[4];  double slope;  double boxCentreX, boxCentreY;  double elongation;  double elongationThreshold=0.25;  double dist;  boolean outputChainVector=false;  PointsList points=new PointsList();  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  String outputFile=args[1];  neighbourhoodRadius=Double.parseDouble(args[2]);  int minChainLength=Integer.parseInt(args[3]);  String outputChainVectorFile=args[4];  if (!outputChainVectorFile.toLowerCase().contains("not specified")) {    outputChainVector=true;  }  if ((inputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    numPolys=input.getNumberOfRecords();    if (shapeType.getBaseType() != ShapeType.POLYGON) {      showFeedback("This tool only works with shapefiles of a polygon base shape type.");      return;    }    pointLocations=new double[numPolys * 2][2];    pointAttributes=new int[numPolys * 2][4];    int[][] polyAttributes=new int[numPolys][3];    DBFField[] fields=new DBFField[2];    fields[0]=new DBFField();    fields[0].setName("PARENT_ID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("GROUP_ID");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(0);    ShapeFile output=new ShapeFile(outputFile,shapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    ShapeFile chainVector=new ShapeFile();    if (outputChainVector) {      fields=new DBFField[1];      fields[0]=new DBFField();      fields[0].setName("GROUP_ID");      fields[0].setDataType(DBFField.DBFDataType.NUMERIC);      fields[0].setFieldLength(10);      fields[0].setDecimalCount(0);      chainVector=new ShapeFile(outputChainVectorFile,ShapeType.POLYLINE,fields);    }    pointsTree=new KdTree.SqrEuclid(2,new Integer(numPolys * 2));    int recordNum;    oldProgress=-1;    for (    ShapeFileRecord record : input.records) {      recordNum=record.getRecordNumber();      vertices=record.getGeometry().getPoints();      int numVertices=vertices.length;      double east=Double.NEGATIVE_INFINITY;      double west=Double.POSITIVE_INFINITY;      double north=Double.NEGATIVE_INFINITY;      double south=Double.POSITIVE_INFINITY;      for (i=0; i < numVertices; i++) {        if (vertices[i][0] > east) {          east=vertices[i][0];        }        if (vertices[i][0] < west) {          west=vertices[i][0];        }        if (vertices[i][1] > north) {          north=vertices[i][1];        }        if (vertices[i][1] < south) {          south=vertices[i][1];        }      }      midX=west + (east - west) / 2.0;      midY=south + (north - south) / 2.0;      double[][] verticesRotated=new double[numVertices][2];      int[] keyPoints=new int[4];      axes[0]=9999999;      axes[1]=9999999;      slope=0;      boxCentreX=0;      boxCentreY=0;      for (int m=0; m <= 180; m++) {        psi=-m * 0.5 * DegreeToRad;        for (n=0; n < numVertices; n++) {          x=vertices[n][0] - midX;          y=vertices[n][1] - midY;          verticesRotated[n][0]=(x * Math.cos(psi)) - (y * Math.sin(psi));          verticesRotated[n][1]=(x * Math.sin(psi)) + (y * Math.cos(psi));        }        int[] currentKeyPoints=new int[4];        newBoundingBox[0]=Double.MAX_VALUE;        newBoundingBox[1]=Double.MIN_VALUE;        newBoundingBox[2]=Double.MAX_VALUE;        newBoundingBox[3]=Double.MIN_VALUE;        for (n=0; n < numVertices; n++) {          x=verticesRotated[n][0];          y=verticesRotated[n][1];          if (x < newBoundingBox[0]) {            newBoundingBox[0]=x;            currentKeyPoints[0]=n;          }          if (x > newBoundingBox[1]) {            newBoundingBox[1]=x;            currentKeyPoints[1]=n;          }          if (y < newBoundingBox[2]) {            newBoundingBox[2]=y;            currentKeyPoints[2]=n;          }          if (y > newBoundingBox[3]) {            newBoundingBox[3]=y;            currentKeyPoints[3]=n;          }        }        newXAxis=newBoundingBox[1] - newBoundingBox[0];        newYAxis=newBoundingBox[3] - newBoundingBox[2];        if ((newXAxis * newYAxis) < (axes[0] * axes[1])) {          axes[0]=newXAxis;          axes[1]=newYAxis;          if (axes[0] > axes[1]) {            slope=-psi;          } else {            slope=-(rightAngle + psi);          }          x=newBoundingBox[0] + newXAxis / 2;          y=newBoundingBox[2] + newYAxis / 2;          boxCentreX=midX + (x * Math.cos(-psi)) - (y * Math.sin(-psi));          boxCentreY=midY + (x * Math.sin(-psi)) + (y * Math.cos(-psi));          keyPoints=currentKeyPoints.clone();        }      }      longAxis=Math.max(axes[0],axes[1]);      shortAxis=Math.min(axes[0],axes[1]);      elongation=1 - shortAxis / longAxis;      slope=AxialData.rationalizeAxialAngle(slope);      x1=boxCentreX + longAxis / 2.0 * Math.cos(slope);      y1=boxCentreY + longAxis / 2.0 * Math.sin(slope);      x2=boxCentreX - longAxis / 2.0 * Math.cos(slope);      y2=boxCentreY - longAxis / 2.0 * Math.sin(slope);      int keyPoint1=-1;      int keyPoint2=-1;      double minDist=shortAxis * shortAxis * 1.05;      for (i=0; i < 4; i++) {        x=vertices[keyPoints[i]][0];        y=vertices[keyPoints[i]][1];        dist=(x - x1) * (x - x1) + (y - y1) * (y - y1);        if (dist < minDist) {          keyPoint1=keyPoints[i];          minDist=dist;        }      }      minDist=shortAxis * shortAxis * 1.05;      for (i=0; i < 4; i++) {        x=vertices[keyPoints[i]][0];        y=vertices[keyPoints[i]][1];        dist=(x - x2) * (x - x2) + (y - y2) * (y - y2);        if (dist < minDist) {          keyPoint2=keyPoints[i];          minDist=dist;        }      }      if (elongation > elongationThreshold) {        i=(recordNum - 1) * 2;        x=vertices[keyPoint1][0];        y=vertices[keyPoint1][1];        pointsTree.addPoint(new double[]{y,x},new Integer(i));        pointLocations[i][0]=x;        pointLocations[i][1]=y;        pointAttributes[i][0]=recordNum;        pointAttributes[i][1]=1;        x=vertices[keyPoint2][0];        y=vertices[keyPoint2][1];        pointsTree.addPoint(new double[]{y,x},new Integer(i + 1));        pointLocations[i + 1][0]=x;        pointLocations[i + 1][1]=y;        pointAttributes[i + 1][0]=recordNum;        pointAttributes[i + 1][1]=2;      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)((recordNum * 100.0) / numPolys);      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;      }    }    oldProgress=-1;    for (i=0; i < (numPolys * 2); i++) {      if (pointAttributes[i][0] > 0) {        int neighbourID=findConnectedNeighbour(i);        if (neighbourID >= 0 && findConnectedNeighbour(neighbourID) == i) {          pointAttributes[i][2]=pointAttributes[neighbourID][0];          pointAttributes[neighbourID][2]=pointAttributes[i][0];          pointAttributes[i][3]=neighbourID;          pointAttributes[neighbourID][3]=i;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)((i * 100.0) / (numPolys * 2));      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;      }    }    List<Integer> chainPolys=new ArrayList<Integer>();    List<Integer> chainKeyPoints=new ArrayList<Integer>();    oldProgress=-1;    int currentGroupID=1;    int activeNode=0, lastNode=0;    int currentPoly=0;    for (i=0; i < numPolys; i++) {      if (polyAttributes[i][0] == 0) {        int linkedEndNodes=0;        if (pointAttributes[i * 2][2] > 0) {          linkedEndNodes++;          activeNode=i * 2;          lastNode=i * 2 + 1;        }        if (pointAttributes[i * 2 + 1][2] > 0) {          linkedEndNodes++;          activeNode=i * 2 + 1;          lastNode=i * 2;        }        if (linkedEndNodes == 1) {          polyAttributes[i][0]=currentGroupID;          boolean flag=true;          currentPoly=i;          chainPolys.clear();          chainPolys.add(currentPoly);          chainKeyPoints.clear();          points.clear();          points.addMPoint(pointLocations[lastNode][0],pointLocations[lastNode][1]);          points.addMPoint(pointLocations[activeNode][0],pointLocations[activeNode][1]);          do {            polyAttributes[currentPoly][0]=currentGroupID;            if (pointAttributes[activeNode][0] == pointAttributes[lastNode][0]) {              if (pointAttributes[activeNode][2] > 0) {                currentPoly=pointAttributes[activeNode][2] - 1;                lastNode=activeNode;                activeNode=pointAttributes[activeNode][3];                chainPolys.add(currentPoly);              } else {                if (chainPolys.size() >= minChainLength) {                  for (                  int c : chainPolys) {                    rowData=new Object[2];                    rowData[0]=new Double(c + 1);                    rowData[1]=new Double(currentGroupID);                    output.addRecord(input.getRecord(c).getGeometry(),rowData);                  }                  chainPolys.clear();                  if (outputChainVector) {                    rowData=new Object[1];                    rowData[0]=new Double(currentGroupID);                    chainVector.addRecord(new PolyLine(parts,points.getPointsArray()),rowData);                  }                  currentGroupID++;                }                flag=false;              }            } else {              if (pointAttributes[activeNode][1] == 1) {                lastNode=activeNode;                activeNode++;              } else {                lastNode=activeNode;                activeNode--;              }              points.addMPoint(pointLocations[lastNode][0],pointLocations[lastNode][1]);              points.addMPoint(pointLocations[activeNode][0],pointLocations[activeNode][1]);            }          } while (flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)((i * 100.0) / (numPolys));      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;      }    }    output.write();    if (outputChainVector) {      chainVector.write();    }    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node secondChildNode;  Node textNode;  Node noChildNode;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(0);  employeeList=employeeNode.getChildNodes();  secondChildNode=employeeList.item(1);  textNode=secondChildNode.getFirstChild();  noChildNode=textNode.getFirstChild();  assertNull("nodeGetFirstChildNullAssert1",noChildNode);}  }
class C{  public EmptySpace(){  this(null,TerminalSize.ONE);}  }
class C{  public JOptionPane(Object message,int messageType){  this(message,messageType,DEFAULT_OPTION);}  }
class C{  public void run() throws Exception {  new Runner(optionsBuilder().build()).run();}  }
class C{  private void toArticleDate(final JSONObject article){  article.put(Common.TIME_AGO,Times.getTimeAgo(article.optLong(Article.ARTICLE_CREATE_TIME)));  article.put(Article.ARTICLE_CREATE_TIME,new Date(article.optLong(Article.ARTICLE_CREATE_TIME)));  article.put(Article.ARTICLE_UPDATE_TIME,new Date(article.optLong(Article.ARTICLE_UPDATE_TIME)));  article.put(Article.ARTICLE_LATEST_CMT_TIME,new Date(article.optLong(Article.ARTICLE_LATEST_CMT_TIME)));}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.478 -0400",hash_original_method="41BA5D3E6CD82551F6C2FAFF3850B986",hash_generated_method="AAA0E9FA70DCC42A6EF6C686E3CCDC7E") @Override public boolean markSupported(){  return in.markSupported();}  }
class C{  public Drawable decideIcon(Context ctx,int iconColor,boolean tint,int paddingDp){  Drawable icon=getIcon();  if (mIIcon != null) {    icon=new IconicsDrawable(ctx,mIIcon).color(iconColor).sizeDp(24).paddingDp(paddingDp);  } else   if (getIconRes() != -1) {    icon=UIUtils.getCompatDrawable(ctx,getIconRes());  } else   if (getUri() != null) {    try {      InputStream inputStream=ctx.getContentResolver().openInputStream(getUri());      icon=Drawable.createFromStream(inputStream,getUri().toString());    } catch (    FileNotFoundException e) {    }  }  if (icon != null && tint && mIIcon == null) {    icon=icon.mutate();    icon.setColorFilter(iconColor,PorterDuff.Mode.SRC_IN);  }  return icon;}  }
class C{  public Element store(Object o){  TurnoutIcon p=(TurnoutIcon)o;  if (!p.isActive()) {    return null;  }  Element element=new Element("turnouticon");  element.setAttribute("turnout",p.getNamedTurnout().getName());  storeCommonAttributes(p,element);  element.setAttribute("tristate",p.getTristate() ? "true" : "false");  element.setAttribute("momentary",p.getMomentary() ? "true" : "false");  element.setAttribute("directControl",p.getDirectControl() ? "true" : "false");  Element elem=new Element("icons");  elem.addContent(storeIcon("closed",p.getIcon("TurnoutStateClosed")));  elem.addContent(storeIcon("thrown",p.getIcon("TurnoutStateThrown")));  elem.addContent(storeIcon("unknown",p.getIcon("BeanStateUnknown")));  elem.addContent(storeIcon("inconsistent",p.getIcon("BeanStateInconsistent")));  element.addContent(elem);  elem=new Element("iconmaps");  String family=p.getFamily();  if (family != null) {    elem.setAttribute("family",family);  }  element.addContent(elem);  element.setAttribute("class","jmri.jmrit.display.configurexml.TurnoutIconXml");  return element;}  }
class C{  private void resetAttempts(){  for (  final UserActionAttachment uaa : UserActionAttachment.getUserActionAttachments(m_player)) {    uaa.resetAttempts(getBridge());  }}  }
class C{  private void checkWithKnowledge(String inputGraph,String outputGraph,IKnowledge knowledge){  Graph graph=GraphConverter.convert(inputGraph);  IndependenceTest independence=new IndTestDSep(graph);  Pc pc=new Pc(independence);  pc.setKnowledge(knowledge);  Graph resultGraph=pc.search();  Graph trueGraph=GraphConverter.convert(outputGraph);  resultGraph=GraphUtils.replaceNodes(resultGraph,trueGraph.getNodes());  assertTrue(resultGraph.equals(trueGraph));}  }
class C{  public static void checkState(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  com.google.common.base.Preconditions.checkState(expression,errorMessageTemplate,errorMessageArgs);}  }
class C{  public boolean isLinkedTo(Branch branch){  return branch.getName().startsWith(refsForRemoteRepository);}  }
class C{  public ShardPath pickShardPath(ShardId shard) throws IOException {  if (needsUpgrading(shard) == false) {    throw new IllegalStateException("Shard doesn't need upgrading");  }  final NodeEnvironment.NodePath[] paths=nodeEnvironment.nodePaths();  for (  NodeEnvironment.NodePath path : paths) {    Files.createDirectories(path.resolve(shard));  }  final ShardFileInfo[] shardFileInfo=getShardFileInfo(shard,paths);  long totalBytesUsedByShard=0;  long leastUsableSpace=Long.MAX_VALUE;  long mostUsableSpace=Long.MIN_VALUE;  assert shardFileInfo.length == nodeEnvironment.availableShardPaths(shard).length;  for (  ShardFileInfo info : shardFileInfo) {    totalBytesUsedByShard+=info.spaceUsedByShard;    leastUsableSpace=Math.min(leastUsableSpace,info.usableSpace + info.spaceUsedByShard);    mostUsableSpace=Math.max(mostUsableSpace,info.usableSpace + info.spaceUsedByShard);  }  if (mostUsableSpace < totalBytesUsedByShard) {    throw new IllegalStateException("Can't upgrade path available space: " + new ByteSizeValue(mostUsableSpace) + " required space: "+ new ByteSizeValue(totalBytesUsedByShard));  }  ShardFileInfo target=shardFileInfo[0];  if (leastUsableSpace >= (2 * totalBytesUsedByShard)) {    for (    ShardFileInfo info : shardFileInfo) {      if (info.spaceUsedByShard > target.spaceUsedByShard) {        target=info;      }    }  } else {    for (    ShardFileInfo info : shardFileInfo) {      if (info.usableSpace > target.usableSpace) {        target=info;      }    }  }  return new ShardPath(false,target.path,target.path,IndexMetaData.INDEX_UUID_NA_VALUE,shard);}  }
class C{  private static void appendBytes(final byte[] bytes,final Text keyText){  keyText.append(bytes,0,bytes.length);}  }
class C{  private static boolean checkBlenderFolders(){  String jmpDir=Places.getUserDirectory().getAbsolutePath();  FileObject fileObject=FileUtil.toFileObject(new File(jmpDir));  if (fileObject != null) {    FileObject jmeScriptsFileObject=fileObject.getFileObject(jmeScriptsFolderName);    FileObject userScriptsFileObject=fileObject.getFileObject(userScriptsFolderName);    if (jmeScriptsFileObject == null) {      try {        jmeScriptsFileObject=FileUtil.createFolder(fileObject,jmeScriptsFolderName);      } catch (      IOException ex) {        Exceptions.printStackTrace(ex);        return false;      }    }    if (userScriptsFileObject == null) {      try {        userScriptsFileObject=FileUtil.createFolder(fileObject,userScriptsFolderName);      } catch (      IOException ex) {        Exceptions.printStackTrace(ex);        return false;      }    }    Scripts.copyToFolder(jmeScriptsFileObject);  } else {    logger.log(Level.SEVERE,"No global settings folder found!");    return false;  }  return true;}  }
class C{  private void killDrawing(){  mPaintView.clear();}  }
class C{  private static char[] superscriptForDigit(int digit){switch (digit) {case 1:    return SUPERSCRIPT_1;case 2:  return SUPERSCRIPT_2;case 3:return SUPERSCRIPT_3;default :return Character.toChars(0x2070 + digit);}}  }
class C{  public static int multiplyOpacities256(int opacity1,int opacity2){  double op1=opacity1 / 255.0;  double op2=opacity2 / 255.0;  double resultOpacity=op1 * op2;  return (int)Math.round(resultOpacity * 255.0);}  }
class C{  public void testDivideRoundHalfDownPos1(){  String a="92948782094488478231212478987482988798104576347813847567949855464535634534563456";  int aScale=-24;  String b="74723342238476237823754692930187879183479";  int bScale=13;  String c="1.2439055763572051712242335979928354832010167729111113605E+76";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_DOWN);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return (stack.pop() instanceof MetaImage) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public synchronized boolean deleteResult(String username,String submissionID){  NodeList usersList=resultRoot.getElementsByTagName("user");  int numusers=usersList.getLength();  for (int i=0; i < numusers; i++) {    Element user=(Element)usersList.item(i);    if (user.getAttribute("username").equals(username)) {      NodeList subList=user.getElementsByTagName("result");      int numresults=subList.getLength();      for (int j=0; j < numresults; j++) {        Element elem=(Element)subList.item(j);        if (elem.getAttribute("id").equals(submissionID)) {          user.removeChild(elem);          if (numresults == 1)           resultRoot.removeChild(user);          writeXMLFile();          return true;        }      }    }  }  return false;}  }
class C{  protected void engineInit(Key key,AlgorithmParameterSpec params) throws InvalidKeyException, InvalidAlgorithmParameterException {  char[] passwdChars;  byte[] salt=null;  int iCount=0;  if (key instanceof javax.crypto.interfaces.PBEKey) {    javax.crypto.interfaces.PBEKey pbeKey=(javax.crypto.interfaces.PBEKey)key;    passwdChars=pbeKey.getPassword();    salt=pbeKey.getSalt();    iCount=pbeKey.getIterationCount();  } else   if (key instanceof SecretKey) {    byte[] passwdBytes=key.getEncoded();    if ((passwdBytes == null) || !(key.getAlgorithm().regionMatches(true,0,"PBE",0,3))) {      throw new InvalidKeyException("Missing password");    }    passwdChars=new char[passwdBytes.length];    for (int i=0; i < passwdChars.length; i++) {      passwdChars[i]=(char)(passwdBytes[i] & 0x7f);    }  } else {    throw new InvalidKeyException("SecretKey of PBE type required");  }  if (params == null) {    if ((salt == null) || (iCount == 0)) {      throw new InvalidAlgorithmParameterException("PBEParameterSpec required for salt and iteration count");    }  } else   if (!(params instanceof PBEParameterSpec)) {    throw new InvalidAlgorithmParameterException("PBEParameterSpec type required");  } else {    PBEParameterSpec pbeParams=(PBEParameterSpec)params;    if (salt != null) {      if (!Arrays.equals(salt,pbeParams.getSalt())) {        throw new InvalidAlgorithmParameterException("Inconsistent value of salt between key and params");      }    } else {      salt=pbeParams.getSalt();    }    if (iCount != 0) {      if (iCount != pbeParams.getIterationCount()) {        throw new InvalidAlgorithmParameterException("Different iteration count between key and params");      }    } else {      iCount=pbeParams.getIterationCount();    }  }  if (salt.length < 8) {    throw new InvalidAlgorithmParameterException("Salt must be at least 8 bytes long");  }  if (iCount <= 0) {    throw new InvalidAlgorithmParameterException("IterationCount must be a positive number");  }  PBEKeySpec pbeSpec=new PBEKeySpec(passwdChars,salt,iCount,blockLength);  java.util.Arrays.fill(passwdChars,' ');  SecretKey s=null;  PBKDF2Core kdf=getKDFImpl(kdfAlgo);  try {    s=kdf.engineGenerateSecret(pbeSpec);  } catch (  InvalidKeySpecException ikse) {    InvalidKeyException ike=new InvalidKeyException("Cannot construct PBE key");    ike.initCause(ikse);    throw ike;  }  byte[] derivedKey=s.getEncoded();  SecretKey cipherKey=new SecretKeySpec(derivedKey,kdfAlgo);  super.engineInit(cipherKey,null);}  }
class C{  @Override public boolean requiresDataModificationEventsForMapKey(){  if (getReferenceDescriptor() != null) {    Iterator<DatabaseMapping> i=getReferenceDescriptor().getMappings().iterator();    while (i.hasNext()) {      DatabaseMapping mapping=i.next();      if (!mapping.isReadOnly()) {        Iterator<DatabaseField> fields=mapping.getFields().iterator();        while (fields.hasNext()) {          DatabaseField field=fields.next();          if (field.isUpdatable()) {            return true;          }        }      }    }    return false;  }  return true;}  }
class C{  public void registerAboveContentView(View v,LayoutParams params){  if (!mBroadcasting)   mViewAbove=v;}  }
class C{  private int[] mod(int[] a,int[] f){  int df=computeDegree(f);  if (df == -1) {    throw new ArithmeticException("Division by zero");  }  int[] result=new int[a.length];  int hc=headCoefficient(f);  hc=field.inverse(hc);  System.arraycopy(a,0,result,0,result.length);  while (df <= computeDegree(result)) {    int[] q;    int coeff=field.mult(headCoefficient(result),hc);    q=multWithMonomial(f,computeDegree(result) - df);    q=multWithElement(q,coeff);    result=add(q,result);  }  return result;}  }
class C{  public void annotateTo(DexFile file,AnnotatedOutput out,String prefix){  encode(file,prefix,null,out,false);}  }
class C{  public i addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public Jonas4xRuntimeConfiguration(){  setProperty(GeneralPropertySet.RMI_PORT,"1099");  setProperty(GeneralPropertySet.HOSTNAME,"localhost");  setProperty(JonasPropertySet.JONAS_SERVER_NAME,"jonas");  setProperty(JonasPropertySet.JONAS_DOMAIN_NAME,"jonas");}  }
class C{  public final void testCertPathCertPathRep(){  MyCertPath cp=new MyCertPath(testEncoding);  MyCertPathRep rep=cp.new MyCertPathRep("MyEncoding",testEncoding);  assertEquals(testEncoding,rep.getData());  assertEquals("MyEncoding",rep.getType());  try {    cp.new MyCertPathRep(null,null);  } catch (  Exception e) {    fail("Unexpected exeption " + e.getMessage());  }}  }
class C{  public RealDecimator(int rate){  mDecimationRate=rate;}  }
class C{  public ScaleImageButton(Image i){  setUIID("ScaleImageButton");  setShowEvenIfBlank(true);  getAllStyles().setBackgroundType(Style.BACKGROUND_IMAGE_SCALED_FIT);  getAllStyles().setBgTransparency(255);  setIcon(i);}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof CategoricalTable) {    Set<Value> otherVals=((CategoricalTable)o).getValues();    if (!getValues().equals(otherVals)) {      return false;    }    for (    Value v : getValues()) {      if (Math.abs(((CategoricalTable)o).getProb(v) - getProb(v)) > 0.01) {        return false;      }    }    return true;  }  return false;}  }
class C{  public ProcessParameterPanel(int WindowNo,ProcessInfo pi){  try {    jbInit();  } catch (  Exception ex) {    log.log(Level.SEVERE,ex.getMessage());  }  m_WindowNo=WindowNo;  m_processInfo=pi;}  }
class C{  public String toString(){  int len=this.name.length();  if (this.value != null)   len+=1 + this.value.length();  CharArrayBuffer buffer=new CharArrayBuffer(len);  buffer.append(this.name);  if (this.value != null) {    buffer.append("=");    buffer.append(this.value);  }  return buffer.toString();}  }
class C{  public final void stratify(int numFolds){  if (numFolds <= 0) {    throw new IllegalArgumentException("Number of folds must be greater than 1");  }  if (m_ClassIndex < 0) {    throw new UnassignedClassException("Class index is negative (not set)!");  }  if (classAttribute().isNominal()) {    int index=1;    while (index < numInstances()) {      Instance instance1=instance(index - 1);      for (int j=index; j < numInstances(); j++) {        Instance instance2=instance(j);        if ((instance1.classValue() == instance2.classValue()) || (instance1.classIsMissing() && instance2.classIsMissing())) {          swap(index,j);          index++;        }      }      index++;    }    stratStep(numFolds);  }}  }
class C{  public static void delete(File file) throws IOException {  if (file.exists()) {    if (!file.delete()) {      throw new IOException(MessageFormat.format(UNABLE_TO_DELETE,file));    }  }}  }
class C{  public ParameterAnnotationsAttribute(ConstPool cp,String attrname){  this(cp,attrname,new byte[]{0});}  }
class C{  public void transfer(Channel channel){  if (paused || eventLoopGroup == null) {    throw ActiveMQMessageBundle.BUNDLE.acceptorUnavailable();  }  channel.pipeline().addLast(protocolHandler.getProtocolDecoder());}  }
class C{  public static Test suite(){  return (new TestSuite(ValidatorTagTestCase.class));}  }
class C{  public GrowShrink(IndependenceTest test){  if (test == null) {    throw new NullPointerException();  }  this.independenceTest=test;  this.variables=test.getVariables();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.INVARIANT___ANONYMOUS_INVARIANT_11:    getAnonymous_invariant_1_1().clear();  return;case UmplePackage.INVARIANT___ANONYMOUS_INVARIANT_21:getAnonymous_invariant_2_1().clear();return;}super.eUnset(featureID);}  }
class C{  public int countTests(CtsTestStatus status){  return mSuiteRoot.countTests(status);}  }
class C{  public static double[] multiply(double a[],double w[]){  double c[]=new double[a.length];  for (int j=0; j < a.length; j++) {    c[j]=a[j] * w[j];  }  return c;}  }
class C{  public void test_setStartRuleIIII(){  SimpleTimeZone st=new SimpleTimeZone(1000,"Test_TZ");  st.setStartRule(Calendar.NOVEMBER,1,Calendar.SUNDAY,0);  st.setEndRule(Calendar.NOVEMBER,-1,Calendar.SUNDAY,0);  assertTrue("StartRule improperly set1",st.useDaylightTime());  assertTrue("StartRule improperly set2",st.inDaylightTime((new GregorianCalendar(1998,Calendar.NOVEMBER,13).getTime())));  assertTrue("StartRule improperly set3",!(st.inDaylightTime(new GregorianCalendar(1998,Calendar.OCTOBER,13).getTime())));  try {    st.setStartRule(12,-1,Calendar.SUNDAY,0);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setStartRule(Calendar.NOVEMBER,10,Calendar.SUNDAY,0);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setStartRule(Calendar.NOVEMBER,-1,8,0);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setStartRule(Calendar.NOVEMBER,-1,Calendar.SUNDAY,-10);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:55.748 -0500",hash_original_method="C11B1153BF8BCDA44C4073AC785F824F",hash_generated_method="31DE1676A7D3BC3BC9911CB72FB32E4D") public T populateList(List<T> list,Creator<T> creator){  mParcel.setDataPosition(0);  T item=null;  for (int i=0; i < mNumItems; i++) {    item=creator.createFromParcel(mParcel);    list.add(item);  }  mParcel.recycle();  mParcel=null;  return item;}  }
class C{  public void unsetUrl(){  this.url=null;}  }
class C{  public static Validator<String> disallowedChars(char... chars){  return disallowedChars(chars,null);}  }
class C{  public boolean verify(PublicKey key,Provider sigProvider) throws NoSuchAlgorithmException, NoSuchProviderException, CMSException {  getSigningTime();  return doVerify(key,sigProvider);}  }
class C{  public void toXML(XMLStreamWriter writer,String orientation) throws XMLStreamException {  writer.writeStartElement("location");  writer.writeAttribute("compilationunit",unit);  writer.writeAttribute("orientation",orientation);  writer.writeAttribute("linenumber",line + "");  writer.writeAttribute("columnnumber",column + "");  writer.writeAttribute("offset",offset + "");  writer.writeEndElement();}  }
class C{  public void testGetIssuerDN(){  if (this.cert == null) {    Logger.global.warning("testGetIssuerDN: error in test setup.");  }  assertEquals("The issuer DN is not correct.",tbt_cert.getIssuerDN(),cert.getIssuerDN());}  }
class C{  protected NumericalAttribute(String name){  this(name,Ontology.NUMERICAL);}  }
class C{  public BoundingBox mul(Matrix4 matrix){  updateCorners();  this.inf();  for (  Vector3 l_pnt : crn) {    l_pnt.mul(matrix);    min.set(min(min.x,l_pnt.x),min(min.y,l_pnt.y),min(min.z,l_pnt.z));    max.set(max(max.x,l_pnt.x),max(max.y,l_pnt.y),max(max.z,l_pnt.z));  }  crn_dirty=true;  return this.set(min,max);}  }
class C{  public boolean isValidSudoku3(char[][] board){  Map<Integer,Integer> row=new HashMap<Integer,Integer>();  Map<Integer,Integer> col=new HashMap<Integer,Integer>();  Map<Integer,Integer> sqr=new HashMap<Integer,Integer>();  for (int i=0; i < board.length; i++) {    for (int j=0; j < board[i].length; j++) {      if (board[i][j] != '.') {        int num=board[i][j] - '0';        int rowMask=row.containsKey(i) ? row.get(i) : 0;        if ((rowMask & 1 << num) > 0) {          return false;        } else {          row.put(i,rowMask | 1 << num);        }        int colMask=col.containsKey(j) ? col.get(j) : 0;        if ((colMask & 1 << num) > 0) {          return false;        } else {          col.put(j,colMask | 1 << num);        }        int sqrIdx=(i - i % 3) + j / 3;        int sqrMask=sqr.containsKey(sqrIdx) ? sqr.get(sqrIdx) : 0;        if ((sqrMask & 1 << num) > 0) {          return false;        } else {          sqr.put(sqrIdx,sqrMask | 1 << num);        }      }    }  }  return true;}  }
class C{  public static NetworkTimeStamp readFrom(final Deserializer deserializer,final String label){  return new NetworkTimeStamp(deserializer.readLong(label));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void ignoreNextNotificaitonRemoval(final String key){  mPendingRevival.add(key);  mHandler.removeCallbacks(mResetPendingRevival);  mHandler.postDelayed(mResetPendingRevival,3000);}  }
class C{  public void sendEmail(String text,String subject,String replyTo){  log("Sending email:",Level.INFO,text,replyTo);  initProperties();  try {    Session session=connectSession();    MimeMessage message=new MimeMessage(session);    message.setFrom(new InternetAddress(getEmailAddress()));    message.addRecipient(Message.RecipientType.TO,new InternetAddress(replyTo));    message.setSubject(subject);    message.setText(text);    this.emails++;    Transport.send(message);  } catch (  MessagingException exception) {    log(new BotException("Failed to send email.",exception));  }}  }
class C{  private static void createOperandTree(final SQLProvider provider,final COperandTree operand,final int position) throws SQLException {  final Set<INaviOperandTreeNode> nodes=new HashSet<INaviOperandTreeNode>();  createOperandExpression(provider,operand.getRootNode(),0,nodes);  final int expressionTreeId=createExpressionTree(provider,nodes,operand.getInstruction().getModule());  final BigInteger address=operand.getInstruction().getAddress().toBigInteger();  final int moduleId=operand.getInstruction().getModule().getConfiguration().getId();  createOperand(provider,moduleId,address,position,expressionTreeId);}  }
class C{  public byte[] generateSeed(int numBytes){  return fillData(new byte[numBytes]);}  }
class C{  public boolean isNonsingular(){  for (int j=0; j < n; j++) {    if (LU[j][j] == 0)     return false;  }  return true;}  }
class C{  public NecronomiconPotionAoERitual(String unlocalizedName,int bookType,int dimension,float requiredEnergy,boolean requiresSacrifice,Object potion,Object... offerings){  super(unlocalizedName,bookType,dimension,requiredEnergy,requiresSacrifice,offerings);  this.potion=potion;}  }
class C{  private static <T>boolean contains(T[] array,T value){  for (  T element : array) {    if (element == null) {      if (value == null)       return true;    } else {      if (value != null && element.equals(value))       return true;    }  }  return false;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Inline @Override public final boolean objectReferenceTryCompareAndSwap(ObjectReference objref,ObjectReference old,ObjectReference target,Word offset,Word unused,int mode){  if (org.jikesrvm.VM.BuildForIA32) {    return Magic.attemptObject(objref.toObject(),offset.toOffset(),old.toObject(),target.toObject());  } else {    Object oldValue;    do {      oldValue=Magic.prepareObject(objref,offset.toOffset());      if (oldValue != old)       return false;    } while (!Magic.attemptObject(objref,offset.toOffset(),oldValue,target));    return true;  }}  }
class C{  static MediaType createImageType(String subtype){  return create(IMAGE_TYPE,subtype);}  }
class C{  public synchronized Vertex mostConscious(Vertex type,Vertex classification){  Collection<Relationship> relationships=getRelationships(type);  if (relationships == null) {    return null;  }  Vertex highest=null;  Vertex instantiation=this.network.createVertex(Primitive.INSTANTIATION);  for (  Relationship relationship : relationships) {    if (!relationship.isInverse() && (relationship.getTarget().hasRelationship(instantiation,classification)) && ((highest == null) || (relationship.getTarget().getConsciousnessLevel() > highest.getConsciousnessLevel()))) {      highest=relationship.getTarget();    }  }  return highest;}  }
class C{  public boolean remove(String trackingId) throws KeeperException, InterruptedException {  try {    zookeeper.delete(dir + "/" + prefix+ trackingId,-1,true);  } catch (  KeeperException.NoNodeException e) {    return false;  }  return true;}  }
class C{  protected Double wrapValue(double k){  return new Double(k);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:31.036 -0400",hash_original_method="2AD65621D0635456A6083A503234FC83",hash_generated_method="B964E97FED374457F5CB3C2FEA97D8BF") private void updateProgressBars(int value){  ProgressBarICS circularProgressBar=getCircularProgressBar();  ProgressBarICS horizontalProgressBar=getHorizontalProgressBar();  if (value == Window.PROGRESS_VISIBILITY_ON) {    if (mFeatureProgress) {      int level=horizontalProgressBar.getProgress();      int visibility=(horizontalProgressBar.isIndeterminate() || level < 10000) ? View.VISIBLE : View.INVISIBLE;      horizontalProgressBar.setVisibility(visibility);    }    if (mFeatureIndeterminateProgress) {      circularProgressBar.setVisibility(View.VISIBLE);    }  } else   if (value == Window.PROGRESS_VISIBILITY_OFF) {    if (mFeatureProgress) {      horizontalProgressBar.setVisibility(View.GONE);    }    if (mFeatureIndeterminateProgress) {      circularProgressBar.setVisibility(View.GONE);    }  } else   if (value == Window.PROGRESS_INDETERMINATE_ON) {    horizontalProgressBar.setIndeterminate(true);  } else   if (value == Window.PROGRESS_INDETERMINATE_OFF) {    horizontalProgressBar.setIndeterminate(false);  } else   if (Window.PROGRESS_START <= value && value <= Window.PROGRESS_END) {    horizontalProgressBar.setProgress(value - Window.PROGRESS_START);    if (value < Window.PROGRESS_END) {      showProgressBars(horizontalProgressBar,circularProgressBar);    } else {      hideProgressBars(horizontalProgressBar,circularProgressBar);    }  }}  }
class C{  private Chomping scanBlockScalarIndicators(Mark startMark){  Boolean chomping=null;  int increment=-1;  char ch=reader.peek();  if (ch == '-' || ch == '+') {    if (ch == '+') {      chomping=Boolean.TRUE;    } else {      chomping=Boolean.FALSE;    }    reader.forward();    ch=reader.peek();    if (Character.isDigit(ch)) {      increment=Integer.parseInt(String.valueOf(ch));      if (increment == 0) {        throw new ScannerException("while scanning a block scalar",startMark,"expected indentation indicator in the range 1-9, but found 0",reader.getMark());      }      reader.forward();    }  } else   if (Character.isDigit(ch)) {    increment=Integer.parseInt(String.valueOf(ch));    if (increment == 0) {      throw new ScannerException("while scanning a block scalar",startMark,"expected indentation indicator in the range 1-9, but found 0",reader.getMark());    }    reader.forward();    ch=reader.peek();    if (ch == '-' || ch == '+') {      if (ch == '+') {        chomping=Boolean.TRUE;      } else {        chomping=Boolean.FALSE;      }      reader.forward();    }  }  ch=reader.peek();  if (Constant.NULL_BL_LINEBR.hasNo(ch)) {    throw new ScannerException("while scanning a block scalar",startMark,"expected chomping or indentation indicators, but found " + ch,reader.getMark());  }  return new Chomping(chomping,increment);}  }
class C{  public PolarLocationAnimator(String group,String linearGroup){  super(group);  m_linear=linearGroup;}  }
class C{  public Document read(File file) throws Exception {  m_Document=getBuilder().parse(file);  return getDocument();}  }
class C{  private static void s_uarimin(SparseBlock a,double[] c,int m,int n,double init,Builtin builtin,int rl,int ru){  for (int i=rl, cix=rl * 2; i < ru; i++, cix+=2) {    if (!a.isEmpty(i)) {      int apos=a.pos(i);      int alen=a.size(i);      int[] aix=a.indexes(i);      double[] avals=a.values(i);      int minindex=indexmin(avals,apos,init,alen,builtin);      c[cix + 0]=(double)aix[apos + minindex] + 1;      c[cix + 1]=avals[apos + minindex];      if (alen < n && (builtin.execute2(0,c[cix + 1]) == 1)) {        int ix=n - 1;        for (int j=alen - 1; j >= 0; j--, ix--)         if (aix[apos + j] != ix)         break;        c[cix + 0]=ix + 1;        c[cix + 1]=0;      }    } else {      c[cix + 0]=n;      c[cix + 1]=0;    }  }}  }
class C{  public ImageResizer(Context context,int imageWidth,int imageHeight){  super(context);  setImageSize(imageWidth,imageHeight);}  }
class C{  public final int lastIndexOf(char c,int fromIndex){  if ((_offset + fromIndex) >= (_offset + _length))   throw new IndexOutOfBoundsException(String.format("From Index %d Is Out of Bounds",fromIndex));  for (int i=_offset + fromIndex, end=_offset; i >= end; i--) {    if (_array[i] == c)     return i - _offset;  }  return -1;}  }
class C{  public boolean isDownStreamInline(){  for (  PTInput sink : this.sinks) {    if (this.source.container != sink.target.container) {      return false;    }  }  return true;}  }
class C{  public void addAll(Stats values){  if (values.count() == 0) {    return;  }  if (count == 0) {    count=values.count();    mean=values.mean();    sumOfSquaresOfDeltas=values.sumOfSquaresOfDeltas();    min=values.min();    max=values.max();  } else {    count+=values.count();    if (isFinite(mean) && isFinite(values.mean())) {      double delta=values.mean() - mean;      mean+=delta * values.count() / count;      sumOfSquaresOfDeltas+=values.sumOfSquaresOfDeltas() + delta * (values.mean() - mean) * values.count();    } else {      mean=calculateNewMeanNonFinite(mean,values.mean());      sumOfSquaresOfDeltas=NaN;    }    min=Math.min(min,values.min());    max=Math.max(max,values.max());  }}  }
class C{  public static void main(String[] args){  runFileLoader(new JSONLoader(),args);}  }
class C{  public String addArrowAssignment(Assignment constant,String schema){  String id=ModelWriter.getValidIdentifier(schema);  tlaBuffer.append(constant.getParametrizedLabel(id)).append(DEFINES).append(CR).append(constant.getRight()).append(CR);  cfgBuffer.append("CONSTANT").append(CR);  cfgBuffer.append(constant.getLabel()).append(ARROW).append(id).append(CR);  return id;}  }
class C{  public TLongArrayList(long[] values){  this(Math.max(values.length,DEFAULT_CAPACITY));  add(values);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public WaggingNormal(Regressor weakLearner,int interations){  super(new Normal(1,2),weakLearner,interations);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.708 -0500",hash_original_method="DB9E956B9DDA3EEC264D03CBFDEFBF6F",hash_generated_method="938FC048B96D342FBB4D144DA3FC1D5B") public DexFile(File file) throws IOException {  this(file.getPath());}  }
class C{  private static void mult(int[] src,int srcLen,int v0,int v1,int[] dst){  long v=v0 & LONG_MASK;  long carry=0;  for (int j=0; j < srcLen; j++) {    long product=v * (src[j] & LONG_MASK) + carry;    dst[j]=(int)product;    carry=product >>> 32;  }  dst[srcLen]=(int)carry;  v=v1 & LONG_MASK;  carry=0;  for (int j=0; j < srcLen; j++) {    long product=(dst[j + 1] & LONG_MASK) + v * (src[j] & LONG_MASK) + carry;    dst[j + 1]=(int)product;    carry=product >>> 32;  }  dst[srcLen + 1]=(int)carry;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (timeSteps == null) {    throw new NullPointerException();  }  if (chipChipVariability <= 0.0 || chipChipVariability >= 1.0) {    throw new IllegalStateException();  }  if (sampleSampleVariability <= 0.0 || sampleSampleVariability >= 1.0) {    throw new IllegalStateException();  }  if (pixelDigitalization <= 0.0 || pixelDigitalization >= 1.0) {    throw new IllegalStateException();  }  if (dishDishVariability <= 0.0 || dishDishVariability >= 100.0) {    throw new IllegalStateException();  }  if (numDishes <= 0) {    throw new IllegalStateException();  }  if (numCellsPerDish <= 0) {    throw new IllegalStateException();  }  if (stepsGenerated <= 0) {    throw new IllegalStateException();  }  if (firstStepStored <= 0) {    throw new IllegalStateException();  }  if (interval <= 0) {    throw new IllegalStateException();  }  if (numSamplesPerDish <= 0) {    throw new IllegalStateException();  }}  }
class C{  VPlexDeviceInfo createDeviceAndAttachAsMirror(VPlexVirtualVolumeInfo virtualVolume,List<VolumeInfo> nativeVolumeInfoList,boolean discoveryRequired,boolean preserveData) throws VPlexApiException {  if (nativeVolumeInfoList.size() != 1) {    throw VPlexApiException.exceptions.oneDeviceRequiredForMirror();  }  List<VPlexClusterInfo> clusterInfoList=new ArrayList<VPlexClusterInfo>();  Map<VolumeInfo,VPlexStorageVolumeInfo> storageVolumeInfoMap=findStorageVolumes(nativeVolumeInfoList,discoveryRequired,clusterInfoList);  claimStorageVolumes(storageVolumeInfoMap,preserveData);  s_logger.info("Claimed storage volumes");  try {    List<VPlexStorageVolumeInfo> storageVolumeInfoList=new ArrayList<VPlexStorageVolumeInfo>();    for (    VolumeInfo nativeVolumeInfo : nativeVolumeInfoList) {      storageVolumeInfoList.add(storageVolumeInfoMap.get(nativeVolumeInfo));    }    createExtents(storageVolumeInfoList);    s_logger.info("Created extents on storage volumes");    VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();    List<VPlexExtentInfo> extentInfoList=discoveryMgr.findExtents(storageVolumeInfoList);    createLocalDevices(extentInfoList);    s_logger.info("Created local devices on extents");    List<VPlexDeviceInfo> localDevices=discoveryMgr.findLocalDevices(extentInfoList);    VPlexVirtualVolumeInfo vplexVolumeInfo=findVirtualVolumeAndUpdateInfo(virtualVolume.getName(),discoveryMgr);    String sourceDeviceName=vplexVolumeInfo.getSupportingDevice();    if (virtualVolume.getLocality().equals(VPlexApiConstants.LOCAL_VIRTUAL_VOLUME)) {      VPlexDeviceInfo sourceLocalDevice=discoveryMgr.findLocalDevice(sourceDeviceName);      if (sourceLocalDevice == null) {        throw VPlexApiException.exceptions.cantFindLocalDevice(sourceDeviceName);      }      s_logger.info("Found the local device {}",sourceLocalDevice.getPath());      deviceAttachMirror(sourceLocalDevice.getPath(),localDevices.get(0).getPath(),null);      s_logger.info("Added {} as a mirror to the source device {}",localDevices.get(0).getPath(),sourceLocalDevice.getPath());    } else {      VPlexDistributedDeviceInfo distributedDeviceInfo=discoveryMgr.findDistributedDevice(sourceDeviceName);      if (distributedDeviceInfo == null) {        throw VPlexApiException.exceptions.cantFindDistDevice(sourceDeviceName);      }      String sourceDevicePath=null;      List<VPlexDistributedDeviceComponentInfo> ddComponents=discoveryMgr.getDistributedDeviceComponents(distributedDeviceInfo);      for (      VPlexDistributedDeviceComponentInfo ddComponent : ddComponents) {        discoveryMgr.updateDistributedDeviceComponent(ddComponent);        if (ddComponent.getCluster().equals(localDevices.get(0).getCluster())) {          sourceDevicePath=ddComponent.getPath();          break;        }      }      if (sourceDevicePath == null) {        throw VPlexApiException.exceptions.couldNotFindComponentForDistDevice(distributedDeviceInfo.getName(),localDevices.get(0).getCluster());      }      deviceAttachMirror(sourceDevicePath,localDevices.get(0).getPath(),null);      s_logger.info("Added {} as a mirror to the device {}",localDevices.get(0).getPath(),sourceDevicePath);    }    vplexVolumeInfo=findVirtualVolumeAndUpdateInfo(virtualVolume.getName(),discoveryMgr);    virtualVolume.setThinCapable(vplexVolumeInfo.getThinCapable());    virtualVolume.setThinEnabled(vplexVolumeInfo.getThinEnabled());    return localDevices.get(0);  } catch (  Exception e) {    s_logger.error("Exception occurred creating mirror device");    throw e;  }}  }
class C{  public static boolean isFrictionImpulseEnabled(){  return frictionImpulseEnabled;}  }
class C{  public void train(TrainingConfig config){  config.addCredentials(this);  POST(this.url + "/train-instance",config.toXML());}  }
class C{  public CannotEstablishConnectionException(String message){  super(message);}  }
class C{  public void sync() throws IOException {  if (dataOutputStream instanceof FSDataOutputStream) {    ((FSDataOutputStream)dataOutputStream).hsync();  }}  }
class C{  protected void uninstallComboBoxModelListeners(ComboBoxModel model){  if (model != null && listDataListener != null) {    model.removeListDataListener(listDataListener);  }}  }
class C{  @Override public boolean hasUnsupportedCriticalExtension(){  return false;}  }
class C{  public static Integer findHlu(UnManagedVolume unManagedVolume,String exportMaskName){  StringSet hluMapEntries=PropertySetterUtil.extractValuesFromStringSet(SupportedVolumeInformation.HLU_TO_EXPORT_MASK_NAME_MAP.toString(),unManagedVolume.getVolumeInformation());  Integer hlu=ExportGroup.LUN_UNASSIGNED;  if (null != hluMapEntries) {    for (    String hluEntry : hluMapEntries) {      if (hluEntry.startsWith(exportMaskName)) {        String[] hluEntryParts=hluEntry.split("=");        if (hluEntryParts.length == 2) {          if (hluEntryParts[0].equals(exportMaskName)) {            String hluStr=hluEntryParts[1];            if (null != hluStr && !hluStr.isEmpty()) {              try {                hlu=Integer.valueOf(hluStr);                _logger.info("found hlu {} for {} in export mask " + exportMaskName,hlu,unManagedVolume.getLabel());              } catch (              NumberFormatException ex) {                _logger.warn("could not parse HLU entry from " + hluEntry);              }            }          }        }      }    }  }  return hlu;}  }
class C{  public void send(String message){}  }
class C{  private void prefetchStatementData(StatementData data) throws ReplicatorException {  statements++;  String sqlQuery=null;  try {    if (data.getQuery() != null)     sqlQuery=data.getQuery(); else {      try {        sqlQuery=new String(data.getQueryAsBytes(),data.getCharset());      } catch (      UnsupportedEncodingException e) {        sqlQuery=new String(data.getQueryAsBytes());      }    }    statement.clearBatch();    boolean hasTransform=false;    boolean fetchSecondaryIndexes=false;    if (logger.isDebugEnabled()) {      logger.debug("Seeking prefetch transformation query: " + sqlQuery);    }    SqlOperation parsing=(SqlOperation)data.getParsingMetadata();    if (parsing.getOperation() == SqlOperation.INSERT) {      Matcher m=insert.matcher(sqlQuery);      if (m.matches()) {        if (m.group(1) != null)         sqlQuery=m.group(1); else         sqlQuery=m.group(2);        if (logger.isDebugEnabled())         logger.debug("Transformed INSERT to prefetch query: " + sqlQuery);        transformed++;        hasTransform=true;      } else {        if (logger.isDebugEnabled())         logger.debug("Unable to match INSERT for transformation: " + sqlQuery);      }    } else     if (parsing.getOperation() == SqlOperation.DELETE) {      Matcher m=delete.matcher(sqlQuery);      if (m.matches()) {        sqlQuery="SELECT * FROM " + m.group(1);        if (logger.isDebugEnabled())         logger.debug("Transformed DELETE to prefetch query: " + sqlQuery);        transformed++;        hasTransform=true;        fetchSecondaryIndexes=true;      } else {        if (logger.isDebugEnabled())         logger.debug("Unable to match DELETE for transformation: " + sqlQuery);      }    } else     if (parsing.getOperation() == SqlOperation.UPDATE) {      Matcher m=update.matcher(sqlQuery);      if (m.matches()) {        sqlQuery="SELECT * FROM " + m.group(1) + " "+ m.group(2);        if (logger.isDebugEnabled())         logger.debug("Transformed UPDATE to prefetch query: " + sqlQuery);        transformed++;        hasTransform=true;        fetchSecondaryIndexes=true;      } else {        if (logger.isDebugEnabled())         logger.debug("Unable to match UPDATE for transformation: " + sqlQuery);      }    } else     if (parsing.getOperation() == SqlOperation.SET) {      if (logger.isDebugEnabled())       logger.debug("Allowing SET operation to proceed: " + sqlQuery);      hasTransform=true;    } else {      if (logger.isDebugEnabled())       logger.debug("Ignoring unmatched statement: " + sqlQuery);    }    String schema=data.getDefaultSchema();    Long timestamp=data.getTimestamp();    List<ReplOption> options=data.getOptions();    applyUseSchema(schema);    applySetTimestamp(timestamp);    applySessionVariables(options);    try {      statement.executeBatch();    } catch (    SQLWarning e) {      String msg="Warning generated when setting context of query: original=" + data.toString() + " warning="+ e.getMessage();      logger.warn(msg);    }catch (    SQLException e) {      if (data.getErrorCode() == 0) {        String msg="Error generated when seting context of prefetch query: original=" + data.toString();        SQLException sqlException=new SQLException(msg);        sqlException.initCause(e);        throw sqlException;      }    } finally {      statement.clearBatch();    }    ResultSet rs=null;    if (hasTransform) {      if (prefetchRowLimit > 0)       sqlQuery=prefetchTransformer.addLimitToQuery(sqlQuery,prefetchRowLimit);      try {        if (logger.isDebugEnabled())         logger.debug("Executing transformed query: " + sqlQuery);        rs=statement.executeQuery(sqlQuery);        prefetchedQueries++;        if (fetchSecondaryIndexes) {          prefetchIndexesForStatement(data,parsing,rs);        }      }  finally {        closeResultSet(rs);      }    }  } catch (  SQLException e) {    logFailedStatementSQL(data.getQuery(),e);    throw new ApplierException(e);  }}  }
class C{  public void commit() throws RollbackException, HeuristicMixedException, HeuristicRollbackException, SecurityException, SystemException {  tm.commit();}  }
class C{  protected PeriodType checkPeriodType(PeriodType type){  return DateTimeUtils.getPeriodType(type);}  }
class C{  public boolean right(){  if (mColumn == 6) {    mRow++;    mColumn=0;  } else {    mColumn++;  }  if (isWithinCurrentMonth(mRow,mColumn)) {    return false;  }  nextMonth();  mRow=0;  mColumn=0;  while (!isWithinCurrentMonth(mRow,mColumn)) {    mColumn++;  }  return true;}  }
class C{  public Builder showCallback(SnackbarShowCallback callback){  showCallback=callback;  return this;}  }
class C{  private void handleActionDownload(String url){  new DownloadImageAsyncTask(this).execute(url);}  }
class C{  public static GcSession initWithClientSessionId(String clientSessionId,String customerId,Region region,EnvironmentType environment,String appIdentifier,String ipAddress){  if (clientSessionId == null) {    throw new InvalidParameterException("Error creating GcSession, clientSessionId may not be null");  }  if (customerId == null) {    throw new InvalidParameterException("Error creating GcSession, customerId may not be null");  }  if (region == null) {    throw new InvalidParameterException("Error creating GcSession, region may not be null");  }  if (environment == null) {    throw new InvalidParameterException("Error creating GcSession, environment may not be null");  }  if (appIdentifier == null) {    throw new InvalidParameterException("Error creating GcSession, appIdentifier may not be null");  }  if (ipAddress == null) {    throw new InvalidParameterException("Error creating GcSession, ipAddress may not be null");  }  return initSession(clientSessionId,customerId,region,environment,appIdentifier,ipAddress);}  }
class C{  private static void printResults(List<File> nonTranslatedFiles){  System.out.println(nonTranslatedFiles.size() + " files are not translated.");  for (  File file : nonTranslatedFiles) {    System.out.println(file);  }}  }
class C{  public IntBuffer put(int c){  intArray.set(position++,c);  return this;}  }
class C{  public boolean isImSessionSupported(){  return mImSession;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public final static String String(final byte[] bytes){  return bytes == null ? "" : new String(bytes,0,bytes.length,StandardCharsets.UTF_8);}  }
class C{  public void push(final String value){  if (value == null) {    mv.visitInsn(Opcodes.ACONST_NULL);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  public static short parseShort(java.lang.String s) throws java.lang.NumberFormatException {  return 0;}  }
class C{  public static double lowerIncompleteGammaFunctionOfArgsOn2(int s,double x){  if (s <= 0) {    throw new IllegalArgumentException("s must be > 0");  }  if (s == 2) {    return 1 - Math.exp(-x / 2.0);  } else   if (s == 1) {    return Math.sqrt(Math.PI) * erf(Math.sqrt(x / 2.0));  } else {    return (s / 2.0 - 1.0) * lowerIncompleteGammaFunctionOfArgsOn2(s - 2,x) - Math.pow(x / 2.0,s / 2.0 - 1.0) * Math.exp(-x / 2.0);  }}  }
class C{  private boolean _sameChildren(ArrayList<JsonNode> otherChildren){  int len=otherChildren.size();  if (this.size() != len) {    return false;  }  for (int i=0; i < len; ++i) {    if (!_children.get(i).equals(otherChildren.get(i))) {      return false;    }  }  return true;}  }
class C{  @Override public boolean isLoadingLinearizedPDF(){  return (fileAccess.linearParser.linearizedBackgroundReaderer != null && fileAccess.linearParser.linearizedBackgroundReaderer.isAlive());}  }
class C{  public BulkUserImportException(String msg){  super(msg);}  }
class C{  public void processSuccess(Response response,Request request){  socketDelegate.processSuccess(response,request);}  }
class C{  public void updateSkybox(int resourceId) throws Exception {  if (mSkyboxTexture.getClass() != Texture.class)   throw new Exception("The skybox texture cannot be updated.");  Texture texture=(Texture)mSkyboxTexture;  texture.setResourceId(resourceId);  mRenderer.getTextureManager().replaceTexture(texture);}  }
class C{  private ServiceUnavailableException(){}  }
class C{  public void windowClosing(java.awt.event.WindowEvent e){  if (changed) {    javax.swing.JOptionPane.showMessageDialog(null,Bundle.getMessage("ReminderSaveString",Bundle.getMessage("MenuClocks")),Bundle.getMessage("ReminderTitle"),javax.swing.JOptionPane.INFORMATION_MESSAGE);    changed=false;  }  setVisible(false);  super.windowClosing(e);}  }
class C{  private void onRcDisplayClear(){  if (DEBUG_RC)   Log.i(TAG,"Clear remote control display");synchronized (mRCStack) {synchronized (mCurrentRcLock) {      mCurrentRcClientGen++;      setNewRcClient_syncRcsCurrc(mCurrentRcClientGen,null,true);    }  }}  }
class C{  public JsonObject add(String name,double value){  add(name,Json.value(value));  return this;}  }
class C{  public WampRouterBuilder addRealm(String realmName) throws ApplicationError {  return addRealm(realmName,new WampRoles[]{WampRoles.Broker,WampRoles.Dealer},false);}  }
class C{  @Override protected void deliver(CoapResponse response){synchronized (relation) {    if (relation.getOrderer().isNew(response.advanced())) {      relation.setCurrent(response);      relation.prepareReregistration(response,2000);      handler.onLoad(response);    } else {      LOGGER.log(Level.FINER,"Dropping old notification: {0}",response.advanced());      return;    }  }}  }
class C{  private String readColumnTextLowerCase(BinaryFile inputFile) throws FormatException {  StringBuffer buildretval=new StringBuffer();  boolean skipnext=false;  char tmp;  try {    while ((tmp=inputFile.readChar()) != ',') {      if ((tmp == ':') && !skipnext) {        return null;      }      if (tmp == '\\') {        skipnext=true;      } else {        skipnext=false;        buildretval.append(Character.toLowerCase(tmp));      }    }  } catch (  EOFException e) {  }  return buildretval.toString();}  }
class C{  @Override protected ProtectionSystem queryResource(URI id){  ArgValidator.checkUri(id);  ProtectionSystem system=_dbClient.queryObject(ProtectionSystem.class,id);  ArgValidator.checkEntityNotNull(system,id,isIdEmbeddedInURL(id));  if (!RegistrationStatus.REGISTERED.toString().equalsIgnoreCase(system.getRegistrationStatus())) {    throw APIException.badRequests.resourceAlreadyRegistered(ProtectionSystem.class.getSimpleName(),id);  }  return system;}  }
class C{  public void runStrategy(CandleSeries candleSeries,boolean newBar){  try {    CandleItem currentCandleItem=this.getCurrentCandle();    ZonedDateTime startPeriod=currentCandleItem.getPeriod().getStart();    if (this.isThereOpenPosition()) {      _log.info("Strategy complete open position filled symbol: " + getSymbol() + " startPeriod: "+ startPeriod);      if (OrderStatus.PARTIALFILLED.equals(this.getOpenPositionOrder().getStatus())) {        if (isRiskViolated(currentCandleItem.getClose(),this.getTradestrategy().getRiskAmount(),this.getOpenPositionOrder().getQuantity(),this.getOpenPositionOrder().getAverageFilledPrice())) {          this.cancelOrder(this.getOpenPositionOrder());        }      }      this.cancel();      return;    }    if (null != openPositionOrderKey && !this.getTradeOrder(openPositionOrderKey).isActive()) {      _log.info("Strategy complete open position cancelled symbol: " + getSymbol() + " startPeriod: "+ startPeriod);      updateTradestrategyStatus(TradestrategyStatus.CANCELLED);      this.cancel();      return;    }    if (startPeriod.equals(this.getTradestrategy().getTradingday().getOpen().plusMinutes(this.getTradestrategy().getBarSize() / 60)) && newBar) {      Candle candleAvgBar=candleSeries.getAverageBar(TradingCalendar.getDateAtTime(TradingCalendar.getPrevTradingDay(startPeriod),this.getTradestrategy().getTradingday().getOpen()),TradingCalendar.getDateAtTime(TradingCalendar.getPrevTradingDay(startPeriod),this.getTradestrategy().getTradingday().getClose()),true);      _log.info("Market Wieghted bar Open: " + candleAvgBar.getOpen() + " High: "+ candleAvgBar.getHigh()+ " Low: "+ candleAvgBar.getLow()+ " Close: "+ candleAvgBar.getClose());      Candle candleBar=candleSeries.getBar(TradingCalendar.getDateAtTime(TradingCalendar.getPrevTradingDay(startPeriod),this.getTradestrategy().getTradingday().getOpen()),TradingCalendar.getDateAtTime(TradingCalendar.getPrevTradingDay(startPeriod),this.getTradestrategy().getTradingday().getClose()));      _log.info("Market Wieghted bar Open: " + candleBar.getOpen() + " High: "+ candleBar.getHigh()+ " Low: "+ candleBar.getLow()+ " Close: "+ candleBar.getClose());      CandleItem prevCandleItem=null;      if (getCurrentCandleCount() > 0) {        prevCandleItem=(CandleItem)candleSeries.getDataItem(getCurrentCandleCount() - 1);      }      Side side=Side.newInstance(Side.SLD);      if (prevCandleItem.isSide(Side.BOT)) {        side=Side.newInstance(Side.BOT);      }      Money price=new Money(prevCandleItem.getHigh());      Money priceStop=new Money(prevCandleItem.getLow());      String action=Action.BUY;      if (side.equalsCode(Side.SLD)) {        price=new Money(prevCandleItem.getLow());        priceStop=new Money(prevCandleItem.getHigh());        action=Action.SELL;      }      Money priceClose=new Money(prevCandleItem.getClose());      Entrylimit entrylimit=getEntryLimit().getValue(priceClose);      double highLowRange=Math.abs(prevCandleItem.getHigh() - prevCandleItem.getLow());      priceStop=new Money(prevCandleItem.getOpen());      if ((highLowRange / prevCandleItem.getClose()) < entrylimit.getPercentOfPrice().doubleValue()) {        _log.info(" We have a trade!!  Symbol: " + getSymbol() + " Time: "+ startPeriod);        TradeOrder tradeOrder=createRiskOpenPosition(action,price,priceStop,true,null,null,null,null);        openPositionOrderKey=tradeOrder.getOrderKey();      } else {        _log.info("Rule 9:35 5min bar outside % limits. Symbol: " + getSymbol() + " Time: "+ startPeriod);        this.updateTradestrategyStatus(TradestrategyStatus.PERCENT);        this.cancel();      }    } else     if (!startPeriod.isBefore(this.getTradestrategy().getTradingday().getOpen().plusMinutes(60))) {      if (!this.isThereOpenPosition() && !TradestrategyStatus.CANCELLED.equals(getTradestrategy().getStatus())) {        this.updateTradestrategyStatus(TradestrategyStatus.TO);        this.cancelAllOrders();        _log.info("Rule 10:30:00 bar, time out unfilled open position Symbol: " + getSymbol() + " Time: "+ startPeriod);      }      this.cancel();    }  } catch (  StrategyRuleException ex) {    _log.error("Error  runRule exception: " + ex.getMessage(),ex);    error(1,10,"Error  runRule exception: " + ex.getMessage());  }}  }
class C{  public static void removeWhitelistedBlock(Block block){  whitelist.remove(block);}  }
class C{  private static void emitTab(int level){  for (int i=0; i < level; i++)   emit("  ");}  }
class C{  public ContentSelectionChangedEvent(XBLOMContentElement c){  super(c);}  }
class C{  @Override protected Package definePackage(String name,String a1,String a2,String a3,String b1,String b2,String b3,URL url){  name=name.replace('/','.');  name=name.replace('\\','.');  if (name.endsWith(".")) {    name=name.substring(0,name.length() - 1);  }  Package pkg=super.definePackage(name,a1,a2,a3,b1,b2,b3,url);  return pkg;}  }
class C{  private void paintBackground(Graphics2D g,JComponent c,int width,int height,ButtonColors colors){  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_OFF);  g.setColor(colors.top);  g.drawLine(1,0,width - 2,0);  g.setColor(colors.leftOuter);  g.drawLine(0,0,0,height - 4);  g.drawLine(1,height - 3,1,height - 3);  g.setColor(colors.leftInner);  g.drawLine(1,1,1,height - 4);  g.drawLine(2,height - 3,2,height - 3);  g.setColor(colors.edge);  g.drawLine(width - 1,0,width - 1,height - 2);  g.drawLine(3,height - 2,width - 2,height - 2);  g.setColor(colors.edgeShade);  g.drawLine(2,height - 2,2,height - 2);  g.setColor(colors.shadow);  g.drawLine(4,height - 1,width - 1,height - 1);  g.setColor(colors.interior);  g.fillRect(1,1,width - 1,height - 3);  g.drawLine(3,height - 3,width - 2,height - 3);}  }
class C{  public void CompareQueryResultsAsListWithoutAndWithIndexes(Object[][] r,int len,boolean checkOrder,String queries[]){  CompareQueryResultsAsListWithoutAndWithIndexes(r,len,checkOrder,true,queries);}  }
class C{  public ObjectMatrix2D like(int rows,int columns){  return new DenseObjectMatrix2D(rows,columns);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:35.322 -0500",hash_original_method="E810EBD15D5869EBFF41F5C56D486678",hash_generated_method="E5EF7C469EE32FDBA0935887E535FC66") BluetoothPan(Context mContext,ServiceListener l){  IBinder b=ServiceManager.getService(BluetoothAdapter.BLUETOOTH_SERVICE);  mServiceListener=l;  mAdapter=BluetoothAdapter.getDefaultAdapter();  if (b != null) {    mService=IBluetooth.Stub.asInterface(b);    if (mServiceListener != null) {      mServiceListener.onServiceConnected(BluetoothProfile.PAN,this);    }  } else {    Log.w(TAG,"Bluetooth Service not available!");    mService=null;  }}  }
class C{  public boolean isMultipartyCall(){  return mMultipartyCall;}  }
class C{  @Override public void doWork() throws OperatorException {  ExampleSet exampleSet=exampleSetInput.getData(ExampleSet.class);  if (exampleSet.getAttributes().getLabel() == null) {    throw new UserError(this,105);  }  Model model=this.trainRuleset(exampleSet,this.prepareWeights(exampleSet));  modelOutput.deliver(model);}  }
class C{  public static Map<VirtualFile,List<VirtualFile>> sortFilesByGitRoot(Collection<VirtualFile> virtualFiles,boolean ignoreNonGit) throws VcsException {  Map<VirtualFile,List<VirtualFile>> result=new HashMap<VirtualFile,List<VirtualFile>>();  for (  VirtualFile file : virtualFiles) {    final VirtualFile vcsRoot=gitRootOrNull(file.isDirectory() ? file.getParent() : file);    if (vcsRoot == null) {      if (ignoreNonGit) {        continue;      } else {        throw new VcsException("The file " + file.getPath() + " is not under Git");      }    }    List<VirtualFile> files=result.get(vcsRoot);    if (files == null) {      files=new ArrayList<VirtualFile>();      result.put(vcsRoot,files);    }    files.add(file);  }  return result;}  }
class C{  private void reducePentanomialBitwise(int[] pc){  int i;  int k=mDegree - pc[2];  int l=mDegree - pc[1];  int m=mDegree - pc[0];  for (i=polynomial.getLength() - 1; i >= mDegree; i--) {    if (polynomial.testBit(i)) {      polynomial.xorBit(i);      polynomial.xorBit(i - k);      polynomial.xorBit(i - l);      polynomial.xorBit(i - m);      polynomial.xorBit(i - mDegree);    }  }  polynomial.reduceN();  polynomial.expandN(mDegree);}  }
class C{  ParsingException(String msg){  super(msg);}  }
class C{  private TldInfo scanTld(String resourcePath,String entryName,InputStream stream) throws JasperException {  try {    TreeNode tld=new ParserUtils().parseXMLDocument(resourcePath,stream,isValidationEnabled);    String uri=null;    TreeNode uriNode=tld.findChild("uri");    if (uriNode != null) {      uri=uriNode.getBody();    }    ArrayList<String> listeners=new ArrayList<String>();    Iterator<TreeNode> listenerNodes=tld.findChildren("listener");    while (listenerNodes.hasNext()) {      TreeNode listener=listenerNodes.next();      TreeNode listenerClass=listener.findChild("listener-class");      if (listenerClass != null) {        String listenerClassName=listenerClass.getBody();        if (listenerClassName != null) {          listeners.add(listenerClassName);        }      }    }    return new TldInfo(uri,entryName,listeners.toArray(new String[listeners.size()]));  }  finally {    if (stream != null) {      try {        stream.close();      } catch (      Throwable t) {      }    }  }}  }
class C{  public void fillFieldValues(Randomizer rand){  if (!rand.getPdf().equals(pdf)) {    throwBadPdfException();  }  tsClipping.setSelected(rand.getClipping());  tfLowBound.setText(Double.toString(rand.getLowerBound()));  tfUpBound.setText(Double.toString(rand.getUpperBound()));  tfParam1.setText(Double.toString(rand.getParam1()));  tfParam2.setText(Double.toString(rand.getParam2()));  tfLowBound.setEnabled(rand.getClipping());  tfUpBound.setEnabled(rand.getClipping());}  }
class C{  public boolean isDefaultModel(){  return defaultModel;}  }
class C{  public EventStoreBuilder operationTimeout(Duration duration){  settingsBuilder.operationTimeout(duration);  return this;}  }
class C{  public Observable<String> retry(Observable<String> data){  return Observable.error(new RuntimeException("Not Implemented"));}  }
class C{  private void verifyIntegralArrays(Object inputArray,Object outputArray,int size){  for (int i=0; i < size; ++i) {    Number n1=(Number)Array.get(inputArray,i);    Number n2=(Number)Array.get(outputArray,i);    double value1=((Number)n1).longValue();    double value2=((Number)n2).longValue();    assertEquals("Entry #" + i + "/"+ size+ " not equal",value1,value2);  }}  }
class C{  public void init(int WindowNo,FormFrame frame){  m_WindowNo=WindowNo;  m_frame=frame;  log.info("VMerge.init - WinNo=" + m_WindowNo);  try {    preInit();    jbInit();    frame.getContentPane().add(this,BorderLayout.CENTER);  } catch (  Exception ex) {    log.log(Level.SEVERE,"",ex);  }}  }
class C{  public void comment(String comment){  spacing();  m_out.print("<!-- ");  m_out.print(comment);  m_out.print(" -->");  println();}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public void configureServerSSLSocket(Socket socket) throws IOException {  if (socket instanceof SSLSocket) {    SSLSocket sslSocket=(SSLSocket)socket;    try {      sslSocket.startHandshake();      SSLSession session=sslSocket.getSession();      Certificate[] peer=session.getPeerCertificates();      if (logger.isDebugEnabled()) {        logger.debug(LocalizedMessage.create(LocalizedStrings.SocketCreator_SSL_CONNECTION_FROM_PEER_0,((X509Certificate)peer[0]).getSubjectDN()));      }    } catch (    SSLPeerUnverifiedException ex) {      if (this.sslConfig.isRequireAuth()) {        logger.fatal(LocalizedMessage.create(LocalizedStrings.SocketCreator_SSL_ERROR_IN_AUTHENTICATING_PEER_0_1,new Object[]{socket.getInetAddress(),Integer.valueOf(socket.getPort())}),ex);        throw ex;      }    }catch (    SSLException ex) {      logger.fatal(LocalizedMessage.create(LocalizedStrings.SocketCreator_SSL_ERROR_IN_CONNECTING_TO_PEER_0_1,new Object[]{socket.getInetAddress(),Integer.valueOf(socket.getPort())}),ex);      throw ex;    }  }}  }
class C{  public boolean doesProtectionVolumeExist(String volumeWWN){  try {    List<ConsistencyGroupSettings> cgsSettings=functionalAPI.getAllGroupsSettings();    for (    ConsistencyGroupSettings cgSettings : cgsSettings) {      for (      ReplicationSetSettings rsSettings : cgSettings.getReplicationSetsSettings()) {        for (        UserVolumeSettings uvSettings : rsSettings.getVolumes()) {          String volUID=RecoverPointUtils.getGuidBufferAsString(uvSettings.getVolumeInfo().getRawUids(),false);          if (volUID.toLowerCase(Locale.ENGLISH).equalsIgnoreCase(volumeWWN)) {            return true;          }        }      }    }  } catch (  FunctionalAPIActionFailedException_Exception e) {    logger.error(e.getMessage(),e);    return false;  }catch (  FunctionalAPIInternalError_Exception e) {    logger.error(e.getMessage(),e);    return false;  }  return false;}  }
class C{  public TopParams withContainer(@NotNull String container){  requireNonNull(container);  this.container=container;  return this;}  }
class C{  public static FilePathDebug register(){  FilePath.register(INSTANCE);  return INSTANCE;}  }
class C{  @LogMessageDocs({@LogMessageDoc(level="WARN",message="Failed to cleanly shut down RPC server",explanation="Could not close all open sockets cleanly"),@LogMessageDoc(level="WARN",message="Interrupted while shutting down RPC server",explanation="Could not close all open sockets cleanly")}) public void shutdown(){  shutDown=true;  try {    if (!cg.close().await(5,TimeUnit.SECONDS)) {      logger.warn("Failed to cleanly shut down RPC server");      return;    }    if (clientBootstrap != null)     clientBootstrap.releaseExternalResources();    clientBootstrap=null;    if (serverBootstrap != null)     serverBootstrap.releaseExternalResources();    serverBootstrap=null;    if (pipelineFactory != null)     pipelineFactory.releaseExternalResources();    pipelineFactory=null;    if (bossExecutor != null)     bossExecutor.shutdown();    bossExecutor=null;    if (workerExecutor != null)     workerExecutor.shutdown();    workerExecutor=null;  } catch (  InterruptedException e) {    logger.warn("Interrupted while shutting down RPC server");  }  logger.debug("Internal floodlight RPC shut down");}  }
class C{  public String basePackageName(){  try {    return Optional.of(document()).map(null).flatMap(null).orElseGet(null);  } catch (  final ClassCastException ex) {    throw new SpeedmentException("The method basePackageName() may only be called on " + "instances of TranslatorSupport that have a document that " + "implements HasPackageName.",ex);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private Map<Location,AbstractState> flattenArtOntoVpcLocations(){  SetMultimap<Location,AbstractState> vpcSensitiveReached=HashMultimap.create();  Deque<AbstractState> worklist=new LinkedList<AbstractState>();  worklist.add(art.getRoot());  Set<AbstractState> visited=new HashSet<AbstractState>();  visited.add(art.getRoot());  while (!worklist.isEmpty()) {    AbstractState headState=worklist.removeFirst();    if (isVpcStateBot(headState))     continue;    BasedNumberElement vpcVal=getVPC(headState);    VpcLocation headVpcLoc=new VpcLocation(vpcVal,(RTLLabel)headState.getLocation());    vpcSensitiveReached.put(headVpcLoc,headState);    Set<Pair<CFAEdge,AbstractState>> successors=art.getChildren(headState);    for (    Pair<CFAEdge,AbstractState> sPair : successors) {      AbstractState nextState=sPair.getRight();      if (!visited.contains(nextState)) {        visited.add(nextState);        worklist.add(nextState);      }    }  }  Map<Location,AbstractState> constants=new HashMap<Location,AbstractState>();  for (  Location l : vpcSensitiveReached.keySet()) {    constants.put(l,Lattices.joinAll(vpcSensitiveReached.get(l)));  }  return constants;}  }
class C{  protected boolean onSendPartialSuccess(RecordBuffer<R> buffer,BufferSendResult<R> result){  sendPartialSuccess.incrementAndGet();  logger.debug("{}:{} Send PARTIAL_SUCCESS: Sent: {}, Failed: {}",name(),buffer,result.sentRecordCount(),result.remainingRecordCount());  return queueBufferForRetry(buffer);}  }
class C{  private void enableButtons(){  int row=m_table.getSelectedRow();  boolean enabled=row > -1;  confirmPanel.getOKButton().setEnabled(enabled);}  }
class C{  private AlignmentPattern handlePossibleCenter(int[] stateCount,int i,int j){  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2];  float centerJ=centerFromEnd(stateCount,j);  float centerI=crossCheckVertical(i,(int)centerJ,2 * stateCount[1],stateCountTotal);  if (!Float.isNaN(centerI)) {    float estimatedModuleSize=(float)(stateCount[0] + stateCount[1] + stateCount[2]) / 3.0f;    for (    AlignmentPattern center : possibleCenters) {      if (center.aboutEquals(estimatedModuleSize,centerI,centerJ)) {        return center.combineEstimate(centerI,centerJ,estimatedModuleSize);      }    }    AlignmentPattern point=new AlignmentPattern(centerJ,centerI,estimatedModuleSize);    possibleCenters.add(point);    if (resultPointCallback != null) {      resultPointCallback.foundPossibleResultPoint(point);    }  }  return null;}  }
class C{  public Feature nextFeature(){  Feature f=(Feature)currentFeatures.get(currentFeatureIdx);  currentFeatureIdx++;  return f;}  }
class C{  public ClientCacheCreation(){  this(false);}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  DownloadDao.dropTable(db,ifExists);}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  public long readRawVarint64() throws IOException {  int shift=0;  long result=0;  while (shift < 64) {    final byte b=readRawByte();    result|=(long)(b & 0x7F) << shift;    if ((b & 0x80) == 0) {      return result;    }    shift+=7;  }  throw InvalidProtocolBufferNanoException.malformedVarint();}  }
class C{  @Override public int increment(ItemStack stack,int amt){  NBTTagCompound nbt;  if (stack.hasTagCompound()) {    nbt=stack.getTagCompound();  } else {    nbt=new NBTTagCompound();  }  int prevAmt=nbt.getInteger("air");  int newAmt=Math.min(prevAmt + amt,getMaxAir());  nbt.setInteger("air",newAmt);  stack.setTagCompound(nbt);  return newAmt - prevAmt;}  }
class C{  public DeleteBOMAction(JTree tree){  super(COMMAND);  setActionCommand(COMMAND);  this.tree=tree;}  }
class C{  public void handle(ConfigEvent event,Context context) throws IOException {  Regions region=Regions.fromName(System.getenv(AWS_REGION_PROPERTY));  AmazonConfig configClient=new AmazonConfigClient().withRegion(region);  doHandle(event,context,configClient);}  }
class C{  public static ITopic poolVideo(String url,Context context){  final Topic topic=new Topic("Pool Video",340,context,VIDEO_KEY);  topic.setText("Great shot!");  topic.setIsPrebuiltTopic(true);  topic.setColor(ContextCompat.getColor(context,R.color.futu_red));  VideoCard card=new VideoCard("__",640,context);  card.setCardType(VIDEO_KEY);  topic.addCard(card);  return topic;}  }
class C{  @Override public int hashCode(){  return value.hashCode();}  }
class C{  protected void scrollSelf(){  Field field=null;  if (mAutoScroller == null) {    mAutoScroller=new AutoScroller(getContext(),new AccelerateInterpolator());  }  try {    field=ViewPagerCompat.class.getDeclaredField("mScroller");    field.setAccessible(true);    field.set(this,mAutoScroller);    mAutoScroller.setFactor(AutoScroller.FACTOR_LONG);  } catch (  Exception e) {    Log.E(TAG,"",e);  }  int newPosition=getCurrentItem() + 1;  this.setCurrentItem(newPosition,true);  try {    field=ViewPagerCompat.class.getDeclaredField("mScroller");    field.setAccessible(true);    field.set(this,mAutoScroller);    mAutoScroller.setFactor(AutoScroller.FACTOR_SHORT);  } catch (  Exception e) {    Log.E(TAG,"",e);  }}  }
class C{  public void snapshot(){  filesize=0L;  duration=0;  for (  MiFile file : files) {    file.snapshot();    filesize+=file.getFilesize();    duration+=file.getDuration();    lang.addAll(file.getLang());  }}  }
class C{  protected Query createFuzzyQuery(final String field,final String value,final float minimumSimilarity,final float boost){  final Query query=createFuzzyQuery(field,value,minimumSimilarity);  query.setBoost(boost);  return query;}  }
class C{  public void testSinglePolygonManyPointsNoHoleRoundTrip() throws IOException, SAXException, ParserConfigurationException {  PolygonGenerator pg=new PolygonGenerator();  pg.setGeometryFactory(geometryFactory);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setGenerationAlgorithm(PolygonGenerator.BOX);  pg.setNumberPoints(1000);  Polygon pt=(Polygon)pg.create();  checkRoundTrip(pt);}  }
class C{  public int size(){  return codon.length;}  }
class C{  @Override protected void validate(){  failIf(this.value < 0,"Timeout must be > 0");}  }
class C{  @Override public final void onListItemClick(final ListView lv,final View iv,final int position,final long id){  if (position != 0) {    final Cursor row=(Cursor)getListView().getItemAtPosition(position);    final String bssid=row.getString(row.getColumnIndex(Schema.COL_BSSID));    final Intent intent=new Intent();    intent.setClass(getActivity(),WifiDetailsActivity.class);    intent.putExtra(Schema.COL_BSSID,bssid);    intent.putExtra(Schema.COL_SESSION_ID,mSession);    startActivity(intent);  }}  }
class C{  @Override public void write(TextWriterStream out,String label,double[] v){  StringBuilder buf=new StringBuilder();  if (label != null) {    buf.append(label).append('=');  }  if (v != null) {    FormatUtil.formatTo(buf,v," ");  }  out.inlinePrintNoQuotes(buf.toString());}  }
class C{  protected void assertEqualStreams(InputStream expected,InputStream actual,int len) throws IOException {  actual.read(new byte[0]);  expected.read(new byte[0]);  actual.read(new byte[10],3,0);  expected.read(new byte[10],0,0);  for (int i=0; len < 0 || i < len; i++) {    int ca=actual.read();    actual.read(new byte[0]);    int ce=expected.read();    if (ca != ce) {      assertEquals("Error at index " + i,ce,ca);    }    if (ca == -1) {      break;    }  }  actual.read(new byte[10],3,0);  expected.read(new byte[10],0,0);  actual.read(new byte[0]);  expected.read(new byte[0]);  actual.close();  expected.close();}  }
class C{  @Override public Object copy(){  return this;}  }
class C{  protected void retrieveFromListExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  String idArea=request.getParameter("idArea");  ServiceRepository services=getServiceRepository(request);  GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();  AreaVO areaVO=descripcionService.getArea(idArea);  request.setAttribute("areaVO",areaVO);  setReturnActionFordward(request,mapping.findForward("retrieveFromList"));}  }
class C{  public void addAll(Stats values){  if (values.count() == 0) {    return;  }  if (count == 0) {    count=values.count();    mean=values.mean();    sumOfSquaresOfDeltas=values.sumOfSquaresOfDeltas();    min=values.min();    max=values.max();  } else {    count+=values.count();    if (isFinite(mean) && isFinite(values.mean())) {      double delta=values.mean() - mean;      mean+=delta * values.count() / count;      sumOfSquaresOfDeltas+=values.sumOfSquaresOfDeltas() + delta * (values.mean() - mean) * values.count();    } else {      mean=calculateNewMeanNonFinite(mean,values.mean());      sumOfSquaresOfDeltas=NaN;    }    min=Math.min(min,values.min());    max=Math.max(max,values.max());  }}  }
class C{  public CursorResponseMessage(CursorResponseMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  this.cursorId=other.cursorId;  if (other.isSetValues()) {    List<KeyedValues> __this__values=new ArrayList<KeyedValues>();    for (    KeyedValues other_element : other.values) {      __this__values.add(new KeyedValues(other_element));    }    this.values=__this__values;  }}  }
class C{  private void tearDownQuery(UUID queryId){  if (queryId != null) {    if (log.isDebugEnabled()) {      log.debug("Tearing down query: " + queryId);      log.debug("queries2 has " + queries2.size());    }    final RunningQuery r=queries2.get(queryId);    if (r != null) {      queries.remove(r.getExtQueryId(),r);      queries2.remove(queryId);      if (log.isDebugEnabled()) {        log.debug("Tearing down query: " + queryId);        log.debug("queries2 has " + queries2.size());      }    }  }}  }
class C{  public void write(PrintWriter writer){  this.output=writer;  dispatch(base,false);  writer.flush();}  }
class C{  private int advanceBufferToNextPattern(ByteBuffer buffer){  Matcher matcher;  int currentLookedPosition=buffer.position();  boolean firstLine=true;  while (buffer.hasRemaining()) {    if (buffer.get() == SingleLineSplitter.LINE_DELIMITER) {      if (!firstLine) {        String line=new String(buffer.array(),currentLookedPosition,buffer.position() - currentLookedPosition,StandardCharsets.UTF_8);        matcher=startingPattern.matcher(line);        if (matcher.lookingAt()) {          buffer.position(currentLookedPosition);          return currentLookedPosition;        }      }      firstLine=false;      currentLookedPosition=buffer.position();    }  }  if (!firstLine && buffer.limit() < buffer.capacity()) {    return buffer.position();  }  return -1;}  }
class C{  public int countTreeNodes(){  return treeData.countTreeNodes();}  }
class C{  public void joinRoads(Intersection intersection){  if (intersection.getRoadCount() != 2)   throw new IllegalArgumentException("Illegal intersection conversion");  Road road0=intersection.getRoad(0);  Road road1=intersection.getRoad(1);  if (road0 == road1) {    roads.remove(road1);    intersections.remove(intersection);    return;  }  if (road0.getRoadClass() != road1.getRoadClass())   throw new IllegalArgumentException("Illegal intersection conversion");  intersections.remove(intersection);  roads.remove(road1);  RoadPoint[] road0Points=road0.getRoadPoints();  RoadPoint[] road1Points=road1.getRoadPoints();  RoadPoint[] innerPoints=new RoadPoint[road0Points.length + road1Points.length + 1];  int j=0;  Intersection firstIntersection;  if (intersection == road0.getFirstIntersection()) {    firstIntersection=road0.getSecondIntersection();    for (int i=road0Points.length; --i >= 0; )     innerPoints[j++]=road0Points[i];  } else {    firstIntersection=road0.getFirstIntersection();    System.arraycopy(road0Points,0,innerPoints,j,road0Points.length);    j+=road0Points.length;  }  Intersection otherIntersection=road1.getOtherIntersection(intersection);  otherIntersection.removeRoad(road1);  road0.setIntersections(firstIntersection,otherIntersection);  otherIntersection.addRoad(road0);  innerPoints[j++]=new RoadPoint(road0,intersection.getLocation(),this);  if (intersection == road1.getFirstIntersection()) {    System.arraycopy(road1Points,0,innerPoints,j,road1Points.length);    j+=road1Points.length;  } else {    for (int i=road1Points.length; --i >= 0; )     innerPoints[j++]=road1Points[i];  }  road0.setRoadPoints(innerPoints);  road0.setName(mergeRoadNames(road0.getName(),road1.getName()));}  }
class C{  protected synchronized boolean grantLockToRequest(DLockRequestMessage request){  Assert.assertTrue(request.getRemoteThread() != null);  if (isGranted(true) || hasWaitingRequests()) {    return false;  }  if (logger.isTraceEnabled(LogMarker.DLS)) {    logger.trace(LogMarker.DLS,"[DLockGrantToken.grantLockToRequest] granting: {}",request);  }  long newLeaseExpireTime=grantAndRespondToRequest(request);  if (newLeaseExpireTime == -1)   return false;  if (newLeaseExpireTime < Long.MAX_VALUE) {    long now=DLockService.getLockTimeStamp(this.grantor.dm);    this.grantor.thread.checkTimeToWait(newLeaseExpireTime - now,true);  }  return true;}  }
class C{  public void fundamentalData(int reqId,String data){  _log.debug("fundamentalData: " + reqId + " "+ data);}  }
class C{  private void processOnce() throws CompilationFailedException, IOException, URISyntaxException {  GroovyShell groovy=new GroovyShell(conf);  setupContextClassLoader(groovy);  groovy.run(getScriptSource(isScriptFile,script),args);}  }
class C{  public InputMethodInfo(ResolveInfo ri,boolean isAuxIme,String settingsActivity,List<InputMethodSubtype> subtypes,int isDefaultResId,boolean forceDefault){  final ServiceInfo si=ri.serviceInfo;  mService=ri;  mId=new ComponentName(si.packageName,si.name).flattenToShortString();  mSettingsActivityName=settingsActivity;  mIsDefaultResId=isDefaultResId;  mIsAuxIme=isAuxIme;  if (subtypes != null) {    mSubtypes.addAll(subtypes);  }  mForceDefault=forceDefault;}  }
class C{  boolean search(int from){  this.hitEnd=false;  this.requireEnd=false;  from=from < 0 ? 0 : from;  this.first=from;  this.oldLast=oldLast < 0 ? from : oldLast;  for (int i=0; i < groups.length; i++)   groups[i]=-1;  acceptMode=NOANCHOR;  boolean result=parentPattern.root.match(this,from,text);  if (!result)   this.first=-1;  this.oldLast=this.last;  return result;}  }
class C{  public static ParameterOption createParameterOption(String optionId,ParameterDefinition parameterDefinition,DataService dataManager) throws NonUniqueBusinessKeyException {  ParameterOption parameterOption=new ParameterOption();  parameterOption.setOptionId(optionId);  parameterOption.setParameterDefinition(parameterDefinition);  dataManager.persist(parameterOption);  dataManager.flush();  return parameterOption;}  }
class C{  public void publish(){  if (!isPublished()) {    ZeroConfService.services.put(this.key(),this);    this.listeners.stream().forEach(null);    boolean useIPv4=ProfileUtils.getPreferences(ProfileManager.getDefault().getActiveProfile(),ZeroConfService.class,false).getBoolean(ZeroConfService.IPv4,true);    boolean useIPv6=ProfileUtils.getPreferences(ProfileManager.getDefault().getActiveProfile(),ZeroConfService.class,false).getBoolean(ZeroConfService.IPv6,true);    for (    JmDNS netService : ZeroConfService.netServices().values()) {      ZeroConfServiceEvent event;      ServiceInfo info;      try {        if (netService.getInetAddress() instanceof Inet6Address && !useIPv6) {          log.debug("Ignoring IPv6 address {}",netService.getInetAddress().getHostAddress());          continue;        }        if (netService.getInetAddress() instanceof Inet4Address && !useIPv4) {          log.debug("Ignoring IPv4 address {}",netService.getInetAddress().getHostAddress());          continue;        }        try {          log.debug("Publishing ZeroConfService for '{}' on {}",key(),netService.getInetAddress().getHostAddress());        } catch (        IOException ex) {          log.debug("Publishing ZeroConfService for '{}' with IOException {}",key(),ex.getLocalizedMessage(),ex);        }        if (!this.serviceInfos.containsKey(netService.getInetAddress())) {          try {            info=this.serviceInfo();            netService.registerService(info);            log.debug("Register service '{}' on {} successful.",this.key(),netService.getInetAddress().getHostAddress());          } catch (          IllegalStateException ex) {            try {              log.debug("Initial attempt to register '{}' on {} failed.",this.key(),netService.getInetAddress().getHostAddress());              info=this.addServiceInfo(netService);              log.debug("Retrying register '{}' on {}.",this.key(),netService.getInetAddress().getHostAddress());              netService.registerService(info);            } catch (            IllegalStateException ex1) {              log.debug("'{}' is already registered on {}.",this.key(),netService.getInetAddress().getHostAddress());              continue;            }          }        } else {          log.debug("skipping '{}' on {}, already in serviceInfos.",this.key(),netService.getInetAddress().getHostAddress());        }        event=new ZeroConfServiceEvent(this,netService);      } catch (      IOException ex) {        log.error("Unable to publish service for '{}': {}",key(),ex.getMessage());        continue;      }      this.listeners.stream().forEach(null);    }  }}  }
class C{  protected MouseWheelListener createMouseWheelListener(){  return getHandler();}  }
class C{  @FXML public void newProject(){  if (showConfirmationDialogAndWait()) {    pipeline.clear();    project.setFile(Optional.empty());  }}  }
class C{  public static String formatMemorySize(long arg){  if (arg >= 1024 * 1024 * 1024)   return String.format("%d GB",arg / (1024 * 1024 * 1024)); else   if (arg >= 1024 * 1024)   return String.format("%d MB",arg / (1024 * 1024)); else   if (arg >= 1024)   return String.format("%d KB",arg / (1024)); else   return String.format("%d",arg);}  }
class C{  public Matrix3d scale(Vector3dc xyz){  return scale(xyz.x(),xyz.y(),xyz.z(),this);}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  protected boolean matchIPAddress(int rulePrefix,int ruleBits,int packetAddress){  boolean matched=true;  int rule_iprng=32 - ruleBits;  int rule_ipint=rulePrefix;  int pkt_ipint=packetAddress;  if (rule_iprng > 0) {    rule_ipint=rule_ipint >> rule_iprng;    pkt_ipint=pkt_ipint >> rule_iprng;    rule_ipint=rule_ipint << rule_iprng;    pkt_ipint=pkt_ipint << rule_iprng;  }  if (rule_ipint != pkt_ipint)   matched=false;  return matched;}  }
class C{  public int numElements() throws Exception {  if (m_Classifier instanceof PartitionGenerator) {    int size=0;    for (int i=0; i < m_Classifiers.length; i++) {      size+=((PartitionGenerator)m_Classifiers[i]).numElements();    }    return size;  } else   throw new Exception("Classifier: " + getClassifierSpec() + " cannot generate a partition");}  }
class C{  public JBoss4xRuntimeConfigurationCapability(){  this.propertySupportMap.put(GeneralPropertySet.PROTOCOL,Boolean.TRUE);  this.propertySupportMap.put(ServletPropertySet.PORT,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.TIMEOUT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.REMOTEDEPLOY_HOSTNAME,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.REMOTEDEPLOY_PORT,Boolean.TRUE);}  }
class C{  private String findVfilerName(FileShare fs){  String portGroup=null;  URI port=fs.getStoragePort();  if (port == null) {    _log.info("No storage port URI to retrieve vFiler name");  } else {    StoragePort stPort=_dbClient.queryObject(StoragePort.class,port);    if (stPort != null) {      URI haDomainUri=stPort.getStorageHADomain();      if (haDomainUri == null) {        _log.info("No Port Group URI for port {}",port);      } else {        StorageHADomain haDomain=_dbClient.queryObject(StorageHADomain.class,haDomainUri);        if (haDomain != null && haDomain.getVirtual() == true) {          portGroup=stPort.getPortGroup();          _log.debug("using port {} and vFiler {}",stPort.getPortNetworkId(),portGroup);        }      }    }  }  return portGroup;}  }
class C{  public String to_simple_string() throws internal_error {  String result;  result=((lhs() != null) ? lhs().the_symbol().name() : "NULL_LHS");  result+=" ::= ";  for (int i=0; i < rhs_length(); i++)   if (!rhs(i).is_action())   result+=((symbol_part)rhs(i)).the_symbol().name() + " ";  return result;}  }
class C{  @Category(FlakyTest.class) @Test public void testPRWithCacheCloseInOneDatastoreWithDelay() throws Exception {  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithDelay: Querying PR Test with cache Close PR operation*****");  Host host=Host.getHost(0);  VM accessor=host.getVM(0);  VM datastore1=host.getVM(1);  VM datastore2=host.getVM(2);  setCacheInVMs(accessor,datastore1,datastore2);  List vmList=new LinkedList();  vmList.add(datastore1);  vmList.add(datastore2);  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithDelay: Creating Accessor node on VM0");  accessor.invoke(PRQHelp.getCacheSerializableRunnableForPRAccessorCreate(name,redundancy,PortfolioData.class));  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithDelay: Successfully Created Accessor node on VM0");  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithDelay: Creating PR's across all VM1 , VM2");  datastore1.invoke(PRQHelp.getCacheSerializableRunnableForPRCreate(name,redundancy,PortfolioData.class));  datastore2.invoke(PRQHelp.getCacheSerializableRunnableForPRCreate(name,redundancy,PortfolioData.class));  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithDelay: Successfully Created PR on VM1 , VM2");  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithDelay: Creating Local Region on VM0");  accessor.invoke(PRQHelp.getCacheSerializableRunnableForLocalRegionCreation(localName,PortfolioData.class));  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithDelay: Successfully Created Local Region on VM0");  final PortfolioData[] portfolio=createPortfolioData(cnt,cntDest);  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithDelay: Inserting Portfolio data through the accessor node");  accessor.invoke(PRQHelp.getCacheSerializableRunnableForPRPuts(name,portfolio,cnt,cntDest));  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithDelay: Successfully Inserted Portfolio data through the accessor node");  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithDelay: Inserting Portfolio data on local node  VM0 for result Set Comparison");  accessor.invoke(PRQHelp.getCacheSerializableRunnableForPRPuts(localName,portfolio,cnt,cntDest));  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithDelay: Successfully Inserted Portfolio data on local node  VM0 for result Set Comparison");  Random random=new Random();  AsyncInvocation async0;  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithDelay: Querying on VM0 both on PR Region & local ,also  Comparing the Results sets from both");  async0=accessor.invokeAsync(PRQHelp.getCacheSerializableRunnableForPRQueryAndCompareResults(name,localName));  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithDelay: Calling for cache close on either of the Datastores VM1 , VM2 at random and then recreating the cache, with a predefined Delay ");  for (int j=0; j < queryTestCycle; j++) {    int k=(random.nextInt(vmList.size()));    LogWriterUtils.getLogWriter().info("PROperationWithQueryDUnitTest#getCacheSerializableRunnableForCacheClose: Closing cache");    ((VM)vmList.get(k)).invoke(null);    LogWriterUtils.getLogWriter().info("PROperationWithQueryDUnitTest#getCacheSerializableRunnableForCacheClose: Cache Closed");    setCacheInVMs(((VM)vmList.get(k)));    ((VM)(vmList.get(k))).invoke(PRQHelp.getCacheSerializableRunnableForCacheClose(name,redundancy,PortfolioData.class));    Wait.pause(threadSleepTime);  }  ThreadUtils.join(async0,5 * 60 * 1000);  if (async0.exceptionOccurred()) {    boolean isForceReattempt=false;    Throwable t=async0.getException();    do {      if (t instanceof ForceReattemptException) {        isForceReattempt=true;        break;      }      t=t.getCause();    } while (t != null);    if (!isForceReattempt) {      Assert.fail("Unexpected exception during query",async0.getException());    }  }  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithDelay: Querying with PR Operations ENDED*****");}  }
class C{  public boolean filterNTLMResponses(String k){  boolean found=false;  for (int i=0; i < nkeys; i++) {    if (k.equalsIgnoreCase(keys[i]) && values[i] != null && values[i].length() > 5 && values[i].substring(0,5).equalsIgnoreCase("NTLM ")) {      found=true;      break;    }  }  if (found) {    int j=0;    for (int i=0; i < nkeys; i++) {      if (k.equalsIgnoreCase(keys[i]) && ("Negotiate".equalsIgnoreCase(values[i]) || "Kerberos".equalsIgnoreCase(values[i]))) {        continue;      }      if (i != j) {        keys[j]=keys[i];        values[j]=values[i];      }      j++;    }    if (j != nkeys) {      nkeys=j;      return true;    }  }  return false;}  }
class C{  public static long makeLong(int nLo,int nHi){  return (((long)nHi << 32) | (nLo & 0x00000000ffffffffL));}  }
class C{  private void addToRenaming(Renaming renaming,StringSet prevDeclared,ExprNode expr){  if (!(expr instanceof OpApplNode)) {    return;  }  StringSet newDeclared=prevDeclared.clone();  OpApplNode node=(OpApplNode)expr;  if (node.getUnbdedQuantSymbols() != null) {    for (int i=0; i < node.getUnbdedQuantSymbols().length; i++) {      FormalParamNode id=node.getUnbdedQuantSymbols()[i];      if (newDeclared.contains(getCurrentName(id,renaming))) {        String newname=getNewName(id,newDeclared,renaming);        newDeclared.add(newname);        addCurrentName(id,newname,renaming);      }    }  }  if (node.getBdedQuantSymbolLists() != null) {    for (int i=0; i < node.getBdedQuantSymbolLists().length; i++) {      addToRenaming(renaming,prevDeclared,node.getBdedQuantBounds()[i]);      FormalParamNode[] nodeList=node.getBdedQuantSymbolLists()[i];      for (int j=0; j < nodeList.length; j++) {        FormalParamNode id=nodeList[j];        if (newDeclared.contains(getCurrentName(id,renaming))) {          String newname=getNewName(id,newDeclared,renaming);          newDeclared.add(newname);          addCurrentName(id,newname,renaming);        }      }    }  }  for (int i=0; i < node.getArgs().length; i++) {    if (node.getArgs()[i] instanceof ExprNode) {      addToRenaming(renaming,newDeclared,(ExprNode)node.getArgs()[i]);    }  }}  }
class C{  public boolean equals(Object obj){  if (obj instanceof Xid) {    Xid other=(Xid)obj;    return formatId == other.getFormatId() && Arrays.equals(globalTransactionId,other.getGlobalTransactionId()) && Arrays.equals(branchQualifier,other.getBranchQualifier());  }  return false;}  }
class C{  public Bundler putBoolean(String key,boolean value){  bundle.putBoolean(key,value);  return this;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setRetainInstance(true);}  }
class C{  public boolean isShowDialog(){  return fShowDialog;}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  RouteLineNodeTableDao.createTable(db,ifNotExists);  PlanNodeTableDao.createTable(db,ifNotExists);}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(elementData.length);  for (int i=0; i < size; i++)   s.writeObject(elementData[i]);}  }
class C{  private com.codename1.ui.Component copyComponent(com.codename1.ui.Component cmp){  com.codename1.ui.Container cnt=builder.createContainer(res,copiedResourceName);  com.codename1.ui.Component dest=builder.findByName(cmp.getName(),cnt);  if (dest != null && dest.getParent() != null) {    removeComponentSync(dest.getParent(),dest);  }  return dest;}  }
class C{  public static double[] mean(double[][] vs){  int k=vs.length;  if (k == 0) {    throw new IllegalArgumentException("empty vector");  }  int n=vs[0].length;  double[] mean=new double[n];  for (int j=0; j < n; j++) {    for (int i=0; i < k; i++) {      mean[j]+=vs[i][j];    }    mean[j]/=k;  }  return mean;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) @Path("/discover") public TaskList discoverProtectionSystemsAll(){  Iterator<URI> protectionIter=_dbClient.queryByType(ProtectionSystem.class,true).iterator();  ArrayList<AsyncTask> tasks=new ArrayList<AsyncTask>();  while (protectionIter.hasNext()) {    URI protection=protectionIter.next();    String taskId=UUID.randomUUID().toString();    tasks.add(new AsyncTask(ProtectionSystem.class,protection,taskId));  }  ProtectionController controller=getController(RPController.class,ProtectionSystem._RP);  return discoverProtectionSystems(tasks,controller);}  }
class C{  public static List<Declaration> lookupOverloadedByName(List<Declaration> members,String name){  List<Declaration> result=null;  for (  Declaration dec : members) {    if (isResolvable(dec) && isNamed(name,dec)) {      if (result == null) {        result=new ArrayList<Declaration>(3);      }      result.add(dec);    }  }  if (result == null) {    result=Collections.emptyList();  }  return result;}  }
class C{  @SuppressWarnings("PMD.CloseResource") private Policy createDownloaderPolicy(String s3BucketName,String s3Key,String awsKmsKeyId){  return new AwsPolicyBuilder().withS3(s3BucketName,s3Key,S3Actions.GetObject).withKms(awsKmsKeyId,KmsActions.DECRYPT).build();}  }
class C{  public SessionNode(Class[] modelClasses){  this("???","???",modelClasses);}  }
class C{  public Protos.Offer poll(){  return queue.poll();}  }
class C{  public void trimToSize(){  if (count < value.length) {    char[] newValue=new char[count];    System.arraycopy(value,0,newValue,0,count);    value=newValue;  }}  }
class C{  @Override public void vetoableChange(PropertyChangeEvent e) throws PropertyVetoException {  String name=e.getPropertyName();  Object value=e.getNewValue();  log.config(name + "=" + value);  if (value == null)   return;  if (name.equals("C_PaySelection_ID")) {    paySelectSearch.setValue(value);    m_C_PaySelection_ID=((Integer)value).intValue();    loadPaySelectInfo();  }}  }
class C{  public static Test suite(){  TestSuite suite=new EipAllTests("Eip Tests");  return suite;}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public <REQ extends IMessage,REPLY extends IMessage>void registerMessage(Class<REQ> requestMessageType){  packetCodec.addDiscriminator(discriminator++,requestMessageType);}  }
class C{  public AnnotationVisitor visitAnnotationDefault(){  if (mv != null) {    return mv.visitAnnotationDefault();  }  return null;}  }
class C{  public void testBuilder_EmptyOnConstruct_MultipleAppends(){  SQLException root=new SQLException();  List<SQLException> additionalExceptions=new ArrayList<SQLException>();  for (int count=1; count <= 3; count++) {    additionalExceptions.add(new SQLException(Integer.toString(count)));  }  SQLExceptionChainBuilder<SQLException> builder=new SQLExceptionChainBuilder<SQLException>();  builder.append(root);  for (  SQLException ex : additionalExceptions) {    builder.append(ex);  }  assertTrue("SQLExceptionChainBuilder has a exception",builder.hasException());  SQLException resultException=builder.getException();  assertSame("Expected root exception to be identical to returned exception",root,resultException);  checkExceptionChain(resultException,additionalExceptions);}  }
class C{  public static boolean staticNextBoolean(){synchronized (shared) {    return shared.nextBoolean();  }}  }
class C{  public void populateAll() throws GeneralException {  if (this.requestInfoMap.event != null && this.requestInfoMap.event.type != null && (this.requestInfoMap.event.type.indexOf("service") >= 0)) {    String serviceName=this.requestInfoMap.event.invoke;    this.serviceCalledByRequestEvent=this.aif.getServiceArtifactInfo(serviceName);    if (this.serviceCalledByRequestEvent != null) {      UtilMisc.addToSortedSetInMap(this,aif.allRequestInfosReferringToServiceName,this.serviceCalledByRequestEvent.getUniqueId());    }  }  Map<String,ConfigXMLReader.RequestResponse> requestResponseMap=UtilGenerics.checkMap(this.requestInfoMap.requestResponseMap);  for (  ConfigXMLReader.RequestResponse response : requestResponseMap.values()) {    if ("view".equals(response.type)) {      String viewUri=response.value;      if (viewUri.startsWith("/")) {        viewUri=viewUri.substring(1);      }      try {        ControllerViewArtifactInfo artInfo=this.aif.getControllerViewArtifactInfo(controllerXmlUrl,viewUri);        this.viewsThatAreResponsesToThisRequest.add(artInfo);        UtilMisc.addToSortedSetInMap(this,this.aif.allRequestInfosReferringToView,artInfo.getUniqueId());      } catch (      GeneralException e) {        Debug.logWarning(e.toString(),module);      }    } else     if (response.type.equals("request")) {      String otherRequestUri=response.value;      if (otherRequestUri.startsWith("/")) {        otherRequestUri=otherRequestUri.substring(1);      }      try {        ControllerRequestArtifactInfo artInfo=this.aif.getControllerRequestArtifactInfo(controllerXmlUrl,otherRequestUri);        this.requestsThatAreResponsesToThisRequest.add(artInfo);        UtilMisc.addToSortedSetInMap(this,this.aif.allRequestInfosReferringToRequest,artInfo.getUniqueId());      } catch (      GeneralException e) {        Debug.logWarning(e.toString(),module);      }    } else     if (response.type.equals("request-redirect")) {      String otherRequestUri=response.value;      ControllerRequestArtifactInfo artInfo=this.aif.getControllerRequestArtifactInfo(controllerXmlUrl,otherRequestUri);      this.requestsThatAreResponsesToThisRequest.add(artInfo);      UtilMisc.addToSortedSetInMap(this,this.aif.allRequestInfosReferringToRequest,artInfo.getUniqueId());    } else     if (response.type.equals("request-redirect-noparam")) {      String otherRequestUri=response.value;      ControllerRequestArtifactInfo artInfo=this.aif.getControllerRequestArtifactInfo(controllerXmlUrl,otherRequestUri);      this.requestsThatAreResponsesToThisRequest.add(artInfo);      UtilMisc.addToSortedSetInMap(this,this.aif.allRequestInfosReferringToRequest,artInfo.getUniqueId());    }  }}  }
class C{  public void startTest(Test test){  String testClass=test.getClass().getName();  String testName=((TestCase)test).getName();  mTestResult=new Bundle(mResultTemplate);  mTestResult.putString(REPORT_KEY_NAME_CLASS,testClass);  mTestResult.putString(REPORT_KEY_NAME_TEST,testName);  mTestResult.putInt(REPORT_KEY_NUM_CURRENT,++mTestNum);  if (testClass != null && !testClass.equals(mTestClass)) {    mTestResult.putString(Instrumentation.REPORT_KEY_STREAMRESULT,String.format("\n%s:",testClass));    mTestClass=testClass;  } else {    mTestResult.putString(Instrumentation.REPORT_KEY_STREAMRESULT,"");  }  Method testMethod=null;  try {    testMethod=test.getClass().getMethod(testName);    if (testMethod.isAnnotationPresent(RepetitiveTest.class)) {      int numIterations=testMethod.getAnnotation(RepetitiveTest.class).numIterations();      mTestResult.putInt(REPORT_KEY_NUM_ITERATIONS,numIterations);    }  } catch (  NoSuchMethodException e) {  }  try {    if (mTestNum == 1)     Thread.sleep(mDelayMsec);  } catch (  InterruptedException e) {    throw new IllegalStateException(e);  }  sendStatus(REPORT_VALUE_RESULT_START,mTestResult);  mTestResultCode=0;  mIsTimedTest=false;  mIncludeDetailedStats=false;  try {    if (testMethod != null && testMethod.isAnnotationPresent(TimedTest.class)) {      mIsTimedTest=true;      mIncludeDetailedStats=testMethod.getAnnotation(TimedTest.class).includeDetailedStats();    } else     if (test.getClass().isAnnotationPresent(TimedTest.class)) {      mIsTimedTest=true;      mIncludeDetailedStats=test.getClass().getAnnotation(TimedTest.class).includeDetailedStats();    }  } catch (  SecurityException e) {  }  if (mIsTimedTest && mIncludeDetailedStats) {    mPerfCollector.beginSnapshot("");  } else   if (mIsTimedTest) {    mPerfCollector.startTiming("");  }}  }
class C{  public static FloatMatrix ones(int rows,int columns){  FloatMatrix m=new FloatMatrix(rows,columns);  for (int i=0; i < rows * columns; i++) {    m.put(i,1.0f);  }  return m;}  }
class C{  public void addMovementDamage(int level){switch (level) {case 1:    if (!minorMovementDamage) {      minorMovementDamage=true;      motivePenalty+=level;    }  break;case 2:if (!moderateMovementDamage) {  moderateMovementDamage=true;  motivePenalty+=level;}motiveDamage++;break;case 3:if (!heavyMovementDamage) {heavyMovementDamage=true;motivePenalty+=level;}int nMP=getOriginalWalkMP() - motiveDamage;if (nMP > 0) {motiveDamage=getOriginalWalkMP() - (int)Math.ceil(nMP / 2.0);}break;case 4:motiveDamage=getOriginalWalkMP();immobilize();}}  }
class C{  @Field(19) public __VARIANT_NAME_3_union pfltVal(Pointer<Float> pfltVal){  this.io.setPointerField(this,19,pfltVal);  return this;}  }
class C{  protected static double norm(double x1,double x2,int normTypeToUse){switch (normTypeToUse) {case EuclideanUtils.NORM_MAX_NORM:    return Math.abs(x1 - x2);default :  double difference=x1 - x2;return difference * difference;}}  }
class C{  public void testSuspend_UnregistersFromEventBus(){  mController.init();  mController.suspend();  assertEquals(0,mFakeEventBus.countRegisteredReceivers());}  }
class C{  public void testFiveNodeManySessionsManyEvents() throws Throwable {  testManySessionsManyEvents(5);}  }
class C{  private void initializeGraphAsEmpty(){  int max=getNumNodes();  parentMatrix=new int[getNumNodes()][max];  childMatrix=new int[getNumNodes()][max];  for (int i=0; i < getNumNodes(); i++) {    parentMatrix[i][0]=1;    childMatrix[i][0]=1;  }  for (int i=0; i < getNumNodes(); i++) {    for (int j=1; j < max; j++) {      parentMatrix[i][j]=-5;      childMatrix[i][j]=-5;    }  }}  }
class C{  public static String toString(final long t){  return toString(getDateFormat(),t);}  }
class C{  @Override public void returnQuota(ResourceTicketEntity childTicket) throws ResourceTicketNotFoundException {  returnQuota(childTicket.getParentId(),new QuotaCost(childTicket.getLimits()));}  }
class C{  @Override public BufferHolder copy(){  return new NExtremeArrayBufferHolder((JAMonArrayComparator)getComparator());}  }
class C{  protected void validateChapUsername(java.lang.String[] param){}  }
class C{  private Level selectFinestLevel(Level a,Level b){  if (a == null)   return b; else   if (b == null)   return a; else   if (b.intValue() < a.intValue())   return b; else   return a;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:50.802 -0500",hash_original_method="4F451180FF9E93B0119857AFE5ACD842",hash_generated_method="BD30B724511D9D00629B0F664C7C7B3C") private static void runSelectLoopMode() throws MethodAndArgsCaller {  ArrayList<FileDescriptor> fds=new ArrayList();  ArrayList<ZygoteConnection> peers=new ArrayList();  FileDescriptor[] fdArray=new FileDescriptor[4];  fds.add(sServerSocket.getFileDescriptor());  peers.add(null);  int loopCount=GC_LOOP_COUNT;  while (true) {    int index;    if (loopCount <= 0) {      gc();      loopCount=GC_LOOP_COUNT;    } else {      loopCount--;    }    try {      fdArray=fds.toArray(fdArray);      index=selectReadable(fdArray);    } catch (    IOException ex) {      throw new RuntimeException("Error in select()",ex);    }    if (index < 0) {      throw new RuntimeException("Error in select()");    } else     if (index == 0) {      ZygoteConnection newPeer=acceptCommandPeer();      peers.add(newPeer);      fds.add(newPeer.getFileDesciptor());    } else {      boolean done;      done=peers.get(index).runOnce();      if (done) {        peers.remove(index);        fds.remove(index);      }    }  }}  }
class C{  public static final int hexToInt(String hex){  int len=hex.length();  if (len > 16)   throw new NumberFormatException();  int l=0;  for (int i=0; i < len; i++) {    l<<=4;    int c=Character.digit(hex.charAt(i),16);    if (c < 0)     throw new NumberFormatException();    l|=c;  }  return l;}  }
class C{  public boolean isBlockScoped(){  boolean _switchResult=false;  VariableStatementKeyword _varStmtKeyword=this.getVarStmtKeyword();  if (_varStmtKeyword != null) {switch (_varStmtKeyword) {case LET:      _switchResult=true;    break;case CONST:  _switchResult=true;break;case VAR:_switchResult=false;break;default :VariableStatementKeyword _varStmtKeyword_1=this.getVarStmtKeyword();String _plus=("unsupported enum literal: " + _varStmtKeyword_1);throw new UnsupportedOperationException(_plus);}} else {VariableStatementKeyword _varStmtKeyword_1=this.getVarStmtKeyword();String _plus=("unsupported enum literal: " + _varStmtKeyword_1);throw new UnsupportedOperationException(_plus);}return _switchResult;}  }
class C{  public static void save(Tree t,List<String> ruleNames,String fileName) throws IOException, PrintException {  writePS(t,ruleNames,fileName);}  }
class C{  public static QueueInfo removeFirstRequest(QueueInfo queueInfo,String id,String lastSendResult){  QueueInfo firstRemoved=removeFirstRequest(queueInfo,id);  firstRemoved.lastSendResult=lastSendResult;  return firstRemoved;}  }
class C{  public void add(Float value){  if (value == null) {    addNull();  } else {    _add(numberNode(value.floatValue()));  }}  }
class C{  public EmailAddressValidator(@NonNull final Context context,@StringRes final int resourceId){  super(context,resourceId,REGEX);}  }
class C{  public MyHighlightPainter(final Color color){  super(color);}  }
class C{  public void testSuspend_UnregistersFromEventBus(){  mController.init();  mController.suspend();  assertEquals(0,mFakeCrudEventBus.countRegisteredReceivers());}  }
class C{  protected void onMark(double totalMillis,double lastMillis,String reason){}  }
class C{  @Nonnull public static SourceLineAnnotation createUnknown(@DottedClassName String className,String sourceFile,int startBytecode,int endBytecode){  SourceLineAnnotation result=new SourceLineAnnotation(className,sourceFile,-1,-1,startBytecode,endBytecode);  return result;}  }
class C{  public static Data create(byte[] buff){  return new Data(buff);}  }
class C{  public static boolean hasLoggingData(InvocationSequenceData data){  return null != data.getLoggingData();}  }
class C{  @SuppressWarnings("unchecked") @Override public boolean equals(Object o){  if (o == null) {    return false;  }  CacheObject<V> obj=(CacheObject<V>)(o);  return (ObjectUtils.isEquals(this.data,obj.data) && this.enterTime == obj.enterTime && this.priority == obj.priority && this.isExpired == obj.isExpired && this.isForever == obj.isForever);}  }
class C{  @RequestMapping(value="/admin/tags",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Tag> createTag(@Valid @RequestBody Tag tag) throws URISyntaxException {  log.debug("REST request to save tag : {}",tag);  if (tag.getId() != null) {    return ResponseEntity.badRequest().header("Failure","A new tag cannot already have an ID").body(null);  }  tag.setUser(userService.getUserWithAuthorities());  Tag result=tagRepository.save(tag);  return ResponseEntity.created(new URI("/api/admin/tags/" + result.getId())).headers(HeaderUtil.createEntityCreationAlert("tag",result.getId().toString())).body(result);}  }
class C{  public CascadingNetworkBuilder(Network network){  this.network=network;}  }
class C{  private static String mapName(@Nullable String name,Map<String,String> nsMap,boolean mapDefaultNamespace){  if (name == null) {    return null;  }  String ns;  String simpleKey;  List<String> components=Splitter.on(':').splitToList(name);  if (components.size() < 2) {    if (!mapDefaultNamespace) {      return name;    }    ns="";    simpleKey=name;  } else {    ns=components.get(0);    simpleKey=components.get(1);  }  if (nsMap.containsKey(ns)) {    ns=nsMap.get(ns);  }  return ns.isEmpty() ? simpleKey : (ns + ':' + simpleKey);}  }
class C{  private void checkTx(CacheMode cacheMode,TransactionConcurrency txConcurrency,TransactionIsolation txIsolation) throws Exception {  initialize(cacheMode,TRANSACTIONAL,txConcurrency,txIsolation);  System.out.println("BEFORE: " + evts.size());  caches[0].invoke(key1,new Transformer());  System.out.println("AFTER: " + evts.size());  checkEventNodeIdsStrict(Transformer.class.getName(),idsForKeys(key1));  assert evts.isEmpty();  caches[0].invokeAll(keys,new Transformer());  checkEventNodeIdsStrict(Transformer.class.getName(),idsForKeys(key1,key2));  assert evts.isEmpty();  System.out.println("BEFORE: " + evts.size());  caches[0].invoke(key1,new TransformerWithInjection());  System.out.println("AFTER: " + evts.size());  checkEventNodeIdsStrict(TransformerWithInjection.class.getName(),idsForKeys(key1));  assert evts.isEmpty();  caches[0].invokeAll(keys,new TransformerWithInjection());  checkEventNodeIdsStrict(TransformerWithInjection.class.getName(),idsForKeys(key1,key2));}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public SSLSessionCache(File dir) throws IOException {  mSessionCache=FileClientSessionCache.usingDirectory(dir);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void runAsserts(List<Step> list,int size,Boolean needAssignee){  assertEquals(size,list.size());  for (int i=0; i < size; i++) {    runAsserts(list.get(i),i,needAssignee);  }}  }
class C{  public void convertToBot(){  isBot=true;}  }
class C{  public JSONArray append(String value){  this.append((Object)value);  return this;}  }
class C{  public static boolean match(String expectedName,Principal principal){  String hostName=getServerName(principal);  return (expectedName.equalsIgnoreCase(hostName));}  }
class C{  public void regenerate(Projection proj){  Debug.message("eomg","EditableOMPoint.regenerate()");  if (point != null)   point.generate(proj);  setGrabPoints(point);  generate(proj);}  }
class C{  protected void removeTrackSegment(TrackSegment o){  LayoutBlock block1=null;  LayoutBlock block2=null;  LayoutBlock block=o.getLayoutBlock();  int type=o.getType1();  if (type == POS_POINT) {    PositionablePoint p=(PositionablePoint)(o.getConnect1());    if (p != null) {      p.removeTrackConnection(o);      if (p.getConnect1() != null) {        block1=p.getConnect1().getLayoutBlock();      } else       if (p.getConnect2() != null) {        block1=p.getConnect2().getLayoutBlock();      }    }  } else {    block1=getAffectedBlock(o.getConnect1(),type);    disconnect(o.getConnect1(),type);  }  type=o.getType2();  if (type == POS_POINT) {    PositionablePoint p=(PositionablePoint)(o.getConnect2());    if (p != null) {      p.removeTrackConnection(o);      if (p.getConnect1() != null) {        block2=p.getConnect1().getLayoutBlock();      } else       if (p.getConnect2() != null) {        block2=p.getConnect2().getLayoutBlock();      }    }  } else {    block2=getAffectedBlock(o.getConnect2(),type);    disconnect(o.getConnect2(),type);  }  for (int i=0; i < trackList.size(); i++) {    TrackSegment t=trackList.get(i);    if (t == o) {      trackList.remove(i);    }  }  if (block != null) {    block.decrementUse();    auxTools.setBlockConnectivityChanged();    block.updatePaths();  }  if ((block1 != null) && (block1 != block)) {    block1.updatePaths();  }  if ((block2 != null) && (block2 != block) && (block2 != block1)) {    block2.updatePaths();  }  setDirty(true);  repaint();}  }
class C{  private void validateOutput(String output,String serviceName,ImmutableList<String> methodNames){  String[] lines=output.trim().split("\n");  assertThat(lines.length).isEqualTo(methodNames.size() + 1);  assertThat(lines[0]).startsWith(serviceName + " -> ");  for (int i=0; i < methodNames.size(); i++) {    assertThat(lines[i + 1].trim()).isEqualTo(serviceName + "/" + methodNames.get(i));  }}  }
class C{  public static GridLayout createFormPaneGridLayout(boolean makeColumnsEqualWidth,int numColumns){  GridLayout layout=new GridLayout();  layout.marginHeight=FORM_PANE_MARGIN_HEIGHT;  layout.marginWidth=FORM_PANE_MARGIN_WIDTH;  layout.marginTop=FORM_PANE_MARGIN_TOP;  layout.marginBottom=FORM_PANE_MARGIN_BOTTOM;  layout.marginLeft=FORM_PANE_MARGIN_LEFT;  layout.marginRight=FORM_PANE_MARGIN_RIGHT;  layout.horizontalSpacing=FORM_PANE_HORIZONTAL_SPACING;  layout.verticalSpacing=FORM_PANE_VERTICAL_SPACING;  layout.makeColumnsEqualWidth=makeColumnsEqualWidth;  layout.numColumns=numColumns;  return layout;}  }
class C{  public void testSendReceive() throws Throwable {  LocalServerRegistry registry=new LocalServerRegistry();  Transport clientTransport=new LocalTransport(registry);  Transport serverTransport=new LocalTransport(registry);  Server server=serverTransport.server();  Client client=clientTransport.client();  ThreadContext context=new SingleThreadContext("test-thread-%d",new Serializer());  context.executor().execute(null);  await();  context.executor().execute(null);  await();}  }
class C{  @Pure public boolean isConstrained(){  return constrained;}  }
class C{  protected void sequence_N4EnumDeclaration(ISerializationContext context,N4EnumDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case InformationModelPackage.INFORMATION_MODEL__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case InformationModelPackage.INFORMATION_MODEL__NAMESPACE:  return NAMESPACE_EDEFAULT == null ? namespace != null : !NAMESPACE_EDEFAULT.equals(namespace);case InformationModelPackage.INFORMATION_MODEL__VERSION:return VERSION_EDEFAULT == null ? version != null : !VERSION_EDEFAULT.equals(version);case InformationModelPackage.INFORMATION_MODEL__REFERENCES:return references != null && !references.isEmpty();case InformationModelPackage.INFORMATION_MODEL__DESCRIPTION:return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);case InformationModelPackage.INFORMATION_MODEL__DISPLAYNAME:return DISPLAYNAME_EDEFAULT == null ? displayname != null : !DISPLAYNAME_EDEFAULT.equals(displayname);case InformationModelPackage.INFORMATION_MODEL__CATEGORY:return CATEGORY_EDEFAULT == null ? category != null : !CATEGORY_EDEFAULT.equals(category);case InformationModelPackage.INFORMATION_MODEL__PROPERTIES:return properties != null && !properties.isEmpty();}return super.eIsSet(featureID);}  }
class C{  protected void decodeAttributes(mxCodec dec,Node node,Object obj){  NamedNodeMap attrs=node.getAttributes();  if (attrs != null) {    for (int i=0; i < attrs.getLength(); i++) {      Node attr=attrs.item(i);      decodeAttribute(dec,attr,obj);    }  }}  }
class C{  public ObjectLiteral createObjectLiteral(){  ObjectLiteralImpl objectLiteral=new ObjectLiteralImpl();  return objectLiteral;}  }
class C{  public Localiser(){  this(new Locale("en"));}  }
class C{  public static boolean hasHoneycomb(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB;}  }
class C{  public void testIndexAndMerge() throws Exception {  StringWriter sw=new StringWriter();  PrintWriter out=new PrintWriter(sw,true);  Directory directory=newFSDirectory(indexDir);  if (directory instanceof MockDirectoryWrapper) {    ((MockDirectoryWrapper)directory).setAssertNoUnrefencedFilesOnClose(false);  }  IndexWriter writer=new IndexWriter(directory,newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(-1).setMergePolicy(newLogMergePolicy(10)));  SegmentCommitInfo si1=indexDoc(writer,"test.txt");  printSegment(out,si1);  SegmentCommitInfo si2=indexDoc(writer,"test2.txt");  printSegment(out,si2);  writer.close();  SegmentCommitInfo siMerge=merge(directory,si1,si2,"_merge",false);  printSegment(out,siMerge);  SegmentCommitInfo siMerge2=merge(directory,si1,si2,"_merge2",false);  printSegment(out,siMerge2);  SegmentCommitInfo siMerge3=merge(directory,siMerge,siMerge2,"_merge3",false);  printSegment(out,siMerge3);  directory.close();  out.close();  sw.close();  String multiFileOutput=sw.toString();  sw=new StringWriter();  out=new PrintWriter(sw,true);  directory=newFSDirectory(indexDir);  if (directory instanceof MockDirectoryWrapper) {    ((MockDirectoryWrapper)directory).setAssertNoUnrefencedFilesOnClose(false);  }  writer=new IndexWriter(directory,newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(-1).setMergePolicy(newLogMergePolicy(10)));  si1=indexDoc(writer,"test.txt");  printSegment(out,si1);  si2=indexDoc(writer,"test2.txt");  printSegment(out,si2);  writer.close();  siMerge=merge(directory,si1,si2,"_merge",true);  printSegment(out,siMerge);  siMerge2=merge(directory,si1,si2,"_merge2",true);  printSegment(out,siMerge2);  siMerge3=merge(directory,siMerge,siMerge2,"_merge3",true);  printSegment(out,siMerge3);  directory.close();  out.close();  sw.close();  String singleFileOutput=sw.toString();  assertEquals(multiFileOutput,singleFileOutput);}  }
class C{  @Inline public static void clearForwardingBits(ObjectReference object){  VM.objectModel.writeAvailableByte(object,(byte)(VM.objectModel.readAvailableByte(object) & ~FORWARDING_MASK));}  }
class C{  boolean inSameSubroutine(final Label block){  if ((status & VISITED) == 0 || (block.status & VISITED) == 0) {    return false;  }  for (int i=0; i < srcAndRefPositions.length; ++i) {    if ((srcAndRefPositions[i] & block.srcAndRefPositions[i]) != 0) {      return true;    }  }  return false;}  }
class C{  @SuppressWarnings("deprecation") protected final void writeBinaryBlockFrameToSequenceFile(Path path,JobConf job,FileSystem fs,FrameBlock src,int blen,int rl,int ru) throws DMLRuntimeException, IOException {  SequenceFile.Writer writer=null;  writer=new SequenceFile.Writer(fs,job,path,LongWritable.class,FrameBlock.class);  try {    LongWritable index=new LongWritable();    if (src.getNumRows() <= blen) {      index.set(1);      writer.append(index,src);    } else {      FrameBlock[] blocks=createFrameBlocksForReuse(src.getSchema(),src.getColumnNames(),src.getNumRows());      for (int bi=rl; bi < ru; bi+=blen) {        int len=Math.min(blen,src.getNumRows() - bi);        FrameBlock block=getFrameBlockForReuse(blocks);        src.sliceOperations(bi,bi + len - 1,0,src.getNumColumns() - 1,block);        if (bi == 0)         block.setColumnMetadata(src.getColumnMetadata());        index.set(bi + 1);        writer.append(index,block);      }    }  }  finally {    IOUtilFunctions.closeSilently(writer);  }}  }
class C{  public Maybe<T> maybe(String key){  if (!pipes.get(key).isPresent())   pipes.register(key,factory.build());  return pipes.oneValue(key);}  }
class C{  static String makeVisName(String string){  string=StringUtils.capitalize(string);  return string.replaceAll("(?<=[A-Z])(?=[A-Z][a-z])|(?<=[^A-Z])(?=[A-Z])|(?<=[A-Za-z])(?=[^A-Za-z])"," ");}  }
class C{  public static SamSequence unrollCgRead(SAMRecord rec){  final int projectedSplit=rec.getAlignmentStart() * ((rec.getFlags() & SamBamConstants.SAM_MATE_IS_REVERSE) != 0 ? 1 : -1);  final byte flags=SamSequence.getFlags(rec);  final byte[] expandedRead;  final byte[] expandedQual;  if (rec.getReadUnmappedFlag()) {    expandedRead=rec.getReadBases();    expandedQual=rec.getBaseQualities();  } else {    final String gc=rec.getStringAttribute(SamUtils.ATTRIBUTE_CG_RAW_READ_INSTRUCTIONS);    if (gc == null) {      throw new NoTalkbackSlimException("SAM Record does not contain CGI read reconstruction attribute: " + rec.getSAMString());    }    final byte[] gq=FastaUtils.asciiToRawQuality(SamUtils.allowEmpty(rec.getStringAttribute(SamUtils.ATTRIBUTE_CG_OVERLAP_QUALITY)));    final byte[] gs=SamUtils.allowEmpty(rec.getStringAttribute(SamUtils.ATTRIBUTE_CG_OVERLAP_BASES)).getBytes();    final boolean legacyLegacy=gq.length == gs.length / 2;    expandedRead=unrollLegacyRead(rec.getReadBases(),gs,gc);    if (expandedRead == null) {      throw new NoTalkbackSlimException("Could not reconstruct read bases for record: " + rec.getSAMString());    }    if (rec.getBaseQualities().length == 0) {      expandedQual=rec.getBaseQualities();    } else {      if (!legacyLegacy && gq.length != gs.length) {        throw new NoTalkbackSlimException("Unexpected length of CG quality information: " + rec.getSAMString());      }      final byte[] samQualities=rec.getBaseQualities();      if (legacyLegacy) {        expandedQual=unrollLegacyLegacyQualities(samQualities,gq,gc);      } else {        final byte[] bytes=unrollLegacyRead(samQualities,gq,gc);        expandedQual=bytes;      }    }  }  final byte[] readBytes=CgUtils.unPad(expandedRead,!rec.getReadNegativeStrandFlag());  final byte[] readQual=CgUtils.unPad(expandedQual,!rec.getReadNegativeStrandFlag());  return new SamSequence(rec.getReadName(),readBytes,readQual,flags,projectedSplit);}  }
class C{  public boolean isThereXLevel(final String signatureId){  SignatureWrapper signatureWrapper=getSignatureByIdNullSafe(signatureId);  return signatureWrapper.isThereXLevel();}  }
class C{  public boolean isArray(){  return _class.isArray();}  }
class C{  public static WifiP2pDnsSdServiceInfo newInstance(String instanceName,String serviceType,Map<String,String> txtMap){  if (TextUtils.isEmpty(instanceName) || TextUtils.isEmpty(serviceType)) {    throw new IllegalArgumentException("instance name or service type cannot be empty");  }  DnsSdTxtRecord txtRecord=new DnsSdTxtRecord();  if (txtMap != null) {    for (    String key : txtMap.keySet()) {      txtRecord.set(key,txtMap.get(key));    }  }  ArrayList<String> queries=new ArrayList<String>();  queries.add(createPtrServiceQuery(instanceName,serviceType));  queries.add(createTxtServiceQuery(instanceName,serviceType,txtRecord));  return new WifiP2pDnsSdServiceInfo(queries);}  }
class C{  private void ensureOpen() throws IOException {  if (out == null)   throw new IOException("Stream closed");}  }
class C{  public void requestPermission(@NonNull Activity activity,int requestCode,@NonNull String... permissions){  assertPermissionsNotGranted(permissions);  if (isTestEnvironment()) {    mMockSystemPermissions.requestPermissions(permissions);  } else {    ActivityCompat.requestPermissions(activity,permissions,requestCode);  }}  }
class C{  private final void postEventPrivate(AWTEvent theEvent){  theEvent.isPosted=true;  pushPopLock.lock();  try {    if (nextQueue != null) {      nextQueue.postEventPrivate(theEvent);      return;    }    if (dispatchThread == null) {      if (theEvent.getSource() == AWTAutoShutdown.getInstance()) {        return;      } else {        initDispatchThread();      }    }    postEvent(theEvent,getPriority(theEvent));  }  finally {    pushPopLock.unlock();  }}  }
class C{  public Connection initEmbeddedDBConnectionRestoreFromBackup(String backedUpDBLocation) throws AdeException {  final String dbLocation=System.getProperty("derby.system.home");  final String connectionUrl=PROTOCOL + DEFAULT_DBNAME + ";rollForwardRecoveryFrom="+ backedUpDBLocation+ File.separator+ dbName;  mLogger.debug("Loading driver " + DRIVER);  try {    Class.forName(DRIVER);  } catch (  ClassNotFoundException e) {    throw new AdeInternalException("Loading driver failed",e);  }  mLogger.info("Connecting to database " + connectionUrl + " in location "+ dbLocation+ " to restore from backup.");  Connection con;  try {    con=DriverManager.getConnection(connectionUrl);    if (con != null) {      try {        con.commit();      } catch (      SQLException e) {        mLogger.error("The restored connection could not be closed.",e);        throw new AdeExtUsageException("The connection could not be closed.",e);      } finally {        closeEmbeddedDBConnection();      }    }  } catch (  SQLException e) {    throw new AdeInternalException("Failed obtaining connection",e);  }  return con;}  }
class C{  public ElementType rootElementType(){  return theRoot;}  }
class C{  public static AccessibilityRecord obtain(AccessibilityRecord record){  AccessibilityRecord clone=AccessibilityRecord.obtain();  clone.init(record);  return clone;}  }
class C{  private void bridgeMemberReference(JCMemberReference tree,ReferenceTranslationContext localContext){  kInfo.addMethod(new MemberReferenceBridger(tree,localContext).bridge());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:32.605 -0500",hash_original_method="B9699B49BCC7654BF74B38BF9D177791",hash_generated_method="C075718CC53F5984DFE5F216D9E6DD1C") @Override protected void onConnect(ConnectionParams cp){  mApn=cp.apn;  if (DBG)   log("Connecting to carrier: '" + mApn.carrier + "' APN: '"+ mApn.apn+ "' proxy: '"+ mApn.proxy+ "' port: '"+ mApn.port);  createTime=-1;  lastFailTime=-1;  lastFailCause=FailCause.NONE;  Message msg=obtainMessage(EVENT_SETUP_DATA_CONNECTION_DONE,cp);  msg.obj=cp;  int authType=mApn.authType;  if (authType == -1) {    authType=(mApn.user != null) ? RILConstants.SETUP_DATA_AUTH_PAP_CHAP : RILConstants.SETUP_DATA_AUTH_NONE;  }  String protocol;  if (phone.getServiceState().getRoaming()) {    protocol=mApn.roamingProtocol;  } else {    protocol=mApn.protocol;  }  phone.mCM.setupDataCall(Integer.toString(getRadioTechnology(RILConstants.SETUP_DATA_TECH_GSM)),Integer.toString(mProfileId),mApn.apn,mApn.user,mApn.password,Integer.toString(authType),protocol,msg);}  }
class C{  public Classification(Collection<T> featureset,K category,float probability){  this.featureset=featureset;  this.category=category;  this.probability=probability;}  }
class C{  public void testGetThenReset(){  LongAccumulator ai=new LongAccumulator(null,0L);  ai.accumulate(2);  assertEquals(2,ai.get());  assertEquals(2,ai.getThenReset());  assertEquals(0,ai.get());}  }
class C{  public T[] toArray(T[] contents){  int s=size;  if (contents.length < s) {    @SuppressWarnings("unchecked") T[] newArray=(T[])Array.newInstance(contents.getClass().getComponentType(),s);    contents=newArray;  }  System.arraycopy(this.array,0,contents,0,s);  if (contents.length > s) {    contents[s]=null;  }  return contents;}  }
class C{  boolean isBeingAccessed(){synchronized (this) {    return this.accessCount > 0;  }}  }
class C{  public static IRenderingEngine createInitialRenderingEngine(){  IRenderingEngine re=RenderingEngineLwjgl.newInstance();  if (enableDebugProxy) {    re=new DebugProxy(re);  }  return re;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MArchive[");  sb.append(get_ID()).append(",Name=").append(getName());  if (m_inflated != null)   sb.append(",Inflated=" + m_inflated);  if (m_deflated != null)   sb.append(",Deflated=" + m_deflated);  sb.append("]");  return sb.toString();}  }
class C{  public static String convertUPCEtoUPCA(String upce){  char[] upceChars=new char[6];  upce.getChars(1,7,upceChars,0);  StringBuilder result=new StringBuilder(12);  result.append(upce.charAt(0));  char lastChar=upceChars[5];switch (lastChar) {case '0':case '1':case '2':    result.append(upceChars,0,2);  result.append(lastChar);result.append("0000");result.append(upceChars,2,3);break;case '3':result.append(upceChars,0,3);result.append("00000");result.append(upceChars,3,2);break;case '4':result.append(upceChars,0,4);result.append("00000");result.append(upceChars[4]);break;default :result.append(upceChars,0,5);result.append("0000");result.append(lastChar);break;}result.append(upce.charAt(7));return result.toString();}  }
class C{  public static List<String> checkDuplicateAddress(LinkedHashMap<String,String> map1,LinkedHashMap<String,String> map2){  List<String> dup1=checkDuplicate(map1);  List<String> dup2=checkDuplicate(map2);  List<String> dup=new ArrayList<String>();  dup.addAll(dup1);  dup.addAll(dup2);  if (!dup.isEmpty()) {    log.warn("There are duplicate addresses entered: {}/{}",dup.size(),dup);  }  return dup;}  }
class C{  public MapMultChainInstruction(ChainType type,byte in1,byte in2,byte out,String istr){  super(null,out);  _chainType=type;  _input1=in1;  _input2=in2;  _input3=-1;  mrtype=MRINSTRUCTION_TYPE.MapMultChain;  instString=istr;}  }
class C{  private void computeDistances(ModifiableDoubleDBIDList nlist,DBIDIter query,final DistanceQuery<O> distQuery,Relation<O> relation){  nlist.clear();  O qo=relation.get(query);  for (DBIDIter ri=relation.iterDBIDs(); ri.valid(); ri.advance()) {    if (!includeSelf && DBIDUtil.equal(ri,query)) {      continue;    }    double dist=distQuery.distance(qo,ri);    if (dist != dist) {      dist=Double.POSITIVE_INFINITY;    }    nlist.add(dist,ri);  }  nlist.sort();}  }
class C{  public SmsTextMessage(String msg){  if (haswidthChar(msg))   setText(msg,SmsDcs.getGeneralDataCodingDcs(SmsAlphabet.UCS2,SmsMsgClass.CLASS_UNKNOWN)); else   setText(msg,SmsDcs.getGeneralDataCodingDcs(SmsAlphabet.ASCII,SmsMsgClass.CLASS_UNKNOWN));}  }
class C{  @Override public void close(){  if (null != m_chunkcollector) {    m_chunkcollector.close();    m_chunkcollector=null;  }  if (null != m_bufcollector) {    m_bufcollector.close();    m_bufcollector=null;  }}  }
class C{  final int compareMagnitude(BigInteger val){  int[] m1=mag;  int len1=m1.length;  int[] m2=val.mag;  int len2=m2.length;  if (len1 < len2)   return -1;  if (len1 > len2)   return 1;  for (int i=0; i < len1; i++) {    int a=m1[i];    int b=m2[i];    if (a != b)     return ((a & LONG_MASK) < (b & LONG_MASK)) ? -1 : 1;  }  return 0;}  }
class C{  public static void sendStream(Session session,StreamEvent event){  try {    JSONObject stream=new JSONObject();    stream.put("type",event.getStreamType());    stream.put("event",event.toJSON());    send(session,stream);  } catch (  JSONException e) {    log.error("Send stream failed",e);  }}  }
class C{  protected Socket(SocketImpl impl) throws SocketException {  this.impl=impl;  if (impl != null) {    checkOldImpl();    this.impl.setSocket(this);  }}  }
class C{  public Matrix4(Matrix4 matrix){  this.set(matrix);}  }
class C{  public GenericListCellRenderer(Component selected,Component unselected){  if (selected == unselected) {    throw new IllegalArgumentException("Must use distinct instances for renderer!");  }  this.selected=selected;  this.unselected=unselected;  focusComponent.setUIID(selected.getUIID() + "Focus");  focusComponent.setFocus(true);  selectedEntries=initRenderer(selected);  unselectedEntries=initRenderer(unselected);  firstCharacterRTL=selected.getUIManager().isThemeConstant("firstCharRTLBool",false);  addSelectedEntriesListener(selectedEntries);  addSelectedEntriesListener(unselectedEntries);}  }
class C{  public void testMoveFileDestinationMissingPartially() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,DIR_NEW,SUBDIR_NEW),paths(FILE));  create(igfs,paths(DIR,SUBDIR,DIR_NEW),paths(FILE));  igfs.rename(FILE,SUBDIR_NEW);  checkExist(igfs,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,new IgfsPath(SUBDIR_NEW,FILE.name()));  checkNotExist(igfs,igfsSecondary,FILE);}  }
class C{  public boolean isGoogleSigned(PackageManager pm,String packageName){  return false;}  }
class C{  public static boolean isThisCall(MethodInvocationTree tree){  return isNamedMethodCall("this",tree);}  }
class C{  public final boolean oneIteration() throws Exception {  if (useUnidentifiedProducers) {    messageProducer.send(destProducer,outMessage,deliveryMode,priority,expiry);  } else {    messageProducer.send(outMessage,deliveryMode,priority,expiry);  }  if (transacted)   session.commit();  if ((inMessage=messageConsumer.receive(timeout)) != null) {    if (transacted)     session.commit();    incIterations();  } else {    throw new Exception("No response to message (" + outMessage.getJMSMessageID() + ")");  }  return true;}  }
class C{  public static AnimatablePaintValue createCurrentColorPaintValue(AnimationTarget target){  AnimatablePaintValue v=new AnimatablePaintValue(target);  v.paintType=PAINT_CURRENT_COLOR;  return v;}  }
class C{  private void informUponSimilarName(final StringBuffer messageBuffer,final String name,final String candidate){  if (name.equals(candidate)) {    return;  }  if (name.regionMatches(true,0,candidate,0,PKG_LEN + 5)) {    messageBuffer.append(" Did you mean '");    messageBuffer.append(candidate);    messageBuffer.append("'?");  }}  }
class C{  public void clearGameLog(){  channelManager.getVisibleChannel().clear();}  }
class C{  public void makeGreyLevel(){  grey_level=new double[(int)width][(int)height];  for (int x=0; x < width; x++) {    for (int y=0; y < height; y++) {      grey_level[x][y]=getYfromRGB(image.getRGB(x,y));    }  }}  }
class C{  @Override public void close() throws SecurityException {  throw new UnsupportedOperationException("Not supported yet.");}  }
class C{  public void backupIndex(Directory dir,SnapshotDeletionPolicy dp) throws Exception {  IndexCommit snapshot=dp.snapshot();  try {    copyFiles(dir,snapshot);  }  finally {    dp.release(snapshot);  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) @Override public void endWindow(){  for (  Map.Entry<K,MutableInt> e : counts.entrySet()) {    count.emit(new KeyValPair(e.getKey(),new Integer(e.getValue().intValue())));  }  counts.clear();}  }
class C{  public static void removeBreakpoints(final IFilledList<Pair<IDebugger,INaviFunction>> targets){  Preconditions.checkNotNull(targets,"IE01260: Targets argument can not be null");  for (  final Pair<IDebugger,INaviFunction> target : targets) {    CGraphDebugger.removeBreakpoint(target.first().getBreakpointManager(),target.second().getModule(),new UnrelocatedAddress(target.second().getAddress()));  }}  }
class C{  public static VersionRange atMost(DelimitedVersion version){  return new VersionRange(null,version);}  }
class C{  public boolean isIgnoreSensors(){  return this.ignoreSensors;}  }
class C{  @Override public boolean isCommandStationConsistPossible(){  return false;}  }
class C{  protected void performFlowAnalysis(ClassTree classTree){  if (flowResult == null) {    regularExitStores=new IdentityHashMap<>();    returnStatementStores=new IdentityHashMap<>();    flowResult=new AnalysisResult<>();  }  if (classTree.getKind() == Kind.ANNOTATION_TYPE) {    scannedClasses.put(classTree,ScanState.FINISHED);    return;  }  Queue<ClassTree> queue=new LinkedList<>();  List<Pair<VariableElement,Value>> fieldValues=new ArrayList<>();  queue.add(classTree);  while (!queue.isEmpty()) {    ClassTree ct=queue.remove();    scannedClasses.put(ct,ScanState.IN_PROGRESS);    AnnotatedDeclaredType preClassType=visitorState.getClassType();    ClassTree preClassTree=visitorState.getClassTree();    AnnotatedDeclaredType preAMT=visitorState.getMethodReceiver();    MethodTree preMT=visitorState.getMethodTree();    visitorState.setClassType(getAnnotatedType(ct));    visitorState.setClassTree(ct);    visitorState.setMethodReceiver(null);    visitorState.setMethodTree(null);    initializationStaticStore=null;    initializationStore=null;    Queue<Pair<LambdaExpressionTree,Store>> lambdaQueue=new LinkedList<>();    try {      List<CFGMethod> methods=new ArrayList<>();      for (      Tree m : ct.getMembers()) {switch (m.getKind()) {case METHOD:          MethodTree mt=(MethodTree)m;        ModifiersTree modifiers=mt.getModifiers();      if (modifiers != null) {        Set<Modifier> flags=modifiers.getFlags();        if (flags.contains(Modifier.ABSTRACT) || flags.contains(Modifier.NATIVE)) {          break;        }      }    if (mt.getBody() == null) {      break;    }  CFGMethod met=new CFGMethod(mt,ct);methods.add(met);break;case VARIABLE:VariableTree vt=(VariableTree)m;ExpressionTree initializer=vt.getInitializer();if (initializer != null) {boolean isStatic=vt.getModifiers().getFlags().contains(Modifier.STATIC);analyze(queue,lambdaQueue,new CFGStatement(vt,ct),fieldValues,classTree,true,true,isStatic);Value value=flowResult.getValue(initializer);if (value != null) {VariableElement element=TreeUtils.elementFromDeclaration(vt);fieldValues.add(Pair.of(element,value));}}break;case CLASS:case ANNOTATION_TYPE:case INTERFACE:case ENUM:queue.add((ClassTree)m);break;case BLOCK:BlockTree b=(BlockTree)m;analyze(queue,lambdaQueue,new CFGStatement(b,ct),fieldValues,ct,true,true,b.isStatic());break;default :assert false : "Unexpected member: " + m.getKind();break;}}for (CFGMethod met : methods) {analyze(queue,lambdaQueue,met,fieldValues,classTree,TreeUtils.isConstructor(met.getMethod()),false,false);}while (lambdaQueue.size() > 0) {Pair<LambdaExpressionTree,Store> lambdaPair=lambdaQueue.poll();analyze(queue,lambdaQueue,new CFGLambda(lambdaPair.first),fieldValues,classTree,false,false,false,lambdaPair.second);}if (initializationStaticStore == null) {regularExitStores.put(ct,emptyStore);} else {regularExitStores.put(ct,initializationStaticStore);}}  finally {visitorState.setClassType(preClassType);visitorState.setClassTree(preClassTree);visitorState.setMethodReceiver(preAMT);visitorState.setMethodTree(preMT);}scannedClasses.put(ct,ScanState.FINISHED);}}  }
class C{  public Object convertToObject(Class<?> targetClass,String textValue){  UIComponent component=getComponent();  Converter converter=app.createConverter(targetClass);  if (null == converter) {    FacesException e=new FacesException("Cannot create Converter to convert value " + textValue + " to instance of target class "+ targetClass.getName()+ '.');    throw e;  }  FacesContext currentInstance=FacesContext.getCurrentInstance();  try {    return converter.getAsObject(currentInstance,component,textValue);  } catch (  ConverterException ce) {    addConversionErrorMessage(currentInstance,component,ce);    return null;  }}  }
class C{  public KMLModelPlacemarkImpl(KMLTraversalContext tc,KMLPlacemark placemark,KMLAbstractGeometry geom){  if (tc == null) {    String msg=Logging.getMessage("nullValue.TraversalContextIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (placemark == null) {    String msg=Logging.getMessage("nullValue.ParentIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (geom == null) {    String msg=Logging.getMessage("nullValue.GeometryIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.model=(KMLModel)geom;  this.parent=placemark;  this.resourceMap=this.createResourceMap(this.model);}  }
class C{  @EventHandler public void onPlayerToggleFly(PlayerToggleFlightEvent event){  Player player=event.getPlayer();  UUID id=player.getUniqueId();  KitDoubleJump.DoubleJumpData data=players.get(id);  if (data != null && data.isEnabled() && players.containsKey(player.getUniqueId()) && player.getExp() <= 1.0f && event.isFlying()) {    player.setAllowFlight(false);    player.setExp(0.0f);    event.setCancelled(true);    Vector normal=player.getEyeLocation().getDirection();    normal.setY(0.75 + Math.max(normal.getY() * 0.5,0));    normal.multiply(data.getPower() / 2);    event.getPlayer().setVelocity(normal);    player.getWorld().playSound(player.getLocation(),Sound.ENTITY_ZOMBIE_INFECT,0.5f,1.8f);  }}  }
class C{  public void add(final long delta,final long latency){  this.totalOperations.add(delta);  this.totalLatency.add(latency);}  }
class C{  public ReactionEffectItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  protected void notifyWaitingThread(RouteSpecificPool rospl){  WaitingThread waitingThread=null;  poolLock.lock();  try {    if ((rospl != null) && rospl.hasThread()) {      if (log.isDebugEnabled()) {        log.debug("Notifying thread waiting on pool" + " [" + rospl.getRoute() + "]");      }      waitingThread=rospl.nextThread();    } else     if (!waitingThreads.isEmpty()) {      if (log.isDebugEnabled()) {        log.debug("Notifying thread waiting on any pool");      }      waitingThread=waitingThreads.remove();    } else     if (log.isDebugEnabled()) {      log.debug("Notifying no-one, there are no waiting threads");    }    if (waitingThread != null) {      waitingThread.wakeup();    }  }  finally {    poolLock.unlock();  }}  }
class C{  public final double doOperation(){  double[] zeroVector2D={0,0};  double[][] identityMatrix2D=new double[][]{{1,0},{0,1}};  double[][] sigmaSqMatrix2D=new double[][]{{sigmaSq,0},{0,sigmaSq}};  double logHastingRatio=0;  double chooseOperator=Math.random();  int K_int=(int)K.getParameterValue(0);  double[] original_groupSize=new double[groupSize.length];  for (int i=0; i < groupSize.length; i++) {    original_groupSize[i]=0;  }  for (int i=0; i < numdata; i++) {    int label=(int)clusterLabels.getParameterValue(i);    original_groupSize[label]++;  }  for (int i=0; i < K_int; i++) {    double muk_0=mu.getParameter(i).getParameterValue(0);    double muk_1=mu.getParameter(i).getParameterValue(1);  }  if (chooseOperator < 0.5) {    isMoveMu=1;    int groupSelect=(int)Math.floor(Math.random() * K_int);    groupSelectedChange=groupSelect;    int dimSelect=(int)Math.floor(Math.random() * 2);    dimSelectChange=dimSelect;    double change=Math.random() * 2 - 1;    double originalValue=mu.getParameter(groupSelect).getParameterValue(dimSelect);    originalValueChange=originalValue;    mu.getParameter(groupSelect).setParameterValue(dimSelect,originalValue + change);    logHastingRatio=0;  } else {    isMoveMu=0;    int virusIndex=(int)Math.floor(Math.random() * numdata);    virusIndexChange=virusIndex;    int toBin=(int)Math.floor(Math.random() * K_int);    int fromBin=(int)clusterLabels.getParameterValue(virusIndex);    clusterLabels.setParameterValue(virusIndex,toBin);    for (int i=0; i < groupSize.length; i++) {      groupSize[i]=0;    }    for (int i=0; i < numdata; i++) {      int label=(int)clusterLabels.getParameterValue(i);      groupSize[label]++;    }    if ((original_groupSize[fromBin] > 0) && (groupSize[fromBin] == 0)) {      K.setParameterValue(0,K_int - 1);      System.out.println("propose the fromBin " + fromBin + "becomes 0 in size - death of a bin");      double[] ranNormal=MultivariateNormalDistribution.nextMultivariateNormalVariance(zeroVector2D,sigmaSqMatrix2D);      mu.getParameter(fromBin).setParameterValue(0,ranNormal[0]);      mu.getParameter(fromBin).setParameterValue(1,ranNormal[1]);    }    if ((original_groupSize[toBin] == 0) && (groupSize[toBin] == 1)) {      K.setParameterValue(0,K_int + 1);      System.out.println("propose the birth of bin" + toBin);      double offset=0;      if (virusOffsetsParameter != null) {      } else {        System.out.println("virus Offeset Parameter NOT present. We expect one though. Something is wrong.");      }      double[] ranNormal=MultivariateNormalDistribution.nextMultivariateNormalVariance(zeroVector2D,sigmaSqMatrix2D);      mu.getParameter(toBin).setParameterValue(0,ranNormal[0]);      mu.getParameter(toBin).setParameterValue(1,ranNormal[1]);    }  }  double[] meanYear=new double[K_int];  double[] groupCount=new double[K_int];  for (int i=0; i < numdata; i++) {    int label=(int)clusterLabels.getParameterValue(i);    double year=0;    if (virusOffsetsParameter != null) {      year=virusOffsetsParameter.getParameterValue(i);    } else {      System.out.println("virus Offeset Parameter NOT present. We expect one though. Something is wrong.");    }    meanYear[label]=meanYear[label] + year;    groupCount[label]=groupCount[label] + 1;  }  int maxLabel=0;  for (int i=0; i < numdata; i++) {    if (maxLabel < (int)clusterLabels.getParameterValue(i)) {      maxLabel=(int)clusterLabels.getParameterValue(i);    }  }  for (int i=0; i <= maxLabel; i++) {    meanYear[i]=meanYear[i] / groupCount[i];  }  mu0_offset=new double[maxLabel + 1];  for (int i=0; i <= maxLabel; i++) {    mu0_offset[i]=meanYear[i];  }  for (int i=0; i < numdata; i++) {    int label=(int)clusterLabels.getParameterValue(i);    Parameter vLoc=virusLocations.getParameter(i);    double muValue=mu.getParameter(label).getParameterValue(0);    vLoc.setParameterValue(0,muValue);    double muValue2=mu.getParameter(label).getParameterValue(1);    vLoc.setParameterValue(1,muValue2);    if (clusterOffsetsParameter != null) {      clusterOffsetsParameter.setParameterValue(i,mu0_offset[label]);    }  }  return (logHastingRatio);}  }
class C{  public static int defineTag(int ifdId,short tagId){  return (tagId & 0x0000ffff) | (ifdId << 16);}  }
class C{  public void reset(){  sketch_=new QuickSelectSketch<S>(nomEntries_,summaryFactory_);}  }
class C{  public ReadWriteLockedOffHeapClockCacheFactory(PageSource tableSource,Factory<? extends StorageEngine<? super K,? super V>> storageEngineFactory,EvictionListener<K,V> evictionListener,int tableSize){  this.storageEngineFactory=storageEngineFactory;  this.tableSource=tableSource;  this.tableSize=tableSize;  this.evictionListener=evictionListener;}  }
class C{  private boolean shouldTenantAdminUseTenantParam(URI tid){  if (!NullColumnValueGetter.isNullURI(tid) && !TenantResource.TENANT_SELECTOR_FOR_UNASSIGNED.equalsIgnoreCase(tid.toString()) && !TenantResource.NO_TENANT_SELECTOR.equalsIgnoreCase(tid.toString())&& _permissionsHelper.userHasGivenRole(getUserFromContext(),tid,Role.TENANT_ADMIN)) {    return true;  }  return false;}  }
class C{  public boolean containsKey(Object key1,Object key2){  int hashCode=hash(key1,key2);  AbstractHashedMap.HashEntry entry=map.data[map.hashIndex(hashCode,map.data.length)];  while (entry != null) {    if (entry.hashCode == hashCode && isEqualKey(entry,key1,key2)) {      return true;    }    entry=entry.next;  }  return false;}  }
class C{  public DOMPGPData(byte[] keyId,byte[] keyPacket,List<? extends XMLStructure> other){  if (keyId == null) {    throw new NullPointerException("keyId cannot be null");  }  if (keyId.length != 8) {    throw new IllegalArgumentException("keyId must be 8 bytes long");  }  if (other == null || other.isEmpty()) {    this.externalElements=Collections.emptyList();  } else {    this.externalElements=Collections.unmodifiableList(new ArrayList<XMLStructure>(other));    for (int i=0, size=this.externalElements.size(); i < size; i++) {      if (!(this.externalElements.get(i) instanceof XMLStructure)) {        throw new ClassCastException("other[" + i + "] is not a valid PGPData type");      }    }  }  this.keyId=(byte[])keyId.clone();  this.keyPacket=keyPacket == null ? null : (byte[])keyPacket.clone();  if (keyPacket != null) {    checkKeyPacket(keyPacket);  }}  }
class C{  public SettableForwarder(Consumer<T> destination){  this.destination=destination;}  }
class C{  private int findPrecedingOrAncestorOrSelf(XPathContext xctxt,XPath fromMatchPattern,XPath countMatchPattern,int context,ElemNumber namespaceContext) throws javax.xml.transform.TransformerException {  DTM dtm=xctxt.getDTM(context);  while (DTM.NULL != context) {    if (null != fromMatchPattern) {      if (fromMatchPattern.getMatchScore(xctxt,context) != XPath.MATCH_SCORE_NONE) {        context=DTM.NULL;        break;      }    }    if (null != countMatchPattern) {      if (countMatchPattern.getMatchScore(xctxt,context) != XPath.MATCH_SCORE_NONE) {        break;      }    }    int prevSibling=dtm.getPreviousSibling(context);    if (DTM.NULL == prevSibling) {      context=dtm.getParent(context);    } else {      context=dtm.getLastChild(prevSibling);      if (context == DTM.NULL)       context=prevSibling;    }  }  return context;}  }
class C{  private void rQuadTo(float dx1,float dy1,float dx2,float dy2){  if (isEmpty()) {    mPath.moveTo(mLastX=0,mLastY=0);  }  dx1+=mLastX;  dy1+=mLastY;  dx2+=mLastX;  dy2+=mLastY;  mPath.quadTo(dx1,dy1,mLastX=dx2,mLastY=dy2);}  }
class C{  public static Result restCompare(){  DynamicForm form=Form.form().bindFromRequest(request());  String flowExecId1=form.get(COMPARE_FLOW_ID1);  flowExecId1=(flowExecId1 != null) ? flowExecId1.trim() : null;  String flowExecId2=form.get(COMPARE_FLOW_ID2);  flowExecId2=(flowExecId2 != null) ? flowExecId2.trim() : null;  List<AppResult> results1=null;  List<AppResult> results2=null;  if (flowExecId1 != null && !flowExecId1.isEmpty() && flowExecId2 != null && !flowExecId2.isEmpty()) {    results1=AppResult.find.select("*").where().eq(AppResult.TABLE.FLOW_EXEC_ID,flowExecId1).setMaxRows(100).fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS,"*").fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS + "." + AppHeuristicResult.TABLE.APP_HEURISTIC_RESULT_DETAILS,"*").findList();    results2=AppResult.find.select("*").where().eq(AppResult.TABLE.FLOW_EXEC_ID,flowExecId2).setMaxRows(100).fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS,"*").fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS + "." + AppHeuristicResult.TABLE.APP_HEURISTIC_RESULT_DETAILS,"*").findList();  }  Map<IdUrlPair,Map<IdUrlPair,List<AppResult>>> compareResults=compareFlows(results1,results2);  Map<String,Map<String,List<AppResult>>> resMap=new HashMap<String,Map<String,List<AppResult>>>();  for (  Map.Entry<IdUrlPair,Map<IdUrlPair,List<AppResult>>> entry : compareResults.entrySet()) {    IdUrlPair jobExecPair=entry.getKey();    Map<IdUrlPair,List<AppResult>> value=entry.getValue();    for (    Map.Entry<IdUrlPair,List<AppResult>> innerEntry : value.entrySet()) {      IdUrlPair flowExecPair=innerEntry.getKey();      List<AppResult> results=innerEntry.getValue();      Map<String,List<AppResult>> resultMap=new HashMap<String,List<AppResult>>();      resultMap.put(flowExecPair.getId(),results);      resMap.put(jobExecPair.getId(),resultMap);    }  }  return ok(Json.toJson(resMap));}  }
class C{  public void addKeysAndVersions(VersionedObjectList keysAndVersions){synchronized (this) {    this.succeededKeys.addAll(keysAndVersions);  }}  }
class C{  public static String arrayToList(Array array,String delimiter) throws PageException {  if (array.size() == 0)   return "";  StringBuilder sb=new StringBuilder(Caster.toString(array.get(1,"")));  int len=array.size();  for (int i=2; i <= len; i++) {    sb.append(delimiter);    sb.append(Caster.toString(array.get(i,"")));  }  return sb.toString();}  }
class C{  public void insertUpdate(DocumentEvent e){  if (!dirty) {    setDirty(true);  }}  }
class C{  public void addTree(TreeRTG tree){  this.addTree(tree,true);}  }
class C{  public static void unsetSlowDispatcherFlag(){  CacheClientProxy.isSlowStartForTesting=false;}  }
class C{  @Override public void acceptAppOffer(Offer offer){  int index=getIndex(offer,appOffers);  if (index != -1) {    appOffers.remove(index);    appOfferStream.onNext(offer);  }  index=getIndex(offer,acceptedOffers);  if (index == -1) {    acceptedOffers.add(offer);  }}  }
class C{  public String element(int i){  return elements.get(i);}  }
class C{  protected boolean accept(XSLTVisitor visitor){  return visitor.visitInstruction(this);}  }
class C{  public void add(String columnName){  columnNames.add(columnName);}  }
class C{  public static Facet createSelectionfacet(Facet facet){  Facet f=new Facet();  f.setDimension(facet.getDimension());  f.setId(facet.getId());  f.setSelectedItems(facet.getSelectedItems());  f.hasMore=facet.isHasMore();  f.isDone=facet.isDone();  return f;}  }
class C{  protected void countSortFromTo(int from,int to,int min,int max){  if (size == 0)   return;  checkRangeFromTo(from,to,size);  final int width=(int)(max - min + 1);  int[] counts=new int[width];  int[] theElements=elements;  for (int i=from; i <= to; )   counts[(int)(theElements[i++] - min)]++;  int fromIndex=from;  int val=min;  for (int i=0; i < width; i++, val++) {    int c=counts[i];    if (c > 0) {      if (c == 1)       theElements[fromIndex++]=val; else {        int toIndex=fromIndex + c - 1;        fillFromToWith(fromIndex,toIndex,val);        fromIndex=toIndex + 1;      }    }  }}  }
class C{  public static int numPixelsBetween(int x1,int y1,int x2,int y2){  return (int)Math.sqrt(Math.pow((double)(x1 - x2),2.0) + Math.pow((double)(y1 - y2),2.0));}  }
class C{  protected String findLibrary(String libName){  return null;}  }
class C{  public XintroActivityBuilder addFragments(IntroFragmentModel... introFragmentAttributes){  for (  IntroFragmentModel introFragmentAttribute : introFragmentAttributes) {    introFragmentModelList.add(introFragmentAttribute);  }  return this;}  }
class C{  public boolean isUseSystemAtomAttributes(){  return useSystemAtomAttributes;}  }
class C{  public static String truncate(int n,int smallestDigit,int biggestDigit){  int numDigits=biggestDigit - smallestDigit + 1;  char[] result=new char[numDigits];  for (int j=1; j < smallestDigit; j++) {    n=n / 10;  }  for (int j=numDigits - 1; j >= 0; j--) {    result[j]=Character.forDigit(n % 10,10);    n=n / 10;  }  return new String(result);}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public static boolean writeImportProfile(ImportProfileEntry i,boolean dump){  try {    if (dump)     import_profile_dump.write(i.toJSON());    importProfiles.writeEntry(new IndexEntry<ImportProfileEntry>(i.getId(),i.getSourceType(),i));  } catch (  IOException e) {    Log.getLog().warn(e);  }  return true;}  }
class C{  private String connectionString(DTNHost h1,DTNHost h2){  if (h1.getAddress() < h2.getAddress()) {    return h1.getAddress() + " " + h2.getAddress();  } else {    return h2.getAddress() + " " + h1.getAddress();  }}  }
class C{  public void testCategoryOverTemporalOverlapping(){  EPServiceProvider epService=allocateEngine(false);  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.startTest(epService,this.getClass(),getName());  }  EPServiceProviderSPI spi=(EPServiceProviderSPI)epService;  sendTimeEvent(epService,"2002-05-1T08:00:00.000");  epService.getEPAdministrator().createEPL("create context NestedContext " + "context ByCat " + "  group intPrimitive < 0 and intPrimitive != -9999 as g1, "+ "  group intPrimitive = 0 as g2, "+ "  group intPrimitive > 0 as g3 from SupportBean, "+ "context InitGrd initiated by SupportBean(theString like 'init%') as sb terminated after 10 seconds");  assertEquals(0,spi.getSchedulingService().getScheduleHandleCount());  SupportUpdateListener listener=new SupportUpdateListener();  String[] fields="c1,c2,c3".split(",");  EPStatementSPI statement=(EPStatementSPI)epService.getEPAdministrator().createEPL("context NestedContext select " + "context.ByCat.label as c1, context.InitGrd.sb.theString as c2, count(*) as c3 from SupportBean");  statement.addListener(listener);  epService.getEPRuntime().sendEvent(new SupportBean("E1",0));  epService.getEPRuntime().sendEvent(new SupportBean("E2",5));  assertFalse(listener.isInvoked());  epService.getEPRuntime().sendEvent(new SupportBean("init_1",-9999));  epService.getEPRuntime().sendEvent(new SupportBean("X100",0));  epService.getEPRuntime().sendEvent(new SupportBean("X101",10));  epService.getEPRuntime().sendEvent(new SupportBean("X102",-10));  assertFalse(listener.isInvoked());  epService.getEPRuntime().sendEvent(new SupportBean("init_2",0));  EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),fields,new Object[]{"g2","init_2",1L});  epService.getEPRuntime().sendEvent(new SupportBean("E3",0));  EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),fields,new Object[]{"g2","init_2",2L});  epService.getEPRuntime().sendEvent(new SupportBean("E4",10));  assertFalse(listener.isInvoked());  epService.getEPRuntime().sendEvent(new SupportBean("init_3",-2));  EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),fields,new Object[]{"g1","init_3",1L});  epService.getEPRuntime().sendEvent(new SupportBean("E5",-1));  EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),fields,new Object[]{"g1","init_3",2L});  epService.getEPRuntime().sendEvent(new SupportBean("E6",-1));  EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),fields,new Object[]{"g1","init_3",3L});  sendTimeEvent(epService,"2002-05-1T08:11:00.000");  epService.getEPRuntime().sendEvent(new SupportBean("E7",0));  assertFalse(listener.isInvoked());  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.endTest();  }}  }
class C{  public static double max(double[] values){  double max=Double.NaN;  for (  double value : values) {    max=Util.max(max,value);  }  return max;}  }
class C{  public boolean isSummary(){  Object oo=get_Value(COLUMNNAME_IsSummary);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public FlipAnimator(View fromView,View toView,int centerX,int centerY){  this.fromView=fromView;  this.toView=toView;  this.centerX=centerX;  this.centerY=centerY;  setDuration(500);  setFillAfter(true);  setInterpolator(new AccelerateDecelerateInterpolator());}  }
class C{  public WETriangleMesh pointTowards(ReadonlyVec3D dir){  return transform(Quaternion.getAlignmentQuat(dir,Vec3D.Z_AXIS).toMatrix4x4(matrix),true);}  }
class C{  public void play(Location location){  location.getWorld().playSound(location,sound,volume,pitch);}  }
class C{  public void plusEquals(double c){  a[0]+=c;}  }
class C{  public final void checkAssert(final TriConsumer<A,B,C> property){  check(null);}  }
class C{  public Element(final CharSequence name){  this(name,true,false,false);}  }
class C{  protected void registerButtonGroupAttributes(){  addAttributeProcessor(new MaxCheckCountLmlAttribute(),"max","maxCheckCount");  addAttributeProcessor(new MinCheckCountLmlAttribute(),"min","minCheckCount");  addAttributeProcessor(new UncheckLastLmlAttribute(),"uncheckLast");}  }
class C{  public int parseTimeZone() throws ParseException {  if (index >= orig.length)   throw new ParseException("No more characters",index);  char test=orig[index];  if (test == '+' || test == '-') {    return parseNumericTimeZone();  } else {    return parseAlphaTimeZone();  }}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  @Override public boolean hasUnsavedChanges(){  return hasUnsavedChanges;}  }
class C{  protected String readAndSortFile(String fileName,Configuration conf) throws Exception {  final List<String> list=new ArrayList<>();  final boolean snappyDecode=conf != null && conf.getBoolean(FileOutputFormat.COMPRESS,false);  if (snappyDecode) {    try (SequenceFile.Reader reader=new SequenceFile.Reader(conf,SequenceFile.Reader.file(new Path(fileName)))){      Text key=new Text();      IntWritable val=new IntWritable();      while (reader.next(key,val))       list.add(key + "\t" + val);    }   } else {    try (InputStream is0=igfs.open(new IgfsPath(fileName))){      BufferedReader reader=new BufferedReader(new InputStreamReader(is0));      String line;      while ((line=reader.readLine()) != null)       list.add(line);    }   }  Collections.sort(list);  return Joiner.on('\n').join(list) + "\n";}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  public static void main(String[] args) throws Exception {  System.setProperty(SystemProperties.DATABASE_PROPERTIES,"src/test/resources/hibernate.properties");  prepareTestDB();  log.info("Starting proxy...");  ProxyMain.main(args);}  }
class C{  public void addCouplingListener(final CouplingListener listener){  couplingListeners.add(listener);}  }
class C{  public static boolean contains(final PublicKey publicKey){  return PUBLIC_KEYS.contains(publicKey);}  }
class C{  private void restoreBranchCoverage(TestSuiteChromosome individual,TestSuiteFitnessFunction objective){  logger.debug("Adding branches already covered previously");  BranchCoverageMap branchMap=BranchCoverageMap.getInstance();  Set<Integer> uncoveredTrueBranches=new LinkedHashSet<Integer>(branchMap.getCoveredTrueBranches());  Set<Integer> uncoveredFalseBranches=new LinkedHashSet<Integer>(branchMap.getCoveredFalseBranches());  uncoveredTrueBranches.removeAll(getCoveredTrueBranches(individual));  uncoveredFalseBranches.removeAll(getCoveredFalseBranches(individual));  for (  Integer branchId : uncoveredTrueBranches) {    individual.addTest(branchMap.getTestCoveringTrue(branchId).clone());  }  for (  Integer branchId : uncoveredFalseBranches) {    individual.addTest(branchMap.getTestCoveringFalse(branchId).clone());  }}  }
class C{  public String findInLine(String pattern){  return findInLine(patternCache.forName(pattern));}  }
class C{  public void syncVdcConfig(List<VdcConfig> newVdcConfigList,String assignedVdcId,Long vdcConfigVersion,String ipsecKey){  syncVdcConfig(newVdcConfigList,assignedVdcId,false,vdcConfigVersion,ipsecKey);}  }
class C{  public void addFStore(int local){  xop(ByteCode.FSTORE_0,ByteCode.FSTORE,local);}  }
class C{  public Expression parseExpression(String sql){  parameters=New.arrayList();  initialize(sql);  read();  return readExpression();}  }
class C{  @Override public GamaMap mapValue(final IScope scope,final IType keyType,final IType contentsType,final boolean copy) throws GamaRuntimeException {  return listValue(scope,contentsType,false).mapValue(scope,keyType,contentsType,false);}  }
class C{  private void calculateWindowProportions(final int slots){  int width=(int)Math.sqrt(slots);  while (slots % width != 0) {    width--;    if (width <= 0) {      logger.error("Failed to decide dimensions for slot window. slots = " + slots);      width=1;    }  }  slotWindowWidth=width;  slotWindowHeight=slots / width;}  }
class C{  public static void reportFatalError(String msg,long lineNo,long columnNo,ParseErrorListener errListener) throws RDFParseException {  if (errListener != null) {    errListener.fatalError(msg,lineNo,columnNo);  }  throw new RDFParseException(msg,lineNo,columnNo);}  }
class C{  private static long longToZigZag(long n){  return (n << 1) ^ (n >> 63);}  }
class C{  private static ValueLob createSmallLob(int type,byte[] small){  return new ValueLob(type,small);}  }
class C{  public void body(String namespace,String name,String text) throws Exception {  if (text == null) {    return;  }  DisplayNameBean dnb=(DisplayNameBean)digester.peek();  dnb.setDisplayName(text.trim());}  }
class C{  public void addAllErrors(@Nonnull List<ErrorObject> errorObjects){  this.errorObjects.addAll(errorObjects);}  }
class C{  public double coveringRadiusFromEntries(DBID routingObjectID,AbstractMTree<O,N,E,?> mTree){  double coveringRadius=0.;  for (int i=0; i < getNumEntries(); i++) {    E entry=getEntry(i);    final double cover=entry.getParentDistance() + entry.getCoveringRadius();    coveringRadius=coveringRadius < cover ? cover : coveringRadius;  }  return coveringRadius;}  }
class C{  public TranscoderInput(InputStream istream){  this.istream=istream;}  }
class C{  public static boolean cs_pvec(int[] p,float[] b,float[] x,int n){  int k;  if (x == null || b == null)   return (false);  for (k=0; k < n; k++)   x[k]=b[p != null ? p[k] : k];  return (true);}  }
class C{  public static Expression newDefaultExpression(AST ast,Type type,int extraDimensions){  if (extraDimensions == 0 && type.isPrimitiveType()) {    PrimitiveType primitiveType=(PrimitiveType)type;    if (primitiveType.getPrimitiveTypeCode() == PrimitiveType.BOOLEAN) {      return ast.newBooleanLiteral(false);    } else     if (primitiveType.getPrimitiveTypeCode() == PrimitiveType.VOID) {      return null;    } else {      return ast.newNumberLiteral("0");    }  }  return ast.newNullLiteral();}  }
class C{  private boolean isDecTblMultCreated(){  boolean isMDec=false;  if (_flds.getMultFldsCount() > 0) {    for (int i=0; i < _flds.count(); i++) {      ArchiveFldImpl fld=(ArchiveFldImpl)_flds.get(i);      if (fld.isMult()) {        int type=fld.getType();        if (type == ArchiveFldType.SHORT_DECIMAL || type == ArchiveFldType.LONG_DECIMAL)         isMDec=true;      }    }  }  return isMDec;}  }
class C{  @Override public long skip(long n) throws IOException {  return getDelegate().skip(n);}  }
class C{  private void adjust(Rectangle bounds,Dimension min,int deltaX,int deltaY,int deltaWidth,int deltaHeight){  bounds.x+=deltaX;  bounds.y+=deltaY;  bounds.width+=deltaWidth;  bounds.height+=deltaHeight;  if (min != null) {    if (bounds.width < min.width) {      int correction=min.width - bounds.width;      if (deltaX != 0) {        bounds.x-=correction;      }      bounds.width=min.width;    }    if (bounds.height < min.height) {      int correction=min.height - bounds.height;      if (deltaY != 0) {        bounds.y-=correction;      }      bounds.height=min.height;    }  }}  }
class C{  protected TemplateModelException(Throwable cause,Environment env,_ErrorDescriptionBuilder descriptionBuilder,boolean preventAmbiguity){  super(cause,env,null,descriptionBuilder);}  }
class C{  @Override public boolean isLoggable(LogRecord record){  if (writer == null || record == null) {    return false;  }  return super.isLoggable(record);}  }
class C{  public void compileAllProjects(List<File> pProjectRoots) throws N4JSCompileException {  compileAllProjects(pProjectRoots,new DismissingIssueAcceptor());}  }
class C{  public void savePc(int pc){  savedPc=pc;}  }
class C{  protected BatchInsert(final IRabaCoder keysCoder,final IRabaCoder valsCoder,final int fromIndex,final int toIndex,final byte[][] keys,final byte[][] vals,final boolean returnOldValues){  super(keysCoder,valsCoder,fromIndex,toIndex,keys,vals);  if (vals == null)   throw new IllegalArgumentException(Errors.ERR_VALS_NULL);  this.returnOldValues=returnOldValues;}  }
class C{  private String parseToken(final char[] terminators){  char ch;  i1=pos;  i2=pos;  while (hasChar()) {    ch=chars[pos];    if (isOneOf(ch,terminators)) {      break;    }    i2++;    pos++;  }  return getToken(false);}  }
class C{  public static HashMap<String,Object> jsonToHash(JsonObject object){  HashMap<String,Object> hash=new HashMap<>();  for (  Map.Entry<String,Object> entry : object.entrySet()) {    String key=entry.getKey();    Object el=entry.getValue();    hash.put(key,jsonToJava(el));  }  return hash;}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    if (!useOneShotPreviewCallback) {      camera.setPreviewCallback(null);    }    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  @Override public String toString(){  return String.format("REIL graph [%d function nodes, %d edges]",nodeCount(),edgeCount());}  }
class C{  public TMessage readMessageBegin() throws TException {  int size=readI32();  if (size < 0) {    int version=size & VERSION_MASK;    if (version != VERSION_1) {      throw new TProtocolException(TProtocolException.BAD_VERSION,"Bad version in readMessageBegin");    }    return new TMessage(readString(),(byte)(size & 0x000000ff),readI32());  } else {    if (strictRead_) {      throw new TProtocolException(TProtocolException.BAD_VERSION,"Missing version in readMessageBegin, old client?");    }    return new TMessage(readStringBody(size),readByte(),readI32());  }}  }
class C{  public static boolean isWhiteSpace(char ch){  return (ch == 0x20) || (ch == 0x09) || (ch == 0xD)|| (ch == 0xA);}  }
class C{  private UUID bestNode(@Nullable Collection<UUID> candidates,Collection<UUID> topIds,Map<UUID,Integer> nodeLoads,boolean skipTopCheck){  UUID bestNode=null;  int bestLoad=Integer.MAX_VALUE;  if (candidates != null) {    for (    UUID candidate : candidates) {      if (skipTopCheck || topIds.contains(candidate)) {        int load=nodeLoads.get(candidate);        if (bestNode == null || bestLoad > load) {          bestNode=candidate;          bestLoad=load;          if (bestLoad == 0)           break;        }      }    }  }  if (bestNode == null) {    bestLoad=Integer.MAX_VALUE;    for (    UUID nodeId : topIds) {      int load=nodeLoads.get(nodeId);      if (bestNode == null || bestLoad > load) {        bestNode=nodeId;        bestLoad=load;        if (bestLoad == 0)         break;      }    }  }  assert bestNode != null;  return bestNode;}  }
class C{  public Twitter(){  globalStamp=0;}  }
class C{  private void processInlines(){  for (  BlockParser blockParser : allBlockParsers) {    blockParser.parseInlines(inlineParser);  }}  }
class C{  public Set entrySet(){  Set es=entrySet;  return (es != null ? es : (entrySet=new EntrySet()));}  }
class C{  public static <E>SortedSet<E> synchronizedSortedSet(SortedSet<E> set){  if (set == null) {    throw new NullPointerException();  }  return new SynchronizedSortedSet<E>(set);}  }
class C{  public OpenCataloguesJob(String name){  this(name,null);}  }
class C{  private void clearCache(){  if (!cumulative) {    sums.clear();    counts.clear();  }}  }
class C{  public void testNullTransformerAdd(){  boolean caughtIt=false;  try {    addTransformerToManager(fInst,null);  } catch (  NullPointerException npe) {    caughtIt=true;  }  assertTrue(caughtIt);}  }
class C{  @Override public void toBytes(ByteBuf buf){  buf.writeInt(fluidTankProperties.length);  for (  IFluidTankProperties properties : fluidTankProperties) {    final FluidStack contents=properties.getContents();    final NBTTagCompound tagCompound=new NBTTagCompound();    if (contents != null) {      contents.writeToNBT(tagCompound);    }    ByteBufUtils.writeTag(buf,tagCompound);    buf.writeInt(properties.getCapacity());  }}  }
class C{  public boolean isLineAlignLeading(){  return getLineAlignmentType().equals(LINEALIGNMENTTYPE_LeadingLeft);}  }
class C{  public void flush(){  if (this.size > 0) {    list.setSize(this.size);    this.target.addAllOf(list);    this.size=0;  }}  }
class C{  public boolean match(String rawdata) throws MimeTypeParseException {  if (rawdata == null)   return false;  return match(new MimeType(rawdata));}  }
class C{  @Override public String toString(){  return toString(true,false);}  }
class C{  public static String decodeString(String s){  return new String(decode(s));}  }
class C{  private Type parameterType(Type receiverType,Parameter parameter,Declaration invoked){  if (receiverType == null || !invoked.isClassOrInterfaceMember() || unit.isCallableType(receiverType)) {    return parameter.getModel().getReference().getFullType();  } else {    Type supertype=getDeclaringSupertype(receiverType,invoked);    if (supertype == null) {      return null;    } else {      return supertype.getTypedParameter(parameter).getFullType();    }  }}  }
class C{  public void testUrlInvalid(){  setParameterToInitMockMethod("http://myurl.com/?firstParam=myParam",TestSolution.FAILED);  SeoRule01071 test=new SeoRule01071();  test.setProcessResultDataService(mockProcessResultDataService);  test.setTest(mockTest);  ProcessResult processResult=test.processImpl(mockSspHandler);  assertEquals(mockDefiniteResult,processResult);}  }
class C{  public void run(){  File currentDir=new File(".");  String canonicalPath=null;  try {    canonicalPath=currentDir.getCanonicalPath();  } catch (  Exception e) {    e.printStackTrace();  }  String fileName=canonicalPath + "/" + GENERATOR_FILE_NAME;  createFile(fileName);}  }
class C{  public int warningCount(){  if (delegateCompiler != null && delegateCompiler != this)   return delegateCompiler.warningCount(); else   return log.nwarnings;}  }
class C{  public DoubleArraySpliterator(double[] array,int additionalCharacteristics){  this(array,0,array.length,additionalCharacteristics);}  }
