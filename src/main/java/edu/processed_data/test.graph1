class C{  public boolean hasField(String fldName){  return fields().contains(fldName);}  }
class C{  private int[] pickLocalAddress() throws IOException {  int[] ret=pickForcedLocalAddress();  if (ret == null) {    ret=pickAutoDetectedLocalAddress();  }  return ret;}  }
class C{  public String sprintf(){  Enumeration e=vFmt.elements();  ConversionSpecification cs=null;  char c=0;  StringBuilder sb=new StringBuilder();  while (e.hasMoreElements()) {    cs=(ConversionSpecification)e.nextElement();    c=cs.getConversionCharacter();    if (c == '\0')     sb.append(cs.getLiteral()); else     if (c == '%')     sb.append("%");  }  return sb.toString();}  }
class C{  @Override public void reset(){  super.reset();  fNamespaceDeclarations=fConfiguration.getFeature(Constants.DOM_NAMESPACE_DECLARATIONS);  if (fNullFilterInUse) {    fDOMFilter=null;    fNullFilterInUse=false;  }  if (fSkippedElemStack != null) {    fSkippedElemStack.removeAllElements();  }  fRejectedElementDepth=0;  fFilterReject=false;  fSchemaType=null;}  }
class C{  @Nullable("if there is no configuration that matches the constraints") public static <T>FolderConfiguration restrict(@NotNull ConfiguredElement<T> compatible,Collection<ConfiguredElement<T>> allItems){  ArrayList<FolderConfiguration> incompatibleConfigurations=Lists.newArrayListWithCapacity(allItems.size());  boolean found=false;  for (  ConfiguredElement configuredItem : allItems) {    FolderConfiguration configuration=configuredItem.getConfiguration();    if (configuredItem.equals(compatible)) {      found=true;      continue;    }    incompatibleConfigurations.add(configuration);  }  assert found;  RestrictedConfiguration restricted=restrict(compatible.getConfiguration(),incompatibleConfigurations);  return (restricted != null) ? restricted.getAny() : null;}  }
class C{  public GeoServerStyleTree(SelectedStyleInterface parent){  parentObj=parent;  createUI();  Dimension preferredSize=new Dimension(250,300);  setPreferredSize(preferredSize);}  }
class C{  public synchronized void onDestroy(){  cleanupService();  mHandler.getLooper().quit();}  }
class C{  public void seek(long pos){}  }
class C{  public void updateCommandTag(final CommandTagUpdate commandTagUpdate,final SourceCommandTag commandTag) throws IllegalAccessException, NoSuchFieldException {  fillNonNullFields(commandTagUpdate,commandTag,CHANGE_ID_FIELD,COMMAND_TAG_ID_FIELD,EQUIPMENT_ID_FIELD);  removeListOfFields(commandTagUpdate.getFieldsToRemove(),commandTag);  if (commandTagUpdate.getHardwareAddressUpdate() != null) {    updateHardwareAddress(commandTagUpdate.getHardwareAddressUpdate(),commandTag.getHardwareAddress());  }}  }
class C{  private int[] extractRow(int[][] twoDimArray,int r) throws CanceledException {  assert ((r >= 0) && (r < twoDimArray[0].length));  int[] row=new int[twoDimArray.length];  progressListener.setMaximum(row.length);  for (int i=0; i < row.length; i++) {    row[i]=twoDimArray[i][r];    progressListener.setProgress(i);  }  return row;}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  AndImpl filter=null;  if ((filterList == null) || (filterList.size() != 2)) {    filter=new AndExtended();  } else {    filter=new AndExtended(filterList);  }  return filter;}  }
class C{  @Override public boolean accept(File file){  String name=file.getName();  for (  String prefix : this.prefixes) {    if (caseSensitivity.checkStartsWith(name,prefix)) {      return true;    }  }  return false;}  }
class C{  private double[] generateSample(){  final RealDistribution uniformDist=new UniformRealDistribution(-100,100);  final RandomDataGenerator randomDataGenerator=new RandomDataGenerator(100);  final int sampleSize=randomDataGenerator.nextInt(10,100);  final double[] out=randomDataGenerator.nextDeviates(uniformDist,sampleSize);  return out;}  }
class C{  public String process(Item item) throws ProcessException {  int count=-1;  for (Item p=item.getItemAs(Relation.SYLLABLE_STRUCTURE); p != null; p=p.getPrevious()) {    count++;  }  return Integer.toString(rail(count));}  }
class C{  public VideoSearchQueryWithExtended filters(VideoSearchFilter... value){  return unsafeParam("filters",value);}  }
class C{  public String toString(){  return name;}  }
class C{  public void handleStep(final ODEStateInterpolator interpolator,final boolean isLast){}  }
class C{  public static long toLong(Object v,long defaultValue){  if (v != null) {    if (v instanceof Long) {      return (Long)v;    }    if (v instanceof Integer) {      return (Integer)v;    }    if (v instanceof Float) {      return (long)((Float)v).floatValue();    }    if (v instanceof Double) {      return (long)((Double)v).doubleValue();    }    StringBuilder sb=new StringBuilder();    String s=v.toString();    for (int i=0; i < s.length(); i++) {      char c=s.charAt(i);      c=X.getNumber(c);      if (c >= '0' && c <= '9') {        sb.append(c);      } else       if (c == '-' && sb.length() == 0) {        sb.append(c);      } else       if (sb.length() > 0) {        break;      }    }    s=sb.toString();    if (s.length() > 0) {      try {        return Long.parseLong(s);      } catch (      Exception e) {        log.error(e);      }    }  }  return defaultValue;}  }
class C{  public DocsAddQuery accessKey(String value){  return unsafeParam("access_key",value);}  }
class C{  @SuppressWarnings("rawtypes") static boolean isTrue(Object v1){  if (v1 instanceof Number) {    return !Array.get(Array.newInstance(Primitives.unwrap(v1.getClass()),1),0).equals(v1);  }  if (v1 instanceof Boolean) {    return (Boolean)v1;  }  if (v1 instanceof Doc) {    return !((Doc)v1).isWhitespace();  }  if (v1 instanceof String) {    return !Strings.isNullOrEmpty((String)v1);  }  if (v1 instanceof Iterable) {    return ((Iterable)v1).iterator().hasNext();  }  return false;}  }
class C{  private void handlePuncture(Peer peer,Puncture message) throws IOException {}  }
class C{  public Builder clockTicker(Ticker ticker){  this._ticker=ticker;  return this;}  }
class C{  private Reader createUTF16Reader(InputStream stream,boolean isBigEndian){  return new UTF16Reader(stream,(fTempString.ch.length << 1),isBigEndian,fErrorReporter.getMessageFormatter(XMLMessageFormatter.XML_DOMAIN),fErrorReporter.getLocale());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_STIGMA_ENCHANT_SUCCESS(DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1402930,descriptionId);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(getClass().getSimpleName());  sb.append(" [");  sb.append("Hash = ").append(hashCode());  sb.append(", catalogId=").append(catalogId);  sb.append(", key=").append(key);  sb.append(", name=").append(name);  sb.append("]");  return sb.toString();}  }
class C{  public void configureDetailsView(DetailsViewConfiguration detailsViewConfiguration){  double topHorizontalDividerResizeWeight=detailsViewConfiguration.getTopHorizontalDividerResizeWeight();  if (topHorizontalDividerResizeWeight != -1)   detailsTopHorizontalSplitter.setResizeWeight(topHorizontalDividerResizeWeight);  double topHorizontalDividerLocation=detailsViewConfiguration.getTopHorizontalDividerLocation();  if (topHorizontalDividerLocation != -1)   detailsTopHorizontalSplitter.setDividerLocation(topHorizontalDividerLocation);  double bottomHorizontalDividerResizeWeight=detailsViewConfiguration.getBottomHorizontalDividerResizeWeight();  if (bottomHorizontalDividerResizeWeight != -1)   detailsBottomHorizontalSplitter.setResizeWeight(bottomHorizontalDividerResizeWeight);  double bottomHorizontalDividerLocation=detailsViewConfiguration.getBottomHorizontalDividerLocation();  if (bottomHorizontalDividerLocation != -1)   detailsBottomHorizontalSplitter.setDividerLocation(bottomHorizontalDividerLocation);  double verticalDividerResizeWeight=detailsViewConfiguration.getVerticalDividerResizeWeight();  if (verticalDividerResizeWeight != -1)   detailsVerticalSplitter.setResizeWeight(verticalDividerResizeWeight);  double verticalDividerLocation=detailsViewConfiguration.getVerticalDividerLocation();  if (verticalDividerLocation != -1)   detailsVerticalSplitter.setDividerLocation(verticalDividerLocation);}  }
class C{  public static boolean isContent(int c){  return (c < 0x10000 && (CHARS[c] & MASK_CONTENT) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  public static String wrapQuotesIfWindowsOS(String context){  return ExecutorUtils.isUnixOS() ? context : ("\"" + context + "\"");}  }
class C{  public Experiment(String label,Application application,String startTime,String endTime,double samplingPercent,String description,String rule,Boolean isPersonalizationEnabled,String modelName,String modelVersion,Boolean isRapidExperiment,Integer userCap,String creatorID){  this.setLabel(label).setApplication(application).setStartTime(startTime).setEndTime(endTime).setSamplingPercent(samplingPercent).setDescription(description).setRule(rule).setModelName(modelName).setModelVersion(modelVersion).setIsPersonalizationEnabled(isPersonalizationEnabled).setIsRapidExperiment(isRapidExperiment).setUserCap(userCap).setCreatorID(creatorID);}  }
class C{  public NumberPicker(Activity activity){  super(activity,new String[]{});}  }
class C{  @Override public void onReceivedTitle(WebView view,String title){  i(null,"--> onReceivedTitle() title = " + title);  super.onReceivedTitle(view,title);  configReceivedTitle(view,title);}  }
class C{  private static String dayToString(int day,int dayOfWeekLength){  return DateUtils.getDayOfWeekString(dayToUtilDay(day),dayOfWeekLength);}  }
class C{  private void timeout(){  if (this.status == AccelListener.STARTING) {    this.timestamp=System.currentTimeMillis();    this.win();  }}  }
class C{  public Builder withRange(ByteString endKey){  this.endKey=Optional.fromNullable(endKey);  return this;}  }
class C{  public static void show(@Nullable Activity activity,int resId,int duration,int gravity){  show(activity,resId == 0 ? null : getString(activity,resId),duration,gravity);}  }
class C{  Index(Node<K,V> node,Index<K,V> down,Index<K,V> right){  this.node=node;  this.down=down;  this.right=right;}  }
class C{  public boolean contains(int index){  return index >= getFirst() && index <= getLast();}  }
class C{  public void put(String name,Object value){  name2data.get(name)[2]=value;}  }
class C{  public GroupsGetInvitesQueryWithExtended count(Integer value){  return unsafeParam("count",value);}  }
class C{  @Override public final void writeBytes(String s) throws IOException {  dis.writeBytes(s);}  }
class C{  @PluginFactory public static PigeonRolloverStrategy createStrategy(@PluginAttribute("max") final String max,@PluginAttribute("min") final String min,@PluginAttribute("fileIndex") final String fileIndex,@PluginAttribute("compressionLevel") final String compressionLevelStr,@PluginConfiguration final Configuration config){  final boolean useMax=fileIndex == null ? true : fileIndex.equalsIgnoreCase("max");  int minIndex=MIN_WINDOW_SIZE;  if (min != null) {    minIndex=Integer.parseInt(min);    if (minIndex < 1) {      LOGGER.error("Minimum window size too small. Limited to " + MIN_WINDOW_SIZE);      minIndex=MIN_WINDOW_SIZE;    }  }  int maxIndex=DEFAULT_WINDOW_SIZE;  if (max != null) {    maxIndex=Integer.parseInt(max);    if (maxIndex < minIndex) {      maxIndex=minIndex < DEFAULT_WINDOW_SIZE ? DEFAULT_WINDOW_SIZE : minIndex;      LOGGER.error("Maximum window size must be greater than the minimum windows size. Set to " + maxIndex);    }  }  final int compressionLevel=Integers.parseInt(compressionLevelStr,Deflater.DEFAULT_COMPRESSION);  return new PigeonRolloverStrategy(minIndex,maxIndex,useMax,compressionLevel,config.getStrSubstitutor());}  }
class C{  private void migrate(){  if (!migrated) {    BlazeUserSettings userSettings=BlazeUserSettings.getInstance();    this.attachSourcesByDefault=userSettings.getAttachSourcesByDefault();    this.attachSourcesOnDemand=userSettings.getAttachSourcesOnDemand();    this.migrated=true;  }}  }
class C{  public static void clearReferences(ClassLoader classLoader){  ClassLoaderCache.getCache().removeClassLoader(classLoader);  if (NonActivatableServiceDescriptor.getGlobalPolicy() != null) {    NonActivatableServiceDescriptor.getGlobalPolicy().setPolicy(classLoader,null);  }  clearReferencesJdbc(classLoader);  clearReferencesThreads(classLoader);  clearReferencesThreadLocals(classLoader);  clearReferencesRmiTargets(classLoader);  clearRmiLoaderHandler(classLoader);  try {    Class clazz=classLoader.loadClass("org.apache.commons.logging.LogFactory");    clazz.getMethod("release",ClassLoader.class).invoke(null,classLoader);  } catch (  Throwable t) {  }  try {    Class clazz=classLoader.loadClass("org.apache.juli.logging.LogFactory");    clazz.getMethod("release",ClassLoader.class).invoke(null,classLoader);  } catch (  Throwable t) {  }  clearReferencesResourceBundles(classLoader);  java.beans.Introspector.flushCaches();}  }
class C{  public void subtractSupplements(int count,int supplementId){  subtractedSupplementsCount=count;  subtractedSupplementId=supplementId;}  }
class C{  private void adjustTop(RectF rect,float top,RectF bounds,float snapMargin,float aspectRatio,boolean leftMoves,boolean rightMoves){  float newTop=top;  if (newTop < 0) {    newTop/=1.05f;    mTouchOffset.y-=newTop / 1.1f;  }  if (newTop < bounds.top) {    mTouchOffset.y-=(newTop - bounds.top) / 2f;  }  if (newTop - bounds.top < snapMargin) {    newTop=bounds.top;  }  if (rect.bottom - newTop < mMinCropHeight) {    newTop=rect.bottom - mMinCropHeight;  }  if (rect.bottom - newTop > mMaxCropHeight) {    newTop=rect.bottom - mMaxCropHeight;  }  if (newTop - bounds.top < snapMargin) {    newTop=bounds.top;  }  if (aspectRatio > 0) {    float newWidth=(rect.bottom - newTop) * aspectRatio;    if (newWidth < mMinCropWidth) {      newTop=Math.max(bounds.top,rect.bottom - (mMinCropWidth / aspectRatio));      newWidth=(rect.bottom - newTop) * aspectRatio;    }    if (newWidth > mMaxCropWidth) {      newTop=Math.max(bounds.top,rect.bottom - (mMaxCropWidth / aspectRatio));      newWidth=(rect.bottom - newTop) * aspectRatio;    }    if (leftMoves && rightMoves) {      newTop=Math.max(newTop,Math.max(bounds.top,rect.bottom - bounds.width() / aspectRatio));    } else {      if (leftMoves && rect.right - newWidth < bounds.left) {        newTop=Math.max(bounds.top,rect.bottom - (rect.right - bounds.left) / aspectRatio);        newWidth=(rect.bottom - newTop) * aspectRatio;      }      if (rightMoves && rect.left + newWidth > bounds.right) {        newTop=Math.max(newTop,Math.max(bounds.top,rect.bottom - (bounds.right - rect.left) / aspectRatio));      }    }  }  rect.top=newTop;}  }
class C{  public ImmutableList<String> lines(){  return lines;}  }
class C{  @RequestMapping(method=RequestMethod.POST) public void handleFileUpload(HttpServletRequest request,HttpServletResponse httpResponse,@RequestParam("file") MultipartFile file){  if (!file.isEmpty()) {    try {      ServerConfig serverConfig=retrieveServerConfig();      String fileName=file.getOriginalFilename();      if (fileName != null && fileName.endsWith(".zip")) {        clientService.uploadAppDefinition(httpResponse,serverConfig,fileName,file.getInputStream());      } else {        throw new BadRequestException("Invalid file name");      }    } catch (    IOException e) {      throw new InternalServerErrorException("Could not deploy file: " + e.getMessage());    }  } else {    throw new BadRequestException("No file found in POST body");  }}  }
class C{  public NumberIsTooLargeException(Localizable specific,Number wrong,Number max,boolean boundIsAllowed){  super(specific,wrong,max);  this.max=max;  this.boundIsAllowed=boundIsAllowed;}  }
class C{  @SubscribeEvent public void swimmingPenalty(LivingUpdateEvent event){  if (!(event.getEntityLiving() instanceof EntityPlayer))   return;  EntityPlayer player=(EntityPlayer)event.getEntityLiving();  if (!EntityPlayerExt.isSurvival(player))   return;  if (!(player.getFoodStats() instanceof BWMFoodStats))   return;  if (player.isInWater() && !EntityPlayerExt.canSwim(player) && !EntityPlayerExt.isNearBottom(player)) {    player.motionY-=0.02;  }}  }
class C{  private SandboxBody create(int index){  SandboxBody body=new SandboxBody();  if (index == 0) {    body.addFixture(new Circle(0.5));    body.translate(3.5,0.0);  } else   if (index == 1) {    body.addFixture(Geometry.createUnitCirclePolygon(5,1.0));    body.translate(0.0,2.5);  } else   if (index == 2) {    body.addFixture(new Rectangle(0.5,0.5));    body.translate(-4.0,-0.5);  } else   if (index == 3) {    body.addFixture(new Triangle(new Vector2(0.45,-0.12),new Vector2(-0.45,0.38),new Vector2(-0.15,-0.22)));    body.translate(0.5,0.5);  } else {    body.addFixture(new Segment(new Vector2(-0.3,0.2),new Vector2(0.0,-0.1)));    body.translate(-1.0,-1.5);  }  body.setMass(MassType.INFINITE);  body.setUserData("Body" + (index + 1));  return body;}  }
class C{  private void rotateLeft(Node<K,V> root){  Node<K,V> left=root.left;  Node<K,V> pivot=root.right;  Node<K,V> pivotLeft=pivot.left;  Node<K,V> pivotRight=pivot.right;  root.right=pivotLeft;  if (pivotLeft != null) {    pivotLeft.parent=root;  }  replaceInParent(root,pivot);  pivot.left=root;  root.parent=pivot;  root.height=Math.max(left != null ? left.height : 0,pivotLeft != null ? pivotLeft.height : 0) + 1;  pivot.height=Math.max(root.height,pivotRight != null ? pivotRight.height : 0) + 1;}  }
class C{  private void hidePublicShare(){  getShareViaLinkSwitch().setVisibility(View.GONE);  getExpirationDateSection().setVisibility(View.GONE);  getPasswordSection().setVisibility(View.GONE);  getEditPermissionSection().setVisibility(View.GONE);  getGetLinkButton().setVisibility(View.GONE);  getHideFileListingPermissionSection().setVisibility(View.GONE);}  }
class C{  public void removeTransactionAfterEnd(XtnEntry xtnEntry){  try {    xtnEntry.lock();    ((ConcurrentHashMap<ServerTransaction,XtnEntry>)getXtnTable()).remove(xtnEntry.m_Transaction,xtnEntry);    m_TimedXtns.remove(xtnEntry.m_Transaction);  }  finally {    xtnEntry.unlock();  }}  }
class C{  public TestInfo(){  this.testName="Default test name";  this.logEntries=new TreeSet<>(new LogEntryComparator());  this.testResult=new Success();  this.start=new Date();  this.last=false;  this.subreports=new LinkedList<>();}  }
class C{  private DataType thriftDataTyopeToWrapperDataType(org.apache.carbondata.format.DataType dataTypeThrift){switch (dataTypeThrift) {case STRING:    return DataType.STRING;case SHORT:  return DataType.SHORT;case INT:return DataType.INT;case LONG:return DataType.LONG;case DOUBLE:return DataType.DOUBLE;case DECIMAL:return DataType.DECIMAL;case TIMESTAMP:return DataType.TIMESTAMP;case ARRAY:return DataType.ARRAY;case STRUCT:return DataType.STRUCT;default :return DataType.STRING;}}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  @Override public String toString(){  return this.descriptions.toString();}  }
class C{  public void parseShapeMapFromLine(String shapeMapAsLine){  NexusStreamParser np=new NexusStreamParser(new StringReader(shapeMapAsLine));  try {    while (!np.peekMatchIgnoreCase(";")) {      String sample=np.getWordRespectCase();      np.matchIgnoreCase(":");      int shape=np.getInt();      sample2shape.put(sample,(byte)shape);    }  } catch (  IOException e) {  }}  }
class C{  public void log(String question,String intent,String confidence,String entity,String convoOutput,String convoId,String retrieveAndRankOutput) throws Exception {  logger.info(Messages.getString("Logging.ENTRY_INTO_DB"));  Database db=client.database("conversation_enhanced_db",true);  db.save(new Document(question,intent,confidence,entity,convoOutput,convoId,retrieveAndRankOutput));}  }
class C{  @Override public long addRoleModule(RoleModule roleModule){  return sessionTemplate.insert(NAMESPACE + ".addRoleModule",roleModule);}  }
class C{  public void callEvent(final Event event) throws EventException {  if (event instanceof Cancellable) {    if (((Cancellable)event).isCancelled() && isIgnoringCancelled()) {      return;    }  }  executor.execute(listener,event);}  }
class C{  @Override public String scanName() throws IOException {  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int offset=fCurrentEntity.position;  char ch=fCurrentEntity.ch[offset];  if (XML11Char.isXML11NameStart(ch)) {    if (++fCurrentEntity.position == fCurrentEntity.count) {      fCurrentEntity.ch[0]=ch;      offset=0;      if (load(1,false)) {        fCurrentEntity.columnNumber++;        String symbol=fSymbolTable.addSymbol(fCurrentEntity.ch,0,1);        return symbol;      }    }  } else   if (XML11Char.isXML11NameHighSurrogate(ch)) {    if (++fCurrentEntity.position == fCurrentEntity.count) {      fCurrentEntity.ch[0]=ch;      offset=0;      if (load(1,false)) {        --fCurrentEntity.position;        --fCurrentEntity.startPosition;        return null;      }    }    char ch2=fCurrentEntity.ch[fCurrentEntity.position];    if (!XMLChar.isLowSurrogate(ch2) || !XML11Char.isXML11NameStart(XMLChar.supplemental(ch,ch2))) {      --fCurrentEntity.position;      return null;    }    if (++fCurrentEntity.position == fCurrentEntity.count) {      fCurrentEntity.ch[0]=ch;      fCurrentEntity.ch[1]=ch2;      offset=0;      if (load(2,false)) {        fCurrentEntity.columnNumber+=2;        String symbol=fSymbolTable.addSymbol(fCurrentEntity.ch,0,2);        return symbol;      }    }  } else {    return null;  }  do {    ch=fCurrentEntity.ch[fCurrentEntity.position];    if (XML11Char.isXML11Name(ch)) {      if (++fCurrentEntity.position == fCurrentEntity.count) {        int length=fCurrentEntity.position - offset;        if (length == fCurrentEntity.ch.length) {          char[] tmp=new char[fCurrentEntity.ch.length << 1];          System.arraycopy(fCurrentEntity.ch,offset,tmp,0,length);          fCurrentEntity.ch=tmp;        } else {          System.arraycopy(fCurrentEntity.ch,offset,fCurrentEntity.ch,0,length);        }        offset=0;        if (load(length,false)) {          break;        }      }    } else     if (XML11Char.isXML11NameHighSurrogate(ch)) {      if (++fCurrentEntity.position == fCurrentEntity.count) {        int length=fCurrentEntity.position - offset;        if (length == fCurrentEntity.ch.length) {          char[] tmp=new char[fCurrentEntity.ch.length << 1];          System.arraycopy(fCurrentEntity.ch,offset,tmp,0,length);          fCurrentEntity.ch=tmp;        } else {          System.arraycopy(fCurrentEntity.ch,offset,fCurrentEntity.ch,0,length);        }        offset=0;        if (load(length,false)) {          --fCurrentEntity.position;          --fCurrentEntity.startPosition;          break;        }      }      char ch2=fCurrentEntity.ch[fCurrentEntity.position];      if (!XMLChar.isLowSurrogate(ch2) || !XML11Char.isXML11Name(XMLChar.supplemental(ch,ch2))) {        --fCurrentEntity.position;        break;      }      if (++fCurrentEntity.position == fCurrentEntity.count) {        int length=fCurrentEntity.position - offset;        if (length == fCurrentEntity.ch.length) {          char[] tmp=new char[fCurrentEntity.ch.length << 1];          System.arraycopy(fCurrentEntity.ch,offset,tmp,0,length);          fCurrentEntity.ch=tmp;        } else {          System.arraycopy(fCurrentEntity.ch,offset,fCurrentEntity.ch,0,length);        }        offset=0;        if (load(length,false)) {          break;        }      }    } else {      break;    }  } while (true);  int length=fCurrentEntity.position - offset;  fCurrentEntity.columnNumber+=length;  String symbol=null;  if (length > 0) {    symbol=fSymbolTable.addSymbol(fCurrentEntity.ch,offset,length);  }  return symbol;}  }
class C{  public OrPredicate(Predicate p1){  add(p1);}  }
class C{  public int dnsDomainLevels(String host){  int count=0;  int startPos=0;  while ((startPos=host.indexOf(".",startPos + 1)) > -1) {    count++;  }  return count;}  }
class C{  @Deployment public void testDecisionFunctionality(){  Map<String,Object> variables=new HashMap<String,Object>();  variables.put("input",1);  ProcessInstance pi=runtimeService.startProcessInstanceByKey("inclusiveGateway",variables);  List<Task> tasks=taskService.createTaskQuery().processInstanceId(pi.getId()).list();  assertEquals(3,tasks.size());  Map<String,String> expectedMessages=new HashMap<String,String>();  expectedMessages.put(TASK1_NAME,TASK1_NAME);  expectedMessages.put(TASK2_NAME,TASK2_NAME);  expectedMessages.put(TASK3_NAME,TASK3_NAME);  for (  Task task : tasks) {    expectedMessages.remove(task.getName());  }  assertEquals(0,expectedMessages.size());  variables.put("input",2);  pi=runtimeService.startProcessInstanceByKey("inclusiveGateway",variables);  tasks=taskService.createTaskQuery().processInstanceId(pi.getId()).list();  assertEquals(2,tasks.size());  expectedMessages=new HashMap<String,String>();  expectedMessages.put(TASK2_NAME,TASK2_NAME);  expectedMessages.put(TASK3_NAME,TASK3_NAME);  for (  Task task : tasks) {    expectedMessages.remove(task.getName());  }  assertEquals(0,expectedMessages.size());  variables.put("input",3);  pi=runtimeService.startProcessInstanceByKey("inclusiveGateway",variables);  tasks=taskService.createTaskQuery().processInstanceId(pi.getId()).list();  assertEquals(1,tasks.size());  expectedMessages=new HashMap<String,String>();  expectedMessages.put(TASK3_NAME,TASK3_NAME);  for (  Task task : tasks) {    expectedMessages.remove(task.getName());  }  assertEquals(0,expectedMessages.size());  variables.put("input",4);  try {    runtimeService.startProcessInstanceByKey("inclusiveGateway",variables);    fail();  } catch (  ActivitiException e) {  }}  }
class C{  public void verifyIsHidden(){  conditions.verifyPostAjax(null);}  }
class C{  public void addActionButton(ActionButton actionButton){  buttonBar.addView(actionButton);}  }
class C{  public static void addSetting(String id,Object o){  settings.put(id,o);}  }
class C{  public NumericHaving withType(HavingType type){  return new NumericHaving(type,getAggregation(),getValue());}  }
class C{  public void addAlias(String entityAlias,String name,String field,String colAlias,Boolean primKey,Boolean groupBy,String function){  addAlias(entityAlias,name,field,colAlias,primKey,groupBy,function,null,null);}  }
class C{  public FreedomTouchView(Context context){  super(context);  this.initialize();}  }
class C{  public static String serverURIsToString(final List<String> serverURIs){  StringBuffer serverURIsAsString=new StringBuffer();  boolean first=true;  for (  final String serverURI : serverURIs) {    if (first) {      serverURIsAsString.append(serverURI);    } else {      serverURIsAsString.append(ConnectionUtils.SERVER_DELIMITER + " " + serverURI);    }    first=false;  }  return serverURIsAsString.toString();}  }
class C{  public boolean contains(String uid){  cleanIfNeeded();  return _idSet0.contains(uid) || _idSet1.contains(uid);}  }
class C{  protected UsersGetFollowersQueryWithFields fields(List<UserField> value){  return unsafeParam("fields",value);}  }
class C{  public String optString(String key,String defaultValue){  LazyNode token=getOptionalFieldToken(key);  if (token == null)   return defaultValue;  if (token.type == LazyNode.VALUE_NULL)   return defaultValue;  return token.getStringValue(cbuf);}  }
class C{  public static int write(AudioInputStream stream,AudioFileFormat.Type fileType,File out) throws IOException {  List providers=getAudioFileWriters();  int bytesWritten=0;  boolean flag=false;  for (int i=0; i < providers.size(); i++) {    AudioFileWriter writer=(AudioFileWriter)providers.get(i);    try {      bytesWritten=writer.write(stream,fileType,out);      flag=true;      break;    } catch (    IllegalArgumentException e) {      continue;    }  }  if (!flag) {    throw new IllegalArgumentException("could not write audio file: file type not supported: " + fileType);  } else {    return bytesWritten;  }}  }
class C{  public void toggle(){  toggle(false,null,null);}  }
class C{  public static int readInt(DataInputStream dis,boolean isBigEndian) throws IOException {  if (!isBigEndian) {    return readLittleEndianInt(dis);  } else {    return dis.readInt();  }}  }
class C{  public AsyncServerRequest(RequestType type,GeneratedMessage req,boolean requireCommonRequest){  Request.Builder reqBuilder=Request.newBuilder();  reqBuilder.setRequestMessage(req.toByteString());  reqBuilder.setRequestType(type);  this.type=type;  this.request=reqBuilder.build();  this.requireCommonRequest=requireCommonRequest;}  }
class C{  public ShapelessMaterialRecipe(Item output,Object... input){  this(new ItemStack(output),input);}  }
class C{  public void handleDecode(Result rawResult,Bitmap barcode,float scaleFactor){  inactivityTimer.onActivity();  lastResult=rawResult;  ResultHandler resultHandler=ResultHandlerFactory.makeResultHandler(this,rawResult);  boolean fromLiveScan=barcode != null;  if (fromLiveScan) {    historyManager.addHistoryItem(rawResult,resultHandler);    beepManager.playBeepSoundAndVibrate();    drawResultPoints(barcode,scaleFactor,rawResult);  }switch (source) {case NATIVE_APP_INTENT:case PRODUCT_SEARCH_LINK:    handleDecodeExternally(rawResult,resultHandler,barcode);  break;case ZXING_LINK:if (scanFromWebPageManager == null || !scanFromWebPageManager.isScanFromWebPage()) {  handleDecodeInternally(rawResult,resultHandler,barcode);} else {  handleDecodeExternally(rawResult,resultHandler,barcode);}break;case NONE:SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);if (fromLiveScan && prefs.getBoolean(PreferencesActivity.KEY_BULK_MODE,false)) {Toast.makeText(getApplicationContext(),getResources().getString(R.string.msg_bulk_mode_scanned) + " (" + rawResult.getText()+ ')',Toast.LENGTH_SHORT).show();restartPreviewAfterDelay(BULK_MODE_SCAN_DELAY_MS);} else {handleDecodeInternally(rawResult,resultHandler,barcode);}break;}}  }
class C{  public void union(double x,double y,double w,double h){  if (status == INVALID)   return;  if (status == EMPTY) {    setClip(x,y,w,h);    status=INUSE;    return;  }  clip[0]=Math.min(clip[0],x);  clip[1]=Math.min(clip[1],y);  clip[6]=Math.max(clip[6],x + w);  clip[7]=Math.max(clip[7],y + h);}  }
class C{  public static int findGlobalValleyLocation(float[] data){  float min=Float.NaN;  int imin=-1;  for (int i=0; i < data.length; i++) {    if (Float.isNaN(data[i]))     continue;    if (Float.isNaN(min) || data[i] < min) {      min=data[i];      imin=i;    }  }  return imin;}  }
class C{  @RequestMapping(value="/",method=PUT,produces=APPLICATION_JSON_VALUE) public ResponseEntity<ProjectDTO> update(@RequestBody ProjectDTO projectDTO) throws URISyntaxException {  log.debug("Update ProjectDTO : {}",projectDTO);  if (!projectDTO.isIdSet()) {    return create(projectDTO);  }  ProjectDTO result=projectDTOService.save(projectDTO);  return ResponseEntity.ok().body(result);}  }
class C{  private CertificateAndKey generateRootCertificate(){  long generationStart=System.currentTimeMillis();  KeyPair caKeyPair=keyGenerator.generate();  CertificateAndKey certificateAndKey=securityProviderTool.createCARootCertificate(rootCertificateInfo,caKeyPair,messageDigest);  long generationFinished=System.currentTimeMillis();  log.info("Generated CA root certificate and private key in {}ms. Key generator: {}. Signature algorithm: {}.",generationFinished - generationStart,keyGenerator,messageDigest);  return certificateAndKey;}  }
class C{  private void renderEditingBody(GL2 gl,SandboxBody body){  Dimension size=this.canvasSize;  gl.glColor4f(0.0f,0.0f,0.0f,0.5f);  gl.glPushMatrix();  gl.glLoadIdentity();  RenderUtilities.fillRectangleFromTopLeft(gl,-size.width * 0.5,size.height * 0.5,size.width,size.height);  gl.glPopMatrix();  if (Preferences.isBodyAABBEnabled()) {    this.renderAABB(gl,body);  }  RenderUtilities.pushTransform(gl);  RenderUtilities.applyTransform(gl,body.getTransform());  body.render(gl);  if (this.selectFixtureAction.isActive()) {    BodyFixture bf=this.selectFixtureAction.getObject();    Convex convex=bf.getShape();    RenderUtilities.outlineShape(gl,convex,4,Preferences.getSelectedColor());    gl.glColor4fv(body.getFillColor(),0);    RenderUtilities.fillShape(gl,convex);    gl.glColor4fv(body.getOutlineColor(),0);    RenderUtilities.drawShape(gl,convex,false);  }  if (Preferences.isBodyNormalEnabled()) {    body.renderNormals(gl);  }  if (Preferences.isBodyRotationDiscEnabled()) {    body.renderRotationDisc(gl);  }  if (Preferences.isBodyCenterEnabled()) {    body.renderCenter(gl);  }  RenderUtilities.popTransform(gl);  if (Preferences.isBodyVelocityEnabled()) {    body.renderVelocity(gl);  }}  }
class C{  void insertData(CharacterData node,int index,String insert){  fInsertNode=node;  node.insertData(index,insert);  fInsertNode=null;}  }
class C{  public static String[] extractNoDictionaryDimsArr(String noDictionaryDim){  if (null == noDictionaryDim || noDictionaryDim.isEmpty()) {    return new String[0];  }  String[] NoDictionary=noDictionaryDim.split(CarbonCommonConstants.COMA_SPC_CHARACTER);  List<String> list1=new ArrayList<String>(CarbonCommonConstants.CONSTANT_SIZE_TEN);  for (int i=0; i < NoDictionary.length; i++) {    String[] dim=NoDictionary[i].split(CarbonCommonConstants.COLON_SPC_CHARACTER);    list1.add(dim[0]);  }  return list1.toArray(new String[list1.size()]);}  }
class C{  public Matrix solve(Matrix B){  if (B.getRowDimension() != m) {    throw new IllegalArgumentException("Matrix row dimensions must agree.");  }  if (!this.isFullRank()) {    throw new RuntimeException("Matrix is rank deficient.");  }  int nx=B.getColumnDimension();  double[][] X=B.getArrayCopy();  for (int k=0; k < n; k++) {    for (int j=0; j < nx; j++) {      double s=0.0;      for (int i=k; i < m; i++) {        s+=QR[i][k] * X[i][j];      }      s=-s / QR[k][k];      for (int i=k; i < m; i++) {        X[i][j]+=s * QR[i][k];      }    }  }  for (int k=n - 1; k >= 0; k--) {    for (int j=0; j < nx; j++) {      X[k][j]/=Rdiag[k];    }    for (int i=0; i < k; i++) {      for (int j=0; j < nx; j++) {        X[i][j]-=X[k][j] * QR[i][k];      }    }  }  return (new Matrix(X,n,nx).getMatrix(0,n - 1,0,nx - 1));}  }
class C{  private MotionEvent swapXY(MotionEvent ev){  float width=getWidth();  float height=getHeight();  float newX=(ev.getY() / height) * width;  float newY=(ev.getX() / width) * height;  ev.setLocation(newX,newY);  return ev;}  }
class C{  public static void main(String[] arguments){  final Knock025A ab=new Knock025B();  System.out.println(ab.getValue());}  }
class C{  public boolean drawShadows(){  return drawShadows;}  }
class C{  public StatusFrame(){  super();  initComponents();}  }
class C{  @Override public double[] makeInverseCumulativeTestPoints(){  return new double[]{0.0,0.001,0.010,0.025,0.050,0.100,0.999,0.990,0.975,0.950,0.900,1.0};}  }
class C{  public void userKey(String command){  if (command.equals(ACTION_GOTO_END)) {    getGridScroll().setValue(getGridScroll().getMaximum());  } else   if (command.equals(ACTION_GOTO_HOME)) {    getGridScroll().setValue(getGridScroll().getMinimum());  } else   if (command.equals(ACTION_LINE_DOWN)) {    getGridScroll().setValue(getGridScroll().getValue() + 1);  } else   if (command.equals(ACTION_LINE_UP)) {    getGridScroll().setValue(getGridScroll().getValue() - 1);  } else   if (command.equals(ACTION_PAGE_DOWN)) {    getGridScroll().setValue(getGridScroll().getValue() + getGridScroll().getBlockIncrement());  } else   if (command.equals(ACTION_PAGE_UP)) {    getGridScroll().setValue(getGridScroll().getValue() - getGridScroll().getBlockIncrement());  } else {    System.err.println("Error in userKey(): unknown command: " + command);  }}  }
class C{  void cancelLocalXtn(TransactionManager mgr,ServerTransaction st) throws UnknownLeaseException {  if (!(mgr instanceof LocalTransactionManagerImpl))   throw new RuntimeException("cancel local xtn lease: invalid transaction manager");  LocalTransactionManagerImpl ltx=(LocalTransactionManagerImpl)mgr;  try {    abortSA(mgr,st,true,false,false,null);  } catch (  UnknownTransactionException ex) {    throw new UnknownLeaseException("cancel:unknown transaction at space-server transaction-id= " + st + " manager="+ ltx.getManagerID());  }}  }
class C{  public void saveAuxiliaryData() throws IOException {  if (getMeganFile().hasDataConnector() && !getMeganFile().isReadOnly()) {    if (dir != null) {      final MainViewer mainViewer=dir.getMainViewer();      if (mainViewer != null)       SyncDataTableAndTaxonomy.syncFormattingFromViewer2Summary(mainViewer,getDataTable());      for (      String cName : ClassificationManager.getAllSupportedClassifications()) {        if (dir.getViewerByClassName(ClassificationViewer.getClassName(cName)) != null && dir.getViewerByClassName(ClassificationViewer.getClassName(cName)) instanceof ClassificationViewer) {          ClassificationViewer classificationViewer=(ClassificationViewer)dir.getViewerByClassName(ClassificationViewer.getClassName(cName));          SyncDataTableAndClassificationViewer.syncFormattingFromViewer2Summary(classificationViewer,getDataTable());        }      }    }    getDataTable().setColorTable(getChartColorManager().getColorTableName(),getChartColorManager().isColorByPosition(),getChartColorManager().getHeatMapTable().getName());    getDataTable().setColorEdits(getChartColorManager().getColorEdits());    byte[] userState=getDataTable().getUserStateAsBytes();    byte[] sampleAttributes=getSampleAttributeTable().getBytes();    Map<String,byte[]> label2data=new HashMap<>();    label2data.put(SampleAttributeTable.USER_STATE,userState);    label2data.put(SampleAttributeTable.SAMPLE_ATTRIBUTES,sampleAttributes);    getMeganFile().getDataConnector().putAuxiliaryData(label2data);  }}  }
class C{  @Override public void encodeXML(Document doc,Element root,String elementName){  if ((doc == null) || (root == null) || (elementName == null)) {    return;  }  Element dataSourceElement=doc.createElement(elementName);  for (  String key : propertyMap.keySet()) {    Element element=doc.createElement(key);    element.appendChild(doc.createTextNode(propertyMap.get(key)));    dataSourceElement.appendChild(element);  }  root.appendChild(dataSourceElement);}  }
class C{  public T onCreateLvl1SectionViewHolder(ViewGroup parent){  return null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TOYPET_FEED_STOP_EATING(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1400617,value1,value0);}  }
class C{  void innerDelete(){  deleteNode();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_EVENT_WIN_ARTIFACT(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1390203,value0,value1);}  }
class C{  public static boolean isRTL(CharSequence s,int start,int end){  if (s == null || s.length() == 0) {    return isRTL(Locale.getDefault());  }  if (start == end) {    start=Math.max(0,--start);    if (start == end) {      end=Math.min(s.length(),++end);    }  }  try {    Bidi bidi=new Bidi(s.subSequence(start,end).toString(),Bidi.DIRECTION_DEFAULT_LEFT_TO_RIGHT);    return !bidi.baseIsLeftToRight();  } catch (  IndexOutOfBoundsException e) {    return false;  }}  }
class C{  public static void isNotNull(Object object){  isNotNull(object,"");}  }
class C{  public String toString(){  return "TokenToWords";}  }
class C{  public static int readSingleByte(InputStream in) throws IOException {  byte[] buffer=new byte[1];  int result=in.read(buffer,0,1);  return (result != -1) ? buffer[0] & 0xff : -1;}  }
class C{  private Map<String,List<Element>> parseDocument(Document doc) throws SynthesisException {  Map<String,List<Element>> elementLists=new HashMap<String,List<Element>>();  List<Element> segments=new ArrayList<Element>();  List<Element> boundaries=new ArrayList<Element>();  List<Element> firstVoicedSegments=new ArrayList<Element>();  List<Element> firstVowels=new ArrayList<Element>();  List<Element> lastVoicedSegments=new ArrayList<Element>();  List<Element> voicedSegments=new ArrayList<Element>();  TreeWalker treeWalker=null;  try {    treeWalker=DomUtils.createTreeWalker(doc,MaryXML.SYLLABLE,MaryXML.BOUNDARY);  } catch (  DOMException e) {    throw new SynthesisException("Could not parse XML Document",e);  }  Node node;  while ((node=treeWalker.nextNode()) != null) {    assert node != null;    Element element=(Element)node;    if (node.getNodeName().equals(MaryXML.BOUNDARY)) {      boundaries.add(element);      continue;    }    assert node.getNodeName().equals(MaryXML.SYLLABLE);    AllophoneSet allophoneSet=null;    try {      allophoneSet=MaryRuntimeUtils.determineAllophoneSet(element);    } catch (    MaryConfigurationException e) {      throw new SynthesisException("Could not determine AllophoneSet",e);    }    assert allophoneSet != null;    Element segment;    Element firstVoicedSegment=null;    Element firstVowel=null;    Element lastVoicedSegment=null;    for (segment=DomUtils.getFirstElementByTagName(node,MaryXML.PHONE); segment != null; segment=DomUtils.getNextOfItsKindIn(segment,element)) {      assert segment != null;      segments.add(segment);      String phone=UnitSelector.getPhoneSymbol(segment);      if (phone.length() == 0) {        throw new SynthesisException("No phone found for segment " + segment);      }      Allophone allophone=allophoneSet.getAllophone(phone);      if (allophone == null) {        throw new SynthesisException("No Allophone found for phone '" + phone + "'");      }      if (allophone.isVoiced()) {        voicedSegments.add(segment);        if (firstVoicedSegment == null) {          firstVoicedSegment=segment;        }        if (firstVowel == null && allophone.isVowel()) {          firstVowel=segment;        }        lastVoicedSegment=segment;      }    }    if (firstVoicedSegment == null || firstVowel == null || lastVoicedSegment == null) {      Log.d(Mary.LOG,"WARNING: could not identify F0 anchors in malformed syllable: '" + element.getAttribute("ph") + "'");    } else {      firstVoicedSegments.add(firstVoicedSegment);      firstVowels.add(firstVowel);      lastVoicedSegments.add(lastVoicedSegment);    }  }  elementLists.put("segments",segments);  elementLists.put("voicedSegments",voicedSegments);  elementLists.put("firstVoicedSegments",firstVoicedSegments);  elementLists.put("firstVowels",firstVowels);  elementLists.put("lastVoicedSegments",lastVoicedSegments);  elementLists.put("boundaries",boundaries);  return elementLists;}  }
class C{  private void generateWrapperComponents(Set<TypeElement> components){  Map<TypeElement,ComponentInfo> componentToCoreInjectorMap=calculateAllMappingFromComponentsToCoreInjectors(components);  for (  TypeElement component : components) {    ComponentInfo coreInjector=componentToCoreInjectorMap.get(component);    ClassName coreInjectorClassName=getCoreInejectorClassName(coreInjectorPackage,coreInjector);    String packageString=Utils.getPackageString(component);    String generatedComponentSimpleName=getComponentImplementationSimpleNameFromInterface(component);    TypeSpec.Builder componentBuilder=TypeSpec.classBuilder(generatedComponentSimpleName).addModifiers(Modifier.PUBLIC).addSuperinterface(TypeName.get(component.asType())).superclass(coreInjectorClassName);    MethodSpec.Builder ctorBuilder=MethodSpec.constructorBuilder().addModifiers(Modifier.PRIVATE);    List<TypeElement> sortedComponentDependencies=Utils.sortByFullName(getComponentDependencies(component));    TypeElement dependencyComponent=null;    if (!sortedComponentDependencies.isEmpty()) {      dependencyComponent=Iterables.getOnlyElement(sortedComponentDependencies);      ctorBuilder.addParameter(TypeName.get(dependencyComponent.asType()),Utils.getSourceCodeName(dependencyComponent));    }    Set<TypeElement> allComponentModules=getAllModulesOfComponentRecursively(component);    List<TypeElement> sortedComponentPassedModules=Utils.sortByFullName(Utils.getNonNullaryCtorOnes(allComponentModules));    for (    TypeElement typeElement : sortedComponentPassedModules) {      ctorBuilder.addParameter(TypeName.get(typeElement.asType()),Utils.getSourceCodeName(typeElement));    }    Set<TypeElement> coreInjectorPassedModules=new HashSet<>();    coreInjectorPassedModules.addAll(scopedPassedModules.get(coreInjector));    coreInjectorPassedModules.addAll(unscopedPassedModules);    List<TypeElement> sortedCoreInjectorPassedModules=Utils.sortByFullName(coreInjectorPassedModules);    StringBuilder stringBuilder=new StringBuilder("super(");    if (dependencyComponent != null) {      String generatedDependencyComponentSimpleName=getComponentImplementationSimpleNameFromInterface(dependencyComponent);      stringBuilder.append("($T) ").append(Utils.getSourceCodeName(dependencyComponent));      if (!sortedCoreInjectorPassedModules.isEmpty()) {        stringBuilder.append(", ");      }    }    if (!sortedCoreInjectorPassedModules.isEmpty()) {      for (      TypeElement typeElement : sortedCoreInjectorPassedModules) {        if (sortedComponentPassedModules.contains(typeElement)) {          stringBuilder.append(Utils.getSourceCodeName(typeElement));        } else {          stringBuilder.append("null");        }        stringBuilder.append(", ");      }      stringBuilder.delete(stringBuilder.length() - 2,stringBuilder.length());    }    stringBuilder.append(");");    if (dependencyComponent != null) {      ctorBuilder.addCode(stringBuilder.toString(),ClassName.get(packageString,getComponentImplementationSimpleNameFromInterface(dependencyComponent)));    } else {      ctorBuilder.addCode(stringBuilder.toString());    }    componentBuilder.addMethod(ctorBuilder.build());    ClassName generatedComponentClassName=ClassName.get(packageString,generatedComponentSimpleName);    generateComponentBuilder(generatedComponentClassName,dependencyComponent,sortedComponentPassedModules,componentBuilder,coreInjector);    ClassName builderClassName=ClassName.get(packageString,generatedComponentSimpleName,"Builder");    componentBuilder.addMethod(MethodSpec.methodBuilder("builder").addModifiers(Modifier.PUBLIC,Modifier.STATIC).returns(builderClassName).addCode("return new $T();",builderClassName).build());    JavaFile javaFile=JavaFile.builder(packageString,componentBuilder.build()).build();    try {      messager.printMessage(Kind.NOTE,String.format("%s: writing java file: %s",TAG,javaFile.toJavaFileObject().getName()));      javaFile.writeTo(processingEnv.getFiler());    } catch (    IOException e) {      Throwables.propagate(e);    }  }}  }
class C{  public Shape diamond(float x,float y,float height){  m_path.reset();  m_path.moveTo(x,(y + 0.5f * height));  m_path.lineTo((x + 0.5f * height),y);  m_path.lineTo((x + height),(y + 0.5f * height));  m_path.lineTo((x + 0.5f * height),(y + height));  m_path.closePath();  return m_path;}  }
class C{  private void activate(boolean force,Object proxy,Method method) throws Exception {  assert Thread.holdsLock(this);  try {    activate0(force,proxy);  } catch (  Exception e) {    if (logger.isLoggable(Levels.FAILED)) {      logThrow(Levels.FAILED,"activating object for call","activate",method,e);    }    throw e;  }}  }
class C{  private Vector2 screenToWorld(Point p,Dimension size,Vector2 offset,double scale){  Vector2 v=new Vector2();  double x=p.x;  double y=p.y;  double w=size.getWidth();  double h=size.getHeight();  double ox=offset.x;  double oy=offset.y;  v.x=(x - w * 0.5) / scale - ox;  v.y=-((y - h * 0.5) / scale + oy);  return v;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately(getSyntax());}  }
class C{  private LinkedList<Diff> diff_compute(String text1,String text2,boolean checklines,long deadline){  LinkedList<Diff> diffs=new LinkedList<Diff>();  if (text1.length() == 0) {    diffs.add(new Diff(Operation.INSERT,text2));    return diffs;  }  if (text2.length() == 0) {    diffs.add(new Diff(Operation.DELETE,text1));    return diffs;  }  String longtext=text1.length() > text2.length() ? text1 : text2;  String shorttext=text1.length() > text2.length() ? text2 : text1;  int i=longtext.indexOf(shorttext);  if (i != -1) {    Operation op=(text1.length() > text2.length()) ? Operation.DELETE : Operation.INSERT;    diffs.add(new Diff(op,longtext.substring(0,i)));    diffs.add(new Diff(Operation.EQUAL,shorttext));    diffs.add(new Diff(op,longtext.substring(i + shorttext.length())));    return diffs;  }  if (shorttext.length() == 1) {    diffs.add(new Diff(Operation.DELETE,text1));    diffs.add(new Diff(Operation.INSERT,text2));    return diffs;  }  String[] hm=diff_halfMatch(text1,text2);  if (hm != null) {    String text1_a=hm[0];    String text1_b=hm[1];    String text2_a=hm[2];    String text2_b=hm[3];    String mid_common=hm[4];    LinkedList<Diff> diffs_a=diff_main(text1_a,text2_a,checklines,deadline);    LinkedList<Diff> diffs_b=diff_main(text1_b,text2_b,checklines,deadline);    diffs=diffs_a;    diffs.add(new Diff(Operation.EQUAL,mid_common));    diffs.addAll(diffs_b);    return diffs;  }  if (checklines && text1.length() > 100 && text2.length() > 100) {    return diff_lineMode(text1,text2,deadline);  }  return diff_bisect(text1,text2,deadline);}  }
class C{  public static StatelessLongHash sipHash24(long seedLow,long seedHigh){  return Hashes.getStatelessLong(new SipHash24Parameters(seedLow,seedHigh));}  }
class C{  @deprecated public char previous(){  if (this.pos > this.begin) {    this.pos-=1;    return this.text.charAt(this.pos);  }  return 65535;}  }
class C{  public void startRecording(String file){switch (this.mode) {case PLAY:    Log.d(LOG_TAG,"AudioPlayer Error: Can't record in play mode.");  sendErrorStatus(MEDIA_ERR_ABORTED);break;case NONE:this.audioFile=file;this.recorder.setAudioSource(MediaRecorder.AudioSource.MIC);this.recorder.setOutputFormat(MediaRecorder.OutputFormat.DEFAULT);this.recorder.setAudioEncoder(MediaRecorder.AudioEncoder.DEFAULT);this.recorder.setOutputFile(this.tempFile);try {this.recorder.prepare();this.recorder.start();this.setState(STATE.MEDIA_RUNNING);return;} catch (IllegalStateException e) {e.printStackTrace();}catch (IOException e) {e.printStackTrace();}sendErrorStatus(MEDIA_ERR_ABORTED);break;case RECORD:Log.d(LOG_TAG,"AudioPlayer Error: Already recording.");sendErrorStatus(MEDIA_ERR_ABORTED);}}  }
class C{  private ColorMapEntry createColourMapEntry(ColourMapData data){  ColorMapEntry entry=new ColorMapEntryImpl();  entry.setColor(data.getColourExpression());  entry.setOpacity(data.getOpacity());  entry.setQuantity(data.getQuantity());  entry.setLabel(data.getLabel());  return entry;}  }
class C{  public MediaFormat(){  mMap=new HashMap<String,Object>();}  }
class C{  public static Map<String,Object> returnError(String errorMessage){  return returnProblem(ModelService.RESPOND_ERROR,errorMessage,null,null,null);}  }
class C{  public boolean isDrawRoundedSlicesEnabled(){  return mDrawRoundedSlices;}  }
class C{  public void visitPhpMethod(Method method){  this.inspectCallable(method);}  }
class C{  private void mutateResourceOntology(String resourceTypeId,ResourceType.DataType resourceDataType){  MindmapsGraph graph=Mindmaps.factory(Mindmaps.DEFAULT_URI,keySpace).getGraph();  ResourceType resource=graph.putResourceType(resourceTypeId,resourceDataType);  RoleType degreeOwner=graph.putRoleType(GraqlType.HAS_RESOURCE_OWNER.getId(resourceTypeId));  RoleType degreeValue=graph.putRoleType(GraqlType.HAS_RESOURCE_VALUE.getId(resourceTypeId));  graph.putRelationType(GraqlType.HAS_RESOURCE.getId(resourceTypeId)).hasRole(degreeOwner).hasRole(degreeValue);  for (  String type : subtypes) {    graph.getType(type).playsRole(degreeOwner);  }  resource.playsRole(degreeValue);  try {    graph.commit();  } catch (  MindmapsValidationException e) {    throw new RuntimeException(ErrorMessage.ONTOLOGY_MUTATION.getMessage(e.getMessage()),e);  }}  }
class C{  public boolean isActive(){  Date now=new Date();  return startsAt != null && endsAt != null && now.after(startsAt) && now.before(endsAt);}  }
class C{  public void acceptVisit(ExpressionVisitor visitor){  visitor.enter(this);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("zoom axis=");  String axis=np.getWordMatchesIgnoringCase("horizontal vertical both");  np.matchIgnoreCase("what=");  String what;  if (np.peekMatchAnyTokenIgnoreCase("in out reset selection fit"))   what=np.getWordMatchesIgnoringCase("in out reset selection fit"); else   what="" + (float)np.getDouble();  np.matchIgnoreCase(";");  AlignmentViewer viewer=(AlignmentViewer)getViewer();  viewer.getAlignmentViewerPanel().zoom(axis,what,null);}  }
class C{  public boolean hasFeatureValue(int featureIndex,String featureValue){  if (featureIndex < 0) {    return false;  }  if (featureIndex < numByteFeatures) {    return byteFeatureValues[featureIndex].contains(featureValue);  }  if (featureIndex < numByteFeatures + numShortFeatures) {    return shortFeatureValues[featureIndex - numByteFeatures].contains(featureValue);  }  return false;}  }
class C{  public static RecvPackageInfo recvPackage(InputStream in,byte expect_cmd,long expect_body_len) throws IOException {  RecvHeaderInfo header=recvHeader(in,expect_cmd,expect_body_len);  if (header.errno != 0) {    return new RecvPackageInfo(header.errno,null);  }  byte[] body=new byte[(int)header.body_len];  int totalBytes=0;  int remainBytes=(int)header.body_len;  int bytes;  while (totalBytes < header.body_len) {    if ((bytes=in.read(body,totalBytes,remainBytes)) < 0) {      break;    }    totalBytes+=bytes;    remainBytes-=bytes;  }  if (totalBytes != header.body_len) {    throw new IOException("recv package size " + totalBytes + " != "+ header.body_len);  }  return new RecvPackageInfo((byte)0,body);}  }
class C{  Node<K,V> find(K key,boolean create){  Comparator<? super K> comparator=this.comparator;  Node<K,V> nearest=root;  int comparison=0;  if (nearest != null) {    @SuppressWarnings("unchecked") Comparable<Object> comparableKey=(comparator == NATURAL_ORDER) ? (Comparable<Object>)key : null;    while (true) {      comparison=(comparableKey != null) ? comparableKey.compareTo(nearest.key) : comparator.compare(key,nearest.key);      if (comparison == 0) {        return nearest;      }      Node<K,V> child=(comparison < 0) ? nearest.left : nearest.right;      if (child == null) {        break;      }      nearest=child;    }  }  if (!create) {    return null;  }  Node<K,V> header=this.header;  Node<K,V> created;  if (nearest == null) {    if (comparator == NATURAL_ORDER && !(key instanceof Comparable)) {      throw new ClassCastException(key.getClass().getName() + " is not Comparable");    }    created=new Node<K,V>(nearest,key,header,header.prev);    root=created;  } else {    created=new Node<K,V>(nearest,key,header,header.prev);    if (comparison < 0) {      nearest.left=created;    } else {      nearest.right=created;    }    rebalance(nearest,true);  }  size++;  modCount++;  return created;}  }
class C{  public static NumericEntityEscaper below(final int codepoint){  return outsideOf(codepoint,Integer.MAX_VALUE);}  }
class C{  protected boolean isValidDomain(String domain){  Matcher ipDomainMatcher=IP_DOMAIN_PATTERN.matcher(domain);  if (ipDomainMatcher.matches()) {    InetAddressValidator inetAddressValidator=InetAddressValidator.getInstance();    return inetAddressValidator.isValid(ipDomainMatcher.group(1));  }  DomainValidator domainValidator=DomainValidator.getInstance(allowLocal);  return domainValidator.isValid(domain) || domainValidator.isValidTld(domain);}  }
class C{  public static double[] readDoubles(){  return readAllDoubles();}  }
class C{  LoadInfo(ProjectSetSerializationContext context,StringTokenizer tokenizer) throws SVNException {  repo=tokenizer.nextToken();  String projectName=tokenizer.nextToken();  project=ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);  if (repo.indexOf("://") != -1) {    repositoryLocation=SVNRepositoryLocation.fromString(repo,false,true);    fromFileSystem=false;    directory=null;  } else {    repositoryLocation=null;    fromFileSystem=true;    if (!new Path(repo).isAbsolute()) {      String baseDir;      if (context.getFilename() != null) {        baseDir=new File(context.getFilename()).getParent();      } else {        baseDir=project.getWorkspace().getRoot().getLocation().toOSString();      }      try {        directory=new File(baseDir + File.separatorChar + repo).getCanonicalPath();      } catch (      IOException ioe) {        throw new SVNException("Path expansion/canonicalization failed",ioe);      }    } else {      directory=repo;    }  }}  }
class C{  public static int rgbFromCmyk(float[] cmyk){  float cyan=cmyk[0];  float magenta=cmyk[1];  float yellow=cmyk[2];  float black=cmyk[3];  int red=(int)((1.0f - Math.min(1.0f,cyan * (1.0f - black) + black)) * 255);  int green=(int)((1.0f - Math.min(1.0f,magenta * (1.0f - black) + black)) * 255);  int blue=(int)((1.0f - Math.min(1.0f,yellow * (1.0f - black) + black)) * 255);  return ((0xff & red) << 16) + ((0xff & green) << 8) + (0xff & blue);}  }
class C{  @Nullable public static XmlTag findValueResourceTagInContext(@NotNull Editor editor,@NotNull PsiFile file,boolean rename){  if (!(file instanceof XmlFile)) {    return null;  }  final AndroidFacet facet=AndroidFacet.getInstance(file);  if (facet == null) {    return null;  }  if (!AndroidResourceUtil.isInResourceSubdirectory(file,ResourceFolderType.VALUES.getName())) {    return null;  }  final PsiElement element=file.findElementAt(editor.getCaretModel().getOffset());  if (!rename && element instanceof XmlToken && XmlTokenType.XML_DATA_CHARACTERS.equals(((XmlToken)element).getTokenType())) {    return null;  }  final XmlTag tag=PsiTreeUtil.getParentOfType(element,XmlTag.class);  if (element instanceof XmlToken && XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN.equals(((XmlToken)element).getTokenType()) && tag != null) {    XmlAttribute parentAttribute=tag.getAttribute("parent");    final String parentValue=parentAttribute != null ? parentAttribute.getValue() : null;    if (parentValue != null && parentValue.equals(element.getText())) {      return null;    }  }  final XmlTag rootTag=((XmlFile)file).getRootTag();  if (rootTag == null || !TAG_RESOURCES.equals(rootTag.getName())) {    return null;  }  return tag;}  }
class C{  public int compare(File file1,File file2){  long size1=0;  if (file1.isDirectory()) {    size1=sumDirectoryContents && file1.exists() ? FileUtils.sizeOfDirectory(file1) : 0;  } else {    size1=file1.length();  }  long size2=0;  if (file2.isDirectory()) {    size2=sumDirectoryContents && file2.exists() ? FileUtils.sizeOfDirectory(file2) : 0;  } else {    size2=file2.length();  }  long result=size1 - size2;  if (result < 0) {    return -1;  } else   if (result > 0) {    return 1;  } else {    return 0;  }}  }
class C{  private static IConfigElement categoryElement(String category,String name,String tooltip_key){  return new DummyConfigElement.DummyCategoryElement(name,tooltip_key,new ConfigElement(ConfigManager.config.getCategory(category)).getChildElements());}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    return new FileInputStream(entry.getCleanFile(index));  }}  }
class C{  public boolean lockXtnOnXtnEnd(XtnEntry xtnEntry){  xtnEntry.lock();  boolean lockedXtnTable=xtnEntry.anyFifoEntriesUnderXtn();  if (lockedXtnTable)   getTxWriteLock().lock();  return lockedXtnTable;}  }
class C{  private boolean supportsGooglePlayServices(){  return GooglePlayServicesUtil.isGooglePlayServicesAvailable(this) == ConnectionResult.SUCCESS;}  }
class C{  private void updateDataTable(){  getListPages().clear();  for (int i=1; i <= getNumPages(); i++) {    getListPages().addItem(String.valueOf(i));  }  getActionLabel().setText(getFirstRow() + "-" + getLastRow()+ " of "+ getTotalRows());  table.setVisibleRange(getFirstRow(),getRowCount());  if (getFirstRow() + getRowCount() > getTotalRows()) {    if (getRowCount() > getTotalRows()) {      getDataSource().load(table,getFirstRow(),getTotalRows());    } else {      getDataSource().load(table,getFirstRow(),getTotalRows() - (getFirstRow() - 1));    }  } else {    getDataSource().load(table,getFirstRow(),getRowCount());  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NEWS_CHANNEL_TABLE'";  db.execSQL(sql);}  }
class C{  public DTDConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool,XMLComponentManager parentSettings){  super(symbolTable,parentSettings);  final String[] recognizedFeatures={CONTINUE_AFTER_FATAL_ERROR,LOAD_EXTERNAL_DTD};  addRecognizedFeatures(recognizedFeatures);  setFeature(CONTINUE_AFTER_FATAL_ERROR,false);  setFeature(LOAD_EXTERNAL_DTD,true);  final String[] recognizedProperties={ERROR_REPORTER,ENTITY_MANAGER,DOCUMENT_SCANNER,DTD_SCANNER,DTD_PROCESSOR,DTD_VALIDATOR,NAMESPACE_BINDER,XMLGRAMMAR_POOL,DATATYPE_VALIDATOR_FACTORY,VALIDATION_MANAGER,JAXP_SCHEMA_SOURCE,JAXP_SCHEMA_LANGUAGE,LOCALE};  addRecognizedProperties(recognizedProperties);  fGrammarPool=grammarPool;  if (fGrammarPool != null) {    setProperty(XMLGRAMMAR_POOL,fGrammarPool);  }  fEntityManager=createEntityManager();  setProperty(ENTITY_MANAGER,fEntityManager);  addComponent(fEntityManager);  fErrorReporter=createErrorReporter();  fErrorReporter.setDocumentLocator(fEntityManager.getEntityScanner());  setProperty(ERROR_REPORTER,fErrorReporter);  addComponent(fErrorReporter);  fScanner=createDocumentScanner();  setProperty(DOCUMENT_SCANNER,fScanner);  if (fScanner instanceof XMLComponent) {    addComponent((XMLComponent)fScanner);  }  fDTDScanner=createDTDScanner();  if (fDTDScanner != null) {    setProperty(DTD_SCANNER,fDTDScanner);    if (fDTDScanner instanceof XMLComponent) {      addComponent((XMLComponent)fDTDScanner);    }  }  fDTDProcessor=createDTDProcessor();  if (fDTDProcessor != null) {    setProperty(DTD_PROCESSOR,fDTDProcessor);    addComponent(fDTDProcessor);  }  fDTDValidator=createDTDValidator();  if (fDTDValidator != null) {    setProperty(DTD_VALIDATOR,fDTDValidator);    addComponent(fDTDValidator);  }  fNamespaceBinder=createNamespaceBinder();  if (fNamespaceBinder != null) {    setProperty(NAMESPACE_BINDER,fNamespaceBinder);    addComponent(fNamespaceBinder);  }  fDatatypeValidatorFactory=createDatatypeValidatorFactory();  if (fDatatypeValidatorFactory != null) {    setProperty(DATATYPE_VALIDATOR_FACTORY,fDatatypeValidatorFactory);  }  fValidationManager=createValidationManager();  if (fValidationManager != null) {    setProperty(VALIDATION_MANAGER,fValidationManager);  }  if (fErrorReporter.getMessageFormatter(XMLMessageFormatter.XML_DOMAIN) == null) {    XMLMessageFormatter xmft=new XMLMessageFormatter();    fErrorReporter.putMessageFormatter(XMLMessageFormatter.XML_DOMAIN,xmft);    fErrorReporter.putMessageFormatter(XMLMessageFormatter.XMLNS_DOMAIN,xmft);  }  try {    setLocale(Locale.getDefault());  } catch (  XNIException e) {  }}  }
class C{  public CodeAttribute(String name,List<Unit> units,List<Tag> tags){  this.name=name;  this.mUnits=units;  this.mTags=tags;}  }
class C{  static Object readRequestStack(String name,HttpServletRequest request,Map<String,Object> context,Environment env) throws TemplateModelException {  return ContextFtlUtil.readRequestStack(name,false,request,context,env);}  }
class C{  public int bdd_nodes(){  return soot.PhaseOptions.getInt(options,"bdd-nodes");}  }
class C{  public boolean isAppliable(){  return getBlastFileName().trim().length() > 0 && (new File(Basic.getFirstLine(getBlastFileName()).trim())).exists();}  }
class C{  public GroupsGetCatalogQuery(VkApiClient client,UserActor actor){  super(client,"groups.getCatalog",GetCatalogResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public String render(String resourceName,String screenName,boolean asString) throws GeneralException, IOException, SAXException, ParserConfigurationException {  ModelScreen modelScreen=ScreenFactory.getScreenFromLocation(resourceName,screenName);  if (modelScreen.getUseCache()) {    WidgetContextCacheKey wcck=new WidgetContextCacheKey(context);    String screenCombinedName=resourceName + ":" + screenName;    ScreenCache screenCache=new ScreenCache();    GenericWidgetOutput gwo=screenCache.get(screenCombinedName,wcck);    if (gwo == null) {      Writer sw=new StringWriter();      modelScreen.renderScreenString(sw,context,screenStringRenderer);      gwo=new GenericWidgetOutput(sw.toString());      screenCache.put(screenCombinedName,wcck,gwo);      if (asString) {        return gwo.toString();      } else {        writer.append(gwo.toString());      }    } else {      if (asString) {        return gwo.toString();      } else {        writer.append(gwo.toString());      }    }  } else {    context.put("renderFormSeqNumber",String.valueOf(renderFormSeqNumber));    if (asString) {      Writer sw=new StringWriter();      modelScreen.renderScreenString(sw,context,screenStringRenderer);      return sw.toString();    } else {      modelScreen.renderScreenString(writer,context,screenStringRenderer);    }  }  return "";}  }
class C{  protected boolean isEnabledForInaccessibleResources(){  return false;}  }
class C{  @Override public void stop(Runnable arg0){  stop();  arg0.run();}  }
class C{  public static String streamToString(InputStream inputStream) throws IOException {  if (inputStream == null) {    return "";  }  StringBuilder sBuilder=new StringBuilder();  String line;  BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream));  while ((line=bufferedReader.readLine()) != null) {    sBuilder.append(line).append("\n");  }  return sBuilder.toString();}  }
class C{  public static CalendarFragment newInstance(CustomCalendar calendar){  CalendarFragment fragment=new CalendarFragment();  fragment.setCalendar(calendar);  return fragment;}  }
class C{  public FilterOperationDelegateInvoker(int operationCode,Method processMethod){  this.operationCode=operationCode;  this.processMethod=ReflectionUtil.createMethod(processMethod);  this.parameterTypes=processMethod.getParameterTypes();}  }
class C{  public static Class<?> loadClass(String className,boolean fastPath) throws ClassNotFoundException {  if (_classProvider == null) {synchronized (AdditionalClassProviderFactory.class) {      if (_classProvider == null)       throw new ClassNotFoundException("no class provider present");    }  }  return _classProvider.loadClass(className,fastPath);}  }
class C{  public TimbreDistribution(GaussianMixture gmm){  super();  this.gmm=gmm;}  }
class C{  public SpecialInvokeExpr newSpecialInvokeExpr(Local base,SootMethodRef method,Value... args){  return newSpecialInvokeExpr(base,method,Arrays.asList(args));}  }
class C{  private HermesEventBus(){  mEventBus=EventBus.getDefault();  mRemoteApis=new ObjectCanary2<IMainService>();}  }
class C{  public void paintFrame(@NotNull Graphics g,@NotNull Device device,@NotNull ScreenOrientation orientation,boolean showEffects,int x1,int y1,int height){  DeviceData data=getDeviceData(device);  if (data == null || height == 0) {    return;  }  FrameData frame=data.getFrameData(orientation,Integer.MAX_VALUE);  BufferedImage image=frame.getImage(showEffects);  if (image != null) {    double scale=height / (double)frame.getScreenHeight();    int dx1=(int)(x1 - scale * frame.getScreenX());    int dy1=(int)(y1 - scale * frame.getScreenY());    int dx2=dx1 + (int)(scale * image.getWidth());    int dy2=dy1 + (int)(scale * image.getHeight());    g.drawImage(image,dx1,dy1,dx2,dy2,0,0,image.getWidth(),image.getHeight(),null);  }}  }
class C{  @Override public void renderLimitLines(Canvas c){  List<LimitLine> limitLines=mYAxis.getLimitLines();  if (limitLines == null || limitLines.size() <= 0)   return;  float[] pts=new float[2];  Path limitLinePath=new Path();  for (int i=0; i < limitLines.size(); i++) {    LimitLine l=limitLines.get(i);    if (!l.isEnabled())     continue;    mLimitLinePaint.setStyle(Paint.Style.STROKE);    mLimitLinePaint.setColor(l.getLineColor());    mLimitLinePaint.setStrokeWidth(l.getLineWidth());    mLimitLinePaint.setPathEffect(l.getDashPathEffect());    pts[1]=l.getLimit();    mTrans.pointValuesToPixel(pts);    limitLinePath.moveTo(mViewPortHandler.contentLeft(),pts[1]);    limitLinePath.lineTo(mViewPortHandler.contentRight(),pts[1]);    c.drawPath(limitLinePath,mLimitLinePaint);    limitLinePath.reset();    String label=l.getLabel();    if (label != null && !"".equals(label)) {      mLimitLinePaint.setStyle(l.getTextStyle());      mLimitLinePaint.setPathEffect(null);      mLimitLinePaint.setColor(l.getTextColor());      mLimitLinePaint.setTypeface(l.getTypeface());      mLimitLinePaint.setStrokeWidth(0.5f);      mLimitLinePaint.setTextSize(l.getTextSize());      final float labelLineHeight=Utils.calcTextHeight(mLimitLinePaint,label);      float xOffset=Utils.convertDpToPixel(4f) + l.getXOffset();      float yOffset=l.getLineWidth() + labelLineHeight + l.getYOffset();      final LimitLine.LimitLabelPosition position=l.getLabelPosition();      if (position == LimitLine.LimitLabelPosition.RIGHT_TOP) {        mLimitLinePaint.setTextAlign(Align.RIGHT);        c.drawText(label,mViewPortHandler.contentRight() - xOffset,pts[1] - yOffset + labelLineHeight,mLimitLinePaint);      } else       if (position == LimitLine.LimitLabelPosition.RIGHT_BOTTOM) {        mLimitLinePaint.setTextAlign(Align.RIGHT);        c.drawText(label,mViewPortHandler.contentRight() - xOffset,pts[1] + yOffset,mLimitLinePaint);      } else       if (position == LimitLine.LimitLabelPosition.LEFT_TOP) {        mLimitLinePaint.setTextAlign(Align.LEFT);        c.drawText(label,mViewPortHandler.contentLeft() + xOffset,pts[1] - yOffset + labelLineHeight,mLimitLinePaint);      } else {        mLimitLinePaint.setTextAlign(Align.LEFT);        c.drawText(label,mViewPortHandler.offsetLeft() + xOffset,pts[1] + yOffset,mLimitLinePaint);      }    }  }}  }
class C{  public RequestHandle delete(Context context,String url,Header[] headers,RequestParams params,ResponseHandlerInterface responseHandler){  HttpDelete httpDelete=new HttpDelete(getUrlWithQueryString(isUrlEncodingEnabled,url,params));  if (headers != null)   httpDelete.setHeaders(headers);  return sendRequest(httpClient,httpContext,httpDelete,null,responseHandler,context);}  }
class C{  @deprecated protected int writeDeltaTo(int jumpTarget){  int i=this.bytesLength - jumpTarget;  assert (i >= 0);  if (i <= 191)   return write(i);  int length;  int length;  if (i <= 12287) {    this.intBytes[0]=((byte)(192 + (i >> 8)));    length=1;  } else {    int length;    if (i <= 917503) {      this.intBytes[0]=((byte)(240 + (i >> 16)));      length=2;    } else {      int length;      if (i <= 16777215) {        this.intBytes[0]=-2;        length=3;      } else {        this.intBytes[0]=-1;        this.intBytes[1]=((byte)(i >> 24));        length=4;      }      this.intBytes[1]=((byte)(i >> 16));    }    this.intBytes[1]=((byte)(i >> 8));  }  this.intBytes[(length++)]=((byte)i);  return write(this.intBytes,length);}  }
class C{  @Deprecated public JavaPluginLoader(Server instance){  Validate.notNull(instance,"Server cannot be null");  server=instance;}  }
class C{  public boolean vta(){  return soot.PhaseOptions.getBoolean(options,"vta");}  }
class C{  public static boolean isExtension(String filename,Collection<String> extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.isEmpty()) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  public static void f(String tag,String msg){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg);}  }
class C{  public boolean force_gc(){  return soot.PhaseOptions.getBoolean(options,"force-gc");}  }
class C{  public Builder zoomAnimationThreshold(Number zoomAnimationThreshold){  this.zoomAnimationThreshold=zoomAnimationThreshold;  return this;}  }
class C{  public PhotosEditQuery edit(UserActor actor,int photoId){  return new PhotosEditQuery(getClient(),actor,photoId);}  }
class C{  @RequestMapping(method=RequestMethod.GET,produces="application/json") public JsonNode listModels(HttpServletRequest request){  ServerConfig serverConfig=retrieveServerConfig();  Map<String,String[]> parameterMap=getRequestParametersWithoutServerId(request);  try {    return clientService.listModels(serverConfig,parameterMap);  } catch (  ActivitiServiceException e) {    throw new BadRequestException(e.getMessage());  }}  }
class C{  @SubscribeEvent public void onFood(LivingEntityUseItemEvent.Start event){  if (!(event.getEntityLiving() instanceof EntityPlayer))   return;  if (!(event.getItem().getItem() instanceof ItemFood))   return;  EntityPlayer player=(EntityPlayer)event.getEntityLiving();  if (!(player.getFoodStats() instanceof BWMFoodStats))   return;  if (player.isPotionActive(MobEffects.HUNGER)) {    event.setCanceled(true);  }}  }
class C{  public void addMatcher(XPathMatcher matcher){  ensureMatcherCapacity();  fMatchers[fMatchersCount++]=matcher;}  }
class C{  public static <T extends BaseFragment>T newInstance(Class<T> fragmentClazz,Bundle args){  T fragment=null;  try {    fragment=fragmentClazz.newInstance();    fragment.setArguments(args);  } catch (  java.lang.InstantiationException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }  return fragment;}  }
class C{  public DocumentNGramGraph[] intersectAndDeltaGraph(DocumentNGramGraph dgOtherGraph){  DocumentNGramGraph dgUnion=null;  if (dgOtherGraph.length() > length()) {    dgUnion=(DocumentNGramGraph)dgOtherGraph.clone();    dgUnion.merge(this,0);  } else {    dgUnion=(DocumentNGramGraph)clone();    dgUnion.merge(dgOtherGraph,0);  }  DocumentNGramGraph[] res=new DocumentNGramGraph[2];  DocumentNGramGraph dgIntersection=intersectGraph(dgOtherGraph);  res[0]=dgIntersection;  for (int iCurLvl=MinSize; iCurLvl <= MaxSize; iCurLvl++) {    UniqueVertexGraph gUnion=dgUnion.getGraphLevelByNGramSize(iCurLvl);    UniqueVertexGraph gIntersection=dgIntersection.getGraphLevelByNGramSize(iCurLvl);    EdgeCachedLocator eclLocator=new EdgeCachedLocator(100);    if (gIntersection == null)     continue;    java.util.Iterator iIter=gIntersection.getEdgeSet().iterator();    while (iIter.hasNext()) {      WeightedEdge weCurItem=(WeightedEdge)iIter.next();      Edge eEdge=eclLocator.locateDirectedEdgeInGraph(gUnion,weCurItem.getVertexA(),weCurItem.getVertexB());      if (eEdge != null)       try {        gUnion.removeEdge(eEdge);      } catch (      Exception ex) {        ex.printStackTrace();      }    }  }  res[1]=dgUnion;  return res;}  }
class C{  public ZeroException(){  this(LocalizedFormats.ZERO_NOT_ALLOWED);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HostileUp_ME_TO_SELF(String value0d,String skillname){  return new SM_SYSTEM_MESSAGE(1200376,value0d,skillname);}  }
class C{  public void java_io_ObjectInputStream_allocateNewObject(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  throw new NativeMethodNotSupportedException(method);}  }
class C{  public long distanceSquare(Coord coord){  long dx=coord.x - x;  long dy=coord.y - y;  return dx * dx + dy * dy;}  }
class C{  public static boolean areEqual(ItemStack stack1,ItemStack stack2){  if (stack1 == null || stack2 == null) {    return false;  } else {    return stack1.isItemEqual(stack2);  }}  }
class C{  public NoSuchComponentException(Exception cause){  super(cause);}  }
class C{  protected void startRecoarding(){  coordinates.clear();  enabled=true;}  }
class C{  @Override protected final boolean writeData(ByteBuffer data){synchronized (guard) {    final long begin=System.nanoTime();    if (sendMsgQueue.isEmpty()) {      return false;    }    AionServerPacket packet=sendMsgQueue.removeFirst();    PacketLoggerService.getInstance().logPacketSM(packet.getPacketName());    try {      packet.write(this,data);      return true;    }  finally {      RunnableStatsManager.handleStats(packet.getClass(),"runImpl()",System.nanoTime() - begin);    }  }}  }
class C{  private void assertResult(String expected,String result){  if (diagCollector.getErrorCount() > 0) {    Truth.assertWithMessage("Errors detected while filtering comment").fail(NEWLINE_JOINER.join(diagCollector.getErrors()));  } else {    Truth.assertThat(result).isEqualTo(expected);  }}  }
class C{  public void confirmExitWithMessage(String message,long doublePressInterval){  if (doublePressInterval == -1) {    doublePressInterval=DOUBLE_PRESS_INTERVAL;  }  Toast.makeText(mContextReference.getContext(),message,Toast.LENGTH_SHORT).show();  long pressTime=System.currentTimeMillis();  if ((pressTime - lastPressTime) <= doublePressInterval) {    lastPressTime=0;    ((Activity)mContextReference.getContext()).finish();    Log.e(TAG,"nullify mContextReference");    mContextReference=null;  }  lastPressTime=pressTime;}  }
class C{  private void loadText(InputStream is){  BufferedReader reader;  String line;  unitList=new ArrayList();  unitTypesList=new ArrayList();  if (is == null) {    throw new Error("Can't load cluster db file.");  }  reader=new BufferedReader(new InputStreamReader(is));  try {    line=reader.readLine();    lineCount++;    while (line != null) {      if (!line.startsWith("***")) {        parseAndAdd(line,reader);      }      line=reader.readLine();    }    reader.close();    units=new DatabaseClusterUnit[unitList.size()];    units=(DatabaseClusterUnit[])unitList.toArray(units);    unitList=null;    unitTypes=new UnitType[unitTypesList.size()];    unitTypes=(UnitType[])unitTypesList.toArray(unitTypes);    unitTypesList=null;  } catch (  IOException e) {    throw new Error(e.getMessage() + " at line " + lineCount);  } finally {  }}  }
class C{  public static int copy(InputStream input,OutputStream output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  public static double radian2Angle(double radian){  return radian / Math.PI * 180;}  }
class C{  public ViewsFinder excludingChildsFromFilteredGroupViews(){  this.addChildsFromFilteredGroupViews=false;  return this;}  }
class C{  public BracketingNthOrderBrentSolver(){  this(DEFAULT_ABSOLUTE_ACCURACY,DEFAULT_MAXIMAL_ORDER);}  }
class C{  public void clear(){  super.clear();  short[] keys=_set;  Object[] vals=_values;  byte[] states=_states;  Arrays.fill(_set,0,_set.length,(short)0);  Arrays.fill(_values,0,_values.length,null);  Arrays.fill(_states,0,_states.length,FREE);}  }
class C{  private float[] fetchSpectrum(float[] amplitudes,int groupsNumber){  int approximateGroupLength=amplitudes.length / groupsNumber;  float[] result=new float[groupsNumber];  double tmpSum;  double wholeSum=0;  for (int i=0; i < groupsNumber; i++) {    tmpSum=0;    for (int j=i * approximateGroupLength; j < (i + 1) * approximateGroupLength; j++) {      tmpSum+=amplitudes[j];    }    result[i]=(float)(tmpSum / approximateGroupLength);    wholeSum+=result[i];  }  for (int i=0; i < groupsNumber; i++) {    result[i]/=wholeSum;  }  return result;}  }
class C{  private boolean matches(Composite column,ColumnGroup group,int index){  return column.size() == 2 && column.get(0,AsciiSerializer.get()).equals(group.name()) && column.get(1,IntegerSerializer.get()).equals(index);}  }
class C{  public GoogleUserCredentialProvider(OkHttpClient client,String refreshToken,Time time) throws LoginFailedException, RemoteServerException {  this.time=time;  this.client=client;  this.refreshToken=refreshToken;  refreshToken(refreshToken);  authbuilder=AuthInfo.newBuilder();}  }
class C{  public static void growPolygon(float pts[],int len,float amt){  float[] c=centroid(pts,len);  for (int i=0; i < len; i+=2) {    float vx=pts[i] - c[0];    float vy=pts[i + 1] - c[1];    float norm=(float)Math.sqrt(vx * vx + vy * vy);    pts[i]+=amt * vx / norm;    pts[i + 1]+=amt * vy / norm;  }}  }
class C{  public static byte[] toByteArray(URLConnection urlConn) throws IOException {  InputStream inputStream=urlConn.getInputStream();  try {    return IOUtils.toByteArray(inputStream);  }  finally {    inputStream.close();  }}  }
class C{  public FrameProvider(DoubleDataSource signal,InlineDataProcessor processor,int frameLength,int frameShift,int samplingRate,boolean stopWhenTouchingEnd){  this.signal=signal;  this.processor=processor;  this.frameShift=frameShift;  this.frameLength=frameLength;  this.samplingRate=samplingRate;  this.frame=new double[frameLength];  this.frameStart=-1;  this.nextFrameStart=0;  validSamplesInFrame=0;  this.memory=new double[frameLength];  posInMemory=memory.length;  memoryFilled=false;  this.stopWhenTouchingEnd=stopWhenTouchingEnd;}  }
class C{  public TIntArrayList(){  this(DEFAULT_CAPACITY);}  }
class C{  public SimplexSolver(final double epsilon){  this(epsilon,DEFAULT_ULPS,DEFAULT_CUT_OFF);}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((getId() == null) ? 0 : getId().hashCode());  result=prime * result + ((getUserId() == null) ? 0 : getUserId().hashCode());  result=prime * result + ((getProvider() == null) ? 0 : getProvider().hashCode());  result=prime * result + ((getOpenId() == null) ? 0 : getOpenId().hashCode());  result=prime * result + ((getEnable() == null) ? 0 : getEnable().hashCode());  result=prime * result + ((getRemark() == null) ? 0 : getRemark().hashCode());  result=prime * result + ((getCreateBy() == null) ? 0 : getCreateBy().hashCode());  result=prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());  result=prime * result + ((getUpdateBy() == null) ? 0 : getUpdateBy().hashCode());  result=prime * result + ((getUpdateTime() == null) ? 0 : getUpdateTime().hashCode());  return result;}  }
class C{  public void validate() throws ValidationException {  String mbrolaBase=Utilities.getProperty("mbrola.base",null);  File mbrolaBinary=new File(mbrolaVoice.getMbrolaBinary());  File mbrolaVoiceDB=new File(mbrolaVoice.getDatabase());  if (mbrolaBase == null || mbrolaBase.length() == 0) {    throw new ValidationException("System property \"mbrola.base\" is undefined. " + "You might need to set the MBROLA_DIR environment variable.");  }  if (!mbrolaBinary.exists()) {    throw new ValidationException("No MBROLA binary at: " + mbrolaVoice.getMbrolaBinary());  }  if (!mbrolaVoiceDB.exists()) {    throw new ValidationException("No voice database for " + mbrolaVoice.getName() + " at: "+ mbrolaVoice.getDatabase());  }}  }
class C{  public boolean forEachKey(TObjectProcedure<K> procedure){  return forEach(procedure);}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> propertyOr(String propertyName,ISpacePredicate leftPredicate,ISpacePredicate rightPredicate){  return property(propertyName,or(leftPredicate,rightPredicate));}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot,boolean isNeedResultMsg){  return execCommand(new String[]{command},isRoot,isNeedResultMsg);}  }
class C{  private static void print(String s){  System.out.print(s);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  String result=JOptionPane.showInputDialog(getViewer().getFrame(),"Enter name","Select Node",JOptionPane.QUESTION_MESSAGE);  if (result != null)   execute("select name=" + result + ";");}  }
class C{  public FTPReply sendSiteCommand(String command) throws IllegalStateException, IOException, FTPIllegalReplyException {synchronized (lock) {    if (!connected) {      throw new IllegalStateException("Client not connected");    }    communication.sendFTPCommand("SITE " + command);    touchAutoNoopTimer();    return communication.readFTPReply();  }}  }
class C{  public PolyhedronsSet(final double tolerance){  super(tolerance);}  }
class C{  public Roles(List<Long> roles){  if (access == null && roles != null && roles.size() > 0) {    access=new HashSet<String>();    list=Role.loadAll(roles);    for (    Role r : list) {      List<String> names=r.getAccesses();      if (names != null && names.size() > 0) {        access.addAll(names);      }    }  }}  }
class C{  public String provideNetworkType(){  return "unknown";}  }
class C{  Request toRequest(Object... args) throws IOException {  RequestBuilder requestBuilder=new RequestBuilder(httpMethod,baseUrl,relativeUrl,headers,contentType,hasBody,isFormEncoded,isMultipart);  @SuppressWarnings("unchecked") ParameterHandler<Object>[] handlers=(ParameterHandler<Object>[])parameterHandlers;  int argumentCount=args != null ? args.length : 0;  if (argumentCount != handlers.length) {    throw new IllegalArgumentException("Argument count (" + argumentCount + ") doesn't match expected count ("+ handlers.length+ ")");  }  for (int p=0; p < argumentCount; p++) {    handlers[p].apply(requestBuilder,args[p]);  }  return requestBuilder.build();}  }
class C{  public void writeSortTempFile(Object[][] records) throws CarbonSortKeyAndGroupByException {  ByteArrayOutputStream blockDataArray=null;  DataOutputStream dataOutputStream=null;  int totalSize=0;  int recordSize=0;  try {    recordSize=(measureCount * CarbonCommonConstants.DOUBLE_SIZE_IN_BYTE) + (dimensionCount * CarbonCommonConstants.INT_SIZE_IN_BYTE);    totalSize=records.length * recordSize;    blockDataArray=new ByteArrayOutputStream(totalSize);    dataOutputStream=new DataOutputStream(blockDataArray);    writeDataOutputStream(records,dataOutputStream,measureCount,dimensionCount,noDictionaryCount,complexDimensionCount);    stream.writeInt(records.length);    byte[] byteArray=blockDataArray.toByteArray();    stream.writeInt(byteArray.length);    stream.write(byteArray);  } catch (  IOException e) {    throw new CarbonSortKeyAndGroupByException(e);  } finally {    CarbonUtil.closeStreams(blockDataArray);    CarbonUtil.closeStreams(dataOutputStream);  }}  }
class C{  public static String guessBlastType(String blastText){  if (blastText == null || !blastText.contains("Query"))   return UNKNOWN;  if (blastText.contains("Frame=") || (blastText.contains("Frame =")))   return BLASTX;  if (blastText.contains("Strand=") || blastText.contains("Strand ="))   return BLASTN;  return BLASTP;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DPTransfer_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200512,skilltarget,skillname);}  }
class C{  public MD5InputStream(InputStream in){  super(in);  md5=new MD5();}  }
class C{  @Override public int executeUpdate(String cmd) throws RemoteException {  try {    Transaction tx=rconn.getTransaction();    if (tx.isReadOnly())     throw new UnsupportedOperationException();    int result=VanillaDb.newPlanner().executeUpdate(cmd,tx);    if (rconn.getAutoCommit())     rconn.commit(); else     rconn.endStatement();    return result;  } catch (  RuntimeException e) {    rconn.rollback();    throw e;  }}  }
class C{  @SuppressWarnings("unchecked") private void initGaugeWhitelist(){  Set<String> set=new HashSet<String>();  set.add("server_connections");  set.add("client_connections");  set.add("dnode_client_connections");  set.add("peer_connections");  String s=GaugeWhitelist.get();  if (!s.isEmpty()) {    String[] parts=s.split(",");    if (parts != null && parts.length > 0) {      set.addAll(Arrays.asList(parts));    }  }  gaugeFilter.set(set);}  }
class C{  public boolean isInNet(String host,String pattern,String mask){  host=dnsResolve(host);  if (host == null || host.length() == 0) {    return false;  }  long lhost=parseIpAddressToLong(host);  long lpattern=parseIpAddressToLong(pattern);  long lmask=parseIpAddressToLong(mask);  return (lhost & lmask) == lpattern;}  }
class C{  public RequestParams(Map<String,String> source){  init();  if (source != null) {    for (    Map.Entry<String,String> entry : source.entrySet()) {      put(entry.getKey(),entry.getValue());    }  }}  }
class C{  @Override public void addASModel(ASModel abstractSchema){  fASModels.addElement(abstractSchema);}  }
class C{  public static boolean isChinese(int codePoint){  return codePoint >= ChineseLanguageConstants.CHINESE_START && codePoint <= ChineseLanguageConstants.CHINESE_END;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_REJECTED_FRIEND(String value0){  return new SM_SYSTEM_MESSAGE(1390119,value0);}  }
class C{  public boolean hasFollowUp(){  return followUp != null;}  }
class C{  public final String loadDocumentElement(String sDocID,String sElement){  Node nDoc=XMLDoc.getElementById(sDocID);  if (nDoc == null)   return null;  Element eDoc=(Element)nDoc;  NodeList nDocElements=nDoc.getChildNodes();  Node n=null;  for (int iCnt=0; iCnt < nDocElements.getLength(); iCnt++) {    if (nDocElements.item(iCnt).getNodeName().equalsIgnoreCase(sElement)) {      n=nDocElements.item(iCnt);      break;    }  }  String sRes;  if (n != null)   sRes=n.getTextContent(); else   sRes="";  return sRes;}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (camera == null) {    camera=Camera.open();    if (camera == null) {      throw new IOException();    }    camera.setPreviewDisplay(holder);    if (!initialized) {      initialized=true;      configManager.initFromCameraParameters(camera);    }    configManager.setDesiredCameraParameters(camera);    FlashlightManager.enableFlashlight();  }}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {  try {    Class providerClass=getProviderClass(className,cl,doFallback);    Object instance=providerClass.newInstance();    if (debug) {      dPrint("created new instance of " + providerClass + " using ClassLoader: "+ cl);    }    return instance;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  public static <K,V>Map<K,V> newMap(Map<? extends K,? extends V> map){  return new HashMap<K,V>(map);}  }
class C{  public void removeLookupGroups(String[] groups){  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(JoinStateManager.class.getName(),"removeLookupGroups");  }  ((DiscoveryGroupManagement)dm).removeGroups(groups);  update();  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(JoinStateManager.class.getName(),"removeLookupGroups");  }}  }
class C{  public boolean rollback(){  myLock.writeLock().lock();  try {    return finishTransaction();  }  finally {    myLock.writeLock().unlock();  }}  }
class C{  public boolean canContain(ElementType other){  return (theModel & other.theMemberOf) != 0;}  }
class C{  @Override public void write(byte[] value) throws IOException {  if (isFirstTime) {    init();    isFirstTime=false;  }  checkAndWriteDictionaryChunkToFile();  oneDictionaryChunkList.add(ByteBuffer.wrap(value));  totalRecordCount++;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override protected boolean isSideChannelActive(){  return sideChannelActive;}  }
class C{  public void saveToFileSystem(final String appName,final File propertyFileLocation) throws IOException {  final OutputStream outputStream=new FileOutputStream(propertyFileLocation);  properties.store(outputStream,"=== " + appName + " properties ===");}  }
class C{  public OpenMapRealVector(Double[] values,double epsilon){  virtualSize=values.length;  entries=new OpenIntToDoubleHashMap(0.0);  this.epsilon=epsilon;  for (int key=0; key < values.length; key++) {    double value=values[key].doubleValue();    if (!isDefaultValue(value)) {      entries.put(key,value);    }  }}  }
class C{  public boolean only_array_ref(){  return soot.PhaseOptions.getBoolean(options,"only-array-ref");}  }
class C{  public void showContentView(){  if (null != mBaseLayout) {    mBaseLayout.showContentView();  }}  }
class C{  private void registerError(SAXParseException exception){  StringBuilder errorMessage=new StringBuilder();  errorMessage.append(xml).append(": ");  errorMessage.append("Line ").append(exception.getLineNumber()).append(", ");  errorMessage.append("column ").append(exception.getColumnNumber());  if (qname != null) {    errorMessage.append(", ").append("node <").append(qname).append(">");  }  errorMessage.append(". ").append(exception.getLocalizedMessage());  errorMessages.add(errorMessage.toString());}  }
class C{  public void endOperation(boolean refresh,Set<IResource> refreshResourceList,boolean refreshLocal) throws SVNException {  try {    if (lock.getNestingCount() == 1) {      svnClient.removeNotifyListener(this);      if (operationNotifyListener != null) {        operationNotifyListener.clear();        svnClient.setProgressListener(null);      }      if (refreshResourceList != null) {        FilteringContainerList folderList=new FilteringContainerList(refreshResourceList);        for (        IContainer resource : folderList) {          if (resource.getProject().isOpen()) {            try {              SVNProviderPlugin.getPlugin().getStatusCacheManager().refreshStatus((IContainer)resource,true);            } catch (            Exception e) {              SVNProviderPlugin.log(IStatus.ERROR,e.getMessage(),e);            }          }        }        IResource[] resources=new IResource[refreshResourceList.size()];        refreshResourceList.toArray(resources);        SVNProviderPlugin.broadcastModificationStateChanges(resources);      }      if (refreshLocal) {        FilteringContainerList foldersToRefresh=new FilteringContainerList(localRefreshList);        for (        IContainer folder : foldersToRefresh) {          try {            folder.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());          } catch (          CoreException e) {          }        }      }    }  }  finally {    lock.release();    operationNotifyListener=null;    localRefreshList=new LinkedHashSet<IResource>();  }}  }
class C{  public Boolean isDirectDictionary(){  return isDirectDictionary;}  }
class C{  public QueryAnswers materialise(Set<Substitution> subs){  QueryAnswers insertAnswers=new QueryAnswers();  subs.forEach(null);  Atomic atom=getAtom();  if (atom.isRelation() && (atom.getRoleVarTypeMap().isEmpty() || !((Relation)atom).hasExplicitRoleTypes())) {    String relTypeId=atom.getTypeId();    RelationType relType=(RelationType)atom.getType();    Set<String> vars=atom.getVarNames();    Set<RoleType> roles=Sets.newHashSet(relType.hasRoles());    Set<Map<String,String>> roleMaps=new HashSet<>();    computeRoleCombinations(vars,roles,new HashMap<>(),roleMaps);    removeAtom(atom);    roleMaps.forEach(null);    addAtom(atom);  } else   insertAnswers.addAll(materialiseComplete());  subs.forEach(null);  return insertAnswers;}  }
class C{  public Bitmap decodeFileDescriptor(FileDescriptor fd,BitmapFactory.Options options){  if (options.mCancel) {    return null;  }  Thread thread=Thread.currentThread();  if (!canThreadDecoding(thread)) {    return null;  }  setDecodingOptions(thread,options);  Bitmap b=BitmapFactory.decodeFileDescriptor(fd,null,options);  removeDecodingOptions(thread);  return b;}  }
class C{  public DestroyedFailedException(){  super();}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  @Deprecated public void onSuccess(int statusCode,String content){  onSuccess(content);}  }
class C{  public GroupsSetCallbackSettingsQuery wallReplyNew(Boolean value){  return unsafeParam("wall_reply_new",value);}  }
class C{  public static Class forName(String name,ClassLoader classLoader) throws ClassNotFoundException {  Class clazz=resolvePrimitiveClassName(name);  if (clazz != null) {    return clazz;  }  if (name.endsWith(ARRAY_SUFFIX)) {    String elementClassName=name.substring(0,name.length() - ARRAY_SUFFIX.length());    Class elementClass=ClassUtils.forName(elementClassName,classLoader);    return Array.newInstance(elementClass,0).getClass();  }  return Class.forName(name,true,classLoader);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CANNOT_USE_DOOR_REPAIR_NOT_ENOUGH_FEE(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300728,value0,value1);}  }
class C{  public static java.util.Date nowDate(){  return new java.util.Date();}  }
class C{  private void createStep(){  this.token=Translations.create(getString(R.string.light_and_dark_gate_open));  insertNewIn(token.current);  loop(token);  this.translateMode=true;}  }
class C{  public void removeItemRange(@IntRange(from=0) int start,@IntRange(from=0) int end){  if (start < items.size() && end < items.size()) {    for (int i=start; i < end; i++) {      items.remove(i);    }    notifyDataSetChanged();  }}  }
class C{  public static IVScanResult createIVScanResult(Pokemon pokemon,double estimatedPokemonLevel,int pokemonCP,boolean b){  IVScanResult res=new IVScanResult(pokemon,estimatedPokemonLevel,pokemonCP,b);  scanContainer.addNewScan(res);  return res;}  }
class C{  private static boolean _cover3(String dest,int w,int h,List<String> sources) throws Exception {  int len=sources.size();  if (len == 4) {    BufferedImage src[]=new BufferedImage[len];    for (int i=0; i < len; i++) {      String s=sources.get(i);      if (!EMPTY.equals(s)) {        src[i]=ImageIO.read(new File(sources.get(i)));      }    }    BufferedImage out=new BufferedImage(w,h,BufferedImage.TYPE_3BYTE_BGR);    Graphics2D g=(Graphics2D)out.getGraphics();    g.setColor(Color.WHITE);    g.fillRect(0,0,w,h);    int space=4;    int w1=(w - 1);    int h1=(h - 1) * 2 / 3;    float fd=((float)w1) / h1;    int x=0;    int y=0;    BufferedImage img=src[0];    if (img != null) {      int w2=img.getWidth();      int h2=img.getHeight();      float fs=((float)w2) / h2;      if (fs > fd) {        w2=w1;        h2=(int)(w2 / fs);      } else       if (fs < fd) {        h2=h1;        w2=(int)(h2 * fs);      } else {        w2=w1;        h2=h1;      }      Image tmp=img.getScaledInstance(w2,h2,Image.SCALE_SMOOTH);      g.drawImage(tmp,x + space + (w1 - w2) / 2,y + space + (h1 - h2) / 2,w2 - 2 * space,h2 - 2 * space,null);    }    drawRect(g,x,y,w1,h1);    int size=3;    w1=(w - 1) / size;    h1=(h - 1) / size;    fd=((float)w1) / h1;    for (int i=1; i < len; i++) {      x=(i - 1) * w1;      y=h1 * 2;      img=src[i];      if (img != null) {        int w2=img.getWidth();        int h2=img.getHeight();        float fs=((float)w2) / h2;        if (fs > fd) {          w2=w1;          h2=(int)(w2 / fs);        } else         if (fs < fd) {          h2=h1;          w2=(int)(h2 * fs);        } else {          w2=w1;          h2=h1;        }        Image tmp=img.getScaledInstance(w2,h2,Image.SCALE_SMOOTH);        g.drawImage(tmp,x + space + (w1 - w2) / 2,y + space + (h1 - h2) / 2,w2 - 2 * space,h2 - 2 * space,null);      }      drawRect(g,x,y,w1,h1);    }    ImageIO.write(out,"jpg",new File(dest));    g.dispose();    return true;  } else {    throw new Exception("sources MUST is 4 picutures!" + len);  }}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public void resetShipAfterDateIfBefore(Timestamp newShipAfterDate){  if (newShipAfterDate != null) {    if ((this.shipAfterDate == null) || (!this.shipAfterDate.after(newShipAfterDate))) {      this.shipAfterDate=newShipAfterDate;    }  }}  }
class C{  public ReceiveResultBehaviour(ResultsAgent a,long lInterval){  super(a,lInterval);  myAgent=a;  Interval=lInterval;  if (myAgent.OutFile.length() != 0) {    try {      pOut=new PrintStream(myAgent.OutFile);    } catch (    FileNotFoundException fnfe) {      System.err.println("Cannot output to selected file:\n" + fnfe.getMessage());      System.exit(1);    }  }  if (pOut == null)   pOut=System.err;}  }
class C{  public static Object invokeStaticMethod(Class<?> clazz,String name,Class<?>[] parameterTypes,Object[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {  return invokeMethod(clazz,clazz,name,parameterTypes,args);}  }
class C{  public void removePoint(int rowIndex){  if ((rowIndex < 0) || (rowIndex >= pointList.size())) {    return;  }  pointList.remove(rowIndex);  this.fireTableDataChanged();}  }
class C{  @Override public int hashCode(){  int result=31 + MathUtils.hash(getMax());  result=result * 31 + MathUtils.hash(getMean());  result=result * 31 + MathUtils.hash(getMin());  result=result * 31 + MathUtils.hash(getN());  result=result * 31 + MathUtils.hash(getSum());  result=result * 31 + MathUtils.hash(getVariance());  return result;}  }
class C{  public byte[] reSample(byte[] sourceData,int bitsPerSample,int sourceRate,int targetRate){  int bytePerSample=bitsPerSample / 8;  int numSamples=sourceData.length / bytePerSample;  short[] amplitudes=new short[numSamples];  int pointer=0;  for (int i=0; i < numSamples; i++) {    short amplitude=0;    for (int byteNumber=0; byteNumber < bytePerSample; byteNumber++) {      amplitude|=(short)((sourceData[pointer++] & 0xFF) << (byteNumber * 8));    }    amplitudes[i]=amplitude;  }  LinearInterpolation reSample=new LinearInterpolation();  short[] targetSample=reSample.interpolate(sourceRate,targetRate,amplitudes);  int targetLength=targetSample.length;  byte[] bytes;  if (bytePerSample == 1) {    bytes=new byte[targetLength];    for (int i=0; i < targetLength; i++) {      bytes[i]=(byte)targetSample[i];    }  } else {    bytes=new byte[targetLength * 2];    for (int i=0; i < targetSample.length; i++) {      bytes[i * 2]=(byte)(targetSample[i] & 0xff);      bytes[i * 2 + 1]=(byte)((targetSample[i] >> 8) & 0xff);    }  }  return bytes;}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        int b=in.read();        if (b >= 0) {          b3[i]=(byte)b;          numBinaryBytes++;        } else {          break;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  public static void close(@Nullable Closeable closeable){  if (null == closeable) {    return;  }  try {    Closeables.close(closeable,true);  } catch (  IOException e) {  }}  }
class C{  @Override public void showPopup(Context c,View anchor,String value,int position){  PhotoMenuPopupWindow window=new PhotoMenuPopupWindow(c,anchor);  window.setOnSelectItemListener(this);}  }
class C{  public JsonRequestParams(Object params){  if (params == null)   return;  if (params instanceof Map<?,?>) {    urlParamsWithObjects.putAll((Map<String,Object>)params);  } else {    this.mCriteria=params;  }}  }
class C{  public static JsonNode replaceChild(JsonNode parent,String replacingKey,JsonNode replacingChild){  Map<String,JsonNode> childMap=new HashMap<>();  childMap.put(replacingKey,replacingChild);  return replaceChildren(parent,childMap);}  }
class C{  public P selectFarthest(final Iterable<P> points,final EnclosingBall<S,P> ball){  final P center=ball.getCenter();  P farthest=null;  double dMax=-1.0;  for (  final P point : points) {    final double d=point.distance(center);    if (d > dMax) {      farthest=point;      dMax=d;    }  }  return farthest;}  }
class C{  public WallForce(float x1,float y1,float x2,float y2){  this(DEFAULT_GRAV_CONSTANT,x1,y1,x2,y2);}  }
class C{  public static final double max(double[] a){  double max=Double.NEGATIVE_INFINITY;  for (int i=0; i < a.length; ++i) {    if (a[i] > max)     max=a[i];  }  return max;}  }
class C{  public String printableRefSeq(boolean noFormat) throws IOException {  byte[] refSeq=this.getRefSeq();  if (refSeq == null) {    return "";  } else   if (noFormat) {    return new String(refSeq) + "\n";  } else {    String faSeqStr="";    for (    byte c : refSeq) {      char base=(char)c;      if (base == 'A' || base == 'a') {        faSeqStr+="\033[107;34m" + base + "\033[0m";      } else       if (base == 'C' || base == 'c') {        faSeqStr+="\033[107;31m" + base + "\033[0m";      } else       if (base == 'G' || base == 'g') {        faSeqStr+="\033[107;32m" + base + "\033[0m";      } else       if (base == 'T' || base == 't') {        faSeqStr+="\033[107;33m" + base + "\033[0m";      } else {        faSeqStr+=base;      }    }    return faSeqStr + "\n";  }}  }
class C{  public Graph(boolean directed){  this(new Table(),directed);}  }
class C{  public void tabShown(Tab tab){  for (int i=0; i < mRecentTabs.size(); i++) {    Tab t=mRecentTabs.get(i).get();    if (t == tab) {      mRecentTabs.remove(i);    }  }}  }
class C{  public RoleNotFoundException(){  super();}  }
class C{  public static long capacityRemainingBackward(GenericValue techDataCalendar,Timestamp dateFrom){  GenericValue techDataCalendarWeek=null;  try {    techDataCalendarWeek=techDataCalendar.getRelatedOne("TechDataCalendarWeek",true);  } catch (  GenericEntityException e) {    Debug.logError("Pb reading Calendar Week associated with calendar" + e.getMessage(),module);    return 0;  }  Calendar cDateTrav=Calendar.getInstance();  cDateTrav.setTime(dateFrom);  Map<String,Object> position=dayEndCapacityAvailable(techDataCalendarWeek,cDateTrav.get(Calendar.DAY_OF_WEEK));  int moveDay=((Integer)position.get("moveDay")).intValue();  if (moveDay != 0)   return 0;  Time startTime=(Time)position.get("startTime");  Double capacity=(Double)position.get("capacity");  Timestamp startAvailablePeriod=new Timestamp(UtilDateTime.getDayStart(dateFrom).getTime() + startTime.getTime() + cDateTrav.get(Calendar.ZONE_OFFSET)+ cDateTrav.get(Calendar.DST_OFFSET));  if (dateFrom.before(startAvailablePeriod))   return 0;  Timestamp endAvailablePeriod=new Timestamp(startAvailablePeriod.getTime() + capacity.longValue());  if (dateFrom.after(endAvailablePeriod))   return 0;  return dateFrom.getTime() - startAvailablePeriod.getTime();}  }
class C{  public static byte[] toByteArray(Reader input,Charset encoding) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output,encoding);  return output.toByteArray();}  }
class C{  @Override protected Expression generateExpression(){  if (wktPanel != null) {    return wktPanel.getExpression();  }  return null;}  }
class C{  void addDep(soot.Type s){  deps.add(s);}  }
class C{  public static void writeSwappedDouble(byte[] data,int offset,double value){  writeSwappedLong(data,offset,Double.doubleToLongBits(value));}  }
class C{  private boolean parseNumericInputs(){  try {    pokemonHP=Optional.of(Integer.parseInt(pokemonHPEdit.getText().toString()));    pokemonCP=Optional.of(Integer.parseInt(pokemonCPEdit.getText().toString()));  } catch (  NumberFormatException e) {    return false;  }  try {    pokemonCandy=Optional.of(Integer.parseInt(pokemonCandyEdit.getText().toString()));  } catch (  NumberFormatException e) {    pokemonCandy=Optional.absent();  }  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSkillCastingTime_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200332,skillname);}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,Charset encoding) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  Charset cs=Charsets.toCharset(encoding);  for (  Object line : lines) {    if (line != null) {      output.write(line.toString().getBytes(cs));    }    output.write(lineEnding.getBytes(cs));  }}  }
class C{  public Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    yychar+=zzMarkedPosL - zzStartRead;    boolean zzR=false;    int zzCh;    int zzCharCount;    for (zzCurrentPosL=zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL+=zzCharCount) {      zzCh=Character.codePointAt(zzBufferL,zzCurrentPosL,zzMarkedPosL);      zzCharCount=Character.charCount(zzCh);switch (zzCh) {case '\u000B':case '\u000C':case '\u0085':case '\u2028':case '\u2029':        yyline++;      yycolumn=0;    zzR=false;  break;case '\r':yyline++;yycolumn=0;zzR=true;break;case '\n':if (zzR) zzR=false; else {yyline++;yycolumn=0;}break;default :zzR=false;yycolumn+=zzCharCount;}}if (zzR) {boolean zzPeek;if (zzMarkedPosL < zzEndReadL) zzPeek=zzBufferL[zzMarkedPosL] == '\n'; else if (zzAtEOF) zzPeek=false; else {boolean eof=zzRefill();zzEndReadL=zzEndRead;zzMarkedPosL=zzMarkedPos;zzBufferL=zzBuffer;if (eof) zzPeek=false; else zzPeek=zzBufferL[zzMarkedPosL] == '\n';}if (zzPeek) yyline--;}zzAction=-1;zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;zzState=ZZ_LEXSTATE[zzLexicalState];int zzAttributes=zzAttrL[zzState];if ((zzAttributes & 1) == 1) {zzAction=zzState;}zzForAction: {while (true) {if (zzCurrentPosL < zzEndReadL) {zzInput=Character.codePointAt(zzBufferL,zzCurrentPosL,zzEndReadL);zzCurrentPosL+=Character.charCount(zzInput);} else if (zzAtEOF) {zzInput=YYEOF;break zzForAction;} else {zzCurrentPos=zzCurrentPosL;zzMarkedPos=zzMarkedPosL;boolean eof=zzRefill();zzCurrentPosL=zzCurrentPos;zzMarkedPosL=zzMarkedPos;zzBufferL=zzBuffer;zzEndReadL=zzEndRead;if (eof) {zzInput=YYEOF;break zzForAction;} else {zzInput=Character.codePointAt(zzBufferL,zzCurrentPosL,zzEndReadL);zzCurrentPosL+=Character.charCount(zzInput);}}int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];if (zzNext == -1) break zzForAction;zzState=zzNext;zzAttributes=zzAttrL[zzState];if ((zzAttributes & 1) == 1) {zzAction=zzState;zzMarkedPosL=zzCurrentPosL;if ((zzAttributes & 8) == 8) break zzForAction;}}}zzMarkedPos=zzMarkedPosL;if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case YYINITIAL:{return newToken(EOF);}case 1238:break;case PARAM_LIST_OR_ID:{yybegin(YYINITIAL);return newToken(PARAM_LIST_OR_ID_END);}case 1239:break;case PARAM_LIST:{yybegin(YYINITIAL);return newToken(PARAM_LIST_END);}case 1240:break;case STRING:{return invalidStringOrChar("Unterminated string literal");}case 1241:break;case CHAR:{return invalidStringOrChar("Unterminated character literal");}case 1242:break;default :return null;}} else {switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 1:{return invalidToken("Invalid text");}case 140:break;case 2:{return newToken(POSITIVE_INTEGER_LITERAL);}case 141:break;case 3:{return newToken(SIMPLE_NAME);}case 142:break;case 4:{return invalidToken("Invalid directive");}case 143:break;case 5:{return newToken(PRIMITIVE_TYPE);}case 144:break;case 6:{return newToken(WHITE_SPACE,true);}case 145:break;case 7:{beginStringOrChar(STRING);sb.append('"');}case 146:break;case 8:{beginStringOrChar(CHAR);sb.append('\'');}case 147:break;case 9:{return newToken(LINE_COMMENT,true);}case 148:break;case 10:{return newToken(VOID_TYPE);}case 149:break;case 11:{return newToken(EQUAL);}case 150:break;case 12:{return newToken(COLON);}case 151:break;case 13:{return newToken(COMMA);}case 152:break;case 14:{return newToken(OPEN_BRACE);}case 153:break;case 15:{return newToken(CLOSE_BRACE);}case 154:break;case 16:{return newToken(OPEN_PAREN);}case 155:break;case 17:{return newToken(CLOSE_PAREN);}case 156:break;case 18:{yypushback(1);yybegin(YYINITIAL);return newToken(PARAM_LIST_OR_ID_END);}case 157:break;case 19:{yypushback(1);yybegin(YYINITIAL);return newToken(PARAM_LIST_END);}case 158:break;case 20:{sb.append(yytext());}case 159:break;case 21:{sb.append('"');return endStringOrChar(STRING_LITERAL);}case 160:break;case 22:{return invalidStringOrChar("Unterminated string literal");}case 161:break;case 23:{sb.append('\'');if (sb.length() == 2) {return invalidStringOrChar("Empty character literal");} else if (sb.length() > 3) {return invalidStringOrChar("Character literal with multiple chars");}return endStringOrChar(CHAR_LITERAL);}case 162:break;case 24:{return invalidStringOrChar("Unterminated character literal");}case 163:break;case 25:{return newToken(FLOAT_LITERAL_OR_ID);}case 164:break;case 26:{return newToken(BYTE_LITERAL);}case 165:break;case 27:{return newToken(DOUBLE_LITERAL);}case 166:break;case 28:{return newToken(LONG_LITERAL);}case 167:break;case 29:{return newToken(SHORT_LITERAL);}case 168:break;case 30:{return newToken(DOUBLE_LITERAL_OR_ID);}case 169:break;case 31:{return newToken(NEGATIVE_INTEGER_LITERAL);}case 170:break;case 32:{return newToken(ARROW);}case 171:break;case 33:{return newToken(DOTDOT);}case 172:break;case 34:{yypushback(yylength());yybegin(PARAM_LIST_OR_ID);return newToken(PARAM_LIST_OR_ID_START);}case 173:break;case 35:{return newToken(ARRAY_DESCRIPTOR);}case 174:break;case 36:{return newToken(REGISTER);}case 175:break;case 37:{sb.append(yytext());setStringOrCharError("Invalid escape sequence " + yytext());}case 176:break;case 38:{sb.append('\b');}case 177:break;case 39:{sb.append('\f');}case 178:break;case 40:{sb.append(yytext());setStringOrCharError("Invalid \\u sequence. \\u must be followed by 4 hex digits");}case 179:break;case 41:{sb.append('\r');}case 180:break;case 42:{sb.append('\n');}case 181:break;case 43:{sb.append('\t');}case 182:break;case 44:{sb.append('"');}case 183:break;case 45:{sb.append('\'');}case 184:break;case 46:{sb.append('\\');}case 185:break;case 47:{sb.append(yytext());setStringOrCharError("Invalid \\u sequence. \\u must be followed by exactly 4 hex digits");}case 186:break;case 48:{return newToken(FLOAT_LITERAL);}case 187:break;case 49:{yypushback(yylength());yybegin(PARAM_LIST);return newToken(PARAM_LIST_START);}case 188:break;case 50:{return newToken(CLASS_DESCRIPTOR);}case 189:break;case 51:{return newToken(INSTRUCTION_FORMAT10x);}case 190:break;case 52:{return newToken(MEMBER_NAME);}case 191:break;case 53:{return newToken(INSTRUCTION_FORMAT22c_FIELD);}case 192:break;case 54:{return newToken(INSTRUCTION_FORMAT23x);}case 193:break;case 55:{return newToken(INSTRUCTION_FORMAT21c_FIELD);}case 194:break;case 56:{return newToken(ACCESS_SPEC);}case 195:break;case 57:{return newToken(INSTRUCTION_FORMAT12x_OR_ID);}case 196:break;case 58:{return newToken(NULL_LITERAL);}case 197:break;case 59:{return newToken(BOOL_LITERAL);}case 198:break;case 60:{return newToken(INSTRUCTION_FORMAT10t);}case 199:break;case 61:{return newToken(ANNOTATION_VISIBILITY);}case 200:break;case 62:{return newToken(INSTRUCTION_FORMAT22t);}case 201:break;case 63:{return newToken(LINE_DIRECTIVE);}case 202:break;case 64:{return newToken(ENUM_DIRECTIVE);}case 203:break;case 65:{return newToken(INSTRUCTION_FORMAT31i_OR_ID);}case 204:break;case 66:{return newToken(INSTRUCTION_FORMAT11x);}case 205:break;case 67:{return newToken(INSTRUCTION_FORMAT21t);}case 206:break;case 68:{return newToken(FIELD_DIRECTIVE);}case 207:break;case 69:{return newToken(CLASS_DIRECTIVE);}case 208:break;case 70:{return newToken(CATCH_DIRECTIVE);}case 209:break;case 71:{return newToken(LOCAL_DIRECTIVE);}case 210:break;case 72:{return newToken(SUPER_DIRECTIVE);}case 211:break;case 73:{return newToken(PARAMETER_DIRECTIVE);}case 212:break;case 74:{sb.append((char)Integer.parseInt(yytext().substring(2,6),16));}case 213:break;case 75:{return newToken(LOCALS_DIRECTIVE);}case 214:break;case 76:{return newToken(SOURCE_DIRECTIVE);}case 215:break;case 77:{return newToken(METHOD_DIRECTIVE);}case 216:break;case 78:{return newToken(INSTRUCTION_FORMAT11n);}case 217:break;case 79:{return newToken(INSTRUCTION_FORMAT32x);}case 218:break;case 80:{return newToken(INSTRUCTION_FORMAT20t);}case 219:break;case 81:{return newToken(INSTRUCTION_FORMAT30t);}case 220:break;case 82:{return newToken(INSTRUCTION_FORMAT21s);}case 221:break;case 83:{return newToken(INSTRUCTION_FORMAT22s_OR_ID);}case 222:break;case 84:{return newToken(VERIFICATION_ERROR_TYPE);}case 223:break;case 85:{return newToken(FIELD_OFFSET);}case 224:break;case 86:{return newToken(CATCHALL_DIRECTIVE);}case 225:break;case 87:{return newToken(PROLOGUE_DIRECTIVE);}case 226:break;case 88:{return newToken(EPILOGUE_DIRECTIVE);}case 227:break;case 89:{return newToken(INSTRUCTION_FORMAT22c_TYPE);}case 228:break;case 90:{return newToken(INSTRUCTION_FORMAT22x);}case 229:break;case 91:{return newToken(INSTRUCTION_FORMAT22cs_FIELD);}case 230:break;case 92:{return newToken(INLINE_INDEX);}case 231:break;case 93:{return newToken(END_FIELD_DIRECTIVE);}case 232:break;case 94:{return newToken(END_LOCAL_DIRECTIVE);}case 233:break;case 95:{return newToken(END_PARAMETER_DIRECTIVE);}case 234:break;case 96:{return newToken(REGISTERS_DIRECTIVE);}case 235:break;case 97:{return newToken(INSTRUCTION_FORMAT51l);}case 236:break;case 98:{return newToken(INSTRUCTION_FORMAT21c_TYPE);}case 237:break;case 99:{return newToken(VTABLE_INDEX);}case 238:break;case 100:{return newToken(IMPLEMENTS_DIRECTIVE);}case 239:break;case 101:{return newToken(ARRAY_DATA_DIRECTIVE);}case 240:break;case 102:{return newToken(ANNOTATION_DIRECTIVE);}case 241:break;case 103:{return newToken(END_METHOD_DIRECTIVE);}case 242:break;case 104:{return newToken(INSTRUCTION_FORMAT22b);}case 243:break;case 105:{return newToken(INSTRUCTION_FORMAT35c_METHOD);}case 244:break;case 106:{return newToken(INSTRUCTION_FORMAT21c_STRING);}case 245:break;case 107:{return newToken(INSTRUCTION_FORMAT21ih);}case 246:break;case 108:{return newToken(INSTRUCTION_FORMAT22s);}case 247:break;case 109:{return newToken(INSTRUCTION_FORMAT12x);}case 248:break;case 110:{return newToken(INSTRUCTION_FORMAT22c_FIELD_ODEX);}case 249:break;case 111:{return newToken(INSTRUCTION_FORMAT25x);}case 250:break;case 112:{return newToken(INSTRUCTION_FORMAT21c_METHOD);}case 251:break;case 113:{return newToken(INSTRUCTION_FORMAT31i);}case 252:break;case 114:{return newToken(INSTRUCTION_FORMAT31t);}case 253:break;case 115:{return newToken(INSTRUCTION_FORMAT21c_FIELD_ODEX);}case 254:break;case 116:{return newToken(SUBANNOTATION_DIRECTIVE);}case 255:break;case 117:{return newToken(SPARSE_SWITCH_DIRECTIVE);}case 256:break;case 118:{return newToken(PACKED_SWITCH_DIRECTIVE);}case 257:break;case 119:{return newToken(RESTART_LOCAL_DIRECTIVE);}case 258:break;case 120:{return newToken(INSTRUCTION_FORMAT35mi_METHOD);}case 259:break;case 121:{return newToken(END_ARRAY_DATA_DIRECTIVE);}case 260:break;case 122:{return newToken(END_ANNOTATION_DIRECTIVE);}case 261:break;case 123:{return newToken(INSTRUCTION_FORMAT35c_TYPE);}case 262:break;case 124:{return newToken(INSTRUCTION_FORMAT21c_LAMBDA);}case 263:break;case 125:{return newToken(INSTRUCTION_FORMAT21lh);}case 264:break;case 126:{return newToken(INSTRUCTION_FORMAT22c_STRING);}case 265:break;case 127:{return newToken(INSTRUCTION_FORMAT35ms_METHOD);}case 266:break;case 128:{return newToken(INSTRUCTION_FORMAT3rc_METHOD);}case 267:break;case 129:{return newToken(END_SUBANNOTATION_DIRECTIVE);}case 268:break;case 130:{return newToken(END_SPARSE_SWITCH_DIRECTIVE);}case 269:break;case 131:{return newToken(END_PACKED_SWITCH_DIRECTIVE);}case 270:break;case 132:{return newToken(INSTRUCTION_FORMAT31c);}case 271:break;case 133:{return newToken(INSTRUCTION_FORMAT35c_METHOD_ODEX);}case 272:break;case 134:{return newToken(INSTRUCTION_FORMAT10x_ODEX);}case 273:break;case 135:{return newToken(INSTRUCTION_FORMAT3rmi_METHOD);}case 274:break;case 136:{return newToken(INSTRUCTION_FORMAT3rc_TYPE);}case 275:break;case 137:{return newToken(INSTRUCTION_FORMAT3rms_METHOD);}case 276:break;case 138:{return newToken(INSTRUCTION_FORMAT3rc_METHOD_ODEX);}case 277:break;case 139:{return newToken(INSTRUCTION_FORMAT20bc);}case 278:break;default :zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  private <N>void formatNodeText(Body body,DotGraph canvas,DotNamer<N> namer){  LabeledUnitPrinter printer=null;  if (body != null) {    printer=new BriefUnitPrinter(body);    printer.noIndent();  }  for (Iterator<N> nodesIt=namer.keySet().iterator(); nodesIt.hasNext(); ) {    N node=nodesIt.next();    DotGraphNode dotnode=canvas.getNode(namer.getName(node));    String nodeLabel=null;    if (node instanceof DominatorNode) {      node=((DominatorNode<N>)node).getGode();    }    if (printer == null) {      nodeLabel=node.toString();    } else {      if (node instanceof Unit) {        ((Unit)node).toString(printer);        String targetLabel=printer.labels().get(node);        if (targetLabel == null) {          nodeLabel=printer.toString();        } else {          nodeLabel=targetLabel + ": " + printer.toString();        }      } else       if (node instanceof Block) {        Iterator<Unit> units=((Block)node).iterator();        StringBuffer buffer=new StringBuffer();        while (units.hasNext()) {          Unit unit=units.next();          String targetLabel=(String)printer.labels().get(unit);          if (targetLabel != null) {            buffer.append(targetLabel).append(":\\n");          }          unit.toString(printer);          buffer.append(printer.toString()).append("\\l");        }        nodeLabel=buffer.toString();      } else {        nodeLabel=node.toString();      }    }    dotnode.setLabel(nodeLabel);  }}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter w=new StringWriter();synchronized (w.getBuffer()) {    return this.write(w,indentFactor,0).toString();  }}  }
class C{  public synchronized void unpause(){  _paused=false;  while (!_writeQueue.isEmpty()) {    _writeQueue.remove().run();  }}  }
class C{  public void testCycleDateStartTimerEvent() throws Exception {  Clock previousClock=processEngineConfiguration.getClock();  Clock testClock=new DefaultClockImpl();  processEngineConfiguration.setClock(testClock);  Calendar calendar=Calendar.getInstance();  calendar.set(2025,Calendar.DECEMBER,10,0,0,0);  testClock.setCurrentTime(calendar.getTime());  repositoryService.createDeployment().addClasspathResource("org/activiti/engine/test/bpmn/event/timer/StartTimerEventRepeatWithEndExpressionTest.testCycleDateStartTimerEvent.bpmn20.xml").deploy();  assertEquals(1,repositoryService.createProcessDefinitionQuery().count());  List<Job> jobs=managementService.createTimerJobQuery().list();  assertEquals(1,jobs.size());  Calendar dueDateCalendar=Calendar.getInstance();  dueDateCalendar.set(2025,Calendar.DECEMBER,11,0,0,0);  assertEquals(true,Math.abs(dueDateCalendar.getTime().getTime() - jobs.get(0).getDuedate().getTime()) < 2000);  List<ProcessInstance> processInstances=runtimeService.createProcessInstanceQuery().list();  assertEquals(0,processInstances.size());  List<Task> tasks=taskService.createTaskQuery().list();  assertEquals(0,tasks.size());  moveByMinutes(60 * 24);  waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(2000L,200);  assertEquals(1,managementService.createTimerJobQuery().count());  processInstances=runtimeService.createProcessInstanceQuery().list();  assertEquals(1,processInstances.size());  tasks=taskService.createTaskQuery().list();  assertEquals(1,tasks.size());  jobs=managementService.createTimerJobQuery().list();  assertEquals(1,jobs.size());  dueDateCalendar=Calendar.getInstance();  dueDateCalendar.set(2025,Calendar.DECEMBER,12,0,0,0);  assertEquals(true,Math.abs(dueDateCalendar.getTime().getTime() - jobs.get(0).getDuedate().getTime()) < 2000);  moveByMinutes(60 * 24);  waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(2000,200);  processInstances=runtimeService.createProcessInstanceQuery().list();  assertEquals(2,processInstances.size());  jobs=managementService.createTimerJobQuery().list();  assertEquals(0,jobs.size());  jobs=managementService.createJobQuery().list();  assertEquals(0,jobs.size());  tasks=taskService.createTaskQuery().list();  assertEquals(2,tasks.size());  int timerFiredCount=0;  List<ActivitiEvent> eventsReceived=listener.getEventsReceived();  for (  ActivitiEvent eventReceived : eventsReceived) {    if (ActivitiEventType.TIMER_FIRED.equals(eventReceived.getType())) {      timerFiredCount++;    }  }  int eventCreatedCount=0;  for (  ActivitiEvent eventReceived : eventsReceived) {    if (ActivitiEventType.ENTITY_CREATED.equals(eventReceived.getType())) {      eventCreatedCount++;    }  }  int eventDeletedCount=0;  for (  ActivitiEvent eventReceived : eventsReceived) {    if (ActivitiEventType.ENTITY_DELETED.equals(eventReceived.getType())) {      eventDeletedCount++;    }  }  assertEquals(2,timerFiredCount);  assertEquals(4,eventCreatedCount);  assertEquals(4,eventDeletedCount);  for (  ProcessInstance processInstance : processInstances) {    tasks=taskService.createTaskQuery().processInstanceId(processInstance.getProcessInstanceId()).list();    Task task=tasks.get(0);    assertEquals("Task A",task.getName());    assertEquals(1,tasks.size());    taskService.complete(task.getId());  }  processInstances=runtimeService.createProcessInstanceQuery().list();  assertEquals(0,processInstances.size());  jobs=managementService.createTimerJobQuery().list();  assertEquals(0,jobs.size());  jobs=managementService.createJobQuery().list();  assertEquals(0,jobs.size());  tasks=taskService.createTaskQuery().list();  assertEquals(0,tasks.size());  listener.clearEventsReceived();  processEngineConfiguration.setClock(previousClock);  repositoryService.deleteDeployment(repositoryService.createDeploymentQuery().singleResult().getId(),true);}  }
class C{  public UsersSearchQuery birthDay(Integer value){  return unsafeParam("birth_day",value);}  }
class C{  private void resize(int newCapacity){  Entry[] oldTable=getTable();  int oldCapacity=oldTable.length;  if (oldCapacity == MAXIMUM_CAPACITY) {    threshold=Integer.MAX_VALUE;    return;  }  Entry[] newTable=new Entry[newCapacity];  transfer(oldTable,newTable);  table=newTable;  if (size >= threshold / 2) {    threshold=(int)(newCapacity * loadFactor);  } else {    expungeStaleEntries();    transfer(newTable,oldTable);    table=oldTable;  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public CompilationUnit compilationUnit(){  ASTNode$State state=state();  CompilationUnit compilationUnit_value=getParent().Define_CompilationUnit_compilationUnit(this,null);  return compilationUnit_value;}  }
class C{  @Override protected void onReset(){  super.onReset();  onStopLoading();  if (mData != null) {    onReleaseResources(mData);    mData=null;  }}  }
class C{  public static FieldSelector of(Field field){  return new FieldSelector(ImmutableList.of(field));}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public String[] upload_file(String group_name,String master_filename,String prefix_name,long file_size,UploadCallback callback,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_SLAVE_FILE,group_name,master_filename,prefix_name,file_ext_name,file_size,callback,meta_list);}  }
class C{  public final ProgressEvent updateProgress(double dNewProgress){  Progress=dNewProgress;  return this;}  }
class C{  public MonsterWeaknessCursor queryWeaknessFromMonster(long id){  QueryHelper qh=new QueryHelper();  qh.Distinct=true;  qh.Table=S.TABLE_WEAKNESS;  qh.Columns=null;  qh.Selection=S.COLUMN_WEAKNESS_MONSTER_ID + " = " + id;  qh.SelectionArgs=null;  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=null;  qh.Limit=null;  return new MonsterWeaknessCursor(wrapHelper(qh));}  }
class C{  public static void rgb565ToColor(Color color,int value){  color.r=((value & 0x0000F800) >>> 11) / 31f;  color.g=((value & 0x000007E0) >>> 5) / 63f;  color.b=((value & 0x0000001F) >>> 0) / 31f;}  }
class C{  @Override public Throwable fillInStackTrace(){  return this;}  }
class C{  public FontAnimator(String group){  super(group);}  }
class C{  @Override public List<CentroidCluster<T>> cluster(final Collection<T> dataPoints) throws MathIllegalArgumentException {  MathUtils.checkNotNull(dataPoints);  final int size=dataPoints.size();  if (size < k) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED,size,k);  }  points=Collections.unmodifiableList(new ArrayList<T>(dataPoints));  clusters=new ArrayList<CentroidCluster<T>>();  membershipMatrix=new double[size][k];  final double[][] oldMatrix=new double[size][k];  if (size == 0) {    return clusters;  }  initializeMembershipMatrix();  final int pointDimension=points.get(0).getPoint().length;  for (int i=0; i < k; i++) {    clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));  }  int iteration=0;  final int max=(maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;  double difference=0.0;  do {    saveMembershipMatrix(oldMatrix);    updateClusterCenters();    updateMembershipMatrix();    difference=calculateMaxMembershipChange(oldMatrix);  } while (difference > epsilon && ++iteration < max);  return clusters;}  }
class C{  @Override public boolean isSet(DatatypeConstants.Field field){  if (field == null) {    String methodName="mf.javax.xml.datatype.Duration" + "#isSet(DatatypeConstants.Field field)";    throw new NullPointerException(DatatypeMessageFormatter.formatMessage(null,"FieldCannotBeNull",new Object[]{methodName}));  }  if (field == DatatypeConstants.YEARS) {    return years != null;  }  if (field == DatatypeConstants.MONTHS) {    return months != null;  }  if (field == DatatypeConstants.DAYS) {    return days != null;  }  if (field == DatatypeConstants.HOURS) {    return hours != null;  }  if (field == DatatypeConstants.MINUTES) {    return minutes != null;  }  if (field == DatatypeConstants.SECONDS) {    return seconds != null;  }  String methodName="mf.javax.xml.datatype.Duration" + "#isSet(DatatypeConstants.Field field)";  throw new IllegalArgumentException(DatatypeMessageFormatter.formatMessage(null,"UnknownField",new Object[]{methodName,field.toString()}));}  }
class C{  public SimplifiedIntervalList(Collection<Interval> intervals){  super(simplifyIntervals(intervals));}  }
class C{  public LongAdder(){}  }
class C{  public GigaSpaceConfigurer(SpaceConfigurer configurer){  gigaSpaceFactoryBean=new GigaSpaceFactoryBean();  gigaSpaceFactoryBean.setSpace(configurer.space());}  }
class C{  public double remove(final int key){  final int hash=hashOf(key);  int index=hash & mask;  if (containsKey(key,index)) {    return doRemove(index);  }  if (states[index] == FREE) {    return missingEntries;  }  int j=index;  for (int perturb=perturb(hash); states[index] != FREE; perturb>>=PERTURB_SHIFT) {    j=probe(perturb,j);    index=j & mask;    if (containsKey(key,index)) {      return doRemove(index);    }  }  return missingEntries;}  }
class C{  private boolean canStopTrackingJob(JobStatus job){  return (!job.hasTimingDelayConstraint() || job.timeDelayConstraintSatisfied.get()) && (!job.hasDeadlineConstraint() || job.deadlineConstraintSatisfied.get());}  }
class C{  private static void debugPrintln(String msg){  if (DEBUG) {    System.err.println("XERCES: " + msg);  }}  }
class C{  public String provideNetworkType(){  return "unknown";}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Blind_END_A_TO_SELF(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200748,skilltarget);}  }
class C{  @Override public boolean isEnabled(){  if ((attributeSelectionPanel != null) && !isValueOnly()) {    return attributeSelectionPanel.isEnabled();  } else {    if (slider != null) {      return slider.isEnabled();    }  }  return false;}  }
class C{  public static String formatCreateTime(Date createAt){  String strTime="";  long beginOfToday=(new Date(Calendar.getInstance().get(Calendar.YEAR) - 1900,Calendar.getInstance().get(Calendar.MONTH),Calendar.getInstance().get(Calendar.DAY_OF_MONTH),0,0,0)).getTime();  long beginOfThisYear=(new Date(Calendar.getInstance().get(Calendar.YEAR) - 1900,0,0,0,0,0)).getTime();  if (createAt != null) {    long interval=System.currentTimeMillis() - createAt.getTime();    if (interval <= MIN) {      strTime=MainApp.CONTEXT.getString(R.string.just_now);    } else     if (createAt.getTime() >= beginOfToday) {      strTime=DateUtil.formatDate(createAt,MainApp.CONTEXT.getString(R.string.date_format));    } else     if (createAt.getTime() < beginOfToday && createAt.getTime() >= beginOfThisYear) {      strTime=DateUtil.formatDate(createAt,MainApp.CONTEXT.getString(R.string.date_format_with_date));    } else {      strTime=DateUtil.formatDate(createAt,MainApp.CONTEXT.getString(R.string.date_format_with_year));    }  }  return strTime;}  }
class C{  public OutOfRangeException(Number wrong,Number lo,Number hi){  this(LocalizedFormats.OUT_OF_RANGE_SIMPLE,wrong,lo,hi);}  }
class C{  public FriendsGetRequestsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  @Nullable private static PsiFile findFileToOpen(@NotNull List<PsiFile> files){  PsiFile bestFile=null;  FolderConfiguration bestConfig=null;  for (  PsiFile file : files) {    PsiDirectory qualifiedDirectory=file.getParent();    assert qualifiedDirectory != null : "Resource file's parent directory cannot be null";    FolderConfiguration config=FolderConfiguration.getConfigForFolder(qualifiedDirectory.getName());    if (bestConfig == null || config == null || config.compareTo(bestConfig) < 0) {      bestConfig=config;      bestFile=file;    }  }  return bestFile;}  }
class C{  @SuppressLint("SetTextI18n") @Override public void drawUserInfo(User u){  if (!TextUtils.isEmpty(u.location)) {    locationTxt.setText(u.location);  } else {    locationTxt.setText("Unknown");  }  if (!TextUtils.isEmpty(u.bio)) {    bioTxt.setText(u.bio);  } else {    bioTxt.setVisibility(GONE);  }  List<String> titleList=new ArrayList<>();  titleList.add(u.total_photos + " " + getResources().getStringArray(R.array.user_tabs)[0]);  titleList.add(u.total_collections + " " + getResources().getStringArray(R.array.user_tabs)[1]);  titleList.add(u.total_likes + " " + getResources().getStringArray(R.array.user_tabs)[2]);  adapter.titleList=titleList;  adapter.notifyDataSetChanged();}  }
class C{  private void updateLocationPreferenceForXGeo(Preference preference){  ListPreference listPreference=(ListPreference)preference;  Resources res=getResources();  listPreference.setEntries(new String[]{res.getString(R.string.website_settings_permissions_allow_dse),res.getString(ContentSettingsResources.getSiteSummary(ContentSetting.BLOCK))});  listPreference.setEntryValues(new String[]{ContentSetting.DEFAULT.toString(),ContentSetting.BLOCK.toString()});  listPreference.setValueIndex(0);}  }
class C{  static void verify(Class c){  if (c == null) {    throw new NullPointerException("elements cannot be null");  }  if (c.isArray() || c.isPrimitive() || (Modifier.isFinal(c.getModifiers()) && !Principal.class.isAssignableFrom(c))) {    throw new IllegalArgumentException("invalid class");  }}  }
class C{  public static void writeVLong(DataOutput stream,long i) throws IOException {  if (i >= -112 && i <= 127) {    stream.writeByte((byte)i);    return;  }  int len=-112;  if (i < 0) {    i^=-1L;    len=-120;  }  long tmp=i;  while (tmp != 0) {    tmp=tmp >> 8;    len--;  }  stream.writeByte((byte)len);  len=(len < -120) ? -(len + 120) : -(len + 112);  for (int idx=len; idx != 0; idx--) {    int shiftbits=(idx - 1) * 8;    long mask=0xFFL << shiftbits;    stream.writeByte((byte)((i & mask) >> shiftbits));  }}  }
class C{  public void clear(){  setAccessToken(null);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public PrimitiveCompilationUnit fullCopy(){  PrimitiveCompilationUnit tree=(PrimitiveCompilationUnit)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public void freeSLHolder(IStoredListIterator<T> slh){  if (slh != null) {    SegmentedListIterator<T> si=(SegmentedListIterator<T>)slh;    slh.release();  }}  }
class C{  public boolean isMp4(){  return isOptionEnabled(UrlFilterRuleOption.MP4);}  }
class C{  protected void showIndeterminate(@StringRes final int resId){  dismissProgress();  progress=new MaterialDialog.Builder(context).content(resId).progress(true,0).build();  progress.show();}  }
class C{  public V putIfAbsent(long key,V value){  int index=insertionIndex(key);  if (index < 0)   return _values[-index - 1];  return doPut(key,value,index);}  }
class C{  public boolean isCaseSensitive(){  return sensitive;}  }
class C{  public void addCommonJARs(URL[] jars){  if (jars == null)   return;  for (int i=0; i < jars.length; i++) {    if (!hasURL(jars[i]))     addURL(jars[i]);  }}  }
class C{  public Viterbi(List<Target> targets,UnitDatabase database,float wTargetCosts,float wSCosts,int beamSize){  this.database=database;  this.targetCostFunction=database.getTargetCostFunction();  this.joinCostFunction=database.getJoinCostFunction();  this.sCostFunction=database.getSCostFunction();  this.wTargetCosts=wTargetCosts;  this.wSCosts=wSCosts;  wJoinCosts=1 - (wTargetCosts + wSCosts);  this.beamSize=beamSize;  this.cumulJoinCosts=0;  this.nJoinCosts=0;  this.cumulTargetCosts=0;  this.nTargetCosts=0;  ViterbiPoint last=null;  for (  Target target : targets) {    ViterbiPoint nextPoint=new ViterbiPoint(target);    if (last != null) {      last.setNext(nextPoint);    } else {      firstPoint=nextPoint;      firstPoint.getPaths().add(new ViterbiPath(null,null,0));    }    last=nextPoint;  }  lastPoint=new ViterbiPoint(null);  last.setNext(lastPoint);  if (beamSize == 0) {    throw new IllegalStateException("General beam search not implemented");  }}  }
class C{  public static boolean isError(Map<String,? extends Object> results){  if (results == null || results.get(ModelService.RESPONSE_MESSAGE) == null) {    return false;  }  return ModelService.RESPOND_ERROR.equals(results.get(ModelService.RESPONSE_MESSAGE));}  }
class C{  public VisiblePredicate(){  super(VisualItem.VISIBLE);}  }
class C{  public Shape star(float x,float y,float height){  float s=(float)(height / (2 * Math.sin(Math.toRadians(54))));  float shortSide=(float)(height / (2 * Math.tan(Math.toRadians(54))));  float mediumSide=(float)(s * Math.sin(Math.toRadians(18)));  float longSide=(float)(s * Math.cos(Math.toRadians(18)));  float innerLongSide=(float)(s / (2 * Math.cos(Math.toRadians(36))));  float innerShortSide=innerLongSide * (float)Math.sin(Math.toRadians(36));  float innerMediumSide=innerLongSide * (float)Math.cos(Math.toRadians(36));  m_path.reset();  m_path.moveTo(x,y + shortSide);  m_path.lineTo((x + innerLongSide),(y + shortSide));  m_path.lineTo((x + height / 2),y);  m_path.lineTo((x + height - innerLongSide),(y + shortSide));  m_path.lineTo((x + height),(y + shortSide));  m_path.lineTo((x + height - innerMediumSide),(y + shortSide + innerShortSide));  m_path.lineTo((x + height - mediumSide),(y + height));  m_path.lineTo((x + height / 2),(y + shortSide + longSide - innerShortSide));  m_path.lineTo((x + mediumSide),(y + height));  m_path.lineTo((x + innerMediumSide),(y + shortSide + innerShortSide));  m_path.closePath();  return m_path;}  }
class C{  public static void f(String tag,String msg){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg);}  }
class C{  public ChangeReport onSubEquipmentUnitAdd(final SubEquipmentUnitAdd subEquipmentUnitAdd){  log.debug("onSubEquipmentUnitAdd - entering onSubEquipmentUnitAdd()..");  ProcessConfiguration configuration=ProcessConfigurationHolder.getInstance();  ChangeReport changeReport=new ChangeReport(subEquipmentUnitAdd);  changeReport.setState(CHANGE_STATE.SUCCESS);  EquipmentConfiguration parentEquipmentConfiguration=configuration.getEquipmentConfiguration(subEquipmentUnitAdd.getParentEquipmentId());  if (parentEquipmentConfiguration == null) {    changeReport.appendError("Parent Equipment unit id: " + subEquipmentUnitAdd.getParentEquipmentId() + " for SubEquipment unit "+ subEquipmentUnitAdd.getSubEquipmentId()+ " is unknown");    changeReport.setState(CHANGE_STATE.FAIL);    return changeReport;  }  if (parentEquipmentConfiguration.getSubEquipmentConfiguration(subEquipmentUnitAdd.getSubEquipmentId()) != null) {    changeReport.appendError("onSubEquipmentUnitAdd - SubEquipment unit id: " + subEquipmentUnitAdd.getSubEquipmentId() + " is already registered");    changeReport.setState(CHANGE_STATE.FAIL);    return changeReport;  }  SubEquipmentConfiguration subEquipmentConfiguration=null;  EquipmentConfigurationFactory equipmentConfigurationFactory=EquipmentConfigurationFactory.getInstance();  try {    subEquipmentConfiguration=equipmentConfigurationFactory.createSubEquipmentConfiguration(subEquipmentUnitAdd.getSubEquipmentUnitXml());  } catch (  Exception e) {    changeReport.setState(CHANGE_STATE.FAIL);    changeReport.appendError(StackTraceHelper.getStackTrace(e));    return changeReport;  }  parentEquipmentConfiguration.addSubEquipmentConfiguration(subEquipmentConfiguration);  return changeReport;}  }
class C{  public static boolean isLegacyIdeaAndroidModule(@NotNull Module module){  AndroidFacet facet=AndroidFacet.getInstance(module);  if (facet != null && !facet.requiresAndroidModel()) {    return true;  }  return false;}  }
class C{  public CollectionsImplementor(CollectionsModel model,CollectionsView view){  this.model=model;  this.view=view;}  }
class C{  public LocationCursor queryLocations(){  return mHelper.queryLocations();}  }
class C{  public static void removeCallbacks(Runnable r){  sMainHandler.removeCallbacks(r);}  }
class C{  public Set<String> toFilenameSet(int iSubset){  HashSet s=new HashSet();  if ((iSubset & FROM_TRAINING_SET) > 0)   for (  Object elem : getTrainingSet()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)elem;    s.add(cfeCur.getFileName());  }  if ((iSubset & FROM_TEST_SET) > 0)   for (  Object elem : getTestSet()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)elem;    s.add(cfeCur.getFileName());  }  return s;}  }
class C{  public static String toString(JSONObject jo) throws JSONException {  boolean b=false;  Iterator<String> keys=jo.keys();  String string;  StringBuilder sb=new StringBuilder();  while (keys.hasNext()) {    string=keys.next();    if (!jo.isNull(string)) {      if (b) {        sb.append(';');      }      sb.append(Cookie.escape(string));      sb.append("=");      sb.append(Cookie.escape(jo.getString(string)));      b=true;    }  }  return sb.toString();}  }
class C{  public GenericValue queryFirst() throws GenericEntityException {  EntityFindOptions efo=makeEntityFindOptions();  if (!this.useCache && !this.filterByDate) {    efo.setMaxRows(1);  }  GenericValue result=EntityUtil.getFirst(query(efo));  return result;}  }
class C{  public NewsfeedDeleteBanQuery deleteBan(UserActor actor){  return new NewsfeedDeleteBanQuery(getClient(),actor);}  }
class C{  public int size(){  return summonTemplates.size();}  }
class C{  public void onDestroy(){}  }
class C{  private boolean isPermissionRequested(String permission){  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(this);  return preferences.getBoolean(permission,false);}  }
class C{  @Override public String toString(){  return "Cluster []";}  }
class C{  public Suggester(double dLookupThreshold){  vPreviousDecisions=new Vector();  LookupThreshold=dLookupThreshold;}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  public void cleanResult(){  consG.clear();  pointers.clear();  allocations.clear();  constraints.clear();  func2int.clear();  int2func.clear();  edgeMapping.clear();  hasTransformed=false;  hasExecuted=false;  System.gc();  System.gc();  System.gc();  System.gc();}  }
class C{  public void sortbyselection(List<String> sortFlds,List<Integer> sortDirs){  moveToId(-1);  int i=0;  while (super.next()) {    int minId=findSmallestFrom(i,sortFlds,sortDirs);    if (minId != i) {      swapRecords(i,minId);    }    moveToId(i);    i++;  }}  }
class C{  public final void write(OutputStream out) throws IOException {  writeLong(bits0,out);  writeLong(bits1,out);}  }
class C{  final long fn(long v,long x){  return v + x;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_COMBINE_FAIL(String value0){  return new SM_SYSTEM_MESSAGE(1330050,value0);}  }
class C{  public NGramGaussNormSymWinDocument(){  Graph=new DocumentNGramSymWinGraph();  Histogram=new DocumentNGramHistogram();}  }
class C{  public IntervalsSet(final double lower,final double upper,final double tolerance){  super(buildTree(lower,upper,tolerance),tolerance);}  }
class C{  public static synchronized void removeInstance(String storeName){  MAP_STORES.remove(storeName);}  }
class C{  private PrivateKey(byte[] priv,Cryptography crypto){  this.priv=priv;  this.crypto=crypto;}  }
class C{  public DocumentNGramHistogram(int iMinSize,int iMaxSize){  MinSize=iMinSize;  MaxSize=iMaxSize;  DataString="";  NGramHistogram=new HashMap();}  }
class C{  public void onSuccess(int statusCode,JSONObject response){  onSuccess(response);}  }
class C{  public ReplicationFilterException(String message,Throwable cause,String filterClassName,String sourceMemberName,String targetMemberName,int filterDirection){  super(message,cause);  _filterClassName=filterClassName;  _sourceMemberName=sourceMemberName;  _targetMemberName=targetMemberName;  _filterDirection=filterDirection;}  }
class C{  @Override public void flush() throws IOException {  writer.write(buffer,0,fill);  fill=0;}  }
class C{  static void commitElement(ConstraintModel model,@NotNull ConstraintWidget widget){  AttributesTransaction transaction=updateElement(model,widget);  if (transaction != null) {    transaction.commit();  }}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  if (textField != null) {    if (undoRedoObject != null) {      String newValue=(String)undoRedoObject.getNewValue();      textField.setText(newValue);    }  }}  }
class C{  public static String jsonToString(JsonRootNode node){  JsonFormatter JSON_FORMATTER=new PrettyJsonFormatter();  return JSON_FORMATTER.format(node);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_LEAVE_INSTANCE_PARTY(String value0){  return new SM_SYSTEM_MESSAGE(1400045,value0);}  }
class C{  boolean isBaseHeader(){  return value == BASE_HEADER;}  }
class C{  public void add(Predicate p,Font font){  super.add(p,font);}  }
class C{  private soot.Value createLiteral(polyglot.ast.Lit lit){  if (lit instanceof polyglot.ast.IntLit) {    polyglot.ast.IntLit intLit=(polyglot.ast.IntLit)lit;    long litValue=intLit.value();    if (intLit.kind() == polyglot.ast.IntLit.INT) {      return soot.jimple.IntConstant.v((int)litValue);    } else {      return soot.jimple.LongConstant.v(litValue);    }  } else   if (lit instanceof polyglot.ast.StringLit) {    String litValue=((polyglot.ast.StringLit)lit).value();    return soot.jimple.StringConstant.v(litValue);  } else   if (lit instanceof polyglot.ast.NullLit) {    return soot.jimple.NullConstant.v();  } else   if (lit instanceof polyglot.ast.FloatLit) {    polyglot.ast.FloatLit floatLit=(polyglot.ast.FloatLit)lit;    double litValue=floatLit.value();    if (floatLit.kind() == polyglot.ast.FloatLit.DOUBLE) {      return soot.jimple.DoubleConstant.v(floatLit.value());    } else {      return soot.jimple.FloatConstant.v((float)(floatLit.value()));    }  } else   if (lit instanceof polyglot.ast.CharLit) {    char litValue=((polyglot.ast.CharLit)lit).value();    return soot.jimple.IntConstant.v(litValue);  } else   if (lit instanceof polyglot.ast.BooleanLit) {    boolean litValue=((polyglot.ast.BooleanLit)lit).value();    if (litValue)     return soot.jimple.IntConstant.v(1); else     return soot.jimple.IntConstant.v(0);  } else   if (lit instanceof polyglot.ast.ClassLit) {    return getSpecialClassLitLocal((polyglot.ast.ClassLit)lit);  } else {    throw new RuntimeException("Unknown Literal - Unhandled: " + lit.getClass());  }}  }
class C{  private InfoflowResults analyzeAPKFile(boolean enableImplicitFlows) throws IOException, XmlPullParserException {  String androidJars=System.getenv("ANDROID_JARS");  if (androidJars == null)   androidJars=System.getProperty("ANDROID_JARS");  if (androidJars == null)   throw new RuntimeException("Android JAR dir not set");  System.out.println("Loading Android.jar files from " + androidJars);  SetupApplication setupApplication=new SetupApplication(androidJars,"insecureBank" + File.separator + "InsecureBank.apk");  setupApplication.setTaintWrapper(new EasyTaintWrapper("EasyTaintWrapperSource.txt"));  setupApplication.setEnableImplicitFlows(enableImplicitFlows);  setupApplication.setLayoutMatchingMode(LayoutMatchingMode.MatchAll);  setupApplication.calculateSourcesSinksEntrypoints("SourcesAndSinks.txt");  return setupApplication.runInfoflow();}  }
class C{  public GroupsSetCallbackServerSettingsQuery(VkApiClient client,Actor actor,int groupId){  super(client,"groups.setCallbackServerSettings",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);}  }
class C{  private DataQueryParams retainDataDimensionReportingRates(ReportingRateMetric metric){  DimensionalObject dimension=getDimensionOrFilter(DATA_X_DIM_ID);  List<ReportingRate> items=DimensionalObjectUtils.asTypedList(AnalyticsUtils.getByDataDimensionItemType(DataDimensionItemType.REPORTING_RATE,dimension.getItems()));  items=items.stream().filter(null).collect(Collectors.toList());  dimension.getItems().clear();  dimension.getItems().addAll(items);  return this;}  }
class C{  public static final MediaFormat createAudioFormat(String mime,int sampleRate,int channelCount){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_SAMPLE_RATE,sampleRate);  format.setInteger(KEY_CHANNEL_COUNT,channelCount);  return format;}  }
class C{  public boolean isManufactured(){  return isManufactured(false);}  }
class C{  public static String factoryLinkByType(String type){  if (null == type) {    return null;  }  List<RegistryEntry> list=entries.stream().filter(null).collect(Collectors.toList());  if (list.isEmpty()) {    return null;  }  return list.get(0).descriptionFactoryLink;}  }
class C{  public static <T>IStoredList<T> createConcurrentList(boolean segmented){  return createConcurrentList(segmented,false);}  }
class C{  private ValueEncoderMeta deserializeEncoderMeta(byte[] encoderMeta){  ByteArrayInputStream aos=null;  ObjectInputStream objStream=null;  ValueEncoderMeta meta=null;  try {    aos=new ByteArrayInputStream(encoderMeta);    objStream=new ObjectInputStream(aos);    meta=(ValueEncoderMeta)objStream.readObject();  } catch (  ClassNotFoundException e) {    LOGGER.error(e);  }catch (  IOException e) {    CarbonUtil.closeStreams(objStream);  }  return meta;}  }
class C{  public LogSeqNum logLogicalAbort(long txNum,LogSeqNum undoNextLSN){  if (enableLogging) {    return new LogicalAbortRecord(txNum,undoNextLSN).writeToLog();  } else   return null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ExtendAuraRange_A_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200972,skillcaster,skilltarget,skillname);}  }
class C{  public Map<String,Object> createRenderContext(Appendable writer,Map<String,Object> currentContext,Map<String,Object> extraValues) throws IOException {  Map<String,Object> renderContext;  if (currentContext != null) {    throw new UnsupportedOperationException("Not expecting to receive current context in current implementation");  } else   if (screenRenderer != null) {    MapStack<String> initContext=screenRenderer.initialContext;    if (initContext != null) {      renderContext=createRenderContextFromInitial(initContext,extraValues);    } else {      Debug.logError("macro " + rendererLabel + " renderer template environment initial context absent",MacroScreenRenderer.module);      renderContext=new HashMap<String,Object>(extraValues);    }  } else {    Debug.logError("macro " + rendererLabel + " renderer template environment initial context populate "+ "could not retrieve macro screen renderer instance",MacroScreenRenderer.module);    renderContext=new HashMap<String,Object>(extraValues);  }  lastRenderContext=renderContext;  return renderContext;}  }
class C{  private void drawYAxis(Graphics2D gc){  int x0=leftMargin;  int x1=getWidth() - rightMargin;  int y0=getHeight() - bottomMargin;  int y1=topMargin;  gc.setColor(Color.BLACK);  gc.drawLine(x0,y0,x0,y1 - 10);  drawArrowHead(gc,new Point(x0,y0),new Point(x0,y1 - 10));  drawYAxisTicks(gc);  if (getChartData().getCountsLabel() != null) {    String label=getChartData().getCountsLabel();    if (scalingType == ChartViewer.ScalingType.PERCENT)     label+=" (%)";    Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();    int x=15;    int y=(y0 + y1) / 2 - labelSize.width / 2;    gc.setFont(getFont(ChartViewer.FontKeys.YAxisFont.toString()));    gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.BLACK));    drawString(gc,label,x,y,Math.PI / 2);  }}  }
class C{  public static String toString(Reader input) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw);  return sw.toString();}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  public Builder conditionalCopyValueTransform(String columnToReplace,String sourceColumn,Condition condition){  return transform(new ConditionalCopyValueTransform(columnToReplace,sourceColumn,condition));}  }
class C{  public Builder lineCap(String lineCap){  this.lineCap=lineCap;  return this;}  }
class C{  public static IOFileFilter sizeRangeFileFilter(long minSizeInclusive,long maxSizeInclusive){  IOFileFilter minimumFilter=new SizeFileFilter(minSizeInclusive,true);  IOFileFilter maximumFilter=new SizeFileFilter(maxSizeInclusive + 1L,false);  return new AndFileFilter(minimumFilter,maximumFilter);}  }
class C{  @Override public void notationDecl(String name,String publicId,String systemId) throws SAXException {  allowXMLCatalogPI=false;  if (dtdHandler != null) {    dtdHandler.notationDecl(name,publicId,systemId);  }}  }
class C{  public boolean isExpanded(){  return expanded;}  }
class C{  public void halt(){  for (  WorkProcessor<?> processor : workProcessors) {    processor.halt();  }  started.set(false);}  }
class C{  public Matrix inverse(){  return solve(identity(m,m));}  }
class C{  public int indexOf(int offset,short value){  for (int i=offset; i < _pos; i++) {    if (_data[i] == value) {      return i;    }  }  return -1;}  }
class C{  static String encode(List<String> eventIds){  checkArgument(!eventIds.isEmpty(),"Empty event ID list.");  if (eventIds.size() == 1) {    return checkValid(eventIds.get(0));  }  StringBuilder buf=new StringBuilder();  String prevId=null;  for (  String eventId : eventIds) {    checkValid(eventId);    int commonPrefixLength;    if (prevId == null) {      buf.append(eventId);    } else     if (prevId.length() == eventId.length() && (commonPrefixLength=getCommonPrefixLength(prevId,eventId)) > 0) {      buf.append(DELIM_SHARED_PREFIX).append(eventId.substring(commonPrefixLength));    } else {      buf.append(DELIM_REGULAR).append(eventId);    }    prevId=eventId;  }  return buf.toString();}  }
class C{  @Override public boolean checkCanSwipeBack(int dir){  return view.checkCanSwipeBack(dir);}  }
class C{  @Theory public void logEntriesHaveSameOrderAsIndexes(Object[] dataPoint){  int index1=(int)dataPoint[0];  int index2=(int)dataPoint[1];  LogEntry first=logEntries[index1];  LogEntry second=logEntries[index2];  LOG.debug("testing comparator for log entries: {} and {}",index1,index2);  int result=tested.compare(first,second);  int expected=Integer.compare(index1,index2);  assertThatHaveSameSignum(expected,result);}  }
class C{  public Builder cloneFrom(DisplayImageOptions options){  imageResOnLoading=options.imageResOnLoading;  imageResForEmptyUri=options.imageResForEmptyUri;  imageResOnFail=options.imageResOnFail;  imageOnLoading=options.imageOnLoading;  imageForEmptyUri=options.imageForEmptyUri;  imageOnFail=options.imageOnFail;  resetViewBeforeLoading=options.resetViewBeforeLoading;  cacheInMemory=options.cacheInMemory;  cacheOnDisk=options.cacheOnDisk;  imageScaleType=options.imageScaleType;  decodingOptions=options.decodingOptions;  delayBeforeLoading=options.delayBeforeLoading;  considerExifParams=options.considerExifParams;  extraForDownloader=options.extraForDownloader;  preProcessor=options.preProcessor;  postProcessor=options.postProcessor;  displayer=options.displayer;  handler=options.handler;  isSyncLoading=options.isSyncLoading;  return this;}  }
class C{  public UseItemReviveResponse.Result revive() throws LoginFailedException, RemoteServerException {  if (!isFainted())   return UseItemReviveResponse.Result.ERROR_CANNOT_USE;  if (api.getInventories().getItemBag().getItem(ItemId.ITEM_REVIVE).getCount() > 0)   return useRevive(ItemId.ITEM_REVIVE);  if (api.getInventories().getItemBag().getItem(ItemId.ITEM_MAX_REVIVE).getCount() > 0)   return useRevive(ItemId.ITEM_MAX_REVIVE);  return UseItemReviveResponse.Result.ERROR_CANNOT_USE;}  }
class C{  public HttpResponseWrapper(JsonObject json){  this.statusCode=HttpResponseStatus.valueOf(json.getInteger("statusCode"));  if (json.containsKey("body")) {    this.body=Buffer.buffer(json.getString("body"));  }  if (json.containsKey("headers")) {    this.headers=MultiMap.caseInsensitiveMultiMap();    json.getJsonArray("headers").stream().map(null).flatMap(null).forEach(null);  }}  }
class C{  public void dispose(){  if (metadata != null)   metadata.dispose();  if (index != null)   index.dispose();}  }
class C{  @Nonnull public DataBuilder appendDevicePattern(@Nonnull final DevicePattern pattern){  Check.notNull(pattern,"pattern");  if (!devicePatterns.containsKey(pattern.getId())) {    devicePatterns.put(pattern.getId(),new TreeSet<DevicePattern>(DEVICE_PATTERN_COMPARATOR));  }  devicePatterns.get(pattern.getId()).add(pattern);  return this;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Nullable @Override @CallSuper public List<String> validate(JobTrigger trigger){  if (trigger == Trigger.NOW) {    return null;  }  if (!(trigger instanceof JobTrigger.ExecutionWindowTrigger)) {    return getMutableSingletonList("Unknown trigger provided");  }  return null;}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set flipH=" + (!isSelected()) + ";");}  }
class C{  public void stop(){  if (!status.compareAndSet(STATUS_RUNNING,STATUS_STOPPING)) {    if (status.get() == STATUS_STOPPING) {      LOGGER.warn("processor is already stopping, now");    } else {      LOGGER.error("status should be RUNNING. status=" + status.get());    }    return;  }  try {    binlogReceiver.stop(config.binlogReceiverStopTimeout,TimeUnit.MILLISECONDS);  } catch (  Exception e) {    LOGGER.error("Failed to stop binlogReceiver.",e);  }  LOGGER.info("try to shutdown threadPool");  threadPool.shutdownNow();  try {    threadPool.awaitTermination(config.threadPoolTerminationTimeout,TimeUnit.MILLISECONDS);  } catch (  Exception e) {    LOGGER.error("Failed to await thread pool termination.",e);  }  status.set(STATUS_STOPPED);  logRemainedBinlogFileStatCounter();  getHandler().afterStop();  waitStopLatch.countDown();}  }
class C{  @Override protected final boolean writeData(ByteBuffer data){synchronized (guard) {    GsServerPacket packet=sendMsgQueue.pollFirst();    if (packet == null) {      return false;    }    packet.write(this,data);    return true;  }}  }
class C{  public ParserException(String message){  this(message,null);  return;}  }
class C{  public EntityQuery from(String entityName){  this.entityName=entityName;  this.dynamicViewEntity=null;  return this;}  }
class C{  private final SortedMap identifyCandidateDelimiters(String sStr,int iNGramSize){  String sSubStr=null;  Integer[] iRes=null;  ArrayList alRes=new ArrayList();  TreeMap tmRes=new TreeMap();  for (int iCnt=0; iCnt <= sStr.length() - iNGramSize; iCnt++) {    if (iCnt + iNGramSize > sStr.length())     continue;    sSubStr=sStr.substring(iCnt,iCnt + iNGramSize);    if (tmRes.containsValue(sSubStr))     continue;    Vertex vStrNode=clLocator.locateVertexInGraph(sgOverallGraph,new VertexImpl(sSubStr));    if (vStrNode == null)     continue;    double dEntropy=getEntropyOfNextChar(sSubStr,false);    tmRes.put(dEntropy,sSubStr);  }  return tmRes;}  }
class C{  private List<String> prepareYColumn(Double yValue,int yMaxLines,int y0){  Double yPosDotU=Math.abs(yValue / this.scorePerDot);  if ((int)Math.rint(yPosDotU) == 0) {    ArrayList<String> strDepth=new ArrayList<String>();    for (int j=0; j < yMaxLines; j++) {      strDepth.add(strForFill);    }    if (yValue.isNaN()) {      strDepth.set(y0,this.strForNaN);    } else     if (y0 < yMaxLines - 1 || yMaxLines == 1) {      strDepth.set(y0,this.strForZero);    } else {      strDepth.set(y0,this.strForZeroTop);    }    return strDepth;  } else   if (yValue < 0) {    return pileForNegative(yValue,yMaxLines,y0);  } else   if (yValue > 0) {    return pileForPositive(yValue,yMaxLines,y0);  } else {    throw new RuntimeException("Unexpected exception");  }}  }
class C{  @Override public void run(){  while (!keyList.isEmpty()) {    Object key=keyList.pollFirst();    cache.putQuiet(new Element(key,preloadBuffer.get(key)));    cache.putQuiet(new Element(key,preloadBuffer.get(key)));  }}  }
class C{  public void draw(GL10 gl){  GLES10.glClear(GLES10.GL_COLOR_BUFFER_BIT | GLES10.GL_DEPTH_BUFFER_BIT);}  }
class C{  public void testFloatField() throws Exception {  AnObject empty=new AnObject();  AnObject full=helper.fill(new AnObject());  assertTrue(helper.areEquals(full,full));  assertFalse(helper.areEquals(empty,full));}  }
class C{  public CMMModel train(List<String> taggedSentences,String modelFileName,CMMParams params){  DataFrame dataset=createDataFrame(taggedSentences);  return train(dataset,modelFileName,params);}  }
class C{  @RequestMapping(value="/{id}",method=GET,produces=APPLICATION_JSON_VALUE) public ResponseEntity<AuthorDTO> findById(@PathVariable Integer id) throws URISyntaxException {  log.debug("Find by id Author : {}",id);  return Optional.ofNullable(authorDTOService.findOne(id)).map(null).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));}  }
class C{  public static boolean updateGradleDistributionUrl(@NotNull Project project,@NotNull File propertiesFile,@NotNull String gradleVersion){  try {    boolean updated=updateGradleDistributionUrl(gradleVersion,propertiesFile);    if (updated) {      VirtualFile virtualFile=findFileByIoFile(propertiesFile,true);      if (virtualFile != null) {        virtualFile.refresh(false,false);      }      return true;    }  } catch (  IOException e) {    String msg=String.format("Unable to update Gradle wrapper to use Gradle %1$s\n",gradleVersion);    msg+=e.getMessage();    Messages.showErrorDialog(project,msg,"Unexpected Error");  }  return false;}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  public boolean isLoaded(){  return loaded;}  }
class C{  public GeoServerLayerNode(FileSystemInterface handler,GeoServerLayer layer){  super(layer.getLayerName());  this.layer=layer;  this.handler=handler;}  }
class C{  public SyntaxView(Element element,Configuration config,String prefix){  super(element);  singleColorSelect=config.getPrefixBoolean(prefix,PROPERTY_SINGLE_COLOR_SELECT,false);  rightMarginColor=new Color(config.getPrefixInteger(prefix,PROPERTY_RIGHT_MARGIN_COLOR,0xFF7777));  rightMarginColumn=config.getPrefixInteger(prefix,PROPERTY_RIGHT_MARGIN_COLUMN,0);  String textaa=config.getPrefixProperty(prefix,PROPERTY_TEXTAA,"DEFAULT");  textAAHint=TEXT_AA_HINT_NAMES.get(textaa);}  }
class C{  protected void validateNamespaceOwnership(String property,String cluster,String namespace,boolean authoritative,boolean readOnly){  NamespaceName fqnn=new NamespaceName(property,cluster,namespace);  try {    validateFullNamespaceOwnership(fqnn,authoritative,readOnly);  } catch (  WebApplicationException wae) {    throw wae;  }catch (  Exception e) {    throw new WebApplicationException(e);  }}  }
class C{  public void asinh(final double[] operand,final int operandOffset,final double[] result,final int resultOffset){  double[] function=new double[1 + order];  final double x=operand[operandOffset];  function[0]=FastMath.asinh(x);  if (order > 0) {    final double[] p=new double[order];    p[0]=1;    final double x2=x * x;    final double f=1.0 / (1 + x2);    double coeff=FastMath.sqrt(f);    function[1]=coeff * p[0];    for (int n=2; n <= order; ++n) {      double v=0;      p[n - 1]=(1 - n) * p[n - 2];      for (int k=n - 1; k >= 0; k-=2) {        v=v * x2 + p[k];        if (k > 2) {          p[k - 2]=(k - 1) * p[k - 1] + (k - 2 * n) * p[k - 3];        } else         if (k == 2) {          p[0]=p[1];        }      }      if ((n & 0x1) == 0) {        v*=x;      }      coeff*=f;      function[n]=coeff * v;    }  }  compose(operand,operandOffset,function,result,resultOffset);}  }
class C{  public static void resetPlugins(){  getInstance().reset();}  }
class C{  public Response(boolean requiredencode){  this();  requiredEncode=requiredencode;}  }
class C{  public void checkSymbolIsValid(){  boolean valid=false;  Expression expression=getExpression();  if (expression != null) {    valid=!expression.toString().isEmpty();  }  SelectedSymbol.getInstance().setValidSymbol(VALIDITY_KEY,valid);}  }
class C{  public void monitorsUpdated(VmEvent event){  assert event.getMonitoredVm().equals(monitoredVm);  try {    if (monitoredHost.activeVms().contains(pid)) {      List<JvmstatListener> listenersCopy;synchronized (listeners) {        listenersCopy=new ArrayList(listeners);      }      for (      JvmstatListener listener : listenersCopy) {        listener.dataChanged(this);      }    } else {      disableListeners();      monitoredVm.detach();    }  } catch (  MonitorException ex) {    ErrorManager.getDefault().notify(ErrorManager.WARNING,ex);    disableListeners();    monitoredVm.detach();  }}  }
class C{  public ExpressionPanelv2(List<VersionData> vendorOptionList){  super(Controller.getInstance().getFrame(),"",true);  this.setResizable(false);  this.vendorOptionList=vendorOptionList;  setPreferredSize(new Dimension(800,450));  createUI();  DataSourceInterface dataSource=DataSourceFactory.getDataSource();  if (dataSource != null) {    dataSource.addListener(this);  }  this.pack();  Controller.getInstance().centreDialog(this);}  }
class C{  private static boolean hasNonEmptyGrid(List<Grid> grids){  if (grids != null && grids.size() > 0) {    for (    Grid grid : grids) {      if (isNonEmptyGrid(grid)) {        return true;      }    }  }  return false;}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public Zmat qb(Zmat B) throws JampackException {  if (B.ncol != ncol) {    throw new JampackException("Inconsistent dimensions.");  }  Zmat C=new Zmat(B);  for (int k=ntran - 1; k >= 0; k--) {    House.ua(U[k],C,C.bx + k,C.rx,C.bx,C.cx);  }  return C;}  }
class C{  public int geom_encoding(){  String s=soot.PhaseOptions.getString(options,"geom-encoding");  if (s.equalsIgnoreCase("Geom"))   return geom_encoding_Geom;  if (s.equalsIgnoreCase("HeapIns"))   return geom_encoding_HeapIns;  if (s.equalsIgnoreCase("PtIns"))   return geom_encoding_PtIns;  throw new RuntimeException("Invalid value " + s + " of phase option geom-encoding");}  }
class C{  public static <T>T checkNotNull(T reference,String errorMessageTemplate,Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  public VideoGetAlbumsQueryWithExtended count(Integer value){  return unsafeParam("count",value);}  }
class C{  public GeoServerReadProgress(FileSystemInterface handler,GeoServerParseCompleteInterface parseComplete){  this.handler=handler;  this.parseComplete=parseComplete;}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  @Override public void destroy() throws Exception {  if (this.cacheManager != null) {    this.cacheManager.stop();  }}  }
class C{  public void testDeployZipFile(){  InputStream inputStream=this.getClass().getClassLoader().getResourceAsStream("org/activiti/engine/test/api/repository/test-processes.zip");  assertNotNull(inputStream);  ZipInputStream zipInputStream=new ZipInputStream(inputStream);  assertNotNull(zipInputStream);  repositoryService.createDeployment().addZipInputStream(zipInputStream).deploy();  assertEquals(6,repositoryService.createProcessDefinitionQuery().count());  for (  org.activiti.engine.repository.Deployment deployment : repositoryService.createDeploymentQuery().list()) {    repositoryService.deleteDeployment(deployment.getId(),true);  }}  }
class C{  public float readFloat() throws JMSException {  initializeReading();  try {    if (this.dataIn.available() == 0) {      throw new MessageEOFException("reached end of data");    }    this.dataIn.mark(33);    int type=this.dataIn.read();    if (type == _FLOAT) {      return this.dataIn.readFloat();    }    if (type == _STRING) {      return Float.valueOf(this.dataIn.readUTF()).floatValue();    }    if (type == _NULL) {      this.dataIn.reset();      throw new NullPointerException("Cannot convert _NULL value to float.");    } else {      this.dataIn.reset();      throw new MessageFormatException(" not a float type");    }  } catch (  NumberFormatException mfe) {    try {      this.dataIn.reset();    } catch (    IOException ioe) {      JMSException jmsEx=new JMSException("reset failed");      jmsEx.setLinkedException(ioe);    }    throw mfe;  }catch (  EOFException e) {    JMSException jmsEx=new MessageEOFException(e.toString());    jmsEx.setLinkedException(e);    throw jmsEx;  }catch (  IOException e) {    JMSException jmsEx=new MessageFormatException(e.toString());    jmsEx.setLinkedException(e);    throw jmsEx;  }}  }
class C{  private String doPrefix(String uri,String qName,boolean isElement){  String defaultNS=nsSupport.getURI("");  if ("".equals(uri)) {    if (isElement && defaultNS != null)     nsSupport.declarePrefix("","");    return null;  }  String prefix;  if (isElement && defaultNS != null && uri.equals(defaultNS)) {    prefix="";  } else {    prefix=nsSupport.getPrefix(uri);  }  if (prefix != null) {    return prefix;  }  prefix=(String)doneDeclTable.get(uri);  if (prefix != null && ((!isElement || defaultNS != null) && "".equals(prefix) || nsSupport.getURI(prefix) != null)) {    prefix=null;  }  if (prefix == null) {    prefix=(String)prefixTable.get(uri);    if (prefix != null && ((!isElement || defaultNS != null) && "".equals(prefix) || nsSupport.getURI(prefix) != null)) {      prefix=null;    }  }  if (prefix == null && qName != null && !"".equals(qName)) {    int i=qName.indexOf(':');    if (i == -1) {      if (isElement && defaultNS == null) {        prefix="";      }    } else {      prefix=qName.substring(0,i);    }  }  for (; prefix == null || nsSupport.getURI(prefix) != null; prefix="__NS" + ++prefixCounter)   ;  nsSupport.declarePrefix(prefix,uri);  doneDeclTable.put(uri,prefix);  return prefix;}  }
class C{  @Override public boolean isAcceptable(JsonPath jsonPath,String requestType){  return jsonPath.isCollection() && jsonPath instanceof ResourcePath && HttpMethod.GET.name().equals(requestType);}  }
class C{  private String pickCharset(){  if (charset != null) {    return charset;  } else   if (utf8Supported) {    return "UTF-8";  } else {    return System.getProperty("file.encoding");  }}  }
class C{  public static DataTagCacheObject createTestDataTag3(){  DataTagCacheObject cacheObject=new DataTagCacheObject();  cacheObject.setId(new Long(100003));  cacheObject.setName("Junit_test_datatag3");  cacheObject.setDescription("test description");  cacheObject.setMode(DataTagConstants.MODE_TEST);  cacheObject.setDataType("String");  cacheObject.setLogged(false);  cacheObject.setUnit("test unit");  cacheObject.setDipAddress("testDIPaddress");  cacheObject.setJapcAddress("testJAPCaddress");  cacheObject.setValue("DOWN");  cacheObject.setValueDescription("test value description");  cacheObject.setSimulated(false);  cacheObject.setEquipmentId(new Long(100));  cacheObject.setMinValue(new Float(23.3));  cacheObject.setMaxValue(new Float(12.2));  cacheObject.setValueDictionary(new DataTagValueDictionary());  cacheObject.setAddress(new DataTagAddress());  cacheObject.setDataTagQuality(createValidQuality());  cacheObject.setCacheTimestamp(new Timestamp(System.currentTimeMillis()));  cacheObject.setDaqTimestamp(new Timestamp(System.currentTimeMillis()));  cacheObject.setSourceTimestamp(new Timestamp(System.currentTimeMillis()));  cacheObject.getAlarmIds().add(1L);  cacheObject.getAlarmIds().add(3L);  return cacheObject;}  }
class C{  private void init(){  parseActions();  parseName(new StringTokenizer(getName()," ",true),false);}  }
class C{  private static int endOfTagMatch(String string,String tag){  return endOfTagMatch(string,0,tag);}  }
class C{  public void addProperty(String property,Number value){  add(property,createJsonElement(value));}  }
class C{  public boolean accept(String inputString){  int symbol;  int state=transition(0,'#');  int leftEnd=inputString.length() - 1;  int start=(scanFromFront) ? 0 : leftEnd;  for (int i=start; 0 <= i && i <= leftEnd; ) {    char c=inputString.charAt(i);    if (c == 'n' || c == 'm') {      symbol='N';    } else     if ("aeiouy".indexOf(c) != -1) {      symbol='V';    } else {      symbol=c;    }    state=transition(state,symbol);    if (state == -1) {      return false;    } else     if (symbol == 'V') {      return true;    }    if (scanFromFront) {      i++;    } else {      i--;    }  }  return false;}  }
class C{  private String toHexString(long value,int digits){  long cutoff=1L << (digits * 4);  return Long.toHexString(cutoff | (value & (cutoff - 1))).substring(1);}  }
class C{  public static void addRequest(AbstractAI ai2,Player player,int requestId,int senderId,final AI2Request request,Object... requestParams){  addRequest(ai2,player,requestId,senderId,0,request,requestParams);}  }
class C{  public <T>void addEntry(Class<T> resource,RegistryEntry<? extends T> registryEntry){  resources.put(resource,registryEntry);  registryEntry.initialize(this);  logger.debug("Added resource {} to ResourceRegistry",resource.getName());}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public static String removeLineEnds(String text){  return text.replaceAll("[\r\n]+"," ").trim();}  }
class C{  public SpringForce(float springCoeff,float defaultLength){  params=new float[]{springCoeff,defaultLength};  minValues=new float[]{DEFAULT_MIN_SPRING_COEFF,DEFAULT_MIN_SPRING_LENGTH};  maxValues=new float[]{DEFAULT_MAX_SPRING_COEFF,DEFAULT_MAX_SPRING_LENGTH};}  }
class C{  public FriendsGetRequestsQuery out(Boolean value){  return unsafeParam("out",value);}  }
class C{  public DistributedLogClientBuilder requestTimeoutMs(int timeoutMs){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setRequestTimeoutMs(timeoutMs);  return newBuilder;}  }
class C{  public static String specificationVersion(){  return specificationVersion;}  }
class C{  public void writeBoolean(boolean value) throws JMSException {  initializeWriting();  try {    this.dataOut.write(_BOOLEAN);    this.dataOut.writeBoolean(value);  } catch (  IOException ioe) {    raise(ioe);  }}  }
class C{  public boolean fileExists(){  return mId != -1;}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (camera != null && previewing) {    previewCallback.setHandler(handler,message);    if (useOneShotPreviewCallback) {      camera.setOneShotPreviewCallback(previewCallback);    } else {      camera.setPreviewCallback(previewCallback);    }  }}  }
class C{  public TopicSubscriber createDurableSubscriber(Topic topic,String name) throws JMSException {  ensureOpen();  throw new JMSException("This version of JMS does not support durable subscribers.");}  }
class C{  public FriendsGetQuery nameCase(UsersNameCase value){  return unsafeParam("name_case",value);}  }
class C{  public void toggleSelection(final int location){  this.selectItem(location,!this.selectedItems.get(location));}  }
class C{  public HttpClient(URL url){  this.url=url.toExternalForm();}  }
class C{  public static void textRight(double x,double y,String text){  if (text == null)   throw new NullPointerException();  offscreen.setFont(font);  FontMetrics metrics=offscreen.getFontMetrics();  double xs=scaleX(x);  double ys=scaleY(y);  int ws=metrics.stringWidth(text);  int hs=metrics.getDescent();  offscreen.drawString(text,(float)(xs - ws),(float)(ys + hs));  draw();}  }
class C{  static public Properties findCustomPropertiesObj(String schemaPropertiesFileName) throws IOException, ConfigurationException {  InputStream schemaInputStream=null;  String schemaPropertiesPath=null;  boolean downloadingPropsFromHTTP=schemaPropertiesFileName.startsWith("http:");  if (downloadingPropsFromHTTP) {    try {      URL theUrl=new URL(schemaPropertiesFileName);      URLConnection con=theUrl.openConnection();      schemaInputStream=con.getInputStream();      schemaPropertiesPath=schemaPropertiesFileName;    } catch (    Exception e) {      throw new ConfigurationException("Failed to download properties file from '" + schemaPropertiesFileName + "' cause: "+ e.getClass().getName()+ " message: "+ e.getMessage(),e);    }  } else {    schemaPropertiesPath=Constants.Container.CONTAINER_CONFIG_DIRECTORY + "/" + schemaPropertiesFileName+ ".properties";    schemaInputStream=getResourceStream(schemaPropertiesPath);  }  Properties schemaProperties=null;  if (schemaInputStream != null) {    if (_logger.isLoggable(Level.INFO)) {      _logger.info("Loading properties file from: " + (downloadingPropsFromHTTP ? schemaPropertiesFileName : getResourceURL(schemaPropertiesPath).toString()));    }    schemaProperties=new Properties();    schemaProperties.load(schemaInputStream);    schemaInputStream.close();    if (_logger.isLoggable(Level.FINE)) {      _logger.fine("custom properties file values: ");      schemaProperties.list(System.out);    }  } else {    throw new ConfigurationException("Failed to load properties file: " + schemaPropertiesPath);  }  return schemaProperties;}  }
class C{  public Optional<Number> min(){  String dataType=checkSelectedResourceTypesHaveCorrectDataType(statisticsResourceTypes);  if (!selectedTypesHaveInstanceInSubgraph(statisticsResourceTypes,subtypes))   return Optional.empty();  Set<String> allSubtypes=statisticsResourceTypes.stream().map(null).collect(Collectors.toSet());  allSubtypes.addAll(subtypes);  allSubtypes.addAll(statisticsResourceTypes);  MindmapsComputer computer=Mindmaps.factory(Mindmaps.DEFAULT_URI,keySpace).getGraphComputer();  ComputerResult result=computer.compute(new DegreeVertexProgram(allSubtypes),new MinMapReduce(statisticsResourceTypes,dataType));  Map<String,Number> min=result.memory().get(MindmapsMapReduce.MAP_REDUCE_MEMORY_KEY);  return Optional.of(min.get(MinMapReduce.MEMORY_KEY));}  }
class C{  private boolean checkBlockDrifting(int x,int y,int z){  for (int height=y - 1; height <= y + 1; height++) {    IBlockState blockState=worldObj.getBlockState(new BlockPos(x,height,z));    if (blockState.getBlock() == Blocks.FLOWING_WATER || blockState.getBlock() == Blocks.WATER) {      int meta=blockState.getBlock().getMetaFromState(blockState);      if (meta >= 8)       return true;    }  }  return false;}  }
class C{  public static double random(){  return uniform();}  }
class C{  @SuppressWarnings("unchecked") public Configuration(Configuration other){  this.resources=(ArrayList)other.resources.clone();synchronized (other) {    if (other.properties != null) {      this.properties=(Properties)other.properties.clone();    }    if (other.overlay != null) {      this.overlay=(Properties)other.overlay.clone();    }  }  this.finalParameters=new HashSet<>(other.finalParameters);synchronized (Configuration.class) {    REGISTRY.put(this,null);  }}  }
class C{  public boolean isUnloadDisabledInLoadShedding(){  if (!pulsar.getConfiguration().isLoadBalancerEnabled()) {    return true;  }  boolean unloadDisabledInLoadShedding=false;  try {    unloadDisabledInLoadShedding=pulsar.getGlobalZkCache().exists(AdminResource.LOAD_SHEDDING_UNLOAD_DISABLED_FLAG_PATH);  } catch (  Exception e) {    log.warn("Unable to fetch contents of [{}] from global zookeeper",AdminResource.LOAD_SHEDDING_UNLOAD_DISABLED_FLAG_PATH,e);  }  return unloadDisabledInLoadShedding;}  }
class C{  private static int hash(Object[] elements){  int h=0;  for (int i=elements.length; --i >= 0; ) {    h+=elements[i].hashCode();  }  return h;}  }
class C{  public SimpleTextHistoDocument(){  Graph=new DocumentWordGraph();  Histogram=new DocumentWordHistogram();}  }
class C{  public final TestSubscriber<T> configureValuesStorage(boolean enabled){  this.valuesStorage=enabled;  return this;}  }
class C{  public int propagator(){  String s=soot.PhaseOptions.getString(options,"propagator");  if (s.equalsIgnoreCase("auto"))   return propagator_auto;  if (s.equalsIgnoreCase("iter"))   return propagator_iter;  if (s.equalsIgnoreCase("worklist"))   return propagator_worklist;  if (s.equalsIgnoreCase("alias"))   return propagator_alias;  if (s.equalsIgnoreCase("bdd"))   return propagator_bdd;  if (s.equalsIgnoreCase("incbdd"))   return propagator_incbdd;  throw new RuntimeException("Invalid value " + s + " of phase option propagator");}  }
class C{  public void linearCombination(final double a1,final double[] c1,final int offset1,final double a2,final double[] c2,final int offset2,final double[] result,final int resultOffset){  for (int i=0; i < getSize(); ++i) {    result[resultOffset + i]=MathArrays.linearCombination(a1,c1[offset1 + i],a2,c2[offset2 + i]);  }}  }
class C{  private void applySpeechRateSpecifications(NodeList nl,Element prosodyElement){  String rateAttribute=null;  if (!prosodyElement.hasAttribute("rate")) {    return;  }  rateAttribute=prosodyElement.getAttribute("rate");  Pattern p=Pattern.compile("[+|-]\\d+%");  Matcher m=p.matcher(rateAttribute);  if (m.find()) {    double percentage=new Integer(rateAttribute.substring(1,rateAttribute.length() - 1)).doubleValue();    if (rateAttribute.startsWith("+")) {      setSpeechRateSpecifications(nl,percentage,-1.0);    } else {      setSpeechRateSpecifications(nl,percentage,+1.0);    }  }}  }
class C{  public static int needInteger(String property) throws NoSuchPropertyException {  String value=getProperty(property);  if (value == null) {    throw new NoSuchPropertyException("Missing property `" + property + "' in configuration files");  }  try {    return Integer.decode(value).intValue();  } catch (  NumberFormatException e) {    throw new NoSuchPropertyException("Integer property `" + property + "' in configuration files has wrong value `"+ value+ "'");  }}  }
class C{  public Response<?> response(){  return response;}  }
class C{  public void updateResize(NlComponent child,Rectangle newBounds,int modifierMask){  mySnap=(modifierMask & InputEvent.SHIFT_MASK) == 0;  myBounds=newBounds;  clearSuggestions();  @SuppressWarnings("UnnecessaryLocalVariable") Rectangle b=newBounds;  Segment hEdge=null;  Segment vEdge=null;  String childId=child.getId();  if (myHorizontalEdgeType == SegmentType.TOP) {    hEdge=new Segment(b.y,b.x,x2(b),child,childId,myHorizontalEdgeType,NO_MARGIN);  } else   if (myHorizontalEdgeType == SegmentType.BOTTOM) {    hEdge=new Segment(y2(b),b.x,x2(b),child,childId,myHorizontalEdgeType,NO_MARGIN);  } else {    assert myHorizontalEdgeType == null;  }  if (myVerticalEdgeType != null && myTextDirection.isLeftSegment(myVerticalEdgeType)) {    vEdge=new Segment(b.x,b.y,y2(b),child,childId,myVerticalEdgeType,NO_MARGIN);  } else   if (myVerticalEdgeType != null && myTextDirection.isRightSegment(myVerticalEdgeType)) {    vEdge=new Segment(x2(b),b.y,y2(b),child,childId,myVerticalEdgeType,NO_MARGIN);  } else {    assert myVerticalEdgeType == null;  }  myTopMargin=myBottomMargin=myLeftMargin=myRightMargin=0;  if (hEdge != null && myHorizontalEdges.size() > 0) {    myHorizontalSuggestions=findClosest(hEdge,myHorizontalEdges);    Match match=pickBestMatch(myHorizontalSuggestions);    if (match != null && (!mySnap || abs(match.delta) < MAX_MATCH_DISTANCE)) {      if (myHorizontalDeps.contains(match.edge.component)) {        match.cycle=true;      }      snapHorizontal(hEdge,match.edge.at,newBounds);      if (hEdge.edgeType == SegmentType.TOP) {        myCurrentTopMatch=match;      } else       if (hEdge.edgeType == SegmentType.BOTTOM) {        myCurrentBottomMatch=match;      } else {        assert hEdge.edgeType == SegmentType.CENTER_HORIZONTAL || hEdge.edgeType == SegmentType.BASELINE : hEdge;        myCurrentTopMatch=match;      }    }  }  if (vEdge != null && myVerticalEdges.size() > 0) {    myVerticalSuggestions=findClosest(vEdge,myVerticalEdges);    Match match=pickBestMatch(myVerticalSuggestions);    if (match != null && (!mySnap || abs(match.delta) < MAX_MATCH_DISTANCE)) {      if (myVerticalDeps.contains(match.edge.component)) {        match.cycle=true;      }      snapVertical(vEdge,match.edge.at,newBounds);      if (myTextDirection.isLeftSegment(vEdge.edgeType)) {        myCurrentLeftMatch=match;      } else       if (myTextDirection.isRightSegment(vEdge.edgeType)) {        myCurrentRightMatch=match;      } else {        assert vEdge.edgeType == SegmentType.CENTER_VERTICAL;        myCurrentLeftMatch=match;      }    }  }  checkCycles();}  }
class C{  public boolean isApplicable(){  return getViewer().getSelectedComponent() == getViewer().getPcoaTab();}  }
class C{  public OpenIntToFieldHashMap(final Field<T> field,final T missingEntries){  this(field,DEFAULT_EXPECTED_SIZE,missingEntries);}  }
class C{  <T>T onSum(String tableName,String column,String[] conditions,Class<T> type){  return mathQuery(tableName,new String[]{"sum(" + column + ")"},conditions,type);}  }
class C{  public void deleteItem(String sItem){  for (int iNGramSize=MinSize; iNGramSize <= MaxSize; iNGramSize++) {    UniqueVertexGraph gCurLevel=getGraphLevelByNGramSize(iNGramSize);    Vertex v=utils.locateVertexInGraph(gCurLevel,sItem);    if (v == null)     return;    try {      gCurLevel.remove(v);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public StdoutReporter(){  this.stream=System.out;}  }
class C{  public Builder requestTimeoutMs(long requestTimeoutMs){  this._requestTimeoutMs=requestTimeoutMs;  return this;}  }
class C{  public void addComplexTypeDecl(XSComplexTypeDecl decl,SimpleLocator locator){  if (fCTCount == fComplexTypeDecls.length) {    fComplexTypeDecls=resize(fComplexTypeDecls,fCTCount + INC_SIZE);    fCTLocators=resize(fCTLocators,fCTCount + INC_SIZE);  }  fCTLocators[fCTCount]=locator;  fComplexTypeDecls[fCTCount++]=decl;}  }
class C{  public static FixedWidthTextTableSchema load(String loc) throws DataIOException {  try {    InputStream is=IOLib.streamFromString(loc);    if (is == null)     return null;    FixedWidthTextTableSchema fws=new FixedWidthTextTableSchema();    BufferedReader br=new BufferedReader(new InputStreamReader(is));    String line;    while ((line=br.readLine()) != null) {      String[] tok=line.split("\t");      fws.addColumn(tok[0],Integer.parseInt(tok[1]));    }    return fws;  } catch (  Exception e) {    throw new DataIOException(e);  }}  }
class C{  public static String toPercentString(Number number,int scale,int roundingMode){  if (!(number instanceof BigDecimal)) {    number=new BigDecimal(number.doubleValue());  }  BigDecimal bd=(BigDecimal)number;  bd=bd.multiply(new BigDecimal(100.0)).setScale(scale,roundingMode);  return (bd.toString() + "%");}  }
class C{  public ScanResult scanPokemon(Bitmap pokemonImage,int trainerLevel){  double estimatedPokemonLevel=getPokemonLevelFromImg(pokemonImage,trainerLevel);  String pokemonName=getPokemonNameFromImg(pokemonImage);  String candyName=getCandyNameFromImg(pokemonImage);  Optional<Integer> pokemonHP=getPokemonHPFromImg(pokemonImage);  Optional<Integer> pokemonCP=getPokemonCPFromImg(pokemonImage);  Optional<Integer> pokemonCandyAmount=getCandyAmountFromImg(pokemonImage);  Optional<Integer> pokemonUpgradeCost=getPokemonEvolutionCostFromImg(pokemonImage);  return new ScanResult(estimatedPokemonLevel,pokemonName,candyName,pokemonHP,pokemonCP,pokemonCandyAmount,pokemonUpgradeCost);}  }
class C{  private FileHelper(){}  }
class C{  @Override public JsonObject convert(IFeatureRenderer renderer){  RepresentationRenderer representationRenderer=(RepresentationRenderer)renderer;  logger.info(RepresentationRendererKeys.REPRESENTATION_RENDERER);  String value=null;  String referenceValue=null;  int index=-1;  try {    JsonObject jsonObject=new JsonObject();    JsonObject rendererObject=new JsonObject();    JsonArray fieldArray=new JsonArray();    IName dataSourceName=representationRenderer.getDataSourceName();    if (dataSourceName != null) {      rendererObject.addProperty(RepresentationRendererKeys.DATA_SOURCE_NAME,dataSourceName.getNameString());    }    JsonObject invalidRuleColour=CommonObjects.createColour(representationRenderer.getInvalidRuleColor());    if (invalidRuleColour != null) {      rendererObject.add(RepresentationRendererKeys.INVALID_RULE_COLOUR,invalidRuleColour);    }    JsonObject invisibleRuleColour=CommonObjects.createColour(representationRenderer.getInvisibleColor());    if (invisibleRuleColour != null) {      rendererObject.add(RepresentationRendererKeys.INVISIBLE_RULE_COLOUR,invisibleRuleColour);    }    rendererObject.addProperty(RepresentationRendererKeys.RELATIVE_BASE,representationRenderer.getRelativeBase());    JsonObject representationClassObject=getRepresentationClass(representationRenderer.getRepresentationClass());    if (representationClassObject != null) {      rendererObject.add(RepresentationRendererKeys.REPRESENTATION_CLASS,representationClassObject);    }    for (int fieldIndex=0; fieldIndex < representationRenderer.getFieldCount(); fieldIndex++) {      JsonObject jsonValueObject=new JsonObject();      jsonValueObject.addProperty(RepresentationRendererKeys.FIELD_NAME,representationRenderer.getField(fieldIndex));      ITable table=null;      jsonValueObject.addProperty(RepresentationRendererKeys.WHERE_CLAUSE,representationRenderer.getWhereClause(fieldIndex,table));      fieldArray.add(jsonValueObject);    }    rendererObject.addProperty(RepresentationRendererKeys.DRAW_INVALID_RULE,representationRenderer.isDrawInvalidRule());    rendererObject.addProperty(RepresentationRendererKeys.DRAW_INVISIBLE,representationRenderer.isDrawInvisible());    rendererObject.addProperty(CommonRendererKeys.GRADUATED_SYMBOLS,representationRenderer.isSymbolsAreGraduated());    rendererObject.add(RepresentationRendererKeys.FIELDS,fieldArray);    jsonObject.add(RepresentationRendererKeys.REPRESENTATION_RENDERER,rendererObject);    return jsonObject;  } catch (  AutomationException e) {    logger.error(String.format("%s %s %d",value,referenceValue,index));    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();    logger.error(e.getMessage());  }  return null;}  }
class C{  public static DoubleStream shiftingWindowAveragingDouble(DoubleStream doubleStream,int rollingFactor){  Objects.requireNonNull(doubleStream);  RollingOfDoubleSpliterator ofDoubleSpliterator=RollingOfDoubleSpliterator.of(doubleStream.spliterator(),rollingFactor);  return StreamSupport.stream(ofDoubleSpliterator,doubleStream.isParallel()).onClose(null).mapToDouble(null);}  }
class C{  public void onFinish(){}  }
class C{  public float determinant(){  float fA0=m00 * m11 - m01 * m10;  float fA1=m00 * m12 - m02 * m10;  float fA2=m00 * m13 - m03 * m10;  float fA3=m01 * m12 - m02 * m11;  float fA4=m01 * m13 - m03 * m11;  float fA5=m02 * m13 - m03 * m12;  float fB0=m20 * m31 - m21 * m30;  float fB1=m20 * m32 - m22 * m30;  float fB2=m20 * m33 - m23 * m30;  float fB3=m21 * m32 - m22 * m31;  float fB4=m21 * m33 - m23 * m31;  float fB5=m22 * m33 - m23 * m32;  float fDet=fA0 * fB5 - fA1 * fB4 + fA2 * fB3 + fA3 * fB2 - fA4 * fB1 + fA5 * fB0;  return fDet;}  }
class C{  public boolean isApplicable(){  return getViewer() instanceof MainViewer && getDir().getDocument().getNumberOfSamples() > 0;}  }
class C{  public short remove(int offset){  short old=get(offset);  remove(offset,1);  return old;}  }
class C{  @Override public String toString(){  return getClass().getSimpleName() + " [Normal: " + normal+ " - Constant: "+ constant+ "]";}  }
class C{  @Override public boolean validateLabel(String label){  Objects.requireNonNull(label,"label cannot be null");  return !labels.contains(label);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSkillToggleCost_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200334,skillname);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_BINDSTONE_WARNING_REMAIN_TIME(String durationtime0){  return new SM_SYSTEM_MESSAGE(1400169,durationtime0);}  }
class C{  private void updateTexts(DocumentEvent e){  Document doc=e.getDocument();  if (doc == projectNameTextField.getDocument() || doc == projectLocationTextField.getDocument()) {    String projectName=projectNameTextField.getText();    String projectFolder=projectLocationTextField.getText();    createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);  }  panel.fireChangeEvent();}  }
class C{  public TextPartsBuilder addTextPart(@StringRes int textRes){  return addTextPart(mContext.getText(textRes));}  }
class C{  public short[] toNativeArray(){  return toNativeArray(0,_pos);}  }
class C{  private void checkQuartiles(RealDistribution dist,int sampleSize,double tolerance){  final long seed=1000;  RandomDataGenerator randomDataGenerator=RandomDataGenerator.of(new MersenneTwister(seed));  final RandomPercentile randomPercentile=new RandomPercentile(RandomPercentile.DEFAULT_EPSILON,randomDataGenerator,50d);  for (int i=0; i < sampleSize; i++) {    randomPercentile.increment(randomDataGenerator.nextDeviate(dist));  }  final double q1=randomPercentile.getResult(25);  final double q2=randomPercentile.getResult();  final double q3=randomPercentile.getResult(75);  randomDataGenerator.setSeed(seed);  double v;  double ct1=0;  double ct2=0;  double ct3=0;  for (int i=0; i < sampleSize; i++) {    v=randomDataGenerator.nextDeviate(dist);    if (v < q1) {      ct1++;      ct2++;      ct3++;    } else     if (v < q2) {      ct2++;      ct3++;    } else     if (v < q3) {      ct3++;    }  }  assertEquals(0.25,ct1 / sampleSize,tolerance);  assertEquals(0.5,ct2 / sampleSize,tolerance);  assertEquals(0.75,ct3 / sampleSize,tolerance);}  }
class C{  @AfterClass public static void teardownClass(){  System.clearProperty("http.proxyHost");  System.clearProperty("http.proxyPort");  System.clearProperty("http.nonProxyHosts");  System.clearProperty("https.proxyHost");  System.clearProperty("https.proxyPort");  System.clearProperty("ftp.proxyHost");  System.clearProperty("ftp.nonProxyHosts");  System.clearProperty("ftp.proxyPort");  System.clearProperty("socksProxyHost");  System.clearProperty("socksProxyPort");}  }
class C{  public boolean isLongPressDragEnabled(){  return mDefaultItemTouchHelperCallback.isLongPressDragEnabled();}  }
class C{  public static Map<String,Object> ccProcessor(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  GenericValue paymentPref=(GenericValue)context.get("orderPaymentPreference");  GenericValue authTrans=(GenericValue)context.get("authTrans");  String orderId=(String)context.get("orderId");  String cvv2=(String)context.get("cardSecurityCode");  BigDecimal processAmount=(BigDecimal)context.get("processAmount");  GenericValue party=(GenericValue)context.get("billToParty");  GenericValue cc=(GenericValue)context.get("creditCard");  GenericValue payPalPaymentMethod=(GenericValue)context.get("payPalPaymentMethod");  GenericValue ps=(GenericValue)context.get("billingAddress");  String paymentGatewayConfigId=(String)context.get("paymentGatewayConfigId");  String configString=(String)context.get("paymentConfig");  if (configString == null) {    configString="payment.properties";  }  boolean isPayPal=false;  if ("EXT_PAYPAL".equals(paymentPref.getString("paymentMethodTypeId"))) {    isPayPal=true;  }  Map<String,String> data=FastMap.newInstance();  boolean isReAuth=false;  if (isPayPal) {    data.put("TRXTYPE","A");    data.put("TENDER","P");    data.put("ORIGID",payPalPaymentMethod.getString("transactionId"));  } else {    if (authTrans == null) {      authTrans=PaymentGatewayServices.getAuthTransaction(paymentPref);    }    data.put("COMMENT1",orderId);    data.put("PONUM",orderId);    data.put("CUSTCODE",party.getString("partyId"));    if (comparePaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"preAuth",configString,"payment.verisign.preAuth","Y")) {      data.put("TRXTYPE","A");      if (authTrans != null) {        String refNum=authTrans.getString("referenceNum");        data.put("ORIGID",refNum);        isReAuth=true;      }    } else {      data.put("TRXTYPE","S");    }    data.put("TENDER","C");    if (UtilValidate.isNotEmpty(cvv2)) {      data.put("CVV2",cvv2);    }    data.put("ACCT",cc.getString("cardNumber"));    String name=cc.getString("firstNameOnCard") + " " + cc.getString("lastNameOnCard");    data.put("FIRSTNAME",cc.getString("firstNameOnCard"));    data.put("LASTNAME",cc.getString("lastNameOnCard"));    data.put("COMMENT2",name);    if (cc.get("expireDate") != null) {      String exp=cc.getString("expireDate");      String expDate=exp.substring(0,2);      expDate=expDate + exp.substring(exp.length() - 2);      data.put("EXPDATE",expDate);    }    if (ps != null) {      String street=ps.getString("address1") + ((UtilValidate.isNotEmpty(ps.getString("address2"))) ? " " + ps.getString("address2") : "");      data.put("STREET" + "[" + street.length() + "]",street);      data.put("ZIP",ps.getString("postalCode"));    }  }  data.put("AMT",processAmount.toString());  PayflowAPI pfp=init(delegator,paymentGatewayConfigId,configString,context);  StringBuilder params=makeBaseParams(delegator,paymentGatewayConfigId,configString);  params.append("&").append(parseContext(data));  String resp;  if (!comparePaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"enableTransmit",configString,"payment.verisign.enable_transmit","false")) {    resp=pfp.submitTransaction(params.toString(),pfp.generateRequestId());  } else {    resp="RESULT=0&AUTHCODE=T&PNREF=" + (new Date()).getTime() + "&RESPMSG=Testing";  }  if (Debug.verboseOn()) {    Debug.logVerbose("Response from Verisign: " + resp,module);  }  if (isPayPal) {    resp+="&AVSADDR=" + payPalPaymentMethod.getString("avsAddr") + "&AVSZIP="+ payPalPaymentMethod.getString("avsZip");  }  Map<String,Object> result=ServiceUtil.returnSuccess();  parseAuthResponse(delegator,paymentGatewayConfigId,resp,result,configString,isReAuth,isPayPal);  result.put("processAmount",processAmount);  return result;}  }
class C{  public boolean runAfter(java.util.List tasks,int size){  return false;}  }
class C{  @SuppressWarnings("rawtypes") public Expression isInstance(Value obj,Class c){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public static ViewAction checkDescendantViewAction(Matcher<View> viewMatcher,ViewAssertion viewAssertion){  return ViewActions.actionWithAssertions(new CheckDescendantViewAction(viewMatcher,viewAssertion));}  }
class C{  private Bitmap replaceColors(Bitmap srcBitmap,boolean mutateSrc,int keepCr,int keepCg,int keepCb,int replaceColor,int distance,boolean simpleBG){  int[] allpixels=new int[srcBitmap.getHeight() * srcBitmap.getWidth()];  srcBitmap.getPixels(allpixels,0,srcBitmap.getWidth(),0,0,srcBitmap.getWidth(),srcBitmap.getHeight());  int bgColor=replaceColor;  int distanceSq=distance * distance;  if (simpleBG) {    bgColor=allpixels[0];  }  for (int i=0; i < allpixels.length; i++) {    if (allpixels[i] == bgColor) {      allpixels[i]=replaceColor;      continue;    }    int rDiff=keepCr - Color.red(allpixels[i]);    int gDiff=keepCg - Color.green(allpixels[i]);    int bDiff=keepCb - Color.blue(allpixels[i]);    int dSq=rDiff * rDiff + gDiff * gDiff + bDiff * bDiff;    if (dSq > distanceSq) {      allpixels[i]=replaceColor;    }  }  Bitmap dstBitmap;  if (mutateSrc) {    dstBitmap=srcBitmap;  } else {    dstBitmap=Bitmap.createBitmap(srcBitmap.getWidth(),srcBitmap.getHeight(),srcBitmap.getConfig());  }  dstBitmap.setPixels(allpixels,0,srcBitmap.getWidth(),0,0,srcBitmap.getWidth(),srcBitmap.getHeight());  return dstBitmap;}  }
class C{  public boolean intersects(final S1Interval y){  if (isEmpty() || y.isEmpty()) {    return false;  }  if (isInverted()) {    return y.isInverted() || y.lo() <= hi() || y.hi() >= lo();  } else {    if (y.isInverted()) {      return y.lo() <= hi() || y.hi() >= lo();    }    return y.lo() <= hi() && y.hi() >= lo();  }}  }
class C{  public MarketReorderAlbumsQuery before(Integer value){  return unsafeParam("before",value);}  }
class C{  public void startFragment(String fragmentClass,Bundle args){  Intent intent=new Intent(Intent.ACTION_MAIN);  intent.setClass(this,getClass());  intent.putExtra(EXTRA_SHOW_FRAGMENT,fragmentClass);  intent.putExtra(EXTRA_SHOW_FRAGMENT_ARGUMENTS,args);  startActivity(intent);}  }
class C{  public static void o(Z a){  o(a,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);}  }
class C{  public synchronized SlabRef detach(){  if (!isAttached()) {    return null;  }  SlabRef slab=_slab;  _slab=null;  _slabExpiresAt=0;  return slab;}  }
class C{  public PolarLocationAnimator(String group){  super(group);}  }
class C{  public Counter<E> asCounter(){  PriorityQueue<E> pq=clone();  Counter<E> counter=new Counter<>();  while (pq.hasNext()) {    double priority=pq.getPriority();    E element=pq.next();    counter.incrementCount(element,priority);  }  return counter;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSpellATK_Instant_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200963,skilltarget,skillcaster,skillname);}  }
class C{  public AwsIotCompletion(String topic,AWSIotQos qos,byte[] payload,long timeout){  super(topic,qos,payload);  this.timeout=timeout;  this.request=null;  this.isAsync=false;}  }
class C{  public void initWithSaveInstanceState(Bundle savedInstanceState){  this.savedInstanceState=savedInstanceState;}  }
class C{  public static TestLookupDimensionConfig buildStandardLookupDimensionConfig(TestApiDimensionName dimensionName,List<String> namespaces){  return new TestLookupDimensionConfig(buildStandardDimensionConfig(dimensionName),namespaces);}  }
class C{  @deprecated public boolean isFrozen(){  return this._frozen;}  }
class C{  public void delete() throws IOException {  close();  Util.deleteContents(directory);}  }
class C{  @SubscribeEvent public void onRender(RenderTickEvent event){  if (event.phase == Phase.START) {    resizeIfNeeded();  }}  }
class C{  public synchronized boolean holdsLock(String tableName,long transNum,LockType lockType){  return this.databaseLocked && this.databaseTransactionOwner == transNum;}  }
class C{  public static String toString(long l){  StringBuilder sb=new StringBuilder();  for (int i=0; i < 11; i++) {    int t=(int)(l & 0x3f);    l=l >> 6;    sb.append(chars[t]);  }  return sb.reverse().toString();}  }
class C{  private static IConfigElement categoryElement(String category,String name,String tooltip_key){  return new DummyConfigElement.DummyCategoryElement(name,tooltip_key,new ConfigElement(BWConfig.config.getCategory(category)).getChildElements());}  }
class C{  public void reset(){  get();}  }
class C{  public static Map<String,Object> entityMaintPermCheck(DispatchContext dctx,Map<String,? extends Object> context){  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Security security=dctx.getSecurity();  Map<String,Object> resultMap=null;  if (security.hasPermission("ENTITY_MAINT",userLogin)) {    resultMap=ServiceUtil.returnSuccess();    resultMap.put("hasPermission",true);  } else {    resultMap=ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"WebtoolsPermissionError",locale));    resultMap.put("hasPermission",false);  }  return resultMap;}  }
class C{  public static double mean(double[] data,int[] inds){  double mean=0;  for (int i=0; i < inds.length; i++) {    if (Double.isNaN(data[inds[i]]))     throw new IllegalArgumentException("NaN not allowed in mean calculation");    mean+=data[inds[i]];  }  mean/=inds.length;  return mean;}  }
class C{  public ServerConfiguration killBookie(int index) throws Exception {  if (index >= bs.size()) {    throw new IOException("Bookie does not exist");  }  BookieServer server=bs.get(index);  server.shutdown();  stopAutoRecoveryService(server);  bs.remove(server);  return bsConfs.remove(index);}  }
class C{  public boolean isApplicable(){  return getViewer() != null;}  }
class C{  public void remove(int offset,int length){  if (offset < 0 || offset >= _pos) {    throw new ArrayIndexOutOfBoundsException(offset);  }  if (offset == 0) {    System.arraycopy(_data,length,_data,0,_pos - length);  } else   if (_pos - length == offset) {  } else {    System.arraycopy(_data,offset + length,_data,offset,_pos - (offset + length));  }  _pos-=length;}  }
class C{  public static char[] toCharArray(InputStream is,String encoding) throws IOException {  return toCharArray(is,Charsets.toCharset(encoding));}  }
class C{  public static JsonValue value(float value){  if (Float.isInfinite(value) || Float.isNaN(value)) {    throw new IllegalArgumentException("Infinite and NaN values not permitted in JSON");  }  return new JsonNumber(cutOffPointZero(Float.toString(value)));}  }
class C{  @Override public void mouseEntered(MouseEvent e){}  }
class C{  private boolean shouldGiveModelIdValue(String idName,Class<?> idType,long id){  return idName != null && idType != null && id > 0;}  }
class C{  public static LocalDispatcher makeWebappDispatcher(ServletContext servletContext,Delegator delegator){  if (delegator == null) {    Debug.logError("[ContextFilter.init] ERROR: delegator not defined.",module);    return null;  }  String dispatcherName=servletContext.getInitParameter("localDispatcherName");  if (dispatcherName == null) {    Debug.logError("No localDispatcherName specified in the web.xml file",module);    dispatcherName=delegator.getDelegatorName();  }  LocalDispatcher dispatcher=ServiceContainer.getLocalDispatcher(dispatcherName,delegator);  if (dispatcher == null) {    Debug.logError("[ContextFilter.init] ERROR: dispatcher could not be initialized.",module);  }  return dispatcher;}  }
class C{  public SimpleMetricGroup(GroupName name){  name_=name;}  }
class C{  public static Zmat uzmat(int m,int n) throws JampackException {  Zmat zm=new Zmat(m,n);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      zm.re[i][j]=R.nextDouble();      zm.im[i][j]=R.nextDouble();    }  }  return zm;}  }
class C{  public void check(){  for (  Object object : pag.allocSources()) {    handleAllocNode((AllocNode)object);  }  for (  Object object : pag.simpleSources()) {    handleSimples((VarNode)object);  }  for (  Object object : pag.loadSources()) {    handleLoads((FieldRefNode)object);  }  for (  Object object : pag.storeSources()) {    handleStores((VarNode)object);  }  for (  Object object : pag.loadSources()) {    final FieldRefNode fr=(FieldRefNode)object;    fieldToBase.put(fr.getField(),fr.getBase());  }  for (  Object object : pag.storeInvSources()) {    final FieldRefNode fr=(FieldRefNode)object;    fieldToBase.put(fr.getField(),fr.getBase());  }  for (  final VarNode src : pag.getVarNodeNumberer()) {    for (    FieldRefNode fr : src.getAllFieldRefs()) {      for (      VarNode dst : fieldToBase.get(fr.getField())) {        if (!src.getP2Set().hasNonEmptyIntersection(dst.getP2Set()))         continue;        FieldRefNode fr2=dst.dot(fr.getField());        if (fr2.getReplacement() != fr.getReplacement()) {          G.v().out.println("Check failure: " + fr + " should be merged with "+ fr2);        }      }    }  }}  }
class C{  public static void loadResizedImage(final Context _context,final ImageView _imageView,final String _imageUrl,final int _placeHolderResource,final int _width,final int _height){  getBitmapLoader(_context,_imageUrl,_placeHolderResource).override(_width,_height).into(_imageView);}  }
class C{  public ComponentCursor queryComponentCreated(long id){  QueryHelper qh=new QueryHelper();  qh.Columns=null;  qh.Table=S.TABLE_COMPONENTS;  qh.Selection="c." + S.COLUMN_COMPONENTS_CREATED_ITEM_ID + " = ? ";  qh.SelectionArgs=new String[]{"" + id};  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy="c.type";  qh.Limit=null;  return new ComponentCursor(wrapJoinHelper(builderComponent(),qh));}  }
class C{  public static final Future<?> newFollowingToTargetCheckTask(final QuestEnv env,Npc npc,int npcTargetId){  SpawnSearchResult searchResult=DataManager.SPAWNS_DATA2.getFirstSpawnByNpcId(npc.getWorldId(),npcTargetId);  if (searchResult == null) {    throw new IllegalArgumentException("Supplied npc doesn't exist: " + npcTargetId);  }  return ThreadPoolManager.getInstance().scheduleAtFixedRate(new FollowingNpcCheckTask(env,new CoordinateDestinationChecker(npc,searchResult.getSpot().getX(),searchResult.getSpot().getY(),searchResult.getSpot().getZ())),1000,1000);}  }
class C{  public IteratorBuilder eventSessionConfig(EventSessionConfig eventSessionConfig){  this.iteratorConfig.setEventSessionConfig(eventSessionConfig);  return this;}  }
class C{  private void createUI(){  readConfigFile(null,this,"geoserver/GeoServerRandomFill.xml");}  }
class C{  public static final SM_SYSTEM_MESSAGE STR_MSG_UNEQUIP_RANKITEM_TIMER_10M(int value0){  return new SM_SYSTEM_MESSAGE(1401327,new DescriptionId(value0));}  }
class C{  protected void initializePageContainer(){  Composite General_OptionsChild=General_OptionsCreate(getPageContainer());  Composite Input_OptionsChild=Input_OptionsCreate(getPageContainer());  Composite Output_OptionsChild=Output_OptionsCreate(getPageContainer());  Composite Processing_OptionsChild=Processing_OptionsCreate(getPageContainer());  Composite Application_Mode_OptionsChild=Application_Mode_OptionsCreate(getPageContainer());  Composite Input_Attribute_OptionsChild=Input_Attribute_OptionsCreate(getPageContainer());  Composite Annotation_OptionsChild=Annotation_OptionsCreate(getPageContainer());  Composite Miscellaneous_OptionsChild=Miscellaneous_OptionsCreate(getPageContainer());  Composite jbChild=jbCreate(getPageContainer());  Composite jjChild=jjCreate(getPageContainer());  Composite wjppChild=wjppCreate(getPageContainer());  Composite wsppChild=wsppCreate(getPageContainer());  Composite cgChild=cgCreate(getPageContainer());  Composite wstpChild=wstpCreate(getPageContainer());  Composite wsopChild=wsopCreate(getPageContainer());  Composite wjtpChild=wjtpCreate(getPageContainer());  Composite wjopChild=wjopCreate(getPageContainer());  Composite wjapChild=wjapCreate(getPageContainer());  Composite shimpleChild=shimpleCreate(getPageContainer());  Composite stpChild=stpCreate(getPageContainer());  Composite sopChild=sopCreate(getPageContainer());  Composite jtpChild=jtpCreate(getPageContainer());  Composite jopChild=jopCreate(getPageContainer());  Composite japChild=japCreate(getPageContainer());  Composite gbChild=gbCreate(getPageContainer());  Composite gopChild=gopCreate(getPageContainer());  Composite bbChild=bbCreate(getPageContainer());  Composite bopChild=bopCreate(getPageContainer());  Composite tagChild=tagCreate(getPageContainer());  Composite dbChild=dbCreate(getPageContainer());  Composite jbjb_lsChild=jbjb_lsCreate(getPageContainer());  Composite jbjb_aChild=jbjb_aCreate(getPageContainer());  Composite jbjb_uleChild=jbjb_uleCreate(getPageContainer());  Composite jbjb_trChild=jbjb_trCreate(getPageContainer());  Composite jbjb_ulpChild=jbjb_ulpCreate(getPageContainer());  Composite jbjb_lnsChild=jbjb_lnsCreate(getPageContainer());  Composite jbjb_cpChild=jbjb_cpCreate(getPageContainer());  Composite jbjb_daeChild=jbjb_daeCreate(getPageContainer());  Composite jbjb_cp_uleChild=jbjb_cp_uleCreate(getPageContainer());  Composite jbjb_lpChild=jbjb_lpCreate(getPageContainer());  Composite jbjb_neChild=jbjb_neCreate(getPageContainer());  Composite jbjb_uceChild=jbjb_uceCreate(getPageContainer());  Composite jbjb_ttChild=jbjb_ttCreate(getPageContainer());  Composite jjjj_lsChild=jjjj_lsCreate(getPageContainer());  Composite jjjj_aChild=jjjj_aCreate(getPageContainer());  Composite jjjj_uleChild=jjjj_uleCreate(getPageContainer());  Composite jjjj_trChild=jjjj_trCreate(getPageContainer());  Composite jjjj_ulpChild=jjjj_ulpCreate(getPageContainer());  Composite jjjj_lnsChild=jjjj_lnsCreate(getPageContainer());  Composite jjjj_cpChild=jjjj_cpCreate(getPageContainer());  Composite jjjj_daeChild=jjjj_daeCreate(getPageContainer());  Composite jjjj_cp_uleChild=jjjj_cp_uleCreate(getPageContainer());  Composite jjjj_lpChild=jjjj_lpCreate(getPageContainer());  Composite jjjj_neChild=jjjj_neCreate(getPageContainer());  Composite jjjj_uceChild=jjjj_uceCreate(getPageContainer());  Composite cgcg_chaChild=cgcg_chaCreate(getPageContainer());  Composite cgcg_sparkChild=cgcg_sparkCreate(getPageContainer());  Composite cgcg_paddleChild=cgcg_paddleCreate(getPageContainer());  Composite cgSpark_General_OptionsChild=cgSpark_General_OptionsCreate(getPageContainer());  Composite cgSpark_Pointer_Assignment_Graph_Building_OptionsChild=cgSpark_Pointer_Assignment_Graph_Building_OptionsCreate(getPageContainer());  Composite cgSpark_Pointer_Assignment_Graph_Simplification_OptionsChild=cgSpark_Pointer_Assignment_Graph_Simplification_OptionsCreate(getPageContainer());  Composite cgSpark_Points_To_Set_Flowing_OptionsChild=cgSpark_Points_To_Set_Flowing_OptionsCreate(getPageContainer());  Composite cgSpark_Output_OptionsChild=cgSpark_Output_OptionsCreate(getPageContainer());  Composite cgContext_sensitive_refinementChild=cgContext_sensitive_refinementCreate(getPageContainer());  Composite cgGeometric_context_sensitive_analysis_from_ISSTA_2011Child=cgGeometric_context_sensitive_analysis_from_ISSTA_2011Create(getPageContainer());  Composite cgPaddle_General_OptionsChild=cgPaddle_General_OptionsCreate(getPageContainer());  Composite cgPaddle_Context_Sensitivity_OptionsChild=cgPaddle_Context_Sensitivity_OptionsCreate(getPageContainer());  Composite cgPaddle_Pointer_Assignment_Graph_Building_OptionsChild=cgPaddle_Pointer_Assignment_Graph_Building_OptionsCreate(getPageContainer());  Composite cgPaddle_Points_To_Set_Flowing_OptionsChild=cgPaddle_Points_To_Set_Flowing_OptionsCreate(getPageContainer());  Composite cgPaddle_Output_OptionsChild=cgPaddle_Output_OptionsCreate(getPageContainer());  Composite wjtpwjtp_mhpChild=wjtpwjtp_mhpCreate(getPageContainer());  Composite wjtpwjtp_tnChild=wjtpwjtp_tnCreate(getPageContainer());  Composite wjtpwjtp_rdcChild=wjtpwjtp_rdcCreate(getPageContainer());  Composite wjopwjop_smbChild=wjopwjop_smbCreate(getPageContainer());  Composite wjopwjop_siChild=wjopwjop_siCreate(getPageContainer());  Composite wjapwjap_raChild=wjapwjap_raCreate(getPageContainer());  Composite wjapwjap_umtChild=wjapwjap_umtCreate(getPageContainer());  Composite wjapwjap_uftChild=wjapwjap_uftCreate(getPageContainer());  Composite wjapwjap_tqtChild=wjapwjap_tqtCreate(getPageContainer());  Composite wjapwjap_cggChild=wjapwjap_cggCreate(getPageContainer());  Composite wjapwjap_purityChild=wjapwjap_purityCreate(getPageContainer());  Composite sopsop_cpfChild=sopsop_cpfCreate(getPageContainer());  Composite jopjop_cseChild=jopjop_cseCreate(getPageContainer());  Composite jopjop_bcmChild=jopjop_bcmCreate(getPageContainer());  Composite jopjop_lcmChild=jopjop_lcmCreate(getPageContainer());  Composite jopjop_cpChild=jopjop_cpCreate(getPageContainer());  Composite jopjop_cpfChild=jopjop_cpfCreate(getPageContainer());  Composite jopjop_cbfChild=jopjop_cbfCreate(getPageContainer());  Composite jopjop_daeChild=jopjop_daeCreate(getPageContainer());  Composite jopjop_nceChild=jopjop_nceCreate(getPageContainer());  Composite jopjop_uce1Child=jopjop_uce1Create(getPageContainer());  Composite jopjop_ubf1Child=jopjop_ubf1Create(getPageContainer());  Composite jopjop_uce2Child=jopjop_uce2Create(getPageContainer());  Composite jopjop_ubf2Child=jopjop_ubf2Create(getPageContainer());  Composite jopjop_uleChild=jopjop_uleCreate(getPageContainer());  Composite japjap_npcChild=japjap_npcCreate(getPageContainer());  Composite japjap_npcolorerChild=japjap_npcolorerCreate(getPageContainer());  Composite japjap_abcChild=japjap_abcCreate(getPageContainer());  Composite japjap_profilingChild=japjap_profilingCreate(getPageContainer());  Composite japjap_seaChild=japjap_seaCreate(getPageContainer());  Composite japjap_fieldrwChild=japjap_fieldrwCreate(getPageContainer());  Composite japjap_cgtaggerChild=japjap_cgtaggerCreate(getPageContainer());  Composite japjap_parityChild=japjap_parityCreate(getPageContainer());  Composite japjap_patChild=japjap_patCreate(getPageContainer());  Composite japjap_lvtaggerChild=japjap_lvtaggerCreate(getPageContainer());  Composite japjap_rdtaggerChild=japjap_rdtaggerCreate(getPageContainer());  Composite japjap_cheChild=japjap_cheCreate(getPageContainer());  Composite japjap_umtChild=japjap_umtCreate(getPageContainer());  Composite japjap_litChild=japjap_litCreate(getPageContainer());  Composite japjap_aetChild=japjap_aetCreate(getPageContainer());  Composite japjap_dmtChild=japjap_dmtCreate(getPageContainer());  Composite gbgb_a1Child=gbgb_a1Create(getPageContainer());  Composite gbgb_cfChild=gbgb_cfCreate(getPageContainer());  Composite gbgb_a2Child=gbgb_a2Create(getPageContainer());  Composite gbgb_uleChild=gbgb_uleCreate(getPageContainer());  Composite bbbb_lsoChild=bbbb_lsoCreate(getPageContainer());  Composite bbbb_phoChild=bbbb_phoCreate(getPageContainer());  Composite bbbb_uleChild=bbbb_uleCreate(getPageContainer());  Composite bbbb_lpChild=bbbb_lpCreate(getPageContainer());  Composite tagtag_lnChild=tagtag_lnCreate(getPageContainer());  Composite tagtag_anChild=tagtag_anCreate(getPageContainer());  Composite tagtag_depChild=tagtag_depCreate(getPageContainer());  Composite tagtag_fieldrwChild=tagtag_fieldrwCreate(getPageContainer());  Composite dbdb_transformationsChild=dbdb_transformationsCreate(getPageContainer());  Composite dbdb_renamerChild=dbdb_renamerCreate(getPageContainer());  Composite dbdb_deobfuscateChild=dbdb_deobfuscateCreate(getPageContainer());  Composite dbdb_force_recompileChild=dbdb_force_recompileCreate(getPageContainer());  addOtherPages(getPageContainer());  initializeRadioGroups();  initializeEnableGroups();}  }
class C{  public IntStringTranslator(String[] strings){  list=new ArrayList<String>(Arrays.asList(strings));  map=new HashMap<String,Integer>();  for (int i=0; i < strings.length; i++) {    map.put(strings[i],i);  }}  }
class C{  public static <K,R>Observable<R> switchCase(Callable<? extends K> caseSelector,Map<? super K,? extends ObservableSource<? extends R>> mapOfCases,Scheduler scheduler){  return switchCase(caseSelector,mapOfCases,Observable.<R>empty().subscribeOn(scheduler));}  }
class C{  public Vector multiply(double m){  x*=m;  y*=m;  z*=m;  return this;}  }
class C{  public void crawl() throws Exception {  Connection conn=null;  try {    conn=getConnection();    final Statement stmt=conn.createStatement();    processResult(stmt.executeQuery(firstQuery));    stmt.close();  } catch (  Exception e) {    throw e;  } finally {    closeConnection(conn);  }  completeLatch.await();  while (this.threadPool.getTaskCount() != 0 && this.threadPool.getActiveCount() != 0) {    Thread.sleep(1);  }  if (exception != null) {    throw exception;  }}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  public void write(int b) throws IOException {  raf.write(b);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GET_EXP_MAKEUP_BONUS(String value0,long num1,long num2){  return new SM_SYSTEM_MESSAGE(1400343,value0,num1,num2);}  }
class C{  public void testImportSubprojects() throws IOException, ConfigurationException {  String[] paths={module(1),module(2),SAMPLE_PROJECT_PATH};  VirtualFile projectRoot=createProjectWithSubprojects(projectsWithDefaultLocations(paths));  Map<String,VirtualFile> toImport=moduleListToMap(GradleModuleImporter.getRelatedProjects(projectRoot,getProject()));  assertEquals(paths.length,toImport.size());  for (  String path : paths) {    assertEquals(projectRoot.findFileByRelativePath(path),toImport.get(pathToGradleName(path)));  }  GradleModuleImporter.importModules(this,toImport,getProject(),null);  for (  String path : paths) {    VirtualFile moduleRoot=projectRoot.findFileByRelativePath(path);    assertNotNull(String.format("Module was not imported into %s\n",projectRoot.getPath() + "/" + path),moduleRoot);    assertModuleImported(getProject(),path,moduleRoot);  }  System.out.println();}  }
class C{  public int log10K(){  return exp - 1;}  }
class C{  public static double[] pageRank(MatrixInterface preparedMatrix,int maxIteration,double d,double[] init){  double[] impact=new double[preparedMatrix.getRowsCount()];  for (int i=0; i != init.length; i++)   impact[i]=DEFAULT_I;  return pageRank(preparedMatrix,maxIteration,d,init,impact);}  }
class C{  public static ShoppingCartItem makeItem(Integer cartLocation,GenericValue product,BigDecimal selectedAmount,BigDecimal quantity,BigDecimal unitPrice,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,String accommodationMapId,String accommodationSpotId,Timestamp shipBeforeDate,Timestamp shipAfterDate,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,LocalDispatcher dispatcher,ShoppingCart cart,Boolean triggerExternalOpsBool,Boolean triggerPriceRulesBool,GenericValue parentProduct,Boolean skipInventoryChecks,Boolean skipProductChecks) throws CartItemModifyException {  ShoppingCartItem newItem=new ShoppingCartItem(product,additionalProductFeatureAndAppls,attributes,prodCatalogId,configWrapper,cart.getLocale(),itemType,itemGroup,parentProduct);  selectedAmount=selectedAmount == null ? BigDecimal.ZERO : selectedAmount;  unitPrice=unitPrice == null ? BigDecimal.ZERO : unitPrice;  reservLength=reservLength == null ? BigDecimal.ZERO : reservLength;  reservPersons=reservPersons == null ? BigDecimal.ZERO : reservPersons;  boolean triggerPriceRules=triggerPriceRulesBool == null ? true : triggerPriceRulesBool.booleanValue();  boolean triggerExternalOps=triggerExternalOpsBool == null ? true : triggerExternalOpsBool.booleanValue();  if ("Y".equals(product.getString("isVirtual"))) {    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productName",product.getString("productName"),"productId",product.getString("productId"));    String excMsg=UtilProperties.getMessage(resource_error,"item.cannot_add_product_virtual",messageMap,cart.getLocale());    Debug.logWarning(excMsg,module);    throw new CartItemModifyException(excMsg);  }  java.sql.Timestamp nowTimestamp=UtilDateTime.nowTimestamp();  if (!skipProductChecks.booleanValue()) {    isValidCartProduct(configWrapper,product,nowTimestamp,cart.getLocale());  }  if ("ASSET_USAGE".equals(product.getString("productTypeId")) || "ASSET_USAGE_OUT_IN".equals(product.getString("productTypeId"))) {    if (reservStart == null) {      String excMsg=UtilProperties.getMessage(resource_error,"item.missing_reservation_starting_date",cart.getLocale());      throw new CartItemModifyException(excMsg);    }    if (reservStart.before(UtilDateTime.nowTimestamp())) {      String excMsg=UtilProperties.getMessage(resource_error,"item.reservation_from_tomorrow",cart.getLocale());      throw new CartItemModifyException(excMsg);    }    newItem.setReservStart(reservStart);    if (reservLength.compareTo(BigDecimal.ONE) < 0) {      String excMsg=UtilProperties.getMessage(resource_error,"item.number_of_days",cart.getLocale());      throw new CartItemModifyException(excMsg);    }    newItem.setReservLength(reservLength);    if (product.get("reservMaxPersons") != null) {      BigDecimal reservMaxPersons=product.getBigDecimal("reservMaxPersons");      if (reservMaxPersons.compareTo(reservPersons) < 0) {        Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("reservMaxPersons",product.getBigDecimal("reservMaxPersons"),"reservPersons",reservPersons);        String excMsg=UtilProperties.getMessage(resource_error,"item.maximum_number_of_person_renting",messageMap,cart.getLocale());        Debug.logInfo(excMsg,module);        throw new CartItemModifyException(excMsg);      }    }    newItem.setReservPersons(reservPersons);    if (product.get("reserv2ndPPPerc") != null)     newItem.setReserv2ndPPPerc(product.getBigDecimal("reserv2ndPPPerc"));    if (product.get("reservNthPPPerc") != null)     newItem.setReservNthPPPerc(product.getBigDecimal("reservNthPPPerc"));    if ((accommodationMapId != null) && (accommodationSpotId != null)) {      newItem.setAccommodationId(accommodationMapId,accommodationSpotId);    }    String isAvailable=checkAvailability(product.getString("productId"),quantity,reservStart,reservLength,cart);    if (isAvailable.compareTo("OK") != 0) {      Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productId",product.getString("productId"),"availableMessage",isAvailable);      String excMsg=UtilProperties.getMessage(resource_error,"item.product_not_available",messageMap,cart.getLocale());      Debug.logInfo(excMsg,module);      throw new CartItemModifyException(isAvailable);    }  }  newItem.setShipBeforeDate(shipBeforeDate != null ? shipBeforeDate : cart.getDefaultShipBeforeDate());  newItem.setShipAfterDate(shipAfterDate != null ? shipAfterDate : cart.getDefaultShipAfterDate());  newItem.setBasePrice(unitPrice);  if (cartLocation == null) {    cart.addItemToEnd(newItem);  } else {    cart.addItem(cartLocation.intValue(),newItem);  }  if (selectedAmount.compareTo(BigDecimal.ZERO) > 0) {    newItem.setSelectedAmount(selectedAmount);  }  try {    newItem.setQuantity(quantity,dispatcher,cart,triggerExternalOps,true,triggerPriceRules,skipInventoryChecks.booleanValue());  } catch (  CartItemModifyException e) {    Debug.logWarning(e.getMessage(),module);    cart.removeCartItem(cart.getItemIndex(newItem),triggerExternalOps,dispatcher);    cart.clearItemShipInfo(newItem);    cart.removeEmptyCartItems();    throw e;  }  return newItem;}  }
class C{  public boolean containsKey(int key){  return contains(key);}  }
class C{  public FriendsGetSuggestionsQuery fields(UserField... value){  return unsafeParam("fields",value);}  }
class C{  private void preOnCreate(){  if (!getClass().getSimpleName().equals("RubotoService")) {    System.out.println("RubotoService preOnCreate(): " + getClass().getName());    getScriptInfo().setRubyClassName(getClass().getSimpleName());    JRubyAdapter.setUpJRuby(this);  }}  }
class C{  public void print(){  System.out.println("mean:");  mean.print(6,3);  System.out.println("covariance matrix:");  covariances.print(6,3);  System.out.println("component weight:");  System.out.println(componentWeight);  System.out.println("---------------------------------------------");}  }
class C{  protected OutputStream to(){  return to;}  }
class C{  public void displayMessage(final SimpleMqttMessage message){  if (message == null) {    publicationTopicText.setValue("");    publicationTopicText.setPromptText("(cannot be empty)");    publicationQosChoice.getSelectionModel().select(0);    publicationData.clear();    retainedBox.setSelected(false);  } else {    publicationTopicText.setValue(message.getTopic());    publicationQosChoice.getSelectionModel().select(message.getQos());    publicationData.clear();    publicationData.appendText(message.getValue());    retainedBox.setSelected(message.isRetained());  }}  }
class C{  public ExtendedIndexIterator<TemplateCacheInfo> establishScan(K startPos,short relation,K endPos,boolean endPosInclusive){  return establishScan(startPos,relation,endPos,endPosInclusive,false);}  }
class C{  protected void onModelUnbound(EpoxyViewHolder holder,EpoxyModel<?> model){}  }
class C{  public void onLeaveZone(ZoneInstance zoneInstance){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CarveSignet_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200797,skillcaster,num0,skillname);}  }
class C{  @Override public Long processIdentifier(Object id){  Objects.requireNonNull(id,"Element identifier cannot be null");  if (id instanceof Long)   return (Long)id;  if (id instanceof Number)   return ((Number)id).longValue();  if (id instanceof String)   return Long.valueOf((String)id);  throw new IllegalArgumentException(String.format("Expected an id that is convertible to Long but received %s",id.getClass()));}  }
class C{  private String positiveInteger2RelativeValues(String rateAttribute){  double positiveNumber=(new Float(rateAttribute)).doubleValue();  double relativePercentage=(positiveNumber * 100.0);  if (relativePercentage > 100) {    return "+" + df.format((relativePercentage - 100)) + "%";  }  return "-" + df.format((100 - relativePercentage)) + "%";}  }
class C{  public static short swapShort(short value){  return (short)((((value >> 0) & 0xff) << 8) + (((value >> 8) & 0xff) << 0));}  }
class C{  @Override public boolean isDataPresent(){  return true;}  }
class C{  public static Date millisecondsToDate(long milliseconds){  return new Date(milliseconds);}  }
class C{  private void writeVersionFile() throws IOException {  RandomAccessFile out=new RandomAccessFile(fName(versionFile),"rw");  try {    writeInt(out,version);    out.getFD().sync();  }  finally {    out.close();  }}  }
class C{  private boolean hasNext(){  return this.fileCounter > 0;}  }
class C{  public JsonObject add(String name,JsonValue value){  if (name == null) {    throw new NullPointerException("name is null");  }  if (value == null) {    throw new NullPointerException("value is null");  }  table.add(name,names.size());  names.add(name);  values.add(value);  return this;}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if (object == null) {    return false;  }  if (getClass() != object.getClass()) {    return false;  }  final ValidationResult other=(ValidationResult)object;  if (period == null) {    if (other.period != null) {      return false;    }  } else   if (!period.equals(other.period)) {    return false;  }  if (attributeOptionCombo == null) {    if (other.attributeOptionCombo != null) {      return false;    }  } else   if (attributeOptionCombo.getId() != other.attributeOptionCombo.getId()) {    return false;  }  if (orgUnit == null) {    if (other.orgUnit != null) {      return false;    }  } else   if (!orgUnit.equals(other.orgUnit)) {    return false;  }  if (validationRule == null) {    if (other.validationRule != null) {      return false;    }  } else   if (!validationRule.equals(other.validationRule)) {    return false;  }  if (leftsideValue == null) {    if (other.leftsideValue != null) {      return false;    }  } else   if (other.leftsideValue == null) {    return false;  } else   if (Math.round(100.0 * leftsideValue) != Math.round(100.0 * other.leftsideValue)) {    return false;  }  if (rightsideValue == null) {    if (other.rightsideValue != null) {      return false;    }  } else   if (other.rightsideValue == null) {    return false;  } else   if (Math.round(100.0 * leftsideValue) != Math.round(100.0 * other.leftsideValue)) {    return false;  }  return true;}  }
class C{  private static boolean eq(Object o1,Object o2){  return (o1 == null ? o2 == null : o1.equals(o2));}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public void removeListeners(String tag){}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public BooleanType fullCopy(){  BooleanType tree=(BooleanType)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public void calculateNormal(){  if (normal == null) {    normal=new Vector3f(pointb);  } else {    normal.set(pointb);  }  normal.subtractLocal(pointa).crossLocal(pointc.x - pointa.x,pointc.y - pointa.y,pointc.z - pointa.z);  normal.normalizeLocal();}  }
class C{  private void loadStats(String resource,Object u) throws Exception {  DescriptiveStatistics d=null;  StreamingStatistics s=null;  if (u instanceof DescriptiveStatistics) {    d=(DescriptiveStatistics)u;    d.clear();  } else {    s=(StreamingStatistics)u;    s.clear();  }  mean=Double.NaN;  std=Double.NaN;  InputStream resourceAsStream=CertifiedDataTest.class.getResourceAsStream(resource);  Assert.assertNotNull("Could not find resource " + resource,resourceAsStream);  BufferedReader in=new BufferedReader(new InputStreamReader(resourceAsStream));  String line=null;  for (int j=0; j < 60; j++) {    line=in.readLine();    if (j == 40) {      mean=Double.parseDouble(line.substring(line.lastIndexOf(":") + 1).trim());    }    if (j == 41) {      std=Double.parseDouble(line.substring(line.lastIndexOf(":") + 1).trim());    }  }  line=in.readLine();  while (line != null) {    if (d != null) {      d.addValue(Double.parseDouble(line.trim()));    } else {      s.addValue(Double.parseDouble(line.trim()));    }    line=in.readLine();  }  resourceAsStream.close();  in.close();}  }
class C{  public void updateTree(){  final PhyloTree tree=getTree();  if (hasSyncedFormatFromSummaryToViewer)   SyncDataTableAndClassificationViewer.syncFormattingFromViewer2Summary(this,doc.getDataTable());  classification.getFullTree().extractInducedTree(id2NodeData,getCollapsedIds(),tree,id2Nodes);  nodeDrawer.setCounts(determineMaxAssigned());  if (tree.getRoot() != null) {    embedTree(tree.getRoot());  }  nodesWithMovedLabels.clear();  trans.setCoordinateRect(getBBox());  Rectangle rect=new Rectangle();  trans.w2d(getBBox(),rect);  setPreferredSize(rect.getSize());  if (tree.getRoot() != null) {    for (Edge e=tree.getRoot().getFirstOutEdge(); e != null; e=tree.getRoot().getNextOutEdge(e)) {      Node v=e.getTarget();      if ((Integer)v.getInfo() >= -3 && (Integer)v.getInfo() <= -1) {        setColor(e,Color.LIGHT_GRAY);        setColor(v,Color.LIGHT_GRAY);        setLabelColor(v,Color.LIGHT_GRAY);      }    }    setColor(getTree().getRoot(),Color.LIGHT_GRAY);    setLabelColor(getTree().getRoot(),Color.LIGHT_GRAY);    for (Edge e=tree.getRoot().getFirstOutEdge(); e != null; e=tree.getRoot().getNextOutEdge(e))     setColor(e,Color.LIGHT_GRAY);    if (getNumberOfDatasets() > 1 && nodeDrawer.getStyle() == NodeDrawer.Style.Circle) {      legendPanel.setStyle(getNodeDrawer().getStyle());    }    setupNodeLabels(false);  }  fitGraphToWindow();  if (!hasSyncedFormatFromSummaryToViewer) {    SyncDataTableAndClassificationViewer.syncFormattingFromSummary2Viewer(doc.getDataTable(),this);    hasSyncedFormatFromSummaryToViewer=true;  }  repaint();  updateStatusBar();  setPOWEREDBY(getMajorityRankOfLeaves());  viewerJTable.update();  viewerJTree.update();}  }
class C{  private void checkLiteralValue(String message,Expression expression,double expectedValue){  Assert.assertEquals(expression.getClass(),LiteralExpressionImpl.class);  LiteralExpressionImpl literalExpression=(LiteralExpressionImpl)expression;  Object value=literalExpression.getValue();  Assert.assertEquals(message,value.getClass(),Double.class);  Double actualValue=(Double)value;  String additional=String.format(" Expected '%f' Actual '%f'",expectedValue,actualValue);  Assert.assertTrue(message + additional,Math.abs(expectedValue - actualValue) < epsilon);}  }
class C{  public ShardRouterException(Throwable cause){  super(cause);}  }
class C{  private void unpausePathEdgesForSource(LeakKey<N> leakKey){  Set<PausedEdge> pausedEdges=pausedPathEdges.get(leakKey);  if (pausedEdges != null) {    for (    PausedEdge edge : pausedEdges) {      if (pausedEdges.remove(edge)) {        if (DEBUG)         logger.debug("-- UNPAUSE {}: {}",debugName,edge);        super.propagateUnbalancedReturnFlow(edge.retSiteC,edge.targetVal,edge.edgeFunction,edge.relatedCallSite);      }    }  }}  }
class C{  public MersenneTwister(){  mt=new int[N];  setSeed(System.currentTimeMillis() + System.identityHashCode(this));}  }
class C{  public static LogicalMetricColumn addNewLogicalMetricColumn(Schema schema,String name,LogicalMetric metric){  LogicalMetricColumn col=new LogicalMetricColumn(name,metric);  schema.addColumn(col);  return col;}  }
class C{  private int sampleLine(ResultPoint p1,ResultPoint p2,int size){  int result=0;  float d=distance(p1,p2);  float moduleSize=d / size;  float px=p1.getX();  float py=p1.getY();  float dx=moduleSize * (p2.getX() - p1.getX()) / d;  float dy=moduleSize * (p2.getY() - p1.getY()) / d;  for (int i=0; i < size; i++) {    if (image.get(MathUtils.round(px + i * dx),MathUtils.round(py + i * dy))) {      result|=1 << (size - i - 1);    }  }  return result;}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.getPcoaTab() != null && viewer.getPcoaTab().getFirstPC() == 0 && viewer.getPcoaTab().getSecondPC() == 1 && viewer.getPcoaTab().getThirdPC() == 2 && viewer.getPcoaTab().isIs3dMode();}  }
class C{  protected AdsDeleteAdsQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  public ThrowableSet mightThrowImplicitly(ThrowInst t){  return ThrowableSet.Manager.v().ALL_THROWABLES;}  }
class C{  private int[] blackWhiteRange(int fixedDimension,int maxWhiteRun,int minDim,int maxDim,boolean horizontal){  int center=(minDim + maxDim) / 2;  int start=center;  while (start >= minDim) {    if (horizontal ? image.get(start,fixedDimension) : image.get(fixedDimension,start)) {      start--;    } else {      int whiteRunStart=start;      do {        start--;      } while (start >= minDim && !(horizontal ? image.get(start,fixedDimension) : image.get(fixedDimension,start)));      int whiteRunSize=whiteRunStart - start;      if (start < minDim || whiteRunSize > maxWhiteRun) {        start=whiteRunStart;        break;      }    }  }  start++;  int end=center;  while (end < maxDim) {    if (horizontal ? image.get(end,fixedDimension) : image.get(fixedDimension,end)) {      end++;    } else {      int whiteRunStart=end;      do {        end++;      } while (end < maxDim && !(horizontal ? image.get(end,fixedDimension) : image.get(fixedDimension,end)));      int whiteRunSize=end - whiteRunStart;      if (end >= maxDim || whiteRunSize > maxWhiteRun) {        end=whiteRunStart;        break;      }    }  }  end--;  return end > start ? new int[]{start,end} : null;}  }
class C{  private void sendProcessDisconnectionRequest(){  EasyMock.expect(this.configurationControllerMock.getProcessConfiguration()).andReturn(this.processConfigurationMock).times(1);  EasyMock.expect(this.processConfigurationMock.getProcessID()).andReturn(-1L).times(1,2);  EasyMock.expect(this.processConfigurationMock.getProcessName()).andReturn(PROCESS_NAME).times(1,3);  EasyMock.expect(this.processConfigurationMock.getprocessPIK()).andReturn(PROCESS_PIK).times(1,2);  EasyMock.replay(this.configurationControllerMock,this.processConfigurationMock);  this.activeRequestSender.sendProcessDisconnectionRequest(this.configurationControllerMock.getProcessConfiguration(),-1L);  EasyMock.verify(this.configurationControllerMock,this.processConfigurationMock);}  }
class C{  public static String readStringFromFile(String path,JavaSparkContext sc) throws IOException {  return readStringFromFile(path,sc.sc());}  }
class C{  public boolean hasDiphone(String diphone){  return !(missingDiphones != null && missingDiphones.contains(diphone));}  }
class C{  public static int expForDefence(Creature attacker,Creature defenced){  float attackerCost=getTotalCost(attacker);  float defencedCost=getTotalCost(defenced);  return result(ln(attackerCost / 1.3f - defencedCost * 1.7f));}  }
class C{  @Transactional public UserDTO save(UserDTO dto){  if (dto == null) {    return null;  }  User user;  if (dto.isIdSet()) {    user=userRepository.findOne(dto.id);  } else {    user=new User();  }  user.setLogin(dto.login);  user.setPassword(dto.password);  user.setEmail(dto.email);  user.setIsEnabled(dto.isEnabled);  user.setCivility(dto.civility);  user.setFirstName(dto.firstName);  user.setLastName(dto.lastName);  user.setCreationDate(dto.creationDate);  user.setCreationAuthor(dto.creationAuthor);  user.setLastModificationDate(dto.lastModificationDate);  user.setLastModificationAuthor(dto.lastModificationAuthor);  user.setVersion(dto.version);  user.getRoles().clear();  if (dto.roles != null) {    dto.roles.stream().forEach(null);  }  return toDTO(userRepository.save(user));}  }
class C{  @RequestProcessing(value="/qq",method=HTTPRequestMethod.POST) public void qq(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final String key=XiaoVs.getString("qq.bot.key");  if (!key.equals(request.getParameter("key"))) {    response.sendError(HttpServletResponse.SC_FORBIDDEN);    return;  }  String msg=request.getParameter("msg");  if (StringUtils.isBlank(msg)) {    LOGGER.warn("Empty msg body");    response.sendError(HttpServletResponse.SC_BAD_REQUEST);    return;  }  LOGGER.info("Push QQ groups [msg=" + msg + "]");  qqService.sendToPushQQGroups(msg);  final JSONObject ret=new JSONObject();  context.renderJSON(ret);  ret.put(Keys.STATUS_CODE,true);}  }
class C{  private void initView(){  initBasicPart();  initFilterPart();  initDownloadPart();}  }
class C{  public synchronized boolean unexport(boolean force){  if (!used) {    throw new IllegalStateException("an object has not been exported via this exporter");  }  return underlyingExporter.unexport(force);}  }
class C{  private Token pollNext(){  Token result=currentToken;  if (matcher.find()) {    if (index < matcher.start()) {      currentToken=new Token(TokenKind.TEXT,source.substring(index,matcher.start()),lineNum);      index=matcher.start();      matcher.region(index,matcher.regionEnd());    } else {      currentToken=createTokenFromMatcher();      index=matcher.end();    }  } else {    if (index < source.length()) {      currentToken=new Token(TokenKind.TEXT,source.substring(index),lineNum);      index=source.length();    } else {      currentToken=null;    }  }  return result;}  }
class C{  @Override public int available(){  int available=currentlyInBuffer();  if (inputSource != null)   available+=inputSource.available();  return available;}  }
class C{  public void print(){  if (DEBUG_PRINT_REF_COUNTS) {    System.out.print("num\t");    System.out.print("type\t");    System.out.print("name\t");    System.out.print("val\t");    System.out.print("par\t");    System.out.print("lch\t");    System.out.print("psib");    System.out.println();    for (int i=0; i < fNodeType.length; i++) {      if (fNodeType[i] != null) {        System.out.print("--------");        System.out.print("--------");        System.out.print("--------");        System.out.print("--------");        System.out.print("--------");        System.out.print("--------");        System.out.print("--------");        System.out.println();        System.out.print(i);        System.out.print('\t');switch (fNodeType[i][CHUNK_SIZE]) {case NodeImpl.ELEMENT_DEFINITION_NODE:{            System.out.print("EDef");            break;          }case Node.DOCUMENT_NODE:{          System.out.print("Doc");          break;        }case Node.DOCUMENT_TYPE_NODE:{        System.out.print("DType");        break;      }case Node.COMMENT_NODE:{      System.out.print("Com");      break;    }case Node.PROCESSING_INSTRUCTION_NODE:{    System.out.print("PI");    break;  }case Node.ELEMENT_NODE:{  System.out.print("Elem");  break;}case Node.ENTITY_NODE:{System.out.print("Ent");break;}case Node.ENTITY_REFERENCE_NODE:{System.out.print("ERef");break;}case Node.TEXT_NODE:{System.out.print("Text");break;}case Node.ATTRIBUTE_NODE:{System.out.print("Attr");break;}case DeferredNode.TYPE_NODE:{System.out.print("TypeInfo");break;}default :{System.out.print("?" + fNodeType[i][CHUNK_SIZE]);}}System.out.print('\t');System.out.print(fNodeName[i][CHUNK_SIZE]);System.out.print('\t');System.out.print(fNodeValue[i][CHUNK_SIZE]);System.out.print('\t');System.out.print(fNodeURI[i][CHUNK_SIZE]);System.out.print('\t');System.out.print(fNodeParent[i][CHUNK_SIZE]);System.out.print('\t');System.out.print(fNodeLastChild[i][CHUNK_SIZE]);System.out.print('\t');System.out.print(fNodePrevSib[i][CHUNK_SIZE]);System.out.print('\t');System.out.print(fNodeExtra[i][CHUNK_SIZE]);System.out.println();}}}if (DEBUG_PRINT_TABLES) {System.out.println("# start table");for (int i=0; i < fNodeCount; i++) {int chunk=i >> CHUNK_SHIFT;int index=i & CHUNK_MASK;if (i % 10 == 0) {System.out.print("num\t");System.out.print("type\t");System.out.print("name\t");System.out.print("val\t");System.out.print("uri\t");System.out.print("par\t");System.out.print("lch\t");System.out.print("psib\t");System.out.print("xtra");System.out.println();}System.out.print(i);System.out.print('\t');switch (getChunkIndex(fNodeType,chunk,index)) {case NodeImpl.ELEMENT_DEFINITION_NODE:{System.out.print("EDef");break;}case Node.DOCUMENT_NODE:{System.out.print("Doc");break;}case Node.DOCUMENT_TYPE_NODE:{System.out.print("DType");break;}case Node.COMMENT_NODE:{System.out.print("Com");break;}case Node.PROCESSING_INSTRUCTION_NODE:{System.out.print("PI");break;}case Node.ELEMENT_NODE:{System.out.print("Elem");break;}case Node.ENTITY_NODE:{System.out.print("Ent");break;}case Node.ENTITY_REFERENCE_NODE:{System.out.print("ERef");break;}case Node.TEXT_NODE:{System.out.print("Text");break;}case Node.ATTRIBUTE_NODE:{System.out.print("Attr");break;}case DeferredNode.TYPE_NODE:{System.out.print("TypeInfo");break;}default :{System.out.print("?" + getChunkIndex(fNodeType,chunk,index));}}System.out.print('\t');System.out.print(getChunkValue(fNodeName,chunk,index));System.out.print('\t');System.out.print(getNodeValue(chunk,index));System.out.print('\t');System.out.print(getChunkValue(fNodeURI,chunk,index));System.out.print('\t');System.out.print(getChunkIndex(fNodeParent,chunk,index));System.out.print('\t');System.out.print(getChunkIndex(fNodeLastChild,chunk,index));System.out.print('\t');System.out.print(getChunkIndex(fNodePrevSib,chunk,index));System.out.print('\t');System.out.print(getChunkIndex(fNodeExtra,chunk,index));System.out.println();}System.out.println("# end table");}}  }
class C{  public Door(final TreeSpecies species,BlockFace face){  this(getWoodDoorOfSpecies(species),face,false);}  }
class C{  @Override public SourceDataTag clone(){  SourceDataTag clonedSourceDataTag=null;  try {    clonedSourceDataTag=(SourceDataTag)super.clone();    if (this.address != null) {      clonedSourceDataTag.setAddress(this.address.clone());    }    if (this.currentValue != null) {      clonedSourceDataTag.currentValue=this.currentValue.clone();    }  } catch (  CloneNotSupportedException e) {    e.printStackTrace();  }  return clonedSourceDataTag;}  }
class C{  public boolean isContent(){  return isOptionEnabled(UrlFilterRuleOption.CONTENT);}  }
class C{  private void initPresenter(){  this.multiFilterBarPresenter=new MultiFilterBarImplementor(multiFilterBarModel,this);  this.popupManagePresenter=new MultiFilterFragmentPopupManageImplementor(this);  this.messageManagePresenter=new MessageManageImplementor(this);}  }
class C{  public CandidateEstimator(DoubleDataSource signal,Window window,int frameShift,int samplingRate){  super(signal,window,frameShift,samplingRate,NCANDIDATES);  this.correlationInput=new double[MathUtils.closestPowerOfTwoAbove(2 * window.getLength())];  this.minF0=DEFAULT_MINF0;  this.maxF0=DEFAULT_MAXF0;}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public static void i(String tag,String msg,Object... args){  if (sLevel > LEVEL_INFO) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.i(tag,msg);}  }
class C{  public void startHorizontalAnimate(){  isPlaying=true;  invalidate();}  }
class C{  protected AudioDeleteQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public static float toFloatBits(int r,int g,int b,int a){  int color=(a << 24) | (b << 16) | (g << 8)| r;  float floatColor=NumberUtils.intToFloatColor(color);  return floatColor;}  }
class C{  public static String loadFileToStringWithNewlines(String sFilename){  StringBuffer sb=new StringBuffer();  try {    BufferedReader in=new BufferedReader(new FileReader(sFilename));    String line;    while ((line=in.readLine()) != null) {      sb.append(line);      sb.append("\n");    }    in.close();  } catch (  Exception e) {    System.err.println("Coult not load file:" + sFilename);    e.printStackTrace(System.err);  }  return sb.toString();}  }
class C{  private void updateDimensionRow(Document luceneDimensionRowDoc,Map<DimensionField,Field> fieldMap,IndexWriter writer,DimensionRow newRow) throws IOException {  for (  DimensionField field : dimension.getDimensionFields()) {    Field fieldToUpdate=fieldMap.get(field);    fieldToUpdate.setStringValue(newRow.get(field));  }  Term keyTerm=new Term(fieldMap.get(dimension.getKey()).name(),newRow.get(dimension.getKey()));  writer.updateDocument(keyTerm,luceneDimensionRowDoc);}  }
class C{  private Map<String,List<ChartObject>> convertResult(StatisticsDocumentHandler handler){  Map<String,List<ChartObject>> asResult=new HashMap<>();  List<ChartObject> initial=handler.getResult();  final ChartObject chartObject=new ChartObject();  chartObject.setValues(new HashMap<>());  asResult.put(RESULT,Collections.singletonList(!initial.isEmpty() ? initial.get(0) : chartObject));  return asResult;}  }
class C{  protected void shareBySinaWeibo(){  ShareUtil.startShare(this,ShareConstant.SHARE_CHANNEL_SINA_WEIBO,getShareData(ShareConstant.SHARE_CHANNEL_SINA_WEIBO),ShareConstant.REQUEST_CODE);}  }
class C{  public BOMInputStream(InputStream delegate,boolean include,ByteOrderMark... boms){  super(delegate);  if (boms == null || boms.length == 0) {    throw new IllegalArgumentException("No BOMs specified");  }  this.include=include;  Arrays.sort(boms,ByteOrderMarkLengthComparator);  this.boms=Arrays.asList(boms);}  }
class C{  public User(){}  }
class C{  public AbortPreparedTransactionSpaceOperationResult(){}  }
class C{  private VUserManagerService(Context context,VPackageManagerService pm,Object installLock,Object packagesLock,File dataDir,File baseUserPath){  mContext=context;  mPm=pm;  mInstallLock=installLock;  mPackagesLock=packagesLock;synchronized (mInstallLock) {synchronized (mPackagesLock) {      mUsersDir=new File(dataDir,USER_INFO_DIR);      mUsersDir.mkdirs();      File userZeroDir=new File(mUsersDir,"0");      userZeroDir.mkdirs();      mBaseUserPath=baseUserPath;      mUserListFile=new File(mUsersDir,USER_LIST_FILENAME);      readUserListLocked();      ArrayList<VUserInfo> partials=new ArrayList<VUserInfo>();      for (int i=0; i < mUsers.size(); i++) {        VUserInfo ui=mUsers.valueAt(i);        if (ui.partial && i != 0) {          partials.add(ui);        }      }      for (int i=0; i < partials.size(); i++) {        VUserInfo ui=partials.get(i);        VLog.w(LOG_TAG,"Removing partially created user #" + i + " (name="+ ui.name+ ")");        removeUserStateLocked(ui.id);      }      sInstance=this;    }  }}  }
class C{  public static int readInt(){  return scanner.nextInt();}  }
class C{  public SootClass(String name,int modifiers){  if (name.charAt(0) == '[')   throw new RuntimeException("Attempt to make a class whose name starts with [");  setName(name);  this.modifiers=modifiers;  refType=RefType.v(name);  refType.setSootClass(this);  if (Options.v().debug_resolver())   G.v().out.println("created " + name + " with modifiers "+ modifiers);  setResolvingLevel(BODIES);  Scene.v().getClassNumberer().add(this);}  }
class C{  public TopicSubscriber createDurableSubscriber(Topic topic,String name,String selector,boolean noLocal) throws JMSException {  throw new IllegalStateException("Forbidden call on a QueueSession.");}  }
class C{  public static <T,U,V>ImmutablePair<T,V> withRight(ImmutablePair<T,U> pair,V right){  return new ImmutablePair<>(pair.getLeft(),right);}  }
class C{  protected void mergeLists(GossipManager gossipManager,RemoteGossipMember senderMember,List<GossipMember> remoteList){  for (  LocalGossipMember i : gossipManager.getDeadList()) {    if (i.getId().equals(senderMember.getId())) {      LOGGER.info(gossipManager.getMyself() + " contacted by dead member " + senderMember.getUri());      LocalGossipMember newLocalMember=new LocalGossipMember(senderMember.getClusterName(),senderMember.getUri(),senderMember.getId(),senderMember.getHeartbeat(),gossipManager,gossipManager.getSettings().getCleanupInterval());      gossipManager.reviveMember(newLocalMember);      newLocalMember.startTimeoutTimer();    }  }  for (  GossipMember remoteMember : remoteList) {    if (remoteMember.getId().equals(gossipManager.getMyself().getId())) {      continue;    }    if (gossipManager.getLiveMembers().contains(remoteMember)) {      LocalGossipMember localMember=gossipManager.getLiveMembers().get(gossipManager.getLiveMembers().indexOf(remoteMember));      if (remoteMember.getHeartbeat() > localMember.getHeartbeat()) {        localMember.setHeartbeat(remoteMember.getHeartbeat());        localMember.resetTimeoutTimer();      }    } else     if (!gossipManager.getLiveMembers().contains(remoteMember) && !gossipManager.getDeadList().contains(remoteMember)) {      LocalGossipMember newLocalMember=new LocalGossipMember(remoteMember.getClusterName(),remoteMember.getUri(),remoteMember.getId(),remoteMember.getHeartbeat(),gossipManager,gossipManager.getSettings().getCleanupInterval());      gossipManager.createOrReviveMember(newLocalMember);      newLocalMember.startTimeoutTimer();    } else {      if (gossipManager.getDeadList().contains(remoteMember)) {        LocalGossipMember localDeadMember=gossipManager.getDeadList().get(gossipManager.getDeadList().indexOf(remoteMember));        if (remoteMember.getHeartbeat() > localDeadMember.getHeartbeat()) {          LocalGossipMember newLocalMember=new LocalGossipMember(remoteMember.getClusterName(),remoteMember.getUri(),remoteMember.getId(),remoteMember.getHeartbeat(),gossipManager,gossipManager.getSettings().getCleanupInterval());          gossipManager.reviveMember(newLocalMember);          newLocalMember.startTimeoutTimer();          LOGGER.debug("Removed remote member " + remoteMember.getAddress() + " from dead list and added to local member list.");        } else {          LOGGER.debug("me " + gossipManager.getMyself());          LOGGER.debug("sender " + senderMember);          LOGGER.debug("remote " + remoteList);          LOGGER.debug("live " + gossipManager.getLiveMembers());          LOGGER.debug("dead " + gossipManager.getDeadList());        }      } else {        LOGGER.debug("me " + gossipManager.getMyself());        LOGGER.debug("sender " + senderMember);        LOGGER.debug("remote " + remoteList);        LOGGER.debug("live " + gossipManager.getLiveMembers());        LOGGER.debug("dead " + gossipManager.getDeadList());      }    }  }}  }
class C{  private void readObjectNoData() throws ObjectStreamException {  throw new InvalidObjectException("no data found when attempting to " + "deserialize TxnMgrProxy instance");}  }
class C{  public static void normalizeVector3(FloatBuffer buf,int index){  Vector3f tempVec3=Vector3f.newInstance();  populateFromBuffer(tempVec3,buf,index);  tempVec3.normalizeLocal();  setInBuffer(tempVec3,buf,index);  Vector3f.recycle(tempVec3);}  }
class C{  @VisibleForTesting public boolean isSystemBuild(PackageManager pm,String packageName){  try {    ApplicationInfo info=pm.getApplicationInfo(packageName,ApplicationInfo.FLAG_SYSTEM);    if ((info.flags & ApplicationInfo.FLAG_SYSTEM) == 0)     throw new SecurityException();  } catch (  NameNotFoundException e) {    Log.e(TAG,"Package with name " + packageName + " not found");    return false;  }catch (  SecurityException e) {    Log.e(TAG,"Caller with package name " + packageName + " is not in the system build");    return false;  }  return true;}  }
class C{  public boolean isRetained(){  return retained;}  }
class C{  protected synchronized void startEvictor(long delay){  if (null != evictor) {    evictor.cancel();    evictor=null;  }  if (delay > 0) {    evictor=new Evictor();    EVICTION_TIMER.schedule(evictor,delay,delay);  }}  }
class C{  public void close() throws JMSException {  try {    if (!m_closed) {      if (_logger.isLoggable(Level.FINE)) {        _logger.fine("GSQueueBrowserImpl.close() closing browser: " + toString());      }      m_session.removeBrower(this);    }    m_closed=true;  }  finally {    if (null != gsIterator) {      gsIterator.cancel();      gsIterator=null;    }  }}  }
class C{  public void updateView(String what){  uptodate=false;  if (doClear) {    clear();    doClear=false;  }  commandManager.updateEnableState();  setTitle();  statusBar.setText2("Rows: " + countVisibleNodes());  uptodate=true;  FindToolBar findToolBar=searchManager.getFindDialogAsToolBar();  if (findToolBar.isClosing()) {    showFindToolBar=false;    findToolBar.setClosing(false);  }  if (!findToolBar.isEnabled() && showFindToolBar) {    mainPanel.add(findToolBar,BorderLayout.NORTH);    findToolBar.setEnabled(true);    frame.getContentPane().validate();    getCommandManager().updateEnableState();  } else   if (findToolBar.isEnabled() && !showFindToolBar) {    mainPanel.remove(findToolBar);    findToolBar.setEnabled(false);    frame.getContentPane().validate();    getCommandManager().updateEnableState();  }  if (findToolBar.isEnabled())   findToolBar.clearMessage();}  }
class C{  private static Set<URL> urlsToReflect(List<String> packagePrefixes){  List<String> prefixesWithFlags=ImmutableList.<String>builder().addAll(packagePrefixes).add("org.flagz").build();  return prefixesWithFlags.stream().flatMap(null).collect(Collectors.toSet());}  }
class C{  private RevealatorHelper(){}  }
class C{  public List<X509Certificate> checkServerTrusted(X509Certificate[] chain,String authType,String hostname) throws CertificateException {  return checkTrusted(chain,authType,hostname,false);}  }
class C{  private Object readResolve(){  return LazyHolder.INSTANCE;}  }
class C{  public void write(OutputStream os) throws IOException {  if (responseFormatType == ResponseFormatType.CSV) {    writeCsvResponse(os);  } else   if (responseFormatType == ResponseFormatType.JSONAPI) {    writeJsonApiResponse(os,missingIntervals,volatileIntervals,pagination);  } else {    writeJsonResponse(os,missingIntervals,volatileIntervals,pagination);  }}  }
class C{  @Override public Change configureCacheObject(final RuleTag ruleTag,final Properties properties) throws ConfigurationException {  setCommonProperties((RuleTagCacheObject)ruleTag,properties);  String tmpStr=properties.getProperty("ruleText");  if (tmpStr != null) {    ((RuleTagCacheObject)ruleTag).setRuleText(tmpStr);    setParentSupervisionIds(ruleTag);  }  ruleTag.setTopic(tagPublicationTrunk + "." + ruleTag.getLowestProcessId());  return null;}  }
class C{  @Deprecated public UrlSpaceConfigurer userDetails(UserDetails userDetails){  return credentialsProvider(new DefaultCredentialsProvider(userDetails));}  }
class C{  protected AbstractSpaceQuery(Class<?> entryClass,ISpacePredicate predicate){  this._entryTypeName=entryClass.getName();  this._predicate=predicate;}  }
class C{  public JSONException syntaxError(String message){  return new JSONException(message + toString());}  }
class C{  protected FaveAddLinkQuery link(String value){  return unsafeParam("link",value);}  }
class C{  public static String copyFromClipboard(){  try {    String data=(String)Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);    return data;  } catch (  HeadlessException|UnsupportedFlavorException|IOException e) {    LOGGER.log(Level.WARNING,"Error retrieving text from clipboard.",e);    return "";  }}  }
class C{  private void addHelpNodesToTree(HelpNode node,DefaultTreeModel model,MutableTreeNode parent){  MutableTreeNode n=new DefaultMutableTreeNode(node);  int index=model.getChildCount(parent);  model.insertNodeInto(n,parent,index);  for (int i=0; i < node.nodes.size(); i++) {    addHelpNodesToTree(node.nodes.get(i),model,n);  }}  }
class C{  public XmlStreamReader(InputStream is,boolean lenient) throws IOException {  this(is,lenient,null);}  }
class C{  public TIntIterator(TIntHash hash){  super(hash);  this._hash=hash;}  }
class C{  public static int geometric(double p){  if (!(p >= 0.0 && p <= 1.0))   throw new IllegalArgumentException("Probability must be between 0.0 and 1.0");  return (int)Math.ceil(Math.log(uniform()) / Math.log(1.0 - p));}  }
class C{  public NumberRangeModel(long lo,long hi,long min,long max){  this(new Long(lo),new Long(hi),new Long(min),new Long(max));}  }
class C{  private void prepareBuffers(){  ByteBuffer[] out1=new ByteBuffer[1];  ByteBuffer buffer=ByteBuffer.allocate(dimensionValue1.length());  buffer.put(dimensionValue1.getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));  buffer.rewind();  out1[0]=buffer;  ByteBuffer[] out2=new ByteBuffer[1];  ByteBuffer buffer2=ByteBuffer.allocate(dimensionValue2.length());  buffer2.put(dimensionValue2.getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));  buffer2.rewind();  out2[0]=buffer2;  byte[] arr1=packByteBufferIntoSingleByteArray(out1);  byte[] arr2=packByteBufferIntoSingleByteArray(out2);  buff1=ByteBuffer.wrap(arr1);  buff1.position(4);  buff1.limit(buff1.position() + dimensionValue1.length());  buff2=ByteBuffer.wrap(arr2);  buff2.position(4);  buff2.limit(buff2.position() + dimensionValue2.length());}  }
class C{  public static String toDateString(java.util.Date date,String format){  if (date == null)   return "";  SimpleDateFormat dateFormat=null;  if (format != null) {    dateFormat=new SimpleDateFormat(format);  } else {    dateFormat=new SimpleDateFormat();  }  Calendar calendar=Calendar.getInstance();  calendar.setTime(date);  return dateFormat.format(date);}  }
class C{  protected void checkAndSendNotation(Notation not){  if (isRootDocument()) {    int index=fNotations.indexOf(not);    if (index == -1) {      XMLResourceIdentifier id=new XMLResourceIdentifierImpl(not.publicId,not.systemId,not.baseURI,not.expandedSystemId);      addNotation(not.name,id,not.augmentations);      if (fSendUEAndNotationEvents && fDTDHandler != null) {        fDTDHandler.notationDecl(not.name,id,not.augmentations);      }    } else {      Notation localNotation=(Notation)fNotations.get(index);      if (!not.isDuplicate(localNotation)) {        reportFatalError("NonDuplicateNotation",new Object[]{not.name});      }    }  } else {    fParentXIncludeHandler.checkAndSendNotation(not);  }}  }
class C{  private static Scope buildScope(){  return Scope.build(Scope.R_BASICPROFILE,Scope.R_EMAILADDRESS);}  }
class C{  public static void forEachRegistry(ServiceHost serviceHost,String tenantLink,Consumer<Collection<String>> registryLinksConsumer,Consumer<Collection<Throwable>> failureConsumer){  List<QueryTask> queryTasks=new ArrayList<QueryTask>();  if (tenantLink != null) {    queryTasks.add(buildRegistryQueryByGroup(null));    queryTasks.add(buildRegistryQueryByGroup(tenantLink));  } else {    queryTasks.add(buildAllRegistriesQuery());  }  List<Operation> queryOperations=new ArrayList<>();  for (  QueryTask queryTask : queryTasks) {    queryOperations.add(Operation.createPost(UriUtils.buildUri(serviceHost,ServiceUriPaths.CORE_QUERY_TASKS)).setBody(queryTask).setReferer(serviceHost.getUri()));  }  if (!queryOperations.isEmpty()) {    OperationJoin.create(queryOperations.toArray(new Operation[0])).setCompletion(null).sendWith(serviceHost);  } else {    registryLinksConsumer.accept(Collections.emptyList());  }}  }
class C{  public ArithmeticExpression(int operation,Expression left,Expression right){  super(operation,ADD,MOD,left,right);  m_type=null;}  }
class C{  public static int daysInFebruary(int year){  return (((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) ? 29 : 28);}  }
class C{  public int insertBefore(int parentIndex,int newChildIndex,int refChildIndex){  if (refChildIndex == -1) {    appendChild(parentIndex,newChildIndex);    return newChildIndex;  }  int nchunk=newChildIndex >> CHUNK_SHIFT;  int nindex=newChildIndex & CHUNK_MASK;  int rchunk=refChildIndex >> CHUNK_SHIFT;  int rindex=refChildIndex & CHUNK_MASK;  int previousIndex=getChunkIndex(fNodePrevSib,rchunk,rindex);  setChunkIndex(fNodePrevSib,newChildIndex,rchunk,rindex);  setChunkIndex(fNodePrevSib,previousIndex,nchunk,nindex);  return newChildIndex;}  }
class C{  public static <K,V>boolean putMapNotNullKey(Map<K,V> map,K key,V value){  if (map == null || key == null) {    return false;  }  map.put(key,value);  return true;}  }
class C{  public static boolean hasNameChanged(final ISourceDataTag sourceDataTag,final ISourceDataTag oldSourceDataTag){  return !sourceDataTag.getName().equals(oldSourceDataTag.getName());}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_bluetooth);  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);  unpairedListView=(ListView)findViewById(R.id.unpairedListView);  mBluetoothAdapter=BluetoothAdapter.getDefaultAdapter();  if (mBluetoothAdapter == null) {    Toast.makeText(Bluetooth.this,"Sorry, Your device doesn't support Bluetooth !",Toast.LENGTH_SHORT).show();  } else {    if (mBluetoothAdapter.isEnabled()) {      mBluetoothAdapter.disable();    }    Intent enableBtIntent=new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);    startActivityForResult(enableBtIntent,REQUEST_ENABLE_BT);  }  getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);}  }
class C{  public LabelRenderer(){}  }
class C{  public NonSquareOperatorException(int wrong,int expected){  super(org.hipparchus.migration.exception.util.LocalizedFormats.NON_SQUARE_OPERATOR,wrong,expected);}  }
class C{  private ClassLoader lookupLoader(final URL[] urls,final ClassLoader parent){  if (urls == null) {    return parent;  }synchronized (loaderTable) {    Object ref;    while ((ref=refQueue.poll()) != null) {      if (ref instanceof LoaderKey) {        LoaderKey key=(LoaderKey)ref;        loaderTable.remove(key);      } else       if (ref instanceof LoaderEntry) {        LoaderEntry entry=(LoaderEntry)ref;        if (!entry.removed) {          loaderTable.remove(entry.key);        }      }    }    LoaderKey key=new LoaderKey(urls,parent);    LoaderEntry entry=(LoaderEntry)loaderTable.get(key);    ClassLoader loader;    if (entry == null || (loader=(ClassLoader)entry.get()) == null) {      if (entry != null) {        loaderTable.remove(key);        entry.removed=true;      }      loader=findOriginLoader(urls,parent);      if (loader == null) {        loader=createClassLoader(urls,parent,requireDlPerm);      }      entry=new LoaderEntry(key,loader);      loaderTable.put(key,entry);    }    return loader;  }}  }
class C{  protected void mouseClicked(int mouseX,int mouseY,int mouseButton){  this.buttonId=null;  if (mouseButton != 0 || !this.guiList.mouseClicked(mouseX,mouseY,mouseButton)) {    try {      super.mouseClicked(mouseX,mouseY,mouseButton);    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  public void flushChanges(){  for (  GradleEditorEntityTable table : myTablesByGroupName.values()) {    if (table.isEditing()) {      table.getCellEditor().stopCellEditing();    }  }}  }
class C{  public PhotosDeleteCommentQuery(VkApiClient client,UserActor actor,int commentId){  super(client,"photos.deleteComment",BoolInt.class);  accessToken(actor.getAccessToken());  commentId(commentId);}  }
class C{  private final StringBuilder appendParameterSignature(StringBuilder buffer,char[][] parameterTypes,char[][] parameterNames){  if (parameterTypes != null) {    for (int i=0; i < parameterTypes.length; i++) {      if (i > 0) {        buffer.append(',');        buffer.append(' ');      }      buffer.append(parameterTypes[i]);      if (parameterNames != null && parameterNames[i] != null) {        buffer.append(' ');        buffer.append(parameterNames[i]);      }    }  }  return buffer;}  }
class C{  public AccountGetBannedQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPHeal_INTERVAL_ME_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200519,skilltarget,num0,skillname);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ConstructorDecl fullCopy(){  ConstructorDecl tree=(ConstructorDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private void grow(int newLength){  if (newLength < segments.length)   throw new IllegalArgumentException("grow(newLine=" + newLength + "): can't grow smaller"); else   if (newLength > segments.length) {    final int[][] tmp=new int[newLength][];    System.arraycopy(segments,0,tmp,0,segments.length);    for (int i=segments.length; i < newLength; i++) {      tmp[i]=new int[SEGMENT_SIZE];    }    segments=tmp;  }}  }
class C{  private void pickBaseLineConnections(ScoutWidget[] list){  final int baseline=Direction.BASE.getDirection();  final int north=Direction.NORTH.getDirection();  final int south=Direction.SOUTH.getDirection();  final int east=Direction.EAST.getDirection();  final int west=Direction.WEST.getDirection();  for (int i=1; i < len; i++) {    float[][] widgetProbability=mProbability[i];    if (widgetProbability == null || widgetProbability[baseline] == null) {      continue;    }    float maxValue=0.0f;    float maxNorth=widgetProbability[north][Utils.max(widgetProbability[north])];    float maxSouth=widgetProbability[south][Utils.max(widgetProbability[south])];    int maxIndex=Utils.max(widgetProbability[baseline]);    float maxBaseline=widgetProbability[baseline][maxIndex];    if (maxBaseline < maxNorth || maxBaseline < maxSouth) {      continue;    }    String s;    if (DEBUG) {      System.out.println(" b check " + list[i] + " "+ widgetProbability[4][maxIndex]);      s=list[i] + "(" + Direction.toString(baseline)+ ") -> "+ list[maxIndex]+ " "+ Direction.toString(baseline);      System.out.println("try " + s);    }    if (list[i].setConstraint(baseline,list[maxIndex],baseline,0)) {      Utils.zero(mBinaryProbability[i][Direction.ORIENTATION_VERTICAL]);      Arrays.fill(widgetProbability[baseline],0.0f);      widgetProbability[north]=null;      Arrays.fill(widgetProbability[south],0.0f);      if (DEBUG) {        System.out.println("connect " + s);      }    }  }}  }
class C{  public static void usage(){  System.out.println(VERSION);  System.out.println("Usage:");  System.out.println("    -dumpASCII file : dump the final wave to file");  System.out.println("    -dumpAudio file : dump audio to file ");  System.out.println("    -help           : shows usage information");  System.out.println("    -detailedMetrics: turn on detailed metrics");  System.out.println("    -dumpRelations  : dump the relations ");  System.out.println("    -dumpUtterance  : dump the final utterance");  System.out.println("    -metrics        : turn on metrics");  System.out.println("    -run  name      : sets the name of the run");  System.out.println("    -silent         : don't say anything");  System.out.println("    -verbose        : verbose output");  System.out.println("    -version        : shows version number");  System.out.println("    -timeTest       : runs a lengthy time test");  System.out.println("    -iter count     : run for count iterations");  System.out.println("    -time XX:XX     : speak the given time");  System.out.println("    -time now       : speak the current time");  System.out.println("    -period secs    : period of iter");  System.out.println("    -clockMode      : tells time every 5 mins");  System.out.println("    -voice VOICE    : " + VoiceManager.getInstance().toString());  System.exit(0);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately(getSyntax());}  }
class C{  public static String readFileToString(File file,Charset encoding) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.toString(in,Charsets.toCharset(encoding));  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  public static boolean lenientOn(){  return "lenient".equals(UtilProperties.getPropertyValue("minilang.properties","validation.level"));}  }
class C{  private void destroyChildGroup(ThreadGroup group){  int numChildren=group.activeGroupCount();  if (numChildren == 0)   return;  ThreadGroup[] children=new ThreadGroup[numChildren];  int numGroups=group.enumerate(children);  for (int i=0; i < numGroups; i++) {    children[i].interrupt();    destroyChildGroup(children[i]);  }}  }
class C{  public static void copyFile(String source,String dest) throws IOException {  File sourceFile=new File(source);  File destFile=new File(dest);  FileChannel inputChannel=null;  FileChannel outputChannel=null;  try {    inputChannel=new FileInputStream(sourceFile).getChannel();    outputChannel=new FileOutputStream(destFile).getChannel();    outputChannel.transferFrom(inputChannel,0,inputChannel.size());  }  finally {    try {      inputChannel.close();      outputChannel.close();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public void action(){synchronized (myAgent) {    NGramDocumentComparatorAgent a=(NGramDocumentComparatorAgent)myAgent;    ACLMessage msg=new ACLMessage(ACLMessage.INFORM);    msg.setSender(a.getAID());    msg.addReceiver(a.ResultConsumer);    try {      msg.setContentObject(Result);    } catch (    IOException ex) {      System.err.println("Cannot add result to message. Sending empty message.");      ex.printStackTrace(System.err);    }    a.send(msg);  }}  }
class C{  public void nullify(){  for (int iNGramSize=MinSize; iNGramSize <= MaxSize; iNGramSize++) {    UniqueVertexGraph gCurLevel=getGraphLevelByNGramSize(iNGramSize);    java.util.Iterator iIter=gCurLevel.getEdgeSet().iterator();    while (iIter.hasNext()) {      WeightedEdge weEdge=(WeightedEdge)iIter.next();      weEdge.setWeight(0.0);    }  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ElementAnnotationValue fullCopy(){  ElementAnnotationValue tree=(ElementAnnotationValue)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static float max(float a,float b){  return (a >= b) ? a : b;}  }
class C{  public static boolean contentEqualsIgnoreEOL(Reader input1,Reader input2) throws IOException {  BufferedReader br1=toBufferedReader(input1);  BufferedReader br2=toBufferedReader(input2);  String line1=br1.readLine();  String line2=br2.readLine();  while (line1 != null && line2 != null && line1.equals(line2)) {    line1=br1.readLine();    line2=br2.readLine();  }  return line1 == null ? line2 == null ? true : false : line1.equals(line2);}  }
class C{  public PhotosGetByIdQuery photoSizes(Boolean value){  return unsafeParam("photo_sizes",value);}  }
class C{  public InGroupPredicate(String group){  super(group);}  }
class C{  public Set<String> pullingUpdatedConfigs(Map<String,String> configItemMaps,int readTimeout){  Map<String,Object> params=Maps.newHashMapWithExpectedSize(1);  params.put("configs",JsonUtil.INSTANCE.toJson(configItemMaps));  return doPost(ClientUris.CONFIG_PULLING,headers,params,readTimeout,Set.class);}  }
class C{  public void testXmlRpcRequest() throws Exception {  XmlRpcClient client=this.getRpcClient(url,"admin","ofbiz");  Object[] params=new Object[]{55.00,"message from xml-rpc client"};  Map<String,Object> result=UtilGenerics.cast(client.execute("testScv",params));  assertEquals("XML-RPC Service result success","service done",result.get("resp"));}  }
class C{  public static String readFileToString(File file,Charset encoding) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.toString(in,Charsets.toCharset(encoding));  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  @Override public void suiteStart(){  throw new UnsupportedOperationException();}  }
class C{  public BoardFixTopicQuery fixTopic(UserActor actor,int groupId,int topicId){  return new BoardFixTopicQuery(getClient(),actor,groupId,topicId);}  }
class C{  public IntIterator rangeSortedBy(String field,long lo,long hi,int indexType){  Index index=getIndex(field,long.class,true);  return index.rows(lo,hi,indexType);}  }
class C{  public void updateView(){  Set<Integer> needToBeUncollapsed=new HashSet<>();  for (  Integer taxId : toSelectTaxonIds) {    if (mainViewer.getTaxId2Node(taxId) == null) {      needToBeUncollapsed.add(taxId);    }  }  if (needToBeUncollapsed.size() > 0) {    Set<Integer> toDelete=new HashSet<>();    for (    int t : needToBeUncollapsed) {      Node v=TaxonomyData.getTree().getANode(t);      while (v.getInDegree() > 0) {        v=v.getFirstInEdge().getSource();        int vt=(Integer)v.getInfo();        toDelete.add(vt);      }    }    needToBeUncollapsed.removeAll(toDelete);    for (    int t : needToBeUncollapsed) {      Node v=TaxonomyData.getTree().getANode(t);      while (v.getInDegree() > 0) {        Node w=v.getFirstInEdge().getSource();        int wt=(Integer)v.getInfo();        if (mainViewer.getCollapsedIds().contains(wt)) {          mainViewer.getCollapsedIds().remove(wt);          break;        }        for (Edge e=w.getFirstOutEdge(); e != null; e=w.getNextOutEdge(e)) {          Node u=e.getTarget();          if (u != v) {            mainViewer.getCollapsedIds().add((Integer)u.getInfo());          }        }        v=w;      }    }    mainViewer.setDoReInduce(true);    mainViewer.updateView(Director.ALL);  }  toSelect.clear();  for (  int t : toSelectTaxonIds) {    toSelect.add(mainViewer.getTaxId2Node(t));  }  toDeselect.clear();  for (  int t : toDeSelectTaxonIds) {    toDeselect.add(mainViewer.getTaxId2Node(t));  }  mainViewer.selectedNodes.addAll(toSelect);  mainViewer.fireDoSelect(toSelect);  Node v=toSelect.getLastElement();  if (v != null) {    final Point p=mainViewer.trans.w2d(mainViewer.getLocation(v));    if (mainViewer.getFoundNode() == null)     mainViewer.setFoundNode(v);    mainViewer.scrollRectToVisible(new Rectangle(p.x - 60,p.y - 25,120,50));  }  mainViewer.selectedNodes.removeAll(toDeselect);  mainViewer.fireDoDeselect(toDeselect);  toSelect.clear();  toDeselect.clear();  mainViewer.repaint();  toSelectTaxonIds.clear();  toDeSelectTaxonIds.clear();  mainViewer.repaint();}  }
class C{  @NotNull public ThreeState isSyncNeeded(){  long lastSync=getLastGradleSyncTimestamp();  if (lastSync < 0) {    return ThreeState.UNSURE;  }  return isSyncNeeded(lastSync) ? ThreeState.YES : ThreeState.NO;}  }
class C{  public int findRow(String name){  for (int row=0; row < getRowCount(); row++)   if (getRowName(row).equals(name))   return row;  return -1;}  }
class C{  public boolean dnsDomainIs(String host,String domain){  return host.endsWith(domain);}  }
class C{  public double doGraphCompareToSet(String sSummaryTextFile,Set<String> ssModelFiles,String sGraphModelClassName,String sComparatorClassName,int iMinNGramRank,int iMaxNGramRank,int iNGramDist){  throw new NotImplementedException();}  }
class C{  public ResourcesPoet addIntegerArrayStrings(String name,@NotNull List<String> values){  Element element=document.createElement("integer-array");  element.setAttribute("name",name);  for (  String value : values) {    Element valueElement=document.createElement("item");    valueElement.appendChild(document.createTextNode(value));    element.appendChild(valueElement);  }  resourceElement.appendChild(element);  return this;}  }
class C{  public static <T>void addToJMenu(JPopupMenu popupMenu,T[] choices,T initialChoice,final CallBack<T> callBack){  add(popupMenu,choices,initialChoice,callBack);}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  private void loadProxySettings(){  this.httpProxy=System.getenv(this.httpEnv);  this.httpsProxy=System.getenv(this.httpsEnv);  this.ftpProxy=System.getenv(this.ftpEnv);  this.noProxy=System.getenv(this.noProxyEnv);}  }
class C{  public ItemStack(final Material type,final int amount){  this(type.getId(),amount);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public TestLogAppender(){  logger=(Logger)LoggerFactory.getILoggerFactory().getLogger(ROOT_LOGGER_NAME);  logger.addAppender(this);  setContext(logger.getLoggerContext());  start();}  }
class C{  public PhotosObject(Activity a,int photosType){  this.adapter=new PhotoAdapter(a,new ArrayList<Photo>());  this.service=PhotoService.getService();  this.requestKey=Mysplash.getInstance().getUser();  this.photosType=photosType;  this.photosOrder=PhotoApi.ORDER_BY_LATEST;  this.photosPage=0;  this.refreshing=false;  this.loading=false;  this.over=false;}  }
class C{  protected void writeNetscapeExt() throws IOException {  out.write(0x21);  out.write(0xff);  out.write(11);  writeString("NETSCAPE" + "2.0");  out.write(3);  out.write(1);  writeShort(repeat);  out.write(0);}  }
class C{  @Override public boolean equals(Object o){  return o instanceof AirMapPilotPermit && getId().equals(((AirMapPilotPermit)o).getId());}  }
class C{  public void addGlobalGroupDecl(XSGroupDecl decl){  fGlobalGroupDecls.put(decl.fName,decl);  decl.setNamespaceItem(this);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public Annotation fullCopy(){  Annotation tree=(Annotation)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){  try {    PackageManager pm=context.getPackageManager();    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);    if (handlers == null || handlers.size() == 0) {      return false;    }    for (    ResolveInfo resolveInfo : handlers) {      IntentFilter filter=resolveInfo.filter;      if (filter == null)       continue;      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;      if (resolveInfo.activityInfo == null)       continue;      return true;    }  } catch (  RuntimeException e) {    Log.e(TAG,"Runtime exception while getting specialized handlers");  }  return false;}  }
class C{  public boolean computeScrollOffset(long time){  if (isFinished()) {    return false;  }switch (mMode) {case SCROLL_MODE:    final long elapsedTime=time - mScrollerX.mStartTime;  final int duration=mScrollerX.mDuration;if (elapsedTime < duration) {  float q=(float)(elapsedTime) / duration;  q=viscousFluid(q);  mScrollerX.updateScroll(q);  mScrollerY.updateScroll(q);} else {  abortAnimation();}break;case FLING_MODE:if (!mScrollerX.mFinished) {if (!mScrollerX.update(time)) {if (!mScrollerX.continueWhenFinished(time)) {  mScrollerX.finish();}}}if (!mScrollerY.mFinished) {if (!mScrollerY.update(time)) {if (!mScrollerY.continueWhenFinished(time)) {mScrollerY.finish();}}}break;default :break;}return true;}  }
class C{  public MaryHeader(int newType){  if ((newType > TIMELINE) || (newType < UNKNOWN)) {    throw new IllegalArgumentException("Unauthorized Mary file type [" + type + "].");  }  type=newType;  assert version == VERSION;  assert hasLegalMagic();  assert hasLegalType();}  }
class C{  public Well19937a(){  super(K);}  }
class C{  private final int popPEStack(){  return fPEStack[--fPEDepth];}  }
class C{  public static String sampaEn2sampaDe(String En){  String result=En;  if (sampaEn2sampaDe.containsKey(En)) {    result=sampaEn2sampaDe.get(En);  }  return result;}  }
class C{  public void loadCommentHistory(){  IPath pluginStateLocation=SVNUIPlugin.getPlugin().getStateLocation().append(COMMENT_HIST_FILE);  File file=pluginStateLocation.toFile();  if (!file.exists())   return;  try {    BufferedInputStream is=new BufferedInputStream(new FileInputStream(file));    try {      SAXParserFactory factory=SAXParserFactory.newInstance();      try {        SAXParser parser=factory.newSAXParser();        parser.parse(new InputSource(is),new CommentHistoryContentHandler());      } catch (      SAXException ex) {        throw new SVNException(Policy.bind("RepositoryManager.parsingProblem",COMMENT_HIST_FILE),ex);      }catch (      ParserConfigurationException e) {        throw new SVNException(Policy.bind("RepositoryManager.parsingProblem",COMMENT_HIST_FILE),e);      }    }  finally {      is.close();    }  } catch (  IOException e) {    SVNUIPlugin.log(new Status(IStatus.ERROR,SVNUIPlugin.ID,TeamException.UNABLE,Policy.bind("RepositoryManager.ioException"),e));  }catch (  TeamException e) {    SVNUIPlugin.log(e.getStatus());  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CaseHeal_INTERVAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200952,skilltarget,num0,skillcaster,skillname);}  }
class C{  @RequestMapping(method=RequestMethod.POST) ResponseEntity<Bookmark> addBookmark(@PathVariable(value="username") String username,@RequestBody Bookmark bookmark) throws UserNotFoundException {  Optional<User> optional=usersRepository.findByUsername(username);  if (optional.isPresent()) {    User user=optional.get();    user.addBookmark(bookmark);    bookmark.setUser(user);    bookmarksRepository.save(bookmark);    return new ResponseEntity<>(bookmark,HttpStatus.CREATED);  } else {    throw new UserNotFoundException(username);  }}  }
class C{  private String stringToConstant(String string){  int length=string.length();  for (int i=0; i < length; i++) {    char character=string.charAt(i);    if (character != "_".charAt(0) && Character.isUpperCase(character) && i != 0) {      String firstPart=string.substring(0,i);      String secondPart=string.substring(i,length);      String newFirstPart=firstPart + "_";      string=newFirstPart + secondPart;      i=newFirstPart.length();      length++;    }  }  return string;}  }
class C{  @Override protected void synchronizeChildren(){  needsSyncChildren(false);  DocumentType doctype;  NamedNodeMap entities;  EntityImpl entDef;  if (null != (doctype=getOwnerDocument().getDoctype()) && null != (entities=doctype.getEntities())) {    entDef=(EntityImpl)entities.getNamedItem(getNodeName());    if (entDef == null)     return;    isReadOnly(false);    for (Node defkid=entDef.getFirstChild(); defkid != null; defkid=defkid.getNextSibling()) {      Node newkid=defkid.cloneNode(true);      insertBefore(newkid,null);    }    setReadOnly(true,true);  }}  }
class C{  public Message receive(long timeout) throws JMSException {  if (m_closed) {    return null;  }  if (m_session.m_msgListeners.getValue() != 0) {    throw new IllegalStateException("Forbidden call to receive() on asynchronous session.");  }  if (_logger.isLoggable(Level.FINE)) {    _logger.log(Level.FINE,toString2() + "GSMessageConsumerImpl.receive()");  }  if (timeout == Message.DEFAULT_TIME_TO_LIVE) {    timeout=Lease.FOREVER;  }  long startTime=0;  GSMessageImpl message=null;  while (!m_closed && timeout > 10) {    try {      startTime=SystemTime.timeMillis();synchronized (m_session.stopMonitor) {        if (m_session.m_stopped) {          if (_logger.isLoggable(Level.FINE)) {            _logger.log(Level.FINE,toString2() + "receive(): Waiting on a stopped session.");          }          try {            m_session.stopMonitor.wait(timeout);          } catch (          InterruptedException e) {            if (_logger.isLoggable(Level.SEVERE)) {              _logger.log(Level.SEVERE,toString2() + "receive(): Interrupted while waiting on a stopped session: " + e);            }          }          if (_logger.isLoggable(Level.FINE)) {            _logger.log(Level.FINE,toString2() + "receive(): Stopped waiting on a stopped session - restarting iteration.");          }          continue;        }        if (_logger.isLoggable(Level.FINEST)) {          _logger.log(Level.FINEST,toString2() + "onProcess=true");        }        m_session.onProcess=true;      }      if (m_isQueue) {        if (_logger.isLoggable(Level.FINEST)) {          _logger.log(Level.FINEST,toString2() + "Retrieving a message from queue.");        }        message=receiveFromQueueNoBlock(timeout);      } else {        if (_logger.isLoggable(Level.FINEST)) {          _logger.log(Level.FINEST,toString2() + "Retrieving a message from topic.");        }        message=receiveFromTopic(timeout);      }      if (message == null) {        continue;      }      if (_logger.isLoggable(Level.FINE)) {        _logger.log(Level.FINE,toString2() + "receive(): Got message: " + message.JMSMessageID);      }      if (checkMessageForConsumer(message)) {        prepareMessageForConsumer(message);        if (m_session.isAutoAck()) {          m_session.acknowledge();          if (m_isQueue && !m_session.isAutoAck()) {            m_session.renewTransaction();          }        } else {          m_session.addUnackedMessage(message,m_consumerID);        }        m_session.m_numOfConsumedMsg++;        break;      } else {        if (_logger.isLoggable(Level.FINE)) {          _logger.log(Level.FINE,toString2() + "Message not valid for consumer: " + message.JMSMessageID);        }      }    } catch (    ReceiveFromQueueException e) {      String text="Internal error while fetching a message from a Queue. ";      if (_logger.isLoggable(Level.SEVERE)) {        _logger.log(Level.SEVERE,toString2() + text + e.orig);      }      if (m_session.isAutoAck()) {        if (_logger.isLoggable(Level.FINE)) {          _logger.log(Level.FINE,toString2() + "receive(): Session's ack mode is AUTO_ACKNOWLEDGE" + " or DUPS_OK_ACKNOWLEDGE.\nRenewing transaction.");        }      } else       if (m_session.m_acknowledgeMode == Session.SESSION_TRANSACTED) {        if (_logger.isLoggable(Level.FINE)) {          _logger.log(Level.FINE,toString2() + "receive(): Session's ack mode is SESSION_TRANSACTED.\n" + "Rolling back transaction "+ m_session.getTransaction());        }        try {          m_session.rollback();        } catch (        JMSException e1) {          if (_logger.isLoggable(Level.SEVERE)) {            _logger.log(Level.SEVERE,toString2() + "receive(): Failed to roll back transaction");          }        }        TransactionRolledBackException re=new TransactionRolledBackException(text + "Transaction rolled back.");        re.setLinkedException(e.orig);        throw re;      } else       if (m_session.m_acknowledgeMode == Session.CLIENT_ACKNOWLEDGE) {        if (_logger.isLoggable(Level.FINE)) {          _logger.log(Level.FINE,toString2() + "receive(): Session's ack mode is CLIENT_ACKNOWLEDGE.\n" + "Recovering messages of transaction "+ m_session.getTransaction());        }        try {          m_session.recoverMessages();        } catch (        RollbackFailedException e1) {          if (_logger.isLoggable(Level.SEVERE)) {            _logger.log(Level.SEVERE,toString2() + "receive(): Failed to recover messages of transaction " + m_session.getTransaction()+ e1.orig);          }        }        try {          m_session.renewTransaction();        } catch (        TransactionCreateException e1) {          if (_logger.isLoggable(Level.SEVERE)) {            _logger.log(Level.SEVERE,toString2() + "receive(): Failed to renew transaction",e1.orig);          }        }        TransactionRolledBackException re=new TransactionRolledBackException(text + "Transaction rolled back.");        re.setLinkedException(e.orig);        throw re;      }    }catch (    CommitFailedException e) {      String text="Internal error during auto commit. Message=" + message.JMSMessageID + ", Txn="+ m_session.getTransaction();      if (_logger.isLoggable(Level.SEVERE)) {        _logger.log(Level.SEVERE,toString2() + text + e.orig);      }      try {        m_session.renewTransaction();      } catch (      TransactionCreateException e1) {        if (_logger.isLoggable(Level.SEVERE)) {          _logger.log(Level.SEVERE,toString2() + "receive(): Failed to renew transaction: " + e1.orig);        }      }    }catch (    TransactionCreateException e) {      if (_logger.isLoggable(Level.SEVERE)) {        _logger.log(Level.SEVERE,toString2() + "receive(): Failed to renew transaction: " + e.orig);      }      break;    } finally {      long now=SystemTime.timeMillis();      timeout=timeout - (now - startTime);synchronized (m_session.stopMonitor) {        if (m_session.onProcess) {          if (_logger.isLoggable(Level.FINEST)) {            _logger.log(Level.FINEST,toString2() + "onProcess=false");          }          m_session.onProcess=false;          m_session.stopMonitor.notifyAll();        }      }    }  }  return (Message)message;}  }
class C{  public static UserLayer createNewUserLayer(){  UserLayer userLayer=styleFactory.createUserLayer();  return userLayer;}  }
class C{  public double[] generate(int nSamples){  int m=nSamples / 2;  double r;  double pi=Math.PI;  double[] w=new double[nSamples];switch (windowType) {case BARTLETT:    for (int n=0; n < nSamples; n++)     w[n]=1.0f - Math.abs(n - m) / m;  break;case HANNING:r=pi / (m + 1);for (int n=-m; n < m; n++) w[m + n]=0.5f + 0.5f * Math.cos(n * r);break;case HAMMING:r=pi / m;for (int n=-m; n < m; n++) w[m + n]=0.54f + 0.46f * Math.cos(n * r);break;case BLACKMAN:r=pi / m;for (int n=-m; n < m; n++) w[m + n]=0.42f + 0.5f * Math.cos(n * r) + 0.08f * Math.cos(2 * n * r);break;default :for (int n=0; n < nSamples; n++) w[n]=1.0f;}return w;}  }
class C{  private VendorOptionManager(){  internal_addVendorOption(new NoVendorOption());  internal_addVendorOption(new GeoServerVendorOption());  populate();}  }
class C{  @Override public void updateValue(String key,String value){  boolean dataUpdated=false;  if (fieldValueMap.containsKey(key)) {    if (fieldValueMap.get(key).compareTo(value) != 0) {      dataUpdated=true;      fieldValueMap.put(key,value);    }  } else {    dataUpdated=true;    fieldValueMap.put(key,value);  }  if (dataUpdated) {    writeConfigFile();  }}  }
class C{  public Builder discCacheExtraOptions(int maxImageWidthForDiscCache,int maxImageHeightForDiscCache,CompressFormat compressFormat,int compressQuality,BitmapProcessor processorForDiscCache){  this.maxImageWidthForDiscCache=maxImageWidthForDiscCache;  this.maxImageHeightForDiscCache=maxImageHeightForDiscCache;  this.imageCompressFormatForDiscCache=compressFormat;  this.imageQualityForDiscCache=compressQuality;  this.processorForDiscCache=processorForDiscCache;  return this;}  }
class C{  private void distributeExtraSpace(int extraHeight){  int topSpacerHeight;  int middleSpacerHeight;  int bottomSpacerHeight;  if (extraHeight < mTotalSpacerHeight) {    topSpacerHeight=Math.round(extraHeight * (TOP_SPACER_HEIGHT_DP / TOTAL_SPACER_HEIGHT_DP));    extraHeight-=topSpacerHeight;    middleSpacerHeight=Math.round(extraHeight * (MIDDLE_SPACER_HEIGHT_DP / (MIDDLE_SPACER_HEIGHT_DP + BOTTOM_SPACER_HEIGHT_DP)));    extraHeight-=middleSpacerHeight;    bottomSpacerHeight=extraHeight;  } else {    topSpacerHeight=mTopSpacerHeight;    middleSpacerHeight=mMiddleSpacerHeight;    bottomSpacerHeight=mBottomSpacerHeight;    extraHeight-=mTotalSpacerHeight;    topSpacerHeight+=(extraHeight + 1) / 2;    bottomSpacerHeight+=extraHeight / 2;  }  int widthSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.EXACTLY);  mTopSpacer.measure(widthSpec,MeasureSpec.makeMeasureSpec(topSpacerHeight,MeasureSpec.EXACTLY));  mMiddleSpacer.measure(widthSpec,MeasureSpec.makeMeasureSpec(middleSpacerHeight,MeasureSpec.EXACTLY));  mBottomSpacer.measure(widthSpec,MeasureSpec.makeMeasureSpec(bottomSpacerHeight,MeasureSpec.EXACTLY));}  }
class C{  private BooleanQuery startswithFilterQuery(String luceneFieldName,ApiFilter filter){  return filter.getValues().stream().map(null).map(null).collect(getBooleanQueryCollector(BooleanClause.Occur.SHOULD)).build();}  }
class C{  @Override public void endElement(String name) throws SAXException {  if (saxParser != null) {    saxParser.endElement(name);  }}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.getPcoaTab() != null && viewer.getPcoaTab().getFirstPC() == 1 && viewer.getPcoaTab().getSecondPC() == 2 && !viewer.getPcoaTab().isIs3dMode();}  }
class C{  private AttackGymResponse doActions(List<BattleAction> actions) throws LoginFailedException, RemoteServerException {  AttackGymMessage.Builder message=AttackGymMessage.newBuilder().setGymId(gym.getId()).setPlayerLatitude(api.getLatitude()).setPlayerLongitude(api.getLongitude()).setBattleId(battleResponse.getBattleId());  for (  BattleAction action : actions) {    message.addAttackActions(action);  }  ServerRequest serverRequest=new ServerRequest(RequestType.ATTACK_GYM,message.build());  api.getRequestHandler().sendServerRequests(serverRequest);  try {    AttackGymResponse response=AttackGymResponse.parseFrom(serverRequest.getData());    if (response.getBattleLog().getState() == BattleState.DEFEATED || response.getBattleLog().getState() == BattleState.VICTORY || response.getBattleLog().getState() == BattleState.TIMED_OUT) {      concluded=true;    }    outcome=response.getBattleLog().getState();    return response;  } catch (  InvalidProtocolBufferException e) {    throw new RemoteServerException();  }}  }
class C{  protected PhotosEditQuery photoId(int value){  return unsafeParam("photo_id",value);}  }
class C{  static public InputStream findClusterXSLSchema(String _clusterXSLSchema) throws ClusterConfigurationException {  String schemaNameToBeUsed=_clusterXSLSchema;  if (schemaNameToBeUsed.equalsIgnoreCase(ClusterXML.CLUSTER_SCHEMA_NAME_PARTITIONED_SYNC2BACKUP))   schemaNameToBeUsed=ClusterXML.CLUSTER_SCHEMA_NAME_PARTITIONED;  InputStream schemaInputStream;  String schemaFilePath=Constants.Container.CONTAINER_CONFIG_DIRECTORY + "/" + Constants.Schemas.SCHEMAS_FOLDER+ "/"+ schemaNameToBeUsed+ ClusterXML.CLUSTER_SCHEMA_XSL_FILE_SUFFIX;  schemaInputStream=getResourceStream(schemaFilePath);  if (schemaInputStream != null) {    if (_logger.isLoggable(Level.FINE)) {      _logger.fine("Loaded the cluster xsl schema < " + getResourceURL(schemaFilePath) + " > for the cluster config setup.");    }    return schemaInputStream;  } else {    String missingSchemaMsg="Could not find the cluster xsl schema file: " + _clusterXSLSchema;    throw new ClusterConfigurationException(missingSchemaMsg);  }}  }
class C{  public PhotosGetAllQuery photoSizes(Boolean value){  return unsafeParam("photo_sizes",value);}  }
class C{  protected void computeWeightsForPts(){  int i;  int s, t;  off_graph_edge p;  IVarAbstraction node;  pre_cnt=0;  for (i=0; i < n_var; ++i) {    pre[i]=-1;    count[i]=0;    rep[i]=i;    repsize[i]=1;    node=int2var.get(i);    node.top_value=Integer.MIN_VALUE;  }  for (i=0; i < n_var; ++i)   if (pre[i] == -1)   tarjan_scc(i);  for (i=0; i < n_var; ++i) {    p=varGraph.get(i);    s=find_parent(i);    while (p != null) {      t=find_parent(p.t);      if (t != s)       count[t]++;      p=p.next;    }  }  for (i=0; i < n_var; ++i) {    p=varGraph.get(i);    if (p != null && rep[i] != i) {      t=find_parent(i);      while (p.next != null)       p=p.next;      p.next=varGraph.get(t);      varGraph.set(t,varGraph.get(i));      varGraph.set(i,null);    }  }  queue.clear();  for (i=0; i < n_var; ++i)   if (rep[i] == i && count[i] == 0)   queue.addLast(i);  i=0;  while (!queue.isEmpty()) {    s=queue.getFirst();    queue.removeFirst();    node=int2var.get(s);    node.top_value=i;    i+=repsize[s];    p=varGraph.get(s);    while (p != null) {      t=find_parent(p.t);      if (t != s) {        if (--count[t] == 0)         queue.addLast(t);      }      p=p.next;    }  }  for (i=n_var - 1; i > -1; --i) {    if (rep[i] != i) {      node=int2var.get(find_parent(i));      IVarAbstraction me=int2var.get(i);      me.top_value=node.top_value + repsize[node.id] - 1;      --repsize[node.id];    }  }}  }
class C{  public void start() throws ErlangVersionException, DownloadException, ExtractionException, StartupException {  if (rabbitMqProcess != null) {    throw new IllegalStateException("Start shouldn't be called more than once unless stop() has been called before.");  }  check();  download();  extract();  run();}  }
class C{  public CMM(){  params=new CMMParams();}  }
class C{  public void linkConceptTypes(){  Set<Rule> rules=getRules();  LOG.debug(rules.size() + " rules initialized...");  for (  Rule rule : rules) {    workingMemory.putIfAbsent(rule.getId(),new InferenceRule(rule,graph));    if (rule.getHypothesisTypes().isEmpty() && rule.getConclusionTypes().isEmpty()) {      linkConceptTypes(rule);    }  }}  }
class C{  public static GeneralPath cardinalSpline(GeneralPath p,float pts[],int start,int npoints,float slack,boolean closed,float tx,float ty){  int len=2 * npoints;  int end=start + len;  if (len < 6) {    throw new IllegalArgumentException("To create spline requires at least 3 points");  }  float dx1, dy1, dx2, dy2;  if (closed) {    dx2=pts[start + 2] - pts[end - 2];    dy2=pts[start + 3] - pts[end - 1];  } else {    dx2=pts[start + 4] - pts[start];    dy2=pts[start + 5] - pts[start + 1];  }  int i;  for (i=start + 2; i < end - 2; i+=2) {    dx1=dx2;    dy1=dy2;    dx2=pts[i + 2] - pts[i - 2];    dy2=pts[i + 3] - pts[i - 1];    p.curveTo(tx + pts[i - 2] + slack * dx1,ty + pts[i - 1] + slack * dy1,tx + pts[i] - slack * dx2,ty + pts[i + 1] - slack * dy2,tx + pts[i],ty + pts[i + 1]);  }  if (closed) {    dx1=dx2;    dy1=dy2;    dx2=pts[start] - pts[i - 2];    dy2=pts[start + 1] - pts[i - 1];    p.curveTo(tx + pts[i - 2] + slack * dx1,ty + pts[i - 1] + slack * dy1,tx + pts[i] - slack * dx2,ty + pts[i + 1] - slack * dy2,tx + pts[i],ty + pts[i + 1]);    dx1=dx2;    dy1=dy2;    dx2=pts[start + 2] - pts[end - 2];    dy2=pts[start + 3] - pts[end - 1];    p.curveTo(tx + pts[end - 2] + slack * dx1,ty + pts[end - 1] + slack * dy1,tx + pts[0] - slack * dx2,ty + pts[1] - slack * dy2,tx + pts[0],ty + pts[1]);    p.closePath();  } else {    p.curveTo(tx + pts[i - 2] + slack * dx2,ty + pts[i - 1] + slack * dy2,tx + pts[i] - slack * dx2,ty + pts[i + 1] - slack * dy2,tx + pts[i],ty + pts[i + 1]);  }  return p;}  }
class C{  private void BrowseSummaryDirBtnActionPerformed(java.awt.event.ActionEvent evt){  JFileChooser fc=new JFileChooser();  fc.setCurrentDirectory((SummariesRootDirEdt.getText().length() == 0) ? new java.io.File(".") : new java.io.File(SummariesRootDirEdt.getText()));  fc.setSelectedFile(fc.getCurrentDirectory());  fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);  int iRet=fc.showOpenDialog(this);  if (iRet == JFileChooser.APPROVE_OPTION) {    SummariesRootDirEdt.setText(fc.getSelectedFile().getAbsolutePath());  }}  }
class C{  public int model(){  return theModel;}  }
class C{  public void addMultiOptionGroup(MultiOptionGroup multiOption){  Map<GroupIdEnum,GroupConfigInterface> panelMap=groupMap.get(panelId);  if (panelMap == null) {    panelMap=new HashMap<GroupIdEnum,GroupConfigInterface>();    groupMap.put(panelId,panelMap);  }  if (multiOption != null) {    panelMap.put(multiOption.getId(),multiOption);  }}  }
class C{  private static byte[] readClass(final InputStream is) throws IOException {  if (is == null) {    throw new IOException("Class not found");  }  byte[] b=new byte[is.available()];  int len=0;  while (true) {    int n=is.read(b,len,b.length - len);    if (n == -1) {      if (len < b.length) {        byte[] c=new byte[len];        System.arraycopy(b,0,c,0,len);        b=c;      }      return b;    }    len+=n;    if (len == b.length) {      byte[] c=new byte[b.length + 1000];      System.arraycopy(b,0,c,0,len);      b=c;    }  }}  }
class C{  public Builder longColumnsMathOp(String newColumnName,MathOp mathOp,String... columnNames){  return transform(new LongColumnsMathOpTransform(newColumnName,mathOp,columnNames));}  }
class C{  private boolean indicateReadCommitted(ITransactionalEntryData entry,ITemplateHolder template){  if (indicateDirtyRead(template) || !template.isReadCommittedRequested())   return false;  ServerTransaction est=entry.getWriteLockTransaction();  if (template.getXidOriginatedTransaction() != null && est != null && template.getXidOriginatedTransaction().equals(est))   return false;  return true;}  }
class C{  private byte[] createBitfield(List<IChunkDescriptor> chunks){  int chunkCount=chunks.size();  byte[] bitfield=new byte[(int)Math.ceil(chunkCount / 8d)];  int completePieces=0;  int bitfieldIndex=0;  while (chunkCount > 0) {    int b=0, offset=bitfieldIndex * 8;    int k=chunkCount < 8 ? chunkCount : 8;    for (int i=0; i < k; i++) {      IChunkDescriptor chunk=chunks.get(offset + i);      if (chunk.getStatus() == DataStatus.VERIFIED) {        b+=0b1 << (7 - i);        completePieces++;      }    }    bitfield[bitfieldIndex]=(byte)b;    bitfieldIndex++;    chunkCount-=8;  }  this.completePieces.addAndGet(completePieces);  return bitfield;}  }
class C{  public void updateView(){  if (classificationViewer == null)   classificationViewer=(ClassificationViewer)dir.getViewerByClass(ClassificationViewer.class);  if (classificationViewer == null)   return;  classificationViewer.updateView(Director.ALL);}  }
class C{  private Entry findEntry(Lease lease) throws UnknownLeaseException {  Entry e=findEntryDo(lease);  if (e != null && (e.renew < e.endTime || SystemTime.timeMillis() < e.endTime)) {    return e;  }  throw new UnknownLeaseException();}  }
class C{  public ImageSize scale(float scale){  return new ImageSize((int)(width * scale),(int)(height * scale));}  }
class C{  public void recordHit(){  mIsHit=true;}  }
class C{  public XIncludeParserConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool){  this(symbolTable,grammarPool,null);}  }
class C{  private void purgeCache(){  boolean removedOne=false;  Entry<String,CacheEntry> oldest=null;  Set<Entry<String,CacheEntry>> entries=this.cache.entrySet();  for (Iterator<Entry<String,CacheEntry>> it=entries.iterator(); it.hasNext(); ) {    Entry<String,CacheEntry> entry=it.next();    if (entry.getValue().isExpired()) {      it.remove();      removedOne=true;    } else     if (oldest == null || entry.getValue().expireAt < oldest.getValue().expireAt) {      oldest=entry;    }  }  if (!removedOne && oldest != null) {    this.cache.remove(oldest.getKey());  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_NoFly_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200463,skilltarget,skillname);}  }
class C{  public static JsonWriterWithViewHelper withView(Class view){  return new JsonWriterWithViewHelper(JSON.writerWithView(view));}  }
class C{  public static long readVLong(DataInput stream) throws IOException {  byte firstByte=stream.readByte();  int len=decodeVIntSize(firstByte);  if (len == 1) {    return firstByte;  }  long i=0;  for (int idx=0; idx < len - 1; idx++) {    byte b=stream.readByte();    i=i << 8;    i=i | (b & 0xFF);  }  return (isNegativeVInt(firstByte) ? (i ^ -1L) : i);}  }
class C{  private static String limitErrorMessage(@NotNull String message){  int offset=StringUtil.lineColToOffset(message,30,0);  if (offset < 0) {    offset=message.length();  }  return message.substring(0,Math.min(offset,1024));}  }
class C{  public boolean isSrcPrec(){  return isSrcPrec;}  }
class C{  public GammaDistribution(double shape,double scale) throws MathIllegalArgumentException {  this(shape,scale,DEFAULT_SOLVER_ABSOLUTE_ACCURACY);}  }
class C{  public boolean hasSuperClassAccess(){  return getSuperClassAccessOpt().getNumChild() != 0;}  }
class C{  public static void e(String tag,String msg,Object... args){  if (sLevel > LEVEL_ERROR) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.e(tag,msg);}  }
class C{  public void loadData(String path){  if (path == null) {    LogUtils.warn("current directory is null");    return;  }  ArrayList<FileItem> datas=new ArrayList<FileItem>();  if (rootPath == null) {    rootPath=path;  }  LogUtils.debug("current directory path: " + path);  currentPath=path;  if (showHomeDir) {    FileItem fileRoot=new FileItem();    fileRoot.setDirectory(true);    fileRoot.setIcon(homeIcon);    fileRoot.setName(DIR_ROOT);    fileRoot.setSize(0);    fileRoot.setPath(rootPath);    datas.add(fileRoot);  }  if (showUpDir && !path.equals("/")) {    FileItem fileParent=new FileItem();    fileParent.setDirectory(true);    fileParent.setIcon(upIcon);    fileParent.setName(DIR_PARENT);    fileParent.setSize(0);    fileParent.setPath(new File(path).getParent());    datas.add(fileParent);  }  File[] files;  if (allowExtensions == null) {    if (onlyListDir) {      files=FileUtils.listDirs(currentPath);    } else {      files=FileUtils.listDirsAndFiles(currentPath);    }  } else {    if (onlyListDir) {      files=FileUtils.listDirs(currentPath,allowExtensions);    } else {      files=FileUtils.listDirsAndFiles(currentPath,allowExtensions);    }  }  if (files != null) {    for (    File file : files) {      if (!showHideDir && file.getName().startsWith(".")) {        continue;      }      FileItem fileItem=new FileItem();      boolean isDirectory=file.isDirectory();      fileItem.setDirectory(isDirectory);      if (isDirectory) {        fileItem.setIcon(folderIcon);        fileItem.setSize(0);      } else {        fileItem.setIcon(fileIcon);        fileItem.setSize(file.length());      }      fileItem.setName(file.getName());      fileItem.setPath(file.getAbsolutePath());      datas.add(fileItem);    }  }  data.clear();  data.addAll(datas);  notifyDataSetChanged();}  }
class C{  public String makeLinkAuto(HttpServletRequest request,HttpServletResponse response,String url,Boolean absPath,Boolean interWebapp,String webSiteId,Boolean controller){  return makeLinkAuto(request,response,url,absPath,interWebapp,webSiteId,controller,null,null,null);}  }
class C{  private IncludeReference(@NonNull Module module,@NonNull VirtualFile fromFile,@Nullable VirtualFile toFile){  myModule=module;  myFromFile=fromFile;  myToFile=toFile;}  }
class C{  public SecureSetUserLevelQuery levels(String... value){  return unsafeParam("levels",value);}  }
class C{  public void postRequest(Context context,String url,String body,ApiListener apiListener){  try {    JSONObject bodyObject=body != null ? new JSONObject(body) : null;    postRequest(context,url,bodyObject,apiListener);  } catch (  JSONException e) {    apiListener.onApiError(new LIApiError("Unable to convert body to json object " + e.toString(),e));  }}  }
class C{  public MessagesMarkAsReadQuery messageIds(Integer... value){  return unsafeParam("message_ids",value);}  }
class C{  public Builder withSortOrder(RangeRequest.SortOrder order){  this.sortOrder=order;  return this;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  @Override public void onDestroy(){  Log_OC.v(TAG,"Destroying service");  mBinder=null;  mServiceHandler=null;  mServiceLooper.quit();  mServiceLooper=null;  mNotificationManager=null;  AccountManager am=AccountManager.get(getApplicationContext());  am.removeOnAccountsUpdatedListener(this);  super.onDestroy();}  }
class C{  @JsonIgnore public boolean isInMaintenance(){  return (this.mode == DataTagConstants.MODE_MAINTENANCE);}  }
class C{  public static synchronized void report(){  System.err.println("counter : " + c);}  }
class C{  public static String decrypt16bits(String encrypted) throws Exception {  SecretKeySpec skeySpec=new SecretKeySpec(Settings.sEncryptKey.getBytes(),"AES");  Cipher cipher=Cipher.getInstance("AES");  cipher.init(Cipher.DECRYPT_MODE,skeySpec);  byte[] original=cipher.doFinal(Hex.decodeHex(encrypted.toCharArray()));  String originalString=new String(original);  return originalString;}  }
class C{  private void initSpringSecurity(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Registering Spring Security Filter");  FilterRegistration.Dynamic springSecurityFilter=servletContext.addFilter("springSecurityFilterChain",new DelegatingFilterProxy());  springSecurityFilter.addMappingForUrlPatterns(disps,false,"/*");  springSecurityFilter.setAsyncSupported(true);}  }
class C{  public void sentData(){  hasSentData=true;  lastSendTime=System.currentTimeMillis();}  }
class C{  public static boolean hasModule(@Nullable Project project,@NotNull String gradlePath,boolean checkProjectFolder){  if (project == null) {    return false;  }  for (  Module module : ModuleManager.getInstance(project).getModules()) {    if (gradlePath.equals(getGradlePath(module))) {      return true;    }  }  if (checkProjectFolder) {    File location=getModuleDefaultPath(project.getBaseDir(),gradlePath);    if (location.isFile()) {      return true;    } else     if (location.isDirectory()) {      File[] children=location.listFiles();      return children == null || children.length > 0;    } else {      return false;    }  } else {    return false;  }}  }
class C{  public void add(BlockedPlayer plr){  blockedList.put(plr.getObjId(),plr);}  }
class C{  private ComputeDescription findComputeDescription() throws Exception {  QueryTask.QuerySpecification qs=new QueryTask.QuerySpecification();  qs.query.addBooleanClause(QueryTask.Query.Builder.create().addFieldClause(ComputeState.FIELD_NAME_ID,"ovf-*",QueryTask.QueryTerm.MatchType.WILDCARD).build());  QueryTask qt=QueryTask.create(qs).setDirect(true);  String resultJson=sendRequest(SimpleHttpsClient.HttpMethod.POST,ServiceUriPaths.CORE_QUERY_TASKS,Utils.toJson(qt));  QueryTask result=Utils.fromJson(resultJson,QueryTask.class);  result.results.documentLinks.get(0);  String descJson=sendRequest(SimpleHttpsClient.HttpMethod.GET,result.results.documentLinks.get(0),null);  return Utils.fromJson(descJson,ComputeDescription.class);}  }
class C{  private Vector appendVector(Vector vec,Vector appvec){  if (appvec != null) {    for (int count=0; count < appvec.size(); count++) {      vec.addElement(appvec.elementAt(count));    }  }  return vec;}  }
class C{  public void onRecentTabsPageClosed(){  if (!mCanDisableSessionInvalidations)   return;  --mNumRecentTabPages;  if (mNumRecentTabPages == 0) {    setSessionInvalidationsEnabled(false,UNREGISTER_FOR_SESSION_SYNC_INVALIDATIONS_DELAY_MS);  }}  }
class C{  protected void waitForImage(Image image){  int id=++nextTrackerID;  tracker.addImage(image,id);  try {    tracker.waitForID(id,0);  } catch (  InterruptedException e) {    e.printStackTrace();  }  tracker.removeImage(image,id);}  }
class C{  public Object loadFromString(final String xml) throws XMLException {  Object readObject=null;  try {    readObject=unmarshaller.unmarshal(new StringReader(xml));    if (readObject instanceof JAXBElement) {      readObject=((JAXBElement)readObject).getValue();    }  } catch (  JAXBException e) {    throw new XMLException("Cannot unmarshal the XML",e);  }catch (  IllegalArgumentException e) {    throw new XMLException("Cannot unmarshal the XML",e);  }  return readObject;}  }
class C{  @Override public final void confirmEquipmentStateOK(){  confirmEquipmentStateOK(null);}  }
class C{  public void despawnObjects(boolean remove){  for (  HouseObject<?> obj : getSpawnedObjects()) {    if (obj.isInWorld()) {      obj.getController().onDelete();      obj.clearKnownlist();    }    if (remove) {      obj.removeFromHouse();    }  }  if (remove) {    setPersistentState(PersistentState.UPDATE_REQUIRED);    save();  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  protected void performHighlight(Highlight h,MotionEvent e){  if (!(h == null || h.equalTo(mLastHighlighted))) {    mChart.highlightValue(h,true);    mLastHighlighted=h;  }}  }
class C{  public void unexport(long remoteObjID){  List<ChannelEntry> channelEntries=getChannels(remoteObjID);  for (  ChannelEntry chEntry : channelEntries)   closeConnection(chEntry);}  }
class C{  public static boolean isPotentiallyEncryptedString(String string){  checkNotNull(string,"string");  byte[] encryptedBytes;  try {    encryptedBytes=BaseEncoding.base64().omitPadding().decode(string);  } catch (  IllegalArgumentException e) {    return false;  }  return isPotentiallyEncryptedBytes(encryptedBytes);}  }
class C{  @Override public int onStartCommand(Intent intent,int flags,int startId){  Log_OC.d(TAG,"Starting command with id " + startId);  if (!intent.hasExtra(EXTRA_ACCOUNT) || !intent.hasExtra(EXTRA_FILE)) {    Log_OC.e(TAG,"Not enough information provided in intent");    return START_NOT_STICKY;  } else {    final Account account=intent.getParcelableExtra(EXTRA_ACCOUNT);    final OCFile file=intent.getParcelableExtra(EXTRA_FILE);    AbstractList<String> requestedDownloads=new Vector<String>();    try {      DownloadFileOperation newDownload=new DownloadFileOperation(account,file);      newDownload.addDatatransferProgressListener(this);      newDownload.addDatatransferProgressListener((FileDownloaderBinder)mBinder);      Pair<String,String> putResult=mPendingDownloads.putIfAbsent(account.name,file.getRemotePath(),newDownload);      if (putResult != null) {        String downloadKey=putResult.first;        requestedDownloads.add(downloadKey);        sendBroadcastNewDownload(newDownload,putResult.second);      }    } catch (    IllegalArgumentException e) {      Log_OC.e(TAG,"Not enough information provided in intent: " + e.getMessage());      return START_NOT_STICKY;    }    if (requestedDownloads.size() > 0) {      Message msg=mServiceHandler.obtainMessage();      msg.arg1=startId;      msg.obj=requestedDownloads;      mServiceHandler.sendMessage(msg);    }  }  return START_NOT_STICKY;}  }
class C{  @Override public Node cloneNode(boolean deep){  ElementDefinitionImpl newnode=(ElementDefinitionImpl)super.cloneNode(deep);  newnode.attributes=attributes.cloneMap(newnode);  return newnode;}  }
class C{  public FileAlterationObserver(String directoryName,FileFilter fileFilter,IOCase caseSensitivity){  this(new File(directoryName),fileFilter,caseSensitivity);}  }
class C{  protected void prepareBarHighlight(float x,float y1,float y2,float barspaceHalf,Transformer trans){  float barWidth=0.5f;  float left=x - barWidth + barspaceHalf;  float right=x + barWidth - barspaceHalf;  float top=y1;  float bottom=y2;  mBarRect.set(left,top,right,bottom);  trans.rectValueToPixel(mBarRect,mAnimator.getPhaseY());}  }
class C{  private void stopAutoNoopTimer(){  if (autoNoopTimer != null) {    autoNoopTimer.interrupt();    autoNoopTimer=null;  }}  }
class C{  public synchronized boolean retainAll(Collection c){  Object[] elements=getArray();  int len=elements.length;  if (len != 0) {    int newlen=0;    Object[] temp=new Object[len];    for (int i=0; i < len; ++i) {      Object element=elements[i];      if (c.contains(element))       temp[newlen++]=element;    }    if (newlen != len) {      setArray(copyOfRange(temp,0,newlen,Object[].class));      return true;    }  }  return false;}  }
class C{  public void writeBody(DataOutput dataOut) throws IOException {  SerializationHelper.writeObject((OutputStream)dataOut,Body);}  }
class C{  public void stop(){  mStarted=false;  mEnableSessionInvalidationsTimer.pause();  Intent intent=new Intent(mContext,InvalidationClientService.class);  intent.putExtra(InvalidationIntentProtocol.EXTRA_STOP,true);  mContext.startService(intent);}  }
class C{  public GraphSimilarityComparatorAdapter(){}  }
class C{  private void maybeRunPendingJobsH(){synchronized (mJobs) {    Iterator<JobStatus> it=mPendingJobs.iterator();    if (DEBUG) {    }    while (it.hasNext()) {      JobStatus nextPending=it.next();      JobServiceContext availableContext=null;      for (int i=0; i < mActiveServices.size(); i++) {        JobServiceContext jsc=mActiveServices.get(i);        final JobStatus running=jsc.getRunningJob();        if (running != null && running.matches(nextPending.getUid(),nextPending.getJobId())) {          availableContext=null;          break;        }        if (jsc.isAvailable()) {          availableContext=jsc;        }      }      if (availableContext != null) {        if (!availableContext.executeRunnableJob(nextPending)) {          if (DEBUG) {          }          mJobs.remove(nextPending);        }        it.remove();      }    }  }}  }
class C{  @Nullable public Bitmap generateIconForUrl(String url,boolean includePrivateRegistries){  if (TextUtils.isEmpty(url))   return null;  String text=getIconTextForUrl(url,includePrivateRegistries);  if (TextUtils.isEmpty(text))   return null;  return generateIconForText(text);}  }
class C{  protected FIRFilter(){}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  private static String readKeyValue(Integer keyHandle,String keyPath,String valueName){  Integer actualKeyHandle=null;  try {    actualKeyHandle=openKey(keyHandle,keyPath);    if (actualKeyHandle == null)     return null;    return queryKeyValue(actualKeyHandle,valueName);  }  finally {    closeKey(actualKeyHandle);  }}  }
class C{  public synchronized void removePeer(JsonRpcPeer peer){  if (mReceivingPeers.remove(peer) != null) {    mReceivingPeersSnapshot=null;    if (mListener != null) {      mListener.onPeerUnregistered(peer);    }  }}  }
class C{  @Override public Node firstChild(){  if (fCurrentNode == null)   return null;  Node node=getFirstChild(fCurrentNode);  if (node != null) {    fCurrentNode=node;  }  return node;}  }
class C{  public ChunkManager(World world){  this.world=world;}  }
class C{  public static S2Point robustCrossProd(S2Point a,S2Point b){  S2Point x=S2Point.crossProd(S2Point.add(b,a),S2Point.sub(b,a));  if (!x.equals(new S2Point(0,0,0))) {    return x;  }  return ortho(a);}  }
class C{  public ChangeSet decrement(String path,byte delta){  return increment(path,-delta);}  }
class C{  private void addMetaData(DataQueryParams params,Grid grid){  if (!params.isSkipMeta()) {    Map<String,Object> metaData=new HashMap<>();    Map<String,String> uidNameMap=AnalyticsUtils.getUidNameMap(params);    Map<String,String> cocNameMap=AnalyticsUtils.getCocNameMap(params);    uidNameMap.putAll(cocNameMap);    uidNameMap.put(DATA_X_DIM_ID,DISPLAY_NAME_DATA_X);    metaData.put(AnalyticsMetaDataKey.NAMES.getKey(),uidNameMap);    Calendar calendar=PeriodType.getCalendar();    List<String> periodUids=calendar.isIso8601() ? getDimensionalItemIds(params.getDimensionOrFilterItems(PERIOD_DIM_ID)) : getLocalPeriodIdentifiers(params.getDimensionOrFilterItems(PERIOD_DIM_ID),calendar);    metaData.put(PERIOD_DIM_ID,periodUids);    metaData.put(CATEGORYOPTIONCOMBO_DIM_ID,cocNameMap.keySet());    for (    DimensionalObject dim : params.getDimensionsAndFilters()) {      if (!metaData.keySet().contains(dim.getDimension())) {        metaData.put(dim.getDimension(),getDimensionalItemIds(dim.getItems()));      }    }    User user=securityManager.getCurrentUser(params);    List<OrganisationUnit> organisationUnits=asTypedList(params.getDimensionOrFilterItems(ORGUNIT_DIM_ID));    Collection<OrganisationUnit> roots=user != null ? user.getOrganisationUnits() : null;    if (params.isHierarchyMeta()) {      metaData.put(AnalyticsMetaDataKey.ORG_UNIT_HIERARCHY.getKey(),getParentGraphMap(organisationUnits,roots));    }    if (params.isShowHierarchy()) {      metaData.put(AnalyticsMetaDataKey.ORG_UNIT_NAME_HIERARCHY.getKey(),getParentNameGraphMap(organisationUnits,roots,true));    }    if (params.isDimensionItemMeta()) {      metaData.put(AnalyticsMetaDataKey.DIMENSION_ITEMS.getKey(),AnalyticsUtils.getUidDimensionalItemMap(params));    }    grid.setMetaData(metaData);  }}  }
class C{  public static short readLittleEndianShort(DataInputStream dis) throws IOException {  short bits=(short)(0x0000ff & dis.readByte());  bits|=(((short)(0x0000ff & dis.readByte())) << 8);  return bits;}  }
class C{  public void clear(){  panel.clear();}  }
class C{  public String dnsResolve(String host){  try {    InetAddress ina=InetAddress.getByName(host);    return ina.getHostAddress();  } catch (  UnknownHostException e) {    Logger.log(JavaxPacScriptParser.class,LogLevel.DEBUG,"DNS name not resolvable {0}.",host);  }  return "";}  }
class C{  private void notifyUIRefreshComplete(boolean ignoreHook){  if (mPtrIndicator.hasLeftStartPosition() && !ignoreHook && mRefreshCompleteHook != null) {    if (DEBUG) {      PtrCLog.d(LOG_TAG,"notifyUIRefreshComplete mRefreshCompleteHook run.");    }    mRefreshCompleteHook.takeOver();    return;  }  if (mPtrUIHandlerHolder.hasHandler()) {    if (DEBUG) {      PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIRefreshComplete");    }    mPtrUIHandlerHolder.onUIRefreshComplete(this);  }  mPtrIndicator.onUIRefreshComplete();  tryScrollBackToTopAfterComplete();  tryToNotifyReset();}  }
class C{  public boolean intersectsRange(Date start,Date end){  return intersectsRange(new DateRange(start,end));}  }
class C{  public boolean canZoomOutMoreY(){  return (mScaleY > mMinScaleY);}  }
class C{  public EggIncubator(PokemonGo api,EggIncubatorOuterClass.EggIncubator proto){  this.api=api;  this.proto=proto;}  }
class C{  public boolean isNull(int index){  return JSONObject.NULL.equals(opt(index));}  }
class C{  public static String decode(String str) throws RuntimeException {  byte[] bytes;  try {    bytes=str.getBytes("ASCII");  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException("ASCII is not supported!",e);  }  byte[] decoded=decode(bytes);  return new String(decoded);}  }
class C{  @Override public Vector whatCanGoHere(int[] state){  Vector ret=new Vector();  for (int i=0; i < fNumElements; i++) {    if (state[i + 1] == STATE_START)     ret.addElement(fAllElements[i]);  }  return ret;}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public static Map<String,String> parseKeyAndValueToMap(String source){  if (StringUtil.isEmpty(source)) {    return null;  }  try {    JSONObject jsonObject=new JSONObject(source);    return parseKeyAndValueToMap(jsonObject);  } catch (  JSONException e) {    if (isPrintException) {      e.printStackTrace();    }    return null;  }}  }
class C{  private static PermissionInfo[] parsePermissions(String s){  try {    ArrayList l=new ArrayList();    StreamTokenizer st=createTokenizer(s);    char delim='"';    if (st.nextToken() == StreamTokenizer.TT_WORD && st.sval.equals("delim")) {      if (st.nextToken() == '=') {        if (st.nextToken() == StreamTokenizer.TT_WORD) {          if (st.sval.length() > 1) {            throw new IllegalArgumentException("excess delimiter characters");          }          delim=st.sval.charAt(0);        } else {          delim=(char)st.ttype;        }        if (delim == ';') {          throw new IllegalArgumentException("illegal delimiter ';'");        }      } else {        st=createTokenizer(s);      }      st.nextToken();    }    st.quoteChar(delim);    do {      String type, name=null, actions=null;      if (st.ttype != StreamTokenizer.TT_WORD) {        throw new IllegalArgumentException("expected permission type");      }      type=st.sval;      st.nextToken();      if (st.ttype == StreamTokenizer.TT_EOF || st.ttype == ';') {        l.add(new PermissionInfo(type,null,null));        continue;      } else       if (st.ttype == delim) {        name=st.sval;      } else {        throw new IllegalArgumentException("expected permission name or ';'");      }      st.nextToken();      if (st.ttype == StreamTokenizer.TT_EOF || st.ttype == ';') {        l.add(new PermissionInfo(type,name,null));        continue;      } else       if (st.ttype != ',') {        throw new IllegalArgumentException("expected ',' or ';'");      }      if (st.nextToken() != delim) {        throw new IllegalArgumentException("expected permission actions");      }      actions=st.sval;      st.nextToken();      if (st.ttype == StreamTokenizer.TT_EOF || st.ttype == ';') {        l.add(new PermissionInfo(type,name,actions));        continue;      } else {        throw new IllegalArgumentException("expected ';'");      }    } while (st.nextToken() != StreamTokenizer.TT_EOF);    return (PermissionInfo[])l.toArray(new PermissionInfo[l.size()]);  } catch (  IOException ex) {    throw (Error)new InternalError().initCause(ex);  }}  }
class C{  final void removeHalfEdges(DoubleEdgeListHalfEdge edge){  int index=this.edges.indexOf(edge);  this.removeHalfEdges(index,edge);}  }
class C{  @Override public synchronized void stop(){  LOGGER.info("Stopping the C2MON alive timer mechanism.");  timer.cancel();  running=false;}  }
class C{  public void addActivity(Activity activity){  if (activityStack == null) {    activityStack=new Stack<Activity>();  }  activityStack.add(activity);}  }
class C{  public void mergeStyles(Properties styles){  for (  String token : styles.stringPropertyNames()) {    String stv=styles.getProperty(token);    try {      TokenType tt=TokenType.valueOf(token);      SyntaxStyle tokenStyle=new SyntaxStyle(stv);      put(tt,tokenStyle);    } catch (    IllegalArgumentException ex) {      LOG.warning("illegal token type or style for: " + token);    }  }}  }
class C{  public PhotosCopyQuery copy(UserActor actor,int ownerId,int photoId){  return new PhotosCopyQuery(getClient(),actor,ownerId,photoId);}  }
class C{  public ExceptionalUnitGraph(Body body,ThrowAnalysis throwAnalysis,boolean omitExceptingUnitEdges){  super(body);  initialize(throwAnalysis,omitExceptingUnitEdges);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_ABSORBED_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201094,skilltarget,skillcaster,skillname);}  }
class C{  public synchronized void stop(){  this.stopped=true;}  }
class C{  public boolean stopWhenTouchingEnd(){  return stopWhenTouchingEnd;}  }
class C{  @Override public void onTextChanged(CharSequence s,int start,int before,int count){  if (iTextWatcher != null) {    iTextWatcher.onTextChanged(this.curEditText);  }}  }
class C{  public void clearTriggered(OperationID operationId){  if (operationId != null && _alreadyTriggeredEvents.contains(operationId)) {    _outgoingEvents.remove(operationId);    _alreadyTriggeredEvents.remove(operationId);  }}  }
class C{  public void actionPerformed(ActionEvent ev){  executeImmediately("show window=pagesetup;");}  }
class C{  @Override public DistinguishableEffectSize distinguishableEffectSizes(final long number_impressions_1,final long number_actions_1,final long number_impressions_2,final long number_actions_2){  SymmetricInputValidation(number_impressions_1,number_actions_1,number_impressions_2,number_actions_2);  double zval=DecisionAdjuster.scaledZ(confidenceLevel,maxDecisions);  double pooled_rate=1.0 * (number_actions_1 + number_actions_2) / (number_impressions_1 + number_impressions_2);  double effect_size=zval * sqrt(pooled_rate * (1 - pooled_rate) * (1.0 / number_impressions_1 + 1.0 / number_impressions_2));  return new DistinguishableEffectSize.Builder().withNegativeEffectSize(-effect_size).withPositiveEffectSize(effect_size).build();}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.String getSystemTimeZoneID(java.lang.String,java.lang.String)")) {    java_util_TimeZone_getSystemTimeZoneID(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  private boolean matchCollectionItemNestedProperty(Collection<?> collection,int tokenIndex){  for (  Object item : collection) {    for (int i=tokenIndex; i < _tokens.length && item != null; i++)     item=AbstractTypeIntrospector.getNestedValue(item,i,_tokens,_propertyInfo,_fieldPath);    if (item != null && executePredicate(item))     return true;  }  return false;}  }
class C{  protected final void createDelegate(){  if (delegate == null) {    try {      Object obj=element.createExecutableExtension(ATT_CLASS);      if (obj instanceof IActionDelegate) {        delegate=(IActionDelegate)obj;      }    } catch (    Throwable e) {      if (e instanceof CoreException) {        SVNUIPlugin.log((CoreException)e);      } else {        SVNUIPlugin.log(new Status(Status.ERROR,SVNUIPlugin.ID,TeamException.UNABLE,"Internal plug-in action delegate error on creation.",e));      }    }  }}  }
class C{  public Builder primaryColor(int colorPrimary){  this.stepNumberBackgroundColor=colorPrimary;  this.buttonBackgroundColor=colorPrimary;  return this;}  }
class C{  public Boolean isRecordRepeatedSteps(){  return recordRepeatedSteps;}  }
class C{  @SuppressWarnings("unchecked") void addBox(ValueBox vb){  if (boxes instanceof List) {    List<ValueBox> list=(List<ValueBox>)boxes;    list.add(vb);  } else   if (boxes instanceof ValueBox) {    ValueBox ovb=(ValueBox)boxes;    List<ValueBox> list=new ArrayList<ValueBox>();    list.add(ovb);    list.add(vb);    boxes=list;  } else {    boxes=vb;  }}  }
class C{  public static long calculateDifferentSecond(Date startDate,Date endDate){  return calculateDifference(startDate,endDate,DifferenceMode.Second);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Throwable fillInStackTrace()")) {    java_lang_Throwable_fillInStackTrace(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  @Override public BigFraction reciprocal(){  return new BigFraction(denominator,numerator);}  }
class C{  private void checkValidityOfFifoTemplateOnEntry(Context context,IEntryHolder entry,ITemplateHolder template) throws FifoException {  TerminatingFifoXtnsInfo.FifoXtnEntryInfo eti=null;  boolean isDirtyRead=false;  boolean isReadCommitted=false;  if (context.isTemplateInitialSearch() && template.isInitialFifoSearchActive()) {    eti=_cacheManager.getFifoEntryXtnInfo(entry);    if (eti != null) {      if (TerminatingFifoXtnsInfo.isSeqTransactionGT(eti.getCreatingXtn(),template.getFifoXtnNumberOnSearchStart()))       throw _fifoException;      long xtnEntry;      if (template.isReadOperation()) {        isDirtyRead=indicateDirtyRead(template);        if (isDirtyRead)         return;        isReadCommitted=indicateReadCommitted(context.isNonBlockingReadOp() ? context.getLastRawMatchSnapshot() : entry.getTxnEntryData(),template);        if (isReadCommitted) {          xtnEntry=eti.getEntryWriteXtnNumber();          if (TerminatingFifoXtnsInfo.isSeqTransactionGT(xtnEntry,template.getFifoXtnNumberOnSearchStart()))           throw _fifoException;          return;        }      }      xtnEntry=eti.getTerminatingXtnWriteLock();      if (TerminatingFifoXtnsInfo.isSeqTransactionGT(xtnEntry,template.getFifoXtnNumberOnSearchStart()))       throw _fifoException;      if (template.isWriteLockOperation()) {        xtnEntry=eti.getTerminatingXtnReadLock();        if (TerminatingFifoXtnsInfo.isSeqTransactionGT(xtnEntry,template.getFifoXtnNumberOnSearchStart()))         throw _fifoException;      }    }  }  if (!context.isTemplateInitialSearch() && template.isInitialFifoSearchActive() && template.getPendingFifoSearchObject() != null) {    template.getPendingFifoSearchObject().addRejectedEntry(entry,context.getRecentFifoObject());    throw _fifoException;  }  if (context.isFifoThread()) {    long fifoThreadXtn=context.getRecentFifoObject().getFifoXtnNumber();    if (TerminatingFifoXtnsInfo.isSeqTransactionGT(template.getFifoXtnNumberOnSearchStart(),fifoThreadXtn))     throw _fifoException;    eti=_cacheManager.getFifoEntryXtnInfo(entry);    if (eti != null) {      long xtnEntry;      if (template.isReadOperation()) {        isDirtyRead=indicateDirtyRead(template);        if (isDirtyRead)         return;        isReadCommitted=indicateReadCommitted(context.isNonBlockingReadOp() ? context.getLastRawMatchSnapshot() : entry.getTxnEntryData(),template);        if (isReadCommitted) {          xtnEntry=eti.getEntryWriteXtnNumber();          if (TerminatingFifoXtnsInfo.isSeqTransactionGT(xtnEntry,fifoThreadXtn))           throw _fifoException;          return;        }      }      xtnEntry=eti.getTerminatingXtnWriteLock();      if (TerminatingFifoXtnsInfo.isSeqTransactionGT(xtnEntry,fifoThreadXtn))       throw _fifoException;      if (template.isWriteLockOperation()) {        xtnEntry=eti.getTerminatingXtnReadLock();        if (TerminatingFifoXtnsInfo.isSeqTransactionGT(xtnEntry,fifoThreadXtn))         throw _fifoException;      }    }  }}  }
class C{  @Override public void populateExpression(Object objValue){  Integer newValue=0;  if (objValue instanceof Integer) {    newValue=((Integer)objValue).intValue();  } else   if (objValue instanceof Long) {    newValue=((Long)objValue).intValue();  } else   if (objValue instanceof Double) {    Double d=(Double)objValue;    newValue=d.intValue();  } else   if (objValue instanceof String) {    newValue=Integer.valueOf((String)objValue);  }  populateField(newValue);}  }
class C{  static String byteArrayToAltBase64(byte[] a){  return byteArrayToBase64(a,true);}  }
class C{  public void defineActions(IPageLayout layout){  layout.addNewWizardShortcut("org.eclipse.ui.wizards.new.project");  layout.addNewWizardShortcut("org.eclipse.ui.wizards.new.folder");  layout.addNewWizardShortcut("org.eclipse.ui.wizards.new.file");  layout.addShowViewShortcut(IPageLayout.ID_RES_NAV);  layout.addShowViewShortcut(IPageLayout.ID_OUTLINE);  layout.addShowViewShortcut(IPageLayout.ID_TASK_LIST);  layout.addShowViewShortcut(ISVNUIConstants.HISTORY_VIEW_ID);  layout.addShowViewShortcut(RepositoriesView.VIEW_ID);  layout.addShowViewShortcut(ISynchronizeView.VIEW_ID);  layout.addPerspectiveShortcut("org.eclipse.ui.resourcePerspective");  layout.addPerspectiveShortcut("org.eclipse.team.ui.TeamSynchronizingPerspective");}  }
class C{  static List<String> decodeAll(Collection<String> eventKeys){  List<String> eventIds=Lists.newArrayList();  for (  String eventKey : eventKeys) {    decodeTo(eventKey,eventIds);  }  return eventIds;}  }
class C{  static VersionNumber identifyJavaVersion(final String userAgent){  VersionNumber version=VersionNumber.UNKNOWN;  final List<Pattern> patterns=new ArrayList<Pattern>();  patterns.add(Pattern.compile("Java/((\\d+)((\\.\\d+)+)?((\\-|_)[\\w\\d\\-]+)?)"));  patterns.add(Pattern.compile("Java((\\d+)((\\.\\d+)+)?((\\-|_)[\\w\\d\\-]+)?)"));  for (  final Pattern pattern : patterns) {    final Matcher m=pattern.matcher(userAgent);    if (m.find()) {      version=parseFirstVersionNumber(m.group(MAJOR_INDEX));      break;    }  }  return version;}  }
class C{  public static int floorMod(final int a,final int b) throws MathRuntimeException {  if (b == 0) {    throw new MathRuntimeException(LocalizedCoreFormats.ZERO_DENOMINATOR);  }  final int m=a % b;  if ((a ^ b) >= 0 || m == 0) {    return m;  } else {    return b + m;  }}  }
class C{  public void java_util_TimeZone_getSystemTimeZoneID(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getStringObject());}  }
class C{  public Fraction abs(){  Fraction ret;  if (numerator >= 0) {    ret=this;  } else {    ret=negate();  }  return ret;}  }
class C{  public void append(byte[] bytes){  append(bytes,0,bytes.length);}  }
class C{  public void onOk(int taskId,int playerId){  PlayerTransferRequest request=this.transfers.remove(taskId);  PlayerTransferTask task=this.tasks.remove(taskId);  task.status=PlayerTransferTask.STATUS_DONE;  task.comment="task done";  this.dao.update(task);  GameServerInfo sourceServer=GameServerTable.getGameServerInfo(request.serverId);  if (sourceServer == null || sourceServer.getConnection() == null) {    log.error("Player transfer requests offline server! #" + request.serverId);    return;  }  request.account.setActivated((byte)1);  request.saccount.setActivated((byte)1);  DAOManager.getDAO(AccountDAO.class).updateAccount(request.account);  DAOManager.getDAO(AccountDAO.class).updateAccount(request.saccount);  log.info("transfer #" + taskId + " went onOK!");  sourceServer.getConnection().sendPacket(new SM_PTRANSFER_RESPONSE(PlayerTransferResultStatus.OK,request));}  }
class C{  public TrackedEntityInstanceQueryParams addFilter(QueryItem filter){  this.filters.add(filter);  return this;}  }
class C{  public static <T>T createPojoFromString(String response,Class<T> pojo){  GsonBuilder gsonBuilder=new GsonBuilder();  gsonBuilder.serializeNulls();  return gsonBuilder.create().fromJson(response,pojo);}  }
class C{  public static int checkField(int luaState,Object obj,String fieldName) throws LuaException {  LuaState L=LuaStateFactory.getExistingState(luaState);synchronized (L) {    Field field=null;    Class objClass;    if (obj instanceof Class) {      objClass=(Class)obj;    } else {      objClass=obj.getClass();    }    try {      field=objClass.getField(fieldName);    } catch (    Exception e) {      return 0;    }    if (field == null) {      return 0;    }    Object ret=null;    try {      ret=field.get(obj);    } catch (    Exception e1) {      return 0;    }    if (obj == null) {      return 0;    }    L.pushObjectValue(ret);    return 1;  }}  }
class C{  protected SysexMessage(byte[] data){  super(data);}  }
class C{  @Override public Node cloneNode(boolean deep){  PSVIDocumentImpl newdoc=new PSVIDocumentImpl();  callUserDataHandlers(this,newdoc,UserDataHandler.NODE_CLONED);  cloneNode(newdoc,deep);  newdoc.mutationEvents=mutationEvents;  return newdoc;}  }
class C{  public DecimalSpinner(double min,double max,double stepSize,double noOfDecimalPlaces){  createUI(min,min,max,stepSize,noOfDecimalPlaces);}  }
class C{  @Override public boolean hasMoreData(){  return signal.hasMoreData() && pitchmarks.hasMoreData() || periodsInMemory - shiftPeriods > 0;}  }
class C{  public static boolean equals(double x,double y,int maxUlps){  assert maxUlps > 0 && maxUlps < NAN_GAP;  long xInt=Double.doubleToLongBits(x);  long yInt=Double.doubleToLongBits(y);  if (xInt < 0) {    xInt=SGN_MASK - xInt;  }  if (yInt < 0) {    yInt=SGN_MASK - yInt;  }  return Math.abs(xInt - yInt) <= maxUlps;}  }
class C{  @Override protected void __setConfig(Object config){  m_spaceConfig=(SpaceConfig)config;}  }
class C{  public ArithmeticPostAggregation withFn(ArithmeticPostAggregationFunction fn){  return new ArithmeticPostAggregation(getName(),fn,getFields());}  }
class C{  private Map<String,String> mapJobRowsToJobViews(JobRow jobRow){  try {    return jobPayloadBuilder.buildPayload(jobRow,uriInfo);  } catch (  JobRequestFailedException ignored) {    String msg=ErrorMessageFormat.JOBS_RETREIVAL_FAILED.format(jobRow.getId());    LOG.error(msg);    throw new JobRequestFailedException(msg);  }}  }
class C{  public static boolean isConstantAttribute(String attributeValue){  if (attributeValue.length() > 0) {    return !FlexibleStringExpander.containsExpression(FlexibleStringExpander.getInstance(attributeValue));  }  return true;}  }
class C{  public static boolean isGZip(BufferedInputStream instream){  instream.mark(2);  byte[] b=new byte[2];  try {    instream.read(b,0,2);  } catch (  Exception ex) {    throw new RuntimeException("Couldn't read header from stream ",ex);  }  try {    instream.reset();  } catch (  Exception ex) {    throw new RuntimeException("Couldn't reset stream ",ex);  }  return (b[0] == 31 && b[1] == -117);}  }
class C{  public boolean isHighQualityRenderingEnabled(){  return highQualityRenderingEnabled;}  }
class C{  private SubMap<K,V> newSubMap(K fromKey,boolean fromInclusive,K toKey,boolean toInclusive){  if (isDescending) {    K tk=fromKey;    fromKey=toKey;    toKey=tk;    boolean ti=fromInclusive;    fromInclusive=toInclusive;    toInclusive=ti;  }  if (lo != null) {    if (fromKey == null) {      fromKey=lo;      fromInclusive=loInclusive;    } else {      int c=m.compare(fromKey,lo);      if (c < 0 || (c == 0 && !loInclusive && fromInclusive))       throw new IllegalArgumentException("key out of range");    }  }  if (hi != null) {    if (toKey == null) {      toKey=hi;      toInclusive=hiInclusive;    } else {      int c=m.compare(toKey,hi);      if (c > 0 || (c == 0 && !hiInclusive && toInclusive))       throw new IllegalArgumentException("key out of range");    }  }  return new SubMap<K,V>(m,fromKey,fromInclusive,toKey,toInclusive,isDescending);}  }
class C{  public boolean isGlobalFindable(){  return doc.getDir().getMainViewer().getTree().getNumberOfNodes() > 0;}  }
class C{  private static Permission[] grantablePermissions(Permission[] permissions){  SecurityManager sm=System.getSecurityManager();  if (sm == null || permissions.length == 0) {    return permissions;  }  try {    sm.checkPermission(new GrantPermission(permissions));    return permissions;  } catch (  SecurityException e) {  }  ArrayList list=new ArrayList(permissions.length);  for (int i=0; i < permissions.length; i++) {    try {      Permission p=permissions[i];      sm.checkPermission(new GrantPermission(p));      list.add(p);    } catch (    SecurityException e) {    }  }  return (Permission[])list.toArray(new Permission[list.size()]);}  }
class C{  public double[] toArray(){  double[] daRes=new double[3];  daRes[0]=ValueSimilarity;  daRes[1]=ContainmentSimilarity;  daRes[2]=SizeSimilarity;  return daRes;}  }
class C{  private void initControls(){  mCancelBtn=(Button)findViewById(R.id.folder_picker_btn_cancel);  mCancelBtn.setOnClickListener(this);  mChooseBtn=(Button)findViewById(R.id.folder_picker_btn_choose);  mChooseBtn.setOnClickListener(this);}  }
class C{  public static final void shuffleList(List l,int repeat){  for (int iCnt=0; iCnt < repeat; iCnt++)   shuffleList(l);}  }
class C{  public IndexState createIndex(String name,Path rootDir) throws Exception {synchronized (indices) {    if (indexNames.containsKey(name)) {      throw new IllegalArgumentException("index \"" + name + "\" already exists");    }    if (rootDir == null) {      indexNames.put(name,"NULL");    } else {      if (Files.exists(rootDir)) {        throw new IllegalArgumentException("rootDir \"" + rootDir + "\" already exists");      }      indexNames.put(name,rootDir.toAbsolutePath().toString());    }    saveIndexNames();    IndexState state=new IndexState(this,name,rootDir,true);    indices.put(name,state);    return state;  }}  }
class C{  public StatusFrame(){  super();  initComponents();}  }
class C{  public boolean hasNext(){  try {    return !error && dataIndexReader.getPosition() < dataIndexReader.length();  } catch (  IOException e) {    Basic.caught(e);    return false;  }}  }
class C{  public void reset(){  internalReset(0L);}  }
class C{  public void attribute(String elemName,String attrName,String type,String value){  ElementType e=getElementType(elemName);  if (e == null) {    throw new Error("Attribute " + attrName + " specified for unknown element type "+ elemName);  }  e.setAttribute(attrName,type,value);}  }
class C{  public ByteArrayOutputStream(int size){  if (size < 0) {    throw new IllegalArgumentException("Negative initial size: " + size);  }synchronized (this) {    needNewBuffer(size);  }}  }
class C{  public static Having buildHavings(Map<LogicalMetric,Set<ApiHaving>> metricMap){  if (metricMap == null || metricMap.isEmpty()) {    return null;  }  List<Having> havings=metricMap.entrySet().stream().map(null).collect(Collectors.toList());  Having newHaving=havings.size() == 1 ? havings.get(0) : new AndHaving(havings);  LOG.trace("Having: {}",newHaving);  return newHaving;}  }
class C{  public boolean isCheckUpper(){  return upperCheck;}  }
class C{  public static int copy(InputStream input,OutputStream output) throws IOException {  byte[] buffer=new byte[DEFAULT_BUFFER_SIZE];  int count=0;  int n=0;  while (-1 != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public void removeAllEmails(){  try {    removeLastEmails(folder.getMessageCount());  } catch (  MessagingException e) {    LOGGER.error("error when removing all emails",e);  }}  }
class C{  protected static ObjectReader initRaw(){  return init(CsvSchema.emptySchema().withoutQuoteChar());}  }
class C{  private void computeCoordinates(Graphics gc,Point center,String label,Font font,Triplet<Integer,Integer,Dimension> previous){  int x=center.x;  int y=center.y;  Rectangle bbox=new Rectangle();  Dimension labelSize=Basic.getStringSize(gc,label,font).getSize();  if (labelSize.height < 1)   return;  bbox.setSize(labelSize);  if (rTree.size() == 0) {    bbox.setLocation(x - bbox.width / 2,y);    if (!rTree.overlaps(bbox)) {      Pair<String,Integer> pair=new Pair<>(label,font.getSize());      rTree.add(bbox,pair);      return;    }  }  int direction=previous.getFirst();  for (int k=1; true; k++) {    for (int i=0; i < 2; i++) {      if (direction == 3)       direction=0; else       direction++;      for (int j=previous.getSecond(); j <= k; j++) {switch (direction) {case 0:          x+=useRectangleShape ? 8 : 5;        break;case 1:      y+=5;    break;case 2:  x-=useRectangleShape ? 8 : 5;break;case 3:y-=5;break;}bbox.setLocation(x - bbox.width / 2,y);if (!rTree.overlaps(bbox)) {Pair<String,Integer> pair=new Pair<>(label,font.getSize());previous.setFirst(direction);previous.setSecond(j);previous.setThird(labelSize);rTree.add(bbox,pair);return;}}}}}  }
class C{  public void addInputProcessor(InputProcessor ip){  processors.addProcessor(ip);  Gdx.input.setInputProcessor(processors);}  }
class C{  private LimitSizeEntryList filterEntries(LimitSizeEntryList entries){  LimitSizeEntryList list=new LimitSizeEntryList(entries.capacity(),entries.getTrimSize());  if (collapsed) {    for (    ConsoleEntry entry : entries) {      if (filterEntry(entry)) {        ConsoleCollapsedEntry collapsedEntry=as(entry,ConsoleCollapsedEntry.class);        if (collapsedEntry != null) {          collapsedEntry.index=list.totalCount();          list.addObject(collapsedEntry);        } else {          collapsedEntry=entryLookup.addEntry(entry);          if (collapsedEntry.count == 1) {            collapsedEntry.index=list.totalCount();            list.addObject(collapsedEntry);          }        }      }    }  } else {    for (    ConsoleEntry entry : entries) {      if (filterEntry(entry)) {        list.addObject(entry);      }    }  }  return list;}  }
class C{  public static <T>T lockResult(Future<T> result,String lockPath) throws LockingException {  try {    return Await.result(result);  } catch (  LockingException le) {    throw le;  }catch (  Exception e) {    throw new LockingException(lockPath,"Encountered exception on locking ",e);  }}  }
class C{  public IgDiskCache(File directory){  this(directory,DEFAULT_MAX_SIZE,DEFAULT_MAX_COUNT,AsyncTask.SERIAL_EXECUTOR);}  }
class C{  private Object writeReplace(){  return new DataTransferObject(v.getX(),v.getY(),v.getZ());}  }
class C{  public static Codecs findCodecsFormMimeType(String mimeType,boolean tryColorFormatSurface){  findSupportedColorFormats(mimeType);  SparseArray<ArrayList<String>> hardwareCodecs=sHardwareCodecs.get(mimeType);  SparseArray<ArrayList<String>> softwareCodecs=sSoftwareCodecs.get(mimeType);  Codecs list=new Codecs();  if (Build.VERSION.SDK_INT >= 18 && tryColorFormatSurface) {    int colorFormatSurface=MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface;    try {      list.hardwareCodec=hardwareCodecs.get(colorFormatSurface).get(0);      list.hardwareColorFormat=colorFormatSurface;    } catch (    Exception e) {    }    try {      list.softwareCodec=softwareCodecs.get(colorFormatSurface).get(0);      list.softwareColorFormat=colorFormatSurface;    } catch (    Exception e) {    }    if (list.hardwareCodec != null) {      Log.v(TAG,"Choosen primary codec: " + list.hardwareCodec + " with color format: "+ list.hardwareColorFormat);    } else {      Log.e(TAG,"No supported hardware codec found !");    }    if (list.softwareCodec != null) {      Log.v(TAG,"Choosen secondary codec: " + list.hardwareCodec + " with color format: "+ list.hardwareColorFormat);    } else {      Log.e(TAG,"No supported software codec found !");    }    return list;  }  for (int i=0; i < SUPPORTED_COLOR_FORMATS.length; i++) {    try {      list.hardwareCodec=hardwareCodecs.get(SUPPORTED_COLOR_FORMATS[i]).get(0);      list.hardwareColorFormat=SUPPORTED_COLOR_FORMATS[i];      break;    } catch (    Exception e) {    }  }  for (int i=0; i < SUPPORTED_COLOR_FORMATS.length; i++) {    try {      list.softwareCodec=softwareCodecs.get(SUPPORTED_COLOR_FORMATS[i]).get(0);      list.softwareColorFormat=SUPPORTED_COLOR_FORMATS[i];      break;    } catch (    Exception e) {    }  }  if (list.hardwareCodec != null) {    Log.v(TAG,"Choosen primary codec: " + list.hardwareCodec + " with color format: "+ list.hardwareColorFormat);  } else {    Log.e(TAG,"No supported hardware codec found !");  }  if (list.softwareCodec != null) {    Log.v(TAG,"Choosen secondary codec: " + list.hardwareCodec + " with color format: "+ list.softwareColorFormat);  } else {    Log.e(TAG,"No supported software codec found !");  }  return list;}  }
class C{  public GroupsGetMembersQueryWithFilter(VkApiClient client,Actor actor,GroupsGetMembersFilter filter){  super(client,"groups.getMembers",GetMembersFilterResponse.class);  accessToken(actor.getAccessToken());  filter(filter);}  }
class C{  public static InputStream toInputStream(CharSequence input,String encoding) throws IOException {  return toInputStream(input,Charsets.toCharset(encoding));}  }
class C{  public static String join(String[] data,String joiner){  return join(Arrays.asList(data),joiner);}  }
class C{  public static NestableTransaction.Created create(NestableTransactionManager mgr,long leaseTime) throws LeaseDeniedException, RemoteException {  TransactionManager.Created rawTxn=mgr.create(leaseTime);  NestableServerTransaction tx=new NestableServerTransaction(mgr,rawTxn.id,null,leaseTime);  return new NestableTransaction.Created(tx,rawTxn.lease);}  }
class C{  private JobRow updateField(JobRow row,JobField field,String value){  return row.withFieldValue(field,value).withFieldValue(DATE_UPDATED,new DateTime(timestampGenerator.instant().toEpochMilli()).toDateTimeISO().toString());}  }
class C{  public static char[] readChars(DataInputStream dis,int num) throws IOException {  char[] carray=new char[num];  for (int i=0; i < num; i++) {    carray[i]=readChar(dis);  }  return carray;}  }
class C{  public static ShareFileFragment newInstance(OCFile fileToShare,Account account){  ShareFileFragment fragment=new ShareFileFragment();  Bundle args=new Bundle();  args.putParcelable(ARG_FILE,fileToShare);  args.putParcelable(ARG_ACCOUNT,account);  fragment.setArguments(args);  return fragment;}  }
class C{  public Vector3f add(Vector3f vec,Vector3f result){  result.x=x + vec.x;  result.y=y + vec.y;  result.z=z + vec.z;  return result;}  }
class C{  @Override public String toString(){  return getClass().getSimpleName() + " [Center: " + center+ "  xExtent: "+ xExtent+ "  yExtent: "+ yExtent+ "  zExtent: "+ zExtent+ "]";}  }
class C{  private static boolean groupSetsEqual(String[] groupSet0,String[] groupSet1){  if (groupSet0.length != groupSet1.length)   return false;  iLoop:   for (int i=0; i < groupSet0.length; i++) {    for (int j=0; j < groupSet1.length; j++) {      if (groupSet0[i].equals(groupSet1[j])) {        continue iLoop;      }    }    return false;  }  return true;}  }
class C{  public static <E>DoubleStream shiftingWindowAveragingDouble(Stream<E> stream,int rollingFactor,ToDoubleFunction<? super E> mapper){  Objects.requireNonNull(stream);  Objects.requireNonNull(mapper);  DoubleStream doubleStream=stream.mapToDouble(mapper);  return shiftingWindowAveragingDouble(doubleStream,rollingFactor);}  }
class C{  private UInteger(long value) throws NumberFormatException {  this.value=rangeCheck(value);}  }
class C{  public void putGrammar(DTDGrammar grammar){  XMLDTDDescription desc=(XMLDTDDescription)grammar.getGrammarDescription();  fGrammars.put(desc,grammar);}  }
class C{  @DELETE @Path("{experimentID}/pages/{pageName}") @ApiOperation(value="Remove a page from an experiment",notes="Pages can only be added to an experiment with DRAFT, RUNNING, or PAUSED states") @Timed public Response deletePage(@PathParam("experimentID") @ApiParam(value="Experiment ID") final Experiment.ID experimentID,@PathParam("pageName") @ApiParam(value="Page name where the experiment will appear") final Page.Name pageName,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){  Username userName=authorization.getUser(authorizationHeader);  Experiment experiment=experiments.getExperiment(experimentID);  if (experiment == null) {    throw new ExperimentNotFoundException(experimentID);  }  authorization.checkUserPermissions(userName,experiment.getApplicationName(),Permission.DELETE);  pages.deletePage(experimentID,pageName,authorization.getUserInfo(userName));  return httpHeader.headers(NO_CONTENT).build();}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  public CartPaymentInfo addPaymentAmount(String id,BigDecimal amount,String refNum,String authCode,boolean isSingleUse,boolean isPresent,boolean replace){  CartPaymentInfo inf=this.getPaymentInfo(id,refNum,authCode,amount,replace);  if (isSalesOrder()) {    GenericValue billingAddress=inf.getBillingAddress(this.getDelegator());    if (billingAddress != null) {      for (      GenericValue product : ShoppingCart.getItemsProducts(this.cartLines)) {        if (!ProductWorker.isBillableToAddress(product,billingAddress)) {          throw new IllegalArgumentException("The billing address is not compatible with ProductGeos rules.");        }      }    }  }  inf.singleUse=isSingleUse;  inf.isPresent=isPresent;  if (replace) {    paymentInfo.remove(inf);  }  paymentInfo.add(inf);  return inf;}  }
class C{  private ArrayList<Long> buildCursorPositionMapping(final long[] order,final String columnName,final List<? extends Object> extraData){  ArrayList<Long> missingIds=new ArrayList<Long>();  mOrderedPositions=new ArrayList<Integer>(mCursor.getCount());  mExtraData=new ArrayList<Object>();  mMapCursorPositions=new HashMap<Long,Integer>(mCursor.getCount());  final int idPosition=mCursor.getColumnIndex(columnName);  if (mCursor.moveToFirst()) {    do {      mMapCursorPositions.put(mCursor.getLong(idPosition),mCursor.getPosition());    } while (mCursor.moveToNext());    for (int i=0; order != null && i < order.length; i++) {      final long id=order[i];      if (mMapCursorPositions.containsKey(id)) {        mOrderedPositions.add(mMapCursorPositions.get(id));        mMapCursorPositions.remove(id);        if (extraData != null) {          mExtraData.add(extraData.get(i));        }      } else {        missingIds.add(id);      }    }    mCursor.moveToFirst();  }  return missingIds;}  }
class C{  public Vector2f addLocal(Vector2f vec){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  x+=vec.x;  y+=vec.y;  return this;}  }
class C{  public static void parse(String pathString,Path p){  int n=pathString.length();  ParserHelper ph=new ParserHelper(pathString,0);  ph.skipWhitespace();  float lastX=0;  float lastY=0;  float lastX1=0;  float lastY1=0;  float subPathStartX=0;  float subPathStartY=0;  char prevCmd=0;  while (ph.pos < n) {    char cmd=pathString.charAt(ph.pos);switch (cmd) {case '-':case '+':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':      if (prevCmd == 'm' || prevCmd == 'M') {        cmd=(char)(((int)prevCmd) - 1);        break;      } else       if (prevCmd == 'c' || prevCmd == 'C') {        cmd=prevCmd;        break;      } else       if (prevCmd == 'l' || prevCmd == 'L') {        cmd=prevCmd;        break;      }default :{      ph.advance();      prevCmd=cmd;    }}boolean wasCurve=false;switch (cmd) {case 'M':case 'm':{    float x=ph.nextFloat();    float y=ph.nextFloat();    if (cmd == 'm') {      subPathStartX+=x;      subPathStartY+=y;      p.rMoveTo(x,y);      lastX+=x;      lastY+=y;    } else {      subPathStartX=x;      subPathStartY=y;      p.moveTo(x,y);      lastX=x;      lastY=y;    }    break;  }case 'Z':case 'z':{  p.close();  p.moveTo(subPathStartX,subPathStartY);  lastX=subPathStartX;  lastY=subPathStartY;  lastX1=subPathStartX;  lastY1=subPathStartY;  wasCurve=true;  break;}case 'L':case 'l':{float x=ph.nextFloat();float y=ph.nextFloat();if (cmd == 'l') {  p.rLineTo(x,y);  lastX+=x;  lastY+=y;} else {  p.lineTo(x,y);  lastX=x;  lastY=y;}break;}case 'H':case 'h':{float x=ph.nextFloat();if (cmd == 'h') {p.rLineTo(x,0);lastX+=x;} else {p.lineTo(x,lastY);lastX=x;}break;}case 'V':case 'v':{float y=ph.nextFloat();if (cmd == 'v') {p.rLineTo(0,y);lastY+=y;} else {p.lineTo(lastX,y);lastY=y;}break;}case 'C':case 'c':{wasCurve=true;float x1=ph.nextFloat();float y1=ph.nextFloat();float x2=ph.nextFloat();float y2=ph.nextFloat();float x=ph.nextFloat();float y=ph.nextFloat();if (cmd == 'c') {x1+=lastX;x2+=lastX;x+=lastX;y1+=lastY;y2+=lastY;y+=lastY;}p.cubicTo(x1,y1,x2,y2,x,y);lastX1=x2;lastY1=y2;lastX=x;lastY=y;break;}case 'S':case 's':{wasCurve=true;float x2=ph.nextFloat();float y2=ph.nextFloat();float x=ph.nextFloat();float y=ph.nextFloat();if (cmd == 's') {x2+=lastX;x+=lastX;y2+=lastY;y+=lastY;}float x1=2 * lastX - lastX1;float y1=2 * lastY - lastY1;p.cubicTo(x1,y1,x2,y2,x,y);lastX1=x2;lastY1=y2;lastX=x;lastY=y;break;}case 'A':case 'a':{float rx=ph.nextFloat();float ry=ph.nextFloat();float theta=ph.nextFloat();int largeArc=(int)ph.nextFloat();int sweepArc=(int)ph.nextFloat();float x=ph.nextFloat();float y=ph.nextFloat();drawArc(p,lastX,lastY,x,y,rx,ry,theta,largeArc,sweepArc);lastX=x;lastY=y;break;}}if (!wasCurve) {lastX1=lastX;lastY1=lastY;}ph.skipWhitespace();}}  }
class C{  @Override public void finish(){  for (  Entry<String,FileChannel> entry : fileNameAndStreamCache.entrySet()) {    try {      FileChannel channel=entry.getValue();      if (null != channel) {        channel.close();      }    } catch (    IOException exception) {      LOGGER.error(exception,exception.getMessage());    }  }}  }
class C{  @VisibleForTesting int exactBinarySearch(long searchX,int startSearchIndex){  return approximateBinarySearch(searchX,startSearchIndex,mData.size() - 1,true,0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Sleep_END_A_TO_SELF(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200755,skilltarget);}  }
class C{  public static int exportName2Percent(String format,ViewerBase cViewer,File file,char separator,boolean reportSummarized,ProgressListener progressListener) throws IOException {  int totalLines=0;  try {    final Classification classification=ClassificationManager.get(cViewer.getClassName(),true);    final String shortName=(cViewer.getClassName().toLowerCase().equals("taxonomy") ? "Taxon" : cViewer.getClassName());    try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){      final List<String> names=cViewer.getDocument().getSampleNames();      if (names.size() > 1) {        w.write("#Datasets");        for (        String name : names) {          if (separator == ',')           name=name.replaceAll(",","_");          w.write(separator + " " + name);        }        w.write("\n");      }      final NodeSet selected=cViewer.getSelectedNodes();      progressListener.setSubtask(shortName + " to counts");      progressListener.setMaximum(2 * selected.size());      progressListener.setProgress(0);      int[] total=new int[cViewer.getDocument().getSampleNames().size()];{        final Set<Integer> seen=new HashSet<>();        for (Node v=selected.getFirstElement(); v != null; v=selected.getNextElement(v)) {          final Integer id=(Integer)v.getInfo();          if (id != null && !seen.contains(id)) {            seen.add(id);            final NodeData data=cViewer.getNodeData(v);            final int[] counts=(reportSummarized || v.getOutDegree() == 0 ? data.getSummarized() : data.getAssigned());            for (int i=0; i < counts.length; i++) {              total[i]+=counts[i];            }          }          progressListener.incrementProgress();        }      }{        final Set<Integer> seen=new HashSet<>();        for (Node v=selected.getFirstElement(); v != null; v=selected.getNextElement(v)) {          final Integer id=(Integer)v.getInfo();          if (id != null && !seen.contains(id)) {            seen.add(id);            final NodeData data=cViewer.getNodeData(v);            final int[] counts=(reportSummarized || v.getOutDegree() == 0 ? data.getSummarized() : data.getAssigned());            final String name=getLabelSource(shortName,classification,format,v);            if (name != null) {              if (counts.length == names.size()) {                w.write(name);                for (int i=0; i < counts.length; i++) {                  double value=(total[i] == 0 ? 0 : (100.0 * counts[i]) / (double)total[i]);                  w.write(String.format("%c%f",separator,(float)value));                }                w.write("\n");                totalLines++;              } else               System.err.println("Skipped " + name + ", number of values: "+ counts.length);            }          }          progressListener.incrementProgress();        }      }    }   } catch (  CanceledException canceled) {    System.err.println("USER CANCELED");  }  return totalLines;}  }
class C{  public static List<ItemStack> consolidateItemStacks(List<ItemStack> inputStacks){  List<ItemStack> outputStacks=new ArrayList<ItemStack>();  for (  ItemStack sourceIS : inputStacks) {    boolean bFound=false;    for (    ItemStack destIS : outputStacks) {      if (destIS != null && sourceIS != null && itemStackIngredientsMatch(destIS,sourceIS)) {        bFound=true;        destIS.stackSize+=sourceIS.stackSize;      }    }    if (!bFound)     outputStacks.add(sourceIS.copy());  }  return outputStacks;}  }
class C{  protected void writeImageDesc() throws IOException {  out.write(0x2c);  writeShort(0);  writeShort(0);  writeShort(width);  writeShort(height);  if (firstFrame) {    out.write(0);  } else {    out.write(0x80 | 0 | 0| 0| palSize);  }}  }
class C{  public boolean after(Model m){  for (  String name : filters.keySet()) {    if (m.getURI().matches(name)) {      Object o=filters.get(name);      try {        IFilter f=null;        if (o instanceof IFilter) {          f=(IFilter)o;        } else {          f=(IFilter)(Class.forName((String)o).newInstance());          filters.put(name,f);        }        if (!f.after(m)) {          return false;        }      } catch (      Exception e) {        log.error(e.getMessage(),e);        filters.remove(name);      }    }  }  Module m1=floor();  if (m1 != null) {    return m1.after(m);  }  return true;}  }
class C{  public final String removeSizeInfo(String label){  int pos=label.indexOf("[");  if (pos > 0)   return label.substring(0,pos).trim();  return label;}  }
class C{  public static byte[] decodeFromFile(String filename) throws java.io.IOException {  byte[] decodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      throw new java.io.IOException("File is too big for this convenience method (" + file.length() + " bytes).");    }    buffer=new byte[(int)file.length()];    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  public static SpaceIndex createCompoundIndex(String[] paths,SpaceIndexType indexType,String indexName,boolean unique){  return createCompoundIndex_Impl(paths,indexType,indexName,unique);}  }
class C{  public static java.util.Date convertToDate(String str,boolean isExpiry){  SimpleDateFormat fmt=new SimpleDateFormat("yyyy-MM-dd HH:mm");  java.util.Date dt=null;  try {    dt=fmt.parse(str);  } catch (  ParseException ex) {    Calendar cal=Calendar.getInstance();    if (isExpiry) {      cal.add(Calendar.DAY_OF_MONTH,1);      cal.set(Calendar.HOUR_OF_DAY,23);      cal.set(Calendar.MINUTE,59);    } else {      cal.set(Calendar.HOUR_OF_DAY,0);      cal.set(Calendar.MINUTE,0);    }    dt=cal.getTime();  }  return dt;}  }
class C{  public JSONObject(){  this.map=new HashMap();}  }
class C{  public int remove(final int key){  if (key == FREE_KEY) {    if (!m_hasFreeKey)     return NO_VALUE;    m_hasFreeKey=false;    --m_size;    return m_freeValue;  }  int ptr=(Tools.phiMix(key) & m_mask) << 1;  int k=m_data[ptr];  if (k == key) {    final int res=m_data[ptr + 1];    shiftKeys(ptr);    --m_size;    return res;  } else   if (k == FREE_KEY)   return NO_VALUE;  while (true) {    ptr=(ptr + 2) & m_mask2;    k=m_data[ptr];    if (k == key) {      final int res=m_data[ptr + 1];      shiftKeys(ptr);      --m_size;      return res;    } else     if (k == FREE_KEY)     return NO_VALUE;  }}  }
class C{  @Override protected void createItemsLayout(){  if (mItemsLayout == null) {    mItemsLayout=new LinearLayout(getContext());    mItemsLayout.setOrientation(LinearLayout.VERTICAL);  }}  }
class C{  public static void zipFiles(Collection<File> resFileList,File zipFile) throws IOException {  ZipOutputStream zipout=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFile),TypedValue.BUFFER_SIZE));  for (  File resFile : resFileList) {    if (resFile.exists()) {      zipFile(resFile,zipout,"");    }  }  zipout.close();}  }
class C{  public void refreshToken(String refreshToken) throws LoginFailedException, RemoteServerException {  HttpUrl url=HttpUrl.parse(OAUTH_TOKEN_ENDPOINT).newBuilder().addQueryParameter("client_id",CLIENT_ID).addQueryParameter("client_secret",SECRET).addQueryParameter("refresh_token",refreshToken).addQueryParameter("grant_type","refresh_token").build();  RequestBody reqBody=RequestBody.create(null,new byte[0]);  Request request=new Request.Builder().url(url).method("POST",reqBody).build();  Response response=null;  try {    response=client.newCall(request).execute();  } catch (  IOException e) {    throw new RemoteServerException("Network Request failed to fetch refreshed tokenId",e);  }  Moshi moshi=new Moshi.Builder().build();  GoogleAuthTokenJson googleAuthTokenJson=null;  try {    googleAuthTokenJson=moshi.adapter(GoogleAuthTokenJson.class).fromJson(response.body().string());    Log.d(TAG,"" + googleAuthTokenJson.getExpiresIn());  } catch (  IOException e) {    throw new RemoteServerException("Failed to unmarshal the Json response to fetch refreshed tokenId",e);  }  if (googleAuthTokenJson.getError() != null) {    throw new LoginFailedException(googleAuthTokenJson.getError());  } else {    Log.d(TAG,"Refreshed Token " + googleAuthTokenJson.getIdToken());    expiresTimestamp=time.currentTimeMillis() + (googleAuthTokenJson.getExpiresIn() * 1000 - REFRESH_TOKEN_BUFFER_TIME);    tokenId=googleAuthTokenJson.getIdToken();  }}  }
class C{  private File createBmxFrameworkParameterFile(JAXBSource source,DMFramework framework,File workingDir){  Transformer transformer;  try {    TransformerFactory tf=TransformerFactory.newInstance(XSLT2_TRANSFORMER_IMPLEMENTATION,null);    InputStream transformationStream=ResourceHelper.getResourceInputStream(BMX_PARAMETERS_TRANSFORMATION);    if (transformationStream == null) {      throw new FileNotFoundException(String.format("Metadata.xml to BMX transformation file is absent: %s",BMX_PARAMETERS_TRANSFORMATION));    }    StreamSource xslt=new StreamSource(transformationStream);    transformer=tf.newTransformer(xslt);    transformer.setParameter(BMX_FRAMEWORK_PARAM,framework.value());  } catch (  TransformerException|IOException e) {    throw new RuntimeException(e);  }  File result=new File(workingDir,framework.value + ".txt");  try (Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(result),"UTF-8"))){    StreamResult streamResult=new StreamResult(writer);    transformer.transform(source,streamResult);    writer.flush();    return result;  } catch (  TransformerException|IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public void updateDatabaseUploadResult(RemoteOperationResult uploadResult,UploadFileOperation upload){  Log_OC.d(TAG,"updateDataseUploadResult uploadResult: " + uploadResult + " upload: "+ upload);  if (uploadResult.isCancelled()) {    removeUpload(upload.getAccount().name,upload.getRemotePath());  } else {    String localPath=(FileUploader.LOCAL_BEHAVIOUR_MOVE == upload.getLocalBehaviour()) ? upload.getStoragePath() : null;    if (uploadResult.isSuccess()) {      updateUploadStatus(upload.getOCUploadId(),UploadStatus.UPLOAD_SUCCEEDED,UploadResult.UPLOADED,upload.getRemotePath(),localPath);    } else {      updateUploadStatus(upload.getOCUploadId(),UploadStatus.UPLOAD_FAILED,UploadResult.fromOperationResult(uploadResult),upload.getRemotePath(),localPath);    }  }}  }
class C{  private List<DataQueryParams> groupByAggregationType(DataQueryParams params){  List<DataQueryParams> queries=new ArrayList<>();  if (!params.getDataElements().isEmpty()) {    ListMap<AggregationType,DimensionalItemObject> aggregationTypeDataElementMap=QueryPlannerUtils.getAggregationTypeDataElementMap(params);    for (    AggregationType aggregationType : aggregationTypeDataElementMap.keySet()) {      DataQueryParams query=DataQueryParams.newBuilder(params).withDataElements(aggregationTypeDataElementMap.get(aggregationType)).withAggregationType(aggregationType).build();      queries.add(query);    }  } else   if (!params.getDataElementGroupSets().isEmpty()) {    DimensionalObject degs=params.getDataElementGroupSets().get(0);    DataElementGroup deg=(DataElementGroup)(degs.hasItems() ? degs.getItems().get(0) : null);    AggregationType aggregationType=ObjectUtils.firstNonNull(params.getAggregationType(),SUM);    if (deg != null && !deg.getMembers().isEmpty()) {      PeriodType periodType=PeriodType.getPeriodTypeByName(params.getPeriodType());      aggregationType=ObjectUtils.firstNonNull(params.getAggregationType(),deg.getAggregationType());      aggregationType=QueryPlannerUtils.getAggregationType(deg.getValueType(),aggregationType,periodType,deg.getPeriodType());    }    DataQueryParams query=DataQueryParams.newBuilder(params).withAggregationType(aggregationType).build();    queries.add(query);  } else {    DataQueryParams query=DataQueryParams.newBuilder(params).withAggregationType(ObjectUtils.firstNonNull(params.getAggregationType(),SUM)).build();    queries.add(query);  }  if (queries.size() > 1) {    log.debug("Split on aggregation type: " + queries.size());  }  return queries;}  }
class C{  public void zoom(float scaleX,float scaleY,float xValue,float yValue,AxisDependency axis){  Runnable job=new ZoomJob(mViewPortHandler,scaleX,scaleY,xValue,yValue,getTransformer(axis),axis,this);  addViewportJob(job);}  }
class C{  public Matrix(int m,int n,double s){  this.m=m;  this.n=n;  A=new double[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=s;    }  }}  }
class C{  public void onPinch(long time,float x0,float y0,float x1,float y1,boolean firstEvent){  if ((mOverviewAnimationType != OverviewAnimationType.START_PINCH && mOverviewAnimationType != OverviewAnimationType.NONE) || mStackTabs == null) {    return;  }  if (mPinch0TabIndex < 0)   startAnimation(time,OverviewAnimationType.START_PINCH);  boolean inverse=(mCurrentMode == Orientation.PORTRAIT) ? y0 > y1 : LocalizationUtils.isLayoutRtl() ? (x0 <= x1) : (x0 > x1);  float pinch0X=inverse ? x1 : x0;  float pinch0Y=inverse ? y1 : y0;  float pinch1X=inverse ? x0 : x1;  float pinch1Y=inverse ? y0 : y1;  float pinch0Offset=(mCurrentMode == Orientation.PORTRAIT) ? pinch0Y : LocalizationUtils.isLayoutRtl() ? -pinch0X : pinch0X;  float pinch1Offset=(mCurrentMode == Orientation.PORTRAIT) ? pinch1Y : LocalizationUtils.isLayoutRtl() ? -pinch1X : pinch1X;  if (firstEvent) {    mPinch0TabIndex=-1;    mPinch1TabIndex=-1;    mScrollingTab=null;    commitDiscard(time,false);  }  int pinch0TabIndex=mPinch0TabIndex;  int pinch1TabIndex=mPinch1TabIndex;  if (mPinch0TabIndex < 0) {    pinch0TabIndex=getTabIndexAtPositon(pinch0X,pinch0Y);    pinch1TabIndex=getTabIndexAtPositon(pinch1X,pinch1Y);    if (pinch0TabIndex < 0 || pinch1TabIndex < 0) {      pinch0TabIndex=-1;      pinch1TabIndex=-1;    }  }  if (pinch0TabIndex >= 0 && mPinch0TabIndex == pinch0TabIndex && mPinch1TabIndex == pinch1TabIndex) {    final float minScrollTarget=getMinScroll(false);    final float maxScrollTarget=getMaxScroll(false);    final float oldScrollTarget=MathUtils.clamp(mScrollTarget,minScrollTarget,maxScrollTarget);    if (pinch0TabIndex >= pinch1TabIndex) {      float screenDelta0=pinch0Offset - mLastPinch0Offset;      if (pinch0TabIndex == 0) {        setScrollTarget(oldScrollTarget + screenDelta0,false);      } else {        float tab0ScrollSpace=mStackTabs[pinch0TabIndex].getScrollOffset() + oldScrollTarget;        float tab0Screen=scrollToScreen(tab0ScrollSpace);        float tab0ScrollFinal=screenToScroll(tab0Screen + screenDelta0);        setScrollTarget(tab0ScrollFinal - mStackTabs[pinch0TabIndex].getScrollOffset(),false);      }    } else {      float screenDelta0=pinch0Offset - mLastPinch0Offset;      float tab0ScreenBefore=approxScreen(mStackTabs[pinch0TabIndex],oldScrollTarget);      float tab0ScreenAfter=tab0ScreenBefore + screenDelta0;      float screenDelta1=pinch1Offset - mLastPinch1Offset;      float tab1ScreenBefore=approxScreen(mStackTabs[pinch1TabIndex],oldScrollTarget);      float tab1ScreenAfter=tab1ScreenBefore + screenDelta1;      float globalScrollBefore=screenToScroll(tab0ScreenBefore);      float globalScrollAfter=screenToScroll((tab0ScreenAfter + tab0ScreenBefore) / 2);      setScrollTarget(oldScrollTarget + globalScrollAfter - globalScrollBefore,true);      float minScreen=tab0ScreenAfter;      float maxScreen=tab0ScreenAfter;      for (int i=pinch0TabIndex; i <= pinch1TabIndex; i++) {        float screenBefore=approxScreen(mStackTabs[i],oldScrollTarget);        float t=(screenBefore - tab0ScreenBefore) / (tab1ScreenBefore - tab0ScreenBefore);        float screenAfter=(1 - t) * tab0ScreenAfter + t * tab1ScreenAfter;        screenAfter=Math.max(minScreen,screenAfter);        screenAfter=Math.min(maxScreen,screenAfter);        minScreen=screenAfter + StackTab.sStackedTabVisibleSize;        maxScreen=screenAfter + mStackTabs[i].getSizeInScrollDirection(mCurrentMode);        float newScrollOffset=screenToScroll(screenAfter) - mScrollTarget;        mStackTabs[i].setScrollOffset(newScrollOffset);      }      float delta1=tab1ScreenAfter - tab1ScreenBefore;      for (int i=pinch1TabIndex + 1; i < mStackTabs.length; i++) {        delta1/=2;        float screenAfter=approxScreen(mStackTabs[i],oldScrollTarget) + delta1;        screenAfter=Math.max(minScreen,screenAfter);        screenAfter=Math.min(maxScreen,screenAfter);        minScreen=screenAfter + StackTab.sStackedTabVisibleSize;        maxScreen=screenAfter + mStackTabs[i].getSizeInScrollDirection(mCurrentMode);        mStackTabs[i].setScrollOffset(screenToScroll(screenAfter) - mScrollTarget);      }      minScreen=tab0ScreenAfter;      maxScreen=tab0ScreenAfter;      float posScreen=tab0ScreenAfter;      float delta0=tab0ScreenAfter - tab0ScreenBefore;      for (int i=pinch0TabIndex - 1; i > 0; i--) {        delta0/=2;        minScreen=posScreen - mStackTabs[i].getSizeInScrollDirection(mCurrentMode);        maxScreen=posScreen - StackTab.sStackedTabVisibleSize;        float screenAfter=approxScreen(mStackTabs[i],oldScrollTarget) + delta0;        screenAfter=Math.max(minScreen,screenAfter);        screenAfter=Math.min(maxScreen,screenAfter);        mStackTabs[i].setScrollOffset(screenToScroll(screenAfter) - mScrollTarget);      }    }  }  mPinch0TabIndex=pinch0TabIndex;  mPinch1TabIndex=pinch1TabIndex;  mLastPinch0Offset=pinch0Offset;  mLastPinch1Offset=pinch1Offset;  mEvenOutProgress=0.0f;  requestUpdate();}  }
class C{  private void initPresenter(int type){switch (type) {case SEARCH_PHOTOS_TYPE:    this.searchPresenter=new SearchPhotosImplementor(searchModel,this);  break;case SEARCH_COLLECTIONS_TYPE:this.searchPresenter=new SearchCollectionsImplementor(searchModel,this);break;case SEARCH_USERS_TYPE:this.searchPresenter=new SearchUsersImplementor(searchModel,this);break;}this.pagerPresenter=new PagerImplementor(this);this.loadPresenter=new LoadImplementor(loadModel,this);this.scrollPresenter=new ScrollImplementor(scrollModel,this);}  }
class C{  boolean isAliveTag(Long tagId){  if (equipmentConfiguration.getAliveTagId() == tagId) {    return true;  }  for (  SubEquipmentConfiguration subEquipmentConfiguration : equipmentConfiguration.getSubEquipmentConfigurations().values()) {    if (subEquipmentConfiguration.getAliveTagId() != null && subEquipmentConfiguration.getAliveTagId().equals(tagId)) {      return true;    }  }  return false;}  }
class C{  private void buildDFA(CMNode syntaxTree){  int EOCPos=fLeafCount;  XSCMLeaf nodeEOC=new XSCMLeaf(XSParticleDecl.PARTICLE_ELEMENT,null,-1,fLeafCount++);  fHeadNode=new XSCMBinOp(XSModelGroupImpl.MODELGROUP_SEQUENCE,syntaxTree,nodeEOC);  fLeafList=new XSCMLeaf[fLeafCount];  fLeafListType=new int[fLeafCount];  postTreeBuildInit(fHeadNode);  fFollowList=new CMStateSet[fLeafCount];  for (int index=0; index < fLeafCount; index++)   fFollowList[index]=new CMStateSet(fLeafCount);  calcFollowList(fHeadNode);  fElemMap=new Object[fLeafCount];  fElemMapType=new int[fLeafCount];  fElemMapId=new int[fLeafCount];  fElemMapSize=0;  Occurence[] elemOccurenceMap=null;  for (int outIndex=0; outIndex < fLeafCount; outIndex++) {    fElemMap[outIndex]=null;    int inIndex=0;    final int id=fLeafList[outIndex].getParticleId();    for (; inIndex < fElemMapSize; inIndex++) {      if (id == fElemMapId[inIndex])       break;    }    if (inIndex == fElemMapSize) {      XSCMLeaf leaf=fLeafList[outIndex];      fElemMap[fElemMapSize]=leaf.getLeaf();      if (leaf instanceof XSCMRepeatingLeaf) {        if (elemOccurenceMap == null) {          elemOccurenceMap=new Occurence[fLeafCount];        }        elemOccurenceMap[fElemMapSize]=new Occurence((XSCMRepeatingLeaf)leaf,fElemMapSize);      }      fElemMapType[fElemMapSize]=fLeafListType[outIndex];      fElemMapId[fElemMapSize]=id;      fElemMapSize++;    }  }  if (DEBUG) {    if (fElemMapId[fElemMapSize - 1] != -1)     System.err.println("interal error in DFA: last element is not EOC.");  }  fElemMapSize--;  int[] fLeafSorter=new int[fLeafCount + fElemMapSize];  int fSortCount=0;  for (int elemIndex=0; elemIndex < fElemMapSize; elemIndex++) {    final int id=fElemMapId[elemIndex];    for (int leafIndex=0; leafIndex < fLeafCount; leafIndex++) {      if (id == fLeafList[leafIndex].getParticleId())       fLeafSorter[fSortCount++]=leafIndex;    }    fLeafSorter[fSortCount++]=-1;  }  int curArraySize=fLeafCount * 4;  CMStateSet[] statesToDo=new CMStateSet[curArraySize];  fFinalStateFlags=new boolean[curArraySize];  fTransTable=new int[curArraySize][];  CMStateSet setT=fHeadNode.firstPos();  int unmarkedState=0;  int curState=0;  fTransTable[curState]=makeDefStateList();  statesToDo[curState]=setT;  curState++;  HashMap stateTable=new HashMap();  while (unmarkedState < curState) {    setT=statesToDo[unmarkedState];    int[] transEntry=fTransTable[unmarkedState];    fFinalStateFlags[unmarkedState]=setT.getBit(EOCPos);    unmarkedState++;    CMStateSet newSet=null;    int sorterIndex=0;    for (int elemIndex=0; elemIndex < fElemMapSize; elemIndex++) {      if (newSet == null)       newSet=new CMStateSet(fLeafCount); else       newSet.zeroBits();      int leafIndex=fLeafSorter[sorterIndex++];      while (leafIndex != -1) {        if (setT.getBit(leafIndex)) {          newSet.union(fFollowList[leafIndex]);        }        leafIndex=fLeafSorter[sorterIndex++];      }      if (!newSet.isEmpty()) {        Integer stateObj=(Integer)stateTable.get(newSet);        int stateIndex=(stateObj == null ? curState : stateObj.intValue());        if (stateIndex == curState) {          statesToDo[curState]=newSet;          fTransTable[curState]=makeDefStateList();          stateTable.put(newSet,new Integer(curState));          curState++;          newSet=null;        }        transEntry[elemIndex]=stateIndex;        if (curState == curArraySize) {          final int newSize=(int)(curArraySize * 1.5);          CMStateSet[] newToDo=new CMStateSet[newSize];          boolean[] newFinalFlags=new boolean[newSize];          int[][] newTransTable=new int[newSize][];          System.arraycopy(statesToDo,0,newToDo,0,curArraySize);          System.arraycopy(fFinalStateFlags,0,newFinalFlags,0,curArraySize);          System.arraycopy(fTransTable,0,newTransTable,0,curArraySize);          curArraySize=newSize;          statesToDo=newToDo;          fFinalStateFlags=newFinalFlags;          fTransTable=newTransTable;        }      }    }  }  if (elemOccurenceMap != null) {    fCountingStates=new Occurence[curState];    for (int i=0; i < curState; ++i) {      int[] transitions=fTransTable[i];      for (int j=0; j < transitions.length; ++j) {        if (i == transitions[j]) {          fCountingStates[i]=elemOccurenceMap[j];          break;        }      }    }  }  if (DEBUG_VALIDATE_CONTENT)   dumpTree(fHeadNode,0);  fHeadNode=null;  fLeafList=null;  fFollowList=null;  fLeafListType=null;  fElemMapId=null;}  }
class C{  public static boolean isValidBedGraphLine(String line){  String[] bdg=line.split("\t");  if (bdg.length < 4) {    return false;  }  try {    Integer.parseInt(bdg[1]);    Integer.parseInt(bdg[2]);  } catch (  NumberFormatException e) {    return false;  }  return true;}  }
class C{  public static void updateAll(DataStore dataStore,Iterable<Update> updates,Set<String> tags){  updateAll(dataStore,updates.iterator(),tags);}  }
class C{  public void calculateDimensions(Paint labelpaint,ViewPortHandler viewPortHandler){  mTextWidthMax=getMaximumEntryWidth(labelpaint);  mTextHeightMax=getMaximumEntryHeight(labelpaint);switch (mOrientation) {case VERTICAL:{      float maxWidth=0f, maxHeight=0f, width=0f;      float labelLineHeight=Utils.getLineHeight(labelpaint);      final int count=mLabels.length;      boolean wasStacked=false;      for (int i=0; i < count; i++) {        boolean drawingForm=mColors[i] != ColorTemplate.COLOR_SKIP;        if (!wasStacked)         width=0.f;        if (drawingForm) {          if (wasStacked)           width+=mStackSpace;          width+=mFormSize;        }        if (mLabels[i] != null) {          if (drawingForm && !wasStacked)           width+=mFormToTextSpace; else           if (wasStacked) {            maxWidth=Math.max(maxWidth,width);            maxHeight+=labelLineHeight + mYEntrySpace;            width=0.f;            wasStacked=false;          }          width+=Utils.calcTextWidth(labelpaint,mLabels[i]);          if (i < count - 1)           maxHeight+=labelLineHeight + mYEntrySpace;        } else {          wasStacked=true;          width+=mFormSize;          if (i < count - 1)           width+=mStackSpace;        }        maxWidth=Math.max(maxWidth,width);      }      mNeededWidth=maxWidth;      mNeededHeight=maxHeight;      break;    }case HORIZONTAL:{    int labelCount=mLabels.length;    float labelLineHeight=Utils.getLineHeight(labelpaint);    float labelLineSpacing=Utils.getLineSpacing(labelpaint) + mYEntrySpace;    float contentWidth=viewPortHandler.contentWidth() * mMaxSizePercent;    ArrayList<FSize> calculatedLabelSizes=new ArrayList<>(labelCount);    ArrayList<Boolean> calculatedLabelBreakPoints=new ArrayList<>(labelCount);    ArrayList<FSize> calculatedLineSizes=new ArrayList<>();    float maxLineWidth=0.f;    float currentLineWidth=0.f;    float requiredWidth=0.f;    int stackedStartIndex=-1;    for (int i=0; i < labelCount; i++) {      boolean drawingForm=mColors[i] != ColorTemplate.COLOR_SKIP;      calculatedLabelBreakPoints.add(false);      if (stackedStartIndex == -1) {        requiredWidth=0.f;      } else {        requiredWidth+=mStackSpace;      }      if (mLabels[i] != null) {        calculatedLabelSizes.add(Utils.calcTextSize(labelpaint,mLabels[i]));        requiredWidth+=drawingForm ? mFormToTextSpace + mFormSize : 0.f;        requiredWidth+=calculatedLabelSizes.get(i).width;      } else {        calculatedLabelSizes.add(new FSize(0.f,0.f));        requiredWidth+=drawingForm ? mFormSize : 0.f;        if (stackedStartIndex == -1) {          stackedStartIndex=i;        }      }      if (mLabels[i] != null || i == labelCount - 1) {        float requiredSpacing=currentLineWidth == 0.f ? 0.f : mXEntrySpace;        if (!mWordWrapEnabled || currentLineWidth == 0.f || (contentWidth - currentLineWidth >= requiredSpacing + requiredWidth)) {          currentLineWidth+=requiredSpacing + requiredWidth;        } else {          calculatedLineSizes.add(new FSize(currentLineWidth,labelLineHeight));          maxLineWidth=Math.max(maxLineWidth,currentLineWidth);          calculatedLabelBreakPoints.set(stackedStartIndex > -1 ? stackedStartIndex : i,true);          currentLineWidth=requiredWidth;        }        if (i == labelCount - 1) {          calculatedLineSizes.add(new FSize(currentLineWidth,labelLineHeight));          maxLineWidth=Math.max(maxLineWidth,currentLineWidth);        }      }      stackedStartIndex=mLabels[i] != null ? -1 : stackedStartIndex;    }    mCalculatedLabelSizes=calculatedLabelSizes.toArray(new FSize[calculatedLabelSizes.size()]);    mCalculatedLabelBreakPoints=calculatedLabelBreakPoints.toArray(new Boolean[calculatedLabelBreakPoints.size()]);    mCalculatedLineSizes=calculatedLineSizes.toArray(new FSize[calculatedLineSizes.size()]);    mNeededWidth=maxLineWidth;    mNeededHeight=labelLineHeight * (float)(mCalculatedLineSizes.length) + labelLineSpacing * (float)(mCalculatedLineSizes.length == 0 ? 0 : (mCalculatedLineSizes.length - 1));    break;  }}}  }
class C{  public boolean ifUserExists(){  return this.firebaseAuth.getCurrentUser() != null;}  }
class C{  public AuthenticatorException(String msg,List<String> messages,Throwable nested){  super(msg,messages,nested);}  }
class C{  public boolean isInitializationComplete(){  return (currentStage == ZWaveNodeInitStage.DONE);}  }
class C{  @Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {  elementText=new StringBuilder();switch (qName) {case "Iteration":    iteration=new Iteration();  iterationHits.clear();break;case "Iteration_stat":break;case "Iteration_hits":iterationHits.clear();break;case "Hit":hit=new Hit();break;case "Hsp":hsp=new HSP();break;}}  }
class C{  void subscribeByRegex(final Set<String> regexList,final BaseListener listener,final boolean sendInitialUpdateSeperately) throws CacheSynchronizationException {  final Set<Long> allMatchingTags=new HashSet<Long>();  Set<Long> newTagIds=cacheSynchronizer.initTags(regexList,allMatchingTags);  handleTagSubscription(allMatchingTags,newTagIds,listener,sendInitialUpdateSeperately);}  }
class C{  private boolean scanPokemonScreen(){  @ColorInt int[] pixels=screen.grabPixels(area);  if (pixels != null) {    boolean shouldShow=pixels[0] == Color.rgb(250,250,250) && pixels[1] == Color.rgb(28,135,150);    setIVButtonDisplay(shouldShow);    return shouldShow;  }  return false;}  }
class C{  public BoolDataType(){  this.bool=false;}  }
class C{  public String convert(){  if (s == null) {    try {      ByteArrayInputStream bs=new ByteArrayInputStream(bytes);      DataInputStream d=new DataInputStream(bs);      String buf=d.readUTF();      sHashCode=buf.hashCode();      return buf;    } catch (    IOException e) {      return "!!IOException!!";    }  }  return s;}  }
class C{  private static String[] modify(Integer[] order,String[] array){  String[] tmp=new String[order.length];  int pos=0;  for (  Integer id : order) {    if (id < array.length)     tmp[pos++]=array[id];  }  return tmp;}  }
class C{  private void addFallbackSelector(Properties settings,ProtocolDispatchSelector ps){  String proxy=settings.getProperty("default");  if (proxy != null) {    ps.setFallbackSelector(ProxyUtil.parseProxySettings(proxy));  }}  }
class C{  @Override public boolean equals(Object object){  return object == null || object == this;}  }
class C{  final DoubleEdgeList createTriangulation(Vector2... points){  if (points == null)   throw new NullPointerException(Messages.getString("geometry.decompose.nullArray"));  int size=points.length;  if (size < 4)   throw new IllegalArgumentException(Messages.getString("geometry.decompose.invalidSize"));  double winding=Geometry.getWinding(points);  if (winding < 0.0) {    Geometry.reverseWinding(points);  }  SweepLineState sweepstate=new SweepLineState();  PriorityQueue<SweepLineVertex> queue=sweepstate.initialize(points);  while (!queue.isEmpty()) {    SweepLineVertex vertex=queue.poll();    if (vertex.type == SweepLineVertexType.START) {      this.start(vertex,sweepstate);    } else     if (vertex.type == SweepLineVertexType.END) {      this.end(vertex,sweepstate);    } else     if (vertex.type == SweepLineVertexType.SPLIT) {      this.split(vertex,sweepstate);    } else     if (vertex.type == SweepLineVertexType.MERGE) {      this.merge(vertex,sweepstate);    } else     if (vertex.type == SweepLineVertexType.REGULAR) {      this.regular(vertex,sweepstate);    }  }  sweepstate.dcel.triangulateYMonotonePolygons();  return sweepstate.dcel;}  }
class C{  public static void main(String[] sArgs){  int[][] iaTest=new int[1][2];  for (int iX=0; iX < iaTest.length; iX++) {    for (int iY=0; iY < iaTest[0].length; iY++) {      iaTest[iX][iY]=iX;      System.out.print(iX);    }    System.out.println();  }  ArrayGraph atg=new ArrayGraph();  System.err.println(gr.demokritos.iit.jinsect.utils.graphToDot(atg.getGraphForArray(iaTest,2,100000).getGraphLevel(0),true));}  }
class C{  public synchronized void showThreadTrace(){  if (!_threadLocalTraceEnabled)   throw new IllegalStateException();  if (_traceLoggingLevel == OFF_VALUE && !_hasAssociatedLogOn)   return;  _logger.log(Level.INFO,"Trace Thread Start [" + _traceLength + "]");  sortTrace(_threadTrace.get());  for (  LogRecord record : _threadTrace.get())   traceLogRecord(record);  if (_associatedLoggers != null) {    for (    String associatedLogName : _associatedLoggers)     TraceableLogger.getLogger(associatedLogName).showThreadTrace();  }  _logger.log(Level.INFO,"Trace Thread End [" + _traceLength + "]");}  }
class C{  public PolyType(Class baseClass,PolyEntry... entries){  this(baseClass,null,entries);}  }
class C{  @Override public void showMessage(String message){  Snackbar.make(root,message,Snackbar.LENGTH_SHORT).show();}  }
class C{  public short[][] production_table(){  return _production_table;}  }
class C{  public void zoomOut(){  PointF center=mViewPortHandler.getContentCenter();  Matrix save=mViewPortHandler.zoomOut(center.x,-center.y);  mViewPortHandler.refresh(save,this,false);  calculateOffsets();  postInvalidate();}  }
class C{  public BriefUnitGraph(Body body){  super(body);  int size=unitChain.size();  if (Options.v().time())   Timers.v().graphTimer.start();  unitToSuccs=new HashMap<Unit,List<Unit>>(size * 2 + 1,0.7f);  unitToPreds=new HashMap<Unit,List<Unit>>(size * 2 + 1,0.7f);  buildUnexceptionalEdges(unitToSuccs,unitToPreds);  makeMappedListsUnmodifiable(unitToSuccs);  makeMappedListsUnmodifiable(unitToPreds);  buildHeadsAndTails();  if (Options.v().time())   Timers.v().graphTimer.end();  soot.util.PhaseDumper.v().dumpGraph(this,body);}  }
class C{  protected void initializeStorage(ISVNRemoteFile file,IProgressMonitor monitor) throws TeamException {  storage=((IResourceVariant)file).getStorage(monitor);}  }
class C{  public GroupsJoinQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  public final static double abs(double dNum){  return (dNum > 0) ? dNum : -dNum;}  }
class C{  public static int makeListItemSurveyResp(Delegator delegator,GenericValue item,List<String> surveyResps) throws GenericEntityException {  if (UtilValidate.isNotEmpty(surveyResps)) {    int count=0;    for (    String responseId : surveyResps) {      GenericValue listResp=delegator.makeValue("ShoppingListItemSurvey");      listResp.set("shoppingListId",item.getString("shoppingListId"));      listResp.set("shoppingListItemSeqId",item.getString("shoppingListItemSeqId"));      listResp.set("surveyResponseId",responseId);      delegator.create(listResp);      count++;    }    return count;  }  return -1;}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=getBitmapSize(value) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  public ResultEntry convertEntriesToResultArrays(IQueryResultSet<IEntryPacket> entries){  LinkedList<String> columnNames=new LinkedList<String>();  LinkedList<String> columnLabelsList=new LinkedList<String>();  LinkedList<String> tableNamesList=new LinkedList<String>();  for (  SelectColumn col : query.getQueryColumns()) {    if (col.isVisible()) {      columnNames.add(col.getName());      columnLabelsList.add(col.getAlias());      tableNamesList.add(col.getColumnTableData().getTableName());    }  }  String[] fieldNames=columnNames.toArray(new String[columnNames.size()]);  String[] columnLabels=columnLabelsList.toArray(new String[columnLabelsList.size()]);  String[] tableNames=tableNamesList.toArray(new String[tableNamesList.size()]);  Object[][] fieldValues=new Object[entries.size()][columnNames.size()];  Iterator<IEntryPacket> iter=entries.iterator();  int row=0;  while (iter.hasNext()) {    IEntryPacket entry=iter.next();    int column=0;    for (int i=0; i < query.getQueryColumns().size(); i++) {      SelectColumn sc=query.getQueryColumns().get(i);      if (!sc.isVisible())       continue;      fieldValues[row][column++]=entries.getFieldValue(sc,entry);    }    row++;  }  ResultEntry result=new ResultEntry(fieldNames,columnLabels,tableNames,fieldValues);  return result;}  }
class C{  public ChangeReport(final long changeId){  this.changeId=changeId;}  }
class C{  public static AlarmValueImpl createAlarmValue(Alarm alarm,Tag tag){  AlarmValueImpl alarmValueImpl=null;  if (alarm != null && tag != null) {    alarmValueImpl=new AlarmValueImpl(alarm.getId(),alarm.getFaultCode(),alarm.getFaultMember(),alarm.getFaultFamily(),alarm.getInfo(),alarm.getTagId(),tag.getDescription(),alarm.getTimestamp(),alarm.isActive());  }  return alarmValueImpl;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public PackageAccess fullCopy(){  PackageAccess tree=(PackageAccess)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public boolean isCellEditable(int row,int col){  return true;}  }
class C{  public double lengthSquared(){  return NumberConversions.square(x) + NumberConversions.square(y) + NumberConversions.square(z);}  }
class C{  private void updateTexts(DocumentEvent e){  Document doc=e.getDocument();  if (doc == projectNameTextField.getDocument() || doc == projectLocationTextField.getDocument()) {    String projectName=projectNameTextField.getText();    String projectFolder=projectLocationTextField.getText();    createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);  }  panel.fireChangeEvent();}  }
class C{  public boolean isUseAntiAlias(){  return useAntiAlias;}  }
class C{  @Override public void write(char[] chr) throws IOException {  out.write(chr);}  }
class C{  String toString(int indentFactor,int indent) throws JSONException {  int len=length();  if (len == 0) {    return "[]";  }  int i;  StringBuilder sb=new StringBuilder("[");  if (len == 1) {    sb.append(JSONObject.valueToString(this.myArrayList.get(0),indentFactor,indent));  } else {    int newindent=indent + indentFactor;    sb.append('\n');    for (i=0; i < len; i+=1) {      if (i > 0) {        sb.append(",\n");      }      for (int j=0; j < newindent; j+=1) {        sb.append(' ');      }      sb.append(JSONObject.valueToString(this.myArrayList.get(i),indentFactor,newindent));    }    sb.append('\n');    for (i=0; i < indent; i+=1) {      sb.append(' ');    }  }  sb.append(']');  return sb.toString();}  }
class C{  public ColorPanel(Color initialColor){  this(initialColor,true);}  }
class C{  @Override public void start(){  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("starting all alive timers");  }  clusterCache.acquireWriteLockOnKey(C2monCacheLoader.aliveStatusInitialized);  try {    if (!clusterCache.hasKey(C2monCacheLoader.aliveStatusInitialized) || !(Boolean)clusterCache.getCopy(C2monCacheLoader.aliveStatusInitialized)) {      Long aliveTagId;      Process process;      for (      Long id : processCache.getKeys()) {        processCache.acquireReadLockOnKey(id);        try {          process=processCache.get(id);          aliveTagId=process.getAliveTagId();          if (aliveTagId != null) {            if (controlTagCache.hasKey(process.getStateTagId())) {              if (processFacade.isRunning(process)) {                aliveTimerFacade.start(aliveTagId);              }            } else {              LOGGER.warn("Unable to locate state tag in cache (id = " + process.getStateTagId() + ") "+ "cannot start alive timer for this process.");            }          }        }  finally {          processCache.releaseReadLockOnKey(id);        }      }      Equipment equipment;      for (      Long id : equipmentCache.getKeys()) {        equipmentCache.acquireReadLockOnKey(id);        try {          equipment=equipmentCache.get(id);          aliveTagId=equipment.getAliveTagId();          if (aliveTagId != null) {            if (controlTagCache.hasKey(equipment.getStateTagId())) {              if (equipmentFacade.isRunning(equipment)) {                aliveTimerFacade.start(aliveTagId);              }            } else {              LOGGER.warn("Unable to locate state tag in cache (id = " + equipment.getStateTagId() + ") "+ "cannot start alive timer for this equipment.");            }          }        }  finally {          equipmentCache.releaseReadLockOnKey(id);        }      }      SubEquipment subEquipment;      for (      Long id : subEquipmentCache.getKeys()) {        subEquipmentCache.acquireReadLockOnKey(id);        try {          subEquipment=subEquipmentCache.get(id);          aliveTagId=subEquipment.getAliveTagId();          if (aliveTagId != null) {            if (controlTagCache.hasKey(subEquipment.getStateTagId())) {              if (subEquipmentFacade.isRunning(subEquipment)) {                aliveTimerFacade.start(aliveTagId);              }            } else {              LOGGER.warn("Unable to locate state tag in cache (id = " + subEquipment.getStateTagId() + ") cannot "+ "start alive timer for this subequipment.");            }          }        }  finally {          subEquipmentCache.releaseReadLockOnKey(id);        }      }      aliveTimerFacade.startAllTimers();      clusterCache.put(C2monCacheLoader.aliveStatusInitialized,Boolean.TRUE);    }  } catch (  Exception e) {    LOGGER.error("initialise() : Error starting alive timer mechanism.",e);  } finally {    clusterCache.releaseWriteLockOnKey(C2monCacheLoader.aliveStatusInitialized);  }  LOGGER.info("Finished initializing all alive timers.");}  }
class C{  public static INDArray[] append(INDArray[] history,INDArray append){  INDArray[] appended=new INDArray[history.length];  appended[0]=append;  for (int i=0; i < history.length - 1; i++) {    appended[i + 1]=history[i];  }  return appended;}  }
class C{  public GroupsGetInvitedUsersQuery fields(UserField... value){  return unsafeParam("fields",value);}  }
class C{  public static Long streamOpCRC32(String stream){  CRC32 crc=requestCRC.get();  try {    crc.update(stream.getBytes(UTF_8));    return crc.getValue();  }  finally {    crc.reset();  }}  }
class C{  public CoreDocumentImpl(DocumentType doctype){  this(doctype,false);}  }
class C{  public <OBJ extends SRC>InterfaceAdapter<SRC,DST> register(Class<OBJ> inClass,DST outInterface){  Adapter<OBJ,DST> ret=new GenericAdapter<OBJ,DST>(inClass,outInterface);  register(ret);  return this;}  }
class C{  @BindingAdapter({"items","view_provider"}) public static void bindViewPagerAdapter(ViewPager viewPager,Observable<List<ViewModel>> items,ViewProvider viewProvider){  PagerAdapter previousAdapter=viewPager.getAdapter();  BindingUtils.bindAdapterWithDefaultBinder(viewPager,items,viewProvider);  if (previousAdapter != null)   ExampleApplication.getRefWatcher(viewPager.getContext()).watch(previousAdapter);}  }
class C{  public void loadWeather(Player player){  onWeatherChange(player.getWorldId(),player);}  }
class C{  private void populateResultsBox(IVScanResult ivScanResult){  ivScanResult.sortCombinations();  populateResultsHeader(ivScanResult);  if (ivScanResult.getCount() == 1) {    populateSingleIVMatch(ivScanResult);  } else {    populateMultipleIVMatch(ivScanResult);  }  setResultScreenPercentageRange(ivScanResult);  adjustSeekbarsThumbs();  hideSeeAllLinkIfFlagSet(ivScanResult);  populateAdvancedInformation(ivScanResult);  populatePrevScanNarrowing();}  }
class C{  public Feature build(){  checkEncloses(supportedVersionRange,defaultVersionRange,"supportedVersionRange %s does not enclose defaultVersionRange %s on %s",featureName);  for (  ChildBinding binding : childBindings.build()) {    checkEncloses(supportedVersionRange,binding.range,"parent supportedVersionRange %s does not include binding range %s for child %s",binding.child.featureName);    checkEncloses(binding.child.supportedVersionRange,binding.range,"child supportedVersionRange %s does not include binding range %s for child %s",binding.child.featureName);  }  return new Feature(this);}  }
class C{  public BasicBlock pull() throws NoSuchElementException {  if (q.size() == 0)   throw new NoSuchElementException("Pull from empty BBQ");  BasicBlock b=(q.get(0));  q.remove(0);  b.inq=false;  return b;}  }
class C{  protected void initShapeRenderers(){  shapeRendererList=new HashMap<>();  shapeRendererList.put(ScatterChart.ScatterShape.SQUARE.toString(),new SquareShapeRenderer());  shapeRendererList.put(ScatterChart.ScatterShape.CIRCLE.toString(),new CircleShapeRenderer());  shapeRendererList.put(ScatterChart.ScatterShape.TRIANGLE.toString(),new TriangleShapeRenderer());  shapeRendererList.put(ScatterChart.ScatterShape.CROSS.toString(),new CrossShapeRenderer());  shapeRendererList.put(ScatterChart.ScatterShape.X.toString(),new XShapeRenderer());  shapeRendererList.put(ScatterChart.ScatterShape.CHEVRON_UP.toString(),new ChevronUpShapeRenderer());  shapeRendererList.put(ScatterChart.ScatterShape.CHEVRON_DOWN.toString(),new ChevronDownShapeRenderer());}  }
class C{  public ServerTransaction(){}  }
class C{  private static boolean isLowercaseLetter(char ch){  return ('a' <= ch && ch <= 'z');}  }
class C{  protected TextViewer createText(Composite parent){  return new TextViewer(parent,SWT.V_SCROLL | SWT.WRAP | SWT.MULTI| SWT.READ_ONLY);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  private List<Result> makeTopNResults(JsonNode jsonResult,Set<DimensionColumn> dimensionColumns,Set<MetricColumn> metricColumns,DateTimeZone dateTimeZone){  List<Result> results=new ArrayList<>();  for (  JsonNode record : jsonResult) {    DateTime timeStamp=new DateTime(record.get("timestamp").asText(),dateTimeZone);    JsonNode result=record.get("result");    for (    final JsonNode entry : result) {      LinkedHashMap<DimensionColumn,DimensionRow> dimensionRows=extractDimensionRows(dimensionColumns,entry);      LinkedHashMap<MetricColumn,Object> metricValues=extractMetricValues(metricColumns,entry);      results.add(new Result(dimensionRows,metricValues,timeStamp));    }  }  return results;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Summon_ME_TO_B(String value0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200574,value0,skilltarget,skillname);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  private boolean canChangeNickname(Legion legion,int targetObjectId,String newNickname){  if (!isValidNickname(newNickname)) {    return false;  } else   if (!legion.isMember(targetObjectId)) {    return false;  }  return true;}  }
class C{  public void handleDecode(Result rawResult){  inactivityTimer.onActivity();  beepManager.playBeepSoundAndVibrate();  handleDecodeExternally(rawResult);}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>Map<String,V> toMap(Object... data){  if (data.length == 1 && data[0] instanceof Map) {    return UtilGenerics.<String,V>checkMap(data[0]);  }  if (data.length % 2 == 1) {    IllegalArgumentException e=new IllegalArgumentException("You must pass an even sized array to the toMap method (size = " + data.length + ")");    Debug.logInfo(e,module);    throw e;  }  Map<String,V> map=new HashMap<String,V>();  for (int i=0; i < data.length; ) {    map.put((String)data[i++],(V)data[i++]);  }  return map;}  }
class C{  public void clearMemoryCache(){  checkConfiguration();  configuration.memoryCache.clear();}  }
class C{  public ItemToSkillTreeCursor queryItemToSkillTreeItem(long id){  QueryHelper qh=new QueryHelper();  qh.Columns=null;  qh.Selection="itst." + S.COLUMN_ITEM_TO_SKILL_TREE_ITEM_ID + " = ? ";  qh.SelectionArgs=new String[]{"" + id};  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=null;  qh.Limit=null;  return new ItemToSkillTreeCursor(wrapJoinHelper(builderItemToSkillTree(),qh));}  }
class C{  public MessagesDenyMessagesFromCommunityQuery(VkApiClient client,UserActor actor,int groupId){  super(client,"messages.denyMessagesFromCommunity",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);}  }
class C{  public ColorPoint(final double point,final Color color){  if (color == null) {    throw new NullPointerException("color can't be null");  }  if (point > 1 || point < 0) {    throw new IndexOutOfBoundsException("Point of color must be between 0 and 1.");  }  this.point=point;  this.color=color;}  }
class C{  public static void main(String[] args){  try {    ProgramProperties.setProgramName("Meganizer");    ProgramProperties.setProgramVersion(megan.main.Version.SHORT_DESCRIPTION);    PeakMemoryUsageMonitor.start();    (new DAAMeganizer()).run(args);    System.err.println("Total time:  " + PeakMemoryUsageMonitor.getSecondsSinceStartString());    System.err.println("Peak memory: " + PeakMemoryUsageMonitor.getPeakUsageString());    System.exit(0);  } catch (  Exception ex) {    Basic.caught(ex);    System.exit(1);  }}  }
class C{  public ZWaveScheduleEntryLockCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public IdQuery(String typeName,Object id,Object routing,QueryResultType queryResultType){  this(typeName,id,routing,queryResultType,0);}  }
class C{  public AudioGetRecommendationsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public EmailBuilder bcc(String bcc){  this.bcc.add(bcc);  return this;}  }
class C{  public static void v(String tag,String msg){  if (LOG_ENABLE) {    Log.v(tag,buildMsg(msg));  }}  }
