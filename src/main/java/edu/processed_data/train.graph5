class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.186 -0400",hash_original_method="A9166391D9A7ACF8C30AB68B073CEF60",hash_generated_method="EAF7FED493196D746F3C93A3E19B3B66") public static void write(File file,CharSequence data,boolean append) throws IOException {  write(file,data,Charset.defaultCharset(),append);}  }
class C{  public CarrierVehicleTypes buildAndWriteVehicleTypes(String vehicleTypeFile,boolean totalCost){  double factor=0.1;  double[] fixCostPerKm;  if (totalCost) {    fixCostPerKm=new double[]{4.1998 * factor,5.1704 * factor,6.5067 * factor,7.4026 * factor,8.2904 * factor};  } else {    fixCostPerKm=new double[]{0,0,0,0,0};  }  double[] varCostPerKm={7.7637 * factor,9.1092 * factor,9.6589 * factor,7.3485 * factor,7.2059 * factor};  CarrierVehicleType typeThree=CarrierVehicleType.Builder.newInstance(Id.create("3_tonner",VehicleType.class)).setCapacity(3000).setCostPerDistanceUnit(varCostPerKm[0] + fixCostPerKm[0]).build();  CarrierVehicleType typeSix=CarrierVehicleType.Builder.newInstance(Id.create("6_tonner",VehicleType.class)).setCapacity(6000).setCostPerDistanceUnit(varCostPerKm[1] + fixCostPerKm[1]).build();  CarrierVehicleType typeSeven=CarrierVehicleType.Builder.newInstance(Id.create("7_tonner",VehicleType.class)).setCapacity(7000).setCostPerDistanceUnit(varCostPerKm[2] + fixCostPerKm[2]).build();  CarrierVehicleType typeTwelve=CarrierVehicleType.Builder.newInstance(Id.create("12_tonner",VehicleType.class)).setCapacity(12000).setCostPerDistanceUnit(varCostPerKm[3] + fixCostPerKm[3]).build();  CarrierVehicleType typeFifteen=CarrierVehicleType.Builder.newInstance(Id.create("15_tonner",VehicleType.class)).setCapacity(15000).setCostPerDistanceUnit(varCostPerKm[4] + fixCostPerKm[4]).build();  CarrierVehicleTypes carrierVehicleTypes=new CarrierVehicleTypes();  carrierVehicleTypes.getVehicleTypes().put(typeThree.getId(),typeThree);  carrierVehicleTypes.getVehicleTypes().put(typeSix.getId(),typeSix);  carrierVehicleTypes.getVehicleTypes().put(typeSeven.getId(),typeSeven);  carrierVehicleTypes.getVehicleTypes().put(typeTwelve.getId(),typeTwelve);  carrierVehicleTypes.getVehicleTypes().put(typeFifteen.getId(),typeFifteen);  if (vehicleTypeFile != null) {    CarrierVehicleTypeWriter typeWriter=new CarrierVehicleTypeWriter(carrierVehicleTypes);    typeWriter.write(vehicleTypeFile);  }  return carrierVehicleTypes;}  }
class C{  protected void reset(){  for (  List<? extends Position> boundary : this.boundaries) {    if (boundary == null || boundary.size() < 3)     continue;    if (WWMath.computeWindingOrderOfLocations(boundary) != AVKey.COUNTER_CLOCKWISE)     Collections.reverse(boundary);  }  this.numPositions=this.countPositions();  this.previousIntersectionShapeData=null;  this.previousIntersectionTerrain=null;  this.previousIntersectionGlobeStateKey=null;  super.reset();}  }
class C{  public Property centuryOfEra(){  return new Property(this,getChronology().centuryOfEra());}  }
class C{  public JClassDependency(String className,String digest){  _className=className;  String newDigest=getDigest();  if (!newDigest.equals(digest)) {    if (log.isLoggable(Level.FINE))     log.fine(_className + " digest is modified.");    _isDigestModified=true;  }}  }
class C{  public PBEWithMD5AndDESCipher() throws NoSuchAlgorithmException, NoSuchPaddingException {  core=new PBES1Core("DES");}  }
class C{  public static String toString(Object object,ToStringStyle style,boolean outputTransients){  return toString(object,style,outputTransients,false,null);}  }
class C{  public void paintSliderBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintSliderBorder(context,g,x,y,w,h);}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder=LrrMmt.class.getClassLoader().getResource("workload/planetlab").getPath();  String outputFolder="output";  String workload="20110303";  String vmAllocationPolicy="lrr";  String vmSelectionPolicy="mmt";  String parameter="1.2";  new PlanetLabRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getAttributeNS01.class,args);}  }
class C{  public int compareToIgnoreCase(CharSeq another){  return str.compareToIgnoreCase(another.str);}  }
class C{  public LIMIT LIMIT(String limit){  return new LIMIT(this,limit);}  }
class C{  protected AbstractMetadataRegexAnnotator(String regex,int matcherGroup,boolean caseSensitive,String key,int valueGroup){  super(regex,matcherGroup,caseSensitive,1.0);  this.key=key;  this.valueGroup=valueGroup;}  }
class C{  synchronized boolean isSuspendedInTransaction(CompositeTransaction ct){  return state.isSuspendedInTransaction(ct);}  }
class C{  public static _ConstantRecordSearchFactor fromString(final String value) throws SOAPSerializationException {  return (_ConstantRecordSearchFactor)Enumeration.fromString(value,_ConstantRecordSearchFactor.VALUES_TO_INSTANCES);}  }
class C{  private void addFinally(ArrayList returnList,Stmnt finallyBlock) throws CompileError {  Bytecode bc=bytecode;  int n=returnList.size();  for (int i=0; i < n; ++i) {    final int[] ret=(int[])returnList.get(i);    int pc=ret[0];    bc.write16bit(pc,bc.currentPc() - pc + 1);    ReturnHook hook=new JsrHook2(this,ret);    finallyBlock.accept(this);    hook.remove(this);    if (!hasReturned) {      bc.addOpcode(Opcode.GOTO);      bc.addIndex(pc + 3 - bc.currentPc());    }  }}  }
class C{  public X509CRLImpl(InputStream in) throws CRLException {  try {    this.crl=(CertificateList)CertificateList.ASN1.decode(in);    this.tbsCertList=crl.getTbsCertList();    this.extensions=tbsCertList.getCrlExtensions();  } catch (  IOException e) {    throw new CRLException(e);  }}  }
class C{  public PingResponse isReachable(HostAddress host) throws HostException {  PingResponse response=new PingResponse();  response.setReachable(false);  for (  String name : this.getEnabledMethodNames()) {    PingNotification notification=_isReachableByMethod(name,host);    response.addNotification(notification);    response.setReachable(notification.isReachable());    if (response.isReachable()) {      break;    }  }  return response;}  }
class C{  public void lockAndSwitchMaster(Protocol newMasterProtocol) throws ReconnectDuringTransactionException {  if (masterProtocol != null && !masterProtocol.isClosed()) {    masterProtocol.close();  }  if (!currentReadOnlyAsked || isSecondaryHostFail()) {    try {      syncConnection(currentProtocol,newMasterProtocol);    } catch (    Exception e) {    }    currentProtocol=newMasterProtocol;  }  boolean inTransaction=this.masterProtocol != null && this.masterProtocol.inTransaction();  this.masterProtocol=newMasterProtocol;  resetMasterFailoverData();  if (inTransaction) {    throw new ReconnectDuringTransactionException("Connection reconnect automatically during an active transaction",1401,"25S03");  }}  }
class C{  public void testBaseUriResolutionWithHashes() throws Exception {  document=builder.parse(new InputSource(new StringReader("<a xml:base=\"http://a1/a2\">" + "  <b xml:base=\"b1#b2\"/>" + "  <c xml:base=\"#c1\">"+ "    <d xml:base=\"\"/>"+ "  </c>"+ "  <e xml:base=\"\"/>"+ "</a>")));  Element a=document.getDocumentElement();  assertEquals("http://a1/a2",a.getBaseURI());  String message="This implementation's getBaseURI() doesn't handle " + "relative URIs with hashes";  Element b=(Element)a.getChildNodes().item(1);  Element c=(Element)a.getChildNodes().item(3);  Element d=(Element)c.getChildNodes().item(1);  Element e=(Element)a.getChildNodes().item(5);  assertEquals(message,"http://a1/b1#b2",b.getBaseURI());  assertEquals(message,"http://a1/a2#c1",c.getBaseURI());  assertEquals(message,"http://a1/a2#c1",d.getBaseURI());  assertEquals(message,"http://a1/a2",e.getBaseURI());}  }
class C{  public void extendTo(long newMax){  if (newMax < mCurrentLength) {    throw new IllegalArgumentException("" + newMax + " is less than current length of: "+ mCurrentLength);  }  while (mTotalSize < newMax) {    final long i=mTotalSize >>> mBits;    if (i >= mData.length) {      final long newSize=(mData.length + 1) * 2;      if (newSize > Integer.MAX_VALUE) {        throw new RuntimeException("Attempting to allocate too large a chunk array. newSize=" + newSize);      }      mData=Arrays.copyOf(mData,(int)newSize);    }    final int ii=(int)i;    if (mData[ii] == null) {      mData[ii]=new byte[mChunkSize];      mTotalSize+=mChunkSize;    } else {      final byte[] newSubArray=new byte[mChunkSize];      final byte[] arr=mData[ii];      final int lenArr=arr.length;      System.arraycopy(arr,0,newSubArray,0,lenArr);      mTotalSize+=mChunkSize - lenArr;      mData[ii]=newSubArray;    }  }  mCurrentLength=newMax;}  }
class C{  public InstructionGraphEdge(final InstructionGraphNode source,final InstructionGraphNode target,final EdgeType edgeType){  super(source,target);  this.edgeType=Preconditions.checkNotNull(edgeType,"Error: edgeType argument can not be null");}  }
class C{  public static String toPoints(Point2D.Double[] points) throws IOException {  StringBuilder buf=new StringBuilder();  for (int i=0; i < points.length; i++) {    if (i != 0) {      buf.append(", ");    }    buf.append(toNumber(points[i].x));    buf.append(',');    buf.append(toNumber(points[i].y));  }  return buf.toString();}  }
class C{  @XmlElement(name="licensed_ind") public boolean isLicensed(){  return licensed;}  }
class C{  protected void frameInit(){  super.frameInit();  setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  Container c=getContentPane();  if (c instanceof JPanel) {    JPanel panel=(JPanel)c;    panel.getActionMap().put(CDialog.ACTION_DISPOSE,CDialog.s_dialogAction);    panel.getInputMap(JPanel.WHEN_IN_FOCUSED_WINDOW).put(CDialog.s_disposeKeyStroke,CDialog.ACTION_DISPOSE);  }}  }
class C{  public static Object withInputStream(File file,@ClosureParams(value=SimpleType.class,options="java.io.InputStream") Closure closure) throws IOException {  return IOGroovyMethods.withStream(newInputStream(file),closure);}  }
class C{  public AttachmentNoSoapResponse(){  requestFileName="getstate.query";  responseFile="attachm-no-soap.query";  responseContentType="multipart/related; charset=UTF-8; " + "boundary=jetty771207119h3h10dty";}  }
class C{  public static char[] toCharArray(InputStream is,Charset encoding) throws IOException {  CharArrayWriter output=new CharArrayWriter();  copy(is,output,encoding);  return output.toCharArray();}  }
class C{  public void handleEvent(Event evt){  Node node=(Node)evt.getTarget();  while (node != null && !(node instanceof SVGOMElement)) {    node=(Node)((AbstractNode)node).getParentNodeEventTarget();  }  BridgeUpdateHandler h=getBridgeUpdateHandler(node);  if (h != null) {    try {      h.handleDOMCharacterDataModified((MutationEvent)evt);    } catch (    Exception e) {      userAgent.displayError(e);    }  }}  }
class C{  static Annotation parseAnnotation(ByteBuffer buf,ConstantPool constPool,Class<?> container,boolean exceptionOnMissingAnnotationClass){  return parseAnnotation2(buf,constPool,container,exceptionOnMissingAnnotationClass,null);}  }
class C{  public boolean isValidInspector(){  return validInspector;}  }
class C{  private void drawItems(Canvas canvas){  canvas.save();  int top=(currentItem - firstItem) * getItemHeight() + (getItemHeight() - getHeight()) / 2;  canvas.translate(PADDING,-top + scrollingOffset);  itemsLayout.draw(canvas);  canvas.restore();}  }
class C{  public Attribute removeAttribute(String name){  for (int i=_attributes.size() - 1; i >= 0; i--) {    Attribute attr=_attributes.get(i);    if (attr.getName().equals(name)) {      _attributes.remove(i);      return attr;    }  }  return null;}  }
class C{  public void initDiskCache(){synchronized (mDiskCacheLock) {    if (mDiskLruCache == null || mDiskLruCache.isClosed()) {      File diskCacheDir=mCacheParams.diskCacheDir;      if (mCacheParams.diskCacheEnabled && diskCacheDir != null) {        if (!diskCacheDir.exists()) {          diskCacheDir.mkdirs();        }        if (getUsableSpace(diskCacheDir) > mCacheParams.diskCacheSize) {          try {            mDiskLruCache=DiskLruCache.open(diskCacheDir,1,1,mCacheParams.diskCacheSize);            if (BuildConfig.DEBUG) {              Log.d(TAG,"Disk cache initialized");            }          } catch (          final IOException e) {            mCacheParams.diskCacheDir=null;            Log.e(TAG,"initDiskCache - " + e);          }        }      }    }    mDiskCacheStarting=false;    mDiskCacheLock.notifyAll();  }}  }
class C{  boolean isLaunchable(){  return false;}  }
class C{  public GossipSeed(InetSocketAddress endpoint,String hostHeader){  this.endpoint=endpoint;  this.hostHeader=hostHeader;}  }
class C{  @Override public List<Action> search(Problem problem,Queue<Node> frontier){  explored.clear();  frontierStates.clear();  return super.search(problem,frontier);}  }
class C{  public FastCharBuffer append(FastCharBuffer buff){  if (buff.size == 0) {    return this;  }  for (int i=0; i < buff.currentBufferIndex; i++) {    append(buff.buffers[i]);  }  append(buff.currentBuffer,0,buff.offset);  return this;}  }
class C{  public static boolean isXML11Space(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_SPACE) != 0);}  }
class C{  @Override public GridNioFuture<Boolean> onSessionClose(GridNioSession ses) throws IgniteCheckedException {  return tail.onSessionClose(ses);}  }
class C{  public boolean isMessageIdRequired(){  return false;}  }
class C{  @Override public boolean nextBoolean(){  return next(1) != 0;}  }
class C{  public void storeDeviceThrottled(Device d){  long intervalNs=syncStoreWriteIntervalMs * 1000L * 1000L;  if (!isMaster)   return;  if (d == null)   return;  long now=System.nanoTime();  Long last=lastWriteTimes.get(d.getDeviceKey());  if (last == null || now - last > intervalNs) {    writeUpdatedDeviceToStorage(d);    lastWriteTimes.put(d.getDeviceKey(),now);  } else {    cntDeviceStoreThrottled.updateCounterWithFlush();  }}  }
class C{  protected ClientHttpRequest createHttpRequest(final Link link){  final ClientHttpRequest request=new ClientHttpRequest(link);  request.addHeaderValues(HttpHeader.USER_AGENT.getName(),USER_AGENT_HTTP_REQUEST_HEADER_VALUE);  request.getHeaders().setAccept(getAcceptableMediaTypes());  if (this.securityProperties != null) {    Iterator<Entry<String,String>> it=this.securityProperties.entrySet().iterator();    while (it.hasNext()) {      Entry<String,String> entry=it.next();      request.addHeaderValues(entry.getKey(),entry.getValue());    }  }  return request;}  }
class C{  private void processCommonFilterStatus(final TargetUpdateStatus status,final boolean buttonPressed){  if (buttonPressed) {    buttonClicked.addStyleName(BTN_CLICKED);    managementUIState.getTargetTableFilters().getClickedStatusTargetTags().add(status);    eventBus.publish(this,TargetFilterEvent.FILTER_BY_STATUS);  } else {    buttonClicked.removeStyleName(BTN_CLICKED);    managementUIState.getTargetTableFilters().getClickedStatusTargetTags().remove(status);    eventBus.publish(this,TargetFilterEvent.REMOVE_FILTER_BY_STATUS);  }}  }
class C{  private void writeObject(ObjectOutputStream out) throws ClassNotFoundException, IOException {  out.defaultWriteObject();  out.writeObject(SerializationUtils.wrap(borderStroke));}  }
class C{  protected void paintPlaceholderText(SeaGlassContext context,Graphics g,JComponent c){  g.setColor(placeholderColor);  g.setFont(c.getFont());  Rectangle innerArea=SwingUtilities.calculateInnerArea(c,null);  Rectangle cancelBounds=getCancelButtonBounds();  context.getStyle().getGraphicsUtils(context).paintText(context,g,getPlaceholderText(g,innerArea.width + cancelBounds.width),innerArea.x,innerArea.y,-1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:12.848 -0500",hash_original_method="08919BACEEB275448156EA2ACF7B3D6A",hash_generated_method="43830782CE56377739CB711511AC20E1") public boolean inUse(){synchronized (messageQueue) {    return messageQueue.size() != 0;  }}  }
class C{  public void initialize(GL10 gl){  mState=STATE_INITIALIZED;  int[] textures=new int[1];  gl.glGenTextures(1,textures,0);  mTextureID=textures[0];  gl.glBindTexture(GL10.GL_TEXTURE_2D,mTextureID);  gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_MIN_FILTER,GL10.GL_NEAREST);  gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_MAG_FILTER,GL10.GL_NEAREST);  gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_WRAP_S,GL10.GL_CLAMP_TO_EDGE);  gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_WRAP_T,GL10.GL_CLAMP_TO_EDGE);  gl.glTexEnvf(GL10.GL_TEXTURE_ENV,GL10.GL_TEXTURE_ENV_MODE,GL10.GL_REPLACE);}  }
class C{  public ByteVector putLong(final long l){  int length=this.length;  if (length + 8 > data.length) {    enlarge(8);  }  byte[] data=this.data;  int i=(int)(l >>> 32);  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  i=(int)l;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  private int[] shift(int[] array,int val){  array[0]=array[1];  array[1]=array[2];  array[2]=array[3];  array[3]=array[4];  array[4]=val;  return array;}  }
class C{  public static boolean isCacheSafe(Class<?> clazz,ClassLoader classLoader){  Assert.notNull(clazz,"Class must not be null");  try {    ClassLoader target=clazz.getClassLoader();    if (target == null) {      return true;    }    ClassLoader cur=classLoader;    if (cur == target) {      return true;    }    while (cur != null) {      cur=cur.getParent();      if (cur == target) {        return true;      }    }    return false;  } catch (  SecurityException ex) {    return true;  }}  }
class C{  public byte decode16BitsTo8Bits(int s){  return (byte)((s >> 8) & 0xffff);}  }
class C{  private static int blend_difference(int a,int b){  int f=(b & ALPHA_MASK) >>> 24;  int ar=(a & RED_MASK) >> 16;  int ag=(a & GREEN_MASK) >> 8;  int ab=(a & BLUE_MASK);  int br=(b & RED_MASK) >> 16;  int bg=(b & GREEN_MASK) >> 8;  int bb=(b & BLUE_MASK);  int cr=(ar > br) ? (ar - br) : (br - ar);  int cg=(ag > bg) ? (ag - bg) : (bg - ag);  int cb=(ab > bb) ? (ab - bb) : (bb - ab);  return (low(((a & ALPHA_MASK) >>> 24) + f,0xff) << 24 | (peg(ar + (((cr - ar) * f) >> 8)) << 16) | (peg(ag + (((cg - ag) * f) >> 8)) << 8) | (peg(ab + (((cb - ab) * f) >> 8))));}  }
class C{  public static Object instantiateObject(String className,PackageType packageType,Object... arguments) throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, ClassNotFoundException {  return instantiateObject(packageType.getClass(className),arguments);}  }
class C{  public static byte[] twoBytePacket(int address,boolean longAddr,byte arg1,byte arg2){  if (!addressCheck(address,longAddr)) {    return null;  }  byte[] retVal;  if (longAddr) {    retVal=new byte[5];    retVal[0]=(byte)(192 + ((address / 256) & 0x3F));    retVal[1]=(byte)(address & 0xFF);    retVal[2]=arg1;    retVal[3]=arg2;    retVal[4]=(byte)(retVal[0] ^ retVal[1] ^ retVal[2]^ retVal[3]);  } else {    retVal=new byte[4];    retVal[0]=(byte)(address & 0xFF);    retVal[1]=arg1;    retVal[2]=arg2;    retVal[3]=(byte)(retVal[0] ^ retVal[1] ^ retVal[2]);  }  return retVal;}  }
class C{  private void fillArguments(DLangRunDmdConfiguration config){  Module module=comboModules.getSelectedModule();  if (module == null) {    return;  }  try {    java.util.List<String> args=DLangDmdConfigToArgsConverter.getDmdParameters(config,module);    textArgsPane.setText(StringUtils.join(args,"\n"));  } catch (  NoSourcesException e) {    textArgsPane.setText("*Exception*:\n" + e.getMessage());  }catch (  ExecutionException e) {    textArgsPane.setText("*Exception*:\n" + e.getMessage());  }}  }
class C{  public void removeObserver(final T observer){  observers.remove(observer);}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer analyzer=new GalicianAnalyzer();  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);  analyzer.close();}  }
class C{  private void marshallPrimitive(Object value,PrimitiveType primitiveType) throws XMLStreamException {  LOG.debug("Primitive value: {} of type: {}",value,primitiveType);  if (value != null) {    xmlWriter.writeCharacters(value.toString());  }}  }
class C{  protected UDPMasterTerminal(InetAddress addr){  address=addr;}  }
class C{  public HashDocSet(int[] docs,int offset,int len){  this(docs,offset,len,DEFAULT_INVERSE_LOAD_FACTOR);}  }
class C{  public static double sum(double[] array){  double sum=0;  for (  double x : array) {    sum+=x;  }  return sum;}  }
class C{  public NodeTest(int whatToShow,String namespace,String name){  initNodeTest(whatToShow,namespace,name);}  }
class C{  public ActivityChooserView(Context context,AttributeSet attrs){  this(context,attrs,0);}  }
class C{  public Builder badge(int value){  badge=value;  return this;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public void buildTrapEntries(Hashtable<InetAddress,Vector<String>> dest){  if (children != null) {    for (int i=0; i < children.length; ++i) {      SimpleNode n=(SimpleNode)children[i];      if (n != null) {        n.buildTrapEntries(dest);      }    }  }}  }
class C{  public void reset(){  n_=0;  combinedBufferItemCapacity_=Math.min(Util.MIN_BASE_BUF_SIZE,2 * k_);  combinedBuffer_=new Object[combinedBufferItemCapacity_];  baseBufferCount_=0;  bitPattern_=0;  minValue_=null;  maxValue_=null;}  }
class C{  public String printFeatures(){  int i;  String s="";  for (i=0; i < m_decisionFeatures.length; i++) {    if (i == 0) {      s="" + (m_decisionFeatures[i] + 1);    } else {      s+="," + (m_decisionFeatures[i] + 1);    }  }  return s;}  }
class C{  public void removeVisualizationListener(VisualizationListener listener){  vistree.removeVisualizationListener(listener);}  }
class C{  public void testSqlCrossCacheQueryFailedMetrics() throws Exception {  IgniteCache<String,Integer> cache=grid(0).context().cache().jcache("A");  SqlFieldsQuery qry=new SqlFieldsQuery("select * from \"G\".Integer");  testQueryFailedMetrics(cache,qry);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void updateStatus(JobContext jobContext) throws Exception {  DbClient dbClient=jobContext.getDbClient();  try {    if (_status == JobStatus.IN_PROGRESS) {      return;    }    String opId=getTaskCompleter().getOpId();    StringBuilder logMsgBuilder=new StringBuilder(String.format("Updating status of job %s to %s",opId,_status.name()));    List<Volume> volumes=dbClient.queryObject(Volume.class,getTaskCompleter().getIds());    Set<URI> poolURIs=new HashSet<URI>();    for (    Volume volume : volumes) {      poolURIs.add(volume.getPool());    }    VNXeApiClient vnxeApiClient=getVNXeClient(jobContext);    if (_status == JobStatus.SUCCESS || _status == JobStatus.FAILED) {      for (      URI poolURI : poolURIs) {        VNXeJob.updateStoragePoolCapacity(dbClient,vnxeApiClient,poolURI,null);      }    }    if (_status == JobStatus.SUCCESS) {      for (      Volume volume : volumes) {        volume.setInactive(true);        volume.setConsistencyGroup(NullColumnValueGetter.getNullURI());        dbClient.updateObject(volume);        if (logMsgBuilder.length() != 0) {          logMsgBuilder.append("\n");        }        logMsgBuilder.append(String.format("Successfully deleted volume %s",volume.getId()));      }    } else     if (_status == JobStatus.FAILED) {      for (      URI id : getTaskCompleter().getIds()) {        if (logMsgBuilder.length() != 0) {          logMsgBuilder.append("\n");        }        logMsgBuilder.append(String.format("Failed to delete volume: %s",id));      }    }    _logger.info(logMsgBuilder.toString());  } catch (  Exception e) {    _logger.error("Caught an exception while trying to updateStatus for VNXeDeleteVolumesJob",e);    setErrorStatus("Encountered an internal error during volume delete job status processing : " + e.getMessage());  } finally {    super.updateStatus(jobContext);  }}  }
class C{  private static int LocationToLine(IDocument document,int location) throws BadLocationException {  if (location == -1) {    return -1;  } else {    return document.getLineOfOffset(location);  }}  }
class C{  public byte[] bytes(){  return ref.bytes;}  }
class C{  public static String encodeXmlValue(String inString){  String retString=inString;  retString=StringUtil.replaceString(retString,"&","&amp;");  retString=StringUtil.replaceString(retString,"<","&lt;");  retString=StringUtil.replaceString(retString,">","&gt;");  retString=StringUtil.replaceString(retString,"\"","&quot;");  retString=StringUtil.replaceString(retString,"'","&apos;");  return retString;}  }
class C{  public int addTree(){  int total=value;  if (left != null)   total+=left.addTree();  if (right != null)   total+=right.addTree();  return total;}  }
class C{  public boolean offer(PooledConnection pooledConnection){  acquiredConnections.remove(pooledConnection);  boolean offer=queue.offer(pooledConnection);  if (!offer) {    pooledConnection.dispose();  }  if (isTerminating.get()) {    PooledConnection poll=queue.poll();    if (poll != null) {      poll.dispose();    }  }  return offer;}  }
class C{  public static boolean isEmpty(Object[] array){  return array == null || array.length == 0;}  }
class C{  public static void computeBestFittingControlPoints4(java.awt.geom.Point2D[] imagePoints,LatLon[] geoPoints,java.awt.geom.Point2D[] outImagePoints,LatLon[] outGeoPoints){  String message=validateControlPoints(4,imagePoints,geoPoints);  if (message != null) {    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  message=validateControlPoints(3,outImagePoints,outGeoPoints);  if (message != null) {    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  java.awt.geom.Point2D[] bestFitImagePoints=null;  LatLon[] bestFitGeoPoints=null;  double minError=Double.MAX_VALUE;  for (  int[] indices : new int[][]{{0,1,2},{0,1,3},{1,2,3},{0,2,3}}) {    java.awt.geom.Point2D[] points=new java.awt.geom.Point2D[]{imagePoints[indices[0]],imagePoints[indices[1]],imagePoints[indices[2]]};    LatLon[] locations=new LatLon[]{geoPoints[indices[0]],geoPoints[indices[1]],geoPoints[indices[2]]};    Matrix m=Matrix.fromImageToGeographic(points,locations);    double error=0.0;    for (int j=0; j < 4; j++) {      Vec4 vec=new Vec4(imagePoints[j].getX(),imagePoints[j].getY(),1.0).transformBy3(m);      LatLon ll=LatLon.fromDegrees(vec.y,vec.x);      LatLon diff=geoPoints[j].subtract(ll);      double d=diff.getLatitude().degrees * diff.getLatitude().degrees + diff.getLongitude().degrees * diff.getLongitude().degrees;      error+=d;    }    if (error < minError) {      bestFitImagePoints=points;      bestFitGeoPoints=locations;      minError=error;    }  }  if (bestFitImagePoints != null) {    System.arraycopy(bestFitImagePoints,0,outImagePoints,0,3);    System.arraycopy(bestFitGeoPoints,0,outGeoPoints,0,3);  }}  }
class C{  public static boolean groupVerify(int userId,int groupId,OperationType operationType,int dstUserId){  if (isAdmin(userId)) {    return true;  }  UserGroupMap userGroup=authBiz.getUserGroup(userId,groupId);  Role userRoleType=Role.NOTEXIST;  if (userGroup != null) {    userRoleType=userGroup.getRole();  }  boolean result=false;switch (operationType) {case DELETE:    result=userRoleType.getAccessLevel() <= Role.MASTER.getAccessLevel();  break;case ADDGROUPMEMBER:case MODIFYGROUPMEMBER:result=userRoleType.getAccessLevel() <= Role.MASTER.getAccessLevel();break;case DELETEGROUPMEMBER:if (userRoleType.getAccessLevel() <= Role.MASTER.getAccessLevel()) {if (userId == dstUserId) {if (authBiz.masterCountInGroup(groupId) <= 1) {  result=false;} else {  result=true;}} else {result=true;}} else {result=(userId == dstUserId);}break;case LISTGROUPMEMBER:result=userRoleType.getAccessLevel() < Role.NOTEXIST.getAccessLevel();break;case GET:result=userRoleType.getAccessLevel() <= Role.REPORTER.getAccessLevel();break;case MODIFY:result=userRoleType.getAccessLevel() <= Role.DEVELOPER.getAccessLevel();break;}if (!result) {throw new PermitException(userId,groupId,operationType,dstUserId);}return true;}  }
class C{  public static void submit(String xml,Patient patient){  Element patientNode=XformBuilder.getElement(XformBuilder.getDocument(xml).getRootElement(),XformBuilder.NODE_PATIENT);  if (patientNode == null)   return;  if (XformBuilder.getElement(patientNode,RelativeBuilder.NODE_RELATIVE) == null) {    return;  }  PersonService ps=Context.getPersonService();  List<Relationship> deletedRelationships=ps.getRelationshipsByPerson(patient);  List<Relationship> newRelationships=new ArrayList<Relationship>();  for (int i=0; i < patientNode.getChildCount(); i++) {    if (patientNode.getType(i) != Element.ELEMENT || !RelativeBuilder.NODE_RELATIVE.equals(patientNode.getElement(i).getName())) {      continue;    }    Element relativeNode=patientNode.getElement(i);    String relationshipUuid=relativeNode.getAttributeValue(null,XformBuilder.ATTRIBUTE_UUID);    if (!("true()".equals(relativeNode.getAttributeValue(null,"new"))) && StringUtils.isNotBlank(relationshipUuid)) {      updateRelationship(relationshipUuid,relativeNode,patient,deletedRelationships,ps);      continue;    }    Relationship relationship=getRelationship(relativeNode,patient,ps);    if (relationship != null) {      newRelationships.add(relationship);    }  }  for (  Relationship reltnp : newRelationships) {    ps.saveRelationship(reltnp);  }  for (  Relationship reltnp : deletedRelationships) {    ps.purgeRelationship(reltnp);  }}  }
class C{  public static int EPROTONOSUPPORT(){  return Errno.EPROTONOSUPPORT.intValue();}  }
class C{  public static Number minus(Number left,Number right){  return NumberMath.subtract(left,right);}  }
class C{  public Element writeMatrix(Element parent,Object o,String name) throws Exception {  weka.core.matrix.Matrix matrix;  Element node;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  matrix=(weka.core.matrix.Matrix)o;  node=addElement(parent,name,o.getClass().getName(),false);  invokeWriteToXML(node,matrix.getArray(),VAL_CELLS);  return node;}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  final RPAction action=new RPAction();  action.put("type","ignore");  if (params[0] == null) {    action.put("list","1");  } else {    action.put("target",params[0]);    String duration=params[1];    if (duration != null) {      if (!duration.equals("*") || !duration.equals("-")) {        try {          Integer.parseInt(duration);        } catch (        final NumberFormatException ex) {          return false;        }        action.put("duration",duration);      }    }    if (remainder.length() != 0) {      action.put("reason",remainder);    }  }  ClientSingletonRepository.getClientFramework().send(action);  return true;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String fileName=null;  String inputDataFile=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  double noData=-32768;  InputStream inStream=null;  OutputStream outStream=null;  String dataType="float";  String dataScale="rgb";  DataInputStream in=null;  BufferedReader br=null;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      int progress=(int)(100f * i / (numImages - 1));      if (numImages > 1) {        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      fileName=imageFiles[i];      if (!((new File(fileName)).exists())) {        showFeedback("Image file does not exist.");        break;      }      File file=new File(fileName);      String fileExtension=whitebox.utilities.FileUtilities.getFileExtension(fileName).toLowerCase();      String[] formatNames=ImageIO.getReaderFormatNames();      boolean checkForSupportedFormat=false;      for (      String str : formatNames) {        if (str.toLowerCase().equals(fileExtension)) {          checkForSupportedFormat=true;          break;        }      }      if (!checkForSupportedFormat) {        showFeedback("This image file format is not currently supported by this tool.");        return;      }      BufferedImage image=ImageIO.read(new File(fileName));      rows=image.getHeight();      cols=image.getWidth();      if (image.getColorModel().getPixelSize() == 24) {        dataType="float";        dataScale="rgb";      }      int dot=imageFiles[i].lastIndexOf(".");      String imageExtension=imageFiles[i].substring(dot + 1);      whiteboxHeaderFile=imageFiles[i].replace(imageExtension,"dep");      whiteboxDataFile=imageFiles[i].replace(imageExtension,"tas");      char[] extChars=imageExtension.toCharArray();      boolean worldFileFound=false;      String wfExtension=Character.toString(extChars[0]) + Character.toString(extChars[2]) + "w";      String worldFile=imageFiles[i].replace(imageExtension,wfExtension);      if ((new File(worldFile)).exists()) {        worldFileFound=true;      } else {        wfExtension=imageExtension + "w";        worldFile=imageFiles[i].replace(imageExtension,wfExtension);        if ((new File(worldFile)).exists()) {          worldFileFound=true;        } else {          wfExtension=".wld";          worldFile=imageFiles[i].replace(imageExtension,wfExtension);          if ((new File(worldFile)).exists()) {            worldFileFound=true;          }        }      }      if (worldFileFound) {        double A=0, B=0, C=0, D=0, E=0, F=0;        FileInputStream fstream=new FileInputStream(worldFile);        in=new DataInputStream(fstream);        br=new BufferedReader(new InputStreamReader(in));        String line;        int n=0;        while ((line=br.readLine()) != null) {switch (n) {case 0:            A=Double.parseDouble(line);          break;case 1:        D=Double.parseDouble(line);      break;case 2:    B=Double.parseDouble(line);  break;case 3:E=Double.parseDouble(line);break;case 4:C=Double.parseDouble(line);break;case 5:F=Double.parseDouble(line);break;}n++;}if (B == 0 && D == 0) {double west=A * 0 + B * 0 + C;double north=D * 0 + E * 0 + F;double east=A * (cols - 1) + B * (rows - 1) + C;double south=D * (cols - 1) + E * (rows - 1) + F;(new File(whiteboxHeaderFile)).delete();(new File(whiteboxDataFile)).delete();fw=new FileWriter(whiteboxHeaderFile,false);bw=new BufferedWriter(fw);out=new PrintWriter(bw,true);String byteOrder=java.nio.ByteOrder.nativeOrder().toString();str1="Min:\t" + Double.toString(Integer.MAX_VALUE);out.println(str1);str1="Max:\t" + Double.toString(Integer.MIN_VALUE);out.println(str1);str1="North:\t" + Double.toString(north);out.println(str1);str1="South:\t" + Double.toString(south);out.println(str1);str1="East:\t" + Double.toString(east);out.println(str1);str1="West:\t" + Double.toString(west);out.println(str1);str1="Cols:\t" + Integer.toString(cols);out.println(str1);str1="Rows:\t" + Integer.toString(rows);out.println(str1);str1="Data Type:\t" + dataType;out.println(str1);str1="Z Units:\t" + "not specified";out.println(str1);str1="XY Units:\t" + "not specified";out.println(str1);str1="Projection:\t" + "not specified";out.println(str1);str1="Data Scale:\t" + dataScale;out.println(str1);str1="Preferred Palette:\t" + "greyscale.pal";out.println(str1);str1="NoData:\t-32768";out.println(str1);if (byteOrder.toLowerCase().contains("lsb") || byteOrder.toLowerCase().contains("little")) {str1="Byte Order:\t" + "LITTLE_ENDIAN";} else {str1="Byte Order:\t" + "BIG_ENDIAN";}out.println(str1);output=new WhiteboxRaster(whiteboxHeaderFile,"rw");int z, r, g, b;for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=image.getRGB(col,row);r=(int)z & 0xFF;g=((int)z >> 8) & 0xFF;b=((int)z >> 16) & 0xFF;output.setValue(row,col,(double)((255 << 24) | (b << 16) | (g << 8)| r));}}output.findMinAndMaxVals();output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());output.writeHeaderFile();output.close();} else {showFeedback("We're sorry but Whitebox cannot currently handle the import of rotated images.");break;}} else {double west=0;double north=rows - 1;double east=cols - 1;double south=0;(new File(whiteboxHeaderFile)).delete();(new File(whiteboxDataFile)).delete();fw=new FileWriter(whiteboxHeaderFile,false);bw=new BufferedWriter(fw);out=new PrintWriter(bw,true);String byteOrder=java.nio.ByteOrder.nativeOrder().toString();str1="Min:\t" + Double.toString(Integer.MAX_VALUE);out.println(str1);str1="Max:\t" + Double.toString(Integer.MIN_VALUE);out.println(str1);str1="North:\t" + Double.toString(north);out.println(str1);str1="South:\t" + Double.toString(south);out.println(str1);str1="East:\t" + Double.toString(east);out.println(str1);str1="West:\t" + Double.toString(west);out.println(str1);str1="Cols:\t" + Integer.toString(cols);out.println(str1);str1="Rows:\t" + Integer.toString(rows);out.println(str1);str1="Data Type:\t" + dataType;out.println(str1);str1="Z Units:\t" + "not specified";out.println(str1);str1="XY Units:\t" + "not specified";out.println(str1);str1="Projection:\t" + "not specified";out.println(str1);str1="Data Scale:\t" + dataScale;out.println(str1);str1="Preferred Palette:\t" + "greyscale.pal";out.println(str1);str1="NoData:\t-32768";out.println(str1);if (byteOrder.toLowerCase().contains("lsb") || byteOrder.toLowerCase().contains("little")) {str1="Byte Order:\t" + "LITTLE_ENDIAN";} else {str1="Byte Order:\t" + "BIG_ENDIAN";}out.println(str1);output=new WhiteboxRaster(whiteboxHeaderFile,"rw");int z, r, g, b;for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=image.getRGB(col,row);r=(int)z & 0xFF;g=((int)z >> 8) & 0xFF;b=((int)z >> 16) & 0xFF;output.setValue(row,col,(double)((255 << 24) | (b << 16) | (g << 8)| r));}}output.findMinAndMaxVals();output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());output.writeHeaderFile();output.close();returnData(whiteboxHeaderFile);}}} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public StyledToolTipUI(Style style){  this.style=style;  border=BorderFactory.createLineBorder(style.getShadowColor());}  }
class C{  public DrawerBuilder withRecyclerView(@NonNull RecyclerView recyclerView){  this.mRecyclerView=recyclerView;  return this;}  }
class C{  public ExtZipEntry(ExtZipEntry entry){  super(entry.getName());  setCompressedSize(entry.getCompressedSize());  setSize(entry.getSize());  setComment(entry.getComment());  setTime(entry.getTime());  setMethod(entry.getMethod());}  }
class C{  public synchronized void addTextListener(TextListener l){  if (l == null) {    return;  }  textListener=AWTEventMulticaster.add(textListener,l);  newEventsOnly=true;}  }
class C{  public static boolean hasImmediateRecursiveRuleRefs(GrammarAST t,String ruleName){  if (t == null)   return false;  GrammarAST blk=(GrammarAST)t.getFirstChildWithType(BLOCK);  if (blk == null)   return false;  int n=blk.getChildren().size();  for (int i=0; i < n; i++) {    GrammarAST alt=(GrammarAST)blk.getChildren().get(i);    Tree first=alt.getChild(0);    if (first == null)     continue;    if (first.getType() == ELEMENT_OPTIONS) {      first=alt.getChild(1);      if (first == null) {        continue;      }    }    if (first.getType() == RULE_REF && first.getText().equals(ruleName))     return true;    Tree rref=first.getChild(1);    if (rref != null && rref.getType() == RULE_REF && rref.getText().equals(ruleName))     return true;  }  return false;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public static SimpleModule makeModule(){  Version moduleVersion=new Version(1,0,0,null,null,null);  SimpleModule module=new SimpleModule("LocalDate",moduleVersion);  module.addSerializer(LocalDate.class,new JavaLocalDateSerializer());  module.addDeserializer(LocalDate.class,new JavaLocalDateDeserializer());  return module;}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public void removed(Container cont){  linkManager.resetLink();}  }
class C{  protected Size2D arrangeRR(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  Size2D s1=arrangeNN(container,g2);  if (constraint.getHeightRange().contains(s1.height)) {    return s1;  } else {    RectangleConstraint c=constraint.toFixedHeight(constraint.getHeightRange().getUpperBound());    return arrangeRF(container,g2,c);  }}  }
class C{  public long updateTtl(long elapsedTime){  this.ttl-=elapsedTime;  this.currentAnimTimeMillis+=elapsedTime;  if (this.currentAnimTimeMillis >= this.getUpdateTextureMillis() && this.animFrames > 0) {    this.currentAnimTimeMillis=0;    int pos=this.getTextPos();    pos++;    if (pos < this.animFrames) {      this.setTextPos(pos);    } else {      this.setTextPos(0);    }  }  return this.ttl;}  }
class C{  private void renderAxes(Camera camera){  glPushMatrix();  glLoadIdentity();  float rotX=camera.getRotation().x;  float rotY=camera.getRotation().y;  float rotZ=0;  glRotatef(rotX,1.0f,0.0f,0.0f);  glRotatef(rotY,0.0f,1.0f,0.0f);  glRotatef(rotZ,0.0f,0.0f,1.0f);  glLineWidth(2.0f);  glBegin(GL_LINES);  glColor3f(1.0f,0.0f,0.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(1.0f,0.0f,0.0f);  glColor3f(0.0f,1.0f,0.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(0.0f,1.0f,0.0f);  glColor3f(1.0f,1.0f,1.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(0.0f,0.0f,1.0f);  glEnd();  glPopMatrix();}  }
class C{  public synchronized int size(){  return this.count;}  }
class C{  private String readString(int len){  byte[] buff=data;  int p=pos;  char[] chars=new char[len];  for (int i=0; i < len; i++) {    int x=buff[p++] & 0xff;    if (x < 0x80) {      chars[i]=(char)x;    } else     if (x >= 0xe0) {      chars[i]=(char)(((x & 0xf) << 12) + ((buff[p++] & 0x3f) << 6) + (buff[p++] & 0x3f));    } else {      chars[i]=(char)(((x & 0x1f) << 6) + (buff[p++] & 0x3f));    }  }  pos=p;  return new String(chars);}  }
class C{  public static Class<?> tryGetCanonicalClass(String canonicalName){  try {    return Class.forName(canonicalName);  } catch (  ClassNotFoundException e) {    return null;  }}  }
class C{  public void loadTable(PO[] pos){  int row=0;  int col=0;  int poIndex=0;  String columnName;  Object data;  Class columnClass;  if (m_layout == null) {    throw new UnsupportedOperationException("Layout not defined");  }  clearTable();  for (poIndex=0; poIndex < pos.length; poIndex++) {    PO myPO=pos[poIndex];    row=getRowCount();    setRowCount(row + 1);    for (col=0; col < m_layout.length; col++) {      columnName=m_layout[col].getColSQL();      data=myPO.get_Value(columnName);      if (data != null) {        columnClass=m_layout[col].getColClass();        if (isColumnClassMismatch(col,columnClass)) {          throw new ApplicationException("Cannot enter a " + columnClass.getName() + " in column "+ col+ ". "+ "An object of type "+ m_modelHeaderClass.get(col).getSimpleName()+ " was expected.");        }        if (columnClass == IDColumn.class) {          data=new IDColumn(((Integer)data).intValue());        } else         if (columnClass == Double.class) {          data=new Double(((BigDecimal)data).doubleValue());        }      }      getModel().setDataAt(data,row,col);    }  }  autoSize();  if (getShowTotals())   addTotals(m_layout);  this.repaint();  logger.config("Row(array)=" + getRowCount());  return;}  }
class C{  private void createPartitionRegion(List vmList,int startIndexForRegion,int endIndexForRegion,int localMaxMemory,int redundancy,boolean firstCreationFlag,boolean multipleVMFlag){  Iterator nodeIterator=vmList.iterator();  while (nodeIterator.hasNext()) {    VM vm=(VM)nodeIterator.next();    vm.invoke(createMultiplePartitionRegion(prPrefix,startIndexForRegion,endIndexForRegion,redundancy,localMaxMemory,firstCreationFlag,multipleVMFlag));  }}  }
class C{  public void update(byte[] input,int inOff,int length){  digest.update(input,inOff,length);}  }
class C{  public int compareTo(SimpleResult o){  int compareValue=(int)Math.signum(distance - ((SimpleResult)o).distance);  if (compareValue == 0 && indexNumber != o.indexNumber) {    return (int)Math.signum(indexNumber - o.indexNumber);  }  return compareValue;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  private void createVirtualVolume(String devicePath,Boolean thinEnabled) throws VPlexApiException {  ClientResponse response=null;  try {    s_logger.info("Create virtual volume for device {}",devicePath);    URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_CREATE_VIRTUAL_VOLUME);    s_logger.info("Create virtual volume URI is {}",requestURI.toString());    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_R,devicePath);    if (thinEnabled) {      argsMap.put(VPlexApiConstants.ARG_THIN_ENABLED,"");    }    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,false);    s_logger.info("Create virtual volume POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Create virtual volume response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Virtual volume creation completing asynchronously");        _vplexApiClient.waitForCompletion(response);      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.createVolumeFailureStatus(String.valueOf(response.getStatus()),cause);      }    }    s_logger.info("Successfully created virtual volume for device {}",devicePath);  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedCreateVolume(e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  public void destroy(){  if (_zombieMarker == null) {    _zombieMarker=new ZombieClassLoaderMarker();  }  try {    stop();  } catch (  Throwable e) {  }  if (!_lifecycle.toDestroying()) {    return;  }  try {    ClassLoader parent=getParent();    for (; parent != null; parent=parent.getParent()) {      if (parent instanceof DynamicClassLoader) {        DynamicClassLoader loader=(DynamicClassLoader)parent;        if (_closeListener != null) {          loader.removeListener(_closeListener);        }      }    }    ArrayList<EnvLoaderListener> listeners=_listeners;    _listeners=null;    Thread thread=Thread.currentThread();    ClassLoader oldLoader=thread.getContextClassLoader();    try {      if (listeners != null) {        Collections.sort(listeners,LISTENER_SORT);        for (int i=listeners.size() - 1; i >= 0; i--) {          EnvLoaderListener listener=listeners.get(i);          try {            thread.setContextClassLoader(this);            listener.classLoaderDestroy(this);          } catch (          Throwable e) {            log().log(Level.FINE,e.toString(),e);          }        }      }    }  finally {      thread.setContextClassLoader(oldLoader);    }    ArrayList<Loader> loaders=getLoaders();    for (int i=loaders.size() - 1; i >= 0; i--) {      Loader loader=loaders.get(i);      try {        loader.destroy();      } catch (      Throwable e) {        log().log(Level.FINE,e.toString(),e);      }    }  }  finally {    _loaders=null;    _nativePath=null;    _entryCache=null;    _resourceCache=null;    _dependencies=null;    _makeList=null;    _listeners=null;    _permissions=null;    _codeSource=null;    _urls=null;    _lifecycle.toDestroy();  }}  }
class C{  public ConfigurableLineTracker(String[] legalLineDelimiters){  Assert.isTrue(legalLineDelimiters != null && legalLineDelimiters.length > 0);  fDelimiters=TextUtilities.copy(legalLineDelimiters);}  }
class C{  public void test_concurrentClients() throws InterruptedException {  final Properties properties=getProperties();  final Journal journal=new Journal(properties);  try {    doConcurrentClientTest(journal,Long.MAX_VALUE,3,1,2,500,3,1000,0.02d,0.10d);  }  finally {    journal.destroy();  }}  }
class C{  public Builder addMatch2Method(Match2MethodSpec match2MethodSpec,int maxArity){  checkArgument(maxArity <= MAX_ARITY,"Arity greater than " + MAX_ARITY + "is not currently supported");  match2Methods.addAll(new Match2MethodPermutationBuilder(matchType,match2MethodSpec,maxArity).build());  return this;}  }
class C{  public BitmapSize scaleDown(int sampleSize){  return new BitmapSize(width / sampleSize,height / sampleSize);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder(getClass().getName());  sb.append("[name=").append(this.name);  appendTo(sb,"displayName",this.displayName);  appendTo(sb,"shortDescription",this.shortDescription);  appendTo(sb,"preferred",this.preferred);  appendTo(sb,"hidden",this.hidden);  appendTo(sb,"expert",this.expert);  if ((this.table != null) && !this.table.isEmpty()) {    sb.append("; values={");    for (    Entry<String,Object> entry : this.table.entrySet()) {      sb.append(entry.getKey()).append("=").append(entry.getValue()).append("; ");    }    sb.setLength(sb.length() - 2);    sb.append("}");  }  appendTo(sb);  return sb.append("]").toString();}  }
class C{  public static boolean isBold(AttributeSet a){  Boolean bold=(Boolean)a.getAttribute(Bold);  if (bold != null) {    return bold.booleanValue();  }  return false;}  }
class C{  public void testOneNodeSubmitCommand() throws Throwable {  testSubmitCommand(1);}  }
class C{  private void unifyUsernameByEmail(Map<String,List<LogCommitInfo>> usernameMap){  for (  Entry<String,List<LogCommitInfo>> entry : usernameMap.entrySet()) {    List<String> names=getNamesList(entry.getValue());    String newUserName=names.get(0);    if (names.size() > 1)     newUserName=getNewName(names);    for (    LogCommitInfo commit : entry.getValue()) {      commit.setUserName(newUserName);    }  }}  }
class C{  @Deprecated protected final Class<?> defineClass(byte[] classRep,int offset,int length) throws ClassFormatError {  throw new UnsupportedOperationException("can't load this type of class file");}  }
class C{  public void testAddUsers() throws Exception {  Configuration configurationElement=new Configuration();  configurationElement.setImplementation(StandaloneLocalConfigurationStub.class.getName());  User user=new User();  user.setName("someName");  user.setPassword("passW0rd");  String[] roles=new String[]{"cargo"};  user.setRoles(roles);  configurationElement.setUsers(new User[]{user});  org.codehaus.cargo.container.configuration.Configuration configuration=configurationElement.createConfiguration("testContainer",ContainerType.INSTALLED,null,new CargoProject(null,null,null,null,null,Collections.<Artifact>emptySet(),null));  StandaloneLocalConfigurationStub conf=(StandaloneLocalConfigurationStub)configuration;  List<org.codehaus.cargo.container.property.User> users=conf.getUsers();  assertEquals("users not of correct size",1,users.size());  org.codehaus.cargo.container.property.User userProperty=users.get(0);  assertEquals("name not correct","someName",userProperty.getName());  assertEquals("password not correct","passW0rd",userProperty.getPassword());  assertEquals("roles not of correct size",1,userProperty.getRoles().size());  assertEquals("role not correct","cargo",userProperty.getRoles().get(0));}  }
class C{  public void projectionChanged(ProjectionEvent e){}  }
class C{  public void onDestroy(){  mListener=null;  if (mIsInternalExecutor) {    mAsyncExecutor.shutdown();  }}  }
class C{  public AsynchronousSteppable[] asynchronousRegistry(){synchronized (asynchronousLock) {    AsynchronousSteppable[] b=new AsynchronousSteppable[asynchronous.size()];    int x=0;    Iterator i=asynchronous.iterator();    while (i.hasNext())     b[x++]=(AsynchronousSteppable)(i.next());    return b;  }}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer(2048);  sb.append("File Index (" + fileIndex.size() + " entries):\n");  for (  Entry<IPath,Set<IIndexedJavaRef>> fileIndexEntry : fileIndex.entrySet()) {    sb.append(fileIndexEntry.getKey().toString());    sb.append(" => \n");    for (    IIndexedJavaRef ref : fileIndexEntry.getValue()) {      sb.append(MessageFormat.format("    {0}\n",ref));    }  }  sb.append("\n\nElement Index (" + elementIndex.size() + " entries):\n");  for (  Entry<String,Set<IIndexedJavaRef>> elementIndexEntry : elementIndex.entrySet()) {    sb.append(elementIndexEntry.getKey());    sb.append(" => \n");    for (    IIndexedJavaRef ref : elementIndexEntry.getValue()) {      sb.append(MessageFormat.format("    {0}\n",ref));    }  }  return sb.toString();}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:11.201 -0500",hash_original_method="A0319C4335A825139157822F68CBECCE",hash_generated_method="ADE86886EFEDCE64F50DB21D25A6794B") @Override protected byte[] decrypt(byte type,byte[] fragment,int offset,int len){  byte[] data=decCipher.update(fragment,offset,len);  byte[] content;  if (block_size != 0) {    int padding_length=data[data.length - 1];    for (int i=0; i < padding_length; i++) {      if (data[data.length - 2 - i] != padding_length) {        throw new AlertException(AlertProtocol.DECRYPTION_FAILED,new SSLProtocolException("Received message has bad padding"));      }    }    content=new byte[data.length - hash_size - padding_length- 1];  } else {    content=new byte[data.length - hash_size];  }  mac_material_header[0]=type;  mac_material_header[3]=(byte)((0x00FF00 & content.length) >> 8);  mac_material_header[4]=(byte)(0x0000FF & content.length);  decMac.update(read_seq_num);  decMac.update(mac_material_header);  decMac.update(data,0,content.length);  byte[] mac_value=decMac.doFinal();  if (logger != null) {    logger.println("Decrypted:");    logger.print(data);    logger.println("Expected mac value:");    logger.print(mac_value);  }  for (int i=0; i < hash_size; i++) {    if (mac_value[i] != data[i + content.length]) {      throw new AlertException(AlertProtocol.BAD_RECORD_MAC,new SSLProtocolException("Bad record MAC"));    }  }  System.arraycopy(data,0,content,0,content.length);  incSequenceNumber(read_seq_num);  return content;}  }
class C{  public static PropertyHandler configurePropertyHandler(String propertiesFile){  try {    return new PropertyHandler.Builder().setPropertiesFile(propertiesFile).setPropertyPrefix("main").build();  } catch (  MalformedURLException murle) {    getLogger().log(Level.WARNING,murle.getMessage(),murle);  }catch (  IOException ioe) {    getLogger().log(Level.WARNING,ioe.getMessage(),ioe);  }  return new PropertyHandler();}  }
class C{  public void cancelAll(){  for (  Map.Entry<String,Request> entry : requestMap.entrySet()) {    entry.getValue().task.cancel(false);  }  requestMap.clear();}  }
class C{  private StoragePort chooseCandidate(Set<StoragePort> candidates,Map<StoragePort,Long> usageMap){  StoragePort chosenPort=null;  long minUsage=Long.MAX_VALUE;  for (  StoragePort sp : candidates) {    Long usage=usageMap.get(sp);    _log.debug(String.format("Port %s usage %d",sp.getPortName(),usage));    if (usage < minUsage) {      minUsage=usage;      chosenPort=sp;    }  }  return chosenPort;}  }
class C{  public int compareTo(Object arg0){  if (arg0 instanceof WeightedCellSorter) {    if (weightedValue > ((WeightedCellSorter)arg0).weightedValue) {      return -1;    } else     if (weightedValue < ((WeightedCellSorter)arg0).weightedValue) {      return 1;    } else {      if (nudge) {        return -1;      } else {        return 1;      }    }  } else {    return 0;  }}  }
class C{  public Builder widthDp(int drawerWidthDp){  return this;}  }
class C{  public static List<Intersection> intersectTriStrip(final Line line,Vec4[] vertices,IntBuffer indices){  if (line == null) {    String msg=Logging.getMessage("nullValue.LineIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (vertices == null) {    String msg=Logging.getMessage("nullValue.ArrayIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (indices == null) {    String msg=Logging.getMessage("nullValue.BufferIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  List<Intersection> intersections=null;  for (int n=indices.position(); n < indices.limit() - 1; n++) {    Intersection intersection;    int i=indices.get(n) * 3;    int j=indices.get(n + 1) * 3;    int k=indices.get(n + 2) * 3;    intersection=intersect(line,vertices[i],vertices[j],vertices[k]);    if (intersection != null) {      if (intersections == null)       intersections=new ArrayList<Intersection>();      intersections.add(intersection);    }  }  return intersections;}  }
class C{  public boolean isProcessedOK(){  return m_ok;}  }
class C{  public EntityResult updateEntities(Referenceable... entities) throws AtlasServiceException {  return updateEntities(Arrays.asList(entities));}  }
class C{  protected AlgorithmParameters engineGetParameters(){  return core.getParameters("DESede");}  }
class C{  public <T extends ResourceObject>List<T> execute(Class<T> type) throws ParseException, RepositoryException, MalformedQueryException, QueryEvaluationException {  URI rootType=connection.getObjectFactory().getNameOf(type);  if (rootType == null) {    throw new IllegalArgumentException("Can't query for: " + type + " not found in name map. Is @Iri annotation set?");  }  Query sparql=EvalQuery.evaluate(queryServiceDTO,rootType);  sparql.setDistinct(true);  if (limit != null) {    sparql.setLimit(limit);  }  if (offset != null) {    sparql.setOffset(offset);  }  String q=sparql.serialize();  logger.debug("Initial query:\n" + queryOptimizer.prettyPrint(q));  q=queryOptimizer.optimizeJoinOrder(q);  logger.debug("Query after join order optimization:\n " + q);  ObjectQuery query=connection.prepareObjectQuery(q);  if (query.getDataset() != null) {    logger.info("\nGRAPH CONTEXT = " + query.getDataset().getDefaultGraphs() + "\nFINAL QUERY :\n"+ q);  } else {    logger.info("\nFINAL QUERY :\n" + q);  }  return (List<T>)query.evaluate().asList();}  }
class C{  public static CCAnimate action(CCAnimation anim){  assert anim != null : "Animate: argument Animation must be non-null";  return new CCAnimate(anim,true);}  }
class C{  public static void main(String[] args) throws Exception {  int res=ToolRunner.run(new EncodeBfsGraph(),args);  System.exit(res);}  }
class C{  public void addFooter(@NonNull View view){  if (view == null) {    throw new IllegalArgumentException("You can't have a null footer!");  }  mFooters.add(view);}  }
class C{  NotifyingTask(){}  }
class C{  @Override protected void doGet(final HttpServletRequest request,HttpServletResponse response) throws IOException {  response.setStatus(HttpServletResponse.SC_OK);  response.setHeader("Connection","Keep-Alive");  if (request.getAttribute("result") != null) {    JsonNode result=(JsonNode)request.getAttribute("result");    int code=result.path(DATA).path(CODE).asInt(HttpServletResponse.SC_OK);    if (code == HttpServletResponse.SC_OK) {      response.getWriter().write(this.mapper.writeValueAsString(result));    } else {      this.sendError(response,code,this.mapper.writeValueAsString(result));    }    return;  }  String[] rest=request.getPathInfo().split("/");  String type=(rest.length > 1) ? rest[1] : null;  if (type != null) {    response.setContentType(UTF8_APPLICATION_JSON);    ServletUtil.getInstance().setNonCachingHeaders(response);    final String name=(rest.length > 2) ? URLDecoder.decode(rest[2],StandardCharsets.UTF_8.name()) : null;    ObjectNode parameters=this.mapper.createObjectNode();    for (    Map.Entry<String,String[]> entry : request.getParameterMap().entrySet()) {      parameters.put(entry.getKey(),URLDecoder.decode(entry.getValue()[0],"UTF-8"));    }    JsonNode reply=null;    try {      if (name == null) {        if (this.services.get(type) != null) {          ArrayNode array=this.mapper.createArrayNode();          JsonException exception=null;          try {            for (            JsonHttpService service : this.services.get(type)) {              array.add(service.doGetList(type,request.getLocale()));            }          } catch (          JsonException ex) {            exception=ex;          }switch (array.size()) {case 0:            if (exception != null) {              throw exception;            }          reply=array;        break;case 1:      reply=array.get(0);    break;default :  reply=array;break;}}if (reply == null) {log.warn("Type {} unknown.",type);throw new JsonException(HttpServletResponse.SC_NOT_FOUND,Bundle.getMessage(request.getLocale(),"ErrorUnknownType",type));}} else {if (this.services.get(type) != null) {ArrayNode array=this.mapper.createArrayNode();JsonException exception=null;try {for (JsonHttpService service : this.services.get(type)) {array.add(service.doGet(type,name,request.getLocale()));}} catch (JsonException ex) {exception=ex;}switch (array.size()) {case 0:if (exception != null) {throw exception;}reply=array;break;case 1:reply=array.get(0);break;default :reply=array;break;}}if (reply == null) {log.warn("Requested type '{}' unknown.",type);throw new JsonException(HttpServletResponse.SC_NOT_FOUND,Bundle.getMessage(request.getLocale(),"ErrorUnknownType",type));}}} catch (JsonException ex) {reply=ex.getJsonMessage();}int code=reply.path(DATA).path(CODE).asInt(HttpServletResponse.SC_OK);if (code == HttpServletResponse.SC_OK) {response.getWriter().write(this.mapper.writeValueAsString(reply));} else {this.sendError(response,code,this.mapper.writeValueAsString(reply));}} else {response.setContentType(ServletUtil.UTF8_TEXT_HTML);response.getWriter().print(String.format(request.getLocale(),FileUtil.readURL(FileUtil.findURL(Bundle.getMessage(request.getLocale(),"Json.html"))),String.format(request.getLocale(),Bundle.getMessage(request.getLocale(),"HtmlTitle"),ServletUtil.getInstance().getRailroadName(false),Bundle.getMessage(request.getLocale(),"JsonTitle")),ServletUtil.getInstance().getNavBar(request.getLocale(),request.getContextPath()),ServletUtil.getInstance().getRailroadName(false),ServletUtil.getInstance().getFooter(request.getLocale(),request.getContextPath())));}}  }
class C{  public static S2CellId fromFaceIJSame(int face,int i,int j,boolean sameFace){  if (sameFace) {    return S2CellId.fromFaceIJ(face,i,j);  } else {    return S2CellId.fromFaceIJWrap(face,i,j);  }}  }
class C{  protected boolean afterDelete(boolean success){  log.info("*** Success=" + success);  return success;}  }
class C{  public static String extractPostDialPortion(String phoneNumber){  if (phoneNumber == null)   return null;  int trimIndex;  StringBuilder ret=new StringBuilder();  trimIndex=indexOfLastNetworkChar(phoneNumber);  for (int i=trimIndex + 1, s=phoneNumber.length(); i < s; i++) {    char c=phoneNumber.charAt(i);    if (isNonSeparator(c)) {      ret.append(c);    }  }  return ret.toString();}  }
class C{  public List<Tuple<String,Coord>> readNextMovements(){  ArrayList<Tuple<String,Coord>> moves=new ArrayList<Tuple<String,Coord>>();  if (!scanner.hasNextLine()) {    return moves;  }  Scanner lineScan=new Scanner(lastLine);  double time=lineScan.nextDouble();  String id=lineScan.next();  double x=lineScan.nextDouble();  double y=lineScan.nextDouble();  if (normalize) {    time-=minTime;    x-=minX;    y-=minY;  }  lastTimeStamp=time;  while (scanner.hasNextLine() && lastTimeStamp == time) {    lastLine=scanner.nextLine();    if (lastLine.trim().length() == 0 || lastLine.startsWith(COMMENT_PREFIX)) {      continue;    }    moves.add(new Tuple<String,Coord>(id,new Coord(x,y)));    lineScan=new Scanner(lastLine);    try {      time=lineScan.nextDouble();      id=lineScan.next();      x=lineScan.nextDouble();      y=lineScan.nextDouble();    } catch (    Exception e) {      throw new SettingsError("Invalid line '" + lastLine + "'");    }    if (normalize) {      time-=minTime;      x-=minX;      y-=minY;    }  }  if (!scanner.hasNextLine()) {    moves.add(new Tuple<String,Coord>(id,new Coord(x,y)));  }  return moves;}  }
class C{  public ShipFilterGroupDialog(Shell parent){  super(parent,ShipFilterGroupBean.class);}  }
class C{  public void onEvent(Event e) throws Exception {  if (m_actionActive)   return;  m_actionActive=true;  if (e.getTarget().equals(orderField)) {    KeyNamePair pp=orderField.getSelectedItem().toKeyNamePair();    if (pp == null || pp.getKey() == 0)     ; else {      int C_Order_ID=pp.getKey();      invoiceField.setSelectedIndex(-1);      rmaField.setSelectedIndex(-1);      loadOrder(C_Order_ID,false,locatorField.getValue() != null ? ((Integer)locatorField.getValue()).intValue() : 0);      m_invoice=null;    }  } else   if (e.getTarget().equals(invoiceField)) {    KeyNamePair pp=invoiceField.getSelectedItem().toKeyNamePair();    if (pp == null || pp.getKey() == 0)     ; else {      int C_Invoice_ID=pp.getKey();      orderField.setSelectedIndex(-1);      rmaField.setSelectedIndex(-1);      loadInvoice(C_Invoice_ID,locatorField.getValue() != null ? ((Integer)locatorField.getValue()).intValue() : 0);    }  } else   if (e.getTarget().equals(rmaField)) {    KeyNamePair pp=rmaField.getSelectedItem().toKeyNamePair();    if (pp == null || pp.getKey() == 0)     ; else {      int M_RMA_ID=pp.getKey();      orderField.setSelectedIndex(-1);      invoiceField.setSelectedIndex(-1);      loadRMA(M_RMA_ID,locatorField.getValue() != null ? ((Integer)locatorField.getValue()).intValue() : 0);    }  } else   if (e.getTarget().equals(sameWarehouseCb)) {    initBPOrderDetails(((Integer)bPartnerField.getValue()).intValue(),false);  } else   if (e.getTarget().equals(upcField.getComponent())) {    checkProductUsingUPC();  }  m_actionActive=false;}  }
class C{  public List<ScheduledEvent> findByScheduledEventType(ScheduledEventType scheduledEventType){  List<NamedElement> scheduledEventIds=client.findByAlternateId(ScheduledEvent.class,ScheduledEvent.EVENT_TYPE,scheduledEventType.name());  return findByIds(toURIs(scheduledEventIds));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:05.690 -0500",hash_original_method="23308A79A2D2396A98D81E8541E78934",hash_generated_method="5B5626C5475713791C9CEDB0AAE28C29") public boolean isPointToPoint() throws SocketException {  return hasFlag(IFF_POINTOPOINT);}  }
class C{  public Model(Option taggerOpt,Maps taggerMaps,Dictionary taggerDict,FeatureGen taggerFGen,Viterbi taggerVtb){  this.taggerOpt=taggerOpt;  this.taggerMaps=taggerMaps;  this.taggerDict=taggerDict;  this.taggerFGen=taggerFGen;  this.taggerVtb=taggerVtb;}  }
class C{  public static double[][] I(Instances D,int L){  double M[][]=new double[L][L];  for (int j=0; j < L; j++) {    for (int k=j + 1; k < L; k++) {      M[j][k]=I(D,j,k);    }  }  return M;}  }
class C{  public void map(){  if (!mappings.isEmpty()) {    for (    GridDhtAtomicUpdateRequest req : mappings.values()) {      try {        cctx.io().send(req.nodeId(),req,cctx.ioPolicy());        if (msgLog.isDebugEnabled()) {          msgLog.debug("DTH update fut, sent request [futId=" + futVer + ", writeVer="+ writeVer+ ", node="+ req.nodeId()+ ']');        }      } catch (      ClusterTopologyCheckedException ignored) {        if (msgLog.isDebugEnabled()) {          msgLog.debug("DTH update fut, failed to send request, node left [futId=" + futVer + ", writeVer="+ writeVer+ ", node="+ req.nodeId()+ ']');        }        registerResponse(req.nodeId());      }catch (      IgniteCheckedException e) {        U.error(msgLog,"Failed to send request [futId=" + futVer + ", writeVer="+ writeVer+ ", node="+ req.nodeId()+ ']');        registerResponse(req.nodeId());      }    }  } else   onDone();  if (updateReq.writeSynchronizationMode() != FULL_SYNC)   completionCb.apply(updateReq,updateRes);}  }
class C{  public OperationCanceledException(String message){  super(message);}  }
class C{  public void attemptRecover(){  String email=edit_email.getText().toString();  boolean cancel=false;  View focusView=null;  ValidateUserInfo validate=new ValidateUserInfo();  if (TextUtils.isEmpty(email)) {    edit_email.setError(getString(R.string.error_field_required));    focusView=edit_email;    cancel=true;  } else   if (!validate.isEmailValid(email)) {    edit_email.setError(getString(R.string.error_invalid_email));    focusView=edit_email;    cancel=true;  }  if (cancel) {    focusView.requestFocus();  } else {    mForgotTask=new ForgotPassTask(email);    mForgotTask.execute((Void)null);  }}  }
class C{  public Vector product(Vector v) throws IllegalDimension {  int n=this.rows();  int m=this.columns();  if (v.dimension() != m)   throw new IllegalDimension("Product error: " + n + " by "+ m+ " matrix cannot by multiplied with vector of dimension "+ v.dimension());  return secureProduct(v);}  }
class C{  public List<IComment> appendLocalCodeNodeComment(final String commentText) throws CouldntSaveDataException, CouldntLoadDataException {  return CommentManager.get(m_provider).appendLocalCodeNodeComment(m_codeNode,commentText);}  }
class C{  void onMapped(){  isMapped=true;}  }
class C{  static public String startupInfo(String program){  return (program + " version " + jmri.Version.name()+ " starts under Java "+ System.getProperty("java.version","<unknown>"));}  }
class C{  public EpsilonMOEA(Problem problem,Population population,EpsilonBoxDominanceArchive archive,Selection selection,Variation variation,Initialization initialization){  this(problem,population,archive,selection,variation,initialization,new ParetoDominanceComparator());}  }
class C{  public boolean autoCapSentences(){  return preferences.getBoolean(resources.getString(R.string.key_autocap_sentences),Boolean.parseBoolean(resources.getString(R.string.default_autocap_sentences)));}  }
class C{  public Builder(Builder otherBuilder){  this.webIrcEnabled=otherBuilder.isWebIrcEnabled();  this.webIrcUsername=otherBuilder.getWebIrcUsername();  this.webIrcHostname=otherBuilder.getWebIrcHostname();  this.webIrcAddress=otherBuilder.getWebIrcAddress();  this.webIrcPassword=otherBuilder.getWebIrcPassword();  this.name=otherBuilder.getName();  this.login=otherBuilder.getLogin();  this.version=otherBuilder.getVersion();  this.finger=otherBuilder.getFinger();  this.realName=otherBuilder.getRealName();  this.channelPrefixes=otherBuilder.getChannelPrefixes();  this.userLevelPrefixes=otherBuilder.getUserLevelPrefixes();  this.snapshotsEnabled=otherBuilder.isSnapshotsEnabled();  this.dccFilenameQuotes=otherBuilder.isDccFilenameQuotes();  this.dccPorts.clear();  this.dccPorts.addAll(otherBuilder.getDccPorts());  this.dccLocalAddress=otherBuilder.getDccLocalAddress();  this.dccPublicAddress=otherBuilder.getDccPublicAddress();  this.dccAcceptTimeout=otherBuilder.getDccAcceptTimeout();  this.dccResumeAcceptTimeout=otherBuilder.getDccResumeAcceptTimeout();  this.dccTransferBufferSize=otherBuilder.getDccTransferBufferSize();  this.dccPassiveRequest=otherBuilder.isDccPassiveRequest();  this.servers.clear();  this.servers.addAll(otherBuilder.getServers());  this.serverPassword=otherBuilder.getServerPassword();  this.socketFactory=otherBuilder.getSocketFactory();  this.localAddress=otherBuilder.getLocalAddress();  this.encoding=otherBuilder.getEncoding();  this.locale=otherBuilder.getLocale();  this.socketConnectTimeout=otherBuilder.getSocketConnectTimeout();  this.socketTimeout=otherBuilder.getSocketTimeout();  this.maxLineLength=otherBuilder.getMaxLineLength();  this.autoSplitMessage=otherBuilder.isAutoSplitMessage();  this.autoNickChange=otherBuilder.isAutoNickChange();  this.messageDelay=otherBuilder.getMessageDelay();  this.listenerManager=otherBuilder.getListenerManager();  this.nickservPassword=otherBuilder.getNickservPassword();  this.nickservOnSuccess=otherBuilder.getNickservOnSuccess();  this.nickservNick=otherBuilder.getNickservNick();  this.nickservCustomMessage=otherBuilder.getNickservCustomMessage();  this.nickservDelayJoin=otherBuilder.isNickservDelayJoin();  this.userModeHideRealHost=otherBuilder.isUserModeHideRealHost();  this.autoReconnect=otherBuilder.isAutoReconnect();  this.autoReconnectDelay=otherBuilder.getAutoReconnectDelay();  this.autoReconnectAttempts=otherBuilder.getAutoReconnectAttempts();  this.autoJoinChannels.putAll(otherBuilder.getAutoJoinChannels());  this.onJoinWhoEnabled=otherBuilder.isOnJoinWhoEnabled();  this.identServerEnabled=otherBuilder.isIdentServerEnabled();  this.capEnabled=otherBuilder.isCapEnabled();  this.capHandlers.clear();  this.capHandlers.addAll(otherBuilder.getCapHandlers());  this.channelModeHandlers.clear();  this.channelModeHandlers.addAll(otherBuilder.getChannelModeHandlers());  this.shutdownHookEnabled=otherBuilder.isShutdownHookEnabled();  this.botFactory=otherBuilder.getBotFactory();}  }
class C{  protected String paramString(){  String editableString=(editable ? "true" : "false");  String caretColorString=(caretColor != null ? caretColor.toString() : "");  String selectionColorString=(selectionColor != null ? selectionColor.toString() : "");  String selectedTextColorString=(selectedTextColor != null ? selectedTextColor.toString() : "");  String disabledTextColorString=(disabledTextColor != null ? disabledTextColor.toString() : "");  String marginString=(margin != null ? margin.toString() : "");  return super.paramString() + ",caretColor=" + caretColorString+ ",disabledTextColor="+ disabledTextColorString+ ",editable="+ editableString+ ",margin="+ marginString+ ",selectedTextColor="+ selectedTextColorString+ ",selectionColor="+ selectionColorString;}  }
class C{  protected String doIt() throws Exception {  m_C_Project_ID=getRecord_ID();  log.info("doIt - C_Project_ID=" + m_C_Project_ID + ", C_ProjectType_ID="+ m_C_ProjectType_ID);  MProject project=new MProject(getCtx(),m_C_Project_ID,get_TrxName());  if (project.getC_Project_ID() == 0 || project.getC_Project_ID() != m_C_Project_ID)   throw new IllegalArgumentException("Project not found C_Project_ID=" + m_C_Project_ID);  if (project.getC_ProjectType_ID_Int() > 0)   throw new IllegalArgumentException("Project already has Type (Cannot overwrite) " + project.getC_ProjectType_ID());  MProjectType type=new MProjectType(getCtx(),m_C_ProjectType_ID,get_TrxName());  if (type.getC_ProjectType_ID() == 0 || type.getC_ProjectType_ID() != m_C_ProjectType_ID)   throw new IllegalArgumentException("Project Type not found C_ProjectType_ID=" + m_C_ProjectType_ID);  project.setProjectType(type);  if (!project.save())   throw new Exception("@Error@");  return "@OK@";}  }
class C{  IMemberValuePairBinding resolveMemberValuePair(MemberValuePair memberValuePair){  return null;}  }
class C{  public TimingSpecifierParser(boolean useSVG11AccessKeys,boolean useSVG12AccessKeys){  super(useSVG11AccessKeys,useSVG12AccessKeys);  timingSpecifierHandler=DefaultTimingSpecifierHandler.INSTANCE;}  }
class C{  public void cut(){  if (isEditable() && isEnabled()) {    invokeAction("cut",TransferHandler.getCutAction());  }}  }
class C{  private Map<String,String> makeWorkerProps() throws IOException {  Map<String,String> props=new HashMap<>();  props.put(WorkerConfig.INTERNAL_KEY_CONVERTER_CLASS_CONFIG,"org.apache.kafka.connect.storage.StringConverter");  props.put(WorkerConfig.INTERNAL_VALUE_CONVERTER_CLASS_CONFIG,"org.apache.kafka.connect.storage.StringConverter");  props.put("internal.key.converter.schemas.enable","false");  props.put("internal.value.converter.schemas.enable","false");  props.put(WorkerConfig.KEY_CONVERTER_CLASS_CONFIG,"org.apache.kafka.connect.storage.StringConverter");  props.put(WorkerConfig.VALUE_CONVERTER_CLASS_CONFIG,"org.apache.ignite.stream.kafka.connect.serialization.CacheEventConverter");  props.put("key.converter.schemas.enable","false");  props.put("value.converter.schemas.enable","false");  props.put(WorkerConfig.BOOTSTRAP_SERVERS_CONFIG,kafkaBroker.getBrokerAddress());  props.put("offset.storage.file.filename","/tmp/connect.offsets");  props.put(WorkerConfig.OFFSET_COMMIT_INTERVAL_MS_CONFIG,"10");  return props;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TypableElement.class) {switch (baseOperationID) {default :      return -1;  }}if (baseClass == Expression.class) {switch (baseOperationID) {case N4JSPackage.EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET:    return ImPackage.REFERENCING_ELEMENT_EXPRESSION_IM___IS_VALID_SIMPLE_ASSIGNMENT_TARGET;default :  return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public int next(){  int node=_currentNode;  if (node == DTM.NULL)   return DTM.NULL;  final int nodeType=_nodeType;  if (nodeType != DTM.ELEMENT_NODE) {    while (node != DTM.NULL && _exptype2(node) != nodeType) {      node=_nextsib2(node);    }  } else {    int eType;    while (node != DTM.NULL) {      eType=_exptype2(node);      if (eType >= DTM.NTYPES)       break; else       node=_nextsib2(node);    }  }  if (node == DTM.NULL) {    _currentNode=DTM.NULL;    return DTM.NULL;  } else {    _currentNode=_nextsib2(node);    return returnNode(makeNodeHandle(node));  }}  }
class C{  public void expectationOnly(){  expectation(estimatedIm);}  }
class C{  public boolean isClassOk(){  return mCode >= 200 && mCode < 300;}  }
class C{  public void createAndCompareList(RawByteCache cache,int localBufferSize,int objectCount) throws IOException {  LargeObjectArray<SampleObject> loa=new LargeObjectArray<SampleObject>(cache,localBufferSize);  List<SampleObject> objects=this.createObjectList(loa,objectCount);  LargeObjectScanner<SampleObject> scanner=loa.scanner();  int count=0;  while (scanner.hasNext()) {    SampleObject original=objects.get(count);    SampleObject stored=scanner.next();    Assert.assertEquals("Original vs. stored object: object=" + original,original,stored);    if (count > 0 && (count + 1) % 50 == 0)     logger.info("Checked objects: " + count);    count++;  }  Assert.assertEquals("Checking scanned object count",objects.size(),count);  loa.release();}  }
class C{  public void endViewTarget() throws ParseException {}  }
class C{  @Override public int hashCode(){  return Objects.hashCode(name,url,duration);}  }
class C{  public static Socket createSocket() throws IOException {  return new Socket(ADB_HOST,ADB_PORT);}  }
class C{  private void computeLabelSide(int geomIndex,int side){  for (Iterator it=iterator(); it.hasNext(); ) {    EdgeEnd e=(EdgeEnd)it.next();    if (e.getLabel().isArea()) {      int loc=e.getLabel().getLocation(geomIndex,side);      if (loc == Location.INTERIOR) {        label.setLocation(geomIndex,side,Location.INTERIOR);        return;      } else       if (loc == Location.EXTERIOR)       label.setLocation(geomIndex,side,Location.EXTERIOR);    }  }}  }
class C{  public static boolean hasService(Class<?> service,URL[] urls) throws ServiceConfigurationError {  for (  URL url : urls) {    try {      String fullName=prefix + service.getName();      URL u=new URL(url,fullName);      boolean found=parse(service,u);      if (found)       return true;    } catch (    MalformedURLException e) {    }  }  return false;}  }
class C{  private void sendFriends() throws IOException {  log.debug("sending local contacts list");  ArrayList<ByteString> blindedFriends=SecurityManager.getCurrentProfile(mContext).isUseTrust() ? Crypto.byteArraysToStrings(mClientPSI.encodeBlindedItems()) : new ArrayList<ByteString>();  ClientMessage cm=new ClientMessage(null,blindedFriends);  if (!lengthValueWrite(out,cm.toJSON())) {    setExchangeStatus(Status.ERROR);    setErrorMessage("Length/value write of client friends failed.");    throw new IOException("Length/value write of client friends failed, but exception is hidden (see Exchange.java)");  }}  }
class C{  @Override public void deliver(WriteStream os,OutHttp2 outHttp) throws IOException {  try {    os.flush();  }  finally {    _future.ok(null);  }}  }
class C{  public String serialize(TreeNode root){  if (root == null) {    return "#,";  }  String mid=root.val + ",";  String left=serialize(root.left);  String right=serialize(root.right);  mid+=left + right;  return mid;}  }
class C{  public TransportTimeoutException(){}  }
class C{  public int digest(byte[] buf,int offset,int len) throws DigestException {  if (buf == null) {    throw new IllegalArgumentException("No output buffer given");  }  if (buf.length - offset < len) {    throw new IllegalArgumentException("Output buffer too small for specified offset and length");  }  int numBytes=engineDigest(buf,offset,len);  state=INITIAL;  return numBytes;}  }
class C{  public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>(1);  newVector.addElement("measureNumIterations");  return newVector.elements();}  }
class C{  public CylinderPortrayal3D(Color color){  this(color,1f);}  }
class C{  public void initTimeEvent(String typeArg,AbstractView viewArg,int detailArg){  initEvent(typeArg,false,false);  this.view=viewArg;  this.detail=detailArg;}  }
class C{  public N4ClassDeclaration createN4ClassDeclaration(){  N4ClassDeclarationImpl n4ClassDeclaration=new N4ClassDeclarationImpl();  return n4ClassDeclaration;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:51.879 -0500",hash_original_method="41BD172CDA07BE5F4D9598EFF8EB9D29",hash_generated_method="54B8312A3A41C9C5C3658A17557380D4") private static void applyInvokeWithSecurityPolicy(Arguments args,Credentials peer) throws ZygoteSecurityException {  int peerUid=peer.getUid();  if (args.invokeWith != null && peerUid != 0) {    throw new ZygoteSecurityException("Peer is not permitted to specify " + "an explicit invoke-with wrapper command");  }}  }
class C{  private int crypt(byte[] in,int inOff,int len,byte[] out,int outOff){  int result=len;  while (len-- > 0) {    if (used >= blockSize) {      embeddedCipher.encryptBlock(counter,0,encryptedCounter,0);      increment(counter);      used=0;    }    out[outOff++]=(byte)(in[inOff++] ^ encryptedCounter[used++]);  }  return result;}  }
class C{  public PythonRIntegrator(String baseFolder){  File folder=new File(baseFolder);  if (!folder.exists() || !folder.isDirectory()) {    throw new RuntimeException("The base folder is invalid. ABORTING");  }  this.baseFolder=baseFolder;  DateString ds=new DateString();  ds.setTimeInMillis(System.currentTimeMillis());  File of=new File(baseFolder + "output_" + ds.toString()+ "/");  boolean createdOutputFolder=of.mkdirs();  if (!createdOutputFolder) {    throw new RuntimeException("Could not create output folder ... ABORTING.");  }  this.outputFolder=of.getAbsolutePath() + "/";  this.controlTotalsMap=parseControlTotals(this.baseFolder + "template/controlTotals.csv");  this.zoneList=new ArrayList<String>();  for (  String id : this.controlTotalsMap.keySet()) {    this.zoneList.add(id);  }}  }
class C{  @Override public Settings init(String tag){  if (tag == null) {    throw new NullPointerException("tag may not be null");  }  if (tag.trim().length() == 0) {    throw new IllegalStateException("tag may not be empty");  }  this.tag=tag;  return settings;}  }
class C{  public GeoBoundsBuilder wrapLongitude(boolean wrapLongitude){  this.wrapLongitude=wrapLongitude;  return this;}  }
class C{  @LargeTest public void testCameraPairwiseScenario04() throws Exception {  genericPairwiseTestCase(Flash.OFF,Exposure.MAX,WhiteBalance.CLOUDY,SceneMode.AUTO,PictureSize.MEDIUM,Geotagging.OFF);}  }
class C{  public static void assertStopped(){  if (!CLOCK_STATE.get().inHarness()) {    new AssertionError().printStackTrace();  }  assert CLOCK_STATE.get().inHarness();}  }
class C{  public OperationDefinition createOperationDefinition(){  OperationDefinitionImpl operationDefinition=new OperationDefinitionImpl();  return operationDefinition;}  }
class C{  public final void writeDouble(double d) throws IOException {  this.writeLong(Double.doubleToLongBits(d));}  }
class C{  public static Vector3m toVector3m(Vector2 o){  return new Vector3m(o.x,0,o.z);}  }
class C{  public FakeClock incrementTime(ReadableDuration duration){  incrementTime(duration.getMillis());  return this;}  }
class C{  @Override protected Message createKeepAliveMessage(LocalCandidate candidate) throws StunException {switch (candidate.getType()) {case RELAYED_CANDIDATE:    return MessageFactory.createRefreshRequest();case SERVER_REFLEXIVE_CANDIDATE:  boolean existsRelayedCandidate=false;for (Candidate<?> aCandidate : getCandidates()) {  if (CandidateType.RELAYED_CANDIDATE.equals(aCandidate.getType())) {    existsRelayedCandidate=true;    break;  }}return existsRelayedCandidate ? null : super.createKeepAliveMessage(candidate);default :return super.createKeepAliveMessage(candidate);}}  }
class C{  public static BlockHeight readFrom(final Deserializer deserializer,final String label){  return new BlockHeight(deserializer.readLong(label));}  }
class C{  public synchronized void inverseAssociateAll(Primitive associate,Vertex target,Primitive type){  inverseAssociateAll(this.network.createVertex(associate),target,this.network.createVertex(type));}  }
class C{  private Eml copyMetadata(String shortname,File emlFile) throws ImportException {  File emlFile2=dataDir.resourceEmlFile(shortname);  try {    FileUtils.copyFile(emlFile,emlFile2);  } catch (  IOException e1) {    log.error("Unable to copy EML File",e1);  }  Eml eml;  try {    InputStream in=new FileInputStream(emlFile2);    eml=EmlFactory.build(in);  } catch (  FileNotFoundException e) {    eml=new Eml();  }catch (  Exception e) {    deleteDirectoryContainingSingleFile(emlFile2);    throw new ImportException("Invalid EML document",e);  }  return eml;}  }
class C{  public Quaternionf rotateLocalZ(float angle){  return rotateLocalZ(angle,this);}  }
class C{  public static void fill(boolean[] a,boolean val){  for (int i=0, len=a.length; i < len; i++)   a[i]=val;}  }
class C{  @Override public boolean forceFocus(){  this.checkWidget();  return this.text.forceFocus();}  }
class C{  public InactiveController(Game game,String title,boolean canBeTakenOver){  super(new GameCursor(game,GameCursor.Mode.MakeMovesOnCursor));  cursor=(GameCursor)getGame();  this.title=title;  this.canBeTakenOver=canBeTakenOver;}  }
class C{  public BillingAdapterNotFoundException(Object[] params){  super(params);}  }
class C{  @Deprecated public void listNotebooksAsync(final OnClientCallback<List<LinkedNotebook>> callback){  AsyncReflector.execute(getAsyncPersonalClient(),callback,"listNotebooks",getAuthenticationToken());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:15.095 -0500",hash_original_method="12F43AAD192527EE14BD9EA92E6F05B8",hash_generated_method="929C3DCA2A88B94727C182DEFD173D7E") @Override public Drawable mutate(){  if (!mMutated && super.mutate() == this) {    mBitmapState=new BitmapState(mBitmapState);    mMutated=true;  }  return this;}  }
class C{  private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){  try {    PackageManager pm=context.getPackageManager();    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);    if (handlers == null || handlers.size() == 0) {      return false;    }    for (    ResolveInfo resolveInfo : handlers) {      IntentFilter filter=resolveInfo.filter;      if (filter == null)       continue;      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;      if (resolveInfo.activityInfo == null)       continue;      return true;    }  } catch (  RuntimeException e) {    Log.e(TAG,"Runtime exception while getting specialized handlers");  }  return false;}  }
class C{  public OIDCTokens acquireTokensByGSS(GSSNegotiationHandler gssNegotiationHandler,TokenSpec tokenSpec) throws OIDCClientException, OIDCServerException, TokenValidationException, SSLConnectionException {  Validate.notNull(gssNegotiationHandler,"gssNegotiationHandler");  Validate.notNull(tokenSpec,"tokenSpec");  HttpResponse httpResponse=OIDCClientUtils.negotiateGssResponse(gssNegotiationHandler,tokenSpec,getTokenEndpointURI(),this.clientId,this.holderOfKeyConfig,this.keyStore,UUID.randomUUID().toString());  return OIDCClientUtils.parseTokenResponse(httpResponse,this.providerPublicKey,this.issuer,this.clientId,this.clockToleranceInSeconds);}  }
class C{  public static double CCrawFitness(boolean useTrainingData,GEPIndividual ind,int chromosomeNum){  double expectedResult;  double predictedValue;  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  double dvValues[]=dv.getDependentVariableValues(chromosomeNum);  double dvVariance=dv.getDependentVariableVariance(chromosomeNum);  double dvMean=dv.getDependentVariableMean(chromosomeNum);  double dvStdDev=Math.sqrt(dvVariance);  double sumOfPredictedValues=0.0;  double predictedValues[]=new double[dvValues.length];  for (int i=0; i < dvValues.length; i++) {    predictedValues[i]=ind.eval(chromosomeNum,useTrainingData,i);    sumOfPredictedValues+=predictedValues[i];  }  double meanOfPredictedValues=sumOfPredictedValues / dvValues.length;  double sum1=0.0;  double sum2=0.0;  for (int i=0; i < dvValues.length; i++) {    expectedResult=dvValues[i];    predictedValue=predictedValues[i];    double diff=(predictedValue - meanOfPredictedValues);    sum1+=(expectedResult - dvMean) * (diff);    sum2+=diff * diff;  }  double covariance=sum1 / dvValues.length;  double stdDev=Math.sqrt(sum2 / dvValues.length);  double cc=covariance / (dvStdDev * stdDev);  return Math.min(1.0,Math.max(cc,-1.0));}  }
class C{  public static boolean isInCircleRobust(Coordinate a,Coordinate b,Coordinate c,Coordinate p){  return isInCircleNormalized(a,b,c,p);}  }
class C{  public int lastIndexOfAnyOf(final char[] c,final int from){  final int n=c.length;  if (from < 0)   return -1;  if (n == 0)   return -1;  if (n == 1)   return lastIndexOf(c[0],from);  return lastIndexOfAnyOf(c,n,from,buildFilter(c,n));}  }
class C{  public void tryToScrollTo(int to,int duration){  if (mPtrIndicator.isAlreadyHere(to)) {    return;  }  mStart=mPtrIndicator.getCurrentPosY();  mTo=to;  int distance=to - mStart;  if (DEBUG) {    PtrCLog.d(LOG_TAG,"tryToScrollTo: start: %s, distance:%s, to:%s",mStart,distance,to);  }  removeCallbacks(this);  mLastFlingY=0;  if (!mScroller.isFinished()) {    mScroller.forceFinished(true);  }  mScroller.startScroll(0,0,0,distance,duration);  post(this);  mIsRunning=true;}  }
class C{  public boolean isReadOnly(final int column) throws SQLException {  return false;}  }
class C{  public static long[] transformLongArray(Long[] source){  long[] destin=new long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public Builder backgroundColor(int sliderBackgroundColor){  return this;}  }
class C{  public static Breadcrumbs addBreadcrumb(Breadcrumbs pBreadcrumbs,String title,String url){  Breadcrumbs breadcrumbs=new Breadcrumbs();  if (pBreadcrumbs != null)   breadcrumbs.addAll(pBreadcrumbs);  breadcrumbs.add(new Breadcrumb(title,url));  return breadcrumbs;}  }
class C{  private boolean isDetalleDisponible(DetalleConsultaVO detalleConsulta,Date fechaInicial,Date fechaFinal,boolean isReserva){  int disponible=isDetalleDisponibleAllConditions(detalleConsulta,fechaInicial,fechaFinal,isReserva);  return (disponible == SolicitudesConstants.ESTADO_DISPONIBILIDAD_DETALLE_DISPONIBLE || disponible == SolicitudesConstants.ESTADO_DISPONIBILIDAD_DETALLE_DISPONIBLE_PARCIAL);}  }
class C{  public static boolean isSameLocalTime(final Calendar cal1,final Calendar cal2){  if (cal1 == null || cal2 == null) {    throw new IllegalArgumentException("The date must not be null");  }  return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());}  }
class C{  public VfsStream(InputStream is){  init(is,null);}  }
class C{  private PartitionKeyGroup createPartitionKeyGroupFromEntity(PartitionKeyGroupEntity partitionKeyGroupEntity){  PartitionKeyGroup partitionKeyGroup=new PartitionKeyGroup();  PartitionKeyGroupKey partitionKeyGroupKey=new PartitionKeyGroupKey();  partitionKeyGroup.setPartitionKeyGroupKey(partitionKeyGroupKey);  partitionKeyGroupKey.setPartitionKeyGroupName(partitionKeyGroupEntity.getPartitionKeyGroupName());  return partitionKeyGroup;}  }
class C{  public void addNode(BezierPath.Node p){  addNode(getNodeCount(),p);}  }
class C{  public int readInt() throws IOException {  expectStartTag("int");  int value=parseInt();  expectEndTag("int");  return value;}  }
class C{  public void pauseTransfer() throws RcsPermissionDeniedException, RcsGenericException {  try {    mTransferInf.pauseTransfer();  } catch (  Exception e) {    RcsPermissionDeniedException.assertException(e);    RcsUnsupportedOperationException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public static void addChemicalDissolutionChamberRecipe(ItemStack input,GasStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addChemicalDissolutionChamberRecipe",ItemStack.class,GasStack.class);    m.invoke(null,input,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public static String resolveResourceId(Request restletReq){  String resourceId=restletReq.getResourceRef().getRelativeRef(restletReq.getRootRef().getParentRef()).getPath(DECODE);  if (!resourceId.startsWith("/"))   resourceId="/" + resourceId;  return resourceId;}  }
class C{  private void executeRemove(String[] args) throws IOException, ServiceException, DocumentListException {  if (args.length == 3) {    documentList.removeFromFolder(args[1],args[2]);  } else {    printMessage(COMMAND_HELP_REMOVE);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Builder addListener(Listener listener){  getListenerManager().addListener(listener);  return this;}  }
class C{  public TransportOrder(String transportUnitBK){  this.transportUnitBK=transportUnitBK;}  }
class C{  public static boolean isATarget(final AnnotatedTypeMirror type,final Set<TypeVariable> targetTypeVars){  return type.getKind() == TypeKind.TYPEVAR && targetTypeVars.contains(type.getUnderlyingType());}  }
class C{  protected void checkDirExists(String dir){  String path=getFileHandler().append(getHome(),dir);  boolean exists=getFileHandler().exists(path);  if (!exists) {    throw new ContainerException("Invalid existing configuration: directory [" + path + "] does not exist in JONAS_BASE");  }}  }
class C{  public MultiViewParallaxTransformer withoutParallaxView(final int id){  parallaxFactors.remove(id);  return this;}  }
class C{  void toXml(final OutputStream stream){  xstream().toXML(this,stream);}  }
class C{  boolean inSameSubroutine(final Label block){  if ((status & VISITED) == 0 || (block.status & VISITED) == 0) {    return false;  }  for (int i=0; i < srcAndRefPositions.length; ++i) {    if ((srcAndRefPositions[i] & block.srcAndRefPositions[i]) != 0) {      return true;    }  }  return false;}  }
class C{  private boolean isLeaseHeldBy(InternalDistributedMember sender,int lockId){  Assert.assertTrue(sender != null,"sender is null: " + this);  Assert.assertTrue(lockId > -1,"lockId is < 0: " + this);  return sender.equals(this.lessee) && lockId == this.leaseId;}  }
class C{  void receive(MultiplexedDatagramSocket multiplexed,DatagramPacket p) throws IOException {  multiplexingXXXSocketSupport.receive(multiplexed.received,p,multiplexed.getSoTimeout());}  }
class C{  public boolean isNumCpuReadonly(){  return numCpuReadonly;}  }
class C{  protected void notifySuccess(Object... values){  Method[] methodsArray=onSuccessCallback.get().getClass().getMethods();  if (methodsArray.length > 0) {    Method methodToInvoke=UseCaseFilter.filterValidMethodArgs(values,methodsArray,Success.class);    invokeMethodInTheCallbackScheduler(methodToInvoke,values);  } else {    throw new IllegalStateException("The OnSuccessCallback instance configured has no methods annotated with the " + "@Success annotation.");  }}  }
class C{  public VersionProvider(final HttpMethodClient<ErrorResponseDeserializerUnion> httpClient){  this.httpClient=httpClient;}  }
class C{  private static void selectNodes(final ZyGraph graph,final Set<CTag> tags,final boolean mustBeVisible){  final Collection<NaviNode> nodes;  if (mustBeVisible) {    nodes=GraphHelpers.filter(graph,new CGraphNodeTaggedFilter(tags));  } else {    nodes=GraphHelpers.filter(graph,new CGraphNodeTaggedAndVisibleFilter(tags));  }  graph.selectNodes(nodes,true);}  }
class C{  public void stripLast(){  String s=(String)strings.get(count - 1);  if (s.charAt(s.length() - 1) != ' ')   return;  length--;  if (s.length() == 1) {    attributes.remove(--count);    strings.remove(count);    return;  }  strings.set(count - 1,s.substring(0,s.length() - 1));}  }
class C{  public void updateStateColors(){  int page=pager.getCurrentItem();  ConversationPagerAdapter adapter=(ConversationPagerAdapter)pager.getAdapter();  Conversation conversation=adapter.getItem(page);  Conversation previousConversation=server.getConversation(server.getSelectedConversation());  if (previousConversation != null) {    previousConversation.setStatus(Conversation.STATUS_DEFAULT);  }  if (conversation.getNewMentions() > 0) {    Context context=pager.getContext();    Intent intent=new Intent(context,IRCService.class);    intent.setAction(IRCService.ACTION_ACK_NEW_MENTIONS);    intent.putExtra(IRCService.EXTRA_ACK_SERVERID,server.getId());    intent.putExtra(IRCService.EXTRA_ACK_CONVTITLE,conversation.getName());    context.startService(intent);  }  conversation.setStatus(Conversation.STATUS_SELECTED);  server.setSelectedConversation(conversation.getName());  if (page - 2 >= 0) {    int color=stateProvider.getColorForLowerThan(page - 1);    leftIndicatorView.setBackgroundColor(color);    leftIndicatorView.setVisibility(color == ConversationPagerAdapter.COLOR_NONE ? View.INVISIBLE : View.VISIBLE);  } else {    leftIndicatorView.setVisibility(View.INVISIBLE);  }  if (page + 2 < adapter.getCount()) {    int color=stateProvider.getColorForGreaterThan(page + 1);    rightIndicatorView.setBackgroundColor(color);    rightIndicatorView.setVisibility(color == ConversationPagerAdapter.COLOR_NONE ? View.INVISIBLE : View.VISIBLE);  } else {    rightIndicatorView.setVisibility(View.INVISIBLE);  }  titleIndicator.invalidate();}  }
class C{  public boolean[][] toBooleanArray2(){  boolean[][] array=new boolean[rows][columns];  for (int r=0; r < rows; r++) {    for (int c=0; c < columns; c++) {      array[r][c]=get(r,c) != 0.0 ? true : false;    }  }  return array;}  }
class C{  public void updateActionLinks(RichNotificationActionLink... actionLinks){  LinearLayout actionLinksContainer=(LinearLayout)findViewById(R.id.view_rich_notification_action_links);  boolean gotActionLinks=false;  if (actionLinks != null && actionLinks.length > 0) {    gotActionLinks=true;    actionLinksContainer.setVisibility(View.INVISIBLE);    while (actionLinksContainer.getChildCount() > 0) {      actionLinksContainer.getChildAt(0).setOnClickListener(null);      actionLinksContainer.removeViewAt(0);    }    for (    RichNotificationActionLink actionLink : actionLinks) {      View v=actionLink.getView();      if (v != null) {        actionLinksContainer.addView(v);        ((LinearLayout.LayoutParams)v.getLayoutParams()).setMargins(actionLinksHorizontalMargin,0,actionLinksHorizontalMargin,0);        v.requestLayout();      }    }  }  actionLinksContainer.setVisibility(gotActionLinks ? View.VISIBLE : View.GONE);}  }
class C{  static public void assertTopAligned(View first,View second){  int[] xy=new int[2];  first.getLocationOnScreen(xy);  int firstTop=xy[1];  second.getLocationOnScreen(xy);  int secondTop=xy[1];  assertEquals("views are not top aligned",firstTop,secondTop);}  }
class C{  public static int[] createMaterialSpectrumPalette(int color,final int count){  int[] palette=new int[count];  if (count > 0) {    final boolean isDarkColor=isDarkColor(color);    final float[] opacity=isDarkColor ? new float[]{.75f,.50f,.25f,.10f,.85f,.75f,.50f,.25f} : new float[]{.85f,.75f,.50f,.25f,.75f,.50f,.25f,.10f};    for (int i=0; i < count; i++) {      final int op=i % opacity.length;      int mask=(isDarkColor && op < 4) || (!isDarkColor && op >= 4) ? Color.WHITE : Color.BLACK;      float alpha=opacity[op];      palette[i]=applyMaskColor(color,mask,alpha);    }  }  return palette;}  }
class C{  public double eval(double params[]){  return (1.0 / Math.tan(params[0]));}  }
class C{  protected final void throwException(Exception exception) throws ParserException {  throw new ParserException(getContext(),exception.getMessage());}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @Override public void println(int priority,String tag,String msg,Throwable tr){  String useMsg=msg;  if (useMsg == null) {    useMsg="";  }  if (tr != null) {    msg+="\n" + Log.getStackTraceString(tr);  }  Log.println(priority,tag,useMsg);  if (mNext != null) {    mNext.println(priority,tag,msg,tr);  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.search_query_results);  mQueryText=(TextView)findViewById(R.id.txt_query);  mAppDataText=(TextView)findViewById(R.id.txt_appdata);  mDeliveredByText=(TextView)findViewById(R.id.txt_deliveredby);  final Intent queryIntent=getIntent();  final String queryAction=queryIntent.getAction();  if (Intent.ACTION_SEARCH.equals(queryAction)) {    doSearchQuery(queryIntent,"onCreate()");  } else {    mDeliveredByText.setText("onCreate(), but no ACTION_SEARCH intent");  }}  }
class C{  protected long unwrapKey(Object key){  return ((Long)key).longValue();}  }
class C{  private static List<TypeRecord> recursiveDepthFirstSearch(final Stack<TypeRecord> pathFromRoot,final TypeElement target,final Types types){  List<TypeRecord> path=null;  if (!pathFromRoot.isEmpty()) {    final TypeRecord currentRecord=pathFromRoot.peek();    final TypeElement currentElement=currentRecord.element;    if (currentElement.equals(target)) {      return new ArrayList<>(pathFromRoot);    } else {      final Iterator<? extends TypeMirror> interfaces=currentElement.getInterfaces().iterator();      final TypeMirror superclassType=currentElement.getSuperclass();      while (path == null && interfaces.hasNext()) {        final TypeMirror intface=interfaces.next();        if (intface.getKind() != TypeKind.NONE) {          DeclaredType interfaceDeclared=(DeclaredType)intface;          pathFromRoot.push(new TypeRecord((TypeElement)types.asElement(interfaceDeclared),interfaceDeclared));          path=recursiveDepthFirstSearch(pathFromRoot,target,types);          pathFromRoot.pop();        }      }      if (path == null && superclassType != null && superclassType.getKind() != TypeKind.NONE) {        final DeclaredType superclass=(DeclaredType)superclassType;        pathFromRoot.push(new TypeRecord((TypeElement)types.asElement(superclass),superclass));        path=recursiveDepthFirstSearch(pathFromRoot,target,types);        pathFromRoot.pop();      }    }  }  return path;}  }
class C{  private void ItoOSP(int i,byte[] sp){  sp[0]=(byte)(i >>> 24);  sp[1]=(byte)(i >>> 16);  sp[2]=(byte)(i >>> 8);  sp[3]=(byte)(i >>> 0);}  }
class C{  String findParmValue(Element e,String name){  List<Element> l=e.getChildren("parameter");  for (int i=0; i < l.size(); i++) {    Element n=l.get(i);    if (n.getAttributeValue("name").equals(name)) {      return n.getTextTrim();    }  }  return null;}  }
class C{  public void println(long x){  printHeader();  for (int i=0; i < size(); i++)   ((PrintStream)m_Streams.get(i)).println(x);  flush();}  }
class C{  public boolean isColumnNumeric(int columnIndex){  return getSource().isColumnNumeric(columnIndex);}  }
class C{  public void union(Rect r){  union(r.left,r.top,r.right,r.bottom);}  }
class C{  public void label(Way way,EnumSet<EdgeStore.EdgeFlag> forwardFlags,EnumSet<EdgeStore.EdgeFlag> backFlags){  if (!forwardFlags.contains(EdgeStore.EdgeFlag.ALLOWS_CAR) && !backFlags.contains(EdgeStore.EdgeFlag.ALLOWS_CAR)) {    forwardFlags.add(EdgeStore.EdgeFlag.BIKE_LTS_1);    backFlags.add(EdgeStore.EdgeFlag.BIKE_LTS_1);    return;  }  if (way.hasTag("highway","service"))   return;  if (way.hasTag("highway","residential") || way.hasTag("highway","living_street")) {    forwardFlags.add(EdgeStore.EdgeFlag.BIKE_LTS_1);    backFlags.add(EdgeStore.EdgeFlag.BIKE_LTS_1);    return;  }  boolean hasForwardLane=false;  boolean hasBackwardLane=false;  if (way.hasTag("cycleway","lane")) {    hasForwardLane=hasBackwardLane=true;  }  if (way.hasTag("cycleway:left","lane") || way.hasTag("cycleway","opposite") || way.hasTag("cycleway:right","opposite")) {    hasBackwardLane=true;  }  if (way.hasTag("cycleway:left","opposite") || way.hasTag("cycleway:right","lane")) {    hasForwardLane=true;  }  double maxSpeed=Double.NaN;  if (way.hasTag("maxspeed")) {    maxSpeed=getSpeedKmh(way.getTag("maxspeed"));    if (Double.isNaN(maxSpeed)) {      LOG.warn("Unable to parse maxspeed tag {}",way.getTag("maxspeed"));    }  }  int lanes=Integer.MAX_VALUE;  if (way.hasTag("lanes")) {    try {      lanes=Integer.parseInt(way.getTag("lanes"));    } catch (    NumberFormatException e) {      LOG.warn("Unable to parse lane specification {}",way.getTag("lanes"));    }  }  EdgeStore.EdgeFlag defaultLts=EdgeStore.EdgeFlag.BIKE_LTS_3;  if (lanes <= 3 && maxSpeed <= 25 * 1.61)   defaultLts=EdgeStore.EdgeFlag.BIKE_LTS_2;  if (lanes == Integer.MAX_VALUE && maxSpeed <= 25 * 1.61)   defaultLts=EdgeStore.EdgeFlag.BIKE_LTS_2;  if (way.hasTag("highway","unclassified") || way.hasTag("highway","tertiary") || way.hasTag("highway","tertiary_link")) {    if (lanes <= 3 && Double.isNaN(maxSpeed))     defaultLts=EdgeStore.EdgeFlag.BIKE_LTS_2;    if (hasForwardLane) {      forwardFlags.add(EdgeStore.EdgeFlag.BIKE_LTS_2);    } else {      forwardFlags.add(defaultLts);    }    if (hasBackwardLane) {      backFlags.add(EdgeStore.EdgeFlag.BIKE_LTS_2);    } else {      backFlags.add(defaultLts);    }  } else {    if (hasForwardLane) {      forwardFlags.add(defaultLts);    }    if (hasBackwardLane) {      backFlags.add(defaultLts);    }  }  if (!forwardFlags.contains(EdgeStore.EdgeFlag.BIKE_LTS_1) && !forwardFlags.contains(EdgeStore.EdgeFlag.BIKE_LTS_2) && !forwardFlags.contains(EdgeStore.EdgeFlag.BIKE_LTS_3)&& !forwardFlags.contains(EdgeStore.EdgeFlag.BIKE_LTS_4))   forwardFlags.add(EdgeStore.EdgeFlag.BIKE_LTS_4);  if (!backFlags.contains(EdgeStore.EdgeFlag.BIKE_LTS_1) && !backFlags.contains(EdgeStore.EdgeFlag.BIKE_LTS_2) && !backFlags.contains(EdgeStore.EdgeFlag.BIKE_LTS_3)&& !backFlags.contains(EdgeStore.EdgeFlag.BIKE_LTS_4))   backFlags.add(EdgeStore.EdgeFlag.BIKE_LTS_4);}  }
class C{  public void endTransfer(String fileName){  filesCount++;  long leftNotReported=currentFileSize - currentFileReal;  if (leftNotReported > 0) {    subMonitor.worked((int)leftNotReported);  }  long originalSize=files.get(fileName).longValue();  finishedFilesSize+=getFileSize(originalSize);  if (files.size() == filesCount) {    displayMessageJob.cancel();    subMonitor.subTask("");    subMonitor.done();  }}  }
class C{  public synchronized void addSeries(int index,XYSeries series){  mSeries.add(index,series);}  }
class C{  public NumberConverter(boolean allowDecimals,Object defaultValue){  super();  this.allowDecimals=allowDecimals;  setDefaultValue(defaultValue);}  }
class C{  public ActiveMQRAStreamMessage(final StreamMessage message,final ActiveMQRASession session){  super(message,session);  if (ActiveMQRAStreamMessage.trace) {    ActiveMQRALogger.LOGGER.trace("constructor(" + message + ", "+ session+ ")");  }}  }
class C{  private void writeAndFlushData(ZkDataNode node) throws KeeperException, InterruptedException {  String path=node.getFQPath();  if (ZKAccessUtils.zkPathExists(zkHandle,path)) {    logger.info("Path Exists: Setting data...  " + path);    ZKAccessUtils.setDataOnZkNode(zkHandle,path,node.getNodeData());  } else {    logger.info("Path does not exist. Creating now... " + path);    ZKAccessUtils.validateAndCreateZkPath(zkHandle,path,node.getNodeData());  }  for (  ZkDataNode child : node.getAllChildren()) {    writeAndFlushData(child);  }}  }
class C{  public FSFont resolveFont(SharedContext ctx,String[] families,float size,IdentValue weight,IdentValue style,IdentValue variant){  List<Font> fonts=new ArrayList<Font>(3);  if (families != null) {    for (int i=0; i < families.length; i++) {      Font font=resolveFont(ctx,families[i],size,weight,style,variant);      if (font != null) {        fonts.add(font);      }    }  }  String family="SansSerif";  if (style == IdentValue.ITALIC) {    family="Serif";  }  Font fnt=createFont(ctx,availableFontsHash.get(family),size,weight,style,variant);  instanceHash.put(getFontInstanceHashName(ctx,family,size,weight,style,variant),fnt);  fonts.add(fnt);  return new AWTFSFont(fonts,size);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_ptr_list_fragment);  mPullRefreshListFragment=(PullToRefreshListFragment)getSupportFragmentManager().findFragmentById(R.id.frag_ptr_list);  mPullRefreshListView=mPullRefreshListFragment.getPullToRefreshListView();  mPullRefreshListView.setOnRefreshListener(this);  ListView actualListView=mPullRefreshListView.getRefreshableView();  mListItems=new LinkedList<String>();  mListItems.addAll(Arrays.asList(mStrings));  mAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,mListItems);  actualListView.setAdapter(mAdapter);  mPullRefreshListFragment.setListShown(true);}  }
class C{  private void makeToast(String message){  if (mToast != null) {    mToast.cancel();  }  mToast=Toast.makeText(this,message,Toast.LENGTH_LONG);  mToast.show();}  }
class C{  @Action(value="/revPetition-addHearingDate") public String addHearingDate(){  if (LOGGER.isDebugEnabled())   LOGGER.debug("ObjectionAction | addHearingDate | start " + objection);  InputStream hearingNoticePdf=null;  ReportOutput reportOutput=new ReportOutput();  updateStateAndStatus(objection);  reportOutput=createHearingNoticeReport(reportOutput,objection);  if (reportOutput != null && reportOutput.getReportOutputData() != null)   hearingNoticePdf=new ByteArrayInputStream(reportOutput.getReportOutputData());  if (hearingNoticePdf != null)   noticeService.saveNotice(objection.getObjectionNumber(),objection.getObjectionNumber(),PropertyTaxConstants.NOTICE_TYPE_REVISIONPETITION_HEARINGNOTICE,objection.getBasicProperty(),hearingNoticePdf);  revisionPetitionService.updateRevisionPetition(objection);  sendEmailandSms(objection,REVISION_PETITION_HEARINGNOTICEGENERATED);  if (LOGGER.isDebugEnabled())   LOGGER.debug("ObjectionAction | addHearingDate | End " + objection);  return STRUTS_RESULT_MESSAGE;}  }
class C{  public CustomFaultResponse(){  requestFileName="getstate.query";  responseFile="customfault.answer";}  }
class C{  public int next(){  if (currentIndex < replaceable.length()) {    return replaceable.charAt(currentIndex++);  }  return DONE;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof CodeSource))   return false;  CodeSource cs=(CodeSource)obj;  if (location == null) {    if (cs.location != null)     return false;  } else {    if (!location.equals(cs.location))     return false;  }  return matchCerts(cs,true);}  }
class C{  public void endEntity(String name) throws SAXException {  if (null != m_resultLexicalHandler)   m_resultLexicalHandler.endEntity(name);}  }
class C{  public VolumeInput(Observer theObserver){  obs=new MyObservable();  obs.addObserver(theObserver);}  }
class C{  protected SimpleScopeImpl(){  super();}  }
class C{  void start(){  initializeServices();  startCustomExceptionHandler();  startLogListener();  startEventTracker();}  }
class C{  public List<String> list(final String path) throws VaultException {  final String fullPath=path == null ? "list=true" : path + "?list=true";  LogicalResponse response=null;  try {    response=read(fullPath);  } catch (  final VaultException e) {    if (e.getHttpStatusCode() != 404) {      throw e;    }  }  final List<String> returnValues=new ArrayList<>();  if (response != null && response.getRestResponse().getStatus() != 404 && response.getData() != null && response.getData().get("keys") != null) {    final JsonArray keys=Json.parse(response.getData().get("keys")).asArray();    for (int index=0; index < keys.size(); index++) {      returnValues.add(keys.get(index).asString());    }  }  return returnValues;}  }
class C{  @Override public String fromURI(final URI uri){  if (uri == null) {    throw new IllegalArgumentException();  }  try {    return URLDecoder.decode(uri.getLocalName(),"UTF-8");  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  private void initializeLayout(){  setLayout(new BorderLayout());  JPanel basicsPanel=new JPanel(new GridBagLayout());  basicsPanel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));  GridBagConstraints gbc=new GridBagConstraints();  gbc.anchor=GridBagConstraints.WEST;  gbc.fill=GridBagConstraints.HORIZONTAL;  if (displayIDInfo) {    gbc.weightx=0.8;    gbc.gridwidth=1;    gbc.gridx=0;    gbc.gridy=0;    gbc.insets=new Insets(5,0,0,0);    basicsPanel.add(new JLabel("Synapse Id:"),gbc);    gbc.gridwidth=2;    gbc.gridx=1;    basicsPanel.add(idLabel,gbc);  }  gbc.weightx=0.8;  gbc.gridwidth=1;  gbc.gridx=0;  gbc.gridy++;  basicsPanel.add(new JLabel("Strength:"),gbc);  gbc.anchor=GridBagConstraints.EAST;  gbc.insets=new Insets(5,3,0,0);  gbc.gridwidth=2;  gbc.weightx=0.2;  gbc.gridx=1;  basicsPanel.add(tfStrength,gbc);  gbc.anchor=GridBagConstraints.WEST;  gbc.insets=new Insets(5,0,0,0);  gbc.gridwidth=1;  gbc.weightx=0.8;  gbc.gridx=0;  gbc.gridy++;  basicsPanel.add(new JLabel("Status: "),gbc);  gbc.anchor=GridBagConstraints.EAST;  gbc.insets=new Insets(5,3,0,0);  gbc.gridwidth=2;  gbc.weightx=0.2;  gbc.gridx=1;  basicsPanel.add(synapseEnabled,gbc);  gbc.gridwidth=1;  int lgap=detailTriangle.isDown() ? 5 : 0;  gbc.insets=new Insets(10,5,lgap,5);  gbc.fill=GridBagConstraints.NONE;  gbc.gridx=1;  gbc.gridy++;  gbc.weightx=0.2;  basicsPanel.add(detailTriangle,gbc);  this.add(basicsPanel,BorderLayout.NORTH);  extraDataPanel.setVisible(detailTriangle.isDown());  this.add(extraDataPanel,BorderLayout.SOUTH);  TitledBorder tb=BorderFactory.createTitledBorder("Basic Data");  this.setBorder(tb);}  }
class C{  public boolean readSample(SampleHolder sampleHolder){  boolean haveSample=infoQueue.peekSample(sampleHolder,extrasHolder);  if (!haveSample) {    return false;  }  if (sampleHolder.isEncrypted()) {    readEncryptionData(sampleHolder,extrasHolder);  }  sampleHolder.ensureSpaceForWrite(sampleHolder.size);  readData(extrasHolder.offset,sampleHolder.data,sampleHolder.size);  long nextOffset=infoQueue.moveToNextSample();  dropDownstreamTo(nextOffset);  return true;}  }
class C{  public boolean createCSV(File file,char delimiter,Language language){  try {    Writer fw=new OutputStreamWriter(new FileOutputStream(file,false),Ini.getCharset());    return createCSV(new BufferedWriter(fw),delimiter,language);  } catch (  FileNotFoundException fnfe) {    log.log(Level.SEVERE,"(f) - " + fnfe.toString());  }catch (  Exception e) {    log.log(Level.SEVERE,"(f)",e);  }  return false;}  }
class C{  private void endDataSourceTag(){  buffer.append(" >\n");}  }
class C{  @RequestMapping(value="/activate/login/{login}",method=RequestMethod.GET) public @ResponseBody ModelAndView activationAccount(@PathVariable String login) throws ServiceException, CheckException {  logger.info("--ACTIVATION OF ACCOUNT--");  logger.debug("UserController : User " + login);  User user=userService.findByLogin(login);  userService.activationAccount(user);  logger.info("Activation successfull of account of " + login);  return new ModelAndView("redirect:/webui/#validated");}  }
class C{  public Device(DeviceManagerImpl deviceManager,Long deviceKey,Entity entity,IEntityClass entityClass){  this.deviceManager=deviceManager;  this.deviceKey=deviceKey;  this.entities=new Entity[]{entity};  this.macAddressString=entity.getMacAddress().toString();  this.entityClass=entityClass;  Arrays.sort(this.entities);  this.dhcpClientName=null;  this.oldAPs=null;  this.attachmentPoints=null;  if (entity.getSwitchDPID() != null && entity.getSwitchPort() != null) {    DatapathId sw=entity.getSwitchDPID();    OFPort port=entity.getSwitchPort();    if (deviceManager.isValidAttachmentPoint(sw,port)) {      AttachmentPoint ap;      ap=new AttachmentPoint(sw,port,entity.getLastSeenTimestamp());      this.attachmentPoints=new ArrayList<AttachmentPoint>();      this.attachmentPoints.add(ap);    }  }  vlanIds=computeVlandIds();}  }
class C{  public static void clearPreferences(final Context context){  final SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(context);  final SharedPreferences.Editor editor=preferences.edit();  editor.clear();  editor.commit();}  }
class C{  public boolean fileExists(){  return mId != -1;}  }
class C{  public void cancelCatchingRequests(){  super.cancelCatchingRequests();  mIsBackPaginating=false;  mCanPaginateBack=true;  mRoom.cancelRemoteHistoryRequest();  mNextBatch=mRoom.getLiveState().getToken();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  double sum;  int[] dX;  int[] dY;  double[] weights;  int numPixelsInFilter;  boolean absValuesOnly=false;  boolean reflectAtBorders=true;  String direction="vertical";  double centreValue;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      String str=args[i].toLowerCase();      if (str.contains("v")) {        direction="vertical";      } else       if (str.contains("h")) {        direction="horizontal";      } else       if (str.contains("45")) {        direction="45";      } else       if (str.contains("135")) {        direction="135";      } else {        direction="vertical";      }    } else     if (i == 3) {      absValuesOnly=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    if (direction.equals("vertical")) {      weights=new double[]{-1,2,-1,-1,2,-1,-1,2,-1};    } else     if (direction.equals("horizontal")) {      weights=new double[]{-1,-1,-1,2,2,2,-1,-1,-1};    } else     if (direction.equals("135")) {      weights=new double[]{2,-1,-1,-1,2,-1,-1,-1,2};    } else {      weights=new double[]{-1,-1,2,-1,2,-1,2,-1,-1};    }    dX=new int[]{-1,0,1,-1,0,1,-1,0,1};    dY=new int[]{-1,-1,-1,0,0,0,1,1,1};    numPixelsInFilter=dX.length;    if (absValuesOnly) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          centreValue=inputFile.getValue(row,col);          if (centreValue != noData) {            sum=0;            for (a=0; a < numPixelsInFilter; a++) {              x=col + dX[a];              y=row + dY[a];              z=inputFile.getValue(y,x);              if (z == noData) {                z=centreValue;              }              sum+=z * weights[a];            }            if (sum < 0) {              sum=-sum;            }            outputFile.setValue(row,col,sum);          } else {            outputFile.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    } else {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          centreValue=inputFile.getValue(row,col);          if (centreValue != noData) {            sum=0;            for (a=0; a < numPixelsInFilter; a++) {              x=col + dX[a];              y=row + dY[a];              z=inputFile.getValue(y,x);              if (z == noData) {                z=centreValue;              }              sum+=z * weights[a];            }            outputFile.setValue(row,col,sum);          } else {            outputFile.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public XOR128(long seed){  super(seed);}  }
class C{  private List<StorageFileEntity> createStorageFileEntitiesFromStorageFiles(List<StorageFile> storageFiles,StorageEntity storageEntity,boolean storageFilesDiscovered,String expectedS3KeyPrefix,StorageUnitEntity storageUnitEntity,String directoryPath,boolean validatePathPrefix,boolean validateFileExistence,boolean validateFileSize,boolean isS3StoragePlatform){  List<StorageFileEntity> storageFileEntities=null;  if (!org.apache.commons.collections4.CollectionUtils.isEmpty(storageFiles)) {    storageFileEntities=new ArrayList<>();    storageUnitEntity.setStorageFiles(storageFileEntities);    S3FileTransferRequestParamsDto params=null;    Map<String,StorageFile> actualS3Keys=null;    if (validateFileExistence && isS3StoragePlatform && !storageFilesDiscovered) {      params=getFileValidationParams(storageEntity,expectedS3KeyPrefix,storageUnitEntity,validatePathPrefix);      actualS3Keys=storageFileHelper.getStorageFilesMapFromS3ObjectSummaries(s3Service.listDirectory(params,true));    }    if (validatePathPrefix && isS3StoragePlatform) {      String expectedS3KeyPrefixWithTrailingSlash=expectedS3KeyPrefix + "/";      Long registeredStorageFileCount=storageFileDao.getStorageFileCount(storageEntity.getName(),expectedS3KeyPrefixWithTrailingSlash);      if (registeredStorageFileCount > 0) {        throw new AlreadyExistsException(String.format("Found %d storage file(s) matching \"%s\" S3 key prefix in \"%s\" " + "storage that is registered with another business object data.",registeredStorageFileCount,expectedS3KeyPrefix,storageEntity.getName()));      }    }    for (    StorageFile storageFile : storageFiles) {      StorageFileEntity storageFileEntity=new StorageFileEntity();      storageFileEntities.add(storageFileEntity);      storageFileEntity.setStorageUnit(storageUnitEntity);      storageFileEntity.setPath(storageFile.getFilePath());      storageFileEntity.setFileSizeBytes(storageFile.getFileSizeBytes());      storageFileEntity.setRowCount(storageFile.getRowCount());      if (!storageFilesDiscovered) {        if (validatePathPrefix && isS3StoragePlatform) {          Assert.isTrue(storageFileEntity.getPath().startsWith(expectedS3KeyPrefix),String.format("Specified storage file path \"%s\" does not match the expected S3 key prefix \"%s\".",storageFileEntity.getPath(),expectedS3KeyPrefix));        } else         if (directoryPath != null) {          Assert.isTrue(storageFileEntity.getPath().startsWith(directoryPath),String.format("Storage file path \"%s\" does not match the storage directory path \"%s\".",storageFileEntity.getPath(),directoryPath));        }        if (validateFileExistence && isS3StoragePlatform) {          storageFileHelper.validateStorageFile(storageFile,params.getS3BucketName(),actualS3Keys,validateFileSize);        }      }    }  }  return storageFileEntities;}  }
class C{  public static Serializer switchSerializerIfHTML(String ns,String localName,Properties props,Serializer oldSerializer) throws TransformerException {  Serializer newSerializer=oldSerializer;  if (((null == ns) || (ns.length() == 0)) && localName.equalsIgnoreCase("html")) {    if (null != getOutputPropertyNoDefault(OutputKeys.METHOD,props))     return newSerializer;    Properties prevProperties=props;    OutputProperties htmlOutputProperties=new OutputProperties(Method.HTML);    htmlOutputProperties.copyFrom(prevProperties,true);    Properties htmlProperties=htmlOutputProperties.getProperties();{      if (null != oldSerializer) {        Serializer serializer=SerializerFactory.getSerializer(htmlProperties);        Writer writer=oldSerializer.getWriter();        if (null != writer)         serializer.setWriter(writer); else {          OutputStream os=serializer.getOutputStream();          if (null != os)           serializer.setOutputStream(os);        }        newSerializer=serializer;      }    }  }  return newSerializer;}  }
class C{  private static void validateTextField(CatalogServiceRestRep catalogService,ServiceFieldRestRep field,String fieldName,String value){  if (StringUtils.isNotBlank(value)) {    validateRegex(fieldName,value,field.getRegEx(),field.getFailureMessage());    validateLength(fieldName,value,field.getMin(),field.getMax());  }}  }
class C{  public List<User> queryDeep(String where,String... selectionArg){  Cursor cursor=db.rawQuery(getSelectDeep() + where,selectionArg);  return loadDeepAllAndCloseCursor(cursor);}  }
class C{  public SortOrder(){}  }
class C{  void requireBinding(String prefix,String ns){  noteBinding(prefix,ns,true);}  }
class C{  public boolean isDebug(){  return _isDebug;}  }
class C{  protected void drawPoint(FloatPoint point,Canvas canvas,Paint paint){  canvas.drawPoint(point.x,point.y,paint);}  }
class C{  @Override public String toString(){  return String.valueOf(value);}  }
class C{  public static Ordering asc(String propertyName){  return new Ordering(propertyName,Order.ASCENDING,NullOrdering.FIRST);}  }
class C{  public void removeAlias(Origin alias){  aliases.remove(alias);}  }
class C{  @Deprecated public void templateType(ScriptService.ScriptType templateType){  updateOrCreateScript(null,templateType,null,null);}  }
class C{  public static boolean hasNextKeyTyped(){synchronized (keyLock) {    return !keysTyped.isEmpty();  }}  }
class C{  public boolean isEagerLock(){  return eagerLock;}  }
class C{  static boolean isPostgreSQL(){  if (s_type == null)   getServerType();  if (s_type != null)   return TYPE_POSTGRESQL.equals(s_type);  return false;}  }
class C{  private static boolean isViewRecycled(PaletteTarget target){  if (target != null && target.getPath() != null && target.getView() != null && target.getView().getTag() != null) {    if (target.getView().getTag() instanceof PaletteTag) {      return !target.getPath().equals(((PaletteTag)target.getView().getTag()).getPath());    } else {      throw new NoPaletteTagFoundException("PaletteLoader couldn't determine whether" + " a View has been reused or not. PaletteLoader uses View.setTag() and " + "View.getTag() for keeping check if a View has been reused and it's "+ "recommended to refrain from setting tags to Views PaletteLoader is using.");    }  } else {    return false;  }}  }
class C{  public final void incrementIdCounterTo(int id){  int diff=id - mIdCounter.get();  if (diff < 0)   return;  mIdCounter.addAndGet(diff);  updateSharedPreference();}  }
class C{  public void remove(String userId) throws ServerException {  requireNonNull(userId,"Required non-null user id");  profileDao.remove(userId);}  }
class C{  public Topology buildAppTopology(){  Topology t=tp.newTopology("kafkaClientSubscriber");  Map<String,Object> config=newConfig(t);  KafkaConsumer kafka=new KafkaConsumer(t,null);  System.out.println("Using Kafka consumer group.id " + config.get(OPT_GROUP_ID));  TStream<String> msgs=kafka.subscribe(null,(String)options.get(OPT_TOPIC));  msgs.sink(null);  return t;}  }
class C{  public SVGPath ellipticalArc(double rx,double ry,double ar,double la,double sp,double[] xy){  append(SVGConstants.PATH_ARC,rx,ry,ar,la,sp,xy[0],xy[1]);  return this;}  }
class C{  public void testParsingDotAsHostname() throws Exception {  assertEquals(null,new URI("http://./").getHost());}  }
class C{  public void endElement() throws Exception {}  }
class C{  void addBridgeIfNeeded(DiagnosticPosition pos,Symbol sym,ClassSymbol origin,ListBuffer<JCTree> bridges){  if (sym.kind == MTH && sym.name != names.init && (sym.flags() & (PRIVATE | STATIC)) == 0 && (sym.flags() & (SYNTHETIC | OVERRIDE_BRIDGE)) != SYNTHETIC && sym.isMemberOf(origin,types)) {    MethodSymbol meth=(MethodSymbol)sym;    MethodSymbol bridge=meth.binaryImplementation(origin,types);    MethodSymbol impl=meth.implementation(origin,types,true,overrideBridgeFilter);    if (bridge == null || bridge == meth || (impl != null && !bridge.owner.isSubClass(impl.owner,types))) {      if (impl != null && isBridgeNeeded(meth,impl,origin.type)) {        addBridge(pos,meth,impl,origin,bridge == impl,bridges);      } else       if (impl == meth && impl.owner != origin && (impl.flags() & FINAL) == 0 && (meth.flags() & (ABSTRACT | PUBLIC)) == PUBLIC && (origin.flags() & PUBLIC) > (impl.owner.flags() & PUBLIC)) {        addBridge(pos,meth,impl,origin,false,bridges);      }    } else     if ((bridge.flags() & (SYNTHETIC | OVERRIDE_BRIDGE)) == SYNTHETIC) {      MethodSymbol other=overridden.get(bridge);      if (other != null && other != meth) {        if (impl == null || !impl.overrides(other,origin,types,true)) {          log.error(pos,"name.clash.same.erasure.no.override",other,other.location(origin.type,types),meth,meth.location(origin.type,types));        }      }    } else     if (!bridge.overrides(meth,origin,types,true)) {      if (bridge.owner == origin || types.asSuper(bridge.owner.type,meth.owner) == null)       log.error(pos,"name.clash.same.erasure.no.override",bridge,bridge.location(origin.type,types),meth,meth.location(origin.type,types));    }  }}  }
class C{  public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader){  Assert.notNull(resourceLoader,"ResourceLoader must not be null");  this.resourceLoader=resourceLoader;}  }
class C{  protected final static byte composeMessagingMode(byte esmClass,byte messagingModeValue){  return (byte)(cleanMessagingMode(esmClass) | messagingModeValue);}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  public EntityView(){}  }
class C{  public void writeProperties(Path path) throws IOException {  logger.info("Writing properties to path: " + path.toAbsolutePath());  FileOutputStream stream=new FileOutputStream(path.toFile());  try {    toProperties().store(stream,"DCOS got yo Cassandra!");  }  finally {    stream.close();  }}  }
class C{  public void cloneMethodClassifications(SootMethod original,SootMethod clone){  if (API.v().isBannedMethod(original.getSignature()))   API.v().addBanMethod(clone); else   if (API.v().isSpecMethod(original))   API.v().addSpecMethod(clone); else   if (API.v().isSafeMethod(original))   API.v().addSafeMethod(clone); else   if (API.v().isSystemClass(original.getDeclaringClass())) {    API.v().addBanMethod(clone);  }  if (classificationCat.containsKey(original)) {    classificationCat.put(clone,classificationCat.get(original));  }  if (srcsMapping.containsKey(original)) {    Set<InfoKind> ifs=new HashSet<InfoKind>();    ifs.addAll(srcsMapping.get(original));    srcsMapping.put(clone,ifs);  }  if (sinksMapping.containsKey(original)) {    Set<InfoKind> ifs=new HashSet<InfoKind>();    ifs.addAll(sinksMapping.get(original));    sinksMapping.put(clone,ifs);  }  if (sourcesThatTaintArgs.contains(original))   sourcesThatTaintArgs.add(clone);}  }
class C{  public Integer remove(Integer key){  return wrapValue(_map.remove(unwrapKey(key)));}  }
class C{  public void testCheckFoundWithResultAsFailed(){  LOGGER.debug("check found with result as failed");  initCheckerAndLaunch("src/test/resources/css/test3.css",null,TestSolution.FAILED,".selector");}  }
class C{  private void jbInit() throws Exception {  CompiereColor.setBackground(this);  mainPanel.setLayout(mainLayout);  parameterLayout=new MigLayout("fillx, wrap 4, hidemode 0"," [150:150][250:250][100:100][200:200]");  parameterPanel.setLayout(parameterLayout);  bRefresh.addActionListener(this);  bReset.addActionListener(this);  bZoom.addActionListener(this);  bGenerate.setEnabled(false);  bReset.setEnabled(false);  bGenerate.setText(Msg.getMsg(Env.getCtx(),"Process"));  bReset.setText(Msg.getMsg(Env.getCtx(),"Reset"));  bZoom.setText(Msg.translate(Env.getCtx(),"Fact_Acct_ID"));  bSelectAll.addActionListener(this);  bSelectAll.setText(Msg.getMsg(Env.getCtx(),"SelectAll"));  labelAcctSchema.setText(Msg.translate(Env.getCtx(),"C_AcctSchema_ID"));  labelAccount.setText(Msg.translate(Env.getCtx(),"Account_ID"));  labelBPartner.setText(Msg.translate(Env.getCtx(),"C_BPartner_ID"));  labelDateAcct.setText(Msg.translate(Env.getCtx(),"DateAcct"));  labelDateAcct2.setText("-");  labelProduct.setText(Msg.translate(Env.getCtx(),"M_Product_ID"));  labelOrg.setText(Msg.translate(Env.getCtx(),"AD_Org_ID"));  isReconciled.setText(Msg.translate(Env.getCtx(),"IsReconciled"));  dataStatus.setText(" ");  differenceLabel.setText(Msg.getMsg(Env.getCtx(),"Difference"));  differenceField.setBackground(AdempierePLAF.getFieldBackground_Inactive());  differenceField.setEditable(false);  differenceField.setText("0");  differenceField.setColumns(8);  differenceField.setHorizontalAlignment(SwingConstants.RIGHT);  bGenerate.addActionListener(this);  bCancel.addActionListener(this);  mainPanel.add(parameterPanel,BorderLayout.NORTH);  parameterPanel.add(labelAcctSchema,"");  parameterPanel.add(fieldAcctSchema,"growx");  parameterPanel.add(labelOrg,"");  parameterPanel.add(fieldOrg,"growx");  parameterPanel.add(labelAccount,"");  parameterPanel.add(fieldAccount,"wmax 250");  parameterPanel.add(isReconciled,"skip 1");  parameterPanel.add(labelBPartner,"");  parameterPanel.add(fieldBPartner,"growx");  parameterPanel.add(labelProduct,"");  parameterPanel.add(fieldProduct,"growx");  parameterPanel.add(labelDateAcct,"");  parameterPanel.add(fieldDateAcct,"growx");  parameterPanel.add(labelDateAcct2,"");  parameterPanel.add(fieldDateAcct2,"growx");  parameterPanel.add(bRefresh,"growx");  mainPanel.add(dataStatus,BorderLayout.SOUTH);  mainPanel.add(dataPane,BorderLayout.CENTER);  dataPane.getViewport().add(miniTable,null);  commandPanel.setLayout(commandLayout);  commandLayout.setAlignment(FlowLayout.RIGHT);  commandLayout.setHgap(10);  commandPanel.add(bSelectAll);  commandPanel.add(bZoom,null);  commandPanel.add(differenceLabel,null);  commandPanel.add(differenceField,null);  commandPanel.add(bGenerate,null);  commandPanel.add(bReset,null);  commandPanel.add(bCancel,null);}  }
class C{  public void calcMinMax(int start,int end){  if (mDataSets == null || mDataSets.size() < 1) {    mYMax=0f;    mYMin=0f;  } else {    mLastStart=start;    mLastEnd=end;    mYMin=Float.MAX_VALUE;    mYMax=-Float.MAX_VALUE;    for (int i=0; i < mDataSets.size(); i++) {      mDataSets.get(i).calcMinMax(start,end);      if (mDataSets.get(i).getYMin() < mYMin)       mYMin=mDataSets.get(i).getYMin();      if (mDataSets.get(i).getYMax() > mYMax)       mYMax=mDataSets.get(i).getYMax();    }    if (mYMin == Float.MAX_VALUE) {      mYMin=0.f;      mYMax=0.f;    }    T firstLeft=getFirstLeft();    if (firstLeft != null) {      mLeftAxisMax=firstLeft.getYMax();      mLeftAxisMin=firstLeft.getYMin();      for (      DataSet<?> dataSet : mDataSets) {        if (dataSet.getAxisDependency() == AxisDependency.LEFT) {          if (dataSet.getYMin() < mLeftAxisMin)           mLeftAxisMin=dataSet.getYMin();          if (dataSet.getYMax() > mLeftAxisMax)           mLeftAxisMax=dataSet.getYMax();        }      }    }    T firstRight=getFirstRight();    if (firstRight != null) {      mRightAxisMax=firstRight.getYMax();      mRightAxisMin=firstRight.getYMin();      for (      DataSet<?> dataSet : mDataSets) {        if (dataSet.getAxisDependency() == AxisDependency.RIGHT) {          if (dataSet.getYMin() < mRightAxisMin)           mRightAxisMin=dataSet.getYMin();          if (dataSet.getYMax() > mRightAxisMax)           mRightAxisMax=dataSet.getYMax();        }      }    }    handleEmptyAxis(firstLeft,firstRight);  }}  }
class C{  public PipeConnectionEvent(Object source){  super(source);}  }
class C{  @SuppressWarnings("unchecked") static final <K,V>Segment<K,V> segmentAt(Segment<K,V>[] ss,int j){  long u=(j << SSHIFT) + SBASE;  return ss == null ? null : (Segment<K,V>)UNSAFE.getObjectVolatile(ss,u);}  }
class C{  public void createMissingCaches() throws IgniteCheckedException {  for (  Map.Entry<String,DynamicCacheDescriptor> e : registeredCaches.entrySet()) {    CacheConfiguration ccfg=e.getValue().cacheConfiguration();    if (!caches.containsKey(maskNull(ccfg.getName())) && GridQueryProcessor.isEnabled(ccfg))     dynamicStartCache(null,ccfg.getName(),null,false,true,true).get();  }}  }
class C{  public GSSResult authenticate(String tenantName,String contextId,byte[] gssTicket) throws Exception {  return getService().authenticate(tenantName,contextId,gssTicket,this.getServiceContext());}  }
class C{  public void testSetF25(){  boolean f25=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF25(f25);  jmri.util.JUnitAppender.assertErrorMessage("Can't send F21-F28 since no command station defined");}  }
class C{  public ByteBuffer(){  this(64);}  }
class C{  static PotionType fromName(String name){  for (  PotionTypeTable table : values()) {    if (name.equalsIgnoreCase(table.name))     return table.type;  }  return PotionType.valueOf(name.toUpperCase());}  }
class C{  private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  init(getName());}  }
class C{  private void createSampler(){  this.sampler=glGenSamplers();  glSamplerParameteri(this.sampler,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glSamplerParameteri(this.sampler,GL_TEXTURE_MAG_FILTER,GL_NEAREST);}  }
class C{  public static ContactList blockingGetByUris(Parcelable[] uris){  ContactList list=new ContactList();  if (uris != null && uris.length > 0) {    for (    Parcelable p : uris) {      Uri uri=(Uri)p;      if ("tel".equals(uri.getScheme())) {        Contact contact=Contact.get(uri.getSchemeSpecificPart(),true);        list.add(contact);      }    }    final List<Contact> contacts=Contact.getByPhoneUris(uris);    if (contacts != null) {      list.addAll(contacts);    }  }  return list;}  }
class C{  public static String toString(URL url,Charset encoding) throws IOException {  InputStream inputStream=url.openStream();  try {    return toString(inputStream,encoding);  }  finally {    inputStream.close();  }}  }
class C{  public int addEdge(int s,int t){  throw new UnsupportedOperationException("Changes to graph structure not allowed for spanning trees.");}  }
class C{  LocalVarState(Method m,Block b,Typeref[] initial_frame_state){  this.conservative_verifier_rules=b.is_backwards_branch_target;  this.fs_in=new Typeref[initial_frame_state.length];  if (!this.conservative_verifier_rules) {    System.arraycopy(initial_frame_state,0,this.fs_in,0,initial_frame_state.length);  } else {    for (int i=0; i < m.local_count; i++) {      this.fs_in[i]=initial_frame_state[i].nullable();    }    for (int i=m.local_count + m.max_scope; i < this.fs_in.length; i++) {      this.fs_in[i]=initial_frame_state[i].nullable();    }  }  this.fs_out=new Typeref[initial_frame_state.length];  System.arraycopy(this.fs_in,0,this.fs_out,0,this.fs_in.length);  this.hard_coercions=new Typeref[initial_frame_state.length];  this.m=m;  this.b=b;  Typeref[] saved_fs=null;  if (verbose_mode) {    verboseStatus(b);    StringBuffer verbose_succ=new StringBuffer();    verbose_succ.append("\tsucc: ");    for (    Edge p : b.succ()) {      verbose_succ.append(p);      verbose_succ.append(" ");    }    verboseStatus(verbose_succ);    dumpFrameState(fs_out);    saved_fs=new Typeref[initial_frame_state.length];    System.arraycopy(fs_out,0,saved_fs,0,fs_out.length);  }  for (  Expr e : b.exprs) {    if (verbose_mode)     verboseStatus(formatExprAsAbc(e));switch (e.op) {case OP_getlocal0:case OP_getlocal1:case OP_getlocal2:case OP_getlocal3:{        uses(e.op - OP_getlocal0);        break;      }case OP_getlocal:{      uses(e.imm[0]);      break;    }case OP_setlocal0:case OP_setlocal1:case OP_setlocal2:case OP_setlocal3:{    defines(e.op - OP_setlocal0,e);    break;  }case OP_setlocal:{  defines(e.imm[0],e);  break;}case OP_hasnext2:{uses(e.imm[0]);uses(e.imm[1]);expectsType(e.imm[0],ANY().ref);expectsType(e.imm[1],INT().ref);hard_coercions[e.imm[0]]=ANY().ref;defines(e.imm[0],e);break;}case OP_kill:{setKilled(e.imm[0]);break;}case OP_inclocal:case OP_inclocal_i:case OP_declocal:case OP_declocal_i:{uses(e.imm[0]);break;}case OP_getslot:case OP_setslot:{Expr stem=e.args[0];if (stem.inLocal()) {expectsType(stem.imm[0],m.verifier_types.get(stem));}break;}case OP_nextvalue:case OP_nextname:{break;}default :assert (!e.inLocal());}if (verbose_mode) {for (int i=0; i < fs_out.length; i++) {if (saved_fs[i] != fs_out[i]) {dumpFrameState(fs_out);System.arraycopy(fs_out,0,saved_fs,0,fs_out.length);break;}}}}}  }
class C{  public void sort(){  Map<String,PsiMethod> methods=getMethodsMap();  Map<String,PsiMethod> sortedMethods=null;  LifecycleFactory lifecycleFactory=new LifecycleFactory();  Lifecycle lifecycle=lifecycleFactory.createLifecycle(mPsiClass,methods);  if (lifecycle != null && !methods.isEmpty()) {    sortedMethods=lifecycle.sort();    appendSortedMethods(sortedMethods);    deleteUnsortedLifecycleMethods(sortedMethods.values());  }}  }
class C{  public _ScheduleDays(final String[] flagStrings){  super(flagStrings);}  }
class C{  public static ApexStream<String> fromKafka08(String zookeepers,String topic,Option... opts){  KafkaSinglePortStringInputOperator kafkaSinglePortStringInputOperator=new KafkaSinglePortStringInputOperator();  kafkaSinglePortStringInputOperator.getConsumer().setTopic(topic);  kafkaSinglePortStringInputOperator.getConsumer().setZookeeper(zookeepers);  ApexStreamImpl<String> newStream=new ApexStreamImpl<>();  return newStream.addOperator(kafkaSinglePortStringInputOperator,null,kafkaSinglePortStringInputOperator.outputPort);}  }
class C{  private static Object unwrap(Object object){  if (object instanceof Reflect) {    return ((Reflect)object).get();  }  return object;}  }
class C{  protected final void LONG_DIVIDES(Instruction s,RegisterOperand result,Operand val1,Operand val2,boolean isDiv,boolean signed){  EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(getEDX(),TypeReference.Long),val1)));  EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(getEAX(),TypeReference.Long),val1.copy())));  EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SAR,new RegisterOperand(getEDX(),TypeReference.Long),LC(0x3f))));  if (val2.isLongConstant() || val2.isIntConstant()) {    RegisterOperand temp=regpool.makeTempLong();    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,temp,val2)));    val2=temp.copyRO();  }  EMIT(MIR_Divide.mutate(s,signed ? IA32_IDIV : IA32_DIV,new RegisterOperand(getEDX(),TypeReference.Long),new RegisterOperand(getEAX(),TypeReference.Long),val2,GuardedBinary.getGuard(s)));  if (isDiv) {    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,result.copyD2D(),new RegisterOperand(getEAX(),TypeReference.Long))));  } else {    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,result.copyD2D(),new RegisterOperand(getEDX(),TypeReference.Long))));  }}  }
class C{  private void updateSelection(Projection proj,SVGPoint p1,SVGPoint p2){  DBIDSelection selContext=context.getSelection();  ModifiableDBIDs selection;  if (selContext != null) {    selection=DBIDUtil.newHashSet(selContext.getSelectedIds());  } else {    selection=DBIDUtil.newHashSet();  }  ModifiableHyperBoundingBox ranges;  if (p1 == null || p2 == null) {    LOG.warning("no rect selected: p1: " + p1 + " p2: "+ p2);  } else {    double x1=Math.min(p1.getX(),p2.getX());    double x2=Math.max(p1.getX(),p2.getX());    double y1=Math.max(p1.getY(),p2.getY());    double y2=Math.min(p1.getY(),p2.getY());    int dim=proj.getInputDimensionality();    if (selContext instanceof RangeSelection) {      ranges=((RangeSelection)selContext).getRanges();    } else {      ranges=new ModifiableHyperBoundingBox(dim,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY);    }    updateSelectionRectKoordinates(x1,x2,y1,y2,ranges);    selection.clear();    candidates:     for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {      NumberVector dbTupel=relation.get(iditer);      for (int d=0; d < dim; d++) {        final double min=ranges.getMin(d), max=ranges.getMax(d);        if (max < Double.POSITIVE_INFINITY && min > Double.NEGATIVE_INFINITY) {          if (dbTupel.doubleValue(d) < min || dbTupel.doubleValue(d) > max) {            continue candidates;          }        }      }      selection.add(iditer);    }    context.setSelection(new RangeSelection(selection,ranges));  }}  }
class C{  public OMScalingIcon(double centerLat,double centerLon,int offsetX,int offsetY,Image ii,float baseScale){  super();  setRenderType(OMGraphic.RENDERTYPE_LATLON);  setColorModel(COLORMODEL_IMAGEICON);  lat=centerLat;  lon=centerLon;  setImage(ii);  setX(offsetX);  setY(offsetY);  this.baseScale=baseScale;}  }
class C{  @Override public void actionPerformed(ActionEvent event){  if (verifyMessagePanel == null) {    return;  }  String addressText=null;  if (verifyMessagePanel.getAddressTextArea() != null) {    addressText=verifyMessagePanel.getAddressTextArea().getText();    if (addressText != null) {      addressText=WhitespaceTrimmer.trim(addressText);    }  }  String messageText=null;  if (verifyMessagePanel.getMessageTextArea() != null) {    messageText=verifyMessagePanel.getMessageTextArea().getText();  }  String signatureText=null;  if (verifyMessagePanel.getSignatureTextArea() != null) {    signatureText=verifyMessagePanel.getSignatureTextArea().getText();  }  log.debug("addressText = '" + addressText + "'");  log.debug("messageText = '" + messageText + "'");  log.debug("signatureText = '" + signatureText + "'");  if (addressText == null || "".equals(addressText)) {    verifyMessagePanel.setMessageText1(controller.getLocaliser().getString("verifyMessageAction.noAddress"));    verifyMessagePanel.setMessageText2(" ");    return;  }  if (messageText == null || "".equals(messageText.trim())) {    verifyMessagePanel.setMessageText1(controller.getLocaliser().getString("verifyMessageAction.noMessage"));    verifyMessagePanel.setMessageText2(" ");    return;  }  if (signatureText == null || "".equals(signatureText.trim())) {    verifyMessagePanel.setMessageText1(controller.getLocaliser().getString("verifyMessageAction.noSignature"));    verifyMessagePanel.setMessageText2(" ");    return;  }  try {    Address expectedAddress=new Address(bitcoinController.getModel().getNetworkParameters(),addressText);    ECKey key=ECKey.signedMessageToKey(messageText,signatureText);    Address gotAddress=key.toAddress(bitcoinController.getModel().getNetworkParameters());    if (expectedAddress != null && expectedAddress.equals(gotAddress)) {      log.debug("The message was signed by the specified address");      verifyMessagePanel.setMessageText1(controller.getLocaliser().getString("verifyMessageAction.success"));      verifyMessagePanel.setMessageText2(" ");    } else {      log.debug("The message was NOT signed by the specified address");      verifyMessagePanel.setMessageText1(controller.getLocaliser().getString("verifyMessageAction.failure"));      verifyMessagePanel.setMessageText2(" ");    }  } catch (  WrongNetworkException e) {    logError(e);  }catch (  AddressFormatException e) {    logError(e);  }catch (  SignatureException e) {    logError(e);  }}  }
class C{  protected void registerValidatableTextFieldAttributes(){  addAttributeProcessor(new RestoreLastValidLmlAttribute(),"restore","restoreLastValid");  addAttributeProcessor(new ValidationEnabledLmlAttribute(),"enabled","validate","validationEnabled");}  }
class C{  private ResultPoint correctTopRight(ResultPoint bottomLeft,ResultPoint bottomRight,ResultPoint topLeft,ResultPoint topRight,int dimension){  float corr=distance(bottomLeft,bottomRight) / (float)dimension;  int norm=distance(topLeft,topRight);  float cos=(topRight.getX() - topLeft.getX()) / norm;  float sin=(topRight.getY() - topLeft.getY()) / norm;  ResultPoint c1=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  corr=distance(bottomLeft,topLeft) / (float)dimension;  norm=distance(bottomRight,topRight);  cos=(topRight.getX() - bottomRight.getX()) / norm;  sin=(topRight.getY() - bottomRight.getY()) / norm;  ResultPoint c2=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  if (!isValid(c1)) {    if (isValid(c2)) {      return c2;    }    return null;  }  if (!isValid(c2)) {    return c1;  }  int l1=Math.abs(transitionsBetween(topLeft,c1).getTransitions() - transitionsBetween(bottomRight,c1).getTransitions());  int l2=Math.abs(transitionsBetween(topLeft,c2).getTransitions() - transitionsBetween(bottomRight,c2).getTransitions());  return l1 <= l2 ? c1 : c2;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void showOnMap(Activity activity,double[] latLong){  try {    String uri=String.format(Locale.ENGLISH,"http://maps.google.com/maps?f=q&q=(%f,%f)",latLong[0],latLong[1]);    ComponentName compName=new ComponentName(MAPS_PACKAGE_NAME,MAPS_CLASS_NAME);    Intent mapsIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(uri)).setComponent(compName);    activity.startActivityForResult(mapsIntent,CameraActivity.REQ_CODE_DONT_SWITCH_TO_PREVIEW);  } catch (  ActivityNotFoundException e) {    Log.e(TAG,"GMM activity not found!",e);    String url=String.format(Locale.ENGLISH,"geo:%f,%f",latLong[0],latLong[1]);    try {      Intent mapsIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));      activity.startActivity(mapsIntent);    } catch (    ActivityNotFoundException ex) {      Log.e(TAG,"Map view activity not found!",ex);      RotateTextToast.makeText(activity,activity.getString(R.string.map_activity_not_found_err),Toast.LENGTH_SHORT).show();    }  }}  }
class C{  public Constituent(String label,double score,String viewName,TextAnnotation text,int start,int end){  if (label == null)   label="";  int labelId=text.symtab.getId(label);  if (labelId == -1)   labelId=text.symtab.add(label);  this.label=labelId;  this.constituentScore=score;  this.viewName=viewName;  textAnnotation=text;  this.span=new IntPair(start,end);  int startSpan=this.getStartSpan();  int endSpan=this.getEndSpan();  if (start >= 0) {    assert startSpan >= 0;    assert endSpan >= 0;  }  this.outgoingRelations=new ArrayList<>();  this.incomingRelations=new ArrayList<>();  if (startSpan >= 0) {    startCharOffset=text.getTokenCharacterOffset(startSpan).getFirst();  } else   startCharOffset=-1;  if (endSpan > 0 && endSpan <= text.size()) {    if (endSpan > startSpan)     endCharOffset=text.getTokenCharacterOffset(endSpan - 1).getSecond(); else     endCharOffset=text.getTokenCharacterOffset(endSpan).getSecond();  } else   endCharOffset=0;  assert endCharOffset >= startCharOffset : "End character offset of constituent less than start!\n" + text.getTokenizedText() + "("+ start+ ", "+ end+ "), -> ("+ startCharOffset+ ", "+ endCharOffset+ ")";}  }
class C{  public void handleAnimatedAttributeChanged(AnimatedLiveAttributeValue alav){  if (alav.getNamespaceURI() == null) {    String ln=alav.getLocalName();    if (ln.equals(SVG_CX_ATTRIBUTE) || ln.equals(SVG_CY_ATTRIBUTE) || ln.equals(SVG_RX_ATTRIBUTE)|| ln.equals(SVG_RY_ATTRIBUTE)) {      buildShape(ctx,e,(ShapeNode)node);      handleGeometryChanged();      return;    }  }  super.handleAnimatedAttributeChanged(alav);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  boolean createSnapshot(String snapshotName,boolean async){  NaElement elem=new NaElement("snapshot-create");  elem.addNewChild("volume",name);  elem.addNewChild("snapshot",snapshotName);  elem.addNewChild("async",Boolean.toString(async));  try {    server.invokeElem(elem);  } catch (  Exception e) {    String msg="Failed to create snapshot on volume: " + name;    log.error(msg,e);    throw new NetAppCException(msg,e);  }  return true;}  }
class C{  private static void center(Box box,float axis){  float h=box.getHeight(), total=h + box.getDepth();  box.setShift(-(total / 2 - h) - axis);}  }
class C{  public XlsxSheetContentParser(File xlsxFile,String workbookZipEntryPath,String[] sharedStrings,XlsxNumberFormats numberFormats,XlsxSheetMetaData sheetMetaData,XMLInputFactory factory,Charset encoding) throws XMLStreamException, IOException {  this.xlsxFile=xlsxFile;  this.workbookZipEntryPath=workbookZipEntryPath;  this.sharedStrings=sharedStrings;  this.numberFormats=numberFormats;  this.sheetMetaData=sheetMetaData;  this.encoding=encoding;  this.emptyColumn=new boolean[sheetMetaData.getNumberOfColumns()];  Arrays.fill(emptyColumn,true);  reset(factory);}  }
class C{  @Override public void activateGroupClones(StorageSystem storage,List<URI> clones,TaskCompleter completer){  log.info("activateGroupClones operation START");  try {    modifyGroupClones(storage,clones,SmisConstants.SPLIT_VALUE);    List<Volume> cloneVols=_dbClient.queryObject(Volume.class,clones);    for (    Volume clone : cloneVols) {      clone.setSyncActive(true);      clone.setReplicaState(ReplicationState.SYNCHRONIZED.name());    }    _dbClient.persistObject(cloneVols);    if (completer != null) {      completer.ready(_dbClient);    }  } catch (  Exception e) {    log.error(MODIFY_GROUP_ERROR,e);    completer.error(_dbClient,DeviceControllerException.exceptions.activateVolumeFullCopyFailed(e));  }  log.info("activateGroupClones operation END");}  }
class C{  public static void logTradeOrder(TradeOrder order){  _log.debug("OrderKey: " + +order.getOrderKey() + " ClientId: "+ order.getClientId()+ " PermId: "+ order.getPermId()+ " Action: "+ order.getAction()+ " TotalQuantity: "+ order.getQuantity()+ " OrderType: "+ order.getOrderType()+ " LmtPrice: "+ order.getLimitPrice()+ " AuxPrice: "+ order.getAuxPrice()+ " Tif: "+ order.getTimeInForce()+ " OcaGroup: "+ order.getOcaGroupName()+ " OcaType: "+ order.getOcaType()+ " OrderRef: "+ order.getOrderReference()+ " Transmit: "+ order.getTransmit()+ " DisplaySize: "+ order.getDisplayQuantity()+ " TriggerMethod: "+ order.getTriggerMethod()+ " Hidden: "+ order.getHidden()+ " ParentId: "+ order.getParentId()+ " GoodAfterTime: "+ order.getGoodAfterTime()+ " GoodTillDate: "+ order.getGoodTillTime()+ " OverridePercentageConstraints: "+ order.getOverrideConstraints()+ " AllOrNone: "+ order.getAllOrNothing());}  }
class C{  public void testCase17(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};  byte bBytes[]={27,-15,65,39,100};  int aSign=1;  int bSign=1;  byte rBytes[]={12,-21,73,56,27};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.remainder(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static void doMain(File modelFile,Properties properties,IssueAcceptor issueAcceptor) throws N4JSCompileException {  N4HeadlessCompiler hlc=injectAndSetup(properties);  hlc.compileSingleFile(modelFile,issueAcceptor);}  }
class C{  private VariableReference addPrimitive(TestCase test,PrimitiveStatement<?> old,int position) throws ConstructionFailedException {  logger.debug("Adding primitive");  Statement st=old.clone(test);  return test.addStatement(st,position);}  }
class C{  @GET @Path("/{id}/refresh-matched-pools") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public StoragePoolList refreshMatchedStoragePools(@PathParam("id") URI id){  return refreshMatchedPools(VirtualPool.Type.file,id);}  }
class C{  public void applyPattern(String pattern){  this.pattern=pattern;  if (patternTokens != null) {    patternTokens.clear();    patternTokens=null;  }}  }
class C{  public ClassifierReference(String classifierModuleSpecifier,String classifierName){  this.classifierModuleSpecifier=classifierModuleSpecifier;  this.classifierName=classifierName;  this.uri=null;}  }
class C{  public void writeAsSerializedByteArray(Object v) throws IOException {  if (this.ignoreWrites)   return;  checkIfWritable();  ensureCapacity(5);  if (v instanceof HeapDataOutputStream) {    HeapDataOutputStream other=(HeapDataOutputStream)v;    other.finishWriting();    InternalDataSerializer.writeArrayLength(other.size(),this);    if (this.doNotCopy) {      if (other.chunks != null) {        for (        ByteBuffer bb : other.chunks) {          write(bb);        }      }      write(other.buffer);    } else {      other.sendTo((ByteBufferWriter)this);      other.rewind();    }  } else {    ByteBuffer sizeBuf=this.buffer;    int sizePos=sizeBuf.position();    sizeBuf.position(sizePos + 5);    final int preArraySize=size();    DataSerializer.writeObject(v,this);    int arraySize=size() - preArraySize;    sizeBuf.put(sizePos,InternalDataSerializer.INT_ARRAY_LEN);    sizeBuf.putInt(sizePos + 1,arraySize);  }}  }
class C{  public final String executeStringQuery(String sql,boolean mandatory) throws AdeException {  return SpecialSqlQueries.executeStringQuery(sql,m_connection,mandatory);}  }
class C{  @SuppressWarnings("unchecked") public static <T>ManyAssociationFunction<T> manyAssociation(ManyAssociation<T> association){  return ((ManyAssociationReferenceHandler<T>)Proxy.getInvocationHandler(association)).manyAssociation();}  }
class C{  public void rechazarExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  DocumentoVitalForm frm=(DocumentoVitalForm)form;  getGestionDocumentosVitalesBI(request).rechazarDocumentoVital(frm.getId());  goBackExecuteLogic(mappings,form,request,response);}  }
class C{  public void putValue(String name,Object value){  if (name == null || value == null) {    throw new IllegalArgumentException("name == null || value == null");  }  Object old=values.put(name,value);  if (value instanceof SSLSessionBindingListener) {    ((SSLSessionBindingListener)value).valueBound(new SSLSessionBindingEvent(this,name));  }  if (old instanceof SSLSessionBindingListener) {    ((SSLSessionBindingListener)old).valueUnbound(new SSLSessionBindingEvent(this,name));  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNodeNS03.class,args);}  }
class C{  public void print(Object o) throws IOException {  if (_startLine)   printIndent();  _os.print(o);  _lastCr=false;}  }
class C{  public Status stop(boolean failover){  LOGGER.info("Stopping driver");  Status status=driver.stop(failover);  LOGGER.info("Driver stopped with status: {}",status);  return status;}  }
class C{  private Map<Id<TransitRoute>,List<Id<Link>>> createRoutesNetworkLinksMap(TransitSchedule transitSchedule){  log.info("Start generating transitRouteNetworkLinksMap -- thread = " + threadName);  Map<Id<TransitRoute>,List<Id<Link>>> transitRouteNetworkLinksMap=new HashMap<Id<TransitRoute>,List<Id<Link>>>();  for (  TransitLine transitLine : transitSchedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : transitLine.getRoutes().values()) {      List<Id<Link>> fullLinkIdList=new LinkedList<Id<Link>>();      fullLinkIdList.add(transitRoute.getRoute().getStartLinkId());      fullLinkIdList.addAll(transitRoute.getRoute().getLinkIds());      fullLinkIdList.add(transitRoute.getRoute().getEndLinkId());      transitRouteNetworkLinksMap.put(transitRoute.getId(),fullLinkIdList);    }  }  log.info("Finish generating transitRouteNetworkLinksMap -- thread = " + threadName);  return transitRouteNetworkLinksMap;}  }
class C{  boolean merge(final ClassWriter cw,final Frame frame,final int edge){  boolean changed=false;  int i, s, dim, kind, t;  int nLocal=inputLocals.length;  int nStack=inputStack.length;  if (frame.inputLocals == null) {    frame.inputLocals=new int[nLocal];    changed=true;  }  for (i=0; i < nLocal; ++i) {    if (outputLocals != null && i < outputLocals.length) {      s=outputLocals[i];      if (s == 0) {        t=inputLocals[i];      } else {        dim=s & DIM;        kind=s & KIND;        if (kind == BASE) {          t=s;        } else {          if (kind == LOCAL) {            t=dim + inputLocals[s & VALUE];          } else {            t=dim + inputStack[nStack - (s & VALUE)];          }          if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {            t=TOP;          }        }      }    } else {      t=inputLocals[i];    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputLocals,i);  }  if (edge > 0) {    for (i=0; i < nLocal; ++i) {      t=inputLocals[i];      changed|=merge(cw,t,frame.inputLocals,i);    }    if (frame.inputStack == null) {      frame.inputStack=new int[1];      changed=true;    }    changed|=merge(cw,edge,frame.inputStack,0);    return changed;  }  int nInputStack=inputStack.length + owner.inputStackTop;  if (frame.inputStack == null) {    frame.inputStack=new int[nInputStack + outputStackTop];    changed=true;  }  for (i=0; i < nInputStack; ++i) {    t=inputStack[i];    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,i);  }  for (i=0; i < outputStackTop; ++i) {    s=outputStack[i];    dim=s & DIM;    kind=s & KIND;    if (kind == BASE) {      t=s;    } else {      if (kind == LOCAL) {        t=dim + inputLocals[s & VALUE];      } else {        t=dim + inputStack[nStack - (s & VALUE)];      }      if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {        t=TOP;      }    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,nInputStack + i);  }  return changed;}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  builder.put(k2,v2);  builder.put(k3,v3);  builder.put(k4,v4);  builder.put(k5,v5);  return builder.build();}  }
class C{  protected void trimStackFrames(List stacks){  for (int size=stacks.size(), i=size - 1; i > 0; i--) {    String[] curr=(String[])stacks.get(i);    String[] next=(String[])stacks.get(i - 1);    List currList=new ArrayList(Arrays.asList(curr));    List nextList=new ArrayList(Arrays.asList(next));    ExceptionUtils.removeCommonFrames(currList,nextList);    int trimmed=curr.length - currList.size();    if (trimmed > 0) {      currList.add("\t... " + trimmed + " more");      stacks.set(i,currList.toArray(new String[currList.size()]));    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:31.644 -0500",hash_original_method="8ECE0FD94D831C743ACA34A8ACB9471A",hash_generated_method="E27A767163647451E623E9852DB7A221") public javax.sip.address.Address createAddress(String displayName,javax.sip.address.URI uri){  if (uri == null)   throw new NullPointerException("null  URI");  AddressImpl addressImpl=new AddressImpl();  if (displayName != null)   addressImpl.setDisplayName(displayName);  addressImpl.setURI(uri);  return addressImpl;}  }
class C{  @Override public final boolean onOptionsItemSelected(final MenuItem item){switch (item.getItemId()) {case R.id.menu_stoptracking:    stopTracking();  break;default :break;}return super.onOptionsItemSelected(item);}  }
class C{  public void printPC(DMLProgramCounter pc){  if (pc != null)   System.out.println("  Current program counter at " + pc.toString()); else   System.out.println("DML runtime is currently inactive.");}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  @Override protected void invalidated(){  getTableView().refresh();  if (!getValue())   expandedNodeCache.remove(getBean());}  }
class C{  public Engine newEngine(String engineRoad,String engineNumber){  Engine engine=getByRoadAndNumber(engineRoad,engineNumber);  if (engine == null) {    engine=new Engine(engineRoad,engineNumber);    register(engine);  }  return engine;}  }
class C{  static MyDialogFragment newInstance(int num){  MyDialogFragment f=new MyDialogFragment();  Bundle args=new Bundle();  args.putInt("num",num);  f.setArguments(args);  return f;}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public static void moveFile(String srcFilePath,String destFilePath) throws FileNotFoundException {  if (StringUtils.isEmpty(srcFilePath) || StringUtils.isEmpty(destFilePath)) {    throw new RuntimeException("Both srcFilePath and destFilePath cannot be null.");  }  moveFile(new File(srcFilePath),new File(destFilePath));}  }
class C{  public void test_dataTypeLiterals(){  final Literal a=new LiteralImpl("bigdata",XMLSchema.INT);  assertEquals(a,roundTrip_tuned(a));}  }
class C{  public static StringSet extractValuesFromStringSet(String key,StringSetMap volumeInformation){  try {    StringSet returnSet=new StringSet();    StringSet availableValueSet=volumeInformation.get(key);    if (null != availableValueSet) {      for (      String value : availableValueSet) {        returnSet.add(value);      }    }    return returnSet;  } catch (  Exception e) {    _logger.error(e.getMessage(),e);  }  return null;}  }
class C{  private void sendFeaturesRequest() throws IOException {  OFFeaturesRequest m=factory.buildFeaturesRequest().setXid(handshakeTransactionIds--).build();  write(m);}  }
class C{  @Override public Query newFuzzyQuery(String text,int fuzziness){  if (settings.lowercaseExpandedTerms()) {    text=text.toLowerCase(settings.locale());  }  BooleanQuery.Builder bq=new BooleanQuery.Builder();  bq.setDisableCoord(true);  for (  Map.Entry<String,Float> entry : weights.entrySet()) {    try {      Query q=new FuzzyQuery(new Term(entry.getKey(),text),fuzziness);      q.setBoost(entry.getValue());      bq.add(q,BooleanClause.Occur.SHOULD);    } catch (    RuntimeException e) {      rethrowUnlessLenient(e);    }  }  return super.simplify(bq.build());}  }
class C{  public TransformerConfigurationException(Throwable e){  super(e);}  }
class C{  public boolean canTab(){  List constraints=dockPanel.getConstraints(getChildren());  return DockConstraint.canTab(constraints);}  }
class C{  public static GenericValue create(GenericPK primaryKey){  GenericValue newValue=new GenericValue();  newValue.init(primaryKey);  return newValue;}  }
class C{  public static String readFirstLine(File file,Charset charset) throws IOException {  return asCharSource(file,charset).readFirstLine();}  }
class C{  public HttpsURL(final String userinfo,final String host,final int port,final String path,final String query,final String fragment) throws URIException {  final StringBuffer buff=new StringBuffer();  if (userinfo != null || host != null || port != -1) {    _scheme=DEFAULT_SCHEME;    buff.append(_default_scheme);    buff.append("://");    if (userinfo != null) {      buff.append(userinfo);      buff.append('@');    }    if (host != null) {      buff.append(URIUtil.encode(host,URI.allowed_host));      if (port != -1 || port != DEFAULT_PORT) {        buff.append(':');        buff.append(port);      }    }  }  if (path != null) {    if (scheme != null && !path.startsWith("/")) {      throw new URIException(URIException.PARSING,"abs_path requested");    }    buff.append(URIUtil.encode(path,URI.allowed_abs_path));  }  if (query != null) {    buff.append('?');    buff.append(URIUtil.encode(query,URI.allowed_query));  }  if (fragment != null) {    buff.append('#');    buff.append(URIUtil.encode(fragment,URI.allowed_fragment));  }  parseUriReference(buff.toString(),true);  checkValid();}  }
class C{  private void handleArgumentField(int begin,int end,int argIndex,FieldPosition position,List<FieldContainer> fields){  if (fields != null) {    fields.add(new FieldContainer(begin,end,Field.ARGUMENT,Integer.valueOf(argIndex)));  } else {    if (position != null && position.getFieldAttribute() == Field.ARGUMENT && position.getEndIndex() == 0) {      position.setBeginIndex(begin);      position.setEndIndex(end);    }  }}  }
class C{  @SuppressWarnings("unchecked") private void insertion(int low,int high){  if (high <= low) {    return;  }  for (int t=low; t < high; t++) {    for (int i=t + 1; i <= high; i++) {      if (ar[i].compareTo((E)ar[t]) < 0) {        Comparable<E> c=ar[t];        ar[t]=ar[i];        ar[i]=c;      }    }  }}  }
class C{  public void clearData(){  if (disposed) {    throw new IllegalStateException("disposed profiler");  }  for (  Counter counter : counters.values()) {    counter.clear();  }}  }
class C{  @Override public String toString(){  return (getClass().getName() + "[" + getKeyValue()+ "]");}  }
class C{  public long readLongSkewedGolomb(final long b) throws IOException {  if (b < 0)   throw new IllegalArgumentException("The modulus " + b + " is negative");  if (b == 0)   return 0;  final long M=((1 << readUnary() + 1) - 1) * b;  final long m=(M / (2 * b)) * b;  return m + readLongMinimalBinary(M - m);}  }
class C{  @SkipValidation @Action(value="/modifyProperty-view") public String view(){  LOGGER.debug("Entered into view, BasicProperty: " + basicProp + ", ModelId: "+ getModelId());  if (getModelId() != null) {    propertyModel=(PropertyImpl)getPersistenceService().findByNamedQuery(QUERY_PROPERTYIMPL_BYID,Long.valueOf(getModelId()));    setModifyRsn(propertyModel.getPropertyDetail().getPropertyMutationMaster().getCode());    LOGGER.debug("view: PropertyModel by model id: " + propertyModel);  }  final String currWfState=propertyModel.getState().getValue();  populateFormData(Boolean.TRUE);  corrsAddress=PropertyTaxUtil.getOwnerAddress(propertyModel.getBasicProperty().getPropertyOwnerInfo());  amalgPropIds=new String[10];  if (propertyModel.getPropertyDetail().getFloorDetails().size() > 0)   setFloorDetails(propertyModel);  if (!currWfState.endsWith(WF_STATE_COMMISSIONER_APPROVED)) {    int i=0;    for (    final PropertyStatusValues propstatval : basicProp.getPropertyStatusValuesSet()) {      if (propstatval.getIsActive().equals("W")) {        setPropStatValForView(propstatval);        LOGGER.debug("view: PropertyStatusValues for new modify screen: " + propstatval);      }      LOGGER.debug("view: Amalgamated property ids:");      if (PROP_CREATE_RSN.equals(propstatval.getPropertyStatus().getStatusCode()) && propstatval.getIsActive().equals("Y"))       if (propstatval.getReferenceBasicProperty() != null) {        amalgPropIds[i]=propstatval.getReferenceBasicProperty().getUpicNo();        LOGGER.debug(amalgPropIds[i] + ", ");        i++;      }    }  }  if (currWfState.endsWith(WF_STATE_COMMISSIONER_APPROVED)) {    setIsApprPageReq(Boolean.FALSE);    if (basicProp.getUpicNo() != null && !basicProp.getUpicNo().isEmpty())     setIndexNumber(basicProp.getUpicNo());    int i=0;    for (    final PropertyStatusValues propstatval : basicProp.getPropertyStatusValuesSet()) {      if (propstatval.getIsActive().equals("Y")) {        setPropStatValForView(propstatval);        LOGGER.debug("PropertyStatusValues for view modify screen: " + propstatval);      }      LOGGER.debug("view: Amalgamated property ids:");      if (PROP_CREATE_RSN.equals(propstatval.getPropertyStatus().getStatusCode()) && propstatval.getIsActive().equals("Y"))       if (propstatval.getReferenceBasicProperty() != null) {        amalgPropIds[i]=propstatval.getReferenceBasicProperty().getUpicNo();        LOGGER.debug(amalgPropIds[i] + ", ");        i++;      }    }  }  propertyAddr=basicProp.getAddress();  setModifyRsn(propertyModel.getPropertyDetail().getPropertyMutationMaster().getCode());  setDocNumber(propertyModel.getDocNumber());  LOGGER.debug("view: ModifyReason: " + getModifyRsn());  LOGGER.debug("Exiting from view");  return VIEW;}  }
class C{  public VCardParameter(String value){  this(value,false);}  }
class C{  public static int dip2px(Context context,float dip){  float density=getDensity(context);  return (int)(dip * density + DensityUtils.DOT_FIVE);}  }
class C{  public void testCameraPairwiseScenario24() throws Exception {  genericPairwiseTestCase(Flash.AUTO,Exposure.NONE,WhiteBalance.FLUORESCENT,SceneMode.AUTO,PictureSize.SMALL,Geotagging.ON);}  }
class C{  protected void onDeop(String channel,String sourceNick,String sourceLogin,String sourceHostname,String recipient){}  }
class C{  @Override public void capabilitiesFilterChanged(CapabilitiesFilterChangeEvent e){  if (e.getFilter() == null) {    updateCapabilitiesFilter(null);  } else {    updateCapabilitiesFilter((Capabilities)e.getFilter().clone());  }}  }
class C{  String login(String password) throws LoginFailedException {  if (Arrays.equals(hashPassword(this.passwordHashSalt,password),this.passwordHash)) {    return UUID.randomUUID().toString();  } else {    throw new LoginFailedException();  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"STR");  translateAll(environment,instruction,"STR",instructions);}  }
class C{  private static MyPresenceManager createInstance(Context context,MXSession session){  MyPresenceManager instance=new MyPresenceManager(context,session);  instances.put(session,instance);  return instance;}  }
class C{  protected void parseFontInfo(InStream in,int length2) throws IOException {  int fontId=in.readUI16();  int length=length2;  int nameLength=in.readUI8();  byte[] chars=in.read(nameLength);  String fontName=new String(chars);  int flags=in.readUI8();  length-=4 + nameLength;  boolean wide=(flags & FONT_WIDECHARS) != 0;  int[] codes=new int[wide ? (length / 2) : length];  for (int i=0; i < codes.length; i++) {    codes[i]=wide ? in.readUI16() : in.readUI8();  }  tagtypes.tagDefineFontInfo(fontId,fontName,flags,codes);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.SKILL_REF__REF:    return ref != null;}return super.eIsSet(featureID);}  }
class C{  private OptionScanNode createTree(List<OptionScanNode> treeNodes,int nodeType){  if (treeNodes == null || treeNodes.isEmpty()) {    return null;  } else   if (treeNodes.size() == 1) {    return treeNodes.get(0);  } else {    List<OptionScanNode> otherChildren=treeNodes.subList(2,treeNodes.size());    if (nodeType == CONTEXT_MENU_NODE) {      return new ContextMenuNode((ContextMenuItem)treeNodes.get(0),(ContextMenuItem)treeNodes.get(1),otherChildren.toArray(new ContextMenuItem[otherChildren.size()]));    } else     if (nodeType == OPTION_SCAN_SELECTION_NODE) {      return new OptionScanSelectionNode(treeNodes.get(0),treeNodes.get(1),otherChildren.toArray(new OptionScanNode[otherChildren.size()]));    }    return null;  }}  }
class C{  public static void close(){  try {    log.info("Closing AnalysisCellBasedAccessibilityCSVWriterV2 ...");    assert (AnalysisCellBasedAccessibilityCSVWriterV2.accessibilityDataWriter != null);    accessibilityDataWriter.flush();    accessibilityDataWriter.close();    log.info("... done!");  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public boolean hasAdditionalText(){  return mAdditionalText != null;}  }
class C{  public void clear(){  mMap.clear();}  }
class C{  protected void onDayTapped(Time day){  day.hour=mSelectedDay.hour;  day.minute=mSelectedDay.minute;  day.second=mSelectedDay.second;  setSelectedDay(day);}  }
class C{  public PostscriptWriter(JComponent c,File f){  super(c,f);}  }
class C{  public int truePositives(){  int tp=0;  for (int i=0; i < confusion.length; i++) {    tp+=truePositives(i);  }  return tp;}  }
class C{  public final void rotY(double angle){  double sinAngle, cosAngle;  sinAngle=Math.sin(angle);  cosAngle=Math.cos(angle);  this.m00=cosAngle;  this.m01=0.0;  this.m02=sinAngle;  this.m10=0.0;  this.m11=1.0;  this.m12=0.0;  this.m20=-sinAngle;  this.m21=0.0;  this.m22=cosAngle;}  }
class C{  private void storeSendDetails(final String topic,final MqttMessage msg,final IMqttDeliveryToken messageToken,final String invocationContext,final String activityToken){  savedTopics.put(messageToken,topic);  savedSentMessages.put(messageToken,msg);  savedActivityTokens.put(messageToken,activityToken);  savedInvocationContexts.put(messageToken,invocationContext);}  }
class C{  public static boolean requestRoot(){  d("(requestRoot) Requesting root permission...");  try {    Process p=Runtime.getRuntime().exec("su");    Thread.sleep(20);    p.destroy();    d("(requestRoot) Done!");    return true;  } catch (  IOException ioex) {    return false;  }catch (  Exception ex) {    return false;  }}  }
class C{  public static char[] encode(final byte[] data,final boolean toLowerCase){  return encode(data,toLowerCase ? DIGITS_LOWER : DIGITS_UPPER);}  }
class C{  public void search(String keyword){  execute(keyword);}  }
class C{  public Map<String,String> merge(Map<String,String> curProps,Map<String,String> newProps) throws IOException {  Map<String,String> props=new HashMap<>(newProps);  for (  Map.Entry<String,String> e : curProps.entrySet()) {    String name=e.getKey();    String curValue=e.getValue();    if (props.containsKey(name)) {      props.put(name,curValue);    }  }  return props;}  }
class C{  public static String formatDate(Date date){  SimpleDateFormat dateFormat=new SimpleDateFormat(DATE_TIME,Locale.getDefault());  return dateFormat.format(date);}  }
class C{  public void testPassiveJoinEvent() throws Throwable {  testJoinEvent(Member.Type.PASSIVE);}  }
class C{  public TeXParser(String parseString,TeXFormula formula){  this(parseString,formula,true);}  }
class C{  public void close(){synchronized (mDiskCacheLock) {    if (mDiskLruCache != null) {      try {        if (!mDiskLruCache.isClosed()) {          mDiskLruCache.close();          mDiskLruCache=null;          if (BuildConfig.DEBUG) {            Log.d(TAG,"Disk cache closed");          }        }      } catch (      IOException e) {        Log.e(TAG,"close - " + e);      }    }  }}  }
class C{  private void decodeEndRule(){  useDaylight=(startDay != 0) && (endDay != 0);  if (endDay != 0) {    if (endMonth < Calendar.JANUARY || endMonth > Calendar.DECEMBER) {      throw new IllegalArgumentException("Illegal end month " + endMonth);    }    if (endTime < 0 || endTime > millisPerDay) {      throw new IllegalArgumentException("Illegal end time " + endTime);    }    if (endDayOfWeek == 0) {      endMode=DOM_MODE;    } else {      if (endDayOfWeek > 0) {        endMode=DOW_IN_MONTH_MODE;      } else {        endDayOfWeek=-endDayOfWeek;        if (endDay > 0) {          endMode=DOW_GE_DOM_MODE;        } else {          endDay=-endDay;          endMode=DOW_LE_DOM_MODE;        }      }      if (endDayOfWeek > Calendar.SATURDAY) {        throw new IllegalArgumentException("Illegal end day of week " + endDayOfWeek);      }    }    if (endMode == DOW_IN_MONTH_MODE) {      if (endDay < -5 || endDay > 5) {        throw new IllegalArgumentException("Illegal end day of week in month " + endDay);      }    } else     if (endDay < 1 || endDay > staticMonthLength[endMonth]) {      throw new IllegalArgumentException("Illegal end day " + endDay);    }  }}  }
class C{  public final void writeFloat(float v){  if (this.ignoreWrites)   return;  checkIfWritable();  ensureCapacity(4);  buffer.putFloat(v);}  }
class C{  public static String padString(String s,int fieldSize){  StringBuffer buf=new StringBuffer(s);  while (buf.length() < fieldSize) {    buf.append(" ");  }  return buf.toString();}  }
class C{  @Override public void fatalError(SAXParseException ex) throws SAXException {  throw ex;}  }
class C{  public void restoreFragments(Activity activity){  StartMenuFragment foundStartMenuFragment=(StartMenuFragment)activity.getFragmentManager().findFragmentByTag(START_MENU_TAG);  if (foundStartMenuFragment != null) {    mStartMenuFragment=foundStartMenuFragment;  } else {    mStartMenuFragment=new StartMenuFragment();  }  MissionSelectionFragment foundMissionSelectionFragment=(MissionSelectionFragment)activity.getFragmentManager().findFragmentByTag(LIST_OF_MISSIONS_TAG);  if (foundMissionSelectionFragment != null) {    mMissionSelectionFragment=foundMissionSelectionFragment;  } else {    mMissionSelectionFragment=new MissionSelectionFragment();  }  RunSpecificationSelectionFragment foundRunSpecificationSelectionFragment=(RunSpecificationSelectionFragment)activity.getFragmentManager().findFragmentByTag(RUN_SPECIFICATIONS_TAG);  if (foundRunSpecificationSelectionFragment != null) {    mRunSpecificationsFragment=foundRunSpecificationSelectionFragment;  } else {    mRunSpecificationsFragment=new RunSpecificationSelectionFragment();  }  MusicSelectionFragment foundMusicSelectionFragment=(MusicSelectionFragment)activity.getFragmentManager().findFragmentByTag(MUSIC_SELECTION_TAG);  if (foundMissionSelectionFragment != null) {    mMusicSelectionFragment=foundMusicSelectionFragment;  } else {    mMusicSelectionFragment=new MusicSelectionFragment();  }  EndSummaryFragment foundEndSummaryFragment=(EndSummaryFragment)activity.getFragmentManager().findFragmentByTag(END_SUMMARY_TAG);  if (foundEndSummaryFragment != null) {    mEndSummaryFragment=foundEndSummaryFragment;  } else {    mEndSummaryFragment=new EndSummaryFragment();  }  FitnessDataDisplayFragment foundFitnessDataDisplayFragment=(FitnessDataDisplayFragment)activity.getFragmentManager().findFragmentByTag(FITNESS_DATA_DISPLAY_TAG);  if (foundFitnessDataDisplayFragment != null) {    mFitnessDataDisplayFragment=foundFitnessDataDisplayFragment;  } else {    mFitnessDataDisplayFragment=new FitnessDataDisplayFragment();  }}  }
class C{  public Transaction(NetworkParameters params,byte[] payloadBytes) throws ProtocolException {  super(params,payloadBytes,0);}  }
class C{  public boolean rewrite(){  return rewrite;}  }
class C{  public void addEntry(RemoveAllEntryData removeAllEntry){  this.removeAllData[this.removeAllDataSize]=removeAllEntry;  this.removeAllDataSize+=1;}  }
class C{  public ParallelTask(){  this.setTaskId(generateTaskId());  this.responsedNum=0;  this.requestNum=0;  this.state=ParallelTaskState.WAITING;  this.config=new ParallelTaskConfig();}  }
class C{  public String sqlObject_createTable(String sourceVendorName,String targetVendorName,String catalogName,String schemaName,String tableName,ArrayList<String> columnNames,ArrayList<String> columnTypes,ArrayList<Integer> columnSizes,ArrayList<Integer> columnScales,ArrayList<Boolean> columnNullables,ArrayList<String> columnDefaults){  tableName=normalizeIdentifier(targetVendorName,tableName);  ArrayList<String> normalizedColumnNames=new ArrayList<String>();  ArrayList<String> translatedColumnTypes=new ArrayList<String>();  ArrayList<String> translatedColumnDefaults=new ArrayList<String>();  for (int i=0; i < columnNames.size(); i++) {    normalizedColumnNames.add(normalizeColumnName(targetVendorName,columnNames.get(i)));    translatedColumnTypes.add(translateDataType(sourceVendorName,targetVendorName,columnTypes.get(i),columnSizes.get(i),columnScales.get(i)));    translatedColumnDefaults.add(translateExpression(sourceVendorName,targetVendorName,columnDefaults.get(i)));  }  return m_interfaces.get(getDBVendorID(targetVendorName)).sqlObject_createTable(catalogName,schemaName,tableName,normalizedColumnNames,translatedColumnTypes,columnNullables,translatedColumnDefaults);}  }
class C{  public KMLSurfacePolygonImpl(KMLTraversalContext tc,KMLPlacemark placemark,KMLAbstractGeometry geom){  if (tc == null) {    String msg=Logging.getMessage("nullValue.TraversalContextIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (placemark == null) {    String msg=Logging.getMessage("nullValue.ParentIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.parent=placemark;  KMLPolygon polygon=(KMLPolygon)geom;  this.setPathType(AVKey.LINEAR);  KMLLinearRing outerBoundary=polygon.getOuterBoundary();  if (outerBoundary != null) {    Position.PositionList coords=outerBoundary.getCoordinates();    if (coords != null && coords.list != null)     this.setOuterBoundary(outerBoundary.getCoordinates().list);  }  Iterable<? extends KMLLinearRing> innerBoundaries=polygon.getInnerBoundaries();  if (innerBoundaries != null) {    for (    KMLLinearRing ring : innerBoundaries) {      Position.PositionList coords=ring.getCoordinates();      if (coords != null && coords.list != null)       this.addInnerBoundary(ring.getCoordinates().list);    }  }  if (placemark.getName() != null)   this.setValue(AVKey.DISPLAY_NAME,placemark.getName());  if (placemark.getDescription() != null)   this.setValue(AVKey.DESCRIPTION,placemark.getDescription());  if (placemark.getSnippetText() != null)   this.setValue(AVKey.SHORT_DESCRIPTION,placemark.getSnippetText());  this.setValue(AVKey.CONTEXT,this.parent);}  }
class C{  private void analize(){  StringTokenizer tokenizer2=new StringTokenizer(tokenizer.nextToken(),",");  String nextToken=tokenizer2.nextToken();  title=nextToken.substring(1,nextToken.length() - 1);  l=Integer.parseInt(tokenizer2.nextToken());  t=Integer.parseInt(tokenizer2.nextToken());  r=Integer.parseInt(tokenizer2.nextToken());  b=Integer.parseInt(tokenizer2.nextToken());  numPages=Integer.parseInt(tokenizer2.nextToken());  FPageDef pageDef=null;  for (int i=0; i < numPages; i++) {    pageDef=new FPageDef(tokenizer);    pagedefs.put(new Integer(i),pageDef);  }}  }
class C{  public Element create(String prefix,Document doc){  return new XBLOMImportElement(prefix,(AbstractDocument)doc);}  }
class C{  protected void dispatchSVGResizeEvent(){  if (bridgeContext.isSVG12()) {    dispatchSVGDocEvent("resize");  } else {    dispatchSVGDocEvent("SVGResize");  }}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  private Bookmarks(){}  }
class C{  public DeterministicHierarchy(DeterministicKey rootKey){  putKey(rootKey);  rootPath=rootKey.getPath();}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  getMenuInflater().inflate(R.menu.video_list,menu);  return true;}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  double[] returnedDist=null;  if (m_Attribute > -1) {    if (instance.isMissing(m_Attribute)) {      returnedDist=new double[m_Info.numClasses()];      for (int i=0; i < m_Successors.length; i++) {        double[] help=m_Successors[i].distributionForInstance(instance);        if (help != null) {          for (int j=0; j < help.length; j++) {            returnedDist[j]+=m_Prop[i] * help[j];          }        }      }    } else     if (m_Info.attribute(m_Attribute).isNominal()) {      returnedDist=m_Successors[(int)instance.value(m_Attribute)].distributionForInstance(instance);    } else {      if (instance.value(m_Attribute) < m_SplitPoint) {        returnedDist=m_Successors[0].distributionForInstance(instance);      } else {        returnedDist=m_Successors[1].distributionForInstance(instance);      }    }  }  if ((m_Attribute == -1) || (returnedDist == null)) {    if (m_ClassDistribution == null) {      if (getAllowUnclassifiedInstances()) {        double[] result=new double[m_Info.numClasses()];        if (m_Info.classAttribute().isNumeric()) {          result[0]=Utils.missingValue();        }        return result;      } else {        return null;      }    }    double[] normalizedDistribution=m_ClassDistribution.clone();    if (m_Info.classAttribute().isNominal()) {      Utils.normalize(normalizedDistribution);    }    return normalizedDistribution;  } else {    return returnedDist;  }}  }
class C{  public void killNotification(){  mService.stopForeground(true);  mNotification=null;}  }
class C{  public void reset(){  super.reset();  sendCommand(CMD.RESET,0);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public synchronized void updateObject(int columnIndex,Object x,int scale) throws SQLException {  updateObjectInternal(columnIndex,x,null,scale);}  }
class C{  public boolean isEmoteIgnored(Emoticon emote){  return ignoredEmotes.contains(emote.code);}  }
class C{  public ChooseLocationDialog(java.awt.Frame parent,boolean modal){  this(parent,modal,null,null);}  }
class C{  public final void makeMove(Move move,UndoInfo ui){  ui.capturedPiece=squares[move.to];  ui.castleMask=castleMask;  ui.epSquare=epSquare;  ui.halfMoveClock=halfMoveClock;  boolean wtm=whiteMove;  int p=squares[move.from];  int capP=squares[move.to];  boolean nullMove=(move.from == 0) && (move.to == 0);  if (nullMove || (capP != Piece.EMPTY) || (p == (wtm ? Piece.WPAWN : Piece.BPAWN))) {    halfMoveClock=0;  } else {    halfMoveClock++;  }  if (!wtm) {    fullMoveCounter++;  }  int king=wtm ? Piece.WKING : Piece.BKING;  int k0=move.from;  if (p == king) {    if (move.to == k0 + 2) {      setPiece(k0 + 1,squares[k0 + 3]);      setPiece(k0 + 3,Piece.EMPTY);    } else     if (move.to == k0 - 2) {      setPiece(k0 - 1,squares[k0 - 4]);      setPiece(k0 - 4,Piece.EMPTY);    }    if (wtm) {      setCastleMask(castleMask & ~(1 << Position.A1_CASTLE));      setCastleMask(castleMask & ~(1 << Position.H1_CASTLE));    } else {      setCastleMask(castleMask & ~(1 << Position.A8_CASTLE));      setCastleMask(castleMask & ~(1 << Position.H8_CASTLE));    }  }  if (!nullMove) {    int rook=wtm ? Piece.WROOK : Piece.BROOK;    if (p == rook) {      removeCastleRights(move.from);    }    int oRook=wtm ? Piece.BROOK : Piece.WROOK;    if (capP == oRook) {      removeCastleRights(move.to);    }  }  int prevEpSquare=epSquare;  setEpSquare(-1);  if (p == Piece.WPAWN) {    if (move.to - move.from == 2 * 8) {      int x=Position.getX(move.to);      if (((x > 0) && (squares[move.to - 1] == Piece.BPAWN)) || ((x < 7) && (squares[move.to + 1] == Piece.BPAWN))) {        setEpSquare(move.from + 8);      }    } else     if (move.to == prevEpSquare) {      setPiece(move.to - 8,Piece.EMPTY);    }  } else   if (p == Piece.BPAWN) {    if (move.to - move.from == -2 * 8) {      int x=Position.getX(move.to);      if (((x > 0) && (squares[move.to - 1] == Piece.WPAWN)) || ((x < 7) && (squares[move.to + 1] == Piece.WPAWN))) {        setEpSquare(move.from - 8);      }    } else     if (move.to == prevEpSquare) {      setPiece(move.to + 8,Piece.EMPTY);    }  }  setPiece(move.from,Piece.EMPTY);  if (move.promoteTo != Piece.EMPTY) {    setPiece(move.to,move.promoteTo);  } else {    setPiece(move.to,p);  }  setWhiteMove(!wtm);}  }
class C{  public static <T>void acceptChildren(T visitor,Iterable<? extends IVisitable<T>> children){  if (children == null)   return;  for (  IVisitable<T> child : children) {    acceptChildren(visitor,child);  }}  }
class C{  private void notifyFailure(final UserActionAttachment uaa){  getSoundChannel().playSoundForAll(SoundPath.CLIP_USER_ACTION_FAILURE,m_player);  final String transcriptText=m_bridge.getPlayerID().getName() + " fails on action: " + MyFormatter.attachmentNameToText(uaa.getName());  m_bridge.getHistoryWriter().addChildToEvent(transcriptText);  sendNotification(UserActionText.getInstance().getNotificationFailure(uaa.getText()));  notifyOtherPlayers(uaa,UserActionText.getInstance().getNotificationFailureOthers(uaa.getText()));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean match(Object o1,Object o2){  if (key1 != null) {    if (!key1.equals(o1)) {      return false;    }  } else   if (o1 != null) {    return false;  }  if (key2 != null) {    return key2.equals(o2);  }  return o2 == null;}  }
class C{  public String toString(){  return _displayName;}  }
class C{  StringArraySetting(Properties defaultProps,Properties props,String key,String[] defaultValue){  super(defaultProps,props,key,encode(defaultValue));}  }
class C{  public ColorTrackImageProducer(int w,int h,int trackBuffer,boolean isHorizontal){  super(w,h,null,0,w);  pixels=new int[w * h];  this.w=w;  this.h=h;  this.trackBuffer=((trackBuffer & 1) == 0) ? trackBuffer : trackBuffer - 1;  this.isHorizontal=isHorizontal;  newPixels(pixels,new DirectColorModel(24,0x00ff0000,0x0000ff00,0x000000ff),0,w);  setAnimated(true);}  }
class C{  static boolean isToplevelWindow(long window){  if (XToolkit.windowToXWindow(window) instanceof XDecoratedPeer) {    return true;  }  XToolkit.awtLock();  try {    WindowPropertyGetter wpg=new WindowPropertyGetter(window,XWM.XA_WM_STATE,0,1,false,XWM.XA_WM_STATE);    try {      wpg.execute(XErrorHandler.IgnoreBadWindowHandler.getInstance());      if (wpg.getActualType() == XWM.XA_WM_STATE.getAtom()) {        return true;      }    }  finally {      wpg.dispose();    }    return false;  }  finally {    XToolkit.awtUnlock();  }}  }
class C{  public String RM2Code(String mac){  JsonObject out=broadlinkExecuteCommand(BroadlinkConstants.CMD_RM2_CODE_ID,BroadlinkConstants.CMD_RM2_CODE,mac);  int code=out.get(BroadlinkConstants.CODE).getAsInt();  if (0 != code)   return null;  String data=out.get("data").getAsString();  Log.e("RM2StudyCode",data);  return data;}  }
class C{  public String useShortIdentifiersTipText(){  return "Whether to use short identifiers for the merged values.";}  }
class C{  public Object clone() throws CloneNotSupportedException {  return copy();}  }
class C{  public DataBufferUShort(int size,int numBanks){  super(STABLE,TYPE_USHORT,size,numBanks);  bankdata=new short[numBanks][];  for (int i=0; i < numBanks; i++) {    bankdata[i]=new short[size];  }  data=bankdata[0];}  }
class C{  public float sigmoid(float input){  float val=(float)(1 / (1 + Math.exp(-input)));  return val;}  }
class C{  public X509Certificate generateX509Certificate(PrivateKey key,SecureRandom random) throws SecurityException, SignatureException, InvalidKeyException {  try {    return generateX509Certificate(key,"BC",random);  } catch (  NoSuchProviderException e) {    throw new SecurityException("BC provider not installed!");  }}  }
class C{  protected TypedPosition findClosestPosition(int offset){  try {    int index=fDocument.computeIndexInCategory(fPositionCategory,offset);    Position[] category=getPositions();    if (category.length == 0)     return null;    if (index < category.length) {      if (offset == category[index].offset)       return (TypedPosition)category[index];    }    if (index > 0)     index--;    return (TypedPosition)category[index];  } catch (  BadPositionCategoryException x) {  }catch (  BadLocationException x) {  }  return null;}  }
class C{  private int indexOf(int c){  int start=0;  int end=intervals.size() - 1;  while (start <= end) {    int check=(start + end) / 2;    Interval i=intervals.get(check);    if (start == end)     return i.contains(c) ? start : -1;    if (c < i.start) {      end=check - 1;      continue;    }    if (c > i.end) {      start=check + 1;      continue;    }    return check;  }  return -1;}  }
class C{  public void acquire() throws InterruptedException {  Counter.acquire(1);}  }
class C{  public String toString(){  return getValue().replace('$','.') + ".class";}  }
class C{  public void initOptions(){  _playerField.setText(URLHandlerSettings.AUDIO_PLAYER.getValue());}  }
class C{  public void computeJobExecute(long jobPtr,int cancel,long memPtr){  enter();  try {    PlatformCallbackUtils.computeJobExecute(envPtr,jobPtr,cancel,memPtr);  }  finally {    leave();  }}  }
class C{  public ReflectiveOperationException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override @SuppressWarnings("unchecked") HashMap.Entry<K,V>[] newElementArray(int s){  return new LinkedHashMapEntry[s];}  }
class C{  static public BindableRockerModel template(String templatePath){  RockerModel model=RockerRuntime.getInstance().getBootstrap().model(templatePath);  return new BindableRockerModel(templatePath,model.getClass().getCanonicalName(),model);}  }
class C{  MultistepExprHolder(ExpressionOwner exprOwner,int stepCount,MultistepExprHolder next){  m_exprOwner=exprOwner;  assertion(null != m_exprOwner,"exprOwner can not be null!");  m_stepCount=stepCount;  m_next=next;}  }
class C{  private final void throwException2(int index) throws IndexOutOfBoundsException {  throw new IndexOutOfBoundsException("Index " + index + ", not in range [0-"+ size+ "]");}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.CONSTRAINT_EXPR___NEGATIVE_CONSTRAINT_1:    return negativeConstraint_1 != null && !negativeConstraint_1.isEmpty();case UmplePackage.CONSTRAINT_EXPR___STRING_EXPR_1:  return stringExpr_1 != null && !stringExpr_1.isEmpty();case UmplePackage.CONSTRAINT_EXPR___BOOL_EXPR_1:return boolExpr_1 != null && !boolExpr_1.isEmpty();case UmplePackage.CONSTRAINT_EXPR___GEN_EXPR_1:return genExpr_1 != null && !genExpr_1.isEmpty();case UmplePackage.CONSTRAINT_EXPR___NUM_EXPR_1:return numExpr_1 != null && !numExpr_1.isEmpty();case UmplePackage.CONSTRAINT_EXPR___LONE_BOOLEAN_1:return LONE_BOOLEAN_1_EDEFAULT == null ? loneBoolean_1 != null : !LONE_BOOLEAN_1_EDEFAULT.equals(loneBoolean_1);case UmplePackage.CONSTRAINT_EXPR___ANONYMOUS_CONSTRAINT_EXPR_11:return anonymous_constraintExpr_1_1 != null && !anonymous_constraintExpr_1_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public Document read(File file) throws DocumentException, IOException, XmlPullParserException {  String systemID=file.getAbsolutePath();  return read(new BufferedReader(new FileReader(file)),systemID);}  }
class C{  private DSSASN1Utils(){}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  protected BaseEntry(){  state=new EntryState();}  }
class C{  @Override public void prepare(){  String shortName=entity.getShortName();  Font font=new Font("SansSerif",Font.PLAIN,10);  Rectangle tempRect=new Rectangle(47,55,bv.getFontMetrics(font).stringWidth(shortName) + 1,bv.getFontMetrics(font).getAscent());  image=ImageUtil.createAcceleratedImage(bounds.width,bounds.height);  Graphics graph=image.getGraphics();  Image wreck=bv.tileManager.wreckMarkerFor(entity,-1);  if (null != wreck) {    graph.drawImage(wreck,0,0,this);  }  if ((secondaryPos == -1) && GUIPreferences.getInstance().getBoolean(GUIPreferences.ADVANCED_DRAW_ENTITY_LABEL)) {    Color text=Color.lightGray;    Color bkgd=Color.darkGray;    Color bord=Color.black;    graph.setFont(font);    graph.setColor(bord);    graph.fillRect(tempRect.x,tempRect.y,tempRect.width,tempRect.height);    tempRect.translate(-1,-1);    graph.setColor(bkgd);    graph.fillRect(tempRect.x,tempRect.y,tempRect.width,tempRect.height);    graph.setColor(text);    graph.drawString(shortName,tempRect.x + 1,(tempRect.y + tempRect.height) - 1);  }  image=bv.getScaledImage(image,false);  graph.dispose();}  }
class C{  public FunctionExpression createFunctionExpression(){  FunctionExpressionImpl functionExpression=new FunctionExpressionImpl();  return functionExpression;}  }
class C{  protected boolean writeXMLType(Output out,Object xml){  if (xml instanceof Document) {    writeDocument(out,(Document)xml);  } else {    return false;  }  return true;}  }
class C{  public void onLoad(){  this.world.addTileEntities(this.tileEntityMap.values());  this.world.loadEntities(this.entities.getEntities());  this.isCubeLoaded=true;}  }
class C{  public double calculateValue(double log){  return Math.pow(this.base,log);}  }
class C{  public Matrix transpose(){  Matrix X=new Matrix(n,m);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[j][i]=A[i][j];    }  }  return X;}  }
class C{  public void randomizeRow(int nodeIndex,int rowIndex){  final int size=getNumColumns(nodeIndex);  setNextRowTotal(getRowPseudocount(nodeIndex,rowIndex));  pseudocounts[nodeIndex][rowIndex]=getRandomPseudocounts(size);}  }
class C{  public static void write(String filename,Instances data) throws Exception {  DataSink sink;  sink=new DataSink(filename);  sink.write(data);}  }
class C{  private boolean init(URL policy,PolicyInfo newInfo){  boolean success=false;  PolicyParser pp=new PolicyParser(expandProperties);  InputStreamReader isr=null;  try {    if (notUtf8) {      isr=new InputStreamReader(PolicyUtil.getInputStream(policy));    } else {      isr=new InputStreamReader(PolicyUtil.getInputStream(policy),"UTF-8");    }    pp.read(isr);    KeyStore keyStore=null;    try {      keyStore=PolicyUtil.getKeyStore(policy,pp.getKeyStoreUrl(),pp.getKeyStoreType(),pp.getKeyStoreProvider(),pp.getStorePassURL(),debug);    } catch (    Exception e) {      if (debug != null) {        e.printStackTrace();      }    }    Enumeration<PolicyParser.GrantEntry> enum_=pp.grantElements();    while (enum_.hasMoreElements()) {      PolicyParser.GrantEntry ge=enum_.nextElement();      addGrantEntry(ge,keyStore,newInfo);    }  } catch (  PolicyParser.ParsingException pe) {    MessageFormat form=new MessageFormat(ResourcesMgr.getString(POLICY + ".error.parsing.policy.message"));    Object[] source={policy,pe.getLocalizedMessage()};    System.err.println(form.format(source));    if (debug != null)     pe.printStackTrace();  }catch (  Exception e) {    if (debug != null) {      debug.println("error parsing " + policy);      debug.println(e.toString());      e.printStackTrace();    }  } finally {    if (isr != null) {      try {        isr.close();        success=true;      } catch (      IOException e) {      }    } else {      success=true;    }  }  return success;}  }
class C{  public void addColumn(String name,Class type){  throw new UnsupportedOperationException();}  }
class C{  public String parse(List<String> args,Map<String,String> properties){  String resultString=null;  TreeMap<String,String[]> optmap=optionMap;  ListIterator<String> argp=args.listIterator();  ListIterator<String> pbp=new ArrayList<String>().listIterator();  doArgs:   for (; ; ) {    String arg;    if (pbp.hasPrevious()) {      arg=pbp.previous();      pbp.remove();    } else     if (argp.hasNext()) {      arg=argp.next();    } else {      break doArgs;    }    tryOpt:     for (int optlen=arg.length(); ; optlen--) {      String opt;      findOpt:       for (; ; ) {        opt=arg.substring(0,optlen);        if (optmap.containsKey(opt)) {          break findOpt;        }        if (optlen == 0) {          break tryOpt;        }        SortedMap<String,String[]> pfxmap=optmap.headMap(opt);        int len=pfxmap.isEmpty() ? 0 : pfxmap.lastKey().length();        optlen=Math.min(len,optlen - 1);        opt=arg.substring(0,optlen);      }      opt=opt.intern();      assert (arg.startsWith(opt));      assert (opt.length() == optlen);      String val=arg.substring(optlen);      boolean didAction=false;      boolean isError=false;      int pbpMark=pbp.nextIndex();      String[] specs=optmap.get(opt);      eachSpec:       for (      String spec : specs) {        if (spec.length() == 0) {          continue eachSpec;        }        if (spec.startsWith("#")) {          break eachSpec;        }        int sidx=0;        char specop=spec.charAt(sidx++);        boolean ok;switch (specop) {case '+':          ok=(val.length() != 0);        specop=spec.charAt(sidx++);      break;case '*':    ok=true;  specop=spec.charAt(sidx++);break;default :ok=(val.length() == 0);break;}if (!ok) {continue eachSpec;}String specarg=spec.substring(sidx);switch (specop) {case '.':resultString=(specarg.length() != 0) ? specarg.intern() : opt;break doArgs;case '?':resultString=(specarg.length() != 0) ? specarg.intern() : arg;isError=true;break eachSpec;case '@':opt=specarg.intern();break;case '>':pbp.add(specarg + val);val="";break;case '!':String negopt=(specarg.length() != 0) ? specarg.intern() : opt;properties.remove(negopt);properties.put(negopt,null);didAction=true;break;case '$':String boolval;if (specarg.length() != 0) {boolval=specarg;} else {String old=properties.get(opt);if (old == null || old.length() == 0) {boolval="1";} else {boolval="" + (1 + Integer.parseInt(old));}}properties.put(opt,boolval);didAction=true;break;case '=':case '&':boolean append=(specop == '&');String strval;if (pbp.hasPrevious()) {strval=pbp.previous();pbp.remove();} else if (argp.hasNext()) {strval=argp.next();} else {resultString=arg + " ?";isError=true;break eachSpec;}if (append) {String old=properties.get(opt);if (old != null) {String delim=specarg;if (delim.length() == 0) {delim=" ";}strval=old + specarg + strval;}}properties.put(opt,strval);didAction=true;break;default :throw new RuntimeException("bad spec for " + opt + ": "+ spec);}}if (didAction && !isError) {continue doArgs;}while (pbp.nextIndex() > pbpMark) {pbp.previous();pbp.remove();}if (isError) {throw new IllegalArgumentException(resultString);}if (optlen == 0) {break tryOpt;}}pbp.add(arg);break doArgs;}args.subList(0,argp.nextIndex()).clear();while (pbp.hasPrevious()) {args.add(0,pbp.previous());}return resultString;}  }
class C{  public GameEvent(final String source,final String event,final String... params){  this.source=source;  this.event=event;  this.params=params;}  }
class C{  public static boolean containsScript(String str){  if (str.length() > 0) {    for (    String scriptPrefix : SCRIPT_PREFIXES) {      if (str.contains(scriptPrefix)) {        return true;      }    }  }  return false;}  }
class C{  public void errorsTo(Parameterization config){  this.errorTarget=config;}  }
class C{  public Discipline discipline(){  return discipline;}  }
class C{  public void tupleMatched(Map<K,V> tuple){  match.emit(cloneTuple(tuple));}  }
class C{  @Override public int compareTo(RequestConditionHolder other,ServerWebExchange exchange){  if (this.condition == null && other.condition == null) {    return 0;  } else   if (this.condition == null) {    return 1;  } else   if (other.condition == null) {    return -1;  } else {    assertEqualConditionTypes(other);    return this.condition.compareTo(other.condition,exchange);  }}  }
class C{  public static boolean compareDeclarations(Method first,Method second){  if (first.getReturnType() != second.getReturnType()) {    return false;  }  return compareSignatures(first,second);}  }
class C{  @Override int calculateEndTopBound(float yAxisDelta){  return getView().getTop() + (int)yAxisDelta;}  }
class C{  public boolean othersInsertsAreVisible(int type) throws SQLException {  return false;}  }
class C{  public static boolean isValid(){  return getInstance().isValid();}  }
class C{  public void plus(){  plus(ANIMATION_DURATION_MS);}  }
class C{  public static void evaluateGateONOFFRatio(Gate g){  double lowest_on_rpu=Double.MAX_VALUE;  double highest_off_rpu=Double.MIN_VALUE;  for (int i=0; i < g.get_logics().size(); ++i) {    Double rpu=g.get_outrpus().get(i);    if (g.get_logics().get(i) == 1) {      if (lowest_on_rpu > rpu) {        lowest_on_rpu=rpu;      }    } else     if (g.get_logics().get(i) == 0) {      if (highest_off_rpu < rpu) {        highest_off_rpu=rpu;      }    }  }  g.get_scores().set_onoff_ratio(lowest_on_rpu / highest_off_rpu);}  }
class C{  public String globalInfo(){  return "This is ARAM.";}  }
class C{  public static boolean isExpressionStatement(JCExpression tree){switch (tree.getTag()) {case PREINC:case PREDEC:case POSTINC:case POSTDEC:case ASSIGN:case BITOR_ASG:case BITXOR_ASG:case BITAND_ASG:case SL_ASG:case SR_ASG:case USR_ASG:case PLUS_ASG:case MINUS_ASG:case MUL_ASG:case DIV_ASG:case MOD_ASG:case APPLY:case NEWCLASS:case ERRONEOUS:    return true;default :  return false;}}  }
class C{  public static Motion createLinearMotion(int sourceValue,int destinationValue,int duration){  Motion l=new Motion(sourceValue,destinationValue,duration);  l.motionType=LINEAR;  return l;}  }
class C{  public void print(NumberFormat format,int width){  print(new PrintWriter(System.out,true),format,width);}  }
class C{  boolean isHandshakeFinished(){  return handshakeFinished;}  }
class C{  @SuppressWarnings("unchecked") ReservoirItemsSketch<T> copy(){  final T[] dataCopy=Arrays.copyOf((T[])data_,currItemsAlloc_);  return new ReservoirItemsSketch<>(reservoirSize_,encodedResSize_,currItemsAlloc_,itemsSeen_,rf_,dataCopy);}  }
class C{  public boolean queryDRSMigrationCapabilityForPerformance(String srcUniqueId,String dstUniqueId,String entityType) throws InvalidArgument, NotFound, InvalidSession, StorageFault {  final String methodName="queryDRSMigrationCapabilityForPerformance(): ";  log.info(methodName + "Entry with srcUniqueId[" + srcUniqueId+ "], dstUniqueId["+ dstUniqueId+ "], entityType["+ entityType+ "]");  sslUtil.checkHttpRequest(true,true);  SOSManager sosManager=contextManager.getSOSManager();  boolean result=sosManager.queryDRSMigrationCapabilityForPerformance(srcUniqueId,dstUniqueId,entityType);  log.info(methodName + "Exit returning [" + result+ "]");  return result;}  }
class C{  public static void startGooglePlayServicesRefresh(Context context){  try {    context.startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("http://play.google.com/store/apps/details?id=com.google.android.gms")));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public String toString(){  return Long.toString(getValue());}  }
class C{  @Override public SparseEdge createEdge(){  return new SparseEdge();}  }
class C{  public static Goal fromString(String text){  if (text != null) {    for (    final Goal goal : Goal.values()) {      if (text.equalsIgnoreCase(goal.goal)) {        return goal;      }    }  }  return null;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UMAAL");  translateAll(environment,instruction,"UMAAL",instructions);}  }
class C{  public void remove(String btxn){synchronized (processors) {    processors.remove(btxn);  }}  }
class C{  public void testSoftSignInFailSilently() throws Exception {  final HttpURLConnection logInConn=mock(HttpURLConnection.class);  setupResponseCodeAndOutputStream(logInConn);  MockWebCloudClient cloud=createWebCloudClient(logInConn);  WebCloudNetworkClient networkClient=mock(WebCloudNetworkClient.class);  cloud.setNetworkClient(networkClient);  when(networkClient.initialize()).thenReturn(false);  assertEquals(UNAUTHENTICATED,cloud.getSigninState());  cloud.initialize();  assertEquals(UNAUTHENTICATED,cloud.getSigninState());  assertEquals(0,cloud.urlsRequested.size());}  }
class C{  private boolean isWatched(int index){  return hasWatches() ? watch[index] : false;}  }
class C{  static public void forceCreationOfNewIndex(){  forceCreationOfNewIndex(false);}  }
class C{  public String readAll(){  if (!scanner.hasNextLine())   return "";  String result=scanner.useDelimiter(EVERYTHING_PATTERN).next();  scanner.useDelimiter(WHITESPACE_PATTERN);  return result;}  }
class C{  public synchronized int read() throws IOException {  int n=read(temp,0,1);  if (n != 1)   return -1;  return temp[0] & 0xFF;}  }
class C{  public ObjectFactory(){}  }
class C{  @Override public void IFNULL(String className,String methName,int branchIndex,Object p){  env.topFrame().operandStack.pushNullRef();  IF_ACMPEQ(className,methName,branchIndex,p,null);}  }
class C{  public boolean isSynchronous(){  return mode == DispatchMode.SYNCHRONOUS;}  }
class C{  public boolean verify(PublicKey pubKey,String provider) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  Signature sig;  try {    if (provider == null) {      sig=Signature.getInstance(getSignatureName(sigAlgId));    } else {      sig=Signature.getInstance(getSignatureName(sigAlgId),provider);    }  } catch (  NoSuchAlgorithmException e) {    if (oids.get(sigAlgId.getObjectId()) != null) {      String signatureAlgorithm=(String)oids.get(sigAlgId.getObjectId());      if (provider == null) {        sig=Signature.getInstance(signatureAlgorithm);      } else {        sig=Signature.getInstance(signatureAlgorithm,provider);      }    } else {      throw e;    }  }  setSignatureParameters(sig,sigAlgId.getParameters());  sig.initVerify(pubKey);  try {    sig.update(reqInfo.getEncoded(ASN1Encoding.DER));  } catch (  Exception e) {    throw new SignatureException("exception encoding TBS cert request - " + e);  }  return sig.verify(sigBits.getBytes());}  }
class C{  @SuppressWarnings("rawtypes") public List<Vertex> findAllQuery(String query,Map parameters,int pageSize,int page){  return new ArrayList<Vertex>();}  }
class C{  public SQLiteTableBuilder(SQLiteDatabase database,String tableName){  if (database == null) {    throw new IllegalArgumentException("Database cannot be null.");  } else   if (TextUtils.isEmpty(tableName)) {    throw new IllegalArgumentException("Table name cannot be empty.");  } else   if (!tableName.matches(REGEX_SQL_IDENTIFIER)) {    throw new IllegalArgumentException("Invalid table name.");  }  mDatabase=database;  mStringBuilder=new StringBuilder();  mStringBuilder.append(CREATE_TABLE);  mStringBuilder.append(tableName);  mStringBuilder.append(OPEN_PAREN);}  }
class C{  @Override protected void translateCore(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions){  final IOperandTreeNode registerOperand1=instruction.getOperands().get(0).getRootNode().getChildren().get(0);  final IOperandTreeNode registerOperand2=instruction.getOperands().get(1).getRootNode().getChildren().get(0);  final IOperandTreeNode immediateOperand1=instruction.getOperands().get(2).getRootNode().getChildren().get(0);  final IOperandTreeNode immediateOperand2=instruction.getOperands().get(3).getRootNode().getChildren().get(0);  final String sourceRegister=registerOperand2.getValue();  final String destinationRegister=registerOperand1.getValue();  final String tempVar1=environment.getNextVariableString();  final String tempVar2=environment.getNextVariableString();  final String tempVar3=environment.getNextVariableString();  final long oneMask=TranslationHelpers.generateOneMask(0,Integer.parseInt(immediateOperand2.getValue()),OperandSize.DWORD);  final long zeroMask=TranslationHelpers.generateZeroMask(Integer.parseInt(immediateOperand1.getValue()),Integer.parseInt(immediateOperand2.getValue()),OperandSize.DWORD);  final OperandSize dw=OperandSize.DWORD;  long baseOffset=(instruction.getAddress().toLong() * 0x100) + instructions.size();  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,sourceRegister,dw,String.valueOf(oneMask),dw,tempVar1));  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,tempVar1,dw,immediateOperand1.getValue(),dw,tempVar2));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,destinationRegister,dw,String.valueOf(zeroMask),dw,tempVar3));  instructions.add(ReilHelpers.createOr(baseOffset++,dw,tempVar2,dw,tempVar3,dw,destinationRegister));}  }
class C{  public static boolean isFunctionalType(TypeSymbol type){  String name=type.getQualifiedName().toString();  return name.startsWith("java.util.function.") || name.equals(Runnable.class.getName()) || (type.isInterface() && (hasAnnotationType(type,FunctionalInterface.class.getName()) || hasAnonymousFunction(type)));}  }
class C{  public static boolean mkdir(String dir){  if (!exists(dir)) {    return (new File(dir)).mkdirs();  } else {    return isDirectory(dir);  }}  }
class C{  private JMenuItem addDemoToMenu(JMenu menu,Class<?> demoClass){  JMenuItem item=new JMenuItem(demoClass.getSimpleName());  JMenu subMenu=null;  String packageName=demoClass.getPackage().getName();  Component[] menuComps=menu.getMenuComponents();  int i;  for (i=0; i < menuComps.length; i++) {    JMenu comp=(JMenu)menuComps[i];    if (comp.getText().equals(packageName))     subMenu=comp; else     if (comp.getText().compareTo(packageName) > 0)     break;  }  if (subMenu == null) {    subMenu=new JMenu(packageName);    menu.add(subMenu,i);  }  subMenu.add(item);  return item;}  }
class C{  protected void checkRowExists(String sql) throws Exception {  Statement s=this.conn.createStatement();  ResultSet rs=s.executeQuery(sql);  assertTrue("Row should exist",rs.next());  rs.close();  s.close();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:38.153 -0500",hash_original_method="C51C4513003EDC9EA86A76A3037140C3",hash_generated_method="5B515AB13D4AEF801140CC12D011B3CB") public void reset(){  adnLikeFiles.clear();  mUsimPhoneBookManager.reset();  clearWaiters();  clearUserWriters();}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + alpha+ ","+ lambda+ ")";}  }
class C{  private boolean _check_arguments(InstalledApp app,String request_source,String action){  if (app == null || request_source == null || action == null) {    Log.v(MainActivity.TAG,"WebService was invoked with no targetApp and/or source argument!");    return false;  }  if (!action.equals(ACTION_DOWNLOAD_APK) && !action.equals(ACTION_VERSION_CHECK)) {    return false;  }  if (ScheduledCheckService.SERVICE_SOURCE.equals(request_source) && _check_cancellation()) {    return false;  }  return true;}  }
class C{  public void deleteAll(){synchronized (this) {    try {      RefCounted<SolrIndexSearcher> holder=uhandler.core.openNewSearcher(true,true);      holder.decref();    } catch (    Exception e) {      SolrException.log(log,"Error opening realtime searcher for deleteByQuery",e);    }    if (map != null)     map.clear();    if (prevMap != null)     prevMap.clear();    if (prevMap2 != null)     prevMap2.clear();    oldDeletes.clear();    deleteByQueries.clear();  }}  }
class C{  @Override protected boolean isSupportedOperation(Operation operation){  String operationSupportedVer=operation.getSupportedVersion();  if (_keyMap.containsKey(Constants.VERSION) && null != operationSupportedVer) {    String versionFromKeyMap=(String)_keyMap.get(Constants.VERSION);    String[] versionFromContextFile=patternVerForContFile.split(operationSupportedVer);    String[] versionProvided=patternVerProvided.split(versionFromKeyMap);    return (versionFromContextFile[0].equals(versionProvided[0]));  }  return true;}  }
class C{  public static ConstantNode forChar(char i,StructuredGraph graph){  return unique(graph,createPrimitive(JavaConstant.forInt(i)));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:30.564 -0500",hash_original_method="EB10FD63A8403F00F4E59BED9E510DF9",hash_generated_method="2C4F8F4C8B306CD83B3F5D269A2D4EFC") private static int secondaryHash(int h){  h^=(h >>> 20) ^ (h >>> 12);  return h ^ (h >>> 7) ^ (h >>> 4);}  }
class C{  private final UpdateReturnState enhancedHashInsert(long[] hashTable,long hash){  int arrayMask=(1 << lgArrLongs_) - 1;  int stride=(2 * (int)((hash >> lgArrLongs_) & STRIDE_MASK)) + 1;  int curProbe=(int)(hash & arrayMask);  long curTableHash=hashTable[curProbe];  while ((curTableHash != hash) && (curTableHash != 0)) {    if (curTableHash >= thetaLong_) {      int rememberPos=curProbe;      curProbe=(curProbe + stride) & arrayMask;      curTableHash=hashTable[curProbe];      while ((curTableHash != hash) && (curTableHash != 0)) {        curProbe=(curProbe + stride) & arrayMask;        curTableHash=hashTable[curProbe];      }      if (curTableHash == hash) {        return RejectedDuplicate;      }      assert (curTableHash == 0);      hashTable[rememberPos]=hash;      thetaLong_=(long)(thetaLong_ * alpha_);      dirty_=true;      return InsertedCountNotIncremented;    }    assert (curTableHash < thetaLong_);    curProbe=(curProbe + stride) & arrayMask;    curTableHash=hashTable[curProbe];  }  if (curTableHash == hash) {    return RejectedDuplicate;  }  assert (curTableHash == 0);  hashTable[curProbe]=hash;  thetaLong_=(long)(thetaLong_ * alpha_);  dirty_=true;  if (++curCount_ > hashTableThreshold_) {    rebuildDirty();  }  return InsertedCountIncremented;}  }
class C{  public ArgumentParser(final String[] args,final boolean enableShortOptions){  this.args=new ArrayList<String>();  this.enableShortOptions=enableShortOptions;  parse(args);}  }
class C{  public String returnVolumeHLU(URI volumeURI){  String hlu=ExportGroup.LUN_UNASSIGNED_DECIMAL_STR;  if (_volumes != null) {    String temp=_volumes.get(volumeURI.toString());    hlu=(temp != null) ? temp : ExportGroup.LUN_UNASSIGNED_DECIMAL_STR;  }  return hlu;}  }
class C{  public NoSuchMethodException(String s){  super(s);}  }
class C{  @Override public final boolean isDirty(){  return dirty;}  }
class C{  public static boolean isEncryptedFilesystemEnabled(){  return SystemProperties.getBoolean(SYSTEM_PROPERTY_EFS_ENABLED,false);}  }
class C{  public static synchronized void loadLibrary(String shortName) throws UnsatisfiedLinkError {  if (sSoSources == null) {    if ("http://www.android.com/".equals(System.getProperty("java.vendor.url"))) {      assertInitialized();    } else {      System.loadLibrary(shortName);      return;    }  }  try {    loadLibraryBySoName(System.mapLibraryName(shortName),0);  } catch (  IOException ex) {    throw new RuntimeException(ex);  }catch (  UnsatisfiedLinkError ex) {    String message=ex.getMessage();    if (message != null && message.contains("unexpected e_machine:")) {      throw new WrongAbiError(ex);    }    throw ex;  }}  }
class C{  public void testBug12970() throws Exception {  if (versionMeetsMinimum(5,0,8)) {    String tableName="testBug12970";    createTable(tableName,"(binary_field BINARY(32), varbinary_field VARBINARY(64))");    try {      this.rs=this.conn.getMetaData().getColumns(this.conn.getCatalog(),null,tableName,"%");      assertTrue(this.rs.next());      assertEquals(Types.BINARY,this.rs.getInt("DATA_TYPE"));      assertEquals(32,this.rs.getInt("COLUMN_SIZE"));      assertTrue(this.rs.next());      assertEquals(Types.VARBINARY,this.rs.getInt("DATA_TYPE"));      assertEquals(64,this.rs.getInt("COLUMN_SIZE"));      this.rs.close();      this.rs=this.stmt.executeQuery("SELECT binary_field, varbinary_field FROM " + tableName);      ResultSetMetaData rsmd=this.rs.getMetaData();      assertEquals(Types.BINARY,rsmd.getColumnType(1));      assertEquals(32,rsmd.getPrecision(1));      assertEquals(Types.VARBINARY,rsmd.getColumnType(2));      assertEquals(64,rsmd.getPrecision(2));      this.rs.close();    }  finally {      if (this.rs != null) {        this.rs.close();      }    }  }}  }
class C{  public MBeanAttributeInfo(String name,String type,String description,boolean isReadable,boolean isWritable,boolean isIs){  this(name,type,description,isReadable,isWritable,isIs,(Descriptor)null);}  }
class C{  public void addAll(List<Fragment> aSplits){  splits.addAll(aSplits);}  }
class C{  public static final byte[] inflateBestEffort(byte[] in,int sizeLimit){  ByteArrayOutputStream outStream=new ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * in.length);  Inflater inflater=new Inflater(true);  InflaterInputStream inStream=new InflaterInputStream(new ByteArrayInputStream(in),inflater);  byte[] buf=new byte[BUF_SIZE];  int written=0;  while (true) {    try {      int size=inStream.read(buf);      if (size <= 0)       break;      if ((written + size) > sizeLimit) {        outStream.write(buf,0,sizeLimit - written);        break;      }      outStream.write(buf,0,size);      written+=size;    } catch (    Exception e) {      LOG.info("Caught Exception in inflateBestEffort",e);      break;    }  }  try {    outStream.close();  } catch (  IOException e) {  }  return outStream.toByteArray();}  }
class C{  public static void toggleHideyBar(View decorView){  int uiOptions=decorView.getSystemUiVisibility();  int newUiOptions=uiOptions;  boolean isImmersiveModeEnabled=((uiOptions | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY) == uiOptions);  if (isImmersiveModeEnabled) {  } else {  }  if (Build.VERSION.SDK_INT >= 14) {    newUiOptions^=View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;  }  if (Build.VERSION.SDK_INT >= 16) {    newUiOptions^=View.SYSTEM_UI_FLAG_FULLSCREEN;  }  if (Build.VERSION.SDK_INT >= 18) {    newUiOptions^=View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;  }  if (Build.VERSION.SDK_INT >= 19) {    newUiOptions^=View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION;    newUiOptions^=View.SYSTEM_UI_FLAG_IMMERSIVE;  }  decorView.setSystemUiVisibility(newUiOptions);}  }
class C{  public <P,Q>String testSuperSuperMethod(int x1,int x2){  return null;}  }
class C{  public static void assertEqualsAndHash(Object one,Object two){  assertEquals(one,two);  assertEquals(two,one);  assertEquals(one.hashCode(),two.hashCode());}  }
class C{  public void shutdownImmediately(){  setPowerOffCount(1);  try {    checkPowerOff();  } catch (  DbException e) {  }  closeFiles();}  }
class C{  public FIXMessage create(){  return new FIXMessage(config.getMaxFieldCount(),config.getFieldCapacity());}  }
class C{  public static void println(String s){  System.out.println(s);}  }
class C{  public static Map<String,String> extractDimColsDataTypeValues(String colDataTypes){  Map<String,String> mapOfColNameDataType=new HashMap<String,String>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  if (null == colDataTypes || colDataTypes.isEmpty()) {    return mapOfColNameDataType;  }  String[] colArray=colDataTypes.split(CarbonCommonConstants.AMPERSAND_SPC_CHARACTER);  String[] colValueArray=null;  for (  String colArrayVal : colArray) {    colValueArray=colArrayVal.split(CarbonCommonConstants.COMA_SPC_CHARACTER);    mapOfColNameDataType.put(colValueArray[0].toLowerCase(),colValueArray[1]);  }  return mapOfColNameDataType;}  }
class C{  public PatternFitModel(Simulation simulation,GeneralAlgorithmRunner algorithmRunner,Parameters params){  if (params == null) {    throw new NullPointerException("Parameters must not be null");  }  this.parameters=params;  DataModelList dataModels=simulation.getDataModelList();  this.dataModelList=dataModels;  List<Graph> graphs=algorithmRunner.getGraphs();  if (dataModels.size() != graphs.size()) {    throw new IllegalArgumentException("Sorry, I was expecting the same number of data sets as result graphs.");  }  if (((DataSet)dataModels.get(0)).isDiscrete()) {    bayesPms=new ArrayList<>();    bayesIms=new ArrayList<>();    for (int i=0; i < dataModels.size(); i++) {      DataSet dataSet=(DataSet)dataModels.get(0);      Graph dag=SearchGraphUtils.dagFromPattern(graphs.get(0));      BayesPm pm=new BayesPmWrapper(dag,new DataWrapper(dataSet)).getBayesPm();      bayesPms.add(pm);      bayesIms.add(estimate(dataSet,pm));    }  } else   if (((DataSet)dataModels.get(0)).isContinuous()) {    semPms=new ArrayList<>();    semIms=new ArrayList<>();    for (int i=0; i < dataModels.size(); i++) {      DataSet dataSet=(DataSet)dataModels.get(0);      Graph dag=SearchGraphUtils.dagFromPattern(graphs.get(0));      try {        SemPm pm=new SemPm(dag);        semPms.add(pm);        semIms.add(estimate(dataSet,pm));      } catch (      Exception e) {        e.printStackTrace();        Graph mag=SearchGraphUtils.pagToMag(graphs.get(0));        SemGraph graph=new SemGraph(mag);        graph.setShowErrorTerms(false);        SemPm pm=new SemPm(graph);        semPms.add(pm);        semIms.add(estimatePag(dataSet,pm));      }    }  }}  }
class C{  private boolean discardUpstreamMediaChunks(int queueLength){  if (mediaChunks.size() <= queueLength) {    return false;  }  long startTimeUs=0;  long endTimeUs=mediaChunks.getLast().endTimeUs;  BaseMediaChunk removed=null;  while (mediaChunks.size() > queueLength) {    removed=mediaChunks.removeLast();    startTimeUs=removed.startTimeUs;    loadingFinished=false;  }  sampleQueue.discardUpstreamSamples(removed.getFirstSampleIndex());  notifyUpstreamDiscarded(startTimeUs,endTimeUs);  return true;}  }
class C{  public String toString(){  if (isNodeSet()) {    return "XMLSignatureInput/NodeSet/" + inputNodeSet.size() + " nodes/"+ getSourceURI();  }  if (isElement()) {    return "XMLSignatureInput/Element/" + subNode + " exclude "+ excludeNode+ " comments:"+ excludeComments+ "/"+ getSourceURI();  }  try {    return "XMLSignatureInput/OctetStream/" + getBytes().length + " octets/"+ getSourceURI();  } catch (  IOException iex) {    return "XMLSignatureInput/OctetStream//" + getSourceURI();  }catch (  CanonicalizationException cex) {    return "XMLSignatureInput/OctetStream//" + getSourceURI();  }}  }
class C{  RuleBasedBreakIterator(String datafile) throws IOException, MissingResourceException {  readTables(datafile);}  }
class C{  public void clearExpiration(){  builder.expirationTime(null);  builder.expirationTimeInterval(null);}  }
class C{  void doSimStep(final double now){  int inLinksCounter=0;  double inLinksCapSum=0.0;  for (  PTQLink link : this.inLinksArrayCache) {    if (!link.isNotOfferingVehicle()) {      this.tempLinks[inLinksCounter]=link;      inLinksCounter++;      inLinksCapSum+=link.getLink().getCapacity(now);    }  }  if (inLinksCounter == 0) {    this.active=false;    return;  }  int auxCounter=0;  while (auxCounter < inLinksCounter) {    double rndNum=random.nextDouble() * inLinksCapSum;    double selCap=0.0;    for (int i=0; i < inLinksCounter; i++) {      PTQLink link=this.tempLinks[i];      if (link == null)       continue;      selCap+=link.getLink().getCapacity(now);      if (selCap >= rndNum) {        auxCounter++;        inLinksCapSum-=link.getLink().getCapacity(now);        this.tempLinks[i]=null;        this.clearLinkBuffer(link,now);        break;      }    }  }}  }
class C{  public void popRTFContext(){  int previous=m_last_pushed_rtfdtm.pop();  if (null == m_rtfdtm_stack)   return;  if (m_which_rtfdtm == previous) {    if (previous >= 0) {      boolean isEmpty=((SAX2RTFDTM)(m_rtfdtm_stack.elementAt(previous))).popRewindMark();    }  } else   while (m_which_rtfdtm != previous) {    boolean isEmpty=((SAX2RTFDTM)(m_rtfdtm_stack.elementAt(m_which_rtfdtm))).popRewindMark();    --m_which_rtfdtm;  }}  }
class C{  @Override public void onDetach(){synchronized (mThread) {    mProgressBar=null;    mReady=false;    mThread.notify();  }  super.onDetach();}  }
class C{  private static int bitLength(int[] val,int len){  if (len == 0)   return 0;  return ((len - 1) << 5) + bitLengthForInt(val[0]);}  }
class C{  public DefaultMosaicTransferFeeCalculator(){  this(null);}  }
class C{  public static void prepareToDraw(){  GLES20.glUseProgram(sProgramHandle);  Util.checkGlError("glUseProgram");  GLES20.glEnableVertexAttribArray(sPositionHandle);  Util.checkGlError("glEnableVertexAttribArray");  GLES20.glVertexAttribPointer(sPositionHandle,COORDS_PER_VERTEX,GLES20.GL_FLOAT,false,VERTEX_STRIDE,sOutlineVertexBuffer);  Util.checkGlError("glVertexAttribPointer");  sDrawPrepared=true;}  }
class C{  public ReflectiveOperationException(String message){  super(message);}  }
class C{  public void updateToolbar(){  toolBar.update();}  }
class C{  public static void printTLCBug(int errorCode,String[] parameters){  recorder.record(errorCode,(Object[])parameters);  DebugPrinter.print("entering printTLCBug(int, String[]) with errorCode " + errorCode);  ToolIO.out.println(getMessage(TLCBUG,errorCode,parameters));  DebugPrinter.print("leaving printTLCBug(int, String[])");}  }
class C{  private int findNearestPair(double key,double secondaryKey){  int low=0;  int high=m_NumValues;  int middle=0;  while (low < high) {    middle=(low + high) / 2;    double current=m_CondValues[middle];    if (current == key) {      double secondary=m_Values[middle];      if (secondary == secondaryKey) {        return middle;      }      if (secondary > secondaryKey) {        high=middle;      } else       if (secondary < secondaryKey) {        low=middle + 1;      }    }    if (current > key) {      high=middle;    } else     if (current < key) {      low=middle + 1;    }  }  return low;}  }
class C{  public EventNode next() throws Exception {  EventNode next=peek;  if (next == null) {    next=read();  } else {    peek=null;  }  return next;}  }
class C{  @Override public int size(){  return (this.blob == null) ? 0 : this.blob.size();}  }
class C{  public boolean isReadOnly(){  Object oo=get_Value(COLUMNNAME_IsReadOnly);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void release(){  this.converterId=null;}  }
class C{  @Override public boolean has(Pattern pattern){  final Matcher matcher=pattern.matcher(rest());  return matcher.find() && matcher.start() == 0;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double zConvFactor=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zConvFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    double[] N=new double[8];    float progress=0;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    final double radToDeg=180 / Math.PI;    double Zx, Zy, Zxx, Zyy, Zxy, Zx2, Zy2, p, q;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double gridRes=inputFile.getCellSizeX();    double gridResTimes2=gridRes * 2;    double gridResSquared=gridRes * gridRes;    double fourTimesGridResSquared=gridResSquared * 4;    double curv;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zConvFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("blue_white_red.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          for (int i=0; i < 8; i++) {            N[i]=inputFile.getValue(row + Dy[i],col + Dx[i]);            if (N[i] != noData) {              N[i]=N[i] * zConvFactor;            } else {              N[i]=z * zConvFactor;            }          }          Zx=(N[1] - N[5]) / gridResTimes2;          Zy=(N[7] - N[3]) / gridResTimes2;          Zxx=(N[1] - 2 * z + N[5]) / gridResSquared;          Zyy=(N[7] - 2 * z + N[3]) / gridResSquared;          Zxy=(-N[6] + N[0] + N[4] - N[2]) / fourTimesGridResSquared;          Zx2=Zx * Zx;          Zy2=Zy * Zy;          p=Zx2 + Zy2;          q=p + 1;          if (p > 0) {            curv=(Zxx * Zx2 + 2 * Zxy * Zx* Zy + Zyy * Zy2) / (p * Math.pow(q,1.5));            outputFile.setValue(row,col,curv * radToDeg * 100);          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private Retry processResponseHeaders() throws IOException {  Proxy selectedProxy=httpEngine.connection != null ? httpEngine.connection.getRoute().getProxy() : client.getProxy();  final int responseCode=getResponseCode();switch (responseCode) {case HTTP_PROXY_AUTH:    if (selectedProxy.type() != Proxy.Type.HTTP) {      throw new ProtocolException("Received HTTP_PROXY_AUTH (407) code while not using proxy");    }case HTTP_UNAUTHORIZED:  boolean credentialsFound=HttpAuthenticator.processAuthHeader(client.getAuthenticator(),getResponseCode(),httpEngine.getResponseHeaders().getHeaders(),rawRequestHeaders,selectedProxy,url);return credentialsFound ? Retry.SAME_CONNECTION : Retry.NONE;case HTTP_MULT_CHOICE:case HTTP_MOVED_PERM:case HTTP_MOVED_TEMP:case HTTP_SEE_OTHER:case HTTP_TEMP_REDIRECT:if (!getInstanceFollowRedirects()) {return Retry.NONE;}if (++redirectionCount > MAX_REDIRECTS) {throw new ProtocolException("Too many redirects: " + redirectionCount);}if (responseCode == HTTP_TEMP_REDIRECT && !method.equals("GET") && !method.equals("HEAD")) {return Retry.NONE;}String location=getHeaderField("Location");if (location == null) {return Retry.NONE;}URL previousUrl=url;url=new URL(previousUrl,location);if (!url.getProtocol().equals("https") && !url.getProtocol().equals("http")) {return Retry.NONE;}boolean sameProtocol=previousUrl.getProtocol().equals(url.getProtocol());if (!sameProtocol && !client.getFollowProtocolRedirects()) {return Retry.NONE;}boolean sameHost=previousUrl.getHost().equals(url.getHost());boolean samePort=getEffectivePort(previousUrl) == getEffectivePort(url);if (sameHost && samePort && sameProtocol) {return Retry.SAME_CONNECTION;} else {return Retry.DIFFERENT_CONNECTION;}default :return Retry.NONE;}}  }
class C{  public DateTime withDayOfMonth(int dayOfMonth){  return withMillis(getChronology().dayOfMonth().set(getMillis(),dayOfMonth));}  }
class C{  public static boolean equals(int[] left,int[] right){  if (left == null) {    return right == null;  }  if (right == null) {    return false;  }  if (left == right) {    return true;  }  if (left.length != right.length) {    return false;  }  for (int i=0; i < left.length; i++) {    if (left[i] != right[i])     return false;  }  return true;}  }
class C{  private void testIsoYearJanuary1thFriday() throws Exception {  assertEquals(2009,getIsoYear(parse("2009-12-28")));  assertEquals(2009,getIsoYear(parse("2009-12-29")));  assertEquals(2009,getIsoYear(parse("2009-12-30")));  assertEquals(2009,getIsoYear(parse("2009-12-31")));  assertEquals(2009,getIsoYear(parse("2010-01-01")));  assertEquals(2009,getIsoYear(parse("2010-01-02")));  assertEquals(2009,getIsoYear(parse("2010-01-03")));  assertEquals(2010,getIsoYear(parse("2010-01-04")));}  }
class C{  public String poll() throws InterruptedException {  return poll(DEFAULT_TIMEOUT);}  }
class C{  public void close() throws SQLException {  Object mutex=this;  MySQLConnection conn=null;  if (this.owner != null) {    conn=this.owner.connection;    if (conn != null) {      mutex=conn.getConnectionMutex();    }  }  boolean hadMore=false;  int howMuchMore=0;synchronized (mutex) {    while (next() != null) {      hadMore=true;      howMuchMore++;      if (howMuchMore % 100 == 0) {        Thread.yield();      }    }    if (conn != null) {      if (!conn.getClobberStreamingResults() && conn.getNetTimeoutForStreamingResults() > 0) {        String oldValue=conn.getServerVariable("net_write_timeout");        if (oldValue == null || oldValue.length() == 0) {          oldValue="60";        }        this.io.clearInputStream();        java.sql.Statement stmt=null;        try {          stmt=conn.createStatement();          ((com.mysql.jdbc.StatementImpl)stmt).executeSimpleNonQuery(conn,"SET net_write_timeout=" + oldValue);        }  finally {          if (stmt != null) {            stmt.close();          }        }      }      if (conn.getUseUsageAdvisor()) {        if (hadMore) {          ProfilerEventHandler eventSink=ProfilerEventHandlerFactory.getInstance(conn);          eventSink.consumeEvent(new ProfilerEvent(ProfilerEvent.TYPE_WARN,"",this.owner.owningStatement == null ? "N/A" : this.owner.owningStatement.currentCatalog,this.owner.connectionId,this.owner.owningStatement == null ? -1 : this.owner.owningStatement.getId(),-1,System.currentTimeMillis(),0,Constants.MILLIS_I18N,null,null,Messages.getString("RowDataDynamic.2") + howMuchMore + Messages.getString("RowDataDynamic.3")+ Messages.getString("RowDataDynamic.4")+ Messages.getString("RowDataDynamic.5")+ Messages.getString("RowDataDynamic.6")+ this.owner.pointOfOrigin));        }      }    }  }  this.metadata=null;  this.owner=null;}  }
class C{  public static boolean canTranslate(String unlocalizedString){  if (I18n.hasKey(unlocalizedString))   return true; else {    if (UNLOCALIZED_STRINGS.size() < 100 && !UNLOCALIZED_STRINGS.contains(unlocalizedString))     UNLOCALIZED_STRINGS.add(unlocalizedString);    return false;  }}  }
class C{  @Bean public BuildInformation buildInformation(){  BuildInformation buildInformation=new BuildInformation();  buildInformation.setBuildDate(environment.getProperty("build.date"));  buildInformation.setBuildNumber(environment.getProperty("build.number"));  buildInformation.setBuildOs(environment.getProperty("build.os"));  buildInformation.setBuildUser(environment.getProperty("build.user"));  LOGGER.info(String.format("Build Information: {buildNumber=%s, buildDate=%s, buildUser=%s, buildOs=%s}",buildInformation.getBuildNumber(),buildInformation.getBuildDate(),buildInformation.getBuildUser(),buildInformation.getBuildOs()));  LOGGER.info("System Properties: " + getSystemPropertyMap("java.version","java.runtime.version","java.vm.version","java.vm.name","java.vendor","java.vendor.url","java.home","java.class.path","os.name","os.version","os.arch","user.name","user.dir","user.home","file.separator","path.separator"));  return buildInformation;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.433 -0500",hash_original_method="C84307F15A2AB40D2A9CA51D74C5FD0F",hash_generated_method="ED5D513DE4FFFE667446D5431C83A8D7") synchronized void unparcel(){}  }
class C{  public void clear(){  int h=head;  int t=tail;  if (h != t) {    head=tail=0;    int i=h;    int mask=elements.length - 1;    do {      elements[i]=null;      i=(i + 1) & mask;    } while (i != t);  }}  }
class C{  Vset check(Environment env,Context ctx,Vset vset,Hashtable exp){  checkLabel(env,ctx);  if (args.length > 0) {    vset=reach(env,vset);    CheckContext newctx=new CheckContext(ctx,this);    Environment newenv=Context.newEnvironment(env,newctx);    for (int i=0; i < args.length; i++) {      vset=args[i].checkBlockStatement(newenv,newctx,vset,exp);    }    vset=vset.join(newctx.vsBreak);  }  return ctx.removeAdditionalVars(vset);}  }
class C{  public static void releaseThreadPool(){  mExecutorService=null;}  }
class C{  @VisibleForTesting protected Process startExecutorProcess(int container){  return ShellUtils.runASyncProcess(getExecutorCommand(container),new File(LocalContext.workingDirectory(config)),Integer.toString(container));}  }
class C{  private String createEndMissionXml(){  return "</mission>";}  }
class C{  public void or() throws IOException {  writeCode(OR);}  }
class C{  public SVGTextFigure(){  this("Text");}  }
class C{  public void removeUserType(){  if (uriParms != null)   uriParms.delete(USER);}  }
class C{  @Override public void writeToNBT(NBTTagCompound tag){  try {    super.writeToNBT(tag);  } catch (  RuntimeException e) {  }  NBTTagCompound data=new NBTTagCompound();  data.setDouble("energy",energyStored);  tag.setTag("IC2BasicSink",data);}  }
class C{  public void randomize(List<CellIndex> cellIndices){  Random rand=new Random();  int range=getUpperBound() - getLowerBound();  for (  CellIndex cellIndex : cellIndices) {    int row=cellIndex.row;    int col=cellIndex.col;    double value=(rand.nextDouble() * range) + getLowerBound();    setLogicalValue(row,col,value,false);  }  fireTableDataChanged();}  }
class C{  protected void dispatchQueuedEvents(){  if (isDispatching.get()) {    return;  }  isDispatching.set(true);  try {    while (true) {      EventWithHandler eventWithHandler=eventsToDispatch.get().poll();      if (eventWithHandler == null) {        break;      }      if (eventWithHandler.handler.isValid()) {        dispatch(eventWithHandler.event,eventWithHandler.handler);      }    }  }  finally {    isDispatching.set(false);  }}  }
class C{  public MyHashMap(){  this(DEFAULT_INITIAL_CAPACITY,DEFAULT_MAX_LOAD_FACTOR);}  }
class C{  public GT_MetaGenerated_Item_X32(String aUnlocalized,OrePrefixes... aGeneratedPrefixList){  super(aUnlocalized,(short)32000,(short)766);  mGeneratedPrefixList=Arrays.copyOf(aGeneratedPrefixList,32);  for (int i=0; i < 32000; i++) {    OrePrefixes tPrefix=mGeneratedPrefixList[i / 1000];    if (tPrefix == null)     continue;    Materials tMaterial=GregTech_API.sGeneratedMaterials[i % 1000];    if (tMaterial == null)     continue;    if (doesMaterialAllowGeneration(tPrefix,tMaterial)) {      ItemStack tStack=new ItemStack(this,1,i);      GT_LanguageManager.addStringLocalization(getUnlocalizedName(tStack) + ".name",getDefaultLocalization(tPrefix,tMaterial,i));      GT_LanguageManager.addStringLocalization(getUnlocalizedName(tStack) + ".tooltip",tMaterial.getToolTip(tPrefix.mMaterialAmount / M));      if (tPrefix.mIsUnificatable) {        GT_OreDictUnificator.set(tPrefix,tMaterial,tStack);      } else {        GT_OreDictUnificator.registerOre(tPrefix.get(tMaterial),tStack);      }      if ((tPrefix == OrePrefixes.stick || tPrefix == OrePrefixes.wireFine || tPrefix == OrePrefixes.ingot) && (tMaterial == Materials.Lead || tMaterial == Materials.Tin || tMaterial == Materials.SolderingAlloy)) {        GregTech_API.sSolderingMetalList.add(tStack);      }    }  }}  }
class C{  static AxesWalker findClone(AxesWalker key,Vector cloneList){  if (null != cloneList) {    int n=cloneList.size();    for (int i=0; i < n; i+=2) {      if (key == cloneList.elementAt(i))       return (AxesWalker)cloneList.elementAt(i + 1);    }  }  return null;}  }
class C{  public void wiggleSort(int[] nums){  int n=nums.length;  int median=quickSelect((n + 1) / 2,nums);  int left=0;  int i=0;  int right=n - 1;  while (i <= right) {    if (nums[newIndex(i,n)] > median) {      swap(nums,newIndex(left,n),newIndex(i,n));      left++;      i++;    } else     if (nums[newIndex(i,n)] < median) {      swap(nums,newIndex(right,n),newIndex(i,n));      right--;    } else {      i++;    }  }}  }
class C{  public final int readLine(char[] buf,int length) throws IOException {  return readLine(buf,length,true);}  }
class C{  public ManageReferralControl(boolean criticality){  super(OID,criticality,null);}  }
class C{  @Ignore(MARIONETTE) @Test @NeedsLocalEnvironment public void crossDomainHistoryNavigationWhenProxyInterceptsHostRequests(){  testServer1.start();  proxyServer.start();  proxyServer.setPacFileContents(Joiner.on('\n').join("function FindProxyForURL(url, host) {","  if (host.indexOf('example') != -1) {","    return 'PROXY " + proxyServer.getHostAndPort() + "';","  }","  return 'DIRECT';"," }"));  String page1Url=buildPage1Url(testServer1,"http://www.example.com" + buildPage2Url());  String page2Url=buildPage2Url("http://www.example.com",buildPage3Url(testServer1));  String page3Url=buildPage3Url(testServer1);  WebDriver driver=customDriverFactory.createDriver(proxyServer.getPacUrl());  performNavigation(driver,page1Url);  assertEquals(ImmutableList.of(new HttpRequest(page1Url,null),new HttpRequest(page3Url,page2Url)),testServer1.getRequests());  assertEquals(ImmutableList.of(new HttpRequest(page2Url,page1Url)),proxyServer.getRequests());}  }
class C{  private int readVersion(String name) throws IOException {  try (DataInputStream in=new DataInputStream(new FileInputStream(name))){    return in.readInt();  } }  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MPaySelectionLine[");  sb.append(get_ID()).append(",C_Invoice_ID=").append(getC_Invoice_ID()).append(",PayAmt=").append(getPayAmt()).append(",DifferenceAmt=").append(getDifferenceAmt()).append("]");  return sb.toString();}  }
class C{  public BasicDiagnosticFormatter(JavacMessages msgs){  super(msgs,new BasicConfiguration());}  }
class C{  private void writeHeader(int rowCount,short headerLength,short recordLength) throws IOException {  _leos.writeByte(3);  _leos.writeByte(96);  _leos.writeByte(4);  _leos.writeByte(30);  _leos.writeLEInt(rowCount);  _leos.writeLEShort(headerLength);  _leos.writeLEShort(recordLength);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);  _leos.writeByte(0);}  }
class C{  public Map<GraphNode,GraphNode> buildHiddenNodeMap(){  Map<GraphNode,GraphNode> result=Maps.newHashMap();  for (  CollapseData masterData : collapsedData.values()) {    Collection<GraphNode> masterNodes=Lists.newArrayList();    masterData.addMemberNodes(masterNodes);    for (    GraphNode childNode : masterNodes) {      result.put(childNode,masterData.getMasterNode());    }  }  return result;}  }
class C{  void addConsumer(final MessageConsumer consumer){  if (ActiveMQRASession.trace) {    ActiveMQRALogger.LOGGER.trace("addConsumer(" + consumer + ")");  }synchronized (consumers) {    consumers.add(consumer);  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override public double java2DToValue(double java2DValue,Rectangle2D area,RectangleEdge edge){  double result;  double min=0.0;  double max=0.0;  double axisMin=this.first.getFirstMillisecond();  double axisMax=this.last.getLastMillisecond();  if (RectangleEdge.isTopOrBottom(edge)) {    min=area.getX();    max=area.getMaxX();  } else   if (RectangleEdge.isLeftOrRight(edge)) {    min=area.getMaxY();    max=area.getY();  }  if (isInverted()) {    result=axisMax - ((java2DValue - min) / (max - min) * (axisMax - axisMin));  } else {    result=axisMin + ((java2DValue - min) / (max - min) * (axisMax - axisMin));  }  return result;}  }
class C{  private void addIndex(Index<K,V> idx,HeadIndex<K,V> h,int indexLevel){  int insertionLevel=indexLevel;  Comparable<? super K> key=comparable(idx.node.key);  if (key == null)   throw new NullPointerException();  for (; ; ) {    int j=h.level;    Index<K,V> q=h;    Index<K,V> r=q.right;    Index<K,V> t=idx;    for (; ; ) {      if (r != null) {        Node<K,V> n=r.node;        int c=key.compareTo(n.key);        if (n.value == null) {          if (!q.unlink(r))           break;          r=q.right;          continue;        }        if (c > 0) {          q=r;          r=r.right;          continue;        }      }      if (j == insertionLevel) {        if (t.indexesDeletedNode()) {          findNode(key);          return;        }        if (!q.link(r,t))         break;        if (--insertionLevel == 0) {          if (t.indexesDeletedNode())           findNode(key);          return;        }      }      if (--j >= insertionLevel && j < indexLevel)       t=t.down;      q=q.down;      r=q.right;    }  }}  }
class C{  public boolean isHostname(){  return addressType == HOSTNAME;}  }
class C{  private static char bcdToChar(byte b){  if (b < 0xa) {    return (char)('0' + b);  } else switch (b) {case 0xa:    return '*';case 0xb:  return '#';case 0xc:return PAUSE;case 0xd:return WILD;default :return 0;}}  }
class C{  public void flush(){  LinkedList<Runnable> queue=new LinkedList<>();synchronized (mQueue) {    queue.addAll(mQueue);    mQueue.clear();  }  for (  Runnable r : queue) {    r.run();  }}  }
class C{  public ActionEvent(Object source,int id,String command){  this(source,id,command,0);}  }
class C{  public StandardCrosshairLabelGenerator(){  this("{0}",NumberFormat.getNumberInstance());}  }
class C{  public void Done(){  nextCharBuf=null;  buffer=null;  bufline=null;  bufcolumn=null;}  }
class C{  protected void processKeywords(Object keywords,String errorMessage) throws ViewParameterException {  if (!(keywords instanceof String)) {    throw new ViewParameterException(errorMessage);  }  String[] keyword=((String)keywords).split(",");  for (int i=0; i < keyword.length; i++) {    String keywordText=keyword[i].toLowerCase().trim();    if (keywordText.length() == 0) {      continue;    }    if (keywordText.equals(FORCE_UPDATE_KEYWORD)) {      isForceUpdate=true;    } else     if (keywordText.equals(START_EAGER_KEYWORD)) {      isForceUpdate=true;      isStartEager=true;    } else {      String keywordRange=FORCE_UPDATE_KEYWORD + "," + START_EAGER_KEYWORD;      throw new ViewParameterException("Time-length-combination view encountered an invalid keyword '" + keywordText + "', valid control keywords are: "+ keywordRange);    }  }}  }
class C{  protected void annotationValueToString(final StringBuilder sb,final BOp val,final int indent){  sb.append(val.toString());}  }
class C{  public void xml_error(String format,Object... args) throws InvalidPropertiesFormatException {  if (errors_are_exceptions) {    String msg=String.format(format,args);    throw new InvalidPropertiesFormatException(msg);  } else {    log.printf(format + "\n",args);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void testNewlines() throws Exception {  String newlineStr="Foo\nBar\n\rBaz";  createTable("newlineRegressTest","(field1 MEDIUMTEXT)");  this.stmt.executeUpdate("INSERT INTO newlineRegressTest VALUES ('" + newlineStr + "')");  this.pstmt=this.conn.prepareStatement("INSERT INTO newlineRegressTest VALUES (?)");  this.pstmt.setString(1,newlineStr);  this.pstmt.executeUpdate();  this.rs=this.stmt.executeQuery("SELECT * FROM newlineRegressTest");  while (this.rs.next()) {    assertTrue(this.rs.getString(1).equals(newlineStr));  }}  }
class C{  public int deleteCalendar(Connection conn,String calendarName) throws SQLException {  PreparedStatement ps=null;  try {    ps=conn.prepareStatement(rtp(DELETE_CALENDAR));    ps.setString(1,calendarName);    return ps.executeUpdate();  }  finally {    closeStatement(ps);  }}  }
class C{  public static String spaces(int length){  return duplicate(" ",length);}  }
class C{  public static void write(String s,int r){  for (int i=0; i < s.length(); i++)   write(s.charAt(i),r);}  }
class C{  private static void close(Closeable c){  if (c != null) {    try {      c.close();    } catch (    IOException e) {    }  }}  }
class C{  public void changedClientInfo(ClientInfo clientInfo){  this.mClientInfo=clientInfo;  if (DEBUG) {    printClientContext(this.mClientInfo);  }}  }
class C{  protected void createX_axis(int i){  Log.e("graph height",graphheight + "");  horizontal_width=((graphwidth / size) * i) + horstart;  horizontal_width_list.add(horizontal_width);  if (i == 0) {    canvas.drawLine(horizontal_width,graphheight + border,horizontal_width,border,paint);  } else {    canvas.drawLine(horizontal_width,graphheight + border,horizontal_width,graphheight + (2 * border),paint);  }  DrawLabels(i);}  }
class C{  public static java.util.Properties defaultModuleProperties() throws tv.sage.SageException {  java.util.Properties moduleProperties=new java.util.Properties();  try {    java.io.InputStream is=new java.io.FileInputStream(DEFAULT_PROPERTIES_FILENAME);    try {      moduleProperties.load(is);    }  finally {      is.close();    }  } catch (  java.io.IOException iox) {    iox.printStackTrace();  }  return (moduleProperties);}  }
class C{  @Override public synchronized int lastIndexOf(Object object){  return lastIndexOf(object,elementCount - 1);}  }
class C{  @Override public void visitInsn(int opcode){switch (opcode) {case IDIV:case IREM:    mv.visitInsn(DUP);  mv.visitMethodInsn(INVOKESTATIC,VM_FQ,BYTECODE_NAME[opcode],I_V);break;case LDIV:case LREM:mv.visitInsn(DUP2);mv.visitMethodInsn(INVOKESTATIC,VM_FQ,BYTECODE_NAME[opcode],J_V);break;case FDIV:case FREM:mv.visitInsn(DUP);mv.visitMethodInsn(INVOKESTATIC,VM_FQ,BYTECODE_NAME[opcode],F_V);break;case DDIV:case DREM:mv.visitInsn(DUP2);mv.visitMethodInsn(INVOKESTATIC,VM_FQ,BYTECODE_NAME[opcode],D_V);break;case IALOAD:case LALOAD:case DALOAD:case FALOAD:case AALOAD:case BALOAD:case CALOAD:case SALOAD:mv.visitInsn(DUP2);mv.visitMethodInsn(INVOKESTATIC,VM_FQ,BYTECODE_NAME[opcode],LI_V);break;case IASTORE:case FASTORE:case AASTORE:case BASTORE:case CASTORE:case SASTORE:stack.c1b1a1__c1b1a1c1();stack.c1b1a1__c1b1a1c1();mv.visitMethodInsn(INVOKESTATIC,VM_FQ,BYTECODE_NAME[opcode],LI_V);break;case LASTORE:case DASTORE:stack.c1b1a2__c1b1a2c1();stack.c1b2a1__c1b2a1c1();mv.visitMethodInsn(INVOKESTATIC,VM_FQ,BYTECODE_NAME[opcode],LI_V);break;case ATHROW:case ARRAYLENGTH:mv.visitInsn(DUP);mv.visitMethodInsn(INVOKESTATIC,VM_FQ,BYTECODE_NAME[opcode],L_V);break;default :mv.visitMethodInsn(INVOKESTATIC,VM_FQ,BYTECODE_NAME[opcode],V_V);}super.visitInsn(opcode);}  }
class C{  public DataSet findAll(Closure where){  return new DataSet(this,where);}  }
class C{  public boolean isReadonly(){  return readonly;}  }
class C{  public ScaleOutAnimation(View view){  this.view=view;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  public ItemsetDbAdapter open() throws SQLException {  mDbHelper=new DatabaseHelper();  mDb=mDbHelper.getWritableDatabase();  return this;}  }
class C{  public static IMultiPoint[] randomPoints(int n,int d){  IMultiPoint points[]=new IMultiPoint[n];  for (int i=0; i < n; i++) {    StringBuilder sb=new StringBuilder();    for (int j=0; j < d; j++) {      sb.append(rGen.nextDouble());      if (j < d - 1) {        sb.append(",");      }    }    points[i]=new Hyperpoint(sb.toString());  }  return points;}  }
class C{  private List<GenericEntry> retrieveAllPages(URL feedUrl) throws IOException, ServiceException {  List<GenericEntry> allEntries=new ArrayList<GenericEntry>();  try {    do {      GenericFeed feed=service.getFeed(feedUrl,GenericFeed.class);      allEntries.addAll(feed.getEntries());      feedUrl=(feed.getNextLink() == null) ? null : new URL(feed.getNextLink().getHref());    } while (feedUrl != null);  } catch (  ServiceException se) {    AppsForYourDomainException ae=AppsForYourDomainException.narrow(se);    throw (ae != null) ? ae : se;  }  return allEntries;}  }
class C{  public static final double[][] timesTranspose(final double[] v1,final double[][] m2){  assert (m2[0].length == 1) : ERR_MATRIX_INNERDIM;  final double[][] re=new double[v1.length][m2.length];  for (int j=0; j < m2.length; j++) {    for (int i=0; i < v1.length; i++) {      re[i][j]=v1[i] * m2[j][0];    }  }  return re;}  }
class C{  public void assureBlackList(){  AbstractMastersListener.clearBlacklist();}  }
class C{  public Vector2f negate(){  x=-x;  y=-y;  return this;}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/export") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep updateSnapshotExportRules(@PathParam("id") URI id,SnapshotExportUpdateParams param) throws InternalException {  _log.info("Update Snapshot Export Rules : request received for {}  with {}",id,param);  String task=UUID.randomUUID().toString();  ArgValidator.checkFieldUriType(id,Snapshot.class,"id");  Snapshot snap=queryResource(id);  ArgValidator.checkEntity(snap,id,true);  FileShare fs=_permissionsHelper.getObjectById(snap.getParent(),FileShare.class);  StorageSystem device=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());  String path=snap.getPath();  _log.info("Snapshot Export path found {} ",path);  Operation op=_dbClient.createTaskOpStatus(Snapshot.class,snap.getId(),task,ResourceOperationTypeEnum.UPDATE_EXPORT_RULES_FILE_SNAPSHOT);  try {    ExportVerificationUtility exportVerificationUtility=new ExportVerificationUtility(_dbClient);    exportVerificationUtility.verifyExports(fs,snap,param);    _log.info("No Errors found proceeding further {}, {}, {}",new Object[]{_dbClient,fs,param});    FileServiceApi fileServiceApi=FileService.getFileShareServiceImpl(fs,_dbClient);    fileServiceApi.updateExportRules(device.getId(),snap.getId(),param,false,task);    auditOp(OperationTypeEnum.UPDATE_EXPORT_RULES_FILE_SNAPSHOT,true,AuditLogManager.AUDITOP_BEGIN,fs.getId().toString(),device.getId().toString(),param);  } catch (  URISyntaxException e) {    op.setStatus(Operation.Status.error.name());    _log.error("Error Processing Export Updates {}, {}",e.getMessage(),e);    return toTask(snap,task,op);  }catch (  BadRequestException e) {    op=_dbClient.error(Snapshot.class,snap.getId(),task,e);    _log.error("Error Processing Export Updates {}, {}",e.getMessage(),e);  }catch (  Exception e) {    op.setStatus(Operation.Status.error.name());    toTask(snap,task,op);    throw APIException.badRequests.unableToProcessRequest(e.getMessage());  }  return toTask(snap,task,op);}  }
class C{  private void wrapAndAddAppender(Object appender,List<TomcatSlf4jLogbackAppenderAccessor> appenders){  TomcatSlf4jLogbackAppenderAccessor appenderAccessor=wrapAppender(appender);  if (appenderAccessor != null) {    appenders.add(appenderAccessor);  }}  }
class C{  static IntSet makeLivenessSet(int countRegs){  return countRegs <= LIVENESS_SET_THRESHOLD_SIZE ? new BitIntSet(countRegs) : new ListIntSet();}  }
class C{  private boolean isContentVisibleInShop(final Long contentId){  final Set<Long> catIds=shopService.getShopContentIds(ShopCodeContext.getShopId());  Category content=categoryService.getById(contentId);  final Date now=new Date();  if (DomainApiUtils.isObjectAvailableNow(true,content.getAvailablefrom(),content.getAvailableto(),now)) {    while (content != null && content.getCategoryId() != content.getParentId()) {      if (catIds.contains(content.getCategoryId())) {        return true;      }      content=categoryService.getById(content.getParentId());    }  }  return false;}  }
class C{  public void rollbackRestoreResync(URI vplexURI,URI vplexVolumeURI,URI mirrorVolumeURI,URI cgURI,String detachStepId,String stepId){  _log.info("Executing rollback of restore/resync volume {} on VPLEX {}",new Object[]{vplexVolumeURI,vplexURI});  try {    WorkflowStepCompleter.stepExecuting(stepId);    @SuppressWarnings("unchecked") Map<String,String> rollbackData=(Map<String,String>)_workflowService.loadStepData(detachStepId);    if (rollbackData != null) {      boolean reattachMirror=Boolean.parseBoolean(rollbackData.get(REATTACH_MIRROR));      boolean addVolumeBackToCG=Boolean.parseBoolean(rollbackData.get(ADD_BACK_TO_CG));      if (reattachMirror || addVolumeBackToCG) {        StorageSystem vplexSystem=getDataObject(StorageSystem.class,vplexURI,_dbClient);        VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplexSystem,_dbClient);        _log.info("Got VPLEX API client");        Volume vplexVolume=getDataObject(Volume.class,vplexVolumeURI,_dbClient);        String vplexVolumeName=vplexVolume.getDeviceLabel();        _log.info("Got VPLEX volume");        if (reattachMirror) {          String mirrorDeviceName=rollbackData.get(DETACHED_DEVICE);          client.reattachMirrorToDistributedVolume(vplexVolumeName,mirrorDeviceName);          _log.info("Reattached the mirror");        }        if (addVolumeBackToCG) {          ConsistencyGroupManager consistencyGroupManager=getConsistencyGroupManager(vplexVolume);          consistencyGroupManager.addVolumeToCg(cgURI,vplexVolume,client,false);          _log.info("Added volume back to consistency group.");        }      }    }    WorkflowStepCompleter.stepSucceded(stepId);    _log.info("Updated workflow step state to success");  } catch (  VPlexApiException vae) {    _log.error("Exception in restore/resync volume rollback for VPLEX distributed volume" + vae.getMessage(),vae);    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception e) {    _log.error("Exception in restore/resync volume rollback for VPLEX distributed volume " + e.getMessage(),e);    WorkflowStepCompleter.stepFailed(stepId,VPlexApiException.exceptions.failedAttachingVPlexVolumeMirror(mirrorVolumeURI.toString(),vplexVolumeURI.toString(),e));  }}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  public void paintImmediately(int x,int y,int w,int h){  Component c=this;  Component parent;  if (!isShowing()) {    return;  }  JComponent paintingOigin=SwingUtilities.getPaintingOrigin(this);  if (paintingOigin != null) {    Rectangle rectangle=SwingUtilities.convertRectangle(c,new Rectangle(x,y,w,h),paintingOigin);    paintingOigin.paintImmediately(rectangle.x,rectangle.y,rectangle.width,rectangle.height);    return;  }  while (!c.isOpaque()) {    parent=c.getParent();    if (parent != null) {      x+=c.getX();      y+=c.getY();      c=parent;    } else {      break;    }    if (!(c instanceof JComponent)) {      break;    }  }  if (c instanceof JComponent) {    ((JComponent)c)._paintImmediately(x,y,w,h);  } else {    c.repaint(x,y,w,h);  }}  }
class C{  private void writeAbbreviatedPredicate(IRI pred,Value obj) throws IOException, RDFHandlerException {  writeStartOfStartTag(pred.getNamespace(),pred.getLocalName());  if (obj instanceof Resource) {    Resource objRes=(Resource)obj;    if (objRes instanceof IRI) {      IRI uri=(IRI)objRes;      writeAttribute(RDF.NAMESPACE,"resource",uri.toString());    } else {      BNode bNode=(BNode)objRes;      writeAttribute(RDF.NAMESPACE,"nodeID",getValidNodeId(bNode));    }    writeEndOfEmptyTag();  } else   if (obj instanceof Literal) {    Literal objLit=(Literal)obj;    IRI datatype=objLit.getDatatype();    boolean isXmlLiteral=datatype.equals(RDF.XMLLITERAL);    if (Literals.isLanguageLiteral(objLit)) {      writeAttribute("xml:lang",objLit.getLanguage().get());    } else {      if (isXmlLiteral) {        writeAttribute(RDF.NAMESPACE,"parseType","Literal");      } else {        writeAttribute(RDF.NAMESPACE,"datatype",datatype.toString());      }    }    writeEndOfStartTag();    if (isXmlLiteral) {      writer.write(objLit.getLabel());    } else {      writeCharacterData(objLit.getLabel());    }    writeEndTag(pred.getNamespace(),pred.getLocalName());  }  writeNewLine();}  }
class C{  public double optDouble(int index){  return this.optDouble(index,Double.NaN);}  }
class C{  public boolean isAddingLabel(){  return isAddingAsLabel;}  }
class C{  protected void pathWasExpanded(TreePath path){  if (tree != null) {    tree.fireTreeExpanded(path);  }}  }
class C{  public static Spark spark(int pwmPort){  return pwmRegistrar.fetch(pwmPort,Spark.class,null);}  }
class C{  public void update(EventBean newData){  if (updateObserver != null) {    updateObserver.updated(this);  }  arrayList.add(0,newData);}  }
class C{  protected String composeIntelligenceSymCode(){  StringBuilder sb=new StringBuilder();  appendFieldValue(sb,this.getScheme(),1);  appendFieldValue(sb,this.getStandardIdentity(),1);  appendFieldValue(sb,this.getBattleDimension(),1);  appendFieldValue(sb,this.getStatus(),1);  appendFieldValue(sb,this.getFunctionId(),6);  sb.append(UNUSED_POSITION_CODE).append(UNUSED_POSITION_CODE);  appendFieldValue(sb,this.getCountryCode(),2);  appendFieldValue(sb,this.getOrderOfBattle(),1);  return sb.toString();}  }
class C{  public void checkCosting(){  if (getCostingMethod() != null && getCostingMethod().length() > 0)   MCostElement.getMaterialCostElement(this);}  }
class C{  private String loadLicense() throws IOException {  StringBuilder sb=new StringBuilder();  BufferedReader reader=null;  String line=null;  boolean isNewParagraph=false;  try {    reader=new BufferedReader(new InputStreamReader(getClass().getResourceAsStream("/META-INF/LGPL-LICENSE")));    while ((line=reader.readLine()) != null) {      line=line.trim();      if (line.isEmpty()) {        isNewParagraph=true;      } else {        if (isNewParagraph) {          sb.append(Settings.NEW_LINE);          sb.append(Settings.NEW_LINE);        } else {          sb.append(' ');        }        sb.append(line);        isNewParagraph=false;      }    }    return sb.toString();  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  public String removeContactMech(String contactMechPurposeTypeId){  return contactMechIdsMap.remove(contactMechPurposeTypeId);}  }
class C{  public static Instances curveDataMacroAveraged(int Y[][],double P[][]){  Instances curveData[]=curveData(Y,P);  int L=curveData.length;  int noNullIndex=-1;  for (int i=0; i < curveData.length; i++) {    if (curveData[i] == null) {      L--;    } else {      if (noNullIndex == -1) {        noNullIndex=i;      }    }  }  Instances avgCurve=new Instances(curveData[noNullIndex],0);  int D=avgCurve.numAttributes();  for (double t=0.0; t < 1.; t+=0.01) {    Instance x=(Instance)curveData[noNullIndex].instance(0).copy();    boolean firstloop=true;    for (int j=0; j < L; j++) {      if (curveData[j] == null) {        continue;      }      int i=ThresholdCurve.getThresholdInstance(curveData[j],t);      if (firstloop) {        for (int a=0; a < D; a++) {          x.setValue(a,curveData[j].instance(i).value(a) * 1. / L);        }        firstloop=false;      } else {        for (int a=0; a < D; a++) {          double v=x.value(a);          x.setValue(a,v + curveData[j].instance(i).value(a) * 1. / L);        }      }    }    avgCurve.add(x);  }  return avgCurve;}  }
class C{  public short readShortFromXML(Element node) throws Exception {  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  return ((Short)getPrimitive(node)).shortValue();}  }
class C{  @Override public void createFont(final PdfObject pdfObject,final String fontID,final boolean renderPage,final ObjectStore objectStore,final Map<String,PdfJavaGlyphs> substitutedFonts) throws Exception {  fontTypes=StandardFonts.CIDTYPE0;  this.fontID=fontID;  final PdfObject Descendent=pdfObject.getDictionary(PdfDictionary.DescendantFonts);  final PdfObject pdfFontDescriptor=Descendent.getDictionary(PdfDictionary.FontDescriptor);  createCIDFont(pdfObject,Descendent);  if (pdfFontDescriptor != null) {    final float[] newFontBBox=pdfFontDescriptor.getFloatArray(PdfDictionary.FontBBox);    if (newFontBBox != null) {      FontBBox=newFontBBox;    }    readEmbeddedFont(pdfFontDescriptor);  }  if (renderPage && !isFontEmbedded && substituteFontFile != null) {    isFontSubstituted=true;    subFont=new CIDFontType2(currentPdfFile,TTstreamisCID);    subFont.substituteFontUsed(substituteFontFile);    this.isFontEmbedded=true;    glyphs.setFontEmbedded(true);  }  if (renderPage) {    setFont(getBaseFontName(),1);  }}  }
class C{  public synchronized MetadataRegistry merge(MetadataRegistry other){synchronized (other) {    for (    Map.Entry<RootKey,AttributeMetadataRegistryBuilder> entry : other.attributes.entrySet()) {      RootKey key=entry.getKey();      AttributeMetadataRegistryBuilder builder=attributes.get(key);      if (builder == null) {        builder=new AttributeMetadataRegistryBuilder(this);        attributes.put(key,builder);      }      builder.merge(entry.getValue());    }    for (    Map.Entry<RootKey,ElementMetadataRegistryBuilder> entry : other.elements.entrySet()) {      RootKey key=entry.getKey();      ElementMetadataRegistryBuilder builder=elements.get(key);      if (builder == null) {        builder=new ElementMetadataRegistryBuilder(this);        elements.put(key,builder);      }      builder.merge(entry.getValue());    }  }  return this;}  }
class C{  public synchronized void pool(){  if (this.state == ActiveState.SHUTDOWN) {    log(this,"Already shutdown",Level.INFO);    return;  }  if (this.state == ActiveState.POOLED) {    log(this,"Already pooled",Level.INFO);    return;  }  String name=memory().getMemoryName();  log(this,"Pooling instance",Level.INFO,name);synchronized (memory()) {    memory().getShortTermMemory().clear();  }  if (Utils.checkLowMemory()) {    log(this,"Low memory - clearing server cache",Level.WARNING);    memory().freeMemory();  }  if ((Utils.checkLowMemory(0.2) && (memory().cacheSize() > MIN_CACHE)) || memory().cacheSize() > MAX_CACHE) {    log(this,"Cache too big - clearing server cache",Level.WARNING,memory().cacheSize(),MIN_CACHE,MAX_CACHE);    memory().freeMemory();  }  if (instances.containsKey(name)) {    shutdown();    return;  }  while (instances.size() >= POOL_SIZE) {    try {      String oldest=instancesQueue.remove();      Bot instance=instances.remove(oldest);      if (instance != null) {        instance.shutdown();      }    } catch (    Exception exception) {      log(instancesQueue,exception);    }  }  try {    awareness().pool();    mind().pool();    mood().pool();    avatar().pool();    memory().pool();  } catch (  Exception exception) {    log(this,exception);  }  setState(ActiveState.POOLED);  setDebugLevel(Level.INFO);  if (null != instances.putIfAbsent(name,this)) {    shutdown();    return;  } else {    instancesQueue.add(name);  }}  }
class C{  private StunMessageEvent doTestII(TransportAddress serverAddress) throws StunException, IOException {  Request request=MessageFactory.createBindingRequest();  ChangeRequestAttribute changeRequest=AttributeFactory.createChangeRequestAttribute();  changeRequest.setChangeIpFlag(true);  changeRequest.setChangePortFlag(true);  request.putAttribute(changeRequest);  StunMessageEvent evt=requestSender.sendRequestAndWaitForResponse(request,serverAddress);  if (evt != null)   logger.fine("Test II res=" + evt.getRemoteAddress().toString() + " - "+ evt.getRemoteAddress().getHostAddress()); else   logger.fine("NO RESPONSE received to Test II.");  return evt;}  }
class C{  public ConditionsTree createCopy(){  ConditionsTree copyTree=new ConditionsTree();  List<Node<AbstractCondition>> newRootNodes=new ArrayList<>();  for (  Node<AbstractCondition> rootNode : this.getRootNodes()) {    Node<AbstractCondition> newRootNode=new Node<>();    newRootNodes.add(newRootNode);    recursivelyCopyNode(rootNode,newRootNode);  }  copyTree.setRootNodes(newRootNodes);  return copyTree;}  }
class C{  private static void updateListSpanBeginning(Editable editable,int start,int before,int after){  MDOrderListSpan mdOrderListSpan=getOrderListBeginning(editable,start,before,after);  MDUnOrderListSpan mdUnOrderListSpan=getUnOrderListBeginning(editable,start,before,after);  if (mdOrderListSpan != null) {    int spanEnd=editable.getSpanEnd(mdOrderListSpan);    int position=EditUtils.findBeforeNewLineChar(editable,start) + 1;    if (!isOrderList(editable,position,false)) {      editable.removeSpan(mdOrderListSpan);      return;    }    int nested=calculateNested(editable,position,0);    if (nested == -1) {      return;    }    editable.removeSpan(mdOrderListSpan);    int number=calculateOrderListNumber(editable,position + nested,0);    editable.setSpan(new MDOrderListSpan(10,nested,number),position,spanEnd,Spanned.SPAN_INCLUSIVE_INCLUSIVE);  } else   if (mdUnOrderListSpan != null) {    int spanEnd=editable.getSpanEnd(mdUnOrderListSpan);    int position=EditUtils.findBeforeNewLineChar(editable,start) + 1;    if (!isUnOrderList(editable,position,false)) {      editable.removeSpan(mdUnOrderListSpan);      return;    }    int nested=calculateNested(editable,position,0);    if (nested == -1) {      return;    }    editable.removeSpan(mdUnOrderListSpan);    editable.setSpan(new MDUnOrderListSpan(10,mdUnOrderListSpan.getColor(),nested),position,spanEnd,Spanned.SPAN_INCLUSIVE_INCLUSIVE);  }}  }
class C{  public UnsupportedCapabilityException(String message){  super(message);}  }
class C{  private static int deleteInMediaDatabase(Context context,String[] oldPathNames){  int modifyCount=0;  if ((oldPathNames != null) && (oldPathNames.length > 0)) {    String sqlWhere=FotoSql.getWhereInFileNames(oldPathNames);    try {      modifyCount=FotoSql.deleteMedia(context.getContentResolver(),sqlWhere,null,true);      if (Global.debugEnabled) {        Log.d(Global.LOG_CONTEXT,CONTEXT + "deleteInMediaDatabase(len=" + oldPathNames.length+ ", files='"+ oldPathNames[0]+ "'...) result count="+ modifyCount);      }    } catch (    Exception ex) {      Log.e(Global.LOG_CONTEXT,CONTEXT + "deleteInMediaDatabase(" + sqlWhere+ ") error :",ex);    }  }  return modifyCount;}  }
class C{  public ccColor3B tile(ccGridSize pos){  assert tgaInfo != null : "tgaInfo must not be null";  assert pos.x < tgaInfo.width : "Invalid position.x";  assert pos.y < tgaInfo.height : "Invalid position.y";  ccColor3B value=new ccColor3B(tgaInfo.imageData[pos.x + 0 + pos.y * tgaInfo.width],tgaInfo.imageData[pos.x + 1 + pos.y * tgaInfo.width],tgaInfo.imageData[pos.x + 2 + pos.y * tgaInfo.width]);  return value;}  }
class C{  public void createSubUsageScenario04() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.daysToMillis(5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO04_PERUNIT_MONTH",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO04_PERUNIT_MONTH",serviceDetails,basicSetup.getCustomerUser2(),role);  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") - DateTimeHandling.daysToMillis(5);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO04_PERUNIT_MONTH",subDetails);}  }
class C{  public boolean testLowDiskSpace(StorageType storageType,long freeSpaceThreshold){  ensureInitialized();  long availableStorageSpace=getAvailableStorageSpace(storageType);  if (availableStorageSpace > 0) {    return availableStorageSpace < freeSpaceThreshold;  }  return true;}  }
class C{  public static int computeEnumSizeNoTag(final int value){  return computeInt32SizeNoTag(value);}  }
class C{  public final void removeMessage(TXCommitMessage deadMess){synchronized (this.txInProgress) {    this.txInProgress.remove(deadMess.getTrackerKey());    if (txInProgress.isEmpty()) {      this.txInProgress.notifyAll();    }  }}  }
class C{  public LuceneQueryFactoryImpl(final AttributeService attributeService,final ProductService productService,final ShopSearchSupportService shopSearchSupportService,final Map<String,SearchQueryBuilder> productBuilders,final Map<String,SearchQueryBuilder> skuBuilders,final Set<String> useQueryRelaxation){  this.attributeService=attributeService;  this.productService=productService;  this.shopSearchSupportService=shopSearchSupportService;  this.productBuilders=productBuilders;  this.skuBuilders=skuBuilders;  this.productCategoryBuilder=productBuilders.get(ProductSearchQueryBuilder.PRODUCT_CATEGORY_FIELD);  this.productCategoryIncludingParentsBuilder=productBuilders.get(ProductSearchQueryBuilder.PRODUCT_CATEGORY_INC_PARENTS_FIELD);  this.productShopBuilder=productBuilders.get(ProductSearchQueryBuilder.PRODUCT_SHOP_FIELD);  this.productShopStockBuilder=productBuilders.get(ProductSearchQueryBuilder.PRODUCT_SHOP_INSTOCK_FIELD);  this.productShopPriceBuilder=productBuilders.get(ProductSearchQueryBuilder.PRODUCT_SHOP_HASPRICE_FIELD);  this.productAttributeBuilder=productBuilders.get(ProductSearchQueryBuilder.ATTRIBUTE_CODE_FIELD);  this.productTagBuilder=productBuilders.get(ProductSearchQueryBuilder.PRODUCT_TAG_FIELD);  this.skuAttributeBuilder=skuBuilders.get(ProductSearchQueryBuilder.ATTRIBUTE_CODE_FIELD);  this.useQueryRelaxation=useQueryRelaxation;}  }
class C{  public String restOfText(){  return nextToken(null,null);}  }
class C{  public Scanner(Reader r) throws ParseException {  try {    reader=new StreamNormalizingReader(r);    current=nextChar();  } catch (  IOException e) {    throw new ParseException(e);  }}  }
class C{  public Statement withUpdatedParameters(Value updates){  if (updates == null || updates.isEmpty()) {    return this;  } else {    Map<String,Value> newParameters=new HashMap<>(Math.max(parameters.size(),updates.size()));    newParameters.putAll(parameters.asMap(ofValue()));    for (    Map.Entry<String,Value> entry : updates.asMap(ofValue()).entrySet()) {      Value value=entry.getValue();      if (value.isNull()) {        newParameters.remove(entry.getKey());      } else {        newParameters.put(entry.getKey(),value);      }    }    return withParameters(value(newParameters));  }}  }
class C{  public static byte[] threeBytePacket(int address,boolean longAddr,byte arg1,byte arg2,byte arg3){  if (!addressCheck(address,longAddr)) {    return null;  }  byte[] retVal;  if (longAddr) {    retVal=new byte[6];    retVal[0]=(byte)(192 + ((address / 256) & 0x3F));    retVal[1]=(byte)(address & 0xFF);    retVal[2]=arg1;    retVal[3]=arg2;    retVal[4]=arg3;    retVal[5]=(byte)(retVal[0] ^ retVal[1] ^ retVal[2]^ retVal[3]^ retVal[4]);  } else {    retVal=new byte[5];    retVal[0]=(byte)(address & 0xFF);    retVal[1]=arg1;    retVal[2]=arg2;    retVal[3]=arg3;    retVal[4]=(byte)(retVal[0] ^ retVal[1] ^ retVal[2]^ retVal[3]);  }  return retVal;}  }
class C{  public GenericDocument(DocumentType dt,DOMImplementation impl){  super(dt,impl);}  }
class C{  public void draw(Graphics g,float xcoords[],float[] ycoords){  LinkedList<Point2D> points=new LinkedList<Point2D>();  for (int i=0; i < xcoords.length; i++) {    points.add(new Point2D.Double(xcoords[i],ycoords[i]));  }  draw(g,points);}  }
class C{  public XmlTransformer(List<String> schemaFilenames,Class<?>... recognizedClasses){  try {    this.jaxbContext=JAXBContext.newInstance(recognizedClasses);    this.schema=loadXmlSchemas(schemaFilenames);  } catch (  JAXBException e) {    throw new RuntimeException(e);  }}  }
class C{  public final boolean intersectsAny(Vec4 pa,Vec4 pb){  for (  PickPointFrustum frustum : this) {    if (frustum.intersectsSegment(pa,pb))     return true;  }  return false;}  }
class C{  public static List propertyDescriptors(int apiLevel){  if (apiLevel == AST.JLS2_INTERNAL) {    return PROPERTY_DESCRIPTORS_2_0;  } else {    return PROPERTY_DESCRIPTORS_3_0;  }}  }
class C{  public final void normalize(){  double[] tmp_rot=new double[9];  double[] tmp_scale=new double[3];  getScaleRotate(tmp_scale,tmp_rot);  this.m00=tmp_rot[0];  this.m01=tmp_rot[1];  this.m02=tmp_rot[2];  this.m10=tmp_rot[3];  this.m11=tmp_rot[4];  this.m12=tmp_rot[5];  this.m20=tmp_rot[6];  this.m21=tmp_rot[7];  this.m22=tmp_rot[8];}  }
class C{  @SuppressLint("NewApi") @NonNull public Observable<List<GithubUser>> searchUser(@NonNull final String query){  return mGithubApi.searchGithubUsers(query,GithubApi.GITHUB_API_PARAMS_SEARCH_SORT_JOINED,GithubApi.GITHUB_API_PARAMS_SEARCH_ORDER_DESC).map(null).doOnNext(null);}  }
class C{  public static final Date maxDate(){  return new Date(maximumSerialNumber());}  }
class C{  private static int indexOfNonDigit(String string,int offset){  for (int i=offset; i < string.length(); i++) {    char c=string.charAt(i);    if (c < '0' || c > '9')     return i;  }  return string.length();}  }
class C{  public void addSequence(final double[] datum){  for (int i=0; i < datum.length; i++) {    add(datum[i]);  }}  }
class C{  public static <E>ImmutableList<E> copyOf(Iterator<? extends E> elements){  if (!elements.hasNext()) {    return of();  }  E first=elements.next();  if (!elements.hasNext()) {    return of(first);  } else {    return new ImmutableList.Builder<E>().add(first).addAll(elements).build();  }}  }
class C{  public void start(boolean passiveMode){  if (!permGranted) {    Log.w(TAG,"Can't start receiving the location updates. You have no ACCESS_FINE_LOCATION permission enabled.");    return;  }  if (started) {    Log.w(TAG,"Can't start receiving the location updates. Already started.");    return;  }  started=true;  try {    this.passiveMode=passiveMode;    if (passiveMode) {      locManager.requestLocationUpdates("passive",0,0,this);      Log.d(TAG,"Registering for receiving updates from passive provider.");    } else {      locManager.addGpsStatusListener(gpsStatusListener);      if (locManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) {        locManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,refreshRate,minDistance,this);      }      locManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,refreshRate,minDistance,this);    }    Location loc1=locManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);    Location loc2=locManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);    if (loc1 != null && loc2 != null) {      if (loc1.getAccuracy() < loc2.getAccuracy()) {        onLocationChanged(loc1);      } else {        onLocationChanged(loc2);      }    } else {      Location loc=loc1 != null ? loc1 : loc2;      if (loc != null) {        onLocationChanged(loc);      }    }    if (listener != null) {      listener.onChangePinVisibility(true);    }  } catch (  SecurityException e) {    Log.w(TAG,"Can't get location provider due to " + e);  }}  }
class C{  private Object invokeNoSelectMethod(Object handler,String methodName,Object... params){  if (handler == null)   return null;  Method method=null;  try {    method=handler.getClass().getDeclaredMethod(methodName,AdapterView.class);    if (method != null)     return method.invoke(handler,params); else     throw new AbAppException("no such method:" + methodName);  } catch (  Exception e) {    e.printStackTrace();  }  return null;}  }
class C{  public void cancelRequest(int senderWhat,Handler target,int targetWhat){synchronized (this) {    Registration start=mReg;    Registration r=start;    if (r == null) {      return;    }    do {      if (r.senderWhat >= senderWhat) {        break;      }      r=r.next;    } while (r != start);    if (r.senderWhat == senderWhat) {      Handler[] targets=r.targets;      int[] whats=r.targetWhats;      int oldLen=targets.length;      for (int i=0; i < oldLen; i++) {        if (targets[i] == target && whats[i] == targetWhat) {          r.targets=new Handler[oldLen - 1];          r.targetWhats=new int[oldLen - 1];          if (i > 0) {            System.arraycopy(targets,0,r.targets,0,i);            System.arraycopy(whats,0,r.targetWhats,0,i);          }          int remainingLen=oldLen - i - 1;          if (remainingLen != 0) {            System.arraycopy(targets,i + 1,r.targets,i,remainingLen);            System.arraycopy(whats,i + 1,r.targetWhats,i,remainingLen);          }          break;        }      }    }  }}  }
class C{  public void writeToSdfDir(File sdfDir) throws IOException {  if (ReaderUtils.isSDF(sdfDir)) {    writeToFile(new File(sdfDir,ReferenceGenome.REFERENCE_FILE));  } else {    throw new IOException(String.format("%s is not an SDF",sdfDir.getPath()));  }}  }
class C{  public boolean isDiscountLineAmt(){  Object oo=get_Value(COLUMNNAME_IsDiscountLineAmt);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static MemoryMappedFile mmapRO(String path) throws ErrnoException {  FileDescriptor fd=Libcore.os.open(path,O_RDONLY,0);  long size=Libcore.os.fstat(fd).st_size;  long address=Libcore.os.mmap(0L,size,PROT_READ,MAP_SHARED,fd,0);  Libcore.os.close(fd);  return new MemoryMappedFile(address,size);}  }
class C{  protected int index(int slice,int row,int column){  return this.offset + sliceOffsets[sliceZero + slice * sliceStride] + rowOffsets[rowZero + row * rowStride]+ columnOffsets[columnZero + column * columnStride];}  }
class C{  private boolean isGoto(Instruction instruction){  return instruction.getOpcode() == Constants.GOTO || instruction.getOpcode() == Constants.GOTO_W;}  }
class C{  public SchedulerConfigException(String msg){  super(msg);}  }
class C{  public void processLine(LineString l,double weight){  double usedRadius;switch (this.kdeType) {case CELL:    usedRadius=Math.max(this.radius,this.grid.getCellWidth() / 2.0);  break;case GAUSSIAN:usedRadius=3.0 * this.radius;break;default :usedRadius=this.radius;break;}double sum=0.0;Coordinate c0=l.getCoordinateN(0);Coordinate c1=l.getCoordinateN(1);Collection<Point> neighbours=this.grid.getGrid().getElliptical(c0.x,c0.y,c1.x,c1.y,2 * usedRadius + l.getLength());Map<Point,Double> interimMap=new HashMap<Point,Double>(neighbours.size());Iterator<Point> iterator=neighbours.iterator();while (iterator.hasNext()) {Point centroid=iterator.next();Geometry cell=this.grid.getCellGeometry(centroid);switch (this.kdeType) {case CELL:Geometry intersection=cell.intersection(l);if (!intersection.isEmpty()) {double w=intersection.getLength() / l.getLength();interimMap.put(centroid,w);sum+=w;}break;case EPANECHNIKOV:case GAUSSIAN:case TRIANGULAR:case TRIWEIGHT:case UNIFORM:double distance=centroid.distance(l);if (distance <= this.radius) {double w=getFunctionFromDistance(distance) * weight;interimMap.put(centroid,w);sum+=w;}break;default :break;}}for (Point p : interimMap.keySet()) {if (!this.weight.containsKey(p)) {this.weight.put(p,interimMap.get(p) / sum * weight);} else {this.weight.put(p,this.weight.get(p) + interimMap.get(p) / sum * weight);}}lineCounter.incCounter();}  }
class C{  public Outfit(){  this(0,0,0,0,0,0,0);}  }
class C{  public synchronized BookKeeperClientBuilder zkc(ZooKeeperClient zkc){  this.zkc=zkc;  return this;}  }
class C{  public boolean isSyncEnabled(String username){  Account account=getAccount(username);  if (account == null) {    return false;  }  return ContentResolver.getSyncAutomatically(account,ContactsContract.AUTHORITY);}  }
class C{  public boolean isAcceptDiscover(){  Object oo=get_Value(COLUMNNAME_AcceptDiscover);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public QueryStringQueryBuilder lowercaseExpandedTerms(boolean lowercaseExpandedTerms){  this.lowercaseExpandedTerms=lowercaseExpandedTerms;  return this;}  }
class C{  @Override public boolean retainAll(@NonNull Collection<?> collection){  boolean removed=false;  for (int i=mSize - 1; i >= 0; i--) {    if (!collection.contains(mArray[i])) {      removeAt(i);      removed=true;    }  }  return removed;}  }
class C{  public boolean isPost(){  return post;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String DEMHeader=null;  int row, col, x, y;  int progress=0;  double z, val, val2, val3;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  double flowLength=0;  double numUpslopeFlowpaths=0;  double flowpathLengthToAdd=0;  double conversionFactor=1;  double divideElevToAdd=0;  double radToDeg=180 / Math.PI;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  DEMHeader=args[1];  outputHeader=args[2];  conversionFactor=Double.parseDouble(args[3]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    double gridResX=pntr.getCellSizeX();    double gridResY=pntr.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster DEM=new WhiteboxRaster(DEMHeader,"r");    if (DEM.getNumberRows() != rows || DEM.getNumberColumns() != cols) {      showFeedback("The input files must have the same dimensions, i.e. number of " + "rows and columns.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,-999);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits(pntr.getXYUnits());    WhiteboxRaster numInflowingNeighbours=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    numInflowingNeighbours.isTemporaryFile=true;    WhiteboxRaster numUpslopeDivideCells=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    numUpslopeDivideCells.isTemporaryFile=true;    WhiteboxRaster totalFlowpathLength=new WhiteboxRaster(outputHeader.replace(".dep","_temp3.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    totalFlowpathLength.isTemporaryFile=true;    WhiteboxRaster totalUpslopeDivideElev=new WhiteboxRaster(outputHeader.replace(".dep","_temp4.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    totalUpslopeDivideElev.isTemporaryFile=true;    updateProgress("Loop 1 of 3:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (pntr.getValue(row,col) != noData) {          z=0;          for (i=0; i < 8; i++) {            if (pntr.getValue(row + dY[i],col + dX[i]) == inflowingVals[i]) {              z++;            }          }          if (z > 0) {            numInflowingNeighbours.setValue(row,col,z);          } else {            numInflowingNeighbours.setValue(row,col,-1);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 3:",progress);    }    updateProgress("Loop 2 of 3:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        val=numInflowingNeighbours.getValue(row,col);        if (val <= 0 && val != noData) {          flag=false;          x=col;          y=row;          do {            val=numInflowingNeighbours.getValue(y,x);            if (val <= 0 && val != noData) {              if (val == -1) {                numUpslopeDivideCells.setValue(y,x,0);                numUpslopeFlowpaths=1;                divideElevToAdd=DEM.getValue(y,x);              } else {                numUpslopeFlowpaths=numUpslopeDivideCells.getValue(y,x);                divideElevToAdd=totalUpslopeDivideElev.getValue(y,x);              }              numInflowingNeighbours.setValue(y,x,noData);              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                flowLength=gridLengths[c];                val2=totalFlowpathLength.getValue(y,x);                flowpathLengthToAdd=val2 + numUpslopeFlowpaths * flowLength;                x+=dX[c];                y+=dY[c];                numUpslopeDivideCells.setValue(y,x,numUpslopeDivideCells.getValue(y,x) + numUpslopeFlowpaths);                totalFlowpathLength.setValue(y,x,totalFlowpathLength.getValue(y,x) + flowpathLengthToAdd);                totalUpslopeDivideElev.setValue(y,x,totalUpslopeDivideElev.getValue(y,x) + divideElevToAdd);                numInflowingNeighbours.setValue(y,x,numInflowingNeighbours.getValue(y,x) - 1);              } else {                flag=true;              }            } else {              flag=true;            }          } while (!flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 2 of 3:",progress);    }    numUpslopeDivideCells.flush();    totalFlowpathLength.flush();    totalUpslopeDivideElev.flush();    numInflowingNeighbours.close();    updateProgress("Loop 3 of 3:",0);    double[] data1=null;    double[] data2=null;    double[] data3=null;    double[] data4=null;    double[] data5=null;    for (row=0; row < rows; row++) {      data1=numUpslopeDivideCells.getRowValues(row);      data2=totalFlowpathLength.getRowValues(row);      data3=pntr.getRowValues(row);      data4=totalUpslopeDivideElev.getRowValues(row);      data5=DEM.getRowValues(row);      for (col=0; col < cols; col++) {        if (data3[col] != noData) {          if (data1[col] > 0) {            val=data2[col] / data1[col];            val2=(data4[col] / data1[col] - data5[col]) * conversionFactor;            val3=Math.atan(val2 / val) * radToDeg;            output.setValue(row,col,val3);          } else {            output.setValue(row,col,0);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 3 of 3:",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    DEM.close();    numUpslopeDivideCells.close();    totalFlowpathLength.close();    totalUpslopeDivideElev.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void main(String[] args) throws IOException {  TestSourceTab tester=new TestSourceTab();  run(tester,ARGS1,TEST,NEGATED_TEST);  run(tester,ARGS2,TEST,NEGATED_TEST);  tester.runDiffs(FILES_TO_DIFF);}  }
class C{  private void assertZipAndUnzipOfDirectoryMatchesOriginal(File sourceDir) throws IOException {  File[] sourceFiles=sourceDir.listFiles();  Arrays.sort(sourceFiles);  File zipFile=createZipFileHandle();  ZipFiles.zipDirectory(sourceDir,zipFile);  File outputDir=Files.createTempDir();  ZipFiles.unzipFile(zipFile,outputDir);  File[] outputFiles=outputDir.listFiles();  Arrays.sort(outputFiles);  assertThat(outputFiles,arrayWithSize(sourceFiles.length));  for (int i=0; i < sourceFiles.length; i++) {    compareFileContents(sourceFiles[i],outputFiles[i]);  }  removeRecursive(outputDir.toPath());  assertTrue(zipFile.delete());}  }
class C{  @Provides @Singleton @Named("RetrofitGoodreads") Retrofit provideGoodreadsRetrofit(@ApiClient OkHttpClient apiClient,GoodreadsInterceptor goodreadsInterceptor){  OkHttpClient goodreadsClient=apiClient.clone();  goodreadsClient.interceptors().add(goodreadsInterceptor);  return new Retrofit.Builder().client(goodreadsClient).baseUrl(HttpUrl.parse(BuildConfig.GOOD_READ_ENDPOINT_URL)).addConverterFactory(SimpleXmlConverterFactory.create()).addCallAdapterFactory(RxJavaCallAdapterFactory.create()).build();}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private static PipelineOp addResolvedAssignment(PipelineOp left,final AssignmentNode assignmentNode,final Set<IVariable<?>> doneSet,final Properties queryHints,final AST2BOpContext ctx){  final IValueExpression ve=assignmentNode.getValueExpression();  final Set<IVariable<IV>> vars=new LinkedHashSet<IVariable<IV>>();  final ComputedMaterializationRequirement req=assignmentNode.getMaterializationRequirement();  vars.addAll(req.getVarsToMaterialize());  vars.removeAll(doneSet);  final int bopId=ctx.nextId();  final Var freshVar=Var.var();  final ConditionalBind b=new ConditionalBind(freshVar,assignmentNode.getValueExpression(),false);  final IConstraint c=new ProjectedConstraint(b);  if (vars.size() > 0) {    left=addMaterializationSteps1(left,bopId,ve,vars,queryHints,ctx);    if (req.getRequirement() == Requirement.ALWAYS) {      doneSet.addAll(vars);    }  }  left=applyQueryHints(new ConditionalRoutingOp(leftOrEmpty(left),new NV(BOp.Annotations.BOP_ID,bopId),new NV(ConditionalRoutingOp.Annotations.CONDITION,c)),queryHints,ctx);  final Set<IVariable<IV>> iVars=new LinkedHashSet<IVariable<IV>>();  iVars.add(freshVar);  left=addMockTermResolverOp(left,iVars,ChunkedMaterializationOp.Annotations.DEFAULT_MATERIALIZE_INLINE_IVS,null,assignmentNode.getQueryHints(),ctx);  left=addVariableUnificationOp(left,assignmentNode.getVar(),freshVar,ctx);  return left;}  }
class C{  public void execute() throws Exception {  DataSet data=this.dataSet;  MimbuildTrek mimbuild=new MimbuildTrek();  mimbuild.setAlpha(getParams().getDouble("alpha",0.001));  mimbuild.setKnowledge((IKnowledge)getParams().get("knowledge",new Knowledge2()));  if (getParams().getBoolean("includeThreeClusters",true)) {    mimbuild.setMinClusterSize(3);  } else {    mimbuild.setMinClusterSize(4);  }  Clusters clusters=(Clusters)getParams().get("clusters",null);  List<List<Node>> partition=ClusterUtils.clustersToPartition(clusters,data.getVariables());  List<String> latentNames=new ArrayList<>();  for (int i=0; i < clusters.getNumClusters(); i++) {    latentNames.add(clusters.getClusterName(i));  }  CovarianceMatrix cov=new CovarianceMatrix(data);  Graph structureGraph=mimbuild.search(partition,latentNames,cov);  GraphUtils.circleLayout(structureGraph,200,200,150);  GraphUtils.fruchtermanReingoldLayout(structureGraph);  ICovarianceMatrix latentsCov=mimbuild.getLatentsCov();  TetradLogger.getInstance().log("details","Latent covs = \n" + latentsCov);  Graph fullGraph=mimbuild.getFullGraph();  GraphUtils.circleLayout(fullGraph,200,200,150);  GraphUtils.fruchtermanReingoldLayout(fullGraph);  setResultGraph(fullGraph);  setFullGraph(fullGraph);  setClusters(MimUtils.convertToClusters(structureGraph));  setClusters(ClusterUtils.partitionToClusters(mimbuild.getClustering()));  setStructureGraph(structureGraph);  getParams().set("latentVariableNames",new ArrayList<>(latentNames));  this.covMatrix=latentsCov;  double p=mimbuild.getpValue();  TetradLogger.getInstance().log("details","\nStructure graph = " + structureGraph);  TetradLogger.getInstance().log("details",getLatentClustersString(fullGraph).toString());  TetradLogger.getInstance().log("details","P = " + p);  if (getParams().getBoolean("showMaxP",false)) {    if (p > getParams().getDouble("maxP",1.0)) {      getParams().set("maxP",p);      getParams().set("maxStructureGraph",structureGraph);      getParams().set("maxClusters",getClusters());      getParams().set("maxFullGraph",fullGraph);      getParams().set("maxAlpha",getParams().getDouble("alpha",0.001));    }    setStructureGraph((Graph)getParams().get("maxStructureGraph",null));    setFullGraph((Graph)getParams().get("maxFullGraph",null));    if (getParams().get("maxClusters",null) != null) {      setClusters((Clusters)getParams().get("maxClusters",null));    }    setResultGraph((Graph)getParams().get("maxFullGraph",null));    TetradLogger.getInstance().log("maxmodel","\nMAX Graph = " + getParams().get("maxStructureGraph",null));    TetradLogger.getInstance().log("maxmodel",getLatentClustersString((Graph)getParams().get("maxFullGraph",null)).toString());    TetradLogger.getInstance().log("maxmodel","MAX P = " + getParams().getDouble("maxP",1.0));  }}  }
class C{  void processEvents(){  for (; ; ) {    WatchKey key;    try {      key=watcher.take();    } catch (    InterruptedException x) {      return;    }    for (    WatchEvent<?> event : key.pollEvents()) {      WatchEvent.Kind kind=event.kind();      if (kind == OVERFLOW) {        continue;      }      WatchEvent<Path> ev=cast(event);      Path name=ev.context();      Path child=((Path)key.watchable()).resolve(name);      System.out.format("%s: %s\n",event.kind().name(),child);      if (recursive && (kind == ENTRY_CREATE)) {        try {          if (Files.isDirectory(child,NOFOLLOW_LINKS)) {            registerAll(child);          }        } catch (        IOException x) {        }      }    }    boolean valid=key.reset();    if (!valid) {      count--;      if (count == 0)       break;    }  }}  }
class C{  @NotNull public static PyFunctionBuilder copySignature(@NotNull final PyFunction source,@NotNull final String... decoratorsToCopyIfExist){  final String name=source.getName();  final PyFunctionBuilder functionBuilder=new PyFunctionBuilder((name != null) ? name : "");  for (  final PyParameter parameter : source.getParameterList().getParameters()) {    final String parameterName=parameter.getName();    if (parameterName != null) {      functionBuilder.parameter(parameterName);    }  }  final PyDecoratorList decoratorList=source.getDecoratorList();  if (decoratorList != null) {    for (    final PyDecorator decorator : decoratorList.getDecorators()) {      final String decoratorName=decorator.getName();      if (decoratorName != null) {        if (ArrayUtil.contains(decoratorName,decoratorsToCopyIfExist)) {          functionBuilder.decorate(decoratorName);        }      }    }  }  final String docString=source.getDocStringValue();  if (docString != null) {    functionBuilder.docString(docString);  }  return functionBuilder;}  }
class C{  private TreeNodeVisitor train(OnLineStatistics setScore,List<DataPointPair<Double>> subSet,List<Integer> features,CategoricalData[] catInfo,Random rand,Stack<List<DataPointPair<Double>>> reusableLists){  if (subSet.size() < stopSize || setScore.getVarance() <= 0.0 || Double.isNaN(setScore.getVarance()))   return new NodeR(setScore.getMean());  double bestGain=Double.NEGATIVE_INFINITY;  double bestThreshold=Double.NaN;  int bestAttribute=-1;  OnLineStatistics[] bestScores=null;  List<List<DataPointPair<Double>>> bestSplit=null;  Set<Integer> bestLeftSide=null;  Collections.shuffle(features);  final int goTo=Math.min(selectionCount,features.size());  for (int i=0; i < goTo; i++) {    double gain;    double threshold=Double.NaN;    Set<Integer> leftSide=null;    OnLineStatistics[] stats;    int a=features.get(i);    List<List<DataPointPair<Double>>> aSplit;    if (a < catInfo.length) {      final int vals=catInfo[a].getNumOfCategories();      if (binaryCategoricalSplitting || vals == 2) {        stats=createStats(2);        Set<Integer> catsValsInUse=new IntSet(vals * 2);        for (        DataPointPair<Double> dpp : subSet)         catsValsInUse.add(dpp.getDataPoint().getCategoricalValue(a));        if (catsValsInUse.size() == 1)         return new NodeR(setScore.getMean());        leftSide=new IntSet(vals);        int toUse=rand.nextInt(catsValsInUse.size() - 1) + 1;        ListUtils.randomSample(catsValsInUse,leftSide,toUse,rand);        aSplit=new ArrayList<List<DataPointPair<Double>>>(2);        fillList(2,reusableLists,aSplit);        for (        DataPointPair<Double> dpp : subSet) {          DataPoint dp=dpp.getDataPoint();          int dest=leftSide.contains(dpp.getDataPoint().getCategoricalValue(a)) ? 0 : 1;          stats[dest].add(dpp.getPair(),dp.getWeight());          aSplit.get(dest).add(dpp);        }      } else {        stats=createStats(vals);        aSplit=new ArrayList<List<DataPointPair<Double>>>(vals);        fillList(vals,reusableLists,aSplit);        for (        DataPointPair<Double> dpp : subSet) {          DataPoint dp=dpp.getDataPoint();          stats[dp.getCategoricalValue(a)].add(dpp.getPair(),dp.getWeight());          aSplit.get(dp.getCategoricalValue(a)).add(dpp);        }      }    } else {      int numerA=a - catInfo.length;      double min=Double.POSITIVE_INFINITY, max=Double.NEGATIVE_INFINITY;      for (      DataPointPair<Double> dpp : subSet) {        double val=dpp.getVector().get(numerA);        min=Math.min(min,val);        max=Math.max(max,val);      }      threshold=rand.nextDouble() * (max - min) + min;      stats=createStats(2);      aSplit=new ArrayList<List<DataPointPair<Double>>>(2);      fillList(2,reusableLists,aSplit);      for (      DataPointPair<Double> dpp : subSet) {        double val=dpp.getVector().get(numerA);        int toAddTo=val <= threshold ? 0 : 1;        aSplit.get(toAddTo).add(dpp);        stats[toAddTo].add(dpp.getPair(),dpp.getDataPoint().getWeight());      }    }    gain=1;    double varNorm=setScore.getVarance();    double varSum=setScore.getSumOfWeights();    for (    OnLineStatistics stat : stats)     gain-=stat.getSumOfWeights() / varSum * (stat.getVarance() / varNorm);    if (gain > bestGain) {      bestGain=gain;      bestAttribute=a;      bestThreshold=threshold;      bestScores=stats;      if (bestSplit != null)       fillStack(reusableLists,bestSplit);      bestSplit=aSplit;      bestLeftSide=leftSide;    } else     fillStack(reusableLists,aSplit);  }  fillStack(reusableLists,Arrays.asList(subSet));  NodeBase toReturn;  if (bestAttribute >= 0) {    if (bestAttribute < catInfo.length)     if (bestSplit.size() == 2)     toReturn=new NodeRCat(bestAttribute,bestLeftSide,setScore.getMean()); else {      toReturn=new NodeRCat(goTo,bestSplit.size(),setScore.getMean());      features.remove(new Integer(bestAttribute));    } else     toReturn=new NodeRNum(bestAttribute - catInfo.length,bestThreshold,setScore.getMean());    for (int i=0; i < toReturn.children.length; i++) {      toReturn.children[i]=train(bestScores[i],bestSplit.get(i),features,catInfo,rand,reusableLists);    }    return toReturn;  }  return new NodeR(setScore.getMean());}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void pI(){  indentIn();}  }
class C{  @Override public void closeTab(Tab tab){  if (tab == mTabControl.getCurrentTab()) {    closeCurrentTab();  } else {    removeTab(tab);  }}  }
class C{  static void adjustIndicesForSupplementaryChars(StringBuilder content,FormattedTweetText formattedTweetText){  final List<Integer> highSurrogateIndices=new ArrayList<>();  final int len=content.length() - 1;  for (int i=0; i < len; ++i) {    if (Character.isHighSurrogate(content.charAt(i)) && Character.isLowSurrogate(content.charAt(i + 1))) {      highSurrogateIndices.add(i);    }  }  adjustEntitiesWithOffsets(formattedTweetText.urlEntities,highSurrogateIndices);  adjustEntitiesWithOffsets(formattedTweetText.mediaEntities,highSurrogateIndices);}  }
class C{  public String decompileStateMachine(Vertex state,Network network){  long start=System.currentTimeMillis();  StringWriter writer=new StringWriter();  printStateMachine(state,writer,network,start,TIMEOUT);  writer.flush();  network.getBot().log(state,"Decompile time",Level.INFO,System.currentTimeMillis() - start);  return writer.toString();}  }
class C{  protected MetaStore createMetaStore(){  storage=Storage.builder().withDirectory(new File(String.format("target/test-logs/%s",testId))).build();  return new MetaStore("test",storage,new Serializer().resolve(new ProtocolSerialization(),new ServerSerialization(),new StorageSerialization()).register(TestMember.class));}  }
class C{  public boolean isBlockWidthRelative(int i){  return (masks[i] & BLOCK_WIDTH_RELATIVE_MASK) != 0;}  }
class C{  protected I18nSet(){  super();}  }
class C{  void establishConnection(final Publication publication){  final int sessionId=publication.sessionId();  debug("Establishing connection for channel => {}, stream id => {}",publication.channel(),publication.sessionId());  UnsafeBuffer buffer=buffers.get();  buffer.wrap(new byte[BitUtil.SIZE_OF_INT]);  buffer.putShort(0,(short)0);  buffer.putShort(BitUtil.SIZE_OF_SHORT,(short)MessageType.ESTABLISH_CONNECTION_REQUEST.getEncodedType());  long offer=-1;  final long start=System.nanoTime();  for (; ; ) {    final long current=System.nanoTime();    if ((current - start) > TimeUnit.MILLISECONDS.toNanos(Constants.CLIENT_ESTABLISH_CONNECT_TIMEOUT_MS)) {      throw new RuntimeException("Timed out waiting to establish connection for session id => " + sessionId);    }    if (offer < 0) {      if (publication.isClosed()) {        throw new RuntimeException("A closed publication was found when trying to establish for session id => " + sessionId);      }      offer=publication.offer(buffer);    } else {      break;    }  }}  }
class C{  private static void addPersonAttributes(Element formDataNode,Element modelNode,Element xformsNode){  List<PersonAttributeType> attributeTypes=Context.getPersonService().getPersonAttributeTypes(PERSON_TYPE.PERSON,null);  for (  PersonAttributeType attribute : attributeTypes)   addPatientAttributeNode(attribute,formDataNode,modelNode,xformsNode);}  }
class C{  public WifiRecord(String bssid,String ssid,String capabilities,int frequency,int level,long timestamp,PositionRecord request,PositionRecord last,CatalogStatus catalogStatus){  this(bssid,ssid,capabilities,frequency,level,timestamp,request,last,RadioBeacon.SESSION_NOT_TRACKING,catalogStatus);}  }
class C{  private boolean contains(Body body,Vector2 point){  Transform transform=body.getTransform();  int fSize=body.getFixtureCount();  for (int j=fSize - 1; j >= 0; j--) {    BodyFixture bodyFixture=body.getFixture(j);    Convex convex=bodyFixture.getShape();    if (contains(convex,transform,point)) {      return true;    }  }  return false;}  }
class C{  public void downloadExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  DocumentoVitalPO documentoVital=(DocumentoVitalPO)getFromTemporalSession(request,DocumentosVitalesConstants.DOCUMENTO_VITAL_KEY);  if (documentoVital != null) {    try {      download(response,documentoVital.getNombreCompletoFichero(),documentoVital.getContenido());    } catch (    Exception e) {      obtenerErrores(request,true).add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.GLOBAL_ARCHIGEST_EXCEPTION,e.toString()));      goLastClientExecuteLogic(mappings,form,request,response);    }  } else {    obtenerErrores(request,true).add(ActionErrors.GLOBAL_MESSAGE,new ActionError(DocumentosVitalesConstants.ERRORS_DOCVITALES_DOC_NO_ENCONTRADO));    goLastClientExecuteLogic(mappings,form,request,response);  }}  }
class C{  public static String[] values(){  return ALL_VALUES;}  }
class C{  @Override final public FunctionNode visit(ASTFunctionCall node,Object data) throws VisitorException {  final ConstantNode uriNode=(ConstantNode)node.jjtGetChild(0).jjtAccept(this,null);  final BigdataURI functionURI=(BigdataURI)uriNode.getValue();  final int nargs=node.jjtGetNumChildren() - 1;  final ValueExpressionNode[] args=new ValueExpressionNode[nargs];  for (int i=0; i < nargs; i++) {    final Node argNode=node.jjtGetChild(i + 1);    args[i]=(ValueExpressionNode)argNode.jjtAccept(this,null);  }  return new FunctionNode(functionURI,null,args);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static byte[] buildAacAudioSpecificConfig(int audioObjectType,int sampleRateIndex,int channelConfig){  byte[] audioSpecificConfig=new byte[2];  audioSpecificConfig[0]=(byte)((audioObjectType << 3) & 0xF8 | (sampleRateIndex >> 1) & 0x07);  audioSpecificConfig[1]=(byte)((sampleRateIndex << 7) & 0x80 | (channelConfig << 3) & 0x78);  return audioSpecificConfig;}  }
class C{  @Override public void readFrom(ChannelBuffer data,int length){  dataType=data.readInt();}  }
class C{  protected void updateEnableState(){  if (fLabel != null) {    fLabel.setEnabled(fEnabled);  }}  }
class C{  public Sheep(final Player owner){  super();  super.setOwner(owner);  setRPClass("sheep");  put("type","sheep");  initHP(HP);  setUp();  hunger=0;  timingAdjust=Rand.rand(10);  if (owner != null) {    owner.getZone().add(this);    owner.setSheep(this);  }  update();  updateSoundList();  logger.debug("Created Sheep: " + this);}  }
class C{  private static boolean equal(Number[][] array1,Number[][] array2){  if (array1 == null) {    return (array2 == null);  }  if (array2 == null) {    return false;  }  if (array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (!Arrays.equals(array1[i],array2[i])) {      return false;    }  }  return true;}  }
class C{  public void removeListener(final IModuleListener listener){  m_listeners.removeListener(listener);}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 3:{        addToken(Token.WHITESPACE,false);      }case 5:    break;case 2:{    addNullToken();    return firstToken;  }case 6:break;case 4:{addToken(Token.IDENTIFIER,true);}case 7:break;case 1:{addToken(Token.IDENTIFIER,false);}case 8:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case YYINITIAL:{addNullToken();return firstToken;}case 22:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() == null)   Sage.remove(getString(stack)); else   stack.getUIMgr().remove(getString(stack));  return null;}  }
class C{  public AttributeTableModel(Instances instances){  setInstances(instances);}  }
class C{  private StoragePlatform createStoragePlatformFromEntity(StoragePlatformEntity storagePlatformEntity){  StoragePlatform storagePlatform=new StoragePlatform();  storagePlatform.setName(storagePlatformEntity.getName());  return storagePlatform;}  }
class C{  @JsonCreator public DefaultInitRequest(@JsonProperty("workingDir") String workingDir,@JsonProperty("bare") boolean bare,@JsonProperty("initCommit") boolean initCommit){  this.workingDir=workingDir;  this.bare=bare;  this.initCommit=initCommit;}  }
class C{  private VisorResolveHostNameJob(Void arg,boolean debug){  super(arg,debug);}  }
class C{  public static Address fromPublicKey(final PublicKey publicKey){  return fromPublicKey(NetworkInfos.getDefault().getVersion(),publicKey);}  }
class C{  void paintGlassImpl(Graphics g){  if (parent != null) {    parent.paintGlassImpl(g);  }  paintTensile(g);}  }
class C{  public TerritoryAttachment(final String name,final Attachable attachable,final GameData gameData){  super(name,attachable,gameData);}  }
class C{  public void insertBefore(final AbstractInsnNode location,final AbstractInsnNode insn){  ++size;  AbstractInsnNode prev=location.prev;  if (prev == null) {    first=insn;  } else {    prev.next=insn;  }  location.prev=insn;  insn.next=location;  insn.prev=prev;  cache=null;  insn.index=0;}  }
class C{  public Cursor query(SQLiteDatabase db,String[] projectionIn,String selection,String[] selectionArgs,String groupBy,String having,String sortOrder,String limit){  return query(db,projectionIn,selection,selectionArgs,groupBy,having,sortOrder,limit,null);}  }
class C{  public InputOutput<T> seekFloor(BytesRef target) throws IOException {  this.target=target;  targetLength=target.length;  super.doSeekFloor();  return setResult();}  }
class C{  public boolean handleMessage(Message m,Object o){  if (!super.handleMessage(m,o)) {    if (m.getType().equals(MasterAgent.M_EVALUATE_POP_CHUNK)) {      output.message("A chunk arrived from " + m.getSender().name);      population.subpops[0].individuals=(Individual[])o;      evaluator.evaluatePopulation(this);      statistics.postEvaluationStatistics(this);    } else     return false;  }  return true;}  }
class C{  public static Bitmap scaleBitmap(Context ctx,Bitmap source,int newHeight){  int w=(int)(newHeight * source.getWidth() / ((double)source.getHeight()));  Bitmap photo=Bitmap.createScaledBitmap(source,w,newHeight,true);  return photo;}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public static Rectangle fromPolygon(Polygon[] polygons){  double minLat=Double.POSITIVE_INFINITY;  double maxLat=Double.NEGATIVE_INFINITY;  double minLon=Double.POSITIVE_INFINITY;  double maxLon=Double.NEGATIVE_INFINITY;  for (int i=0; i < polygons.length; i++) {    minLat=Math.min(polygons[i].minLat,minLat);    maxLat=Math.max(polygons[i].maxLat,maxLat);    minLon=Math.min(polygons[i].minLon,minLon);    maxLon=Math.max(polygons[i].maxLon,maxLon);  }  return new Rectangle(minLat,maxLat,minLon,maxLon);}  }
class C{  public INode remove(){  return list.removeFirst();}  }
class C{  protected void onContextInitialized0(final IgniteSpiContext spiCtx) throws IgniteSpiException {}  }
class C{  private static boolean looksLikeAnonymousClassDef(IDocument document,int position,String partitioning){  int previousCommaParenEqual=scanBackward(document,position - 1,partitioning,-1,new char[]{',','(','='});  if (previousCommaParenEqual == -1 || position < previousCommaParenEqual + 5)   return false;  if (isNewMatch(document,previousCommaParenEqual + 1,position - previousCommaParenEqual - 2,partitioning))   return true;  return false;}  }
class C{  public final static byte[] encodeToByte(byte[] sArr,boolean lineSep){  int sLen=sArr != null ? sArr.length : 0;  if (sLen == 0)   return new byte[0];  int eLen=(sLen / 3) * 3;  int cCnt=((sLen - 1) / 3 + 1) << 2;  int dLen=cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0);  byte[] dArr=new byte[dLen];  for (int s=0, d=0, cc=0; s < eLen; ) {    int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);    dArr[d++]=(byte)CA[(i >>> 18) & 0x3f];    dArr[d++]=(byte)CA[(i >>> 12) & 0x3f];    dArr[d++]=(byte)CA[(i >>> 6) & 0x3f];    dArr[d++]=(byte)CA[i & 0x3f];    if (lineSep && ++cc == 19 && d < dLen - 2) {      dArr[d++]='\r';      dArr[d++]='\n';      cc=0;    }  }  int left=sLen - eLen;  if (left > 0) {    int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);    dArr[dLen - 4]=(byte)CA[i >> 12];    dArr[dLen - 3]=(byte)CA[(i >>> 6) & 0x3f];    dArr[dLen - 2]=left == 2 ? (byte)CA[i & 0x3f] : (byte)'=';    dArr[dLen - 1]='=';  }  return dArr;}  }
class C{  public SuperBit(final int d,final int n,final int l,final long seed){  this(d,n,l,new Random(seed));}  }
class C{  public void write(byte[] bytes,int off,int len) throws IOException {  buf.put(bytes,off,len);}  }
class C{  public static Index index(String table,String name){  return new Index(table,name);}  }
class C{  public NullPointerException(){}  }
class C{  @Override public void write(TextWriterStream out,String label,Object object){}  }
class C{  @Override public final void cancel(){  if (isValid) {    isValid=false;    ((AbstractSelector)selector()).cancel(this);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void Disambiguate(){  for (int vtype=0; vtype <= num_vtypes; vtype++)   for (int i=0; i < symtab.size(); i++) {    SymTabEntry se=(SymTabEntry)symtab.elementAt(i);    if (se.type == vtype) {      se.useThis=typePrefix[vtype] + se.id;      int suffixLength=0;      while (vtype > 0 && Ambiguous(se.useThis)) {        suffixLength=suffixLength + 1;        if (suffixLength == 1)         se.useThis=se.useThis + "_"; else         if (suffixLength > se.context.length() + 1)         se.useThis=se.useThis + vtype; else         se.useThis=se.useThis + se.context.charAt(suffixLength - 2);      }      if (!se.id.equals(se.useThis))       disambiguateReport.addElement("\\* " + vtypeName[se.type] + " "+ se.id+ ((se.context.length() == 0) ? "" : (" of " + se.cType + " "+ se.context))+ " at line "+ se.line+ " col "+ se.col+ " changed to "+ se.useThis);    }  }}  }
class C{  public void addItem(T item,int position){  contents.add(position,item);  notifyItemInserted(position);}  }
class C{  public static Match fromString(String match,OFVersion ofVersion) throws IllegalArgumentException {  boolean ver10=false;  if (match.equals("") || match.equalsIgnoreCase("any") || match.equalsIgnoreCase("all")|| match.equals("[]")) {    match="Match[]";  }  String[] tokens=match.split("[\\[,\\]]");  int initArg=0;  if (tokens[0].equals("Match")) {    initArg=1;  }  int i;  String[] tmp;  ArrayDeque<String[]> llValues=new ArrayDeque<String[]>();  for (i=initArg; i < tokens.length; i++) {    tmp=tokens[i].split("=");    if (tmp.length != 2) {      throw new IllegalArgumentException("Token " + tokens[i] + " does not have form 'key=value' parsing "+ match);    }    tmp[0]=tmp[0].toLowerCase();    llValues.add(tmp);  }  Match.Builder mb=OFFactories.getFactory(ofVersion).buildMatch();  if (ofVersion.equals(OFVersion.OF_10)) {    ver10=true;  }  while (!llValues.isEmpty()) {    IpProtocol ipProto=null;    String[] key_value=llValues.pollFirst();    String[] dataMask=key_value[1].split("/");    if (dataMask.length > 2) {      throw new IllegalArgumentException("[Data, Mask] " + dataMask + " does not have form 'data/mask' or 'data'"+ key_value[1]);    } else     if (dataMask.length == 1) {      log.debug("No mask detected in Match string: {}",key_value[1]);    } else     if (dataMask.length == 2) {      log.debug("Detected mask in Match string: {}",key_value[1]);    }switch (key_value[0]) {case STR_IN_PORT:      if (dataMask.length == 1) {        mb.setExact(MatchField.IN_PORT,OFPort.ofShort(dataMask[0].contains("0x") ? U16.of(Integer.valueOf(dataMask[0].replaceFirst("0x",""),16)).getRaw() : U16.of(Integer.valueOf(dataMask[0])).getRaw()));      } else {        mb.setMasked(MatchField.IN_PORT,OFPort.ofShort(dataMask[0].contains("0x") ? U16.of(Integer.valueOf(dataMask[0].replaceFirst("0x",""),16)).getRaw() : U16.of(Integer.valueOf(dataMask[0])).getRaw()),OFPort.ofShort(dataMask[1].contains("0x") ? U16.of(Integer.valueOf(dataMask[1].replaceFirst("0x",""),16)).getRaw() : U16.of(Integer.valueOf(dataMask[1])).getRaw()));      }    break;case STR_DL_DST:  if (dataMask.length == 1) {    mb.setExact(MatchField.ETH_DST,MacAddress.of(dataMask[0]));  } else {    mb.setMasked(MatchField.ETH_DST,MacAddress.of(dataMask[0]),MacAddress.of(dataMask[1]));  }break;case STR_DL_SRC:if (dataMask.length == 1) {mb.setExact(MatchField.ETH_SRC,MacAddress.of(dataMask[0]));} else {mb.setMasked(MatchField.ETH_SRC,MacAddress.of(dataMask[0]),MacAddress.of(dataMask[1]));}break;case STR_DL_TYPE:if (dataMask.length == 1) {mb.setExact(MatchField.ETH_TYPE,EthType.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.ETH_TYPE,EthType.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),EthType.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}break;case STR_DL_VLAN:if (dataMask.length == 1) {mb.setExact(MatchField.VLAN_VID,OFVlanVidMatch.ofVlan(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.VLAN_VID,OFVlanVidMatchWithMask.of(OFVlanVidMatch.ofVlan(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),OFVlanVidMatch.ofVlan(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1]))));}break;case STR_DL_VLAN_PCP:if (dataMask.length == 1) {mb.setExact(MatchField.VLAN_PCP,VlanPcp.of(dataMask[0].contains("0x") ? U8.t(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[0]))));} else {mb.setMasked(MatchField.VLAN_PCP,VlanPcp.of(dataMask[0].contains("0x") ? U8.t(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[0]))),VlanPcp.of(dataMask[1].contains("0x") ? U8.t(Short.valueOf(dataMask[1].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[1]))));}break;case STR_NW_DST:mb.setMasked(MatchField.IPV4_DST,IPv4AddressWithMask.of(key_value[1]));break;case STR_NW_SRC:mb.setMasked(MatchField.IPV4_SRC,IPv4AddressWithMask.of(key_value[1]));break;case STR_IPV6_DST:if (ver10 == true) {throw new IllegalArgumentException("OF Version incompatible");}mb.setMasked(MatchField.IPV6_DST,IPv6AddressWithMask.of(key_value[1]));break;case STR_IPV6_SRC:if (ver10 == true) {throw new IllegalArgumentException("OF Version incompatible");}mb.setMasked(MatchField.IPV6_SRC,IPv6AddressWithMask.of(key_value[1]));break;case STR_IPV6_FLOW_LABEL:if (ver10 == true) {throw new IllegalArgumentException("OF Version incompatible");}if (dataMask.length == 1) {mb.setExact(MatchField.IPV6_FLABEL,IPv6FlowLabel.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.IPV6_FLABEL,IPv6FlowLabel.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),IPv6FlowLabel.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}break;case STR_NW_PROTO:if (dataMask.length == 1) {mb.setExact(MatchField.IP_PROTO,IpProtocol.of(dataMask[0].contains("0x") ? Short.valueOf(dataMask[0].replaceFirst("0x",""),16) : Short.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.IP_PROTO,IpProtocol.of(dataMask[0].contains("0x") ? Short.valueOf(dataMask[0].replaceFirst("0x",""),16) : Short.valueOf(dataMask[0])),IpProtocol.of(dataMask[1].contains("0x") ? Short.valueOf(dataMask[1].replaceFirst("0x",""),16) : Short.valueOf(dataMask[1])));}break;case STR_NW_TOS:if (dataMask.length == 1) {mb.setExact(MatchField.IP_ECN,IpEcn.of(dataMask[0].contains("0x") ? U8.t(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[0]))));mb.setExact(MatchField.IP_DSCP,IpDscp.of(dataMask[0].contains("0x") ? U8.t(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[0]))));} else {mb.setMasked(MatchField.IP_ECN,IpEcn.of(dataMask[0].contains("0x") ? U8.t(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[0]))),IpEcn.of(dataMask[1].contains("0x") ? U8.t(Short.valueOf(dataMask[1].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[1]))));mb.setMasked(MatchField.IP_DSCP,IpDscp.of(dataMask[0].contains("0x") ? U8.t(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[0]))),IpDscp.of(dataMask[1].contains("0x") ? U8.t(Short.valueOf(dataMask[1].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[1]))));}break;case STR_NW_ECN:if (dataMask.length == 1) {mb.setExact(MatchField.IP_ECN,IpEcn.of(dataMask[0].contains("0x") ? U8.t(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[0]))));} else {mb.setMasked(MatchField.IP_ECN,IpEcn.of(dataMask[0].contains("0x") ? U8.t(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[0]))),IpEcn.of(dataMask[1].contains("0x") ? U8.t(Short.valueOf(dataMask[1].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[1]))));}break;case STR_NW_DSCP:if (dataMask.length == 1) {mb.setExact(MatchField.IP_DSCP,IpDscp.of(dataMask[0].contains("0x") ? U8.t(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[0]))));} else {mb.setMasked(MatchField.IP_DSCP,IpDscp.of(dataMask[0].contains("0x") ? U8.t(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[0]))),IpDscp.of(dataMask[1].contains("0x") ? U8.t(Short.valueOf(dataMask[1].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[1]))));}break;case STR_SCTP_DST:if (mb.get(MatchField.IP_PROTO) == null) {llValues.add(key_value);} else {if (dataMask.length == 1) {mb.setExact(MatchField.SCTP_DST,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.SCTP_DST,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),TransportPort.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}}break;case STR_SCTP_SRC:if (mb.get(MatchField.IP_PROTO) == null) {llValues.add(key_value);} else {if (dataMask.length == 1) {mb.setExact(MatchField.SCTP_SRC,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.SCTP_SRC,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),TransportPort.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}}break;case STR_UDP_DST:if (mb.get(MatchField.IP_PROTO) == null) {llValues.add(key_value);} else {if (dataMask.length == 1) {mb.setExact(MatchField.UDP_DST,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.UDP_DST,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),TransportPort.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}}break;case STR_UDP_SRC:if (mb.get(MatchField.IP_PROTO) == null) {llValues.add(key_value);} else {if (dataMask.length == 1) {mb.setExact(MatchField.UDP_SRC,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.UDP_SRC,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),TransportPort.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}}break;case STR_TCP_DST:if (mb.get(MatchField.IP_PROTO) == null) {llValues.add(key_value);} else {if (dataMask.length == 1) {mb.setExact(MatchField.TCP_DST,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.TCP_DST,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),TransportPort.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}}break;case STR_TCP_SRC:if (mb.get(MatchField.IP_PROTO) == null) {llValues.add(key_value);} else {if (dataMask.length == 1) {mb.setExact(MatchField.TCP_SRC,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.TCP_SRC,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),TransportPort.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}}break;case STR_TP_DST:if ((ipProto=mb.get(MatchField.IP_PROTO)) == null) {llValues.add(key_value);} else if (ipProto == IpProtocol.TCP) {if (dataMask.length == 1) {mb.setExact(MatchField.TCP_DST,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.TCP_DST,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),TransportPort.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}} else if (ipProto == IpProtocol.UDP) {if (dataMask.length == 1) {mb.setExact(MatchField.UDP_DST,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.UDP_DST,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),TransportPort.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}} else if (ipProto == IpProtocol.SCTP) {if (dataMask.length == 1) {mb.setExact(MatchField.SCTP_DST,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.SCTP_DST,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),TransportPort.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}}break;case STR_TP_SRC:if ((ipProto=mb.get(MatchField.IP_PROTO)) == null) {llValues.add(key_value);} else if (ipProto == IpProtocol.TCP) {if (dataMask.length == 1) {mb.setExact(MatchField.TCP_SRC,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.TCP_SRC,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),TransportPort.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}} else if (ipProto == IpProtocol.UDP) {if (dataMask.length == 1) {mb.setExact(MatchField.UDP_SRC,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.UDP_SRC,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),TransportPort.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}} else if (ipProto == IpProtocol.SCTP) {if (dataMask.length == 1) {mb.setExact(MatchField.SCTP_SRC,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.SCTP_SRC,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),TransportPort.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}}break;case STR_ICMP_TYPE:if (dataMask.length == 1) {mb.setExact(MatchField.ICMPV4_TYPE,ICMPv4Type.of(dataMask[0].contains("0x") ? Short.valueOf(dataMask[0].replaceFirst("0x",""),16) : Short.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.ICMPV4_TYPE,ICMPv4Type.of(dataMask[0].contains("0x") ? Short.valueOf(dataMask[0].replaceFirst("0x",""),16) : Short.valueOf(dataMask[0])),ICMPv4Type.of(dataMask[1].contains("0x") ? Short.valueOf(dataMask[1].replaceFirst("0x",""),16) : Short.valueOf(dataMask[1])));}break;case STR_ICMP_CODE:if (dataMask.length == 1) {mb.setExact(MatchField.ICMPV4_CODE,ICMPv4Code.of(dataMask[0].contains("0x") ? Short.valueOf(dataMask[0].replaceFirst("0x",""),16) : Short.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.ICMPV4_CODE,ICMPv4Code.of(dataMask[0].contains("0x") ? Short.valueOf(dataMask[0].replaceFirst("0x",""),16) : Short.valueOf(dataMask[0])),ICMPv4Code.of(dataMask[1].contains("0x") ? Short.valueOf(dataMask[1].replaceFirst("0x",""),16) : Short.valueOf(dataMask[1])));}break;case STR_ICMPV6_TYPE:if (ver10 == true) {throw new IllegalArgumentException("OF Version incompatible");}if (dataMask.length == 1) {mb.setExact(MatchField.ICMPV6_TYPE,dataMask[0].contains("0x") ? U8.of(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.of(Short.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.ICMPV6_TYPE,dataMask[0].contains("0x") ? U8.of(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.of(Short.valueOf(dataMask[0])),dataMask[1].contains("0x") ? U8.of(Short.valueOf(dataMask[1].replaceFirst("0x",""),16)) : U8.of(Short.valueOf(dataMask[1])));}break;case STR_ICMPV6_CODE:if (ver10 == true) {throw new IllegalArgumentException("OF Version incompatible");}if (dataMask.length == 1) {mb.setExact(MatchField.ICMPV6_CODE,dataMask[0].contains("0x") ? U8.of(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.of(Short.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.ICMPV6_CODE,dataMask[0].contains("0x") ? U8.of(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.of(Short.valueOf(dataMask[0])),dataMask[1].contains("0x") ? U8.of(Short.valueOf(dataMask[1].replaceFirst("0x",""),16)) : U8.of(Short.valueOf(dataMask[1])));}break;case STR_IPV6_ND_SSL:if (ver10 == true) {throw new IllegalArgumentException("OF Version incompatible");}if (dataMask.length == 1) {mb.setExact(MatchField.IPV6_ND_SLL,MacAddress.of(dataMask[0]));} else {mb.setMasked(MatchField.IPV6_ND_SLL,MacAddress.of(dataMask[0]),MacAddress.of(dataMask[1]));}break;case STR_IPV6_ND_TTL:if (ver10 == true) {throw new IllegalArgumentException("OF Version incompatible");}if (dataMask.length == 1) {mb.setExact(MatchField.IPV6_ND_TLL,MacAddress.of(dataMask[0]));} else {mb.setMasked(MatchField.IPV6_ND_TLL,MacAddress.of(dataMask[0]),MacAddress.of(dataMask[1]));}break;case STR_IPV6_ND_TARGET:if (ver10 == true) {throw new IllegalArgumentException("OF Version incompatible");}mb.setMasked(MatchField.IPV6_ND_TARGET,IPv6AddressWithMask.of(key_value[1]));break;case STR_ARP_OPCODE:if (dataMask.length == 1) {mb.setExact(MatchField.ARP_OP,dataMask[0].contains("0x") ? ArpOpcode.of(Integer.valueOf(dataMask[0].replaceFirst("0x",""),16)) : ArpOpcode.of(Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.ARP_OP,dataMask[0].contains("0x") ? ArpOpcode.of(Integer.valueOf(dataMask[0].replaceFirst("0x",""),16)) : ArpOpcode.of(Integer.valueOf(dataMask[0])),dataMask[1].contains("0x") ? ArpOpcode.of(Integer.valueOf(dataMask[1].replaceFirst("0x",""),16)) : ArpOpcode.of(Integer.valueOf(dataMask[1])));}break;case STR_ARP_SHA:if (dataMask.length == 1) {mb.setExact(MatchField.ARP_SHA,MacAddress.of(dataMask[0]));} else {mb.setMasked(MatchField.ARP_SHA,MacAddress.of(dataMask[0]),MacAddress.of(dataMask[1]));}break;case STR_ARP_DHA:if (dataMask.length == 1) {mb.setExact(MatchField.ARP_THA,MacAddress.of(dataMask[0]));} else {mb.setMasked(MatchField.ARP_THA,MacAddress.of(dataMask[0]),MacAddress.of(dataMask[1]));}break;case STR_ARP_SPA:mb.setMasked(MatchField.ARP_SPA,IPv4AddressWithMask.of(key_value[1]));break;case STR_ARP_DPA:mb.setMasked(MatchField.ARP_TPA,IPv4AddressWithMask.of(key_value[1]));break;case STR_MPLS_LABEL:if (dataMask.length == 1) {mb.setExact(MatchField.MPLS_LABEL,dataMask[0].contains("0x") ? U32.of(Long.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U32.of(Long.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.MPLS_LABEL,dataMask[0].contains("0x") ? U32.of(Long.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U32.of(Long.valueOf(dataMask[0])),dataMask[1].contains("0x") ? U32.of(Long.valueOf(dataMask[1].replaceFirst("0x",""),16)) : U32.of(Long.valueOf(dataMask[1])));}break;case STR_MPLS_TC:if (dataMask.length == 1) {mb.setExact(MatchField.MPLS_TC,dataMask[0].contains("0x") ? U8.of(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.of(Short.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.MPLS_TC,dataMask[0].contains("0x") ? U8.of(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.of(Short.valueOf(dataMask[0])),dataMask[1].contains("0x") ? U8.of(Short.valueOf(dataMask[1].replaceFirst("0x",""),16)) : U8.of(Short.valueOf(dataMask[1])));}break;case STR_MPLS_BOS:mb.setExact(MatchField.MPLS_BOS,key_value[1].equalsIgnoreCase("true") ? OFBooleanValue.TRUE : OFBooleanValue.FALSE);break;case STR_METADATA:if (dataMask.length == 1) {mb.setExact(MatchField.METADATA,dataMask[0].contains("0x") ? OFMetadata.ofRaw(Long.valueOf(dataMask[0].replaceFirst("0x",""),16)) : OFMetadata.ofRaw(Long.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.METADATA,dataMask[0].contains("0x") ? OFMetadata.ofRaw(Long.valueOf(dataMask[0].replaceFirst("0x",""),16)) : OFMetadata.ofRaw(Long.valueOf(dataMask[0])),dataMask[1].contains("0x") ? OFMetadata.ofRaw(Long.valueOf(dataMask[1].replaceFirst("0x",""),16)) : OFMetadata.ofRaw(Long.valueOf(dataMask[1])));}break;case STR_TUNNEL_ID:if (dataMask.length == 1) {mb.setExact(MatchField.TUNNEL_ID,dataMask[0].contains("0x") ? U64.of(Long.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U64.of(Long.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.TUNNEL_ID,dataMask[0].contains("0x") ? U64.of(Long.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U64.of(Long.valueOf(dataMask[0])),dataMask[1].contains("0x") ? U64.of(Long.valueOf(dataMask[1].replaceFirst("0x",""),16)) : U64.of(Long.valueOf(dataMask[1])));}break;case STR_PBB_ISID:break;default :throw new IllegalArgumentException("unknown token " + key_value + " parsing "+ match);}}return mb.build();}  }
class C{  public void addDatapoints(Map<Long,String> datapoints){  if (datapoints != null) {    _datapoints.putAll(datapoints);  }}  }
class C{  public static double uniform(double min,double max){  double x=min + (max - min) * raw();  return x;}  }
class C{  public boolean isPublic(){  return (Modifier.isPublic(modifiers()));}  }
class C{  public static double noise(double x,double y,double z){  double n0=0, n1=0, n2=0, n3=0;  double s=(x + y + z) * F3;  int i=fastfloor(x + s);  int j=fastfloor(y + s);  int k=fastfloor(z + s);  double t=(i + j + k) * G3;  double x0=x - (i - t);  double y0=y - (j - t);  double z0=z - (k - t);  int i1, j1, k1;  int i2, j2, k2;  if (x0 >= y0) {    if (y0 >= z0) {      i1=1;      j1=0;      k1=0;      i2=1;      j2=1;      k2=0;    } else     if (x0 >= z0) {      i1=1;      j1=0;      k1=0;      i2=1;      j2=0;      k2=1;    } else {      i1=0;      j1=0;      k1=1;      i2=1;      j2=0;      k2=1;    }  } else {    if (y0 < z0) {      i1=0;      j1=0;      k1=1;      i2=0;      j2=1;      k2=1;    } else     if (x0 < z0) {      i1=0;      j1=1;      k1=0;      i2=0;      j2=1;      k2=1;    } else {      i1=0;      j1=1;      k1=0;      i2=1;      j2=1;      k2=0;    }  }  double x1=x0 - i1 + G3;  double y1=y0 - j1 + G3;  double z1=z0 - k1 + G3;  double x2=x0 - i2 + F3;  double y2=y0 - j2 + F3;  double z2=z0 - k2 + F3;  double x3=x0 - 0.5;  double y3=y0 - 0.5;  double z3=z0 - 0.5;  int ii=i & 0xff;  int jj=j & 0xff;  int kk=k & 0xff;  double t0=0.6 - x0 * x0 - y0 * y0 - z0 * z0;  if (t0 > 0) {    t0*=t0;    int gi0=perm[ii + perm[jj + perm[kk]]] % 12;    n0=t0 * t0 * dot(grad3[gi0],x0,y0,z0);  }  double t1=0.6 - x1 * x1 - y1 * y1 - z1 * z1;  if (t1 > 0) {    t1*=t1;    int gi1=perm[ii + i1 + perm[jj + j1 + perm[kk + k1]]] % 12;    n1=t1 * t1 * dot(grad3[gi1],x1,y1,z1);  }  double t2=0.6 - x2 * x2 - y2 * y2 - z2 * z2;  if (t2 > 0) {    t2*=t2;    int gi2=perm[ii + i2 + perm[jj + j2 + perm[kk + k2]]] % 12;    n2=t2 * t2 * dot(grad3[gi2],x2,y2,z2);  }  double t3=0.6 - x3 * x3 - y3 * y3 - z3 * z3;  if (t3 > 0) {    t3*=t3;    int gi3=perm[ii + 1 + perm[jj + 1 + perm[kk + 1]]] % 12;    n3=t3 * t3 * dot(grad3[gi3],x3,y3,z3);  }  return 32.0 * (n0 + n1 + n2+ n3);}  }
class C{  @SuppressWarnings("UnusedParameters") public final float[] findText(int x1,int y1,int x2,int y2,final String[] terms,final int searchType) throws PdfException {  if (terms == null) {    return new float[]{};  }  final Vector_Float resultCoords=new Vector_Float(0);  final Vector_String resultTeasers=new Vector_String(0);  final int[] v=validateCoordinates(x1,y1,x2,y2);  x1=v[0];  y1=v[1];  x2=v[2];  y2=v[3];  copyToArraysPartial(x1,y2,x2,y1);  cleanupShadowsAndDrownedObjects(false);  final int[] items=getsortedUnusedFragments(true,false);  final int[] unsorted=getWritingModeCounts(items);  final int[] writingModes=getWritingModeOrder(unsorted);  for (int u=0; u != writingModes.length; u++) {    final int mode=writingModes[u];    if (unsorted[mode] != 0) {      searchWritingMode(items,mode,searchType,terms,resultCoords,resultTeasers);    }  }  return resultCoords.get();}  }
class C{  public String makeRelative(RepositoryLocation relativeToFolder){  if (!this.repositoryName.equals(relativeToFolder.repositoryName)) {    return getAbsoluteLocation();  }  int min=Math.min(this.path.length,relativeToFolder.path.length);  int i=0;  while (i < min && this.path[i].equals(relativeToFolder.path[i])) {    i++;  }  StringBuilder result=new StringBuilder();  for (int j=i; j < relativeToFolder.path.length; j++) {    result.append("..");    result.append(RepositoryLocation.SEPARATOR);  }  for (int j=i; j < this.path.length; j++) {    result.append(this.path[j]);    if (j < this.path.length - 1) {      result.append(RepositoryLocation.SEPARATOR);    }  }  return result.toString();}  }
class C{  private void updateMinMaxYByIteration(){  this.minY=Double.NaN;  this.maxY=Double.NaN;  Iterator iterator=this.data.iterator();  while (iterator.hasNext()) {    TimeSeriesDataItem item=(TimeSeriesDataItem)iterator.next();    updateBoundsForAddedItem(item);  }}  }
class C{  public Rational(){  this(0,1);}  }
class C{  public AcceptHeader createAcceptHeader(String contentType,String contentSubType) throws ParseException {  if (contentType == null || contentSubType == null)   throw new NullPointerException("contentType or subtype is null ");  Accept accept=new Accept();  accept.setContentType(contentType);  accept.setContentSubType(contentSubType);  return accept;}  }
class C{  public static boolean isDatabaseOK(Properties ctx){  String version="?";  String sql="SELECT Version FROM AD_System";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=prepareStatement(sql,null);    rs=pstmt.executeQuery();    if (rs.next())     version=rs.getString(1);  } catch (  SQLException e) {    log.log(Level.SEVERE,"Problem with AD_System Table - Run system.sql script - " + e.toString());    return false;  } finally {    close(rs);    close(pstmt);    rs=null;    pstmt=null;  }  log.info("DB_Version=" + version);  if (Adempiere.DB_VERSION.equals(version))   return true;  String AD_Message="DatabaseVersionError";  String title=org.compiere.Adempiere.getName() + " " + Msg.getMsg(ctx,AD_Message,true);  String msg=Msg.getMsg(ctx,AD_Message);  msg=MessageFormat.format(msg,new Object[]{Adempiere.DB_VERSION,version});  Object[] options={UIManager.get("OptionPane.noButtonText"),"Migrate"};  int no=JOptionPane.showOptionDialog(null,msg,title,JOptionPane.DEFAULT_OPTION,JOptionPane.ERROR_MESSAGE,UIManager.getIcon("OptionPane.errorIcon"),options,options[0]);  if (no == 1) {    JOptionPane.showMessageDialog(null,"Start RUN_Migrate (in utils)\nSee: http://www.adempiere.com/maintain",title,JOptionPane.INFORMATION_MESSAGE);    Env.exitEnv(1);  }  return false;}  }
class C{  public final static float geographicLatitude(float lat,float flat){  float f=1.0f - flat;  return (float)Math.atan((float)Math.tan(lat) / (f * f));}  }
class C{  public PivotSeries(Strategy strategy,String name,String type,String description,Boolean displayOnChart,Integer chartRGBColor,Boolean subChart){  super(strategy,name,type,description,displayOnChart,chartRGBColor,subChart);}  }
class C{  @Override public void agg(Object newVal){  if (newVal instanceof byte[]) {    ByteBuffer buffer=ByteBuffer.wrap((byte[])newVal);    buffer.rewind();    while (buffer.hasRemaining()) {      aggVal+=buffer.getDouble();      count+=buffer.getDouble();      firstTime=false;    }    return;  }  aggVal+=((Number)newVal).doubleValue();  count++;  firstTime=false;}  }
class C{  private FileShare prepareEmptyFileSystem(FileSystemParam param,Project project,TenantOrg tenantOrg,VirtualArray varray,VirtualPool vpool,DataObject.Flag[] flags,String task){  _log.debug("prepareEmptyFileSystem start...");  StoragePool pool=null;  FileShare fs=new FileShare();  fs.setId(URIUtil.createId(FileShare.class));  fs.setLabel(param.getLabel());  String convertedName=param.getLabel().replaceAll("[^\\dA-Za-z\\_]","");  _log.info("Original name {} and converted name {}",param.getLabel(),convertedName);  fs.setName(convertedName);  Long fsSize=SizeUtil.translateSize(param.getSize());  fs.setCapacity(fsSize);  fs.setNotificationLimit(Long.valueOf(param.getNotificationLimit()));  fs.setSoftLimit(Long.valueOf(param.getSoftLimit()));  fs.setSoftGracePeriod(param.getSoftGrace());  fs.setVirtualPool(param.getVpool());  if (project != null) {    fs.setProject(new NamedURI(project.getId(),fs.getLabel()));  }  fs.setTenant(new NamedURI(tenantOrg.getId(),param.getLabel()));  fs.setVirtualArray(varray.getId());  if (VirtualPool.ProvisioningType.Thin.toString().equalsIgnoreCase(vpool.getSupportedProvisioningType())) {    fs.setThinlyProvisioned(Boolean.TRUE);  }  fs.setOpStatus(new OpStatusMap());  Operation op=new Operation();  op.setResourceType(ResourceOperationTypeEnum.CREATE_FILE_SYSTEM);  fs.getOpStatus().createTaskStatus(task,op);  if (flags != null) {    fs.addInternalFlags(flags);  }  _dbClient.createObject(fs);  return fs;}  }
class C{  public void callback(String url,T object,AjaxStatus status){}  }
class C{  private void buildFromSorted(int size,Iterator it,java.io.ObjectInputStream str,Object defaultVal) throws java.io.IOException, ClassNotFoundException {  this.size=size;  root=buildFromSorted(0,0,size - 1,computeRedLevel(size),it,str,defaultVal);}  }
class C{  protected void startSourceConnection(){  try {    sourceConn.start();  } catch (  JMSException e) {    ActiveMQJMSBridgeLogger.LOGGER.jmsBridgeSrcConnectError(e,bridgeName);  }}  }
class C{  private void compareSurrogateKeyData(List<String> data,Dictionary forwardDictionary){  int surrogateKey=0;  for (int i=0; i < data.size(); i++) {    surrogateKey++;    String dictionaryValue=forwardDictionary.getDictionaryValueForKey(surrogateKey);    assertTrue(data.get(i).equals(dictionaryValue));  }}  }
class C{  @Override public boolean putProfile(Profile profile,boolean forceProfile){  assert profile instanceof BucketProfile;  BucketProfile bp=(BucketProfile)profile;  if (!bp.isHosting && !bp.isInitializing) {    if (logger.isTraceEnabled(LogMarker.DA)) {      logger.trace(LogMarker.DA,"BucketAdvisor#putProfile early out");    }    return false;  }  if (logger.isTraceEnabled(LogMarker.DA)) {    logger.trace(LogMarker.DA,"BucketAdvisor#putProfile profile=<{}> force={}; profile = {}",profile,forceProfile,bp);  }  final boolean applied;synchronized (this) {    profile.initialMembershipVersion=Long.MIN_VALUE;    applied=super.putProfile(profile,forceProfile);    if (applied && !isPrimary()) {      if (bp.isPrimary) {        setPrimaryMember(bp.getDistributedMember());      } else {        notPrimary(bp.getDistributedMember());      }    }  }  return applied;}  }
class C{  public void removeBookmarkedConference(String jid) throws XMPPException {  retrieveBookmarks();  Iterator<BookmarkedConference> it=bookmarks.getBookmarkedConferences().iterator();  while (it.hasNext()) {    BookmarkedConference conference=it.next();    if (conference.getJid().equalsIgnoreCase(jid)) {      if (conference.isShared()) {        throw new IllegalArgumentException("Conference is shared and can't be removed");      }      it.remove();      privateDataManager.setPrivateData(bookmarks);      return;    }  }}  }
class C{  private void initResponseSource() throws IOException {  responseSource=ResponseSource.NETWORK;  if (!policy.getUseCaches())   return;  OkResponseCache responseCache=client.getOkResponseCache();  if (responseCache == null)   return;  CacheResponse candidate=responseCache.get(uri,method,requestHeaders.getHeaders().toMultimap(false));  if (candidate == null)   return;  Map<String,List<String>> responseHeadersMap=candidate.getHeaders();  cachedResponseBody=candidate.getBody();  if (!acceptCacheResponseType(candidate) || responseHeadersMap == null || cachedResponseBody == null) {    Util.closeQuietly(cachedResponseBody);    return;  }  RawHeaders rawResponseHeaders=RawHeaders.fromMultimap(responseHeadersMap,true);  cachedResponseHeaders=new ResponseHeaders(uri,rawResponseHeaders);  long now=System.currentTimeMillis();  this.responseSource=cachedResponseHeaders.chooseResponseSource(now,requestHeaders);  if (responseSource == ResponseSource.CACHE) {    this.cacheResponse=candidate;    setResponse(cachedResponseHeaders,cachedResponseBody);  } else   if (responseSource == ResponseSource.CONDITIONAL_CACHE) {    this.cacheResponse=candidate;  } else   if (responseSource == ResponseSource.NETWORK) {    Util.closeQuietly(cachedResponseBody);  } else {    throw new AssertionError();  }}  }
class C{  protected boolean notDeleted(){  if (fOffset < fPosition.offset && (fPosition.offset + fPosition.length < fOffset + fLength)) {    fPosition.delete();    try {      fDocument.removePosition(fCategory,fPosition);    } catch (    BadPositionCategoryException x) {    }    return false;  }  return true;}  }
class C{  protected void enableButtons(){  if (m_PAttributeButton != null) {    if (p_table == null)     return;    int row=p_table.getSelectedIndex();    int rows=p_table.getRowCount();    if (p_table.getShowTotals())     rows=rows - 1;    if (row < 0 || row > rows) {      m_PAttributeButton.setEnabled(false);      super.enableButtons();      return;    }    boolean enabled=false;    try {      Object value=p_table.getValueAt(row,INDEX_PATTRIBUTE);      enabled=Boolean.TRUE.equals(value);    } catch (    Exception e) {      enabled=false;    }    if (enabled && p_table.isMultiSelection()) {      int checkedRows=getNumRecordsSelected();      log.fine("Checked Rows: " + checkedRows);      if (checkedRows > 1)       enabled=false;    }    m_PAttributeButton.setEnabled(enabled);  }  super.enableButtons();}  }
class C{  @SuppressWarnings("unchecked") public final int compare(Object o1,Object o2){  LabelValue lhs=(LabelValue)o1;  LabelValue rhs=(LabelValue)o2;  return c.compare(lhs.getLabel(),rhs.getLabel());}  }
class C{  private void ensureEntryArrayMutable(){  checkMutable();  if (entryList.isEmpty() && !(entryList instanceof ArrayList)) {    entryList=new ArrayList<Entry>(maxArraySize);  }}  }
class C{  @PrePersist public void prePersist(){  lockTime=System.currentTimeMillis();}  }
class C{  @VisibleForTesting ResponseDecisionMeta handleFeature(final Feature feature,final CheckRequest checkRequest){  ResponseDecisionMeta responseDecisionMeta;  if (feature.state == null) {    if (feature.rules == null) {      throw new IllegalStateException("You must have rules in case the feature does not have a base state");    }    for (    Rule rule : feature.rules) {      if (RuleMatcher.matchRule(rule)) {        responseDecisionMeta=getRuleMatchedResponseDecision(rule);        responseDecisionMeta.featureMetadata=feature.featureMetadata;        return responseDecisionMeta;      }    }    responseDecisionMeta=getDefaultResponseDecision(feature,checkRequest);    responseDecisionMeta.featureMetadata=feature.featureMetadata;    return responseDecisionMeta;  } else {    responseDecisionMeta=getStatePoweredResponseDecision(feature);    responseDecisionMeta.featureMetadata=feature.featureMetadata;    return responseDecisionMeta;  }}  }
class C{  private static String execCommand(String command){  Process cmd;  try {    cmd=Runtime.getRuntime().exec(command);  } catch (  Exception e) {    System.err.println("-- Error executing command: " + command + " - "+ e.toString());    return null;  }  if (DEBUG)   System.out.println("** Command executed: " + command);  StringBuffer bufOut=new StringBuffer();  StringBuffer bufErr=new StringBuffer();  try {    InputStream in=cmd.getInputStream();    InputStream err=cmd.getErrorStream();    int c;    while ((c=in.read()) != -1)     bufOut.append((char)c);    in.close();    while ((c=err.read()) != -1)     bufErr.append((char)c);    err.close();  } catch (  Exception e) {    System.err.println("-- Error reading output: " + e.toString());    return null;  }  if (DEBUG) {    System.out.println("** Command result: " + bufOut.toString());    System.out.println("** Command error: " + bufErr.toString());  }  return bufOut.toString();}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2){  return construct(e1,e2);}  }
class C{  public static String concatenateName(String name1,String name2){  StringBuffer buf=new StringBuffer();  if (name1 != null && name1.length() > 0) {    buf.append(name1);  }  if (name2 != null && name2.length() > 0) {    if (buf.length() > 0) {      buf.append('.');    }    buf.append(name2);  }  return buf.toString();}  }
class C{  public void forward(HttpServerRequest request,final Buffer requestBody){  if (httpHook.getMethods().isEmpty()) {    forwarder.handle(request,requestBody);  } else {    if (httpHook.getMethods().contains(request.method().name())) {      forwarder.handle(request,requestBody);    }  }}  }
class C{  private ModuleSpecifierContentProposalProvider(IPath rootFolder){  this.rootFolder=rootFolder;}  }
class C{  public boolean[] toBooleanArray(){  boolean[] array=new boolean[length];  for (int i=0; i < length; i++) {    array[i]=get(i) != 0.0 ? true : false;  }  return array;}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.String getSystemPackage0(java.lang.String)")) {    java_lang_Package_getSystemPackage0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.String[] getSystemPackages0()")) {    java_lang_Package_getSystemPackages0(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public Charset charset(){  return charset != null ? Charset.forName(charset) : null;}  }
class C{  public static RegionStatisticsResponse create(DistributionManager dm,InternalDistributedMember recipient,Region r){  RegionStatisticsResponse m=new RegionStatisticsResponse();  m.setRecipient(recipient);  m.regionStatistics=new RemoteCacheStatistics(r.getStatistics());  return m;}  }
class C{  public void animateText(){  animateText(getStartValue(),getEndValue());}  }
class C{  public boolean isParseComments(){  return parseComments;}  }
class C{  public void addAnimation(BaseAnim anim){  animList.add(anim);}  }
class C{  @Override protected void handleConnect(Connector start,Connector end){  TaskFigure sf=(TaskFigure)start.getOwner();  TaskFigure ef=(TaskFigure)end.getOwner();  sf.addDependency(this);  ef.addDependency(this);}  }
class C{  public static DeleteServiceSessionsForSubscription parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeleteServiceSessionsForSubscription object=new DeleteServiceSessionsForSubscription();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"deleteServiceSessionsForSubscription".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (DeleteServiceSessionsForSubscription)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","subscriptionKey").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setSubscriptionKey(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));      reader.next();    } else {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  static public void assertEquals(int expected,int actual){  assertEquals(null,expected,actual);}  }
class C{  public void closeResultSet(ResultSet rs){  try {    if (rs != null) {      Statement stmt=rs.getStatement();      rs.close();      if (stmt != null)       stmt.close();    }  } catch (  SQLException e) {    logger.error("Error al cerrar el ResultSet",e);  }}  }
class C{  public RMSProp(double rho){  setRho(rho);}  }
class C{  public boolean isTaxExempt(){  Object oo=get_Value(COLUMNNAME_IsTaxExempt);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static AtomContent forEntry(XmlNamespaceDictionary namespaceDictionary,Object entry){  return new AtomContent(namespaceDictionary,entry,true);}  }
class C{  private void createCSVvalue(StringBuffer sb,char delimiter,String content){  if (content == null || content.length() == 0)   return;  boolean needMask=false;  StringBuffer buff=new StringBuffer();  char chars[]=content.toCharArray();  for (int i=0; i < chars.length; i++) {    char c=chars[i];    if (c == '"') {      needMask=true;      buff.append(c);    } else     if (!needMask && (c == delimiter || !Character.isLetterOrDigit(c)))     needMask=true;    buff.append(c);  }  if (needMask)   sb.append('"').append(buff).append('"'); else   sb.append(buff);}  }
class C{  public boolean deleteRows(Map<String,?> fromRow) throws IOException {  return deleteRowsImpl(findRows(fromRow).setColumnNames(Collections.<String>emptySet()).iterator());}  }
class C{  private void check(final int n){  if (n < 0)   throw new ArithmeticException("Factorial: expected n >= 0");}  }
class C{  static void testIntFloorMod(int x,int y,Object expected){  Object result=doFloorMod(x,y);  if (!resultEquals(result,expected)) {    fail("FAIL: Math.floorMod(%d, %d) = %s; expected %s%n",x,y,result,expected);  }  Object strict_result=doStrictFloorMod(x,y);  if (!resultEquals(strict_result,expected)) {    fail("FAIL: StrictMath.floorMod(%d, %d) = %s; expected %s%n",x,y,strict_result,expected);  }  try {    int tmp=x / y;    double ff=x - Math.floor((double)x / (double)y) * y;    int fr=(int)ff;    boolean t=(fr == ((Integer)result));    if (!result.equals(fr)) {      fail("FAIL: Math.floorMod(%d, %d) = %s differs from Math.floor(x, y): %d%n",x,y,result,fr);    }  } catch (  ArithmeticException ae) {    if (y != 0) {      fail("FAIL: Math.floorMod(%d, %d); unexpected %s%n",x,y,ae);    }  }}  }
class C{  public boolean compareNotifyContext(Object object){  return context == object;}  }
class C{  public int compare(final T o1,final T o2){  String sig1=StringUtility.constructMethodSignature(o1.getMethod().getMethod(),o1.getParameters());  String sig2=StringUtility.constructMethodSignature(o2.getMethod().getMethod(),o2.getParameters());  return sig1.compareTo(sig2);}  }
class C{  public Object run(Class scriptClass,GroovyClassLoader loader){  try {    Class testNGClass=loader.loadClass("org.testng.TestNG");    Object testng=InvokerHelper.invokeConstructorOf(testNGClass,new Object[]{});    InvokerHelper.invokeMethod(testng,"setTestClasses",new Object[]{scriptClass});    Class listenerClass=loader.loadClass("org.testng.TestListenerAdapter");    Object listener=InvokerHelper.invokeConstructorOf(listenerClass,new Object[]{});    InvokerHelper.invokeMethod(testng,"addListener",new Object[]{listener});    return InvokerHelper.invokeMethod(testng,"run",new Object[]{});  } catch (  ClassNotFoundException e) {    throw new GroovyRuntimeException("Error running TestNG test.",e);  }}  }
class C{  private static boolean checkForTarget(BeanInstance candidate,Vector<Object> listToCheck,Integer... tab){  int tabIndex=0;  if (tab.length > 0) {    tabIndex=tab[0].intValue();  }  Vector<BeanConnection> connections=TABBED_CONNECTIONS.get(tabIndex);  for (int i=0; i < connections.size(); i++) {    BeanConnection bc=connections.elementAt(i);    if (bc.getTarget() != candidate) {      continue;    }    for (int j=0; j < listToCheck.size(); j++) {      BeanInstance tempSource=(BeanInstance)listToCheck.elementAt(j);      if (bc.getSource() == tempSource) {        return true;      }    }  }  return false;}  }
class C{  public void testLong() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new NumericDocValuesField("value",3000000000L));  doc.add(newStringField("value","3000000000",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new NumericDocValuesField("value",-1));  doc.add(newStringField("value","-1",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new NumericDocValuesField("value",4));  doc.add(newStringField("value","4",Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.LONG));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("3000000000",searcher.doc(td.scoreDocs[2].doc).get("value"));  ir.close();  dir.close();}  }
class C{  public boolean isWaitingRequest(Request request){  return exchangeMap.containsKey(request);}  }
class C{  private void installSubcomponents(){  int decorationStyle=getWindowDecorationStyle();  if (decorationStyle == JRootPane.FRAME || decorationStyle == JRootPane.PLAIN_DIALOG) {    createActions();    menuBar=createMenuBar();    add(menuBar);    createButtons();    add(closeButton);    Object isSetupButtonVisibleObj=UIManager.get("RootPane.setupButtonVisible");    boolean isSetupButtonVisible=(isSetupButtonVisibleObj == null ? true : (Boolean)isSetupButtonVisibleObj);    if (isSetupButtonVisible)     add(setupButton);    if (decorationStyle != JRootPane.PLAIN_DIALOG) {      add(iconifyButton);      add(toggleButton);      menuBar.setEnabled(false);    }  } else   if (decorationStyle == JRootPane.INFORMATION_DIALOG || decorationStyle == JRootPane.ERROR_DIALOG || decorationStyle == JRootPane.COLOR_CHOOSER_DIALOG || decorationStyle == JRootPane.FILE_CHOOSER_DIALOG || decorationStyle == JRootPane.QUESTION_DIALOG || decorationStyle == JRootPane.WARNING_DIALOG) {    createActions();    createButtons();    add(closeButton);  }}  }
class C{  public AttributeSet copyAttributes(){  return (AttributeSet)clone();}  }
class C{  private Object writeReplace(){  return new Ser(Ser.YEAR_MONTH_TYPE,this);}  }
class C{  private int assertPivotCountsAreCorrect(String pivotName,SolrParams baseParams,PivotField constraint) throws SolrServerException {  SolrParams p=SolrParams.wrapAppended(baseParams,params("fq",buildFilter(constraint)));  List<PivotField> subPivots=null;  try {    assertNumFound(pivotName,constraint.getCount(),p);    subPivots=constraint.getPivot();  } catch (  Exception e) {    throw new RuntimeException(pivotName + ": count query failed: " + p+ ": "+ e.getMessage(),e);  }  int depth=0;  if (null != subPivots) {    assertTraceOk(pivotName,baseParams,subPivots);    for (    PivotField subPivot : subPivots) {      depth=assertPivotCountsAreCorrect(pivotName,p,subPivot);    }  }  return depth + 1;}  }
class C{  public List<RelatedResourceRep> listByHost(URI hostId){  UnManagedVolumeList response=client.get(UnManagedVolumeList.class,PathConstants.UNMANAGED_VOLUME_BY_HOST_URL,hostId);  return ResourceUtils.defaultList(response.getUnManagedVolumes());}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case EipPackage.SERVICE_REF__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case EipPackage.SERVICE_REF__REFERENCE:  return REFERENCE_EDEFAULT == null ? reference != null : !REFERENCE_EDEFAULT.equals(reference);case EipPackage.SERVICE_REF__OPERATIONS:return operations != null && !operations.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public final byte[] encode() throws IOException {  DerOutputStream out=new DerOutputStream();  derEncode(out);  return out.toByteArray();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:22.391 -0500",hash_original_method="6CF19E73C026523F689130FF9C39751C",hash_generated_method="1598F5EB9AD023A3CBF17A833242949C") public CancellationException(String message){  super(message);}  }
class C{  public DeviceIterator(Iterator<Device> subIterator,IEntityClass[] entityClasses,Long macAddress,Short vlan,Integer ipv4Address,Long switchDPID,Integer switchPort){  super(subIterator);  this.entityClasses=entityClasses;  this.subIterator=subIterator;  this.macAddress=macAddress;  this.vlan=vlan;  this.ipv4Address=ipv4Address;  this.switchDPID=switchDPID;  this.switchPort=switchPort;}  }
class C{  public static void binaryToKOML(String binary,String koml) throws Exception {  Object o;  checkKOML();  o=readBinary(binary);  if (o == null)   throw new Exception("Failed to deserialize object from binary file '" + binary + "'!");  KOML.write(koml,o);}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  public static TrapCodeOperand StackOverflow(){  return new TrapCodeOperand((byte)RuntimeEntrypoints.TRAP_STACK_OVERFLOW);}  }
class C{  protected void fireActionPerformed(MouseEvent event){  ActionListener[] listeners=getActionListeners();  ActionEvent e=null;  for (int i=0; i < listeners.length; i++) {    if (e == null)     e=new ActionEvent(this,ActionEvent.ACTION_PERFORMED,"pi",event.getWhen(),event.getModifiers());    listeners[i].actionPerformed(e);  }}  }
class C{  public FastAdapterDialog<Item> withNegativeButton(String text,OnClickListener listener){  return withButton(BUTTON_NEGATIVE,text,listener);}  }
class C{  public CallableStatement prepareCall(String sql) throws SQLException {  return prepareCall(sql,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);}  }
class C{  public boolean test(char ch){  if (ch <= MAX_ASCII_CHAR) {    return asciiSet.get(ch);  }  return testRanges(ch);}  }
class C{  public boolean drawEdgeFeatures(){  return drawEdgeFeatures;}  }
class C{  public Select<Model> sortDesc(String... columns){  for (  String column : columns) {    sortingOrderList.add(column + " DESC");  }  return this;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public static ThrottleFrameManager instance(){  if (instance == null) {    instance=new ThrottleFrameManager();  }  return instance;}  }
class C{  public long write(final byte[] bits,final long len) throws IOException {  return writeByteOffset(bits,0,len);}  }
class C{  public TemplateProposal(Template template,TemplateContext context,Region region,Images image){  Assert.isNotNull(template);  Assert.isNotNull(context);  Assert.isNotNull(region);  fTemplate=template;  fContext=context;  fImage=image;  fRegion=region;  fDisplayString=null;  fRelevance=computeRelevance();}  }
class C{  public static Set<JavaClassAndMethod> resolveMethodCallTargets(InvokeInstruction invokeInstruction,TypeFrame typeFrame,ConstantPoolGen cpg) throws DataflowAnalysisException, ClassNotFoundException {  short opcode=invokeInstruction.getOpcode();  if (opcode == Constants.INVOKESTATIC) {    HashSet<JavaClassAndMethod> result=new HashSet<JavaClassAndMethod>();    JavaClassAndMethod targetMethod=findInvocationLeastUpperBound(invokeInstruction,cpg,CONCRETE_METHOD);    if (targetMethod != null) {      result.add(targetMethod);    }    return result;  }  if (!typeFrame.isValid()) {    return new HashSet<JavaClassAndMethod>();  }  Type receiverType;  boolean receiverTypeIsExact;  if (opcode == Constants.INVOKESPECIAL) {    receiverType=ObjectTypeFactory.getInstance(invokeInstruction.getClassName(cpg));    receiverTypeIsExact=false;  } else {    int instanceStackLocation=typeFrame.getInstanceStackLocation(invokeInstruction,cpg);    receiverType=typeFrame.getStackValue(instanceStackLocation);    if (!(receiverType instanceof ReferenceType)) {      return new HashSet<JavaClassAndMethod>();    }    receiverTypeIsExact=typeFrame.isExact(instanceStackLocation);  }  if (DEBUG_METHOD_LOOKUP) {    System.out.println("[receiver type is " + receiverType + ", "+ (receiverTypeIsExact ? "exact]" : " not exact]"));  }  return resolveMethodCallTargets((ReferenceType)receiverType,invokeInstruction,cpg,receiverTypeIsExact);}  }
class C{  public void reset(){  final long now=System.currentTimeMillis();  while (m_currentRotation + TIME_24_HOURS < now) {    m_currentRotation+=TIME_24_HOURS;  }}  }
class C{  protected <A extends Annotation>A findAnnotation(Class<A> annotationClass,Annotated annotated,boolean includePackage,boolean includeClass,boolean includeSuperclasses){  A annotation=annotated.getAnnotation(annotationClass);  if (annotation != null) {    return annotation;  }  Class<?> memberClass=null;  if (annotated instanceof AnnotatedParameter) {    memberClass=((AnnotatedParameter)annotated).getDeclaringClass();  } else {    AnnotatedElement annType=annotated.getAnnotated();    if (annType instanceof Member) {      memberClass=((Member)annType).getDeclaringClass();      if (includeClass) {        annotation=(A)memberClass.getAnnotation(annotationClass);        if (annotation != null) {          return annotation;        }      }    } else     if (annType instanceof Class<?>) {      memberClass=(Class<?>)annType;    } else {      throw new IllegalStateException("Unsupported annotated member: " + annotated.getClass().getName());    }  }  if (memberClass != null) {    if (includeSuperclasses) {      Class<?> superclass=memberClass.getSuperclass();      while (superclass != null && superclass != Object.class) {        annotation=(A)superclass.getAnnotation(annotationClass);        if (annotation != null) {          return annotation;        }        superclass=superclass.getSuperclass();      }    }    if (includePackage) {      Package pkg=memberClass.getPackage();      if (pkg != null) {        return memberClass.getPackage().getAnnotation(annotationClass);      }    }  }  return null;}  }
class C{  private void migrateToStack(){  removeFromQueue();  if (!inStack()) {    moveToStackBottom();  }  hot();}  }
class C{  static void executeRemoteCommand(InetSocketAddress adbSockAddr,AdbService adbService,String command,Device device,IShellOutputReceiver rcvr,long maxTimeToOutputResponse,TimeUnit maxTimeUnits,@Nullable InputStream is) throws TimeoutException, AdbCommandRejectedException, ShellCommandUnresponsiveException, IOException {  long maxTimeToOutputMs=0;  if (maxTimeToOutputResponse > 0) {    if (maxTimeUnits == null) {      throw new NullPointerException("Time unit must not be null for non-zero max.");    }    maxTimeToOutputMs=maxTimeUnits.toMillis(maxTimeToOutputResponse);  }  Log.v("ddms","execute: running " + command);  try (SocketChannel adbChan=SocketChannel.open(adbSockAddr)){    adbChan.configureBlocking(false);    setDevice(adbChan,device);    byte[] request=formAdbRequest(adbService.name().toLowerCase() + ":" + command);    write(adbChan,request);    AdbResponse resp=readAdbResponse(adbChan,false);    if (!resp.okay) {      if (device.logError)       Log.e("ddms","ADB rejected shell command (" + command + "): "+ resp.message);      throw new AdbCommandRejectedException(resp.message);    }    byte[] data=new byte[16384];    if (is != null) {      int read;      while ((read=is.read(data)) != -1) {        ByteBuffer buf=ByteBuffer.wrap(data,0,read);        int written=0;        while (buf.hasRemaining()) {          written+=adbChan.write(buf);        }        if (written != read) {          Log.e("ddms","ADB write inconsistency, wrote " + written + "expected "+ read);          throw new AdbCommandRejectedException("write failed");        }      }    }    ByteBuffer buf=ByteBuffer.wrap(data);    buf.clear();    long timeToResponseCount=0;    while (true) {      int count;      if (rcvr != null && rcvr.isCancelled()) {        Log.v("ddms","execute: cancelled");        break;      }      count=adbChan.read(buf);      if (count < 0) {        if (rcvr != null) {          rcvr.flush();        }        Log.v("ddms","execute '" + command + "' on '"+ device+ "' : EOF hit. Read: "+ count);        break;      } else       if (count == 0) {        try {          int wait=WAIT_TIME * 5;          timeToResponseCount+=wait;          if (maxTimeToOutputMs > 0 && timeToResponseCount > maxTimeToOutputMs) {            throw new ShellCommandUnresponsiveException();          }          Thread.sleep(wait);        } catch (        InterruptedException ie) {          Thread.currentThread().interrupt();          throw new TimeoutException("executeRemoteCommand interrupted with immediate timeout via interruption.");        }      } else {        timeToResponseCount=0;        if (rcvr != null) {          rcvr.addOutput(buf.array(),buf.arrayOffset(),buf.position());        }        buf.rewind();      }    }  }  finally {    Log.v("ddms","execute: returning");  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:54.321 -0400",hash_original_method="1610CA05F41C29253E59D62C2A59995F",hash_generated_method="7FD8BC39B742BD433F67325F94E96443") public boolean equals(Object object){  boolean result=false;  if (object instanceof DrmSupportInfo) {    result=mFileSuffixList.equals(((DrmSupportInfo)object).mFileSuffixList) && mMimeTypeList.equals(((DrmSupportInfo)object).mMimeTypeList) && mDescription.equals(((DrmSupportInfo)object).mDescription);  }  return result;}  }
class C{  void showLicenseWindow(){}  }
class C{  public JdkConfig(Project project){  String javaHome;  if (project.hasProperty(KEY_JAVA)) {    javaHome=(String)project.property(KEY_JAVA);  } else {    javaHome=StandardSystemProperty.JAVA_HOME.value();  }  Objects.requireNonNull(javaHome,"Could not find JRE dir, set 'org.gradle.java.home' to fix.");  this.rootFolder=new File(javaHome);}  }
class C{  public boolean isAdPosition(int position){  int result=(position - getOffsetValue()) % (getNoOfDataBetweenAds() + 1);  return result == 0;}  }
class C{  protected void sequence_Group_Term(ISerializationContext context,Group semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void findAndInit(Object someObj){  if (someObj instanceof LayerHandler) {    Debug.message("bc","LayersMenu found a LayerHandler");    setLayerHandler((LayerHandler)someObj);  } else   if (someObj instanceof LayersPanel) {    setupEditLayersButton((LayersPanel)someObj);  } else   if (someObj instanceof LayerAddPanel) {    setupLayerAddButton((LayerAddPanel)someObj);  }}  }
class C{  private static void usage(){  System.out.println("Syntax: ProjectHostingReadDemo --project <project> " + "[--username <username> --password <password>]\n" + "\t<project>\tProject on which the demo will run.\n"+ "\t<username>\tGoogle Account username\n"+ "\t<password>\tGoogle Account password\n");}  }
class C{  public boolean contains(byte[] bytes){  int[] hashes=createHashes(bytes,k,getNewDigestFunction());  for (  int hash : hashes) {    if (!bitset.get(Math.abs(hash % bitSetSize))) {      return false;    }  }  return true;}  }
class C{  static void lnprint(String key){  System.out.println();  System.out.print(textResources.getString(key));}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public void finishActivity(){  finishActivity(currentActivity());}  }
class C{  public Color24(){  this.r=this.g=this.b=0;}  }
class C{  public RealLiteralItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @Override public void afterLoad(TermsEnum termsEnum,long actualUsed){  if (termsEnum instanceof RamAccountingTermsEnum) {    estimatedBytes=((RamAccountingTermsEnum)termsEnum).getTotalBytes();  }  breaker.addWithoutBreaking(-(estimatedBytes - actualUsed));}  }
class C{  public void notifyChange(ChangeType changeType,T t,String id,Rectangle2D.Double previous,Rectangle2D.Double current){  listeners.changed(changeType,t,id,previous,current);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  @Override public void protect(Address start,int pages){  int startChunk=addressToMmapChunksDown(start);  int chunks=pagesToMmapChunksUp(pages);  int endChunk=startChunk + chunks;  lock.acquire();  for (int chunk=startChunk; chunk < endChunk; chunk++) {    if (mapped[chunk] == MAPPED) {      Address mmapStart=mmapChunksToAddress(chunk);      if (!VM.memory.mprotect(mmapStart,MMAP_CHUNK_BYTES)) {        lock.release();        VM.assertions.fail("Mmapper.mprotect failed");      } else {        if (verbose) {          Log.write("mprotect succeeded at chunk ");          Log.write(chunk);          Log.write("  ");          Log.write(mmapStart);          Log.write(" with len = ");          Log.writeln(MMAP_CHUNK_BYTES);        }      }      mapped[chunk]=PROTECTED;    } else {      if (VM.VERIFY_ASSERTIONS)       VM.assertions._assert(mapped[chunk] == PROTECTED);    }  }  lock.release();}  }
class C{  public boolean updateOnAny(int bits){  return (updatemask & bits) != 0;}  }
class C{  public UnsignedInteger add(UnsignedInteger increment){  return valueOf(getValue() + increment.getValue());}  }
class C{  @RequestMapping(value="/activate",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<String> activateAccount(@RequestParam(value="key") String key){  return Optional.ofNullable(userService.activateRegistration(key)).map(null).orElse(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:14.133 -0500",hash_original_method="276911B1F31C12ADE55317E1DBA28A10",hash_generated_method="CB85081F1CD1198E5F33E7DDF76DB880") private static int readRilMessage(InputStream is,byte[] buffer) throws IOException {  int countRead;  int offset;  int remaining;  int messageLength;  offset=0;  remaining=4;  do {    countRead=is.read(buffer,offset,remaining);    if (countRead < 0) {      Log.e(LOG_TAG,"Hit EOS reading message length");      return -1;    }    offset+=countRead;    remaining-=countRead;  } while (remaining > 0);  messageLength=((buffer[0] & 0xff) << 24) | ((buffer[1] & 0xff) << 16) | ((buffer[2] & 0xff) << 8)| (buffer[3] & 0xff);  offset=0;  remaining=messageLength;  do {    countRead=is.read(buffer,offset,remaining);    if (countRead < 0) {      Log.e(LOG_TAG,"Hit EOS reading message.  messageLength=" + messageLength + " remaining="+ remaining);      return -1;    }    offset+=countRead;    remaining-=countRead;  } while (remaining > 0);  return messageLength;}  }
class C{  @Deprecated public List<ExportGroupRestRep> findByHostOrCluster(URI hostId,URI projectId,URI virtualArrayId){  HostRestRep host=parent.hosts().get(hostId);  URI clusterId=(host != null) ? id(host.getCluster()) : null;  ResourceFilter<ExportGroupRestRep> filter;  if (virtualArrayId == null) {    filter=new ExportHostOrClusterFilter(hostId,clusterId);  } else {    filter=new ExportHostOrClusterFilter(hostId,clusterId).and(new ExportVirtualArrayFilter(virtualArrayId));  }  return findByProject(projectId,filter);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.w3.org/XML/1998/namespaces";  String qualifiedName="xml:attr1";  Document doc;  Attr newAttr;  doc=(Document)load("staffNS",false);{    boolean success=false;    try {      newAttr=doc.createAttributeNS(namespaceURI,qualifiedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  protected void runTests(boolean weighted,boolean multiInstance,boolean updateable){  boolean PNom=canPredict(true,false,false,false,false,multiInstance)[0];  boolean PNum=canPredict(false,true,false,false,false,multiInstance)[0];  boolean PStr=canPredict(false,false,true,false,false,multiInstance)[0];  boolean PDat=canPredict(false,false,false,true,false,multiInstance)[0];  boolean PRel;  if (!multiInstance) {    PRel=canPredict(false,false,false,false,true,multiInstance)[0];  } else {    PRel=false;  }  if (PNom || PNum || PStr|| PDat|| PRel) {    if (weighted) {      instanceWeights(PNom,PNum,PStr,PDat,PRel,multiInstance);    }    canHandleZeroTraining(PNom,PNum,PStr,PDat,PRel,multiInstance);    boolean handleMissingPredictors=canHandleMissing(PNom,PNum,PStr,PDat,PRel,multiInstance,true,20)[0];    if (handleMissingPredictors) {      canHandleMissing(PNom,PNum,PStr,PDat,PRel,multiInstance,true,100);    }    correctBuildInitialisation(PNom,PNum,PStr,PDat,PRel,multiInstance);    datasetIntegrity(PNom,PNum,PStr,PDat,PRel,multiInstance,handleMissingPredictors);    if (updateable) {      updatingEquality(PNom,PNum,PStr,PDat,PRel,multiInstance);    }  }}  }
class C{  public static Integer valueOf(String string) throws NumberFormatException {  return valueOf(parseInt(string));}  }
class C{  public boolean hasQuery(){  return (_query != null);}  }
class C{  public void testSequenceLinearizableOperations() throws Throwable {  testSequenceOperations(5,Query.ConsistencyLevel.LINEARIZABLE);}  }
class C{  public StringConverter(final Object defaultValue){  super(defaultValue);}  }
class C{  private boolean isLabelTypeExistsInStorage(AbstractStorageLabelType<?> labelType,Set<AbstractStorageLabel<?>> labelsInStorages){  for (  AbstractStorageLabel<?> label : labelsInStorages) {    if (ObjectUtils.equals(label.getStorageLabelType(),labelType)) {      return true;    }  }  return false;}  }
class C{  public void addChangeListener(ChangeListener l){  changeSupport.addChangeListener(l);}  }
class C{  public void keyPressed(KeyEvent e){switch (e.getKeyCode()) {case KeyEvent.VK_BACK_SPACE:case KeyEvent.VK_ENTER:case KeyEvent.VK_DELETE:case KeyEvent.VK_TAB:    e.consume();  break;}}  }
class C{  public void writeNext(String[] nextLine){  writeNext(nextLine,true);}  }
class C{  public void run(){  if (Thread.currentThread().isInterrupted())   return;  if (this.elem.loadImage())   this.elem.notifyImageLoaded();}  }
class C{  protected byte[] engineUpdate(byte[] input,int inputOffset,int inputLen){  return core.update(input,inputOffset,inputLen);}  }
class C{  protected void createPanel(){  JPanel panel;  JPanel panel2;  setLayout(new BorderLayout());  m_ConnectionPanel=new ConnectionPanel(m_Parent);  panel=new JPanel(new BorderLayout());  add(panel,BorderLayout.NORTH);  panel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Connection"),BorderFactory.createEmptyBorder(0,5,5,5)));  panel.add(m_ConnectionPanel,BorderLayout.CENTER);  m_QueryPanel=new QueryPanel(m_Parent);  panel=new JPanel(new BorderLayout());  add(panel,BorderLayout.CENTER);  panel2=new JPanel(new BorderLayout());  panel2.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Query"),BorderFactory.createEmptyBorder(0,5,5,5)));  panel2.add(m_QueryPanel,BorderLayout.NORTH);  panel.add(panel2,BorderLayout.NORTH);  m_ResultPanel=new ResultPanel(m_Parent);  m_ResultPanel.setQueryPanel(m_QueryPanel);  panel2=new JPanel(new BorderLayout());  panel2.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Result"),BorderFactory.createEmptyBorder(0,5,5,5)));  panel2.add(m_ResultPanel,BorderLayout.CENTER);  panel.add(panel2,BorderLayout.CENTER);  m_InfoPanel=new InfoPanel(m_Parent);  panel=new JPanel(new BorderLayout());  add(panel,BorderLayout.SOUTH);  panel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Info"),BorderFactory.createEmptyBorder(0,5,5,5)));  panel.add(m_InfoPanel,BorderLayout.CENTER);  addConnectionListener(this);  addConnectionListener(m_QueryPanel);  addQueryExecuteListener(this);  addQueryExecuteListener(m_ResultPanel);  addResultChangedListener(this);  addHistoryChangedListener(this);  loadHistory(true);}  }
class C{  protected PlayerPositionListener(final Player admin){  this.admin=admin;}  }
class C{  public void unlinkAtCommitStop(Value v){  if (unlinkLobMap != null) {    unlinkLobMap.remove(v.toString());  }}  }
class C{  public int hashCode(){  return parent.hashEntry(getKey(),getValue());}  }
class C{  private static boolean overlapsOrTouches(Position gap,int offset,int length){  return gap.getOffset() <= offset + length && offset <= gap.getOffset() + gap.getLength();}  }
class C{  protected Label createDayTitle(int day){  String value=getUIManager().localize("Calendar." + DAYS[day],LABELS[day]);  Label dayh=new Label(value,"CalendarTitle");  dayh.setEndsWith3Points(false);  dayh.setTickerEnabled(false);  return dayh;}  }
class C{  public static short toShort(ByteString bs){  return bs.asReadOnlyByteBuffer().getShort();}  }
class C{  private boolean[] extractBits(BitMatrix matrix) throws FormatException {  boolean[] rawbits;  if (ddata.isCompact()) {    if (ddata.getNbLayers() > NB_BITS_COMPACT.length) {      throw FormatException.getFormatInstance();    }    rawbits=new boolean[NB_BITS_COMPACT[ddata.getNbLayers()]];    numCodewords=NB_DATABLOCK_COMPACT[ddata.getNbLayers()];  } else {    if (ddata.getNbLayers() > NB_BITS.length) {      throw FormatException.getFormatInstance();    }    rawbits=new boolean[NB_BITS[ddata.getNbLayers()]];    numCodewords=NB_DATABLOCK[ddata.getNbLayers()];  }  int layer=ddata.getNbLayers();  int size=matrix.getHeight();  int rawbitsOffset=0;  int matrixOffset=0;  while (layer != 0) {    int flip=0;    for (int i=0; i < 2 * size - 4; i++) {      rawbits[rawbitsOffset + i]=matrix.get(matrixOffset + flip,matrixOffset + i / 2);      rawbits[rawbitsOffset + 2 * size - 4 + i]=matrix.get(matrixOffset + i / 2,matrixOffset + size - 1 - flip);      flip=(flip + 1) % 2;    }    flip=0;    for (int i=2 * size + 1; i > 5; i--) {      rawbits[rawbitsOffset + 4 * size - 8 + (2 * size - i) + 1]=matrix.get(matrixOffset + size - 1 - flip,matrixOffset + i / 2 - 1);      rawbits[rawbitsOffset + 6 * size - 12 + (2 * size - i) + 1]=matrix.get(matrixOffset + i / 2 - 1,matrixOffset + flip);      flip=(flip + 1) % 2;    }    matrixOffset+=2;    rawbitsOffset+=8 * size - 16;    layer--;    size-=4;  }  return rawbits;}  }
class C{  public FastBufferedReader(final String bufferSize,final String wordConstituents){  this(Integer.parseInt(bufferSize),new CharOpenHashSet(wordConstituents.toCharArray(),Hash.VERY_FAST_LOAD_FACTOR));}  }
class C{  public final void addSuccess(Position pos,Move m,int depth){  int p=pos.getPiece(m.from);  int cnt=depth;  int val=countSuccess[p][m.to] + cnt;  if (val > 1000) {    val/=2;    countFail[p][m.to]/=2;  }  countSuccess[p][m.to]=val;  score[p][m.to]=-1;}  }
class C{  protected void test(String problemName){  Problem problem=ProblemFactory.getInstance().getProblem(problemName);  NondominatedPopulation referenceSet=ProblemFactory.getInstance().getReferenceSet(problemName);  NondominatedPopulation approximationSet=generateApproximationSet(problemName,100);  InvertedGenerationalDistance myIndicator=new InvertedGenerationalDistance(problem,referenceSet,2.0);  jmetal.qualityIndicator.InvertedGenerationalDistance theirIndicator=new jmetal.qualityIndicator.InvertedGenerationalDistance();  double actual=myIndicator.evaluate(approximationSet);  double expected=theirIndicator.invertedGenerationalDistance(toArray(approximationSet),toArray(referenceSet),problem.getNumberOfObjectives());  Assert.assertEquals(expected,actual,Settings.EPS);  actual=myIndicator.evaluate(referenceSet);  Assert.assertEquals(0.0,actual,Settings.EPS);}  }
class C{  public void backgroundTasks(){  PeerManager peerManager=PeerManager.getInstance(getApplicationContext());  peerManager.tasks();  mBluetoothSpeaker.tasks();  mWifiDirectSpeaker.tasks();  List<Peer> peers=peerManager.getPeers();  if (peers.size() > 0 && readyToConnect()) {    Peer peer=peers.get(mRandom.nextInt(peers.size()));    try {      if (peerManager.thisDeviceSpeaksTo(peer)) {        connectTo(peer);      }    } catch (    NoSuchAlgorithmException e) {      Log.e(TAG,"No such algorithm for hashing in thisDeviceSpeaksTo!? " + e);      return;    }catch (    UnsupportedEncodingException e) {      Log.e(TAG,"Unsupported encoding exception in thisDeviceSpeaksTo!?" + e);      return;    }  } else {    Log.v(TAG,String.format("Not connecting (%d peers, ready to connect is %s)",peers.size(),readyToConnect()));  }  mBackgroundTaskRunCount++;}  }
class C{  public void addRole(Role role){  getRoles().add(role);}  }
class C{  public static VirtualFile[] scanAndSelectDetectedJavaSourceRoots(Component parentComponent,final VirtualFile[] rootCandidates){  final List<OrderRoot> orderRoots=RootDetectionUtil.detectRoots(Arrays.asList(rootCandidates),parentComponent,null,new LibraryRootsDetectorImpl(Collections.singletonList(JAVA_SOURCE_ROOT_DETECTOR)),new OrderRootType[0]);  final List<VirtualFile> result=new ArrayList<VirtualFile>();  for (  OrderRoot root : orderRoots) {    result.add(root.getFile());  }  return VfsUtil.toVirtualFileArray(result);}  }
class C{  public JSONObject optJSONObject(String key){  Object object=this.opt(key);  return object instanceof JSONObject ? (JSONObject)object : null;}  }
class C{  public _QueuedBuildUpdate(){  super();}  }
class C{  public HashedBlockInputStream(InputStream inputStream){  this(inputStream,false);}  }
class C{  protected Position computeEdgeLocation(LatLon center,LatLon location,double length){  Vec4 centerPoint=getWwd().getModel().getGlobe().computeEllipsoidalPointFromLocation(center);  Vec4 surfaceNormal=getWwd().getModel().getGlobe().computeEllipsoidalNormalAtLocation(center.getLatitude(),center.getLongitude());  Vec4 point1=getWwd().getModel().getGlobe().computeEllipsoidalPointFromLocation(location);  Vec4 vecToLocation=point1.subtract3(centerPoint).normalize3();  Vec4 vecToEdge=surfaceNormal.cross3(vecToLocation).normalize3().multiply3(length);  LatLon edgeLocation=getWwd().getModel().getGlobe().computePositionFromEllipsoidalPoint(vecToEdge.add3(centerPoint));  double edgeAltitude=this.getControlPointAltitude(edgeLocation);  return new Position(edgeLocation,edgeAltitude);}  }
class C{  public DefaultOrderNumberGeneratorImpl(final GenericDAO<CustomerOrder,Long> customerOrderDao){  this.customerOrderDao=customerOrderDao;  orderSequence=-1;}  }
class C{  @MethodDesc(description="Exit replicator immediately without cleanup",usage="kill") public void kill() throws Exception {  exitProcess(true,"Shutting down process immediately without stopping services");}  }
class C{  public Select<T> and(DataFilterClause clause){  mFilterCriteria.addClause(clause,DataFilterConjunction.AND);  return this;}  }
class C{  protected boolean binarySearch(String filename,String string){  string=string.toLowerCase();  long startTime=System.currentTimeMillis();  RandomAccessFile raf=null;  boolean result=false;  try {    File file=new File(filename);    raf=new RandomAccessFile(file,"r");    long low=0;    long high=file.length();    long p=-1;    while (low < high) {      long mid=(low + high) / 2;      p=mid;      while (p >= 0) {        raf.seek(p);        char c=(char)raf.readByte();        if (c == '\n')         break;        p--;      }      if (p < 0)       raf.seek(0);      String line=raf.readLine();      if (line == null) {        low=high;      } else {        int compare=line.compareTo(string);        if (compare < 0) {          low=mid + 1;        } else         if (compare == 0) {          return true;        } else {          high=mid;        }      }    }    p=low;    while (p >= 0 && p < high) {      raf.seek(p);      if (((char)raf.readByte()) == '\n')       break;      p--;    }    if (p < 0)     raf.seek(0);    while (true) {      String line=raf.readLine();      if (line == null) {        result=false;        break;      } else       if (line.equals(string)) {        result=true;        break;      } else       if (!line.startsWith(string)) {        result=false;        break;      }    }  } catch (  Throwable t) {    Raptor.getInstance().onError("Error reading dictionary file: " + DICTIONARY_PATH,t);  } finally {    try {      raf.close();    } catch (    Throwable t) {    }    if (LOG.isDebugEnabled()) {      LOG.debug("Searched " + string + " ("+ (System.currentTimeMillis() - startTime)+ ") "+ result);    }  }  return result;}  }
class C{  public boolean isActiveFtp(){  return activeFtp;}  }
class C{  public Span(int start,int end){  this.start=start;  this.end=end;}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if ((tipoBusqueda == TIPO_BUSQUEDA_POR_GESTOR) && StringUtils.isBlank(gestor))   errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(PrestamosConstants.LABEL_PRESTAMOS_GESTOR_PRESTAMO,request.getLocale())));  return errors;}  }
class C{  public synchronized void register(Platform platform){  checkNotNull(platform);  logger.log(Level.FINE,"Got request to register " + platform.getClass() + " with WorldEdit ["+ super.toString()+ "]");  platforms.add(platform);  if (firstSeenVersion != null) {    if (!firstSeenVersion.equals(platform.getVersion())) {      logger.log(Level.WARNING,"Multiple ports of WorldEdit are installed but they report different versions ({0} and {1}). " + "If these two versions are truly different, then you may run into unexpected crashes and errors.",new Object[]{firstSeenVersion,platform.getVersion()});    }  } else {    firstSeenVersion=platform.getVersion();  }}  }
class C{  @NotNull @ObjectiveCName("isMemberModel") public BooleanValueModel isMember(){  return isMember;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (strictMode: ");  result.append(strictMode);  result.append(')');  return result.toString();}  }
class C{  public GroupQueryNode(QueryNode query){  if (query == null) {    throw new QueryNodeError(new MessageImpl(QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED,"query","null"));  }  allocate();  setLeaf(false);  add(query);}  }
class C{  public void tapOnWifi(){  System.out.println("Size of iphone 6 is " + appiumDriver.manage().window().getSize());  if (deviceName.equalsIgnoreCase("iphone 5")) {    appiumDriver.tap(85,85,175,0);  } else   if (deviceName.equalsIgnoreCase("iphone 6")) {    appiumDriver.tap(120,120,278,0);  }}  }
class C{  public CRLNumberExtension(BigInteger crlNum) throws IOException {  this(PKIXExtensions.CRLNumber_Id,false,crlNum,NAME,LABEL);}  }
class C{  public static CatalogEntry toCatalogEntry(VOCatalogEntry voCatalogEntry) throws ValidationException {  if (voCatalogEntry == null) {    IllegalArgumentException e=new IllegalArgumentException("Parameters must not be null");    logger.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR_PARAMETER_NULL);    throw e;  }  CatalogEntry catalogEntry=new CatalogEntry();  catalogEntry.setKey(voCatalogEntry.getKey());  copyAttributes(catalogEntry,voCatalogEntry);  if (voCatalogEntry.getMarketplace() != null) {    catalogEntry.setMarketplace(MarketplaceAssembler.toMarketplace(voCatalogEntry.getMarketplace()));  }  return catalogEntry;}  }
class C{  public static boolean usingEip(){  boolean ret=false;  try {    ret=getUserDataAsMap().get(TankConstants.KEY_USING_BIND_EIP) != null;  } catch (  IOException e) {    LOG.warn("Error getting is using EIP: " + e.toString());  }  return ret;}  }
class C{  protected String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString().toUpperCase(Locale.US);}  }
class C{  public void testSecretKeyFactory05() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  String prov=null;  for (int i=0; i < validValues.length; i++) {    try {      SecretKeyFactory.getInstance(validValues[i],prov);      fail("IllegalArgumentException was not thrown as expected (algorithm: ".concat(validValues[i]).concat(" provider: null"));    } catch (    IllegalArgumentException e) {    }    try {      SecretKeyFactory.getInstance(validValues[i],"");      fail("IllegalArgumentException was not thrown as expected (algorithm: ".concat(validValues[i]).concat(" provider: empty"));    } catch (    IllegalArgumentException e) {    }    for (int j=1; j < invalidValues.length; j++) {      try {        SecretKeyFactory.getInstance(validValues[i],invalidValues[j]);        fail("NoSuchProviderException was not thrown as expected (algorithm: ".concat(validValues[i]).concat(" provider: ").concat(invalidValues[j]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }}  }
class C{  public AccountHeaderBuilder withTypeface(@NonNull Typeface typeface){  this.mTypeface=typeface;  return this;}  }
class C{  public ISO_8859_1Decoder(InputStream is){  super(is);}  }
class C{  public int calcoffset(int base){  int len=getTableLength(base);  if (len < 1240) {    return 107;  } else   if (len < 33900) {    return 1131;  } else {    return 32768;  }}  }
class C{  public void addIncludedAttribute(final String elementName,final String attrName){  if ((elementName == null) || (elementName.trim().equals(""))) {    return;  }  if ((attrName == null) || (attrName.trim().equals(""))) {    return;  }  List attrNames=null;  if ((attrNames=(List)_includedElementAttrsMap.get(elementName)) == null) {    attrNames=new ArrayList();  }  attrNames.add(attrName);  _includedElementAttrsMap.put(elementName,attrNames);}  }
class C{  public byte[] decrypt(String string){  return decrypt(string.getBytes());}  }
class C{  public int intersectAab(float minX,float minY,float minZ,float maxX,float maxY,float maxZ){  int plane=PLANE_NX;  boolean inside=true;  if (nxX * (nxX < 0 ? minX : maxX) + nxY * (nxY < 0 ? minY : maxY) + nxZ * (nxZ < 0 ? minZ : maxZ) >= -nxW) {    plane=PLANE_PX;    inside&=nxX * (nxX < 0 ? maxX : minX) + nxY * (nxY < 0 ? maxY : minY) + nxZ * (nxZ < 0 ? maxZ : minZ) >= -nxW;    if (pxX * (pxX < 0 ? minX : maxX) + pxY * (pxY < 0 ? minY : maxY) + pxZ * (pxZ < 0 ? minZ : maxZ) >= -pxW) {      plane=PLANE_NY;      inside&=pxX * (pxX < 0 ? maxX : minX) + pxY * (pxY < 0 ? maxY : minY) + pxZ * (pxZ < 0 ? maxZ : minZ) >= -pxW;      if (nyX * (nyX < 0 ? minX : maxX) + nyY * (nyY < 0 ? minY : maxY) + nyZ * (nyZ < 0 ? minZ : maxZ) >= -nyW) {        plane=PLANE_PY;        inside&=nyX * (nyX < 0 ? maxX : minX) + nyY * (nyY < 0 ? maxY : minY) + nyZ * (nyZ < 0 ? maxZ : minZ) >= -nyW;        if (pyX * (pyX < 0 ? minX : maxX) + pyY * (pyY < 0 ? minY : maxY) + pyZ * (pyZ < 0 ? minZ : maxZ) >= -pyW) {          plane=PLANE_NZ;          inside&=pyX * (pyX < 0 ? maxX : minX) + pyY * (pyY < 0 ? maxY : minY) + pyZ * (pyZ < 0 ? maxZ : minZ) >= -pyW;          if (nzX * (nzX < 0 ? minX : maxX) + nzY * (nzY < 0 ? minY : maxY) + nzZ * (nzZ < 0 ? minZ : maxZ) >= -nzW) {            plane=PLANE_PZ;            inside&=nzX * (nzX < 0 ? maxX : minX) + nzY * (nzY < 0 ? maxY : minY) + nzZ * (nzZ < 0 ? maxZ : minZ) >= -nzW;            if (pzX * (pzX < 0 ? minX : maxX) + pzY * (pzY < 0 ? minY : maxY) + pzZ * (pzZ < 0 ? minZ : maxZ) >= -pzW) {              inside&=pzX * (pzX < 0 ? maxX : minX) + pzY * (pzY < 0 ? maxY : minY) + pzZ * (pzZ < 0 ? maxZ : minZ) >= -pzW;              return inside ? INSIDE : INTERSECT;            }          }        }      }    }  }  return plane;}  }
class C{  public void testSimpleRemoteDeployment() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/simple-test/index.jsp");  final String expected="Sample page for testing";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  void readBytes(byte[] buffer) throws IOException {  mDexFile.readFully(buffer);}  }
class C{  public static ServiceFault toServiceFault(Throwable t){  ResponseHeader rh=new ResponseHeader();  ServiceFault result=new ServiceFault(rh);  rh.setServiceResult(t instanceof ServiceResultException ? ((ServiceResultException)t).getStatusCode() : new StatusCode(StatusCodes.Bad_InternalError));  rh.setTimestamp(new DateTime());  List<String> stringTable=new ArrayList<String>();  DiagnosticInfo di=null;  while (t != null) {    if (di == null) {      rh.setServiceDiagnostics(di=new DiagnosticInfo());    } else {      di.setInnerDiagnosticInfo(di=new DiagnosticInfo());    }    di.setStringTable(stringTable);    di.setLocalizedTextStr(t instanceof ServiceResultException ? t.getMessage() : t.toString());    StringWriter sw=new StringWriter(100);    PrintWriter pw=new PrintWriter(sw);    for (    StackTraceElement e : t.getStackTrace())     pw.println("\tat " + e);    di.setAdditionalInfo(sw.toString());    di.setInnerStatusCode(t instanceof ServiceResultException ? ((ServiceResultException)t).getStatusCode() : new StatusCode(StatusCodes.Bad_InternalError));    t=t.getCause();  }  rh.setStringTable(stringTable.toArray(new String[stringTable.size()]));  return result;}  }
class C{  private Voicemails(){}  }
class C{  @Override public Instruction enter(double now,FSMAgent agent){  emergency=((AmbulanceAgent)agent).getEmergency();  return super.enter(now,agent);}  }
class C{  public void precomputeForScalarMultiplication(){  if (null != this.precomputedForSingle) {    return;  }  Ed25519GroupElement Bi=this;  this.precomputedForSingle=new Ed25519GroupElement[32][8];  for (int i=0; i < 32; i++) {    Ed25519GroupElement Bij=Bi;    for (int j=0; j < 8; j++) {      final Ed25519FieldElement inverse=Bij.Z.invert();      final Ed25519FieldElement x=Bij.X.multiply(inverse);      final Ed25519FieldElement y=Bij.Y.multiply(inverse);      this.precomputedForSingle[i][j]=precomputed(y.add(x),y.subtract(x),x.multiply(y).multiply(Ed25519Field.D_Times_TWO));      Bij=Bij.add(Bi.toCached()).toP3();    }    for (int k=0; k < 8; k++) {      Bi=Bi.add(Bi.toCached()).toP3();    }  }}  }
class C{  public static void main(String[] args) throws Exception {  System.err.println("Running Jetty 7.6.8.v20121106");  Configs configs=new Configs();  configs.validation();  server=new Server();  initConnnector(server,configs);  initWebappContext(server,configs);  if (configs.getJettyXML() != null && !"".equals(configs.getJettyXML().trim())) {    System.err.println("Loading Jetty.xml:" + configs.getJettyXML());    try {      XmlConfiguration configuration=new XmlConfiguration(new File(configs.getJettyXML()).toURI().toURL());      configuration.configure(server);    } catch (    Exception ex) {      System.err.println("Exception happened when loading Jetty.xml:");      ex.printStackTrace();    }  }  if (configs.getEnablescanner())   initScanner(web,configs);  initEclipseListener(configs);  initCommandListener(configs);  try {    server.start();    server.join();  } catch (  Exception e) {    e.printStackTrace();    System.exit(100);  }  return;}  }
class C{  protected ComponentBuilder(ComponentBuilder original){  this.current=new TextComponent(original.current);  original.parts.getExtra().stream().map(null).forEach(null);}  }
class C{  public Builder noTransform(){  this.noTransform=true;  return this;}  }
class C{  public static byte[] decode(byte[] source) throws java.io.IOException {  byte[] decoded=null;  decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  return decoded;}  }
class C{  private void pushRun(int runBase,int runLen){  this.runBase[stackSize]=runBase;  this.runLen[stackSize]=runLen;  stackSize++;}  }
class C{  private List<String> buildNames(Tree node,boolean multiply){  List<String> result=new ArrayList<String>();  if (node == null) {    return result;  }  if (node.getChildCount() == 1 && !multiply) {    result.add(typeName + node.getChild(0).getText());    return result;  }  StringBuilder name=new StringBuilder();  for (int i=0; i < node.getChildCount(); ++i) {    if (multiply) {      result.add(node.getChild(i).getText());    } else {      name.append(node.getChild(i).getText());    }  }  if (!multiply) {    result.add(name.toString());  }  return result;}  }
class C{  public static ReplaceableImage create(EncodedImage placeholder){  return new ReplaceableImage(placeholder);}  }
class C{  public static <T>T requireNonNull(T obj){  if (obj == null)   throw new NullPointerException();  return obj;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DomPackage.TAG__TITLE:    return title != null;case DomPackage.TAG__VALUES:  return values != null && !values.isEmpty();case DomPackage.TAG__TAG_DEFINITION:return TAG_DEFINITION_EDEFAULT == null ? tagDefinition != null : !TAG_DEFINITION_EDEFAULT.equals(tagDefinition);}return super.eIsSet(featureID);}  }
class C{  method_info findMethod(String s){  method_info m;  int i;  for (i=0; i < methods_count; i++) {    m=methods[i];    if (s.equals(m.toName(constant_pool))) {      return m;    }  }  return null;}  }
class C{  @Override public void merge(Result<List<ListBasedResultWrapper>,Object> otherResult){  if (otherResult.size() > 0) {    totalNumberOfRecords+=otherResult.size();    this.allRowsResult.add(otherResult.getResult());  }}  }
class C{  public static void storagePools(String id){  VirtualArrayRestRep virtualArray=getVirtualArray(id);  VirtualArrayStoragePoolsDataTable dataTable=new VirtualArrayStoragePoolsDataTable();  render(virtualArray,dataTable);}  }
class C{  public Matrix(double[][] A){  m=A.length;  n=A[0].length;  for (int i=0; i < m; i++) {    if (A[i].length != n) {      throw new IllegalArgumentException("All rows must have the same length.");    }  }  this.A=A;}  }
class C{  public void updateNextRunDateTime(final DateTime nextRunDateTime){  if (nextRunDateTime != null) {    this.nextRunDateTime=nextRunDateTime.toDate();  } else {    this.nextRunDateTime=null;  }}  }
class C{  public void createWeekScenarioBug10265_UpgradeAndParChange2() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-22 23:00:00"));  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"BUG10265_UPG_PARCHG2",TestService.EXAMPLE_ASYNC,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS2,3,technicalServiceAsync,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService(basicSetup.getCustomerAdminKey(),"BUG10265_UPG_PARCHG2",serviceDetails,basicSetup.getCustomerUser1(),VOServiceFactory.getRole(serviceDetails,"ADMIN"));  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-23 00:00:00"));  subDetails=subscrSetup.completeAsyncSubscription(basicSetup.getSupplierAdminKey(),basicSetup.getCustomerAdmin(),subDetails);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-24 23:00:00"),"MAX_FOLDER_NUMBER","3");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-25 00:00:00"));  subDetails=subscrSetup.completeAsyncModifySubscription(basicSetup.getSupplierAdminKey(),basicSetup.getCustomerAdmin(),subDetails);  VOServiceDetails perUnitService=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"BUG10265_UPG_PARCHG2_SERVICE2",TestService.EXAMPLE_ASYNC,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS3,0,technicalServiceAsync,supplierMarketplace);  serviceSetup.registerCompatibleServices(basicSetup.getSupplierAdminKey(),serviceDetails,perUnitService);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-27 23:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.copyParametersAndUpgradeSubscription(basicSetup.getCustomerAdminKey(),subDetails,perUnitService);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-28 00:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncUpgradeSubscription(basicSetup.getSupplierAdminKey(),basicSetup.getCustomerAdmin(),upgradedSubDetails);  upgradedSubDetails=subscrSetup.modifyParameterForSubscription(upgradedSubDetails,DateTimeHandling.calculateMillis("2013-02-28 23:00:00"),"MAX_FOLDER_NUMBER","5");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-01 00:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncModifySubscription(basicSetup.getSupplierAdminKey(),basicSetup.getCustomerAdmin(),upgradedSubDetails);  upgradedSubDetails=subscrSetup.modifyParameterForSubscription(upgradedSubDetails,DateTimeHandling.calculateMillis("2013-03-01 06:00:00"),"MAX_FOLDER_NUMBER","7");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-01 07:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncModifySubscription(basicSetup.getSupplierAdminKey(),basicSetup.getCustomerAdmin(),upgradedSubDetails);  upgradedSubDetails=subscrSetup.modifyParameterForSubscription(upgradedSubDetails,DateTimeHandling.calculateMillis("2013-03-02 11:00:00"),"MAX_FOLDER_NUMBER","4");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-02 12:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncModifySubscription(basicSetup.getSupplierAdminKey(),basicSetup.getCustomerAdmin(),upgradedSubDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-03 07:00:00"));  subscrSetup.unsubscribeToService(upgradedSubDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("BUG10265_UPG_PARCHG2",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("BUG10265_UPG_PARCHG2",upgradedSubDetails);}  }
class C{  public static String extractFileDir(String filename){  String splitted[]=filename.replaceAll("\\\\","/").split("/");  if (splitted.length > 1)   return filename.substring(0,filename.length() - splitted[splitted.length - 1].length() - 1);  return "";}  }
class C{  public JSONObject putOpt(String key,Object value) throws JSONException {  if (key != null && value != null) {    this.put(key,value);  }  return this;}  }
class C{  public static boolean fileMove(String src,String dest){  Logger.getInstance().logVerbose("FileMove","From " + src + " to "+ dest);  File fileSrc=new File(src);  File fileDest=new File(dest);  return fileSrc.renameTo(fileDest);}  }
class C{  public boolean removeParser(Parser parser){  boolean removed=false;  if (parserManager != null) {    removed=parserManager.removeParser(parser);  }  return removed;}  }
class C{  public Document read(String source) throws DocumentException {  try {    return getReader().read(source);  } catch (  JAXBRuntimeException ex) {    Throwable cause=ex.getCause();    throw new DocumentException(cause.getMessage(),cause);  }}  }
class C{  public static FSArray toFSArray(JCas jCas,Collection<? extends FeatureStructure> collection){  if (collection == null || collection.isEmpty()) {    return new FSArray(jCas,0);  } else {    FSArray array=new FSArray(jCas,collection.size());    int i=0;    for (    FeatureStructure fs : collection) {      array.set(i,fs);      i++;    }    return array;  }}  }
class C{  private void processIncomingDataPacket(DatagramPacket packet) throws Exception {  this.peerAddress=packet.getAddress();  int packetLength=packet.getLength();  byte[] bytes=packet.getData();  byte[] msgBytes=new byte[packetLength];  System.arraycopy(bytes,0,msgBytes,0,packetLength);  if (sipStack.isLoggingEnabled()) {    this.sipStack.getStackLogger().logDebug("UDPMessageChannel: processIncomingDataPacket : peerAddress = " + peerAddress.getHostAddress() + "/"+ packet.getPort()+ " Length = "+ packetLength);  }  SIPMessage sipMessage=null;  try {    this.receptionTime=System.currentTimeMillis();    sipMessage=myParser.parseSIPMessage(msgBytes);    myParser=null;  } catch (  ParseException ex) {    myParser=null;    if (sipStack.isLoggingEnabled()) {      this.sipStack.getStackLogger().logDebug("Rejecting message !  " + new String(msgBytes));      this.sipStack.getStackLogger().logDebug("error message " + ex.getMessage());      this.sipStack.getStackLogger().logException(ex);    }    String msgString=new String(msgBytes,0,packetLength);    if (!msgString.startsWith("SIP/") && !msgString.startsWith("ACK ")) {      SIPMessage badReqRes=createBadReqRes(msgString,ex);      if (badReqRes != null) {        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("Sending automatic 400 Bad Request:");          sipStack.getStackLogger().logDebug(msgString);        }        try {          this.sendMessage(badReqRes,peerAddress,packet.getPort(),"UDP",false);        } catch (        IOException e) {          if (sipStack.isLoggingEnabled())           this.sipStack.getStackLogger().logException(e);        }      } else {        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("Could not formulate automatic 400 Bad Request");        }      }    }    return;  }  if (sipMessage == null) {    if (sipStack.isLoggingEnabled()) {      this.sipStack.getStackLogger().logDebug("Rejecting message !  + Null message parsed.");    }    if (pingBackRecord.get(packet.getAddress().getHostAddress() + ":" + packet.getPort()) == null) {      byte[] retval="\r\n\r\n".getBytes();      DatagramPacket keepalive=new DatagramPacket(retval,0,retval.length,packet.getAddress(),packet.getPort());      ((UDPMessageProcessor)this.messageProcessor).sock.send(keepalive);      this.sipStack.getTimer().schedule(new PingBackTimerTask(packet.getAddress().getHostAddress(),packet.getPort()),1000);    }    return;  }  ViaList viaList=sipMessage.getViaHeaders();  if (sipMessage.getFrom() == null || sipMessage.getTo() == null || sipMessage.getCallId() == null || sipMessage.getCSeq() == null || sipMessage.getViaHeaders() == null) {    String badmsg=new String(msgBytes);    if (sipStack.isLoggingEnabled()) {      this.sipStack.getStackLogger().logError("bad message " + badmsg);      this.sipStack.getStackLogger().logError(">>> Dropped Bad Msg " + "From = " + sipMessage.getFrom() + "To = "+ sipMessage.getTo()+ "CallId = "+ sipMessage.getCallId()+ "CSeq = "+ sipMessage.getCSeq()+ "Via = "+ sipMessage.getViaHeaders());    }    return;  }  if (sipMessage instanceof SIPRequest) {    Via v=(Via)viaList.getFirst();    Hop hop=sipStack.addressResolver.resolveAddress(v.getHop());    this.peerPort=hop.getPort();    this.peerProtocol=v.getTransport();    this.peerPacketSourceAddress=packet.getAddress();    this.peerPacketSourcePort=packet.getPort();    try {      this.peerAddress=packet.getAddress();      boolean hasRPort=v.hasParameter(Via.RPORT);      if (hasRPort || !hop.getHost().equals(this.peerAddress.getHostAddress())) {        v.setParameter(Via.RECEIVED,this.peerAddress.getHostAddress());      }      if (hasRPort) {        v.setParameter(Via.RPORT,Integer.toString(this.peerPacketSourcePort));      }    } catch (    java.text.ParseException ex1) {      InternalErrorHandler.handleException(ex1);    }  } else {    this.peerPacketSourceAddress=packet.getAddress();    this.peerPacketSourcePort=packet.getPort();    this.peerAddress=packet.getAddress();    this.peerPort=packet.getPort();    this.peerProtocol=((Via)viaList.getFirst()).getTransport();  }  this.processMessage(sipMessage);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element firstNode;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  Attr setAttr;  Node setNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  firstNode=(Element)elementList.item(0);  domesticAttr=doc.createAttribute("title");  domesticAttr.setValue("Y\u03b1");  setAttr=firstNode.setAttributeNode(domesticAttr);  elementList=doc.getElementsByTagName("acronym");  testNode=elementList.item(2);  attributes=testNode.getAttributes();{    boolean success=false;    try {      setNode=attributes.setNamedItem(domesticAttr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("throw_INUSE_ATTRIBUTE_ERR",success);  }}  }
class C{  public static void notifyTimeline(final JSONObject message){  final String msgStr=message.toString();synchronized (SESSIONS) {    for (    final Session session : SESSIONS) {      if (session.isOpen()) {        session.getAsyncRemote().sendText(msgStr);      }    }  }}  }
class C{  public JSONArray names(){  JSONArray ja=new JSONArray();  Iterator keys=keys();  while (keys.hasNext()) {    ja.put(keys.next());  }  return ja.length() == 0 ? null : ja;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:33.361 -0500",hash_original_method="CC5347E979B0813386EC9E9DE77BBA76",hash_generated_method="2369D231E720E4DD7AA31AD4AE508C0D") @Override public Object clone(){  try {    ZipEntry result=(ZipEntry)super.clone();    result.extra=extra != null ? extra.clone() : null;    return result;  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }}  }
class C{  public ScanManagerConfig copy(String newname){  return copy(newname,this);}  }
class C{  @NotNull public static List<List<ClusterNode>> readPartitionAssignment(BinaryRawReader reader,PlatformContext ctx){  assert reader != null;  assert ctx != null;  int partCnt=reader.readInt();  List<List<ClusterNode>> res=new ArrayList<>(partCnt);  IgniteClusterEx cluster=ctx.kernalContext().grid().cluster();  for (int i=0; i < partCnt; i++) {    int partSize=reader.readInt();    List<ClusterNode> part=new ArrayList<>(partSize);    for (int j=0; j < partSize; j++)     part.add(cluster.node(reader.readUuid()));    res.add(part);  }  return res;}  }
class C{  public void clear(){  time=0.0;}  }
class C{  protected byte[] encode0(String cstring,String sstring){  byte[] c=cstring.getBytes(StandardCharsets.UTF_8);  ;  byte[] s=sstring.getBytes(StandardCharsets.UTF_8);  ;  byte[] zero=new byte[1];  int len=4 + c.length + 1+ 4+ s.length+ 1+ 4+ 4;  ByteBuffer bb=ByteBuffer.allocate(len).order(ByteOrder.nativeOrder());  bb.putInt(c.length + 1).put(c).put(zero).putInt(s.length + 1).put(s).put(zero).putInt(cusec).putInt(ctime);  return bb.array();}  }
class C{  public JSONArray names(){  JSONArray ja=new JSONArray();  Iterator keys=keys();  while (keys.hasNext()) {    ja.put(keys.next());  }  return ja.length() == 0 ? null : ja;}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public LabelServiceCall(ResolutionContext context,List<Resolution> resolutions){  this.context=context;  this.resolutions=resolutions;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.TRACE_DIRECTIVE___TRACE_ITEM_1:    getTraceItem_1().clear();  getTraceItem_1().addAll((Collection<? extends TraceItem_>)newValue);return;case UmplePackage.TRACE_DIRECTIVE___ANONYMOUS_TRACE_DIRECTIVE_11:getAnonymous_traceDirective_1_1().clear();getAnonymous_traceDirective_1_1().addAll((Collection<? extends Anonymous_traceDirective_1_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected void continueOutputProcessingJoin(boolean doOutput,boolean forceUpdate){  if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {    log.debug(".continueOutputProcessingJoin");  }  boolean isGenerateSynthetic=parent.getStatementResultService().isMakeSynthetic();  UniformPair<EventBean[]> newOldEvents=resultSetProcessor.continueOutputLimitedLastAllNonBufferedJoin(isGenerateSynthetic,isAll);  continueOutputProcessingViewAndJoin(doOutput,forceUpdate,newOldEvents);}  }
class C{  public ReversedList(List<T> target){  this.target=target;}  }
class C{  @Override public E remove(int location){  E result;  if (location < 0 || location >= size) {    throw new IndexOutOfBoundsException("" + location + " out of: "+ size);  }  if (location == 0) {    result=array[firstIndex];    array[firstIndex++]=null;  } else   if (location == size - 1) {    int lastIndex=firstIndex + size - 1;    result=array[lastIndex];    array[lastIndex]=null;  } else {    int elementIndex=firstIndex + location;    result=array[elementIndex];    if (location < size / 2) {      System.arraycopy(array,firstIndex,array,firstIndex + 1,location);      array[firstIndex++]=null;    } else {      System.arraycopy(array,elementIndex + 1,array,elementIndex,size - location - 1);      array[firstIndex + size - 1]=null;    }  }  size--;  if (size == 0) {    firstIndex=0;  }  modCount++;  return result;}  }
class C{  public synchronized void remove(int index){  mCategories.remove(index);  mValues.remove(index);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.INTERFACE_MEMBER_DECLARATION___CONSTANT_DECLARATION_1:    return ((InternalEList<?>)getConstantDeclaration_1()).basicRemove(otherEnd,msgs);case UmplePackage.INTERFACE_MEMBER_DECLARATION___ABSTRACT_METHOD_DECLARATION_1:  return ((InternalEList<?>)getAbstractMethodDeclaration_1()).basicRemove(otherEnd,msgs);case UmplePackage.INTERFACE_MEMBER_DECLARATION___POSITION_1:return ((InternalEList<?>)getPosition_1()).basicRemove(otherEnd,msgs);case UmplePackage.INTERFACE_MEMBER_DECLARATION___DISPLAY_COLOR_1:return ((InternalEList<?>)getDisplayColor_1()).basicRemove(otherEnd,msgs);case UmplePackage.INTERFACE_MEMBER_DECLARATION___IS_A1:return ((InternalEList<?>)getIsA_1()).basicRemove(otherEnd,msgs);case UmplePackage.INTERFACE_MEMBER_DECLARATION___EXTRA_CODE_1:return ((InternalEList<?>)getExtraCode_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void clear(){synchronized (this) {    internalMap=new HashMap<K,V>();  }}  }
class C{  public void start(){  mView.removeCallbacks(mAnimationStarter);  startAnimation();}  }
class C{  @Override public void draw(Canvas canvas){  if (mText == null) {    return;  }  RectF rect=new RectF(mText.getBoundingBox());  rect.left=translateX(rect.left);  rect.top=translateY(rect.top);  rect.right=translateX(rect.right);  rect.bottom=translateY(rect.bottom);  canvas.drawRect(rect,sRectPaint);  List<? extends Text> textComponents=mText.getComponents();  for (  Text currentText : textComponents) {    float left=translateX(currentText.getBoundingBox().left);    float bottom=translateY(currentText.getBoundingBox().bottom);    canvas.drawText(currentText.getValue(),left,bottom,sTextPaint);  }}  }
class C{  public static int inferContentType(String fileName){  if (fileName == null) {    return TYPE_OTHER;  } else   if (fileName.endsWith(".mpd")) {    return TYPE_DASH;  } else   if (fileName.endsWith(".ism")) {    return TYPE_SS;  } else   if (fileName.endsWith(".m3u8")) {    return TYPE_HLS;  } else {    return TYPE_OTHER;  }}  }
class C{  public final AC gap(){  curIx++;  return this;}  }
class C{  public final boolean hasPackageDeclaration(){  for (int i=0, length=this.patterns.length; i < length; i++) {    if (this.patterns[i] instanceof PackageDeclarationPattern)     return true;  }  return false;}  }
class C{  @Override public int readInt(String filePath){  FileChannel fileChannel=updateCache(filePath);  ByteBuffer byteBffer=read(fileChannel,CarbonCommonConstants.INT_SIZE_IN_BYTE);  return byteBffer.getInt();}  }
class C{  private int[] expandKey(byte[] uKey){  int[] key=new int[52];  if (uKey.length < 16) {    byte[] tmp=new byte[16];    System.arraycopy(uKey,0,tmp,tmp.length - uKey.length,uKey.length);    uKey=tmp;  }  for (int i=0; i < 8; i++) {    key[i]=bytesToWord(uKey,i * 2);  }  for (int i=8; i < 52; i++) {    if ((i & 7) < 6) {      key[i]=((key[i - 7] & 127) << 9 | key[i - 6] >> 7) & MASK;    } else     if ((i & 7) == 6) {      key[i]=((key[i - 7] & 127) << 9 | key[i - 14] >> 7) & MASK;    } else {      key[i]=((key[i - 15] & 127) << 9 | key[i - 14] >> 7) & MASK;    }  }  return key;}  }
class C{  public void updateGraph(){  buildLine();  if (vertexCount > -1) {    state.setData(graphVertex,vertexCount,graphXMin,graphXMax,graphYMin,graphYMax,vertex);  }}  }
class C{  @PostConstruct protected void init(){  parseRecipientsString();  parseAdditionalPropertiesString();  checkConnection();}  }
class C{  public static RationaleDialog newInstance(int requestCode,boolean finishActivity){  Bundle arguments=new Bundle();  arguments.putInt(ARGUMENT_PERMISSION_REQUEST_CODE,requestCode);  arguments.putBoolean(ARGUMENT_FINISH_ACTIVITY,finishActivity);  RationaleDialog dialog=new RationaleDialog();  dialog.setArguments(arguments);  return dialog;}  }
class C{  public static TStream<JsonObject> sensorsAB(Topology topology){  TStream<JsonObject> sensorA=SimulatedSensors.burstySensor(topology,"A");  TStream<JsonObject> sensorB=SimulatedSensors.burstySensor(topology,"B");  TStream<JsonObject> sensors=sensorA.union(sensorB);  TWindow<JsonObject,JsonElement> sensorWindow=sensors.last(50,null);  sensors=JsonAnalytics.aggregate(sensorWindow,"name","reading",MIN,MAX,MEAN,STDDEV);  sensors=sensors.filter(null);  return sensors;}  }
class C{  public static double quantile(double x,double location,double shape){  return (x <= .5) ? (x == .5) ? location : (x == 0.) ? Double.NEGATIVE_INFINITY : location - shape / Math.tan(Math.PI * x) : (x == 1.) ? Double.POSITIVE_INFINITY : location + shape / Math.tan(Math.PI * (1 - x));}  }
class C{  public BreakpointSetSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"PKHBT");  translateAll(environment,instruction,"PKHBT",instructions);}  }
class C{  @Timed @ExceptionMetered @Path("{name}/backfill-expiration") @POST @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) public boolean backfillExpiration(@Auth AutomationClient automationClient,@PathParam("name") String name,List<String> passwords){  Optional<Secret> secretOptional=secretController.getSecretByName(name);  if (!secretOptional.isPresent()) {    throw new NotFoundException("No such secret: " + name);  }  Secret secret=secretOptional.get();  String secretName=secret.getName();  byte[] secretContent=Base64.getDecoder().decode(secret.getSecret());  passwords.add("");  Instant expiry=null;  if (secretName.endsWith(".crt") || secretName.endsWith(".pem") || secretName.endsWith(".key")) {    expiry=ExpirationExtractor.expirationFromEncodedCertificateChain(secretContent);  } else   if (secretName.endsWith(".gpg") || secretName.endsWith(".pgp")) {    expiry=ExpirationExtractor.expirationFromOpenPGP(secretContent);  } else   if (secretName.endsWith(".p12") || secretName.endsWith(".pfx")) {    while (expiry == null && !passwords.isEmpty()) {      String password=passwords.remove(0);      expiry=ExpirationExtractor.expirationFromKeystore("PKCS12",password,secretContent);    }  } else   if (secretName.endsWith(".jceks")) {    while (expiry == null && !passwords.isEmpty()) {      String password=passwords.remove(0);      expiry=ExpirationExtractor.expirationFromKeystore("JCEKS",password,secretContent);    }  } else   if (secretName.endsWith(".jks")) {    while (expiry == null && !passwords.isEmpty()) {      String password=passwords.remove(0);      expiry=ExpirationExtractor.expirationFromKeystore("JKS",password,secretContent);    }  }  if (expiry != null) {    logger.info("Found expiry for secret {}: {}",secretName,expiry.getEpochSecond());    boolean success=secretDAO.setExpiration(name,expiry);    if (success) {      Map<String,String> extraInfo=new HashMap<>();      extraInfo.put("backfilled expiry",Long.toString(expiry.getEpochSecond()));      auditLog.recordEvent(new Event(Instant.now(),EventTag.SECRET_BACKFILLEXPIRY,automationClient.getName(),name,extraInfo));    }    return success;  }  logger.info("Unable to determine expiry for secret {}",secretName);  return false;}  }
class C{  public static void printGroups(PrintStream out){  for (  Group group : groups) {    out.println(group);  }}  }
class C{  @Override public boolean clonePropertiesOf(PLIObject object){  if (super.clonePropertiesOf(object)) {    if (object instanceof PLIHotspot) {      PLIHotspot hotspot=(PLIHotspot)object;      this.setAtv(hotspot.getAtv());      this.setAth(hotspot.getAth());      this.setWidth(hotspot.getWidth());      this.setHeight(hotspot.getHeight());      this.setOverAlpha(hotspot.getOverAlpha());      this.setDefaultOverAlpha(hotspot.getDefaultOverAlpha());    }    return true;  }  return false;}  }
class C{  public SymbolTableEntryOriginal basicGetDelegationBaseType(){  return delegationBaseType;}  }
class C{  private void clearAsyncQueue(LocalRegion region,boolean needsWriteLock,RegionVersionVector rvv){  DiskRegion dr=region.getDiskRegion();  if (needsWriteLock) {    acquireWriteLock(dr);  }  try {    Iterator<Object> it=this.asyncQueue.iterator();    while (it.hasNext()) {      Object o=it.next();      if (o instanceof AsyncDiskEntry) {        AsyncDiskEntry ade=(AsyncDiskEntry)o;        if (shouldClear(region,rvv,ade)) {          rmAsyncItem(o);        }      }    }  }  finally {    if (needsWriteLock) {      releaseWriteLock(dr);    }  }}  }
class C{  private void drawXAxisMarker(Canvas canvas,double value,NumberFormat numberFormat,int spacing){  String marker=chartByDistance ? numberFormat.format(value) : StringUtils.formatElapsedTime((long)value);  Rect rect=getRect(xAxisMarkerPaint,marker);  canvas.drawText(marker,getX(value),topBorder + effectiveHeight + spacing+ rect.height(),xAxisMarkerPaint);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isExpiredDelivery() throws RcsPersistentStorageException, RcsGenericException {  try {    return mTransferInf.isExpiredDelivery();  } catch (  Exception e) {    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public NokiaOperatorLogo(byte[] bitmapData,int mcc,int mnc){  super(SmsPort.NOKIA_OPERATOR_LOGO,SmsPort.ZERO);  bitmapData_=bitmapData;  mcc_=mcc;  mnc_=mnc;}  }
class C{  public static void clearStartupLogMessages(){  startupLogMessages=null;}  }
class C{  public IsA statelessClone(){  return new IsA(type);}  }
