class C{  public GasStack(Gas gas,int quantity){  type=gas;  amount=quantity;}  }
class C{  public void tryVibrate(){  if (mVibrator != null && mIsGloballyEnabled) {    long now=SystemClock.uptimeMillis();    if (now - mLastVibrate >= VIBRATE_DELAY_MS) {      mVibrator.vibrate(VIBRATE_LENGTH_MS);      mLastVibrate=now;    }  }}  }
class C{  public void actionPerformed(ActionEvent evt){  if (inspectorFrame == null) {    inspectorFrame=new JFrame("DOM Tree Inspector");  }  if (inspector == null) {    inspector=new DOMInspector(panel.doc,panel.getSharedContext(),panel.getSharedContext().getCss());    inspectorFrame.getContentPane().add(inspector);    inspectorFrame.pack();    inspectorFrame.setSize(400,600);    inspectorFrame.setVisible(true);  } else {    inspector.setForDocument(panel.doc,panel.getSharedContext(),panel.getSharedContext().getCss());  }  inspectorFrame.setVisible(true);}  }
class C{  @Override public void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException {  heartBeater.needHeartBeat();  try {    runner.map(value.toString(),context.getConfiguration(),context);  }  finally {    heartBeater.cancelHeartBeat();  }}  }
class C{  private void sanityCheckEnv() throws Exception {  checkPlatform();  checkClusterStatus();  if (!VdcUtil.isLocalVdcSingleSite()) {    String errmsg="Cluster is in GEO env.";    log.error(errmsg);    throw new IllegalStateException(errmsg);  }}  }
class C{  public Float(float x,float y,float w,float h){  setFrame(x,y,w,h);}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  public boolean isStartFromZero(){  return null == startFromZero ? _startFromZero : startFromZero.get();}  }
class C{  private static void computeTransitiveClosure(){  if (!worklist.isEmpty()) {    agePropagate=Word.max();    ObjectReference ref=worklist.pop();    while (!ref.isNull()) {      Word currentAge=VM.traceInterface.getDeathTime(ref);      if (currentAge.LE(agePropagate)) {        agePropagate=currentAge;        VM.scanning.scanObject(getTraceLocal(),ref);      }      ref=worklist.pop();    }  }}  }
class C{  private boolean isInaccessible(PsiModifierListOwner element,boolean noProtected){}  }
class C{  public <T extends PO>POResultSet<T> scroll() throws DBException {  String sql=buildSQL(null,true);  PreparedStatement pstmt=null;  ResultSet rs=null;  POResultSet<T> rsPO=null;  try {    pstmt=DB.prepareStatement(sql,trxName);    rs=createResultSet(pstmt);    rsPO=new POResultSet<T>(table,pstmt,rs,trxName);    rsPO.setCloseOnError(true);    return rsPO;  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    throw new DBException(e,sql);  } finally {    if (rsPO == null) {      DB.close(rs,pstmt);      rs=null;      pstmt=null;    }  }}  }
class C{  protected void renderImage(Graphics g,Image image,Point loc){  if (image != null) {    if (DEBUG) {      logger.fine("drawing icon image at " + loc.x + ", "+ loc.y);    }    if (noScalingRequired) {      g.drawImage(image,loc.x,loc.y,null);      return;    }    if (g instanceof Graphics2D) {      if (image instanceof BufferedImage) {        ((Graphics2D)g).drawImage((BufferedImage)image,scalingXFormOp,loc.x,loc.y);      } else {        int dx1=loc.x;        int dy1=loc.y;        int dx2=point2.x;        int dy2=point2.y;        ((Graphics2D)g).drawImage(image,dx1,dy1,dx2,dy2,0,0,width,height,this);      }    }  } else   if (DEBUG) {    logger.fine("ignoring null bitmap image");  }}  }
class C{  public boolean commandGui(String command,String parameter){  if (command.equals("settings")) {    getSettingsDialog().showSettings();  } else   if (command.equals("customemotes")) {    printLine(emoticons.getCustomEmotesInfo());  } else   if (command.equals("reloadcustomemotes")) {    printLine("Reloading custom emotes from file..");    emoticons.loadCustomEmotes();    printLine(emoticons.getCustomEmotesInfo());  } else   if (command.equals("livestreams")) {    openLiveStreamsDialog();  } else   if (command.equals("channeladmin")) {    openChannelAdminDialog();  } else   if (command.equals("channelinfo")) {    openChannelInfoDialog();  } else   if (command.equals("search")) {    openSearchDialog();  } else   if (command.equals("insert")) {    insert(parameter,false);  } else   if (command.equals("insertword")) {    insert(parameter,true);  } else   if (command.equals("openurl")) {    if (!UrlOpener.openUrl(parameter)) {      printLine("Failed to open URL (none specified or invalid).");    }  } else   if (command.equals("openurlprompt")) {    if (!UrlOpener.openUrlPrompt(getActiveWindow(),parameter,true)) {      printLine("Failed to open URL (none specified or invalid).");    }  } else   if (command.equals("openfollowers")) {    openFollowerDialog();  } else   if (command.equals("opensubscribers")) {    openSubscriberDialog();  } else   if (command.equals("openrules")) {    if (parameter != null) {      openChatRules("#" + parameter);    } else {      openChatRules();    }  } else   if (command.equals("openstreamchat")) {    openStreamChat();  } else   if (command.equals("clearstreamchat")) {    streamChat.clear();  } else   if (command.equals("streamchattest")) {    String message="A bit longer chat message with emotes and stuff " + "FrankerZ ZreknarF MiniK (" + (int)(Math.random() * 10) + ")";    if (parameter != null && !parameter.isEmpty()) {      message=parameter;    }    UserMessage m=new UserMessage(client.getSpecialUser(),message,null,null,0);    streamChat.printMessage(m);  } else   if (command.equals("livestreamer")) {    String stream=null;    String quality=null;    if (parameter != null && !parameter.trim().isEmpty()) {      String[] split=parameter.trim().split(" ");      stream=split[0];      if (stream.equals("$active")) {        stream=channels.getActiveChannel().getStreamName();        if (stream == null) {          printLine("Livestreamer: No channel open.");          return true;        }      }      if (split.length > 1) {        quality=split[1];      }    }    printLine("Livestreamer: Opening stream..");    livestreamerDialog.open(stream,quality);  } else   if (command.equals("help")) {    openHelp(null);  } else   if (command.equals("setstreamchatsize")) {    Dimension size=Helper.getDimensionFromParameter(parameter);    if (size != null) {      setStreamChatSize(size.width,size.height);      printSystem("Set StreamChat size to " + size.width + "x"+ size.height);      return true;    }    printSystem("Invalid parameters.");  } else   if (command.equals("getstreamchatsize")) {    Dimension d=streamChat.getSize();    printSystem("StreamChat size: " + d.width + "x"+ d.height);  } else   if (command.equals("setsize")) {    Dimension size=Helper.getDimensionFromParameter(parameter);    if (size != null) {      setSize(size);      printSystem(String.format("Set Window size to %dx%d",size.width,size.height));      return true;    }    printSystem("Invalid parameters.");  } else {    return false;  }  return true;}  }
class C{  protected void forceTileUpdate(){  for (  ContentTile tile : tiles) {    tile.updateTime=-1;  }}  }
class C{  public DunnIndex(IntraClusterEvaluation ice,ClusterDissimilarity cd){  this.ice=ice;  this.cd=cd;}  }
class C{  public void writeObject(Object object) throws IOException {  _out.writeStreamingObject(object);}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if ((m_Indices != null) || (getInputFormat().classAttribute().isNominal())) {    convertInstance(instance);    return true;  }  bufferInput(instance);  return false;}  }
class C{  public LinkedList<Diff> diff_fromDelta(String text1,String delta) throws IllegalArgumentException {  LinkedList<Diff> diffs=new LinkedList<Diff>();  int pointer=0;  String[] tokens=delta.split("\t");  for (  String token : tokens) {    if (token.length() == 0) {      continue;    }    String param=token.substring(1);switch (token.charAt(0)) {case '+':      param=param.replace("+","%2B");    try {      param=URLDecoder.decode(param,"UTF-8");    } catch (    UnsupportedEncodingException e) {      throw new Error("This system does not support UTF-8.",e);    }catch (    IllegalArgumentException e) {      throw new IllegalArgumentException("Illegal escape in diff_fromDelta: " + param,e);    }  diffs.add(new Diff(Operation.INSERT,param));break;case '-':case '=':int n;try {n=Integer.parseInt(param);} catch (NumberFormatException e) {throw new IllegalArgumentException("Invalid number in diff_fromDelta: " + param,e);}if (n < 0) {throw new IllegalArgumentException("Negative number in diff_fromDelta: " + param);}String text;try {text=text1.substring(pointer,pointer+=n);} catch (StringIndexOutOfBoundsException e) {throw new IllegalArgumentException("Delta length (" + pointer + ") larger than source text length ("+ text1.length()+ ").",e);}if (token.charAt(0) == '=') {diffs.add(new Diff(Operation.EQUAL,text));} else {diffs.add(new Diff(Operation.DELETE,text));}break;default :throw new IllegalArgumentException("Invalid diff operation in diff_fromDelta: " + token.charAt(0));}}if (pointer != text1.length()) {throw new IllegalArgumentException("Delta length (" + pointer + ") smaller than source text length ("+ text1.length()+ ").");}return diffs;}  }
class C{  public void showProgress(final int id,final int sofar,final int total){  final T notification=get(id);  if (notification == null) {    return;  }  notification.updateStatus(FileDownloadStatus.progress);  notification.update(sofar,total);}  }
class C{  public int nextClearBit(int index){  int i=index >> 6;  if (i >= wlen)   return -1;  int subIndex=index & 0x3f;  long word=~bits.get(i) >> subIndex;  if (word != 0) {    return (i << 6) + subIndex + Long.numberOfTrailingZeros(word);  }  while (++i < wlen) {    word=~bits.get(i);    if (word != 0) {      return (i << 6) + Long.numberOfTrailingZeros(word);    }  }  return -1;}  }
class C{  public String routing(){  return this.routing;}  }
class C{  public void moveCursorBy(int p_146182_1_){  setCursorPosition(selectionEnd + p_146182_1_);}  }
class C{  public static double quantile(double val,double scale,double shape){  return scale * Math.pow(val / (1. - val),1. / shape);}  }
class C{  public static ViewGroup buildStickyDrawerItemFooter(Context ctx,DrawerBuilder drawer,View.OnClickListener onClickListener){  final LinearLayout linearLayout=new LinearLayout(ctx);  linearLayout.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT));  linearLayout.setOrientation(LinearLayout.VERTICAL);  linearLayout.setBackgroundColor(UIUtils.getThemeColorFromAttrOrRes(ctx,R.attr.material_drawer_background,R.color.material_drawer_background));  if (drawer.mStickyFooterDivider) {    addStickyFooterDivider(ctx,linearLayout);  }  fillStickyDrawerItemFooter(drawer,linearLayout,onClickListener);  return linearLayout;}  }
class C{  @Override public AgentAppController createController(){  return new VacuumController();}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.LITERAL_ANNOTATION_ARGUMENT___VALUE:    return value();}return super.eInvoke(operationID,arguments);}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  Log.d(TAG,"onDestroy() - the activity is about to be destroyed");}  }
class C{  private static Supplier<IllegalArgumentException> handleNonExistentModule(String module){  return null;}  }
class C{  public boolean hasLargestChangestamp(){  return hasExtension(LargestChangestamp.class);}  }
class C{  private Name serializedLambdaName(){  StringBuilder buf=new StringBuilder();  buf.append(names.lambda);  buf.append(enclosingMethodName());  buf.append('$');  String disam=serializedLambdaDisambiguation();  buf.append(Integer.toHexString(disam.hashCode()));  buf.append('$');  buf.append(syntheticMethodNameCounts.getIndex(buf));  String result=buf.toString();  return names.fromString(result);}  }
class C{  protected int insertionIndex(T obj){  Object[] set=_set;  int length=set.length;  int hash=_hashingStrategy.computeHashCode(obj) & 0x7fffffff;  int index=hash % length;  Object cur=set[index];  if (cur == null) {    return index;  }  if (cur != REMOVED && _hashingStrategy.equals((T)cur,obj)) {    return -index - 1;  }  int probe=1 + hash % (length - 2);  int firstRemoved=cur == REMOVED ? index : -1;  do {    index-=probe;    if (index < 0) {      index+=length;    }    cur=set[index];    if (firstRemoved == -1 && cur == REMOVED) {      firstRemoved=index;    }  } while (cur != null && cur != REMOVED && !_hashingStrategy.equals((T)cur,obj));  if (cur == REMOVED) {    while (cur != null && (cur == REMOVED || !_hashingStrategy.equals((T)cur,obj))) {      index-=probe;      if (index < 0) {        index+=length;      }      cur=set[index];    }  }  if (cur != null && cur != REMOVED) {    return -index - 1;  }  return firstRemoved == -1 ? index : firstRemoved;}  }
class C{  public List<NondominatedPopulation> runSeeds(int numberOfSeeds){  isCanceled.set(false);  if ((checkpointFile != null) && (numberOfSeeds > 1)) {    System.err.println("checkpoints not supported when running multiple seeds");    checkpointFile=null;  }  int maxEvaluations=properties.getInt("maxEvaluations",-1);  long maxTime=properties.getLong("maxTime",-1);  List<NondominatedPopulation> results=new ArrayList<NondominatedPopulation>();  progress.start(numberOfSeeds,maxEvaluations,maxTime);  for (int i=0; i < numberOfSeeds && !isCanceled.get(); i++) {    NondominatedPopulation result=runSingleSeed(i + 1,numberOfSeeds,createTerminationCondition());    if (result != null) {      results.add(result);      progress.nextSeed();    }  }  progress.stop();  return results;}  }
class C{  @Override public int nextInt(int n){  return i++ % n;}  }
class C{  private void testCreateEntries(final Folder folder,int folderCount,int processCount,int ioobjectCount,int blobEntryCount) throws Exception {  int allOperations=folderCount + processCount + ioobjectCount+ blobEntryCount;  List<Callable<Void>> operations=new ArrayList<>(allOperations);  for (int i=0; i < allOperations * REFRESH_CALL_RATIO; i++) {    operations.add(folder_refresh(folder));  }  for (int i=0; i < folderCount; i++) {    operations.add(folder_createFolder(folder,FOLDER_NAME_PREFIX + i));  }  for (int i=0; i < processCount; i++) {    operations.add(folder_createProcessEntry(folder,PROCESS_NAME_PREFIX + i));  }  for (int i=0; i < ioobjectCount; i++) {    operations.add(folder_createIOObjectEntry(folder,IOOBJECT_NAME_PREFIX + i,new TestIOObject()));  }  for (int i=0; i < blobEntryCount; i++) {    operations.add(folder_createBlobEntry(folder,BLOBENTRY_NAME_PREFIX + i));  }  executeOperations(operations);  try {    Assert.assertEquals("subfolder count mismatch",folderCount,folder.getSubfolders().size());    Assert.assertEquals("data entry count mismatch",ioobjectCount + processCount + blobEntryCount,folder.getDataEntries().size());    for (int i=0; i < processCount; i++) {      String name=PROCESS_NAME_PREFIX + i;      Assert.assertTrue(name + " not found",folder.containsEntry(name));    }    for (int i=0; i < processCount; i++) {      String name=IOOBJECT_NAME_PREFIX + i;      Assert.assertTrue(name + " not found",folder.containsEntry(name));    }    for (int i=0; i < blobEntryCount; i++) {      String name=BLOBENTRY_NAME_PREFIX + i;      Assert.assertTrue(name + " not found",folder.containsEntry(name));    }  } catch (  RepositoryException e) {    Assert.fail(Thread.currentThread().getName() + " " + e.getMessage());  }}  }
class C{  public void buildClassifier(Instances data) throws Exception {  if (m_numExecutionSlots < 1) {    throw new Exception("Number of execution slots needs to be >= 1!");  }  if (m_numExecutionSlots > 1) {    if (m_Debug) {      System.out.println("Starting executor pool with " + m_numExecutionSlots + " slots...");    }    startExecutorPool();  }  m_completed=0;  m_failed=0;}  }
class C{  final boolean casRight(Index<K,V> cmp,Index<K,V> val){  return UNSAFE.compareAndSwapObject(this,rightOffset,cmp,val);}  }
class C{  private PropertyChangeListener createWindowPropertyChangeListener(){  return new PropertyChangeHandler();}  }
class C{  public MediaType withoutParameters(){  return parameters.isEmpty() ? this : create(type,subtype);}  }
class C{  public static void print(int x){  out.print(x);  out.flush();}  }
class C{  public long nextLong(long least,long bound){  if (least >= bound) {    throw new IllegalArgumentException();  }  return nextLong(bound - least) + least;}  }
class C{  private void cdiv(double xr,double xi,double yr,double yi){  double r, d;  if (Math.abs(yr) > Math.abs(yi)) {    r=yi / yr;    d=yr + r * yi;    cdivr=(xr + r * xi) / d;    cdivi=(xi - r * xr) / d;  } else {    r=yr / yi;    d=yi + r * yr;    cdivr=(r * xr + xi) / d;    cdivi=(r * xi - xr) / d;  }}  }
class C{  private void validateFields(){  String text=myTagNameTextField.getText();  if (myExistingTags.contains(text)) {    myForceCheckBox.setEnabled(true);    if (!myForceCheckBox.isSelected()) {      setErrorText(GitBundle.getString("tag.error.tag.exists"));      setOKActionEnabled(false);      return;    }  } else {    myForceCheckBox.setEnabled(false);    myForceCheckBox.setSelected(false);  }  if (myCommitTextFieldValidator.isInvalid()) {    setErrorText(GitBundle.getString("tag.error.invalid.commit"));    setOKActionEnabled(false);    return;  }  if (text.length() == 0) {    setErrorText(null);    setOKActionEnabled(false);    return;  }  setErrorText(null);  setOKActionEnabled(true);}  }
class C{  public void writeSampleData(int trackIndex,ByteBuffer byteBuf,MediaCodec.BufferInfo bufferInfo) throws Exception {  if (bufferInfo.offset > 0) {    Log.w(TAG,String.format("encoded frame %dB, offset=%d pts=%dms",bufferInfo.size,bufferInfo.offset,bufferInfo.presentationTimeUs / 1000));  }  if (VIDEO_TRACK == trackIndex) {    flv.writeVideoSample(byteBuf,bufferInfo);  } else {    flv.writeAudioSample(byteBuf,bufferInfo);  }}  }
class C{  public static String toStringBinary(ByteBuffer bb){  return bb == null ? null : toStringBinary(bb.array(),bb.arrayOffset() + bb.position(),bb.remaining());}  }
class C{  public void controllerNotifiedForHotness(CompiledMethod hotMethod,double numSamples){  if (Controller.options.LOGGING_LEVEL >= 2) {    printlnToLogWithTimePrefix(" Controller notified that method " + hotMethod.getMethod() + "("+ hotMethod.getId()+ ")"+ " has "+ numSamples+ " samples");  }}  }
class C{  public void run(){  TextAnnotation ta1=tab.createTextAnnotation(TEST_INPUT);{    try {      view=getView(ta1);    } catch (    AnnotatorException e) {      e.printStackTrace();      fail(e.getMessage());    }    assertTrue(view != null);  }  long start=System.currentTimeMillis();  for (int i=0; i < duration; i++) {    TextAnnotation ta=tab.createTextAnnotation(TEST_INPUT);    try {      view=getView(ta);    } catch (    AnnotatorException e) {      e.printStackTrace();      fail(e.getMessage());    }    for (    Constituent c : view.getConstituents()) {      if (!entities.contains(c.toString()))       error="No entity named \"" + c.toString() + "\"";    }  }  if (error == null)   averageRunTime=(System.currentTimeMillis() - start) / duration;}  }
class C{  private void initBatteryLevel(CommonServiceConfiguration configuration) throws RcsServiceException {  mBatteryLevel.setPersistent(false);  mBatteryLevel.setOnPreferenceChangeListener(this);  mBatteryLevel.setValue(String.valueOf(configuration.getMinimumBatteryLevel().toInt()));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public GrammarFunctionNode(GPFunctionSet gpfs,String name){  super(name);  prototype=((GPNode[])(gpfs.nodesByName.get(name)))[0];}  }
class C{  protected void sequence_S_Other(ISerializationContext context,S_Other semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public long[] popDat11(){  if (tmp.empty())   return new long[MULTI_11_NUM_BITSTRINGS]; else   return (long[])(tmp.pop());}  }
class C{  public static boolean isGwtVersionGreaterOrEqualTo27(IJavaProject javaProject){  String gwtVersionCompareTo="2.7.0";  String gwtVersionCurrentProject=getProjectGwtVersion(javaProject);  int comparison=SdkUtils.compareVersionStrings(gwtVersionCompareTo,gwtVersionCurrentProject);  return comparison >= 0;}  }
class C{  private boolean deleteIfAlreadyExists(IProgressMonitor pm,String newName) throws CoreException {  pm.beginTask("",1);  IResource current=getDestination().findMember(newName);  if (current == null)   return true;  if (!current.exists())   return true;  IResource resource=getResource();  Assert.isNotNull(resource);  if (ReorgUtils.areEqualInWorkspaceOrOnDisk(resource,current))   return false;  if (current instanceof IFile)   ((IFile)current).delete(false,true,new SubProgressMonitor(pm,1)); else   if (current instanceof IFolder)   ((IFolder)current).delete(false,true,new SubProgressMonitor(pm,1)); else   Assert.isTrue(false);  return true;}  }
class C{  protected void prepareImportTable() throws SQLException {  ResultSet columnList=null;  OneRowChange specOrc=new OneRowChange();  columnDefinitions=new ArrayList<ColumnSpec>();  try {    columnList=metadata.getColumns(importTables.getString("TABLE_CAT"),importTables.getString("TABLE_SCHEM"),importTables.getString("TABLE_NAME"),null);    while (columnList.next()) {      ColumnSpec cSpec=specOrc.new ColumnSpec();      cSpec.setName(columnList.getString("COLUMN_NAME"));      cSpec.setType(extractColumnType(columnList));      cSpec.setLength(columnList.getInt("COLUMN_SIZE"));      columnDefinitions.add(cSpec);      logger.debug("Import column " + columnList.getString("TABLE_SCHEM") + ":"+ columnList.getString("TABLE_NAME")+ ":"+ columnList.getString("COLUMN_NAME")+ ":"+ columnList.getString("DATA_TYPE")+ ":"+ columnList.getString("TYPE_NAME")+ ":"+ columnList.getInt("COLUMN_SIZE"));    }  }  finally {    if (columnList != null) {      columnList.close();    }  }}  }
class C{  public ProtoIdItem intern(Prototype prototype){  if (prototype == null) {    throw new NullPointerException("prototype == null");  }  throwIfPrepared();  ProtoIdItem result=protoIds.get(prototype);  if (result == null) {    result=new ProtoIdItem(prototype);    protoIds.put(prototype,result);  }  return result;}  }
class C{  public static void generateExtensionManager(File rootFolder) throws IOException {  File outFile=new File(rootFolder,REGISTRY_PATH);  StringBuilder builder=new StringBuilder();  builder.append("package org.eclipse.che.ide.client;\n\n");  generateImports(builder);  generateClass(builder);  FileUtils.writeStringToFile(outFile,builder.toString());}  }
class C{  public void testTrainEditFrameDelete(){  TrainManager tmanager=TrainManager.instance();  Train t=tmanager.getTrainByName("Test_Train 1");  Assert.assertNotNull(t);  TrainEditFrame trainEditFrame=new TrainEditFrame(t);  trainEditFrame.setTitle("Test Delete Train Frame");  enterClickAndLeave(trainEditFrame.deleteTrainButton);  pressDialogButton(trainEditFrame,"Yes");  t=tmanager.getTrainByName("Test_Train 1");  Assert.assertNull("train deleted",t);  enterClickAndLeave(trainEditFrame.addTrainButton);  t=tmanager.getTrainByName("Test_Train 1");  Assert.assertNotNull("train added",t);  trainEditFrame.dispose();}  }
class C{  protected long writeDataToFile(NodeHolder nodeHolder,FileChannel channel) throws CarbonDataWriterException {  byte[][] compressedIndex=nodeHolder.getCompressedIndex();  byte[][] compressedIndexMap=nodeHolder.getCompressedIndexMap();  byte[][] compressedDataIndex=nodeHolder.getCompressedDataIndex();  int indexBlockSize=0;  int index=0;  for (int i=0; i < nodeHolder.getKeyBlockIndexLength().length; i++) {    indexBlockSize+=nodeHolder.getKeyBlockIndexLength()[index++] + CarbonCommonConstants.INT_SIZE_IN_BYTE;  }  for (int i=0; i < nodeHolder.getDataIndexMapLength().length; i++) {    indexBlockSize+=nodeHolder.getDataIndexMapLength()[i];  }  ByteBuffer byteBuffer=ByteBuffer.allocate(nodeHolder.getKeyArray().length + nodeHolder.getDataArray().length + indexBlockSize);  long offset=0;  try {    offset=channel.size();    byteBuffer.put(nodeHolder.getKeyArray());    byteBuffer.put(nodeHolder.getDataArray());    ByteBuffer buffer1=null;    for (int i=0; i < compressedIndex.length; i++) {      buffer1=ByteBuffer.allocate(nodeHolder.getKeyBlockIndexLength()[i]);      buffer1.putInt(compressedIndex[i].length);      buffer1.put(compressedIndex[i]);      if (compressedIndexMap[i].length > 0) {        buffer1.put(compressedIndexMap[i]);      }      buffer1.rewind();      byteBuffer.put(buffer1.array());    }    for (int i=0; i < compressedDataIndex.length; i++) {      byteBuffer.put(compressedDataIndex[i]);    }    byteBuffer.flip();    channel.write(byteBuffer);  } catch (  IOException exception) {    throw new CarbonDataWriterException("Problem in writing carbon file: ",exception);  }  return offset;}  }
class C{  public Table(int nrows,int ncols){  this(nrows,ncols,TableTuple.class);}  }
class C{  private void inflate(Resources r,XmlPullParser parser,AttributeSet attrs) throws XmlPullParserException, IOException {  int type;  final int innerDepth=parser.getDepth() + 1;  int depth;  int listAllocated=20;  int listSize=0;  int[] colorList=new int[listAllocated];  int[][] stateSpecList=new int[listAllocated][];  while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && ((depth=parser.getDepth()) >= innerDepth || type != XmlPullParser.END_TAG)) {    if (type != XmlPullParser.START_TAG) {      continue;    }    if (depth > innerDepth || !parser.getName().equals("item")) {      continue;    }    int colorRes=0;    int color=0xffff0000;    boolean haveColor=false;    int i;    int j=0;    final int numAttrs=attrs.getAttributeCount();    int[] stateSpec=new int[numAttrs];    for (i=0; i < numAttrs; i++) {      final int stateResId=attrs.getAttributeNameResource(i);      if (stateResId == 0)       break;      if (stateResId == com.android.internal.R.attr.color) {        colorRes=attrs.getAttributeResourceValue(i,0);        if (colorRes == 0) {          color=attrs.getAttributeIntValue(i,color);          haveColor=true;        }      } else {        stateSpec[j++]=attrs.getAttributeBooleanValue(i,false) ? stateResId : -stateResId;      }    }    stateSpec=StateSet.trimStateSet(stateSpec,j);    if (colorRes != 0) {      color=r.getColor(colorRes);    } else     if (!haveColor) {      throw new XmlPullParserException(parser.getPositionDescription() + ": <item> tag requires a 'android:color' attribute.");    }    if (listSize == 0 || stateSpec.length == 0) {      mDefaultColor=color;    }    if (listSize + 1 >= listAllocated) {      listAllocated=ArrayUtils.idealIntArraySize(listSize + 1);      int[] ncolor=new int[listAllocated];      System.arraycopy(colorList,0,ncolor,0,listSize);      int[][] nstate=new int[listAllocated][];      System.arraycopy(stateSpecList,0,nstate,0,listSize);      colorList=ncolor;      stateSpecList=nstate;    }    colorList[listSize]=color;    stateSpecList[listSize]=stateSpec;    listSize++;  }  mColors=new int[listSize];  mStateSpecs=new int[listSize][];  System.arraycopy(colorList,0,mColors,0,listSize);  System.arraycopy(stateSpecList,0,mStateSpecs,0,listSize);}  }
class C{  public Vset checkValue(Environment env,Context ctx,Vset vset,Hashtable exp){  vset=left.checkValue(env,ctx,vset,exp);  vset=right.checkValue(env,ctx,vset,exp);  int tm=left.type.getTypeMask() | right.type.getTypeMask();  if ((tm & TM_ERROR) != 0) {    return vset;  }  selectType(env,ctx,tm);  if (type.isType(TC_ERROR)) {    env.error(where,"invalid.args",opNames[op]);  }  return vset;}  }
class C{  public void append(StringBuffer buffer,String fieldName,long[] array,Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  private File calcParentTree(){  File parentTree=treeFile.getParentFile();  if (null == parentTree) {    return null;  }  if (treeFile.isAbsolute() && (null == parentTree.getParentFile())) {    return null;  }  return parentTree;}  }
class C{  public static PropertiesReader load(String propertiesFile){  return new PropertiesReader(loadProperties(propertiesFile));}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.N4_CLASS_DEFINITION__SUPER_CLASS_REF:    setSuperClassRef((ParameterizedTypeRef)null);  return;case N4JSPackage.N4_CLASS_DEFINITION__SUPER_CLASS_EXPRESSION:setSuperClassExpression((Expression)null);return;case N4JSPackage.N4_CLASS_DEFINITION__IMPLEMENTED_INTERFACE_REFS:getImplementedInterfaceRefs().clear();return;}super.eUnset(featureID);}  }
class C{  protected synchronized void read(long offset,byte[] b) throws IOException {  if (byteBuffer != null) {    byteBuffer.position((int)offset);    byteBuffer.get(b);  } else {    throw new IOException("Read failed, file " + getPath() + " not mapped for I/O");  }}  }
class C{  public void clip(Shape s){  mGraphics.clip(s);}  }
class C{  protected List<ExpressionRef> visit(Compose compose,List<ExpressionRef> value) throws ScopeException {  for (  ExpressionAST argument : compose.getBody()) {    visit(argument,value);  }  return value;}  }
class C{  public boolean hasNextKeyTyped(){synchronized (keyLock) {    return !keysTyped.isEmpty();  }}  }
class C{  public static Number power(Number self,Number exponent){  double base, exp, answer;  base=self.doubleValue();  exp=exponent.doubleValue();  answer=Math.pow(base,exp);  if ((double)((int)answer) == answer) {    return (int)answer;  } else   if ((double)((long)answer) == answer) {    return (long)answer;  } else {    return answer;  }}  }
class C{  @Nullable public String taskName(){  return taskName;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void showGlobalContextActionBar(){  ActionBar actionBar=getActionBar();  actionBar.setDisplayShowTitleEnabled(true);  actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);  actionBar.setTitle(R.string.app_name);}  }
class C{  protected Set<Integer> __getCategories(){  Session session=this.__getHibernateSession();  session.beginTransaction();  List<Integer> idList=session.createQuery("select cat.pageId from Category as cat").list();  Set<Integer> categorySet=new HashSet<Integer>(idList);  session.getTransaction().commit();  return categorySet;}  }
class C{  public boolean isProvidentFund(){  Object oo=get_Value(COLUMNNAME_IsProvidentFund);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void tryCreate(ImapSession session,String tag,ImapCommand command,Responder responder,MailboxNotFoundException e){  final Logger logger=session.getLog();  if (logger.isDebugEnabled()) {    logger.debug("Cannot open mailbox: ",e);  }  no(command,tag,responder,HumanReadableText.FAILURE_NO_SUCH_MAILBOX,StatusResponse.ResponseCode.tryCreate());}  }
class C{  public T caseExecutionContext(ExecutionContext object){  return null;}  }
class C{  public void init(Properties properties) throws SysException {  properties_=properties;  initialize();}  }
class C{  final private static String[] readQDescrList(String string,int[] pos) throws NamingException {  int begin, end;  Vector<String> values=new Vector<>(5);  if (debug) {    System.err.println("ReadQDescrList: pos=" + pos[0]);  }  pos[0]++;  skipWhitespace(string,pos);  begin=pos[0];  end=string.indexOf(OID_LIST_END,begin);  if (end == -1) {    throw new InvalidAttributeValueException("oidlist has no end " + "mark: " + string);  }  while (begin < end) {    String[] one=readQDString(string,pos);    if (debug) {      System.err.println("ReadQDescrList: found '" + one[0] + "' at begin="+ begin+ " end ="+ end);    }    values.addElement(one[0]);    skipWhitespace(string,pos);    begin=pos[0];  }  pos[0]=end + 1;  String[] answer=new String[values.size()];  for (int i=0; i < answer.length; i++) {    answer[i]=values.elementAt(i);  }  return answer;}  }
class C{  public void testAddExtraClasspathWorksWithAnotherPath() throws Exception {  AbstractInstalledLocalContainer container=new AbstractInstalledLocalContainerStub(configuration);  container.setFileHandler(fileHandler);  container.setExtraClasspath(new String[]{PREVIOUS_FILE});  assertEquals(1,container.getExtraClasspath().length);  assertEquals(PREVIOUS_FILE,container.getExtraClasspath()[0]);  container.addExtraClasspath(TEST_FILE);  assertEquals(2,container.getExtraClasspath().length);  assertEquals(PREVIOUS_FILE,container.getExtraClasspath()[0]);  assertEquals(TEST_FILE,container.getExtraClasspath()[1]);}  }
class C{  public boolean startsWith(String s){  return matcher(s).matchesPrefix();}  }
class C{  public StringMap(StringMap t){  count=t.count;  table=new Entry[t.table.length];  for (int i=0; i < table.length; i++) {    Entry e=t.table[i];    Entry n=null;    if (e != null) {      n=new Entry(e.hash,e.key,e.value,null);      table[i]=n;      e=e.next;      while (e != null) {        n.next=new Entry(e.hash,e.key,e.value,null);        n=n.next;        e=e.next;      }    }  }}  }
class C{  public static final String createXPATHMessage(String msgKey,Object args[]){  return createXPATHMsg(XPATHBundle,msgKey,args);}  }
class C{  public E poll(long timeout,TimeUnit unit) throws InterruptedException {  long nanos=unit.toNanos(timeout);  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  try {    for (; ; ) {      E first=q.peek();      if (first == null) {        if (nanos <= 0)         return null; else         nanos=available.awaitNanos(nanos);      } else {        long delay=first.getDelay(NANOSECONDS);        if (delay <= 0)         return q.poll();        if (nanos <= 0)         return null;        first=null;        if (nanos < delay || leader != null)         nanos=available.awaitNanos(nanos); else {          Thread thisThread=Thread.currentThread();          leader=thisThread;          try {            long timeLeft=available.awaitNanos(delay);            nanos-=delay - timeLeft;          }  finally {            if (leader == thisThread)             leader=null;          }        }      }    }  }  finally {    if (leader == null && q.peek() != null)     available.signal();    lock.unlock();  }}  }
class C{  public void discardAllEdits(){  undoManager.discardAllEdits();  getDocument().removeUndoableEditListener(undoManager);  undoManager=new RUndoManager(this);  getDocument().addUndoableEditListener(undoManager);  undoManager.updateActions();}  }
class C{  private void isiExport(IsilonApi isi,FileDeviceInputOutput args,List<FileExport> exports) throws IsilonException {  for (  FileExport fileExport : exports) {    String permissions=fileExport.getPermissions();    Set<String> orderedSecTypes=new TreeSet<String>();    for (    String securityType : fileExport.getSecurityType().split(",")) {      securityType=securityType.trim();      orderedSecTypes.add(securityType);    }    Iterator<String> orderedList=orderedSecTypes.iterator();    String strCSSecurityType=orderedList.next().toString();    while (orderedList.hasNext()) {      strCSSecurityType+="," + orderedList.next().toString();    }    String root_user=fileExport.getRootUserMapping();    String storagePortName=fileExport.getStoragePortName();    String storagePort=fileExport.getStoragePort();    String protocol=fileExport.getProtocol();    String path=fileExport.getPath();    String mountPath=fileExport.getMountPath();    String comments=fileExport.getComments();    String subDirectory=fileExport.getSubDirectory();    if (permissions.equals(FileShareExport.Permissions.root.name()) && !root_user.equals("root")) {      String msg="The root_user mapping is not set to root but the permission is.";      _log.error(msg);      throw IsilonException.exceptions.invalidParameters();    }    List<String> securityTypes=new ArrayList<String>(orderedSecTypes);    IsilonExport newIsilonExport=setIsilonExport(fileExport,permissions,securityTypes,root_user,mountPath,comments);    _log.info("IsilonExport:" + fileExport.getClients() + ":"+ fileExport.getStoragePortName()+ ":"+ fileExport.getStoragePort()+ ":"+ fileExport.getRootUserMapping()+ ":"+ fileExport.getPermissions()+ ":"+ fileExport.getProtocol()+ ":"+ fileExport.getSecurityType()+ ":"+ fileExport.getMountPoint()+ ":"+ fileExport.getPath()+ ":"+ fileExport.getSubDirectory()+ ":"+ fileExport.getComments());    if (args.getFileObjExports() == null) {      args.initFileObjExports();    }    String accessZoneName=getZoneName(args.getvNAS());    String exportKey=fileExport.getFileExportKey();    FileExport fExport=args.getFileObjExports().get(exportKey);    IsilonExport currentIsilonExport=null;    if (fExport != null) {      if (accessZoneName != null) {        currentIsilonExport=isi.getExport(fExport.getIsilonId(),accessZoneName);      } else {        currentIsilonExport=isi.getExport(fExport.getIsilonId());      }    }    if (fExport == null || currentIsilonExport == null) {      String id=null;      if (accessZoneName != null) {        _log.debug("Export will be created in zone: {}",accessZoneName);        id=isi.createExport(newIsilonExport,accessZoneName);      } else {        id=isi.createExport(newIsilonExport);      }      fExport=new FileExport(newIsilonExport.getClients(),storagePortName,mountPath,strCSSecurityType,permissions,root_user,protocol,storagePort,path,mountPath,subDirectory,comments);      fExport.setIsilonId(id);    } else {      List<String> newClients=newIsilonExport.getClients();      newIsilonExport.setClients(new ArrayList<String>(newClients));      if (accessZoneName != null) {        isi.modifyExport(fExport.getIsilonId(),accessZoneName,newIsilonExport);      } else {        isi.modifyExport(fExport.getIsilonId(),newIsilonExport);      }      fExport.setClients(newIsilonExport.getClients());    }    args.getFileObjExports().put(exportKey,fExport);  }}  }
class C{  protected JsonObject parseQoSSettings(final Buffer buffer){  try {    return new JsonObject(replaceConfigWildcards(buffer.toString("UTF-8")));  } catch (  Exception e) {    throw new IllegalArgumentException(e);  }}  }
class C{  public int capacity(){  return data == null ? 0 : data.length;}  }
class C{  public void updateTrainComboBox(JComboBox<Train> box,Car car){  box.removeAllItems();  box.addItem(null);  for (  Train train : getTrainsByNameList()) {    if (train.services(car)) {      box.addItem(train);    }  }}  }
class C{  public void processKeyEvent(KeyEvent e,MenuElement path[],MenuSelectionManager manager){  MenuKeyEvent mke=new MenuKeyEvent(e.getComponent(),e.getID(),e.getWhen(),e.getModifiers(),e.getKeyCode(),e.getKeyChar(),path,manager);  processMenuKeyEvent(mke);  if (mke.isConsumed()) {    e.consume();  }}  }
class C{  public ClientSocketWrapper(){  super(null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:40.043 -0500",hash_original_method="44ECAB7CCF1E1A7E957F1A152FF180D4",hash_generated_method="00EE6B3274706ED9634D310BB4AA658E") public static byte[] tauAdicWNaf(byte mu,ZTauElement lambda,byte width,BigInteger pow2w,BigInteger tw,ZTauElement[] alpha){  if (!((mu == 1) || (mu == -1))) {    throw new IllegalArgumentException("mu must be 1 or -1");  }  BigInteger norm=norm(mu,lambda);  int log2Norm=norm.bitLength();  int maxLength=log2Norm > 30 ? log2Norm + 4 + width : 34 + width;  byte[] u=new byte[maxLength];  BigInteger pow2wMin1=pow2w.shiftRight(1);  BigInteger r0=lambda.u;  BigInteger r1=lambda.v;  int i=0;  while (!((r0.equals(ECConstants.ZERO)) && (r1.equals(ECConstants.ZERO)))) {    if (r0.testBit(0)) {      BigInteger uUnMod=r0.add(r1.multiply(tw)).mod(pow2w);      byte uLocal;      if (uUnMod.compareTo(pow2wMin1) >= 0) {        uLocal=(byte)uUnMod.subtract(pow2w).intValue();      } else {        uLocal=(byte)uUnMod.intValue();      }      u[i]=uLocal;      boolean s=true;      if (uLocal < 0) {        s=false;        uLocal=(byte)-uLocal;      }      if (s) {        r0=r0.subtract(alpha[uLocal].u);        r1=r1.subtract(alpha[uLocal].v);      } else {        r0=r0.add(alpha[uLocal].u);        r1=r1.add(alpha[uLocal].v);      }    } else {      u[i]=0;    }    BigInteger t=r0;    if (mu == 1) {      r0=r1.add(r0.shiftRight(1));    } else {      r0=r1.subtract(r0.shiftRight(1));    }    r1=t.shiftRight(1).negate();    i++;  }  return u;}  }
class C{  private java.util.HashMap<Float,Color> recalculate(final List<Float> fractionList,final List<Color> colorList,final float OFFSET){  final int MAX_FRACTIONS=fractionList.size();  final HashMap<Float,Color> fractionColors=new HashMap<Float,Color>(MAX_FRACTIONS);  for (int i=0; i < MAX_FRACTIONS; i++) {    final float TMP_FRACTION=fractionList.get(i) + OFFSET;    final Color TMP_COLOR=colorList.get(i);    if (TMP_FRACTION <= 0) {      fractionColors.put(1.0f + TMP_FRACTION + 0.0001f,TMP_COLOR);      final float NEXT_FRACTION;      final Color NEXT_COLOR;      if (i < MAX_FRACTIONS - 1) {        NEXT_FRACTION=fractionList.get(i + 1) + OFFSET;        NEXT_COLOR=colorList.get(i + 1);      } else {        NEXT_FRACTION=1 - fractionList.get(0) + OFFSET;        NEXT_COLOR=colorList.get(0);      }      if (NEXT_FRACTION > 0) {        final Color NEW_FRACTION_COLOR=getColorFromFraction(TMP_COLOR,NEXT_COLOR,(int)((NEXT_FRACTION - TMP_FRACTION) * 10000),(int)((-TMP_FRACTION) * 10000));        fractionColors.put(0.0f,NEW_FRACTION_COLOR);        fractionColors.put(1.0f,NEW_FRACTION_COLOR);      }    } else     if (TMP_FRACTION >= 1) {      fractionColors.put(TMP_FRACTION - 1.0f - 0.0001f,TMP_COLOR);      final float PREVIOUS_FRACTION;      final Color PREVIOUS_COLOR;      if (i > 0) {        PREVIOUS_FRACTION=fractionList.get(i - 1) + OFFSET;        PREVIOUS_COLOR=colorList.get(i - 1);      } else {        PREVIOUS_FRACTION=fractionList.get(MAX_FRACTIONS - 1) + OFFSET;        PREVIOUS_COLOR=colorList.get(MAX_FRACTIONS - 1);      }      if (PREVIOUS_FRACTION < 1) {        final Color NEW_FRACTION_COLOR=getColorFromFraction(TMP_COLOR,PREVIOUS_COLOR,(int)((TMP_FRACTION - PREVIOUS_FRACTION) * 10000),(int)(TMP_FRACTION - 1.0f) * 10000);        fractionColors.put(1.0f,NEW_FRACTION_COLOR);        fractionColors.put(0.0f,NEW_FRACTION_COLOR);      }    } else {      fractionColors.put(TMP_FRACTION,TMP_COLOR);    }  }  fractionList.clear();  colorList.clear();  return fractionColors;}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  TimeLockInfoDao.dropTable(db,ifExists);}  }
class C{  public void addTimeline(final JSONObject timeline){  TimelineChannel.notifyTimeline(timeline);  timelines.addFirst(timeline);  final int maxCnt=Symphonys.getInt("timelineCnt");  if (timelines.size() > maxCnt) {    timelines.remove(maxCnt);  }}  }
class C{  public final double[] toDoubleArray(double[] array,int offset,int length){  if (array == null) {    throw new IllegalArgumentException("Array Is Null");  }  if (offset < 0) {    throw new IllegalArgumentException("Offset Is Invalid");  }  if (length < 1) {    throw new IllegalArgumentException("Length Is Invalid");  }  if (array.length < offset + length) {    throw new IllegalArgumentException("Array Invalid Length");  }  array[offset]=this.x;  if (length > 1)   array[offset + 1]=this.y;  if (length > 2)   array[offset + 2]=this.z;  if (length > 3)   array[offset + 3]=this.w;  return array;}  }
class C{  public boolean visit() throws IOException {  for (int i=0; i < 10; i++) {    long bytesLeft=bytesToCopy - bytesCopied;    if (bytesLeft == 0) {      long checksum=out.getChecksum();      if (checksum != metaData.checksum) {        dest.message("file " + tmpName + ": checksum mismatch after copy (bits flipped during network copy?) after-copy checksum="+ checksum+ " vs expected="+ metaData.checksum+ "; cancel job");        throw new IOException("file " + name + ": checksum mismatch after file copy");      }      long actualChecksumIn=in.readLong();      if (actualChecksumIn != checksum) {        dest.message("file " + tmpName + ": checksum claimed by primary disagrees with the file's footer: claimed checksum="+ checksum+ " vs actual="+ actualChecksumIn);        throw new IOException("file " + name + ": checksum mismatch after file copy");      }      out.writeLong(checksum);      close();      if (Node.VERBOSE_FILES) {        dest.message(String.format(Locale.ROOT,"file %s: done copying [%s, %.3fms]",name,Node.bytesToString(metaData.length),(System.nanoTime() - copyStartNS) / 1000000.0));      }      return true;    }    int toCopy=(int)Math.min(bytesLeft,buffer.length);    in.readBytes(buffer,0,toCopy);    out.writeBytes(buffer,0,toCopy);    bytesCopied+=toCopy;  }  return false;}  }
class C{  @Override public Dimension preferredLayoutSize(Container parent){  ComponentOperation.SizeCalculator calculator=new ComponentOperation.SizeCalculator(myDefaultHeight,SizeProperty.PREFERED_SIZE,Orientation.VERTICAL);  withAllVisibleDo(parent,calculator);  OrientedDimensionSum result=calculator.getSum();  result.addInsets(parent.getInsets());  return result.getSum();}  }
class C{  protected void prepare(){}  }
class C{  public boolean draw(Canvas canvas){  update();  mGlow.setAlpha((int)(Math.max(0,Math.min(mGlowAlpha,1)) * 255));  int glowBottom=(int)Math.min(mGlowHeight * mGlowScaleY * mGlowHeight / mGlowWidth * 0.6f,mGlowHeight * MAX_GLOW_HEIGHT);  if (mWidth < mMinWidth) {    int glowLeft=(mWidth - mMinWidth) / 2;    mGlow.setBounds(glowLeft,0,mWidth - glowLeft,glowBottom);  } else {    mGlow.setBounds(0,0,mWidth,glowBottom);  }  mGlow.draw(canvas);  mEdge.setAlpha((int)(Math.max(0,Math.min(mEdgeAlpha,1)) * 255));  int edgeBottom=(int)(mEdgeHeight * mEdgeScaleY);  if (mWidth < mMinWidth) {    int edgeLeft=(mWidth - mMinWidth) / 2;    mEdge.setBounds(edgeLeft,0,mWidth - edgeLeft,edgeBottom);  } else {    mEdge.setBounds(0,0,mWidth,edgeBottom);  }  mEdge.draw(canvas);  if (mState == STATE_RECEDE && glowBottom == 0 && edgeBottom == 0) {    mState=STATE_IDLE;  }  return mState != STATE_IDLE;}  }
class C{  public JSONArray put(long value){  this.put(new Long(value));  return this;}  }
class C{  private boolean equalsAttributes(List<UserMappingAttribute> right){  if (_attributes == null) {    if (right != null) {      return false;    }  } else   if (right == null) {    return false;  }  if (_attributes.size() != right.size()) {    return false;  } else {    return _attributes.containsAll(right);  }}  }
class C{  public LogWriter(String tag){  mTag=tag;}  }
class C{  public void removeAttribute(String name,String namespace){  for (int i=0; i < this.attributes.size(); i++) {    XMLAttribute attr=(XMLAttribute)this.attributes.get(i);    boolean found=attr.getName().equals(name);    if (namespace == null) {      found&=(attr.getNamespace() == null);    } else {      found&=attr.getNamespace().equals(namespace);    }    if (found) {      this.attributes.remove(i);      return;    }  }}  }
class C{  public boolean verify(final long laddr){  final int addr=(int)laddr;  if (addr == 0) {    return false;  }  return getBlockByAddress(addr) != null;}  }
class C{  public static String pad(int direction,Object value,int width,String pad) throws Exception {  String value1;  if (value == null)   value1=""; else   value1=value.toString();  if (width <= 0)   throw new Exception("Width must be > 0");  if (pad.equals("") || pad == null)   pad=" ";  int lnCount=width - value1.length();  if (direction == 1) {    for (int i=0; i < lnCount; i++)     value1=pad + value1;  } else {    for (int i=0; i < lnCount; i++)     value1=value1 + pad;  }  return value1;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.EQUALITY_OP___EQUALS_OP_1:    return getEqualsOp_1();case UmplePackage.EQUALITY_OP___NOTEQUALS_OP_1:  return getNotequalsOp_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static <T extends ServiceDocument>T extractBody(Operation request,Service s,Class<T> clazz){  if (!request.hasBody() && request.hasPragmaDirective(Operation.PRAGMA_DIRECTIVE_SYNCH_OWNER)) {    return null;  }  T state=null;switch (request.getAction()) {case PUT:case POST:    state=request.getBody(clazz);  break;case DELETE:if (request.isFromReplication() && request.hasBody()) {  state=request.getBody(clazz);} else {  state=s.getState(request);}break;default :break;}return state;}  }
class C{  public MkTabTreeNode(int capacity,boolean isLeaf){  super(capacity,isLeaf,MkTabEntry.class);}  }
class C{  public static GregorianCalendar rawBytesToCalendar(byte[] value,boolean honorDeviceTimeOffset){  if (value.length >= 7) {    int year=toUint16(value[0],value[1]);    GregorianCalendar timestamp=new GregorianCalendar(year,value[2],value[3],value[4],value[5],value[6]);    if (honorDeviceTimeOffset) {      int offsetInHours=MiBandCoordinator.getDeviceTimeOffsetHours();      if (offsetInHours != 0) {        timestamp.add(Calendar.HOUR_OF_DAY,-offsetInHours);      }    }    return timestamp;  }  return createCalendar();}  }
class C{  @Override public int storedMB(){  long bytes=0;  final File[] files=cacheDirectory.listFiles();  if (files == null)   return 0;  for (  File file : files) {    bytes+=file.length();  }  double megabytes=Math.ceil((double)bytes / 1024 / 1024);  return (int)megabytes;}  }
class C{  @Override public WorldWindow createWorldWindow(){  WorldWindow wwd=super.createWorldWindow();  Sector sector=new Sector(37.46,15.5,0.5,0.6);  int resourceId=R.drawable.nasa_logo;  SurfaceImage surfaceImageResource=new SurfaceImage(sector,ImageSource.fromResource(resourceId));  sector=new Sector(37.46543388598137,14.60128369746704,0.45360804083528,0.75704283995502);  String urlString="http://worldwindserver.net/android/images/etna.jpg";  SurfaceImage surfaceImageUrl=new SurfaceImage(sector,ImageSource.fromUrl(urlString));  RenderableLayer layer=new RenderableLayer("Surface Image");  layer.addRenderable(surfaceImageResource);  layer.addRenderable(surfaceImageUrl);  wwd.getLayers().addLayer(layer);  wwd.getNavigator().setLatitude(37.46543388598137);  wwd.getNavigator().setLongitude(14.97980511744455);  wwd.getNavigator().setAltitude(4.0e5);  return wwd;}  }
class C{  public void benchHasParentSingleTerm(){  QueryBuilder lookupQuery;  QueryBuilder mainQuery=matchAllQuery();  FilterJoinBuilder stringFilter=QueryBuilders.filterJoin("pid").indices(PARENT_INDEX).types(PARENT_TYPE).path("id").termsEncoding(TermsByQueryRequest.TermsEncoding.LONG);  FilterJoinBuilder longFilter=QueryBuilders.filterJoin("num").indices(PARENT_INDEX).types(PARENT_TYPE).path("num").termsEncoding(TermsByQueryRequest.TermsEncoding.LONG);  FilterJoinBuilder intFilter=QueryBuilders.filterJoin("num").indices(PARENT_INDEX).types(PARENT_TYPE).path("num").termsEncoding(TermsByQueryRequest.TermsEncoding.INTEGER);  FilterJoinBuilder bloomNumFilter=QueryBuilders.filterJoin("num").indices(PARENT_INDEX).types(PARENT_TYPE).path("num").termsEncoding(TermsByQueryRequest.TermsEncoding.BLOOM);  FilterJoinBuilder bloomStringFilter=QueryBuilders.filterJoin("pid").indices(PARENT_INDEX).types(PARENT_TYPE).path("id").termsEncoding(TermsByQueryRequest.TermsEncoding.BLOOM);  long tookString=0;  long tookLong=0;  long tookInt=0;  long tookBloomNum=0;  long tookBloomString=0;  long expected=NUM_CHILDREN_PER_PARENT;  warmFieldData("id","pid");  warmFieldData("num","num");  log("==== HAS PARENT SINGLE TERM ====");  for (int i=0; i < NUM_QUERIES; i++) {    lookupQuery=boolQuery().filter(termQuery("name","test" + (random.nextInt(NUM_PARENTS) + 1)));    stringFilter.query(lookupQuery);    longFilter.query(lookupQuery);    intFilter.query(lookupQuery);    bloomNumFilter.query(lookupQuery);    bloomStringFilter.query(lookupQuery);    tookString+=runQuery("string",i,CHILD_INDEX,expected,filteredQuery(mainQuery,stringFilter));    tookLong+=runQuery("long",i,CHILD_INDEX,expected,filteredQuery(mainQuery,longFilter));    tookInt+=runQuery("int",i,CHILD_INDEX,expected,filteredQuery(mainQuery,intFilter));    tookBloomNum+=runQuery("bloom_num",i,CHILD_INDEX,expected,filteredQuery(mainQuery,bloomNumFilter));    tookBloomString+=runQuery("bloom_string",i,CHILD_INDEX,expected,filteredQuery(mainQuery,bloomStringFilter));  }  log("string: " + (tookString / NUM_QUERIES) + "ms avg");  log("long  : " + (tookLong / NUM_QUERIES) + "ms avg");  log("int   : " + (tookInt / NUM_QUERIES) + "ms avg");  log("bloom_num   : " + (tookBloomNum / NUM_QUERIES) + "ms avg");  log("bloom_string   : " + (tookBloomString / NUM_QUERIES) + "ms avg");  log("");}  }
class C{  protected Boolean compute(double value){  if (Double.isNaN(value)) {    return true;  } else {    return false;  }}  }
class C{  public EventException(Throwable throwable){  cause=throwable;}  }
class C{  private void recomputeMaxStimulusLength(){  totalSmellVectorLength=0;  for (  OdorWorldEntity entity : entityList) {    if (entity.getSmellSource() != null) {      totalSmellVectorLength+=SimbrainMath.getVectorNorm(entity.getSmellSource().getStimulusVector());    }  }}  }
class C{  public void put(String[] localFiles,String remoteTargetDirectory,String mode) throws IOException {  put(localFiles,null,remoteTargetDirectory,mode);}  }
class C{  @SideEffectFree @Override public ImmutableSortedSet<K> keySet(){  ImmutableSortedSet<K> ks=keySet;  return (ks == null) ? (keySet=createKeySet()) : ks;}  }
class C{  public Region replace(String text,boolean regExReplace) throws BadLocationException {  return null;}  }
class C{  public static int dp(float dp){  return (int)(sDensity * dp);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:11.622 -0500",hash_original_method="33F4C16D40F1C908E16B89E59A552BE8",hash_generated_method="7DC58D320C8632A43365B81E8CE70546") public JSONException syntaxError(String message){  return new JSONException(message + this);}  }
class C{  static boolean areEqual(Object a,Object b){  return (a == null ? b == null : a.equals(b));}  }
class C{  @Override protected void applyEditorTo(DLangRunDmdConfiguration config) throws ConfigurationException {  applyCompilerTabForm(config);  applyOutputTabForm(config);  applyDebugTabForm(config);}  }
class C{  public ClusterTaskConfig(final double cpus,final int memoryMb,final int diskMb){  this.cpus=cpus;  this.memoryMb=memoryMb;  this.diskMb=diskMb;}  }
class C{  public void clear(){  Path path=new Path();  path.moveTo(0F,0F);  path.addRect(0F,0F,1000F,1000F,Path.Direction.CCW);  path.close();  Paint paint=new Paint();  paint.setColor(Color.parseColor("#303030"));  paint.setStyle(Paint.Style.FILL);  if (this.historyPointer == this.pathLists.size()) {    this.pathLists.add(path);    this.paintLists.add(paint);    this.historyPointer++;  } else {    this.pathLists.set(this.historyPointer,path);    this.paintLists.set(this.historyPointer,paint);    this.historyPointer++;    for (int i=this.historyPointer, size=this.paintLists.size(); i < size; i++) {      this.pathLists.remove(this.historyPointer);      this.paintLists.remove(this.historyPointer);    }  }  this.text="";  this.invalidate();}  }
class C{  private void extendCG(Configuration config,List<Context> contexts){  PluginConfiguration pluginConfiguration=new PluginConfiguration();  pluginConfiguration.setConfigurationType(CommentsWavePlugin.class.getTypeName());  addToContext(contexts,pluginConfiguration);  if (verbose)   getLog().info("enable comment wave service");  for (  Context context : config.getContexts()) {    context.getCommentGeneratorConfiguration().setConfigurationType(CommentGenerator.class.getTypeName());    if (i18nPath != null && i18nPath.exists()) {      context.getCommentGeneratorConfiguration().addProperty(CommentGenerator.XMBG_CG_I18N_PATH_KEY,i18nPath.getAbsolutePath());    }    if (StringUtils.isEmpty(projectStartYear)) {      projectStartYear=CommentGenerator.XMBG_CG_PROJECT_START_DEFAULT_YEAR;    }    context.getCommentGeneratorConfiguration().addProperty(CommentGenerator.XMBG_CG_PROJECT_START_YEAR,projectStartYear);    context.getCommentGeneratorConfiguration().addProperty(CommentGenerator.XMBG_CG_I18N_LOCALE_KEY,locale);  }  if (verbose)   getLog().info("replace the origin comment generator");}  }
class C{  @Override public int intValue(){  return value;}  }
class C{  public boolean isFull(){  return size() == maxElements;}  }
class C{  public StrBuilder deleteAll(StrMatcher matcher){  return replace(matcher,null,0,size,-1);}  }
class C{  @Override public void finalize(){  int nI;  byte bits[]=new byte[8];  for (nI=0; nI < 8; nI++) {    bits[nI]=(byte)((m_lCount >>> (((7 - nI) << 3))) & 0xff);  }  ;  update((byte)128);  while (m_nBlockIndex != 56)   update((byte)0);  for (nI=0; nI < bits.length; nI++)   update(bits[nI]);  for (nI=0; nI < 20; nI++) {    m_digestBits[nI]=(byte)((m_state[nI >> 2] >> ((3 - (nI & 3)) << 3)) & 0xff);  }  ;}  }
class C{  public Yytoken yylex() throws java.io.IOException, ParseException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    yychar+=zzMarkedPosL - zzStartRead;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 11:{        sb.append(yytext());      }case 25:    break;case 4:{    sb=null;    sb=new StringBuffer();    yybegin(STRING_BEGIN);  }case 26:break;case 16:{sb.append('\b');}case 27:break;case 6:{return new Yytoken(Yytoken.TYPE_RIGHT_BRACE,null);}case 28:break;case 23:{Boolean val=Boolean.valueOf(yytext());return new Yytoken(Yytoken.TYPE_VALUE,val);}case 29:break;case 22:{return new Yytoken(Yytoken.TYPE_VALUE,null);}case 30:break;case 13:{yybegin(YYINITIAL);return new Yytoken(Yytoken.TYPE_VALUE,sb.toString());}case 31:break;case 12:{sb.append('\\');}case 32:break;case 21:{Double val=Double.valueOf(yytext());return new Yytoken(Yytoken.TYPE_VALUE,val);}case 33:break;case 1:{throw new ParseException(yychar,ParseException.ERROR_UNEXPECTED_CHAR,new Character(yycharat(0)));}case 34:break;case 8:{return new Yytoken(Yytoken.TYPE_RIGHT_SQUARE,null);}case 35:break;case 19:{sb.append('\r');}case 36:break;case 15:{sb.append('/');}case 37:break;case 10:{return new Yytoken(Yytoken.TYPE_COLON,null);}case 38:break;case 14:{sb.append('"');}case 39:break;case 5:{return new Yytoken(Yytoken.TYPE_LEFT_BRACE,null);}case 40:break;case 17:{sb.append('\f');}case 41:break;case 24:{try {int ch=Integer.parseInt(yytext().substring(2),16);sb.append((char)ch);} catch (Exception e) {throw new ParseException(yychar,ParseException.ERROR_UNEXPECTED_EXCEPTION,e);}}case 42:break;case 20:{sb.append('\t');}case 43:break;case 7:{return new Yytoken(Yytoken.TYPE_LEFT_SQUARE,null);}case 44:break;case 2:{Long val=Long.valueOf(yytext());return new Yytoken(Yytoken.TYPE_VALUE,val);}case 45:break;case 18:{sb.append('\n');}case 46:break;case 9:{return new Yytoken(Yytoken.TYPE_COMMA,null);}case 47:break;case 3:{}case 48:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public SQLTransactionRollbackException(String reason){  super(reason,null,0);}  }
class C{  public static boolean compareResults(SolrClient controlClient,SolrClient cloudClient,Set<String> addFails,Set<String> deleteFails) throws SolrServerException, IOException {  SolrParams q=SolrTestCaseJ4.params("q","*:*","rows","0","tests","checkShardConsistency(vsControl)");  SolrDocumentList controlDocList=controlClient.query(q).getResults();  long controlDocs=controlDocList.getNumFound();  SolrDocumentList cloudDocList=cloudClient.query(q).getResults();  long cloudClientDocs=cloudDocList.getNumFound();  q=SolrTestCaseJ4.params("q","*:*","rows","100000","fl","id","tests","checkShardConsistency(vsControl)/getIds");  controlDocList=controlClient.query(q).getResults();  if (controlDocs != controlDocList.getNumFound()) {    log.error("Something changed! control now " + controlDocList.getNumFound());  }  cloudDocList=cloudClient.query(q).getResults();  if (cloudClientDocs != cloudDocList.getNumFound()) {    log.error("Something changed! cloudClient now " + cloudDocList.getNumFound());  }  if (controlDocs != cloudClientDocs && (addFails != null || deleteFails != null)) {    boolean legal=CloudInspectUtil.checkIfDiffIsLegal(controlDocList,cloudDocList,"controlDocList","cloudDocList",addFails,deleteFails);    if (legal) {      return false;    }  }  Set<Map> differences=CloudInspectUtil.showDiff(controlDocList,cloudDocList,"controlDocList","cloudDocList");  try {    boolean foundId=false;    StringBuilder ids=new StringBuilder("id:(");    for (    Map doc : differences) {      ids.append(" ").append(doc.get("id"));      foundId=true;    }    ids.append(")");    if (foundId) {      q=SolrTestCaseJ4.params("q",ids.toString(),"rows","100000","fl","id,_version_","sort","id asc","tests","checkShardConsistency(vsControl)/getVers");      SolrDocumentList a=controlClient.query(q,SolrRequest.METHOD.POST).getResults();      SolrDocumentList b=cloudClient.query(q,SolrRequest.METHOD.POST).getResults();      log.error("controlClient :" + a + "\n\tcloudClient :"+ b);    }  } catch (  Exception e) {    log.error("Unable to find versions for mismatched ids",e);  }  return true;}  }
class C{  public String toString(){  return x + "," + y;}  }
class C{  public RepositoryConfig(String id,String title){  this(id);  setTitle(title);}  }
class C{  public boolean isValidating(){  return false;}  }
class C{  public synchronized void lock(int fileLockMethod){  checkServer();  if (locked) {    DbException.throwInternalError("already locked");  }switch (fileLockMethod) {case LOCK_FILE:    lockFile();  break;case LOCK_SOCKET:lockSocket();break;case LOCK_SERIALIZED:lockSerialized();break;case LOCK_FS:break;}locked=true;}  }
class C{  private static boolean isPureImportedFunction(final INaviFunction function){  return (function != null) && (function.getType() == FunctionType.IMPORT) && (function.getForwardedFunctionAddress() == null);}  }
class C{  protected JButton createDecreaseButton(int orientation){  decreaseButton=new MetalScrollButton(orientation,scrollBarWidth,isFreeStanding);  return decreaseButton;}  }
class C{  public ReceiptHeader createPendingReceiptFromCancelledChallanReceipt(final ReceiptHeader oldReceiptHeader){  final ReceiptHeader newReceiptHeader=new ReceiptHeader(true,oldReceiptHeader.getIsModifiable(),oldReceiptHeader.getReceipttype(),oldReceiptHeader.getCollectiontype(),oldReceiptHeader.getPaidBy(),oldReceiptHeader.getService(),oldReceiptHeader.getReferencenumber(),oldReceiptHeader.getReferenceDesc(),oldReceiptHeader.getTotalAmount());  newReceiptHeader.setStatus(collectionsUtil.getStatusForModuleAndCode(CollectionConstants.MODULE_NAME_RECEIPTHEADER,CollectionConstants.RECEIPT_STATUS_CODE_PENDING));  newReceiptHeader.setReceiptHeader(oldReceiptHeader);  final ReceiptMisc receiptMisc=new ReceiptMisc(oldReceiptHeader.getReceiptMisc().getBoundary(),oldReceiptHeader.getReceiptMisc().getFund(),null,null,oldReceiptHeader.getReceiptMisc().getDepartment(),newReceiptHeader,null,null,null);  newReceiptHeader.setReceiptMisc(receiptMisc);  newReceiptHeader.setReceiptdate(new Date());  final List<CChartOfAccounts> bankCOAList=chartOfAccountsHibernateDAO.getBankChartofAccountCodeList();  for (  final ReceiptDetail oldDetail : oldReceiptHeader.getReceiptDetails())   if (!FinancialsUtil.isRevenueAccountHead(oldDetail.getAccounthead(),bankCOAList,persistenceService)) {    final ReceiptDetail receiptDetail=new ReceiptDetail(oldDetail.getAccounthead(),oldDetail.getFunction(),oldDetail.getCramountToBePaid(),oldDetail.getDramount(),oldDetail.getCramount(),oldDetail.getOrdernumber(),oldDetail.getDescription(),oldDetail.getIsActualDemand(),newReceiptHeader,oldDetail.getPurpose());    receiptDetail.setCramount(oldDetail.getCramount());    receiptDetail.setFinancialYear(oldDetail.getFinancialYear());    for (    final AccountPayeeDetail oldAccountPayeeDetail : oldDetail.getAccountPayeeDetails()) {      final AccountPayeeDetail accPayeeDetail=new AccountPayeeDetail(oldAccountPayeeDetail.getAccountDetailType(),oldAccountPayeeDetail.getAccountDetailKey(),oldAccountPayeeDetail.getAmount(),receiptDetail);      receiptDetail.addAccountPayeeDetail(accPayeeDetail);    }    newReceiptHeader.addReceiptDetail(receiptDetail);  }  if (oldReceiptHeader.getChallan() != null) {    oldReceiptHeader.getChallan().setReceiptHeader(newReceiptHeader);    newReceiptHeader.setChallan(oldReceiptHeader.getChallan());  }  return newReceiptHeader;}  }
class C{  public boolean isExpired(){  return this.ttl < System.currentTimeMillis();}  }
class C{  @Override public boolean supportsGetGeneratedKeys(){  debugCodeCall("supportsGetGeneratedKeys");  return true;}  }
class C{  @Override protected itemGridCellBinder newViewHolder(View view){  return new itemGridCellBinder(view,true);}  }
class C{  public VerifyRepositoryRequestBuilder(ElasticsearchClient client,VerifyRepositoryAction action){  super(client,action,new VerifyRepositoryRequest());}  }
class C{  public void cancelRetransmission(){  if (retransmitTask != null) {    retransmitTask.cancel(true);    this.retransmitTask=null;  }}  }
class C{  private static final boolean subPartMatchNS(String p,String t){  return (p == t) || ((null != p) && ((p.length() > 0) ? ((t == WILD) || p.equals(t)) : null == t));}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  getMenuInflater().inflate(R.menu.activity_talon,menu);  return true;}  }
class C{  public void testCloning() throws CloneNotSupportedException {  XYShapeRenderer r1=new XYShapeRenderer();  XYShapeRenderer r2=(XYShapeRenderer)r1.clone();  assertTrue(r1 != r2);  assertTrue(r1.getClass() == r2.getClass());  assertTrue(r1.equals(r2));}  }
class C{  public SQLExceptionChainBuilder<E> append(E sqle){  if (root == null) {    root=sqle;  } else {    root.setNextException(sqle);  }  return this;}  }
class C{  public GamaShape(final IShape source,final Geometry geom,final Double rotation,final GamaPoint vector,final ILocation newLocation,final GamaPoint bounds,final boolean isBoundingBox){  this(source,geom,rotation,vector,newLocation);  if (bounds != null && !isPoint()) {    if (getAttribute(IShape.TYPE_ATTRIBUTE) != SPHERE) {      final GamaPoint previous=getLocation();      final boolean flat=getEnvelope().isFlat();      if (isBoundingBox) {        geometry.apply(AffineTransform3D.createScaling(bounds.x / getEnvelope().getWidth(),bounds.y / getEnvelope().getHeight(),flat ? 1.0 : bounds.z / getEnvelope().getDepth()));      } else {        geometry.apply(AffineTransform3D.createScaling(bounds.x,bounds.y,bounds.z));      }      setEnvelope(null);      setLocation(previous);    } else {      final Double scaling=FastMath.min(FastMath.min(bounds.x,bounds.y),bounds.z);      final Double box=FastMath.max(FastMath.max(bounds.x,bounds.y),bounds.z);      setAttribute(IShape.DEPTH_ATTRIBUTE,isBoundingBox ? box : (Double)getAttribute(IShape.DEPTH_ATTRIBUTE) * scaling);    }  }}  }
class C{  public DetectorResult detect() throws NotFoundException {  ResultPoint[] cornerPoints=rectangleDetector.detect();  ResultPoint pointA=cornerPoints[0];  ResultPoint pointB=cornerPoints[1];  ResultPoint pointC=cornerPoints[2];  ResultPoint pointD=cornerPoints[3];  List<ResultPointsAndTransitions> transitions=new ArrayList<>(4);  transitions.add(transitionsBetween(pointA,pointB));  transitions.add(transitionsBetween(pointA,pointC));  transitions.add(transitionsBetween(pointB,pointD));  transitions.add(transitionsBetween(pointC,pointD));  Collections.sort(transitions,new ResultPointsAndTransitionsComparator());  ResultPointsAndTransitions lSideOne=transitions.get(0);  ResultPointsAndTransitions lSideTwo=transitions.get(1);  Map<ResultPoint,Integer> pointCount=new HashMap<>();  increment(pointCount,lSideOne.getFrom());  increment(pointCount,lSideOne.getTo());  increment(pointCount,lSideTwo.getFrom());  increment(pointCount,lSideTwo.getTo());  ResultPoint maybeTopLeft=null;  ResultPoint bottomLeft=null;  ResultPoint maybeBottomRight=null;  for (  Map.Entry<ResultPoint,Integer> entry : pointCount.entrySet()) {    ResultPoint point=entry.getKey();    Integer value=entry.getValue();    if (value == 2) {      bottomLeft=point;    } else {      if (maybeTopLeft == null) {        maybeTopLeft=point;      } else {        maybeBottomRight=point;      }    }  }  if (maybeTopLeft == null || bottomLeft == null || maybeBottomRight == null) {    throw NotFoundException.getNotFoundInstance();  }  ResultPoint[] corners={maybeTopLeft,bottomLeft,maybeBottomRight};  ResultPoint.orderBestPatterns(corners);  ResultPoint bottomRight=corners[0];  bottomLeft=corners[1];  ResultPoint topLeft=corners[2];  ResultPoint topRight;  if (!pointCount.containsKey(pointA)) {    topRight=pointA;  } else   if (!pointCount.containsKey(pointB)) {    topRight=pointB;  } else   if (!pointCount.containsKey(pointC)) {    topRight=pointC;  } else {    topRight=pointD;  }  int dimensionTop=transitionsBetween(topLeft,topRight).getTransitions();  int dimensionRight=transitionsBetween(bottomRight,topRight).getTransitions();  if ((dimensionTop & 0x01) == 1) {    dimensionTop++;  }  dimensionTop+=2;  if ((dimensionRight & 0x01) == 1) {    dimensionRight++;  }  dimensionRight+=2;  BitMatrix bits;  ResultPoint correctedTopRight;  if (4 * dimensionTop >= 7 * dimensionRight || 4 * dimensionRight >= 7 * dimensionTop) {    correctedTopRight=correctTopRightRectangular(bottomLeft,bottomRight,topLeft,topRight,dimensionTop,dimensionRight);    if (correctedTopRight == null) {      correctedTopRight=topRight;    }    dimensionTop=transitionsBetween(topLeft,correctedTopRight).getTransitions();    dimensionRight=transitionsBetween(bottomRight,correctedTopRight).getTransitions();    if ((dimensionTop & 0x01) == 1) {      dimensionTop++;    }    if ((dimensionRight & 0x01) == 1) {      dimensionRight++;    }    bits=sampleGrid(image,topLeft,bottomLeft,bottomRight,correctedTopRight,dimensionTop,dimensionRight);  } else {    int dimension=Math.min(dimensionRight,dimensionTop);    correctedTopRight=correctTopRight(bottomLeft,bottomRight,topLeft,topRight,dimension);    if (correctedTopRight == null) {      correctedTopRight=topRight;    }    int dimensionCorrected=Math.max(transitionsBetween(topLeft,correctedTopRight).getTransitions(),transitionsBetween(bottomRight,correctedTopRight).getTransitions());    dimensionCorrected++;    if ((dimensionCorrected & 0x01) == 1) {      dimensionCorrected++;    }    bits=sampleGrid(image,topLeft,bottomLeft,bottomRight,correctedTopRight,dimensionCorrected,dimensionCorrected);  }  return new DetectorResult(bits,new ResultPoint[]{topLeft,bottomLeft,bottomRight,correctedTopRight});}  }
class C{  public static boolean isSameVirtualPool(VirtualPool current,VirtualPool requested,StringBuffer notSuppReasonBuff){  if (current.getId().equals(requested.getId())) {    String msg=String.format("The target virtual pool [%s] is the same as current virtual pool.",requested.getLabel());    s_logger.info(msg);    if (notSuppReasonBuff != null) {      notSuppReasonBuff.append(msg);    }    return true;  }  return false;}  }
class C{  @SuppressWarnings("unchecked") public Set<FileObject> instantiate() throws IOException {  String fontName=(String)wizard.getProperty("font_name");  String fileName=(String)wizard.getProperty("file_name");  int fontSize=(Integer)wizard.getProperty("font_size");  int imageSize=(Integer)wizard.getProperty("image_size");  int style=(Integer)wizard.getProperty("font_style");  int paddingX=(Integer)wizard.getProperty("padding_x");  int paddingY=(Integer)wizard.getProperty("padding_y");  int letterSpacing=(Integer)wizard.getProperty("letter_spacing");  Project project=(Project)wizard.getProperty("project");  ProjectAssetManager pm=project.getLookup().lookup(ProjectAssetManager.class);  if (pm == null) {    Logger.getLogger(AngelFontWizardIterator.class.getName()).log(Level.WARNING,"No ProjectAssetManager found!");    return Collections.EMPTY_SET;  }  AngelFont font=FontCreator.buildFont(fontName,fileName,imageSize,fontSize,style,paddingX,paddingY,letterSpacing,false);  BufferedImage fontImage=font.getImage();  ByteBuffer scratch=ByteBuffer.allocateDirect(4 * fontImage.getWidth() * fontImage.getHeight());  byte[] data=(byte[])fontImage.getRaster().getDataElements(0,0,fontImage.getWidth(),fontImage.getHeight(),null);  scratch.clear();  scratch.put(data);  scratch.rewind();  fileName=fileName.replaceAll(" ","");  FileObject imageFile;  FileObject descriptionFile;  try {    imageFile=FileUtil.createData(pm.getAssetFolder(),"Interface/Fonts/" + fileName + ".png");    OutputStream out=imageFile.getOutputStream();    ImageIO.write(fontImage,"PNG",out);    out.close();    descriptionFile=FileUtil.createData(pm.getAssetFolder(),"Interface/Fonts/" + fileName + ".fnt");    OutputStreamWriter out2=new OutputStreamWriter(descriptionFile.getOutputStream());    out2.write(font.getDescription());    out2.close();  } catch (  Exception e) {    Exceptions.printStackTrace(e);    return Collections.EMPTY_SET;  }  Set<FileObject> set=new HashSet<FileObject>();  set.add(imageFile);  set.add(descriptionFile);  return set;}  }
class C{  private static byte[] pack(byte[] in,int ioffset,int ilength,int iw,int ow){  assert (iw > 0 && iw <= 8) : "input NUB must be between 1 and 8";  assert (ow > 0 && ow <= 8) : "output NUB must be between 1 and 8";  if (iw == ow) {    return in.clone();  }  int bits=ilength * iw;  byte[] out=new byte[(bits + ow - 1) / ow];  int ipos=0;  int opos=(bits + ow - 1) / ow * ow - bits;  while (ipos < bits) {    int count=iw - ipos % iw;    if (count > ow - opos % ow) {      count=ow - opos % ow;    }    out[opos / ow]|=(((in[ioffset + ipos / iw] + 256) >> (iw - ipos % iw - count)) & ((1 << (count)) - 1)) << (ow - opos % ow - count);    ipos+=count;    opos+=count;  }  return out;}  }
class C{  @Override public BasePlanViewHolder newViewHolder(ViewGroup viewGroup){  View view=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.base_plan_info,viewGroup,false);  return new BasePlanViewHolder(view);}  }
class C{  public static boolean checkFileList(CFlags flags,String fileListFlag,String singleInputFlag,int maxFiles,boolean ignoreCalibrationFiles){  final Collection<File> files;  try {    files=new CommandLineFiles(fileListFlag,singleInputFlag,CommandLineFiles.EXISTS).getFileList(flags);  } catch (  final NoTalkbackSlimException e) {    flags.setParseMessage(e.getMessage());    return false;  }catch (  final IOException e) {    flags.setParseMessage("An error occurred reading " + flags.getValue(fileListFlag));    return false;  }  if (getSize(files,ignoreCalibrationFiles) == 0) {    flags.setParseMessage("No input files specified" + (null == singleInputFlag ? "" : (" in --" + fileListFlag + " or --"+ singleInputFlag)) + ".");    return false;  } else   if (getSize(files,ignoreCalibrationFiles) > maxFiles && !flags.isSet(NO_MAX_FILES_FLAG)) {    flags.setParseMessage("More than " + maxFiles + " input files specified.");    return false;  }  return true;}  }
class C{  static boolean isAbsoluteURL(String url){  return (url.substring(0,Math.min(10,url.length())).indexOf("://") != -1);}  }
class C{  public PorterStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public CTextArea(String text){  this(new JTextArea(text));}  }
class C{  public void addDependency(DbObject obj){  dependencies.add(obj);}  }
class C{  @POST @Path("connectemc/email/") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response configureConnectEmcEmailParams(ConnectEmcEmail emailParams) throws Exception {  PropertyInfoRestRep targetPropInfo=getTargetPropsCommon();  PropertyInfoUpdate ext=ConfigService.ConfigureConnectEmc.configureEmail(emailParams);  PropertyInfoRestRep updateProps=getUpdateProps(ext,targetPropInfo.getAllProperties());  return updatePropertiesCommon(updateProps,null);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public VcpcFastRunner(GraphSource graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  private RecyclerView createRecyclerView(){  RecyclerView recyclerView=new RecyclerView(getContext());  RecyclerView.LayoutParams params=new RecyclerView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);  recyclerView.setLayoutParams(params);  setView(recyclerView);  return recyclerView;}  }
class C{  public Lookup(Name name,int type,int dclass){  Type.check(type);  DClass.check(dclass);  if (!Type.isRR(type) && type != Type.ANY)   throw new IllegalArgumentException("Cannot query for " + "meta-types other than ANY");  this.name=name;  this.type=type;  this.dclass=dclass;synchronized (Lookup.class) {    this.resolver=getDefaultResolver();    this.searchPath=getDefaultSearchPath();    this.cache=getDefaultCache(dclass);  }  this.credibility=Credibility.NORMAL;  this.verbose=Options.check("verbose");  this.result=-1;}  }
class C{  public SymbolTableEntryInternal steFor_value(){  return getSymbolTableEntryInternal("value",true);}  }
class C{  PlatformUser loadUser(String userId,Tenant tenant){  try {    PlatformUser user=new PlatformUser();    user.setUserId(userId);    if (tenant != null) {      user.setTenantId(tenant.getTenantId());    }    return (PlatformUser)dm.getReferenceByBusinessKey(user);  } catch (  ObjectNotFoundException|NoResultException e) {    return null;  }}  }
class C{  public C upperEndpoint(){  return upperBound.endpoint();}  }
class C{  public FacebookDialogException(String message,int errorCode,String failingUrl){  super(message);  this.errorCode=errorCode;  this.failingUrl=failingUrl;}  }
class C{  public XMLString substring(int beginIndex,int endIndex){  int len=endIndex - beginIndex;  if (len > m_length)   len=m_length;  if (len <= 0)   return XString.EMPTYSTRING; else {    int start=m_start + beginIndex;    return new XStringForFSB(fsb(),start,len);  }}  }
class C{  public void addHeader(Header header){  if (header == null) {    return;  }  headers.add(header);}  }
class C{  protected String doIt() throws Exception {  log.info("doIt - C_CommissionRun_ID=" + getRecord_ID());  MCommissionRun comRun=new MCommissionRun(getCtx(),getRecord_ID(),get_TrxName());  if (comRun.get_ID() == 0)   throw new IllegalArgumentException("CommissionAPInvoice - No Commission Run");  if (Env.ZERO.compareTo(comRun.getGrandTotal()) == 0)   throw new IllegalArgumentException("@GrandTotal@ = 0");  MCommission com=new MCommission(getCtx(),comRun.getC_Commission_ID(),get_TrxName());  if (com.get_ID() == 0)   throw new IllegalArgumentException("CommissionAPInvoice - No Commission");  if (com.getC_Charge_ID() == 0)   throw new IllegalArgumentException("CommissionAPInvoice - No Charge on Commission");  MBPartner bp=new MBPartner(getCtx(),com.getC_BPartner_ID(),get_TrxName());  if (bp.get_ID() == 0)   throw new IllegalArgumentException("CommissionAPInvoice - No BPartner");  MInvoice invoice=new MInvoice(getCtx(),0,null);  invoice.setClientOrg(com.getAD_Client_ID(),com.getAD_Org_ID());  invoice.setC_DocTypeTarget_ID(MDocType.DOCBASETYPE_APInvoice);  invoice.setBPartner(bp);  invoice.setSalesRep_ID(getAD_User_ID());  if (com.getC_Currency_ID() != invoice.getC_Currency_ID())   throw new IllegalArgumentException("CommissionAPInvoice - Currency of PO Price List not Commission Currency");  if (!invoice.save())   throw new IllegalStateException("CommissionAPInvoice - cannot save Invoice");  MInvoiceLine iLine=new MInvoiceLine(invoice);  iLine.setC_Charge_ID(com.getC_Charge_ID());  iLine.setQty(1);  iLine.setPrice(comRun.getGrandTotal());  iLine.setTax();  if (!iLine.save())   throw new IllegalStateException("CommissionAPInvoice - cannot save Invoice Line");  return "@C_Invoice_ID@ = " + invoice.getDocumentNo();}  }
class C{  public CommandServiceException(Throwable cause){  super(cause);}  }
class C{  public URI(URI p_base,String p_uriSpec) throws MalformedURIException {  initialize(p_base,p_uriSpec);}  }
class C{  private static void matrixMultUltraSparse(MatrixBlock m1,MatrixBlock m2,MatrixBlock ret,int rl,int ru) throws DMLRuntimeException {  boolean leftUS=m1.isUltraSparse();  final int m=m1.rlen;  final int cd=m1.clen;  final int n=m2.clen;  if (leftUS) {    SparseBlock a=m1.sparseBlock;    boolean rightSparse=m2.sparse;    for (int i=rl; i < ru; i++) {      if (!a.isEmpty(i)) {        int apos=a.pos(i);        int alen=a.size(i);        int[] aixs=a.indexes(i);        double[] avals=a.values(i);        if (alen == 1 && avals[apos] == 1) {          int aix=aixs[apos];          if (rightSparse) {            if (!m2.sparseBlock.isEmpty(aix)) {              ret.rlen=m;              ret.allocateSparseRowsBlock(false);              ret.sparseBlock.set(i,m2.sparseBlock.get(aix),true);              ret.nonZeros+=ret.sparseBlock.size(i);            }          } else {            for (int j=0; j < n; j++)             ret.appendValue(i,j,m2.quickGetValue(aix,j));          }        } else {          for (int k=apos; k < apos + alen; k++) {            double aval=avals[k];            int aix=aixs[k];            for (int j=0; j < n; j++) {              double cval=ret.quickGetValue(i,j);              double cvald=aval * m2.quickGetValue(aix,j);              if (cvald != 0)               ret.quickSetValue(i,j,cval + cvald);            }          }        }      }    }  } else {    SparseBlock b=m2.sparseBlock;    for (int k=0; k < cd; k++) {      if (!b.isEmpty(k)) {        int bpos=b.pos(k);        int blen=b.size(k);        int[] bixs=b.indexes(k);        double[] bvals=b.values(k);        for (int j=bpos; j < bpos + blen; j++) {          double bval=bvals[j];          int bix=bixs[j];          for (int i=rl; i < ru; i++) {            double cvald=bval * m1.quickGetValue(i,k);            if (cvald != 0) {              double cval=ret.quickGetValue(i,bix);              ret.quickSetValue(i,bix,cval + cvald);            }          }        }      }    }  }}  }
class C{  public void deselectFeature(int recordNumber){  if (selectedFeatures[recordNumber]) {    selectedFeatures[recordNumber]=false;    selectedFeatureNumbers.remove(new Integer(recordNumber));    this.pcs.firePropertyChange("selectedFeatureNumber",-2,-1);  }}  }
class C{  private static ClassLoader createSystemClassLoader(){  String classPath=System.getProperty("java.class.path",".");  return new PathClassLoader(classPath,BootClassLoader.getInstance(),false);}  }
class C{  public GaussianElimination(double[][] A,double[] b){  m=A.length;  n=A[0].length;  if (b.length != m)   throw new IllegalArgumentException("Dimensions disagree");  a=new double[m][n + 1];  for (int i=0; i < m; i++)   for (int j=0; j < n; j++)   a[i][j]=A[i][j];  for (int i=0; i < m; i++)   a[i][n]=b[i];  forwardElimination();  assert certifySolution(A,b);}  }
class C{  public RestResult(int responseCode,String errorMsg,String result){  this.responseCode=responseCode;  this.errorMsg=errorMsg;  this.result=result;}  }
class C{  public static int codePointBefore(net.sourceforge.retroweaver.harmony.runtime.java.lang.CharSequence seq,int index){  if (seq == null) {    throw new NullPointerException();  }  int len=seq.length();  if (index < 1 || index > len) {    throw new IndexOutOfBoundsException();  }  char low=seq.charAt(--index);  if (--index < 0) {    return low;  }  char high=seq.charAt(index);  if (isSurrogatePair(high,low)) {    return toCodePoint(high,low);  }  return low;}  }
class C{  public void addValue(double data,double given,double weight){  m_Estimators[(int)data].addValue(given,weight);  m_Weights.addValue((int)data,weight);}  }
class C{  public void testStopPositons() throws IOException {  StringBuilder sb=new StringBuilder();  for (int i=10; i < 20; i++) {    if (i % 3 != 0) {      sb.append(i).append(" ");    } else {      String w=English.intToEnglish(i).trim();      sb.append(w).append(" ");    }  }  log(sb.toString());  String stopTypes[]=new String[]{"<NUM>"};  Set<String> stopSet=asSet(stopTypes);  StringReader reader=new StringReader(sb.toString());  final StandardTokenizer input=new StandardTokenizer();  input.setReader(reader);  TypeTokenFilter typeTokenFilter=new TypeTokenFilter(input,stopSet);  testPositons(typeTokenFilter);}  }
class C{  public String prepareIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  MDocType dt=MDocType.get(getCtx(),getC_DocType_ID());  MPeriod period=MPeriod.get(getCtx(),getDateAcct(),getAD_Org_ID());  if (period == null) {    log.warning("No Period for " + getDateAcct());    m_processMsg="@PeriodNotFound@";    return DocAction.STATUS_Invalid;  }  if (period.getC_Period_ID() != getC_Period_ID() && period.isStandardPeriod()) {    m_processMsg="@PeriodNotValid@";    return DocAction.STATUS_Invalid;  }  boolean open=period.isOpen(dt.getDocBaseType(),getDateAcct());  if (!open) {    log.warning(period.getName() + ": Not open for " + dt.getDocBaseType()+ " ("+ getDateAcct()+ ")");    m_processMsg="@PeriodClosed@";    return DocAction.STATUS_Invalid;  }  MJournalLine[] lines=getLines(true);  if (lines.length == 0) {    m_processMsg="@NoLines@";    return DocAction.STATUS_Invalid;  }  BigDecimal AmtSourceDr=Env.ZERO;  BigDecimal AmtSourceCr=Env.ZERO;  for (int i=0; i < lines.length; i++) {    MJournalLine line=lines[i];    if (!isActive())     continue;    if (!line.getAccountElementValue().isActive()) {      m_processMsg="@InActiveAccount@ - @Line@=" + line.getLine() + " - "+ line.getAccountElementValue();      return DocAction.STATUS_Invalid;    }    if (line.isDocControlled() && (getPostingType().equals(POSTINGTYPE_Actual)) || getPostingType().equals(POSTINGTYPE_Commitment) || getPostingType().equals(POSTINGTYPE_Reservation)) {      m_processMsg="@DocControlledError@ - @Line@=" + line.getLine() + " - "+ line.getAccountElementValue();      return DocAction.STATUS_Invalid;    }    if (getPostingType().equals(POSTINGTYPE_Actual) && !line.getAccountElementValue().isPostActual()) {      m_processMsg="@PostingTypeActualError@ - @Line@=" + line.getLine() + " - "+ line.getAccountElementValue();      return DocAction.STATUS_Invalid;    }    if (getPostingType().equals(POSTINGTYPE_Budget) && !line.getAccountElementValue().isPostBudget()) {      m_processMsg="@PostingTypeBudgetError@ - @Line@=" + line.getLine() + " - "+ line.getAccountElementValue();      return DocAction.STATUS_Invalid;    }    if (getPostingType().equals(POSTINGTYPE_Statistical) && !line.getAccountElementValue().isPostStatistical()) {      m_processMsg="@PostingTypeStatisticalError@ - @Line@=" + line.getLine() + " - "+ line.getAccountElementValue();      return DocAction.STATUS_Invalid;    }    AmtSourceDr=AmtSourceDr.add(line.getAmtSourceDr());    AmtSourceCr=AmtSourceCr.add(line.getAmtSourceCr());  }  setTotalDr(AmtSourceDr);  setTotalCr(AmtSourceCr);  if (Env.ZERO.compareTo(getControlAmt()) != 0 && getControlAmt().compareTo(getTotalDr()) != 0) {    m_processMsg="@ControlAmtError@";    return DocAction.STATUS_Invalid;  }  if (AmtSourceDr.compareTo(AmtSourceCr) != 0) {    MAcctSchemaGL gl=MAcctSchemaGL.get(getCtx(),getC_AcctSchema_ID());    if (gl == null || !gl.isUseSuspenseBalancing()) {      m_processMsg="@UnbalancedJornal@";      return DocAction.STATUS_Invalid;    }  }  if (!DOCACTION_Complete.equals(getDocAction()))   setDocAction(DOCACTION_Complete);  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  m_justPrepared=true;  return DocAction.STATUS_InProgress;}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof DistributionPointName == false) {    return false;  }  DistributionPointName other=(DistributionPointName)obj;  return Objects.equals(this.fullName,other.fullName) && Objects.equals(this.relativeName,other.relativeName);}  }
class C{  private String address(Instance ec2){  final Optional<String> name=ec2.getTags().stream().filter(null).map(null).findFirst();  if (name.isPresent()) {    final String host=name.get();    if (ping(host,80) || ping(host,8080)) {      return host;    }  }  return ec2.getPrivateIpAddress();}  }
class C{  public static Map<String,String> stripMapXSS(Map<String,String> valueMap){  if (valueMap == null) {    return null;  }  Map<String,String> xssMap=new HashMap<>();  Set<Map.Entry<String,String>> set=valueMap.entrySet();  for (  Map.Entry<String,String> entry : set) {    xssMap.put(stripXSS(entry.getKey()),stripXSS(entry.getValue()));  }  return xssMap;}  }
class C{  public void addTotalElevationGain(double gain){  totalElevationGain+=gain;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:05.457 -0500",hash_original_method="0ABE1DB59D00B8D3A7DF4CB4F149C27D",hash_generated_method="4800FA80F07F749D78A2A7FC786195E4") public void draw(Canvas canvas,Rect location){  mRect.set(location);  canvas.addTaint(getTaint());  canvas.addTaint(location.getTaint());}  }
class C{  public static long[] toLongArray(double[] array){  long[] result=new long[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(long)array[i];  }  return result;}  }
class C{  private void addProfile(MultipartHttpServletRequest request,ModelMap model){  List<String> lines=new ArrayList<>();  MultipartFile mpf=request.getFile("file");  if (mpf != null) {    String message="";    String filename=mpf.getOriginalFilename();    try {      File tempFile=File.createTempFile("profile",null);      mpf.transferTo(tempFile);      boolean exResult=execute(VALIDATE_CMD,tempFile,lines);      if (exResult) {        filename=getNextVersionedFilename(filename);        File newFile=new File(profileDir,filename);        FileUtils.moveFile(tempFile,newFile);        model.addAttribute("success",true);        message="Success adding profile: ";      } else {        model.addAttribute("success",false);        message="Error adding profile: ";      }    } catch (    Exception e) {      model.addAttribute("success",false);      message="Problem saving uploaded profile: ";      lines.add(e.getMessage());      log.error("Problem saving uploaded profile",e);    } finally {      model.addAttribute("operation","add");      model.addAttribute("message",message + filename);      model.addAttribute("filename",filename);      model.addAttribute("output",StringUtils.join(lines,"\n"));    }  }}  }
class C{  public ReadMemoryParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_READ_MEMORY_SUCCESS);}  }
class C{  public void modifyEnergyStored(int energy){  this.energy+=energy;  if (this.energy > capacity) {    this.energy=capacity;  } else   if (this.energy < 0) {    this.energy=0;  }}  }
class C{  public synchronized void closeStreams(){  Info info;  for (int i=0; i < infos.size(); i++) {    info=(AudioDevice.Info)infos.elementAt(i);    if (info.sequencer != null) {      info.sequencer.stop();      info.sequencer.close();      infos.removeElement(info);    } else     if (info.datapusher != null) {      info.datapusher.stop();      infos.removeElement(info);    }  }  if (DEBUG) {    System.err.println("Audio Device: Streams all closed.");  }  clipStreams=new Hashtable();  infos=new Vector();}  }
class C{  @Override public void convert(MatrixIndexes k1,MatrixBlock v1){  reset();  startIndexes.setIndexes(UtilFunctions.computeCellIndex(k1.getRowIndex(),brow,0),UtilFunctions.computeCellIndex(k1.getColumnIndex(),bcolumn,0));  sparse=v1.isInSparseFormat();  thisBlockWidth=v1.getNumColumns();  if (sparse) {    sparseIterator=v1.getSparseBlockIterator();  } else {    if (v1.getDenseBlock() == null)     return;    denseArray=v1.getDenseBlock();    nextInDenseArray=0;    denseArraySize=v1.getNumRows() * v1.getNumColumns();  }  hasValue=(v1.getNonZeros() > 0);}  }
class C{  public DateTest(String name){  super(name);}  }
class C{  public void addSigner(PrivateKey key,X509Certificate cert,String encryptionOID,String digestOID,CMSAttributeTableGenerator signedAttrGen,CMSAttributeTableGenerator unsignedAttrGen) throws IllegalArgumentException {  doAddSigner(key,cert,encryptionOID,digestOID,signedAttrGen,unsignedAttrGen,null);}  }
class C{  @SuppressWarnings("unchecked") public V put(final long key,final V value){  int ptr=(int)((Tools.phiMix(key) & m_mask));  OsmElement e=m_data[ptr];  if (e == FREE_KEY) {    m_data[ptr]=(OsmElement)value;    if (m_size >= m_threshold) {      rehash(m_data.length * 2);    } else {      ++m_size;    }    return null;  } else   if (e.getOsmId() == key) {    m_data[ptr]=(OsmElement)value;    return (V)e;  }  int firstRemoved=-1;  if (e == removedKey) {    firstRemoved=ptr;  }  while (true) {    ptr=(int)((ptr + 1) & m_mask);    e=m_data[ptr];    if (e == FREE_KEY) {      if (firstRemoved != -1) {        ptr=firstRemoved;      }      m_data[ptr]=(OsmElement)value;      if (m_size >= m_threshold) {        rehash(m_data.length * 2);      } else {        ++m_size;      }      return null;    } else     if (e.getOsmId() == key) {      m_data[ptr]=(OsmElement)value;      return (V)e;    } else     if (e == removedKey) {      if (firstRemoved == -1) {        firstRemoved=ptr;      }    }  }}  }
class C{  @Override public void updateInt(String columnLabel,int x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateInt(" + quote(columnLabel) + ", "+ x+ ");");    }    update(columnLabel,ValueInt.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void initColumns(){  MTable table=MTable.get(Env.getCtx(),m_trlTableName);  if (table == null)   throw new IllegalArgumentException("Table Not found=" + m_trlTableName);  MColumn[] columns=table.getColumns(false);  for (int i=0; i < columns.length; i++) {    MColumn column=columns[i];    if (column.isStandardColumn())     continue;    String columnName=column.getColumnName();    if (columnName.endsWith("_ID") || columnName.startsWith("AD_Language") || columnName.equals("IsTranslated"))     continue;    m_columns.add(columnName);  }  if (m_columns.size() == 0)   throw new IllegalArgumentException("No Columns found=" + m_trlTableName);}  }
class C{  public CFBBlockCipherMac(BlockCipher cipher,int cfbBitSize,int macSizeInBits,BlockCipherPadding padding){  if ((macSizeInBits % 8) != 0) {    throw new IllegalArgumentException("MAC size must be multiple of 8");  }  mac=new byte[cipher.getBlockSize()];  this.cipher=new MacCFBBlockCipher(cipher,cfbBitSize);  this.padding=padding;  this.macSize=macSizeInBits / 8;  buf=new byte[this.cipher.getBlockSize()];  bufOff=0;}  }
class C{  public boolean isCorePlugin(){  return coreplugin;}  }
class C{  public void createSubUsageScenario04() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.weeksToMillis(0.3);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO04_PERUNIT_WEEK",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO04_PERUNIT_WEEK",serviceDetails,basicSetup.getSecondCustomerUser2(),role);  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") - DateTimeHandling.weeksToMillis(2.1);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO04_PERUNIT_WEEK",subDetails);}  }
class C{  public Assignment solve(CSP csp){  if (inferenceStrategy == Inference.AC3) {    DomainRestoreInfo info=new AC3Strategy().reduceDomains(csp);    if (!info.isEmpty()) {      fireStateChanged(csp);      if (info.isEmptyDomainFound())       return null;    }  }  return super.solve(csp);}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.SECURITY_ADMIN,Role.TENANT_ADMIN}) @Path("/{id}") public VcenterDataCenterRestRep updateVcenterDataCenter(@PathParam("id") URI id,VcenterDataCenterUpdate updateParam) throws DatabaseException {  VcenterDataCenter dataCenter=queryResource(id);  ArgValidator.checkEntity(dataCenter,id,isIdEmbeddedInURL(id));  if (updateParam.getName() != null && !dataCenter.getLabel().equals(updateParam.getName())) {    checkDuplicateChildName(dataCenter.getVcenter(),VcenterDataCenter.class,"label","vcenter",updateParam.getName(),_dbClient);    dataCenter.setLabel(updateParam.getName());  }  checkUserPrivileges(updateParam,dataCenter);  validateTenant(updateParam,dataCenter);  ComputeSystemHelper.updateVcenterDataCenterTenant(_dbClient,dataCenter,updateParam.getTenant());  _dbClient.persistObject(dataCenter);  auditOp(OperationTypeEnum.UPDATE_VCENTER_DATACENTER,true,null,dataCenter.auditParameters());  return map(dataCenter);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public void mapInitiatorName(String storageSystemSerailNumber,String initiatorName){  if (storageSystemSerailNumber != null && initiatorName != null && !initiatorName.isEmpty()) {    getInitiatorNames().put(storageSystemSerailNumber,initiatorName);  }}  }
class C{  public JavacMessages(String bundleName,Locale locale) throws MissingResourceException {  bundleNames=List.nil();  bundleCache=new HashMap<Locale,SoftReference<List<ResourceBundle>>>();  add(bundleName);  setCurrentLocale(locale);}  }
class C{  public boolean isWrapperFor(Class<?> iface) throws SQLException {  boolean isInstance=iface.isInstance(this);  if (isInstance) {    return true;  }  String interfaceClassName=iface.getName();  return (interfaceClassName.equals("com.mysql.jdbc.Statement") || interfaceClassName.equals("java.sql.Statement") || interfaceClassName.equals("java.sql.PreparedStatement")|| interfaceClassName.equals("java.sql.Wrapper"));}  }
class C{  public boolean isGreaterThenOrEqualTo(Percent Percent){  assertDefined();  BigDecimal thisValue=notNull(this);  BigDecimal parameter=notNull(Percent);  return (thisValue.compareTo(parameter) >= 0);}  }
class C{  protected void formBusquedaUDocsSerieExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  ClientInvocation invocation=saveCurrentTreeViewInvocationAndRefresh(KeysClientsInvocations.FILTRO_UDOCS_SERIE,request,FondosConstants.CUADRO_CLF_VIEW_NAME);  invocation.setAsReturnPoint(true);  String idSerie=request.getParameter("idSerie");  initializeSessionValues(request);  removeInTemporalSession(request,FondosConstants.CFG_BUSQUEDA_SERIE_KEY);  Busqueda busqueda;  try {    busqueda=getCfgBusquedaUdocsSerie(request);    PrecondicionesBusquedaFondosGenerica precondiciones=new PrecondicionesBusquedaFondosGenerica();    precondiciones.setTiposNivelFicha(new int[]{TipoNiveles.UNIDAD_DOCUMENTAL_VALUE});    precondiciones.setIdRefObjetoAmbito(new String[]{idSerie});    precondiciones.setTipoObjetoAmbito(new String[]{TipoNivelCF.SERIE.getIdentificadorAsString()});    precondiciones.setForwardListado(FORWARD_LISTADO_UDOCS_SERIE);    precondiciones.setForwardRetorno(FORWARD_LISTADO_UDOCS_SERIE);    int numMaxResultados=ConfiguracionSistemaArchivoFactory.getConfiguracionSistemaArchivo().getConfiguracionFondos().getNumMaxResultadosSerie();    if (numMaxResultados > 0) {      precondiciones.setNumMaxResultados(numMaxResultados);    } else {      request.setAttribute(DepositoConstants.LIMITAR_RESULTADOS_BUSQUEDA,new Boolean(true));      precondiciones.setNumMaxResultados(Integer.MAX_VALUE);    }    precondiciones.setEntradaParaMigaPan(KeysClientsInvocations.RESULTADO_UDOCS_SERIE);    precondiciones.setKeyCfgBusqueda(FondosConstants.CFG_BUSQUEDA_SERIE_KEY);    setInTemporalSession(request,FondosConstants.PRECONDICIONES_BUSQUEDA_KEY,precondiciones);    setInTemporalSession(request,FondosConstants.CFG_BUSQUEDA_SERIE_KEY,busqueda);    BusquedasHelper.loadListasBusqueda(busqueda,(BusquedaElementosForm)form,request,null);    setInTemporalSession(request,FondosConstants.LISTA_PRODUCTORES_KEY,getGestionSeriesBI(request).getProductoresUdocsSerie(idSerie));    setReturnActionFordward(request,mapping.findForward("form_busqueda_udocs_serie"));  } catch (  FileNotFoundException flne) {    logger.error("NO SE HA ENCONTRADO EL FICHERO DE CONFIGURACION DE BUSQUEDA",flne);    getErrors(request,false).add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_CONFIGURACION_FILE_NOT_FOUND));    goBackExecuteLogic(mapping,form,request,response);  }catch (  Exception e) {    logger.error("ERROR AL OBTENER EL FICHERO DE CONFIGURACION DE BUSQUEDA",e);    getErrors(request,false).add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_CONFIGURACION_FILE));    goBackExecuteLogic(mapping,form,request,response);  }}  }
class C{  public ZkClusterData refreshZookeeperData() throws IOException, InterruptedException, KeeperException, CollectionNotFoundException {  zookeeperHandle=ZKConnectionManager.connectToZookeeper(this.zkHost);  setZookeeperHandle(zookeeperHandle);  zkClusterData=new ZkClusterData();  setZkClusterData(zkClusterData);  allSolrNodes=new HashSet<String>();  try {    fetchZookeeperClusterState();    fetchAllConfigs();    fetchAlias();    fetchLiveSolrNodes();    fetchAllSolrNodesForTranslation();    if (!isRunningInsideDataCenter()) {      setLocalRun(true);      translatePrivateIpToPublicHostNames();    }    fetchAllCollections();    fetchCollectionToNodeMapping();    fetchNodeToCoreMapping();    fetchNodeToCoreToStatusMapping();    fetchAllCollectionMetadata();    fetchLeaderStatus();    fetchCollectionToShardToCoreMapping();  }  finally {    if (getZookeeperHandle() != null) {      getZookeeperHandle().close();    }  }  return getZkClusterData();}  }
class C{  public synchronized void startGrabbing(){  if ((flags & DONEBITS) != 0) {    return;  }  if (!grabbing) {    grabbing=true;    flags&=~(ImageObserver.ABORT);    producer.startProduction(this);  }}  }
class C{  public void reschedule(long delay,TimeUnit unit){  boolean needQueue=true;  SingletonTaskWorker stw=null;synchronized (context) {    if (context.taskRunning || context.taskShouldRun) {      if (context.taskRunning) {        if (delay > 0) {          long now=System.nanoTime();          long then=now + TimeUnit.NANOSECONDS.convert(delay,unit);          context.waitingTask.nextschedule=then;          logger.debug("rescheduled task " + this + " for "+ TimeUnit.SECONDS.convert(then,TimeUnit.NANOSECONDS)+ "s. A bunch of these messages -may- indicate you have a blocked task.");        } else {          context.waitingTask.nextschedule=0;        }        needQueue=false;      } else {        context.waitingTask.canceled=true;        context.waitingTask=null;      }    }    context.taskShouldRun=true;    if (needQueue) {      stw=context.waitingTask=new SingletonTaskWorker(this);    }  }  if (needQueue) {    if (delay <= 0) {      ses.execute(stw);    } else {      ses.schedule(stw,delay,unit);    }  }}  }
class C{  public boolean isSetTaskName(){  return this.taskName != null;}  }
class C{  public void textAlign(int alignX,int alignY){  g.textAlign(alignX,alignY);}  }
class C{  private void verifyValidExitPredecessor(SsaBasicBlock b){  ArrayList<SsaInsn> insns=b.getInsns();  SsaInsn lastInsn=insns.get(insns.size() - 1);  Rop opcode=lastInsn.getOpcode();  if (opcode.getBranchingness() != Rop.BRANCH_RETURN && opcode != Rops.THROW) {    throw new RuntimeException("Exit predecessor must end" + " in valid exit statement.");  }}  }
class C{  public static void e(String tag,String msg){  e(tag,msg,null);}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.show_fb:{      this.popSnackbar(v,"Save you from anything");    }}}  }
class C{  private BitMatrix sampleGrid(BitMatrix image,ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomRight,ResultPoint bottomLeft) throws NotFoundException {  GridSampler sampler=GridSampler.getInstance();  int dimension=getDimension();  float low=dimension / 2.0f - nbCenterLayers;  float high=dimension / 2.0f + nbCenterLayers;  return sampler.sampleGrid(image,dimension,dimension,low,low,high,low,high,high,low,high,topLeft.getX(),topLeft.getY(),topRight.getX(),topRight.getY(),bottomRight.getX(),bottomRight.getY(),bottomLeft.getX(),bottomLeft.getY());}  }
class C{  @Override protected void doGet(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  if (req.getRequestURI().endsWith("/namespace")) {    doDescribeNamespaces(req,resp);    return;  } else   if (req.getRequestURI().endsWith("/properties")) {    doShowProperties(req,resp);    return;  }  m_restServlet.doGet(req,resp);  return;}  }
class C{  @SuppressWarnings("unchecked") public ArrayDeque(final int minSize){  int size=countInitSize(minSize);  elements=(E[])new Object[size];  front=rear=0;  status=DequeStatus.Empty;  modCount=0;}  }
class C{  private static long calcSliceFence(long skip,long limit){  long sliceFence=limit >= 0 ? skip + limit : Long.MAX_VALUE;  return (sliceFence >= 0) ? sliceFence : Long.MAX_VALUE;}  }
class C{  public void populateMRU(){  final List<String> mruItemsList=new ArrayList<String>(shelvesetNameComboMRUSet);  Collections.reverse(mruItemsList);  this.setItems(mruItemsList.toArray(new String[mruItemsList.size()]));}  }
class C{  public DeletingUnitWithSubscriptionsNotPermittedException(String message,Object[] params){  super(message,params);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Element store(Object o){  getInstance(o);  Element e=new Element("connection");  storeCommon(e,adapter);  e.setAttribute("class",this.getClass().getName());  return e;}  }
class C{  public void clear(){  initialize();}  }
class C{  @Override public DeleteWarmerRequest indices(String... indices){  this.indices=indices;  return this;}  }
class C{  public static String toString(Document hostDoc) throws IOException {  try {    StringWriter out=new StringWriter();    DOMSource domSource=new DOMSource(hostDoc);    StreamResult streamResult=new StreamResult(out);    TransformerFactory tf=TransformerFactory.newInstance();    Transformer serializer=tf.newTransformer();    serializer.setOutputProperty(OutputKeys.ENCODING,ENC.name());    serializer.setOutputProperty(OutputKeys.METHOD,"html");    serializer.setOutputProperty(OutputKeys.INDENT,"no");    serializer.setOutputProperty(OutputKeys.DOCTYPE_PUBLIC,HtmlDomUtil.HTML_STRICT);    serializer.transform(domSource,streamResult);    return out.toString();  } catch (  TransformerException e) {    IOException r=new IOException("Error transforming page");    r.initCause(e);    throw r;  }}  }
class C{  private void initParametersForRole(){  int numRoles=0;  if (roles != null) {    numRoles=roles.size();  }  int numParam=0;  if (parametersRoles != null) {    numParam=parametersRoles.size();  }  pricedParametersOfSelectedRole=new PricedParameterRow[numParam];  pricedParametersOfAllRoles=new PricedParameterRow[numRoles][numParam];  List<PricedParameterRow> paramForSelectedRole=PricedParameterRow.createPricedParameterRowListForPriceModelRoles(selectedService.getVoServiceDetails());  for (int i=0; i < numParam; i++) {    pricedParametersOfSelectedRole[i]=copyParameterRow(paramForSelectedRole.get(i));  }  for (int i=0; i < numRoles; i++) {    List<PricedParameterRow> paramForRoleInCash=PricedParameterRow.createPricedParameterRowListForPriceModelRoles(selectedService.getVoServiceDetails());    for (int j=0; j < numParam; j++) {      pricedParametersOfAllRoles[i][j]=copyParameterRow(paramForRoleInCash.get(j));    }  }  for (int indexForParameters=0; indexForParameters < numParam; indexForParameters++) {    PricedParameterRow curParameter=parametersRoles.get(indexForParameters);    if (!curParameter.isOption()) {      if (curParameter.getParameterDefinition().getValueType() != ParameterValueType.ENUMERATION) {        initNotEnumerationParameter(indexForParameters,curParameter);      } else {        initEnumerationParameter(curParameter);      }    }  }}  }
class C{  private static void verifyCodewordCount(int[] codewords,int numECCodewords) throws FormatException {  if (codewords.length < 4) {    throw FormatException.getFormatInstance();  }  int numberOfCodewords=codewords[0];  if (numberOfCodewords > codewords.length) {    throw FormatException.getFormatInstance();  }  if (numberOfCodewords == 0) {    if (numECCodewords < codewords.length) {      codewords[0]=codewords.length - numECCodewords;    } else {      throw FormatException.getFormatInstance();    }  }}  }
class C{  public static void main(String[] args){  long startMsec=System.currentTimeMillis();  SeqParReadTest t=new SeqParReadTest();  t.setUpBase();  t.setUp();  t.testParReadTextcellSparseBig();  t.tearDown();  long elapsedMsec=System.currentTimeMillis() - startMsec;  System.err.printf("Finished in %1.3f sec\n",elapsedMsec / 1000.0);}  }
class C{  protected void diff_charsToLines(LinkedList<Diff> diffs,List<String> lineArray){  StringBuilder text;  for (  Diff diff : diffs) {    text=new StringBuilder();    for (int y=0; y < diff.text.length(); y++) {      text.append(lineArray.get(diff.text.charAt(y)));    }    diff.text=text.toString();  }}  }
class C{  public static int readSingleByte(InputStream in) throws IOException {  byte[] buffer=new byte[1];  int result=in.read(buffer,0,1);  return (result != -1) ? buffer[0] & 0xff : -1;}  }
class C{  public boolean isAnisotropicTextureFilterAvailable(){  return this.isAnisotropicTextureFilterAvailable;}  }
class C{  public static void assertSame(int expected,int actual){  if (expected != actual) {    throw new RuntimeException("EXPECTED: " + expected + "; ACTUAL: "+ actual);  }}  }
class C{  public static final String stripAllSpaces(final String data){  final StringBuilder text=new StringBuilder((data));  int pointer2=text.length() - 1;  while (pointer2 > 0) {    if (text.charAt(pointer2) == ' ') {      text.deleteCharAt(pointer2);    }    pointer2--;    if (pointer2 < 0) {      break;    }  }  return text.toString();}  }
class C{  @Override public boolean applyBlacklistToNode(UUID exitNode,List<String> unlocalizedNameList){  UUID parentNode=exitNodeMap.get(exitNode);  return graphServer.applyFilter(false,parentNode,exitNode,unlocalizedNameList);}  }
class C{  public Boolean isEnabled(){  return enabled;}  }
class C{  private void readObject(java.io.ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  type=TYPE_UNKNOWN;}  }
class C{  protected void generateRuntimeProgram(){  try {    runtimeProgram=dmlProgram.getRuntimeProgram(config);  } catch (  LanguageException e) {    throw new MLContextException("Exception occurred while generating runtime program",e);  }catch (  DMLRuntimeException e) {    throw new MLContextException("Exception occurred while generating runtime program",e);  }catch (  LopsException e) {    throw new MLContextException("Exception occurred while generating runtime program",e);  }catch (  IOException e) {    throw new MLContextException("Exception occurred while generating runtime program",e);  }}  }
class C{  public static Locale ensureLocale(Object localeObject){  if (localeObject instanceof String) {    return parseLocale((String)localeObject);  } else   if (localeObject instanceof Locale) {    return (Locale)localeObject;  }  return Locale.getDefault();}  }
class C{  public ReceivingOrderPosition(ReceivingOrder ord,Integer posNo,UnitType qtyExp,Product prod){  super(ord,posNo);  Assert.notNull(qtyExp);  Assert.notNull(prod);  this.qtyExpected=qtyExp;  this.product=prod;}  }
class C{  public static byte[] encrypt(byte[] unencryptedByteData,File x509CertificateFile) throws IOException, CertificateException, EncryptionException {  byte[] encryptedMimeData=null;  X509Certificate x509Certificate=CertificateUtils.loadX509CertificateFromFile(x509CertificateFile);  try {    CMSEnvelopedDataStreamGenerator edGen=new CMSEnvelopedDataStreamGenerator();    edGen.addRecipientInfoGenerator(new JceKeyTransRecipientInfoGenerator(x509Certificate).setProvider(BouncyCastleProvider.PROVIDER_NAME));    byte[] unencryptedByteData_0=Base64.encode(unencryptedByteData);    ByteArrayOutputStream bout=new ByteArrayOutputStream();    OutputStream out=edGen.open(bout,new JceCMSContentEncryptorBuilder(CMSAlgorithm.AES256_CBC).setProvider(BouncyCastleProvider.PROVIDER_NAME).build());    DEROutputStream dos=new DEROutputStream(out);    out.write(unencryptedByteData_0);    out.close();    encryptedMimeData=bout.toByteArray();  } catch (  GeneralSecurityException e) {    getLog().error(STD_ERR_MSG,e);    throw new EncryptionException(STD_ERR_MSG,e);  }catch (  CMSException e) {    getLog().error(IO_ERR_MSG,e);    throw new EncryptionException(IO_ERR_MSG,e);  }catch (  IllegalArgumentException e) {    getLog().error(IO_ERR_MSG,e);    throw new EncryptionException(IO_ERR_MSG,e);  }catch (  OperatorCreationException e) {    getLog().error(IO_ERR_MSG,e);    throw new EncryptionException(IO_ERR_MSG,e);  }catch (  Exception e) {    getLog().error(STD_ERR_MSG,e);    throw new EncryptionException(STD_ERR_MSG,e);  }catch (  Throwable t) {    getLog().error(STD_ERR_MSG,t);    throw new EncryptionException(STD_ERR_MSG,t);  }  encryptedMimeData=(encryptedMimeData == null) ? new byte[]{} : encryptedMimeData;  return encryptedMimeData;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.GLOSSARY___WORD_1:    return word_1 != null && !word_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  static public PVector add(PVector v1,PVector v2,PVector target){  if (target == null) {    target=new PVector(v1.x + v2.x,v1.y + v2.y,v1.z + v2.z);  } else {    target.set(v1.x + v2.x,v1.y + v2.y,v1.z + v2.z);  }  return target;}  }
class C{  private static String fetch(String url) throws Exception {  URLConnection conn=new URL(url).openConnection();  BufferedReader in=new BufferedReader(new InputStreamReader(conn.getInputStream(),"UTF-8"));  String retString=in.readLine();  in.close();  return retString;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entRef;  Node entElement;  Node createdNode;  int nodeType;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entRef=genderNode.getFirstChild();  nodeType=(int)entRef.getNodeType();  if (equals(1,nodeType)) {    entRef=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entRef);  }  entElement=entRef.getFirstChild();  assertNotNull("entElement",entElement);  createdNode=doc.createElement("text3");{    boolean success=false;    try {      entElement.setPrefix("newPrefix");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public void startTouchTypeDetection(TouchTypeDetector.TouchTypListener touchTypListener){  if (touchTypListener != null) {    touchTypeDetector=new TouchTypeDetector(context,touchTypListener);  }}  }
class C{  private void updateTagTypeEntity(TagTypeEntity tagTypeEntity,TagTypeUpdateRequest request){  tagTypeEntity.setDisplayName(request.getDisplayName());  tagTypeEntity.setOrderNumber(request.getTagTypeOrder());  tagTypeDao.saveAndRefresh(tagTypeEntity);}  }
class C{  @Override public void close() throws IOException {  implCreateIfNeeded();  impl.close();}  }
class C{  public LinkDatum(String url,String anchor){  this(url,anchor,System.currentTimeMillis());}  }
class C{  public static void eachByte(byte[] self,@ClosureParams(FirstParam.Component.class) Closure closure){  each(self,closure);}  }
class C{  public static String valueOf(char value){  String s;  if (value < 128) {    s=new String(value,1,ascii);  } else {    s=new String(0,1,new char[]{value});  }  s.hashCode=value;  return s;}  }
class C{  private void register(final Class<?> clazz,final Converter converter){  this.register(new ConverterFacade(converter),clazz);}  }
class C{  public SubjectDelegationPermission(String name,String actions){  super(name,actions);  if (actions != null)   throw new IllegalArgumentException("Non-null actions");}  }
class C{  public InvalidPipeException(){  super();}  }
class C{  public static void main(String[] args){  Demo2 frame=new Demo2();  frame.setVisible(true);}  }
class C{  public static void write(Extent e){  writeHex(e.toWord(),BYTES_IN_ADDRESS);}  }
class C{  protected void report_conflicts() throws internal_error {  lalr_item itm, compare;  symbol shift_sym;  terminal_set conflict_set;  boolean after_itm;  for (Enumeration itms=items().all(); itms.hasMoreElements(); ) {    itm=(lalr_item)itms.nextElement();    conflict_set=new terminal_set();    if (itm.dot_at_end()) {      after_itm=false;      for (Enumeration comps=items().all(); comps.hasMoreElements(); ) {        compare=(lalr_item)comps.nextElement();        if (itm == compare)         after_itm=true;        if (itm != compare) {          if (compare.dot_at_end()) {            if (after_itm)             if (compare.lookahead().intersects(itm.lookahead()))             report_reduce_reduce(itm,compare);          } else {            shift_sym=compare.symbol_after_dot();            if (!shift_sym.is_non_term()) {              if (itm.lookahead().contains((terminal)shift_sym))               conflict_set.add((terminal)shift_sym);            }          }        }      }      for (int t=0; t < terminal.number(); t++)       if (conflict_set.contains(t))       report_shift_reduce(itm,t);    }  }}  }
class C{  private void tryScrollBackToTopAfterComplete(){  tryScrollBackToTop();}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TENUM_LITERAL;}  }
class C{  private void performCalibrationCheckin(){  PowerManager pm=(PowerManager)getApplicationContext().getSystemService(Context.POWER_SERVICE);  PowerManager.WakeLock wl=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,"NSDownload");  wl.acquire();  try {    Log.i("CALIBRATION-CHECK-IN: ","Wake Lock Acquired");    if (acquireSerialDevice()) {      try {        ReadData readData=new ReadData(mSerialDevice,mConnection,dexcom);        CalRecord[] calRecords=readData.getRecentCalRecords();        Log.i("CALIBRATION-CHECK-IN: ","Found " + calRecords.length + " Records!");        save_most_recent_cal_record(calRecords);      } catch (      Exception e) {        Log.wtf("Unhandled exception caught",e);      } finally {        try {          mSerialDevice.getPorts().get(0).close();        } catch (        IOException e) {          Log.e(TAG,"Unable to close",e);        }      }    } else {      Log.w("CALIBRATION-CHECK-IN: ","Failed to acquire serial device");    }  }  finally {    wl.release();  }}  }
class C{  public MultiPolygon(Polygon[] polygons,PrecisionModel precisionModel,int SRID){  this(polygons,new GeometryFactory(precisionModel,SRID));}  }
class C{  public int trap(int[] A){  if (A == null || A.length == 0)   return 0;  int l=0;  int r=A.length - 1;  int level=0;  int all=0;  int block=0;  while (l <= r) {    int curLevel=Math.min(A[l],A[r]);    if (curLevel > level) {      all+=(curLevel - level) * (r - l + 1);      level=curLevel;    }    if (A[l] < A[r])     block+=A[l++]; else     block+=A[r--];  }  return all - block;}  }
class C{  public CheckRequest start(Callback callback){  if (featureName == null) {    throw new IllegalStateException("You need to provide a feature name to provide a callback when that feature is checked");  }  this.callback=callback;  return new CheckRequest(this);}  }
class C{  private SceKernelFplInfo(String name,int partitionid,int attr,int blockSize,int numBlocks,int memType,int memAlign){  this.name=name;  this.attr=attr;  this.blockSize=blockSize;  this.numBlocks=numBlocks;  freeBlocks=numBlocks;  uid=SceUidManager.getNewUid("ThreadMan-Fpl");  this.partitionid=partitionid;  blockAddress=new int[numBlocks];  blockAllocated=new boolean[numBlocks];  for (int i=0; i < numBlocks; i++) {    blockAllocated[i]=false;  }  int alignedBlockSize=memAlign == 0 ? blockSize : Utilities.alignUp(blockSize,memAlign - 1);  int totalFplSize=alignedBlockSize * numBlocks;  sysMemInfo=Modules.SysMemUserForUserModule.malloc(partitionid,String.format("ThreadMan-Fpl-0x%x-%s",uid,name),memType,totalFplSize,0);  if (sysMemInfo == null) {    throw new RuntimeException("SceKernelFplInfo: not enough free mem");  }  for (int i=0; i < numBlocks; i++) {    blockAddress[i]=sysMemInfo.addr + alignedBlockSize * i;  }  threadWaitingList=ThreadWaitingList.createThreadWaitingList(SceKernelThreadInfo.PSP_WAIT_FPL,uid,attr,FplManager.PSP_FPL_ATTR_PRIORITY);}  }
class C{  public void append(StringBuffer buffer,String fieldName,double[] array,Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  public static boolean isColocationComplete(PartitionedRegion region){  Region prRoot=PartitionedRegionHelper.getPRRoot(region.getCache());  PartitionRegionConfig config=(PartitionRegionConfig)prRoot.get(region.getRegionIdentifier());  if (config == null) {    Assert.assertTrue(region.isDestroyed() || region.isClosed,"Region is not destroyed, but there is no entry in the prRoot for region " + region);    return false;  }  return config.isColocationComplete();}  }
class C{  public static ZTauElement partModReduction(BigInteger k,int m,byte a,BigInteger[] s,byte mu,byte c){  BigInteger d0;  if (mu == 1) {    d0=s[0].add(s[1]);  } else {    d0=s[0].subtract(s[1]);  }  BigInteger[] v=getLucas(mu,m,true);  BigInteger vm=v[1];  SimpleBigDecimal lambda0=approximateDivisionByN(k,s[0],vm,a,m,c);  SimpleBigDecimal lambda1=approximateDivisionByN(k,s[1],vm,a,m,c);  ZTauElement q=round(lambda0,lambda1,mu);  BigInteger r0=k.subtract(d0.multiply(q.u)).subtract(BigInteger.valueOf(2).multiply(s[1]).multiply(q.v));  BigInteger r1=s[1].multiply(q.u).subtract(s[0].multiply(q.v));  return new ZTauElement(r0,r1);}  }
class C{  public StringConvert(boolean includeJdkConverters){  if (includeJdkConverters) {    for (    JDKStringConverter conv : JDKStringConverter.values()) {      registered.put(conv.getType(),conv);    }    registered.put(Boolean.TYPE,JDKStringConverter.BOOLEAN);    registered.put(Byte.TYPE,JDKStringConverter.BYTE);    registered.put(Short.TYPE,JDKStringConverter.SHORT);    registered.put(Integer.TYPE,JDKStringConverter.INTEGER);    registered.put(Long.TYPE,JDKStringConverter.LONG);    registered.put(Float.TYPE,JDKStringConverter.FLOAT);    registered.put(Double.TYPE,JDKStringConverter.DOUBLE);    registered.put(Character.TYPE,JDKStringConverter.CHARACTER);    tryRegister("javax.time.Instant","parse");    tryRegister("javax.time.Duration","parse");    tryRegister("javax.time.calendar.LocalDate","parse");    tryRegister("javax.time.calendar.LocalTime","parse");    tryRegister("javax.time.calendar.LocalDateTime","parse");    tryRegister("javax.time.calendar.OffsetDate","parse");    tryRegister("javax.time.calendar.OffsetTime","parse");    tryRegister("javax.time.calendar.OffsetDateTime","parse");    tryRegister("javax.time.calendar.ZonedDateTime","parse");    tryRegister("javax.time.calendar.Year","parse");    tryRegister("javax.time.calendar.YearMonth","parse");    tryRegister("javax.time.calendar.MonthDay","parse");    tryRegister("javax.time.calendar.Period","parse");    tryRegister("javax.time.calendar.ZoneOffset","of");    tryRegister("javax.time.calendar.ZoneId","of");    tryRegister("javax.time.calendar.TimeZone","of");  }}  }
class C{  public UpdateInventoryOutput replyOk(){  UpdateInventoryOutput ok=new UpdateInventoryOutput();  ok.setCode("OK");  return ok;}  }
class C{  private boolean checkStackDepth(int oldBci,int oldStackSize,boolean oldDuringCall,boolean oldRethrowException,int newBci,int newStackSize,boolean newDuringCall,boolean newRethrowException){  if (BytecodeFrame.isPlaceholderBci(oldBci)) {    return true;  }  byte[] codes=code.getCode();  if (codes == null) {    return true;  }  byte newCode=codes[newBci];  if (oldBci == newBci) {    assert oldStackSize == newStackSize || oldDuringCall != newDuringCall || oldRethrowException != newRethrowException : "bci is unchanged, stack depth shouldn't change";  } else {    byte oldCode=codes[oldBci];    assert Bytecodes.lengthOf(newCode) + newBci == oldBci || Bytecodes.lengthOf(oldCode) + oldBci == newBci : "expecting roll back or forward";  }  return true;}  }
class C{  protected String[][] format(AbstractMatrix2D matrix){  return this.format((DoubleMatrix2D)matrix);}  }
class C{  public AnnotationMapper(final Mapper wrapped,final ConverterRegistry converterRegistry,final ConverterLookup converterLookup,final ClassLoaderReference classLoaderReference,final ReflectionProvider reflectionProvider){  super(wrapped);  this.converterRegistry=converterRegistry;  annotatedTypes.add(Object.class);  setupMappers();  locked=true;  final ClassLoader classLoader=classLoaderReference.getReference();  arguments=new Object[]{this,classLoaderReference,reflectionProvider,converterLookup,new JVM(),classLoader != null ? classLoader : new TypedNull<>(ClassLoader.class)};}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  public int read24bitword(){  return (buf[position++] & 0xff) + ((buf[position++] & 0xff) << 8) + ((buf[position++] & 0xff) << 16);}  }
class C{  public void onSignInSucceeded(){  setSignInButtonVisibility(false);}  }
class C{  public static void parallelSort(short[] a){  int n=a.length, p, g;  if (n <= MIN_ARRAY_SORT_GRAN || (p=ForkJoinPool.getCommonPoolParallelism()) == 1)   DualPivotQuicksort.sort(a,0,n - 1,null,0,0); else   new ArraysParallelSortHelpers.FJShort.Sorter(null,a,new short[n],0,n,0,((g=n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ? MIN_ARRAY_SORT_GRAN : g).invoke();}  }
class C{  private RootLoader(ClassLoader parent){  this(EMPTY_URL_ARRAY,parent);}  }
class C{  public static String unwrap(String fileName){  return FilePath.get(fileName).unwrap().toString();}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey,Base64.DEFAULT);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }}  }
class C{  private void updateMigrationStatus(DbClient dbClient,Status status,ServiceCoded coded){switch (status) {case error:    for (    URI migrationURI : _migrationURIs) {      dbClient.error(Migration.class,migrationURI,getOpId(),coded);    }  break;case ready:for (URI migrationURI : _migrationURIs) {  dbClient.ready(Migration.class,migrationURI,getOpId());}break;case suspended_error:for (URI migrationURI : _migrationURIs) {dbClient.suspended_error(Migration.class,migrationURI,getOpId(),coded);}break;case suspended_no_error:for (URI migrationURI : _migrationURIs) {dbClient.suspended_no_error(Migration.class,migrationURI,getOpId());}break;default :}}  }
class C{  protected Node newNode(){  return new SVGOMTextPathElement();}  }
class C{  private String normalize(String path,boolean discardRelativePrefix){  path=UrlUtils.canonicalizePath(path,discardRelativePrefix);  int colon=path.indexOf(':');  if (colon != -1) {    int slash=path.indexOf('/');    if (slash == -1 || colon < slash) {      path="./" + path;    }  }  return path;}  }
class C{  public DocumentAnalysisRequest(String uri){  super(METHOD.POST,uri);}  }
class C{  private void needNewBuffer(int newSize){  int delta=newSize - size;  int newBufferSize=Math.max(minChunkLen,delta);  currentBufferIndex++;  currentBuffer=new double[newBufferSize];  offset=0;  if (currentBufferIndex >= buffers.length) {    int newLen=buffers.length << 1;    double[][] newBuffers=new double[newLen][];    System.arraycopy(buffers,0,newBuffers,0,buffers.length);    buffers=newBuffers;  }  buffers[currentBufferIndex]=currentBuffer;  buffersCount++;}  }
class C{  static public double distance(Signature signature1,Signature signature2,double extraMassPenalty){  Vector<Double> P=new Vector<Double>();  Vector<Double> Q=new Vector<Double>();  for (int i=0; i < signature1.getNumberOfFeatures() + signature2.getNumberOfFeatures(); i++) {    P.add(0.0);    Q.add(0.0);  }  for (int i=0; i < signature1.getNumberOfFeatures(); i++) {    P.set(i,signature1.getWeights()[i]);  }  for (int j=0; j < signature2.getNumberOfFeatures(); j++) {    Q.set(j + signature1.getNumberOfFeatures(),signature2.getWeights()[j]);  }  Vector<Vector<Double>> C=new Vector<Vector<Double>>();  for (int i=0; i < P.size(); i++) {    Vector<Double> vec=new Vector<Double>();    for (int j=0; j < P.size(); j++) {      vec.add(0.0);    }    C.add(vec);  }  for (int i=0; i < signature1.getNumberOfFeatures(); i++) {    for (int j=0; j < signature2.getNumberOfFeatures(); j++) {      double dist=signature1.getFeatures()[i].groundDist(signature2.getFeatures()[j]);      assert (dist >= 0);      C.get(i).set(j + signature1.getNumberOfFeatures(),dist);      C.get(j + signature1.getNumberOfFeatures()).set(i,dist);    }  }  return emdHat(P,Q,C,extraMassPenalty);}  }
class C{  public JnaDatabaseConnection(FbClientLibrary clientLibrary,IConnectionProperties connectionProperties,IEncodingFactory encodingFactory) throws SQLException {  super(clientLibrary,connectionProperties,encodingFactory);}  }
class C{  public void disableInterAssist(){synchronized (switchLock) {    if (Sage.DBG)     System.out.println("INFO Network encoder internal assistance has been disabled.");    if (currentFile != null)     remuxerMap.remove(currentFile);    interAssist=false;  }}  }
class C{  private boolean readEqualsSign(){  skipWhitespace();  if (pos < input.length() && input.charAt(pos) == '=') {    pos++;    return true;  }  return false;}  }
class C{  public void createDhcpRelayService(DhcpRelayServiceCreateSpec request,FutureCallback<DhcpRelayService> responseCallback) throws IOException {  postAsync(SERVICES_BASE_PATH,serializeObjectAsJson(request),HttpStatus.SC_CREATED,new TypeReference<DhcpRelayService>(){  },responseCallback);}  }
class C{  public static void testReturnVoid2Any(){  for (  Wrapper to : Wrapper.values()) {    testConversion(TestConversionMode.RETURN_VALUE,void.class,to.primitiveType(),null,to.zero(),false,null);    testConversion(TestConversionMode.RETURN_VALUE,void.class,to.wrapperType(),null,null,false,null);  }}  }
class C{  int type(){  if (end == DONE) {    return 0;  }  int type=charType(text[current]);switch (type) {case LOWER:case UPPER:    return ALPHA;default :  return type;}}  }
class C{  @Override public String fillSlots(Assignment fillers){  return string;}  }
class C{  @Post public String store(String json){  IACLService aclService=(IACLService)getContext().getAttributes().get(IACLService.class.getCanonicalName());  ACLRule newRule;  try {    newRule=jsonToRule(json);  } catch (  Exception e) {    log.error("Error parsing ACL rule: " + json,e);    return "{\"status\" : \"Failed! " + e.getMessage() + "\"}";  }  String status=null;  String nw_src=newRule.getNw_src();  String nw_dst=newRule.getNw_dst();  if (nw_src == null && nw_dst == null) {    status="Failed! Either nw_src or nw_dst must be specified.";    return ("{\"status\" : \"" + status + "\"}");  }  if (aclService.addRule(newRule)) {    status="Success! New rule added.";  } else {    status="Failed! The new ACL rule matches an existing rule.";  }  return ("{\"status\" : \"" + status + "\"}");}  }
class C{  public static void main(String args[]){  int runs=Integer.parseInt(args[0]);  int rows=Integer.parseInt(args[1]);  int columns=Integer.parseInt(args[2]);  String kind=args[3];  int initialCapacity=Integer.parseInt(args[4]);  double minLoadFactor=new Double(args[5]).doubleValue();  double maxLoadFactor=new Double(args[6]).doubleValue();  boolean print=args[7].equals("print");  String type=args[8];  String command=args[9];  if (type.equals("int")) {    if (kind.equals("primitive"))     intBenchmarkPrimitive(runs,rows,columns,print); else     if (kind.equals("primitiveOpt"))     intBenchmarkPrimitiveOptimized(runs,rows,columns,print); else     intBenchmark(runs,rows,columns,kind,print,initialCapacity,minLoadFactor,maxLoadFactor);  } else   if (type.equals("double")) {    if (kind.equals("primitive"))     doubleBenchmarkPrimitive(runs,rows,columns,print); else     if (kind.equals("primitiveOpt"))     doubleBenchmarkPrimitiveOptimized(runs,rows,columns,print); else     if (command.equals("mult"))     doubleBenchmarkMult(runs,rows,columns,kind,print,initialCapacity,minLoadFactor,maxLoadFactor); else     doubleBenchmark(runs,rows,columns,kind,print,initialCapacity,minLoadFactor,maxLoadFactor);  }}  }
class C{  public static WhereBuilder b(){  return new WhereBuilder();}  }
class C{  private RegExp expandMacro(String name,RegExp definition) throws MacroException {switch (definition.type) {case sym.BAR:case sym.CONCAT:    RegExp2 binary=(RegExp2)definition;  binary.r1=expandMacro(name,binary.r1);binary.r2=expandMacro(name,binary.r2);return definition;case sym.STAR:case sym.PLUS:case sym.QUESTION:case sym.BANG:case sym.TILDE:RegExp1 unary=(RegExp1)definition;unary.content=expandMacro(name,(RegExp)unary.content);return definition;case sym.MACROUSE:String usename=(String)((RegExp1)definition).content;if (name.equals(usename)) throw new MacroException(ErrorMessages.get(ErrorMessages.MACRO_CYCLE,name));RegExp usedef=getDefinition(usename);if (usedef == null) throw new MacroException(ErrorMessages.get(ErrorMessages.MACRO_DEF_MISSING,usename,name));markUsed(usename);return expandMacro(name,usedef);case sym.STRING:case sym.STRING_I:case sym.CHAR:case sym.CHAR_I:case sym.CCLASS:case sym.CCLASSNOT:return definition;default :throw new MacroException("unknown expression type " + definition.type + " in macro expansion");}}  }
class C{  public static void logEndTaskReceived(final Logger logger){  logger.logMessage(Level.INFO,"Consumer initiates SHUTDOWN: EndTask received");}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected int writeObject(STWriter out,InstanceScope scope,Object o,String[] options){  int n=0;  if (o == null) {    if (options != null && options[Option.NULL.ordinal()] != null) {      o=options[Option.NULL.ordinal()];    } else     return 0;  }  if (o instanceof ST) {    scope=new InstanceScope(scope,(ST)o);    if (options != null && options[Option.WRAP.ordinal()] != null) {      try {        out.writeWrap(options[Option.WRAP.ordinal()]);      } catch (      IOException ioe) {        errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe);      }    }    n=exec(out,scope);  } else {    o=convertAnythingIteratableToIterator(scope,o);    try {      if (o instanceof Iterator)       n=writeIterator(out,scope,o,options); else       n=writePOJO(out,scope,o,options);    } catch (    IOException ioe) {      errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe,o);    }  }  return n;}  }
class C{  private Rollout createRolloutGroups(final int amountOfGroups,final RolloutGroupConditions conditions,final JpaRollout savedRollout){  int pageIndex=0;  int groupIndex=0;  final Long totalCount=savedRollout.getTotalTargets();  final int groupSize=(int)Math.ceil((double)totalCount / (double)amountOfGroups);  int amountGroupValidated=amountOfGroups;  final int amountGroupCreation=(int)(Math.ceil((double)totalCount / (double)groupSize));  if (amountGroupCreation == (amountOfGroups - 1)) {    amountGroupValidated--;  }  RolloutGroup lastSavedGroup=null;  while (pageIndex < totalCount) {    groupIndex++;    final String nameAndDesc="group-" + groupIndex;    final JpaRolloutGroup group=new JpaRolloutGroup();    group.setName(nameAndDesc);    group.setDescription(nameAndDesc);    group.setRollout(savedRollout);    group.setParent(lastSavedGroup);    group.setSuccessCondition(conditions.getSuccessCondition());    group.setSuccessConditionExp(conditions.getSuccessConditionExp());    group.setErrorCondition(conditions.getErrorCondition());    group.setErrorConditionExp(conditions.getErrorConditionExp());    group.setErrorAction(conditions.getErrorAction());    group.setErrorActionExp(conditions.getErrorActionExp());    final JpaRolloutGroup savedGroup=rolloutGroupRepository.save(group);    final Slice<Target> targetGroup=targetManagement.findTargetsAll(savedRollout.getTargetFilterQuery(),new OffsetBasedPageRequest(pageIndex,groupSize,new Sort(Direction.ASC,"id")));    savedGroup.setTotalTargets(targetGroup.getContent().size());    lastSavedGroup=savedGroup;    targetGroup.forEach(null);    cacheWriteNotify.rolloutGroupCreated(groupIndex,savedRollout.getId(),savedGroup.getId(),amountGroupValidated,groupIndex);    pageIndex+=groupSize;  }  savedRollout.setStatus(RolloutStatus.READY);  return rolloutRepository.save(savedRollout);}  }
class C{  public Row(Row old){  cells=old.cells;}  }
class C{  private void createNewReviewTask(TaskRepository repository,TaskData taskData) throws CoreException {  Repository repo=AppraisePluginUtils.getGitRepoForRepository(repository);  AppraisePluginReviewClient client;  try {    client=new AppraisePluginReviewClient(repository);  } catch (  GitClientException e1) {    throw new CoreException(new Status(IStatus.ERROR,AppraiseConnectorPlugin.PLUGIN_ID,"Failed to initialize git client"));  }  String currentBranch;  try {    currentBranch=repo.getFullBranch();  } catch (  IOException e) {    throw new CoreException(new Status(IStatus.ERROR,AppraiseConnectorPlugin.PLUGIN_ID,"Error retrieving current branch",e));  }  if (MASTER_REF.equals(currentBranch)) {    throw new CoreException(new Status(IStatus.ERROR,AppraiseConnectorPlugin.PLUGIN_ID,"Cannot create review on master branch"));  }  setAttributeValue(taskData,schema.REQUESTER,repository.getUserName());  setAttributeValue(taskData,schema.TARGET_REF,MASTER_REF);  setAttributeValue(taskData,schema.REVIEW_REF,currentBranch);  RevCommit reviewCommit;  try {    reviewCommit=client.getReviewCommit(currentBranch,MASTER_REF);  } catch (  GitClientException e) {    throw new CoreException(new Status(IStatus.ERROR,AppraiseConnectorPlugin.PLUGIN_ID,"Cannot find a merge base",e));  }  if (reviewCommit == null) {    throw new CoreException(new Status(IStatus.INFO,AppraiseConnectorPlugin.PLUGIN_ID,"No commits to review on " + currentBranch));  }  setAttributeValue(taskData,schema.DESCRIPTION,reviewCommit.getFullMessage());  setAttributeValue(taskData,schema.REVIEW_COMMIT,reviewCommit.getName());  try {    List<DiffEntry> diffs=client.getReviewDiffs(currentBranch,MASTER_REF);    populateDiffs(repository,diffs,taskData);  } catch (  Exception e) {    throw new CoreException(new Status(IStatus.ERROR,AppraiseConnectorPlugin.PLUGIN_ID,"Failed to load review diffs",e));  }}  }
class C{  public ValidationExceptionBean(ApplicationExceptionBean sup,ReasonEnum reason,String member){  super(sup);  setReason(reason);  setMember(member);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documenttypepublicid01.class,args);}  }
class C{  public int checkAwardPlayer(String player){  Player p=currentTeam.findBenchPlayer(player);  if (p == null)   return 0;  if (p.wonHeisman)   return 3;  if (p.wonAllAmerican)   return 2;  if (p.wonAllConference)   return 1;  return 0;}  }
class C{  public static void decodeFileToFile(String infile,String outfile){  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  } catch (  java.io.IOException ex) {    ex.printStackTrace();  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public void tryLockIfPrimary(){  if (isPrimary()) {    try {      this.activePrimaryMoveLock.lock();    }  finally {      this.activePrimaryMoveLock.unlock();    }  }}  }
class C{  @Nullable public EntityLoadInfo parse(String str){  boolean isNew=false;  if (str.startsWith(EntityLoadInfo.NEW_PREFIX)) {    str=str.substring("NEW-".length());    isNew=true;  }  int idDashPos=str.indexOf('-');  if (idDashPos == -1) {    if (isNew) {      MetaClass metaClass=metadata.getSession().getClass(str);      if (metaClass == null) {        return null;      }      Entity entity=metadata.create(metaClass);      MetaProperty primaryKeyProp=metadata.getTools().getPrimaryKeyProperty(metaClass);      boolean stringKey=primaryKeyProp != null && primaryKeyProp.getJavaType().equals(String.class);      return new EntityLoadInfo(entity.getId(),metaClass,null,stringKey,true);    }    return null;  }  String entityName=str.substring(0,idDashPos);  MetaClass metaClass=metadata.getSession().getClass(entityName);  if (metaClass == null) {    return null;  }  Object id;  String viewName;  boolean stringKey=false;  MetaProperty primaryKeyProp=metadata.getTools().getPrimaryKeyProperty(metaClass);  if (primaryKeyProp == null)   return null;  if (primaryKeyProp.getJavaType().equals(UUID.class)) {    int viewDashPos=-1;    int dashCount=StringUtils.countMatches(str,"-");    if (dashCount < 5) {      return null;    }    if (dashCount >= 6) {      int i=0;      while (i < 6) {        viewDashPos=str.indexOf('-',viewDashPos + 1);        i++;      }      viewName=str.substring(viewDashPos + 1);    } else {      viewDashPos=str.length();      viewName=null;    }    String entityIdStr=str.substring(idDashPos + 1,viewDashPos);    try {      id=UuidProvider.fromString(entityIdStr);    } catch (    Exception e) {      return null;    }  } else {    String entityIdStr;    if (primaryKeyProp.getJavaType().equals(String.class)) {      stringKey=true;      int viewDashPos=str.indexOf("}-",idDashPos + 2);      if (viewDashPos > -1) {        viewName=str.substring(viewDashPos + 2);      } else {        viewDashPos=str.length() - 1;        viewName=null;      }      entityIdStr=str.substring(idDashPos + 2,viewDashPos);    } else {      int viewDashPos=str.indexOf('-',idDashPos + 1);      if (viewDashPos > -1) {        viewName=str.substring(viewDashPos + 1);      } else {        viewDashPos=str.length();        viewName=null;      }      entityIdStr=str.substring(idDashPos + 1,viewDashPos);    }    try {      if (primaryKeyProp.getJavaType().equals(Long.class)) {        id=Long.valueOf(entityIdStr);      } else       if (primaryKeyProp.getJavaType().equals(Integer.class)) {        id=Integer.valueOf(entityIdStr);      } else {        id=entityIdStr;      }    } catch (    Exception e) {      return null;    }  }  return new EntityLoadInfo(id,metaClass,viewName,stringKey,isNew);}  }
class C{  public void endElement(String ns,String localName,String name) throws org.xml.sax.SAXException {  m_elemStack.pop();  m_currentNode=m_elemStack.isEmpty() ? null : (Node)m_elemStack.peek();}  }
class C{  public final MoveList checkEvasions(Position pos){  MoveList moveList=getMoveListObj();  final long occupied=pos.whiteBB | pos.blackBB;  if (pos.whiteMove) {    long kingThreats=pos.pieceTypeBB[Piece.BKNIGHT] & BitBoard.knightAttacks[pos.wKingSq];    long rookPieces=pos.pieceTypeBB[Piece.BROOK] | pos.pieceTypeBB[Piece.BQUEEN];    if (rookPieces != 0)     kingThreats|=rookPieces & BitBoard.rookAttacks(pos.wKingSq,occupied);    long bishPieces=pos.pieceTypeBB[Piece.BBISHOP] | pos.pieceTypeBB[Piece.BQUEEN];    if (bishPieces != 0)     kingThreats|=bishPieces & BitBoard.bishopAttacks(pos.wKingSq,occupied);    kingThreats|=pos.pieceTypeBB[Piece.BPAWN] & BitBoard.wPawnAttacks[pos.wKingSq];    long validTargets=0;    if ((kingThreats != 0) && ((kingThreats & (kingThreats - 1)) == 0)) {      int threatSq=BitBoard.numberOfTrailingZeros(kingThreats);      validTargets=kingThreats | BitBoard.squaresBetween[pos.wKingSq][threatSq];    }    validTargets|=pos.pieceTypeBB[Piece.BKING];    long squares=pos.pieceTypeBB[Piece.WQUEEN];    while (squares != 0) {      int sq=BitBoard.numberOfTrailingZeros(squares);      long m=(BitBoard.rookAttacks(sq,occupied) | BitBoard.bishopAttacks(sq,occupied)) & ~pos.whiteBB & validTargets;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      squares&=squares - 1;    }    squares=pos.pieceTypeBB[Piece.WROOK];    while (squares != 0) {      int sq=BitBoard.numberOfTrailingZeros(squares);      long m=BitBoard.rookAttacks(sq,occupied) & ~pos.whiteBB & validTargets;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      squares&=squares - 1;    }    squares=pos.pieceTypeBB[Piece.WBISHOP];    while (squares != 0) {      int sq=BitBoard.numberOfTrailingZeros(squares);      long m=BitBoard.bishopAttacks(sq,occupied) & ~pos.whiteBB & validTargets;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      squares&=squares - 1;    }{      int sq=pos.getKingSq(true);      long m=BitBoard.kingAttacks[sq] & ~pos.whiteBB;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;    }    long knights=pos.pieceTypeBB[Piece.WKNIGHT];    while (knights != 0) {      int sq=BitBoard.numberOfTrailingZeros(knights);      long m=BitBoard.knightAttacks[sq] & ~pos.whiteBB & validTargets;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      knights&=knights - 1;    }    long pawns=pos.pieceTypeBB[Piece.WPAWN];    long m=(pawns << 8) & ~occupied;    if (addPawnMovesByMask(moveList,pos,m & validTargets,-8,true))     return moveList;    m=((m & BitBoard.maskRow3) << 8) & ~occupied;    addPawnDoubleMovesByMask(moveList,pos,m & validTargets,-16);    int epSquare=pos.getEpSquare();    long epMask=(epSquare >= 0) ? (1L << epSquare) : 0L;    m=(pawns << 7) & BitBoard.maskAToGFiles & ((pos.blackBB & validTargets) | epMask);    if (addPawnMovesByMask(moveList,pos,m,-7,true))     return moveList;    m=(pawns << 9) & BitBoard.maskBToHFiles & ((pos.blackBB & validTargets) | epMask);    if (addPawnMovesByMask(moveList,pos,m,-9,true))     return moveList;  } else {    long kingThreats=pos.pieceTypeBB[Piece.WKNIGHT] & BitBoard.knightAttacks[pos.bKingSq];    long rookPieces=pos.pieceTypeBB[Piece.WROOK] | pos.pieceTypeBB[Piece.WQUEEN];    if (rookPieces != 0)     kingThreats|=rookPieces & BitBoard.rookAttacks(pos.bKingSq,occupied);    long bishPieces=pos.pieceTypeBB[Piece.WBISHOP] | pos.pieceTypeBB[Piece.WQUEEN];    if (bishPieces != 0)     kingThreats|=bishPieces & BitBoard.bishopAttacks(pos.bKingSq,occupied);    kingThreats|=pos.pieceTypeBB[Piece.WPAWN] & BitBoard.bPawnAttacks[pos.bKingSq];    long validTargets=0;    if ((kingThreats != 0) && ((kingThreats & (kingThreats - 1)) == 0)) {      int threatSq=BitBoard.numberOfTrailingZeros(kingThreats);      validTargets=kingThreats | BitBoard.squaresBetween[pos.bKingSq][threatSq];    }    validTargets|=pos.pieceTypeBB[Piece.WKING];    long squares=pos.pieceTypeBB[Piece.BQUEEN];    while (squares != 0) {      int sq=BitBoard.numberOfTrailingZeros(squares);      long m=(BitBoard.rookAttacks(sq,occupied) | BitBoard.bishopAttacks(sq,occupied)) & ~pos.blackBB & validTargets;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      squares&=squares - 1;    }    squares=pos.pieceTypeBB[Piece.BROOK];    while (squares != 0) {      int sq=BitBoard.numberOfTrailingZeros(squares);      long m=BitBoard.rookAttacks(sq,occupied) & ~pos.blackBB & validTargets;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      squares&=squares - 1;    }    squares=pos.pieceTypeBB[Piece.BBISHOP];    while (squares != 0) {      int sq=BitBoard.numberOfTrailingZeros(squares);      long m=BitBoard.bishopAttacks(sq,occupied) & ~pos.blackBB & validTargets;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      squares&=squares - 1;    }{      int sq=pos.getKingSq(false);      long m=BitBoard.kingAttacks[sq] & ~pos.blackBB;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;    }    long knights=pos.pieceTypeBB[Piece.BKNIGHT];    while (knights != 0) {      int sq=BitBoard.numberOfTrailingZeros(knights);      long m=BitBoard.knightAttacks[sq] & ~pos.blackBB & validTargets;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      knights&=knights - 1;    }    long pawns=pos.pieceTypeBB[Piece.BPAWN];    long m=(pawns >>> 8) & ~occupied;    if (addPawnMovesByMask(moveList,pos,m & validTargets,8,true))     return moveList;    m=((m & BitBoard.maskRow6) >>> 8) & ~occupied;    addPawnDoubleMovesByMask(moveList,pos,m & validTargets,16);    int epSquare=pos.getEpSquare();    long epMask=(epSquare >= 0) ? (1L << epSquare) : 0L;    m=(pawns >>> 9) & BitBoard.maskAToGFiles & ((pos.whiteBB & validTargets) | epMask);    if (addPawnMovesByMask(moveList,pos,m,9,true))     return moveList;    m=(pawns >>> 7) & BitBoard.maskBToHFiles & ((pos.whiteBB & validTargets) | epMask);    if (addPawnMovesByMask(moveList,pos,m,7,true))     return moveList;  }  return moveList;}  }
class C{  private boolean isFinalStage(State s){  return s.taskState.stage == TaskState.TaskStage.FINISHED || s.taskState.stage == TaskState.TaskStage.FAILED || s.taskState.stage == TaskState.TaskStage.CANCELLED;}  }
class C{  public Consensus(ExecutionManager manager,Decision decision){  this.manager=manager;  this.decision=decision;}  }
class C{  public void warning(org.xml.sax.SAXParseException e) throws org.xml.sax.SAXException {  String formattedMsg=e.getMessage();  SAXSourceLocator locator=getLocator();  ErrorListener handler=m_stylesheetProcessor.getErrorListener();  try {    handler.warning(new TransformerException(formattedMsg,locator));  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.ACTION_FAKE_DEFINITION;}  }
class C{  public void dispose(){  updatePreviousNode();  removeRemainingBreakpoints();  removeListeners();}  }
class C{  private MapDownload jsonToDownload(JSONObject obj) throws JSONException {  String updated=obj.getString("updated");  String title=obj.getString("title");  String region=obj.getString("region");  String url=obj.getString("url");  String id=obj.getString("id");  return new MapDownload(title,region,url,id,updated);}  }
class C{  private void processDirectorStats(Map<String,MetricHeaderInfo> metricHeaderInfoMap,Map<String,Double> maxValues,Map<String,String> lastSample){  MetricHeaderInfo headerInfo=metricHeaderInfoMap.get(HEADER_KEY_DIRECTOR_BUSY);  if (headerInfo != null) {    String directorBusyString=lastSample.get(HEADER_KEY_DIRECTOR_BUSY);    if (directorBusyString != null) {      Double percentBusy=Double.valueOf(directorBusyString);      Double iops=(maxValues.containsKey(HEADER_KEY_DIRECTOR_FE_OPS)) ? maxValues.get(HEADER_KEY_DIRECTOR_FE_OPS) : Double.valueOf(lastSample.get(HEADER_KEY_DIRECTOR_FE_OPS));      String lastSampleTime=lastSample.get(HEADER_KEY_TIME_UTC);      portMetricsProcessor.processFEAdaptMetrics(percentBusy,iops.longValue(),headerInfo.director,lastSampleTime,false);    }  }}  }
class C{  public int countComponents(Graph graph){  return extractComponents(new AdjacencyMatrix<Vertex>(graph)).size();}  }
class C{  public int hashCode(){  long millis=iUnitMillis;  int hash=(int)(millis ^ (millis >>> 32));  hash+=getType().hashCode();  return hash;}  }
class C{  private static void reducePayneHanek(double x,double result[]){  long inbits=Double.doubleToRawLongBits(x);  int exponent=(int)((inbits >> 52) & 0x7ff) - 1023;  inbits&=0x000fffffffffffffL;  inbits|=0x0010000000000000L;  exponent++;  inbits<<=11;  long shpi0;  long shpiA;  long shpiB;  int idx=exponent >> 6;  int shift=exponent - (idx << 6);  if (shift != 0) {    shpi0=(idx == 0) ? 0 : (RECIP_2PI[idx - 1] << shift);    shpi0|=RECIP_2PI[idx] >>> (64 - shift);    shpiA=(RECIP_2PI[idx] << shift) | (RECIP_2PI[idx + 1] >>> (64 - shift));    shpiB=(RECIP_2PI[idx + 1] << shift) | (RECIP_2PI[idx + 2] >>> (64 - shift));  } else {    shpi0=(idx == 0) ? 0 : RECIP_2PI[idx - 1];    shpiA=RECIP_2PI[idx];    shpiB=RECIP_2PI[idx + 1];  }  long a=inbits >>> 32;  long b=inbits & 0xffffffffL;  long c=shpiA >>> 32;  long d=shpiA & 0xffffffffL;  long ac=a * c;  long bd=b * d;  long bc=b * c;  long ad=a * d;  long prodB=bd + (ad << 32);  long prodA=ac + (ad >>> 32);  boolean bita=(bd & 0x8000000000000000L) != 0;  boolean bitb=(ad & 0x80000000L) != 0;  boolean bitsum=(prodB & 0x8000000000000000L) != 0;  if ((bita && bitb) || ((bita || bitb) && !bitsum)) {    prodA++;  }  bita=(prodB & 0x8000000000000000L) != 0;  bitb=(bc & 0x80000000L) != 0;  prodB+=bc << 32;  prodA+=bc >>> 32;  bitsum=(prodB & 0x8000000000000000L) != 0;  if ((bita && bitb) || ((bita || bitb) && !bitsum)) {    prodA++;  }  c=shpiB >>> 32;  d=shpiB & 0xffffffffL;  ac=a * c;  bc=b * c;  ad=a * d;  ac+=(bc + ad) >>> 32;  bita=(prodB & 0x8000000000000000L) != 0;  bitb=(ac & 0x8000000000000000L) != 0;  prodB+=ac;  bitsum=(prodB & 0x8000000000000000L) != 0;  if ((bita && bitb) || ((bita || bitb) && !bitsum)) {    prodA++;  }  c=shpi0 >>> 32;  d=shpi0 & 0xffffffffL;  bd=b * d;  bc=b * c;  ad=a * d;  prodA+=bd + ((bc + ad) << 32);  int intPart=(int)(prodA >>> 62);  prodA<<=2;  prodA|=prodB >>> 62;  prodB<<=2;  a=prodA >>> 32;  b=prodA & 0xffffffffL;  c=PI_O_4_BITS[0] >>> 32;  d=PI_O_4_BITS[0] & 0xffffffffL;  ac=a * c;  bd=b * d;  bc=b * c;  ad=a * d;  long prod2B=bd + (ad << 32);  long prod2A=ac + (ad >>> 32);  bita=(bd & 0x8000000000000000L) != 0;  bitb=(ad & 0x80000000L) != 0;  bitsum=(prod2B & 0x8000000000000000L) != 0;  if ((bita && bitb) || ((bita || bitb) && !bitsum)) {    prod2A++;  }  bita=(prod2B & 0x8000000000000000L) != 0;  bitb=(bc & 0x80000000L) != 0;  prod2B+=bc << 32;  prod2A+=bc >>> 32;  bitsum=(prod2B & 0x8000000000000000L) != 0;  if ((bita && bitb) || ((bita || bitb) && !bitsum)) {    prod2A++;  }  c=PI_O_4_BITS[1] >>> 32;  d=PI_O_4_BITS[1] & 0xffffffffL;  ac=a * c;  bc=b * c;  ad=a * d;  ac+=(bc + ad) >>> 32;  bita=(prod2B & 0x8000000000000000L) != 0;  bitb=(ac & 0x8000000000000000L) != 0;  prod2B+=ac;  bitsum=(prod2B & 0x8000000000000000L) != 0;  if ((bita && bitb) || ((bita || bitb) && !bitsum)) {    prod2A++;  }  a=prodB >>> 32;  b=prodB & 0xffffffffL;  c=PI_O_4_BITS[0] >>> 32;  d=PI_O_4_BITS[0] & 0xffffffffL;  ac=a * c;  bc=b * c;  ad=a * d;  ac+=(bc + ad) >>> 32;  bita=(prod2B & 0x8000000000000000L) != 0;  bitb=(ac & 0x8000000000000000L) != 0;  prod2B+=ac;  bitsum=(prod2B & 0x8000000000000000L) != 0;  if ((bita && bitb) || ((bita || bitb) && !bitsum)) {    prod2A++;  }  double tmpA=(prod2A >>> 12) / TWO_POWER_52;  double tmpB=(((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52;  double sumA=tmpA + tmpB;  double sumB=-(sumA - tmpA - tmpB);  result[0]=intPart;  result[1]=sumA * 2.0;  result[2]=sumB * 2.0;}  }
class C{  public void addAttribute(Attribute attr){  _attributes.add(attr);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentgetelementsbytagnamevalue.class,args);}  }
class C{  public ProcessParameterPanel(int WindowNo,ProcessInfo pi){  this(WindowNo,pi,"100%");}  }
class C{  public static boolean isValidVersion(String version){  return VERSION.matcher(version).matches();}  }
class C{  public CInliningResult(final INaviCodeNode firstNode,final INaviCodeNode returnNode){  m_firstNode=firstNode;  m_returnNode=returnNode;}  }
class C{  public void draw(GL10 gl,float x,float y,int labelID){  checkState(STATE_DRAWING,STATE_DRAWING);  Label label=mLabels.get(labelID);  gl.glEnable(GL10.GL_TEXTURE_2D);  ((GL11)gl).glTexParameteriv(GL10.GL_TEXTURE_2D,GL11Ext.GL_TEXTURE_CROP_RECT_OES,label.mCrop,0);  ((GL11Ext)gl).glDrawTexiOES((int)x,(int)y,0,(int)label.width,(int)label.height);}  }
class C{  private RE substring2(){  Substring2 o=(Substring2)strOp;  int start=o.getStart();  int end=o.getEnd();  RE arg=cats.get(0);switch (arg.op) {case STRING:    if (arg.lit.length() > end) {      return mkString(arg.lit.substring(start,end));    } else {      return null;    }case CONCAT:  for (  RE a : arg.cats) {    if (a.op == ReOp.STRING) {      int len=a.lit.length();      if (len >= end) {        return mkString(a.lit.substring(start,end));      } else {        start-=len;        end-=len;      }    } else {      return null;    }  }default :return null;}}  }
class C{  public JSONArray put(int index,Map<String,Object> value) throws JSONException {  this.put(index,new JSONObject(value));  return this;}  }
class C{  public Type basicGetType(){  return type;}  }
class C{  public void select(int index){  ListPeer peer;  do {    peer=(ListPeer)this.peer;    if (peer != null) {      peer.select(index);      return;    }synchronized (this) {      boolean alreadySelected=false;      for (int i=0; i < selected.length; i++) {        if (selected[i] == index) {          alreadySelected=true;          break;        }      }      if (!alreadySelected) {        if (!multipleMode) {          selected=new int[1];          selected[0]=index;        } else {          int newsel[]=new int[selected.length + 1];          System.arraycopy(selected,0,newsel,0,selected.length);          newsel[selected.length]=index;          selected=newsel;        }      }    }  } while (peer != this.peer);}  }
class C{  public Set<ByteString> keys(ByteString namespace){  if (namespace != null) {    SetMultimap<ByteString,ByteString> namespaceData=contents.get(namespace);    if (namespaceData != null) {      return namespaceData.keySet();    }  }  return Collections.emptySet();}  }
class C{  private void registerTemplates(){  addTemplate("$atlas","Hi %s, we feel sorry that you got lost in the world of Stendhal. You can open the atlas of Faiumoni with the #/atlas command - thank you");  addTemplate("$banprivate","Hi %s, I am sorry but we cannot discuss bans of other players for privacy reasons.");  addTemplate("$bugstracker","Hi %s, it sounds like you have found a new bug. Please could you create a bug report, details on how to do this are at #http://stendhalgame.org/wiki/SubmitBug - thank you very much.");  addTemplate("$bugreport","Hi %s, it sounds like you have found a new bug. Please could you create a bug report, details on how to do this are at #http://stendhalgame.org/wiki/SubmitBug - thank you very much.");  addTemplate("$faq","Hi %s, you will find the answer to your question in the Stendhal FAQ. It's very helpful so please read it thoroughly! Use #/faq to open the Stendhal FAQ. Thanks for playing Stendhal!");  addTemplate("$faqpvp","Hi %s, sorry to hear about that. Player attacks are actually within the rules of the game, and it is not something that support gets involved with for that reason. Please open the FAQ via #/faq and read carefully #http://stendhalgame.org/wiki/StendhalFAQ#Player_vs_Player - good luck for the future.");  addTemplate("$faqsocial","Hi %s, sorry to hear about that. Please read #http://stendhalgame.org/wiki/StendhalFAQ#Player_social_problems which covers some common problems.");  addTemplate("$firewallserver","Hi %s, I am sorry but we cannot help you with the configuration of your router or firewall. It is rather dangerous to modify those settings without knowing exactly what you are doing. So this should only be done by an experienced network administrator who will find instructions in the manual that came with the hardware router or operating system.");  addTemplate("$gmreview","Hi %s, that issue is closed for discussion with live support as it is more complex. Please email #gm-review@stendhalgame.org to discuss that issue.");  addTemplate("$gmreviewreply","Hi %s, email responses from #gm-review@stendhalgame.org can take up to four weeks, while the issue is independently reviewed.");  addTemplate("$ignore","Hi %s, sorry to hear that you have had some problems with another player. Please try to ignore them. You can use #/ignore #playername to prevent chat messages.");  addTemplate("$investigation","Hi %s, Stendhal is a game developed and run by volunteers. These kinds of investigations waste a lot of time. We're sorry but we cannot take this issue further.");  addTemplate("$knownbug","Hi %s, thank you for telling us about this bug, we have found it ourselves too and it's already reported. Thank you though and please do keep reporting bugs if you see them!");  addTemplate("$notsupport","Hi %s, sorry, but support cannot help with this issue. Please use #http://stendhalgame.org and the wiki #http://stendhalgame.org/wiki/Stendhal as information sources.");  addTemplate("$password","Hi %s, you can change your password by logging in on #http://stendhalgame.org. When you are logged in on that page you will find a link called change password in the upper right area of the page. There you can change your password.");  addTemplate("$rules","Hi %s, please read the Stendhal Rules, which will open via #/rules - thank you.");  addTemplate("$spam","Hi %s, repeatedly saying the same thing over and over again is considered spamming, and this is against the rules of the game. Please do not spam, and please open the Stendhal Rules via #/rules, thank you.");  addTemplate("$spamsupport","Hi %s, we use a special tool for support, so you don't have to worry about messages being lost. Please note that sending a lot of support messages will lower the priority of your query.");  addTemplate("$thief","Hi %s, please ask Dagobert about #trading to learn how to trade safely and securely. Support cannot recover items lost through carelessness.");  addTemplate("$wiki","Hi %s, this is a question which is answered on the Stendhal wiki, please look on #http://stendhalgame.org/wiki/Stendhal as this is full of useful information. Thanks for playing Stendhal.");}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a decimal number: ");  String[] decimal=input.nextLine().split("[.]");  Rational r1=new Rational(new BigInteger(decimal[0]),BigInteger.ONE);  Rational r2=new Rational(new BigInteger(decimal[1]),new BigInteger(String.valueOf((int)Math.pow(10,decimal[1].length()))));  System.out.println("The fraction number is " + (decimal[0].charAt(0) == '-' ? (r1).subtract(r2) : (r1).add(r2)));}  }
class C{  public IsSimpleOp(){}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer("{ ");  for (int i=0; i < intervalls.size(); i++)   result.append(intervalls.elementAt(i));  result.append(" }");  return result.toString();}  }
class C{  @SuppressWarnings("unchecked") public Set<Map<String,Object>> collectDelta(EntityProcessorWrapper epw,VariableResolver resolver,Set<Map<String,Object>> deletedRows){  if (stop.get())   return new HashSet();  ContextImpl context1=new ContextImpl(epw,resolver,null,Context.FIND_DELTA,session,null,this);  epw.init(context1);  Set<Map<String,Object>> myModifiedPks=new HashSet<>();  for (  EntityProcessorWrapper childEpw : epw.getChildren()) {    myModifiedPks.addAll(collectDelta(childEpw,resolver,deletedRows));    if (stop.get())     return new HashSet();  }  Map<String,Map<String,Object>> deltaSet=new HashMap<>();  LOG.info("Running ModifiedRowKey() for Entity: " + epw.getEntity().getName());  String pk=epw.getEntity().getPk();  while (true) {    Map<String,Object> row=epw.nextModifiedRowKey();    if (row == null)     break;    Object pkValue=row.get(pk);    if (pkValue == null) {      pk=findMatchingPkColumn(pk,row);      pkValue=row.get(pk);    }    deltaSet.put(pkValue.toString(),row);    importStatistics.rowsCount.incrementAndGet();    if (stop.get())     return new HashSet();  }  Set<Map<String,Object>> deletedSet=new HashSet<>();  while (true) {    Map<String,Object> row=epw.nextDeletedRowKey();    if (row == null)     break;    deletedSet.add(row);    Object pkValue=row.get(pk);    if (pkValue == null) {      pk=findMatchingPkColumn(pk,row);      pkValue=row.get(pk);    }    String deletedRowPk=pkValue.toString();    if (deltaSet.containsKey(deletedRowPk)) {      deltaSet.remove(deletedRowPk);    }    importStatistics.rowsCount.incrementAndGet();    if (stop.get())     return new HashSet();  }  LOG.info("Completed ModifiedRowKey for Entity: " + epw.getEntity().getName() + " rows obtained : "+ deltaSet.size());  LOG.info("Completed DeletedRowKey for Entity: " + epw.getEntity().getName() + " rows obtained : "+ deletedSet.size());  myModifiedPks.addAll(deltaSet.values());  Set<Map<String,Object>> parentKeyList=new HashSet<>();  if (epw.getEntity().getParentEntity() != null) {    for (    Map<String,Object> row : myModifiedPks) {      resolver.addNamespace(epw.getEntity().getName(),row);      getModifiedParentRows(resolver,epw.getEntity().getName(),epw,parentKeyList);      if (stop.get())       return new HashSet();    }    for (    Map<String,Object> row : deletedSet) {      resolver.addNamespace(epw.getEntity().getName(),row);      getModifiedParentRows(resolver,epw.getEntity().getName(),epw,parentKeyList);      if (stop.get())       return new HashSet();    }  }  LOG.info("Completed parentDeltaQuery for Entity: " + epw.getEntity().getName());  if (epw.getEntity().isDocRoot())   deletedRows.addAll(deletedSet);  return epw.getEntity().getParentEntity() == null ? myModifiedPks : new HashSet<>(parentKeyList);}  }
class C{  public static String toUpperCase(String s,Locale locale){  if (s == null) {    return null;  }  StringBuilder sb=null;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (c > 127) {      if (locale == null) {        locale=Locale.getDefault();      }      return s.toUpperCase(locale);    }    if ((c >= 'a') && (c <= 'z')) {      if (sb == null) {        sb=new StringBuilder(s);      }      sb.setCharAt(i,(char)(c - 32));    }  }  if (sb == null) {    return s;  }  return sb.toString();}  }
class C{  public void testDefinitionsParsing() throws Exception {  NetworkClientFilter ncf=new NetworkClientFilter();  ncf.setTungstenSchema("tungsten_foo");  ncf.setDefinitionsFile(definitionsFile);  createDefinitionsFile();  filterHelper.setContext(replicatorContext);  filterHelper.setFilter(ncf);  assertEquals("Incorrect count of transformations from parsed JSON",3,ncf.getDefinedTransformations());  assertEquals("Incorrect count of column entries from parsed JSON",9,ncf.getDefinedColumnEntries());  filterHelper.done();  assertEquals("Incorrect count of transformations after releasing filter",0,ncf.getDefinedTransformations());  assertEquals("Incorrect count of column entries after releasing filter",0,ncf.getDefinedColumnEntries());  filterHelper.setContext(replicatorContext);  filterHelper.setFilter(ncf);  assertEquals("Incorrect count of transformations after 2nd prepare",3,ncf.getDefinedTransformations());  assertEquals("Incorrect count of column entries after 2nd prepare",9,ncf.getDefinedColumnEntries());  filterHelper.done();}  }
class C{  public static void cancelQuery(ISearchQuery query){  if (query == null) {    throw new IllegalArgumentException("query must not be null");  }  InternalSearchUI.getInstance().cancelSearch(query);}  }
class C{  public static SamlWebViewDialog newInstance(String url,String targetUrl){  SamlWebViewDialog fragment=new SamlWebViewDialog();  Bundle args=new Bundle();  args.putString(ARG_INITIAL_URL,url);  args.putString(ARG_TARGET_URL,targetUrl);  fragment.setArguments(args);  return fragment;}  }
class C{  public static boolean isValidWithNetMask(String address){  return isValidIPv4WithNetmask(address) || isValidIPv6WithNetmask(address);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case TRANSACTION_ID:    return isSetTransactionId();}throw new IllegalStateException();}  }
class C{  public RpcClient peerWith(PeerInfo serverInfo,Bootstrap bootstrap) throws IOException {  return peerWith(serverInfo,bootstrap,null);}  }
class C{  public long findUniqueLong(@NotNull @SQL String sql,Object... args){  return findUniqueLong(SqlQuery.query(sql,args));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.STRING_LITERAL__VALUE:    return VALUE_EDEFAULT == null ? value != null : !VALUE_EDEFAULT.equals(value);case N4JSPackage.STRING_LITERAL__RAW_VALUE:  return RAW_VALUE_EDEFAULT == null ? rawValue != null : !RAW_VALUE_EDEFAULT.equals(rawValue);}return super.eIsSet(featureID);}  }
class C{  @Override public boolean shouldStay(MovePath movePath){  if (movePath.length() < 2)   return true;  MoveStep prevStep=movePath.getSecondLastStep();  Coords prevC=prevStep.getPosition();  int prevDist=dest.distance(prevC), mpDist=dest.distance(movePath.getFinalCoords());  if (prevDist > mpDist)   return true;  if (prevDist == mpDist) {    return prevC.equals(movePath.getFinalCoords());  }  return false;}  }
class C{  public PersistentCookieStore(Context context){  cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,Context.MODE_PRIVATE);  cookies=new HashMap<String,ConcurrentHashMap<String,Cookie>>();  Map<String,?> prefsMap=cookiePrefs.getAll();  for (  Map.Entry<String,?> entry : prefsMap.entrySet()) {    if (((String)entry.getValue()) != null && !((String)entry.getValue()).startsWith(COOKIE_NAME_PREFIX)) {      String[] cookieNames=TextUtils.split((String)entry.getValue(),",");      for (      String name : cookieNames) {        String encodedCookie=cookiePrefs.getString(COOKIE_NAME_PREFIX + name,null);        if (encodedCookie != null) {          Cookie decodedCookie=decodeCookie(encodedCookie);          if (decodedCookie != null) {            if (!cookies.containsKey(entry.getKey()))             cookies.put(entry.getKey(),new ConcurrentHashMap<String,Cookie>());            cookies.get(entry.getKey()).put(name,decodedCookie);          }        }      }    }  }}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public void add(ReadableDuration duration,int scalar){  if (duration != null) {    add(FieldUtils.safeMultiply(duration.getMillis(),scalar));  }}  }
class C{  public void addHost(String port,MacAddress host){  this.portToMac.put(port,host);  return;}  }
class C{  public SFTPv3FileHandle openFileRW(String fileName) throws IOException {  return openFile(fileName,0x00000003,null);}  }
class C{  public void onBrokerData(Tradestrategy tradestrategy,ZonedDateTime endDate) throws BrokerModelException {  try {    if (m_client.isConnected()) {      if (this.isHistoricalDataRunning(tradestrategy)) {        throw new BrokerModelException(tradestrategy.getIdTradeStrategy(),3010,"HistoricalData request is already in progress for: " + tradestrategy.getContract().getSymbol() + " Please wait or cancel.");      }      if (!tradestrategy.getStrategyData().isRunning())       tradestrategy.getStrategyData().execute();      m_historyDataRequests.put(tradestrategy.getId(),tradestrategy);      endDate=TradingCalendar.getDateAtTime(TradingCalendar.addTradingDays(endDate,backfillOffsetDays),endDate);      String endDateTime=TradingCalendar.getFormattedDate(endDate,"yyyyMMdd HH:mm:ss");      Integer chartDays=tradestrategy.getChartDays();      if (TradingCalendar.getDurationInDays(TradingCalendar.addTradingDays(endDate,(-1 * tradestrategy.getChartDays())),TradingCalendar.getDateTimeNowMarketTimeZone()) > 365) {        chartDays=365;      }      _log.info("onBrokerData Req Id: " + tradestrategy.getId() + " Symbol: "+ tradestrategy.getContract().getSymbol()+ " end Time: "+ endDateTime+ " Period length: "+ ChartDays.newInstance(chartDays).getDisplayName()+ " Bar size: "+ BarSize.newInstance(tradestrategy.getBarSize()).getDisplayName()+ " WhatToShow: "+ backfillWhatToShow+ " Regular Trading Hrs: "+ backfillUseRTH+ " Date format: "+ backfillDateFormat);      List<TagValue> chartOptions=new ArrayList<TagValue>();      m_client.reqHistoricalData(tradestrategy.getId(),TWSBrokerModel.getIBContract(tradestrategy.getContract()),endDateTime,ChartDays.newInstance(chartDays).getDisplayName(),BarSize.newInstance(tradestrategy.getBarSize()).getDisplayName(),backfillWhatToShow,backfillUseRTH,backfillDateFormat,chartOptions);    } else {      throw new BrokerModelException(tradestrategy.getId(),3100,"Not conected to TWS historical data cannot be retrieved");    }  } catch (  Exception ex) {    throw new BrokerModelException(tradestrategy.getId(),3110,"Error broker data Symbol: " + tradestrategy.getContract().getSymbol() + " Msg: "+ ex.getMessage());  }}  }
class C{  public void readAcceleration(Callback<Acceleration> callback){  addCallback(BeanMessageID.CC_ACCEL_READ,callback);  sendMessageWithoutPayload(BeanMessageID.CC_ACCEL_READ);}  }
class C{  public void handleMeta(String target,Request baseRequest,HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  if (target.equals(Constants.API_ENDPOINT_META)) {    baseRequest.setHandled(true);    Sensision.update(SensisionConstants.SENSISION_CLASS_CONTINUUM_INGRESS_META_REQUESTS,Sensision.EMPTY_LABELS,1);  } else {    return;  }  response.setHeader("Access-Control-Allow-Origin","*");  String token=request.getHeader(Constants.getHeader(Configuration.HTTP_HEADER_TOKENX));  WriteToken writeToken;  try {    try {      writeToken=Tokens.extractWriteToken(token);    } catch (    WarpScriptException ee) {      throw new IOException(ee);    }    String application=writeToken.getAppName();    String producer=Tokens.getUUID(writeToken.getProducerId());    String owner=Tokens.getUUID(writeToken.getOwnerId());    if (null == producer || null == owner) {      Sensision.update(SensisionConstants.SENSISION_CLASS_CONTINUUM_INGRESS_META_INVALIDTOKEN,Sensision.EMPTY_LABELS,1);      response.sendError(HttpServletResponse.SC_FORBIDDEN,"Invalid token.");      return;    }    Map<String,String> sensisionLabels=new HashMap<String,String>();    sensisionLabels.put(SensisionConstants.SENSISION_LABEL_PRODUCER,producer);    if (null != application) {      sensisionLabels.put(SensisionConstants.SENSISION_LABEL_APPLICATION,application);    }    long count=0;    boolean gzipped=false;    if (null != request.getHeader("Content-Type") && "application/gzip".equals(request.getHeader("Content-Type"))) {      Sensision.update(SensisionConstants.SENSISION_CLASS_CONTINUUM_INGRESS_META_REQUESTS,Sensision.EMPTY_LABELS,1);      Sensision.update(SensisionConstants.SENSISION_CLASS_CONTINUUM_INGRESS_META_GZIPPED,sensisionLabels,1);      gzipped=true;    }    BufferedReader br=null;    if (gzipped) {      GZIPInputStream is=new GZIPInputStream(request.getInputStream());      br=new BufferedReader(new InputStreamReader(is));    } else {      br=request.getReader();    }    while (true) {      String line=br.readLine();      if (null == line) {        break;      }      if ("".equals(line)) {        continue;      }      if ('#' == line.charAt(0)) {        continue;      }      Metadata metadata=MetadataUtils.parseMetadata(line);      if (null == metadata) {        Sensision.update(SensisionConstants.SENSISION_CLASS_CONTINUUM_INGRESS_META_INVALID,sensisionLabels,1);        response.sendError(HttpServletResponse.SC_BAD_REQUEST,"Invalid metadata " + line);        return;      }      metadata.getLabels().put(Constants.PRODUCER_LABEL,producer);      metadata.getLabels().put(Constants.OWNER_LABEL,owner);      if (null != application) {        metadata.getLabels().put(Constants.APPLICATION_LABEL,application);      }      if (!MetadataUtils.validateMetadata(metadata)) {        Sensision.update(SensisionConstants.SENSISION_CLASS_CONTINUUM_INGRESS_META_INVALID,sensisionLabels,1);        response.sendError(HttpServletResponse.SC_BAD_REQUEST,"Invalid metadata " + line);        return;      }      count++;      metadata.setSource(Configuration.INGRESS_METADATA_UPDATE_ENDPOINT);      try {        pushMetadataMessage(metadata);      } catch (      Exception e) {        throw new IOException("Unable to push metadata");      }    }    Sensision.update(SensisionConstants.SENSISION_CLASS_CONTINUUM_INGRESS_META_RECORDS,sensisionLabels,count);  }  finally {    pushMetadataMessage(null,null);  }  response.setStatus(HttpServletResponse.SC_OK);}  }
class C{  private void jsRequestAppUpdate(final CordovaArgs arguments,final CallbackContext callback){  if (!isPluginReadyForWork) {    sendPluginNotReadyToWork("",callback);    return;  }  String msg=null;  try {    msg=(String)arguments.get(0);  } catch (  JSONException e) {    Log.d("CHCP","Dialog message is not set",e);  }  if (TextUtils.isEmpty(msg)) {    return;  }  final String storeURL=appConfigStorage.loadFromFolder(fileStructure.getWwwFolder()).getStoreUrl();  new AppUpdateRequestDialog(cordova.getActivity(),msg,storeURL,callback).show();}  }
class C{  public NFARExportOperation(File archiveFile,IN4JSEclipseProject project){  super(archiveFile,null,project);}  }
class C{  public static void printActionInputMap(JComponent comp){  ActionMap am=comp.getActionMap();  Object[] amKeys=am.allKeys();  if (amKeys != null) {    System.out.println("-------------------------");    System.out.println("ActionMap for Component " + comp.toString());    for (int i=0; i < amKeys.length; i++) {      Action a=am.get(amKeys[i]);      StringBuffer sb=new StringBuffer("- ");      sb.append(a.getValue(Action.NAME));      if (a.getValue(Action.ACTION_COMMAND_KEY) != null)       sb.append(", Cmd=").append(a.getValue(Action.ACTION_COMMAND_KEY));      if (a.getValue(Action.SHORT_DESCRIPTION) != null)       sb.append(" - ").append(a.getValue(Action.SHORT_DESCRIPTION));      System.out.println(sb.toString() + " - " + a);    }  }  InputMap im=comp.getInputMap(JComponent.WHEN_FOCUSED);  KeyStroke[] kStrokes=im.allKeys();  if (kStrokes != null) {    System.out.println("-------------------------");    System.out.println("InputMap for Component When Focused - " + comp.toString());    for (int i=0; i < kStrokes.length; i++) {      System.out.println("- " + kStrokes[i].toString() + " - "+ im.get(kStrokes[i]).toString());    }  }  im=comp.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);  kStrokes=im.allKeys();  if (kStrokes != null) {    System.out.println("-------------------------");    System.out.println("InputMap for Component When Focused in Window - " + comp.toString());    for (int i=0; i < kStrokes.length; i++) {      System.out.println("- " + kStrokes[i].toString() + " - "+ im.get(kStrokes[i]).toString());    }  }  im=comp.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);  kStrokes=im.allKeys();  if (kStrokes != null) {    System.out.println("-------------------------");    System.out.println("InputMap for Component When Ancestor - " + comp.toString());    for (int i=0; i < kStrokes.length; i++) {      System.out.println("- " + kStrokes[i].toString() + " - "+ im.get(kStrokes[i]).toString());    }  }  System.out.println("-------------------------");}  }
class C{  @Override public void put(URI uri,Map<String,List<String>> responseHeaders) throws IOException {  if (uri == null || responseHeaders == null) {    throw new IllegalArgumentException();  }  List<HttpCookie> cookies=parseCookie(responseHeaders);  for (  HttpCookie cookie : cookies) {    if (cookie.getDomain() == null) {      cookie.setDomain(uri.getHost());    }    if (cookie.getPath() == null) {      cookie.setPath(pathToCookiePath(uri.getPath()));    } else     if (!HttpCookie.pathMatches(cookie,uri)) {      continue;    }    if ("".equals(cookie.getPortlist())) {      cookie.setPortlist(Integer.toString(uri.getEffectivePort()));    } else     if (cookie.getPortlist() != null && !HttpCookie.portMatches(cookie,uri)) {      continue;    }    if (policy.shouldAccept(uri,cookie)) {      store.add(uri,cookie);    }  }}  }
class C{  protected void drawHtmlText(String text,int x,int y,int w,int h,Map<String,Object> style){  mxLighweightLabel textRenderer=mxLighweightLabel.getSharedInstance();  if (textRenderer != null && rendererPane != null) {    boolean horizontal=mxUtils.isTrue(style,mxConstants.STYLE_HORIZONTAL,true);    if (g.hitClip(x,y,w,h)) {      AffineTransform at=g.getTransform();      if (!horizontal) {        g.rotate(-Math.PI / 2,x + w / 2,y + h / 2);        g.translate(w / 2 - h / 2,h / 2 - w / 2);        int tmp=w;        w=h;        h=tmp;      }      textRenderer.setText(mxUtils.createHtmlDocument(style,text));      g.scale(scale,scale);      rendererPane.paintComponent(g,textRenderer,rendererPane,(int)(x / scale) + mxConstants.LABEL_INSET,(int)(y / scale) + mxConstants.LABEL_INSET,(int)(w / scale),(int)(h / scale),true);      g.setTransform(at);    }  }}  }
class C{  public final void testAreAllItemsEnabled(){  CharSequence[] entries=new CharSequence[]{"entry1","entry2"};  ProxySpinnerAdapter proxySpinnerAdapter=createAdapter(entries);  assertFalse(proxySpinnerAdapter.areAllItemsEnabled());}  }
class C{  public WrappedByteBuffer mark(){  _buf.mark();  return this;}  }
class C{  public static short[] copyOfRange(short[] original,int start,int end){  if (start <= end) {    if (original.length >= start && 0 <= start) {      int length=end - start;      int copyLength=Math.min(length,original.length - start);      short[] copy=new short[length];      System.arraycopy(original,start,copy,0,copyLength);      return copy;    }    throw new ArrayIndexOutOfBoundsException();  }  throw new IllegalArgumentException();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:09.928 -0500",hash_original_method="779EB6B3B1C2B5888DC5BF2D6BFB0D9C",hash_generated_method="1485D1EE3803384825CD7777F357EBE6") private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  ObjectInputStream.GetField fields=stream.readFields();  this.symbols=(DecimalFormatSymbols)fields.get("symbols",null);  initNative("");  dform.setPositivePrefix((String)fields.get("positivePrefix",""));  dform.setPositiveSuffix((String)fields.get("positiveSuffix",""));  dform.setNegativePrefix((String)fields.get("negativePrefix","-"));  dform.setNegativeSuffix((String)fields.get("negativeSuffix",""));  dform.setMultiplier(fields.get("multiplier",1));  dform.setGroupingSize(fields.get("groupingSize",(byte)3));  dform.setGroupingUsed(fields.get("groupingUsed",true));  dform.setDecimalSeparatorAlwaysShown(fields.get("decimalSeparatorAlwaysShown",false));  setRoundingMode((RoundingMode)fields.get("roundingMode",RoundingMode.HALF_EVEN));  final int maximumIntegerDigits=fields.get("maximumIntegerDigits",309);  final int minimumIntegerDigits=fields.get("minimumIntegerDigits",309);  final int maximumFractionDigits=fields.get("maximumFractionDigits",340);  final int minimumFractionDigits=fields.get("minimumFractionDigits",340);  dform.setMaximumIntegerDigits(maximumIntegerDigits);  super.setMaximumIntegerDigits(dform.getMaximumIntegerDigits());  setMinimumIntegerDigits(minimumIntegerDigits);  setMinimumFractionDigits(minimumFractionDigits);  setMaximumFractionDigits(maximumFractionDigits);  setParseBigDecimal(fields.get("parseBigDecimal",false));  if (fields.get("serialVersionOnStream",0) < 3) {    setMaximumIntegerDigits(super.getMaximumIntegerDigits());    setMinimumIntegerDigits(super.getMinimumIntegerDigits());    setMaximumFractionDigits(super.getMaximumFractionDigits());    setMinimumFractionDigits(super.getMinimumFractionDigits());  }}  }
class C{  @PUT @Path("{noteId}/permissions") @ZeppelinApi public Response putNotePermissions(@PathParam("noteId") String noteId,String req) throws IOException {  HashMap<String,HashSet<String>> permMap=gson.fromJson(req,new TypeToken<HashMap<String,HashSet<String>>>(){  }.getType());  Note note=notebook.getNote(noteId);  String principal=SecurityUtils.getPrincipal();  HashSet<String> roles=SecurityUtils.getRoles();  LOG.info("Set permissions {} {} {} {} {}",noteId,principal,permMap.get("owners"),permMap.get("readers"),permMap.get("writers"));  HashSet<String> userAndRoles=new HashSet<>();  userAndRoles.add(principal);  userAndRoles.addAll(roles);  if (!notebookAuthorization.isOwner(noteId,userAndRoles)) {    return new JsonResponse<>(Status.FORBIDDEN,ownerPermissionError(userAndRoles,notebookAuthorization.getOwners(noteId))).build();  }  HashSet<String> readers=permMap.get("readers");  HashSet<String> owners=permMap.get("owners");  HashSet<String> writers=permMap.get("writers");  if (readers != null && !readers.isEmpty()) {    if (writers.isEmpty()) {      writers=Sets.newHashSet(SecurityUtils.getPrincipal());    }    if (owners.isEmpty()) {      owners=Sets.newHashSet(SecurityUtils.getPrincipal());    }  }  if (writers != null && !writers.isEmpty()) {    if (owners.isEmpty()) {      owners=Sets.newHashSet(SecurityUtils.getPrincipal());    }  }  notebookAuthorization.setReaders(noteId,readers);  notebookAuthorization.setWriters(noteId,writers);  notebookAuthorization.setOwners(noteId,owners);  LOG.debug("After set permissions {} {} {}",notebookAuthorization.getOwners(noteId),notebookAuthorization.getReaders(noteId),notebookAuthorization.getWriters(noteId));  AuthenticationInfo subject=new AuthenticationInfo(SecurityUtils.getPrincipal());  note.persist(subject);  notebookServer.broadcastNote(note);  notebookServer.broadcastNoteList(subject,userAndRoles);  return new JsonResponse<>(Status.OK).build();}  }
class C{  protected void fillRow(Container target,int width,int start,int end){  int available=width;  for (int iter=start; iter < end; iter++) {    Component c=target.getComponentAt(iter);    available-=(c.getWidth() + c.getStyle().getMargin(false,Component.RIGHT) + c.getStyle().getMargin(false,Component.LEFT));  }  if (available > 0 && end - start > 0) {    int perComponent=available / (end - start);    int lastComponent=perComponent + available % (end - start);    if (perComponent > 0) {      int addOffset=0;      boolean rtl=target.isRTL();      for (int iter=start; iter < end - 1; iter++) {        Component c=target.getComponentAt(iter);        c.setWidth(c.getWidth() + perComponent);        if (rtl) {          addOffset+=perComponent;          c.setX(c.getX() - addOffset);        } else {          c.setX(c.getX() + addOffset);          addOffset+=perComponent;        }      }      Component c=target.getComponentAt(end - 1);      if (rtl) {        addOffset+=lastComponent;        c.setX(c.getX() - addOffset);      } else {        c.setX(c.getX() + addOffset);      }      c.setWidth(c.getWidth() + lastComponent);    } else {      Component c=target.getComponentAt(end - 1);      c.setWidth(c.getWidth() + lastComponent);    }  }}  }
class C{  private void rewriteSizesAndCrc(boolean actuallyNeedsZip64) throws IOException {  long save=raf.getFilePointer();  raf.seek(entry.localDataStart);  writeOut(ZipLong.getBytes(entry.entry.getCrc()));  if (!hasZip64Extra(entry.entry) || !actuallyNeedsZip64) {    writeOut(ZipLong.getBytes(entry.entry.getCompressedSize()));    writeOut(ZipLong.getBytes(entry.entry.getSize()));  } else {    writeOut(ZipLong.ZIP64_MAGIC.getBytes());    writeOut(ZipLong.ZIP64_MAGIC.getBytes());  }  if (hasZip64Extra(entry.entry)) {    raf.seek(entry.localDataStart + 3 * WORD + 2 * SHORT + getName(entry.entry).limit() + 2 * SHORT);    writeOut(ZipEightByteInteger.getBytes(entry.entry.getSize()));    writeOut(ZipEightByteInteger.getBytes(entry.entry.getCompressedSize()));    if (!actuallyNeedsZip64) {      raf.seek(entry.localDataStart - 5 * SHORT);      writeOut(ZipShort.getBytes(INITIAL_VERSION));      entry.entry.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);      entry.entry.setExtra();      if (entry.causedUseOfZip64) {        hasUsedZip64=false;      }    }  }  raf.seek(save);}  }
class C{  @Override public void execute(String[] params,Server server,Conversation conversation,IRCService service) throws CommandException {  if (params.length > 2) {    String text=BaseHandler.mergeParams(params,2);    service.getConnection(server.getId()).sendMessage(params[1],text);    Conversation targetConversation=server.getConversation(params[1]);    if (targetConversation != null) {      Message message=new Message(" " + service.getConnection(server.getId()).getNick() + " - "+ text);      targetConversation.addMessage(message);      Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),targetConversation.getName());      service.sendBroadcast(intent);    }  } else {    throw new CommandException(service.getString(R.string.invalid_number_of_params));  }}  }
class C{  public GenericGF(int primitive,int size,int b){  this.primitive=primitive;  this.size=size;  this.generatorBase=b;  expTable=new int[size];  logTable=new int[size];  int x=1;  for (int i=0; i < size; i++) {    expTable[i]=x;    x*=2;    if (x >= size) {      x^=primitive;      x&=size - 1;    }  }  for (int i=0; i < size - 1; i++) {    logTable[expTable[i]]=i;  }  zero=new GenericGFPoly(this,new int[]{0});  one=new GenericGFPoly(this,new int[]{1});}  }
class C{  public static Map<String,Object> updatePurchaseShipmentFromReceipt(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  String shipmentId=(String)context.get("shipmentId");  GenericValue userLogin=(GenericValue)context.get("userLogin");  try {    List<GenericValue> shipmentReceipts=EntityQuery.use(delegator).from("ShipmentReceipt").where("shipmentId",shipmentId).queryList();    if (shipmentReceipts.size() == 0)     return ServiceUtil.returnSuccess();    GenericValue shipment=EntityQuery.use(delegator).from("Shipment").where("shipmentId",shipmentId).queryOne();    if ((!UtilValidate.isEmpty(shipment)) && "PURCH_SHIP_CREATED".equals(shipment.getString("statusId"))) {      Map<String,Object> updateShipmentMap=dispatcher.runSync("updateShipment",UtilMisc.<String,Object>toMap("shipmentId",shipmentId,"statusId","PURCH_SHIP_SHIPPED","userLogin",userLogin));      if (ServiceUtil.isError(updateShipmentMap)) {        return updateShipmentMap;      }    }    List<GenericValue> shipmentAndItems=EntityQuery.use(delegator).from("ShipmentAndItem").where("shipmentId",shipmentId,"statusId","PURCH_SHIP_SHIPPED").queryList();    if (shipmentAndItems.size() == 0) {      return ServiceUtil.returnSuccess();    }    Map<String,BigDecimal> shippedCountMap=FastMap.newInstance();    for (    GenericValue item : shipmentAndItems) {      BigDecimal shippedQuantity=item.getBigDecimal("quantity");      BigDecimal quantity=shippedCountMap.get(item.getString("productId"));      quantity=quantity == null ? shippedQuantity : shippedQuantity.add(quantity);      shippedCountMap.put(item.getString("productId"),quantity);    }    Map<String,BigDecimal> receivedCountMap=FastMap.newInstance();    for (    GenericValue item : shipmentReceipts) {      BigDecimal receivedQuantity=item.getBigDecimal("quantityAccepted");      BigDecimal quantity=receivedCountMap.get(item.getString("productId"));      quantity=quantity == null ? receivedQuantity : receivedQuantity.add(quantity);      receivedCountMap.put(item.getString("productId"),quantity);    }    if (!shippedCountMap.equals(receivedCountMap)) {      return ServiceUtil.returnSuccess();    }    dispatcher.runSync("updateShipment",UtilMisc.<String,Object>toMap("shipmentId",shipmentId,"statusId","PURCH_SHIP_RECEIVED","userLogin",userLogin));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }catch (  GenericServiceException se) {    Debug.logError(se,module);    return ServiceUtil.returnError(se.getMessage());  }  return ServiceUtil.returnSuccess();}  }
class C{  public static void updateNodes(PathDataNode[] target,PathDataNode[] source){  for (int i=0; i < source.length; i++) {    target[i].mType=source[i].mType;    for (int j=0; j < source[i].mParams.length; j++) {      target[i].mParams[j]=source[i].mParams[j];    }  }}  }
class C{  public void put(K key,V value){  pruneMap();  if ((key == null) || (value == null)) {    return;  }  Reference<V> ref=new Entry<K,V>(key,value,queue);  map.put(key,ref);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Text textNode;  Text splitNode;  String value;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(2);  textNode=(Text)nameNode.getFirstChild();  splitNode=textNode.splitText(5);  value=textNode.getNodeValue();  assertEquals("textSplitTextTwoAssert","Roger",value);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:59.007 -0500",hash_original_method="A02034091310C74B28639EFAE9360C33",hash_generated_method="1A284CEE0323A19E2119CB64D978D10E") public String encodeBody(){  StringBuffer retval=new StringBuffer();  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(LESS_THAN);  }  retval.append(address.encode());  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(GREATER_THAN);  }  if (!parameters.isEmpty())   retval.append(COMMA + this.parameters.encode());  return retval.toString();}  }
class C{  public static void flush(){  if (getEntityManager().getTransaction().isActive()) {    getEntityManager().flush();  }}  }
class C{  public static <T>boolean isEnum(Class<T> class_){  return Enum.class.isAssignableFrom(class_);}  }
class C{  @Override public int lengthOfMonth(){  return isoDate.lengthOfMonth();}  }
class C{  public ZkClusterData fetchNodeToCoreToStatusMapping(){  Map<String,Map<String,String>> nodetoCoreHealthMap=new HashMap<String,Map<String,String>>();  LinkedHashMap<String,ZkCollectionState> zkState=getZkClusterData().getClusterState();  for (  String collection : zkState.keySet()) {    ZkCollectionState collectionMetadata=zkState.get(collection);    for (    String shard : collectionMetadata.getShards().keySet()) {      ZkShardInfo shardInfo=collectionMetadata.getShards().get(shard);      for (      String replica : shardInfo.getReplicas().keySet()) {        String nodeNameFull=shardInfo.getReplicas().get(replica).getNodeName();        String nodeName=fetchNodeName(nodeNameFull);        String core=shardInfo.getReplicas().get(replica).getCore();        String state=shardInfo.getReplicas().get(replica).getState();        if (nodetoCoreHealthMap.get(nodeName) != null) {          Map<String,String> coreToHealth=nodetoCoreHealthMap.get(nodeName);          coreToHealth.put(core,state);          nodetoCoreHealthMap.put(nodeName,coreToHealth);        } else {          Map<String,String> coreToHealth=new HashMap<String,String>();          coreToHealth.put(core,state);          nodetoCoreHealthMap.put(nodeName,coreToHealth);        }      }    }  }  getZkClusterData().setNodetoCoreHealthMap(nodetoCoreHealthMap);  return getZkClusterData();}  }
class C{  protected void firePseudoAttributes(){  if (m_tracer != null) {    try {      m_writer.flush();      StringBuffer sb=new StringBuffer();      int nAttrs=m_attributes.getLength();      if (nAttrs > 0) {        java.io.Writer writer=new ToStream.WritertoStringBuffer(sb);        processAttributes(writer,nAttrs);      }      sb.append('>');      char ch[]=sb.toString().toCharArray();      m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_OUTPUT_PSEUDO_CHARACTERS,ch,0,ch.length);    } catch (    IOException ioe) {    }catch (    SAXException se) {    }  }}  }
class C{  public void Sync(BayesNet other) throws Exception {  int nAtts=m_Instances.numAttributes();  if (nAtts != other.m_Instances.numAttributes()) {    throw new Exception("Cannot synchronize networks: different number of attributes.");  }  m_order=new int[nAtts];  for (int iNode=0; iNode < nAtts; iNode++) {    String sName=other.getNodeName(iNode);    m_order[getNode(sName)]=iNode;  }}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z1 == z2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          updateProgress((int)progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            if (z1 == constant2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            if (z2 == constant1) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void simulateLogic(LogicCircuit lc){  for (int i=lc.get_logic_gates().size() - 1; i >= 0; --i) {    lc.get_logic_gates().get(i).set_unvisited(true);    simulateLogic(lc.get_logic_gates().get(i));  }  for (int i=0; i < lc.get_output_gates().size(); ++i) {    lc.get_output_gates().get(i).set_unvisited(true);    simulateLogic(lc.get_output_gates().get(i));  }}  }
class C{  public void addConcept(Class<?> concept,String type) throws ObjectStoreConfigException {  addConcept(concept,vf.createURI(type));}  }
class C{  public static CreateWalletResponse create(String password,String apiCode,String privateKey,String label,String email) throws IOException, APIException {  Map<String,String> params=new HashMap<String,String>();  params.put("password",password);  params.put("api_code",apiCode);  if (privateKey != null) {    params.put("priv",privateKey);  }  if (label != null) {    params.put("label",label);  }  if (email != null) {    params.put("email",email);  }  String response=HttpClient.getInstance().post("api/v2/create_wallet",params);  JsonObject jsonObj=new JsonParser().parse(response).getAsJsonObject();  return new CreateWalletResponse(jsonObj.get("guid").getAsString(),jsonObj.get("address").getAsString(),jsonObj.get("link").getAsString());}  }
class C{  public IIOImage(RenderedImage image,List<? extends BufferedImage> thumbnails,IIOMetadata metadata){  if (image == null) {    throw new IllegalArgumentException("image == null!");  }  this.image=image;  this.raster=null;  this.thumbnails=thumbnails;  this.metadata=metadata;}  }
class C{  public Builder put(String key,Class clazz){  map.put(key,clazz.getName());  return this;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public void add(BTDownload downloader){  if (!DATA_MODEL.contains(downloader)) {    super.add(downloader,DATA_MODEL.getRowCount());    if (DATA_MODEL.getRowCount() > 0) {      int row=DATA_MODEL.getRow(downloader);      if (row != -1) {        TABLE.setSelectedRow(row);        TABLE.ensureSelectionVisible();      }    }  }}  }
class C{  public boolean isLandscape(){  Object oo=get_Value(COLUMNNAME_IsLandscape);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void testRecognizeUdpSymmetricFirewall() throws Exception {  Response testIResponse1=MessageFactory.create3489BindingResponse(discovererAddress,responseServerAddress,responseServerAddress);  Response testIResponse2=null;  responseServer.addMessage(testIResponse1);  responseServer.addMessage(testIResponse2);  StunDiscoveryReport expectedReturn=new StunDiscoveryReport();  expectedReturn.setNatType(StunDiscoveryReport.SYMMETRIC_UDP_FIREWALL);  expectedReturn.setPublicAddress(discovererAddress);  StunDiscoveryReport actualReturn=stunAddressDiscoverer.determineAddress();  assertEquals("The StunAddressDiscoverer failed for a no-udp environment.",expectedReturn,actualReturn);}  }
class C{  private void testSSLProtocolsAndCipherSuitesProperties(SecurityHelperTest.TEST_ARG arg){  resetSecuritySystemProperties();  AuthenticationInfo authInfo=null;  try {    List<String> emptyList=new ArrayList<String>();    authInfo=SecurityHelper.loadAuthenticationInformation("sample.security.properties");    if (arg == SecurityHelperTest.TEST_ARG.PROTOCOLS) {      authInfo.setEnabledProtocols(emptyList);    } else     if (arg == SecurityHelperTest.TEST_ARG.CIPHERS) {      authInfo.setEnabledCipherSuites(emptyList);    } else     if (arg == SecurityHelperTest.TEST_ARG.BOTH) {      authInfo.setEnabledProtocols(emptyList);      authInfo.setEnabledCipherSuites(emptyList);    }    SecurityHelper.testSetSecurityProperties(authInfo,true);  } catch (  ConfigurationException e) {    assertFalse("Could not load authentication and securiy information",true);  }  assertTrue(authInfo.isConnectorUseSSL());  resetSecuritySystemProperties();}  }
class C{  private void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));}  }
class C{  private PrintElement createBarcodeElement(MPrintFormatItem item){  Object obj=m_data.getNode(new Integer(item.getAD_Column_ID()));  if (obj == null)   return null; else   if (obj instanceof PrintDataElement)   ; else {    log.log(Level.SEVERE,"Element not PrintDataElement " + obj.getClass());    return null;  }  PrintDataElement data=(PrintDataElement)obj;  if (data.isNull() && item.isSuppressNull())   return null;  String stringContent=data.getValueDisplay(m_format.getLanguage());  if ((stringContent == null || stringContent.length() == 0) && item.isSuppressNull())   return null;  BarcodeElement element=new BarcodeElement(stringContent,item);  if (element.isValid())   return element;  return null;}  }
class C{  public SimpleAddDeleteTable(ObjectFactory<T> objectFactory,String title,Dimension preferredSize,String[] columnNames){  this.objectFactory=objectFactory;  this.tableTitle=title;  this.tablePreferredSize=preferredSize;  this.tableColumnNames=columnNames;  this.buildInterface();}  }
class C{  public JSONArray put(boolean value){  this.put(value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public static boolean containsClass(@NotNull String jarPath,@NotNull String className){  return containsClass(new File(jarPath),className);}  }
class C{  private String printXFormat(final int x){  String sx=null;  if (x == Integer.MIN_VALUE) {    sx="80000000";  } else   if (x < 0) {    final String t=Integer.toString((~(-x - 1)) ^ Integer.MIN_VALUE,16);switch (t.length()) {case 1:      sx="8000000" + t;    break;case 2:  sx="800000" + t;break;case 3:sx="80000" + t;break;case 4:sx="8000" + t;break;case 5:sx="800" + t;break;case 6:sx="80" + t;break;case 7:sx='8' + t;break;case 8:switch (t.charAt(0)) {case '1':sx='9' + t.substring(1,8);break;case '2':sx='a' + t.substring(1,8);break;case '3':sx='b' + t.substring(1,8);break;case '4':sx='c' + t.substring(1,8);break;case '5':sx='d' + t.substring(1,8);break;case '6':sx='e' + t.substring(1,8);break;case '7':sx='f' + t.substring(1,8);break;}break;}} else {sx=Integer.toString(x,16);}return printXFormat(sx);}  }
class C{  public static void configureAvroFileSet(String configuredSchema,FileSetProperties.Builder properties){  Schema avroSchema=parseAvroSchema(configuredSchema,configuredSchema);  String hiveSchema=parseHiveSchema(configuredSchema,configuredSchema);  properties.setInputFormat(AvroKeyInputFormat.class).setOutputFormat(AvroKeyOutputFormat.class).setEnableExploreOnCreate(true).setSerDe("org.apache.hadoop.hive.serde2.avro.AvroSerDe").setExploreInputFormat("org.apache.hadoop.hive.ql.io.avro.AvroContainerInputFormat").setExploreOutputFormat("org.apache.hadoop.hive.ql.io.avro.AvroContainerOutputFormat").setTableProperty("avro.schema.literal",configuredSchema).setExploreSchema(hiveSchema.substring(1,hiveSchema.length() - 1)).add(DatasetProperties.SCHEMA,configuredSchema);  Job job=createJobForConfiguration();  Configuration hConf=job.getConfiguration();  hConf.clear();  AvroJob.setInputKeySchema(job,avroSchema);  for (  Map.Entry<String,String> entry : hConf) {    properties.setInputProperty(entry.getKey(),entry.getValue());  }  hConf.clear();  AvroJob.setOutputKeySchema(job,avroSchema);  for (  Map.Entry<String,String> entry : hConf) {    properties.setOutputProperty(entry.getKey(),entry.getValue());  }}  }
class C{  protected TungstenProperties readConfig() throws Exception {  TungstenProperties conf=null;  File propsFile=new File(configFile);  if (!propsFile.exists() || !propsFile.canRead()) {    throw new Exception("Properties file not found: " + propsFile.getAbsolutePath(),null);  }  conf=new TungstenProperties();  try {    conf.load(new FileInputStream(propsFile));  } catch (  IOException e) {    throw new Exception("Unable to read properties file: " + propsFile.getAbsolutePath() + " ("+ e.getMessage()+ ")",null);  }  return conf;}  }
class C{  public static void checkAdmin(ServletContext servletContext) throws WebApplicationException {  Identity identity=new ServletInjector<Identity>().getManagedBean(servletContext,Identity.class);  IdentityManager identityManager=new ServletInjector<IdentityManager>().getManagedBean(servletContext,IdentityManager.class);  RelationshipManager relationshipManager=new ServletInjector<RelationshipManager>().getManagedBean(servletContext,RelationshipManager.class);  if (identity == null || !hasRole(relationshipManager,identity.getAccount(),getRole(identityManager,TankConstants.TANK_GROUP_ADMIN))) {    throw new WebApplicationException(buildForbiddenResponse("Insuficient Rights"));  }}  }
class C{  public void check(){  DateTime now=DateTime.now();  DateTime last=lastPomodoroStorage.get();  if (!Utils.isTheSamePomodoroDay(last,now)) {    pomodorosDoneStorage.set(0);  }}  }
class C{  @SuppressWarnings("unused") public static byte[] barcode_height(byte dots){  byte[] result=new byte[3];  result[0]=GS;  result[1]=104;  result[2]=dots;  return result;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String name(){  return this.name;}  }
class C{  public static boolean equalsDouble(ReadOnlyVector3 vec0,ReadOnlyVector3 vec1){  if (vec0 == vec1)   return (true);  if (Math.abs(vec0.getX() - vec1.getX()) > epsilonD)   return (false);  if (Math.abs(vec0.getY() - vec1.getY()) > epsilonD)   return (false);  if (Math.abs(vec0.getZ() - vec1.getZ()) > epsilonD)   return (false);  return (true);}  }
class C{  private int[] gcd(int[] f,int[] g){  int[] a=f;  int[] b=g;  if (computeDegree(a) == -1) {    return b;  }  while (computeDegree(b) != -1) {    int[] c=mod(a,b);    a=new int[b.length];    System.arraycopy(b,0,a,0,a.length);    b=new int[c.length];    System.arraycopy(c,0,b,0,b.length);  }  int coeff=field.inverse(headCoefficient(a));  return multWithElement(a,coeff);}  }
class C{  private Filter buildListQualifierFilter(QualifierFilterEntity entry){  List<String> valueSet=EntityQualifierUtils.parseList(entry.getValue());  Iterator<String> it=valueSet.iterator();  String fieldName=entry.getKey();  String qualifierName=fieldName;  if (!_ed.isTag(entry.getKey())) {    qualifierName=_ed.getDisplayNameMap().get(entry.getKey()).getQualifierName();  }  FilterList setFilterList;  if (ComparisonOperator.IN.equals(entry.getOp())) {    setFilterList=new FilterList(Operator.MUST_PASS_ONE);  } else   if (ComparisonOperator.NOT_IN.equals(entry.getOp())) {    setFilterList=new FilterList(Operator.MUST_PASS_ALL);  } else {    throw new IllegalArgumentException(String.format("Don't support operation: %s on LIST type of value yet: %s, valid options: IN/NOT IN [LIST]",entry.getOp(),entry.toString()));  }  while (it.hasNext()) {    String value=it.next();    BinaryComparator comparator=new BinaryComparator(EntityQualifierUtils.toBytes(_ed,fieldName,value));    SingleColumnValueFilter filter=new SingleColumnValueFilter(_ed.getColumnFamily().getBytes(),qualifierName.getBytes(),convertToHBaseCompareOp(entry.getOp()),comparator);    filter.setFilterIfMissing(_filterIfMissing);    setFilterList.addFilter(filter);  }  return setFilterList;}  }
class C{  ClosedException(){  super("Queue closed.");}  }
class C{  @Override public boolean containsKey(Object key){  if (key == null) {    key=NULL_OBJECT;  }  int index=findIndex(key,elementData);  return elementData[index] == key;}  }
class C{  public void writeTo(final PacketOutputStream os){  os.write(ParameterWriter.QUOTE);  os.write(dateByteFormat());  os.write(ParameterWriter.QUOTE);}  }
class C{  public PaymentInformationException(){}  }
class C{  public void children(Collection<PojoDescriptor> children){  this.children=children;}  }
class C{  public NodeIterator intersect(Node min,Node max){  if (neighbourLists.isEmpty()) {    return null;  }  NodeSet result=new NodeSet();  int stacksize=neighbourLists.size();  int smallestSet=stacksize - 1;  NodeSet nset=neighbourLists.get(smallestSet);  if (nset.size() > minSetSize) {    for (int i=0; i < stacksize - 1; i++) {      NodeSet nodeSet=neighbourLists.get(i);      if (nodeSet.size() < minSetSize) {        nset=nodeSet;        minSetSize=nset.size();        smallestSet=i;      }    }  }  List<Node> nodes=nset.nodes;  int startIndex=0;  if (min != null) {    int p=Collections.binarySearch(nodes,min);    if (p >= 0) {      startIndex=p + 1;    } else {      startIndex=-p - 1;    }  }  int endIndex=nodes.size();  if (max != null) {    int p=Collections.binarySearch(nodes,max);    if (p >= 0) {      endIndex=p;    } else {      endIndex=-p - 1;    }  }  ListIterator<Node> listIterator=nodes.listIterator(startIndex);  f:   for (int k=startIndex; k < endIndex; k++) {    Node node=listIterator.next();    if (node.used == true) {      continue;    }    int i=0;    for (; i < neighbourLists.size(); i++) {      if (i != smallestSet && !neighbourLists.get(i).contains(node)) {        continue f;      }    }    result.add(node);  }  if (result.isEmpty()) {    return null;  }  NodeIterator newIterator=new NodeIterator(result,this);  return newIterator;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapremovenameditemns07.class,args);}  }
class C{  public void sendData(byte[][] data,int offset,int count,String targetHostName,int targetPort,long interval){  if ((data == null) || (data.length <= 0)) {    if (__IEsptouchTask.DEBUG) {      Log.e(TAG,"sendData(): data == null or length <= 0");    }    return;  }  for (int i=offset; !mIsStop && i < offset + count; i++) {    if (data[i].length == 0) {      continue;    }    try {      DatagramPacket localDatagramPacket=new DatagramPacket(data[i],data[i].length,InetAddress.getByName(targetHostName),targetPort);      this.mSocket.send(localDatagramPacket);    } catch (    UnknownHostException e) {      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData(): UnknownHostException");      }      e.printStackTrace();      mIsStop=true;      break;    }catch (    IOException e) {      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData(): IOException, but just ignore it");      }    }    try {      Thread.sleep(interval);    } catch (    InterruptedException e) {      e.printStackTrace();      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData is Interrupted");      }      mIsStop=true;      break;    }  }  if (mIsStop) {    close();  }}  }
class C{  private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){  try {    PackageManager pm=context.getPackageManager();    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);    if (handlers == null || handlers.size() == 0) {      return false;    }    for (    ResolveInfo resolveInfo : handlers) {      IntentFilter filter=resolveInfo.filter;      if (filter == null)       continue;      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;      if (resolveInfo.activityInfo == null)       continue;      return true;    }  } catch (  RuntimeException e) {    Log.e(TAG,"Runtime exception while getting specialized handlers");  }  return false;}  }
class C{  public DTNHost createHost(){  return this.createHost(new Coord(0,0));}  }
class C{  public static String parseEmojis(String body){  if (TextUtils.isEmpty(body)) {    return body;  }  String ACCEPTED_CHARS="[\\s.,?:;'\"!]";  String REGEX_TEMPLATE=String.format("(^|%s)%s(%s|$)",ACCEPTED_CHARS,"%s",ACCEPTED_CHARS);  for (  Map.Entry<String,String> entry : EmojiRegistry.EMOJIS_MAP.entrySet()) {    String quoted=Pattern.quote(entry.getKey());    String regex=String.format(REGEX_TEMPLATE,quoted);    body=body.replaceAll(regex,"$1:" + entry.getValue() + ":$2");  }  return EmojiParser.parseToUnicode(body);}  }
class C{  protected Iterable<?> orderDomainValues(Variable var,Assignment assignment,CSP csp){  return csp.getDomain(var);}  }
class C{  public void requestUpdateAd(){  adFetcher.clearMapAds();}  }
class C{  public static void parseMission(InputStream missionStream,Mission mission) throws MissionParseException {  Document doc=getDocumentFromInputStream(missionStream);  doc.getDocumentElement().normalize();  NodeList missionNodes=doc.getElementsByTagName(ELEMENT_MISSION);  String startId=null;  for (int i=0; i < missionNodes.getLength(); i++) {    Node missionNode=missionNodes.item(i);    if (isElementNode(missionNode)) {      startId=((Element)missionNode).getAttribute(MISSION_ATTRIBUTE_START_ID);      Utils.logDebug(TAG,"Start id is \"" + startId + "\".");      break;    }  }  mission.setFirstMomentId(startId);  NodeList momentsList=doc.getElementsByTagName(ELEMENT_MOMENT);  for (int i=0; i < momentsList.getLength(); i++) {    Node momentNode=momentsList.item(i);    if (isElementNode(momentNode)) {      Moment moment;      Element momentElement=(Element)momentNode;      String id=momentElement.getAttribute(MOMENT_ATTRIBUTE_ID);      String momentType=momentElement.getAttribute(MOMENT_ATTRIBUTE_TYPE);      if (momentType.equals(MOMENT_TYPE_CHOICE)) {        Utils.logDebug(TAG,"Choice moment created.");        ChoiceMomentData momentData=parseChoiceMomentElement(id,momentElement);        moment=new ChoiceMoment(mission,momentData);      } else       if (momentType.equals(MOMENT_TYPE_SFX)) {        Utils.logDebug(TAG,"Sfx moment created.");        SfxMomentData momentData=parseSfxMoment(id,momentElement);        moment=new SfxMoment(mission,momentData);      } else       if (momentType.equals(MOMENT_TYPE_TIMER)) {        Utils.logDebug(TAG,"Timer moment created.");        TimerMomentData momentData=parseTimerMoment(id,momentElement);        moment=new TimerMoment(mission,momentData);      } else       if (momentType.equals(MOMENT_TYPE_SPOKEN_TEXT)) {        Utils.logDebug(TAG,"Spoken text moment created.");        SpokenTextMomentData momentData=parseSpokenTextMoment(id,momentElement);        moment=new SpokenTextMoment(mission,momentData);      } else {        throw new MissionParseException("Moment type invalid.");      }      mission.addMoment(id,moment);    }  }}  }
class C{  public Memoizer(final Callable<V> compute){  this(compute,null);}  }
class C{  public LineHeightValue(short unitType,float floatValue,boolean fontSizeRelative){  super(unitType,floatValue);  this.fontSizeRelative=fontSizeRelative;}  }
class C{  private LogSource(){}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case TYPE:    return isSetType();case HELLO:  return isSetHello();case ERROR:return isSetError();case ECHO_REQUEST:return isSetEchoRequest();case ECHO_REPLY:return isSetEchoReply();case GET_REQUEST:return isSetGetRequest();case GET_RESPONSE:return isSetGetResponse();case PUT_REQUEST:return isSetPutRequest();case PUT_RESPONSE:return isSetPutResponse();case DELETE_REQUEST:return isSetDeleteRequest();case DELETE_RESPONSE:return isSetDeleteResponse();case SYNC_VALUE:return isSetSyncValue();case SYNC_VALUE_RESPONSE:return isSetSyncValueResponse();case SYNC_OFFER:return isSetSyncOffer();case SYNC_REQUEST:return isSetSyncRequest();case FULL_SYNC_REQUEST:return isSetFullSyncRequest();case CURSOR_REQUEST:return isSetCursorRequest();case CURSOR_RESPONSE:return isSetCursorResponse();case REGISTER_REQUEST:return isSetRegisterRequest();case REGISTER_RESPONSE:return isSetRegisterResponse();case CLUSTER_JOIN_REQUEST:return isSetClusterJoinRequest();case CLUSTER_JOIN_RESPONSE:return isSetClusterJoinResponse();}throw new IllegalStateException();}  }
class C{  public static RDFNode asExpression(RDFNode node){  if (node instanceof Resource) {    Variable var=SPINFactory.asVariable(node);    if (var != null) {      return var;    }    Aggregation aggr=SPINFactory.asAggregation((Resource)node);    if (aggr != null) {      return aggr;    }    FunctionCall functionCall=SPINFactory.asFunctionCall((Resource)node);    if (functionCall != null) {      return functionCall;    }  }  return node;}  }
class C{  @Override public boolean isValidCombination(int semesterHours,DatePattern datePattern,TimePattern timePattern){  if (datePattern == null)   return false;  if (timePattern.getType() != null && timePattern.getType() == TimePattern.sTypeExactTime)   return true;  if (datePattern.getType() != null && datePattern.getType() == DatePattern.sTypePatternSet) {    for (    DatePattern child : datePattern.findChildren())     if (isValidCombination(semesterHours,child,timePattern))     return true;    return false;  } else {    return semesterHours * iMinutesPerHour == datePattern.getEffectiveNumberOfWeeks() * timePattern.getNrMeetings() * timePattern.getMinPerMtg();  }}  }
class C{  public boolean equalsIgnoreCase(String anotherString){  return (m_length == anotherString.length()) ? str().equalsIgnoreCase(anotherString) : false;}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public static void exportBoundaryAsLinearRing(XMLStreamWriter xmlWriter,Iterable<? extends LatLon> boundary,Double altitude) throws XMLStreamException {  String altitudeString=null;  if (altitude != null) {    altitudeString=Double.toString(altitude);  }  xmlWriter.writeStartElement("LinearRing");  xmlWriter.writeStartElement("coordinates");  for (  LatLon location : boundary) {    xmlWriter.writeCharacters(Double.toString(location.getLongitude().getDegrees()));    xmlWriter.writeCharacters(",");    xmlWriter.writeCharacters(Double.toString(location.getLatitude().getDegrees()));    if (altitudeString != null) {      xmlWriter.writeCharacters(",");      xmlWriter.writeCharacters(altitudeString);    }    xmlWriter.writeCharacters(" ");  }  xmlWriter.writeEndElement();  xmlWriter.writeEndElement();}  }
class C{  public boolean isUnderlineTriple(Node x,Node y,Node z){  return underLineTriples.contains(new Triple(x,y,z));}  }
class C{  protected Topic createTopic(String name){  return ActiveMQJMSClient.createTopic(name);}  }
class C{  public static Volume prepareVolumeForRequest(Long size,Project project,VirtualArray neighborhood,VirtualPool vpool,URI storageSystemURI,URI storagePoolURI,String label,ResourceOperationTypeEnum opType,String token,DbClient dbClient){  Volume volume=new Volume();  volume.setId(URIUtil.createId(Volume.class));  volume.setLabel(label);  volume.setCapacity(size);  volume.setThinlyProvisioned(VirtualPool.ProvisioningType.Thin.toString().equalsIgnoreCase(vpool.getSupportedProvisioningType()));  volume.setVirtualPool(vpool.getId());  volume.setProject(new NamedURI(project.getId(),volume.getLabel()));  volume.setTenant(new NamedURI(project.getTenantOrg().getURI(),volume.getLabel()));  volume.setVirtualArray(neighborhood.getId());  StoragePool storagePool=null;  if (!NullColumnValueGetter.getNullURI().toString().equals(storagePoolURI.toString())) {    storagePool=dbClient.queryObject(StoragePool.class,storagePoolURI);    if (null != storagePool) {      volume.setProtocol(new StringSet());      volume.getProtocol().addAll(VirtualPoolUtil.getMatchingProtocols(vpool.getProtocols(),storagePool.getProtocols()));    }  } else {    StringSet protocols=new StringSet();    protocols.add(StorageProtocol.Block.FC.name());    volume.setProtocol(protocols);  }  volume.setStorageController(storageSystemURI);  StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,storageSystemURI);  String systemType=storageSystem.checkIfVmax3() ? DiscoveredDataObject.Type.vmax3.name() : storageSystem.getSystemType();  volume.setSystemType(systemType);  volume.setPool(storagePoolURI);  volume.setOpStatus(new OpStatusMap());  if (null != vpool.getAutoTierPolicyName()) {    URI autoTierPolicyUri=StorageScheduler.getAutoTierPolicy(storagePoolURI,vpool.getAutoTierPolicyName(),dbClient);    if (null != autoTierPolicyUri) {      volume.setAutoTieringPolicyUri(autoTierPolicyUri);    }  }  if (opType != null) {    Operation op=new Operation();    op.setResourceType(opType);    volume.getOpStatus().createTaskStatus(token,op);  }  dbClient.createObject(volume);  return volume;}  }
class C{  public double optDouble(int index,double defaultValue){  try {    return this.getDouble(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  protected boolean haveSharedCellsRaw(ObjectMatrix2D other){  if (other instanceof SelectedSparseObjectMatrix2D) {    SelectedSparseObjectMatrix2D otherMatrix=(SelectedSparseObjectMatrix2D)other;    return this.elements == otherMatrix.elements;  } else   if (other instanceof SparseObjectMatrix2D) {    SparseObjectMatrix2D otherMatrix=(SparseObjectMatrix2D)other;    return this.elements == otherMatrix.elements;  }  return false;}  }
class C{  public static boolean resourceHasPackage(int resid){  return (resid >>> 24) != 0;}  }
class C{  public synchronized boolean performMerge(Way mergeInto,Way mergeFrom) throws OsmIllegalOperationException {  createCheckpoint(R.string.undo_action_merge_ways);  boolean mergeOK=getDelegator().mergeWays(mergeInto,mergeFrom);  map.invalidate();  return mergeOK;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeinsertbeforenewchildexists.class,args);}  }
class C{  public Enumeration<Register> enumerateNonvolatiles(int regClass){switch (regClass) {case INT_REG:    return enumerateNonvolatileGPRs();case DOUBLE_REG:  return enumerateNonvolatileFPRs();case CONDITION_REG:return enumerateNonvolatileConditionRegisters();case SPECIAL_REG:return EmptyEnumeration.emptyEnumeration();default :throw new OptimizingCompilerException("Unsupported non-volatile type");}}  }
class C{  boolean isJsrMerged(){  return jsrMerged;}  }
class C{  public CrossValidationHelper(IExperimentFactory<T> experiment){  this(5,experiment);}  }
class C{  public void updateEmergencyCallButtonState(Button button,int phoneState,boolean shown,boolean upperCase,boolean showIcon){  if (isEmergencyCallCapable() && shown) {    button.setVisibility(View.VISIBLE);  } else {    button.setVisibility(View.GONE);    return;  }  int textId;  if (phoneState == TelephonyManager.CALL_STATE_OFFHOOK) {    textId=R.string.lockscreen_return_to_call;    int phoneCallIcon=showIcon ? R.drawable.stat_sys_phone_call : 0;    button.setCompoundDrawablesWithIntrinsicBounds(phoneCallIcon,0,0,0);  } else {    textId=R.string.lockscreen_emergency_call;    int emergencyIcon=showIcon ? R.drawable.ic_emergency : 0;    button.setCompoundDrawablesWithIntrinsicBounds(emergencyIcon,0,0,0);  }  if (upperCase) {    CharSequence original=mContext.getResources().getText(textId);    String upper=original != null ? original.toString().toUpperCase() : null;    button.setText(upper);  } else {    button.setText(textId);  }}  }
class C{  private void acquireWifiLock(){  if (mWifiLock == null) {    final WifiManager wifiManager=(WifiManager)this.getSystemService(Context.WIFI_SERVICE);    if (wifiManager != null) {      mWifiLock=wifiManager.createWifiLock(WifiManager.WIFI_MODE_FULL,WIFILOCK_NAME);    } else {      Log.e(TAG,"Error acquiring wifi lock");    }  }  if (mWifiLock == null) {    Log.w(TAG,"WifiLock not found. Skipping acquisition..");    return;  }  if (!mWifiLock.isHeld()) {    mWifiLock.acquire();  } else {    Log.i(TAG,"WifiLock is hold already. Skipping acquisition..");  }}  }
class C{  public TreeMaker forToplevel(JCCompilationUnit toplevel){  return new TreeMaker(toplevel,names,types,syms);}  }
class C{  private boolean hasXGeoLocationPermission(Context context){  String searchUrl=TemplateUrlService.getInstance().getUrlForSearchQuery("foo");  return mSite.getAddress().matches(searchUrl) && PrefServiceBridge.isGeoHeaderEnabledForUrl(context,searchUrl,false);}  }
class C{  public BleichenbacherAttacker(final byte[] encryptedKey,final AOracle pkcsOracle,final boolean msgPKCScofnorm){  this.m_CryptoTechnique=ASYMMETRIC;  this.encryptedKey=encryptedKey.clone();  this.publicKey=pkcsOracle.getPublicKey();  this.m_Oracle=pkcsOracle;  this.msgIsPKCS=msgPKCScofnorm;  c0=BigInteger.ZERO;  si=BigInteger.ZERO;  m=null;  this.blockSize=this.publicKey.getModulus().bitLength() / 8;  int tmp=publicKey.getModulus().bitLength();  while (tmp % 8 != 0) {    tmp++;  }  tmp=((tmp / 8) - 2) * 8;  bigB=BigInteger.valueOf(2).pow(tmp);  LOG.info("B computed: " + bigB.toString(16));  LOG.info("Blocksize: " + blockSize + " bytes");}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  protected int findClosest(Color c){  if (colorTab == null)   return -1;  int r=c.getRed();  int g=c.getGreen();  int b=c.getBlue();  int minpos=0;  int dmin=256 * 256 * 256;  int len=colorTab.length;  for (int i=0; i < len; ) {    int dr=r - (colorTab[i++] & 0xff);    int dg=g - (colorTab[i++] & 0xff);    int db=b - (colorTab[i] & 0xff);    int d=dr * dr + dg * dg + db * db;    int index=i / 3;    if (usedEntry[index] && (d < dmin)) {      dmin=d;      minpos=index;    }    i++;  }  return minpos;}  }
class C{  public boolean isUseExportedName(){  return useExportedName;}  }
class C{  protected DistributedSystemConfigImpl(Properties props,boolean ignoreGemFirePropsFile){  this(new DistributionConfigImpl(filterOutAdminProperties(props),ignoreGemFirePropsFile),DEFAULT_REMOTE_COMMAND);  String remoteCommand=props.getProperty(REMOTE_COMMAND_NAME);  if (remoteCommand != null) {    this.remoteCommand=remoteCommand;  }  String entityConfigXMLFile=props.getProperty(ENTITY_CONFIG_XML_FILE_NAME);  if (entityConfigXMLFile != null) {    this.entityConfigXMLFile=entityConfigXMLFile;  }  String refreshInterval=props.getProperty(REFRESH_INTERVAL_NAME);  if (refreshInterval != null) {    try {      this.refreshInterval=Integer.parseInt(refreshInterval);    } catch (    NumberFormatException nfEx) {      throw new IllegalArgumentException(LocalizedStrings.DistributedSystemConfigImpl_0_IS_NOT_A_VALID_INTEGER_1.toLocalizedString(new Object[]{refreshInterval,REFRESH_INTERVAL_NAME}));    }  }}  }
class C{  public Word minus(Word w2){  return new Word(value.minus(w2.toLong()));}  }
class C{  private void enterBusy() throws IOException {  if (closeGuard.get())   throw new IOException("File system is stopped.");}  }
class C{  public static int compare(Date left,String right) throws PageException {  if (Decision.isNumber(right))   return compare(left.getTime() / 1000,Caster.toDoubleValue(right));  DateTime dt=DateCaster.toDateAdvanced(right,DateCaster.CONVERTING_TYPE_OFFSET,null,null);  if (dt != null) {    return compare(left.getTime() / 1000,dt.getTime() / 1000);  }  return Caster.toString(left).compareToIgnoreCase(right);}  }
class C{  private void broadcastStatus(){  Intent intent=new Intent(BROADCAST_STATUS);  intent.putExtra(EXTRA_START_TIME,mStartTime);  intent.putExtra(EXTRA_IMAGES_CAPTURED,mIndex);  intent.putExtra(EXTRA_IMAGES_REMAINING,mLimit == 0 ? 0 : mLimit - mIndex);  LocalBroadcastManager.getInstance(this).sendBroadcast(intent);}  }
class C{  private void testResample(double coord){  final int bin=getBinNr(coord);  final int sizereq, off;  if (bin < 0) {    sizereq=size - bin;    off=-bin;  } else   if (bin >= data.length) {    sizereq=bin + 1;    off=0;  } else {    return;  }  if (sizereq < data.length) {    return;  }  final int levels=BitsUtil.magnitude(sizereq / this.destsize) - 1;  assert (levels > 0) : "No resampling required?!? sizereq=" + sizereq + " destsize="+ destsize+ " array="+ data.length;  final int step=1 << levels;  final int fixpoint=off / (step - 1);{    int oup=(fixpoint >= 0) ? fixpoint : 0;    int inp=(oup << levels) - off;    assert (-step < inp && inp <= oup && oup < inp + step) : (inp + " -> " + oup+ " s="+ step+ " o="+ off+ " l="+ levels);    for (; inp < size; inp+=step, oup++) {      assert (oup < inp + step && oup < data.length);      data[oup]=downsample(data,Math.max(0,inp),Math.min(size,inp + step),step);    }    for (; oup < data.length; oup++) {      data[oup]=0;    }  }  if (off >= step) {    int oup=(fixpoint - 1 < size) ? fixpoint - 1 : size - 1;    int inp=(oup << levels) - off;    assert (oup > inp) : (inp + " -> " + oup+ " s="+ step+ " o="+ off+ " l="+ levels);    for (; inp > -step; inp-=step, oup--) {      assert (oup >= inp && oup >= 0);      data[oup]=downsample(data,Math.max(0,inp),Math.min(size,inp + step),step);    }    for (; oup >= 0; oup--) {      data[oup]=0;    }  }  base=base - (offset + off) * binsize;  offset=0;  size=(size + 1) >> levels;  binsize=binsize * (1 << levels);  max=base + binsize * size;}  }
class C{  public Exists(Statement stmt){  clause=format("EXISTS (%s)",stmt);}  }
class C{  public boolean failed(){  return value == null;}  }
class C{  public MemoryBasedRuleBin(int arity,int[] sourceTokens){  super(arity,sourceTokens);}  }
class C{  protected AbstractTextChildBridgeUpdateHandler(BridgeContext ctx,SVGTextElementBridge parent,Element e){  super(ctx,parent,e);}  }
class C{  @Override public boolean contains(Value subvalue){  return false;}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 14:{        addToken(Token.RESERVED_WORD);      }case 18:    break;case 1:{    addToken(Token.IDENTIFIER);  }case 19:break;case 13:{addToken(Token.FUNCTION);}case 20:break;case 11:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 21:break;case 4:{addToken(Token.COMMENT_EOL);addNullToken();return firstToken;}case 22:break;case 15:{addToken(Token.ANNOTATION);}case 23:break;case 10:{addToken(Token.VARIABLE);}case 24:break;case 8:{addToken(Token.RESERVED_WORD_2);}case 25:break;case 6:{addToken(Token.WHITESPACE);}case 26:break;case 9:{addToken(Token.PREPROCESSOR);}case 27:break;case 16:{addToken(Token.DATA_TYPE);}case 28:break;case 3:{addToken(Token.ERROR_CHAR);}case 29:break;case 17:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 30:break;case 7:{addToken(Token.OPERATOR);}case 31:break;case 12:{addToken(Token.LITERAL_CHAR);}case 32:break;case 2:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 33:break;case 5:{addNullToken();return firstToken;}case 34:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case YYINITIAL:{addNullToken();return firstToken;}case 178:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("PrintInfo[");  sb.append(getName());  if (getAD_Process_ID() != 0)   sb.append(",AD_Process_ID=").append(getAD_Process_ID());  if (getAD_Table_ID() != 0)   sb.append(",AD_Table_ID=").append(getAD_Table_ID());  if (getRecord_ID() != 0)   sb.append(",Record_ID=").append(getRecord_ID());  if (getC_BPartner_ID() != 0)   sb.append(",C_BPartner_ID=").append(getC_BPartner_ID());  sb.append("]");  return sb.toString();}  }
class C{  public Object read(String xml) throws Exception {  return fromXML(m_Document.read(xml));}  }
class C{  private void initialize(DirichletBayesIm oldBayesIm,double symmetricAlpha){  parents=new int[this.nodes.length][];  parentDims=new int[this.nodes.length][];  pseudocounts=new double[this.nodes.length][][];  for (int nodeIndex=0; nodeIndex < this.nodes.length; nodeIndex++) {    initializeNode(nodeIndex,oldBayesIm,symmetricAlpha);  }}  }
class C{  public boolean containsKey(Object key){  return lookupKeyIgnoringCase(key) != null;}  }
class C{  private static String discardNonBase64Chars(String data){  StringBuffer sb=new StringBuffer();  int length=data.length();  for (int i=0; i < length; i++) {    if (isValidBase64Byte((byte)(data.charAt(i)))) {      sb.append(data.charAt(i));    }  }  return sb.toString();}  }
class C{  private static void printDetectedAnnotatedFieldMsg(Field f){  String msg="ANNOTATION: Detected @TestValue-annotated field " + f.getType().getCanonicalName() + " \""+ f.getName()+ "\" in class "+ f.getDeclaringClass().getCanonicalName()+ ". Will collect its primitive values to use in generation.";  System.out.println(msg);}  }
class C{  public static float[] transformPoint(float[][] mm,float x,float y){  float x_=mm[0][0] * x + mm[1][0] * y + mm[2][0];  float y_=mm[0][1] * x + mm[1][1] * y + mm[2][1];  return new float[]{x_,y_};}  }
class C{  public InterferenceRegisterMapper(InterferenceGraph oldRegInterference,int countOldRegisters){  super(countOldRegisters);  newRegInterference=new ArrayList<BitIntSet>();  this.oldRegInterference=oldRegInterference;}  }
class C{  public NumberOfDocuments(int value){  super(value,0,Integer.MAX_VALUE);}  }
class C{  public static NetworkSystemBartender current(){  return SystemManager.getCurrentSystem(NetworkSystemBartender.class);}  }
class C{  static <T1,T2,R1,R2,R>AnyMValue<R> each3(final MonadicValue<? extends T1> monadicValue,final Function<? super T1,? extends MonadicValue<R1>> value2,final BiFunction<? super T1,? super R1,? extends MonadicValue<R2>> value3,final TriFunction<? super T1,? super R1,? super R2,Boolean> filterFunction,final TriFunction<? super T1,? super R1,? super R2,? extends R> yieldingFunction){  return AnyM.ofValue(For.iterable(monadicValue).iterable(null).iterable(null).filter(null).yield3(yieldingFunction).unwrap());}  }
class C{  private Method findSetter(Method[] methods,String getterName,Class arg){  String setterName="set" + getterName.substring(3);  for (int i=0; i < methods.length; i++) {    Method method=methods[i];    if (!method.getName().equals(setterName))     continue;    if (!method.getReturnType().equals(void.class))     continue;    Class[] params=method.getParameterTypes();    if (params.length == 1 && params[0].equals(arg))     return method;  }  return null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public String modifyPaymentEnablement() throws SaaSApplicationException {  Set<VOPaymentType> custDef=getEnabledPaymentTypeSet(defaultPaymentTypes);  Set<VOPaymentType> svcDef=getEnabledPaymentTypeSet(defaultServicePaymentTypes);  List<VOOrganizationPaymentConfiguration> cust=new ArrayList<VOOrganizationPaymentConfiguration>();  if (customerPaymentTypes != null) {    for (    CustomerPaymentTypes type : modifiedCustomerPaymentTypes()) {      VOOrganizationPaymentConfiguration conf=new VOOrganizationPaymentConfiguration();      conf.setOrganization(type.getCustomer());      conf.setEnabledPaymentTypes(getEnabledPaymentTypeSet(type.getPaymentTypes()));      cust.add(conf);    }  }  List<VOServicePaymentConfiguration> svc=new ArrayList<VOServicePaymentConfiguration>();  if (servicePaymentTypes != null) {    for (    ServicePaymentTypes type : modifiedServicePaymentTypes()) {      VOServicePaymentConfiguration conf=new VOServicePaymentConfiguration();      conf.setService(type.getService());      conf.setEnabledPaymentTypes(getEnabledPaymentTypeSet(type.getPaymentTypes()));      svc.add(conf);    }  }  boolean rc=getAccountingService().savePaymentConfiguration(custDef,cust,svcDef,svc);  customerPaymentTypes=null;  defaultPaymentTypes=null;  servicePaymentTypes=null;  defaultServicePaymentTypes=null;  enabledPaymentTypes=null;  addInfoOrProgressMessage(rc,INFO_PAYMENT_ENABLEMENT_SAVED,null);  return OUTCOME_SUCCESS;}  }
class C{  public static void removeExpiredIP(long clearTime){synchronized (ipMap) {    Iterator<String> storedIP=ipMap.keySet().iterator();    long currTime=System.currentTimeMillis();    while (storedIP.hasNext()) {      String key=storedIP.next();      long storedTime=ipMap.get(key);      if ((currTime - clearTime) > storedTime) {        storedIP.remove();        ipMap.remove(key);      }    }  }}  }
class C{  public PutWarmerRequest searchRequest(SearchRequestBuilder searchRequest){  this.searchRequest=searchRequest.request();  return this;}  }
class C{  public Iterator<E> iterator(){  return m.navigableKeySet().iterator();}  }
class C{  public static String toString(Reader input) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw);  return sw.toString();}  }
class C{  public static byte[] parseAsHexOrBase58(String data){  try {    return Hex.decode(data);  } catch (  Exception e) {    try {      return Base58.decodeChecked(data);    } catch (    AddressFormatException e1) {      return null;    }  }}  }
class C{  @action(name="end_conversation",args={@arg(name=GamaMessageType.MESSAGE_STR,type=IType.MESSAGE,optional=false,doc=@doc("The message to be replied")),@arg(name=GamaMessage.CONTENTS,type=IType.LIST,optional=false,doc=@doc("The content of the replying message"))},doc=@doc("Reply a message with an 'end_conversation' peprformative message. This message marks the end of a conversation. In a 'no-protocol' conversation, it is the responsible of the modeler to explicitly send this message to mark the end of a conversation/interaction protocol.")) public Object primEndConversation(final IScope scope) throws GamaRuntimeException {  final IList originals=getMessageArg(scope);  if (originals == null || originals.size() == 0) {    throw GamaRuntimeException.error("No message to reply",scope);  }  return replyMessage(scope,originals,FIPAConstants.Performatives.END_CONVERSATION,getContentArg(scope));}  }
class C{  public void openSettingsScreen(){  Intent intent=new Intent();  intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);  Uri uri=Uri.parse("package:" + context.getPackageName());  intent.setData(uri);  context.startActivity(intent);}  }
class C{  public _BuildUpdate(final String[] flagStrings){  super(flagStrings);}  }
class C{  private String generateSelfLink(String entityId,String entityKind){  String factoryLink=map.get(entityKind);  if (factoryLink == null) {    throw new IllegalArgumentException("Cannot generate selflink for entityKind: " + entityKind);  }  StringBuilder builder=new StringBuilder();  builder.append(factoryLink).append("/").append(entityId);  return builder.toString();}  }
class C{  public BinaryRelQueryExp(int op,ValueExp v1,ValueExp v2){  relOp=op;  exp1=v1;  exp2=v2;}  }
class C{  public sun.net.ftp.FtpClient endSecureSession() throws sun.net.ftp.FtpProtocolException, IOException {  if (!useCrypto) {    return this;  }  issueCommandCheck("CCC");  issueCommandCheck("PROT C");  useCrypto=false;  server=oldSocket;  oldSocket=null;  try {    out=new PrintStream(new BufferedOutputStream(server.getOutputStream()),true,encoding);  } catch (  UnsupportedEncodingException e) {    throw new InternalError(encoding + "encoding not found",e);  }  in=new BufferedInputStream(server.getInputStream());  return this;}  }
class C{  public void addLane(){  Lane lane=new Lane(this);  lanes.add(lane);  getAllInputs().forEach(null);  altSpace.getChildren().add(lane);  initiateConnectionChanges();}  }
class C{  private short blockPosToShort(BlockPos pos){  short serialized=(short)setNibble(0,pos.getX() & XZ_MASK,0,NUM_XZ_BITS);  serialized=(short)setNibble(serialized,pos.getY() & Y_SHORT_MASK,1,NUM_SHORT_Y_BITS);  serialized=(short)setNibble(serialized,pos.getZ() & XZ_MASK,3,NUM_XZ_BITS);  return serialized;}  }
class C{  public ReadRequest(ContentFormat format,int objectId){  this(format,new LwM2mPath(objectId));}  }
class C{  public void changeDefaultNames(String type){  String[] convert=CONVERT_TYPES.split(",");  String[] types=TYPES.split(",");  if (convert.length != types.length) {    log.error("Properties file doesn't have equal length conversion strings, carTypeNames {}, carTypeConvert {}",types.length,convert.length);    return;  }  if (type.equals(Setup.DESCRIPTIVE)) {    for (int i=0; i < convert.length; i++) {      replaceName(convert[i],types[i]);    }    String[] aarTypes=ARR_TYPES.split(",");    for (int i=0; i < aarTypes.length; i++) {      list.remove(aarTypes[i]);    }    for (int i=0; i < types.length; i++) {      if (!list.contains(types[i])) {        list.add(types[i]);      }    }  } else {    for (int i=0; i < convert.length; i++) {      replaceName(types[i],convert[i]);    }    for (int i=0; i < types.length; i++) {      list.remove(types[i]);    }    types=ARR_TYPES.split(",");    for (int i=0; i < types.length; i++) {      if (!list.contains(types[i])) {        list.add(types[i]);      }    }  }}  }
class C{  private AttrWait(final String val) throws BOSHException {  super(val);  checkMinValue(1);}  }
class C{  synchronized void remove(WebThread t){  running.remove(t);}  }
class C{  private static String toDatabaseString(final OperandSize size){switch (size) {case BYTE:    return "b1";case WORD:  return "b2";case DWORD:return "b4";case QWORD:return "b8";case OWORD:return "b16";case ADDRESS:return "b4";default :throw new IllegalArgumentException(String.format("Error: Unknown operand size %s",size));}}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemwithnewvalue.class,args);}  }
class C{  protected boolean isAllWhiteSpace(CharSequence sb){  return x.String.isWhitespace(sb.toString());}  }
class C{  protected <T extends DataObject>void checkDuplicateAltId(Class<T> type,String fieldName,String value,String entityName,String errorFriendlyFieldName){  List<T> objectList=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,type,AlternateIdConstraint.Factory.getConstraint(type,fieldName,value));  if (!objectList.isEmpty()) {    if (errorFriendlyFieldName == null) {      throw APIException.badRequests.duplicateEntityWithField(entityName,fieldName);    } else {      throw APIException.badRequests.duplicateEntityWithField(entityName,errorFriendlyFieldName);    }  }}  }
class C{  public Object readFromXML(Object o,String name,Element child) throws Exception {  Object result;  Hashtable<String,PropertyDescriptor> descriptors;  PropertyDescriptor descriptor;  String methodName;  Method method;  Object[] methodArgs;  Object tmpResult;  Class<?> paramClass;  result=o;  descriptors=getDescriptors(result);  methodName=child.getAttribute(ATT_NAME);  if (m_Properties.isIgnored(getPath(child))) {    return result;  }  if (m_Properties.isIgnored(result,getPath(child))) {    return result;  }  if (!m_Properties.isAllowed(result,methodName)) {    return result;  }  descriptor=descriptors.get(methodName);  if (descriptor == null) {    if (!m_CustomMethods.read().contains(methodName) && !SUPPRESS_PROPERTY_WARNINGS.contains(name + "." + methodName)) {      System.out.println("WARNING: unknown property '" + name + "."+ methodName+ "'!");    }    return result;  }  method=descriptor.getWriteMethod();  methodArgs=new Object[1];  tmpResult=invokeReadFromXML(child);  paramClass=method.getParameterTypes()[0];  if (paramClass.isArray()) {    if (Array.getLength(tmpResult) == 0) {      return result;    }    methodArgs[0]=tmpResult;  } else {    methodArgs[0]=tmpResult;  }  try {    method.invoke(result,methodArgs);  } catch (  Exception ex) {    System.err.println("Warning: error invoking method: " + methodName + " ("+ ex.getCause().getMessage()+ ")");  }  return result;}  }
class C{  public String writeEntry(Object entity,String contextUrl) throws ODataRenderException {  this.contextURL=checkNotNull(contextUrl);  try {    return writeJson(entity,null);  } catch (  IOException|IllegalAccessException|NoSuchFieldException|ODataEdmException|ODataRenderException e) {    LOG.error("Not possible to marshall single entity stream JSON");    throw new ODataRenderException("Not possible to marshall single entity stream JSON: ",e);  }}  }
class C{  public boolean isUserNameAlreadyTaken(String userName,String id){  return resourceDao.isUniqueAttributeAlreadyTaken(userName,id,UserEntity_.userName,UserEntity.class);}  }
class C{  @Override public final void onScroll(final AbsListView absListView,final int firstVisibleItem,final int visibleItemCount,final int totalItemCount){  if (!mAttached || mOuterScroller == null || mBlockMeasure) {    return;  }  if (mIndex == mOuterScroller.getCurrentInnerScrollerIndex()) {    triggerOuterScroll();    recordScrollPosition(firstVisibleItem);  }}  }
class C{  @Override protected void preInsert(MkMaxEntry entry){  KNNHeap knns_o=DBIDUtil.newHeap(getKmax());  preInsert(entry,getRootEntry(),knns_o);}  }
class C{  public void putComputed(int i,boolean b){  if (b)   masks[i]|=COMPUTED_MASK; else   masks[i]&=~COMPUTED_MASK;}  }
class C{  private void initializeLiveAttributes(){  points=createLiveAnimatedPoints(null,SVG_POINTS_ATTRIBUTE,"");}  }
class C{  public boolean isUsedInDialog(){  return usedInDialog;}  }
class C{  private void statInit(){  labelValue.setText(Msg.getMsg(Env.getCtx(),"Value"));  fieldValue.setBackground(AdempierePLAF.getInfoBackground());  fieldValue.addActionListener(this);  labelName.setText(Msg.getMsg(Env.getCtx(),"Name"));  fieldName.setBackground(AdempierePLAF.getInfoBackground());  fieldName.addActionListener(this);  fBPartner_ID=new VLookup("C_BPartner_ID",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(I_A_Asset.Table_Name,I_A_Asset.COLUMNNAME_C_BPartner_ID),DisplayType.Search));  lBPartner_ID.setLabelFor(fBPartner_ID);  fBPartner_ID.setBackground(AdempierePLAF.getInfoBackground());  fBPartner_ID.addActionListener(this);  fProduct_ID=new VLookup("M_Product_ID",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(I_A_Asset.Table_Name,I_A_Asset.COLUMNNAME_M_Product_ID),DisplayType.Search));  lProduct_ID.setLabelFor(fProduct_ID);  fProduct_ID.setBackground(AdempierePLAF.getInfoBackground());  fProduct_ID.addActionListener(this);  p_criteriaGrid.add(labelValue,new ALayoutConstraint(0,0));  p_criteriaGrid.add(fieldValue,null);  p_criteriaGrid.add(lBPartner_ID,null);  p_criteriaGrid.add(fBPartner_ID,null);  p_criteriaGrid.add(labelName,new ALayoutConstraint(1,0));  p_criteriaGrid.add(fieldName,null);  p_criteriaGrid.add(lProduct_ID,null);  p_criteriaGrid.add(fProduct_ID,null);}  }
class C{  public Map<String,Review> listReviews() throws GitClientException {  syncCommentsAndReviews();  Map<String,Review> reviews=new LinkedHashMap<>();  Git git=new Git(repo);  try {    ListNotesCommand cmd=git.notesList();    cmd.setNotesRef(REVIEWS_REF);    List<Note> notes=cmd.call();    for (    Note note : notes) {      String rawNoteDataStr=noteToString(repo,note);      Review latest=extractLatestReviewFromNotes(rawNoteDataStr);      if (latest != null) {        reviews.put(note.getName(),latest);      }    }  } catch (  Exception e) {    throw new GitClientException(e);  } finally {    git.close();  }  return reviews;}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  return 1;}  }
class C{  private static final String decode(Set<String> src){  if (src == null || src.isEmpty())   return "";  StringBuilder buffer=new StringBuilder();  for (  String str : src) {    buffer.append(str).append(';');  }  if (buffer.length() > 0) {    buffer.setLength(buffer.length() - 1);  }  return buffer.toString();}  }
class C{  public static void forceShutdown(String name){  Bot instance=instances.remove(name);  if (instance != null) {    instancesQueue.remove(name);    instance.log(instance,"Forced shutdown",Level.WARNING);    instance.shutdown();  }  Utils.sleep(1000);  DatabaseMemory.forceShutdown(name);}  }
class C{  private Utils(){  throw new IllegalArgumentException("No instances");}  }
class C{  protected static void remoteDefineEntry(String regionName,String entryName,Scope scope) throws CacheException {  remoteDefineEntry(regionName,entryName,scope,true);}  }
class C{  public KernelRLS(KernelTrick k,double errorTolerance){  this.k=k;  setErrorTolerance(errorTolerance);}  }
class C{  public void beginArray() throws IOException {  expect(JsonToken.BEGIN_ARRAY);}  }
class C{  protected Node newNode(){  return new SVGOMFETurbulenceElement();}  }
class C{  @Override protected ChangeListener createChangeListener(JSlider slider){  return new ChangeHandler();}  }
class C{  public Vector2 round(){  x=Math.round(x);  z=Math.round(z);  return this;}  }
class C{  private static boolean isNalStartCode(byte[] data,int index){  if (data.length - index <= NAL_START_CODE.length) {    return false;  }  for (int j=0; j < NAL_START_CODE.length; j++) {    if (data[index + j] != NAL_START_CODE[j]) {      return false;    }  }  return true;}  }
class C{  public static String fromDoc2String(Document doc) throws Exception {  KXmlSerializer serializer=new KXmlSerializer();  ByteArrayOutputStream bos=new ByteArrayOutputStream();  DataOutputStream dos=new DataOutputStream(bos);  try {    serializer.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output",true);    serializer.setOutput(dos,XformConstants.DEFAULT_CHARACTER_ENCODING);    doc.write(serializer);    serializer.flush();  } catch (  Exception e) {    e.printStackTrace();    return null;  }  return new String(bos.toByteArray(),XformConstants.DEFAULT_CHARACTER_ENCODING);}  }
class C{  static String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public static double readDouble(byte[] array,int offset){  return Double.longBitsToDouble(readLong(array,offset));}  }
class C{  @PostConstruct public void init(){  buildComponent();  buildLayout();  restorePreviousState();}  }
class C{  void showHelp(){  if (help == null) {    help=showHelp(frame,Messages.getString("CommonMenuBar.helpFilePath"));  }  help.setVisible(true);}  }
class C{  private void startMBeansDescriptors(){  pw.println("<HTML>");  pw.println("<HEAD>");  pw.println("<TITLE>GemFire MBeans Interface</TITLE>");  pw.println("</HEAD>");  pw.println("");  pw.println("<h1>GemFire Management Beans</h1>");  pw.println("");  pw.println("<P>This document describes the attributes, operations,");  pw.println("and notifications of the GemFire Administration");  pw.println("Management Beans (MBeans).</P>");  pw.println("");}  }
class C{  public void attrModified(Attr node,String oldv,String newv){  if (!changing) {    valid=false;  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  private Hop removeUnnecessaryBinaryOperation(Hop parent,Hop hi,int pos) throws HopsException {  if (hi instanceof BinaryOp) {    BinaryOp bop=(BinaryOp)hi;    Hop left=bop.getInput().get(0);    Hop right=bop.getInput().get(1);    if (left.getDataType() == DataType.MATRIX && right instanceof LiteralOp && ((LiteralOp)right).getDoubleValue() == 1.0) {      if (bop.getOp() == OpOp2.DIV || bop.getOp() == OpOp2.MULT) {        HopRewriteUtils.removeChildReference(parent,bop);        HopRewriteUtils.addChildReference(parent,left,pos);        hi=left;        LOG.debug("Applied removeUnnecessaryBinaryOperation1 (line " + bop.getBeginLine() + ")");      }    } else     if (left.getDataType() == DataType.MATRIX && right instanceof LiteralOp && ((LiteralOp)right).getDoubleValue() == 0.0) {      if (bop.getOp() == OpOp2.MINUS) {        HopRewriteUtils.removeChildReference(parent,bop);        HopRewriteUtils.addChildReference(parent,left,pos);        hi=left;        LOG.debug("Applied removeUnnecessaryBinaryOperation2 (line " + bop.getBeginLine() + ")");      }    } else     if (right.getDataType() == DataType.MATRIX && left instanceof LiteralOp && ((LiteralOp)left).getDoubleValue() == 1.0) {      if (bop.getOp() == OpOp2.MULT) {        HopRewriteUtils.removeChildReference(parent,bop);        HopRewriteUtils.addChildReference(parent,right,pos);        hi=right;        LOG.debug("Applied removeUnnecessaryBinaryOperation3 (line " + bop.getBeginLine() + ")");      }    } else     if (right.getDataType() == DataType.MATRIX && left instanceof LiteralOp && ((LiteralOp)left).getDoubleValue() == -1.0) {      if (bop.getOp() == OpOp2.MULT) {        bop.setOp(OpOp2.MINUS);        HopRewriteUtils.removeChildReferenceByPos(bop,left,0);        HopRewriteUtils.addChildReference(bop,new LiteralOp(0),0);        hi=bop;        LOG.debug("Applied removeUnnecessaryBinaryOperation4 (line " + bop.getBeginLine() + ")");      }    } else     if (left.getDataType() == DataType.MATRIX && right instanceof LiteralOp && ((LiteralOp)right).getDoubleValue() == -1.0) {      if (bop.getOp() == OpOp2.MULT) {        bop.setOp(OpOp2.MINUS);        HopRewriteUtils.removeChildReferenceByPos(bop,right,1);        HopRewriteUtils.addChildReference(bop,new LiteralOp(0),0);        hi=bop;        LOG.debug("Applied removeUnnecessaryBinaryOperation5 (line " + bop.getBeginLine() + ")");      }    }  }  return hi;}  }
class C{  public boolean isShouldLocalize(){  return firstRow.isShouldLocalize();}  }
class C{  public void removeContact(Address address) throws ImException {  if (address == null) {    throw new NullPointerException();  }  Contact c=getContact(address);  if (c != null) {    removeContact(c);  }}  }
class C{  public void sendBack(final WorkflowAnnotation anno){  if (anno == null) {    throw new IllegalArgumentException("anno must not be null!");  }synchronized (lock) {    int newIndexDraw=annotationsDrawOrder.indexOf(anno) - 1;    int newIndexEvent=annotationsEventOrder.indexOf(anno) + 1;    if (annotationsDrawOrder.remove(anno)) {      if (newIndexDraw < 0) {        annotationsDrawOrder.add(0,anno);      } else {        annotationsDrawOrder.add(newIndexDraw,anno);      }    }    if (annotationsEventOrder.remove(anno)) {      if (newIndexEvent >= annotationsEventOrder.size()) {        annotationsEventOrder.add(anno);      } else {        annotationsEventOrder.add(newIndexEvent,anno);      }    }  }}  }
class C{  protected synchronized void addProjectionListener(ProjectionListener l){  projectionSupport.add(l);}  }
class C{  @Override public void transactionCommited(final long commitTime){  for (  BigdataGraphListener listener : listeners) {    listener.transactionCommited(commitTime);  }}  }
class C{  public Pc toNearPc(int line){  int n=tableLength();  int nearPc=0;  int distance=0;  if (n > 0) {    distance=lineNumber(0) - line;    nearPc=startPc(0);  }  for (int i=1; i < n; ++i) {    int d=lineNumber(i) - line;    if ((d < 0 && d > distance) || (d >= 0 && (d < distance || distance < 0))) {      distance=d;      nearPc=startPc(i);    }  }  Pc res=new Pc();  res.index=nearPc;  res.line=line + distance;  return res;}  }
class C{  List<BytesRef> expandTermsIfRewrite(BytesRef[] terms,Map<BytesRef,Spans> strictPhrasesTermToSpans){  if (willRewrite()) {    Set<BytesRef> allTermSet=new LinkedHashSet<>(terms.length + strictPhrasesTermToSpans.size());    Collections.addAll(allTermSet,terms);    if (allTermSet.addAll(strictPhrasesTermToSpans.keySet())) {      List<BytesRef> sourceTerms=Arrays.asList(allTermSet.toArray(new BytesRef[allTermSet.size()]));      sourceTerms.sort(Comparator.naturalOrder());      return sourceTerms;    }  }  return Arrays.asList(terms);}  }
class C{  public GCActivity(String name,double startSec,double durationSec){  this(name,startSec,durationSec,true,100.0);}  }
class C{  protected void buscarExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  ClientInvocation cli=getInvocationStack(request).getLastClientInvocation();  cli.addParameters(((BusquedaDocumentosVitalesForm)form).getMap());  ActionErrors errores=form.validate(mapping,request);  if ((errores == null) || errores.isEmpty()) {    saveCurrentInvocation(KeysClientsInvocations.DOCUMENTOS_VITALES_LISTADO_BUSQUEDA,request);    PageInfo pageInfo=new PageInfo(request,"identidad");    pageInfo.setDefautMaxNumItems();    BusquedaDocumentosVitalesForm documentosForm=(BusquedaDocumentosVitalesForm)form;    documentosForm.setPageInfo(pageInfo);    try {      request.setAttribute(DocumentosVitalesConstants.DOCUMENTOS_VITALES_KEY,getGestionDocumentosVitalesBI(request).getDocumentosVitales(documentosForm.getBusquedaVO()));      setReturnActionFordward(request,mapping.findForward("listado"));    } catch (    TooManyResultsException e) {      obtenerErrores(request,true).add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_TOO_MANY_RESULTS,new Object[]{new Integer(e.getCount()),new Integer(e.getMaxNumResults())}));      goBackExecuteLogic(mapping,form,request,response);    }  } else {    obtenerErrores(request,true).add(errores);    goLastClientExecuteLogic(mapping,form,request,response);  }}  }
class C{  public void focusGained(FocusEvent e){}  }
class C{  private String slice(){  if (mark >= pos) {    return "";  }  return sign.substring(mark,pos);}  }
class C{  public long start(){  return start;}  }
class C{  public static void loadDnsCacheConfig(String propertiesFileName){  InputStream inputStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(propertiesFileName);  if (inputStream == null) {    inputStream=DnsCacheManipulator.class.getClassLoader().getResourceAsStream(propertiesFileName);  }  if (inputStream == null) {    throw new DnsCacheManipulatorException("Fail to find " + propertiesFileName + " on classpath!");  }  try {    Properties properties=new Properties();    properties.load(inputStream);    inputStream.close();    setDnsCache(properties);  } catch (  Exception e) {    final String message=String.format("Fail to loadDnsCacheConfig from %s, cause: %s",propertiesFileName,e.toString());    throw new DnsCacheManipulatorException(message,e);  }}  }
class C{  private void polygonize(){  if (polyList != null)   return;  polyList=new ArrayList();  if (graph == null)   return;  dangles=graph.deleteDangles();  cutEdges=graph.deleteCutEdges();  List edgeRingList=graph.getEdgeRings();  List validEdgeRingList=new ArrayList();  invalidRingLines=new ArrayList();  if (isCheckingRingsValid) {    findValidRings(edgeRingList,validEdgeRingList,invalidRingLines);  } else {    validEdgeRingList=edgeRingList;  }  findShellsAndHoles(validEdgeRingList);  assignHolesToShells(holeList,shellList);  Collections.sort(shellList,new EdgeRing.EnvelopeComparator());  boolean includeAll=true;  if (extractOnlyPolygonal) {    findDisjointShells(shellList);    includeAll=false;  }  polyList=extractPolygons(shellList,includeAll);}  }
class C{  @SuppressWarnings("ConstantConditions") private void clearCaches(){  for (int i=0; i < NODES_CNT; i++)   try {    grid(i).cache(PARTITIONED_CACHE_NAME).clear();  } catch (  IgniteException e) {    log.error("Cache clear failed.",e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:42.064 -0500",hash_original_method="EB9A16D491B02E1C854609CD55105FA5",hash_generated_method="9BDB328CC2AE86523BBEAC346BA93185") public ContentLengthInputStream(final SessionInputBuffer in,long contentLength){  super();  if (in == null) {    throw new IllegalArgumentException("Input stream may not be null");  }  if (contentLength < 0) {    throw new IllegalArgumentException("Content length may not be negative");  }  this.in=in;  this.contentLength=contentLength;}  }
class C{  public void registerPush(String id,boolean noFallback){  Hashtable h=new Hashtable();  h.put("googlePlay",id);  registerPush(h,noFallback);}  }
class C{  private void writeUsbMemory1(int value){  replyLen=NceMessage.REPLY_1;  waiting++;  byte[] bl=NceBinaryCommand.usbMemoryWrite1((byte)value);  NceMessage m=NceMessage.createBinaryMessage(tc,bl,NceMessage.REPLY_1);  tc.sendNceMessage(m,this);}  }
class C{  public static boolean isValidDisambigRankStrict(String san){  if (san.length() == 4) {    return PIECES.indexOf(san.charAt(0)) != -1 && RANKS.indexOf(san.charAt(1)) != -1 && FILES.indexOf(san.charAt(2)) != -1 && RANKS.indexOf(san.charAt(3)) != -1;  } else {    return false;  }}  }
class C{  @Override public String toString(){  return filename;}  }
class C{  BuyHouseChatAction(final int cost,final String questSlot){  super(questSlot);  this.cost=cost;}  }
class C{  public ObdDataPanel(){  initComponents();  tblPids.setPvModel(new ObdItemTableModel());  tblPids.getSelectionModel().addListSelectionListener(this);  tblPids.setDefaultRenderer(EcuDataPv.class,new ObdItemTableRenderer());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public HungarianAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  @Override public boolean process(ContentEvent event){  if (event.isLastEvent() || (instancesCount > 0 && instancesCount % this.sampleFrequency == 0)) {    if (model.implementsMicroClusterer()) {      Clustering clustering=model.getMicroClusteringResult();      ClusteringResultContentEvent resultEvent=new ClusteringResultContentEvent(clustering,event.isLastEvent());      this.outputStream.put(resultEvent);    }  }  updateStats(event);  return false;}  }
class C{  public void compile(OutputStream out) throws InterruptedException, IOException {  Environment env=toplevelEnv;synchronized (active) {    while (active.contains(getName())) {      active.wait();    }    active.addElement(getName());  }  try {    compileClass(env,out);  } catch (  ClassNotFound e) {    throw new CompilerError(e);  } finally {synchronized (active) {      active.removeElement(getName());      active.notifyAll();    }  }}  }
class C{  public static void dismissIncognitoNotification(){  Context context=ApplicationStatus.getApplicationContext();  NotificationManager nm=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);  nm.cancel(INCOGNITO_TABS_OPEN_TAG,INCOGNITO_TABS_OPEN_ID);}  }
class C{  private static void batch1(List<Source> sources,List<CompilationUnit> units,DependencyGraph<CompilationUnit> igraph,DependencyGraph<Source> dgraph,SymbolTable symbolTable,flex2.compiler.SubCompiler[] compilers,SourceList sourceList,SourcePath sourcePath,ResourceContainer resources,CompilerSwcContext swcContext,Configuration configuration){  int start=0, end=sources.size();  while (start < end) {    if (!preprocess(sources,compilers,start,end,symbolTable.getSuppressWarningsIncremental())) {      break;    }    if (tooManyErrors() || forcedToStop())     break;    if (!parse1(sources,units,igraph,dgraph,compilers,symbolTable,start,end)) {      break;    }    if (tooManyErrors() || forcedToStop())     break;    resolveInheritance(sources,igraph,dgraph,symbolTable,sourceList,sourcePath,resources,swcContext,start,end);    addGeneratedSources(sources,igraph,dgraph,resources,symbolTable,configuration,start,end);    start=end;    end=sources.size();    if (start < end) {      continue;    }    if (!sortInheritance(sources,units,igraph)) {      break;    }    if (!parse2(sources,compilers,symbolTable)) {      break;    }    if (tooManyErrors() || forcedToStop())     break;    if (!analyze(sources,compilers,symbolTable,1)) {      break;    }    if (tooManyErrors() || forcedToStop())     break;    resolveNamespace(sources,igraph,dgraph,symbolTable,sourceList,sourcePath,resources,swcContext,0,end);    addGeneratedSources(sources,igraph,dgraph,resources,symbolTable,configuration,0,end);    start=end;    end=sources.size();    if (start < end) {      continue;    }    if (!analyze(sources,compilers,symbolTable,2)) {      break;    }    if (tooManyErrors() || forcedToStop())     break;    resolveType(sources,units,igraph,dgraph,symbolTable,sourceList,sourcePath,resources,swcContext);    final CompilerConfiguration config=(configuration != null) ? configuration.getCompilerConfiguration() : null;    if (config != null && config.strict()) {      resolveImportStatements(sources,units,sourcePath,swcContext);    }    if (config != null && (config.strict() || config.warnings())) {      resolveExpression(sources,units,igraph,dgraph,symbolTable,sourceList,sourcePath,resources,swcContext,configuration);    }    start=end;    end=sources.size();    if (start < end) {      continue;    }    if (!analyze(sources,compilers,symbolTable,3)) {      break;    }    if (tooManyErrors() || forcedToStop())     break;    if (!analyze(sources,compilers,symbolTable,4)) {      break;    }    if (tooManyErrors() || forcedToStop())     break;    if (!generate(sources,units,compilers,symbolTable)) {      break;    }    if (tooManyErrors() || forcedToStop())     break;    markDone(sources,units);    if (!postprocess(sources,units,compilers,symbolTable)) {      break;    }    if (tooManyErrors() || forcedToStop())     break;    resolveExpression(sources,units,igraph,dgraph,symbolTable,sourceList,sourcePath,resources,swcContext,configuration);    addGeneratedSources(sources,igraph,dgraph,resources,symbolTable,configuration,0,end);    start=end;    end=sources.size();  }  adjustQNames(units,igraph,symbolTable);}  }
class C{  public static Size pickBufferDimensions(Size[] supportedPreviewSizes,double bestPreviewAspectRatio,Context context){  boolean swapDimens=(CameraUtil.getDisplayRotation() % 180) == 90;  if (CaptureModuleUtil.getDeviceNaturalOrientation(context) == Configuration.ORIENTATION_PORTRAIT) {    swapDimens=!swapDimens;  }  double bestAspect=bestPreviewAspectRatio;  if (swapDimens) {    bestAspect=1 / bestAspect;  }  Size pick=CaptureModuleUtil.getOptimalPreviewSize(supportedPreviewSizes,bestPreviewAspectRatio,null);  Log.d(TAG,"Picked buffer size: " + pick.toString());  return pick;}  }
class C{  public OutbindParameter(String systemId,String password){  this(systemId,password,InterfaceVersion.IF_34);}  }
class C{  public VirtualFile resolve(String relative){  return null;}  }
class C{  public static Change translateAttributesToOtherUnits(final Unit unitGivingAttributes,final Collection<Unit> unitsThatWillGetAttributes,final Territory t){  final CompositeChange changes=new CompositeChange();  final TripleAUnit taUnit=(TripleAUnit)unitGivingAttributes;  final int combatDamage=taUnit.getHits();  final IntegerMap<Unit> hits=new IntegerMap<>();  if (combatDamage > 0) {    for (    final Unit u : unitsThatWillGetAttributes) {      hits.put(u,combatDamage);    }  }  if (hits.size() > 0) {    changes.add(ChangeFactory.unitsHit(hits));  }  final int unitDamage=taUnit.getUnitDamage();  final IntegerMap<Unit> damageMap=new IntegerMap<>();  if (unitDamage > 0) {    for (    final Unit u : unitsThatWillGetAttributes) {      final TripleAUnit taNew=(TripleAUnit)u;      final int maxDamage=taNew.getHowMuchDamageCanThisUnitTakeTotal(u,t);      final int transferDamage=Math.max(0,Math.min(unitDamage,maxDamage));      if (transferDamage <= 0) {        continue;      }      damageMap.put(u,transferDamage);    }  }  changes.add(ChangeFactory.bombingUnitDamage(damageMap));  return changes;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.CHECK__CONDITION:    setCondition((Expression)null);  return;case SexecPackage.CHECK__REFS:getRefs().clear();return;}super.eUnset(featureID);}  }
class C{  private static List<String> splitCamelCase(String className){  String remaining=className;  List<String> result=new ArrayList<String>();  while (!remaining.isEmpty()) {    boolean found=false;    for (int i=1; i < remaining.length(); i++) {      if (Character.isUpperCase(remaining.charAt(i))) {        result.add(remaining.substring(0,i));        remaining=remaining.substring(i);        found=true;        break;      }    }    if (!found) {      result.add(remaining);      remaining="";    }  }  return result;}  }
class C{  public static void clearAuthCache(){  try {    Class<?> authCacheValueClass=Class.forName("sun.net.www.protocol.http.AuthCacheValue");    Class<?> authCacheClass=Class.forName("sun.net.www.protocol.http.AuthCache");    Class<?> authCacheImplClass=Class.forName("sun.net.www.protocol.http.AuthCacheImpl");    Constructor<?> authCacheImplConstructor=authCacheImplClass.getConstructor();    Method setAuthCacheMethod=authCacheValueClass.getMethod("setAuthCache",authCacheClass);    setAuthCacheMethod.invoke(null,authCacheImplConstructor.newInstance());  } catch (  Throwable t) {    LogService.getRoot().log(Level.WARNING,"Could not clear auth cache!",t);  }}  }
class C{  public static ComponentUI createUI(JComponent c){  return s_buttonUI;}  }
class C{  public void addAdditionalRole(AdditionalRole role){  addRepeatingExtension(role);}  }
class C{  public void startHttpServer() throws IOException {  httpServer=com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(0),0);  HttpContext ctx=httpServer.createContext("/testAvailable/",new MyHandler());  executorService=Executors.newCachedThreadPool();  httpServer.setExecutor(executorService);  httpServer.start();}  }
class C{  protected final TemplateModel wrap(Object obj) throws TemplateModelException {  return objectWrapper.wrap(obj);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:35.657 -0400",hash_original_method="FBCE5EA5B6E84A8028EDCE669B205421",hash_generated_method="D8A3E0320ED2EF9A87E80228539B8CEE") public ConnectionClosedException(final String message){  super(message);}  }
class C{  public void addProperties(Map<String,String> properties){  for (  Map.Entry<String,String> entry : properties.entrySet()) {    addProperty(entry.getKey(),entry.getValue());  }}  }
class C{  protected synchronized void addToFirstBuffer(Instance inst){  if (m_stopRequested.get()) {    return;  }  InstanceHolder newH=new InstanceHolder();  newH.m_instance=inst;  copyStringAttVals(newH,m_stringAttIndexesOne);  if (!m_stopRequested.get()) {    m_firstBuffer.add(newH);  } else {    return;  }  if (m_firstBuffer.size() > 100 && !m_secondFinished) {    try {      m_firstIsWaiting=true;      wait();    } catch (    InterruptedException ex) {    }  }}  }
class C{  @Override public synchronized void print(boolean x){  print(new Boolean(x).toString());}  }
class C{  public ExtensionInfo(){}  }
class C{  protected void correlatedPointRemovedCallback(int removedCorrelatedTimeStep){  boolean sourceMatches=false;  if (Math.abs(sourceObs - source[removedCorrelatedTimeStep]) <= kernelWidthSourceInUse) {    countPastSource--;    sourceMatches=true;  }  if (Math.abs(destNextObs - destNext[removedCorrelatedTimeStep]) <= kernelWidthsInUse[0]) {    countNextPast--;    if (sourceMatches) {      countNextPastSource--;    }  }}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  @Override public void onUIRefreshBegin(PtrFrameLayout frame){  mDrawable.setAlpha(255);  mDrawable.start();}  }
class C{  protected void addComponentToSideMenu(Container menu,Component cmp){  addComponentToSideMenuImpl(menu,cmp);}  }
class C{  public Optional<Notification> store(@Nonnull final String username,@Nonnull final Notification notification){  Objects.requireNonNull(notification);  final URI uri=getTarget(username);  LOGGER.debug("POST {}",uri);  try (Timer.Context context=storeTimer.time()){    return Optional.of(client.target(uri).request(APPLICATION_JSON).post(Entity.json(notification),Notification.class));  } catch (  Exception e) {    LOGGER.warn("Unable to store notification for {}",username,e);  }  return Optional.empty();}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public String charSetTipText(){  return "The character set to use when reading text files (eg UTF-8) - leave" + " blank to use the default character set.";}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.218 -0500",hash_original_method="3EB47618DCA126249F6622B558B44C8E",hash_generated_method="54E371C2E975F27786635AD9178F833E") private CommonDataKinds(){}  }
class C{  public void unexpectedAttribute(String systemID,int lineNr,String elementName,String attributeName) throws XMLValidationException {  XMLUtil.errorUnexpectedAttribute(systemID,lineNr,elementName,attributeName);}  }
class C{  public boolean isSetId(){  return EncodingUtils.testBit(__isset_bitfield,__ID_ISSET_ID);}  }
class C{  public int hashCode(){  int hash=0;  for (  AnnotationMember element : elements) {    hash+=element.hashCode();  }  return hash;}  }
class C{  private void initializeReceiverStats(){  createRequestRate=new StatsRate(StatsKey.CREAT_REQUESTS,StatType.INT_TYPE,monitor);  updateRequestRate=new StatsRate(StatsKey.UPDATE_REQUESTS,StatType.INT_TYPE,monitor);  destroyRequestRate=new StatsRate(StatsKey.DESTROY_REQUESTS,StatType.INT_TYPE,monitor);  eventsReceivedRate=new StatsRate(StatsKey.EVENTS_RECEIVED,StatType.INT_TYPE,monitor);}  }
class C{  public void beforeIterationEvaluation(CompiledValue executer,Object currentObject){}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    checkNotClosed();    int ch=readChar();    if (lastWasCR && ch == '\n') {      ch=readChar();    }    lastWasCR=false;    return ch;  }}  }
class C{  @Override public int compare(String o1,String o2){  String s1;  String s2;  if ((o1 == null) && (o2 == null)) {    return 0;  } else   if (o1 == null) {    return -1;  } else   if (o2 == null) {    return +1;  }  s1=o1;  s2=o2;  return s1.compareTo(s2);}  }
class C{  @Override public void processStarts() throws OperatorException {  super.processStarts();  for (  ExecutionUnit unit : subprocesses) {    unit.processStarts();  }}  }
class C{  protected void processMapsId(OneToOneMapping oneToOneMapping){  EmbeddedIdAccessor embeddedIdAccessor=getDescriptor().getEmbeddedIdAccessor();  if (embeddedIdAccessor == null) {    MappingAccessor idAccessor=getDescriptor().getMappingAccessor(getDescriptor().getIdAttributeName());    DatabaseMapping idMapping=idAccessor.getMapping();    DatabaseField foreignKeyField=oneToOneMapping.getForeignKeyFields().elementAt(0);    updatePrimaryKeyField(idAccessor,foreignKeyField);    ((AbstractDirectMapping)idMapping).setField(foreignKeyField);    idMapping.setIsReadOnly(true);    oneToOneMapping.setDerivedIdMapping(idMapping);  } else {    if (embeddedIdAccessor.getReferenceClassName().equals(getReferenceDescriptor().getPKClassName())) {      processMapsIdFields(oneToOneMapping,embeddedIdAccessor,embeddedIdAccessor);    } else {      if (m_mapsId.equals("")) {        m_mapsId=getAttributeName();      }      oneToOneMapping.setMapsIdValue(m_mapsId);      MappingAccessor mappingAccessor=embeddedIdAccessor.getReferenceDescriptor().getMappingAccessor(m_mapsId);      if (mappingAccessor == null) {        throw ValidationException.invalidMappedByIdValue(m_mapsId,getAnnotatedElementName(),embeddedIdAccessor.getReferenceClass());      } else {        processMapsIdFields(oneToOneMapping,embeddedIdAccessor,mappingAccessor);      }    }    oneToOneMapping.setDerivedIdMapping(embeddedIdAccessor.getMapping());  }}  }
class C{  public boolean isAccessibleFrom(Class<?> lookupClass){  return VerifyAccess.isMemberAccessible(this.getDeclaringClass(),this.getDeclaringClass(),flags,lookupClass,ALL_ACCESS | MethodHandles.Lookup.PACKAGE);}  }
class C{  public static ContentValues fromChannel(Channel channel){  ContentValues record=new ContentValues();  record.put(PremoContract.ChannelEntry.GENERATED_ID,channel.getGeneratedId());  record.put(PremoContract.ChannelEntry.TITLE,channel.getTitle());  record.put(PremoContract.ChannelEntry.DESCRIPTION,channel.getDescription());  record.put(PremoContract.ChannelEntry.AUTHOR,channel.getAuthor());  record.put(PremoContract.ChannelEntry.SITE_URL,channel.getSiteUrl());  record.put(PremoContract.ChannelEntry.FEED_URL,channel.getFeedUrl());  record.put(PremoContract.ChannelEntry.ARTWORK_URL,channel.getArtworkUrl());  record.put(PremoContract.ChannelEntry.IS_SUBSCRIBED,channel.isSubscribed() ? 1 : 0);  record.put(PremoContract.ChannelEntry.ETAG,channel.getETag());  record.put(PremoContract.ChannelEntry.LAST_MODIFIED,channel.getLastModified());  record.put(PremoContract.ChannelEntry.MD5,channel.getDataMd5());  record.put(PremoContract.ChannelEntry.LAST_SYNC_TIME,channel.getLastSyncTime());  record.put(PremoContract.ChannelEntry.LAST_SYNC_SUCCESSFUL,channel.isLastSyncSuccessful() ? 1 : 0);  return record;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof CompassPlot)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  CompassPlot that=(CompassPlot)obj;  if (this.labelType != that.labelType) {    return false;  }  if (!ObjectUtilities.equal(this.labelFont,that.labelFont)) {    return false;  }  if (this.drawBorder != that.drawBorder) {    return false;  }  if (!PaintUtilities.equal(this.roseHighlightPaint,that.roseHighlightPaint)) {    return false;  }  if (!PaintUtilities.equal(this.rosePaint,that.rosePaint)) {    return false;  }  if (!PaintUtilities.equal(this.roseCenterPaint,that.roseCenterPaint)) {    return false;  }  if (!ObjectUtilities.equal(this.compassFont,that.compassFont)) {    return false;  }  if (!Arrays.equals(this.seriesNeedle,that.seriesNeedle)) {    return false;  }  if (getRevolutionDistance() != that.getRevolutionDistance()) {    return false;  }  return true;}  }
class C{  protected boolean isQuiet(){  return false;}  }
class C{  public void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  super.callChildVisitors(visitor,callAttrs);}  }
class C{  @Override protected String doExport(List<EvaluationStatistics> stats){  m_Statistics.clear();  m_Statistics.addAll(stats);  return null;}  }
class C{  public IllegalArgumentException(){}  }
class C{  public void saveParam() throws Exception {  this.getJSplitPane().saveParam();}  }
class C{  public int remainingCapacity(){  return maxSize - size();}  }
class C{  long timeout(){  return timeout;}  }
class C{  public void postRotate(float deltaAngle){  postRotate(deltaAngle,mCropRect.centerX(),mCropRect.centerY());}  }
class C{  public NodeSet(NodeIterator ni){  this(32);  addNodes(ni);}  }
class C{  public static TestResultServiceState populate(){  TestResultServiceState state=new TestResultServiceState();  state.userName=System.getProperty("user.name");  state.arch=System.getProperty("os.arch");  state.os=System.getProperty("os.name");  state.osVersion=System.getProperty("os.version");  state.runtimeVersion=System.getProperty("java.version");  state.environment=new HashMap<>(System.getenv());  OperatingSystemMXBean os=ManagementFactory.getOperatingSystemMXBean();  state.processorCount=os.getAvailableProcessors();  state.loadAverage=os.getSystemLoadAverage();  return state;}  }
class C{  public synchronized boolean nextIsHatched(){  if (orderList.isEmpty())   return false;  T o=orderList.getFirst();  return hatchMap.get(o) == null;}  }
class C{  public Builder addData(String key,String value){  data.put(key,value);  return this;}  }
class C{  public static void PP_Order_BOMLine(MPPOrderBOMLine obl){  String trxName=obl.get_TrxName();  Properties ctx=obl.getCtx();  String typeMRP=MPPMRP.TYPEMRP_Demand;  BigDecimal qty=obl.getQtyRequired().subtract(obl.getQtyDelivered());  if (obl.isCoProduct() || obl.isByProduct()) {    typeMRP=MPPMRP.TYPEMRP_Supply;    qty=qty.negate();  }  MPPMRP mrp=getQuery(obl,null,ORDERTYPE_ManufacturingOrder).firstOnly();  if (mrp == null) {    mrp=new MPPMRP(ctx,0,trxName);    mrp.setPP_Order_BOMLine_ID(obl.getPP_Order_BOMLine_ID());  }  MPPOrder o=obl.getParent();  mrp.setAD_Org_ID(obl.getAD_Org_ID());  mrp.setTypeMRP(typeMRP);  mrp.setPP_Order(o);  mrp.setM_Warehouse_ID(obl.getM_Warehouse_ID());  mrp.setM_Product_ID(obl.getM_Product_ID());  mrp.setQty(qty);  mrp.saveEx();}  }
class C{  public void associate(Node node){  if (this.node == null) {    this.node=node;  }}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  Signature sig;  try {    sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(Base64.decode(signature))) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");  }  return false;}  }
class C{  public void paintME(Graphics g){  Graphics g2=g;  if (m_osi == null && m_fastScroll.isSelected()) {    createOSI();  }  if (m_osi != null && m_fastScroll.isSelected()) {    g2=m_osi.getGraphics();  }  r=g.getClipBounds();  g.setColor(this.getBackground());  g.fillRect(r.x,r.y,r.width,r.height);  g.setColor(fontColor);  int xpos=0, ypos=0;  xpos=extpad;  ypos=extpad;  for (int j=m_selectedAttribs.length - 1; j >= 0; j--) {    if (ypos + cellSize < r.y) {      ypos+=cellSize + extpad;      continue;    } else     if (ypos > r.y + r.height) {      break;    } else {      for (int i=0; i < m_selectedAttribs.length; i++) {        if (xpos + cellSize < r.x) {          xpos+=cellSize + extpad;          continue;        } else         if (xpos > r.x + r.width) {          break;        } else         if (m_fastScroll.isSelected()) {          if (!m_plottedCells[i][j]) {            paintGraph(g2,i,j,xpos,ypos);            m_plottedCells[i][j]=true;          }        } else {          paintGraph(g2,i,j,xpos,ypos);        }        xpos+=cellSize + extpad;      }    }    xpos=extpad;    ypos+=cellSize + extpad;  }}  }
class C{  private Container mapDockerContainerToContainer(DockerContainer dockerContainer,Container container){  container.setContainerID(dockerContainer.getId().substring(0,12));  container.setContainerFullID(dockerContainer.getId());  container.setName(dockerContainer.getName().substring(1));  container.setVolumes(dockerContainer.getVolumes());  container.setContainerIP(dockerContainer.getNetworkSettings().getIPAddress());  return container;}  }
class C{  public void itemLogWriteEntry(final DBTransaction transaction,final RPObject item,final RPEntity player,final String event,final String param1,final String param2,final String param3,final String param4) throws SQLException {  int itemid=item.getInt(StendhalItemDAO.ATTR_ITEM_LOGID);  itemLogWriteEntry(transaction,itemid,player,event,param1,param2,param3,param4);}  }
class C{  public void deleteInsns(Set<SsaInsn> deletedInsns){  for (  SsaBasicBlock block : getBlocks()) {    ArrayList<SsaInsn> insns=block.getInsns();    for (int i=insns.size() - 1; i >= 0; i--) {      SsaInsn insn=insns.get(i);      if (deletedInsns.contains(insn)) {        onInsnRemoved(insn);        insns.remove(i);      }    }    int insnsSz=insns.size();    SsaInsn lastInsn=(insnsSz == 0) ? null : insns.get(insnsSz - 1);    if (block != getExitBlock() && (insnsSz == 0 || lastInsn.getOriginalRopInsn() == null || lastInsn.getOriginalRopInsn().getOpcode().getBranchingness() == Rop.BRANCH_NONE)) {      Insn gotoInsn=new PlainInsn(Rops.GOTO,SourcePosition.NO_INFO,null,RegisterSpecList.EMPTY);      insns.add(SsaInsn.makeFromRop(gotoInsn,block));      BitSet succs=block.getSuccessors();      for (int i=succs.nextSetBit(0); i >= 0; i=succs.nextSetBit(i + 1)) {        if (i != block.getPrimarySuccessorIndex()) {          block.removeSuccessor(i);        }      }    }  }}  }
class C{  public CacheRebalancingEvent(String cacheName,ClusterNode node,String msg,int type,int part,ClusterNode discoNode,int discoEvtType,long discoTs){  super(node,msg,type);  this.cacheName=cacheName;  this.part=part;  this.discoNode=discoNode;  this.discoEvtType=discoEvtType;  this.discoTs=discoTs;}  }
class C{  public Object clone(){  ExactDoubleQuantileFinder copy=(ExactDoubleQuantileFinder)super.clone();  if (this.buffer != null)   copy.buffer=copy.buffer.copy();  return copy;}  }
class C{  public void testCertPathBuilder13() throws NoSuchAlgorithmException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  for (int i=0; i < validValues.length; i++) {    CertPathBuilder cpb=CertPathBuilder.getInstance(validValues[i]);    assertEquals("Incorrect algorithm",cpb.getAlgorithm(),validValues[i]);    try {      cpb=CertPathBuilder.getInstance(validValues[i],defaultProviderName);      assertEquals("Incorrect algorithm",cpb.getAlgorithm(),validValues[i]);    } catch (    NoSuchProviderException e) {      fail("Unexpected NoSuchProviderException exeption " + e.getMessage());    }    try {      cpb=CertPathBuilder.getInstance(validValues[i],defaultProviderName);      assertEquals("Incorrect algorithm",cpb.getAlgorithm(),validValues[i]);    } catch (    NoSuchProviderException e) {      fail("Unexpected NoSuchProviderException " + e.getMessage());    }  }}  }
class C{  private Base64(){}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  void createFakesite() throws Exception {  createContactsAndHosts();  assertCommandAndResponse("domain_create_fakesite.xml","domain_create_response_fakesite.xml",DateTime.parse("2000-06-01T00:04:00Z"));  assertCommandAndResponse("domain_info_fakesite.xml","domain_info_response_fakesite_ok.xml",DateTime.parse("2000-06-06T00:00:00Z"));}  }
class C{  @Inline @Uninterruptible public static boolean attemptToLog(ObjectReference object){  Word oldValue;  do {    oldValue=VM.objectModel.prepareAvailableBits(object);    if (oldValue.and(LOGGING_MASK).EQ(LOGGED)) {      return false;    }  } while ((oldValue.and(LOGGING_MASK).EQ(BEING_LOGGED)) || !VM.objectModel.attemptAvailableBits(object,oldValue,oldValue.or(BEING_LOGGED)));  if (VM.VERIFY_ASSERTIONS) {    Word value=VM.objectModel.readAvailableBitsWord(object);    VM.assertions._assert(value.and(LOGGING_MASK).EQ(BEING_LOGGED));  }  return true;}  }
class C{  public final void log(final Priority priority,final String message){  if (m_priority.isLowerOrEqual(priority)) {    log(priority,message,null);  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:16.930 -0500",hash_original_method="9C5319745C341BE120FE9E801220DA42",hash_generated_method="994301D6487D5333EF062580A7A1ACF0") public boolean isFailover(){synchronized (this) {    return mIsFailover;  }}  }
class C{  public void reset() throws IOException {  if (skippingCipher == null) {    throw new IOException("cipher must implement SkippingCipher to be used with reset()");  }  in.reset();  skippingCipher.seekTo(markPosition);  if (markBuf != null) {    buf=markBuf;  }  bufOff=markBufOff;}  }
class C{  public static boolean isGrapeVineTrunk(Block block){  return GrowthCraftGrapes.blocks.grapeVine1.getBlock() == block;}  }
class C{  private String doConvertToString(Object value){  SimpleDateFormat simpleDateFormat=new SimpleDateFormat(DATETIME_PATTERN);  String result=null;  if (value instanceof Date) {    result=simpleDateFormat.format(value);  }  return result;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return VOCAB;case 2:  return LAYER_SIZE;case 3:return VECTORS;default :return null;}}  }
class C{  protected void sendUserMessage(User user,String msg,String url){  if (log.isDebugEnabled()) {    log.debug("sending e-mail to user [" + user.getEmail() + "]...");  }  mailMessage.setTo(user.getFullName() + "<" + user.getEmail()+ ">");  Map<String,Object> model=new HashMap<String,Object>();  model.put("user",user);  model.put("message",msg);  model.put("applicationURL",url);  mailEngine.sendMessage(mailMessage,templateName,model);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public ProcessHelper(){}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.942 -0400",hash_original_method="66B0B66E42A219E5BE68409D81797981",hash_generated_method="6BD1834286C3D9588B2C22BBE55956C1") @Override public boolean accept(File file){  if (fileFilter != null) {    return fileFilter.accept(file);  } else {    return super.accept(file);  }}  }
class C{  public static final List<Geo> segmentNearPoly(Geo s1,Geo s2,GeoArray r,double near){  int rlen=r.getSize();  Geo pl0=r.get(rlen - 1,new Geo());  Geo pl1=new Geo();  List<Geo> list=null;  Geo check=new Geo();  for (int j=0; j < rlen; j++) {    r.get(j,pl1);    Geo ret=segmentsIntersectOrNear(s1,s2,pl0,pl1,near,check);    if (ret != null) {      if (list == null) {        list=new LinkedList<Geo>();      }      list.add(ret);      check=new Geo();    }    pl0.initialize(pl1);  }  return list;}  }
class C{  public boolean isImported(String name){  if (locals.containsKey(name))   return false;  if (parent == null) {    return importedVariables.contains(name);  }  return parent.isImported(name);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void updateBorder(){  if (scrollPane.getHorizontalScrollBar().isVisible() || scrollPane.getVerticalScrollBar().isVisible()) {    view.setBorder(originalBorder);  } else {    view.setBorder(null);  }}  }
class C{  public static void dismissKeyboard(Activity activity){  View view=activity.getCurrentFocus();  if (view != null) {    InputMethodManager inputManager=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);    inputManager.hideSoftInputFromWindow(view.getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);  }}  }
class C{  public static <S extends HasCellMouseUpHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    CellMouseUpEvent event=new CellMouseUpEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public void openElectricChest(EntityPlayer entityplayer,int id,int windowId,boolean isBlock,int x,int y,int z){}  }
class C{  public void registerService(Service service){  serviceMap.put(service.getDescriptorForType().getFullName(),service);}  }
class C{  public boolean removeWhere(Where where){  return super.removeElement(where);}  }
class C{  public static void clearTaskQueue(String queueName) throws Exception {  getLocalTaskQueue().flushQueue(queueName);}  }
class C{  public synchronized void addHandler(Handler handler){  this.handlers.add(handler);}  }
class C{  @Override protected boolean showSkipNaNLabelsParameter(){  return false;}  }
class C{  void roadInfluencedGrowth(double max_search_index,ArrayList<Tile> recentlyUrbanized){  for (  Tile t : recentlyUrbanized) {    if (random.nextInt(maxCoefficient) < breedCoefficient) {      ArrayList<Tile> neighboringRoads=getNeighborsTransport(t,(int)max_search_index);      if (!neighboringRoads.isEmpty()) {        Tile bordersRoad=neighboringRoads.get(0);        double run_value=(dispersionCoefficient * (maxRoadValue - bordersRoad.transport + 1) / maxRoadValue);        Tile finalPoint=walkAlongRoad(bordersRoad,(int)run_value);        ArrayList<Tile> potential=getNeighborsAvailableForUrbanization(finalPoint);        if (potential.isEmpty()) {          continue;        }        Tile newUrbanized=potential.get(random.nextInt(potential.size()));        boolean successful=urbanizeTile(newUrbanized);        if (!successful) {          continue;        }        ArrayList<Tile> neighbors=getNeighborsAvailableForUrbanization(newUrbanized);        if (neighbors.size() > 1) {          for (int i=0; i < 2; i++) {            Tile neighbor=neighbors.remove(random.nextInt(neighbors.size()));            urbanizeTile(neighbor);          }        }      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:08.488 -0500",hash_original_method="688801513F9CC3FC2D9B956CC71C2D9D",hash_generated_method="00CC59E2456E37417BD3FAD6CA1EE650") public static void printThread(Article article,int depth){  for (int i=0; i < depth; ++i)   System.out.print("==>");  System.out.println(article.getSubject() + "\t" + article.getFrom());  if (article.kid != null)   printThread(article.kid,depth + 1);  if (article.next != null)   printThread(article.next,depth);}  }
class C{  CramMD5Client(String authID,byte[] pw) throws SaslException {  if (authID == null || pw == null) {    throw new SaslException("CRAM-MD5: authentication ID and password must be specified");  }  username=authID;  this.pw=pw;}  }
class C{  public boolean isAdministrator() throws GuacamoleException {  SystemPermissionSet systemPermissionSet=getSystemPermissions();  return systemPermissionSet.hasPermission(SystemPermission.Type.ADMINISTER);}  }
class C{  public void validationError(String systemID,int lineNr,String message,String elementName,String attributeName,String attributeValue) throws XMLValidationException {  XMLUtil.validationError(systemID,lineNr,message,elementName,attributeName,attributeValue);}  }
class C{  public AnnotationFormatError(String message){  super(message);}  }
class C{  public MonitorAgentNormalMessage(){  requestFileName="getstate.query";  responseFile="getstate.answer";  monitorAgent.expectSuccess();}  }
class C{  @DSComment("movement of Intent is spec") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.808 -0500",hash_original_method="5610D5819C8C8974F702B3F76798B195",hash_generated_method="1F9003E68C7D13469DB1AA0AEBE99964") public final void addDataScheme(String scheme){  if (mDataSchemes == null)   mDataSchemes=new ArrayList<String>();  if (!mDataSchemes.contains(scheme)) {    mDataSchemes.add(scheme.intern());  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Iterator<Key> iterator(){  return new MyIterator();}  }
class C{  public void reattachMirrorToDistributedVolume(String virtualVolumeName,String detachedDeviceName) throws VPlexApiException {  s_logger.info("Request to reattach mirror {} to distributed volume {}",detachedDeviceName,virtualVolumeName);  try {    VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();    VPlexVirtualVolumeInfo vplexVirtualVolumeInfo=findVirtualVolumeAndUpdateInfo(virtualVolumeName,discoveryMgr);    String ddName=vplexVirtualVolumeInfo.getSupportingDevice();    VPlexDistributedDeviceInfo ddInfo=discoveryMgr.findDistributedDevice(ddName);    if (ddInfo == null) {      throw VPlexApiException.exceptions.cantFindDistributedDeviceForVolume(virtualVolumeName);    }    VPlexDeviceInfo mirrorDeviceInfo=discoveryMgr.findLocalDevice(detachedDeviceName);    if (mirrorDeviceInfo == null) {      throw VPlexApiException.exceptions.cantFindMirrorForAttach(detachedDeviceName,virtualVolumeName);    }    String mirrorDevicePath=mirrorDeviceInfo.getPath();    String originalDeviceName=ddName;    boolean rename=false;    if (ddName.length() > VPlexApiConstants.MAX_DEVICE_NAME_LENGTH_FOR_ATTACH_MIRROR) {      try {        rename=true;        ddName=ddName.substring(0,VPlexApiConstants.MAX_DEVICE_NAME_LENGTH_FOR_ATTACH_MIRROR);        s_logger.info("Renaming device name from {} to {} temporarily to be able to attach mirror as its longer than 47 " + " characters and VPLEX expects it to be 47 characters or less to be able to attach mirror.",originalDeviceName,ddName);        ddInfo=renameVPlexResource(ddInfo,ddName);      } catch (      Exception ex) {        s_logger.info("Unable to rename device {} longer than 47 character to {} to be able to attach mirror back.",originalDeviceName,ddName);        throw VPlexApiException.exceptions.cantRenameDevice(originalDeviceName,ddName,ex);      }    }    URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_DEVICE_ATTACH_MIRROR);    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_D,ddInfo.getPath());    argsMap.put(VPlexApiConstants.ARG_DASH_M,mirrorDevicePath);    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,true);    s_logger.info("Reattach mirror for virtual volume POST data is {}",postDataObject.toString());    int reattachTryCount=0;    while (++reattachTryCount <= VPlexApiConstants.REATTACH_HA_MIRROR_RETRY_COUNT) {      ClientResponse response=null;      try {        response=_vplexApiClient.post(requestURI,postDataObject.toString());        String responseStr=response.getEntity(String.class);        s_logger.info("Attach mirror for virtual volume response is {}",responseStr);        if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {          if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {            s_logger.info("Attach mirror for virtual volume is completing asynchrounously");            _vplexApiClient.waitForCompletion(response);            break;          } else {            String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);            throw VPlexApiException.exceptions.reattachMirrorFailureStatus(detachedDeviceName,virtualVolumeName,String.valueOf(response.getStatus()),cause);          }        }        break;      } catch (      Exception e) {        if (reattachTryCount == VPlexApiConstants.REATTACH_HA_MIRROR_RETRY_COUNT) {          if (e instanceof VPlexApiException) {            throw e;          } else {            throw VPlexApiException.exceptions.failedAttachingVPlexVolumeMirror(detachedDeviceName,virtualVolumeName,e);          }        } else {          VPlexApiUtils.pauseThread(VPlexApiConstants.REATTACH_HA_MIRROR_SLEEP_TIME_MS);        }      } finally {        if (response != null) {          response.close();        }      }    }    if (rename) {      try {        s_logger.info("Renaming device {} back to original name {} ",ddName,originalDeviceName);        renameVPlexResource(ddInfo,originalDeviceName);      } catch (      Exception ex) {        s_logger.info("Unable to rename device {} back to original name {} ",ddName,originalDeviceName);        throw VPlexApiException.exceptions.cantRenameDeviceBackToOriginalName(originalDeviceName,ddName,ex);      }    }  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedAttachingVPlexVolumeMirror(detachedDeviceName,virtualVolumeName,e);  }}  }
class C{  public boolean add(OMGraphic shape){  return super.add(shape);}  }
class C{  @DSSink({DSSinkKind.SYSTEM_SETTINGS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:26.709 -0500",hash_original_method="52664ABA5522CB5FFA9E0304A7C81F50",hash_generated_method="220CCCBBDAD09D90895077D5898F7F38") public void reqSetLinkPropertiesHttpProxy(ProxyProperties proxy){  sendMessage(REQ_SET_LINK_PROPERTIES_HTTP_PROXY,proxy);  if (DBG)   log("reqSetLinkPropertiesHttpProxy proxy=" + proxy);}  }
class C{  private void replaceDef(SsaInsn def,SsaInsn prev,int length,ArrayList<RegisterSpec> newRegs){  Type resultType=def.getResult().getType();  for (int i=0; i < length; i++) {    Constant newZero=Zeroes.zeroFor(resultType.getComponentType());    TypedConstant typedZero=(TypedConstant)newZero;    RegisterSpec newReg=RegisterSpec.make(ssaMeth.makeNewSsaReg(),typedZero);    newRegs.add(newReg);    insertPlainInsnBefore(def,RegisterSpecList.EMPTY,newReg,RegOps.CONST,newZero);  }}  }
class C{  public final void consume(final byte[] key,final long l){  while (true)   try {    this.cache.put(new entry(key,l));    break;  } catch (  final InterruptedException e) {    continue;  }}  }
class C{  public void write(CharSequence csq) throws IOException {  final int length=csq.length();  for (int i=0; i < length; ) {    char c=csq.charAt(i++);    if (c < 0x80) {      _bytes[_index]=(byte)c;      if (++_index >= _bytes.length) {        flushBuffer();      }    } else {      write(c);    }  }}  }
class C{  public Object readObject(Class expectedClass) throws IOException {  if (!parseTag())   throw new BurlapProtocolException("expected <tag>");  String tag=sbuf.toString();  if (tag.equals("null")) {    expectEndTag("null");    return null;  } else   if (tag.equals("boolean")) {    int value=parseInt();    expectEndTag("boolean");    return new Boolean(value != 0);  } else   if (tag.equals("int")) {    int value=parseInt();    expectEndTag("int");    return new Integer(value);  } else   if (tag.equals("long")) {    long value=parseLong();    expectEndTag("long");    return new Long(value);  } else   if (tag.equals("string")) {    sbuf.setLength(0);    parseString(sbuf);    String value=sbuf.toString();    expectEndTag("string");    return value;  } else   if (tag.equals("xml")) {    sbuf.setLength(0);    parseString(sbuf);    String value=sbuf.toString();    expectEndTag("xml");    return value;  } else   if (tag.equals("date")) {    if (utcCalendar == null)     utcCalendar=Calendar.getInstance(TimeZone.getTimeZone("UTC"));    long value=parseDate(utcCalendar);    expectEndTag("date");    return new Date(value);  } else   if (tag.equals("map")) {    String type=readType();    return readMap(expectedClass,type);  } else   if (tag.equals("list")) {    String type=readType();    int length=readLength();    return readList(expectedClass,type,length);  } else   if (tag.equals("ref")) {    int value=parseInt();    expectEndTag("ref");    return refs.elementAt(value);  } else   if (tag.equals("remote")) {    String type=readType();    String url=readString();    expectEndTag("remote");    return resolveRemote(type,url);  } else   return readExtensionObject(expectedClass,tag);}  }
class C{  public boolean isDistributed(){  return !isLocal();}  }
class C{  private static boolean isInside(int offset,int start,int end){  return offset == start || offset == end || (offset > start && offset < end);}  }
class C{  @SuppressWarnings("unchecked") public void add(String key,String value){  if (key != null && value != null) {    Object params=urlParamsWithObjects.get(key);    if (params == null) {      params=new HashSet<String>();      this.put(key,params);    }    if (params instanceof List) {      ((List<Object>)params).add(value);    } else     if (params instanceof Set) {      ((Set<Object>)params).add(value);    }  }}  }
class C{  protected boolean isDefaultSenderLocalPart(){  return fieldDefaultSenderLocalPart;}  }
class C{  public static ConditionOperand OVERFLOW_FROM_ADD(){  return new ConditionOperand(OVERFLOW_FROM_ADD);}  }
class C{  @Deprecated private void findCanonicalEntries(){  if (this.canonicalEntitiesMap.size() > 0 || !this.modified)   return;  for (  Constituent cc : this.getConstituents()) {    int ccId=this.constituents.indexOf(cc);    if (getFilteredIncomingRelations(cc).size() == 0) {      canonicalEntitiesMap.put(ccId,ccId);      for (      Relation r : getFilteredOutgoingRelations(cc)) {        int tId=this.constituents.indexOf(r.getTarget());        canonicalEntitiesMap.put(tId,ccId);      }    }  }  modified=false;}  }
class C{  protected ObjectAccessor(String xmlElement){  super(xmlElement);}  }
class C{  private void internSchema(){  internSchema(false);}  }
class C{  public void init(int size,int certainty,SecureRandom random){  this.size=size;  this.certainty=certainty;  this.random=random;}  }
class C{  void closeSocket(SocketBar socket){  if (_throttle != null) {    _throttle.close(socket);  }}  }
class C{  public static double convertMillisToSeconds(double millis){  return millis / SECOND_TO_MILLIS;}  }
class C{  static public String[] match(String what,String regexp){  Pattern p=matchPattern(regexp);  Matcher m=p.matcher(what);  if (m.find()) {    int count=m.groupCount() + 1;    String[] groups=new String[count];    for (int i=0; i < count; i++) {      groups[i]=m.group(i);    }    return groups;  }  return null;}  }
class C{  public boolean containsObjectClass(Class objectClass){  return mapping.containsKey(objectClass);}  }
class C{  private void initMessageKey(ClassEnum classEnum){  String result=getMessageKey();  if (classEnum != null) {    String enumName=classEnum.toString();    enumName=enumName.substring(enumName.lastIndexOf(".") + 1);    result+="." + enumName;  }  setMessageKey(result);}  }
class C{  public static double[] calcGetGeoTransform(Sector sector,int width,int height) throws IllegalArgumentException {  if (null == sector) {    String message=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (0 == width) {    String message=Logging.getMessage("generic.InvalidWidth",width);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (0 == height) {    String message=Logging.getMessage("generic.InvalidHeight",height);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double[] gx=new double[6];  gx[GDAL.GT_0_ORIGIN_LON]=sector.getMinLongitude().degrees;  gx[GDAL.GT_1_PIXEL_WIDTH]=Math.abs(sector.getDeltaLonDegrees() / (double)width);  gx[GDAL.GT_2_ROTATION_X]=0d;  gx[GDAL.GT_3_ORIGIN_LAT]=sector.getMaxLatitude().degrees;  gx[GDAL.GT_4_ROTATION_Y]=0d;  gx[GDAL.GT_5_PIXEL_HEIGHT]=-Math.abs(sector.getDeltaLatDegrees() / (double)height);  return gx;}  }
class C{  public static CCProgressTimer progress(String filename){  return new CCProgressTimer(filename);}  }
class C{  public TradeOrderfill clone(){  try {    TradeOrderfill tradeOrderfill=(TradeOrderfill)super.clone();    return tradeOrderfill;  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  @Override public boolean supportsStoredFunctionsUsingCallSyntax(){  debugCodeCall("supportsStoredFunctionsUsingCallSyntax");  return true;}  }
class C{  private double convolve(int col,int row){  Kernel kernel=getKernel();  if (kernel == null) {    Comparable<?> original=getOriginal(col,row);    return DataUtils.getValueOrDefault((Number)original,Double.NaN);  }  double sum=0.0;  for (int k=kernel.getMinIndex(); k <= kernel.getMaxIndex(); k++) {    int r=row + k;    Comparable<?> original=getOriginal(col,r);    double v=DataUtils.getValueOrDefault((Number)original,Double.NaN);    if (!MathUtils.isCalculatable(v)) {      return v;    }    sum+=kernel.get(k) * v;  }  return sum;}  }
class C{  public SQLDataException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public void requestContactCapabilities(Set<ContactId> contacts){  if (sLogger.isActivated()) {    int nbOfContactsToQuery=contacts.size();    if (nbOfContactsToQuery > MAX_CONTACTS_TO_DISPLAY) {      sLogger.debug("Request capabilities for " + nbOfContactsToQuery + " contacts");    } else {      sLogger.debug("Request capabilities for ".concat(Arrays.toString(contacts.toArray())));    }  }  mOptionsManager.requestCapabilities(contacts);}  }
class C{  public static Output<String,IOException> text(final File file){  return text(file,"UTF-8");}  }
class C{  public ObjectInputStreamWithLoader(InputStream in,ClassLoader loader) throws IOException, StreamCorruptedException {  super(in);  if (loader == null) {    throw new IllegalArgumentException("Illegal null argument to ObjectInputStreamWithLoader");  }  this.loader=loader;}  }
class C{  public static Table create(AkibanInformationSchema ais,Table table){  Table copy=create(ais,table.tableName.getSchemaName(),table.tableName.getTableName(),table.getTableId());  copy.setUuid(table.getUuid());  return copy;}  }
class C{  public Stream<Tuple2io<int[][]>> read(String in) throws FileNotFoundException {  return read(new FileInputStream(in));}  }
class C{  protected ExpressionStatementImpl(){  super();}  }
class C{  private void updateHeader(){  String sql="UPDATE S_TimeExpense te" + " SET ApprovalAmt = " + "(SELECT SUM(Qty*ConvertedAmt) FROM S_TimeExpenseLine tel "+ "WHERE te.S_TimeExpense_ID=tel.S_TimeExpense_ID) "+ "WHERE S_TimeExpense_ID="+ getS_TimeExpense_ID();  int no=DB.executeUpdate(sql,get_TrxName());}  }
class C{  public GraphBuilder<N> expectedNodeCount(int expectedNodeCount){  checkArgument(expectedNodeCount >= 0,"The expected number of nodes can't be negative: %s",expectedNodeCount);  this.expectedNodeCount=Optional.of(expectedNodeCount);  return this;}  }
class C{  public static String block(String text){  return BS + nl + indent(text)+ nl+ BE;}  }
class C{  public void addSeriesLabel(int series,String label){  Integer key=new Integer(series);  List labelList=(List)this.seriesLabelLists.get(key);  if (labelList == null) {    labelList=new java.util.ArrayList();    this.seriesLabelLists.put(key,labelList);  }  labelList.add(label);}  }
class C{  public static <T>void fill(List<? super T> list,T object){  ListIterator<? super T> it=list.listIterator();  while (it.hasNext()) {    it.next();    it.set(object);  }}  }
class C{  public Extractors extract(Extractor extractor){  extract(DEFAULT_FIELD,extractor);  return this;}  }
class C{  public static CounterNode newTree(){  return new CounterNode(ImmutableList.<String>of(),null);}  }
class C{  public StringTokenizer(String str){  this(str," \t\n\r\f",false);}  }
class C{  static public final float random(float range){  return random.nextFloat() * range;}  }
class C{  @DSModeled(DSC.SAFE) public RectF(){}  }
class C{  public IntHashTable(int capacity){  int log2Size=4;  while (capacity > (1 << log2Size)) {    log2Size++;  }  capacity=1 << log2Size;  objs=new Object[capacity];  ints=new int[capacity];  mask=capacity - 1;}  }
class C{  public final void writeBytes(String str){  if (this.overflowBuf != null) {    this.overflowBuf.writeBytes(str);    return;  }  int strlen=str.length();  if (strlen > 0) {    for (int i=0; i < strlen; i++) {      writeByte((byte)str.charAt(i));    }  }}  }
class C{  @Override public void addLifecycleListener(LifecycleListener listener){  this.lifecycle.addLifecycleListener(listener);}  }
class C{  public CustomSwitchPreference(Context context){  super(context,null);}  }
class C{  public static String sPrintMatrix(float[][] input){  StringBuilder builder=new StringBuilder();  for (int i=0; i < input.length; ++i) {    for (int j=0; j < input[0].length; ++j) {      builder.append(input[i][j]).append(", ");    }    builder.append("\n");  }  return builder.toString();}  }
class C{  protected void addNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Endpoint_name_feature"),getString("_UI_PropertyDescriptor_description","_UI_Endpoint_name_feature","_UI_Endpoint_type"),EipPackage.Literals.ENDPOINT__NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public String execute() throws Exception {  String forward=RESULT_SEARCH_NO_DATA;  try {    this.createChart();    forward=SUCCESS;  } catch (  ControllerException e) {    this.setPageMessage(e.getMessage().toString());  }catch (  ServiceException e) {    this.setPageMessage(e.getMessage().toString());  }catch (  Exception e) {    e.printStackTrace();    this.setPageMessage(e.getMessage().toString());  }  return forward;}  }
class C{  public ObjectFactory(){}  }
class C{  public static byte nextByte(){  return (byte)(random.nextInt(256) - 128);}  }
class C{  public void startAnimations(ValueAnimator.AnimatorUpdateListener listener){  for (int i=0; i < mNeedToStart.size(); i++) {    ObjectAnimator anim=mNeedToStart.get(i);    anim.addUpdateListener(listener);    anim.addListener(this);    anim.start();  }  mNeedToStart.clear();}  }
class C{  void startOptional(){  this.optional++;}  }
class C{  public static Annotation[] compileAnnotations(List<AnnotationDesc> annotationSpec,EngineImportService engineImportService,String eplStatement){  Annotation[] annotations;  try {    annotations=AnnotationUtil.compileAnnotations(annotationSpec,engineImportService);  } catch (  AnnotationException e) {    throw new EPStatementException("Failed to process statement annotations: " + e.getMessage(),e,eplStatement);  }catch (  RuntimeException ex) {    String message="Unexpected exception compiling annotations in statement, please consult the log file and report the exception: " + ex.getMessage();    log.error(message,ex);    throw new EPStatementException(message,ex,eplStatement);  }  return annotations;}  }
class C{  public static Paint newBorderPaint(Context context){  final float lineThicknessPx=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,DEFAULT_LINE_THICKNESS_DP,context.getResources().getDisplayMetrics());  final Paint borderPaint=new Paint();  borderPaint.setAntiAlias(true);  borderPaint.setColor(Color.parseColor(DEFAULT_BOARDER_COLOR));  borderPaint.setStrokeWidth(lineThicknessPx);  borderPaint.setStyle(Paint.Style.STROKE);  return borderPaint;}  }
class C{  public FastBlurFilter(){  this(3);}  }
class C{  public static int count(String orig,String find){  int retVal=0;  int pos=0;  while (orig.indexOf(find,pos) > 0) {    pos=orig.indexOf(find,pos) + 1;    retVal++;  }  return retVal;}  }
class C{  protected void prepareSocket(Socket sock,HttpContext context,HttpParams params) throws IOException {  sock.setTcpNoDelay(HttpConnectionParams.getTcpNoDelay(params));  sock.setSoTimeout(HttpConnectionParams.getSoTimeout(params));  int linger=HttpConnectionParams.getLinger(params);  if (linger >= 0) {    sock.setSoLinger(linger > 0,linger);  }}  }
class C{  public Iterator<Object> iterator(){  return registry.iterator();}  }
class C{  public TIntIntIterator(TIntIntHashMap map){  super(map);  _map=map;}  }
class C{  private final static int extractInt(byte[] buf,int offs,int len){  int ret=0;  for (int i=0; i < len; i++) {    int b=buf[offs + i];    if (b < 0)     b+=256;    ret=(ret << 8) + b;  }  return ret;}  }
class C{  public static Short toShort(Object o,Short defaultValue){  if (o instanceof Short)   return (Short)o;  if (defaultValue != null)   return Short.valueOf(toShortValue(o,defaultValue.shortValue()));  short res=toShortValue(o,Short.MIN_VALUE);  if (res == Short.MIN_VALUE)   return defaultValue;  return Short.valueOf(res);}  }
class C{  public Task<InitiatorRestRep> deactivate(URI id){  return doDeactivateWithTask(id);}  }
class C{  public Edge(int u,int v){  this.u=u;  this.v=v;}  }
class C{  public final Fixture createFixture(Shape shape,float density){  fixDef.shape=shape;  fixDef.density=density;  return createFixture(fixDef);}  }
class C{  public void testNullChecking2(){  ObjectMapper mapper=new ObjectMapper();  ObjectNode src=mapper.createObjectNode();  ObjectNode dest=mapper.createObjectNode();  src.put("a","b");  dest.putAll(src);}  }
class C{  protected void calculateAttributeVectors(){  anchorVectorX=new double[this.dataTable.getNumberOfColumns()];  anchorVectorY=new double[this.dataTable.getNumberOfColumns()];  for (int i=0; i < this.dataTable.getNumberOfColumns(); i++) {    if ((i == colorColumn) || (shouldIgnoreColumn(i))) {      continue;    }    double angle=angles[i];    double x=0.0f, y=0.0f;    if ((int)angle / 90 == 0) {      x=sin(angle);      y=sin(90.0f - angle);    } else     if ((int)angle / 90 == 1) {      angle=angle - 90.0f;      x=sin(90.0f - angle);      y=sin(angle);      y=-y;    } else     if ((int)angle / 90 == 2) {      angle=angle - 180.0f;      x=sin(angle);      y=sin(90.0f - angle);      x=-x;      y=-y;    } else     if ((int)angle / 90 == 3) {      angle=angle - 270.0f;      x=sin(90.0f - angle);      y=sin(angle);      x=-x;    }    anchorVectorX[i]=x;    anchorVectorY[i]=y;  }}  }
class C{  public static int[] discretise(double data[],int numBins){  int[] discretised=new int[data.length];  double min=min(data);  double max=max(data);  double binInterval=(max - min) / numBins;  for (int t=0; t < data.length; t++) {    discretised[t]=(int)((data[t] - min) / binInterval);    if (discretised[t] == numBins) {      discretised[t]--;    }  }  return discretised;}  }
class C{  public static boolean isFolderExist(String directoryPath){  if (Handler_String.isBlank(directoryPath)) {    return false;  }  File dire=new File(directoryPath);  return (dire.exists() && dire.isDirectory());}  }
class C{  public JSONObject putOpt(String key,Object value) throws JSONException {  if (key != null && value != null) {    put(key,value);  }  return this;}  }
class C{  public void replaceFromToWithFrom(int from,int to,AbstractFloatList other,int otherFrom){  if (!(other instanceof FloatArrayList)) {    super.replaceFromToWithFrom(from,to,other,otherFrom);    return;  }  int length=to - from + 1;  if (length > 0) {    checkRangeFromTo(from,to,size());    checkRangeFromTo(otherFrom,otherFrom + length - 1,other.size());    System.arraycopy(((FloatArrayList)other).elements,otherFrom,elements,from,length);  }}  }
class C{  public void dumpDatabase(){  Date date=new Date();  String dirName=String.format("dump-%020d",date.getTime());  File dir=new File(cfgManager.getDatabaseConfiguration().getDumpPath(),dirName);  if (!(dir.mkdirs())) {    logger.error("Can not create directory to save backup system.");    return;  }  String path=dir.getAbsolutePath();  if (!(backupDatabase(path) && backupSolr(path))) {    logger.warn("Deleting invalid backup system...");    try {      FileUtils.deleteDirectory(dir);    } catch (    IOException e) {      logger.error("Can not delete invalid backup system: " + path + ". Please delete it manually.");    }  }}  }
class C{  private boolean couldContainMatridIds(){  return (0 != mEmails.size());}  }
class C{  public static <K,V>HashMap<K,V> newHashMap(){  return new HashMap<K,V>();}  }
class C{  @Override public Document build(File file) throws ParsingException, ValidityException, IOException {  return build(new FileInputStream(file),file.toURI().toASCIIString());}  }
class C{  public MethodSet(){  frozen=false;  lookupMap=new HashMap();  count=0;}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SexecPackage.CHECK__REFS:    return ((InternalEList<InternalEObject>)(InternalEList<?>)getRefs()).basicAdd(otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public void addEdge(Object from,Object to,int w){  if (this.isUnknown)   throw new RuntimeException("Unknown graph can not have edges");  Hashtable<Object,IntContainer> targets=sources.get(from);  if (targets == null) {    targets=new Hashtable<Object,IntContainer>();    sources.put(from,targets);  }  IntContainer weight=targets.get(to);  if (weight == null) {    weight=new IntContainer(w);    targets.put(to,weight);  } else {    if (weight.value > w)     weight.value=w;  }}  }
class C{  private long readTimeStamp(byte[] buffer,int offset){  long seconds=read32(buffer,offset);  long fraction=read32(buffer,offset + 4);  return ((seconds - OFFSET_1900_TO_1970) * 1000) + ((fraction * 1000L) / 0x100000000L);}  }
class C{  void monitored(String name) throws InterruptedException, ExecutionException {  Topology t=dp.newTopology(name);  Random r=new Random();  TStream<Double> d=t.poll(null,100,TimeUnit.MILLISECONDS);  d.sink(null);  Thread.sleep(2000);  Future<Job> f=dp.submit(t);  Job job=f.get();  Thread.sleep(5000);  job.stateChange(Job.Action.CLOSE);  Thread.sleep(2000);  provider().getServices().getService(JobRegistryService.class).removeJob(job.getId());}  }
class C{  public Node close(final boolean simpleEnd) throws IOException {  assert (m_open);  if (emptyBody()) {    if (simpleEnd) {      m_writer.write(">");    } else {      m_writer.write("/>");    }  } else {    m_writer.write("</" + m_tag + "\n>");  }  m_open=false;  if (m_parent == null) {    m_writer.flush();  }  return m_parent;}  }
class C{  public void destory(){  sendLeftGroupEvent(membersAndLastSeen.keySet());  membersAndLastSeen.clear();}  }
class C{  private void selectSupersededForms(){  ListView ls=getListView();  for (int idx=0; idx < mFormList.size(); idx++) {    HashMap<String,String> item=mFormList.get(idx);    if (isLocalFormSuperseded(item.get(FORM_ID_KEY),item.get(FORM_VERSION_KEY))) {      ls.setItemChecked(idx,true);    }  }}  }
class C{  public static SecretKeys keys(String keysStr) throws InvalidKeyException {  String[] keysArr=keysStr.split(":");  if (keysArr.length != 2) {    throw new IllegalArgumentException("Cannot parse aesKey:hmacKey");  } else {    byte[] confidentialityKey=Base64.decode(keysArr[0],BASE64_FLAGS);    if (confidentialityKey.length != AES_KEY_LENGTH_BITS / 8) {      throw new InvalidKeyException("Base64 decoded key is not " + AES_KEY_LENGTH_BITS + " bytes");    }    byte[] integrityKey=Base64.decode(keysArr[1],BASE64_FLAGS);    if (integrityKey.length != HMAC_KEY_LENGTH_BITS / 8) {      throw new InvalidKeyException("Base64 decoded key is not " + HMAC_KEY_LENGTH_BITS + " bytes");    }    return new SecretKeys(new SecretKeySpec(confidentialityKey,0,confidentialityKey.length,CIPHER),new SecretKeySpec(integrityKey,HMAC_ALGORITHM));  }}  }
class C{  @Override @CanIgnoreReturnValue public int read() throws IOException {  int b=in.read();  if (b != -1) {    hasher.putByte((byte)b);  }  return b;}  }
class C{  public static final int makeIntFromByte4(byte[] b){  return makeIntFromByte4(b,0);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public final boolean isNative(){  return Modifier.isNative(getModifiers());}  }
class C{  public void enableHelp(Component comp,@NotNull String id,HelpSet hs){  CSH.setHelpIDString(comp,id);  if (hs != null) {    CSH.setHelpSet(comp,hs);  }}  }
class C{  public static java.lang.Double valueOf(java.lang.String s) throws java.lang.NumberFormatException {  return null;}  }
class C{  protected static void printLayerProperties(LayerHandler layerHandler,PropertyHandler ph,PrintStream ps,Properties createdProperties){  String markerName;  String layerMarkerStringKey=Environment.OpenMapPrefix + "." + LayerHandler.layersProperty;  StringBuffer layerMarkerString=new StringBuffer(layerMarkerStringKey).append("=");  String startUpLayerMarkerStringKey=Environment.OpenMapPrefix + "." + LayerHandler.startUpLayersProperty;  StringBuffer startUpLayerMarkerString=new StringBuffer(startUpLayerMarkerStringKey).append("=");  StringBuffer layerPropertiesString=new StringBuffer();  Properties layerProperties=new Properties();  Layer[] layers=layerHandler.getLayers();  int numLayers=0;  for (int i=0; i < layers.length; i++) {    markerName=layers[i].getPropertyPrefix();    if (markerName == null) {      markerName="layer" + (numLayers++);      layers[i].setPropertyPrefix(markerName);    }    if (ph != null) {      layerProperties=ph.getProperties(markerName);    } else {      layerProperties.clear();    }    layerMarkerString.append(" ").append(markerName);    if (layers[i].isVisible()) {      startUpLayerMarkerString.append(" ").append(markerName);    }    layers[i].getProperties(layerProperties);    layerPropertiesString.append("### -").append(markerName).append("- layer properties\n");    TreeMap orderedProperties=new TreeMap(layerProperties);    for (Iterator keys=orderedProperties.keySet().iterator(); keys.hasNext(); ) {      String key=(String)keys.next();      String value=layerProperties.getProperty(key);      if (value != null) {        layerPropertiesString.append(key).append("=").append(value).append("\n");      }      if (createdProperties != null && value != null) {        createdProperties.put(key,value);      }    }    layerPropertiesString.append("### end of -").append(markerName).append("- properties\n\n");  }  if (ps != null) {    ps.println("\n### OpenMap Layers ###");    ps.println(layerMarkerString.toString());    ps.println(startUpLayerMarkerString.toString());    ps.println(layerPropertiesString.toString());  }  if (createdProperties != null) {    createdProperties.put(layerMarkerStringKey,layerMarkerString.substring(layerMarkerStringKey.length() + 1));    createdProperties.put(startUpLayerMarkerStringKey,startUpLayerMarkerString.substring(startUpLayerMarkerStringKey.length() + 1));  }}  }
class C{  public X509Certificate engineLookupResolveX509Certificate(Element element,String baseURI,StorageResolver storage) throws KeyResolverException {  KeyResolverSpi tmp=cloneIfNeeded();  if (!tmp.engineCanResolve(element,baseURI,storage)) {    return null;  }  return tmp.engineResolveX509Certificate(element,baseURI,storage);}  }
class C{  @Override protected EClass eStaticClass(){  return FunctionblockPackage.Literals.RETURN_OBJECT_TYPE;}  }
class C{  public KeyPairGenerator prepareKeyPairGeneration(KeyPairType keyPairType,int keySize){  try {    keyPairGen=KeyPairGenerator.getInstance(keyPairType.jce());    keyPairGen.initialize(keySize);  } catch (  Exception e) {    LOG.error("Error preparing KeyPair generator",e);  }  return keyPairGen;}  }
class C{  public boolean hasAtLeastOneAction(Transition transition){  Effect effect=transition.getEffect();  if (effect instanceof ReactionEffect) {    ReactionEffect reactionEffect=(ReactionEffect)effect;    EList<Expression> actions=reactionEffect.getActions();    return !actions.isEmpty();  }  return false;}  }
class C{  public void findTaxCategoryID(){  m_AD_Client_ID=Env.getAD_Client_ID(Env.getCtx());  m_AD_Org_ID=Env.getAD_Org_ID(Env.getCtx());  m_CreatedBy=Env.getAD_User_ID(Env.getCtx());  String sql="SELECT C_TaxCategory_ID FROM C_TaxCategory " + "WHERE IsDefault='Y' AND AD_Client_ID=?";  m_C_TaxCategory_ID=0;  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_AD_Client_ID);    ResultSet rs=pstmt.executeQuery();    if (rs.next())     m_C_TaxCategory_ID=rs.getInt(1);    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }}  }
class C{  public static synchronized String buildUniqueFileName(File directory,String fileBaseName,String extension){  return buildUniqueFileName(directory,fileBaseName,extension,0);}  }
class C{  public LazyReact(final int threadPoolSize,final int maxActiveTasks){  executor=Executors.newFixedThreadPool(threadPoolSize);  retrier=new RetryBuilder().parallelism(threadPoolSize);  async=true;  maxActive=new MaxActive(maxActiveTasks,threadPoolSize);  streamOfFutures=false;  poolingActive=false;  autoOptimize=true;  autoMemoize=false;  memoizeCache=null;}  }
class C{  public void onAnimationRepeat(Animator animation){}  }
class C{  public void preLoadImages(String[] urls){  int len=urls.length;  len=10;  for (int i=0; i < len; i++) {    final ImageTask imageTask=createImageTask(urls[i],0,0,null);    addImageTask(imageTask,null);  }}  }
class C{  public SplitTriangle(int numAttributes){  front=new float[numAttributes * 3 * 2];  back=new float[numAttributes * 3 * 2];  edgeSplit=new float[numAttributes];}  }
class C{  public Zoom(AbstractChart chart,boolean in,float rate){  super(chart);  mZoomIn=in;  setZoomRate(rate);}  }
class C{  public void animatedAttributeChanged(Element e,AnimatedLiveAttributeValue alav){  Iterator i=animatedAttributeListeners.iterator();  while (i.hasNext()) {    AnimatedAttributeListener aal=(AnimatedAttributeListener)i.next();    aal.animatedAttributeChanged(e,alav);  }}  }
class C{  public <T>TStream<T> traceStream(TStream<T> stream,Supplier<String> label){  if (includeTraceStreamOps(label.get())) {    TStream<?> s=stream.filter(traceTuplesFn(label.get()));    s.peek(null);  }  return stream;}  }
class C{  public void provideCapacity(final int capacity){  if (c.length >= capacity) {    return;  }  int newcapacity=((capacity * 3) >> 1) + 1;  char[] newc=new char[newcapacity];  System.arraycopy(c,0,newc,0,length);  c=newc;}  }
class C{  @Override default ServiceRefAmp service(String address){  throw new UnsupportedOperationException(getClass().getName());}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String surferFile=null;  String whiteboxHeaderFile=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  int progress=0;  double cellsize=0;  double north=0;  double east=0;  double west=0;  double south=0;  double arcNoData=-9999;  double whiteboxNoData=-32768d;  double z=0;  String delimiter=" ";  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  DataInputStream in=null;  BufferedReader br=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    }  }  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      surferFile=imageFiles[i];      if (!((new File(surferFile)).exists())) {        showFeedback("Surfer raster file does not exist.");        break;      }      if (surferFile.lastIndexOf(".") >= 0) {        String extension=surferFile.substring(surferFile.lastIndexOf("."));        whiteboxHeaderFile=surferFile.replace(extension,".dep");      } else {        whiteboxHeaderFile=surferFile + ".dep";      }      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxHeaderFile.replace(".dep",".tas"))).delete();      FileInputStream fstream=new FileInputStream(surferFile);      rows=0;      cols=0;      in=new DataInputStream(fstream);      br=new BufferedReader(new InputStreamReader(in));      if (surferFile != null) {        String line;        String[] str;        i=1;        while ((line=br.readLine()) != null && i < 5) {          str=line.split(delimiter);          if (str.length <= 1 && i > 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if (i == 1) {            if (!(str[0].toLowerCase().equals("dsaa"))) {              showFeedback("Warning: Surfer ASCII GRD ID value " + "was not located. This file may be " + "improperly structured.");            }          } else           if (i == 2) {            cols=Integer.parseInt(str[0]);            rows=Integer.parseInt(str[str.length - 1]);          } else           if (i == 3) {            west=Double.parseDouble(str[0]);            east=Double.parseDouble(str[str.length - 1]);          } else           if (i == 4) {            south=Double.parseDouble(str[0]);            north=Double.parseDouble(str[str.length - 1]);          } else {            break;          }          i++;        }        fw=new FileWriter(whiteboxHeaderFile,false);        bw=new BufferedWriter(fw);        out=new PrintWriter(bw,true);        str1="Min:\t" + Double.toString(Integer.MAX_VALUE);        out.println(str1);        str1="Max:\t" + Double.toString(Integer.MIN_VALUE);        out.println(str1);        str1="North:\t" + Double.toString(north);        out.println(str1);        str1="South:\t" + Double.toString(south);        out.println(str1);        str1="East:\t" + Double.toString(east);        out.println(str1);        str1="West:\t" + Double.toString(west);        out.println(str1);        str1="Cols:\t" + Integer.toString(cols);        out.println(str1);        str1="Rows:\t" + Integer.toString(rows);        out.println(str1);        str1="Data Type:\t" + "float";        out.println(str1);        str1="Z Units:\t" + "not specified";        out.println(str1);        str1="XY Units:\t" + "not specified";        out.println(str1);        str1="Projection:\t" + "not specified";        out.println(str1);        str1="Data Scale:\tcontinuous";        out.println(str1);        str1="Preferred Palette:\t" + "spectrum.pal";        out.println(str1);        str1="NoData:\t-32768";        out.println(str1);        if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {          str1="Byte Order:\t" + "LITTLE_ENDIAN";        } else {          str1="Byte Order:\t" + "BIG_ENDIAN";        }        out.println(str1);        WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"rw");        delimiter=" ";        row=rows - 1;        col=0;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          for (i=0; i < str.length; i++) {            if (!str[i].trim().isEmpty()) {              z=Double.parseDouble(str[i]);              wbr.setValue(row,col,z);              col++;              if (col == cols) {                col=0;                row--;              }            }          }        }        in.close();        br.close();        wbr.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");        wbr.addMetadataEntry("Created on " + new Date());        wbr.flush();        wbr.findMinAndMaxVals();        wbr.close();        returnData(whiteboxHeaderFile);      }    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void paintComponent(Graphics g){  if (!m_HasCustomPanel) {    Insets i=getInsets();    Rectangle box=new Rectangle(i.left,i.top,getSize().width - i.left - i.right- 1,getSize().height - i.top - i.bottom- 1);    g.clearRect(i.left,i.top,getSize().width - i.right - i.left,getSize().height - i.bottom - i.top);    m_Editor.paintValue(g,box);  }}  }
class C{  private void updateToolTip(){  int n=getComponentCount() - 1;  if (n > 1) {    n=1;  } else   if (n < 0) {    return;  }  Component c=getComponent(n);  if (c != null && c instanceof JComponent) {    ((JComponent)c).setToolTipText(getUrl());  }}  }
class C{  public static void writeGraphic(TripHistogram tripHistogram,final String filename){  try {    ChartUtilities.saveChartAsPNG(new File(filename),getGraphic(tripHistogram.getAllModesData(),"all",tripHistogram.getIteration()),1024,768);  } catch (  IOException e) {    throw new UncheckedIOException(e);  }}  }
class C{  @Override public Adapter adapt(Notifier notifier,Object type){  return super.adapt(notifier,this);}  }
class C{  void validate(){  if (this.source.getNumColumns() == 0 || this.source.getNumRows() == 0) {    throw new IllegalStateException("Cannot run algorithm on an empty data set.");  }}  }
class C{  public void write(byte[] data){  this.uploader.upload(data);}  }
class C{  @Override public void onUpdate(){  if (this.supportFrame == null) {    for (byte i=2; i < 6; i++) {      Coord4D position=Coord4D.get(this);      position.step(ForgeDirection.getOrientation(i));      TileEntity tileEntity=position.getTileEntity(worldObj);      if (tileEntity instanceof TileLauncherFrame) {        this.supportFrame=(TileLauncherFrame)tileEntity;        this.supportFrame.setFacing((short)MekanismUtils.getBaseOrientation(ForgeDirection.NORTH.ordinal(),i));      }    }  } else {    if (this.supportFrame.isInvalid()) {      this.supportFrame=null;    }  }  if (!this.worldObj.isRemote) {    this.setMissile();    if (this.packetGengXin || this.ticker % (20 * 30) == 0) {      Mekanism.packetHandler.sendToReceivers(new TileEntityMessage(Coord4D.get(this),getNetworkedData(new ArrayList())),new Range4D(Coord4D.get(this)));      this.packetGengXin=false;    }  }}  }
class C{  public static void walkComponents(com.haulmont.cuba.gui.components.Component.Container container,ComponentVisitor visitor){  __walkComponents(container,visitor,"");}  }
class C{  public double norm2(){  return Math.sqrt(sum2());}  }
class C{  public static void addErrorListener(ActionListener listener){  if (onErrorListeners == null) {    onErrorListeners=new EventDispatcher();  }  onErrorListeners.addListener(listener);}  }
class C{  public Attr removeAttributeNode(Attr oldAttr) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public GeoShapeQueryBuilder(String name,ShapeBuilder shape,ShapeRelation relation){  this(name,shape,null,null,relation);}  }
class C{  @Override public ODataService createService(ODataContext ctx) throws ODataException {  ODataService res=null;  List<PathSegment> pathSegs=ctx.getPathInfo().getPrecedingSegments();  String serviceName=pathSegs.get(pathSegs.size() - 1).getPath();  if (serviceName.equals(V1Util.getServiceName())) {    EdmProvider edmProvider=new V1Model();    ODataSingleProcessor oDataProcessor=new V1Processor();    res=createODataSingleProcessorService(edmProvider,oDataProcessor);  }  return res;}  }
class C{  public void addRangeRestriction(String ColumnName,Object Code,Object Code_to,String InfoName,String InfoDisplay,String InfoDisplay_to){  Restriction r=new Restriction(ColumnName,Code,Code_to,InfoName,InfoDisplay,InfoDisplay_to,true,0);  m_list.add(r);}  }
class C{  public sim.util.matrix.Vector calculateConstraintForces(sim.util.matrix.Vector externalForcesVector){  setMatrices();  double ks=.3;  double kd=.3;  sim.util.matrix.DiagonalMatrix W=physicsState.getMassInverseMatrix();  sim.util.matrix.Vector feedback=constraintVector.times(ks).plus(constraintDotVector.times(kd));  sim.util.matrix.Vector b=jacobianDotMatrix.times(qDotVector.times(-1)).minus(jacobianMatrix.times(W.times(externalForcesVector))).minus(feedback);  sim.util.matrix.Vector lambda=new sim.util.matrix.Vector(b.m);  sim.util.matrix.DiagonalMatrix A_t=new sim.util.matrix.DiagonalMatrix(b.m);  for (int i=0; i < b.m; i++)   A_t.vals[i]=1;  lambda=sim.util.matrix.BlockSparseMatrix.solveBiConjugateGradient(jacobianMatrix,W,A_t,b,lambda,W.m * 2,1E-10);  sim.util.matrix.Vector Qhat=jacobianMatrix.transposeTimes(lambda);  return Qhat;}  }
class C{  public Vector2(){  this(0,0);}  }
class C{  public PropertyNameKind createPropertyNameKindFromString(EDataType eDataType,String initialValue){  PropertyNameKind result=PropertyNameKind.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  protected int dotNumber() throws IOException {  loop:   for (; ; ) {switch (nextChar()) {default :      break loop;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':  }}return numberUnit(false);}  }
class C{  public static void main(String[] args) throws Throwable {  Agent localAgent=createAgent(2020,true);  localAgent.setNominationStrategy(NominationStrategy.NOMINATE_HIGHEST_PRIO);  localAgent.addStateChangeListener(new IceProcessingListener());  localAgent.setControlling(false);  String localSDP=SdpUtils.createSDPDescription(localAgent);  Thread.sleep(500);  logger.info("=================== feed the following" + " to the remote agent ===================");  logger.info("\n" + localSDP);  logger.info("======================================" + "========================================\n");  CandidatePrinter printer=new CandidatePrinter();  printer.agent=localAgent;  localAgent.startCandidateTrickle(printer);  List<Component> allComponents=new LinkedList<>();  int allCandidates=0;  for (  IceMediaStream stream : localAgent.getStreams()) {    for (    Component component : stream.getComponents()) {      allComponents.add(component);      allCandidates+=component.getLocalCandidateCount();    }  }  logger.info("all candidates = " + allCandidates);  Thread.sleep(60000);}  }
class C{  protected <K extends Serializable,V extends Serializable>CacheBinding<K,V> persist(String name,TypeLiteral<K> keyType,TypeLiteral<V> valType){  return ((CacheProvider<K,V>)cache(name,keyType,valType)).persist(true);}  }
class C{  @Override public TodolistObject copy(){  return new TodolistObject(this);}  }
class C{  public void saveAsPNG(String file) throws IOException {  save(file,"png");}  }
class C{  private void makeDestroyed(){  try {    this.thread.shutdown();    this.state=DESTROYED;    if (logger.isTraceEnabled(LogMarker.DLS)) {      logger.trace(LogMarker.DLS,"DLockGrantor {} state is DESTROYED",this.dlock.getName());    }    if (this.untilDestroyed.getCount() > 0) {      this.untilDestroyed.countDown();    }    if (this.whileInitializing.getCount() > 0) {      this.whileInitializing.countDown();    }    this.dlock.getDistributionManager().removeMembershipListener(this.membershipListener);  }  finally {    this.dlock.getStats().incGrantors(-1);  }}  }
class C{  public static void cancelNotification(Context context,int notificationId){  NotificationManager notificationManager=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.cancel(notificationId);}  }
class C{  public void removeSubdirectory(String directory){  LinkedList<String> entriesToRemove=new LinkedList<String>();  for (  Entry<String,JarEntry> JarEntry : jarEntries.entrySet()) {    if (JarEntry.getKey().startsWith(directory)) {      entriesToRemove.add(JarEntry.getKey());    }  }  for (  String entryToRemove : entriesToRemove) {    jarEntries.remove(entryToRemove);  }}  }
class C{  public static void main(String[] args){  Log.printLine("Starting CloudSimExample2...");  try {    int num_user=1;    Calendar calendar=Calendar.getInstance();    boolean trace_flag=false;    CloudSim.init(num_user,calendar,trace_flag);    @SuppressWarnings("unused") Datacenter datacenter0=createDatacenter("Datacenter_0");    DatacenterBroker broker=createBroker();    int brokerId=broker.getId();    vmlist=new ArrayList<Vm>();    int vmid=0;    int mips=250;    long size=10000;    int ram=512;    long bw=1000;    int pesNumber=1;    String vmm="Xen";    Vm vm1=new Vm(vmid,brokerId,mips,pesNumber,ram,bw,size,vmm,new CloudletSchedulerTimeShared());    vmid++;    Vm vm2=new Vm(vmid,brokerId,mips,pesNumber,ram,bw,size,vmm,new CloudletSchedulerTimeShared());    vmlist.add(vm1);    vmlist.add(vm2);    broker.submitVmList(vmlist);    cloudletList=new ArrayList<Cloudlet>();    int id=0;    pesNumber=1;    long length=250000;    long fileSize=300;    long outputSize=300;    UtilizationModel utilizationModel=new UtilizationModelFull();    Cloudlet cloudlet1=new Cloudlet(id,length,pesNumber,fileSize,outputSize,utilizationModel,utilizationModel,utilizationModel);    cloudlet1.setUserId(brokerId);    id++;    Cloudlet cloudlet2=new Cloudlet(id,length,pesNumber,fileSize,outputSize,utilizationModel,utilizationModel,utilizationModel);    cloudlet2.setUserId(brokerId);    cloudletList.add(cloudlet1);    cloudletList.add(cloudlet2);    broker.submitCloudletList(cloudletList);    broker.bindCloudletToVm(cloudlet1.getCloudletId(),vm1.getId());    broker.bindCloudletToVm(cloudlet2.getCloudletId(),vm2.getId());    CloudSim.startSimulation();    List<Cloudlet> newList=broker.getCloudletReceivedList();    CloudSim.stopSimulation();    printCloudletList(newList);    Log.printLine("CloudSimExample2 finished!");  } catch (  Exception e) {    e.printStackTrace();    Log.printLine("The simulation has been terminated due to an unexpected error");  }}  }
class C{  public static ServiceType serviceType(final String type,final Criticality criticality,final String disasterImpact){  return new ServiceType(type,criticality,disasterImpact);}  }
class C{  public Period withPeriodType(PeriodType type){  type=DateTimeUtils.getPeriodType(type);  if (type.equals(getPeriodType())) {    return this;  }  return new Period(this,type);}  }
class C{  public boolean contains(Object o){  if (o == null)   return false;  if (!(o instanceof IInterval)) {    return false;  }  Iterator<IInterval> it=iterator();  while (it.hasNext()) {    IInterval intv=it.next();    if (intv.equals((IInterval)o)) {      return true;    }  }  return false;}  }
class C{  public boolean isNormalizeNames(){  return normalizeNames;}  }
class C{  public static int showMessageBox(Component parent,String title,String msg,int buttons,int messageType){  String icon;switch (messageType) {case JOptionPane.ERROR_MESSAGE:    icon="weka/gui/images/error.gif";  break;case JOptionPane.INFORMATION_MESSAGE:icon="weka/gui/images/information.gif";break;case JOptionPane.WARNING_MESSAGE:icon="weka/gui/images/information.gif";break;case JOptionPane.QUESTION_MESSAGE:icon="weka/gui/images/question.gif";break;default :icon="weka/gui/images/information.gif";break;}return JOptionPane.showConfirmDialog(parent,msg,title,buttons,messageType,getImageIcon(icon));}  }
class C{  public ImageException(Reason reason){  super();  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.name());}  }
class C{  public static String toOctalString(long v){  return IntegralToString.longToOctalString(v);}  }
class C{  @Override public Integer call(){  printDebugMessages();  currentState=(LR0State)stateKernel.closure(grammarInfo);  for (  LR0Item item : currentState.getItems()) {    if (item.isShiftable()) {      Symbol symbol=item.getNextSymbol();      if (symbol == EndOfInputStream) {        dfaEdges.add(Edge.createAcceptEdge(stateKernel,symbol));      } else {        LR0State shiftedState=(LR0State)currentState.goTo(symbol);        if (dfaStates.add(shiftedState)) {          threadPool.submit(new WorkerTaskLR0(shiftedState,threadPool,taskCountLock));        }        dfaEdges.add(new Edge(stateKernel,symbol,shiftedState,item));      }    }  }  decrementTaskCount();  return 0;}  }
class C{  public boolean isGridEnabled(){  return (gridEnabled);}  }
class C{  protected ProjectDynamicContent createProjectContent(AppContext ctx,ProjectPK projectPk,String genkey) throws ScopeException {  AppContext asRoot=ServiceUtils.getInstance().getRootUserContext(ctx);  Project project=getProject(asRoot,projectPk);  logger.info("refreshing content for Project '" + project.getName() + "'");  Universe root=new Universe(asRoot,project);  ProjectDynamicContent content=new ProjectDynamicContent(genkey);  HashMap<Table,Domain> coverage=new HashMap<Table,Domain>();  List<Domain> domains=DynamicManager.INSTANCE.loadDomains(root,coverage);  content.setDomains(domains);  projects.put(projectPk,content);  try {    List<Relation> relations=DynamicManager.INSTANCE.loadRelations(root,domains,coverage);    content.setRelations(relations);    Cartography cartography=new Cartography();    cartography.compute(domains,relations);    content.setCartography(cartography);    return content;  } catch (  Exception e) {    content.release();    return content;  }}  }
class C{  public static IgfsPath readPath(ObjectInput in) throws IOException {  IgfsPath res=new IgfsPath();  res.readExternal(in);  return res;}  }
class C{  public void process(List<JCCompilationUnit> cuList){  for (  JCCompilationUnit cu : cuList) {    scan(cu);  }  pass++;  for (  JCCompilationUnit cu : cuList) {    scan(cu);  }  for (  Overload overload : context.getAllOverloads()) {    overload.calculate(types,context.symtab);    if (overload.methods.size() > 1 && !overload.isValid) {      if (overload.coreMethod.sym.isConstructor()) {        context.classesWithWrongConstructorOverload.add(overload.coreMethod.sym.enclClass());      }    }  }}  }
class C{  public <K>T sync(AjaxCallback<K> callback){  ajax(callback);  callback.block();  return self();}  }
class C{  protected Subscription checkSubscriptionOwner(String subscriptionId,long subKey) throws OperationNotPermittedException, ObjectNotFoundException {  Subscription sub=loadSubscription(subscriptionId,subKey);  PlatformUser currentUser=dataManager.getCurrentUser();  List<UserGroup> administratedUserGroups=userGroupService.getUserGroupsForUserWithRole(currentUser.getKey(),UnitRoleType.ADMINISTRATOR.getKey());  PermissionCheck.owns(sub,currentUser,administratedUserGroups,LOG);  return sub;}  }
class C{  public void initialPositionIsSet(){  initialKingFile=getFile(bitscanForward(getPieceBB(WHITE,KING)));  long rookBB=getPieceBB(WHITE,ROOK);  int firstRook=getFile(bitscanForward(rookBB));  rookBB=bitscanClear(rookBB);  int secondRook=getFile(bitscanForward(rookBB));  if (firstRook < initialKingFile) {    initialLongRookFile=firstRook;    initialShortRookFile=secondRook;  } else {    initialLongRookFile=secondRook;    initialShortRookFile=firstRook;  }}  }
class C{  @Override public boolean isOutputTurnoutIncluded(String turnoutName) throws IllegalArgumentException {  Turnout t1=InstanceManager.turnoutManagerInstance().provideTurnout(turnoutName);  return isOutputTurnoutIncluded(t1);}  }
class C{  public String segment(int index){  if (index >= segments.length)   return null;  return segments[index];}  }
class C{  public IValueExpression labelType(){  return label;}  }
class C{  public final boolean hasFilter(){  return hasFilter;}  }
class C{  public RequestHandle delete(Context context,String url,Header[] headers,RequestParams params,ResponseHandlerInterface responseHandler){  HttpDelete httpDelete=new HttpDelete(getUrlWithQueryString(isUrlEncodingEnabled,url,params));  if (headers != null)   httpDelete.setHeaders(headers);  return sendRequest(httpClient,httpContext,httpDelete,null,responseHandler,context);}  }
class C{  public int read(char[] cbuf,int off,int len) throws IOException {  int num=0;  int val;  if (bo == 'b') {    while (num < len) {      if ((val=is.read()) < 0) {        return (num != 0) ? num : -1;      }      cbuf[off++]=(char)((val << 8) | (is.read() & 0xff));      num++;    }  } else {    while (num < len) {      if ((val=is.read()) < 0) {        return (num != 0) ? num : -1;      }      cbuf[off++]=(char)((is.read() << 8) | (val & 0xff));      num++;    }  }  return num;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public static String collection2string(final Collection<String> col){  final StringBuilder str=new StringBuilder(col.size() * 40);  if (col != null && !col.isEmpty()) {    final Iterator<String> it=col.iterator();    str.append(it.next());    while (it.hasNext()) {      if (str.length() > 0)       str.append(',');      str.append(it.next());    }  }  return str.toString();}  }
class C{  public static CompetitivePropertiesPanel createCompetitivePropertiesPanel(final NetworkPanel np,final CompetitiveGroup competitive){  CompetitivePropertiesPanel cpp=new CompetitivePropertiesPanel(np,competitive);  cpp.addListeners();  return cpp;}  }
class C{  public final void addAllHelperTexts(@NonNull final CharSequence... helperTexts){  ensureNotNull(helperTexts,"The array may not be null");  addAllHelperTexts(Arrays.asList(helperTexts));}  }
class C{  public static int max(int x,int y){  return (x >= y) ? x : y;}  }
class C{  public CGPoint positionAt(CGPoint pos){  CGPoint ret=CGPoint.zero();switch (layerOrientation_) {case CCTMXTiledMap.CCTMXOrientationOrtho:    ret=positionForOrthoAt(pos);  break;case CCTMXTiledMap.CCTMXOrientationIso:ret=positionForIsoAt(pos);break;case CCTMXTiledMap.CCTMXOrientationHex:ret=positionForHexAt(pos);break;}return ret;}  }
class C{  protected ScriptElementImpl(){  super();}  }
class C{  public static void doValidation(String region,int creates,int updates,int invalidates,int destroys){  Cache cacheClient=GemFireCacheImpl.getInstance();  EventListener listener=null;  listener=(EventListener)cacheClient.getRegion(region).getAttributes().getCacheListeners()[0];  listener.validate(creates,updates,invalidates,destroys);}  }
class C{  private void notifyChangeListeners(){  for (  final IInputPanelListener listener : m_listeners) {    try {      listener.changedInput();    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public boolean covers(Geometry g){  return baseGeom.covers(g);}  }
class C{  public String pop(){  String text=indent(--index);  if (indent > 0) {    count-=indent;  }  return text;}  }
class C{  public static void deleteVMsUsingEC2Client(AmazonEC2AsyncClient client,VerificationHost host,List<String> instanceIdsToDelete) throws Throwable {  TerminateInstancesRequest termRequest=new TerminateInstancesRequest(instanceIdsToDelete);  AsyncHandler<TerminateInstancesRequest,TerminateInstancesResult> terminateHandler=new AWSTerminateHandlerAsync(host);  client.terminateInstancesAsync(termRequest,terminateHandler);  waitForInstancesToBeTerminated(client,host,instanceIdsToDelete);}  }
class C{  public MoreLikeThisQueryBuilder maxDocFreq(int maxDocFreq){  this.maxDocFreq=maxDocFreq;  return this;}  }
class C{  public ResponseWriter cloneWithWriter(Writer writer){  try {    return new SVGResponseWriter(writer,getContentType(),getCharacterEncoding());  } catch (  FacesException e) {    throw new IllegalStateException();  }}  }
class C{  protected void addDeepPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_HistoryEntry_deep_feature"),getString("_UI_PropertyDescriptor_description","_UI_HistoryEntry_deep_feature","_UI_HistoryEntry_type"),SexecPackage.Literals.HISTORY_ENTRY__DEEP,true,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  public void testLogFilesTwoNodes() throws Exception {  checkOneNode(0);  checkOneNode(1);}  }
class C{  public void initialize(String featurePath) throws FeaturePathException {  this.featurePathString=featurePath;  this.featurePathElementNames=new ArrayList<String>();  this.featurePathElements=null;  if (this.featurePathString.indexOf("//") > -1) {    throw new FeaturePathException();  }  StringTokenizer tokenizer=new StringTokenizer(this.featurePathString,"/");  while (tokenizer.hasMoreTokens()) {    String token=tokenizer.nextToken();    this.featurePathElementNames.add(token);  }}  }
class C{  public void delete() throws IOException {  close();  Util.deleteContents(directory);}  }
class C{  private void displayEmptyScreenMessage(){  if (mEmptyView != null) {    mEmptyView.setVisibility(View.VISIBLE);  }}  }
class C{  public void w(Object str){  if (debug) {    if (logLevel <= Log.WARN) {      String name=getFunctionName();      if (name != null) {        Log.w(tag,name + "\n" + str+ "\n------------------------------------------------------------------------------");      } else {        Log.w(tag,str.toString());      }    }  }}  }
class C{  public boolean isEmpty(){  return n == 0;}  }
class C{  protected ReturnTypeImpl(){  super();}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.paint,stream);}  }
class C{  @Override public Settings init(String tag){  if (tag == null) {    throw new NullPointerException("tag may not be null");  }  if (tag.trim().length() == 0) {    throw new IllegalStateException("tag may not be empty");  }  LoggerPrinter.TAG=tag;  return settings;}  }
class C{  protected void doAttach(){  mDraweeHolder.onAttach();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.535 -0500",hash_original_method="DA98F71F7AF234EE48D27745943E51D8",hash_generated_method="10C67902A1722E17522D578EE4DF0395") public void replyToMessage(Message srcMsg,int what,int arg1,int arg2){  Message msg=Message.obtain();  msg.what=what;  msg.arg1=arg1;  msg.arg2=arg2;  replyToMessage(srcMsg,msg);}  }
class C{  public OMGraphicList filter(String SQLQuery){  return filter.filter(SQLQuery);}  }
class C{  public Iterator edgeIterator(){  return edges.iterator();}  }
class C{  public static <T>TStream<T> counter(TStream<T> stream){  return stream.pipe(new CounterOp<T>());}  }
class C{  public static boolean isInferenceVariable(TypeRef typeRef){  return typeRef != null && typeRef.getDeclaredType() instanceof InferenceVariable;}  }
class C{  @Override public boolean isLeafNode(){  return true;}  }
class C{  public PlainTextConverter(boolean enumerateSection){  SimpleWikiConfiguration config=null;  try {    new SimpleWikiConfiguration(WikiConstants.SWEBLE_CONFIG);  } catch (  IOException e) {    e.printStackTrace();  }catch (  JAXBException e) {    e.printStackTrace();  }  this.config=config;  this.wrapCol=Integer.MAX_VALUE;  this.enumerateSections=enumerateSection;}  }
class C{  private void updatePseudoCounts(double[] m,double[] n,double rho){  assert m.length == n.length;  for (int i=0; i < m.length; ++i) {    pseudoM[i]=decay * pseudoM[i] + m[i];    pseudoN[i]=decay * pseudoN[i] + n[i];  }  pseudoRho=(decay * pseudoRho) + rho;  if (DEBUG) {synchronized (System.err) {      System.err.println("M: " + Arrays.toString(m));      System.err.println("M-hat: " + Arrays.toString(pseudoM));      System.err.println("N: " + Arrays.toString(n));      System.err.println("N-hat: " + Arrays.toString(pseudoN));      System.err.println("Rho-hat: " + pseudoRho);      System.err.println();    }  }}  }
class C{  @Deprecated public EmailListRecipientFeed retrievePageOfRecipients(String emailList,String startRecipient) throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Retrieving one page of recipients" + (startRecipient != null ? " starting at " + startRecipient : "") + ".");  URL retrieveUrl=new URL(domainUrlBase + "emailList/" + SERVICE_VERSION+ "/"+ emailList+ "/recipient/");  AppsForYourDomainQuery query=new AppsForYourDomainQuery(retrieveUrl);  query.setStartRecipient(startRecipient);  return emailListRecipientService.query(query,EmailListRecipientFeed.class);}  }
class C{  public LinkTypeAttributeITCase(String name){  super(name);}  }
class C{  public void startDocument() throws org.xml.sax.SAXException {  m_stylesheetLevel++;  pushSpaceHandling(false);}  }
class C{  @Override public int hashCode(){  BasicInterval first=first();  BasicInterval last=last();  return frameOffset + (first.getBegin() << 4) + (last.getEnd() << 12);}  }
class C{  public void clearSelectedFeatures(){  selectedFeatures=new boolean[shapefile.getNumberOfRecords() + 1];  selectedFeatureNumbers.clear();  this.selectedFeatureNumber=-2;  this.pcs.firePropertyChange("selectedFeatureNumber",-1,selectedFeatureNumber);}  }
class C{  public void invalidate(){  tunnels.invalidate();}  }
class C{  public SearchResult(String name,Object obj,Attributes attrs){  super(name,obj);  this.attrs=attrs;}  }
class C{  private void processSequence(ExecutableSequence seq){  if (seq.hasNonExecutedStatements()) {    if (Log.isLoggingOn()) {      Log.logLine("Making all indices inactive (sequence has non-executed statements, so judging it inadequate for further extension).");      Log.logLine("Non-executed statement: " + seq.statementToCodeString(seq.getNonExecutedIndex()));    }    seq.sequence.clearAllActiveFlags();    return;  }  if (seq.hasFailure()) {    if (Log.isLoggingOn()) {      Log.logLine("Making all indices inactive (sequence reveals a failure, so judging it inadequate for further extension)");      Log.logLine("Failing sequence: " + seq.toCodeString());    }    seq.sequence.clearAllActiveFlags();    return;  }  if (seq.hasInvalidBehavior()) {    if (Log.isLoggingOn()) {      Log.logLine("Making all indices inactive (sequence has invalid behavior)");      Log.logLine("Invalid sequence: " + seq.toCodeString());    }    seq.sequence.clearAllActiveFlags();    return;  }  if (!seq.isNormalExecution()) {    if (Log.isLoggingOn()) {      Log.logLine("Making all indices inactive (exception thrown, or failure revealed during execution).");      Log.logLine("Statement with non-normal execution: " + seq.statementToCodeString(seq.getNonNormalExecutionIndex()));    }    seq.sequence.clearAllActiveFlags();    return;  }  for (int i=0; i < seq.sequence.size(); i++) {    NormalExecution e=(NormalExecution)seq.getResult(i);    Object runtimeValue=e.getRuntimeValue();    if (runtimeValue == null) {      if (Log.isLoggingOn()) {        Log.logLine("Making index " + i + " inactive (value is null)");      }      seq.sequence.clearActiveFlag(i);      continue;    }    Sequence stmts=seq.sequence;    Statement stmt=stmts.statements.get(i);    if (stmt.isMethodCall() && observers.contains(stmt.getOperation())) {      List<Integer> inputVars=stmts.getInputsAsAbsoluteIndices(i);      int receiver=inputVars.get(0);      seq.sequence.clearActiveFlag(receiver);    }    Class<?> objectClass=runtimeValue.getClass();    if (NonreceiverTerm.isNonreceiverType(objectClass) && !objectClass.equals(Class.class)) {      if (Log.isLoggingOn()) {        Log.logLine("Making index " + i + " inactive (value is a primitive)");      }      seq.sequence.clearActiveFlag(i);      boolean looksLikeObjToString=(runtimeValue instanceof String) && Value.looksLikeObjectToString((String)runtimeValue);      boolean tooLongString=(runtimeValue instanceof String) && !Value.stringLengthOK((String)runtimeValue);      if (runtimeValue instanceof Double && Double.isNaN((double)runtimeValue)) {        runtimeValue=Double.NaN;      }      if (runtimeValue instanceof Float && Float.isNaN((float)runtimeValue)) {        runtimeValue=Float.NaN;      }      if (!looksLikeObjToString && !tooLongString && runtimePrimitivesSeen.add(runtimeValue)) {        componentManager.addGeneratedSequence(Sequence.createSequenceForPrimitive(runtimeValue));      }    } else {      if (Log.isLoggingOn()) {        Log.logLine("Making index " + i + " active.");      }    }  }}  }
class C{  public static String date2Str(Date d){  return date2Str(d,DATE_FORMAT);}  }
class C{  public CompleteDiff(T part){  this.part=part;}  }
class C{  private static void printDataTable(McfData mcfData){  System.out.println("Data Table:");  if (mcfData.getTotalResults() > 0) {    List<ColumnHeaders> headers=mcfData.getColumnHeaders();    for (    ColumnHeaders header : headers) {      if (header.getDataType().equals(MCF_SEQUENCE_TYPE)) {        System.out.printf("%-50s",header.getName());      } else {        System.out.printf("%25s",header.getName());      }    }    System.out.println();    for (    List<McfData.Rows> row : mcfData.getRows()) {      for (int columnIndex=0; columnIndex < row.size(); ++columnIndex) {        ColumnHeaders header=headers.get(columnIndex);        McfData.Rows cell=row.get(columnIndex);        if (header.getDataType().equals(MCF_SEQUENCE_TYPE)) {          System.out.printf("%-50s",getStringFromMcfSequence(cell.getConversionPathValue()," > "));        } else         if (header.getDataType().equals(INTEGER_TYPE)) {          System.out.printf("%25d",Long.parseLong(cell.getPrimitiveValue()));        } else {          System.out.printf("%25s",cell.getPrimitiveValue());        }      }      System.out.println();    }  } else {    System.out.println("No rows found");  }  System.out.println();}  }
class C{  public static final void show(Window owner,Settings settings){  SettingsDialog dialog=new SettingsDialog(owner,settings);  dialog.setLocationRelativeTo(owner);  dialog.setVisible(true);  if (!dialog.canceled) {    dialog.pnlSettings.setSettings(settings);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void error(Object message){  log(Level.SEVERE,String.valueOf(message),null);}  }
class C{  public GreetingMatchesNameCondition(final String name){  this.name=name;  nameWords=Arrays.asList(name.toLowerCase().split(" "));}  }
class C{  public MbfsRunner(DagWrapper dagWrapper,KnowledgeBoxModel knowledgeBoxModel,Parameters params){  super(dagWrapper.getDag(),params,knowledgeBoxModel);}  }
class C{  private boolean cacheComplete(){  final boolean complete;  if (m_cache != null) {    complete=m_cache.isComplete();  } else {    complete=false;  }  return complete;}  }
class C{  @Override public void endElement(String namespace,String localName,String qName) throws SAXException {  logger.fine("End element " + qName);  if (unrecognizedElements > 0) {    --unrecognizedElements;    if (curHandler != null && curHandler.innerXml != null) {      try {        curHandler.innerXml.endElement();      } catch (      IOException e) {        throw new SAXException(e);      }    }  } else   if (curHandler != null) {    if (curHandler.xmlBlob != null) {      StringBuffer blob=curHandler.innerXmlStringWriter.getBuffer();      if (blob.length() != 0) {        curHandler.xmlBlob.setBlob(blob.toString());        if (curHandler.fullTextIndex) {          curHandler.xmlBlob.setFullText(curHandler.fullTextIndexWriter.toString());        }      }    }    try {      if (curHandler.buffer != null) {        curHandler.value=curHandler.buffer.toString();        curHandler.buffer=null;      }      curHandler.processEndElement();    } catch (    ParseException e) {      throw new SAXException(e);    }    curHandler=curHandler.parent;  }}  }
class C{  public static void scaleWeights(List<Neuron> src,List<Neuron> tar,double scalar){  for (  Neuron source : src) {    for (    Neuron target : tar) {      Synapse weight=Network.getSynapse(source,target);      if (weight != null) {        Network.getSynapse(source,target).forceSetStrength(weight.getStrength() * scalar);      }    }  }}  }
class C{  @Before public void init(){  actorSystem=ActorSystem.create("AkkaRemoteServer",ConfigFactory.load());  metrics=new MetricRegistry();  Histogram testHistogram=metrics.histogram("testHistogram");  testHistogram.update(100);  testHistogram.update(10);  MetricRegistryHolder.getInstance().setMetrics(metrics);}  }
class C{  public static Options fromConfig(CeylonConfig config){  Options options=new Options();  options.mapOptions(config);  return options;}  }
class C{  public static Resource toResourceNotExisting(PageContext pc,String destination){  return toResourceNotExisting(pc,destination,pc.getConfig().allowRealPath(),false);}  }
class C{  public void push(E o){  if (size >= list.length) {    doubleList();  }  list[size++]=o;}  }
class C{  public boolean hideOverflowMenu(){  if (mPostedOpenRunnable != null && mMenuView != null) {    ((View)mMenuView).removeCallbacks(mPostedOpenRunnable);    mPostedOpenRunnable=null;    return true;  }  MenuPopupHelper popup=mOverflowPopup;  if (popup != null) {    popup.dismiss();    return true;  }  return false;}  }
class C{  public void killContainer(String container,int signal) throws IOException {  final List<Pair<String,?>> headers=new ArrayList<>(2);  headers.add(Pair.of("Content-Type",MediaType.TEXT_PLAIN));  headers.add(Pair.of("Content-Length",0));  try (DockerConnection connection=openConnection(dockerDaemonUri).method("POST").path("/containers/" + container + "/kill").query("signal",signal).headers(headers)){    final DockerResponse response=connection.request();    final int status=response.getStatus();    if (NO_CONTENT.getStatusCode() != status) {      throw new DockerException(getDockerExceptionMessage(response),status);    }  } }  }
class C{  public static void printLastError(){  System.out.println("Last error: " + gdal.GetLastErrorMsg());  System.out.println("Last error no: " + gdal.GetLastErrorNo());  System.out.println("Last error type: " + gdal.GetLastErrorType());}  }
class C{  public static void registerScrollView(Activity activity,ObservableScrollView mScrollView,ObservableScrollViewCallbacks observableScrollViewCallbacks){  if (activity != null && hashMap.containsKey(activity)) {    MaterialViewPagerAnimator animator=hashMap.get(activity);    if (animator != null) {      animator.registerScrollView(mScrollView,observableScrollViewCallbacks);    }  }}  }
class C{  public void close(){  closeParent();}  }
class C{  public static Test suite(){  return (new TestSuite(AjaxMessageITCase.class));}  }
class C{  public static Map<String,Object> createPartyRelationshipType(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_CREATE");  if (result.size() > 0)   return result;  GenericValue partyRelationshipType=delegator.makeValue("PartyRelationshipType",UtilMisc.toMap("partyRelationshipTypeId",context.get("partyRelationshipTypeId")));  partyRelationshipType.set("parentTypeId",context.get("parentTypeId"),false);  partyRelationshipType.set("hasTable",context.get("hasTable"),false);  partyRelationshipType.set("roleTypeIdValidFrom",context.get("roleTypeIdValidFrom"),false);  partyRelationshipType.set("roleTypeIdValidTo",context.get("roleTypeIdValidTo"),false);  partyRelationshipType.set("description",context.get("description"),false);  partyRelationshipType.set("partyRelationshipName",context.get("partyRelationshipName"),false);  try {    if ((EntityQuery.use(delegator).from(partyRelationshipType.getEntityName()).where(partyRelationshipType.getPrimaryKey()).queryOne()) != null) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyRelationshipTypeAlreadyExists",locale));    }  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyRelationshipTypeReadFailure",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  try {    partyRelationshipType.create();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyRelationshipTypeWriteFailure",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public DaemonClient(URL url,String username){  this(url,username,"");}  }
class C{  public static Map<String,String> parseKeyAndValueToMap(String source,boolean ignoreSpace){  return parseKeyAndValueToMap(source,DEFAULT_KEY_AND_VALUE_SEPARATOR,DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR,ignoreSpace);}  }
class C{  @POST @Path("node") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value="Adds Codenvy node in the multi-node environment",response=NodeInfo.class) @ApiResponses(value={@ApiResponse(code=201,message="Successfully added"),@ApiResponse(code=500,message="Server error")}) public Response addNode(@QueryParam(value="dns") @ApiParam(required=true,value="node DNS to add") String dns){  try {    NodeInfo nodeInfo=facade.addNode(dns);    return Response.status(Response.Status.CREATED).entity(nodeInfo).build();  } catch (  Exception e) {    return handleException(e);  }}  }
class C{  public int indexOf(CstString string){  if (string == null) {    throw new NullPointerException("string == null");  }  throwIfNotPrepared();  StringIdItem s=strings.get(string);  if (s == null) {    throw new IllegalArgumentException("not found");  }  return s.getIndex();}  }
class C{  public AccountHeaderBuilder withCloseDrawerOnProfileListClick(boolean closeDrawerOnProfileListClick){  this.mCloseDrawerOnProfileListClick=closeDrawerOnProfileListClick;  return this;}  }
class C{  public static FilterPredClause parse(JsonElement predElt,Set<String> filterFields) throws FilterParseException {  String field=Utils.getFieldValueAsString(predElt,"field");  if (field == null)   throw new FilterParseException("Missing \"field\" property in\n" + predElt);  if (!filterFields.contains(field))   throw new FilterParseException("Unknown filter field \"" + field + "\" in\n"+ predElt);  String opStr=Utils.getFieldValueAsString(predElt,"comp-op");  if (opStr == null)   throw new FilterParseException("Missing \"comp-op\" property in\n" + predElt);  CompareOp op=CompareOp.parse(opStr);  String value=Utils.getFieldValueAsString(predElt,"value");  if (value == null)   throw new FilterParseException("Missing \"value\" property in\n" + predElt);  return new FilterPredClause(field,op,value);}  }
class C{  protected JavaTypeMapImpl(Consumer<Map<String,Class<?>>> installer){  rules=new CopyOnWriteArrayList<>();  inner=newCaseInsensitiveMap();  inner.put("CHAR",String.class);  inner.put("VARCHAR",String.class);  inner.put("LONGVARCHAR",String.class);  inner.put("LONGVARCHAR",String.class);  inner.put("NUMERIC",BigDecimal.class);  inner.put("DECIMAL",BigDecimal.class);  inner.put("BIT",Integer.class);  inner.put("TINYINT",Byte.class);  inner.put("SMALLINT",Short.class);  inner.put("INTEGER",Integer.class);  inner.put("BIGINT",Long.class);  inner.put("REAL",Float.class);  inner.put("FLOAT",Double.class);  inner.put("DOUBLE",Double.class);  inner.put("DATE",java.sql.Date.class);  inner.put("TIME",Time.class);  inner.put("TIMESTAMP",Timestamp.class);  inner.put("CLOB",Clob.class);  inner.put("BLOB",Blob.class);  inner.put("BOOLEAN",Boolean.class);  inner.put("BOOL",Boolean.class);  inner.put("YEAR",Integer.class);  inner.put("UUID",UUID.class);  installer.accept(inner);  assertJavaTypesKnown();}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public void deselectAllDoNotFireEvent(){  deselectAll(false);}  }
class C{  static final public boolean[] parseBoolean(byte what[]){  boolean outgoing[]=new boolean[what.length];  for (int i=0; i < what.length; i++) {    outgoing[i]=(what[i] != 0);  }  return outgoing;}  }
class C{  public EveningTrip(int nrOfeveningActivityNodes,Coord location){  eveningActivityNodes=new EveningActivityMovement[nrOfeveningActivityNodes];  this.location=location;  eveningActivityNodesInBuffer=0;}  }
class C{  @Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,List<Double> values,XYSeriesRenderer renderer,SupportSeriesRender supportSeriesRender,float yAxisValue,int seriesIndex,int startIndex){  this.supportSeriesRender=supportSeriesRender;  float lineWidth=paint.getStrokeWidth();  paint.setStrokeWidth(renderer.getLineWidth());  final FillOutsideLine[] fillOutsideLine=renderer.getFillOutsideLine();  for (  FillOutsideLine fill : fillOutsideLine) {    if (fill.getType() != FillOutsideLine.Type.NONE) {      paint.setColor(fill.getColor());      List<Float> fillPoints=new ArrayList<Float>();      int[] range=fill.getFillRange();      if (range == null) {        fillPoints.addAll(points);      } else {        fillPoints.addAll(points.subList(range[0] * 2,range[1] * 2));      }      final float referencePoint;switch (fill.getType()) {case BOUNDS_ALL:        referencePoint=yAxisValue;      break;case BOUNDS_BELOW:    referencePoint=yAxisValue;  break;case BOUNDS_ABOVE:referencePoint=yAxisValue;break;case BELOW:referencePoint=canvas.getHeight();break;case ABOVE:referencePoint=0;break;default :throw new RuntimeException("You have added a new type of filling but have not implemented.");}if (fill.getType() == FillOutsideLine.Type.BOUNDS_ABOVE || fill.getType() == FillOutsideLine.Type.BOUNDS_BELOW) {List<Float> boundsPoints=new ArrayList<Float>();boolean add=false;if (fill.getType() == FillOutsideLine.Type.BOUNDS_ABOVE && fillPoints.get(1) < referencePoint || fill.getType() == FillOutsideLine.Type.BOUNDS_BELOW && fillPoints.get(1) > referencePoint) {boundsPoints.add(fillPoints.get(0));boundsPoints.add(fillPoints.get(1));add=true;}for (int i=3; i < fillPoints.size(); i+=2) {float prevValue=fillPoints.get(i - 2);float value=fillPoints.get(i);if (prevValue < referencePoint && value > referencePoint || prevValue > referencePoint && value < referencePoint) {float prevX=fillPoints.get(i - 3);float x=fillPoints.get(i - 1);boundsPoints.add(prevX + (x - prevX) * (referencePoint - prevValue) / (value - prevValue));boundsPoints.add(referencePoint);if (fill.getType() == FillOutsideLine.Type.BOUNDS_ABOVE && value > referencePoint || fill.getType() == FillOutsideLine.Type.BOUNDS_BELOW && value < referencePoint) {i+=2;add=false;} else {boundsPoints.add(x);boundsPoints.add(value);add=true;}} else {if (add || fill.getType() == FillOutsideLine.Type.BOUNDS_ABOVE && value < referencePoint || fill.getType() == FillOutsideLine.Type.BOUNDS_BELOW && value > referencePoint) {boundsPoints.add(fillPoints.get(i - 1));boundsPoints.add(value);}}}fillPoints.clear();fillPoints.addAll(boundsPoints);}int length=fillPoints.size();fillPoints.set(0,fillPoints.get(0) + 1);fillPoints.add(fillPoints.get(length - 2));fillPoints.add(referencePoint);fillPoints.add(fillPoints.get(0));fillPoints.add(fillPoints.get(length + 1));for (int i=0; i < length + 4; i+=2) {if (fillPoints.get(i + 1) < 0) {fillPoints.set(i + 1,0f);}}paint.setStyle(Style.FILL);drawPath(canvas,fillPoints,paint,true);}}paint.setColor(renderer.getColor());paint.setStyle(Style.STROKE);drawPath(canvas,points,paint,false);paint.setStrokeWidth(lineWidth);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void unregisterObserverProxyLocked(){  if (mObserver != null) {    mCursor.unregisterContentObserver(mObserver);    mObserver.unlinkToDeath(this);    mObserver=null;  }}  }
class C{  @Override public void endWindow(){  if (!mergedTuple.isEmpty()) {    mergedport.emit(mergedTuple);    mergedTuple=new HashMap<K,V>();  }}  }
class C{  public Texture(int width,int height,int pixelFormat) throws Exception {  this.id=glGenTextures();  this.width=width;  this.height=height;  glBindTexture(GL_TEXTURE_2D,this.id);  glTexImage2D(GL_TEXTURE_2D,0,GL_DEPTH_COMPONENT,this.width,this.height,0,pixelFormat,GL_FLOAT,(ByteBuffer)null);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_CLAMP_TO_EDGE);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_CLAMP_TO_EDGE);}  }
class C{  final long fn(long v,long x){  return v + x;}  }
class C{  public void testFieldIsMissing() throws Exception {  Directory dir=newDirectory();  IndexWriterConfig iwc=newIndexWriterConfig(new MockAnalyzer(random()));  iwc.setMergePolicy(newLogMergePolicy());  RandomIndexWriter iw=new RandomIndexWriter(random(),dir,iwc);  FieldType offsetsType=new FieldType(TextField.TYPE_STORED);  offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);  Document doc=new Document();  Field body=new Field("body","test this is.  another sentence this test has.  far away is that planet.",offsetsType);  doc.add(body);  iw.addDocument(doc);  IndexReader ir=iw.getReader();  iw.close();  IndexSearcher searcher=newSearcher(ir);  PostingsHighlighter highlighter=new PostingsHighlighter();  Query query=new TermQuery(new Term("bogus","highlighting"));  int[] docIDs=new int[]{0};  String snippets[]=highlighter.highlightFields(new String[]{"bogus"},query,searcher,docIDs,new int[]{2}).get("bogus");  assertEquals(1,snippets.length);  assertNull(snippets[0]);  ir.close();  dir.close();}  }
class C{  public static <T>T checkArgumentNotNull(T reference,@Nullable Object errorMessage){  checkArgument(reference != null,errorMessage);  return reference;}  }
class C{  public TimingHit redirectResponseTime(Integer value){  setInteger(REDIRECT_RESPONSE_TIME,value);  return this;}  }
class C{  public static WorkspaceSession openSessionIn(File tempRoot) throws CoreException {  if (!tempRoot.isDirectory()) {    if (!tempRoot.mkdirs()) {      throw new CoreException(new Status(IStatus.ERROR,PLUGIN_ID,"Failed to create temporary directory at " + tempRoot.getAbsolutePath()));    }  }  File stampFile;  try {    stampFile=File.createTempFile("xmind",".core",tempRoot);  } catch (  IOException e) {    throw new CoreException(new Status(IStatus.ERROR,PLUGIN_ID,"Failed to create workspace stamp file in " + tempRoot.getAbsolutePath(),e));  }  RandomAccessFile stampFileWrapper;  try {    stampFileWrapper=new RandomAccessFile(stampFile,"rw");  } catch (  FileNotFoundException e) {    stampFile.delete();    throw new CoreException(new Status(IStatus.ERROR,PLUGIN_ID,"Failed to find created workspace stamp file at " + stampFile.getAbsolutePath(),e));  }  FileLock stampFileLock=null;  try {    for (int err=0; err < 10; err++) {      try {        stampFileLock=stampFileWrapper.getChannel().tryLock();      } catch (      IOException e) {      }      if (stampFileLock != null)       break;      Thread.sleep(1);    }  } catch (  InterruptedException e) {  }  if (stampFileLock == null) {    try {      stampFileWrapper.close();    } catch (    IOException e) {    }    stampFile.delete();    throw new CoreException(new Status(IStatus.ERROR,PLUGIN_ID,"Failed to lock workspace stamp file. Please make sure you have r/w permission at " + tempRoot.getAbsolutePath()));  }  return new WorkspaceSession(tempRoot,stampFile,stampFileWrapper,stampFileLock);}  }
class C{  @RequestMapping(value="/register",method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE,produces=MediaType.APPLICATION_JSON_VALUE) public ResponseEntity<Account> register(@Valid @RequestBody Account account,BindingResult errors){  if (errors.hasErrors()) {    throw new InvalidRequestException("Username already exists",errors);  }  Account createdAccount=accountService.createNewAccount(account);  return new ResponseEntity<Account>(createdAccount,HttpStatus.CREATED);}  }
class C{  public PseudoTcpSocket createSocket(DatagramSocket datagramSocket) throws SocketException {  return new PseudoTcpSocket(new PseudoTcpSocketImpl(DEFAULT_CONVERSATION_ID,datagramSocket));}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  builder.put(k2,v2);  builder.put(k3,v3);  builder.put(k4,v4);  return builder.build();}  }
class C{  private void skipUnreadMessages(){  processConfigMessages(new LinkedList<String>());  log.info("Config manager skipped messages");}  }
class C{  private static void checkVirtualMachines(Datastore datastore) throws Exception {  VirtualMachine[] vms=datastore.getVms();  if ((vms != null) && (vms.length > 0)) {    Set<String> names=Sets.newTreeSet();    for (    VirtualMachine vm : vms) {      names.add(vm.getName());    }    throw new Exception("Datastore " + datastore.getName() + " contains "+ vms.length+ " Virtual Machines: "+ Joiner.on(",").join(names));  }}  }
class C{  public void disconnect(String reason){  disconnect(reason,false);}  }
class C{  public IndependenceTest indTestSubset(List vars){  return null;}  }
class C{  private TimeSpinnerTimer zCreateTimeSpinnerTimer(int changeAmountMinutes){  return new TimeSpinnerTimer(this,changeAmountMinutes);}  }
class C{  public BaseCheckBox(){  this(DOM.createSpan());  setStyleName("gwt-CheckBox");}  }
class C{  public NamedColumnProjection(String[] names,boolean include){  m_names=new HashSet();  for (int i=0; i < names.length; ++i)   m_names.add(names[i]);  m_include=include;}  }
class C{  public void add(MapItemValue miv){  if (len >= items.length) {    items=LazyMap.grow(items);  }  items[len]=miv;  len++;}  }
class C{  public SubscriptionAcknowledgement clone(){  SubscriptionAcknowledgement result=new SubscriptionAcknowledgement();  result.SubscriptionId=SubscriptionId;  result.SequenceNumber=SequenceNumber;  return result;}  }
class C{  public void findBrokenClass() throws TestFailed, InvocationTargetException {  findDexClass(CLASS_NAME);}  }
class C{  @Override public int lengthOfYear(){  return chrono.getYearLength(prolepticYear);}  }
class C{  @Override public void onExceededDatabaseQuota(String url,String databaseIdentifier,long currentQuota,long estimatedSize,long totalUsedQuota,WebStorage.QuotaUpdater quotaUpdater){  LOG.d(LOG_TAG,"onExceededDatabaseQuota estimatedSize: %d  currentQuota: %d  totalUsedQuota: %d",estimatedSize,currentQuota,totalUsedQuota);  quotaUpdater.updateQuota(MAX_QUOTA);}  }
class C{  public long timeSinceLast(){  long currentTime=System.currentTimeMillis();  return currentTime - lastMessageTime;}  }
class C{  public static List<BatchResponse> postWithSingleRequest(final RequestSpecification requestSpec,final ResponseSpecification responseSpec,final BatchRequest br){  final List<BatchRequest> batchRequests=new ArrayList<>();  batchRequests.add(br);  final String jsonifiedRequest=BatchHelper.toJsonString(batchRequests);  final List<BatchResponse> response=BatchHelper.postBatchRequestsWithoutEnclosingTransaction(requestSpec,responseSpec,jsonifiedRequest);  Assert.assertNotNull(response);  Assert.assertTrue(response.size() > 0);  return response;}  }
class C{  public void testTimedPoll0() throws InterruptedException {  LinkedBlockingQueue q=populatedQueue(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(i,q.poll(0,MILLISECONDS));  }  assertNull(q.poll(0,MILLISECONDS));}  }
class C{  public int currentSegment(double[] coords){  if (isDone()) {    throw new NoSuchElementException("rect iterator out of bounds");  }  if (index == 5) {    return SEG_CLOSE;  }  coords[0]=x;  coords[1]=y;  if (index == 1 || index == 2) {    coords[0]+=w;  }  if (index == 2 || index == 3) {    coords[1]+=h;  }  if (affine != null) {    affine.transform(coords,0,coords,0,1);  }  return (index == 0 ? SEG_MOVETO : SEG_LINETO);}  }
class C{  public boolean isPalindrome(String s){  if (s == null || s.length() == 0) {    return true;  }  int i=0;  int j=s.length() - 1;  s=s.toLowerCase();  while (i < j) {    while (i < j && !Character.isLetterOrDigit(s.charAt(i))) {      i++;    }    if (i >= j) {      return true;    }    while (i < j && !Character.isLetterOrDigit(s.charAt(j))) {      j--;    }    if (s.charAt(i) != s.charAt(j)) {      return false;    }    i++;    j--;  }  return true;}  }
class C{  protected PseudostateImpl(){  super();}  }
class C{  public List<Answer> _queryChallenge_Answers(long challengeId){synchronized (this) {    if (challenge_AnswersQuery == null) {      QueryBuilder<Answer> queryBuilder=queryBuilder();      queryBuilder.where(Properties.ChallengeId.eq(null));      challenge_AnswersQuery=queryBuilder.build();    }  }  Query<Answer> query=challenge_AnswersQuery.forCurrentThread();  query.setParameter(0,challengeId);  return query.list();}  }
class C{  @Override public boolean dataDefinitionCausesTransactionCommit(){  debugCodeCall("dataDefinitionCausesTransactionCommit");  return true;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  Node gen;  NodeList gList;  Element genElement;  int nodeType;  doc=(Document)load("staffNS",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  gen=gender.getFirstChild();  nodeType=(int)gen.getNodeType();  if (equals(1,nodeType)) {    gen=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",gen);  }  gList=gen.getChildNodes();  genElement=(Element)gList.item(0);  assertNotNull("notnull",genElement);{    boolean success=false;    try {      genElement.removeAttributeNS("www.xyz.com","local1");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public static BlazeGraphEmbedded open(final BigdataSailRepository repo,final Configuration config){  Objects.requireNonNull(repo);  if (!repo.getDatabase().isStatementIdentifiers()) {    throw new IllegalArgumentException("BlazeGraph/TP3 requires statement identifiers.");  }  final long lastCommitTime=lastCommitTime(repo);  config.setProperty(BlazeGraph.Options.LIST_INDEX_FLOOR,lastCommitTime);  return new BlazeGraphEmbedded(repo,config);}  }
class C{  public void init(Frame frame){  this.target=frame;  this.framePeer=(XFramePeer)frame.getPeer();  XCreateWindowParams params=getDelayedParams();  params.remove(DELAYED);  params.add(PARENT_WINDOW,framePeer.getShell());  params.add(TARGET,frame);  init(params);}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  public void beginOperation(final String identifier){  if (identifier.equals(OPERATION_OTHER)) {    throw new RuntimeException("Identifier " + OPERATION_OTHER + " is reserved! Please use another one. Aborting!");  }  String ident="BEGIN " + identifier;  ensureIdentifier(ident);  this.currentIterationValues.put(ident,Long.valueOf(System.currentTimeMillis()));  this.currentIterationChildren.put(identifier,new ArrayList<String>());  if (this.currentMeasuredOperations.size() > 0) {    String parent=this.currentMeasuredOperations.peek();    this.currentIterationChildren.get(parent).add(identifier);  }  this.currentMeasuredOperations.push(identifier);}  }
class C{  public boolean empty(){  return m_firstFree == 0;}  }
class C{  public RCPNameToFileIStream(String[] libraryPathEntries){  if (libraryPathEntries != null) {    for (int i=0; i < libraryPathEntries.length; i++) {      if (new File(libraryPathEntries[i]).exists()) {        this.libraryPathEntries.addElement(libraryPathEntries[i]);      }    }  }  initInternalLibraryPath();}  }
class C{  private static void queryForName(Table table,String name){  System.out.println("Querying for name: '" + name + "'");  Vector queryVector=table.getRowVectorStore().getVector(name);  for (  SearchResult result : table.searchRowVectors(queryVector)) {    System.out.println(result.toTexTableString(20));  }}  }
class C{  private List<CoS> fetchDetailsOfAllFileCos() throws SOSFailure {  final String methodName="fetchDetailsOfAllFileCos(): ";  log.trace(methodName + "Entry");  final String FILE_COS_DETAIL_URI="/file/vpools/%s";  List<CoS> fileCosIdList=new ArrayList<CoS>();  try {    for (    String cosId : _fileCosIdList) {      CoS.FileCoS cos=_client.queryObject(String.format(FILE_COS_DETAIL_URI,cosId),CoS.FileCoS.class);      if (cos.isInactive() == false && cos.getId() != null) {        fileCosIdList.add(cos);        log.trace(methodName + cos);      }    }    log.trace(methodName + "Exit returning cos list of size[" + fileCosIdList.size()+ "]");    return fileCosIdList;  } catch (  NoSuchAlgorithmException e) {    log.error(methodName + "NoSuchAlgorithmException occured",e);    throw new SOSFailure(e);  }catch (  UniformInterfaceException e) {    log.error(methodName + "UniformInterfaceException occured",e);    throw new SOSFailure(e);  }}  }
class C{  public boolean hasMemberWithFilterInfo(){  return this.memberWithFilterInfoExists;}  }
class C{  private void init(){  if (SessionCfg.isSquash) {    boolean unsquash=UnsquashUtils.unsquash(folder);    if (!unsquash) {      this.logPan.addLog(R.getString(S.LOG_ERROR) + R.getString("0000141"));      this.threadWatcher.sendFailed(this);      isinitialized=false;      return;    } else {      new File(folder.getAbsolutePath() + File.separator + "odex.app.sqsh").delete();      new File(folder.getAbsolutePath() + File.separator + "odex.priv-app.sqsh").delete();      new File(folder.getAbsolutePath() + File.separator + "odex.framework.sqsh").delete();    }  }  try {    ArrayList<File> boot=FilesUtils.searchExactFileNames(new File(folder.getAbsolutePath() + File.separator + S.SYSTEM_FRAMEWORK),"boot.oat");    SessionCfg.setBootOatFile(boot.get(0));    isinitialized=FilesUtils.copyFile(SessionCfg.getBootOatFile(),S.getBootTmp());    if (!isinitialized) {      this.threadWatcher.sendFailed(this);      this.logPan.addLog(R.getString(S.LOG_ERROR) + R.getString("0000139"));      return;    }  } catch (  Exception e) {    Logger.appendLog("[MainWorker][EX]" + e.getStackTrace());  }  isinitialized=isinitialized && Deodexer.oat2dexBoot(S.getBootTmp());  if (!isinitialized) {    this.logPan.addLog(R.getString(S.LOG_ERROR) + R.getString("0000140"));    this.threadWatcher.sendFailed(this);    return;  }  File bootFiles=new File(S.getBootTmpDex().getAbsolutePath());  worker1List=this.getapkOdexFiles();  int half=worker1List.size() / 2;  worker2List=new ArrayList<File>();  for (int i=worker1List.size() - 1; i >= half; i=worker1List.size() - 1) {    worker2List.add(worker1List.get(i));    worker1List.remove(i);  }  File framework=new File(folder.getAbsolutePath() + File.separator + S.SYSTEM_FRAMEWORK);  this.worker3List=new ArrayList<File>();  for (  String ext : exts) {    this.worker3List.addAll(FilesUtils.searchrecursively(framework,ext));  }  this.worker3List=ArrayUtils.deletedupricates(this.worker3List);  ArrayList<File> temapkinfram=new ArrayList<File>();  for (  File f : this.worker3List) {    ArrayList<File> apksInFram=ArrayUtils.deletedupricates(FilesUtils.searchExactFileNames(new File(folder.getAbsolutePath() + File.separator + S.SYSTEM_FRAMEWORK),f.getName().substring(0,f.getName().lastIndexOf(".")) + ".apk"));    Logger.appendLog("[MainWorker][I]" + "Searching for ");    if (!apksInFram.isEmpty() && FilesUtils.searchExactFileNames(new File(folder.getAbsolutePath() + File.separator + S.SYSTEM_FRAMEWORK),f.getName().substring(0,f.getName().lastIndexOf(".")) + ".jar").isEmpty()) {      temapkinfram.add(f);      Logger.appendLog("[MainWorker][I]" + "Found moving it to apk worker's list ");    } else {      Logger.appendLog("[MainWorker][I]" + "Not found assuming odex file belongs to a .jar file ...");    }  }  temapkinfram=ArrayUtils.deletedupricates(temapkinfram);  this.worker1List.addAll(temapkinfram);  this.worker3List.removeAll(temapkinfram);  if (!this.otherJars.isEmpty()) {    this.worker3List.addAll(otherJars);  }  apk1=new ApkWorker(worker1List,logPan,S.getWorker1Folder(),SessionCfg.isSign(),SessionCfg.isZipalign());  apk2=new ApkWorker(worker2List,logPan,S.getWorker2Folder(),SessionCfg.isSign(),SessionCfg.isZipalign());  jar=new JarWorker(worker3List,logPan,S.getWorker3Folder());  File[] boots=bootFiles.listFiles();  worker4List=new ArrayList<File>();  for (  File f : boots) {    if (!f.getName().endsWith(S.CLASSES_2) && !f.getName().endsWith(S.CLASSES_3)) {      if (f.getName().endsWith(".dex")) {        worker4List.add(f);      }    }  }  boot=new BootWorker(worker4List,S.getWorker4Folder(),this.logPan);  Logger.appendLog("[MainWorker][I]" + "APK list 1");  for (  File f : this.worker1List) {    Logger.appendLog("[MainWorker][I]" + f.getAbsolutePath());  }  Logger.appendLog("[MainWorker][I]" + "APK list 2");  for (  File f : this.worker2List) {    Logger.appendLog("[MainWorker][I]" + f.getAbsolutePath());  }  Logger.appendLog("[MainWorker][I]" + "Jar list 3");  for (  File f : this.worker3List) {    Logger.appendLog("[MainWorker][I]" + f.getAbsolutePath());  }  Logger.appendLog("[MainWorker][I]" + "boot list 4 (boot)");  for (  File f : this.worker4List) {    Logger.appendLog("[MainWorker][I]" + f.getAbsolutePath());  }  apk1.addThreadWatcher(this);  apk2.addThreadWatcher(this);  boot.addThreadWatcher(this);  jar.addThreadWatcher(this);  tasks.add(apk1);  tasks.add(apk2);  tasks.add(jar);  tasks.add(boot);  this.initPannel();}  }
class C{  private static void applyStyle(AutoCompleteTextView v,AttributeSet attrs,int defStyleAttr,int defStyleRes){  TypedArray a=v.getContext().obtainStyledAttributes(attrs,R.styleable.AutoCompleteTextView,defStyleAttr,defStyleRes);  int n=a.getIndexCount();  for (int i=0; i < n; i++) {    int attr=a.getIndex(i);    if (attr == R.styleable.AutoCompleteTextView_android_completionHint)     v.setCompletionHint(a.getString(attr)); else     if (attr == R.styleable.AutoCompleteTextView_android_completionThreshold)     v.setThreshold(a.getInteger(attr,0)); else     if (attr == R.styleable.AutoCompleteTextView_android_dropDownAnchor)     v.setDropDownAnchor(a.getResourceId(attr,0)); else     if (attr == R.styleable.AutoCompleteTextView_android_dropDownHeight)     v.setDropDownHeight(a.getLayoutDimension(attr,ViewGroup.LayoutParams.WRAP_CONTENT)); else     if (attr == R.styleable.AutoCompleteTextView_android_dropDownWidth)     v.setDropDownWidth(a.getLayoutDimension(attr,ViewGroup.LayoutParams.WRAP_CONTENT)); else     if (attr == R.styleable.AutoCompleteTextView_android_dropDownHorizontalOffset)     v.setDropDownHorizontalOffset(a.getDimensionPixelSize(attr,0)); else     if (attr == R.styleable.AutoCompleteTextView_android_dropDownVerticalOffset)     v.setDropDownVerticalOffset(a.getDimensionPixelSize(attr,0)); else     if (attr == R.styleable.AutoCompleteTextView_android_popupBackground)     v.setDropDownBackgroundDrawable(a.getDrawable(attr));  }  a.recycle();}  }
class C{  public static NurbsSurface globalSurfaceInterpolation(Vec3D[][] points,int uDegrees,int vDegrees) throws InterpolationException {  final int n=points.length;  final int m=points[0].length;  float[][] uv=surfaceMeshParameters(points,n - 1,m - 1);  KnotVector u=averaging(uv[0],uDegrees);  KnotVector v=averaging(uv[1],vDegrees);  Vec4D[][] r=new Vec4D[m][n];  Vec3D[] tmp=new Vec3D[n];  for (int l=0; l < m; l++) {    for (int i=0; i < n; i++) {      tmp[i]=points[i][l];    }    try {      NurbsCurve curve=globalCurveInterpolation(tmp,uDegrees);      r[l]=curve.getControlPoints();    } catch (    InterpolationException ex) {      for (int i=0; i < tmp.length; i++) {        r[l][i]=new Vec4D(tmp[i],1);      }    }  }  Vec4D[][] cp=new Vec4D[n][m];  tmp=new Vec3D[m];  for (int i=0; i < n; i++) {    for (int j=0; j < m; j++) {      tmp[j]=r[j][i].to3D();    }    try {      NurbsCurve curve=globalCurveInterpolation(tmp,vDegrees);      cp[i]=curve.getControlPoints();    } catch (    InterpolationException ex) {      for (int j=0; j < tmp.length; j++) {        cp[i][j]=new Vec4D(tmp[j],1);      }    }  }  return new BasicNurbsSurface(new ControlNet(cp),u,v);}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster output=null;  int cols=0;  int rows=0;  double imageNoData=-32768;  double outputNoData=-32768;  int numImages;  double z;  float progress=0;  int col, row;  int a, i;  String inputFilesString=null;  String[] imageFiles;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 2) {    showFeedback("At least two images must be specified.");    return;  }  try {    double[] data;    updateProgress("Calculating min values:",0);    for (a=0; a < numImages; a++) {      image=new WhiteboxRaster(imageFiles[a],"r");      imageNoData=image.getNoDataValue();      String label="Loop " + String.valueOf(a + 1) + " of "+ String.valueOf(numImages)+ ":";      if (a == 0) {        rows=image.getNumberRows();        cols=image.getNumberColumns();        outputNoData=imageNoData;        output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.FLOAT,outputNoData);        output.setPreferredPalette(image.getPreferredPalette());      } else {        if (image.getNumberColumns() != cols || image.getNumberRows() != rows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != imageNoData) {            z=output.getValue(row,col);            if (z != outputNoData) {              if ((data[col] * data[col]) > (z * z)) {                output.setValue(row,col,data[col]);              }            } else {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress(label,(int)progress);      }      image.close();      progress=a / (numImages - 1) * 100;      updateProgress("Calculating image average:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:11.059 -0500",hash_original_method="5B10C041062144B27347C9202A1953B2",hash_generated_method="5DD20AF7BF74864D6FF80C4FFD65E2BD") public void clear(){  mPackedAxisBits=0;  x=0;  y=0;  pressure=0;  size=0;  touchMajor=0;  touchMinor=0;  toolMajor=0;  toolMinor=0;  orientation=0;}  }
class C{  public void updateNCharacterStream(String columnName,Reader reader,int length) throws SQLException {  updateNCharacterStream(findColumn(columnName),reader,length);}  }
class C{  @Override public void U(final Object e,final FormObject formObj){  if (showMethods) {    System.out.println("DefaultActionHandler.U()");  }  javascript.execute(formObj,PdfDictionary.U,ActionHandler.FOCUS_EVENT,' ');}  }
class C{  @Override public Item build(){  Item build=super.build();  Data data=new Data();  data.className=build.getClass().getName();  build.load(data);  build.components.add(new FactoryProvider(this));  return build;}  }
class C{  private void handleException(String key,Exception e){  if (e != null) {    log.error(key,e.getLocalizedMessage());    throw new Abort(e);  } else {    log.error(key);    throw new Abort();  }}  }
class C{  private Organisation createDefaultOrganisation(){  Organisation organisation=new Organisation();  String name=getText("eml.publishingOrganisation.none");  organisation.setName(name);  organisation.setAlias(name);  organisation.setCanHost(true);  organisation.setDescription("Installed by default, used to indicate resource is not published by any organisation");  organisation.setKey(Constants.DEFAULT_ORG_KEY.toString());  organisation.setPassword("password");  return organisation;}  }
class C{  public boolean clearRelation(String relationName){  Set<PersistentResource> mine=filter(ReadPermission.class,(Set)getRelationUncheckedUnfiltered(relationName));  checkFieldAwarePermissions(UpdatePermission.class,relationName,Collections.emptySet(),mine.stream().map(null).collect(Collectors.toSet()));  if (mine.isEmpty()) {    return false;  }  RelationshipType type=getRelationshipType(relationName);  mine.stream().forEach(null);  if (type.isToOne()) {    PersistentResource oldValue=mine.iterator().next();    if (oldValue != null && oldValue.getObject() != null) {      this.nullValue(relationName,oldValue);      oldValue.markDirty();      this.markDirty();    }  } else {    Collection collection=(Collection)getValueUnchecked(relationName);    if (collection != null && !collection.isEmpty()) {      mine.stream().forEach(null);      this.markDirty();    }  }  return true;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("ConstantPoolTarg");  targetClass=bpe.location().declaringType();  mainThread=bpe.thread();  String targPathname=System.getProperty("test.classes") + File.separator + "ConstantPoolTarg.class";  readClassData(new FileInputStream(targPathname));  if (vm().canGetClassFileVersion()) {    if (expectedMajorVersion != targetClass.majorVersion()) {      failure("unexpected major version: actual value: " + targetClass.majorVersion() + "expected value :"+ expectedMajorVersion);    }    if (expectedMinorVersion != targetClass.minorVersion()) {      failure("unexpected minor version: actual value: " + targetClass.minorVersion() + "expected value :"+ expectedMinorVersion);    }  } else {    System.out.println("can get class version not supported");  }  if (vm().canGetConstantPool()) {    cpool_count=targetClass.constantPoolCount();    cpbytes=targetClass.constantPool();    try {      printcp();    } catch (    IOException x) {      System.out.println("IOexception reading cpool bytes " + x);    }    if (expectedCpoolCount != cpool_count) {      failure("unexpected constant pool count: actual value: " + cpool_count + "expected value :"+ expectedCpoolCount);    }  } else {    System.out.println("can get constant pool version not supported");  }  listenUntilVMDisconnect();  if (!testFailed) {    println("ConstantPoolInfo: passed");  } else {    throw new Exception("ConstantPoolInfo: failed");  }}  }
class C{  public ServiceInstance(CreateServiceInstanceRequest request){  this.serviceDefinitionId=request.getServiceDefinitionId();  this.planId=request.getPlanId();  this.organizationGuid=request.getOrganizationGuid();  this.spaceGuid=request.getSpaceGuid();  this.serviceInstanceId=request.getServiceInstanceId();  this.lastOperation=new GetLastServiceOperationResponse().withOperationState(OperationState.IN_PROGRESS).withDescription("Provisioning");}  }
class C{  @Override public void takeView(View view){  if (view == null)   return;  this.view=(SearchView)view;  initSubs();  addOnScrollListener();}  }
class C{  private void ensurePlayListCapacity(final int size){  if (mPlayList == null || size > mPlayList.length) {    final long[] newlist=new long[size * 2];    final int len=mPlayList != null ? mPlayList.length : mPlayListLen;    for (int i=0; i < len; i++) {      newlist[i]=mPlayList[i];    }    mPlayList=newlist;  }}  }
class C{  @ObjectiveCName("formatFullServiceMessageWithSenderId:withContent:withIsChannel:") public String formatFullServiceMessage(int senderId,ServiceContent content,boolean isChannel){  String groupKey=isChannel ? "channels" : "groups";  if (content instanceof ServiceUserRegistered) {    return getTemplateNamed(senderId,"content.service.registered.full").replace("{app_name}",getAppName());  } else   if (content instanceof ServiceGroupCreated) {    return getTemplateNamed(senderId,"content.service." + groupKey + ".created");  } else   if (content instanceof ServiceGroupUserInvited) {    return getTemplateNamed(senderId,"content.service." + groupKey + ".invited").replace("{name_added}",getSubjectName(((ServiceGroupUserInvited)content).getAddedUid()));  } else   if (content instanceof ServiceGroupUserKicked) {    return getTemplateNamed(senderId,"content.service." + groupKey + ".kicked").replace("{name_kicked}",getSubjectName(((ServiceGroupUserKicked)content).getKickedUid()));  } else   if (content instanceof ServiceGroupUserLeave) {    return getTemplateNamed(senderId,"content.service." + groupKey + ".left");  } else   if (content instanceof ServiceGroupTitleChanged) {    return getTemplateNamed(senderId,"content.service." + groupKey + ".title_changed.full").replace("{title}",((ServiceGroupTitleChanged)content).getNewTitle());  } else   if (content instanceof ServiceGroupTopicChanged) {    return getTemplateNamed(senderId,"content.service." + groupKey + ".topic_changed.full").replace("{topic}",((ServiceGroupTopicChanged)content).getNewTopic());  } else   if (content instanceof ServiceGroupAboutChanged) {    return getTemplateNamed(senderId,"content.service." + groupKey + ".about_changed.full").replace("{about}",((ServiceGroupAboutChanged)content).getNewAbout());  } else   if (content instanceof ServiceGroupAvatarChanged) {    if (((ServiceGroupAvatarChanged)content).getNewAvatar() != null) {      return getTemplateNamed(senderId,"content.service." + groupKey + ".avatar_changed");    } else {      return getTemplateNamed(senderId,"content.service." + groupKey + ".avatar_removed");    }  } else   if (content instanceof ServiceGroupUserJoined) {    return getTemplateNamed(senderId,"content.service." + groupKey + ".joined");  } else   if (content instanceof ServiceCallEnded) {    return get("content.service.calls.ended");  } else   if (content instanceof ServiceCallMissed) {    return get("content.service.calls.missed");  }  return content.getCompatText();}  }
class C{  public void endVisit(EmptyStatement node){}  }
class C{  public static String normalizeAndroidId(String id){  if (id == null)   return id;  id=id.replace("@+android:","");  id=id.replace("@android:","");  id=id.replace("@+id:","");  id=id.replace("@id:","");  if (id.contains("/"))   id=id.substring(id.indexOf("/") + 1);  if (!id.startsWith("id."))   id=String.format("id.%s",id);  return id;}  }
class C{  protected void prepare(){  p_AD_Client_ID=getRecord_ID();  if (p_AD_Client_ID == 0)   p_AD_Client_ID=Env.getAD_Client_ID(getCtx());}  }
class C{  public ClusterProperties(SolrZkClient client){  this.client=client;}  }
class C{  public FlowInfo analyseCode(BlockScope currentScope,FlowContext flowContext,FlowInfo flowInfo){  if (this.ignoreFurtherInvestigation)   return flowInfo;  try {    if ((flowInfo.tagBits & FlowInfo.UNREACHABLE_OR_DEAD) == 0) {      this.bits|=ASTNode.IsReachable;      LocalTypeBinding localType=(LocalTypeBinding)this.binding;      localType.setConstantPoolName(currentScope.compilationUnitScope().computeConstantPoolName(localType));    }    manageEnclosingInstanceAccessIfNecessary(currentScope,flowInfo);    updateMaxFieldCount();    internalAnalyseCode(flowContext,flowInfo);  } catch (  AbortType e) {    this.ignoreFurtherInvestigation=true;  }  return flowInfo;}  }
class C{  public Command showPopupDialog(Rectangle rect){  if (getDialogUIID().equals("Dialog")) {    setDialogUIID("PopupDialog");    if (getTitleComponent().getUIID().equals("DialogTitle")) {      getTitleComponent().setUIID("PopupDialogTitle");    }    getContentPane().setUIID("PopupContentPane");  }  disposeOnRotation=true;  disposeWhenPointerOutOfBounds=true;  Command backCommand=null;  if (getBackCommand() == null) {    backCommand=new Command("Back");    setBackCommand(backCommand);  }  Component contentPane=super.getContentPane();  Label title=super.getTitleComponent();  int menuHeight=calcMenuHeight();  UIManager manager=getUIManager();  if (dialogTitle != null && manager.isThemeConstant("hideEmptyTitleBool",false)) {    boolean b=getTitle().length() > 0;    getTitleArea().setVisible(b);    getTitleComponent().setVisible(b);    if (!b && manager.isThemeConstant("shrinkPopupTitleBool",true)) {      getTitleComponent().setPreferredSize(new Dimension(0,0));      getTitleComponent().getStyle().setBorder(null);      getTitleArea().setPreferredSize(new Dimension(0,0));      if (getContentPane().getClientProperty("$ENLARGED_POP") == null) {        getContentPane().putClientProperty("$ENLARGED_POP",Boolean.TRUE);        int cpPaddingTop=getContentPane().getStyle().getPadding(TOP);        int titlePT=getTitleComponent().getStyle().getPadding(TOP);        byte[] pu=getContentPane().getStyle().getPaddingUnit();        if (pu == null) {          pu=new byte[4];        }        pu[0]=Style.UNIT_TYPE_PIXELS;        getContentPane().getStyle().setPaddingUnit(pu);        int pop=Display.getInstance().convertToPixels(manager.getThemeConstant("popupNoTitleAddPaddingInt",1),false);        getContentPane().getStyle().setPadding(TOP,pop + cpPaddingTop + titlePT);      }    }  }  revalidate();  Style contentPaneStyle=getDialogStyle();  boolean restoreArrow=false;  if (manager.isThemeConstant(getDialogUIID() + "ArrowBool",false)) {    Image t=manager.getThemeImageConstant(getDialogUIID() + "ArrowTopImage");    Image b=manager.getThemeImageConstant(getDialogUIID() + "ArrowBottomImage");    Image l=manager.getThemeImageConstant(getDialogUIID() + "ArrowLeftImage");    Image r=manager.getThemeImageConstant(getDialogUIID() + "ArrowRightImage");    Border border=contentPaneStyle.getBorder();    if (border != null) {      border.setImageBorderSpecialTile(t,b,l,r,rect);      restoreArrow=true;    }  }  int prefHeight=contentPane.getPreferredH();  int prefWidth=contentPane.getPreferredW();  if (contentPaneStyle.getBorder() != null) {    prefWidth=Math.max(contentPaneStyle.getBorder().getMinimumWidth(),prefWidth);    prefHeight=Math.max(contentPaneStyle.getBorder().getMinimumHeight(),prefHeight);  }  int availableHeight=Display.getInstance().getDisplayHeight() - menuHeight - title.getPreferredH();  int availableWidth=Display.getInstance().getDisplayWidth();  int width=Math.min(availableWidth,prefWidth);  int x=0;  int y=0;  Command result;  boolean showPortrait;  if (popupDirectionBiasPortrait != null) {    showPortrait=popupDirectionBiasPortrait.booleanValue();  } else {    showPortrait=Display.getInstance().isPortrait();  }  if (showPortrait) {    if (availableHeight < (availableWidth - rect.getWidth()) / 2) {      showPortrait=false;    }  } else {    if (availableHeight / 2 > availableWidth - rect.getWidth()) {      showPortrait=true;    }  }  if (showPortrait) {    if (width < availableWidth) {      int idealX=rect.getX() - width / 2 + rect.getSize().getWidth() / 2;      if (idealX > 0) {        if (idealX + width > availableWidth) {          x=availableWidth - width;        } else {          x=idealX;        }      }    }    if (rect.getY() < availableHeight / 2) {      y=rect.getY() + rect.getSize().getHeight();      int height=Math.min(prefHeight,availableHeight - y);      result=show(y,availableHeight - height - y,x,availableWidth - width - x,true,true);    } else {      int height=Math.min(prefHeight,availableHeight - (availableHeight - rect.getY()));      y=rect.getY() - height;      result=show(y,availableHeight - height - y,x,availableWidth - width - x,true,true);    }  } else {    int height=Math.min(prefHeight,availableHeight);    if (height < availableHeight) {      int idealY=rect.getY() - height / 2 + rect.getSize().getHeight() / 2;      if (idealY > 0) {        if (idealY + height > availableHeight) {          y=availableHeight - height;        } else {          y=idealY;        }      }    }    if (prefWidth > rect.getX()) {      x=rect.getX() + rect.getSize().getWidth();      if (x + prefWidth > availableWidth) {        x=availableWidth - prefWidth;      }      width=Math.min(prefWidth,availableWidth - x);      result=show(y,availableHeight - height - y,Math.max(0,x),Math.max(0,availableWidth - width - x),true,true);    } else {      width=Math.min(prefWidth,availableWidth - (availableWidth - rect.getX()));      x=rect.getX() - width;      result=show(y,availableHeight - height - y,Math.max(0,x),Math.max(0,availableWidth - width - x),true,true);    }  }  if (restoreArrow) {    contentPaneStyle.getBorder().clearImageBorderSpecialTile();  }  if (result == backCommand) {    return null;  }  return result;}  }
class C{  public void commitChanges(SynapseGroup synapseGroup){  AbstractConnectionPanel acp=getSelectedPanel();  acp.commitChanges();  synapseGroup.setConnectionManager(acp.getConnection());}  }
class C{  private void refresh(){  setTitle(ssid);  Context context=getContext();  if (mState != null) {    setSummary(get(context,mState));  } else   if (mRssi == Integer.MAX_VALUE) {    setSummary(context.getString(R.string.wifi_not_in_range));  } else   if (mConfig != null && mConfig.status == WifiConfiguration.Status.DISABLED) {switch (mConfig.disableReason) {case WifiConfiguration.DISABLED_AUTH_FAILURE:      setSummary(context.getString(R.string.wifi_disabled_password_failure));    break;case WifiConfiguration.DISABLED_DHCP_FAILURE:case WifiConfiguration.DISABLED_DNS_FAILURE:  setSummary(context.getString(R.string.wifi_disabled_network_failure));break;case WifiConfiguration.DISABLED_UNKNOWN_REASON:setSummary(context.getString(R.string.wifi_disabled_generic));}} else {StringBuilder summary=new StringBuilder();if (mConfig != null) {summary.append(context.getString(R.string.wifi_remembered));}if (security != SECURITY_NONE) {String securityStrFormat;if (summary.length() == 0) {securityStrFormat=context.getString(R.string.wifi_secured_first_item);} else {securityStrFormat=context.getString(R.string.wifi_secured_second_item);}summary.append(String.format(securityStrFormat,getSecurityString(true)));} else {if (summary.length() > 0) {summary.append(",\u0020\u0020");}summary.append(getSecurityString(true));}setSummary(summary.toString());}}  }
class C{  @Override public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,String key){}  }
class C{  public int parseBinDecHexByte(String s,int limit,boolean decimal,String errTitle,String errMsg){  int data=-1;  boolean error=false;  int radix=16;  if ((s.length() > 3) && s.substring(0,2).equalsIgnoreCase("0x")) {    s=s.substring(2);    radix=16;  } else   if ((s.length() > 3) && s.substring(0,2).equalsIgnoreCase("0d")) {    s=s.substring(2);    radix=10;  } else   if ((s.length() > 3) && s.substring(0,2).equalsIgnoreCase("0b")) {    s=s.substring(2);    radix=2;  } else   if (decimal) {    radix=10;  }  try {    data=Integer.parseInt(s,radix);  } catch (  NumberFormatException ex) {    error=true;  }  if ((data < 0) || (data > limit)) {    error=true;  }  if (error) {    JOptionPane.showMessageDialog(null,errMsg,errTitle,JOptionPane.ERROR_MESSAGE);    data=-1;  }  return data;}  }
class C{  public static void show(Context context,int resId){  show(context,context.getString(resId));}  }
class C{  public JarOutputStream(OutputStream out) throws IOException {  super(out);}  }
class C{  public final void clear(){  checkPoint=-1;  if (current_item > 0) {    for (int i=0; i < current_item; i++) {      items[i]=null;    }  } else {    for (int i=0; i < max_size; i++) {      items[i]=null;    }  }  current_item=0;}  }
class C{  public void scramble(PrefabValues prefabValues,TypeTag enclosingType){  for (  Field field : FieldIterable.of(type)) {    FieldAccessor accessor=new FieldAccessor(object,field);    accessor.changeField(prefabValues,enclosingType);  }}  }
class C{  public EObject basicGetAstElement(){  return astElement;}  }
class C{  public boolean isRestoreToggleStates(){  return restoreToggleStates;}  }
class C{  public SlowedProgressBar(Context context,AttributeSet attrs){  super(context,attrs);}  }
class C{  public static Timestamp stringToTimeStamp(String dateTimeString,TimeZone tz,Locale locale) throws ParseException {  return stringToTimeStamp(dateTimeString,null,tz,locale);}  }
class C{  public <T>void write(Type<T> type,T value){  if (value != null) {    if (!type.getOutputClass().isAssignableFrom(value.getClass())) {      if (type instanceof TypeConverter) {        value=(T)((TypeConverter)type).from(value);      } else {        System.out.println("Possible type mismatch: " + value.getClass().getName() + " -> "+ type.getOutputClass());      }    }  }  packetValues.add(new Pair<Type,Object>(type,value));}  }
class C{  void errorContext() throws ChangedCharSetException {  for (; (stack != null) && (stack.tag.getElement() != dtd.body); stack=stack.next) {    handleEndTag(stack.tag);  }  if (stack == null) {    legalElementContext(dtd.body);    startTag(makeTag(dtd.body,true));  }}  }
class C{  public XYPlotNavigator(XYPlot plot){  super(plot,XYNavigationDirection.ARBITRARY.getAxesNames());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,Charset encoding) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  Charset cs=Charsets.toCharset(encoding);  for (  Object line : lines) {    if (line != null) {      output.write(line.toString().getBytes(cs));    }    output.write(lineEnding.getBytes(cs));  }}  }
class C{  ToggleComponentOrientationAction(){  super(toggleComponentOrientationAction);}  }
class C{  public final void transpose(Matrix4f m1){  if (this != m1) {    this.m00=m1.m00;    this.m01=m1.m10;    this.m02=m1.m20;    this.m03=m1.m30;    this.m10=m1.m01;    this.m11=m1.m11;    this.m12=m1.m21;    this.m13=m1.m31;    this.m20=m1.m02;    this.m21=m1.m12;    this.m22=m1.m22;    this.m23=m1.m32;    this.m30=m1.m03;    this.m31=m1.m13;    this.m32=m1.m23;    this.m33=m1.m33;  } else   this.transpose();}  }
class C{  @Bean public ViewResolver thymeleafViewResolver(){  ThymeleafViewResolver vr=new ThymeleafViewResolver();  vr.setTemplateEngine(templateEngine());  vr.setCharacterEncoding("UTF-8");  vr.setOrder(Ordered.HIGHEST_PRECEDENCE);  return vr;}  }
class C{  public WebResourceStatistics computeRawMark(WebResourceStatistics wrStatistics){  float passed=wrStatistics.getNbOfPassed();  if (passed == -1) {    wrStatistics.setRawMark(Float.valueOf(-1));    return wrStatistics;  }  BigDecimal weightedPassed=wrStatistics.getWeightedPassed();  BigDecimal weightedFailed=wrStatistics.getWeightedFailed();  if ((weightedFailed.equals(BigDecimal.ZERO) || weightedFailed.equals(ZERO)) && (weightedPassed.equals(BigDecimal.ZERO) || weightedPassed.equals(ZERO))) {    wrStatistics.setRawMark(Float.valueOf(0));    return wrStatistics;  }  float result=weightedPassed.divide(weightedPassed.add(weightedFailed),4,RoundingMode.HALF_UP).floatValue() * 100f;  wrStatistics.setRawMark(result);  return wrStatistics;}  }
class C{  public void push(int state_num){  vstack.push(new Integer(state_num));}  }
class C{  public AdjustableGZIPOutputStream(OutputStream out) throws IOException {  this(out,DEFAULT_GZIP_BUFFER_SIZE,DEFAULT_GZIP_LEVEL);}  }
class C{  public void hide(){  if (mIsShown) {    mIsShown=false;    if (mIsAttachedToWindow) {      removeCallbacks(mDelayedShow);    }    long diff=SystemClock.uptimeMillis() - mStartTime;    if (mStartTime == -1L || diff >= MIN_SHOW_TIME) {      setVisibility(View.GONE);      mStartTime=-1L;    } else {      postDelayed(mDelayedHide,MIN_SHOW_TIME - diff);    }  }}  }
class C{  private static void outputRow(int iter,double x){  String target="" + x;  String comp=compare(target,root);  System.out.print(iter + "\t" + comp);  if (comp.length() < 12) {    System.out.print("\t\t");  }  System.out.print("\t");  System.out.println(compare(Long.toBinaryString(Double.doubleToRawLongBits(x)),bits));}  }
class C{  public static DoubleMatrix2D greater(DoubleMatrix2D A,DoubleMatrix2D B){  return A.assign(B,F.greater);}  }
class C{  public void resetTracking(){  totalTime=0;  drawCycles=0;}  }
class C{  @Override public void clearWarnings() throws SQLException {  try {    debugCodeCall("clearWarnings");    checkClosed();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public FacetTagTestCase(String name){  super(name);}  }
class C{  private void computeScores(){  final int max=getMaxValue();  m_lMax=Math.log(max);  m_llMax=-Math.log((double)max / mPoints);  if (max > m_minimalMax && ((double)mPoints) / mPointDifferences.size() > m_minimalConcentration) {    m_pointScores=new TreeMap<Integer,Double>();    for (    Entry<Integer,Integer> entry : mPointDifferences.entrySet()) {      final Integer v=entry.getValue();      if (v > 1) {        m_pointScores.put(entry.getKey(),m_lMax - Math.log(v));      }    }  }}  }
class C{  protected final boolean executePredicates(XPathContext xctxt,DTM dtm,int currentNode) throws javax.xml.transform.TransformerException {  boolean result=true;  boolean positionAlreadySeen=false;  int n=getPredicateCount();  try {    xctxt.pushSubContextList(this);    for (int i=0; i < n; i++) {      xctxt.pushPredicatePos(i);      try {        XObject pred=m_predicates[i].execute(xctxt);        try {          if (XObject.CLASS_NUMBER == pred.getType()) {            int pos=(int)pred.num();            if (positionAlreadySeen) {              result=(pos == 1);              break;            } else {              positionAlreadySeen=true;              if (!checkProximityPosition(xctxt,i,dtm,currentNode,pos)) {                result=false;                break;              }            }          } else           if (!pred.boolWithSideEffects()) {            result=false;            break;          }        }  finally {          pred.detach();        }      }  finally {        xctxt.popPredicatePos();      }    }  }  finally {    xctxt.popSubContextList();  }  return result;}  }
class C{  public void release(){  mIsPressed=false;}  }
class C{  final SolrInputDocument doc(SolrInputField... fields){  SolrInputDocument d=new SolrInputDocument();  for (  SolrInputField f : fields) {    d.put(f.getName(),f);  }  return d;}  }
class C{  private E dequeue(){  final Object[] items=this.items;  @SuppressWarnings("unchecked") E x=(E)items[takeIndex];  items[takeIndex]=null;  takeIndex=inc(takeIndex);  count--;  if (itrs != null)   itrs.elementDequeued();  notFull.signal();  return x;}  }
class C{  public ChangeMethodSignatureDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.CHANGE_METHOD_SIGNATURE,project,description,comment,arguments,flags);}  }
class C{  public Enumeration listOptions(){  Vector newVector=new Vector(2);  newVector.addElement(new Option("\tChange generalization parameter Rho\n","P",0,"-P"));  newVector.addElement(new Option("\tUse ranking to class function special dev. for ARAM.\n","K",0,"-K"));  return newVector.elements();}  }
class C{  public BigDecimal optBigDecimal(String key,BigDecimal defaultValue){  try {    return this.getBigDecimal(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static boolean contains(final Object[] array,final Object objectToFind){  return ArrayUtils.indexOf(array,objectToFind) != ArrayUtils.INDEX_NOT_FOUND;}  }
class C{  public boolean usesSorting(){  return !sort.isEmpty();}  }
class C{  public MockTokenizerFactory(Map<String,String> args){  super(args);  String patternArg=get(args,"pattern",Arrays.asList("keyword","simple","whitespace"));  if ("keyword".equalsIgnoreCase(patternArg)) {    pattern=MockTokenizer.KEYWORD;  } else   if ("simple".equalsIgnoreCase(patternArg)) {    pattern=MockTokenizer.SIMPLE;  } else {    pattern=MockTokenizer.WHITESPACE;  }  enableChecks=getBoolean(args,"enableChecks",true);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  protected String doCreateLabelText(boolean includeAltitude){  StringBuilder sb=new StringBuilder();  sb.append(this.getGraphicLabel());  sb.append("\n");  Object o=this.getModifier(SymbologyConstants.UNIQUE_DESIGNATION);  if (o != null) {    sb.append(o);    sb.append("\n");  }  if (includeAltitude) {    Object[] altitudes=TacticalGraphicUtil.getAltitudeRange(this);    if (altitudes[0] != null) {      sb.append("MIN ALT: ");      sb.append(altitudes[0]);      sb.append("\n");    }    if (altitudes[1] != null) {      sb.append("MAX ALT: ");      sb.append(altitudes[1]);      sb.append("\n");    }  }  Object[] dates=TacticalGraphicUtil.getDateRange(this);  if (dates[0] != null) {    sb.append("TIME FROM: ");    sb.append(dates[0]);    sb.append("\n");  }  if (dates[1] != null) {    sb.append("TIME TO: ");    sb.append(dates[1]);  }  return sb.toString();}  }
class C{  private void testSubmitQuery(int nodes,Query.ConsistencyLevel consistency) throws Throwable {  createServers(nodes);  CopycatClient client=createClient();  client.submit(new TestQuery(consistency)).thenAccept(null);  await(30000);}  }
class C{  public static void encode(Object[] dataValues,ByteBuf output){  try {    for (    Object data : dataValues) {      if (data instanceof Integer) {        output.writeInt((Integer)data);      } else       if (data instanceof Boolean) {        output.writeBoolean((Boolean)data);      } else       if (data instanceof Double) {        output.writeDouble((Double)data);      } else       if (data instanceof Float) {        output.writeFloat((Float)data);      } else       if (data instanceof String) {        writeString(output,(String)data);      } else       if (data instanceof Byte) {        output.writeByte((Byte)data);      } else       if (data instanceof int[]) {        for (        int i : (int[])data) {          output.writeInt(i);        }      } else       if (data instanceof byte[]) {        for (        byte b : (byte[])data) {          output.writeByte(b);        }      } else       if (data instanceof ArrayList) {        encode(((ArrayList)data).toArray(),output);      }    }  } catch (  Exception e) {    Mekanism.logger.error("Error while encoding packet data.");    e.printStackTrace();  }}  }
class C{  private void createPRWithTotalNumPropSetList(List vmList,int startIndexForRegion,int endIndexForRegion,int localMaxMemory,int redundancy){  Iterator nodeIterator=vmList.iterator();  while (nodeIterator.hasNext()) {    VM vm=(VM)nodeIterator.next();    vm.invoke(createMultiplePRWithTotalNumBucketPropSet(prPrefix,startIndexForRegion,endIndexForRegion,redundancy,localMaxMemory,11));  }}  }
class C{  private static void checkDir(File dir) throws FileNotFoundException, IllegalArgumentException {  if (!dir.exists())   throw new FileNotFoundException(dir.getAbsolutePath());  if (!dir.isDirectory())   throw new IllegalArgumentException("The provided File object is not a directory: " + dir.getAbsolutePath());}  }
class C{  public void addParameterAnnotations(CstMethodRef method,AnnotationsList list){  if (parameterAnnotations == null) {    parameterAnnotations=new ArrayList<ParameterAnnotationStruct>();  }  parameterAnnotations.add(new ParameterAnnotationStruct(method,list));}  }
class C{  public void delete(int i){  if (i < 0 || i >= n)   throw new IndexOutOfBoundsException();  if (!contains(i))   throw new NoSuchElementException("Specified index is not in the queue");  toTheRoot(i);  Node<Key> x=erase(i);  if (x.child != null) {    Node<Key> y=x;    x=x.child;    y.child=null;    Node<Key> prevx=null, nextx=x.sibling;    while (nextx != null) {      x.parent=null;      x.sibling=prevx;      prevx=x;      x=nextx;      nextx=nextx.sibling;    }    x.parent=null;    x.sibling=prevx;    IndexBinomialMinPQ<Key> H=new IndexBinomialMinPQ<Key>();    H.head=x;    head=union(H).head;  }}  }
class C{  public OverlayMapPanel(PropertyHandler propertyHandler){  super(propertyHandler,false);}  }
class C{  public static String bestMatch(Collection<String> supported,String header){  List<ParseResults> parseResults=new LinkedList<ParseResults>();  List<FitnessAndQuality> weightedMatches=new LinkedList<FitnessAndQuality>();  String[] headers=StringKit.split(header,",");  for (  String r : headers) {    parseResults.add(parseMediaRange(r));  }  for (  String s : supported) {    FitnessAndQuality fitnessAndQuality=fitnessAndQualityParsed(s,parseResults);    fitnessAndQuality.mimeType=s;    weightedMatches.add(fitnessAndQuality);  }  Collections.sort(weightedMatches);  FitnessAndQuality lastOne=weightedMatches.get(weightedMatches.size() - 1);  return Float.compare(lastOne.quality,0) != 0 ? lastOne.mimeType : NO_MIME_TYPE;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
