class C{  public String fadeAudio(String path,String type,double fadeInLength,double stopTime,double fadeOutLength) throws IOException {  final List<String> curves=Arrays.asList(new String[]{"q","h","t","l","p"});  if (!curves.contains(type)) {    throw new RuntimeException("fadeAudio: passed invalid type: " + type);  }  File file=new File(path);  String outFile=file.getCanonicalPath() + "_faded.wav";  ArrayList<String> cmd=new ArrayList<String>();  cmd.add(soxBin);  cmd.add(path);  cmd.add(outFile);  cmd.add("fade");  cmd.add(type);  cmd.add(fadeInLength + "");  if (stopTime != -1)   cmd.add(stopTime + "");  if (fadeOutLength != -1)   cmd.add(fadeOutLength + "");  try {    int rc=execSox(cmd,callback);    if (rc != 0) {      outFile=null;    }  } catch (  IOException e) {    e.printStackTrace();  }catch (  InterruptedException e) {    e.printStackTrace();  }  return outFile;}  }
class C{  private void retire() throws IOException {  long nowMsSinceEpoch=now();  while (true) {    List<String> ackIds=ackedIds.poll();    if (ackIds == null) {      return;    }    numAcked.add(nowMsSinceEpoch,ackIds.size());    for (    String ackId : ackIds) {      inFlight.remove(ackId);      safeToAckIds.remove(ackId);    }  }}  }
class C{  public Pointer<T> allocateCompatibleMemory(CLDevice device){  return allocateArray(io,getElementCount()).order(device.getKernelsDefaultByteOrder());}  }
class C{  void checkLabel(final Label label,final boolean checkVisited,final String msg){  if (label == null) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null)");  }  if (checkVisited && labels.get(label) == null) {    throw new IllegalArgumentException("Invalid " + msg + " (must be visited first)");  }}  }
class C{  void writeBuilderSource(SourceBuilder code,Metadata metadata){  if (!metadata.hasBuilder()) {    writeStubSource(code,metadata);    return;  }  addBuilderTypeDeclaration(code,metadata);  code.addLine(" {");  addStaticFromMethod(code,metadata);  addConstantDeclarations(metadata,code);  if (any(metadata.getProperties(),IS_REQUIRED)) {    addPropertyEnum(metadata,code);  }  addFieldDeclarations(code,metadata);  addAccessors(metadata,code);  addMergeFromValueMethod(code,metadata);  addMergeFromBuilderMethod(code,metadata);  addClearMethod(code,metadata);  addBuildMethod(code,metadata);  addBuildPartialMethod(code,metadata);  addValueType(code,metadata);  addPartialType(code,metadata);  for (  Function<Metadata,Excerpt> nestedClass : metadata.getNestedClasses()) {    code.add(nestedClass.apply(metadata));  }  addStaticMethods(code,metadata);  code.addLine("}");}  }
class C{  @Override public void openElement(String tagName,int index) throws IOException {  int count=0;  ArrayList list=current.getChildren();  for (int i=0; i < list.size(); i++) {    XMLElement node=(XMLElement)list.get(i);    if (node.getName().equals(tagName)) {      if (count++ == index) {        stack.push(current);        current=node;        return;      }    }  }  throw new IOException("no such element:" + tagName + " at index:"+ index);}  }
class C{  public PacProxyException(Throwable causeThrowable){  super(causeThrowable);}  }
class C{  public static String loadAsset(String path,Context context){  if (path == null || context == null) {    return null;  }  StringBuilder builder;  try {    InputStream in=context.getAssets().open(path);    builder=new StringBuilder(in.available() + 10);    BufferedReader localBufferedReader=new BufferedReader(new InputStreamReader(in));    char[] data=new char[2048];    int len=-1;    while ((len=localBufferedReader.read(data)) > 0) {      builder.append(data,0,len);    }    localBufferedReader.close();    if (in != null) {      try {        in.close();      } catch (      IOException e) {        WXLogUtils.e("WXFileUtils loadAsset: ",e);      }    }    return builder.toString();  } catch (  IOException e) {    e.printStackTrace();    WXLogUtils.e("",e);  }  return "";}  }
class C{  protected void appendInternal(final StringBuffer buffer,final String fieldName,final Object value,final boolean detail){  if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) {    appendCyclicObject(buffer,fieldName,value);    return;  }  register(value);  try {    if (value instanceof Collection<?>) {      if (detail) {        appendDetail(buffer,fieldName,(Collection<?>)value);      } else {        appendSummarySize(buffer,fieldName,((Collection<?>)value).size());      }    } else     if (value instanceof Map<?,?>) {      if (detail) {        appendDetail(buffer,fieldName,(Map<?,?>)value);      } else {        appendSummarySize(buffer,fieldName,((Map<?,?>)value).size());      }    } else     if (value instanceof long[]) {      if (detail) {        appendDetail(buffer,fieldName,(long[])value);      } else {        appendSummary(buffer,fieldName,(long[])value);      }    } else     if (value instanceof int[]) {      if (detail) {        appendDetail(buffer,fieldName,(int[])value);      } else {        appendSummary(buffer,fieldName,(int[])value);      }    } else     if (value instanceof short[]) {      if (detail) {        appendDetail(buffer,fieldName,(short[])value);      } else {        appendSummary(buffer,fieldName,(short[])value);      }    } else     if (value instanceof byte[]) {      if (detail) {        appendDetail(buffer,fieldName,(byte[])value);      } else {        appendSummary(buffer,fieldName,(byte[])value);      }    } else     if (value instanceof char[]) {      if (detail) {        appendDetail(buffer,fieldName,(char[])value);      } else {        appendSummary(buffer,fieldName,(char[])value);      }    } else     if (value instanceof double[]) {      if (detail) {        appendDetail(buffer,fieldName,(double[])value);      } else {        appendSummary(buffer,fieldName,(double[])value);      }    } else     if (value instanceof float[]) {      if (detail) {        appendDetail(buffer,fieldName,(float[])value);      } else {        appendSummary(buffer,fieldName,(float[])value);      }    } else     if (value instanceof boolean[]) {      if (detail) {        appendDetail(buffer,fieldName,(boolean[])value);      } else {        appendSummary(buffer,fieldName,(boolean[])value);      }    } else     if (value.getClass().isArray()) {      if (detail) {        appendDetail(buffer,fieldName,(Object[])value);      } else {        appendSummary(buffer,fieldName,(Object[])value);      }    } else {      if (detail) {        appendDetail(buffer,fieldName,value);      } else {        appendSummary(buffer,fieldName,value);      }    }  }  finally {    unregister(value);  }}  }
class C{  public void contentSelectionChanged(ContentSelectionChangedEvent csce){  Element e=(Element)csce.getContentElement().getParentNode();  if (e instanceof XBLOMShadowTreeElement) {    e=((NodeXBL)e).getXblBoundElement();  }  BridgeUpdateHandler h=getBridgeUpdateHandler(e);  if (h instanceof SVG12BridgeUpdateHandler) {    SVG12BridgeUpdateHandler h12=(SVG12BridgeUpdateHandler)h;    try {      h12.handleContentSelectionChangedEvent(csce);    } catch (    Exception ex) {      userAgent.displayError(ex);    }  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.823 -0400",hash_original_method="9CC552A05DC39BBA2C336B2A0E87E39E",hash_generated_method="4429D936EF256217F3103D9C077ECE75") @Override public String toString(){  String condition=acceptLarger ? ">=" : "<";  return super.toString() + "(" + condition+ size+ ")";}  }
class C{  public static byte[] removeUnnecessaryHttpHeader(byte[] buffer,int headerLength,int contentLength,List<String> httpHeaderList,int[] newHeaderLength){  int bufferOffset=0;  int bufferSize=headerLength + contentLength;  byte[] newBuffer=new byte[bufferSize];  int newByteOffset=0;  ByteArrayInputStream byteInputStream=new ByteArrayInputStream(buffer,0,bufferSize);  BufferedReader reader=new BufferedReader(new InputStreamReader(byteInputStream));  String line=null;  try {    line=reader.readLine();  } catch (  IOException e) {    MeshLog.e(DEBUG,USE_LOG4J,CLASS,"removeUnnecessaryHttpHeader() IOException firstly");  }  while (line != null && bufferOffset < headerLength) {    boolean isRemoved=false;    String[] kv=line.split(":( )+");    if (kv.length == 2) {      for (      String httpHeader : httpHeaderList) {        if (kv[0].equals(httpHeader)) {          isRemoved=true;          break;        }      }    }    line=line + ESCAPE;    if (!isRemoved && line != null) {      byte[] srcBytes=line.getBytes();      Object src=srcBytes;      int srcPos=0;      Object dst=newBuffer;      int dstPos=newByteOffset;      int length=srcBytes.length;      System.arraycopy(src,srcPos,dst,dstPos,length);      newByteOffset+=length;      bufferOffset+=length;    } else {      bufferOffset+=line.getBytes().length;    }    try {      line=reader.readLine();    } catch (    IOException e) {      MeshLog.e(DEBUG,USE_LOG4J,CLASS,"removeUnnecessaryHttpHeader() IOException");      break;    }  }  newHeaderLength[0]=newByteOffset;  if (contentLength > 0) {    Object src=buffer;    int srcPos=bufferOffset;    Object dst=newBuffer;    int dstPos=newByteOffset;    int length=contentLength;    System.arraycopy(src,srcPos,dst,dstPos,length);    newByteOffset+=length;    bufferOffset+=length;  }  try {    byteInputStream.close();    reader.close();  } catch (  IOException e) {    e.printStackTrace();  }  return newBuffer;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep updateQuotaDirectory(@PathParam("id") URI id,QuotaDirectoryUpdateParam param) throws InternalException {  _log.info("FileService::Update Quota directory Request recieved {}",id);  QuotaDirectory quotaDir=queryResource(id);  String task=UUID.randomUUID().toString();  if (param.getSecurityStyle() != null) {    ArgValidator.checkFieldValueFromEnum(param.getSecurityStyle(),"security_style",EnumSet.allOf(QuotaDirectory.SecurityStyles.class));  }  FileShare fs=queryFileShareResource(quotaDir.getParent().getURI());  ArgValidator.checkFieldNotNull(fs,"filesystem");  quotaDir.setOpStatus(new OpStatusMap());  if (param.getOpLock() != null) {    quotaDir.setOpLock(param.getOpLock());  }  if (param.getSecurityStyle() != null) {    quotaDir.setSecurityStyle(param.getSecurityStyle());  }  if (param.getSize() != null) {    Long quotaSize=SizeUtil.translateSize(param.getSize());    if (quotaSize > 0) {      ArgValidator.checkFieldMaximum(quotaSize,fs.getCapacity(),SizeUtil.SIZE_B,"size",true);      quotaDir.setSize(quotaSize);    }  }  ArgValidator.checkFieldMaximum(param.getSoftLimit(),100,"softLimit");  ArgValidator.checkFieldMaximum(param.getNotificationLimit(),100,"notificationLimit");  if (param.getSoftLimit() != 0L) {    ArgValidator.checkFieldMinimum(param.getSoftGrace(),1L,"softGrace");  }  quotaDir.setSoftLimit(param.getSoftLimit() != 0 ? param.getSoftLimit() : quotaDir.getSoftLimit() != null ? quotaDir.getSoftLimit() : fs.getSoftLimit() != null ? fs.getSoftLimit().intValue() : 0);  quotaDir.setSoftGrace(param.getSoftGrace() != 0 ? param.getSoftGrace() : quotaDir.getSoftGrace() != null ? quotaDir.getSoftGrace() : fs.getSoftGracePeriod() != null ? fs.getSoftGracePeriod() : 0);  quotaDir.setNotificationLimit(param.getNotificationLimit() != 0 ? param.getNotificationLimit() : quotaDir.getNotificationLimit() != null ? quotaDir.getNotificationLimit() : fs.getNotificationLimit() != null ? fs.getNotificationLimit().intValue() : 0);  Operation op=new Operation();  op.setResourceType(ResourceOperationTypeEnum.UPDATE_FILE_SYSTEM_QUOTA_DIR);  quotaDir.getOpStatus().createTaskStatus(task,op);  fs.setOpStatus(new OpStatusMap());  fs.getOpStatus().createTaskStatus(task,op);  _dbClient.persistObject(fs);  _dbClient.persistObject(quotaDir);  FileShareQuotaDirectory qt=new FileShareQuotaDirectory(quotaDir);  StorageSystem device=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());  FileController controller=getController(FileController.class,device.getSystemType());  try {    controller.updateQuotaDirectory(device.getId(),qt,fs.getId(),task);  } catch (  InternalException e) {    _log.error("Error during update of Quota Directory {}",e);    throw e;  }  auditOp(OperationTypeEnum.UPDATE_FILE_SYSTEM_QUOTA_DIR,true,AuditLogManager.AUDITOP_BEGIN,quotaDir.getLabel(),quotaDir.getId().toString(),fs.getId().toString());  fs=_dbClient.queryObject(FileShare.class,fs.getId());  _log.debug("FileService::Quota directory Before sending response, FS ID : {}, Taks : {} ; Status {}",fs.getOpStatus().get(task),fs.getOpStatus().get(task).getStatus());  return toTask(quotaDir,task,op);}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  @Retained EntryEventImpl createListenerEvent(EntryEventImpl sourceEvent,PartitionedRegion r,InternalDistributedMember member){  final EntryEventImpl e2;  if (this.notificationOnly && this.bridgeContext == null) {    e2=sourceEvent;  } else {    e2=new EntryEventImpl(sourceEvent);    if (this.bridgeContext != null) {      e2.setContext(this.bridgeContext);    }  }  e2.setRegion(r);  e2.setOriginRemote(true);  e2.setInvokePRCallbacks(!notificationOnly);  if (!sourceEvent.hasOldValue()) {    e2.oldValueNotAvailable();  }  if (this.filterInfo != null) {    e2.setLocalFilterInfo(this.filterInfo.getFilterInfo(member));  }  if (this.versionTag != null) {    this.versionTag.replaceNullIDs(getSender());    e2.setVersionTag(this.versionTag);  }  return e2;}  }
class C{  private void cmd_loadFile(){  String directory=org.compiere.Adempiere.getAdempiereHome() + File.separator + "data"+ File.separator+ "import";  log.config(directory);  JFileChooser chooser=new JFileChooser(directory);  chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);  chooser.setMultiSelectionEnabled(false);  chooser.setDialogTitle(Msg.getMsg(Env.getCtx(),"FileImportFileInfo"));  if (chooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)   return;  m_file=chooser.getSelectedFile();  log.config(m_file.getName());  bFile.setText(m_file.getName());  cmd_reloadFile();}  }
class C{  private void generateExtraMethods(PsiClass psiClass){  String psiClassName=psiClass.getName();  PsiMethod writeMethod=factory.createMethodFromText(METHOD_WRITE_TO_PARCEL,null);  PsiMethod parcelConstructor=factory.createMethodFromText(METHOD_CONSTRUCTOR_FROM_PARCEL.replace("${PsiClassName}",psiClassName),null);  PsiField[] fields=psiClass.getAllFields();  for (  PsiField field : fields) {    PsiModifierList modifierList=field.getModifierList();    if (null != modifierList && modifierList.hasModifierProperty("static")) {      continue;    }    PsiType fieldType=field.getType();    SupportTypeGenerator supportTypeGenerator=generatorMapper.get(fieldType.getPresentableText());    if (null == supportTypeGenerator) {      if (getTypeByName(PARCELABLE_CLASS_FULL_NAME,project).isAssignableFrom(fieldType)) {        supportTypeGenerator=generatorMapper.get("Parcelable");      } else       if (1 == fieldType.getArrayDimensions() && getTypeByName(PARCELABLE_CLASS_FULL_NAME,project).isAssignableFrom(fieldType.getDeepComponentType())) {        supportTypeGenerator=generatorMapper.get("ParcelableArray");      } else       if (getTypeByClass(List.class,project).isAssignableFrom(fieldType)) {        if (fieldType instanceof PsiClassReferenceType) {          PsiType[] parametersTypes=((PsiClassReferenceType)fieldType).getParameters();          if (1 == parametersTypes.length) {            PsiType parametersType=parametersTypes[0];            if (getTypeByName(PARCELABLE_CLASS_FULL_NAME,project).isAssignableFrom(parametersType)) {              supportTypeGenerator=generatorMapper.get("ParcelableList");            }          }        }      }    }    if (null == supportTypeGenerator && ParcelUtil.isParcelable(fieldType,project)) {      supportTypeGenerator=generatorMapper.get("common");    }    if (null == supportTypeGenerator) {      if (getTypeByName(SERIALIZABLE_CLASS_FULL_NAME,project).isAssignableFrom(fieldType)) {        supportTypeGenerator=generatorMapper.get("Serializable");      }    }    if (null == supportTypeGenerator) {      continue;    }    PsiCodeBlock writeMethodBody=writeMethod.getBody();    supportTypeGenerator.writeMethod(writeMethodBody,factory,field);    PsiCodeBlock constructorMethodBody=parcelConstructor.getBody();    supportTypeGenerator.readMethod(constructorMethodBody,factory,field);  }  psiClass.add(writeMethod);  psiClass.add(parcelConstructor);  psiClass.add(factory.createMethodFromText(METHOD_DESCRIBE_CONTENT,null));  psiClass.add(factory.createFieldFromText(FIELD_CREATOR.replace("${PsiClassName}",psiClassName),null));}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public void testGetDefaultSSLSocketFactory() throws Exception {  setUpStoreProperties();  SSLSocketFactory defaultSSLSF=HttpsURLConnection.getDefaultSSLSocketFactory();  ServerSocket ss=new ServerSocket(0);  Socket s=defaultSSLSF.createSocket("localhost",ss.getLocalPort());  ss.accept();  s.close();  ss.close();}  }
class C{  public String toString(){  return "PointD, x: " + x + ", y: "+ y;}  }
class C{  public static String encodePathSegment(final String pathSegment,final String charset) throws UnsupportedEncodingException {  if (pathSegment == null) {    return null;  }  final StringBuffer encoded=new StringBuffer(pathSegment.length() * 3);  final char[] toEncode=pathSegment.toCharArray();  for (int i=0; i < toEncode.length; i++) {    char c=toEncode[i];    if (PCHAR.get(c)) {      encoded.append(c);    } else {      final byte[] bytes=String.valueOf(c).getBytes(charset);      for (int j=0; j < bytes.length; j++) {        byte b=bytes[j];        final int u8=b & 0xFF;        encoded.append("%");        if (u8 < 16)         encoded.append("0");        encoded.append(Integer.toHexString(u8));      }    }  }  return encoded.toString();}  }
class C{  @Override public Long zadd(final String key,final double score,final String member){  checkIsInMultiOrPipeline();  client.zadd(key,score,member);  return client.getIntegerReply();}  }
class C{  static String format(double d){  if (d != d) {    return "Double.NaN,";  } else {    return ((d >= 0) ? "+" : "") + Double.toString(d) + "d,";  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.111 -0500",hash_original_method="D296F749900FBC5242D181AA06D4E27C",hash_generated_method="CF60C697F2C4C7E7F70C896F2825A3FA") public CompletionInfo(long id,int index,CharSequence text,CharSequence label){  mId=id;  mPosition=index;  mText=text;  mLabel=label;}  }
class C{  public EigenvalueDecomposition(jMatrix Arg){  double[][] A=Arg.getArray();  n=Arg.getColumnDimension();  V=new double[n][n];  d=new double[n];  e=new double[n];  issymmetric=true;  for (int j=0; (j < n) & issymmetric; j++) {    for (int i=0; (i < n) & issymmetric; i++) {      issymmetric=(A[i][j] == A[j][i]);    }  }  if (issymmetric) {    for (int i=0; i < n; i++) {      for (int j=0; j < n; j++) {        V[i][j]=A[i][j];      }    }    tred2();    tql2();  } else {    H=new double[n][n];    ort=new double[n];    for (int j=0; j < n; j++) {      for (int i=0; i < n; i++) {        H[i][j]=A[i][j];      }    }    orthes();    hqr2();  }}  }
class C{  static public void appendIndentation(int level,StringBuilder result){  for (int i=0; i < level; ++i)   result.append("  ");}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("AcsDaoObjPermRecOwner[");  buffer.append("m_ownerType = ").append(m_ownerType);  buffer.append(", m_ownerId = ").append(m_ownerId);  buffer.append("]");  return buffer.toString();}  }
class C{  protected int engineUpdate(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws ShortBufferException {  return core.update(input,inputOffset,inputLen,output,outputOffset);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public long calculateSegmentNumber(long millis){  if (millis >= SegmentedTimeline.this.startTime) {    return (millis - SegmentedTimeline.this.startTime) / SegmentedTimeline.this.segmentSize;  } else {    return ((millis - SegmentedTimeline.this.startTime) / SegmentedTimeline.this.segmentSize) - 1;  }}  }
class C{  private static SegmentIndex parseSidx(ParsableByteArray atom){  atom.setPosition(Mp4Util.ATOM_HEADER_SIZE);  int fullAtom=atom.readInt();  int version=Mp4Util.parseFullAtomVersion(fullAtom);  atom.skip(4);  long timescale=atom.readUnsignedInt();  long earliestPresentationTime;  long firstOffset;  if (version == 0) {    earliestPresentationTime=atom.readUnsignedInt();    firstOffset=atom.readUnsignedInt();  } else {    earliestPresentationTime=atom.readUnsignedLongToLong();    firstOffset=atom.readUnsignedLongToLong();  }  atom.skip(2);  int referenceCount=atom.readUnsignedShort();  int[] sizes=new int[referenceCount];  long[] offsets=new long[referenceCount];  long[] durationsUs=new long[referenceCount];  long[] timesUs=new long[referenceCount];  long offset=firstOffset;  long time=earliestPresentationTime;  long timeUs=Util.scaleLargeTimestamp(time,C.MICROS_PER_SECOND,timescale);  for (int i=0; i < referenceCount; i++) {    int firstInt=atom.readInt();    int type=0x80000000 & firstInt;    if (type != 0) {      throw new IllegalStateException("Unhandled indirect reference");    }    long referenceDuration=atom.readUnsignedInt();    sizes[i]=0x7fffffff & firstInt;    offsets[i]=offset;    timesUs[i]=timeUs;    time+=referenceDuration;    timeUs=Util.scaleLargeTimestamp(time,C.MICROS_PER_SECOND,timescale);    durationsUs[i]=timeUs - timesUs[i];    atom.skip(4);    offset+=sizes[i];  }  return new SegmentIndex(atom.limit(),sizes,offsets,durationsUs,timesUs);}  }
class C{  public JCounter(BrowsableEditableData bd){  initComponents();  bd.addBrowseListener(this);  bd.addStateListener(this);}  }
class C{  public static void copyIntoColumn(double[][] destination,int column,double[] source) throws Exception {  if (source.length != destination.length) {    throw new Exception("Destination column is not of the same length as the source (" + destination.length + " vs "+ source.length+ ")");  }  for (int r=0; r < destination.length; r++) {    destination[r][column]=source[r];  }}  }
class C{  public void pause(){  if (currentController != null) {    currentController.pause();  }  messageDispatcher.postMessage(AutumnMessage.GAME_PAUSED);}  }
class C{  private static NetworkDatacenter createDatacenter(String name){  List<NetworkHost> hostList=new ArrayList<NetworkHost>();  int mips=1;  int ram=2048;  long storage=1000000;  int bw=10000;  for (int i=0; i < NetworkConstants.EdgeSwitchPort * NetworkConstants.AggSwitchPort * NetworkConstants.RootSwitchPort; i++) {    List<Pe> peList=new ArrayList<Pe>();    peList.add(new Pe(0,new PeProvisionerSimple(mips)));    peList.add(new Pe(1,new PeProvisionerSimple(mips)));    peList.add(new Pe(2,new PeProvisionerSimple(mips)));    peList.add(new Pe(3,new PeProvisionerSimple(mips)));    peList.add(new Pe(4,new PeProvisionerSimple(mips)));    peList.add(new Pe(5,new PeProvisionerSimple(mips)));    peList.add(new Pe(6,new PeProvisionerSimple(mips)));    peList.add(new Pe(7,new PeProvisionerSimple(mips)));    hostList.add(new NetworkHost(i,new RamProvisionerSimple(ram),new BwProvisionerSimple(bw),storage,peList,new VmSchedulerTimeShared(peList)));  }  String arch="x86";  String os="Linux";  String vmm="Xen";  double time_zone=10.0;  double cost=3.0;  double costPerMem=0.05;  double costPerStorage=0.001;  double costPerBw=0.0;  LinkedList<Storage> storageList=new LinkedList<Storage>();  DatacenterCharacteristics characteristics=new DatacenterCharacteristics(arch,os,vmm,hostList,time_zone,cost,costPerMem,costPerStorage,costPerBw);  NetworkDatacenter datacenter=null;  try {    datacenter=new NetworkDatacenter(name,characteristics,new NetworkVmAllocationPolicy(hostList),storageList,0);  } catch (  Exception e) {    e.printStackTrace();  }  CreateNetwork(2,datacenter);  return datacenter;}  }
class C{  public boolean isTesting(){  return this.instanceContent.isTesting();}  }
class C{  public void skipToEnd() throws IOException {  skip(max);}  }
class C{  protected void bindViewHelper(BaseViewHolder viewHolder){  Context ctx=viewHolder.itemView.getContext();  viewHolder.itemView.setId(getIdentifier());  viewHolder.itemView.setSelected(isSelected());  int selectedColor=getSelectedColor(ctx);  int color=getColor(ctx);  int selectedTextColor=getSelectedTextColor(ctx);  int iconColor=getIconColor(ctx);  int selectedIconColor=getSelectedIconColor(ctx);  UIUtils.setBackground(viewHolder.view,DrawerUIUtils.getSelectableBackground(ctx,selectedColor));  StringHolder.applyTo(this.getName(),viewHolder.name);  StringHolder.applyToOrHide(this.getDescription(),viewHolder.description);  viewHolder.name.setTextColor(getTextColorStateList(color,selectedTextColor));  ColorHolder.applyToOr(getDescriptionTextColor(),viewHolder.description,getTextColorStateList(getColor(ctx),getSelectedColor(ctx)));  if (getTypeface() != null) {    viewHolder.name.setTypeface(getTypeface());    viewHolder.description.setTypeface(getTypeface());  }  Drawable icon=ImageHolder.decideIcon(getIcon(),ctx,iconColor,isIconTinted(),1);  Drawable selectedIcon=ImageHolder.decideIcon(getSelectedIcon(),ctx,selectedIconColor,isIconTinted(),1);  ImageHolder.applyMultiIconTo(icon,iconColor,selectedIcon,selectedIconColor,isIconTinted(),viewHolder.icon);  DrawerUIUtils.setDrawerVerticalPadding(viewHolder.view);}  }
class C{  public JSONObject(JSONObject jo,String[] names){  this();  for (int i=0; i < names.length; i+=1) {    try {      this.putOnce(names[i],jo.opt(names[i]));    } catch (    Exception ignore) {    }  }}  }
class C{  public DefaultStreamingMessageQueueProducer(final String queueId,final ExcerptAppender queueProducer,final StreamingMessageQueueWaitStrategy waitStrategy){  this.queueId=queueId;  this.queueProducer=queueProducer;  this.waitStrategy=waitStrategy;}  }
class C{  public static void clamp(byte[] key){  if (key.length != 32) {    throw new IllegalArgumentException("Poly1305 key must be 256 bits.");  }  key[19]&=R_MASK_HIGH_4;  key[23]&=R_MASK_HIGH_4;  key[27]&=R_MASK_HIGH_4;  key[31]&=R_MASK_HIGH_4;  key[20]&=R_MASK_LOW_2;  key[24]&=R_MASK_LOW_2;  key[28]&=R_MASK_LOW_2;}  }
class C{  @SuppressWarnings("unchecked") public List<T> scroll(final String clauses,final int skip,final int n){  StringBuilder hql=new StringBuilder();  hql.append("FROM ").append(entityClass.getName());  if (clauses != null)   hql.append(" ").append(clauses);  Session session;  boolean newSession=false;  try {    session=getSessionFactory().getCurrentSession();  } catch (  HibernateException e) {    session=getSessionFactory().openSession();    newSession=true;  }  Query query=session.createQuery(hql.toString());  if (skip > 0)   query.setFirstResult(skip);  if (n > 0) {    query.setMaxResults(n);    query.setFetchSize(n);  }  logger.info("Execution of HQL: " + hql.toString());  long start=System.currentTimeMillis();  List<T> result=(List<T>)query.list();  logger.info("HQL executed in " + (System.currentTimeMillis() - start) + "ms.");  if (newSession) {    session.disconnect();  }  return result;}  }
class C{  public boolean hasName(){  return getName() != null;}  }
class C{  protected void doPrimary(){}  }
class C{  public static double normalizeMinusPiPiFast(final double angle){  if (angle >= -Math.PI && angle <= Math.PI) {    return angle;  }  return remainderTwoPiFast(angle);}  }
class C{  public Tuple(final A first,final B second){  this.first=first;  this.second=second;}  }
class C{  public static boolean isShortEvent(int opc){  return shortOpcodes.contains(opc);}  }
class C{  @Override public boolean isAscending(){  return false;}  }
class C{  public static Attribute toAttribute(XmlAttribute xmlAttribute){  String name=xmlAttribute.name;  Value value=null;  if (!isNull(xmlAttribute.value))   value=new Value(xmlAttribute.value);  String get=xmlAttribute.get;  String set=xmlAttribute.set;  SimplyAttribute[] attributes=null;  Class<?>[] classes=null;  if (!isEmpty(xmlAttribute.attributes)) {    attributes=new SimplyAttribute[xmlAttribute.attributes.size()];    for (int i=xmlAttribute.attributes.size(); i-- > 0; )     attributes[i]=new SimplyAttribute(xmlAttribute.attributes.get(i));  }  if (!isEmpty(xmlAttribute.classes)) {    classes=new Class<?>[xmlAttribute.classes.size()];    for (int i=xmlAttribute.classes.size(); i-- > 0; ) {      try {        classes[i]=Class.forName(xmlAttribute.classes.get(i).name);      } catch (      Exception e) {        Error.classInexistent(xmlAttribute.classes.get(i).name);      }    }  }  return new Attribute(name,value,get,set,attributes,classes);}  }
class C{  private static boolean startsWith(final CharSequence str,final CharSequence prefix,final boolean ignoreCase){  if (str == null || prefix == null) {    return str == null && prefix == null;  }  if (prefix.length() > str.length()) {    return false;  }  return CharSequenceUtils.regionMatches(str,ignoreCase,0,prefix,0,prefix.length());}  }
class C{  public static AsymmetricKeyParameter createKey(InputStream inStr) throws IOException {  return createKey(SubjectPublicKeyInfo.getInstance(new ASN1InputStream(inStr).readObject()));}  }
class C{  private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  init(getMask(actions));}  }
class C{  public static FileWriterRetentionConfig newConfig(int fileCount,long aggregateFileSize,long ageSec,long periodMsec){  return new FileWriterRetentionConfig(fileCount,aggregateFileSize,ageSec,periodMsec);}  }
class C{  public static <C extends Comparable<?>>Range<C> downTo(C endpoint,BoundType boundType){switch (boundType) {case OPEN:    return greaterThan(endpoint);case CLOSED:  return atLeast(endpoint);default :throw new AssertionError();}}  }
class C{  private void addIncluded(OddObject addTo,JSONArray included) throws JSONException {  for (int i=0; i < included.length(); i++) {    JSONObject includedObject=included.getJSONObject(i);    String includedType=JSON.getString(includedObject,"type");switch (includedType) {case OddObject.TYPE_ARTICLE:      addTo.addIncluded(parseArticle(includedObject));    break;case OddObject.TYPE_COLLECTION:  addTo.addIncluded(parseCollection(includedObject));break;case OddObject.TYPE_EVENT:addTo.addIncluded(parseEvent(includedObject));break;case OddObject.TYPE_EXTERNAL:addTo.addIncluded(parseExternal(includedObject));break;case OddObject.TYPE_PROMOTION:addTo.addIncluded(parsePromotion(includedObject));break;case OddObject.TYPE_LIVE_STREAM:case OddObject.TYPE_VIDEO:addTo.addIncluded(parseMedia(includedObject));break;}}}  }
class C{  public void testAtomicOffheapTiered() throws Exception {  testAtomic0(cachesAtomicOffheapTiered);}  }
class C{  @Check public void checkVariableStatement(Statement statement){  EObject con=statement.eContainer();  if (con instanceof Script) {    Script script=(Script)con;    if (!isContainedInStaticPolyfillModule(script)) {      return;    }    if (statement instanceof FunctionDeclaration)     return;    addIssue(getMessageForPOLY_STATIC_POLYFILL_MODULE_ONLY_FILLING_CLASSES(),statement,POLY_STATIC_POLYFILL_MODULE_ONLY_FILLING_CLASSES);  }}  }
class C{  public byte[] decode(byte[] bytes) throws DecoderException {  return decodeQuotedPrintable(bytes);}  }
class C{  public static long encodeLatLon(final double lat,final double lon){  long result=encode(lat,lon);  if (result == 0xFFFFFFFFFFFFFFFFL) {    return result & 0xC000000000000000L;  }  return result >>> 2;}  }
class C{  @Override int insertBlob(byte[] srcBuffer,int srcRowOffset,byte[] dstBuffer,int dstRowOffset,int dstBlobTail){  int srcColumnOffset=srcRowOffset + offset();  int dstColumnOffset=dstRowOffset + offset();  int blobLen=BitsUtil.readInt16(srcBuffer,srcColumnOffset + 2);  if (blobLen == 0) {    return dstBlobTail;  }  blobLen&=~LARGE_BLOB_MASK;  if (dstRowOffset < dstBlobTail + blobLen) {    return -1;  }  int blobOffset=BitsUtil.readInt16(srcBuffer,srcColumnOffset);  try {    System.arraycopy(srcBuffer,blobOffset,dstBuffer,dstBlobTail,blobLen);  } catch (  ArrayIndexOutOfBoundsException e) {    throw new ArrayIndexOutOfBoundsException("srcOff: " + blobOffset + " dstOff: "+ dstBlobTail+ " len: "+ blobLen+ " "+ this);  }  BitsUtil.writeInt16(dstBuffer,dstColumnOffset,dstBlobTail);  return dstBlobTail + blobLen;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:19.051 -0500",hash_original_method="5B2895B02F770919C7A447FD3807A154",hash_generated_method="FA2A899FD670AAECA62D52DFEA96AC42") @Deprecated public static void saveCacheFile(String url,CacheResult cacheRet){  saveCacheFile(url,0,cacheRet);}  }
class C{  public int[] keys(){  int[] keys=new int[size()];  int[] k=_set;  byte[] states=_states;  for (int i=k.length, j=0; i-- > 0; ) {    if (states[i] == FULL) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  private void encryptBlock(byte[] src,int srcIndex,byte[] dst,int dstIndex){  int x0=BytesTo32Bits(src,srcIndex) ^ gSubKeys[INPUT_WHITEN];  int x1=BytesTo32Bits(src,srcIndex + 4) ^ gSubKeys[INPUT_WHITEN + 1];  int x2=BytesTo32Bits(src,srcIndex + 8) ^ gSubKeys[INPUT_WHITEN + 2];  int x3=BytesTo32Bits(src,srcIndex + 12) ^ gSubKeys[INPUT_WHITEN + 3];  int k=ROUND_SUBKEYS;  int t0, t1;  for (int r=0; r < ROUNDS; r+=2) {    t0=Fe32_0(x0);    t1=Fe32_3(x1);    x2^=t0 + t1 + gSubKeys[k++];    x2=x2 >>> 1 | x2 << 31;    x3=(x3 << 1 | x3 >>> 31) ^ (t0 + 2 * t1 + gSubKeys[k++]);    t0=Fe32_0(x2);    t1=Fe32_3(x3);    x0^=t0 + t1 + gSubKeys[k++];    x0=x0 >>> 1 | x0 << 31;    x1=(x1 << 1 | x1 >>> 31) ^ (t0 + 2 * t1 + gSubKeys[k++]);  }  Bits32ToBytes(x2 ^ gSubKeys[OUTPUT_WHITEN],dst,dstIndex);  Bits32ToBytes(x3 ^ gSubKeys[OUTPUT_WHITEN + 1],dst,dstIndex + 4);  Bits32ToBytes(x0 ^ gSubKeys[OUTPUT_WHITEN + 2],dst,dstIndex + 8);  Bits32ToBytes(x1 ^ gSubKeys[OUTPUT_WHITEN + 3],dst,dstIndex + 12);}  }
class C{  public void service(ServletRequest request,ServletResponse response) throws IOException, ServletException {  HttpServletRequest req=(HttpServletRequest)request;  HttpServletResponse res=(HttpServletResponse)response;  if (!req.getMethod().equals("POST")) {    res.setStatus(500);    PrintWriter out=res.getWriter();    res.setContentType("text/html");    out.println("<h1>Hessian Requires POST</h1>");    return;  }  String serviceId=req.getPathInfo();  String objectId=req.getParameter("id");  if (objectId == null)   objectId=req.getParameter("ejbid");  ServiceContext.begin(req,res,serviceId,objectId);  try {    InputStream is=request.getInputStream();    OutputStream os=response.getOutputStream();    response.setContentType("x-application/hessian");    SerializerFactory serializerFactory=getSerializerFactory();    invoke(is,os,objectId,serializerFactory);  } catch (  RuntimeException e) {    throw e;  }catch (  ServletException e) {    throw e;  }catch (  Throwable e) {    throw new ServletException(e);  } finally {    ServiceContext.end();  }}  }
class C{  public boolean isConst(){  EObject _eContainer=this.eContainer();  if ((_eContainer instanceof VariableStatement)) {    EObject _eContainer_1=this.eContainer();    VariableStatementKeyword _varStmtKeyword=((VariableStatement)_eContainer_1).getVarStmtKeyword();    return (_varStmtKeyword == VariableStatementKeyword.CONST);  }  return false;}  }
class C{  public boolean remove(final CacheKey key){  Preconditions.checkNotNull(key);  final EncodedImage encodedImage;synchronized (this) {    encodedImage=mMap.remove(key);  }  if (encodedImage == null) {    return false;  }  try {    return encodedImage.isValid();  }  finally {    encodedImage.close();  }}  }
class C{  @Override public <Result,Body>Result send(final IHttpRequest request,final Class<Result> resultClass,final Body serializable) throws ClientException {  return sendRequestInternal(request,resultClass,serializable,null);}  }
class C{  void add(int start,int end){  final Map.Entry<Integer,Integer> floor=mIntervals.floorEntry(start);  final Map.Entry<Integer,Integer> endFloor=mIntervals.lowerEntry(end);  final int actualStart;  final int actualEnd;  if (floor != null && start >= floor.getKey() && end <= floor.getValue()) {    return;  }  if (floor == null || start > floor.getValue()) {    actualStart=start;  } else {    actualStart=Math.min(floor.getKey(),start);  }  if (endFloor == null) {    actualEnd=end;  } else {    actualEnd=Math.max(endFloor.getValue(),end);  }  removeContainedBy(actualStart,actualEnd);  mIntervals.put(actualStart,actualEnd);}  }
class C{  public void refreshEmittedFiles() throws CoreException {  for (  IFile tsFile : getFilesToRefresh()) {    try {      TypeScriptResourceUtil.refreshAndCollectEmittedFiles(tsFile,tsconfig,true,null);    } catch (    CoreException e) {      Trace.trace(Trace.SEVERE,"Error while tsc compilation when ts file is refreshed",e);    }  }  if (tsconfig != null) {    IFile outFile=tsconfig.getOutFile();    if (outFile != null) {      TypeScriptResourceUtil.refreshFile(outFile,true);      IContainer outDir=outFile.getParent();      IPath mapFileNamePath=WorkbenchResourceUtil.getRelativePath(outFile,outDir).addFileExtension(FileUtils.MAP_EXTENSION);      TypeScriptResourceUtil.refreshAndCollectEmittedFile(mapFileNamePath,outDir,true,null);    }  }}  }
class C{  @Override public synchronized void updateBigDecimal(int columnIndex,BigDecimal x) throws SQLException {  if (!this.onInsertRow) {    if (!this.doingUpdates) {      this.doingUpdates=true;      syncUpdate();    }    this.updater.setBigDecimal(columnIndex,x);  } else {    this.inserter.setBigDecimal(columnIndex,x);    if (x == null) {      this.thisRow.setColumnValue(columnIndex - 1,null);    } else {      this.thisRow.setColumnValue(columnIndex - 1,StringUtils.getBytes(x.toString()));    }  }}  }
class C{  protected boolean isValidAltitudeMode(String altMode){  return "clampToGround".equals(altMode) || "relativeToGround".equals(altMode) || "absolute".equals(altMode);}  }
class C{  public SymbolTable(int tableSize){  fTableSize=tableSize;  fBuckets=new Entry[fTableSize];}  }
class C{  protected boolean isPostMethod(ODataRequest.Method method){  return ODataRequest.Method.POST.equals(method);}  }
class C{  public boolean suppressDialog(){  return false;}  }
class C{  public static void sort(Object[] a,Comparator c){  Object[] aux=(Object[])a.clone();  if (c == null)   mergeSort(aux,a,0,a.length,0); else   mergeSort(aux,a,0,a.length,0,c);}  }
class C{  private void parseConfiguration(){  if (!defaults.isEmpty()) {    String[] defaultsList=this.defaults.split(",");    for (    String defaultValue : defaultsList) {      String[] defaultsArray=defaultValue.split(":");      if (defaultsArray.length != 2) {        throw new IllegalArgumentException("Invalid default " + defaultValue + ". Defaults should contain source"+ " field and its corresponding default value in the format: "+ "<source-field>:<default-value>[,<source-field>:<default-value>]*"+ "For example: lang_code:English,country_code:Britain");      } else {        defaultsMapping.put(defaultsArray[0],defaultsArray[1]);      }    }  }  String[] mappingArray=this.mapping.split(",");  for (  String mapping : mappingArray) {    String[] mappingValueArray=mapping.split(":");    if (mappingValueArray.length != 3) {      throw new IllegalArgumentException("Invalid mapping " + mapping + ". Mapping should contain source field, "+ "lookup table name and target field in the format: "+ "<source-field>:<lookup-table-name>:<target-field>"+ "[,<source-field>:<lookup-table-name>:<target-field>]*"+ "For example: lang_code:language_code_lookup:lang_desc,"+ "country_code:country_lookup:country_name");    } else {      String defaultValue=null;      if (defaultsMapping.containsKey(mappingValueArray[0])) {        defaultValue=defaultsMapping.get(mappingValueArray[0]);      }      ValueMapping valueMapping=new ValueMapping(mappingValueArray[2],mappingValueArray[1],defaultValue);      mappingValues.put(mappingValueArray[0],valueMapping);    }  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tSets if binary attributes are to be coded as nominal ones.","N",0,"-N"));  newVector.addElement(new Option("\tFor each nominal value a new attribute is created, \n" + "\tnot only if there are more than 2 values.","A",0,"-A"));  return newVector.elements();}  }
class C{  public static List<Path> listFilesAndDirs(Path directory){  List<Path> fileNames=new ArrayList<>();  try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(directory)){    for (    Path path : directoryStream) {      String fn=path.getFileName().toString().toUpperCase();      if (!skipFolders.contains(fn) && !fn.matches(skipRegex) && !TvShowModuleManager.SETTINGS.getTvShowSkipFolders().contains(path.toFile().getAbsolutePath())) {        fileNames.add(path.toAbsolutePath());      } else {        LOGGER.debug("Skipping: " + path);      }    }  } catch (  IOException ex) {  }  return fileNames;}  }
class C{  public static void errorAbort(String msg){  if (handler != null) {    handler.errorAbort(msg);  } else {    throw new RuntimeException(msg,new Throwable());  }}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public void removeAllTags(){  mChildViews.clear();  removeAllViews();  postInvalidate();}  }
class C{  @Override protected double nov(I i){  return numUsers / itemCount.getDouble(i);}  }
class C{  protected void debitInventoryAndAssert(final long warehouseId,final String skuCode,final String debitQuantity,final String expectedAvailable,final String expectedReserved){  final Warehouse warehouse=warehouseService.findById(warehouseId);  skuWarehouseService.debit(warehouse,skuCode,new BigDecimal(debitQuantity));  assertInventory(warehouseId,skuCode,expectedAvailable,expectedReserved);}  }
class C{  public Schema findSchema(String schemaName){  Schema schema=schemas.get(schemaName);  return schema;}  }
class C{  public CTagCriterium(final ITagManager tagManager){  m_panel=new CTagCriteriumPanel(this,tagManager);}  }
class C{  public static void add(Vector current,Enumeration superOptions){  while (superOptions.hasMoreElements())   current.addElement(superOptions.nextElement());}  }
class C{  @Override public void transform(AffineTransform tx){  Point2D.Double anchor=getStartPoint();  Point2D.Double lead=getEndPoint();  setBounds((Point2D.Double)tx.transform(anchor,anchor),(Point2D.Double)tx.transform(lead,lead));}  }
class C{  @Override public ImmutableSet<Entry<K,V>> entries(){  ImmutableSet<Entry<K,V>> result=entries;  return result == null ? (entries=new EntrySet<K,V>(this)) : result;}  }
class C{  public Double zscore(final byte[] key,final byte[] member){  checkIsInMulti();  client.zscore(key,member);  final String score=client.getBulkReply();  return (score != null ? new Double(score) : null);}  }
class C{  public void functionUseageCounts(HashMap counts){  if (symbol instanceof GEPFunctionSymbol) {    GEPFunctionSymbol s=(GEPFunctionSymbol)symbol;    Integer cnt=(Integer)counts.get(s.symbol);    if (cnt == null)     counts.put(s.symbol,Integer.valueOf(1)); else     counts.put(s.symbol,Integer.valueOf((cnt.intValue()) + 1));  }  for (int i=0; i < numParameters; i++)   parameters[i].functionUseageCounts(counts);}  }
class C{  public static void writeShort(byte[] memory,int index,short value){  memory[index + 0]=(byte)((value >> (8 * 1)) & 0xFF);  memory[index + 1]=(byte)(value & 0xFF);}  }
class C{  void fullyLock(){  putLock.lock();  takeLock.lock();}  }
class C{  public void build(Context context){  final String vertexShader=getVertexShader(context);  final String fragmentShader=getFragmentShader(context);  final int vertexShaderHandle=compileShader(GLES20.GL_VERTEX_SHADER,vertexShader);  final int fragmentShaderHandle=compileShader(GLES20.GL_FRAGMENT_SHADER,fragmentShader);  mProgramHandle=createAndLinkProgram(vertexShaderHandle,fragmentShaderHandle,new String[]{"a_Position","a_TexCoordinate"});  mMVPMatrixHandle=GLES20.glGetUniformLocation(mProgramHandle,"u_MVPMatrix");  mMVMatrixHandle=GLES20.glGetUniformLocation(mProgramHandle,"u_MVMatrix");  mTextureUniformHandle=GLES20.glGetUniformLocation(mProgramHandle,"u_Texture");  mPositionHandle=GLES20.glGetAttribLocation(mProgramHandle,"a_Position");  mTextureCoordinateHandle=GLES20.glGetAttribLocation(mProgramHandle,"a_TexCoordinate");}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  static void test8(){  for (int i=0; i < input.length; i++) {    String str=input[i];    int length=str.length();    for (int j=0; j <= length; j++) {      int result=str.codePointCount(j,length);      int expected=Character.codePointCount(str,j,length);      check(result != expected,"codePointCount(input[" + i + "], "+ j+ ", "+ length+ ")",result,expected);      String substr=str.substring(j,length);      result=substr.codePointCount(0,substr.length());      check(result != expected,"substring:codePointCount(input[" + i + "], "+ j+ ", "+ length+ ")",result,expected);    }    for (int j=length; j >= 0; j--) {      int result=str.codePointCount(0,j);      int expected=Character.codePointCount(str,0,j);      check(result != expected,"codePointCount(input[" + i + "], 0, "+ j+ ")",result,expected);      String substr=str.substring(0,j);      result=substr.codePointCount(0,substr.length());      check(result != expected,"substring:codePointCount(input[" + i + "], 0, "+ j+ ")",result,expected);    }    testCodePointCount(null,0,0,NullPointerException.class);    testCodePointCount(str,-1,length,IndexOutOfBoundsException.class);    testCodePointCount(str,0,length + 1,IndexOutOfBoundsException.class);    testCodePointCount(str,length,length - 1,IndexOutOfBoundsException.class);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  String attrValue;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(3);  testEmployee.removeAttribute("street");  attrValue=testEmployee.getAttribute("street");  assertEquals("streetYes","Yes",attrValue);}  }
class C{  public static _DrillthroughType fromString(final String value) throws SOAPSerializationException {  return (_DrillthroughType)Enumeration.fromString(value,_DrillthroughType.VALUES_TO_INSTANCES);}  }
class C{  private boolean logIfDefined(Object objToLog){  if (objToLog != null && !(objToLog instanceof Undefined)) {    logger.info(Context.toString(objToLog));    return true;  } else   return false;}  }
class C{  protected void initIntensity(double intensity){  if (log.isDebugEnabled()) {    log.debug("initIntensity(" + intensity + ")");  }  maxDimStep=tc.getNumberOfIntensitySteps();  if (intensity <= 0.5) {    X10Sequence out3=new X10Sequence();    out3.addAddress(housecode,devicecode);    out3.addFunction(housecode,X10Sequence.FUNCTION_OFF,0);    tc.sendX10Sequence(out3,null);    X10Sequence out2=new X10Sequence();    out2.addAddress(housecode,devicecode);    out2.addFunction(housecode,X10Sequence.FUNCTION_DIM,maxDimStep);    tc.sendX10Sequence(out2,null);    lastOutputStep=0;    if (log.isDebugEnabled()) {      log.debug("initIntensity: sent dim reset");    }  } else {    X10Sequence out3=new X10Sequence();    out3.addAddress(housecode,devicecode);    out3.addFunction(housecode,X10Sequence.FUNCTION_ON,0);    tc.sendX10Sequence(out3,null);    X10Sequence out2=new X10Sequence();    out2.addAddress(housecode,devicecode);    out2.addFunction(housecode,X10Sequence.FUNCTION_BRIGHT,maxDimStep);    tc.sendX10Sequence(out2,null);    lastOutputStep=maxDimStep;    if (log.isDebugEnabled()) {      log.debug("initIntensity: sent bright reset");    }  }}  }
class C{  public static void main(final String[] args){}  }
class C{  public static <T>boolean addAll(List<T> self,int index,T[] items){  return self.addAll(index,Arrays.asList(items));}  }
class C{  public boolean isConnectionBased(){  return false;}  }
class C{  private void pruneScrapViews(){  final int maxViews=mActiveViews.length;  final int viewTypeCount=mViewTypeCount;  final ArrayList<View>[] scrapViews=mScrapViews;  for (int i=0; i < viewTypeCount; ++i) {    final ArrayList<View> scrapPile=scrapViews[i];    int size=scrapPile.size();    final int extras=size - maxViews;    size--;    for (int j=0; j < extras; j++) {      removeDetachedView(scrapPile.remove(size--),false);    }  }  if (mTransientStateViews != null) {    for (int i=0; i < mTransientStateViews.size(); i++) {      final View v=mTransientStateViews.valueAt(i);      if (!ViewCompat.hasTransientState(v)) {        mTransientStateViews.removeAt(i);        i--;      }    }  }}  }
class C{  protected boolean isPlainFlavor(DataFlavor flavor){  DataFlavor[] flavors=plainFlavors;  for (int i=0; i < flavors.length; i++) {    if (flavors[i].equals(flavor))     return true;  }  return false;}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  private static String contentLengthHeader(final long length){  return String.format("Content-Length: %d",length);}  }
class C{  public boolean hasPropertyScribe(VCardProperty property){  if (property instanceof RawProperty) {    return true;  }  return getPropertyScribe(property.getClass()) != null;}  }
class C{  public BinaryBitwiseOperator createBinaryBitwiseOperatorFromString(EDataType eDataType,String initialValue){  BinaryBitwiseOperator result=BinaryBitwiseOperator.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  private void createPhotonMapTexture(){  this.photonMapTexture=glGenTextures();  glBindTexture(GL_TEXTURE_CUBE_MAP_ARRAY,photonMapTexture);  glTexStorage3D(GL_TEXTURE_CUBE_MAP_ARRAY,1,GL_RG16F,photonMapSize,photonMapSize,6 * boxes.length / 2);  glBindTexture(GL_TEXTURE_CUBE_MAP_ARRAY,0);  clearPhotonMapTexture();}  }
class C{  private List<FieldInfo> createFieldInfoMap(String str){  fieldInfos=new ArrayList<FieldInfo>();  StringTokenizer strtok=new StringTokenizer(str,RECORD_SEPARATOR);  while (strtok.hasMoreTokens()) {    String[] token=strtok.nextToken().split(FIELD_SEPARATOR);    try {      fieldInfos.add(new FieldInfo(token[0],token[1],SupportType.valueOf(token[2])));    } catch (    Exception e) {      LOG.error("Invalid support type",e);    }  }  return fieldInfos;}  }
class C{  protected ShaderVar addConst(String name,int value){  return addConst(name,new RInt(value));}  }
class C{  public Bundler putAll(Bundle bundle){  this.bundle.putAll(bundle);  return this;}  }
class C{  protected static XMLEventParserContext createInstanceFromPrototype(XMLEventParserContext prototype) throws Exception {  Constructor<? extends XMLEventParserContext> constructor;  constructor=prototype.getClass().getConstructor(prototype.getClass());  return constructor.newInstance(prototype);}  }
class C{  public static byte[] encode(byte[] pArray){  return encodeBase64(pArray,false);}  }
class C{  public boolean isReady(){synchronized (currentStateLock) {    return currentState == ConnectionState.READY;  }}  }
class C{  public static EndpointMatrixGraph serializableInstance(){  return new EndpointMatrixGraph();}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public boolean isSavePaymentConfigurationPending(){  Query query=ds.createNamedQuery("TriggerProcessIdentifier.isSavePaymentConfigurationPending");  query.setParameter("pendingStates",TriggerProcess.getUnfinishedStatus());  query.setParameter("triggerType",TriggerType.SAVE_PAYMENT_CONFIGURATION);  query.setParameter("orgKeyName",TriggerProcessIdentifierName.ORGANIZATION_KEY);  query.setParameter("orgKey",String.valueOf(ds.getCurrentUser().getOrganization().getKey()));  return ((Long)query.getSingleResult()).longValue() > 0;}  }
class C{  public static String toHeaderElement(String name,String value){  return OAuth.percentEncode(name) + "=\"" + OAuth.percentEncode(value)+ "\"";}  }
class C{  private void attemptLogin(){  if (mAuthTask != null) {    return;  }  mEmailView.setError(null);  mPasswordView.setError(null);  String email=mEmailView.getText().toString();  String password=mPasswordView.getText().toString();  boolean cancel=false;  View focusView=null;  if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {    mPasswordView.setError(getString(R.string.error_invalid_password));    focusView=mPasswordView;    cancel=true;  }  if (TextUtils.isEmpty(email)) {    mEmailView.setError(getString(R.string.error_field_required));    focusView=mEmailView;    cancel=true;  } else   if (!isEmailValid(email)) {    mEmailView.setError(getString(R.string.error_invalid_email));    focusView=mEmailView;    cancel=true;  }  if (cancel) {    focusView.requestFocus();  } else {    showProgress(true);    mAuthTask=new UserLoginTask(email,password);    mAuthTask.execute((Void)null);  }}  }
class C{  public void resetCvsCommand(){  super.resetCvsCommand();  setMessage(null);  setRecursive(true);  setForceCommit(false);  setNoModuleProgram(false);  setToRevisionOrBranch(null);}  }
class C{  public final void lazySet(V newValue){  unsafe.putOrderedObject(this,valueOffset,newValue);}  }
class C{  @SideEffectFree public XMLStreamException(@Nullable Throwable th){  super(th);  nested=th;}  }
class C{  public synchronized StatusHistoryEntry add(String title,String game,long lastSet,int timesUsed){  StatusHistoryEntry entry=new StatusHistoryEntry(title,game,lastSet,timesUsed,false);  put(entry);  return entry;}  }
class C{  public static Object invokeObjectMethod(Object object,String methodName,Object[] args,Interpreter interpreter,CallStack callstack,SimpleNode callerInfo) throws ReflectError, EvalError, InvocationTargetException {  if (object instanceof This && !This.isExposedThisMethod(methodName))   return ((This)object).invokeMethod(methodName,args,interpreter,callstack,callerInfo,false);  try {    BshClassManager bcm=interpreter == null ? null : interpreter.getClassManager();    Class clas=object.getClass();    Method method=resolveExpectedJavaMethod(bcm,clas,object,methodName,args,false);    return invokeMethod(method,object,args);  } catch (  UtilEvalError e) {    throw e.toEvalError(callerInfo,callstack);  }}  }
class C{  public InstrumentHeader validateAndConstructBankInstrument(final PaymentInfoBank paytInfoBank){  String invalidBankPaytMsg="";  if (paytInfoBank.getInstrumentAmount() == null || paytInfoBank.getInstrumentAmount().compareTo(BigDecimal.ZERO) <= 0)   invalidBankPaytMsg+="Invalid Bank Instrument Amount[" + paytInfoBank.getInstrumentAmount() + "] \n";  if (paytInfoBank.getTransactionNumber() == null || paytInfoBank.getTransactionNumber() < 0 || String.valueOf(paytInfoBank.getTransactionNumber()).length() != 6)   invalidBankPaytMsg+="Invalid Bank Transaction Number[" + paytInfoBank.getInstrumentAmount() + "] \n";  if (paytInfoBank.getTransactionDate() == null)   invalidBankPaytMsg+="Missing Bank Transaction Date \n";  if (new Date().compareTo(paytInfoBank.getTransactionDate()) == -1)   invalidBankPaytMsg+="Bank Transaction Date[" + paytInfoBank.getTransactionDate() + "] cannot be a future date \n";  Bankaccount account=null;  if (paytInfoBank.getBankAccountId() == null)   invalidBankPaytMsg+="Missing Bank Account Id \n"; else {    account=bankAccountDAO.findById(paytInfoBank.getBankAccountId().intValue(),false);    if (account == null)     invalidBankPaytMsg+="No account found for bank account id[" + paytInfoBank.getBankAccountId() + "] \n";  }  if (!CollectionConstants.BLANK.equals(invalidBankPaytMsg))   throw new ApplicationRuntimeException(invalidBankPaytMsg);  final InstrumentHeader instrHeaderBank=new InstrumentHeader();  instrHeaderBank.setInstrumentType(financialsUtil.getInstrumentTypeByType(CollectionConstants.INSTRUMENTTYPE_BANK));  instrHeaderBank.setBankAccountId(account);  instrHeaderBank.setBankId(account.getBankbranch().getBank());  instrHeaderBank.setBankBranchName(account.getBankbranch().getBranchname());  instrHeaderBank.setTransactionNumber(String.valueOf(paytInfoBank.getTransactionNumber()));  instrHeaderBank.setInstrumentAmount(paytInfoBank.getInstrumentAmount());  instrHeaderBank.setTransactionDate(paytInfoBank.getTransactionDate());  instrHeaderBank.setIsPayCheque(CollectionConstants.ZERO_INT);  return instrHeaderBank;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGenPackage.DEPRECATABLE_ELEMENT__DEPRECATED:    return isDeprecated();case SGenPackage.DEPRECATABLE_ELEMENT__COMMENT:  return getComment();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void addDepartures(TransitSchedule schedule,List<Id<TransitLine>> lineIDs,double headway_sec,double startTime,double endTime,double pausenzeit){  this.transitSchedule=schedule;  if (headway_sec < 1) {    throw new RuntimeException("Headway is less than 1 sec. Aborting...");  }  for (  Id<TransitLine> transitLineId : lineIDs) {    log.info("Transit line Id: " + transitLineId);    Map<Id<TransitRoute>,TransitRoute> routeId2transitRoute=new HashMap<>();    for (    TransitRoute transitRoute : this.transitSchedule.getTransitLines().get(transitLineId).getRoutes().values()) {      routeId2transitRoute.put(transitRoute.getId(),transitRoute);    }    if (routeId2transitRoute.size() > 2) {      throw new RuntimeException("A transit line consists of more than two transit routes. So far it is expected that a transit line consists of two identical" + " transit routes (one for each direction). Can't garantee correct calculation of departure times. Aborting...");    }    if (routeId2transitRoute.size() < 2) {      throw new RuntimeException("A transit line consists of less than two transit routes. So far it is expected that a transit line consists of two identical" + " transit routes (one for each direction). Can't garantee correct calculation of departure times. Aborting...");    }    List<Id<TransitRoute>> routeIDs=new ArrayList<>();    routeIDs.addAll(routeId2transitRoute.keySet());    int lastStop0=routeId2transitRoute.get(routeIDs.get(0)).getStops().size() - 1;    double routeTravelTime0=routeId2transitRoute.get(routeIDs.get(0)).getStops().get(lastStop0).getArrivalOffset();    int lastStop1=routeId2transitRoute.get(routeIDs.get(1)).getStops().size() - 1;    double routeTravelTime1=routeId2transitRoute.get(routeIDs.get(1)).getStops().get(lastStop1).getArrivalOffset();    if (routeTravelTime0 != routeTravelTime1) {      throw new RuntimeException("The transit routes have different travel times. So far it is expected that a transit line consists of two identical" + " transit routes (one for each direction). Can't garantee correct calculation of departure times.  ");    }    double umlaufzeit_sec=Math.round((routeTravelTime0 + pausenzeit) * 2.0);    int numberOfBuses=(int)Math.ceil(umlaufzeit_sec / headway_sec);    log.info("RouteTravelTime: " + Time.writeTime(routeTravelTime0,Time.TIMEFORMAT_HHMMSS));    log.info("Umlaufzeit: " + Time.writeTime(umlaufzeit_sec,Time.TIMEFORMAT_HHMMSS));    log.info("Takt: " + Time.writeTime(headway_sec,Time.TIMEFORMAT_HHMMSS));    log.info("Required number of public vehicles: " + numberOfBuses);    List<Id<Vehicle>> vehicleIDs=createVehicleIDs(numberOfBuses,transitLineId);    int routeNr=0;    for (    Id<TransitRoute> routeId : routeId2transitRoute.keySet()) {      double firstDepartureTime=0.0;      if (routeNr == 1) {        firstDepartureTime=startTime;        log.info(routeId.toString() + ": first departure: " + Time.writeTime(firstDepartureTime,Time.TIMEFORMAT_HHMMSS));      } else       if (routeNr == 0) {        firstDepartureTime=startTime + umlaufzeit_sec / 2;        log.info(routeId.toString() + ": first departure: " + Time.writeTime(firstDepartureTime,Time.TIMEFORMAT_HHMMSS));      }      int vehicleIndex=0;      int depNr=0;      for (double departureTime=firstDepartureTime; departureTime < endTime; ) {        Departure departure=this.sf.createDeparture(Id.create(depNr,Departure.class),departureTime);        departure.setVehicleId(vehicleIDs.get(vehicleIndex));        routeId2transitRoute.get(routeId).addDeparture(departure);        departureTime=departureTime + headway_sec;        depNr++;        if (vehicleIndex == numberOfBuses - 1) {          vehicleIndex=0;        } else {          vehicleIndex++;        }      }      routeNr++;    }  }}  }
class C{  public void dragExit(DragSourceEvent dse){  DragSourceListener dsl=listener;  if (dsl != null) {    dsl.dragExit(dse);  }  getDragSource().processDragExit(dse);  updateCurrentCursor(DnDConstants.ACTION_NONE,DnDConstants.ACTION_NONE,DEFAULT);}  }
class C{  public IntChunks(final long length){  this(length,CHUNK_BITS);}  }
class C{  public static Bitmap create(int width,int height,String text,int textSize,Align textAlign,int textColor,int backgroundColor){  Bitmap bitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(bitmap);  Paint p=new Paint();  p.setTextSize(textSize);  p.setTextAlign(textAlign);  p.setColor(textColor);  int x=(int)(canvas.getWidth() / 2.0f);  int y=(int)(canvas.getHeight() / 2.0f);  canvas.drawColor(backgroundColor);  canvas.drawText(text,x,y,p);  return bitmap;}  }
class C{  @Override public boolean equals(final Object obj){  if (ActiveMQRAManagedConnectionFactory.trace) {    ActiveMQRALogger.LOGGER.trace("equals(" + obj + ")");  }  if (obj == null) {    return false;  }  if (obj instanceof ActiveMQRAManagedConnectionFactory) {    ActiveMQRAManagedConnectionFactory other=(ActiveMQRAManagedConnectionFactory)obj;    return mcfProperties.equals(other.getProperties()) && ra.equals(other.getResourceAdapter());  } else {    return false;  }}  }
class C{  public void testWholeMapReduceExecution() throws Exception {  IgfsPath inDir=new IgfsPath(PATH_INPUT);  igfs.mkdirs(inDir);  IgfsPath inFile=new IgfsPath(inDir,HadoopWordCount2.class.getSimpleName() + "-input");  generateTestFile(inFile.toString(),"red",red,"blue",blue,"green",green,"yellow",yellow);  for (  boolean[] apiMode : getApiModes()) {    assert apiMode.length == 3;    boolean useNewMapper=apiMode[0];    boolean useNewCombiner=apiMode[1];    boolean useNewReducer=apiMode[2];    doTest(inFile,useNewMapper,useNewCombiner,useNewReducer);  }}  }
class C{  @Override protected void doFillIntoGrid(Composite parent,int numColumns){  getLabelControl(parent);  textField=getTextControl(parent);  GridData gd=new GridData();  gd.horizontalSpan=numColumns - 1;  if (widthInChars != UNLIMITED) {    GC gc=new GC(textField);    try {      Point extent=gc.textExtent("X");      gd.widthHint=widthInChars * extent.x;    }  finally {      gc.dispose();    }  } else {    gd.horizontalAlignment=GridData.FILL;    gd.grabExcessHorizontalSpace=true;  }  gd.grabExcessHorizontalSpace=true;  gd.grabExcessVerticalSpace=true;  textField.setLayoutData(gd);}  }
class C{  public static String map2OID(String algName){  checkCacheVersion();  String result=alg2OidMap.get(algName.toUpperCase(Locale.US));  if (result != null) {    return result;  }  AlgNameMapperSource s=source;  if (s != null) {    return s.mapNameToOid(algName);  }  return null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static double variance(double[] x){  final double m=mean(x);  return variance(x,m);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static JavaFXBinder<Double> bind(WritableDoubleValue writableDoubleValue){  requireNonNull(writableDoubleValue,"writableDoubleValue");  return new DefaultJavaFXBinder(writableDoubleValue);}  }
class C{  static void throwClientError(String str){  LOG.error(str);  throw new RuntimeException(str);}  }
class C{  protected void tearDown() throws Exception {  connector=null;  if (dropTables) {    dropTables();    dropTables=false;  }}  }
class C{  private int offset(long index){  int offset=(int)(index % buffer.length);  if (offset < 0) {    offset+=buffer.length;  }  return offset;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void add(long x){  Cell[] as;  long b, v;  HashCode hc;  Cell a;  int n;  if ((as=cells) != null || !casBase(b=base,b + x)) {    boolean uncontended=true;    int h=(hc=threadHashCode.get()).code;    if (as == null || (n=as.length) < 1 || (a=as[(n - 1) & h]) == null || !(uncontended=a.cas(v=a.value,v + x)))     retryUpdate(x,hc,uncontended);  }}  }
class C{  @Override protected void register(ConfigurationCapabilityFactory configurationCapabilityFactory){  configurationCapabilityFactory.registerConfigurationCapability("resin2x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Resin2xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("resin2x",ContainerType.INSTALLED,ConfigurationType.EXISTING,Resin2xExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("resin3x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Resin3xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("resin3x",ContainerType.INSTALLED,ConfigurationType.EXISTING,Resin3xExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("resin31x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Resin3xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("resin31x",ContainerType.INSTALLED,ConfigurationType.EXISTING,Resin3xExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("resin4x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Resin3xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("resin4x",ContainerType.INSTALLED,ConfigurationType.EXISTING,Resin3xExistingLocalConfigurationCapability.class);}  }
class C{  public static final HashMap<LabelSet,Integer> countCombinationsSparse(Instances D,int L){  HashMap<LabelSet,Integer> map=new HashMap<LabelSet,Integer>();  for (int i=0; i < D.numInstances(); i++) {    LabelSet y=new LabelSet(MLUtils.toSparseIntArray(D.instance(i),L));    Integer c=map.get(y);    map.put(y,c == null ? 1 : c + 1);  }  return map;}  }
class C{  public AccountNotification(final Account account){  super(NotificationType.Account);  this.account=account;}  }
class C{  public void removeListener(INotifyChangedListener notifyChangedListener){  changeNotifier.removeListener(notifyChangedListener);}  }
class C{  private boolean isInstalled() throws IOException {  return FileMisc.hasToken(getRootFolder(),TOKEN);}  }
class C{  @Override public void beginWindow(long windowId){}  }
class C{  public SetHypervolume(){  super();}  }
class C{  public static boolean inactive(ActivationID id) throws UnknownObjectException, ActivationException, RemoteException {  return ActivationGroup.currentGroup().inactiveObject(id);}  }
class C{  private static JFreeChart createWaterfallChart(){  Number[][] data=new Integer[][]{{new Integer(-3),new Integer(-2)},{new Integer(-1),new Integer(1)},{new Integer(2),new Integer(3)}};  CategoryDataset dataset=DatasetUtilities.createCategoryDataset("S","C",data);  return ChartFactory.createWaterfallChart("Waterfall Chart","Domain","Range",dataset,PlotOrientation.HORIZONTAL,true,true,true);}  }
class C{  public CaretPolicy(){}  }
class C{  public BaseCopyRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options,final String name,final ItemReference parentReference){  super(requestUrl,client,options);  mName=name;  mParentReference=parentReference;}  }
class C{  public String addStepsForRestoreFromFullcopy(Workflow workflow,String waitFor,URI storage,List<URI> fullcopies,String opId,CloneRestoreCompleter completer) throws InternalException {  Volume firstFullCopy=getDataObject(Volume.class,fullcopies.get(0),_dbClient);  if (!firstFullCopy.isVPlexVolume(_dbClient)) {    return waitFor;  }  BlockObject firstSource=BlockObject.fetch(_dbClient,firstFullCopy.getAssociatedSourceVolume());  if (!NullColumnValueGetter.isNullURI(firstSource.getConsistencyGroup())) {    completer.addConsistencyGroupId(firstSource.getConsistencyGroup());  }  StorageSystem vplexSystem=_dbClient.queryObject(StorageSystem.class,storage);  Workflow.Method restoreFromFullcopyMethod=new Workflow.Method(RESTORE_FROM_FULLCOPY_METHOD_NAME,storage,fullcopies);  waitFor=workflow.createStep(RESTORE_FROM_FULLCOPY_STEP,"Restore volumes from full copies",waitFor,storage,vplexSystem.getSystemType(),VPlexDeviceController.class,restoreFromFullcopyMethod,null,null);  _log.info("Created workflow step to restore VPLEX volume from full copies");  return waitFor;}  }
class C{  private boolean isOwnValue(Value value){  return value instanceof NativeValue && ((NativeValue)value).getValueStoreRevision().getValueStore() == this;}  }
class C{  public int hashCode(){  int result=31 * declaringClass.hashCode() + methodName.hashCode();  result=31 * result + Objects.hashCode(fileName);  result=31 * result + lineNumber;  return result;}  }
class C{  private void computeTabVisibilitySortingHelper(RectF stackRect){  int referenceIndex=mReferenceOrderIndex;  if (referenceIndex == -1) {    int centerIndex=getTabIndexAtPositon(mLayout.getWidth() / 2.0f,mLayout.getHeight() / 2.0f);    if (mCurrentScrollDirection > 0)     centerIndex++;    if (mCurrentScrollDirection < 0)     centerIndex--;    referenceIndex=MathUtils.clamp(centerIndex,0,mStackTabs.length - 1);  }  final float width=mLayout.getWidth();  final float height=mLayout.getHeight();  final float left=MathUtils.clamp(stackRect.left,0,width);  final float right=MathUtils.clamp(stackRect.right,0,width);  final float top=MathUtils.clamp(stackRect.top,0,height);  final float bottom=MathUtils.clamp(stackRect.bottom,0,height);  final float stackArea=(right - left) * (bottom - top);  final float layoutArea=Math.max(width * height,1.0f);  final float stackVisibilityMultiplier=stackArea / layoutArea;  for (int i=0; i < mStackTabs.length; i++) {    mStackTabs[i].updateStackVisiblityValue(stackVisibilityMultiplier);    mStackTabs[i].updateVisiblityValue(referenceIndex);  }}  }
class C{  public void sameFrame(int offsetDelta){  numOfEntries++;  if (offsetDelta < 64)   output.write(offsetDelta); else {    output.write(251);    write16(offsetDelta);  }}  }
class C{  public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public static boolean startActivities(Context context,Intent[] intents){  return startActivities(context,intents,null);}  }
class C{  public Bundler putStringArray(String key,String[] value){  bundle.putStringArray(key,value);  return this;}  }
class C{  public Expression predicate(int opPos) throws TransformerException {  return compile(opPos + 2);}  }
class C{  @Override public Object clone(){  try {    IdentityHashMap t=(IdentityHashMap)super.clone();    t.table=new Entry[table.length];    for (int i=table.length; i-- > 0; ) {      t.table[i]=(table[i] != null) ? (Entry)table[i].clone() : null;    }    t.keySet=null;    t.entrySet=null;    t.values=null;    t.modCount=0;    return t;  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  public XML atDevelopmentTime() throws MalformedURLException, IOException {  return new XML(false,path);}  }
class C{  public long optLong(int index){  return this.optLong(index,0);}  }
class C{  public double optDouble(String key){  return this.optDouble(key,Double.NaN);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void scan(JSONArray args){  Intent intentScan=new Intent(SCAN_INTENT);  intentScan.addCategory(Intent.CATEGORY_DEFAULT);  if (args.length() > 0) {    JSONObject obj;    JSONArray names;    String key;    Object value;    for (int i=0; i < args.length(); i++) {      try {        obj=args.getJSONObject(i);      } catch (      JSONException e) {        Log.i("CordovaLog",e.getLocalizedMessage());        continue;      }      names=obj.names();      for (int j=0; j < names.length(); j++) {        try {          key=names.getString(j);          value=obj.get(key);          if (value instanceof Integer) {            intentScan.putExtra(key,(Integer)value);          } else           if (value instanceof String) {            intentScan.putExtra(key,(String)value);          }        } catch (        JSONException e) {          Log.i("CordovaLog",e.getLocalizedMessage());          continue;        }      }    }  }  intentScan.setPackage(this.cordova.getActivity().getApplicationContext().getPackageName());  this.cordova.startActivityForResult((CordovaPlugin)this,intentScan,REQUEST_CODE);}  }
class C{  public static List<URI> fetchSRDFVolumes(DbClient dbClient,URI volumeURI){  List<URI> volumeIDs=new ArrayList<URI>();  Volume volume=dbClient.queryObject(Volume.class,volumeURI);  if (volume.getSrdfTargets() != null && !volume.getSrdfTargets().isEmpty()) {    volumeIDs.add(volume.getId());    for (    String volumeID : volume.getSrdfTargets()) {      volumeIDs.add(URI.create(volumeID));    }  }  if (volume.getSrdfParent() != null) {    Volume parentVol=dbClient.queryObject(Volume.class,volume.getSrdfParent().getURI());    if (parentVol != null) {      volumeIDs.addAll(Volume.fetchSRDFVolumes(dbClient,parentVol.getId()));    }  }  return volumeIDs;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  DocumentType doc1Type;  NamedNodeMap entityList;  Entity entity2;  Entity entity1;  Document ownerDocument;  DocumentType docType;  String system;  String entityName;  Node child;  String childName;  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staffNS",true);  doc1Type=aNewDoc.getDoctype();  entityList=doc1Type.getEntities();  assertNotNull("entitiesNotNull",entityList);  entity2=(Entity)entityList.getNamedItem("ent4");  entity1=(Entity)doc.importNode(entity2,true);  ownerDocument=entity1.getOwnerDocument();  docType=ownerDocument.getDoctype();  system=docType.getSystemId();  assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);  entityName=entity1.getNodeName();  assertEquals("entityName","ent4",entityName);  child=entity1.getFirstChild();  assertNotNull("notnull",child);  childName=child.getNodeName();  assertEquals("childName","entElement1",childName);}  }
class C{  public Response exportPath(String projectPath,String path,String revision) throws IOException, ServerException {  final File project=new File(projectPath);  final List<String> uArgs=defaultArgs();  if (!Strings.isNullOrEmpty(revision)) {    addOption(uArgs,"--revision",revision);  }  uArgs.add("--force");  uArgs.add("export");  File tempDir=null;  File zip=null;  try {    tempDir=Files.createTempDir();    final CommandLineResult result=runCommand(null,uArgs,project,Arrays.asList(path,tempDir.getAbsolutePath()));    if (result.getExitCode() != 0) {      LOG.warn("Svn export process finished with exit status {}",result.getExitCode());      throw new ServerException("Exporting was failed");    }    zip=new File(Files.createTempDir(),"export.zip");    ZipUtils.zipDir(tempDir.getPath(),tempDir,zip,IoUtil.ANY_FILTER);  }  finally {    if (tempDir != null) {      IoUtil.deleteRecursive(tempDir);    }  }  final Response.ResponseBuilder responseBuilder=Response.ok(new DeleteOnCloseFileInputStream(zip),MediaType.ZIP.toString()).lastModified(new Date(zip.lastModified())).header(HttpHeaders.CONTENT_LENGTH,Long.toString(zip.length())).header("Content-Disposition","attachment; filename=\"export.zip\"");  return responseBuilder.build();}  }
class C{  public static char[] createArraySignature(char[] typeSignature,int arrayCount){  if (arrayCount == 0)   return typeSignature;  int sigLength=typeSignature.length;  char[] result=new char[arrayCount + sigLength];  for (int i=0; i < arrayCount; i++) {    result[i]=C_ARRAY;  }  System.arraycopy(typeSignature,0,result,arrayCount,sigLength);  return result;}  }
class C{  public static <T>FileWriterCycleConfig<T> newConfig(long fileSize,int cntTuples,long periodMsec,Predicate<T> tuplePredicate){  return new FileWriterCycleConfig<>(fileSize,cntTuples,periodMsec,tuplePredicate);}  }
class C{  public int add(TermsEnum te,int base) throws IOException {  PostingsEnum postings=null;  int termCount=0;  for (; ; ) {    BytesRef term=te.next();    if (term == null)     break;    termCount++;    postings=te.postings(postings,PostingsEnum.NONE);    add(postings,base);  }  return termCount;}  }
class C{  protected void vipProxyArpReply(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx,String vipId){  log.debug("vipProxyArpReply");  Ethernet eth=IFloodlightProviderService.bcStore.get(cntx,IFloodlightProviderService.CONTEXT_PI_PAYLOAD);  if (!(eth.getPayload() instanceof ARP))   return;  ARP arpRequest=(ARP)eth.getPayload();  IPacket arpReply=new Ethernet().setSourceMACAddress(vips.get(vipId).proxyMac).setDestinationMACAddress(eth.getSourceMACAddress()).setEtherType(EthType.ARP).setVlanID(eth.getVlanID()).setPriorityCode(eth.getPriorityCode()).setPayload(new ARP().setHardwareType(ARP.HW_TYPE_ETHERNET).setProtocolType(ARP.PROTO_TYPE_IP).setHardwareAddressLength((byte)6).setProtocolAddressLength((byte)4).setOpCode(ARP.OP_REPLY).setSenderHardwareAddress(vips.get(vipId).proxyMac).setSenderProtocolAddress(arpRequest.getTargetProtocolAddress()).setTargetHardwareAddress(eth.getSourceMACAddress()).setTargetProtocolAddress(arpRequest.getSenderProtocolAddress()));  pushPacket(arpReply,sw,OFBufferId.NO_BUFFER,OFPort.ANY,(pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT)),cntx,true);  log.debug("proxy ARP reply pushed as {}",IPv4.fromIPv4Address(vips.get(vipId).address));  return;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int idx1=-1, idx2=-1;  idx2=getInt(stack);  idx1=getInt(stack);  Object obj=stack.pop();  String s=(obj == null) ? "" : obj.toString();  if (idx2 == -1)   return (s.substring(idx1)); else   return (s.substring(idx1,idx2));}  }
class C{  protected void close(){  if (Log.isLoggable(TAG,Log.VERBOSE)) {    Log.d(TAG,"unBindFromSyncAdapter: connection " + this);  }  if (mBound) {    mBound=false;    mContext.unbindService(this);  }  mSyncWakeLock.release();  mSyncWakeLock.setWorkSource(null);}  }
class C{  public CUipcMemHandle(){}  }
class C{  private void showHelpPage(){  eezeFrame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  try {    URL help=eezeHelp();    html.setDocument(help.openStream(),help.toString());    changeTitle(html.getDocumentTitle());  } catch (  Exception ex) {    ex.printStackTrace();  } finally {    eezeFrame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));  }}  }
class C{  public static byte[][] toBytes(final Byte[][] byteArray){  if (byteArray == null) {    return null;  }  final byte[][] array=new byte[byteArray.length][];  for (int i=0; i < byteArray.length; i++) {    array[i]=new byte[byteArray[i].length];    for (int j=0; j < byteArray[i].length; j++) {      array[i][j]=byteArray[i][j];    }  }  return array;}  }
class C{  public long enqueue(Request request){  ContentValues values=request.toContentValues(mPackageName);  Uri downloadUri=mResolver.insert(Downloads.Impl.CONTENT_URI,values);  long id=Long.parseLong(downloadUri.getLastPathSegment());  return id;}  }
class C{  public PendingInstallShortcutInfo(LauncherActivityInfoCompat info,Context context){  this.data=null;  mContext=context;  activityInfo=info;  user=info.getUser();  launchIntent=AppInfo.makeLaunchIntent(context,info,user);  label=info.getLabel().toString();}  }
class C{  public static byte[] decode(String base64) throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream();  StringReader in=new StringReader(base64);  decode(in,out);  in.close();  out.flush();  out.close();  return out.toByteArray();}  }
class C{  protected void processCloudletReturn(SimEvent ev){  Cloudlet cloudlet=(Cloudlet)ev.getData();  getCloudletReceivedList().add(cloudlet);  Log.printConcatLine(CloudSim.clock(),": ",getName(),": Cloudlet ",cloudlet.getCloudletId()," received");  cloudletsSubmitted--;  if (getCloudletList().size() == 0 && cloudletsSubmitted == 0) {    Log.printConcatLine(CloudSim.clock(),": ",getName(),": All Cloudlets executed. Finishing...");    clearDatacenters();    finishExecution();  } else {    if (getCloudletList().size() > 0 && cloudletsSubmitted == 0) {      clearDatacenters();      createVmsInDatacenter(0);    }  }}  }
class C{  @Override public boolean keyExists(String key){  if (StringUtils.isNull(key))   throw new KVStoreKeyNullException();  Cursor cursor=execQuery(SQL_QUERY_DATA,new String[]{TABLE_NAME,COLUMN_KEY,key});  if (cursor != null) {    try {      if (cursor.moveToNext())       return true;    }  finally {      CursorUtils.closeCursorQuietly(cursor);    }  }  return false;}  }
class C{  public boolean isOneToMany(){  return false;}  }
class C{  private void dumpActivity(String prefix,FileDescriptor fd,PrintWriter pw,final ActivityRecord r,String[] args,boolean dumpAll){  String innerPrefix=prefix + "  ";synchronized (this) {    pw.print(prefix);    pw.print("ACTIVITY ");    pw.print(r.shortComponentName);    pw.print(" ");    pw.print(Integer.toHexString(System.identityHashCode(r)));    pw.print(" pid=");    if (r.app != null)     pw.println(r.app.pid); else     pw.println("(not running)");    if (dumpAll) {      r.dump(pw,innerPrefix);    }  }  if (r.app != null && r.app.thread != null) {    pw.flush();    try {      TransferPipe tp=new TransferPipe();      try {        r.app.thread.dumpActivity(tp.getWriteFd().getFileDescriptor(),r.appToken,innerPrefix,args);        tp.go(fd);      }  finally {        tp.kill();      }    } catch (    IOException e) {      pw.println(innerPrefix + "Failure while dumping the activity: " + e);    }catch (    RemoteException e) {      pw.println(innerPrefix + "Got a RemoteException while dumping the activity");    }  }}  }
class C{  protected void sequence_TEnumLiteral(ISerializationContext context,TEnumLiteral semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getTEnumLiteralAccess().getNameIDENTIFIERTerminalRuleCall_0(),semanticObject.getName());  feeder.finish();}  }
class C{  public void grantVoice(Collection<String> nicknames) throws XMPPException {  changeRole(nicknames,"participant");}  }
class C{  @NotNull @ObjectiveCName("editGroupShortNameWithGid:withAbout:") public Promise<Void> editGroupShortName(int gid,String shortName){  return modules.getGroupsModule().editShortName(gid,shortName);}  }
class C{  public EventDefinition createEventDefinition(){  EventDefinitionImpl eventDefinition=new EventDefinitionImpl();  return eventDefinition;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypeRefsPackage.TYPE_REF___GET_MODIFIERS_AS_STRING:    return getModifiersAsString();case TypeRefsPackage.TYPE_REF___IS_FINAL_BY_TYPE:  return isFinalByType();case TypeRefsPackage.TYPE_REF___IS_DYNAMIC:return isDynamic();case TypeRefsPackage.TYPE_REF___IS_EXISTENTIAL:return isExistential();case TypeRefsPackage.TYPE_REF___IS_GENERIC:return isGeneric();case TypeRefsPackage.TYPE_REF___IS_PARAMETERIZED:return isParameterized();case TypeRefsPackage.TYPE_REF___IS_RAW:return isRaw();case TypeRefsPackage.TYPE_REF___GET_DECLARED_UPPER_BOUND:return getDeclaredUpperBound();case TypeRefsPackage.TYPE_REF___GET_DECLARED_LOWER_BOUND:return getDeclaredLowerBound();case TypeRefsPackage.TYPE_REF___GET_TYPE_ARGS:return getTypeArgs();case TypeRefsPackage.TYPE_REF___UNDEFINED_OR_NULL:return undefinedOrNull();case TypeRefsPackage.TYPE_REF___GET_TYPE_REF_AS_STRING:return getTypeRefAsString();case TypeRefsPackage.TYPE_REF___TO_STRING:return toString();case TypeRefsPackage.TYPE_REF___GET_DECLARED_TYPE:return getDeclaredType();case TypeRefsPackage.TYPE_REF___IS_TOP_TYPE:return isTopType();case TypeRefsPackage.TYPE_REF___IS_BOTTOM_TYPE:return isBottomType();case TypeRefsPackage.TYPE_REF___GET_TYPING_STRATEGY:return getTypingStrategy();case TypeRefsPackage.TYPE_REF___GET_STRUCTURAL_MEMBERS:return getStructuralMembers();case TypeRefsPackage.TYPE_REF___IS_USE_SITE_STRUCTURAL_TYPING:return isUseSiteStructuralTyping();case TypeRefsPackage.TYPE_REF___IS_DEF_SITE_STRUCTURAL_TYPING:return isDefSiteStructuralTyping();}return super.eInvoke(operationID,arguments);}  }
class C{  static public boolean doesFileExist(Context c,String fileName,long fileSize,boolean deleteFileOnMismatch){  File fileForNewFile=new File(Helpers.generateSaveFileName(c,fileName));  if (fileForNewFile.exists()) {    if (fileForNewFile.length() == fileSize) {      return true;    }    if (deleteFileOnMismatch) {      fileForNewFile.delete();    }  }  return false;}  }
class C{  public int rankByCoins(User user){  List<UserStat> rankedByCoins=rankByCoins();  int rank=1;  for (  UserStat stat : rankedByCoins) {    if (stat.user.equals(user)) {      return rank;    }    rank++;  }  throw new DogePoolException("Cannot rank " + user.nickname + " by coins mined",Error.RANK_COIN,HttpStatus.NO_CONTENT);}  }
class C{  public static String unescapeHtml(String str){  if (str == null) {    return null;  }  try {    StringWriter writer=new StringWriter((int)(str.length() * 1.5));    unescapeHtml(writer,str);    return writer.toString();  } catch (  IOException ioe) {    throw new UnhandledException(ioe);  }}  }
class C{  public X509ExtensionSetLoadException(){  super();}  }
class C{  private static void SetStaticFloatField(JNIEnvironment env,int classJREF,int fieldID,float fieldValue){  if (traceJNI)   VM.sysWrite("JNI called: SetStaticFloatField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    field.setFloatValueUnchecked(null,fieldValue);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public static void initialize(){  g=new GraphDB(OSM_DB_PATH);}  }
class C{  @Override public String validate(Player player,RPAction action,ActionData data){  int amount=1;  if (attribute != null) {    String temp=action.get(attribute);    if (temp != null) {      amount=temp.length();    }  }  if (!player.getChatBucket().checkAndAdd(amount)) {    return "";  }  return null;}  }
class C{  public static void assertMatrix4x3fEquals(Matrix4x3fc m1,Matrix4x3fc m2,float delta){  Assert.assertEquals(m1.m00(),m2.m00(),delta);  Assert.assertEquals(m1.m01(),m2.m01(),delta);  Assert.assertEquals(m1.m02(),m2.m02(),delta);  Assert.assertEquals(m1.m10(),m2.m10(),delta);  Assert.assertEquals(m1.m11(),m2.m11(),delta);  Assert.assertEquals(m1.m12(),m2.m12(),delta);  Assert.assertEquals(m1.m20(),m2.m20(),delta);  Assert.assertEquals(m1.m21(),m2.m21(),delta);  Assert.assertEquals(m1.m22(),m2.m22(),delta);  Assert.assertEquals(m1.m30(),m2.m30(),delta);  Assert.assertEquals(m1.m31(),m2.m31(),delta);  Assert.assertEquals(m1.m32(),m2.m32(),delta);}  }
class C{  public void showTabInAllPerspectives(final Dockable dockable,final Dockable parent){  DockableState dstate=context.getDockableState(dockable);  if (dstate != null && !dstate.isClosed()) {    return;  }  DockingDesktop dockingDesktop=context.getDesktopList().get(0);  context.registerDockable(dockable);  WSDockKey parentKey=new WSDockKey(parent.getDockKey().getKey());  WSDockKey key=new WSDockKey(dockable.getDockKey().getKey());  for (  Perspective persp : model.getAllPerspectives()) {    if (persp == model.getSelectedPerspective()) {      continue;    }    boolean containsParent=persp.getWorkspace().getDesktop(0).containsNode(parentKey);    boolean containsChild=persp.getWorkspace().getDesktop(0).containsNode(key);    if (containsParent && !containsChild) {      persp.getWorkspace().getDesktop(0).createTab(parentKey,key,1);    }  }  DockableState[] states=dockingDesktop.getDockables();  for (  DockableState state : states) {    if (state.getDockable() == parent && !state.isClosed()) {      dockingDesktop.createTab(state.getDockable(),dockable,1,true);      break;    }  }}  }
class C{  private void beforeValue() throws JSONException {  if (stack.isEmpty()) {    return;  }  Scope context=peek();  if (context == Scope.EMPTY_ARRAY) {    replaceTop(Scope.NONEMPTY_ARRAY);    newline();  } else   if (context == Scope.NONEMPTY_ARRAY) {    out.append(',');    newline();  } else   if (context == Scope.DANGLING_KEY) {    out.append(indent == null ? ":" : ": ");    replaceTop(Scope.NONEMPTY_OBJECT);  } else   if (context != Scope.NULL) {    throw new JSONException("Nesting problem");  }}  }
class C{  private void showPopupMenu(final MouseEvent event){  final CTracesTableFilterMenu menu=new CTracesTableFilterMenu(getFilterField());  menu.show(event.getComponent(),event.getX(),event.getY());}  }
class C{  public String toString(){  final String TAB=" ";  return "MessageResultImpl ( " + "uid = " + getUid() + TAB+ "flags = "+ getFlags()+ TAB+ "size = "+ getSize()+ TAB+ "internalDate = "+ getInternalDate()+ ")";}  }
class C{  @Override protected void onPreDrawChart(ArrayList<ChartSet> data){  if (data.get(0).size() == 1) {    style.barSpacing=0;    calculateBarsWidth(data.size(),0,this.getInnerChartRight() - this.getInnerChartLeft() - this.getBorderSpacing() * 2);  } else   calculateBarsWidth(data.size(),data.get(0).getEntry(0).getX(),data.get(0).getEntry(1).getX());  calculatePositionOffset(data.size());}  }
class C{  public static String generateFilename(String topologyName,String role,String tag,int version,String extension){  return String.format("%s-%s-%s-%d-%d%s",topologyName,role,tag,version,new Random().nextLong(),extension);}  }
class C{  protected AbstractOption(int id,String name){  super(id,name);}  }
class C{  public T init(Callable<T> c) throws IgniteCheckedException {  if (!finished) {synchronized (mux) {      if (!finished) {        try {          res=c.call();        } catch (        Exception e) {          this.e=e;        } finally {          finished=true;          mux.notifyAll();        }      }    }  }  if (e != null)   throw e instanceof IgniteCheckedException ? (IgniteCheckedException)e : new IgniteCheckedException(e);  return res;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SMLSD");  translateAll(environment,instruction,"SMLSD",instructions);}  }
class C{  public static LeftRegularBipartiteGraphSegment buildRandomLeftRegularBipartiteGraph(int leftSize,int rightSize,int leftDegree,Random random){  LeftRegularBipartiteGraphSegment leftRegularBipartiteGraphSegment=new LeftRegularBipartiteGraphSegment(leftSize / 2,leftDegree,rightSize / 2,leftSize / 2,2.0,Integer.MAX_VALUE,new IdentityEdgeTypeMask(),new NullStatsReceiver());  LongSet addedIds=new LongOpenHashSet(leftDegree);  for (int i=0; i < leftSize; i++) {    addedIds.clear();    for (int j=0; j < leftDegree; j++) {      long idToAdd;      do {        idToAdd=random.nextInt(rightSize);      } while (addedIds.contains(idToAdd));      addedIds.add(idToAdd);      leftRegularBipartiteGraphSegment.addEdge(i,idToAdd,(byte)0);    }  }  return leftRegularBipartiteGraphSegment;}  }
class C{  static Operand equivalentValforPHI(Instruction phi){  if (!Phi.conforms(phi))   return null;  Operand result=Phi.getResult(phi), equiv=result;  int i=0, n=Phi.getNumberOfValues(phi);  while (i < n) {    equiv=Phi.getValue(phi,i++);    if (!equiv.similar(result))     break;  }  while (i < n) {    Operand opi=Phi.getValue(phi,i++);    if (!opi.similar(equiv) && !opi.similar(result))     return null;  }  return equiv;}  }
class C{  public synchronized void taskFinished(){  m_ActiveTasks--;  if (m_ActiveTasks < 0) {    m_ActiveTasks=0;  }  updateMonitor();}  }
class C{  public synchronized ColorSetting createColorSetting(String key,Color defaultValue){  ColorSetting result=ColorSetting.createColorSetting(DEFAULT_PROPS,PROPS,key,defaultValue);  handleSettingInternal(result,null);  return result;}  }
class C{  @Override public int length(){  return set.size();}  }
class C{  private void modifyNetwork(Scenario scenario,int caseNr){  Network network=scenario.getNetwork();  Link link2=network.getLinks().get(LINK_ID2);  NetworkFactory factory=network.getFactory();switch (caseNr) {case 2:    link2.setFreespeed(76);  break;case 3:case 4:Lanes lanes=scenario.getLanes();LanesFactory lfactory=lanes.getFactory();Id<Lane> olId=Id.create("2.1",Lane.class);Id<Lane> secondLaneId=Id.create("2.2",Lane.class);Id<Lane> thirdLaneId=Id.create("2.3",Lane.class);Id<Lane> fourthLaneId=Id.create("2.4",Lane.class);LanesToLinkAssignment l2l=lfactory.createLanesToLinkAssignment(LINK_ID2);Lane lane=lfactory.createLane(olId);lane.setNumberOfRepresentedLanes(1);lane.setStartsAtMeterFromLinkEnd(200.0);lane.addToLaneId(secondLaneId);l2l.addLane(lane);lane=lfactory.createLane(secondLaneId);lane.setNumberOfRepresentedLanes(1);lane.setStartsAtMeterFromLinkEnd(150.0);lane.setAlignment(0);lane.addToLaneId(thirdLaneId);l2l.addLane(lane);lane=lfactory.createLane(thirdLaneId);lane.setNumberOfRepresentedLanes(1);lane.setStartsAtMeterFromLinkEnd(100.0);lane.setAlignment(0);lane.addToLaneId(fourthLaneId);l2l.addLane(lane);lane=lfactory.createLane(fourthLaneId);lane.setNumberOfRepresentedLanes(1);lane.setStartsAtMeterFromLinkEnd(50.0);lane.setAlignment(0);lane.addToLinkId(LINK_ID3);l2l.addLane(lane);lanes.addLanesToLinkAssignment(l2l);if (caseNr == 4) {link2.setFreespeed(76);}if (WRITE_OUTPUT) {LanesWriter writer=new LanesWriter(lanes);writer.write(utils.getOutputDirectory() + "4lanes.xml");}break;case 5:case 6:lanes=scenario.getLanes();lfactory=lanes.getFactory();Id<Lane> ol=Id.create("2.1",Lane.class);Id<Lane> followingLane=Id.create("2.2",Lane.class);l2l=lfactory.createLanesToLinkAssignment(LINK_ID2);lane=lfactory.createLane(ol);lane.setNumberOfRepresentedLanes(1);lane.setStartsAtMeterFromLinkEnd(200.0);lane.addToLaneId(followingLane);l2l.addLane(lane);lane=lfactory.createLane(followingLane);lane.setNumberOfRepresentedLanes(1);lane.setStartsAtMeterFromLinkEnd(150.0);lane.setAlignment(0);lane.addToLinkId(LINK_ID3);l2l.addLane(lane);lanes.addLanesToLinkAssignment(l2l);if (caseNr == 6) {link2.setFreespeed(76);}if (WRITE_OUTPUT) {LanesWriter writer=new LanesWriter(lanes);writer.write(utils.getOutputDirectory() + "topBottomlanes.xml");}break;case 7:case 8:Node inbetweenNode=factory.createNode(Id.createNodeId("2.1"),new Coord((double)0,(double)250));Link inbetweenLink=factory.createLink(Id.createLinkId("Link2.1"),scenario.getNetwork().getNodes().get(Id.createNodeId("2")),inbetweenNode);inbetweenLink.setLength(50);inbetweenLink.setFreespeed(75);link2.setFromNode(inbetweenNode);link2.setLength(150);if (caseNr == 8) {inbetweenLink.setFreespeed(76);link2.setFreespeed(76);}network.addNode(inbetweenNode);network.addLink(inbetweenLink);break;}}  }
class C{  public ViPRCoreClient withLogin(String username,String password){  auth().login(username,password);  return this;}  }
class C{  private String buildSql() throws SQLException {  StringBuilder sb=new StringBuilder();  for (int i=0; i < sqlAndParams.length; i++)   try {    if (sqlAndParams[i] instanceof Date) {      sb.append("'" + dateFormat.format((Date)sqlAndParams[i]) + "' ");    } else {      sb.append(sqlAndParams[i] + " ");    }  } catch (  Exception e) {    throw new SQLException("Unable to create SQL statement, [" + i + "] = "+ sqlAndParams[i]+ " : "+ e.getMessage(),e);  }  return sb.substring(0,sb.length() - 2);}  }
class C{  public static double mouseY(){synchronized (mouseLock) {    return mouseY;  }}  }
class C{  private Node firstOfMode(boolean isData){  for (Node p=head; p != null; p=succ(p)) {    if (!p.isMatched())     return (p.isData == isData) ? p : null;  }  return null;}  }
class C{  private ConcurrentSkipListMap.Node<K,V> hiNode(){  if (hi == null)   return m.findLast(); else   if (hiInclusive)   return m.findNear(hi,LT | EQ); else   return m.findNear(hi,LT);}  }
class C{  public static String match(String path,String input,String expected) throws Exception {  return match(path,input,expected,DEFAULT_DELTA);}  }
class C{  public static void asyncDeleteObsoleteThreads(AsyncQueryHandler handler,int token){  handler.startDelete(token,null,Threads.OBSOLETE_THREADS_URI,null,null);}  }
class C{  public void truncate(long size){  try {    writeCount++;    file.truncate(size);    fileSize=Math.min(fileSize,size);  } catch (  IOException e) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_WRITING_FAILED,"Could not truncate file {0} to size {1}",fileName,size,e);  }}  }
class C{  public X509ExtensionSet(ASN1Sequence extensions){  ASN1Encodable[] asn1Encodables=extensions.toArray();  for (int i=0; i < asn1Encodables.length; i++) {    ASN1Encodable asn1Encodable=asn1Encodables[i];    Extension ext=Extension.getInstance(asn1Encodable);    if (ext != null) {      try {        addExtension(ext.getExtnId().toString(),ext.isCritical(),ext.getExtnValue().getEncoded());      } catch (      IOException e) {      }    }  }}  }
class C{  @Parameterized.Parameters public static Collection<Object[]> data(){  return Arrays.asList(new Object[][]{{"scss",OutputStyle.COMPRESSED,false},{"scss",OutputStyle.NESTED,false},{"sass",OutputStyle.COMPRESSED,true},{"sass",OutputStyle.NESTED,true}});}  }
class C{  public boolean isMarkerSet(){  return super.get().isSet();}  }
class C{  public void addBitmapToCache(String data,BitmapDrawable value){  if (data == null || value == null) {    return;  }  if (mMemoryCache != null) {    if (RecyclingBitmapDrawable.class.isInstance(value)) {      ((RecyclingBitmapDrawable)value).setIsCached(true);    }    mMemoryCache.put(data,value);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  String documentName;  doc=(Document)load("staff",false);  documentName=doc.getNodeName();  assertEquals("documentNodeName","#document",documentName);}  }
class C{  @Override public void buildAclEntries(PrincipalImpl owner,AclImpl acl){}  }
class C{  public NodeReqResponse(String hostName){  super();  this.setHostName(hostName);}  }
class C{  public static int[] selectVideoFormatsForDefaultDisplay(Context context,List<? extends FormatWrapper> formatWrappers,String[] allowedContainerMimeTypes,boolean filterHdFormats) throws DecoderQueryException {  WindowManager windowManager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=windowManager.getDefaultDisplay();  Point displaySize=getDisplaySize(display);  return selectVideoFormats(formatWrappers,allowedContainerMimeTypes,filterHdFormats,true,displaySize.x,displaySize.y);}  }
class C{  public NibbleArray snapshot(){  return new NibbleArray(this.data.clone());}  }
class C{  private static boolean contains(String value,int start,int length,String criteria1,String criteria2,String criteria3,String criteria4,String criteria5,String criteria6){  return contains(value,start,length,new String[]{criteria1,criteria2,criteria3,criteria4,criteria5,criteria6});}  }
class C{  public ClasspathSuite(Class<?> suiteClass,RunnerBuilder builder) throws InitializationError {  this(suiteClass,builder,new ClasspathFinderFactory());}  }
class C{  @Deactivate protected void deactivate(ComponentContext ctx){  if (session != null && session.isLive()) {    session.logout();    session=null;  }}  }
class C{  public HashSet(int initialCapacity){  map=new HashMap<>(initialCapacity);}  }
class C{  private void handleHtmlChangePassword(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String title=servletText.pageTitleChangePassword();  if (addTitle(requestAndResponse,title)) {    return;  }  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,title,false).setPaneId("account");  pageWrapper.addHeader();  if (isUserALocalAdminOrNotClosed(requestAndResponse)) {    try {      final String userId=getURIParameterOrUserId(requestAndResponse);      final User currentUser=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));      final User editedUser=dbLogic.getUserById(userId);      if (editedUser == null) {        requestAndResponse.print(servletText.errorNoAccountFound());      } else {        final boolean currentIsEditedUser=isCurrentUserTheEditedUser(currentUser,editedUser);        final boolean isUserAdmin=isUserAnAdmin(requestAndResponse);        if (!isUserAdmin && !currentIsEditedUser) {          requestAndResponse.print(servletText.errorPageNotAllowed());        } else {          boolean needsCurrentPassword=isCurrentPasswordNeeded(editedUser,currentIsEditedUser,isUserAdmin);          boolean showForm=true;          final String submitted=requestAndResponse.request.getParameter("save");          if (submitted != null) {            boolean needsChange=false;            if (isTheCsrftWrong(requestAndResponse,requestAndResponse.request.getParameter("csrft"))) {              requestAndResponse.print(servletText.errorRequiresSignIn(false));              showForm=false;            }            final String newPassword=requestAndResponse.request.getParameter("newpassword");            final String newPassword2=requestAndResponse.request.getParameter("newpassword2");            boolean hasErrors=validateNewPassword(requestAndResponse,editedUser,currentIsEditedUser,newPassword,newPassword2);            if (!hasErrors && editedUser.getPasswordOrBlank().equals(DigestUtils.sha1Hex(newPassword))) {              addErrorMessage(requestAndResponse,servletText.errorNewPasswordIsTheSameAsTheCurrent());              hasErrors=true;            }            String changedPassword=null;            if (!hasErrors) {              changedPassword=newPassword;              needsChange=true;            }            if (needsCurrentPassword) {              final String realPassword=editedUser.getPassword();              final String currentPassword=requestAndResponse.request.getParameter("currentpassword");              if (!AccountAttributeValidator.isPasswordValid(currentPassword)) {                addErrorMessage(requestAndResponse,servletText.errorCurrentPasswordIsNotValid());                hasErrors=true;              } else               if (realPassword == null || !realPassword.equals(DigestUtils.sha1Hex(currentPassword))) {                addErrorMessage(requestAndResponse,servletText.errorCurrentPasswordIsIncorrect());                hasErrors=true;              }            }            if (needsChange && !hasErrors) {              final Long time=new Long(System.currentTimeMillis());              editedUser.setModTime(time);              if (changedPassword != null) {                editedUser.setPassword(DigestUtils.sha1Hex(changedPassword));              }              addSuccessMessage(requestAndResponse,servletText.sentenceChangesWereSaved());              showForm=false;            } else             if (hasErrors) {              addErrorMessage(requestAndResponse,servletText.errorChangesWereNotSaved());            } else {              addErrorMessage(requestAndResponse,servletText.errorNoChangesToSave());              showForm=false;            }          }          if (showForm) {            needsCurrentPassword=isCurrentPasswordNeeded(editedUser,currentIsEditedUser,isUserAdmin);            requestAndResponse.print("<form action=\"/changePassword/" + (currentIsEditedUser ? "" : userId) + "\" method=\"POST\"><div class=\"account\">"+ "<input type=\"hidden\" name=\"csrft\" value=\""+ getCsrft(requestAndResponse)+ "\">");            if (needsCurrentPassword) {              requestAndResponse.print("<div class=\"infoheader\">" + servletText.sentenceEnterYourCurrentPasswordHere() + "</div>");              requestAndResponse.print("<input type=\"password\" id=\"currentpassword\" name=\"currentpassword\" placeholder=\"" + servletText.sentenceCurrentPassword(currentIsEditedUser) + "\" maxlength=\"20\"><br>");            }            addNewPasswordFormFields(requestAndResponse,editedUser,currentIsEditedUser);            requestAndResponse.print("<table class=\"responseAndSave\"><tr>" + "<td><div id=\"response\"></div></td>" + "<td><button onclick=\"replacePaneForForm(event, '" + servletText.buttonChangePassword() + "'); return false;\" id=\"save\" name=\"save\" class=\"specialbutton\" style=\"float:right; margin-top:10px;\">"+ servletText.buttonChangePassword()+ "</button></td>"+ "</tr></table></div>"+ "</form>");          }        }      }      dbLogic.commit();    } catch (    final PersistenceException e) {      requestAndResponse.print(servletText.errorInternalDatabase());    }  }  pageWrapper.addFooter();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.GETTER_DECLARATION__DECLARED_TYPE_REF:    setDeclaredTypeRef((TypeRef)null);  return;case N4JSPackage.GETTER_DECLARATION__BOGUS_TYPE_REF:setBogusTypeRef((TypeRef)null);return;case N4JSPackage.GETTER_DECLARATION__DEFINED_GETTER:setDefinedGetter((TGetter)null);return;}super.eUnset(featureID);}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public void dumpRegistrations(){synchronized (this) {    Registration start=mReg;    System.out.println("Broadcaster " + this + " {");    if (start != null) {      Registration r=start;      do {        System.out.println("    senderWhat=" + r.senderWhat);        int n=r.targets.length;        for (int i=0; i < n; i++) {          System.out.println("        [" + r.targetWhats[i] + "] "+ r.targets[i]);        }        r=r.next;      } while (r != start);    }    System.out.println("}");  }}  }
class C{  @FlashException public static void removeStoragePorts(String virtualArrayId,@As(",") String[] ids){  if ((ids != null) && (ids.length > 0)) {    VirtualArrayRestRep virtualArray=getVirtualArray(virtualArrayId);    updateStoragePorts(uris(ids),removeVirtualArray(virtualArray));  }  storagePorts(virtualArrayId);}  }
class C{  public boolean isRuntime(){  return runtime;}  }
class C{  public UpdateRequest upsert(String source){  safeUpsertRequest().source(source);  return this;}  }
class C{  private static String replaceEnvVariables(String value){  Matcher matcher=envPattern.matcher(value);  if (matcher.find()) {    String envVar=matcher.group(1);    return value.substring(0,matcher.start(1) - 2) + System.getenv(envVar) + value.substring(matcher.end(1) + 1);  } else {    return value;  }}  }
class C{  @Override public double evaluateSubset(BitSet subset) throws Exception {  double evalMetric=0;  double[] repError=new double[5];  int numAttributes=0;  int i, j;  Random Rnd=new Random(m_seed);  Remove delTransform=new Remove();  delTransform.setInvertSelection(true);  Instances trainCopy=new Instances(m_trainInstances);  for (i=0; i < m_numAttribs; i++) {    if (subset.get(i)) {      numAttributes++;    }  }  int[] featArray=new int[numAttributes + 1];  for (i=0, j=0; i < m_numAttribs; i++) {    if (subset.get(i)) {      featArray[j++]=i;    }  }  featArray[j]=m_classIndex;  delTransform.setAttributeIndicesArray(featArray);  delTransform.setInputFormat(trainCopy);  trainCopy=Filter.useFilter(trainCopy,delTransform);  for (i=0; i < 5; i++) {    m_Evaluation=new Evaluation(trainCopy);    m_Evaluation.crossValidateModel(m_BaseClassifier,trainCopy,m_folds,Rnd);switch (m_evaluationMeasure) {case EVAL_DEFAULT:      repError[i]=m_Evaluation.errorRate();    break;case EVAL_ACCURACY:  repError[i]=m_Evaluation.errorRate();break;case EVAL_RMSE:repError[i]=m_Evaluation.rootMeanSquaredError();break;case EVAL_MAE:repError[i]=m_Evaluation.meanAbsoluteError();break;case EVAL_FMEASURE:if (m_IRClassVal < 0) {repError[i]=m_Evaluation.weightedFMeasure();} else {repError[i]=m_Evaluation.fMeasure(m_IRClassVal);}break;case EVAL_AUC:if (m_IRClassVal < 0) {repError[i]=m_Evaluation.weightedAreaUnderROC();} else {repError[i]=m_Evaluation.areaUnderROC(m_IRClassVal);}break;case EVAL_AUPRC:if (m_IRClassVal < 0) {repError[i]=m_Evaluation.weightedAreaUnderPRC();} else {repError[i]=m_Evaluation.areaUnderPRC(m_IRClassVal);}break;}if (!repeat(repError,i + 1)) {i++;break;}}for (j=0; j < i; j++) {evalMetric+=repError[j];}evalMetric/=i;m_Evaluation=null;switch (m_evaluationMeasure) {case EVAL_DEFAULT:case EVAL_ACCURACY:case EVAL_RMSE:case EVAL_MAE:if (m_trainInstances.classAttribute().isNominal() && (m_evaluationMeasure == EVAL_DEFAULT || m_evaluationMeasure == EVAL_ACCURACY)) {evalMetric=1 - evalMetric;} else {evalMetric=-evalMetric;}break;}return evalMetric;}  }
class C{  private void checkParameters() throws SSLException {  assert keyStoreType != null;  assert proto != null;  checkNullParameter(keyStoreFilePath,"keyStoreFilePath");  checkNullParameter(keyStorePwd,"keyStorePwd");  if (trustMgrs == null) {    if (trustStoreFilePath == null)     throw new SSLException("Failed to initialize SSL context (either trustStoreFilePath or " + "trustManagers must be provided)"); else     checkNullParameter(trustStorePwd,"trustStorePwd");  }}  }
class C{  public static PathPoint moveTo(float x,float y){  return new PathPoint(MOVE,x,y);}  }
class C{  public void testBug17587() throws Exception {  createTable("testBug17857","(field1 int)");  PreparedStatement pStmt=null;  try {    pStmt=this.conn.prepareStatement("INSERT INTO testBug17857 VALUES (?)");    pStmt.close();    try {      pStmt.clearParameters();    } catch (    SQLException sqlEx) {      assertEquals(SQLError.SQL_STATE_ILLEGAL_ARGUMENT,sqlEx.getSQLState());    }    pStmt=((com.mysql.jdbc.Connection)this.conn).clientPrepareStatement("INSERT INTO testBug17857 VALUES (?)");    pStmt.close();    try {      pStmt.clearParameters();    } catch (    SQLException sqlEx) {      assertEquals(SQLError.SQL_STATE_ILLEGAL_ARGUMENT,sqlEx.getSQLState());    }  }  finally {    if (pStmt != null) {      pStmt.close();    }  }}  }
class C{  @SuppressWarnings({"unchecked"}) public static <T>IgniteClosure<T,T> identity(){  return IDENTITY;}  }
class C{  public void addShutdownHook(Runnable hook){  Runtime.getRuntime().addShutdownHook(new Thread(hook));}  }
class C{  public static boolean isFullCopyRestorable(Volume volume,DbClient dbClient){  boolean result=false;  String replicaState=volume.getReplicaState();  if (isVolumeFullCopy(volume,dbClient) && replicaState != null && !replicaState.isEmpty()) {    ReplicationState state=ReplicationState.getEnumValue(replicaState);    if (state != null && state == ReplicationState.SYNCHRONIZED) {      result=true;    }  }  return result;}  }
class C{  public void resume(){  if (isPausing) {    mAudioManager.abandonAudioFocus(mAfChangeListener);    if (mIsMuteStream && mCurrentVolume > 0) {      mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC,mCurrentVolume,0);    }    isPausing=false;  }}  }
class C{  @Override protected void initVars(Instances data){  super.initVars(data);  m_kernelEvals=0;  m_strAttr=-1;  for (int i=0; i < data.numAttributes(); i++) {    if (i == data.classIndex()) {      continue;    }    if (data.attribute(i).type() == Attribute.STRING) {      m_strAttr=i;      break;    }  }  m_numInsts=m_data.numInstances();  m_storage=new double[m_cacheSize];  m_keys=new long[m_cacheSize];  m_powersOflambda=calculatePowersOfLambda();}  }
class C{  public void testVocabulary() throws IOException {  assertVocabulary(analyzer,getDataPath("gltestdata.zip"),"gl.txt");}  }
class C{  public void beforeMergeJoinOfDoubleIndexResults(Index index1,Index index2,Collection initialResult){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodenotationnodename.class,args);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:10.034 -0500",hash_original_method="755A094F5792355E420BC146FA28DD03",hash_generated_method="21D7F203C1D8E51B70F1C8A82D0623DF") public static void rotateM(float[] rm,int rmOffset,float[] m,int mOffset,float a,float x,float y,float z){synchronized (sTemp) {    setRotateM(sTemp,0,a,x,y,z);    multiplyMM(rm,rmOffset,m,mOffset,sTemp,0);  }}  }
class C{  public double distanceSq(final java.awt.geom.Point2D p){  final double dx=(double)this.x - p.getX();  final double dy=(double)this.y - p.getY();  return (dx * dx + dy * dy);}  }
class C{  public ServerHello(SecureRandom sr,byte[] server_version,byte[] session_id,CipherSuite cipher_suite,byte compression_method){  long gmt_unix_time=new java.util.Date().getTime() / 1000;  sr.nextBytes(random);  random[0]=(byte)((gmt_unix_time & 0xFF000000) >>> 24);  random[1]=(byte)((gmt_unix_time & 0xFF0000) >>> 16);  random[2]=(byte)((gmt_unix_time & 0xFF00) >>> 8);  random[3]=(byte)(gmt_unix_time & 0xFF);  this.session_id=session_id;  this.cipher_suite=cipher_suite;  this.compression_method=compression_method;  this.server_version=server_version;  length=38 + session_id.length;}  }
class C{  public static ReminderEntry valueOf(int minutes){  return valueOf(minutes,Reminders.METHOD_DEFAULT);}  }
class C{  protected final int transitiveAnyBoundaryFusion(int mode){  QueueSubscription<R> qs=this.qs;  if (qs != null) {    if ((mode & Fuseable.THREAD_BARRIER) == 0) {      int m=qs.requestFusion(mode);      if (m != Fuseable.NONE) {        fusionMode=m;      }      return m;    }  }  return Fuseable.NONE;}  }
class C{  public boolean isObjectModelSupported(String objectModel){  if (objectModel == null) {    String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_OBJECT_MODEL_NULL,new Object[]{this.getClass().getName()});    throw new NullPointerException(fmsg);  }  if (objectModel.length() == 0) {    String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_OBJECT_MODEL_EMPTY,new Object[]{this.getClass().getName()});    throw new IllegalArgumentException(fmsg);  }  if (objectModel.equals(XPathFactory.DEFAULT_OBJECT_MODEL_URI)) {    return true;  }  return false;}  }
class C{  private static void cleanUpWorkingDirectory(boolean deleteWorkingDirectoryOnCompletion,String temporaryFileDirectory){  if (deleteWorkingDirectoryOnCompletion) {    try {      if (new File(temporaryFileDirectory).exists()) {        LOGGER.debug("Cleaning up temporaryDirectoryName : " + temporaryFileDirectory);        deleteWorkingTemporaryDirectory(temporaryFileDirectory);      }    } catch (    IOException e) {      LOGGER.warn("At run completion, unable to delete temporary working directory " + temporaryFileDirectory);      e.printStackTrace();    }  } else {    LOGGER.warn("deleteWorkingDirectoryOnCompletion : " + deleteWorkingDirectoryOnCompletion);  }}  }
class C{  protected ShoppingCart toObject(String tuple) throws CartDetuplizationException {  if (tuple == null || tuple.length() == 0) {    return null;  }  final ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(tuple.getBytes());  final Base64InputStream base64DecoderStream=new Base64InputStream(byteArrayInputStream);  final CipherInputStream cipherInputStream=new CipherInputStream(base64DecoderStream,desUnCipher);  ObjectInputStream objectInputStream=null;  try {    objectInputStream=new ObjectInputStream(cipherInputStream);    return (ShoppingCart)objectInputStream.readObject();  } catch (  Exception exception) {    try {      desUnCipher.init(Cipher.DECRYPT_MODE,secretKey);    } catch (    InvalidKeyException e) {      ShopCodeContext.getLog(this).error("Cant reinit desUnCipher",exception);    }    final String errMsg="Unable to convert bytes assembled from tuple into object";    ShopCodeContext.getLog(this).error(errMsg,exception);    throw new CartDetuplizationException(errMsg,exception);  } finally {    try {      if (objectInputStream != null) {        objectInputStream.close();      }      cipherInputStream.close();      base64DecoderStream.close();      byteArrayInputStream.close();    } catch (    IOException ioe) {      ShopCodeContext.getLog(this).error("Unable to close object stream",ioe);    }  }}  }
class C{  static private double avg(final long x,final long y){  if (y == 0)   return 0d;  return x / (double)y;}  }
class C{  public static Bitmap rotate(Bitmap b,int degrees){  return rotateAndMirror(b,degrees,false);}  }
class C{  public void visit(ASTNode[] nodes,SourceUnit source){  if (!(nodes[0] instanceof AnnotationNode) || !(nodes[1] instanceof AnnotatedNode)) {    throw new RuntimeException("Internal error: wrong types: $node.class / $parent.class");  }  AnnotationNode node=(AnnotationNode)nodes[0];  if (nodes[1] instanceof ClassNode) {    addListenerToClass(source,(ClassNode)nodes[1]);  } else {    if ((((FieldNode)nodes[1]).getModifiers() & Opcodes.ACC_FINAL) != 0) {      source.getErrorCollector().addErrorAndContinue(new SyntaxErrorMessage(new SyntaxException("@groovy.beans.Vetoable cannot annotate a final property.",node.getLineNumber(),node.getColumnNumber(),node.getLastLineNumber(),node.getLastColumnNumber()),source));    }    addListenerToProperty(source,node,(AnnotatedNode)nodes[1]);  }}  }
class C{  public void test_CREATE_TX_UNISOLATED_02() throws Exception {  assertNotNull(m_mgr);  assertNotNull(m_mgr.getTransactionManager());  final IRemoteTx tx=m_mgr.getTransactionManager().createTx(RemoteTransactionManager.UNISOLATED);  try {  }  finally {    tx.commit();  }  assertFalse(tx.isActive());}  }
class C{  public VostroDataset(){  this.data=new ArrayList<IndicatorSeries>();}  }
class C{  private String evaluate(String expression,Map<String,Object> variables,String variableName){  String result=expression;  if (variables != null) {    result=velocityHelper.evaluate(expression,variables,variableName);  }  return result;}  }
class C{  @VisibleForTesting boolean uploadWaypoints(){  Cursor cursor=null;  try {    cursor=myTracksProviderUtils.getWaypointCursor(trackId,-1L,Constants.MAX_LOADED_WAYPOINTS_POINTS);    if (cursor != null && cursor.moveToFirst()) {      while (cursor.moveToNext()) {        if (isCancelled()) {          return false;        }        Waypoint waypoint=myTracksProviderUtils.createWaypoint(cursor);        try {          if (!SendMapsUtils.uploadWaypoint(mapId,waypoint,mapsClient,authToken,mapsGDataConverter)) {            Log.d(TAG,"Unable to upload waypoint");            return false;          }        } catch (        ParseException e) {          Log.d(TAG,"Unable to upload waypoint",e);          return false;        }catch (        HttpException e) {          Log.d(TAG,"Unable to upload waypoint",e);          return false;        }catch (        IOException e) {          Log.d(TAG,"Unable to upload waypoint",e);          return false;        }      }    }    return true;  }  finally {    if (cursor != null) {      cursor.close();    }  }}  }
class C{  @Override public void imageComplete(int status){  if (status == IMAGEERROR || status == IMAGEABORTED) {    consumer.imageComplete(status);    return;  }  rotate();  consumer.setPixels(0,0,width,height,ColorModel.getRGBdefault(),raster,0,width);  consumer.imageComplete(status);}  }
class C{  public static void main(String[] args){  String media="all aural braille embossed handheld print projection screen tty tv";  int code=CSSMediaPanel.showDialog(null,"Test",media);  System.out.println(code);  System.exit(0);}  }
class C{  @UiThreadTest public void testOnFocusChangeCallbackOrderWhenClearingFocusOfFirstFocusable() throws Exception {  Button clearingFocusButton=mTopLeftButton;  Button gainingFocusButton=mTopLeftButton;  View focusCandidate=clearingFocusButton.getRootView().getParent().focusSearch(null,View.FOCUS_FORWARD);  assertSame("The clearing focus button is the first focusable.",clearingFocusButton,focusCandidate);  assertSame("The gaining focus button is the first focusable.",gainingFocusButton,focusCandidate);  clearingFocusButton.requestFocus();  assertTrue(clearingFocusButton.hasFocus());  CombinedListeners mock=mock(CombinedListeners.class);  clearingFocusButton.setOnFocusChangeListener(mock);  gainingFocusButton.setOnFocusChangeListener(mock);  clearingFocusButton.getViewTreeObserver().addOnGlobalFocusChangeListener(mock);  clearingFocusButton.clearFocus();  InOrder inOrder=inOrder(mock);  inOrder.verify(mock).onFocusChange(clearingFocusButton,false);  inOrder.verify(mock).onGlobalFocusChanged(clearingFocusButton,gainingFocusButton);  inOrder.verify(mock).onFocusChange(gainingFocusButton,true);}  }
class C{  public static int computeMessageSizeNoTag(final MessageLite value){  final int size=value.getSerializedSize();  return computeRawVarint32Size(size) + size;}  }
class C{  protected void installDefaults(){  LookAndFeel.installColorsAndFont(comboBox,"ComboBox.background","ComboBox.foreground","ComboBox.font");  LookAndFeel.installBorder(comboBox,"ComboBox.border");  LookAndFeel.installProperty(comboBox,"opaque",Boolean.TRUE);  Long l=(Long)UIManager.get("ComboBox.timeFactor");  timeFactor=l == null ? 1000L : l.longValue();  Boolean b=(Boolean)UIManager.get("ComboBox.squareButton");  squareButton=b == null ? true : b;  padding=UIManager.getInsets("ComboBox.padding");}  }
class C{  public Searcher() throws IOException {  searcher=new IndexSearcher(DirectoryReader.open(FSDirectory.open(Paths.get(INDEX_DIR))));  parser=new QueryParser(CONTENT_FIELD,new StandardAnalyzer());}  }
class C{  private IV bestEffortLabel(){  if (!rdfsLabelIv().equals(resolvedLabelType)) {    return null;  }  BigdataValue value=lexiconRelation.getTerm(resolvedSubject);  String bestEffortLabel=value.stringValue();  if (bestEffortLabel.startsWith(uris().entity())) {    bestEffortLabel=bestEffortLabel.substring(uris().entity().length());  }  return mock(new LiteralImpl(bestEffortLabel));}  }
class C{  public SSLSocketFactory(javax.net.ssl.SSLSocketFactory socketfactory){  super();  this.sslcontext=null;  this.socketfactory=socketfactory;  this.nameResolver=null;}  }
class C{  @Override public void close(){  InputStream is=_is;  _is=null;  IoUtil.close(is);}  }
class C{  public void deleteStorageView(URI vplexURI,URI exportMaskURI,String stepId) throws WorkflowException {  try {    StorageSystem vplex=getDataObject(StorageSystem.class,vplexURI,_dbClient);    Boolean[] viewFound=new Boolean[]{new Boolean(false)};    ExportMask exportMask=_dbClient.queryObject(ExportMask.class,exportMaskURI);    WorkflowStepCompleter.stepExecuting(stepId);    VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplex,_dbClient);    if (exportMask != null) {      String vplexClusterName=VPlexUtil.getVplexClusterName(exportMask,vplexURI,client,_dbClient);      VPlexStorageViewInfo storageView=client.getStorageView(vplexClusterName,exportMask.getMaskName());      if (storageView != null) {        _log.info("Refreshing ExportMask {}",exportMask.getMaskName());        VPlexControllerUtils.refreshExportMask(_dbClient,storageView,exportMask,VPlexControllerUtils.getTargetPortToPwwnMap(client,vplexClusterName),_networkDeviceController);      }      if (exportMask.hasAnyExistingVolumes() || exportMask.hasAnyExistingInitiators()) {        _log.warn("ExportMask {} still has non-ViPR-created existing volumes or initiators, " + "so ViPR will not remove it from the VPLEX device",exportMask.getMaskName());      }      if (exportMask.getInactive()) {        _log.warn("ExportMask {} is already inactive, so there's " + "no need to delete it off the VPLEX",exportMask.getMaskName());      } else {        List<URI> volumeURIs=StringSetUtil.stringSetToUriList(exportMask.getUserAddedVolumes().values());        List<Initiator> initiators=new ArrayList<>();        if (exportMask.getUserAddedInitiators() != null && !exportMask.getUserAddedInitiators().isEmpty()) {          List<URI> initiatorURIs=StringSetUtil.stringSetToUriList(exportMask.getUserAddedInitiators().values());          initiators.addAll(_dbClient.queryObject(Initiator.class,initiatorURIs));        }        ExportMaskValidationContext ctx=new ExportMaskValidationContext();        ctx.setStorage(vplex);        ctx.setExportMask(exportMask);        ctx.setBlockObjects(volumeURIs,_dbClient);        ctx.setInitiators(initiators);        ctx.setAllowExceptions(!WorkflowService.getInstance().isStepInRollbackState(stepId));        validator.exportMaskDelete(ctx).validate();        _log.info("removing this export mask from VPLEX: " + exportMask.getMaskName());        client.deleteStorageView(exportMask.getMaskName(),vplexClusterName,viewFound);        if (viewFound[0]) {          _log.info("as expected, storage view was found for deletion on the VPLEX.");        } else {          _log.info("storage view was not found on the VPLEX during deletion, " + "but no errors were encountered.");        }      }      _log.info("Marking export mask for deletion from Vipr: " + exportMask.getMaskName());      _dbClient.markForDeletion(exportMask);      _log.info("updating ExportGroups containing this ExportMask");      List<ExportGroup> exportGroups=ExportMaskUtils.getExportGroups(_dbClient,exportMask);      for (      ExportGroup exportGroup : exportGroups) {        _log.info("Removing mask from ExportGroup " + exportGroup.getGeneratedName());        exportGroup.removeExportMask(exportMaskURI);        _dbClient.updateObject(exportGroup);      }    } else {      _log.info("ExportMask to delete could not be found in database: " + exportMaskURI);    }    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  VPlexApiException vae) {    _log.error("Exception deleting ExportMask: " + exportMaskURI,vae);    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  DeviceControllerException ex) {    _log.error("Exception deleting ExportMask: " + exportMaskURI,ex);    WorkflowStepCompleter.stepFailed(stepId,ex);  }catch (  Exception ex) {    _log.error("Exception deleting ExportMask: " + exportMaskURI,ex);    ServiceError svcError=VPlexApiException.errors.deleteStorageViewFailed(ex);    WorkflowStepCompleter.stepFailed(stepId,svcError);  }}  }
class C{  public void addCylinder(float x,float y,float z,float radius,float length,int segments,float baseScale,float topScale,int baseDirection){  addCylinder(x,y,z,radius,length,segments,baseScale,topScale,baseDirection,(int)Math.floor(radius * 2F),(int)Math.floor(radius * 2F),(int)Math.floor(length));}  }
class C{  protected void testMigrationBase(int paramTestYear,int paramTestMonth,int paramTestDay,BigDecimal price) throws Exception {  final long billingTime=getBillingTime(paramTestYear,paramTestMonth,paramTestDay);  creSub(P_1_ID,getDate(paramTestYear,paramTestMonth,-2,20,0));  Date tmpDateOld=getDate(paramTestYear,paramTestMonth,10,0,0,0);  updSub(P_2_ID,tmpDateOld);  createEvents(testYear,paramTestMonth);  updSub(P_1_ID,getDate(paramTestYear,paramTestMonth,20,0,0));  startBillingRun(billingTime);  Date periods[][]=new Date[][]{{getStartDate(paramTestYear,paramTestMonth),getDate(paramTestYear,paramTestMonth,10,0,0)},{getDate(paramTestYear,paramTestMonth,10,0,0),getDate(paramTestYear,paramTestMonth,20,0,0)},{getDate(paramTestYear,paramTestMonth,20,0,0),getEndDate(paramTestYear,paramTestMonth)}};  verify(periods,price,paramTestMonth);}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length > 0) {    System.out.println("\nXML:\n\n" + new XMLOptions(args[0]).toString());    System.out.println("\nCommandline:\n\n" + new XMLOptions(args[0]).toCommandLine());    System.out.println("\nString array:\n");    String[] options=new XMLOptions(args[0]).toArray();    for (    String option : options) {      System.out.println(option);    }  }}  }
class C{  public boolean isEmpty(){  return columns == 0 || rows == 0;}  }
class C{  private String escapeHtml(String html){  if (html == null) {    return null;  }  return html.replaceAll("&","&amp;").replaceAll("<","&lt;").replaceAll(">","&gt;");}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter number n: ");  int n=input.nextInt();  char[][] square=new char[n][n];  System.out.println("Enter 4 rows of letters separated by spaces:");  initializeSquare(square);  System.out.println("The array is" + (isLatinSquare(square) ? " " : " not ") + "a Latin square");}  }
class C{  public static DataNetwork initNetwork(){  Random random=new Random(System.currentTimeMillis());  int id=random.nextInt();  while (usedIds.contains(id)) {    id=random.nextInt();  }  ;  DataNetwork net=new DataNetwork();  usedIds.add(id);  net.networkID=id;  return net;}  }
class C{  public static Image brighten(Image img){  return manipulate(img,true,20);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_STRICTNESS_1__STRICTNESS_LEVEL_1:    return STRICTNESS_LEVEL_1_EDEFAULT == null ? strictnessLevel_1 != null : !STRICTNESS_LEVEL_1_EDEFAULT.equals(strictnessLevel_1);case UmplePackage.ANONYMOUS_STRICTNESS_1__MESSAGE_1:  return MESSAGE_1_EDEFAULT == null ? message_1 != null : !MESSAGE_1_EDEFAULT.equals(message_1);case UmplePackage.ANONYMOUS_STRICTNESS_1__MESSAGE_NUMBER_1:return MESSAGE_NUMBER_1_EDEFAULT == null ? messageNumber_1 != null : !MESSAGE_NUMBER_1_EDEFAULT.equals(messageNumber_1);}return super.eIsSet(featureID);}  }
class C{  @Override public String toString(){  return title;}  }
class C{  public big addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public static String implode(final String[] array,final String delim){  return implode(array,delim,false);}  }
class C{  public Builder allDay(boolean isAllDay){  event.isAllDay=isAllDay;  return this;}  }
class C{  public void updateClob(int columnIndex,Reader reader) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  public String sign(String buf){  return sign(buf,SignatureKeyType.INTERNAL_API);}  }
class C{  public void update(Graphics g,JComponent c){  if (c.isOpaque())   CompiereUtils.fillRectange((Graphics2D)g,c,CompiereLookAndFeel.ROUND);  paint(g,c);}  }
class C{  private static final int tableSizeFor(int c){  int n=c - 1;  n|=n >>> 1;  n|=n >>> 2;  n|=n >>> 4;  n|=n >>> 8;  n|=n >>> 16;  return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;}  }
class C{  private void measureTimeFunctions(int increment,int max){  long startTime=System.currentTimeMillis();  long startNanos=System.nanoTime();  long elapsedTimeActual=0;  long elapsedTimeMeasured=0;  long elapsedNanosMeasured=0;  System.out.printf("sleep   currentTimeMillis   nanoTime\n");  while (elapsedTimeActual < max) {    try {      Thread.sleep(increment);    } catch (    Exception e) {    }    long currentTime=System.currentTimeMillis();    long currentNanos=System.nanoTime();    elapsedTimeActual+=increment;    elapsedTimeMeasured=currentTime - startTime;    elapsedNanosMeasured=(currentNanos - startNanos) / 1000000;    System.out.printf(" %3d           %4d          %4d\n",elapsedTimeActual,elapsedTimeMeasured,elapsedNanosMeasured);  }}  }
class C{  private void createTombstoneTask(DeleteVirtualNetworkWorkflowDocument state){  TombstoneService.State tombstoneStartState=new TombstoneService.State();  tombstoneStartState.entityId=state.virtualNetworkId;  tombstoneStartState.entityKind=VirtualSubnet.KIND;  tombstoneStartState.tombstoneTime=System.currentTimeMillis();  ServiceHostUtils.getCloudStoreHelper(getHost()).createPost(TombstoneServiceFactory.SELF_LINK).setBody(tombstoneStartState).setCompletion(null).sendWith(this);}  }
class C{  public void manageSyntheticAccessIfNecessary(BlockScope currentScope,FieldBinding fieldBinding,int index,FlowInfo flowInfo){  if ((flowInfo.tagBits & FlowInfo.UNREACHABLE_OR_DEAD) != 0)   return;  if (fieldBinding.constant() != Constant.NotAConstant)   return;  if (fieldBinding.isPrivate()) {    FieldBinding codegenField=getCodegenBinding(index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index);    ReferenceBinding declaringClass=codegenField.declaringClass;    if (declaringClass != currentScope.enclosingSourceType()) {      setSyntheticAccessor(fieldBinding,index,((SourceTypeBinding)declaringClass).addSyntheticMethod(codegenField,index >= 0,false));      currentScope.problemReporter().needToEmulateFieldAccess(codegenField,this,index >= 0);      return;    }  } else   if (fieldBinding.isProtected()) {    int depth=(index == 0 || (index < 0 && this.otherDepths == null)) ? (this.bits & ASTNode.DepthMASK) >> ASTNode.DepthSHIFT : this.otherDepths[index < 0 ? this.otherDepths.length - 1 : index - 1];    if (depth > 0 && (fieldBinding.declaringClass.getPackage() != currentScope.enclosingSourceType().getPackage())) {      FieldBinding codegenField=getCodegenBinding(index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index);      setSyntheticAccessor(fieldBinding,index,((SourceTypeBinding)currentScope.enclosingSourceType().enclosingTypeAt(depth)).addSyntheticMethod(codegenField,index >= 0,false));      currentScope.problemReporter().needToEmulateFieldAccess(codegenField,this,index >= 0);      return;    }  }}  }
class C{  private void addSelectionToPlotList(){  if (selectedGraphic != null) {    selectedGraphic.setLinePaint(Color.blue);    if (selectedGraphics == null) {      selectedGraphics=new Vector<GLOBESite>();    }    Object app_obj=selectedGraphic.getAttribute(OMGraphic.APP_OBJECT);    if (app_obj instanceof GLOBESite) {      GLOBESite site=(GLOBESite)app_obj;      if (!selectedGraphics.contains(app_obj)) {        Debug.message("basic","Adding to plot list...");        selectedGraphics.addElement(site);        selectedGraphic.setFillPaint(Color.yellow);      } else {        Debug.message("basic","Removing from plot list...");        selectedGraphics.removeElement(site);        selectedGraphic.setFillPaint(Color.red);        selectedGraphic.setLinePaint(Color.red);      }    }  } else {    Debug.message("basic","Nothing to add to plot list!");  }}  }
class C{  public static final boolean isSmscDeliveryReceipt(byte esmClass){  return isMessageType(esmClass,SMPPConstant.ESMCLS_SMSC_DELIV_RECEIPT);}  }
class C{  public NumericConstraint(boolean dec,double minimum,double maximum,String errorMessage){  this.dec=dec;  this.minimum=minimum;  this.maximum=maximum;  this.errorMessage=errorMessage;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double zConvFactor=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zConvFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    double[] N=new double[8];    double fx, fy;    float slope;    float progress=0;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    final double radToDeg=180 / Math.PI;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double gridRes=inputFile.getCellSizeX();    double eightGridRes=8 * gridRes;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zConvFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("spectrum.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          for (int i=0; i < 8; i++) {            N[i]=inputFile.getValue(row + Dy[i],col + Dx[i]);            if (N[i] != noData) {              N[i]=N[i] * zConvFactor;            } else {              N[i]=z * zConvFactor;            }          }          fy=(N[6] - N[4] + 2 * (N[7] - N[3]) + N[0] - N[2]) / eightGridRes;          fx=(N[2] - N[4] + 2 * (N[1] - N[5]) + N[0] - N[6]) / eightGridRes;          slope=(float)(Math.atan(Math.sqrt(fx * fx + fy * fy)) * radToDeg);          outputFile.setValue(row,col,slope);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.777 -0500",hash_original_method="48F2D19FF694A6F1CFBD6A7273C48B76",hash_generated_method="389902067CA44622F4D094DA524E30AD") public boolean isWarnEnabled(){  return (getLogger().isLoggable(Level.WARNING));}  }
class C{  public void changeGeneral(List<String> users,String pageSize,boolean enableShortcuts,boolean enableArrows,boolean enableSnippets,boolean enableUnicode) throws IllegalArgumentException, ServiceException, MalformedURLException, IOException {  if (users.size() == 0) {    throw new IllegalArgumentException();  }  GenericEntry entry=new GenericEntry();  entry.addProperty(Constants.PAGE_SIZE,pageSize);  entry.addProperty(Constants.SHORTCUTS,String.valueOf(enableShortcuts));  entry.addProperty(Constants.ARROWS,String.valueOf(enableArrows));  entry.addProperty(Constants.SNIPPETS,String.valueOf(enableSnippets));  entry.addProperty(Constants.UNICODE,String.valueOf(enableUnicode));  for (  String user : users) {    logger.log(Level.INFO,"Updating general settings ( " + "pageSize: " + pageSize + ", shortcuts: "+ enableShortcuts+ ", arrows: "+ enableArrows+ ", snippets: "+ enableSnippets+ ", unicode: "+ enableUnicode+ " ) for user "+ user+ " ...");    updateSettings(user,entry,"general");    logger.log(Level.INFO,"Successfully updated general settings.");  }}  }
class C{  private void layoutChild(){  BlockGroup groupToLayout=mConnectedGroup;  if (groupToLayout != null) {    int topOffset=0;    int leftOffset=mFieldLayoutWidth + mPatchManager.mBlockStartPadding;switch (mInputType) {case Input.TYPE_VALUE:{        if (mInput.getBlock().getInputsInline()) {          topOffset+=mBlockTopPadding + mPatchManager.mInlineInputTopPadding;          leftOffset+=mPatchManager.mInlineInputStartPadding;        } else {          leftOffset+=mPatchManager.mBlockEndPadding + mPatchManager.mValueInputWidth - mPatchManager.mOutputConnectorWidth;        }        break;      }case Input.TYPE_STATEMENT:{      topOffset+=mPatchManager.mStatementTopThickness;      leftOffset+=mPatchManager.mStatementInputPadding;      break;    }default :}final int width=groupToLayout.getMeasuredWidth();final int height=groupToLayout.getMeasuredHeight();if (mHelper.useRtl()) {  leftOffset=getMeasuredWidth() - leftOffset - width;}groupToLayout.layout(leftOffset,topOffset,leftOffset + width,topOffset + height);}}  }
class C{  public static RuleViolation isInputStandard(TransactionInput input){  for (  ScriptChunk chunk : input.getScriptSig().getChunks()) {    if (chunk.data != null && !chunk.isShortestPossiblePushData())     return RuleViolation.SHORTEST_POSSIBLE_PUSHDATA;    if (chunk.isPushData()) {      ECDSASignature signature;      try {        signature=ECKey.ECDSASignature.decodeFromDER(chunk.data);      } catch (      RuntimeException x) {        signature=null;      }      if (signature != null) {        if (!TransactionSignature.isEncodingCanonical(chunk.data))         return RuleViolation.SIGNATURE_CANONICAL_ENCODING;        if (!signature.isCanonical())         return RuleViolation.SIGNATURE_CANONICAL_ENCODING;      }    }  }  return RuleViolation.NONE;}  }
class C{  public void initializeWithInstance(CatalystInstance catalystInstance){  if (catalystInstance == null) {    throw new IllegalArgumentException("CatalystInstance cannot be null.");  }  if (mCatalystInstance != null) {    throw new IllegalStateException("ReactContext has been already initialized");  }  mCatalystInstance=catalystInstance;  ReactQueueConfiguration queueConfig=catalystInstance.getReactQueueConfiguration();  mUiMessageQueueThread=queueConfig.getUIQueueThread();  mNativeModulesMessageQueueThread=queueConfig.getNativeModulesQueueThread();  mJSMessageQueueThread=queueConfig.getJSQueueThread();}  }
class C{  public int indexOf(java.lang.CharSequence csq,int fromIndex){  final int csqLength=csq.length();  final int min=Math.max(0,fromIndex);  final int max=_count - csqLength;  if (csqLength == 0) {    return (min > max) ? -1 : min;  }  final char c=csq.charAt(0);  for (int i=indexOf(c,min); (i >= 0) && (i <= max); i=indexOf(c,++i)) {    boolean match=true;    for (int j=1; j < csqLength; j++) {      if (this.charAt(i + j) != csq.charAt(j)) {        match=false;        break;      }    }    if (match) {      return i;    }  }  return -1;}  }
class C{  @Override public void respondPrivateMessage(String response){  getUser().send().message(response);}  }
class C{  private int[] build(final int[] bitext,int numPositions){  return IntStream.range(0,bitext.length).parallel().boxed().sorted(null).limit(numPositions).mapToInt(null).toArray();}  }
class C{  public Form(String type){  this.dataForm=new DataForm(type);}  }
class C{  public SMIMEDecryptedInputStream(InputStream encryptedInputStream,File x509CertificateFile,File privateKeyFile) throws CertificateException, IOException, EncryptionException {  this(encryptedInputStream,x509CertificateFile,privateKeyFile,null);}  }
class C{  public void save() throws IOException {  applyProperties();  ParameterService.saveParameters();}  }
class C{  @Override public void openElement(int index){  int count=0;  NodeList list=current.getChildNodes();  int len=list.getLength();  for (int i=0; i < len; i++) {    Node node=list.item(i);    if ((node instanceof Element)) {      if (count++ == index) {        current=node;        return;      }    }  }}  }
class C{  public int findHeaderPositionUnder(int x,int y){  for (int i=0; i < mHeaderRects.size(); i++) {    Rect rect=mHeaderRects.get(mHeaderRects.keyAt(i));    if (rect.contains(x,y)) {      return mHeaderRects.keyAt(i);    }  }  return -1;}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  super.writeExternal(out);  int k_max=knnDistances.length;  out.writeInt(k_max);  for (int i=0; i < k_max; i++) {    out.writeDouble(knnDistances[i]);  }}  }
class C{  public void block(InetAddress address){  if (address == null) {    throw new IllegalArgumentException("Adress to block can not be null");  }  block(new Subnet(address,32));}  }
class C{  private static synchronized void addShutdownHook(Thread hook){  if (shutdownHooks_.contains(hook))   return;  shutdownHooks_.add(hook);  try {    Runtime.getRuntime().addShutdownHook(hook);  } catch (  IllegalStateException alreadyShuttingDownVm) {  }}  }
class C{  public void longPoll() throws InterruptedException {  final String dolphinId=getDolphinId();  if (dolphinId == null) {    throw new IllegalStateException("longPoll was called outside a dolphin session");  }  final Receiver receiverInSession=getOrCreateReceiverInSession(dolphinId);  if (!receiverInSession.isListeningToEventBus()) {    receiverInSession.register(eventBus);  }  final DataflowQueue receiverQueue=receiverInSession.getReceiverQueue();  boolean somethingHandled=false;  while (!somethingHandled) {    Object val=receiverQueue.getVal();    final long startTime=System.currentTimeMillis();    while (val != null) {      if (val == releaseVal) {        return;      }      if (val instanceof Message) {        final Message event=(Message)val;        somethingHandled|=receiverInSession.handle(event);      }      if (System.currentTimeMillis() - startTime <= MAX_POLL_DURATION) {        val=receiverQueue.getVal(TIMEOUT,MILLISECONDS);      } else {        val=null;      }    }  }}  }
class C{  protected byte[] engineDoFinal(byte[] input,int inputOffset,int inputLen) throws IllegalBlockSizeException, BadPaddingException {  return core.doFinal(input,inputOffset,inputLen);}  }
class C{  @Override public Object createConnectionFactory(final ConnectionManager cxManager) throws ResourceException {  if (ActiveMQRAManagedConnectionFactory.trace) {    ActiveMQRALogger.LOGGER.trace("createConnectionFactory(" + cxManager + ")");  }  cm=cxManager;  ActiveMQRAConnectionFactory cf=new ActiveMQRAConnectionFactoryImpl(this,cm);  if (ActiveMQRAManagedConnectionFactory.trace) {    ActiveMQRALogger.LOGGER.trace("Created connection factory: " + cf + ", using connection manager: "+ cm);  }  return cf;}  }
class C{  public MetaTable(Schema schema,int type){  super(schema,null);  this.type=type;  Column[] cols;  String indexColumnName=null;switch (type) {case TABLES:    setObjectName("TABLES");  cols=createColumns("TABLE_CATALOG","TABLE_SCHEMA","TABLE_NAME","TABLE_TYPE","STORAGE_TYPE","SQL","REMARKS","LAST_MODIFICATION BIGINT","ID INT","TYPE_NAME","TABLE_CLASS","ROW_COUNT_ESTIMATE BIGINT");indexColumnName="TABLE_NAME";break;case COLUMNS:setObjectName("COLUMNS");cols=createColumns("TABLE_CATALOG","TABLE_SCHEMA","TABLE_NAME","COLUMN_NAME","ORDINAL_POSITION INT","COLUMN_DEFAULT","IS_NULLABLE","DATA_TYPE INT","CHARACTER_MAXIMUM_LENGTH INT","CHARACTER_OCTET_LENGTH INT","NUMERIC_PRECISION INT","NUMERIC_PRECISION_RADIX INT","NUMERIC_SCALE INT","CHARACTER_SET_NAME","COLLATION_NAME","TYPE_NAME","NULLABLE INT","IS_COMPUTED BIT","SELECTIVITY INT","CHECK_CONSTRAINT","SEQUENCE_NAME","REMARKS","SOURCE_DATA_TYPE SMALLINT");indexColumnName="TABLE_NAME";break;case INDEXES:setObjectName("INDEXES");cols=createColumns("TABLE_CATALOG","TABLE_SCHEMA","TABLE_NAME","NON_UNIQUE BIT","INDEX_NAME","ORDINAL_POSITION SMALLINT","COLUMN_NAME","CARDINALITY INT","PRIMARY_KEY BIT","INDEX_TYPE_NAME","IS_GENERATED BIT","INDEX_TYPE SMALLINT","ASC_OR_DESC","PAGES INT","FILTER_CONDITION","REMARKS","SQL","ID INT","SORT_TYPE INT","CONSTRAINT_NAME","INDEX_CLASS");indexColumnName="TABLE_NAME";break;case TABLE_TYPES:setObjectName("TABLE_TYPES");cols=createColumns("TYPE");break;case TYPE_INFO:setObjectName("TYPE_INFO");cols=createColumns("TYPE_NAME","DATA_TYPE INT","PRECISION INT","PREFIX","SUFFIX","PARAMS","AUTO_INCREMENT BIT","MINIMUM_SCALE SMALLINT","MAXIMUM_SCALE SMALLINT","RADIX INT","POS INT","CASE_SENSITIVE BIT","NULLABLE SMALLINT","SEARCHABLE SMALLINT");break;case CATALOGS:setObjectName("CATALOGS");cols=createColumns("CATALOG_NAME");break;case SETTINGS:setObjectName("SETTINGS");cols=createColumns("NAME","VALUE");break;case HELP:setObjectName("HELP");cols=createColumns("ID INT","SECTION","TOPIC","SYNTAX","TEXT");break;case SEQUENCES:setObjectName("SEQUENCES");cols=createColumns("SEQUENCE_CATALOG","SEQUENCE_SCHEMA","SEQUENCE_NAME","CURRENT_VALUE BIGINT","INCREMENT BIGINT","IS_GENERATED BIT","REMARKS","CACHE BIGINT","MIN_VALUE BIGINT","MAX_VALUE BIGINT","IS_CYCLE BIT","ID INT");break;case USERS:setObjectName("USERS");cols=createColumns("NAME","ADMIN","REMARKS","ID INT");break;case ROLES:setObjectName("ROLES");cols=createColumns("NAME","REMARKS","ID INT");break;case RIGHTS:setObjectName("RIGHTS");cols=createColumns("GRANTEE","GRANTEETYPE","GRANTEDROLE","RIGHTS","TABLE_SCHEMA","TABLE_NAME","ID INT");indexColumnName="TABLE_NAME";break;case FUNCTION_ALIASES:setObjectName("FUNCTION_ALIASES");cols=createColumns("ALIAS_CATALOG","ALIAS_SCHEMA","ALIAS_NAME","JAVA_CLASS","JAVA_METHOD","DATA_TYPE INT","TYPE_NAME","COLUMN_COUNT INT","RETURNS_RESULT SMALLINT","REMARKS","ID INT","SOURCE");break;case FUNCTION_COLUMNS:setObjectName("FUNCTION_COLUMNS");cols=createColumns("ALIAS_CATALOG","ALIAS_SCHEMA","ALIAS_NAME","JAVA_CLASS","JAVA_METHOD","COLUMN_COUNT INT","POS INT","COLUMN_NAME","DATA_TYPE INT","TYPE_NAME","PRECISION INT","SCALE SMALLINT","RADIX SMALLINT","NULLABLE SMALLINT","COLUMN_TYPE SMALLINT","REMARKS","COLUMN_DEFAULT");break;case SCHEMATA:setObjectName("SCHEMATA");cols=createColumns("CATALOG_NAME","SCHEMA_NAME","SCHEMA_OWNER","DEFAULT_CHARACTER_SET_NAME","DEFAULT_COLLATION_NAME","IS_DEFAULT BIT","REMARKS","ID INT");break;case TABLE_PRIVILEGES:setObjectName("TABLE_PRIVILEGES");cols=createColumns("GRANTOR","GRANTEE","TABLE_CATALOG","TABLE_SCHEMA","TABLE_NAME","PRIVILEGE_TYPE","IS_GRANTABLE");indexColumnName="TABLE_NAME";break;case COLUMN_PRIVILEGES:setObjectName("COLUMN_PRIVILEGES");cols=createColumns("GRANTOR","GRANTEE","TABLE_CATALOG","TABLE_SCHEMA","TABLE_NAME","COLUMN_NAME","PRIVILEGE_TYPE","IS_GRANTABLE");indexColumnName="TABLE_NAME";break;case COLLATIONS:setObjectName("COLLATIONS");cols=createColumns("NAME","KEY");break;case VIEWS:setObjectName("VIEWS");cols=createColumns("TABLE_CATALOG","TABLE_SCHEMA","TABLE_NAME","VIEW_DEFINITION","CHECK_OPTION","IS_UPDATABLE","STATUS","REMARKS","ID INT");indexColumnName="TABLE_NAME";break;case IN_DOUBT:setObjectName("IN_DOUBT");cols=createColumns("TRANSACTION","STATE");break;case CROSS_REFERENCES:setObjectName("CROSS_REFERENCES");cols=createColumns("PKTABLE_CATALOG","PKTABLE_SCHEMA","PKTABLE_NAME","PKCOLUMN_NAME","FKTABLE_CATALOG","FKTABLE_SCHEMA","FKTABLE_NAME","FKCOLUMN_NAME","ORDINAL_POSITION SMALLINT","UPDATE_RULE SMALLINT","DELETE_RULE SMALLINT","FK_NAME","PK_NAME","DEFERRABILITY SMALLINT");indexColumnName="PKTABLE_NAME";break;case CONSTRAINTS:setObjectName("CONSTRAINTS");cols=createColumns("CONSTRAINT_CATALOG","CONSTRAINT_SCHEMA","CONSTRAINT_NAME","CONSTRAINT_TYPE","TABLE_CATALOG","TABLE_SCHEMA","TABLE_NAME","UNIQUE_INDEX_NAME","CHECK_EXPRESSION","COLUMN_LIST","REMARKS","SQL","ID INT");indexColumnName="TABLE_NAME";break;case CONSTANTS:setObjectName("CONSTANTS");cols=createColumns("CONSTANT_CATALOG","CONSTANT_SCHEMA","CONSTANT_NAME","DATA_TYPE INT","REMARKS","SQL","ID INT");break;case PARTITIONS:setObjectName("PARTITIONS");cols=createColumns("PARTITIONS_CATALOG","PARTITIONS_SCHEMA","OBJECT_NAME","DATA_NODE","NODE_NAME","NODE_TYPE","PARTITIONER");break;case TRIGGERS:setObjectName("TRIGGERS");cols=createColumns("TRIGGER_CATALOG","TRIGGER_SCHEMA","TRIGGER_NAME","TRIGGER_TYPE","TABLE_CATALOG","TABLE_SCHEMA","TABLE_NAME","BEFORE BIT","JAVA_CLASS","QUEUE_SIZE INT","NO_WAIT BIT","REMARKS","SQL","ID INT");break;case SESSIONS:{setObjectName("SESSIONS");cols=createColumns("ID INT","USER_NAME","SESSION_START","STATEMENT","STATEMENT_START","CONTAINS_UNCOMMITTED");break;}case LOCKS:{setObjectName("LOCKS");cols=createColumns("TABLE_SCHEMA","TABLE_NAME","SESSION_ID INT","LOCK_TYPE");break;}case SESSION_STATE:{setObjectName("SESSION_STATE");cols=createColumns("KEY","SQL");break;}case QUERY_STATISTICS:{setObjectName("QUERY_STATISTICS");cols=createColumns("SQL_STATEMENT","EXECUTION_COUNT INT","MIN_EXECUTION_TIME LONG","MAX_EXECUTION_TIME LONG","CUMULATIVE_EXECUTION_TIME LONG","AVERAGE_EXECUTION_TIME DOUBLE","STD_DEV_EXECUTION_TIME DOUBLE","MIN_ROW_COUNT INT","MAX_ROW_COUNT INT","CUMULATIVE_ROW_COUNT LONG","AVERAGE_ROW_COUNT DOUBLE","STD_DEV_ROW_COUNT DOUBLE");break;}default :throw DbException.throwInternalError("type=" + type);}setColumns(cols);if (indexColumnName == null) {indexColumn=-1;} else {indexColumn=getColumn(indexColumnName).getColumnId();}}  }
class C{  @SuppressWarnings("unchecked") public Relationship findResponseMatch(Vertex sentence,Vertex previousResponse,Vertex input,Network network,float percentage){  if (!this.enableResponseMatch) {    return null;  }  List<Relationship> wordRelations=sentence.orderedRelationships(Primitive.WORD);  if (wordRelations == null) {    return null;  }  long startTime=System.currentTimeMillis();  log("Searching for similar questions",Level.FINE);  Map<Vertex,Integer> matches=new HashMap<Vertex,Integer>();  Map<Vertex,Set<Vertex>> processed=new HashMap<Vertex,Set<Vertex>>();  long processTime=this.maxResponseMatchProcess;  if (getBot().isDebugFine()) {    log("Increasing processing time to allow debugging",Level.INFO,getBot().getDebugLevel());    processTime=processTime * 20;  }  addQuestionMatches(sentence,network,startTime,processTime,wordRelations,matches,processed,Primitive.KEYQUESTION,true);  addQuestionMatches(sentence,network,startTime,processTime,wordRelations,matches,processed,Primitive.QUESTION,true);  Map<Vertex,Integer> keyWordsMatches=new HashMap<Vertex,Integer>(matches);  addQuestionMatches(sentence,network,startTime,processTime,wordRelations,matches,processed,Primitive.QUESTION,false);  if (this.learnGrammar) {    addQuestionMatches(sentence,network,startTime,processTime,wordRelations,matches,processed,Primitive.SENTENCE,false);  }  int wordCount=wordRelations.size();  double multiplier=(1.0 - percentage) * 15;  int tooBig=(int)(wordCount * multiplier) + 2;  int tooSmall=0;  Map.Entry<Vertex,Integer> bestMatch=null;  int bestAbs=0;  Relationship bestResponse=null;  Object[] best=new Object[3];  best[0]=bestMatch;  best[1]=bestAbs;  best[2]=bestResponse;  startTime=System.currentTimeMillis();  log("Searching for best question match (min words, max words, match size)",Level.FINE,tooSmall,tooBig,matches.size());  if (!matches.isEmpty()) {    Vertex previousQuestionInput=input.getRelationship(Primitive.QUESTION);    Vertex previousQuestion=null;    if (previousQuestionInput != null) {      previousQuestion=previousQuestionInput.getRelationship(Primitive.INPUT);    }    Vertex conversation=input.getRelationship(Primitive.CONVERSATION);    Vertex currentTopic=null;    if (conversation != null) {      currentTopic=conversation.mostConscious(Primitive.TOPIC);    }    Set<String> questionWords=new HashSet<String>();    Collection<Relationship> wordRelationships=sentence.getRelationships(Primitive.WORD);    if (wordRelationships != null) {      for (      Relationship relationship : wordRelationships) {        questionWords.add(relationship.getTarget().getDataValue().toLowerCase());      }    }    int bestValue=0;    Map.Entry<Vertex,Integer> bestEntry=null;    Map.Entry<Vertex,Integer> secondBestEntry=null;    for (    Map.Entry<Vertex,Integer> entry : matches.entrySet()) {      if (entry.getValue() > bestValue && (sentence != entry.getKey())) {        bestValue=entry.getValue();        bestEntry=entry;        secondBestEntry=bestEntry;      }    }    if (bestEntry != null) {      checkBetterMatch(bestEntry,keyWordsMatches,best,tooBig,tooSmall,wordCount,percentage,input,bestEntry.getKey(),sentence,previousResponse,true,false,previousQuestion,questionWords,currentTopic,network);    }    if (best[0] == null && secondBestEntry != null) {      checkBetterMatch(secondBestEntry,keyWordsMatches,best,tooBig,tooSmall,wordCount,percentage,input,secondBestEntry.getKey(),sentence,previousResponse,true,false,previousQuestion,questionWords,currentTopic,network);    }    int count=0;    for (    Map.Entry<Vertex,Integer> entry : matches.entrySet()) {      long currentTime=System.currentTimeMillis();      if ((currentTime - startTime) > processTime) {        log("Process time limit reached (time, matches, processed)",Level.INFO,processTime,matches.size(),count);        break;      }      count++;      checkBetterMatch(entry,keyWordsMatches,best,tooBig,tooSmall,wordCount,percentage,input,entry.getKey(),sentence,previousResponse,true,false,previousQuestion,questionWords,currentTopic,network);    }  }  bestMatch=(Map.Entry<Vertex,Integer>)best[0];  bestAbs=(Integer)best[1];  bestResponse=(Relationship)best[2];  if (bestResponse == null) {    log("No valid question match",Level.FINE);    return null;  }  if (keyWordsMatches.containsKey(bestMatch.getKey())) {    log("Question keyword match",Level.FINE);  } else {    int max=computeMaxSentenceValue(bestMatch.getKey(),bestMatch.getKey(),network);    double required=max * percentage * 0.8;    int matchValue=computeMaxSentenceValue(bestMatch.getKey(),sentence,network);    log("Question best match (score, max score, required score, question)",Level.FINE,matchValue,max,required,bestMatch.getKey());    if (matchValue < required) {      log("Question bad match, insufficient score (score, required score, question)",Level.FINE,matchValue,required,bestMatch.getKey());      this.lastResponseMetaId=null;      return null;    }    int matchMax=computeMaxSentenceValue(bestMatch.getKey(),bestMatch.getKey(),network);    if (matchValue * multiplier < matchMax) {      log("Question bad match, too generic (score, multiplier, value, match max, question)",Level.FINE,matchValue,multiplier,matchValue * multiplier,matchMax,bestMatch.getKey());      this.lastResponseMetaId=null;      return null;    }  }  log("Question match response",Level.FINE,bestResponse);  return bestResponse;}  }
class C{  static private String readFromStdin() throws IOException {  final LineNumberReader r=new LineNumberReader(new InputStreamReader(System.in));  try {    final StringBuilder sb=new StringBuilder();    String s;    while ((s=r.readLine()) != null) {      if (r.getLineNumber() > 1)       sb.append("\n");      sb.append(s);    }    return sb.toString();  }  finally {    r.close();  }}  }
class C{  public static MediaType detectMediaType(InputStream is,String name) throws IOException {  Metadata meta=new Metadata();  meta.add(Metadata.RESOURCE_NAME_KEY,name);  MediaType mediaType=new Tika().getDetector().detect(new BufferedInputStream(is),meta);  if (mediaType.getType().toLowerCase().equals("text")) {    return new MediaType(mediaType,Charset.forName(FileUtil.detectCharset(is)));  } else   if (mediaType.equals(MediaType.audio("ogg")) && FilenameUtils.getExtension(name).toLowerCase().equals("ogv")) {    return new MediaType("video","ogg");  }  return mediaType;}  }
class C{  public static String formatStackTraceElement(StackTraceElement element){  return String.format("%s-%s-%d",element.getClassName().replace(".","-"),element.getMethodName(),element.getLineNumber());}  }
class C{  public Matrix multiply(double scalar){  double[][] newMatrix=new double[rows][columns];  for (int i=0; i < rows; i++)   for (int j=0; j < columns; j++)   newMatrix[i][j]=values[i][j] * scalar;  return new Matrix(newMatrix);}  }
class C{  public MannWhitneyUTest(){  super(2);}  }
class C{  public SmoothPagedView(Context context,AttributeSet attrs){  this(context,attrs,0);}  }
class C{  public static boolean matches(MethodFilter[] filters,JavaMethod method){  for (  MethodFilter filter : filters) {    if (filter.matches(method)) {      return true;    }  }  return false;}  }
class C{  public static byte[] longToBytesLE(long m){  byte[] b=new byte[8];  for (int i=0; i < 8; i++) {    b[i]=(byte)((m >>> 8 * i) & 0xff);  }  return b;}  }
class C{  private static boolean slowEquals(byte[] hash1,byte[] hash2){  assert hash1 != null;  assert hash2 != null;  int diff=hash1.length ^ hash2.length;  for (int i=0; i < hash1.length && i < hash2.length; i++) {    diff|=hash1[i] ^ hash2[i];  }  return diff == 0;}  }
class C{  public Set<String> filterVolumesAlreadyPartOfReplicationGroup(StorageSystem storage,CIMObjectPath replicationGroupPath,String[] deviceIds) throws Exception {  Set<String> volumes=new HashSet<String>(Arrays.asList(deviceIds));  Set<String> volumesInRG=getVolumeDeviceIdsFromStorageGroup(storage,replicationGroupPath);  volumes.removeAll(volumesInRG);  return volumes;}  }
class C{  private static <T>void initializeUnknownPlugins(final IPluginRegistry<IPlugin<T>> registry,final T pluginInterface,final List<Pair<IPlugin<T>,PluginStatus>> validatedPlugins,final List<Pair<IPlugin<T>,Exception>> initializedPlugins,final Set<Long> processedPlugins){  for (  final Pair<IPlugin<T>,PluginStatus> pluginPair : validatedPlugins) {    if ((pluginPair.second() == PluginStatus.Valid) && !processedPlugins.contains(pluginPair.first().getGuid())) {      initializePlugin(pluginPair.first(),pluginInterface,registry,initializedPlugins);    }  }}  }
class C{  private Object processExecute(Statement proxy,Method method,Object[] args) throws Throwable {  long startTime=logSlowQuery ? System.currentTimeMillis() : 0L;  try {    if (method.getName() == "executeQuery")     return newProxiedResultSet(proxy,method,args);    return targetInvoke(method,args);  }  finally {    if (logSlowQuery)     logQuery(proxy,args,startTime);  }}  }
class C{  protected XYMultipleSeriesRenderer buildRenderer(int[] colors,PointStyle[] styles){  XYMultipleSeriesRenderer renderer=new XYMultipleSeriesRenderer();  setRenderer(renderer,colors,styles);  return renderer;}  }
class C{  void prevWeapon(){  if (ce() == null) {    return;  }  int weaponId=clientgui.mechD.wPan.selectPrevWeapon();  if (ce().getId() != clientgui.mechD.wPan.getSelectedEntityId()) {    clientgui.mechD.wPan.displayMech(ce());  }  if (weaponId == -1) {    setFireModeEnabled(false);  } else {    Mounted m=ce().getEquipment(weaponId);    setFireModeEnabled(m.isModeSwitchable());  }  updateTarget();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:21.289 -0500",hash_original_method="21AA3C6AE5648A36F9E47AF2806112A8",hash_generated_method="88B5C779B056CC5DB7C5AB8E75A56537") public synchronized final int evictionCount(){  return evictionCount;}  }
class C{  public static Field<Boolean> ofBoolean(String name){  return ofBoolean(name,null);}  }
class C{  public TopHitsBuilder addHighlightedField(String name,int fragmentSize){  highlightBuilder().field(name,fragmentSize);  return this;}  }
class C{  @Override public String[] indices(){  return indices;}  }
class C{  public DefaultTlsSRPGroupVerifier(){  this(DEFAULT_GROUPS);}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  public void onClampToAdelaide(View view){  if (!checkReady()) {    return;  }  mMap.setLatLngBoundsForCameraTarget(ADELAIDE);  mMap.animateCamera(CameraUpdateFactory.newCameraPosition(ADELAIDE_CAMERA));}  }
class C{  @Override protected JComponent addSettingComponent(final GridBagPanel p,final ISetting<?> setting,final ISettingsBean settings,final ActionListener customListener){  final JComponent settingComp;  if (setting instanceof ITemplateSetting) {    p.addSingle(settingComp=SettingsGui.createSettingTemplateField((ITemplateSetting)setting,settings,customListener));    if (setting.getViewHints().getDialogTitle() != null)     ((TemplateField)settingComp).setDialogTitle(setting.getViewHints().getDialogTitle());    if (setting.getViewHints().getColumns() != null)     ((TemplateField)settingComp).textField.setColumns(setting.getViewHints().getColumns());  } else   if (setting instanceof IValidatedMultilineStringSetting) {    p.addSingle(settingComp=SettingsGui.createSettingIndicatorTextArea((IValidatedMultilineStringSetting)setting,settings,customListener));    if (setting.getViewHints().getRows() != null)     ((IndicatorTextArea)settingComp).textArea.setRows(setting.getViewHints().getRows());    if (setting.getViewHints().getColumns() != null)     ((IndicatorTextArea)settingComp).textArea.setColumns(setting.getViewHints().getColumns());  } else   settingComp=super.addSettingComponent(p,setting,settings,customListener);  return settingComp;}  }
class C{  private long cacheResponseAge(){  long apparentReceivedAge=servedDate != null ? Math.max(0,receivedResponseMillis - servedDate.getTime()) : 0;  long receivedAge=ageSeconds != -1 ? Math.max(apparentReceivedAge,SECONDS.toMillis(ageSeconds)) : apparentReceivedAge;  long responseDuration=receivedResponseMillis - sentRequestMillis;  long residentDuration=nowMillis - receivedResponseMillis;  return receivedAge + responseDuration + residentDuration;}  }
class C{  protected void handlePostExecution(Logger log){  handleException(log);  SolrCore.postDecorateResponse(null,solrRequest,solrResponse);  addDeprecatedWarning();  if (log.isInfoEnabled() && solrResponse.getToLog().size() > 0) {    log.info(solrResponse.getToLogAsString(solrCore.getLogId()));  }}  }
class C{  public static boolean isTermsRequest(SipRequest request){  String contentType=request.getContentType();  return (contentType != null && contentType.startsWith("application/end-user"));}  }
class C{  private static UUID bestMapperNodeForGroup(HadoopMapReducePlanGroup grp,MapperPriority priority,@Nullable Collection<UUID> affIds,@Nullable UUID prioAffId){  int idx=0;  if (!grp.single()) {switch (priority) {case NORMAL:{        idx=ThreadLocalRandom.current().nextInt(grp.nodeCount());        break;      }case HIGH:{      assert affIds != null;      List<Integer> cands=new ArrayList<>();      for (int i=0; i < grp.nodeCount(); i++) {        UUID id=grp.nodeId(i);        if (affIds.contains(id))         cands.add(i);      }      idx=cands.get(ThreadLocalRandom.current().nextInt(cands.size()));      break;    }default :{    assert prioAffId != null;    for (int i=0; i < grp.nodeCount(); i++) {      UUID id=grp.nodeId(i);      if (F.eq(id,prioAffId)) {        idx=i;        break;      }    }    assert priority == MapperPriority.HIGHEST;  }}}return grp.nodeId(idx);}  }
class C{  @SuppressWarnings("unchecked") private Object readResolve() throws ObjectStreamException {  try {    IgniteBiTuple<GridKernalContext,String> t=stash.get();    return t.get1().dataStructures().atomicStamped(t.get2(),null,null,false);  } catch (  IgniteCheckedException e) {    throw U.withCause(new InvalidObjectException(e.getMessage()),e);  } finally {    stash.remove();  }}  }
class C{  public Segment(Coordinate p0,Coordinate p1,Object data){  ls=new LineSegment(p0,p1);  this.data=data;}  }
class C{  @Override public void onDrawerSlide(View drawerView,float slideOffset){}  }
class C{  public static String toLowerCase(String string){  boolean changed=false;  char[] chars=string.toCharArray();  for (int i=0; i != chars.length; i++) {    char ch=chars[i];    if ('A' <= ch && 'Z' >= ch) {      changed=true;      chars[i]=(char)(ch - 'A' + 'a');    }  }  if (changed) {    return new String(chars);  }  return string;}  }
class C{  public static InputStream istream(File f){  try {    if (!f.isAbsolute())     f=new File(getResourcesDir(),f.getPath());    return new FileInputStream(f);  } catch (  FileNotFoundException e) {    throw new RuntimeException(e);  }}  }
class C{  public static void write(ClassificationDataSet data,OutputStream os){  PrintWriter writer=new PrintWriter(os);  for (int i=0; i < data.getSampleSize(); i++) {    int pred=data.getDataPointCategory(i);    Vec vals=data.getDataPoint(i).getNumericalValues();    writer.write(pred + " ");    for (    IndexValue iv : vals) {      double val=iv.getValue();      if (Math.rint(val) == val)       writer.write((iv.getIndex() + 1) + ":" + (long)val+ " "); else       writer.write((iv.getIndex() + 1) + ":" + val+ " ");    }    writer.write("\n");  }  writer.flush();  writer.close();}  }
class C{  public void add(Permission permission){  if (!(permission instanceof FilePermission))   throw new IllegalArgumentException("invalid permission: " + permission);  if (isReadOnly())   throw new SecurityException("attempt to add a Permission to a readonly PermissionCollection");synchronized (this) {    perms.add(permission);  }}  }
class C{  public static double covariance(double[] x,double[] y){  double c=0;  double meanX=mean(x);  double meanY=mean(y);  for (int t=0; t < x.length; t++) {    c+=(x[t] - meanX) * (y[t] - meanY);  }  return c / (double)(x.length - 1);}  }
class C{  public void assertSchema(char type,int length,boolean strictlength) throws FormatException {  if ((type != fieldType) && !((type == 'i') && ((fieldType == VPF_COLUMN_INT) || (fieldType == VPF_COLUMN_SHORT)))) {    throw new FormatException("AssertSchema failed on fieldType!");  }  if ((strictlength && (length != numberOfElements)) || (!strictlength && (length != -1) && (length != numberOfElements))) {    throw new FormatException("AssertSchema failed on length!");  }}  }
class C{  public static void removeTemporaryFiles(){  try {    FileSystem fs=FileSystem.get(conf);    Path workingDir=new Path(".");    FileStatus[] files=fs.listStatus(workingDir);    for (    FileStatus file : files) {      String fileName=file.getPath().toString().substring(file.getPath().getParent().toString().length() + 1);      if (fileName.contains("temp"))       fs.delete(file.getPath(),false);    }  } catch (  IOException e) {    e.printStackTrace();    fail("unable to remove temporary files: " + e.getMessage());  }}  }
class C{  public void addResolver(TemplateVariableResolver resolver){  Assert.isNotNull(resolver);  fResolvers.put(resolver.getType(),resolver);}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xD7D3FDCD,version=150) public int sceKernelUnregisterSysEventHandler(TPointer handler){  return 0;}  }
class C{  public Picture(String filename){  this.filename=filename;  try {    File file=new File(filename);    if (file.isFile()) {      image=ImageIO.read(file);    } else {      URL url=getClass().getResource(filename);      if (url == null) {        url=new URL(filename);      }      image=ImageIO.read(url);    }    if (image == null) {      throw new IllegalArgumentException("Invalid image file: " + filename);    }    width=image.getWidth(null);    height=image.getHeight(null);  } catch (  IOException e) {    throw new RuntimeException("Could not open file: " + filename);  }}  }
class C{  public boolean isAutosome(String refName){  return mAutosomes.contains(refName);}  }
class C{  public void precomputeForDoubleScalarMultiplication(){  if (null != this.precomputedForDouble) {    return;  }  Ed25519GroupElement Bi=this;  this.precomputedForDouble=new Ed25519GroupElement[8];  for (int i=0; i < 8; i++) {    final Ed25519FieldElement inverse=Bi.Z.invert();    final Ed25519FieldElement x=Bi.X.multiply(inverse);    final Ed25519FieldElement y=Bi.Y.multiply(inverse);    this.precomputedForDouble[i]=precomputed(y.add(x),y.subtract(x),x.multiply(y).multiply(Ed25519Field.D_Times_TWO));    Bi=this.add(this.add(Bi.toCached()).toP3().toCached()).toP3();  }}  }
class C{  public static Address minimumObjectRef(Address regionBaseAddr){  return regionBaseAddr.plus(OBJECT_REF_OFFSET);}  }
class C{  public double mutualInformation(int child,int[] parents,int lag){  double M;  int[] c=new int[ntimes - lag];  for (int i=lag; i < ntimes; i++) {    c[i - lag]=cases[i][child];  }  double hchild=entropy(c);  int[] p1=new int[ntimes - lag];  int[][] pm=new int[parents.length][ntimes - lag];  double hparents;  for (int i=0; i < ntimes - lag; i++) {    p1[i]=cases[i][parents[0]];  }  hparents=entropy(p1);  if (parents.length > 1) {    for (int i=0; i < ntimes - lag; i++) {      for (int j=1; j < parents.length; j++) {        pm[j - 1][i]=cases[i][parents[j]];      }    }    hparents=jointEntropy(p1,pm);  }  double hjoint;  if (parents.length == 1) {    hjoint=jointEntropy(c,p1);  } else {    int[][] p1pm=new int[parents.length][ntimes - lag];    for (int i=0; i < ntimes - lag; i++) {      p1pm[0][i]=p1[i];      for (int j=0; j < parents.length - 1; j++) {        p1pm[j + 1][i]=pm[j][i];      }    }    hjoint=jointEntropy(c,p1pm);  }  M=hchild + hparents - hjoint;  return M;}  }
class C{  public DBObject_Unique_Column(DBConnection parent,String name,int sequence){  super(parent,name,sequence);}  }
class C{  public RegistrationException(String message){  super(message);}  }
class C{  private void forgetSource(Color newColor,State nextState){  sourceQuality=0;  dancingThreshold=-1;  sourceConcentration=0;  repeatedTrip=0;  setFoodSource(null);  foragingCosts=0;  if (newColor != null)   setColor(newColor);  setState(nextState);}  }
class C{  private int[][] generateWorkingKey(byte[] key,boolean forEncryption){  int keyLen=key.length;  if (keyLen < 16 || keyLen > 32 || (keyLen & 7) != 0) {    throw new IllegalArgumentException("Key length not 128/192/256 bits.");  }  int KC=keyLen >>> 2;  ROUNDS=KC + 6;  int[][] W=new int[ROUNDS + 1][4];switch (KC) {case 4:{      int t0=Pack.littleEndianToInt(key,0);      W[0][0]=t0;      int t1=Pack.littleEndianToInt(key,4);      W[0][1]=t1;      int t2=Pack.littleEndianToInt(key,8);      W[0][2]=t2;      int t3=Pack.littleEndianToInt(key,12);      W[0][3]=t3;      for (int i=1; i <= 10; ++i) {        int u=subWord(shift(t3,8)) ^ rcon[i - 1];        t0^=u;        W[i][0]=t0;        t1^=t0;        W[i][1]=t1;        t2^=t1;        W[i][2]=t2;        t3^=t2;        W[i][3]=t3;      }      break;    }case 6:{    int t0=Pack.littleEndianToInt(key,0);    W[0][0]=t0;    int t1=Pack.littleEndianToInt(key,4);    W[0][1]=t1;    int t2=Pack.littleEndianToInt(key,8);    W[0][2]=t2;    int t3=Pack.littleEndianToInt(key,12);    W[0][3]=t3;    int t4=Pack.littleEndianToInt(key,16);    W[1][0]=t4;    int t5=Pack.littleEndianToInt(key,20);    W[1][1]=t5;    int rcon=1;    int u=subWord(shift(t5,8)) ^ rcon;    rcon<<=1;    t0^=u;    W[1][2]=t0;    t1^=t0;    W[1][3]=t1;    t2^=t1;    W[2][0]=t2;    t3^=t2;    W[2][1]=t3;    t4^=t3;    W[2][2]=t4;    t5^=t4;    W[2][3]=t5;    for (int i=3; i < 12; i+=3) {      u=subWord(shift(t5,8)) ^ rcon;      rcon<<=1;      t0^=u;      W[i][0]=t0;      t1^=t0;      W[i][1]=t1;      t2^=t1;      W[i][2]=t2;      t3^=t2;      W[i][3]=t3;      t4^=t3;      W[i + 1][0]=t4;      t5^=t4;      W[i + 1][1]=t5;      u=subWord(shift(t5,8)) ^ rcon;      rcon<<=1;      t0^=u;      W[i + 1][2]=t0;      t1^=t0;      W[i + 1][3]=t1;      t2^=t1;      W[i + 2][0]=t2;      t3^=t2;      W[i + 2][1]=t3;      t4^=t3;      W[i + 2][2]=t4;      t5^=t4;      W[i + 2][3]=t5;    }    u=subWord(shift(t5,8)) ^ rcon;    t0^=u;    W[12][0]=t0;    t1^=t0;    W[12][1]=t1;    t2^=t1;    W[12][2]=t2;    t3^=t2;    W[12][3]=t3;    break;  }case 8:{  int t0=Pack.littleEndianToInt(key,0);  W[0][0]=t0;  int t1=Pack.littleEndianToInt(key,4);  W[0][1]=t1;  int t2=Pack.littleEndianToInt(key,8);  W[0][2]=t2;  int t3=Pack.littleEndianToInt(key,12);  W[0][3]=t3;  int t4=Pack.littleEndianToInt(key,16);  W[1][0]=t4;  int t5=Pack.littleEndianToInt(key,20);  W[1][1]=t5;  int t6=Pack.littleEndianToInt(key,24);  W[1][2]=t6;  int t7=Pack.littleEndianToInt(key,28);  W[1][3]=t7;  int u, rcon=1;  for (int i=2; i < 14; i+=2) {    u=subWord(shift(t7,8)) ^ rcon;    rcon<<=1;    t0^=u;    W[i][0]=t0;    t1^=t0;    W[i][1]=t1;    t2^=t1;    W[i][2]=t2;    t3^=t2;    W[i][3]=t3;    u=subWord(t3);    t4^=u;    W[i + 1][0]=t4;    t5^=t4;    W[i + 1][1]=t5;    t6^=t5;    W[i + 1][2]=t6;    t7^=t6;    W[i + 1][3]=t7;  }  u=subWord(shift(t7,8)) ^ rcon;  t0^=u;  W[14][0]=t0;  t1^=t0;  W[14][1]=t1;  t2^=t1;  W[14][2]=t2;  t3^=t2;  W[14][3]=t3;  break;}default :{throw new IllegalStateException("Should never get here");}}if (!forEncryption) {for (int j=1; j < ROUNDS; j++) {for (int i=0; i < 4; i++) {W[j][i]=inv_mcol(W[j][i]);}}}return W;}  }
class C{  private static void handleRemoteConnectionClose(final ProtonConnection con,final AsyncResult<ProtonConnection> res){  if (res.succeeded()) {    LOG.info("client [{}] closed connection",con.getRemoteContainer());  } else {    LOG.info("client [{}] closed connection with error",con.getRemoteContainer(),res.cause());  }  con.close();}  }
class C{  static BufferedImage gaussianBlur(BufferedImage src,BufferedImage dst,int radius){  int width=src.getWidth();  int height=src.getHeight();  if (dst == null || dst.getWidth() != width || dst.getHeight() != height || src.getType() != dst.getType()) {    dst=createColorModelCompatibleImage(src);  }  float[] kernel=createGaussianKernel(radius);  if (src.getType() == BufferedImage.TYPE_INT_ARGB) {    int[] srcPixels=new int[width * height];    int[] dstPixels=new int[width * height];    getPixels(src,0,0,width,height,srcPixels);    blur(srcPixels,dstPixels,width,height,kernel,radius);    blur(dstPixels,srcPixels,height,width,kernel,radius);    setPixels(dst,0,0,width,height,srcPixels);  } else   if (src.getType() == BufferedImage.TYPE_BYTE_GRAY) {    byte[] srcPixels=new byte[width * height];    byte[] dstPixels=new byte[width * height];    getPixels(src,0,0,width,height,srcPixels);    blur(srcPixels,dstPixels,width,height,kernel,radius);    blur(dstPixels,srcPixels,height,width,kernel,radius);    setPixels(dst,0,0,width,height,srcPixels);  } else {    throw new IllegalArgumentException("EffectUtils.gaussianBlur() src image is not a supported type, type=[" + src.getType() + "]");  }  return dst;}  }
class C{  public Builder withPreSchedulingLoopHook(Action0 preHook){  this.preHook=preHook;  return this;}  }
class C{  public void testFinished(Description description) throws Exception {}  }
class C{  public String format(InputDocument doc,boolean collectAnalysis) throws Exception {  if (testDoc != null)   throw new IllegalArgumentException("can't call format > once");  originalDoc=doc;  originalTokenToNodeMap=indexTree(doc.tree);  originalTokens=doc.tokens;  this.testDoc=InputDocument.dup(doc);  output=new StringBuilder();  this.realTokens=getRealTokens(testDoc.tokens);  wipeCharPositionInfoAndWhitespaceTokens(testDoc.tokens);  wsClassifier=new kNNClassifier(corpus,wsFeatures,corpus.injectWhitespace);  hposClassifier=new kNNClassifier(corpus,hposFeatures,corpus.hpos);  analysis=new Vector<>(testDoc.tokens.size());  analysis.setSize(testDoc.tokens.size());  if (tokenToNodeMap == null) {    tokenToNodeMap=indexTree(testDoc.tree);  }  WritableToken firstToken=(WritableToken)testDoc.tokens.getNextRealToken(-1);  String prefix=originalTokens.getText(Interval.of(0,firstToken.getTokenIndex()));  charPosInLine=firstToken.getCharPositionInLine() + firstToken.getText().length() + 1;  line=Tool.count(prefix,'\n') + 1;  output.append(prefix);  IdentifyOversizeLists splitter=new IdentifyOversizeLists(corpus,testDoc.tokens,tokenToNodeMap);  ParseTreeWalker.DEFAULT.walk(splitter,testDoc.tree);  tokenToListInfo=splitter.tokenToListInfo;  realTokens=getRealTokens(testDoc.tokens);  for (int i=Trainer.ANALYSIS_START_TOKEN_INDEX; i < realTokens.size(); i++) {    int tokenIndexInStream=realTokens.get(i).getTokenIndex();    processToken(i,tokenIndexInStream,collectAnalysis);  }  releaseMemory();  return output.toString();}  }
class C{  public void store(Offset val){  SimulatedMemory.setWord(this,val.value);}  }
class C{  public String leftString(final int length){  if (length <= 0) {    return "";  } else   if (length >= size) {    return new String(buffer,0,size);  } else {    return new String(buffer,0,length);  }}  }
class C{  protected AggregateSource toAggregateSource(PlanNode input,GroupByList groupByList,List<ExpressionNode> projects) throws StandardException {  List<ExpressionNode> groupBy=new ArrayList<>();  if (groupByList != null) {    if (groupByList.isRollup()) {      throw new UnsupportedGroupByRollupException();    }    for (    GroupByColumn groupByColumn : groupByList) {      groupBy.add(toOrderGroupBy(groupByColumn.getColumnExpression(),projects,"GROUP"));    }  }  return new AggregateSource(input,groupBy);}  }
class C{  private void handleLogButtonClick(int idx){  listener.onLogButtonClick(idx);}  }
class C{  public double score(int position){  return results.get(position).getDistance();}  }
class C{  public SelectProcessCommand(final int packetId,final int pid){  super(DebugCommandType.CMD_SELECT_PROCESS,packetId);  addArgument(new DebugMessageIntegerArgument(pid));}  }
class C{  @Override public void protect(Address start,int pages){  if (STATS)   protCounter.inc();  final Address end=start.plus(Conversions.pagesToBytes(pages));  if (VERBOSE) {    Log.write("Protecting [");    Log.write(start);    Log.write(":");    Log.write(end);    Log.writeln("]");  }  lock.acquire();  while (start.LT(end)) {    Address base=slabAlignDown(start);    Address high=end.GT(slabLimit(start)) && !slabLimit(start).isZero() ? slabLimit(start) : end;    Address slab=slabAlignDown(start);    int startChunk=chunkIndex(slab,start);    int endChunk=chunkIndex(slab,chunkAlignUp(high));    byte[] mapped=slabTable(start);    for (int chunk=startChunk; chunk < endChunk; chunk++) {      if (mapped[chunk] == MAPPED) {        Address mmapStart=chunkIndexToAddress(base,chunk);        if (!VM.memory.mprotect(mmapStart,MMAP_CHUNK_BYTES)) {          lock.release();          VM.assertions.fail("Mmapper.mprotect failed");        } else {          if (VERBOSE) {            Log.write("    mprotect succeeded at chunk ");            Log.write(chunk);            Log.write("  ");            Log.write(mmapStart);            Log.write(" with len = ");            Log.writeln(MMAP_CHUNK_BYTES);          }        }        mapped[chunk]=PROTECTED;      } else {        if (VM.VERIFY_ASSERTIONS)         VM.assertions._assert(mapped[chunk] == PROTECTED);      }    }    start=high;  }  lock.release();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.671 -0400",hash_original_method="0D94F3DF71E8C7CC6D64706F8523FAA4",hash_generated_method="6ACDB602BAFE9AA1288324277FD88CA1") @Override public String toString(){  return "FileDeleteStrategy[" + name + "]";}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.093 -0500",hash_original_method="734A4379046AFFEB9A4187E967041454",hash_generated_method="4A3E227C5FF338AD6ED94C32D38C4F5B") public static boolean equals(short[] array1,short[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public void appendODataToken(final int position,final ODataToken.ODataTokenKind kind,final char charValue){  ODataToken token=new ODataToken(kind,position,Character.toString(charValue));  this.tokens.add(token);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:08.558 -0500",hash_original_method="9B1172C0C8B31BFAE0D2C93687346AFE",hash_generated_method="E13808B9D761C7FC4EC662B6B98D865E") public TextAppearanceSpan(Context context,int appearance){  this(context,appearance,-1);}  }
class C{  public void rotate(int degree,Component comp){  setImage(mDefaultImage);  if (Math.abs(_scale - 1.0) > .00001) {    int w=(int)Math.ceil(_scale * getIconWidth());    int h=(int)Math.ceil(_scale * getIconHeight());    transformImage(w,h,_transformS,comp);  }  mRotation=0;  degree=degree % 360;  _deg=degree;  if (degree == 0) {    return;  }  double rad=degree * Math.PI / 180.0;  double w=getIconWidth();  double h=getIconHeight();  int width=(int)Math.ceil(Math.abs(h * Math.sin(rad)) + Math.abs(w * Math.cos(rad)));  int heigth=(int)Math.ceil(Math.abs(h * Math.cos(rad)) + Math.abs(w * Math.sin(rad)));  AffineTransform t=null;  if (0 <= degree && degree < 90 || -360 < degree && degree <= -270) {    t=AffineTransform.getTranslateInstance(h * Math.sin(rad),0.0);  } else   if (90 <= degree && degree < 180 || -270 < degree && degree <= -180) {    t=AffineTransform.getTranslateInstance(h * Math.sin(rad) - w * Math.cos(rad),-h * Math.cos(rad));  } else   if (180 <= degree && degree < 270 || -180 < degree && degree <= -90) {    t=AffineTransform.getTranslateInstance(-w * Math.cos(rad),-w * Math.sin(rad) - h * Math.cos(rad));  } else {    t=AffineTransform.getTranslateInstance(0.0,-w * Math.sin(rad));  }  AffineTransform r=AffineTransform.getRotateInstance(rad);  t.concatenate(r);  transformImage(width,heigth,t,comp);  if (comp instanceof PositionableLabel) {    ((PositionableLabel)comp).setDegrees(degree);  }}  }
class C{  public char reverseMap(short glyphID){  for (Iterator i=segments.keySet().iterator(); i.hasNext(); ) {    Segment s=(Segment)i.next();    if (s.hasMap) {      char[] map=(char[])segments.get(s);      for (int c=0; c < map.length; c++) {        if (map[c] == glyphID) {          return (char)(s.startCode + c);        }      }    } else {      Integer idDelta=(Integer)segments.get(s);      int start=s.startCode + idDelta.intValue();      int end=s.endCode + idDelta.intValue();      if (glyphID >= start && glyphID <= end) {        return (char)(glyphID - idDelta.intValue());      }    }  }  return (char)0;}  }
class C{  private void playNote(final int value){  final int noteId=(value & 0xFF00) >>> 8;  final int volume=Math.min(4,(value & 0x00F0) >>> 4);  final int instrumentId=value & 0x000F;  if (volume < 1) {    return;  }  final World world=getCasing().getCasingWorld();  final BlockPos pos=getCasing().getPosition();  final NoteBlockEvent.Play event=new NoteBlockEvent.Play(world,pos,world.getBlockState(pos),noteId,instrumentId);  if (!MinecraftForge.EVENT_BUS.post(event)) {    final int note=event.getVanillaNoteId();    final float pitch=(float)Math.pow(2,(note - 12) / 12.0);    final String sound=INSTRUMENT_SOUND_NAMES[event.instrument.ordinal()];    final EnumFacing facing=Face.toEnumFacing(getFace());    final double x=pos.getX() + 0.5 + facing.getFrontOffsetX() * 0.6;    final double y=pos.getY() + 0.5 + facing.getFrontOffsetY() * 0.6;    final double z=pos.getZ() + 0.5 + facing.getFrontOffsetZ() * 0.6;    world.playSoundEffect(x,y,z,sound,volume,pitch);    final MessageParticleEffect message=new MessageParticleEffect(world,EnumParticleTypes.NOTE,x,y,z);    final NetworkRegistry.TargetPoint target=Network.getTargetPoint(world,x,y,z,Network.RANGE_LOW);    Network.INSTANCE.getWrapper().sendToAllAround(message,target);  }}  }
class C{  public void resetZoom(){  Iterator<FileFragment> entries=mCachedFragments.values().iterator();  while (entries.hasNext()) {    FileFragment fileFragment=entries.next();    if (fileFragment instanceof PreviewImageFragment) {      ((PreviewImageFragment)fileFragment).getImageView().resetZoom();    }  }}  }
class C{  protected void removeUnusedGrants(Iterator grants){  while (grants.hasNext()) {    DLockGrantToken grant=(DLockGrantToken)grants.next();    removeGrantIfUnused(grant);  }}  }
class C{  public void flushStyleSheets(){  String uri=_uac.getBaseURL();  StylesheetInfo info=new StylesheetInfo();  info.setUri(uri);  info.setOrigin(StylesheetInfo.AUTHOR);  if (_stylesheetFactory.containsStylesheet(uri)) {    _stylesheetFactory.removeCachedStylesheet(uri);    XRLog.cssParse("Removing stylesheet '" + uri + "' from cache by request.");  } else {    XRLog.cssParse("Requested removing stylesheet '" + uri + "', but it's not in cache.");  }}  }
class C{  public static <T>T splitEachLine(File self,Pattern pattern,@ClosureParams(value=FromString.class,options={"List<String>","String[]"},conflictResolutionStrategy=PickFirstResolver.class) Closure<T> closure) throws IOException {  return IOGroovyMethods.splitEachLine(newReader(self),pattern,closure);}  }
class C{  public String addStepsForAddingSessionsToCG(Workflow workflow,String waitFor,URI cgURI,List<URI> volumeListToAdd,String replicationGroup,String taskId) throws InternalException {  log.info("addStepsForAddingSessionsToCG {}",cgURI);  List<Volume> volumes=ControllerUtils.queryVolumesByIterativeQuery(_dbClient,volumeListToAdd);  if (volumes.isEmpty() || !ControllerUtils.isVmaxVolumeUsing803SMIS(volumes.get(0),_dbClient) || !volumes.get(0).isVmax3Volume(_dbClient)) {    return waitFor;  }  URI storage=volumes.get(0).getStorageController();  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storage);  if (checkIfAnyVolumesHaveSnapshotSessions(volumes)) {    log.info("Adding snapshot session steps for adding volumes");    waitFor=addSnapshotSessionsToReplicationGroupStep(workflow,waitFor,storageSystem,volumes,cgURI);  }  return waitFor;}  }
class C{  private final boolean lookahead(String s,int n){  boolean isToken;  if ((m_queueMark + n) <= m_ops.getTokenQueueSize()) {    String lookahead=(String)m_ops.m_tokenQueue.elementAt(m_queueMark + (n - 1));    isToken=(lookahead != null) ? lookahead.equals(s) : (s == null);  } else {    isToken=(null == s);  }  return isToken;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  protected void addLayout(List<LabelLayout> layoutList,String key,Offset... offsets){  if (offsets.length % 2 != 0) {    String msg=Logging.getMessage("generic.ArrayInvalidLength",offsets.length);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  LabelLayout layout=new LabelLayout(key);  for (int i=0; i < offsets.length; i+=2) {    Offset offset=offsets[i];    Offset hotspot=offsets[i + 1];    layout.add(offset,hotspot);  }  layoutList.add(layout);}  }
class C{  public void awaitCompletion(long timeoutSecs) throws InterruptedException {  long end=System.nanoTime() + timeoutSecs * 1000 * 1000000L;  for (  Thread t : threads) {    long time=System.nanoTime();    if (time < end) {      t.join(((end - time) / 1000000),(int)((end - time) % 1000000));    }  }  check(numthreads,numthreads,0);}  }
class C{  public Builder textColor(int textColor){  this.textColor=textColor;  return this;}  }
class C{  @Override public DriverTask deleteConsistencyGroupSnapshot(List<VolumeSnapshot> snapshots){  LOG.info("Deleting consistency group snapshot");  DellSCDriverTask task=new DellSCDriverTask("deleteConsistencyGroupSnapshot");  StringBuilder errBuffer=new StringBuilder();  int deletedCount=0;  for (  VolumeSnapshot snapshot : snapshots) {    DriverTask subTask=snapshotHelper.deleteVolumeSnapshot(snapshot);    if (subTask.getStatus() == TaskStatus.FAILED) {      errBuffer.append(String.format("%s%n",subTask.getMessage()));    } else {      deletedCount++;    }  }  task.setMessage(errBuffer.toString());  if (deletedCount == snapshots.size()) {    task.setStatus(TaskStatus.READY);  } else   if (deletedCount == 0) {    task.setStatus(TaskStatus.FAILED);  } else {    task.setStatus(TaskStatus.PARTIALLY_FAILED);  }  return task;}  }
class C{  public ConnectionFactory lookupConnectionFactory(String name) throws JMSException, NamingException {  return lookupConnectionFactoryFromJNDI(name == null ? Config.parms.getString("cf") : name);}  }
class C{  public void addAdditionalRole(AdditionalRole additionalRole){  getAdditionalRoles().add(additionalRole);}  }
class C{  private static boolean isFinal(Class<?> c){  return (c.getModifiers() & Modifier.FINAL) != 0;}  }
class C{  void displayPolicyEntryDialog(boolean edit){  int listIndex=0;  PolicyEntry entries[]=null;  TaggedList prinList=new TaggedList(3,false);  prinList.getAccessibleContext().setAccessibleName(PolicyTool.getMessage("Principal.List"));  prinList.addMouseListener(new EditPrinButtonListener(tool,tw,this,edit));  TaggedList permList=new TaggedList(10,false);  permList.getAccessibleContext().setAccessibleName(PolicyTool.getMessage("Permission.List"));  permList.addMouseListener(new EditPermButtonListener(tool,tw,this,edit));  Point location=tw.getLocationOnScreen();  setLayout(new GridBagLayout());  setResizable(true);  if (edit) {    entries=tool.getEntry();    JList policyList=(JList)tw.getComponent(ToolWindow.MW_POLICY_LIST);    listIndex=policyList.getSelectedIndex();    LinkedList<PolicyParser.PrincipalEntry> principals=entries[listIndex].getGrantEntry().principals;    for (int i=0; i < principals.size(); i++) {      String prinString=null;      PolicyParser.PrincipalEntry nextPrin=principals.get(i);      prinList.addTaggedItem(PrincipalEntryToUserFriendlyString(nextPrin),nextPrin);    }    Vector<PolicyParser.PermissionEntry> permissions=entries[listIndex].getGrantEntry().permissionEntries;    for (int i=0; i < permissions.size(); i++) {      String permString=null;      PolicyParser.PermissionEntry nextPerm=permissions.elementAt(i);      permList.addTaggedItem(ToolDialog.PermissionEntryToUserFriendlyString(nextPerm),nextPerm);    }  }  JLabel label=new JLabel();  tw.addNewComponent(this,label,PE_CODEBASE_LABEL,0,0,1,1,0.0,0.0,GridBagConstraints.BOTH,ToolWindow.R_PADDING);  JTextField tf;  tf=(edit ? new JTextField(entries[listIndex].getGrantEntry().codeBase) : new JTextField());  ToolWindow.configureLabelFor(label,tf,"CodeBase.");  tf.setPreferredSize(new Dimension(tf.getPreferredSize().width,TEXTFIELD_HEIGHT));  tf.getAccessibleContext().setAccessibleName(PolicyTool.getMessage("Code.Base"));  tw.addNewComponent(this,tf,PE_CODEBASE_TEXTFIELD,1,0,1,1,1.0,0.0,GridBagConstraints.BOTH);  label=new JLabel();  tw.addNewComponent(this,label,PE_SIGNEDBY_LABEL,0,1,1,1,0.0,0.0,GridBagConstraints.BOTH,ToolWindow.R_PADDING);  tf=(edit ? new JTextField(entries[listIndex].getGrantEntry().signedBy) : new JTextField());  ToolWindow.configureLabelFor(label,tf,"SignedBy.");  tf.setPreferredSize(new Dimension(tf.getPreferredSize().width,TEXTFIELD_HEIGHT));  tf.getAccessibleContext().setAccessibleName(PolicyTool.getMessage("Signed.By."));  tw.addNewComponent(this,tf,PE_SIGNEDBY_TEXTFIELD,1,1,1,1,1.0,0.0,GridBagConstraints.BOTH);  JPanel panel=new JPanel();  panel.setLayout(new GridBagLayout());  JButton button=new JButton();  ToolWindow.configureButton(button,"Add.Principal");  button.addActionListener(new AddPrinButtonListener(tool,tw,this,edit));  tw.addNewComponent(panel,button,PE_ADD_PRIN_BUTTON,0,0,1,1,100.0,0.0,GridBagConstraints.HORIZONTAL);  button=new JButton();  ToolWindow.configureButton(button,"Edit.Principal");  button.addActionListener(new EditPrinButtonListener(tool,tw,this,edit));  tw.addNewComponent(panel,button,PE_EDIT_PRIN_BUTTON,1,0,1,1,100.0,0.0,GridBagConstraints.HORIZONTAL);  button=new JButton();  ToolWindow.configureButton(button,"Remove.Principal");  button.addActionListener(new RemovePrinButtonListener(tool,tw,this,edit));  tw.addNewComponent(panel,button,PE_REMOVE_PRIN_BUTTON,2,0,1,1,100.0,0.0,GridBagConstraints.HORIZONTAL);  tw.addNewComponent(this,panel,PE_PANEL0,1,2,1,1,0.0,0.0,GridBagConstraints.HORIZONTAL,ToolWindow.LITE_BOTTOM_PADDING);  label=new JLabel();  tw.addNewComponent(this,label,PE_PRIN_LABEL,0,3,1,1,0.0,0.0,GridBagConstraints.BOTH,ToolWindow.R_BOTTOM_PADDING);  JScrollPane scrollPane=new JScrollPane(prinList);  ToolWindow.configureLabelFor(label,scrollPane,"Principals.");  tw.addNewComponent(this,scrollPane,PE_PRIN_LIST,1,3,3,1,0.0,prinList.getVisibleRowCount(),GridBagConstraints.BOTH,ToolWindow.BOTTOM_PADDING);  panel=new JPanel();  panel.setLayout(new GridBagLayout());  button=new JButton();  ToolWindow.configureButton(button,".Add.Permission");  button.addActionListener(new AddPermButtonListener(tool,tw,this,edit));  tw.addNewComponent(panel,button,PE_ADD_PERM_BUTTON,0,0,1,1,100.0,0.0,GridBagConstraints.HORIZONTAL);  button=new JButton();  ToolWindow.configureButton(button,".Edit.Permission");  button.addActionListener(new EditPermButtonListener(tool,tw,this,edit));  tw.addNewComponent(panel,button,PE_EDIT_PERM_BUTTON,1,0,1,1,100.0,0.0,GridBagConstraints.HORIZONTAL);  button=new JButton();  ToolWindow.configureButton(button,"Remove.Permission");  button.addActionListener(new RemovePermButtonListener(tool,tw,this,edit));  tw.addNewComponent(panel,button,PE_REMOVE_PERM_BUTTON,2,0,1,1,100.0,0.0,GridBagConstraints.HORIZONTAL);  tw.addNewComponent(this,panel,PE_PANEL1,0,4,2,1,0.0,0.0,GridBagConstraints.HORIZONTAL,ToolWindow.LITE_BOTTOM_PADDING);  scrollPane=new JScrollPane(permList);  tw.addNewComponent(this,scrollPane,PE_PERM_LIST,0,5,3,1,0.0,permList.getVisibleRowCount(),GridBagConstraints.BOTH,ToolWindow.BOTTOM_PADDING);  panel=new JPanel();  panel.setLayout(new GridBagLayout());  JButton okButton=new JButton(PolicyTool.getMessage("Done"));  okButton.addActionListener(new AddEntryDoneButtonListener(tool,tw,this,edit));  tw.addNewComponent(panel,okButton,PE_DONE_BUTTON,0,0,1,1,0.0,0.0,GridBagConstraints.VERTICAL,ToolWindow.LR_PADDING);  JButton cancelButton=new JButton(PolicyTool.getMessage("Cancel"));  ActionListener cancelListener=new CancelButtonListener(this);  cancelButton.addActionListener(cancelListener);  tw.addNewComponent(panel,cancelButton,PE_CANCEL_BUTTON,1,0,1,1,0.0,0.0,GridBagConstraints.VERTICAL,ToolWindow.LR_PADDING);  tw.addNewComponent(this,panel,PE_PANEL2,0,6,2,1,0.0,0.0,GridBagConstraints.VERTICAL);  getRootPane().setDefaultButton(okButton);  getRootPane().registerKeyboardAction(cancelListener,escKey,JComponent.WHEN_IN_FOCUSED_WINDOW);  pack();  setLocationRelativeTo(tw);  setVisible(true);}  }
class C{  public boolean isOperatorSourceHovered(){  return operatorSourceHovered;}  }
class C{  private void normalizeToEnvCentre(Coordinate n00,Coordinate n01,Coordinate n10,Coordinate n11,Coordinate normPt){  double minX0=n00.x < n01.x ? n00.x : n01.x;  double minY0=n00.y < n01.y ? n00.y : n01.y;  double maxX0=n00.x > n01.x ? n00.x : n01.x;  double maxY0=n00.y > n01.y ? n00.y : n01.y;  double minX1=n10.x < n11.x ? n10.x : n11.x;  double minY1=n10.y < n11.y ? n10.y : n11.y;  double maxX1=n10.x > n11.x ? n10.x : n11.x;  double maxY1=n10.y > n11.y ? n10.y : n11.y;  double intMinX=minX0 > minX1 ? minX0 : minX1;  double intMaxX=maxX0 < maxX1 ? maxX0 : maxX1;  double intMinY=minY0 > minY1 ? minY0 : minY1;  double intMaxY=maxY0 < maxY1 ? maxY0 : maxY1;  double intMidX=(intMinX + intMaxX) / 2.0;  double intMidY=(intMinY + intMaxY) / 2.0;  normPt.x=intMidX;  normPt.y=intMidY;  n00.x-=normPt.x;  n00.y-=normPt.y;  n01.x-=normPt.x;  n01.y-=normPt.y;  n10.x-=normPt.x;  n10.y-=normPt.y;  n11.x-=normPt.x;  n11.y-=normPt.y;}  }
class C{  public boolean isPlainText(){  return plainText;}  }
class C{  public boolean isInMigration(){  return isInMigration;}  }
class C{  private void matchX509CRLs(CRLSelector selector,Collection<CRL> matches){  for (  Object obj : crlIssuers.values()) {    if (obj instanceof X509CRL) {      X509CRL crl=(X509CRL)obj;      if (selector.match(crl)) {        matches.add(crl);      }    } else {      @SuppressWarnings("unchecked") List<X509CRL> list=(List<X509CRL>)obj;      for (      X509CRL crl : list) {        if (selector.match(crl)) {          matches.add(crl);        }      }    }  }}  }
class C{  public String toString(){  return errString;}  }
class C{  public String type(){  return type;}  }
class C{  private void doubleTriangle(Graph graph){  List<Node> nodes=graph.getNodes();  for (  Node B : nodes) {    List<Node> intoBArrows=graph.getNodesInTo(B,Endpoint.ARROW);    List<Node> intoBCircles=graph.getNodesInTo(B,Endpoint.CIRCLE);    List<Node> possA=new LinkedList<>(intoBArrows);    List<Node> possC=new LinkedList<>(intoBArrows);    for (    Node D : intoBCircles) {      for (      Node A : possA) {        for (        Node C : possC) {          if (C == A) {            continue;          }          if (!graph.isAdjacentTo(A,D) || !graph.isAdjacentTo(C,D)) {            continue;          }          if (graph.isDefCollider(A,D,C)) {            continue;          }          if (!isArrowpointAllowed(graph,D,B)) {            continue;          }          graph.setEndpoint(D,B,Endpoint.ARROW);          changeFlag=true;        }      }    }  }}  }
class C{  public boolean isSaveAllEnabled(){  if (text == null || text.isDisposed()) {    return false;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:07.477 -0500",hash_original_method="FE7A9140417CA4AD355B5E4C1351F0BC",hash_generated_method="DD4748BB53D7843472D4C3EC86AF1A5A") public Builder addVertexType(Element e,int size) throws IllegalStateException {  if (mVertexTypeCount >= mVertexTypes.length) {    throw new IllegalStateException("Max vertex types exceeded.");  }  mVertexTypes[mVertexTypeCount]=new Entry();  mVertexTypes[mVertexTypeCount].t=null;  mVertexTypes[mVertexTypeCount].e=e;  mVertexTypes[mVertexTypeCount].size=size;  mVertexTypeCount++;  return this;}  }
class C{  public static <K,V>HashMap<K,V> hashMap(int initialCapacity){  return new HashMap<K,V>(initialCapacity);}  }
class C{  final public void enable_tracing(){}  }
class C{  @SuppressWarnings("unchecked") public synchronized E firstElement(){  if (elementCount > 0) {    return (E)elementData[0];  }  throw new NoSuchElementException();}  }
class C{  public void add(AppInfo info){  if (mAppFilter != null && !mAppFilter.shouldShowApp(info.componentName)) {    return;  }  if (findActivity(data,info.componentName,info.user)) {    return;  }  data.add(info);  added.add(info);}  }
class C{  private void addOperandTreeNodeMenu(final CGraphModel model,final COperandTreeNode treeNode,final NaviNode node,final INaviInstruction instruction,final List<ICodeNodeExtension> extensions){  final INaviCodeNode codeNode=(INaviCodeNode)node.getRawNode();  final INaviModule module=model.getViewContainer().getModules().get(0);  if (treeNode.getType() == ExpressionType.IMMEDIATE_INTEGER && treeNode.getTypeInstanceReferences().isEmpty()) {    addImmediateOperandMenu(treeNode,module.getContent().getSections(),module);  }  if (treeNode.getType() == ExpressionType.REGISTER) {    addRegisterOperandMenu(model,treeNode,instruction,extensions,codeNode);  }  final INaviReplacement replacement=treeNode.getReplacement();  if (!treeNode.getTypeInstanceReferences().isEmpty() && !(replacement instanceof CFunctionReplacement)) {    addInstanceReferenceMenu(model,treeNode);  }  if (replacement instanceof CFunctionReplacement) {    addFunctionOperandMenu(model,replacement);  }}  }
class C{  public QuickAdapter(Context context,int layoutResId,List<T> data){  super(context,layoutResId,data);}  }
class C{  @Before("serviceMethods()") public void checkPermission(JoinPoint joinPoint){  MethodSignature methodSignature=(MethodSignature)joinPoint.getSignature();  Method method=methodSignature.getMethod();  List<NamespacePermission> namespacePermissions=new ArrayList<>();  if (method.isAnnotationPresent(NamespacePermissions.class)) {    namespacePermissions.addAll(Arrays.asList(method.getAnnotation(NamespacePermissions.class).value()));  } else   if (method.isAnnotationPresent(NamespacePermission.class)) {    namespacePermissions.add(method.getAnnotation(NamespacePermission.class));  }  if (!namespacePermissions.isEmpty()) {    String[] parameterNames=methodSignature.getParameterNames();    Object[] args=joinPoint.getArgs();    Map<String,Object> variables=new HashMap<>();    for (int i=0; i < parameterNames.length; i++) {      variables.put(parameterNames[i],args[i]);    }    List<AccessDeniedException> accessDeniedExceptions=new ArrayList<>();    for (    NamespacePermission namespacePermission : namespacePermissions) {      for (      String field : namespacePermission.fields()) {        try {          namespaceSecurityHelper.checkPermission(spelExpressionHelper.evaluate(field,Object.class,variables),namespacePermission.permissions());        } catch (        AccessDeniedException accessDeniedException) {          accessDeniedExceptions.add(accessDeniedException);        }      }    }    if (!accessDeniedExceptions.isEmpty()) {      throw namespaceSecurityHelper.getAccessDeniedException(accessDeniedExceptions);    }  }}  }
class C{  public static IgniteState state(){  return IgnitionEx.state();}  }
class C{  private boolean verifyGhostBitsClear(){  for (int i=numWords; i < bits.length; i++) {    if (bits[i] != 0)     return false;  }  if ((numBits & 0x3f) == 0)   return true;  long mask=-1L << numBits;  return (bits[numWords - 1] & mask) == 0;}  }
class C{  private void fillTable(ExampleTable table,Attribute attribute,Peak[] values) throws OperatorException {  DataRowReader reader=table.getDataRowReader();  int k=0;  while (reader.hasNext()) {    DataRow dataRow=reader.next();    dataRow.set(attribute,values[k++].getMagnitude());    checkForStop();  }}  }
class C{  private static void CallNonvirtualVoidMethod(JNIEnvironment env,int objJREF,int classJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualVoidMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    JNIHelpers.invokeWithDotDotVarArg(obj,methodID,TypeReference.Void,true);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  private List<String> checkConfigList(Configuration config,String name){  String peerIPs=config.getConfig(name);  ArrayList<String> peers=new ArrayList<String>();  if (peerIPs != null) {    for (    String ip : StringUtils.split(peerIPs,",")) {      peers.add(ip);    }  }  return peers;}  }
class C{  public boolean hasRel(){  return getRel() != null;}  }
class C{  public static void loadHosts(TestEnvironment cloudstore,int numHosts,Map<HostConfiguration,Double> hostConfigurations,int numDatastores,IntegerDistribution numDatastoresDistribution) throws Throwable {  int[] indices=new int[hostConfigurations.size()];  HostConfiguration[] configs=new HostConfiguration[hostConfigurations.size()];  double[] probabilities=new double[hostConfigurations.size()];  int i=0;  for (  Map.Entry<HostConfiguration,Double> entry : hostConfigurations.entrySet()) {    indices[i]=i;    configs[i]=entry.getKey();    probabilities[i]=entry.getValue();    i++;  }  EnumeratedIntegerDistribution configDistribution=new EnumeratedIntegerDistribution(indices,probabilities);  for (i=0; i < numHosts; i++) {    HostService.State host=new HostService.State();    host.hostAddress="host" + i;    host.state=HostState.READY;    host.userName="username";    host.password="password";    host.reportedDatastores=new HashSet<>();    int numDatastoresPerHost=numDatastoresDistribution.sample();    assertThat(numDatastoresPerHost >= 0,is(true));    assertThat(numDatastoresPerHost <= numDatastores,is(true));    while (host.reportedDatastores.size() < numDatastoresPerHost) {      int randomInt=random.nextInt(numDatastores);      host.reportedDatastores.add(new UUID(0,randomInt).toString());    }    host.reportedNetworks=new HashSet<>();    host.usageTags=new HashSet<>(Arrays.asList(UsageTag.CLOUD.name()));    int configIndex=configDistribution.sample();    host.cpuCount=configs[configIndex].numCpus;    host.memoryMb=configs[configIndex].memoryMb;    host.documentSelfLink=new UUID(0,i).toString();    Operation result=cloudstore.sendPostAndWait(HostServiceFactory.SELF_LINK,host);    assertThat(result.getStatusCode(),is(200));    logger.debug("Created a host document: {}",Utils.toJson(true,false,host));  }}  }
class C{  public void play(int position) throws TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  LOGD(TAG,"attempting to play media at position " + position + " seconds");  if (mRemoteMediaPlayer == null) {    LOGE(TAG,"Trying to play a video with no active media session");    throw new NoConnectionException();  }  seekAndPlay(position);}  }
class C{  public ClosedHeuristic(IScore sf){  this.scoringFunction=sf;}  }
class C{  private void processAwaitCompletion(final State current,final State patch){  if (current.finishedDeletes != null && current.dataStoreCount.equals(current.finishedDeletes)) {    this.sendSelfPatch(buildPatch(TaskState.TaskStage.FINISHED,null,null));    return;  }  if (current.finishedDeletes != null && current.failedOrCanceledDeletes != null && current.dataStoreCount.equals(current.finishedDeletes + current.failedOrCanceledDeletes)) {    RuntimeException e=new RuntimeException(String.format("Removal failed: %s deletes succeeded, %s deletes failed",current.finishedDeletes,current.failedOrCanceledDeletes));    this.failTask(e);    return;  }  boolean isFirstCheck=current.finishedDeletes == null && current.failedOrCanceledDeletes == null;  if (isFirstCheck || patch.finishedDeletes != null) {    getHost().schedule(null,current.queryPollDelay,TimeUnit.MILLISECONDS);  }  if (patch.failedOrCanceledDeletes != null) {    getHost().schedule(null,current.queryPollDelay,TimeUnit.MILLISECONDS);  }}  }
class C{  public synchronized StringBuffer insert(int index,char[] chars){  insert0(index,chars);  return this;}  }
class C{  public EpsilonBoxDominanceArchive(double[] epsilon){  super(new EpsilonBoxDominanceComparator(epsilon));}  }
class C{  public Iterator iterator(){  return new ZoneIterator(false);}  }
class C{  public static int ENOSTR(){  return Errno.ENOSTR.intValue();}  }
class C{  private void paintMaximizePressed(Graphics2D g,JComponent c,int width,int height){  maximizePainter.paintPressed(g,c,width,height);}  }
class C{  public void removeCapabilitiesListener(Set<ContactId> contacts,CapabilitiesListener listener) throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  if (contacts == null || contacts.isEmpty()) {    throw new RcsIllegalArgumentException("contacts must not be null or empty!");  }  try {    WeakReference<ICapabilitiesListener> weakRef=mCapabilitiesListeners.remove(listener);    if (weakRef == null) {      return;    }    ICapabilitiesListener rcsListener=weakRef.get();    if (rcsListener != null) {      for (      ContactId contact : contacts) {        mApi.removeCapabilitiesListener2(contact,rcsListener);      }    }  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public IntBuffer overflowBuffer(){  byteBuffer.position(PERFDATA_PROLOG_OVERFLOW_OFFSET);  IntBuffer ib=byteBuffer.asIntBuffer();  ib.limit(1);  return ib;}  }
class C{  public SearchRequest source(BytesReference source){  this.source=source;  return this;}  }
class C{  public final static float geocentricLatitude(float lat,float flat){  float f=1.0f - flat;  return (float)Math.atan((f * f) * (float)Math.tan(lat));}  }
class C{  public static List<String> readAbnormalDays(String filename){  LOG.info("Reading abnormal days from " + filename);  List<String> list=new ArrayList<String>();  BufferedReader br=IOUtils.getBufferedReader(filename);  try {    String line=null;    while ((line=br.readLine()) != null) {      list.add(line);    }  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("Cannot read from abnormal days file.");  } finally {    try {      br.close();    } catch (    IOException e) {      e.printStackTrace();      throw new RuntimeException("Cannot close abnormal days file.");    }  }  LOG.info("Number of abnormal days read: " + list.size());  return list;}  }
class C{  private void checkInvalidLogins(Query post,Authorization authorization,JSONObjectWithDefault permissions) throws APIException {  long blockedUntil=permissions.getLong("blockedUntil");  if (blockedUntil != 0) {    if (blockedUntil > Instant.now().getEpochSecond()) {      Log.getLog().info("Blocked ip " + post.getClientHost() + " because of too many invalid login attempts.");      throw new APIException(403,"Too many invalid login attempts. Try again in " + (blockedUntil - Instant.now().getEpochSecond()) + " seconds");    } else {      authorization.setPermission(this,"blockedUntil",0);    }  }  JSONObject invalidLogins=authorization.getAccounting().getRequests(this.getClass().getCanonicalName());  long period=permissions.getLong("periodSeconds",600) * 1000;  int counter=0;  for (  String key : invalidLogins.keySet()) {    if (Long.parseLong(key,10) > System.currentTimeMillis() - period)     counter++;  }  if (counter > permissions.getInt("maxInvalidLogins",10)) {    authorization.setPermission(this,"blockedUntil",Instant.now().getEpochSecond() + permissions.getInt("blockTimeSeconds",120));    throw new APIException(403,"Too many invalid login attempts. Try again in " + permissions.getInt("blockTimeSeconds",120) + " seconds");  }}  }
class C{  public ToStringBuilder append(String fieldName,long value){  style.append(buffer,fieldName,value);  return this;}  }
class C{  private int postDirectory(File dir,OutputStream out,String type){  if (dir.isHidden() && !dir.getName().equals("."))   return (0);  info("Indexing directory " + dir.getPath() + " ("+ dir.listFiles(globFileFilter).length+ " files, depth="+ currentDepth+ ")");  int posted=0;  posted+=postFiles(dir.listFiles(globFileFilter),out,type);  if (recursive > currentDepth) {    for (    File d : dir.listFiles()) {      if (d.isDirectory()) {        currentDepth++;        posted+=postDirectory(d,out,type);        currentDepth--;      }    }  }  return posted;}  }
class C{  @ObjectiveCName("isAnimationAutoDownloadEnabled") public boolean isAnimationAutoDownloadEnabled(){  return modules.getSettingsModule().isAnimationAutoDownloadEnabled();}  }
class C{  protected void drawLinear(Canvas c,LineDataSet dataSet,List<Entry> entries){  int dataSetIndex=mChart.getLineData().getIndexOfDataSet(dataSet);  Transformer trans=mChart.getTransformer(dataSet.getAxisDependency());  float phaseX=mAnimator.getPhaseX();  float phaseY=mAnimator.getPhaseY();  mRenderPaint.setStyle(Paint.Style.STROKE);  Canvas canvas=null;  if (dataSet.isDashedLineEnabled()) {    canvas=mBitmapCanvas;  } else {    canvas=c;  }  Entry entryFrom=dataSet.getEntryForXIndex(mMinX);  Entry entryTo=dataSet.getEntryForXIndex(mMaxX);  int diff=(entryFrom == entryTo) ? 1 : 0;  int minx=Math.max(dataSet.getEntryPosition(entryFrom) - diff,0);  int maxx=Math.min(Math.max(minx + 2,dataSet.getEntryPosition(entryTo) + 1),entries.size());  int range=(maxx - minx) * 4 - 4;  LineBuffer buffer=mLineBuffers[dataSetIndex];  buffer.setPhases(phaseX,phaseY);  buffer.limitFrom(minx);  buffer.limitTo(maxx);  buffer.feed(entries);  trans.pointValuesToPixel(buffer.buffer);  if (dataSet.getColors().size() > 1) {    for (int j=0; j < range; j+=4) {      if (!mViewPortHandler.isInBoundsRight(buffer.buffer[j]))       break;      if (!mViewPortHandler.isInBoundsLeft(buffer.buffer[j + 2]) || (!mViewPortHandler.isInBoundsTop(buffer.buffer[j + 1]) && !mViewPortHandler.isInBoundsBottom(buffer.buffer[j + 3])) || (!mViewPortHandler.isInBoundsTop(buffer.buffer[j + 1]) && !mViewPortHandler.isInBoundsBottom(buffer.buffer[j + 3])))       continue;      mRenderPaint.setColor(dataSet.getColor(j / 4 + minx));      canvas.drawLine(buffer.buffer[j],buffer.buffer[j + 1],buffer.buffer[j + 2],buffer.buffer[j + 3],mRenderPaint);    }  } else {    mRenderPaint.setColor(dataSet.getColor());    canvas.drawLines(buffer.buffer,0,range,mRenderPaint);  }  mRenderPaint.setPathEffect(null);  if (dataSet.isDrawFilledEnabled() && entries.size() > 0) {    drawLinearFill(c,dataSet,entries,minx,maxx,trans);  }}  }
class C{  public DiagnosticsResource diagnostics(){  return diagnostics;}  }
class C{  public ProxySelector proxySelector(){  return proxySelector;}  }
class C{  public int addVertex(){  rows.add(new TIntArrayList(10));  if (commonNeighbors != null)   commonNeighbors.add(new TIntIntHashMap());  return rows.size() - 1;}  }
class C{  public static Color determineBackgroundColor(final INaviInstruction startInstruction,final String trackedRegister,final CInstructionResult result){  Preconditions.checkNotNull(startInstruction,"IE01671: Start instruction argument can not be null");  Preconditions.checkNotNull(trackedRegister,"IE01672: Tracked register argument can not be null");  Preconditions.checkNotNull(result,"IE01673: Result argument can not be null");  if (result.getInstruction() == startInstruction) {    return Color.decode("0x00BF00");  } else   if (result.undefinesAll()) {    return Color.decode("0xB30000");  } else   if (result.clearsTrackedRegister(trackedRegister)) {    return Color.decode("0xA12967");  } else   if (result.undefinesSome()) {    return Color.decode("0xED693F");  } else   if (result.defines()) {    return Color.decode("0xFFCD55");  } else   if (result.updates()) {    return Color.decode("0x5AAB47");  } else   if (result.uses()) {    return Color.decode("0x414142");  } else {    return Color.WHITE;  }}  }
class C{  public void testVocabulary() throws IOException {  assertVocabulary(analyzer,getDataPath("ptlighttestdata.zip"),"ptlight.txt");}  }
class C{  @Override public int read(@NotNull byte[] buf,int offset,int numToRead) throws IOException {  int totalRead=0;  if (entryOffset >= entrySize) {    return -1;  }  if ((numToRead + entryOffset) > entrySize) {    numToRead=(int)(entrySize - entryOffset);  }  if (readBuf != null) {    int sz=(numToRead > readBuf.length) ? readBuf.length : numToRead;    System.arraycopy(readBuf,0,buf,offset,sz);    if (sz >= readBuf.length) {      readBuf=null;    } else {      int newLen=readBuf.length - sz;      byte[] newBuf=new byte[newLen];      System.arraycopy(readBuf,sz,newBuf,0,newLen);      readBuf=newBuf;    }    totalRead+=sz;    numToRead-=sz;    offset+=sz;  }  while (numToRead > 0) {    byte[] rec=buffer.readRecord();    if (rec == null) {      throw new IOException("unexpected EOF with " + numToRead + " bytes unread");    }    int sz=numToRead;    int recLen=rec.length;    if (recLen > sz) {      System.arraycopy(rec,0,buf,offset,sz);      readBuf=new byte[recLen - sz];      System.arraycopy(rec,sz,readBuf,0,recLen - sz);    } else {      sz=recLen;      System.arraycopy(rec,0,buf,offset,recLen);    }    totalRead+=sz;    numToRead-=sz;    offset+=sz;  }  entryOffset+=totalRead;  return totalRead;}  }
class C{  private void handleEmptyAxis(T firstLeft,T firstRight){  if (firstLeft == null) {    mLeftAxisMax=mRightAxisMax;    mLeftAxisMin=mRightAxisMin;  } else   if (firstRight == null) {    mRightAxisMax=mLeftAxisMax;    mRightAxisMin=mLeftAxisMin;  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public TablePrintable(JTable table,JTable.PrintMode printMode,MessageFormat headerFormat,MessageFormat footerFormat){  this.table=table;  header=table.getTableHeader();  colModel=table.getColumnModel();  totalColWidth=colModel.getTotalColumnWidth();  if (header != null) {    hclip.height=header.getHeight();  }  this.printMode=printMode;  this.headerFormat=headerFormat;  this.footerFormat=footerFormat;  headerFont=table.getFont().deriveFont(Font.BOLD,HEADER_FONT_SIZE);  footerFont=table.getFont().deriveFont(Font.PLAIN,FOOTER_FONT_SIZE);}  }
class C{  @Override public boolean onPrepareOptionsMenu(Menu menu){  super.onPrepareOptionsMenu(menu);  MenuItem item;  menu.removeItem(0);  menu.removeItem(1);switch (mMenuMode.getSelectedItemPosition()) {case MENUMODE_SEARCH_KEY:    item=menu.add(0,0,0,"(Search Key)");  break;case MENUMODE_MENU_ITEM:item=menu.add(0,0,0,"Search");item.setAlphabeticShortcut(SearchManager.MENU_KEY);break;case MENUMODE_TYPE_TO_SEARCH:item=menu.add(0,0,0,"(Type-To-Search)");break;case MENUMODE_DISABLED:item=menu.add(0,0,0,"(Disabled)");break;}item=menu.add(0,1,0,"Clear History");return true;}  }
class C{  protected Node newNode(){  return new SVGOMSVGElement();}  }
class C{  private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  init(getName());}  }
class C{  private void updateInit(){  prop.put("init.file-list",prop.getProperty("init.file-list").replaceAll(oldVersion,newVersion));  prop.put("init.version",newVersion);}  }
class C{  public Map<Integer,Double> computeInPlace(double... dataset){  checkArgument(dataset.length > 0,"Cannot calculate quantiles of an empty dataset");  if (containsNaN(dataset)) {    Map<Integer,Double> nanMap=new HashMap<Integer,Double>();    for (    int index : indexes) {      nanMap.put(index,NaN);    }    return unmodifiableMap(nanMap);  }  int[] quotients=new int[indexes.length];  int[] remainders=new int[indexes.length];  int[] requiredSelections=new int[indexes.length * 2];  int requiredSelectionsCount=0;  for (int i=0; i < indexes.length; i++) {    long numerator=(long)indexes[i] * (dataset.length - 1);    int quotient=(int)LongMath.divide(numerator,scale,RoundingMode.DOWN);    int remainder=(int)(numerator - (long)quotient * scale);    quotients[i]=quotient;    remainders[i]=remainder;    requiredSelections[requiredSelectionsCount]=quotient;    requiredSelectionsCount++;    if (remainder != 0) {      requiredSelections[requiredSelectionsCount]=quotient + 1;      requiredSelectionsCount++;    }  }  sort(requiredSelections,0,requiredSelectionsCount);  selectAllInPlace(requiredSelections,0,requiredSelectionsCount - 1,dataset,0,dataset.length - 1);  Map<Integer,Double> ret=new HashMap<Integer,Double>();  for (int i=0; i < indexes.length; i++) {    int quotient=quotients[i];    int remainder=remainders[i];    if (remainder == 0) {      ret.put(indexes[i],dataset[quotient]);    } else {      ret.put(indexes[i],interpolate(dataset[quotient],dataset[quotient + 1],remainder,scale));    }  }  return unmodifiableMap(ret);}  }
class C{  private SignalSystemsData createSignalSystemsAndGroups(SignalsData sd){  SignalSystemsData systems=sd.getSignalSystemsData();  SignalGroupsData groups=sd.getSignalGroupsData();  this.createGroupsAndSystem2(systems,groups);  this.createGroupsAndSystem5(systems,groups);  SignalSystemData sys=systems.getFactory().createSignalSystemData(id3);  systems.addSignalSystemData(sys);  SignalData signal=systems.getFactory().createSignalData(Id.create(id1,Signal.class));  sys.addSignalData(signal);  signal.setLinkId(id23);  signal=systems.getFactory().createSignalData(Id.create(id2,Signal.class));  sys.addSignalData(signal);  signal.setLinkId(id43);  SignalUtils.createAndAddSignalGroups4Signals(groups,sys);  sys=systems.getFactory().createSignalSystemData(id4);  systems.addSignalSystemData(sys);  signal=systems.getFactory().createSignalData(Id.create(id1,Signal.class));  sys.addSignalData(signal);  signal.setLinkId(id34);  signal=systems.getFactory().createSignalData(Id.create(id2,Signal.class));  sys.addSignalData(signal);  signal.setLinkId(id54);  SignalUtils.createAndAddSignalGroups4Signals(groups,sys);  sys=systems.getFactory().createSignalSystemData(id7);  systems.addSignalSystemData(sys);  signal=systems.getFactory().createSignalData(Id.create(id1,Signal.class));  sys.addSignalData(signal);  signal.setLinkId(id27);  signal=systems.getFactory().createSignalData(Id.create(id2,Signal.class));  sys.addSignalData(signal);  signal.setLinkId(id87);  SignalUtils.createAndAddSignalGroups4Signals(groups,sys);  sys=systems.getFactory().createSignalSystemData(id8);  systems.addSignalSystemData(sys);  signal=systems.getFactory().createSignalData(Id.create(id1,Signal.class));  sys.addSignalData(signal);  signal.setLinkId(id78);  signal=systems.getFactory().createSignalData(Id.create(id2,Signal.class));  sys.addSignalData(signal);  signal.setLinkId(id58);  SignalUtils.createAndAddSignalGroups4Signals(groups,sys);  return systems;}  }
class C{  private void closeDataSourceTag(){  buffer.append("</data-source>\n");}  }
class C{  public void addMeta(PageIndex index,Session session){  Table table=index.getTable();  if (SysProperties.CHECK) {    if (!table.isTemporary()) {synchronized (database) {synchronized (this) {          database.verifyMetaLocked(session);        }      }    }  }synchronized (this) {    int type=index instanceof PageDataIndex ? META_TYPE_DATA_INDEX : META_TYPE_BTREE_INDEX;    IndexColumn[] columns=index.getIndexColumns();    StatementBuilder buff=new StatementBuilder();    for (    IndexColumn col : columns) {      buff.appendExceptFirst(",");      int id=col.column.getColumnId();      buff.append(id);      int sortType=col.sortType;      if (sortType != 0) {        buff.append('/');        buff.append(sortType);      }    }    String columnList=buff.toString();    CompareMode mode=table.getCompareMode();    String options=mode.getName() + "," + mode.getStrength()+ ",";    if (table.isTemporary()) {      options+="temp";    }    options+=",";    if (index instanceof PageDelegateIndex) {      options+="d";    }    options+="," + mode.isBinaryUnsigned();    Row row=metaTable.getTemplateRow();    row.setValue(0,ValueInt.get(index.getId()));    row.setValue(1,ValueInt.get(type));    row.setValue(2,ValueInt.get(table.getId()));    row.setValue(3,ValueInt.get(index.getRootPageId()));    row.setValue(4,ValueString.get(options));    row.setValue(5,ValueString.get(columnList));    row.setKey(index.getId() + 1);    metaIndex.add(session,row);  }}  }
class C{  @Override public boolean switchOffFeature(AttributeRole role) throws OperatorException {  Attribute feature=role.getAttribute();  int type=getParameterAsInt(PARAMETER_SKIP_FEATURES_OF_TYPE) + 1;  int exceptionType=getParameterAsInt(PARAMETER_EXCEPT_FEATURES_OF_TYPE);  if (exceptionType == 0) {    return Ontology.ATTRIBUTE_VALUE_TYPE.isA(feature.getValueType(),type);  } else {    return Ontology.ATTRIBUTE_VALUE_TYPE.isA(feature.getValueType(),type) && !Ontology.ATTRIBUTE_VALUE_TYPE.isA(feature.getValueType(),exceptionType);  }}  }
class C{  private void dumpVdcObject(VirtualDataCenter vdc){  log.info("VDC id = {}, ",vdc.getId());  log.info("    shortId {}",vdc.getShortId());  log.info("    version {}",vdc.getVersion());  log.info("    hostCount {}",vdc.getHostCount());  log.info("    local {}",vdc.getLocal());  log.info("    status {}",vdc.getConnectionStatus());}  }
class C{  public void addRecurrenceDates(RecurrenceDates recurrenceDates){  addProperty(recurrenceDates);}  }
class C{  public Element(ElementType type,boolean defaultAttributes){  theType=type;  if (defaultAttributes)   theAtts=new AttributesImpl(type.atts()); else   theAtts=new AttributesImpl();  theNext=null;  preclosed=false;}  }
class C{  public ObjectMatrix1D viewColumn(int column){  checkColumn(column);  int viewSize=this.rows;  int viewZero=this.rowZero;  int viewStride=this.rowStride;  int[] viewOffsets=this.rowOffsets;  int viewOffset=this.offset + _columnOffset(_columnRank(column));  return new SelectedDenseObjectMatrix1D(viewSize,this.elements,viewZero,viewStride,viewOffsets,viewOffset);}  }
class C{  public static short readShort(byte[] array,int offset){  int b0=array[offset + 0] & 0xFF;  int b1=array[offset + 1] & 0xFF;  return (short)((b0 << 8) + (b1 << 0));}  }
class C{  public ByteBufferInputStream(ByteBuffer buffer){  this.buffer=buffer;}  }
class C{  public boolean evaluatedIndividualAvailable(){  return monitor.evaluatedIndividualAvailable();}  }
class C{  @ActivityMethod(name="Heartbeat",version="1.0",heartbeatTimeout="5") public Void heartbeat() throws InterruptedException {  final LongAdder adder=new LongAdder();  final ScheduledExecutorService service=Executors.newScheduledThreadPool(1);  service.scheduleAtFixedRate(null,0,1,TimeUnit.SECONDS);  Thread.sleep(Duration.ofSeconds(10).toMillis());  service.shutdownNow();  return null;}  }
class C{  public FloatMatrix cumulativeSumi(){  float s=0.0f;  for (int i=0; i < length; i++) {    s+=get(i);    put(i,s);  }  return this;}  }
class C{  @Subscribe public void onHardwareWalletEvent(HardwareWalletEvent event) throws GetIdentitiesFailedException {  Logger.getLogger(DeviceService.class.getName()).log(Level.INFO,"Received USB event: {0}",new Object[]{event.getEventType().name()});  Logger.getLogger(DeviceService.class.getName()).log(Level.FINE,"Received USB event message: {0}",new Object[]{event.getMessage()});switch (event.getEventType()) {case SHOW_DEVICE_FAILED:    TrayProcess.handleException(new DeviceFailedException());  System.exit(0);break;case SHOW_DEVICE_DETACHED:resetCachedData();TrayProcess.sessionTimer.stop();break;case SHOW_DEVICE_READY:this.deviceLabel=((Features)event.getMessage().get()).getLabel();break;case SHOW_PIN_ENTRY:PinMatrixRequest request=(PinMatrixRequest)event.getMessage().get();String pin;switch (request.getPinMatrixRequestType()) {case CURRENT:PinPad pinPad=new PinPad();pinPad.setVisible(true);ExecutorService executor=Executors.newSingleThreadExecutor();Future<Object> future=executor.submit(pinPad.getPinData());try {pin=(String)future.get(AgentConstants.PIN_WAIT_TIMEOUT,TimeUnit.SECONDS);} catch (InterruptedException|ExecutionException|TimeoutException ex) {Logger.getLogger(DeviceService.class.getName()).log(Level.FINE,"Timeout when waiting for PIN.");hardwareWalletService.requestCancel();pinPad.setVisible(false);if (timer != null && timer.isRunning()) {TrayProcess.handleException(new DeviceTimeoutException());}break;}if (AgentConstants.PIN_CANCELLED_MSG.equals(pin)) {hardwareWalletService.requestCancel();break;}hardwareWalletService.providePIN(pin);pinPad.setVisible(false);break;}break;case SHOW_PASSPHRASE_ENTRY:PassphraseDialog passphraseDialog=new PassphraseDialog();passphraseDialog.setVisible(true);ExecutorService passExecutor=Executors.newSingleThreadExecutor();Future<Object> passFuture=passExecutor.submit(passphraseDialog.getPassphraseData());try {passphrase=(String)passFuture.get(AgentConstants.PASSPHRASE_WAIT_TIMEOUT,TimeUnit.SECONDS);} catch (InterruptedException|ExecutionException|TimeoutException ex) {Logger.getLogger(DeviceService.class.getName()).log(Level.FINE,"Timeout when waiting for passphrase.");hardwareWalletService.requestCancel();passphraseDialog.setVisible(false);if (timer != null && timer.isRunning()) {TrayProcess.handleException(new DeviceTimeoutException());}break;}if (AgentConstants.PASSPHRASE_CANCELLED_MSG.equals(passphrase)) {hardwareWalletService.requestCancel();break;}hardwareWalletService.providePassphrase(passphrase);passphraseDialog.setVisible(false);break;case PUBLIC_KEY_FOR_IDENTITY:PublicKey pubKey=(PublicKey)event.getMessage().get();String openSSHkey;try {byte[] rawPub=pubKey.getHdNodeType().get().getPublicKey().get();String curveName=AgentUtils.readSetting(settings,AgentConstants.SETTINGS_KEY_CURVE_NAME,AgentConstants.CURVE_NAME_NISTP256);if (rawPub[0] == 0x00) {if (!AgentConstants.CURVE_NAME_ED25519.equals(curveName)) {throw new RuntimeException(LocalizedLogger.getLocalizedMessage("INVALID_KEY_MISMATCH",curveName,AgentConstants.CURVE_NAME_ED25519));}Logger.getLogger(DeviceService.class.getName()).log(Level.FINE,"Device returned public key curve: {0}",AgentConstants.CURVE_NAME_ED25519);openSSHkey=IdentityUtils.serializeSSHKeyFromEd25519(rawPub);} else {if (!AgentConstants.CURVE_NAME_NISTP256.equals(curveName)) {throw new RuntimeException(LocalizedLogger.getLocalizedMessage("INVALID_KEY_MISMATCH",curveName,AgentConstants.CURVE_NAME_NISTP256));}Logger.getLogger(DeviceService.class.getName()).log(Level.FINE,"Device returned public key curve: {0}",AgentConstants.CURVE_NAME_NISTP256);ECPublicKey publicKey=IdentityUtils.decodeNISTP256PublicKeyFromBytes(rawPub);String decompressedSSHKey=IdentityUtils.serializeSSHKeyFromNistp256(publicKey);openSSHkey=IdentityUtils.printOpenSSHkeyNistp256(decompressedSSHKey,null);}Logger.getLogger(DeviceService.class.getName()).log(Level.FINE,"SSH public key: {0}",openSSHkey);setDeviceKey(openSSHkey);getAsyncKeyData().setDeviceData(openSSHkey);Logger.getLogger(DeviceService.class.getName()).log(Level.INFO,"Operation {0} executed successfully","SSH2_AGENT_GET_IDENTITIES");} catch (NoSuchAlgorithmException|InvalidKeySpecException|RuntimeException e) {TrayProcess.createError(LocalizedLogger.getLocalizedMessage("INVALID_KEY_OR_ALG",e.getLocalizedMessage()),true,e);}AgentUtils.restartSessionTimer();break;case SIGNED_IDENTITY:SignedIdentity signature=(SignedIdentity)event.getMessage().get();signedData=signature.getSignatureBytes().get();Logger.getLogger(DeviceService.class.getName()).log(Level.FINE,"Signature: {0}",Utils.HEX.encode(signedData));getAsyncSignData().setDeviceData(signedData);Logger.getLogger(DeviceService.class.getName()).log(Level.INFO,"Operation {0} executed successfully","SSH2_AGENT_SIGN_REQUEST");AgentUtils.restartSessionTimer();break;case SHOW_OPERATION_FAILED:getAsyncSignData().setDeviceData(AgentConstants.SIGN_FAILED_BYTE);getAsyncKeyData().setDeviceData(AgentConstants.GET_IDENTITIES_FAILED_STRING);Failure failure=(Failure)event.getMessage().get();switch (failure.getType()) {case PIN_INVALID:Logger.getLogger(DeviceService.class.getName()).log(Level.FINE,"PIN_INVALID");exceptionKey=ExceptionHandler.getErrorKeyForException(new InvalidPinException());TrayProcess.createWarning(LocalizedLogger.getLocalizedMessage(exceptionKey));break;case ACTION_CANCELLED:Logger.getLogger(DeviceService.class.getName()).log(Level.FINE,"ACTION_CANCELLED");getAsyncSignData().setDeviceData(AgentConstants.SIGN_CANCELLED_BYTE);break;case PIN_CANCELLED:Logger.getLogger(DeviceService.class.getName()).log(Level.FINE,"PIN_CANCELLED");break;case NOT_INITIALIZED:if (!AgentConstants.PASSPHRASE_CANCELLED_MSG.equals(passphrase)) {TrayProcess.createError(LocalizedLogger.getLocalizedMessage("NOT_INITIALIZED"),false,null);}break;default :}if (timer != null && timer.isRunning()) {timer.stop();}break;default :}}  }
class C{  protected List<ILeafNode> filterLeafsWithKeywordInsteadOfComma(EObject semanticElement,String stopAtKeyword,ICompositeNode node,final String... keywords){  List<ILeafNode> filteredLeaves=null;  for (BidiTreeIterator<INode> iter=node.getAsTreeIterable().iterator(); iter.hasNext(); ) {    INode child=iter.next();    EObject childSemElement=child.getSemanticElement();    if (child != node && childSemElement != null && childSemElement != semanticElement) {      iter.prune();    } else     if (child instanceof ILeafNode) {      ILeafNode leaf=(ILeafNode)child;      EObject grammarElement=leaf.getGrammarElement();      if (grammarElement instanceof Keyword) {        String value=((Keyword)grammarElement).getValue();        if (stopAtKeyword.equals(value)) {          break;        }        if (Arrays.binarySearch(keywords,value) >= 0) {          if (grammarElement.eContainer() instanceof Alternatives) {            AbstractElement first=((Alternatives)(grammarElement.eContainer())).getElements().get(0);            boolean inCommaAlternative=(first instanceof Keyword && ",".equals(((Keyword)first).getValue()));            if (inCommaAlternative) {              if (filteredLeaves == null) {                filteredLeaves=new ArrayList<>(5);              }              filteredLeaves.add(leaf);            }          }        }      }    }  }  return filteredLeaves == null ? Collections.emptyList() : filteredLeaves;}  }
class C{  public void populate(ZkDataNode zkDataNode) throws Exception {  Stat stat=null;  String path=zkDataNode.getFQPath();  logger.info("Reading node " + path);  byte[] data=zk.getData(path,false,stat);  zkDataNode.setNodeData(data);  List<String> subFolders=zk.getChildren(path,false);  for (  String folder : subFolders) {    ZkDataNode childNode=new ZkDataNode(zkDataNode,folder);    zkDataNode.addChild(childNode);    populate(childNode);  }  return;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final PullToRefreshBase.Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(PullToRefreshBase.State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(PullToRefreshBase.State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(PullToRefreshBase.State.RESET);}} else if (isTouchEvent && PullToRefreshBase.State.OVERSCROLLING == view.getState()) {view.setState(PullToRefreshBase.State.RESET);}}}  }
class C{  public static int binarySearch(int[] array,int value){  return binarySearch(array,0,array.length,value);}  }
class C{  private void initializeDefault(){  McElieceCCA2KeyGenerationParameters mcCCA2Params=new McElieceCCA2KeyGenerationParameters(new SecureRandom(),new McElieceCCA2Parameters());  init(mcCCA2Params);}  }
class C{  @Override public void close(){  sessionFactory.close();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.HISTORY_ENTRY__INITIAL_STEP:    return getInitialStep();case SexecPackage.HISTORY_ENTRY__DEEP:  return isDeep();case SexecPackage.HISTORY_ENTRY__REGION:if (resolve) return getRegion();return basicGetRegion();case SexecPackage.HISTORY_ENTRY__HISTORY_STEP:return getHistoryStep();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static final boolean isIplUr92IdentityReportMessage(LocoNetMessage m){  return isIplSpecificIdentityReportMessage(m,LnConstants.RE_IPL_MFR_DIGITRAX,LnConstants.RE_IPL_DIGITRAX_HOST_UR92);}  }
class C{  @Override public String toString(){  return prefix + " :: " + name;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected static void assertArgument(final boolean validArg,final String message,final Object... args){  if (!validArg) {    throw new IllegalArgumentException(String.format(message,args));  }}  }
class C{  public RunnableAction(Runnable runnable){  this(runnable,null);}  }
class C{  private Style(int fgColor,int bgColor,Font f,byte transparency,Image im){  this();  this.fgColor=fgColor;  this.bgColor=bgColor;  this.font=f;  this.transparency=transparency;  this.bgImage=im;}  }
class C{  public byte[] adaptFeatures(Map<FeatureCollection,Style> featureCollectionStyleMap,double scaleDenominator){  this.addFeaturesToEncoder(featureCollectionStyleMap,scaleDenominator);  return this.vectorTileEncoder.encode();}  }
class C{  public ReorgExecutionLog(){  fNewNames=new HashMap();  fProcessedElements=new ArrayList();}  }
class C{  public static BufferedImage createImage(ImageProducer producer){  PixelGrabber pg=new PixelGrabber(producer,0,0,-1,-1,null,0,0);  try {    pg.grabPixels();  } catch (  InterruptedException e) {    throw new RuntimeException("Image fetch interrupted");  }  if ((pg.status() & ImageObserver.ABORT) != 0)   throw new RuntimeException("Image fetch aborted");  if ((pg.status() & ImageObserver.ERROR) != 0)   throw new RuntimeException("Image fetch error");  BufferedImage p=new BufferedImage(pg.getWidth(),pg.getHeight(),BufferedImage.TYPE_INT_ARGB);  p.setRGB(0,0,pg.getWidth(),pg.getHeight(),(int[])pg.getPixels(),0,pg.getWidth());  return p;}  }
class C{  public void testStemming() throws Exception {  Reader reader=new StringReader("dibukukannya");  TokenStream stream=new MockTokenizer(MockTokenizer.WHITESPACE,false);  ((Tokenizer)stream).setReader(reader);  stream=tokenFilterFactory("IndonesianStem").create(stream);  assertTokenStreamContents(stream,new String[]{"buku"});}  }
class C{  public static final String vectorToString(List<Object> l){  return listToString(l);}  }
class C{  public static int of(int modifier){  return modifier;}  }
class C{  static int popLength(InputStream stream){  byte[] lengthBytes=new byte[Integer.SIZE / Byte.SIZE];  try {    stream.read(lengthBytes);  } catch (  IOException e) {    log.error("IOException popping length from input stream: ",e);    return -1;  }  ByteBuffer buffer=ByteBuffer.wrap(lengthBytes);  buffer.order(ByteOrder.BIG_ENDIAN);  return buffer.getInt();}  }
class C{  private static byte[] readBytes(InputStream source,int length) throws IOException {  byte[] result=new byte[length];  for (int i=0; i < length; i++) {    int bytik=source.read();    if (bytik == -1) {      return null;    }    result[i]=(byte)bytik;  }  return result;}  }
class C{  protected void doneDownload(){}  }
class C{  public Vertex evaluateMULTIPLY(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  if (!checkArguments(expression,arguments,2,network)) {    return network.createVertex(Primitive.NULL);  }  Vertex left=evaluateExpression(arguments.get(0).getTarget(),variables,network,startTime,maxTime,stack);  Vertex right=evaluateExpression(arguments.get(1).getTarget(),variables,network,startTime,maxTime,stack);  if ((left.getData() instanceof Number) && (right.getData() instanceof Number)) {    return new org.botlibre.tool.Math().instance.multiply(expression,left,right);  }  expression.getNetwork().getBot().log(this,"Invalid numbers for operation",Level.WARNING,expression,left,right);  return network.createVertex(Primitive.NULL);}  }
class C{  @Override public void findAllLocal(String sql,Result<Iterable<Cursor>> result,Object... args){  _kraken.findAllLocal(sql,args,result);}  }
class C{  protected boolean supportsReplication(){  return true;}  }
class C{  public static ContentValues[] values(long restaurantId,Place place){  List<Place.Review> reviews=place.getReviews();  return !reviews.isEmpty() ? values(new ContentValues[reviews.size()],restaurantId,place) : null;}  }
class C{  public void testAddEdge(){  int edge_count=h.getEdgeCount();  int vertex_count=h.getVertexCount();  Pair<Integer> p=new Pair<Integer>(2,3);  assertTrue(h.addEdge('a',p));  assertEquals(edge_count + 1,h.getEdgeCount());  assertEquals(vertex_count + 2,h.getVertexCount());  assertTrue(h.containsEdge('a'));  boolean success=false;  try {    success=h.addEdge('b',null);    fail("Implementation should disallow null pairs/collections");    success=h.addEdge(null,p);    fail("Implementation should disallow null edges");  } catch (  IllegalArgumentException iae) {  }catch (  NullPointerException npe) {    fail("Implementation should actively prevent null edges, pairs, and collections");  }  assertFalse(success);  assertFalse(h.addEdge('a',new Pair<Integer>(2,3)));  assertFalse(h.addEdge('a',p));  try {    success=h.addEdge('a',new Pair<Integer>(3,4));    fail("Implementation should disallow existing edge objects from connecting new pairs/collections");  } catch (  IllegalArgumentException iae) {  }  assertEquals(edge_count + 1,h.getEdgeCount());  assertFalse(h.containsEdge('b'));}  }
class C{  public SocketException(String detailMessage){  super(detailMessage);}  }
class C{  public static void SRC_LINE_NUMBER(int lineNr){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.SRC_LINE_NUMBER(lineNr);  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  @Override protected EClass eStaticClass(){  return N4mfPackage.Literals.EXTENDED_RUNTIME_ENVIRONMENT;}  }
class C{  public static double fractionOfFriendsPriority(double priority,int sharedFriends,int myFriends){  double trustMultiplier;  if (sharedFriends == 0 || myFriends == 0) {    trustMultiplier=EPSILON_TRUST;  } else {    trustMultiplier=sharedFriends / (double)myFriends;  }  return priority * trustMultiplier;}  }
class C{  public void testComplexeUrlInvalid(){  setParameterToInitMockMethod("http://myurl.com/a/b/c/index_2.html",TestSolution.FAILED);  SeoRule01081 test=new SeoRule01081();  test.setProcessResultDataService(mockProcessResultDataService);  test.setTest(mockTest);  ProcessResult processResult=test.processImpl(mockSspHandler);  assertEquals(mockDefiniteResult,processResult);}  }
class C{  public void update(){  if (optimizer == null) {    return;  }  optimizer.updateLocation(this);  for (int i=0; i < this.connections.size(); ) {    Connection con=this.connections.get(i);    NetworkInterface anotherInterface=con.getOtherInterface(this);    assert con.isUp() : "Connection " + con + " was down!";    if (!isWithinRange(anotherInterface)) {      disconnect(con,anotherInterface);      connections.remove(i);    } else {      i++;    }  }  Collection<NetworkInterface> interfaces=optimizer.getNearInterfaces(this);  for (  NetworkInterface i : interfaces) {    connect(i);  }  for (  Connection con : getConnections()) {    con.update();  }}  }
class C{  @Override public Double zscore(final byte[] key,final byte[] member){  checkIsInMultiOrPipeline();  client.zscore(key,member);  final String score=client.getBulkReply();  return (score != null ? new Double(score) : null);}  }
class C{  @Override public void writeAttribute(String name,Object value,String componentPropertyName) throws IOException {  if (name == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"name"));  }  if (value == null) {    return;  }  if (isCdata) {    return;  }  if (containsPassThroughAttribute(name)) {    return;  }  if (name.equalsIgnoreCase("src") && isScriptOrStyle()) {    scriptOrStyleSrc=true;  }  Class valueClass=value.getClass();  if (valueClass == Boolean.class) {    if (Boolean.TRUE.equals(value)) {      attributesBuffer.write(' ');      attributesBuffer.write(name);      attributesBuffer.write("=\"");      attributesBuffer.write(name);      attributesBuffer.write('"');    }  } else {    attributesBuffer.write(' ');    attributesBuffer.write(name);    attributesBuffer.write("=\"");    String val=value.toString();    ensureTextBufferCapacity(val);    HtmlUtils.writeAttribute(attributesBuffer,escapeUnicode,escapeIso,buffer,val,textBuffer,isScriptInAttributeValueEnabled);    attributesBuffer.write('"');  }}  }
class C{  public void onMouseLinkExit(){  log.debug("onMouseLinkExit");  hideToolTip();}  }
class C{  public byte[] remove() throws NoSuchElementException, KeeperException, InterruptedException {  TreeMap<Long,String> orderedChildren;  TimerContext time=stats.time(dir + "_remove");  try {    while (true) {      try {        orderedChildren=orderedChildren(null);      } catch (      KeeperException.NoNodeException e) {        throw new NoSuchElementException();      }      if (orderedChildren.size() == 0)       throw new NoSuchElementException();      for (      String headNode : orderedChildren.values()) {        String path=dir + "/" + headNode;        try {          byte[] data=zookeeper.getData(path,null,null,true);          zookeeper.delete(path,-1,true);          return data;        } catch (        KeeperException.NoNodeException e) {        }      }    }  }  finally {    time.stop();  }}  }
class C{  protected void newPrefix() throws SAXException {  mHandCont.startPrefixMapping(mPref.name,mPref.value);}  }
class C{  public AccountHeaderBuilder withDividerBelowHeader(boolean dividerBelowHeader){  this.mDividerBelowHeader=dividerBelowHeader;  return this;}  }
class C{  private void addWorkListItemsForClasspath(LinkedList<WorkListItem> workList,String path){  if (path == null) {    return;  }  StringTokenizer st=new StringTokenizer(path,File.pathSeparator);  while (st.hasMoreTokens()) {    String entry=st.nextToken();    if (DEBUG) {      System.out.println("System classpath entry: " + entry);    }    addToWorkList(workList,new WorkListItem(classFactory.createFilesystemCodeBaseLocator(entry),false,ICodeBase.Discovered.IN_SYSTEM_CLASSPATH));  }}  }
class C{  public NetView(int size,long viewId){  this.viewId=(int)viewId;  members=new ArrayList<>(size);  this.hashedMembers=new HashSet<>();  shutdownMembers=new HashSet<>();  crashedMembers=Collections.emptySet();  creator=null;  Arrays.fill(failureDetectionPorts,-1);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:02.063 -0500",hash_original_method="14E84A4B1974BF851ED8726736E80E86",hash_generated_method="1C36BBE9907E4DB6EC9677D2355EAD8B") public Geocoder(Context context,Locale locale){  if (locale == null) {    throw new NullPointerException("locale == null");  }  mParams=new GeocoderParams(context,locale);  IBinder b=ServiceManager.getService(Context.LOCATION_SERVICE);  mService=ILocationManager.Stub.asInterface(b);}  }
class C{  protected void registerListeners(){  component.addMouseListener(this);  component.addMouseMotionListener(this);}  }
class C{  public void addNode(PrintData parent){  if (parent == null)   throw new IllegalArgumentException("Parent cannot be null");  if (m_nodes == null)   addRow(false,0);  m_nodes.add(parent);}  }
class C{  public PacketOutputStream writeInt(final int theInt){  assureBufferCapacity(4);  buffer.putInt(theInt);  return this;}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof HessianRemote))   return false;  HessianRemote remote=(HessianRemote)obj;  return url.equals(remote.url);}  }
class C{  private void recordTokenString(Vector targetStrings){  int tokPos=getTokenQueuePosFromMap(m_patternMapSize - 1);  resetTokenMark(tokPos + 1);  if (m_processor.lookahead('(',1)) {    int tok=getKeywordToken(m_processor.m_token);switch (tok) {case OpCodes.NODETYPE_COMMENT:      targetStrings.addElement(PsuedoNames.PSEUDONAME_COMMENT);    break;case OpCodes.NODETYPE_TEXT:  targetStrings.addElement(PsuedoNames.PSEUDONAME_TEXT);break;case OpCodes.NODETYPE_NODE:targetStrings.addElement(PsuedoNames.PSEUDONAME_ANY);break;case OpCodes.NODETYPE_ROOT:targetStrings.addElement(PsuedoNames.PSEUDONAME_ROOT);break;case OpCodes.NODETYPE_ANYELEMENT:targetStrings.addElement(PsuedoNames.PSEUDONAME_ANY);break;case OpCodes.NODETYPE_PI:targetStrings.addElement(PsuedoNames.PSEUDONAME_ANY);break;default :targetStrings.addElement(PsuedoNames.PSEUDONAME_ANY);}} else {if (m_processor.tokenIs('@')) {tokPos++;resetTokenMark(tokPos + 1);}if (m_processor.lookahead(':',1)) {tokPos+=2;}targetStrings.addElement(m_compiler.getTokenQueue().elementAt(tokPos));}}  }
class C{  public static Bitmap loadBitmapFromView(Context context,View v){  Bitmap returnedBitmap=Bitmap.createBitmap(v.getWidth(),v.getHeight(),Bitmap.Config.ARGB_8888);  Canvas c=new Canvas(returnedBitmap);  v.draw(c);  return returnedBitmap;}  }
class C{  public static void addAdditionalExtensionDir(String directory){  additionalExtensionDirs.add(directory);}  }
class C{  private void executeSearch(){  String searchString=searchTextBox.getText().trim();  if (!searchString.isEmpty()) {    SearchCriteria searchCriteria=new SearchCriteria(searchString,caseSensitiveButton.getSelection());    lastSearchResult=searchExecutor.executeSearch(searchCriteria);    processSearchResult(lastSearchResult);  } else {    searchExecutor.clearSearch();    lastSearchResult=null;    searchTextBox.redraw();  }}  }
class C{  public boolean isAuthorable(){  boolean authorable=false;  JackrabbitSession js=(JackrabbitSession)getSession();  try {    Group authors=(Group)js.getUserManager().getAuthorizable(PublickConstants.GROUP_ID_AUTHORS);    User user=(User)js.getUserManager().getAuthorizable(js.getUserID());    authorable=user.isAdmin() || authors.isMember(user);  } catch (  RepositoryException e) {    LOGGER.error("Could not determine group membership",e);  }  return authorable;}  }
class C{  static byte[] digestHashStep(String digestMethod,byte[]... items) throws Exception {  return calculateDigest(digestMethod,concatDigests(getDigestAlgorithmURI(digestMethod),items));}  }
class C{  public static Years yearsBetween(ReadableInstant start,ReadableInstant end){  int amount=BaseSingleFieldPeriod.between(start,end,DurationFieldType.years());  return Years.years(amount);}  }
class C{  private static void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  protected void addTrailerToOutput(byte[] msg,int offset,TamsMessage m){  if (!m.isBinary()) {    msg[offset]=0x0d;  }}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  private BigDecimal billSubscription(BillingInput billingInput,SubscriptionInput subscriptionInput,BillingDetailsType billingDetails,BillingResult result){  BigDecimal overallCosts=CostCalculator.ZERO_NORMALIZED;  if (subscriptionInput.getHistories().isEmpty()) {    return overallCosts;  }  PriceModelEvaluator priceModelEvaluator=new PriceModelEvaluator(billingInput,bdr,subscriptionInput);  priceModelEvaluator.evaluatePriceModels();  SubscriptionType subscriptionType=initializeSubscriptionType(subscriptionInput);  PriceModelsType priceModelsType=subscriptionType.getPriceModels();  for (  PriceModelInput pmInput : priceModelEvaluator.getPriceModels()) {    BigDecimal costForSubscriptionPriceModel=billPriceModel(billingInput,pmInput,priceModelsType,result);    overallCosts=overallCosts.add(costForSubscriptionPriceModel);  }  if (priceModelsType.getPriceModel().size() > 0) {    addSubscriptionRelatedUdas(result,subscriptionInput.getHistories().get(0),subscriptionType);    billingDetails.getSubscriptions().getSubscription().add(subscriptionType);  }  return overallCosts;}  }
class C{  public JSONException(String message){  super(message);}  }
class C{  public SQLDataException(String reason){  super(reason,null,0);}  }
class C{  public static BufferedImage loadCompatibleImage(URL resource) throws IOException {  BufferedImage image=ImageIO.read(resource);  return toCompatibleImage(image);}  }
class C{  public FunctionScoreQueryBuilder(QueryBuilder queryBuilder){  this.queryBuilder=queryBuilder;}  }
class C{  public void scrollToInstance(final TypeInstance instance){}  }
class C{  public Schema lockSchema(){  m_locked=true;  return this;}  }
class C{  public boolean isLeftToRight(){  if (m_leftToRight == null)   m_leftToRight=new Boolean(ComponentOrientation.getOrientation(m_locale).isLeftToRight());  return m_leftToRight.booleanValue();}  }
class C{  public String toString(){  return Arrays.toString(this.cards);}  }
class C{  public static double RRSEfitness(boolean useTrainingData,GEPIndividual ind){  double RRSE=RRSErawFitness(useTrainingData,ind,0);  return (1000.0) / (1.0 + RRSE);}  }
class C{  public void yield() throws IOException {  OutputStream os=this.os;  this.os=null;  if (os != null)   server.yield(channel);}  }
class C{  public static PublicKey readX509PublicKey(byte[] encoded) throws Exception {  X509EncodedKeySpec x509EncodedPublicKey=new X509EncodedKeySpec(encoded);  return KEY_FACTORY.generatePublic(x509EncodedPublicKey);}  }
class C{  public static InlineQueryResultContactBuilder builder(){  return new InlineQueryResultContactBuilder();}  }
class C{  protected void saveObject(Object object){  if (m_FileChooser == null) {    createFileChooser();  }  int returnVal=m_FileChooser.showSaveDialog(this);  if (returnVal == JFileChooser.APPROVE_OPTION) {    File sFile=m_FileChooser.getSelectedFile();    try {      ObjectOutputStream oo=new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(sFile)));      oo.writeObject(object);      oo.close();    } catch (    Exception ex) {      JOptionPane.showMessageDialog(this,"Couldn't write to file: " + sFile.getName() + "\n"+ ex.getMessage(),"Save object",JOptionPane.ERROR_MESSAGE);    }  }}  }
class C{  public String unzip(String fileName){  checkConnectedAndInFileExplorer();  String currentPath=fileName.substring(0,fileName.lastIndexOf("/"));  fileName=fileName.substring(fileName.lastIndexOf("/") + 1);  String command=authentificationUtils.finalHost + "/file/unzip/container/" + currentContainerId+ "/application/"+ applicationUtils.getCurrentApplication().getName()+ "?path="+ currentPath+ "&fileName="+ fileName;  Map<String,String> parameters=new HashMap<>();  parameters.put("applicationName",applicationUtils.getCurrentApplication().getName());  try {    restUtils.sendPutCommand(command,authentificationUtils.getMap(),parameters).get("body");  } catch (  ManagerResponseException e) {    throw new CloudUnitCliException("Couldn't unzip file",e);  }  return "File unzipped";}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element entRefAddr;  Node entRefNode;  NamedNodeMap attrList;  int nodeType;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  entRefAddr=(Element)elementList.item(1);  entRefNode=entRefAddr.getFirstChild();  nodeType=(int)entRefNode.getNodeType();  if (!equals(5,nodeType)) {    entRefNode=doc.createEntityReference("ent2");    assertNotNull("createdEntRefNotNull",entRefNode);  }  attrList=entRefNode.getAttributes();  assertNull("attrList",attrList);}  }
class C{  public void animateZoom(Canvas canvas){  mInitialZoomOverview=false;  if (mZoomScale == 0) {    Log.w(LOGTAG,"A WebView is attempting to perform a fixed length " + "zoom animation when no zoom is in progress");    mInHWAcceleratedZoom=false;    return;  }  float zoomScale;  int interval=(int)(SystemClock.uptimeMillis() - mZoomStart);  if (interval < ZOOM_ANIMATION_LENGTH) {    float ratio=(float)interval / ZOOM_ANIMATION_LENGTH;    zoomScale=1.0f / (mInvInitialZoomScale + (mInvFinalZoomScale - mInvInitialZoomScale) * ratio);    mWebView.invalidate();  } else {    zoomScale=mZoomScale;    mZoomScale=0;    mWebView.onFixedLengthZoomAnimationEnd();  }  float scale=zoomScale * mInvInitialZoomScale;  int tx=Math.round(scale * (mInitialScrollX + mZoomCenterX) - mZoomCenterX);  tx=-WebViewClassic.pinLoc(tx,mWebView.getViewWidth(),Math.round(mWebView.getContentWidth() * zoomScale)) + mWebView.getScrollX();  int titleHeight=mWebView.getTitleHeight();  int ty=Math.round(scale * (mInitialScrollY + mZoomCenterY - titleHeight) - (mZoomCenterY - titleHeight));  ty=-(ty <= titleHeight ? Math.max(ty,0) : WebViewClassic.pinLoc(ty - titleHeight,mWebView.getViewHeight(),Math.round(mWebView.getContentHeight() * zoomScale)) + titleHeight) + mWebView.getScrollY();  if (mHardwareAccelerated) {    mWebView.updateScrollCoordinates(mWebView.getScrollX() - tx,mWebView.getScrollY() - ty);    canvas.translate(tx,ty);    setZoomScale(zoomScale,false);    if (mZoomScale == 0) {      mInHWAcceleratedZoom=false;      mWebView.sendViewSizeZoom(false);    }  } else {    canvas.translate(tx,ty);    canvas.scale(zoomScale,zoomScale);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:55.696 -0500",hash_original_method="7A1590EC642F64148081547F7DE77EEF",hash_generated_method="DBC701613AB8121F89BA676B9E7A66A0") public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || this.getClass() != o.getClass()) {    return false;  }  return Arrays.equals(oid,((ObjectIdentifier)o).oid);}  }
class C{  private static String convertFromWindowsPath(String path){  int colon=path.indexOf(':');  int length=path.length();  char ch;  if (colon == 1 && (ch=path.charAt(0)) != '/' && ch != '\\')   return "/" + path.charAt(0) + ":/"+ path.substring(2); else   if (length > 1 && ((ch=path.charAt(0)) == '/' || ch == '\\') && ((ch=path.charAt(1)) == '/' || ch == '\\')) {    if (colon < 0)     return "/:" + path;    for (int i=colon - 2; i > 1; i--) {      if ((ch=path.charAt(i)) != '/' && ch != '\\')       return "/:" + path;    }    ch=path.charAt(colon - 1);    if (ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z')     return path.substring(colon - 2); else     return "/:" + path;  } else   return path;}  }
class C{  public String toString(){  return name;}  }
class C{  public ControllerLookupException(List<LocalizedText> messages){  super(messages);}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter w=new StringWriter();synchronized (w.getBuffer()) {    return this.write(w,indentFactor,0).toString();  }}  }
class C{  boolean isSeparator(){  boolean r=(getTargetLabel().equals("-"));  return r;}  }
class C{  public User findOneByName(String name){  return mDaoSession.getUserDao().queryBuilder().where(UserDao.Properties.Name.eq(name)).unique();}  }
class C{  private boolean advanceApiBetweenOrLater(TreeSet<AreaPanelInfo> sortedApiTree,AreaPanelInfo api,int minTime,int maxTime,int endTime){  sortedApiTree.remove(api);  AreaPanel ap=api.ap();  TimeTree rootTt=ap.getTimeTree();  TimeTree tt=rootTt.getEncompassigTimeTreeOrMaxTimeTreeBeforeTime(maxTime,true);  if (tt == null || tt.getMinTimeSecs() < minTime) {    tt=rootTt.getEncompassigTimeTreeOrMinTimeTreeAfterTime(maxTime,true);    if (api.setTt(tt,endTime)) {      sortedApiTree.add(api);    }    return false;  } else {    if (api.setTt(tt,endTime))     sortedApiTree.add(api);    return true;  }}  }
class C{  public static int GetLineOfPCalAlgorithm(IDocument document){  try {    final String moduleAsString=document.get();    return LocationToLine(document,TLAtoPCalMapping.GetLineOfPCalAlgorithm(moduleAsString));  } catch (  BadLocationException e) {    e.printStackTrace();  }  return -1;}  }
class C{  public boolean isHuman(){  return RESPONSIBLETYPE_Human.equals(getResponsibleType()) && getAD_User_ID() != 0;}  }
class C{  public void write(Writer w) throws Exception {  m_Matrix.write(w);}  }
class C{  public ImageCache(){  cache=new Hashtable<K,V>(MAX_SIZE * 5 / 4,.75f);}  }
class C{  private void loadU10(Repository repo) throws Exception {  RepositoryConnection cxn=repo.getConnection();  cxn.setAutoCommit(false);  try {    long stmtsBefore=((BigdataSailRepository)repo).getDatabase().getStatementCount();    log.info("statements before: " + stmtsBefore);    long start=System.currentTimeMillis();{      InputStream is=ScaleOut.class.getResourceAsStream("univ-bench.owl");      Reader reader=new InputStreamReader(new BufferedInputStream(is));      cxn.add(reader,LUBM.NS,RDFFormat.RDFXML);      cxn.commit();    }{      InputStream is=ScaleOut.class.getResourceAsStream("U10.zip");      ZipInputStream zis=new ZipInputStream(new BufferedInputStream(is));      ZipEntry ze=null;      while ((ze=zis.getNextEntry()) != null) {        if (ze.isDirectory()) {          continue;        }        String name=ze.getName();        log.info(name);        ByteArrayOutputStream baos=new ByteArrayOutputStream();        byte[] bytes=new byte[4096];        int count;        while ((count=zis.read(bytes,0,4096)) != -1) {          baos.write(bytes,0,count);        }        baos.close();        Reader reader=new InputStreamReader(new ByteArrayInputStream(baos.toByteArray()));        cxn.add(reader,LUBM.NS,RDFFormat.RDFXML);        cxn.commit();      }      zis.close();    }    long elapsed=System.currentTimeMillis() - start;    long stmtsAfter=((BigdataSailRepository)repo).getDatabase().getStatementCount();    long stmtsAdded=stmtsAfter - stmtsBefore;    int throughput=(int)((double)stmtsAdded / (double)elapsed * 1000d);    log.info("statements after: " + stmtsAfter);    log.info("loaded: " + stmtsAdded + " in "+ elapsed+ " millis: "+ throughput+ " stmts/sec");  } catch (  Exception ex) {    cxn.rollback();    throw ex;  } finally {    cxn.close();  }}  }
class C{  public void read(File file) throws IOException {  BufferedInputStream in=new BufferedInputStream(new FileInputStream(file));  try {    read(in);  }  finally {    in.close();  }}  }
class C{  public static HttpHeaders toArmeria(HttpResponse in){  io.netty.handler.codec.http.HttpHeaders inHeaders=in.headers();  final HttpHeaders out=new DefaultHttpHeaders(true,inHeaders.size());  out.status(in.status().code());  toArmeria(inHeaders,out);  return out;}  }
class C{  public Program(String name,boolean parallel,IQueryOptions queryOptions){  this(name,parallel,false,queryOptions);}  }
class C{  public boolean isModified(){  return !Strings.isNullOrEmpty(modifier);}  }
class C{  public static String stringOfChar(char ch,int count){  StringBuffer buf=new StringBuffer();  for (int i=0; i < count; i++) {    buf.append(ch);  }  return buf.toString();}  }
class C{  public static ComponentUI createUI(JComponent c){  return new WindowsTextPaneUI();}  }
class C{  public boolean isIn(short i){  return (i >= this.min) && (i <= this.max);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof DateTickUnit)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  DateTickUnit that=(DateTickUnit)obj;  if (!(this.unitType.equals(that.unitType))) {    return false;  }  if (this.count != that.count) {    return false;  }  if (!ObjectUtilities.equal(this.formatter,that.formatter)) {    return false;  }  return true;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public TlsKeyMaterialSpec(SecretKey clientMacKey,SecretKey serverMacKey){  this(clientMacKey,serverMacKey,null,null,null,null);}  }
class C{  private void addRequestTags(Request request){  URI uri=URI.create(request.url());  getKeysInjector().addRequestTags(uri.toString(),uri.getHost(),uri.getPath(),request.method(),request.headers());}  }
class C{  static NodeTextRep appendToNodeText(NodeTextRep nodeRep,String str){  NodeTextRep result=nodeRep.clone();  result.nodeText[result.nodeText.length - 1]=result.nodeText[result.nodeText.length - 1] + str;  return result;}  }
class C{  public OMText(int px1,int py1,String stuff,Font font,int just){  super(RENDERTYPE_XY,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);  point=new Point(px1,py1);  setData(stuff);  f=font;  justify=just;}  }
class C{  public AbstractDataSourceWarCapabilityContainerTestCase(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  public TLongObjectHashMap(TLongHashingStrategy strategy){  _hashingStrategy=strategy;}  }
class C{  private void loadAvatar(boolean useCache){  if (user == null || avatar == null || avatarSize == 0) {    return;  }  int borderDrawable=userHandler.isFriend(user) ? R.drawable.round_rectangle_padded_big : R.drawable.round_rectangle_padded_big_gray;  avatar.setBackgroundDrawable(getResources().getDrawable(borderDrawable));  String imageUrl=ImageService.getUserAvatarURL(client,user.getId(),avatarSize);  RequestCreator rcAvatar=Picasso.with(getContext()).load(imageUrl);  if (!useCache) {    rcAvatar.memoryPolicy(MemoryPolicy.NO_CACHE).networkPolicy(NetworkPolicy.NO_CACHE);  }  avatarTarget=PicassoTarget.roundedCornersImage(getContext(),avatar);  rcAvatar.into(avatarTarget);  RequestCreator rcBackdrop=Picasso.with(getContext()).load(imageUrl).transform(new PicassoBlur(getContext()));  if (!useCache) {    rcBackdrop.memoryPolicy(MemoryPolicy.NO_CACHE).networkPolicy(NetworkPolicy.NO_CACHE);  }  rcBackdrop.into(backdrop);}  }
class C{  public void delete(Key key){  if (key == null)   throw new NullPointerException("argument to delete() is null");  if (!contains(key))   return;  root=delete(root,key);  assert check();}  }
class C{  @Override public void writeToParcel(Parcel dest,int flags){  dest.writeLong(mAnswer.getId());  dest.writeInt(mToggleState ? 1 : 0);}  }
class C{  @Override public void close(){  if (!disposed) {    disposed=true;    gfx.gl.glDeleteTexture(id);  }}  }
class C{  public static void clearBitmap(Bitmap bitmap){  clearBitmap(bitmap,CLEAR_COLOR);}  }
class C{  public static void main(String[] args){  TestLegacyTaglet tester=new TestLegacyTaglet();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  private static int checkFormalTypeParameters(final String signature,int pos){  pos=checkChar('<',signature,pos);  pos=checkFormalTypeParameter(signature,pos);  while (getChar(signature,pos) != '>') {    pos=checkFormalTypeParameter(signature,pos);  }  return pos + 1;}  }
class C{  public AACAudio(){  this.reset();}  }
class C{  public static void parallelSort(long[] a){  int n=a.length, p, g;  if (n <= MIN_ARRAY_SORT_GRAN || (p=ForkJoinPool.getCommonPoolParallelism()) == 1)   DualPivotQuicksort.sort(a,0,n - 1,null,0,0); else   new ArraysParallelSortHelpers.FJLong.Sorter(null,a,new long[n],0,n,0,((g=n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ? MIN_ARRAY_SORT_GRAN : g).invoke();}  }
class C{  public void testMoveRenameFileDestinationMissingPartially() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,DIR_NEW,SUBDIR_NEW),paths(FILE));  create(igfs,paths(DIR,SUBDIR,DIR_NEW),paths(FILE));  igfs.rename(FILE,FILE_NEW);  checkExist(igfs,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,FILE_NEW);  checkNotExist(igfs,igfsSecondary,FILE);}  }
class C{  public Object read(InputNode node) throws Exception {  Label text=group.getText();  if (text == null) {    return readElement(node);  }  return readText(node);}  }
class C{  public void _setRefreshInterval(int refreshInterval){  boolean isRegistered=MBeanUtil.isRefreshNotificationRegistered(this,RefreshNotificationType.SYSTEM_MEMBER_CONFIG);  if (isRegistered && (getRefreshInterval() == refreshInterval))   return;  this.refreshInterval=Helper.setAndReturnRefreshInterval(this,refreshInterval);}  }
class C{  public static void doGet(URL url){  try {    if (mockMode)     return;    HttpURLConnection urlc=(HttpURLConnection)url.openConnection();    if (url.getUserInfo() != null) {      String encoding=DatatypeConverter.printBase64Binary(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));      urlc.setRequestProperty("Authorization","Basic " + encoding);    }    urlc.connect();    checkResponseCode(urlc);  } catch (  IOException e) {    warn("An error occurred posting data to " + url + ". Please check that Solr is running.");  }}  }
class C{  private double calculateUseFitnessForDefinitionPos(ExecutionTrace targetTrace,Integer objectId,int goalDefinitionPos) throws UnexpectedFitnessException {  int previousDefId=DefUseExecutionTraceAnalyzer.getPreviousDefinitionId(goalDefinition.getVariableName(),targetTrace,goalDefinitionPos,objectId);  if (previousDefId == goalDefinition.getDefId())   return 1.0;  int overwritingDefPos=DefUseExecutionTraceAnalyzer.getNextOverwritingDefinitionPosition(goalDefinition,targetTrace,goalDefinitionPos,objectId);  try {    return calculateFitnessForDURange(targetTrace,objectId,goalUseFitness,goalUse,true,goalDefinitionPos,overwritingDefPos,true);  } catch (  UnexpectedFitnessException e) {    return 1.0;  }}  }
class C{  private void resizeFramebufferTexture(){  glDeleteTextures(raytraceTexture);  glDeleteTextures(positionTexture);  glDeleteTextures(normalTexture);  glDeleteRenderbuffers(depthBuffer);  glDeleteFramebuffers(fbo);  createRaytracingTexture();  createRasterizerTextures();  createRasterFrameBufferObject();}  }
class C{  public void evaluateModelOnce(double prediction,Instance instance) throws Exception {  m_delegate.evaluateModelOnce(prediction,instance);}  }
class C{  @Override public String toString(){  return type.name() + " [" + content.toString()+ "]";}  }
class C{  private void lock() throws InterruptedException {  if (Log.isLoggable(TAG,Log.DEBUG)) {    Log.d(TAG,"lock: grabbing semaphore",new Throwable());  }  mLock.acquire();  if (Log.isLoggable(TAG,Log.DEBUG)) {    Log.d(TAG,"lock: grabbed semaphore");  }}  }
class C{  private void disconnect(){  c.changeConnectionStatus(ConnectionStatus.DISCONNECTED);  String actionTaken=context.getString(R.string.toast_disconnected);  c.addAction(actionTaken);}  }
class C{  protected Iterator<String> checkOutput(String expected){  List<String> outputLines=Arrays.asList(StringUtils.split(botOut.toString(),"\n\r"));  Iterator<String> outputItr=outputLines.iterator();  assertEquals(tryGetNextLine(outputItr),"CAP LS","Unexpected first line");  assertEquals(tryGetNextLine(outputItr),"NICK TestBot","Unexecpted second line");  assertTrue(tryGetNextLine(outputItr).startsWith("USER PircBotX 8 * :"),"Unexpected third line");  assertEquals(tryGetNextLine(outputItr),expected);  return outputItr;}  }
class C{  @Override public void run(){  amIActive=true;  String[] shapefiles=new String[2];  String outputFile;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry g1=null;  com.vividsolutions.jts.geom.Geometry g2=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  shapefiles[0]=args[0];  shapefiles[1]=args[1];  outputFile=args[2];  if ((shapefiles[0].length() <= 0) || (shapefiles[1].length() <= 0) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    com.vividsolutions.jts.geom.Geometry[] recJTSGeometries=null;    ArrayList<com.vividsolutions.jts.geom.Geometry> inputGeometryList=new ArrayList<>();    com.vividsolutions.jts.geom.Geometry outputGeometry=null;    ShapeFile input1=new ShapeFile(shapefiles[0]);    shapeType=input1.getShapeType();    numRecs=input1.getNumberOfRecords();    if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      outputShapeType=ShapeType.POINT;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYLINE;    }    oneHundredthTotal=numRecs / 100;    progress=0;    n=0;    for (    ShapeFileRecord record : input1.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          recJTSGeometries[a].setUserData(record.getRecordNumber());          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Loop 1 of " + 2 + ": Reading data:",progress);      }    }    g1=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    ShapeFile input2=new ShapeFile(shapefiles[1]);    shapeType=input2.getShapeType();    numRecs=input2.getNumberOfRecords();    if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      outputShapeType=ShapeType.POINT;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYLINE;    }    oneHundredthTotal=numRecs / 100;    progress=0;    n=0;    for (    ShapeFileRecord record : input2.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          recJTSGeometries[a].setUserData(record.getRecordNumber());          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Loop 2 of " + 2 + ": Reading data:",progress);      }    }    g2=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    updateProgress("Performing operation (progress will not be updated):",-1);    try {      outputGeometry=g1.symDifference(g2);    } catch (    Exception ex) {      outputGeometry=com.vividsolutions.jts.operation.overlay.snap.SnapOverlayOp.symDifference(g1,g2);    }    ShapeFile output=null;    int numFields=3;    DBFField fields[]=new DBFField[numFields];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("PARENT1_ID");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(0);    fields[2]=new DBFField();    fields[2].setName("PARENT2_ID");    fields[2].setDataType(DBFField.DBFDataType.NUMERIC);    fields[2].setFieldLength(10);    fields[2].setDecimalCount(0);    output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input1);    PreparedGeometry[] tests1=new PreparedGeometry[g1.getNumGeometries()];    com.vividsolutions.jts.geom.Geometry[] testGs1=new com.vividsolutions.jts.geom.Geometry[g1.getNumGeometries()];    int[] userData1=new int[g1.getNumGeometries()];    for (int a=0; a < g1.getNumGeometries(); a++) {      tests1[a]=PreparedGeometryFactory.prepare(g1.getGeometryN(a));      userData1[a]=Integer.parseInt(g1.getGeometryN(a).getUserData().toString());      testGs1[a]=g1.getGeometryN(a);    }    PreparedGeometry[] tests2=new PreparedGeometry[g2.getNumGeometries()];    com.vividsolutions.jts.geom.Geometry[] testGs2=new com.vividsolutions.jts.geom.Geometry[g2.getNumGeometries()];    int[] userData2=new int[g2.getNumGeometries()];    for (int a=0; a < g2.getNumGeometries(); a++) {      tests2[a]=PreparedGeometryFactory.prepare(g2.getGeometryN(a));      userData2[a]=Integer.parseInt(g2.getGeometryN(a).getUserData().toString());      testGs2[a]=g2.getGeometryN(a);    }    if (outputGeometry instanceof GeometryCollection) {      int numGeometries=outputGeometry.getNumGeometries();      oneHundredthTotal=(int)(numGeometries / 100.0);      progress=0;      n=0;      FID=0;      int parentRecNum1=0;      int parentRecNum2=0;      for (int a=0; a < numGeometries; a++) {        parentRecNum1=-999;        parentRecNum2=-999;        com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);        if (gN instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POINT) {          Coordinate p=gN.getCoordinate();          for (int m=0; m < tests1.length; m++) {            if (tests1[m].overlaps(gN) || gN.distance(testGs1[m]) < 0.0001) {              parentRecNum1=userData1[m];              break;            }          }          for (int m=0; m < tests2.length; m++) {            if (tests2[m].overlaps(gN) || gN.distance(testGs2[m]) < 0.0001) {              parentRecNum2=userData2[m];              break;            }          }          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(p.x,p.y);          FID++;          Object[] rowData=new Object[numFields];          rowData[0]=new Double(FID);          rowData[1]=new Double(parentRecNum1);          rowData[2]=new Double(parentRecNum2);          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof LineString && outputShapeType == ShapeType.POLYLINE) {          for (int m=0; m < tests1.length; m++) {            if (tests1[m].overlaps(gN) || gN.distance(testGs1[m]) < 0.0001) {              parentRecNum1=userData1[m];              break;            }          }          for (int m=0; m < tests2.length; m++) {            if (tests2[m].crosses(gN) || gN.distance(testGs2[m]) < 0.0001) {              parentRecNum2=userData2[m];              break;            }          }          LineString ls=(LineString)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts={0};          Coordinate[] coords=ls.getCoordinates();          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          FID++;          Object[] rowData=new Object[numFields];          rowData[0]=new Double(FID);          if (parentRecNum1 != -999) {            rowData[1]=new Double(parentRecNum1);          }          if (parentRecNum2 != -999) {            rowData[2]=new Double(parentRecNum2);          }          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {          for (int m=0; m < tests1.length; m++) {            if (tests1[m].contains(gN.getInteriorPoint())) {              parentRecNum1=userData1[m];              break;            }          }          for (int m=0; m < tests2.length; m++) {            if (tests2[m].contains(gN.getInteriorPoint())) {              parentRecNum2=userData2[m];              break;            }          }          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (!Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          FID++;          Object[] rowData=new Object[numFields];          rowData[0]=new Double(FID);          if (parentRecNum1 != -999) {            rowData[1]=new Double(parentRecNum1);          }          if (parentRecNum2 != -999) {            rowData[2]=new Double(parentRecNum2);          }          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {          for (int m=0; m < tests1.length; m++) {            if (tests1[m].contains(gN.getInteriorPoint())) {              parentRecNum1=userData1[m];              break;            }          }          for (int m=0; m < tests2.length; m++) {            if (tests2[m].contains(gN.getInteriorPoint())) {              parentRecNum2=userData2[m];              break;            }          }          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (!Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          FID++;          Object[] rowData=new Object[numFields];          rowData[0]=new Double(FID);          if (parentRecNum1 != -999) {            rowData[1]=new Double(parentRecNum1);          }          if (parentRecNum2 != -999) {            rowData[2]=new Double(parentRecNum2);          }          output.addRecord(wbGeometry,rowData);        } else {        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    } else {      showFeedback("An error was encountered when saving the output file.");      return;    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @ValidationErrorPage(value="view") @Action(value="/revPetition-generateHearingNotice") public String generateHearingNotice(){  objection.setGenerateSpecialNotice(Boolean.TRUE);  updateStateAndStatus(objection);  final PropertyImpl refNewProperty=propService.creteNewPropertyForObjectionWorkflow(objection.getBasicProperty(),objection.getObjectionNumber(),objection.getRecievedOn(),objection.getCreatedBy(),null,PROPERTY_MODIFY_REASON_OBJ);  propertyImplService.getSession().flush();  objection.setProperty(refNewProperty);  revisionPetitionService.updateRevisionPetition(objection);  return STRUTS_RESULT_MESSAGE;}  }
class C{  public static boolean isSwitchListAllTrainsEnabled(){  return switchListAllTrains;}  }
class C{  public static Matrix addValue(Matrix A,double val){  for (int i=0; i < A.getRowDimension(); i++)   for (int j=0; j < A.getColumnDimension(); j++)   A.set(i,j,A.get(i,j) + val);  return A;}  }
class C{  public AtomEscape createAtomEscape(){  AtomEscapeImpl atomEscape=new AtomEscapeImpl();  return atomEscape;}  }
class C{  protected Object deserialize(boolean includeSchemaAndVersion,String topic,byte[] payload) throws SerializationException {  return deserialize(includeSchemaAndVersion,topic,null,payload,null);}  }
class C{  public final void runOnUiThread(Runnable action){  internalRunOnUiThreadNow(action);}  }
class C{  protected void splineForward(int segments,PMatrix3D matrix){  float f=1.0f / segments;  float ff=f * f;  float fff=ff * f;  matrix.set(0,0,0,1,fff,ff,f,0,6 * fff,2 * ff,0,0,6 * fff,0,0,0);}  }
class C{  static void closeOthers(final Queue active,final List<Queue> all){  all.stream().filter(null).forEach(null);}  }
class C{  public static boolean isTrafficPurchaseSupported(Context context,int slotId){  if (context != null && slotId >= 0 && slotId < 2) {    try {      final Uri uri=Uri.parse(String.format(TRAFFIC_PURCHASE_STATUS_URI_STR_ISMI,slotId));      return queryTrafficPurchaseStatus(context,uri);    } catch (    Exception e) {      e.printStackTrace();    }  }  return false;}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){}  }
class C{  public void saveLockPassword(String password,int quality,boolean isFallback,int userHandle){  final byte[] hash=passwordToHash(password);  try {    getLockSettings().setLockPassword(hash,userHandle);    DevicePolicyManager dpm=getDevicePolicyManager();    KeyStore keyStore=KeyStore.getInstance();    if (password != null) {      if (userHandle == UserHandle.USER_OWNER) {        updateEncryptionPassword(password);        keyStore.password(password);      }      int computedQuality=computePasswordQuality(password);      if (!isFallback) {        deleteGallery();        setLong(PASSWORD_TYPE_KEY,Math.max(quality,computedQuality),userHandle);        if (computedQuality != DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED) {          int letters=0;          int uppercase=0;          int lowercase=0;          int numbers=0;          int symbols=0;          int nonletter=0;          for (int i=0; i < password.length(); i++) {            char c=password.charAt(i);            if (c >= 'A' && c <= 'Z') {              letters++;              uppercase++;            } else             if (c >= 'a' && c <= 'z') {              letters++;              lowercase++;            } else             if (c >= '0' && c <= '9') {              numbers++;              nonletter++;            } else {              symbols++;              nonletter++;            }          }          dpm.setActivePasswordState(Math.max(quality,computedQuality),password.length(),letters,uppercase,lowercase,numbers,symbols,nonletter,userHandle);        } else {          dpm.setActivePasswordState(DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED,0,0,0,0,0,0,0,userHandle);        }      } else {        setLong(PASSWORD_TYPE_KEY,DevicePolicyManager.PASSWORD_QUALITY_BIOMETRIC_WEAK,userHandle);        setLong(PASSWORD_TYPE_ALTERNATE_KEY,Math.max(quality,computedQuality),userHandle);        finishBiometricWeak();        dpm.setActivePasswordState(DevicePolicyManager.PASSWORD_QUALITY_BIOMETRIC_WEAK,0,0,0,0,0,0,0,userHandle);      }      String passwordHistory=getString(PASSWORD_HISTORY_KEY,userHandle);      if (passwordHistory == null) {        passwordHistory=new String();      }      int passwordHistoryLength=getRequestedPasswordHistoryLength();      if (passwordHistoryLength == 0) {        passwordHistory="";      } else {        passwordHistory=new String(hash) + "," + passwordHistory;        passwordHistory=passwordHistory.substring(0,Math.min(hash.length * passwordHistoryLength + passwordHistoryLength - 1,passwordHistory.length()));      }      setString(PASSWORD_HISTORY_KEY,passwordHistory,userHandle);    } else {      if (keyStore.isEmpty()) {        keyStore.reset();      }      dpm.setActivePasswordState(DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED,0,0,0,0,0,0,0,userHandle);    }  } catch (  RemoteException re) {    Log.e(TAG,"Unable to save lock password " + re);  }}  }
class C{  public AbstractQueryResultParser(ValueFactory valueFactory){  setValueFactory(valueFactory);  setParserConfig(new ParserConfig());}  }
class C{  @Deprecated protected void clearBNodeIDMap(){}  }
class C{  private void fillUpThreadPool(int newSize){  messageProcessors.ensureCapacity(newSize);  for (int i=messageProcessors.size(); i < newSize; i++) {    MessageProcessor mp=new MessageProcessor(this);    messageProcessors.add(mp);    mp.start();  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  for (Node<E> p=first(); p != null; p=succ(p)) {    Object item=p.item;    if (item != null)     s.writeObject(item);  }  s.writeObject(null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:42.512 -0500",hash_original_method="0998BD1AC5B9537C7B2BFA3E832ED71A",hash_generated_method="6AA1C1C41048396E244FE7724B12A914") public ChunkedOutputStream(final SessionOutputBuffer out) throws IOException {  this(out,2048);}  }
class C{  public boolean isCheckCast(){  return trapCode == RuntimeEntrypoints.TRAP_CHECKCAST;}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.PROMISIFY_EXPRESSION__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public Adapter createEObjectAdapter(){  return null;}  }
class C{  @Override public final void close() throws IOException {  StreamImpl s;synchronized (this) {    s=_source;    if (!_isDisableClose) {      _source=null;    }  }  if (s == null) {    return;  }  try {    int len=_writeLength;    if (len > 0) {      _writeLength=0;      if (s != null) {        s.write(_writeBuffer,0,len,!_isDisableClose);      }    }  }  finally {    if (_isDisableClose) {      return;    }    _source=null;    if (_writeEncoding != null) {      _writeEncoding=null;    }    if (!_isReuseBuffer) {      TempBuffer tempWrite=_tempWrite;      _tempWrite=null;      _writeBuffer=null;      if (tempWrite != null) {        tempWrite.free();      }    }    if (s != null && !_isDisableCloseSource) {      s.closeWrite();    }  }}  }
class C{  public static RxPaper book(String customBook){  if (mRxPaper == null || !TextUtils.equals(customBook,sCustomBook)) {    sCustomBook=customBook;    mRxPaper=new RxPaper(customBook);  }  return mRxPaper;}  }
class C{  public T caseProperty(Property object){  return null;}  }
class C{  static TextEditProcessor createSourceComputationProcessor(Document document,TextEdit root,int style){  return new TextEditProcessor(document,root,style,true);}  }
class C{  public static Object wrap(Object object){  try {    if (object == null) {      return NULL;    }    if (object instanceof JSONObject || object instanceof JSONArray || NULL.equals(object)|| object instanceof JSONString|| object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String|| object instanceof BigInteger|| object instanceof BigDecimal) {      return object;    }    if (object instanceof Collection) {      Collection<?> coll=(Collection<?>)object;      return new JSONArray(coll);    }    if (object.getClass().isArray()) {      return new JSONArray(object);    }    if (object instanceof Map) {      Map<?,?> map=(Map<?,?>)object;      return new JSONObject(map);    }    Package objectPackage=object.getClass().getPackage();    String objectPackageName=objectPackage != null ? objectPackage.getName() : "";    if (objectPackageName.startsWith("java.") || objectPackageName.startsWith("javax.") || object.getClass().getClassLoader() == null) {      return object.toString();    }    return new JSONObject(object);  } catch (  Exception exception) {    return null;  }}  }
class C{  public static IStatus validateClassFileName(String name,String sourceLevel,String complianceLevel){  if (name == null) {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_classFile_nullName,null);  }  if (!org.eclipse.jdt.internal.compiler.util.Util.isClassFileName(name)) {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_classFile_notClassFileName,null);  }  String identifier;  int index;  index=name.lastIndexOf('.');  if (index == -1) {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_classFile_notClassFileName,null);  }  identifier=name.substring(0,index);  if (!identifier.equals(PACKAGE_INFO)) {    IStatus status=validateIdentifier(identifier,sourceLevel,complianceLevel);    if (!status.isOK()) {      return status;    }  }  return JavaModelStatus.VERIFIED_OK;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public AnalysisHandler(DocListProvider docListProvider){  this.docListProvider=docListProvider;}  }
class C{  public static void main(String[] args){  try (TeeStream teeStream=new TeeStream(System.out,Paths.get("out.txt"));PrintStream out=new PrintStream(teeStream)){    out.print("Hello, world");  } catch (  Exception e) {    e.printStackTrace();    System.exit(1);  }}  }
class C{  @Override public void renderLimitLines(Canvas c){  List<LimitLine> limitLines=mXAxis.getLimitLines();  if (limitLines == null || limitLines.size() <= 0)   return;  float[] position=new float[2];  for (int i=0; i < limitLines.size(); i++) {    LimitLine l=limitLines.get(i);    if (!l.isEnabled())     continue;    position[0]=l.getLimit();    position[1]=0.f;    mTrans.pointValuesToPixel(position);    renderLimitLineLine(c,l,position);    renderLimitLineLabel(c,l,position,2.f + l.getYOffset());  }}  }
class C{  @Override public boolean equals(final Object anObject){  if (this == anObject)   return true;  return false;}  }
class C{  public JBBPOut Int(final int value) throws IOException {  assertNotEnded();  if (this.processCommands) {    _writeInt(value);  }  return this;}  }
class C{  private void assertSetResourcesCleared(){  assertSetIteratorsCleared();  for (int i=0; i < gridCount(); i++) {    IgniteKernal grid=(IgniteKernal)grid(i);    for (    IgniteCache cache : grid.caches()) {      CacheDataStructuresManager dsMgr=grid.internalCache(cache.getName()).context().dataStructures();      Map map=GridTestUtils.getFieldValue(dsMgr,"setsMap");      assertEquals("Set not removed [grid=" + i + ", map="+ map+ ']',0,map.size());      map=GridTestUtils.getFieldValue(dsMgr,"setDataMap");      assertEquals("Set data not removed [grid=" + i + ", cache="+ cache.getName()+ ", map="+ map+ ']',0,map.size());    }  }}  }
class C{  private void registerMediaStoreIntentHandler(){  RobolectricPackageManager packageManager=(RobolectricPackageManager)shadowOf(RuntimeEnvironment.application).getPackageManager();  ResolveInfo info=new ResolveInfo();  info.isDefault=true;  ApplicationInfo applicationInfo=new ApplicationInfo();  applicationInfo.packageName="does.not.matter";  info.activityInfo=new ActivityInfo();  info.activityInfo.applicationInfo=applicationInfo;  info.activityInfo.name="DoesNotMatter";  Intent intent=new Intent(Intents.Scan.ACTION);  packageManager.addResolveInfoForIntent(intent,info);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private int readMaxHostConnectionSetting(){  int maxHostConnections=DEFAULT_MAX_HOST_CONNECTIONS;  try {    maxHostConnections=Integer.parseInt(System.getProperty("http.maxHostConnections",String.valueOf(DEFAULT_MAX_HOST_CONNECTIONS)));  } catch (  Exception e) {    log.error("Could not use http.maxHostConnection definition.",e);  }  return maxHostConnections;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Attr attr;  NodeList childList;  Node importedAttr;  String nodeName;  int nodeType;  String nodeValue;  doc=(Document)load("staffNS",true);  childList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=(Element)childList.item(1);  attr=element.getAttributeNode("street");  importedAttr=doc.importNode(attr,false);  nodeName=importedAttr.getNodeName();  nodeValue=importedAttr.getNodeValue();  nodeType=(int)importedAttr.getNodeType();  assertEquals("documentimportnode01_nodeName","street",nodeName);  assertEquals("documentimportnode01_nodeType",2,nodeType);  assertEquals("documentimportnode01_nodeValue","Yes",nodeValue);}  }
class C{  @Override public Marker buildClusterMarker(StaticCluster cluster,MapView mapView){  Marker m=new Marker(mapView);  m.setPosition(cluster.getPosition());  m.setInfoWindow(null);  m.setAnchor(mAnchorU,mAnchorV);  Bitmap finalIcon=Bitmap.createBitmap(mClusterIcon.getWidth(),mClusterIcon.getHeight(),mClusterIcon.getConfig());  Canvas iconCanvas=new Canvas(finalIcon);  iconCanvas.drawBitmap(mClusterIcon,0,0,null);  String text="" + cluster.getSize();  int textHeight=(int)(mTextPaint.descent() + mTextPaint.ascent());  iconCanvas.drawText(text,mTextAnchorU * finalIcon.getWidth(),mTextAnchorV * finalIcon.getHeight() - textHeight / 2,mTextPaint);  m.setIcon(new BitmapDrawable(mapView.getContext().getResources(),finalIcon));  return m;}  }
class C{  public static void pointerRelease(float x,float y,int[] path){  if (verbose) {    log("pointerRelease(" + x + ", "+ y+ ", "+ toString(path)+ ")");  }  Component c=getComponentByPath(path);  int actualX=c.getAbsoluteX() + (int)(x * c.getWidth());  int actualY=c.getAbsoluteY() + (int)(y * c.getHeight());  Display.getInstance().getCurrent().pointerReleased(actualX,actualY);  waitFor(10);}  }
class C{  public boolean isUseDenseSparse(){  return useDenseSparse;}  }
class C{  protected void initDataBindings(){  BeanProperty<TvShowSelectionModel,Integer> tvShowSelectionModelBeanProperty=BeanProperty.create("selectedTvShow.dateAdded.date");  BeanProperty<JLabel,String> jLabelBeanProperty=BeanProperty.create("text");  AutoBinding<TvShowSelectionModel,Integer,JLabel,String> autoBinding=Bindings.createAutoBinding(UpdateStrategy.READ,selectionModel,tvShowSelectionModelBeanProperty,lblDateAdded,jLabelBeanProperty);  autoBinding.bind();  BeanProperty<TvShowSelectionModel,Boolean> tvShowSelectionModelBeanProperty_1=BeanProperty.create("selectedTvShow.watched");  BeanProperty<JCheckBox,Boolean> jCheckBoxBeanProperty=BeanProperty.create("selected");  AutoBinding<TvShowSelectionModel,Boolean,JCheckBox,Boolean> autoBinding_1=Bindings.createAutoBinding(UpdateStrategy.READ,selectionModel,tvShowSelectionModelBeanProperty_1,cbWatched,jCheckBoxBeanProperty);  autoBinding_1.bind();  BeanProperty<TvShowSelectionModel,Integer> tvShowSelectionModelBeanProperty_2=BeanProperty.create("selectedTvShow.dateAdded.day");  AutoBinding<TvShowSelectionModel,Integer,JLabel,String> autoBinding_2=Bindings.createAutoBinding(UpdateStrategy.READ,selectionModel,tvShowSelectionModelBeanProperty_2,lblDateAdded,jLabelBeanProperty);  autoBinding_2.bind();  BeanProperty<TvShowSelectionModel,String> tvShowSelectionModelBeanProperty_3=BeanProperty.create("selectedTvShow.dateAddedAsString");  AutoBinding<TvShowSelectionModel,String,JLabel,String> autoBinding_3=Bindings.createAutoBinding(UpdateStrategy.READ,selectionModel,tvShowSelectionModelBeanProperty_3,lblDateAdded,jLabelBeanProperty);  autoBinding_3.bind();  BeanProperty<TvShowSelectionModel,String> tvShowSelectionModelBeanProperty_13=BeanProperty.create("selectedTvShow.path");  AutoBinding<TvShowSelectionModel,String,JLabel,String> autoBinding_19=Bindings.createAutoBinding(UpdateStrategy.READ,selectionModel,tvShowSelectionModelBeanProperty_13,lblTvShowPath,jLabelBeanProperty);  autoBinding_19.bind();}  }
class C{  public void init(){  mTapToRetryEnabled=false;  mMaxTapToRetryAttempts=MAX_TAP_TO_RETRY_ATTEMPTS;  reset();}  }
class C{  public String sendMail(String toEmail,String subj,String message){  return sendMail(toEmail,null,subj,message);}  }
class C{  public void buildClassifier(Instances insts) throws Exception {  if (!m_checksTurnedOff) {    getCapabilities().testWithFail(insts);    insts=new Instances(insts);    insts.deleteWithMissingClass();    Instances data=new Instances(insts,insts.numInstances());    for (int i=0; i < insts.numInstances(); i++) {      if (insts.instance(i).weight() > 0)       data.add(insts.instance(i));    }    if (data.numInstances() == 0) {      throw new Exception("No training instances left after removing " + "instances with weight 0!");    }    insts=data;  }  if (!m_checksTurnedOff) {    m_Missing=new ReplaceMissingValues();    m_Missing.setInputFormat(insts);    insts=Filter.useFilter(insts,m_Missing);  } else {    m_Missing=null;  }  if (getCapabilities().handles(Capability.NUMERIC_ATTRIBUTES)) {    boolean onlyNumeric=true;    if (!m_checksTurnedOff) {      for (int i=0; i < insts.numAttributes(); i++) {        if (i != insts.classIndex()) {          if (!insts.attribute(i).isNumeric()) {            onlyNumeric=false;            break;          }        }      }    }    if (!onlyNumeric) {      m_NominalToBinary=new NominalToBinary();      m_NominalToBinary.setInputFormat(insts);      insts=Filter.useFilter(insts,m_NominalToBinary);    } else {      m_NominalToBinary=null;    }  } else {    m_NominalToBinary=null;  }  if (m_filterType == FILTER_STANDARDIZE) {    m_Filter=new Standardize();    m_Filter.setInputFormat(insts);    insts=Filter.useFilter(insts,m_Filter);  } else   if (m_filterType == FILTER_NORMALIZE) {    m_Filter=new Normalize();    m_Filter.setInputFormat(insts);    insts=Filter.useFilter(insts,m_Filter);  } else {    m_Filter=null;  }  m_classIndex=insts.classIndex();  m_classAttribute=insts.classAttribute();  m_KernelIsLinear=(m_kernel instanceof PolyKernel) && (((PolyKernel)m_kernel).getExponent() == 1.0);  Instances[] subsets=new Instances[insts.numClasses()];  for (int i=0; i < insts.numClasses(); i++) {    subsets[i]=new Instances(insts,insts.numInstances());  }  for (int j=0; j < insts.numInstances(); j++) {    Instance inst=insts.instance(j);    subsets[(int)inst.classValue()].add(inst);  }  for (int i=0; i < insts.numClasses(); i++) {    subsets[i].compactify();  }  Random rand=new Random(m_randomSeed);  m_classifiers=new BinarySMO[insts.numClasses()][insts.numClasses()];  for (int i=0; i < insts.numClasses(); i++) {    for (int j=i + 1; j < insts.numClasses(); j++) {      m_classifiers[i][j]=new BinarySMO();      m_classifiers[i][j].setKernel(Kernel.makeCopy(getKernel()));      Instances data=new Instances(insts,insts.numInstances());      for (int k=0; k < subsets[i].numInstances(); k++) {        data.add(subsets[i].instance(k));      }      for (int k=0; k < subsets[j].numInstances(); k++) {        data.add(subsets[j].instance(k));      }      data.compactify();      data.randomize(rand);      m_classifiers[i][j].buildClassifier(data,i,j,m_fitLogisticModels,m_numFolds,m_randomSeed);    }  }}  }
class C{  public Subregion(){  super(KEY);}  }
class C{  final short findNextState(int state,short lookahead){  int index=goto_offsets[state];  if (index != UNUSED_OFFSET) {    index+=lookahead;    if (0 <= index && index < actions.length && lookaheads[index] == lookahead) {      return actions[index];    }  }  return compressed ? default_actions[state] : 0;}  }
class C{  public int readNext(boolean ignoreComments) throws CoreException {  int curr=0;  do {    try {      curr=this.scanner.getNextToken();      if (curr == TerminalTokens.TokenNameEOF) {        throw new CoreException(createError(END_OF_FILE,"End Of File",null));      }    } catch (    InvalidInputException e) {      throw new CoreException(createError(LEXICAL_ERROR,e.getMessage(),e));    }  } while (ignoreComments && isComment(curr));  return curr;}  }
class C{  public boolean epsilonEquals(Matrix4f m1,float epsilon){  boolean status=true;  if (Math.abs(this.m00 - m1.m00) > epsilon) {    status=false;  }  if (Math.abs(this.m01 - m1.m01) > epsilon) {    status=false;  }  if (Math.abs(this.m02 - m1.m02) > epsilon) {    status=false;  }  if (Math.abs(this.m03 - m1.m03) > epsilon) {    status=false;  }  if (Math.abs(this.m10 - m1.m10) > epsilon) {    status=false;  }  if (Math.abs(this.m11 - m1.m11) > epsilon) {    status=false;  }  if (Math.abs(this.m12 - m1.m12) > epsilon) {    status=false;  }  if (Math.abs(this.m13 - m1.m13) > epsilon) {    status=false;  }  if (Math.abs(this.m20 - m1.m20) > epsilon) {    status=false;  }  if (Math.abs(this.m21 - m1.m21) > epsilon) {    status=false;  }  if (Math.abs(this.m22 - m1.m22) > epsilon) {    status=false;  }  if (Math.abs(this.m23 - m1.m23) > epsilon) {    status=false;  }  if (Math.abs(this.m30 - m1.m30) > epsilon) {    status=false;  }  if (Math.abs(this.m31 - m1.m31) > epsilon) {    status=false;  }  if (Math.abs(this.m32 - m1.m32) > epsilon) {    status=false;  }  if (Math.abs(this.m33 - m1.m33) > epsilon) {    status=false;  }  return (status);}  }
class C{  public static void append(Path self,Object text,String charset) throws IOException {  append(self,text,charset,false);}  }
class C{  private int[] buildColumnIndiciesArray(Cursor cursor,String[] columnNames){  int[] columns=new int[columnNames.length];  for (int i=0; i < columnNames.length; i++) {    columns[i]=cursor.getColumnIndexOrThrow(columnNames[i]);  }  return columns;}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  private void writeLocalSymbolTable(SymbolTable symTab){  assert symTab.isLocalTable();  final int originalOffset=myBuffer.length - myOffset;  writeSymbolsField(symTab);  writeImportsField(symTab);  writePrefix(TYPE_STRUCT,myBuffer.length - myOffset - originalOffset);  byte[] ionSymbolTableByteArray={(byte)(0x80 | 1),(byte)(0x80 | ION_SYMBOL_TABLE_SID)};  writeBytes(ionSymbolTableByteArray);  writePrefix(TYPE_ANNOTATIONS,myBuffer.length - myOffset - originalOffset);}  }
class C{  public InputStream openStream(String[] mimeTypes) throws IOException {  List mt=new ArrayList(mimeTypes.length);  for (int i=0; i < mimeTypes.length; i++)   mt.add(mimeTypes[i]);  return data.openStream(userAgent,mt.iterator());}  }
class C{  public void testNextGaussian(){  double f=ThreadLocalRandom.current().nextGaussian();  int i=0;  while (i < NCALLS && ThreadLocalRandom.current().nextGaussian() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  public static double manhattanDistance(Problem problem,Solution a,Solution b){  return distance(problem,a,b,1.0);}  }
class C{  public static final Vec3D fromXYTheta(float theta){  return new Vec3D((float)Math.cos(theta),(float)Math.sin(theta),0);}  }
class C{  public AreaEntity(){  this(1,1);}  }
class C{  public boolean isConfirmable(){  return confirmable;}  }
class C{  public static void closeEL(Object obj){  if (obj instanceof InputStream)   IOUtil.closeEL((InputStream)obj); else   if (obj instanceof OutputStream)   IOUtil.closeEL((OutputStream)obj); else   if (obj instanceof Writer)   IOUtil.closeEL((Writer)obj); else   if (obj instanceof Reader)   IOUtil.closeEL((Reader)obj); else   if (obj instanceof Closeable)   IOUtil.closeEL((Closeable)obj); else   if (obj instanceof ZipFile)   IOUtil.closeEL((ZipFile)obj); else   if (obj instanceof ResultSet)   IOUtil.closeEL((ResultSet)obj); else   if (obj instanceof Connection)   IOUtil.closeEL((Connection)obj); else {    try {      Method method=obj.getClass().getMethod("close",new Class[0]);      method.invoke(obj,new Object[0]);    } catch (    Throwable e) {    }  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,Math.sqrt(z1));        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean isProgressiveRenderingEnabled(){  return mProgressiveRenderingEnabled;}  }
class C{  private Map<String,String> parseLicenseVendorStrings(String licenseText){  Pattern pattern=Pattern.compile(LicenseConstants.LICENSE_PATTERN,Pattern.DOTALL);  Map<String,String> featureMap=new HashMap<String,String>();  String[] licenseFeatures=licenseText.split(LicenseConstants.LICENSE_FEATRES_DELIM);  for (  String licenseFeature : licenseFeatures) {    if (licenseFeature == null || licenseFeature.isEmpty()) {      continue;    }    Matcher matcher=pattern.matcher(licenseFeature.trim());    if (matcher.find()) {      featureMap.put(matcher.group(1),matcher.group(2));    }  }  return featureMap;}  }
class C{  private boolean isValid(char value){  return isLetter(value) || isSpecial(value);}  }
class C{  public PrintInfo(String Name,int AD_Table_ID,int Record_ID,int C_BPartner_ID){  setName(Name);  setAD_Table_ID(AD_Table_ID);  setRecord_ID(Record_ID);  setC_BPartner_ID(C_BPartner_ID);}  }
class C{  private void loadChat(String wallId,String userId,String chatName,String image,String tagName){  final String chatId=Utils.generateChatId(userId,AppConstants.UserInfo.INSTANCE.getId());  if (getActivity() != null) {    final Intent chatScreenActivity=new Intent(getActivity(),ChatScreenActivity.class);    chatScreenActivity.putExtra(AppConstants.Keys.USER_ID,userId);    chatScreenActivity.putExtra(AppConstants.Keys.CHAT_ID,chatId);    chatScreenActivity.putExtra(AppConstants.Keys.CHAT_TITLE,chatName);    chatScreenActivity.putExtra(AppConstants.Keys.PROFILE_IMAGE,image);    chatScreenActivity.putExtra(AppConstants.Keys.WALL_ID,wallId);    chatScreenActivity.putExtra(AppConstants.Keys.FROM_WALL,true);    chatScreenActivity.putExtra(AppConstants.Keys.TAG_NAME,tagName);    chatScreenActivity.putExtra(AppConstants.Keys.MY_ID,AppConstants.UserInfo.INSTANCE.getId());    startActivity(chatScreenActivity);  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  requestWindowFeature(Window.FEATURE_NO_TITLE);  setContentView(R.layout.commandadd);  commandInput=(EditText)findViewById(R.id.command);  adapter=new ArrayAdapter<String>(this,R.layout.commanditem);  ListView list=(ListView)findViewById(R.id.commands);  list.setAdapter(adapter);  list.setOnItemClickListener(this);  ((Button)findViewById(R.id.add)).setOnClickListener(this);  ((Button)findViewById(R.id.ok)).setOnClickListener(this);  ((Button)findViewById(R.id.cancel)).setOnClickListener(this);  okButton=(Button)findViewById(R.id.ok);  okButton.setOnClickListener(this);  okButton.setEnabled(false);  commands=getIntent().getExtras().getStringArrayList(Extra.COMMANDS);  for (  String command : commands) {    adapter.add(command);  }}  }
class C{  @Override public String toString(){  return "[" + this.mean + ", "+ this.standardDeviation+ "]";}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public void removeResource(final Resource resource,final int quantity){  if (quantity < 0) {    throw new IllegalArgumentException("quantity must be positive");  }  final int current=getQuantity(resource);  if ((current - quantity) < 0) {    throw new IllegalArgumentException("Cant remove more than player has of resource: " + resource.getName() + ". current:"+ current+ " toRemove: "+ quantity);  }  change(resource,-quantity);}  }
class C{  public static boolean isOwnCertificateUsed(RcsSettings rcsSettings) throws KeyStoreException {  String certRoot=rcsSettings.getTlsCertificateRoot();  if (TextUtils.isEmpty(certRoot)) {    return false;  }  return isCertificateEntry(buildCertificateAlias(Uri.parse(certRoot)));}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"ADC");  translateAll(environment,instruction,"ADC",instructions);}  }
class C{  final public MutableString append(char c){  final int newLength=length() + 1;  expand(newLength);  array[newLength - 1]=c;  hashLength=hashLength < 0 ? -1 : newLength;  return this;}  }
class C{  public static GraalGraphError transformAndAddContext(GraalError e,Graph newGraph){  GraalGraphError graphError;  if (e instanceof GraalGraphError) {    graphError=(GraalGraphError)e;  } else {    graphError=new GraalGraphError(e);  }  return graphError.addContext(newGraph);}  }
class C{  public void start(BundleContext bundleContext) throws Exception {  FileOutputStream fos=new FileOutputStream("bundle-output.txt",false);  try {    fos.write("Hello, World".getBytes("UTF-8"));    fos.flush();  }  finally {    fos.close();  }}  }
class C{  protected String paramString(){  String rootPaneCheckingEnabledString=(rootPaneCheckingEnabled ? "true" : "false");  return super.paramString() + ",rootPaneCheckingEnabled=" + rootPaneCheckingEnabledString;}  }
class C{  public QueryObject<R> andSelect(QProperty<?>... properties){  for (  QProperty<?> property : properties) {    property.getQueryObject().projectedProperties.add(property.getName());  }  return this;}  }
class C{  public final CC x2(String x2){  return corrPos(x2,2);}  }
class C{  public CUDA_POINTER_ATTRIBUTE_P2P_TOKENS(){}  }
class C{  public void mergeWithNew(Annotation newAnnotation,Annotation... annotations){  mergeWithNew(newAnnotation,Arrays.asList(annotations));}  }
class C{  private void loadStyleData(int workspaceTheme){  TypedArray styles;  if (workspaceTheme != 0) {    styles=mContext.obtainStyledAttributes(workspaceTheme,R.styleable.BlocklyVertical);  } else {    styles=mContext.obtainStyledAttributes(R.styleable.BlocklyVertical);  }  try {    mUseHats=styles.getBoolean(R.styleable.BlocklyVertical_blockHat,false);    setFieldLayout(Field.TYPE_DROPDOWN,R.layout.default_field_dropdown);    setFieldLayout(Field.TYPE_LABEL,R.layout.default_field_label);    setFieldLayout(Field.TYPE_CHECKBOX,R.layout.default_field_checkbox);    setFieldLayout(Field.TYPE_DATE,R.layout.default_field_date);    setFieldLayout(Field.TYPE_ANGLE,R.layout.default_field_angle);    setFieldLayout(Field.TYPE_NUMBER,R.layout.default_field_number);    setFieldLayout(Field.TYPE_COLOR,R.layout.default_field_color);    setFieldLayout(Field.TYPE_INPUT,R.layout.default_field_input);    setFieldLayout(Field.TYPE_VARIABLE,R.layout.default_field_variable);  }  finally {    styles.recycle();  }}  }
class C{  public Xtruct2(Xtruct2 other){  __isset_bitfield=other.__isset_bitfield;  this.byte_thing=other.byte_thing;  if (other.isSetStruct_thing()) {    this.struct_thing=new Xtruct(other.struct_thing);  }  this.i32_thing=other.i32_thing;}  }
class C{  private void findResolvConf(String file){  InputStream in=null;  try {    in=new FileInputStream(file);  } catch (  FileNotFoundException e) {    return;  }  InputStreamReader isr=new InputStreamReader(in);  BufferedReader br=new BufferedReader(isr);  List lserver=new ArrayList(0);  List lsearch=new ArrayList(0);  int lndots=-1;  try {    String line;    while ((line=br.readLine()) != null) {      if (line.startsWith("nameserver")) {        StringTokenizer st=new StringTokenizer(line);        st.nextToken();        addServer(st.nextToken(),lserver);      } else       if (line.startsWith("domain")) {        StringTokenizer st=new StringTokenizer(line);        st.nextToken();        if (!st.hasMoreTokens())         continue;        if (lsearch.isEmpty())         addSearch(st.nextToken(),lsearch);      } else       if (line.startsWith("search")) {        if (!lsearch.isEmpty())         lsearch.clear();        StringTokenizer st=new StringTokenizer(line);        st.nextToken();        while (st.hasMoreTokens())         addSearch(st.nextToken(),lsearch);      } else       if (line.startsWith("options")) {        StringTokenizer st=new StringTokenizer(line);        st.nextToken();        while (st.hasMoreTokens()) {          String token=st.nextToken();          if (token.startsWith("ndots:")) {            lndots=parseNdots(token);          }        }      }    }    br.close();  } catch (  IOException e) {  }  configureFromLists(lserver,lsearch);  configureNdots(lndots);}  }
class C{  private static int med3(double x[],int a,int b,int c){  return (x[a] < x[b] ? (x[b] < x[c] ? b : x[a] < x[c] ? c : a) : (x[b] > x[c] ? b : x[a] > x[c] ? c : a));}  }
class C{  public void updatePointCloudModelMatrix(float[] translation,float[] quaternion){  float[] tempMultMatrix=new float[16];  Matrix.setIdentityM(tempMultMatrix,0);  Matrix.multiplyMM(tempMultMatrix,0,mColorCamera2IMUMatrix,0,mOpengl2ColorCameraMatrix,0);  float[] tempInvertMatrix=new float[16];  Matrix.setIdentityM(tempInvertMatrix,0);  Matrix.invertM(tempInvertMatrix,0,mDevice2IMUMatrix,0);  float[] tempMultMatrix2=new float[16];  Matrix.setIdentityM(tempMultMatrix2,0);  Matrix.multiplyMM(tempMultMatrix2,0,tempInvertMatrix,0,tempMultMatrix,0);  float[] quaternionMatrix=new float[16];  Matrix.setIdentityM(quaternionMatrix,0);  quaternionMatrix=quaternionMatrixOpenGL(quaternion);  float[] tempMultMatrix3=new float[16];  Matrix.setIdentityM(tempMultMatrix3,0);  Matrix.setIdentityM(mPointCloudModelMatrix,0);  Matrix.multiplyMM(tempMultMatrix3,0,quaternionMatrix,0,tempMultMatrix2,0);  Matrix.multiplyMM(mPointCloudModelMatrix,0,mConversionMatrix,0,tempMultMatrix3,0);  mPointCloudModelMatrix[12]+=translation[0];  mPointCloudModelMatrix[13]+=translation[2];  mPointCloudModelMatrix[14]+=-1f * translation[1];}  }
class C{  public static void assertU(String update){  assertU(null,update);}  }
class C{  public void selectAllDoNotFireEvent(){  selectAll(false);}  }
class C{  public String id(){  return id;}  }
class C{  public void rotate(ModelRenderer box,float x,float y,float z){  if (!this.correctAnimation) {    return;  }  this.getTransform(box).addRotation(x,y,z);}  }
class C{  private void player(int x,int y,Direction direction){  Player player=SingletonRepository.getRuleProcessor().getPlayer(playerName);  if (player != null) {    player.setPosition(this.getX() + x,this.getY() + y);    player.setDirection(direction);  }}  }
class C{  Object readJGMessage(Message jgmsg){  Object result=null;  int messageLength=jgmsg.getLength();  if (logger.isTraceEnabled()) {    logger.trace("deserializing a message of length " + messageLength);  }  if (messageLength == 0) {    logger.trace("message length is zero - ignoring");    return null;  }  Exception problem=null;  byte[] buf=jgmsg.getRawBuffer();  try {    long start=services.getStatistics().startMsgDeserialization();    DataInputStream dis=new DataInputStream(new ByteArrayInputStream(buf,jgmsg.getOffset(),jgmsg.getLength()));    short ordinal=Version.readOrdinal(dis);    if (ordinal < Version.CURRENT_ORDINAL) {      dis=new VersionedDataInputStream(dis,Version.fromOrdinalNoThrow(ordinal,true));    }    boolean isEncrypted=dis.readBoolean();    if (isEncrypted && encrypt == null) {      throw new GemFireConfigException("Got remote message as encrypted");    }    if (isEncrypted) {      result=readEncryptedMessage(dis,ordinal,encrypt);    } else {      result=deserializeMessage(dis,ordinal);    }    services.getStatistics().endMsgDeserialization(start);  } catch (  ClassNotFoundException|IOException|RuntimeException e) {    problem=e;  }catch (  Exception e) {    problem=e;  }  if (problem != null) {    logger.error(LocalizedMessage.create(LocalizedStrings.GroupMembershipService_EXCEPTION_DESERIALIZING_MESSAGE_PAYLOAD_0,jgmsg),problem);    return null;  }  return result;}  }
class C{  protected double distribution(double[][] props,double[][][] dists,int att,int[] sortedIndices,double[] weights,double[][] subsetWeights,Instances data) throws Exception {  double splitPoint=Double.NaN;  Attribute attribute=data.attribute(att);  double[][] dist=null;  int i;  if (attribute.isNominal()) {    dist=new double[attribute.numValues()][data.numClasses()];    for (i=0; i < sortedIndices.length; i++) {      Instance inst=data.instance(sortedIndices[i]);      if (inst.isMissing(att)) {        break;      }      dist[(int)inst.value(att)][(int)inst.classValue()]+=weights[i];    }  } else {    double[][] currDist=new double[2][data.numClasses()];    dist=new double[2][data.numClasses()];    for (int j=0; j < sortedIndices.length; j++) {      Instance inst=data.instance(sortedIndices[j]);      if (inst.isMissing(att)) {        break;      }      currDist[1][(int)inst.classValue()]+=weights[j];    }    double priorVal=priorVal(currDist);    System.arraycopy(currDist[1],0,dist[1],0,dist[1].length);    double currSplit=data.instance(sortedIndices[0]).value(att);    double currVal, bestVal=-Double.MAX_VALUE;    for (i=0; i < sortedIndices.length; i++) {      Instance inst=data.instance(sortedIndices[i]);      if (inst.isMissing(att)) {        break;      }      if (inst.value(att) > currSplit) {        currVal=gain(currDist,priorVal);        if (currVal > bestVal) {          bestVal=currVal;          splitPoint=(inst.value(att) + currSplit) / 2.0;          if (splitPoint <= currSplit) {            splitPoint=inst.value(att);          }          for (int j=0; j < currDist.length; j++) {            System.arraycopy(currDist[j],0,dist[j],0,dist[j].length);          }        }      }      currSplit=inst.value(att);      currDist[0][(int)inst.classValue()]+=weights[i];      currDist[1][(int)inst.classValue()]-=weights[i];    }  }  props[att]=new double[dist.length];  for (int k=0; k < props[att].length; k++) {    props[att][k]=Utils.sum(dist[k]);  }  if (!(Utils.sum(props[att]) > 0)) {    for (int k=0; k < props[att].length; k++) {      props[att][k]=1.0 / props[att].length;    }  } else {    Utils.normalize(props[att]);  }  while (i < sortedIndices.length) {    Instance inst=data.instance(sortedIndices[i]);    for (int j=0; j < dist.length; j++) {      dist[j][(int)inst.classValue()]+=props[att][j] * weights[i];    }    i++;  }  subsetWeights[att]=new double[dist.length];  for (int j=0; j < dist.length; j++) {    subsetWeights[att][j]+=Utils.sum(dist[j]);  }  dists[att]=dist;  return splitPoint;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (toto: ");  result.append(toto);  result.append(')');  return result.toString();}  }
class C{  public MemberDefinition matchMethod(Environment env,ClassDefinition accessor,Identifier methodName,Type[] argumentTypes) throws AmbiguousMember, ClassNotFound {  return matchMethod(env,accessor,methodName,argumentTypes,false,null);}  }
class C{  public static String toString(JSONArray ja) throws JSONException {  int i;  JSONObject jo;  String key;  Iterator<String> keys;  int length;  Object object;  StringBuilder sb=new StringBuilder();  String tagName;  String value;  tagName=ja.getString(0);  XML.noSpace(tagName);  tagName=XML.escape(tagName);  sb.append('<');  sb.append(tagName);  object=ja.opt(1);  if (object instanceof JSONObject) {    i=2;    jo=(JSONObject)object;    keys=jo.keys();    while (keys.hasNext()) {      key=keys.next();      XML.noSpace(key);      value=jo.optString(key);      if (value != null) {        sb.append(' ');        sb.append(XML.escape(key));        sb.append('=');        sb.append('"');        sb.append(XML.escape(value));        sb.append('"');      }    }  } else {    i=1;  }  length=ja.length();  if (i >= length) {    sb.append('/');    sb.append('>');  } else {    sb.append('>');    do {      object=ja.get(i);      i+=1;      if (object != null) {        if (object instanceof String) {          sb.append(XML.escape(object.toString()));        } else         if (object instanceof JSONObject) {          sb.append(toString((JSONObject)object));        } else         if (object instanceof JSONArray) {          sb.append(toString((JSONArray)object));        } else {          sb.append(object.toString());        }      }    } while (i < length);    sb.append('<');    sb.append('/');    sb.append(tagName);    sb.append('>');  }  return sb.toString();}  }
class C{  BindRequest waitForRequest(long timeout) throws IllegalStateException, TimeoutException {  lock.lock();  try {    if (alreadyWaitForRequest) {      throw new IllegalStateException("waitForRequest(long) method already invoked");    } else     if (request == null) {      try {        requestCondition.await(timeout,TimeUnit.MILLISECONDS);      } catch (      InterruptedException e) {        Thread.currentThread().interrupt();        throw new RuntimeException("Interrupted");      }    }    if (request != null) {      return request;    } else {      throw new TimeoutException("Waiting for bind request take time too long");    }  }  finally {    alreadyWaitForRequest=true;    lock.unlock();  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.N4_MEMBER_DECLARATION__DECLARED_MODIFIERS:    return getDeclaredModifiers();case N4JSPackage.N4_MEMBER_DECLARATION__OWNER:  if (resolve)   return getOwner();return basicGetOwner();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void trim(){  objects.trimToSize();}  }
class C{  public static boolean isITLBasedSearch(VolumeInfo volumeInfo){  return !volumeInfo.getITLs().isEmpty();}  }
class C{  protected void sendSelfFailurePatch(T task,String failureMessage){  sendSelfPatch(task,TaskState.TaskStage.FAILED,null);}  }
class C{  public static void main(String[] argv){  runFilter(new Randomize(),argv);}  }
class C{  Object toType(String value,String pattern,Locale locale){  Calendar calendar=toCalendar(value,pattern,locale);  return toType(calendar);}  }
class C{  public Vector rightMultiply(Vector vec){  if (!(vec instanceof GF2Vector)) {    throw new ArithmeticException("vector is not defined over GF(2)");  }  if (vec.length != numColumns) {    throw new ArithmeticException("length mismatch");  }  int[] v=((GF2Vector)vec).getVecArray();  int[] res=new int[(numRows + 31) >>> 5];  for (int i=0; i < numRows; i++) {    int help=0;    for (int j=0; j < length; j++) {      help^=matrix[i][j] & v[j];    }    int bitValue=0;    for (int j=0; j < 32; j++) {      bitValue^=(help >>> j) & 1;    }    if (bitValue == 1) {      res[i >>> 5]|=1 << (i & 0x1f);    }  }  return new GF2Vector(res,numRows);}  }
class C{  public RelationNode(final String operator,final ConditionNode lhs,final ConditionNode rhs){  super(Lists.newArrayList(lhs,rhs));  this.operator=operator;}  }
class C{  public static String toString(Object object,String tagName) throws JSONException {  StringBuffer sb=new StringBuffer();  int i;  JSONArray ja;  JSONObject jo;  String key;  Iterator keys;  int length;  String string;  Object value;  if (object instanceof JSONObject) {    if (tagName != null) {      sb.append('<');      sb.append(tagName);      sb.append('>');    }    jo=(JSONObject)object;    keys=jo.keys();    while (keys.hasNext()) {      key=keys.next().toString();      value=jo.opt(key);      if (value == null) {        value="";      }      if (value instanceof String) {        string=(String)value;      } else {        string=null;      }      if ("content".equals(key)) {        if (value instanceof JSONArray) {          ja=(JSONArray)value;          length=ja.length();          for (i=0; i < length; i+=1) {            if (i > 0) {              sb.append('\n');            }            sb.append(escape(ja.get(i).toString()));          }        } else {          sb.append(escape(value.toString()));        }      } else       if (value instanceof JSONArray) {        ja=(JSONArray)value;        length=ja.length();        for (i=0; i < length; i+=1) {          value=ja.get(i);          if (value instanceof JSONArray) {            sb.append('<');            sb.append(key);            sb.append('>');            sb.append(toString(value));            sb.append("</");            sb.append(key);            sb.append('>');          } else {            sb.append(toString(value,key));          }        }      } else       if ("".equals(value)) {        sb.append('<');        sb.append(key);        sb.append("/>");      } else {        sb.append(toString(value,key));      }    }    if (tagName != null) {      sb.append("</");      sb.append(tagName);      sb.append('>');    }    return sb.toString();  } else {    if (object.getClass().isArray()) {      object=new JSONArray(object);    }    if (object instanceof JSONArray) {      ja=(JSONArray)object;      length=ja.length();      for (i=0; i < length; i+=1) {        sb.append(toString(ja.opt(i),tagName == null ? "array" : tagName));      }      return sb.toString();    } else {      string=(object == null) ? "null" : escape(object.toString());      return (tagName == null) ? "\"" + string + "\"" : (string.length() == 0) ? "<" + tagName + "/>" : "<" + tagName + ">"+ string+ "</"+ tagName+ ">";    }  }}  }
class C{  public TessCallbackAdapter(CombineContext cc){  this.cc=cc;}  }
class C{  public static String ipBytesToStr(byte[] ip){  try {    return InetAddress.getByAddress(null,ip).getHostAddress();  } catch (  UnknownHostException e) {    throw new IllegalArgumentException("Unexpected IP address: " + Arrays.toString(ip));  }}  }
class C{  private Node(String name,Node<T,E> parent,E kind){  this.name=name;  this.parent=parent;  this.kind=kind;}  }
class C{  public void endScopes(int first){  int prevNextReg=nextreg;  nextreg=first;  for (int i=nextreg; i < prevNextReg; i++)   endScope(i);}  }
class C{  public static <Type>Type newInstance(final Class<Type> ofClass){  try {    return ClassReflection.newInstance(ofClass);  } catch (  final Throwable exception) {    throw new GdxRuntimeException("Unable to create a new instance of class: " + ofClass,exception);  }}  }
class C{  public static String makeEndpointsKey(List<String> endpoints){  StringBuilder key=new StringBuilder();  if (endpoints.isEmpty()) {    return NULL_KEY;  }  TreeSet<String> set=new TreeSet<String>();  set.addAll(endpoints);  Iterator<String> iter=set.iterator();  key.append(iter.next().replaceAll(":","").toUpperCase());  while (iter.hasNext()) {    key.append("_").append(iter.next().replaceAll(":","").toUpperCase());  }  return key.toString();}  }
class C{  public void stop(){  mStarted=false;  mEnableSessionInvalidationsTimer.pause();  Intent intent=new Intent(mContext,InvalidationClientService.class);  intent.putExtra(InvalidationIntentProtocol.EXTRA_STOP,true);  mContext.startService(intent);}  }
class C{  public static int size(CharSequence text){  return text.length();}  }
class C{  public static boolean isLetter(Character self){  return Character.isLetter(self);}  }
class C{  boolean isNumeric(char ch){  return (ch >= '0' && ch <= '9');}  }
class C{  private void appFirstRunTasks(){  final String PREFS_NAME="MyPrefsFile";  final String PREF_VERSION_CODE_KEY="version_code";  final int VERSION_NONE=-1;  int currentVersionCode=0;  try {    currentVersionCode=getPackageManager().getPackageInfo(getPackageName(),0).versionCode;  } catch (  android.content.pm.PackageManager.NameNotFoundException e) {    e.printStackTrace();    return;  }  SharedPreferences prefs=getSharedPreferences(PREFS_NAME,MODE_PRIVATE);  int savedVersionCode=prefs.getInt(PREF_VERSION_CODE_KEY,VERSION_NONE);  if (currentVersionCode == savedVersionCode) {    Log.i(TAG,"Welcome again! Radiobeacon wasn't started for the first time");    return;  } else   if (savedVersionCode == VERSION_NONE) {    Log.i(TAG,"Welcome new user! Radiobeacon was started for the first time");    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {      AlertDialogUtils.newInstance(ID_IGNORE_DOZE_MODE,getString(R.string.dialog_ignore_doze_title),getString(R.string.dialog_ignore_doze_message),null,false).show(getSupportFragmentManager(),"ignore_doze");    }  } else   if (currentVersionCode > savedVersionCode) {    Log.i(TAG,String.format("Cool! You just upgraded from %s to %s",currentVersionCode,savedVersionCode));    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {      AlertDialogUtils.newInstance(ID_IGNORE_DOZE_MODE,getString(R.string.dialog_ignore_doze_title),getString(R.string.dialog_ignore_doze_message),null,false).show(getSupportFragmentManager(),"ignore_doze");    }  }  Log.i(TAG,String.format("Saving current version %s",currentVersionCode));  prefs.edit().putInt(PREF_VERSION_CODE_KEY,currentVersionCode).apply();}  }
class C{  public void updateAnalytics(double speed,double distance){  if (distance < 1000) {    tvdistance.setText(String.valueOf(Math.round(distance)));    tvdisunit.setText(R.string.meter);  } else {    tvdistance.setText(String.format("%.1f",distance / 1000));    tvdisunit.setText(R.string.km);  }  tvspeed.setText(String.format("%.1f",speed));}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  public static void print(long x){  out.print(x);  out.flush();}  }
class C{  private boolean isPointInsideView(float x,float y,View view){  int location[]=new int[2];  view.getLocationOnScreen(location);  int viewX=location[0];  int viewY=location[1];  if ((x > viewX && x < (viewX + view.getWidth())) && (y > viewY && y < (viewY + view.getHeight()))) {    return true;  } else {    return false;  }}  }
class C{  public CharRange(char start,char end){  this(start,end,false);}  }
class C{  protected SVGDrawingPanel createDrawingComponent(){  SVGDrawingPanel p=new SVGDrawingPanel();  p.setEditor(new DefaultDrawingEditor());  return p;}  }
class C{  public Object clone() throws CloneNotSupportedException {  if (digestSpi instanceof Cloneable) {    MessageDigestSpi digestSpiClone=(MessageDigestSpi)digestSpi.clone();    MessageDigest that=new Delegate(digestSpiClone,((MessageDigest)this).algorithm);    that.provider=((MessageDigest)this).provider;    that.state=((MessageDigest)this).state;    return that;  } else {    throw new CloneNotSupportedException();  }}  }
class C{  private void createContent(){  if (this.title != null) {    createTitle();  }  if (this.image != null) {    createImage();  }  if (this.description != null) {    createDescription();  }}  }
class C{  public JSONObject optJSONObject(String key){  Object object=this.opt(key);  return object instanceof JSONObject ? (JSONObject)object : null;}  }
class C{  public boolean isLastIdentityValueReadable(){  return lastIdentityValueReadable;}  }
class C{  public static Detector create(double alpha) throws LangDetectException {  Detector detector=createDetector();  detector.setAlpha(alpha);  return detector;}  }
class C{  static public void fatalError(String str){  fatalError(false,str);}  }
class C{  @Override void animateValue(float fraction){  super.animateValue(fraction);  int numValues=mValues.length;  for (int i=0; i < numValues; ++i) {    mValues[i].setAnimatedValue(mTarget);  }}  }
class C{  private boolean stringContainsSpecialCharacters(String line){  return line.indexOf(quotechar) != -1 || line.indexOf(escapechar) != -1 || line.indexOf(separator) != -1 || line.contains(DEFAULT_LINE_END) || line.contains(CARRIAGE_RETURN);}  }
class C{  public static GPFunctionSet functionSetFor(final String functionSetName,final EvolutionState state){  GPFunctionSet set=(GPFunctionSet)(((GPInitializer)state.initializer).functionSetRepository.get(functionSetName));  if (set == null)   state.output.error("The GP function set \"" + functionSetName + "\" could not be found.");  return set;}  }
class C{  public Map<String,Object> processOutputs(Map<String,Object> outputs,SBPortProcessorCallback portProcessor) throws SBPortProcessorException {  return processValues(outputs,job.getApp().getOutputs(),SBOutputPort.class,portProcessor);}  }
class C{  public String toString(){  return (super.toString() + "PrivateKeyUsage: [\n" + ((notBefore == null) ? "" : "From: " + notBefore.toString() + ", ")+ ((notAfter == null) ? "" : "To: " + notAfter.toString())+ "]\n");}  }
class C{  public StrBuilder append(final float value){  return append(String.valueOf(value));}  }
class C{  public Rotator(Context context){  mFinished=true;}  }
class C{  public void initialize() throws CarbonSortKeyAndGroupByException {  prefetch=Boolean.parseBoolean(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.CARBON_MERGE_SORT_PREFETCH,CarbonCommonConstants.CARBON_MERGE_SORT_PREFETCH_DEFAULT));  bufferSize=CarbonCommonConstants.CARBON_PREFETCH_BUFFERSIZE;  this.isSortTempFileCompressionEnabled=Boolean.parseBoolean(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.IS_SORT_TEMP_FILE_COMPRESSION_ENABLED,CarbonCommonConstants.IS_SORT_TEMP_FILE_COMPRESSION_ENABLED_DEFAULTVALUE));  if (this.isSortTempFileCompressionEnabled) {    LOGGER.info("Compression was used while writing the sortTempFile");  }  try {    this.sortTempFileNoOFRecordsInCompression=Integer.parseInt(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORDS_FOR_COMPRESSION,CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORD_FOR_COMPRESSION_DEFAULTVALUE));    if (this.sortTempFileNoOFRecordsInCompression < 1) {      LOGGER.error("Invalid value for: " + CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORDS_FOR_COMPRESSION + ": Only Positive Integer value(greater than zero) is allowed.Default value will"+ " be used");      this.sortTempFileNoOFRecordsInCompression=Integer.parseInt(CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORD_FOR_COMPRESSION_DEFAULTVALUE);    }  } catch (  NumberFormatException e) {    LOGGER.error("Invalid value for: " + CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORDS_FOR_COMPRESSION + ", only Positive Integer value is allowed.Default value will be used");    this.sortTempFileNoOFRecordsInCompression=Integer.parseInt(CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORD_FOR_COMPRESSION_DEFAULTVALUE);  }  initialise();}  }
class C{  public ISchedulingRule markerRule(IResource resource){  return null;}  }
class C{  private void drawEndpoints(PointPair pp,Graphics g){  if (getModelEdge() != null) {    Endpoint endpointA=getModelEdge().getEndpoint1();    Endpoint endpointB=getModelEdge().getEndpoint2();    if (endpointA == Endpoint.CIRCLE) {      drawCircleEndpoint(pp.getTo(),pp.getFrom(),g);    } else     if (endpointA == Endpoint.ARROW) {      drawArrowEndpoint(pp.getTo(),pp.getFrom(),g);    }    if (endpointB == Endpoint.CIRCLE) {      drawCircleEndpoint(pp.getFrom(),pp.getTo(),g);    } else     if (endpointB == Endpoint.ARROW) {      drawArrowEndpoint(pp.getFrom(),pp.getTo(),g);    }  } else {    drawArrowEndpoint(pp.getFrom(),pp.getTo(),g);  }}  }
class C{  public boolean isRespondToDisplayReportsEnabled() throws RcsGenericException {  try {    return mIConfig.isRespondToDisplayReportsEnabled();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  @RequestProcessing(value="/notifications/point",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,LoginCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showPointNotifications(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final JSONObject currentUser=userQueryService.getCurrentUser(request);  if (null == currentUser) {    response.sendError(HttpServletResponse.SC_FORBIDDEN);    return;  }  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get("skinDirName"));  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("/home/notifications/point.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  final String userId=currentUser.optString(Keys.OBJECT_ID);  String pageNumStr=request.getParameter("p");  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {    pageNumStr="1";  }  final int pageNum=Integer.valueOf(pageNumStr);  final int pageSize=Symphonys.getInt("pointNotificationsCnt");  final int windowSize=Symphonys.getInt("pointNotificationsWindowSize");  final JSONObject result=notificationQueryService.getPointNotifications(userId,pageNum,pageSize);  @SuppressWarnings("unchecked") final List<JSONObject> pointNotifications=(List<JSONObject>)result.get(Keys.RESULTS);  dataModel.put(Common.POINT_NOTIFICATIONS,pointNotifications);  fillNotificationCount(userId,dataModel);  notificationMgmtService.makeRead(pointNotifications);  final int recordCnt=result.getInt(Pagination.PAGINATION_RECORD_COUNT);  final int pageCount=(int)Math.ceil((double)recordCnt / (double)pageSize);  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);  if (!pageNums.isEmpty()) {    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));  }  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  @Override public Element useMarker(SVGPlot plot,Element parent,double x,double y,int stylenr,double size){  Element marker=plot.svgRect(x - size * .5,y - size * .5,size,size);  final String col;  if (stylenr == -1) {    col=dotcolor;  } else   if (stylenr == -2) {    col=greycolor;  } else {    col=colors.getColor(stylenr);  }  SVGUtil.setStyle(marker,SVGConstants.CSS_FILL_PROPERTY + ":" + col);  parent.appendChild(marker);  return marker;}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public void zip(JSONArray jsonarray) throws JSONException {  begin();  writeJSON(jsonarray);}  }
class C{  public WildcardQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  protected N4ClassDeclarationImpl(){  super();}  }
class C{  public static void v(String tag,String msg,Throwable tr){  println(VERBOSE,tag,msg,tr);}  }
class C{  protected void decodeBitmapData(final GifFrame frame,byte[] dstPixels){  if (frame != null) {    rawData.position(frame.bufferFrameStart);  }  final int nullCode=-1;  final int npix=(frame == null) ? width * height : frame.iw * frame.ih;  int available, clear, code_mask, code_size, end_of_information, in_code, old_code, bits, code, count, i, datum, data_size, first, top, bi, pi;  if (dstPixels == null || dstPixels.length < npix) {    dstPixels=new byte[npix];  }  if (prefix == null) {    prefix=new short[MAX_STACK_SIZE];  }  if (suffix == null) {    suffix=new byte[MAX_STACK_SIZE];  }  if (pixelStack == null) {    pixelStack=new byte[MAX_STACK_SIZE + 1];  }  data_size=read();  clear=1 << data_size;  end_of_information=clear + 1;  available=clear + 2;  old_code=nullCode;  code_size=data_size + 1;  code_mask=(1 << code_size) - 1;  for (code=0; code < clear; code++) {    prefix[code]=0;    suffix[code]=(byte)code;  }  datum=bits=count=first=top=pi=bi=0;  for (i=0; i < npix; ) {    if (top == 0) {      if (bits < code_size) {        if (count == 0) {          count=readBlock();          if (count <= 0) {            break;          }          bi=0;        }        datum+=((block[bi]) & 0xff) << bits;        bits+=8;        bi++;        count--;        continue;      }      code=datum & code_mask;      datum>>=code_size;      bits-=code_size;      if ((code > available) || (code == end_of_information)) {        break;      }      if (code == clear) {        code_size=data_size + 1;        code_mask=(1 << code_size) - 1;        available=clear + 2;        old_code=nullCode;        continue;      }      if (old_code == nullCode) {        pixelStack[top++]=suffix[code];        old_code=code;        first=code;        continue;      }      in_code=code;      if (code == available) {        pixelStack[top++]=(byte)first;        code=old_code;      }      while (code > clear) {        pixelStack[top++]=suffix[code];        code=prefix[code];      }      first=(suffix[code]) & 0xff;      if (available >= MAX_STACK_SIZE) {        break;      }      pixelStack[top++]=(byte)first;      prefix[available]=(short)old_code;      suffix[available]=(byte)first;      available++;      if (((available & code_mask) == 0) && (available < MAX_STACK_SIZE)) {        code_size++;        code_mask+=available;      }      old_code=in_code;    }    top--;    dstPixels[pi++]=pixelStack[top];    i++;  }  for (i=pi; i < npix; i++) {    dstPixels[i]=0;  }}  }
class C{  @Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){  mItemName=getString(CATALOG[position].nameId);  mSku=CATALOG[position].sku;  mManagedType=CATALOG[position].managed;}  }
class C{  public HAVING HAVING(String having){  return new HAVING(this,having);}  }
class C{  public Builder secondActivationFunction(String secondActivationFunction){  this.secondActivationFunction=secondActivationFunction;  return this;}  }
class C{  private void sleep(long millis,boolean interruptible) throws InterruptedException {  if (interruptible) {    if (Thread.interrupted())     throw new InterruptedException();    Thread.sleep(millis);    return;  } else {    sleep(millis);  }}  }
class C{  public String toString(Map lbInt2Str){  String res=originalData;  String labelStr=(String)lbInt2Str.get(new Integer(modelLabel));  if (labelStr != null) {    res+=Option.outputSeparator + labelStr.toUpperCase();  }  return res;}  }
class C{  protected final void error(Throwable ex){  if (done) {    UnsignalledExceptions.onErrorDropped(ex);    return;  }  done=true;  actual.onError(ex);}  }
class C{  public Element appendChild(NewElement newElement){  checkNotRemoved();  requireNonNull(newElement,"Required not null new element");  if (isVoid()) {    throw new XMLTreeException("Append child is not permitted on void elements");  }  final Node newNode=createNode(newElement);  final Element element=createElement(newNode);  delegate.appendChild(newNode);  xmlTree.appendChild(newElement,element,this);  return this;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 12:44:27.171 -0400",hash_original_method="B1F57A749E35030E5CB8EAB506D19441",hash_generated_method="620193A6AA3E0D720E2B0FB228FA1084") @Override public void onPanelClosed(int featureId,Menu menu){switch (featureId) {case Window.FEATURE_OPTIONS_PANEL:    mFragments.dispatchOptionsMenuClosed(menu);  break;}super.onPanelClosed(featureId,menu);}  }
class C{  @Override public void endWindow(){  if (!mergedTuple.isEmpty()) {    ArrayList<HashMap<K,Integer>> list=new ArrayList<HashMap<K,Integer>>();    for (    Map.Entry<K,Integer> entry : mergedTuple.entrySet()) {      HashMap<K,Integer> tuple=new HashMap<K,Integer>();      tuple.put(entry.getKey(),entry.getValue());      list.add(tuple);    }    mergedport.emit(list);    mergedTuple=new HashMap<K,Integer>();  }}  }
class C{  public void testBlockingForkJoinTask() throws Throwable {  ForkJoinPool p=new ForkJoinPool(4);  try {    ReentrantLock lock=new ReentrantLock();    ManagedLocker locker=new ManagedLocker(lock);    ForkJoinTask<Integer> f=new LockingFibTask(20,locker,lock);    p.execute(f);    assertEquals(6765,(int)f.get());  }  finally {    p.shutdownNow();  }}  }
class C{  protected void onRemoveModerated(String channel,String sourceNick,String sourceLogin,String sourceHostname){}  }
class C{  public boolean isText(){  return text;}  }
class C{  private void addRandomRectangle(final int width,final int height){  GeometricShapeFactory factory=new GeometricShapeFactory();  Coordinate lowerLeft=new Coordinate(random.nextDouble() * (width - 5),random.nextDouble() * (height - 5));  factory.setBase(lowerLeft);  factory.setWidth(random.nextDouble() * 15);  factory.setHeight(random.nextDouble() * 15);  Polygon rectangle=factory.createRectangle();  objects.addGeometry(new MasonGeometry(rectangle));}  }
class C{  @Override protected void doAction(){  generateKeyPair();}  }
class C{  public boolean isValidSimpleAssignmentTarget(){  boolean _isStrictMode=this.isStrictMode();  if (_isStrictMode) {    return (((this.getIdAsText() != null) && (!Objects.equal("arguments",this.getIdAsText()))) && (!Objects.equal("eval",this.getIdAsText())));  }  return true;}  }
class C{  protected OrderPosition(){  super();}  }
class C{  public AddOnChangesResult calculateUpdateChanges(AddOn addOn){  Set<AddOn> addOns=new HashSet<>();  addOns.add(addOn);  return calculateUpdateChanges(addOns);}  }
class C{  public CombineAction(DrawingEditor editor){  super(editor,new ODGPathFigure());  labels.configureAction(this,ID);}  }
class C{  @Nullable public static String findGcpRemoteUrl(@NotNull GitRepository repository){  Pair<GitRemote,String> remote=findGcpRemote(repository);  if (remote == null) {    return null;  }  return remote.getSecond();}  }
class C{  @Override public void close() throws IOException {  for (  OutputStream stream : outs)   stream.close();}  }
class C{  public static Rect calculateBottomInsetsOnRoundDevice(Display display,Rect systemInsets){  Point size=new Point();  display.getSize(size);  int width=size.x + systemInsets.left + systemInsets.right;  int height=size.y + systemInsets.top + systemInsets.bottom;  int minInset=(int)(height * Constants.WEAR_ROUND_MIN_INSET_PERCENT);  int bottomInset=systemInsets.bottom > minInset ? systemInsets.bottom : minInset;  double radius=width / 2;  double apothem=radius - bottomInset;  double chord=Math.sqrt(Math.pow(radius,2) - Math.pow(apothem,2)) * 2;  int leftRightInset=(int)((width - chord) / 2);  Log.d(TAG,"calculateBottomInsetsOnRoundDevice: " + bottomInset + ", "+ leftRightInset);  return new Rect(leftRightInset,0,leftRightInset,bottomInset);}  }
class C{  public synchronized boolean acquire() throws ReplicatorException {  if (isLocked())   return true;  try {    raf=new RandomAccessFile(lockFile,"rw");    FileChannel channel=raf.getChannel();    lock=channel.tryLock();  } catch (  FileNotFoundException e) {    throw new ReplicatorException("Unable to find or create lock file: " + lockFile.getAbsolutePath());  }catch (  Exception e) {    throw new ReplicatorException("Error while attempting to acquire file lock: " + lockFile.getAbsolutePath(),e);  } finally {    if (lock == null && raf != null) {      close(raf);    }  }  if (lock == null) {    if (raf != null)     close(raf);    return false;  } else   if (lock.isShared()) {    release();    return false;  } else   return true;}  }
class C{  protected void clearOutEvents(){}  }
class C{  public String readLine(){  String line;  try {    line=scanner.nextLine();  } catch (  Exception e) {    line=null;  }  return line;}  }
class C{  public static void main(String... args) throws Exception {  Class.forName("org.h2.Driver");  Connection conn=DriverManager.getConnection("jdbc:h2:mem:","sa","");  Statement stat=conn.createStatement();  stat.execute("CREATE ALIAS READ_TEXT_FILE " + "FOR \"org.h2.samples.FileFunctions.readTextFile\" ");  stat.execute("CREATE ALIAS READ_TEXT_FILE_WITH_ENCODING " + "FOR \"org.h2.samples.FileFunctions.readTextFileWithEncoding\" ");  stat.execute("CREATE ALIAS READ_FILE " + "FOR \"org.h2.samples.FileFunctions.readFile\" ");  ResultSet rs=stat.executeQuery("CALL READ_FILE('test.txt')");  rs.next();  byte[] data=rs.getBytes(1);  System.out.println("length: " + data.length);  rs=stat.executeQuery("CALL READ_TEXT_FILE('test.txt')");  rs.next();  String text=rs.getString(1);  System.out.println("text: " + text);  stat.close();  conn.close();}  }
class C{  public void verifyKey(VerifyEvent event){  event.doit=false;  if (event.stateMask == SWT.NONE && Character.isDigit(event.character)) {    int input=Character.getNumericValue(event.character);    ISelection selection=getTextEditor().getSelectionProvider().getSelection();    if (selection != null && selection instanceof ITextSelection) {      ITextSelection textSelection=(ITextSelection)selection;      IDocument document=getTextEditor().getDocumentProvider().getDocument(getTextEditor().getEditorInput());      if (textSelection.getLength() == 0 && document != null) {        IRegion region=DocumentHelper.getRegionExpandedBoth(document,textSelection.getOffset(),DocumentHelper.getDefaultWordDetector());        try {          String insertionText=" " + document.get(region.getOffset(),region.getLength());          StringBuilder sb=new StringBuilder();          for (int i=0; i < input; i++) {            sb.append(insertionText);          }          document.replace(region.getOffset() + region.getLength(),0,sb.toString());        } catch (        BadLocationException e) {          e.printStackTrace();        }      }    }  }  ((TLAEditor)getTextEditor()).getViewer().removeVerifyKeyListener(this);  statusLine.setMessage("");}  }
class C{  private static String processXYZPoints(final String points,final String pattern,final String coordSeparator,final String pointSeparator){  final int X_RELATIVE_INDEX=0;  final int Y_RELATIVE_INDEX=1;  final int COORDS_NUMBER=3;  final String POINT_SEPARATOR=" ";  final String[] pointsArray=points.split(POINT_SEPARATOR);  String coords="";  logger.debug("(processXYZPoints)(points:" + points + ",pattern:"+ pattern+ ",coordSeparator:"+ coordSeparator+ ",pointSeparator:"+ pointSeparator+ ")|start");  try {    for (int i=0; i < pointsArray.length; i=i + COORDS_NUMBER) {      coords+=String.format(pattern,pointsArray[i + X_RELATIVE_INDEX],pointsArray[i + Y_RELATIVE_INDEX],coordSeparator,((i != (pointsArray.length - COORDS_NUMBER)) ? pointSeparator : ""));    }  } catch (  final Exception ex) {    logger.warn("Sentinel-2 ingestion: Failed coordinates processing. " + "error message: " + ex.getMessage());  }  logger.debug("(processXYZPoints) return:" + coords + "|end");  return coords;}  }
class C{  @Bean(initMethod="start",destroyMethod="stop") @Profile(Constants.SPRING_PROFILE_DEVELOPMENT) public Server h2TCPServer() throws SQLException {  return Server.createTcpServer("-tcp","-tcpAllowOthers");}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  public Vertex checkRelationRelationshipForAllWords(Collection<Relationship> words,Vertex source,Vertex target,Network network){  if (words != null && !target.instanceOf(Primitive.WORD)) {    Set<Vertex> processed=new HashSet<Vertex>();    processed.add(target);    for (    Relationship word : words) {      Collection<Relationship> otherMeanings=word.getTarget().getRelationships(Primitive.MEANING);      if (otherMeanings != null) {        for (        Relationship meaning : otherMeanings) {          if (!processed.contains(meaning.getTarget())) {            processed.add(meaning.getTarget());            if (source.hasOrInheritsRelationship(meaning.getTarget(),target)) {              return network.createVertex(Primitive.TRUE);            } else             if (source.hasOrInheritsInverseRelationship(meaning.getTarget(),target)) {              return network.createVertex(Primitive.FALSE);            }          }        }      }    }  }  return null;}  }
class C{  public boolean contains(double element){  for (int i=buffers.length; --i >= 0; ) {    if ((!buffers[i].isEmpty()) && buffers[i].contains(element)) {      return true;    }  }  return false;}  }
class C{  public boolean isActive(){  return active;}  }
class C{  @Override public boolean equals(Object other){  if (this == other)   return true;  if (!(other instanceof ZipFileObject))   return false;  ZipFileObject o=(ZipFileObject)other;  return zarch.getAbsoluteFile().equals(o.zarch.getAbsoluteFile()) && name.equals(o.name);}  }
class C{  public boolean contains(Coord cur){  double latitude=cur.getLatitude();  if (latitude > getNorthEast().getLatitude() || latitude < getSouthWest().getLatitude()) {    return false;  }  double longitude=cur.getLongitude();  if (longitude < getSouthWest().getLongitude() || longitude > getNorthEast().getLongitude()) {    return false;  }  return true;}  }
class C{  public boolean decreasePriority(E key,double priority){  Entry<E> entry=getEntry(key);  if (entry == null) {    entry=makeEntry(key);  }  if (compare(priority,entry.priority) >= 0) {    return false;  }  entry.priority=priority;  heapifyDown(entry);  return true;}  }
class C{  private GlobalConfExtensions() throws RuntimeException {}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ATTRIBUTE___SIMPLE_ATTRIBUTE_1:    return simpleAttribute_1 != null && !simpleAttribute_1.isEmpty();case UmplePackage.ATTRIBUTE___AUTOUNIQUE_ATTRIBUTE_1:  return autouniqueAttribute_1 != null && !autouniqueAttribute_1.isEmpty();case UmplePackage.ATTRIBUTE___DERIVED_ATTRIBUTE_1:return derivedAttribute_1 != null && !derivedAttribute_1.isEmpty();case UmplePackage.ATTRIBUTE___COMPLEX_ATTRIBUTE_1:return complexAttribute_1 != null && !complexAttribute_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public Dimension preferredLayoutSize(Container target){  checkContainer(target);  checkRequests();  Dimension size=new Dimension(xTotal.preferred,yTotal.preferred);  Insets insets=target.getInsets();  size.width+=insets.left + insets.right;  size.height+=insets.top + insets.bottom;  return size;}  }
class C{  @Override public void onAction(final Player player,final RPAction action){  if (!action.has(TARGET)) {    return;  }  final Entity entity=EntityHelper.entityFromTargetName(action.get(TARGET),player);  if (entity != null) {    if (!checkEntityIsDomesticAnimal(player,entity)) {      return;    }    DomesticAnimal animal=(DomesticAnimal)entity;    if (!checkNotOwned(player,animal)) {      return;    }    if (!checkEntityIsReachable(player,animal)) {      return;    }    own(player,animal);  }  player.notifyWorldAboutChanges();}  }
class C{  public boolean onSneakUseWrench(World world,int x,int y,int z,EntityPlayer entityPlayer,int side,float hitX,float hitY,float hitZ){  return this.onUseWrench(world,x,y,z,entityPlayer,side,hitX,hitY,hitZ);}  }
class C{  public void method(pkg1.C1 c1){}  }
class C{  public synchronized void deleteObserver(Observer observer){  observers.remove(observer);}  }
class C{  public void checkSanity(){  logger.debug("checking sanity of CFG for " + methodName);  if (isEmpty())   throw new IllegalStateException("a CFG must contain at least one element");  for (  BytecodeInstruction initInstruction : getInitiallyKnownInstructions()) {    if (!knowsInstruction(initInstruction))     throw new IllegalStateException("expect CFG to contain all initially known instructions");  }  logger.debug(".. all initInstructions contained");  checkInstructionsContainedOnceConstraint();  logger.debug(".. CFG sanity ensured");}  }
class C{  static TBigInteger flipBit(TBigInteger val,int n){  int resSign=(val.sign == 0) ? 1 : val.sign;  int intCount=n >> 5;  int bitN=n & 31;  int resLength=Math.max(intCount + 1,val.numberLength) + 1;  int resDigits[]=new int[resLength];  int i;  int bitNumber=1 << bitN;  System.arraycopy(val.digits,0,resDigits,0,val.numberLength);  if (val.sign < 0) {    if (intCount >= val.numberLength) {      resDigits[intCount]=bitNumber;    } else {      int firstNonZeroDigit=val.getFirstNonzeroDigit();      if (intCount > firstNonZeroDigit) {        resDigits[intCount]^=bitNumber;      } else       if (intCount < firstNonZeroDigit) {        resDigits[intCount]=-bitNumber;        for (i=intCount + 1; i < firstNonZeroDigit; i++) {          resDigits[i]=-1;        }        resDigits[i]=resDigits[i]--;      } else {        i=intCount;        resDigits[i]=-((-resDigits[intCount]) ^ bitNumber);        if (resDigits[i] == 0) {          for (i++; resDigits[i] == -1; i++) {            resDigits[i]=0;          }          resDigits[i]++;        }      }    }  } else {    resDigits[intCount]^=bitNumber;  }  TBigInteger result=new TBigInteger(resSign,resLength,resDigits);  result.cutOffLeadingZeroes();  return result;}  }
class C{  public static Spanned linkifySpanned(@NonNull final Spanned spann,final int mask){  URLSpan[] existingSpans=spann.getSpans(0,spann.length(),URLSpan.class);  List<Pair<Integer,Integer>> links=new ArrayList<>();  for (  URLSpan urlSpan : existingSpans) {    links.add(new Pair<>(spann.getSpanStart(urlSpan),spann.getSpanEnd(urlSpan)));  }  Linkify.addLinks((Spannable)spann,mask);  for (int i=0; i < existingSpans.length; i++) {    ((Spannable)spann).setSpan(existingSpans[i],links.get(i).first,links.get(i).second,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  }  return spann;}  }
class C{  public static boolean isSameLength(long[] array1,long[] array2){  if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {    return false;  }  return true;}  }
class C{  protected static String LexicalErr(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,int curChar){  char curChar1=(char)curChar;  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar1)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  @Override public void declareOutputFields(OutputFieldsDeclarer declarer){}  }
class C{  @DELETE @Path("cron/{noteId}") @ZeppelinApi public Response removeCronJob(@PathParam("noteId") String noteId) throws IOException, IllegalArgumentException {  LOG.info("Remove cron job note {}",noteId);  Note note=notebook.getNote(noteId);  if (note == null) {    return new JsonResponse<>(Status.NOT_FOUND,"note not found.").build();  }  Map<String,Object> config=note.getConfig();  config.put("cron",null);  note.setConfig(config);  notebook.refreshCron(note.getId());  return new JsonResponse<>(Status.OK).build();}  }
class C{  public void namespaceAfterStartElement(final String prefix,final String uri) throws SAXException {  startPrefixMapping(prefix,uri,false);}  }
class C{  public void addEventListener(IRcsServiceRegistrationListener listener){synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.addEventListener(listener);  }}  }
class C{  public static boolean isPrime(int n){  for (int d=2; d <= n / 2; d++) {    if (n % d == 0)     return false;  }  return true;}  }
class C{  public boolean allowsCoreThreadTimeOut(){  return allowCoreThreadTimeOut;}  }
class C{  public InlineHyperlink(){}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private void calculateCumulativeVariance(){  double sumvariance=0.0d;  for (  Eigenvector ev : this.eigenVectors) {    sumvariance+=ev.getEigenvalue();  }  this.variances=new double[this.eigenVectors.size()];  this.cumulativeVariance=new double[variances.length];  double cumulative=0.0d;  int counter=0;  for (  Eigenvector ev : this.eigenVectors) {    double proportion=ev.getEigenvalue() / sumvariance;    this.variances[counter]=proportion;    cumulative+=proportion;    this.cumulativeVariance[counter]=cumulative;    counter++;  }}  }
class C{  protected void validateSubledgerDetails(){  Map<String,Object> accountDetailMap;  final Map<String,BigDecimal> subledAmtmap=new HashMap<String,BigDecimal>();  List<Map<String,Object>> subLegAccMap=null;  for (  final ReceiptDetailInfo rDetails : billDetailslist) {    final CChartOfAccountDetail chartOfAccountDetail=(CChartOfAccountDetail)getPersistenceService().find(" from CChartOfAccountDetail" + " where glCodeId=(select id from CChartOfAccounts where glcode=?)",rDetails.getGlcodeDetail());    if (null != chartOfAccountDetail) {      accountDetailMap=new HashMap<String,Object>();      accountDetailMap.put("glcodeId",rDetails.getGlcodeIdDetail());      accountDetailMap.put("glcode",rDetails.getGlcodeDetail());      if (rDetails.getDebitAmountDetail().compareTo(BigDecimal.ZERO) == 0)       accountDetailMap.put("amount",rDetails.getCreditAmountDetail()); else       if (rDetails.getCreditAmountDetail().compareTo(BigDecimal.ZERO) == 0)       accountDetailMap.put("amount",rDetails.getDebitAmountDetail());      if (null == subLegAccMap) {        subLegAccMap=new ArrayList<Map<String,Object>>();        subLegAccMap.add(accountDetailMap);      } else       subLegAccMap.add(accountDetailMap);    }  }  if (null != subLegAccMap) {    final Map<String,String> subLedgerMap=new HashMap<String,String>();    for (    final ReceiptDetailInfo rDetails : subLedgerlist)     if (rDetails.getGlcode() != null && rDetails.getGlcode().getId() != 0) {      if (null == subledAmtmap.get(rDetails.getGlcode().getId().toString()))       subledAmtmap.put(rDetails.getGlcode().getId().toString(),rDetails.getAmount()); else {        final BigDecimal debitTotalAmount=subledAmtmap.get(rDetails.getGlcode().getId().toString()).add(rDetails.getAmount());        subledAmtmap.put(rDetails.getGlcode().getId().toString(),debitTotalAmount);      }      final StringBuffer subledgerDetailRow=new StringBuffer();      subledgerDetailRow.append(rDetails.getGlcode().getId().toString()).append(rDetails.getDetailType().getId().toString()).append(rDetails.getDetailKeyId().toString());      if (null == subLedgerMap.get(subledgerDetailRow.toString()))       subLedgerMap.put(subledgerDetailRow.toString(),subledgerDetailRow.toString()); else       errors.add(new ValidationError("miscreciept.samesubledger.repeated","Same subledger should not allow for same account code"));    }    for (    final Map<String,Object> map : subLegAccMap) {      final String glcodeId=map.get("glcodeId").toString();      if (null == subledAmtmap.get(glcodeId))       errors.add(new ValidationError("miscreciept.samesubledger.entrymissing","Subledger detail entry is missing for account code: {0}",new String[]{map.get("glcode").toString()})); else       if (!subledAmtmap.get(glcodeId).equals(new BigDecimal(map.get("amount").toString())))       errors.add(new ValidationError("miscreciept.samesubledger.entrymissing","Total subledger amount is not matching for account code : {0}",new String[]{map.get("glcode").toString()}));    }  }}  }
class C{  public boolean isTaxonCore(){  return isCore() && extension.getRowType().equalsIgnoreCase(Constants.DWC_ROWTYPE_TAXON);}  }
class C{  public final byte[] acceptSecContext(InputStream is,int mechTokenSize) throws GSSException {  byte[] retVal=null;  SpNegoToken.NegoResult negoResult;  boolean valid=true;  if (DEBUG) {    System.out.println("Entered SpNegoContext.acceptSecContext with " + "state=" + printState(state));  }  if (isInitiator()) {    throw new GSSException(GSSException.FAILURE,-1,"acceptSecContext on an initiator " + "GSSContext");  }  try {    if (state == STATE_NEW) {      state=STATE_IN_PROCESS;      byte[] token=new byte[is.available()];      SpNegoToken.readFully(is,token);      if (DEBUG) {        System.out.println("SpNegoContext.acceptSecContext: " + "receiving token = " + SpNegoToken.getHexBytes(token));      }      NegTokenInit initToken=new NegTokenInit(token);      if (DEBUG) {        System.out.println("SpNegoContext.acceptSecContext: " + "received token of type = " + SpNegoToken.getTokenName(initToken.getType()));      }      Oid[] mechList=initToken.getMechTypeList();      DER_mechTypes=initToken.getMechTypes();      if (DER_mechTypes == null) {        valid=false;      }      Oid[] supported_mechSet=getAvailableMechs();      Oid mech_wanted=negotiate_mech_type(supported_mechSet,mechList);      if (mech_wanted == null) {        valid=false;      }      internal_mech=mech_wanted;      byte[] accept_token;      if (mechList[0].equals(mech_wanted) || (GSSUtil.isKerberosMech(mechList[0]) && GSSUtil.isKerberosMech(mech_wanted))) {        if (DEBUG && !mech_wanted.equals(mechList[0])) {          System.out.println("SpNegoContext.acceptSecContext: " + "negotiated mech adjusted to " + mechList[0]);        }        byte[] mechToken=initToken.getMechToken();        if (mechToken == null) {          throw new GSSException(GSSException.FAILURE,-1,"mechToken is missing");        }        accept_token=GSS_acceptSecContext(mechToken);        mech_wanted=mechList[0];      } else {        accept_token=null;      }      if (!GSSUtil.useMSInterop() && valid) {        valid=verifyMechListMIC(DER_mechTypes,initToken.getMechListMIC());      }      if (valid) {        if (isMechContextEstablished()) {          negoResult=SpNegoToken.NegoResult.ACCEPT_COMPLETE;          state=STATE_DONE;          setContextFlags();          if (DEBUG) {            System.out.println("SPNEGO Negotiated Mechanism = " + internal_mech + " "+ GSSUtil.getMechStr(internal_mech));          }        } else {          negoResult=SpNegoToken.NegoResult.ACCEPT_INCOMPLETE;          state=STATE_IN_PROCESS;        }      } else {        negoResult=SpNegoToken.NegoResult.REJECT;        state=STATE_DONE;      }      if (DEBUG) {        System.out.println("SpNegoContext.acceptSecContext: " + "mechanism wanted = " + mech_wanted);        System.out.println("SpNegoContext.acceptSecContext: " + "negotiated result = " + negoResult);      }      NegTokenTarg targToken=new NegTokenTarg(negoResult.ordinal(),mech_wanted,accept_token,null);      if (DEBUG) {        System.out.println("SpNegoContext.acceptSecContext: " + "sending token of type = " + SpNegoToken.getTokenName(targToken.getType()));      }      retVal=targToken.getEncoded();    } else     if (state == STATE_IN_PROCESS) {      byte[] token=new byte[is.available()];      SpNegoToken.readFully(is,token);      if (DEBUG) {        System.out.println("SpNegoContext.acceptSecContext: " + "receiving token = " + SpNegoToken.getHexBytes(token));      }      NegTokenTarg inputToken=new NegTokenTarg(token);      if (DEBUG) {        System.out.println("SpNegoContext.acceptSecContext: " + "received token of type = " + SpNegoToken.getTokenName(inputToken.getType()));      }      byte[] client_token=inputToken.getResponseToken();      byte[] accept_token=GSS_acceptSecContext(client_token);      if (accept_token == null) {        valid=false;      }      if (valid) {        if (isMechContextEstablished()) {          negoResult=SpNegoToken.NegoResult.ACCEPT_COMPLETE;          state=STATE_DONE;        } else {          negoResult=SpNegoToken.NegoResult.ACCEPT_INCOMPLETE;          state=STATE_IN_PROCESS;        }      } else {        negoResult=SpNegoToken.NegoResult.REJECT;        state=STATE_DONE;      }      NegTokenTarg targToken=new NegTokenTarg(negoResult.ordinal(),null,accept_token,null);      if (DEBUG) {        System.out.println("SpNegoContext.acceptSecContext: " + "sending token of type = " + SpNegoToken.getTokenName(targToken.getType()));      }      retVal=targToken.getEncoded();    } else {      if (DEBUG) {        System.out.println("AcceptSecContext: state = " + state);      }    }    if (DEBUG) {      System.out.println("SpNegoContext.acceptSecContext: " + "sending token = " + SpNegoToken.getHexBytes(retVal));    }  } catch (  IOException e) {    GSSException gssException=new GSSException(GSSException.FAILURE,-1,e.getMessage());    gssException.initCause(e);    throw gssException;  }  if (state == STATE_DONE) {    setContextFlags();  }  return retVal;}  }
class C{  public static <I,A>Parser<I,Unit> skipMany1(Parser<I,A> p){  return then(p,skipMany(p));}  }
class C{  final public boolean isCounter(){  return true;}  }
class C{  public SpringLayout(){}  }
class C{  @LargeTest public void testSurrogate() throws Exception {  final String SURROGATE_LETTER="\uD800\uDC00\uD800\uDC01\uD800\uDC02";  final String SURROGATE_SYMBOL="\uD83D\uDE01\uD83D\uDE02\uD83D\uDE03";  verifyWordLimits(SURROGATE_LETTER,0,0,6);  verifyWordLimits(SURROGATE_LETTER,1,0,6);  verifyWordLimits(SURROGATE_LETTER,2,0,6);  verifyWordLimits(SURROGATE_LETTER,3,0,6);  verifyWordLimits(SURROGATE_LETTER,4,0,6);  verifyWordLimits(SURROGATE_LETTER,5,0,6);  verifyWordLimits(SURROGATE_LETTER,6,0,6);  verifyWordLimits(SURROGATE_SYMBOL,0,-1,-1);  verifyWordLimits(SURROGATE_SYMBOL,1,-1,-1);  verifyWordLimits(SURROGATE_SYMBOL,2,-1,-1);  verifyWordLimits(SURROGATE_SYMBOL,3,-1,-1);  verifyWordLimits(SURROGATE_SYMBOL,4,-1,-1);  verifyWordLimits(SURROGATE_SYMBOL,5,-1,-1);  verifyWordLimits(SURROGATE_SYMBOL,6,-1,-1);}  }
class C{  private void onNodeUpdated(NodeUpdateSchedulerEvent event){  NodeId nodeID=event.getRMNode().getNodeID();  SchedulerNode schedulerNode=yarnScheduler.getSchedulerNode(nodeID);  schedulerNodes.put(nodeID.getHost(),schedulerNode);}  }
class C{  public SubpopulationFilteringEventsManager(final ObjectAttributes personAtts,final String subpop){  this(personAtts,new PlansConfigGroup().getSubpopulationAttributeName(),subpop);}  }
class C{  public static BufferedImage createThumbnail(BufferedImage img,int width,int height){  validateDimensions(width,height);  Dimension imgSize=new Dimension(img.getWidth(),img.getHeight());  Dimension thumbnailSize=new Dimension(width,height);  Resizer resizer=DefaultResizerFactory.getInstance().getResizer(imgSize,thumbnailSize);  BufferedImage thumbnailImage=new FixedSizeThumbnailMaker(width,height,true,true).resizer(resizer).make(img);  return thumbnailImage;}  }
class C{  public void doRegionsSyncOnPeerLoss(TestType typeOfTest){  IgnoredException.addIgnoredException("killing member's ds");  Host host=Host.getHost(0);  VM vm0=host.getVM(0);  VM vm1=host.getVM(1);  VM vm2=host.getVM(2);  final String name=this.getUniqueName() + "Region";  disconnectAllFromDS();  try {    createRegion(vm0,name,typeOfTest);    createRegion(vm1,name,typeOfTest);    createRegion(vm2,name,typeOfTest);    createEntry1(vm0);    InternalDistributedMember crashedID=getID(vm0);    VersionSource crashedVersionID=getVersionID(vm0);    createEntry2(vm1,crashedID,crashedVersionID);    DistributedTestUtils.crashDistributedSystem(vm0);    verifySynchronized(vm2,crashedID);  }  finally {    disconnectAllFromDS();  }}  }
class C{  public static boolean equalsFloat(ReadOnlyVector3 vec0,ReadOnlyVector3 vec1){  if (vec0 == vec1)   return (true);  if (Math.abs(vec0.getXf() - vec1.getXf()) > epsilonF)   return (false);  if (Math.abs(vec0.getYf() - vec1.getYf()) > epsilonF)   return (false);  if (Math.abs(vec0.getZf() - vec1.getZf()) > epsilonF)   return (false);  return (true);}  }
class C{  public GCMParameterSpecTest(int keyLength,int tagLength,int IVlength,int offset,int textLength,int AADLength) throws NoSuchAlgorithmException, NoSuchProviderException {  this.tagLength=tagLength;  this.IVlength=IVlength;  this.offset=offset;  IV=Helper.generateBytes(IVlength);  IVO=new byte[this.IVlength + this.offset];  System.arraycopy(IV,0,IVO,offset,this.IVlength);  data=Helper.generateBytes(textLength);  AAD=Helper.generateBytes(AADLength);  KeyGenerator kg=KeyGenerator.getInstance("AES","SunJCE");  kg.init(keyLength);  key=kg.generateKey();}  }
class C{  public static boolean inReplicationGroup(DbClient dbClient,final List<BlockSnapshot> snapshotList){  boolean isCgCreate=false;  if (snapshotList.size() == 1) {    BlockSnapshot snapshot=snapshotList.get(0);    if (snapshot.hasConsistencyGroup()) {      URI cgId=snapshot.getConsistencyGroup();      final BlockConsistencyGroup group=dbClient.queryObject(BlockConsistencyGroup.class,cgId);      isCgCreate=group != null;    }  } else   if (snapshotList.size() > 1) {    isCgCreate=true;  }  return isCgCreate;}  }
class C{  public SimpleNode(SimpleNode simpleNode,int id){  super(id);  this.localPosition=new Vector3(simpleNode.localPosition);  this.localRotation=new Quaternion(simpleNode.localRotation);  this.localScale=new Vector3(simpleNode.localScale);  this.combined=new Matrix4(simpleNode.combined);}  }
class C{  private ResultPoint correctTopRightRectangular(ResultPoint bottomLeft,ResultPoint bottomRight,ResultPoint topLeft,ResultPoint topRight,int dimensionTop,int dimensionRight){  float corr=distance(bottomLeft,bottomRight) / (float)dimensionTop;  int norm=distance(topLeft,topRight);  float cos=(topRight.getX() - topLeft.getX()) / norm;  float sin=(topRight.getY() - topLeft.getY()) / norm;  ResultPoint c1=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  corr=distance(bottomLeft,topLeft) / (float)dimensionRight;  norm=distance(bottomRight,topRight);  cos=(topRight.getX() - bottomRight.getX()) / norm;  sin=(topRight.getY() - bottomRight.getY()) / norm;  ResultPoint c2=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  if (!isValid(c1)) {    if (isValid(c2)) {      return c2;    }    return null;  }  if (!isValid(c2)) {    return c1;  }  int l1=Math.abs(dimensionTop - transitionsBetween(topLeft,c1).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c1).getTransitions());  int l2=Math.abs(dimensionTop - transitionsBetween(topLeft,c2).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c2).getTransitions());  if (l1 <= l2) {    return c1;  }  return c2;}  }
class C{  public int attributesSize(){  return attributes.size();}  }
class C{  public void subscribe(final String topic,final int qos,String invocationContext,String activityToken){  service.traceDebug(TAG,"subscribe({" + topic + "},"+ qos+ ",{"+ invocationContext+ "}, {"+ activityToken+ "}");  final Bundle resultBundle=new Bundle();  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.SUBSCRIBE_ACTION);  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN,activityToken);  resultBundle.putString(MqttServiceConstants.CALLBACK_INVOCATION_CONTEXT,invocationContext);  if ((myClient != null) && (myClient.isConnected())) {    IMqttActionListener listener=new MqttConnectionListener(resultBundle);    try {      myClient.subscribe(topic,qos,invocationContext,listener);    } catch (    Exception e) {      handleException(resultBundle,e);    }  } else {    resultBundle.putString(MqttServiceConstants.CALLBACK_ERROR_MESSAGE,NOT_CONNECTED);    service.traceError("subscribe",NOT_CONNECTED);    service.callbackToActivity(clientHandle,Status.ERROR,resultBundle);  }}  }
class C{  @StateMachineAction public String powerOffVM(String instanceId,ProvisioningSettings settings,@SuppressWarnings("unused") InstanceStatus result){  VMPropertyHandler ph=new VMPropertyHandler(settings);  String vcenter=ph.getServiceSetting(VMPropertyHandler.TS_TARGET_VCENTER_SERVER);  VMwareClient vmClient=null;  try {    vmClient=VMClientPool.getInstance().getPool().borrowObject(vcenter);    VM vm=new VM(vmClient,ph.getInstanceName());    TaskInfo tInfo=vm.stop(true);    ph.setTask(tInfo.getKey());    return EVENT_STOPPING;  } catch (  Exception e) {    logger.error("Failed to power off VM of instance " + instanceId,e);    String message=Messages.get(ph.getLocale(),"error_poweroff_vm",new Object[]{instanceId});    ph.setSetting(VMPropertyHandler.SM_ERROR_MESSAGE,message);    return EVENT_FAILED;  } finally {    if (vmClient != null) {      try {        VMClientPool.getInstance().getPool().returnObject(vcenter,vmClient);      } catch (      Exception e) {        logger.error("Failed to return VMware client into pool",e);      }    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public IntList(){  this(10);}  }
class C{  public static PrivateKey loadEncrypted(InputStream is,Password password) throws CryptoException, IOException {  byte[] streamContents=ReadUtil.readFully(is);  EncryptionType encType=getEncryptionType(new ByteArrayInputStream(streamContents));  if (encType == null) {    throw new CryptoException(res.getString("NotValidPkcs8.exception.message"));  }  if (encType == UNENCRYPTED) {    throw new PrivateKeyUnencryptedException(res.getString("Pkcs8IsUnencrypted.exception.message"));  }  byte[] encPvk=null;  PemInfo pemInfo=PemUtil.decode(new ByteArrayInputStream(streamContents));  if (pemInfo != null) {    encPvk=pemInfo.getContent();  }  if (encPvk == null) {    encPvk=streamContents;  }  try {    EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(encPvk);    String encAlg=epki.getAlgName();    if (!checkSupportedForDecrypt(encAlg)) {      throw new PrivateKeyPbeNotSupportedException(encAlg,MessageFormat.format(res.getString("PrivateKeyWrappingAlgUnsupported.exception.message"),encAlg));    }    AlgorithmParameters encAlgParams=epki.getAlgParameters();    PBEKeySpec pbeKeySpec=new PBEKeySpec(password.toCharArray());    SecretKeyFactory keyFact=SecretKeyFactory.getInstance(encAlg);    SecretKey pbeKey=keyFact.generateSecret(pbeKeySpec);    Cipher cipher=Cipher.getInstance(encAlg);    cipher.init(Cipher.DECRYPT_MODE,pbeKey,encAlgParams);    PKCS8EncodedKeySpec privateKeySpec=epki.getKeySpec(cipher);    byte[] pvkBytes=privateKeySpec.getEncoded();    String privateKeyAlgorithm=getPrivateKeyAlgorithm(pvkBytes);    KeyFactory keyFactory=KeyFactory.getInstance(privateKeyAlgorithm);    PrivateKey pvk=keyFactory.generatePrivate(privateKeySpec);    return pvk;  } catch (  GeneralSecurityException ex) {    throw new CryptoException(res.getString("NoLoadPkcs8PrivateKey.exception.message"),ex);  }}  }
class C{  public static List<String> toList(Path[] paths){  if (paths == null || paths.length == 0) {    return Collections.emptyList();  }  List<String> list=new ArrayList<>(paths.length);  for (  Path path : paths) {    list.add(path.toString());  }  return list;}  }
class C{  public void updated(T model,Reason reason){}  }
class C{  public void installUI(JComponent c){  MouseListener[] ml=c.getMouseListeners();  super.installUI(c);  for (int i=0; i < ml.length; i++) {    arrowButton.addMouseListener(ml[i]);  }}  }
class C{  public UpdateConstraintException(ClassEnum classEnum,String businessKey){  super(generateMessage(classEnum,businessKey),classEnum,businessKey);}  }
class C{  public static ComponentUI createUI(JComponent b){  return s_checkBoxUI;}  }
class C{  public static boolean isValid(final String uri){  return uri.trim().startsWith(PREFIX);}  }
class C{  public LayoutParams(int w,int h,float initWeight){  super(w,h,initWeight);  column=-1;  span=1;}  }
class C{  private CTableSearcherHelper(){}  }
class C{  @Override protected String doIt() throws Exception {  if (Ini.isPropertyBool(Ini.P_LOGMIGRATIONSCRIPT)) {    addLog(Msg.getMsg(getCtx(),"LogMigrationScriptFlagIsSetMessage"));    return "@Error@" + Msg.getMsg(getCtx(),"LogMigrationScripFlagtIsSet");  }  String retval=migrationStep.toString();  if (migrationStep == null || migrationStep.is_new())   return "No migration step"; else   if (MMigrationStep.STATUSCODE_Applied.equals(migrationStep.getStatusCode()))   retval+=migrationStep.rollback(); else   retval+=migrationStep.apply();  commitEx();  MMigration migration=migrationStep.getParent();  migration.updateStatus(get_TrxName());  return retval;}  }
class C{  public Builder withMembers(Collection<Address> members){  response.members=Assert.notNull(members,"members");  return this;}  }
class C{  public boolean isFieldCenter(){  return getFieldAlignmentType().equals(FIELDALIGNMENTTYPE_Center);}  }
class C{  public void connected(){  final String methodName="connected";  log.fine(CLASS_NAME,methodName,"631");  this.connected=true;  pingSender.start();}  }
class C{  public void part(String reason){  bot.sendRaw().rawLine("PART " + channel.getName() + " :"+ reason);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void attrRemoved(Attr node,String oldv){  if (!mutate) {    value=null;  }}  }
class C{  @OnClose public void onClose(Session session){  openSessions.remove(session.getId());  callInternal("onClose",session,null);}  }
class C{  private Point interpolate(Point startPoint,Point finalPoint,double progress){  Point point=new Point();  point.x=interpolate(startPoint.x,finalPoint.x,progress);  point.y=interpolate(startPoint.y,finalPoint.y,progress);  return point;}  }
class C{  public HttpServletResponse doDelete(HttpServlet servlet) throws Exception {  return doMethod("DELETE",servlet);}  }
class C{  public vec3 copyNegated(vec3 a){  this.m[0]=-a.m[0];  this.m[1]=-a.m[1];  this.m[2]=-a.m[2];  return this;}  }
class C{  public static double volumeUnionScaled(SpatialComparable box1,SpatialComparable box2,double scale){  final int dim=assertSameDimensionality(box1,box2);  double volume=1.;  for (int i=0; i < dim; i++) {    final double min=Math.min(box1.getMin(i),box2.getMin(i));    final double max=Math.max(box1.getMax(i),box2.getMax(i));    volume*=(max - min) * scale;  }  return volume;}  }
class C{  public void onHigherLevel(View view){  IndoorBuilding building=mMap.getFocusedBuilding();  if (building != null) {    List<IndoorLevel> levels=building.getLevels();    if (!levels.isEmpty()) {      int currentLevel=building.getActiveLevelIndex();      int newLevel=currentLevel - 1;      if (newLevel == -1) {        newLevel=levels.size() - 1;      }      IndoorLevel level=levels.get(newLevel);      setText("Activiating level " + level.getName());      level.activate();    } else {      setText("No levels in building");    }  } else {    setText("No visible building");  }}  }
class C{  public static boolean isValidPrincipal(StorageOSPrincipal principal,URI tenantId,StringBuilder error){  String queryParams=null;switch (principal.getType()) {case User:    String encodedPrincipal;  String encodedTenant;try {  encodedPrincipal=URLEncoder.encode(principal.getName(),"UTF-8");} catch (UnsupportedEncodingException e) {  throw APIException.badRequests.unableToEncodeString(principal.getName(),e);}try {encodedTenant=URLEncoder.encode(tenantId.toString(),"UTF-8");} catch (UnsupportedEncodingException e) {throw APIException.badRequests.unableToEncodeString(tenantId.toString(),e);}queryParams="?subject_id=" + encodedPrincipal + "&tenant_id="+ encodedTenant;break;case Group:try {queryParams="?group=" + URLEncoder.encode(principal.getName(),"UTF-8");} catch (UnsupportedEncodingException e) {throw APIException.badRequests.unableToEncodeString(principal.getName(),e);}break;}String endpoint=null;int attempts=0;while (attempts < _MAX_VALIDATION_RETRIES) {_log.debug("Validation attempt {}",++attempts);AuthSvcInternalApiClientIterator authSvcClientItr=new AuthSvcInternalApiClientIterator(_authSvcEndPointLocator,_coordinator);try {if (authSvcClientItr.hasNext()) {endpoint=authSvcClientItr.peek().toString();_log.info("isValidPrincipal(): {}",endpoint);final ClientResponse response=authSvcClientItr.get(URI.create(_URI_VALIDATE + queryParams));final int status=response.getStatus();_log.debug("Status: {}",status);if (status == ClientResponse.Status.OK.getStatusCode()) {return true;} else if (status == ClientResponse.Status.BAD_REQUEST.getStatusCode() || status == ClientResponse.Status.INTERNAL_SERVER_ERROR.getStatusCode()) {ServiceErrorRestRep errorXml=response.getEntity(ServiceErrorRestRep.class);error.append(errorXml.getDetailedMessage());return false;} else {_log.info("Unexpected response code {}.",status);}}} catch (Exception e) {_log.info("Exception connecting to {}. ",endpoint,e);}}return false;}  }
class C{  public void testBogusStatsTag() throws Exception {  index();  assertQ(req("q","*:*","facet","true","facet.pivot","{!stats=bogus}place_t,company_t"),"//arr[@name='place_t,company_t']/lst[str[@name='value'][.='dublin']]","count(//arr[@name='place_t,company_t']/lst[str[@name='value'][.='dublin']]/lst[@name='stats'])=0");}  }
class C{  final void postAccept(){  connected=true;  created=true;  bound=true;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.io.File newPath=getFile(stack);  java.io.File orgPath=getFile(stack);  return Boolean.valueOf(orgPath.renameTo(newPath));}  }
class C{  public void error(XPathContext xctxt,String msg,Object args[]) throws javax.xml.transform.TransformerException {  String formattedMsg=XSLMessages.createMessage(msg,args);  ErrorListener errHandler=xctxt.getErrorListener();  TransformerException spe=new TransformerException(formattedMsg,(SourceLocator)xctxt.getSAXLocator());  if (null != errHandler)   errHandler.error(spe); else   System.out.println(formattedMsg);}  }
class C{  private static VirtualArrayAssignmentChanges removeVirtualArray(VirtualArrayRestRep virtualArray){  VirtualArrayAssignmentChanges changes=new VirtualArrayAssignmentChanges();  changes.setRemove(new VirtualArrayAssignments(Sets.newHashSet(stringId(virtualArray))));  return changes;}  }
class C{  public void focusLocalField(){  localCommentsTable.requestFocusInWindow();}  }
class C{  public static Field findInstanceField(Class<?> type,String name) throws NoSuchFieldException {  Field field=findField(type,name);  if (Modifier.isStatic(field.getModifiers())) {    throw new NoSuchFieldException("Field '" + name + "' is static");  }  return field;}  }
class C{  private String createPortAttribute(final int[] ports){  final StringBuffer portValue=new StringBuffer();  for (int i=0, len=ports.length; i < len; i++) {    if (i > 0) {      portValue.append(",");    }    portValue.append(ports[i]);  }  return portValue.toString();}  }
class C{  public static void debug(Object... x){  ConcurrentLinkedQueue<Item> q=que.get();  if (q != null)   q.add(new Item(x));}  }
class C{  private JsonNode readJsonNode(URL url) throws IOException, AuthenticationException {  HttpURLConnection conn=_authenticatedURL.openConnection(url,_token);  return _objectMapper.readTree(conn.getInputStream());}  }
class C{  public static String arrayListToString(ArrayList<String> list){  String strValue=null;  StringBuilder sb=new StringBuilder();  for (  String s : list) {    sb.append(s).append(",");    strValue=sb.toString();  }  if (strValue != null && strValue.length() > 0 && strValue.charAt(strValue.length() - 1) == ',') {    strValue=strValue.substring(0,strValue.length() - 1);  }  return strValue;}  }
class C{  public HashIndex(String indexName,Region region,String fromClause,String indexedExpression,String projectionAttributes,String origFromClause,String origIndexExpr,String[] definitions,IndexStatistics stats){  super(indexName,region,fromClause,indexedExpression,projectionAttributes,origFromClause,origIndexExpr,definitions,stats);  RegionAttributes ra=region.getAttributes();  if (IndexManager.isObjectModificationInplace()) {    entryToValuesMap=new ConcurrentHashMap(ra.getInitialCapacity(),ra.getLoadFactor(),ra.getConcurrencyLevel());  } else {    if (entryToOldKeysMap == null) {      entryToOldKeysMap=new ThreadLocal<Object2ObjectOpenHashMap>();    }  }  entriesSet=new HashIndexSet();}  }
class C{  public void write(int ch) throws IOException {  OutputStream os=getOutputStream();  os.write('D');  os.write(0);  os.write(1);  os.write(ch);}  }
class C{  public static double NHWPfitness(boolean useTrainingData,GEPIndividual ind){  double NHWP=NHWPrawFitness(useTrainingData,ind,0);  return (NHWP);}  }
class C{  public int size(){  return model.getSize();}  }
class C{  private void readObject(ObjectInputStream stream) throws java.io.IOException, ClassNotFoundException {  stream.defaultReadObject();  if (console != null) {    setOut(console.getOut());    setErr(console.getErr());  } else {    setOut(System.out);    setErr(System.err);  }}  }
class C{  public BasicBlock allocate(){  BasicBlock b=new BasicBlock();  addVertex(b);  return b;}  }
class C{  public static String replaceShortname(String input,boolean removeIfUnsupported){  Matcher matcher=SHORTNAME_PATTERN.matcher(input);  boolean supported=Build.VERSION.SDK_INT >= 16;  while (matcher.find()) {    String unicode=_shortNameToUnicode.get(matcher.group(1));    if (unicode == null) {      continue;    }    if (supported) {      input=input.replace(matcher.group(1),unicode);    } else     if (!supported && removeIfUnsupported) {      input=input.replace(matcher.group(1),"");    }  }  return input;}  }
class C{  private GridByteArrayList sendClassRequest(String name,String path) throws ClassNotFoundException {  assert !Thread.holdsLock(mux);  long endTime=computeEndTime(p2pTimeout);  Collection<UUID> nodeListCp;  Map<UUID,IgniteUuid> nodeLdrMapCp;synchronized (mux) {    if (missedRsrcs != null && missedRsrcs.contains(path))     throw new ClassNotFoundException("Failed to peer load class [class=" + name + ", nodeClsLdrIds="+ nodeLdrMap+ ", parentClsLoader="+ getParent()+ ']');    nodeListCp=singleNode ? nodeList : new LinkedList<>(nodeList);    nodeLdrMapCp=singleNode ? nodeLdrMap : new HashMap<>(nodeLdrMap);  }  IgniteCheckedException err=null;  for (  UUID nodeId : nodeListCp) {    if (nodeId.equals(ctx.discovery().localNode().id()))     continue;    IgniteUuid ldrId=nodeLdrMapCp.get(nodeId);    ClusterNode node=ctx.discovery().node(nodeId);    if (node == null) {      if (log.isDebugEnabled())       log.debug("Found inactive node in class loader (will skip): " + nodeId);      continue;    }    try {      GridDeploymentResponse res=comm.sendResourceRequest(path,ldrId,node,endTime);      if (res == null) {        String msg="Failed to send class-loading request to node (is node alive?) [node=" + node.id() + ", clsName="+ name+ ", clsPath="+ path+ ", clsLdrId="+ ldrId+ ", parentClsLdr="+ getParent()+ ']';        if (!quiet)         U.warn(log,msg); else         if (log.isDebugEnabled())         log.debug(msg);        err=new IgniteCheckedException(msg);        continue;      }      if (res.success())       return res.byteSource();      if (log.isDebugEnabled())       log.debug("Failed to find class on remote node [class=" + name + ", nodeId="+ node.id()+ ", clsLdrId="+ ldrId+ ", reason="+ res.errorMessage()+ ']');synchronized (mux) {        if (missedRsrcs != null)         missedRsrcs.add(path);      }      throw new ClassNotFoundException("Failed to peer load class [class=" + name + ", nodeClsLdrs="+ nodeLdrMapCp+ ", parentClsLoader="+ getParent()+ ", reason="+ res.errorMessage()+ ']');    } catch (    IgniteCheckedException e) {      if (Thread.currentThread().isInterrupted()) {        if (!quiet)         U.error(log,"Failed to find class probably due to task/job cancellation: " + name,e); else         if (log.isDebugEnabled())         log.debug("Failed to find class probably due to task/job cancellation [name=" + name + ", err="+ e+ ']');      } else {        if (!quiet)         U.warn(log,"Failed to send class-loading request to node (is node alive?) [node=" + node.id() + ", clsName="+ name+ ", clsPath="+ path+ ", clsLdrId="+ ldrId+ ", parentClsLdr="+ getParent()+ ", err="+ e+ ']'); else         if (log.isDebugEnabled())         log.debug("Failed to send class-loading request to node (is node alive?) [node=" + node.id() + ", clsName="+ name+ ", clsPath="+ path+ ", clsLdrId="+ ldrId+ ", parentClsLdr="+ getParent()+ ", err="+ e+ ']');        err=e;      }    }  }  throw new ClassNotFoundException("Failed to peer load class [class=" + name + ", nodeClsLdrs="+ nodeLdrMapCp+ ", parentClsLoader="+ getParent()+ ']',err);}  }
class C{  public MyersDiff(){  equalizer=DEFAULT_EQUALIZER;}  }
class C{  public boolean checkReadPermission(InetAddress address){  if (alwaysAuthorized)   return (true);  PrincipalImpl p=new PrincipalImpl(address);  return acl.checkPermission(p,READ);}  }
class C{  public static SimpleCheckoutStarter createWithUriAttributes(Map<String,String> args) throws RuntimeException, UnsupportedEncodingException {  String url=args.get(URL_ARGUMENT);  String ref=args.get(REF_ARGUMENT);  String encoding=args.get(ENCODING_ARGUMENT);  if (StringUtils.isEmpty(url)) {    throw new RuntimeException(TfPluginBundle.message(TfPluginBundle.STARTER_ERRORS_SIMPLECHECKOUT_URI_MISSING_GIT_URL));  }  if (StringUtils.isNotEmpty(encoding)) {    url=URLDecoder.decode(url,encoding);  }  if (StringUtils.isNotEmpty(ref)) {    ref=URLDecoder.decode(ref,encoding);  } else {    ref=StringUtils.EMPTY;  }  return createWithGitUrl(url,ref);}  }
class C{  private void assign(byte[] val){  int j;  mPol=new long[mLength];  for (j=0; j < val.length; j++) {    mPol[j >>> 3]|=(val[val.length - 1 - j] & 0x00000000000000ffL) << ((j & 0x07) << 3);  }}  }
class C{  static public int computePasswordQuality(String password){  boolean hasDigit=false;  boolean hasNonDigit=false;  final int len=password.length();  for (int i=0; i < len; i++) {    if (Character.isDigit(password.charAt(i))) {      hasDigit=true;    } else {      hasNonDigit=true;    }  }  if (hasNonDigit && hasDigit) {    return DevicePolicyManager.PASSWORD_QUALITY_ALPHANUMERIC;  }  if (hasNonDigit) {    return DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC;  }  if (hasDigit) {    return DevicePolicyManager.PASSWORD_QUALITY_NUMERIC;  }  return DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED;}  }
class C{  @Override public void removeLifecycleListener(LifecycleListener listener){  this.lifecycle.removeLifecycleListener(listener);}  }
class C{  public int read(byte[] b) throws IOException {  return read(b,0,b.length);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public LZ7(){  super(10,2,21,21,3);}  }
class C{  protected void preExecute(){  clearFromCursor();  if (cursor >= 0 && cursor <= selections.size()) {    ISelection selection=selectionProvider.getSelection();    selections.add(cursor,selection);  }}  }
class C{  public JournalFile takeFile(final boolean keepOpened,final boolean multiAIO,final boolean initFile,final boolean tmpCompactExtension) throws Exception {  JournalFile nextFile=null;  nextFile=freeFiles.poll();  if (nextFile != null) {    freeFilesCount.getAndDecrement();  }  if (nextFile == null) {    nextFile=createFile(keepOpened,multiAIO,initFile,tmpCompactExtension,-1);  } else {    if (tmpCompactExtension) {      SequentialFile sequentialFile=nextFile.getFile();      sequentialFile.renameTo(sequentialFile.getFileName() + ".cmp");    }    if (keepOpened) {      openFile(nextFile,multiAIO);    }  }  return nextFile;}  }
class C{  protected void clearParameters(){  fieldValue.setText("");  fieldName.setText("");  fProduct_ID.setValue(null);  fBPartner_ID.setValue(null);}  }
class C{  public <A>boolean read(ByteBuffer dst,long position,A attachment,CompletionHandler<Integer,? super A> handler){  writeReadChannelLock.lock();  try {    if (this.isOpened()) {      fileChannel.read(dst,position,attachment,handler);      return true;    } else {      return false;    }  }  finally {    writeReadChannelLock.unlock();  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getPrecondition_();}  }
class C{  @SuppressWarnings("unchecked") public static List<Float> toList(float[] array){  return DefaultTypeTransformation.primitiveArrayToList(array);}  }
class C{  public long queryForLong(DatabaseConnection databaseConnection,String query,String[] arguments) throws SQLException {  logger.debug("executing raw query for long: {}",query);  if (arguments.length > 0) {    logger.trace("query arguments: {}",(Object)arguments);  }  CompiledStatement stmt=null;  DatabaseResults results=null;  try {    stmt=databaseConnection.compileStatement(query,StatementType.SELECT,noFieldTypes,DatabaseConnection.DEFAULT_RESULT_FLAGS);    assignStatementArguments(stmt,arguments);    results=stmt.runQuery(null);    if (results.first()) {      return results.getLong(0);    } else {      throw new SQLException("No result found in queryForLong: " + query);    }  }  finally {    if (results != null) {      results.close();    }    if (stmt != null) {      stmt.close();    }  }}  }
class C{  protected void ordinalLayout(TupleSet ts){  if (!m_modelSet) {    Object[] array=DataLib.ordinalArray(ts,m_field);    if (m_model == null) {      m_model=new ObjectRangeModel(array);    } else {      ((ObjectRangeModel)m_model).setValueRange(array);    }  }  ObjectRangeModel model=(ObjectRangeModel)m_model;  int start=model.getValue();  int end=start + model.getExtent();  double total=(double)(end - start);  Iterator iter=m_vis.items(m_group,m_filter);  while (iter.hasNext()) {    VisualItem item=(VisualItem)iter.next();    int order=model.getIndex(item.get(m_field)) - start;    set(item,(total > 0.0) ? order / total : 0.5);  }}  }
class C{  public float distanceTo(Location dest){synchronized (mResults) {    if (mLatitude != mLat1 || mLongitude != mLon1 || dest.mLatitude != mLat2 || dest.mLongitude != mLon2) {      computeDistanceAndBearing(mLatitude,mLongitude,dest.mLatitude,dest.mLongitude,mResults);      mLat1=mLatitude;      mLon1=mLongitude;      mLat2=dest.mLatitude;      mLon2=dest.mLongitude;      mDistance=mResults[0];      mInitialBearing=mResults[1];    }    return mDistance;  }}  }
class C{  public _ChangeType(){  super();}  }
class C{  public void paint(Graphics g,Shape a){  Rectangle r=(Rectangle)a;  g.clipRect(r.x,r.y,r.width,r.height);  super.paint(g,a);}  }
class C{  public boolean isFinal(){  return _rawClass.isFinal();}  }
class C{  public static void main(String[] args){  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Binary objects task execution example started.");    if (ignite.cluster().forRemotes().nodes().isEmpty()) {      System.out.println();      System.out.println(">>> This example requires remote nodes to be started.");      System.out.println(">>> Please start at least 1 remote node.");      System.out.println(">>> Refer to example's javadoc for details on configuration.");      System.out.println();      return;    }    Collection<Employee> employees=employees();    System.out.println();    System.out.println(">>> Calculating average salary for employees:");    for (    Employee employee : employees)     System.out.println(">>>     " + employee);    Collection<BinaryObject> binaries=ignite.binary().toBinary(employees);    Long avgSalary=ignite.compute(ignite.cluster().forRemotes()).execute(new ComputeClientTask(),binaries);    System.out.println();    System.out.println(">>> Average salary for all employees: " + avgSalary);    System.out.println();  } }  }
class C{  protected int engineGetDigestLength(){  return DIGEST_LENGTH;}  }
class C{  public static <T extends Identifyable>T checkId(@NonNull T item){  if (item.getIdentifier() == -1) {    item.withIdentifier(idDistributor.incrementAndGet());  }  return item;}  }
class C{  public ImageIcon(Image image,String description){  this(image);  this.description=description;}  }
class C{  public void addRandomPic(){  ImageView iv=new ImageView(this);  iv.setScaleType(ImageView.ScaleType.FIT_XY);  Drawable drawable=getResources().getDrawable(RandomPic.getInstance().getPicResId());  iv.setImageDrawable(drawable);  int height=MagicHeaderUtils.getHeightWhenFullWidth(this,drawable);  mMagicHeaderViewPager.addHeaderView(iv,height);}  }
class C{  public PropertyNode(Object pValue){  this(pValue,null,null);}  }
class C{  public static TimeDuration pause(final long sleepTimeMS){  final long startTime=System.currentTimeMillis();  do {    try {      final long sleepTime=sleepTimeMS - (System.currentTimeMillis() - startTime);      Thread.sleep(sleepTime > 0 ? sleepTime : 5);    } catch (    InterruptedException e) {    }  } while ((System.currentTimeMillis() - startTime) < sleepTimeMS);  return TimeDuration.fromCurrent(startTime);}  }
class C{  private List<Image> supersFor(IHex hex,Component comp){  ArrayList<Image> matches=new ArrayList<Image>();  for (Iterator<HexEntry> i=supers.iterator(); i.hasNext(); ) {    HexEntry entry=i.next();    if (superMatch(hex,entry.getHex()) >= 1.0) {      Image img=entry.getImage(comp,hex.getCoords().hashCode());      if (img != null) {        matches.add(img);      } else {        matches.add(ImageUtil.createAcceleratedImage(HEX_W,HEX_H));      }      int terrTypes[]=entry.getHex().getTerrainTypes();      for (int j=0; j < terrTypes.length; j++) {        if (entry.getHex().containsTerrain(terrTypes[j])) {          hex.removeTerrain(terrTypes[j]);        }      }    }  }  return matches;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MBankStatementLoader[").append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  private static String matchablePath(String path){  if (path == null) {    return "/";  } else   if (path.endsWith("/")) {    return path;  } else {    return path + "/";  }}  }
class C{  public ImmutableClassToInstanceMap<B> build(){  ImmutableMap<Class<? extends B>,B> map=mapBuilder.build();  if (map.isEmpty()) {    return of();  } else {    return new ImmutableClassToInstanceMap<B>(map);  }}  }
class C{  public boolean removeFacetField(String name){  boolean b=this.remove(FacetParams.FACET_FIELD,name);  if (this.get(FacetParams.FACET_FIELD) == null && this.get(FacetParams.FACET_QUERY) == null) {    this.setFacet(false);  }  return b;}  }
class C{  public static double mouseX(){synchronized (mouseLock) {    return mouseX;  }}  }
class C{  private static final Cursor instancesQuery(ContentResolver cr,String[] projection,int startDay,int endDay,String selection,String[] selectionArgs,String orderBy){  String WHERE_CALENDARS_SELECTED=Calendars.VISIBLE + "=?";  String[] WHERE_CALENDARS_ARGS={"1"};  String DEFAULT_SORT_ORDER="begin ASC";  Uri.Builder builder=Instances.CONTENT_BY_DAY_URI.buildUpon();  ContentUris.appendId(builder,startDay);  ContentUris.appendId(builder,endDay);  if (TextUtils.isEmpty(selection)) {    selection=WHERE_CALENDARS_SELECTED;    selectionArgs=WHERE_CALENDARS_ARGS;  } else {    selection="(" + selection + ") AND "+ WHERE_CALENDARS_SELECTED;    if (selectionArgs != null && selectionArgs.length > 0) {      selectionArgs=Arrays.copyOf(selectionArgs,selectionArgs.length + 1);      selectionArgs[selectionArgs.length - 1]=WHERE_CALENDARS_ARGS[0];    } else {      selectionArgs=WHERE_CALENDARS_ARGS;    }  }  return cr.query(builder.build(),projection,selection,selectionArgs,orderBy == null ? DEFAULT_SORT_ORDER : orderBy);}  }
class C{  public ObjectFactory(){}  }
class C{  public static int countPart(final long[] srcArr,final int lgArrLongs,final long thetaLong){  int cnt=0;  final int len=1 << lgArrLongs;  for (int i=len; i-- > 0; ) {    long hash=srcArr[i];    if (continueCondition(thetaLong,hash)) {      continue;    }    cnt++;  }  return cnt;}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.210 -0400",hash_original_method="694B238FF5AB1AB4441171CB6DC98A7A",hash_generated_method="BD1C54C575DC051B66557980241D013D") @Override public void write(String str,int st,int end) throws IOException {  out.write(str,st,end);}  }
class C{  public Assignment(Assignment a){  map=new HashMap<String,Value>(a.map);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.313 -0500",hash_original_method="01F1FC91F82BFD6DF4E4443B37052042",hash_generated_method="168BE30C6BAF90C59363528B60B8C592") public static void dumpCursor(Cursor cursor,PrintStream stream){  stream.println(">>>>> Dumping cursor " + cursor);  if (cursor != null) {    int startPos=cursor.getPosition();    cursor.moveToPosition(-1);    while (cursor.moveToNext()) {      dumpCurrentRow(cursor,stream);    }    cursor.moveToPosition(startPos);  }  stream.println("<<<<<");}  }
class C{  @Override public boolean equals(Object obj){  return (obj instanceof StringCompare);}  }
class C{  private void copyToBuffer(Buffer bDest){  if (reassembledDataFullSize <= MAX_H264_FRAME_SIZE) {    byte[] finalData=new byte[reassembledDataFullSize + 1];    int finalDataPos=0;    finalData[finalDataPos]=reassembledDataNALHeader;    finalDataPos+=1;    int posCurrent=reassembledDataPosSeqStart;    int posSeq=0;    while ((posCurrent & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK) != reassembledDataPosSeqEnd) {      posSeq=posCurrent & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK;      System.arraycopy(reassembledData[posSeq],0,finalData,finalDataPos,reassembledDataSize[posSeq]);      finalDataPos+=reassembledDataSize[posSeq];      posCurrent++;    }    System.arraycopy(reassembledData[reassembledDataPosSeqEnd],0,finalData,finalDataPos,reassembledDataSize[reassembledDataPosSeqEnd]);    bDest.setData(finalData);    bDest.setLength(reassembledDataSize[reassembledDataPosSeqEnd]);    bDest.setOffset(0);    bDest.setTimeStamp(timeStamp);    bDest.setFormat(format);    bDest.setFlags(Buffer.FLAG_RTP_MARKER | Buffer.FLAG_RTP_TIME);    bDest.setVideoOrientation(videoOrientation);    bDest.setSequenceNumber(seqNumber);  }  reassembledData=null;}  }
class C{  @Override protected void onDetachedFromWindow(){  super.onDetachedFromWindow();  if (mDecoEventManager != null) {    mDecoEventManager.resetEvents();  }}  }
class C{  public static boolean isSubtype(@DottedClassName String clsName,@DottedClassName String possibleSupertypeClassName) throws ClassNotFoundException {  Subtypes2 subtypes2=Global.getAnalysisCache().getDatabase(Subtypes2.class);  return subtypes2.isSubtype(DescriptorFactory.createClassDescriptorFromDottedClassName(clsName),DescriptorFactory.createClassDescriptorFromDottedClassName(possibleSupertypeClassName));}  }
class C{  public T caseInterfaceBody_(InterfaceBody_ object){  return null;}  }
class C{  public void debugFinest(CharSequence message){  log(Level.FINEST,message);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public ProjectTodoStatusObject(ProjectTodoStatusObject parent){  this.id=parent.getId();  this.projectId=parent.getProjectId();  this.status=parent.getStatus();}  }
class C{  public void dispose(){  m_scriptingDlg.dispose();  m_criteriaDlg.delete();}  }
class C{  public void newLinkDetected(){  if (mBssidAvoidTimeMax > 0) {    if (DBG)     logd("Previous avoidance still in effect, rssi=" + mGoodLinkTargetRssi + " count="+ mGoodLinkTargetCount);    return;  }  int from=BSSID_STAT_RANGE_LOW_DBM;  int to=BSSID_STAT_RANGE_HIGH_DBM;  mGoodLinkTargetRssi=findRssiTarget(from,to,GOOD_LINK_LOSS_THRESHOLD);  mGoodLinkTargetCount=1;  mBssidAvoidTimeMax=SystemClock.elapsedRealtime() + MAX_AVOID_TIME[0].TIME_MS;  if (DBG)   logd("New link verifying target set, rssi=" + mGoodLinkTargetRssi + " count="+ mGoodLinkTargetCount);}  }
class C{  private void initWidget(){  this.widgetCard=(ImageView)findViewById(R.id.widget_clock_day_week_card);  widgetCard.setVisibility(View.GONE);  this.widgetIcon=(ImageView)findViewById(R.id.widget_clock_day_week_icon);  this.widgetClock=(TextClock)findViewById(R.id.widget_clock_day_week_clock);  this.widgetDate=(TextView)findViewById(R.id.widget_clock_day_week_date);  this.widgetWeather=(TextView)findViewById(R.id.widget_clock_day_week_weather);  this.widgetWeeks=new TextView[]{(TextView)findViewById(R.id.widget_clock_day_week_week_1),(TextView)findViewById(R.id.widget_clock_day_week_week_2),(TextView)findViewById(R.id.widget_clock_day_week_week_3),(TextView)findViewById(R.id.widget_clock_day_week_week_4),(TextView)findViewById(R.id.widget_clock_day_week_week_5)};  this.widgetIcons=new ImageView[]{(ImageView)findViewById(R.id.widget_clock_day_week_icon_1),(ImageView)findViewById(R.id.widget_clock_day_week_icon_2),(ImageView)findViewById(R.id.widget_clock_day_week_icon_3),(ImageView)findViewById(R.id.widget_clock_day_week_icon_4),(ImageView)findViewById(R.id.widget_clock_day_week_icon_5)};  this.widgetTemps=new TextView[]{(TextView)findViewById(R.id.widget_clock_day_week_temp_1),(TextView)findViewById(R.id.widget_clock_day_week_temp_2),(TextView)findViewById(R.id.widget_clock_day_week_temp_3),(TextView)findViewById(R.id.widget_clock_day_week_temp_4),(TextView)findViewById(R.id.widget_clock_day_week_temp_5)};  ImageView wallpaper=(ImageView)findViewById(R.id.activity_create_widget_clock_day_week_wall);  wallpaper.setImageDrawable(WallpaperManager.getInstance(this).getDrawable());  this.container=(CoordinatorLayout)findViewById(R.id.activity_create_widget_clock_day_week_container);  ArrayAdapter<String> adapter=new ArrayAdapter<>(this,R.layout.spinner_text,nameList);  adapter.setDropDownViewResource(R.layout.spinner_text);  Spinner locationSpinner=(Spinner)findViewById(R.id.activity_create_widget_clock_day_week_spinner);  locationSpinner.setAdapter(adapter);  locationSpinner.setOnItemSelectedListener(this);  this.showCardSwitch=(Switch)findViewById(R.id.activity_create_widget_clock_day_week_showCardSwitch);  showCardSwitch.setOnCheckedChangeListener(new ShowCardSwitchCheckListener());  this.blackTextSwitch=(Switch)findViewById(R.id.activity_create_widget_clock_day_week_blackTextSwitch);  blackTextSwitch.setOnCheckedChangeListener(new BlackTextSwitchCheckListener());  Button doneButton=(Button)findViewById(R.id.activity_create_widget_clock_day_week_doneButton);  doneButton.setOnClickListener(this);}  }
class C{  public void add(int years,int months,int weeks,int days,int hours,int minutes,int seconds,int millis){  setPeriod(FieldUtils.safeAdd(getYears(),years),FieldUtils.safeAdd(getMonths(),months),FieldUtils.safeAdd(getWeeks(),weeks),FieldUtils.safeAdd(getDays(),days),FieldUtils.safeAdd(getHours(),hours),FieldUtils.safeAdd(getMinutes(),minutes),FieldUtils.safeAdd(getSeconds(),seconds),FieldUtils.safeAdd(getMillis(),millis));}  }
class C{  public DTMIterator createDTMIterator(int whatToShow,DTMFilter filter,boolean entityReferenceExpansion){  return m_dtmManager.createDTMIterator(whatToShow,filter,entityReferenceExpansion);}  }
class C{  protected void initForecastErrors(ArrayList<Float> model,TimeSeries.DataSequence data){  double sumErr=0.0;  double sumAbsErr=0.0;  double sumAbsPercentErr=0.0;  double sumErrSquared=0.0;  int processedPoints=0;  int n=data.size();  for (int i=0; i < n; i++) {    double error=model.get(i) - data.get(i).value;    sumErr+=error;    sumAbsErr+=Math.abs(error);    sumAbsPercentErr+=Math.abs(error / data.get(i).value);    sumErrSquared+=error * error;    processedPoints++;  }  this.bias=sumErr / processedPoints;  this.mad=sumAbsErr / processedPoints;  this.mape=sumAbsPercentErr / processedPoints;  this.mse=sumErrSquared / processedPoints;  this.sae=sumAbsErr;  errorsInit=true;}  }
class C{  public BundleEvent(int type,Bundle bundle){  super(bundle);  this.bundle=bundle;  this.type=type;}  }
class C{  public void message(LocoNetMessage m){}  }
class C{  @Override public float estimateFutureCost(Rule rule,DPState currentState,Sentence sentence){  NgramDPState state=(NgramDPState)currentState;  float estimate=0.0f;  int[] leftContext=state.getLeftLMStateWords();  if (null != leftContext) {    boolean skipStart=true;    if (leftContext[0] != startSymbolId) {      skipStart=false;    }    estimate+=scoreChunkLogP(leftContext,true,skipStart);  }  return weight * estimate;}  }
class C{  public static Validator<CharSequence> regex(@NonNull final Context context,@NonNull final Pattern regex){  return new RegexValidator(context,R.string.default_error_message,regex);}  }
class C{  protected void switchToLegend(){  if (m_plotSurround.getComponentCount() > 1 && m_plotSurround.getComponent(1) == m_attrib) {    m_plotSurround.remove(m_attrib);  }  if (m_plotSurround.getComponentCount() > 1 && m_plotSurround.getComponent(1) == m_legendPanel) {    return;  }  GridBagConstraints constraints=new GridBagConstraints();  constraints.fill=GridBagConstraints.BOTH;  constraints.insets=new Insets(0,0,0,0);  constraints.gridx=4;  constraints.gridy=0;  constraints.weightx=1;  constraints.gridwidth=1;  constraints.gridheight=1;  constraints.weighty=5;  m_plotSurround.add(m_legendPanel,constraints);  setSindex(0);  m_ShapeCombo.setEnabled(false);}  }
class C{  private void expandArray(int shardId){  int newNumShards=Math.max((int)Math.ceil(numShards * SHARD_GROWTH_FACTOR),shardId + 1);  Preconditions.checkArgument(newNumShards * shardLength < Integer.MAX_VALUE,"Exceeded the max storage capacity for ShardedBigIntArray");  int[][] newArray=new int[newNumShards][];  System.arraycopy(readerAccessibleInfo.array,0,newArray,0,readerAccessibleInfo.array.length);  readerAccessibleInfo=new ReaderAccessibleInfo(newArray);  numShards=newNumShards;}  }
class C{  @BeforeMethod public void before() throws Exception {  final ResourceBinderImpl resources=new ResourceBinderImpl();  resources.addResource(MyJaxRSService.class,null);  final DependencySupplierImpl dependencies=new DependencySupplierImpl();  final ApplicationProviderBinder providers=new ApplicationProviderBinder();  providers.addExceptionMapper(ApiExceptionMapper.class);  providers.addResponseFilter(ETagResponseFilter.class);  final URI uri=new URI(BASE_URI);  final ContainerRequest req=new ContainerRequest(null,uri,uri,null,null,null);  final ApplicationContext contextImpl=anApplicationContext().withRequest(req).withProviders(providers).build();  contextImpl.setDependencySupplier(dependencies);  ApplicationContext.setCurrent(contextImpl);  final EverrestProcessor processor=new EverrestProcessor(new EverrestConfiguration(),dependencies,new RequestHandlerImpl(new RequestDispatcher(resources),providers),null);  resourceLauncher=new ResourceLauncher(processor);}  }
class C{  private void markPatternsForStop(int stop){  TIntList patterns=data.patternsForStop.get(stop);  for (TIntIterator it=patterns.iterator(); it.hasNext(); ) {    int pattern=it.next();    patternsTouchedThisRound.set(pattern);  }}  }
class C{  public static void returnConnection(final Connection connection,final Statement statement) throws DatabaseConnectionException {  if (LOGGER.isDebugEnabled())   LOGGER.debug(infoRelCon);  try {    if (statement != null)     statement.close();  } catch (  final Exception exception) {    LOGGER.error(errStmtString,exception);    throw new DatabaseConnectionException(errStmtString,exception);  }  try {    if (connection != null)     connection.close();  } catch (  final Exception exception) {    LOGGER.fatal(errConnOpenString,exception);    throw new DatabaseConnectionException(errConnCloseString,exception);  }}  }
class C{  public JSONObject putOnce(String key,Object value) throws JSONException {  if (key != null && value != null) {    if (this.opt(key) != null) {      throw new JSONException("Duplicate key \"" + key + "\"");    }    this.put(key,value);  }  return this;}  }
class C{  private static String normalize(final String key){  return (key != null) ? key.trim().toLowerCase() : "null";}  }
class C{  public FeaturesCollection(){  this.collection=new EnumMap<>(FeaturesObjectTypesEnum.class);}  }
class C{  public GenerateSwitchyard(EObject model,File targetFolder,List<? extends Object> arguments) throws IOException {  initialize(model,targetFolder,arguments);}  }
class C{  public boolean containsValue(double value){  return indexOfValue(value) >= 0;}  }
class C{  public static Color convertLightingColor(Element e,BridgeContext ctx){  Value v=getComputedStyle(e,SVGCSSEngine.LIGHTING_COLOR_INDEX);  if (v.getCssValueType() == CSSValue.CSS_PRIMITIVE_VALUE) {    return PaintServer.convertColor(v,1);  } else {    return PaintServer.convertRGBICCColor(e,v.item(0),(ICCColor)v.item(1),1,ctx);  }}  }
class C{  private static int checkChar(final char c,final String signature,int pos){  if (getChar(signature,pos) == c) {    return pos + 1;  }  throw new IllegalArgumentException(signature + ": '" + c+ "' expected at index "+ pos);}  }
class C{  public void write(String string,int x,int y){  gotoPosition(x,y);  write(string);}  }
class C{  public static String toString(byte[] x){  try {    return new String(x,PngHelperInternal.charsetLatin1name);  } catch (  UnsupportedEncodingException e) {    throw new PngBadCharsetException(e);  }}  }
class C{  private void addOrgRole(OrganizationRoleType type){  List<OrganizationRoleType> orgRoles=getSelectedOrganization().getOrganizationRoles();  if (!orgRoles.contains(type)) {    orgRoles.add(type);  }}  }
class C{  public Time(Date time){  SimpleTimeZone tz=new SimpleTimeZone(0,"Z");  SimpleDateFormat dateF=new SimpleDateFormat("yyyyMMddHHmmss");  dateF.setTimeZone(tz);  String d=dateF.format(time) + "Z";  int year=Integer.parseInt(d.substring(0,4));  if (year < 1950 || year > 2049) {    this.time=new DERGeneralizedTime(d);  } else {    this.time=new DERUTCTime(d.substring(2));  }}  }
class C{  public String unarchiveAddress(String address) throws APIException, IOException {  Map<String,String> params=buildBasicRequest();  params.put("address",address);  String response=HttpClient.getInstance().post(String.format("merchant/%s/unarchive_address",identifier),params);  JsonObject topElem=parseResponse(response);  return topElem.get("active").getAsString();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + String.valueOf(progress) + "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean isRuleProperty(Property property){  if (SPIN.rule.equals(property)) {    return true;  } else   if (JenaUtil.hasSuperProperty(property,property.getModel().getProperty(SPIN.rule.getURI()))) {    return true;  } else {    return JenaUtil.hasIndirectType(property,SPIN.RuleProperty.inModel(property.getModel()));  }}  }
class C{  public void subtract(final Number operand){  this.value-=operand.intValue();}  }
class C{  private static Map<String,Integer> optionArgDefs(){  Map<String,Integer> optionArgDefs=new HashMap<>();  optionArgDefs.put("input",1);  optionArgDefs.put("outdir",1);  optionArgDefs.put("alignment",1);  optionArgDefs.put("sourceTokens",1);  optionArgDefs.put("targetTokens",1);  optionArgDefs.put("classMap",1);  optionArgDefs.put("headClasses",0);  return optionArgDefs;}  }
class C{  void sendDisplayedDeliveryReport(final ContactId remote,final String msgId,final long timestamp) throws NetworkException {  if (sLogger.isActivated()) {    sLogger.debug("Set displayed delivery report for " + msgId);  }  TerminatingStoreAndForwardOneToOneChatMessageSession storeAndForwardSession=mImService.getStoreAndForwardMsgSession(mContact);  final OneToOneChatSession session=storeAndForwardSession != null ? storeAndForwardSession : mImService.getOneToOneChatSession(mContact);  if (session != null && session.isMediaEstablished()) {    if (sLogger.isActivated()) {      sLogger.info("Use the original session to send the delivery display status for " + msgId);    }    session.sendMsrpMessageDeliveryStatus(remote,msgId,ImdnDocument.DeliveryStatus.DISPLAYED,timestamp);  } else {    if (sLogger.isActivated()) {      sLogger.info("Use SIP message to send the delivery display status for " + msgId);    }    mImService.getImdnManager().sendMessageDeliveryStatus(remote.toString(),remote,msgId,ImdnDocument.DeliveryStatus.DISPLAYED,timestamp);  }}  }
class C{  public void disconnect(){  Platform.getExtensionRegistry().removeRegistryChangeListener(this);}  }
class C{  public static Region createPartionedRegion(String regionname) throws RegionExistsException {  AttributesFactory attribFactory=new AttributesFactory();  PartitionAttributesFactory paf=new PartitionAttributesFactory();  PartitionAttributes prattribs=paf.create();  attribFactory.setDataPolicy(DataPolicy.PARTITION);  attribFactory.setPartitionAttributes(prattribs);  RegionAttributes regionAttribs=attribFactory.create();  Region partitionedregion=createCache().createRegion(regionname,regionAttribs);  return partitionedregion;}  }
class C{  private void processInitiators(List<String> initiatorNames,Map<URI,Set<URI>> hostToInitiatorMap){  for (  String initiatorWWNStr : initiatorNames) {    Initiator initiator=fetchInitiatorByName(initiatorWWNStr);    if (null != initiator) {      Set<URI> initiators=hostToInitiatorMap.get(initiator.getHost());      if (initiators == null) {        initiators=new HashSet<URI>();        hostToInitiatorMap.put(initiator.getHost(),initiators);      }      initiators.add(initiator.getId());    }  }}  }
class C{  public boolean isWarning(){  return m_isWarning;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.INLINE_COMMENT___INLINE_COMMENT_1:    return getInlineComment_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Bundler putSparseParcelableArray(String key,SparseArray<? extends Parcelable> value){  bundle.putSparseParcelableArray(key,value);  return this;}  }
class C{  private static double calculateShiftedGammaApproximation(double z,double m,double shape){  double a=(3 * m * m) / (4 * shape);  double b=(m / 3);  double nu=(8 * shape) / (9 * m);  return a * ChiSquareDistribution.quantile(z,nu) + b;}  }
class C{  private ConcurrentSkipListMap.Node<K,V> hiNode(){  if (hi == null)   return m.findLast(); else   if (hiInclusive)   return m.findNear(hi,LT | EQ); else   return m.findNear(hi,LT);}  }
class C{  @SuppressWarnings("unused") public static void bindToRegister(double value){}  }
class C{  public static boolean transientLastDdlTimesMatch(Partition partition1,Partition partition2){  if (partition1 == null || partition2 == null) {    return false;  }  return StringUtils.equals(partition1.getParameters().get(HiveParameterKeys.TLDT),partition2.getParameters().get(HiveParameterKeys.TLDT));}  }
class C{  ProcessedData(byte[] data,String accountId){  mData=data;  mAccountId=accountId;}  }
class C{  public GeoShapeMapperBuilder transformations(List<GeoTransformation> transformations){  this.transformations=transformations;  return this;}  }
class C{  private void emitClear(String fieldName,StringBuilder builder){  builder.append("    public void ");  builder.append(getClearName(fieldName));  builder.append("() {\n      ");  builder.append(getEnsureName(fieldName));  builder.append("();\n      ");  builder.append(fieldName);  builder.append(".clear();\n");  builder.append("    }\n\n");}  }
class C{  public static double floor(double x){  return Math.floor(x);}  }
class C{  public static String layoutCompoundLabel(JComponent c,FontMetrics fm,String text,Icon icon,int verticalAlignment,int horizontalAlignment,int verticalTextPosition,int horizontalTextPosition,Rectangle viewR,Rectangle iconR,Rectangle textR,int textIconGap){  boolean orientationIsLeftToRight=true;  int hAlign=horizontalAlignment;  int hTextPos=horizontalTextPosition;  if (c != null) {    if (!(c.getComponentOrientation().isLeftToRight())) {      orientationIsLeftToRight=false;    }  }switch (horizontalAlignment) {case LEADING:    hAlign=(orientationIsLeftToRight) ? LEFT : RIGHT;  break;case TRAILING:hAlign=(orientationIsLeftToRight) ? RIGHT : LEFT;break;}switch (horizontalTextPosition) {case LEADING:hTextPos=(orientationIsLeftToRight) ? LEFT : RIGHT;break;case TRAILING:hTextPos=(orientationIsLeftToRight) ? RIGHT : LEFT;break;}return layoutCompoundLabelImpl(c,fm,text,icon,verticalAlignment,hAlign,verticalTextPosition,hTextPos,viewR,iconR,textR,textIconGap);}  }
class C{  public static boolean isEmailableFrom(String email,String syncAccountName){  return Utils.isValidEmail(email) && !email.equals(syncAccountName);}  }
class C{  private AppliedMigration createAppliedInitMigration(int version){  return new AppliedMigration(version,version,MigrationVersion.fromVersion(Integer.toString(version)),"abc",MigrationType.BASELINE,"x",null,new Date(),"sa",0,true);}  }
class C{  static void subdivideCubic(float[] src,int srcoff,float[] left,int leftoff,float[] right,int rightoff){  float x1=src[srcoff + 0];  float y1=src[srcoff + 1];  float ctrlx1=src[srcoff + 2];  float ctrly1=src[srcoff + 3];  float ctrlx2=src[srcoff + 4];  float ctrly2=src[srcoff + 5];  float x2=src[srcoff + 6];  float y2=src[srcoff + 7];  if (left != null) {    left[leftoff + 0]=x1;    left[leftoff + 1]=y1;  }  if (right != null) {    right[rightoff + 6]=x2;    right[rightoff + 7]=y2;  }  x1=(x1 + ctrlx1) / 2f;  y1=(y1 + ctrly1) / 2f;  x2=(x2 + ctrlx2) / 2f;  y2=(y2 + ctrly2) / 2f;  float centerx=(ctrlx1 + ctrlx2) / 2f;  float centery=(ctrly1 + ctrly2) / 2f;  ctrlx1=(x1 + centerx) / 2f;  ctrly1=(y1 + centery) / 2f;  ctrlx2=(x2 + centerx) / 2f;  ctrly2=(y2 + centery) / 2f;  centerx=(ctrlx1 + ctrlx2) / 2f;  centery=(ctrly1 + ctrly2) / 2f;  if (left != null) {    left[leftoff + 2]=x1;    left[leftoff + 3]=y1;    left[leftoff + 4]=ctrlx1;    left[leftoff + 5]=ctrly1;    left[leftoff + 6]=centerx;    left[leftoff + 7]=centery;  }  if (right != null) {    right[rightoff + 0]=centerx;    right[rightoff + 1]=centery;    right[rightoff + 2]=ctrlx2;    right[rightoff + 3]=ctrly2;    right[rightoff + 4]=x2;    right[rightoff + 5]=y2;  }}  }
class C{  @Override public View onCreateMediaControlView(Bundle savedInstanceState){  LayoutInflater inflater=getLayoutInflater();  View controls=inflater.inflate(R.layout.custom_media_route_controller_controls_dialog,null);  loadViews(controls);  mState=mCastManager.getPlaybackStatus();  updateMetadata();  updatePlayPauseState(mState);  setUpCallbacks();  return controls;}  }
class C{  @Override public final V put(final K s,final V v){  return this.arc[getPartition(s)].put(s,v);}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitLongMemberValue(this);}  }
class C{  static void dumpTree(AbstractBURS_TreeNode tn){  if (VM.BuildForIA32) {    if (VM.BuildFor32Addr) {      org.jikesrvm.compilers.opt.lir2mir.ia32_32.BURS_STATE.dumpTree(tn);    } else {      org.jikesrvm.compilers.opt.lir2mir.ia32_64.BURS_STATE.dumpTree(tn);    }  } else {    if (VM.VerifyAssertions)     VM._assert(VM.BuildForPowerPC);    if (VM.BuildFor32Addr) {      org.jikesrvm.compilers.opt.lir2mir.ppc_32.BURS_STATE.dumpTree(tn);    } else {      org.jikesrvm.compilers.opt.lir2mir.ppc_64.BURS_STATE.dumpTree(tn);    }  }}  }
class C{  public void addStandaloneRule(){  int start=numStates;  int end=numStates + 1;  for (int c=0; c < classes.getNumClasses(); c++)   addTransition(start,c,end);  for (int i=0; i < numLexStates * 2; i++)   addEpsilonTransition(i,start);  action[end]=new Action("System.out.print(yytext());",Integer.MAX_VALUE);  isFinal[end]=true;}  }
class C{  public static boolean isGiftCard(String stPassed){  if (isOFBGiftCard(stPassed)) {    return true;  } else   if (isValueLinkCard(stPassed)) {    return true;  }  return false;}  }
class C{  public void randomizeTable(int nodeIndex){  for (int rowIndex=0; rowIndex < getNumRows(nodeIndex); rowIndex++) {    randomizeRow(nodeIndex,rowIndex);  }}  }
class C{  public boolean doTransaction(DB db,Object threadstate) throws WorkloadException {  boolean ret=true;  long st=System.nanoTime();  String op=operationchooser.nextString();  if (op.compareTo("READ") == 0) {    ret=doTransactionRead(db);  } else   if (op.compareTo("UPDATE") == 0) {    ret=doTransactionUpdate(db);  } else   if (op.compareTo("INSERT") == 0) {    ret=doTransactionInsert(db);  } else   if (op.compareTo("SCAN") == 0) {    ret=doTransactionScan(db);  } else {    ret=doTransactionReadModifyWrite(db);  }  long en=System.nanoTime();  _measurements.measure(_operations.get(op),(int)((en - st) / 1000));  if (ret)   _measurements.reportReturnCode(_operations.get(op),-1); else {    _measurements.reportReturnCode(_operations.get(op),0);  }  return ret;}  }
class C{  public StreamConsumer(InputStream stream){  in=new BufferedInputStream(stream);  thread.start();}  }
class C{  public int lengthUnknownElement(){  int res=0;  NodeList nl=this.constructionElement.getChildNodes();  for (int i=0; i < nl.getLength(); i++) {    Node current=nl.item(i);    if ((current.getNodeType() == Node.ELEMENT_NODE) && current.getNamespaceURI().equals(Constants.SignatureSpecNS)) {      res++;    }  }  return res;}  }
class C{  public static boolean slotOcclusionTest(PartSlot slot,IMultipart... parts){  return slotOcclusionTest(slot,null,parts);}  }
class C{  public boolean isAutoNightMode(){  return null == autoNightMode ? _autoNightMode : autoNightMode.get();}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public boolean hasDomain(){  return fieldSetFlags()[2];}  }
class C{  public synchronized Invoker<V> invoke() throws UncompletedInvokeException {  if (future != null && !future.isDone()) {    throw new UncompletedInvokeException(this);  }  future=executor.submit(this);  return this;}  }
class C{  public Scan(){  super();}  }
class C{  public boolean isNull(String key){  return JSONObject.NULL.equals(this.opt(key));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  childData=child.getData();  assertEquals("characterdataGetDataAssert","Margaret Martin",childData);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.512 -0500",hash_original_method="BF0DED73B6BC272CA81A76D665AF3892",hash_generated_method="A2076636F5AB03C501737F8FA41B4580") public void putDoubleArray(String key,double[] value){  unparcel();  mMap.put(key,value);}  }
class C{  @Override public int onStartCommand(Intent intent,int flags,int startid){  Log.i(TAG,"RangzenService onStartCommand.");  return START_STICKY;}  }
class C{  public String readLineNoChop() throws IOException {  CharBuffer cb=new CharBuffer();  if (readLine(cb,false))   return cb.toString(); else   if (cb.length() == 0)   return null; else   return cb.toString();}  }
class C{  public boolean isIdealFitness(){  return false;}  }
class C{  @Override public void registerAutoReclaim(){  m_allocator.registerBufferAutoReclaim(this);}  }
class C{  public int firstIdOnly() throws DBException {  return firstId(true);}  }
class C{  public final void render(TerminalEmulator mEmulator,Canvas canvas,int topRow,int selectionY1,int selectionY2,int selectionX1,int selectionX2){  final boolean reverseVideo=mEmulator.isReverseVideo();  final int endRow=topRow + mEmulator.mRows;  final int columns=mEmulator.mColumns;  final int cursorCol=mEmulator.getCursorCol();  final int cursorRow=mEmulator.getCursorRow();  final boolean cursorVisible=mEmulator.isShowingCursor();  final TerminalBuffer screen=mEmulator.getScreen();  final int[] palette=mEmulator.mColors.mCurrentColors;  if (reverseVideo)   canvas.drawColor(palette[TextStyle.COLOR_INDEX_FOREGROUND],PorterDuff.Mode.SRC);  float heightOffset=mFontLineSpacingAndAscent;  for (int row=topRow; row < endRow; row++) {    heightOffset+=mFontLineSpacing;    final int cursorX=(row == cursorRow && cursorVisible) ? cursorCol : -1;    int selx1=-1, selx2=-1;    if (row >= selectionY1 && row <= selectionY2) {      if (row == selectionY1)       selx1=selectionX1;      selx2=(row == selectionY2) ? selectionX2 : mEmulator.mColumns;    }    TerminalRow lineObject=screen.allocateFullLineIfNecessary(screen.externalToInternalRow(row));    final char[] line=lineObject.mText;    final int charsUsedInLine=lineObject.getSpaceUsed();    long lastRunStyle=0;    boolean lastRunInsideCursor=false;    int lastRunStartColumn=-1;    int lastRunStartIndex=0;    boolean lastRunFontWidthMismatch=false;    int currentCharIndex=0;    float measuredWidthForRun=0.f;    for (int column=0; column < columns; ) {      final char charAtIndex=line[currentCharIndex];      final boolean charIsHighsurrogate=Character.isHighSurrogate(charAtIndex);      final int charsForCodePoint=charIsHighsurrogate ? 2 : 1;      final int codePoint=charIsHighsurrogate ? Character.toCodePoint(charAtIndex,line[currentCharIndex + 1]) : charAtIndex;      final int codePointWcWidth=WcWidth.width(codePoint);      final boolean insideCursor=(column >= selx1 && column <= selx2) || (cursorX == column || (codePointWcWidth == 2 && cursorX == column + 1));      final long style=lineObject.getStyle(column);      final float measuredCodePointWidth=(codePoint < asciiMeasures.length) ? asciiMeasures[codePoint] : mTextPaint.measureText(line,currentCharIndex,charsForCodePoint);      final boolean fontWidthMismatch=Math.abs(measuredCodePointWidth / mFontWidth - codePointWcWidth) > 0.01;      if (style != lastRunStyle || insideCursor != lastRunInsideCursor || fontWidthMismatch || lastRunFontWidthMismatch) {        if (column == 0) {        } else {          final int columnWidthSinceLastRun=column - lastRunStartColumn;          final int charsSinceLastRun=currentCharIndex - lastRunStartIndex;          drawTextRun(canvas,line,palette,heightOffset,lastRunStartColumn,columnWidthSinceLastRun,lastRunStartIndex,charsSinceLastRun,measuredWidthForRun,lastRunInsideCursor,lastRunStyle,reverseVideo);        }        measuredWidthForRun=0.f;        lastRunStyle=style;        lastRunInsideCursor=insideCursor;        lastRunStartColumn=column;        lastRunStartIndex=currentCharIndex;        lastRunFontWidthMismatch=fontWidthMismatch;      }      measuredWidthForRun+=measuredCodePointWidth;      column+=codePointWcWidth;      currentCharIndex+=charsForCodePoint;      while (currentCharIndex < charsUsedInLine && WcWidth.width(line,currentCharIndex) <= 0) {        currentCharIndex+=Character.isHighSurrogate(line[currentCharIndex]) ? 2 : 1;      }    }    final int columnWidthSinceLastRun=columns - lastRunStartColumn;    final int charsSinceLastRun=currentCharIndex - lastRunStartIndex;    drawTextRun(canvas,line,palette,heightOffset,lastRunStartColumn,columnWidthSinceLastRun,lastRunStartIndex,charsSinceLastRun,measuredWidthForRun,lastRunInsideCursor,lastRunStyle,reverseVideo);  }}  }
class C{  @ApiOperation(value="Delete workspace attribute",notes="Deletes attributes of a specified workspace. Roles allowed: account/owner, workspace/admin, system/admin") @ApiResponses(value={@ApiResponse(code=204,message="No Content"),@ApiResponse(code=404,message="Not Found"),@ApiResponse(code=409,message="Invalid attribute name"),@ApiResponse(code=500,message="Internal Server Error")}) @DELETE @Path("/{id}/attribute") @RolesAllowed({"account/owner","workspace/admin","system/admin"}) public void removeAttribute(@ApiParam(value="Workspace ID") @PathParam("id") String wsId,@ApiParam(value="Attribute name",required=true) @Required @QueryParam("name") String attributeName,@Context SecurityContext context) throws NotFoundException, ServerException, ConflictException {  validateAttributeName(attributeName);  final Workspace workspace=workspaceDao.getById(wsId);  if (null != workspace.getAttributes().remove(attributeName)) {    workspaceDao.update(workspace);  }}  }
class C{  public RichTextViewerUndoManager(int undoLevel){  fUndoLevel=undoLevel;}  }
class C{  public List<ScaleIOSDC> queryAllSDC() throws JSONException {  ClientResponse response=get(URI.create(ScaleIOConstants.GET_SDC_URI));  return getResponseObjects(ScaleIOSDC.class,response);}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  private static void printPropertiesJSON(Map<String,String> props,int propIdx){  String jsonText=JSONValue.toJSONString(props);  println(jsonText);}  }
class C{  public static int showConfirmDialog(Window owner,String key,int mode,String propertyConfirmExit,int defaultOption,Object... i18nArgs){  return showConfirmDialogWithOptionalCheckbox(owner,key,mode,propertyConfirmExit,defaultOption,true,i18nArgs);}  }
class C{  public String toString(){  return "Annotation Type:\n" + "   Member types: " + memberTypes + "\n"+ "   Member defaults: "+ memberDefaults+ "\n"+ "   Retention policy: "+ retention+ "\n"+ "   Inherited: "+ inherited;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public GoogleLoginActionButton(AnAction action,Presentation presentation,String place,@NotNull Dimension minimumSize){  super(action,presentation,place,minimumSize);  Services.getLoginService().setLoginMenuItemContribution(this);  updateUi();}  }
