class C{  public VirtualKeyboard(){  setLayout(new BorderLayout());  setDialogUIID("Container");  getContentPane().setUIID("VKB");  setAutoDispose(false);  setDisposeWhenPointerOutOfBounds(true);  setTransitionInAnimator(transitionIn);  setTransitionOutAnimator(transitionOut);  getTitleComponent().getParent().removeComponent(getTitleComponent());  if (showTooltips) {    setGlassPane(txtPainter);  }}  }
class C{  @Override public boolean isSetup() throws RemoteException {  return mLocalProvider.isSetup();}  }
class C{  public void removeVolumesFromStorageGroup(StorageSystem storage,String groupName,List<URI> volumeURIList,boolean forceFlag) throws Exception {  _log.info("{} removeVolume from Storage group {} START...",storage.getSerialNumber(),groupName);  CIMArgument[] inArgs=getRemoveVolumesFromMaskingGroupInputArguments(storage,groupName,volumeURIList,forceFlag);  CIMArgument[] outArgs=new CIMArgument[5];  invokeMethodSynchronously(storage,_cimPath.getControllerConfigSvcPath(storage),"RemoveMembers",inArgs,outArgs,null);  _log.info("{} removeVolume from Storage group {} END...",storage.getSerialNumber(),groupName);}  }
class C{  protected String aggregatorToString(String aggregatorName,Writable value,long superstep){  return new StringBuilder("superstep=").append(superstep).append("\t").append(aggregatorName).append("=").append(value).append("\n").toString();}  }
class C{  public String write(){  return write((Integer)null);}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case -1:    finish();  break;}}  }
class C{  public static boolean bitmapImageNeedsClipping(DefineBits imageTag,BitmapGraphicNode node){  if (((node.getFileVersion().equalTo(FXGVersion.v1_0)) && !node.repeat) || (node.fillMode.equals(FillMode.CLIP))) {    if ((imageTag.width < node.width) || (imageTag.height < node.height))     return true;  }  return false;}  }
class C{  @RequestMapping(value="/project/{project}/download",method={RequestMethod.GET}) @ResponseBody public void dumpProjectDiagnosisInfo(@PathVariable String project,final HttpServletRequest request,final HttpServletResponse response){  String filePath;  try {    filePath=dgService.dumpProjectDiagnosisInfo(project);  } catch (  IOException e) {    throw new InternalErrorException("Failed to dump project diagnosis info. " + e.getMessage(),e);  }  setDownloadResponse(filePath,response);}  }
class C{  public Datastore extendVmfsDatastore(HostScsiDisk disk,Datastore datastore){  VmfsDatastoreExtendSpec extendSpec=getVmfsDatastoreExtendSpec(disk,datastore);  try {    return getDatastoreSystem().extendVmfsDatastore(datastore,extendSpec);  } catch (  HostConfigFault e) {    throw new VMWareException(e);  }catch (  NotFound e) {    throw new VMWareException(e);  }catch (  RuntimeFault e) {    throw new VMWareException(e);  }catch (  RemoteException e) {    throw new VMWareException(e);  }}  }
class C{  public static byte[] readBytes(File file) throws IOException {  long fileSize=file.length();  if (fileSize > Integer.MAX_VALUE) {    throw new IllegalArgumentException("File size exceeds maximum array length (" + fileSize + " > "+ Integer.MAX_VALUE+ ")");  }  FileInputStream in=new FileInputStream(file);  try {    return readBytes(in,(int)fileSize);  }  finally {    in.close();  }}  }
class C{  @Override public void onCreate(SQLiteDatabase db,ConnectionSource connectionSource){  try {    Log.i(DatabaseHelper.class.getName(),"onCreate");    TableUtils.createTable(connectionSource,SimpleData.class);  } catch (  SQLException e) {    Log.e(DatabaseHelper.class.getName(),"Can't create database",e);    throw new RuntimeException(e);  }  RuntimeExceptionDao<SimpleData,Integer> dao=getSimpleDataDao();  long millis=System.currentTimeMillis();  SimpleData simple=new SimpleData(millis);  dao.create(simple);  simple=new SimpleData(millis + 1);  dao.create(simple);  Log.i(DatabaseHelper.class.getName(),"created new entries in onCreate: " + millis);}  }
class C{  public double stddev(){  return Math.sqrt(this.var());}  }
class C{  public String decryptString(String sCipherText){  int nLen=(sCipherText.length() >> 1) & ~7;  if (nLen < BlowfishECB.BLOCKSIZE)   return null;  byte[] cbciv=new byte[BlowfishECB.BLOCKSIZE];  int nNumOfBytes=BinConverter.binHexToBytes(sCipherText,cbciv,0,0,BlowfishECB.BLOCKSIZE);  if (nNumOfBytes < BlowfishECB.BLOCKSIZE)   return null;  m_bfish.setCBCIV(cbciv);  nLen-=BlowfishECB.BLOCKSIZE;  if (nLen == 0)   return "";  byte[] buf=new byte[nLen];  nNumOfBytes=BinConverter.binHexToBytes(sCipherText,buf,BlowfishECB.BLOCKSIZE * 2,0,nLen);  if (nNumOfBytes < nLen)   return null;  m_bfish.decrypt(buf);  int nPadByte=buf[buf.length - 1] & 0x0ff;  if ((nPadByte > 8) || (nPadByte < 0))   nPadByte=0;  nNumOfBytes-=nPadByte;  if (nNumOfBytes < 0)   return "";  return BinConverter.byteArrayToUNCString(buf,0,nNumOfBytes);}  }
class C{  public static void translateM(double[] tm,int tmOffset,double[] m,int mOffset,double x,double y,double z){  for (int i=0; i < 12; i++) {    tm[tmOffset + i]=m[mOffset + i];  }  for (int i=0; i < 4; i++) {    int tmi=tmOffset + i;    int mi=mOffset + i;    tm[12 + tmi]=m[mi] * x + m[4 + mi] * y + m[8 + mi] * z + m[12 + mi];  }}  }
class C{  public boolean mousePressed(MouseEvent e){  int x=e.getX();  int y=e.getY();  if (text.distance(x,y) <= 0f) {    dragging=true;    dragX=x;    dragY=y;    return true;  }  return false;}  }
class C{  public AccessDeniedException(String message){  super(message);}  }
class C{  @Override public void A(final Object raw,FormObject formObj,final int eventType){  if (showMethods) {    System.out.println("DefaultActionHandler.A() ");  }switch (eventType) {case MOUSEENTERED:    javascript.execute(formObj,PdfDictionary.E,ActionHandler.TODO,' ');  break;case MOUSEEXITED:javascript.execute(formObj,PdfDictionary.X,ActionHandler.TODO,' ');break;case MOUSEPRESSED:javascript.execute(formObj,PdfDictionary.D,ActionHandler.TODO,' ');break;case MOUSERELEASED:javascript.execute(formObj,PdfDictionary.A,ActionHandler.TODO,' ');javascript.execute(formObj,PdfDictionary.U,ActionHandler.TODO,' ');break;default :break;}PdfObject aData=null;if (eventType == MOUSERELEASED) {aData=formObj.getDictionary(PdfDictionary.A);}if (aData == null) {aData=formObj.getDictionary(PdfDictionary.AA);if (aData != null) {switch (eventType) {case MOUSEENTERED:aData=aData.getDictionary(PdfDictionary.E);break;case MOUSEEXITED:aData=aData.getDictionary(PdfDictionary.X);break;case MOUSEPRESSED:aData=aData.getDictionary(PdfDictionary.D);break;case MOUSERELEASED:aData=aData.getDictionary(PdfDictionary.U);break;default :break;}}}setCursor(eventType);gotoDest(formObj,eventType,PdfDictionary.Dest);final int subtype=formObj.getParameterConstant(PdfDictionary.Subtype);final int formType=formObj.getNameAsConstant(PdfDictionary.FT);final int popupFlag=formObj.getActionFlag();if (formType == PdfDictionary.Sig) {additionalAction_Signature(formObj,eventType);} else if (eventType == MOUSECLICKED && (popupFlag == FormObject.POPUP || subtype == PdfDictionary.Text)) {if (formObj.getDictionary(PdfDictionary.IRT) != null && formObj.getNameAsConstant(PdfDictionary.RT) == PdfDictionary.Group) {final FormObject IRT=(FormObject)formObj.getDictionary(PdfDictionary.IRT);currentPdfFile.checkResolved(IRT);formObj=IRT;}popup(raw,formObj,currentPdfFile);} else {if (aData == null) {return;}final int command=aData.getNameAsConstant(PdfDictionary.S);switch (command) {case PdfDictionary.Named:additionalAction_Named(eventType,aData);break;case PdfDictionary.GoTo:if (aData != null) {gotoDest(aData,eventType,command);}break;case PdfDictionary.GoToR:if (aData != null) {gotoDest(aData,eventType,command);}break;case PdfDictionary.ResetForm:additionalAction_ResetForm(aData);break;case PdfDictionary.SubmitForm:additionalAction_SubmitForm(aData);break;case PdfDictionary.JavaScript:break;case PdfDictionary.Hide:additionalAction_Hide(aData);break;case PdfDictionary.URI:additionalAction_URI(aData.getTextStreamValue(PdfDictionary.URI));break;case PdfDictionary.Launch:launch(aData);break;case PdfDictionary.SetOCGState:additionalAction_OCState(eventType,aData);break;case PdfDictionary.Sound:if (eventType == MOUSECLICKED || eventType == MOUSERELEASED) {playSound(aData);}break;default :LogWriter.writeFormLog("{stream} Activate Action UNKNOWN command " + aData.getName(PdfDictionary.S) + ' '+ formObj.getObjectRefAsString(),FormStream.debugUnimplemented);break;}}}  }
class C{  protected void filterColumns(){  if (m_parent == null)   return;  for (int i=0; i < m_pnames.size(); ++i) {    String name=(String)m_pnames.get(i);    Column col=m_parent.getColumn(i);    boolean contained=m_names.contains(name);    if (!m_colFilter.include(col,name) || contained) {      m_pnames.remove(i--);      if (!contained) {        ((ColumnEntry)m_entries.get(name)).dispose();        m_entries.remove(name);      }      fireTableEvent(m_rows.getMinimumRow(),m_rows.getMaximumRow(),i,EventConstants.DELETE);    }  }  m_pnames.clear();  Iterator pcols=m_parent.getColumnNames();  for (int i=0, j=m_columns.size(); pcols.hasNext(); ++i) {    String name=(String)pcols.next();    Column col=m_parent.getColumn(i);    if (m_colFilter.include(col,name) && !m_names.contains(name)) {      m_pnames.add(name);      ColumnEntry entry=(ColumnEntry)m_entries.get(name);      if (entry == null) {        entry=new ColumnEntry(j++,col,new ColumnMetadata(this,name));        m_entries.put(name,entry);        fireTableEvent(m_rows.getMinimumRow(),m_rows.getMaximumRow(),i,EventConstants.INSERT);      } else {        entry.colnum=j++;      }      m_lastCol=m_columns.size() - 1;    }  }}  }
class C{  public ProxyObjectOutputStream(OutputStream out) throws IOException {  super(out);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public Set<java.util.Map.Entry<K,V>> entrySet(){  Map<K,V> map=new HashMap<>(backingMap.size());  for (  java.util.Map.Entry<ByteArray,V> entry : backingMap.entrySet()) {    map.put(deserialize(entry.getKey()),entry.getValue());  }  return map.entrySet();}  }
class C{  public void testDateUtilISO8601() throws Exception {  ObjectMapper mapper=new ObjectMapper();  String inputStr="1972-12-28T00:00:00.000+0000";  Date inputDate=mapper.readValue("\"" + inputStr + "\"",java.util.Date.class);  Calendar c=Calendar.getInstance(TimeZone.getTimeZone("GMT"));  c.setTime(inputDate);  assertEquals(1972,c.get(Calendar.YEAR));  assertEquals(Calendar.DECEMBER,c.get(Calendar.MONTH));  assertEquals(28,c.get(Calendar.DAY_OF_MONTH));  inputStr="1972-12-28T00:00:00.000Z";  inputDate=mapper.readValue(quote(inputStr),java.util.Date.class);  c.setTime(inputDate);  assertEquals(1972,c.get(Calendar.YEAR));  assertEquals(Calendar.DECEMBER,c.get(Calendar.MONTH));  assertEquals(28,c.get(Calendar.DAY_OF_MONTH));  inputStr="1972-12-28T00:00:00.000+00:00";  inputDate=mapper.readValue(quote(inputStr),java.util.Date.class);  c.setTime(inputDate);  assertEquals(1972,c.get(Calendar.YEAR));  assertEquals(Calendar.DECEMBER,c.get(Calendar.MONTH));  assertEquals(28,c.get(Calendar.DAY_OF_MONTH));  inputStr="1972-12-28T00:00:00.000+00";  inputDate=mapper.readValue(quote(inputStr),java.util.Date.class);  c.setTime(inputDate);  assertEquals(1972,c.get(Calendar.YEAR));  assertEquals(Calendar.DECEMBER,c.get(Calendar.MONTH));  assertEquals(28,c.get(Calendar.DAY_OF_MONTH));  inputStr="1984-11-30T00:00:00.000Z";  inputDate=mapper.readValue(quote(inputStr),java.util.Date.class);  c.setTime(inputDate);  assertEquals(1984,c.get(Calendar.YEAR));  assertEquals(Calendar.NOVEMBER,c.get(Calendar.MONTH));  assertEquals(30,c.get(Calendar.DAY_OF_MONTH));}  }
class C{  boolean fitsOnScreen(){  boolean result=false;  Component component=getComponent();  if (owner != null && component != null) {    int popupWidth=component.getWidth();    int popupHeight=component.getHeight();    Container parent=(Container)SwingUtilities.getRoot(owner);    if (parent instanceof JFrame || parent instanceof JDialog || parent instanceof JWindow) {      Rectangle parentBounds=parent.getBounds();      Insets i=parent.getInsets();      parentBounds.x+=i.left;      parentBounds.y+=i.top;      parentBounds.width-=i.left + i.right;      parentBounds.height-=i.top + i.bottom;      if (JPopupMenu.canPopupOverlapTaskBar()) {        GraphicsConfiguration gc=parent.getGraphicsConfiguration();        Rectangle popupArea=getContainerPopupArea(gc);        result=parentBounds.intersection(popupArea).contains(x,y,popupWidth,popupHeight);      } else {        result=parentBounds.contains(x,y,popupWidth,popupHeight);      }    } else     if (parent instanceof JApplet) {      Rectangle parentBounds=parent.getBounds();      Point p=parent.getLocationOnScreen();      parentBounds.x=p.x;      parentBounds.y=p.y;      result=parentBounds.contains(x,y,popupWidth,popupHeight);    }  }  return result;}  }
class C{  public void visitEnd(){  if (fv != null) {    fv.visitEnd();  }}  }
class C{  public boolean isOnlyCarsWithFinalDestinationEnabled(){  return _onlyCarsWithFD;}  }
class C{  private Class loadTagFile(Compiler compiler,String tagFilePath,TagInfo tagInfo,PageInfo parentPageInfo) throws JasperException {  JspCompilationContext ctxt=compiler.getCompilationContext();  JspRuntimeContext rctxt=ctxt.getRuntimeContext();synchronized (rctxt) {    JspServletWrapper wrapper=(JspServletWrapper)rctxt.getWrapper(tagFilePath);    if (wrapper == null) {      wrapper=new JspServletWrapper(ctxt.getServletContext(),ctxt.getOptions(),tagFilePath,tagInfo,ctxt.getRuntimeContext(),(URL)ctxt.getTagFileJarUrls().get(tagFilePath));      rctxt.addWrapper(tagFilePath,wrapper);      wrapper.getJspEngineContext().setClassLoader((URLClassLoader)ctxt.getClassLoader());      wrapper.getJspEngineContext().setClassPath(ctxt.getClassPath());    } else {      wrapper.getJspEngineContext().setTagInfo(tagInfo);    }    Class tagClazz;    int tripCount=wrapper.incTripCount();    try {      if (tripCount > 0) {        JspServletWrapper tempWrapper=new JspServletWrapper(ctxt.getServletContext(),ctxt.getOptions(),tagFilePath,tagInfo,ctxt.getRuntimeContext(),(URL)ctxt.getTagFileJarUrls().get(tagFilePath));        tagClazz=tempWrapper.loadTagFilePrototype();        tempVector.add(tempWrapper.getJspEngineContext().getCompiler());      } else {        tagClazz=wrapper.loadTagFile();      }    }  finally {      wrapper.decTripCount();    }    try {      Object tagIns=tagClazz.newInstance();      if (tagIns instanceof JspSourceDependent) {        for (        String dependant : ((JspSourceDependent)tagIns).getDependants()) {          parentPageInfo.addDependant(dependant);        }      }    } catch (    Exception e) {    }    return tagClazz;  }}  }
class C{  public void testRecoveryAfterAnError7_Runtime() throws Exception {  doTestRecoveryAfterAnError(7,HadoopErrorSimulator.Kind.Runtime);}  }
class C{  public final void sub(Matrix3d m1){  this.m00-=m1.m00;  this.m01-=m1.m01;  this.m02-=m1.m02;  this.m10-=m1.m10;  this.m11-=m1.m11;  this.m12-=m1.m12;  this.m20-=m1.m20;  this.m21-=m1.m21;  this.m22-=m1.m22;}  }
class C{  public static ReilInstruction createStm(final Address address,final ReilOperand storeValue,final ReilOperand storeTarget){  return new ReilInstruction(address,ReilMnemonics.STM,storeValue,ReilOperand.EMPTY_OPERAND,storeTarget);}  }
class C{  public void cancelConnecting(){  boolean isConnecting=false;synchronized (currentStateLock) {    if (currentState == ConnectionState.CONNECTING) {      isConnecting=true;      currentState=ConnectionState.READY;    }  }  if (isConnecting) {    Log.i("Manager: Stopping pending connection.");    stopConnectThread();  }}  }
class C{  public String toString(){  return String.valueOf(stopTimeMillis - startTimeMillis) + " ms";}  }
class C{  private synchronized void log(int logType,String msg,Object... args){  if (settings.getLogLevel() == LogLevel.NONE) {    return;  }  String tag=getTag();  String message=createMessage(msg,args);  int methodCount=getMethodCount();  logTopBorder(logType,tag);  logHeaderContent(logType,tag,methodCount);  byte[] bytes=message.getBytes();  int length=bytes.length;  if (length <= CHUNK_SIZE) {    if (methodCount > 0) {      logDivider(logType,tag);    }    logContent(logType,tag,message);    logBottomBorder(logType,tag);    return;  }  if (methodCount > 0) {    logDivider(logType,tag);  }  for (int i=0; i < length; i+=CHUNK_SIZE) {    int count=Math.min(length - i,CHUNK_SIZE);    logContent(logType,tag,new String(bytes,i,count));  }  logBottomBorder(logType,tag);}  }
class C{  @Override public void afterPassivation(ActivateeType passivated) throws Exception {}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public void add(SeriesDataset data,int series){  add(new SubSeriesDataset(data,series));}  }
class C{  void initOrgData(){  Set<POLdapOrganization> ldapManagedOrganizations=getUserManagementService().getLdapManagedOrganizations();  model.getOrganizations().clear();  for (  POLdapOrganization poLdapOrganization : ldapManagedOrganizations) {    String nameToDisplay=poLdapOrganization.getName() == null ? poLdapOrganization.getIdentifier() : String.format("%s (%s)",poLdapOrganization.getName(),poLdapOrganization.getIdentifier());    model.getOrganizations().add(new SelectItem(poLdapOrganization.getIdentifier(),nameToDisplay));  }}  }
class C{  static <T extends Comparable>GeneralRange<T> from(Range<T> range){  @Nullable T lowerEndpoint=range.hasLowerBound() ? range.lowerEndpoint() : null;  BoundType lowerBoundType=range.hasLowerBound() ? range.lowerBoundType() : OPEN;  @Nullable T upperEndpoint=range.hasUpperBound() ? range.upperEndpoint() : null;  BoundType upperBoundType=range.hasUpperBound() ? range.upperBoundType() : OPEN;  return new GeneralRange<T>(Ordering.natural(),range.hasLowerBound(),lowerEndpoint,lowerBoundType,range.hasUpperBound(),upperEndpoint,upperBoundType);}  }
class C{  public Vertex applyRELATED(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network){  Vertex result=null;  Vertex relation=null;  Vertex source=arguments.get(0).getTarget().applyQuotient(variables,network);  if (arguments.size() > 1) {    relation=arguments.get(1).getTarget().applyQuotient(variables,network);  }  List<Relationship> relationships=null;  if (relation == null) {    relationships=source.getNetwork().findAllRelationshipsTo(source);  } else {    relationships=source.getNetwork().findAllRelationshipsTo(source,relation);  }  for (  Relationship relationship : relationships) {    if (!relationship.isInverse() && ((result == null) || (relationship.getSource().getConsciousnessLevel() > result.getConsciousnessLevel()))) {      result=relationship.getSource();    }  }  if (result != null) {    network.getBot().log(SELF,"Found relation",Level.FINER,source,relation,result);  } else {    result=network.createVertex(Primitive.NULL);    network.getBot().log(SELF,"Relation unknown",Level.FINER,source,relation,result);  }  return result;}  }
class C{  public static Builder builder(ConfigureRequest request){  return new Builder(request);}  }
class C{  public void putCharArray(String key,char[] value){  map.put(key,value);}  }
class C{  public Vector4i sub(Vector4i v){  x-=v.x;  y-=v.y;  z-=v.z;  w-=v.w;  return this;}  }
class C{  protected IssuesFeed queryIssues(IssuesQuery query) throws IOException, ServiceException {  return service.query(query,IssuesFeed.class);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.MULTIPLICATIVE_EXPRESSION__LHS:    return getLhs();case N4JSPackage.MULTIPLICATIVE_EXPRESSION__OP:  return getOp();case N4JSPackage.MULTIPLICATIVE_EXPRESSION__RHS:return getRhs();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public double totalInit(){  return memory.getHeapMemoryUsage().getInit() + memory.getNonHeapMemoryUsage().getInit();}  }
class C{  public static void traverse(final File directory,final IDirectoryTraversalCallback callback,final Comparator<File> sorter){  final File[] files=directory.listFiles();  if (files == null) {    return;  }  Arrays.sort(files,sorter);  callback.entering(directory);  for (  final File file : files) {    if (!file.isDirectory()) {      callback.nextFile(file);    }  }  for (  final File file : files) {    if (file.isDirectory()) {      traverse(file,callback);    }  }  callback.leaving(directory);}  }
class C{  public void clear(){  if (USE_MEMORY_CACHE) {synchronized (mMemoryCache) {      mMemoryCache.evictAll();    }  }synchronized (mEntries) {    mEntries.clear();  }  File[] cacheFiles=mCacheDir.listFiles();  for (  File file : cacheFiles) {    if (!file.delete()) {      Log.e(TAG,"Cannot delete " + file.getPath());    }  }}  }
class C{  private static int removeWhiteSpace(char[] data){  if (data == null) {    return 0;  }  int newSize=0;  int len=data.length;  for (int i=0; i < len; i++) {    if (!isWhiteSpace(data[i])) {      data[newSize++]=data[i];    }  }  return newSize;}  }
class C{  public boolean isStringInternEnabled(){  return stringInternEnabled;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 12:44:27.244 -0400",hash_original_method="C79CD565EF7D4DAA3E1BC7711F48F8E1",hash_generated_method="2E6E2F5F57A21F8DEC19DF3B846B8726") @Override protected void onSaveInstanceState(Bundle outState){  super.onSaveInstanceState(outState);  Parcelable p=mFragments.saveAllState();  if (p != null) {    outState.putParcelable(FRAGMENTS_TAG,p);  }}  }
class C{  public boolean isDocControlled(){  Object oo=get_Value(COLUMNNAME_IsDocControlled);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public ArrayDataModelTestCase(String name){  super(name);}  }
class C{  public static Attribute createWeightAttribute(ExampleSet exampleSet){  Attribute weight=exampleSet.getAttributes().getWeight();  if (weight != null) {    exampleSet.getLog().logWarning("ExampleSet.createWeightAttribute(): Overwriting old weight attribute!");  }  weight=AttributeFactory.createAttribute(Attributes.WEIGHT_NAME,Ontology.REAL);  exampleSet.getExampleTable().addAttribute(weight);  exampleSet.getAttributes().setWeight(weight);  for (  Example example : exampleSet) {    example.setValue(weight,1d);  }  return weight;}  }
class C{  public static OMPoint createOMPoint(double latitude,double longitude){  return new OMPoint(latitude,longitude);}  }
class C{  public static void main(String[] args) throws Exception {  System.out.println("Facet counting example:");  System.out.println("-----------------------");  SimpleFacetsExample example=new SimpleFacetsExample();  List<FacetResult> results1=example.runFacetOnly();  System.out.println("Author: " + results1.get(0));  System.out.println("Publish Date: " + results1.get(1));  System.out.println("Facet counting example (combined facets and search):");  System.out.println("-----------------------");  List<FacetResult> results=example.runSearch();  System.out.println("Author: " + results.get(0));  System.out.println("Publish Date: " + results.get(1));  System.out.println("Facet drill-down example (Publish Date/2010):");  System.out.println("---------------------------------------------");  System.out.println("Author: " + example.runDrillDown());  System.out.println("Facet drill-sideways example (Publish Date/2010):");  System.out.println("---------------------------------------------");  for (  FacetResult result : example.runDrillSideways()) {    System.out.println(result);  }}  }
class C{  public int seekMovement(Timestamp dt){  if (m_HR_Concept_ID <= 0)   return 0;  int HR_Movement_ID=0;  String date=DB.TO_DATE(dt);  int Process_ID=m_HR_Process_ID;  int Employee_ID=m_C_BPartner_ID;  int Concept_ID=m_HR_Concept_ID;  MHRConcept concept=MHRConcept.get(Env.getCtx(),Concept_ID);  if ((Process_ID + Employee_ID + Concept_ID) > 0) {    HR_Movement_ID=DB.getSQLValue(null,"SELECT HR_Movement_ID " + " FROM HR_Movement WHERE HR_Process_ID = " + Process_ID + " AND C_BPartner_ID ="+ Employee_ID+ " AND HR_Concept_ID = "+ Concept_ID+ " AND TRUNC(ValidFrom) = TRUNC("+ date+ ")");  }  return HR_Movement_ID;}  }
class C{  public void displayMech(Entity newEntity){  en=newEntity;  entities.clear();  entities.add(newEntity);  removeListeners();  ((DefaultListModel<String>)unitList.getModel()).removeAllElements();  ((DefaultListModel<String>)unitList.getModel()).addElement(Messages.getString("MechDisplay.Ego"));  for (  Entity loadee : newEntity.getLoadedUnits()) {    ((DefaultListModel<String>)unitList.getModel()).addElement(loadee.getModel());    entities.add(loadee);  }  unitList.setSelectedIndex(0);  displayLocations();  addListeners();}  }
class C{  public void tagDefineFontInfo(int fontId,String fontName,int flags,int[] codes) throws IOException {  fontCodes.put(new Integer(fontId),codes);}  }
class C{  public void message(SerialMessage r){  log.warn("unexpected message");}  }
class C{  private boolean handleDataChange() throws Exception {  StateWrapper currentWrapper=stateRef.get();  StateWrapper notifyWrapper=notifyRef.get();  StateWrapper newWrapper=readCurrentContext();  traceLogWrappers(currentWrapper,notifyWrapper,newWrapper);  if (currentWrapper.version + 1 == newWrapper.version && notifyWrapper.version >= currentWrapper.version && stateRef.compareAndSet(currentWrapper,newWrapper)) {    mayNotifyStateChanged(newWrapper);  } else {    final int start=(notifyWrapper != null ? (notifyWrapper.version) : 0) % logSize;    int count=newWrapper.version - (notifyWrapper != null ? (notifyWrapper.version) : 0);    if (log.isDebugEnabled()) {      log.debug("Events missed, trying to replay start " + start + " count "+ count);    }    for (int i=start; i < (start + count); i++) {      Stat stat=new Stat();      StateMachineContext<S,E> context=((ZookeeperStateMachinePersist<S,E>)persist).readLog(i,stat);      int ver=(stat.getVersion() - 1) * logSize + (i + 1);      if (i + logSize < ver) {        notifyError(new StateMachineEnsembleException("Current version behind more than log size"));        break;      }      if (log.isDebugEnabled()) {        log.debug("Replay position " + i + " with version "+ ver);        log.debug("Context in position " + i + " "+ context);      }      StateWrapper wrapper=new StateWrapper(context,ver);      StateWrapper currentWrapperx=stateRef.get();      if (currentWrapperx.context == null) {        stateRef.set(wrapper);      } else       if (wrapper.version == currentWrapperx.version + 1) {        stateRef.set(wrapper);      }      mayNotifyStateChanged(wrapper);    }    return count > 0;  }  return false;}  }
class C{  final public MutableString append(final CharSequence[] a,final CharSequence separator){  return append(a,0,a.length,separator);}  }
class C{  public TimeUnit durationUnit(){  return durationUnit;}  }
class C{  protected void hideKeyboard(){  AppUtils.hideKeyboard(this);}  }
class C{  public Object opt(String key){  return key == null ? null : this.map.get(key);}  }
class C{  public boolean isDate(){  return m_dataType.equals(X_AD_ImpFormat_Row.DATATYPE_Date);}  }
class C{  public Release addRelease(Release release) throws IllegalArgumentException {  if (release == null) {    throw new IllegalArgumentException("Release should not be null");  }  if (releases == null) {    releases=new HashSet<Release>();  }  releases.add(release);  release.addEntry(this);  return release;}  }
class C{  public ReloadableRegistrationHandle<T> add(Key<T> key,Provider<T> item){  AtomicReference<Provider<T>> ref=new AtomicReference<>(item);  items.add(ref);  return new ReloadableHandle(ref,key,item);}  }
class C{  private boolean bothLinksHaveSameLinkStats(Link linkA,Link linkB){  boolean bothLinksHaveSameLinkStats=true;  if (linkA.getFreespeed() != linkB.getFreespeed()) {    bothLinksHaveSameLinkStats=false;  }  if (linkA.getCapacity() != linkB.getCapacity()) {    bothLinksHaveSameLinkStats=false;  }  return bothLinksHaveSameLinkStats;}  }
class C{  public LogisticGeneratorPanel(){  super();  JTextField tfGrowthRate=createTextField(null,null);  mainPanel.addItem("Growth Rate",tfGrowthRate);  add(mainPanel);  this.addBottomText("<html>Note 1: This is not a sigmoidal logistic function. <p>" + "For that, create a neuron and set its update rule to sigmoidal.<p> " + " Note 2: for chaos, try growth rates between 3.6 and 4</html>");}  }
class C{  public static void apply(int gravity,int w,int h,Rect container,Rect outRect){  apply(gravity,w,h,container,0,0,outRect);}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(QUALIFIERS)) {    policyQualifiers=Collections.emptySet();  } else   if (name.equalsIgnoreCase(ID)) {    throw new IOException("Attribute ID may not be deleted from " + "PolicyInformation.");  } else {    throw new IOException("Attribute name [" + name + "] not recognized by PolicyInformation.");  }}  }
class C{  protected void paintBackground(Graphics g){}  }
class C{  public ServiceCall<List<IdentifiedLanguage>> identify(final String text){  final RequestBuilder requestBuilder=RequestBuilder.post(PATH_IDENTIFY).header(HttpHeaders.ACCEPT,HttpMediaType.APPLICATION_JSON).bodyContent(text,HttpMediaType.TEXT_PLAIN);  ResponseConverter<List<IdentifiedLanguage>> converter=ResponseConverterUtils.getGenericObject(TYPE_LIST_IDENTIFIED_LANGUAGE,LANGUAGES);  return createServiceCall(requestBuilder.build(),converter);}  }
class C{  protected void sequence_CharacterClassAtom(ISerializationContext context,CharacterClassAtom semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public String toString(){  if (isValid()) {    return (getDisplayName());  } else {    if ((null != m_badValue) && (null != m_badValue.toString())) {      return m_badValue.toString();    } else {      return "";    }  }}  }
class C{  public CharBuffer insert(int offset,int i){  return insert(offset,String.valueOf(i));}  }
class C{  public boolean isReviewSubmitted(ReviewResult review) throws GitClientException {  if (review.getReview().getTargetRef() == null || review.getReview().getTargetRef().isEmpty()) {    return false;  }  return gitClient.areAncestorDescendent(review.getHash(),review.getReview().getTargetRef());}  }
class C{  public static void config(String titulo,String eixo){  grafico.getData().clear();  eixoX.setLabel(eixo);  grafico.setLegendVisible(false);}  }
class C{  DomainWhoisResponse(DomainResource domain,DateTime timestamp){  super(timestamp);  this.domain=checkNotNull(domain,"domain");}  }
class C{  public static final Criterion internalDateAfter(Date date,DateResolution res){  return new InternalDateCriterion(new DateOperator(DateComparator.AFTER,date,res));}  }
class C{  public Builder addDefaultShareMenuItem(){  mIntent.putExtra(EXTRA_DEFAULT_SHARE_MENU_ITEM,true);  return this;}  }
class C{  public void repaint(){}  }
class C{  @Override public String toString(){  StringBuilder buff=new StringBuilder();  buff.append(opcode.length());  buff.append('.');  buff.append(opcode);  for (  String value : args) {    buff.append(',');    buff.append(value.length());    buff.append('.');    buff.append(value);  }  buff.append(';');  return buff.toString();}  }
class C{  Log4jNodeIdFilePath(UUID id){  nodeId=id;}  }
class C{  public static BigInteger createBigInteger(final String str){  if (str == null) {    return null;  }  int pos=0;  int radix=10;  boolean negate=false;  if (str.startsWith("-")) {    negate=true;    pos=1;  }  if (str.startsWith("0x",pos) || str.startsWith("0X",pos)) {    radix=16;    pos+=2;  } else   if (str.startsWith("#",pos)) {    radix=16;    pos++;  } else   if (str.startsWith("0",pos) && str.length() > pos + 1) {    radix=8;    pos++;  }  final BigInteger value=new BigInteger(str.substring(pos),radix);  return negate ? value.negate() : value;}  }
class C{  public boolean resetTailOutputLog(){  return true;}  }
class C{  public void clear(){  long delta=0L;  int i=0;  Node<V>[] tab=table;  while (tab != null && i < tab.length) {    int fh;    Node<V> f=tabAt(tab,i);    if (f == null)     ++i; else     if ((fh=f.hash) == MOVED) {      tab=helpTransfer(tab,f);      i=0;    } else {synchronized (f) {        if (tabAt(tab,i) == f) {          Node<V> p=(fh >= 0 ? f : (f instanceof TreeBin) ? ((TreeBin<V>)f).first : null);          while (p != null) {            --delta;            p=p.next;          }          setTabAt(tab,i++,null);        }      }    }  }  if (delta != 0L)   addCount(delta,-1);}  }
class C{  public void connectionClosed(javax.sql.ConnectionEvent event){}  }
class C{  public boolean hadFailures(){  return failures;}  }
class C{  public void addProfile(Profile profile){  if (PROFILE_KIND.equals(profile.getKind())) {    this.profiles.add(profile.getSettings());  }}  }
class C{  public void playSequentially(List<Animator> items){  if (items != null && items.size() > 0) {    mNeedsSort=true;    if (items.size() == 1) {      play(items.get(0));    } else {      for (int i=0; i < items.size() - 1; ++i) {        play(items.get(i)).before(items.get(i + 1));      }    }  }}  }
class C{  public void cancelPendingRequests(Object tag){  if (mRequestQueue != null) {    mRequestQueue.cancelAll(tag);  }}  }
class C{  @ObjectiveCName("removeReactionWithPeer:withRid:withCode:") public Command<Void> removeReaction(Peer peer,long rid,String code){  return null;}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.PARAMETER;}  }
class C{  public boolean undo(INode state){  SmallPuzzle tp=(SmallPuzzle)state;  tp.s[pos]--;  return true;}  }
class C{  public ReliefF(int featureCount,final int m,final int n,final DistanceMetric dm){  this(featureCount,m,n,dm,new DefaultVectorCollectionFactory<Vec>());}  }
class C{  protected void validateStatePatch(State current,State patch,URI referer){  if (current.taskInfo.stage != TaskState.TaskStage.CREATED && referer.getPath().contains(TaskSchedulerServiceFactory.SELF_LINK)) {    throw new IllegalStateException("Service is not in CREATED stage, ignores patch from TaskSchedulerService");  }  checkState(current.taskInfo.stage.ordinal() < TaskState.TaskStage.FINISHED.ordinal(),"Invalid stage update. Can not patch anymore when in final stage %s",current.taskInfo.stage);  if (patch.taskInfo != null) {    checkState(patch.taskInfo.stage != null,"Invalid stage update. 'stage' can not be null in patch");    checkState(patch.taskInfo.stage.ordinal() >= current.taskInfo.stage.ordinal(),"Invalid stage update. Can not revert to %s from %s",patch.taskInfo.stage,current.taskInfo.stage);    if (patch.taskInfo.subStage != null && current.taskInfo.subStage != null) {      checkState(patch.taskInfo.subStage.ordinal() >= current.taskInfo.subStage.ordinal(),"Invalid stage update. 'subStage' cannot move back.");    }  }  checkArgument(patch.parentLink == null,"ParentLink cannot be changed.");  checkArgument(patch.image == null,"Image cannot be changed.");  checkArgument(patch.sourceImageDataStore == null,"Source datastore cannot be changed.");  checkArgument(patch.destinationDataStore == null,"Destination datastore cannot be changed.");}  }
class C{  public void removeScrollingListener(OnWheelScrollListener listener){  scrollingListeners.remove(listener);}  }
class C{  public static InfoRegister updateFolder(User user,Integer bookId,Integer folderId,List changeFields,List inter,Map documents,String entidad) throws ValidationException, SecurityException, BookException, SessionException, TecDocException, ParseException, AttributesException {  InfoRegister result=new InfoRegister();  String sessionID=new String();  try {    sessionID=Login.login(user,entidad);    BookSession.openBook(sessionID,bookId,entidad);    Integer launchDistOutRegister=RegisterServicesUtil.getInvesConfActions(entidad);    int folderIdInt=-1;    if (folderId != null) {      folderIdInt=folderId.intValue();    }    RegisterServicesUtil.canUpdateFolder(sessionID,bookId,folderIdInt,user,changeFields,documents,entidad);    AxSf axsfQ=BookSession.getFormFormat(sessionID,bookId,entidad);    FieldFormat fieldFormat=RegisterServicesUtil.getFieldFormat(sessionID,bookId);    Map translatedIds=RegisterServicesUtil.getFieldsWithSustitute(changeFields,axsfQ,sessionID,bookId,entidad);    AxSf newAxSF=RegisterServicesUtil.initInOrOutFolder(user,axsfQ);    newAxSF=RegisterServicesUtil.completeFolder(translatedIds,axsfQ,newAxSF,user.getLocale(),changeFields,fieldFormat,false);    omitirFicherosSubidosAnt(bookId,folderId,documents,entidad,sessionID);    FolderDataSession data=Register.updateFolder(sessionID,bookId,newAxSF,folderId,inter,documents,launchDistOutRegister,user.getLocale(),entidad);    result=ConsultRegister.consultRegisterInfo(bookId,data.getAxsfOld(),folderId.intValue(),data.getScrofic(),data.getUserName(),user.getLocale());  }  finally {    BookSession.closeBook(sessionID,bookId);    SecuritySession.logout(sessionID,entidad);  }  return result;}  }
class C{  public BESliderUI(JSlider b){  super(b);}  }
class C{  public boolean isOpposed(IPlayer other){  return (owner == null) || (other == null) || owner.isEnemyOf(other);}  }
class C{  public static Date startOfDayUsingOutputTimeZone(Date dateInst) throws AdeException {  if (outputTimeZone == null) {    final TimeZone outputTimezone=Ade.getAde().getConfigProperties().getOutputTimeZone();    outputTimeZone=DateTimeZone.forOffsetMillis(outputTimezone.getRawOffset());  }  if (dateInst == null) {    throw new IllegalArgumentException();  }  DateTime startOFDay=new DateTime(dateInst);  startOFDay=startOFDay.withZone(outputTimeZone);  startOFDay=startOFDay.withTimeAtStartOfDay();  return startOFDay.toDate();}  }
class C{  public boolean equals(Timestamp theTimestamp){  if (theTimestamp == null) {    return false;  }  return (this.getTime() == theTimestamp.getTime()) && (this.getNanos() == theTimestamp.getNanos());}  }
class C{  public static int indexOf(int[] array,int value,int startIndex){  for (int i=startIndex; i < array.length; i++) {    if (array[i] == value) {      return i;    }  }  return -1;}  }
class C{  boolean createFlexibleVolume(String containingAggrName,boolean isSnapLock,String remoteLocation,String size,String snaplockType,String spaceReserve){  NaElement elem=new NaElement("volume-create");  elem.addNewChild("volume",name);  if (isSnapLock) {    elem.addNewChild("is-snaplock",Boolean.toString(isSnapLock));  }  if (containingAggrName != null && !containingAggrName.isEmpty()) {    elem.addNewChild("containing-aggr-name",containingAggrName);  }  if (remoteLocation != null && !remoteLocation.isEmpty()) {    elem.addNewChild("remote-location",remoteLocation);  }  if (size != null && !size.isEmpty()) {    elem.addNewChild("size",size);  }  if (snaplockType != null && !snaplockType.isEmpty()) {    elem.addNewChild("snaplock-type",snaplockType);  }  if (spaceReserve != null && !spaceReserve.isEmpty()) {    elem.addNewChild("space-reserve",spaceReserve);  }  try {    server.invokeElem(elem);  } catch (  Exception e) {    String msg="Failed to create new volume: " + name;    log.error(msg,e);    throw new NetAppException(msg,e);  }  return true;}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof SocketPermission))   return false;  SocketPermission that=(SocketPermission)obj;  if (this.mask != that.mask)   return false;  if ((that.mask & RESOLVE) != that.mask) {    if ((this.portrange[0] != that.portrange[0]) || (this.portrange[1] != that.portrange[1])) {      return false;    }  }  if (this.getName().equalsIgnoreCase(that.getName())) {    return true;  }  try {    this.getCanonName();    that.getCanonName();  } catch (  UnknownHostException uhe) {    return false;  }  if (this.invalid || that.invalid)   return false;  if (this.cname != null) {    return this.cname.equalsIgnoreCase(that.cname);  }  return false;}  }
class C{  protected File createJar(String filename) throws Exception {  Model schema=new TreeModel();  OntologyLoader ontologies=new OntologyLoader(schema);  ontologies.loadOntologies(imports);  OWLCompiler compiler=new OWLCompiler();  compiler.setModel(schema);  compiler.setPrefixNamespaces(ontologies.getNamespaces());  File concepts=getConceptJar(targetDir,filename);  compiler.createJar(concepts);  return concepts;}  }
class C{  private void enlarge(final int size){  int length1=2 * data.length;  int length2=length + size;  byte[] newData=new byte[length1 > length2 ? length1 : length2];  System.arraycopy(data,0,newData,0,length);  data=newData;}  }
class C{  protected void cleanupError() throws IOException, InterruptedException {  HadoopErrorSimulator.instance().onReduceCleanup();}  }
class C{  protected void doStateTerminated(){  setColor(new Color(0xd0,0x00,0x00));  getSimulation().removeAgent(this);  System.err.println("Terminate called for Bee " + this);}  }
class C{  @Deprecated public AdBlockerAdviseDialog(Context context,String title,String text){  this.libraryPreferences=new LibraryPreferences(context);  this.context=context;  this.title=title;  this.text=text;  this.onlyOnce=false;}  }
class C{  public static final double[] randomNormalizedVector(final int dimensionality){  final double[] v=new double[dimensionality];  for (int i=0; i < dimensionality; i++) {    v[i]=Math.random();  }  double norm=euclideanLength(v);  if (norm != 0) {    for (int row=0; row < v.length; row++) {      v[row]/=norm;    }    return v;  } else {    return randomNormalizedVector(dimensionality);  }}  }
class C{  public org.apache.nutch.storage.WebPage.Builder clearOutlinks(){  outlinks=null;  fieldSetFlags()[19]=false;  return this;}  }
class C{  protected NewRelationSetPage(){  super("New Named Set of Relations");  setTitle("New Named Set of Relations");  setDescription("Add a new set of relations to a already existing " + ".dpans file, or create a new .dpans file with a new set.");}  }
class C{  public static double[] GaToLLa(Geo[] ga,double[] lla){  if (lla == null) {    lla=new double[2 * ga.length];  }  for (int i=0; i < ga.length; i++) {    Geo g=ga[i];    lla[i * 2]=g.getLatitude();    lla[i * 2 + 1]=g.getLongitude();  }  return lla;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.EQUALITY_OP___EQUALS_OP_1:    return ((InternalEList<?>)getEqualsOp_1()).basicRemove(otherEnd,msgs);case UmplePackage.EQUALITY_OP___NOTEQUALS_OP_1:  return ((InternalEList<?>)getNotequalsOp_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public List<NamedRelatedResourceRep> listSubtenants(URI parentId){  return client.get(TenantOrgList.class,SUBTENANTS_URL,parentId).getSubtenants();}  }
class C{  public void testQuorumSucceed(){  quorum.succeed();  quorum.fail();  assertEquals(callbackResult.get(),0);  quorum.fail();  quorum.succeed();  assertEquals(callbackResult.get(),1);}  }
class C{  public void testMultipleLegs(){  ChooseRandomLegMode algo=new ChooseRandomLegMode(new String[]{TransportMode.car,TransportMode.pt},MatsimRandom.getRandom());  Plan plan=PopulationUtils.createPlan(PopulationUtils.getFactory().createPerson(Id.create(1,Person.class)));  PopulationUtils.createAndAddActivityFromCoord(plan,"home",new Coord(0,0));  PopulationUtils.createAndAddLeg(plan,TransportMode.car);  PopulationUtils.createAndAddActivityFromCoord(plan,"work",new Coord((double)0,(double)0));  PopulationUtils.createAndAddLeg(plan,TransportMode.car);  PopulationUtils.createAndAddActivityFromCoord(plan,"shop",new Coord((double)0,(double)0));  PopulationUtils.createAndAddLeg(plan,TransportMode.car);  PopulationUtils.createAndAddActivityFromCoord(plan,"home",new Coord((double)0,(double)0));  algo.run(plan);  assertEquals("unexpected leg mode in leg 1.",TransportMode.pt,((Leg)plan.getPlanElements().get(1)).getMode());  assertEquals("unexpected leg mode in leg 2.",TransportMode.pt,((Leg)plan.getPlanElements().get(3)).getMode());  assertEquals("unexpected leg mode in leg 3.",TransportMode.pt,((Leg)plan.getPlanElements().get(5)).getMode());}  }
class C{  @ApiOperation(value="Reinitiailize SymmetricDS on the specified engine") @RequestMapping(value="engine/{engine}/reinitialize",method=RequestMethod.POST) @ResponseStatus(HttpStatus.NO_CONTENT) @ResponseBody public final void postReinitializeByEngine(@PathVariable("engine") String engineName){  reinitializeImpl(getSymmetricEngine(engineName));}  }
class C{  protected void Number() throws javax.xml.transform.TransformerException {  if (null != m_token) {    double num;    try {      if ((m_token.indexOf('e') > -1) || (m_token.indexOf('E') > -1))       throw new NumberFormatException();      num=Double.valueOf(m_token).doubleValue();    } catch (    NumberFormatException nfe) {      num=0.0;      error(XPATHErrorResources.ER_COULDNOT_BE_FORMATTED_TO_NUMBER,new Object[]{m_token});    }    m_ops.m_tokenQueue.setElementAt(new XNumber(num),m_queueMark - 1);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),m_queueMark - 1);    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);    nextToken();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newNode;  String newValue;  doc=(Document)load("staff",true);  newNode=doc.createDocumentFragment();  newValue=newNode.getNodeValue();  assertNull("initiallyNull",newValue);  newNode.setNodeValue("This should have no effect");  newValue=newNode.getNodeValue();  assertNull("nullAfterAttemptedChange",newValue);}  }
class C{  public List<Integer> emit(String streamId,List<Object> tuple){  return emit(streamId,tuple,null);}  }
class C{  protected HashMap<Value,Object> newInitialFlow(){  HashMap<Value,Object> m=new HashMap<Value,Object>();  for (  Value l : (Collection<Value>)localsAndFieldRefs) {    m.put(l,NOTHING);  }  return m;}  }
class C{  public CStepBlockAction(final JFrame parent,final IFrontEndDebuggerProvider debugger,final ZyGraph graph){  m_parent=Preconditions.checkNotNull(parent,"IE00306: Parent argument can not be null");  m_debugger=Preconditions.checkNotNull(debugger,"IE01108: Debugger argument can not be null");  m_graph=Preconditions.checkNotNull(graph,"IE01542: Graph argument can not be null");  putValue(Action.SHORT_DESCRIPTION,"Step to next basic block");}  }
class C{  public void test_12() throws Exception {  final String namespace="test" + UUID.randomUUID();  final BigdataSailRepositoryConnection cxn=prepareTest(namespace,false,false,false);  insertSparql(cxn);  IValueCentricTextIndexer<?> searchEngine=cxn.getTripleStore().getLexiconRelation().getSearchEngine();  assertEquals(0,searchEngine.count(query("1")));  assertEquals(0,searchEngine.count(query("2")));  assertEquals(0,searchEngine.count(query("3")));  assertEquals(0,searchEngine.count(query("4")));  assertEquals(0,searchEngine.count(query("true")));  assertEquals(0,searchEngine.count(query("false")));  assertEquals(1,searchEngine.count(query("plain")));  assertEquals(0,searchEngine.count(query("datatyped")));  assertEquals(1,searchEngine.count(query("english")));  endTest(cxn);}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public ServiceParameterException(String message,ParameterType type,String id,Object[] params){  super(message,params);  String enumName=type.toString();  enumName=enumName.substring(enumName.lastIndexOf(".") + 1);  setMessageKey(getMessageKey() + "." + enumName+ "."+ id);}  }
class C{  public void reset(){  getHeaders().clear();  getPayloadFilters().clear();  getDestinationEntries().clear();}  }
class C{  @Override public String toString(){  return name;}  }
class C{  public Long read(String value){  return Long.valueOf(value);}  }
class C{  public BezierDemo(){  initComponents();  canvas=new Canvas();  canvas.setOpaque(true);  canvas.setBackground(Color.WHITE);  canvas.addMouseListener(handler);  canvas.addMouseMotionListener(handler);  add(canvas,BorderLayout.CENTER);  Point2D.Double[] d={};  BezierPath digi=new BezierPath();  digi.addPolyline(Arrays.asList(d));  Example ex=new Example();  examples.add(ex);  ex.digitized=digi;  ex.error=2d;}  }
class C{  public static boolean processProduct(MProduct product,String trxName){  final String whereClause=I_M_CostDetail.COLUMNNAME_M_Product_ID + "=?" + " AND "+ I_M_CostDetail.COLUMNNAME_Processed+ "=?";  int counterOK=0;  int counterError=0;  List<MCostDetail> list=new Query(product.getCtx(),I_M_CostDetail.Table_Name,whereClause,trxName).setParameters(product.getM_Product_ID(),false).setOrderBy("C_AcctSchema_ID, M_CostElement_ID, AD_Org_ID, M_Warehouse_ID, M_AttributeSetInstance_ID, Created").list();  for (  MCostDetail cd : list) {    if (cd.process())     counterOK++; else     counterError++;  }  s_log.config("OK=" + counterOK + ", Errors="+ counterError);  return counterError == 0;}  }
class C{  protected void resetOMGraphicAfterEditRender(){  ((OMRangeRings)getGraphic()).setDrawLabels(drawLabelsHolder);}  }
class C{  public void previous(){  pos--;}  }
class C{  public String syncGetWifiApStateByName(){switch (mWifiApState.get()) {case WIFI_AP_STATE_DISABLING:    return "disabling";case WIFI_AP_STATE_DISABLED:  return "disabled";case WIFI_AP_STATE_ENABLING:return "enabling";case WIFI_AP_STATE_ENABLED:return "enabled";case WIFI_AP_STATE_FAILED:return "failed";default :return "[invalid state]";}}  }
class C{  public void writeTo(DataOutputStream os) throws IOException {  os.writeInt(type);  os.writeInt(size);  int maxBuffSize=1024;  int writeBuffSize=data.remaining() < maxBuffSize ? data.remaining() : maxBuffSize;  byte[] tmp=new byte[writeBuffSize];  while (data.remaining() > 0) {    int length=data.remaining() > tmp.length ? tmp.length : data.remaining();    data.get(tmp,0,length);    os.write(tmp,0,length);  }  if (padding > 0) {    os.write(new byte[padding]);  }}  }
class C{  public IDebugSearch debug(IDebugSearch debugger){  IDebugSearch old=debug;  debug=debugger;  return old;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void prepareFixedStatement(String sql) throws SQLException {  super.prepareFixedStatement(sql);  RowDescriptor rowDescriptor=fbStatement.getParameterDescriptor();  assert rowDescriptor != null : "RowDescriptor should not be null after prepare";  isParamSet=new boolean[rowDescriptor.getCount()];  fieldValues=rowDescriptor.createDefaultFieldValues();  fields=new FBField[rowDescriptor.getCount()];  for (int i=0; i < isParamSet.length; i++) {    FieldDataProvider dataProvider=fieldValues.getFieldValue(i);    fields[i]=FBField.createField(getParameterDescriptor(i + 1),dataProvider,gdsHelper,false);  }  this.isExecuteProcedureStatement=fbStatement.getType() == StatementType.STORED_PROCEDURE;}  }
class C{  public void publishResponse(byte[] responseData) throws MqttException, Exception {  wmqttClient.publish(getRespTopic(),responseData,1,false);}  }
class C{  public SimpleMCSweepLineIntersector(){}  }
class C{  protected void appendContentEnd(final StringBuffer buffer){  buffer.append(contentEnd);}  }
class C{  public PublisherPool(int poolSize,String brokerUrl,boolean isSync){  GenericObjectPoolConfig genericObjectPoolConfig=new GenericObjectPoolConfig();  genericObjectPoolConfig.setMaxTotal(poolSize);  genericObjectPoolConfig.setMinIdle(poolSize);  genericObjectPoolConfig.setMaxIdle(poolSize);  this.publisherObjectPool=new GenericObjectPool<BaseClient>(new PublisherPoolFactory(brokerUrl,isSync),genericObjectPoolConfig);}  }
class C{  public static int size(TreePath self){  return self.getPathCount();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case MappingPackage.ENTITY_ATTRIBUTE_SOURCE__ATTRIBUTE:    setAttribute(ATTRIBUTE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_CONSTRAINT_1__CONSTRAINT_BODY_1:    getConstraintBody_1().clear();  getConstraintBody_1().addAll((Collection<? extends ConstraintBody_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void onMessage(Message message){  if (message != null) {    MapMessage mapMessage=(MapMessage)message;    try {      stats=new BrokerStatistics(mapMessage,destination);    } catch (    JMSException e) {      e.printStackTrace();    }  }}  }
class C{  private void validateDomainObjectKey(BaseVO vo,DomainObject<?> domainObject,boolean priceModelCreatedInTransaction) throws OperationNotPermittedException {  if (domainObject != null && !priceModelCreatedInTransaction && domainObject.getKey() != vo.getKey()) {    PlatformUser user=dm.getCurrentUser();    OperationNotPermittedException onp=new OperationNotPermittedException("Saving the price model failed.");    logger.logWarn(Log4jLogger.SYSTEM_LOG,onp,LogMessageIdentifier.WARN_STORE_DOMAIN_OBJECT_FAILED_WRONG_TECHNICAL_KEY,user.getUserId(),String.valueOf(domainObject));    throw onp;  }}  }
class C{  public final WritableRaster filter(Raster src,WritableRaster dst){  int numBands=src.getNumBands();  int dstLength=dst.getNumBands();  int height=src.getHeight();  int width=src.getWidth();  int srcPix[]=new int[numBands];  if (dst == null) {    dst=createCompatibleDestRaster(src);  } else   if (height != dst.getHeight() || width != dst.getWidth()) {    throw new IllegalArgumentException("Width or height of Rasters do not " + "match");  }  dstLength=dst.getNumBands();  if (numBands != dstLength) {    throw new IllegalArgumentException("Number of channels in the src (" + numBands + ") does not match number of channels"+ " in the destination ("+ dstLength+ ")");  }  int numComponents=ltable.getNumComponents();  if (numComponents != 1 && numComponents != src.getNumBands()) {    throw new IllegalArgumentException("Number of arrays in the " + " lookup table (" + numComponents + " is not compatible with the "+ " src Raster: "+ src);  }  if (ImagingLib.filter(this,src,dst) != null) {    return dst;  }  if (ltable instanceof ByteLookupTable) {    byteFilter((ByteLookupTable)ltable,src,dst,width,height,numBands);  } else   if (ltable instanceof ShortLookupTable) {    shortFilter((ShortLookupTable)ltable,src,dst,width,height,numBands);  } else {    int sminX=src.getMinX();    int sY=src.getMinY();    int dminX=dst.getMinX();    int dY=dst.getMinY();    for (int y=0; y < height; y++, sY++, dY++) {      int sX=sminX;      int dX=dminX;      for (int x=0; x < width; x++, sX++, dX++) {        src.getPixel(sX,sY,srcPix);        ltable.lookupPixel(srcPix,srcPix);        dst.setPixel(dX,dY,srcPix);      }    }  }  return dst;}  }
class C{  public static boolean isAMultiple(Unsigned that,Unsigned multiple){  return that.equal(UnsignedUtils.roundDown(that,multiple));}  }
class C{  public static String decompressIpv6Address(String address){  if (address == null) {    return null;  }  address=address.trim();  StringBuilder stdForm=new StringBuilder();  String[] splitted=address.split(":");  for (  String str : splitted) {    if ("".equals(str)) {      for (int i=0; i <= 8 - splitted.length; i++) {        stdForm.append("0000:");      }    } else {      while (str.length() != 4)       str="0" + str;      stdForm.append(str + ":");    }  }  return stdForm.substring(0,stdForm.length() - 1);}  }
class C{  public TreeRTGPinusPonderosa(){  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:28.343 -0500",hash_original_method="55DFD7752393168BC8C4EABC7763F14D",hash_generated_method="75244C1F8C529C54B3B1868ED3701E91") @Override public int update(Uri uri,ContentValues values,String selection,String[] selectionArgs){  throw new UnsupportedOperationException("Not implemented");}  }
class C{  public static void rootEnumerate(ObjectReference obj){  VM.traceInterface.updateDeathTime(obj);}  }
class C{  protected static void doConfigure(Configuration configuration,InputStream stream,String resourceName) throws EPException {  Document document=getDocument(stream,resourceName);  doConfigure(configuration,document);}  }
class C{  @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DomPackage.TAG__TITLE:    if (title != null)     msgs=((InternalEObject)title).eInverseRemove(this,EOPPOSITE_FEATURE_BASE - DomPackage.TAG__TITLE,null,msgs);  return basicSetTitle((TagTitle)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  private QueryBuilderKraken parseMap(QueryBuilderKraken query){  boolean distinct=false;  Token token=scanToken();  if (token == Token.DISTINCT)   distinct=true; else   _token=token;  ArrayList<ExprKraken> resultItems=new ArrayList<>();  Token startToken=scanToken();  String startLexeme=_lexeme;  int startOffset=_parseIndex;  while ((token=scanToken()) != null && token != Token.EOF && token != Token.FROM) {  }  if (token != Token.FROM) {    throw error("expected FROM at '{0}'",token);  }  _query=query;  String tableName=parseFrom();  query.setTableName(tableName);  token=scanToken();  Token tailToken=token;  int tailOffset=_parseIndex;  _token=startToken;  _parseIndex=startOffset;  _lexeme=startLexeme;  ExprKraken expr=parseSelectExpr();  resultItems.add(expr);  while ((token=scanToken()) == Token.COMMA) {    expr=parseSelectExpr();    resultItems.add(expr);  }  _token=tailToken;  _parseIndex=tailOffset;  token=scanToken();  ExprKraken whereExpr=null;  if (token == Token.WHERE) {    whereExpr=parseExpr();  } else {    _token=token;  }  ParamExpr[] params=_params.toArray(new ParamExpr[_params.size()]);  query.setWhereExpr(whereExpr);  query.setParams(params);  for (int i=resultItems.size() - 1; i >= 0; i--) {    ExprKraken subExpr=resultItems.get(i);  }  ExprKraken[] resultArray=resultItems.toArray(new ExprKraken[resultItems.size()]);  query.setResults(resultArray);  token=scanToken();  if (token != null && token != Token.EOF && token != Token.LIMIT && token != Token.OFFSET) {    throw error("unexpected token at end '{0}'",token);  }  return query;}  }
class C{  public boolean LE(Address addr2){  return value.LE(addr2.value);}  }
class C{  public boolean equals(Card that){  return this.rank == that.rank && this.suit == that.suit;}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.SKILL_FAKE_DEFINITION;}  }
class C{  public final void removeCallbacks(Runnable r){  final WeakRunnable runnable=mRunnables.remove(r);  if (runnable != null) {    mExec.removeCallbacks(runnable);  }}  }
class C{  public CompositeName(){  impl=new NameImpl(null);}  }
class C{  public static void main(String[] args) throws Exception {  JavaSEPortWithSVGSupport.blockMonitors();  JavaSEPortWithSVGSupport.setDesignMode(true);  JavaSEPortWithSVGSupport.setShowEDTWarnings(false);  JavaSEPortWithSVGSupport.setShowEDTViolationStacks(false);  JavaSEPortWithSVGSupport.blockNativeBrowser=true;  if (args.length > 0) {    if (args[0].equalsIgnoreCase("-buildVersion")) {      Properties p=new Properties();      try {        p.load(ResourceEditorApp.class.getResourceAsStream("/version.properties"));      } catch (      IOException ex) {        ex.printStackTrace();      }      System.out.println(p.getProperty("build","1"));      System.exit(0);      return;    }    if (args[0].equalsIgnoreCase("-img")) {      java.awt.Container cnt=new java.awt.Container();      com.codename1.ui.Display.init(cnt);      String imageName;      String fileName;      if (args.length == 3) {        imageName=args[2];        fileName=args[2];      } else {        if (args.length == 4) {          imageName=args[3];          fileName=args[2];        } else {          System.out.println("The img command works as: -img path_to_resourceFile.res pathToImageFile [image name]");          System.exit(1);          return;        }      }      File imageFile=new File(fileName);      if (!imageFile.exists()) {        System.out.println("File not found: " + imageFile.getAbsolutePath());        System.exit(1);        return;      }      com.codename1.ui.Image img=ImageRGBEditor.createImageStatic(imageFile);      boolean isXMLEnabled=Preferences.userNodeForPackage(ResourceEditorView.class).getBoolean("XMLFileMode",true);      EditableResources.setXMLEnabled(isXMLEnabled);      EditableResources res=new EditableResources();      File resourceFile=new File(args[1]);      res.openFileWithXMLSupport(resourceFile);      res.setImage(imageName,img);      try (FileOutputStream fos=new FileOutputStream(resourceFile)){        res.save(fos);      }       res.saveXML(resourceFile);      System.exit(0);      return;    }    if (args[0].equalsIgnoreCase("-mimg")) {      java.awt.Container cnt=new java.awt.Container();      com.codename1.ui.Display.init(cnt);      String fileName;      if (args.length == 4) {        fileName=args[3];      } else {        System.out.println("The mimg command works as: -img path_to_resourceFile.res dpi pathToImageFile");        System.out.println("dpi can be one of:  high, veryhigh, hd, 560, 2hd, 4k");        System.exit(1);        return;      }      String dpi=args[2];      int dpiInt=-1;switch (dpi.toLowerCase()) {case "high":        dpiInt=3;      break;case "veryhigh":    dpiInt=4;  break;case "hd":dpiInt=5;break;case "560":dpiInt=6;break;case "2hd":dpiInt=7;break;case "4k":dpiInt=8;break;default :System.out.println("dpi can be one of:  high, veryhigh, hd, 560, 2hd, 4k");System.exit(1);return;}File imageFile=new File(fileName);if (!imageFile.exists()) {System.out.println("File not found: " + imageFile.getAbsolutePath());System.exit(1);return;}boolean isXMLEnabled=Preferences.userNodeForPackage(ResourceEditorView.class).getBoolean("XMLFileMode",true);EditableResources.setXMLEnabled(isXMLEnabled);EditableResources res=new EditableResources();File resourceFile=new File(args[1]);res.openFileWithXMLSupport(resourceFile);AddAndScaleMultiImage.generateImpl(new File[]{imageFile},res,dpiInt);try (FileOutputStream fos=new FileOutputStream(resourceFile)){res.save(fos);} res.saveXML(resourceFile);System.exit(0);return;}if (args[0].equalsIgnoreCase("gen")) {java.awt.Container cnt=new java.awt.Container();com.codename1.ui.Display.init(cnt);File output=new File(args[1]);generateResourceFile(output,args[2],args[3]);System.exit(0);return;}if (args[0].equalsIgnoreCase("mig")) {java.awt.Container cnt=new java.awt.Container();com.codename1.ui.Display.init(cnt);File projectDir=new File(args[1]);EditableResources res=new EditableResources();res.openFileWithXMLSupport(new File(args[2]));migrateGuiBuilder(projectDir,res,args[3]);System.exit(0);return;}if (args[0].equalsIgnoreCase("-regen")) {java.awt.Container cnt=new java.awt.Container();com.codename1.ui.Display.init(cnt);File output=new File(args[1]);EditableResources.setXMLEnabled(true);EditableResources res=new EditableResources();res.openFileWithXMLSupport(output);FileOutputStream fos=new FileOutputStream(output);res.save(fos);fos.close();generate(res,output);System.exit(0);return;}}JavaSEPortWithSVGSupport.setDefaultInitTarget(new JPanel());Display.init(null);launch(ResourceEditorApp.class,args);}  }
class C{  public LoadIndexedNode(Assumptions assumptions,ValueNode array,ValueNode index,JavaKind elementKind){  this(TYPE,createStamp(assumptions,array,elementKind),array,index,elementKind);}  }
class C{  public DCD(int maxIterations,double C,boolean useL1){  this.maxIterations=maxIterations;  this.C=C;  this.useL1=useL1;}  }
class C{  public static void UVprojectFromView(Face face,float bounds){  Vertex U, V, N;  U=Vertex.subtract(face.vertices[1],face.vertices[0]);  V=Vertex.subtract(face.vertices[2],face.vertices[0]);  N=new Vertex(0,0,0);  N.x=U.y * V.z - U.z * V.y;  N.y=U.z * V.x - U.x * V.z;  N.z=U.x * V.y - U.y * V.x;  float u, v;  if (similar(N.y,0) && similar(N.z,0)) {    if (N.x > 0) {      face.uvs=new UV[face.vertices.length];      for (int i=0; i < face.uvs.length; i++) {        u=face.vertices[i].z + bounds;        v=face.vertices[i].y + bounds;        face.uvs[i]=new UV(u,v);      }    } else {      face.uvs=new UV[face.vertices.length];      for (int i=0; i < face.uvs.length; i++) {        u=bounds - face.vertices[i].z;        v=face.vertices[i].y + bounds;        face.uvs[i]=new UV(u,v);      }    }  } else   if (similar(N.x,0) && similar(N.z,0)) {    if (N.y > 0) {      face.uvs=new UV[face.vertices.length];      for (int i=0; i < face.uvs.length; i++) {        u=face.vertices[i].x + bounds;        v=face.vertices[i].z + bounds;        face.uvs[i]=new UV(u,v);      }    } else {      face.uvs=new UV[face.vertices.length];      for (int i=0; i < face.uvs.length; i++) {        u=bounds - face.vertices[i].x;        v=face.vertices[i].z + bounds;        face.uvs[i]=new UV(u,v);      }    }  } else   if (similar(N.x,0) && similar(N.y,0)) {    if (N.z > 0) {      face.uvs=new UV[face.vertices.length];      for (int i=0; i < face.uvs.length; i++) {        u=face.vertices[i].x + bounds;        v=face.vertices[i].y + bounds;        face.uvs[i]=new UV(u,v);      }    } else {      face.uvs=new UV[face.vertices.length];      for (int i=0; i < face.uvs.length; i++) {        u=bounds - face.vertices[i].x;        v=face.vertices[i].y + bounds;        face.uvs[i]=new UV(u,v);      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:29.781 -0500",hash_original_method="BE753751E7356A8E17BBC3B84C55A0A8",hash_generated_method="325EEEC871F4540CF42A50709AF17200") public AsymmetricCipherKeyPair generateKeyPair(){  BigInteger n=params.getN();  int nBitLength=n.bitLength();  BigInteger d;  do {    d=new BigInteger(nBitLength,random);  } while (d.equals(ZERO) || (d.compareTo(n) >= 0));  ECPoint Q=params.getG().multiply(d);  return new AsymmetricCipherKeyPair(new ECPublicKeyParameters(Q,params),new ECPrivateKeyParameters(d,params));}  }
class C{  public <T>T read(Class<? extends T> type,File source,boolean strict) throws Exception {  InputStream file=new FileInputStream(source);  try {    return read(type,file,strict);  }  finally {    file.close();  }}  }
class C{  public static int hashCode(byte[][] field){  int result=0;  for (int i=0, size=field == null ? 0 : field.length; i < size; i++) {    byte[] element=field[i];    if (element != null) {      result=31 * result + Arrays.hashCode(element);    }  }  return result;}  }
class C{  public T caseHexLiteral(HexLiteral object){  return null;}  }
class C{  @Deprecated public Link(String rel,String type,String href){  this();  setRel(rel);  setType(type);  setHref(href);}  }
class C{  public boolean isSetStore(){  return this.store != null;}  }
class C{  public boolean tenantHasUsageACL(URI tenantUri,VirtualArray virtualArray){  if (_disabler != null) {    return true;  }  if (CollectionUtils.isEmpty(virtualArray.getAcls())) {    return true;  }  Set<String> acls=virtualArray.getAclSet(new PermissionsKey(PermissionsKey.Type.TENANT,tenantUri.toString()).toString());  if (acls != null && acls.contains(ACL.USE.toString())) {    return true;  }  return false;}  }
class C{  public Object readList(AbstractHessianInput in,int length,String type) throws HessianProtocolException, IOException {  Deserializer deserializer=getDeserializer(type);  if (deserializer != null)   return deserializer.readList(in,length); else   return new CollectionDeserializer(ArrayList.class).readList(in,length);}  }
class C{  public IntervalWindow span(IntervalWindow other){  return new IntervalWindow(new Instant(Math.min(start.getMillis(),other.start.getMillis())),new Instant(Math.max(end.getMillis(),other.end.getMillis())));}  }
class C{  public static int value(String s){  return algs.getValue(s);}  }
class C{  public void clearSelection(){  List<Integer> selection=getSelectedItems();  ExpensesManager.getInstance().getSelectedExpensesItems().clear();  for (  Integer i : selection) {    notifyItemChanged(i);  }}  }
class C{  public int numsearchresults(){  return numsearchresults;}  }
class C{  private void captureRest(List<TreeNode> tree,int pos,UIComponent c){  int sz=c.getChildCount();  if (sz > 0) {    List<UIComponent> child=c.getChildren();    for (int i=0; i < sz; i++) {      captureChild(tree,pos,child.get(i));    }  }  sz=c.getFacetCount();  if (sz > 0) {    for (    Map.Entry<String,UIComponent> entry : c.getFacets().entrySet()) {      captureFacet(tree,pos,entry.getKey(),entry.getValue());    }  }}  }
class C{  public void clear(){  final Object[] keys=_keys;  final int[] values=_values;  for (int i=keys.length - 1; i >= 0; i--) {    keys[i]=null;    values[i]=0;  }  _size=0;}  }
class C{  public void clear(){  new ByteArrayList(this.state).fillFromToWith(0,this.state.length - 1,FREE);  new ObjectArrayList(values).fillFromToWith(0,state.length - 1,null);  this.distinct=0;  this.freeEntries=table.length;  trimToSize();}  }
class C{  public VideoQuality(int resX,int resY){  this.resX=resX;  this.resY=resY;}  }
class C{  public Account(final KeyPair keyPair){  this(keyPair,getAddressFromKeyPair(keyPair));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:36.478 -0500",hash_original_method="AE299BD43225B57B8AC568426E8DCDB2",hash_generated_method="46149A762D438DE6911774E56D251C60") public boolean isColumnShrinkable(int columnIndex){  return mShrinkAllColumns || mShrinkableColumns.get(columnIndex);}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {  if (contentHandler != null) {    contentHandler.startElement(uri,localName,qName,atts);  }}  }
class C{  public static boolean isCreditCard(Object value){  return ValidateCreditCard.isValid(Caster.toString(value,"0"));}  }
class C{  @Override public boolean tryCaptureView(View child,int pointerId){  return child.equals(draggerView.getDragView());}  }
class C{  public SplitterItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  protected void selectDecoder(int mfgID,int modelID,int productID){  iddecoder.setSelected(false);  List<DecoderFile> temp=null;  if (productID != -1) {    String sz_productID=Integer.toString(productID);    temp=DecoderIndexFile.instance().matchingDecoderList(null,null,Integer.toString(mfgID),Integer.toString(modelID),sz_productID,null);    if (temp.isEmpty()) {      log.debug("selectDecoder found no items with product ID " + productID);      temp=null;    } else {      log.debug("selectDecoder found " + temp.size() + " matches with productID "+ productID);    }  }  if (temp == null) {    temp=DecoderIndexFile.instance().matchingDecoderList(null,null,Integer.toString(mfgID),Integer.toString(modelID),null,null);    if (log.isDebugEnabled()) {      log.debug("selectDecoder without productID found " + temp.size() + " matches");    }  }  int tempOriginalSize=temp.size();  String theFamily="";  String theModel="";  String lastWasFamily="";  ListIterator<DecoderFile> it=temp.listIterator();  while (it.hasNext()) {    log.debug("Match List size is currently {}, scanning for unwanted entries",temp.size());    DecoderFile t=it.next();    theFamily=t.getFamily();    theModel=t.getModel();    if (t.getFamily().equals(theModel)) {      log.debug("Match List index={} is family entry '{}'",it.previousIndex(),theFamily);      lastWasFamily=theFamily;    } else     if (lastWasFamily.equals(theFamily)) {      log.debug("Match List index={} is first model '{}' in family '{}'",it.previousIndex(),theModel,theFamily);      log.debug("Removing family entry '{}'",theFamily);      t=it.previous();      t=it.previous();      it.remove();      lastWasFamily="";    } else     if ((t.getModelElement().getAttribute("show") != null) && (t.getModelElement().getAttribute("show").getValue().equals("no"))) {      log.debug("Match List index={} is legacy model '{}' in family '{}'",it.previousIndex(),theModel,theFamily);      log.debug("Removing legacy model '{}'",theModel);      t=it.previous();      it.remove();      lastWasFamily="";    } else {      log.debug("Match List index={} is model '{}' in family '{}'",it.previousIndex(),theModel,theFamily);      lastWasFamily="";    }  }  log.debug("Final Match List size is {}",temp.size());  if (tempOriginalSize > 0 && temp.isEmpty()) {    log.debug("Filtering removed all matches so reverting to coarse match with mfgID='{}' & modelID='{}'",Integer.toString(mfgID),Integer.toString(modelID));    temp=DecoderIndexFile.instance().matchingDecoderList(null,null,Integer.toString(mfgID),Integer.toString(modelID),null,null);    log.debug("selectDecoder without productID found {} matches",temp.size());  }  if (temp.size() > 0) {    updateForDecoderTypeID(temp);  } else {    String mfg=DecoderIndexFile.instance().mfgNameFromId(Integer.toString(mfgID));    if (mfg == null) {      updateForDecoderNotID(mfgID,modelID);    } else {      updateForDecoderMfgID(mfg,mfgID,modelID);    }  }}  }
class C{  public IgniteUuid id(){  return id;}  }
class C{  @SuppressWarnings("unchecked") @Override public IType<? super IContainer<?,?>> findCommonSupertypeWith(final IType<?> iType){  if (iType instanceof ParametricType) {    final IType<?> pType=iType;    final IType<?> cType=type.findCommonSupertypeWith(pType.getType());    if (cType.isContainer()) {      final IType<?> kt=keyType.findCommonSupertypeWith(pType.getKeyType());      final IType<?> ct=contentsType.findCommonSupertypeWith(pType.getContentType());      return (IType<? super IContainer<?,?>>)GamaType.from(cType,kt,ct);    } else {      return (IType<? super IContainer<?,?>>)cType;    }  } else   if (iType.isContainer()) {    final IType<?> cType=type.findCommonSupertypeWith(iType);    return (IType<? super IContainer<?,?>>)cType;  } else {    return type.findCommonSupertypeWith(iType);  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof MeanAndStandardDeviation)) {    return false;  }  MeanAndStandardDeviation that=(MeanAndStandardDeviation)obj;  if (!ObjectUtilities.equal(this.mean,that.mean)) {    return false;  }  if (!ObjectUtilities.equal(this.standardDeviation,that.standardDeviation)) {    return false;  }  return true;}  }
class C{  public static void addSecurity(MethodDoc method,ApiMethod apiMethod){  AnnotationDesc checkPermission=AnnotationUtils.getAnnotation(method,KnownAnnotations.CheckPermission_Annotation);  if (checkPermission != null) {    for (    AnnotationDesc.ElementValuePair pair : checkPermission.elementValues()) {      if (pair.element().name().equals("roles")) {        for (        AnnotationValue value : (AnnotationValue[])pair.value().value()) {          apiMethod.addRole(((FieldDoc)value.value()).name());        }      } else       if (pair.element().name().equals("acls")) {        for (        AnnotationValue value : (AnnotationValue[])pair.value().value()) {          apiMethod.addAcl(((FieldDoc)value.value()).name());        }      }    }  } else   if (AnnotationUtils.hasAnnotation(method,KnownAnnotations.InheritCheckPermission_Annotation)) {    boolean inheritWrite=AnnotationUtils.getAnnotationValue(method,KnownAnnotations.InheritCheckPermission_Annotation,"writeAccess",false);    if (inheritWrite) {      apiMethod.acls.addAll(apiMethod.apiService.writeAcls);      apiMethod.roles.addAll(apiMethod.apiService.writeRoles);    } else {      apiMethod.acls.addAll(apiMethod.apiService.readAcls);      apiMethod.roles.addAll(apiMethod.apiService.readRoles);    }  }}  }
class C{  public IdentityArrayList(final Collection<? extends K> c){  this(c.size());  size=ObjectIterators.unwrap(c.iterator(),a);}  }
class C{  private void doTestRefinementRequest() throws Exception {  SolrParams params=params("facet.missing","true","facet","true","facet.limit","4","distrib","false","rows","0","facet.sort","index","fpt0","~krakow","facet.pivot.mincount","-1","isShard","true","facet.pivot","{!fpt=0 stats=st1}place_t,company_t","stats","false","stats.field","{!key=sk1 tag=st1,st2}price_ti");  QueryResponse rsp=clients.get(0).query(new ModifiableSolrParams(params));  assertNull("pivot refine request should *NOT* include top level stats",rsp.getFieldStatsInfo());  List<PivotField> placePivots=rsp.getFacetPivot().get("place_t,company_t");  assertEquals("asked to refine exactly one place",1,placePivots.size());  assertFalse("pivot stats should not be empty in refinement request",placePivots.get(0).getFieldStatsInfo().isEmpty());}  }
class C{  public void fireSelectedDataChanged(String from){  System.out.println("fireSelectedDataChanged from " + from);  Object[][] sel=getSelectedFullData();  System.out.println("selected full data :");  System.out.println(PArray.cat(_parametersNames));  if (sel.length > 0)   System.out.println(PArray.cat(getSelectedFullData()));  sel=getSelectedProjectedData();  System.out.println("selected projected data :");switch (_dimension) {case 1:    System.out.println(PArray.cat(new String[]{getSelectedXAxis()}));  break;case 2:System.out.println(PArray.cat(new String[]{getSelectedXAxis(),getSelectedYAxis()}));break;case 3:System.out.println(PArray.cat(new String[]{getSelectedXAxis(),getSelectedYAxis(),getSelectedZAxis()}));break;}if (sel.length > 0) System.out.println(PArray.cat(getSelectedProjectedData()));}  }
class C{  public Set<String> keySet(){  return this.map.keySet();}  }
class C{  private void key(byte key[]){  int i;  int koffp[]={0};  int lr[]={0,0};  int plen=P.length, slen=S.length;  for (i=0; i < plen; i++) {    P[i]=P[i] ^ streamtoword(key,koffp);  }  for (i=0; i < plen; i+=2) {    encipher(lr,0);    P[i]=lr[0];    P[i + 1]=lr[1];  }  for (i=0; i < slen; i+=2) {    encipher(lr,0);    S[i]=lr[0];    S[i + 1]=lr[1];  }}  }
class C{  public void actionPerformed(ActionEvent e){  int leftX=getLeftX();  if (this.templateName.equals(getTemplateNames()[0])) {    simulateDataFixedIM(leftX);  } else   if (this.templateName.equals(getTemplateNames()[1])) {    searchFromSimulatedDataWithCompare(leftX);  } else   if (this.templateName.equals(getTemplateNames()[2])) {    searchFromLoadedOrSimulatedData(leftX);  } else   if (this.templateName.equals(getTemplateNames()[3])) {    estimateFromSimulatedData(leftX);  } else   if (this.templateName.equals(getTemplateNames()[4])) {    estimateThenUpdateUsingSearchResult(leftX);  } else {    throw new IllegalStateException("Unrecognized template name: " + this.templateName);  }}  }
class C{  public void appendBits(int value,int numBits){  if (numBits < 0 || numBits > 32) {    throw new IllegalArgumentException("Num bits must be between 0 and 32");  }  ensureCapacity(size + numBits);  for (int numBitsLeft=numBits; numBitsLeft > 0; numBitsLeft--) {    appendBit(((value >> (numBitsLeft - 1)) & 0x01) == 1);  }}  }
class C{  public Object eval(String source,int lineNo,int columnNo,Object script) throws BSFException {  try {    source=convertToValidJavaClassname(source);    return getEvalShell().evaluate(script.toString(),source);  } catch (  Exception e) {    throw new BSFException(BSFException.REASON_EXECUTION_ERROR,"exception from Groovy: " + e,e);  }}  }
class C{  @SuppressWarnings("unchecked") public Class<?>[] loadedClasses(){  Class<?> cls=classLoader.getClass();  while (cls != java.lang.ClassLoader.class) {    cls=cls.getSuperclass();  }  try {    java.lang.reflect.Field fldClasses=cls.getDeclaredField("classes");    fldClasses.setAccessible(true);    Vector<Class<?>> list=(Vector<Class<?>>)fldClasses.get(classLoader);    Class<?>[] classes=new Class<?>[list.size()];    for (int i=0; i < classes.length; i++) {      classes[i]=list.get(i);    }    return classes;  } catch (  Throwable e) {    return null;  }}  }
class C{  public static long parseLong(CharSequence csq,Cursor cursor){  return parseLong(csq,10,cursor);}  }
class C{  public AuthenticationInfoList(){  super(AuthenticationInfo.class,AuthenticationInfoHeader.NAME);}  }
class C{  public JSONObject put(String key,Collection value) throws JSONException {  this.put(key,new JSONArray(value));  return this;}  }
class C{  public static void writeJSONString(Object value,Writer out) throws IOException {  if (value == null) {    out.write("null");    return;  }  if (value instanceof String) {    out.write('\"');    out.write(escape((String)value));    out.write('\"');    return;  }  if (value instanceof Double) {    if (((Double)value).isInfinite() || ((Double)value).isNaN())     out.write("null"); else     out.write(value.toString());    return;  }  if (value instanceof Float) {    if (((Float)value).isInfinite() || ((Float)value).isNaN())     out.write("null"); else     out.write(value.toString());    return;  }  if (value instanceof Number) {    out.write(value.toString());    return;  }  if (value instanceof Boolean) {    out.write(value.toString());    return;  }  if ((value instanceof JSONStreamAware)) {    ((JSONStreamAware)value).writeJSONString(out);    return;  }  if ((value instanceof JSONAware)) {    out.write(((JSONAware)value).toJSONString());    return;  }  if (value instanceof Map) {    JSONObject.writeJSONString((Map)value,out);    return;  }  if (value instanceof Collection) {    JSONArray.writeJSONString((Collection)value,out);    return;  }  if (value instanceof byte[]) {    JSONArray.writeJSONString((byte[])value,out);    return;  }  if (value instanceof short[]) {    JSONArray.writeJSONString((short[])value,out);    return;  }  if (value instanceof int[]) {    JSONArray.writeJSONString((int[])value,out);    return;  }  if (value instanceof long[]) {    JSONArray.writeJSONString((long[])value,out);    return;  }  if (value instanceof float[]) {    JSONArray.writeJSONString((float[])value,out);    return;  }  if (value instanceof double[]) {    JSONArray.writeJSONString((double[])value,out);    return;  }  if (value instanceof boolean[]) {    JSONArray.writeJSONString((boolean[])value,out);    return;  }  if (value instanceof char[]) {    JSONArray.writeJSONString((char[])value,out);    return;  }  if (value instanceof Object[]) {    JSONArray.writeJSONString((Object[])value,out);    return;  }  out.write('\"');  out.write(escape(value.toString()));  out.write('\"');}  }
class C{  public FramePrinter(PrintStream stream){  this.stream=stream;}  }
class C{  private void updateQuota(QuotaDirectory quotaObj,DbClient dbClient,StringBuilder logMsgBuilder,VNXeApiClient vnxeApiClient){  VNXUnityTreeQuota vnxUnityQuota=null;  try {    FileShare fs=dbClient.queryObject(FileShare.class,quotaObj.getParent().getURI());    vnxUnityQuota=vnxeApiClient.getQuotaByName(fs.getNativeId(),quotaObj.getName());    if (vnxUnityQuota != null) {      quotaObj.setInactive(false);      quotaObj.setCreationTime(Calendar.getInstance());      quotaObj.setNativeId(vnxUnityQuota.getId());      String path="/" + quotaObj.getName();      quotaObj.setPath(path);      try {        quotaObj.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(dbClient,quotaObj,quotaObj.getParent().getName()));      } catch (      IOException e) {        logMsgBuilder.append("/n");        logMsgBuilder.append("Exception while setting quota's nativeGuid");        logMsgBuilder.append(e.getMessage());      }      logMsgBuilder.append("/n");      logMsgBuilder.append(String.format("Create file system quota directory successfully for NativeId: %s, URI: %s",quotaObj.getNativeId(),getTaskCompleter().getId()));      dbClient.updateObject(quotaObj);    } else {      logMsgBuilder.append("Could not get newly created quota directory in the Unity, using the quota name: ");      logMsgBuilder.append(quotaObj.getName());    }  } catch (  DatabaseException e) {    logMsgBuilder.append("/n");    logMsgBuilder.append("Exception while querying associated fs from the db:");    logMsgBuilder.append(e.getMessage());  }}  }
class C{  public MachineOrientation orientation(){  return mOrientation;}  }
class C{  public boolean findDefaultApp(){  if (mResId == 0) {    return false;  }  parsedIntent=null;  parsedValues=null;  new MyLayoutParser().parseValues();  return (parsedValues != null) && (parsedIntent != null);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == VariableDeclarationContainer.class) {switch (baseOperationID) {case N4JSPackage.VARIABLE_DECLARATION_CONTAINER___GET_VAR_DECL:      return N4JSPackage.VARIABLE_STATEMENT___GET_VAR_DECL;case N4JSPackage.VARIABLE_DECLARATION_CONTAINER___IS_BLOCK_SCOPED:    return N4JSPackage.VARIABLE_STATEMENT___IS_BLOCK_SCOPED;default :  return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  @DSSpec(DSCat.INTERNET) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:11.938 -0500",hash_original_method="E95178BAD1AB83F5F7B2A543005EDE81",hash_generated_method="17712134355116B68147B90F3DC24856") @Override public Socket accept() throws IOException {  if (logger != null) {    logger.println("SSLServerSocketImpl.accept ..");  }  SSLSocketImpl s=new SSLSocketImpl((SSLParametersImpl)sslParameters.clone());  implAccept(s);  s.init();  if (logger != null) {    logger.println("SSLServerSocketImpl: accepted, initialized");  }  return s;}  }
class C{  public void run() throws IOException {  System.out.println("Total number of routes: " + routes.size());  int i=0;  for (  Entry<String,Route> route : routes.entrySet()) {    for (    Entry<String,Trip> tripEntry : route.getValue().getTrips().entrySet())     calculateLinksSequence(tripEntry,route.getValue());    i++;    System.out.println(i + ". " + route.getKey()+ " ("+ route.getValue().getTrips().size()+ ")");  }}  }
class C{  public String readString() throws TException {  int length=readVarint32();  checkStringReadLength(length);  if (length == 0) {    return "";  }  try {    if (trans_.getBytesRemainingInBuffer() >= length) {      String str=new String(trans_.getBuffer(),trans_.getBufferPosition(),length,"UTF-8");      trans_.consumeBuffer(length);      return str;    } else {      return new String(readBinary(length),"UTF-8");    }  } catch (  UnsupportedEncodingException e) {    throw new TException("UTF-8 not supported!");  }}  }
class C{  public void displayInfo(String title,String message){  if (trayIcon != null) {    addIcon();    trayIcon.displayMessage(title,message,TrayIcon.MessageType.INFO);  }}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if ((argNum > 3) || (argNum < 2))   reportWrongNumberArgs();}  }
class C{  public boolean supportsConversion(Class<?> targetType,Object valueToConvert){  boolean rVal=false;  if (valueToConvert instanceof Quantity) {    rVal=true;  }  return (rVal);}  }
class C{  @Override public String toString(){  return "JITOptions[" + createString(",") + "]";}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  String[] datas={"Aaron","Abdul","Abdullah","Abe","Abel","Abraham","Abram","Abriel","Ace","Adam","Adan","Addison","Ade","Aden","Adnan","Adonis","Adrian","Adriel","Ahmad","Ahmed","Aidan","Aiden","Ainsley","Ajay","Al","Alain","Alan","Alaric","Alastair","Albany","Albert","Alberto","Albie","Albus","Alden","Aldo","Aldric","Aldrin","Alec","Aled","Alejandro","Alen","Alesandro","Alex","Alexander","Alexis","Alfie","Alfonse","Alfonso","Alfred","Alfredo","Ali","Alistair","Allan","Allen","Alonzo","Aloysius","Alphonso","Alton","Alvin","Amari","Ambrose","Amir","Amit","Amos","Anand","Anderson","Andre","Andreas","Andres","Andrew","Andy","Angel","Angelo","Angus","Ansel","Anson","Anthony","Anton","Antonio","Antony","Apollo","Aran","Archer","Archibald","Archie","Ari","Arjun","Arlo","Arman","Armando","Arnie","Arnold","Aron","Arran","Arrie","Art","Arthur","Arturo","Arun","Arwin","Asa","Asad","Ash","Ashby","Asher","Ashley","Ashton","Ashwin","Aspen","Aston","Aswin","Athan","Atticus","Aubrey","Auden","Audric","Audwin","August","Augustus","Austen","Austin","Aven","Avery","Avon","Axel","Ayaan","Ayden","Bailey","Barack","Barclay","Barnaby","Barney","Barrett","Barron","Barry","Bart","Bartholomew","Basil","Bastian","Baxter","Bay","Baylor","Bear","Beau","Beck","Beckett","Bellamy","Ben","Benedict","Benjamin","Benji","Benjy","Bennett","Bennie","Benny","Benson","Bentley","Bently","Benton","Bernard","Bernardo","Bernie","Bert","Bertie","Bertram","Bev","Bevan","Bevin","Bevis","Bill","Billy","Bjorn","Bladen","Blain","Blaine","Blair","Blaise","Blake","Blaze","Blue","Bob","Bobby","Bodie","Bogdan","Boris","Boston","Bowen","Boyd","Brad","Braden","Bradford","Bradley","Bradwin","Brady","Braeden","Bram","Branden","Brandon","Brantley","Braxton","Bray","Brayan","Brayden","Braydon","Braylon","Brayson","Breck","Breckin","Brendan","Brenden","Brendon","Brennan","Brennon","Brent","Brentley","Brenton","Bret","Brett","Brevin","Brevyn","Brian","Brice","Bridie","Brie","Brig","Brighton","Brinley","Brock","Brod","Broderick","Brodie","Brody","Brogan","Bronson","Brook","Brooke","Brooklyn","Brooks","Bruce","Bruno","Bryan","Bryant","Bryce","Bryden","Brydon","Bryn","Bryon","Bryson","Buck","Buddy","Burt","Burton","Buster","Butch","Byron","Cadby","Cade","Caden","Cael","Caelan","Caesar","Cai","Caiden","Cain","Caius","Cal","Cale","Caleb","Calhoun","Callan","Callen","Callum","Calum","Calvin","Cam","Camden","Cameron","Campbell","Camron","Carey","Carl","Carlisle","Carlos","Carlton","Carsen","Carson","Carsten","Carter","Cary","Casey","Cash","Cason","Casper","Cassius","Castiel","Castor","Cathal","Cato","Cavan","Cayden","Caydon","Cayson","Cecil","Cedric","Cesar","Chad","Chance","Chandler","Channing","Charles","Charley","Charlie","Charlton","Chas","Chase","Chauncey","Chayton","Chaz","Che","Chesney","Chester","Chevy","Chip","Chris","Christian","Christopher","Chuck","Cian","Ciaran","Cillian","Clancy","Clarence","Clark","Claude","Clay","Clayton","Clement","Cletus","Cliff","Clifford","Clifton","Clint","Clinton","Clive","Clovis","Clyde","Coby","Cody","Cohen","Colby","Cole","Colin","Collin","Colm","Colt","Colten","Colton","Conan","Conlan","Conner","Connor","Conor","Conrad","Constantine","Cooper","Corbin","Corey","Cormac","Cornelius","Cory","Craig","Crispin","Cristian","Cristobal","Crosby","Cruz","Cullen","Curt","Curtis","Cuthbert","Cyril","Cyrus","Dacey","Daire","Dakota","Dale","Dalen","Dallas","Dalon","Dalton","Damian","Damien","Damion","Damon","Dan","Dana","Dane","Daniel","Danny","Dante","Dara","Daragh","Darcy","Daren","Darian","Darin","Dario","Darius","Darnell","Darragh","Darrel","Darrell","Darren","Darrin","Darryl","Darryn","Darwin","Daryl","Dash","Dashawn","Dave","David","Davin","Davion","Davis","Dawson","Dax","Daxon","Daxter","Daxton","Daylen","Dayton","Deacon","Dean","Deandre","Declan","Deepak","Delbert","Delvin","Demetrius","Denis","Dennis","Denny","Denver","Denzel","Deon","Derek","Derik","Dermot","Derrick","Deshaun","Deshawn","Desmond","Dev","Devin","Devlin","Devon","Devyn","Dewayne","Dewey","Dexter","Diarmuid","Dick","Dicky","Diego","Digby","Dilan","Dillon","Dimitri","Dinesh","Dino","Dion","Dirk","Dixon","Django","Dmitri","Dominic","Dominick","Don","Donal","Donald","Donnie","Donovan","Dorian","Doug","Dougie","Douglas","Doyle","Drake","Draven","Drew","Duane","Dudley","Duke","Duncan","Dustin","Dwayne","Dwight","Dylan","Eamon","Earl","Earnest","Eason","Easton","Ed","Eddie","Eddy","Eden","Edgar","Edison","Edmund","Edouard","Edric","Edsel","Eduardo","Edward","Edwardo","Edwin","Efrain","Efren","Egan","Egon","Eli","Elian","Elias","Elijah","Eliot","Elisha","Ellington","Elliot","Elliott","Ellis","Elmer","Elmo","Elon","Elroy","Elton","Elvis","Elwood","Elwyn","Ely","Emanuel","Emerson","Emery","Emet","Emil","Emiliano","Emilio","Emlyn","Emmanuel","Emmerson","Emmet","Emmett","Emory","Ennio","Enoch","Enrique","Enzo","Eoghan","Eoin","Eric","Erick","Erik","Ernest","Ernesto","Ernie","Errol","Ervin","Erwin","Esteban","Ethan","Ethen","Etienne","Euan","Euen","Eugene","Eustace","Evan","Evangelos","Evelyn","Everett","Ewan","Eyan","Ezekiel","Ezio","Ezra","Fabian","Fabio","Faisal","Farley","Febian","Felipe","Felix","Fenton","Ferdinand","Fergal","Fergus","Fernand","Fernando","Fidel","Finbar","Finlay","Finley","Finn","Finnian","Finnigan","Fionn","Fletcher","Florian","Floyd","Flynn","Ford","Forest","Forrest","Foster","Fox","Francesco","Francis","Francisco","Frank","Frankie","Franklin","Franklyn","Fraser","Fred","Freddie","Freddy","Frederick","Fredrick","Fritz","Fynn","Gabe","Gabriel","Gael","Gaelan","Gage","Gale","Galen","Gannon","Gareth","Garman","Garrett","Garrison","Garry","Garth","Gary","Gaston","Gavin","Gene","Geoff","Geoffrey","George","Geraint","Gerald","Gerard","Gerardo","Germain","Gerry","Gian","Gibson","Gideon","Gil","Gilbert","Gilberto","Giles","Gino","Giorgio","Giovanni","Glen","Glenn","Glyndwr","Glynn","Godfrey","Godric","Godwin","Gonzalo","Gordon","Grady","Graeme","Graham","Granger","Grant","Gray","Grayson","Greg","Gregg","Gregor","Gregory","Grey","Greyson","Griffin","Grover","Guillermo","Gunnar","Gunner","Gus","Gustav","Gustavo","Guy","Gwain","Haden","Haiden","Hal","Hamilton","Hamish","Han","Hank","Hans","Harlan","Harley","Harold","Harris","Harrison","Harry","Harvey","Hassan","Hayden","Hayes","Heath","Hector","Hendrik","Hendrix","Henley","Henri","Henry","Herbert","Herbie","Herman","Heston","Hilary","Holden","Homer","Horace","Horatio","Howard","Hubert","Huck","Hudson","Huey","Hugh","Hugo","Humberto","Humphrey","Hunter","Huw","Hywel","Iain","Ian","Ianto","Ibrahim","Ichabod","Idris","Ieuan","Ieystn","Iggy","Ignacio","Igor","Ike","Imran","Indiana","Inigo","Ira","Irvin","Irving","Irwin","Isaac","Isaiah","Isaias","Ishaan","Ishmael","Isiah","Isidore","Ismael","Israel","Issac","Ivan","Ivor","Jace","Jack","Jackie","Jackson","Jacob","Jacoby","Jacques","Jad","Jaden","Jadon","Jagger","Jago","Jai","Jaiden","Jaime","Jak","Jake","Jakob","Jalen","Jamal","James","Jameson","Jamie","Jamison","Jan","Jared","Jaret","Jariel","Jarod","Jaron","Jarrett","Jarrod","Jarvis","Jase","Jason","Jasper","Javid","Javier","Javon","Jax","Jaxon","Jaxson","Jay","Jayce","Jayden","Jaydon","Jaylen","Jaylin","Jaylon","Jayson","Jeb","Jebediah","Jed","Jedediah","Jediah","Jedidiah","Jeff","Jefferson","Jeffery","Jeffrey","Jeffry","Jem","Jensen","Jenson","Jerald","Jeremiah","Jeremy","Jericho","Jermaine","Jerome","Jerrion","Jerrold","Jerry","Jersey","Jesse","Jessie","Jesus","Jet","Jethro","Jett","Jevan","Jim","Jimmie","Jimmy","Joachim","Joaquin","Jock","Jody","Joe","Joel","Joey","Johan","Johann","John","Johnathan","Johnathon","Johnnie","Johnny","Jon","Jonah","Jonas","Jonathan","Jonathon","Jonty","Jordan","Jordon","Jordy","Jorge","Jose","Joseph","Josh","Joshua","Josiah","Joss","Josue","Jovan","Juan","Judah","Judas","Judd","Jude","Julian","Julio","Julius","Justice","Justin","Kade","Kaden","Kai","Kaiden","Kaine","Kale","Kaleb","Kameron","Kane","Karl","Karson","Karsten","Kash","Kasper","Kayden","Kayle","Kaylen","Kayson","Kean","Keanu","Keaton","Kedrick","Keegan","Keenan","Keith","Kelby","Kellan","Kellen","Kellin","Kelly","Kelvin","Ken","Kenan","Kendall","Kendrick","Kennedy","Kenneth","Kenny","Kent","Kenton","Kerry","Kevin","Khalid","Khalil","Kian","Kiefer","Kieran","Kieron","Killian","Kim","Kingsley","Kingston","Kip","Kiran","Kirby","Kirk","Kit","Klaus","Klay","Knox","Kobe","Koby","Kody","Kolby","Konnor","Kris","Krish","Kristian","Kristoff","Kristopher","Kurt","Kurtis","Kyan","Kye","Kylar","Kyle","Kylen","Kyler","Kyran","Kyrin","Kyron","Lacey","Lachlan","Lake","Lamar","Lamont","Lance","Lancelot","Landen","Landon","Landyn","Lane","Langdon","Langston","Larry","Lars","Laurence","Laurie","Lawrence","Lawson","Layne","Layton","Leaf","Leandro","Lebron","Ledger","Lee","Leif","Leigh","Leighton","Leland","Len","Lennie","Lennon","Lennox","Lenny","Leo","Leon","Leonard","Leonardo","Leonel","Leopold","Leroy","Les","Leslie","Lester","Leuan","Lev","Leven","Levi","Levy","Lewis","Lex","Leyton","Liam","Lief","Lincoln","Linden","Lindon","Link","Linus","Lionel","Lisandro","Llewelyn","Lloyd","Lochlan","Logan","Loki","London","Lonnie","Lorcan","Loren","Lorenzo","Loris","Lou","Louie","Louis","Lowell","Luca","Lucas","Lucian","Luciano","Luigi","Luis","Lukas","Luke","Luther","Lyle","Lyndon","Lynn","Lysander","Mack","Maddox","Magnus","Maison","Malachi","Malakai","Malcolm","Malik","Malloy","Manny","Manuel","Marc","Marcel","Marcelo","Marco","Marcos","Marcus","Marik","Mario","Marion","Mark","Marley","Marlon","Marquis","Marshall","Martin","Marty","Martyn","Marvin","Mason","Massimo","Mat","Mateo","Mathew","Matt","Matthew","Matthias","Maurice","Mauricio","Maverick","Max","Maxim","Maximilian","Maximus","Maxwell","Mehdi","Mehtab","Mekhi","Mel","Melvin","Memphis","Merick","Mervin","Mervyn","Mica","Micah","Michael","Micheal","Mick","Mickey","Miguel","Mike","Mikey","Milan","Miles","Miller","Milo","Milton","Misha","Mitch","Mitchell","Mitt","Moe","Mohamed","Mohammad","Mohammed","Moises","Monte","Montgomery","Monty","Mordecai","Morgan","Morris","Moses","Muhammad","Murphy","Murray","Myles","Mylo","Myron","Nash","Nasir","Nate","Nath","Nathan","Nathanael","Nathaniel","Neal","Ned","Neel","Nehemiah","Neil","Nelson","Nesbit","Nestor","Neville","Nevin","Newton","Niall","Nicholas","Nick","Nickolas","Nicky","Nico","Nicolas","Nigel","Nihal","Nik","Niklaus","Niko","Nikolai","Nikolas","Nile","Nils","Noah","Noam","Noe","Noel","Nolan","Norbert","Norman","Norris","Norton","Nyle","Oakes","Oakley","Oberon","Octavio","Oisin","Olaf","Oli","Oliver","Ollie","Olly","Omar","Oran","Orion","Orlando","Orson","Oscar","Osvaldo","Oswald","Otis","Otto","Owain","Owen","Ozzie","Ozzy","Pablo","Paco","Paddy","Padraig","Palmer","Paolo","Parker","Pascal","Pat","Patrick","Paul","Paxton","Payton","Pearce","Pedro","Percy","Perry","Petar","Pete","Peter","Peyton","Phebian","Phil","Philip","Philippe","Phillip","Phineas","Phoenix","Pierce","Piers","Pip","Porter","Poul","Prakash","Preston","Prince","Princeton","Quentin","Quincy","Quinlan","Quinn","Quinton","Quintrell","Rafael","Rafferty","Raheem","Rahul","Raiden","Raj","Rajesh","Ralph","Ram","Rameel","Ramon","Ramsey","Randal","Randall","Randolph","Randy","Raoul","Raphael","Rashad","Rashan","Rashid","Raul","Ravi","Ray","Raylan","Raymond","Reece","Reed","Reef","Reese","Reg","Reggie","Reginald","Rehan","Reid","Reilly","Remco","Remington","Remy","Ren","Rene","Reuben","Rex","Reynaldo","Reza","Rhett","Rhydian","Rhys","Rian","Ricardo","Rich","Richard","Richie","Rick","Rickey","Rickie","Ricky","Rico","Rider","Rigby","Rik","Riker","Riley","Rio","Riordan","River","Roan","Rob","Robbie","Robby","Robert","Roberto","Robin","Rocco","Rock","Rocky","Rod","Roddy","Roderick","Rodger","Rodney","Rodolfo","Rodrigo","Rogelio","Roger","Rohan","Roland","Rolando","Roman","Romeo","Ron","Ronald","Ronan","Ronnie","Ronny","Roosevelt","Rory","Roscoe","Ross","Rowan","Roy","Royce","Ruairi","Ruben","Rubin","Rudolph","Rudy","Rufus","Rupert","Russ","Russell","Rusty","Ryan","Ryder","Ryker","Rylan","Ryland","Ryle","Ryley","Sacha","Said","Salman","Salvador","Salvatore","Sam","Samir","Sammy","Samson","Samuel","Sandeep","Sandy","Sanjay","Santiago","Sasha","Saul","Sawyer","Scot","Scott","Scottie","Scotty","Seamus","Sean","Seb","Sebastian","Sebastien","Sebestian","Sergio","Seth","Shadrach","Shane","Shannon","Shaun","Shawn","Shay","Shayne","Shea","Sheldon","Shelton","Sherlock","Sherman","Sherwin","Shiloh","Sid","Sidney","Silas","Simeon","Simon","Sky","Skylar","Skyler","Slade","Sol","Solomon","Sonny","Soren","Spencer","Spike","Stacey","Stacy","Stan","Stanley","Stefan","Stephan","Stephen","Sterling","Steve","Steven","Stevie","Stewart","Stone","Storm","Struan","Stuart","Sufyan","Sullivan","Sven","Sylvester","Tadhg","Talon","Tam","Tane","Tanner","Tariq","Tarquin","Tate","Taye","Taylor","Teague","Ted","Teddy","Teo","Terence","Terrance","Terrell","Terrence","Terry","Tevin","Tex","Thad","Thaddeus","Theo","Theodore","Theon","Theophilus","Thom","Thomas","Thor","Tiago","Tiberius","Tiernan","Tiger","Tim","Timmy","Timothy","Tito","Titus","Tobias","Tobin","Toby","Tod","Todd","Tom","Tomas","Tommie","Tommy","Tony","Torin","Toryn","Trace","Tracey","Tracy","Travis","Tray","Tremaine","Trent","Trenton","Trevon","Trevor","Trey","Treyden","Tristan","Tristen","Triston","Troy","Truman","Tucker","Turner","Ty","Tylan","Tyler","Tyrell","Tyren","Tyrese","Tyrone","Tyson","Ulrich","Ulysses","Umar","Uriah","Uriel","Usama","Valentin","Valentine","Valentino","Van","Vance","Vasco","Vaughn","Vernon","Vic","Victor","Vidal","Vihan","Vijay","Vikram","Vince","Vincent","Vinnie","Virgil","Vishal","Vivian","Vlad","Vladimir","Wade","Walker","Wallace","Wally","Walter","Warren","Waylon","Wayne","Wendell","Wes","Wesley","Westin","Weston","Wilbert","Wilbur","Wiley","Wilfred","Wilhelm","Will","Willam","Willard","Willem","William","Willie","Willis","Wilson","Winston","Wolf","Wolfgang","Woody","Wyatt","Xander","Xavier","Xerxes","Yahir","Yardley","Yehudi","Yestin","York","Yuri","Yusuf","Yves","Zac","Zach","Zachariah","Zachary","Zachery","Zack","Zackary","Zackery","Zaiden","Zain","Zaine","Zak","Zander","Zane","Zayden","Zayn","Zayne","Zeb","Zebulon","Zed","Zeke","Zeph","Ziggy","Zion","Zohar","Zoltan","Zuriel","Zylen"};  mRecyclerView=(IndexableRecyclerView)findViewById(R.id.listview);  RecyclerAdapter adapter=new RecyclerAdapter(datas);  mRecyclerView.setAdapter(adapter);  LinearLayoutManager mLayoutManager=new LinearLayoutManager(this);  mRecyclerView.setLayoutManager(mLayoutManager);}  }
class C{  @Ignore("GEODE-1837: rewrite this test using Portfolio and Position in package org.apache.geode.cache.query.data") @Test public void testRemoteComplexQueries() throws CacheException {}  }
class C{  void checkFrameValue(final Object value){  if (value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS) {    return;  }  if (value instanceof String) {    checkInternalName((String)value,"Invalid stack frame value");    return;  }  if (!(value instanceof Label)) {    throw new IllegalArgumentException("Invalid stack frame value: " + value);  } else {    usedLabels.add((Label)value);  }}  }
class C{  public Builder addImplicitImport(QualifiedName type){  implicitImports.put(type.getSimpleName(),type);  return this;}  }
class C{  public void onTestStarted(@NotNull final SMTestProxy testProxy){  if (!testProxy.isConfig()) {    updateOnTestStarted(false);  }  _addTestOrSuite(testProxy);  fireOnTestNodeAdded(testProxy);}  }
class C{  public static void shuffle(int[] a,int lo,int hi){  if (lo < 0 || lo > hi || hi >= a.length)   throw new RuntimeException("Illegal subarray range");  for (int i=lo; i <= hi; i++) {    int r=i + uniform(hi - i + 1);    int temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  public HessianFreeList(int size){  _freeStack=new AtomicReferenceArray(size);}  }
class C{  @Override public synchronized void moveToCurrentRow() throws SQLException {  checkClosed();  if (!this.isUpdatable) {    throw new NotUpdatable(this.notUpdatableReason);  }  if (this.onInsertRow) {    this.onInsertRow=false;    this.thisRow=this.savedCurrentRow;  }}  }
class C{  protected synchronized void addTransitionListener(Hashtable<TxState,Hashtable<TxState,Set<EventListener>>> listeners,EventListener lstnr,TxState from,TxState to){  Hashtable<TxState,Set<EventListener>> lstnrs=listeners.get(from);  if (lstnrs == null)   lstnrs=new Hashtable<TxState,Set<EventListener>>();  Set<EventListener> tolstnrs=lstnrs.get(to);  if (tolstnrs == null)   tolstnrs=new HashSet<EventListener>();  if (!tolstnrs.contains(lstnr))   tolstnrs.add(lstnr);  lstnrs.put(to,tolstnrs);  listeners.put(from,lstnrs);}  }
class C{  public Boolean isWriteThrough(){  return writeThrough;}  }
class C{  public void close(){  this.active=false;}  }
class C{  public CompilationUnit parse1(Source source,SymbolTable symbolTable){  CompilationUnit unit=source.getCompilationUnit();  try {    Source generatedSource=generateSource(unit,symbolTable);    if (generatedSource != null)     generatedSource.addFileIncludes(source);    CompilationUnit implementationUnit=delegateSubCompiler.parse1(generatedSource,symbolTable);    if (implementationUnit != null) {      unit.getSource().addFileIncludes(implementationUnit.getSource());      unit.getContext().setAttribute(DELEGATE_UNIT,implementationUnit);      Source.transferMetaData(implementationUnit,unit);      Source.transferGeneratedSources(implementationUnit,unit);      Source.transferDefinitions(implementationUnit,unit);      Source.transferInheritance(implementationUnit,unit);    } else {      unit=null;    }  } catch (  FXGException ex) {    ThreadLocalToolkit.log(new SourceGenerationException(ex),source,ex.getLineNumber(),ex.getColumnNumber());    unit=null;  }catch (  IOException ex) {    ThreadLocalToolkit.log(new SourceGenerationException(ex),source);    unit=null;  }  return unit;}  }
class C{  private void updateLineList(){  if (horizontalLineRadiobutton.isSelected()) {    setHorizontalLineSelected();  } else {    setVerticalLineSelected();  }  updateButtonStates();}  }
class C{  public void addSubjectName(String subjectName){  this.add(new XMLX509SubjectName(this.doc,subjectName));}  }
class C{  public FieldValue(final byte[] fieldData){  this(fieldData,true);}  }
class C{  protected void close() throws SQLException {  if (!isClosed()) {    try {      handleClose(false);    }  finally {      forcedClose=true;    }  }}  }
class C{  private void checkCoordinates(final int x,final int y){  if (x < 0) {    throw new ArrayIndexOutOfBoundsException("x must be greater than 0, was " + x);  }  if (y < 0) {    throw new ArrayIndexOutOfBoundsException("y must be greater than 0, was " + y);  }  if (x > (getWidth() - 1)) {    throw new ArrayIndexOutOfBoundsException("x must be less than or equal to (getWidth() - 1), was " + x);  }  if (y > (getHeight() - 1)) {    throw new ArrayIndexOutOfBoundsException("y must be less than or equal to (getHeight() - 1), was " + y);  }}  }
class C{  public int lastIndexOf(String string){  return lastIndexOf(string,count);}  }
class C{  @SuppressWarnings("unchecked") public void traverse(Tree<T> tree,Collection<T> roots,int depth){  this.tree=tree;  maxDepth=depth;  stack.clear();  Object[] initial=roots.toArray();  for (int i=initial.length - 1; i >= 0; i--) {    stack.push(new Pair<T,Integer>((T)initial[i],0));  }  while (!stack.isEmpty()) {    step();  }}  }
class C{  public static String encodePathSegment(String value){  return encodeValue(value,pathSegmentEncoding);}  }
class C{  public void toEPL(EPStatementFormatter formatter,StringWriter writer){  AnnotationPart.toEPL(writer,annotations,formatter);  ExpressionDeclaration.toEPL(writer,expressionDeclarations,formatter);  ScriptExpression.toEPL(writer,scriptExpressions,formatter);  if (contextName != null) {    formatter.beginContext(writer);    writer.append("context ");    writer.append(contextName);  }  if (createIndex != null) {    formatter.beginCreateIndex(writer);    createIndex.toEPL(writer);    return;  } else   if (createSchema != null) {    formatter.beginCreateSchema(writer);    createSchema.toEPL(writer);    return;  } else   if (createExpression != null) {    formatter.beginCreateExpression(writer);    createExpression.toEPL(writer);    return;  } else   if (createContext != null) {    formatter.beginCreateContext(writer);    createContext.toEPL(writer,formatter);    return;  } else   if (createWindow != null) {    formatter.beginCreateWindow(writer);    createWindow.toEPL(writer);    if (fromClause != null) {      FilterStream fs=(FilterStream)fromClause.getStreams().get(0);      if (fs.isRetainUnion()) {        writer.write(" retain-union");      }    }    writer.write(" as ");    if ((selectClause == null) || (selectClause.getSelectList().isEmpty()) && !createWindow.getColumns().isEmpty()) {      createWindow.toEPLCreateTablePart(writer);    } else {      selectClause.toEPL(writer,formatter,false,false);      fromClause.toEPL(writer,formatter);      createWindow.toEPLInsertPart(writer);    }    return;  } else   if (createVariable != null) {    formatter.beginCreateVariable(writer);    createVariable.toEPL(writer);    return;  } else   if (createTable != null) {    formatter.beginCreateTable(writer);    createTable.toEPL(writer);    return;  } else   if (createDataFlow != null) {    formatter.beginCreateDataFlow(writer);    createDataFlow.toEPL(writer,formatter);    return;  }  boolean displayWhereClause=true;  if (updateClause != null) {    formatter.beginUpdate(writer);    updateClause.toEPL(writer);  } else   if (onExpr != null) {    formatter.beginOnTrigger(writer);    writer.write("on ");    fromClause.getStreams().get(0).toEPL(writer,formatter);    if (onExpr instanceof OnDeleteClause) {      formatter.beginOnDelete(writer);      writer.write("delete from ");      ((OnDeleteClause)onExpr).toEPL(writer);    } else     if (onExpr instanceof OnUpdateClause) {      formatter.beginOnUpdate(writer);      writer.write("update ");      ((OnUpdateClause)onExpr).toEPL(writer);    } else     if (onExpr instanceof OnSelectClause) {      OnSelectClause onSelect=(OnSelectClause)onExpr;      if (insertInto != null) {        insertInto.toEPL(writer,formatter,true);      }      selectClause.toEPL(writer,formatter,true,onSelect.isDeleteAndSelect());      writer.write(" from ");      onSelect.toEPL(writer);    } else     if (onExpr instanceof OnSetClause) {      OnSetClause onSet=(OnSetClause)onExpr;      onSet.toEPL(writer,formatter);    } else     if (onExpr instanceof OnMergeClause) {      OnMergeClause merge=(OnMergeClause)onExpr;      merge.toEPL(writer,whereClause,formatter);      displayWhereClause=false;    } else {      OnInsertSplitStreamClause split=(OnInsertSplitStreamClause)onExpr;      insertInto.toEPL(writer,formatter,true);      selectClause.toEPL(writer,formatter,true,false);      if (whereClause != null) {        writer.write(" where ");        whereClause.toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);      }      split.toEPL(writer,formatter);      displayWhereClause=false;    }  } else {    if (intoTableClause != null) {      intoTableClause.toEPL(writer);    }    if (selectClause == null) {      throw new IllegalStateException("Select-clause has not been defined");    }    if (fromClause == null) {      throw new IllegalStateException("From-clause has not been defined");    }    if (fireAndForgetClause instanceof FireAndForgetUpdate) {      FireAndForgetUpdate update=(FireAndForgetUpdate)fireAndForgetClause;      writer.append("update ");      fromClause.toEPLOptions(writer,formatter,false);      writer.append(" ");      UpdateClause.renderEPLAssignments(writer,update.getAssignments());    } else     if (fireAndForgetClause instanceof FireAndForgetInsert) {      FireAndForgetInsert insert=(FireAndForgetInsert)fireAndForgetClause;      insertInto.toEPL(writer,formatter,true);      if (insert.isUseValuesKeyword()) {        writer.append(" values (");        String delimiter="";        for (        SelectClauseElement element : selectClause.getSelectList()) {          writer.write(delimiter);          element.toEPLElement(writer);          delimiter=", ";        }        writer.append(")");      } else {        selectClause.toEPL(writer,formatter,true,false);      }    } else     if (fireAndForgetClause instanceof FireAndForgetDelete) {      writer.append("delete ");      fromClause.toEPLOptions(writer,formatter,true);    } else {      if (insertInto != null) {        insertInto.toEPL(writer,formatter,true);      }      selectClause.toEPL(writer,formatter,true,false);      fromClause.toEPLOptions(writer,formatter,true);    }  }  if (matchRecognizeClause != null) {    matchRecognizeClause.toEPL(writer);  }  if ((whereClause != null) && (displayWhereClause)) {    formatter.beginWhere(writer);    writer.write("where ");    whereClause.toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);  }  if (groupByClause != null) {    formatter.beginGroupBy(writer);    writer.write("group by ");    groupByClause.toEPL(writer);  }  if (havingClause != null) {    formatter.beginHaving(writer);    writer.write("having ");    havingClause.toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);  }  if (outputLimitClause != null) {    formatter.beginOutput(writer);    writer.write("output ");    outputLimitClause.toEPL(writer);  }  if (orderByClause != null) {    formatter.beginOrderBy(writer);    writer.write("order by ");    orderByClause.toEPL(writer);  }  if (rowLimitClause != null) {    formatter.beginLimit(writer);    writer.write("limit ");    rowLimitClause.toEPL(writer);  }  if (forClause != null) {    formatter.beginFor(writer);    forClause.toEPL(writer);  }}  }
class C{  protected void waitForDelayedWrites(){  Future<?> lastWriteTask=lastDelayedWrite;  if (lastWriteTask != null) {    try {      lastWriteTask.get();    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();    }catch (    Exception e) {    }  }}  }
class C{  public List<String> names(){  return Collections.unmodifiableList(names);}  }
class C{  public void removeAllSamples(){  mNameToColumn.clear();  mSampleLines.clear();  mSampleNames.clear();}  }
class C{  public TermsByQueryRequest routing(String... routings){  this.routing=Strings.arrayToCommaDelimitedString(routings);  return this;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.568 -0500",hash_original_method="D54DDC72729A014BD7698825D7BF2D5A",hash_generated_method="787A427C3C50877320E1D51565E40BED") public TimeoutException(String message){  super(message);}  }
class C{  public void addColumn(String name,int sqlType,int precision,int scale){  int valueType=DataType.convertSQLTypeToValueType(sqlType);  addColumn(name,sqlType,DataType.getDataType(valueType).name,precision,scale);}  }
class C{  public float[] toArray(int start,int len){  int remaining=len;  int pos=0;  float[] array=new float[len];  if (len == 0) {    return array;  }  int i=0;  while (start >= buffers[i].length) {    start-=buffers[i].length;    i++;  }  while (i < buffersCount) {    float[] buf=buffers[i];    int c=Math.min(buf.length - start,remaining);    System.arraycopy(buf,start,array,pos,c);    pos+=c;    remaining-=c;    if (remaining == 0) {      break;    }    start=0;    i++;  }  return array;}  }
class C{  public final LiveExprNode toDNF(){  int count=getCount();  LiveExprNode[] temp=new LiveExprNode[count];  for (int i=0; i < count; i++) {    temp[i]=getBody(i).toDNF();  }  Vect nes=new Vect(count);  int total=1;  for (int i=0; i < count; i++) {    LiveExprNode elem=temp[i];    if (elem instanceof LNDisj) {      nes.addElement(elem);      total*=((LNDisj)elem).getCount();    } else     if (elem instanceof LNConj) {      LNConj elem1=(LNConj)elem;      int count1=elem1.getCount();      for (int j=0; j < count1; j++) {        nes.addElement(elem1.getBody(j));      }    } else {      nes.addElement(elem);    }  }  if (total == 1) {    return new LNConj(nes);  }  int nesSize=nes.size();  Vect res=new Vect(total);  for (int i=0; i < total; i++) {    res.addElement(new LNConj(nesSize));  }  int num=1;  int rCount=total;  for (int i=0; i < nesSize; i++) {    LiveExprNode ln=(LiveExprNode)nes.elementAt(i);    if (ln instanceof LNDisj) {      LNDisj disj=(LNDisj)ln;      rCount=rCount / disj.getCount();      int idx=0;      for (int j=0; j < num; j++) {        for (int k=0; k < disj.getCount(); k++) {          LiveExprNode elem=disj.getBody(k);          for (int l=0; l < rCount; l++) {            ((LNConj)res.elementAt(idx++)).addConj(elem);          }        }      }      num=num * disj.getCount();    } else {      for (int j=0; j < total; j++) {        ((LNConj)res.elementAt(j)).addConj(ln);      }    }  }  return new LNDisj(res);}  }
class C{  public List<String> enumCertStores(){  List<String> storeNameList=new ArrayList<String>();  try (ServerHandle serverHandle=openServer()){    int error=VecsAdapter.VecsEnumCertStoreHW(serverHandle.getHandle(),storeNameList);    if (error != 0) {      throw new VecsGenericException(String.format("Enumerating stores failed. [Server: %s, User: %s]",_serverName,_userName),error);    }  }   return storeNameList;}  }
class C{  @Override public void close() throws IOException {  mOpen=false;  mParent.streamClosed(true);}  }
class C{  public static int decodePositionY(long pos){  return (int)((pos >> 26) & 0xFFF);}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) public WebCloudClient(CloudPlugin plugin,BugCollection bugs,Properties properties){  super(plugin,bugs,properties);  setNetworkClient(new WebCloudNetworkClient());  uncaughtBackgroundExceptionHandler=getUncaughtBackgroundExceptionHandler();  backgroundExecutorService=createBackgroundExecutorService();  if (backgroundExecutorService.isShutdown())   LOGGER.log(Level.SEVERE,"backgroundExecutor service is shutdown at creation");  ComponentPlugin<BugFiler> bugFilerPlugin=findFirstLoadedBugFilerPlugin();  if (bugFilerPlugin == null) {    this.bugFilingHelper=null;  } else {    this.bugFilingHelper=new BugFilingHelper(this,bugFilerPlugin);  }}  }
class C{  public RandomProjectionLSHFactory(int intsToUse,boolean inMemory){  this.intsToUse=intsToUse;  this.inMemory=inMemory;}  }
class C{  private Variable parseVariableSpecification(String token) throws ParseException {  if (!token.endsWith(")")) {    throw new ParseException("invalid variable specification '" + token + "', not properly formatted");  }  if (token.startsWith("R(")) {    String content=token.substring(2,token.length() - 1);    int index=content.indexOf(';');    if (index >= 0) {      double lowerBound=Double.parseDouble(content.substring(0,index));      double upperBound=Double.parseDouble(content.substring(index + 1,content.length()));      return EncodingUtils.newReal(lowerBound,upperBound);    } else {      throw new ParseException("invalid real specification '" + token + "', expected R(<lb>,<ub>)");    }  } else   if (token.startsWith("B(")) {    String content=token.substring(2,token.length() - 1);    try {      int length=Integer.parseInt(content.trim());      return EncodingUtils.newBinary(length);    } catch (    NumberFormatException e) {      throw new ParseException("invalid binary specification '" + token + "', expected B(<length>)");    }  } else   if (token.startsWith("P(")) {    String content=token.substring(2,token.length() - 1);    try {      int length=Integer.parseInt(content.trim());      return EncodingUtils.newPermutation(length);    } catch (    NumberFormatException e) {      throw new ParseException("invalid permutation specification '" + token + "', expected P(<length>)");    }  } else {    throw new ParseException("invalid variable specification '" + token + "', unknown type");  }}  }
class C{  public JSONArray put(int value){  this.put(new Integer(value));  return this;}  }
class C{  public void run(){  while (true) {    lock.lock();    try {      while (caller == null)       condition.await();      result=caller.call();      resultAvailable=true;      caller=null;    } catch (    InterruptedException e) {    } finally {      lock.unlock();    }  }}  }
class C{  @Override protected void removeAt(int index){  _states[index]=REMOVED;  super.removeAt(index);}  }
class C{  private void removeFirebaseListeners(){  if (valueUserListener != null) {    mRefUsers.removeEventListener(valueUserListener);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public S_Other createS_Other(){  S_OtherImpl s_Other=new S_OtherImpl();  return s_Other;}  }
class C{  public void parseGotoByteCode(TextStream stream,DataOutputStream dataStream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network) throws IOException {  stream.nextWord();  dataStream.writeLong(network.createVertex(Primitive.GOTO).getId());  stream.skipWhitespace();  boolean gotoFinally=stream.peekWord().toLowerCase().equals(FINALLY);  if (gotoFinally) {    stream.nextWord();    dataStream.writeLong(network.createVertex(Primitive.FINALLY).getId());  }  dataStream.writeLong(parseElementName(Primitive.STATE,stream,elements,debug,network).getId());  if (stream.peek() != ';') {    if (stream.peekWord().toLowerCase().equals(WITH)) {      dataStream.writeLong(network.createVertex(Primitive.ARGUMENT).getId());      stream.skipWord();      stream.skipWhitespace();      if (stream.peek() == '(') {        stream.skip();        stream.skipWhitespace();        parseElementByteCode(stream,dataStream,elements,debug,network);        stream.skipWhitespace();        while (stream.peek() == ',') {          stream.skip();          stream.skipWhitespace();          parseElementByteCode(stream,dataStream,elements,debug,network);        }        ensureNext(')',stream);        dataStream.writeLong(0l);      } else {        parseElementByteCode(stream,dataStream,elements,debug,network);        dataStream.writeLong(0l);      }    }  }  dataStream.writeLong(0l);  ensureNext(';',stream);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthPasswordFieldUI();}  }
class C{  @Override public BufferedImage JPEGToRGBImage(final byte[] data,final int ww,final int hh,final int pX,final int pY){  BufferedImage image;  ByteArrayInputStream in=null;  ImageReader iir=null;  ImageInputStream iin=null;  try {    in=new ByteArrayInputStream(data);    final Iterator<ImageReader> iterator=ImageIO.getImageReadersByFormatName("JPEG");    while (iterator.hasNext()) {      final ImageReader o=iterator.next();      iir=o;      if (iir.canReadRaster()) {        break;      }    }    ImageIO.setUseCache(false);    iin=ImageIO.createImageInputStream((in));    iir.setInput(iin,true);    Raster ras=iir.readRaster(0,null);    ras=cleanupRaster(ras,pX,pY,1);    final int w=ras.getWidth();    final int h=ras.getHeight();    final DataBufferByte rgb=(DataBufferByte)ras.getDataBuffer();    final byte[] rawData=rgb.getData();    if (this.altCS.getID() == ColorSpaces.DeviceGray) {      for (int aa=0; aa < rawData.length; aa++) {        rawData[aa]=(byte)(rawData[aa] ^ 255);      }      final int[] bands={0};      image=new BufferedImage(w,h,BufferedImage.TYPE_BYTE_GRAY);      final Raster raster=Raster.createInterleavedRaster(new DataBufferByte(rawData,rawData.length),w,h,w,1,bands,null);      image.setData(raster);    } else {      image=createImage(w,h,rawData);    }  } catch (  final Exception ee) {    image=null;    LogWriter.writeLog("Couldn't read JPEG, not even raster: " + ee);  }  try {    in.close();    iir.dispose();    iin.close();  } catch (  final Exception ee) {    LogWriter.writeLog("Problem closing  " + ee);  }  return image;}  }
class C{  public NotNullValidator(@NonNull final Context context,@StringRes final int resourceId){  super(context,resourceId);}  }
class C{  public void onDismissed(Snackbar snackbar,int event){  ReactSnackbarModule.this.sendEvent(EVENT_HIDDEN,null);}  }
class C{  void save(final OutputStream out) throws IOException {  final Encoder codec=new Encoder();  final Writer writer=new OutputStreamWriter(out,"UTF-8");  try {    for (    Profile p : this) {      writer.write(codec.encode(p.encode()));      writer.write(System.getProperty("line.separator"));    }  }  finally {    writer.flush();  }}  }
class C{  public final void addAction(String action){  if (!mActions.contains(action)) {    mActions.add(action.intern());  }}  }
class C{  public boolean reopenNote(Note bug){  if (!bug.isNew()) {    Log.d(DEBUG_TAG,"reopen note " + bug.getId());    HttpURLConnection connection=null;    try {      try {        URL reopenNoteUrl=getReopenNoteUrl(Long.toString(bug.getId()));        connection=openConnectionForWriteAccess(reopenNoteUrl,"POST","text/xml");        if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {          throwUnexpectedRequestException(connection);        }        parseBug(bug,connection.getInputStream());        return true;      } catch (      XmlPullParserException e) {        Log.e(DEBUG_TAG,"reopenNote:Exception",e);      }catch (      IOException e) {        Log.e(DEBUG_TAG,"reopenNote:Exception",e);      }    }  finally {      disconnect(connection);    }  }  return false;}  }
class C{  public static void reset(){  v=null;}  }
class C{  public E removeAt(int index){  final Object old=mArray[index];  if (mSize <= 1) {    if (DEBUG)     Log.d(TAG,"remove: shrink from " + mHashes.length + " to 0");    freeArrays(mHashes,mArray,mSize);    mHashes=SupportContainerInternals.EMPTY_INTS;    mArray=SupportContainerInternals.EMPTY_OBJECTS;    mSize=0;  } else {    if (mHashes.length > (BASE_SIZE * 2) && mSize < mHashes.length / 3) {      final int n=mSize > (BASE_SIZE * 2) ? (mSize + (mSize >> 1)) : (BASE_SIZE * 2);      if (DEBUG)       Log.d(TAG,"remove: shrink from " + mHashes.length + " to "+ n);      final int[] ohashes=mHashes;      final Object[] oarray=mArray;      allocArrays(n);      mSize--;      if (index > 0) {        if (DEBUG)         Log.d(TAG,"remove: copy from 0-" + index + " to 0");        System.arraycopy(ohashes,0,mHashes,0,index);        System.arraycopy(oarray,0,mArray,0,index);      }      if (index < mSize) {        if (DEBUG)         Log.d(TAG,"remove: copy from " + (index + 1) + "-"+ mSize+ " to "+ index);        System.arraycopy(ohashes,index + 1,mHashes,index,mSize - index);        System.arraycopy(oarray,index + 1,mArray,index,mSize - index);      }    } else {      mSize--;      if (index < mSize) {        if (DEBUG)         Log.d(TAG,"remove: move " + (index + 1) + "-"+ mSize+ " to "+ index);        System.arraycopy(mHashes,index + 1,mHashes,index,mSize - index);        System.arraycopy(mArray,index + 1,mArray,index,mSize - index);      }      mArray[mSize]=null;    }  }  return (E)old;}  }
class C{  public T caseAnonymous_constantDeclaration_1_(Anonymous_constantDeclaration_1_ object){  return null;}  }
class C{  private Review extractLatestReviewFromNotes(String rawNoteDataStr) throws GitClientException {  String[] noteDataStrs=rawNoteDataStr.split("\n");  Review latest=parseReviewJson(noteDataStrs[0]);  for (int i=1; i < noteDataStrs.length; i++) {    Review anotherOne=parseReviewJson(noteDataStrs[i]);    try {      if (latest == null || ((anotherOne != null && anotherOne.getTimestamp() > latest.getTimestamp()))) {        latest=anotherOne;      }    } catch (    Exception e) {      throw new GitClientException(e);    }  }  return latest;}  }
class C{  public boolean isTopicFilterValid(String topicFilter){  return !StringUtils.isEmpty(topicFilter) && (this.topicFilterPattern == null || this.topicFilterPattern.matcher(topicFilter).matches());}  }
class C{  public SAXException(Exception e){  this.exception=e;}  }
class C{  public synchronized void registerMetadataMapper(String name,MetadataFieldMapper.TypeParser parser){  if (metadataMapperParsers.containsKey(name)) {    throw new IllegalArgumentException("A mapper is already registered for metadata mapper [" + name + "]");  }  metadataMapperParsers.put(name,parser);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public JobBuilder ofType(Class<? extends Job> jobClazz){  this.jobClass=jobClazz;  return this;}  }
class C{  public StrBuilder insert(int index,long value){  return insert(index,String.valueOf(value));}  }
class C{  public static String applyActionsToString(OFInstructionApplyActions inst,Logger log) throws Exception {  return ActionUtils.actionsToString(inst.getActions(),log);}  }
class C{  public static Document readDocument(String fileName) throws SAXException, IOException {  DocumentBuilder docBuilder;  Document result=null;  DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();  docBuilderFactory.setIgnoringElementContentWhitespace(true);  try {    docBuilder=docBuilderFactory.newDocumentBuilder();  } catch (  ParserConfigurationException e) {    throw new Error(e);  }  File sourceFile=new File(fileName);  result=docBuilder.parse(sourceFile);  return result;}  }
class C{  private void stackTrace(PseudoOp op){  saveContext(op,env.top());  for (  StackFrame frame : env.iterator()) {    op=frame.getSavedMethod()[frame.getSavedPc() - 1];    System.err.println(op.getSourceLocation("at "));  }}  }
class C{  public static String printOpenSSHkeyNistp256(String base64Pubkey,String comment){  StringBuilder openSSH=new StringBuilder();  openSSH.append(NISTP256_KEY_PREFIX);  openSSH.append(" ");  openSSH.append(base64Pubkey);  if (comment != null) {    openSSH.append(" ");    openSSH.append(comment);  }  return openSSH.toString();}  }
class C{  private String dumpZipEntry(final ZipEntry ze){  final StringBuffer sb=new StringBuffer();  if (ze.isDirectory()) {    sb.append("d ");  } else {    sb.append("f ");  }  if (ze.getMethod() == ZipEntry.STORED) {    sb.append("stored   ");  } else {    sb.append("defalted ");  }  sb.append(ze.getName());  sb.append("\t");  sb.append("" + ze.getSize());  if (ze.getMethod() == ZipEntry.DEFLATED) {    sb.append("/" + ze.getCompressedSize());  }  return sb.toString();}  }
class C{  public T caseElementReferenceExpression(ElementReferenceExpression object){  return null;}  }
class C{  public void flush(){  Writer out=this.out;  if (out == null)   return;  try {    out.flush();  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  private void assertTagsMatchPoints(List<Element> tags,MyTracksLocation... locations){  assertEquals(locations.length,tags.size());  for (int i=0; i < locations.length; i++) {    assertTagMatchesLocation(tags.get(i),locations[i]);  }}  }
class C{  public String toString(){  StringBuilder stringBuilder=new StringBuilder();  stringBuilder.append(String.format("0x"));  for (  byte b : this.ul) {    stringBuilder.append(String.format("%02x",b));  }  return stringBuilder.toString();}  }
class C{  public boolean matches(Issue issue){  Objects.requireNonNull(issue);  for (  IssuePropertyMatcher propertyMatcher : propertyMatchers) {    if (!propertyMatcher.matches(issue))     return false;  }  return true;}  }
class C{  public static JavaClassAndMethod findExactMethod(InvokeInstruction inv,ConstantPoolGen cpg) throws ClassNotFoundException {  return findExactMethod(inv,cpg,ANY_METHOD);}  }
class C{  private String normilize(String path){  if (!U.isWindows())   return path;  return path.replace('/',File.separatorChar);}  }
class C{  public boolean contextSelect(D nodeData){  if (selectedNodes.isEmpty()) {    insertAndSelectNode(nodeData,0,true);    return true;  }  if (!hasSameParent(selectedNodes.get(0),nodeData) || selectedNodes.size() == 1) {    return selectSingleNode(nodeData);  }  if (!selectedNodes.contains(nodeData)) {    int insertionIndex=getInsertionIndex(nodeData);    insertAndSelectNode(nodeData,insertionIndex,true);    return true;  }  return false;}  }
class C{  public void stopTimer(){  stop=true;}  }
class C{  @Override public List<NamedRelatedResourceRep> list(){  StorageSystemList response=client.get(StorageSystemList.class,baseUrl);  return ResourceUtils.defaultList(response.getStorageSystems());}  }
class C{  public void test_getValue(){  SSLSession s=clientSession;  mySSLSessionBindingListener sbl=new mySSLSessionBindingListener();  try {    s.getValue(null);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException expected) {  }  s.putValue("Name",sbl);  Object obj=s.getValue("Name");  assertTrue(obj instanceof SSLSessionBindingListener);}  }
class C{  static void printThrowable(Throwable theThro,boolean withStack){  try {    if (withStack) {      theThro.printStackTrace(System.out);    }    if (theThro instanceof Exception) {      Exception t=(Exception)theThro;      Method target=null;      String blank=" ";      try {        target=t.getClass().getMethod("getTargetException",(java.lang.Class<?>[])null);      } catch (      Exception ee) {      }      System.out.println(blank + t.getClass() + "==>"+ t.getMessage());      while (target != null) {        try {          t=(Exception)target.invoke(t,(java.lang.Object[])null);        } catch (        Exception ee) {          t=null;        }        try {          if (t != null) {            blank=blank + "  ";            System.out.println(blank + t.getClass() + "==>"+ t.getMessage());            try {              target=t.getClass().getMethod("getTargetException",(java.lang.Class<?>[])null);            } catch (            Exception ee) {            }          } else {            target=null;          }        } catch (        Exception ee) {          target=null;        }      }      try {        target=((Exception)theThro).getClass().getMethod("getTargetError",(java.lang.Class<?>[])null);      } catch (      Exception ee) {      }      Throwable err=theThro;      while (target != null) {        try {          err=(Error)target.invoke(err,(java.lang.Object[])null);        } catch (        Exception ee) {          err=null;        }        try {          if (err != null) {            blank=blank + "  ";            System.out.println(blank + err.getClass() + "==>"+ err.getMessage());            if (withStack) {              err.printStackTrace(System.out);            }            try {              target=err.getClass().getMethod("getTargetError",(java.lang.Class<?>[])null);            } catch (            Exception ee) {            }          } else {            target=null;          }        } catch (        Exception ee) {          target=null;        }      }    } else {      System.out.println("Throwable is : " + theThro);    }  } catch (  Throwable x) {    System.out.println("Exception : raised in printException : " + x);  }}  }
class C{  public SchedulePolicyResp createPolicy(URI id,PolicyParam param){  TenantOrg tenant=getTenantById(id,true);  ArgValidator.checkFieldNotNull(param.getPolicyName(),"policyName");  if (param.getPolicyName() != null && !param.getPolicyName().isEmpty()) {    checkForDuplicateName(param.getPolicyName(),SchedulePolicy.class);  }  if (!ArgValidator.isValidEnum(param.getPolicyType(),SchedulePolicyType.class)) {    throw APIException.badRequests.invalidSchedulePolicyType(param.getPolicyType());  }  _log.info("Schedule policy creation started -- ");  SchedulePolicy schedulePolicy=new SchedulePolicy();  StringBuilder errorMsg=new StringBuilder();  boolean isValidSchedule=SchedulePolicyService.validateSchedulePolicyParam(param.getPolicySchedule(),schedulePolicy,errorMsg);  if (!isValidSchedule && errorMsg != null && errorMsg.length() > 0) {    _log.error("Failed to create schedule policy due to {} ",errorMsg.toString());    throw APIException.badRequests.invalidSchedulePolicyParam(param.getPolicyName(),errorMsg.toString());  }  boolean isValidSnapshotExpire=false;  if (param.getSnapshotExpire() != null) {    String expireType=param.getSnapshotExpire().getExpireType();    if (!ArgValidator.isValidEnum(expireType,SnapshotExpireType.class)) {      _log.error("Invalid schedule snapshot expire type {}. Valid Snapshot expire types are hours, days, weeks, months and never",expireType);      throw APIException.badRequests.invalidScheduleSnapshotExpireType(expireType);    }    isValidSnapshotExpire=SchedulePolicyService.validateSnapshotExpireParam(param.getSnapshotExpire());    if (!isValidSnapshotExpire) {      int expireTime=param.getSnapshotExpire().getExpireValue();      int minExpireTime=2;      int maxExpireTime=10;      _log.error("Invalid schedule snapshot expire time {}. Try an expire time between {} hours to {} years",expireTime,minExpireTime,maxExpireTime);      throw APIException.badRequests.invalidScheduleSnapshotExpireValue(expireTime,minExpireTime,maxExpireTime);    }  } else {    if (param.getPolicyType().equalsIgnoreCase(SchedulePolicyType.file_snapshot.toString())) {      errorMsg.append("Required parameter snapshot_expire was missing or empty");      _log.error("Failed to create schedule policy due to {} ",errorMsg.toString());      throw APIException.badRequests.invalidSchedulePolicyParam(param.getPolicyName(),errorMsg.toString());    }  }  if (isValidSchedule) {    schedulePolicy.setId(URIUtil.createId(SchedulePolicy.class));    schedulePolicy.setPolicyType(param.getPolicyType());    schedulePolicy.setLabel(param.getPolicyName());    schedulePolicy.setPolicyName(param.getPolicyName());    schedulePolicy.setScheduleFrequency(param.getPolicySchedule().getScheduleFrequency().toLowerCase());    if (isValidSnapshotExpire) {      schedulePolicy.setSnapshotExpireType(param.getSnapshotExpire().getExpireType().toLowerCase());      if (!param.getSnapshotExpire().getExpireType().equalsIgnoreCase(SnapshotExpireType.NEVER.toString())) {        schedulePolicy.setSnapshotExpireTime((long)param.getSnapshotExpire().getExpireValue());      }    }    schedulePolicy.setTenantOrg(new NamedURI(tenant.getId(),schedulePolicy.getLabel()));    _dbClient.createObject(schedulePolicy);    _log.info("Schedule policy {} created successfully",schedulePolicy);  }  recordTenantEvent(OperationTypeEnum.CREATE_SCHEDULE_POLICY,tenant.getId(),schedulePolicy.getId());  return new SchedulePolicyResp(schedulePolicy.getId(),toLink(ResourceTypeEnum.SCHEDULE_POLICY,schedulePolicy.getId()),schedulePolicy.getLabel());}  }
class C{  static long toUData(int[] shorts){  if (shorts == null) {    return 0;  }  long res=XlibWrapper.unsafe.allocateMemory(shorts.length * getShortSize());  for (int i=0; i < shorts.length; i++) {    putUShort(res,i,shorts[i]);  }  return res;}  }
class C{  public void rewind(){  position=0;  total=0;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.SYMMETRIC_REFLEXIVE_ASSOCIATION___MULTIPLICITY_1:    return ((InternalEList<?>)getMultiplicity_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void add(Group group){  _values.add(group);}  }
class C{  public SimpleFragmentIntent<F> putExtra(String name,short[] value){  if (extras == null) {    extras=new Bundle();  }  extras.putShortArray(name,value);  return this;}  }
class C{  public boolean startWifi(){  try {    Method method=mWifiManager.getClass().getMethod("startWifi");    return (Boolean)method.invoke(mWifiManager);  } catch (  Exception e) {    e.printStackTrace();  }  return false;}  }
class C{  public AttachSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public UnicodeTranslatorInt(){}  }
class C{  public StateItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static String prechomp(String str,String sep){  int idx=str.indexOf(sep);  if (idx != -1) {    return str.substring(idx + sep.length());  } else {    return str;  }}  }
class C{  public static void installAppEngineFacet(IFacetedProject facetedProject,boolean installDependentFacets,IProgressMonitor monitor) throws CoreException {  if (installDependentFacets) {    installJavaFacet(facetedProject,monitor);    installWebFacet(facetedProject,monitor);  }  IProjectFacet appEngineFacet=ProjectFacetsManager.getProjectFacet(AppEngineStandardFacet.ID);  IProjectFacetVersion appEngineFacetVersion=appEngineFacet.getVersion(AppEngineStandardFacet.VERSION);  if (!facetedProject.hasProjectFacet(appEngineFacet)) {    facetedProject.installProjectFacet(appEngineFacetVersion,null,monitor);  }}  }
class C{  public JParamsLocationWithFirst(){  super();}  }
class C{  private void codeDup(Assembler asm,int items,int depth){switch (items) {case 0:    return;case 1:switch (depth) {case 0:    asm.add(where,opc_dup);  return;case 1:asm.add(where,opc_dup_x1);return;case 2:asm.add(where,opc_dup_x2);return;}break;case 2:switch (depth) {case 0:asm.add(where,opc_dup2);return;case 1:asm.add(where,opc_dup2_x1);return;case 2:asm.add(where,opc_dup2_x2);return;}break;}throw new CompilerError("can't dup: " + items + ", "+ depth);}  }
class C{  public static Lattice<String> createFromString(String data){  Map<Integer,Node<String>> nodes=new HashMap<>();  Pattern nodePattern=Pattern.compile("(.+?)\\((\\(.+?\\),)\\)(.*)");  Pattern arcPattern=Pattern.compile("\\('(.+?)',(\\d+.\\d+),(\\d+)\\),(.*)");  Matcher nodeMatcher=nodePattern.matcher(data);  int nodeID=-1;  while (nodeMatcher.matches()) {    String nodeData=nodeMatcher.group(2);    String remainingData=nodeMatcher.group(3);    nodeID++;    Node<String> currentNode;    if (nodes.containsKey(nodeID)) {      currentNode=nodes.get(nodeID);    } else {      currentNode=new Node<>(nodeID);      nodes.put(nodeID,currentNode);    }    LOG.debug("Node : {}",nodeID);    Matcher arcMatcher=arcPattern.matcher(nodeData);    while (arcMatcher.matches()) {      String arcLabel=arcMatcher.group(1);      double arcWeight=Double.valueOf(arcMatcher.group(2));      int destinationNodeID=nodeID + Integer.valueOf(arcMatcher.group(3));      Node<String> destinationNode;      if (nodes.containsKey(destinationNodeID)) {        destinationNode=nodes.get(destinationNodeID);      } else {        destinationNode=new Node<>(destinationNodeID);        nodes.put(destinationNodeID,destinationNode);      }      String remainingArcs=arcMatcher.group(4);      LOG.debug("\t {} {} {}",arcLabel,arcWeight,destinationNodeID);      currentNode.addArc(destinationNode,(float)arcWeight,arcLabel);      arcMatcher=arcPattern.matcher(remainingArcs);    }    nodeMatcher=nodePattern.matcher(remainingData);  }  List<Node<String>> nodeList=new ArrayList<>(nodes.values());  Collections.sort(nodeList,new NodeIdentifierComparator());  LOG.debug("Nodelist={}",nodeList);  return new Lattice<>(nodeList,new JoshuaConfiguration());}  }
class C{  public TermSuggestionBuilder maxEdits(Integer maxEdits){  this.maxEdits=maxEdits;  return this;}  }
class C{  public void testClearBitNegativeInside1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=15;  byte rBytes[]={-2,127,-57,-101,1,75,-90,-46,-92,-4,14,92,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  @Field(29) public Pointer<Pointer<SAFEARRAY>> pparray(){  return this.io.getPointerField(this,29);}  }
class C{  private static <T>LoadResult<T> validateLoadedPlugins(final LoadResult<T> result){  final HashSet<Long> guids=new HashSet<>();  final ArrayList<Pair<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>,PluginStatus>> validatedPlugins=new ArrayList<>();  for (  final Pair<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>,PluginStatus> pluginPair : result.getLoadedPlugins()) {    final com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T> plugin=pluginPair.first();    final String name=plugin.getName();    final long guid=plugin.getGuid();    if ((name == null) && (guid == 0)) {      validatedPlugins.add(new Pair<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>,PluginStatus>(plugin,PluginStatus.InvalidNameGuid));    } else     if (name == null) {      validatedPlugins.add(new Pair<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>,PluginStatus>(plugin,PluginStatus.InvalidName));    } else     if (guid == 0) {      validatedPlugins.add(new Pair<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>,PluginStatus>(plugin,PluginStatus.InvalidGuid));    } else     if (guids.contains(guid)) {      validatedPlugins.add(new Pair<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>,PluginStatus>(plugin,PluginStatus.DuplicateGuid));    } else {      validatedPlugins.add(new Pair<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>,PluginStatus>(plugin,PluginStatus.Valid));    }    guids.add(guid);  }  return new LoadResult<T>(validatedPlugins,result.getFailedPlugins());}  }
class C{  public static void write(char[] c){  write(c,c.length);}  }
class C{  private QueryResult(final QueryTask task){  mTask=task;}  }
class C{  private void reparentChildren(Entry entry,final Entry parent){  final Entry firstChild=getEntryById(entry.getFirstChildId());  if (firstChild != null) {    final Entry previous=getEntryById(entry.getPreviousSiblingId());    if (previous != null) {      previous.setNextSiblingId(firstChild.getId());      firstChild.setPreviousSiblingId(previous.getId());    } else {      parent.setFirstChildId(firstChild.getId());    }  } else {    final Entry previous=getEntryById(entry.getPreviousSiblingId());    if (previous != null) {      previous.setNextSiblingId(entry.getNextSiblingId());    }  }  final Entry lastChild=getEntryById(entry.getLastChildId());  if (lastChild != null) {    final Entry next=getEntryById(entry.getNextSiblingId());    if (next != null) {      next.setPreviousSiblingId(lastChild.getId());      lastChild.setNextSiblingId(next.getId());    } else {      parent.setLastChildId(lastChild.getId());    }  } else {    final Entry next=getEntryById(entry.getNextSiblingId());    if (next != null) {      next.setPreviousSiblingId(entry.getPreviousSiblingId());    }  }}  }
class C{  public JMenuBar createJMenuBar(String name) throws MissingResourceException, ResourceFormatException, MissingListenerException {  return createJMenuBar(name,null);}  }
class C{  public boolean isClearWhitespaceLinesEnabled(){  return clearWhitespaceLines;}  }
class C{  public void generateClippedImage(BufferedImage image){  final int pageRotation=pageData.getRotation(parserOptions.getPageNumber());  final ImageTransformerDouble image_transformation=new ImageTransformerDouble(gs,image,parserOptions.createScaledVersion(),1,pageRotation);  if (image_transformation != null) {    image_transformation.doubleScaleTransformShear();    image=image_transformation.getImage();  }  if (isMask) {    image=convertMaskToImage(image,gs.nonstrokeColorSpace.getColor().getRGB());  }  if (objectStoreStreamRef.saveStoredImageAsBytes("CLIP_" + currentImage,image,false)) {    errorTracker.addPageFailureMessage("Problem saving " + image);  }  image_transformation.completeImage();  image=image_transformation.getImage();  if (image != null) {    if (parserOptions.imagesNeeded()) {      float x=image_transformation.getImageX();      float y=image_transformation.getImageY();      float w=image_transformation.getImageW();      float h=image_transformation.getImageH();      pdfImages.setImageInfo(currentImage,parserOptions.getPageNumber(),x,y,w,h);    }  }}  }
class C{  @Override public Object clone(){  return this.copy();}  }
class C{  public double adjustedFitness(){  return fitness();}  }
class C{  public static SavedReports run(AdSense adsense,int maxPageSize) throws Exception {  System.out.println("=================================================================");  System.out.printf("Listing all saved reports for default account\n");  System.out.println("=================================================================");  String pageToken=null;  SavedReports savedReports=null;  do {    savedReports=adsense.reports().saved().list().setMaxResults(maxPageSize).setPageToken(pageToken).execute();    if (savedReports.getItems() != null && !savedReports.getItems().isEmpty()) {      for (      SavedReport savedReport : savedReports.getItems()) {        System.out.printf("Saved report with id \"%s\" and name \"%s\" was found.\n",savedReport.getId(),savedReport.getName());      }    } else {      System.out.println("No saved reports found.");    }    pageToken=savedReports.getNextPageToken();  } while (pageToken != null);  System.out.println();  return savedReports;}  }
class C{  public static String fmtPct(double v){  return v == Double.MAX_VALUE ? null : PCT.format(v);}  }
class C{  public void release(){  release(0);}  }
class C{  public String importExternalIDPConfiguration(String tenantName,Document doc) throws ExternalIDPCertChainInvalidTrustedPathException, ExternalIDPExtraneousCertsInCertChainException, Exception {  samlValidate(doc);  return new SAMLImporter(this).importExternalIDPConfig(tenantName,doc);}  }
class C{  public int ppid(){  return Integer.parseInt(fields[3]);}  }
class C{  public File showSaveDialog(final String file){  return showSaveDialog(new File(file));}  }
class C{  public Index keyspace(String keyspace){  this.keyspace=keyspace;  return this;}  }
class C{  @Override public boolean stop(){  if (!_lifecycle.toStopping())   return false;  log.finest(this + " stopping");  closeConnections();  destroy();  return true;}  }
class C{  private int startFrame(final int offset,final int nLocal,final int nStack){  int n=3 + nLocal + nStack;  if (frame == null || frame.length < n) {    frame=new int[n];  }  frame[0]=offset;  frame[1]=nLocal;  frame[2]=nStack;  return 3;}  }
class C{  public static void patchCommandLineForVirtualenv(GeneralCommandLine commandLine,String sdkHome,boolean passParentEnvironment){  File virtualEnvRoot=getVirtualEnvRoot(sdkHome);  if (virtualEnvRoot != null) {    @NonNls final String PATH="PATH";    File bin=new File(virtualEnvRoot,"bin");    if (!bin.exists()) {      bin=new File(virtualEnvRoot,"Scripts");    }    String virtualenvBin=bin.getPath();    Map<String,String> env=commandLine.getEnvironment();    String pathValue;    if (env.containsKey(PATH)) {      pathValue=PythonEnvUtil.appendToPathEnvVar(env.get(PATH),virtualenvBin);    } else     if (passParentEnvironment) {      pathValue=PythonEnvUtil.appendToPathEnvVar(System.getenv(PATH),virtualenvBin);    } else {      pathValue=virtualenvBin;    }    env.put(PATH,pathValue);  }}  }
class C{  @Override @Pure public void initialize(){}  }
class C{  @Override public boolean pruneValues(double threshold){  return false;}  }
class C{  public int computeLightValue(BlockPos pos){  Cube cube=getCube(pos.getX(),pos.getY(),pos.getZ());  Column column=cube.getColumn();  int height=column.getHeightValue(blockToLocal(pos.getX()),blockToLocal(pos.getZ()));  if (pos.getY() > height) {    return 15;  }  IBlockState iblockstate=cube.getBlockState(pos);  int lightSubtract=iblockstate.getLightOpacity((IBlockAccess)world,pos);  if (lightSubtract < 1) {    lightSubtract=1;  }  if (lightSubtract >= 15) {    return 0;  }  BlockPos.PooledMutableBlockPos currentPos=BlockPos.PooledMutableBlockPos.retain();  int maxValue=0;  for (  EnumFacing enumfacing : EnumFacing.values()) {    currentPos.setPos(pos).move(enumfacing);    int currentValue=this.getLightFor(EnumSkyBlock.SKY,currentPos) - lightSubtract;    if (currentValue > maxValue) {      maxValue=currentValue;    }    if (maxValue >= 14) {      return maxValue;    }  }  currentPos.release();  return maxValue;}  }
class C{  @Override public void write(BinaryRawWriterEx writer,Object obj,Throwable err){  platformCtx.writeEvent(writer,(EventAdapter)obj);}  }
class C{  public Dialog(String title){  this();  setTitle(title);}  }
class C{  @Override public String value(){  return value;}  }
class C{  public long clean(final int currentRevisionIndex,final int revisionIndex){  if (first == null) {    return 0;  } else   if (this.set.isEmpty()) {    this.first=null;    this.size=0;    return 0;  }  ChronoStorageBlock next, prev, current=first;  boolean remove;  do {    remove=false;    if (current.isDelivered()) {      next=current.getCounterNext();      if (next != null) {        if (current.getRevisionCounter() + 1 == next.getRevisionCounter()) {          remove=true;        }      }    } else     if (current.getIndexNext() == null && current.getIndexPrev() == null) {      remove=(current.getRevisionIndex() < currentRevisionIndex) || (current.getRevisionIndex() == revisionIndex);    }    if (remove) {      prev=current.getCounterPrev();      next=current.getCounterNext();      current.setCounterNext(null);      current.setCounterPrev(null);      if (prev != null) {        prev.setCounterNext(next);      }      if (next != null) {        next.setCounterPrev(prev);      }      if (current == first) {        this.first=next;      }      this.size-=current.length();      current=next;    }    if (current != null) {      current=current.getCounterNext();    }  } while (current != null);  return this.size;}  }
class C{  public static void encodeTimestamp(byte[] array,int pointer,double timestamp){  for (int i=0; i < 8; i++) {    double base=Math.pow(2,(3 - i) * 8);    array[pointer + i]=(byte)(timestamp / base);    timestamp=timestamp - (unsignedByteToShort(array[pointer + i]) * base);  }  array[7]=(byte)(Math.random() * 255.0);}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    buf=null;    in.close();  }}  }
class C{  private void updateFromCamera(){  final ReadOnlyVector3 camLeft=camera.getLeft();  final ReadOnlyVector3 camUp=camera.getUp();  final ReadOnlyVector3 camDir=camera.getDirection();  final ReadOnlyVector3 camLoc=camera.getLocation();  final Matrix3 rotation=Matrix3.fetchTempInstance();  rotation.fromAxes(camLeft,camUp,camDir);  setRotation(rotation);  setTranslation(camLoc);  Matrix3.releaseTempInstance(rotation);}  }
class C{  public static String encodeFromFile(String filename) throws java.io.IOException {  String encodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4),40)];    int length=0;    int numBytes=0;    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  LineComp(String value){  response=(value == null) ? "Graticule Line" : value;}  }
class C{  @Override public void applyConfig(final ConfigSettings config){  Object o=config.getConfigParameter(ConfigurationKeys.VERIFICATION_DIFF);  if (o != null) {    controller.setEnableDiffVerification((Boolean)o);  } else {    controller.setEnableDiffVerification(false);  }  o=config.getConfigParameter(ConfigurationKeys.VERIFICATION_ENCODING);  if (o != null) {    controller.setEnableEncodingVerification((Boolean)o);  } else {    controller.setEnableEncodingVerification(false);  }  o=config.getConfigParameter(ConfigurationKeys.MODE_STATISTICAL_OUTPUT);  if (o != null) {    controller.setEnableStatsOutput((Boolean)o);  } else {    controller.setEnableStatsOutput(false);  }  o=config.getConfigParameter(ConfigurationKeys.LOGGING_PATH_DEBUG);  if (o != null) {    controller.setEnableDebugOutput(true);    this.debugOutputField.setText((String)o);  } else {    controller.setEnableDebugOutput(false);    this.debugOutputField.setText("");  }}  }
class C{  private static boolean hasTagAlready(Javadoc doc,JavadocTag tag){  requireNonNull(doc);  requireNonNull(tag);  return doc.getTags().stream().anyMatch(null);}  }
class C{  public void writeHeaderPart(AnnotatedOutput out){  throwIfNotPrepared();  int sz=typeIds.size();  int offset=(sz == 0) ? 0 : getFileOffset();  if (sz > 65536) {    throw new UnsupportedOperationException("too many type ids");  }  if (out.annotates()) {    out.annotate(4,"type_ids_size:   " + Hex.u4(sz));    out.annotate(4,"type_ids_off:    " + Hex.u4(offset));  }  out.writeInt(sz);  out.writeInt(offset);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGenPackage.FEATURE_TYPE_LIBRARY__TYPES:    getTypes().clear();  return;case SGenPackage.FEATURE_TYPE_LIBRARY__NAME:setName(NAME_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public EventStoreBuilder persistentSubscriptionAutoAckDisabled(){  settingsBuilder.persistentSubscriptionAutoAckEnabled(false);  return this;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void selectText(int startIndex,int endIndex){  AccessibleEditableText at=getEditorAccessibleEditableText();  if (at != null) {    at.selectText(startIndex,endIndex);  }}  }
class C{  private static double polyCosine(double x){  double x2=x * x;  double p=2.479773539153719E-5;  p=p * x2 + -0.0013888888689039883;  p=p * x2 + 0.041666666666621166;  p=p * x2 + -0.49999999999999994;  p*=x2;  return p;}  }
class C{  public ApproximationSetPlot(DiagnosticTool frame,String metric){  super(frame,metric);  setLayout(new BorderLayout());}  }
class C{  public static Map<String,String> buildMapFromKeyValuePairs(Set<String> keyValueSet){  Map<String,String> selectionArgs=new HashMap<>();  for (  String pair : keyValueSet) {    int delimLoc=pair.indexOf("=");    if (delimLoc != -1) {      selectionArgs.put(pair.substring(0,delimLoc),pair.substring(delimLoc + 1));    }  }  return selectionArgs;}  }
class C{  public LongKeyMap(){  this.loadFactor=DEFAULT_LOAD_FACTOR;  threshold=DEFAULT_INITIAL_CAPACITY;  table=new LongEntry[DEFAULT_INITIAL_CAPACITY];}  }
class C{  private Hex(){}  }
class C{  public static String makeLogTag(Class cls){  return makeLogTag(cls.getSimpleName());}  }
class C{  public void drawRect(int x,int y,int width,int height,int thickness){  impl.drawRect(nativeGraphics,xTranslate + x,yTranslate + y,width,height,thickness);}  }
class C{  private boolean isLinkerMethodInvoke(Name name){  if (name.function == null)   return false;  if (name.arguments.length < 1)   return false;  MemberName member=name.function.member();  return member != null && member.getDeclaringClass() == MethodHandle.class && !member.isPublic() && member.isStatic() && member.getName().startsWith("linkTo");}  }
class C{  private ListGlossariesCommand(){}  }
class C{  public String disableIfNoMatches(String type){  return (hasMatches(type)) ? "" : "disabled=\"disabled\"";}  }
class C{  public OrderPositionKey(String ordId,Integer posNo){  super();  this.orderId=ordId;  this.positionNo=posNo;}  }
class C{  private String extractProjectNameFromUri(@NotNull String uri){  int indexFinishProjectName=uri.lastIndexOf(".");  int indexStartProjectName=uri.lastIndexOf("/") != -1 ? uri.lastIndexOf("/") + 1 : (uri.lastIndexOf(":") + 1);  if (indexStartProjectName != 0 && indexStartProjectName < indexFinishProjectName) {    return uri.substring(indexStartProjectName,indexFinishProjectName);  }  if (indexStartProjectName != 0) {    return uri.substring(indexStartProjectName);  }  return "";}  }
class C{  private void populateCinderAccessProfile(AccessProfile accessProfile,StorageProvider providerInfo){  accessProfile.setSystemId(providerInfo.getId());  accessProfile.setSystemClazz(providerInfo.getClass());  accessProfile.setIpAddress(providerInfo.getIPAddress());  accessProfile.setUserName(providerInfo.getUserName());  accessProfile.setPassword(providerInfo.getPassword());  accessProfile.setSystemType("cinder");  accessProfile.setPortNumber(providerInfo.getPortNumber());  accessProfile.setSslEnable(String.valueOf(providerInfo.getUseSSL()));}  }
class C{  public void add(byte val){  ensureCapacity(_pos + 1);  _data[_pos++]=val;}  }
class C{  public NbtInputStream(InputStream in){  super(in);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.392 -0500",hash_original_method="8E588067C2537376173067FE549DA446",hash_generated_method="2E6215BF8A605EB938132E1331B9ECE3") public ContentValues(int size){  mValues=new HashMap<String,Object>(size,1.0f);}  }
class C{  public static void writeAggregatedWorkplaceData2CSV(final AggregationObject[] jobClusterArray,Config config){  UrbanSimParameterConfigModuleV3 module=(UrbanSimParameterConfigModuleV3)config.getModule(UrbanSimParameterConfigModuleV3.GROUP_NAME);  try {    log.info("Initializing AnalysisWorkplaceCSVWriter ...");    BufferedWriter bwAggregatedWP=IOUtils.getBufferedWriter(module.getMATSim4OpusOutput() + FILE_NAME_AGGREGATED);    log.info("Writing (aggregated workplace) data into " + module.getMATSim4OpusOutput() + FILE_NAME_AGGREGATED+ " ...");    bwAggregatedWP.write(InternalConstants.ZONE_ID + "," + InternalConstants.PARCEL_ID+ ","+ InternalConstants.NEARESTNODE_ID+ ","+ InternalConstants.NEARESTNODE_X_COORD+ ","+ InternalConstants.NEARESTNODE_Y_COORD+ ","+ WORKPLACES_COUNT);    bwAggregatedWP.newLine();    for (int i=0; i < jobClusterArray.length; i++) {      bwAggregatedWP.write(jobClusterArray[i].getZoneID() + "," + jobClusterArray[i].getParcelID()+ ","+ jobClusterArray[i].getNearestNode().getId()+ ","+ jobClusterArray[i].getNearestNode().getCoord().getX()+ ","+ jobClusterArray[i].getNearestNode().getCoord().getY()+ ","+ jobClusterArray[i].getNumberOfObjects());      bwAggregatedWP.newLine();    }    bwAggregatedWP.flush();    bwAggregatedWP.close();    log.info("... done!");  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void shutdown(){  factory.shutdown();  List<String> directories=Arrays.asList(snapshotDir.getAbsolutePath(),logDir.getAbsolutePath());  CoreUtils.delete(scala.collection.JavaConversions.asScalaBuffer(directories).seq());}  }
class C{  public void testExclude() throws IOException {  CharArraySet exclusionSet=new CharArraySet(asSet("zaldiak"),false);  Analyzer a=new BasqueAnalyzer(BasqueAnalyzer.getDefaultStopSet(),exclusionSet);  checkOneTerm(a,"zaldiak","zaldiak");  checkOneTerm(a,"mendiari","mendi");  a.close();}  }
class C{  public void parseDTD(String publicID,IXMLReader reader,IXMLEntityResolver entityResolver,boolean external) throws Exception {  XMLUtil.skipWhitespace(reader,null);  int origLevel=reader.getStreamLevel();  for (; ; ) {    String str=XMLUtil.read(reader,'%');    char ch=str.charAt(0);    if (ch == '%') {      XMLUtil.processEntity(str,reader,this.parameterEntityResolver);      continue;    } else     if (ch == '<') {      this.processElement(reader,entityResolver);    } else     if (ch == ']') {      return;    } else {      XMLUtil.errorInvalidInput(reader.getSystemID(),reader.getLineNr(),str);    }    do {      ch=reader.read();      if (external && (reader.getStreamLevel() < origLevel)) {        reader.unread(ch);        return;      }    } while ((ch == ' ') || (ch == '\t') || (ch == '\n')|| (ch == '\r'));    reader.unread(ch);  }}  }
class C{  public ToAttributedValueConverter(final Class<?> type,final Mapper mapper,final ReflectionProvider reflectionProvider,final ConverterLookup lookup){  this(type,mapper,reflectionProvider,lookup,null,null);}  }
class C{  private boolean alreadyExists(StorageSystemType type){  if (existingTypes.containsKey(type.getStorageTypeName())) {    StorageSystemType existingType=existingTypes.get(type.getStorageTypeName());    if (existingType.equals(type)) {      return true;    } else {      dbClient.removeObject(existingType);      existingTypes.remove(existingType.getStorageTypeName());    }  }  return false;}  }
class C{  protected void free(){  List<Component> components;synchronized (this.components) {    components=getComponents();    this.components.clear();  }  for (  Component component : components)   component.free();}  }
class C{  public static void fence(){  if (VM.VerifyAssertions && VM.runningVM) {    VM._assert(VM.NOT_REACHED);  }}  }
class C{  protected void putSheetSets(Sheet sheet,Class c,boolean hidden){  Sheet.Set set=Sheet.createPropertiesSet();  set.setDisplayName(String.format("%s - %s",c.getSimpleName(),c.getPackage().getName()));  set.setName(c.getName());  set.setHidden(hidden);  createFields(c,set,control);  Class parent=c.getSuperclass();  if (parent != null && !parent.equals(Object.class)) {    putSheetSets(sheet,parent,true);  }  sheet.put(set);}  }
class C{  private boolean contains(int s){  return (indexOf(s,0) >= 0);}  }
class C{  public WindowEvent(Window source,int id,Window opposite,int oldState,int newState){  super(source,id);  this.opposite=opposite;  this.oldState=oldState;  this.newState=newState;}  }
class C{  public void pushLoop(List<String> labelNames){  pushState();  continueLabel=new Label();  breakLabel=new Label();  if (labelNames != null) {    for (    String labelName : labelNames) {      initLoopLabels(labelName);    }  }}  }
class C{  BigDecimal calculateDelivery(final CustomerOrderDelivery orderDelivery){  if (orderDelivery != null && orderDelivery.getPrice() != null) {    return orderDelivery.getPrice().setScale(Constants.DEFAULT_SCALE,BigDecimal.ROUND_HALF_UP);  }  return Total.ZERO;}  }
class C{  protected Iterator createValuesIterator(){  if (size() == 0) {    return EmptyIterator.INSTANCE;  }  return new ValuesIterator(this);}  }
class C{  private void addMapMarkers(GoogleMap googleMap){  googleMap.clear();  int count=markers.size();  publicMarkerIds=new HashMap<>();  for (int i=0; i < count; i++) {    LatLng latLng;    String publicId;    ReadableMap marker=markers.getMap(i);    if (marker.hasKey("latitude") && marker.hasKey("longitude") && marker.hasKey("publicId")) {      latLng=new LatLng(marker.getDouble("latitude"),marker.getDouble("longitude"));      publicId=marker.getString("publicId");    } else {      continue;    }    if (marker.hasKey("icon")) {      ReadableMap iconMeta=marker.getMap("icon");      Uri uri=Uri.parse(iconMeta.getString("uri"));      markerWithCustomIcon(googleMap,latLng,uri,publicId);    } else     if (marker.hasKey("hexColor")) {      markerWithColoredIcon(googleMap,latLng,publicId,marker.getString("hexColor"));    } else {      markerWithDefaultIcon(googleMap,latLng,publicId);    }  }}  }
class C{  public static void report(){  if (!booted)   return;  ControllerThread.report();  RuntimeMeasurements.report();  for (Enumeration<Organizer> e=organizers.elements(); e.hasMoreElements(); ) {    Organizer organizer=e.nextElement();    organizer.report();  }  if (options.FINAL_REPORT_LEVEL >= 2) {    EdgeCounts.dumpCounts();    dcg.dumpGraph();  }  if (options.REPORT_INTERRUPT_STATS) {    VM.sysWriteln("Timer Interrupt and Listener Stats");    VM.sysWriteln("\tTotal number of clock ticks ",RVMThread.timerTicks);    VM.sysWriteln("\tController clock ",controllerClock);    VM.sysWriteln("\tNumber of method samples taken ",(int)methodSamples.getTotalNumberOfSamples());  }}  }
class C{  public ClassFileManager(StandardJavaFileManager standardManager){  super(standardManager);}  }
class C{  public void add(RecyclerDivider header){  this.myAppHeader=header;  notifyBinderDataSetChanged();}  }
class C{  public static File toFile(URL url){  if (url == null || !"file".equalsIgnoreCase(url.getProtocol())) {    return null;  } else {    String filename=url.getFile().replace('/',File.separatorChar);    filename=decodeUrl(filename);    return new File(filename);  }}  }
class C{  public static boolean isOnSegment(Geo a,Geo b,Geo i){  return ((a.distance(i) < a.distance(b)) && (b.distance(i) < b.distance(a)));}  }
class C{  public boolean hasConnection(IOFConnectionBackend connection){  if (this.mainConnection.equals(connection) || this.auxConnections.get(connection.getAuxId()) == connection) {    return true;  } else {    return false;  }}  }
class C{  public GridResourceSpringBeanInjector(ApplicationContext springCtx){  this.springCtx=springCtx;}  }
class C{  @Override public ScheduledFuture<?> addScheduledTask(Runnable task,long initialDelay,long delay,TimeUnit unit){  return null;}  }
class C{  public boolean with_rectarray(){  return soot.PhaseOptions.getBoolean(options,"with-rectarray");}  }
class C{  private Volume prepareVPLEXBackendVolumeFromSnapshot(BlockSnapshot snapshot,Volume sourceVolume){  Volume volume=new Volume();  volume.setId(URIUtil.createId(Volume.class));  volume.setLabel(snapshot.getLabel());  volume.setWWN(snapshot.getWWN());  volume.setNativeId(snapshot.getNativeId());  volume.setNativeGuid(snapshot.getNativeGuid());  volume.setAlternateName(snapshot.getAlternateName());  volume.setDeviceLabel(snapshot.getDeviceLabel());  volume.setProvisionedCapacity(snapshot.getProvisionedCapacity());  volume.setAllocatedCapacity(snapshot.getAllocatedCapacity());  volume.setVirtualArray(snapshot.getVirtualArray());  volume.setProject(snapshot.getProject());  volume.setStorageController(snapshot.getStorageController());  volume.setSystemType(snapshot.getSystemType());  StringSet protocols=new StringSet();  protocols.addAll(snapshot.getProtocol());  volume.setProtocol(protocols);  volume.addInternalFlags(DataObject.Flag.INTERNAL_OBJECT);  volume.setOpStatus(new OpStatusMap());  volume.setTenant(sourceVolume.getTenant());  volume.setCapacity(sourceVolume.getCapacity());  volume.setThinlyProvisioned(sourceVolume.getThinlyProvisioned());  volume.setVirtualPool(sourceVolume.getVirtualPool());  volume.setAutoTieringPolicyUri(sourceVolume.getAutoTieringPolicyUri());  _dbClient.createObject(volume);  return volume;}  }
class C{  public int nextNode(){  if (m_foundLast)   return DTM.NULL;  int next;  org.apache.xpath.VariableStack vars;  int savedStart;  if (-1 != m_stackFrame) {    vars=m_execContext.getVarStack();    savedStart=vars.getStackFrame();    vars.setStackFrame(m_stackFrame);  } else {    vars=null;    savedStart=0;  }  try {    if (DEBUG)     System.out.println("m_pattern" + m_pattern.toString());    do {      next=getNextNode();      if (DTM.NULL != next) {        if (DTMIterator.FILTER_ACCEPT == acceptNode(next,m_execContext))         break; else         continue;      } else       break;    } while (next != DTM.NULL);    if (DTM.NULL != next) {      if (DEBUG) {        System.out.println("next: " + next);        System.out.println("name: " + m_cdtm.getNodeName(next));      }      incrementCurrentPos();      return next;    } else {      m_foundLast=true;      return DTM.NULL;    }  }  finally {    if (-1 != m_stackFrame) {      vars.setStackFrame(savedStart);    }  }}  }
class C{  public void send(DatagramPacket p) throws IOException {  socketDelegate.send(p);}  }
class C{  @SuppressWarnings("unchecked") public static void addToNamedList(Node nd,NamedList nlst,List arr){  if (nd.getNodeType() != Node.ELEMENT_NODE)   return;  final String type=nd.getNodeName();  final String name=getAttr(nd,"name");  Object val=null;  if ("lst".equals(type)) {    val=childNodesToNamedList(nd);  } else   if ("arr".equals(type)) {    val=childNodesToList(nd);  } else {    final String textValue=getText(nd);    try {      if ("str".equals(type)) {        val=textValue;      } else       if ("int".equals(type)) {        val=Integer.valueOf(textValue);      } else       if ("long".equals(type)) {        val=Long.valueOf(textValue);      } else       if ("float".equals(type)) {        val=Float.valueOf(textValue);      } else       if ("double".equals(type)) {        val=Double.valueOf(textValue);      } else       if ("bool".equals(type)) {        val=StrUtils.parseBool(textValue);      }    } catch (    NumberFormatException nfe) {      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Value " + (null != name ? ("of '" + name + "' ") : "") + "can not be parsed as '"+ type+ "': \""+ textValue+ "\"",nfe);    }  }  if (nlst != null)   nlst.add(name,val);  if (arr != null)   arr.add(val);}  }
class C{  public BufferedRandomAccessFile(String name,String mode) throws IOException {  this(new File(name),mode);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append("[\n");  sb.append(super.toString());  sb.append("  Maximum Path Length: " + maxPathLength + "\n");  sb.append("]\n");  return sb.toString();}  }
class C{  @NotNull private static IElementType appendedBlockParse(@NotNull PsiBuilder builder,@NotNull GroovyParser parser){  return OpenOrClosableBlock.parseClosableBlock(builder,parser);}  }
class C{  private void clear(){  append("clear()");  int n=data.getRowCount();  for (int i=0; i < n; i++) {    data.setRowIndex(i);    checked.setSelected(false);  }}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMAltGlyphDefElement(prefix,(AbstractDocument)doc);}  }
class C{  public ExtractorException(String msg,Throwable cause){  this(msg,cause,null);}  }
class C{  public void remove_apps(List<InstalledApp> to_remove){  _app_adapter.remove_apps(to_remove);}  }
class C{  public WorkingDayMovement(WorkingDayMovement proto){  super(proto);  busTravellerMM=new BusTravellerMovement(proto.busTravellerMM);  workerMM=new OfficeActivityMovement(proto.workerMM);  homeMM=new HomeActivityMovement(proto.homeMM);  eveningActivityMovement=new EveningActivityMovement(proto.eveningActivityMovement);  carMM=new CarMovement(proto.carMM);  ownCarProb=proto.ownCarProb;  if (rng.nextDouble() < ownCarProb) {    movementUsedForTransfers=carMM;  } else {    movementUsedForTransfers=busTravellerMM;  }  doEveningActivityProb=proto.doEveningActivityProb;  setCurrentMovementModel(homeMM);  mode=proto.mode;}  }
class C{  public void transformPoints(float[] xValues,float[] yValues){  int n=xValues.length;  for (int i=0; i < n; i++) {    float x=xValues[i];    float y=yValues[i];    float denominator=a13 * x + a23 * y + a33;    xValues[i]=(a11 * x + a21 * y + a31) / denominator;    yValues[i]=(a12 * x + a22 * y + a32) / denominator;  }}  }
class C{  public char next(){  return iter.next();}  }
class C{  static public void initLogging(String controlfile){  initLog4J(controlfile);}  }
class C{  public boolean isDragEnabled(){  return mDragEnabled;}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  public static BranchCoverageTestFitness createRootBranchTestFitness(String className,String method){  return new BranchCoverageTestFitness(new BranchCoverageGoal(className,method.substring(method.lastIndexOf(".") + 1)));}  }
class C{  private boolean isMajorTick(double tickValue){  if (!scale.isLogScaleEnabled()) {    return true;  }  if (Math.log10(tickValue) % 1 == 0) {    return true;  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.254 -0500",hash_original_method="6EDDB7210B9771B4B6C2F63871114167",hash_generated_method="EBF0668C91DEC83061D2B5D5D4A3B069") public int authinfoUser(String username) throws IOException {  String userParameter="USER " + username;  return sendCommand(NNTPCommand.AUTHINFO,userParameter);}  }
class C{  public void closeCurrentDocument(){  df.count(termsInThisDocument);  termsInThisDocument=null;}  }
class C{  public TechnicalServiceOperationException(String message,Object[] params,Throwable t){  super(message,t,params);}  }
class C{  public CatalogImageRestRep update(URI id,CatalogImageUpdateParam input){  return client.put(CatalogImageRestRep.class,input,getIdUrl(),id);}  }
class C{  @Override public boolean contains(Point2D.Double p){  return getHitShape().contains(p);}  }
class C{  public void dispose(){  if (isVisible()) {    setVisible(false);  }  if (isSelected()) {    try {      setSelected(false);    } catch (    PropertyVetoException pve) {    }  }  if (!isClosed) {    firePropertyChange(IS_CLOSED_PROPERTY,Boolean.FALSE,Boolean.TRUE);    isClosed=true;  }  fireInternalFrameEvent(InternalFrameEvent.INTERNAL_FRAME_CLOSED);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.REACTION_FIRED__REACTION:    return reaction != null;}return super.eIsSet(featureID);}  }
class C{  public T caseReferencingElement_IM(ReferencingElement_IM object){  return null;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMRadialGradientElement(prefix,(AbstractDocument)doc);}  }
class C{  public static void checkAndSetStringArrayParam(Element context,AVList params,String paramKey,String paramName,XPath xpath){  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramName == null) {    String message=Logging.getMessage("nullValue.ParameterNameIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Object o=params.getValue(paramKey);  if (o == null) {    String[] strings=getTextArray(context,paramName,xpath);    if (strings != null && strings.length > 0)     params.setValue(paramKey,strings);  }}  }
class C{  public void txCommitAsync(final long txId,final long futId){  final Transaction asyncTx=(Transaction)tx(txId).withAsync();  asyncTx.commit();  listenAndNotifyIntFuture(futId,asyncTx);}  }
class C{  private void adaptCategories(List<CategoryDTO> content,List<VoContent> voContent){  for (  CategoryDTO dto : content) {    VoContent voCategory=voAssemblySupport.assembleVo(VoContent.class,CategoryDTO.class,new VoContent(),dto);    voContent.add(voCategory);    voCategory.setChildren(new ArrayList<VoContent>(dto.getChildren().size()));    adaptCategories(dto.getChildren(),voCategory.getChildren());  }}  }
class C{  @Override public DeleteData visit(final ASTDeleteData node,final Object data) throws VisitorException {  final DeleteData op=new DeleteData();  op.setData(doUnparsedQuadsDataBlock(node,data,false,false));  return op;}  }
class C{  public SearchRequest(ActionRequest request){  super(request);}  }
class C{  public void addNamedGraph(IRI graphURI){  namedGraphs.add(graphURI);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public boolean writeCharacteristic(String address,String serviceUUID,String characteristicUUID,byte[] value){  BluetoothGatt bluetoothGatt=mBluetoothGattMap.get(address);  if (bluetoothGatt != null) {    BluetoothGattService service=bluetoothGatt.getService(UUID.fromString(serviceUUID));    BluetoothGattCharacteristic characteristic=service.getCharacteristic(UUID.fromString(characteristicUUID));    characteristic.setValue(value);    return bluetoothGatt.writeCharacteristic(characteristic);  }  return false;}  }
class C{  public static CountProjectionExpression countDistinct(String propertyName){  return new CountProjectionExpression(getPropExpr(propertyName),true);}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  if ((len % frameSize) != 0) {    len-=(len % frameSize);    if (len == 0) {      return 0;    }  }  if (frameLength != AudioSystem.NOT_SPECIFIED) {    if (framePos >= frameLength) {      return -1;    } else {      if ((len / frameSize) > (frameLength - framePos)) {        len=(int)(frameLength - framePos) * frameSize;      }    }  }  int bytesRead=0;  int thisOff=off;  if (pushBackLen > 0 && len >= pushBackLen) {    System.arraycopy(pushBackBuffer,0,b,off,pushBackLen);    thisOff+=pushBackLen;    len-=pushBackLen;    bytesRead+=pushBackLen;    pushBackLen=0;  }  int thisBytesRead=stream.read(b,thisOff,len);  if (thisBytesRead == -1) {    return -1;  }  if (thisBytesRead > 0) {    bytesRead+=thisBytesRead;  }  if (bytesRead > 0) {    pushBackLen=bytesRead % frameSize;    if (pushBackLen > 0) {      if (pushBackBuffer == null) {        pushBackBuffer=new byte[frameSize];      }      System.arraycopy(b,off + bytesRead - pushBackLen,pushBackBuffer,0,pushBackLen);      bytesRead-=pushBackLen;    }    framePos+=bytesRead / frameSize;  }  return bytesRead;}  }
class C{  public Response(final String status,final String mimeType,final String txt){  this.status=status;  this.mimeType=mimeType;  this.data=new ByteArrayInputStream(txt == null ? new byte[]{} : txt.getBytes());}  }
class C{  public void unregisterClientMembershipListener(){  ClientMembership.unregisterClientMembershipListener(this.clientMembershipListener);}  }
class C{  public byte[] encodeFrame(){  int length=this.payload.length + frameLengthOverhead;  if (this.payload.length > 65535) {    length+=8;  } else   if (this.payload.length >= 126) {    length+=2;  }  ByteBuffer buffer=ByteBuffer.allocate(length);  appendFinAndOpCode(buffer,this.opcode,this.fin);  byte mask[]=generateMaskingKey();  appendLengthAndMask(buffer,this.payload.length,mask);  for (int i=0; i < this.payload.length; i++) {    buffer.put((byte)(this.payload[i]^=mask[i % 4]));  }  buffer.flip();  return buffer.array();}  }
class C{  private void emitElement(SourceContext<WindowedValue<OutputT>> ctx,UnboundedSource.UnboundedReader<OutputT> reader){synchronized (ctx.getCheckpointLock()) {    OutputT item=reader.getCurrent();    Instant timestamp=reader.getCurrentTimestamp();    WindowedValue<OutputT> windowedValue=WindowedValue.of(item,timestamp,GlobalWindow.INSTANCE,PaneInfo.NO_FIRING);    ctx.collectWithTimestamp(windowedValue,timestamp.getMillis());  }}  }
class C{  public Quaterniond rotateZ(double angle){  return rotateZ(angle,this);}  }
class C{  public void deleteNote(Note note){  deleteNote(note.getId());}  }
class C{  public void mergePaymentRequest(PaymentProduct paymentProduct){  if (paymentProduct == null) {    throw new InvalidParameterException("Error merging PaymentRequest, paymentProduct may not be null");  }  Map<String,String> newFieldValues=new HashMap<String,String>();  if (paymentProduct.getPaymentProductFields() != null) {    for (    PaymentProductField field : paymentProduct.getPaymentProductFields()) {      for (      Entry<String,String> valueEntry : fieldValues.entrySet()) {        if (field.getId().equals(valueEntry.getKey())) {          newFieldValues.put(valueEntry.getKey(),valueEntry.getValue());        }      }    }  }  fieldValues=newFieldValues;}  }
class C{  public void updateContent(byte[] content) throws ForbiddenException, ServerException {  updateContent(new ByteArrayInputStream(content));}  }
class C{  public static void openBoard(ChessBoardController controller){  openBoard(controller,false);}  }
class C{  public static File streamToFile(final InputStream stream,final File file) throws IOException {  if (stream == null) {    throw new NullPointerException("null stream given");  }  if (file == null) {    throw new NullPointerException("null file given");  }  try (FileOutputStream out=new FileOutputStream(file)){    final byte[] b=new byte[FileUtils.BUFFER_SIZE];    int len=stream.read(b);    while (len != -1) {      out.write(b,0,len);      len=stream.read(b);    }  }   return file;}  }
class C{  public Iterator<String> iterateResources(){  return resources.iterator();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrcreatetextnode2.class,args);}  }
class C{  private void procesarCamposFicha(String idElemento,short tipoElemento,CamposFicha camposFicha,String idTabla,String breadCrumbPadre) throws TransferenciaElectronicaException {  if (logger.isDebugEnabled()) {    logger.debug("Inicio procesado de los campos ficha del elemento " + idElemento + " tipo = "+ tipoElemento);  }  if (camposFicha != null) {    List<ICampoFicha> listaCampos=camposFicha.getCamposFicha();    procesarElementos(idElemento,tipoElemento,listaCampos,idTabla,0,breadCrumbPadre);  }  if (logger.isDebugEnabled()) {    logger.debug("Fin procesado de los campos ficha del elemento " + idElemento + " tipo = "+ tipoElemento);  }}  }
class C{  @Override protected Address advanceToBlock(Address block,int sizeClass){  if (HEADER_MARK_BITS) {    if (inMSCollection)     markBlock(block);  }  if (LAZY_SWEEP) {    return makeFreeList(block,sizeClass);  } else {    return getFreeList(block);  }}  }
class C{  public int writeLongGamma(long x) throws IOException {  if (x < 0)   throw new IllegalArgumentException("The argument " + x + " is negative");  if (x < MAX_PRECOMPUTED)   return writeInt(GAMMA[(int)x],GAMMA[(int)x] >>> 26);  final int msb=Fast.mostSignificantBit(++x);  final int l=writeUnary(msb);  return l + (msb != 0 ? writeLong(x,msb) : 0);}  }
class C{  public Object object(){  return m_origObj;}  }
class C{  public boolean isPostRequest(){  return postRequest;}  }
class C{  public void complete(DbClient dbClient,Operation.Status status,ServiceCoded coded) throws DeviceControllerException {  _log.info("SimpleTaskCompleter: set status to {}",status);  if (isNotifyWorkflow()) {    updateWorkflowStatus(status,coded);  }  setStatus(dbClient,status,coded);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double dist;  double gridRes;  double diagGridRes;  double maxSlope;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    gridRes=DEM.getCellSizeX();    diagGridRes=gridRes * Math.sqrt(2);    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setZUnits("dimensionless");    Random generator=new Random(987654);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          dist=diagGridRes;          maxSlope=-99999999;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 != noData) {switch (i) {case 1:                slope=z - z2;              break;case 3:            slope=z - z2;          break;case 5:        slope=z - z2;      break;case 7:    slope=z - z2;  break;default :slope=1 / (2 - generator.nextDouble()) * (z - z2);}if (slope > maxSlope) {maxSlope=slope;flowDir=1 << i;}}if (dist == gridRes) {dist=diagGridRes;} else {dist=gridRes;}}if (maxSlope > 0) {output.setValue(row,col,flowDir);} else {output.setValue(row,col,0);}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());DEM.close();output.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public E push(E object){  addElement(object);  return object;}  }
class C{  private static void appendDoubleType(StringBuilder sb){  sb.append("DOUBLE PRECISION");}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.199 -0400",hash_original_method="3B9DBC9F4DEAB29046F607A2948952BF",hash_generated_method="FF581AA731BCF697929EE517E6C3BE7C") public static void write(char[] data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  @Override public DummyProjectBuilder withWorkspaceId(String workspaceId){  dummyProject.setWorkspaceId(workspaceId);  return this;}  }
class C{  public void writeRawLittleEndian32(final int value) throws IOException {  writeRawByte((value) & 0xFF);  writeRawByte((value >> 8) & 0xFF);  writeRawByte((value >> 16) & 0xFF);  writeRawByte((value >> 24) & 0xFF);}  }
class C{  private static <E>ListIterator<E> constrainedListIterator(ListIterator<E> listIterator,Constraint<? super E> constraint){  return new ConstrainedListIterator<E>(listIterator,constraint);}  }
class C{  void trace(String s){  if (trace) {    System.out.println(s);  }}  }
class C{  public void updateLists(){  Fragment fragmentList=getSupportFragmentManager().findFragmentById(R.id.fragment_main);  if (fragmentList instanceof MusicContainerListFragment) {    MusicContainerListFragment musicTrackListFragment=(MusicContainerListFragment)fragmentList;    musicTrackListFragment.updateListView();  }}  }
class C{  public final int readLEInt(byte[] byteArray){  return (byteArray[3]) << 24 | (byteArray[2] & 0xff) << 16 | (byteArray[1] & 0xff) << 8 | (byteArray[0] & 0xff);}  }
class C{  public T caseIf(If object){  return null;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public TField createTField(){  TFieldImpl tField=new TFieldImpl();  return tField;}  }
class C{  public static boolean isXML11Space(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_SPACE) != 0);}  }
class C{  public List<PropertyWrapper> extractProperties(Class<?> clazz){  if (propertyCache.containsKey(clazz.getName())) {    return cloneProperties(propertyCache.get(clazz.getName()));  }  List<PropertyWrapper> properties=new ArrayList<PropertyWrapper>();  for (  Method method : clazz.getMethods()) {    if (method.getName().startsWith("get")) {      try {        if (method.isAnnotationPresent(EditableProperty.class) && !method.isAnnotationPresent(Deprecated.class)) {          EditableProperty annotation=method.getAnnotation(EditableProperty.class);          String name;          if (annotation.name().equals("")) {            name=method.getName().substring(3);          } else {            name=annotation.name();          }          IPropertyValidator validator=getPropertyValidator(annotation.validatorClass());          Method setter=clazz.getMethod("set" + method.getName().substring(3),method.getReturnType());          PropertyWrapper property=new PropertyWrapper(name,method.getReturnType(),method.getName(),setter.getName(),annotation.defaultable(),validator);          properties.add(property);        }      } catch (      NoSuchMethodException e) {        LOG.debug("No matching setter found for \"" + method.getName() + "\". Skipping...");      }    }  }  propertyCache.put(clazz.getName(),properties);  return cloneProperties(properties);}  }
class C{  public JavaClassObject(String name,Kind kind){  super(URI.create("string:///" + name.replace('.','/') + kind.extension),kind);}  }
class C{  public boolean hasLabel(){  return getLabel() != null;}  }
class C{  public static long stringToTimestampInSeconds(String s,DateFormat formatter){  return stringToTimestampInMilliseconds(s,formatter) / 1000;}  }
class C{  private void checkObjectPrefix(String prefix) throws InvalidObjectPrefixException {  if (prefix.length() > 1024) {    throw new InvalidObjectPrefixException(prefix,"Object prefix cannot be greater than 1024 characters.");  }  try {    prefix.getBytes("UTF-8");  } catch (  java.io.UnsupportedEncodingException exc) {    throw new InvalidObjectPrefixException(prefix,"Object prefix cannot be properly encoded to utf-8.");  }}  }
class C{  public Tree<String> extractBestViterbiParse(int gState,int gp,int start,int end,List<String> sentence){  double bestScore=iScore[start][end][gState][gp];  String goalStr=(String)tagNumberer.object(gState);  if (goalStr.endsWith("^g"))   goalStr=goalStr.substring(0,goalStr.length() - 2);  if (outputSub)   goalStr=goalStr + "-" + gp;  if (outputScore)   goalStr=goalStr + " " + bestScore;  if (end - start == 1) {    if (!grammarTags[gState]) {      List<Tree<String>> child=new ArrayList<Tree<String>>();      child.add(new Tree<String>(sentence.get(start)));      return new Tree<String>(goalStr,child);    } else {      double veryBestScore=Double.NEGATIVE_INFINITY;      int newIndex=-1;      int newCp=-1;      UnaryRule[] unaries=grammar.getClosedViterbiUnaryRulesByParent(gState);      double childScore=bestScore;      for (int r=0; r < unaries.length; r++) {        UnaryRule ur=unaries[r];        int cState=ur.childState;        if (cState == gState)         continue;        if (grammarTags[cState])         continue;        if (!allowedStates[start][end][cState])         continue;        double[][] scores=ur.getScores2();        for (int cp=0; cp < scores.length; cp++) {          if (scores[cp] == null)           continue;          double ruleScore=iScore[start][end][cState][cp] + scores[cp][gp];          if (ruleScore >= veryBestScore) {            childScore=iScore[start][end][cState][cp];            veryBestScore=ruleScore;            newIndex=cState;            newCp=cp;          }        }      }      List<Tree<String>> child1=new ArrayList<Tree<String>>();      child1.add(new Tree<String>(sentence.get(start)));      String goalStr1=(String)tagNumberer.object(newIndex);      if (outputSub)       goalStr1=goalStr1 + "-" + newCp;      if (outputScore)       goalStr1=goalStr1 + " " + childScore;      if (goalStr1 == null)       System.out.println("goalStr1==null with newIndex==" + newIndex + " goalStr=="+ goalStr);      List<Tree<String>> child=new ArrayList<Tree<String>>();      child.add(new Tree<String>(goalStr1,child1));      return new Tree<String>(goalStr,child);    }  }  BinaryRule[] parentRules=grammar.splitRulesWithP(gState);  for (int split=start + 1; split < end; split++) {    for (int i=0; i < parentRules.length; i++) {      BinaryRule br=parentRules[i];      int lState=br.leftChildState;      if (iScore[start][split][lState] == null)       continue;      int rState=br.rightChildState;      if (iScore[split][end][rState] == null)       continue;      double[][][] scores=br.getScores2();      for (int lp=0; lp < scores.length; lp++) {        for (int rp=0; rp < scores[lp].length; rp++) {          if (scores[lp][rp] == null)           continue;          double score=scores[lp][rp][gp] + iScore[start][split][lState][lp] + iScore[split][end][rState][rp];          if (matches(score,bestScore)) {            Tree<String> leftChildTree=extractBestViterbiParse(lState,lp,start,split,sentence);            Tree<String> rightChildTree=extractBestViterbiParse(rState,rp,split,end,sentence);            List<Tree<String>> children=new ArrayList<Tree<String>>();            children.add(leftChildTree);            children.add(rightChildTree);            Tree<String> result=new Tree<String>(goalStr,children);            return result;          }        }      }    }  }  UnaryRule[] unaries=grammar.getClosedViterbiUnaryRulesByParent(gState);  for (int r=0; r < unaries.length; r++) {    UnaryRule ur=unaries[r];    int cState=ur.childState;    if (cState == gState)     continue;    if (iScore[start][end][cState] == null)     continue;    double[][] scores=ur.getScores2();    for (int cp=0; cp < scores.length; cp++) {      if (scores[cp] == null)       continue;      double score=scores[cp][gp] + iScore[start][end][cState][cp];      if (matches(score,bestScore)) {        Tree<String> childTree=extractBestViterbiParse(cState,cp,start,end,sentence);        List<Tree<String>> children=new ArrayList<Tree<String>>();        children.add(childTree);        Tree<String> result=new Tree<String>(goalStr,children);        return result;      }    }  }  System.err.println("Warning: could not find the optimal way to build state " + goalStr + " spanning from "+ start+ " to "+ end+ ".");  return new Tree<String>("ROOT");}  }
class C{  public JSONObject put(String key,int value) throws JSONException {  this.put(key,new Integer(value));  return this;}  }
class C{  protected void fireDOMFocusOutEvent(EventTarget target,EventTarget relatedTarget){  DocumentEvent docEvt=(DocumentEvent)((Element)target).getOwnerDocument();  DOMUIEvent uiEvt=(DOMUIEvent)docEvt.createEvent("UIEvents");  uiEvt.initUIEventNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMFocusOut",true,false,null,0);  target.dispatchEvent(uiEvt);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.N4_METHOD_DECLARATION__BODY:    setBody((Block)newValue);  return;case N4JSPackage.N4_METHOD_DECLARATION__LOK:set_lok((LocalArgumentsVariable)newValue);return;case N4JSPackage.N4_METHOD_DECLARATION__DEFINED_TYPE:setDefinedType((Type)newValue);return;case N4JSPackage.N4_METHOD_DECLARATION__FPARS:getFpars().clear();getFpars().addAll((Collection<? extends FormalParameter>)newValue);return;case N4JSPackage.N4_METHOD_DECLARATION__RETURN_TYPE_REF:setReturnTypeRef((TypeRef)newValue);return;case N4JSPackage.N4_METHOD_DECLARATION__GENERATOR:setGenerator((Boolean)newValue);return;case N4JSPackage.N4_METHOD_DECLARATION__DECLARED_ASYNC:setDeclaredAsync((Boolean)newValue);return;case N4JSPackage.N4_METHOD_DECLARATION__TYPE_VARS:getTypeVars().clear();getTypeVars().addAll((Collection<? extends TypeVariable>)newValue);return;case N4JSPackage.N4_METHOD_DECLARATION__DECLARED_TYPE_REF:setDeclaredTypeRef((TypeRef)newValue);return;case N4JSPackage.N4_METHOD_DECLARATION__BOGUS_TYPE_REF:setBogusTypeRef((TypeRef)newValue);return;case N4JSPackage.N4_METHOD_DECLARATION__DECLARED_NAME:setDeclaredName((LiteralOrComputedPropertyName)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private static Pair<String,String> generateSignMask(final ITranslationEnvironment environment,long offset,final String value,final OperandSize size,final List<ReilInstruction> instructions){  final String msbMask=String.valueOf(TranslationHelpers.getMsbMask(size));  final String shiftValue=String.valueOf(TranslationHelpers.getShiftMsbLsbMask(size));  final String maskedMsb=environment.getNextVariableString();  final String msbInLsb=environment.getNextVariableString();  final String signMask=environment.getNextVariableString();  instructions.add(ReilHelpers.createAnd(offset++,size,value,size,msbMask,size,maskedMsb));  instructions.add(ReilHelpers.createBsh(offset++,size,maskedMsb,size,shiftValue,size,msbInLsb));  instructions.add(ReilHelpers.createSub(offset++,size,"0",size,msbInLsb,size,signMask));  return new Pair<String,String>(msbInLsb,signMask);}  }
class C{  public void removeAllMeta(){synchronized (this) {    data=null;  }}  }
class C{  @Override public final int computeHashCode(float val){  return HashFunctions.hash(val);}  }
class C{  public FailedSynchronizationException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  void readToData(boolean returnOnYield) throws IOException {  InputStream is=getInputStream();  if (is == null)   return;  for (int tag=is.read(); tag >= 0; tag=is.read()) {switch (tag) {case 'Y':      server.freeReadLock();    if (returnOnYield)     return;  server.readChannel(channel);break;case 'Q':server.freeReadLock();this.is=null;this.server=null;return;case 'U':this.url=readUTF();break;case 'D':chunkLength=(is.read() << 8) + is.read();return;default :readTag(tag);break;}}}  }
class C{  public EagerI18NBundleParameter(){  this(null,null);}  }
class C{  public InterfaceScopeItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @SuppressWarnings("unchecked") private void vsdecoderManagerEventAction(VSDManagerEvent evt){  if (evt.getType() == VSDManagerEvent.EventType.PROFILE_LIST_CHANGE) {    log.debug("Received Profile List Change Event");    updateProfileList((ArrayList<String>)evt.getData());  }}  }
class C{  public TIntByteHashMap(){  super();}  }
class C{  private boolean checkPlayServices(){  GoogleApiAvailability apiAvailability=GoogleApiAvailability.getInstance();  int resultCode=apiAvailability.isGooglePlayServicesAvailable(this);  if (resultCode != ConnectionResult.SUCCESS) {    if (apiAvailability.isUserResolvableError(resultCode)) {      apiAvailability.getErrorDialog(this,resultCode,9000).show();    } else {      Log.i("Glucosio","This device is not supported.");      showErrorDialogPlayServices();    }    return false;  }  return true;}  }
class C{  public Fits(URL myURL) throws FitsException {  try {    streamInit(FitsUtil.getURLStream(myURL,0));  } catch (  IOException e) {    throw new FitsException("Unable to open input from URL:" + myURL,e);  }}  }
class C{  default void onEditorTextChange(String oldText,String newText){}  }
class C{  public float[] filter(float[] samples){  float accumulator;  for (int y=0; y < samples.length; y+=2) {    insert(samples[y]);    insert(samples[y + 1]);    accumulator=0.0f;    int index=mBufferPointer / 2;    for (int x=0; x < mHilbertFilter.length / 2; x+=2) {      accumulator+=mHilbertFilter[x] * (mBuffer[mIndexMap[index][x + 1]] - mBuffer[mIndexMap[index][x]]);    }    if (mInvertFlag) {      samples[y]=-(mBuffer[mIndexMap[index][mCenterTapIndex]]);      samples[y + 1]=-accumulator;    } else {      samples[y]=mBuffer[mIndexMap[index][mCenterTapIndex]];      samples[y + 1]=accumulator;    }    mInvertFlag=!mInvertFlag;  }  return samples;}  }
class C{  public DataLogicAdmin(){}  }
class C{  public BasicNurbsSurface(ControlNet net,KnotVector u,KnotVector v) throws IllegalArgumentException {  cpnet=net;  uKnots=u;  vKnots=v;  validate();}  }
class C{  public NoFeedbackTurnoutOperationConfig(TurnoutOperation op){  super(op);}  }
class C{  ImpreciseCutoverField(DateTimeField julianField,DateTimeField gregorianField,long cutoverMillis){  this(julianField,gregorianField,null,cutoverMillis,false);}  }
class C{  public int nextToken(){  while (index < length && Character.isWhitespace(expr[index])) {    index++;  }  tokenVal=null;  if (index == length)   return TOKEN_END;  int start=index;  char currentChar=expr[index];  char nextChar=(char)0;  index++;  if (index < length)   nextChar=expr[index];switch (currentChar) {case '(':    return TOKEN_LBRACE;case ')':  return TOKEN_RBRACE;case '=':return TOKEN_EQ;case '!':if (nextChar == '=') {index++;return TOKEN_NOT_EQ;}return TOKEN_NOT;case '|':if (nextChar == '|') {index++;return TOKEN_OR;}break;case '&':if (nextChar == '&') {index++;return TOKEN_AND;}break;case '>':if (nextChar == '=') {index++;return TOKEN_GE;}return TOKEN_GT;case '<':if (nextChar == '=') {index++;return TOKEN_LE;}return TOKEN_LT;default :break;}int end=index;if (currentChar == '"' || currentChar == '\'') {char endChar=currentChar;boolean escaped=false;start++;for (; index < length; index++) {if (expr[index] == '\\' && !escaped) {escaped=true;continue;}if (expr[index] == endChar && !escaped) break;escaped=false;}end=index;index++;} else if (currentChar == '/') {char endChar=currentChar;boolean escaped=false;for (; index < length; index++) {if (expr[index] == '\\' && !escaped) {escaped=true;continue;}if (expr[index] == endChar && !escaped) break;escaped=false;}end=++index;} else {for (; index < length; index++) {if (isMetaChar(expr[index])) break;}end=index;}this.tokenVal=new String(expr,start,end - start);return TOKEN_STRING;}  }
class C{  public static long hoursAgo(int hours){  long timeInMillis=hours * DateUtils.HOUR_IN_MILLIS;  return System.currentTimeMillis() - timeInMillis;}  }
class C{  public static IMarker createMarker(IFile file,Position deadcodePosition) throws CoreException {  IMarker marker=file.createMarker(TYPE);  int offset=deadcodePosition.getOffset();  int length=deadcodePosition.getLength();  marker.setAttributes(new String[]{IMarker.CHAR_START,IMarker.CHAR_END,IMarker.MESSAGE},new Object[]{new Integer(offset),new Integer(offset + length),"deadcode"});  return marker;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    BufferedInputStream fis=null;    try {      fis=new BufferedInputStream(new FileInputStream(file));      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case MYINTS:    return isSetMyints();case HELLO:  return isSetHello();}throw new IllegalStateException();}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void testInfoPathMissing() throws Exception {  create(igfsSecondary,paths(DIR),null);  create(igfs,null,null);  IgfsFile info=igfs.info(DIR);  assert info != null;  assertEquals(DIR,info.path());}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof CryptoPermission))   return false;  CryptoPermission that=(CryptoPermission)obj;  if (!(alg.equalsIgnoreCase(that.alg)) || (maxKeySize != that.maxKeySize)) {    return false;  }  if (this.checkParam != that.checkParam) {    return false;  }  return (equalObjects(this.exemptionMechanism,that.exemptionMechanism) && equalObjects(this.algParamSpec,that.algParamSpec));}  }
class C{  public static boolean isSupported(String name){  return protocolsByName.containsKey(name);}  }
class C{  static public PanelMenu instance(){  if (thisMenu == null) {    thisMenu=new PanelMenu();  }  return thisMenu;}  }
class C{  public boolean isSetCursorId(){  return EncodingUtils.testBit(__isset_bitfield,__CURSORID_ISSET_ID);}  }
class C{  Object cloneReset() throws CloneNotSupportedException {  final StrTokenizer cloned=(StrTokenizer)super.clone();  if (cloned.chars != null) {    cloned.chars=cloned.chars.clone();  }  cloned.reset();  return cloned;}  }
class C{  public BasicListHeaderIterator(List headers,String name){  if (headers == null) {    throw new IllegalArgumentException("Header list must not be null.");  }  this.allHeaders=headers;  this.headerName=name;  this.currentIndex=findNext(-1);  this.lastIndex=-1;}  }
class C{  public EsriPolygonList(){  super();}  }
class C{  public boolean isRoot(){  return this == ROOT || (segments.length == 0 && ((separators & ALL_SEPARATORS) == HAS_LEADING));}  }
class C{  public Boolean isExpandableReservation(){  return expandableReservation;}  }
class C{  @Override public String toString(){  return "DumpZonesCommand []";}  }
class C{  public void encode(int lowCount,int highCount,int totalCount){  assert mState == State.ENCODING || mState == State.END_BLOCK;  mState=State.ENCODING;  final long range=mHigh - mLow + 1;  mHigh=mLow + (range * highCount) / totalCount - 1;  mLow=mLow + (range * lowCount) / totalCount;  while (true) {    if (mHigh < HALF) {      bitPlusFollowFalse();    } else     if (mLow >= HALF) {      bitPlusFollowTrue();      mLow-=HALF;      mHigh-=HALF;    } else     if (mLow >= FIRST_QUARTER && mHigh < THIRD_QUARTER) {      ++mBitsToFollow;      mLow-=FIRST_QUARTER;      mHigh-=FIRST_QUARTER;    } else {      return;    }    mLow<<=1;    mHigh=(mHigh << 1) + 1;  }}  }
class C{  public Object jjtAccept(PartitionParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public void removeFile(int num){  analysisTargets.remove(num);  isModified=true;}  }
class C{  @Override public Long srem(final String key,final String... members){  checkIsInMultiOrPipeline();  client.srem(key,members);  return client.getIntegerReply();}  }
class C{  void process_activity(Activity activity) throws Exception {  final SootClass cn=activity.getSootClass();  String className=cn.getName();  if (className.matches("^(android|com.android|org.apache).*/")) {    logger.info("process_activity: skip built-in activity");    return;  }  if (classNodeIsAnAndroidActivity(cn)) {    for (    SootMethod m : cn.getMethods()) {      logger.info("  processing method {}",m.getName());      process_method(activity,cn,m);    }  } else {    logger.info("Class {} not processed, it is not an Activity " + " or subclass of Activity.",cn);  }}  }
class C{  private void clearInstrumentation(){  metrics.set(METRIC_NODES_EXPANDED,0);  metrics.set(METRIC_PATH_COST,0);}  }
class C{  public void initialize(Vector2[] points){  int size=points.length;  DoubleEdgeListFace face=new DoubleEdgeListFace();  this.faces.add(face);  DoubleEdgeListHalfEdge prevLeftEdge=null;  DoubleEdgeListHalfEdge prevRightEdge=null;  for (int i=0; i < size; i++) {    Vector2 point=points[i];    DoubleEdgeListVertex vertex=new DoubleEdgeListVertex(point);    DoubleEdgeListHalfEdge left=new DoubleEdgeListHalfEdge();    DoubleEdgeListHalfEdge right=new DoubleEdgeListHalfEdge();    left.face=face;    left.next=null;    left.origin=vertex;    left.twin=right;    right.face=null;    right.next=prevRightEdge;    right.origin=null;    right.twin=left;    this.edges.add(left);    this.edges.add(right);    vertex.leaving=left;    this.vertices.add(vertex);    if (prevLeftEdge != null) {      prevLeftEdge.next=left;    }    if (prevRightEdge != null) {      prevRightEdge.origin=vertex;    }    prevLeftEdge=left;    prevRightEdge=right;  }  DoubleEdgeListHalfEdge firstLeftEdge=this.edges.get(0);  prevLeftEdge.next=firstLeftEdge;  DoubleEdgeListHalfEdge firstRightEdge=this.edges.get(1);  firstRightEdge.next=prevRightEdge;  prevRightEdge.origin=this.vertices.get(0);  face.edge=firstLeftEdge;}  }
class C{  public boolean accept(java.io.File file){  if (file == null) {    String msg=Logging.getMessage("nullValue.FileIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  return VPFUtils.getFeatureTypeName(file.getName()) != null;}  }
class C{  private static Object boxConstantOperand(ConstantOperand op,TypeReference t){  if (op.isObjectConstant()) {    return op.asObjectConstant().value;  } else   if (op.isLongConstant()) {    return op.asLongConstant().value;  } else   if (op.isFloatConstant()) {    return op.asFloatConstant().value;  } else   if (op.isDoubleConstant()) {    return op.asDoubleConstant().value;  } else   if (t.isIntType()) {    return op.asIntConstant().value;  } else   if (t.isBooleanType()) {    return op.asIntConstant().value == 1;  } else   if (t.isByteType()) {    return (byte)op.asIntConstant().value;  } else   if (t.isCharType()) {    return (char)op.asIntConstant().value;  } else   if (t.isShortType()) {    return (short)op.asIntConstant().value;  } else {    throw new OptimizingCompilerException("Trying to box an VM magic unboxed type (" + op + ")for a pure method call is not possible:\n"+ op.instruction+ "\n at "+ op.instruction.position());  }}  }
class C{  public T caseCommaExpression(CommaExpression object){  return null;}  }
class C{  static String escapeBytes(final ByteString input){  final StringBuilder builder=new StringBuilder(input.size());  for (int i=0; i < input.size(); i++) {    final byte b=input.byteAt(i);switch (b) {case 0x07:      builder.append("\\a");    break;case '\b':  builder.append("\\b");break;case '\f':builder.append("\\f");break;case '\n':builder.append("\\n");break;case '\r':builder.append("\\r");break;case '\t':builder.append("\\t");break;case 0x0b:builder.append("\\v");break;case '\\':builder.append("\\\\");break;case '\'':builder.append("\\\'");break;case '"':builder.append("\\\"");break;default :if (b >= 0x20) {builder.append((char)b);} else {builder.append('\\');builder.append((char)('0' + ((b >>> 6) & 3)));builder.append((char)('0' + ((b >>> 3) & 7)));builder.append((char)('0' + (b & 7)));}break;}}return builder.toString();}  }
class C{  public void addFunction(FunctionInterface activeFunction){  functions.add(activeFunction);}  }
class C{  public void testWriteVarint() throws Exception {  assertWriteVarint(bytes(0x00),0);  assertWriteVarint(bytes(0x01),1);  assertWriteVarint(bytes(0x7f),127);  assertWriteVarint(bytes(0xa2,0x74),(0x22 << 0) | (0x74 << 7));  assertWriteVarint(bytes(0xbe,0xf7,0x92,0x84,0x0b),(0x3e << 0) | (0x77 << 7) | (0x12 << 14)| (0x04 << 21)| (0x0bL << 28));  assertWriteVarint(bytes(0xbe,0xf7,0x92,0x84,0x1b),(0x3e << 0) | (0x77 << 7) | (0x12 << 14)| (0x04 << 21)| (0x1bL << 28));  assertWriteVarint(bytes(0x80,0xe6,0xeb,0x9c,0xc3,0xc9,0xa4,0x49),(0x00 << 0) | (0x66 << 7) | (0x6b << 14)| (0x1c << 21)| (0x43L << 28)| (0x49L << 35)| (0x24L << 42)| (0x49L << 49));  assertWriteVarint(bytes(0x9b,0xa8,0xf9,0xc2,0xbb,0xd6,0x80,0x85,0xa6,0x01),(0x1b << 0) | (0x28 << 7) | (0x79 << 14)| (0x42 << 21)| (0x3bL << 28)| (0x56L << 35)| (0x00L << 42)| (0x05L << 49)| (0x26L << 56)| (0x01L << 63));}  }
class C{  static MyFragment newInstance(CharSequence label){  MyFragment f=new MyFragment();  Bundle b=new Bundle();  b.putCharSequence("label",label);  f.setArguments(b);  return f;}  }
class C{  public boolean enableWifi(){  return mWifiManager.setWifiEnabled(true);}  }
class C{  public static void box(double x,double y,double z,double x2,double y2,double z2,float red,float green,float blue,float alpha){  x=x - Minecraft.getMinecraft().getRenderManager().renderPosX;  y=y - Minecraft.getMinecraft().getRenderManager().renderPosY;  z=z - Minecraft.getMinecraft().getRenderManager().renderPosZ;  x2=x2 - Minecraft.getMinecraft().getRenderManager().renderPosX;  y2=y2 - Minecraft.getMinecraft().getRenderManager().renderPosY;  z2=z2 - Minecraft.getMinecraft().getRenderManager().renderPosZ;  GL11.glBlendFunc(770,771);  GL11.glEnable(GL_BLEND);  GL11.glLineWidth(2.0F);  GL11.glDisable(GL11.GL_TEXTURE_2D);  GL11.glDisable(GL_DEPTH_TEST);  GL11.glDepthMask(false);  GL11.glDepthMask(false);  GL11.glColor4f(red,green,blue,alpha);  drawColorBox(new AxisAlignedBB(x,y,z,x2,y2,z2),red,green,blue,alpha);  GL11.glColor4d(0,0,0,0.5F);  RenderGlobal.drawSelectionBoundingBox(new AxisAlignedBB(x,y,z,x2,y2,z2));  GL11.glEnable(GL11.GL_TEXTURE_2D);  GL11.glEnable(GL_DEPTH_TEST);  GL11.glDepthMask(true);  GL11.glDisable(GL_BLEND);}  }
class C{  public void addLine(float lat_1,float lon_1,float lat_2,float lon_2,int lineType,LinkProperties properties) throws IOException {  LinkLine.write(lat_1,lon_1,lat_2,lon_2,lineType,properties,link.dos);}  }
class C{  public static String CFDtoString(Instances i,String CFD){  StringBuilder result=new StringBuilder();  if (CFD.contains("->")) {    String[] cfd=CFD.split("->");    String[] premise;    if (cfd[0].contains(","))     premise=cfd[0].split(","); else     premise=new String[]{cfd[0]};    for (    String p : premise) {      String[] w;      if (p.contains("="))       w=p.split("="); else {        System.out.println("invalid CFD syntax: " + CFD);        return null;      }      result.append(i.attribute(Integer.parseInt(w[0])).name() + "=" + w[1]+ ",");    }    result.deleteCharAt(result.length() - 1);    result.append("->");    String[] rhs;    if (cfd[1].contains("="))     rhs=cfd[1].split("="); else {      System.out.println("invalid CFD syntax: " + CFD);      return null;    }    result.append(i.attribute(Integer.parseInt(rhs[0])).name() + "=" + rhs[1]);  }  return result.toString();}  }
class C{  public void findAndInit(Object someObj){  super.findAndInit(someObj);  if (someObj instanceof TimeBoundsProvider) {    if (Debug.debugging("clock")) {      Debug.output("Clock.findAndInit(TimeBoundsProvider): " + someObj.getClass().getName());    }    addTimeBoundsProvider((TimeBoundsProvider)someObj);  }}  }
class C{  public boolean isAllowedToWriteReview(){  return allowedToWriteReview;}  }
class C{  @Override public Object clone(){  try {    ZipEntry result=(ZipEntry)super.clone();    result.extra=extra != null ? extra.clone() : null;    return result;  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }}  }
class C{  public static float[] RGBtoHSL(Color color,float[] hsl){  return RGBtoHSL(color.getRed(),color.getGreen(),color.getBlue(),hsl);}  }
class C{  private static Type internalType(Class<?> externalType){  if (externalType.equals(int.class) || externalType.equals(Integer.class) || externalType.equals(IntValue.class)) {    return Type.INT;  } else   if (externalType.equals(String.class) || externalType.equals(StringValue.class)) {    return Type.STRING;  } else   if (externalType.equals(ObjectValue.class)) {    return Type.OBJECT;  } else   if (externalType.equals(boolean.class) || externalType.equals(Boolean.class) || externalType.equals(BoolValue.class)) {    return Type.BOOLEAN;  } else   if (externalType.equals(void.class)) {    return Type.VOID;  } else   if (externalType.equals(WeakReferenceValue.class)) {    return Type.WEAKREF;  } else   if (externalType.equals(SoftReferenceValue.class)) {    return Type.SOFTREF;  } else   if (externalType.equals(PhantomReferenceValue.class)) {    return Type.PHANTOMREF;  }  throw new RuntimeException("Invalid return type for intrinsic method, " + externalType.getCanonicalName());}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  private TaskResourceRep createUpdateTasks(ComputeImage ci,boolean reImport){  boolean hasImportTask=false;  try {    List<URI> ids=_dbClient.queryByType(ComputeImageServer.class,true);    for (    URI imageServerId : ids) {      ComputeImageServer imageServer=_dbClient.queryObject(ComputeImageServer.class,imageServerId);      if (reImport || imageServer.getComputeImages() == null || !imageServer.getComputeImages().contains(ci.getId().toString())) {        hasImportTask=true;        break;      }    }    if (hasImportTask) {      return doImportImage(ci);    } else {      return getReadyOp(ci,ResourceOperationTypeEnum.UPDATE_IMAGE);    }  } catch (  Exception e) {    ci.setComputeImageStatus(ComputeImageStatus.NOT_AVAILABLE.name());    _dbClient.updateObject(ci);    throw e;  }}  }
class C{  public boolean signRequired(){  return true;}  }
class C{  private void readNetwork(String networkToRead){  this.log.info("Reading cleaned network from " + networkToRead);  sc=(MutableScenario)ScenarioUtils.createScenario(ConfigUtils.createConfig());  new NetworkReaderMatsimV1(sc.getNetwork()).readFile(networkToRead);  this.log.info("Network read successfully.");}  }
class C{  public int nidToSyscall(int nid){  int syscall=nidToSyscallInternal(nid);  if (isOverwrittenSyscall(syscall)) {    return -1;  }  return syscall;}  }
class C{  public void addArea(final TimeSection AREA){  if (null == AREA)   return;  areas.add(AREA);  Collections.sort(areas,new TimeSectionComparator());  fireUpdateEvent(SECTION_EVENT);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case NODE_ID:    return isSetNodeId();case DOMAIN_ID:  return isSetDomainId();case HOSTNAME:return isSetHostname();case PORT:return isSetPort();}throw new IllegalStateException();}  }
class C{  public final CC width(String size){  hor.setSize(ConstraintParser.parseBoundSize(size,false,true));  return this;}  }
class C{  public void testPowMathContext(){  String a="123121247898748298842980";  int aScale=10;  int exp=10;  String c="8.0044E+130";  int cScale=-126;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  MathContext mc=new MathContext(5,RoundingMode.HALF_UP);  BigDecimal result=aNumber.pow(exp,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void toggleSynapseVisibility(SynapseGroup synapseGroup){  removeGroup(synapseGroup);  removeSynapseGroupNodes(synapseGroup);  addSynapseGroup(synapseGroup);}  }
class C{  public void post(String path,ParameterMap params,AsyncCallback callback){  HttpRequest req=new HttpPost(path,params);  executeAsync(req,callback);}  }
class C{  public final int storeSession(final Session session,final boolean invalidateActive){  if (session == null) {    Log.e(TAG,"Error storing session: Session is null");    return 0;  }  if (invalidateActive) {    invalidateActiveSessions();  }  final Cursor cursor=contentResolver.query(ContentUris.withAppendedId(ContentProvider.CONTENT_URI_SESSION,session.getId()),null,null,null,null);  if (!cursor.moveToNext()) {    storeSession(session);    cursor.close();    return 1;  } else {    Log.d(TAG,"Updating existing session " + session.getId());    final ContentValues values=new ContentValues();    values.put(Schema.COL_CREATED_AT,session.getCreatedAt());    values.put(Schema.COL_LAST_UPDATED,session.getLastUpdated());    values.put(Schema.COL_DESCRIPTION,session.getDescription());    values.put(Schema.COL_HAS_BEEN_EXPORTED,session.hasBeenExported());    values.put(Schema.COL_IS_ACTIVE,session.isActive());    values.put(Schema.COL_NUMBER_OF_CELLS,session.getCellsCount());    values.put(Schema.COL_NUMBER_OF_WIFIS,session.getWifisCount());    values.put(Schema.COL_NUMBER_OF_WAYPOINTS,session.getWaypointsCount());    cursor.close();    return contentResolver.update(ContentProvider.CONTENT_URI_SESSION,values,Schema.COL_ID + " = ?",new String[]{String.valueOf(session.getId())});  }}  }
class C{  public static JPanel createErrorComponent(String error){  JPanel panel=new JPanel(new BorderLayout());  JLabel label=new JLabel(error,ERROR_ICON,SwingConstants.CENTER);  panel.add(label,BorderLayout.CENTER);  return panel;}  }
class C{  public SummaryRanges(){  before=new HashMap<Integer,Interval>();  end=new HashMap<Integer,Interval>();  finish=new HashMap<Integer,Integer>();  list=new ArrayList<>();}  }
class C{  @Override public void clear(){  size=0;  for (int i=0; i < elementData.length; i++) {    elementData[i]=null;  }  modCount++;}  }
class C{  public <T>MappingIterator<T> readValues(File src) throws IOException, JsonProcessingException {  JsonParser jp=_jsonFactory.createJsonParser(src);  if (_schema != null) {    jp.setSchema(_schema);  }  DeserializationContext ctxt=_createDeserializationContext(jp,_config);  return new MappingIterator<T>(_valueType,jp,ctxt,_findRootDeserializer(_config,_valueType),true,_valueToUpdate);}  }
class C{  public boolean isMinYSet(){  return isMinYSet(0);}  }
class C{  public DoubleBag(int capacity){  numObjs=0;  objs=new double[capacity];}  }
class C{  protected synchronized void addAllDataSeries(){  for (  IndexedProcessVar pv : (Iterable<IndexedProcessVar>)pvs.values()) {    XYSeries series=(XYSeries)pv.get(FID_DATA_SERIES);    if (series == null) {      series=new XYSeries(String.valueOf(pv.get(EcuDataPv.FID_DESCRIPT)));      pv.put(FID_DATA_SERIES,series);      pv.addPvChangeListener(this,PvChangeEvent.PV_MODIFIED);    }  }}  }
class C{  public void run(){  long time=System.currentTimeMillis();  HttpServletRequest request=null;  if (m_requests.size() > 0)   request=(HttpServletRequest)m_requests.remove(0);  if (request == null) {    log.log(Level.SEVERE,"Nothing in queue");    return;  }  Properties ctx=JSPEnv.getCtx(request);  String ref=request.getHeader("referer");  if (ref == null || ref.length() == 0)   ref=request.getRequestURL().toString();  log.info("Referer=" + request.getHeader("referer") + " - URL="+ request.getRequestURL());}  }
class C{  public boolean isConfirmed(){  return is(CONFIRMED);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case DomPackage.INLINE_TAG___GET_VALUE_BY_KEY__STRING:    return getValueByKey((String)arguments.get(0));case DomPackage.INLINE_TAG___TO_STRING:  return toString();}return super.eInvoke(operationID,arguments);}  }
class C{  public SerialMessage(String m){  super(m);}  }
class C{  public void addMeasurement(double measurement){  double keepConstant=1 - mDecayConstant;  if (mCount > mCutover) {    mValue=Math.exp(keepConstant * Math.log(mValue) + mDecayConstant * Math.log(measurement));  } else   if (mCount > 0) {    double retained=keepConstant * mCount / (mCount + 1.0);    double newcomer=1.0 - retained;    mValue=Math.exp(retained * Math.log(mValue) + newcomer * Math.log(measurement));  } else {    mValue=measurement;  }  mCount++;}  }
class C{  public void executeImpl(){  if (getArgs().getIterator().hasNext()) {    final String originalName=getArgs().getIterator().next();    final String updatedName=getArgs().getIterator().next();    final ContentValues cvs=new ContentValues();    cvs.put(ContactsContract.Contacts.DISPLAY_NAME,updatedName);    getArgs().getAdapter().startUpdate(this,0,ContactsContract.RawContacts.CONTENT_URI,cvs,ContactsContract.Contacts.DISPLAY_NAME + "=?",new String[]{originalName});  } else   Utils.showToast(getArgs().getOps().getActivityContext(),getArgs().getCounter().getValue() + " contact(s) modified");}  }
class C{  @Description(summary="Create the h2.zip file and the Windows installer.") public void installer(){  delete(files("bin").keep("*.jar"));  jar();  docs();  try {    exec("soffice",args("-invisible","macro:///Standard.Module1.H2Pdf"));    copy("docs",files("../h2web/h2.pdf"),"../h2web");  } catch (  Exception e) {    print("OpenOffice is not available: " + e);  }  delete("docs/html/onePage.html");  FileList files=files("../h2").keep("../h2/build.*");  files.addAll(files("../h2/bin").keep("../h2/bin/h2*"));  files.addAll(files("../h2/docs").exclude("*.jar"));  files.addAll(files("../h2/service"));  files.addAll(files("../h2/src"));  zip("../h2web/h2.zip",files,"../",false,false);  boolean installer=false;  try {    exec("makensis",args("/v2","src/installer/h2.nsi"));    installer=true;  } catch (  Exception e) {    print("NSIS is not available: " + e);  }  String buildDate=getStaticField("org.h2.engine.Constants","BUILD_DATE");  byte[] data=readFile(new File("../h2web/h2.zip"));  String sha1Zip=getSHA1(data), sha1Exe=null;  writeFile(new File("../h2web/h2-" + buildDate + ".zip"),data);  if (installer) {    data=readFile(new File("../h2web/h2-setup.exe"));    sha1Exe=getSHA1(data);    writeFile(new File("../h2web/h2-setup-" + buildDate + ".exe"),data);  }  updateChecksum("../h2web/html/download.html",sha1Zip,sha1Exe);}  }
class C{  public TreePath(List<String> initialPathEntries){  this.addAll(initialPathEntries);}  }
class C{  public DeviceBuilder scanRecord(@NonNull byte[] scanRecord){  this.scanRecord=scanRecord;  return this;}  }
class C{  public void update(final String key,final U value){  update(Util.stringToByteArray(key),value);}  }
class C{  protected Node newNode(){  return new SVGOMFEMergeElement();}  }
class C{  @RequestMapping(value="/foos",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Foo> updateFoo(@RequestBody Foo foo) throws URISyntaxException {  log.debug("REST request to update Foo : {}",foo);  if (foo.getId() == null) {    return createFoo(foo);  }  Foo result=fooRepository.save(foo);  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("foo",foo.getId().toString())).body(result);}  }
class C{  public String serialize(Object obj) throws ApiException {  try {    if (obj != null)     return JsonUtil.getJsonMapper().writeValueAsString(obj); else     return null;  } catch (  Exception e) {    throw new ApiException(500,e.getMessage());  }}  }
class C{  public Point2D apply(String[] latlon){  double latitude=0;  double longitude=0;  String[] lat=latlon[0].split(" ");  String[] lon=latlon[1].split(" ");  latitude=Integer.parseInt(lat[0]) + Integer.parseInt(lat[1]) / 60f;  latitude*=d.height / 180f;  longitude=Integer.parseInt(lon[0]) + Integer.parseInt(lon[1]) / 60f;  longitude*=d.width / 360f;  if (lat[2].equals("N")) {    latitude=d.height / 2 - latitude;  } else {    latitude=d.height / 2 + latitude;  }  if (lon[2].equals("W")) {    longitude=d.width / 2 - longitude;  } else {    longitude=d.width / 2 + longitude;  }  return new Point2D.Double(longitude,latitude);}  }
class C{  public static boolean isOrContainsRefToTypeVar(EObject obj,TypeVariable... typeVars){  return isOrContainsRefToTypeVar(obj,false,typeVars);}  }
class C{  public QName(String namespaceURI,String localName,boolean validate){  if (localName == null)   throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_NULL,null));  if (validate) {    if (!XML11Char.isXML11ValidNCName(localName)) {      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null));    }  }  _namespaceURI=namespaceURI;  _localName=localName;  m_hashCode=toString().hashCode();}  }
class C{  @RequestMapping(value={"","/"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@RequestParam(value="page",defaultValue="0") int startPage,@RequestParam(value="size",defaultValue="10") int pageSize,Principal principal){  RestWrapper restWrapper=null;  try {    Integer counter=appDeploymentQueueStatusDAO.totalRecordCount().intValue();    List<com.wipro.ats.bdre.md.dao.jpa.AppDeploymentQueueStatus> jpaAdqStatus=appDeploymentQueueStatusDAO.list(startPage,pageSize);    List<AppDeploymentQueueStatus> adqStatuses=new ArrayList<AppDeploymentQueueStatus>();    for (    com.wipro.ats.bdre.md.dao.jpa.AppDeploymentQueueStatus adqStatus : jpaAdqStatus) {      AppDeploymentQueueStatus returnAdqStatus=new AppDeploymentQueueStatus();      returnAdqStatus.setAppDeploymentStatusId(adqStatus.getAppDeploymentStatusId());      returnAdqStatus.setDescription(adqStatus.getDescription());      returnAdqStatus.setCounter(counter);      adqStatuses.add(returnAdqStatus);    }    restWrapper=new RestWrapper(adqStatuses,RestWrapper.OK);    LOGGER.info("All records listed from DeployStatus by User:" + principal.getName());  } catch (  Exception e) {    LOGGER.error(e);    return new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public static void doGets(String regionName,int numGets){  Region r=cache.getRegion(Region.SEPARATOR + regionName);  assertNotNull(r);  for (long i=0; i < numGets; i++) {    r.get(i);  }}  }
class C{  @RequestMapping(value="/emrShellSteps",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_EMR_SHELL_STEPS_POST) public EmrShellStep addShellStepToEmrCluster(@RequestBody EmrShellStepAddRequest request) throws Exception {  return (EmrShellStep)emrService.addStepToCluster(request);}  }
class C{  public void convertMatrixToRaster(){  log.info("Converting image matrix to raster.");  if (imageMatrix.rows() == bufferedImage.getWidth() && imageMatrix.columns() == bufferedImage.getHeight()) {    for (int x=0; x < imageMatrix.rows(); x++) {      for (int y=0; y < imageMatrix.columns(); y++) {        Color c=new Color(color.getRed(),color.getGreen(),color.getBlue(),(int)Math.floor((imageMatrix.get(x,y) / maxValue) * 255));        bufferedImage.setRGB(x,y,c.getRGB());      }    }  } else {    throw new RuntimeException("The imageMatrix and BufferedImage raster is not the same size.");  }  log.info("Done converting image matrix to raster.");}  }
class C{  private void parseNamespace(Attributes attributes) throws SAXException {  md.anyNamespace=false;  parseRule(getNs(attributes),attributes);}  }
class C{  public static void registerSpringDataSource(String name,DataSource dataSource){  JdbcWrapperHelper.registerSpringDataSource(name,dataSource);}  }
class C{  protected void addAbstractPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Type_abstract_feature"),getString("_UI_PropertyDescriptor_description","_UI_Type_abstract_feature","_UI_Type_type"),TypesPackage.Literals.TYPE__ABSTRACT,true,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  public void debugFine(CharSequence message,Throwable e){  log(Level.FINE,message,e);}  }
class C{  public void dup2X1(){  mv.visitInsn(Opcodes.DUP2_X1);}  }
class C{  public static long doubleToLongBits(double value){  return 0l;}  }
class C{  public Dimension maximumLayoutSize(Container target){  Dimension rd, mbd;  Insets i=getInsets();  if (menuBar != null && menuBar.isVisible()) {    mbd=menuBar.getMaximumSize();  } else {    mbd=new Dimension(0,0);  }  if (contentPane != null) {    rd=contentPane.getMaximumSize();  } else {    rd=new Dimension(Integer.MAX_VALUE,Integer.MAX_VALUE - i.top - i.bottom- mbd.height- 1);  }  return new Dimension(Math.min(rd.width,mbd.width) + i.left + i.right,rd.height + mbd.height + i.top+ i.bottom);}  }
class C{  public LambdaFactoryConfiguration withHelperClassSourceProvider(HelperClassSourceProvider helperSourceProvider){  return copy().setDefaultHelperClassSourceProvider(helperSourceProvider);}  }
class C{  public OrderedCollection<PortChangeEvent> handlePortStatusMessage(OFPortStatus ps){  if (ps == null) {    throw new NullPointerException("OFPortStatus message must " + "not be null");  }  lock.writeLock().lock();  try {    ImmutablePort port=ImmutablePort.fromOFPhysicalPort(ps.getDesc());    OFPortReason reason=OFPortReason.fromReasonCode(ps.getReason());    if (reason == null) {      throw new IllegalArgumentException("Unknown PortStatus " + "reason code " + ps.getReason());    }    if (log.isDebugEnabled()) {      log.debug("Handling OFPortStatus: {} for {}",reason,port.toBriefString());    }    if (reason == OFPortReason.OFPPR_DELETE)     return handlePortStatusDelete(port);    Map<Short,ImmutablePort> newPortByNumber=new HashMap<Short,ImmutablePort>(portsByNumber);    OrderedCollection<PortChangeEvent> events=getSinglePortChanges(port);    for (    PortChangeEvent e : events) {switch (e.type) {case DELETE:        newPortByNumber.remove(e.port.getPortNumber());      break;case ADD:    if (reason != OFPortReason.OFPPR_ADD) {    }case DOWN:case OTHER_UPDATE:case UP:  newPortByNumber.put(e.port.getPortNumber(),e.port);break;}}updatePortsWithNewPortsByNumber(newPortByNumber);return events;}  finally {lock.writeLock().unlock();}}  }
class C{  public void onEvent(Event e){  if (taskThread != null && taskThread.isAlive())   taskThread.interrupt();  SessionManager.getAppDesktop().closeActiveWindow();}  }
class C{  public static CassandraTaskExecutor create(final String frameworkId,final String name,final String role,final String principal,final ExecutorConfig config){  return new CassandraTaskExecutor(frameworkId,name,role,principal,config.getCommand(),config.getArguments(),config.getCpus(),config.getMemoryMb(),config.getHeapMb(),config.getApiPort(),config.getURIs(),config.getJavaHome());}  }
class C{  public void removeAttribute(String name){  attributes.remove(name);}  }
class C{  public String name(){  return name;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:54.841 -0500",hash_original_method="A434717C5E1CC7DE726BE44ADF4AB233",hash_generated_method="A2512A3FF7754651D7570861EEC907B9") public static TimeStamp parseNtpString(String s) throws NumberFormatException {  return new TimeStamp(decodeNtpHexString(s));}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Attr attribute;  NodeList elementList;  String nullNS=null;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("emp:employee");  element=(Element)elementList.item(0);  assertNotNull("empEmployeeNotNull",element);  attribute=element.getAttributeNodeNS(nullNS,"defaultAttr");{    boolean success=false;    try {      attribute.setPrefix("test");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("nodesetprefix04",success);  }}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  void handleEOD(EncoderContext context,StringBuilder buffer){  int unwritten=(buffer.length() / 3) * 2;  int rest=buffer.length() % 3;  int curCodewordCount=context.getCodewordCount() + unwritten;  context.updateSymbolInfo(curCodewordCount);  int available=context.getSymbolInfo().getDataCapacity() - curCodewordCount;  if (rest == 2) {    buffer.append('\0');    while (buffer.length() >= 3) {      writeNextTriplet(context,buffer);    }    if (context.hasMoreCharacters()) {      context.writeCodeword(HighLevelEncoder.C40_UNLATCH);    }  } else   if (available == 1 && rest == 1) {    while (buffer.length() >= 3) {      writeNextTriplet(context,buffer);    }    if (context.hasMoreCharacters()) {      context.writeCodeword(HighLevelEncoder.C40_UNLATCH);    }    context.pos--;  } else   if (rest == 0) {    while (buffer.length() >= 3) {      writeNextTriplet(context,buffer);    }    if (available > 0 || context.hasMoreCharacters()) {      context.writeCodeword(HighLevelEncoder.C40_UNLATCH);    }  } else {    throw new IllegalStateException("Unexpected case. Please report!");  }  context.signalEncoderChange(HighLevelEncoder.ASCII_ENCODATION);}  }
class C{  public T execute(){  return GraalCompiler.compile(this);}  }
class C{  public ELContextImpl(ELResolver resolver){  this.resolver=resolver;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public LazyDequeX<T> with(int i,T element){  return stream(Fluxes.insertAt(Fluxes.deleteBetween(flux(),i,i + 1),i,element));}  }
class C{  public void add(TaskStats stat2){  numRuns+=stat2.getNumRuns();  elapsed+=stat2.getElapsed();  maxTotMem+=stat2.getMaxTotMem();  maxUsedMem+=stat2.getMaxUsedMem();  count+=stat2.getCount();  if (round != stat2.round) {    round=-1;  }  if (countsByTime != null && stat2.countsByTime != null) {    if (countsByTimeStepMSec != stat2.countsByTimeStepMSec) {      throw new IllegalStateException("different by-time msec step");    }    if (countsByTime.length != stat2.countsByTime.length) {      throw new IllegalStateException("different by-time msec count");    }    for (int i=0; i < stat2.countsByTime.length; i++) {      countsByTime[i]+=stat2.countsByTime[i];    }  }}  }
class C{  public boolean needsHighlight(int xIndex,int dataSetIndex){  if (!valuesToHighlight() || dataSetIndex < 0)   return false;  for (int i=0; i < mIndicesToHightlight.length; i++)   if (mIndicesToHightlight[i].getXIndex() == xIndex && mIndicesToHightlight[i].getDataSetIndex() == dataSetIndex)   return true;  return false;}  }
class C{  public int addGroupBy(ExpressionNode expr){  assert !projectSplitOff;  int position=nGroupBy++;  assert (position == groupBy.size());  groupBy.add(expr);  return position;}  }
class C{  public GF2nElement solveQuadraticEquation() throws RuntimeException {  if (isZero()) {    return ZERO((GF2nPolynomialField)mField);  }  if ((mDegree & 1) == 1) {    return halfTrace();  }  GF2nPolynomialElement z, w;  do {    GF2nPolynomialElement p=new GF2nPolynomialElement((GF2nPolynomialField)mField,new Random());    z=ZERO((GF2nPolynomialField)mField);    w=(GF2nPolynomialElement)p.clone();    for (int i=1; i < mDegree; i++) {      z.squareThis();      w.squareThis();      z.addToThis(w.multiply(this));      w.addToThis(p);    }  } while (w.isZero());  if (!equals(z.square().add(z))) {    throw new RuntimeException();  }  return z;}  }
class C{  void addScrapView(View scrap,int position,int viewType){  if (viewTypeCount == 1) {    currentScrapViews.put(position,scrap);  } else {    scrapViews[viewType].put(position,scrap);  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {    scrap.setAccessibilityDelegate(null);  }}  }
class C{  public MultiblockSet makeSet(){  return new MultiblockSet(this);}  }
class C{  public boolean isEmpty(){  if (selections.isEmpty()) {    return true;  } else {    for (    DomainSelection space : selections.values()) {      if (!space.isEmpty()) {        return false;      }    }  }  return true;}  }
class C{  @Deprecated public static String[] readStrings(){  return new In().readAllStrings();}  }
class C{  public RTextScrollPane(RTextArea area,boolean lineNumbers,Color lineNumberColor){  super(area);  textArea=area;  Font defaultFont=new Font("Monospaced",Font.PLAIN,12);  gutter=new Gutter(textArea);  gutter.setLineNumberFont(defaultFont);  gutter.setLineNumberColor(lineNumberColor);  setLineNumbersEnabled(lineNumbers);  setVerticalScrollBarPolicy(VERTICAL_SCROLLBAR_ALWAYS);  setHorizontalScrollBarPolicy(HORIZONTAL_SCROLLBAR_AS_NEEDED);}  }
class C{  public void clearArchiveDirectory(){  File directory=new File(getArchiveDirectory());  if (directory.exists() && directory.isDirectory()) {    String[] listing=directory.list();    for (    String aListing : listing) {      File file=new File(getArchiveDirectory(),aListing);      file.delete();    }  }  if (!directory.exists()) {    directory.mkdirs();  }}  }
class C{  @Override public ImmutableRangeSet<C> subRangeSet(Range<C> range){  if (!isEmpty()) {    Range<C> span=span();    if (range.encloses(span)) {      return this;    } else     if (range.isConnected(span)) {      return new ImmutableRangeSet<C>(intersectRanges(range));    }  }  return of();}  }
class C{  public boolean removex(@Nullable String spaceName,int part,KeyCacheObject key,byte[] keyBytes) throws IgniteCheckedException {  GridOffHeapPartitionedMap m=offheap(spaceName);  if (log.isTraceEnabled())   log.trace("offheap removex [key=" + key + ']');  return m != null && m.removex(part,U.hash(key),keyBytes(key,keyBytes));}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  @Override protected void register(ContainerCapabilityFactory containerCapabilityFactory){  containerCapabilityFactory.registerContainerCapability("liberty",J2EEContainerCapability.class);}  }
class C{  public static final boolean containsFebruary29AsAdj(JulianDate start,JulianDate end){  int startYear=start.getYear();  int endYear=end.getYear();  if (isLeapYear(startYear)) {    if (start.isOnOrBefore(new JulianDate(startYear,2,29))) {      if (end.isOnOrAfter(new JulianDate(startYear,2,29))) {        return true;      }    }  } else   if (isLeapYear(endYear)) {    if (end.isOnOrAfter(new JulianDate(endYear,2,29))) {      if (start.isOnOrBefore(new JulianDate(endYear,2,29))) {        return true;      }    }  }  return false;}  }
class C{  public EvaluationException(String message){  super(message);}  }
class C{  public static Range<BigDecimal> valueOfBigDecimal(String str){  return Range.valueOf(str,null);}  }
class C{  private List<SampleObject> createObjectList(LargeObjectArray<SampleObject> loa,int size){  List<SampleObject> objects=new ArrayList<SampleObject>(size);  for (int i=0; i < size; i++) {    SampleObject o=new SampleObject(i,"string*value",-0.5);    loa.add(o);    objects.add(o);  }  Assert.assertEquals("Full array size",size,loa.size());  return objects;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean demo2(Sproblem Prob){  Scs A, C;  float b[], x[], resid[], t, tol;  int k, m, n, order, nb, ns, r[], s[], rr[], sprank;  boolean ok;  Scsd D;  if (Prob == null)   return (false);  A=Prob.A;  C=Prob.C;  b=Prob.b;  x=Prob.x;  resid=Prob.resid;  m=A.m;  n=A.n;  tol=Prob.sym != 0 ? 0.001f : 1;  D=Scs_dmperm.cs_dmperm(C,1);  if (D == null)   return (false);  nb=D.nb;  r=D.r;  s=D.s;  rr=D.rr;  sprank=rr[3];  for (ns=0, k=0; k < nb; k++) {    if ((r[k + 1] == r[k] + 1) && (s[k + 1] == s[k] + 1)) {      ns++;    }  }  System.out.print(String.format("blocks: %d singletons: %d structural rank: %d\n",nb,ns,sprank));  D=null;  for (order=0; order <= 3; order+=3) {    if (order == 0 && m > 1000)     continue;    System.out.print("QR   ");    print_order(order);    rhs(x,b,m);    t=tic();    ok=Scs_qrsol.cs_qrsol(order,C,x);    System.out.print(String.format("time: %8.2f ms ",toc(t)));    print_resid(ok,C,x,b,resid);  }  if (m != n || sprank < n)   return (true);  for (order=0; order <= 3; order++) {    if (order == 0 && m > 1000)     continue;    System.out.print("LU   ");    print_order(order);    rhs(x,b,m);    t=tic();    ok=Scs_lusol.cs_lusol(order,C,x,tol);    System.out.print(String.format("time: %8.2f ms ",toc(t)));    print_resid(ok,C,x,b,resid);  }  if (Prob.sym == 0)   return (true);  for (order=0; order <= 1; order++) {    if (order == 0 && m > 1000)     continue;    System.out.print("Chol ");    print_order(order);    rhs(x,b,m);    t=tic();    ok=Scs_cholsol.cs_cholsol(order,C,x);    System.out.print(String.format("time: %8.2f ms ",toc(t)));    print_resid(ok,C,x,b,resid);  }  return (true);}  }
class C{  public ConsensusMessage(int paxosType,int id,int epoch,int from,byte[] value){  super(from);  this.paxosType=paxosType;  this.number=id;  this.epoch=epoch;  this.value=value;}  }
class C{  public void doClick(int pressTime){  Dimension size=getSize();  model.setArmed(true);  model.setPressed(true);  paintImmediately(new Rectangle(0,0,size.width,size.height));  try {    Thread.currentThread().sleep(pressTime);  } catch (  InterruptedException ie) {  }  model.setPressed(false);  model.setArmed(false);}  }
class C{  @Override public boolean onCommand(CommandSender sender,Command cmd,String commandLabel,String args[]){  if (!"aach".equalsIgnoreCase(cmd.getName()))   return false;  if ((args.length == 1) && !"help".equalsIgnoreCase(args[0])) {    if ("book".equalsIgnoreCase(args[0]) && sender.hasPermission("achievement.book") && sender instanceof Player) {      bookCommand.giveBook(((Player)sender));    } else     if ("hcaa".equalsIgnoreCase(args[0]) && sender.hasPermission("achievement.easteregg")) {      displayEasterEgg(sender);    } else     if ("reload".equalsIgnoreCase(args[0])) {      if (sender.hasPermission("achievement.reload")) {        this.reloadConfig();        configurationLoad(false);        if (successfulLoad) {          if (sender instanceof Player)           sender.sendMessage(chatHeader + lang.getString("configuration-successfully-reloaded","Configuration successfully reloaded."));          this.getLogger().info("Configuration successfully reloaded.");        } else {          sender.sendMessage(chatHeader + lang.getString("configuration-reload-failed","Errors while reloading configuration. Please view logs for more details."));          this.getLogger().severe("Errors while reloading configuration. Please view logs for more details.");        }      } else {        sender.sendMessage(chatHeader + lang.getString("no-permissions","You do not have the permission to do this."));      }    } else     if ("stats".equalsIgnoreCase(args[0]) && sender instanceof Player) {      if (sender.hasPermission("achievement.stats")) {        statsCommand.getStats((Player)sender);      } else {        sender.sendMessage(chatHeader + lang.getString("no-permissions","You do not have the permission to do this."));      }    } else     if ("list".equalsIgnoreCase(args[0]) && sender instanceof Player) {      if (sender.hasPermission("achievement.list")) {        listCommand.createMainGUI((Player)sender);      } else {        sender.sendMessage(chatHeader + lang.getString("no-permissions","You do not have the permission to do this."));      }    } else     if ("top".equalsIgnoreCase(args[0])) {      if (sender.hasPermission("achievement.top")) {        topCommand.getTop(sender);      } else {        sender.sendMessage(chatHeader + lang.getString("no-permissions","You do not have the permission to do this."));      }    } else     if ("week".equalsIgnoreCase(args[0])) {      if (sender.hasPermission("achievement.week")) {        topCommand.getWeek(sender);      } else {        sender.sendMessage(chatHeader + lang.getString("no-permissions","You do not have the permission to do this."));      }    } else     if ("month".equalsIgnoreCase(args[0])) {      if (sender.hasPermission("achievement.month")) {        topCommand.getMonth(sender);      } else {        sender.sendMessage(chatHeader + lang.getString("no-permissions","You do not have the permission to do this."));      }    } else     if ("info".equalsIgnoreCase(args[0])) {      infoCommand.getInfo(sender);    } else {      helpCommand.getHelp(sender);    }  } else   if ((args.length == 3) && "give".equalsIgnoreCase(args[0])) {    if (sender.hasPermission("achievement.give")) {      giveCommand.achievementGive(sender,args);    } else {      sender.sendMessage(chatHeader + lang.getString("no-permissions","You do not have the permission to do this."));    }  } else   if ((args.length >= 3) && "check".equalsIgnoreCase(args[0])) {    if (sender.hasPermission("achievement.check")) {      checkCommand.achievementCheck(sender,args);    } else {      sender.sendMessage(chatHeader + lang.getString("no-permissions","You do not have the permission to do this."));    }  } else   if ((args.length >= 3) && "delete".equalsIgnoreCase(args[0])) {    if (sender.hasPermission("achievement.delete")) {      deleteCommand.achievementDelete(sender,args);    } else {      sender.sendMessage(chatHeader + lang.getString("no-permissions","You do not have the permission to do this."));    }  } else {    helpCommand.getHelp(sender);  }  return true;}  }
class C{  public static void ensurePoolCapacity(int minCapacity){  pool.ensureCapacity(minCapacity);}  }
class C{  @Override public boolean isOperational(){  return inputStreams.get(key) != null;}  }
class C{  public void close(){  closeParent();}  }
class C{  @Override protected AdminResponse createResponse(DistributionManager dm){  return RefreshMemberSnapshotResponse.create(dm,this.getSender());}  }
class C{  @SuppressWarnings("unchecked") private static List<String> launderStringsList(List<?> incoming){  return (List<String>)incoming;}  }
class C{  public void loadFile(String filename) throws ParserConfigurationException, SAXException, IOException {  DocumentBuilder builder=DocumentBuilderFactory.newInstance().newDocumentBuilder();  document=builder.parse(new File(filename));}  }
class C{  public LocationMenuItem(String text,int mnemonic){  super(text,mnemonic);  this.addActionListener(this);}  }
class C{  Object toType(String value,String pattern,Locale locale){  Calendar calendar=toCalendar(value,pattern,locale);  return toType(calendar);}  }
class C{  public SQLDeArger(String sql){  this(sql,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:30.538 -0500",hash_original_method="68A91D72405A4CE5DF9B72D6FF4E6DC9",hash_generated_method="CD365C287D094C537219CE8949A95CAD") static public boolean isLargeRAM(){  MemInfoReader reader=new MemInfoReader();  reader.readMemInfo();  if (reader.getTotalSize() >= (640 * 1024 * 1024)) {    return true;  }  return false;}  }
class C{  public void forEachDstAtop(Allocation ain,Allocation aout){  blend(10,ain,aout);}  }
class C{  @Override public void write(int b){  int newCnt=cnt + 1;  if (newCnt > buf.length)   buf=Arrays.copyOf(buf,Math.max(buf.length << 1,newCnt));  buf[cnt]=(byte)b;  cnt=newCnt;}  }
class C{  public Iterator iterator(){  return nodes.iterator();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.DEFAULT_TRIGGER;}  }
class C{  public void adjustExcessCollectionAmount(final List<Installment> installments,final Map<Installment,Set<EgDemandDetails>> newDemandDetailsByInstallment,Ptdemand ptDemand){  LOGGER.info("Entered into adjustExcessCollectionAmount");  LOGGER.info("adjustExcessCollectionAmount: installments - " + installments + ", newDemandDetailsByInstallment.size - "+ newDemandDetailsByInstallment.size());  final Set<String> demandReasons=new LinkedHashSet<String>(Arrays.asList(DEMANDRSN_CODE_PENALTY_FINES,DEMANDRSN_CODE_GENERAL_TAX,DEMANDRSN_CODE_VACANT_TAX,DEMANDRSN_CODE_EDUCATIONAL_CESS,DEMANDRSN_CODE_LIBRARY_CESS,DEMANDRSN_CODE_UNAUTHORIZED_PENALTY));  if (!excessCollAmtMap.isEmpty()) {    adjustCollection(installments,newDemandDetailsByInstallment,demandReasons,ptDemand);  }  LOGGER.info("Excess collection adjustment is successfully completed..");  LOGGER.debug("Exiting from adjustExcessCollectionAmount");}  }
class C{  @Override public boolean supportsSelectForUpdate(){  debugCodeCall("supportsSelectForUpdate");  return true;}  }
class C{  public void addCandidateHarvester(CandidateHarvester harvester){  if (harvester.isHostHarvester())   hostHarvesters.add(harvester); else   harvesters.add(harvester);}  }
class C{  public static String newString(int[] codePoints,int offset,int count){  if (count < 0) {    throw new IllegalArgumentException();  }  char[] chars=new char[count];  int w=0;  for (int r=offset, e=offset + count; r < e; ++r) {    int cp=codePoints[r];    if (cp < 0 || cp > 0x10ffff) {      throw new IllegalArgumentException();    }    while (true) {      try {        if (cp < 0x010000) {          chars[w]=(char)cp;          w++;        } else {          chars[w]=(char)(LEAD_SURROGATE_OFFSET_ + (cp >> LEAD_SURROGATE_SHIFT_));          chars[w + 1]=(char)(TRAIL_SURROGATE_MIN_VALUE + (cp & TRAIL_SURROGATE_MASK_));          w+=2;        }        break;      } catch (      IndexOutOfBoundsException ex) {        int newlen=(int)(Math.ceil((double)codePoints.length * (w + 2) / (r - offset + 1)));        char[] temp=new char[newlen];        System.arraycopy(chars,0,temp,0,w);        chars=temp;      }    }  }  return new String(chars,0,w);}  }
class C{  public float update(){  value=(float)(Math.sin(phase) * amp) + offset;  cyclePhase(frequency + fmod.update());  return value;}  }
class C{  public static int maxIndex(double[] doubles){  double maximum=0;  int maxIndex=0;  for (int i=0; i < doubles.length; i++) {    if ((i == 0) || (doubles[i] > maximum)) {      maxIndex=i;      maximum=doubles[i];    }  }  return maxIndex;}  }
class C{  public static void dumpTo(Resource res,boolean live) throws IOException {  MBeanServer mbserver=ManagementFactory.getPlatformMBeanServer();  HotSpotDiagnosticMXBean mxbean=ManagementFactory.newPlatformMXBeanProxy(mbserver,"com.sun.management:type=HotSpotDiagnostic",HotSpotDiagnosticMXBean.class);  String path;  Resource tmp=null;  if (res instanceof FileResource)   path=res.getAbsolutePath(); else {    tmp=SystemUtil.getTempFile("hprof",false);    path=tmp.getAbsolutePath();  }  try {    mxbean.dumpHeap(path,live);  }  finally {    if (tmp != null && tmp.exists()) {      tmp.moveTo(res);    }  }}  }
class C{  private List<Trip> filterTrips(List<Trip> originalDemand){  List<Trip> distanceFilteredTrips=new ArrayList<>();  for (  Trip trip : originalDemand) {    if (trip.distance >= Constants.DISTANCE_MIN_REPLACE && trip.distance <= Constants.DISTANCE_MAX_REPLACE) {      distanceFilteredTrips.add(trip);    }  }  List<Id> agents=getAllAgents(distanceFilteredTrips);  log.info("Sample demand...");  long shareToRemove=Math.round(agents.size() * (1 - shareOfOriginalAgentsServedByAV));  for (int i=0; i < shareToRemove; i++) {    agents.remove(random.nextInt(agents.size()));  }  Set<Id> sampledAgents=new HashSet<>();  sampledAgents.addAll(agents);  List<Trip> filteredTrips=new ArrayList<>();  for (  Trip trip : distanceFilteredTrips) {    if (sampledAgents.contains(trip.agentId)) {      filteredTrips.add(trip);    }  }  log.info("Sample demand... done.");  return filteredTrips;}  }
class C{  private void init(OutputStream out,String encoding) throws UnsupportedEncodingException, IOException {  internalOut=new OutputStreamWriter(out,encoding);  if ("UTF-8".equals(encoding)) {    if (getWriteUtf8BOM()) {      out.write(UTF8_BOM,0,UTF8_BOM.length);    }  } else   if ("UTF-16LE".equals(encoding)) {    out.write(UTF16LE_BOM,0,UTF16LE_BOM.length);  } else   if ("UTF-16BE".equals(encoding)) {    out.write(UTF16BE_BOM,0,UTF16BE_BOM.length);  } else   if ("UTF-32LE".equals(encoding)) {    out.write(UTF32LE_BOM,0,UTF32LE_BOM.length);  } else   if ("UTF-32".equals(encoding) || "UTF-32BE".equals(encoding)) {    out.write(UTF32BE_BOM,0,UTF32BE_BOM.length);  }}  }
class C{  public boolean isSetStoreName(){  return this.storeName != null;}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public void otherAnimationChanged(Element e,String type){  Iterator i=animatedAttributeListeners.iterator();  while (i.hasNext()) {    AnimatedAttributeListener aal=(AnimatedAttributeListener)i.next();    aal.otherAnimationChanged(e,type);  }}  }
class C{  public void addEllipse(int x1,int y1,int majorAxisSpan,int minorAxisSpan,float rotateAngle,LinkProperties properties) throws IOException {  LinkEllipse.write(x1,y1,majorAxisSpan,minorAxisSpan,rotateAngle,properties,link.dos);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:29.459 -0500",hash_original_method="BF3D50DD939D834A7DF75489B00C6690",hash_generated_method="DCFACEE3BA254C7BC8C98F4F5AB6DDB7") public static byte parseByte(String string,int radix) throws NumberFormatException {  if (DroidSafeAndroidRuntime.control)   throw new NumberFormatException("Value out of range for byte: \"" + string + radix+ "\"");  return (byte)(string.getTaintInt() + radix);}  }
class C{  public static byte[] serializeObject(Object report){  if (report == null) {    return null;  }  ByteArrayOutputStream byteOut=new ByteArrayOutputStream();  ObjectOutputStream objOut=null;  try {    objOut=new ObjectOutputStream(byteOut);    objOut.writeObject(report);  } catch (  IOException e) {    logger.logWarn(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.WARN_REPORT_RESULT_CACHE);    byteOut=new ByteArrayOutputStream();  } finally {    try {      if (objOut != null) {        objOut.close();      }    } catch (    IOException e) {      logger.logWarn(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.WARN_REPORT_RESULT_CACHE);      byteOut=new ByteArrayOutputStream();    }  }  return byteOut.toByteArray();}  }
class C{  public String toString(int maxKeysToPrint){  return asPriorityQueue().toString(maxKeysToPrint,false);}  }
class C{  synchronized int lookup(final Object tx,final boolean insert){  if (tx == null) {    throw new IllegalArgumentException("transaction object is null");  }  Integer index=(Integer)mapping.get(tx);  if (index == null) {    if (insert) {      final int capacity=capacity();      final int nvertices=mapping.size();      if (nvertices == capacity) {        throw new MultiprogrammingCapacityExceededException("capacity=" + capacity + ", nvertices="+ nvertices);      }      index=(Integer)indices.remove(0);      mapping.put(tx,index);      final int ndx=index.intValue();      if (transactions[ndx] != null) {        throw new AssertionError();      }      transactions[ndx]=tx;    } else {      return -1;    }  }  return index.intValue();}  }
class C{  public ProtocolException(){  super();}  }
class C{  public boolean isRollover(){  Boolean rollover=(Boolean)getClientProperty("JToolBar.isRollover");  if (rollover != null) {    return rollover.booleanValue();  }  return false;}  }
class C{  public LazyFutureStream<T> futureStream(LazyReact s){  return s.fromStream(topic.stream());}  }
class C{  public void stop(){  if (mLogger.isActivated()) {    mLogger.debug("Stop session timer for session " + mSession.getId());  }  stopTimer();}  }
class C{  public DrawerBuilder withHeader(@NonNull View headerView){  this.mHeaderView=headerView;  return this;}  }
class C{  private void checkShutdownAccess(){  SecurityManager security=System.getSecurityManager();  if (security != null) {    security.checkPermission(shutdownPerm);    final ReentrantLock mainLock=this.mainLock;    mainLock.lock();    try {      for (      Worker w : workers)       security.checkAccess(w.thread);    }  finally {      mainLock.unlock();    }  }}  }
class C{  public void updateEditorPanel(Editor panel){  if (panelsList.size() == 0) {    return;  }  for (int i=0; i < panelsList.size(); i++) {    Object o=panelsList.get(i);    if (o == panel) {      JCheckBoxMenuItem r=(JCheckBoxMenuItem)panelsSubMenu.getItem(i);      if (panel instanceof LayoutEditor) {        if (panel.isVisible()) {          r.setSelected(true);        } else {          r.setSelected(false);        }      } else {        if (panel.getTargetFrame().isVisible()) {          r.setSelected(true);        } else {          r.setSelected(false);        }      }      return;    }  }}  }
class C{  public Builder addUnicodeLocaleAttribute(String attribute){  try {    localeBuilder.addUnicodeLocaleAttribute(attribute);  } catch (  LocaleSyntaxException e) {    throw new IllformedLocaleException(e.getMessage(),e.getErrorIndex());  }  return this;}  }
class C{  private Cluster<DendrogramModel> makeSingletonCluster(DBIDRef lead,double depth){  final String name="obj_" + DBIDUtil.toString(lead);  return new Cluster<>(name,DBIDUtil.deref(lead),new DendrogramModel(depth));}  }
class C{  @DSSpec(DSCat.INTERNET) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:08.622 -0500",hash_original_method="E1471735BF64AF2EDFAE20D8138E7876",hash_generated_method="FDB570B2CBC178F03F604F889C186F51") @Override public void connect(SocketAddress endpoint,int timeout) throws IOException {  super.connect(endpoint,timeout);  init();}  }
class C{  private static char charAt(String s,int i){  if (i >= s.length()) {    return 0;  }  return s.charAt(i);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Pyramid(){  super();}  }
class C{  public void testRenameDirectorySourceMissingPartially() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR),null);  create(igfs,paths(DIR),null);  igfs.rename(SUBDIR,SUBDIR2);  checkExist(igfs,igfsSecondary,SUBDIR2);  checkNotExist(igfs,igfsSecondary,SUBDIR);}  }
class C{  public static Security pskBootstrap(String serverUri,byte[] pskIdentity,byte[] privateKey){  return new Security(serverUri,true,0,pskIdentity.clone(),new byte[0],privateKey.clone(),0);}  }
class C{  public Angle add(Angle other){  return add(other.radians);}  }
class C{  public XMLReaderAdapter(XMLReader xmlReader){  setup(xmlReader);}  }
class C{  public void dup2(){  mv.visitInsn(Opcodes.DUP2);}  }
class C{  public static void sendEmail(Context context,final String receiver,final String subject,final String text){  sendEmail(context,new String[]{receiver},subject,text,null,null,null);}  }
class C{  public Info_Column(String colHeader,String colSQL,Class<?> colClass){  super(colHeader,colSQL,colClass);}  }
class C{  public void run(){  System.err.println("ready to service...");  for (; ; )   try {    ServiceThread th=new ServiceThread(this,socket.accept());    th.start();  } catch (  IOException e) {    logging(e.toString());  }}  }
class C{  @Override public void onAdded(final StendhalRPZone zone){  super.onAdded(zone);  zone.addMovementListener(this);}  }
class C{  private void makeColors(){  colors.clear();  Iterator<Entry<Long,StreamInfoHistoryItem>> it=history.entrySet().iterator();  String prevStatus=null;  Color currentColor=FIRST_COLOR;  while (it.hasNext()) {    Entry<Long,StreamInfoHistoryItem> entry=it.next();    long time=entry.getKey();    StreamInfoHistoryItem item=entry.getValue();    String newStatus=item.getStatusAndGame();    if (prevStatus != null && newStatus != null && !prevStatus.equals(newStatus)) {      if (currentColor == FIRST_COLOR) {        currentColor=SECOND_COLOR;      } else {        currentColor=FIRST_COLOR;      }    }    colors.put(time,currentColor);    if (newStatus != null) {      prevStatus=newStatus;    }  }}  }
class C{  public static float min(final float a,final float b,final float c){  return Math.min(Math.min(a,b),c);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node child;  String childName;  int length;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  length=(int)employeeList.getLength();  child=employeeList.item(0);  childName=child.getNodeName();  if (equals(13,length)) {    assertEquals("childName_w_whitespace","#text",childName);  } else {    assertEqualsAutoCase("element","childName_wo_whitespace","em",childName);  }}  }
class C{  @JsonProperty("password") public Credentials withPassword(String password){  this.password=password;  return this;}  }
class C{  public AttrContextEnv(JCTree tree,AttrContext info){  super(tree,info);}  }
class C{  public void removeAttribute(String name){  for (int i=0; i < this.attributes.size(); i++) {    XMLAttribute attr=(XMLAttribute)this.attributes.get(i);    if (attr.getFullName().equals(name)) {      this.attributes.remove(i);      return;    }  }}  }
class C{  public void removeErrorListener(ActionListener<NetworkEvent> e){  if (errorListeners == null) {    return;  }  errorListeners.removeListener(e);}  }
class C{  public void exec(final String service,final String action,final String callbackId,final String rawArgs){  CordovaPlugin plugin=getPlugin(service);  if (plugin == null) {    Log.d(TAG,"exec() call to unknown plugin: " + service);    PluginResult cr=new PluginResult(PluginResult.Status.CLASS_NOT_FOUND_EXCEPTION);    app.sendPluginResult(cr,callbackId);    return;  }  CallbackContext callbackContext=new CallbackContext(callbackId,app);  try {    long pluginStartTime=System.currentTimeMillis();    boolean wasValidAction=plugin.execute(action,rawArgs,callbackContext);    long duration=System.currentTimeMillis() - pluginStartTime;    if (duration > SLOW_EXEC_WARNING_THRESHOLD) {      Log.w(TAG,"THREAD WARNING: exec() call to " + service + "."+ action+ " blocked the main thread for "+ duration+ "ms. Plugin should use CordovaInterface.getThreadPool().");    }    if (!wasValidAction) {      PluginResult cr=new PluginResult(PluginResult.Status.INVALID_ACTION);      callbackContext.sendPluginResult(cr);    }  } catch (  JSONException e) {    PluginResult cr=new PluginResult(PluginResult.Status.JSON_EXCEPTION);    callbackContext.sendPluginResult(cr);  }catch (  Exception e) {    Log.e(TAG,"Uncaught exception from plugin",e);    callbackContext.error(e.getMessage());  }}  }
class C{  protected int proxiedStep(RouteInfo plan,RouteInfo fact){  if (fact.getHopCount() <= 1)   return UNREACHABLE;  if (!plan.getTargetHost().equals(fact.getTargetHost()))   return UNREACHABLE;  final int phc=plan.getHopCount();  final int fhc=fact.getHopCount();  if (phc < fhc)   return UNREACHABLE;  for (int i=0; i < fhc - 1; i++) {    if (!plan.getHopTarget(i).equals(fact.getHopTarget(i)))     return UNREACHABLE;  }  if (phc > fhc)   return TUNNEL_PROXY;  if ((fact.isTunnelled() && !plan.isTunnelled()) || (fact.isLayered() && !plan.isLayered()))   return UNREACHABLE;  if (plan.isTunnelled() && !fact.isTunnelled())   return TUNNEL_TARGET;  if (plan.isLayered() && !fact.isLayered())   return LAYER_PROTOCOL;  if (plan.isSecure() != fact.isSecure())   return UNREACHABLE;  return COMPLETE;}  }
class C{  public Jetty7xStandaloneLocalConfigurationCapability(){  this.propertySupportMap.put(DatasourcePropertySet.DATASOURCE,Boolean.TRUE);}  }
class C{  static public void assertSameIterationAnyOrder(final Resource[] expected,final CloseableIteration<?,? extends Exception> actual) throws Exception {  assertSameIterationAnyOrder("",expected,actual);}  }
class C{  public static String unidecode(final String s){  StringBuilder sb=new StringBuilder();  String[] map;  for (int i=0; i < s.length(); i++) {    int codepoint=s.codePointAt(i);    int hi=(codepoint >> 8) & 0xff;    int low=codepoint & 0xff;    map=cache[hi];    if (null == map) {switch (hi) {case 0x00:        map=X00.map;      break;case 0x01:    map=X01.map;  break;case 0x02:map=X02.map;break;case 0x03:map=X03.map;break;case 0x04:map=X04.map;break;case 0x05:map=X05.map;break;case 0x06:map=X06.map;break;case 0x07:map=X07.map;break;case 0x09:map=X09.map;break;case 0x0a:map=X0a.map;break;case 0x0b:map=X0b.map;break;case 0x0c:map=X0c.map;break;case 0x0d:map=X0d.map;break;case 0x0e:map=X0e.map;break;case 0x0f:map=X0f.map;break;case 0x10:map=X10.map;break;case 0x11:map=X11.map;break;case 0x12:map=X12.map;break;case 0x13:map=X13.map;break;case 0x14:map=X14.map;break;case 0x15:map=X15.map;break;case 0x16:map=X16.map;break;case 0x17:map=X17.map;break;case 0x18:map=X18.map;break;case 0x1e:map=X1e.map;break;case 0x1f:map=X1f.map;break;case 0x20:map=X20.map;break;case 0x21:map=X21.map;break;case 0x22:map=X22.map;break;case 0x23:map=X23.map;break;case 0x24:map=X24.map;break;case 0x25:map=X25.map;break;case 0x26:map=X26.map;break;case 0x27:map=X27.map;break;case 0x28:map=X28.map;break;case 0x2e:map=X2e.map;break;case 0x2f:map=X2f.map;break;case 0x30:map=X30.map;break;case 0x31:map=X31.map;break;case 0x32:map=X32.map;break;case 0x33:map=X33.map;break;case 0x4d:map=X4d.map;break;case 0x4e:map=X4e.map;break;case 0x4f:map=X4f.map;break;case 0x50:map=X50.map;break;case 0x51:map=X51.map;break;case 0x52:map=X52.map;break;case 0x53:map=X53.map;break;case 0x54:map=X54.map;break;case 0x55:map=X55.map;break;case 0x56:map=X56.map;break;case 0x57:map=X57.map;break;case 0x58:map=X58.map;break;case 0x59:map=X59.map;break;case 0x5a:map=X5a.map;break;case 0x5b:map=X5b.map;break;case 0x5c:map=X5c.map;break;case 0x5d:map=X5d.map;break;case 0x5e:map=X5e.map;break;case 0x5f:map=X5f.map;break;case 0x60:map=X60.map;break;case 0x61:map=X61.map;break;case 0x62:map=X62.map;break;case 0x63:map=X63.map;break;case 0x64:map=X64.map;break;case 0x65:map=X65.map;break;case 0x66:map=X66.map;break;case 0x67:map=X67.map;break;case 0x68:map=X68.map;break;case 0x69:map=X69.map;break;case 0x6a:map=X6a.map;break;case 0x6b:map=X6b.map;break;case 0x6c:map=X6c.map;break;case 0x6d:map=X6d.map;break;case 0x6e:map=X6e.map;break;case 0x6f:map=X6f.map;break;case 0x70:map=X70.map;break;case 0x71:map=X71.map;break;case 0x72:map=X72.map;break;case 0x73:map=X73.map;break;case 0x74:map=X74.map;break;case 0x75:map=X75.map;break;case 0x76:map=X76.map;break;case 0x77:map=X77.map;break;case 0x78:map=X78.map;break;case 0x79:map=X79.map;break;case 0x7a:map=X7a.map;break;case 0x7b:map=X7b.map;break;case 0x7c:map=X7c.map;break;case 0x7d:map=X7d.map;break;case 0x7e:map=X7e.map;break;case 0x7f:map=X7f.map;break;case 0x80:map=X80.map;break;case 0x81:map=X81.map;break;case 0x82:map=X82.map;break;case 0x83:map=X83.map;break;case 0x84:map=X84.map;break;case 0x85:map=X85.map;break;case 0x86:map=X86.map;break;case 0x87:map=X87.map;break;case 0x88:map=X88.map;break;case 0x89:map=X89.map;break;case 0x8a:map=X8a.map;break;case 0x8b:map=X8b.map;break;case 0x8c:map=X8c.map;break;case 0x8d:map=X8d.map;break;case 0x8e:map=X8e.map;break;case 0x8f:map=X8f.map;break;case 0x90:map=X90.map;break;case 0x91:map=X91.map;break;case 0x92:map=X92.map;break;case 0x93:map=X93.map;break;case 0x94:map=X94.map;break;case 0x95:map=X95.map;break;case 0x96:map=X96.map;break;case 0x97:map=X97.map;break;case 0x98:map=X98.map;break;case 0x99:map=X99.map;break;case 0x9a:map=X9a.map;break;case 0x9b:map=X9b.map;break;case 0x9c:map=X9c.map;break;case 0x9d:map=X9d.map;break;case 0x9e:map=X9e.map;break;case 0x9f:map=X9f.map;break;case 0xa0:map=Xa0.map;break;case 0xa1:map=Xa1.map;break;case 0xa2:map=Xa2.map;break;case 0xa3:map=Xa3.map;break;case 0xa4:map=Xa4.map;break;case 0xac:map=Xac.map;break;case 0xad:map=Xad.map;break;case 0xae:map=Xae.map;break;case 0xaf:map=Xaf.map;break;case 0xb0:map=Xb0.map;break;case 0xb1:map=Xb1.map;break;case 0xb2:map=Xb2.map;break;case 0xb3:map=Xb3.map;break;case 0xb4:map=Xb4.map;break;case 0xb5:map=Xb5.map;break;case 0xb6:map=Xb6.map;break;case 0xb7:map=Xb7.map;break;case 0xb8:map=Xb8.map;break;case 0xb9:map=Xb9.map;break;case 0xba:map=Xba.map;break;case 0xbb:map=Xbb.map;break;case 0xbc:map=Xbc.map;break;case 0xbd:map=Xbd.map;break;case 0xbe:map=Xbe.map;break;case 0xbf:map=Xbf.map;break;case 0xc0:map=Xc0.map;break;case 0xc1:map=Xc1.map;break;case 0xc2:map=Xc2.map;break;case 0xc3:map=Xc3.map;break;case 0xc4:map=Xc4.map;break;case 0xc5:map=Xc5.map;break;case 0xc6:map=Xc6.map;break;case 0xc7:map=Xc7.map;break;case 0xc8:map=Xc8.map;break;case 0xc9:map=Xc9.map;break;case 0xca:map=Xca.map;break;case 0xcb:map=Xcb.map;break;case 0xcc:map=Xcc.map;break;case 0xcd:map=Xcd.map;break;case 0xce:map=Xce.map;break;case 0xcf:map=Xcf.map;break;case 0xd0:map=Xd0.map;break;case 0xd1:map=Xd1.map;break;case 0xd2:map=Xd2.map;break;case 0xd3:map=Xd3.map;break;case 0xd4:map=Xd4.map;break;case 0xd5:map=Xd5.map;break;case 0xd6:map=Xd6.map;break;case 0xd7:map=Xd7.map;break;case 0xf9:map=Xf9.map;break;case 0xfa:map=Xfa.map;break;case 0xfb:map=Xfb.map;break;case 0xfc:map=Xfc.map;break;case 0xfd:map=Xfd.map;break;case 0xfe:map=Xfe.map;break;case 0xff:map=Xff.map;break;default :continue;}cache[hi]=map;}if (low < map.length) {sb.append(map[low]);}}return sb.toString();}  }
class C{  public void onReduceSetup() throws IOException, InterruptedException {}  }
class C{  private void ExtractUniprocess(AST.Uniprocess ast,String context){  if (ast.prcds.size() > 0)   InsertSym(GLOBAL,"stack","","",0,0);  for (int i=0; i < ast.decls.size(); i++)   ExtractVarDecl((AST.VarDecl)ast.decls.elementAt(i),"");  for (int i=0; i < ast.prcds.size(); i++)   ExtractProcedure((AST.Procedure)ast.prcds.elementAt(i),"");  if (ast.body.size() > 0) {    AST.LabeledStmt ls=(AST.LabeledStmt)ast.body.elementAt(0);    iPC=ls.label;  }  for (int i=0; i < ast.body.size(); i++) {    ExtractLabeledStmt((AST.LabeledStmt)ast.body.elementAt(i),"","");  }}  }
class C{  public void execShardIntervalTest(String name,int channelCount,EventProducer producer,int maxOfflineInterval) throws Exception {  logger.info("##### " + name + " #####");  logger.info("Producer properties: " + producer.toString());  setupPipeline(name,channelCount,maxOfflineInterval,false,10000,-1);  THL thl=(THL)pipeline.getStore("thl");  InMemoryTransactionalQueue mq=(InMemoryTransactionalQueue)pipeline.getStore("multi-queue");  RandomCommitAction ca=new RandomCommitAction(50);  mq.setCommitAction(ca);  EventProducerTask producerTask=new EventProducerTask(producer,thl);  Thread producerThread=new Thread(producerTask);  producerThread.start();  EventConsumerTask consumerTask=new EventConsumerTask(mq,producer.getExpectedEvents());  Thread consumerThread=new Thread(consumerTask);  consumerThread.start();  producerThread.join(120000);  int eventsProduced=producerTask.getEvents();  long maxSeqnoProduced=producerTask.getMaxSeqno();  if (producerTask.getException() != null)   throw producerTask.getException(); else   if (!producerTask.isDone()) {    throw new Exception("Producer task did not complete: maxSeqno=" + maxSeqnoProduced + " events="+ eventsProduced);  }  logger.info("Finished writing events to log: events=" + eventsProduced + " maxSeqno="+ maxSeqnoProduced);  this.confirmCommitted(maxSeqnoProduced,120000);  consumerThread.join(60000);  int eventsConsumed=consumerTask.getEvents();  long maxSeqnoConsumed=consumerTask.getMaxSeqno();  if (consumerTask.getException() != null)   throw consumerTask.getException(); else   if (!consumerTask.isDone()) {    throw new Exception("Consumer task did not complete: maxSeqno=" + maxSeqnoProduced + " events="+ eventsProduced);  }  logger.info("Finished reading events from log: events=" + eventsConsumed + " maxSeqno="+ maxSeqnoConsumed);  Assert.assertEquals("Checking event count consumed",eventsProduced,eventsConsumed);  Assert.assertEquals("Checking max seqno consumed",maxSeqnoProduced,maxSeqnoConsumed);}  }
class C{  @Deprecated public void visitMethodInsn(int opcode,String owner,String name,String desc){  if (api >= Opcodes.ASM5) {    boolean itf=opcode == Opcodes.INVOKEINTERFACE;    visitMethodInsn(opcode,owner,name,desc,itf);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc);  }}  }
class C{  public static void header(HttpResponse response,String name,String value){  response.getHeaders().put(name,value);}  }
class C{  public QuickAdapter(int layoutResId,List<T> data){  this(layoutResId,data,ISelectable.SELECT_MODE_SINGLE);}  }
class C{  public MGRSCoord(Angle latitude,Angle longitude,String MGRSString){  if (latitude == null || longitude == null) {    String message=Logging.getMessage("nullValue.LatitudeOrLongitudeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (MGRSString == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (MGRSString.length() == 0) {    String message=Logging.getMessage("generic.StringIsEmpty");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.latitude=latitude;  this.longitude=longitude;  this.MGRSString=MGRSString;}  }
class C{  private synchronized void processTagsForArticleUpdate(final JSONObject oldArticle,final JSONObject newArticle,final JSONObject author) throws Exception {  final String oldArticleId=oldArticle.getString(Keys.OBJECT_ID);  final List<JSONObject> oldTags=tagRepository.getByArticleId(oldArticleId);  final String tagsString=newArticle.getString(Article.ARTICLE_TAGS);  String[] tagStrings=tagsString.split(",");  final List<JSONObject> newTags=new ArrayList<JSONObject>();  for (int i=0; i < tagStrings.length; i++) {    final String tagTitle=tagStrings[i].trim();    JSONObject newTag=tagRepository.getByTitle(tagTitle);    if (null == newTag) {      newTag=new JSONObject();      newTag.put(Tag.TAG_TITLE,tagTitle);    }    newTags.add(newTag);  }  final List<JSONObject> tagsDropped=new ArrayList<JSONObject>();  final List<JSONObject> tagsNeedToAdd=new ArrayList<JSONObject>();  for (  final JSONObject newTag : newTags) {    final String newTagTitle=newTag.getString(Tag.TAG_TITLE);    if (!tagExists(newTagTitle,oldTags)) {      LOGGER.log(Level.DEBUG,"Tag need to add[title={0}]",newTagTitle);      tagsNeedToAdd.add(newTag);    }  }  for (  final JSONObject oldTag : oldTags) {    final String oldTagTitle=oldTag.getString(Tag.TAG_TITLE);    if (!tagExists(oldTagTitle,newTags)) {      LOGGER.log(Level.DEBUG,"Tag dropped[title={0}]",oldTag);      tagsDropped.add(oldTag);    }  }  final int articleCmtCnt=oldArticle.getInt(Article.ARTICLE_COMMENT_CNT);  for (  final JSONObject tagDropped : tagsDropped) {    final String tagId=tagDropped.getString(Keys.OBJECT_ID);    final int refCnt=tagDropped.getInt(Tag.TAG_REFERENCE_CNT);    tagDropped.put(Tag.TAG_REFERENCE_CNT,refCnt - 1);    final int tagCmtCnt=tagDropped.getInt(Tag.TAG_COMMENT_CNT);    tagDropped.put(Tag.TAG_COMMENT_CNT,tagCmtCnt - articleCmtCnt);    tagRepository.update(tagId,tagDropped);  }  final String[] tagIdsDropped=new String[tagsDropped.size()];  for (int i=0; i < tagIdsDropped.length; i++) {    final JSONObject tag=tagsDropped.get(i);    final String id=tag.getString(Keys.OBJECT_ID);    tagIdsDropped[i]=id;  }  if (0 != tagIdsDropped.length) {    removeTagArticleRelations(oldArticleId,tagIdsDropped);  }  tagStrings=new String[tagsNeedToAdd.size()];  for (int i=0; i < tagStrings.length; i++) {    final JSONObject tag=tagsNeedToAdd.get(i);    final String tagTitle=tag.getString(Tag.TAG_TITLE);    tagStrings[i]=tagTitle;  }  newArticle.put(Article.ARTICLE_COMMENT_CNT,articleCmtCnt);  tag(tagStrings,newArticle,author);}  }
class C{  public void callSerially(Runnable r){  if (codenameOneRunning) {synchronized (lock) {      pendingSerialCalls.add(r);      lock.notifyAll();    }  } else {    r.run();  }}  }
class C{  public void dup2(){  mv.visitInsn(Opcodes.DUP2);}  }
class C{  public XdrOutputStream(OutputStream out,boolean buffered){  if (buffered) {    this.out=new BufferedOutputStream(out,BUF_SIZE);  } else {    this.out=out;  }}  }
class C{  public void ping() throws SQLException {  pingInternal(true,0);}  }
class C{  protected ImportSpecifierImpl(){  super();}  }
class C{  private static void calculateThresholdForBlock(byte[] luminances,int subWidth,int subHeight,int width,int height,int[][] blackPoints,BitMatrix matrix){  for (int y=0; y < subHeight; y++) {    int yoffset=y << BLOCK_SIZE_POWER;    int maxYOffset=height - BLOCK_SIZE;    if (yoffset > maxYOffset) {      yoffset=maxYOffset;    }    for (int x=0; x < subWidth; x++) {      int xoffset=x << BLOCK_SIZE_POWER;      int maxXOffset=width - BLOCK_SIZE;      if (xoffset > maxXOffset) {        xoffset=maxXOffset;      }      int left=cap(x,2,subWidth - 3);      int top=cap(y,2,subHeight - 3);      int sum=0;      for (int z=-2; z <= 2; z++) {        int[] blackRow=blackPoints[top + z];        sum+=blackRow[left - 2] + blackRow[left - 1] + blackRow[left]+ blackRow[left + 1]+ blackRow[left + 2];      }      int average=sum / 25;      thresholdBlock(luminances,xoffset,yoffset,average,width,matrix);    }  }}  }
class C{  public Iterator tuples(){  return new CompositeIterator(edges(),nodes());}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {  }  throw new IllegalStateException();}  }
class C{  public static <T>Observable<T> fluxToObservable(Flux<T> source){  return fluxToFlowable(source).toObservable();}  }
class C{  public boolean isVisible(){  return mVisible;}  }
class C{  public ObjectFactory(){}  }
class C{  public CheckedOutputStream(OutputStream out,Checksum cksum){  super(out);  this.cksum=cksum;}  }
class C{  public boolean isOverwriteCampaign(){  Object oo=get_Value(COLUMNNAME_OverwriteCampaign);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void removeListener(final IMemoryListener listener){  m_listeners.remove(listener);}  }
class C{  public BoxAndWhiskerItem(double mean,double median,double q1,double q3,double minRegularValue,double maxRegularValue,double minOutlier,double maxOutlier,List outliers){  this(new Double(mean),new Double(median),new Double(q1),new Double(q3),new Double(minRegularValue),new Double(maxRegularValue),new Double(minOutlier),new Double(maxOutlier),outliers);}  }
class C{  @Override public boolean isBusy(){  boolean result=false;  for (int i=0; i < m_subFlow.size(); i++) {    Object temp=m_subFlow.elementAt(i);    if (temp instanceof BeanCommon) {      if (((BeanCommon)temp).isBusy()) {        result=true;        break;      }    }  }  return result;}  }
class C{  public void visChanged(VisualizationItem item){  vistree.visChanged(item);}  }
class C{  protected Socket createSocket() throws IOException {  return new java.net.Socket();}  }
class C{  public APIConnectionGroup(ConnectionGroup connectionGroup){  this.identifier=connectionGroup.getIdentifier();  this.parentIdentifier=connectionGroup.getParentIdentifier();  this.name=connectionGroup.getName();  this.type=connectionGroup.getType();  this.activeConnections=connectionGroup.getActiveConnections();  this.attributes=connectionGroup.getAttributes();}  }
class C{  public void controllerRedirectEvent(@Observes ControllerRedirectEvent event){  if (request.getAttribute(SCOPE_ID) != null) {    if (usingCookies()) {      Cookie cookie=new Cookie(COOKIE_NAME,request.getAttribute(SCOPE_ID).toString());      cookie.setPath(mvc.getContextPath());      cookie.setMaxAge(600);      cookie.setHttpOnly(true);      response.addCookie(cookie);    } else {      final ContainerResponseContext crc=((ControllerRedirectEventImpl)event).getContainerResponseContext();      final UriBuilder builder=UriBuilder.fromUri(crc.getStringHeaders().getFirst(HttpHeaders.LOCATION));      builder.queryParam(SCOPE_ID,request.getAttribute(SCOPE_ID).toString());      crc.getHeaders().putSingle(HttpHeaders.LOCATION,builder.build());    }  }}  }
class C{  public void addAddress(String type,String jid,String node,String desc,boolean delivered,String uri){  Address address=new Address(type);  address.setJid(jid);  address.setNode(node);  address.setDescription(desc);  address.setDelivered(delivered);  address.setUri(uri);  addresses.add(address);}  }
class C{  private Finalizer(Class<?> finalizableReferenceClass,ReferenceQueue<Object> queue,PhantomReference<Object> frqReference){  this.queue=queue;  this.finalizableReferenceClassReference=new WeakReference<Class<?>>(finalizableReferenceClass);  this.frqReference=frqReference;}  }
class C{  public static Builder newBuilder(URI sourceUri){  return BUILDER_INSTANCE.new Builder(sourceUri);}  }
class C{  private ScriptUtils(){}  }
class C{  private boolean supportsJMSXDeliveryCount() throws Exception {  ConnectionMetaData metaData=senderConnection.getMetaData();  Enumeration enumeration=metaData.getJMSXPropertyNames();  while (enumeration.hasMoreElements()) {    String jmsxPropertyName=(String)enumeration.nextElement();    if (jmsxPropertyName.equals("JMSXDeliveryCount")) {      return true;    }  }  return false;}  }
class C{  private float readFloat(DataInputStream dis) throws IOException {  int bits=dis.readInt();  bits=((bits & 0xFF000000) >> 24) | ((bits & 0x00FF0000) >> 8) | ((bits & 0x0000FF00) << 8)| ((bits & 0x000000FF) << 24);  return Float.intBitsToFloat(bits);}  }
class C{  @Override public String toString(){  return "Point {" + x + ", "+ y+ "}";}  }
class C{  private static void checkSCS(){  if (!triedToGetMethod) {synchronized (lockReflection) {      triedToGetMethod=true;      try {        setCompressedSizeMethod=java.util.zip.ZipEntry.class.getMethod("setCompressedSize",new Class[]{Long.TYPE});      } catch (      NoSuchMethodException nse) {      }    }  }}  }
class C{  protected void possiblyFixCursor(boolean ltr){  int cursor=Cursor.NE_RESIZE_CURSOR;  if (ltr) {    cursor=Cursor.NW_RESIZE_CURSOR;  }  if (cursor != getCursor().getType()) {    setCursor(Cursor.getPredefinedCursor(cursor));  }}  }
class C{  private void performSimpleOperationsOnCache(IgniteCache<Integer,Integer> cache){  for (int i=100; i < 200; i++)   cache.put(i,i);  for (int i=100; i < 200; i++)   assertEquals(i,(int)cache.get(i));}  }
class C{  public static void reportMethodDescriptor(MethodDescriptor md){  System.out.println("method name: " + md.getName());  System.out.println("     method: " + md.getMethod());}  }
class C{  public Ship(Asteroids asteroids,MutableDouble2D velocity,Double2D location,int tag){  this.velocity=velocity;  this.rotationalVelocity=0;  stopper=asteroids.schedule.scheduleRepeating(this);  orientation=asteroids.random.nextDouble() * Math.PI * 2;  asteroids.field.setObjectLocation(this,location);  GeneralPath gp=new GeneralPath();  gp.moveTo(-2,-2);  gp.lineTo(2,0);  gp.lineTo(-2,2);  gp.lineTo(0,0);  gp.closePath();  shape=gp;  this.tag=tag;}  }
class C{  @Override public int hashCode(){  return this.data.hashCode();}  }
class C{  public Quaternionf rotationTo(float fromDirX,float fromDirY,float fromDirZ,float toDirX,float toDirY,float toDirZ){  x=fromDirY * toDirZ - fromDirZ * toDirY;  y=fromDirZ * toDirX - fromDirX * toDirZ;  z=fromDirX * toDirY - fromDirY * toDirX;  w=(float)Math.sqrt((fromDirX * fromDirX + fromDirY * fromDirY + fromDirZ * fromDirZ) * (toDirX * toDirX + toDirY * toDirY + toDirZ * toDirZ)) + (fromDirX * toDirX + fromDirY * toDirY + fromDirZ * toDirZ);  float invNorm=(float)(1.0 / Math.sqrt(x * x + y * y + z * z + w * w));  if (Float.isInfinite(invNorm)) {    x=toDirY;    y=-toDirX;    z=0.0f;    w=0.0f;    invNorm=(float)(1.0 / Math.sqrt(x * x + y * y));    if (Float.isInfinite(invNorm)) {      x=0.0f;      y=toDirZ;      z=-toDirY;      w=0.0f;      invNorm=(float)(1.0 / Math.sqrt(y * y + z * z));    }  }  x*=invNorm;  y*=invNorm;  z*=invNorm;  w*=invNorm;  return this;}  }
class C{  public double[] computeLocalEntropy2OfPreviousObservations(){  return computeLocalEntropyFromPreviousObservations(discObservations);}  }
class C{  protected boolean isPausable(){  return false;}  }
class C{  public static Table findConsistencyTable(Database conn,String replicatorSchema) throws Exception {  try {    return conn.findTungstenTable(replicatorSchema,ConsistencyTable.TABLE_NAME);  } catch (  Exception e) {    logger.error("Failed to find consistency check table: " + e.getMessage());    throw e;  }}  }
class C{  public static void show(Context context,String toast){  Toast.makeText(context,toast,Toast.LENGTH_SHORT).show();}  }
class C{  public static final boolean raycast(Ray ray,double maxLength,Circle circle,Transform transform,Raycast raycast){  Vector2 s=ray.getStart();  Vector2 d=ray.getDirectionVector();  Vector2 ce=transform.getTransformed(circle.getCenter());  double r=circle.getRadius();  if (circle.contains(s,transform))   return false;  Vector2 sMinusC=s.difference(ce);  double a=d.dot(d);  double b=2 * d.dot(sMinusC);  double c=sMinusC.dot(sMinusC) - r * r;  double inv2a=1.0 / (2.0 * a);  double b24ac=b * b - 4 * a * c;  if (b24ac < 0.0) {    return false;  }  double sqrt=Math.sqrt(b24ac);  double t0=(-b + sqrt) * inv2a;  double t1=(-b - sqrt) * inv2a;  double t=0.0;  if (t0 < 0.0) {    if (t1 < 0.0) {      return false;    } else {      t=t1;    }  } else {    if (t1 < 0.0) {      t=t0;    } else     if (t0 < t1) {      t=t0;    } else {      t=t1;    }  }  if (maxLength > 0.0 && t > maxLength) {    return false;  }  Vector2 p=d.product(t).add(s);  Vector2 n=ce.to(p);  n.normalize();  raycast.point=p;  raycast.normal=n;  raycast.distance=t;  return true;}  }
class C{  public boolean shouldCreateFrame(){  return true;}  }
class C{  public static <EdgeType extends ZyGraphEdge<?,?,?>>void handleEdgeClicks(final AbstractZyGraph<?,?> graph,final EdgeType edge,final MouseEvent event){  Preconditions.checkNotNull(graph,"Error: Graph argument can not be null");  Preconditions.checkNotNull(edge,"Error: Edge argument can not be null");  Preconditions.checkNotNull(event,"Error: Event argument can not be null");  if ((event.getButton() == MouseEvent.BUTTON1) && event.isShiftDown()) {    graph.getGraph().setSelected(edge.getEdge(),!edge.isSelected());  } else   if ((event.getButton() == MouseEvent.BUTTON1) && !event.isShiftDown()) {    if (edge.getSource() != edge.getTarget()) {      final double x=graph.getView().toWorldCoordX(event.getX());      final double y=graph.getView().toWorldCoordY(event.getY());      zoomEdgeNode(graph,edge.getEdge(),x,y);    }  }}  }
class C{  public DeterministicKeyChain(byte[] entropy,String passphrase,long seedCreationTimeSecs){  this(new DeterministicSeed(entropy,passphrase,seedCreationTimeSecs));}  }
class C{  public static void main(String[] args){  run(new TestTagHolderMethod(),ARGS,new String[][]{},new String[][]{});}  }
class C{  public static String deflow(Message m) throws IOException, MessagingException {  ContentType ct=new ContentType(m.getContentType());  String format=ct.getParameter("format");  if (ct.getBaseType().equals("text/plain") && format != null && format.equalsIgnoreCase("flowed")) {    String delSp=ct.getParameter("delsp");    return deflow((String)m.getContent(),delSp != null && delSp.equalsIgnoreCase("yes"));  } else   if (ct.getPrimaryType().equals("text"))   return (String)m.getContent(); else   return null;}  }
class C{  public void unblockRead(){synchronized (this) {    this.notifyAll();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapreturnattrnode.class,args);}  }
class C{  private void pushTerm(BytesRef text) throws IOException {  int limit=Math.min(lastTerm.length(),text.length);  int pos=0;  while (pos < limit && lastTerm.byteAt(pos) == text.bytes[text.offset + pos]) {    pos++;  }  for (int i=lastTerm.length() - 1; i >= pos; i--) {    int prefixTopSize=pending.size() - prefixStarts[i];    if (prefixTopSize >= minItemsInBlock) {      writeBlocks(i + 1,prefixTopSize);      prefixStarts[i]-=prefixTopSize - 1;    }  }  if (prefixStarts.length < text.length) {    prefixStarts=ArrayUtil.grow(prefixStarts,text.length);  }  for (int i=pos; i < text.length; i++) {    prefixStarts[i]=pending.size();  }  lastTerm.copyBytes(text);}  }
class C{  public static Document createXMLValidationList(ValidationResults results,int initRow,Locale locale,List fieldsInfo,String caseSensitive){  Document doc=createDocument(initRow,results,RBUtil.getInstance(locale).getProperty(I18N_VALIDATIONUSECASE_TYPEPROC),"","",fieldsInfo,locale,caseSensitive,0,0);  Element root=doc.getRootElement();  Element nodeList=root.addElement(XML_NODELIST_TEXT);  ScrTypeproc scr=null;  Boolean bool=null;  for (Iterator it=results.getResults().iterator(); it.hasNext(); ) {    scr=(ScrTypeproc)it.next();    if (scr.getEnabled() == 1) {      bool=Boolean.TRUE;    } else {      bool=Boolean.FALSE;    }    addNode(scr.getId().intValue(),scr.getName(),scr.getCode(),"",bool,"",Integer.MIN_VALUE,"",nodeList,"");  }  return doc;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION__TYPE_ARGS:    getTypeArgs().clear();  getTypeArgs().addAll((Collection<? extends TypeRef>)newValue);return;case N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION__TARGET:setTarget((Expression)newValue);return;case N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION__PROPERTY:setProperty((IdentifiableElement)newValue);return;case N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION__PROPERTY_AS_TEXT:setPropertyAsText((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public int hashCode(){  if (mBluetoothLEDevice == null) {    return 0;  }  return mBluetoothLEDevice.hashCode();}  }
class C{  public VerifierException(String s){  super(s);}  }
class C{  void fireFocusGained(Component cmp){  if (cmp.isCellRenderer()) {    return;  }  if (focusListeners != null) {    focusListeners.fireFocus(cmp);  }  focusGainedInternal();  focusGained();  if (isSelectableInteraction()) {    Form f=getComponentForm();    if (f != null) {      f.getMenuBar().addSelectCommand(getSelectCommandText());    }  }}  }
class C{  public static float toFloatValue(Object o,float defaultValue){  if (o instanceof Character)   return (((Character)o).charValue()); else   if (o instanceof Boolean)   return ((((Boolean)o).booleanValue()) ? 1F : 0F); else   if (o instanceof Number)   return (((Number)o).floatValue()); else   if (o instanceof String)   return (float)toDoubleValue(o.toString(),defaultValue); else   if (o instanceof Castable) {    return (float)((Castable)o).castToDoubleValue(defaultValue);  } else   if (o instanceof ObjectWrap)   return toFloatValue(((ObjectWrap)o).getEmbededObject(toFloat(defaultValue)),defaultValue);  return defaultValue;}  }
class C{  public static boolean isNumeric(int displayType){  if (displayType == Amount || displayType == Number || displayType == CostPrice || displayType == Integer || displayType == Quantity)   return true;  return false;}  }
class C{  public LazyReact async(){  return withAsync(true);}  }
class C{  public void affinityFunctionAssignPartitions(long ptr,long outMemPtr,long inMemPtr){  enter();  try {    PlatformCallbackUtils.affinityFunctionAssignPartitions(envPtr,ptr,outMemPtr,inMemPtr);  }  finally {    leave();  }}  }
class C{  public static boolean isWindows8(){  return win8;}  }
class C{  protected final void deferMessage(Message msg){  mSmHandler.deferMessage(msg);}  }
class C{  public static void main(String[] args){  ResultMatrix matrix;  int i;  int n;  matrix=new ResultMatrixSignificance(3,3);  matrix.addHeader("header1","value1");  matrix.addHeader("header2","value2");  matrix.addHeader("header2","value3");  for (i=0; i < matrix.getRowCount(); i++) {    for (n=0; n < matrix.getColCount(); n++) {      matrix.setMean(n,i,(i + 1) * n);      matrix.setStdDev(n,i,((double)(i + 1) * n) / 100);      if (i == n) {        if (i % 2 == 1)         matrix.setSignificance(n,i,SIGNIFICANCE_WIN); else         matrix.setSignificance(n,i,SIGNIFICANCE_LOSS);      }    }  }  System.out.println("\n\n--> " + matrix.getDisplayName());  System.out.println("\n1. complete\n");  System.out.println(matrix.toStringHeader() + "\n");  System.out.println(matrix.toStringMatrix() + "\n");  System.out.println(matrix.toStringKey());  System.out.println("\n2. complete with std deviations\n");  matrix.setShowStdDev(true);  System.out.println(matrix.toStringMatrix());  System.out.println("\n3. cols numbered\n");  matrix.setPrintColNames(false);  System.out.println(matrix.toStringMatrix());  System.out.println("\n4. second col missing\n");  matrix.setColHidden(1,true);  System.out.println(matrix.toStringMatrix());  System.out.println("\n5. last row missing, rows numbered too\n");  matrix.setRowHidden(2,true);  matrix.setPrintRowNames(false);  System.out.println(matrix.toStringMatrix());  System.out.println("\n6. mean prec to 3\n");  matrix.setMeanPrec(3);  matrix.setPrintRowNames(false);  System.out.println(matrix.toStringMatrix());}  }
class C{  public static String extractRequestedDomainName(final String requestURL){  final int domainNameStartIndex=requestURL.indexOf("://") + 3;  String domainName=requestURL.substring(domainNameStartIndex,requestURL.indexOf('/',domainNameStartIndex));  if (domainName.contains(":"))   domainName=domainName.split(":")[0];  return domainName;}  }
class C{  public Throwable(java.lang.String message){}  }
class C{  @Override protected MkCoPTreeNode<O> createNewDirectoryNode(){  return new MkCoPTreeNode<>(dirCapacity,false);}  }
class C{  public static String right(String s,int width,char fillChar){  if (s.length() >= width) {    return s;  }  StringBuffer sb=new StringBuffer(width);  for (int i=width - s.length(); --i >= 0; ) {    sb.append(fillChar);  }  sb.append(s);  return sb.toString();}  }
class C{  public synchronized void dispose(){  if (_outputThread != null) {    _outputThread.interrupt();  }  if (_inputThread != null) {    _inputThread.dispose();  }}  }
class C{  public static void saveOptions(Vector<IBasicOption> options,String file){  try {    JAXBContext jc=JAXBContext.newInstance(GameOptionsXML.class,Option.class,BasicOption.class);    Marshaller marshaller=jc.createMarshaller();    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);    marshaller.setProperty(Marshaller.JAXB_FRAGMENT,true);    marshaller.setProperty("com.sun.xml.internal.bind.xmlHeaders","<?xml version=\"1.0\"?>");    JAXBElement<GameOptionsXML> element=new JAXBElement<>(new QName("options"),GameOptionsXML.class,new GameOptionsXML(options));    marshaller.marshal(element,new File(file));  } catch (  JAXBException ex) {    System.err.println("Error writing XML for game options: " + ex.getMessage());    ex.printStackTrace();  }}  }
class C{  public void tableTags(TagInfo tagInfo){  tagInfo=new TagInfo("table",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineAllowedChildrenTags("tr,tbody,thead,tfoot,col,colgroup,caption");  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags("tr,thead,tbody,tfoot,caption,colgroup,table,p,address,label,abbr,acronym,dfn,kbd,samp,var,cite,code,param,xml");  this.put("table",tagInfo);  tagInfo=new TagInfo("tr",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.optional,Display.block);  tagInfo.defineFatalTags("table");  tagInfo.defineRequiredEnclosingTags("tbody");  tagInfo.defineAllowedChildrenTags("td,th");  tagInfo.defineHigherLevelTags("thead,tfoot");  tagInfo.defineCloseBeforeTags("tr,td,th,caption,colgroup");  this.put("tr",tagInfo);  tagInfo=new TagInfo("td",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineFatalTags("table");  tagInfo.defineRequiredEnclosingTags("tr");  tagInfo.defineCloseBeforeTags("td,th,caption,colgroup");  this.put("td",tagInfo);  tagInfo=new TagInfo("th",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.optional,Display.block);  tagInfo.defineFatalTags("table");  tagInfo.defineRequiredEnclosingTags("tr");  tagInfo.defineCloseBeforeTags("td,th,caption,colgroup");  this.put("th",tagInfo);  tagInfo=new TagInfo("tbody",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.optional,Display.block);  tagInfo.defineFatalTags("table");  tagInfo.defineAllowedChildrenTags("tr,form");  tagInfo.defineCloseBeforeTags("td,th,tr,tbody,thead,tfoot,caption,colgroup");  this.put("tbody",tagInfo);  tagInfo=new TagInfo("thead",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.optional,Display.block);  tagInfo.defineFatalTags("table");  tagInfo.defineAllowedChildrenTags("tr,form");  tagInfo.defineCloseBeforeTags("td,th,tr,tbody,thead,tfoot,caption,colgroup");  this.put("thead",tagInfo);  tagInfo=new TagInfo("tfoot",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.optional,Display.block);  tagInfo.defineFatalTags("table");  tagInfo.defineAllowedChildrenTags("tr,form");  tagInfo.defineCloseBeforeTags("td,th,tr,tbody,thead,tfoot,caption,colgroup");  this.put("tfoot",tagInfo);  tagInfo=new TagInfo("col",ContentType.none,BelongsTo.BODY,false,false,false,CloseTag.forbidden,Display.block);  tagInfo.defineFatalTags("colgroup");  this.put("col",tagInfo);  tagInfo=new TagInfo("colgroup",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.optional,Display.block);  tagInfo.defineFatalTags("table");  tagInfo.defineAllowedChildrenTags("col");  tagInfo.defineCloseBeforeTags("td,th,tr,tbody,thead,tfoot,caption,colgroup");  this.put("colgroup",tagInfo);  tagInfo=new TagInfo("caption",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.inline);  tagInfo.defineFatalTags("table");  tagInfo.defineCloseBeforeTags("td,th,tr,tbody,thead,tfoot,caption,colgroup");  this.put("caption",tagInfo);}  }
class C{  private void generateSummaryTable(){  info.setText(generateSummaryTable(issue,productField.getDisplay(),uomField.getDisplay(),attribute.getDisplay(),toDeliverQty.getDisplay(),deliveredQtyField.getDisplay(),scrapQtyField.getDisplay(),isBackflush(),isOnlyIssue(),isOnlyReceipt()));}  }
class C{  public PreferencesCookieStore(Context context){  cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,0);  cookies=new ConcurrentHashMap<String,Cookie>();  String storedCookieNames=cookiePrefs.getString(COOKIE_NAME_STORE,null);  if (storedCookieNames != null) {    String[] cookieNames=TextUtils.split(storedCookieNames,",");    for (    String name : cookieNames) {      String encodedCookie=cookiePrefs.getString(COOKIE_NAME_PREFIX + name,null);      if (encodedCookie != null) {        Cookie decodedCookie=decodeCookie(encodedCookie);        if (decodedCookie != null) {          cookies.put(name,decodedCookie);        }      }    }    clearExpired(new Date());  }}  }
class C{  private int findSafeEnd(){  for (int i=length - 1; i >= 0; i--)   if (UCharacter.isWhitespace(buffer[i]))   return i + 1;  return -1;}  }
class C{  public TraceCaseActivation_ createTraceCaseActivation_(){  TraceCaseActivation_Impl traceCaseActivation_=new TraceCaseActivation_Impl();  return traceCaseActivation_;}  }
class C{  public static void main(String[] args){  JFrame frame=new JFrame(TabbedPaneDemo.class.getAnnotation(DemoProperties.class).value());  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getContentPane().add(new TabbedPaneDemo());  frame.setPreferredSize(new Dimension(800,600));  frame.pack();  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  @Override public void onReset(){  closeDialog();}  }
class C{  public Mail duplicate(){  return duplicate(name);}  }
class C{  public boolean readBoolean(){  if (isEmpty())   throw new RuntimeException("Reading from empty input stream");  n--;  boolean bit=((buffer >> n) & 1) == 1;  if (n == 0)   fillBuffer();  return bit;}  }
class C{  public void write(int ch) throws IOException {}  }
class C{  void checkLockTurnout(int newState,int oldState,Turnout t){switch (mLockControlTurnoutState) {case ONCLOSED:    if (newState == Turnout.CLOSED) {      setLocked(true);    } else {      setLocked(false);    }  return;case ONTHROWN:if (newState == Turnout.THROWN) {  setLocked(true);} else {  setLocked(false);}return;case ONCHANGE:if (newState != oldState) {if (getLocked()) {setLocked(false);} else {setLocked(true);}}return;default :return;}}  }
class C{  private void removeOldMember(InternalDistributedMember id){  super.markDepartedMember(id);}  }
class C{  public void removeAllElements(){  if (null == m_map)   return;  for (int i=0; i < m_firstFree; i++) {    m_map[i]=DTM.NULL;  }  m_firstFree=0;}  }
class C{  private int scan(int start,int end,String err,String stop){  int p=start;  while (p < end) {    char c=input.charAt(p);    if (err.indexOf(c) >= 0)     return -1;    if (stop.indexOf(c) >= 0)     break;    p++;  }  return p;}  }
class C{  @Deprecated public static ResourceList<Task> convertMiddleEndToFrontEnd(ResourceList<TaskEntity> taskEntities){  ResourceList<Task> tasks=new ResourceList<>();  tasks.setItems(taskEntities.getItems().stream().map(null).collect(Collectors.toList()));  tasks.setNextPageLink(taskEntities.getNextPageLink());  tasks.setPreviousPageLink(taskEntities.getPreviousPageLink());  return tasks;}  }
class C{  public static Test suite(){  return (new TestSuite(OutputTargetsITCase.class));}  }
class C{  @Override public boolean isShown(){  return isShown;}  }
class C{  protected ClassLoader(){  this(getSystemClassLoader());}  }
class C{  public Vector2 mul(Matrix3 mat){  float x=this.x * mat.val[0] + this.y * mat.val[3] + mat.val[6];  float y=this.x * mat.val[1] + this.y * mat.val[4] + mat.val[7];  this.x=x;  this.y=y;  return this;}  }
class C{  default ScanClass scanClass(Path root,String packageRoot,String name,int modifiers){  return null;}  }
class C{  public static double[][] random(int m,int n){  double[][] matres=new double[m][];  for (int i=0; i < m; ++i) {    matres[i]=new double[n];    for (int j=0; j < n; ++j) {      matres[i][j]=Math.random();    }  }  return (matres);}  }
class C{  public void connectionErrorOccurred(ConnectionEvent event){  if (isActive) {    ManagedConnection conn=(ManagedConnection)event.getSource();    ((List)xalistThreadLocal.get()).remove(conn);    TransactionManagerImpl transManager=TransactionManagerImpl.getTransactionManager();    try {      Transaction txn=transManager.getTransaction();      if (txn == null) {        mannPoolCache.returnPooledConnectionToPool(conn);      } else {      }    } catch (    Exception se) {      se.printStackTrace();    }    try {      mannPoolCache.expirePooledConnection(conn);    } catch (    Exception ex) {      String exception="FacetsJCAConnectionManagerImpl::connectionErrorOccured: Exception occured due to " + ex.getMessage();      if (logger.isDebugEnabled()) {        logger.debug(exception,ex);      }    }  }}  }
class C{  private void cmd_find(){  int AD_Table_ID=m_reportEngine.getPrintFormat().getAD_Table_ID();  String title=null;  String tableName=null;  String sql="SELECT t.AD_Tab_ID " + "FROM AD_Tab t" + " INNER JOIN AD_Window w ON (t.AD_Window_ID=w.AD_Window_ID)"+ " INNER JOIN AD_Table tt ON (t.AD_Table_ID=tt.AD_Table_ID) "+ "WHERE tt.AD_Table_ID=? "+ "ORDER BY w.IsDefault DESC, t.SeqNo, ABS (tt.AD_Window_ID-t.AD_Window_ID)";  int AD_Tab_ID=DB.getSQLValue(null,sql,AD_Table_ID);  MClient client=MClient.get(Env.getCtx());  String ASPFilter="";  if (client.isUseASP())   ASPFilter="     AND (   AD_Tab_ID IN ( " + "              SELECT t.AD_Tab_ID " + "                FROM ASP_Tab t, ASP_Window w, ASP_Level l, ASP_ClientLevel cl "+ "               WHERE w.ASP_Level_ID = l.ASP_Level_ID "+ "                 AND cl.AD_Client_ID = " + client.getAD_Client_ID() + "                 AND cl.ASP_Level_ID = l.ASP_Level_ID "+ "                 AND t.ASP_Window_ID = w.ASP_Window_ID "+ "                 AND t.IsActive = 'Y' "+ "                 AND w.IsActive = 'Y' "+ "                 AND l.IsActive = 'Y' "+ "                 AND cl.IsActive = 'Y' "+ "                 AND t.ASP_Status = 'S') "+ "        OR AD_Tab_ID IN ( "+ "              SELECT AD_Tab_ID "+ "                FROM ASP_ClientException ce "+ "               WHERE ce.AD_Client_ID = "+ client.getAD_Client_ID()+ "                 AND ce.IsActive = 'Y' "+ "                 AND ce.AD_Tab_ID IS NOT NULL "+ "                 AND ce.AD_Field_ID IS NULL "+ "                 AND ce.ASP_Status = 'S') "+ "       ) "+ "   AND AD_Tab_ID NOT IN ( "+ "          SELECT AD_Tab_ID "+ "            FROM ASP_ClientException ce "+ "           WHERE ce.AD_Client_ID = "+ client.getAD_Client_ID()+ "             AND ce.IsActive = 'Y' "+ "             AND ce.AD_Tab_ID IS NOT NULL "+ "             AND ce.AD_Field_ID IS NULL "+ "             AND ce.ASP_Status = 'H')";  sql="SELECT Name, TableName FROM AD_Tab_v WHERE AD_Tab_ID=? " + ASPFilter;  if (!Env.isBaseLanguage(Env.getCtx(),"AD_Tab"))   sql="SELECT Name, TableName FROM AD_Tab_vt WHERE AD_Tab_ID=?" + " AND AD_Language='" + Env.getAD_Language(Env.getCtx()) + "' "+ ASPFilter;  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Tab_ID);    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      title=rs.getString(1);      tableName=rs.getString(2);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  GridField[] findFields=null;  if (tableName != null)   findFields=GridField.createFields(m_ctx,m_WindowNo,0,AD_Tab_ID);  if (findFields == null)   bFind.setVisible(false); else {    FindWindow find=new FindWindow(m_WindowNo,title,AD_Table_ID,tableName,"",findFields,1,AD_Tab_ID);    if (!find.isCancel()) {      m_reportEngine.setQuery(find.getQuery());      try {        renderReport();      } catch (      Exception e) {        throw new AdempiereException("Failed to render report",e);      }      revalidate();    }    find=null;  }}  }
class C{  public boolean removeFileExtension(String fileExt){  if (fileExt == null) {    throw new IllegalArgumentException("The given file extension is null.");  }  fileExt=AppUtility.addDotToFileExtension(fileExt);  if (fileExtensionList != null) {    return fileExtensionList.remove(fileExt);  }  return false;}  }
class C{  public boolean isContainerClass(String clz){  return droidSafeContainerClasses.contains(clz);}  }
class C{  public Complex(double a,double b){  this.a=a;  this.b=b;}  }
class C{  @Override public V put(lucee.runtime.type.Collection.Key key,V value){  int hash=hash(key);  return segmentFor(hash).put(key,hash,value,false);}  }
class C{  private boolean waitUntilWorkspaceLockLockedWithQueueLength(String workspaceId,int queueLength){  ReentrantLock lock;  try {    Field locks=MachineBackupManager.class.getDeclaredField("workspacesBackupLocks");    locks.setAccessible(true);    @SuppressWarnings("unchecked") ConcurrentHashMap<String,ReentrantLock> workspacesBackupLocks=(ConcurrentHashMap<String,ReentrantLock>)locks.get(backupManager);    lock=workspacesBackupLocks.get(workspaceId);    if (lock != null) {      while (!lock.isLocked() || lock.getQueueLength() != queueLength) {        sleep(10);      }      return true;    }  } catch (  NoSuchFieldException|IllegalAccessException e) {    LOG.error(e.getLocalizedMessage(),e);  }catch (  InterruptedException ignore) {  }  return false;}  }
class C{  public Builder notificationTitle(String value){  notificationParams.put("title",value);  return this;}  }
class C{  public HeaderCardBuilder value(float newValue) throws HeaderCardException {  if (this.card == null) {    if (scale >= 0) {      this.card=new HeaderCard(this.key.key(),newValue,scale,null);    } else {      this.card=new HeaderCard(this.key.key(),newValue,null);    }    this.header.addLine(this.card);  } else {    if (scale >= 0) {      this.card.setValue(newValue,scale);    } else {      this.card.setValue(newValue);    }  }  return this;}  }
class C{  public String formatAsXml(String contents,String tag){  return "<" + tag + ">"+ contents+ "</"+ tag+ ">";}  }
class C{  public static boolean isLeapYear(int year){  return year % 400 == 0 || (year % 4 == 0 && year % 400 != 0);}  }
class C{  public static void main(String[] args){  JFrame frame=new JFrame();  RandomizerPanel rp=new RandomizerPanel(frame);  rp.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));  rp.fillDefaultValues();  frame.setContentPane(rp);  frame.setVisible(true);  frame.pack();}  }
class C{  public final void consultFile(final String strFileName) throws JIPSyntaxErrorException, IOException {  Consult1.consult(strFileName,this,0);}  }
class C{  static Protein codonToAmino(final DNA c1a,final DNA c2a,final DNA c3a){  final DNASimple c1=c1a.simpleType();  final DNASimple c2=c2a.simpleType();  final DNASimple c3=c3a.simpleType();switch (c1) {case A:switch (c2) {case A:switch (c3) {case A:case G:        return Protein.K;case C:case T:      return Protein.N;default :    return Protein.X;}case C:return Protein.T;case G:switch (c3) {case A:case G:return Protein.R;case C:case T:return Protein.S;default :return Protein.X;}case T:switch (c3) {case A:case C:case T:return Protein.I;case G:return Protein.M;default :return Protein.X;}default :return Protein.X;}case C:switch (c2) {case A:switch (c3) {case A:case G:return Protein.Q;case C:case T:return Protein.H;default :return Protein.X;}case C:return Protein.P;case G:return Protein.R;case T:return Protein.L;default :return Protein.X;}case G:switch (c2) {case A:switch (c3) {case A:case G:return Protein.E;case C:case T:return Protein.D;default :return Protein.X;}case C:return Protein.A;case G:return Protein.G;case T:return Protein.V;default :return Protein.X;}case T:switch (c2) {case A:switch (c3) {case A:case G:return Protein.STOP;case C:case T:return Protein.Y;default :return Protein.X;}case C:return Protein.S;case G:switch (c3) {case A:return Protein.STOP;case G:return Protein.W;case C:case T:return Protein.C;default :return Protein.X;}case T:switch (c3) {case A:case G:return Protein.L;case C:case T:return Protein.F;default :return Protein.X;}default :return Protein.X;}default :return Protein.X;}}  }
class C{  static public void showMessage(String str){  if (statusLabel == null) {    System.out.println(str);    return;  }  ArgumentChecking.notNull(str,"str");  statusLabel.showMessage(str);}  }
class C{  @Override public boolean isDirty(){  return m_store.requiresCommit();}  }
class C{  public void acquire(Object topicObject) throws InterruptedException {  throw new UnsupportedOperationException(LocalizedStrings.Collaboration_NOT_IMPLEMENTED.toLocalizedString());}  }
class C{  public void configureDebugLog(){  LoggerContext context=(LoggerContext)LoggerFactory.getILoggerFactory();  try {    JoranConfigurator configurator=new JoranConfigurator();    configurator.setContext(context);    context.reset();    configurator.doConfigure(apacHome + File.separator + "config-files/logback-debug.xml");  } catch (  JoranException je) {  }  StatusPrinter.printInCaseOfErrorsOrWarnings(context);}  }
class C{  public boolean isTransformed(){  if (!defaulting) {    return tx != null;  } else {    return !getTransform().isIdentity();  }}  }
class C{  public static void saveToSdCard(List<Entry> entries,String path){  File sdcard=Environment.getExternalStorageDirectory();  File saved=new File(sdcard,path);  if (!saved.exists()) {    try {      saved.createNewFile();    } catch (    IOException e) {      Log.e(LOG,e.toString());    }  }  try {    BufferedWriter buf=new BufferedWriter(new FileWriter(saved,true));    for (    Entry e : entries) {      buf.append(e.getVal() + "#" + e.getXIndex());      buf.newLine();    }    buf.close();  } catch (  IOException e) {    Log.e(LOG,e.toString());  }}  }
class C{  protected void addFeatureNode(KMLAbstractFeature feature){  TreeNode featureNode=KMLFeatureTreeNode.fromKMLFeature(feature);  if (featureNode != null)   this.addChild(featureNode);}  }
class C{  public static Bitmap maskBitmap(Bitmap src,Bitmap mask,Bitmap dst,Canvas dstCanvas,Paint paint,PorterDuffXfermode paintMode){  if (dst == null)   dst=Bitmap.createBitmap(mask.getWidth(),mask.getHeight(),Config.ARGB_8888);  if (dstCanvas == null)   dstCanvas=new Canvas(dst);  if (paintMode == null)   paintMode=new PorterDuffXfermode(Mode.DST_IN);  if (paint == null) {    paint=new Paint(Paint.ANTI_ALIAS_FLAG);    paint.setXfermode(paintMode);  }  dstCanvas.drawBitmap(src,0,0,null);  dstCanvas.drawBitmap(mask,0,0,paint);  paint.setXfermode(null);  return dst;}  }
class C{  protected boolean drawRightBorder(Component c,Graphics g,int x,int y,int width,int height){  if (super.drawRightBorder(c,g,x,y,width,height) && frame.isResizable()) {    int startX=width - getBorderInsets(c).right;    g.setColor(getFrameHighlight());    int topY=y + CORNER_SIZE;    g.drawLine(startX,topY,width - 2,topY);    int bottomY=height - CORNER_SIZE;    g.drawLine(startX + 1,bottomY,startX + 3,bottomY);    g.setColor(getFrameShadow());    g.drawLine(startX + 1,topY - 1,width - 2,topY - 1);    g.drawLine(startX + 1,bottomY - 1,startX + 3,bottomY - 1);    return true;  }  return false;}  }
class C{  public String process(File infile){  try {    BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(infile),"UTF-8"));    String line, data="";    while ((line=reader.readLine()) != null) {      data+=line + "\n";    }    reader.close();    String ret=process(data);    return ret;  } catch (  Exception e) {    System.out.println(e.getMessage());    e.printStackTrace();    return "";  }}  }
class C{  public Graph search(){  return search(independenceTest.getVariables());}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.247 -0500",hash_original_method="E7EAC0AC74052E989A5F3C8A8979A51D",hash_generated_method="397E4D71254ADC49C2D37EA85C52BDCF") private void fillAboveAndBelow(View sel,int position){  final int dividerHeight=mDividerHeight;  if (!mStackFromBottom) {    fillUp(position - 1,sel.getTop() - dividerHeight);    adjustViewsUpOrDown();    fillDown(position + 1,sel.getBottom() + dividerHeight);  } else {    fillDown(position + 1,sel.getBottom() + dividerHeight);    adjustViewsUpOrDown();    fillUp(position - 1,sel.getTop() - dividerHeight);  }}  }
class C{  private void readTypeMatchExpressions(final String text,final ConversationContext ctx,final Sentence sentence){  final StringTokenizer tok=new StringTokenizer(text,"/");  while (tok.hasMoreTokens()) {    final String str=tok.nextToken();    String typeStr;    try {      typeStr=tok.nextToken(" \t\n\r\f").substring(1);    } catch (    final NoSuchElementException e) {      typeStr=Expression.JOKER;    }    final Expression expr=new Expression(str,typeStr);    expr.setMatcher(this);    sentence.expressions.add(expr);  }}  }
class C{  @Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,XYSeriesRenderer seriesRenderer,float yAxisValue,int seriesIndex,int startIndex){  int seriesNr=mDataset.getSeriesCount();  int length=points.size();  paint.setColor(seriesRenderer.getColor());  paint.setStyle(Style.FILL);  float halfDiffX=getHalfDiffX(points,length,seriesNr);  int start=0;  if (startIndex > 0) {    start=2;  }  for (int i=start; i < length; i+=4) {    if (points.size() > i + 3) {      float xMin=points.get(i);      float yMin=points.get(i + 1);      float xMax=points.get(i + 2);      float yMax=points.get(i + 3);      drawBar(canvas,xMin,yMin,xMax,yMax,halfDiffX,seriesNr,seriesIndex,paint);    }  }  paint.setColor(seriesRenderer.getColor());}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.338 -0400",hash_original_method="3448BF342B33B519FE64A3FA0274077D",hash_generated_method="8651EC098CD56FF2A595F29537142CD3") @Override public boolean markSupported(){  return true;}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  int[] oldSet=_set;  byte[] oldStates=_states;  _set=new int[newCapacity];  _states=new byte[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldStates[i] == FULL) {      int o=oldSet[i];      int index=insertionIndex(o);      _set[index]=o;      _states[index]=FULL;    }  }}  }
class C{  private void init(){  setComponentPopupMenu(createPopup());  undoManager=new UndoManager();  undoManager.setLimit(1);  getDocument().addUndoableEditListener(undoManager);  enableEvents(AWTEvent.KEY_EVENT_MASK);  enableEvents(AWTEvent.HIERARCHY_EVENT_MASK);  enableEvents(AWTEvent.FOCUS_EVENT_MASK);  ThemeMediator.fixKeyStrokes(this);}  }
class C{  private void cleanup(Throwable whyCleanedUp){  try {    if (this.io != null) {      if (isClosed()) {        this.io.forceClose();      } else {        realClose(false,false,false,whyCleanedUp);      }    }  } catch (  SQLException sqlEx) {  }  this.isClosed=true;}  }
class C{  public boolean contains(Envelope other){  return covers(other);}  }
class C{  public EventTimeSourceBuilder<T> emit(T elem){  builder.emit(elem);  return this;}  }
class C{  public boolean isBookImported(){  return isBookImported;}  }
class C{  public void clear(){  if (EMPTY_VALUE == value)   return;  char[] tempValue=value;  value=EMPTY_VALUE;  for (int i=0; i < tempValue.length; i++) {    tempValue[i]=0x00;  }}  }
class C{  public boolean isSetB(){  return EncodingUtils.testBit(__isset_bitfield,__B_ISSET_ID);}  }
class C{  public long prepareLong(){  return loadLong();}  }
class C{  public TargetActivityHeaderView(Context context,AttributeSet attrs){  this(context,attrs,0);}  }
class C{  @Override public void releaseLuceePageContext(PageContext pc,boolean register){  if (pc.getId() < 0)   return;  pc.release();  ThreadLocalPageContext.release();  runningPcs.remove(Integer.valueOf(pc.getId()));  if (pcs.size() < 100 && pc.getRequestTimeoutException() == null)   pcs.push(pc);}  }
class C{  void stop(){  Thread.setDefaultUncaughtExceptionHandler(defaultHandler);}  }
class C{  protected final SourceLookup source(){  return lookup.source();}  }
class C{  public static void gluOrtho2D(GL10 gl,float left,float right,float bottom,float top){  gl.glOrthof(left,right,bottom,top,-1.0f,1.0f);}  }
class C{  protected boolean isWhiteSpace(char[] text){  for (int i=0; i < text.length; i++) {    if (!XMLUtilities.isXMLSpace(text[i])) {      return false;    }  }  return true;}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public static void w(String message,Throwable cause){  Log.w(LOG_TAG,"[" + message + "]",cause);}  }
class C{  public void randomizeBiases(double lower,double upper){  for (  Neuron neuron : neuronList) {    neuron.randomizeBias(lower,upper);  }}  }
class C{  public void dumpClientDebug(){  dumpClientComms();  dumpConOptions();  dumpClientState();  dumpBaseDebug();}  }
class C{  public void noteUsedBy(ClassDefinition ref,long where,Environment env){  if (reportDeprecated(env)) {    env.error(where,"warn.class.is.deprecated",this);  }}  }
class C{  public static void e(String tag,String msg,Throwable tr){  println(ERROR,tag,msg,tr);}  }
class C{  TokenLL insertIntoSortedLinkedList(final TokenLL head){  assert next == null;  if (head == null) {    return this;  } else   if (this.compareOffsets(head) <= 0) {    this.next=head;    return this;  }  TokenLL prev=head;  while (prev.next != null && this.compareOffsets(prev.next) > 0) {    prev=prev.next;  }  this.next=prev.next;  prev.next=this;  return head;}  }
class C{  private ResultPoint correctTopRight(ResultPoint bottomLeft,ResultPoint bottomRight,ResultPoint topLeft,ResultPoint topRight,int dimension){  float corr=distance(bottomLeft,bottomRight) / (float)dimension;  int norm=distance(topLeft,topRight);  float cos=(topRight.getX() - topLeft.getX()) / norm;  float sin=(topRight.getY() - topLeft.getY()) / norm;  ResultPoint c1=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  corr=distance(bottomLeft,topLeft) / (float)dimension;  norm=distance(bottomRight,topRight);  cos=(topRight.getX() - bottomRight.getX()) / norm;  sin=(topRight.getY() - bottomRight.getY()) / norm;  ResultPoint c2=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  if (!isValid(c1)) {    if (isValid(c2)) {      return c2;    }    return null;  }  if (!isValid(c2)) {    return c1;  }  int l1=Math.abs(transitionsBetween(topLeft,c1).getTransitions() - transitionsBetween(bottomRight,c1).getTransitions());  int l2=Math.abs(transitionsBetween(topLeft,c2).getTransitions() - transitionsBetween(bottomRight,c2).getTransitions());  return l1 <= l2 ? c1 : c2;}  }
class C{  @Override protected void onSetChannelKey(String target,String sourceNick,String sourceLogin,String sourceHostname,String key){  Message message=new Message(service.getString(R.string.message_set_channel_key,sourceNick,key));  message.setColor(Message.COLOR_BLUE);  server.getConversation(target).addMessage(message);  service.sendBroadcast(Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target));}  }
class C{  public KillsForQuestCounter(String questState){  this.questState=questState;}  }
class C{  public void testListFilesPathMissing() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,SUBSUBDIR),paths(FILE));  Collection<IgfsFile> paths=igfs.listFiles(SUBDIR);  assert paths != null;  assert paths.size() == 2;  Iterator<IgfsFile> iter=paths.iterator();  IgfsFile path1=iter.next();  IgfsFile path2=iter.next();  assert (SUBSUBDIR.equals(path1.path()) && FILE.equals(path2.path())) || (FILE.equals(path1.path()) && SUBSUBDIR.equals(path2.path()));}  }
class C{  public GlowItem(Location location,ItemStack item){  super(location);  setItemStack(item);  setBoundingBox(0.25,0.25);  pickupDelay=20;}  }
class C{  @Override public void bind(ShaderProgram shader){  bind(shader,null);}  }
class C{  public void fillOval(int x,int y,int width,int height){  g.fillOval(x,y,width,height);}  }
class C{  public static void exit(int status){  Env.exitEnv(status);}  }
class C{  public BitemporalCondition(Float boost,String field,Object vtFrom,Object vtTo,Object ttFrom,Object ttTo){  super(boost,field,BitemporalMapper.class);  this.vtFrom=vtFrom;  this.vtTo=vtTo;  this.ttFrom=ttFrom;  this.ttTo=ttTo;}  }
class C{  public boolean consumed(){  return left == 0;}  }
class C{  public void removeListener(StateListener l){  listeners.remove(l);}  }
class C{  @Override protected JComponent createEditor(){  JComponent editor=spinner.getEditor();  editor.setName("Spinner.editor");  updateEditorAlignment(editor);  return editor;}  }
class C{  private void generateImports(List<JClassType> extensions,ClassSourceFileComposerFactory composerFactory){  composerFactory.addImport(GWT.class.getCanonicalName());  composerFactory.addImport(Extension.class.getCanonicalName());  composerFactory.addImport(ExtensionRegistry.class.getCanonicalName());  composerFactory.addImport(Inject.class.getCanonicalName());  composerFactory.addImport(Provider.class.getCanonicalName());  composerFactory.addImport(List.class.getCanonicalName());  composerFactory.addImport(ArrayList.class.getCanonicalName());  composerFactory.addImport(Map.class.getCanonicalName());  composerFactory.addImport(HashMap.class.getCanonicalName());  for (  JClassType jClassType : extensions) {    composerFactory.addImport(jClassType.getQualifiedSourceName());  }}  }
class C{  protected WebContextWithExtraConfigurations createWebAppContext(){  return new WebContextWithExtraConfigurations();}  }
class C{  private boolean ensureValidSetter(final Expression expression,final Expression leftExpression,final Expression rightExpression,final SetterInfo setterInfo){  VariableExpression ve=new VariableExpression("%",setterInfo.receiverType);  final Expression newRightExpression=isCompoundAssignment(expression) ? new BinaryExpression(leftExpression,getOpWithoutEqual(expression),rightExpression) : rightExpression;  MethodCallExpression call=new MethodCallExpression(ve,setterInfo.name,newRightExpression);  call.setImplicitThis(false);  visitMethodCallExpression(call);  MethodNode directSetterCandidate=call.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET);  if (directSetterCandidate == null) {    for (    MethodNode setter : setterInfo.setters) {      ClassNode type=getWrapper(setter.getParameters()[0].getOriginType());      if (Boolean_TYPE.equals(type) || STRING_TYPE.equals(type) || CLASS_Type.equals(type)) {        call=new MethodCallExpression(ve,setterInfo.name,new CastExpression(type,newRightExpression));        call.setImplicitThis(false);        visitMethodCallExpression(call);        directSetterCandidate=call.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET);        if (directSetterCandidate != null) {          break;        }      }    }  }  if (directSetterCandidate != null) {    for (    MethodNode setter : setterInfo.setters) {      if (setter == directSetterCandidate) {        leftExpression.putNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET,directSetterCandidate);        storeType(leftExpression,getType(newRightExpression));        break;      }    }  } else {    ClassNode firstSetterType=setterInfo.setters.iterator().next().getParameters()[0].getOriginType();    addAssignmentError(firstSetterType,getType(newRightExpression),expression);    return true;  }  return false;}  }
class C{  boolean add(int c){  int pos=binSearch(charList,nUsed,c);  if (pos >= 0) {    return false;  }  if (nUsed == charList.length) {    int[] t=new int[nUsed + 20];    System.arraycopy(charList,0,t,0,nUsed);    charList=t;  }  pos=-pos - 1;  System.arraycopy(charList,pos,charList,pos + 1,nUsed - pos);  charList[pos]=c;  freshChars.append((char)c);  nUsed++;  return true;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"bsr");  BsfBsrTranslatorCommon.translateBsfOrBsr(environment,instruction,instructions,false);}  }
class C{  public static void generate(Cache cache,PrintWriter pw){  generate(cache,pw,true);}  }
class C{  public VerletPhysics3D(){  this(null,50,0,1);}  }
class C{  private void initContainer(){  rvh=new Vector<Object>(100);  cursorPos=0;  absolutePos=0;  numRows=0;  numDeleted=0;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public void add(Runnable runnable,long delayMs){  deltaQueue.add(tickRemaining + delayMs,runnable);}  }
class C{  public ArrayList<V> values(){  ArrayList<V> list=New.arrayList(size);  int len=keys.length;  for (int i=0; i < len; i++) {    Value k=keys[i];    if (k != null && k != ValueNull.DELETED) {      list.add(values[i]);    }  }  return list;}  }
class C{  public static void addTextMarkerToPosition(OtrosJTextWithRulerScrollPane<? extends JTextComponent> pane,int charPosition,final String tooltip,Color color,TooltipMode tooltipMode){  String tooltipText=tooltip;  MarkerModel markerModel=pane.getRulerBar().getMarkerModel();  String text=pane.getjTextComponent().getText();  int lines=countLines(text);  int lineOfCharPosition=countLineOfCharPosition(charPosition,text);  float percentValue=(float)lineOfCharPosition / Math.max(lines - 1,1);  if (TooltipMode.LINE_NUMBER_PREFIX.equals(tooltipMode)) {    tooltipText="Line " + lineOfCharPosition + ": "+ tooltipText;  }  LineInTextMarker marker=new LineInTextMarker(tooltipText,color,percentValue,charPosition,pane.getjTextComponent());  markerModel.addMarker(marker);}  }
class C{  public static boolean isAtomicUpdate(final AddUpdateCommand cmd){  SolrInputDocument sdoc=cmd.getSolrInputDocument();  for (  SolrInputField sif : sdoc.values()) {    if (sif.getValue() instanceof Map) {      return true;    }  }  return false;}  }
class C{  @Override public boolean connectionAllowed(EventSetDescriptor esd){  return connectionAllowed(esd.getName());}  }
class C{  public static Border createBevelRaised(){  Border b=new Border();  b.type=TYPE_BEVEL_RAISED;  b.themeColors=true;  b.thickness=2;  return b;}  }
class C{  public IntentFilter(IntentFilter o){  mPriority=o.mPriority;  mActions=new ArrayList<String>(o.mActions);  if (o.mCategories != null) {    mCategories=new ArrayList<String>(o.mCategories);  }  if (o.mDataTypes != null) {    mDataTypes=new ArrayList<String>(o.mDataTypes);  }  if (o.mDataSchemes != null) {    mDataSchemes=new ArrayList<String>(o.mDataSchemes);  }  if (o.mDataAuthorities != null) {    mDataAuthorities=new ArrayList<AuthorityEntry>(o.mDataAuthorities);  }  if (o.mDataPaths != null) {    mDataPaths=new ArrayList<PatternMatcher>(o.mDataPaths);  }  mHasPartialTypes=o.mHasPartialTypes;}  }
class C{  protected void insertMenuItem(JMenu menu,JMenuItem menuitem,int startIndex){  boolean inserted;  int i;  JMenuItem current;  String currentStr;  String newStr;  inserted=false;  newStr=menuitem.getText().toLowerCase();  for (i=startIndex; i < menu.getMenuComponentCount(); i++) {    if (!(menu.getMenuComponent(i) instanceof JMenuItem)) {      continue;    }    current=(JMenuItem)menu.getMenuComponent(i);    currentStr=current.getText().toLowerCase();    if (currentStr.compareTo(newStr) > 0) {      inserted=true;      menu.insert(menuitem,i);      break;    }  }  if (!inserted) {    menu.add(menuitem);  }}  }
class C{  public static Validator<CharSequence> beginsWithUppercaseLetter(@NonNull final Context context,@StringRes final int resourceId){  return new BeginsWithUppercaseLetterValidator(context,resourceId);}  }
class C{  public static void flushRecorders(){  INSTANCE.dataRecorderDriver.flush();}  }
class C{  protected String loadDocumentDetails(){  MPayment pay=(MPayment)getPO();  setDateDoc(pay.getDateTrx());  m_TenderType=pay.getTenderType();  m_Prepayment=pay.isPrepayment();  m_C_BankAccount_ID=pay.getC_BankAccount_ID();  setAmount(Doc.AMTTYPE_Gross,pay.getPayAmt());  return null;}  }
class C{  public static String toArrayArgument(final Object... array){  return Strings.join(";",array);}  }
class C{  private void addProperty(Property prop,int index,Map<String,Property> keys_map,String key_name) throws MalformedObjectNameException {  if (keys_map.containsKey(key_name))   throw new MalformedObjectNameException("key `" + key_name + "' already defined");  if (index == _kp_array.length) {    Property[] tmp_prop_array=new Property[index + 10];    System.arraycopy(_kp_array,0,tmp_prop_array,0,index);    _kp_array=tmp_prop_array;  }  _kp_array[index]=prop;  keys_map.put(key_name,prop);}  }
class C{  private boolean isNoiseWord(String term){  int len=term.length();  if (minWordLen > 0 && len < minWordLen) {    return true;  }  if (maxWordLen > 0 && len > maxWordLen) {    return true;  }  return stopWords != null && stopWords.contains(term);}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.sublabelPaint=SerialUtilities.readPaint(stream);}  }
class C{  public static ResponseData parse(String responseData){  int index=responseData.indexOf(':');  String mainData, extraData;  if (-1 == index) {    mainData=responseData;    extraData="";  } else {    mainData=responseData.substring(0,index);    extraData=index >= responseData.length() ? "" : responseData.substring(index + 1);  }  String[] fields=TextUtils.split(mainData,Pattern.quote("|"));  if (fields.length < 6) {    throw new IllegalArgumentException("Wrong number of fields.");  }  ResponseData data=new ResponseData();  data.extra=extraData;  data.responseCode=Integer.parseInt(fields[0]);  data.nonce=Integer.parseInt(fields[1]);  data.packageName=fields[2];  data.versionCode=fields[3];  data.userId=fields[4];  data.timestamp=Long.parseLong(fields[5]);  return data;}  }
class C{  public ParameterBlock addSource(Object source){  sources.addElement(source);  return this;}  }
class C{  @SuppressWarnings("nls") private void writeUnclippedShape(Shape s){  if (s instanceof Line2D) {    Line2D l=(Line2D)s;    double x1=l.getX1();    double y1=l.getY1();    double x2=l.getX2();    double y2=l.getY2();    write("<line x1=\"",x1,"\" y1=\"",y1,"\" x2=\"",x2,"\" y2=\"",y2,"\" ");  } else   if (s instanceof Rectangle2D) {    Rectangle2D r=(Rectangle2D)s;    double x=r.getX();    double y=r.getY();    double width=r.getWidth();    double height=r.getHeight();    write("<rect x=\"",x,"\" y=\"",y,"\" width=\"",width,"\" height=\"",height,"\" ");  } else   if (s instanceof RoundRectangle2D) {    RoundRectangle2D r=(RoundRectangle2D)s;    double x=r.getX();    double y=r.getY();    double width=r.getWidth();    double height=r.getHeight();    double arcWidth=r.getArcWidth();    double arcHeight=r.getArcHeight();    write("<rect x=\"",x,"\" y=\"",y,"\" width=\"",width,"\" height=\"",height,"\" rx=\"",arcWidth,"\" ry=\"",arcHeight,"\" ");  } else   if (s instanceof Ellipse2D) {    Ellipse2D e=(Ellipse2D)s;    double x=e.getX();    double y=e.getY();    double rx=e.getWidth() / 2.0;    double ry=e.getHeight() / 2.0;    write("<ellipse cx=\"",x + rx,"\" cy=\"",y + ry,"\" rx=\"",rx,"\" ry=\"",ry,"\" ");  } else {    write("<path d=\"");    writePath(s);    write("\" ");  }}  }
class C{  public Bay(){  super();}  }
class C{  public DirectiveEditor(String aName,String aLabelText,Composite aParent){  init(aName,aLabelText);  createControl(aParent);}  }
class C{  public static int updateLyricEncoding(ContentResolver resolver,String rowId,Lyric lyric,String encoding){  ContentValues values=new ContentValues();  values.put(Constants.Column.TITLE,lyric.title);  values.put(Constants.Column.ARTIST,lyric.artist);  values.put(Constants.Column.ALBUM,lyric.album);  values.put(Constants.Column.LENGTH,lyric.length);  values.put(Constants.Column.ENCODING,encoding);  values.put(Constants.Column.ENCODING_CHANGED,1);  return resolver.update(Constants.CONTENT_URI,values,Constants.Column.ID + "= ?",new String[]{rowId});}  }
class C{  public FileSecretHelper(String secretFile) throws IOException {  properties=new Properties();  try (FileInputStream fileInputStream=new FileInputStream(secretFile)){    properties.load(fileInputStream);  } }  }
class C{  public GTSDecoder dedup() throws IOException {  if (nextCalled) {    throw new IOException("Unable to dedup a decoder for which next has been called.");  }  GTSEncoder dedupped=new GTSEncoder(0L);  dedupped.setMetadata(this.getMetadata());  boolean first=true;  long timestamp=0L;  long location=GeoTimeSerie.NO_LOCATION;  long elevation=GeoTimeSerie.NO_ELEVATION;  Object value=null;  boolean dup=true;  while (this.next()) {    dup=true;    if (first) {      first=false;      dup=false;      location=this.getLocation();      elevation=this.getElevation();      value=this.getValue();      dedupped.addValue(timestamp,location,elevation,value);      continue;    }    long newTimestamp=this.getTimestamp();    long newloc=this.getLocation();    long newelev=this.getElevation();    Object newValue=this.getValue();    if (location != newloc || elevation != newelev) {      dup=false;    }    if (dup) {      if (null == value) {        dup=false;      } else       if (value instanceof Number) {        if (!((Number)value).equals(newValue)) {          dup=false;        }      } else       if (value instanceof String) {        if (!((String)value).equals(newValue)) {          dup=false;        }      } else       if (value instanceof Boolean) {        if (!((Boolean)value).equals(newValue)) {          dup=false;        }      }    }    timestamp=newTimestamp;    location=newloc;    elevation=newelev;    value=newValue;    if (!dup) {      dedupped.addValue(timestamp,location,elevation,value);      continue;    }  }  if (dup) {    dedupped.addValue(timestamp,location,elevation,value);  }  return dedupped.getDecoder();}  }
class C{  public RestoreSnapshotRequest ignoreIndexSettings(String... ignoreIndexSettings){  this.ignoreIndexSettings=ignoreIndexSettings;  return this;}  }
class C{  public static void main(String[] args){  Random random=new Random();  BinaryMessage buffer=new BinaryMessage(196);  try {    for (int x=0; x < 196; x++) {      int number=random.nextInt(2);      if (number == 1) {        buffer.add(false);      } else {        buffer.add(true);      }    }  } catch (  Exception e) {    e.printStackTrace();  }  mLog.debug("  BUFFER: " + buffer.toString());  Trellis_1_2_Rate t=new Trellis_1_2_Rate();  t.decode(buffer,0,196);  mLog.debug(" DECODED: " + buffer.toString());  mLog.debug("Finished!");}  }
class C{  @Override public void deliverResult(List<ApplicationItem> data){  if (isReset()) {    if (data != null) {      onReleaseResources(data);    }  }  List<ApplicationItem> olddata=mData;  mData=data;  if (isStarted()) {    super.deliverResult(data);  }  if (olddata != null) {    onReleaseResources(olddata);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:31.954 -0500",hash_original_method="CC8B7F3C56C4BD3E79E20E40E6BC7183",hash_generated_method="B9572DAF8F0CC12781E7DB4F0509BD24") public void profile(){  mProfile=true;}  }
class C{  @SuppressWarnings("unused") public static long parseLong(byte[] bytes){  return parseLong(bytes,0,bytes.length);}  }
class C{  public int put(float key,int value){  int previous=0;  int index=insertionIndex(key);  boolean isNewMapping=true;  if (index < 0) {    index=-index - 1;    previous=_values[index];    isNewMapping=false;  }  byte previousState=_states[index];  _set[index]=key;  _states[index]=FULL;  _values[index]=value;  if (isNewMapping) {    postInsertHook(previousState == FREE);  }  return previous;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.558 -0500",hash_original_method="13321C8CCD65EA0BFC64015C162CADFF",hash_generated_method="9C04F966A04CEC37802D3875FA6EFA0C") public final void quit(){  if (mSmHandler == null)   return;  mSmHandler.quit();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:10.446 -0400",hash_original_method="91F4F50BF9CC02B78775F74F7B17B8EB",hash_generated_method="8CB94AE6640B04351961C88662F097E5") static void importPrefs(InputStream in) throws IOException, InvalidPreferencesFormatException {  try {    Document doc=builder.parse(new InputSource(in));    Element preferences;    preferences=doc.getDocumentElement();    String version=preferences.getAttribute("EXTERNAL_XML_VERSION");    if (version != null && Float.parseFloat(version) > XML_VERSION) {      throw new InvalidPreferencesFormatException("Preferences version " + version + " is not supported");    }    Element root=(Element)preferences.getElementsByTagName("root").item(0);    Preferences prefsRoot=null;    String type=root.getAttribute("type");    if (type.equals("user")) {      prefsRoot=Preferences.userRoot();    } else {      prefsRoot=Preferences.systemRoot();    }    loadNode(prefsRoot,root);  } catch (  FactoryConfigurationError e) {    throw new InvalidPreferencesFormatException(e);  }catch (  SAXException e) {    throw new InvalidPreferencesFormatException(e);  }}  }
class C{  public void incrementSequence(){  Sequence sequence=getSequence();  if (sequence == null) {    setSequence(1);  } else {    sequence.increment();  }}  }
class C{  private byte readAndCheckByte() throws IOException, EOFException {  int b1=in.read();  if (-1 == b1) {    throw new EOFException();  }  return (byte)b1;}  }
class C{  public void connectFailed(Route failedRoute,IOException failure){  if (failedRoute.proxy().type() != Proxy.Type.DIRECT && address.proxySelector() != null) {    address.proxySelector().connectFailed(address.url().uri(),failedRoute.proxy().address(),failure);  }  routeDatabase.failed(failedRoute);}  }
class C{  public synchronized void removeTextListener(TextListener l){  if (l == null) {    return;  }  textListener=AWTEventMulticaster.remove(textListener,l);}  }
class C{  public void add(VolumeItem dataItem,boolean notify){  if (!this.isEmpty()) {    VolumeItem item0=(VolumeItem)this.getDataItem(0);    if (!dataItem.getPeriod().getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(dataItem,notify);}  }
class C{  public static void expandSysCall(Instruction s,IR ir){  Operand ip=Call.getClearAddress(s);  allocateSpaceForSysCall(ir);  int numberParams=Call.getNumberOfParams(s);  int parameterWords=0;  for (int i=0; i < numberParams; i++) {    parameterWords++;    Operand op=Call.getParam(s,i);    parameterWords+=op.getType().getStackWords();  }  ir.stackManager.allocateParameterSpace((1 + parameterWords) * 4);  Call.mutate0(s,SYSCALL,Call.getClearResult(s),ip,null);}  }
class C{  public boolean insert(int val){  if (keyMap.containsKey(val)) {    return false;  } else {    keyMap.put(val,count);    valueMap.put(count,val);    count=keyMap.size();    return true;  }}  }
class C{  @Override public void draw(Graphics sc){  super.draw(sc);  IRectangle rect=model.getActiveRectangle();  if (rect == null)   return;  int ht=canvas.getHeight();  sc.setColor(Color.darkGray);  sc.drawRect((int)rect.getLeft(),ht - (int)rect.getTop(),(int)(rect.getRight() - rect.getLeft()),(int)(rect.getTop() - rect.getBottom()));}  }
class C{  public SnmpTooBigException(){  varBindCount=0;}  }
class C{  public static @CheckForNull TypeQualifierAnnotation combineReturnTypeAnnotations(TypeQualifierAnnotation a,TypeQualifierAnnotation b){  return combineAnnotations(a,b,combineReturnValueMatrix);}  }
class C{  public static int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  return encoder.encode(data,off,length,out);}  }
class C{  public CompileClassNotFound(String message){  super(message);}  }
class C{  protected int insertKey(int val){  int hash, index;  hash=HashFunctions.hash(val) & 0x7fffffff;  index=hash % _states.length;  byte state=_states[index];  consumeFreeSlot=false;  if (state == FREE) {    consumeFreeSlot=true;    insertKeyAt(index,val);    return index;  }  if (state == FULL && _set[index] == val) {    return -index - 1;  }  return insertKeyRehash(val,index,hash,state);}  }
class C{  private WindowUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  public boolean isSetClusterJoinResponse(){  return this.clusterJoinResponse != null;}  }
class C{  protected boolean acceptFile(String filePathStr){  if (regex != null) {    Matcher matcher=regex.matcher(filePathStr);    if (!matcher.matches()) {      return false;    }  }  return true;}  }
class C{  public void registerHandler(String handlerName,BridgeHandler handler){  if (handler != null) {    messageHandlers.put(handlerName,handler);  }}  }
class C{  public PrivateKeyUnencryptedException(String message,Throwable causeThrowable){  super(message,causeThrowable);}  }
class C{  private boolean checkWebSeedMirror(String mirror,create_torrent torrent,boolean isMultiFile){  String urlPath=getWebSeedTestPath(mirror,torrent,isMultiFile);  HttpClient browser=HttpClientFactory.getInstance(HttpClientFactory.HttpContext.MISC);  int responseCode=500;  try {    responseCode=browser.head(urlPath,2000,null);    System.out.println(responseCode + ": " + urlPath);  } catch (  IOException e) {    e.printStackTrace();  }  return responseCode == 200;}  }
class C{  CommandInterface prepareCommand(String sql,int fetchSize){  return session.prepareCommand(sql,fetchSize);}  }
class C{  public static String replaceEscapedRightAngle(String s){  StringBuilder buf=new StringBuilder();  int i=0;  while (i < s.length()) {    char c=s.charAt(i);    if (c == '<' && s.substring(i).startsWith("<\\\\>")) {      buf.append("<\\\\>");      i+="<\\\\>".length();      continue;    }    if (c == '>' && s.substring(i).startsWith(">\\>")) {      buf.append(">>");      i+=">\\>".length();      continue;    }    if (c == '\\' && s.substring(i).startsWith("\\>>") && !s.substring(i).startsWith("\\>>>")) {      buf.append(">>");      i+="\\>>".length();      continue;    }    buf.append(c);    i++;  }  return buf.toString();}  }
class C{  public String optString(int index,String defaultValue){  Object object=this.opt(index);  return JSONObject.NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  public static byte[] toBytesUTF8(String x){  try {    return x.getBytes(PngHelperInternal.charsetUTF8name);  } catch (  UnsupportedEncodingException e) {    throw new PngBadCharsetException(e);  }}  }
class C{  public static void addDoubleSlider(final JPanel panel,final DoubleLabeledSlider slider,final String description,final String hint,final int value){  Preconditions.checkNotNull(panel,"IE01599: Panel argument can not be null");  Preconditions.checkNotNull(slider,"IE01600: Slider argument can not be null");  Preconditions.checkNotNull(description,"IE01601: Description argument can not be null");  slider.setValue(value);  slider.setPreferredSize(new Dimension(PREFERRED_WIDTH,PREFERRED_HEIGHT));  addComponent(panel,slider,description,hint);}  }
class C{  protected TreeCellRenderer createDefaultCellRenderer(){  return new WindowsTreeCellRenderer();}  }
class C{  public static boolean isProtectionBasedSnapshot(Volume volume,String snapshotType,DbClient dbClient){  String rgName=volume.getReplicationGroupInstance();  if (volume.isVPlexVolume(dbClient)) {    Volume backendVol=VPlexUtil.getVPLEXBackendVolume(volume,true,dbClient);    if (backendVol != null && !backendVol.getInactive()) {      rgName=backendVol.getReplicationGroupInstance();    }  }  if (NullColumnValueGetter.isNotNullValue(rgName) && !snapshotType.equalsIgnoreCase(BlockSnapshot.TechnologyType.RP.toString())) {    return false;  }  if (volume.getProtectionController() != null && (snapshotType.equalsIgnoreCase(BlockSnapshot.TechnologyType.RP.toString()) || volume.getPersonality().equals(Volume.PersonalityTypes.TARGET.toString()))) {    return true;  }  return false;}  }
class C{  public void init(){  mDigest=new HttpDigestMd5Authentication();}  }
class C{  public boolean isProfiling(){  return mThread.isProfiling();}  }
class C{  public LoggingServlet(BaleenLogging logging){  super(LOGGER,LoggingServlet.class);  this.logging=logging;}  }
class C{  public void clearCounters(){  this.hitCount.set(0);  this.missCountNotFound.set(0);  this.missCountExpired.set(0);  this.missCountSoftRef.set(0);  this.removeHitCount.set(0);  this.removeMissCount.set(0);}  }
class C{  public LocoIcon addLocoIcon(String name){  LocoIcon l=new LocoIcon(this);  Point2D pt=windowCenter();  l.setLocation((int)pt.getX(),(int)pt.getY());  putLocoIcon(l,name);  l.setPositionable(true);  return l;}  }
class C{  private SignatureLibraryRelease loadPhobiusRelease(){  final SignatureLibraryRelease release;  final Query releaseQuery=entityManager.createQuery("select r from SignatureLibraryRelease r where r.version = :phobiusVersion and r.library = :phobiusSignatureLibrary");  releaseQuery.setParameter("phobiusVersion",phobiusVersion);  releaseQuery.setParameter("phobiusSignatureLibrary",SignatureLibrary.PHOBIUS);  @SuppressWarnings("unchecked") List<SignatureLibraryRelease> releaseList=releaseQuery.getResultList();  if (releaseList.size() == 1 && releaseList.get(0) != null) {    release=releaseList.get(0);  } else   if (releaseList.size() > 1) {    throw new IllegalStateException("There is more than one SignatureLibraryRelease record for version " + phobiusVersion + " of Phobius in the databases.");  } else {    release=new SignatureLibraryRelease(SignatureLibrary.PHOBIUS,phobiusVersion);    entityManager.persist(release);  }  return release;}  }
class C{  public ServicesStillPublishedException(String message){  super(message);}  }
class C{  public Pki pki(){  return new Pki(vaultConfig);}  }
class C{  @Override public NativePooledByteBuffer newByteBuffer(InputStream inputStream,int initialCapacity) throws IOException {  NativePooledByteBufferOutputStream outputStream=new NativePooledByteBufferOutputStream(mPool,initialCapacity);  try {    return newByteBuf(inputStream,outputStream);  }  finally {    outputStream.close();  }}  }
class C{  public void parse(URL url) throws SAXException {  parse(url.toExternalForm());}  }
class C{  public static <T>Callable<T> privilegedCallableUsingCurrentClassLoader(Callable<T> callable){  if (callable == null)   throw new NullPointerException();  return new PrivilegedCallableUsingCurrentClassLoader<T>(callable);}  }
class C{  public SubjectKeyIdentifier(byte[] keyIdentifier){  this.keyIdentifier=keyIdentifier;}  }
class C{  public static PropertyValuesHolder ofFloat(String propertyName,float... values){  return new FloatPropertyValuesHolder(propertyName,values);}  }
class C{  public BigOperatorAtom(Atom base,Atom under,Atom over){  this.base=base;  this.under=under;  this.over=over;  type=TeXConstants.TYPE_BIG_OPERATOR;}  }
class C{  public void testDeepNestedCallProc(){  check("CALL func1(CALL func2(CALL func3(field1)))","{call func1({call func2({call func3(field1)})})}");  check("CALL func1(CALL func2(CALL func3(CALL func4(field1))))","{call func1({call func2({call func3({call func4(field1)})})})}");  check("select CALL func1(field1, CALL func2(CALL func3(field2), field3))","select {call func1(field1, {call func2({call func3(field2)}, field3)})}");  check("select CALL func1(field1, CALL func2(CALL func3(field2), field3)) from SomeTable;","select {call func1(field1, {call func2({call func3(field2)}, field3)})} from SomeTable;");}  }
class C{  final boolean tokenIs(char c){  return (m_token != null) ? (m_tokenChar == c) : false;}  }
class C{  public boolean isIconForFileAvailable(File f){  return true;}  }
class C{  public StringGeneratorBuilder basicMultilingualPlaneAlphabet(){  return new StringGeneratorBuilder(Character.MIN_CODE_POINT,LARGEST_DEFINED_BMP_CODEPOINT);}  }
class C{  public void moveToInsertRow() throws SQLException {  if (getConcurrency() == ResultSet.CONCUR_READ_ONLY) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.movetoins").toString());  }  if (insertRow == null) {    if (RowSetMD == null)     throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.movetoins1").toString());    int numCols=RowSetMD.getColumnCount();    if (numCols > 0) {      insertRow=new InsertRow(numCols);    } else {      throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.movetoins2").toString());    }  }  onInsertRow=true;  currentRow=cursorPos;  cursorPos=-1;  insertRow.initInsertRow();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public T caseComplexPrimitivePropertyType(ComplexPrimitivePropertyType object){  return null;}  }
class C{  public final List<WarningsGroup> validate(List<ICalComponent> hierarchy,ICalVersion version){  List<WarningsGroup> warnings=new ArrayList<WarningsGroup>();  List<Warning> warningsBuf=new ArrayList<Warning>(0);  validate(hierarchy,version,warningsBuf);  if (!warningsBuf.isEmpty()) {    warnings.add(new WarningsGroup(this,hierarchy,warningsBuf));  }  hierarchy=new ArrayList<ICalComponent>(hierarchy);  hierarchy.add(this);  for (  ICalProperty property : properties.values()) {    List<Warning> propWarnings=property.validate(hierarchy,version);    if (!propWarnings.isEmpty()) {      warnings.add(new WarningsGroup(property,hierarchy,propWarnings));    }  }  for (  ICalComponent component : components.values()) {    warnings.addAll(component.validate(hierarchy,version));  }  return warnings;}  }
class C{  public boolean isCruise(){  return true;}  }
class C{  @Override protected Boolean compute(Date left,Date right){  if (left == null || right == null) {    return null;  }  return left.before(right);}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);}  }
class C{  public boolean doesNotDistribute(){  return false;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case FunctionblockPackage.PRIMITIVE_PARAM__TYPE:    setType(TYPE_EDEFAULT);  return;case FunctionblockPackage.PRIMITIVE_PARAM__CONSTRAINT_RULE:setConstraintRule((ConstraintRule)null);return;}super.eUnset(featureID);}  }
class C{  public PermissionRequestObject onAllGranted(Func grantFunc){  mGrantFunc=grantFunc;  return this;}  }
class C{  private void displayTiming(long millis){  SimpleDateFormat df=new SimpleDateFormat("H:mm:ss.SSS",Locale.getDefault());  df.setTimeZone(TimeZone.getTimeZone("UTC"));  System.out.println("Time spent: " + df.format(new Date(millis)));}  }
class C{  public void initializeContacts(final EvolutionState state){  if (showDebugInfo)   state.output.message(Thread.currentThread().getName() + "Spawning the server thread.");  monitor=new SlaveMonitor(state,showDebugInfo,this);}  }
class C{  public void registerPreferenceChangeListener(PreferenceChangeListener preferenceChangeListener){  if (!mListeners.contains(preferenceChangeListener)) {    mListeners.add(preferenceChangeListener);  }}  }
class C{  public void testGetVersion30() throws Exception {  String xml=WEBAPP_30_HEADER + "</web-app>";  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  assertEquals(WebXmlVersion.V3_0,webXml.getVersion());}  }
class C{  public ServiceUnavailableException(String explanation){  super(explanation);}  }
class C{  @SuppressWarnings("unchecked") static void exceptionsTests(Path dir) throws IOException {  System.out.println("-- Exceptions --");  PosixFileAttributeView view=Files.getFileAttributeView(dir,PosixFileAttributeView.class);  try {    view.setOwner(null);    throw new RuntimeException("NullPointerException not thrown");  } catch (  NullPointerException x) {  }  try {    view.setGroup(null);    throw new RuntimeException("NullPointerException not thrown");  } catch (  NullPointerException x) {  }  UserPrincipalLookupService lookupService=dir.getFileSystem().getUserPrincipalLookupService();  try {    lookupService.lookupPrincipalByName(null);    throw new RuntimeException("NullPointerException not thrown");  } catch (  NullPointerException x) {  }  try {    lookupService.lookupPrincipalByGroupName(null);    throw new RuntimeException("NullPointerException not thrown");  } catch (  NullPointerException x) {  }  try {    view.setPermissions(null);    throw new RuntimeException("NullPointerException not thrown");  } catch (  NullPointerException x) {  }  try {    Set<PosixFilePermission> perms=new HashSet<>();    perms.add(null);    view.setPermissions(perms);    throw new RuntimeException("NullPointerException not thrown");  } catch (  NullPointerException x) {  }  try {    Set perms=new HashSet();    perms.add(new Object());    view.setPermissions(perms);    throw new RuntimeException("ClassCastException not thrown");  } catch (  ClassCastException x) {  }  System.out.println("OKAY");}  }
class C{  public static ScriptDescription scriptToScriptDescription(Script script){  ScriptDescription ret=new ScriptDescription();  ret.setComments(script.getComments());  ret.setCreated(script.getCreated());  ret.setCreator(script.getCreator());  ret.setId(script.getId());  ret.setModified(script.getModified());  ret.setName(script.getName());  ret.setProductName(script.getProductName());  ret.setRuntime(script.getRuntime());  return ret;}  }
class C{  private boolean executeCommand(BufferedReader reader) throws IOException, ServiceException, SitesException {  System.out.print("Command: ");  String[] args=parseCommand(reader.readLine());  String name=args[0];  if (name.equals("sites")) {    sitesHelper.getSiteFeed();  } else   if (name.equals("newsite")) {    if (args.length < 3) {      System.out.flush();      throw new SitesException("Wrong number of args");    }    SiteEntry siteEntry=null;    if (args.length == 4) {      siteEntry=sitesHelper.createSite(args[1],args[2],args[3]);    } else     if (args.length == 3) {      siteEntry=sitesHelper.createSite(args[1],args[2]);    }    System.out.println("Created!");    if (siteEntry.getHtmlLink() != null) {      System.out.println("View it at " + siteEntry.getHtmlLink().getHref());    }  } else   if (name.equals("copysite")) {    if (args.length < 4) {      System.out.flush();      throw new SitesException("Wrong number of args");    }    SiteEntry siteEntry=siteEntry=sitesHelper.copySite(args[1],args[2],args[3]);    System.out.println("Created!");    if (siteEntry.getHtmlLink() != null) {      System.out.println("View it at " + siteEntry.getHtmlLink().getHref());    }  } else   if (name.equals("content")) {    if (args.length == 1) {      sitesHelper.listSiteContents("all");    } else {      sitesHelper.listSiteContents(args[1]);    }  } else   if (name.equals("activity")) {    sitesHelper.getActivityFeed();  } else   if (name.equals("create")) {    if (args.length < 3) {      listSupportedKinds();      System.out.flush();      throw new SitesException("Wrong number of args");    }    try {      BaseContentEntry<?> newEntry;      if (args.length == 4) {        newEntry=sitesHelper.createPage(args[1],args[2],args[3]);      } else {        newEntry=sitesHelper.createPage(args[1],args[2]);      }      System.out.println("Created!");      if (newEntry.getHtmlLink() != null) {        System.out.println("View it at " + newEntry.getHtmlLink().getHref());      }    } catch (    InvalidEntryException e) {      System.err.println(e.getResponseBody());    }  } else   if (name.equals("delete")) {    if (args.length == 1) {      throw new SitesException("Wrong number of args");    }    sitesHelper.service.delete(new URL(sitesHelper.getContentFeedUrl() + args[1]),"*");    System.out.println("Removed!");  } else   if (name.equals("upload")) {    if (args.length < 3) {      throw new SitesException("Wrong number of args");    }    try {      AttachmentEntry newEntry=null;      if (args.length == 4) {        newEntry=sitesHelper.uploadAttachment(args[1],sitesHelper.getContentFeedUrl() + args[2],args[3]);      } else {        newEntry=sitesHelper.uploadAttachment(args[1],sitesHelper.getContentFeedUrl() + args[2],"");      }      if (newEntry.getHtmlLink() != null) {        System.out.println("View it at " + newEntry.getHtmlLink().getHref());      }    } catch (    VersionConflictException e) {      System.err.println(e.getResponseBody());    }  } else   if (name.equals("download")) {    if (args.length < 3) {      throw new SitesException("Wrong number of args");    }    if (args[1].equals("all")) {      sitesHelper.downloadAllAttachments(args[2]);    } else {      sitesHelper.downloadAttachment(args[1],args[2]);    }    System.out.println("Done!");  } else   if (name.equals("revisions")) {    if (args.length == 1) {      throw new SitesException("Wrong number of args");    }    sitesHelper.getRevisionFeed(args[1]);  } else   if (name.equals("acls")) {    if (args.length == 1) {      throw new SitesException("Wrong number of args");    }    sitesHelper.getAclFeed(args[1]);  } else   if (name.equals("kinds")) {    listSupportedKinds();  } else   if (name.equals("help")) {    printMessage(COMMAND_HELP_MESSAGE);  } else   if (name.startsWith("q") || name.startsWith("exit")) {    return false;  } else {    System.out.println("Unknown command. Type 'help' for a list of commands.");  }  return true;}  }
class C{  public synchronized void stopRegistration(){  if (!mRegistered) {    return;  }  stopTimer();  mRegistered=false;  resetDialogPath();  mReasonCode=isBatteryLow() ? RcsServiceRegistration.ReasonCode.BATTERY_LOW : RcsServiceRegistration.ReasonCode.CONNECTION_LOST;  mCore.getListener().onRegistrationTerminated(mReasonCode);}  }
class C{  @Deprecated public int currentSize(){  return getNumberOfHDUs();}  }
class C{  public GrammarMutation(double probability){  super();  this.probability=probability;}  }
class C{  public DrawerBuilder withDrawerGravity(int gravity){  this.mDrawerGravity=gravity;  return this;}  }
class C{  public VcfRecord(String sequence,int start,String ref){  mSequence=sequence;  mStart=start;  mRefCall=ref;  mAltCalls=new ArrayList<>();  mFilters=new ArrayList<>();  mInfo=new LinkedHashMap<>();  mFormatAndSample=new LinkedHashMap<>();}  }
class C{  private ScheduledEvent createScheduledEvent(StorageOSUser user,URI tenantId,ScheduledEventCreateParam param,CatalogService catalogService) throws Exception {  URI executionWindow=null;  if (catalogService.getExecutionWindowRequired()) {    if (catalogService.getDefaultExecutionWindowId() == null || catalogService.getDefaultExecutionWindowId().equals(ExecutionWindow.NEXT)) {      List<URI> executionWindows=_dbClient.queryByConstraint(AlternateIdConstraint.Factory.getExecutionWindowTenantIdIdConstraint(tenantId.toString()));      Calendar currTime=Calendar.getInstance(TimeZone.getTimeZone("UTC"));      executionWindow=getNextExecutionWindow(executionWindows,currTime);    } else {      executionWindow=catalogService.getDefaultExecutionWindowId().getURI();    }    ExecutionWindow window=client.findById(executionWindow);    String msg=match(param.getScheduleInfo(),window);    if (!msg.isEmpty()) {      throw APIException.badRequests.scheduleInfoNotMatchWithExecutionWindow(msg);    }  }  URI scheduledEventId=URIUtil.createId(ScheduledEvent.class);  param.getOrderCreateParam().setScheduledEventId(scheduledEventId);  Calendar scheduledTime=ScheduleTimeHelper.getFirstScheduledTime(param.getScheduleInfo());  param.getOrderCreateParam().setScheduledTime(ScheduleTimeHelper.convertCalendarToStr(scheduledTime));  param.getOrderCreateParam().setExecutionWindow(executionWindow);  OrderRestRep restRep=orderService.createOrder(param.getOrderCreateParam());  ScheduledEvent newObject=new ScheduledEvent();  newObject.setId(scheduledEventId);  newObject.setTenant(tenantId.toString());  newObject.setCatalogServiceId(param.getOrderCreateParam().getCatalogService());  newObject.setEventType(param.getScheduleInfo().getReoccurrence() == 1 ? ScheduledEventType.ONCE : ScheduledEventType.REOCCURRENCE);  if (catalogService.getApprovalRequired()) {    log.info(String.format("ScheduledEventr %s requires approval",newObject.getId()));    newObject.setEventStatus(ScheduledEventStatus.APPROVAL);  } else {    newObject.setEventStatus(ScheduledEventStatus.APPROVED);  }  newObject.setScheduleInfo(new String(org.apache.commons.codec.binary.Base64.encodeBase64(param.getScheduleInfo().serialize()),UTF_8));  if (executionWindow != null) {    newObject.setExecutionWindowId(new NamedURI(executionWindow,"ExecutionWindow"));  }  newObject.setLatestOrderId(restRep.getId());  newObject.setOrderCreationParam(new String(org.apache.commons.codec.binary.Base64.encodeBase64(param.getOrderCreateParam().serialize()),UTF_8));  newObject.setStorageOSUser(new String(org.apache.commons.codec.binary.Base64.encodeBase64(user.serialize()),UTF_8));  client.save(newObject);  log.info("Created a new scheduledEvent {}:{}",newObject.getId(),param.getScheduleInfo().toString());  return newObject;}  }
class C{  public static boolean isBoolean(Object value){  if (value instanceof Boolean)   return true; else   if (value instanceof String) {    return isBoolean(value.toString());  } else   if (value instanceof ObjectWrap)   return isBoolean(((ObjectWrap)value).getEmbededObject(null)); else   return false;}  }
class C{  private void minNode(mxGraphHierarchyModel model){  LinkedList<WeightedCellSorter> nodeList=new LinkedList<WeightedCellSorter>();  Map<mxGraphAbstractHierarchyCell,WeightedCellSorter> map=new Hashtable<mxGraphAbstractHierarchyCell,WeightedCellSorter>();  Object[][] rank=new Object[model.maxRank + 1][];  for (int i=0; i <= model.maxRank; i++) {    mxGraphHierarchyRank rankSet=(mxGraphHierarchyRank)model.ranks.get(new Integer(i));    rank[i]=rankSet.toArray();    for (int j=0; j < rank[i].length; j++) {      mxGraphAbstractHierarchyCell cell=(mxGraphAbstractHierarchyCell)rank[i][j];      WeightedCellSorter cellWrapper=new WeightedCellSorter(cell,i);      cellWrapper.rankIndex=j;      cellWrapper.visited=true;      nodeList.add(cellWrapper);      map.put(cell,cellWrapper);    }  }  int maxTries=nodeList.size() * 10;  int count=0;  int tolerance=1;  while (!nodeList.isEmpty() && count <= maxTries) {    WeightedCellSorter cellWrapper=(WeightedCellSorter)nodeList.getFirst();    mxGraphAbstractHierarchyCell cell=cellWrapper.cell;    int rankValue=cellWrapper.weightedValue;    int rankIndex=cellWrapper.rankIndex;    Object[] nextLayerConnectedCells=cell.getNextLayerConnectedCells(rankValue).toArray();    Object[] previousLayerConnectedCells=cell.getPreviousLayerConnectedCells(rankValue).toArray();    int numNextLayerConnected=nextLayerConnectedCells.length;    int numPreviousLayerConnected=previousLayerConnectedCells.length;    int medianNextLevel=medianXValue(nextLayerConnectedCells,rankValue + 1);    int medianPreviousLevel=medianXValue(previousLayerConnectedCells,rankValue - 1);    int numConnectedNeighbours=numNextLayerConnected + numPreviousLayerConnected;    int currentPosition=cell.getGeneralPurposeVariable(rankValue);    double cellMedian=currentPosition;    if (numConnectedNeighbours > 0) {      cellMedian=(medianNextLevel * numNextLayerConnected + medianPreviousLevel * numPreviousLayerConnected) / numConnectedNeighbours;    }    boolean positionChanged=false;    if (cellMedian < currentPosition - tolerance) {      if (rankIndex == 0) {        cell.setGeneralPurposeVariable(rankValue,(int)cellMedian);        positionChanged=true;      } else {        mxGraphAbstractHierarchyCell leftCell=(mxGraphAbstractHierarchyCell)rank[rankValue][rankIndex - 1];        int leftLimit=leftCell.getGeneralPurposeVariable(rankValue);        leftLimit=leftLimit + (int)leftCell.width / 2 + (int)intraCellSpacing + (int)cell.width / 2;        if (leftLimit < cellMedian) {          cell.setGeneralPurposeVariable(rankValue,(int)cellMedian);          positionChanged=true;        } else         if (leftLimit < cell.getGeneralPurposeVariable(rankValue) - tolerance) {          cell.setGeneralPurposeVariable(rankValue,leftLimit);          positionChanged=true;        }      }    } else     if (cellMedian > currentPosition + tolerance) {      int rankSize=rank[rankValue].length;      if (rankIndex == rankSize - 1) {        cell.setGeneralPurposeVariable(rankValue,(int)cellMedian);        positionChanged=true;      } else {        mxGraphAbstractHierarchyCell rightCell=(mxGraphAbstractHierarchyCell)rank[rankValue][rankIndex + 1];        int rightLimit=rightCell.getGeneralPurposeVariable(rankValue);        rightLimit=rightLimit - (int)rightCell.width / 2 - (int)intraCellSpacing - (int)cell.width / 2;        if (rightLimit > cellMedian) {          cell.setGeneralPurposeVariable(rankValue,(int)cellMedian);          positionChanged=true;        } else         if (rightLimit > cell.getGeneralPurposeVariable(rankValue) + tolerance) {          cell.setGeneralPurposeVariable(rankValue,rightLimit);          positionChanged=true;        }      }    }    if (positionChanged) {      for (int i=0; i < nextLayerConnectedCells.length; i++) {        mxGraphAbstractHierarchyCell connectedCell=(mxGraphAbstractHierarchyCell)nextLayerConnectedCells[i];        WeightedCellSorter connectedCellWrapper=(WeightedCellSorter)map.get(connectedCell);        if (connectedCellWrapper != null) {          if (connectedCellWrapper.visited == false) {            connectedCellWrapper.visited=true;            nodeList.add(connectedCellWrapper);          }        }      }      for (int i=0; i < previousLayerConnectedCells.length; i++) {        mxGraphAbstractHierarchyCell connectedCell=(mxGraphAbstractHierarchyCell)previousLayerConnectedCells[i];        WeightedCellSorter connectedCellWrapper=(WeightedCellSorter)map.get(connectedCell);        if (connectedCellWrapper != null) {          if (connectedCellWrapper.visited == false) {            connectedCellWrapper.visited=true;            nodeList.add(connectedCellWrapper);          }        }      }    }    nodeList.removeFirst();    cellWrapper.visited=false;    count++;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:55.478 -0500",hash_original_method="275A06F50E7B2077A23380B094FCE956",hash_generated_method="B8740801FE90617FA5508CD7847DB756") public String encodeBody(){  return priority;}  }
class C{  public DatasetGroup(){  super();  this.id="NOID";}  }
class C{  public void readModes(final int[] columnsIndices,final BufferedReader reader) throws IOException {  String line=reader.readLine();  while (line != null && line.length() > 0) {    line=reader.readLine();  }}  }
class C{  public static boolean is(Object self,Object other){  return self == other;}  }
class C{  private void addCalendarEvent(String summary,Date start,boolean allDay,Date end,String location,String description,String[] attendees){  Intent intent=new Intent(Intent.ACTION_INSERT);  intent.setType("vnd.android.cursor.item/event");  long startMilliseconds=start.getTime();  intent.putExtra("beginTime",startMilliseconds);  if (allDay) {    intent.putExtra("allDay",true);  }  long endMilliseconds;  if (end == null) {    if (allDay) {      endMilliseconds=startMilliseconds + 24 * 60 * 60* 1000;    } else {      endMilliseconds=startMilliseconds;    }  } else {    endMilliseconds=end.getTime();  }  intent.putExtra("endTime",endMilliseconds);  intent.putExtra("title",summary);  intent.putExtra("eventLocation",location);  intent.putExtra("description",description);  if (attendees != null) {    intent.putExtra(Intent.EXTRA_EMAIL,attendees);  }  try {    rawLaunchIntent(intent);  } catch (  ActivityNotFoundException anfe) {    Log.w(TAG,"No calendar app available that responds to " + Intent.ACTION_INSERT);    intent.setAction(Intent.ACTION_EDIT);    launchIntent(intent);  }}  }
class C{  public void testMoveRenameFileSourceParentRootSourceMissing() throws Exception {  IgfsPath file=new IgfsPath("/" + FILE_NEW.name());  create(igfsSecondary,paths(DIR_NEW,SUBDIR_NEW),paths(file));  create(igfs,paths(DIR_NEW,SUBDIR_NEW),null);  igfs.rename(file,FILE_NEW);  checkExist(igfs,igfsSecondary,FILE_NEW);  checkNotExist(igfs,igfsSecondary,file);}  }
class C{  private void updateToolBar(){  ProjectionMethod proj=getWorkspaceComponent().getProjector().getProjectionMethod();  if (proj == null) {    return;  }  if (!(proj instanceof ProjectSammon)) {    sammonStepSizePanel.setVisible(false);  }  if (!(proj instanceof ProjectCoordinate)) {    adjustDimension1.setVisible(false);    adjustDimension2.setVisible(false);  } else {    adjustDimension1.setSelectedIndex(((ProjectCoordinate)proj).getHiD1());    adjustDimension2.setSelectedIndex(((ProjectCoordinate)proj).getHiD2());  }  if ((proj.isIterable()) && (showError)) {    errorBar.setVisible(true);  } else {    errorBar.setVisible(false);  }  if (getWorkspaceComponent().getProjector().getNumPoints() < proj.suggestedMinPoints()) {    warningLabel.setVisible(true);  } else {    warningLabel.setVisible(false);  }  if (proj instanceof ProjectSammon) {    sammonStepSizePanel.setVisible(true);  } else   if (proj instanceof ProjectCoordinate) {    adjustDimension1.setVisible(true);    adjustDimension2.setVisible(true);  }  setToolbarIterable(proj.isIterable());}  }
class C{  public void clearRecycle(){  ArrayList<ClientSocket> recycleList=null;synchronized (this) {    _idleHead=_idleTail=0;    for (int i=0; i < _idle.length; i++) {      ClientSocket stream;      stream=_idle[i];      _idle[i]=null;      if (stream != null) {        if (recycleList == null)         recycleList=new ArrayList<ClientSocket>();        recycleList.add(stream);      }    }  }  if (recycleList != null) {    for (    ClientSocket stream : recycleList) {      stream.closeImpl();    }  }}  }
class C{  public void addVariable(VariableInitializer v){  assertNotNull(v);  variables.add(v);  v.setParent(this);}  }
class C{  private void testStreamsFromValues(){  Stream<String> movieNames=Stream.of("Gods Must Be Crazy","Fiddler On The Roof","Ben-Hur");  movieNames.forEach(null);  String[] movieNames2={"Gods Must Be Crazy","Fiddler On The Roof"};  Stream<String> mNames2=Stream.of(movieNames2);  mNames2.forEach(null);  List<String> moviesList=new ArrayList<>();  moviesList.add("The Sound of Music");  moviesList.add("Gone with the Wind");  Stream<List<String>> fromList=Stream.of(moviesList);  fromList.forEach(null);}  }
class C{  private int xnBins(){  return cdf.length - 1;}  }
class C{  public static void randomInstance(int size,boolean print,AbstractDistribution dist){  System.out.print("\n" + dist + " ...");  cern.colt.Timer timer=new cern.colt.Timer().start();  for (int i=size; --i >= 0; ) {    double rand=dist.nextDouble();    if (print) {      if ((size - i - 1) % 8 == 0)       System.out.println();      System.out.print((float)rand + ", ");    }  }  timer.stop();  System.out.println("\n" + timer);}  }
class C{  public static String toString(byte[] input,String encoding) throws IOException {  return new String(input,Charsets.toCharset(encoding));}  }
class C{  public ColorMap(int[] map,double min,double max){  palette=map;  minValue=min;  maxValue=max;}  }
class C{  public void writeLine(final byte[] data) throws IOException, IllegalStateException {  LOG.trace("enter HttpConnection.writeLine(byte[])");  write(data);  writeLine();}  }
class C{  public void show(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=android.view.ViewGroup.LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);}  }
class C{  public void addChangingListener(OnWheelChangedListener listener){  changingListeners.add(listener);}  }
class C{  static Class lookUpFactoryClass(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  String factoryClassName=lookUpFactoryClassName(factoryId,propertiesFilename,fallbackClassName);  ClassLoader cl=findClassLoader();  if (factoryClassName == null) {    factoryClassName=fallbackClassName;  }  try {    Class providerClass=findProviderClass(factoryClassName,cl,true);    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return providerClass;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + factoryClassName + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + factoryClassName + " could not be instantiated: "+ x,x);  }}  }
class C{  public CustomersRecord(){  super(Customers.CUSTOMERS);}  }
class C{  public final boolean[] isBdedQuantATuple(){  return this.tupleOrs;}  }
class C{  public CTypeColumnRenderer(){  setOpaque(true);}  }
class C{  public static boolean removeRecipes(ItemStack... itemStacks){  boolean didRemove=false;  for (Iterator itr=CraftingManager.getInstance().getRecipeList().iterator(); itr.hasNext(); ) {    Object obj=itr.next();    if (obj instanceof IRecipe && ((IRecipe)obj).getRecipeOutput() != null) {      for (      ItemStack itemStack : itemStacks) {        if (((IRecipe)obj).getRecipeOutput().isItemEqual(itemStack)) {          itr.remove();          didRemove=true;          break;        }      }    }  }  return didRemove;}  }
class C{  private void discoverUnManagedVolumes(AccessProfile accessProfile){  StorageSystem storageSystem=null;  String detailedStatusMessage=null;  try {    storageSystem=_dbClient.queryObject(StorageSystem.class,accessProfile.getSystemId());    if (null == storageSystem) {      return;    }    volumeDiscoverer.discoverUnManagedVolumes(accessProfile,_dbClient,_coordinator,_partitionManager);    storageSystem.setDiscoveryStatus(DiscoveredDataObject.DataCollectionJobStatus.IN_PROGRESS.toString());    _dbClient.persistObject(storageSystem);  } catch (  Exception e) {    if (storageSystem != null) {      cleanupDiscovery(storageSystem);    }    detailedStatusMessage=String.format("Discovery of unmanaged volumes failed for system %s because %s",storageSystem.getId().toString(),e.getLocalizedMessage());    _logger.error(detailedStatusMessage,e);    throw new HDSCollectionException(detailedStatusMessage);  } finally {    if (storageSystem != null) {      try {        storageSystem.setLastDiscoveryStatusMessage(detailedStatusMessage);        _dbClient.persistObject(storageSystem);      } catch (      Exception ex) {        _logger.error(String.format("Error while updating unmanaged volume discovery status for system %s",storageSystem.getId()),ex);      }    }  }}  }
class C{  protected <T>T fromJson(String json,TypeReference typeRef) throws IOException {  return (T)MAPPER.readValue(json,typeRef);}  }
class C{  public String nextCDATA() throws JSONException {  char c;  int i;  StringBuffer sb=new StringBuffer();  for (; ; ) {    c=next();    if (end()) {      throw syntaxError("Unclosed CDATA");    }    sb.append(c);    i=sb.length() - 3;    if (i >= 0 && sb.charAt(i) == ']' && sb.charAt(i + 1) == ']' && sb.charAt(i + 2) == '>') {      sb.setLength(i);      return sb.toString();    }  }}  }
class C{  public String toString(){  String s=this.getClass().getName() + " " + this.name+ "\n"+ this.n+ " // <- Total # rows\n";  for (int r=0; r < this.n; r++) {    for (int c=0; c < this.n; c++) {      s=s + this.getValue(r,c) + " ";    }    s=s + "\n";  }  return s;}  }
class C{  public double magnitudeSquared(){  return this.x * this.x + this.y * this.y + this.z * this.z;}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer analyzer=new StandardAnalyzer();  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);  analyzer.close();}  }
class C{  public ImportNode(String packageName){  this.type=null;  this.alias=null;  this.isStar=true;  this.isStatic=false;  this.packageName=packageName;  this.fieldName=null;}  }
class C{  private void saveImpl(FileLocation loc) throws IOException {  OutputStream out=loc.getOutputStream();  PrintWriter w=new PrintWriter(new BufferedWriter(new UnicodeWriter(out,getEncoding())));  try {    write(w);  }  finally {    w.close();  }}  }
class C{  public TemplateException(String message){  super(message);}  }
class C{  private Node enq(final Node node){  for (; ; ) {    Node t=tail;    if (t == null) {      if (compareAndSetHead(new Node()))       tail=head;    } else {      node.prev=t;      if (compareAndSetTail(t,node)) {        t.next=node;        return t;      }    }  }}  }
class C{  public void detectAndSendChanges(){  super.detectAndSendChanges();  for (int i=0; i < this.crafters.size(); ++i) {    ICrafting icrafting=(ICrafting)this.crafters.get(i);    icrafting.sendProgressBarUpdate(this,1,this.entity.storage.getEnergyStored());    icrafting.sendProgressBarUpdate(this,2,this.entity.HLevel);    icrafting.sendProgressBarUpdate(this,3,this.entity.DLevel);    icrafting.sendProgressBarUpdate(this,4,this.entity.TLevel);    icrafting.sendProgressBarUpdate(this,5,this.entity.HeLevel);    icrafting.sendProgressBarUpdate(this,6,this.entity.BLevel);    icrafting.sendProgressBarUpdate(this,7,this.entity.Li6Level);    icrafting.sendProgressBarUpdate(this,8,this.entity.Li7Level);    icrafting.sendProgressBarUpdate(this,9,this.entity.HLevel2);    icrafting.sendProgressBarUpdate(this,10,this.entity.DLevel2);    icrafting.sendProgressBarUpdate(this,11,this.entity.TLevel2);    icrafting.sendProgressBarUpdate(this,12,this.entity.HeLevel2);    icrafting.sendProgressBarUpdate(this,13,this.entity.BLevel2);    icrafting.sendProgressBarUpdate(this,14,this.entity.Li6Level2);    icrafting.sendProgressBarUpdate(this,15,this.entity.Li7Level2);    icrafting.sendProgressBarUpdate(this,16,this.entity.storage.getEnergyStored() >> 16);    icrafting.sendProgressBarUpdate(this,17,this.entity.HLevel >> 16);    icrafting.sendProgressBarUpdate(this,18,this.entity.DLevel >> 16);    icrafting.sendProgressBarUpdate(this,19,this.entity.TLevel >> 16);    icrafting.sendProgressBarUpdate(this,20,this.entity.HeLevel >> 16);    icrafting.sendProgressBarUpdate(this,21,this.entity.BLevel >> 16);    icrafting.sendProgressBarUpdate(this,22,this.entity.Li6Level >> 16);    icrafting.sendProgressBarUpdate(this,23,this.entity.Li7Level >> 16);    icrafting.sendProgressBarUpdate(this,24,this.entity.HLevel2 >> 16);    icrafting.sendProgressBarUpdate(this,25,this.entity.DLevel2 >> 16);    icrafting.sendProgressBarUpdate(this,26,this.entity.TLevel2 >> 16);    icrafting.sendProgressBarUpdate(this,27,this.entity.HeLevel2 >> 16);    icrafting.sendProgressBarUpdate(this,28,this.entity.BLevel2 >> 16);    icrafting.sendProgressBarUpdate(this,29,this.entity.Li6Level2 >> 16);    icrafting.sendProgressBarUpdate(this,30,this.entity.Li7Level2 >> 16);    icrafting.sendProgressBarUpdate(this,31,this.entity.EShown);    icrafting.sendProgressBarUpdate(this,32,this.entity.EShown >> 16);    icrafting.sendProgressBarUpdate(this,33,this.entity.size);    icrafting.sendProgressBarUpdate(this,34,this.entity.size >> 16);    icrafting.sendProgressBarUpdate(this,37,(int)this.entity.efficiency);    icrafting.sendProgressBarUpdate(this,38,(int)this.entity.efficiency >> 16);    icrafting.sendProgressBarUpdate(this,39,(int)this.entity.heat);    icrafting.sendProgressBarUpdate(this,40,(int)this.entity.heat >> 16);    icrafting.sendProgressBarUpdate(this,41,(int)this.entity.heatVar);    icrafting.sendProgressBarUpdate(this,42,(int)this.entity.heatVar >> 16);    icrafting.sendProgressBarUpdate(this,43,(int)this.entity.HOut);    icrafting.sendProgressBarUpdate(this,44,(int)this.entity.HOut >> 16);    icrafting.sendProgressBarUpdate(this,45,(int)this.entity.DOut);    icrafting.sendProgressBarUpdate(this,46,(int)this.entity.DOut >> 16);    icrafting.sendProgressBarUpdate(this,47,(int)this.entity.TOut);    icrafting.sendProgressBarUpdate(this,48,(int)this.entity.TOut >> 16);    icrafting.sendProgressBarUpdate(this,49,(int)this.entity.HE3Out);    icrafting.sendProgressBarUpdate(this,50,(int)this.entity.HE3Out >> 16);    icrafting.sendProgressBarUpdate(this,51,(int)this.entity.HE4Out);    icrafting.sendProgressBarUpdate(this,52,(int)this.entity.HE4Out >> 16);    icrafting.sendProgressBarUpdate(this,53,(int)this.entity.nOut);    icrafting.sendProgressBarUpdate(this,54,(int)this.entity.nOut >> 16);    icrafting.sendProgressBarUpdate(this,55,(int)this.entity.complete);    icrafting.sendProgressBarUpdate(this,56,(int)this.entity.complete >> 16);  }}  }
class C{  public JRadioButtonMenuItem(Icon icon){  this(null,icon,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 08:48:10.883 -0400",hash_original_method="FCC09A0316D25A0FD982AB2DBCE6CE23",hash_generated_method="02EB1BC5DBAADD8DAD8F1B7811464508") private PrintDocumentInfo(PrintDocumentInfo prototype){  mName=prototype.mName;  mPageCount=prototype.mPageCount;  mContentType=prototype.mContentType;  mDataSize=prototype.mDataSize;}  }
class C{  @Override public ThaiBuddhistDate dateEpochDay(long epochDay){  return new ThaiBuddhistDate(LocalDate.ofEpochDay(epochDay));}  }
class C{  public void triggerUpdate(){  if (traceData.size() == 0 && !(currentYDataChanged || currentYDataArrayChanged))   return;  if (currentYDataArray.length > 0)   addDataArray(); else   addDataPoint();}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double z;  int i, c;  int d, x2, y2;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    byte numNeighbouringStreamCells=0;    double currentValue=0;    double currentOrder=0;    double maxStreamOrder=noData;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            currentOrder=1;            output.setValue(y,x,currentOrder);            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  currentValue=output.getValue(y,x);                  if (currentValue > currentOrder) {                    flag=false;                    break;                  }                  if (currentValue == currentOrder) {                    numNeighbouringStreamCells=0;                    for (d=0; d < 8; d++) {                      x2=x + dX[d];                      y2=y + dY[d];                      if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[d] && output.getValue(y2,x2) == currentOrder) {                        numNeighbouringStreamCells++;                      }                    }                    if (numNeighbouringStreamCells >= 2) {                      currentOrder++;                      if (currentOrder > maxStreamOrder) {                        maxStreamOrder=currentOrder;                      }                    } else {                      flag=false;                      break;                    }                  }                  if (currentValue < currentOrder) {                    output.setValue(y,x,currentOrder);                  }                }              } else {                if (streams.getValue(y,x) > 0) {                  output.setValue(y,x,output.getValue(y,x) + 1);                }                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public synchronized <T extends Aspect>T persist(T transientInstance,boolean overrideVersion) throws Exception {  try {    validate(transientInstance);    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    if (null == transientInstance.getId()) {      entityManager.persist(transientInstance);      entityManager.getTransaction().commit();      transientInstance.setDirty(false);      return transientInstance;    } else {      if (overrideVersion) {        Aspect aspect=entityManager.find(transientInstance.getClass(),transientInstance.getId());        transientInstance.setVersion(aspect.getVersion());      }      T instance=entityManager.merge(transientInstance);      entityManager.getTransaction().commit();      instance.setDirty(false);      return instance;    }  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  private static long med3(final long a,final long b,final long c,final LongComparator comp){  final int ab=comp.compare(a,b);  final int ac=comp.compare(a,c);  final int bc=comp.compare(b,c);  return (ab < 0 ? (bc < 0 ? b : ac < 0 ? c : a) : (bc > 0 ? b : ac > 0 ? c : a));}  }
class C{  public String toStringForQuestState(){  final StringBuilder sb=new StringBuilder();  boolean first=true;  for (  final Map.Entry<String,Integer> e : entrySet()) {    if (first) {      first=false;    } else {      sb.append(';');    }    sb.append(e.getKey());    sb.append("=");    sb.append(e.getValue());  }  return sb.toString();}  }
class C{  private void distributedLockForClear(){  if (!this.scope.isGlobal()) {    try {      getLockService().lock("_clearOperation",-1,-1);    } catch (    IllegalStateException e) {      lockCheckReadiness();      throw e;    }  }}  }
class C{  public static void println(int priority,String tag,String msg,Throwable tr){  if (mLogNode != null) {    mLogNode.println(priority,tag,msg,tr);  }}  }
class C{  @LargeTest public void testPropertiesForNonExsitingFile() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "abc.3gp";  boolean flagForException=false;  try {    new MediaVideoItem(mVideoEditor,"m1",videoItemFilename,MediaItem.RENDERING_MODE_BLACK_BORDER);  } catch (  IllegalArgumentException e) {    flagForException=true;  }catch (  IOException e) {    flagForException=true;  }  assertTrue("Media Properties for non exsisting file",flagForException);}  }
class C{  public ViolationMessage(Rules rule,String filePath,int lineNumber,int columnNumber,Severity severity,String violationMessage){  this.rule=rule;  this.filePath=filePath;  this.lineNumber=lineNumber;  this.columnNumber=columnNumber;  this.severity=severity;  this.violationMessage=violationMessage;}  }
class C{  static public Iso3166 find(String countryId){  return (Iso3166)all.get(countryId);}  }
class C{  public TexturedButtonPainter(Which state,PaintContext ctx){  super(state,ctx);}  }
class C{  public static void pause(int t){  long millis=System.currentTimeMillis();  if (millis < nextDraw) {    try {      Thread.sleep(nextDraw - millis);    } catch (    InterruptedException e) {      System.out.println("Error sleeping");    }    millis=nextDraw;  }  nextDraw=millis + t;}  }
class C{  public CinderApi(CinderEndPointInfo endPointInfo,Client client){  endPoint=endPointInfo;  this.client=new CinderRESTClient(client,endPointInfo.getCinderToken());}  }
class C{  public void engineSetKeyEntry(String alias,Key key,char[] password,Certificate[] chain) throws KeyStoreException {synchronized (entries) {    try {      KeyProtector keyProtector=new KeyProtector(password);      if (key instanceof PrivateKey) {        PrivateKeyEntry entry=new PrivateKeyEntry();        entry.date=new Date();        entry.protectedKey=keyProtector.protect((PrivateKey)key);        if ((chain != null) && (chain.length != 0)) {          entry.chain=chain.clone();        } else {          entry.chain=null;        }        entries.put(alias.toLowerCase(Locale.ENGLISH),entry);      } else {        SecretKeyEntry entry=new SecretKeyEntry();        entry.date=new Date();        entry.sealedKey=keyProtector.seal(key);        entries.put(alias.toLowerCase(Locale.ENGLISH),entry);      }    } catch (    Exception e) {      throw new KeyStoreException(e.getMessage());    }  }}  }
class C{  public void close(){  boolean close=false;  if (useCnt.decrementAndGet() == 0) {    logLock.writeLock().lock();    try {      if (useCnt.get() == 0) {        loggers.remove(endpoint);        close=true;      }    }  finally {      logLock.writeLock().unlock();    }  }  if (close) {    U.interrupt(flushWorker);    try {      U.join(flushWorker);    } catch (    IgniteInterruptedCheckedException ignore) {    }    entries.clear();  }}  }
class C{  public static void main(String[] args){  Draw draw1=new Draw("Test client 1");  draw1.square(.2,.8,.1);  draw1.filledSquare(.8,.8,.2);  draw1.circle(.8,.2,.2);  draw1.setPenColor(Draw.MAGENTA);  draw1.setPenRadius(.02);  draw1.arc(.8,.2,.1,200,45);  Draw draw2=new Draw("Test client 2");  draw2.setCanvasSize(900,200);  draw2.setPenRadius();  draw2.setPenColor(Draw.BLUE);  double[] x={.1,.2,.3,.2};  double[] y={.2,.3,.2,.1};  draw2.filledPolygon(x,y);  draw2.setPenColor(Draw.BLACK);  draw2.text(0.2,0.5,"bdfdfdfdlack text");  draw2.setPenColor(Draw.WHITE);  draw2.text(0.8,0.8,"white text");}  }
class C{  @Override public int hashCode(){  return this.getColumnSchema().getColumnUniqueId().hashCode();}  }
class C{  private void deleteCacheFromDisk(){  File file=fileResolver.getClassHashCacheFile().getAbsoluteFile();  if (file.exists()) {    if (!file.delete()) {      log.warn("Unable to delete the existing class cache file: " + file.getAbsolutePath());    }  }}  }
