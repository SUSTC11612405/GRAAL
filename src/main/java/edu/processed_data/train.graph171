class C{  @Override public String toString(){  return String.valueOf(getValue());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:44.909 -0500",hash_original_method="528678E8CA90A52E25DB45830845A36C",hash_generated_method="E5C8943AA23C175AD9456952BB0A5717") public SIPHeader parse() throws ParseException {  MinSE minse=new MinSE();  if (debug)   dbg_enter("parse");  try {    headerName(TokenTypes.MINSE_TO);    String nextId=lexer.getNextId();    try {      int delta=Integer.parseInt(nextId);      minse.setExpires(delta);    } catch (    NumberFormatException ex) {      throw createParseException("bad integer format");    }catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }    this.lexer.SPorHT();    super.parse(minse);    return minse;  }  finally {    if (debug)     dbg_leave("parse");  }}  }
class C{  BinarySearchTreeNode<E> contains(BinarySearchTreeNode<E> node,E comparable){  while (node != null) {    E nodeData=node.comparable;    int diff=comparable.compareTo(nodeData);    if (diff == 0) {      if (node.comparable.equals(comparable)) {        return node;      } else {        return null;      }    } else     if (diff < 0) {      node=node.left;    } else {      node=node.right;    }  }  return null;}  }
class C{  private static String csvFormat(String s){  if (s.contains("\"") || s.contains("\n") || s.contains(",")) {    return "\"" + s.replace("\"","\"\"") + "\"";  }  return s;}  }
class C{  @Scheduled(cron="0 0 0 * * ?") public void removeOldPersistentTokens(){  LocalDate now=LocalDate.now();  persistentTokenRepository.findByTokenDateBefore(now.minusMonths(1)).stream().forEach(null);}  }
class C{  public void paintComboBoxBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter list: ");  int[] list=new int[input.nextInt()];  for (int i=0; i < list.length; i++)   list[i]=input.nextInt();  System.out.println("The list is " + (isSorted(list) ? "already " : "not ") + "sorted");}  }
class C{  protected void writeOption(Option option) throws IOException {  indentSmart();  write('<');  write("option");  Object value=option.getAttributes().getAttribute(HTML.Attribute.VALUE);  if (value != null) {    write(" value=" + value);  }  if (option.isSelected()) {    write(" selected");  }  write('>');  if (option.getLabel() != null) {    write(option.getLabel());  }  writeLineSeparator();}  }
class C{  public String encrypt(String message){  String base64=null;  PublicKey publicKey=this.getPublicKey_from_Truststore();  try {    Cipher cipher=Cipher.getInstance(publicKey.getAlgorithm());    cipher.init(Cipher.ENCRYPT_MODE,publicKey);    byte[] stringBytes=message.getBytes("UTF8");    byte[] raw=cipher.doFinal(stringBytes);    base64=DatatypeConverter.printBase64Binary(raw);  } catch (  Exception e) {    String msg=MessageFormat.format("Cannot encrypt message. Error= {0}",e.getMessage());    logger.error(msg);    throw new ServerRuntimeException(msg,e);  }  return base64;}  }
class C{  public Vector2(double direction){  this.x=Math.cos(direction);  this.y=Math.sin(direction);}  }
class C{  protected int calculateThreshold(int newCapacity,float factor){  return (int)(newCapacity * factor);}  }
class C{  public static double logpdf(double x,double mu,double sigma,double xi){  x=(x - mu) / sigma;  if (x < 0 || (xi < 0 && x > -1. / xi)) {    return Double.NEGATIVE_INFINITY;  }  if (xi == 0) {    return Double.POSITIVE_INFINITY;  }  return ((xi == -1) ? 0. : Math.log(1 + xi * x) * (-1 / xi - 1)) - Math.log(sigma);}  }
class C{  private static int uarimaxLt(double value,double[] bv,int[] bvi,BinaryOperator bOp) throws DMLRuntimeException {  int ixMax=bv.length;  if (value < bv[0] || value >= bv[bv.length - 1])   return ixMax;  int ix=Arrays.binarySearch(bv,value);  if (ix < 0)   ix=Math.abs(ix) - 2;  ixMax=bvi[ix] + 1;  return ixMax;}  }
class C{  public String toString(){  String str="BuddhistChronology";  DateTimeZone zone=getZone();  if (zone != null) {    str=str + '[' + zone.getID()+ ']';  }  return str;}  }
class C{  public void severe(String mesg){  log(Level.SEVERE,mesg,null);}  }
class C{  private CellSignalStrengthCdma(Parcel in){  mCdmaDbm=in.readInt();  mCdmaEcio=in.readInt();  mEvdoDbm=in.readInt();  mEvdoEcio=in.readInt();  mEvdoSnr=in.readInt();  if (DBG)   log("CellSignalStrengthCdma(Parcel): " + toString());}  }
class C{  public static final double[] ecfToLLA(final double x,final double y,final double z,double[] lla){  boolean atPole=false;  final double ad_c=1.0026000D;  final double e2=(SEMIMAJOR_AXIS2 - SEMIMINOR_AXIS2) / (SEMIMAJOR_AXIS2);  final double ep2=(SEMIMAJOR_AXIS2 - SEMIMINOR_AXIS2) / (SEMIMINOR_AXIS2);  final double cos67P5=0.38268343236508977D;  if (lla == null) {    lla=new double[3];  }  if (x != 0.0) {    lla[0]=StrictMath.atan2(y,x);  } else {    if (y > 0) {      lla[0]=PI_OVER_2;    } else     if (y < 0) {      lla[0]=-PI_OVER_2;    } else {      atPole=true;      lla[0]=0.0D;      if (z > 0.0) {        lla[1]=PI_OVER_2;      } else       if (z < 0.0) {        lla[1]=-PI_OVER_2;      } else {        lla[1]=PI_OVER_2;        lla[2]=-SEMIMINOR_AXIS;        return lla;      }    }  }  final double w2=x * x + y * y;  final double w=StrictMath.sqrt(w2);  final double t0=z * ad_c;  final double s0=StrictMath.sqrt(t0 * t0 + w2);  final double sinB0=t0 / s0;  final double cosB0=w / s0;  final double sin3B0=sinB0 * sinB0 * sinB0;  final double t1=z + SEMIMINOR_AXIS * ep2 * sin3B0;  final double sum=w - SEMIMAJOR_AXIS * e2 * cosB0* cosB0* cosB0;  final double s1=StrictMath.sqrt(t1 * t1 + sum * sum);  final double sinP1=t1 / s1;  final double cosP1=sum / s1;  final double rn=SEMIMAJOR_AXIS / StrictMath.sqrt(1.0D - e2 * sinP1 * sinP1);  if (cosP1 >= cos67P5) {    lla[2]=w / cosP1 - rn;  } else   if (cosP1 <= -cos67P5) {    lla[2]=w / -cosP1 - rn;  } else {    lla[2]=z / sinP1 + rn * (e2 - 1.0);  }  if (!atPole) {    lla[1]=StrictMath.atan(sinP1 / cosP1);  }  lla[0]=StrictMath.toDegrees(lla[0]);  lla[1]=StrictMath.toDegrees(lla[1]);  return lla;}  }
class C{  public void mousePressed(MouseEvent e){  getHandler().mousePressed(e);}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(version);  v.add(sid);  v.add(digAlgorithm);  if (authenticatedAttributes != null) {    v.add(new DERTaggedObject(false,0,authenticatedAttributes));  }  v.add(digEncryptionAlgorithm);  v.add(encryptedDigest);  if (unauthenticatedAttributes != null) {    v.add(new DERTaggedObject(false,1,unauthenticatedAttributes));  }  return new DERSequence(v);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public int find(byte[] buffer,int length){  for (int i=0; i < length; i++) {    System.arraycopy(searchBuffer,1,searchBuffer,0,searchBuffer.length - 1);    searchBuffer[searchBuffer.length - 1]=buffer[i];    available=Math.min(available + 1,searchBuffer.length);    if (ByteBuffer.wrap(searchBuffer,searchBuffer.length - available,available).equals(ByteBuffer.wrap(marker))) {      available=0;      return i;    }  }  return -1;}  }
class C{  @SuppressWarnings({"cast","unchecked"}) public static <V>Weigher<V> singleton(){  return (Weigher<V>)SingletonWeigher.INSTANCE;}  }
class C{  public static void showMessage(final String message,final Switch ignore){  MessageService.instance().showMessage(message,ignore);}  }
class C{  public PutRepositoryRequest source(byte[] repositoryDefinition,int offset,int length){  try (XContentParser parser=XContentFactory.xContent(repositoryDefinition,offset,length).createParser(repositoryDefinition,offset,length)){    return source(parser.mapOrdered());  } catch (  IOException e) {    throw new IllegalArgumentException("failed to parse repository source",e);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  static String read(IXMLReader reader,char entityChar) throws IOException, XMLParseException {  char ch=reader.read();  StringBuffer buf=new StringBuffer();  buf.append(ch);  if (ch == entityChar) {    while (ch != ';') {      ch=reader.read();      buf.append(ch);    }  }  return buf.toString();}  }
class C{  private static RecipeMatching matchShapeless(ItemIngredient[] recipe,CraftingGrid craftingGrid){  if (craftingGrid.countFilledStacks() != recipe.length) {    return null;  }  Item[] matched=new Item[recipe.length];  int[] indices=new int[recipe.length];  outer:   for (int i=0; i < craftingGrid.size(); i++) {    Optional<Item> ingredient=craftingGrid.getStack(i);    if (!ingredient.isPresent()) {      continue;    }    for (int j=0; j < recipe.length; j++) {      if (matched[j] != null) {        continue;      }      if (recipe[j].matches(ingredient.get())) {        matched[j]=ingredient.get();        indices[j]=i;        continue outer;      }    }    return null;  }  return new RecipeMatching(matched,indices);}  }
class C{  private void makeLastStateComparable(){  if (lastState == null) {    return;  }  if (SystemUtils.IS_OS_WINDOWS) {    filterOut(lastState,PosixFilePermissions.name());  } else {    filterOut(lastState,DosFilePermissions.name());  }  if (!SELinux.ENABLED) {    filterOut(lastState,SELinuxLabel.name());  }  resetFileStates(lastState.getFileStates());  if (context.getIgnored().isAttributesIgnored()) {    currentState.getFileStates().forEach(null);    lastState.getFileStates().forEach(null);  }  if (context.getIgnored().isDatesIgnored()) {    FileTime noTime=new FileTime(0,0);    currentState.getFileStates().forEach(null);    lastState.getFileStates().forEach(null);  }}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB) public boolean isRunning(){  if (LOLLIPOP) {    return mNativeAnimator.isRunning();  } else {    return mSupportAnimator.isRunning();  }}  }
class C{  public int columnAtPoint(Point point){  int x=point.x;  if (!getComponentOrientation().isLeftToRight()) {    x=getWidthInRightToLeft() - x - 1;  }  return getColumnModel().getColumnIndexAtX(x);}  }
class C{  public void fill(double val){  Arrays.fill(_data,0,_pos,val);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGraphPackage.STATE__SCOPES:    getScopes().clear();  getScopes().addAll((Collection<? extends Scope>)newValue);return;case SGraphPackage.STATE__NAMESPACE:setNamespace((String)newValue);return;case SGraphPackage.STATE__NAME:setName((String)newValue);return;case SGraphPackage.STATE__PARENT_REGION:setParentRegion((Region)newValue);return;case SGraphPackage.STATE__INCOMING_TRANSITIONS:getIncomingTransitions().clear();getIncomingTransitions().addAll((Collection<? extends Transition>)newValue);return;case SGraphPackage.STATE__OUTGOING_TRANSITIONS:getOutgoingTransitions().clear();getOutgoingTransitions().addAll((Collection<? extends Transition>)newValue);return;case SGraphPackage.STATE__REGIONS:getRegions().clear();getRegions().addAll((Collection<? extends Region>)newValue);return;case SGraphPackage.STATE__DOCUMENTATION:setDocumentation((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static void formatDoubleFast(double source,int decimals,int precision,StringBuffer target){  if (isRoundedToZero(source,decimals,precision)) {    target.append('0');    return;  } else   if (Double.isNaN(source) || Double.isInfinite(source)) {    target.append(Double.toString(source));    return;  }  boolean isPositive=source >= 0.0;  source=Math.abs(source);  int scale=(source >= 1.0) ? decimals : precision;  long intPart=(long)Math.floor(source);  double tenScale=tenPowDouble(scale);  double fracUnroundedPart=(source - intPart) * tenScale;  long fracPart=Math.round(fracUnroundedPart);  if (fracPart >= tenScale) {    intPart++;    fracPart=Math.round(fracPart - tenScale);  }  if (fracPart != 0L) {    while (fracPart % 10L == 0L) {      fracPart=fracPart / 10L;      scale--;    }  }  if (intPart != 0L || fracPart != 0L) {    if (!isPositive) {      target.append('-');    }    target.append(intPart);    if (fracPart != 0L) {      target.append('.');      while (scale > 0 && fracPart < tenPowDouble(--scale)) {        target.append('0');      }      target.append(fracPart);    }  } else {    target.append('0');  }}  }
class C{  public SearchArea(String sidc){  super(sidc);}  }
class C{  public int size(){  return n;}  }
class C{  public void hideKeyboard(){  try {    Activity activity=getActivity();    if (activity == null) {      return;    }    InputMethodManager input=(InputMethodManager)activity.getSystemService(Activity.INPUT_METHOD_SERVICE);    if (input == null) {      return;    }    View currentFocus=activity.getCurrentFocus();    if (currentFocus == null || currentFocus.getWindowToken() == null) {      return;    }    input.hideSoftInputFromWindow(currentFocus.getWindowToken(),0);  } catch (  Exception e) {  }}  }
class C{  private static String replaceUserId(String uid,String s){  String[] parts=s.split("/");  for (int i=0; i < parts.length; i++) {    if (parts[i].matches("[0-9]+")) {      parts[i]=uid;      break;    }  }  return StringUtil.join(parts,"/");}  }
class C{  private static State next(final InputStream stream,final State state,final ByteArrayOutputStream line) throws IOException {  final int next=stream.read();  if (next == -1) {    throw new IOException("chunked stream ended unexpectedly");  }  final State result;switch (state) {case NORMAL:    result=nextNormal(state,line,next);  break;case R:if (next == '\n') {  result=State.END;} else {  throw new IOException(String.format("%s%s","Protocol violation: Unexpected"," single newline character in chunk size"));}break;case QUOTED_STRING:result=nextQuoted(stream,state,line,next);break;default :throw new IllegalStateException("Bad state");}return result;}  }
class C{  @Nullable @SuppressWarnings("unchecked") public static <T extends PsiFileBase>T findInjectedFile(@NotNull final PsiElement expression,@NotNull final Class<T> classToFind){  final List<Pair<PsiElement,TextRange>> files=InjectedLanguageManager.getInstance(expression.getProject()).getInjectedPsiFiles(expression);  if (files == null) {    return null;  }  for (  final Pair<PsiElement,TextRange> fileInfo : files) {    final PsiElement injectedFile=fileInfo.first;    if (classToFind.isAssignableFrom(injectedFile.getClass())) {      return (T)injectedFile;    }  }  return null;}  }
class C{  public boolean isCurrentSpecial(){  if (!isValidIndex())   return false;  return lcText[pos] == '_' || lcText[pos] == '$' || lcText[pos] == SystemUtil.CHAR_EURO || lcText[pos] == SystemUtil.CHAR_POUND;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TGETTER__DECLARED_TYPE_REF:    setDeclaredTypeRef((TypeRef)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static int inlinedSizeEstimate(NormalMethod callee,CompilationState state){  int sizeEstimate=callee.inlinedSizeEstimate();  Instruction callInstr=state.getCallInstruction();  int numArgs=Call.getNumberOfParams(callInstr);  double reductionFactor=1.0;  OptOptions opts=state.getOptions();  for (int i=0; i < numArgs; i++) {    Operand op=Call.getParam(callInstr,i);    if (op instanceof RegisterOperand) {      RegisterOperand rop=(RegisterOperand)op;      TypeReference type=rop.getType();      if (type.isReferenceType()) {        if (type.isArrayType()) {          if (rop.isPreciseType()) {            reductionFactor-=opts.INLINE_PRECISE_REG_ARRAY_ARG_BONUS;          } else           if (rop.isDeclaredType() && callee.hasArrayWrite() && type.getArrayElementType().isReferenceType()) {            reductionFactor-=opts.INLINE_DECLARED_AASTORED_ARRAY_ARG_BONUS;          }        } else {          if (rop.isPreciseType()) {            reductionFactor-=opts.INLINE_PRECISE_REG_CLASS_ARG_BONUS;          } else           if (rop.isExtant()) {            reductionFactor-=opts.INLINE_EXTANT_REG_CLASS_ARG_BONUS;          }        }      }    } else     if (op.isIntConstant()) {      reductionFactor-=opts.INLINE_INT_CONST_ARG_BONUS;    } else     if (op.isNullConstant()) {      reductionFactor-=opts.INLINE_NULL_CONST_ARG_BONUS;    } else     if (op.isObjectConstant()) {      reductionFactor-=opts.INLINE_OBJECT_CONST_ARG_BONUS;    }  }  reductionFactor=Math.max(reductionFactor,1.0 - opts.INLINE_MAX_ARG_BONUS);  if (opts.INLINE_CALL_DEPTH_COST != 0.00) {    double depthCost=Math.pow(1.0 + opts.INLINE_CALL_DEPTH_COST,state.getInlineDepth() + 1);    return (int)(sizeEstimate * reductionFactor * depthCost);  } else {    return (int)(sizeEstimate * reductionFactor);  }}  }
class C{  private void enqueue(E x){  items[putIndex]=x;  putIndex=inc(putIndex);  count++;  notEmpty.signal();}  }
class C{  @SuppressWarnings("unchecked") public <T>Source<T> reverse(T... ts){  return Arbitrary.reverse(ts);}  }
class C{  public final void subtraction(MathVector u,MathVector v){  for (int i=0; i < NDIM; i++) {    data[i]=u.data[i] - v.data[i];  }}  }
class C{  public String toString(){  int iMax=length() - 1;  if (iMax == -1) {    return "[]";  }  StringBuilder b=new StringBuilder((17 + 2) * (iMax + 1));  b.append('[');  for (int i=0; ; i++) {    b.append(longBitsToDouble(longs.get(i)));    if (i == iMax) {      return b.append(']').toString();    }    b.append(',').append(' ');  }}  }
class C{  public static RpfTocHandler[] createTocHandlers(String[] RpfPaths){  RpfTocHandler[] tocs=new RpfTocHandler[(RpfPaths != null ? RpfPaths.length : 0)];  if (RpfPaths != null) {    for (int i=0; i < tocs.length; i++) {      tocs[i]=new RpfTocHandler(RpfPaths[i],i);    }  }  return tocs;}  }
class C{  public void read(ExceptionlessInputStream in){  sizes=new IVector();  sizes.read(in);  if (sizes.size() == 0) {    defaultCapacity2=defaultDefaultCapacity2;    vector=new int[defaultCapacity1][defaultCapacity2];  } else {    vector=new int[sizes.size()][];    for (int i=0; i < vector.length; ++i) {      vector[i]=new int[sizes.get(i)];      for (int j=0; j < vector[i].length; ++j)       vector[i][j]=in.readInt();    }    defaultCapacity2=in.readInt();  }}  }
class C{  protected void processActionEvent(ActionEvent e){  ActionListener listener=actionListener;  if (listener != null) {    listener.actionPerformed(e);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void decodeTilePixels(byte[] input,Rectangle newRect,byte[] bdata){  if (bitsPerSample[0] == 8) {    decodePackbits(input,unitsInThisTile,bdata);  } else   if (bitsPerSample[0] == 4) {    int bytesInThisTile;    if ((newRect.width % 8) == 0) {      bytesInThisTile=(newRect.width / 2) * newRect.height;    } else {      bytesInThisTile=(newRect.width / 2 + 1) * newRect.height;    }    decodePackbits(input,bytesInThisTile,bdata);  }}  }
class C{  private LoginEndpoint(){}  }
class C{  public EvictingQueue(int i){  this.size=i;  array=new Object[size];}  }
class C{  @org.junit.Test public void verifyGetStringResponseWithExample() throws Exception {  Map<String,String> queryParams=new HashMap<String,String>();  String str=client.invokeAPI("/mockResponses/primitiveStringResponseWithExample","GET",queryParams,null,new HashMap<String,String>(),null,"application/json",null,new String[0]);  assertEquals(str,"\"fun\"");}  }
class C{  public Collection<?> values(){  return Collections.unmodifiableCollection(contents.values());}  }
class C{  public static String asciis2String(String ASCIIs){  String[] ASCIIss=ASCIIs.split(",");  StringBuffer sb=new StringBuffer();  for (int i=0; i < ASCIIss.length; i++) {    sb.append((char)__ascii2Char(Integer.parseInt(ASCIIss[i])));  }  return sb.toString();}  }
class C{  public static boolean trackReferenceCounts(){  return getInstance().trackReferenceCounts();}  }
class C{  public void configure(){  if (cmdPrefix != null) {    prefix=cmdPrefix.split(" ");  }}  }
class C{  public SnmpInt toSnmpValue() throws IllegalArgumentException {  if (value == unspecified)   throw new IllegalArgumentException("`unspecified' is not a valid SNMP value.");  return new SnmpInt(value);}  }
class C{  public boolean containsOnly(String string,int startIndex){  for (int i=startIndex; i < string.length(); i++) {    char c=string.charAt(i);    if (!bitSet.get(c)) {      return false;    }  }  return true;}  }
class C{  @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SexecPackage.CALL__STEP:    if (step != null)     msgs=((InternalEObject)step).eInverseRemove(this,SexecPackage.STEP__CALLER,Step.class,msgs);  return basicSetStep((Step)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public void testSPCache() throws Exception {  if (versionMeetsMinimum(5,0)) {    CallableStatement storedProc=null;    createProcedure("testSpParse","(IN FOO VARCHAR(15))\nBEGIN\nSELECT 1;\nend\n");    int numIterations=10;    long startTime=System.currentTimeMillis();    for (int i=0; i < numIterations; i++) {      storedProc=this.conn.prepareCall("{call testSpParse(?)}");      storedProc.close();    }    long elapsedTime=System.currentTimeMillis() - startTime;    System.out.println("Standard parsing/execution: " + elapsedTime + " ms");    storedProc=this.conn.prepareCall("{call testSpParse(?)}");    storedProc.setString(1,"abc");    this.rs=storedProc.executeQuery();    assertTrue(this.rs.next());    assertTrue(this.rs.getInt(1) == 1);    Properties props=new Properties();    props.setProperty("cacheCallableStmts","true");    Connection cachedSpConn=getConnectionWithProps(props);    startTime=System.currentTimeMillis();    for (int i=0; i < numIterations; i++) {      storedProc=cachedSpConn.prepareCall("{call testSpParse(?)}");      storedProc.close();    }    elapsedTime=System.currentTimeMillis() - startTime;    System.out.println("Cached parse stage: " + elapsedTime + " ms");    storedProc=cachedSpConn.prepareCall("{call testSpParse(?)}");    storedProc.setString(1,"abc");    this.rs=storedProc.executeQuery();    assertTrue(this.rs.next());    assertTrue(this.rs.getInt(1) == 1);  }}  }
class C{  public OpenSSLPBEParametersGenerator(){}  }
class C{  private void handleIntent(Intent intent){  if (intent.getAction().equals(StreamService.STREAM_DONE_LOADING_INTENT)) {    boolean success=intent.getBooleanExtra(StreamService.STREAM_DONE_LOADING_SUCCESS,false);    if (!success) {      presenter.streamStopped();      presenter.error(application.getString(R.string.stream_error_toast));    } else {      presenter.streamPlaying();    }  } else   if (intent.getAction().equals(StreamService.TIMER_DONE_INTENT)) {    presenter.streamStopped();  } else   if (intent.getAction().equals(StreamService.TIMER_UPDATE_INTENT)) {    long timerValue=(long)intent.getIntExtra(StreamService.TIMER_UPDATE_VALUE,0);    presenter.updateTimerValue(formatTimer(timerValue));  }}  }
class C{  public static boolean isExternalStorageAvailable(){  String state=Environment.getExternalStorageState();  if (state.equals(Environment.MEDIA_MOUNTED)) {    return true;  } else {    return false;  }}  }
class C{  public static void main(String[] argv) throws IOException, SAXException {  int optind=getopts(options,argv);  if (hasOption(options,"--help")) {    doHelp();    return;  }  if (hasOption(options,"--version")) {    System.err.println("TagSoup version 1.2");    return;  }  if (argv.length == optind) {    process("",System.out);  } else   if (hasOption(options,"--files")) {    for (int i=optind; i < argv.length; i++) {      String src=argv[i];      String dst;      int j=src.lastIndexOf('.');      if (j == -1)       dst=src + ".xhtml"; else       if (src.endsWith(".xhtml"))       dst=src + "_"; else       dst=src.substring(0,j) + ".xhtml";      System.err.println("src: " + src + " dst: "+ dst);      OutputStream os=new FileOutputStream(dst);      process(src,os);    }  } else {    for (int i=optind; i < argv.length; i++) {      System.err.println("src: " + argv[i]);      process(argv[i],System.out);    }  }}  }
class C{  protected void refreshResource(Resource resource,String encoding) throws ResourceNotFoundException, ParseErrorException, Exception {  if (resource.requiresChecking()) {    resource.touch();    if (resource.isSourceModified()) {      if (!resource.getEncoding().equals(encoding)) {        rsvc.error("Declared encoding for template '" + resource.getName() + "' is different on reload.  Old = '"+ resource.getEncoding()+ "'  New = '"+ encoding);        resource.setEncoding(encoding);      }      long howOldItWas=resource.getResourceLoader().getLastModified(resource);      resource.process();      resource.setLastModified(howOldItWas);    }  }}  }
class C{  public final String toString(Instances inst){  StringBuffer text=new StringBuffer();  text.append("Print SplitInfo:\n");  text.append("    Instances:\t\t" + number + " ("+ first+ "-"+ position+ ","+ (position + 1)+ "-"+ last+ ")\n");  text.append("    Maximum Impurity Reduction:\t" + Utils.doubleToString(maxImpurity,1,4) + "\n");  text.append("    Left average:\t" + leftAve + "\n");  text.append("    Right average:\t" + rightAve + "\n");  if (maxImpurity > 0.0) {    text.append("    Splitting function:\t" + inst.attribute(splitAttr).name() + " = "+ splitValue+ "\n");  } else {    text.append("    Splitting function:\tnull\n");  }  return text.toString();}  }
class C{  private void showSoftKeyboard(){  if (inputManager == null) {    inputManager=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);  }  inputManager.toggleSoftInput(InputMethodManager.SHOW_FORCED,0);}  }
class C{  int addVariableName(final org.apache.xml.utils.QName qname){  int pos=m_variableNames.size();  m_variableNames.addElement(qname);  int frameSize=m_variableNames.size() - getGlobalsSize();  if (frameSize > m_maxStackFrameSize)   m_maxStackFrameSize++;  return pos;}  }
class C{  public void show(boolean animate){  show(animate,fadeIn);}  }
class C{  public void testConstructorSignBytesPositive4(){  byte aBytes[]={127,56,100,-2};  int aSign=1;  byte rBytes[]={127,56,100,-2};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  static int calcSize(int origDim,String requestedDim,int defaultDim,boolean negativeAllowed){  if (requestedDim == null) {    return defaultDim;  }  boolean percent=false;  if (requestedDim.endsWith("%")) {    percent=true;    requestedDim=requestedDim.substring(0,requestedDim.length() - 1);  } else   if (requestedDim.endsWith("px")) {    requestedDim=requestedDim.substring(0,requestedDim.length() - 2);  }  int dim=0;  try {    dim=Integer.parseInt(requestedDim);  } catch (  Exception e) {    return origDim;  }  if ((dim < 0) && (!negativeAllowed)) {    return origDim;  }  if (percent) {    return origDim * dim / 100;  } else {    return dim;  }}  }
class C{  public static void main(String[] argv){  LoaderCtrl loaderCtrl=null;  THLManagerCtrl thlManager=null;  try {    String configFile=null;    String service=null;    TungstenProperties tempProperties=new TungstenProperties();    ArgvIterator argvIterator=new ArgvIterator(argv);    String curArg=null;    while (argvIterator.hasNext()) {      curArg=argvIterator.next();      if ("-conf".equals(curArg))       configFile=argvIterator.next(); else       if ("-service".equals(curArg))       service=argvIterator.next(); else       if ("-chunk-size".equals(curArg)) {        tempProperties.setProperty("replicator.extractor.loader.chunkSize",argvIterator.next());      } else       if (curArg.startsWith("-")) {        String key=curArg.substring(1);        String curValue=argvIterator.next();        if ("extractor".equals(key)) {          key="replicator.extractor.loader";        } else         if (key.startsWith("extractor.")) {          key="replicator.extractor.loader." + key.substring(10);        }        tempProperties.setProperty(key,curValue);      } else       fatal("Unrecognized option: " + curArg,null);    }    if (configFile == null) {      if (service == null) {        configFile=lookForConfigFile();        if (configFile == null) {          fatal("You must specify either a config file or a service name (-conf or -service)",null);        }      } else {        ReplicatorRuntimeConf runtimeConf=ReplicatorRuntimeConf.getConfiguration(service);        configFile=runtimeConf.getReplicatorProperties().getAbsolutePath();      }    }    loaderCtrl=new LoaderCtrl(configFile,tempProperties);    loaderCtrl.prepare();    loaderCtrl.loadEvents();  } catch (  Throwable t) {    t.printStackTrace();    fatal("Fatal error: " + t.getMessage(),t);  } finally {    if (loaderCtrl != null) {      loaderCtrl.release();    }    if (thlManager != null) {      thlManager.release();    }  }  succeed();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.TRACE_CONDITION___CONDITION_RHS_1:    return ((InternalEList<?>)getConditionRHS_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void registerUpdateHandler(){  vertx.eventBus().consumer(UPDATE_ADDRESS,null);}  }
class C{  public String toString(){  return image;}  }
class C{  private void initComponents(){}  }
class C{  protected void replacePane(JComponent currentPane,JComponent newPane){  if (currentPane != null) {    deinstallMouseHandlers(currentPane);    frame.remove(currentPane);  }  if (newPane != null) {    frame.add(newPane);    installMouseHandlers(newPane);  }}  }
class C{  private void insertIntoDynamicTable(int index,Header entry){  headerList.add(entry);  int delta=entry.hpackSize;  if (index != -1) {    delta-=dynamicTable[dynamicTableIndex(index)].hpackSize;  }  if (delta > maxDynamicTableByteCount) {    clearDynamicTable();    return;  }  int bytesToRecover=(dynamicTableByteCount + delta) - maxDynamicTableByteCount;  int entriesEvicted=evictToRecoverBytes(bytesToRecover);  if (index == -1) {    if (headerCount + 1 > dynamicTable.length) {      Header[] doubled=new Header[dynamicTable.length * 2];      System.arraycopy(dynamicTable,0,doubled,dynamicTable.length,dynamicTable.length);      nextHeaderIndex=dynamicTable.length - 1;      dynamicTable=doubled;    }    index=nextHeaderIndex--;    dynamicTable[index]=entry;    headerCount++;  } else {    index+=dynamicTableIndex(index) + entriesEvicted;    dynamicTable[index]=entry;  }  dynamicTableByteCount+=delta;}  }
class C{  public TObjectHash(TObjectHashingStrategy<T> strategy){  _hashingStrategy=strategy;}  }
class C{  public void interfaceDeparture(final Seed peer,String ip){  if (peer == null)   return;  if (Network.log.isFine())   Network.log.fine("connect: no contact to a interface from " + peer.get(Seed.PEERTYPE,Seed.PEERTYPE_VIRGIN) + " peer '"+ peer.getName()+ "' at "+ ip);synchronized (this.seedDB) {    if (this.seedDB.hasConnected(ASCII.getBytes(peer.hash))) {      if (peer.countIPs() > 1) {        if (peer.removeIP(ip)) {          this.seedDB.updateConnected(peer);        } else {          this.seedDB.addDisconnected(peer);        }      } else {        peer.put(Seed.DCT,Long.toString(System.currentTimeMillis()));        this.seedDB.addDisconnected(peer);      }    }  }  EventChannel.channels(EventChannel.PEERNEWS).addMessage(new RSSMessage(peer.getName() + " interface not available: " + ip,"",""));}  }
class C{  public static void assertArrayEquals(Object[] expected,Object[] actual){  assertEquals("Arrays have unequal length, therefore can't be equal to " + "each other. Expected: " + Arrays.toString(expected) + " Actual: "+ Arrays.toString(actual),expected.length,actual.length);  for (int idx=0; idx < expected.length; ++idx) {    assertEquals("Index: " + idx + " is unequal in the arrays",expected[idx],actual[idx]);  }}  }
class C{  public void startADB() throws Exception {  String output=cmd.runCommand("adb start-server");  String[] lines=output.split("\n");  if (lines.length == 1)   System.out.println("adb service already started"); else   if (lines[1].equalsIgnoreCase("* daemon started successfully *"))   System.out.println("adb service started"); else   if (lines[0].contains("internal or external command")) {    System.out.println("adb path not set in system varibale");    System.exit(0);  }}  }
class C{  public void removeSuperInterface(InterfaceType type){  if (null == superInterfaces) {    return;  }  superInterfaces.remove(type);}  }
class C{  public void subQuat(Quaternion input){  this.dirty=true;  subQuat(input,this);}  }
class C{  public double intersectDistance(Line line){  if (line == null) {    String message=Logging.getMessage("nullValue.LineIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double ldotv=this.n.dot3(line.getDirection());  if (ldotv == 0) {    double ldots=this.n.dot4(line.getOrigin());    if (ldots == 0)     return Double.POSITIVE_INFINITY; else     return Double.NaN;  }  return -this.n.dot4(line.getOrigin()) / ldotv;}  }
class C{  private static int determineConsecutiveTextCount(CharSequence msg,int startpos){  int len=msg.length();  int idx=startpos;  while (idx < len) {    char ch=msg.charAt(idx);    int numericCount=0;    while (numericCount < 13 && isDigit(ch) && idx < len) {      numericCount++;      idx++;      if (idx < len) {        ch=msg.charAt(idx);      }    }    if (numericCount >= 13) {      return idx - startpos - numericCount;    }    if (numericCount > 0) {      continue;    }    ch=msg.charAt(idx);    if (!isText(ch)) {      break;    }    idx++;  }  return idx - startpos;}  }
class C{  @Override public void onReceivedError(WebView view,int errorCode,String description,String failingUrl){  mReceivedError=true;}  }
class C{  @Override public void insertAll(List<MkAppEntry> entries){  if (entries.isEmpty()) {    return;  }  if (LOG.isDebugging()) {    LOG.debugFine("insert " + entries + "\n");  }  if (!initialized) {    initialize(entries.get(0));  }  ModifiableDBIDs ids=DBIDUtil.newArray(entries.size());  for (  MkAppEntry entry : entries) {    ids.add(entry.getRoutingObjectID());    super.insert(entry,false);  }  Map<DBID,KNNList> knnLists=batchNN(getRoot(),ids,settings.kmax + 1);  adjustApproximatedKNNDistances(getRootEntry(),knnLists);  if (EXTRA_INTEGRITY_CHECKS) {    getRoot().integrityCheck(this,getRootEntry());  }}  }
class C{  @Override public synchronized Collection<T> readAll() throws Exception {  Cursor cursor=db.query(transformer.getTableName(),transformer.getFields(),null,null,null,null,null);  Collection<T> list=getAllCursor(cursor);  return list;}  }
class C{  public void deleteDocumentos(String idDescr){  String qual=new StringBuffer().append(" WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID_DESCR,idDescr)).toString();  deleteVO(qual,TABLE_NAME);}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(suite());}  }
class C{  @Override public int hashCode(){  if (generateHashCode) {    cachedHashCode=0;    if (getEntityName() != null) {      cachedHashCode+=getEntityName().hashCode() >> 1;    }    cachedHashCode+=fields.hashCode() >> 1;    generateHashCode=false;  }  return cachedHashCode;}  }
class C{  public static void openImdbForPerson(Context context,String name){  if (context == null || TextUtils.isEmpty(name)) {    return;  }  Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(String.format(IMDB_APP_PERSON_SEARCH_URI,name)));  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);  if (!Utils.tryStartActivity(context,intent)) {    intent=new Intent(Intent.ACTION_VIEW,Uri.parse(String.format(IMDB_PERSON_SEARCH_URL,name)));    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);    context.startActivity(intent);  }}  }
class C{  @SuppressWarnings("unchecked") public static void main(String argv[]){  try {    String configFile=null;    String fileName=null;    String user=null, password=null, url=null;    ArgvIterator argvIterator=new ArgvIterator(argv);    if (!argvIterator.hasNext()) {      printHelp();      System.exit(0);    }    String curArg=null;    while (argvIterator.hasNext()) {      curArg=argvIterator.next();      if ("-conf".equals(curArg)) {        configFile=argvIterator.next();      } else       if ("-file".equals(curArg)) {        fileName=argvIterator.next();      } else       if ("-user".equals(curArg)) {        user=argvIterator.next();      } else       if ("-password".equals(curArg)) {        if (System.console() == null)         fatal("Console not available. Unable to type password interactively.",null);        System.out.print("Enter password: ");        password=new String(System.console().readPassword());      } else       if ("-url".equals(curArg)) {        url=argvIterator.next();      } else       if (curArg.startsWith("-"))       fatal("Unrecognized option: " + curArg,null);    }    if (configFile != null) {      File file=new File(configFile);      if (!file.exists() || !file.canRead())       fatal("Unable to read config file (" + configFile + ")",null);      TungstenProperties props=new TungstenProperties();      props.load(new FileInputStream(file));      if (user == null)       user=props.getString("user","",true);      if (password == null)       password=props.getString("password","",true);      if (url == null)       url=props.getString("url","",true);    }    if (url == null)     fatal("URL must be provided (either using -url option or in configuration file)",null);    BufferedReader br=null;    boolean readingFromStdIn=false;    if (fileName == null) {      readingFromStdIn=true;      br=new BufferedReader(new InputStreamReader(System.in));    } else {      File file=new File(fileName);      if (!file.exists() || !file.canRead())       fatal("Unable to read sql file (" + fileName + ")",null);      br=new BufferedReader(new FileReader(file));    }    Database database=DatabaseFactory.createDatabase(url,user,password);    try {      database.connect();    } catch (    SQLException e) {      System.out.println(e.getMessage());      e.printStackTrace();      System.exit(e.getErrorCode());    }    String sql=null;    SQLException sqlEx;    JSONArray jsonArr=new JSONArray();    while ((sql=br.readLine()) != null) {      sqlEx=null;      sql=sql.trim();      if (readingFromStdIn && sql.length() == 0)       break; else       if (sql.startsWith("#") || sql.length() == 0)       continue;      LinkedHashMap<String,Object> jsonObj=new LinkedHashMap<String,Object>();      jsonArr.add(jsonObj);      Statement stmt=null;      int rc=0;      try {        stmt=database.createStatement();        boolean isRS=false;        jsonObj.put("statement",sql);        try {          isRS=stmt.execute(sql);          rc=0;        } catch (        SQLException e) {          rc=e.getErrorCode();          sqlEx=e;        } finally {          jsonObj.put("rc",rc);        }        if (rc == 0)         jsonObj.put("results",logResults(stmt,isRS)); else         jsonObj.put("results",new JSONArray());        jsonObj.put("error",logError(sqlEx));      } catch (      Exception e) {        e.printStackTrace();      } finally {        if (stmt != null)         stmt.close();      }    }    DsQueryCtrl.println(jsonArr.toJSONString());  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public byte[] generateSeed(int numBytes){  return secureRandomSpi.engineGenerateSeed(numBytes);}  }
class C{  private void $$$setupUI$$$(){  createUIComponents();  contentPanel=new JPanel();  contentPanel.setLayout(new GridLayoutManager(7,3,new Insets(0,0,0,0),-1,-1));  contentPanel.add(userAccountPanel,new GridConstraints(0,0,1,3,GridConstraints.ANCHOR_EAST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  final JLabel label1=new JLabel();  this.$$$loadLabelText$$$(label1,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("ImportForm.SelectTeamProject"));  contentPanel.add(label1,new GridConstraints(1,0,1,3,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  teamProjectFilter=new JTextField();  contentPanel.add(teamProjectFilter,new GridConstraints(2,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,new Dimension(150,-1),null,0,false));  teamProjectScrollPane=new JScrollPane();  contentPanel.add(teamProjectScrollPane,new GridConstraints(3,0,1,3,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,null,null,null,0,false));  teamProjectTable=new JTable();  teamProjectTable.setFillsViewportHeight(true);  teamProjectTable.setShowHorizontalLines(false);  teamProjectTable.setShowVerticalLines(false);  teamProjectScrollPane.setViewportView(teamProjectTable);  final JLabel label2=new JLabel();  this.$$$loadLabelText$$$(label2,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("ImportForm.NewRepositoryName"));  contentPanel.add(label2,new GridConstraints(5,0,1,3,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  repositoryName=new JTextField();  contentPanel.add(repositoryName,new GridConstraints(6,0,1,3,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,new Dimension(150,-1),null,0,false));  refreshButton=new JButton();  refreshButton.setIcon(new ImageIcon(getClass().getResource("/actions/refresh.png")));  refreshButton.setText("");  refreshButton.setToolTipText(ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("ImportDialog.RefreshButton.ToolTip"));  contentPanel.add(refreshButton,new GridConstraints(2,2,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  busySpinner=new BusySpinnerPanel();  contentPanel.add(busySpinner,new GridConstraints(2,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  helpPanel=new HelpPanel();  helpPanel.setHelpText(ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("VsoLookupHelp.helpText"));  helpPanel.setPopupText(ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("VsoLookupHelp.Instructions"));  contentPanel.add(helpPanel,new GridConstraints(4,0,1,3,GridConstraints.ANCHOR_EAST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));}  }
class C{  public static double angle(S2Point a,S2Point b,S2Point c){  return S2Point.crossProd(a,b).angle(S2Point.crossProd(c,b));}  }
class C{  public void shutdown(ShutdownModeAmp mode){  Thread thread=Thread.currentThread();  ClassLoader oldLoader=thread.getContextClassLoader();  try {    thread.setContextClassLoader(classLoader());    if (!_lifecycle.toStopping()) {      return;    }    try {      shutdownImpl(mode);    } catch (    Throwable e) {      log.log(Level.WARNING,e.toString(),e);    }    _lifecycle.toDestroy();  }  finally {    thread.setContextClassLoader(oldLoader);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public ReturnObjectType createReturnObjectType(){  ReturnObjectTypeImpl returnObjectType=new ReturnObjectTypeImpl();  return returnObjectType;}  }
class C{  @Override public boolean isLive(ObjectReference object){  return !RCBase.isRCObject(object) || RCHeader.isMarked(object);}  }
class C{  public String searchRouting(){  return searchRouting;}  }
class C{  public GlyphJustificationInfo(float weight,boolean growAbsorb,int growPriority,float growLeftLimit,float growRightLimit,boolean shrinkAbsorb,int shrinkPriority,float shrinkLeftLimit,float shrinkRightLimit){  if (weight < 0) {    throw new IllegalArgumentException("weight is negative");  }  if (!priorityIsValid(growPriority)) {    throw new IllegalArgumentException("Invalid grow priority");  }  if (growLeftLimit < 0) {    throw new IllegalArgumentException("growLeftLimit is negative");  }  if (growRightLimit < 0) {    throw new IllegalArgumentException("growRightLimit is negative");  }  if (!priorityIsValid(shrinkPriority)) {    throw new IllegalArgumentException("Invalid shrink priority");  }  if (shrinkLeftLimit < 0) {    throw new IllegalArgumentException("shrinkLeftLimit is negative");  }  if (shrinkRightLimit < 0) {    throw new IllegalArgumentException("shrinkRightLimit is negative");  }  this.weight=weight;  this.growAbsorb=growAbsorb;  this.growPriority=growPriority;  this.growLeftLimit=growLeftLimit;  this.growRightLimit=growRightLimit;  this.shrinkAbsorb=shrinkAbsorb;  this.shrinkPriority=shrinkPriority;  this.shrinkLeftLimit=shrinkLeftLimit;  this.shrinkRightLimit=shrinkRightLimit;}  }
class C{  public boolean argsAreWords(int index){  return ((getFlag(index) & ARG_1_AND_2_ARE_WORDS) != 0);}  }
class C{  public static void drawBuffer(DrawContext dc,int mode,int count,DoubleBuffer verts){  if (dc == null) {    String message=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (verts == null) {    String message=Logging.getMessage("nullValue.BufferIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  GL2 gl=dc.getGL().getGL2();  gl.glPushClientAttrib(GL2.GL_CLIENT_VERTEX_ARRAY_BIT);  gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);  gl.glVertexPointer(2,GL2.GL_DOUBLE,0,verts);  gl.glDrawArrays(mode,0,count);  gl.glPopClientAttrib();}  }
class C{  public DepartmentExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public static Criteria select(Class<?> clazz){  return new Criteria(clazz,new SelectBuilder(clazz));}  }
class C{  public GeneralizedSemPmListEditor(GeneralizedSemPm semPm,GeneralizedSemPmParamsEditor paramsEditor,Map<Object,EditorWindow> launchedEditors){  this.semPm=semPm;  this.paramsEditor=paramsEditor;  this.launchedEditors=launchedEditors;  setLayout(new BorderLayout());  JScrollPane scroll=new JScrollPane(equationPane());  scroll.setPreferredSize(new Dimension(450,450));  add(scroll,BorderLayout.CENTER);}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public N4SetterDeclaration createN4SetterDeclaration(){  N4SetterDeclarationImpl n4SetterDeclaration=new N4SetterDeclarationImpl();  return n4SetterDeclaration;}  }
class C{  public PhoneNo(int i,int j,int k,int m){  this.phoneNo1=i;  this.phoneNo2=j;  this.phoneNo3=k;  this.mobile=m;}  }
class C{  @Override protected void configure(){  bind(ConfigurationProvider.class).toInstance(configProvider);  bindConfigProperties();}  }
class C{  public static void cancel(Context context,String tag,int id){  NotificationManagerCompat nm=NotificationManagerCompat.from(context);  nm.cancel(tag,id);}  }
class C{  @Override public boolean remove(Object o){  if (o == null || size == 0) {    return false;  }  for (int i=0; i < size; i++) {    if (o.equals(elements[i])) {      removeAt(i);      return true;    }  }  return false;}  }
class C{  public int lengthKeyInfoReference(){  return this.length(Constants.SignatureSpec11NS,Constants._TAG_KEYINFOREFERENCE);}  }
class C{  public MultiplexingDiscovery(NetworkParameters params,List<PeerDiscovery> seeds){  checkArgument(!seeds.isEmpty());  this.netParams=params;  this.seeds=seeds;}  }
class C{  public ShadowRenderer(final int size,final float opacity,final Color color){  changeSupport=new PropertyChangeSupport(this);  setSize(size);  setOpacity(opacity);  setColor(color);}  }
class C{  private void sendMessage(ConsumerRecord<String,String> record){  try {    bus.send(busAddress,KafkaEvent.createEventForBus(record));  } catch (  Exception ex) {    String error=String.format("Error sending messages on event bus - record: %s",record.toString());    logger.error(error,ex);    bus.send(ConfigConstants.CONSUMER_ERROR_TOPIC,getErrorString(error,ex.getMessage()));  }}  }
class C{  public void initializePackageContents(){  if (isInitialized)   return;  isInitialized=true;  setName(eNAME);  setNsPrefix(eNS_PREFIX);  setNsURI(eNS_URI);  BasePackage theBasePackage=(BasePackage)EPackage.Registry.INSTANCE.getEPackage(BasePackage.eNS_URI);  TypesPackage theTypesPackage=(TypesPackage)EPackage.Registry.INSTANCE.getEPackage(TypesPackage.eNS_URI);  pseudostateEClass.getESuperTypes().add(this.getVertex());  vertexEClass.getESuperTypes().add(theBasePackage.getNamedElement());  regionEClass.getESuperTypes().add(theBasePackage.getNamedElement());  transitionEClass.getESuperTypes().add(this.getSpecificationElement());  transitionEClass.getESuperTypes().add(this.getReaction());  transitionEClass.getESuperTypes().add(theBasePackage.getDocumentedElement());  finalStateEClass.getESuperTypes().add(this.getRegularState());  choiceEClass.getESuperTypes().add(this.getPseudostate());  statechartEClass.getESuperTypes().add(this.getSpecificationElement());  statechartEClass.getESuperTypes().add(this.getReactiveElement());  statechartEClass.getESuperTypes().add(this.getScopedElement());  statechartEClass.getESuperTypes().add(this.getCompositeElement());  statechartEClass.getESuperTypes().add(theBasePackage.getNamedElement());  statechartEClass.getESuperTypes().add(theBasePackage.getDocumentedElement());  statechartEClass.getESuperTypes().add(theBasePackage.getDomainElement());  entryEClass.getESuperTypes().add(this.getPseudostate());  exitEClass.getESuperTypes().add(this.getPseudostate());  synchronizationEClass.getESuperTypes().add(this.getPseudostate());  stateEClass.getESuperTypes().add(this.getSpecificationElement());  stateEClass.getESuperTypes().add(this.getReactiveElement());  stateEClass.getESuperTypes().add(this.getScopedElement());  stateEClass.getESuperTypes().add(this.getRegularState());  stateEClass.getESuperTypes().add(this.getCompositeElement());  stateEClass.getESuperTypes().add(theBasePackage.getDocumentedElement());  regularStateEClass.getESuperTypes().add(this.getVertex());  importDeclarationEClass.getESuperTypes().add(theTypesPackage.getDeclaration());  initEClass(pseudostateEClass,Pseudostate.class,"Pseudostate",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(vertexEClass,Vertex.class,"Vertex",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getVertex_ParentRegion(),this.getRegion(),this.getRegion_Vertices(),"parentRegion",null,1,1,Vertex.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,!IS_ORDERED);  initEReference(getVertex_IncomingTransitions(),this.getTransition(),this.getTransition_Target(),"incomingTransitions",null,0,-1,Vertex.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,!IS_ORDERED);  initEReference(getVertex_OutgoingTransitions(),this.getTransition(),this.getTransition_Source(),"outgoingTransitions",null,0,-1,Vertex.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,!IS_ORDERED);  initEClass(regionEClass,Region.class,"Region",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getRegion_Vertices(),this.getVertex(),this.getVertex_ParentRegion(),"vertices",null,0,-1,Region.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,!IS_ORDERED);  initEReference(getRegion_Composite(),this.getCompositeElement(),this.getCompositeElement_Regions(),"composite",null,1,1,Region.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(transitionEClass,Transition.class,"Transition",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTransition_Target(),this.getVertex(),this.getVertex_IncomingTransitions(),"target",null,1,1,Transition.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,!IS_ORDERED);  initEReference(getTransition_Source(),this.getVertex(),this.getVertex_OutgoingTransitions(),"source",null,1,1,Transition.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,!IS_ORDERED);  initEClass(finalStateEClass,FinalState.class,"FinalState",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(choiceEClass,Choice.class,"Choice",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getChoice_Kind(),this.getChoiceKind(),"kind",null,0,1,Choice.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(statechartEClass,Statechart.class,"Statechart",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(entryEClass,Entry.class,"Entry",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getEntry_Kind(),this.getEntryKind(),"kind",null,0,1,Entry.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(exitEClass,Exit.class,"Exit",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(reactiveElementEClass,ReactiveElement.class,"ReactiveElement",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getReactiveElement_LocalReactions(),this.getReaction(),null,"localReactions",null,0,-1,ReactiveElement.class,IS_TRANSIENT,IS_VOLATILE,!IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,IS_DERIVED,IS_ORDERED);  initEClass(reactionEClass,Reaction.class,"Reaction",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getReaction_Trigger(),this.getTrigger(),null,"trigger",null,0,1,Reaction.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getReaction_Effect(),this.getEffect(),null,"effect",null,0,1,Reaction.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getReaction_Properties(),this.getReactionProperty(),null,"properties",null,0,-1,Reaction.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(triggerEClass,Trigger.class,"Trigger",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(effectEClass,Effect.class,"Effect",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(reactionPropertyEClass,ReactionProperty.class,"ReactionProperty",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(specificationElementEClass,SpecificationElement.class,"SpecificationElement",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getSpecificationElement_Specification(),ecorePackage.getEString(),"specification",null,0,1,SpecificationElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(scopeEClass,Scope.class,"Scope",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getScope_Declarations(),theTypesPackage.getDeclaration(),null,"declarations",null,0,-1,Scope.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getScope_Events(),theTypesPackage.getEvent(),null,"events",null,0,-1,Scope.class,IS_TRANSIENT,IS_VOLATILE,!IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,IS_DERIVED,IS_ORDERED);  initEReference(getScope_Variables(),theTypesPackage.getProperty(),null,"variables",null,0,-1,Scope.class,IS_TRANSIENT,IS_VOLATILE,!IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,!IS_UNIQUE,IS_DERIVED,IS_ORDERED);  initEReference(getScope_Reactions(),this.getReaction(),null,"reactions",null,0,-1,Scope.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(scopedElementEClass,ScopedElement.class,"ScopedElement",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getScopedElement_Scopes(),this.getScope(),null,"scopes",null,0,-1,ScopedElement.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getScopedElement_Namespace(),ecorePackage.getEString(),"namespace",null,0,1,ScopedElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(synchronizationEClass,Synchronization.class,"Synchronization",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(stateEClass,State.class,"State",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getState_Orthogonal(),ecorePackage.getEBoolean(),"orthogonal",null,0,1,State.class,IS_TRANSIENT,IS_VOLATILE,!IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,IS_DERIVED,IS_ORDERED);  initEAttribute(getState_Simple(),ecorePackage.getEBoolean(),"simple",null,0,1,State.class,IS_TRANSIENT,IS_VOLATILE,!IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,IS_DERIVED,IS_ORDERED);  initEAttribute(getState_Composite(),ecorePackage.getEBoolean(),"composite",null,0,1,State.class,IS_TRANSIENT,IS_VOLATILE,!IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,IS_DERIVED,IS_ORDERED);  initEAttribute(getState_Leaf(),ecorePackage.getEBoolean(),"leaf",null,0,1,State.class,IS_TRANSIENT,IS_VOLATILE,!IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,IS_DERIVED,IS_ORDERED);  initEClass(regularStateEClass,RegularState.class,"RegularState",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(compositeElementEClass,CompositeElement.class,"CompositeElement",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getCompositeElement_Regions(),this.getRegion(),this.getRegion_Composite(),"regions",null,0,-1,CompositeElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(importDeclarationEClass,ImportDeclaration.class,"ImportDeclaration",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getImportDeclaration_Declaration(),theTypesPackage.getDeclaration(),null,"declaration",null,0,1,ImportDeclaration.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEEnum(entryKindEEnum,EntryKind.class,"EntryKind");  addEEnumLiteral(entryKindEEnum,EntryKind.INITIAL);  addEEnumLiteral(entryKindEEnum,EntryKind.SHALLOW_HISTORY);  addEEnumLiteral(entryKindEEnum,EntryKind.DEEP_HISTORY);  initEEnum(choiceKindEEnum,ChoiceKind.class,"ChoiceKind");  addEEnumLiteral(choiceKindEEnum,ChoiceKind.DYNAMIC);  addEEnumLiteral(choiceKindEEnum,ChoiceKind.STATIC);  createResource(eNS_URI);}  }
class C{  private void sendReplicasToPrimary(NodeProcess primary,NodeProcess... replicas) throws IOException {  try (Connection c=new Connection(primary.tcpPort)){    c.out.writeByte(SimplePrimaryNode.CMD_SET_REPLICAS);    c.out.writeVInt(replicas.length);    for (int id=0; id < replicas.length; id++) {      NodeProcess replica=replicas[id];      c.out.writeVInt(replica.id);      c.out.writeVInt(replica.tcpPort);    }    c.flush();    c.in.readByte();  } }  }
class C{  public void unlockRead(long stamp){  long s, m;  WNode h;  for (; ; ) {    if (((s=state) & SBITS) != (stamp & SBITS) || (stamp & ABITS) == 0L || (m=s & ABITS) == 0L || m == WBIT)     throw new IllegalMonitorStateException();    if (m < RFULL) {      if (U.compareAndSwapLong(this,STATE,s,s - RUNIT)) {        if (m == RUNIT && (h=whead) != null && h.status != 0)         release(h);        break;      }    } else     if (tryDecReaderOverflow(s) != 0L)     break;  }}  }
class C{  public static long hash64(final byte[] data,int length,int seed){  final long m=0xc6a4a7935bd1e995L;  final int r=47;  long h=(seed & 0xffffffffl) ^ (length * m);  int length8=length / 8;  for (int i=0; i < length8; i++) {    final int i8=i * 8;    long k=((long)data[i8 + 0] & 0xff) + (((long)data[i8 + 1] & 0xff) << 8) + (((long)data[i8 + 2] & 0xff) << 16)+ (((long)data[i8 + 3] & 0xff) << 24)+ (((long)data[i8 + 4] & 0xff) << 32)+ (((long)data[i8 + 5] & 0xff) << 40)+ (((long)data[i8 + 6] & 0xff) << 48)+ (((long)data[i8 + 7] & 0xff) << 56);    k*=m;    k^=k >>> r;    k*=m;    h^=k;    h*=m;  }switch (length % 8) {case 7:    h^=(long)(data[(length & ~7) + 6] & 0xff) << 48;case 6:  h^=(long)(data[(length & ~7) + 5] & 0xff) << 40;case 5:h^=(long)(data[(length & ~7) + 4] & 0xff) << 32;case 4:h^=(long)(data[(length & ~7) + 3] & 0xff) << 24;case 3:h^=(long)(data[(length & ~7) + 2] & 0xff) << 16;case 2:h^=(long)(data[(length & ~7) + 1] & 0xff) << 8;case 1:h^=(long)(data[length & ~7] & 0xff);h*=m;};h^=h >>> r;h*=m;h^=h >>> r;return h;}  }
class C{  public SearchBuilder<T> byAll(Map<String,Object> parameters){  this.parameters.putAll(parameters);  return this;}  }
class C{  void ensurePrestart(){  int wc=workerCountOf(ctl.get());  if (wc < corePoolSize)   addWorker(null,true); else   if (wc == 0)   addWorker(null,false);}  }
class C{  private void superSetFocus(boolean focused){  super.setFocus(focused);}  }
class C{  public void log(Exception exception,String message){  log(message,exception);}  }
class C{  public DSAPublicKeyImpl(DSAPublicKeySpec keySpec){  super("DSA");  SubjectPublicKeyInfo spki;  p=keySpec.getP();  q=keySpec.getQ();  g=keySpec.getG();  ThreeIntegerSequence threeInts=new ThreeIntegerSequence(p.toByteArray(),q.toByteArray(),g.toByteArray());  AlgorithmIdentifier ai=new AlgorithmIdentifier(AlgNameMapper.map2OID("DSA"),threeInts.getEncoded());  y=keySpec.getY();  spki=new SubjectPublicKeyInfo(ai,ASN1Integer.getInstance().encode(y.toByteArray()));  setEncoding(spki.getEncoded());  params=(DSAParams)(new DSAParameterSpec(p,q,g));}  }
class C{  public void savePaymentChannelToFundSourceMappings(final JsonCommand command,final JsonElement element,final Long productId,final Map<String,Object> changes,final PortfolioProductType portfolioProductType){  final JsonArray paymentChannelMappingArray=this.fromApiJsonHelper.extractJsonArrayNamed(LOAN_PRODUCT_ACCOUNTING_PARAMS.PAYMENT_CHANNEL_FUND_SOURCE_MAPPING.getValue(),element);  if (paymentChannelMappingArray != null) {    if (changes != null) {      changes.put(LOAN_PRODUCT_ACCOUNTING_PARAMS.PAYMENT_CHANNEL_FUND_SOURCE_MAPPING.getValue(),command.jsonFragment(LOAN_PRODUCT_ACCOUNTING_PARAMS.PAYMENT_CHANNEL_FUND_SOURCE_MAPPING.getValue()));    }    for (int i=0; i < paymentChannelMappingArray.size(); i++) {      final JsonObject jsonObject=paymentChannelMappingArray.get(i).getAsJsonObject();      final Long paymentTypeId=jsonObject.get(LOAN_PRODUCT_ACCOUNTING_PARAMS.PAYMENT_TYPE.getValue()).getAsLong();      final Long paymentSpecificFundAccountId=jsonObject.get(LOAN_PRODUCT_ACCOUNTING_PARAMS.FUND_SOURCE.getValue()).getAsLong();      savePaymentChannelToFundSourceMapping(productId,paymentTypeId,paymentSpecificFundAccountId,portfolioProductType);    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public InlineQueryResultGif.InlineQueryResultGifBuilder replyMarkup(InlineReplyMarkup replyMarkup){  this.reply_markup=replyMarkup;  return this;}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public boolean removeAttribute(String name){  if (name == null) {    return false;  }  return (attributes.remove(name) != null);}  }
class C{  protected void onUpdateComplete(int token,Object cookie,int result){}  }
class C{  public static void unRegisterClientApp(Context context,APIResultCallBack apiCallBack) throws AndroidAgentException {  String serverIP=Constants.DEFAULT_HOST;  String prefIP=Preference.getString(context.getApplicationContext(),Constants.PreferenceFlag.IP);  if (prefIP != null) {    serverIP=prefIP;  }  if (serverIP != null && !serverIP.isEmpty()) {    String applicationName=Preference.getString(context,Constants.CLIENT_NAME);    String consumerKey=Preference.getString(context,Constants.CLIENT_ID);    String userId=Preference.getString(context,Constants.USERNAME);    if (applicationName != null && !applicationName.isEmpty() && consumerKey != null && !consumerKey.isEmpty() && userId != null && !userId.isEmpty()) {      UnregisterProfile profile=new UnregisterProfile();      profile.setApplicationName(applicationName);      profile.setConsumerKey(consumerKey);      profile.setUserId(userId);      ServerConfig utils=new ServerConfig();      utils.setServerIP(serverIP);      DynamicClientManager dynamicClientManager=new DynamicClientManager();      boolean isUnregistered=dynamicClientManager.unregisterClient(profile,utils,context,apiCallBack);      if (!isUnregistered) {        Log.e(TAG,"Error occurred while removing the OAuth client app");      }    } else {      Log.e(TAG,"Client credential is not available");    }  } else {    Log.e(TAG,"There is no valid IP to contact the server");  }}  }
class C{  public RecyclerView.ViewHolder obtain(String type){  if (CACHE.containsKey(type)) {    if (CACHE.get(type).size() > 0) {      return CACHE.get(type).pop();    }  }  return null;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public static void deletedelete(final File path){  if (path == null || !path.exists()) {    return;  }  if (path.isDirectory()) {    final String[] list=path.list();    if (list != null) {      for (      final String s : list) {        deletedelete(new File(path,s));      }    }  }  if (path.exists())   path.delete();  if (path.exists()) {    path.deleteOnExit();    String p="";    try {      p=path.getCanonicalPath();    } catch (    final IOException e1) {      ConcurrentLog.logException(e1);    }    if (System.getProperties().getProperty("os.name","").toLowerCase().startsWith("windows")) {      try {        final String command="cmd /C del /F /Q \"" + p + "\"";        final Process r=Runtime.getRuntime().exec(command);        if (r == null) {          ConcurrentLog.severe("FileUtils","cannot execute command: " + command);        } else {          final byte[] response=read(r.getInputStream());          ConcurrentLog.info("FileUtils","deletedelete: " + UTF8.String(response));        }      } catch (      final IOException e) {        ConcurrentLog.logException(e);      }    }    if (path.exists()) {      ConcurrentLog.severe("FileUtils","cannot delete file " + p);    }  }}  }
class C{  public void showAllLetter(boolean show){  mShowAllLetter=show;}  }
class C{  private void dynInit(){  setLFSelection();  jPanelGradient.setTabLevel(1);  jPanelTexture.setTabLevel(2);  jPanelLines.setTabLevel(1);  jComboBoxFlat.addActionListener(this);  jComboBoxGradient.addActionListener(this);  jComboBoxTexture.addActionListener(this);  jComboBoxLines.addActionListener(this);  jButton1.addActionListener(this);  jButtonFlat.addActionListener(this);  jButtonGardient.addActionListener(this);  jButtonTexture.addActionListener(this);  jButtonLines.addActionListener(this);}  }
class C{  public static @Unsigned int toUnsignedInt(@Unsigned byte b){  return ((int)b) & 0xff;}  }
class C{  public void addScriptChangeEventListener(Executor executor,ScriptsChangeEventListener listener){  scriptChangeListeners.add(new ListenerRegistration<ScriptsChangeEventListener>(listener,executor));}  }
class C{  public final byte[] initSecContext(InputStream is,int mechTokenSize) throws GSSException {  byte[] retVal=null;  NegTokenInit initToken=null;  byte[] mechToken=null;  int errorCode=GSSException.FAILURE;  if (DEBUG) {    System.out.println("Entered SpNego.initSecContext with " + "state=" + printState(state));  }  if (!isInitiator()) {    throw new GSSException(GSSException.FAILURE,-1,"initSecContext on an acceptor GSSContext");  }  try {    if (state == STATE_NEW) {      state=STATE_IN_PROCESS;      errorCode=GSSException.NO_CRED;      Oid[] mechList=getAvailableMechs();      DER_mechTypes=getEncodedMechs(mechList);      internal_mech=mechList[0];      mechToken=GSS_initSecContext(null);      errorCode=GSSException.DEFECTIVE_TOKEN;      initToken=new NegTokenInit(DER_mechTypes,getContextFlags(),mechToken,null);      if (DEBUG) {        System.out.println("SpNegoContext.initSecContext: " + "sending token of type = " + SpNegoToken.getTokenName(initToken.getType()));      }      retVal=initToken.getEncoded();    } else     if (state == STATE_IN_PROCESS) {      errorCode=GSSException.FAILURE;      if (is == null) {        throw new GSSException(errorCode,-1,"No token received from peer!");      }      errorCode=GSSException.DEFECTIVE_TOKEN;      byte[] server_token=new byte[is.available()];      SpNegoToken.readFully(is,server_token);      if (DEBUG) {        System.out.println("SpNegoContext.initSecContext: " + "process received token = " + SpNegoToken.getHexBytes(server_token));      }      NegTokenTarg targToken=new NegTokenTarg(server_token);      if (DEBUG) {        System.out.println("SpNegoContext.initSecContext: " + "received token of type = " + SpNegoToken.getTokenName(targToken.getType()));      }      internal_mech=targToken.getSupportedMech();      if (internal_mech == null) {        throw new GSSException(errorCode,-1,"supported mechanism from server is null");      }      SpNegoToken.NegoResult negoResult=null;      int result=targToken.getNegotiatedResult();switch (result) {case 0:        negoResult=SpNegoToken.NegoResult.ACCEPT_COMPLETE;      state=STATE_DONE;    break;case 1:  negoResult=SpNegoToken.NegoResult.ACCEPT_INCOMPLETE;state=STATE_IN_PROCESS;break;case 2:negoResult=SpNegoToken.NegoResult.REJECT;state=STATE_DELETED;break;default :state=STATE_DONE;break;}errorCode=GSSException.BAD_MECH;if (negoResult == SpNegoToken.NegoResult.REJECT) {throw new GSSException(errorCode,-1,internal_mech.toString());}errorCode=GSSException.DEFECTIVE_TOKEN;if ((negoResult == SpNegoToken.NegoResult.ACCEPT_COMPLETE) || (negoResult == SpNegoToken.NegoResult.ACCEPT_INCOMPLETE)) {byte[] accept_token=targToken.getResponseToken();if (accept_token == null) {if (!isMechContextEstablished()) {throw new GSSException(errorCode,-1,"mechanism token from server is null");}} else {mechToken=GSS_initSecContext(accept_token);}if (!GSSUtil.useMSInterop()) {byte[] micToken=targToken.getMechListMIC();if (!verifyMechListMIC(DER_mechTypes,micToken)) {throw new GSSException(errorCode,-1,"verification of MIC on MechList Failed!");}}if (isMechContextEstablished()) {state=STATE_DONE;retVal=mechToken;if (DEBUG) {System.out.println("SPNEGO Negotiated Mechanism = " + internal_mech + " "+ GSSUtil.getMechStr(internal_mech));}} else {initToken=new NegTokenInit(null,null,mechToken,null);if (DEBUG) {System.out.println("SpNegoContext.initSecContext:" + " continue sending token of type = " + SpNegoToken.getTokenName(initToken.getType()));}retVal=initToken.getEncoded();}}} else {if (DEBUG) {System.out.println(state);}}if (DEBUG) {if (retVal != null) {System.out.println("SNegoContext.initSecContext: " + "sending token = " + SpNegoToken.getHexBytes(retVal));}}} catch (GSSException e) {GSSException gssException=new GSSException(errorCode,-1,e.getMessage());gssException.initCause(e);throw gssException;}catch (IOException e) {GSSException gssException=new GSSException(GSSException.FAILURE,-1,e.getMessage());gssException.initCause(e);throw gssException;}return retVal;}  }
class C{  protected static void copyURLParamToRequestAttribute(HttpServletRequest httpRequest,String param,String url){  String value=getParamFromURL(param,url);  if (value != null) {    httpRequest.setAttribute(param,value);  }}  }
class C{  public void removeSection(String tag){  this.sections.remove(tag);}  }
class C{  public static List<String> sanitizeTopicFilter(String topicFilter){  if (StringUtils.isEmpty(topicFilter))   throw new IllegalArgumentException("Empty topic filer");  if (!topicFilter.contains("+") && !topicFilter.contains("#"))   throw new IllegalArgumentException("Topic filter does not contain wildcard");  List<String> levels=new ArrayList<>();  if (topicFilter.startsWith("/"))   topicFilter=EMPTY + topicFilter;  if (topicFilter.endsWith("/"))   topicFilter=topicFilter + EMPTY;  String[] tokens=StringUtils.splitByWholeSeparatorPreserveAllTokens(topicFilter,"/");  for (int i=0; i < tokens.length; i++) {    if (tokens[i].contains("+") && !tokens[i].equals("+"))     throw new IllegalArgumentException("Illegal topic filter: " + topicFilter);    if (tokens[i].contains("#") && !tokens[i].equals("#"))     throw new IllegalArgumentException("Illegal topic filter: " + topicFilter);    if (tokens[i].equals("#") && !(i == tokens.length - 1 || (i == tokens.length - 2 && END.equals(tokens[i + 1]))))     throw new IllegalArgumentException("Illegal topic filter: " + topicFilter);    levels.add(StringUtils.isNotEmpty(tokens[i]) ? tokens[i] : EMPTY);  }  if (!topicFilter.endsWith(END))   levels.add(END);  return levels;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void UnionExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  boolean continueOrLoop=true;  boolean foundUnion=false;  do {    PathExpr();    if (tokenIs('|')) {      if (false == foundUnion) {        foundUnion=true;        insertOp(opPos,2,OpCodes.OP_UNION);      }      nextToken();    } else {      break;    }  } while (continueOrLoop);  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  public IntArrayList(int[] data){  array=new int[(int)(data.length * 1.1) + 1];  size=data.length;  System.arraycopy(data,0,array,0,size);}  }
class C{  public ExistsRequest source(byte[] querySource,int offset,int length){  return source(new BytesArray(querySource,offset,length));}  }
class C{  public static int lastIndexOfAny(String str,String[] searchStrs){  if ((str == null) || (searchStrs == null)) {    return -1;  }  int sz=searchStrs.length;  int ret=-1;  int tmp=0;  for (int i=0; i < sz; i++) {    tmp=str.lastIndexOf(searchStrs[i]);    if (tmp > ret) {      ret=tmp;    }  }  return ret;}  }
class C{  public static Angle limitHeading(Angle angle,ViewPropertyLimits viewLimits){  if (angle == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (viewLimits == null) {    String message=Logging.getMessage("nullValue.ViewLimitsIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Angle[] limits=viewLimits.getHeadingLimits();  Angle newAngle=angle;  if (angle.compareTo(limits[0]) < 0) {    newAngle=limits[0];  } else   if (angle.compareTo(limits[1]) > 0) {    newAngle=limits[1];  }  return newAngle;}  }
class C{  public static int compileShader(Class<?> context,GL2 gl,int type,String name) throws ShaderCompilationException {  int prog=-1;  try (InputStream in=context.getResourceAsStream(name)){    int[] error=new int[1];    String shaderdata=FileUtil.slurp(in);    prog=gl.glCreateShader(type);    gl.glShaderSource(prog,1,new String[]{shaderdata},null,0);    gl.glCompileShader(prog);    gl.glGetObjectParameterivARB(prog,GL2.GL_OBJECT_INFO_LOG_LENGTH_ARB,error,0);    if (error[0] > 1) {      byte[] info=new byte[error[0]];      gl.glGetInfoLogARB(prog,info.length,error,0,info,0);      String out=new String(info);      gl.glDeleteShader(prog);      throw new ShaderCompilationException("Shader compilation error in '" + name + "': "+ out);    }    gl.glGetShaderiv(prog,GL2.GL_COMPILE_STATUS,error,0);    if (error[0] > 1) {      throw new ShaderCompilationException("Shader compilation of '" + name + "' failed.");    }  } catch (  IOException e) {    throw new ShaderCompilationException("IO error loading shader: " + name,e);  }  return prog;}  }
class C{  private void verifyConnectivity(VPlexApiClient client,StorageProvider mgmntServer) throws VPlexApiException {  try {    client.verifyConnectivity();    mgmntServer.setConnectionStatus(ConnectionStatus.CONNECTED.name());  } catch (  Exception e) {    mgmntServer.setConnectionStatus(ConnectionStatus.NOTCONNECTED.name());    throw e;  } finally {    try {      _dbClient.persistObject(mgmntServer);    } catch (    Exception e) {      s_logger.error("Error persisting connection status for management server {}",mgmntServer.getId(),e);    }  }}  }
class C{  @OnWebSocketClose public void onClose(int statusCode,String reason){}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static void normalise(double[] array){  double mean=MatrixUtils.mean(array);  double stdDev=MatrixUtils.stdDev(array,mean);  if (Double.isInfinite(1.0 / stdDev)) {    for (int t=0; t < array.length; t++) {      array[t]=(array[t] - mean);    }  } else {    for (int t=0; t < array.length; t++) {      array[t]=(array[t] - mean) / stdDev;    }  }}  }
class C{  protected boolean hasCustomize(){  return false;}  }
class C{  public static double[][] selectRows(double matrix[][],int fromRow,int rows){  double[][] data=new double[rows][];  for (int rIndex=0; rIndex < rows; rIndex++) {    data[rIndex]=matrix[rIndex + fromRow];  }  return data;}  }
class C{  protected void pathWasCollapsed(TreePath path){  if (tree != null) {    tree.fireTreeCollapsed(path);  }}  }
class C{  @Override public void send(HandshakeIODataStream out){  if (signedHash.length != 0) {    out.writeUint16(signedHash.length);    out.write(signedHash);  }}  }
class C{  private void sendRefreshDBConnToUI(){  if (mClients != null && mClients.size() > 0) {    for (int i=mClients.size() - 1; i >= 0; i--) {      try {        Message mSend=null;        mSend=Message.obtain(null,MedtronicConstants.MSG_REFRESH_DB_CONNECTION);        mClients.get(i).send(mSend);      } catch (      RemoteException e) {        mClients.remove(i);      }    }  }}  }
class C{  public void close() throws IOException {  closed=true;  if (sink != null) {    sink.receivedLast();  }}  }
class C{  public final int _exptype2(int identity){  if (identity < m_blocksize)   return m_exptype_map0[identity]; else   return m_exptype_map[identity >>> m_SHIFT][identity & m_MASK];}  }
class C{  public void selectDefaultRunner(){  String runnerName=getDefaultRunnerName();  if (runnerName == null) {    return;  }  for (  Environment e : systemRunners) {    if (runnerName.equals(e.getName())) {      dropDownHeaderWidget.selectElement(resources.scopeSystem(),e.getName());      return;    }  }  for (  Environment e : projectRunners) {    if (runnerName.equals(e.getName())) {      dropDownHeaderWidget.selectElement(resources.scopeProject(),e.getName());      return;    }  }}  }
class C{  private boolean isDownScrollRequired(){  return elements.length > tabsThatFitInComposite && bottomVisibleIndex != elements.length - 1;}  }
class C{  public static String genRandomString(){  return genRandomString(6);}  }
class C{  public boolean unlinkEntry(LRUClockNode entry){  if (logger.isTraceEnabled(LogMarker.LRU_CLOCK)) {    logger.trace(LogMarker.LRU_CLOCK,LocalizedMessage.create(LocalizedStrings.NewLRUClockHand_UNLINKENTRY_CALLED,entry));  }  entry.setEvicted();  stats().incDestroys();synchronized (lock) {    LRUClockNode next=entry.nextLRUNode();    LRUClockNode prev=entry.prevLRUNode();    if (next == null || prev == null) {      return false;    }    next.setPrevLRUNode(prev);    prev.setNextLRUNode(next);    entry.setNextLRUNode(null);    entry.setPrevLRUNode(null);    this.size--;  }  return true;}  }
class C{  public Map<String,Properties> mapAvailableProperties(String uri) throws IOException {  _resourcesNotLoaded.clear();  Map<String,Properties> propertiesMap=new HashMap<>();  Map<String,URL> map=getResourcesMap(uri);  for (Iterator<Entry<String,URL>> iterator=map.entrySet().iterator(); iterator.hasNext(); ) {    Entry<String,URL> entry=iterator.next();    String string=entry.getKey();    URL url=entry.getValue();    try {      Properties properties=loadProperties(url);      propertiesMap.put(string,properties);    } catch (    Exception notAvailable) {      _resourcesNotLoaded.add(url.toExternalForm());    }  }  return propertiesMap;}  }
class C{  private void _writeSignedVInt(int input) throws IOException {  _writePositiveVInt(SmileUtil.zigzagEncode(input));}  }
class C{  public StrBuilder insert(int index,char chars[],int offset,int length){  validateIndex(index);  if (chars == null) {    return insert(index,nullText);  }  if (offset < 0 || offset > chars.length) {    throw new StringIndexOutOfBoundsException("Invalid offset: " + offset);  }  if (length < 0 || offset + length > chars.length) {    throw new StringIndexOutOfBoundsException("Invalid length: " + length);  }  if (length > 0) {    ensureCapacity(size + length);    System.arraycopy(buffer,index,buffer,index + length,size - index);    System.arraycopy(chars,offset,buffer,index,length);    size+=length;  }  return this;}  }
class C{  private User createAnonUser(){  for (int i=0; i < 10; ++i) {    final User user=dbLogic.createUser("anon" + randInt(1,Integer.MAX_VALUE));    if (user != null) {      user.setWasCreatedAsAnon(true);      user.setIsAnon(true);      return user;    }  }  return null;}  }
class C{  protected void redrawSquares(boolean forceUpdate){  if (decorators == null) {    return;  }  for (int i=0; i < decorators.length; i++) {    if (forceUpdate) {      decorators[i].square.redraw();    } else {      decorators[i].square.setDirty(true);    }    if (!decorators[i].specs.isEmpty()) {    }  }}  }
class C{  public static PrincipalName parse(DerInputStream data,byte explicitTag,boolean optional,Realm realm) throws Asn1Exception, IOException, RealmException {  if ((optional) && (((byte)data.peekByte() & (byte)0x1F) != explicitTag))   return null;  DerValue der=data.getDerValue();  if (explicitTag != (der.getTag() & (byte)0x1F)) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  } else {    DerValue subDer=der.getData().getDerValue();    if (realm == null) {      realm=Realm.getDefault();    }    return new PrincipalName(subDer,realm);  }}  }
class C{  private static int maxNumArcsForDedupByte(int currentNumDedupBytes){  int maxArcs=1 + (2 * currentNumDedupBytes);  if (currentNumDedupBytes > 5) {    maxArcs*=currentNumDedupBytes;  }  return Math.min(maxArcs,255);}  }
class C{  protected TextContent(ElementKey<?,?> key){  super(key);}  }
class C{  public Graph convert(){  this.logger.log("info","Starting PC algorithm");  long startTime=System.currentTimeMillis();  this.sepsets=new SepsetMap();  List<Node> allNodes=dag.getNodes();  List<Node> measured=new ArrayList<>();  for (  Node node : allNodes) {    if (node.getNodeType() == NodeType.MEASURED) {      measured.add(node);    }  }  graph=new EdgeListGraphSingleConnections(measured);  graph.fullyConnect(Endpoint.CIRCLE);  for (int i=0; i < measured.size(); i++) {    for (int j=i + 1; j < measured.size(); j++) {      Node n1=measured.get(i);      Node n2=measured.get(j);      List<Node> sepset=dag.getSepset(n1,n2);      getSepsets().set(n1,n2,sepset);      if (sepset != null)       graph.removeEdge(n1,n2);    }  }  enumerateTriples();  SearchGraphUtils.pcOrientbk(knowledge,graph,measured);  SearchGraphUtils.orientCollidersUsingSepsets(this.sepsets,knowledge,graph,verbose);  MeekRules rules=new MeekRules();  rules.setAggressivelyPreventCycles(this.aggressivelyPreventCycles);  rules.setKnowledge(knowledge);  rules.orientImplied(graph);  this.logger.log("graph","\nReturning this graph: " + graph);  this.elapsedTime=System.currentTimeMillis() - startTime;  this.logger.log("info","Elapsed time = " + (elapsedTime) / 1000. + " s");  this.logger.log("info","Finishing PC Algorithm.");  this.logger.flush();  return graph;}  }
class C{  @Override public void onNewIntent(){}  }
class C{  public static void json(String json){  printer.json(json);}  }
class C{  public Map<String,String> querySysData() throws IOException {  logger.fine("Query snmp for " + address);  Map<String,String> resMap=null;  resMap=new java.util.LinkedHashMap<String,String>();  Map<OID,String> res=get(COMMON_SYS_OIDS);  if (res != null) {    for (    Map.Entry<OID,String> e : res.entrySet()) {      if ("noSuchObject".equalsIgnoreCase(e.getValue()))       continue;      resMap.put(OID_NAME_MAP.get("." + e.getKey().toString()),e.getValue());    }  }  return resMap;}  }
class C{  public void addXValue(String xVal){  mXValAverageLength=(mXValAverageLength + xVal.length()) / 2f;  mXVals.add(xVal);}  }
class C{  public static String generateBoostedQuery(GlobalFeature feature,int queryLength){  ArrayList<GlobalFeature> l=referencePoints.get(feature.getClass().getName());  if (l == null)   return null;  int lenghtOfPostingList=Math.min(queryLength,parameters.get(feature.getClass().getName()).lenghtOfPostingList);  if (lenghtOfPostingList < 1) {    lenghtOfPostingList=parameters.get(feature.getClass().getName()).lenghtOfPostingList;  }  TreeSet<Result> results=new TreeSet<>();  double maxDistance=Double.MAX_VALUE;  double distance;  int count=0;  for (  GlobalFeature f : l) {    distance=f.getDistance(feature);    if (results.size() < lenghtOfPostingList) {      results.add(new Result(distance,count));      maxDistance=l.get(results.last().index).getDistance(feature);    } else     if (distance < maxDistance) {      results.add(new Result(distance,count));      maxDistance=distance;      if (results.size() > lenghtOfPostingList) {        results.pollLast();      }    }    count++;  }  StringBuilder sb=new StringBuilder(lenghtOfPostingList * 11);  double max=lenghtOfPostingList;  for (Iterator<Result> resultIterator=results.iterator(); resultIterator.hasNext(); ) {    Result result=resultIterator.next();    sb.append(String.format("R%05d^%1.2f ",result.index,(double)lenghtOfPostingList / max));    lenghtOfPostingList--;  }  return sb.toString();}  }
class C{  public void addEventListener(SIPDialogEventListener newListener){  eventListeners.add(newListener);}  }
class C{  private static void createRegionQueueandCheckDuplicates() throws Exception {  HARegionQueueDUnitTest test=new HARegionQueueDUnitTest();  cache=test.createCache();  hrq=HARegionQueue.getHARegionQueueInstance("HARegionQueueDUnitTest_region",cache,HARegionQueue.NON_BLOCKING_HA_QUEUE,false);  assertEquals(2,hrq.size());  EventID id1=new EventID(new byte[]{1},1,1);  EventID id2=new EventID(new byte[]{1},1,2);  ConflatableObject c1=new ConflatableObject("1","1",id1,false,"HARegionQueueDUnitTest_region");  ConflatableObject c2=new ConflatableObject("2","2",id2,false,"HARegionQueueDUnitTest_region");  hrq.put(c1);  hrq.put(c2);  assertEquals(2,hrq.size());}  }
class C{  public PriorityQueue(int initialCapacity){  this(initialCapacity,null);}  }
class C{  public void injectSkin(View view){  List<SkinView> skinViews=new ArrayList<SkinView>();  SkinAttrSupport.addSkinViews(view,skinViews);  for (  SkinView skinView : skinViews) {    skinView.apply();  }}  }
class C{  protected CCMenuItemToggle(CCNode t,String sel,CCMenuItem... items){  super(t,sel);  subItems_=new ArrayList<CCMenuItem>(items.length);  subItems_.addAll(Arrays.asList(items));  selectedIndex_=Integer.MAX_VALUE;  setSelectedIndex(0);}  }
class C{  public CreateSnapshotRequest source(String source){  if (hasLength(source)) {    try (XContentParser parser=XContentFactory.xContent(source).createParser(source)){      return source(parser.mapOrdered());    } catch (    Exception e) {      throw new IllegalArgumentException("failed to parse repository source [" + source + "]",e);    }  }  return this;}  }
class C{  public VCard(VCardVersion version){  this.version=version;}  }
class C{  protected void engineSetPadding(String padding) throws NoSuchPaddingException {  if (!padding.equalsIgnoreCase("NoPadding")) {    throw new NoSuchPaddingException("Padding " + padding + " unknown.");  }}  }
class C{  protected int findDensestIndex(){  int index=-1;  int value=-1;  for (int i=0; i < size(); i++) {    int tempValue=density[findIndex(get(i))];    if (tempValue > value) {      index=i;      value=tempValue;    }  }  return index;}  }
class C{  int bulkInsertForUser(int userId,Uri uri,ContentValues[] values){  if (uri == null) {    throw new IllegalArgumentException("Uri cannot be null");  }  if (values == null) {    throw new IllegalArgumentException("ContentValues cannot be null");  }  int numRowsAffected=0;  String tableName=getTableNameFromUri(uri);  checkWritePermissions(tableName);  CMDatabaseHelper dbHelper=getOrEstablishDatabase(getUserIdForTable(tableName,userId));  SQLiteDatabase db=dbHelper.getWritableDatabase();  db.beginTransaction();  try {    for (    ContentValues value : values) {      if (value == null) {        continue;      }      long rowId=db.insert(tableName,null,value);      if (rowId >= 0) {        numRowsAffected++;      } else {        return 0;      }    }    db.setTransactionSuccessful();  }  finally {    db.endTransaction();  }  if (numRowsAffected > 0) {    notifyChange(uri,tableName,userId);    if (LOCAL_LOGV)     Log.d(TAG,tableName + ": " + numRowsAffected+ " row(s) inserted");  }  return numRowsAffected;}  }
class C{  public static String makeTagClassName(String componentFamily,String rendererType){  if (componentFamily == null) {    return null;  }  String tagClassName=componentFamily;  if (rendererType != null) {    if (!componentFamily.equals(rendererType)) {      tagClassName=tagClassName + rendererType;    }  }  return tagClassName + "Tag";}  }
class C{  private static Collection<TableIndex> findTableIndexesToBuild(ChangedTableDescription desc,Table oldTable,Table newTable){  List<TableIndex> indexes=new ArrayList<>();  for (  TableIndex index : oldTable.getIndexesIncludingInternal()) {    String oldName=index.getIndexName().getName();    String preserveName=desc.getPreserveIndexes().get(oldName);    if (preserveName == null) {      TableIndex newIndex=newTable.getIndexIncludingInternal(oldName);      if (newIndex != null) {        indexes.add(newIndex);      }    }  }  return indexes;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case MappingPackage.FAULT_SOURCE__PROPERTY:    setProperty((Property)null);  return;}super.eUnset(featureID);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNS05.class,args);}  }
class C{  public long nextOrderNumber(){  try {    lock.acquire();    Long currentValue=(Long)dataMgr.getData(COUNTER_PATH,false);    Long newOrderNumber=currentValue + 1;    dataMgr.putData(COUNTER_PATH,newOrderNumber);    return newOrderNumber;  } catch (  Exception e) {    throw new RuntimeException("Updating Order Number Lock",e);  } finally {    try {      lock.release();    } catch (    Exception e) {      LOG.error("Error releasing Order Number lock",e);    }  }}  }
class C{  public String generate() throws Exception {  StringBuffer result;  OptionHandler handler;  Enumeration<Option> enm;  Option option;  result=new StringBuffer();  handler=(OptionHandler)Class.forName(getClassname()).newInstance();  enm=handler.listOptions();  while (enm.hasMoreElements()) {    option=enm.nextElement();    result.append(option.synopsis() + '\n');    result.append(option.description() + "\n");  }  return result.toString();}  }
class C{  public static void overrideApiBase(final String overriddenApiBase){  apiBase=overriddenApiBase;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildSemosTempleArea(zone);}  }
class C{  public MessageFormatter(String bundleName){  rb=ResourceBundle.getBundle(bundleName,Locale.getDefault());}  }
class C{  public static byte combine2bytesToOne(byte high,byte low){  if (high < 0 || high > 0xf || low < 0 || low > 0xf) {    throw new RuntimeException("Out of Boundary");  }  return (byte)(high << 4 | low);}  }
class C{  public void execute(Connection conn) throws SQLException {  crsInternal.execute(conn);}  }
class C{  public void toDotFile(SootMethod method,File destDir,String suffix,Block start) throws IOException {  if (!destDir.exists()) {    if (!destDir.mkdirs())     throw new IOException("could not create directory " + destDir);  } else   if (!destDir.isDirectory()) {    throw new IOException(destDir + " exists, but is a file");  }  String className=method.getDeclaringClass().getName();  try (PrintWriter fileOut=new PrintWriter(new File(destDir,className + "." + method.getName()+ "."+ start.getIndexInMethod()+ suffix+ ".dot"))){    fileOut.println(this.toString(method,start));  } }  }
class C{  public void addRelyingParty(String tenantName,RelyingParty rp) throws Exception {  getService().addRelyingParty(tenantName,rp,this.getServiceContext());}  }
class C{  private static boolean areCopiedTokensEqual(TagNode token1,TagNode token2){  return token1.name.equals(token2.name) && token1.getAttributes().equals(token2.getAttributes());}  }
class C{  public static <T>List<T> listAndClose(final HGSearchResult<T> result){  final List<T> outputList=new ArrayList<T>();  while (result.hasNext()) {    final T currentValue=result.next();    outputList.add(currentValue);  }  result.close();  return outputList;}  }
class C{  private CsvFileSet createTestFileSet(String testName) throws Exception {  File testDir=prepareTestDir(testName);  UniversalDataSource ds=createDataSource(testName);  UniversalConnection conn=ds.getConnection();  Table staging=createTableMetadata(testName,"staging1",true);  Table base=createTableMetadata(testName,"base1",false);  CsvFileSet fileSet;  fileSet=new CsvFileSet(staging,base,0);  fileSet.setConnection(conn);  fileSet.setRowIdColumn("tungsten_row_id");  fileSet.setStageDir(testDir);  fileSet.setOutputCharset(Charset.defaultCharset());  return fileSet;}  }
class C{  @Override public void close() throws IOException {  try {    closeWriter();  }  finally {    IOUtils.deleteFilesIgnoringExceptions(sorter.getDirectory(),input == null ? null : input.getName(),sortedFileName);  }}  }
class C{  public SystemPropertiesLoader withCommonAndLocal(){  return withCommon().withLocal();}  }
class C{  public TokenCounter(Map<String,Integer> countsByToken){  super();  this.countsByToken=countsByToken;}  }
class C{  public boolean isRoleZoneLevel(String role){  return (role.equalsIgnoreCase(Role.SYSTEM_ADMIN.toString()) || role.equalsIgnoreCase(Role.SECURITY_ADMIN.toString()) || role.equalsIgnoreCase(Role.SYSTEM_MONITOR.toString())|| role.equalsIgnoreCase(Role.SYSTEM_AUDITOR.toString())|| role.equalsIgnoreCase(Role.RESTRICTED_SECURITY_ADMIN.toString())|| role.equalsIgnoreCase(Role.RESTRICTED_SYSTEM_ADMIN.toString()));}  }
class C{  private int syncResultToErrorNumber(SyncResult syncResult){  if (syncResult.syncAlreadyInProgress)   return ContentResolver.SYNC_ERROR_SYNC_ALREADY_IN_PROGRESS;  if (syncResult.stats.numAuthExceptions > 0)   return ContentResolver.SYNC_ERROR_AUTHENTICATION;  if (syncResult.stats.numIoExceptions > 0)   return ContentResolver.SYNC_ERROR_IO;  if (syncResult.stats.numParseExceptions > 0)   return ContentResolver.SYNC_ERROR_PARSE;  if (syncResult.stats.numConflictDetectedExceptions > 0)   return ContentResolver.SYNC_ERROR_CONFLICT;  if (syncResult.tooManyDeletions)   return ContentResolver.SYNC_ERROR_TOO_MANY_DELETIONS;  if (syncResult.tooManyRetries)   return ContentResolver.SYNC_ERROR_TOO_MANY_RETRIES;  if (syncResult.databaseError)   return ContentResolver.SYNC_ERROR_INTERNAL;  throw new IllegalStateException("we are not in an error state, " + syncResult);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == TAnnotableElement.class) {switch (baseFeatureID) {case TypesPackage.TANNOTABLE_ELEMENT__ANNOTATIONS:      return TypesPackage.TMEMBER__ANNOTATIONS;default :    return -1;}}if (baseClass == SyntaxRelatedTElement.class) {switch (baseFeatureID) {case TypesPackage.SYNTAX_RELATED_TELEMENT__AST_ELEMENT:  return TypesPackage.TMEMBER__AST_ELEMENT;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public String sampleSizePercentTipText(){  return "The subsample size as a percentage of the original set.";}  }
class C{  protected BasicButtonListener createButtonListener(AbstractButton b){  return new CompiereButtonListener(b);}  }
class C{  private Object executeNEQ(PageContext pc,SQL sql,Query qr,Operation2 expression,int row) throws PageException {  return (executeCompare(pc,sql,qr,expression,row) != 0) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public Builder permitCustomSlowCalls(){  return disable(DETECT_CUSTOM);}  }
class C{  boolean appendMarker(Node<K,V> f){  return casNext(f,new Node<K,V>(f));}  }
class C{  public boolean hasWhere(){  return hasExtension(Where.class);}  }
class C{  protected final V wrapKey(Object o){  return (V)o;}  }
class C{  public boolean applyEListToSiblings(){  return _elistToSiblings;}  }
class C{  public static final double decodeLatitude(final long hash){  return unscaleLat(BitUtil.deinterleave(hash >>> 1));}  }
class C{  private Targetable chooseTarget(Coords pos){  final IGame game=clientgui.getClient().getGame();  boolean friendlyFire=game.getOptions().booleanOption("friendly_fire");  Targetable choice=null;  Iterator<Entity> choices;  int wn=clientgui.mechD.wPan.getSelectedWeaponNum();  Mounted weap=ce().getEquipment(wn);  if ((weap != null) && (weap.getLinked() != null) && (weap.getLinked().getType() instanceof AmmoType)) {    AmmoType aType=(AmmoType)weap.getLinked().getType();    long munitionType=aType.getMunitionType();    if ((aType.getAmmoType() == AmmoType.T_MEK_MORTAR) && (munitionType == AmmoType.M_FLARE)) {      return new HexTarget(pos,game.getBoard(),Targetable.TYPE_FLARE_DELIVER);    } else     if ((aType.getAmmoType() == AmmoType.T_MEK_MORTAR) && ((munitionType == AmmoType.M_AIRBURST) || (munitionType == AmmoType.M_SMOKE_WARHEAD))) {      return new HexTarget(pos,game.getBoard(),Targetable.TYPE_HEX_CLEAR);    } else     if (munitionType == AmmoType.M_MINE_CLEARANCE) {      return new HexTarget(pos,game.getBoard(),Targetable.TYPE_HEX_CLEAR);    }  }  if (friendlyFire) {    choices=game.getEntities(pos);  } else {    choices=game.getEnemyEntities(pos,ce());  }  List<Targetable> targets=new ArrayList<Targetable>();  final IPlayer localPlayer=clientgui.getClient().getLocalPlayer();  while (choices.hasNext()) {    Targetable t=choices.next();    boolean isSensorReturn=false;    boolean isVisible=true;    if (t instanceof Entity) {      isSensorReturn=((Entity)t).isSensorReturn(localPlayer);      isVisible=((Entity)t).hasSeenEntity(localPlayer);    }    if (!ce().equals(t) && !isSensorReturn && isVisible) {      targets.add(t);    }  }  if (targets.size() == 0) {    List<Entity> flyovers=clientgui.getBoardView().getEntitiesFlyingOver(pos);    for (    Entity e : flyovers) {      if (!targets.contains(e)) {        targets.add(e);      }    }  }  Building bldg=clientgui.getClient().getGame().getBoard().getBuildingAt(pos);  if (bldg != null) {    targets.add(new BuildingTarget(pos,clientgui.getClient().getGame().getBoard(),false));  }  if (targets.size() == 0) {    IHex hex=game.getBoard().getHex(pos);    if (hex.containsTerrain(Terrains.WOODS) || hex.containsTerrain(Terrains.JUNGLE)) {      targets.add(new HexTarget(pos,game.getBoard(),Targetable.TYPE_HEX_CLEAR));    }  }  if (targets.size() == 1) {    choice=targets.get(0);  } else   if (targets.size() > 1) {    String input=(String)JOptionPane.showInputDialog(clientgui,Messages.getString("FiringDisplay.ChooseTargetDialog.message",new Object[]{pos.getBoardNum()}),Messages.getString("FiringDisplay.ChooseTargetDialog.title"),JOptionPane.QUESTION_MESSAGE,null,SharedUtility.getDisplayArray(targets),null);    choice=SharedUtility.getTargetPicked(targets,input);  }  return choice;}  }
class C{  public Boolean isEnabled(){  return enabled;}  }
class C{  private void pause(){  StreamAction state=getServiceState();  if ((StreamAction.START == state) || (StreamAction.RESUME == state)) {    Log.d(LOG_TAG,"onStartCommand pause from state " + state);    if (mSessions != null) {      for (      MXSession session : mSessions) {        session.pauseEventStream();      }      setServiceState(StreamAction.PAUSE);    }  } else {    Log.e(LOG_TAG,"onStartCommand invalid state pause " + state);  }}  }
class C{  public static void stop(){  if (!booted)   return;  VM.sysWriteln("AOS: Killing all adaptive system threads");  for (Enumeration<Organizer> e=organizers.elements(); e.hasMoreElements(); ) {    Organizer organizer=e.nextElement();    organizer.stop(threadDeath);  }  compilationThread.stop(threadDeath);  controllerThread.stop(threadDeath);  RuntimeMeasurements.stop();  report();}  }
class C{  boolean contains(CipherSuite suite){  return cipherSuites.contains(suite);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.N4_METHOD_DECLARATION__BODY:    return body != null;case N4JSPackage.N4_METHOD_DECLARATION__LOK:  return _lok != null;case N4JSPackage.N4_METHOD_DECLARATION__DEFINED_TYPE:return definedType != null;case N4JSPackage.N4_METHOD_DECLARATION__FPARS:return fpars != null && !fpars.isEmpty();case N4JSPackage.N4_METHOD_DECLARATION__RETURN_TYPE_REF:return returnTypeRef != null;case N4JSPackage.N4_METHOD_DECLARATION__GENERATOR:return generator != GENERATOR_EDEFAULT;case N4JSPackage.N4_METHOD_DECLARATION__DECLARED_ASYNC:return declaredAsync != DECLARED_ASYNC_EDEFAULT;case N4JSPackage.N4_METHOD_DECLARATION__TYPE_VARS:return typeVars != null && !typeVars.isEmpty();case N4JSPackage.N4_METHOD_DECLARATION__DECLARED_TYPE_REF:return declaredTypeRef != null;case N4JSPackage.N4_METHOD_DECLARATION__BOGUS_TYPE_REF:return bogusTypeRef != null;case N4JSPackage.N4_METHOD_DECLARATION__DECLARED_NAME:return declaredName != null;}return super.eIsSet(featureID);}  }
class C{  private void inferParameterTypes(Reference pr,Parameter param,Tree.Expression e,boolean variadic){  FunctionOrValue model=param.getModel();  if (e != null && model != null) {    Tree.Term term=unwrapExpressionUntilTerm(e.getTerm());    TypedReference tpr=pr.getTypedParameter(param);    if (term instanceof Tree.FunctionArgument) {      Tree.FunctionArgument anon=(Tree.FunctionArgument)term;      if (model instanceof Functional) {        inferParameterTypesFromCallableParameter(pr,param,anon);      } else {        Type paramType=tpr.getFullType();        if (variadic) {          paramType=unit.getIteratedType(paramType);        }        paramType=callableFromUnion(paramType);        if (unit.isCallableType(paramType)) {          inferParameterTypesFromCallableType(paramType,param,anon);        }      }    } else     if (term instanceof Tree.StaticMemberOrTypeExpression) {      Tree.StaticMemberOrTypeExpression stme=(Tree.StaticMemberOrTypeExpression)term;      if (stme instanceof Tree.QualifiedMemberOrTypeExpression && stme.getStaticMethodReference()) {        Tree.QualifiedMemberOrTypeExpression qmte=(Tree.QualifiedMemberOrTypeExpression)stme;        Tree.StaticMemberOrTypeExpression ote=(Tree.StaticMemberOrTypeExpression)qmte.getPrimary();        ote.setTargetParameter(tpr);        stme.setParameterType(tpr.getFullType());      } else {        stme.setTargetParameter(tpr);        stme.setParameterType(tpr.getFullType());      }    }  }}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public Cuboid inset(CuboidDirection dir,int amount){  return this.outset(dir,-amount);}  }
class C{  public static PropertyValuesHolder ofInt(Property<?,Integer> property,int... values){  return new IntPropertyValuesHolder(property,values);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @ConstructorProperties({"borderInsets"}) public EmptyBorder(Insets borderInsets){  this.top=borderInsets.top;  this.right=borderInsets.right;  this.bottom=borderInsets.bottom;  this.left=borderInsets.left;}  }
class C{  public void loadPlugins(File file) throws IOException, ClassNotFoundException {  Object pluginObject, activeListObject;  FileInputStream fis;  ObjectInputStream ois;  fis=new FileInputStream(file);  ois=new ObjectInputStream(fis);  pluginObject=ois.readObject();  activeListObject=ois.readObject();  ois.close();  if (!(pluginObject instanceof PluginContainer)) {    LOG.error("Incompatible Filetype. Could not read plugin configuration.");    return;  }  PluginContainer collection=(PluginContainer)pluginObject;  for (  AbstractPlugin savedPlugin : collection) {    AbstractPlugin currentPlugin=allPlugins.getByName(savedPlugin.getName());    if (currentPlugin != null) {      currentPlugin.restoreConfiguration(savedPlugin);    } else {      LOG.warn("Could not restore Plugin-Configuration for Plugin '" + savedPlugin.getName() + "' - Plugin not available!");    }  }  if (!(activeListObject instanceof List)) {    LOG.error("Incompatible Filetype. Could not read active plugin list.");    return;  }  @SuppressWarnings("rawtypes") List activeList=(List)activeListObject;  for (  Object active : activeList) {    if (active instanceof String) {      setActive(getByName((String)active),true);    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private final void encipher(int lr[],int off){  int i, n, l=lr[off], r=lr[off + 1];  l^=P[0];  for (i=0; i <= BLOWFISH_NUM_ROUNDS - 2; ) {    n=S[(l >> 24) & 0xff];    n+=S[0x100 | ((l >> 16) & 0xff)];    n^=S[0x200 | ((l >> 8) & 0xff)];    n+=S[0x300 | (l & 0xff)];    r^=n ^ P[++i];    n=S[(r >> 24) & 0xff];    n+=S[0x100 | ((r >> 16) & 0xff)];    n^=S[0x200 | ((r >> 8) & 0xff)];    n+=S[0x300 | (r & 0xff)];    l^=n ^ P[++i];  }  lr[off]=r ^ P[BLOWFISH_NUM_ROUNDS + 1];  lr[off + 1]=l;}  }
class C{  public Knapsack(Reader reader) throws IOException {  super();  load(reader);}  }
class C{  public Element addElementToRegistry(String value,boolean filter){  if (value == null)   return (this);  setFilterState(filter);  addElementToRegistry(Integer.toString(value.hashCode()),value);  return (this);}  }
class C{  ResizableLabel(ImageIcon icon){  super(icon);  this.image=icon.getImage();}  }
class C{  private void loadLocalGateways() throws XMPPException {  DiscoverItems items=sdManager.discoverItems(connection.getHost());  Iterator<Item> iter=items.getItems();  while (iter.hasNext()) {    String itemJID=iter.next().getEntityID();    discoverGateway(itemJID);  }}  }
class C{  public Map<String,String> showDeviceAliasDatabase() throws NetworkDeviceControllerException {  return showDeviceAliasDatabase(false);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public int sendMessageToOverallChat(Object newMessage){  try {    IConnection current=Red5.getConnectionLocal();    RoomClient currentClient=this.clientListManager.getClientByStreamId(current.getClient().getId());    ArrayList messageMap=(ArrayList)newMessage;    String messageText=messageMap.get(4).toString() + " ";    messageMap.set(1,parseDateAsTimeString());    LinkedList<String[]> parsedStringObjects=ChatString.getInstance().parseChatString(messageText);    log.debug("size:" + messageMap.size());    messageMap.add(parsedStringObjects);    newMessage=messageMap;    HashMap<String,Object> hsm=new HashMap<String,Object>();    hsm.put("client",currentClient);    hsm.put("message",newMessage);    List<HashMap<String,Object>> myChatList=myChats.get(overallChatRoomName);    if (myChatList == null)     myChatList=new LinkedList<HashMap<String,Object>>();    if (myChatList.size() == chatRoomHistory)     myChatList.remove(0);    myChatList.add(hsm);    myChats.put(overallChatRoomName,myChatList);    log.debug("SET CHATROOM: " + overallChatRoomName);    scopeApplicationAdapter.syncMessageToCurrentScope("sendVarsToOverallChat",hsm,true);  } catch (  Exception err) {    log.error("[ChatService sendMessageToOverallChat] ",err);    return -1;  }  return 1;}  }
class C{  public DataTypeException(Class type){  super("Type " + type.getName() + " not supported.");}  }
class C{  @Override public int pollMax(){  return _selectMax;}  }
class C{  private void updateNullableProperty(final String key,final String value){  if (value == null || value.isEmpty()) {    this.syncConf.removeConfig(key);  } else {    this.syncConf.setConfig(key,value);  }}  }
class C{  public SwapParams build(){  SwapParams swapParams=new SwapParams(this);  return swapParams;}  }
class C{  public VarNode tVarRight(){  return (VarNode)super.getRequiredProperty(Annotations.TRANSITIVITY_VAR_RIGHT);}  }
class C{  private OSInfo(){}  }
class C{  private void buildSubgraphs(List subgraphList,PolygonBuilder polyBuilder){  List processedGraphs=new ArrayList();  for (Iterator i=subgraphList.iterator(); i.hasNext(); ) {    BufferSubgraph subgraph=(BufferSubgraph)i.next();    Coordinate p=subgraph.getRightmostCoordinate();    SubgraphDepthLocater locater=new SubgraphDepthLocater(processedGraphs);    int outsideDepth=locater.getDepth(p);    subgraph.computeDepth(outsideDepth);    subgraph.findResultEdges();    processedGraphs.add(subgraph);    polyBuilder.add(subgraph.getDirectedEdges(),subgraph.getNodes());  }}  }
class C{  public void configure(){  log.info("Generic Serial ports have to be configured by the\n" + "operating system (via startup script)");}  }
class C{  public int size(){  return count;}  }
class C{  public AclEntryImpl(Principal user){  this.user=user;}  }
class C{  public void commentPrintLn(Object line){  comment.append(line);  comment.append(NEWLINE);}  }
class C{  public Future<ResponseMessage> start(){  upload(false);  return uploadResultFuture;}  }
class C{  @Override public void execute(String[] params,Server server,Conversation conversation,IRCService service) throws CommandException {  if (params.length != 2) {    throw new CommandException(service.getString(R.string.invalid_number_of_params));  }  service.getConnection(server.getId()).sendRawLineViaQueue("WHOIS " + params[1]);}  }
class C{  public void removeScrollingListener(OnWheelScrollListener listener){  scrollingListeners.remove(listener);}  }
class C{  public String chooseEngineClientAlias(String[] keyType,Principal[] issuers,SSLEngine engine){  return null;}  }
class C{  public boolean isDeltaTypesAddProperties(){  return deltaTypesAddProperties;}  }
class C{  public boolean willAccess(Method m){  Class<?> c1=lookupClass();  Class<?> c2=m.getDeclaringClass();  LookupCase lc=this.in(c2);  int m1=lc.lookupModes();  int m2=fixMods(m.getModifiers());  if (c1 != c2)   m1&=~PRIVATE;  if ((m2 & PROTECTED) != 0) {    int prev=m2;    m2|=PACKAGE;    if ((lookupModes() & PROTECTED) != 0 && c2.isAssignableFrom(c1))     m2|=PUBLIC;  }  if (verbosity >= 2)   System.out.println(this + " willAccess " + lc+ " m1="+ m1+ " m2="+ m2+ " => "+ ((m2 & m1) != 0));  return (m2 & m1) != 0;}  }
class C{  public void registerManufacturerSpecificBuilder(int companyId,ADManufacturerSpecificBuilder builder){  if (companyId < 0 || 0xFFFF < companyId) {    String message=String.format("'companyId' is out of the valid range: %d",companyId);    throw new IllegalArgumentException(message);  }  if (builder == null) {    return;  }  Integer key=Integer.valueOf(companyId);  List<ADManufacturerSpecificBuilder> builders=mMSBuilders.get(key);  if (builders == null) {    builders=new ArrayList<ADManufacturerSpecificBuilder>();    mMSBuilders.put(key,builders);  }  builders.add(0,builder);}  }
class C{  public static void showJFrame(final WorkspaceComponent component){  SimbrainDesktop.registerComponents();  GenericJFrame theFrame=new GenericJFrame();  GuiComponent<?> desktopComponent=createDesktopComponent(theFrame,component);  theFrame.setResizable(true);  theFrame.setVisible(true);  theFrame.setBounds(100,100,200,200);  theFrame.setContentPane(desktopComponent);  desktopComponent.postAddInit();}  }
class C{  public boolean isSetValue(){  return this.value != null;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.MODEL__NAME:    setName(NAME_EDEFAULT);  return;case GamlPackage.MODEL__PRAGMAS:getPragmas().clear();return;case GamlPackage.MODEL__IMPORTS:getImports().clear();return;case GamlPackage.MODEL__BLOCK:setBlock((Block)null);return;}super.eUnset(featureID);}  }
class C{  public SQLTransactionRollbackException(Throwable cause){  super(cause);}  }
class C{  private boolean uploadOneSubmission(String urlString,String id,String instanceFilePath,Uri toUpdate,HttpContext localContext,Map<Uri,Uri> uriRemap,Outcome outcome){  Collect.getInstance().getActivityLogger().logAction(this,urlString,instanceFilePath);  File instanceFile=new File(instanceFilePath);  ContentValues cv=new ContentValues();  Uri u=Uri.parse(urlString);  HttpClient httpclient=WebUtils.createHttpClient(CONNECTION_TIMEOUT);  boolean openRosaServer=false;  if (uriRemap.containsKey(u)) {    openRosaServer=true;    u=uriRemap.get(u);    if (u.getScheme().equals("https")) {      WebUtils.enablePreemptiveBasicAuth(localContext,u.getHost());    }    Log.i(t,"Using Uri remap for submission " + id + ". Now: "+ u.toString());  } else {    if (u.getScheme() != null && u.getScheme().equals("https")) {      WebUtils.enablePreemptiveBasicAuth(localContext,u.getHost());    }    HttpHead httpHead=WebUtils.createOpenRosaHttpHead(u);    HttpResponse response=null;    try {      Log.i(t,"Issuing HEAD request for " + id + " to: "+ u.toString());      response=httpclient.execute(httpHead,localContext);      int statusCode=response.getStatusLine().getStatusCode();      if (statusCode == HttpStatus.SC_UNAUTHORIZED) {        Collect.getInstance().getCookieStore().clear();        WebUtils.discardEntityBytes(response);        outcome.mAuthRequestingServer=u;        return false;      } else       if (statusCode == 204) {        Header[] locations=response.getHeaders("Location");        WebUtils.discardEntityBytes(response);        if (locations != null && locations.length == 1) {          try {            Uri uNew=Uri.parse(URLDecoder.decode(locations[0].getValue(),"utf-8"));            if (u.getHost().equalsIgnoreCase(uNew.getHost())) {              openRosaServer=true;              uriRemap.put(u,uNew);              u=uNew;            } else {              outcome.mResults.put(id,fail + "Unexpected redirection attempt to a different host: " + uNew.toString());              cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMISSION_FAILED);              Collect.getInstance().getContentResolver().update(toUpdate,cv,null,null);              return true;            }          } catch (          Exception e) {            e.printStackTrace();            outcome.mResults.put(id,fail + urlString + " "+ e.toString());            cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMISSION_FAILED);            Collect.getInstance().getContentResolver().update(toUpdate,cv,null,null);            return true;          }        }      } else {        WebUtils.discardEntityBytes(response);        Log.w(t,"Status code on Head request: " + statusCode);        if (statusCode >= HttpStatus.SC_OK && statusCode < HttpStatus.SC_MULTIPLE_CHOICES) {          outcome.mResults.put(id,fail + "Invalid status code on Head request.  If you have a web proxy, you may need to login to your network. ");          cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMISSION_FAILED);          Collect.getInstance().getContentResolver().update(toUpdate,cv,null,null);          return true;        }      }    } catch (    ClientProtocolException e) {      e.printStackTrace();      Log.e(t,e.toString());      outcome.mResults.put(id,fail + "Client Protocol Exception");      cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMISSION_FAILED);      Collect.getInstance().getContentResolver().update(toUpdate,cv,null,null);      return true;    }catch (    ConnectTimeoutException e) {      e.printStackTrace();      Log.e(t,e.toString());      outcome.mResults.put(id,fail + "Connection Timeout");      cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMISSION_FAILED);      Collect.getInstance().getContentResolver().update(toUpdate,cv,null,null);      return true;    }catch (    UnknownHostException e) {      e.printStackTrace();      Log.e(t,e.toString());      outcome.mResults.put(id,fail + e.toString() + " :: Network Connection Failed");      cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMISSION_FAILED);      Collect.getInstance().getContentResolver().update(toUpdate,cv,null,null);      return true;    }catch (    SocketTimeoutException e) {      e.printStackTrace();      Log.e(t,e.toString());      outcome.mResults.put(id,fail + "Connection Timeout");      cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMISSION_FAILED);      Collect.getInstance().getContentResolver().update(toUpdate,cv,null,null);      return true;    }catch (    HttpHostConnectException e) {      e.printStackTrace();      Log.e(t,e.toString());      outcome.mResults.put(id,fail + "Network Connection Refused");      cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMISSION_FAILED);      Collect.getInstance().getContentResolver().update(toUpdate,cv,null,null);      return true;    }catch (    Exception e) {      e.printStackTrace();      Log.e(t,e.toString());      String msg=e.getMessage();      if (msg == null) {        msg=e.toString();      }      outcome.mResults.put(id,fail + "Generic Exception: " + msg);      cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMISSION_FAILED);      Collect.getInstance().getContentResolver().update(toUpdate,cv,null,null);      return true;    }  }  File submissionFile=new File(instanceFile.getParentFile(),"submission.xml");  if (submissionFile.exists()) {    Log.w(t,"submission.xml will be uploaded instead of " + instanceFile.getAbsolutePath());  } else {    submissionFile=instanceFile;  }  if (!instanceFile.exists() && !submissionFile.exists()) {    outcome.mResults.put(id,fail + "instance XML file does not exist!");    cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMISSION_FAILED);    Collect.getInstance().getContentResolver().update(toUpdate,cv,null,null);    return true;  }  File[] allFiles=instanceFile.getParentFile().listFiles();  List<File> files=new ArrayList<File>();  for (  File f : allFiles) {    String fileName=f.getName();    int dotIndex=fileName.lastIndexOf(".");    String extension="";    if (dotIndex != -1) {      extension=fileName.substring(dotIndex + 1);    }    if (fileName.startsWith(".")) {      continue;    }    if (fileName.equals(instanceFile.getName())) {      continue;    } else     if (fileName.equals(submissionFile.getName())) {      continue;    } else     if (openRosaServer) {      files.add(f);    } else     if (extension.equals("jpg")) {      files.add(f);    } else     if (extension.equals("3gpp")) {      files.add(f);    } else     if (extension.equals("3gp")) {      files.add(f);    } else     if (extension.equals("mp4")) {      files.add(f);    } else     if (extension.equals("osm")) {      files.add(f);    } else {      Log.w(t,"unrecognized file type " + f.getName());    }  }  boolean first=true;  int j=0;  int lastJ;  while (j < files.size() || first) {    lastJ=j;    first=false;    HttpPost httppost=WebUtils.createOpenRosaHttpPost(u);    MimeTypeMap m=MimeTypeMap.getSingleton();    long byteCount=0L;    MultipartEntityBuilder builder=MultipartEntityBuilder.create();    FileBody fb=new FileBody(submissionFile,ContentType.TEXT_XML);    builder.addPart("xml_submission_file",fb);    Log.i(t,"added xml_submission_file: " + submissionFile.getName());    byteCount+=submissionFile.length();    for (; j < files.size(); j++) {      File f=files.get(j);      String fileName=f.getName();      int idx=fileName.lastIndexOf(".");      String extension="";      if (idx != -1) {        extension=fileName.substring(idx + 1);      }      String contentType=m.getMimeTypeFromExtension(extension);      if (extension.equals("xml")) {        fb=new FileBody(f,ContentType.TEXT_XML);        builder.addPart(f.getName(),fb);        byteCount+=f.length();        Log.i(t,"added xml file " + f.getName());      } else       if (extension.equals("3gpp")) {        fb=new FileBody(f,ContentType.create("audio/3gpp"));        builder.addPart(f.getName(),fb);        byteCount+=f.length();        Log.i(t,"added audio file " + f.getName());      } else       if (extension.equals("3gp")) {        fb=new FileBody(f,ContentType.create("video/3gpp"));        builder.addPart(f.getName(),fb);        byteCount+=f.length();        Log.i(t,"added video file " + f.getName());      } else       if (extension.equals("avi")) {        fb=new FileBody(f,ContentType.create("video/avi"));        builder.addPart(f.getName(),fb);        byteCount+=f.length();        Log.i(t,"added video file " + f.getName());      } else       if (extension.equals("amr")) {        fb=new FileBody(f,ContentType.create("audio/amr"));        builder.addPart(f.getName(),fb);        Log.i(t,"added audio file " + f.getName());      } else       if (extension.equals("csv")) {        fb=new FileBody(f,ContentType.create("text/csv"));        builder.addPart(f.getName(),fb);        byteCount+=f.length();        Log.i(t,"added csv file " + f.getName());      } else       if (extension.equals("jpg")) {        fb=new FileBody(f,ContentType.create("image/jpeg"));        builder.addPart(f.getName(),fb);        byteCount+=f.length();        Log.i(t,"added image file " + f.getName());      } else       if (extension.equals("mp3")) {        fb=new FileBody(f,ContentType.create("audio/mp3"));        builder.addPart(f.getName(),fb);        byteCount+=f.length();        Log.i(t,"added audio file " + f.getName());      } else       if (extension.equals("mp4")) {        fb=new FileBody(f,ContentType.create("video/mp4"));        builder.addPart(f.getName(),fb);        byteCount+=f.length();        Log.i(t,"added video file " + f.getName());      } else       if (extension.equals("oga")) {        fb=new FileBody(f,ContentType.create("audio/ogg"));        builder.addPart(f.getName(),fb);        byteCount+=f.length();        Log.i(t,"added audio file " + f.getName());      } else       if (extension.equals("ogg")) {        fb=new FileBody(f,ContentType.create("audio/ogg"));        builder.addPart(f.getName(),fb);        byteCount+=f.length();        Log.i(t,"added video file " + f.getName());      } else       if (extension.equals("ogv")) {        fb=new FileBody(f,ContentType.create("video/ogg"));        builder.addPart(f.getName(),fb);        byteCount+=f.length();        Log.i(t,"added video file " + f.getName());      } else       if (extension.equals("wav")) {        fb=new FileBody(f,ContentType.create("audio/wav"));        builder.addPart(f.getName(),fb);        byteCount+=f.length();        Log.i(t,"added audio file " + f.getName());      } else       if (extension.equals("webm")) {        fb=new FileBody(f,ContentType.create("video/webm"));        builder.addPart(f.getName(),fb);        byteCount+=f.length();        Log.i(t,"added video file " + f.getName());      } else       if (extension.equals("xls")) {        fb=new FileBody(f,ContentType.create("application/vnd.ms-excel"));        builder.addPart(f.getName(),fb);        byteCount+=f.length();        Log.i(t,"added xls file " + f.getName());      } else       if (contentType != null) {        fb=new FileBody(f,ContentType.create(contentType));        builder.addPart(f.getName(),fb);        byteCount+=f.length();        Log.i(t,"added recognized filetype (" + contentType + ") "+ f.getName());      } else {        contentType="application/octet-stream";        fb=new FileBody(f,ContentType.APPLICATION_OCTET_STREAM);        builder.addPart(f.getName(),fb);        byteCount+=f.length();        Log.w(t,"added unrecognized file (" + contentType + ") "+ f.getName());      }      if (j + 1 < files.size()) {        if ((j - lastJ + 1 > 100) || (byteCount + files.get(j + 1).length() > 10000000L)) {          Log.i(t,"Extremely long post is being split into multiple posts");          try {            StringBody sb=new StringBody("yes",ContentType.TEXT_PLAIN.withCharset(Charset.forName("UTF-8")));            builder.addPart("*isIncomplete*",sb);          } catch (          Exception e) {            e.printStackTrace();          }          ++j;          break;        }      }    }    httppost.setEntity(builder.build());    HttpResponse response=null;    try {      Log.i(t,"Issuing POST request for " + id + " to: "+ u.toString());      response=httpclient.execute(httppost,localContext);      int responseCode=response.getStatusLine().getStatusCode();      WebUtils.discardEntityBytes(response);      Log.i(t,"Response code:" + responseCode);      if (responseCode != HttpStatus.SC_CREATED && responseCode != HttpStatus.SC_ACCEPTED) {        if (responseCode == HttpStatus.SC_OK) {          outcome.mResults.put(id,fail + "Network login failure? Again?");        } else         if (responseCode == HttpStatus.SC_UNAUTHORIZED) {          Collect.getInstance().getCookieStore().clear();          outcome.mResults.put(id,fail + response.getStatusLine().getReasonPhrase() + " ("+ responseCode+ ") at "+ urlString);        } else {          outcome.mResults.put(id,fail + response.getStatusLine().getReasonPhrase() + " ("+ responseCode+ ") at "+ urlString);        }        cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMISSION_FAILED);        Collect.getInstance().getContentResolver().update(toUpdate,cv,null,null);        return true;      }    } catch (    Exception e) {      e.printStackTrace();      Log.e(t,e.toString());      String msg=e.getMessage();      if (msg == null) {        msg=e.toString();      }      outcome.mResults.put(id,fail + "Generic Exception: " + msg);      cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMISSION_FAILED);      Collect.getInstance().getContentResolver().update(toUpdate,cv,null,null);      return true;    }  }  outcome.mResults.put(id,Collect.getInstance().getString(R.string.success));  cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMITTED);  Collect.getInstance().getContentResolver().update(toUpdate,cv,null,null);  return true;}  }
class C{  public void init(InputStream is,OutputStream os){  _is=is;  _os=os;  _needsFlush=false;}  }
class C{  public static boolean isOctal(char ch){  return '0' <= ch && ch <= '7';}  }
class C{  private static List<PySubscriptionExpression> fillSubscriptions(PyFunction function){  List<PySubscriptionExpression> subscriptions=new ArrayList<PySubscriptionExpression>();  PyStatementList statementList=function.getStatementList();  Stack<PsiElement> stack=new Stack<PsiElement>();  PyParameter keywordContainer=getKeywordContainer(function);  if (keywordContainer != null) {    String keywordContainerName=keywordContainer.getName();    for (    PyStatement st : statementList.getStatements()) {      stack.push(st);      while (!stack.isEmpty()) {        PsiElement e=stack.pop();        if (e instanceof PySubscriptionExpression) {          if (((PySubscriptionExpression)e).getOperand().getText().equals(keywordContainerName)) {            subscriptions.add((PySubscriptionExpression)e);          }        } else {          for (          PsiElement psiElement : e.getChildren()) {            stack.push(psiElement);          }        }      }    }  }  return subscriptions;}  }
class C{  Item newNameTypeItem(final String name,final String desc){  key2.set(NAME_TYPE,name,desc,null);  Item result=get(key2);  if (result == null) {    put122(NAME_TYPE,newUTF8(name),newUTF8(desc));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  void pauseImpl(){  final Song currentSong=getCurrentSong();  if (currentSong != null) {    Log.d(TAG,"onSongPaused: Pausing...");    boolean wasBuffering=(mState == STATE_BUFFERING);    mState=STATE_PAUSING;    final ProviderIdentifier identifier=currentSong.getProvider();    mCommandsHandler.obtainMessage(CommandHandler.MSG_PAUSE_PROVIDER,identifier.serialize()).sendToTarget();    mNativeSink.setPaused(true);    if (wasBuffering) {      mState=STATE_PAUSED;      for (      IPlaybackCallback cb : mCallbacks) {        try {          cb.onPlaybackPause();        } catch (        RemoteException e) {          Log.e(TAG,"Cannot call playback callback for playback pause event",e);        }catch (        Exception e) {          Log.e(TAG,"BIG EXCEPTION DURING REMOTE PLAYBACK PAUSE: ",e);          Log.e(TAG,"Callback: " + cb);        }      }      Log.d(TAG,"onSongPaused: Paused (was buffering)...");      mNotification.setPlayPauseAction(true);      mRemoteMetadata.notifyPaused(getCurrentTrackPositionImpl());    }  }}  }
class C{  public void read(ExceptionlessInputStream in){  size=in.readInt();  if (size == 0)   vector=new double[defaultCapacity]; else {    vector=new double[size];    for (int i=0; i < size; ++i)     vector[i]=in.readDouble();  }}  }
class C{  public Chunk handleChunk(Chunk request){  if (false)   Log.v("ddm-thread","Handling " + name(request.type) + " chunk");  int type=request.type;  if (type == CHUNK_THEN) {    return handleTHEN(request);  } else   if (type == CHUNK_THST) {    return handleTHST(request);  } else   if (type == CHUNK_STKL) {    return handleSTKL(request);  } else {    throw new RuntimeException("Unknown packet " + ChunkHandler.name(type));  }}  }
class C{  public static String byteToHex(final byte src,final int srcPos,final String dstInit,final int dstPos,final int nHexs){  if (0 == nHexs) {    return dstInit;  }  if ((nHexs - 1) * 4 + srcPos >= 8) {    throw new IllegalArgumentException("(nHexs-1)*4+srcPos is greather or equal to than 8");  }  final StringBuilder sb=new StringBuilder(dstInit);  int shift=0;  int append=sb.length();  for (int i=0; i < nHexs; i++) {    shift=i * 4 + srcPos;    final int bits=0xF & (src >> shift);    if (dstPos + i == append) {      ++append;      sb.append(intToHexDigit(bits));    } else {      sb.setCharAt(dstPos + i,intToHexDigit(bits));    }  }  return sb.toString();}  }
class C{  private void inflateLayers(Resources r,XmlPullParser parser,AttributeSet attrs,Resources.Theme theme) throws XmlPullParserException, IOException {  final LayerState state=mLayerState;  final int innerDepth=parser.getDepth() + 1;  int type;  int depth;  while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && ((depth=parser.getDepth()) >= innerDepth || type != XmlPullParser.END_TAG)) {    if (type != XmlPullParser.START_TAG) {      continue;    }    if (depth > innerDepth || !parser.getName().equals("item")) {      continue;    }    final ChildDrawable layer=new ChildDrawable();    final TypedArray a=obtainAttributes(r,theme,attrs,R.styleable.LayerDrawableItem);    updateLayerFromTypedArray(layer,a);    a.recycle();    if (layer.mDrawable == null && (layer.mThemeAttrs == null || layer.mThemeAttrs[R.styleable.LayerDrawableItem_android_drawable] == 0)) {      while ((type=parser.next()) == XmlPullParser.TEXT) {      }      if (type != XmlPullParser.START_TAG) {        throw new XmlPullParserException(parser.getPositionDescription() + ": <item> tag requires a 'drawable' attribute or " + "child tag defining a drawable");      }      layer.mDrawable=LollipopDrawablesCompat.createFromXmlInner(r,parser,attrs,theme);    }    if (layer.mDrawable != null) {      state.mChildrenChangingConfigurations|=layer.mDrawable.getChangingConfigurations();      layer.mDrawable.setCallback(this);    }    addLayer(layer);  }}  }
class C{  public void unload(boolean includeOwnedEntities){  for (  Node node : getChildren()) {    if (node != getKey()) {      if (node instanceof ValueNode) {        ((ValueNode)node).setValueNoEvent(NotLoaded.VALUE);      } else       if (node instanceof RefNode) {        if (includeOwnedEntities && node.getNodeType().isOwns()) {          RefNode refNode=(RefNode)node;          Entity reffedEntity=refNode.getReference();          reffedEntity.unload(includeOwnedEntities);          refNode.setReference(null);        }      } else       if (node instanceof ToManyNode) {        if (includeOwnedEntities && node.getNodeType().isOwns()) {          ToManyNode toMany=(ToManyNode)node;          for (          Entity e : toMany.getList()) {            e.unload(includeOwnedEntities);          }          toMany.unloadAndClear();        }      }    }  }  setEntityState(EntityState.NOTLOADED);  clear();}  }
class C{  public void remove(String key){  assert key != null;synchronized (mux) {    map.remove(key);  }}  }
class C{  public AmericanExercise(final Date earliestDate,final Date latestDate,final boolean payoffAtExpiry){  super(Exercise.Type.American,payoffAtExpiry);  QL.require(earliestDate.le(latestDate),"earliest > latest exercise date");  super.dates.add(earliestDate.clone());  super.dates.add(latestDate.clone());}  }
class C{  @Override public boolean isResponsible(Class<?> clazz){  return true;}  }
class C{  public <T>Map<String,T> readAllConfigs(String configKind,String configKey) throws IOException, ClassNotFoundException {  List<Configuration> configsList=coordinator.queryAllConfiguration(configKind);  Map<String,T> returnedObjects=new HashMap<String,T>();  if (CollectionUtils.isEmpty(configsList)) {    log.debug("No config of kind " + configKind + " found");    return returnedObjects;  }  for (  Configuration config : configsList) {    String serializedConfig=config.getConfig(configKey);    if (serializedConfig != null) {      @SuppressWarnings("unchecked") T deserialize=(T)SerializerUtils.deserialize(serializedConfig);      returnedObjects.put(config.getId(),deserialize);    }  }  return returnedObjects;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:14.700 -0400",hash_original_method="A2516B3812C963387C40C18723815185",hash_generated_method="D7D63D77D784D0605D795F5ECDE2F841") private E dequeue(){  int n=size - 1;  if (n < 0)   return null; else {    Object[] array=queue;    E result=(E)array[0];    E x=(E)array[n];    array[n]=null;    Comparator<? super E> cmp=comparator;    if (cmp == null)     siftDownComparable(0,x,array,n); else     siftDownUsingComparator(0,x,array,n,cmp);    size=n;    return result;  }}  }
class C{  private boolean isRPJournalVolume(BlockObject bo){  boolean isRPJournal=false;  if (bo != null && (bo instanceof Volume)) {    Volume volume=(Volume)bo;    if (volume.checkForRp() && NullColumnValueGetter.isNotNullValue(volume.getPersonality()) && volume.getPersonality().equals(PersonalityTypes.METADATA.toString())) {      _log.info(String.format("Volume [%s] is a RP Journal.",volume.getLabel()));      isRPJournal=true;    }  }  return isRPJournal;}  }
class C{  public boolean isClosed(){  return closed;}  }
class C{  public static CompoundSelect unionAll(Query query){  return new CompoundSelect(CompoundSelectOperator.UNION_ALL,query);}  }
class C{  public void updateClob(String columnLabel,Reader reader,long length) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.featnotsupp").toString());}  }
class C{  public void pushNotInOther(SanityDataTable other,ObjectReferenceDeque deque){  Address entry=getFirst();  while (!entry.isZero()) {    Word key=SimpleHashtable.getKey(entry);    if (!other.contains(key)) {      deque.push(key.toAddress().toObjectReference());    }    entry=getNext(entry);  }}  }
class C{  @Override public void drag(int from,int to){}  }
class C{  public ConsulTopologyFraction url(String url) throws MalformedURLException {  this.url=new URL(url);  return this;}  }
class C{  public SimpleMqttConnectionRunnable(final BaseScriptManager scriptManager,final SimpleMqttConnection connection,final DaemonMqttConnectionDetails connectionSettings){  this.connection=connection;  this.connectionSettings=connectionSettings;  this.scriptManager=scriptManager;}  }
class C{  public boolean containsKey(Object o){synchronized (children) {    return children.containsKey(o);  }}  }
class C{  public void testInputWaitInterruption2() throws Exception {  File f=this.initFile("testInputWaitInterruption2");  FileOutputStream fos=new FileOutputStream(f);  DataOutputStream dos=new DataOutputStream(fos);  int written=0;  long read=0;  long interrupts=0;  logger.info("Starting random read thread interruptions");  for (int i=1; i <= 500; i++) {    dos.writeShort(i);    dos.flush();    written+=2;    CountDownLatch latch=new CountDownLatch(1);    SampleInputReader reader=new SampleInputReader(f,3,latch);    Thread readerThread=new Thread(reader);    readerThread.start();    try {      assertTrue("Waiting for reader thread to become ready",latch.await(5,TimeUnit.SECONDS));      long sleepMillis=(long)(Math.random() * 10.0);      Thread.sleep(sleepMillis);      readerThread.interrupt();      readerThread.join(25);      reader.assertOK("[run: " + i + "]");      interrupts=interrupts + reader.getInterrupts();      read+=reader.getBytesRead();      if (i % 50 == 0) {        logger.info(String.format("Iteration: %d..., total written: %d, total read: %d, total interrupts: %d",i,written,read,interrupts));      }    }  finally {      reader.cancel();      readerThread.join(1000);    }  }  dos.close();  assertTrue("Interrupts received must be greater than 0",interrupts > 0);  assertTrue("Bytes read must be greater than 0",read > 0);}  }
class C{  protected DelegatingMethodDeclarationImpl(){  super();}  }
class C{  public void logKill(final Entity killed,final Entity killer){  DBTransaction transaction=TransactionPool.get().beginWork();  try {    logKill(transaction,killed,killer);    TransactionPool.get().commit(transaction);  } catch (  SQLException e) {    logger.error(e,e);    TransactionPool.get().rollback(transaction);  }}  }
class C{  public boolean drawImage(Image img,int x,int y,int width,int height,ImageObserver observer){  Element imageElement=getGenericImageHandler().createElement(getGeneratorContext());  AffineTransform xform=getGenericImageHandler().handleImage(img,imageElement,x,y,width,height,getGeneratorContext());  if (xform == null) {    domGroupManager.addElement(imageElement);  } else {    AffineTransform inverseTransform=null;    try {      inverseTransform=xform.createInverse();    } catch (    NoninvertibleTransformException e) {      throw new SVGGraphics2DRuntimeException(ERR_UNEXPECTED);    }    gc.transform(xform);    domGroupManager.addElement(imageElement);    gc.transform(inverseTransform);  }  return true;}  }
class C{  protected PerformanceVector computeCurrentPerformance() throws OperatorException {  for (int j=0; j < operators.length; j++) {    operators[j].getParameters().setParameter(parameters[j],values[j][currentIndex[j]]);    getLogger().fine(operators[j] + "." + parameters[j]+ " = "+ values[j][currentIndex[j]]);  }  return super.getPerformanceVector();}  }
class C{  @Override public void windowOpened(WindowEvent e){}  }
class C{  public static String floor(String[] params) throws FBSQLParseException {  if (params.length != 1)   throw new FBSQLParseException("Incorrect number of " + "parameters of function floor : " + params.length);  return "floor(" + params[0] + ")";}  }
class C{  public static double[] randomUniform(int m,double min,double max){  double[] A=new double[m];  for (int i=0; i < A.length; i++)   A[i]=Random.uniform(min,max);  return A;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:11.965 -0500",hash_original_method="1E84D06F522FAB67F7B7209EA462145E",hash_generated_method="2132BBACB0AA83CF35658A046EFF1076") public HttpEntity receiveResponseEntity(final Headers headers){  assertOpen();  BasicHttpEntity entity=new BasicHttpEntity();  long len=determineLength(headers);  if (len == ContentLengthStrategy.CHUNKED) {    entity.setChunked(true);    entity.setContentLength(-1);    entity.setContent(new ChunkedInputStream(inbuffer));  } else   if (len == ContentLengthStrategy.IDENTITY) {    entity.setChunked(false);    entity.setContentLength(-1);    entity.setContent(new IdentityInputStream(inbuffer));  } else {    entity.setChunked(false);    entity.setContentLength(len);    entity.setContent(new ContentLengthInputStream(inbuffer,len));  }  String contentTypeHeader=headers.getContentType();  if (contentTypeHeader != null) {    entity.setContentType(contentTypeHeader);  }  String contentEncodingHeader=headers.getContentEncoding();  if (contentEncodingHeader != null) {    entity.setContentEncoding(contentEncodingHeader);  }  return entity;}  }
class C{  public Object[] calculateIndex(CompositeData value){  checkValueType(value);  return internalCalculateIndex(value).toArray();}  }
class C{  public LoginFrame(SpreadsheetService service,String username,String password){  this.service=service;  initializeGui();  usernameField.setText(username);  passwordField.setText(password);}  }
class C{  protected void checkJAXPVersion(Hashtable h){  if (null == h)   h=new Hashtable();  final Class noArgs[]=new Class[0];  Class clazz=null;  try {    final String JAXP1_CLASS="javax.xml.parsers.DocumentBuilder";    final String JAXP11_METHOD="getDOMImplementation";    clazz=ObjectFactory.findProviderClass(JAXP1_CLASS,ObjectFactory.findClassLoader(),true);    Method method=clazz.getMethod(JAXP11_METHOD,noArgs);    h.put(VERSION + "JAXP","1.1 or higher");  } catch (  Exception e) {    if (null != clazz) {      h.put(ERROR + VERSION + "JAXP","1.0.1");      h.put(ERROR,ERROR_FOUND);    } else {      h.put(ERROR + VERSION + "JAXP",CLASS_NOTPRESENT);      h.put(ERROR,ERROR_FOUND);    }  }}  }
class C{  public DateIterator() throws AdeException {  m_curPeriodStart=new Date(m_firstPeriodStart.getTime());}  }
class C{  @SuppressWarnings("unchecked") private void handleClientResponse(TcpClientFuture fut,GridClientResponse resp){  if (resp.sessionToken() != null)   sesTok=resp.sessionToken();  GridClientMessage src=fut.pendingMessage();switch (fut.retryState()) {case TcpClientFuture.STATE_INITIAL:{      if (resp.successStatus() == GridClientResponse.STATUS_AUTH_FAILURE) {        if (credentials() == null) {          fut.onDone(new GridClientAuthenticationException("Authentication failed on server " + "(client has no credentials) [clientId=" + clientId + ", srvAddr="+ serverAddress()+ ", errMsg="+ resp.errorMessage()+ ']'));          return;        }        fut.retryState(TcpClientFuture.STATE_AUTH_RETRY);        GridClientAuthenticationRequest req=buildAuthRequest();        req.requestId(resp.requestId());        ses.send(req);        return;      }      break;    }case TcpClientFuture.STATE_AUTH_RETRY:{    if (resp.successStatus() == GridClientResponse.STATUS_SUCCESS) {      fut.retryState(TcpClientFuture.STATE_REQUEST_RETRY);      src.sessionToken(sesTok);      ses.send(src);      return;    }    break;  }}removePending(resp.requestId());if (resp.successStatus() == GridClientResponse.STATUS_AUTH_FAILURE) fut.onDone(new GridClientAuthenticationException("Client authentication failed [clientId=" + clientId + ", srvAddr="+ serverAddress()+ ", errMsg="+ resp.errorMessage()+ ']')); else if (resp.errorMessage() != null) fut.onDone(new GridClientException(resp.errorMessage())); else fut.onDone(resp.result());}  }
class C{  public CompressedImageHDU preserveNulls(String compressionAlgorithm){  long nullValue=getHeader().getLongValue(BLANK,Long.MIN_VALUE);  getData().preserveNulls(nullValue,compressionAlgorithm);  return this;}  }
class C{  private void method(Detail detail) throws Exception {  Class type=detail.getType();  DefaultType access=detail.getOverride();  ContactList list=support.getMethods(type,access);  for (  Contact contact : list) {    Annotation label=contact.getAnnotation();    if (label != null) {      builder.process(contact,label);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:03.024 -0500",hash_original_method="33174949058EF1059E013904B6AFFD90",hash_generated_method="DFF08E819BACBBBFC40594983760EDE8") public TFTPAckPacket(InetAddress destination,int port,int blockNumber){  super(TFTPPacket.ACKNOWLEDGEMENT,destination,port);  _blockNumber=blockNumber;}  }
class C{  public static synchronized void stopDiscoveryService(){  if (controller != null) {    controller.stop();    controller=null;  }}  }
class C{  public Anonymous_parameter_1_ createAnonymous_parameter_1_(){  Anonymous_parameter_1_Impl anonymous_parameter_1_=new Anonymous_parameter_1_Impl();  return anonymous_parameter_1_;}  }
class C{  private final Set<Class<? extends Annotation>> loadAnnotationClasses(final Set<String> fullyQualifiedAnnoNames){  Set<Class<? extends Annotation>> loadedClasses=new LinkedHashSet<Class<? extends Annotation>>();  if (fullyQualifiedAnnoNames != null && !fullyQualifiedAnnoNames.isEmpty()) {    for (    String fullyQualifiedAnnoName : fullyQualifiedAnnoNames) {      Class<? extends Annotation> annoClass=loadAnnotationClass(fullyQualifiedAnnoName);      if (annoClass != null) {        loadedClasses.add(annoClass);      }    }  }  return loadedClasses;}  }
class C{  public GF2nElement increase(){  GF2nONBElement result=new GF2nONBElement(this);  result.increaseThis();  return result;}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  NewsChannelTableDao.createTable(db,ifNotExists);}  }
class C{  public int valueInt(){  return rawData[0];}  }
class C{  public void loadDefaults(){  scraperMetadataConfig=Globals.settings.getMovieScraperMetadataConfig();  metadataScraper=MovieList.getInstance().getDefaultMediaScraper();  artworkScrapers.addAll(MovieList.getInstance().getDefaultArtworkScrapers());  trailerScrapers.addAll(MovieList.getInstance().getDefaultTrailerScrapers());}  }
class C{  private void handleMethodReturnNode(CCFGNode node,Stack<MethodCall> callStack){  if (callStack.peek().isInitialMethodCall())   throw new IllegalStateException("found method return but had no more method calls on stack");  CCFGMethodReturnNode retrn=(CCFGMethodReturnNode)node;  if (!callStack.peek().isMethodCallFor(retrn.getCallInstruction()))   throw new IllegalStateException("visiting MethodReturnNode even though lastly visited MethodCallNode was from a different method");  callStack.pop();}  }
class C{  public BackgroundDesktopPane(String image){  super();  try {    m_Background=Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource(image));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public RTADefaultInputMap(){  super();  int defaultModifier=getDefaultModifier();  int shift=InputEvent.SHIFT_MASK;  put(KeyStroke.getKeyStroke(KeyEvent.VK_HOME,0),DefaultEditorKit.beginLineAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_HOME,shift),DefaultEditorKit.selectionBeginLineAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_HOME,defaultModifier),DefaultEditorKit.beginAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_HOME,defaultModifier | shift),DefaultEditorKit.selectionBeginAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_END,0),DefaultEditorKit.endLineAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_END,shift),DefaultEditorKit.selectionEndLineAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_END,defaultModifier),DefaultEditorKit.endAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_END,defaultModifier | shift),DefaultEditorKit.selectionEndAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,0),DefaultEditorKit.backwardAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,shift),DefaultEditorKit.selectionBackwardAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,defaultModifier),DefaultEditorKit.previousWordAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,defaultModifier | shift),DefaultEditorKit.selectionPreviousWordAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,0),DefaultEditorKit.downAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,shift),DefaultEditorKit.selectionDownAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,defaultModifier),RTextAreaEditorKit.rtaScrollDownAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,defaultModifier | shift),RTextAreaEditorKit.rtaLineDownAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,0),DefaultEditorKit.forwardAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,shift),DefaultEditorKit.selectionForwardAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,defaultModifier),DefaultEditorKit.nextWordAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,defaultModifier | shift),DefaultEditorKit.selectionNextWordAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_UP,0),DefaultEditorKit.upAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_UP,shift),DefaultEditorKit.selectionUpAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_UP,defaultModifier),RTextAreaEditorKit.rtaScrollUpAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_UP,defaultModifier | shift),RTextAreaEditorKit.rtaLineUpAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_UP,0),DefaultEditorKit.pageUpAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_UP,shift),RTextAreaEditorKit.rtaSelectionPageUpAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_UP,defaultModifier | shift),RTextAreaEditorKit.rtaSelectionPageLeftAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_DOWN,0),DefaultEditorKit.pageDownAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_DOWN,shift),RTextAreaEditorKit.rtaSelectionPageDownAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_DOWN,defaultModifier | shift),RTextAreaEditorKit.rtaSelectionPageRightAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_CUT,0),DefaultEditorKit.cutAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_COPY,0),DefaultEditorKit.copyAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_PASTE,0),DefaultEditorKit.pasteAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_X,defaultModifier),DefaultEditorKit.cutAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_C,defaultModifier),DefaultEditorKit.copyAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_V,defaultModifier),DefaultEditorKit.pasteAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,0),DefaultEditorKit.deleteNextCharAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,shift),DefaultEditorKit.cutAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,defaultModifier),RTextAreaEditorKit.rtaDeleteRestOfLineAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_INSERT,0),RTextAreaEditorKit.rtaToggleTextModeAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_INSERT,shift),DefaultEditorKit.pasteAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_INSERT,defaultModifier),DefaultEditorKit.copyAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_A,defaultModifier),DefaultEditorKit.selectAllAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_D,defaultModifier),RTextAreaEditorKit.rtaDeleteLineAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_J,defaultModifier),RTextAreaEditorKit.rtaJoinLinesAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE,shift),DefaultEditorKit.deletePrevCharAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE,defaultModifier),RTextAreaEditorKit.rtaDeletePrevWordAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB,0),DefaultEditorKit.insertTabAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),DefaultEditorKit.insertBreakAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,shift),DefaultEditorKit.insertBreakAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,defaultModifier),RTextAreaEditorKit.rtaDumbCompleteWordAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_Z,defaultModifier),RTextAreaEditorKit.rtaUndoAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_Y,defaultModifier),RTextAreaEditorKit.rtaRedoAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_F2,0),RTextAreaEditorKit.rtaNextBookmarkAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_F2,shift),RTextAreaEditorKit.rtaPrevBookmarkAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_F2,defaultModifier),RTextAreaEditorKit.rtaToggleBookmarkAction);}  }
class C{  public Vector2f normalize(){  float invLength=(float)(1.0 / Math.sqrt(x * x + y * y));  x*=invLength;  y*=invLength;  return this;}  }
class C{  public WebSecurityBundle(){  this(WebSecurityConfiguration.builder().build());}  }
class C{  private void cmd_EFT(){  if (fPaymentRule.getSelectedItem() == null)   return;  String PaymentRule=fPaymentRule.getSelectedItem().toValueNamePair().getValue();  log.info(PaymentRule);  if (!getChecks(PaymentRule))   return;  dispose();}  }
class C{  public GVector(ReadonlyVec3D v){  values=new double[]{v.x(),v.y(),v.z()};  length=3;}  }
class C{  public boolean isLastFrag(){  return lastFrag;}  }
class C{  protected static ModbusResponse writeRequest(int functionCode,int register,int... values){  ModbusTCPTransport transport=null;  ModbusTCPTransaction trans;  try {    Socket socket=new Socket(LOCALHOST,PORT);    transport=new ModbusTCPTransport(socket);    ModbusRequest req=null;switch (functionCode) {case Modbus.WRITE_COIL:      req=new WriteCoilRequest(register,values[0] != 0);    break;case Modbus.WRITE_SINGLE_REGISTER:  req=new WriteSingleRegisterRequest(register,new SimpleRegister(values[0]));break;case Modbus.WRITE_MULTIPLE_REGISTERS:Register[] regs=new Register[values.length];for (int i=0; i < values.length; i++) {regs[i]=new SimpleRegister(values[i]);}req=new WriteMultipleRegistersRequest(register,regs);break;case Modbus.WRITE_MULTIPLE_COILS:BitVector bitVector=new BitVector(values.length);for (int i=0; i < values.length; i++) {bitVector.setBit(i,values[i] != 0);}req=new WriteMultipleCoilsRequest(register,bitVector);break;default :fail(String.format("Request type %d is not supported by the test harness",functionCode));}req.setUnitID(UNIT_ID);trans=(ModbusTCPTransaction)transport.createTransaction();trans.setRequest(req);trans.setReconnecting(true);trans.execute();return trans.getResponse();} catch (Exception e) {logger.debug(e.getMessage());} finally {if (transport != null) {try {transport.close();} catch (IOException e) {logger.error(e.getMessage());}}}return null;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  CaptureDevice capDev=getCapDev(stack);  return capDev == null ? null : capDev.getDefaultQuality();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.827 -0400",hash_original_method="A5AB6B3C30C973DC88BBE2862158661A",hash_generated_method="7D1A618D51E7BC8B08FEFF0119D08667") private void onPanDeviceConnectionResult(String path,int result){  log("onPanDeviceConnectionResult " + path + " "+ result);  if (result != BluetoothPan.PAN_OPERATION_SUCCESS) {    String address=mBluetoothService.getAddressFromObjectPath(path);    if (address == null)     return;    boolean connected=false;    BluetoothDevice device=mAdapter.getRemoteDevice(address);    int state=mBluetoothService.getPanDeviceConnectionState(device);    if (state == BluetoothPan.STATE_CONNECTING) {      if (result == BluetoothPan.PAN_CONNECT_FAILED_ALREADY_CONNECTED) {        connected=true;      } else {        connected=false;      }    } else     if (state == BluetoothPan.STATE_DISCONNECTING) {      if (result == BluetoothPan.PAN_DISCONNECT_FAILED_NOT_CONNECTED) {        connected=false;      } else {        connected=true;      }    } else {      Log.e(TAG,"Error onPanDeviceConnectionResult. State is: " + state + " result: "+ result);    }    int newState=connected ? BluetoothPan.STATE_CONNECTED : BluetoothPan.STATE_DISCONNECTED;    mBluetoothService.handlePanDeviceStateChange(device,newState,BluetoothPan.LOCAL_PANU_ROLE);  }}  }
class C{  public static SelectionResult ensureSelectionResult(final Database db){  List<SelectionResult> selections=ResultUtil.filterResults(db.getHierarchy(),db,SelectionResult.class);  if (!selections.isEmpty()) {    return selections.get(0);  }  SelectionResult sel=new SelectionResult();  addChildResult(db,sel);  return sel;}  }
class C{  public Map<String,Object> convertEntity(Entity entity){  Map<String,Object> map=Maps.newHashMap();  convertFeatures(map,entity);  if (outputHistory && documentHistory != null) {    Collection<HistoryEvent> events=documentHistory.getHistory(entity.getInternalId());    convertHistory(map,events,entity.getInternalId());  }  putIfExists(map,fields.getExternalId(),entity.getExternalId());  return map;}  }
class C{  public double distance(final Int2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  public boolean command(String channel,String command,String parameter){  command=StringUtil.toLowerCase(command);  if (command.equals("quit")) {    c.quit();  } else   if (command.equals("server")) {    commandServer(parameter);  } else   if (command.equals("reconnect")) {    commandReconnect();  } else   if (command.equals("connection")) {    g.printLine(c.getConnectionInfo());  } else   if (command.equals("join")) {    commandJoinChannel(parameter);  } else   if (command.equals("part") || command.equals("close")) {    commandPartChannel(channel);  } else   if (command.equals("raw")) {    if (parameter != null) {      c.sendRaw(parameter);    }  } else   if (command.equals("me")) {    commandActionMessage(channel,parameter);  } else   if (command.equals("msg")) {    commandCustomMessage(parameter);  } else   if (command.equals("w")) {    w.whisperCommand(parameter,false);  } else   if (command.equals("changetoken")) {    g.changeToken(parameter);  } else   if (command.equals("fixserver")) {    commandFixServer(channel);  } else   if (command.equals("dir")) {    g.printSystem("Settings directory: '" + Chatty.getUserDataDirectory() + "'");  } else   if (command.equals("wdir")) {    g.printSystem("Working directory: '" + Chatty.getWorkingDirectory() + "'");  } else   if (command.equals("opendir")) {    MiscUtil.openFolder(new File(Chatty.getUserDataDirectory()),g);  } else   if (command.equals("openwdir")) {    MiscUtil.openFolder(new File(Chatty.getWorkingDirectory()),g);  } else   if (command.equals("openbackupdir")) {    MiscUtil.openFolder(new File(Chatty.getBackupDirectory()),g);  } else   if (command.equals("copy")) {    MiscUtil.copyToClipboard(parameter);  } else   if (command.equals("releaseinfo")) {    g.openReleaseInfo();  } else   if (command.equals("echo")) {    g.printLine(parameter);  } else   if (command.equals("uptime")) {    g.printSystem("Chatty has been running for " + Chatty.uptime());  } else   if (command.equals("appinfo")) {    g.printSystem(LogUtil.getMemoryUsage());  } else   if (command.equals("set")) {    g.printSystem(settings.setTextual(parameter));  } else   if (command.equals("get")) {    g.printSystem(settings.getTextual(parameter));  } else   if (command.equals("clearsetting")) {    g.printSystem(settings.clearTextual(parameter));  } else   if (command.equals("reset")) {    g.printSystem(settings.resetTextual(parameter));  } else   if (command.equals("add")) {    g.printSystem(settings.addTextual(parameter));  } else   if (command.equals("remove")) {    g.printSystem(settings.removeTextual(parameter));  } else   if (command.equals("setcolor")) {    if (parameter != null) {      g.setColor(parameter);    }  } else   if (command.equals("setname")) {    g.printLine(customNames.commandSetCustomName(parameter));  } else   if (command.equals("resetname")) {    g.printLine(customNames.commandResetCustomname(parameter));  } else   if (command.equals("customcompletion")) {    commandCustomCompletion(parameter);  } else   if (command.equals("users") || command.equals("ab")) {    g.printSystem("[Addressbook] " + addressbook.command(parameter != null ? parameter : ""));  } else   if (command.equals("abimport")) {    g.printSystem("[Addressbook] Importing from file..");    addressbook.importFromFile();  } else   if (command.equals("ignore")) {    commandSetIgnored(parameter,null,true);  } else   if (command.equals("unignore")) {    commandSetIgnored(parameter,null,false);  } else   if (command.equals("ignorechat")) {    commandSetIgnored(parameter,"chat",true);  } else   if (command.equals("unignorechat")) {    commandSetIgnored(parameter,"chat",false);  } else   if (command.equals("ignorewhisper")) {    commandSetIgnored(parameter,"whisper",true);  } else   if (command.equals("unignorewhisper")) {    commandSetIgnored(parameter,"whisper",false);  } else   if (command.equals("myemotes")) {    commandMyEmotes();  } else   if (command.equals("emoteinfo")) {    g.printSystem(g.emoticons.getEmoteInfo(parameter));  } else   if (command.equals("ffz")) {    if (parameter != null && parameter.startsWith("following")) {      commandFFZFollowing(channel,parameter);    } else {      commandFFZ(channel);    }  } else   if (command.equals("ffzglobal")) {    commandFFZ(null);  } else   if (command.equals("ffzws")) {    g.printSystem("[FFZ-WS] Status: " + frankerFaceZ.getWsStatus());  } else   if (command.equals("pubsubstatus")) {    g.printSystem("[PubSub] Status: " + pubsub.getStatus());  } else   if (command.equals("refresh")) {    commandRefresh(channel,parameter);  } else   if (command.equals("clearimagecache")) {    g.printLine("Clearing image cache (this can take a few seconds)");    ImageCache.clearCache(null);    g.printLine("Image cache cleared.");  } else   if (command.equals("clearemotecache")) {    ImageCache.clearCache("emote_" + parameter);    g.printLine("Emoticon image cache for type " + parameter + " cleared.");  } else   if (command.equals("follow")) {    commandFollow(channel,parameter);  } else   if (command.equals("unfollow")) {    commandUnfollow(channel,parameter);  } else   if (command.equals("addstreamhighlight")) {    commandAddStreamHighlight(channel,parameter);  } else   if (command.equals("openstreamhighlights")) {    commandOpenStreamHighlights(channel);  } else   if (command.equals("testnotification")) {    g.showTestNotification(parameter);  } else   if (command.equals("clearchat")) {    g.clearChat();  } else   if (command.equals("resortuserlist")) {    g.resortUsers(channel);  } else   if (command.equals("proc")) {    g.printSystem("[Proc] " + ProcessManager.command(parameter));  } else   if (c.command(channel,command,parameter)) {  } else   if (g.commandGui(command,parameter)) {  } else   if (customCommands.containsCommand(command)) {    customCommand(channel,command,parameter);  } else   if (Chatty.DEBUG || settings.getBoolean("debugCommands")) {    testCommands(channel,command,parameter);  } else {    g.printLine("Unknown command: " + command + " (Remember you can also "+ "enter Twitch Chat Commands with a point in front: \".mods\")");    return false;  }  return true;}  }
class C{  public Notification(String title,String content,ProjectConfigDto project,NotificationListener listener){  id=Document.get().createUniqueId();  observers=new ArrayList<>();  this.project=project;  this.title=title;  this.content=content;  this.listener=listener;  setUnreadState();}  }
class C{  private void hideClosedCaptioning(){  try {    TextView subTitlesTv=(TextView)getActivity().findViewById(R.id.txtSubtitles_tv);    if (subTitlesTv != null) {      subTitlesTv.setVisibility(View.GONE);    }  } catch (  Exception e) {    logger.error(e);  }}  }
class C{  public void prepareSession(MediaInput player,String remoteAddress,int remotePort,RtpStreamListener rtpStreamListener) throws RtpException {  try {    inputStream=new MediaCaptureStream(format,player);    inputStream.open();    outputStream=new RtpOutputStream(remoteAddress,remotePort,localRtpPort,RtpOutputStream.RTCP_SOCKET_TIMEOUT);    outputStream.addRtpStreamListener(rtpStreamListener);    outputStream.open();    Codec[] codecChain=MediaRegistry.generateEncodingCodecChain(format.getCodec());    processor=new Processor(inputStream,outputStream,codecChain);  } catch (  Exception e) {    throw new RtpException("Can't prepare resources");  }}  }
class C{  private static void writeMarshalArguments(IndentingWriter p,String streamName,Type[] types,String[] names) throws IOException {  if (types.length != names.length) {    throw new Error("parameter type and name arrays different sizes");  }  for (int i=0; i < types.length; i++) {    writeMarshalArgument(p,streamName,types[i],names[i]);    p.pln(";");  }}  }
class C{  public Axis prune(Space prefix) throws ScopeException {  Space pruned=parent.prune(prefix);  return pruned.A(dimension);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public ControllerProfile(){}  }
class C{  protected Image createImage(Component c,int w,int h,GraphicsConfiguration config,Object[] args){  if (config == null) {    return new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);  }  return config.createCompatibleImage(w,h,Transparency.TRANSLUCENT);}  }
class C{  public void huh(Link link) throws IOException {  link.start(Link.HUH_HEADER);  link.end(Link.END_TOTAL);}  }
class C{  protected void mustHaveValidSite() throws Die {  if (!Files.exists(sitePath.resolve("etc").resolve("gerrit.config"))) {    throw die("not a Gerrit site: '" + getSitePath() + "'\n"+ "Perhaps you need to run init first?");  }}  }
class C{  public void maxy(int parseInt){  maxy=parseInt;}  }
class C{  public void removePinCode(Context context){  encryptionProvider.removePinCode(context);}  }
class C{  private void verifyQuotaValues(Long softQuota,Long hardQuota,String bucketName) throws APIException {  if (softQuota < 0 || hardQuota < 0 || softQuota > hardQuota) {    throw APIException.badRequests.invalidQuotaRequestForObjectStorage(bucketName);  }}  }
class C{  public void onPreviewFrame(byte[] data,Camera camera){  if (!mStarted) {    return;  }  mFrameBuffer.setData(data);}  }
class C{  public static String buildScenario(String url){  if (url == null) {    return null;  }  StringBuilder strb=new StringBuilder();  strb.append(buildHeader());  strb.append(buildGetStep(url));  strb.append(buildFooter());  return strb.toString();}  }
class C{  @Override public void removeHandshakeCompletedListener(HandshakeCompletedListener listener){  if (listener == null) {    throw new IllegalArgumentException("Provided listener is null");  }  if (listeners == null) {    throw new IllegalArgumentException("Provided listener is not registered");  }  if (!listeners.remove(listener)) {    throw new IllegalArgumentException("Provided listener is not registered");  }}  }
class C{  public boolean equivalentTo(Fitness _fitness){  return fitness == ((SPEA2MultiObjectiveFitness)_fitness).fitness;}  }
class C{  public boolean readBoolean() throws IOException, EOFException {  return (this.readByte() != 0);}  }
class C{  public int compareSwappedTo(IntDoublePair other){  int fdiff=Double.compare(this.second,other.second);  if (fdiff != 0) {    return fdiff;  }  return this.first - other.first;}  }
class C{  public void endEntity(String name) throws SAXException {  if (m_firstTagNotEmitted) {    emitFirstTag();  }  m_handler.endEntity(name);}  }
class C{  public void addAssignmentForDuplicate(Column column,Expression expression){  if (duplicateKeyAssignmentMap == null) {    duplicateKeyAssignmentMap=New.hashMap();  }  if (duplicateKeyAssignmentMap.containsKey(column)) {    throw DbException.get(ErrorCode.DUPLICATE_COLUMN_NAME_1,column.getName());  }  duplicateKeyAssignmentMap.put(column,expression);}  }
class C{  public GeneralPath(int rule,int initialCapacity){  super(rule,initialCapacity);}  }
class C{  public static boolean initializeUnescapePattern(){  if (paternIsInitialized == true) {    return true;  }synchronized (unescapeInitLockObject) {    if (paternIsInitialized == true) {      return true;    }    try {      unescapePattern=Pattern.compile(unicodeUnescapeMatchExpression);    } catch (    PatternSyntaxException pse) {      System.err.println("Imposible error:  " + "static final regular expression pattern " + "failed to compile.  Exception:  "+ pse.toString());      return false;    }    paternIsInitialized=true;  }  return true;}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  log.info("New=" + newRecord + ", Success="+ success+ " ***");  return success;}  }
class C{  public void executeASync(ProcessInfo pi){  log.config("-");}  }
class C{  public static String quote(char ch){switch (ch) {case '\b':    return "\\b";case '\f':  return "\\f";case '\n':return "\\n";case '\r':return "\\r";case '\t':return "\\t";case '\'':return "\\'";case '\"':return "\\\"";case '\\':return "\\\\";default :return (isPrintableAscii(ch)) ? String.valueOf(ch) : String.format("\\u%04x",(int)ch);}}  }
class C{  @Override public String format(Date date){  return format(date,"medium");}  }
class C{  @Override protected void register(ConfigurationCapabilityFactory configurationCapabilityFactory){  configurationCapabilityFactory.registerConfigurationCapability("websphere85x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,WebSphere85xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("websphere85x",ContainerType.INSTALLED,ConfigurationType.EXISTING,WebSphere85xExistingLocalConfigurationCapability.class);}  }
class C{  public boolean isHasPreprocessing(){  return hasPreprocessing;}  }
class C{  public final static int convertToUTF8Bytes(int unicodeScalar,byte[] outputBytes,int offset,int maxLength){  int dst=offset;  int end=offset + maxLength;switch (getUTF8ByteCount(unicodeScalar)) {case 1:    if (dst >= end)     throw new ArrayIndexOutOfBoundsException();  outputBytes[dst++]=(byte)(unicodeScalar & 0xff);break;case 2:if (dst + 1 >= end) throw new ArrayIndexOutOfBoundsException();outputBytes[dst++]=getByte1Of2(unicodeScalar);outputBytes[dst++]=getByte2Of2(unicodeScalar);break;case 3:if (dst + 2 >= end) throw new ArrayIndexOutOfBoundsException();outputBytes[dst++]=getByte1Of3(unicodeScalar);outputBytes[dst++]=getByte2Of3(unicodeScalar);outputBytes[dst++]=getByte3Of3(unicodeScalar);break;case 4:if (dst + 3 >= end) throw new ArrayIndexOutOfBoundsException();outputBytes[dst++]=getByte1Of4(unicodeScalar);outputBytes[dst++]=getByte2Of4(unicodeScalar);outputBytes[dst++]=getByte3Of4(unicodeScalar);outputBytes[dst++]=getByte4Of4(unicodeScalar);break;}return dst - offset;}  }
class C{  public void reconnect() throws SQLException {  try {    listener.reconnect();  } catch (  QueryException e) {    ExceptionMapper.throwException(e,null,null);  }}  }
class C{  public static String createAudioRaw(int rate){  return AUDIO_RAW + "; rate=" + rate;}  }
class C{  protected void assertReadMode() throws ReplicatorException, InterruptedException {  if (mode != AccessMode.read) {    close();    openRead();  }}  }
class C{  public boolean hasAmount(){  return getAmount() != null;}  }
class C{  public boolean isProcessForm(){  return processForm;}  }
class C{  public int size(){  return this.map.size();}  }
class C{  private TreeElement findDepthFirst(TreeElement parent,String name){  int len=parent.getNumChildren();  for (int i=0; i < len; ++i) {    TreeElement e=parent.getChildAt(i);    if (name.equals(e.getName())) {      return e;    } else     if (e.getNumChildren() != 0) {      TreeElement v=findDepthFirst(e,name);      if (v != null)       return v;    }  }  return null;}  }
class C{  public static List<Object> runHqlQuery(Session session,String queryString,@Nullable Object[] parameters,@Nullable Integer firstResult,@Nullable Integer maxResults){  Query query=session.createQuery(queryString);  if (parameters != null) {    for (int i=0; i < parameters.length; i++) {      query.setParameter(String.valueOf(i + 1),parameters[i]);    }  }  if (firstResult != null) {    query.setFirstResult(firstResult);  }  if (maxResults != null) {    query.setMaxResults(maxResults);  }  try {    List<Object> result=query.list();    return result;  } catch (  HibernateException e) {    logger.error("Error running query",e);    session.getTransaction().rollback();    session.beginTransaction();    throw e;  }}  }
class C{  @Override public boolean addEdit(UndoableEdit anEdit){  if (anEdit == this) {    end();    return true;  } else   if (isInProgress() && (anEdit instanceof CompositeEdit)) {    return true;  } else {    return super.addEdit(anEdit);  }}  }
class C{  public void saveLockPassword(String password,int quality,boolean isFallback){  final byte[] hash=passwordToHash(password);  try {    RandomAccessFile raf=new RandomAccessFile(sLockPasswordFilename,"rwd");    try {      if (password == null) {        raf.setLength(0);      } else {        raf.write(hash,0,hash.length);      }    }  finally {      if (raf != null)       raf.close();    }  } catch (  FileNotFoundException fnfe) {    LogUtil.e(TAG,"Unable to save lock pattern to " + sLockPasswordFilename);  }catch (  IOException ioe) {    LogUtil.e(TAG,"Unable to save lock pattern to " + sLockPasswordFilename);  }}  }
class C{  @Override public View newView(Context context,Cursor cursor,ViewGroup parent){  return mInflater.inflate(mLayout,parent,false);}  }
class C{  public EnumerationIterator(Enumeration enm){  this.enm=enm;}  }
class C{  public static ScanManagerConfig read(File f) throws JAXBException {  final Unmarshaller u=createUnmarshaller();  return (ScanManagerConfig)u.unmarshal(f);}  }
class C{  public double computeInPlace(double... dataset){  checkArgument(dataset.length > 0,"Cannot calculate quantiles of an empty dataset");  if (containsNaN(dataset)) {    return NaN;  }  long numerator=(long)index * (dataset.length - 1);  int quotient=(int)LongMath.divide(numerator,scale,RoundingMode.DOWN);  int remainder=(int)(numerator - (long)quotient * scale);  selectInPlace(quotient,dataset,0,dataset.length - 1);  if (remainder == 0) {    return dataset[quotient];  } else {    selectInPlace(quotient + 1,dataset,quotient + 1,dataset.length - 1);    return interpolate(dataset[quotient],dataset[quotient + 1],remainder,scale);  }}  }
class C{  public Matrix4f transpose(){  return transpose(this);}  }
class C{  public static void appendPaddedInteger(StringBuffer buf,int value,int size){  if (value < 0) {    buf.append('-');    if (value != Integer.MIN_VALUE) {      value=-value;    } else {      for (; size > 10; size--) {        buf.append('0');      }      buf.append("" + -(long)Integer.MIN_VALUE);      return;    }  }  if (value < 10) {    for (; size > 1; size--) {      buf.append('0');    }    buf.append((char)(value + '0'));  } else   if (value < 100) {    for (; size > 2; size--) {      buf.append('0');    }    int d=((value + 1) * 13421772) >> 27;    buf.append((char)(d + '0'));    buf.append((char)(value - (d << 3) - (d << 1) + '0'));  } else {    int digits;    if (value < 1000) {      digits=3;    } else     if (value < 10000) {      digits=4;    } else {      digits=(int)(Math.log(value) / LOG_10) + 1;    }    for (; size > digits; size--) {      buf.append('0');    }    buf.append(Integer.toString(value));  }}  }
class C{  public void enableMultipleSettings(){  this.multipleSettings=true;}  }
class C{  public void updateExecutionStatus(ExecutionUpdateData executionUpdateData){  CloseableHttpResponse httpResponse=null;  httpResponse=postOverHttp(executionUpdateData,"/" + executionUpdateData.getStateMachineId() + "/"+ executionUpdateData.getTaskId()+ "/status");  HttpClientUtils.closeQuietly(httpResponse);}  }
class C{  public EventException(String message){  super(message);  cause=null;}  }
class C{  private static void output(CommandLine cmdLine,KeywordCollection bestKeywords) throws KeywordOptimizerException {  for (  String mode : cmdLine.getOptionValues("o")) {    OutputMode outputMode=OutputMode.valueOf(mode);switch (outputMode) {case CONSOLE:      outputConsole(bestKeywords);    break;case CSV:  outputCsv(cmdLine,bestKeywords);break;default :throw new KeywordOptimizerException("Parameter -o is required");}}}  }
class C{  public static String debugUserAgentString(){  return UserAgentRuntimeProperties.get().getUserAgent();}  }
class C{  public OFNetmaskGetVendorDataRequest(){  super(BSN_GET_IP_MASK_ENTRY_REQUEST);}  }
class C{  public final void print(String string) throws IOException {  if (string == null)   string="null";  int length=string.length();  int offset=0;  char[] chars=_chars;  while (length > 0) {    int sublen=Math.min(length,CHARS_LENGTH);    string.getChars(offset,offset + sublen,chars,0);    print(chars,0,sublen);    length-=sublen;    offset+=sublen;  }}  }
class C{  public static void putOIDCResponseIntoScope(final OIDCResponse response,final MutableAttributeMap context){  context.put("oidcResponse",response);}  }
class C{  void write(byte value){  if (pos >= data.length) {    data=Arrays.copyOf(data,data.length * 2);  }  data[pos++]=value;}  }
class C{  @Override public boolean onKeyDown(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_MENU && event.getRepeatCount() == 0) {    if (!mUi.isComboViewShowing()) {      mAppMenuHandler.showAppMenu(mActivity.findViewById(R.id.taburlbar),true,false);    }    return true;  }  boolean noModifiers=event.hasNoModifiers();  if (!noModifiers && isMenuOrCtrlKey(keyCode)) {    mMenuIsDown=true;    return false;  }  WebView webView=getCurrentTopWebView();  Tab tab=getCurrentTab();  if (webView == null || tab == null)   return false;  boolean ctrl=event.hasModifiers(KeyEvent.META_CTRL_ON);  boolean shift=event.hasModifiers(KeyEvent.META_SHIFT_ON);switch (keyCode) {case KeyEvent.KEYCODE_TAB:    if (event.isCtrlPressed()) {      if (event.isShiftPressed()) {        switchToTab(getPrevTab());      } else {        switchToTab(getNextTab());      }      return true;    }  break;case KeyEvent.KEYCODE_SPACE:if (shift) {  pageUp();} else if (noModifiers) {  pageDown();}return true;case KeyEvent.KEYCODE_BACK:if (!noModifiers) break;event.startTracking();return true;case KeyEvent.KEYCODE_FORWARD:if (!noModifiers) break;tab.goForward();return true;case KeyEvent.KEYCODE_DPAD_LEFT:if (ctrl) {tab.goBack();return true;}break;case KeyEvent.KEYCODE_DPAD_RIGHT:if (ctrl) {tab.goForward();return true;}break;case KeyEvent.KEYCODE_A:if (ctrl) {webView.selectAll();return true;}break;case KeyEvent.KEYCODE_C:if (ctrl) {webView.copySelection();return true;}break;case KeyEvent.KEYCODE_T:if (event.isCtrlPressed()) {if (event.isShiftPressed()) {openIncognitoTab();} else {openTabToHomePage();}return true;}break;}return mUi.dispatchKey(keyCode,event);}  }
class C{  public static JSONArray toJSONArray(XMLTokener x) throws JSONException {  return (JSONArray)parse(x,true,null);}  }
class C{  public boolean execute(String query) throws SQLException {  if (!isConnected()) {    throw new IllegalStateException("Not connected, please connect first!");  }  if (!isCursorScrollable()) {    m_PreparedStatement=m_Connection.prepareStatement(query,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);  } else {    m_PreparedStatement=m_Connection.prepareStatement(query,getSupportedCursorScrollType(),ResultSet.CONCUR_READ_ONLY);  }  return (m_PreparedStatement.execute());}  }
class C{  @Override public RuntimeAnnotationHandler scan(Class<?> clazz){  Util.notNull("clazz",clazz);  EJBHandler handler=null;  ArrayList<EJB> fieldAnnotations=new ArrayList<>();  ArrayList<Field> fields=new ArrayList<>();  for (  Field field : clazz.getDeclaredFields()) {    EJB fieldAnnotation=field.getAnnotation(EJB.class);    if (fieldAnnotation != null) {      fieldAnnotations.add(fieldAnnotation);      fields.add(field);    }  }  ArrayList<EJB> methodAnnotations=new ArrayList<>();  ArrayList<Method> methods=new ArrayList<>();  for (  Method method : clazz.getDeclaredMethods()) {    EJB methodAnnotation=method.getAnnotation(EJB.class);    if (methodAnnotation != null) {      methodAnnotations.add(methodAnnotation);      methods.add(method);    }  }  if (!fieldAnnotations.isEmpty() || !methodAnnotations.isEmpty()) {    handler=new EJBHandler(fields.toArray(new Field[0]),(EJB[])fieldAnnotations.toArray(new EJB[0]),methods.toArray(new Method[0]),(EJB[])methodAnnotations.toArray(new EJB[0]));  }  return handler;}  }
class C{  public static long decodeEntityAt(String html,int offset,int limit){  char ch=html.charAt(offset);  if ('&' != ch) {    return ((offset + 1L) << 32) | ch;  }  int entityLimit=Math.min(limit,offset + 10);  int end=-1;  int tail=-1;  if (entityLimit == limit) {    end=tail=entityLimit;  }  entityloop:   for (int i=offset + 1; i < entityLimit; ++i) {switch (html.charAt(i)) {case ';':      end=i;    tail=end + 1;  break entityloop;case '#':case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':case 'G':case 'H':case 'I':case 'J':case 'K':case 'L':case 'M':case 'N':case 'O':case 'P':case 'Q':case 'R':case 'S':case 'T':case 'U':case 'V':case 'W':case 'X':case 'Y':case 'Z':case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':case 'g':case 'h':case 'i':case 'j':case 'k':case 'l':case 'm':case 'n':case 'o':case 'p':case 'q':case 'r':case 's':case 't':case 'u':case 'v':case 'w':case 'x':case 'y':case 'z':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break;case '=':return ((offset + 1L) << 32) | '&';default :end=i;tail=i;break entityloop;}}if (end < 0 || offset + 2 >= end) {return ((offset + 1L) << 32) | '&';}char ch1=html.charAt(offset + 1);char ch2=html.charAt(offset + 2);int codepoint=-1;if ('#' == ch1) {if ('x' == ch2 || 'X' == ch2) {if (end == offset + 3) {return ((offset + 1L) << 32) | '&';}codepoint=0;digloop: for (int i=offset + 3; i < end; ++i) {char digit=html.charAt(i);switch (digit & 0xfff8) {case 0x30:case 0x38:int decDig=digit & 0xf;if (decDig < 10) {codepoint=(codepoint << 4) | decDig;} else {codepoint=-1;break digloop;}break;case 0x40:case 0x60:int hexDig=(digit & 0x7);if (hexDig != 0 && hexDig < 7) {codepoint=(codepoint << 4) | (hexDig + 9);} else {codepoint=-1;break digloop;}break;default :codepoint=-1;break digloop;}}if (codepoint > Character.MAX_CODE_POINT) {codepoint=0xfffd;}} else {codepoint=0;digloop: for (int i=offset + 2; i < end; ++i) {char digit=html.charAt(i);switch (digit & 0xfff8) {case 0x30:case 0x38:int decDig=digit - '0';if (decDig < 10) {codepoint=(codepoint * 10) + decDig;} else {codepoint=-1;break digloop;}break;default :codepoint=-1;break digloop;}}if (codepoint > Character.MAX_CODE_POINT) {codepoint=0xfffd;}}} else {Trie t=ENTITY_TRIE;for (int i=offset + 1; i < end; ++i) {char nameChar=html.charAt(i);t=t.lookup(nameChar);if (t == null) {break;}}if (t == null) {t=ENTITY_TRIE;for (int i=offset + 1; i < end; ++i) {char nameChar=html.charAt(i);if ('Z' >= nameChar && nameChar >= 'A') {nameChar|=32;}t=t.lookup(nameChar);if (t == null) {break;}}}if (t != null && t.isTerminal()) {codepoint=t.getValue();}}if (codepoint < 0) {return ((offset + 1L) << 32) | '&';} else {return (((long)tail) << 32) | codepoint;}}  }
class C{  public void replaceBoxWith(int column,int row,int width,int height,boolean value){  containsBox(column,row,width,height);  if (width <= 0 || height <= 0)   return;  BitVector destVector=this.toBitVector();  for (; --height >= 0; row++) {    int offset=row * columns + column;    destVector.replaceFromToWith(offset,offset + width - 1,value);  }}  }
class C{  public void testRandomStrings() throws Exception {  BrazilianAnalyzer a=new BrazilianAnalyzer();  checkRandomData(random(),a,1000 * RANDOM_MULTIPLIER);  a.close();}  }
class C{  public void testAuditPage(){  System.out.println("auditPage");  String pageUrl="http://My.testUrl.org";  Set<Parameter> paramSet=null;  AuditServiceImpl instance=initialiseAuditService();  Audit auditCreateByAuditCommand=EasyMock.createMock(Audit.class);  AuditCommand mockAuditCommand=EasyMock.createMock(AuditCommand.class);  EasyMock.expect(mockAuditCommand.getAudit()).andReturn(auditCreateByAuditCommand).anyTimes();  EasyMock.replay(mockAuditCommand);  AuditCommandFactory mockAuditCommandFactory=EasyMock.createMock(AuditCommandFactory.class);  EasyMock.expect(mockAuditCommandFactory.create(pageUrl,paramSet,false)).andReturn(mockAuditCommand).anyTimes();  EasyMock.replay(mockAuditCommandFactory);  instance.setAuditCommandFactory(mockAuditCommandFactory);  AuditServiceThreadQueue mockAuditServiceThreadQueue=EasyMock.createMock(AuditServiceThreadQueue.class);  mockAuditServiceThreadQueue.add(instance);  EasyMock.expectLastCall().anyTimes();  mockAuditServiceThreadQueue.addPageAudit(mockAuditCommand);  EasyMock.expectLastCall().anyTimes();  EasyMock.replay(mockAuditServiceThreadQueue);  instance.setAuditServiceThreadQueue(mockAuditServiceThreadQueue);  Audit result=instance.auditPage(pageUrl,paramSet);  assertEquals(auditCreateByAuditCommand,result);  EasyMock.verify(mockAuditServiceThreadQueue);  EasyMock.verify(mockAuditCommand);  EasyMock.verify(mockAuditCommandFactory);}  }
class C{  public RRset(RRset rrset){synchronized (rrset) {    rrs=(List)((ArrayList)rrset.rrs).clone();    nsigs=rrset.nsigs;    position=rrset.position;  }}  }
class C{  static String extractNumberFromUriWithoutFormatting(String uri){  if (uri == null) {    return null;  }  int index0=uri.indexOf(URI_START_DELIMITER);  if (index0 != -1) {    uri=uri.substring(index0 + URI_START_DELIMITER.length(),uri.indexOf(URI_END_DELIMITER,index0));  }  int index1=uri.indexOf(TEL_URI_HEADER);  if (index1 != -1) {    uri=uri.substring(index1 + TEL_URI_HEADER.length());  }  index1=uri.indexOf(SIP_URI_HEADER);  if (index1 != -1) {    int index2=uri.indexOf("@",index1);    uri=uri.substring(index1 + SIP_URI_HEADER.length(),index2);  }  int index2=uri.indexOf(";");  if (index2 != -1) {    uri=uri.substring(0,index2);  }  index2=uri.indexOf("?");  if (index2 != -1) {    uri=uri.substring(0,index2);  }  return uri;}  }
class C{  public VolatileSurfaceManager createVolatileManager(SunVolatileImage vImg,Object context){  GraphicsConfiguration gc=vImg.getGraphicsConfig();  if (gc instanceof D3DGraphicsConfig) {    return new D3DVolatileSurfaceManager(vImg,context);  } else   if (gc instanceof WGLGraphicsConfig) {    return new WGLVolatileSurfaceManager(vImg,context);  } else {    return new BufImgVolatileSurfaceManager(vImg,context);  }}  }
class C{  public void drawEmphasizedText(Graphics g,Color foreground,Color emphasis,String s,int underlinedIndex,int x,int y){  Graphics2D g2d=(Graphics2D)g.create();  g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);  g2d.setColor(emphasis);  BasicGraphicsUtils.drawStringUnderlineCharAt(g2d,s,underlinedIndex,x,y + 1);  g2d.setColor(foreground);  BasicGraphicsUtils.drawStringUnderlineCharAt(g2d,s,underlinedIndex,x,y);}  }
class C{  public void reload(){  invoke(contextReload);}  }
class C{  public static OutputStream newBZFileOutputStream(String file,boolean useGzip,boolean useOBuffers,int buffersize,boolean app) throws IOException {  if (useGzip) {    return new GZIPOutputStream(new FileOutputStream(file,app),buffersize);  } else   if (useOBuffers) {    return new BufferedOutputStream(new FileOutputStream(file,app),buffersize);  } else {    return new FileOutputStream(file,app);  }}  }
class C{  public static String toJavaSourceType(String type){  if (type.charAt(0) != '[') {    return type;  }  int dims=1;  String t=null;  for (int i=1; i < type.length(); i++) {    if (type.charAt(i) == '[') {      dims++;    } else {switch (type.charAt(i)) {case 'Z':        t="boolean";      break;case 'B':    t="byte";  break;case 'C':t="char";break;case 'D':t="double";break;case 'F':t="float";break;case 'I':t="int";break;case 'J':t="long";break;case 'S':t="short";break;case 'L':t=type.substring(i + 1,type.indexOf(';'));break;}break;}}StringBuilder resultType=new StringBuilder(t);for (; dims > 0; dims--) {resultType.append("[]");}return resultType.toString();}  }
class C{  private JButton createTitleButton(){  JButton button=new JButton();  button.setFocusPainted(false);  button.setFocusable(false);  button.setOpaque(true);  return button;}  }
class C{  public Vector3 abs(){  return new Vector3(Math.abs(x),Math.abs(y),Math.abs(z));}  }
class C{  protected void indexNulls(InputStream is,long ptr,List<Entry> entries){  boolean moreRecords=true;  byte rHdr[]=new byte[SHAPE_RECORD_HEADER_LENGTH];  int result;  int nRecords=0;  int recLengthWords, recLengthBytes;  long recOffset;  int recBufSize=20;  byte recBuf[]=new byte[recBufSize];  double x;  double y;  try {    while (moreRecords) {      result=is.read(rHdr,0,SHAPE_RECORD_HEADER_LENGTH);      if (result < 0) {        moreRecords=false;        if (logger.isLoggable(Level.FINE)) {          logger.fine("Found " + nRecords + " records");          logger.fine("recBufSize = " + recBufSize);        }      } else {        nRecords++;        recOffset=ptr;        readBEInt(rHdr,0);        recLengthWords=readBEInt(rHdr,4);        recLengthBytes=recLengthWords * 2;        if (recLengthBytes > recBufSize) {          if (logger.isLoggable(Level.FINE)) {            logger.fine("Shapefile SpatialIndex increasing recBufSize to " + recLengthBytes);          }          recBufSize=recLengthBytes;          recBuf=new byte[recBufSize];        }        result=is.read(recBuf,0,recLengthBytes);        x=0;        y=0;        ptr+=recLengthBytes + 8;        Entry entry=new Entry(x,y,x,y,(int)recOffset);        entries.add(entry);      }    }  } catch (  java.io.IOException e) {    e.printStackTrace();  } finally {    try {      is.close();    } catch (    java.io.IOException e) {    }  }}  }
class C{  public LocalXSessionFactoryBuilder addPackages(String... annotatedPackages){  for (  String annotatedPackage : annotatedPackages) {    addPackage(annotatedPackage);  }  return this;}  }
class C{  public boolean hasBlockChain(){  return (localServices & NODE_NETWORK) == NODE_NETWORK;}  }
class C{  private List<int[]> allSubsets(int n,int min,int max){  List<int[]> result=new ArrayList<int[]>();  if (n == 0) {    result.add(new int[0]);  } else {    for (int i=min; i < max - n; i++) {      int[] prefix={i};      for (      int[] suffix : allSubsets(n - 1,i + 1,max)) {        result.add(appendIntArrays(prefix,suffix));      }    }  }  return result;}  }
class C{  public void removeAllBreakpoints(){synchronized (breakpoints) {    for (int line=0; line != breakpoints.length; ++line) {      breakpoints[line]=false;    }  }}  }
class C{  private void parseColumnList(OneRowChange orc,RowChangeData.ActionType type,boolean isKey,int totalColumns) throws OracleExtractException {  int targetColumns=0;  int ncols;  int columnsLeftInRowAfterUpdate=0;  boolean generateColnums=(type == RowChangeData.ActionType.INSERT);  boolean generatingNullsForUpdate=false;  if (type == RowChangeData.ActionType.UPDATE && !isKey) {    columnsLeftInRowAfterUpdate=hexVal4();    generatingNullsForUpdate=true;  }  ncols=hexVal4();  if (generatingNullsForUpdate) {    targetColumns=ncols + totalColumns - columnsLeftInRowAfterUpdate;  } else {    if (totalColumns != 0)     targetColumns=totalColumns; else     targetColumns=ncols;  }  ArrayList<ArrayList<OneRowChange.ColumnVal>> rows=(isKey) ? orc.getKeyValues() : orc.getColumnValues();  if (logger.isDebugEnabled()) {    logger.debug(" - ncols = " + ncols);  }  rows.add(new ArrayList<ColumnVal>());  parseLastColumnNumber=0;  for (int i=0; i < targetColumns; i++) {    if (logger.isDebugEnabled()) {      logger.debug(" - col = " + i);    }    ColumnSpec spec=orc.new ColumnSpec();    if (generatingNullsForUpdate && i >= ncols) {      if (i == ncols)       parseLastColumnNumber=columnsLeftInRowAfterUpdate; else       generateColnums=true;    }    parseCol(generateColnums,(i >= ncols));    spec.setIndex(parseLastColumnNumber);    spec.setName(parseLastColumn.getName());    spec.setType(parseLastColumn.getType());    spec.setNotNull(parseLastColumn.isNotNull());    ColumnVal value=orc.new ColumnVal();    value.setValue(parseLastColumn.getValue());    if (isKey) {      if (spec.getType() == AdditionalTypes.XML)       continue;      orc.getKeySpec().add(spec);      orc.getKeyValues().get(0).add(value);    } else {      orc.getColumnSpec().add(spec);      orc.getColumnValues().get(0).add(value);    }  }}  }
class C{  @Override public int hashCode(){  int result=must != null ? must.hashCode() : 0;  result=31 * result + (should != null ? should.hashCode() : 0);  result=31 * result + minimumShouldMatch;  return result;}  }
class C{  public DrawApplicationModel(){}  }
class C{  public void updateReadStats(OFMessage ofm){switch (ofm.getType()) {case BARRIER_REPLY:    ctrReadBarrierReply.increment();  break;case BARRIER_REQUEST:ctrReadBarrierRequest.increment();break;case ECHO_REPLY:ctrReadEchoReply.increment();break;case ECHO_REQUEST:ctrReadEchoRequest.increment();break;case ERROR:ctrReadError.increment();break;case EXPERIMENTER:ctrReadExperimenter.increment();break;case FEATURES_REPLY:ctrReadFeaturesReply.increment();break;case FEATURES_REQUEST:ctrReadFeaturesRequest.increment();break;case FLOW_MOD:ctrReadFlowMod.increment();break;case FLOW_REMOVED:ctrReadFlowRemoved.increment();break;case GET_ASYNC_REPLY:ctrReadGetAsyncReply.increment();break;case GET_ASYNC_REQUEST:ctrReadGetAsyncRequest.increment();break;case GET_CONFIG_REPLY:ctrReadGetConfigReply.increment();break;case GET_CONFIG_REQUEST:ctrReadGetConfigRequest.increment();break;case GROUP_MOD:ctrReadGroupMod.increment();break;case HELLO:ctrReadHello.increment();break;case METER_MOD:ctrReadMeterMod.increment();break;case PACKET_IN:ctrReadPacketIn.increment();break;case PACKET_OUT:ctrReadPacketOut.increment();break;case PORT_MOD:ctrReadPortMod.increment();break;case PORT_STATUS:ctrReadPortStatus.increment();break;case QUEUE_GET_CONFIG_REPLY:ctrReadQueueGetConfigReply.increment();break;case QUEUE_GET_CONFIG_REQUEST:ctrReadQueueGetConfigRequest.increment();break;case ROLE_REPLY:ctrReadRoleReply.increment();break;case ROLE_REQUEST:ctrReadRoleRequest.increment();break;case SET_ASYNC:ctrReadSetAsync.increment();break;case SET_CONFIG:ctrReadSetConfig.increment();break;case STATS_REPLY:ctrReadStatsReply.increment();break;case STATS_REQUEST:ctrReadStatsRequest.increment();break;case TABLE_MOD:ctrReadTableMod.increment();break;case BUNDLE_ADD_MESSAGE:ctrReadBundleAdd.increment();break;case BUNDLE_CONTROL:ctrReadBundleControl.increment();break;case REQUESTFORWARD:ctrReadRequestForward.increment();break;case ROLE_STATUS:ctrReadRoleStatus.increment();break;case TABLE_STATUS:ctrReadTableStatus.increment();break;default :logger.warn(ofm.getType().toString() + ": Invalid OpenFlow Messaqe!");break;}}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public Builder strictMode(boolean active){  this.strictMode=active;  return this;}  }
class C{  protected void endVisitNode(ASTNode node){}  }
class C{  private Set<String> buildClassSet(BugCollection bugCollection){  Set<String> classSet=new HashSet<String>();  for (Iterator<BugInstance> i=bugCollection.iterator(); i.hasNext(); ) {    BugInstance warning=i.next();    for (Iterator<BugAnnotation> j=warning.annotationIterator(); j.hasNext(); ) {      BugAnnotation annotation=j.next();      if (!(annotation instanceof ClassAnnotation)) {        continue;      }      classSet.add(((ClassAnnotation)annotation).getClassName());    }  }  return classSet;}  }
class C{  public boolean supportsTransactionIsolationLevel(int level) throws SQLException {switch (level) {case Connection.TRANSACTION_NONE:    return false;case Connection.TRANSACTION_READ_COMMITTED:  return true;case Connection.TRANSACTION_READ_UNCOMMITTED:return false;case Connection.TRANSACTION_REPEATABLE_READ:return true;case Connection.TRANSACTION_SERIALIZABLE:return true;default :return false;}}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public static String toString(Object array,String stringIfNull){  if (array == null) {    return stringIfNull;  }  return new ToStringBuilder(array,ToStringStyle.SIMPLE_STYLE).append(array).toString();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.STATE_SWITCH__CASES:    return cases != null && !cases.isEmpty();case SexecPackage.STATE_SWITCH__STATE_CONFIGURATION_IDX:  return stateConfigurationIdx != STATE_CONFIGURATION_IDX_EDEFAULT;case SexecPackage.STATE_SWITCH__HISTORY_REGION:return historyRegion != null;}return super.eIsSet(featureID);}  }
class C{  @Override public void zoomRangeAxes(double factor,PlotRenderingInfo info,Point2D source){  zoomRangeAxes(factor,info,source,false);}  }
class C{  public boolean hasNextPage(){  return getNumber() != -1 && itemsBefore + pageSize < totalCount;}  }
class C{  public static void resetNameCounters(){  nameCounters.clear();}  }
class C{  public MimeEntry(String type){  this(type,UNKNOWN,null,null,null);}  }
class C{  protected void readFile(Object raster,File file,LayerType layerType) throws IOException {  if (!doIt) {    return;  }  InputStream iStream=new FileInputStream(file);  ByteBuffer bbuf=null;  byte[] bbArray=null;switch (layerType) {case none:case footprint:case viewshed:case derivative:    break;case elevation:case field:  float[][] fArray=(float[][])raster;bbArray=new byte[fArray[0].length * 4];bbuf=ByteBuffer.wrap(bbArray);FloatBuffer fbuf=bbuf.asFloatBuffer();for (int i=0; i < fArray.length; ++i) {iStream.read(bbArray);bbuf.rewind();fbuf.get(fArray[i]);fbuf.rewind();}break;case colorimage:int[][] iArray=(int[][])raster;bbArray=new byte[iArray[0].length * 4];bbuf=ByteBuffer.wrap(bbArray);IntBuffer ibuf=bbuf.asIntBuffer();for (int i=0; i < iArray.length; ++i) {iStream.read(bbArray);bbuf.rewind();ibuf.get(iArray[i]);ibuf.rewind();}break;case grayimage:byte[][] bArray=(byte[][])raster;for (int i=0; i < bArray.length; ++i) {iStream.read(bArray[i]);}break;}iStream.close();}  }
class C{  public long restartTime(long now){  if (mNumFailed == 0) {    return now;  }  if (mRetryAfter > 0) {    return mLastMod + mRetryAfter;  }  return mLastMod + Constants.RETRY_FIRST_DELAY * (1000 + mFuzz) * (1 << (mNumFailed - 1));}  }
class C{  public ItemBuilder material(final ItemStack src){  this.itemStack.setMaterial(src.getMaterial());  return this;}  }
class C{  public cudaResourceDesc(){}  }
class C{  public E putBooleanArray(final String key,@Nullable final boolean[] value){  this.bundle.putBooleanArray(key,value);  return (E)this;}  }
class C{  public static IShape buildPolygon(final List<? extends IShape> points){  final CoordinateSequenceFactory fact=GeometryUtils.coordFactory;  final int size=points.size();  CoordinateSequence cs=fact.create(size,3);  for (int i=0; i < size; i++) {    final Coordinate p=(GamaPoint)points.get(i).getLocation();    cs.setOrdinate(i,0,p.x);    cs.setOrdinate(i,1,p.y);    cs.setOrdinate(i,2,p.z);  }  cs=CoordinateSequences.ensureValidRing(fact,cs);  final LinearRing geom=GeometryUtils.FACTORY.createLinearRing(cs);  final Polygon p=GeometryUtils.FACTORY.createPolygon(geom,null);  return new GamaShape(p);}  }
class C{  public ToastBuilder messageTextColorRes(@ColorRes int messageTextColorResId){  this.messageTextColor=getColor(messageTextColorResId);  return this;}  }
class C{  public HttpException(final String message,final Throwable cause){  super(message);  ExceptionUtils.initCause(this,cause);}  }
class C{  boolean isWritingEncryptedData(){  return writingEncryptedData;}  }
class C{  protected static void remoteAssertEntryValue(String regionName,String entryName,Object expected) throws CacheException {  Region root=getRootRegion();  Region region=root.getSubregion(regionName);  Region sub=region.getSubregion(entryName);  if (sub == null) {    String s="Entry \"" + entryName + "\" does not exist";    throw new EntryNotFoundException(s);  }  assertEquals(expected,sub.get(entryName));}  }
class C{  public static String stringFor(int n){switch (n) {case CU_JIT_MAX_REGISTERS:    return "CU_JIT_MAX_REGISTERS";case CU_JIT_THREADS_PER_BLOCK:  return "CU_JIT_THREADS_PER_BLOCK";case CU_JIT_WALL_TIME:return "CU_JIT_WALL_TIME";case CU_JIT_INFO_LOG_BUFFER:return "CU_JIT_INFO_LOG_BUFFER";case CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES:return "CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES";case CU_JIT_ERROR_LOG_BUFFER:return "CU_JIT_ERROR_LOG_BUFFER";case CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES:return "CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES";case CU_JIT_OPTIMIZATION_LEVEL:return "CU_JIT_OPTIMIZATION_LEVEL";case CU_JIT_TARGET_FROM_CUCONTEXT:return "CU_JIT_TARGET_FROM_CUCONTEXT";case CU_JIT_TARGET:return "CU_JIT_TARGET";case CU_JIT_FALLBACK_STRATEGY:return "CU_JIT_FALLBACK_STRATEGY";case CU_JIT_GENERATE_DEBUG_INFO:return "CU_JIT_GENERATE_DEBUG_INFO";case CU_JIT_LOG_VERBOSE:return "CU_JIT_LOG_VERBOSE";case CU_JIT_GENERATE_LINE_INFO:return "CU_JIT_GENERATE_LINE_INFO";case CU_JIT_CACHE_MODE:return "CU_JIT_CACHE_MODE";}return "INVALID CUjit_option: " + n;}  }
class C{  public boolean contains(double value){  return lastIndexOf(value) >= 0;}  }
class C{  @Override public int portLocal(){  Socket s=getSocket();  if (s != null) {    return s.getLocalPort();  } else {    return -1;  }}  }
class C{  private void escape(char ch) throws Exception {  char[] text=symbol(ch);  if (text != null) {    write(text);  } else {    write(ch);  }}  }
class C{  public void connect(String ipAddress) throws CertificateException, IOException {  if (sLogger.isActivated()) {    sLogger.info("Network access connected (" + ipAddress + ")");  }  mIpAddress=ipAddress;  if (mRcsSettings.isSecureMsrpOverWifi()) {    try {      KeyStoreManager.updateClientCertificate(ipAddress);    } catch (    CertificateException|IOException e) {      if (sLogger.isActivated()) {        sLogger.error(e.getMessage());      }    }  }}  }
class C{  public boolean isDeviceRooted(){  return checkRootBySuAccess() || checkRootBySuperUserApk() || checkRootByBuildTags();}  }
class C{  protected byte[] engineDoFinal(byte[] in,int inOffset,int inLen) throws IllegalBlockSizeException, BadPaddingException {  throw new IllegalStateException("Cipher has not been initialized");}  }
class C{  private static int selectColorFormat(MediaCodecInfo codecInfo,String mimeType){  MediaCodecInfo.CodecCapabilities capabilities=codecInfo.getCapabilitiesForType(mimeType);  for (int i=0; i < capabilities.colorFormats.length; i++) {    int colorFormat=capabilities.colorFormats[i];    if (isRecognizedFormat(colorFormat)) {      return colorFormat;    }  }  Log.e(TAG,"couldn't find a good color format for " + codecInfo.getName() + " / "+ mimeType);  return 0;}  }
class C{  public void plusEquals(Polynomial B){  double[] A=new double[Math.max(order,B.order)];  for (int i=0; i <= order; i++)   A[i]=a[i];  for (int i=0; i <= B.order; i++)   A[i]+=B.a[i];  a=A;  order=A.length - 1;}  }
class C{  @SuppressWarnings("static-access") private void resetPassword(boolean isSource,String newPassword){  String password=null;  if (isSource) {    if (newPassword == null) {      password=s_parameters.getSourcePasswd();    } else     if (newPassword.length() == 0) {      password=m_sourcePassword.getText();      ;    } else {      password=newPassword;    }    m_sourcePassword.setText(password);    m_sourcePasswordOld=password;  } else {    if (newPassword == null) {      password=s_parameters.getTargetPasswd();    } else     if (newPassword.length() == 0) {      password=m_targetPassword.getText();    } else {      password=newPassword;    }    m_targetPassword.setText(password);    m_targetPasswordOld=password;  }}  }
class C{  public boolean start(){  if (!super.start())   return false;  boolean ok=false;  try {    m_server=(AdempiereServer)m_serverClass.newInstance();    m_server.setProcessor(m_processor);    m_server.start();    ok=true;  } catch (  Exception e) {    log.log(Level.SEVERE,"start",e);    ok=false;  }  if (!ok)   return abort();  log.info("start - " + ok);  getState();  return ok;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public void removeActionListener(ActionListener listener){  textField.removeActionListener(listener);}  }
class C{  public String makeString(){  return "NormalWorldGenerator";}  }
class C{  private List<FutureCourse> parseCourses(){  List<String> dataList=this.splitData(this.dataGetter.getCleanData());  List<FutureCourse> futureCourseList=new ArrayList<>();  try {    for (    String data : dataList) {      if (!data.contains("Traditional"))       continue;      String line;      String instructor="TBA";      String course=null;      String number=null;      String section=null;      String term=null;      int credits=-1;      List<FutureCourse.TimeInterval> time=new ArrayList<>();      InputStream stream=new ByteArrayInputStream(data.getBytes(Charset.forName("UTF-8")));      Scanner in=new Scanner(stream);      while (in.hasNextLine()) {        line=in.nextLine();        if (line.isEmpty()) {          continue;        } else         if (line.contains(this.dataGetter.getSubject()) && course == null) {          if (line.contains(" (Syllabus)"))           line=line.substring(0,line.indexOf(" (Syllabus)"));          course=this.dataGetter.getSubject();          number=line.substring(line.length() - 9,line.length() - 6);          section=line.substring(line.length() - 3,line.length());          term=this.dataGetter.getTerm();        } else         if (line.contains("Instructors:")) {          String fullname[]=in.nextLine().split("\\s+");          if (fullname.length == 2) {            instructor=fullname[0] + " " + fullname[1];          } else           if (fullname.length == 3 && !fullname[2].contains("(P)")) {            instructor=fullname[0] + " " + fullname[2];          } else           if (fullname.length == 3 && fullname[2].contains("(P)")) {            instructor=fullname[0] + " " + fullname[1];          } else           if (fullname.length == 4) {            instructor=fullname[0] + " " + fullname[2];          }        } else         if (line.contains("Credits")) {          credits=Integer.parseInt(line.substring(line.indexOf("Credits") - 6,line.indexOf("Credits") - 5));        } else         if (line.contains(" am") || line.contains(" pm")) {          String[] interval=line.split(" - ");          int startHour=Integer.parseInt(interval[0].substring(0,interval[0].indexOf(':')));          int startMinute=Integer.parseInt(interval[0].substring(interval[0].indexOf(':') + 1,interval[0].indexOf(':') + 3));          if (interval[0].contains("pm") && startHour != 12) {            startHour+=12;          }          int endHour=Integer.parseInt(interval[1].substring(0,interval[1].indexOf(':')));          int endMinute=Integer.parseInt(interval[1].substring(interval[1].indexOf(':') + 1,interval[1].indexOf(':') + 3));          if (interval[1].contains("pm") && endHour != 12) {            endHour+=12;          }          String dayString=in.nextLine();          List<DayOfWeek> days=new ArrayList<>();          if (dayString.indexOf('M') != -1) {            days.add(DayOfWeek.MONDAY);          }          if (dayString.indexOf('T') != -1) {            days.add(DayOfWeek.TUESDAY);          }          if (dayString.indexOf('W') != -1) {            days.add(DayOfWeek.WEDNESDAY);          }          if (dayString.indexOf('R') != -1) {            days.add(DayOfWeek.THURSDAY);          }          if (dayString.indexOf('F') != -1) {            days.add(DayOfWeek.FRIDAY);          }          FutureCourse.TimeInterval newTime=new FutureCourse.TimeInterval(startHour,startMinute,endHour,endMinute,days);          if (!time.contains(newTime))           time.add(newTime);        }      }      if (instructor != null && course != null && number != null && section != null && term != null && credits != -1 && !time.isEmpty())       futureCourseList.add(new FutureCourse(instructor,course,number,section,term,credits,time));    }  } catch (  Exception e) {    System.out.println(e);    System.out.println(futureCourseList.size());    return null;  }  return futureCourseList;}  }
class C{  public static void testCore(){  if (Core.getInstance() == null) {    throw new ServerApiGenericException("Core is not instanciated");  }}  }
class C{  public MultiClassificationPerformance(){  this(UNDEFINED);}  }
class C{  public Pair<ByteBuffer,CLEvent> mapLater(CLQueue queue,MapFlags flags,boolean blocking,CLEvent... eventsToWaitFor){  return map(queue,flags,pointerToSizeTs(0,0),pointerToSizeTs(getWidth(),getHeight()),getWidth(),null,blocking,eventsToWaitFor);}  }
class C{  public String toString(){  return getName() + "_" + getWindowNo();}  }
class C{  public HttpResponse(HttpServletResponse response){  this.httpResponse=response;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.stroke=SerialUtilities.readStroke(stream);  this.outlinePaint=SerialUtilities.readPaint(stream);  this.fillPaint=SerialUtilities.readPaint(stream);}  }
class C{  public boolean isSetParagraphTitle(){  return this.paragraphTitle != null;}  }
class C{  private String findFirstBackCameraId(){  Log.d(TAG,"Getting First BACK Camera");  String cameraId=findFirstCameraIdFacing(CameraCharacteristics.LENS_FACING_BACK);  if (cameraId == null) {    Log.w(TAG,"No back-facing camera found.");  }  return cameraId;}  }
class C{  public static Properties loadLastActiveLicenseProperties(){  File licensePropertiesFile=FileSystemService.getUserConfigFile(LICENSE_PROPERTIES_PATH);  Properties licenseProperties=new Properties();  if (licensePropertiesFile.exists()) {    try (FileInputStream in=new FileInputStream(licensePropertiesFile)){      licenseProperties.load(in);      handleLegacyProperties(licenseProperties);    } catch (    IOException e) {      LogService.getRoot().log(Level.WARNING,"com.rapidminer.gui.license.RMLicenseManagerListener.loading_properties_failed",e);    }  }  return licenseProperties;}  }
class C{  public static OCAType newInstance(){  final OCAType returnInstance=new OCAType();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  public DateTime withZoneRetainFields(DateTimeZone newZone){  newZone=DateTimeUtils.getZone(newZone);  DateTimeZone originalZone=DateTimeUtils.getZone(getZone());  if (newZone == originalZone) {    return this;  }  long millis=originalZone.getMillisKeepLocal(newZone,getMillis());  return new DateTime(millis,getChronology().withZone(newZone));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.736 -0400",hash_original_method="F0667AD48C8EC6D7BA0EADD31D490B3C",hash_generated_method="7341911836A1026854834701FA6BF03F") public CountingInputStream(InputStream in){  super(in);}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiScrollBarUI();  return MultiLookAndFeel.createUIs(mui,((MultiScrollBarUI)mui).uis,a);}  }
class C{  public static CacheConfigResponse create(DistributionManager dm,InternalDistributedMember recipient,int cacheId,byte attributeCode,int newValue){  CacheConfigResponse m=new CacheConfigResponse();  m.setRecipient(recipient);  try {    GemFireCacheImpl c=(GemFireCacheImpl)CacheFactory.getInstanceCloseOk(dm.getSystem());    if (cacheId != System.identityHashCode(c)) {      m.info=null;    } else {switch (attributeCode) {case RemoteGemFireVM.LOCK_TIMEOUT_CODE:        c.setLockTimeout(newValue);      break;case RemoteGemFireVM.LOCK_LEASE_CODE:    c.setLockLease(newValue);  break;case RemoteGemFireVM.SEARCH_TIMEOUT_CODE:c.setSearchTimeout(newValue);break;default :Assert.assertTrue(false,"Unknown config code: " + attributeCode);}}m.info=new RemoteCacheInfo(c);} catch (CancelException ex) {m.info=null;}catch (Exception ex) {m.exception=ex;m.info=null;}return m;}  }
class C{  @Override public void uninstallUI(JComponent c){  uninstallListeners(fontChooser);  uninstallComponents(fontChooser);}  }
class C{  private void updateCaption(){  String caption;  if (currFileName == null) {    caption="Untitled";  } else {    caption=currFileName;  }  if (dirty) {    caption="* " + caption;  }  caption="TextEdit - " + caption;}  }
class C{  public void onDestroy(){}  }
class C{  public static Media createMedia(InputStream stream,String mimeType,Runnable onCompletion) throws IOException {  return Display.getInstance().createMedia(stream,mimeType,onCompletion);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public Maybe<V> oneValue(final K key){  final ValueSubscriber<V> sub=ValueSubscriber.subscriber();  return get(key).peek(null).flatMap(null);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private Entity chooseEntity(Coords pos){  Entity choice=null;  List<Entity> entities=game.getEntitiesVector(pos);  if (entities.size() == 1) {    choice=entities.get(0);  } else   if (entities.size() > 1) {    String input=(String)JOptionPane.showInputDialog(null,Messages.getString("BoardView1.ChooseEntityDialog.message",new Object[]{pos.getBoardNum()}),Messages.getString("BoardView1.ChooseEntityDialog.title"),JOptionPane.QUESTION_MESSAGE,null,SharedUtility.getDisplayArray(entities),null);    choice=(Entity)SharedUtility.getTargetPicked(entities,input);  }  return choice;}  }
class C{  public Reader openStream(String publicID,String systemID) throws MalformedURLException, FileNotFoundException, IOException {  URL url=new URL(this.currentReader.systemId,systemID);  if (url.getRef() != null) {    String ref=url.getRef();    if (url.getFile().length() > 0) {      url=new URL(url.getProtocol(),url.getHost(),url.getPort(),url.getFile());      url=new URL("jar:" + url + '!'+ ref);    } else {      url=StdXMLReader.class.getResource(ref);    }  }  this.currentReader.publicId=publicID;  this.currentReader.systemId=url;  StringBuffer charsRead=new StringBuffer();  Reader reader=this.stream2reader(url.openStream(),charsRead);  if (charsRead.length() == 0) {    return reader;  }  String charsReadStr=charsRead.toString();  PushbackReader pbreader=new PushbackReader(reader,charsReadStr.length());  for (int i=charsReadStr.length() - 1; i >= 0; i--) {    pbreader.unread(charsReadStr.charAt(i));  }  return pbreader;}  }
class C{  protected boolean shouldRequestFocusOnInit(){  return true;}  }
class C{  private void addContext(StringBuffer arguments){  if (deployable instanceof WAR) {    arguments.append(",'-contextroot','");    arguments.append(((WAR)deployable).getContext());    arguments.append("'");  }}  }
class C{  public static void main(String... args) throws IOException {  String dir=Utils.getProperty("spellcheckDir","src");  new SpellChecker().run("src/tools/org/h2/build/doc/dictionary.txt",dir);}  }
class C{  public static String classSimpleName(String className){  int separator=className.lastIndexOf('.');  if (separator == -1) {    return className;  } else {    return className.substring(separator + 1);  }}  }
class C{  public static String convertMime2JavaEncoding(String encoding){  for (int i=0; i < _encodings.length; ++i) {    if (_encodings[i].name.equalsIgnoreCase(encoding)) {      return _encodings[i].javaName;    }  }  return encoding;}  }
class C{  public boolean match(SuperConstructorInvocation node,Object other){  if (!(other instanceof SuperConstructorInvocation)) {    return false;  }  SuperConstructorInvocation o=(SuperConstructorInvocation)other;  if (node.getAST().apiLevel >= AST.JLS3) {    if (!safeSubtreeListMatch(node.typeArguments(),o.typeArguments())) {      return false;    }  }  return (safeSubtreeMatch(node.getExpression(),o.getExpression()) && safeSubtreeListMatch(node.arguments(),o.arguments()));}  }
class C{  public static int ENOTRECOVERABLE(){  return 131;}  }
class C{  private void addToExpression(String value,FunctionDescription function){  addToExpression(value);  if (function.getNumberOfArguments() == 0) {    currentExpression.setCaretPosition(currentExpression.getCaretPosition() + 1);  }}  }
class C{  public void putQueryParams(String key,String value){  this.mQueryParams.put(key,value);}  }
class C{  public void drawPolygon(int[] xPoints,int[] yPoints,int nPoints){  int[] cX=xPoints;  int[] cY=yPoints;  if ((!impl.isTranslationSupported()) && (xTranslate != 0 || yTranslate != 0)) {    cX=new int[nPoints];    cY=new int[nPoints];    System.arraycopy(xPoints,0,cX,0,nPoints);    System.arraycopy(yPoints,0,cY,0,nPoints);    for (int iter=0; iter < nPoints; iter++) {      cX[iter]+=xTranslate;      cY[iter]+=yTranslate;    }  }  impl.drawPolygon(nativeGraphics,cX,cY,nPoints);}  }
class C{  void requestQuit(final User user){  if (!user.stopped()) {    user.stopMovement();  }  quitDialog.center();  quitDialog.setVisible(true);  yesButton.requestFocusInWindow();}  }
class C{  public static void appendFileToFile(final File file1,final File file2){  if (!isReadable(file1) || !isReadable(file2) || !isWritable(file1)) {    return;  }  try {    FileInputStream inputStream=new FileInputStream(file2);    FileOutputStream outputStream=new FileOutputStream(file1,true);    int count;    final int buffer_size=4096;    byte[] bytes=new byte[buffer_size];    while ((count=inputStream.read(bytes,0,buffer_size)) > 0)     outputStream.write(bytes,0,count);    FileUtils.sync(outputStream);    outputStream.close();    inputStream.close();  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void testMergeMultipleServletMappings() throws Exception {  String srcXml="<web-app>" + "  <servlet>" + "    <servlet-name>s1</servlet-name>"+ "    <servlet-class>sclass1</servlet-class>"+ "  </servlet>"+ "  <servlet-mapping>"+ "    <servlet-name>s1</servlet-name>"+ "    <url-pattern>/s1</url-pattern>"+ "  </servlet-mapping>"+ "</web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <servlet>" + "    <servlet-name>s1</servlet-name>"+ "    <servlet-class>sclass1</servlet-class>"+ "  </servlet>"+ "  <servlet-mapping>"+ "    <servlet-name>s1</servlet-name>"+ "    <url-pattern>/s1</url-pattern>"+ "  </servlet-mapping>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.merge(mergeWebXml);  assertTrue(WebXmlUtils.hasServlet(srcWebXml,"s1"));  List<String> servletMappings=WebXmlUtils.getServletMappings(srcWebXml,"s1");  assertEquals(1,servletMappings.size());  assertEquals("/s1",servletMappings.get(0));}  }
class C{  public boolean hasThumbnail(){  return mData.hasCompressedThumbnail();}  }
class C{  public void changeQtyOnHand(BigDecimal qty,boolean add){  if (qty == null || qty.signum() == 0)   return;  if (add)   setQtyOnHand(getQtyOnHand().add(qty)); else   setQtyOnHand(getQtyOnHand().subtract(qty));}  }
class C{  public StringBuffer insert(int index,double d){  return insert(index,Double.toString(d));}  }
class C{  public double weightedMatthewsCorrelation(){  double[] classCounts=new double[m_NumClasses];  double classCountSum=0;  for (int i=0; i < m_NumClasses; i++) {    for (int j=0; j < m_NumClasses; j++) {      classCounts[i]+=m_ConfusionMatrix[i][j];    }    classCountSum+=classCounts[i];  }  double mccTotal=0;  for (int i=0; i < m_NumClasses; i++) {    double temp=matthewsCorrelationCoefficient(i);    if (!Utils.isMissingValue(temp)) {      mccTotal+=(temp * classCounts[i]);    }  }  return mccTotal / classCountSum;}  }
class C{  public static String millisToText(long millis){  return Strings.millisToString(millis,true);}  }
class C{  public void test_readFully$B_writeBytesLjava_lang_String() throws IOException {  byte[] buf=new byte[testLength];  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  raf.writeBytes(testString);  raf.seek(0);  try {    raf.readFully(null);    fail("Test 1: NullPointerException expected.");  } catch (  NullPointerException e) {  }  raf.readFully(buf);  assertEquals("Test 2: Incorrect bytes written or read;",testString,new String(buf));  try {    raf.readFully(buf);    fail("Test 3: EOFException expected.");  } catch (  EOFException e) {  }  raf.close();  try {    raf.writeBytes("Already closed.");    fail("Test 4: IOException expected.");  } catch (  IOException e) {  }  try {    raf.readFully(buf);    fail("Test 5: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  boolean isSpacePreserve(){  return m_spacePreserveStack.peek();}  }
class C{  public void waitForCGCopyState(FunctionalAPIImpl port,ConsistencyGroupCopyUID groupCopy,boolean expectRollComplete,ImageAccessMode... accessMode) throws FunctionalAPIActionFailedException_Exception, FunctionalAPIInternalError_Exception, InterruptedException, RecoverPointException {  ConsistencyGroupUID groupUID=groupCopy.getGroupUID();  List<ConsistencyGroupCopyState> groupCopyStateList;  String cgName=port.getGroupName(groupCopy.getGroupUID());  String cgCopyName=port.getGroupCopyName(groupCopy);  final int maxMinutes=30;  final int sleepTimeSeconds=15;  final int secondsPerMin=60;  final int numItersPerMin=secondsPerMin / sleepTimeSeconds;  List<ImageAccessMode> accessModes=new ArrayList<ImageAccessMode>();  if (accessMode != null) {    accessModes=Arrays.asList(accessMode);  }  logger.info("waitForCGCopyState called for copy " + cgCopyName + " of group "+ cgName);  if (!accessModes.isEmpty()) {    logger.info("Waiting up to " + maxMinutes + " minutes for state to change to: "+ accessModes.toString());  } else {    logger.info("Waiting up to " + maxMinutes + " minutes for state to change to: DIRECT_ACCESS or NO_ACCESS");  }  for (int minIter=0; minIter < maxMinutes; minIter++) {    for (int perMinIter=0; perMinIter < numItersPerMin; perMinIter++) {      groupCopyStateList=port.getGroupState(groupUID).getGroupCopiesStates();      for (      ConsistencyGroupCopyState groupCopyState : groupCopyStateList) {        if (RecoverPointUtils.copiesEqual(groupCopyState.getCopyUID(),groupCopy)) {          StorageAccessState copyAccessState=groupCopyState.getStorageAccessState();          logger.info("Current Copy Access State: " + copyAccessState);          if (accessModes.contains(ImageAccessMode.LOGGED_ACCESS)) {            if (copyAccessState == StorageAccessState.LOGGED_ACCESS || copyAccessState == StorageAccessState.NO_ACCESS_JOURNAL_PRESERVED) {              logger.info("Copy " + cgCopyName + " of group "+ cgName+ " is in logged access.  Enable has completed");              return;            }          } else           if (accessModes.contains(ImageAccessMode.VIRTUAL_ACCESS)) {            if (copyAccessState == StorageAccessState.VIRTUAL_ACCESS) {              logger.info("Copy " + cgCopyName + " of group "+ cgName+ " is in virtual access.  Enable has completed");              return;            }          } else           if (accessModes.contains(ImageAccessMode.VIRTUAL_ACCESS_WITH_ROLL)) {            if (expectRollComplete) {              if (copyAccessState == StorageAccessState.LOGGED_ACCESS_ROLL_COMPLETE) {                logger.info("Copy " + cgCopyName + " of group "+ cgName+ " is in virtual access with roll complete.  Enable has completed");                return;              }            } else {              if ((copyAccessState == StorageAccessState.VIRTUAL_ACCESS_ROLLING_IMAGE) || (copyAccessState == StorageAccessState.LOGGED_ACCESS_ROLL_COMPLETE)) {                logger.info("Copy " + cgCopyName + " of group "+ cgName+ " is in virtual access with roll or roll complete.  Enable has completed");                return;              }            }          } else {            if (copyAccessState == StorageAccessState.DIRECT_ACCESS) {              logger.info("Copy " + cgCopyName + " of group "+ cgName+ " is DIRECT_ACCESS mode");              return;            }            if (copyAccessState == StorageAccessState.NO_ACCESS) {              logger.info("Copy " + cgCopyName + " of group "+ cgName+ " is NO_ACCESS mode");              return;            }          }        }      }      logger.info("Copy image " + cgCopyName + " of group "+ cgName+ " not in correct state.  Sleeping "+ sleepTimeSeconds+ " seconds");      Thread.sleep(Long.valueOf(sleepTimeSeconds * numMillisInSecond));    }  }  throw RecoverPointException.exceptions.stateChangeNeverCompleted();}  }
class C{  public JSONWriter object() throws JSONException {  if (this.mode == 'i') {    this.mode='o';  }  if (this.mode == 'o' || this.mode == 'a') {    this.append("{");    this.push(new JSONObject());    this.comma=false;    return this;  }  throw new JSONException("Misplaced object.");}  }
class C{  @Override public void close(){  injector.getInstance(TransportClientNodesService.class).close();  injector.getInstance(TransportService.class).close();  try {    injector.getInstance(MonitorService.class).close();  } catch (  Exception e) {  }  for (  Class<? extends LifecycleComponent> plugin : injector.getInstance(PluginsService.class).nodeServices()) {    injector.getInstance(plugin).close();  }  try {    ThreadPool.terminate(injector.getInstance(ThreadPool.class),10,TimeUnit.SECONDS);  } catch (  Exception e) {  }  injector.getInstance(PageCacheRecycler.class).close();}  }
class C{  public Builder context(final Context context){  mContext=context;  return this;}  }
class C{  public int readLine(final byte[] array,final EnumSet<LineTerminator> terminators) throws IOException {  return readLine(array,0,array.length,terminators);}  }
class C{  public void close(boolean pCloseUnderlying) throws IOException {  if (closed) {    return;  }  if (pCloseUnderlying) {    closed=true;    input.close();  } else {    for (; ; ) {      int av=available();      if (av == 0) {        av=makeAvailable();        if (av == 0) {          break;        }      }      skip(av);    }  }  closed=true;}  }
class C{  public RemoteProductAssociationServiceImpl(final GenericDTOService<ProductAssociationDTO> productAssociationDTOGenericDTOService,final FederationFacade federationFacade){  super(productAssociationDTOGenericDTOService);  this.federationFacade=federationFacade;  this.dtoProductAssociationService=(DtoProductAssociationService)productAssociationDTOGenericDTOService;}  }
class C{  public static void UTF8toUTF16(byte[] utf8,int offset,int len,CharArr out){  out.reserve(len);  int n=UTF8toUTF16(utf8,offset,len,out.getArray(),out.getEnd());  out.setEnd(out.getEnd() + n);}  }
class C{  public ServiceCall<String> indexDocument(final IndexDocumentOptions indexDocumentOptions){  if (indexDocumentOptions != null) {    File document=indexDocumentOptions.document();    InputStream documentInputStream=indexDocumentOptions.getDocumentInputStream();    Boolean dryRun=indexDocumentOptions.dryRun();    String mediaType=indexDocumentOptions.mediaType();    JsonObject convertDocumentConfig=indexDocumentOptions.convertDocumentConfig();    IndexConfiguration indexConfiguration=indexDocumentOptions.indexConfiguration();    if ((document == null) && (documentInputStream == null) && (indexDocumentOptions.metadata() == null)) {      throw new IllegalArgumentException("The request does not contain a document or metadata. At least one of those is required.");    }    if ((document != null) && (documentInputStream != null)) {      throw new IllegalArgumentException("Both a document File and InputStream were provided, only one is allowed.");    }    if (!dryRun && (indexConfiguration == null)) {      throw new IllegalArgumentException("A configuration is required for indexing.");    }    final JsonObject config=new JsonObject();    JsonObject retrieveAndRankConfig=new JsonObject();    if (dryRun) {      retrieveAndRankConfig.addProperty(DRY_RUN,true);    } else {      retrieveAndRankConfig.addProperty(DRY_RUN,false);      retrieveAndRankConfig.addProperty(SERVICE_INSTANCE_ID,indexConfiguration.getServiceInstanceId());      retrieveAndRankConfig.addProperty(CLUSTER_ID,indexConfiguration.getClusterId());      retrieveAndRankConfig.addProperty(SEARCH_COLLECTION,indexConfiguration.getSearchCollectionName());    }    if ((indexConfiguration != null) && (indexConfiguration.getFields() != null)) {      retrieveAndRankConfig.add(RETRIEVE_AND_RANK_FIELDS,new JsonParser().parse(indexConfiguration.getFields().toString()));    }    config.add(RETRIEVE_AND_RANK,retrieveAndRankConfig);    if (convertDocumentConfig != null) {      config.add(CONVERT_DOCUMENT,convertDocumentConfig);    }    final MultipartBody.Builder multiPartBodyBuilder=new MultipartBody.Builder().setType(MultipartBody.FORM).addPart(Headers.of(HttpHeaders.CONTENT_DISPOSITION,"form-data; name=\"config\""),RequestBody.create(HttpMediaType.JSON,config.toString()));    if (documentInputStream != null) {      final MediaType mType=parseMediaType(document,mediaType);      byte[] documentContent=ConversionUtils.writeInputStreamToString(documentInputStream).getBytes();      multiPartBodyBuilder.addPart(Headers.of(HttpHeaders.CONTENT_DISPOSITION,"form-data; name=\"file\""),RequestBody.create(mType,documentContent));    }    if (document != null) {      final MediaType mType=parseMediaType(document,mediaType);      multiPartBodyBuilder.addPart(Headers.of(HttpHeaders.CONTENT_DISPOSITION,"form-data; name=\"file\""),RequestBody.create(mType,document));    }    if (indexDocumentOptions.metadata() != null) {      JsonObject metadataJson=metadataToJsonObject(indexDocumentOptions.metadata());      multiPartBodyBuilder.addPart(Headers.of(HttpHeaders.CONTENT_DISPOSITION,"form-data; name=\"metadata\""),RequestBody.create(HttpMediaType.JSON,metadataJson.toString()));    }    final RequestBody body=multiPartBodyBuilder.build();    Request request=RequestBuilder.post(INDEX_DOCUMENT_PATH).query(VERSION,versionDate).body(body).build();    return createServiceCall(request,ResponseConverterUtils.getString());  } else {    throw new IllegalArgumentException("The request does not contain a file or metadata. At least one of those is required.");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.458 -0400",hash_original_method="FC899DEC0E12EB8012F1AF3A006D9447",hash_generated_method="7DB8637C164C2912EE09F818F470F198") private int handleP(String value,DoubleMetaphoneResult result,int index){  if (charAt(value,index + 1) == 'H') {    result.append('F');    index+=2;  } else {    result.append('P');    index=contains(value,index + 1,1,"P","B") ? index + 2 : index + 1;  }  return index;}  }
class C{  public GroupResource group(){  return group;}  }
class C{  protected void paintContentBorderBottomEdge(Graphics g,int tabPlacement,int selectedIndex,int x,int y,int w,int h){  boolean leftToRight=CompiereUtils.isLeftToRight(tabPane);  int bottom=y + h - 1;  int right=x + w - 1;  Rectangle selRect=selectedIndex < 0 ? null : getTabBounds(selectedIndex,calcRect);  g.setColor(shadow);  if (tabPlacement != BOTTOM || selectedIndex < 0 || (selRect.x < x || selRect.x > x + w)) {    g.setColor(darkShadow);    g.drawLine(x,y + h - 1,x + w - 1,y + h - 1);  } else {    boolean lastInRun=isLastInRun(selectedIndex);    g.setColor(darkShadow);    if (leftToRight || lastInRun)     g.drawLine(x,bottom,selRect.x,bottom); else     g.drawLine(x,bottom,selRect.x - 1,bottom);    if (selRect.x + selRect.width < x + w - 2) {      if (leftToRight && !lastInRun)       g.drawLine(selRect.x + selRect.width,bottom,right,bottom); else       g.drawLine(selRect.x + selRect.width - 1,bottom,right,bottom);    }  }}  }
class C{  public void apply(float oldX,float oldY,float newX,float newY){  boolean notLimitedUp=true;  boolean notLimitedBottom=true;  boolean notLimitedLeft=true;  boolean notLimitedRight=true;  if (mChart instanceof XYChart) {    int scales=mRenderer.getScalesCount();    double[] limits=mRenderer.getPanLimits();    boolean limited=limits != null && limits.length == 4;    XYChart chart=(XYChart)mChart;    for (int i=0; i < scales; i++) {      double[] range=getRange(i);      double[] calcRange=chart.getCalcRange(i);      if (limitsReachedX && limitsReachedY && (range[0] == range[1] && calcRange[0] == calcRange[1] || range[2] == range[3] && calcRange[2] == calcRange[3])) {        return;      }      checkRange(range,i);      double[] realPoint=chart.toRealPoint(oldX,oldY,i);      double[] realPoint2=chart.toRealPoint(newX,newY,i);      double deltaX=realPoint[0] - realPoint2[0];      double deltaY=realPoint[1] - realPoint2[1];      double ratio=getAxisRatio(range);      if (chart.isVertical(mRenderer)) {        double newDeltaX=-deltaY * ratio;        double newDeltaY=deltaX / ratio;        deltaX=newDeltaX;        deltaY=newDeltaY;      }      if (mRenderer.isPanXEnabled()) {        if (limits != null) {          if (notLimitedLeft) {            notLimitedLeft=limits[0] <= range[0] + deltaX;          }          if (notLimitedRight) {            notLimitedRight=limits[1] >= range[1] + deltaX;          }        }        if (!limited || (notLimitedLeft && notLimitedRight)) {          setXRange(range[0] + deltaX,range[1] + deltaX,i);          limitsReachedX=false;        } else {          limitsReachedX=true;        }      }      if (mRenderer.isPanYEnabled()) {        if (limits != null) {          if (notLimitedBottom) {            notLimitedBottom=limits[2] <= range[2] + deltaY;          }          if (notLimitedUp) {            notLimitedUp=limits[3] >= range[3] + deltaY;          }        }        if (!limited || (notLimitedBottom && notLimitedUp)) {          setYRange(range[2] + deltaY,range[3] + deltaY,i);          limitsReachedY=false;        } else {          limitsReachedY=true;        }      }    }  } else {    RoundChart chart=(RoundChart)mChart;    chart.setCenterX(chart.getCenterX() + (int)(newX - oldX));    chart.setCenterY(chart.getCenterY() + (int)(newY - oldY));  }  notifyPanListeners();}  }
class C{  public final boolean isValid(){  final float dx=upperBound.x - lowerBound.x;  if (dx < 0f) {    return false;  }  final float dy=upperBound.y - lowerBound.y;  if (dy < 0) {    return false;  }  return lowerBound.isValid() && upperBound.isValid();}  }
class C{  protected String doIt() throws java.lang.Exception {  StringBuffer sql=new StringBuffer("SELECT * FROM S_TimeExpenseLine el " + "WHERE el.AD_Client_ID=?" + " AND el.C_BPartner_ID>0 AND el.IsInvoiced='Y'"+ " AND el.C_OrderLine_ID IS NULL"+ " AND EXISTS (SELECT * FROM S_TimeExpense e "+ "WHERE el.S_TimeExpense_ID=e.S_TimeExpense_ID AND e.Processed='Y')");  if (p_C_BPartner_ID != 0)   sql.append(" AND el.C_BPartner_ID=?");  if (p_DateFrom != null || m_DateTo != null) {    sql.append(" AND EXISTS (SELECT * FROM S_TimeExpense e " + "WHERE el.S_TimeExpense_ID=e.S_TimeExpense_ID");    if (p_DateFrom != null)     sql.append(" AND e.DateReport >= ?");    if (m_DateTo != null)     sql.append(" AND e.DateReport <= ?");    sql.append(")");  }  sql.append(" ORDER BY el.C_BPartner_ID, el.C_Project_ID, el.S_TimeExpense_ID, el.Line");  MBPartner oldBPartner=null;  int old_Project_ID=-1;  MTimeExpense te=null;  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    int par=1;    pstmt.setInt(par++,getAD_Client_ID());    if (p_C_BPartner_ID != 0)     pstmt.setInt(par++,p_C_BPartner_ID);    if (p_DateFrom != null)     pstmt.setTimestamp(par++,p_DateFrom);    if (m_DateTo != null)     pstmt.setTimestamp(par++,m_DateTo);    rs=pstmt.executeQuery();    while (rs.next()) {      MTimeExpenseLine tel=new MTimeExpenseLine(getCtx(),rs,get_TrxName());      if (!tel.isInvoiced())       continue;      if (oldBPartner == null || oldBPartner.getC_BPartner_ID() != tel.getC_BPartner_ID()) {        completeOrder();        oldBPartner=new MBPartner(getCtx(),tel.getC_BPartner_ID(),get_TrxName());      }      if (old_Project_ID != tel.getC_Project_ID()) {        completeOrder();        old_Project_ID=tel.getC_Project_ID();      }      if (te == null || te.getS_TimeExpense_ID() != tel.getS_TimeExpense_ID())       te=new MTimeExpense(getCtx(),tel.getS_TimeExpense_ID(),get_TrxName());      processLine(te,tel,oldBPartner);    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql.toString(),e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  completeOrder();  return "@Created@=" + m_noOrders;}  }
class C{  public boolean startsWith(XMLString prefix,int toffset){  return m_str.startsWith(prefix.toString(),toffset);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:45.987 -0400",hash_original_method="B7A1DD9D7C4B5BB01E3117D671176C5F",hash_generated_method="B3757691A12CBC0618277262E74206BA") @Override public String toString(){  return "InetUnixAddress[" + new String(ipaddress,StandardCharsets.UTF_8) + "]";}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeStroke(this.domainGridlineStroke,stream);  SerialUtilities.writePaint(this.domainGridlinePaint,stream);  SerialUtilities.writeStroke(this.rangeGridlineStroke,stream);  SerialUtilities.writePaint(this.rangeGridlinePaint,stream);  SerialUtilities.writeStroke(this.domainMinorGridlineStroke,stream);  SerialUtilities.writePaint(this.domainMinorGridlinePaint,stream);  SerialUtilities.writeStroke(this.rangeMinorGridlineStroke,stream);  SerialUtilities.writePaint(this.rangeMinorGridlinePaint,stream);  SerialUtilities.writeStroke(this.rangeZeroBaselineStroke,stream);  SerialUtilities.writePaint(this.rangeZeroBaselinePaint,stream);  SerialUtilities.writeStroke(this.domainCrosshairStroke,stream);  SerialUtilities.writePaint(this.domainCrosshairPaint,stream);  SerialUtilities.writeStroke(this.rangeCrosshairStroke,stream);  SerialUtilities.writePaint(this.rangeCrosshairPaint,stream);  SerialUtilities.writePaint(this.domainTickBandPaint,stream);  SerialUtilities.writePaint(this.rangeTickBandPaint,stream);  SerialUtilities.writePoint2D(this.quadrantOrigin,stream);  for (int i=0; i < 4; i++) {    SerialUtilities.writePaint(this.quadrantPaint[i],stream);  }  SerialUtilities.writeStroke(this.domainZeroBaselineStroke,stream);  SerialUtilities.writePaint(this.domainZeroBaselinePaint,stream);}  }
class C{  @Deprecated public void addPrefixNSMapping(String prefix,String nsURI){  if (nsURI.length() == 0) {    throw new IllegalArgumentException("Cannot map empty string URI");  }  if (prefix.length() == 0) {    throw new IllegalArgumentException("Cannot map empty string prefix");  }  if (prefix.equals(NO_NS_PREFIX)) {    throw new IllegalArgumentException("The prefix: " + prefix + " cannot be registered, it's reserved for special internal use.");  }  if (prefixToNamespaceURILookup.containsKey(prefix)) {    throw new IllegalArgumentException("The prefix: '" + prefix + "' was repeated. This is illegal.");  }  if (namespaceURIToPrefixLookup.containsKey(nsURI)) {    throw new IllegalArgumentException("The namespace URI: " + nsURI + " cannot be mapped to 2 different prefixes.");  }  if (prefix.equals(DEFAULT_NAMESPACE_PREFIX)) {    this.defaultNS=nsURI;  } else {    prefixToNamespaceURILookup.put(prefix,nsURI);    namespaceURIToPrefixLookup.put(nsURI,prefix);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_CONSTRAINT_EXPR_1__INDEX_1:    setIndex_1(INDEX_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  private boolean isNonZeroReplaceArguments(){  boolean ret=false;  try {    Hop pattern=getInput().get(_paramIndexMap.get("pattern"));    Hop replace=getInput().get(_paramIndexMap.get("replacement"));    if (pattern instanceof LiteralOp && ((LiteralOp)pattern).getDoubleValue() != 0d && replace instanceof LiteralOp && ((LiteralOp)replace).getDoubleValue() != 0d) {      ret=true;    }  } catch (  Exception ex) {    LOG.warn(ex.getMessage());  }  return ret;}  }
class C{  public int read(byte[] buf,int off,int len,long timeout) throws IgniteCheckedException, IpcSharedMemoryOperationTimedoutException {  assert buf != null;  assert len > 0;  assert buf.length >= off + len;  assert isReader;  lock.readLock().lock();  try {    if (closed.get())     throw new IgniteCheckedException("Shared memory segment has been closed: " + this);    return (int)IpcSharedMemoryUtils.readSharedMemory(shmemPtr,buf,off,len,timeout);  }  finally {    lock.readLock().unlock();  }}  }
class C{  @Override public boolean isTransitionAvailable(){  return false;}  }
class C{  public void readData(DataInput din) throws IOException {  exceptionCode=din.readUnsignedByte();}  }
class C{  public DrawerBuilder withActivity(@NonNull Activity activity){  this.mRootView=(ViewGroup)activity.findViewById(android.R.id.content);  this.mActivity=activity;  this.mLayoutManager=new LinearLayoutManager(mActivity);  return this;}  }
class C{  public Phase advancePhase(Phase phase){  if (phase == left) {    return self;  }  if (phase == right) {    return done;  }  return right;}  }
class C{  @Override public ImageSaver build(@Nonnull OneCamera.PictureSaverCallback pictureSaverCallback,@Nonnull OrientationManager.DeviceOrientation orientation,@Nonnull CaptureSession session){  final OrientationManager.DeviceOrientation imageRotation=mImageRotationCalculator.toImageRotation();  ImageProcessorProxyListener proxyListener=mImageBackend.getProxyListener();  JpegImageProcessorListener jpegImageProcessorListener=new JpegImageProcessorListener(proxyListener,session,imageRotation,pictureSaverCallback);  return new MostRecentImageSaver(new ImageSaverImpl(session,imageRotation,mImageBackend,jpegImageProcessorListener));}  }
class C{  public void createMemory(String database,boolean isSchema){}  }
class C{  public Notifications hideCloseButton(){  this.hideCloseButton=true;  return this;}  }
class C{  public final boolean modifyExpiration(ByteArrayWrapper key,long delay){  boolean canceled=cancelKeyExpiration(key);  if (!canceled)   return false;  RedisDataType type=getRedisDataType(key);  if (type == null)   return false;  ScheduledFuture<?> future=this.expirationExecutor.schedule(new ExpirationExecutor(key,type,this),delay,TimeUnit.MILLISECONDS);  this.expirationsMap.put(key,future);  return true;}  }
class C{  @Override public void init(){}  }
class C{  public boolean includesDate(Date date){  return super.includes(timestampToDate(date));}  }
class C{  private Throwable prepareFault() throws IOException {  HashMap fault=readFault();  Object detail=fault.get("detail");  String message=(String)fault.get("message");  if (detail instanceof Throwable) {    _replyFault=(Throwable)detail;    if (message != null && _detailMessageField != null) {      try {        _detailMessageField.set(_replyFault,message);      } catch (      Throwable e) {      }    }    return _replyFault;  } else {    String code=(String)fault.get("code");    _replyFault=new HessianServiceException(message,code,detail);    return _replyFault;  }}  }
class C{  WhoisCommand readCommand() throws IOException, WhoisException {  return parseCommand(CharStreams.toString(reader));}  }
class C{  @LargeTest public void testPerformanceAddRemoveTransition() throws Exception {  final String videoItemFileName1=INPUT_FILE_PATH + "H264_BP_1080x720_30fps_800kbps_1_17.mp4";  final int videoItemStartTime1=0;  final int videoItemEndTime1=20000;  final String videoItemFileName2=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_512kbps_AACLC_48khz_132kbps_s_0_26.mp4";  final int videoItemStartTime2=0;  final int videoItemEndTime2=20000;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final int transitionDuration=5000;  final int transitionBehavior=Transition.BEHAVIOR_MIDDLE_FAST;  final String[] loggingInfo=new String[3];  int timeTaken=0;  final MediaVideoItem[] mediaVideoItem=new MediaVideoItem[(NUM_OF_ITERATIONS * 10) + 1];  for (int i=0; i < (NUM_OF_ITERATIONS * 10); i+=2) {    try {      mediaVideoItem[i]=new MediaVideoItem(mVideoEditor,"m" + i,videoItemFileName1,renderingMode);      mediaVideoItem[i + 1]=new MediaVideoItem(mVideoEditor,"m" + (i + 1),videoItemFileName2,renderingMode);      mediaVideoItem[i].setExtractBoundaries(videoItemStartTime1,videoItemEndTime1);      mediaVideoItem[i + 1].setExtractBoundaries(videoItemStartTime2,videoItemEndTime2);    } catch (    Exception e1) {      assertTrue("Can not create Video Object Item with file name = " + e1.toString(),false);    }    mVideoEditor.addMediaItem(mediaVideoItem[i]);    mVideoEditor.addMediaItem(mediaVideoItem[i + 1]);  }  mediaVideoItem[(NUM_OF_ITERATIONS * 10)]=new MediaVideoItem(mVideoEditor,"m" + (NUM_OF_ITERATIONS * 10),videoItemFileName1,renderingMode);  mediaVideoItem[(NUM_OF_ITERATIONS * 10)].setExtractBoundaries(videoItemStartTime1,videoItemEndTime1);  mVideoEditor.addMediaItem(mediaVideoItem[(NUM_OF_ITERATIONS * 10)]);  final TransitionCrossfade tranCrossfade[]=new TransitionCrossfade[(NUM_OF_ITERATIONS * 10)];  long beginTime=SystemClock.uptimeMillis();  for (int i=0; i < (NUM_OF_ITERATIONS * 10); i++) {    tranCrossfade[i]=new TransitionCrossfade("transition" + i,mediaVideoItem[i],mediaVideoItem[i + 1],transitionDuration,transitionBehavior);  }  timeTaken=calculateTimeTaken(beginTime,(NUM_OF_ITERATIONS * 10));  loggingInfo[0]="Time taken to Create CrossFade Transition :" + timeTaken;  beginTime=SystemClock.uptimeMillis();  for (int i=0; i < (NUM_OF_ITERATIONS * 10); i++) {    mVideoEditor.addTransition(tranCrossfade[i]);  }  timeTaken=calculateTimeTaken(beginTime,(NUM_OF_ITERATIONS * 10));  loggingInfo[1]="\n\tTime taken to add CrossFade Transition :" + timeTaken;  beginTime=SystemClock.uptimeMillis();  for (int i=0; i < (NUM_OF_ITERATIONS * 10); i++) {    assertEquals("Removing Transitions",tranCrossfade[i],mVideoEditor.removeTransition(tranCrossfade[i].getId()));  }  timeTaken=calculateTimeTaken(beginTime,(NUM_OF_ITERATIONS * 10));  loggingInfo[2]="\n\tTime taken to remove CrossFade Transition :" + timeTaken;  writeTimingInfo("testPerformanceAddRemoveTransition (in mSec)",loggingInfo);}  }
class C{  @Override public void warning(SAXParseException ex) throws SAXException {}  }
class C{  public NetworkZoningParam(ExportGroup exportGroup,ExportMask exportMask,DbClient dbClient){  String storageSystem=exportMask.getStorageDevice().toString();  setVirtualArray(exportGroup.getVirtualArray());  if (exportGroup.hasAltVirtualArray(storageSystem)) {    setAltVirtualArray(URI.create(exportGroup.getAltVirtualArrays().get(storageSystem)));  }  setHasExistingVolumes(exportMask.hasAnyExistingVolumes());  setExportGroup(exportGroup.getId());  setExportGroupDisplay(exportGroup.forDisplay());  setMaskName(exportMask.getMaskName());  setMaskId(exportMask.getId());  if (exportMask.getVolumes() != null) {    setVolumes(StringSetUtil.stringSetToUriList(exportMask.getVolumes().keySet()));  } else {    setVolumes(new ArrayList<URI>());  }  Set<Initiator> initiators=ExportMaskUtils.getInitiatorsForExportMask(dbClient,exportMask,Transport.FC);  NetworkScheduler.checkZoningMap(exportGroup,exportMask,initiators,dbClient);  setZoningMap(exportMask.getZoningMap());}  }
class C{  @Override public void startCounting(ExampleSet eSet,boolean useExampleWeights) throws OperatorException {  super.startCounting(eSet,useExampleWeights);  this.counter=eSet.size();  if (type == RHO) {    this.value=RankStatistics.rho(eSet,eSet.getAttributes().getLabel(),eSet.getAttributes().getPredictedLabel());  } else {    this.value=RankStatistics.tau_b(eSet,eSet.getAttributes().getLabel(),eSet.getAttributes().getPredictedLabel());  }}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  protected static byte[] serialize(final Iterable<? extends Statement> stmts,final RDFFormat format) throws Exception {  final RDFWriterFactory writerFactory=RDFWriterRegistry.getInstance().get(format);  final ByteArrayOutputStream baos=new ByteArrayOutputStream();  final RDFWriter writer=writerFactory.getWriter(baos);  writer.startRDF();  for (  Statement stmt : stmts) {    writer.handleStatement(stmt);  }  writer.endRDF();  final byte[] data=baos.toByteArray();  return data;}  }
class C{  public String[] removeIntervalFacets(String field){  while (remove(FacetParams.FACET_INTERVAL,field)) {  }  ;  return remove(String.format(Locale.ROOT,"f.%s.facet.interval.set",field));}  }
class C{  public void validate(BaseAction action,Resource resource,@Nullable MetadataSection section){  if (resource != null) {    Eml eml=(resource.getEml() == null) ? new Eml() : resource.getEml();    if (section == null) {      section=MetadataSection.BASIC_SECTION;    }switch (section) {case BASIC_SECTION:      if (Strings.isNullOrEmpty(eml.getTitle())) {        action.addFieldError("eml.title",action.getText("validation.required",new String[]{action.getText("eml.title")}));      }    if (eml.getDescription().isEmpty()) {      action.addActionError(action.getText("validation.required",new String[]{action.getText("eml.description")}));    } else {      int index=0;      for (      String d : eml.getDescription()) {        if (!exists(d,5)) {          action.addFieldError("eml.description[" + index + "]",action.getText("validation.short",new String[]{action.getText("eml.description"),"5"}));        }        index++;      }    }  if (Strings.isNullOrEmpty(eml.getIntellectualRights())) {    action.addFieldError("eml.intellectualRights.license",action.getText("validation.required",new String[]{action.getText("eml.intellectualRights.license")}));  }if (resource.getOrganisation() == null) {  action.addFieldError("id",action.getText("validation.required",new String[]{action.getText("portal.home.organisation")}));} else if (regManager.get(resource.getOrganisation().getKey()) == null) {  action.addFieldError("id",action.getText("eml.publishingOrganisation.notFound",new String[]{resource.getOrganisation().getKey().toString()}));}if (Strings.isNullOrEmpty(resource.getCoreType())) {action.addFieldError("resource.coreType",action.getText("validation.required",new String[]{action.getText("resource.coreType")}));}if (Strings.isNullOrEmpty(eml.getMetadataLanguage())) {action.addActionWarning(action.getText("eml.metadataLanguage.default"));eml.setMetadataLanguage(Language.ENGLISH.getIso3LetterCode());}if (Strings.isNullOrEmpty(eml.getLanguage()) && resource.getCoreType() != null && !resource.getCoreType().equalsIgnoreCase(Resource.CoreRowType.METADATA.toString())) {action.addActionWarning(action.getText("eml.language.default"));eml.setLanguage(Language.ENGLISH.getIso3LetterCode());}if (eml.getUpdateFrequency() == null) {if (resource.getUpdateFrequency() != null) {eml.setUpdateFrequency(resource.getUpdateFrequency().getIdentifier());action.addActionWarning(action.getText("eml.updateFrequency.default.interval",new String[]{resource.getUpdateFrequency().getIdentifier()}));} else {action.addActionWarning(action.getText("eml.updateFrequency.default"));eml.setUpdateFrequency(MaintenanceUpdateFrequency.UNKOWN.getIdentifier());}}if (isAgentsListEmpty(eml.getContacts())) {action.addActionError(action.getText("eml.contact.required"));} else {for (int index=0; index < eml.getContacts().size(); index++) {Agent c=eml.getContacts().get(index);if (exists(c.getFirstName()) && !exists(c.getLastName())) {action.addFieldError("eml.contacts[" + index + "].lastName",action.getText("validation.firstname.lastname"));}if (!c.getUserIds().isEmpty()) {if (exists(c.getUserIds().get(0).getDirectory()) && !exists(c.getUserIds().get(0).getIdentifier())) {action.addFieldError("eml.contacts[" + index + "].userIds[0].identifier",action.getText("validation.personnel"));} else if (!exists(c.getUserIds().get(0).getDirectory()) && exists(c.getUserIds().get(0).getIdentifier())) {action.addFieldError("eml.contacts[" + index + "].userIds[0].directory",action.getText("validation.directory"));}}if (!exists(c.getOrganisation()) && !exists(c.getLastName()) && !exists(c.getPosition())) {action.addActionError(action.getText("validation.lastname.organisation.position"));action.addFieldError("eml.contacts[" + index + "].organisation",action.getText("validation.required",new String[]{action.getText("eml.contact.organisation")}));action.addFieldError("eml.contacts[" + index + "].lastName",action.getText("validation.required",new String[]{action.getText("eml.contact.lastName")}));action.addFieldError("eml.contacts[" + index + "].position",action.getText("validation.required",new String[]{action.getText("eml.contact.position")}));}if (exists(c.getEmail()) && !isValidEmail(c.getEmail())) {action.addFieldError("eml.contacts[" + index + "].email",action.getText("validation.invalid",new String[]{action.getText("eml.contact.email")}));}if (exists(c.getPhone()) && !isValidPhoneNumber(c.getPhone())) {action.addFieldError("eml.contacts[" + index + "].phone",action.getText("validation.invalid",new String[]{action.getText("eml.contact.phone")}));}if (c.getHomepage() != null) {if (formatURL(c.getHomepage()) == null) {action.addFieldError("eml.contacts[" + index + "].homepage",action.getText("validation.invalid",new String[]{action.getText("eml.contact.homepage")}));} else {c.setHomepage(formatURL(c.getHomepage()));}}}}if (isAgentsListEmpty(eml.getCreators())) {action.addActionError(action.getText("eml.resourceCreator.required"));} else {for (int index=0; index < eml.getCreators().size(); index++) {Agent c=eml.getCreators().get(index);if (exists(c.getFirstName()) && !exists(c.getLastName())) {action.addFieldError("eml.creators[" + index + "].lastName",action.getText("validation.firstname.lastname"));}if (!c.getUserIds().isEmpty()) {if (exists(c.getUserIds().get(0).getDirectory()) && !exists(c.getUserIds().get(0).getIdentifier())) {action.addFieldError("eml.creators[" + index + "].userIds[0].identifier",action.getText("validation.personnel"));} else if (!exists(c.getUserIds().get(0).getDirectory()) && exists(c.getUserIds().get(0).getIdentifier())) {action.addFieldError("eml.creators[" + index + "].userIds[0].directory",action.getText("validation.directory"));}}if (!exists(c.getOrganisation()) && !exists(c.getLastName()) && !exists(c.getPosition())) {action.addActionError(action.getText("validation.lastname.organisation.position"));action.addFieldError("eml.creators[" + index + "].organisation",action.getText("validation.required",new String[]{action.getText("eml.resourceCreator.organisation")}));action.addFieldError("eml.creators[" + index + "].lastName",action.getText("validation.required",new String[]{action.getText("eml.resourceCreator.lastName")}));action.addFieldError("eml.creators[" + index + "].position",action.getText("validation.required",new String[]{action.getText("eml.resourceCreator.position")}));}if (exists(c.getEmail()) && !isValidEmail(c.getEmail())) {action.addFieldError("eml.creators[" + index + "].email",action.getText("validation.invalid",new String[]{action.getText("eml.resourceCreator.email")}));}if (exists(c.getPhone()) && !isValidPhoneNumber(c.getPhone())) {action.addFieldError("eml.creators[" + index + "].phone",action.getText("validation.invalid",new String[]{action.getText("eml.resourceCreator.phone")}));}if (c.getHomepage() != null) {if (formatURL(c.getHomepage()) == null) {action.addFieldError("eml.creators[" + index + "].homepage",action.getText("validation.invalid",new String[]{action.getText("eml.resourceCreator.homepage")}));} else {c.setHomepage(formatURL(c.getHomepage()));}}}}if (isAgentsListEmpty(eml.getMetadataProviders())) {action.addActionError(action.getText("eml.metadataProvider.required"));} else {for (int index=0; index < eml.getMetadataProviders().size(); index++) {Agent c=eml.getMetadataProviders().get(index);if (exists(c.getFirstName()) && !exists(c.getLastName())) {action.addFieldError("eml.metadataProviders[" + index + "].lastName",action.getText("validation.firstname.lastname"));}if (!c.getUserIds().isEmpty()) {if (exists(c.getUserIds().get(0).getDirectory()) && !exists(c.getUserIds().get(0).getIdentifier())) {action.addFieldError("eml.metadataProviders[" + index + "].userIds[0].identifier",action.getText("validation.personnel"));} else if (!exists(c.getUserIds().get(0).getDirectory()) && exists(c.getUserIds().get(0).getIdentifier())) {action.addFieldError("eml.metadataProviders[" + index + "].userIds[0].directory",action.getText("validation.directory"));}}if (!exists(c.getOrganisation()) && !exists(c.getLastName()) && !exists(c.getPosition())) {action.addActionError(action.getText("validation.lastname.organisation.position"));action.addFieldError("eml.metadataProviders[" + index + "].organisation",action.getText("validation.required",new String[]{action.getText("eml.metadataProvider.organisation")}));action.addFieldError("eml.metadataProviders[" + index + "].lastName",action.getText("validation.required",new String[]{action.getText("eml.metadataProvider.lastName")}));action.addFieldError("eml.metadataProviders[" + index + "].position",action.getText("validation.required",new String[]{action.getText("eml.metadataProvider.position")}));}if (exists(c.getEmail()) && !isValidEmail(c.getEmail())) {action.addFieldError("eml.metadataProviders[" + index + "].email",action.getText("validation.invalid",new String[]{action.getText("eml.metadataProvider.email")}));}if (exists(c.getPhone()) && !isValidPhoneNumber(c.getPhone())) {action.addFieldError("eml.metadataProviders[" + index + "].phone",action.getText("validation.invalid",new String[]{action.getText("eml.metadataProvider.phone")}));}if (c.getHomepage() != null) {if (formatURL(c.getHomepage()) == null) {action.addFieldError("eml.metadataProviders[" + index + "].homepage",action.getText("validation.invalid",new String[]{action.getText("eml.metadataProvider.homepage")}));} else {c.setHomepage(formatURL(c.getHomepage()));}}}}break;case GEOGRAPHIC_COVERAGE_SECTION:if (!isGeoPageEmpty(eml)) {Double coord=0.0;for (int index=0; index < eml.getGeospatialCoverages().size(); index++) {if (!eml.getGeospatialCoverages().isEmpty()) {coord=eml.getGeospatialCoverages().get(index).getBoundingCoordinates().getMin().getLongitude();if (coord == null) {action.addFieldError("eml.geospatialCoverages[" + index + "].boundingCoordinates.min.longitude",action.getText("validation.required",new String[]{action.getText("eml.geospatialCoverages.boundingCoordinates.min.longitude")}));} else if (Double.isNaN(coord)) {action.addFieldError("eml.geospatialCoverages[" + index + "].boundingCoordinates.min.longitude",action.getText("validation.invalid",new String[]{action.getText("eml.geospatialCoverages.boundingCoordinates.min.longitude")}));}coord=eml.getGeospatialCoverages().get(index).getBoundingCoordinates().getMax().getLongitude();if (coord == null) {action.addFieldError("eml.geospatialCoverages[" + index + "].boundingCoordinates.max.longitude",action.getText("validation.required",new String[]{action.getText("eml.geospatialCoverages.boundingCoordinates.max.longitude")}));} else if (Double.isNaN(coord)) {action.addFieldError("eml.geospatialCoverages[" + index + "].boundingCoordinates.max.longitude",action.getText("validation.invalid",new String[]{action.getText("eml.geospatialCoverages.boundingCoordinates.max.longitude")}));}coord=eml.getGeospatialCoverages().get(index).getBoundingCoordinates().getMax().getLatitude();if (coord == null) {action.addFieldError("eml.geospatialCoverages[" + index + "].boundingCoordinates.max.latitude",action.getText("validation.required",new String[]{action.getText("eml.geospatialCoverages.boundingCoordinates.max.latitude")}));} else if (Double.isNaN(coord)) {action.addFieldError("eml.geospatialCoverages[" + index + "].boundingCoordinates.max.latitude",action.getText("validation.invalid",new String[]{action.getText("eml.geospatialCoverages.boundingCoordinates.max.latitude")}));}coord=eml.getGeospatialCoverages().get(index).getBoundingCoordinates().getMin().getLatitude();if (coord == null) {action.addFieldError("eml.geospatialCoverages[" + index + "].boundingCoordinates.min.latitude",action.getText("validation.required",new String[]{action.getText("eml.geospatialCoverages.boundingCoordinates.min.latitude")}));} else if (Double.isNaN(coord)) {action.addFieldError("eml.geospatialCoverages[" + index + "].boundingCoordinates.min.latitude",action.getText("validation.invalid",new String[]{action.getText("eml.geospatialCoverages.boundingCoordinates.min.latitude")}));}if (Strings.isNullOrEmpty(eml.getGeospatialCoverages().get(index).getDescription())) {action.addFieldError("eml.geospatialCoverages[" + index + "].description",action.getText("validation.required",new String[]{action.getText("eml.geospatialCoverages.description")}));} else if (!exists(eml.getGeospatialCoverages().get(index).getDescription(),2)) {action.addFieldError("eml.geospatialCoverages[" + index + "].description",action.getText("validation.short",new String[]{action.getText("eml.geospatialCoverages.description"),"2"}));}}}} else {eml.getGeospatialCoverages().clear();}break;case TAXANOMIC_COVERAGE_SECTION:if (!isTaxonomicPageEmpty(eml)) {int index=0;for (TaxonomicCoverage tc : eml.getTaxonomicCoverages()) {int kw=0;for (TaxonKeyword k : tc.getTaxonKeywords()) {if (!exists(k.getScientificName())) {action.addFieldError("eml.taxonomicCoverages[" + index + "].taxonKeywords["+ kw+ "].scientificName",action.getText("validation.required",new String[]{action.getText("eml.taxonomicCoverages.taxonKeyword.scientificName")}));}kw++;}index++;}}break;case TEMPORAL_COVERAGE_SECTION:if (!isTemporalPageEmpty(eml)) {int index=0;for (TemporalCoverage tc : eml.getTemporalCoverages()) {if (tc.getType() == TemporalCoverageType.SINGLE_DATE && !exists(tc.getStartDate())) {action.addFieldError("eml.temporalCoverages[" + index + "].startDate",action.getText("validation.required",new String[]{action.getText("eml.temporalCoverages.startDate")}));}if (tc.getType() == TemporalCoverageType.DATE_RANGE) {if (!exists(tc.getStartDate())) {action.addFieldError("eml.temporalCoverages[" + index + "].startDate",action.getText("validation.required",new String[]{action.getText("eml.temporalCoverages.startDate")}));}if (!exists(tc.getEndDate())) {action.addFieldError("eml.temporalCoverages[" + index + "].endDate",action.getText("validation.required",new String[]{action.getText("eml.temporalCoverages.endDate")}));}}if (tc.getType() == TemporalCoverageType.FORMATION_PERIOD && !exists(tc.getFormationPeriod())) {action.addFieldError("eml.temporalCoverages[" + index + "].formationPeriod",action.getText("validation.required",new String[]{action.getText("eml.temporalCoverages.formationPeriod")}));}if (tc.getType() == TemporalCoverageType.LIVING_TIME_PERIOD && !exists(tc.getLivingTimePeriod())) {action.addFieldError("eml.temporalCoverages[" + index + "].livingTimePeriod",action.getText("validation.required",new String[]{action.getText("eml.temporalCoverages.livingTimePeriod")}));}index++;}}break;case KEYWORDS_SECTION:if (!isKeywordsPageEmpty(eml)) {int index=0;for (KeywordSet ks : eml.getKeywords()) {if (!exists(ks.getKeywordsString()) || ks.getKeywordsString().equalsIgnoreCase("null")) {action.addFieldError("eml.keywords[" + index + "].keywordsString",action.getText("validation.required",new String[]{action.getText("eml.keywords.keywordsString")}));}if (!exists(ks.getKeywordThesaurus())) {action.addFieldError("eml.keywords[" + index + "].keywordThesaurus",action.getText("validation.required",new String[]{action.getText("eml.keywords.keywordThesaurus")}));}index++;}}break;case PARTIES_SECTION:if (!isAgentsListEmpty(eml.getAssociatedParties())) {for (int index=0; index < eml.getAssociatedParties().size(); index++) {Agent ap=eml.getAssociatedParties().get(index);if (exists(ap.getFirstName()) && !exists(ap.getLastName())) {action.addFieldError("eml.associatedParties[" + index + "].lastName",action.getText("validation.firstname.lastname"));}if (!ap.getUserIds().isEmpty()) {if (exists(ap.getUserIds().get(0).getDirectory()) && !exists(ap.getUserIds().get(0).getIdentifier())) {action.addFieldError("eml.associatedParties[" + index + "].userIds[0].identifier",action.getText("validation.personnel"));} else if (!exists(ap.getUserIds().get(0).getDirectory()) && exists(ap.getUserIds().get(0).getIdentifier())) {action.addFieldError("eml.associatedParties[" + index + "].userIds[0].directory",action.getText("validation.directory"));}}if (!exists(ap.getOrganisation()) && !exists(ap.getLastName()) && !exists(ap.getPosition())) {action.addActionError(action.getText("validation.lastname.organisation.position"));action.addFieldError("eml.associatedParties[" + index + "].organisation",action.getText("validation.required",new String[]{action.getText("eml.associatedParties.organisation")}));action.addFieldError("eml.associatedParties[" + index + "].lastName",action.getText("validation.required",new String[]{action.getText("eml.associatedParties.lastName")}));action.addFieldError("eml.associatedParties[" + index + "].position",action.getText("validation.required",new String[]{action.getText("eml.associatedParties.position")}));}if (exists(ap.getEmail()) && !isValidEmail(ap.getEmail())) {action.addFieldError("eml.associatedParties[" + index + "].email",action.getText("validation.invalid",new String[]{action.getText("eml.associatedParties.email")}));}if (exists(ap.getPhone()) && !isValidPhoneNumber(ap.getPhone())) {action.addFieldError("eml.associatedParties[" + index + "].phone",action.getText("validation.invalid",new String[]{action.getText("eml.associatedParties.phone")}));}if (ap.getHomepage() != null) {if (formatURL(ap.getHomepage()) == null) {action.addFieldError("eml.associatedParties[" + index + "].homepage",action.getText("validation.invalid",new String[]{action.getText("eml.associatedParties.homepage")}));} else {ap.setHomepage(formatURL(ap.getHomepage()));}}}}break;case PROJECT_SECTION:if (!isProjectPageEmpty(eml)) {if (!exists(eml.getProject().getTitle()) || eml.getProject().getTitle().trim().length() == 0) {action.addFieldError("eml.project.title",action.getText("validation.required",new String[]{action.getText("eml.project.title")}));}if (isAgentsListEmpty(eml.getProject().getPersonnel())) {action.addActionError(action.getText("eml.project.personnel.required"));} else {for (int index=0; index < eml.getProject().getPersonnel().size(); index++) {Agent p=eml.getProject().getPersonnel().get(index);if (exists(p.getFirstName()) && !exists(p.getLastName())) {action.addFieldError("eml.project.personnel[" + index + "].lastName",action.getText("validation.firstname.lastname"));} else if (!exists(p.getLastName())) {action.addFieldError("eml.project.personnel[" + index + "].lastName",action.getText("validation.required",new String[]{action.getText("eml.project.personnel.lastName")}));}if (!p.getUserIds().isEmpty()) {if (exists(p.getUserIds().get(0).getDirectory()) && !exists(p.getUserIds().get(0).getIdentifier())) {action.addFieldError("eml.project.personnel[" + index + "].userIds[0].identifier",action.getText("validation.personnel"));} else if (!exists(p.getUserIds().get(0).getDirectory()) && exists(p.getUserIds().get(0).getIdentifier())) {action.addFieldError("eml.project.personnel[" + index + "].userIds[0].directory",action.getText("validation.directory"));}}}}}break;case METHODS_SECTION:if (!isMethodsPageEmpty(eml)) {boolean emptyFields=false;if (Strings.isNullOrEmpty(eml.getSampleDescription()) && Strings.isNullOrEmpty(eml.getStudyExtent()) && Strings.isNullOrEmpty(eml.getQualityControl())) {eml.setSampleDescription(null);eml.setStudyExtent(null);eml.setQualityControl(null);emptyFields=true;}int index=0;for (String method : eml.getMethodSteps()) {if (method.trim().length() == 0) {if (emptyFields && index == 0) {eml.getMethodSteps().clear();break;} else {action.addFieldError("eml.methodSteps[" + index + "]",action.getText("validation.required",new String[]{action.getText("validation.field.required")}));}}index++;}if (!emptyFields) {if (!Strings.isNullOrEmpty(eml.getSampleDescription()) && Strings.isNullOrEmpty(eml.getStudyExtent())) {action.addFieldError("eml.studyExtent",action.getText("validation.required",new String[]{action.getText("eml.studyExtent")}));}if (!Strings.isNullOrEmpty(eml.getStudyExtent()) && Strings.isNullOrEmpty(eml.getSampleDescription())) {action.addFieldError("eml.sampleDescription",action.getText("validation.required",new String[]{action.getText("eml.sampleDescription")}));}}}break;case CITATIONS_SECTION:if (!isCitationsPageEmpty(eml) || resource.isCitationAutoGenerated()) {if (resource.isCitationAutoGenerated()) {URI homepage=cfg.getResourceVersionUri(resource.getShortname(),resource.getNextVersion());String citation=resource.generateResourceCitation(resource.getNextVersion(),homepage);eml.getCitation().setCitation(citation);}if (eml.getCitation() != null) {if (!Strings.isNullOrEmpty(eml.getCitation().getIdentifier()) && !existsInRange(eml.getCitation().getIdentifier(),2,100)) {action.addFieldError("eml.citation.identifier",action.getText("validation.field.invalidSize",new String[]{action.getText("eml.citation.identifier"),"2","100"}));}if (exists(eml.getCitation().getIdentifier()) && !exists(eml.getCitation().getCitation())) {action.addFieldError("eml.citation.citation",action.getText("validation.required",new String[]{action.getText("eml.citation.citation")}));}}int index=0;for (Citation citation : eml.getBibliographicCitations()) {if (!Strings.isNullOrEmpty(citation.getIdentifier()) && !exists(citation.getIdentifier())) {action.addFieldError("eml.bibliographicCitationSet.bibliographicCitations[" + index + "].identifier",action.getText("validation.field.blank",new String[]{action.getText("eml.bibliographicCitationSet.bibliographicCitations.identifier")}));}if (!exists(citation.getCitation())) {action.addFieldError("eml.bibliographicCitationSet.bibliographicCitations[" + index + "].citation",action.getText("validation.required",new String[]{action.getText("validation.field.required")}));}index++;}}break;case COLLECTIONS_SECTION:if (!isCollectionsPageEmpty(eml)) {if (eml.getCollections().isEmpty()) {action.addActionError(action.getText("eml.collection.required"));}for (int index=0; index < eml.getCollections().size(); index++) {Collection c=eml.getCollections().get(index);if (!exists(c.getCollectionName())) {action.addFieldError("eml.collections[" + index + "].collectionName",action.getText("validation.required",new String[]{action.getText("eml.collectionName")}));}}for (int index=0; index < eml.getSpecimenPreservationMethods().size(); index++) {String preservationMethod=eml.getSpecimenPreservationMethods().get(index);if (Strings.isNullOrEmpty(preservationMethod)) {action.addFieldError("eml.specimenPreservationMethods[" + index + "]",action.getText("validation.required",new String[]{action.getText("eml.specimenPreservationMethod")}));}}int index=0;for (JGTICuratorialUnit jcu : eml.getJgtiCuratorialUnits()) {if (jcu.getType() == JGTICuratorialUnitType.COUNT_RANGE) {if (!exists(jcu.getRangeStart())) {action.addFieldError("eml.jgtiCuratorialUnits[" + index + "].rangeStart",action.getText("validation.required",new String[]{action.getText("validation.field.required")}));}if (!exists(jcu.getRangeEnd())) {action.addFieldError("eml.jgtiCuratorialUnits[" + index + "].rangeEnd",action.getText("validation.required",new String[]{action.getText("validation.field.required")}));}}if (jcu.getType() == JGTICuratorialUnitType.COUNT_WITH_UNCERTAINTY) {if (!exists(jcu.getRangeMean())) {action.addFieldError("eml.jgtiCuratorialUnits[" + index + "].rangeMean",action.getText("validation.required",new String[]{action.getText("validation.field.required")}));}if (!exists(jcu.getUncertaintyMeasure())) {action.addFieldError("eml.jgtiCuratorialUnits[" + index + "].uncertaintyMeasure",action.getText("validation.required",new String[]{action.getText("validation.field.required")}));}}if (!exists(jcu.getUnitType())) {action.addFieldError("eml.jgtiCuratorialUnits[" + index + "].unitType",action.getText("validation.required",new String[]{action.getText("eml.jgtiCuratorialUnits.unitType")}));}index++;}}break;case PHYSICAL_SECTION:if (!isPhysicalPageEmpty(eml)) {if (!Strings.isNullOrEmpty(eml.getDistributionUrl())) {String formattedUrl=formatURL(eml.getDistributionUrl());if (formattedUrl == null || !isWellFormedURI(formattedUrl)) {action.addFieldError("eml.distributionUrl",action.getText("validation.invalid",new String[]{action.getText("eml.distributionUrl")}));} else {eml.setDistributionUrl(formattedUrl);}}int index=0;for (PhysicalData pd : eml.getPhysicalData()) {if (!exists(pd.getName())) {action.addFieldError("eml.physicalData[" + index + "].name",action.getText("validation.required",new String[]{action.getText("eml.physicalData.name")}));}if (!exists(pd.getCharset())) {action.addFieldError("eml.physicalData[" + index + "].charset",action.getText("validation.required",new String[]{action.getText("eml.physicalData.charset")}));}if (!exists(pd.getDistributionUrl())) {action.addFieldError("eml.physicalData[" + index + "].distributionUrl",action.getText("validation.required",new String[]{action.getText("eml.physicalData.distributionUrl")}));}if (!exists(pd.getFormat())) {action.addFieldError("eml.physicalData[" + index + "].format",action.getText("validation.required",new String[]{action.getText("eml.physicalData.format")}));}String formattedDistributionUrl=formatURL(pd.getDistributionUrl());if (formattedDistributionUrl == null || !isWellFormedURI(formattedDistributionUrl)) {action.addFieldError("eml.physicalData[" + index + "].distributionUrl",action.getText("validation.invalid",new String[]{action.getText("eml.physicalData.distributionUrl")}));} else {pd.setDistributionUrl(formattedDistributionUrl);}index++;}}break;case ADDITIONAL_SECTION:if (!isAdditionalPageEmpty(eml)) {int index=0;for (String ai : eml.getAlternateIdentifiers()) {if (!exists(ai)) {action.addFieldError("eml.alternateIdentifiers[" + index + "]",action.getText("validation.required",new String[]{action.getText("eml.alternateIdentifier")}));}index++;}}break;default :break;}}}  }
class C{  public ClusterJoinRequestMessage(ClusterJoinRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetNode()) {    this.node=new Node(other.node);  }}  }
class C{  public void insertBeforeNoRedirect(E toInsert,E point){  innerChain.insertBefore(toInsert,point);}  }
class C{  VcfFilterStripper(boolean removeAll){  mRemoveAll=removeAll;  mKeepMode=false;  mFilters=null;}  }
class C{  public static LazyPOrderedSetX<Long> rangeLong(long start,long end){  return fromStreamS(ReactiveSeq.rangeLong(start,end));}  }
class C{  public static void loadInitialData(){  persistSimpleResources(ImmutableList.of(makeRegistrar1(),makeRegistrarContact1(),makeRegistrar2(),makeRegistrarContact2()));}  }
class C{  public IndexedConnectivity(LagGraph lagGraph,boolean excludeSelfOneBack){  if (lagGraph == null) {    throw new NullPointerException("Lag graph must not be null.");  }  this.factors=new ArrayList<>(lagGraph.getFactors());  this.parents=new IndexedParent[this.factors.size()][];  for (int i=0; i < this.factors.size(); i++) {    String factor=this.factors.get(i);    SortedSet<LaggedFactor> factorParents=lagGraph.getParents(factor);    List<IndexedParent> list=new ArrayList<>();    for (    LaggedFactor factorParent1 : factorParents) {      int index=this.factors.indexOf(factorParent1.getFactor());      int lag=factorParent1.getLag();      if (excludeSelfOneBack && index == i && lag == 1) {        continue;      }      IndexedParent parent=new IndexedParent(index,lag);      list.add(parent);    }    IndexedParent[] _parents=new IndexedParent[list.size()];    for (int i2=0; i2 < list.size(); i2++) {      _parents[i2]=list.get(i2);    }    parents[i]=_parents;  }}  }
class C{  public FileSystem(ConcurrentMap<String,File> fileRegion,ConcurrentMap<ChunkKey,byte[]> chunkRegion,FileSystemStats stats){  this.fileRegion=fileRegion;  this.chunkRegion=chunkRegion;  this.stats=stats;}  }
class C{  float nextTab(float h){  if (mTabs != null) {    return mTabs.nextTab(h);  }  return TabStops.nextDefaultStop(h,TAB_INCREMENT);}  }
class C{  public ProtocolDecoderException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void removeUnusableIndexConditions(){  for (int i=0; i < allFilters.length; i++) {    TableFilter f=allFilters[i];    setEvaluatable(f,true);    if (i < allFilters.length - 1 || f.getSession().getDatabase().getSettings().earlyFilter) {      f.optimizeFullCondition(false);    }    f.removeUnusableIndexConditions();  }  for (  TableFilter f : allFilters) {    setEvaluatable(f,false);  }}  }
class C{  public double smoothValue(DoubleMatrix1D parIn){  MGMParams par=new MGMParams(parIn,p,lsum);  for (int i=0; i < par.betad.size(); i++) {    if (par.betad.get(i) < 0)     return Double.POSITIVE_INFINITY;  }  upperTri(par.beta,1);  par.beta.assign(alg.transpose(par.beta),Functions.plus);  for (int i=0; i < q; i++) {    par.phi.viewPart(lcumsum[i],lcumsum[i],l[i],l[i]).assign(0);  }  upperTri(par.phi,0);  par.phi.assign(alg.transpose(par.phi),Functions.plus);  DoubleMatrix2D divBetaD=factory2D.diagonal(factory1D.make(p,1.0).assign(par.betad,Functions.div));  DoubleMatrix2D xBeta=alg.mult(xDat,alg.mult(par.beta,divBetaD));  DoubleMatrix2D dTheta=alg.mult(alg.mult(dDat,par.theta),divBetaD);  DoubleMatrix2D tempLoss=factory2D.make(n,xDat.columns());  DoubleMatrix2D wxProd=alg.mult(xDat,alg.transpose(par.theta));  wxProd.assign(alg.mult(dDat,par.phi),Functions.plus);  for (int i=0; i < n; i++) {    for (int j=0; j < xDat.columns(); j++) {      tempLoss.set(i,j,xDat.get(i,j) - par.alpha1.get(j) - xBeta.get(i,j)- dTheta.get(i,j));    }    for (int j=0; j < dDat.columns(); j++) {      wxProd.set(i,j,wxProd.get(i,j) + par.alpha2.get(j));    }  }  double sqloss=-n / 2.0 * par.betad.copy().assign(Functions.log).zSum() + .5 * Math.pow(alg.normF(alg.mult(tempLoss,factory2D.diagonal(par.betad.copy().assign(Functions.sqrt)))),2);  double catloss=0;  for (int i=0; i < yDat.columns(); i++) {    DoubleMatrix2D wxTemp=wxProd.viewPart(0,lcumsum[i],n,l[i]);    for (int k=0; k < n; k++) {      DoubleMatrix1D curRow=wxTemp.viewRow(k);      catloss-=curRow.get((int)yDat.get(k,i) - 1);      catloss+=logsumexp(curRow);    }  }  return (sqloss + catloss) / ((double)n);}  }
class C{  public CategoryMarker(Comparable key,Paint paint,Stroke stroke){  this(key,paint,stroke,paint,stroke,1.0f);}  }
class C{  public boolean onReceivedHttpAuthRequest(CordovaWebView view,ICordovaHttpAuthHandler handler,String host,String realm){  return false;}  }
class C{  static TopicState topicState(List<PartitionInfo> partitionInfoList,Collection<Broker> brokers,double partitionBrokerRatioThreshold){  Set<Integer> preferredLeaders=new HashSet<>(brokers.size());  Set<Integer> electedLeaders=new HashSet<>(brokers.size());  for (  PartitionInfo partitionInfo : partitionInfoList) {    if (partitionInfo.replicas().length > 0) {      preferredLeaders.add(partitionInfo.replicas()[0].id());    }    if (partitionInfo.leader() != null) {      electedLeaders.add(partitionInfo.leader().id());    }  }  return new TopicState(electedLeaders,preferredLeaders,brokers,partitionInfoList,partitionBrokerRatioThreshold);}  }
class C{  public static synchronized void error(String message,Throwable t){  LogFactory.getLog(ToolBox.getCaller()).error(message,t);}  }
class C{  public static boolean isNull(Object model,String columnName){  final PO po=getPO(model,false);  if (po == null) {    return true;  }  final Object value=po.get_Value(columnName);  return value == null;}  }
class C{  private static int checkFormalTypeParameter(final String signature,int pos){  pos=checkIdentifier(signature,pos);  pos=checkChar(':',signature,pos);  if ("L[T".indexOf(getChar(signature,pos)) != -1) {    pos=checkFieldTypeSignature(signature,pos);  }  while (getChar(signature,pos) == ':') {    pos=checkFieldTypeSignature(signature,pos + 1);  }  return pos;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Bundler putParcelableArray(String key,Parcelable[] value){  bundle.putParcelableArray(key,value);  return this;}  }
class C{  public static boolean isswitch(String cc){  String first4digs=cc.substring(0,4);  String first6digs=cc.substring(0,6);  if (((cc.length() == 16) || (cc.length() == 18) || (cc.length() == 19)) && (first4digs.equals("4903") || first4digs.equals("4905") || first4digs.equals("4911")|| first4digs.equals("4936")|| first6digs.equals("564182")|| first6digs.equals("633110")|| first4digs.equals("6333")|| first4digs.equals("6759")))   return isCreditCard(cc);  return false;}  }
class C{  public void updateLayerLabel(){  layerName.setText(getLayer().getName());}  }
class C{  public boolean addEntry(MAttachmentEntry item){  boolean replaced=false;  boolean retValue=false;  if (item == null)   return false;  if (m_items == null)   loadLOBData();  for (int i=0; i < m_items.size(); i++) {    if (m_items.get(i).getName().equals(item.getName())) {      m_items.set(i,item);      replaced=true;    }  }  if (!replaced) {    retValue=m_items.add(item);  }  log.fine(item.toStringX());  setBinaryData(new byte[0]);  return retValue || replaced;}  }
class C{  public ByteInterleavedRaster(SampleModel sampleModel,DataBuffer dataBuffer,Point origin){  this(sampleModel,dataBuffer,new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null);}  }
class C{  public static void round(Calendar c,String unit){  Integer uu=CALENDAR_UNITS.get(unit);  if (null == uu) {    throw new IllegalArgumentException("Rounding Unit not recognized: " + unit);  }  int u=uu.intValue();switch (u) {case Calendar.YEAR:    c.clear(Calendar.MONTH);case Calendar.MONTH:  c.clear(Calendar.DAY_OF_MONTH);c.clear(Calendar.DAY_OF_WEEK);c.clear(Calendar.DAY_OF_WEEK_IN_MONTH);c.clear(Calendar.DAY_OF_YEAR);c.clear(Calendar.WEEK_OF_MONTH);c.clear(Calendar.WEEK_OF_YEAR);case Calendar.DATE:c.clear(Calendar.HOUR_OF_DAY);c.clear(Calendar.HOUR);c.clear(Calendar.AM_PM);case Calendar.HOUR_OF_DAY:c.clear(Calendar.MINUTE);case Calendar.MINUTE:c.clear(Calendar.SECOND);case Calendar.SECOND:c.clear(Calendar.MILLISECOND);break;default :throw new IllegalStateException("No logic for rounding value (" + u + ") "+ unit);}}  }
class C{  public int hashCode(){  int h=0;  for (int j=realSize(), i=0, t=0; j-- != 0; ) {    while (((key[i]) == ((char)0)))     i++;    t=(key[i]);    t^=(value[i]);    h+=t;    i++;  }  if (containsNullKey)   h+=(value[n]);  return h;}  }
class C{  public void run(){  if (sLogger.isActivated()) {    sLogger.info("Start background processing");  }  SipRequest request;  while ((request=(SipRequest)mBuffer.getObject()) != null) {    try {      dispatch(request,System.currentTimeMillis());    } catch (    PayloadException|RuntimeException e) {      sLogger.error("Failed to dispatch received SIP request! CallId=" + request.getCallId(),e);      handleImsDispatchError(request);    }catch (    NetworkException e) {      if (sLogger.isActivated()) {        sLogger.debug(e.getMessage());      }      handleImsDispatchError(request);    }  }  if (sLogger.isActivated()) {    sLogger.info("End of background processing");  }}  }
class C{  public final boolean remove(FilterHandle filterCallback){  return callbackSet.remove(filterCallback);}  }
class C{  public boolean isFirst() throws SQLException {  checkState();  return rs.isFirst();}  }
class C{  public void readBlockLight(ByteBuf input){  byte[] handle=new byte[LIGHT_LENGTH];  input.readBytes(handle);  blockLight.setHandle(handle);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGraphPackage.COMPOSITE_ELEMENT__REGIONS:    return getRegions();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Object invoke(String methodName,Class[] types,Object[] arguments){  Method method=null;  try {    method=fClass.getDeclaredMethod(methodName,types);  } catch (  SecurityException e) {    fail();  }catch (  NoSuchMethodException ex) {    fail();  }  Assert.isNotNull(method);  method.setAccessible(true);  try {    return method.invoke(fInstance,arguments);  } catch (  IllegalArgumentException e) {    fail();  }catch (  InvocationTargetException e) {    fail();  }catch (  IllegalAccessException e) {    fail();  }  return null;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Seeker.getInstance().getArchiveDirectories(Seeker.PICTURE_DIR_MASK);}  }
class C{  public void update(AnActionEvent event){  final Presentation presentation=event.getPresentation();  final DataContext context=event.getDataContext();  final Project project=CommonDataKeys.PROJECT.getData(context);  final StructuralSearchPlugin plugin=project == null ? null : StructuralSearchPlugin.getInstance(project);  if (plugin == null || plugin.isSearchInProgress() || plugin.isDialogVisible()) {    presentation.setEnabled(false);  } else {    presentation.setEnabled(true);  }  super.update(event);}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  if (listener == null) {    return;  }  if (listener instanceof PropertyChangeListenerProxy) {    PropertyChangeListenerProxy proxy=(PropertyChangeListenerProxy)listener;    addPropertyChangeListener(proxy.getPropertyName(),proxy.getListener());  } else {    this.map.add(null,listener);  }}  }
class C{  public void put(String key,ArrayList<File> files,String contentType,String customFileName) throws FileNotFoundException {  if (key != null) {    List<FileWrapper> fileWrappers=new ArrayList<FileWrapper>();    for (    File file : files) {      if (file == null || !file.exists()) {        throw new FileNotFoundException();      }      fileWrappers.add(new FileWrapper(file,contentType,customFileName));    }    fileArrayParams.put(key,fileWrappers);  }}  }
class C{  private static void uaRIMEq(MatrixBlock in,MatrixBlock out,double[] bv,int[] bvi,BinaryOperator bOp) throws DMLRuntimeException {  int ind0=uarimaxEq(0.0,bv,bvi,bOp);  int m=in.rlen;  for (int i=0; i < m; i++) {    double ai=in.quickGetValue(i,0);    int ind=(ai == 0) ? ind0 : uarimaxEq(ai,bv,bvi,bOp);    out.quickSetValue(i,0,ind);  }}  }
class C{  public final boolean isCdma(){  return mIsCdma;}  }
class C{  private Object executeWithServerAffinity(ServerLocation loc,Op op){  try {    Object retVal=executeOnServer(loc,op,true,false);    affinityRetryCount.set(0);    return retVal;  } catch (  ServerConnectivityException e) {    if (logger.isDebugEnabled()) {      logger.debug("caught exception while executing with affinity:{}",e.getMessage(),e);    }    if (!this.serverAffinityFailover || e instanceof ServerOperationException) {      affinityRetryCount.set(0);      throw e;    }    int retryCount=affinityRetryCount.get();    if ((retryAttempts != -1 && retryCount >= retryAttempts) || retryCount > TX_RETRY_ATTEMPT) {      affinityRetryCount.set(0);      throw e;    }    affinityRetryCount.set(retryCount + 1);  }  this.affinityServerLocation.set(null);  if (logger.isDebugEnabled()) {    logger.debug("reset server affinity: attempting txFailover");  }  AbstractOp absOp=(AbstractOp)op;  absOp.getMessage().setIsRetry();  int transactionId=absOp.getMessage().getTransactionId();  try {    TXFailoverOp.execute(this.pool,transactionId);  } catch (  TransactionException e) {    TXStateProxy txState=TXManagerImpl.getCurrentTXState();    if (txState == null) {      throw e;    } else     if (txState.operationCount() > 1) {      throw e;    }  }  if (op instanceof ExecuteRegionFunctionOpImpl) {    op=new ExecuteRegionFunctionOpImpl((ExecuteRegionFunctionOpImpl)op,(byte)1,new HashSet<String>());    ((ExecuteRegionFunctionOpImpl)op).getMessage().setTransactionId(transactionId);  } else   if (op instanceof ExecuteFunctionOpImpl) {    op=new ExecuteFunctionOpImpl((ExecuteFunctionOpImpl)op,(byte)1);    ((ExecuteFunctionOpImpl)op).getMessage().setTransactionId(transactionId);  }  return this.pool.execute(op);}  }
class C{  private void growIfNeeded(){  if (size == values.length) {    int[] newv=new int[size * 3 / 2 + 10];    System.arraycopy(values,0,newv,0,size);    values=newv;  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:50.450 -0500",hash_original_method="31CB55FEBB712AC9C6C246D13CF90696",hash_generated_method="F38D38CEE1C403E8B7B2BE8AF85EA744") private static void writeSnapshotFile(String processName,PackageInfo packageInfo){  if (!enabled) {    return;  }  samplingProfiler.stop();  String name=processName.replaceAll(":",".");  String path=SNAPSHOT_DIR + "/" + name+ "-"+ startMillis+ ".snapshot";  long start=System.currentTimeMillis();  OutputStream outputStream=null;  try {    outputStream=new BufferedOutputStream(new FileOutputStream(path));    PrintStream out=new PrintStream(outputStream);    generateSnapshotHeader(name,packageInfo,out);    if (out.checkError()) {      throw new IOException();    }    BinaryHprofWriter.write(samplingProfiler.getHprofData(),outputStream);  } catch (  IOException e) {    Log.e(TAG,"Error writing snapshot to " + path,e);    return;  } finally {    IoUtils.closeQuietly(outputStream);  }  new File(path).setReadable(true,false);  long elapsed=System.currentTimeMillis() - start;  Log.i(TAG,"Wrote snapshot " + path + " in "+ elapsed+ "ms.");  samplingProfiler.start(samplingProfilerMilliseconds);}  }
class C{  protected static ResultSet search(Connection conn,String text,int limit,int offset,boolean data) throws SQLException {  SimpleResultSet result=createResultSet(data);  if (conn.getMetaData().getURL().startsWith("jdbc:columnlist:")) {    return result;  }  if (text == null || text.trim().length() == 0) {    return result;  }  try {    IndexAccess access=getIndexAccess(conn);    IndexSearcher searcher=access.searcher;    Analyzer analyzer=access.writer.getAnalyzer();    QueryParser parser=new QueryParser(Version.LUCENE_30,LUCENE_FIELD_DATA,analyzer);    Query query=parser.parse(text);    int maxResults=(limit == 0 ? 100 : limit) + offset;    TopDocs docs=searcher.search(query,maxResults);    if (limit == 0) {      limit=docs.totalHits;    }    for (int i=0, len=docs.scoreDocs.length; i < limit && i + offset < docs.totalHits && i + offset < len; i++) {      ScoreDoc sd=docs.scoreDocs[i + offset];      Document doc=searcher.doc(sd.doc);      float score=sd.score;      String q=doc.get(LUCENE_FIELD_QUERY);      if (data) {        int idx=q.indexOf(" WHERE ");        JdbcConnection c=(JdbcConnection)conn;        Session session=(Session)c.getSession();        Parser p=new Parser(session);        String tab=q.substring(0,idx);        ExpressionColumn expr=(ExpressionColumn)p.parseExpression(tab);        String schemaName=expr.getOriginalTableAliasName();        String tableName=expr.getColumnName();        q=q.substring(idx + " WHERE ".length());        Object[][] columnData=parseKey(conn,q);        result.addRow(schemaName,tableName,columnData[0],columnData[1],score);      } else {        result.addRow(q,score);      }    }  } catch (  Exception e) {    throw convertException(e);  }  return result;}  }
class C{  public void testDemoteLeader() throws Throwable {  List<CopycatServer> servers=createServers(3);  CopycatServer leader=servers.stream().filter(null).findFirst().get();  CopycatServer follower=servers.stream().filter(null).findFirst().get();  follower.cluster().member(leader.cluster().member().address()).onTypeChange(null);  leader.cluster().member().demote(Member.Type.PASSIVE).thenRun(null);  await(10000,2);}  }
class C{  public Coordinate centroid(){  return centroid(this.p0,this.p1,this.p2);}  }
class C{  public static DistributedSchedulingLock updateNGetDistributedScheduleByType(EntityManager em,LockType type,int jobsBlockSize,long schedulingRefreshInterval) throws OptimisticLockException {  EntityTransaction tx=null;  long id=type.ordinal() + 1;  try {    tx=em.getTransaction();    tx.begin();    DistributedSchedulingLock distributedSchedulingLock=getDistributedScheduleByType(em,id);    if (distributedSchedulingLock == null) {      distributedSchedulingLock=new DistributedSchedulingLock(id);      distributedSchedulingLock.setCurrentIndex(jobsBlockSize);      distributedSchedulingLock.setJobCount(getTotalEnabledJobCount(em,type));      distributedSchedulingLock.setNextScheduleStartTime(_toMinutes(System.currentTimeMillis() + schedulingRefreshInterval));      distributedSchedulingLock=em.merge(distributedSchedulingLock);      em.flush();    } else     if (System.currentTimeMillis() > distributedSchedulingLock.getNextScheduleStartTime()) {      distributedSchedulingLock.setCurrentIndex(jobsBlockSize);      distributedSchedulingLock.setJobCount(getTotalEnabledJobCount(em,type));      distributedSchedulingLock.setNextScheduleStartTime(_toMinutes(System.currentTimeMillis() + schedulingRefreshInterval));      distributedSchedulingLock=em.merge(distributedSchedulingLock);      em.flush();    } else {      if ((distributedSchedulingLock.getCurrentIndex() - jobsBlockSize) < distributedSchedulingLock.getJobCount()) {        distributedSchedulingLock.setCurrentIndex(distributedSchedulingLock.getCurrentIndex() + jobsBlockSize);        distributedSchedulingLock=em.merge(distributedSchedulingLock);        em.flush();      }    }    tx.commit();    return distributedSchedulingLock;  } catch (  OptimisticLockException ex) {    if (tx != null && tx.isActive()) {      tx.rollback();    }    throw ex;  }}  }
class C{  private void cmd_find(){  if (m_curTab == null)   return;  cmd_save(false);  new ASearch(aFind,Env.getFrame(this),m_curWindowNo,m_curGC,m_curTab,m_onlyCurrentDays);}  }
class C{  public Object eval(String script) throws ScriptException {  return eval(script,context);}  }
class C{  public BaseDateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,int secondOfMinute,int millisOfSecond){  this(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond,ISOChronology.getInstance());}  }
class C{  public float distance1(FloatMatrix other){  float d=0.0f;  for (int i=0; i < length; i++) {    d+=Math.abs(get(i) - other.get(i));  }  return d;}  }
class C{  private String readValue(char delimiter,boolean resolveEntities,boolean throwOnResolveFailure,ValueContext valueContext) throws IOException, XmlPullParserException {  int start=position;  StringBuilder result=null;  if (valueContext == ValueContext.TEXT && text != null) {    result=new StringBuilder();    result.append(text);  }  while (true) {    if (position >= limit) {      if (start < position) {        if (result == null) {          result=new StringBuilder();        }        result.append(buffer,start,position - start);      }      if (!fillBuffer(1)) {        return result != null ? result.toString() : "";      }      start=position;    }    char c=buffer[position];    if (c == delimiter || (delimiter == ' ' && (c <= ' ' || c == '>')) || c == '&' && !resolveEntities) {      break;    }    if (c != '\r' && (c != '\n' || valueContext != ValueContext.ATTRIBUTE) && c != '&' && c != '<' && (c != ']' || valueContext != ValueContext.TEXT) && (c != '%' || valueContext != ValueContext.ENTITY_DECLARATION)) {      isWhitespace&=(c <= ' ');      position++;      continue;    }    if (result == null) {      result=new StringBuilder();    }    result.append(buffer,start,position - start);    if (c == '\r') {      if ((position + 1 < limit || fillBuffer(2)) && buffer[position + 1] == '\n') {        position++;      }      c=(valueContext == ValueContext.ATTRIBUTE) ? ' ' : '\n';    } else     if (c == '\n') {      c=' ';    } else     if (c == '&') {      isWhitespace=false;      readEntity(result,false,throwOnResolveFailure,valueContext);      start=position;      continue;    } else     if (c == '<') {      if (valueContext == ValueContext.ATTRIBUTE) {        checkRelaxed("Illegal: \"<\" inside attribute value");      }      isWhitespace=false;    } else     if (c == ']') {      if ((position + 2 < limit || fillBuffer(3)) && buffer[position + 1] == ']' && buffer[position + 2] == '>') {        checkRelaxed("Illegal: \"]]>\" outside CDATA section");      }      isWhitespace=false;    } else     if (c == '%') {      throw new XmlPullParserException("This parser doesn't support parameter entities",this,null);    } else {      throw new AssertionError();    }    position++;    result.append(c);    start=position;  }  if (result == null) {    return stringPool.get(buffer,start,position - start);  } else {    result.append(buffer,start,position - start);    return result.toString();  }}  }
class C{  void drawBarBackground(Canvas canvas,float left,float top,float right,float bottom){  canvas.drawRoundRect(new RectF((int)left,(int)top,(int)right,(int)bottom),style.cornerRadius,style.cornerRadius,style.barBackgroundPaint);}  }
class C{  public IgniteUuid xid(){  return xid;}  }
class C{  public void selectTab(int position){  onBottomNavigationItemClick(position);  currentItem=position;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:29.936 -0500",hash_original_method="7A2A4752679C8696C148A96F8F50755B",hash_generated_method="DEF466035A4516BA3399AD6AB5C54816") public final boolean isSecure(Socket sock) throws IllegalArgumentException {  if (sock == null) {    throw new IllegalArgumentException("Socket may not be null.");  }  if (sock.getClass() != Socket.class) {    throw new IllegalArgumentException("Socket not created by this factory.");  }  if (sock.isClosed()) {    throw new IllegalArgumentException("Socket is closed.");  }  return false;}  }
class C{  public static boolean isValidGt(VcfRecord rec,int[] gt){  final int maxId=rec.getAltCalls().size();  for (  int gtId : gt) {    if (gtId < -1 || gtId > maxId) {      return false;    }  }  return true;}  }
class C{  public KMLBalloonTextDecoder(KMLAbstractFeature feature){  if (feature == null) {    String message=Logging.getMessage("nullValue.FeatureIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.feature=feature;}  }
class C{  @NotNull public HttpURLConnection openHttpConnection(@NotNull String location) throws IOException {  URLConnection urlConnection=openConnection(location);  if (urlConnection instanceof HttpURLConnection) {    return (HttpURLConnection)urlConnection;  } else {    throw new IOException("Expected " + HttpURLConnection.class + ", but got "+ urlConnection.getClass());  }}  }
class C{  public static void upto(float self,Number to,@ClosureParams(FirstParam.class) Closure closure){  float to1=to.floatValue();  if (self <= to1) {    for (float i=self; i <= to1; i++) {      closure.call(i);    }  } else   throw new GroovyRuntimeException("The argument (" + to + ") to upto() cannot be less than the value ("+ self+ ") it's called on.");}  }
class C{  public void forceClose(){  if (ipcCache.remove(endpointAddr,this))   stop();}  }
class C{  public void draw(Path p){  g.drawPath(p,state.fillPaint.getPaint());  g.drawPath(p,state.strokePaint.getPaint());}  }
class C{  public int tableLength(){  return info.length / 2 - 1;}  }
class C{  public boolean isPrimitive(){  char tcode=signature.charAt(0);  return ((tcode != 'L') && (tcode != '['));}  }
class C{  void closeConsumer() throws JMSException {  if (ActiveMQRAMessageConsumer.trace) {    ActiveMQRALogger.LOGGER.trace("closeConsumer()");  }  consumer.close();}  }
class C{  public double calculateLogLikelihood(){  if (DEBUG) {    System.out.println("Calling DistributionLikelihood.calculateLogLikelihood()");    System.out.println(distribution.toString());    System.out.println(dataList.toString() + "\n");  }  double logL=0.0;  for (  Attribute<double[]> data : dataList) {    final double[] attributeValue=data.getAttributeValue();    for (int j=Math.max(0,from); j < Math.min(attributeValue.length,to); j++) {      final double value=attributeValue[j] - offset;      if (offset > 0.0 && value < 0.0) {        return Double.NEGATIVE_INFINITY;      }      logL+=distribution.logPdf(value / scale) / scale;    }  }  return logL;}  }
class C{  public JMXConnectorServer(MBeanServer mbeanServer){  this.mbeanServer=mbeanServer;}  }
class C{  public void skip(){  m_nToDo=SKIP;  go();}  }
class C{  protected long doStandardEnqueue(File body) throws Exception {  return enqueueDownloadRequest(body,DOWNLOAD_TO_DOWNLOAD_CACHE_DIR);}  }
class C{  public void appendConsoleOut(String line){  appendConsoleRaw(String.format("[stdout] %s%n",line));}  }
class C{  private void adjustColumnWidths(JTable table){  TableColumnModel model=table.getColumnModel();  for (int column=0; column < table.getColumnCount(); column++) {    TableColumn tc=model.getColumn(column);    int width=tc.getWidth();    for (int row=0; row < table.getRowCount(); row++) {      Component comp=table.prepareRenderer(table.getCellRenderer(row,column),row,column);      width=Math.max(width,comp.getPreferredSize().width);    }    tc.setPreferredWidth(width);  }}  }
class C{  public boolean isValid(RedisKey key){  RedisKey check=getKey(key);  return check.getVersion() == key.getVersion() && check.getUniqueID() == key.getUniqueID();}  }
class C{  public void update(String url,int securityLevel){  URI uri=createURI(url);  updateSecurityIcon(securityLevel);  updateDisplayedUrl(url,uri);}  }
class C{  @NotNull @ObjectiveCName("editGroupTitleWithGid:withTitle:") public Promise<Void> editGroupTitle(final int gid,final String title){  return modules.getGroupsModule().editTitle(gid,title);}  }
class C{  public String toString(){  SimpleSelector s=getSimpleSelector();  if (s.getSelectorType() == SAC_PSEUDO_ELEMENT_SELECTOR) {    return String.valueOf(getAncestorSelector()) + s;  }  return getAncestorSelector() + " > " + s;}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (!(o instanceof PrototypeSize)) {    return false;  }  PrototypeSize size=(PrototypeSize)o;  return prototype.equals(size.prototype);}  }
class C{  public void testClassLoader() throws Exception {  ClassLoader thisLoader=getClass().getClassLoader();  Loader childLoader=new Loader(thisLoader);  Class<?> fooClass=childLoader.createFakeClass();  Method barMethod=fooClass.getMethod("bar");  Map<String,Method> functions=Collections.singletonMap("bar",barMethod);  assertNotSame(thisLoader,fooClass.getClassLoader());  assertNotSame(thisLoader,barMethod.getDeclaringClass().getClassLoader());  Expression expr=JavascriptCompiler.compile("bar()",functions,childLoader);  assertEquals(2.0,expr.evaluate(0,null),DELTA);  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("is not declared by a class which is accessible by the given parent ClassLoader"));  Map<String,Method> mixedFunctions=new HashMap<>(JavascriptCompiler.DEFAULT_FUNCTIONS);  mixedFunctions.putAll(functions);  expr=JavascriptCompiler.compile("bar()",mixedFunctions,childLoader);  assertEquals(2.0,expr.evaluate(0,null),DELTA);  expr=JavascriptCompiler.compile("sqrt(20)",mixedFunctions,childLoader);  assertEquals(Math.sqrt(20),expr.evaluate(0,null),DELTA);  expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("is not declared by a class which is accessible by the given parent ClassLoader"));}  }
class C{  public static Logger init(){  sInstance=new Logger();  return sInstance;}  }
class C{  private int guess(int num){  if (num == k) {    return 0;  } else   if (num < k) {    return 1;  }  return -1;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private static void doAggregate(final IAggregate<?> expr,final IVariable<?> var,final boolean selectDependency,final IBindingSet aggregates,final Iterable<IBindingSet> solutions,final BOpStats stats){  try {    IConstant<?> c=null;    if (expr.isWildcard() && expr.isDistinct()) {      final LinkedHashSet<IBindingSet> set=new LinkedHashSet<IBindingSet>();      expr.reset();      for (      IBindingSet bset : solutions) {        if (set.add(bset)) {          if (selectDependency)           propagateAggregateBindings(aggregates,bset);          expr.get(bset);        }      }      final Object result=expr.done();      if (result != null) {        c=new Constant(result);      }    } else     if (expr.isDistinct()) {      final Set<Solution> set=new LinkedHashSet<Solution>();      expr.reset();      for (      IBindingSet bset : solutions) {        final Object constants[]=new Object[expr.arity()];        for (int i=0; i < expr.arity(); i++) {          constants[i]=((IValueExpression)expr.get(i)).get(bset);        }        final Solution sol=new Solution(constants);        if (set.add(sol)) {          if (selectDependency)           propagateAggregateBindings(aggregates,bset);          expr.get(bset);        }      }      final Object result=expr.done();      if (result != null) {        c=new Constant(result);      }    } else {      expr.reset();      for (      IBindingSet bset : solutions) {        if (selectDependency)         propagateAggregateBindings(aggregates,bset);        expr.get(bset);      }      final Object result=expr.done();      if (result != null) {        c=new Constant(result);      }    }    if (c != null) {      aggregates.set(var,c);    }  } catch (  Throwable t) {    if (InnerCause.isInnerCause(t,SparqlTypeErrorException.class)) {      TypeErrorLog.handleTypeError(t,expr,stats);      return;    }    throw new RuntimeException(t);  }}  }
class C{  @Override public void onNewFrame(HeadTransform headTransform){  Matrix.setLookAtM(mCamera,0,0.0f,0.0f,CAMERA_Z,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f);  checkGLError("onReadyToDraw");}  }
class C{  public void evictAll(){  if (mLruCache != null) {    mLruCache.evictAll();  }  System.gc();}  }
class C{  public static <T>T[] insertAt(T[] dest,T[] src,int offset){  Class<T> componentType=(Class<T>)dest.getClass().getComponentType();  return insertAt(dest,src,offset,componentType);}  }
class C{  protected void analyzeImpl(Analyzer analyzer,boolean allowFlow,IntArray pendingTargets,IntArray completedTargets) throws Exception {  setOffset(0);  pendingTargets.add(0);  ArrayList<CodeAttribute.ExceptionItem> exns;  exns=getExceptions();  for (int i=0; i < exns.size(); i++) {    CodeAttribute.ExceptionItem exn=exns.get(i);    pendingTargets.add(exn.getHandler());  }  analyze(analyzer,allowFlow,pendingTargets,completedTargets);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Boolean isThin(){  return thin;}  }
class C{  public DERGeneralizedTime(String time){  this.time=Strings.toByteArray(time);  try {    this.getDate();  } catch (  ParseException e) {    throw new IllegalArgumentException("invalid date string: " + e.getMessage());  }}  }
class C{  private double[][] normalize(double[][] parameters){  for (int i=0; i < parameters.length; i++) {    for (int j=0; j < parameters[i].length; j++) {      Parameter parameter=parameterFile.get(j);      parameters[i][j]=(parameters[i][j] - parameter.getLowerBound()) / (parameter.getUpperBound() - parameter.getLowerBound());    }  }  return parameters;}  }
class C{  synchronized void ensureValid(){  if (isClosed()) {    throw new ClosedException();  }}  }
class C{  public static final MediaFormat createVideoFormat(String mime,int width,int height){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_WIDTH,width);  format.setInteger(KEY_HEIGHT,height);  return format;}  }
class C{  public void add(String vname){  retainedVars.add(vname);}  }
class C{  @HLEFunction(nid=0x1181E963,version=150,checkInsideInterrupt=true,checkDispatchThreadEnabled=true) public int sceKernelDelaySysClockThreadCB(TPointer64 sysclocksAddr){  long sysclocks=sysclocksAddr.getValue();  int micros=SystemTimeManager.hleSysClock2USec32(sysclocks);  hleKernelDelayThread(micros,true);  return 0;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override protected void appendFields(StringBuffer buff){  super.appendFields(buff);  buff.append("; bucketId=").append(this.bucketId).append("; bucketSize=").append(this.bucketSize);}  }
class C{  public ProfileException(String message){  super(message);}  }
class C{  @Override public int read() throws IOException {  int res=in.read();  if (res < 0) {    throw new EndOfSourceException();  }  return res;}  }
class C{  @Override public void sendLocationList(){  List<Location> locationList=lm.getLocationsByNameList();  ArrayList<Attribute> location;  for (  Location loc : locationList) {    location=new ArrayList<Attribute>(1);    location.add(new Attribute(LOCATIONS,loc));    try {      sendMessage(location);    } catch (    IOException ioe) {      log.debug("could not send train " + loc.getName());    }  }}  }
class C{  protected byte[] engineGetIV(){  return core.getIV();}  }
class C{  private float interpolate(float start,float end,float fraction){  return (1f - fraction) * start + fraction * end;}  }
class C{  public static float[] trimToCapacity(float[] array,int maxCapacity){  if (array.length > maxCapacity) {    float oldArray[]=array;    array=new float[maxCapacity];    System.arraycopy(oldArray,0,array,0,maxCapacity);  }  return array;}  }
class C{  private Object writeReplace() throws ObjectStreamException {  return new LinkedHashMap<K,V>(this);}  }
class C{  public void copy(StateSet set){  if (DEBUG)   Out.dump("StateSet.copy(" + set + ") start");  if (set == null) {    for (int i=0; i < bits.length; i++)     bits[i]=0;    return;  }  if (bits.length < set.bits.length) {    bits=new long[set.bits.length];  } else {    for (int i=set.bits.length; i < bits.length; i++)     bits[i]=0;  }  System.arraycopy(set.bits,0,bits,0,bits.length);  if (DEBUG) {    Out.dump("StateSet.copy(" + set + ") end");    Out.dump("Set is : " + this);  }}  }
class C{  public boolean isHandshakeComplete(){synchronized (this) {    return handshakeComplete;  }}  }
class C{  public boolean isRepeating(){  return bRepeatingSubfields;}  }
class C{  public static synchronized boolean checkRemoveCallerContext(Subject subject){  try {    for (    Principal p : getSubjectPrincipals(subject)) {      final String pname=p.getClass().getName() + "." + p.getName();      final Permission sdp=new SubjectDelegationPermission(pname);      AccessController.checkPermission(sdp);    }  } catch (  SecurityException e) {    return false;  }  return true;}  }
class C{  public static ProcessCtl process(ASyncProcess parent,int WindowNo,ProcessInfo pi,Trx trx){  log.fine("WindowNo=" + WindowNo + " - "+ pi);  MPInstance instance=null;  try {    instance=new MPInstance(Env.getCtx(),pi.getAD_Process_ID(),pi.getRecord_ID());  } catch (  Exception e) {    pi.setSummary(e.getLocalizedMessage());    pi.setError(true);    log.warning(pi.toString());    return null;  }catch (  Error e) {    pi.setSummary(e.getLocalizedMessage());    pi.setError(true);    log.warning(pi.toString());    return null;  }  if (!instance.save()) {    pi.setSummary(Msg.getMsg(Env.getCtx(),"ProcessNoInstance"));    pi.setError(true);    return null;  }  pi.setAD_PInstance_ID(instance.getAD_PInstance_ID());  ProcessParameter para=new ProcessParameter(Env.getFrame((Container)parent),WindowNo,pi);  if (para.initDialog()) {    para.setVisible(true);    if (!para.isOK()) {      pi.setSummary(Msg.getMsg(Env.getCtx(),"ProcessCancelled"));      pi.setError(true);      return null;    }  }  ProcessCtl worker=new ProcessCtl(parent,WindowNo,pi,trx);  if (parent != null) {    worker.start();  } else {    worker.run();  }  return worker;}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  if (bufOff >= maxBuf) {    if (nextChunk() < 0) {      return -1;    }  }  int toSupply=Math.min(len,available());  System.arraycopy(buf,bufOff,b,off,toSupply);  bufOff+=toSupply;  return toSupply;}  }
class C{  @Override public String findToken(){  IRequestInfo iri=super.getCallbacks().getHelpers().analyzeRequest(getMessage());  List<IParameter> list=iri.getParameters();  for (  IParameter p : list) {    if (p.getName().equals(ID)) {      return decode(p.getValue());    }  }  return "Not Found!";}  }
class C{  public void tagGeneratorText(byte[] data) throws IOException {  startTag(SWFConstants.TAG_GENERATOR_TEXT,false);  out.write(data);  completeTag();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public synchronized Future<ReplDBMSHeader> watchForCommittedSequenceNumber(long seqno,boolean cancel) throws InterruptedException {  SeqnoWatchPredicate seqnoPredicate=new SeqnoWatchPredicate(seqno);  return waitForCommittedEvent(seqnoPredicate,cancel);}  }
class C{  private int shrink0(){  EvictableEntry<K,V> entry=queue.poll();  if (entry == null)   return -1;  int size=0;  Node<EvictableEntry<K,V>> meta=entry.removeMeta();  if (meta != null) {    size=entry.size();    memSize.add(-size);    if (!entry.evict())     touch(entry);  }  return size;}  }
class C{  public void generateDigestValues() throws XMLSignatureException, ReferenceNotInitializedException {  for (int i=0; i < this.getLength(); i++) {    Reference currentRef=this.references.get(i);    currentRef.generateDigestValue();  }}  }
class C{  public boolean verify(byte[] data,byte[] signature){  return ECKey.verify(data,signature,getPubKey());}  }
class C{  @Override public V put(K key,V value){  if (key == null) {    return putValueForNullKey(value);  }  int hash=secondaryHash(key);  HashMapEntry<K,V>[] tab=table;  int index=hash & (tab.length - 1);  for (HashMapEntry<K,V> e=tab[index]; e != null; e=e.next) {    if (e.hash == hash && key.equals(e.key)) {      preModify(e);      V oldValue=e.value;      e.value=value;      return oldValue;    }  }  modCount++;  if (size++ > threshold) {    tab=doubleCapacity();    index=hash & (tab.length - 1);  }  addNewEntry(key,value,hash,index);  return null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  int arrayLength(){  return mArray.length;}  }
class C{  public final boolean onKeyDownPanel(int featureId,KeyEvent event){  final int keyCode=event.getKeyCode();  if (event.getRepeatCount() == 0) {    mPanelChordingKey=keyCode;    PanelFeatureState st=getPanelState(featureId,true);    if (!st.isOpen) {      return preparePanel(st,event);    }  }  return false;}  }
class C{  public DateRangeConditionBuilder from(Object from){  this.from=from;  return this;}  }
class C{  public void run(){  ExecutionContext context=ExecutionUtils.currentContext();  List<ViPRTaskMonitor<VolumeRestRep>> tasks=new ArrayList<>();  for (  Host host : hosts) {    try {      tasks.add(createBootVolume(host));    } catch (    ExecutionException e) {      context.logError("computeutils.makebootvolumes.failure",host.getHostName(),e.getMessage());    }  }  if (!ExecutionUtils.waitForTask(tasks,this)) {  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public String apiKey(){  return apiKey;}  }
class C{  @EnsuresQualifierIf(result=true,expression="f1",qualifier=Odd.class) boolean condOddF1(boolean b){  if (b) {    f1=null;    return true;  }  return false;}  }
class C{  public boolean remove(ReadonlyVec3D p){  boolean found=false;  PointOctree leaf=getLeafForPoint(p);  if (leaf != null) {    if (leaf.points.remove(p)) {      found=true;      if (isAutoReducing && leaf.points.size() == 0) {        leaf.reduceBranch();      }    }  }  return found;}  }
class C{  protected boolean beforeSave(boolean newRecord){  setName();  return true;}  }
class C{  private void buildTrees(DepGraph dg){  DepGraphNode bbNodes=(DepGraphNode)dg.firstNode();  for (DepGraphNode n=bbNodes; n != null; n=(DepGraphNode)n.getNext()) {    AbstractBURS_TreeNode cur_parent=AbstractBURS_TreeNode.create(n);    castNode(n).setCurrentParent(cur_parent);    Instruction instr=n.instruction();    for (Enumeration<Operand> uses=instr.getUses(); uses.hasMoreElements(); ) {      Operand op=uses.nextElement();      if (op == null)       continue;      AbstractBURS_TreeNode child;      if (op instanceof RegisterOperand) {        RegisterOperand regOp=(RegisterOperand)op;        if (regOp.getRegister().isValidation())         continue;        DepGraphEdge e=DepGraphEdge.findInputEdge(n,op);        if (e == null) {          child=Register;        } else {          child=castNode(e.fromNode()).getCurrentParent();        }      } else       if (op instanceof IntConstantOperand) {        child=new BURS_IntConstantTreeNode(((IntConstantOperand)op).value);      } else       if (op instanceof LongConstantOperand) {        child=LongConstant;      } else       if (op instanceof AddressConstantOperand) {        child=AddressConstant;      } else       if (op instanceof BranchOperand && instr.isCall()) {        child=BranchTarget;      } else       if (op instanceof InlinedOsrTypeInfoOperand && instr.isYieldPoint()) {        child=NullTreeNode;      } else {        continue;      }      if (cur_parent.getChild1() == null) {        cur_parent.setChild1(child);      } else       if (cur_parent.getChild2() == null) {        cur_parent.setChild2(child);      } else {        AbstractBURS_TreeNode child1=cur_parent.getChild2();        AbstractBURS_TreeNode aux=AbstractBURS_TreeNode.create(OTHER_OPERAND_opcode);        cur_parent.setChild2(aux);        cur_parent=aux;        cur_parent.setChild1(child1);        cur_parent.setChild2(child);      }    }switch (instr.getOpcode()) {case CALL_opcode:case SYSCALL_opcode:case YIELDPOINT_OSR_opcode:      if (cur_parent.getChild2() == null) {        cur_parent.setChild2(NullTreeNode);      }case RETURN_opcode:    if (cur_parent.getChild1() == null) {      cur_parent.setChild1(NullTreeNode);    }}if (mustBeTreeRoot(n)) {  makeTreeRoot(castNode(n).getCurrentParent());}}}  }
class C{  private void writeHandshake(WebSocketOutputStream output,String key) throws WebSocketException {  mHandshakeBuilder.setKey(key);  String requestLine=mHandshakeBuilder.buildRequestLine();  List<String[]> headers=mHandshakeBuilder.buildHeaders();  String handshake=HandshakeBuilder.build(requestLine,headers);  mListenerManager.callOnSendingHandshake(requestLine,headers);  try {    output.write(handshake);    output.flush();  } catch (  IOException e) {    throw new WebSocketException(WebSocketError.OPENING_HAHDSHAKE_REQUEST_FAILURE,"Failed to send an opening handshake request to the server: " + e.getMessage(),e);  }}  }
class C{  public TrashObject(TrashObject parent){  this.id=parent.getId();  this.attachType=parent.getAttachType();  this.attachId=parent.getAttachId();  this.companyId=parent.getCompanyId();  this.projectId=parent.getProjectId();  this.deletedTime=parent.getDeletedTime();}  }
class C{  public boolean isStatic(){  return (this.isDeclaredStatic() || this.isConst());}  }
class C{  public void testNextLongBounded(){  for (long bound=2; bound < MAX_LONG_BOUND; bound+=15485863) {    long f=ThreadLocalRandom.current().nextLong(bound);    assertTrue(0 <= f && f < bound);    int i=0;    long j;    while (i < NCALLS && (j=ThreadLocalRandom.current().nextLong(bound)) == f) {      assertTrue(0 <= j && j < bound);      ++i;    }    assertTrue(i < NCALLS);  }}  }
class C{  private void initIdAndToken(){  boolean setCookie=true;  Object oCfid=urlScope().get(KeyConstants._cfid,null);  Object oCftoken=urlScope().get(KeyConstants._cftoken,null);  if (oCfid != null) {    if (Decision.isGUIdSimple(oCfid)) {      if (!scopeContext.hasExistingCFID(this,Caster.toString(oCfid,null))) {        oCfid=null;        oCftoken=null;      }    } else {      oCfid=null;      oCftoken=null;    }  }  if (oCfid == null) {    setCookie=false;    oCfid=cookieScope().get(KeyConstants._cfid,null);    oCftoken=cookieScope().get(KeyConstants._cftoken,null);  }  if (oCfid != null) {    if (!Decision.isGUIdSimple(oCfid)) {      oCfid=null;      oCftoken=null;      Charset charset=getWebCharset();      javax.servlet.http.Cookie[] cookies=getHttpServletRequest().getCookies();      String name, value;      if (cookies != null) {        for (int i=0; i < cookies.length; i++) {          name=ReqRspUtil.decode(cookies[i].getName(),charset.name(),false);          if ("cfid".equalsIgnoreCase(name)) {            value=ReqRspUtil.decode(cookies[i].getValue(),charset.name(),false);            if (Decision.isGUIdSimple(value))             oCfid=value;            ReqRspUtil.removeCookie(getHttpServletResponse(),name);          } else           if ("cftoken".equalsIgnoreCase(name)) {            value=ReqRspUtil.decode(cookies[i].getValue(),charset.name(),false);            if (isValidCfToken(value))             oCftoken=value;            ReqRspUtil.removeCookie(getHttpServletResponse(),name);          }        }      }      if (oCfid != null) {        setCookie=true;        if (oCftoken == null)         oCftoken="0";      }    }  }  if (oCfid == null || oCftoken == null) {    setCookie=true;    cfid=ScopeContext.getNewCFId();    cftoken=ScopeContext.getNewCFToken();  } else {    cfid=Caster.toString(oCfid,null);    cftoken=Caster.toString(oCftoken,"0");  }  if (setCookie && applicationContext.isSetClientCookies())   setClientCookies();}  }
class C{  public NodeSet(NodeList nodelist){  this(32);  addNodes(nodelist);}  }
class C{  static boolean isSymLink(File link){  return Files.isSymbolicLink(link.toPath());}  }
class C{  public Matrix3d sub(Matrix3dc subtrahend){  return sub(subtrahend,this);}  }
class C{  public static DLMetadata deserialize(URI uri,byte[] data) throws IOException {  String metadata=new String(data,UTF_8);  LOG.debug("Parsing dl metadata {}.",metadata);  BufferedReader br=new BufferedReader(new StringReader(metadata));  String versionLine=br.readLine();  if (null == versionLine) {    throw new IOException("Empty DL Metadata.");  }  int version;  try {    version=Integer.parseInt(versionLine);  } catch (  NumberFormatException nfe) {    version=-1;  }  if (METADATA_FORMAT_VERSION != version) {    throw new IOException("Metadata version not compatible. Expected " + METADATA_FORMAT_VERSION + " but got "+ version);  }  String type=br.readLine();  if (!BK_DL_TYPE.equals(type)) {    throw new IOException("Invalid DL type : " + type);  }  DLConfig dlConfig=new BKDLConfig(uri);  StringBuilder sb=new StringBuilder();  String line;  while (null != (line=br.readLine())) {    sb.append(line);  }  dlConfig.deserialize(sb.toString().getBytes(UTF_8));  return new DLMetadata(type,dlConfig,version);}  }
class C{  @Override public void writeTree(JsonGenerator jgen,JsonNode rootNode) throws IOException, JsonProcessingException {  SerializationConfig config=copySerializationConfig();  _serializerProvider.serializeValue(config,jgen,rootNode,_serializerFactory);  if (config.isEnabled(SerializationConfig.Feature.FLUSH_AFTER_WRITE_VALUE)) {    jgen.flush();  }}  }
class C{  public ZapHttpConnection(HostConfiguration hostConfiguration){  super(hostConfiguration);}  }
class C{  public boolean isEmpty(){  return stack.isEmpty();}  }
class C{  public static MasterPublicKey decrypt(String passphrase,byte[] encrypted) throws HyperLedgerException {  try {    byte[] key=SCrypt.generate(passphrase.getBytes("UTF-8"),BITCOIN_SEED,16384,8,8,32);    SecretKeySpec keyspec=new SecretKeySpec(key,"AES");    Cipher cipher=Cipher.getInstance("AES/CBC/PKCS5Padding","BC");    byte[] iv=Arrays.copyOfRange(encrypted,0,16);    byte[] data=Arrays.copyOfRange(encrypted,16,encrypted.length);    cipher.init(Cipher.DECRYPT_MODE,keyspec,new IvParameterSpec(iv));    return MasterPublicKey.parse(new String(cipher.doFinal(data)));  } catch (  UnsupportedEncodingException|InvalidAlgorithmParameterException|NoSuchPaddingException|NoSuchProviderException|NoSuchAlgorithmException|InvalidKeyException|BadPaddingException|IllegalBlockSizeException e) {    throw new HyperLedgerException(e);  }}  }
class C{  public RecordBuilderImpl snap(final View measuredView){  RecordBuilderImpl recordBuilder=new RecordBuilderImpl(this).setView(measuredView).setTestClass(TestNameDetector.getTestClass()).setTestName(TestNameDetector.getTestName());  return recordBuilder;}  }
class C{  public boolean isOneAssetPerUOM(){  MProductCategory pc=MProductCategory.get(getCtx(),getM_Product_Category_ID());  if (pc.getA_Asset_Group_ID() == 0)   return false;  return pc.getA_Asset_Group().isOneAssetPerUOM();}  }
class C{  static boolean eliminateLoads(IR ir,DF_Solution available){  HashMap<UseRecord,Register> registers=new HashMap<UseRecord,Register>();  UseRecordSet UseRepSet=replaceLoads(ir,available,registers);  replaceDefs(ir,UseRepSet,registers);  return (UseRepSet.size() > 0);}  }
class C{  public int compareTo(Object obj){  if (!(obj instanceof NameRecord)) {    return -1;  }  NameRecord rec=(NameRecord)obj;  if (platformID > rec.platformID) {    return 1;  } else   if (platformID < rec.platformID) {    return -1;  } else   if (platformSpecificID > rec.platformSpecificID) {    return 1;  } else   if (platformSpecificID < rec.platformSpecificID) {    return -1;  } else   if (languageID > rec.languageID) {    return 1;  } else   if (languageID < rec.languageID) {    return -1;  } else   if (nameID > rec.nameID) {    return 1;  } else   if (nameID < rec.nameID) {    return -1;  } else {    return 0;  }}  }
class C{  public ArrayFastmapDistanceMatrix(List<?> userObjects,DistanceCalculator distanceFunction,boolean distributeObjects){  init(distanceFunction,userObjects);  this.distributeObjects=distributeObjects;}  }
class C{  public synchronized boolean incrementShareCounter(){  if (isBeingDeallocate) {    return false;  }  shareCounter++;  return true;}  }
class C{  @Override public void notifyError(WorkerManagerErrorInfo res){  if (_listener != null)   _listener.onError(res);}  }
class C{  public void onCollideWithPlayer(EntityPlayer p_70100_1_){  if (!this.worldObj.isRemote && this.inGround && this.arrowShake <= 0) {    boolean flag=this.canBePickedUp == 1 || this.canBePickedUp == 2 && p_70100_1_.capabilities.isCreativeMode;    if (this.canBePickedUp == 1 && !p_70100_1_.inventory.addItemStackToInventory(new ItemStack(NCItems.dUBullet,1))) {      flag=false;    }    if (flag) {      this.playSound("random.pop",0.2F,((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);      p_70100_1_.onItemPickup(this,1);      this.setDead();    }  }}  }
class C{  public boolean contains(int left,int top,int right,int bottom){  return this.left < this.right && this.top < this.bottom && this.left <= left && this.top <= top && this.right >= right && this.bottom >= bottom;}  }
class C{  public synchronized TableDetails findTableDetails(Context context,Class<?> object){  if (!mCache.containsKey(object)) {    try {      mCache.put(object,ReflectionHelper.getTableDetails(context,object));    } catch (    Exception ex) {      throw new QuantumFluxException("Failed load table details for object " + object.getSimpleName(),ex);    }    if (!mCache.containsKey(object))     throw new QuantumFluxException("No table details could be found for supplied object: " + object.getSimpleName());  }  return mCache.get(object);}  }
class C{  public <T>T shallowClone(final T o){  if (o == null)   return null;  if (!cloningEnabled)   return o;  try {    return cloneInternal(o,null);  } catch (  final IllegalAccessException e) {    throw new CloningException("error during cloning of " + o,e);  }}  }
class C{  public static int mersennePrime(int num){  return (int)Math.pow(2,num) - 1;}  }
class C{  public FPSTextureView removeAllChildren(){  mDisplayList.clear();  return this;}  }
class C{  private static void displayHelpIfNeeded(){  int i=0;  String module=null;  if (parms.getBoolean("h"))   i=1;  if (parms.getBoolean("v"))   i=2;  if (parms.getBoolean("hf"))   i=3; else {    module=parms.getString("hm");    if (module.length() > 0)     i=5;  }  if (i > 0 && asXML)   System.out.println("<product>\n");switch (i) {case 1:    System.out.println(getVersion());  System.out.println("(use -hf to see more help options)");System.out.println(Config.describe(false));break;case 2:System.out.println(getVersion());break;case 3:System.out.println(getVersion());System.out.println(Config.describe(true));break;case 5:System.out.println(getVersion());System.out.println(describeModules(module,true));break;}if (i > 0) {if (asXML) System.out.println("</product>\n");System.exit(0);}}  }
class C{  private Path generateFilledPath(List<Entry> entries,float fillMin,int from,int to){  float phaseX=mAnimator.getPhaseX();  float phaseY=mAnimator.getPhaseY();  Path filled=new Path();  filled.moveTo(entries.get(from).getXIndex(),fillMin);  filled.lineTo(entries.get(from).getXIndex(),entries.get(from).getVal() * phaseY);  for (int x=from + 1, count=(int)Math.ceil((to - from) * phaseX + from); x < count; x++) {    Entry e=entries.get(x);    filled.lineTo(e.getXIndex(),e.getVal() * phaseY);  }  filled.lineTo(entries.get(Math.max(Math.min((int)Math.ceil((to - from) * phaseX + from) - 1,entries.size() - 1),0)).getXIndex(),fillMin);  filled.close();  return filled;}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;}  }
class C{  protected void addAliasedAnnotation(Class<?> alias,AnnotationMirror type){  aliases.put(alias.getCanonicalName(),type);}  }
class C{  public static Byte toByte(Object o) throws PageException {  if (o instanceof Byte)   return (Byte)o;  return new Byte(toByteValue(o));}  }
class C{  public void messageArrived(String topic,MqttMessage message){  try {    subPanelContr.updateReceivedData(topic,message.getPayload(),message.getQos(),message.isRetained());  } catch (  Exception e) {  }}  }
class C{  private void createSelectionPanel(boolean order,boolean invoice,boolean project){  int row=0;  selectionPanel.setBorder(new TitledBorder(Msg.translate(Env.getCtx(),"Selection")));  productField=new CComboBox(getProducts());  CLabel label=new CLabel(Msg.translate(Env.getCtx(),"M_Product_ID"));  label.setLabelFor(productField);  selectionPanel.add(label,new ALayoutConstraint(row++,0));  selectionPanel.add(productField);  productField.addActionListener(this);  label=new CLabel(productQty.getTitle());  label.setLabelFor(productQty);  selectionPanel.add(label);  selectionPanel.add(productQty);  productQty.setValue(Env.ONE);  productQty.addActionListener(this);  if (order) {    orderField=new CComboBox(getOrders());    label=new CLabel(Msg.translate(Env.getCtx(),"C_Order_ID"));    label.setLabelFor(orderField);    selectionPanel.add(label,new ALayoutConstraint(row++,0));    selectionPanel.add(orderField);    orderField.addActionListener(this);  }  if (invoice) {    invoiceField=new CComboBox(getInvoices());    label=new CLabel(Msg.translate(Env.getCtx(),"C_Invoice_ID"));    label.setLabelFor(invoiceField);    selectionPanel.add(label,new ALayoutConstraint(row++,0));    selectionPanel.add(invoiceField);    invoiceField.addActionListener(this);  }  if (project) {    projectField=new CComboBox(getProjects());    label=new CLabel(Msg.translate(Env.getCtx(),"C_Project_ID"));    label.setLabelFor(projectField);    selectionPanel.add(label,new ALayoutConstraint(row++,0));    selectionPanel.add(projectField);    projectField.addActionListener(this);  }  confirmPanel.getOKButton().setEnabled(false);  Dimension size=selectionPanel.getPreferredSize();  size.width=WINDOW_WIDTH;  selectionPanel.setPreferredSize(size);}  }
class C{  public static boolean isAllowSupertypeConversions(){  return m_allowSupertypeConversions;}  }
class C{  @Bean public Binding bindDeadLetterQueueToDeadLetterExchange(){  return BindingBuilder.bind(deadLetterQueue()).to(deadLetterExchange());}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public void removeNode(String nodeId) throws IOException, MalformedObjectNameException {  this.mbean.removeNode(nodeId);}  }
class C{  public static XContent xContent(byte[] data,int offset,int length){  XContentType type=xContentType(data,offset,length);  if (type == null) {    throw new ElasticsearchParseException("Failed to derive xcontent");  }  return xContent(type);}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  DynaValidatorForm oForm=(DynaValidatorForm)form;  String cDocumentoPago=null;  Liquidacion oLiquidacion=null;  String cXMLDatos=null;  byte[] datosAFirmar=null;  String cDatosAFirmar=null;  try {    oLiquidacion=PagoElectronicoManagerHelper.obtenerDatosLiquidacion(request,oForm);    cXMLDatos=PagoElectronicoManagerHelper.obtenerDocumentoPago(request,oForm);    cDocumentoPago=FormCreator.crearResumenPago(oLiquidacion.getTasa(),cXMLDatos,request);    datosAFirmar=Goodies.fromStrToUTF8(cXMLDatos);    cDatosAFirmar=Base64Util.encode(datosAFirmar);    cDatosAFirmar=cDatosAFirmar.replaceAll("\n","");    cDatosAFirmar=cDatosAFirmar.replaceAll("\r","");  } catch (  Exception e) {    logger.error(e.getMessage(),e);    request.setAttribute(ERROR_KEY,e.getMessage());    return mapping.findForward(ERROR_FORWARD);  }  request.setAttribute(DOC_PAGO_KEY,cDocumentoPago);  request.setAttribute(DATOS_PARA_FIRMAR_KEY,cDatosAFirmar);  request.setAttribute(DATOS_FIRMADOS,cXMLDatos);  return mapping.findForward(SUCCESS_FORWARD);}  }
class C{  private Type(final int sort,final char[] buf,final int off,final int len){  this.sort=sort;  this.buf=buf;  this.off=off;  this.len=len;}  }
class C{  private void serializeTestSummary(KXmlSerializer serializer) throws IOException {  serializer.startTag(ns,SUMMARY_TAG);  serializer.attribute(ns,HAS_CRASH_ATTR,getHasCrash());  serializer.attribute(ns,CRASH_FILE_ATTR,getCrashFile());  serializer.attribute(ns,DURATION_ATTR,getDuration());  serializer.attribute(CtsXmlResultReporter.ns,RESULT_ATTR,getResult());  serializer.endTag(ns,SUMMARY_TAG);}  }
class C{  private void cancelA11yHint(){  mHandler.cancelA11yHintTimeout();  mPendingHint=null;}  }
class C{  public Matrix leftMultiply(Permutation p){  int[] pVec=p.getVector();  if (pVec.length != numRows) {    throw new ArithmeticException("length mismatch");  }  int[][] result=new int[numRows][];  for (int i=numRows - 1; i >= 0; i--) {    result[i]=IntUtils.clone(matrix[pVec[i]]);  }  return new GF2Matrix(numRows,result);}  }
class C{  public static RadioButton createToggle(String text,ButtonGroup bg){  return createToggle(text,null,bg);}  }
class C{  public static void play(double in){  if (in < -1.0)   in=-1.0;  if (in > +1.0)   in=+1.0;  short s=(short)(MAX_16_BIT * in);  buffer[bufferSize++]=(byte)s;  buffer[bufferSize++]=(byte)(s >> 8);  if (bufferSize >= buffer.length) {    line.write(buffer,0,buffer.length);    bufferSize=0;  }}  }
class C{  private static String formattedFieldName(final String fieldName){  if (isSecondLetterUpperCase(fieldName)) {    return fieldName;  }  return camelCase(fieldName);}  }
class C{  public void callAddress(int address,IAction afterAction,boolean returnVoid){  callAddress(null,address,afterAction,returnVoid,false,null);}  }
class C{  public void itemStateChanged(ItemEvent ev){  IndexedRadioButton icb=(IndexedRadioButton)ev.getSource();  aimingAt=icb.getIndex();  this.firingDisplay.updateTarget();}  }
class C{  public Enumeration oids(){  return ordering.elements();}  }
class C{  public AutoFocusRing(Invalidator invalidator,Paint ringPaint,float enterDurationMillis,float exitDurationMillis){  super(invalidator,ringPaint,enterDurationMillis,exitDurationMillis);}  }
class C{  public MqttConnectOptions(){}  }
class C{  public boolean isGeneralizationOf(final CopyRule other){  if (statement == null || other.statement == null) {    return false;  }  return varIsGeneralization(statement.getSubjectVar(),other.statement.getSubjectVar()) && varIsGeneralization(statement.getPredicateVar(),other.statement.getPredicateVar()) && varIsGeneralization(statement.getObjectVar(),other.statement.getObjectVar())&& varIsGeneralization(statement.getContextVar(),other.statement.getContextVar())&& (condition == null || condition.equals(other.condition));}  }
class C{  public Object clone(){  ForceItem item=new ForceItem();  item.mass=this.mass;  System.arraycopy(force,0,item.force,0,2);  System.arraycopy(velocity,0,item.velocity,0,2);  System.arraycopy(location,0,item.location,0,2);  System.arraycopy(plocation,0,item.plocation,0,2);  for (int i=0; i < k.length; ++i) {    System.arraycopy(k[i],0,item.k[i],0,2);    System.arraycopy(l[i],0,item.l[i],0,2);  }  return item;}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.MULTIPLE_IS_A__EXTENDS_NAME_1:    setExtendsName_1(EXTENDS_NAME_1_EDEFAULT);  return;case UmplePackage.MULTIPLE_IS_A__ANONYMOUS_MULTIPLE_IS_A11:getAnonymous_multipleIsA_1_1().clear();return;}super.eUnset(featureID);}  }
class C{  private void checkAndPerformCloseOnCompletionAction(){  try {synchronized (checkClosed().getConnectionMutex()) {      if (isCloseOnCompletion() && !this.connection.getDontTrackOpenResources() && getOpenResultSetCount() == 0 && (this.results == null || !this.results.reallyResult() || this.results.isClosed()) && (this.generatedKeysResults == null || !this.generatedKeysResults.reallyResult() || this.generatedKeysResults.isClosed())) {        realClose(false,false);      }    }  } catch (  SQLException e) {  }}  }
class C{  public void print(long x){  printHeader();  for (int i=0; i < size(); i++)   ((PrintStream)m_Streams.get(i)).print(x);  flush();}  }
class C{  public synchronized void removeMemberAsync(Contact contact){  notifyMemberLeft(contact);}  }
class C{  private void addKeyCondition(Entity entity){  addKeyCondition(entity.getEntityType(),entity.getKey().getValue());}  }
class C{  public void addSubjectAlternativeName(int tag,byte[] name) throws IOException {  GeneralName alt_name=new GeneralName(tag,name);  if (subjectAltNames == null) {    subjectAltNames=new ArrayList[9];  }  if (subjectAltNames[tag] == null) {    subjectAltNames[tag]=new ArrayList<GeneralName>();  }  subjectAltNames[tag].add(alt_name);}  }
class C{  public static int countAdjErrors(Graph graph1,Graph graph2){  if (graph1 == null) {    throw new NullPointerException("The reference graph is missing.");  }  if (graph2 == null) {    throw new NullPointerException("The target graph is missing.");  }  graph2=GraphUtils.replaceNodes(graph2,graph1.getNodes());  graph1=GraphUtils.undirectedGraph(graph1);  graph2=GraphUtils.undirectedGraph(graph2);  int count=0;  Set<Edge> edges1=graph1.getEdges();  for (  Edge edge : edges1) {    if (!graph2.isAdjacentTo(edge.getNode1(),edge.getNode2())) {      ++count;    }  }  return count;}  }
class C{  public static String deflate(String uri){  return deflate(uri,gPrefix);}  }
class C{  public static boolean isGuiAvailable(){  return ThreadGroupContext.getContext().isGuiAvailable();}  }
class C{  public WARCWritable(){  this.record=null;}  }
class C{  @Override public void write(String str,int off,int len) throws IOException {  out.write(str,off,len);}  }
class C{  protected void sequence_UnionTypeExpressionOLD(ISerializationContext context,UnionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public Long addNewUserWithTimeZone(String SID,String username,String userpass,String lastname,String firstname,String email,String additionalname,String street,String zip,String fax,long states_id,String town,long language_id,String baseURL,String jNameTimeZone) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkWebServiceLevel(user_level)) {      Long user_id=userManagement.registerUser(username,userpass,lastname,firstname,email,new Date(),street,additionalname,fax,zip,states_id,town,language_id,"",baseURL,true,jNameTimeZone);      if (user_id < 0) {        return user_id;      }      Users user=userManagement.getUserById(user_id);      user.setStatus(1);      user.setUpdatetime(new Date());      userManagement.updateUser(user);      return user_id;    } else {      return new Long(-26);    }  } catch (  Exception err) {    log.error("setUserObject",err);    throw new AxisFault(err.getMessage());  }}  }
class C{  public void writeThumbImage(){  String thumbUrl=getArtworkUrl(MediaFileType.THUMB);  if (StringUtils.isNotEmpty(thumbUrl)) {    boolean firstImage=true;    MediaFile mf=getMediaFiles(MediaFileType.VIDEO).get(0);    String filename;    String basename=FilenameUtils.getBaseName(mf.getFilename());    if (isDisc()) {      basename="VIDEO_TS";    }switch (TvShowModuleManager.SETTINGS.getTvShowEpisodeThumbFilename()) {case FILENAME_THUMB_POSTFIX:      filename=basename + "-thumb." + FilenameUtils.getExtension(thumbUrl);    break;case FILENAME_THUMB:  filename=basename + "." + FilenameUtils.getExtension(thumbUrl);break;case FILENAME_THUMB_TBN:filename=basename + ".tbn";break;default :filename="";break;}if (StringUtils.isBlank(thumbUrl) || StringUtils.isBlank(filename)) {return;}MediaEntityImageFetcherTask task=new MediaEntityImageFetcherTask(this,thumbUrl,MediaArtworkType.THUMB,filename,firstImage);TmmTaskManager.getInstance().addImageDownloadTask(task);}}  }
class C{  public static Indicator serializableInstance(){  return new Indicator();}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,String encoding) throws IOException {  writeLines(lines,lineEnding,output,Charsets.toCharset(encoding));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Node textNode;  Node retval;  Node lastChild;  Document otherDoc;  doc=(Document)load("hc_staff",true);  otherDoc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=otherDoc.createTextNode("terday");{    boolean success=false;    try {      retval=titleAttr.appendChild(textNode);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  private List<ClassDoc> computeUniqueCatchList(ClassDoc[] exceptions){  List<ClassDoc> uniqueList=new ArrayList<ClassDoc>();  uniqueList.add(env.docRuntimeException());  uniqueList.add(env.docRemoteException());  nextException:   for (  ClassDoc ex : exceptions) {    if (env.docException().subclassOf(ex)) {      uniqueList.clear();      break;    } else     if (!ex.subclassOf(env.docException())) {      continue;    }    for (Iterator<ClassDoc> i=uniqueList.iterator(); i.hasNext(); ) {      ClassDoc ex2=i.next();      if (ex.subclassOf(ex2)) {        continue nextException;      } else       if (ex2.subclassOf(ex)) {        i.remove();      }    }    uniqueList.add(ex);  }  return uniqueList;}  }
class C{  void close() throws IOException {  in.close();}  }
class C{  public InputStream executeAndReturnStdoutAsInputStream(String[] rawArgs) throws IOException, InterruptedException, MameExecutionException {  InputStream is=this.inputStreamsToReturn.get(this.inputStreamIndex);  this.inputStreamIndex++;  return is;}  }
class C{  public Vector(int size){  super(size,1);}  }
class C{  public static String join(List<?> things,String delim){  StringBuilder builder=new StringBuilder();  boolean first=true;  for (  Object thing : things) {    if (first) {      first=false;    } else {      builder.append(delim);    }    builder.append(thing.toString());  }  return builder.toString();}  }
class C{  public boolean checkAssumptions(){  ExprNode[] assumps=this.tool.getAssumptions();  boolean[] isAxiom=this.tool.getAssumptionIsAxiom();  for (int i=0; i < assumps.length; i++) {    try {      if ((!isAxiom[i]) && !this.tool.isValid(assumps[i])) {        MP.printError(EC.TLC_ASSUMPTION_FALSE,assumps[i].toString());        return false;      }    } catch (    Exception e) {      MP.printError(EC.TLC_ASSUMPTION_EVALUATION_ERROR,new String[]{assumps[i].toString(),e.getMessage()});      return false;    }  }  return true;}  }
class C{  private static void writeAffinityFunction(BinaryRawWriter out,AffinityFunction f){  if (f instanceof PlatformDotNetAffinityFunction)   f=((PlatformDotNetAffinityFunction)f).getFunc();  if (f instanceof FairAffinityFunction) {    out.writeByte((byte)1);    FairAffinityFunction f0=(FairAffinityFunction)f;    out.writeInt(f0.getPartitions());    out.writeBoolean(f0.isExcludeNeighbors());    out.writeByte((byte)0);    out.writeObject(null);  } else   if (f instanceof RendezvousAffinityFunction) {    out.writeByte((byte)2);    RendezvousAffinityFunction f0=(RendezvousAffinityFunction)f;    out.writeInt(f0.getPartitions());    out.writeBoolean(f0.isExcludeNeighbors());    out.writeByte((byte)0);    out.writeObject(null);  } else   if (f instanceof PlatformAffinityFunction) {    PlatformAffinityFunction f0=(PlatformAffinityFunction)f;    AffinityFunction baseFunc=f0.getBaseFunc();    if (baseFunc instanceof FairAffinityFunction) {      out.writeByte((byte)1);      out.writeInt(f0.partitions());      out.writeBoolean(((FairAffinityFunction)baseFunc).isExcludeNeighbors());      out.writeByte(f0.getOverrideFlags());      out.writeObject(f0.getUserFunc());    } else     if (baseFunc instanceof RendezvousAffinityFunction) {      out.writeByte((byte)2);      out.writeInt(f0.partitions());      out.writeBoolean(((RendezvousAffinityFunction)baseFunc).isExcludeNeighbors());      out.writeByte(f0.getOverrideFlags());      out.writeObject(f0.getUserFunc());    } else {      out.writeByte((byte)3);      out.writeInt(f0.partitions());      out.writeBoolean(false);      out.writeByte(f0.getOverrideFlags());      out.writeObject(f0.getUserFunc());    }  } else {    out.writeByte((byte)0);  }}  }
class C{  private void declareExtensions(){  new AclFeed().declareExtensions(extProfile);  new DocumentFeed().declareExtensions(extProfile);  new GlossaryFeed().declareExtensions(extProfile);  new TranslationMemoryFeed().declareExtensions(extProfile);}  }
class C{  public Element(final CharSequence name,final boolean breaksFlow,final boolean isSimple,final boolean isImplicit){  this.name=new MutableString(name);  this.nameLength=name.length();  this.breaksFlow=breaksFlow;  this.isSimple=isSimple;  this.isImplicit=isImplicit;  this.contentModel=new ReferenceLinkedOpenHashSet<Element>(Hash.DEFAULT_INITIAL_SIZE,.5f);}  }
class C{  protected TupleExpr selectNextTupleExpr(List<TupleExpr> expressions,Map<TupleExpr,Double> cardinalityMap,Map<TupleExpr,List<Var>> varsMap,Map<Var,Integer> varFreqMap,Set<String> boundVars){  TupleExpr result=null;  if (expressions.size() > 1) {    double lowestCardinality=Double.POSITIVE_INFINITY;    for (    TupleExpr tupleExpr : expressions) {      double cardinality=getTupleExprCardinality(tupleExpr,cardinalityMap,varsMap,varFreqMap,boundVars);      if (cardinality < lowestCardinality || result == null) {        lowestCardinality=cardinality;        result=tupleExpr;      }    }  } else {    result=expressions.get(0);  }  return result;}  }
class C{  private void shrink(){  long maxMem=this.maxMemSize;  if (maxMem > 0) {    long startMemSize=memSize.longValue();    if (startMemSize >= maxMem)     for (long i=maxMem; i < startMemSize && memSize.longValue() > maxMem; ) {      int size=shrink0();      if (size == -1)       break;      i+=size;    }  }  int max=this.max;  if (max > 0) {    int startSize=set.sizex();    if (startSize >= max + (maxMem > 0 ? 1 : this.batchSize)) {      for (int i=max; i < startSize && set.sizex() > max; i++) {        if (shrink0() == -1)         break;      }    }  }}  }
class C{  private static Object[] fitToVargs(Object[] argumentArrayOrig,CachedClass[] paramTypes){  Class vargsClassOrig=paramTypes[paramTypes.length - 1].getTheClass().getComponentType();  Class vargsClass=ReflectionCache.autoboxType(vargsClassOrig);  Object[] argumentArray=argumentArrayOrig.clone();  MetaClassHelper.unwrap(argumentArray);  if (argumentArray.length == paramTypes.length - 1) {    Object[] newArgs=new Object[paramTypes.length];    System.arraycopy(argumentArray,0,newArgs,0,argumentArray.length);    Object vargs=Array.newInstance(vargsClass,0);    newArgs[newArgs.length - 1]=vargs;    return newArgs;  } else   if (argumentArray.length == paramTypes.length) {    Object lastArgument=argumentArray[argumentArray.length - 1];    if (lastArgument != null && !lastArgument.getClass().isArray()) {      Object wrapped=makeCommonArray(argumentArray,paramTypes.length - 1,vargsClass);      Object[] newArgs=new Object[paramTypes.length];      System.arraycopy(argumentArray,0,newArgs,0,paramTypes.length - 1);      newArgs[newArgs.length - 1]=wrapped;      return newArgs;    } else {      return argumentArray;    }  } else   if (argumentArray.length > paramTypes.length) {    Object[] newArgs=new Object[paramTypes.length];    System.arraycopy(argumentArray,0,newArgs,0,paramTypes.length - 1);    Object vargs=makeCommonArray(argumentArray,paramTypes.length - 1,vargsClass);    newArgs[newArgs.length - 1]=vargs;    return newArgs;  } else {    throw new GroovyBugError("trying to call a vargs method without enough arguments");  }}  }
class C{  public void keyReleased(KeyEvent e){  if (e.getKeyCode() == KeyEvent.VK_ESCAPE && !getText().equals(m_oldText)) {    log.fine("VMemo.keyReleased - ESC");    setText(m_oldText);    return;  }}  }
class C{  public PaymentProcessorSurrogate(final CustomerOrderPaymentService customerOrderPaymentService){  super(customerOrderPaymentService);  this.customerOrderPaymentService=customerOrderPaymentService;}  }
class C{  static void testClassNames(List<String> classNames){  System.out.println("test: " + classNames);  List<String> options=new ArrayList<String>();  options.add("-proc:only");  options.add("-classpath");  options.add(System.getProperty("test.classes"));  JavaCompiler javaCompiler=ToolProvider.getSystemJavaCompiler();  JavaCompiler.CompilationTask compileTask=javaCompiler.getTask(null,null,null,options,classNames,null);  List<Processor> processors=new ArrayList<Processor>();  processors.add(new ClassNameProber());  compileTask.setProcessors(processors);  Boolean goodResult=compileTask.call();  if (!goodResult) {    error("Errors found during compile.");  }}  }
class C{  protected void onGc(E e){}  }
class C{  public static JPopupMenu leftShift(JPopupMenu self,JMenuItem item){  self.add(item);  return self;}  }
class C{  public GemFireException(){  super();}  }
class C{  public boolean firstTimeIn(){  try {    mRetainedFragment=(RetainedFragment)mFragmentManager.get().findFragmentByTag(mRetainedFragmentTag);    if (mRetainedFragment == null) {      Log.d(TAG,"Creating new RetainedFragment " + mRetainedFragmentTag);      mRetainedFragment=new RetainedFragment();      mFragmentManager.get().beginTransaction().add(mRetainedFragment,mRetainedFragmentTag).commit();      return true;    } else {      Log.d(TAG,"Returning existing RetainedFragment " + mRetainedFragmentTag);      return false;    }  } catch (  NullPointerException e) {    Log.d(TAG,"NPE in firstTimeIn()");    return false;  }}  }
class C{  public List<Site> listSitesInState(String vdcShortId,SiteState state){  List<Site> result=new ArrayList<Site>();  for (  Site site : listSites(vdcShortId)) {    if (site.getState().equals(state)) {      result.add(site);    }  }  return result;}  }
class C{  protected SipProviderImpl(SipStackImpl sipStack){  this.eventScanner=sipStack.getEventScanner();  this.sipStack=sipStack;  this.eventScanner.incrementRefcount();  this.listeningPoints=new ConcurrentHashMap<String,ListeningPointImpl>();  this.automaticDialogSupportEnabled=this.sipStack.isAutomaticDialogSupportEnabled();  this.dialogErrorsAutomaticallyHandled=this.sipStack.isAutomaticDialogErrorHandlingEnabled();}  }
class C{  private static void create2Marketplaces() throws Exception {  marketplaces=new LinkedList<VOMarketplace>();  for (int i=0; i < 2; i++) {    VOMarketplace marketplace=factory.createMarketplaceVO(null,false,"mp");    marketplaces.add(mpService_Operator.createMarketplace(marketplace));  }  List<String> supplierIds=new LinkedList<String>();  supplierIds.add(supplierList.get(0).getOrganizationId());  mpService_Operator.addOrganizationsToMarketplace(supplierIds,marketplaces.get(0).getMarketplaceId());  mpService_Operator.addOrganizationsToMarketplace(supplierIds,marketplaces.get(1).getMarketplaceId());}  }
class C{  public List<NamedRelatedVirtualPoolRep> listByTenant(URI tenantId){  UriBuilder builder=client.uriBuilder(baseUrl);  builder.queryParam(SearchConstants.TENANT_ID_PARAM,tenantId);  VirtualPoolList response=client.getURI(VirtualPoolList.class,builder.build());  return ResourceUtils.defaultList(response.getVirtualPool());}  }
class C{  public static Address dzmmap(Address address,Extent size){  if (VM.VerifyAssertions) {    VM._assert(isPageAligned(address) && isPageMultiple(size));  }  int prot=PROT_READ | PROT_WRITE | PROT_EXEC;  int flags=MAP_ANONYMOUS | MAP_PRIVATE | MAP_FIXED;  return mmap(address,size,prot,flags);}  }
class C{  public BitmapAjaxCallback round(int radius){  this.round=radius;  return this;}  }
class C{  @Override public double filterFitness(double fitness){  return Math.exp(fitness / temperature);}  }
class C{  @Override public void emitList(ArrayList<HashMap<K,Integer>> tlist){  list.emit(tlist);}  }
class C{  public NexusBlock findBlockName(String blockName){  if (blockName.equalsIgnoreCase(TAXA_BLOCK.toString())) {    nextBlock=TAXA_BLOCK;  } else   if (blockName.equalsIgnoreCase(CHARACTERS_BLOCK.toString())) {    nextBlock=CHARACTERS_BLOCK;  } else   if (blockName.equalsIgnoreCase(DATA_BLOCK.toString())) {    nextBlock=DATA_BLOCK;  } else   if (blockName.equalsIgnoreCase(UNALIGNED_BLOCK.toString())) {    nextBlock=UNALIGNED_BLOCK;  } else   if (blockName.equalsIgnoreCase(DISTANCES_BLOCK.toString())) {    nextBlock=DISTANCES_BLOCK;  } else   if (blockName.equalsIgnoreCase(TREES_BLOCK.toString())) {    nextBlock=TREES_BLOCK;  } else   if (blockName.equalsIgnoreCase(CALIBRATION_BLOCK.toString())) {    nextBlock=CALIBRATION_BLOCK;  }  return nextBlock;}  }
class C{  @Override public void displayAcceptedOffers(List<Offer> acceptedOffers){  this.acceptedOffers=acceptedOffers;}  }
class C{  public void cleanUp(){  segments=new Vector<Point2D>();  totalDistance=0.0;  distance=0.0;  coordString=null;}  }
class C{  public void addField(Field field){  getFields().add(field);}  }
class C{  public _BuildControllerUpdate(final _BuildControllerUpdate_Flag[] flags){  super(flags);}  }
class C{  protected DoubleMatrix1D viewSelectionLike(int[] offsets){  throw new InternalError();}  }
class C{  public SVG12CSSEngine(Document doc,ParsedURL uri,ExtendedParser p,ValueManager[] vms,ShorthandManager[] sms,CSSContext ctx){  super(doc,uri,p,mergeArrays(SVG_VALUE_MANAGERS,vms),mergeArrays(SVG_SHORTHAND_MANAGERS,sms),ctx);  lineHeightIndex=LINE_HEIGHT_INDEX;}  }
class C{  public JInternalFrame(String title,boolean resizable){  this(title,resizable,false,false,false);}  }
class C{  public static String utf8BytesToString(byte[] bytes,int start,int length){  char[] chars=localBuffer.get();  if (chars == null || chars.length < length) {    chars=new char[length];    localBuffer.set(chars);  }  int outAt=0;  for (int at=start; length > 0; ) {    int v0=bytes[at] & 0xFF;    char out;switch (v0 >> 4) {case 0x00:case 0x01:case 0x02:case 0x03:case 0x04:case 0x05:case 0x06:case 0x07:{        length--;        if (v0 == 0) {          return throwBadUtf8(v0,at);        }        out=(char)v0;        at++;        break;      }case 0x0c:case 0x0d:{      length-=2;      if (length < 0) {        return throwBadUtf8(v0,at);      }      int v1=bytes[at + 1] & 0xFF;      if ((v1 & 0xc0) != 0x80) {        return throwBadUtf8(v1,at + 1);      }      int value=((v0 & 0x1f) << 6) | (v1 & 0x3f);      if ((value != 0) && (value < 0x80)) {        return throwBadUtf8(v1,at + 1);      }      out=(char)value;      at+=2;      break;    }case 0x0e:{    length-=3;    if (length < 0) {      return throwBadUtf8(v0,at);    }    int v1=bytes[at + 1] & 0xFF;    if ((v1 & 0xc0) != 0x80) {      return throwBadUtf8(v1,at + 1);    }    int v2=bytes[at + 2] & 0xFF;    if ((v2 & 0xc0) != 0x80) {      return throwBadUtf8(v2,at + 2);    }    int value=((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) | (v2 & 0x3f);    if (value < 0x800) {      return throwBadUtf8(v2,at + 2);    }    out=(char)value;    at+=3;    break;  }default :{  return throwBadUtf8(v0,at);}}chars[outAt]=out;outAt++;}return new String(chars,0,outAt);}  }
class C{  private void onPrintersDiscovered(List<PrinterRec> printers){  Log.i(CupsPrintApp.LOG_TAG,"onPrintersDiscovered(" + printers + ")");  List<PrinterInfo> printersInfo=new ArrayList<>(printers.size());  for (  PrinterRec rec : printers) {    final String localId=rec.getProtocol() + "://" + rec.getHost()+ ":"+ rec.getPort()+ "/printers/"+ rec.getQueue();    final PrinterId printerId=mPrintService.generatePrinterId(localId);    printersInfo.add(new PrinterInfo.Builder(printerId,rec.getNickname(),PrinterInfo.STATUS_IDLE).build());  }  addPrinters(printersInfo);}  }
class C{  private boolean isTargetSignature(Method aMethod,Class<?>[] parameters){  boolean theReturn=false;  Class<?>[] thisMethodsParameters=aMethod.getParameterTypes();  if (thisMethodsParameters.length == parameters.length) {    for (int i=0; i < parameters.length; i++) {      Class<?> thisParm=thisMethodsParameters[i];      Class<?> target=parameters[i];      theReturn=thisParm.equals(target) || thisParm.isAssignableFrom(target);      if (!theReturn) {        break;      }    }  }  return theReturn;}  }
class C{  private boolean looksLikeMethodCall(){  nextToken();  return fToken == Symbols.TokenIDENT;}  }
class C{  public Field findField(String fieldName){  Field theReturn=null;  Class<?> currentClass=m_class;  while (true) {    try {      Field[] fields=currentClass.getDeclaredFields();      for (      Field field : fields) {        int modifiers=field.getModifiers();        if (field.getName().equals(fieldName) && Modifier.isPublic(modifiers)) {          theReturn=field;          break;        }      }    } catch (    Throwable t) {      break;    }    currentClass=currentClass.getSuperclass();    if (null == currentClass) {      break;    }  }  return theReturn;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public long count(){  long count=0;  while (iterator.hasNext()) {    iterator.nextInt();    count++;  }  return count;}  }
class C{  @Override protected RoleInfo prepareConstraintInfo(String pathInContext,Request request){  final Switchboard sb=Switchboard.getSwitchboard();  final boolean adminAccountGrantedForLocalhost=sb.getConfigBool(SwitchboardConstants.ADMIN_ACCOUNT_FOR_LOCALHOST,false);  final boolean adminAccountNeededForAllPages=sb.getConfigBool(SwitchboardConstants.ADMIN_ACCOUNT_All_PAGES,false);  String refererHost;  refererHost=request.getRemoteAddr();  serverAccessTracker.track(refererHost,pathInContext);  try {    refererHost=new MultiProtocolURL(request.getHeader("Referer")).getHost();  } catch (  MalformedURLException e) {    refererHost=null;  }  final boolean accessFromLocalhost=Domains.isLocalhost(request.getRemoteHost()) && (refererHost == null || refererHost.length() == 0 || Domains.isLocalhost(refererHost));  final boolean grantedForLocalhost=adminAccountGrantedForLocalhost && accessFromLocalhost;  boolean protectedPage=adminAccountNeededForAllPages || (pathInContext.indexOf("_p.") > 0);  if (!protectedPage && !sb.getConfigBool(SwitchboardConstants.PUBLIC_SEARCHPAGE,true)) {    protectedPage=pathInContext.startsWith("/solr/") || pathInContext.startsWith("/gsa/");  }  if (protectedPage) {    if (grantedForLocalhost) {      return null;    } else     if (accessFromLocalhost) {      final String credentials=request.getHeader("Authorization");      if (credentials != null && credentials.length() > 60 && credentials.startsWith("Basic ")) {        final String foruser=sb.getConfig(SwitchboardConstants.ADMIN_ACCOUNT_USER_NAME,"admin");        final String adminAccountBase64MD5=sb.getConfig(SwitchboardConstants.ADMIN_ACCOUNT_B64MD5,"");        final String b64=Base64Order.standardCoder.encodeString(foruser + ":" + adminAccountBase64MD5);        if ((credentials.substring(6)).equals(b64))         return null;      }    }    RoleInfo roleinfo=new RoleInfo();    roleinfo.setChecked(true);    roleinfo.addRole(AccessRight.ADMIN_RIGHT.toString());    return roleinfo;  }  return super.prepareConstraintInfo(pathInContext,request);}  }
class C{  public void info(String trace){  printTrace(trace,INFO_LEVEL);}  }
class C{  public void commit(){  if (isBeingEdited()) {    boolean success=false;    try {      if (originalEntry != null) {        doUpdateExisting();      } else {        doAddNew();      }      success=true;    } catch (    ServiceException e) {      SpreadsheetApiDemo.showErrorBox(e);    }catch (    IOException e) {      SpreadsheetApiDemo.showErrorBox(e);    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public double transform(double value){  return value;}  }
class C{  public BinaryFile open(String pszFilename) throws IOException {  fileName=pszFilename;  fpDDF=new BinaryBufferedFile(pszFilename);  byte[] achLeader=new byte[DDF_LEADER_SIZE];  if (fpDDF.read(achLeader) != DDF_LEADER_SIZE) {    destroy();    if (Debug.debugging("iso8211")) {      Debug.output("DDFModule: Leader is short on DDF file " + pszFilename);    }    return null;  }  int i;  boolean bValid=true;  for (i=0; i < (int)DDF_LEADER_SIZE; i++) {    if (achLeader[i] < 32 || achLeader[i] > 126) {      bValid=false;    }  }  if (achLeader[5] != '1' && achLeader[5] != '2' && achLeader[5] != '3') {    bValid=false;  }  if (achLeader[6] != 'L') {    bValid=false;  }  if (achLeader[8] != '1' && achLeader[8] != ' ') {    bValid=false;  }  if (bValid) {    _recLength=Integer.parseInt(new String(achLeader,0,5));    _interchangeLevel=achLeader[5];    _leaderIden=achLeader[6];    _inlineCodeExtensionIndicator=achLeader[7];    _versionNumber=achLeader[8];    _appIndicator=achLeader[9];    _fieldControlLength=Integer.parseInt(new String(achLeader,10,2));    _fieldAreaStart=Integer.parseInt(new String(achLeader,12,5));    _extendedCharSet=new String((char)achLeader[17] + "" + (char)achLeader[18]+ ""+ (char)achLeader[19]);    _sizeFieldLength=Integer.parseInt(new String(achLeader,20,1));    _sizeFieldPos=Integer.parseInt(new String(achLeader,21,1));    _sizeFieldTag=Integer.parseInt(new String(achLeader,23,1));    if (_recLength < 12 || _fieldControlLength == 0 || _fieldAreaStart < 24 || _sizeFieldLength == 0 || _sizeFieldPos == 0 || _sizeFieldTag == 0) {      bValid=false;    }    if (Debug.debugging("iso8211")) {      Debug.output("bValid = " + bValid + ", from "+ new String(achLeader));      Debug.output(toString());    }  }  if (!bValid) {    destroy();    if (Debug.debugging("iso8211")) {      Debug.error("DDFModule: File " + pszFilename + " does not appear to have a valid ISO 8211 header.");    }    return null;  }  if (Debug.debugging("iso8211")) {    Debug.output("DDFModule:  header parsed successfully");  }  byte[] pachRecord=new byte[_recLength];  System.arraycopy(achLeader,0,pachRecord,0,achLeader.length);  int numNewRead=pachRecord.length - achLeader.length;  if (fpDDF.read(pachRecord,achLeader.length,numNewRead) != numNewRead) {    if (Debug.debugging("iso8211")) {      Debug.error("DDFModule: Header record is short on DDF file " + pszFilename);    }    return null;  }  int nFieldEntryWidth=_sizeFieldLength + _sizeFieldPos + _sizeFieldTag;  int nFieldDefnCount=0;  for (i=DDF_LEADER_SIZE; i < _recLength; i+=nFieldEntryWidth) {    if (pachRecord[i] == DDF_FIELD_TERMINATOR)     break;    nFieldDefnCount++;  }  paoFieldDefns=new Vector();  for (i=0; i < nFieldDefnCount; i++) {    if (Debug.debugging("iso8211")) {      Debug.output("DDFModule.open: Reading field " + i);    }    byte[] szTag=new byte[128];    int nEntryOffset=DDF_LEADER_SIZE + i * nFieldEntryWidth;    int nFieldLength, nFieldPos;    System.arraycopy(pachRecord,nEntryOffset,szTag,0,_sizeFieldTag);    nEntryOffset+=_sizeFieldTag;    nFieldLength=Integer.parseInt(new String(pachRecord,nEntryOffset,_sizeFieldLength));    nEntryOffset+=_sizeFieldLength;    nFieldPos=Integer.parseInt(new String(pachRecord,nEntryOffset,_sizeFieldPos));    byte[] subPachRecord=new byte[nFieldLength];    System.arraycopy(pachRecord,_fieldAreaStart + nFieldPos,subPachRecord,0,nFieldLength);    paoFieldDefns.add(new DDFFieldDefinition(this,new String(szTag,0,_sizeFieldTag),subPachRecord));  }  achLeader=null;  pachRecord=null;  nFirstRecordOffset=fpDDF.getFilePointer();  return fpDDF;}  }
class C{  public void releaseReadIOBuffer(byte[] buf){  if (buf != null) {    if (buf != _readIOBuffer) {      throw new IllegalArgumentException("Trying to release buffer not owned by the context");    }    _readIOBuffer=null;    _bufferRecycler.releaseByteBuffer(BufferRecycler.ByteBufferType.READ_IO_BUFFER,buf);  }}  }
class C{  public XmlTextBuilder(int initialCapacity){  m_textBuf=new StringBuffer(initialCapacity);  m_auxBuf=new StringBuffer(AUX_CAPACITY);}  }
class C{  public static boolean isValid(String data){  return (data.matches(DEVICE_PATTERN));}  }
class C{  public RotateBitmap(Bitmap bitmap,int rotation){  mBitmap=bitmap;  mRotation=rotation % 360;}  }
class C{  private boolean searchPage(final int page,final int x1,final int y1,final int x2,final int y2,final int currentKey,final ObservableList<String> resultListModel) throws Exception {  final PdfGroupingAlgorithms grouping;  final PdfPageData pageSize=decode_pdf.getPdfPageData();  if (page == commonValues.getCurrentPage()) {    grouping=decode_pdf.getGroupingObject();  } else {    decode_pdf.decodePageInBackground(page);    grouping=decode_pdf.getBackgroundGroupingObject();  }  final SearchListener listener=new DefaultSearchListener();  grouping.generateTeasers();  grouping.setIncludeHTML(false);  resultsList.setSearchTerm(searchText.getText().trim());  final SortedMap highlightsWithTeasers=grouping.findTextWithinInAreaWithTeasers(x1,y1,x2,y2,pageSize.getRotation(page),searchTerms,searchTypeParameters,listener);  if (!highlightsWithTeasers.isEmpty()) {    itemFoundCount+=highlightsWithTeasers.size();    for (    final Object o : highlightsWithTeasers.entrySet()) {      final Map.Entry e=(Map.Entry)o;      final Object highlight=e.getKey();      final String teaser=(String)e.getValue();      if (currentKey == searchKey) {        resultListModel.add(teaser);      }      final Integer key=textRectangles.size();      textRectangles.put(key,highlight);      textPages.put(key,page);    }  }  lastPage=page;  return !endSearch;}  }
class C{  public static long max(long x,long y){  return (x >= y) ? x : y;}  }
class C{  public RoundedColorDrawable(float[] radii,int color){  this(color);  setRadii(radii);}  }
class C{  public boolean forEachKey(TLongProcedure procedure){  return forEach(procedure);}  }
class C{  private Key backupKeyToKey(String backupKey) throws InvalidBackupException {  try {    Key key=Key.parseFrom(Base64.decode(backupKey,Base64.DEFAULT));    if (key.checksum != checkKey(key)) {      key=null;      throw new InvalidBackupException("invalid key read from stream" + backupKey);    }    return key;  } catch (  InvalidProtocolBufferNanoException e) {    throw new InvalidBackupException(e);  }catch (  IllegalArgumentException e) {    throw new InvalidBackupException(e);  }}  }
class C{  @Override protected EClass eStaticClass(){  return N4mfPackage.Literals.SIMPLE_PROJECT_DESCRIPTION;}  }
class C{  public void toEPL(StringWriter writer,EPStatementFormatter formatter){  String delimiter="";  for (  OnInsertSplitStreamItem item : items) {    writer.append(delimiter);    item.getInsertInto().toEPL(writer,formatter,true);    item.getSelectClause().toEPL(writer,formatter,true,false);    if (item.getWhereClause() != null) {      writer.append(" where ");      item.getWhereClause().toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);    }    delimiter=" ";  }  if (!first) {    writer.append(" output all");  }}  }
class C{  @Override public int hashCode(){  int hashCode=cachedHashCode;  if (hashCode == 0) {    hashCode=5;    hashCode=11 * hashCode + Arrays.hashCode(eras);    hashCode=11 * hashCode + Arrays.hashCode(months);    hashCode=11 * hashCode + Arrays.hashCode(shortMonths);    hashCode=11 * hashCode + Arrays.hashCode(weekdays);    hashCode=11 * hashCode + Arrays.hashCode(shortWeekdays);    hashCode=11 * hashCode + Arrays.hashCode(ampms);    hashCode=11 * hashCode + Arrays.deepHashCode(getZoneStringsWrapper());    hashCode=11 * hashCode + Objects.hashCode(localPatternChars);    cachedHashCode=hashCode;  }  return hashCode;}  }
class C{  public void useDefaults(){  setAutoStart(false);  setDuration(1000);  setRepeatCount(ObjectAnimator.INFINITE);  setRepeatDelay(0);  setRepeatMode(ObjectAnimator.RESTART);  mMask.angle=MaskAngle.CW_0;  mMask.shape=MaskShape.LINEAR;  mMask.dropoff=0.5f;  mMask.fixedWidth=0;  mMask.fixedHeight=0;  mMask.intensity=0.0f;  mMask.relativeWidth=1.0f;  mMask.relativeHeight=1.0f;  mMask.tilt=20;  mMaskTranslation=new MaskTranslation();  setBaseAlpha(0.3f);  resetAll();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Tree importNextTree() throws IOException, ImportException {  FlexibleTree tree=null;  try {    skipUntil("(");    unreadCharacter('(');    FlexibleNode root=readInternalNode(lastTree);    tree=new FlexibleTree(root,false,true);  } catch (  EOFException e) {  }  lastTree=tree;  return tree;}  }
class C{  void putChannel(final StoredClientChannel channel){  putChannel(channel,true);}  }
class C{  public static Step fromCursor(Cursor cursor){  Step step=new Step();  for (int c=0; c < cursor.getColumnCount(); c++) {    String columnName=cursor.getColumnName(c);    if (columnName.equals(RecipeInstructionsTable.PHOTO_COLUMN)) {      step.setPhoto(cursor.getString(c));    } else     if (columnName.equals(RecipeInstructionsTable.DESCRIPTION_COLUMN)) {      step.setDescription(cursor.getString(c));    }  }  return step;}  }
class C{  public long skip(long n) throws IOException {  if (n < 0L)   throw new IllegalArgumentException("skip value is negative");synchronized (lock) {    ensureOpen();    int avail=buf.length - pos;    if (avail > 0) {      if (n <= avail) {        pos+=n;        return n;      } else {        pos=buf.length;        n-=avail;      }    }    return avail + super.skip(n);  }}  }
class C{  private void synchronizeThread(final TargetProcessThread oldThread,final TargetProcessThread newThread){  if (oldThread != null) {    oldThread.removeListener(m_threadListener);  }  if (newThread != null) {    newThread.addListener(m_threadListener);  }  m_model.setActiveThread(newThread);}  }
class C{  private String guessName(Pdu pdu){  String villageName="anon";  try {    Message message=messageFactory.fromPdu(pdu);switch (message.getType()) {case OwnHomeData:case VisitedHomeData:case EnemyHomeData:      Message user=message.getMessage("user");    villageName=user.getString("userName");  break;case WarHomeData:WarVillage warVillage=Json.valueOf(message.getString("homeVillage"),WarVillage.class);villageName=warVillage.name;break;case HomeBattleReplayData:Replay replay=Json.valueOf(message.getString("replay"),Replay.class);villageName=replay.defender.name;break;}} catch (RuntimeException|IOException e) {log.warn("Couldn't extract name from pdu {}: {}",pdu.getId(),e.toString());}return sanitize(villageName);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.EXPORTED_VARIABLE_BINDING__DEFINED_VARIABLE:    setDefinedVariable((TVariable)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  protected void sortResources(){  WebLogicResourceComparator priorityComparator=new WebLogicResourceComparator();  List<Resource> resources=getResources();  Collections.sort(resources,priorityComparator);}  }
class C{  @Nullable public static WebsiteAddress create(String originOrHostOrPattern){  if (originOrHostOrPattern == null || originOrHostOrPattern.isEmpty()) {    return null;  }  if (originOrHostOrPattern.startsWith(ANY_SUBDOMAIN_PATTERN)) {    String origin=null;    String scheme=null;    String host=originOrHostOrPattern.substring(ANY_SUBDOMAIN_PATTERN.length());    boolean omitProtocolAndPort=true;    return new WebsiteAddress(originOrHostOrPattern,origin,scheme,host,omitProtocolAndPort);  }  if (originOrHostOrPattern.indexOf(SCHEME_SUFFIX) != -1) {    Uri uri=Uri.parse(originOrHostOrPattern);    String origin=trimTrailingBackslash(originOrHostOrPattern);    boolean omitProtocolAndPort=HTTP_SCHEME.equals(uri.getScheme()) && (uri.getPort() == -1 || uri.getPort() == 80);    return new WebsiteAddress(originOrHostOrPattern,origin,uri.getScheme(),uri.getHost(),omitProtocolAndPort);  }  String origin=null;  String scheme=null;  boolean omitProtocolAndPort=true;  return new WebsiteAddress(originOrHostOrPattern,origin,scheme,originOrHostOrPattern,omitProtocolAndPort);}  }
class C{  public static void addSentencePreviousMeta(Relationship relationship,Vertex previousQuestionInput,Network network){  if (previousQuestionInput != null) {    Vertex previousQuestion=previousQuestionInput.getRelationship(Primitive.INPUT);    if (previousQuestion != null) {      Vertex meta=network.createMeta(relationship);      meta.addRelationship(Primitive.PREVIOUS,previousQuestion);    }  }}  }
class C{  @Override public void requestLocationSuccess(String locationName){  weatherUtils.requestWeather(locationName,this);  location.realLocation=locationName;  DatabaseHelper.getInstance(this).insertLocation(location);}  }
class C{  private void drawCircle(Canvas canvas,float cx,float cy,int color,float pct){  mPaint.setColor(color);  canvas.save();  canvas.translate(cx,cy);  float radiusScale=INTERPOLATOR.getInterpolation(pct);  canvas.scale(radiusScale,radiusScale);  canvas.drawCircle(0,0,cx,mPaint);  canvas.restore();}  }
class C{  @Override public void process(JCas aJCas) throws AnalysisEngineProcessException {  modelProvider.configure(aJCas.getCas());  posMappingProvider.configure(aJCas.getCas());  constituentMappingProvider.configure(aJCas.getCas());  Type typeToParse;  if (annotationTypeToParse != null) {    typeToParse=aJCas.getCas().getTypeSystem().getType(annotationTypeToParse);  } else {    typeToParse=JCasUtil.getType(aJCas,Sentence.class);  }  FSIterator<Annotation> typeToParseIterator=aJCas.getAnnotationIndex(typeToParse).iterator();  while (typeToParseIterator.hasNext()) {    Annotation currAnnotationToParse=typeToParseIterator.next();    if (StringUtils.isBlank(currAnnotationToParse.getCoveredText())) {      continue;    }    List<HasWord> tokenizedSentence=new ArrayList<HasWord>();    List<Token> tokens=new ArrayList<Token>();    for (    Token token : JCasUtil.selectCovered(Token.class,currAnnotationToParse)) {      tokenizedSentence.add(tokenToWord(token));      tokens.add(token);    }    getContext().getLogger().log(FINE,tokenizedSentence.toString());    ParserGrammar parser=modelProvider.getResource();    Tree parseTree;    try {      if (tokenizedSentence.size() > maxTokens) {        continue;      }      if (ptb3Escaping) {        tokenizedSentence=CoreNlpUtils.applyPtbEscaping(tokenizedSentence,quoteBegin,quoteEnd);      }      ParserQuery query=parser.parserQuery();      query.parse(tokenizedSentence);      parseTree=query.getBestParse();    } catch (    Exception e) {      throw new AnalysisEngineProcessException(e);    }    StanfordAnnotator sfAnnotator=null;    try {      sfAnnotator=new StanfordAnnotator(new TreeWithTokens(parseTree,tokens));      sfAnnotator.setPosMappingProvider(posMappingProvider);      sfAnnotator.setConstituentMappingProvider(constituentMappingProvider);    } catch (    Exception e) {      getLogger().error("Unable to parse [" + currAnnotationToParse.getCoveredText() + "]");      throw new AnalysisEngineProcessException(e);    }    if (writePennTree) {      sfAnnotator.createPennTreeAnnotation(currAnnotationToParse.getBegin(),currAnnotationToParse.getEnd());    }    if (writeDependency) {      doCreateDependencyTags(parser,sfAnnotator,parseTree,tokens);    }    if (writeConstituent) {      sfAnnotator.createConstituentAnnotationFromTree(parser.getTLPParams().treebankLanguagePack(),writePos);    }  }}  }
class C{  public Object opt(int index){  return (index < 0 || index >= this.length()) ? null : this.myArrayList.get(index);}  }
class C{  private void createImage(){  if (gc != null) {    image=gc.createCompatibleImage(IMAGE_SIZE,IMAGE_SIZE,(backColor != MetalBumps.ALPHA) ? Transparency.OPAQUE : Transparency.BITMASK);  } else {    int cmap[]={backColor.getRGB(),topColor.getRGB(),shadowColor.getRGB()};    IndexColorModel icm=new IndexColorModel(8,3,cmap,0,false,(backColor == MetalBumps.ALPHA) ? 0 : -1,DataBuffer.TYPE_BYTE);    image=new BufferedImage(IMAGE_SIZE,IMAGE_SIZE,BufferedImage.TYPE_BYTE_INDEXED,icm);  }}  }
class C{  public void message(SerialMessage m){}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() == bShowDay)   m_days=1; else   if (e.getSource() == bShowWeek)   m_days=7; else   if (e.getSource() == bShowMonth)   m_days=31; else   if (e.getSource() == bShowYear)   m_days=365; else   m_days=0;  dispose();}  }
class C{  public static void hideToast(){  if (null != toast) {    toast.cancel();  }}  }
class C{  public boolean deleteEntry(BasicPoolEntry entry){  final boolean found=freeEntries.remove(entry);  if (found)   numEntries--;  return found;}  }
class C{  public Matrix4f m02(float m02){  this.m02=m02;  properties&=~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION);  return this;}  }
class C{  public Datastore expandVmfsDatastore(HostScsiDisk disk,Datastore datastore){  VmfsDatastoreExpandSpec expandSpec=getVmfsDatastoreExpandSpec(disk,datastore);  try {    return getDatastoreSystem().expandVmfsDatastore(datastore,expandSpec);  } catch (  HostConfigFault e) {    throw new VMWareException(e);  }catch (  NotFound e) {    throw new VMWareException(e);  }catch (  RuntimeFault e) {    throw new VMWareException(e);  }catch (  RemoteException e) {    throw new VMWareException(e);  }}  }
class C{  private AnnotatedTypeMirror asSuperTypevarLowerBound(AnnotatedTypeMirror type,AnnotatedTypeVariable superType,Void p){  AnnotatedTypeMirror lowerBound=superType.getLowerBound();  return asSuperLowerBound(type,p,lowerBound);}  }
class C{  public static String encodeAngleBracketsInTagBody(String text,Pattern regex){  Matcher matcher=regex.matcher(text);  if (matcher.find()) {    matcher.reset();    StringBuffer sb=new StringBuffer();    while (matcher.find()) {      String tagName=matcher.group(1);      String tagBody=matcher.group(2);      String encodedBody=Matcher.quoteReplacement(encodeAngleBrackets(tagBody));      String replacement="{@" + tagName + " "+ encodedBody+ "}";      matcher.appendReplacement(sb,replacement);    }    matcher.appendTail(sb);    return sb.toString();  } else {    return text;  }}  }
class C{  private static void addHeadMinutaWithRemarkDistribution(Locale locale,Element parent){  Element headMinuta=parent.addElement(XML_HEADMINUTA_TEXT);  headMinuta.addElement(XML_COL_TEXT).add(DocumentHelper.createCDATA(RBUtil.getInstance(locale).getProperty(I18N_BOOKUSECASE_DISTRIBUTIONHISTORY_HEADMINUTA_COL11)));  headMinuta.addElement(XML_COL_TEXT).add(DocumentHelper.createCDATA(RBUtil.getInstance(locale).getProperty(I18N_BOOKUSECASE_DISTRIBUTIONHISTORY_HEADMINUTA_COL12)));  headMinuta.addElement(XML_COL_TEXT).add(DocumentHelper.createCDATA(RBUtil.getInstance(locale).getProperty(I18N_BOOKUSECASE_DISTRIBUTIONHISTORY_HEADMINUTA_COL13)));  headMinuta.addElement(XML_COL_TEXT).add(DocumentHelper.createCDATA(RBUtil.getInstance(locale).getProperty(I18N_BOOKUSECASE_DISTRIBUTIONHISTORY_HEADMINUTA_COL8)));  headMinuta.addElement(XML_COL_TEXT).add(DocumentHelper.createCDATA(RBUtil.getInstance(locale).getProperty(I18N_BOOKUSECASE_DISTRIBUTIONHISTORY_HEADMINUTA_COL9)));  headMinuta.addElement(XML_COL_TEXT).add(DocumentHelper.createCDATA(RBUtil.getInstance(locale).getProperty(I18N_BOOKUSECASE_DISTRIBUTIONHISTORY_HEADMINUTA_COL15)));}  }
class C{  public void removeNode(SessionNode node){  if (nodes.contains(node)) {    node.resetToFreshlyCreated();    nodes.remove(node);    node.removeSessionListener(getSessionHandler());    getSessionSupport().fireNodeRemoved(node);  } else {    throw new IllegalArgumentException("Node doesn't exist in" + "graph: " + node);  }}  }
class C{  public boolean isRemoteMediaLoaded() throws TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  return isRemoteMoviePaused() || isRemoteMoviePlaying();}  }
class C{  private void onCreateFolderOperationFinish(CreateFolderOperation operation,RemoteOperationResult result){  if (result.isSuccess()) {    refreshListOfFilesFragment();  } else {    try {      Toast msg=Toast.makeText(FolderPickerActivity.this,ErrorMessageAdapter.getErrorCauseMessage(result,operation,getResources()),Toast.LENGTH_LONG);      msg.show();    } catch (    NotFoundException e) {      Log_OC.e(TAG,"Error while trying to show fail message ",e);    }  }}  }
class C{  void warn(String msg,Object[] args) throws TransformerException {  String fmsg=XSLMessages.createXPATHWarning(msg,args);  ErrorListener ehandler=this.getErrorListener();  if (null != ehandler) {    ehandler.warning(new TransformerException(fmsg,m_sourceLocator));  } else {    System.err.println(fmsg);  }}  }
class C{  public LabeledIntent(String sourcePackage,CharSequence nonLocalizedLabel,int icon){  mSourcePackage=sourcePackage;  mLabelRes=0;  mNonLocalizedLabel=nonLocalizedLabel;  mIcon=icon;}  }
class C{  protected void writeCentralDirectoryEnd(int numberOfEntries) throws IOException {  writeOut(EOCD_SIG);  writeOut(ZERO);  writeOut(ZERO);  if (numberOfEntries > ZIP64_MAGIC_SHORT && zip64Mode == Zip64Mode.Never) {    throw new Zip64RequiredException(Zip64RequiredException.TOO_MANY_ENTRIES_MESSAGE);  }  if (cdOffset > ZIP64_MAGIC && zip64Mode == Zip64Mode.Never) {    throw new Zip64RequiredException(Zip64RequiredException.ARCHIVE_TOO_BIG_MESSAGE);  }  byte[] num=ZipShort.getBytes(Math.min(numberOfEntries,ZIP64_MAGIC_SHORT));  writeOut(num);  writeOut(num);  writeOut(ZipLong.getBytes(Math.min(cdLength,ZIP64_MAGIC)));  writeOut(ZipLong.getBytes(Math.min(cdOffset,ZIP64_MAGIC)));  ByteBuffer data=this.zipEncoding.encode(comment);  writeOut(ZipShort.getBytes(data.limit()));  writeOut(data.array(),data.arrayOffset(),data.limit() - data.position());}  }
class C{  @RequestMapping(method=RequestMethod.GET) public String preparePodcastSelectionForms(Model model){  model.addAttribute("updatePodcastByFeedUrlForm",new PodcastByFeedUrlForm());  return "update_podcast_metadata_def";}  }
class C{  private void testRewriteMultiPacket2param(boolean rewritableMulti) throws SQLException {  Statement statement=sharedConnection.createStatement();  statement.execute("TRUNCATE PreparedStatementTest1");  ResultSet rs=statement.executeQuery("select @@max_allowed_packet");  rs.next();  int maxAllowedPacket=rs.getInt(1);  if (maxAllowedPacket < 21000000) {    String query="INSERT INTO PreparedStatementTest1 VALUES (null, ?)" + (rewritableMulti ? "" : " ON DUPLICATE KEY UPDATE id=?");    char[] arr=new char[(maxAllowedPacket - (query.length() + 18)) / 2];    for (int i=0; i < arr.length; i++) {      arr[i]=(char)('a' + (i % 10));    }    try (Connection connection=setConnection("&rewriteBatchedStatements=true&profileSql=true")){      PreparedStatement pstmt=connection.prepareStatement(query);      for (int i=0; i < 4; i++) {        pstmt.setString(1,new String(arr));        if (!rewritableMulti)         pstmt.setInt(2,1);        pstmt.addBatch();      }      int[] results=pstmt.executeBatch();      assertEquals(4,results.length);      for (      int result : results)       assertEquals(1,result);    }     rs=statement.executeQuery("select * from PreparedStatementTest1");    int counter=0;    while (rs.next()) {      counter++;      byte[] newBytes=rs.getBytes(2);      assertEquals(arr.length,newBytes.length);      for (int i=0; i < arr.length; i++) {        assertEquals(arr[i],newBytes[i]);      }    }    assertEquals(4,counter);  }}  }
class C{  protected void resetOrbitView(OrbitView view){  if (view.getZoom() > 0)   return;  Vec4 centerPoint=computeSurfacePoint(view,view.getHeading(),view.getPitch());  if (centerPoint != null) {    Vec4 eyePoint=view.getEyePoint();    Position centerPosition=wwd.getModel().getGlobe().computePositionFromPoint(centerPoint);    Vec4 normal=wwd.getModel().getGlobe().computeSurfaceNormalAtLocation(centerPosition.getLatitude(),centerPosition.getLongitude());    Vec4 north=wwd.getModel().getGlobe().computeNorthPointingTangentAtLocation(centerPosition.getLatitude(),centerPosition.getLongitude());    view.setPitch(Angle.POS180.subtract(view.getForwardVector().angleBetween3(normal)));    Vec4 perpendicular=view.getForwardVector().perpendicularTo3(normal);    Angle heading=perpendicular.angleBetween3(north);    double direction=Math.signum(-normal.cross3(north).dot3(perpendicular));    view.setHeading(heading.multiply(direction));    view.setZoom(eyePoint.distanceTo3(centerPoint));    view.setCenterPosition(centerPosition);  }}  }
class C{  public NbtTagFloat(String name,double value){  super(name);  this.value=(float)value;}  }
class C{  @Override public void initialize() throws Exception {  if (m_baseExperiment == null) {    throw new Exception("No base experiment specified!");  }  m_experimentAborted=false;  m_finishedCount=0;  m_failedCount=0;  m_RunNumber=getRunLower();  m_DatasetNumber=0;  m_PropertyNumber=0;  m_CurrentProperty=-1;  m_CurrentInstances=null;  m_Finished=false;  if (m_remoteHosts.size() == 0) {    throw new Exception("No hosts specified!");  }  m_remoteHostsStatus=new int[m_remoteHosts.size()];  m_remoteHostFailureCounts=new int[m_remoteHosts.size()];  m_remoteHostsQueue=new Queue();  for (int i=0; i < m_remoteHosts.size(); i++) {    m_remoteHostsQueue.push(new Integer(i));  }  m_subExpQueue=new Queue();  int numExps;  if (getSplitByDataSet()) {    numExps=m_baseExperiment.getDatasets().size();  } else {    numExps=getRunUpper() - getRunLower() + 1;  }  m_subExperiments=new Experiment[numExps];  m_subExpComplete=new int[numExps];  SerializedObject so=new SerializedObject(m_baseExperiment);  if (getSplitByDataSet()) {    for (int i=0; i < m_baseExperiment.getDatasets().size(); i++) {      m_subExperiments[i]=(Experiment)so.getObject();      DefaultListModel temp=new DefaultListModel();      temp.addElement(m_baseExperiment.getDatasets().get(i));      m_subExperiments[i].setDatasets(temp);      m_subExpQueue.push(new Integer(i));    }  } else {    for (int i=getRunLower(); i <= getRunUpper(); i++) {      m_subExperiments[i - getRunLower()]=(Experiment)so.getObject();      m_subExperiments[i - getRunLower()].setRunLower(i);      m_subExperiments[i - getRunLower()].setRunUpper(i);      m_subExpQueue.push(new Integer(i - getRunLower()));    }  }}  }
class C{  private K highestKey(){  ConcurrentSkipListMap.Node<K,V> n=hiNode();  if (n != null) {    K last=n.key;    if (inBounds(last))     return last;  }  throw new NoSuchElementException();}  }
class C{  public static void filledPolygon(double[] x,double[] y){  int N=x.length;  GeneralPath path=new GeneralPath();  path.moveTo((float)scaleX(x[0]),(float)scaleY(y[0]));  for (int i=0; i < N; i++)   path.lineTo((float)scaleX(x[i]),(float)scaleY(y[i]));  path.closePath();  offscreen.fill(path);  draw();}  }
class C{  public ProxyFactory<I> addHook(ConsumerHook... hooks){  Collections.addAll(this.hooks,hooks);  return this;}  }
class C{  public Builder monolingualCorpus(File monolingualCorpus){  this.monolingualCorpus=monolingualCorpus;  return this;}  }
class C{  public JsonArray add(long value){  values.add(valueOf(value));  return this;}  }
class C{  protected void sectionInitialize(FormToolkit toolkit){  GridData gd;  Composite sectionArea=(Composite)section.getClient();  sectionArea.setLayout(new GridLayout(2,false));  Table table=createTable(sectionArea,toolkit);  gd=new GridData(GridData.FILL_BOTH);  gd.grabExcessHorizontalSpace=true;  gd.grabExcessVerticalSpace=true;  gd.verticalSpan=5;  table.setLayoutData(gd);  tableViewer=createTableViewer(table);  createButtons(sectionArea,toolkit);  changeButtonEnablement();}  }
class C{  public SerialMessage(byte[] a){  super(String.valueOf(a));}  }
class C{  @Override public Packet sendBlocking(final Packet packet,final int reconnectID,byte expectedPacket) throws ActiveMQException {  String interceptionResult=invokeInterceptors(packet,interceptors,connection);  if (interceptionResult != null) {    throw ActiveMQClientMessageBundle.BUNDLE.interceptorRejectedPacket(interceptionResult);  }  if (closed) {    throw ActiveMQClientMessageBundle.BUNDLE.connectionDestroyed();  }  if (connection.getBlockingCallTimeout() == -1) {    throw new IllegalStateException("Cannot do a blocking call timeout on a server side connection");  }synchronized (sendBlockingLock) {    packet.setChannelID(id);    final ActiveMQBuffer buffer=packet.encode(connection);    lock.lock();    try {      if (failingOver) {        waitForFailOver("timed-out waiting for fail-over condition on blocking send");      }      response=null;      if (resendCache != null && packet.isRequiresConfirmations()) {        addResendPacket(packet);      }      checkReconnectID(reconnectID);      if (logger.isTraceEnabled()) {        logger.trace("Sending blocking " + packet);      }      connection.getTransportConnection().write(buffer,false,false);      long toWait=connection.getBlockingCallTimeout();      long start=System.currentTimeMillis();      while (!closed && (response == null || (response.getType() != PacketImpl.EXCEPTION && response.getType() != expectedPacket)) && toWait > 0) {        try {          sendCondition.await(toWait,TimeUnit.MILLISECONDS);        } catch (        InterruptedException e) {          throw new ActiveMQInterruptedException(e);        }        if (response != null && response.getType() != PacketImpl.EXCEPTION && response.getType() != expectedPacket) {          ActiveMQClientLogger.LOGGER.packetOutOfOrder(response,new Exception("trace"));        }        if (closed) {          break;        }        final long now=System.currentTimeMillis();        toWait-=now - start;        start=now;      }      if (response == null) {        throw ActiveMQClientMessageBundle.BUNDLE.timedOutSendingPacket(connection.getBlockingCallTimeout(),packet.getType());      }      if (response.getType() == PacketImpl.EXCEPTION) {        final ActiveMQExceptionMessage mem=(ActiveMQExceptionMessage)response;        ActiveMQException e=mem.getException();        e.fillInStackTrace();        throw e;      }    }  finally {      lock.unlock();    }    return response;  }}  }
class C{  protected void verifyFullCopyRequestCount(BlockObject fcSourceObj,int count){  BlockFullCopyUtils.validateActiveFullCopyCount(fcSourceObj,count,_dbClient);}  }
class C{  void putAlias(String name1,String name2){  aliases.put(name1,name2);}  }
class C{  public boolean hasVideo(){  return false;}  }
class C{  private void fillBumpBuffer(){  Graphics g=image.getGraphics();  g.setColor(backColor);  g.fillRect(0,0,IMAGE_SIZE,IMAGE_SIZE);  g.setColor(topColor);  for (int x=0; x < IMAGE_SIZE; x+=4) {    for (int y=0; y < IMAGE_SIZE; y+=4) {      g.drawLine(x,y,x,y);      g.drawLine(x + 2,y + 2,x + 2,y + 2);    }  }  g.setColor(shadowColor);  for (int x=0; x < IMAGE_SIZE; x+=4) {    for (int y=0; y < IMAGE_SIZE; y+=4) {      g.drawLine(x + 1,y + 1,x + 1,y + 1);      g.drawLine(x + 3,y + 3,x + 3,y + 3);    }  }  g.dispose();}  }
class C{  public double[] createLatLonPoints(){  int i;  int nMax=72;  double angle=-Math.PI;  double angleInc=2.0 * Math.PI / nMax;  double[] distance=new double[nMax + 1];  double x;  double y;  double a;  double b;  double[] azimuth=new double[nMax + 1];  double[] llPoints=new double[2 * (nMax + 1)];  a=majorAxisSpan / 2.0;  b=minorAxisSpan / 2.0;  for (i=0; i < nMax; i++) {    x=Math.sqrt((a * a * b* b) / ((b * b) + ((a * a) * Math.pow(Math.tan(angle),2))));    double yt=(x * x) / (a * a);    if (yt > 1.0) {      yt=1.0;    }    y=Math.sqrt((1.0 - yt) * (b * b));    distance[i]=Math.sqrt(Math.pow(x,2) + Math.pow(y,2));    azimuth[i]=angle + com.bbn.openmap.MoreMath.HALF_PI + getRotationAngle();    if (Debug.debugging("ellipse")) {      Debug.output(" " + i + " "+ Math.toDegrees(azimuth[i])+ " ( "+ distance[i]+ " ) "+ (Debug.debugging("ellipsedetail") ? ("[from x:" + x + ", y:"+ y+ ", a:"+ a+ ", b:"+ b+ "]") : ""));    }    angle+=angleInc;  }  distance[nMax]=distance[0];  azimuth[nMax]=azimuth[0];  int nCounter=0;  for (i=0; i < nMax + 1; i++) {    LatLonPoint llPt=LatLonPoint.getDouble(center).getPoint((float)distance[i],azimuth[i]);    llPoints[nCounter++]=llPt.getRadLat();    llPoints[nCounter++]=llPt.getRadLon();  }  return llPoints;}  }
class C{  public static PeriodType time(){  PeriodType type=cTime;  if (type == null) {    type=new PeriodType("Time",new DurationFieldType[]{DurationFieldType.hours(),DurationFieldType.minutes(),DurationFieldType.seconds(),DurationFieldType.millis()},new int[]{-1,-1,-1,-1,0,1,2,3});    cTime=type;  }  return type;}  }
class C{  public static final String format(double val){  return (String.format(Landscape.stringFormat,val));}  }
class C{  public static double remainder(double dividend,double divisor){  if (USE_JDK_MATH) {  }  if (Double.isInfinite(divisor)) {    if (Double.isInfinite(dividend)) {      return Double.NaN;    } else {      return dividend;    }  }  double value=dividend % divisor;  if (Math.abs(value + value) > Math.abs(divisor)) {    return value + ((value > 0.0) ? -Math.abs(divisor) : Math.abs(divisor));  } else {    return value;  }}  }
class C{  public void registerListener(ImageProcessorListener listener,@Nullable ImageProxy image){synchronized (mRegisteredListeners) {    logWrapper("There are " + mRegisteredListeners.size() + " listeners before addition");    if (!mRegisteredListeners.contains(listener)) {      mRegisteredListeners.add(listener);      logWrapper("Listener will be overwritten.");    }    if (image == null) {      mImageFilter.put(listener,null);    } else {      mImageFilter.put(listener,image.getTimestamp());    }    logWrapper("There are " + mRegisteredListeners.size() + " listeners after addition");  }  return;}  }
class C{  private DataStatusEvent createDSE(){  boolean changed=m_changed;  if (m_rowChanged != -1)   changed=true;  DataStatusEvent dse=new DataStatusEvent(this,m_rowCount,changed,Env.isAutoCommit(m_ctx,m_WindowNo),m_inserting);  dse.AD_Table_ID=m_AD_Table_ID;  dse.Record_ID=null;  return dse;}  }
class C{  public FichaVO createFicha(FichaVO ficha){  DbConnection conn=getConnection();  try {    ficha.setId(getGuid(ficha.getId()));    DbInsertFns.insert(conn,TABLE_NAME,DbUtil.getColumnNames(COL_DEFS),new SigiaDbInputRecord(COL_DEFS,ficha));    return ficha;  } catch (  Exception e) {    logger.error(e.getMessage());    throw new DBException(e.getMessage());  }}  }
class C{  private List<M> resolveAll(String text,char[] array){  List<M> list=new ArrayList<M>();  for (  M match : stack) {    String wild=match.getPattern();    if (match(array,wild.toCharArray())) {      cache.put(text,list);      list.add(match);    }  }  return list;}  }
class C{  protected synchronized void loadValue(String sValue){  value=encode(sValue);}  }
class C{  public static Document toDocument(File file) throws SAXException, IOException {  InputStream in=new BufferedInputStream(new FileInputStream(file));  try {    return XmlUtils.toDocument(in);  }  finally {    in.close();  }}  }
class C{  @Override public final boolean isModified(){  return isModified(_isEnableDependencyCheck);}  }
class C{  protected String extractTestMethodName(String testMethod){  return testMethod.substring(testMethod.indexOf("#") + 1);}  }
class C{  public void testLanesChangeAbsolute(){  for (  LinkFactory lf : linkFactories(15 * 60,30 * 3600)) {    final Network network=NetworkUtils.createNetwork();    NetworkFactory nf=network.getFactory();    nf.setLinkFactory(lf);    ((NetworkImpl)network).setFactory(nf);    network.setCapacityPeriod(3600.0);    Node node1=NetworkUtils.createAndAddNode(network,Id.create("1",Node.class),new Coord((double)0,(double)0));    Node node2=NetworkUtils.createAndAddNode(network,Id.create("2",Node.class),new Coord((double)100,(double)0));    final Node fromNode=node1;    final Node toNode=node2;    TimeVariantLinkImpl link=(TimeVariantLinkImpl)NetworkUtils.createAndAddLink(network,Id.create("1",Link.class),fromNode,toNode,(double)100,(double)10,(double)3600,(double)1);    assertEquals(1.0,link.getNumberOfLanes(org.matsim.core.utils.misc.Time.UNDEFINED_TIME),EPSILON);    NetworkChangeEvent change=new NetworkChangeEvent(7 * 3600.0);    change.addLink(link);    change.setLanesChange(new ChangeValue(ChangeType.ABSOLUTE_IN_SI_UNITS,2.0));    link.applyEvent(change);    assertEquals(1.0,link.getNumberOfLanes(org.matsim.core.utils.misc.Time.UNDEFINED_TIME),EPSILON);    assertEquals(2.0,link.getNumberOfLanes(7 * 3600),EPSILON);  }}  }
class C{  private void discoverUnmanagedExportMasks(URI systemId,Map<String,List<UnManagedVolume>> igUnmanagedVolumesMap,Map<String,StringSet> igKnownVolumesMap,XtremIOClient xtremIOClient,String xioClusterName,DbClient dbClient,PartitionManager partitionManager) throws Exception {  unManagedExportMasksToCreate=new ArrayList<UnManagedExportMask>();  unManagedExportMasksToUpdate=new ArrayList<UnManagedExportMask>();  List<UnManagedVolume> unManagedExportVolumesToUpdate=new ArrayList<UnManagedVolume>();  StringSet knownFCStoragePortUris=new StringSet();  StringSet knownIPStoragePortUris=new StringSet();  List<StoragePort> matchedFCPorts=new ArrayList<StoragePort>();  URIQueryResultList storagePortURIs=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceStoragePortConstraint(systemId),storagePortURIs);  Iterator<URI> portsItr=storagePortURIs.iterator();  while (portsItr.hasNext()) {    URI storagePortURI=portsItr.next();    StoragePort port=dbClient.queryObject(StoragePort.class,storagePortURI);    if (TransportType.FC.toString().equals(port.getTransportType())) {      knownFCStoragePortUris.add(storagePortURI.toString());      matchedFCPorts.add(port);    } else     if (TransportType.IP.toString().equals(port.getTransportType())) {      knownIPStoragePortUris.add(storagePortURI.toString());    }  }  Map<String,List<Initiator>> hostInitiatorsMap=new HashMap<String,List<Initiator>>();  Map<String,Set<String>> hostIGNamesMap=new HashMap<String,Set<String>>();  List<XtremIOInitiator> initiators=xtremIOClient.getXtremIOInitiatorsInfo(xioClusterName);  for (  XtremIOInitiator initiator : initiators) {    String initiatorNetworkId=initiator.getPortAddress();    Initiator knownInitiator=NetworkUtil.getInitiator(initiatorNetworkId,dbClient);    if (knownInitiator == null) {      continue;    }    String hostName=knownInitiator.checkInternalFlags(Flag.RECOVERPOINT) ? knownInitiator.getClusterName() : knownInitiator.getHostName();    if (hostName != null && !hostName.isEmpty()) {      log.info("   found an initiator in ViPR on host " + hostName);      String igName=initiator.getInitiatorGroup().get(1);      List<Initiator> hostInitiators=hostInitiatorsMap.get(hostName);      Set<String> hostIGNames=hostIGNamesMap.get(hostName);      if (hostInitiators == null) {        hostInitiators=new ArrayList<Initiator>();        hostInitiatorsMap.put(hostName,hostInitiators);      }      if (hostIGNames == null) {        hostIGNames=new HashSet<String>();        hostIGNamesMap.put(hostName,hostIGNames);      }      hostInitiators.add(knownInitiator);      hostIGNames.add(igName);    }  }  for (  String hostname : hostInitiatorsMap.keySet()) {    StringSet knownIniSet=new StringSet();    StringSet knownNetworkIdSet=new StringSet();    StringSet knownVolumeSet=new StringSet();    List<Initiator> matchedFCInitiators=new ArrayList<Initiator>();    List<Initiator> hostInitiators=hostInitiatorsMap.get(hostname);    Set<String> hostIGs=hostIGNamesMap.get(hostname);    Map<String,List<String>> rpVolumeSnapMap=new HashMap<String,List<String>>();    Map<String,UnManagedVolume> rpVolumeMap=new HashMap<String,UnManagedVolume>();    boolean isRpBackendMask=false;    if (ExportUtils.checkIfInitiatorsForRP(hostInitiators)) {      log.info("host {} contains RP initiators, " + "so this mask contains RP protected volumes",hostname);      isRpBackendMask=true;    }    boolean isVplexBackendMask=false;    for (    Initiator hostInitiator : hostInitiators) {      if (!isVplexBackendMask && VPlexControllerUtils.isVplexInitiator(hostInitiator,dbClient)) {        log.info("host {} contains VPLEX backend ports, " + "so this mask contains VPLEX backend volumes",hostname);        isVplexBackendMask=true;      }      knownIniSet.add(hostInitiator.getId().toString());      knownNetworkIdSet.add(hostInitiator.getInitiatorPort());      if (HostInterface.Protocol.FC.toString().equals(hostInitiator.getProtocol())) {        matchedFCInitiators.add(hostInitiator);      }    }    UnManagedExportMask mask=getUnManagedExportMask(hostInitiators.get(0).getInitiatorPort(),dbClient,systemId);    mask.setStorageSystemUri(systemId);    mask.setMaskName(hostname);    allCurrentUnManagedExportMaskUris.add(mask.getId());    for (    String igName : hostIGs) {      StringSet knownVols=igKnownVolumesMap.get(igName);      if (knownVols != null) {        knownVolumeSet.addAll(knownVols);      }      List<UnManagedVolume> hostUnManagedVols=igUnmanagedVolumesMap.get(igName);      if (hostUnManagedVols != null) {        for (        UnManagedVolume hostUnManagedVol : hostUnManagedVols) {          hostUnManagedVol.getInitiatorNetworkIds().addAll(knownNetworkIdSet);          hostUnManagedVol.getInitiatorUris().addAll(knownIniSet);          hostUnManagedVol.getUnmanagedExportMasks().add(mask.getId().toString());          if (isVplexBackendMask) {            log.info("marking unmanaged Xtremio volume {} as a VPLEX backend volume",hostUnManagedVol.getLabel());            hostUnManagedVol.putVolumeCharacterstics(SupportedVolumeCharacterstics.IS_VPLEX_BACKEND_VOLUME.toString(),TRUE);          }          if (!isRpBackendMask) {            log.info("unmanaged volume {} is exported to something other than RP.  Marking IS_NONRP_EXPORTED.",hostUnManagedVol.forDisplay());            hostUnManagedVol.putVolumeCharacterstics(SupportedVolumeCharacterstics.IS_NONRP_EXPORTED.toString(),TRUE);          } else {            log.info("unmanaged volume {} is an RP volume",hostUnManagedVol.getLabel());            hostUnManagedVol.putVolumeCharacterstics(SupportedVolumeCharacterstics.IS_RECOVERPOINT_ENABLED.toString(),TRUE);            rpVolumeMap.put(hostUnManagedVol.getNativeGuid(),hostUnManagedVol);          }          if (hostUnManagedVol != null) {            mask.getUnmanagedVolumeUris().add(hostUnManagedVol.getId().toString());            unManagedExportVolumesToUpdate.add(hostUnManagedVol);          }        }      }    }    mask.replaceNewWithOldResources(knownIniSet,knownNetworkIdSet,knownVolumeSet,!matchedFCInitiators.isEmpty() ? knownFCStoragePortUris : knownIPStoragePortUris);    updateZoningMap(mask,matchedFCInitiators,matchedFCPorts);    if (!unManagedExportMasksToCreate.isEmpty()) {      partitionManager.insertInBatches(unManagedExportMasksToCreate,Constants.DEFAULT_PARTITION_SIZE,dbClient,UNMANAGED_EXPORT_MASK);      unManagedExportMasksToCreate.clear();    }    if (!unManagedExportMasksToUpdate.isEmpty()) {      partitionManager.updateInBatches(unManagedExportMasksToUpdate,Constants.DEFAULT_PARTITION_SIZE,dbClient,UNMANAGED_EXPORT_MASK);      unManagedExportMasksToUpdate.clear();    }    if (!unManagedExportVolumesToUpdate.isEmpty()) {      partitionManager.updateAndReIndexInBatches(unManagedExportVolumesToUpdate,Constants.DEFAULT_PARTITION_SIZE,dbClient,UNMANAGED_VOLUME);      unManagedExportVolumesToUpdate.clear();    }    DiscoveryUtils.markInActiveUnManagedExportMask(systemId,allCurrentUnManagedExportMaskUris,dbClient,partitionManager);  }}  }
class C{  public WriterConfig(){  super();}  }
class C{  public Id<DgProgram> convertSignalSystemId2ProgramId(Id<SignalSystem> signalSystemId){  String idString=signalSystemId.toString() + "00";  return idPool.createId(idString,DgProgram.class);}  }
class C{  private void process(MethodContact contact){  MethodPart get=contact.getRead();  MethodPart set=contact.getWrite();  if (set != null) {    insert(set,write);  }  insert(get,read);}  }
class C{  private Paint decodeCloseGradient(Shape s,Color top,Color bottom){  Rectangle r=s.getBounds();  int width=r.width;  int height=r.height;  return createGradient(r.x + width / 2,r.y,r.x + width / 2,r.y + height - 1,new float[]{0f,1f},new Color[]{top,bottom});}  }
class C{  public ArabicNormalizationFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public static boolean protect(Address start,int size){  Clock.stop();  assert start.toWord().and(Word.fromIntSignExtend(~PAGE_MASK)).EQ(Word.zero());  Trace.trace(Item.MEMORY,"protect(%s,%d)\n",start.toString(),size);  Address last=start.plus(size);  Clock.start();  for (Address p=start; p.LT(last); p=p.plus(BYTES_IN_PAGE)) {    pageTable.setNonReadable(p);    Clock.tick();  }  return true;}  }
class C{  public static void unregister(){  RxJavaPlugins instance=RxJavaPlugins.getInstance();  RxJavaSchedulersHook schedulersHook=instance.getSchedulersHook();  RxJavaObservableExecutionHook observableExecutionHook=instance.getObservableExecutionHook();  instance.reset();  instance.registerObservableExecutionHook(observableExecutionHook);  instance.registerSchedulersHook(schedulersHook);}  }
class C{  public String equationsToString(String prefix,int fractionDigits){  DecimalFormat nf=new DecimalFormat();  nf.setMinimumFractionDigits(fractionDigits);  nf.setMaximumFractionDigits(fractionDigits);  nf.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));  nf.setNegativePrefix("");  nf.setPositivePrefix("");  return equationsToString(prefix,nf);}  }
class C{  public static void resetRcsConfig(Context ctx,LocalContentResolver localContentResolver,RcsSettings rcsSettings,MessagingLog mMessagingLog,ContactManager contactManager){  if (sLogger.isActivated()) {    sLogger.debug("Reset RCS config");  }  ctx.stopService(new Intent(ctx,RcsCoreService.class));  rcsSettings.resetConfigParameters();  mMessagingLog.deleteAllEntries();  RichCallHistory.getInstance(localContentResolver);  RichCallHistory.getInstance().deleteAllEntries();  contactManager.deleteRCSEntries();  RcsAccountManager accountUtility=RcsAccountManager.getInstance(ctx,contactManager);  accountUtility.removeRcsAccount(null);  AndroidFactory.setApplicationContext(ctx,rcsSettings);  AccountChangedReceiver.setAccountResetByEndUser(false);  rcsSettings.setTermsAndConditionsResponse(TermsAndConditionsResponse.NO_ANSWER);  rcsSettings.setConfigurationValid(false);}  }
class C{  public static String[] processOptions(Context cx,String args[]){  for (int i=0; i < args.length; i++) {    String arg=args[i];    if (!arg.startsWith("-")) {      String[] result=new String[args.length - i];      for (int j=i; j < args.length; j++)       result[j - i]=args[j];      return result;    }    if (arg.equals("-version")) {      if (++i == args.length)       usage(arg);      double d=Context.toNumber(args[i]);      if (d != d)       usage(arg);      cx.setLanguageVersion((int)d);      continue;    }    usage(arg);  }  return new String[0];}  }
class C{  @Override public boolean connectionAllowed(EventSetDescriptor esd){  return connectionAllowed(esd.getName());}  }
class C{  public JSONObject(){  this.map=new HashMap<String,Object>();}  }
class C{  public static Bitmap drawLineGetBitmap(FaceResponse entity,Bitmap viewBitmap){  Paint paint=new Paint();  paint.setColor(Color.RED);  paint.setStrokeWidth(Math.max(viewBitmap.getWidth(),viewBitmap.getHeight()) / 100f);  Bitmap bitmap=Bitmap.createBitmap(viewBitmap.getWidth(),viewBitmap.getHeight(),viewBitmap.getConfig());  Canvas canvas=new Canvas(bitmap);  canvas.drawBitmap(viewBitmap,new Matrix(),null);  try {    final int count=entity.face.size();    for (int i=0; i < count; ++i) {      float x, y, w, h;      x=(float)entity.face.get(i).position.center.x;      y=(float)entity.face.get(i).position.center.y;      w=(float)entity.face.get(i).position.width;      h=(float)entity.face.get(i).position.height;      x=x / 100 * viewBitmap.getWidth();      w=w / 100 * viewBitmap.getWidth() * 0.7f;      y=y / 100 * viewBitmap.getHeight();      h=h / 100 * viewBitmap.getHeight() * 0.7f;      canvas.drawLine(x - w,y - h,x - w,y + h,paint);      canvas.drawLine(x - w,y - h,x + w,y - h,paint);      canvas.drawLine(x + w,y + h,x - w,y + h,paint);      canvas.drawLine(x + w,y + h,x + w,y - h,paint);    }    viewBitmap=bitmap;    return viewBitmap;  } catch (  Exception e) {    e.printStackTrace();  }  return null;}  }
class C{  public void write(String filename) throws Exception {  write(new File(filename));}  }
class C{  public static String ThatThose(final int quantity){  return makeUpperCaseWord(thatthose(quantity));}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static boolean visitHierarchy(ITypeBinding type,TypeBindingVisitor visitor){  boolean result=visitSuperclasses(type,visitor);  if (result) {    result=visitInterfaces(type,visitor);  }  return result;}  }
class C{  public static void onGcmUpdate(Context context){  Log.d(LOG_TAG,"onGcmUpdate");  sendEventStreamAction(context,EventStreamService.StreamAction.GCM_STATUS_UPDATE);}  }
class C{  private HalfEdge insert(Coordinate orig,Coordinate dest,HalfEdge eAdj){  HalfEdge e=create(orig,dest);  if (eAdj != null) {    eAdj.insert(e);  } else {    vertexMap.put(orig,e);  }  HalfEdge eAdjDest=(HalfEdge)vertexMap.get(dest);  if (eAdjDest != null) {    eAdjDest.insert(e.sym());  } else {    vertexMap.put(dest,e.sym());  }  return e;}  }
class C{  protected boolean beforeSave(boolean newRecord){  setValueDescription();  return validate();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public jMatrix arrayRightDivideEquals(jMatrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] / B.A[i][j];    }  }  return this;}  }
class C{  public TColor adjustHSV(float h,float s,float v){  return setHSV(new float[]{hsv[0] + h,hsv[1] + s,hsv[2] + v});}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:49.278 -0400",hash_original_method="E5E4BC7A2B363BE6E2FBD0B5C26F4050",hash_generated_method="78375C615A16504B3FCA36BE4D985473") private void initProgressBar(){  mMax=100;  mProgress=0;  mSecondaryProgress=0;  mIndeterminate=false;  mOnlyIndeterminate=false;  mDuration=4000;  mBehavior=AlphaAnimation.RESTART;  mMinWidth=24;  mMaxWidth=48;  mMinHeight=24;  mMaxHeight=48;}  }
class C{  public WritableRaster createCompatibleWritableRaster(int w,int h){  if (w <= 0 || h <= 0) {    throw new RasterFormatException("negative " + ((w <= 0) ? "width" : "height"));  }  SampleModel sm=sampleModel.createCompatibleSampleModel(w,h);  return new ShortInterleavedRaster(sm,new Point(0,0));}  }
class C{  public XPath(String exprString,SourceLocator locator,PrefixResolver prefixResolver,int type) throws javax.xml.transform.TransformerException {  this(exprString,locator,prefixResolver,type,null);}  }
class C{  private void editServer(int serverId){  Server server=Hermes.getInstance().getServerById(serverId);  if (server.getStatus() != Status.DISCONNECTED) {    Toast.makeText(this,getResources().getString(R.string.disconnect_before_editing),Toast.LENGTH_SHORT).show();  } else {    Intent intent=new Intent(this,AddServerActivity.class);    intent.putExtra(Extra.SERVER,serverId);    startActivityForResult(intent,0);  }}  }
class C{  @Override protected void initToolbar(Bundle savedInstanceState){  if (mToolbar == null || mAppBarLayout == null)   return;  setSupportActionBar(mToolbar);}  }
class C{  public void destroy(){}  }
class C{  public static void prepareDetails(VisualNode n){}  }
class C{  public static void clusterIpInfo(ClusterIpInfoForm ipReconfigForm){  if (ipReconfigForm == null) {    ViPRSystemClient client=BourneUtil.getSysClient();    ClusterIpInfo clusterIpInfo=client.control().getClusterIpinfo();    ipReconfigForm=new ClusterIpInfoForm();    ipReconfigForm.load(clusterIpInfo);    ClusterNetworkReconfigStatus ipReconfigStatus=client.control().getClusterIpReconfigStatus();    if (ipReconfigStatus != null && ipReconfigStatus.getStatus() != null) {      if (ipReconfigStatus.getStatus().equals(ClusterNetworkReconfigStatus.Status.FAILED)) {        flash.error(MessagesUtils.get(RECONFIGURATION_STATUS_ERROR,ipReconfigStatus.getMessage()));      } else       if (ipReconfigStatus.getStatus().equals(ClusterNetworkReconfigStatus.Status.SUCCEED)) {        if (ipReconfigStatus.isRecentlyReconfigured()) {          flash.put("info",MessagesUtils.get(RECONFIGURATION_STATUS_SUCCESS));        }      }    }  }  vip=ipReconfigForm.selectVipforStatusQuery();  loadRenderArgs();  render(ipReconfigForm);}  }
class C{  private void applyForceAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxBody) {      SandboxBody body=(SandboxBody)node.getUserObject();      Vector2 f=ApplyForceDialog.show(ControlUtilities.getParentWindow(this));      if (f != null) {synchronized (Simulation.LOCK) {          body.applyForce(f);        }      }    }  }}  }
class C{  public ObjectState(S id,Collection<E> deferred,Collection<? extends Action<S,E>> entryActions,Collection<? extends Action<S,E>> exitActions,PseudoState<S,E> pseudoState,Collection<Region<S,E>> regions){  super(id,deferred,entryActions,exitActions,pseudoState,regions);}  }
class C{  public static void importExpressionTree(final CConnection connection,final int moduleId,final int rawModuleId) throws SQLException {  Preconditions.checkNotNull(connection,"IE00434: connection argument can not be null");  final String query="INSERT INTO " + CTableNames.EXPRESSION_TREE_TABLE + "(module_id, id, type, symbol, immediate, position, parent_id)"+ " SELECT "+ moduleId+ ", id, type, symbol, immediate, position, parent_id "+ " FROM ex_"+ rawModuleId+ "_expression_nodes";  connection.executeUpdate(query,true);}  }
class C{  public ExtensionListing componentName(ComponentName componentName){  mComponentName=componentName;  return this;}  }
class C{  public boolean isInfo(){  return fSeverity == IStatus.INFO;}  }
class C{  protected void addChannelPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ConditionalRoute_channel_feature"),getString("_UI_PropertyDescriptor_description","_UI_ConditionalRoute_channel_feature","_UI_ConditionalRoute_type"),EipPackage.Literals.CONDITIONAL_ROUTE__CHANNEL,true,false,true,null,null,null));}  }
class C{  public boolean hasNext(){  return index < size;}  }
class C{  public ExtensionFileFilter(String description,String extension){  this.description=description;  this.extensions=new HashSet<String>();  extensions.add(extension.toLowerCase());  defaultExtension=extension;}  }
class C{  public boolean isLicenseExpired(LicenseInfoExt licenseInfo){  return false;}  }
class C{  LinkedEntry(K key,V value,int hash,HashMapEntry<K,V> next,LinkedEntry<K,V> nxt,LinkedEntry<K,V> prv){  super(key,value,hash,next);  this.nxt=nxt;  this.prv=prv;}  }
class C{  public static double entropy(double[] array){  double returnValue=0, sum=0;  for (int i=0; i < array.length; i++) {    returnValue-=lnFunc(array[i]);    sum+=array[i];  }  if (Utils.eq(sum,0)) {    return 0;  } else {    return (returnValue + lnFunc(sum)) / (sum * log2);  }}  }
class C{  boolean moveCursorToPackedChildPosition(long packedPosition){  if (ExpandableListView.getPackedPositionType(packedPosition) != ExpandableListView.PACKED_POSITION_TYPE_CHILD) {    return false;  }  int groupPosition=ExpandableListView.getPackedPositionGroup(packedPosition);  int childPosition=ExpandableListView.getPackedPositionChild(packedPosition);  return moveCursorToChildPosition(groupPosition,childPosition);}  }
class C{  public static void toogleMagnifyingGlass(final ZyGraph graph){  Preconditions.checkNotNull(graph,"IE01749: Graph argument can not be null");  graph.getSettings().getDisplaySettings().setMagnifyingGlassMode(!graph.getSettings().getDisplaySettings().getMagnifyingGlassMode());}  }
class C{  public SuspendException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override @Retained protected EntryEventImpl generateEvictDestroyEvent(Object key){  EntryEventImpl event=super.generateEvictDestroyEvent(key);  event.setInvokePRCallbacks(true);  return event;}  }
class C{  public static long readWordBigEndian(final byte[] data,final int offset){  return ((data[offset + 0] & 0xFFL) * 0x100) + (data[offset + 1] & 0xFFL);}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public Object parse(XMLEventReader xmlEventReader,StartElement start) throws GraphIOException {  try {    Stack<String> skippedElements=new Stack<String>();    skippedElements.add(start.getName().getLocalPart());    while (xmlEventReader.hasNext()) {      XMLEvent event=xmlEventReader.nextEvent();      if (event.isStartElement()) {        String name=event.asStartElement().getName().getLocalPart();        skippedElements.push(name);      }      if (event.isEndElement()) {        String name=event.asEndElement().getName().getLocalPart();        if (skippedElements.size() == 0 || !skippedElements.peek().equals(name)) {          throw new GraphIOException("Failed parsing GraphML document - startTag/endTag mismatch");        }        skippedElements.pop();        if (skippedElements.isEmpty()) {          break;        }      }    }    return null;  } catch (  Exception e) {    ExceptionConverter.convert(e);  }  return null;}  }
class C{  public boolean isShowAxes(){  return mShowAxes;}  }
class C{  @SuppressWarnings("unchecked") final E itemAt(int i){  return (E)items[i];}  }
class C{  private static void checkArguments(final AbstractSQLProvider provider,final CModule module,final List<IFlowgraphView> flowgraphs,final List<INaviFunction> functions){  Preconditions.checkNotNull(provider,"IE00630: Provider argument can not be null");  Preconditions.checkNotNull(module,"IE00631: Module argument can not be null");  Preconditions.checkArgument(module.inSameDatabase(provider),"IE00632: Module is not part of this database");  Preconditions.checkNotNull(flowgraphs,"IE00633: Flowgraphs argument can not be null");  for (  final IFlowgraphView view : flowgraphs) {    Preconditions.checkNotNull(view,"IE00634: View list contains a null-element");    Preconditions.checkArgument(view.inSameDatabase(provider),"IE00635: View is not part of this database");  }  Preconditions.checkNotNull(functions,"IE00636: Functions argument can not be null");  for (  final INaviFunction function : functions) {    Preconditions.checkNotNull(function,"IE00637: Function list contains a null-element");    Preconditions.checkArgument(function.inSameDatabase(provider),"IE00638: Function is not part of this database");  }}  }
class C{  @Deprecated public static final boolean isLocal(final byte[] urlhash){  return domDomain(urlhash) == 7;}  }
class C{  public void loadComplete(){  if (m_loader != null) {    try {      m_loader.join();    } catch (    InterruptedException ie) {      log.log(Level.SEVERE,"Join interrupted",ie);    }  }}  }
class C{  public void testLMDirichlet() throws IOException {  float p=(FREQ + 2000.0f * (TOTAL_TERM_FREQ + 1) / (NUMBER_OF_FIELD_TOKENS + 1.0f)) / (DOC_LEN + 2000.0f);  float a=2000.0f / (DOC_LEN + 2000.0f);  float gold=(float)(Math.log(p / (a * (TOTAL_TERM_FREQ + 1) / (NUMBER_OF_FIELD_TOKENS + 1.0f))) + Math.log(a));  correctnessTestCore(new LMDirichletSimilarity(),gold);}  }
class C{  public void testRootPropertiesPersistAfterFormat() throws Exception {  if (!propertiesSupported())   return;  if (dual && !(igfsSecondaryFileSystem instanceof IgfsSecondaryFileSystemImpl)) {    checkRootPropertyUpdate("foo","moo",null);    checkRootPropertyUpdate(IgfsUtils.PROP_PERMISSION,"0777","0777");  } else {    checkRootPropertyUpdate("foo","moo","moo");    checkRootPropertyUpdate(IgfsUtils.PROP_PERMISSION,"0777","0777");  }}  }
class C{  public int makeForest(final Vector basePosition,final int size,final double density,final TreeGenerator treeGenerator){  try {    for (int x=basePosition.getBlockX() - size; x <= (basePosition.getBlockX() + size); ++x) {      for (int z=basePosition.getBlockZ() - size; z <= (basePosition.getBlockZ() + size); ++z) {        if (!this.getLazyBlock(x,basePosition.getBlockY(),z).isAir()) {          continue;        }        if (FaweCache.RANDOM.random(65536) >= (density * 65536)) {          continue;        }        this.changes++;        for (int y=basePosition.getBlockY(); y >= (basePosition.getBlockY() - 10); --y) {          final int t=getLazyBlock(x,y,z).getType();          if ((t == BlockID.GRASS) || (t == BlockID.DIRT)) {            treeGenerator.generate(EditSession.this,new Vector(x,y + 1,z));            break;          } else           if (t == BlockID.SNOW) {            setBlock(x,y,z,nullBlock);          } else           if (t != BlockID.AIR) {            break;          }        }      }    }  } catch (  MaxChangedBlocksException ignore) {  }  return this.changes;}  }
class C{  public Properties load(String file){  try {    prop.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(file));  } catch (  Exception e) {    System.out.println(e.getMessage());  }  return prop;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  boolean isTestClassName(String className){  String subClassName=className.substring(className.length() - 5,className.length());  Matcher m=TEST_CLASS_NAME_PATTERN.matcher(subClassName);  return m.matches();}  }
class C{  protected boolean isRecipientChecked(MailAddress recipient) throws MessagingException {  MailetContext mailetContext=getMailetContext();  return super.isRecipientChecked(recipient) && (mailetContext.isLocalEmail(recipient));}  }
class C{  @Override protected boolean dump(final Level level,final PrintStream out,final int height,final boolean recursive,final boolean materialize){  final boolean debug=level.toInt() <= Level.DEBUG.toInt();  boolean ok=true;  if (this == htree.root) {    if (parent != null) {      out.println(indent(height) + "ERROR: this is the root, but the parent is not null.");      ok=false;    }  } else {    if (parent == null) {      out.println(indent(height) + "ERROR: the parent reference MUST be defined for a non-root node.");      ok=false;    } else     if (parent.get() == null) {      out.println(indent(height) + "ERROR: the parent is not strongly reachable.");      ok=false;    }  }  if (debug) {    out.println(indent(height) + toString());  }  for (int i=0; i < (1 << htree.addressBits); i++) {    final AbstractPage child=(childRefs[i] == null ? null : childRefs[i].get());    if (child != null) {      if (child.parent == null || child.parent.get() == null) {        out.println(indent(height) + "  ERROR child[" + i+ "] does not have parent reference.");        ok=false;      }      if (child.parent.get() != this) {        out.println(indent(height) + "  ERROR child[" + i+ "] has wrong parent.");        ok=false;      }      if (child.isDirty()) {        if (!isDirty()) {          out.println(indent(height) + "  ERROR child[" + i+ "] is dirty, but its parent is clean");          ok=false;        }        if (childRefs[i] == null) {          out.println(indent(height) + "  ERROR childRefs[" + i+ "] is null, but the child is dirty");          ok=false;        }        if (getChildAddr(i) != NULL) {          out.println(indent(height) + "  ERROR childAddr[" + i+ "]="+ getChildAddr(i)+ ", but MUST be "+ NULL+ " since the child is dirty");          ok=false;        }      } else {        if (getChildAddr(i) == NULL) {          out.println(indent(height) + "  ERROR childKey[" + i+ "] is "+ NULL+ ", but child is not dirty");          ok=false;        }      }    }  }  if (!ok && !debug) {  }  if (recursive) {    final Set<AbstractPage> dirty=new HashSet<AbstractPage>();    for (int i=0; i < (1 << htree.addressBits); i++) {      if (childRefs[i] == null && !isReadOnly() && ((MutableDirectoryPageData)data).childAddr[i] == 0) {        out.println(indent(height + 1) + "ERROR can not find child at index=" + i+ ", skipping this index.");        ok=false;        continue;      }      final AbstractPage child=childRefs[i] == null ? null : childRefs[i].get();      if (child != null) {        if (child.parent == null) {          out.println(indent(height + 1) + "ERROR child does not have parent reference at index=" + i);          ok=false;        }        if (child.parent.get() != this) {          out.println(indent(height + 1) + "ERROR child has incorrect parent reference at index=" + i);          ok=false;        }        if (child.isDirty()) {          dirty.add(child);        }        if (!child.dump(level,out,height + 1,true,materialize)) {          ok=false;        }      }    }  }  return ok;}  }
class C{  public void openSignEditor(Location loc){  signLocation=loc.clone();  signLocation.setX(loc.getBlockX());  signLocation.setY(loc.getBlockY());  signLocation.setZ(loc.getBlockZ());  session.send(new SignEditorMessage(loc.getBlockX(),loc.getBlockY(),loc.getBlockZ()));}  }
class C{  public void visitIntInsn(int opcode,int operand){  if (mv != null) {    mv.visitIntInsn(opcode,operand);  }}  }
class C{  public static void addEmojis(Context context,Spannable text,int emojiSize,int emojiAlignment,int textSize,int index,int length){  addEmojis(context,text,emojiSize,emojiAlignment,textSize,index,length,false);}  }
class C{  protected void processStyle12Adjustment(Game game,Style12Message message,GameService service,String entireMessage){  if (LOG.isDebugEnabled()) {    LOG.debug("Processing obs/playing/ex position move.");  }  if (LOG.isDebugEnabled()) {    LOG.debug("No state transitions occured. Processing style12 on existing game.");  }  if (!IcsUtils.adjustToTakebacks(game,message,connector)) {    if (LOG.isDebugEnabled()) {      LOG.debug("Making move in obs/playing position.");    }    if (IcsUtils.addCurrentMove(game,message,connector)) {      if (LOG.isDebugEnabled()) {        LOG.debug("Position was a move firing state changed.");      }      service.fireGameStateChanged(message.gameId,true);    } else {      if (LOG.isDebugEnabled()) {        LOG.debug("Position was not a move firing state changed.");      }      service.fireGameStateChanged(message.gameId,false);    }  } else {    if (LOG.isDebugEnabled()) {      LOG.debug("Adjusted for takebacks.");    }    service.fireGameStateChanged(message.gameId,false);  }}  }
class C{  public LogUniform(){  this(1e-2,1);}  }
class C{  public TopHitsBuilder addSort(SortBuilder sort){  sourceBuilder().sort(sort);  return this;}  }
class C{  static int compareArrays(final int[] a,final int[] b,final int size){  int i;  for (i=size - 1; (i >= 0) && (a[i] == b[i]); i--) {  }  return ((i < 0) ? TBigInteger.EQUALS : (a[i] & 0xFFFFFFFFL) < (b[i] & 0xFFFFFFFFL) ? TBigInteger.LESS : TBigInteger.GREATER);}  }
class C{  public KeywordObject(int id){  this.id=id;}  }
class C{  public int validateArtificialRoot(){  return (artificialRoot.value.compareTo(null));}  }
class C{  public Holder(IssuerSerial baseCertificateID,int version){  this.baseCertificateID=baseCertificateID;  this.version=version;}  }
class C{  protected JSONArray append(Object value){  myArrayList.add(value);  return this;}  }
class C{  public void clearUncaughtExceptionsCount(){synchronized (this.dispatchLock) {    this.uncaughtExceptionsCount=0;  }}  }
class C{  public boolean initialize(DDFModule poModuleIn,String pszTagIn,byte[] pachFieldArea){  int iFDOffset=poModuleIn._fieldControlLength;  poModule=poModuleIn;  pszTag=pszTagIn;  _data_struct_code=DataStructCode.get((char)pachFieldArea[0]);  _data_type_code=DataTypeCode.get((char)pachFieldArea[1]);  if (Debug.debugging("iso8211")) {    Debug.output("DDFFieldDefinition.initialize(" + pszTagIn + "):\n\t\t data_struct_code = "+ _data_struct_code+ "\n\t\t data_type_code = "+ _data_type_code+ "\n\t\t iFDOffset = "+ iFDOffset);  }  byte[] tempData=new byte[pachFieldArea.length - iFDOffset];  System.arraycopy(pachFieldArea,iFDOffset,tempData,0,pachFieldArea.length - iFDOffset);  MutableInt nCharsConsumed=new MutableInt();  _fieldName=DDFUtils.fetchVariable(tempData,tempData.length,DDF_UNIT_TERMINATOR,DDF_FIELD_TERMINATOR,nCharsConsumed);  if (Debug.debugging("iso8211")) {    Debug.output("DDFFieldDefinition.initialize(" + pszTagIn + "): created field name "+ _fieldName);  }  iFDOffset+=nCharsConsumed.value;  tempData=new byte[pachFieldArea.length - iFDOffset];  System.arraycopy(pachFieldArea,iFDOffset,tempData,0,pachFieldArea.length - iFDOffset);  _arrayDescr=DDFUtils.fetchVariable(tempData,tempData.length,DDF_UNIT_TERMINATOR,DDF_FIELD_TERMINATOR,nCharsConsumed);  iFDOffset+=nCharsConsumed.value;  tempData=new byte[pachFieldArea.length - iFDOffset];  System.arraycopy(pachFieldArea,iFDOffset,tempData,0,pachFieldArea.length - iFDOffset);  _formatControls=DDFUtils.fetchVariable(tempData,tempData.length,DDF_UNIT_TERMINATOR,DDF_FIELD_TERMINATOR,nCharsConsumed);  if (_data_struct_code != DataStructCode.ELEMENTARY) {    if (!buildSubfieldDefns(_arrayDescr)) {      return false;    }    if (!applyFormats(_formatControls)) {      return false;    }  }  return true;}  }
class C{  public boolean isPKey(){  return m_isPKey;}  }
class C{  protected <E extends DefaultData>List<E> adjustSamplingRate(List<E> dataObjects,Date from,Date to,IAggregator<E> aggregator){  return samplingRateMode.adjustSamplingRate(dataObjects,from,to,sensitivity.getValue(),aggregator);}  }
class C{  static void testExtend(ClassLoader loader){  Class doubledExtendClass;  Object obj;  try {    doubledExtendClass=loader.loadClass("DoubledExtend");  } catch (  ClassNotFoundException cnfe) {    System.err.println("loadClass failed: " + cnfe);    return;  }  try {    obj=doubledExtendClass.newInstance();  } catch (  InstantiationException ie) {    System.err.println("newInstance failed: " + ie);    return;  }catch (  IllegalAccessException iae) {    System.err.println("newInstance failed: " + iae);    return;  }catch (  LinkageError le) {    System.out.println("Got expected LinkageError on DE");    return;  }  Base baseRef=(Base)obj;  DoubledExtend de=baseRef.getExtended();  try {    String result;    result=Base.doStuff(de);    System.err.println("ERROR: did not get LinkageError on DE");    System.err.println("(result=" + result + ")");  } catch (  LinkageError le) {    System.out.println("Got expected LinkageError on DE");    return;  }}  }
class C{  public void leaveGroup(InetAddress groupAddr) throws IOException {  checkJoinOrLeave(groupAddr);  impl.leave(groupAddr);}  }
class C{  public void saveConfig(String configString,File file) throws IOException {  String configuration=this.prepareConfigString(configString);  try (FileOutputStream fileSteam=new FileOutputStream(file);BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(fileSteam,"UTF-8"))){    writer.write(configuration);    writer.flush();  } }  }
class C{  public void addNotOverriddenDependency(RVMMethod source,int dependent_cmid){  MethodSet s=findOrCreateMethodSet(nonOverriddenHash,source);  s.add(dependent_cmid);}  }
class C{  String formatNumberToPlainText(Number number,BackwardCompatibleTemplateNumberFormat format,Expression exp) throws TemplateModelException, _MiscTemplateException {  try {    return format.format(number);  } catch (  UnformattableValueException e) {    throw new _MiscTemplateException(exp,e,this,"Failed to format number with ",new _DelayedJQuote(format.getDescription()),": ",e.getMessage());  }}  }
class C{  public static boolean isVcenterInUse(DbClient dbClient,URI vcenterURI){  List<NamedElementQueryResultList.NamedElement> datacenterUris=listChildren(dbClient,vcenterURI,VcenterDataCenter.class,"label","vcenter");  for (  NamedElementQueryResultList.NamedElement datacenterUri : datacenterUris) {    if (isDataCenterInUse(dbClient,datacenterUri.getId())) {      return true;    }  }  return false;}  }
class C{  public void processEvent(Monitor mon){  Iterator iter=listenerList.iterator();  while (iter.hasNext()) {    JAMonListener listener=(JAMonListener)iter.next();    listener.processEvent(mon);  }}  }
class C{  public boolean isTriggered(Collection<String> updatedVars){  if (rules.isEmpty()) {    return false;  }  for (  Template trigger : triggers) {    for (    String updatedVar : updatedVars) {      if (trigger.match(updatedVar).isMatching()) {        return true;      }    }  }  return false;}  }
class C{  public GeeTestResultParser(String testRunName,Collection<ITestRunListener> listeners){  mTestRunName=testRunName;  mTestListeners=new ArrayList<ITestRunListener>(listeners);}  }
class C{  private static String loadVersion(ClassLoader classLoader) throws IOException {  try {    Enumeration<URL> resources=classLoader.getResources("META-INF/MANIFEST.MF");    while (resources.hasMoreElements()) {      final URL url=resources.nextElement();      final Manifest manifest=new Manifest(url.openStream());      final Attributes mainAttributes=manifest.getMainAttributes();      final String value=mainAttributes.getValue(IMPL_VERSION);      if (value != null) {        return value;      }    }  } catch (  IOException e) {    LOG.error("Failed to read manifest",e);    throw new IOException("Failed to find manifest",e);  }  return null;}  }
class C{  public void clear(int i){  int addr=i >> ADDRESS_BITS;  if (addr >= data.length) {    return;  }  data[addr]&=~getBitMask(i);}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length > 0 && "far".equals(args[0])) {    new PRConcurrentMapOpsJUnitTest();    PartitionAttributesFactory paf=new PartitionAttributesFactory();    Properties globalProps=new Properties();    globalProps.put(PartitionAttributesFactory.GLOBAL_MAX_BUCKETS_PROPERTY,"100");    PartitionAttributes pa=paf.setRedundantCopies(0).setLocalMaxMemory(100).create();    AttributesFactory af=new AttributesFactory();    af.setPartitionAttributes(pa);    RegionAttributes ra=af.create();    PartitionedRegion pr=null;    pr=(PartitionedRegion)cache.createRegion("PR4",ra);    assert pr != null : "PR4 not created";    System.out.println("\nData Node: Sleeping forever. Ctrl-C to stop.");    Thread.sleep(Integer.MAX_VALUE);    return;  }  PRConcurrentMapOpsJUnitTest t=new PRConcurrentMapOpsJUnitTest();  t.testLocalConcurrentMapOps();}  }
class C{  private void createTimeSlots(){  if (m_typeName == null)   throw new IllegalStateException("ResourceTypeName not set");  ArrayList<MAssignmentSlot> list=new ArrayList<MAssignmentSlot>();  MUOM uom=MUOM.get(m_ctx,m_C_UOM_ID);  int minutes=MUOMConversion.convertToMinutes(m_ctx,m_C_UOM_ID,Env.ONE);  log.config("Minutes=" + minutes);  if (minutes > 0 && minutes < 60 * 24) {    GregorianCalendar cal=new GregorianCalendar();    cal.setTime(m_startDate);    cal.set(Calendar.HOUR_OF_DAY,0);    cal.set(Calendar.MINUTE,0);    cal.set(Calendar.SECOND,0);    cal.set(Calendar.MILLISECOND,0);    if (m_slotStartTime != null) {      long start=cal.getTimeInMillis();      cal.setTime(TimeUtil.getDayTime(m_startDate,m_slotStartTime));      cal.set(Calendar.SECOND,0);      cal.set(Calendar.MILLISECOND,0);      list.add(new MAssignmentSlot(start,cal.getTimeInMillis()));    }    GregorianCalendar calEnd=new GregorianCalendar();    if (m_slotEndTime != null) {      calEnd.setTime(TimeUtil.getDayTime(m_startDate,m_slotEndTime));      calEnd.set(Calendar.SECOND,0);      calEnd.set(Calendar.MILLISECOND,0);    } else {      calEnd.setTime(m_startDate);      calEnd.set(Calendar.HOUR_OF_DAY,0);      calEnd.set(Calendar.MINUTE,0);      calEnd.set(Calendar.SECOND,0);      calEnd.set(Calendar.MILLISECOND,0);      calEnd.add(Calendar.DAY_OF_YEAR,1);    }    GregorianCalendar calEndSlot=new GregorianCalendar();    calEndSlot.setTime(cal.getTime());    calEndSlot.add(Calendar.MINUTE,minutes);    while (cal.before(calEnd)) {      list.add(new MAssignmentSlot(cal.getTimeInMillis(),calEndSlot.getTimeInMillis()));      cal.add(Calendar.MINUTE,minutes);      calEndSlot.add(Calendar.MINUTE,minutes);    }    calEndSlot.setTime(cal.getTime());    calEndSlot.set(Calendar.HOUR_OF_DAY,0);    calEndSlot.set(Calendar.MINUTE,0);    calEndSlot.set(Calendar.SECOND,0);    calEndSlot.set(Calendar.MILLISECOND,0);    calEndSlot.add(Calendar.DAY_OF_YEAR,1);    list.add(new MAssignmentSlot(cal.getTimeInMillis(),calEndSlot.getTimeInMillis()));  } else {    list.add(new MAssignmentSlot(TimeUtil.getDay(m_startDate),TimeUtil.getNextDay(m_startDate)));  }  m_timeSlots=new MAssignmentSlot[list.size()];  list.toArray(m_timeSlots);}  }
class C{  private void createRequiredEntitiesForJLGLoanSync(final String groupActivationDate){  this.createGroupEntityWithCalendar("2","2","1",groupActivationDate);  this.createClientEntity();  this.associateClientToGroup(this.groupId,this.clientId);  this.createLoanProductEntity();}  }
class C{  public byte readByte() throws IOException {  stream.read(buf1);  return buf1[0];}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  if (mf != null && FileDownloader.isDownloading(mf.getFile(0))) {    FileDownloader fd=FileDownloader.getFileDownloader(mf.getFile(0));    long dlTime=fd.getLastDownloadTimestamp();    if (dlTime > 0)     return new Long(mf.getRecordTime() + dlTime);  }  return new Long(mf == null ? 0 : mf.getRecordEnd());}  }
class C{  @Override public boolean isValidSecondaryFacing(int dir){  return canChangeSecondaryFacing();}  }
class C{  @Inline public static boolean fits(Address val,int bits){  return fits(val.toWord(),bits);}  }
class C{  public CDebuggerComboBox(final ComboBoxModel<CDebuggerTemplateWrapper> model){  super(model);  if (model != null && model.getSize() != 0) {    setSelectedIndex(0);  }}  }
class C{  public void testGetPathContextWhenNoTomcatContextXml() throws Exception {  TomcatWAR war=new TomcatWAR(getResourcePath(PACKAGE_PATH + "tomcat-empty.war"));  assertEquals("tomcat-empty",war.getContext());}  }
class C{  @Override public void adjustmentValueChanged(AdjustmentEvent e){  JScrollBar scrollBar=this.scrollPane.getVerticalScrollBar();  if (e.getSource() == scrollBar) {    int currentValue=scrollBar.getValue() + scrollBar.getVisibleAmount();    if (currentValue >= scrollBar.getMaximum()) {      this.acceptCheckBox.setEnabled(true);      this.acceptCheckBox.requestFocusInWindow();    }  }}  }
class C{  public static String ensureScheme(String url){  if (TextUtils.isEmpty(url)) {    return url;  }  if (url.startsWith("//")) {    return "https:" + url;  }  return url;}  }
class C{  public static <T1,T2>Map<T1,T2> synchronizedMap(){  return Collections.synchronizedMap(new HashMap<T1,T2>());}  }
class C{  public byte[] sizedByteArray(int start,int length){  finished();  byte[] array=new byte[length];  bb.position(start);  bb.get(array);  return array;}  }
class C{  private static byte[] sign(PrivateKey key,String data,SignatureAlgorithm algorithm) throws GeneralSecurityException {  Signature signature=Signature.getInstance(algorithm.getJCAName());  signature.initSign(key);  signature.update(data.getBytes());  return signature.sign();}  }
class C{  public boolean write(IOFSwitch sw,OFMessage msg) throws IOException {  return write(sw,msg,false);}  }
class C{  private X509Certificate readCert(final String keyId){  try (InputStream is=new FileInputStream(getCertPath(keyId).toFile())){    return CryptoUtils.readCertificate(is);  } catch (  Exception e) {    log.error("Failed to read cert for key ID '{}'. Exception: {}",keyId,e);    return null;  }}  }
class C{  public Vector(Collection<? extends E> c){  elementData=c.toArray();  elementCount=elementData.length;  if (elementData.getClass() != Object[].class)   elementData=Arrays.copyOf(elementData,elementCount,Object[].class);}  }
class C{  public boolean isUnresolved(){  return (this.status == DroidsafeIssueResolutionStatus.UNRESOLVED);}  }
class C{  private void jbInit() throws Exception {  component1=Box.createHorizontalStrut(8);  component2=Box.createHorizontalStrut(8);  component3=Box.createVerticalStrut(8);  component4=Box.createVerticalStrut(8);  this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  this.setTitle("DB Convert Dialog");  parameterPanel.setLayout(gridBagLayout1);  lSelectFile.setText("Select File");  fSelectFile.setEditable(true);  bSelectFile.setText("add file");  bSelectFile.addActionListener(this);  fExecute.setText("Execute Directly");  fExecute.addActionListener(this);  lConnect.setText("Connection");  bStart.setText("Start");  bStart.addActionListener(this);  infoPane.setBackground(Color.lightGray);  infoPane.setEditable(false);  scrollPane.setPreferredSize(new Dimension(200,200));  lTarget.setText("Target");  fVerbose.setText("Verbose");  this.getContentPane().add(parameterPanel,BorderLayout.NORTH);  parameterPanel.add(lSelectFile,new GridBagConstraints(1,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,5,5,5),0,0));  parameterPanel.add(fSelectFile,new GridBagConstraints(2,1,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(bSelectFile,new GridBagConstraints(3,1,1,1,0.0,0.0,GridBagConstraints.SOUTHWEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(fExecute,new GridBagConstraints(2,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(lConnect,new GridBagConstraints(1,4,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,5,5,5),0,0));  parameterPanel.add(fConnect,new GridBagConstraints(2,4,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,5,5,5),0,0));  parameterPanel.add(bStart,new GridBagConstraints(3,4,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(component1,new GridBagConstraints(5,0,1,2,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));  parameterPanel.add(component2,new GridBagConstraints(0,0,1,2,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));  parameterPanel.add(component3,new GridBagConstraints(1,6,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));  parameterPanel.add(component4,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));  parameterPanel.add(lTarget,new GridBagConstraints(1,3,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  this.getContentPane().add(scrollPane,BorderLayout.CENTER);  scrollPane.getViewport().add(infoPane,null);  parameterPanel.add(fTarget,new GridBagConstraints(2,3,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(fVerbose,new GridBagConstraints(3,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));}  }
class C{  synchronized public void closeAll(){  boolean interrupted=false;  final Iterator<Map.Entry<UUID,WeakReference<TemporaryStore>>> itr=stores.entryIterator();  while (itr.hasNext()) {    final Map.Entry<UUID,WeakReference<TemporaryStore>> entry=itr.next();    final TemporaryStore store=entry.getValue().get();    if (store == null) {      continue;    }    if (store.isOpen()) {      try {        store.close();      } catch (      Throwable t) {        if (InnerCause.isInnerCause(t,InterruptedException.class))         interrupted=true;      }    }  }  if (interrupted) {    Thread.currentThread().interrupt();  }}  }
class C{  public Path rootDirectory(){  return _rootDirectory;}  }
class C{  public static String obscure(String clearValue){  if (clearValue == null || clearValue.length() == 0)   return "-";  Obscure ob=new Obscure(clearValue);  return ob.getObscuredValue();}  }
class C{  private void inorder(){  inorder(root);}  }
class C{  private boolean inBounds(int x,int y){  if (x < 0 || y < 0 || x >= N || y >= N) {    return false;  }  return true;}  }
class C{  public static String toString(URI uri,String encoding) throws IOException {  return toString(uri,Charsets.toCharset(encoding));}  }
class C{  public static void showNetworkUnavailableMessage(Context context){  AlertDialog.Builder builder=CommonDialogUtils.getAlertDialogWithOneButton(context,context.getResources().getString(R.string.error_network_unavailable),context.getResources().getString(R.string.button_ok),null);  builder.show();}  }
class C{  synchronized void executed(RTEditText editor,Operation op){  Stack<Operation> undoStack=getUndoStack(editor);  Stack<Operation> redoStack=getRedoStack(editor);  while (!undoStack.empty() && op.canMerge(undoStack.peek())) {    Operation previousOp=undoStack.pop();    op.merge(previousOp);  }  push(op,undoStack);  redoStack.clear();}  }
class C{  public static void main(String[] args){  runCLIApplication(GeneratorXMLSpec.class,args);}  }
class C{  public boolean isCyclic(){  return isCyclic;}  }
class C{  public final Vec2 abs(){  return new Vec2(MathUtils.abs(x),MathUtils.abs(y));}  }
class C{  public boolean addressTypeUnique(){  return true;}  }
class C{  public static int runJava(List<String> commands,long waitTime) throws Exception {  String java=System.getProperty("java.home") + "/bin/java";  commands.add(0,java);  String command=commands.toString().replace(","," ");  System.out.println("Executing the following command \n" + command);  ProcessBuilder processBuilder=new ProcessBuilder(commands);  final Process process=processBuilder.start();  BufferedReader errorStream=new BufferedReader(new InputStreamReader(process.getErrorStream()));  BufferedReader outStream=new BufferedReader(new InputStreamReader(process.getInputStream()));  String errorLine;  StringBuilder errors=new StringBuilder();  String outLines;  while ((errorLine=errorStream.readLine()) != null) {    errors.append(errorLine).append("\n");  }  while ((outLines=outStream.readLine()) != null) {    System.out.println(outLines);  }  errorLine=errors.toString();  System.err.println(errorLine);  process.waitFor(waitTime,TimeUnit.MILLISECONDS);  int exitStatus=process.exitValue();  if (exitStatus != 0 && errorLine != null && errorLine.isEmpty()) {    throw new RuntimeException(errorLine);  }  return exitStatus;}  }
class C{  public void flush(){  if (this.size > 0) {    xList.setSize(this.size);    yList.setSize(this.size);    this.target.addAllOf(xList,yList);    this.size=0;  }}  }
class C{  private void dynInit(){  ColumnInfo[] layout=new ColumnInfo[]{new ColumnInfo(" ",".",IDColumn.class,false,false,""),new ColumnInfo(Msg.translate(Env.getCtx(),"DocumentNo"),".",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"Date"),".",Timestamp.class),new ColumnInfo(Msg.translate(Env.getCtx(),"C_BPartner_ID"),".",KeyNamePair.class,"."),new ColumnInfo(Msg.translate(Env.getCtx(),"Line"),".",KeyNamePair.class,"."),new ColumnInfo(Msg.translate(Env.getCtx(),"M_Product_ID"),".",KeyNamePair.class,"."),new ColumnInfo(Msg.translate(Env.getCtx(),"Qty"),".",Double.class),new ColumnInfo(Msg.translate(Env.getCtx(),"Matched"),".",Double.class)};  xMatchedTable.prepareTable(layout,"","",false,"");  xMatchedToTable.prepareTable(layout,"","",true,"");  matchFrom.setSelectedIndex(0);  matchFrom.addActionListener(this);  matchTo.addActionListener(this);  bSearch.addActionListener(this);  xMatchedTable.addEventListener(Events.ON_SELECT,this);  xMatchedToTable.getModel().addTableModelListener(this);  bProcess.addActionListener(this);  sameBPartner.addActionListener(this);  sameProduct.addActionListener(this);  sameQty.addActionListener(this);  String selection=(String)matchFrom.getSelectedItem().getValue();  SimpleListModel model=new SimpleListModel(cmd_matchFrom((String)matchFrom.getSelectedItem().getLabel()));  matchTo.setItemRenderer(model);  matchTo.setModel(model);  xMatchedBorder.setValue(selection);  xMatchedTable.setRowCount(0);  matchTo.setSelectedIndex(0);  cmd_matchTo();  statusBar.setStatusLine("");  statusBar.setStatusDB("0");}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public Duration toDuration(){  return this;}  }
class C{  public AuthnProviderRestRep create(AuthnCreateParam input){  return client.post(AuthnProviderRestRep.class,input,baseUrl);}  }
class C{  public static BrowserDescriptor customTab(@NonNull String version){  return new BrowserDescriptor(PACKAGE_NAME,SIGNATURE_SET,version,true);}  }
class C{  public GraphicsNode createGraphicsNode(BridgeContext ctx,Element e){  ImageNode imageNode=(ImageNode)super.createGraphicsNode(ctx,e);  if (imageNode == null) {    return null;  }  associateSVGContext(ctx,e,imageNode);  hitCheckChildren=false;  GraphicsNode node=buildImageGraphicsNode(ctx,e);  if (node == null) {    SVGImageElement ie=(SVGImageElement)e;    String uriStr=ie.getHref().getAnimVal();    throw new BridgeException(ctx,e,ERR_URI_IMAGE_INVALID,new Object[]{uriStr});  }  imageNode.setImage(node);  imageNode.setHitCheckChildren(hitCheckChildren);  RenderingHints hints=null;  hints=CSSUtilities.convertImageRendering(e,hints);  hints=CSSUtilities.convertColorRendering(e,hints);  if (hints != null)   imageNode.setRenderingHints(hints);  return imageNode;}  }
class C{  public State(File file){  super();  this.file=file;}  }
class C{  @SuppressWarnings("rawtypes") public Iterator<T> postorder(){  if (root == null) {    return empty();  }  return new ValueExtractor<T>(new PostorderTraversal(root));}  }
class C{  public static boolean intersects(RectF a,RectF b){  return a.left < b.right && b.left < a.right && a.top < b.bottom && b.top < a.bottom;}  }
class C{  private static double convertToDouble(final byte[] stream){  final double d;  final int start=0;  final int charCount=stream.length;  int ptr=charCount;  int intStart=0;  boolean isMinus=false;  for (int j=charCount - 1; j > -1; j--) {    if (stream[start + j] == 46) {      ptr=j;      break;    }  }  int intChars=ptr;  if (stream[start] == 43) {    intChars--;    intStart++;  } else   if (stream[start] == 45) {    intStart++;    isMinus=true;  }  final int intNumbers=intChars - intStart;  int decNumbers=charCount - ptr;  if ((intNumbers > 3)) {    isMinus=false;    d=Double.parseDouble(new String(stream));  } else {    if (decNumbers > 6) {      decNumbers=6;    }    d=NumberUtils.convertStreamFromDouble(stream,start + intStart,start + ptr,intNumbers,decNumbers);  }  if (isMinus) {    return -d;  } else {    return d;  }}  }
class C{  public void postDelete(Engine.Delete delete,Throwable ex){}  }
class C{  private static void recordBourneStoragePoolEvent(RecordableEventManager.EventType storagePoolEventType,StoragePool pool,String description,RecordType eventType,DbClient dbClient,RecordableEventManager eventManager){  RecordableBourneEvent event=ControllerUtils.convertToRecordableBourneEvent(pool,storagePoolEventType.toString(),description,"",dbClient,ControllerUtils.BLOCK_EVENT_SERVICE,eventType.toString(),ControllerUtils.BLOCK_EVENT_SOURCE);  try {    eventManager.recordEvents(event);    _logger.info("ViPR {} event recorded. Description: {}",event.getType(),event.getDescription());  } catch (  Exception ex) {    _logger.error(String.format("Failed to record event %s. Event description: %s.",event.getType(),event.getDescription()),ex);  }}  }
class C{  public static String generateAnd(final ITranslationEnvironment environment,final long offset,final OperandSize size,final String operand1,final String operand2,final List<ReilInstruction> instructions) throws IllegalArgumentException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(size,"Error: Argument size can't be null");  Preconditions.checkNotNull(operand1,"Error: Argument operand1 can't be null");  Preconditions.checkNotNull(operand2,"Error: Argument operand2 can't be null");  final String result=environment.getNextVariableString();  instructions.add(ReilHelpers.createAnd(offset,size,operand1,size,operand2,size,result));  generateBinaryOperationFlags(environment,offset + 1,result,size,instructions);  return result;}  }
class C{  public static boolean cloneOrRemoveCaret(Editor editor,Caret caret,boolean above){  if (above && caret.getLogicalPosition().line == 0) {    return false;  }  if (!above && caret.getLogicalPosition().line == editor.getDocument().getLineCount() - 1) {    return false;  }  if (caret.clone(above) == null) {    editor.getCaretModel().removeCaret(caret);  }  return true;}  }
class C{  private boolean closeInternal(int rstStatusCode){  assert (!Thread.holdsLock(this));synchronized (this) {    if (this.rstStatusCode != -1) {      return false;    }    if (in.finished && out.finished) {      return false;    }    this.rstStatusCode=rstStatusCode;    notifyAll();  }  connection.removeStream(id);  return true;}  }
class C{  public String[] validBaudRates(){  return new String[]{"57,600","115,200","230,400","250,000","288,000","333,333","460,800"};}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.144 -0500",hash_original_method="C4526A740A626A32E8FE5B0C1E7B83A6",hash_generated_method="A82042D96E725949B732B712BE4A645E") @Override public short shortValue(){  return value;}  }
class C{  public static void makeHistogramsforInputRPUs(GateLibrary gate_library,String file_name_default){  HistogramBins hbins=new HistogramBins();  hbins.init();  for (int i=0; i < gate_library.get_INPUT_NAMES().length; ++i) {    Double log_OFF=Math.log10(gate_library.get_INPUTS_OFF().get(gate_library.get_INPUT_NAMES()[i]));    Double log_ON=Math.log10(gate_library.get_INPUTS_ON().get(gate_library.get_INPUT_NAMES()[i]));    ArrayList<Double> hist_OFF=HistogramUtil.getDefaultHistgramAtSpecifiedMean(log_OFF,file_name_default);    ArrayList<Double> hist_ON=HistogramUtil.getDefaultHistgramAtSpecifiedMean(log_ON,file_name_default);    double[] load_OFF=HistogramUtil.normalize(HistogramUtil.placeDataIntoBins(hist_OFF,hbins));    double[] load_ON=HistogramUtil.normalize(HistogramUtil.placeDataIntoBins(hist_ON,hbins));    double[] shifted_OFF=HistogramUtil.normalizeHistogramToNewMedian(load_OFF,gate_library.get_INPUTS_OFF().get(gate_library.get_INPUT_NAMES()[i]),hbins);    double[] shifted_ON=HistogramUtil.normalizeHistogramToNewMedian(load_ON,gate_library.get_INPUTS_ON().get(gate_library.get_INPUT_NAMES()[i]),hbins);    gate_library.get_INPUTS_HIST_OFF().put(gate_library.get_INPUT_NAMES()[i],shifted_OFF);    gate_library.get_INPUTS_HIST_ON().put(gate_library.get_INPUT_NAMES()[i],shifted_ON);  }}  }
class C{  @Override protected void onSizeChanged(int w,int h,int oldw,int oldh){  super.onSizeChanged(w,h,oldw,oldh);  setupBounds(w,h);  setupPaints();  invalidate();}  }
class C{  @Override public String toString(){  return CookieHeaderParser.toString(this);}  }
class C{  public synchronized Directory merge(Directory source,Directory destination) throws DirectoryException {  merging=true;  ResourceNode sourceNode=source.getRootNode();  ResourceNode destinationNode=destination.getRootNode();  Integer nodesMerged=new Integer(0);  System.out.println("###### START DIRECTORY MERGE ########");  _merge(sourceNode,destinationNode,nodesMerged);  System.out.println(String.format("###### END DIRECTORY MERGE, MERGED=%d ########",nodesMerged));  destination.mergeSessions(source);  lastMergedVersion=currentVersion;  merging=false;  return this;}  }
class C{  public MariaDbBlob(){  blobContent=new byte[0];}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void rotateCurrentActivity(){  rotateActivity(SOLO.getCurrentActivity());  instrumentation.waitForIdleSync();}  }
class C{  public static void error(Subscriber<?> s,Throwable e){  s.onSubscribe(EmptySubscription.INSTANCE);  s.onError(e);}  }
class C{  public void finishUpdateProcess(final SimulatedUpdate update,final List<String> updateResultMessages){  final Message updateResultMessage=createUpdateResultMessage(update,ActionStatus.FINISHED,updateResultMessages);  sendMessage(spExchange,updateResultMessage);}  }
class C{  @RequestMapping(method=RequestMethod.DELETE,value="/{region}") @ApiOperation(value="delete all data",notes="Delete all data in the region",response=void.class) @ApiResponses({@ApiResponse(code=200,message="OK"),@ApiResponse(code=401,message="Invalid Username or Password."),@ApiResponse(code=403,message="Insufficient privileges for operation."),@ApiResponse(code=404,message="Region does not exist"),@ApiResponse(code=500,message="if GemFire throws an error or exception")}) @PreAuthorize("@securityService.authorize('DATA', 'WRITE', #region)") public ResponseEntity<?> delete(@PathVariable("region") String region){  logger.debug("Deleting all data in Region ({})...",region);  region=decode(region);  deleteValues(region);  return new ResponseEntity<>(HttpStatus.OK);}  }
class C{  public void init() throws ServletException {}  }
