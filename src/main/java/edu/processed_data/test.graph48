class C{  public void forceUpdate(){}  }
class C{  public static void cleanDirectory(File directory) throws IOException {  if (!directory.exists()) {    String message=directory + " does not exist";    throw new IllegalArgumentException(message);  }  if (!directory.isDirectory()) {    String message=directory + " is not a directory";    throw new IllegalArgumentException(message);  }  File[] files=directory.listFiles();  if (files == null) {    throw new IOException("Failed to list contents of " + directory);  }  IOException exception=null;  for (  File file : files) {    try {      forceDelete(file);    } catch (    IOException ioe) {      exception=ioe;    }  }  if (null != exception) {    throw exception;  }}  }
class C{  @Override public void renderLimitLines(Canvas c){}  }
class C{  public MidPointIntegrator(final double relativeAccuracy,final double absoluteAccuracy,final int minimalIterationCount,final int maximalIterationCount) throws MathIllegalArgumentException {  super(relativeAccuracy,absoluteAccuracy,minimalIterationCount,maximalIterationCount);  if (maximalIterationCount > MIDPOINT_MAX_ITERATIONS_COUNT) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED,maximalIterationCount,MIDPOINT_MAX_ITERATIONS_COUNT);  }}  }
class C{  public static IndexKey prepareDefaultEndIndexKey(SegmentProperties segmentProperties) throws KeyGenException {  long[] dictionarySurrogateKey=new long[segmentProperties.getDimensions().size() - segmentProperties.getNumberOfNoDictionaryDimension()];  int index=0;  int[] dimColumnsCardinality=segmentProperties.getDimColumnsCardinality();  for (int i=0; i < dimColumnsCardinality.length; i++) {    dictionarySurrogateKey[index++]=dimColumnsCardinality[i];  }  IndexKey endIndexKey;  byte[] dictionaryendMdkey=segmentProperties.getDimensionKeyGenerator().generateKey(dictionarySurrogateKey);  byte[] noDictionaryEndKeyBuffer=getNoDictionaryDefaultEndKey(segmentProperties);  endIndexKey=new IndexKey(dictionaryendMdkey,noDictionaryEndKeyBuffer);  return endIndexKey;}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColors[mColorIndex]);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public TimeColumn time(){  TimeColumn newColumn=TimeColumn.create(this.name() + " time");  for (int r=0; r < this.size(); r++) {    long c1=this.getLong(r);    if (c1 == MISSING_VALUE) {      newColumn.add(TimeColumn.MISSING_VALUE);    } else {      newColumn.add(PackedLocalDateTime.time(c1));    }  }  return newColumn;}  }
class C{  public Builder zoomAnimation(Boolean zoomAnimation){  this.zoomAnimation=zoomAnimation;  return this;}  }
class C{  public static int computeId(String cName,float minScore,float maxExpected,float minPercentIdentity,IReadBlock readBlock){  if (readBlock.getNumberOfMatches() == 0)   return IdMapper.NOHITS_ID;  for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {    IMatchBlock match=readBlock.getMatchBlock(i);    if (match.getBitScore() >= minScore && match.getExpected() <= maxExpected && match.getPercentIdentity() >= minPercentIdentity) {      int id=match.getId(cName);      if (id != 0)       return id;    }  }  return IdMapper.UNASSIGNED_ID;}  }
class C{  @Override public boolean isFieldName(){  return false;}  }
class C{  private void prepareContainers(){  consG=new HashMap<Node,IVarAbstraction>(39341);  pointers=new ZArrayNumberer<IVarAbstraction>(25771);  allocations=new ZArrayNumberer<IVarAbstraction>();  constraints=new ZArrayNumberer<PlainConstraint>(25771);  thread_run_callsites=new HashSet<Stmt>(251);  multiCallsites=new HashSet<Stmt>(251);  queue_cg=new LinkedList<Integer>();  func2int=new HashMap<SootMethod,Integer>(5011);  int2func=new HashMap<Integer,SootMethod>(5011);  edgeMapping=new HashMap<Edge,CgEdge>(19763);  consG.clear();  constraints.clear();  func2int.clear();  edgeMapping.clear();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_LEAVE_HE_LEFT(String value0){  return new SM_SYSTEM_MESSAGE(1300240,value0);}  }
class C{  protected void removeAt(int index){  _values[index]=0;  super.removeAt(index);}  }
class C{  protected void scanPIData(String target,XMLString data) throws IOException, XNIException {  if (target.length() == 3) {    char c0=Character.toLowerCase(target.charAt(0));    char c1=Character.toLowerCase(target.charAt(1));    char c2=Character.toLowerCase(target.charAt(2));    if (c0 == 'x' && c1 == 'm' && c2 == 'l') {      reportFatalError("ReservedPITarget",null);    }  }  if (!fEntityScanner.skipSpaces()) {    if (fEntityScanner.skipString("?>")) {      data.clear();      return;    } else {      if (fNamespaces && fEntityScanner.peekChar() == ':') {        fEntityScanner.scanChar();        XMLStringBuffer colonName=new XMLStringBuffer(target);        colonName.append(':');        String str=fEntityScanner.scanName();        if (str != null)         colonName.append(str);        reportFatalError("ColonNotLegalWithNS",new Object[]{colonName.toString()});        fEntityScanner.skipSpaces();      } else {        reportFatalError("SpaceRequiredInPI",null);      }    }  }  fStringBuffer.clear();  if (fEntityScanner.scanData("?>",fStringBuffer)) {    do {      int c=fEntityScanner.peekChar();      if (c != -1) {        if (XMLChar.isHighSurrogate(c)) {          scanSurrogates(fStringBuffer);        } else         if (isInvalidLiteral(c)) {          reportFatalError("InvalidCharInPI",new Object[]{Integer.toHexString(c)});          fEntityScanner.scanChar();        }      }    } while (fEntityScanner.scanData("?>",fStringBuffer));  }  data.setValues(fStringBuffer);}  }
class C{  public boolean isList(String key){  Object val=get(key);  return val instanceof List;}  }
class C{  public boolean isStatic(){  return Modifier.isStatic(this.getModifiers());}  }
class C{  public static void main(String[] args){  Distribution d=new Distribution();  d.setValue(1.0,1.0);  d.setValue(2.0,1.0);  d.setValue(3.0,1.0);  d.setValue(4.0,1.0);  d.setValue(5.0,1.0);  System.out.println(gr.demokritos.iit.jinsect.algorithms.statistics.statisticalCalculation.entropy(d));  System.out.println("Only values:\n===========");  System.out.println("Mean: " + d.average(true));  System.out.println("Variance: " + d.variance(true));  System.out.println("Std deviation :" + d.standardDeviation(true));  System.out.println("\nIs normal: " + d.isNormal(true,0.05));  System.out.println("\nUsing keys:\n===========");  System.out.println("Mean: " + d.average(false));  System.out.println("Variance: " + d.variance(false));  System.out.println("Std deviation :" + d.standardDeviation(false));  System.out.println("\nKey of max value: " + d.getKeyOfMaxValue());  System.out.println("\nIs normal: " + d.isNormal(false,0.05));  System.out.println("\nValue at 5% of population: " + d.getValueAtPoint(false,0.05));  System.out.println("\nValue at 95% of population: " + d.getValueAtPoint(false,0.95));}  }
class C{  public void print(int ch) throws IOException {  write(ch);  throw new RuntimeException();}  }
class C{  public static String idealNotify(HttpServletRequest request,HttpServletResponse response){  Locale locale=UtilHttp.getLocale(request);  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");  Map<String,Object> parametersMap=UtilHttp.getParameterMap(request);  String transactionId=request.getParameter("trxid");  for (  String name : parametersMap.keySet()) {    String value=request.getParameter(name);    Debug.logError("### Param: " + name + " => "+ value,module);  }  String orderId=null;  String paymentStatus=null;  try {    IdealConnector connector=new IdealConnector("payment");    Transaction transaction=connector.requestTransactionStatus(transactionId);    orderId=transaction.getPurchaseID();    if (orderId == null) {      orderId=(String)request.getSession().getAttribute("purchaseID");    }    String payAmount=transaction.getAmount();    if (payAmount == null) {      payAmount=(String)request.getSession().getAttribute("payAmount");    }    paymentStatus=transaction.getStatus();    request.setAttribute("transactionId",transactionId);    request.setAttribute("paymentStatus",paymentStatus);    request.setAttribute("paymentAmount",payAmount);  } catch (  IdealException ex) {    Debug.logError(ex.getMessage(),module);    request.setAttribute("_ERROR_MESSAGE_",ex.getConsumerMessage());    return "error";  }  if (userLogin == null) {    String userLoginId="system";    try {      userLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId",userLoginId).queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,"Cannot get UserLogin for: " + userLoginId + "; cannot continue",module);      request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"idealEvents.problemsGettingAuthenticationUser",locale));      return "error";    }  }  GenericValue orderHeader=null;  if (UtilValidate.isNotEmpty(orderId)) {    try {      orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,"Cannot get the order header for order: " + orderId,module);      request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"idealEvents.problemsGettingOrderHeader",locale));      return "error";    }  } else {    Debug.logError("iDEAL did not callback with a valid orderId!",module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"idealEvents.noValidOrderIdReturned",locale));    return "error";  }  if (orderHeader == null) {    Debug.logError("Cannot get the order header for order: " + orderId,module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"idealEvents.problemsGettingOrderHeader",locale));    return "error";  }  boolean okay=true;  boolean beganTransaction=false;  try {    beganTransaction=TransactionUtil.begin();    if ("Success".equals(paymentStatus)) {      okay=OrderChangeHelper.approveOrder(dispatcher,userLogin,orderId);    } else     if ("Cancelled".equals(paymentStatus)) {      okay=OrderChangeHelper.cancelOrder(dispatcher,userLogin,orderId);    }    if (okay) {      okay=setPaymentPreferences(delegator,dispatcher,userLogin,orderId,request);    }  } catch (  Exception e) {    String errMsg="Error handling iDEAL notification";    Debug.logError(e,errMsg,module);    try {      TransactionUtil.rollback(beganTransaction,errMsg,e);    } catch (    GenericTransactionException gte2) {      Debug.logError(gte2,"Unable to rollback transaction",module);    }  } finally {    if (!okay) {      try {        TransactionUtil.rollback(beganTransaction,"Failure in processing iDEAL callback",null);      } catch (      GenericTransactionException gte) {        Debug.logError(gte,"Unable to rollback transaction",module);      }    } else {      try {        TransactionUtil.commit(beganTransaction);      } catch (      GenericTransactionException gte) {        Debug.logError(gte,"Unable to commit transaction",module);      }    }  }  if (okay) {    request.setAttribute("_EVENT_MESSAGE_",UtilProperties.getMessage(resource,"IdealSuccessful",locale));    OrderChangeHelper.releaseInitialOrderHold(dispatcher,orderId);    Map<String,String> emailContext=UtilMisc.toMap("orderId",orderId,"userLogin",userLogin);    try {      dispatcher.runSync("sendOrderConfirmation",emailContext);    } catch (    GenericServiceException e) {      Debug.logError(e,"Problems sending email confirmation",module);    }  }  return "success";}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSkill_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201266,skilltarget,skillname);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);}  }
class C{  private void parseStale(String value){  if (value != null) {    if (value.equalsIgnoreCase("true")) {      mStale=true;    }  }}  }
class C{  public static <E,T>Stream<T> shiftingWindowCollect(Stream<E> stream,int rollingFactor,Collector<? super E,?,? extends T> collector){  Objects.requireNonNull(stream);  Objects.requireNonNull(collector);  return roll(stream,rollingFactor).map(null);}  }
class C{  public String toString(String enc) throws UnsupportedEncodingException {  return new String(toByteArray(),enc);}  }
class C{  public boolean isServiceUnitPreAllocated(String suName){  return this.preAllocatedBundles.contains(suName);}  }
class C{  public K keyAt(int index){  return (K)mArray[index << 1];}  }
class C{  public static void rename(IDexUnit unit,String newName,long itemId){  ActionRenameData data=new ActionRenameData();  data.setNewName(newName);  ActionContext action=new ActionContext(unit,Actions.RENAME,itemId,null);  if (unit.prepareExecution(action,data)) {    unit.executeAction(action,data,false);  }}  }
class C{  public void init$Children(){}  }
class C{  public Duration(){}  }
class C{  public final void fatal(final Object o){  log(Level.FATAL,o);}  }
class C{  public static <T>void removeService(ProviderConfig<T> providerConfig) throws RpcException {  removeService(providerConfig.getUrl());}  }
class C{  public static String classVersionToJdk(int version){  return "1." + Integer.toString(version - 44);}  }
class C{  public static void println(boolean x){  out.println(x);}  }
class C{  public void registerCache(ICache cache){  if (null != cache) {    mCaches.add(cache);  }}  }
class C{  public static void spawnAll(){  if (!DeveloperConfig.SPAWN_ENABLE) {    log.info("Spawns are disabled");    return;  }  for (  WorldMapTemplate worldMapTemplate : DataManager.WORLD_MAPS_DATA) {    if (worldMapTemplate.isInstance()) {      continue;    }    spawnBasedOnTemplate(worldMapTemplate);  }  DataManager.SPAWNS_DATA2.clearTemplates();  printWorldSpawnStats();  ConquestSpawnManager.spawnAll();}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> pathAnd(String path,ISpacePredicate leftPredicate,ISpacePredicate rightPredicate){  return path(path,and(leftPredicate,rightPredicate));}  }
class C{  public static InputStream toInputStream(String input,String encoding) throws IOException {  byte[] bytes=input.getBytes(Charsets.toCharset(encoding));  return new ByteArrayInputStream(bytes);}  }
class C{  public Matrix arrayRightDivideEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] / B.A[i][j];    }  }  return this;}  }
class C{  private StringUtils(){}  }
class C{  public boolean equals(XMLGrammarDescription desc1,XMLGrammarDescription desc2){  return desc1.equals(desc2);}  }
class C{  @Override public void createEdgesConnecting(UniqueVertexGraph gGraph,String sStartNode,List lOtherNodes,HashMap hAppearenceHistogram){  if (lOtherNodes != null)   if (lOtherNodes.size() == 0) {    VertexImpl v=new VertexImpl();    v.setLabel(sStartNode);    try {      gGraph.add(v);    } catch (    Exception e) {      e.printStackTrace();    }    return;  }  Vertex vOldA=utils.locateVertexInGraph(gGraph,sStartNode);  Vertex vA;  if (vOldA != null)   vA=vOldA; else {    vA=new VertexImpl();    vA.setLabel(sStartNode);    try {      gGraph.add(vA);    } catch (    Exception e) {    }  }  java.util.Iterator iIter=lOtherNodes.iterator();  Double dDist=0.0;  while (iIter.hasNext()) {    dDist++;    VertexImpl vB=new VertexImpl();    vB.setLabel((String)iIter.next());    WeightedEdge weCorrectEdge=(WeightedEdge)gr.demokritos.iit.jinsect.utils.locateDirectedEdgeInGraph(gGraph,vA,vB);    try {      Distribution dTemp=null;      if (weCorrectEdge == null) {        dTemp=new Distribution();        dTemp.increaseValue(dDist,1.0);        weCorrectEdge=gGraph.addEdge(vA,vB,0.0);      } else {        dTemp=(Distribution)EdgeDistros.get(weCorrectEdge);        if (dTemp == null)         dTemp=new Distribution();        dTemp.increaseValue(dDist,1.0);      }      EdgeDistros.put(weCorrectEdge,dTemp);      if (EdgeDistros.get(weCorrectEdge) == null)       throw new NullPointerException("Added null edge distro...");      Distribution dProb=dTemp.getProbabilityDistribution();    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  private void correctErrors(byte[] codewordBytes,int numDataCodewords) throws ChecksumException {  int numCodewords=codewordBytes.length;  int[] codewordsInts=new int[numCodewords];  for (int i=0; i < numCodewords; i++) {    codewordsInts[i]=codewordBytes[i] & 0xFF;  }  int numECCodewords=codewordBytes.length - numDataCodewords;  try {    rsDecoder.decode(codewordsInts,numECCodewords);  } catch (  ReedSolomonException ignored) {    throw ChecksumException.getChecksumInstance();  }  for (int i=0; i < numDataCodewords; i++) {    codewordBytes[i]=(byte)codewordsInts[i];  }}  }
class C{  public void recurseSides(final BSPTree<S> node,final SubHyperplane<S> sub){  if (node.getCut() == null) {    if ((Boolean)node.getAttribute()) {      plusFound=true;      minusFound=true;    }    return;  }  final Hyperplane<S> hyperplane=node.getCut().getHyperplane();  final SubHyperplane.SplitSubHyperplane<S> split=sub.split(hyperplane);switch (split.getSide()) {case PLUS:    if (node.getCut().split(sub.getHyperplane()).getSide() == Side.PLUS) {      if (!region.isEmpty(node.getMinus())) {        plusFound=true;      }    } else {      if (!region.isEmpty(node.getMinus())) {        minusFound=true;      }    }  if (!(plusFound && minusFound)) {    recurseSides(node.getPlus(),sub);  }break;case MINUS:if (node.getCut().split(sub.getHyperplane()).getSide() == Side.PLUS) {if (!region.isEmpty(node.getPlus())) {  plusFound=true;}} else {if (!region.isEmpty(node.getPlus())) {  minusFound=true;}}if (!(plusFound && minusFound)) {recurseSides(node.getMinus(),sub);}break;case BOTH:recurseSides(node.getPlus(),split.getPlus());if (!(plusFound && minusFound)) {recurseSides(node.getMinus(),split.getMinus());}break;default :if (node.getCut().getHyperplane().sameOrientationAs(sub.getHyperplane())) {if ((node.getPlus().getCut() != null) || ((Boolean)node.getPlus().getAttribute())) {plusFound=true;}if ((node.getMinus().getCut() != null) || ((Boolean)node.getMinus().getAttribute())) {minusFound=true;}} else {if ((node.getPlus().getCut() != null) || ((Boolean)node.getPlus().getAttribute())) {minusFound=true;}if ((node.getMinus().getCut() != null) || ((Boolean)node.getMinus().getAttribute())) {plusFound=true;}}}}  }
class C{  @Override public void validate(){  try {    getLock().writeLock().lock();    invalidQualityStates.clear();  }  finally {    getLock().writeLock().unlock();  }}  }
class C{  @Override public final Node item(int index){  if (index < 0)   throw new IllegalArgumentException("HTM012 Argument 'index' is negative.");  return item(_topLevel,new CollectionIndex(index));}  }
class C{  public static void loadLibraryFromJar(String path) throws Exception {  checkArgument(path.startsWith("/"),"absolute path must start with  /");  String[] parts=path.split("/");  String filename=(parts.length > 0) ? parts[parts.length - 1] : null;  File dir=File.createTempFile("native","");  dir.delete();  if (!(dir.mkdir())) {    throw new IOException("Failed to create temp directory " + dir.getAbsolutePath());  }  dir.deleteOnExit();  File temp=new File(dir,filename);  temp.deleteOnExit();  byte[] buffer=new byte[1024];  int read;  InputStream input=NativeUtils.class.getResourceAsStream(path);  if (input == null) {    throw new FileNotFoundException("Couldn't find file into jar " + path);  }  OutputStream out=new FileOutputStream(temp);  try {    while ((read=input.read(buffer)) != -1) {      out.write(buffer,0,read);    }  }  finally {    out.close();    input.close();  }  if (!temp.exists()) {    throw new FileNotFoundException("Failed to copy file from jar at " + temp.getAbsolutePath());  }  System.load(temp.getAbsolutePath());}  }
class C{  public static <T extends RealFieldElement<T>>T distanceInf(final FieldVector3D<T> v1,final FieldVector3D<T> v2){  return v1.distanceInf(v2);}  }
class C{  @Override public boolean hasFixedPropertiesArray(){  return true;}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  public void transformValues(TIntFunction function){  Object[] keys=_set;  int[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (keys[i] != null && keys[i] != REMOVED) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ClassDecl fullCopy(){  ClassDecl tree=(ClassDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  @Override public Filter createFilter(){  return new NotExtended();}  }
class C{  public BoardGetTopicsQueryWithExtended previewLength(Integer value){  return unsafeParam("preview_length",value);}  }
class C{  protected FlowSet<SynchronizedRegionFlowPair> newInitialFlow(){  FlowSet<SynchronizedRegionFlowPair> ret=emptySet.clone();  if (method.isSynchronized() && methodTn != null) {    ret.add(new SynchronizedRegionFlowPair(methodTn,true));  }  return ret;}  }
class C{  public NotesGetQuery(VkApiClient client,UserActor actor){  super(client,"notes.get",GetResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public void prepareForRender(Entity entity){  EntityLivingBase living=(EntityLivingBase)entity;  isSneak=living != null && living.isSneaking();  isChild=living != null && living.isChild();  isRiding=living.isRiding();  this.swingProgress=living.getSwingProgress(0);  if (living != null) {    ModelBiped.ArmPose mainPose=ArmPose.EMPTY;    ModelBiped.ArmPose offPose=ArmPose.EMPTY;    if (living.getHeldItemMainhand() != null) {      mainPose=ArmPose.ITEM;      if (living.getItemInUseCount() > 0) {        EnumAction enumaction=living.getHeldItemMainhand().getItemUseAction();        if (enumaction == EnumAction.BLOCK) {          mainPose=ModelBiped.ArmPose.BLOCK;        } else         if (enumaction == EnumAction.BOW) {          mainPose=ModelBiped.ArmPose.BOW_AND_ARROW;        }      }    }    if (living.getHeldItemOffhand() != null) {      offPose=ModelBiped.ArmPose.ITEM;      if (living.getItemInUseCount() > 0) {        EnumAction enumaction1=living.getHeldItemOffhand().getItemUseAction();        if (enumaction1 == EnumAction.BLOCK) {          offPose=ModelBiped.ArmPose.BLOCK;        }      }    }    if (living.getPrimaryHand() == EnumHandSide.RIGHT) {      rightArmPose=mainPose;      leftArmPose=offPose;    } else {      rightArmPose=offPose;      leftArmPose=mainPose;    }  }}  }
class C{  public static void fireCellChanged(final JTable table,final int rowIndex,final int columnIndex){  ((AbstractTableModel)table.getModel()).fireTableCellUpdated(rowIndex,columnIndex);}  }
class C{  public void addAnnotation(Annotation annotation){  this.addAnnotations(new Annotation[]{annotation});}  }
class C{  public LazyArray optJSONArray(int index) throws LazyException {  LazyNode token=getOptionalValueToken(index);  if (token == null)   return null;  if (token.type == LazyNode.VALUE_NULL)   return null;  if (token.type != LazyNode.ARRAY)   throw new LazyException("Requested value is not an array",token);  return new LazyArray(token,cbuf);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  void localIsUnknown(Local l){  PurityNode node=PurityGlobalNode.node;  localsRemove(l);  localsPut(l,node);  nodes.add(node);  if (doCheck)   sanityCheck();}  }
class C{  public boolean supports(@MagicConstant(flagsFromClass=Features.class) int capability){  IAndroidTarget target=getTarget();  if (target != null) {    return RenderService.supportsCapability(getModule(),target,capability);  }  return false;}  }
class C{  protected void drawYLabels(Canvas c,float fixedPosition,float[] positions,float offset){  for (int i=0; i < mYAxis.mEntryCount; i++) {    String text=mYAxis.getFormattedLabel(i);    if (!mYAxis.isDrawTopYLabelEntryEnabled() && i >= mYAxis.mEntryCount - 1)     return;    c.drawText(text,fixedPosition,positions[i * 2 + 1] + offset,mAxisLabelPaint);  }}  }
class C{  private boolean isPaused(){  return paused;}  }
class C{  private DownloadOverwriteInfoBar(String fileName,String dirName,String dirFullPath){  super(null,R.drawable.infobar_downloading,null,null);  mFileName=fileName;  mDirName=dirName;  mDirFullPath=dirFullPath;}  }
class C{  public boolean isApplicable(){  AlignmentViewer viewer=(AlignmentViewer)getViewer();  return viewer.isAllowAminoAcids() && !viewer.isShowAminoAcids();}  }
class C{  public static Executor createExecutor(int threadPoolSize,int threadPriority,QueueProcessingType tasksProcessingType){  boolean lifo=tasksProcessingType == QueueProcessingType.LIFO;  BlockingQueue<Runnable> taskQueue=lifo ? new LIFOLinkedBlockingDeque<Runnable>() : new LinkedBlockingQueue<Runnable>();  return new ThreadPoolExecutor(threadPoolSize,threadPoolSize,0L,TimeUnit.MILLISECONDS,taskQueue,createThreadFactory(threadPriority,"uil-pool-"));}  }
class C{  public static void decorate(View hostView,View decorView,int gravity,int leftMargin,int topMargin,int rightMargin,int bottomMargin){  if (hostView == null || decorView == null) {    return;  }  ViewParent parent=hostView.getParent();  if (parent == null) {    if (DEBUG) {      throw new IllegalStateException("host " + hostView + " not attached to parent");    }    return;  }  if (!(parent instanceof ViewGroup)) {    if (DEBUG) {      throw new InvalidParameterException("host " + hostView + " has invalid parent "+ parent);    }    return;  }  if (decorView.getParent() != null) {    if (DEBUG) {      throw new IllegalStateException("decorate " + decorView + " has already be added to a ViewParent "+ decorView.getParent());    }    return;  }  FrameLayout.LayoutParams hostLp=generateHostLayoutParams(hostView);  FrameLayout.LayoutParams decorLp=generateDecorLayoutParams(gravity,leftMargin,topMargin,rightMargin,bottomMargin);  ViewGroup hostGroup=(ViewGroup)parent;  FrameLayout decorContainer;  if ((hostGroup instanceof FrameLayout) && getTag(hostView) == TAG_DECORATE) {    decorContainer=(FrameLayout)hostGroup;  } else {    decorContainer=new DecorateContainer(hostGroup.getContext(),hostView);    int index=computeChildIndex(hostGroup,hostView);    ViewGroup.LayoutParams lp=hostView.getLayoutParams();    lp.width=ViewGroup.LayoutParams.WRAP_CONTENT;    lp.height=ViewGroup.LayoutParams.WRAP_CONTENT;    hostGroup.removeView(hostView);    hostGroup.addView(decorContainer,index,lp);    setTag(decorContainer,TAG_DECORATE);  }  decorContainer.removeAllViews();  if (hostLp != null) {    decorContainer.addView(hostView,hostLp);  }  if (decorLp != null) {    decorContainer.addView(decorView,decorLp);  }}  }
class C{  public static void v(String msg){  if (LOG_ENABLE) {    Log.v(TAG,buildMsg(msg));  }}  }
class C{  public static void main(String[] args){  String s="<div id='aaa' class='b'>aaaaa<span class='a'>dddd</span><span class='a'>aaaaaa</span></div>";  Html h=Html.create(s);  List<Element> e=h.find("div");  System.out.println("1:" + e);  e=h.find("div span");  System.out.println("2:" + e);  System.out.println("3:" + h.find("div.b"));  System.out.println("4:" + h.find("div.b span.a"));  System.out.println("5:" + h.find("#aaa .a"));  System.out.println("5:" + h.find("#aaa .a(aaaa)"));}  }
class C{  public UsersGetSubscriptionsQuery(VkApiClient client){  super(client,"users.getSubscriptions",GetSubscriptionsResponse.class);}  }
class C{  @Override public boolean isCritical(){  return true;}  }
class C{  @Override public void close(){}  }
class C{  protected AbstractFieldIntegrator(final Field<T> field,final String name){  this.field=field;  this.name=name;  stepHandlers=new ArrayList<FieldODEStepHandler<T>>();  stepStart=null;  stepSize=null;  eventsStates=new ArrayList<FieldEventState<T>>();  statesInitialized=false;  evaluations=new Incrementor();}  }
class C{  public void dump(){  System.out.println("Name        " + name);  System.out.println("SampleRate  " + sampleRate);  System.out.println("NumChannels " + numChannels);  System.out.println("lpcMin      " + lpcMin);  System.out.println("lpcRange    " + lpcRange);  for (Iterator i=diphoneMap.values().iterator(); i.hasNext(); ) {    Diphone diphone=(Diphone)i.next();    diphone.dump();  }}  }
class C{  public boolean containsValue(Object value){  if (value == null)   throw new NullPointerException();  final Segment<K,V>[] segments=this.segments;  int[] mc=new int[segments.length];  for (int k=0; k < RETRIES_BEFORE_LOCK; ++k) {    int sum=0;    int mcsum=0;    for (int i=0; i < segments.length; ++i) {      int c=segments[i].count;      mcsum+=mc[i]=segments[i].modCount;      if (segments[i].containsValue(value))       return true;    }    boolean cleanSweep=true;    if (mcsum != 0) {      for (int i=0; i < segments.length; ++i) {        int c=segments[i].count;        if (mc[i] != segments[i].modCount) {          cleanSweep=false;          break;        }      }    }    if (cleanSweep)     return false;  }  for (int i=0; i < segments.length; ++i)   segments[i].lock();  boolean found=false;  try {    for (int i=0; i < segments.length; ++i) {      if (segments[i].containsValue(value)) {        found=true;        break;      }    }  }  finally {    for (int i=0; i < segments.length; ++i)     segments[i].unlock();  }  return found;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public MethodAccess fullCopy(){  MethodAccess tree=(MethodAccess)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private static boolean isEmpty(@Nonnull final File file,@Nonnull final Charset charset){  try {    return FileUtil.isEmpty(file,charset);  } catch (  final IOException e) {    throw new IllegalStateException("The given file could not be read.");  }}  }
class C{  private boolean isUnaryMinus(final Token previous){  boolean isUnary=false;  if ((previous instanceof Brace) && ((Brace)previous).isOpening()) {    isUnary=true;  } else   if ((previous instanceof Operator) && (((Operator)previous).getType() == '/' || ((Operator)previous).getType() == '*')) {    isUnary=true;  }  return isUnary;}  }
class C{  public Bundler putChar(String key,char value){  bundle.putChar(key,value);  return this;}  }
class C{  public AemToolbar delete(){  click(MenuOption.DELETE);  return this;}  }
class C{  public static List<? extends Element> childElementList(DocumentFragment fragment){  if (fragment == null)   return null;  List<Element> elements=new LinkedList<Element>();  Node node=fragment.getFirstChild();  if (node != null) {    do {      if (node.getNodeType() == Node.ELEMENT_NODE) {        Element childElement=(Element)node;        elements.add(childElement);      }    } while ((node=node.getNextSibling()) != null);  }  return elements;}  }
class C{  public static byte[] decodeFromFile(String filename) throws java.io.IOException {  byte[] decodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      throw new java.io.IOException("File is too big for this convenience method (" + file.length() + " bytes).");    }    buffer=new byte[(int)file.length()];    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  private void generateView(){  rootView=new FrameLayout(getContext());  textView1=new TextView(getContext());  textView1.setId(android.R.id.text1);  textView1.setTag("textView_1");  rootView.addView(textView1);  viewGroup1=new LinearLayout(getContext());  rootView.addView(viewGroup1);  textView2=new TextView(getContext());  textView2.setId(android.R.id.text2);  textView2.setTag("textView_2");  viewGroup1.addView(textView2);  button1=new Button(getContext());  button1.setId(android.R.id.button1);  button1.setVisibility(View.INVISIBLE);  viewGroup1.addView(button1);  viewGroup2=new LinearLayout(getContext());  rootView.addView(viewGroup2);  button2=new Button(getContext());  button2.setId(android.R.id.button2);  viewGroup2.addView(button2);  viewGroup3=new LinearLayout(getContext());  viewGroup3.setVisibility(View.GONE);  viewGroup2.addView(viewGroup3);  button3=new Button(getContext());  button3.setId(android.R.id.button3);  viewGroup3.addView(button3);}  }
class C{  public boolean isApplicable(){  return getViewer().getTabbedIndex() == ClusterViewer.PCoA_TAB_INDEX;}  }
class C{  public NewSLDBase(String name){  this.name=name;}  }
class C{  public boolean isFilterLogTypeEnabled(int type){  return (logDisabledTypesMask & getMask(type)) == 0;}  }
class C{  public boolean canModifyUser(UserCredentials other){  if (other == null) {    return false;  }  final Set<String> authorities=getAllAuthorities();  if (authorities.contains(UserAuthorityGroup.AUTHORITY_ALL)) {    return true;  }  return authorities.containsAll(other.getAllAuthorities());}  }
class C{  protected AdsGetAdsQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  public void attachView(final V view){  detachView();  mPresenter.attachView(view);}  }
class C{  public Enumeration<V> elements(){  return new ValueIterator();}  }
class C{  static public InputStream findJMSConfig(String customConfigFileName) throws Exception {  URL configURL=null;  String filePath=Constants.Jms.JMS_CONFIG_DIRECTORY;  boolean isFullURLPath=false;  try {    configURL=new URL(customConfigFileName);  } catch (  MalformedURLException e) {  }  if (configURL != null) {    if (!JSpaceUtilities.isEmpty(configURL.getProtocol())) {      filePath=configURL.getFile();      isFullURLPath=true;    }  }  if (!isFullURLPath) {    if (customConfigFileName != null) {      filePath=Constants.Jms.JMS_CONFIG_DIRECTORY + customConfigFileName;    } else {      filePath=Constants.Jms.JMS_CONFIG_DIRECTORY + Constants.Jms.JMS_CONFIG_FILE_NAME;    }  }  InputStream inputStream=getResourceStream(filePath);  if (inputStream == null) {    String missingJMSConfigFileMsg="Could not find the JMS configuration file '" + filePath + "'. It does not exist or not readable.";    throw new Exception(missingJMSConfigFileMsg);  } else {    if (_logger.isLoggable(Level.INFO)) {      _logger.info("Loaded the JMS configuration file from < " + getResourceURL(filePath) + " > ");    }  }  return inputStream;}  }
class C{  public static RetryPolicy infiniteRetry(long baseBackoffTimeMs,long maxBackoffTimeMs){  return new BoundExponentialBackoffRetryPolicy(baseBackoffTimeMs,maxBackoffTimeMs,Integer.MAX_VALUE);}  }
class C{  public SensorInfo(SensorInfos sensorInfos){  this();  sensorInfoBuilder.setTimestampSnapshot(sensorInfos.getTimestampSnapshot()).setAccelerometerAxes(sensorInfos.getAccelerometerAxes()).setAccelNormalizedX(sensorInfos.getAccelNormalizedX()).setAccelNormalizedY(sensorInfos.getAccelNormalizedY()).setAccelNormalizedZ(sensorInfos.getAccelNormalizedZ()).setAccelRawX(sensorInfos.getAccelRawX()).setAccelRawY(sensorInfos.getAccelRawY()).setAccelRawZ(sensorInfos.getAccelRawZ()).setAngleNormalizedX(sensorInfos.getAngleNormalizedX()).setAngleNormalizedY(sensorInfos.getAngleNormalizedY()).setAngleNormalizedZ(sensorInfos.getAngleNormalizedZ()).setGyroscopeRawX(sensorInfos.getGyroscopeRawX()).setGyroscopeRawY(sensorInfos.getGyroscopeRawY()).setGyroscopeRawZ(sensorInfos.getGyroscopeRawZ()).build();}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  protected void startCast(){  int targetObjId=firstTarget != null ? firstTarget.getObjectId() : 0;  if (skillMethod == SkillMethod.CAST || skillMethod == SkillMethod.CHARGE) {switch (targetType) {case 0:      PacketSendUtility.broadcastPacketAndReceive(effector,new SM_CASTSPELL(effector.getObjectId(),skillTemplate.getSkillId(),skillLevel,targetType,targetObjId,this.duration,skillTemplate.isCharge()));    if (firstTarget.getObjectId() != effector.getObjectId()) {      PacketSendUtility.broadcastPacketAndReceive(effector,new SM_ATTACK_STATUS(effector,SM_ATTACK_STATUS.TYPE.ATTACK,0,0,SM_ATTACK_STATUS.LOG.ATTACK));    }  if (effector instanceof Npc && firstTarget instanceof Player) {    NpcAI2 ai=(NpcAI2)effector.getAi2();    if (ai.poll(AIQuestion.CAN_SHOUT)) {      ShoutEventHandler.onCast(ai,firstTarget);    }  }break;case 3:PacketSendUtility.broadcastPacketAndReceive(effector,new SM_CASTSPELL(effector.getObjectId(),skillTemplate.getSkillId(),skillLevel,targetType,0,this.duration,skillTemplate.isCharge()));if (firstTarget.getObjectId() != effector.getObjectId()) {PacketSendUtility.broadcastPacketAndReceive(effector,new SM_ATTACK_STATUS(effector,SM_ATTACK_STATUS.TYPE.ATTACK,0,0,SM_ATTACK_STATUS.LOG.ATTACK));}break;case 1:PacketSendUtility.broadcastPacketAndReceive(effector,new SM_CASTSPELL(effector.getObjectId(),skillTemplate.getSkillId(),skillLevel,targetType,x,y,z,this.duration));if (firstTarget.getObjectId() != effector.getObjectId()) {PacketSendUtility.broadcastPacketAndReceive(effector,new SM_ATTACK_STATUS(effector,SM_ATTACK_STATUS.TYPE.ATTACK,0,0,SM_ATTACK_STATUS.LOG.ATTACK));}break;}} else if (skillMethod == SkillMethod.ITEM && duration > 0) {PacketSendUtility.broadcastPacketAndReceive(effector,new SM_ITEM_USAGE_ANIMATION(effector.getObjectId(),firstTarget.getObjectId(),(this.itemObjectId == 0 ? 0 : this.itemObjectId),itemTemplate.getTemplateId(),this.duration,0,0));}}  }
class C{  private void seekingWriteAll(TableId table,List<InsertAllRequest.RowToInsert> elements,String topic,Set<Schema> schemas) throws BigQueryConnectException, InterruptedException {  logger.debug("Seeking best batch size...");  int currentIndex=0;  int successfulCallCount=0;  while (currentIndex < elements.size()) {    int endIndex=Math.min(currentIndex + currentBatchSize,elements.size());    List<InsertAllRequest.RowToInsert> currentBatchElements=elements.subList(currentIndex,endIndex);    try {      writer.writeRows(table,currentBatchElements,topic,schemas);      successfulCallCount++;      currentIndex=endIndex;      if (currentBatchSize == MAXIMUM_BATCH_SIZE) {        seeking=false;        logger.debug("Best batch size found (max): {}",currentBatchSize);        establishedWriteAll(table,elements.subList(currentIndex,elements.size()),topic,schemas);        return;      }      if (currentIndex < elements.size()) {        increaseBatchSize(table);      }    } catch (    BigQueryException exception) {      if (isBatchSizeError(exception)) {        decreaseBatchSize(table);        if (successfulCallCount > 0) {          seeking=false;          logger.debug("Best batch size found (error if higher): {}",currentBatchSize);          establishedWriteAll(table,elements.subList(currentIndex,elements.size()),topic,schemas);          return;        }      } else {        throw new BigQueryConnectException(String.format("Failed to write to BigQuery table %s",table),exception);      }    }  }  if (successfulCallCount == 1) {    seeking=false;    logger.debug("Best batch size found (all elements): {}",currentBatchSize);  }}  }
class C{  public static Map ordinalMap(Iterator tuples,String field){  return ordinalMap(tuples,field,DefaultLiteralComparator.getInstance());}  }
class C{  @Override public void onClick(View view){switch (view.getId()) {case R.id.container_loading_in_category_view_large_feedbackBtn:    categoryPresenter.initRefresh(getContext());  break;}}  }
class C{  public DatabaseGetUniversitiesQuery countryId(Integer value){  return unsafeParam("country_id",value);}  }
class C{  public OutputStream put(String key) throws FileNotFoundException {  return new xFileOutputStream(mCache.newFile(key));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_OTHER_FRIENDLY_CRITICAL(String value0,int num2,String value1){  return new SM_SYSTEM_MESSAGE(1240001,value0,num2,value1);}  }
class C{  public static boolean isExtension(String filename,String extension){  if (filename == null) {    return false;  }  if (extension == null || extension.length() == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  return fileExt.equals(extension);}  }
class C{  public static final void addPlayer(PlayerGroup group,Player player){  Preconditions.checkNotNull(group,"Group should not be null");  group.onEvent(new PlayerEnteredEvent(group,player));}  }
class C{  public void remove(String key){  urlParams.remove(key);  streamParams.remove(key);  fileParams.remove(key);  urlParamsWithObjects.remove(key);}  }
class C{  public DUC2006TopicFileSet(String sTopicSGMLFile,String sCorpusRootDir){  super(sCorpusRootDir,1.0);  TopicFile=sTopicSGMLFile;  TopicFileText=utils.loadFileToStringWithNewlines(sTopicSGMLFile);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPATK_INTERVAL_ME_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200516,skilltarget,num0,skillname);}  }
class C{  public void disconnectEntryFromXtn(Context context,IEntryHolder entryHolder,XtnEntry xtnEntry,boolean xtnEnd) throws SAException {  IEntryCacheInfo pEntry=getPEntryByUid(entryHolder.getUID());  if (pEntry == null)   return;  XtnData pXtn=xtnEntry.getXtnData();  if (!xtnEnd)   removeLockedEntry(pXtn,pEntry);  if ((pEntry.getEntryHolder(this).getWriteLockTransaction() == null) || !pEntry.getEntryHolder(this).getWriteLockTransaction().equals(pXtn.getXtn())) {    pEntry.getEntryHolder(this).removeReadLockOwner(pXtn.getXtnEntry());  }  if ((pEntry.getEntryHolder(this).getWriteLockTransaction() != null) && pEntry.getEntryHolder(this).getWriteLockTransaction().equals(pXtn.getXtn())) {    pEntry.getEntryHolder(this).resetWriteLockOwner();  }  if (xtnEntry == pEntry.getEntryHolder(this).getXidOriginated())   pEntry.getEntryHolder(this).resetXidOriginated();  pEntry.getEntryHolder(this).setMaybeUnderXtn(pEntry.getEntryHolder(this).anyReadLockXtn() || pEntry.getEntryHolder(this).getWriteLockTransaction() != null);  if (!pEntry.getEntryHolder(this).isMaybeUnderXtn()) {    if (!pEntry.getEntryHolder(this).isHasWaitingFor()) {      pEntry.getEntryHolder(this).resetEntryXtnInfo();      if (pEntry.isPinned() && xtnEnd)       unpinIfNeeded(context,pEntry.getEntryHolder(this),null,pEntry);    }  }}  }
class C{  @Nonnull private static NodeDisk findNodeDisk(String diskId,List<NodeDisk> nodeDisks,String nodeName) throws IOException {  NodeDisk selected=null;  for (  NodeDisk nodeDisk : nodeDisks) {    if (diskId.equals(nodeDisk.getDiskRefId())) {      selected=nodeDisk;      break;    }  }  if (selected == null) {    String message=format("The Node '%s' config does not have defined any Disk Ref ID '%s'",nodeName,diskId);    throw new AbortException(message);  }  if (selected.getNodeMountPoint() == null) {    String message=format("The Node '%s' config does not have defined any node mount point for Disk Ref ID '%s'",nodeName,diskId);    throw new AbortException(message);  }  return selected;}  }
class C{  public boolean isServiceSelected(){  return tabbedPane != null && tabbedPane.getSelectedComponent() != null && tabbedPane.getSelectedComponent() instanceof ServicePanel;}  }
class C{  private void resurrection(){  mNotificationManager.cancel(R.string.uploader_upload_in_progress_ticker);}  }
class C{  public void putAll(TObjectIntHashMap<K> map){  for (TObjectIntIterator<K> it=map.iterator(); it.hasNext(); ) {    put(it.key(),it.value());  }}  }
class C{  public NewsfeedGetCommentsQuery startTime(Integer value){  return unsafeParam("start_time",value);}  }
class C{  public XML11NonValidatingConfiguration(SymbolTable symbolTable){  this(symbolTable,null,null);}  }
class C{  public static void main(String[] args){  Distribution d=new Distribution();  d.setValue(1.0,1.0);  d.setValue(2.0,1.0);  d.setValue(3.0,1.0);  d.setValue(4.0,1.0);  d.setValue(5.0,1.0);  System.out.println(gr.demokritos.iit.jinsect.algorithms.statistics.statisticalCalculation.entropy(d));  System.out.println("Only values:\n===========");  System.out.println("Mean: " + d.average(true));  System.out.println("Variance: " + d.variance(true));  System.out.println("Std deviation :" + d.standardDeviation(true));  System.out.println("\nIs normal: " + d.isNormal(true,0.05));  System.out.println("\nUsing keys:\n===========");  System.out.println("Mean: " + d.average(false));  System.out.println("Variance: " + d.variance(false));  System.out.println("Std deviation :" + d.standardDeviation(false));  System.out.println("\nKey of max value: " + d.getKeyOfMaxValue());  System.out.println("\nIs normal: " + d.isNormal(false,0.05));  System.out.println("\nValue at 5% of population: " + d.getValueAtPoint(false,0.05));  System.out.println("\nValue at 95% of population: " + d.getValueAtPoint(false,0.95));}  }
class C{  public void verifyIsDisplayed(){  conditions.verifyPostAjax(visibilityOfElementLocated(By.cssSelector(CSS)));}  }
class C{  public static <T>T checkNotNull(T reference,@Nullable Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  static int calcExpr(int a,int b,int c,int d){  if (d == 0) {    System.out.println("Error: Division by zero");    return -1;  } else {    return a * (b + (c / d));  }}  }
class C{  static int applyMaskPenaltyRule1(ByteMatrix matrix){  return applyMaskPenaltyRule1Internal(matrix,true) + applyMaskPenaltyRule1Internal(matrix,false);}  }
class C{  public void endObject() throws IOException {  int p=peeked;  if (p == PEEKED_NONE) {    p=doPeek();  }  if (p == PEEKED_END_OBJECT) {    stackSize--;    pathNames[stackSize]=null;    pathIndices[stackSize - 1]++;    peeked=PEEKED_NONE;  } else {    throw new IllegalStateException("Expected END_OBJECT but was " + peek() + locationString());  }}  }
class C{  public Builder preProcessor(BitmapProcessor preProcessor){  this.preProcessor=preProcessor;  return this;}  }
class C{  public static Assignment createFromJSONString(String json){  return new GsonBuilder().create().fromJson(json,Assignment.class);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'NEWS_CHANNEL_TABLE' ("+ "'NEWS_CHANNEL_NAME' TEXT PRIMARY KEY NOT NULL ,"+ "'NEWS_CHANNEL_ID' TEXT NOT NULL ,"+ "'NEWS_CHANNEL_TYPE' TEXT NOT NULL ,"+ "'NEWS_CHANNEL_SELECT' INTEGER NOT NULL ,"+ "'NEWS_CHANNEL_INDEX' INTEGER NOT NULL ,"+ "'NEWS_CHANNEL_FIXED' INTEGER);");  db.execSQL("CREATE INDEX " + constraint + "IDX_NEWS_CHANNEL_TABLE_NEWS_CHANNEL_NAME ON NEWS_CHANNEL_TABLE"+ " (NEWS_CHANNEL_NAME);");}  }
class C{  public TrieNode(TrieNode predecessor,Map<Symbol,Integer> label2idMap,List<Symbol> labels){  this.backPointer=predecessor;}  }
class C{  public void removeLocations(Collection<PBLocation> locations){  l_locations.removeAll(locations);  if (!l_locations.isEmpty())   l_locations.get(0).setType(StringConst.EMPTY);}  }
class C{  private double computeReferenceAngle(){  double r1=((SandboxBody)this.cmbBody1.getSelectedItem()).getTransform().getRotation();  double r2=((SandboxBody)this.cmbBody2.getSelectedItem()).getTransform().getRotation();  return r1 - r2;}  }
class C{  public void updateFromInfo(ISVNInfo info){  if (info == null)   return;  Object aValue=null;  aValue=info.getNodeKind();  if (aValue != null)   this.nodeKind=((SVNNodeKind)aValue).toInt();  aValue=info.getLastChangedDate();  if (aValue == null) {    this.lastChangedDate=-1;  } else {    this.lastChangedDate=((Date)aValue).getTime();  }  aValue=info.getLastChangedRevision();  if (aValue == null) {    this.lastChangedRevision=SVNRevision.SVN_INVALID_REVNUM;  } else {    this.lastChangedRevision=((SVNRevision.Number)aValue).getNumber();  }  this.lastCommitAuthor=info.getLastCommitAuthor();  aValue=info.getUrl();  if (aValue == null) {    this.url=null;  } else {    this.url=((SVNUrl)aValue).toString();  }}  }
class C{  protected MetricsFilterSetBuilder initializeMetricsFilterSetBuilder(){  return new FilteredSketchMetricsHelper();}  }
class C{  public VirtualInvokeExpr newVirtualInvokeExpr(Local base,SootMethodRef method,List<? extends Value> args){  return new JVirtualInvokeExpr(base,method,args);}  }
class C{  void readXmlConfig(File xmlConfigFile) throws IOException, ParserConfigurationException, SAXException {  if (!xmlConfigFile.exists()) {    return;  }  System.out.printf("reading config file, %s\n",xmlConfigFile.getAbsolutePath());  BufferedInputStream input=null;  try {    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    input=new BufferedInputStream(new FileInputStream(xmlConfigFile));    InputSource source=new InputSource(input);    factory.setNamespaceAware(false);    factory.setValidating(false);    DocumentBuilder builder=factory.newDocumentBuilder();    Document document=builder.parse(source);    NodeList issues=document.getElementsByTagName(TAG_ISSUE);    for (int i=0, count=issues.getLength(); i < count; i++) {      Node node=issues.item(i);      Element element=(Element)node;      String id=element.getAttribute(ATTR_ID);      if (id.length() == 0) {        System.err.println("Invalid config file: Missing required issue id attribute");        continue;      }      if (id.equals(PROPERTY_ISSUE)) {        readPropertyFromXml(node);      } else       if (id.equals(DEX_ISSUE)) {        readDexPatternsFromXml(node);      } else       if (id.equals(SO_ISSUE)) {        readLibPatternsFromXml(node);      } else       if (id.equals(RES_ISSUE)) {        readResPatternsFromXml(node);      } else       if (id.equals(PACKAGE_CONFIG_ISSUE)) {        readPackageConfigFromXml(node);      } else       if (id.equals(SIGN_ISSUE)) {        if (mUseSignAPk) {          readSignFromXml(node);        }      } else {        System.err.println("unknown issue " + id);      }    }  }  finally {    if (input != null) {      try {        input.close();      } catch (      IOException e) {        System.exit(-1);      }    }  }}  }
class C{  public void checkForNullValue(String value){  if (value == null) {    throw new NullPointerException();  }}  }
class C{  protected NewsfeedUnignoreItemQuery itemId(int value){  return unsafeParam("item_id",value);}  }
class C{  private static int determineIconIdByMimeTypeList(List<String> mimetypes){  if (mimetypes == null || mimetypes.size() < 1) {    return R.drawable.file;  } else {    for (    String mimetype : mimetypes) {      Integer iconId=MIMETYPE_TO_ICON_MAPPING.get(mimetype);      if (iconId != null) {        return iconId;      }    }    for (    String mimetype : mimetypes) {      String mainMimetypePart=mimetype.split("/")[0];      Integer iconId=MAINMIMETYPE_TO_ICON_MAPPING.get(mainMimetypePart);      if (iconId != null) {        return iconId;      }    }  }  return R.drawable.file;}  }
class C{  public void writeBytes(byte[] value,int offset,int length) throws JMSException {  initializeWriting();  try {    this.dataOut.write(value,offset,length);  } catch (  IOException ioe) {    JMSException jmsEx=new JMSException("Could not write data:" + ioe.toString());    jmsEx.setLinkedException(ioe);    throw jmsEx;  }}  }
class C{  public void writeClassifications(String[] cNames,Map<Integer,ListOfLongs>[] fName2Location,Map<Integer,Integer>[] fName2weight) throws IOException {  getFooterSectionRMA6().setStartClassificationsSection(readerWriter.getPosition());  getFooterSectionRMA6().getAvailableClassification2Position().clear();  if (cNames != null) {    for (int i=0; i < cNames.length; i++) {      final String cName=cNames[i];      final ClassificationBlockRMA6 classification=new ClassificationBlockRMA6(cName);      final Map<Integer,ListOfLongs> id2locations=fName2Location[i];      for (      int id : id2locations.keySet()) {        final Integer weight=fName2weight[i].get(id);        classification.setSum(id,weight != null ? weight : 0);      }      getFooterSectionRMA6().getAvailableClassification2Position().put(cName,readerWriter.getPosition());      classification.write(readerWriter,id2locations);      System.err.println(String.format("Class. %-13s%,10d",cName + ":",id2locations.size()));    }  }  getFooterSectionRMA6().setEndClassificationsSection(readerWriter.getPosition());}  }
class C{  @Transactional public Repository createRepository(TestIdWatcher testIdWatcher) throws RepositoryNameAlreadyUsedException {  Repository repository=repositoryService.createRepository(testIdWatcher.getEntityName("repository"));  try {    repositoryService.addRepositoryLocale(repository,"fr-FR");    repositoryService.addRepositoryLocale(repository,"ja-JP");  } catch (  RepositoryLocaleCreationException e) {    throw new RuntimeException(e);  }  return repository;}  }
class C{  public void loadXML(Node stepnode,List<DatabaseMeta> databases,Map<String,Counter> counters) throws KettleXMLException {  try {    this.tabelName=XMLHandler.getTagValue(stepnode,"TableName");    this.outputRowSize=XMLHandler.getTagValue(stepnode,"outputRowSize");    this.factDimLensString=XMLHandler.getTagValue(stepnode,"factDimLensString");    this.tableName=XMLHandler.getTagValue(stepnode,"tableName");    this.databaseName=XMLHandler.getTagValue(stepnode,"databaseName");    this.dimensionCount=XMLHandler.getTagValue(stepnode,"dimensionCount");    this.noDictionaryDims=XMLHandler.getTagValue(stepnode,"noDictionaryDims");    this.noDictionaryDimsMapping=XMLHandler.getTagValue(stepnode,"noDictionaryDimsMapping");    this.complexDimensionCount=XMLHandler.getTagValue(stepnode,"complexDimensionCount");    this.measureCount=XMLHandler.getTagValue(stepnode,"measureCount");    this.updateMemberRequest=XMLHandler.getTagValue(stepnode,"isUpdateMemberRequest");    this.measureDataType=XMLHandler.getTagValue(stepnode,"measureDataType");    this.partitionID=XMLHandler.getTagValue(stepnode,"partitionID");    this.segmentId=XMLHandler.getTagValue(stepnode,"segmentId");    this.taskNo=XMLHandler.getTagValue(stepnode,"taskNo");  } catch (  Exception e) {    throw new KettleXMLException("Unable to read step info from XML node",e);  }}  }
class C{  public void translate(double x,double y){  this.translation.x+=x;  this.translation.y+=y;}  }
class C{  public void removeStyledLayerDescriptor(StyledLayerDescriptor sldToDelete){}  }
class C{  @Override public boolean equals(Object other){  boolean result=false;  if (other instanceof DiphoneUnit) {    DiphoneUnit that=(DiphoneUnit)other;    result=(this.left.equals(that.left) && this.right.equals(that.right));  }  return result;}  }
class C{  public byte readByte() throws JMSException {  initializeReading();  try {    this.dataIn.mark(Integer.MAX_VALUE);    return this.dataIn.readByte();  } catch (  EOFException eof) {    try {      this.dataIn.reset();    } catch (    IOException e) {      JMSException jmsEx=new JMSException(e.toString());      jmsEx.setLinkedException(e);      throw jmsEx;    }    JMSException jmsEx=new MessageEOFException(eof.toString());    jmsEx.setLinkedException(eof);    throw jmsEx;  }catch (  IOException ioe) {    try {      this.dataIn.reset();    } catch (    IOException e) {      JMSException jmsEx=new JMSException(e.toString());      jmsEx.setLinkedException(e);      throw jmsEx;    }    JMSException jmsEx=new MessageFormatException("Format error occurred" + ioe.toString());    jmsEx.setLinkedException(ioe);    throw jmsEx;  }}  }
class C{  public Builder zoomInTitle(String zoomInTitle){  this.zoomInTitle=zoomInTitle;  return this;}  }
class C{  public void insertBeforeNoRedirect(E toInsert,E point){  innerChain.insertBefore(toInsert,point);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_STIGMA_DELETE_HIDDEN_SKILL(DescriptionId descriptionId,int skilllvl){  return new SM_SYSTEM_MESSAGE(1402895,descriptionId,skilllvl);}  }
class C{  DataRow(final double[] data){  row=data;  mean=0d;  for (int i=0; i < data.length; i++) {    mean+=data[i];  }  mean/=data.length;}  }
class C{  boolean approxEquals(S2Cap other,double maxError){  return (axis.aequal(other.axis,maxError) && Math.abs(height - other.height) <= maxError) || (isEmpty() && other.height <= maxError) || (other.isEmpty() && height <= maxError)|| (isFull() && other.height >= 2 - maxError)|| (other.isFull() && height >= 2 - maxError);}  }
class C{  @Override public void notationDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {}  }
class C{  public boolean removeGatingSequence(Sequence sequence){  return sequencer.removeGatingSequence(sequence);}  }
class C{  public EventLogEventEnvelope(final EventLogEvent event,final EventLogListener recipient){  this.event=event;  this.recipient=recipient;}  }
class C{  private void removeOfflineStateSubscription(String subscriptionName,String subscribedTopicName,String clientIDToSubscribe) throws JMSException {  String id=clientIDToSubscribe + DELIM + subscriptionName+ DELIM+ subscribedTopicName;  JMSDurableSubDataEntry subscriptionEntryToRemove=m_subscriptionNamesHash.get(id);  if (_logger.isLoggable(Level.FINE)) {    _logger.fine(" removeOfflineStateSubscription() with ID: " + id);  }  Vector subscriptionEntriesVec=(Vector)m_topicsHash.get(subscribedTopicName);  for (int i=0; i < subscriptionEntriesVec.size(); i++) {    JMSDurableSubDataEntry subscriptionEntry=(JMSDurableSubDataEntry)subscriptionEntriesVec.get(i);    if (subscriptionEntry.m_durableSubscriptionName.equalsIgnoreCase(subscriptionName) && subscriptionEntry.m_subscriberClientID.equalsIgnoreCase(clientIDToSubscribe)) {      subscriptionEntriesVec.remove(i);    }  }}  }
class C{  public AndExpr newAndExpr(Value op1,Value op2){  return new GAndExpr(op1,op2);}  }
class C{  protected void determineServerStatus(boolean parametersSent){  long timeToLive=System.currentTimeMillis() + Context.MAX_LIFE_TIME_FROM_FINISHED;  if (!parametersSent) {    timeToLive=System.currentTimeMillis() + MAX_WAIT_FOR_NETWORK_FAILURE;  }  boolean noValidResponse=true;  while (System.currentTimeMillis() < timeToLive && noValidResponse) {    try {      int code=this.factory.fastFailPing(this.url);      if (code == 401 || code == 403) {        throw new PspRuntimeException("Authorization required for " + this.url + " (HTTP/"+ code+ "). Please provide valid credentials to servlet factory!");      }      if (code == 404) {        throw new PspRuntimeException("Could not find " + this.url + " (HTTP/404). Looks like the servlet is not properly configured!");      }      if (code == 200) {        noValidResponse=false;      } else {        LOGGER.warn("Ping request to {} resulted in HTTP/{}",this.url,code);      }    } catch (    IOException e) {      LOGGER.warn("could not ping server at {}",this.url,e);    }    try {      if (noValidResponse) {        Thread.sleep(PING_INTERVAL);      }    } catch (    InterruptedException e) {    }  }  if (noValidResponse) {    throw new PspRuntimeException("Could not reach server at " + this.url);  }}  }
class C{  private void cacheRootDistance(Direction d,float value){  mDistToRootCache[d.getDirection()]=value;}  }
class C{  @Override public List<Period> generatePeriods(DateTimeUnit dateTimeUnit){  Calendar cal=getCalendar();  dateTimeUnit.setMonth(1);  dateTimeUnit.setDay(1);  List<Period> periods=Lists.newArrayList();  int year=dateTimeUnit.getYear();  while (dateTimeUnit.getYear() == year) {    periods.add(createPeriod(dateTimeUnit,cal));    dateTimeUnit=cal.plusMonths(dateTimeUnit,2);  }  return periods;}  }
class C{  public ScrollImplementor(ScrollModel model,ScrollView view){  this.model=model;  this.view=view;}  }
class C{  public boolean hasNext(){  return this.fileCounter > 0;}  }
class C{  public void revertSelf(){  unlinkReverse();  if (angle < FastMath.PI) {    angle+=FastMath.PI;  } else {    angle-=FastMath.PI;  }  cos=-cos;  sin=-sin;  originOffset=-originOffset;}  }
class C{  public OrPredicate(Predicate p1,Predicate p2){  super(p1,p2);}  }
class C{  public void applyInverseTo(final double[] in,final T[] out){  final double x=in[0];  final double y=in[1];  final double z=in[2];  final T s=q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));  final T m0=q0.negate();  out[0]=m0.multiply(m0.multiply(x).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x);  out[1]=m0.multiply(m0.multiply(y).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y);  out[2]=m0.multiply(m0.multiply(z).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z);}  }
class C{  public static byte[] serializeTransactionId(long transactionId){  return Long.toString(transactionId).getBytes(UTF_8);}  }
class C{  public static void updateTabTexts(int index,int value1,int value2){  if (index == 0) {    tab1.setText(Constants.TAB_PLACES + " (" + value1+ ")");    tab2.setText(Constants.TAB_BOOKMARKS + " (" + value2+ ")");  }  if (index == 1) {    if (value1 > 0)     tab1.setText(Constants.TAB_DISASTERS + " (" + value1+ ")");    if (value2 > 0)     tab2.setText(Constants.TAB_GOOD_ACTS + " (" + value2+ ")");  }}  }
class C{  @Override public void updateValue(String key,String value){  boolean dataUpdated=false;  if (fieldValueMap.containsKey(key)) {    if (fieldValueMap.get(key).compareTo(value) != 0) {      dataUpdated=true;      fieldValueMap.put(key,value);    }  } else {    dataUpdated=true;    fieldValueMap.put(key,value);  }  if (dataUpdated) {    writeConfigFile();  }}  }
class C{  public static long factorial(final int n){  if (n < 0) {    throw MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}",n);  }  if (n > 20) {    throw new ArithmeticException("factorial value is too large to fit in a long");  }  return FACTORIALS[n];}  }
class C{  private boolean validateWorkspaceLocation(){  int type=getSaveType();  if (wsPathText.getText().equals("")) {    if (type == WORKSPACE && wsBrowsed)     setErrorMessage(Policy.bind("GenerateSVNDiff.validFileName"));    return false;  }  IPath pathToWorkspaceFile=new Path(wsPathText.getText());  IPath containerPath=pathToWorkspaceFile.removeLastSegments(1);  IResource container=ResourcesPlugin.getWorkspace().getRoot().findMember(containerPath);  if (container == null) {    if (type == WORKSPACE)     setErrorMessage(Policy.bind("GenerateSVNDiff.validFileName"));    return false;  }  return true;}  }
class C{  private void checkIfNext(){  for (; _pos != null; _pos=_entries.next(_pos)) {    IEntryCacheInfo pEntry=_pos.getSubject();    if (pEntry == null)     continue;    _currentEntry=pEntry;    _pos=_entries.next(_pos);    return;  }  _currentEntry=null;}  }
class C{  public static void updateOnLogout(Account account){  AccountTime accountTime=account.getAccountTime();  accountTime.setSessionDuration(System.currentTimeMillis() - accountTime.getLastLoginTime().getTime());  accountTime.setAccumulatedOnlineTime(accountTime.getAccumulatedOnlineTime() + accountTime.getSessionDuration());  DAOManager.getDAO(AccountTimeDAO.class).updateAccountTime(account.getId(),accountTime);  account.setAccountTime(accountTime);}  }
class C{  public void addCommandClass(ZWaveCommandClass commandClass){  CommandClass key=commandClass.getCommandClass();  if (!supportedCommandClasses.containsKey(key)) {    supportedCommandClasses.put(key,commandClass);  }}  }
class C{  public DatabaseGetCountriesQuery(VkApiClient client){  super(client,"database.getCountries",GetCountriesResponse.class);}  }
class C{  @Override public void hide(){  logger.trace("Hiding tooltip request...");  hideRequested=true;  checkAndHide();}  }
class C{  public void appendBits(int value,int numBits){  if (numBits < 0 || numBits > 32) {    throw new IllegalArgumentException("Num bits must be between 0 and 32");  }  ensureCapacity(size + numBits);  for (int numBitsLeft=numBits; numBitsLeft > 0; numBitsLeft--) {    appendBit(((value >> (numBitsLeft - 1)) & 0x01) == 1);  }}  }
class C{  @Override public boolean implies(Permission perm){  if (perm == null || perm.getClass() != getClass()) {    return false;  }  AccessPermission ap=(AccessPermission)perm;  if (iface != null && !iface.equals(ap.iface)) {    return false;  } else   if (method == null) {    return true;  } else   if (ap.method == null) {    return false;  }  int len=method.length() - 1;  if (method.charAt(0) == '*') {    return ap.method.regionMatches(ap.method.length() - len,method,1,len);  } else   if (method.charAt(len) == '*') {    return ap.method.regionMatches(0,method,0,len);  }  return method.equals(ap.method);}  }
class C{  public void reset(){}  }
class C{  public void startContentModel(String elementName,short type) throws XNIException {}  }
class C{  public Map<String,Object> invoke(ServiceDispatcher dispatcher,String localName,Map<String,Object> context) throws GenericServiceException {  DispatchContext dctx=dispatcher.getLocalContext(localName);  ModelService model=dctx.getModelService(getName());  if (model == null)   throw new GenericServiceException("Group defined service (" + getName() + ") is not a defined service.");  Map<String,Object> thisContext=model.makeValid(context,ModelService.IN_PARAM);  Debug.logInfo("Running grouped service [" + serviceName + "]",module);  if (getMode().equals("async")) {    List<String> requiredOut=model.getParameterNames(ModelService.OUT_PARAM,false);    if (requiredOut.size() > 0) {      Debug.logWarning("Grouped service (" + getName() + ") requested 'async' invocation; running sync because of required OUT parameters.",module);      return dispatcher.runSync(localName,model,thisContext);    } else {      dispatcher.runAsync(localName,model,thisContext,false);      return new HashMap<String,Object>();    }  } else {    return dispatcher.runSync(localName,model,thisContext);  }}  }
class C{  public static boolean isWifiEnabled(Context context){  ConnectivityManager mgrConn=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  TelephonyManager mgrTel=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);  return ((mgrConn.getActiveNetworkInfo() != null && mgrConn.getActiveNetworkInfo().getState() == NetworkInfo.State.CONNECTED) || mgrTel.getNetworkType() == TelephonyManager.NETWORK_TYPE_UMTS);}  }
class C{  private void parseActions(){  StringTokenizer st=new StringTokenizer(actions," ,",true);  boolean comma=false;  while (st.hasMoreTokens()) {    String act=st.nextToken();    if (act.equals(" ")) {      continue;    } else     if (comma) {      if (!act.equals(",")) {        comma=false;        break;      }    } else     if (act.equalsIgnoreCase("connect")) {      mask|=CONNECT;    } else     if (act.equalsIgnoreCase("accept")) {      mask|=ACCEPT;    } else     if (act.equalsIgnoreCase("delegate")) {      mask|=DELEGATE;    } else     if (act.equalsIgnoreCase("listen")) {      mask|=LISTEN;    } else {      break;    }    comma=!comma;  }  if (!comma) {    throw new IllegalArgumentException("invalid actions");  }}  }
class C{  protected Table process(Table t,ResultSet rset,String key,Object lock) throws DataIOException {  int count=0;  long timein=System.currentTimeMillis();  try {    ResultSetMetaData metadata=rset.getMetaData();    int ncols=metadata.getColumnCount();    if (t == null) {      t=getSchema(metadata,m_handler).instantiate();      if (key != null) {        try {          t.index(key);          s_logger.info("Indexed field: " + key);        } catch (        Exception e) {          s_logger.warning("Error indexing field: " + key);        }      }    }    lock=(lock == null ? t : lock);    while (rset.next()) {synchronized (lock) {        int row=getExistingRow(t,rset,key);        if (row < 0) {          row=t.addRow();        }        for (int i=1; i <= ncols; ++i) {          m_handler.process(t,row,rset,i);        }      }      ++count;    }  } catch (  SQLException e) {    throw new DataIOException(e);  }  long time=System.currentTimeMillis() - timein;  s_logger.info("Internal query processing completed: " + count + " rows, "+ (time / 1000)+ "."+ (time % 1000)+ " seconds.");  return t;}  }
class C{  public boolean hasInit(){  return getInitOpt().getNumChild() != 0;}  }
class C{  GSMessageImpl duplicate() throws JMSException {  GSBytesMessageImpl dup=new GSBytesMessageImpl();  copyTo(dup);  return dup;}  }
class C{  public boolean isDown(){  if (mLocalPath != null && mLocalPath.length() > 0) {    File file=new File(mLocalPath);    return (file.exists());  }  return false;}  }
class C{  public static void operateTraced(ResourceResolverFactory factory,String userId,OperateCallback callback){  try {    operate(factory,userId,callback);  } catch (  OperateException e) {    LOG.error(OPERATE_ERROR_MESSAGE,e);  }}  }
class C{  public void addXValue(String xVal){  if (xVal != null && xVal.length() > mXValMaximumLength)   mXValMaximumLength=xVal.length();  mXVals.add(xVal);}  }
class C{  public static String toInternalForm(String d){  if (d.charAt(0) != 'L') {    throw new JaninoRuntimeException("Attempt to convert non-class descriptor \"" + d + "\" into internal form");  }  return d.substring(1,d.length() - 1);}  }
class C{  @Deprecated public Disruptor(final EventFactory<T> eventFactory,final int ringBufferSize,final Executor executor,final ProducerType producerType,final WaitStrategy waitStrategy){  this(RingBuffer.create(producerType,eventFactory,ringBufferSize,waitStrategy),executor);}  }
class C{  @Override protected void fillUtterance(Utterance utterance,Element sentence){  fillUtterance(utterance,sentence,true,true,false);}  }
class C{  public static int[] parseIntPairs(String attribute){  if (attribute == null) {    throw new NullPointerException("Received null argument");  }  Pattern p=Pattern.compile("(\\d+,\\d+)");  int[] temp=new int[attribute.length() / 2];  Matcher m=p.matcher(attribute);  int i=0;  while (m.find()) {    String[] f0Values=(m.group().trim()).split(",");    temp[2 * i]=Integer.parseInt(f0Values[0]);    temp[2 * i + 1]=Integer.parseInt(f0Values[1]);    i++;  }  int[] result=new int[2 * i];  System.arraycopy(temp,0,result,0,result.length);  return result;}  }
class C{  public static double[] pageRank(MatrixInterface preparedMatrix,int maxIteration,double d,double[] init,double[] impact){  double[] result=new double[init.length];  for (int i=0; i != init.length; i++)   result[i]=init[i];  int iteration=0;  while (iteration < maxIteration) {    iteration++;    result=preparedMatrix.multiply(result);    for (int i=0; i != result.length; i++)     result[i]=impact[i] * (1.0 - d) + d * result[i];  }  return result;}  }
class C{  public static int dpToPx(Context context,float dpValue){  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(dpValue * scale + 0.5f);}  }
class C{  public SubLine(final Vector2D start,final Vector2D end,final double tolerance){  super(new Line(start,end,tolerance),buildIntervalSet(start,end,tolerance));}  }
class C{  public boolean retainEntries(TLongObjectProcedure<V> procedure){  boolean modified=false;  byte[] states=_states;  long[] keys=_set;  V[] values=_values;  tempDisableAutoCompaction();  try {    for (int i=keys.length; i-- > 0; ) {      if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {        removeAt(i);        modified=true;      }    }  }  finally {    reenableAutoCompaction(true);  }  return modified;}  }
class C{  public ArmorCursor queryArmorSearch(String search){  QueryHelper qh=new QueryHelper();  qh.Distinct=false;  qh.Columns=null;  qh.Selection="i." + S.COLUMN_ITEMS_NAME + " LIKE ?";  qh.SelectionArgs=new String[]{'%' + search + '%'};  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=null;  qh.Limit=null;  return new ArmorCursor(wrapJoinHelper(builderArmor(),qh));}  }
class C{  public void removeRewrittenEntryIndication(String uid){  if (_reWrittenEntries != null)   _reWrittenEntries.remove(uid);}  }
class C{  private void fillNode(MaryNode currentNode){  if (currentNode.isLeaf()) {    Arrays.sort(featureVectors,currentNode.from,currentNode.to,cui);    numberOfLeaves++;    return;  }  int currentFeature=currentNode.featureIndex;  FeatureVector.FeatureType featureType=featureVectors[0].getFeatureType(currentFeature);  c.setFeatureIdx(currentFeature,featureType);  Arrays.sort(featureVectors,currentNode.from,currentNode.to,c);  int nVal=featureDefinition.getNumberOfValues(currentFeature);  int nextFrom=currentNode.from;  int nextTo=currentNode.from;  for (int i=0; i < nVal; i++) {    nextFrom=nextTo;    while ((nextTo < currentNode.to) && (featureVectors[nextTo].getFeatureAsInt(currentFeature) == i)) {      nextTo++;    }    if ((nextTo - nextFrom) != 0) {      MaryNode nod=currentNode.getChild(i);      if (nod != null) {        nod.from=nextFrom;        nod.to=nextTo;        fillNode(nod);      }    } else     currentNode.setChild(i,null);  }}  }
class C{  public int length(){  if (tokens != null)   return tokens.length; else   return 0;}  }
class C{  public UniformIntegerDistribution(int lower,int upper) throws MathIllegalArgumentException {  if (lower > upper) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,true);  }  this.lower=lower;  this.upper=upper;}  }
class C{  public static String slurpURLNoExceptions(String path){  try {    return slurpURL(path);  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  public void checkLevel(int level){  if (!Scene.v().doneResolving())   return;  checkLevelIgnoreResolving(level);}  }
class C{  public DatabaseGetFacultiesQuery(VkApiClient client,UserActor actor,int universityId){  super(client,"database.getFaculties",GetFacultiesResponse.class);  accessToken(actor.getAccessToken());  universityId(universityId);}  }
class C{  private boolean addViewFromPreviousActivity(){  if (mCurrentContentView.getChildCount() == 0) {    mPreviousActivity=null;    mPreviousContentView=null;    return false;  }  CustomApplication application=(CustomApplication)mCurrentWindow.getContext().getApplicationContext();  mPreviousActivity=application.getActivityLifecycleHelper().getPreActivity();  if (mPreviousActivity == null) {    mPreviousActivity=null;    mPreviousContentView=null;    return false;  }  ViewGroup previousActivityContainer=getContentView(mPreviousActivity.getWindow());  if (previousActivityContainer == null || previousActivityContainer.getChildCount() == 0) {    mPreviousActivity=null;    mPreviousContentView=null;    return false;  }  mPreviousContentView=(ViewGroup)previousActivityContainer.getChildAt(0);  previousActivityContainer.removeView(mPreviousContentView);  mCurrentContentView.addView(mPreviousContentView,0);  return true;}  }
class C{  protected void writeShort(int value) throws IOException {  out.write(value & 0xff);  out.write((value >> 8) & 0xff);}  }
class C{  private Object writeReplace(){  return wrapped;}  }
class C{  public MovePageWindow waitToBeDisplayed(){  bobcatWait.withTimeout(Timeouts.BIG).until(ExpectedConditions.visibilityOf(currentScope));  return this;}  }
class C{  public DataSourceConnectorArcSDE(){  createUI();}  }
class C{  public boolean shouldPrerender(){  return DeviceClassManager.enablePrerendering() && PrefServiceBridge.getInstance().canPredictNetworkActions();}  }
class C{  @Override protected void drawLabels(Canvas c,float pos,PointF anchor){  final float labelRotationAngleDegrees=mXAxis.getLabelRotationAngle();  float[] position=new float[]{0f,0f};  BarData bd=mChart.getData();  int step=bd.getDataSetCount();  for (int i=mMinX; i <= mMaxX; i+=mXAxis.mAxisLabelModulus) {    position[0]=i * step + i * bd.getGroupSpace() + bd.getGroupSpace() / 2f;    if (step > 1) {      position[0]+=((float)step - 1f) / 2f;    }    mTrans.pointValuesToPixel(position);    if (mViewPortHandler.isInBoundsX(position[0]) && i >= 0 && i < mXAxis.getValues().size()) {      String label=mXAxis.getValues().get(i);      if (mXAxis.isAvoidFirstLastClippingEnabled()) {        if (i == mXAxis.getValues().size() - 1) {          float width=Utils.calcTextWidth(mAxisLabelPaint,label);          if (position[0] + width / 2.f > mViewPortHandler.contentRight())           position[0]=mViewPortHandler.contentRight() - (width / 2.f);        } else         if (i == 0) {          float width=Utils.calcTextWidth(mAxisLabelPaint,label);          if (position[0] - width / 2.f < mViewPortHandler.contentLeft())           position[0]=mViewPortHandler.contentLeft() + (width / 2.f);        }      }      drawLabel(c,label,i,position[0],pos,anchor,labelRotationAngleDegrees);    }  }}  }
class C{  public static boolean isAValuesDirectory(String directoryName){  if (directoryName == null) {    throw new NullPointerException("directoryName can not be null");  }  return directoryName.equals("values") || directoryName.startsWith("values-");}  }
class C{  private void finish(){  getActivity().onBackPressed();}  }
class C{  public void init(IWorkbench workbench,IStructuredSelection selection){}  }
class C{  public static String formatMessage(Locale locale,String key,Object[] arguments) throws MissingResourceException {  if (locale == null) {    locale=Locale.getDefault();  }  final ResourceBundle resourceBundle=ResourceBundle.getBundle(BASE_NAME,locale);  String msg;  try {    msg=resourceBundle.getString(key);    if (arguments != null) {      try {        msg=java.text.MessageFormat.format(msg,arguments);      } catch (      Exception e) {        msg=resourceBundle.getString("FormatFailed");        msg+=" " + resourceBundle.getString(key);      }    }  } catch (  MissingResourceException e) {    msg=resourceBundle.getString("BadMessageKey");    throw new MissingResourceException(key,msg,key);  }  if (msg == null) {    msg=key;    if (arguments.length > 0) {      StringBuffer str=new StringBuffer(msg);      str.append('?');      for (int i=0; i < arguments.length; i++) {        if (i > 0) {          str.append('&');        }        str.append(String.valueOf(arguments[i]));      }    }  }  return msg;}  }
class C{  private void selectRec(Node v,Set<String> selected){  for (Edge e=v.getFirstAdjacentEdge(); e != null; e=v.getNextAdjacentEdge(e)) {    Node w=e.getOpposite(v);    String label=((NodeData)w.getData()).getLabel();    if (!selected.contains(label)) {      selected.add(label);      selectRec(w,selected);    }  }}  }
class C{  public FriendsAreFriendsQuery(VkApiClient client,UserActor actor,int... userIds){  super(client,"friends.areFriends",Utils.buildParametrizedType(List.class,FriendStatus.class));  accessToken(actor.getAccessToken());  userIds(userIds);}  }
class C{  public static boolean isHttpStatusCode(Throwable throwable,int statusCode){  return throwable instanceof HttpException && ((HttpException)throwable).code() == statusCode;}  }
class C{  public HornMelodiesCursor queryMelodiesFromNotes(String notes){  return mHelper.queryMelodiesFromNotes(notes);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PET_SUMMONED(String value0){  return new SM_SYSTEM_MESSAGE(1400645,value0);}  }
class C{  public void onTargetCancel(TapTargetView view){  view.dismiss(false);}  }
class C{  public static boolean IsMaltOrDiamondSAMFile(File file){  String suffix=Basic.getFileSuffix(Basic.getFileNameWithoutZipOrGZipSuffix(file.getName()));  if (suffix == null)   return false;  if (!suffix.toLowerCase().equals(".sam"))   return false;  try {    try (FileInputIterator it=new FileInputIterator(file.getPath())){      while (it.hasNext()) {        String aLine=it.next();        if (aLine.startsWith("@")) {          if (aLine.contains("PN:MALT") || (aLine.contains("PN:DIAMOND")))           return true;        } else {          return false;        }      }    }   } catch (  IOException e) {  }  return false;}  }
class C{  public static void linkCyberware(ItemStack stack,ICyberware link){  if (stack == null)   return;  ItemStack key=new ItemStack(stack.getItem(),1,stack.getItemDamage());  linkedWare.put(key,link);}  }
class C{  private void generatePatternBitmap(){  if (getBounds().width() <= 0 || getBounds().height() <= 0) {    return;  }  mBitmap=Bitmap.createBitmap(getBounds().width(),getBounds().height(),Config.ARGB_8888);  Canvas canvas=new Canvas(mBitmap);  Rect r=new Rect();  boolean verticalStartWhite=true;  for (int i=0; i <= numRectanglesVertical; i++) {    boolean isWhite=verticalStartWhite;    for (int j=0; j <= numRectanglesHorizontal; j++) {      r.top=i * mRectangleSize;      r.left=j * mRectangleSize;      r.bottom=r.top + mRectangleSize;      r.right=r.left + mRectangleSize;      canvas.drawRect(r,isWhite ? mPaintWhite : mPaintGray);      isWhite=!isWhite;    }    verticalStartWhite=!verticalStartWhite;  }}  }
class C{  private Set<Long> synchronizeTags(Set<Long> tagIds) throws JMSException {  Set<Long> tagsKnownByServer=new HashSet<>();  LOG.info("synchronizeTags() - Synchronizing " + tagIds.size() + " live cache entries with the server.");  final Collection<TagUpdate> tagUpdates=tagRequestHandler.requestTags(tagIds);  for (  TagUpdate tagUpdate : tagUpdates) {    try {      ClientDataTagImpl liveTag=liveCache.get(tagUpdate.getId());      boolean wasUnknown=!liveTag.getDataTagQuality().isExistingTag();      liveTag.update(tagUpdate);      if (wasUnknown) {        subscribeToSupervisionManager(liveTag);      }      tagsKnownByServer.add(tagUpdate.getId());    } catch (    RuleFormatException e) {      LOG.error("synchronizeCache() - Received an incorrect rule tag from the server. Please check tag with id " + tagUpdate.getId(),e);      throw new RuntimeException("Received an incorrect rule tag from the server for tag id " + tagUpdate.getId());    }  }  return tagsKnownByServer;}  }
class C{  public static <T extends Serializable>Task<T> privilegedTask(Task<T> task){  return new PrivilegedTask<T>(task);}  }
class C{  public boolean willCollide(Disk other){  Vector toOther=other.position.minus(position);  Vector relativeSpeed=speed.minus(other.speed);  if (relativeSpeed.length2() <= 0)   return false;  if (toOther.dot(relativeSpeed) < 0)   return false;  return Math.abs(relativeSpeed.norm().ortho().dot(toOther)) <= radius + other.radius;}  }
class C{  public static String byteCountToDisplaySize(long size){  return byteCountToDisplaySize(BigInteger.valueOf(size));}  }
class C{  public void reset(){  super.reset();  m_prevRoot=null;}  }
class C{  public List<NlComponent> findWithin(@AndroidCoordinate int x,@AndroidCoordinate int y,@AndroidCoordinate int width,@AndroidCoordinate int height){  List<NlComponent> within=Lists.newArrayList();  for (  NlComponent component : myComponents) {    addWithin(within,component,x,y,width,height);  }  return within;}  }
class C{  public static float nextDown(final float a){  return nextAfter(a,Float.NEGATIVE_INFINITY);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPHeal_Instant_HEAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200979,skilltarget,num0,skillcaster,skillname);}  }
class C{  protected final int nextIndex(){  if (_expectedSize != _hash.size()) {    throw new ConcurrentModificationException();  }  byte[] states=_hash._states;  int i=_index;  while (i-- > 0 && (states[i] != TPrimitiveHash.FULL))   ;  return i;}  }
class C{  public static <T extends FieldElement<T>>FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field,final int dimension){  final T zero=field.getZero();  final T one=field.getOne();  final T[][] d=MathArrays.buildArray(field,dimension,dimension);  for (int row=0; row < dimension; row++) {    final T[] dRow=d[row];    Arrays.fill(dRow,zero);    dRow[row]=one;  }  return new Array2DRowFieldMatrix<T>(field,d,false);}  }
class C{  @Override public void run(){  asynchronousThread=Thread.currentThread();  setThreadName();  while (true) {    if (requestScheduled) {      requestScheduled=false;      report();    }    if (!keepRunning && !requestScheduled) {      break;    }    try {      TimeUnit.MILLISECONDS.sleep(DEFAULT_SLEEP_TIME);    } catch (    InterruptedException e) {      LOG.error("Sleep was interrupted",e);    }  }}  }
class C{  public boolean isApplicable(){  return getViewer() instanceof IViewerWithFindToolBar;}  }
class C{  public void testWriteReadEmpty() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream(0);  ObjectOutputStream os=new ObjectOutputStream(out);  os.writeObject(empty);  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));  FailOverPolicy copy=(FailOverPolicy)is.readObject();  is.close();  os.close();  assertTrue(helper.areEquals(empty,copy));}  }
class C{  public static void printUsage(){  System.out.println("Usage: " + grammarAndContentAnalysis.class.getName() + "[-corpusDir=dir"+ System.getProperty("file.separator")+ "] The base directory"+ " of the corpus including the directory separator character.\n"+ "[-categoriesForGrammar=#] \t The number of categories to use for grammar extraction. Default is 2.\n"+ " -trainPercent=#.## \t The training percent to use for the grammar. Default is 0.66.\n"+ " -minNGram=# \t The min n-gram rank. Default is 3.\n"+ " -maxNGram=# \t The max n-gram rank. Default is 8.\n"+ " -partOfCorpus=#.## \t The percent of corpus to use for all "+ " experiments.\n"+ " -windowSize=# \t The neighbourhood window. Default is max(2*minNGram, maxNGram+1).\n"+ " -cache \t If selected will cache category graphs in memory. NOTE: Very memory consuming.");}  }
class C{  public boolean isPluginEnabled(String name){  Plugin plugin=getPlugin(name);  return isPluginEnabled(plugin);}  }
class C{  @POST @Consumes(APPLICATION_JSON) @ApiOperation(value="Stores a favorite.",response=Response.class,httpMethod="POST",produces=APPLICATION_JSON,protocols="https") @Timed(name="postFavorite") public Response postFavorite(@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authHeader,@ApiParam(value="id") final Experiment experiment){  UserInfo.Username userName=authorization.getUser(authHeader);  List<Experiment.ID> favoriteList=favorites.addFavorite(userName,experiment.getID());  return httpHeader.headers(Response.Status.OK).entity(prepareResponseEntity(favoriteList)).build();}  }
class C{  public DatabaseGetUniversitiesQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public BoxFolder createFolder(String folderName,String parentId) throws BoxSDKServiceException {  try {    BoxFolder parentFolder=new BoxFolder(getBoxAPIConnection(),parentId);    BoxFolder.Info createFolderInfo=parentFolder.createFolder(folderName);    logger.debug("created: " + createFolderInfo.getID() + ", name: "+ createFolderInfo.getName());    return createFolderInfo.getResource();  } catch (  BoxAPIException e) {    throw new BoxSDKServiceException("Can't create folder: " + folderName,e);  }}  }
class C{  public WallGetByIdQueryWithExtended(VkApiClient client,String... posts){  super(client,"wall.getById",GetByIdExtendedResponse.class);  posts(posts);  extended(true);}  }
class C{  public static boolean contentEqualsIgnoreEOL(File file1,File file2,String charsetName) throws IOException {  boolean file1Exists=file1.exists();  if (file1Exists != file2.exists()) {    return false;  }  if (!file1Exists) {    return true;  }  if (file1.isDirectory() || file2.isDirectory()) {    throw new IOException("Can't compare directories, only files");  }  if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {    return true;  }  Reader input1=null;  Reader input2=null;  try {    if (charsetName == null) {      input1=new InputStreamReader(new FileInputStream(file1));      input2=new InputStreamReader(new FileInputStream(file2));    } else {      input1=new InputStreamReader(new FileInputStream(file1),charsetName);      input2=new InputStreamReader(new FileInputStream(file2),charsetName);    }    return IOUtils.contentEqualsIgnoreEOL(input1,input2);  }  finally {    IOUtils.closeQuietly(input1);    IOUtils.closeQuietly(input2);  }}  }
class C{  public double[] readAllDoubles(){  String[] fields=readAllStrings();  double[] vals=new double[fields.length];  for (int i=0; i < fields.length; i++)   vals[i]=Double.parseDouble(fields[i]);  return vals;}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  @Override public int hash(String symbol){  return fSymbolTable.hash(symbol);}  }
class C{  public static boolean isYesterday(Date date){  Calendar calendar=Calendar.getInstance();  calendar.add(Calendar.DAY_OF_MONTH,-1);  int nowYear=calendar.get(Calendar.YEAR);  int nowMonth=calendar.get(Calendar.MONTH);  int nowMonthDay=calendar.get(Calendar.DAY_OF_MONTH);  calendar.setTimeInMillis(date.getTime());  int thenYear=calendar.get(Calendar.YEAR);  int thenMonth=calendar.get(Calendar.MONTH);  int thenMonthDay=calendar.get(Calendar.DAY_OF_MONTH);  return (thenYear == nowYear) && (thenMonth == nowMonth) && (thenMonthDay == nowMonthDay);}  }
class C{  @Override public Node adoptNode(Node source) throws DOMException {  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");}  }
class C{  private void startList(boolean isOrderedList,Attributes attributes){  boolean isIndentation=isIndentation(attributes);  ParagraphType newType=isIndentation && isOrderedList ? ParagraphType.INDENTATION_OL : isIndentation && !isOrderedList ? ParagraphType.INDENTATION_UL : isOrderedList ? ParagraphType.NUMBERING : ParagraphType.BULLET;  AccumulatedParagraphStyle currentStyle=mParagraphStyles.isEmpty() ? null : mParagraphStyles.peek();  if (currentStyle == null) {    AccumulatedParagraphStyle newStyle=new AccumulatedParagraphStyle(newType,1,1);    mParagraphStyles.push(newStyle);  } else   if (currentStyle.getType() == newType) {    currentStyle.setAbsoluteIndent(currentStyle.getAbsoluteIndent() + 1);    currentStyle.setRelativeIndent(currentStyle.getRelativeIndent() + 1);  } else {    AccumulatedParagraphStyle newStyle=new AccumulatedParagraphStyle(newType,currentStyle.getAbsoluteIndent() + 1,1);    mParagraphStyles.push(newStyle);  }}  }
class C{  @Override public void delete(long timeout) throws AWSIotException, AWSIotTimeoutException {  super.delete(timeout);}  }
class C{  public JSearchPanel(SearchTupleSet search,String field,boolean monitorKeystrokes){  this(null,search,new String[]{field},false,monitorKeystrokes);}  }
class C{  public static String dbNameToClassName(String columnName){  return upperFirstChar(dbNameToVarName(columnName));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysParry_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200329,skillname);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DPHeal_Instant_HEAL_A_TO_ME(int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201224,num0,skillcaster,skillname);}  }
class C{  @Override public void endDTD(Augmentations augs) throws XNIException {  if (DEBUG_EVENTS) {    System.out.println("==>endDTD()");  }  fInDTD=false;  if (!fBaseURIStack.isEmpty()) {    fBaseURIStack.pop();  }  String internalSubset=fInternalSubset != null && fInternalSubset.length() > 0 ? fInternalSubset.toString() : null;  if (fDeferNodeExpansion) {    if (internalSubset != null) {      fDeferredDocumentImpl.setInternalSubset(fDocumentTypeIndex,internalSubset);    }  } else   if (fDocumentImpl != null) {    if (internalSubset != null) {      ((DocumentTypeImpl)fDocumentType).setInternalSubset(internalSubset);    }  }}  }
class C{  TranslationTransform(final Vector3D translation){  this.translation=translation;}  }
class C{  public int readInt() throws JMSException {  initializeReading();  try {    if (this.dataIn.available() == 0) {      throw new MessageEOFException("reached end of data");    }    this.dataIn.mark(33);    int type=this.dataIn.read();    if (type == _INT) {      return this.dataIn.readInt();    }    if (type == _SHORT) {      return this.dataIn.readShort();    }    if (type == _BYTE) {      return this.dataIn.readByte();    }    if (type == _STRING) {      return Integer.valueOf(this.dataIn.readUTF()).intValue();    }    if (type == _NULL) {      this.dataIn.reset();      throw new NullPointerException("Cannot convert _NULL value to int.");    } else {      this.dataIn.reset();      throw new MessageFormatException(" not an int type");    }  } catch (  NumberFormatException mfe) {    try {      this.dataIn.reset();    } catch (    IOException ioe) {      JMSException jmsEx=new JMSException("reset failed");      jmsEx.setLinkedException(ioe);    }    throw mfe;  }catch (  EOFException e) {    JMSException jmsEx=new MessageEOFException(e.toString());    jmsEx.setLinkedException(e);    throw jmsEx;  }catch (  IOException e) {    JMSException jmsEx=new MessageFormatException(e.toString());    jmsEx.setLinkedException(e);    throw jmsEx;  }}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("set layout=" + AlignmentViewer.AlignmentLayout.ByStart.toString() + ";zoom axis=both what=fit;");}  }
class C{  public static boolean isUSPhoneAreaCode(String s){  if (isEmpty(s))   return defaultEmptyOK;  String normalizedPhone=stripCharsInBag(s,phoneNumberDelimiters);  return (isInteger(normalizedPhone) && normalizedPhone.length() == digitsInUSPhoneAreaCode);}  }
class C{  private void checkIndices(final int start,final int end) throws MathIllegalArgumentException {  final int dim=getDimension();  if ((start < 0) || (start >= dim)) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.INDEX,start,0,dim - 1);  }  if ((end < 0) || (end >= dim)) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.INDEX,end,0,dim - 1);  }  if (end < start) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.INITIAL_ROW_AFTER_FINAL_ROW,end,start,false);  }}  }
class C{  public SecureSendNotificationQuery(VkApiClient client,ServiceActor actor,String message){  super(client,"secure.sendNotification",Utils.buildParametrizedType(List.class,Integer.class));  accessToken(actor.getAccessToken());  clientSecret(actor.getClientSecret());  message(message);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"user_table\" ("+ "\"USER_ID\" TEXT PRIMARY KEY NOT NULL ,"+ "\"USER_NAME\" TEXT,"+ "\"USER_PWD\" TEXT);");}  }
class C{  public static boolean is3G(Context context){  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo activeNetInfo=connectivityManager.getActiveNetworkInfo();  if (activeNetInfo != null && activeNetInfo.getType() == ConnectivityManager.TYPE_MOBILE) {    return true;  }  return false;}  }
class C{  public static void addTableToDocument(Document document,PdfPTable table){  try {    document.add(table);  } catch (  DocumentException ex) {    throw new RuntimeException("Failed to add table to document",ex);  }}  }
class C{  public int size(){  return map.size();}  }
class C{  public boolean equals(String productId,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,String accommodationMapId,String accommodationSpotId,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,BigDecimal selectedAmount,ProductConfigWrapper configWrapper,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,boolean isPromo){  return equals(productId,reservStart,reservLength,reservPersons,accommodationMapId,accommodationSpotId,additionalProductFeatureAndAppls,attributes,null,prodCatalogId,selectedAmount,configWrapper,itemType,itemGroup,isPromo);}  }
class C{  public String process(Item seg) throws ProcessException {  return segCodaCtype(seg,"n");}  }
class C{  @Override public final int readByte(){  int temp;  try {    temp=is.read();    if (temp == -1) {      throw new RuntimeException("EOF");    }    read++;    return temp;  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public static Sample loadBinary(DataInputStream dis) throws IOException {  int frameDataSize=dis.readInt();  short[] frameData=new short[frameDataSize];  for (int i=0; i < frameData.length; i++) {    frameData[i]=dis.readShort();  }  int residualDataSize=dis.readInt();  byte[] residualData=new byte[residualDataSize];  for (int i=0; i < residualData.length; i++) {    residualData[i]=dis.readByte();  }  return new Sample(frameData,residualData,residualDataSize);}  }
class C{  @Override public boolean isCellEditable(int rowIndex,int columnIndex){  ProcessFunctionParameterValue value=valueList.get(rowIndex);switch (columnIndex) {case COL_OPTIONAL:    return value.optional;case COL_VALUE:  if (value.optional) {    return value.included;  } else {    return true;  }case COL_PARAMETER:case COL_TYPE:default :return false;}}  }
class C{  public static <E>boolean isEmpty(Collection<E> c){  return (c == null) || c.isEmpty();}  }
class C{  private void buildViewForMeasuring(){  if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());  } else {    createItemsLayout();  }  int addItems=visibleItems / 2;  for (int i=currentItem + addItems; i >= currentItem - addItems; i--) {    if (addViewItem(i,true)) {      firstItem=i;    }  }}  }
class C{  public T solve(final int maxEval,final RealFieldUnivariateFunction<T> f,final T min,final T max,final AllowedSolution allowedSolution) throws MathIllegalArgumentException, NullArgumentException {  return solve(maxEval,f,min,max,min.add(max).divide(2),allowedSolution);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  @deprecated public static boolean equalsChars(CharSequence a,CharSequence b){  return (a.length() == b.length()) && (compare(a,b) == 0);}  }
class C{  public void disableDashedHighlightLine(){  mHighlightDashPathEffect=null;}  }
class C{  public static void writePrimitiveArray(PbsOutputStream output,Object[] array){  if (array == null)   output.writeInt(-1); else {    output.writeInt(array.length);    for (int i=0; i < array.length; ++i) {      PbsEntryFormatter.writeFieldValue(output,array[i]);    }  }}  }
class C{  public boolean mousePressed(Minecraft par1Minecraft,int par2,int par3){  if (this.enabled && super.mousePressed(par1Minecraft,par2,par3)) {    if (this.mouseDownStartValue == -1f) {      this.mouseDownStartValue=this.sliderValue;    }    float tempSliderValue=(float)(par2 - (this.xPosition + 4)) / (float)(this.width - 8);    if (tempSliderValue < 0.0F) {      tempSliderValue=0.0F;    }    if (tempSliderValue > 1.0F) {      tempSliderValue=1.0F;    }    float range=this.maxValue - this.minValue;    float tempValue=this.minValue + (tempSliderValue * range);    tempValue=Math.round(tempValue / this.increment) * this.increment;    if (tempValue > this.lastValue)     this.lastValue+=increment; else     if (tempValue < this.lastValue)     this.lastValue-=increment;    if (this.lastValue > this.maxValue)     this.lastValue=this.maxValue; else     if (this.lastValue < this.minValue)     this.lastValue=this.minValue;    this.sliderValue=(this.lastValue - this.minValue) / range;    float original=par1Minecraft.vrSettings.getOptionFloatValue(this.idFloat);    par1Minecraft.vrSettings.setOptionFloatValue(this.idFloat,this.lastValue);    this.displayString=par1Minecraft.vrSettings.getKeyBinding(this.idFloat);    par1Minecraft.vrSettings.setOptionFloatValue(this.idFloat,original);    this.lastMouseX=par2;    this.dragging=true;    return true;  }  return false;}  }
class C{  public void toString(StringBuffer sb){  sb.append("catch (");  getParameter().toString(sb);  sb.append(") ");  getBlock().toString(sb);}  }
class C{  public static boolean hadInitFreeline(Project project){  if (project != null) {    String projectPath=project.getBasePath();    File freelineDir=new File(projectPath,"freeline");    File freeline_py=new File(projectPath,"freeline.py");    if (freelineDir.exists() && freeline_py.exists()) {      return true;    }  }  return false;}  }
class C{  public TLongHash(int initialCapacity,float loadFactor,TLongHashingStrategy strategy){  super(initialCapacity,loadFactor);  this._hashingStrategy=strategy;}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  if (instance == null) {    throw new InvalidObjectException("null instance");  }  integrity=integrityEnforced(in);}  }
class C{  OMTG_ENV_005_JS_Interface(Context c){  mContext=c;}  }
class C{  public boolean giveDefaultIfNeeded(User user,boolean save){  boolean hasGroup=false;  if (user.getPrimaryGroup() != null && !user.getPrimaryGroup().isEmpty()) {    for (    Node node : user.getPermissions(false)) {      if (node.isGroupNode()) {        hasGroup=true;        break;      }    }  }  if (hasGroup) {    return false;  }  user.setPrimaryGroup("default");  try {    user.setPermission("group.default",true);  } catch (  ObjectAlreadyHasException ignored) {  }  if (save) {    plugin.getDatastore().saveUser(user,Callback.empty());  }  return true;}  }
class C{  private void refreshIndexForDimensionKey(String rowId){  try {    String allValuesKey=DimensionStoreKeyUtils.getAllValuesKey();    String dimensionRows=keyValueStore.get(allValuesKey);    Set<String> dimensionRowsSet=new LinkedHashSet<>();    if (dimensionRows != null) {      dimensionRowsSet.addAll(Arrays.asList(objectMapper.readValue(dimensionRows,String[].class)));    }    dimensionRowsSet.add(rowId);    String dimRows=objectMapper.writeValueAsString(dimensionRowsSet);    keyValueStore.put(allValuesKey,dimRows);  } catch (  IOException e) {    LOG.error("Exception while adding dimension entry in KeyValueStore : {}",e);    throw new RuntimeException(e);  }}  }
class C{  public final static double abs(double dNum){  return (dNum > 0) ? dNum : -dNum;}  }
class C{  private float[] convertDashListToArray(List<Float> dashList){  if (dashList == null) {    return null;  }  float[] dashes=new float[dashList.size()];  int i=0;  for (  Float f : dashList) {    dashes[i++]=(f != null ? f : Float.NaN);  }  return dashes;}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  public void updateView(){  updateGraph();  embedGraph();}  }
class C{  ResourceHandle newResourceHandle(K key,final Callable<? extends R> loader,EliminationStack<ResourceKey<K>> stack){  try {    final ResourceKey<K> resourceKey=timeToIdlePolicy.isPresent() ? new LinkedResourceKey<K>(stack,Status.IN_FLIGHT,key,timeToIdlePolicy.get().idleQueue) : new UnlinkedResourceKey<K>(stack,Status.IN_FLIGHT,key);    R resource=loader.call();    try {      lifecycle.onCreate(resourceKey.getKey(),resource);      cache.put(resourceKey,resource);    } catch (    Exception e) {      lifecycle.onRemoval(resourceKey.getKey(),resource);      throw e;    }    ResourceHandle handle=new ResourceHandle(resourceKey,resource);    resourceKey.handle=handle;    return handle;  } catch (  Exception e) {    throw Throwables.propagate(e.getCause());  }}  }
class C{  public int createTextureObject(){  return program.createTextureObject();}  }
class C{  @Override public void endConditional(Augmentations augmentations) throws XNIException {}  }
class C{  private SourceTargetPair[] vocalizationF0DistanceComputer(VocalizationCandidate[] suitableCandidates,VocalizationCandidate[] suitableF0Candidates,Element domElement){  int noPossibleImpositions=suitableCandidates.length * suitableF0Candidates.length;  SourceTargetPair[] imposeF0Data=new SourceTargetPair[noPossibleImpositions];  int count=0;  for (int i=0; i < suitableCandidates.length; i++) {    for (int j=0; j < suitableF0Candidates.length; j++) {      int sourceIndex=suitableCandidates[i].unitIndex;      int targetIndex=suitableF0Candidates[j].unitIndex;      double contourCost=getContourCostDistance(sourceIndex,targetIndex);      double mergeCost=getMergeCost(sourceIndex,targetIndex,domElement);      double cost=(contourCost * contourCostWeight) + (mergeCost * (1 - contourCostWeight));      Log.d(Mary.LOG,"Unit Index " + sourceIndex + " & Contour Index "+ targetIndex+ " :: Countour cost: "+ df.format(contourCost)+ " + Merge Cost: "+ df.format(mergeCost)+ " --> TotalCost: "+ df.format(cost));      imposeF0Data[count++]=new SourceTargetPair(sourceIndex,targetIndex,cost);    }  }  Arrays.sort(imposeF0Data);  return imposeF0Data;}  }
class C{  public void initializeChildDimensionsList(int childDimension){  listOfChildDimensions=new ArrayList<CarbonDimension>(childDimension);}  }
class C{  public static ByteBuffer processInboundPackage(ByteBuffer roData,int exchangeId,boolean connectionOk){  roData.rewind();  if (BuildConfig.DEBUG) {    XposedBridge.log("Processing inbound package of size " + Integer.toString(roData.remaining()));  }  try {synchronized (sync) {    }  } catch (  Throwable e) {    XposedBridge.log(e);  }  return null;}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set fontSize=increase;");}  }
class C{  public static String showPasswordHint(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  String userLoginId=request.getParameter("USERNAME");  String errMsg=null;  if ((userLoginId != null) && ("true".equals(EntityUtilProperties.getPropertyValue("security.properties","username.lowercase",delegator)))) {    userLoginId=userLoginId.toLowerCase();  }  if (!UtilValidate.isNotEmpty(userLoginId)) {    errMsg=UtilProperties.getMessage(resource,"loginevents.username_was_empty_reenter",UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  GenericValue supposedUserLogin=null;  try {    supposedUserLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId",userLoginId).queryOne();  } catch (  GenericEntityException gee) {    Debug.logWarning(gee,"",module);  }  if (supposedUserLogin == null) {    errMsg=UtilProperties.getMessage(resource,"loginevents.username_not_found_reenter",UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  String passwordHint=supposedUserLogin.getString("passwordHint");  if (!UtilValidate.isNotEmpty(passwordHint)) {    errMsg=UtilProperties.getMessage(resource,"loginevents.no_password_hint_specified_try_password_emailed",UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  Map<String,String> messageMap=UtilMisc.toMap("passwordHint",passwordHint);  errMsg=UtilProperties.getMessage(resource,"loginevents.password_hint_is",messageMap,UtilHttp.getLocale(request));  request.setAttribute("_EVENT_MESSAGE_",errMsg);  return "success";}  }
class C{  public static void write(char[] data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public static void initInstance(Properties properties){  if (instance == null) {    instance=new CloseVoteFinder(properties);  }}  }
class C{  public static <T extends OutputStream>T copy(InputStream in,T out) throws IOException {  byte[] buffer=new byte[4096];  for (int read; (read=in.read(buffer)) > 0; ) {    out.write(buffer,0,read);  }  return out;}  }
class C{  public static void addCustomAttributes(XMLStreamReader xtr,BaseElement element,List<ExtensionAttribute>... blackLists){  for (int i=0; i < xtr.getAttributeCount(); i++) {    ExtensionAttribute extensionAttribute=new ExtensionAttribute();    extensionAttribute.setName(xtr.getAttributeLocalName(i));    extensionAttribute.setValue(xtr.getAttributeValue(i));    if (StringUtils.isNotEmpty(xtr.getAttributeNamespace(i))) {      extensionAttribute.setNamespace(xtr.getAttributeNamespace(i));    }    if (StringUtils.isNotEmpty(xtr.getAttributePrefix(i))) {      extensionAttribute.setNamespacePrefix(xtr.getAttributePrefix(i));    }    if (!isBlacklisted(extensionAttribute,blackLists)) {      element.addAttribute(extensionAttribute);    }  }}  }
class C{  public void rightTrim(double second){  trim(0,second);}  }
class C{  public String reportError(String domain,String key,Object[] arguments,short severity) throws XNIException {  return reportError(fLocator,domain,key,arguments,severity);}  }
class C{  protected void drawRoundedSlices(Canvas c){  if (!mChart.isDrawRoundedSlicesEnabled())   return;  IPieDataSet dataSet=mChart.getData().getDataSet();  if (!dataSet.isVisible())   return;  float phaseX=mAnimator.getPhaseX();  float phaseY=mAnimator.getPhaseY();  PointF center=mChart.getCenterCircleBox();  float r=mChart.getRadius();  float circleRadius=(r - (r * mChart.getHoleRadius() / 100f)) / 2f;  float[] drawAngles=mChart.getDrawAngles();  float angle=mChart.getRotationAngle();  for (int j=0; j < dataSet.getEntryCount(); j++) {    float sliceAngle=drawAngles[j];    Entry e=dataSet.getEntryForIndex(j);    if (Math.abs(e.getVal()) > 0.000001) {      float x=(float)((r - circleRadius) * Math.cos(Math.toRadians((angle + sliceAngle) * phaseY)) + center.x);      float y=(float)((r - circleRadius) * Math.sin(Math.toRadians((angle + sliceAngle) * phaseY)) + center.y);      mRenderPaint.setColor(dataSet.getColor(j));      mBitmapCanvas.drawCircle(x,y,circleRadius,mRenderPaint);    }    angle+=sliceAngle * phaseX;  }}  }
class C{  public DHCPMessage(byte[] ibuf){  initialize();  internalize(ibuf);  this.destination_IP=BROADCAST_ADDR;  this.gPort=SERVER_PORT;}  }
class C{  public void parse() throws IOException {  fReader=getReader(fSource);  fSource=null;  int readSize=fReader.read(fTempString.ch,0,fTempString.ch.length - 1);  fHandler.fHasIncludeReportedContent=true;  while (readSize != -1) {    for (int i=0; i < readSize; ++i) {      char ch=fTempString.ch[i];      if (!isValid(ch)) {        if (XMLChar.isHighSurrogate(ch)) {          int ch2;          if (++i < readSize) {            ch2=fTempString.ch[i];          } else {            ch2=fReader.read();            if (ch2 != -1) {              fTempString.ch[readSize++]=(char)ch2;            }          }          if (XMLChar.isLowSurrogate(ch2)) {            int sup=XMLChar.supplemental(ch,(char)ch2);            if (!isValid(sup)) {              fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"InvalidCharInContent",new Object[]{Integer.toString(sup,16)},XMLErrorReporter.SEVERITY_FATAL_ERROR);            }          } else {            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"InvalidCharInContent",new Object[]{Integer.toString(ch2,16)},XMLErrorReporter.SEVERITY_FATAL_ERROR);          }        } else {          fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"InvalidCharInContent",new Object[]{Integer.toString(ch,16)},XMLErrorReporter.SEVERITY_FATAL_ERROR);        }      }    }    if (fHandler != null && readSize > 0) {      fTempString.offset=0;      fTempString.length=readSize;      fHandler.characters(fTempString,fHandler.modifyAugmentations(null,true));    }    readSize=fReader.read(fTempString.ch,0,fTempString.ch.length - 1);  }}  }
class C{  private void addCachedLegionMember(LegionMember legionMember){  this.allCachedLegionMembers.addMember(legionMember);}  }
class C{  public void goToNextColor(){  setColorIndex(getNextColorIndex());}  }
class C{  private void initRealmConfiguration(){  RealmConfiguration realmConfiguration=new RealmConfiguration.Builder(this).build();  Realm.setDefaultConfiguration(realmConfiguration);}  }
class C{  @DataProvider(name="ExperimentAAndB") public static Object[][] experimentAAndB(){  return new Object[][]{new Object[]{"{\"applicationName\": \"qbo\", \"label\": \"exp_a_" + time + "\","+ "\"samplingPercent\": 1.0, \"startTime\": \""+ dateTime.minusDays(1).format(formatter)+ "\", "+ "\"endTime\": \""+ dateTime.plusDays(1).format(formatter)+ "\", \"description\": \"some description\"}"},new Object[]{"{\"applicationName\": \"qbo\", \"label\": \"exp_b_" + time + "\","+ "\"samplingPercent\": 1.0, \"startTime\": \""+ dateTime.minusDays(3).format(formatter)+ "\", "+ "\"endTime\": \""+ dateTime.plusDays(8).format(formatter)+ "\", \"description\": \"some description\"}"}};}  }
class C{  public static void sortByOriginalOrder(final Alignment alignment){  alignment.resetOrder();}  }
class C{  private static boolean isSeparator(char ch){  return ch == UNIX_SEPARATOR || ch == WINDOWS_SEPARATOR;}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  public VariationalEquation(final ExpandableODE expandable,final OrdinaryDifferentialEquation ode,final double[] hY,final ParametersController controller,final ParameterConfiguration... paramsAndSteps) throws MismatchedEquations {  this(expandable,new ParameterJacobianWrapper(ode,hY,controller,paramsAndSteps));}  }
class C{  private void addJointAction(Class<? extends Joint> clazz){synchronized (Simulation.LOCK) {    SandboxBody[] bodies=this.getBodies();    if (bodies == null || bodies.length == 0 || (clazz != PinJoint.class && bodies.length == 1)) {      JOptionPane.showMessageDialog(ControlUtilities.getParentWindow(this),Messages.getString("menu.context.joint.add.warning"),Messages.getString("menu.context.joint.add.warning.title"),JOptionPane.ERROR_MESSAGE);      return;    }    Joint joint=AddJointDialog.show(ControlUtilities.getParentWindow(this),bodies,clazz);    if (joint != null) {      this.simulation.getWorld().addJoint(joint);      DefaultMutableTreeNode jointNode=new DefaultMutableTreeNode(joint);      this.model.insertNodeInto(jointNode,this.jointFolder,this.jointFolder.getChildCount());      this.tree.expandPath(new TreePath(jointNode.getPath()).getParentPath());    }  }}  }
class C{  public boolean isSelected(String series,String className){  if (isSelectedBasedOnSeries)   return selectedSeries.contains(series); else   return selectedClasses.contains(className);}  }
class C{  public BufferMap(int capacity,int bufferSize,RandomGenerator randomGenerator){  this.bufferSize=bufferSize;  this.capacity=capacity;  this.randomGenerator=randomGenerator;}  }
class C{  private ULong(String value) throws NumberFormatException {  if (value == null) {    throw new NumberFormatException("null");  }  int length=value.length();  if (length == 0) {    throw new NumberFormatException("Empty input string");  }  if (value.charAt(0) == '-') {    throw new NumberFormatException(String.format("Illegal leading minus sign on unsigned string %s",value));  }  if (length <= 18) {    this.value=Long.parseLong(value,10);    return;  }  final long first=Long.parseLong(value.substring(0,length - 1),10);  final int second=Character.digit(value.charAt(length - 1),10);  if (second < 0) {    throw new NumberFormatException("Bad digit at end of " + value);  }  long result=first * 10 + second;  if (compare(result,first) < 0) {    throw new NumberFormatException(String.format("String value %s exceeds range of unsigned long",value));  }  this.value=result;}  }
class C{  public RadialTreeLayout(String group,int radius){  this(group);  m_radiusInc=radius;  m_autoScale=false;}  }
class C{  public boolean isXMLDoc(){  if (isXMLDoc == UNKNOWN_TYPE)   isXMLDoc=getDocumentType();  return isXMLDoc == VALID_XML;}  }
class C{  public static boolean isWrapperInstance(Class type,Object instance){  if (!type.isPrimitive())   throw new IllegalArgumentException("Input type must be a primitive");  if (int.class == type && instance instanceof Integer) {    return true;  } else   if (long.class == type && instance instanceof Long) {    return true;  } else   if (float.class == type && instance instanceof Float) {    return true;  } else   if (double.class == type && instance instanceof Double) {    return true;  } else   if (boolean.class == type && instance instanceof Boolean) {    return true;  } else   if (short.class == type && instance instanceof Short) {    return true;  } else   if (byte.class == type && instance instanceof Byte) {    return true;  } else   if (char.class == type && instance instanceof Character) {    return true;  } else {    return false;  }}  }
class C{  public boolean isComplete(){  return styleComplete && layersComplete;}  }
class C{  public static int intersectLineRectangle(Point2D a1,Point2D a2,Rectangle2D r,Point2D[] pts){  double a1x=a1.getX(), a1y=a1.getY();  double a2x=a2.getX(), a2y=a2.getY();  double mxx=r.getMaxX(), mxy=r.getMaxY();  double mnx=r.getMinX(), mny=r.getMinY();  if (pts[0] == null)   pts[0]=new Point2D.Double();  if (pts[1] == null)   pts[1]=new Point2D.Double();  int i=0;  if (intersectLineLine(mnx,mny,mxx,mny,a1x,a1y,a2x,a2y,pts[i]) > 0)   i++;  if (intersectLineLine(mxx,mny,mxx,mxy,a1x,a1y,a2x,a2y,pts[i]) > 0)   i++;  if (i == 2)   return i;  if (intersectLineLine(mxx,mxy,mnx,mxy,a1x,a1y,a2x,a2y,pts[i]) > 0)   i++;  if (i == 2)   return i;  if (intersectLineLine(mnx,mxy,mnx,mny,a1x,a1y,a2x,a2y,pts[i]) > 0)   i++;  return i;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ParTypeAccess fullCopy(){  ParTypeAccess tree=(ParTypeAccess)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  @Override public void newTagValueSent(final long tagID){  if (dataTagTable == null) {    LOGGER.error("Tried to add a new tag while field dataTagTable was null.");    return;  }  SourceDataTag tag=dataTagTable.get(tagID);  if (tag == null) {    LOGGER.warn("Tried to add a tag not controlled by this class. (Tag-ID: '" + tagID + "')");  } else {    DiffMovingAverage diffMovingAverage=movingAverages.get(tagID);    if (diffMovingAverage == null) {      diffMovingAverage=new DiffMovingAverage(windowSize);      movingAverages.put(tagID,diffMovingAverage);    }    diffMovingAverage.recordTimestamp();    checkTag(tag,diffMovingAverage.getCurrentAverage());  }}  }
class C{  public void addExtension(String ext){synchronized (exts) {    ext=ext.toLowerCase();    exts.add(ext);  }}  }
class C{  public static boolean canInviteToGroup(Player player,Player target){  for (  Restrictions restrictions : RESTRICTIONS[RestrictionMode.canInviteToGroup.ordinal()]) {    if (!restrictions.canInviteToGroup(player,target)) {      return false;    }  }  return true;}  }
class C{  private void populateStyles(GeoServerConnection connection,GeoServerNode geoServerNode){  removeNode(geoServerNode,STYLES_NODE_TITLE);  GeoServerStyleHeadingNode styleNode=new GeoServerStyleHeadingNode(this.handler,connection,STYLES_NODE_TITLE);  geoServerNode.add(styleNode);  Map<String,List<StyleWrapper>> styleMap=geoServerStyleMap.get(connection);  for (  String workspaceName : styleMap.keySet()) {    List<StyleWrapper> styleList=styleMap.get(workspaceName);    GeoServerWorkspaceNode workspaceNode=new GeoServerWorkspaceNode(this.handler,connection,workspaceName,true);    treeModel.insertNodeInto(workspaceNode,styleNode,styleNode.getChildCount());    for (    StyleWrapper styleWrapper : styleList) {      GeoServerStyleNode childNode=new GeoServerStyleNode(this.handler,connection,styleWrapper);      treeModel.insertNodeInto(childNode,workspaceNode,workspaceNode.getChildCount());    }  }}  }
class C{  public static Point randomStep(Point point){  point.setLongitude(point.getLongitude() + randomStep());  point.setLatitude(point.getLatitude() + randomStep());  return point;}  }
class C{  public static Tuple max(Iterator tuples,String field,Comparator cmp){  Tuple t=null, tmp;  Object min=null;  if (tuples.hasNext()) {    t=(Tuple)tuples.next();    min=t.get(field);  }  while (tuples.hasNext()) {    tmp=(Tuple)tuples.next();    Object obj=tmp.get(field);    if (cmp.compare(obj,min) > 0) {      t=tmp;      min=obj;    }  }  return t;}  }
class C{  protected AdsUpdateAdsQuery data(String value){  return unsafeParam("data",value);}  }
class C{  public static AttackStatus calculateMagicalStatus(Creature attacker,Creature attacked,int criticalProb,boolean isSkill){  if (!isSkill) {    if (Rnd.get(0,1000) < StatFunctions.calculateMagicalResistRate(attacker,attacked,0)) {      return AttackStatus.RESIST;    }  }  if (StatFunctions.calculateMagicalCriticalRate(attacker,attacked,criticalProb)) {    return AttackStatus.CRITICAL;  }  return AttackStatus.NORMALHIT;}  }
class C{  public boolean isVerticalType(Value val){  throw new RuntimeException("Unsupported operation.");}  }
class C{  void clearSelection(){  ContentViewCore baseContentView=getBaseContentView();  if (baseContentView != null) {    baseContentView.clearSelection();  }  resetAllStates();}  }
class C{  protected FriendsEditQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  public static long toLong(TimeDuration duration){  return (0x757B12C00L * duration.years) + (0x9CA41900L * duration.months) + (86400000 * (long)duration.days)+ (3600000 * (long)duration.hours)+ (60000 * (long)duration.minutes)+ (1000 * (long)duration.seconds)+ duration.milliseconds;}  }
class C{  public void action(){  SimilarityArray saRes=null;  try {    ndDoc1=new SimpleTextDocument(WordNGramSize_Min,WordNGramSize_Max,Word_Dmax);    ndNDoc1=new NGramGaussNormDocument(CharacterNGramSize_Min,CharacterNGramSize_Max,Character_Dmax,CharacterNGramSize_Min,CharacterNGramSize_Max);    if (DoWordNGrams)     ndDoc1.setDataString(Doc1);    if (DoCharNGrams)     ndNDoc1.setDataString(Doc1);    StandardDocumentComparator sdcComparator=new StandardDocumentComparator();    CachedDocumentComparator sdcNComparator=new CachedDocumentComparator();    SimpleTextDocument ndDoc2=null;    NGramDocument ndNDoc2=null;    if (DoWordNGrams) {      ndDoc2=new SimpleTextDocument(WordNGramSize_Min,WordNGramSize_Max,Word_Dmax);      ndDoc2.setDataString(Doc2);    }    if (DoCharNGrams) {      ndNDoc2=new NGramGaussNormDocument(CharacterNGramSize_Min,CharacterNGramSize_Max,Character_Dmax,CharacterNGramSize_Min,CharacterNGramSize_Max);      ndNDoc2.setDataString(Doc2);    }    saRes=new SimilarityArray();    GraphSimilarity sSimil=null;    if (DoWordNGrams) {      try {        sSimil=sdcComparator.getSimilarityBetween(ndDoc1,ndDoc2);      } catch (      InvalidClassException ex) {synchronized (System.err) {          ex.printStackTrace(System.err);          return;        }      }      saRes.SimpleTextOverallSimil=sSimil;      saRes.SimpleTextGraphSimil=sdcComparator.getGraphSimilarity();      saRes.SimpleTextHistoSimil=sdcComparator.getHistogramSimilarity();    }    GraphSimilarity sSimil2=null;    if (DoCharNGrams) {      try {        sSimil2=sdcNComparator.getSimilarityBetween(ndNDoc1,ndNDoc2);      } catch (      InvalidClassException ex) {synchronized (System.err) {          ex.printStackTrace(System.err);          return;        }      }      saRes.NGramOverallSimil=sSimil2;      saRes.NGramGraphSimil=sdcNComparator.getGraphSimilarity();      saRes.NGramHistoSimil=sdcNComparator.getHistogramSimilarity();    }synchronized (myAgent) {      ((NGramDocumentComparatorAgent)myAgent).setResult(saRes,ID);    }    if (!Silent) synchronized (System.err) {      System.err.println(myAgent.getName() + ":" + "Calculation complete.");    }  }  finally {synchronized (myAgent) {      ((NGramDocumentComparatorAgent)myAgent).setResult(saRes,ID);    }  }}  }
class C{  @Override public void dispose(){  if (receiveThread != null) {    receiveThread.interrupt();    try {      receiveThread.join();    } catch (    InterruptedException e) {    }    receiveThread=null;  }  if (serialPort != null) {    serialPort.close();    serialPort=null;  }  logger.info("Stopped ZWave serial handler");  super.dispose();}  }
class C{  public NewsfeedSearchQuery startFrom(String value){  return unsafeParam("start_from",value);}  }
class C{  public void flushAndCancel(){synchronized (this.sourceDataTag) {    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("\tscheduler[" + this.sourceDataTag.getId() + "] : flush and reset");    }    this.cancel();    this.run();    this.lastSourceDataTag=null;  }}  }
class C{  public boolean isRunning(){  if (!initedNative)   return false;  return NativeInterface.arwIsRunning();}  }
class C{  public static void removeUIdFromSetOfOpenFiles(String name,long uId){  final Pair<String,Long> pair=new Pair<>(name,uId);  Integer count=openFiles.get(pair);  if (count == null || count < 2) {    openFiles.keySet().remove(pair);  } else   openFiles.put(pair,count - 1);}  }
class C{  private ResultPoint[] centerEdges(ResultPoint y,ResultPoint z,ResultPoint x,ResultPoint t){  float yi=y.getX();  float yj=y.getY();  float zi=z.getX();  float zj=z.getY();  float xi=x.getX();  float xj=x.getY();  float ti=t.getX();  float tj=t.getY();  if (yi < width / 2.0f) {    return new ResultPoint[]{new ResultPoint(ti - CORR,tj + CORR),new ResultPoint(zi + CORR,zj + CORR),new ResultPoint(xi - CORR,xj - CORR),new ResultPoint(yi + CORR,yj - CORR)};  } else {    return new ResultPoint[]{new ResultPoint(ti + CORR,tj + CORR),new ResultPoint(zi + CORR,zj - CORR),new ResultPoint(xi - CORR,xj + CORR),new ResultPoint(yi - CORR,yj - CORR)};  }}  }
class C{  public void release(){  Log.i(TAG,"deleting program " + programHandle);  GLES20.glDeleteProgram(programHandle);  programHandle=-1;}  }
class C{  public void loadAndParseRClass(){  myClassLoader.loadAndParseRClassSilently();}  }
class C{  public void writeToFileInDirectory(File directory,String fileName,String content){  try {    Files.write(content,new File(directory,fileName),StandardCharsets.UTF_8);  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }}  }
class C{  public static void convert(String inFileName,String outFileName,int lpcOrder) throws IOException {  ESTTrackReader etr=new ESTTrackReader(inFileName);  float[][] lpc=convertData(etr.getFrames(),lpcOrder);  ESTTrackWriter etw=new ESTTrackWriter(etr.getTimes(),lpc,"lpc");  etw.doWriteAndClose(outFileName,etr.isBinary(),etr.isBigEndian());}  }
class C{  public void removeWidget(ConstraintWidget widget){  if (widget == null) {    return;  }  if (widget instanceof ConstraintWidgetContainer) {    ConstraintWidgetContainer container=(ConstraintWidgetContainer)widget;    ArrayList<ConstraintWidget> children=new ArrayList<>(container.getChildren());    for (    ConstraintWidget w : children) {      removeWidget(w);    }  }  for (  ConstraintWidget w : mWidgets.values()) {    w.disconnectWidget(widget);  }  WidgetContainer parent=(WidgetContainer)widget.getParent();  if (parent != null) {    parent.remove(widget);  }  mWidgets.remove(getTag(widget));  if (mRoot == widget) {    mRoot=null;  }}  }
class C{  @Override public String toString(){  return x + "," + y+ ","+ z;}  }
class C{  @Deprecated public void update(MapObjects other){  nearbyPokemons.clear();  addNearbyPokemons(other.getNearbyPokemons());  catchablePokemons.clear();  addCatchablePokemons(other.getCatchablePokemons());  wildPokemons.clear();  addWildPokemons(other.getWildPokemons());  decimatedSpawnPoints.clear();  addDecimatedSpawnPoints(other.getDecimatedSpawnPoints());  spawnPoints.clear();  addSpawnPoints(other.getSpawnPoints());}  }
class C{  public INSECTMemoryDB(){  ObjectMap=new HashMap();}  }
class C{  public static WxBatchGetMaterialResult fromJson(String json) throws JsonParseException, JsonMappingException, IOException {  ObjectMapper mapper=new ObjectMapper();  return mapper.readValue(json,WxBatchGetMaterialResult.class);}  }
class C{  public void fill(int val){  Arrays.fill(_data,0,_pos,val);}  }
class C{  public int compare(File file1,File file2){  return delegate.compare(file2,file1);}  }
class C{  @Override public void ignorableWhitespace(XMLString text,Augmentations augs) throws XNIException {  if (fDocumentHandler != null) {    fDocumentHandler.ignorableWhitespace(text,augs);  }}  }
class C{  public NavigatingActivityDelegate(@NonNull ActivityDelegateCallback<S,U> callback,@NonNull NavigatingDelegateCallback<T> navigatingCallback,@NonNull Activity delegatedActivity){  super(callback,delegatedActivity);  this.navigatingCallback=navigatingCallback;}  }
class C{  @Override protected Boolean doInBackground(Void... params){  while (!mLocalPaths.isEmpty()) {    String currentPath=mLocalPaths.get(0);    File currentFile=new File(currentPath);    String expectedPath=FileStorageUtils.getSavePath(mAccount.name) + mRemotePaths.get(0);    File expectedFile=new File(expectedPath);    if (expectedFile.equals(currentFile) || currentFile.renameTo(expectedFile)) {      OCFile file=mStorageManager.getFileByPath(mRemotePaths.get(0));      file.setStoragePath(expectedPath);      mStorageManager.saveFile(file);      mRemotePaths.remove(0);      mLocalPaths.remove(0);    } else {      return false;    }  }  return true;}  }
class C{  public ExecuteStorageFunctionQuery(VkApiClient client,Actor actor,String storageFunctionName){  super(client,"execute." + storageFunctionName,JsonElement.class);  accessToken(actor.getAccessToken());}  }
class C{  public PronounceableFSM(URL url,boolean scanFromFront) throws IOException {  this.scanFromFront=scanFromFront;  InputStream is=Utilities.getInputStream(url);  loadText(is);  is.close();}  }
class C{  public boolean hasProgramStartDate(){  return programStartDate != null;}  }
class C{  @Override public void update(Protos.TaskStatus status){synchronized (planLock) {    getPlan().update(status);    updatePlan();    notifyObservers();  }}  }
class C{  protected PhotosCopyQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public boolean isStateTransitionValid(State desiredState){  if (state == null) {    return false;  } else {    return state.isStateTransitionAllowed(desiredState);  }}  }
class C{  public static boolean between(Date baseDate,Date startDate,Date endDate){  if (startDate.equals(endDate) || endDate.before(startDate)) {    return false;  }  if ((startDate.before(baseDate) || startDate.equals(baseDate)) && (endDate.after(baseDate) || endDate.equals(baseDate))) {    return true;  }  return false;}  }
class C{  public void createLog(){  List<String> commandList=new ArrayList<String>();  commandList.add("logcat");  commandList.add("-f");  commandList.add(getLogPath());  commandList.add("-v");  commandList.add("time");  try {    process=Runtime.getRuntime().exec(commandList.toArray(new String[commandList.size()]));  } catch (  Exception e) {    Log.e(TAG,e.getMessage(),e);  }}  }
class C{  public JToolTip createToolTip(){  if (m_customToolTip == null) {    return super.createToolTip();  } else {    return m_customToolTip;  }}  }
class C{  public static List<String> parseRolesString(String roles){  List<String> result=new ArrayList<String>();  StringTokenizer st=new StringTokenizer(roles,",");  for (; st.hasMoreTokens(); ) {    String role=st.nextToken().trim();    if (!result.contains(role) && (role.equalsIgnoreCase(String.valueOf(SecurityContext.PERMISSION_WRITE)) || role.equalsIgnoreCase(String.valueOf(SecurityContext.PERMISSION_READ)) || role.equalsIgnoreCase(String.valueOf(SecurityContext.PERMISSION_EXECUTE))))     result.add(role.toUpperCase());  }  return result;}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] leftTopBlack=image.getTopLeftOnBit();  int[] rightBottomBlack=image.getBottomRightOnBit();  if (leftTopBlack == null || rightBottomBlack == null) {    throw NotFoundException.getNotFoundInstance();  }  int moduleSize=moduleSize(leftTopBlack,image);  int top=leftTopBlack[1];  int bottom=rightBottomBlack[1];  int left=leftTopBlack[0];  int right=rightBottomBlack[0];  int matrixWidth=(right - left + 1) / moduleSize;  int matrixHeight=(bottom - top + 1) / moduleSize;  if (matrixWidth <= 0 || matrixHeight <= 0) {    throw NotFoundException.getNotFoundInstance();  }  int nudge=moduleSize / 2;  top+=nudge;  left+=nudge;  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);  for (int y=0; y < matrixHeight; y++) {    int iOffset=top + y * moduleSize;    for (int x=0; x < matrixWidth; x++) {      if (image.get(left + x * moduleSize,iOffset)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  private void buildRevCallGraph(){  rev_call_graph=new HashMap<Integer,LinkedList<CgEdge>>();  for (int i=0; i < n_func; ++i) {    CgEdge p=call_graph[i];    while (p != null) {      LinkedList<CgEdge> list=rev_call_graph.get(p.t);      if (list == null) {        list=new LinkedList<CgEdge>();        rev_call_graph.put(p.t,list);      }      list.add(p);      p=p.next;    }  }}  }
class C{  @Deprecated protected Class<?> findDataSupportClass(DataSupport baseObj){  Class<?> superClass=null;  while (true) {    superClass=baseObj.getClass().getSuperclass();    if (superClass == null || DataSupport.class == superClass) {      break;    }  }  if (superClass == null) {    throw new DataSupportException(baseObj.getClass().getName() + DataSupportException.MODEL_IS_NOT_AN_INSTANCE_OF_DATA_SUPPORT);  }  return superClass;}  }
class C{  public RecognitionRequest(File... files){  for (  File file : files) {    items.add(new Item(file));  }}  }
class C{  public void cancel(Account account,OCFile file){  if (account == null || file == null) {    Log_OC.e(TAG,"Cannot cancel with NULL parameters");    return;  }  Pair<SynchronizeFolderOperation,String> removeResult=mPendingOperations.remove(account.name,file.getRemotePath());  SynchronizeFolderOperation synchronization=removeResult.first;  if (synchronization != null) {    synchronization.cancel();  } else {    if (mCurrentSyncOperation != null && mCurrentAccount != null && mCurrentSyncOperation.getRemotePath().startsWith(file.getRemotePath()) && account.name.equals(mCurrentAccount.name)) {      mCurrentSyncOperation.cancel();    }  }}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  private void removeHelpersSpawn(){  for (  Integer object : spawnedNpc) {    VisibleObject npc=World.getInstance().findVisibleObject(object);    if (npc != null && npc.isSpawned()) {      npc.getController().onDelete();    }  }  spawnedNpc.clear();}  }
class C{  public static boolean isNotSet(double value){  return Double.isInfinite(value) || (Math.abs(value) < 0.001);}  }
class C{  public static void main(String[] args){  final MqttSpyDaemon daemon=new MqttSpyDaemon();  try {    daemon.initialise();    if (args.length == 0) {      logger.warn("!!! Using sample configuration for localhost - to use your own configuration file, specify its location as a parameter !!!");      daemon.loadAndRun("/sample-configuration.xml");    } else     if (args.length != 1) {      logger.error("Expecting only 1 parameter with the configuration file location");      return;    } else {      daemon.loadAndRun(args[0]);    }  } catch (  XMLException e) {    logger.error("Cannot load the daemon's configuration",e);  }catch (  SpyException e) {    logger.error("Error occurred while connecting to broker",e);  }}  }
class C{  public boolean expand(int sparseFeatureSize,int denseFeatureSize,int labelSize,WeightGenerator generator){  boolean b=false;  b|=sparse_weight_vector.expand(labelSize,sparseFeatureSize,generator);  b|=dense_weight_vector.expand(labelSize,denseFeatureSize,generator);  return b;}  }
class C{  private List<Zone> fetchMatchingZones(String recordName){  val fqdnRecord=determineFqdnRecord(recordName);  val listBuilder=new ImmutableList.Builder<Zone>();  dns.listZones().iterateAll().forEachRemaining(null);  return listBuilder.build();}  }
class C{  public static Observations fromSnippets(KindredSnippets[] snippets){  for (  KindredSnippets obj : snippets) {    if (obj instanceof Observations) {      return (Observations)obj;    }  }  return null;}  }
class C{  private Proxy buildProxyFromPacResult(String pacResult){  if (pacResult.trim().length() < 6) {    return Proxy.NO_PROXY;  }  String proxyDef=pacResult.trim();  if (proxyDef.toUpperCase().startsWith(PAC_DIRECT)) {    return Proxy.NO_PROXY;  }  Proxy.Type type=Proxy.Type.HTTP;  if (proxyDef.toUpperCase().startsWith(PAC_SOCKS)) {    type=Proxy.Type.SOCKS;  }  String host=proxyDef.substring(6);  Integer port=ProxyUtil.DEFAULT_PROXY_PORT;  int indexOfPort=host.indexOf(':');  int index2=host.lastIndexOf(']');  if (indexOfPort != -1 && index2 < indexOfPort) {    port=Integer.parseInt(host.substring(indexOfPort + 1).trim());    host=host.substring(0,indexOfPort).trim();  }  SocketAddress adr=InetSocketAddress.createUnresolved(host,port);  return new Proxy(type,adr);}  }
class C{  public LeadsStartQuery(VkApiClient client,UserActor actor,int leadId,String secret){  super(client,"leads.start",Start.class);  accessToken(actor.getAccessToken());  leadId(leadId);  secret(secret);}  }
class C{  @Override public int scanChar() throws IOException {  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int c=fCurrentEntity.ch[fCurrentEntity.position++];  boolean external=false;  if (c == '\n' || ((c == '\r' || c == 0x85 || c == 0x2028) && (external=fCurrentEntity.isExternal()))) {    fCurrentEntity.lineNumber++;    fCurrentEntity.columnNumber=1;    if (fCurrentEntity.position == fCurrentEntity.count) {      fCurrentEntity.ch[0]=(char)c;      load(1,false);    }    if (c == '\r' && external) {      int cc=fCurrentEntity.ch[fCurrentEntity.position++];      if (cc != '\n' && cc != 0x85) {        fCurrentEntity.position--;      }    }    c='\n';  }  fCurrentEntity.columnNumber++;  return c;}  }
class C{  public GenericValue previous(){  try {    if (resultSet.previous()) {      return currentGenericValue();    } else {      return null;    }  } catch (  SQLException e) {    if (!closed) {      try {        this.close();      } catch (      GenericEntityException e1) {        Debug.logError(e1,"Error auto-closing EntityListIterator on error, so info below for more info on original error; close error: " + e1.toString(),module);      }      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GeneralRuntimeException("Error getting the previous result",e);  }catch (  GenericEntityException e) {    if (!closed) {      try {        this.close();      } catch (      GenericEntityException e1) {        Debug.logError(e1,"Error auto-closing EntityListIterator on error, so info below for more info on original error; close error: " + e1.toString(),module);      }      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GeneralRuntimeException("Error creating GenericValue",e);  }}  }
class C{  public boolean isClosePath(){  return m_closed;}  }
class C{  protected FaveRemoveUserQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  public boolean insert_redundant_casts(){  return soot.PhaseOptions.getBoolean(options,"insert-redundant-casts");}  }
class C{  public boolean doFirstLastHaveToBeSame(){  return doFirstLastHaveToBeSame;}  }
class C{  public AemDropdown selectByText(String text){  if (text == null) {    return this;  }  expandDropdown();  getItemByTextEquals(text).click();  return this;}  }
class C{  public UrlSpaceConfigurer primaryBackupListener(ISpaceModeListener primaryBackupListener){  validate();  urlSpaceFactoryBean.setPrimaryBackupListener(primaryBackupListener);  return this;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public WildcardSuperType fullCopy(){  WildcardSuperType tree=(WildcardSuperType)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public Role toEntity(RoleDTO dto,int depth){  if (dto == null) {    return null;  }  Role role=new Role();  role.setId(dto.id);  role.setRoleName(dto.roleName);  if (depth-- > 0) {  }  return role;}  }
class C{  private void compareDictionaryValueFromSortedIndex(List<String> data,Dictionary forwardDictionary){  int expectedSurrogateKey=0;  for (int i=0; i < data.size(); i++) {    expectedSurrogateKey++;    String expectedDictionaryValue=data.get(i);    int actualSurrogateKey=forwardDictionary.getSurrogateKey(expectedDictionaryValue);    assertTrue(actualSurrogateKey == expectedSurrogateKey);    int sortedIndex=forwardDictionary.getSortedIndex(actualSurrogateKey);    String actualDictionaryValue=forwardDictionary.getDictionaryValueFromSortedIndex(sortedIndex);    assertTrue(expectedDictionaryValue.equals(actualDictionaryValue));  }}  }
class C{  public static boolean hasHardwareAddressChanged(final HardwareAddress hardwareAddress,final HardwareAddress oldHardwareAddress){  SimpleTypeReflectionHandler simpleTypeReflectionHandler=new SimpleTypeReflectionHandler();  List<Field> sctHardwareAddressFields=simpleTypeReflectionHandler.getNonTransientSimpleFields(hardwareAddress.getClass());  List<Field> oldSctHardwareAddressFields=simpleTypeReflectionHandler.getNonTransientSimpleFields(oldHardwareAddress.getClass());  int i=0;  for (  Field field : sctHardwareAddressFields) {    try {      Object fieldValue=field.get(hardwareAddress);      Object oldFieldValue=oldSctHardwareAddressFields.get(i);      if (fieldValue == null) {        if (oldFieldValue == null) {          return true;        }      } else       if (!field.get(hardwareAddress).equals(oldSctHardwareAddressFields.get(i))) {        return true;      }    } catch (    Exception e) {      return true;    }    i++;  }  return false;}  }
class C{  public static boolean isPrimitiveWrapperArray(Class clazz){  Assert.notNull(clazz,"Class must not be null");  return (clazz.isArray() && isPrimitiveWrapper(clazz.getComponentType()));}  }
class C{  private void postropheToWords(WordRelation wordRelation,Item tokenItem,String tokenVal){  int index=tokenVal.indexOf('\'');  String bbb=tokenVal.substring(index).toLowerCase();  String[] postrophePhones=postrophes.get(bbb);  if (postrophePhones != null) {    String aaa=tokenVal.substring(0,index);    tokenToWords(wordRelation,tokenItem,aaa);    wordRelation.addWord(tokenItem,bbb);    Item wordItem=wordRelation.getTail();    wordItem.getFeatures().setObject("phones",postrophePhones);  } else {    StringBuilder buffer=new StringBuilder(tokenVal);    buffer.deleteCharAt(index);    tokenToWords(wordRelation,tokenItem,buffer.toString());  }}  }
class C{  public boolean merge_stringbuffer(){  return soot.PhaseOptions.getBoolean(options,"merge-stringbuffer");}  }
class C{  private void checkConfiguration(){  if (configuration == null) {    throw new IllegalStateException(ERROR_NOT_INIT);  }}  }
class C{  public HTTPInputSource(String publicId,String systemId,String baseSystemId){  super(publicId,systemId,baseSystemId);}  }
class C{  void processIntent(Intent intent){  Parcelable[] rawMsgs=intent.getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES);  NdefMessage msg=(NdefMessage)rawMsgs[0];  Match newMatch=SerializationUtils.deserialize(msg.getRecords()[0].getPayload());  Toast.makeText(getApplicationContext(),"NAME : " + newMatch.getTarget().getNickname(),Toast.LENGTH_LONG).show();}  }
class C{  public List<LocalDate> top(int n){  List<LocalDate> top=new ArrayList<>();  int[] values=data.toIntArray();  IntArrays.parallelQuickSort(values,ReverseIntComparator.instance());  for (int i=0; i < n && i < values.length; i++) {    top.add(PackedLocalDate.asLocalDate(values[i]));  }  return top;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public CancelException(String message,File file,int depth){  super(message);  this.file=file;  this.depth=depth;}  }
class C{  public void print(char[] charArray){synchronized (lock) {    try {      appendLocked(charArray,0,charArray.length);    } catch (    IOException e) {    }  }}  }
class C{  private static String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString();}  }
class C{  public List<SootMethod> resolveAbstractDispatch(SootClass c,SootMethod m){  c.checkLevel(SootClass.HIERARCHY);  m.getDeclaringClass().checkLevel(SootClass.HIERARCHY);  checkState();  Set<SootMethod> s=new ArraySet<SootMethod>();  Iterator<SootClass> classesIt=null;  if (c.isInterface()) {    Set<SootClass> classes=new HashSet<SootClass>();    for (    SootClass sootClass : getImplementersOf(c)) {      classes.addAll(getSubclassesOfIncluding(sootClass));    }    classesIt=classes.iterator();  } else   classesIt=getSubclassesOfIncluding(c).iterator();  while (classesIt.hasNext()) {    SootClass cl=classesIt.next();    if (!Modifier.isAbstract(cl.getModifiers())) {      s.add(resolveConcreteDispatch(cl,m));    }  }  return Collections.unmodifiableList(new ArrayList<SootMethod>(s));}  }
class C{  public FastConcurrentSkipListMap(SortedMap<K,? extends V> m){  this.comparator=m.comparator();  initialize();  buildFromSorted(m);}  }
class C{  public void testPerFieldMaxPassages() throws Exception {  deleteAllDocs();  long gen=addDocument("{fields: {body: 'This sentence has test.  This one does not.  Here is test again.', authors: ['This sentence has test.  This one does not.  Here is test again.']}}");  JSONObject result=send("search","{queryText: 'test', retrieveFields: [{field: authors, highlight: snippets, maxPassages: 1}, {field: body, highlight: snippets, maxPassages: 2}], searcher: {indexGen: " + gen + "}}");  assertEquals(1,getInt(result,"totalHits"));  assertEquals(1,getInt(result,"hits[0].fields.authors.length"));  assertEquals("Here is <b>test</b> again.",renderHighlight(getArray(result,"hits[0].fields.authors")));  assertEquals(2,getInt(result,"hits[0].fields.body.length"));  assertEquals("This sentence has <b>test</b>.  ...Here is <b>test</b> again.",renderHighlight(getArray(result,"hits[0].fields.body")));}  }
class C{  @SuppressWarnings(value="unchecked") public LayeredFileSystemConfig(){  masterConfiguration=new CompositeConfiguration();  masterConfiguration.setThrowExceptionOnMissing(true);  runtimeProperties=new Properties();  try {    List<Configuration> userConfig=loader.loadConfigurations(USER_CONFIG_FILE_NAME);    if (userConfig.size() > 1) {      List<Resource> resources=loader.loadResourcesWithName(USER_CONFIG_FILE_NAME).collect(Collectors.toList());      LOG.error(TOO_MANY_USER_CONFIGS.logFormat(resources.toString()));      throw new SystemConfigException(TOO_MANY_USER_CONFIGS.format(resources.size()));    }    List<Configuration> testApplicationConfig=loader.loadConfigurationsNoJars(TEST_CONFIG_FILE_NAME);    List<Configuration> applicationConfig=loader.loadConfigurations(APPLICATION_CONFIG_FILE_NAME);    if (applicationConfig.size() > 1) {      List<Resource> resources=loader.loadResourcesWithName(APPLICATION_CONFIG_FILE_NAME).collect(Collectors.toList());      LOG.error(TOO_MANY_APPLICATION_CONFIGS.logFormat(resources.toString()));      throw new SystemConfigException(TOO_MANY_APPLICATION_CONFIGS.format(resources.size()));    }    Stream.of(Stream.of(new MapConfiguration(runtimeProperties)),Stream.of(new EnvironmentConfiguration()),Stream.of(new SystemConfiguration()),userConfig.stream(),testApplicationConfig.stream(),applicationConfig.stream()).flatMap(Function.identity()).filter(null).forEachOrdered(null);    List<String> dependentModules=(List<String>)masterConfiguration.getList(ConfigurationGraph.DEPENDENT_MODULE_KEY,Collections.<String>emptyList());    new ModuleLoader(loader).getConfigurations(dependentModules).forEach(null);  } catch (  IOException e) {    throw new SystemConfigException(e);  }}  }
class C{  @NotNull public static SnippetObject param(@NotNull Atom atom,int paramIndex){  final KindredSnippets[] snippets=KindredSnippets.fromMetadata(atom.unwrap().klass().entity().getMetadata());  final Field info=atom.getFieldInfo(paramIndex);  final String name=lowerCaseFirstCharacter(info.getDeclared());  return new SnippetObject(atom.getFieldValue(paramIndex),Pathway.param(atom.getName(),name),snippets);}  }
class C{  public static void dropTable(Database db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BANGUMI_CALENDAR\"";  db.execSQL(sql);}  }
class C{  private Map<AccessPath,Set<AccessPath>> computeGlobalAliases(SootMethod method){  Map<AccessPath,Set<AccessPath>> res=new HashMap<AccessPath,Set<AccessPath>>();  for (  Unit u : method.getActiveBody().getUnits()) {    if (!(u instanceof AssignStmt))     continue;    final AssignStmt assign=(AssignStmt)u;    if (!(assign.getLeftOp() instanceof FieldRef && (assign.getRightOp() instanceof FieldRef || assign.getRightOp() instanceof Local)))     if (!(assign.getRightOp() instanceof FieldRef && (assign.getLeftOp() instanceof FieldRef || assign.getLeftOp() instanceof Local)))     continue;    final AccessPath apLeft=new AccessPath(assign.getLeftOp(),true);    final AccessPath apRight=new AccessPath(assign.getRightOp(),true);    Set<AccessPath> mapLeft=res.get(apLeft);    if (mapLeft == null) {      mapLeft=new HashSet<AccessPath>();      res.put(apLeft,mapLeft);    }    mapLeft.add(apRight);    Set<AccessPath> mapRight=res.get(apRight);    if (mapRight == null) {      mapRight=new HashSet<AccessPath>();      res.put(apRight,mapRight);    }    mapLeft.add(apLeft);  }  return res;}  }
class C{  public static void syncImmediately(Context context){  Bundle bundle=new Bundle();  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED,true);  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);  ContentResolver.requestSync(getSyncAccount(context),context.getString(R.string.content_authority),bundle);}  }
class C{  public void writeIntoMARYPTCfile(String ptcFileName) throws IOException {  PitchReaderWriter.write_pitch_file(ptcFileName,this.contour,(float)this.header.windowSizeInSeconds,(float)this.header.skipSizeInSeconds,this.header.fs);}  }
class C{  public static ZooKeeperClientBuilder newBuilder(){  return new ZooKeeperClientBuilder();}  }
class C{  public GlobalRefreshResourceSelectionPage(IResource[] resources){  super(Policy.bind("GlobalRefreshResourceSelectionPage.1"));  this.resources=Arrays.asList(resources);  setDescription(Policy.bind("GlobalRefreshResourceSelectionPage.2"));  setTitle(Policy.bind("GlobalRefreshResourceSelectionPage.3"));  IDialogSettings s=SVNUIPlugin.getPlugin().getDialogSettings();  this.settings=s.getSection(STORE_SECTION);  if (settings == null) {    settings=s.addNewSection(STORE_SECTION);  }}  }
class C{  public void updateCachingAndArtifacts(ParsedDeployment parsedDeployment){  final DmnEngineConfiguration dmnEngineConfiguration=Context.getDmnEngineConfiguration();  DeploymentCache<DecisionTableCacheEntry> decisionTableCache=dmnEngineConfiguration.getDeploymentManager().getDecisionCache();  DmnDeploymentEntity deployment=parsedDeployment.getDeployment();  for (  DecisionTableEntity decisionTable : parsedDeployment.getAllDecisionTables()) {    DmnDefinition dmnDefinition=parsedDeployment.getDmnDefinitionForDecisionTable(decisionTable);    Decision decision=parsedDeployment.getDecisionForDecisionTable(decisionTable);    DecisionTableCacheEntry cacheEntry=new DecisionTableCacheEntry(decisionTable,dmnDefinition,decision);    decisionTableCache.add(decisionTable.getId(),cacheEntry);    deployment.addDeployedArtifact(decisionTable);  }}  }
class C{  public void translate(float xAmount,float yAmount){  x+=xAmount;  y+=yAmount;}  }
class C{  public MessagesSetActivityQuery(VkApiClient client,UserActor actor){  super(client,"messages.setActivity",OkResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public static String createUserFolderIfNotExist(final String Path,final String userId) throws DASTProxyException {  final File userFolder=new File(Path + "/" + userId);  if (!userFolder.exists()) {    final boolean resultOfOperation=userFolder.mkdir();    if (!resultOfOperation) {      throw new DASTProxyException("Unable to create user folder for storing recordings");    }  }  return userFolder.getAbsolutePath();}  }
class C{  public ShrExpr newShrExpr(Value op1,Value op2){  return new JShrExpr(op1,op2);}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  public boolean hasUserAuthorityGroups(){  return userAuthorityGroups != null && !userAuthorityGroups.isEmpty();}  }
class C{  public void put(String key,InputStream stream,String name,String contentType){  if (key != null && stream != null) {    streamParams.put(key,new StreamWrapper(stream,name,contentType));  }}  }
class C{  public static void main(String[] args){  if (args.length != 1) {    System.err.println("Usage: VertxExample <json file>");    System.exit(1);  }  VertxExample example=new VertxExample();  example.parseFile(args[0],null);}  }
class C{  private List<View> addView(View view,List<View> cache){  if (cache == null) {    cache=new LinkedList<View>();  }  cache.add(view);  return cache;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CANNOT_LEAVE_PARTY_DURING_PATH_FLYING(String value0){  return new SM_SYSTEM_MESSAGE(1300047,value0);}  }
class C{  private Properties loadProperties(){  Properties props=new Properties();  File file=new File("DataPartitioner.properties");  FileInputStream fis=null;  try {    if (file.exists()) {      fis=new FileInputStream(file);      props.load(fis);    }  } catch (  Exception e) {    LOGGER.error(e,e.getMessage());  } finally {    if (null != fis) {      try {        fis.close();      } catch (      IOException e) {        LOGGER.error(e,e.getMessage());      }    }  }  return props;}  }
class C{  public boolean remove(int val){  int index=index(val);  if (index >= 0) {    removeAt(index);    return true;  }  return false;}  }
class C{  private void removeTreeNode(DefaultMutableTreeNode nodeToRemove){  if (nodeToRemove != null) {    DefaultMutableTreeNode parent=(DefaultMutableTreeNode)nodeToRemove.getParent();    nodeMap.remove(nodeToRemove.getUserObject());    if (treeModel != null) {      if (parent != null) {        treeModel.removeNodeFromParent(nodeToRemove);        treeModel.nodeChanged(parent);      }    }    if (symbolTree != null) {      symbolTree.setSelectionPath(getPath(parent));    }  }}  }
class C{  public static String calculateMd5(String filePath){  String md5="";  try {    FileInputStream fis=new FileInputStream(new File(filePath));    md5=org.apache.commons.codec.digest.DigestUtils.md5Hex(fis);    fis.close();  } catch (  FileNotFoundException ex) {  }catch (  IOException ex) {  }  return md5;}  }
class C{  @Override protected int isUnchangedByNormalization(XMLString value){  int end=value.offset + value.length;  for (int i=value.offset; i < end; ++i) {    int c=value.ch[i];    if (XMLChar.isSpace(c)) {      return i - value.offset;    }  }  return -1;}  }
class C{  public static <T>void addService(String url,Class<T> serviceInterface,T service) throws RpcException {  addService(url,serviceInterface,service,ServerConfig.DEFAULT_PORT);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PvPZONE_OUT_MESSAGE(String value0){  return new SM_SYSTEM_MESSAGE(1301031,value0);}  }
class C{  @Override @Nullable public Object findTemplateSource(@NotNull String name) throws IOException {  File file=resolveName(name);  TemplateSource templateSource=TemplateSource.open(file);  pushTemplateFolder(file.getParentFile());  return templateSource;}  }
class C{  public void unblock(){  skype.unblock(this);}  }
class C{  @Override public void customize(ConfigurableEmbeddedServletContainer container){  MimeMappings mappings=new MimeMappings(MimeMappings.DEFAULT);  mappings.add("html","text/html;charset=utf-8");  mappings.add("json","text/html;charset=utf-8");  container.setMimeMappings(mappings);  setLocationForStaticAssets(container);}  }
class C{  public Matrix arrayRightDivideEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] / B.A[i][j];    }  }  return this;}  }
class C{  public SurfaceTexture createTexture(){  mProgram=createProgram(VERTEX_SHADER,FRAGMENT_SHADER);  if (mProgram == 0) {    throw new RuntimeException("failed creating program");  }  maPositionHandle=GLES20.glGetAttribLocation(mProgram,"aPosition");  checkGlError("glGetAttribLocation aPosition");  if (maPositionHandle == -1) {    throw new RuntimeException("Could not get attrib location for aPosition");  }  maTextureHandle=GLES20.glGetAttribLocation(mProgram,"aTextureCoord");  checkGlError("glGetAttribLocation aTextureCoord");  if (maTextureHandle == -1) {    throw new RuntimeException("Could not get attrib location for aTextureCoord");  }  muMVPMatrixHandle=GLES20.glGetUniformLocation(mProgram,"uMVPMatrix");  checkGlError("glGetUniformLocation uMVPMatrix");  if (muMVPMatrixHandle == -1) {    throw new RuntimeException("Could not get attrib location for uMVPMatrix");  }  muSTMatrixHandle=GLES20.glGetUniformLocation(mProgram,"uSTMatrix");  checkGlError("glGetUniformLocation uSTMatrix");  if (muSTMatrixHandle == -1) {    throw new RuntimeException("Could not get attrib location for uSTMatrix");  }  int[] textures=new int[1];  GLES20.glGenTextures(1,textures,0);  mTextureID=textures[0];  GLES20.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,mTextureID);  checkGlError("glBindTexture mTextureID");  GLES20.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_NEAREST);  GLES20.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_LINEAR);  GLES20.glTexParameteri(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_WRAP_S,GLES20.GL_CLAMP_TO_EDGE);  GLES20.glTexParameteri(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_WRAP_T,GLES20.GL_CLAMP_TO_EDGE);  checkGlError("glTexParameter");  mSurfaceTexture=new SurfaceTexture(mTextureID);  return mSurfaceTexture;}  }
class C{  public static double absMax(double[] data,int off,int len){  double max=Double.NaN;  for (int i=off; i < off + len; i++) {    if (Double.isNaN(data[i]))     continue;    double abs=Math.abs(data[i]);    if (Double.isNaN(max) || abs > max)     max=abs;  }  return max;}  }
class C{  private static final String toXml(Filter filter){  StringBuilder sb=new StringBuilder();  sb.append("<Filter xsi:type=\"");  if (filter == Filter.DEFAULT_FILTER) {    sb.append("DefaultFilter\" />");  } else   if (filter instanceof CategoryFilter) {    sb.append("CategoryFilter\">");    CategoryFilter cf=(CategoryFilter)filter;    sb.append("<PartOfGroups>");    sb.append(XmlGenerator.toXml((int)cf.getCategory()));    sb.append("</PartOfGroups>");    sb.append("<CollideWithGroups>");    sb.append(XmlGenerator.toXml((int)cf.getMask()));    sb.append("</CollideWithGroups>");    sb.append("</Filter>");  } else {    throw new UnsupportedOperationException(MessageFormat.format(Messages.getString("exception.persist.unknownClass"),filter.getClass().getName()));  }  return sb.toString();}  }
class C{  public boolean displayNotification(){  return true;}  }
class C{  public OrdersGetQuery(VkApiClient client,UserActor actor){  super(client,"orders.get",Utils.buildParametrizedType(List.class,Order.class));  accessToken(actor.getAccessToken());}  }
class C{  public void resolveAllClasses() throws ClassNotFoundException {  for (short i=0; i < this.classFile.getConstantPoolSize(); ++i) {    ClassFile.ConstantPoolInfo cpi=this.classFile.getConstantPoolInfo(i);    if (cpi instanceof ClassFile.ConstantClassInfo) {      this.resolveClass(i);    } else     if (cpi instanceof ClassFile.ConstantNameAndTypeInfo) {      String descriptor=((ClassFile.ConstantNameAndTypeInfo)cpi).getDescriptor(this.classFile);      if (descriptor.charAt(0) == '(') {        MethodDescriptor md=new MethodDescriptor(descriptor);        this.resolveClass(md.returnFd);        for (        String parameterFd : md.parameterFds)         this.resolveClass(parameterFd);      } else {        this.resolveClass(descriptor);      }    }  }}  }
class C{  public static List<Integer> convertToIntegerList(int[] array){  List<Integer> integers=new ArrayList<Integer>();  for (int i=0; i < array.length; i++) {    integers.add(array[i]);  }  return integers;}  }
class C{  public static Object executeScript(String filePath,String functionName,Map<String,Object> context,Object[] args){  try {    if (filePath.endsWith(".groovy")) {      return GroovyUtil.runScriptAtLocation(filePath,functionName,context);    }    return executeScript(filePath,functionName,createScriptContext(context),args);  } catch (  Exception e) {    String errMsg="Error running script at location [" + filePath + "]: "+ e.toString();    Debug.logWarning(e,errMsg,module);    throw new IllegalArgumentException(errMsg,e);  }}  }
class C{  public JSONWriter array() throws JSONException {  if (this.mode == 'i' || this.mode == 'o' || this.mode == 'a') {    this.push(null);    this.append("[");    this.comma=false;    return this;  }  throw new JSONException("Misplaced array.");}  }
class C{  public void writeResponseHeader(String version,ResponseCode code) throws IOException {  if (code == null)   throw new IllegalArgumentException();  writeHeader(version + " " + code.value()+ " "+ code.message());}  }
class C{  public GeoServerWorkspaceNode(FileSystemInterface handler,GeoServerConnection connection,String workspaceName,boolean isStyle){  super(workspaceName);  this.handler=handler;  this.connection=connection;  this.workspaceName=workspaceName;  this.isStyle=isStyle;}  }
class C{  public static double euclideanDistance(double[] p,double[] q){  double ret=0;  for (int i=0; i < p.length; i++) {    double diff=(q[i] - p[i]);    double sq=Math.pow(diff,2);    ret+=sq;  }  return ret;}  }
class C{  public static boolean verifyPermissions(int... grantResults){  if (grantResults.length == 0) {    return false;  }  for (  int result : grantResults) {    if (result != PackageManager.PERMISSION_GRANTED) {      return false;    }  }  return true;}  }
class C{  private static void printUsage(){  System.err.println("Syntax:\nsummaryEvaluator -do=(char|word|all) [-summaryDir=summaries/] [-modelDir=models/]" + "[-wordMin=#] [-wordMax=#] [-wordDist=#] [-charMin=#] [-charMax=#] [-charDist=#] [-o=outFile] [-t=#]" + "[-s] [-use=o|d] [-progress]");  System.err.println("wordMin=#\tMin word n-gram size.\nwordMax=#\tMax word n-gram size.\nwordDist=#\tWord n-gram window\n" + "charMin=#\tMin char n-gram size.\ncharMax=#\tMax char n-gram size.\ncharDist=#\tChar n-gram window.\n" + "o=outFile\tThe file to output data. Default is stdout.\n-t=#\tNumber of threads. Defaults to 2.\n"+ "s\tFor non-verbose output (silent).\n"+ "progress\tFor progress indication (even in silent mode).\n"+ "use=o|d\tUse [o]ccurences or average [d]istance to assign weights to the graph. Defaults to o.\n"+ "-?\tShow this screen.");}  }
class C{  static String[] splitOnTokens(String text){  if (text.indexOf('?') == -1 && text.indexOf('*') == -1) {    return new String[]{text};  }  char[] array=text.toCharArray();  ArrayList<String> list=new ArrayList<String>();  StringBuilder buffer=new StringBuilder();  for (int i=0; i < array.length; i++) {    if (array[i] == '?' || array[i] == '*') {      if (buffer.length() != 0) {        list.add(buffer.toString());        buffer.setLength(0);      }      if (array[i] == '?') {        list.add("?");      } else       if (list.isEmpty() || i > 0 && list.get(list.size() - 1).equals("*") == false) {        list.add("*");      }    } else {      buffer.append(array[i]);    }  }  if (buffer.length() != 0) {    list.add(buffer.toString());  }  return list.toArray(new String[list.size()]);}  }
class C{  protected List<String> parseArgStringFunction(CharSequence argStr) throws ParseException {  List<String> argList=new ArrayList<>();  if (argStr == null) {    return argList;  }  String[] args=argStr.toString().split("\\s+");  for (  String arg : args) {    String[] parts=arg.split("=");    String name=parts[0].trim();    argList.add(name);  }  return argList;}  }
class C{  private boolean containsPhoneDescendants(List<Element> tokensAndBoundaries){  for (  Element element : tokensAndBoundaries) {    if (element.getTagName().equals(MaryXML.TOKEN) && element.getElementsByTagName(MaryXML.PHONE).getLength() > 0) {      return true;    }  }  return false;}  }
class C{  public int allocPage(){  byte[] masterBytes=this.masterPage.readBytes();  IntBuffer ib=ByteBuffer.wrap(masterBytes).asIntBuffer();  int[] pageCounts=new int[ib.capacity()];  ib.get(pageCounts);  Page headerPage=null;  int headerIndex=-1;  for (int i=0; i < numHeaderPages; i++) {    if (pageCounts[i] < Page.pageSize) {      headerPage=getHeadPage(i);      headerIndex=i;      break;    }  }  if (headerPage == null) {    throw new PageException("No free Pages Available");  }  byte[] headerBytes=headerPage.readBytes();  int pageIndex=-1;  for (int i=0; i < Page.pageSize; i++) {    if (headerBytes[i] == 0) {      pageIndex=i;      break;    }  }  if (pageIndex == -1) {    throw new PageException("Header page should have free page but doesnt");  }  int newCount=pageCounts[headerIndex] + 1;  byte[] newCountBytes=ByteBuffer.allocate(4).putInt(newCount).array();  this.masterPage.writeBytes(headerIndex * 4,4,newCountBytes);  headerPage.writeByte(pageIndex,(byte)1);  if (this.durable) {    this.masterPage.flush();    headerPage.flush();  }  int pageNum=headerIndex * Page.pageSize + pageIndex;  fetchPage(pageNum).wipe();  this.numPages+=1;  return pageNum;}  }
class C{  public void sort(final Comparator<? super T> comparator){synchronized (mLock) {    Collections.sort(mList,comparator);  }  notifyDataSetChanged();}  }
class C{  public JSONStringer endObject() throws JSONException {  return close(Scope.EMPTY_OBJECT,Scope.NONEMPTY_OBJECT,"}");}  }
class C{  public void actionPerformed(ActionEvent ev){  String[] methods=new String[]{ClassificationType.Taxonomy.toString(),"SEED","KEGG"};  ClusterViewer viewer=getViewer();  String data=(String)JOptionPane.showInputDialog(getViewer().getFrame(),"Set Data","Set Data",JOptionPane.QUESTION_MESSAGE,ProgramProperties.getProgramIcon(),methods,viewer.getDataType());  if (data != null)   execute("set networkData=" + data + ";");}  }
class C{  public void addLayout(LoadingLayout layout){  if (null != layout) {    mLoadingLayouts.add(layout);  }}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public KeyVal(final T key,final T val){  this.k=key;  this.v=val;}  }
class C{  protected void validateNamespaceOwnership(String property,String cluster,String namespace){  validateNamespaceOwnership(property,cluster,namespace,false,false);}  }
class C{  public ArrayFieldVector(FieldVector<T> v) throws NullArgumentException {  MathUtils.checkNotNull(v);  field=v.getField();  data=MathArrays.buildArray(field,v.getDimension());  for (int i=0; i < data.length; ++i) {    data[i]=v.getEntry(i);  }}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  public void calculateQuantityToSupply(BigDecimal reorderQuantity,BigDecimal minimumStock,ListIterator<GenericValue> listIterIEP){  if (quantity.compareTo(reorderQuantity) < 0) {    quantity=reorderQuantity;  }}  }
class C{  protected void processSwitchBinaryToggleReport(SerialMessage serialMessage,int offset,int endpoint) throws ZWaveSerialMessageException {  int value=serialMessage.getMessagePayloadByte(offset + 1);  logger.debug(String.format("NODE %d: Switch binary toggle report, value = 0x%02X",this.getNode().getNodeId(),value));  ZWaveCommandClassValueEvent zEvent=new ZWaveCommandClassValueEvent(this.getNode().getNodeId(),endpoint,this.getCommandClass(),value);  this.getController().notifyEventListeners(zEvent);}  }
class C{  public final boolean hasIDConstraints(){  return fGlobalIDConstraintDecls.getLength() > 0;}  }
class C{  public static ControlTagCacheObject createTestProcessAlive(){  ControlTagCacheObject cacheObject=new ControlTagCacheObject(new Long(510),"Test process alive tag","Long",DataTagConstants.MODE_TEST);  cacheObject.setDescription("test alive description");  cacheObject.setLogged(false);  cacheObject.setUnit("seconds since 1970");  cacheObject.setDipAddress("testDIPaddress");  cacheObject.setJapcAddress("testJAPCaddress");  cacheObject.setValue(new Long(System.currentTimeMillis()));  cacheObject.setValueDescription("test value description");  cacheObject.setSimulated(false);  cacheObject.setMinValue(Long.MIN_VALUE);  cacheObject.setMaxValue(Long.MAX_VALUE);  cacheObject.setValueDictionary(new DataTagValueDictionary());  cacheObject.setAddress(new DataTagAddress());  cacheObject.setDataTagQuality(createValidQuality());  cacheObject.setCacheTimestamp(new Timestamp(System.currentTimeMillis()));  cacheObject.setDaqTimestamp(new Timestamp(System.currentTimeMillis()));  cacheObject.setSourceTimestamp(new Timestamp(System.currentTimeMillis()));  return cacheObject;}  }
class C{  public void disconnect(){  socket.disconnect();}  }
class C{  public WinHttpCurrentUserIEProxyConfig(){  super();}  }
class C{  protected GroupsIsMemberQueryWithUserIdsExtended groupId(String value){  return unsafeParam("group_id",value);}  }
class C{  public static void shutdown(){  LRMIRuntime.getRuntime().shutdown();}  }
class C{  private void clearInvestigatedIssues(List<FailReferenceResource> issues){  issuesRepository.delete(issues);}  }
class C{  protected PhotosEditCommentQuery commentId(int value){  return unsafeParam("comment_id",value);}  }
class C{  public Zdiagmat(int order){  Parameters.BaseIndexNotChangeable=true;  basex=Parameters.BaseIndex;  this.order=order;  getProperties();  re=new double[n];  im=new double[n];}  }
class C{  public static boolean updateProjectToInstantRunTools(@NotNull Project project,@Nullable GradleSyncListener listener){  String pluginVersion=MINIMUM_GRADLE_PLUGIN_VERSION_STRING;  if (GradleVersion.parse(GRADLE_PLUGIN_RECOMMENDED_VERSION).compareTo(MINIMUM_GRADLE_PLUGIN_VERSION) > 0) {    pluginVersion=GRADLE_PLUGIN_RECOMMENDED_VERSION;  }  if (GradleUtil.updateGradlePluginVersion(project,pluginVersion,GRADLE_LATEST_VERSION)) {    String buildToolsVersion="23.0.2";    AndroidSdkHandler sdk=AndroidSdkUtils.tryToChooseSdkHandler();    BuildToolInfo latestBuildTool=sdk.getLatestBuildTool(new StudioLoggerProgressIndicator(InstantRunConfigurable.class),false);    if (latestBuildTool != null) {      Revision revision=latestBuildTool.getRevision();      if (revision.compareTo(Revision.parseRevision(buildToolsVersion)) > 0) {        buildToolsVersion=revision.toShortString();      }    }    GradleUtil.setBuildToolsVersion(project,buildToolsVersion);    File wrapperPropertiesFile=GradleUtil.findWrapperPropertiesFile(project);    if (wrapperPropertiesFile != null) {      GradleUtil.updateGradleDistributionUrl(project,wrapperPropertiesFile,GRADLE_LATEST_VERSION);    }    GradleProjectImporter.getInstance().syncProjectSynchronously(project,true,listener);    return true;  } else {    return false;  }}  }
class C{  public TObjectHash(){  super();  this._hashingStrategy=this;}  }
class C{  protected void drawZeroLine(Canvas c,float x1,float x2,float y1,float y2){  mZeroLinePaint.setColor(mYAxis.getZeroLineColor());  mZeroLinePaint.setStrokeWidth(mYAxis.getZeroLineWidth());  Path zeroLinePath=new Path();  zeroLinePath.moveTo(x1,y1);  zeroLinePath.lineTo(x2,y2);  c.drawPath(zeroLinePath,mZeroLinePaint);}  }
class C{  public static void logFirstStateExit(PanelState fromState,PanelState toState,StateChangeReason reason){  int code;switch (fromState) {case UNDEFINED:case CLOSED:    code=getStateChangeCode(toState,reason,EXIT_CLOSED_TO_STATE_CHANGE_CODES,EXIT_CLOSED_TO_OTHER);  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchExitClosed",code,EXIT_CLOSED_TO_BOUNDARY);break;case PEEKED:code=getStateChangeCode(toState,reason,EXIT_PEEKED_TO_STATE_CHANGE_CODES,EXIT_PEEKED_TO_OTHER);RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchExitPeeked",code,EXIT_PEEKED_TO_BOUNDARY);break;case EXPANDED:code=getStateChangeCode(toState,reason,EXIT_EXPANDED_TO_STATE_CHANGE_CODES,EXIT_EXPANDED_TO_OTHER);RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchExitExpanded",code,EXIT_EXPANDED_TO_BOUNDARY);break;case MAXIMIZED:code=getStateChangeCode(toState,reason,EXIT_MAXIMIZED_TO_STATE_CHANGE_CODES,EXIT_MAXIMIZED_TO_OTHER);RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchExitMaximized",code,EXIT_MAXIMIZED_TO_BOUNDARY);break;default :break;}}  }
class C{  private void addPathCenteredConnection(ViewTransform transform,Graphics2D g,boolean isSelected,ConnectionDrawing drawing,ColorSet colorSet,ConstraintHandle targetHandle,ConstraintWidget targetWidget){  boolean isVertical=mAnchor.isVerticalAnchor();  int x0=transform.getSwingFX(mX);  int y0=transform.getSwingFY(mY);  int x1=transform.getSwingFX(targetHandle.getDrawX());  int y1=transform.getSwingFY(targetHandle.getDrawY());  if (targetHandle.getAnchor().isConnected()) {    if (isVertical) {      x1=x0 < x1 ? x1 - sConnectionOffset : x1 + sConnectionOffset;    } else {      y1=y0 < y1 ? y1 - sConnectionOffset : y1 + sConnectionOffset;    }  }  drawing.mPath.moveTo(x0,y0);  if (isVertical) {    boolean isTopConnection=targetHandle.getDrawY() < getDrawY();    if (isSelected) {      int start=y0;      int end=y1;      if ((colorSet.alwaysShowMargins() || isSelected) && mAnchor.getMargin() > 0) {        if (isTopConnection) {          end+=transform.getSwingDimensionF(mAnchor.getMargin());        } else {          end-=transform.getSwingDimensionF(mAnchor.getMargin());        }        Color pre=g.getColor();        g.setColor(colorSet.getMargins());        Stroke pres=g.getStroke();        g.setStroke(sSimpleStroke);        ConnectionDraw.drawVerticalMarginIndicator(g,String.valueOf(mAnchor.getMargin()),x0,end,y1);        g.setStroke(pres);        g.setColor(pre);        Shape line=new Line2D.Float(x0 - transform.getSwingDimension(4),end,x0 + transform.getSwingDimension(4),end);        drawing.addShape(line);      }      addVerticalSmallSpring(drawing.mPath,x0,start,end);      Shape line=new Line2D.Float(x0 - transform.getSwingDimension(4),y1,x0 + transform.getSwingDimension(4),y1);      drawing.addShape(line);    } else {      drawing.mPath.lineTo(x0,y1);      if (isTopConnection) {        drawing.setArrow(ConnectionDraw.getTopArrow(),x0,y1);      } else {        drawing.setArrow(ConnectionDraw.getBottomArrow(),x0,y1);      }    }    if (targetWidget != getOwner().getParent()) {      Stroke pre=g.getStroke();      g.setStroke(ConnectionDraw.sDashedStroke);      g.drawLine(x0,y1,x1,y1);      g.setStroke(pre);    }  } else {    boolean isLeftConnection=targetHandle.getDrawX() < getDrawX();    if (isSelected) {      int start=x0;      int end=x1;      if ((colorSet.alwaysShowMargins() || isSelected) && mAnchor.getMargin() > 0) {        if (isLeftConnection) {          end+=transform.getSwingDimensionF(mAnchor.getMargin());        } else {          end-=transform.getSwingDimensionF(mAnchor.getMargin());        }        Color pre=g.getColor();        g.setColor(colorSet.getMargins());        Stroke pres=g.getStroke();        g.setStroke(sSimpleStroke);        ConnectionDraw.drawHorizontalMarginIndicator(g,String.valueOf(mAnchor.getMargin()),end,x1,y0);        g.setStroke(pres);        g.setColor(pre);        g.drawLine(end,y0 - transform.getSwingDimension(4),end,y0 + transform.getSwingDimension(4));      }      addHorizontalSmallSpring(drawing.mPath,y0,start,end);      g.drawLine(x1,y0 - transform.getSwingDimension(4),x1,y0 + transform.getSwingDimension(4));    } else {      drawing.mPath.lineTo(x1,y0);      if (isLeftConnection) {        drawing.setArrow(ConnectionDraw.getLeftArrow(),x1,y0);      } else {        drawing.setArrow(ConnectionDraw.getRightArrow(),x1,y0);      }    }    if (targetWidget != getOwner().getParent()) {      Stroke pre=g.getStroke();      g.setStroke(ConnectionDraw.sDashedStroke);      g.drawLine(x1,y0,x1,y1);      g.setStroke(pre);    }  }}  }
class C{  @NotNull public DescribeImageAction describeImage(int maxCandidates,@NotNull String imageUrl){  return new DescribeImageAction(cognitiveContext,maxCandidates,imageUrl);}  }
class C{  public AppsGetCatalogQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public SubmissionsExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public void addException(Access node){  List<Access> list=(parent == null || state == null) ? getExceptionListNoTransform() : getExceptionList();  list.addChild(node);}  }
class C{  public boolean isFailed(){  return !pokemonHP.isPresent() && !pokemonCP.isPresent();}  }
class C{  @Override public String toString(){  StringBuilder s=new StringBuilder();  if (coefficients[0] == 0.0) {    if (coefficients.length == 1) {      return "0";    }  } else {    s.append(toString(coefficients[0]));  }  for (int i=1; i < coefficients.length; ++i) {    if (coefficients[i] != 0) {      if (s.length() > 0) {        if (coefficients[i] < 0) {          s.append(" - ");        } else {          s.append(" + ");        }      } else {        if (coefficients[i] < 0) {          s.append("-");        }      }      double absAi=FastMath.abs(coefficients[i]);      if ((absAi - 1) != 0) {        s.append(toString(absAi));        s.append(' ');      }      s.append("x");      if (i > 1) {        s.append('^');        s.append(Integer.toString(i));      }    }  }  return s.toString();}  }
class C{  private boolean canAppointRank(Player activePlayer,int targetObjId){  Legion legion=activePlayer.getLegion();  if (!isBrigadeGeneral(activePlayer)) {    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CHANGE_MEMBER_RANK_DONT_HAVE_RIGHT);    return false;  }  if (isSelf(activePlayer,targetObjId)) {    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CHANGE_MASTER_ERROR_SELF);    return false;  } else   if (!legion.isMember(targetObjId)) {    return false;  }  return true;}  }
class C{  private void readObjectNoData() throws InvalidObjectException {  throw new InvalidObjectException("no data");}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public DatabaseGetStreetsByIdQuery(VkApiClient client,UserActor actor,int... streetIds){  super(client,"database.getStreetsById",Utils.buildParametrizedType(List.class,Street.class));  accessToken(actor.getAccessToken());  streetIds(streetIds);}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null) {    return false;  }  if (!getClass().isAssignableFrom(o.getClass())) {    return false;  }  final ImportConflict other=(ImportConflict)o;  if (object != null ? !object.equals(other.object) : other.object != null) {    return false;  }  if (value != null ? !value.equals(other.value) : other.value != null) {    return false;  }  return true;}  }
class C{  @Produces @VenueList @Named(value="venueList") public List<Venue> produceVenues(){  final List<Venue> venues=new ArrayList<>();  try {    venues.add(new VenueJavaOne2016());  } catch (  final MalformedURLException e) {    this.log.log(Level.SEVERE,"Failed to produce a Venue",e);  }  return venues;}  }
class C{  public int propagator(){  String s=soot.PhaseOptions.getString(options,"propagator");  if (s.equalsIgnoreCase("iter"))   return propagator_iter;  if (s.equalsIgnoreCase("worklist"))   return propagator_worklist;  if (s.equalsIgnoreCase("cycle"))   return propagator_cycle;  if (s.equalsIgnoreCase("merge"))   return propagator_merge;  if (s.equalsIgnoreCase("alias"))   return propagator_alias;  if (s.equalsIgnoreCase("none"))   return propagator_none;  throw new RuntimeException("Invalid value " + s + " of phase option propagator");}  }
class C{  public FloatBuffer fillFloatBuffer(FloatBuffer fb,boolean columnMajor){  if (columnMajor) {    fb.put(m00).put(m10).put(m20).put(m30);    fb.put(m01).put(m11).put(m21).put(m31);    fb.put(m02).put(m12).put(m22).put(m32);    fb.put(m03).put(m13).put(m23).put(m33);  } else {    fb.put(m00).put(m01).put(m02).put(m03);    fb.put(m10).put(m11).put(m12).put(m13);    fb.put(m20).put(m21).put(m22).put(m23);    fb.put(m30).put(m31).put(m32).put(m33);  }  return fb;}  }
class C{  @Override public void onAddDataTag(final SourceDataTag sourceDataTag,final ChangeReport changeReport){  DataTagAddress address=sourceDataTag.getAddress();  if (!address.isStaticTimedeadband() && this.equipmentConfiguration.isDynamicTimeDeadbandEnabled()) {switch (address.getPriority()) {case DataTagConstants.PRIORITY_LOW:      this.lowDynamicTimeDeadbandFilterActivator.addDataTag(sourceDataTag);    changeReport.appendInfo("Data tag " + sourceDataTag.getId() + " added to low priority filter.");  break;case DataTagConstants.PRIORITY_MEDIUM:this.medDynamicTimeDeadbandFilterActivator.addDataTag(sourceDataTag);changeReport.appendInfo("Data tag " + sourceDataTag.getId() + " added to medium priority filter.");break;default :changeReport.appendInfo("Data tag " + sourceDataTag.getId() + " not added to any filter.");}}}  }
class C{  public AionClientPacket clonePacket(){  try {    return (AionClientPacket)super.clone();  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  private void loadAudioFile(String file) throws IllegalArgumentException, SecurityException, IllegalStateException, IOException {  if (this.isStreaming(file)) {    this.player.setDataSource(file);    this.player.setAudioStreamType(AudioManager.STREAM_MUSIC);    this.setMode(MODE.PLAY);    this.setState(STATE.MEDIA_STARTING);    this.player.setOnPreparedListener(this);    this.player.prepareAsync();  } else {    if (file.startsWith("/android_asset/")) {      String f=file.substring(15);      android.content.res.AssetFileDescriptor fd=this.handler.cordova.getActivity().getAssets().openFd(f);      this.player.setDataSource(fd.getFileDescriptor(),fd.getStartOffset(),fd.getLength());    } else {      File fp=new File(file);      if (fp.exists()) {        FileInputStream fileInputStream=new FileInputStream(file);        this.player.setDataSource(fileInputStream.getFD());        fileInputStream.close();      } else {        this.player.setDataSource(Environment.getExternalStorageDirectory().getPath() + "/" + file);      }    }    this.setState(STATE.MEDIA_STARTING);    this.player.setOnPreparedListener(this);    this.player.prepare();    this.duration=getDurationInSeconds();  }}  }
class C{  public static ActivityOptionsCompatICS makeCustomAnimation(Context context,int enterResId,int exitResId){  ActivityOptionsCompatICS opts=new ActivityOptionsCompatICS();  opts.mAnimationType=ANIM_CUSTOM;  opts.mCustomEnterResId=enterResId;  opts.mCustomExitResId=exitResId;  return opts;}  }
class C{  public static JFrame showTableWindow(Table t){  JPrefuseTable table=new JPrefuseTable(t);  String title=t.toString();  if (t instanceof VisualTable) {    title=((VisualTable)t).getGroup() + " " + title;  }  JFrame frame=new JFrame(title);  frame.getContentPane().add(new JScrollPane(table));  frame.pack();  frame.setVisible(true);  return frame;}  }
class C{  private List<DavaFlowSet<T>> copyDavaFlowSetList(List<DavaFlowSet<T>> currentList,List<DavaFlowSet<T>> temp){  Iterator<DavaFlowSet<T>> tempIt=temp.iterator();  while (tempIt.hasNext()) {    DavaFlowSet<T> check=tempIt.next();    Iterator<DavaFlowSet<T>> currentListIt=currentList.iterator();    boolean found=false;    while (currentListIt.hasNext()) {      DavaFlowSet<T> currentSet=currentListIt.next();      if (check.equals(currentSet) && check.internalDataMatchesTo(currentSet)) {        found=true;        break;      }    }    if (!found) {      currentList.add(check);    }  }  return currentList;}  }
class C{  public boolean isTrue(String key){  return options.containsKey(key) && Boolean.parseBoolean(options.get(key));}  }
class C{  public StreamSource(String systemId){  this.systemId=systemId;}  }
class C{  private Path generateFilledPath(ILineDataSet dataSet,int from,int to){  float fillMin=dataSet.getFillFormatter().getFillLinePosition(dataSet,mChart);  float phaseX=Math.max(0.f,Math.min(1.f,mAnimator.getPhaseX()));  float phaseY=mAnimator.getPhaseY();  final boolean isDrawSteppedEnabled=dataSet.isDrawSteppedEnabled();  Path filled=new Path();  Entry entry=dataSet.getEntryForIndex(from);  filled.moveTo(entry.getXIndex(),fillMin);  filled.lineTo(entry.getXIndex(),entry.getVal() * phaseY);  for (int x=from + 1, count=(int)Math.ceil((to - from) * phaseX + from); x < count; x++) {    Entry e=dataSet.getEntryForIndex(x);    if (isDrawSteppedEnabled) {      final Entry ePrev=dataSet.getEntryForIndex(x - 1);      if (ePrev == null)       continue;      filled.lineTo(e.getXIndex(),ePrev.getVal() * phaseY);    }    filled.lineTo(e.getXIndex(),e.getVal() * phaseY);  }  filled.lineTo(dataSet.getEntryForIndex(Math.max(Math.min((int)Math.ceil((to - from) * phaseX + from) - 1,dataSet.getEntryCount() - 1),0)).getXIndex(),fillMin);  filled.close();  return filled;}  }
class C{  public boolean handleExceptionFromServer(Writer writer,Reader reader,Throwable ex){  if (ex instanceof ClosedChannelException) {    if (_logger.isLoggable(Level.FINE))     _logger.log(Level.FINE,"Connection with client closed from [" + writer.getEndPointAddress() + "] endpoint.");    return true;  }  if (ex instanceof MarshalContextClearedException) {    if (_logger.isLoggable(Level.FINE))     _logger.log(Level.FINE,"Marshal context have been cleared, probably because the exported service class loader has been unloaded, service incoming invocation from [" + writer.getEndPointAddress() + "] endpoint.");    return true;  }  try {    String msg="LRMI Transport Protocol caught server exception caused by [" + writer.getEndPointAddress() + "] client.";    if (ex instanceof LRMIUnhandledException) {      if (_logger.isLoggable(Level.FINE))       _logger.log(Level.FINE,msg,ex);      LRMIUnhandledException lrmiue=(LRMIUnhandledException)ex;      if (lrmiue.getStage() == Stage.DESERIALIZATION) {        reader.resetContext();      }      if (writer.isOpen())       writer.writeReply(new ReplyPacket(null,lrmiue));      return false;    } else     if (ex instanceof RuntimeException || ex instanceof InvalidClassException) {      if (_logger.isLoggable(Level.SEVERE))       _logger.log(Level.SEVERE,msg,ex);    } else     if (ex instanceof UnmarshalException) {      if (_logger.isLoggable(Level.WARNING))       _logger.log(Level.WARNING,msg,ex);    } else {      if (_logger.isLoggable(Level.FINE))       _logger.log(Level.FINE,msg,ex);    }    if (writer.isOpen())     writer.writeReply(new ReplyPacket(null,new ProtocolException(msg,ex)));    return true;  } catch (  Exception ex2) {    if (_logger.isLoggable(Level.FINE))     _logger.log(Level.FINE,"Failed to send handledServerException to endpoint [" + writer.getEndPointAddress() + "] , the client disconnected from the server.",ex);    return true;  }}  }
class C{  public static String delete(String inString,String pattern){  return replace(inString,pattern,"");}  }
class C{  public int writeAnnotationsDirectory(AnnotationsDirectory annotationsDirectory){  int off=data.position();  writeInt(annotationsDirectory.classAnnotationsOffset);  writeInt(annotationsDirectory.fieldAnnotations.length);  writeInt(annotationsDirectory.methodAnnotations.length);  writeInt(annotationsDirectory.parameterAnnotations.length);  for (  int[] fieldAnnotation : annotationsDirectory.fieldAnnotations) {    writeInt(fieldAnnotation[0]);    writeInt(fieldAnnotation[1]);  }  for (  int[] methodAnnotation : annotationsDirectory.methodAnnotations) {    writeInt(methodAnnotation[0]);    writeInt(methodAnnotation[1]);  }  for (  int[] parameterAnnotation : annotationsDirectory.parameterAnnotations) {    writeInt(parameterAnnotation[0]);    writeInt(parameterAnnotation[1]);  }  return off;}  }
class C{  @Override public Object oneTransition(QName curElem,int[] state,SubstitutionGroupHandler subGroupHandler){  int curState=state[0];  if (curState == XSCMValidator.FIRST_ERROR || curState == XSCMValidator.SUBSEQUENT_ERROR) {    if (curState == XSCMValidator.FIRST_ERROR)     state[0]=XSCMValidator.SUBSEQUENT_ERROR;    return findMatchingDecl(curElem,subGroupHandler);  }  int nextState=0;  int elemIndex=0;  Object matchingDecl=null;  for (; elemIndex < fElemMapSize; elemIndex++) {    nextState=fTransTable[curState][elemIndex];    if (nextState == -1)     continue;    int type=fElemMapType[elemIndex];    if (type == XSParticleDecl.PARTICLE_ELEMENT) {      matchingDecl=subGroupHandler.getMatchingElemDecl(curElem,(XSElementDecl)fElemMap[elemIndex]);      if (matchingDecl != null) {        break;      }    } else     if (type == XSParticleDecl.PARTICLE_WILDCARD) {      if (((XSWildcardDecl)fElemMap[elemIndex]).allowNamespace(curElem.uri)) {        matchingDecl=fElemMap[elemIndex];        break;      }    }  }  if (elemIndex == fElemMapSize) {    state[1]=state[0];    state[0]=XSCMValidator.FIRST_ERROR;    return findMatchingDecl(curElem,subGroupHandler);  }  if (fCountingStates != null) {    Occurence o=fCountingStates[curState];    if (o != null) {      if (curState == nextState) {        if (++state[2] > o.maxOccurs && o.maxOccurs != SchemaSymbols.OCCURRENCE_UNBOUNDED) {          return findMatchingDecl(curElem,state,subGroupHandler,elemIndex);        }      } else       if (state[2] < o.minOccurs) {        state[1]=state[0];        state[0]=XSCMValidator.FIRST_ERROR;        return findMatchingDecl(curElem,subGroupHandler);      } else {        o=fCountingStates[nextState];        if (o != null) {          state[2]=(elemIndex == o.elemIndex) ? 1 : 0;        }      }    } else {      o=fCountingStates[nextState];      if (o != null) {        state[2]=(elemIndex == o.elemIndex) ? 1 : 0;      }    }  }  state[0]=nextState;  return matchingDecl;}  }
class C{  protected AbstractFormat(final NumberFormat numeratorFormat,final NumberFormat denominatorFormat){  MathUtils.checkNotNull(numeratorFormat,LocalizedCoreFormats.NUMERATOR_FORMAT);  MathUtils.checkNotNull(denominatorFormat,LocalizedCoreFormats.DENOMINATOR_FORMAT);  this.numeratorFormat=numeratorFormat;  this.denominatorFormat=denominatorFormat;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_OTHER_HOSTILE_PARRY(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1250218,value0,value1);}  }
class C{  public UserDataAccessException(){  super();}  }
class C{  public static Entity loadByUri(String uri){  return load(uri);}  }
class C{  public Credential(String accessToken,String refreshToken,long expirationTimeMillis){  this.accessToken=accessToken;  this.refreshToken=refreshToken;  this.expirationTimeMillis=expirationTimeMillis;}  }
class C{  private void populateValue(FieldConfigInteger spinner,ColorMapEntry colorMapEntry){  if (spinner == null) {    return;  }  if (colorMapEntry == null) {    return;  }  int quantity=1;  Expression quantityExpression=colorMapEntry.getQuantity();  if (quantityExpression != null) {    Object quantityValue=((LiteralExpressionImpl)quantityExpression).getValue();    if (quantityValue instanceof Integer) {      quantity=((Integer)quantityValue).intValue();    } else     if (quantityValue instanceof Double) {      quantity=((Double)quantityValue).intValue();    } else     if (quantityValue instanceof String) {      quantity=Integer.valueOf((String)quantityValue);    }  }  spinner.populateField(quantity);}  }
class C{  public PhotoOverlapAppBarBehavior(Context context,AttributeSet attrs){  super(context,attrs);}  }
class C{  public ScreenshotEvent(BufferedImage image,File screenshotFile){  this.image=image;  this.screenshotFile=screenshotFile;}  }
class C{  default String individualEntityName(IRI individualIri){  return "e" + fromIri(individualIri);}  }
class C{  @Override public ExecutionEntity createChildExecution(ExecutionEntity parentExecutionEntity){  ExecutionEntity childExecution=executionDataManager.create();  inheritCommonProperties(parentExecutionEntity,childExecution);  childExecution.setParent(parentExecutionEntity);  childExecution.setProcessDefinitionId(parentExecutionEntity.getProcessDefinitionId());  childExecution.setProcessDefinitionKey(parentExecutionEntity.getProcessDefinitionKey());  childExecution.setProcessInstanceId(parentExecutionEntity.getProcessInstanceId() != null ? parentExecutionEntity.getProcessInstanceId() : parentExecutionEntity.getId());  childExecution.setScope(false);  parentExecutionEntity.addChildExecution(childExecution);  insert(childExecution,false);  if (logger.isDebugEnabled()) {    logger.debug("Child execution {} created with parent {}",childExecution,parentExecutionEntity.getId());  }  if (getEventDispatcher().isEnabled()) {    getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_CREATED,childExecution));    getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_INITIALIZED,childExecution));  }  return childExecution;}  }
class C{  protected void actionPerformed(GuiButton par1GuiButton){  if (par1GuiButton.id == ID_GENERIC_DONE) {    for (int i=0; i < 12; i++) {      String c=((GuiQuickCommandsList.CommandEntry)this.guiList.getListEntry(i)).txt.getText();      mc.vrSettings.vrQuickCommands[i]=c;    }    this.guivrSettings.saveOptions();    this.mc.displayGuiScreen(this.parentGuiScreen);  } else   if (par1GuiButton.id == ID_GENERIC_DEFAULTS) {    mc.vrSettings.vrQuickCommands=mc.vrSettings.getQuickCommandsDefaults();    this.initGui();  }}  }
class C{  public ASBSetCursor queryASBSets(){  return mHelper.queryASBSets();}  }
class C{  public void refresh(){  refresh(null,false);}  }
class C{  public DefaultGigaMap(IMap map,TransactionProvider txProvider,ExceptionTranslator exTranslator,int defaultIsolationLevel){  this.map=map;  this.lockManager=new LockManager(map);  this.txProvider=txProvider;  this.exTranslator=exTranslator;switch (defaultIsolationLevel) {case TransactionDefinition.ISOLATION_DEFAULT:    this.defaultIsolationLevel=ReadModifiers.REPEATABLE_READ;  break;case TransactionDefinition.ISOLATION_READ_UNCOMMITTED:this.defaultIsolationLevel=ReadModifiers.DIRTY_READ;break;case TransactionDefinition.ISOLATION_READ_COMMITTED:this.defaultIsolationLevel=ReadModifiers.READ_COMMITTED;break;case TransactionDefinition.ISOLATION_REPEATABLE_READ:this.defaultIsolationLevel=ReadModifiers.REPEATABLE_READ;break;case TransactionDefinition.ISOLATION_SERIALIZABLE:throw new IllegalArgumentException("GigaMap does not support serializable isolation level");}}  }
class C{  public String missingMergeTipText(){  return "Distribute counts for missing values. Counts are distributed " + "across other values in proportion to their frequency. Otherwise, " + "missing is treated as a separate value.";}  }
class C{  public void damageEntity(float x,float y,float damage){  for (  TexturedEntity entity : entities) {    if (entity instanceof LivingEntity && entity.getBounds().overlaps(new Rectangle(x,y,0,0))) {      ((LivingEntity)entity).damage(damage);      break;    }  }}  }
class C{  public IdQuery(String typeName,Object id){  this(typeName,id,null,QueryResultType.DEFAULT,0);}  }
class C{  public static Document parseDocument(String inputData,boolean validating) throws ParserConfigurationException, SAXException, IOException {  return parseDocument(new StringReader(inputData),validating);}  }
class C{  private static int rootDistance(ConstraintWidget widget){  int rootHeight=widget.getParent().getHeight();  int rootWidth=widget.getParent().getWidth();  int aX=widget.getX();  int aY=widget.getY();  int aWidth=widget.getWidth();  int aHeight=widget.getHeight();  int minx=Math.min(aX,rootWidth - (aX + aWidth));  int miny=Math.min(aY,rootHeight - (aY + aHeight));  return Math.min(minx,miny);}  }
class C{  public boolean isLocked(){  return m_locked;}  }
class C{  public static void addPosTag(soot.tagkit.Host host,int sc,int ec){  host.addTag(new soot.tagkit.SourcePositionTag(sc,ec));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_BAN_HIM(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300980,value0,value1);}  }
class C{  public void decreaseCount(long decreaseCount){  if (decreaseCount < count) {    this.count=count - decreaseCount;  }}  }
class C{  public static String childElementValue(Element element,String childElementName,String defaultValue){  if (element == null)   return defaultValue;  Element childElement=firstChildElement(element,childElementName);  String elementValue=elementValue(childElement);  if (UtilValidate.isEmpty(elementValue))   return defaultValue; else   return elementValue;}  }
class C{  @Override public AudioInputStream reSynthesize(int backchannelNumber,AudioFileFormat aft) throws SynthesisException {  return synthesize(backchannelNumber,aft);}  }
class C{  @Override protected void createOrUpgradeTable(SQLiteDatabase db,boolean force){  mDb=db;  for (  TableModel tableModel : getAllTableModels()) {    mTableModel=tableModel;    mTableModelDB=getTableModelFromDB(tableModel.getTableName());    upgradeTable();  }}  }
class C{  public void deny(PermissionFlag flag,Identity<?> identity){  deny(flag,identity,defaultMessage);}  }
class C{  @Override public boolean accept(File file,String name){  return !filter.accept(file,name);}  }
class C{  private void ensureDataConformance(final double[] x,final double[] y) throws MathIllegalArgumentException, NullArgumentException {  if (x == null || y == null) {    throw new NullArgumentException();  }  if (x.length == 0 || y.length == 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NO_DATA);  }}  }
class C{  public static boolean isCardMatch(String cardType,String cardNumberPassed){  if (isEmpty(cardType))   return defaultEmptyOK;  if (isEmpty(cardNumberPassed))   return defaultEmptyOK;  String cardNumber=stripCharsInBag(cardNumberPassed,creditCardDelimiters);  if (("CCT_VISA".equalsIgnoreCase(cardType)) && (isVisa(cardNumber)))   return true;  if (("CCT_MASTERCARD".equalsIgnoreCase(cardType)) && (isMasterCard(cardNumber)))   return true;  if ((("CCT_AMERICANEXPRESS".equalsIgnoreCase(cardType)) || ("CCT_AMEX".equalsIgnoreCase(cardType))) && (isAmericanExpress(cardNumber)))   return true;  if (("CCT_DISCOVER".equalsIgnoreCase(cardType)) && (isDiscover(cardNumber)))   return true;  if (("CCT_JCB".equalsIgnoreCase(cardType)) && (isJCB(cardNumber)))   return true;  if ((("CCT_DINERSCLUB".equalsIgnoreCase(cardType)) || ("CCT_DINERS".equalsIgnoreCase(cardType))) && (isDinersClub(cardNumber)))   return true;  if (("CCT_CARTEBLANCHE".equalsIgnoreCase(cardType)) && (isCarteBlanche(cardNumber)))   return true;  if (("CCT_ENROUTE".equalsIgnoreCase(cardType)) && (isEnRoute(cardNumber)))   return true;  if (("CCT_SOLO".equalsIgnoreCase(cardType)) && (isSolo(cardNumber)))   return true;  if (("CCT_SWITCH".equalsIgnoreCase(cardType)) && (isswitch(cardNumber)))   return true;  if (("CCT_VISAELECTRON".equalsIgnoreCase(cardType)) && (isVisaElectron(cardNumber)))   return true;  return false;}  }
class C{  protected void resetHeaderHeight(){  int height=mHeaderView.getVisiableHeight();  System.out.println("height = " + height);  System.out.println("mHeadViewHeight = " + mHeaderViewHeight);  if (height == 0)   return;  if (mPullRefreshing && height <= mHeaderViewHeight) {    return;  }  int finalHeight=0;  if (mPullRefreshing && height > mHeaderViewHeight) {    finalHeight=mHeaderViewHeight;  }  Log.d("xlistview","resetHeaderHeight-->" + (finalHeight - height));  mScrollBack=SCROLLBACK_HEADER;  mScroller.startScroll(0,height,0,finalHeight - height,SCROLL_DURATION);  invalidate();}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("select what=none;");}  }
class C{  public static SecretKeys generateKeyFromPassword(String password,String salt) throws GeneralSecurityException {  return generateKeyFromPassword(password,Base64.decode(salt,BASE64_FLAGS));}  }
class C{  public boolean isRoot(OCFile file){  return file == null || (file.isFolder() && file.getParentId() == FileDataStorageManager.ROOT_PARENT_ID);}  }
class C{  public static long smpteTimecodeToMilliSeconds(String tc,String unitsInSecStr){  BigFraction unitsInSec=parseEditRate(unitsInSecStr);  return smpteTimecodeToMilliSeconds(tc,unitsInSec);}  }
class C{  @Override public void close(){  ss.close();}  }
class C{  @NotNull public ObjectProperty<ActionBarIconGenerator.Theme> theme(){  return myTheme;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIND_POS_TOO_FAR_FROM_NPC_DEV(String value0,String value2,String value1){  return new SM_SYSTEM_MESSAGE(1400549,value0,value2,value1);}  }
class C{  public static double roundDouble(double value,int afterDecimalPoint){  double mask=Math.pow(10.0,(double)afterDecimalPoint);  return (double)(Math.round(value * mask)) / mask;}  }
class C{  public int indexOf(short value){  return indexOf(0,value);}  }
class C{  public AuthTest(){  setResponseLogLengthLimit(500);}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  NewsChannelTableDao.dropTable(db,ifExists);}  }
class C{  @Override public LSParser createLSParser(short mode,String schemaType) throws DOMException {  if (mode != DOMImplementationLS.MODE_SYNCHRONOUS || (schemaType != null && !"http://www.w3.org/2001/XMLSchema".equals(schemaType) && !"http://www.w3.org/TR/REC-xml".equals(schemaType))) {    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_SUPPORTED_ERR",null);    throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);  }  if (schemaType != null && schemaType.equals("http://www.w3.org/TR/REC-xml")) {    return new DOMParserImpl("mf.org.apache.xerces.parsers.DTDConfiguration",schemaType);  } else {    return new DOMParserImpl("mf.org.apache.xerces.parsers.XIncludeAwareParserConfiguration",schemaType);  }}  }
class C{  @BeforeClass public void init(){  if (userName.equals("usernameXYZ123456")) {    userName=appProperties.getProperty("user-name");  }  if (password.equals("passwordXYZ123456")) {    password=appProperties.getProperty("password");  }  if (userEmail.equals("mail@example.org")) {    userEmail=appProperties.getProperty("user-email");  }  userLastName=appProperties.getProperty("user-lastname");  experiment=ExperimentFactory.createExperiment();}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ProcATK_Instant_ME_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200543,num0,skilltarget,skillname);}  }
class C{  public Builder stepTitleTextColor(int stepTitleTextColor){  this.stepTitleTextColor=stepTitleTextColor;  return this;}  }
class C{  @Override public Schema transform(Schema inputSchema){  Schema.Builder newSchema=new Schema.Builder();  for (int i=0; i < inputSchema.numColumns(); i++) {    if (inputSchema.getType(i) == ColumnType.String) {      newSchema.addColumnDouble(inputSchema.getMetaData(i).getName());    } else     newSchema.addColumn(inputSchema.getMetaData(i));  }  return newSchema.build();}  }
class C{  private void saveAllSLDToFolder(File destinationFolder,boolean saveExternalResources){  SLDWriterInterface sldWriter=SLDWriterFactory.createWriter(null);  if (!destinationFolder.exists()) {    destinationFolder.mkdirs();  }  logger.info(Localisation.getString(SaveSLDTool.class,"SaveSLDTool.saveAllSLD"));  boolean yesToAll=false;  for (  SLDDataInterface sldData : sldDataList) {    StyledLayerDescriptor sld=SLDUtils.createSLDFromString(sldData);    String layerName=sldData.getLayerName();    if (sld != null) {      String sldString=sldWriter.encodeSLD(sldData.getResourceLocator(),sld);      String sldFilename=layerName + ExternalFilenames.addFileExtensionSeparator(SLDEditorFile.getSLDFileExtension());      File fileToSave=new File(destinationFolder,sldFilename);      ConsoleManager.getInstance().information(this,Localisation.getField(SaveSLDTool.class,"SaveSLDTool.savingSLDr") + " " + layerName);      BufferedWriter out;      try {        out=new BufferedWriter(new FileWriter(fileToSave));        out.write(sldString);        out.close();      } catch (      IOException e) {        ConsoleManager.getInstance().exception(this,e);      }      if (saveExternalResources) {        List<String> externalImageList=SLDExternalImages.getExternalImages(sldData.getResourceLocator(),sld);        for (        String externalImage : externalImageList) {          File output=new File(destinationFolder,externalImage);          File parentFolder=output.getParentFile();          if (!parentFolder.exists()) {            if (output.getParentFile().mkdirs()) {              ConsoleManager.getInstance().error(this,Localisation.getField(SaveSLDTool.class,"SaveSLDTool.error1") + output.getAbsolutePath());            }          }          if (parentFolder.exists()) {            boolean writeOutputFile=true;            if (output.exists()) {              if (!yesToAll) {                Object[] options={"Yes to All","Yes","No"};                int n=JOptionPane.showOptionDialog(Controller.getInstance().getFrame(),"Overwrite destination file?\n" + output.getAbsolutePath(),"Desintation file exists",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[2]);switch (n) {case 0:                  yesToAll=true;                break;case 1:              break;case 2:default :            writeOutputFile=false;          break;      }    }  }  if (writeOutputFile) {    try {      URL input=DataUtilities.extendURL(sldData.getResourceLocator(),externalImage);      URLConnection connection=input.openConnection();      InputStream inputStream=connection.getInputStream();      BufferedReader in=new BufferedReader(new InputStreamReader(inputStream));      byte[] buffer=new byte[BUFFER_SIZE];      int n=-1;      FileOutputStream outputStream=new FileOutputStream(output);      while ((n=inputStream.read(buffer)) != -1) {        outputStream.write(buffer,0,n);      }      in.close();      outputStream.close();      ConsoleManager.getInstance().information(this,Localisation.getField(SaveSLDTool.class,"SaveSLDTool.savingExternalImage") + " " + externalImage);    } catch (    MalformedURLException e) {      ConsoleManager.getInstance().exception(this,e);    }catch (    IOException e) {      ConsoleManager.getInstance().exception(this,e);    }  }}}}}}}  }
class C{  public ToggleViewActionGroup(@NotNull List<ToggleViewAction> actions){  myActions=actions;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_LIMIT_SALE_TEST_DESC04(String value0){  return new SM_SYSTEM_MESSAGE(1400391,value0);}  }
class C{  private void resetInfoDialogue(){  inputBox.setVisibility(View.VISIBLE);  extendedEvolutionSpinner.setSelection(-1);  resultsBox.setVisibility(View.GONE);  allPossibilitiesBox.setVisibility(View.GONE);}  }
class C{  public long remove(short key){  long prev=(long)0;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  public void parseFile(String fileName){  System.out.println("Parsing file " + fileName + "...");  File fTmp=new File(fileName);  if (fTmp.isFile())   baseDir=fTmp.getParent();  String currentLine;  try {    BufferedReader in=new BufferedReader(new FileReader(fileName));    while ((currentLine=in.readLine()) != null) {      this.numberOfClusters++;      String[] splitted=currentLine.split("\\s");      String key=splitted[splitted.length - 2] + " " + splitted[splitted.length - 1];      TreeSet docSet=new TreeSet();      for (int i=0; i < splitted.length - 3; i++)       docSet.add(splitted[i]);      if (this.clusters.containsKey(key)) {        LinkedList currentList=(LinkedList)this.clusters.get(key);        currentList.add(docSet);        this.clusters.put(key,currentList);      } else {        LinkedList list=new LinkedList();        list.add(docSet);        this.clusters.put(key,list);      }    }    in.close();    System.out.println("Parsing of file completed.");  } catch (  FileNotFoundException ex) {    ex.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public HTMLWriter(boolean omitXHTMLNamespace){  nsSupport=new NamespaceSupport();  prefixTable=new Hashtable<>();  forcedDeclTable=new Hashtable<>();  doneDeclTable=new Hashtable<>();  outputProperties=new Properties();  setOutputProperty(METHOD,"html");  setOutputProperty(OMIT_XML_DECLARATION,"yes");  mOmitXHTMLNamespace=omitXHTMLNamespace;  mIgnoredTags=new Stack<>();}  }
class C{  private Object readResolve(){  return LazyHolder.INSTANCE;}  }
class C{  public void init(SpaceEngine engine){  ArrayList<FilterHolder>[][] tempFilterConstruction=new ArrayList[FilterOperationCodes.MAX_FILTER_OPERATION_CODES][];  List<FilterProvider> internalFilterProviders=engine.getInternalFilters();  if (internalFilterProviders != null)   for (  FilterProvider filterProvider : internalFilterProviders)   add(filterProvider,tempFilterConstruction);  extract_filters(engine.getConfigReader(),tempFilterConstruction);  if (_space.getURL() != null) {    FilterProvider[] urlFilterProviders=(FilterProvider[])_space.getURL().getCustomProperties().get(FILTER_PROVIDERS);    if (urlFilterProviders != null)     for (    FilterProvider filterProvider : urlFilterProviders)     add(filterProvider,tempFilterConstruction);  }  for (int i=0; i < tempFilterConstruction.length; i++) {    final ArrayList<FilterHolder>[] allPrioritiesFilters=tempFilterConstruction[i];    if (allPrioritiesFilters != null) {      final FilterHolder[][] filterHolders=new FilterHolder[MAX_FILTER_PRIORITIES][];      for (int j=0; j < allPrioritiesFilters.length; j++) {        final ArrayList<FilterHolder> specificPriorityFilter=allPrioritiesFilters[j];        if (specificPriorityFilter != null)         filterHolders[j]=specificPriorityFilter.toArray(new FilterHolder[0]);      }      _filters[i]=new PrioritySpaceFiltersHolder(filterHolders);    }  }}  }
class C{  private static void checkManageUsersPermission(String message){  final int uid=VBinder.getCallingUid();  if (uid != VirtualCore.get().myUid()) {    throw new SecurityException("You need MANAGE_USERS permission to: " + message);  }}  }
class C{  public static ComponentMeta metaByType(String type){  if (null == type) {    return null;  }  List<RegistryEntry> list=entries.stream().filter(null).collect(Collectors.toList());  if (list.isEmpty()) {    return null;  }  return list.get(0).componentMeta;}  }
class C{  private boolean satisfiesFilters(Set<JobRowFilter> jobRowFilters,JobRow jobRow) throws IllegalArgumentException {  return jobRowFilters.stream().allMatch(null);}  }
class C{  @Override public void end(@SwingCoordinate int x,@SwingCoordinate int y,@InputEventMask int modifiers,boolean canceled){  super.end(x,y,modifiers,canceled);  ConstraintModel model=ConstraintModel.getConstraintModel(myScreenView.getModel());  if (canceled) {    model.rollbackXml();    return;  }  final int ax=Coordinates.getAndroidX(myScreenView,x);  final int ay=Coordinates.getAndroidY(myScreenView,y);  DrawConstraintModel drawConstraintModel=ConstraintModel.getDrawConstraintModel(myScreenView);  drawConstraintModel.updateModifiers(modifiers);  drawConstraintModel.mouseReleased(ax,ay);  model.saveToXML(false);  myScreenView.getSurface().repaint();}  }
class C{  public void endDocument(){}  }
class C{  public void onProcessConfiguration(){  LOGGER.info("onProcessConfiguration - Configuration");  LOGGER.info("{}",this.processConnectionRequest);  String xmlProcessConfigurationResponse=this.supervisionManager.onProcessConfiguration(this.processConfigurationRequest);  assertNotNull(xmlProcessConfigurationResponse);  LOGGER.info(xmlProcessConfigurationResponse);  try {    this.processConfigurationResponse=(ProcessConfigurationResponse)this.xmlConverter.fromXml(xmlProcessConfigurationResponse);  } catch (  Exception e) {    LOGGER.error(e.toString());  }  assertNotNull(this.processConfigurationResponse);  LOGGER.info(this.processConfigurationResponse.toString());}  }
class C{  public void removeAddendum(String word,String partOfSpeech){  addenda.remove(word + fixPartOfSpeech(partOfSpeech));}  }
class C{  public GroupSizeFunction(){}  }
class C{  public Builder stepSubtitleTextColor(int stepSubtitleTextColor){  this.stepSubtitleTextColor=stepSubtitleTextColor;  return this;}  }
class C{  @Override public void touchMeAvatar(Activity a){  if (!AuthManager.getInstance().isAuthorized()) {    Intent intent=new Intent(a,LoginActivity.class);    a.startActivity(intent);    a.overridePendingTransition(R.anim.activity_in,0);  } else   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    Intent intent=new Intent(a,MeActivity.class);    NavigationView nav=(NavigationView)a.findViewById(R.id.activity_main_navView);    View header=nav.getHeaderView(0);    ActivityOptionsCompat options=ActivityOptionsCompat.makeSceneTransitionAnimation(a,Pair.create(header.findViewById(R.id.container_nav_header_avatar),a.getString(R.string.transition_me_avatar)));    ActivityCompat.startActivity(a,intent,options.toBundle());  } else {    Intent intent=new Intent(a,MeActivity.class);    a.startActivity(intent);    a.overridePendingTransition(R.anim.activity_in,0);  }}  }
class C{  public DatagramOverlapDoubleDataSource(Datagram[][] datagrams,Datagram[] rightContexts){  super((DoubleDataSource)null);  this.datagrams=datagrams;  this.rightContexts=rightContexts;  dataLength=0;  for (int i=0; i < datagrams.length; i++) {    for (int j=0; j < datagrams[i].length; j++) {      dataLength+=datagrams[i][j].getDuration();    }  }  p=0;  q=0;}  }
class C{  public boolean isApplicable(){  AlignmentViewer viewer=(AlignmentViewer)getViewer();  return viewer.getAlignment().getLength() > 0;}  }
class C{  private LocusInfo createNextUncoveredLocusInfo(final Locus stopBeforeLocus){  while (lastReferenceSequence <= stopBeforeLocus.getSequenceIndex() && lastReferenceSequence <= referenceSequenceMask.getMaxSequenceIndex()) {    if (lastReferenceSequence == stopBeforeLocus.getSequenceIndex() && lastPosition + 1 >= stopBeforeLocus.getPosition()) {      return null;    }    final int nextbit=referenceSequenceMask.nextPosition(lastReferenceSequence,lastPosition);    if (nextbit == -1) {      if (lastReferenceSequence == stopBeforeLocus.getSequenceIndex()) {        lastPosition=stopBeforeLocus.getPosition();        return null;      }      lastReferenceSequence++;      lastPosition=0;    } else     if (lastReferenceSequence < stopBeforeLocus.getSequenceIndex() || nextbit < stopBeforeLocus.getPosition()) {      lastPosition=nextbit;      return new LocusInfo(getReferenceSequence(lastReferenceSequence),lastPosition);    } else     if (nextbit >= stopBeforeLocus.getPosition()) {      return null;    }  }  return null;}  }
class C{  public void updateSymbol(RasterSymbolizer rasterSymbolizer){  for (  VendorOptionInterface vendorOption : vendorOptionList) {    boolean displayVendorOption=VendorOptionManager.getInstance().isAllowed(vendorOptionVersionsList,vendorOption.getVendorOption());    if (displayVendorOption) {      vendorOption.updateSymbol(rasterSymbolizer);    }  }}  }
class C{  public ConstantRealDistribution(double value){  this.value=value;}  }
class C{  private double bobyqb(double[] lowerBound,double[] upperBound){  printMethod();  final int n=currentBest.getDimension();  final int npt=numberOfInterpolationPoints;  final int np=n + 1;  final int nptm=npt - np;  final int nh=n * np / 2;  final ArrayRealVector work1=new ArrayRealVector(n);  final ArrayRealVector work2=new ArrayRealVector(npt);  final ArrayRealVector work3=new ArrayRealVector(npt);  double cauchy=Double.NaN;  double alpha=Double.NaN;  double dsq=Double.NaN;  double crvmin=Double.NaN;  trustRegionCenterInterpolationPointIndex=0;  prelim(lowerBound,upperBound);  double xoptsq=ZERO;  for (int i=0; i < n; i++) {    trustRegionCenterOffset.setEntry(i,interpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex,i));    final double deltaOne=trustRegionCenterOffset.getEntry(i);    xoptsq+=deltaOne * deltaOne;  }  double fsave=fAtInterpolationPoints.getEntry(0);  final int kbase=0;  int ntrits=0;  int itest=0;  int knew=0;  int nfsav=getEvaluations();  double rho=initialTrustRegionRadius;  double delta=rho;  double diffa=ZERO;  double diffb=ZERO;  double diffc=ZERO;  double f=ZERO;  double beta=ZERO;  double adelt=ZERO;  double denom=ZERO;  double ratio=ZERO;  double dnorm=ZERO;  double scaden=ZERO;  double biglsq=ZERO;  double distsq=ZERO;  int state=20;  for (; ; ) {switch (state) {case 20:{        printState(20);        if (trustRegionCenterInterpolationPointIndex != kbase) {          int ih=0;          for (int j=0; j < n; j++) {            for (int i=0; i <= j; i++) {              if (i < j) {                gradientAtTrustRegionCenter.setEntry(j,gradientAtTrustRegionCenter.getEntry(j) + modelSecondDerivativesValues.getEntry(ih) * trustRegionCenterOffset.getEntry(i));              }              gradientAtTrustRegionCenter.setEntry(i,gradientAtTrustRegionCenter.getEntry(i) + modelSecondDerivativesValues.getEntry(ih) * trustRegionCenterOffset.getEntry(j));              ih++;            }          }          if (getEvaluations() > npt) {            for (int k=0; k < npt; k++) {              double temp=ZERO;              for (int j=0; j < n; j++) {                temp+=interpolationPoints.getEntry(k,j) * trustRegionCenterOffset.getEntry(j);              }              temp*=modelSecondDerivativesParameters.getEntry(k);              for (int i=0; i < n; i++) {                gradientAtTrustRegionCenter.setEntry(i,gradientAtTrustRegionCenter.getEntry(i) + temp * interpolationPoints.getEntry(k,i));              }            }          }        }      }case 60:{      printState(60);      final ArrayRealVector gnew=new ArrayRealVector(n);      final ArrayRealVector xbdi=new ArrayRealVector(n);      final ArrayRealVector s=new ArrayRealVector(n);      final ArrayRealVector hs=new ArrayRealVector(n);      final ArrayRealVector hred=new ArrayRealVector(n);      final double[] dsqCrvmin=trsbox(delta,gnew,xbdi,s,hs,hred);      dsq=dsqCrvmin[0];      crvmin=dsqCrvmin[1];      double deltaOne=delta;      double deltaTwo=FastMath.sqrt(dsq);      dnorm=FastMath.min(deltaOne,deltaTwo);      if (dnorm < HALF * rho) {        ntrits=-1;        deltaOne=TEN * rho;        distsq=deltaOne * deltaOne;        if (getEvaluations() <= nfsav + 2) {          state=650;          break;        }        deltaOne=FastMath.max(diffa,diffb);        final double errbig=FastMath.max(deltaOne,diffc);        final double frhosq=rho * ONE_OVER_EIGHT * rho;        if (crvmin > ZERO && errbig > frhosq * crvmin) {          state=650;          break;        }        final double bdtol=errbig / rho;        for (int j=0; j < n; j++) {          double bdtest=bdtol;          if (newPoint.getEntry(j) == lowerDifference.getEntry(j)) {            bdtest=work1.getEntry(j);          }          if (newPoint.getEntry(j) == upperDifference.getEntry(j)) {            bdtest=-work1.getEntry(j);          }          if (bdtest < bdtol) {            double curv=modelSecondDerivativesValues.getEntry((j + j * j) / 2);            for (int k=0; k < npt; k++) {              final double d1=interpolationPoints.getEntry(k,j);              curv+=modelSecondDerivativesParameters.getEntry(k) * (d1 * d1);            }            bdtest+=HALF * curv * rho;            if (bdtest < bdtol) {              state=650;              break;            }          }        }        state=680;        break;      }      ++ntrits;    }case 90:{    printState(90);    if (dsq <= xoptsq * ONE_OVER_A_THOUSAND) {      final double fracsq=xoptsq * ONE_OVER_FOUR;      double sumpq=ZERO;      for (int k=0; k < npt; k++) {        sumpq+=modelSecondDerivativesParameters.getEntry(k);        double sum=-HALF * xoptsq;        for (int i=0; i < n; i++) {          sum+=interpolationPoints.getEntry(k,i) * trustRegionCenterOffset.getEntry(i);        }        work2.setEntry(k,sum);        final double temp=fracsq - HALF * sum;        for (int i=0; i < n; i++) {          work1.setEntry(i,bMatrix.getEntry(k,i));          lagrangeValuesAtNewPoint.setEntry(i,sum * interpolationPoints.getEntry(k,i) + temp * trustRegionCenterOffset.getEntry(i));          final int ip=npt + i;          for (int j=0; j <= i; j++) {            bMatrix.setEntry(ip,j,bMatrix.getEntry(ip,j) + work1.getEntry(i) * lagrangeValuesAtNewPoint.getEntry(j) + lagrangeValuesAtNewPoint.getEntry(i) * work1.getEntry(j));          }        }      }      for (int m=0; m < nptm; m++) {        double sumz=ZERO;        double sumw=ZERO;        for (int k=0; k < npt; k++) {          sumz+=zMatrix.getEntry(k,m);          lagrangeValuesAtNewPoint.setEntry(k,work2.getEntry(k) * zMatrix.getEntry(k,m));          sumw+=lagrangeValuesAtNewPoint.getEntry(k);        }        for (int j=0; j < n; j++) {          double sum=(fracsq * sumz - HALF * sumw) * trustRegionCenterOffset.getEntry(j);          for (int k=0; k < npt; k++) {            sum+=lagrangeValuesAtNewPoint.getEntry(k) * interpolationPoints.getEntry(k,j);          }          work1.setEntry(j,sum);          for (int k=0; k < npt; k++) {            bMatrix.setEntry(k,j,bMatrix.getEntry(k,j) + sum * zMatrix.getEntry(k,m));          }        }        for (int i=0; i < n; i++) {          final int ip=i + npt;          final double temp=work1.getEntry(i);          for (int j=0; j <= i; j++) {            bMatrix.setEntry(ip,j,bMatrix.getEntry(ip,j) + temp * work1.getEntry(j));          }        }      }      int ih=0;      for (int j=0; j < n; j++) {        work1.setEntry(j,-HALF * sumpq * trustRegionCenterOffset.getEntry(j));        for (int k=0; k < npt; k++) {          work1.setEntry(j,work1.getEntry(j) + modelSecondDerivativesParameters.getEntry(k) * interpolationPoints.getEntry(k,j));          interpolationPoints.setEntry(k,j,interpolationPoints.getEntry(k,j) - trustRegionCenterOffset.getEntry(j));        }        for (int i=0; i <= j; i++) {          modelSecondDerivativesValues.setEntry(ih,modelSecondDerivativesValues.getEntry(ih) + work1.getEntry(i) * trustRegionCenterOffset.getEntry(j) + trustRegionCenterOffset.getEntry(i) * work1.getEntry(j));          bMatrix.setEntry(npt + i,j,bMatrix.getEntry(npt + j,i));          ih++;        }      }      for (int i=0; i < n; i++) {        originShift.setEntry(i,originShift.getEntry(i) + trustRegionCenterOffset.getEntry(i));        newPoint.setEntry(i,newPoint.getEntry(i) - trustRegionCenterOffset.getEntry(i));        lowerDifference.setEntry(i,lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i));        upperDifference.setEntry(i,upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i));        trustRegionCenterOffset.setEntry(i,ZERO);      }      xoptsq=ZERO;    }    if (ntrits == 0) {      state=210;      break;    }    state=230;    break;  }case 210:{  printState(210);  final double[] alphaCauchy=altmov(knew,adelt);  alpha=alphaCauchy[0];  cauchy=alphaCauchy[1];  for (int i=0; i < n; i++) {    trialStepPoint.setEntry(i,newPoint.getEntry(i) - trustRegionCenterOffset.getEntry(i));  }}case 230:{printState(230);for (int k=0; k < npt; k++) {  double suma=ZERO;  double sumb=ZERO;  double sum=ZERO;  for (int j=0; j < n; j++) {    suma+=interpolationPoints.getEntry(k,j) * trialStepPoint.getEntry(j);    sumb+=interpolationPoints.getEntry(k,j) * trustRegionCenterOffset.getEntry(j);    sum+=bMatrix.getEntry(k,j) * trialStepPoint.getEntry(j);  }  work3.setEntry(k,suma * (HALF * suma + sumb));  lagrangeValuesAtNewPoint.setEntry(k,sum);  work2.setEntry(k,suma);}beta=ZERO;for (int m=0; m < nptm; m++) {  double sum=ZERO;  for (int k=0; k < npt; k++) {    sum+=zMatrix.getEntry(k,m) * work3.getEntry(k);  }  beta-=sum * sum;  for (int k=0; k < npt; k++) {    lagrangeValuesAtNewPoint.setEntry(k,lagrangeValuesAtNewPoint.getEntry(k) + sum * zMatrix.getEntry(k,m));  }}dsq=ZERO;double bsum=ZERO;double dx=ZERO;for (int j=0; j < n; j++) {  final double d1=trialStepPoint.getEntry(j);  dsq+=d1 * d1;  double sum=ZERO;  for (int k=0; k < npt; k++) {    sum+=work3.getEntry(k) * bMatrix.getEntry(k,j);  }  bsum+=sum * trialStepPoint.getEntry(j);  final int jp=npt + j;  for (int i=0; i < n; i++) {    sum+=bMatrix.getEntry(jp,i) * trialStepPoint.getEntry(i);  }  lagrangeValuesAtNewPoint.setEntry(jp,sum);  bsum+=sum * trialStepPoint.getEntry(j);  dx+=trialStepPoint.getEntry(j) * trustRegionCenterOffset.getEntry(j);}beta=dx * dx + dsq * (xoptsq + dx + dx+ HALF * dsq) + beta - bsum;lagrangeValuesAtNewPoint.setEntry(trustRegionCenterInterpolationPointIndex,lagrangeValuesAtNewPoint.getEntry(trustRegionCenterInterpolationPointIndex) + ONE);if (ntrits == 0) {  final double d1=lagrangeValuesAtNewPoint.getEntry(knew);  denom=d1 * d1 + alpha * beta;  if (denom < cauchy && cauchy > ZERO) {    for (int i=0; i < n; i++) {      newPoint.setEntry(i,alternativeNewPoint.getEntry(i));      trialStepPoint.setEntry(i,newPoint.getEntry(i) - trustRegionCenterOffset.getEntry(i));    }    cauchy=ZERO;    state=230;    break;  }} else {  final double delsq=delta * delta;  scaden=ZERO;  biglsq=ZERO;  knew=0;  for (int k=0; k < npt; k++) {    if (k == trustRegionCenterInterpolationPointIndex) {      continue;    }    double hdiag=ZERO;    for (int m=0; m < nptm; m++) {      final double d1=zMatrix.getEntry(k,m);      hdiag+=d1 * d1;    }    final double d2=lagrangeValuesAtNewPoint.getEntry(k);    final double den=beta * hdiag + d2 * d2;    distsq=ZERO;    for (int j=0; j < n; j++) {      final double d3=interpolationPoints.getEntry(k,j) - trustRegionCenterOffset.getEntry(j);      distsq+=d3 * d3;    }    final double d4=distsq / delsq;    final double temp=FastMath.max(ONE,d4 * d4);    if (temp * den > scaden) {      scaden=temp * den;      knew=k;      denom=den;    }    final double d5=lagrangeValuesAtNewPoint.getEntry(k);    biglsq=FastMath.max(biglsq,temp * (d5 * d5));  }}}case 360:{printState(360);for (int i=0; i < n; i++) {final double d3=lowerBound[i];final double d4=originShift.getEntry(i) + newPoint.getEntry(i);final double d1=FastMath.max(d3,d4);final double d2=upperBound[i];currentBest.setEntry(i,FastMath.min(d1,d2));if (newPoint.getEntry(i) == lowerDifference.getEntry(i)) {  currentBest.setEntry(i,lowerBound[i]);}if (newPoint.getEntry(i) == upperDifference.getEntry(i)) {  currentBest.setEntry(i,upperBound[i]);}}f=computeObjectiveValue(currentBest.toArray());if (!isMinimize) {f=-f;}if (ntrits == -1) {fsave=f;state=720;break;}final double fopt=fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex);double vquad=ZERO;int ih=0;for (int j=0; j < n; j++) {vquad+=trialStepPoint.getEntry(j) * gradientAtTrustRegionCenter.getEntry(j);for (int i=0; i <= j; i++) {  double temp=trialStepPoint.getEntry(i) * trialStepPoint.getEntry(j);  if (i == j) {    temp*=HALF;  }  vquad+=modelSecondDerivativesValues.getEntry(ih) * temp;  ih++;}}for (int k=0; k < npt; k++) {final double d1=work2.getEntry(k);final double d2=d1 * d1;vquad+=HALF * modelSecondDerivativesParameters.getEntry(k) * d2;}final double diff=f - fopt - vquad;diffc=diffb;diffb=diffa;diffa=FastMath.abs(diff);if (dnorm > rho) {nfsav=getEvaluations();}if (ntrits > 0) {if (vquad >= ZERO) {  throw new MathIllegalStateException(LocalizedOptimFormats.TRUST_REGION_STEP_FAILED,vquad);}ratio=(f - fopt) / vquad;final double hDelta=HALF * delta;if (ratio <= ONE_OVER_TEN) {  delta=FastMath.min(hDelta,dnorm);} else if (ratio <= .7) {  delta=FastMath.max(hDelta,dnorm);} else {  delta=FastMath.max(hDelta,2 * dnorm);}if (delta <= rho * 1.5) {  delta=rho;}if (f < fopt) {  final int ksav=knew;  final double densav=denom;  final double delsq=delta * delta;  scaden=ZERO;  biglsq=ZERO;  knew=0;  for (int k=0; k < npt; k++) {    double hdiag=ZERO;    for (int m=0; m < nptm; m++) {      final double d1=zMatrix.getEntry(k,m);      hdiag+=d1 * d1;    }    final double d1=lagrangeValuesAtNewPoint.getEntry(k);    final double den=beta * hdiag + d1 * d1;    distsq=ZERO;    for (int j=0; j < n; j++) {      final double d2=interpolationPoints.getEntry(k,j) - newPoint.getEntry(j);      distsq+=d2 * d2;    }    final double d3=distsq / delsq;    final double temp=FastMath.max(ONE,d3 * d3);    if (temp * den > scaden) {      scaden=temp * den;      knew=k;      denom=den;    }    final double d4=lagrangeValuesAtNewPoint.getEntry(k);    final double d5=temp * (d4 * d4);    biglsq=FastMath.max(biglsq,d5);  }  if (scaden <= HALF * biglsq) {    knew=ksav;    denom=densav;  }}}update(beta,denom,knew);ih=0;final double pqold=modelSecondDerivativesParameters.getEntry(knew);modelSecondDerivativesParameters.setEntry(knew,ZERO);for (int i=0; i < n; i++) {final double temp=pqold * interpolationPoints.getEntry(knew,i);for (int j=0; j <= i; j++) {  modelSecondDerivativesValues.setEntry(ih,modelSecondDerivativesValues.getEntry(ih) + temp * interpolationPoints.getEntry(knew,j));  ih++;}}for (int m=0; m < nptm; m++) {final double temp=diff * zMatrix.getEntry(knew,m);for (int k=0; k < npt; k++) {  modelSecondDerivativesParameters.setEntry(k,modelSecondDerivativesParameters.getEntry(k) + temp * zMatrix.getEntry(k,m));}}fAtInterpolationPoints.setEntry(knew,f);for (int i=0; i < n; i++) {interpolationPoints.setEntry(knew,i,newPoint.getEntry(i));work1.setEntry(i,bMatrix.getEntry(knew,i));}for (int k=0; k < npt; k++) {double suma=ZERO;for (int m=0; m < nptm; m++) {  suma+=zMatrix.getEntry(knew,m) * zMatrix.getEntry(k,m);}double sumb=ZERO;for (int j=0; j < n; j++) {  sumb+=interpolationPoints.getEntry(k,j) * trustRegionCenterOffset.getEntry(j);}final double temp=suma * sumb;for (int i=0; i < n; i++) {  work1.setEntry(i,work1.getEntry(i) + temp * interpolationPoints.getEntry(k,i));}}for (int i=0; i < n; i++) {gradientAtTrustRegionCenter.setEntry(i,gradientAtTrustRegionCenter.getEntry(i) + diff * work1.getEntry(i));}if (f < fopt) {trustRegionCenterInterpolationPointIndex=knew;xoptsq=ZERO;ih=0;for (int j=0; j < n; j++) {  trustRegionCenterOffset.setEntry(j,newPoint.getEntry(j));  final double d1=trustRegionCenterOffset.getEntry(j);  xoptsq+=d1 * d1;  for (int i=0; i <= j; i++) {    if (i < j) {      gradientAtTrustRegionCenter.setEntry(j,gradientAtTrustRegionCenter.getEntry(j) + modelSecondDerivativesValues.getEntry(ih) * trialStepPoint.getEntry(i));    }    gradientAtTrustRegionCenter.setEntry(i,gradientAtTrustRegionCenter.getEntry(i) + modelSecondDerivativesValues.getEntry(ih) * trialStepPoint.getEntry(j));    ih++;  }}for (int k=0; k < npt; k++) {  double temp=ZERO;  for (int j=0; j < n; j++) {    temp+=interpolationPoints.getEntry(k,j) * trialStepPoint.getEntry(j);  }  temp*=modelSecondDerivativesParameters.getEntry(k);  for (int i=0; i < n; i++) {    gradientAtTrustRegionCenter.setEntry(i,gradientAtTrustRegionCenter.getEntry(i) + temp * interpolationPoints.getEntry(k,i));  }}}if (ntrits > 0) {for (int k=0; k < npt; k++) {  lagrangeValuesAtNewPoint.setEntry(k,fAtInterpolationPoints.getEntry(k) - fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex));  work3.setEntry(k,ZERO);}for (int j=0; j < nptm; j++) {  double sum=ZERO;  for (int k=0; k < npt; k++) {    sum+=zMatrix.getEntry(k,j) * lagrangeValuesAtNewPoint.getEntry(k);  }  for (int k=0; k < npt; k++) {    work3.setEntry(k,work3.getEntry(k) + sum * zMatrix.getEntry(k,j));  }}for (int k=0; k < npt; k++) {  double sum=ZERO;  for (int j=0; j < n; j++) {    sum+=interpolationPoints.getEntry(k,j) * trustRegionCenterOffset.getEntry(j);  }  work2.setEntry(k,work3.getEntry(k));  work3.setEntry(k,sum * work3.getEntry(k));}double gqsq=ZERO;double gisq=ZERO;for (int i=0; i < n; i++) {  double sum=ZERO;  for (int k=0; k < npt; k++) {    sum+=bMatrix.getEntry(k,i) * lagrangeValuesAtNewPoint.getEntry(k) + interpolationPoints.getEntry(k,i) * work3.getEntry(k);  }  if (trustRegionCenterOffset.getEntry(i) == lowerDifference.getEntry(i)) {    final double d1=FastMath.min(ZERO,gradientAtTrustRegionCenter.getEntry(i));    gqsq+=d1 * d1;    final double d2=FastMath.min(ZERO,sum);    gisq+=d2 * d2;  } else   if (trustRegionCenterOffset.getEntry(i) == upperDifference.getEntry(i)) {    final double d1=FastMath.max(ZERO,gradientAtTrustRegionCenter.getEntry(i));    gqsq+=d1 * d1;    final double d2=FastMath.max(ZERO,sum);    gisq+=d2 * d2;  } else {    final double d1=gradientAtTrustRegionCenter.getEntry(i);    gqsq+=d1 * d1;    gisq+=sum * sum;  }  lagrangeValuesAtNewPoint.setEntry(npt + i,sum);}++itest;if (gqsq < TEN * gisq) {  itest=0;}if (itest >= 3) {  for (int i=0, max=FastMath.max(npt,nh); i < max; i++) {    if (i < n) {      gradientAtTrustRegionCenter.setEntry(i,lagrangeValuesAtNewPoint.getEntry(npt + i));    }    if (i < npt) {      modelSecondDerivativesParameters.setEntry(i,work2.getEntry(i));    }    if (i < nh) {      modelSecondDerivativesValues.setEntry(i,ZERO);    }    itest=0;  }}}if (ntrits == 0) {state=60;break;}if (f <= fopt + ONE_OVER_TEN * vquad) {state=60;break;}final double d1=TWO * delta;final double d2=TEN * rho;distsq=FastMath.max(d1 * d1,d2 * d2);}case 650:{printState(650);knew=-1;for (int k=0; k < npt; k++) {double sum=ZERO;for (int j=0; j < n; j++) {final double d1=interpolationPoints.getEntry(k,j) - trustRegionCenterOffset.getEntry(j);sum+=d1 * d1;}if (sum > distsq) {knew=k;distsq=sum;}}if (knew >= 0) {final double dist=FastMath.sqrt(distsq);if (ntrits == -1) {delta=FastMath.min(ONE_OVER_TEN * delta,HALF * dist);if (delta <= rho * 1.5) {  delta=rho;}}ntrits=0;final double d1=FastMath.min(ONE_OVER_TEN * dist,delta);adelt=FastMath.max(d1,rho);dsq=adelt * adelt;state=90;break;}if (ntrits == -1) {state=680;break;}if (ratio > ZERO) {state=60;break;}if (FastMath.max(delta,dnorm) > rho) {state=60;break;}}case 680:{printState(680);if (rho > stoppingTrustRegionRadius) {delta=HALF * rho;ratio=rho / stoppingTrustRegionRadius;if (ratio <= SIXTEEN) {rho=stoppingTrustRegionRadius;} else if (ratio <= TWO_HUNDRED_FIFTY) {rho=FastMath.sqrt(ratio) * stoppingTrustRegionRadius;} else {rho*=ONE_OVER_TEN;}delta=FastMath.max(delta,rho);ntrits=0;nfsav=getEvaluations();state=60;break;}if (ntrits == -1) {state=360;break;}}case 720:{printState(720);if (fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex) <= fsave) {for (int i=0; i < n; i++) {final double d3=lowerBound[i];final double d4=originShift.getEntry(i) + trustRegionCenterOffset.getEntry(i);final double d1=FastMath.max(d3,d4);final double d2=upperBound[i];currentBest.setEntry(i,FastMath.min(d1,d2));if (trustRegionCenterOffset.getEntry(i) == lowerDifference.getEntry(i)) {currentBest.setEntry(i,lowerBound[i]);}if (trustRegionCenterOffset.getEntry(i) == upperDifference.getEntry(i)) {currentBest.setEntry(i,upperBound[i]);}}f=fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex);}return f;}default :{throw new MathIllegalStateException(LocalizedCoreFormats.SIMPLE_MESSAGE,"bobyqb");}}}}  }
class C{  public void calculateClassicMDS(ProgressListener progress) throws CanceledException {  progress.setSubtask("Eigenvalue decomposition");  progress.setProgress(-1);  progress.setMaximum(-1);  loadingVectorsBiPlot.clear();  loadingVectorsTriPlot.clear();  final Matrix centered=Utilities.computeDoubleCenteringOfSquaredMatrix(matrixD);  final EigenvalueDecomposition eigenValueDecomposition=centered.eig();  final Matrix eigenVectors=eigenValueDecomposition.getV();  numberOfPositiveEigenValues=0;  final Matrix positiveEigenValues=eigenValueDecomposition.getD();  for (int i=0; i < rank; i++) {    if (positiveEigenValues.get(i,i) > 0.00000001)     numberOfPositiveEigenValues++; else     positiveEigenValues.set(i,i,0);  }  progress.setSubtask("Calculating PCoA");  progress.setProgress(0);  progress.setMaximum(2 * rank);  final Matrix scaledEigenVectors=(Matrix)eigenVectors.clone();  for (int i=0; i < rank; i++) {    for (int j=0; j < rank; j++) {      double v=scaledEigenVectors.get(i,j);      v=v * Math.sqrt(positiveEigenValues.get(j,j));      scaledEigenVectors.set(i,j,v);    }    progress.incrementProgress();  }  System.err.println("numberOfPositiveEigenValues: " + numberOfPositiveEigenValues);  int[] indices=Utilities.sortValues(positiveEigenValues);  eigenValues=new double[numberOfPositiveEigenValues];  percentExplained=new double[numberOfPositiveEigenValues];  double total=0;  for (int j=0; j < numberOfPositiveEigenValues; j++) {    total+=eigenValues[j]=positiveEigenValues.get(indices[j],indices[j]);  }  System.err.println("Positive eigenvalues:");  System.err.println(Basic.toString("%.8f",eigenValues,", "));  if (total > 0) {    for (int j=0; j < eigenValues.length; j++) {      percentExplained[j]=100.0 * eigenValues[j] / total;    }  }  System.err.println("Percent explained:");  System.err.println(Basic.toString("%.1f%%",percentExplained,", "));  for (int i=0; i < rank; i++) {    String name=samples.getLabel(i + 1);    double[] vector=new double[numberOfPositiveEigenValues];    sampleName2Point.put(name,vector);    for (int j=0; j < numberOfPositiveEigenValues; j++) {      vector[j]=scaledEigenVectors.get(i,indices[j]);    }    points[i]=vector;    progress.incrementProgress();  }  done=true;}  }
class C{  public boolean isColumnar(int colGroup){  return columnarStore[colGroup];}  }
class C{  public static int nullSafeHashCode(boolean[] array){  if (array == null) {    return 0;  }  int hash=INITIAL_HASH;  int arraySize=array.length;  for (int i=0; i < arraySize; i++) {    hash=MULTIPLIER * hash + hashCode(array[i]);  }  return hash;}  }
class C{  @Override public synchronized void keepAlive(long leaseId,EtcdLeaseHandler etcdLeaseHandler){  if (!this.keepAlives.containsKey(leaseId)) {    Lease lease=new Lease(leaseId,etcdLeaseHandler);    long now=System.currentTimeMillis();    lease.setNextKeepAlive(now).setDeadLine(now + firstKeepAliveTimeOut);    this.keepAlives.put(leaseId,lease);  }}  }
class C{  public boolean contains(double x,double y,double w,double h){  return false;}  }
class C{  public static boolean initDebug(){  return StaticHelper.initOpenCV(false);}  }
class C{  public static Label createIndentedLabel(Composite parent,String text,int indent){  Label label=new Label(parent,SWT.LEFT);  label.setText(text);  GridData data=new GridData();  data.horizontalSpan=1;  data.horizontalAlignment=GridData.FILL;  data.horizontalIndent=indent;  label.setLayoutData(data);  return label;}  }
class C{  @Override public double evaluate(final double[] values,final int begin,final int length) throws MathIllegalArgumentException {  double sumSq=Double.NaN;  if (MathArrays.verifyValues(values,begin,length,true)) {    sumSq=0.0;    for (int i=begin; i < begin + length; i++) {      sumSq+=values[i] * values[i];    }  }  return sumSq;}  }
class C{  public boolean mayAlias(Value val1,Value val2){  if (!AccessPath.canContainValue(val1) || !AccessPath.canContainValue(val2))   return false;  if (val1 instanceof Constant || val2 instanceof Constant)   return false;  if (val1 == val2)   return true;  if (aliasingStrategy.isInteractive())   return aliasingStrategy.mayAlias(new AccessPath(val1,false),new AccessPath(val2,false));  return false;}  }
class C{  private void checkFailed() throws WrongMessageDigestException {  if (failed != null) {    WrongMessageDigestException exception=new WrongMessageDigestException(failed);    logger.log(Levels.FAILED,"Incorrect message digest",exception);    throw exception;  }}  }
class C{  @Override protected int readBlock(double[] target,int targetPos){  double[] frame=frameProvider.getNextFrame();  if (frame == null) {    return 0;  }  assert blockSize <= frameProvider.getFrameLengthSamples();  assert blockSize == frameProvider.getFrameShiftSamples();  double[] convResult=FFT.convolve_FD(frame,transformedIR);  int toCopy=blockSize;  if (frameProvider.validSamplesInFrame() < blockSize)   toCopy=frameProvider.validSamplesInFrame();  System.arraycopy(convResult,impulseResponseLength,target,targetPos,toCopy);  return toCopy;}  }
class C{  public List<SootMethod> clinitsOf(SootClass cl){  List<SootMethod> ret=new ArrayList<SootMethod>();  while (true) {    addMethod(ret,cl,sigClinit);    if (!cl.hasSuperclass())     break;    cl=cl.getSuperclass();  }  return ret;}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.lastModified=lastModified;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  private HTSUttModel predictAndSetDuration(List<Element> predictFromElements,List<Element> applyToElements) throws MaryConfigurationException {  List<Element> predictorElements=predictFromElements;  List<Target> predictorTargets=getTargets(predictorElements);  FeatureVector fv=null;  HTSUttModel um=new HTSUttModel();  FeatureDefinition feaDef=htsData.getFeatureDefinition();  double diffdurOld=0.0;  double diffdurNew=0.0;  String durAttributeName="d";  try {    for (int i=0; i < predictorTargets.size(); i++) {      fv=predictorTargets.get(i).getFeatureVector();      um.addUttModel(new HTSModel(cart.getNumStates()));      HTSModel m=um.getUttModel(i);      m.setPhoneName(fv.getFeatureAsString(feaDef.getFeatureIndex("phone"),feaDef));      if (htsData.getUseContextDependentGV()) {        if (m.getPhoneName().contentEquals("_"))         m.setGvSwitch(false);      }      um.setNumModel(um.getNumModel() + 1);      um.setNumState(um.getNumState() + cart.getNumStates());      diffdurNew=cart.searchDurInCartTree(m,fv,htsData,diffdurOld);      diffdurOld=diffdurNew;      double duration=m.getTotalDur() * fperiodsec;      um.setTotalFrame(um.getTotalFrame() + m.getTotalDur());      cart.searchLf0InCartTree(m,fv,feaDef,htsData.getUV());      for (int mstate=0; mstate < cart.getNumStates(); mstate++) {        for (int frame=0; frame < m.getDur(mstate); frame++)         if (m.getVoiced(mstate))         um.setLf0Frame(um.getLf0Frame() + 1);      }      Element element=applyToElements.get(i);      if (durAttributeName.startsWith("@")) {        durAttributeName=durAttributeName.replaceFirst("@","");      }      String formattedTargetValue=String.format(targetAttributeFormat,duration);      if (element.hasAttribute(durAttributeName)) {        formattedTargetValue=element.getAttribute(durAttributeName) + " " + formattedTargetValue;      }      element.setAttribute(durAttributeName,formattedTargetValue);    }    return um;  } catch (  Exception e) {    throw new MaryConfigurationException("Error searching in tree when predicting duration. ",e);  }}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  public StyleWrapper(){}  }
class C{  public void syncFile(OCFile file){  if (!file.isFolder()) {    Intent intent=new Intent(mFileActivity,OperationsService.class);    intent.setAction(OperationsService.ACTION_SYNC_FILE);    intent.putExtra(OperationsService.EXTRA_ACCOUNT,mFileActivity.getAccount());    intent.putExtra(OperationsService.EXTRA_REMOTE_PATH,file.getRemotePath());    intent.putExtra(OperationsService.EXTRA_SYNC_FILE_CONTENTS,true);    mWaitingForOpId=mFileActivity.getOperationsServiceBinder().queueNewOperation(intent);    mFileActivity.showLoadingDialog(mFileActivity.getApplicationContext().getString(R.string.wait_a_moment));  } else {    Intent intent=new Intent(mFileActivity,OperationsService.class);    intent.setAction(OperationsService.ACTION_SYNC_FOLDER);    intent.putExtra(OperationsService.EXTRA_ACCOUNT,mFileActivity.getAccount());    intent.putExtra(OperationsService.EXTRA_REMOTE_PATH,file.getRemotePath());    mFileActivity.startService(intent);  }}  }
class C{  protected void readEntityFromNBT(NBTTagCompound compound){  this.setFuse(compound.getShort("Fuse"));  this.setFacing(compound.getByte("Facing"));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostDropRate_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200760,skillcaster,skillname);}  }
class C{  public static void hideProgressDialog(String tag){  if (tag == null)   return;synchronized (sLock) {    ProgressDialog dialog=findDialog(tag);    if (dialog != null) {      if (isAlive(dialog) && dialog.isShowing())       dialog.dismiss();      sDialogs.remove(dialog);    }  }}  }
class C{  public LegendPanel(){  setLayout(new BorderLayout(0,0));  scrollPane=new JScrollPane(legendImagePanel);  scrollPane.setAutoscrolls(true);  scrollPane.setPreferredSize(new Dimension(SCROLL_PANE_WIDTH,SCROLL_PANE_HEIGHT));  add(scrollPane,BorderLayout.CENTER);}  }
class C{  private static void popTransactionStartStamp(Transaction t){  Map<Transaction,Timestamp> map=suspendedTxStartStamps.get();  if (map.size() > 0) {    Timestamp stamp=map.remove(t);    if (stamp != null) {      transactionStartStamp.set(stamp);    } else {      Debug.logError("Error in transaction handling - no saved start stamp found - using NOW.",module);      transactionStartStamp.set(UtilDateTime.nowTimestamp());    }  }}  }
class C{  public VideoGetAlbumByIdQuery(VkApiClient client,UserActor actor,int albumId){  super(client,"video.getAlbumById",VideoAlbumFull.class);  accessToken(actor.getAccessToken());  albumId(albumId);}  }
class C{  protected boolean handleEnterKeyPress(){  return false;}  }
class C{  public Builder(ReduceOp defaultOp){  this.defaultOp=defaultOp;}  }
class C{  public void cancel(){  pause();  mRunnable=null;}  }
class C{  public void write(DataOutput out) throws IOException {  WritableUtils.writeVInt(out,length);  out.write(bytes,0,length);}  }
class C{  public GeneralRuntimeException(){  super();}  }
class C{  public static int broadcast(String message,String permission){  return server.broadcast(message,permission);}  }
class C{  public static List<PathSegment> decodePath(String path,boolean decode){  List<PathSegment> segments=new LinkedList<>();  if (path == null) {    return segments;  }  int s;  int e=-1;  do {    s=e + 1;    e=path.indexOf('/',s);    if (e > s) {      decodePathSegment(segments,path.substring(s,e),decode);    } else     if (e == s) {      segments.add(PathSegmentImpl.EMPTY_PATH_SEGMENT);    }  } while (e != -1);  if (s < path.length()) {    decodePathSegment(segments,path.substring(s),decode);  } else {    segments.add(PathSegmentImpl.EMPTY_PATH_SEGMENT);  }  return segments;}  }
class C{  public AdsUpdateCampaignsQuery updateCampaigns(UserActor actor,int accountId,String data){  return new AdsUpdateCampaignsQuery(getClient(),actor,accountId,data);}  }
class C{  public <T>void bindTwoWay(@NotNull SettableValue<T> first,@NotNull SettableValue<T> second){  releaseTwoWay(first,second);  myTwoWayBindings.add(new TwoWayBinding<>(first,second));}  }
class C{  public boolean isScaleEnabled(){  return mIsScaleEnabled;}  }
class C{  public boolean isSetHeartbeatInfo(){  return this.heartbeatInfo != null;}  }
class C{  public AsyncCatchOptions useSmartSelect(boolean smartSelect){  this.smartSelect=smartSelect;  return this;}  }
class C{  public String stripContentExtras(String contentType){  int index=contentType.indexOf(';');  return (index >= 0) ? contentType.substring(0,index) : contentType;}  }
class C{  public static String replaceString(String mainString,String oldString,String newString){  return StringUtil.replaceString(mainString,oldString,newString);}  }
class C{  public Builder diskCacheSize(Integer megabytes){  this.diskCacheSize=megabytes;  return this;}  }
class C{  protected PigeonRolloverStrategy(final int minIndex,final int maxIndex,final boolean useMax,final int compressionLevel,final StrSubstitutor subst){  this.minIndex=minIndex;  this.maxIndex=maxIndex;  this.useMax=useMax;  this.compressionLevel=compressionLevel;  this.subst=subst;}  }
class C{  private void runCleaning(){  log.info("DatabaseCleaningService: Executing database cleaning");  startTime=System.currentTimeMillis();  int periodInDays=CleaningConfig.CLEANING_PERIOD;  int SECURITY_MINIMUM_PERIOD=30;  if (periodInDays > SECURITY_MINIMUM_PERIOD) {    delegateToThreads(CleaningConfig.CLEANING_THREADS,dao.getInactiveAccounts(periodInDays,CleaningConfig.CLEANING_LIMIT));    monitoringProcess();  } else {    log.warn("The configured days for database cleaning is to low. For security reasons the service will only execute with periods over 30 days!");  }}  }
class C{  public XtnEntry attachToXtn(ServerTransaction txn,boolean fromReplication) throws TransactionException, RemoteException {  return _transactionHandler.attachToXtnGranular(txn,fromReplication);}  }
class C{  public static boolean updateGradlePluginVersionAndNotifyFailure(@NotNull Project project,@NotNull GradleVersion pluginVersion,@Nullable String gradleVersion,boolean invalidateSyncOnFailure){  return updateGradlePluginVersionAndNotifyFailure(project,pluginVersion,gradleVersion,false,invalidateSyncOnFailure);}  }
class C{  @Override public void initialize(ConnectorContext ctx){}  }
class C{  @PreDestroy public void automaticsBrokerStop() throws Exception {  stopBroker();}  }
class C{  @Override protected void determineTargetPitchmarks(List<SelectedUnit> units){  for (  SelectedUnit unit : units) {    UnitData unitData=(UnitData)unit.getConcatenationData();    assert unitData != null : "Should not have null unitdata here";    Datagram[] datagrams=unitData.getFrames();    Datagram[] frames=null;    int unitDuration=0;    int nZeroLengthDatagrams=0;    for (int i=0; i < datagrams.length; i++) {      int dur=(int)datagrams[i].getDuration();      if (dur == 0)       nZeroLengthDatagrams++;      unitDuration+=datagrams[i].getDuration();    }    if (nZeroLengthDatagrams > 0) {      Log.w(Mary.LOG,"Unit " + unit + " contains "+ nZeroLengthDatagrams+ " zero-length datagrams -- removing them");      Datagram[] dummy=new Datagram[datagrams.length - nZeroLengthDatagrams];      for (int i=0, j=0; i < datagrams.length; i++) {        if (datagrams[i].getDuration() > 0) {          dummy[j++]=datagrams[i];        }      }      datagrams=dummy;      unitData.setFrames(datagrams);    }    if (unit.getTarget().isSilence()) {      int targetDuration=Math.round(unit.getTarget().getTargetDurationInSeconds() * audioformat.getSampleRate());      if (targetDuration > 0 && datagrams != null && datagrams.length > 0) {        int firstPeriodDur=(int)datagrams[0].getDuration();        if (targetDuration < firstPeriodDur) {          Log.d(Mary.LOG,"For " + unit + ", adjusting target duration to be at least one period: "+ (firstPeriodDur / audioformat.getSampleRate())+ " s instead of requested "+ unit.getTarget().getTargetDurationInSeconds()+ " s");          targetDuration=firstPeriodDur;        }        if (unitDuration < targetDuration) {          frames=new Datagram[datagrams.length + 1];          int mid=(datagrams.length + 1) / 2;          System.arraycopy(datagrams,0,frames,0,mid);          if (mid < datagrams.length) {            System.arraycopy(datagrams,mid,frames,mid + 1,datagrams.length - mid);          }          frames[mid]=createZeroDatagram(targetDuration - unitDuration);        } else {          int midright=(datagrams.length + 1) / 2;          int midleft=midright - 1;          while (unitDuration > targetDuration && midright < datagrams.length) {            unitDuration-=datagrams[midright].getDuration();            midright++;            if (unitDuration > targetDuration && midleft > 0) {              unitDuration-=datagrams[midleft].getDuration();              midleft--;            }          }          frames=new Datagram[midleft + 1 + datagrams.length - midright];          assert midleft >= 0;          System.arraycopy(datagrams,0,frames,0,midleft + 1);          if (midright < datagrams.length) {            System.arraycopy(datagrams,midright,frames,midleft + 1,datagrams.length - midright);          }        }        unitDuration=targetDuration;      } else {        frames=new Datagram[]{createZeroDatagram(targetDuration)};        unitDuration=targetDuration;      }    } else {      frames=datagrams;    }    unitData.setUnitDuration(unitDuration);    unitData.setFrames(frames);  }}  }
class C{  @RequestMapping(value="/{bookmarkId}",method=RequestMethod.PUT) public ResponseEntity<Bookmark> editBookmark(@PathVariable(value="username") String username,@PathVariable(value="bookmarkId") int bookmarkId,@RequestBody String json) throws IOException, BookmarkNotFoundException, IllegalAccessException, InvocationTargetException {  Optional<Bookmark> optional=bookmarksRepository.findByIdAndUserUsername(bookmarkId,username);  if (optional.isPresent()) {    ObjectMapper mapper=new ObjectMapper();    Map<String,String> changeMap=mapper.readValue(json,HashMap.class);    Bookmark bookmark=optional.get();    BeanUtils.populate(bookmark,changeMap);    bookmark=bookmarksRepository.save(bookmark);    return new ResponseEntity<>(bookmark,HttpStatus.OK);  } else {    throw new BookmarkNotFoundException("Bookmark not found id = " + bookmarkId);  }}  }
class C{  @Override TaskDomino<T,R,U> newThread(){  return new TaskDomino<T,R,U>(super.newThread());}  }
class C{  private TypeSpec createAnonymousBuiltinType(ClassName leafInjectorClassName,NewBindingKey key,@Nullable TypeElement scope,@Nullable TypeElement referencingClass,@Nullable NewDependencyInfo newDependencyInfo){  Preconditions.checkArgument(key.getTypeName() instanceof ParameterizedTypeName);  boolean isMultiBinding=newDependencyInfo != null;  if (isMultiBinding) {    Preconditions.checkArgument(referencingClass == null);    Preconditions.checkNotNull(scope);  } else {    Preconditions.checkNotNull(referencingClass);  }  TypeName rawTypeName=((ParameterizedTypeName)key.getTypeName()).rawType;  Preconditions.checkArgument(Utils.hasBuiltinBinding(key),String.format("Built-in binding expected(Provider or Lazy), but get %s",key));  boolean isLazy=rawTypeName.equals(ClassName.get(Lazy.class));  NewBindingKey elementKey=Utils.getElementKeyForBuiltinBinding(key);  Preconditions.checkNotNull(elementKey);  if (!isMultiBinding) {    generateProvisionMethodIfNeeded(elementKey,referencingClass);  }  MethodSpec.Builder builderForGet=MethodSpec.methodBuilder("get").returns(elementKey.getTypeName()).addAnnotation(Override.class).addModifiers(Modifier.PUBLIC);  builderForGet.addStatement("$T var = null",elementKey.getTypeName());  if (isLazy) {    builderForGet.beginControlFlow("if (var == null)");  }  if (!isMultiBinding) {    builderForGet.addStatement("var = $N()",getProvisionMethodName(elementKey));  } else {    addNewStatementToMethodSpec(scope,newDependencyInfo,leafInjectorClassName,builderForGet,"var");  }  if (isLazy) {    builderForGet.endControlFlow();  }  builderForGet.addStatement("return var");  TypeSpec result=TypeSpec.anonymousClassBuilder("").addSuperinterface(key.getTypeName()).addMethod(builderForGet.build()).build();  return result;}  }
class C{  public static void onPlayerLogout(Player player){  ChatServer.getInstance().sendPlayerLogout(player);}  }
class C{  protected void writeNetscapeExt() throws IOException {  out.write(0x21);  out.write(0xff);  out.write(11);  writeString("NETSCAPE" + "2.0");  out.write(3);  out.write(1);  writeShort(repeat);  out.write(0);}  }
class C{  private void createUI(){  readConfigFile(null,this,"Line.xml");}  }
class C{  protected Boolean defaultAutoCommit(){  return this.defaultAutoCommit;}  }
class C{  private void magnitudeFFT(double[] re){  double[] im=new double[re.length];  fft(re,im,FFT_FORWARD);  for (int i=0; i < re.length; i++)   re[i]=Math.sqrt(re[i] * re[i] + im[i] * im[i]);}  }
class C{  static Map<String,String> parseArgsToFieldMap(String[] args){  Map<String,String> argsToFieldMap=new HashMap<>();  for (  String arg : args) {    String flagName="";    String value="";    if (!arg.startsWith("-")) {      continue;    } else     if (arg.startsWith("--")) {      int equalsIndex=arg.indexOf("=");      flagName=arg.substring(2);      if (equalsIndex >= 2) {        flagName=arg.substring(2,equalsIndex);        value=arg.substring(equalsIndex + 1);      }    } else     if (arg.startsWith("-")) {      int equalsIndex=arg.indexOf("=");      flagName=arg.substring(1);      if (equalsIndex >= 1) {        flagName=arg.substring(1,equalsIndex);        value=arg.substring(equalsIndex + 1);      }    }    argsToFieldMap.put(flagName,value);  }  return argsToFieldMap;}  }
class C{  public boolean topo_sort(){  return soot.PhaseOptions.getBoolean(options,"topo-sort");}  }
class C{  private void readObjectNoData() throws InvalidObjectException {  throw new InvalidObjectException("LandlordLease should always have data");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BackDashATK_A_TO_ME(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200642,skillcaster,num0,skillname);}  }
class C{  private static void drawCustomSizeRect(int xPos,int yPos,int texX,int texY,int width,int height){  getGuiHandler().drawModalRectWithCustomSizedTexture(xPos,yPos,texX,texY,width,height,width,height);}  }
class C{  public Z Eq(double a,double b){  re=a;  im=b;  return this;}  }
class C{  public int addEdge(int s,int t){  long key1=getKey(s);  long key2=getKey(t);  Table edges=getEdgeTable();  int r=edges.addRow();  if (m_longKey) {    edges.setLong(r,m_skey,key1);    edges.setLong(r,m_tkey,key2);  } else {    edges.setInt(r,m_skey,(int)key1);    edges.setInt(r,m_tkey,(int)key2);  }  return r;}  }
class C{  void unregister(){  mListener=null;  mMediaFactory=null;}  }
class C{  private ByteOrderMark find(){  for (  ByteOrderMark bom : boms) {    if (matches(bom)) {      return bom;    }  }  return null;}  }
class C{  public static void installToStorage(Context context){  mContext=context;  new Thread(runnable).start();}  }
class C{  static void appendModeInfo(Mode mode,BitArray bits){  bits.appendBits(mode.getBits(),4);}  }
class C{  @Override public List<WebElement> findElementsByName(String name){  return ((FindsByName)super.getWrappedDriver()).findElementsByName(name);}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  SearchSuffixDao.createTable(db,ifNotExists);}  }
class C{  private void initial(){  int dayOfWeek=calendar.get(Calendar.DAY_OF_WEEK);  int monthStart=-1;  if (dayOfWeek >= 2 && dayOfWeek <= 7) {    monthStart=dayOfWeek - 2;  } else   if (dayOfWeek == 1) {    monthStart=6;  }  curStartIndex=monthStart;  date[monthStart]=1;  int daysOfMonth=daysOfCurrentMonth();  for (int i=1; i < daysOfMonth; i++) {    date[monthStart + i]=i + 1;  }  curEndIndex=monthStart + daysOfMonth;  if (mode == Constant.MODE_SHOW_DATA_OF_THIS_MONTH) {    todayIndex=Calendar.getInstance().get(Calendar.DAY_OF_MONTH) + monthStart - 1;  } else   if (mode == Constant.MODE_CALENDAR) {    if (calendar.get(Calendar.YEAR) == Calendar.getInstance().get(Calendar.YEAR) && calendar.get(Calendar.MONTH) == Calendar.getInstance().get(Calendar.MONTH)) {      todayIndex=Calendar.getInstance().get(Calendar.DAY_OF_MONTH) + monthStart - 1;    } else {      todayIndex=-1;    }  }}  }
class C{  public static void ignorm(double c1[],double c2[],int m,double ng){  if (ng != 0.0) {    double k=Math.pow(c1[0],ng);    for (int i=m; i >= 1; i--)     c2[i]=k * c1[i];    c2[0]=(k - 1.0) / ng;  } else {    System.arraycopy(c1,1,c2,1,m - 1);    c2[0]=Math.log(c1[0]);  }}  }
class C{  public static int createProxyObject(int luaState,String implem) throws LuaException {  LuaState L=LuaStateFactory.getExistingState(luaState);synchronized (L) {    try {      if (!(L.isTable(2)))       throw new LuaException("Parameter is not a table. Can't create proxy.");      LuaObject luaObj=L.getLuaObject(2);      Object proxy=luaObj.createProxy(implem);      L.pushJavaObject(proxy);    } catch (    Exception e) {      throw new LuaException(e);    }    return 1;  }}  }
class C{  @ObjectiveCName("init:client:rpcName:uid:callback:") Rpc(DeepstreamConfig deepstreamConfig,DeepstreamClientAbstract client,String rpcName,String uid,RpcHandler.RpcResponseCallback callback){  this.deepstreamConfig=deepstreamConfig;  this.client=client;  this.rpcName=rpcName;  this.uid=uid;  this.callback=callback;  this.ackTimeoutRegistry=client.getAckTimeoutRegistry();  this.setTimeouts();}  }
class C{  public SM_MESSAGE(int senderObjectId,String senderName,String message,ChatType chatType){  this.senderObjectId=senderObjectId;  this.senderName=senderName;  this.message=message;  this.chatType=chatType;}  }
class C{  public int modify_file1(String appender_file_id,long file_offset,long modify_size,UploadCallback callback) throws IOException, MyException {  String[] parts=new String[2];  this.errno=this.split_file_id(appender_file_id,parts);  if (this.errno != 0) {    return this.errno;  }  return this.modify_file(parts[0],parts[1],file_offset,modify_size,callback);}  }
class C{  public XNIException(String message){  super(message);}  }
class C{  public WallPostQuery postId(Integer value){  return unsafeParam("post_id",value);}  }
class C{  public void writeAuxBlocks(IOutputWriter writer,Map<String,byte[]> name2AuxData) throws IOException {  setCount(name2AuxData.size());  for (  String name : name2AuxData.keySet()) {    writer.writeString(name);    byte[] bytes=name2AuxData.get(name);    writer.writeInt(bytes.length);    writer.write(bytes,0,bytes.length);  }}  }
class C{  public boolean filterOut(final SAMRecord first,final SAMRecord second){  throw new UnsupportedOperationException("Paired *Filter not implemented!");}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public WebElement elementReady(WebElement element){  return bobcatWait.withTimeout(Timeouts.MEDIUM).until(null);}  }
class C{  public int hashCode(){  return value.hashCode();}  }
class C{  public static byte[] readFully(InputStream in) throws IOException {  try {    return readFullyNoClose(in);  }  finally {    in.close();  }}  }
class C{  private void sendJsonResponse(final String jsonResponse){  if (replyDestination == null) {    LOG.error("sendJsonResponse() : JMSReplyTo destination is null - cannot send reply.");    return;  }  MessageProducer messageProducer=null;  try {    messageProducer=session.createProducer(replyDestination);    messageProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);    messageProducer.setTimeToLive(defaultReplyTTL);    Message replyMessage=null;    replyMessage=session.createTextMessage(jsonResponse);    messageProducer.send(replyMessage);    if (LOG.isDebugEnabled()) {      LOG.debug("ClientRequestReportHandler() : Report sent.");    }  } catch (  Throwable e) {    LOG.warn("daqTotalParts(): Failed to send Progress report :" + e.getMessage(),e);  } finally {    if (messageProducer != null) {      try {        messageProducer.close();      } catch (      JMSException ignore) {      }    }  }}  }
class C{  private EnvironmentVariableManager(){  populate();}  }
class C{  void storeFence(@NonNull StorableFence fence){  Set<String> setTmp=mPrefs.getStringSet(mPrefix + FENCE_ID_SET_KEY,null);  HashSet<String> fenceIdSet;  if (setTmp == null) {    fenceIdSet=new HashSet<>();  } else {    fenceIdSet=new HashSet<>(setTmp);  }  SharedPreferences.Editor editor=mPrefs.edit();  editor.putString(mPrefix + fence.getId(),StorableFence.fenceToString(fence));  fenceIdSet.add(fence.getId());  editor.putStringSet(mPrefix + FENCE_ID_SET_KEY,fenceIdSet);  editor.apply();}  }
class C{  private void updateCurrentEdition(){  try {    getHistoryTableProvider().setRemoteResource((ISVNRemoteFile)SVNWorkspaceRoot.getBaseResourceFor(resource));  } catch (  TeamException e) {    handle(e);  }}  }
class C{  public List<ValidationError> validate(@Nullable AndroidFacet facet){  return commonState.validate(facet);}  }
class C{  protected boolean isExecutorExecute(InvokeExpr ie,SootMethod dest){  if (ie == null || dest == null)   return false;  SootMethod ieMethod=ie.getMethod();  if (!ieMethod.getName().equals("execute") && !ieMethod.getName().equals("doPrivileged"))   return false;  final String ieSubSig=ieMethod.getSubSignature();  final String calleeSubSig=dest.getSubSignature();  if (ieSubSig.equals("void execute(java.lang.Runnable)") && calleeSubSig.equals("void run()"))   return true;  if (calleeSubSig.equals("java.lang.Object run()")) {    if (ieSubSig.equals("java.lang.Object doPrivileged(java.security.PrivilegedAction)"))     return true;    if (ieSubSig.equals("java.lang.Object doPrivileged(java.security.PrivilegedAction," + "java.security.AccessControlContext)"))     return true;    if (ieSubSig.equals("java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)"))     return true;    if (ieSubSig.equals("java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction," + "java.security.AccessControlContext)"))     return true;  }  return false;}  }
class C{  public void add(int i,Action a){  m_actions.add(i,a);}  }
class C{  public static int peekFileType(String fileName) throws IOException {  DataInputStream dis=null;  dis=new DataInputStream(new BufferedInputStream(new FileInputStream(fileName)));  try {    MaryHeader hdr=new MaryHeader(dis);    int type=hdr.getType();    return type;  } catch (  MaryConfigurationException e) {    return -1;  } finally {    dis.close();  }}  }
class C{  public <R>Plan<R> then(Function4<T1,T2,T3,T4,R> selector){  if (selector == null) {    throw new NullPointerException();  }  return new Plan4<T1,T2,T3,T4,R>(this,selector);}  }
class C{  @Override public void merge(ProtoElement elem){}  }
class C{  public boolean geom_pta(){  return soot.PhaseOptions.getBoolean(options,"geom-pta");}  }
class C{  @ObjectiveCName("init:") UtilAckTimeoutRegistry(DeepstreamClientAbstract client){  this.client=client;  this.register=new ConcurrentHashMap<>();  this.ackTimers=new LinkedBlockingQueue<>();  this.executor=new ScheduledThreadPoolExecutor(5);  this.state=client.getConnectionState();  this.client.addConnectionChangeListener(this);}  }
class C{  public int size(){  return mails.size();}  }
class C{  private void selectRow(int row){  spreadsheetView.getSelectionModel().select(row,spreadsheetView.getColumns().get(0));}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  @Override public void printStackTrace(){  printStackTrace(System.err);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("select samples=");  String what=np.getWordMatchesIgnoringCase("all none");  np.matchRespectCase(";");  if (getViewer() instanceof GroupsViewer) {    GroupsViewer viewer=(GroupsViewer)getViewer();    if (what.equalsIgnoreCase("all"))     viewer.getGroupsPanel().selectAll(); else     if (what.equals("none"))     viewer.getGroupsPanel().selectNone();  }}  }
class C{  public FastAvailableExpressions(Body b,SideEffectTester st){  if (Options.v().verbose())   G.v().out.println("[" + b.getMethod().getName() + "] Finding available expressions...");  FastAvailableExpressionsAnalysis analysis=new FastAvailableExpressionsAnalysis(new ExceptionalUnitGraph(b),b.getMethod(),st);{    unitToPairsAfter=new HashMap<Unit,List<UnitValueBoxPair>>(b.getUnits().size() * 2 + 1,0.7f);    unitToPairsBefore=new HashMap<Unit,List<UnitValueBoxPair>>(b.getUnits().size() * 2 + 1,0.7f);    unitToEquivsAfter=new HashMap<Unit,Chain<EquivalentValue>>(b.getUnits().size() * 2 + 1,0.7f);    unitToEquivsBefore=new HashMap<Unit,Chain<EquivalentValue>>(b.getUnits().size() * 2 + 1,0.7f);    for (    Unit s : b.getUnits()) {      FlowSet<Value> set=analysis.getFlowBefore(s);      List<UnitValueBoxPair> pairsBefore=new ArrayList<UnitValueBoxPair>();      List<UnitValueBoxPair> pairsAfter=new ArrayList<UnitValueBoxPair>();      Chain<EquivalentValue> equivsBefore=new HashChain<EquivalentValue>();      Chain<EquivalentValue> equivsAfter=new HashChain<EquivalentValue>();      if (set instanceof ToppedSet && ((ToppedSet<Value>)set).isTop())       throw new RuntimeException("top! on " + s);      for (      Value v : set) {        Stmt containingStmt=(Stmt)analysis.rhsToContainingStmt.get(v);        UnitValueBoxPair p=new UnitValueBoxPair(containingStmt,((AssignStmt)containingStmt).getRightOpBox());        pairsBefore.add(p);        EquivalentValue ev=new EquivalentValue(v);        if (!equivsBefore.contains(ev))         equivsBefore.add(ev);      }      unitToPairsBefore.put(s,pairsBefore);      unitToEquivsBefore.put(s,equivsBefore);      for (      Value v : analysis.getFlowAfter(s)) {        Stmt containingStmt=(Stmt)analysis.rhsToContainingStmt.get(v);        UnitValueBoxPair p=new UnitValueBoxPair(containingStmt,((AssignStmt)containingStmt).getRightOpBox());        pairsAfter.add(p);        EquivalentValue ev=new EquivalentValue(v);        if (!equivsAfter.contains(ev))         equivsAfter.add(ev);      }      unitToPairsAfter.put(s,pairsAfter);      unitToEquivsAfter.put(s,equivsAfter);    }  }  if (Options.v().verbose())   G.v().out.println("[" + b.getMethod().getName() + "]     Found available expressions...");}  }
class C{  public Map<String,List<ChartObject>> groupByDate(List<ChartObject> input,Period period){  HashMap<String,List<ChartObject>> result=new LinkedHashMap<>();  Map<String,ChartObject> range=buildRange(input,period);  for (  ChartObject anInput : input) {    String group=new DateTime(Long.valueOf(anInput.getStartTime())).toString(DATE_PATTERN);    ChartObject axisObject=range.get(group);    Map<String,String> values=axisObject.getValues();    Map<String,String> updated=new HashMap<>();    for (    String key : anInput.getValues().keySet()) {      updated.put(key,String.valueOf(Double.valueOf(anInput.getValues().get(key)) + Double.valueOf(values.get(key))));    }    axisObject.setValues(updated);    range.put(group,axisObject);  }  range.keySet().stream().forEach(null);  return result;}  }
class C{  public PhotosCreateAlbumQuery privacyView(String... value){  return unsafeParam("privacy_view",value);}  }
class C{  public FeatureDefinition(ByteBuffer bb) throws IOException {  numByteFeatures=bb.getInt();  byteFeatureValues=new ByteStringTranslator[numByteFeatures];  featureNames=new IntStringTranslator(numByteFeatures);  featureWeights=new float[numByteFeatures];  for (int i=0; i < numByteFeatures; i++) {    featureWeights[i]=bb.getFloat();    String featureName=StreamUtils.readUTF(bb);    featureNames.set(i,featureName);    byte numberOfValuesEncoded=bb.get();    int numberOfValues=numberOfValuesEncoded & 0xFF;    byteFeatureValues[i]=new ByteStringTranslator(numberOfValues);    for (int b=0; b < numberOfValues; b++) {      String value=StreamUtils.readUTF(bb);      byteFeatureValues[i].set((byte)b,value);    }  }  numShortFeatures=bb.getInt();  if (numShortFeatures > 0) {    shortFeatureValues=new ShortStringTranslator[numShortFeatures];    float[] newWeights=new float[numByteFeatures + numShortFeatures];    System.arraycopy(featureWeights,0,newWeights,0,numByteFeatures);    featureWeights=newWeights;    for (int i=0; i < numShortFeatures; i++) {      featureWeights[numByteFeatures + i]=bb.getFloat();      String featureName=StreamUtils.readUTF(bb);      featureNames.set(numByteFeatures + i,featureName);      short numberOfValues=bb.getShort();      shortFeatureValues[i]=new ShortStringTranslator(numberOfValues);      for (short s=0; s < numberOfValues; s++) {        String value=StreamUtils.readUTF(bb);        shortFeatureValues[i].set(s,value);      }    }  }  numContinuousFeatures=bb.getInt();  floatWeightFuncts=new String[numContinuousFeatures];  if (numContinuousFeatures > 0) {    float[] newWeights=new float[numByteFeatures + numShortFeatures + numContinuousFeatures];    System.arraycopy(featureWeights,0,newWeights,0,numByteFeatures + numShortFeatures);    featureWeights=newWeights;  }  for (int i=0; i < numContinuousFeatures; i++) {    featureWeights[numByteFeatures + numShortFeatures + i]=bb.getFloat();    floatWeightFuncts[i]=StreamUtils.readUTF(bb);    String featureName=StreamUtils.readUTF(bb);    featureNames.set(numByteFeatures + numShortFeatures + i,featureName);  }}  }
class C{  public void stopTasks(){  if (task != null) {    task.cancel(false);    task=null;  }  if (periodicTasks != null) {    for (    Future<?> periodicTask : this.periodicTasks) {      if (periodicTask != null) {        periodicTask.cancel(false);        periodicTask=null;      }    }  }  stopPeriodicActions();}  }
class C{  void replacedCharacterData(NodeImpl node,String oldvalue,String value){}  }
class C{  @Override public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  return;}  }
class C{  public Jump(EntityLivingBase living,float motion){  super(living);  this.motion=motion;}  }
class C{  public void removeWord(String sWord){  removeWord(sWord,RemoveSubStrings);}  }
class C{  private <C>void putAll(ColumnListMutation<C> mutation,Iterable<Column<C>> columns){  for (  Column<C> column : columns) {    mutation.setTimestamp(column.getTimestamp()).putColumn(column.getName(),column.getByteBufferValue(),column.getTtl());  }}  }
class C{  public UmbrellaGrantPermission(){  super("");}  }
class C{  public NlDrawingStyle(@Nullable Color strokeColor,@Nullable Color fill,@NotNull BasicStroke stroke){  myStrokeColor=strokeColor;  myStroke=stroke;  myFillColor=fill;  myLineWidth=(int)stroke.getLineWidth();}  }
class C{  public StandardParserConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool){  this(symbolTable,grammarPool,null);}  }
class C{  public String verifyTestItemDefinedIssueType(final String type,final Project.Configuration settings){  StatisticSubType defined=settings.getByLocator(type);  expect(settings.getByLocator(type),notNull()).verify(ISSUE_TYPE_NOT_FOUND,type);  return defined.getLocator();}  }
class C{  public void hold(int mask,int duration) throws InterruptedException {  controller.mousePress(mask);  if (duration >= 0) {    Thread.sleep(duration);    controller.mouseRelease(mask);  }}  }
class C{  public SubLine(final Vector3D start,final Vector3D end,final double tolerance) throws MathIllegalArgumentException {  this(new Line(start,end,tolerance),buildIntervalSet(start,end,tolerance));}  }
class C{  public String toXML(){  StringBuffer str=new StringBuffer();  str.append("<");  str.append(XML_ROOT_ELEMENT);  str.append(">");  str.append("<");  str.append(XML_ELEMENT_QUALITY_CODE);  str.append(">");  str.append(qualityCode);  str.append("</");  str.append(XML_ELEMENT_QUALITY_CODE);  str.append(">");  if (description != null) {    str.append("<");    str.append(XML_ELEMENT_QUALITY_DESC);    str.append("><![CDATA[");    str.append(description);    str.append("]]></");    str.append(XML_ELEMENT_QUALITY_DESC);    str.append(">");  }  str.append("</");  str.append(XML_ROOT_ELEMENT);  str.append(">\n");  return str.toString();}  }
class C{  public void close() throws IOException {  if (!eof) {    while (read(buf,0,buf.length) != -1)     ;  }}  }
class C{  public final static NameValuePair parseNameValuePair(final String value,HeaderValueParser parser) throws ParseException {  if (value == null) {    throw new IllegalArgumentException("Value to parse may not be null");  }  if (parser == null)   parser=SaveHeaderValueParser.DEFAULT;  CharArrayBuffer buffer=new CharArrayBuffer(value.length());  buffer.append(value);  SaveParserCursor cursor=new SaveParserCursor(0,value.length());  return parser.parseNameValuePair(buffer,cursor);}  }
class C{  public void loadLang(Map<String,String> data,String locale){  Module e=floor();  if (e != null) {    e.loadLang(data,locale);  }  File f=new File(path + "/i18n/" + locale+ ".lang");  if (f.exists()) {    try {      BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(f),"UTF-8"));      try {        String line=reader.readLine();        while (line != null) {          if (!line.startsWith("#")) {            int i=line.indexOf("=");            if (i > 0) {              String name=line.substring(0,i).trim();              String value=line.substring(i + 1).trim();              if ("@include".equals(name)) {                loadLang(data,name);              } else {                data.put(name,value);              }            }          }          line=reader.readLine();        }      }  finally {        reader.close();      }    } catch (    Exception e1) {      log.error("loadLang:" + locale,e1);    }  }}  }
class C{  Status readStatus(Element el){  NodeList list=el.getElementsByTagName("status");  if (list == null || list.getLength() == 0)   return DomainSuffix.DEFAULT_STATUS;  return Status.valueOf(list.item(0).getFirstChild().getNodeValue());}  }
class C{  private void doScroll(int delta){  scrollingOffset+=delta;  int itemHeight=getItemHeight();  int count=scrollingOffset / itemHeight;  int pos=currentItem - count;  int itemCount=viewAdapter.getItemsCount();  int fixPos=scrollingOffset % itemHeight;  if (Math.abs(fixPos) <= itemHeight / 2) {    fixPos=0;  }  if (isCyclic && itemCount > 0) {    if (fixPos > 0) {      pos--;      count++;    } else     if (fixPos < 0) {      pos++;      count--;    }    while (pos < 0) {      pos+=itemCount;    }    pos%=itemCount;  } else {    if (pos < 0) {      count=currentItem;      pos=0;    } else     if (pos >= itemCount) {      count=currentItem - itemCount + 1;      pos=itemCount - 1;    } else     if (pos > 0 && fixPos > 0) {      pos--;      count++;    } else     if (pos < itemCount - 1 && fixPos < 0) {      pos++;      count--;    }  }  int offset=scrollingOffset;  if (pos != currentItem) {    setCurrentItem(pos,false);  } else {    invalidate();  }  scrollingOffset=offset - count * itemHeight;  if (scrollingOffset > getHeight()) {    scrollingOffset=scrollingOffset % getHeight() + getHeight();  }}  }
class C{  public FragmentManageImplementor(FragmentManageModel model){  this.model=model;}  }
class C{  public Boolean isTriggerNotifyTemplate(){  return triggerNotifyTemplate;}  }
class C{  public void removeValue(int row){  valueList.remove(row);  this.fireTableDataChanged();}  }
class C{  private void renderAABB(GL2 gl,SandboxBody body){  gl.glColor4fv(Preferences.getBodyAABBColor(),0);  AABB aabb=this.simulation.getWorld().getBroadphaseDetector().getAABB(body);  if (aabb != null) {    RenderUtilities.drawRectangleFromStartToEnd(gl,aabb.getMinX(),aabb.getMinY(),aabb.getMaxX(),aabb.getMaxY(),false);  }}  }
class C{  public static Map<String,Object> updateTelecomNumber(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Timestamp now=UtilDateTime.nowTimestamp();  List<GenericValue> toBeStored=FastList.newInstance();  boolean isModified=false;  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_PCM_UPDATE");  if (result.size() > 0)   return result;  String newCmId=null;  try {    newCmId=delegator.getNextSeqId("ContactMech");  } catch (  IllegalArgumentException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_change_contact_info_id_generation_failure",locale));  }  String contactMechId=(String)context.get("contactMechId");  GenericValue contactMech=null;  GenericValue partyContactMech=null;  try {    contactMech=EntityQuery.use(delegator).from("ContactMech").where("contactMechId",contactMechId).queryOne();    partyContactMech=EntityQuery.use(delegator).from("PartyContactMech").where("partyId",partyId,"contactMechId",contactMechId).orderBy("fromDate").filterByDate().queryFirst();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    contactMech=null;    partyContactMech=null;  }  if (contactMech == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_find_specified_contact_info_read",locale));  }  if (partyContactMech == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.cannot_update_specified_contact_info_not_corresponds",locale));  }  toBeStored.add(partyContactMech);  GenericValue newContactMech=GenericValue.create(contactMech);  GenericValue newPartyContactMech=GenericValue.create(partyContactMech);  GenericValue relatedEntityToSet=null;  if ("TELECOM_NUMBER".equals(contactMech.getString("contactMechTypeId"))) {    GenericValue telNum=null;    try {      telNum=EntityQuery.use(delegator).from("TelecomNumber").where("contactMechId",contactMechId).queryOne();    } catch (    GenericEntityException e) {      Debug.logWarning(e.toString(),module);      telNum=null;    }    relatedEntityToSet=GenericValue.create(telNum);    relatedEntityToSet.set("countryCode",context.get("countryCode"));    relatedEntityToSet.set("areaCode",context.get("areaCode"));    relatedEntityToSet.set("contactNumber",context.get("contactNumber"));    if (telNum == null || !relatedEntityToSet.equals(telNum)) {      isModified=true;    }    relatedEntityToSet.set("contactMechId",newCmId);    newPartyContactMech.set("extension",context.get("extension"));  } else {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_update_contact_as_TELECOM_NUMBER_specified",UtilMisc.toMap("contactMechTypeId",contactMech.getString("contactMechTypeId")),locale));  }  newPartyContactMech.set("roleTypeId",context.get("roleTypeId"));  newPartyContactMech.set("allowSolicitation",context.get("allowSolicitation"));  if (!newContactMech.equals(contactMech))   isModified=true;  if (!newPartyContactMech.equals(partyContactMech))   isModified=true;  toBeStored.add(newContactMech);  toBeStored.add(newPartyContactMech);  if (isModified) {    if (relatedEntityToSet != null)     toBeStored.add(relatedEntityToSet);    newContactMech.set("contactMechId",newCmId);    newPartyContactMech.set("contactMechId",newCmId);    newPartyContactMech.set("fromDate",now);    newPartyContactMech.set("thruDate",null);    try {      Iterator<GenericValue> partyContactMechPurposes=UtilMisc.toIterator(partyContactMech.getRelated("PartyContactMechPurpose",null,null,false));      while (partyContactMechPurposes != null && partyContactMechPurposes.hasNext()) {        GenericValue tempVal=GenericValue.create(partyContactMechPurposes.next());        tempVal.set("contactMechId",newCmId);        toBeStored.add(tempVal);      }    } catch (    GenericEntityException e) {      Debug.logWarning(e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_change_contact_info_read",UtilMisc.toMap("errMessage",e.getMessage()),locale));    }    partyContactMech.set("thruDate",now);    try {      delegator.storeAll(toBeStored);    } catch (    GenericEntityException e) {      Debug.logWarning(e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_change_contact_info_write",UtilMisc.toMap("errMessage",e.getMessage()),locale));    }  } else {    result.put("newContactMechId",contactMechId);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resourceError,"contactmechservices.no_changes_made_not_updating",locale));    return result;  }  result.put("newContactMechId",newCmId);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public static void main(String[] args) throws IOException {  IncrementalVisitor.main(args,VISITOR_BUILDER);}  }
class C{  private void updateParentItems(TreeItem item){  if (item != null) {    Item[] children=getChildren(item);    boolean containsChecked=false;    boolean containsUnchecked=false;    for (int i=0; i < children.length; i++) {      TreeItem curr=(TreeItem)children[i];      containsChecked|=curr.getChecked();      containsUnchecked|=(!curr.getChecked() || curr.getGrayed());    }    item.setChecked(containsChecked);    item.setGrayed(containsChecked && containsUnchecked);    updateParentItems(item.getParentItem());  }}  }
class C{  private void updateGradientParameters(){  mSideHypot=(int)Math.hypot(getWidth(),getHeight());  ShapeDrawable mDrawable=new ShapeDrawable(new RectShape());  final double radiansAngle=Math.toRadians(mDegreesAngle);  mDrawable.getPaint().setShader(new LinearGradient(0,0,(int)(mSideHypot * Math.cos(radiansAngle)),(int)(mSideHypot * Math.sin(radiansAngle)),mColorA,mColorB,Shader.TileMode.REPEAT));  if (mForegroundLayout == null) {    mForegroundLayout=new FrameLayout(getContext());    mForegroundLayout.setLayoutParams(new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));    addView(mForegroundLayout);  }  mForegroundLayout.setVisibility(isChecked() ? View.VISIBLE : View.INVISIBLE);  mForegroundLayout.setForeground(mDrawable);}  }
class C{  private String clean(String name){  StringBuffer buf=new StringBuffer();  for (int i=0; i < name.length(); i++) {    char ch=name.charAt(i);switch (ch) {case '&':      buf.append("&amp;");    break;default :  buf.append(ch);break;}}return buf.toString();}  }
class C{  @Override public void insert(Constant key,RecordId dataRecordId,boolean doLogicalLogging){  beforeFirst(ConstantRange.newInstance(key));  if (doLogicalLogging)   tx.recoveryMgr().logLogicalStart();  rf.insert();  rf.setVal(SCHEMA_KEY,key);  rf.setVal(SCHEMA_RID_BLOCK,new BigIntConstant(dataRecordId.block().number()));  rf.setVal(SCHEMA_RID_ID,new IntegerConstant(dataRecordId.id()));  if (doLogicalLogging)   tx.recoveryMgr().logIndexInsertionEnd(ii.tableName(),ii.fieldName(),key,dataRecordId.block().number(),dataRecordId.id());}  }
class C{  public static void init(Context context){  if (sInstance == null) {    final ExecutorService service=Executors.newSingleThreadExecutor();    sTrainingTaskFuture=service.submit(new TrainingTask(context));  } else {    throw new IllegalStateException("Attempt to train code classifier twice.\n" + "It should be initialized once at start to make train asynchronously.");  }}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.getDataType().equalsIgnoreCase(ClassificationType.Taxonomy.toString());}  }
class C{  public static void log(Object message){  Gdx.app.log(TAG,String.valueOf(message));}  }
class C{  float[] concat(float[]... arrays){  int length=0;  for (  float[] array : arrays) {    length+=array.length;  }  float[] result=new float[length];  int pos=0;  for (  float[] array : arrays) {    for (    float element : array) {      result[pos]=element;      pos++;    }  }  return result;}  }
class C{  public int error_sym(){  return 1;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public static boolean isEmptyOrBlanks(String string){  if (string == null || string.length() == 0) {    return true;  }  for (int i=0; i < string.length(); i++) {    char c=string.charAt(i);    if (!Character.isWhitespace(c)) {      return false;    }  }  return true;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set networkData=");  String dataType=np.getWordMatchesIgnoringCase(ClassificationType.Taxonomy + " " + ClassificationType.SEED+ " "+ ClassificationType.KEGG+ " "+ ClassificationType.COG);  np.matchIgnoreCase(";");  ClusterViewer viewer=getViewer();  viewer.setDataType(dataType);  viewer.updateDistances();}  }
class C{  private void movePos(float deltaY){  if ((deltaY < 0 && mPtrIndicator.isInStartPosition())) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("has reached the top"));    }    return;  }  int to=mPtrIndicator.getCurrentPosY() + (int)deltaY;  if (mPtrIndicator.willOverTop(to)) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("over top"));    }    to=PtrIndicator.POS_START;  }  mPtrIndicator.setCurrentPos(to);  int change=to - mPtrIndicator.getLastPosY();  updatePos(change);}  }
class C{  private static boolean isProductInventoryAvailableByFacility(String productId,String inventoryFacilityId,BigDecimal quantity,LocalDispatcher dispatcher){  BigDecimal availableToPromise=null;  try {    Map<String,Object> result=dispatcher.runSync("getInventoryAvailableByFacility",UtilMisc.toMap("productId",productId,"facilityId",inventoryFacilityId));    availableToPromise=(BigDecimal)result.get("availableToPromiseTotal");    if (availableToPromise == null) {      Debug.logWarning("The getInventoryAvailableByFacility service returned a null availableToPromise, the error message was:\n" + result.get(ModelService.ERROR_MESSAGE),module);      return false;    }  } catch (  GenericServiceException e) {    Debug.logWarning(e,"Error invoking getInventoryAvailableByFacility service in isCatalogInventoryAvailable",module);    return false;  }  if (availableToPromise.compareTo(quantity) >= 0) {    if (Debug.infoOn())     Debug.logInfo("Inventory IS available in facility with id " + inventoryFacilityId + " for product id "+ productId+ "; desired quantity is "+ quantity+ ", available quantity is "+ availableToPromise,module);    return true;  } else {    if (Debug.infoOn())     Debug.logInfo("Returning false because there is insufficient inventory available in facility with id " + inventoryFacilityId + " for product id "+ productId+ "; desired quantity is "+ quantity+ ", available quantity is "+ availableToPromise,module);    return false;  }}  }
class C{  private static byte[] convert16To8Bits(byte[] samples16Bit){  byte[] samples8Bit=new byte[samples16Bit.length / 2];  for (int i=0, j=0; i < samples16Bit.length; i+=2, j++) {    int sample=(0x000000FF & samples16Bit[i]);    samples8Bit[j]=(byte)(sample + 128);  }  return samples8Bit;}  }
class C{  @Override public boolean accept(File pathname){  String suffix=Basic.getSuffix(pathname.getName()).toLowerCase();  if (suffix.startsWith(".rma")) {    try (InputReader r=new InputReader(pathname,null,null,true)){      int magicNumber=r.readInt();      int version=r.readInt();      return magicNumber == RMA2File.MAGIC_NUMBER && (version == 2 || version == 3);    } catch (    Exception ex) {    }  }  return false;}  }
class C{  public SizeAnimator(String group){  super(group);}  }
class C{  private String buildText(boolean useCurrentValue){  StringBuilder itemsText=new StringBuilder();  int addItems=visibleItems / 2 + 1;  for (int i=currentItem - addItems; i <= currentItem + addItems; i++) {    if (useCurrentValue || i != currentItem) {      String text=getTextItem(i);      if (text != null) {        itemsText.append(text);      }    }    if (i < currentItem + addItems) {      itemsText.append("\n");    }  }  return itemsText.toString();}  }
class C{  public void addAll(@NonNull List<Group> groups){  if (groups.contains(null))   throw new RuntimeException("List of groups can't contain null!");  int itemCountBeforeGroup=getItemCount();  int additionalSize=0;  for (  Group group : groups) {    additionalSize+=group.getItemCount();    group.setGroupDataObserver(this);  }  this.groups.addAll(groups);  notifyItemRangeInserted(itemCountBeforeGroup,additionalSize);}  }
class C{  private static byte[] toBytes(Object o) throws IOException {  ByteArrayOutputStream out=null;  ObjectOutputStream d=null;  try {    out=new ByteArrayOutputStream();    d=new ObjectOutputStream(out);    d.writeObject(o);    d.flush();    return out.toByteArray();  }  finally {    if (d != null) {      d.close();    }    if (out != null) {      out.close();    }  }}  }
class C{  private void determineLMDirection(double[] qy,double[] diag,double[] lmDiag,InternalData internalData,int solvedCols,double[] work,double[] lmDir){  final int[] permutation=internalData.permutation;  final double[][] weightedJacobian=internalData.weightedJacobian;  final double[] diagR=internalData.diagR;  for (int j=0; j < solvedCols; ++j) {    int pj=permutation[j];    for (int i=j + 1; i < solvedCols; ++i) {      weightedJacobian[i][pj]=weightedJacobian[j][permutation[i]];    }    lmDir[j]=diagR[pj];    work[j]=qy[j];  }  for (int j=0; j < solvedCols; ++j) {    int pj=permutation[j];    double dpj=diag[pj];    if (dpj != 0) {      Arrays.fill(lmDiag,j + 1,lmDiag.length,0);    }    lmDiag[j]=dpj;    double qtbpj=0;    for (int k=j; k < solvedCols; ++k) {      int pk=permutation[k];      if (lmDiag[k] != 0) {        final double sin;        final double cos;        double rkk=weightedJacobian[k][pk];        if (FastMath.abs(rkk) < FastMath.abs(lmDiag[k])) {          final double cotan=rkk / lmDiag[k];          sin=1.0 / FastMath.sqrt(1.0 + cotan * cotan);          cos=sin * cotan;        } else {          final double tan=lmDiag[k] / rkk;          cos=1.0 / FastMath.sqrt(1.0 + tan * tan);          sin=cos * tan;        }        weightedJacobian[k][pk]=cos * rkk + sin * lmDiag[k];        final double temp=cos * work[k] + sin * qtbpj;        qtbpj=-sin * work[k] + cos * qtbpj;        work[k]=temp;        for (int i=k + 1; i < solvedCols; ++i) {          double rik=weightedJacobian[i][pk];          final double temp2=cos * rik + sin * lmDiag[i];          lmDiag[i]=-sin * rik + cos * lmDiag[i];          weightedJacobian[i][pk]=temp2;        }      }    }    lmDiag[j]=weightedJacobian[j][permutation[j]];    weightedJacobian[j][permutation[j]]=lmDir[j];  }  int nSing=solvedCols;  for (int j=0; j < solvedCols; ++j) {    if ((lmDiag[j] == 0) && (nSing == solvedCols)) {      nSing=j;    }    if (nSing < solvedCols) {      work[j]=0;    }  }  if (nSing > 0) {    for (int j=nSing - 1; j >= 0; --j) {      int pj=permutation[j];      double sum=0;      for (int i=j + 1; i < nSing; ++i) {        sum+=weightedJacobian[i][pj] * work[i];      }      work[j]=(work[j] - sum) / lmDiag[j];    }  }  for (int j=0; j < lmDir.length; ++j) {    lmDir[permutation[j]]=work[j];  }}  }
class C{  public static void verifyWhichActivityToSwitch(Context mContext,String source,String dest){  UserInfoActivity.start(mContext,dest);}  }
class C{  public ServiceInfo(){}  }
class C{  public A wrap(T instance){  return wrapper.apply(instance);}  }
class C{  public static void endFlight(AirMapFlight flight,@Nullable AirMapCallback<AirMapFlight> callback){  FlightService.endFlight(flight,callback);}  }
class C{  public StringProperty lastReceivedPayloadProperty(){  return lastReceivedPayload;}  }
class C{  public static Map<String,Object> sendOrderBackorderNotification(DispatchContext ctx,Map<String,? extends Object> context){  return sendOrderNotificationScreen(ctx,context,"PRDS_ODR_BACKORDER");}  }
class C{  public static double[] autoCorrelateWithZeroPadding(final double[] signal){  int n=MathUtils.closestPowerOfTwoAbove(2 * signal.length);  double[] fftSignal=new double[n];  System.arraycopy(signal,0,fftSignal,0,signal.length);  double[] fftAutocorr=autoCorrelate(fftSignal);  double[] result=new double[signal.length];  int halfLength=signal.length / 2;  int odd=signal.length % 2;  System.arraycopy(fftAutocorr,n - halfLength,result,0,halfLength);  System.arraycopy(fftAutocorr,0,result,halfLength,halfLength + odd);  return result;}  }
class C{  public static <T>T[] concat(T[] first,T[] second){  T[] result=Arrays.copyOf(first,first.length + second.length);  System.arraycopy(second,0,result,first.length,second.length);  return result;}  }
class C{  private List<List<Sweet>> sortSweets(List<Sweet> messySweets,double colStep){  List<List<Sweet>> grid=new ArrayList<>();  minHeight=Integer.MAX_VALUE;  minWidth=Integer.MAX_VALUE;  for (  Sweet sweet : messySweets) {    if (sweet.getY() < minHeight) {      minHeight=(int)sweet.getY();    }    if (sweet.getX() < minWidth) {      minWidth=(int)sweet.getX();    }  }  fillGrid(messySweets,colStep,grid);  return grid;}  }
class C{  private long calcBezier(float interpolatedTime,float p0,float p1,float p2){  return Math.round((Math.pow((1 - interpolatedTime),2) * p0) + (2 * (1 - interpolatedTime) * interpolatedTime* p1) + (Math.pow(interpolatedTime,2) * p2));}  }
class C{  public static int nextLesserValueToTarget(int currentIndex,FixedLengthDimensionDataChunk dimColumnDataChunk,byte[] compareValue){  while (currentIndex - 1 >= 0 && ByteUtil.UnsafeComparer.INSTANCE.compareTo(dimColumnDataChunk.getCompleteDataChunk(),(currentIndex - 1) * compareValue.length,compareValue.length,compareValue,0,compareValue.length) >= 0) {    --currentIndex;  }  return --currentIndex;}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set networkdata=" + ClassificationType.SEED + ";");}  }
class C{  public static void writeByteArrayToFile(File file,byte[] data,boolean append) throws IOException {  OutputStream out=null;  try {    out=openOutputStream(file,append);    out.write(data);    out.close();  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  private final boolean eq(long v1,long v2){  return v1 == v2;}  }
class C{  public void configHandler(HandlerLoader handlerLoader){}  }
class C{  public Map<K,V> pop(){  if (this.stackList.size() > 1) {    return stackList.remove(0);  } else {    return null;  }}  }
class C{  public <T>Builder replace(@Nullable Section<T> toReplace,Section<T> replaceWith){  if (toReplace == null) {    return add(replaceWith);  }  int i=sections.indexOf(toReplace);  if (i == -1) {    throw new IllegalArgumentException("Section not in this builder.");  }  sections.remove(i);  sections.add(i,replaceWith);  return this;}  }
class C{  private void updateRingColor(float interpolatedTime,Ring ring){  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));  }}  }
class C{  public static int parseInt(char[] chars,int start,int length){  int end=start + length;  int negMul=-1;  int i=start;  if (length > 0) {    char c=chars[i];    if (c == '-') {      negMul=1;      i++;    } else     if (c == '+') {      i++;    }  } else {    throw new NumberFormatException("cannot convert empty string to int");  }  int result=0;  for (; i < end; i++) {    char c=chars[i];    int digit=c - '0';    if (digit >= 10 || digit < 0) {      throw newNumberFormatException("invalid integer representation",chars,start,length);    }    int newResult=result * 10 - digit;    if (newResult > result) {      throw newNumberFormatException("overflow",chars,start,length);    }    result=newResult;  }  if ((result == 0) && chars[i - 1] != '0') {    throw newNumberFormatException("invalid integer representation",chars,start,length);  }  if ((result == Integer.MIN_VALUE) && negMul == 1) {    throw newNumberFormatException("overflow",chars,start,length);  }  return negMul * result;}  }
class C{  public static boolean isTableExists(String tableName,SQLiteDatabase db){  boolean exist;  try {    exist=BaseUtility.containsIgnoreCases(findAllTableNames(db),tableName);  } catch (  Exception e) {    e.printStackTrace();    exist=false;  }  return exist;}  }
class C{  public static LineString lineString(Point first,Point second,Point... morePoints){  Point[] points=new Point[2 + morePoints.length];  points[0]=Assert.argumentNotNull(first,"first");  points[1]=Assert.argumentNotNull(second,"second");  for (int i=0; i < morePoints.length; i++)   points[i + 2]=morePoints[i];  return lineString(points);}  }
class C{  @Override public void printStackTrace(PrintWriter pw){  super.printStackTrace(pw);  if (nested != null) {    nested.printStackTrace(pw);  }}  }
class C{  public ImageSize scale(float scale){  return new ImageSize((int)(width * scale),(int)(height * scale));}  }
class C{  public void write(DataOutputStream out) throws IOException, jasError {  boolean needAnno=false;  if (visAnnotAttr != null || invisAnnotAttr != null)   needAnno=true;  for (Iterator i=methods.iterator(); i.hasNext(); ) {    Method m=(Method)i.next();    if (m.invis_annot_attr != null || m.vis_annot_attr != null || m.param_invis_annot_attr != null || m.param_vis_annot_attr != null)     needAnno=true;  }  for (Iterator i=vars.iterator(); i.hasNext(); ) {    Var f=(Var)i.next();    if (f.invis_annot_attr != null || f.vis_annot_attr != null)     needAnno=true;  }  if (needAnno)   requireJava1_4();  out.writeInt(magic);  out.writeShort(version_lo);  out.writeShort(version_hi);  int curidx=1;  cpe_index=new Hashtable();  for (Enumeration e=cpe.elements(); e.hasMoreElements(); ) {    CP tmp=(CP)(e.nextElement());    cpe_index.put(tmp.getUniq(),new Integer(curidx));    curidx++;    if ((tmp instanceof LongCP) || (tmp instanceof DoubleCP))     curidx++;  }  out.writeShort((short)curidx);  for (Enumeration e=cpe.elements(); e.hasMoreElements(); ) {    CP now=(CP)(e.nextElement());    now.write(this,out);  }  out.writeShort(class_access);  out.writeShort(getCPIndex(this_class));  if (hasSuperClass) {    out.writeShort(getCPIndex(super_class));  } else {    out.writeShort(0);  }  out.writeShort(interfaces.size());  for (Enumeration e=interfaces.elements(); e.hasMoreElements(); ) {    CP c=(CP)(e.nextElement());    out.writeShort(getCPIndex(c));  }  out.writeShort(vars.size());  for (Enumeration e=vars.elements(); e.hasMoreElements(); ) {    Var v=(Var)(e.nextElement());    v.write(this,out);  }  out.writeShort(methods.size());  for (Enumeration e=methods.elements(); e.hasMoreElements(); ) {    Method m=(Method)(e.nextElement());    m.write(this,out);  }  short numExtra=0;  if (source != null) {    numExtra=1;  }  numExtra+=generic.size();  if (inner_class_attr != null) {    numExtra++;  }  if (isClassSynth()) {    numExtra++;  }  if (deprAttr != null) {    numExtra++;  }  if (sigAttr != null) {    numExtra++;  }  if (visAnnotAttr != null) {    numExtra++;  }  if (invisAnnotAttr != null) {    numExtra++;  }  if (encl_meth_attr != null) {    numExtra++;  }  if (bsm_attr != null) {    numExtra++;  }  out.writeShort(numExtra);  if (source != null) {    source.write(this,out);  }  for (Enumeration gen=generic.elements(); gen.hasMoreElements(); ) {    GenericAttr gattr=(GenericAttr)gen.nextElement();    gattr.write(this,out);  }  if (isClassSynth()) {    synthAttr.write(this,out);  }  if (deprAttr != null) {    deprAttr.write(this,out);  }  if (sigAttr != null) {    sigAttr.write(this,out);  }  if (encl_meth_attr != null) {    encl_meth_attr.write(this,out);  }  if (visAnnotAttr != null) {    visAnnotAttr.write(this,out);  }  if (invisAnnotAttr != null) {    invisAnnotAttr.write(this,out);  }  if (inner_class_attr != null) {    inner_class_attr.write(this,out);  }  if (bsm_attr != null) {    bsm_attr.write(this,out);  }  out.flush();}  }
class C{  public MessagesGetLongPollHistoryQuery fields(EnumParam... value){  return unsafeParam("fields",value);}  }
class C{  public static X509Certificate decodeCertificate(String certificate) throws CertificateException {  certificate=certificate != null ? certificate.trim() : null;  if (certificate != null && (certificate=certificate.trim()).length() > 0) {    if (!certificate.startsWith("-----BEGIN")) {      String cert_begin="-----BEGIN CERTIFICATE-----\n";      String end_cert="\n-----END CERTIFICATE-----";      certificate=String.format("%s%s%s",cert_begin,certificate,end_cert);    }    return decodeCertificate(certificate.getBytes());  }  return null;}  }
class C{  private CommandOutputWithStatus gitAllowNonZeroExit(Iterable<String> params) throws RepoException {  try {    return executeGit(getCwd(),addGitDirAndWorkTreeParams(params),environment,verbose);  } catch (  BadExitStatusWithOutputException e) {    CommandOutputWithStatus output=e.getOutput();    int exitCode=e.getOutput().getTerminationStatus().getExitCode();    if (NON_CRASH_ERROR_EXIT_CODES.contains(exitCode)) {      return output;    }    throw new RepoException("Error executing 'git': " + e.getMessage() + ". Stderr: \n"+ output.getStderr(),e);  }catch (  CommandException e) {    throw new RepoException("Error executing 'git': " + e.getMessage(),e);  }}  }
class C{  @Override public void channelDisconnected(ChannelHandlerContext ctx,ChannelStateEvent e) throws Exception {  log.info("Channel disconnected IP: " + inetAddress.getHostAddress());}  }
class C{  public boolean hasFinally(){  return getFinallyOpt().getNumChild() != 0;}  }
class C{  @Override public void onMapReady(GoogleMap googleMap){  mMap=googleMap;  LatLng sydney=new LatLng(-34,151);  mMap.addMarker(new MarkerOptions().position(sydney).title("Marker in Sydney"));  mMap.moveCamera(CameraUpdateFactory.newLatLng(sydney));}  }
class C{  public Date modifiedDate(String path) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {synchronized (lock) {    if (!connected) {      throw new IllegalStateException("Client not connected");    }    if (!authenticated) {      throw new IllegalStateException("Client not authenticated");    }    communication.sendFTPCommand("MDTM " + path);    FTPReply r=communication.readFTPReply();    touchAutoNoopTimer();    if (!r.isSuccessCode()) {      throw new FTPException(r);    }    String[] messages=r.getMessages();    if (messages.length != 1) {      throw new FTPIllegalReplyException();    } else {      try {        return MDTM_DATE_FORMAT.parse(messages[0]);      } catch (      ParseException e) {        throw new FTPIllegalReplyException();      }    }  }}  }
class C{  public WallEditQuery friendsOnly(Boolean value){  return unsafeParam("friends_only",value);}  }
class C{  @Override public Object clone(){  return this.copy();}  }
class C{  @Override public String toString(){  return " at character " + this.myIndex + " of "+ this.mySource;}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public void reset(){  MATRIX[MSCALE_X]=1;  MATRIX[MSKEW_X]=0;  MATRIX[MTRANS_X]=0;  MATRIX[MSKEW_Y]=1;  MATRIX[MSCALE_Y]=0;  MATRIX[MTRANS_Y]=0;  MATRIX[MPERSP_0]=0;  MATRIX[MPERSP_1]=0;  MATRIX[MPERSP_2]=1;}  }
class C{  private static boolean contains(Entry[] eSet,Entry e){  for (int i=0; i < eSet.length; i++)   if (equal(eSet[i],e))   return true;  return false;}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  @Override public synchronized void write(int b){  int inBufferPos=count - filledBufferSum;  if (inBufferPos == currentBuffer.length) {    needNewBuffer(count + 1);    inBufferPos=0;  }  currentBuffer[inBufferPos]=(byte)b;  count++;}  }
class C{  public static double log2(double x){  return Math.log(x) / LOG2;}  }
class C{  public static Map<String,Object> scaleImageInAllSize(Map<String,? extends Object> context,String filenameToUse,String viewType,String viewNumber) throws IllegalArgumentException, ImagingOpException, IOException, JDOMException {  Locale locale=(Locale)context.get("locale");  int index;  Map<String,Map<String,String>> imgPropertyMap=FastMap.newInstance();  BufferedImage bufImg, bufNewImg;  double imgHeight, imgWidth;  Map<String,String> imgUrlMap=FastMap.newInstance();  Map<String,Object> resultXMLMap=FastMap.newInstance();  Map<String,Object> resultBufImgMap=FastMap.newInstance();  Map<String,Object> resultScaleImgMap=FastMap.newInstance();  Map<String,Object> result=FastMap.newInstance();  String imgPropertyFullPath=System.getProperty("ofbiz.home") + "/applications/product/config/ImageProperties.xml";  resultXMLMap.putAll(ImageTransform.getXMLValue(imgPropertyFullPath,locale));  if (resultXMLMap.containsKey("responseMessage") && resultXMLMap.get("responseMessage").equals("success")) {    imgPropertyMap.putAll(UtilGenerics.<Map<String,Map<String,String>>>cast(resultXMLMap.get("xml")));  } else {    String errMsg=UtilProperties.getMessage(resource,"ScaleImage.unable_to_parse",locale) + " : ImageProperties.xml";    Debug.logError(errMsg,module);    result.put("errorMessage",errMsg);    return result;  }  index=filenameToUse.lastIndexOf(".");  String imgExtension=filenameToUse.substring(index + 1);  Map<String,Object> imageContext=FastMap.newInstance();  imageContext.putAll(context);  imageContext.put("tenantId",((Delegator)context.get("delegator")).getDelegatorTenantId());  String imageServerPath=FlexibleStringExpander.expandString(EntityUtilProperties.getPropertyValue("catalog","image.server.path",(Delegator)context.get("delegator")),imageContext);  String imageUrlPrefix=FlexibleStringExpander.expandString(EntityUtilProperties.getPropertyValue("catalog","image.url.prefix",(Delegator)context.get("delegator")),imageContext);  imageServerPath=imageServerPath.endsWith("/") ? imageServerPath.substring(0,imageServerPath.length() - 1) : imageServerPath;  imageUrlPrefix=imageUrlPrefix.endsWith("/") ? imageUrlPrefix.substring(0,imageUrlPrefix.length() - 1) : imageUrlPrefix;  FlexibleStringExpander filenameExpander;  String fileLocation=null;  String type=null;  String id=null;  if (viewType.toLowerCase().contains("main")) {    String filenameFormat=EntityUtilProperties.getPropertyValue("catalog","image.filename.format",(Delegator)context.get("delegator"));    filenameExpander=FlexibleStringExpander.getInstance(filenameFormat);    id=(String)context.get("productId");    fileLocation=filenameExpander.expandString(UtilMisc.toMap("location","products","id",id,"type","original"));  } else   if (viewType.toLowerCase().contains("additional") && viewNumber != null && !viewNumber.equals("0")) {    String filenameFormat=EntityUtilProperties.getPropertyValue("catalog","image.filename.additionalviewsize.format",(Delegator)context.get("delegator"));    filenameExpander=FlexibleStringExpander.getInstance(filenameFormat);    id=(String)context.get("productId");    if (filenameFormat.endsWith("${id}")) {      id=id + "_View_" + viewNumber;    } else {      viewType="additional" + viewNumber;    }    fileLocation=filenameExpander.expandString(UtilMisc.toMap("location","products","id",id,"viewtype",viewType,"sizetype","original"));  } else {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductImageViewType",UtilMisc.toMap("viewType",type),locale));  }  if (fileLocation.lastIndexOf("/") != -1) {    fileLocation.substring(0,fileLocation.lastIndexOf("/") + 1);  }  resultBufImgMap.putAll(ImageTransform.getBufferedImage(imageServerPath + "/" + fileLocation+ "."+ imgExtension,locale));  if (resultBufImgMap.containsKey("responseMessage") && resultBufImgMap.get("responseMessage").equals("success")) {    bufImg=(BufferedImage)resultBufImgMap.get("bufferedImage");    imgHeight=bufImg.getHeight();    imgWidth=bufImg.getWidth();    if (imgHeight == 0.0 || imgWidth == 0.0) {      String errMsg=UtilProperties.getMessage(resource,"ScaleImage.one_current_image_dimension_is_null",locale) + " : imgHeight = " + imgHeight+ " ; imgWidth = "+ imgWidth;      Debug.logError(errMsg,module);      result.put("errorMessage",errMsg);      return result;    }    for (    Map.Entry<String,Map<String,String>> entry : imgPropertyMap.entrySet()) {      String sizeType=entry.getKey();      resultScaleImgMap.putAll(ImageTransform.scaleImage(bufImg,imgHeight,imgWidth,imgPropertyMap,sizeType,locale));      if (resultScaleImgMap.containsKey("responseMessage") && resultScaleImgMap.get("responseMessage").equals("success")) {        bufNewImg=(BufferedImage)resultScaleImgMap.get("bufferedImage");        String newFileLocation=null;        filenameToUse=sizeType + filenameToUse.substring(filenameToUse.lastIndexOf("."));        if (viewType.toLowerCase().contains("main")) {          newFileLocation=filenameExpander.expandString(UtilMisc.toMap("location","products","id",id,"type",sizeType));        } else         if (viewType.toLowerCase().contains("additional")) {          newFileLocation=filenameExpander.expandString(UtilMisc.toMap("location","products","id",id,"viewtype",viewType,"sizetype",sizeType));        }        String newFilePathPrefix="";        if (newFileLocation.lastIndexOf("/") != -1) {          newFilePathPrefix=newFileLocation.substring(0,newFileLocation.lastIndexOf("/") + 1);        }        String targetDirectory=imageServerPath + "/" + newFilePathPrefix;        try {          File targetDir=new File(targetDirectory);          if (!targetDir.exists()) {            boolean created=targetDir.mkdirs();            if (!created) {              String errMsg=UtilProperties.getMessage(resource,"ScaleImage.unable_to_create_target_directory",locale) + " - " + targetDirectory;              Debug.logFatal(errMsg,module);              return ServiceUtil.returnError(errMsg);            }          } else           if (newFileLocation.endsWith("/" + id)) {            try {              File[] files=targetDir.listFiles();              for (              File file : files) {                if (file.isFile() && file.getName().startsWith(id)) {                  file.delete();                }              }            } catch (            SecurityException e) {              Debug.logError(e,module);            }          }        } catch (        NullPointerException e) {          Debug.logError(e,module);        }        try {          ImageIO.write(bufNewImg,imgExtension,new File(imageServerPath + "/" + newFileLocation+ "."+ imgExtension));        } catch (        IllegalArgumentException e) {          String errMsg=UtilProperties.getMessage(resource,"ScaleImage.one_parameter_is_null",locale) + e.toString();          Debug.logError(errMsg,module);          result.put("errorMessage",errMsg);          return result;        }catch (        IOException e) {          String errMsg=UtilProperties.getMessage(resource,"ScaleImage.error_occurs_during_writing",locale) + e.toString();          Debug.logError(errMsg,module);          result.put("errorMessage",errMsg);          return result;        }        if (sizeTypeList.contains(sizeType)) {          String imageUrl=imageUrlPrefix + "/" + newFileLocation+ "."+ imgExtension;          imgUrlMap.put(sizeType,imageUrl);        }      }    }    result.put("responseMessage","success");    result.put("imageUrlMap",imgUrlMap);    result.put("original",resultBufImgMap);    return result;  } else {    String errMsg=UtilProperties.getMessage(resource,"ScaleImage.unable_to_scale_original_image",locale) + " : " + filenameToUse;    Debug.logError(errMsg,module);    result.put("errorMessage",errMsg);    return ServiceUtil.returnError(errMsg);  }}  }
class C{  private ImportSummary saveDataValueSet(ImportOptions importOptions,TaskId id,DataValueSet dataValueSet){  Clock clock=new Clock(log).startClock().logTime("Starting data value import, options: " + importOptions);  notifier.clear(id).notify(id,"Process started");  ImportSummary summary=new ImportSummary();  I18n i18n=i18nManager.getI18n();  importOptions=importOptions != null ? importOptions : ImportOptions.getDefaultImportOptions();  log.info("Import options: " + importOptions);  IdScheme dvSetIdScheme=IdScheme.from(dataValueSet.getIdSchemeProperty());  IdScheme dvSetDataElementIdScheme=IdScheme.from(dataValueSet.getDataElementIdSchemeProperty());  IdScheme dvSetOrgUnitIdScheme=IdScheme.from(dataValueSet.getOrgUnitIdSchemeProperty());  log.info("Data value set scheme: " + dvSetIdScheme + ", data element scheme: "+ dvSetDataElementIdScheme+ ", org unit scheme: "+ dvSetOrgUnitIdScheme);  IdScheme idScheme=dvSetIdScheme.isNotNull() ? dvSetIdScheme : importOptions.getIdSchemes().getIdScheme();  IdScheme dataElementIdScheme=dvSetDataElementIdScheme.isNotNull() ? dvSetDataElementIdScheme : importOptions.getIdSchemes().getDataElementIdScheme();  IdScheme orgUnitIdScheme=dvSetOrgUnitIdScheme.isNotNull() ? dvSetOrgUnitIdScheme : importOptions.getIdSchemes().getOrgUnitIdScheme();  log.info("Scheme: " + idScheme + ", data element scheme: "+ dataElementIdScheme+ ", org unit scheme: "+ orgUnitIdScheme);  ImportStrategy strategy=dataValueSet.getStrategy() != null ? ImportStrategy.valueOf(dataValueSet.getStrategy()) : importOptions.getImportStrategy();  boolean dryRun=dataValueSet.getDryRun() != null ? dataValueSet.getDryRun() : importOptions.isDryRun();  boolean skipExistingCheck=importOptions.isSkipExistingCheck();  boolean strictPeriods=importOptions.isStrictPeriods() || (Boolean)systemSettingManager.getSystemSetting(SettingKey.DATA_IMPORT_STRICT_PERIODS);  boolean strictCategoryOptionCombos=importOptions.isStrictCategoryOptionCombos() || (Boolean)systemSettingManager.getSystemSetting(SettingKey.DATA_IMPORT_STRICT_CATEGORY_OPTION_COMBOS);  boolean strictAttrOptionCombos=importOptions.isStrictAttributeOptionCombos() || (Boolean)systemSettingManager.getSystemSetting(SettingKey.DATA_IMPORT_STRICT_ATTRIBUTE_OPTION_COMBOS);  boolean strictOrgUnits=importOptions.isStrictOrganisationUnits() || (Boolean)systemSettingManager.getSystemSetting(SettingKey.DATA_IMPORT_STRICT_ORGANISATION_UNITS);  boolean requireCategoryOptionCombo=importOptions.isRequireCategoryOptionCombo() || (Boolean)systemSettingManager.getSystemSetting(SettingKey.DATA_IMPORT_REQUIRE_CATEGORY_OPTION_COMBO);  boolean requireAttrOptionCombo=importOptions.isRequireAttributeOptionCombo() || (Boolean)systemSettingManager.getSystemSetting(SettingKey.DATA_IMPORT_REQUIRE_ATTRIBUTE_OPTION_COMBO);  CachingMap<String,DataElement> dataElementMap=new CachingMap<>();  CachingMap<String,OrganisationUnit> orgUnitMap=new CachingMap<>();  CachingMap<String,DataElementCategoryOptionCombo> optionComboMap=new CachingMap<>();  CachingMap<String,DataSet> dataElementDataSetMap=new CachingMap<>();  CachingMap<String,Period> periodMap=new CachingMap<>();  CachingMap<String,Set<PeriodType>> dataElementPeriodTypesMap=new CachingMap<>();  CachingMap<String,Set<DataElementCategoryOptionCombo>> dataElementCategoryOptionComboMap=new CachingMap<>();  CachingMap<String,Set<DataElementCategoryOptionCombo>> dataElementAttrOptionComboMap=new CachingMap<>();  CachingMap<String,Boolean> dataElementOrgUnitMap=new CachingMap<>();  CachingMap<String,Boolean> periodLockedMap=new CachingMap<>();  CachingMap<String,Period> dataElementLatestFuturePeriodMap=new CachingMap<>();  CachingMap<String,Boolean> orgUnitInHierarchyMap=new CachingMap<>();  CachingMap<String,DateRange> attrOptionComboDateRangeMap=new CachingMap<>();  CachingMap<String,Boolean> attrOptionComboOrgUnitMap=new CachingMap<>();  CachingMap<String,Optional<Set<String>>> dataElementOptionsMap=new CachingMap<>();  CachingMap<String,Boolean> approvalMap=new CachingMap<>();  CachingMap<String,Boolean> lowestApprovalLevelMap=new CachingMap<>();  IdentifiableObjectCallable<DataElement> dataElementCallable=new IdentifiableObjectCallable<>(identifiableObjectManager,DataElement.class,dataElementIdScheme,null);  IdentifiableObjectCallable<OrganisationUnit> orgUnitCallable=new IdentifiableObjectCallable<>(identifiableObjectManager,OrganisationUnit.class,orgUnitIdScheme,trimToNull(dataValueSet.getOrgUnit()));  IdentifiableObjectCallable<DataElementCategoryOptionCombo> optionComboCallable=new CategoryOptionComboAclCallable(categoryService,idScheme,null);  IdentifiableObjectCallable<Period> periodCallable=new PeriodCallable(periodService,null,trimToNull(dataValueSet.getPeriod()));  if (importOptions.isPreheatCacheDefaultFalse()) {    dataElementMap.load(identifiableObjectManager.getAll(DataElement.class),null);    orgUnitMap.load(identifiableObjectManager.getAll(OrganisationUnit.class),null);    optionComboMap.load(identifiableObjectManager.getAll(DataElementCategoryOptionCombo.class),null);  }  DataSet dataSet=dataValueSet.getDataSet() != null ? identifiableObjectManager.getObject(DataSet.class,idScheme,dataValueSet.getDataSet()) : null;  Date completeDate=parseDate(dataValueSet.getCompleteDate());  Period outerPeriod=periodMap.get(trimToNull(dataValueSet.getPeriod()),periodCallable);  OrganisationUnit outerOrgUnit=orgUnitMap.get(trimToNull(dataValueSet.getOrgUnit()),orgUnitCallable);  DataElementCategoryOptionCombo fallbackCategoryOptionCombo=categoryService.getDefaultDataElementCategoryOptionCombo();  DataElementCategoryOptionCombo outerAttrOptionCombo=null;  if (dataValueSet.getAttributeOptionCombo() != null) {    outerAttrOptionCombo=optionComboMap.get(trimToNull(dataValueSet.getAttributeOptionCombo()),optionComboCallable.setId(trimToNull(dataValueSet.getAttributeOptionCombo())));  } else   if (dataValueSet.getAttributeCategoryOptions() != null) {    outerAttrOptionCombo=inputUtils.getAttributeOptionCombo(dataSet.getCategoryCombo(),new HashSet<String>(dataValueSet.getAttributeCategoryOptions()),idScheme);  }  if (dataSet == null && trimToNull(dataValueSet.getDataSet()) != null) {    summary.getConflicts().add(new ImportConflict(dataValueSet.getDataSet(),"Data set not found or not accessible"));    summary.setStatus(ImportStatus.ERROR);  }  if (outerOrgUnit == null && trimToNull(dataValueSet.getOrgUnit()) != null) {    summary.getConflicts().add(new ImportConflict(dataValueSet.getDataSet(),"Org unit not found or not accessible"));    summary.setStatus(ImportStatus.ERROR);  }  if (outerAttrOptionCombo == null && trimToNull(dataValueSet.getAttributeOptionCombo()) != null) {    summary.getConflicts().add(new ImportConflict(dataValueSet.getDataSet(),"Attribute option combo not found or not accessible"));    summary.setStatus(ImportStatus.ERROR);  }  if (ImportStatus.ERROR.equals(summary.getStatus())) {    summary.setDescription("Import process was aborted");    notifier.notify(id,INFO,"Import process aborted",true).addTaskSummary(id,summary);    dataValueSet.close();    return summary;  }  if (dataSet != null && completeDate != null) {    notifier.notify(id,"Completing data set");    handleComplete(dataSet,completeDate,outerPeriod,outerOrgUnit,fallbackCategoryOptionCombo,summary);  } else {    summary.setDataSetComplete(Boolean.FALSE.toString());  }  final String currentUser=currentUserService.getCurrentUsername();  final Set<OrganisationUnit> currentOrgUnits=currentUserService.getCurrentUserOrganisationUnits();  BatchHandler<DataValue> dataValueBatchHandler=batchHandlerFactory.createBatchHandler(DataValueBatchHandler.class).init();  BatchHandler<DataValueAudit> auditBatchHandler=batchHandlerFactory.createBatchHandler(DataValueAuditBatchHandler.class).init();  int importCount=0;  int updateCount=0;  int deleteCount=0;  int totalCount=0;  Date now=new Date();  clock.logTime("Validated outer meta-data");  notifier.notify(id,"Importing data values");  while (dataValueSet.hasNextDataValue()) {    org.hisp.dhis.dxf2.datavalue.DataValue dataValue=dataValueSet.getNextDataValue();    totalCount++;    final DataElement dataElement=dataElementMap.get(trimToNull(dataValue.getDataElement()),dataElementCallable.setId(trimToNull(dataValue.getDataElement())));    final Period period=outerPeriod != null ? outerPeriod : periodMap.get(trimToNull(dataValue.getPeriod()),periodCallable.setId(trimToNull(dataValue.getPeriod())));    final OrganisationUnit orgUnit=outerOrgUnit != null ? outerOrgUnit : orgUnitMap.get(trimToNull(dataValue.getOrgUnit()),orgUnitCallable.setId(trimToNull(dataValue.getOrgUnit())));    DataElementCategoryOptionCombo categoryOptionCombo=optionComboMap.get(trimToNull(dataValue.getCategoryOptionCombo()),optionComboCallable.setId(trimToNull(dataValue.getCategoryOptionCombo())));    DataElementCategoryOptionCombo attrOptionCombo=outerAttrOptionCombo != null ? outerAttrOptionCombo : optionComboMap.get(trimToNull(dataValue.getAttributeOptionCombo()),optionComboCallable.setId(trimToNull(dataValue.getAttributeOptionCombo())));    if (!dataElementMap.isCacheLoaded() && dataElementMap.getCacheMissCount() > CACHE_MISS_THRESHOLD) {      dataElementMap.load(identifiableObjectManager.getAll(DataElement.class),null);      log.info("Data element cache heated after cache miss threshold reached");    }    if (!orgUnitMap.isCacheLoaded() && orgUnitMap.getCacheMissCount() > CACHE_MISS_THRESHOLD) {      orgUnitMap.load(identifiableObjectManager.getAll(OrganisationUnit.class),null);      log.info("Org unit cache heated after cache miss threshold reached");    }    if (dataElement == null) {      summary.getConflicts().add(new ImportConflict(dataValue.getDataElement(),"Data element not found or not accessible"));      continue;    }    if (period == null) {      summary.getConflicts().add(new ImportConflict(dataValue.getPeriod(),"Period not valid"));      continue;    }    if (orgUnit == null) {      summary.getConflicts().add(new ImportConflict(dataValue.getOrgUnit(),"Organisation unit not found or not accessible"));      continue;    }    if (categoryOptionCombo == null && trimToNull(dataValue.getCategoryOptionCombo()) != null) {      summary.getConflicts().add(new ImportConflict(dataValue.getCategoryOptionCombo(),"Category option combo not found or not accessible"));      continue;    }    if (attrOptionCombo == null && trimToNull(dataValue.getAttributeOptionCombo()) != null) {      summary.getConflicts().add(new ImportConflict(dataValue.getAttributeOptionCombo(),"Attribute option combo not found or not accessible"));      continue;    }    boolean inUserHierarchy=orgUnitInHierarchyMap.get(orgUnit.getUid(),null);    if (!inUserHierarchy) {      summary.getConflicts().add(new ImportConflict(orgUnit.getUid(),"Organisation unit not in hierarchy of current user: " + currentUser));      continue;    }    if (dataValue.getValue() == null && dataValue.getComment() == null) {      continue;    }    String valueValid=ValidationUtils.dataValueIsValid(dataValue.getValue(),dataElement);    if (valueValid != null) {      summary.getConflicts().add(new ImportConflict(dataValue.getValue(),i18n.getString(valueValid) + ", must match data element type: " + dataElement.getUid()));      continue;    }    String commentValid=ValidationUtils.commentIsValid(dataValue.getComment());    if (commentValid != null) {      summary.getConflicts().add(new ImportConflict("Comment",i18n.getString(commentValid)));      continue;    }    Optional<Set<String>> optionCodes=dataElementOptionsMap.get(dataElement.getUid(),null);    if (optionCodes.isPresent() && !optionCodes.get().contains(dataValue.getValue())) {      summary.getConflicts().add(new ImportConflict(dataValue.getValue(),"Data value is not a valid option of the data element option set: " + dataElement.getUid()));      continue;    }    if (categoryOptionCombo == null) {      if (requireCategoryOptionCombo) {        summary.getConflicts().add(new ImportConflict(dataValue.getValue(),"Category option combo is required but is not specified"));        continue;      } else {        categoryOptionCombo=fallbackCategoryOptionCombo;      }    }    if (attrOptionCombo == null) {      if (requireAttrOptionCombo) {        summary.getConflicts().add(new ImportConflict(dataValue.getValue(),"Attribute option combo is required but is not specified"));        continue;      } else {        attrOptionCombo=fallbackCategoryOptionCombo;      }    }    if (strictPeriods && !dataElementPeriodTypesMap.get(dataElement.getUid(),null).contains(period.getPeriodType())) {      summary.getConflicts().add(new ImportConflict(dataValue.getPeriod(),"Period type of period: " + period.getIsoDate() + " not valid for data element: "+ dataElement.getUid()));      continue;    }    if (strictCategoryOptionCombos && !dataElementCategoryOptionComboMap.get(dataElement.getUid(),null).contains(categoryOptionCombo)) {      summary.getConflicts().add(new ImportConflict(categoryOptionCombo.getUid(),"Category option combo: " + categoryOptionCombo.getUid() + " must be part of category combo of data element: "+ dataElement.getUid()));      continue;    }    if (strictAttrOptionCombos && !dataElementAttrOptionComboMap.get(dataElement.getUid(),null).contains(attrOptionCombo)) {      summary.getConflicts().add(new ImportConflict(attrOptionCombo.getUid(),"Attribute option combo: " + attrOptionCombo.getUid() + " must be part of category combo of data sets of data element: "+ dataElement.getUid()));      continue;    }    if (strictOrgUnits && BooleanUtils.isFalse(dataElementOrgUnitMap.get(dataElement.getUid() + orgUnit.getUid(),null))) {      summary.getConflicts().add(new ImportConflict(orgUnit.getUid(),"Data element: " + dataElement.getUid() + " must be assigned through data sets to organisation unit: "+ orgUnit.getUid()));      continue;    }    boolean zeroInsignificant=ValidationUtils.dataValueIsZeroAndInsignificant(dataValue.getValue(),dataElement);    if (zeroInsignificant) {      summary.getConflicts().add(new ImportConflict(dataValue.getValue(),"Value is zero and not significant, must match data element: " + dataElement.getUid()));      continue;    }    String storedByValid=ValidationUtils.storedByIsValid(dataValue.getStoredBy());    if (storedByValid != null) {      summary.getConflicts().add(new ImportConflict(dataValue.getStoredBy(),i18n.getString(storedByValid)));      continue;    }    String storedBy=dataValue.getStoredBy() == null || dataValue.getStoredBy().trim().isEmpty() ? currentUser : dataValue.getStoredBy();    final DataElementCategoryOptionCombo aoc=attrOptionCombo;    DateRange aocDateRange=attrOptionComboDateRangeMap.get(attrOptionCombo.getUid(),null);    if ((aocDateRange.getStartDate() != null && aocDateRange.getStartDate().compareTo(period.getStartDate()) > 0) || aocDateRange.getEndDate() != null && aocDateRange.getEndDate().compareTo(period.getEndDate()) < 0) {      summary.getConflicts().add(new ImportConflict(orgUnit.getUid(),"Period: " + period.getIsoDate() + " is not within date range of attribute option combo: "+ attrOptionCombo.getUid()));      continue;    }    if (!attrOptionComboOrgUnitMap.get(attrOptionCombo.getUid() + orgUnit.getUid(),null)) {      summary.getConflicts().add(new ImportConflict(orgUnit.getUid(),"Organisation unit: " + orgUnit.getUid() + " is not valid for attribute option combo: "+ attrOptionCombo.getUid()));      continue;    }    final DataSet implicitDataSet=dataSet != null ? dataSet : dataElementDataSetMap.get(dataElement.getUid(),null);    if (implicitDataSet != null) {      if (periodLockedMap.get(implicitDataSet.getUid() + period.getUid() + orgUnit.getUid(),null)) {        summary.getConflicts().add(new ImportConflict(period.getIsoDate(),"Current date is past expiry days for period " + period.getIsoDate() + " and data set: "+ implicitDataSet.getUid()));        continue;      }      Period latestFuturePeriod=dataElementLatestFuturePeriodMap.get(dataElement.getUid(),null);      if (period.isAfter(latestFuturePeriod)) {        summary.getConflicts().add(new ImportConflict(period.getIsoDate(),"Period: " + period.getIsoDate() + " is after latest open future period: "+ latestFuturePeriod.getIsoDate()+ " for data element: "+ dataElement.getUid()));        continue;      }      DataApprovalWorkflow workflow=implicitDataSet.getWorkflow();      if (workflow != null) {        final String workflowPeriodAoc=workflow.getUid() + period.getUid() + attrOptionCombo.getUid();        if (approvalMap.get(orgUnit.getUid() + workflowPeriodAoc,null)) {          summary.getConflicts().add(new ImportConflict(orgUnit.getUid(),"Data is already approved for data set: " + implicitDataSet.getUid() + " period: "+ period.getIsoDate()+ " organisation unit: "+ orgUnit.getUid()+ " attribute option combo: "+ attrOptionCombo.getUid()));          continue;        }      }    }    if (implicitDataSet != null && !implicitDataSet.isValidPeriodForDataEntry(period)) {      summary.getConflicts().add(new ImportConflict(orgUnit.getUid(),"Period: " + period.getIsoDate() + " is not within date range of data set: "+ implicitDataSet.getUid()));      continue;    }    DataValue internalValue=new DataValue();    internalValue.setDataElement(dataElement);    internalValue.setPeriod(period);    internalValue.setSource(orgUnit);    internalValue.setCategoryOptionCombo(categoryOptionCombo);    internalValue.setAttributeOptionCombo(attrOptionCombo);    internalValue.setValue(trimToNull(dataValue.getValue()));    internalValue.setStoredBy(storedBy);    internalValue.setCreated(dataValue.hasCreated() ? parseDate(dataValue.getCreated()) : now);    internalValue.setLastUpdated(dataValue.hasLastUpdated() ? parseDate(dataValue.getLastUpdated()) : now);    internalValue.setComment(trimToNull(dataValue.getComment()));    internalValue.setFollowup(dataValue.getFollowup());    internalValue.setDeleted(BooleanUtils.isTrue(dataValue.getDeleted()));    DataValue existingValue=!skipExistingCheck ? dataValueBatchHandler.findObject(internalValue) : null;    if (!skipExistingCheck && existingValue != null && !existingValue.isDeleted()) {      if (strategy.isCreateAndUpdate() || strategy.isUpdate()) {        DataValueAudit auditValue=new DataValueAudit(internalValue,existingValue.getValue(),storedBy,AuditType.UPDATE);        if (internalValue.isNullValue() || internalValue.isDeleted()) {          internalValue.setDeleted(true);          auditValue.setAuditType(AuditType.DELETE);          deleteCount++;        } else {          updateCount++;        }        if (!dryRun) {          dataValueBatchHandler.updateObject(internalValue);          auditBatchHandler.addObject(auditValue);        }      } else       if (strategy.isDelete()) {        DataValueAudit auditValue=new DataValueAudit(internalValue,existingValue.getValue(),storedBy,AuditType.DELETE);        internalValue.setDeleted(true);        deleteCount++;        if (!dryRun) {          dataValueBatchHandler.updateObject(internalValue);          auditBatchHandler.addObject(auditValue);        }      }    } else {      if (strategy.isCreateAndUpdate() || strategy.isCreate()) {        if (!internalValue.isNullValue()) {          if (existingValue != null && existingValue.isDeleted()) {            importCount++;            if (!dryRun) {              dataValueBatchHandler.updateObject(internalValue);            }          } else {            boolean added=false;            if (!dryRun) {              added=dataValueBatchHandler.addObject(internalValue);            }            if (dryRun || added) {              importCount++;            }          }        }      }    }  }  dataValueBatchHandler.flush();  auditBatchHandler.flush();  int ignores=totalCount - importCount - updateCount- deleteCount;  summary.setImportCount(new ImportCount(importCount,updateCount,ignores,deleteCount));  summary.setStatus(ImportStatus.SUCCESS);  summary.setDescription("Import process completed successfully");  notifier.notify(id,INFO,"Import done",true).addTaskSummary(id,summary);  clock.logTime("Data value import done, total: " + totalCount + ", import: "+ importCount+ ", update: "+ updateCount+ ", delete: "+ deleteCount);  dataValueSet.close();  return summary;}  }
class C{  public static void stopProfilerAndReport(){  profiler.stopCollecting();  try {    String path=CoreProperties.getLoader().getPropertyAsString(VanillaDb.class.getName() + ".PROFILE_OUTPUT_DIR",System.getProperty("user.home"));    File out=new File(path,System.currentTimeMillis() + "_profile.txt");    FileWriter wrFile=new FileWriter(out);    BufferedWriter bwrFile=new BufferedWriter(wrFile);    bwrFile.write(profiler.getTopPackages(30));    bwrFile.newLine();    bwrFile.write(profiler.getTopMethods(30));    bwrFile.newLine();    bwrFile.write(profiler.getTopLines(30));    bwrFile.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void dumpWagonCART(CART cart,String destFile) throws IOException {  System.out.println("Dumping CART to " + destFile + " ...");  DataOutputStream out=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(destFile)));  MaryHeader hdr=new MaryHeader(MaryHeader.CARTS);  hdr.writeTo(out);  out.writeInt(cart.getNumNodes());  String name="";  out.writeUTF(name);  dumpBinary(cart,out);  out.close();  System.out.println(" ... done\n");}  }
class C{  private static double[] computeShannonWeaver(ClassificationViewer viewer,ProgressListener progressListener) throws IOException, CanceledException {  progressListener.setMaximum(2 * viewer.getSelectedNodes().size());  progressListener.setProgress(0);  int numberOfDatasets=viewer.getDocument().getNumberOfSamples();  double[] total=new double[numberOfDatasets];  for (  Node v : viewer.getSelectedNodes()) {    int[] summarized=viewer.getNodeData(v).getSummarized();    for (int i=0; i < summarized.length; i++)     total[i]+=summarized[i];    progressListener.incrementProgress();  }  double[] result=new double[numberOfDatasets];  for (int i=0; i < result.length; i++)   result[0]=0d;  for (  Node v : viewer.getSelectedNodes()) {    int[] summarized=viewer.getNodeData(v).getSummarized();    for (int i=0; i < summarized.length; i++) {      if (summarized[i] > 0) {        double p=summarized[i] / total[i];        result[i]+=p * Math.log(p) / LOG2;      }    }    progressListener.incrementProgress();  }  for (int i=0; i < result.length; i++)   result[i]=-result[i];  return result;}  }
class C{  public Call post(String url,Callback callback){  return post(url,null,callback);}  }
class C{  private VersionParser(){}  }
class C{  public LicensePanel(URL url){  this.url=url;  initComponents();  initAccessibility();  try {    jEditorPane1.setPage(url);  } catch (  IOException exc) {    LOGGER.throwing(LicensePanel.class.getName(),"<init>",exc);  }}  }
class C{  void assignLocalToLocal(Local right,Local left){  localsRemove(left);  localsPutAll(left,locals.get(right));  if (doCheck)   sanityCheck();}  }
class C{  default String resourceId(Entity entity,ResourceType<?> resourceType){  return "resource-" + resourceType.getId() + "-"+ entity.getId();}  }
class C{  @NotNull public AddFaceToFaceListAction addFaceToFaceList(@NotNull String faceListId,@Nullable String userData,@Nullable String targetFace,@NotNull String imageUrl){  Validation.validate(faceListId,"^[a-z0-9_-]{1,64}$",new ParameterValidationException("faceListId","Valid character is letter in lower case or digit or '-' or '_', maximum length is 64."));  Validation.validate(Utils.blankIfNull(userData),1,new ParameterValidationException("userData","The size limit is 1KB"));  return new AddFaceToFaceListAction(cognitiveContext,faceListId,userData,targetFace,imageUrl);}  }
class C{  public static void disableLogging(){  DISABLED=true;}  }
class C{  public void writeTo(IndentingWriter writer,int register) throws IOException {  if (!options.noParameterRegisters) {    if (register >= registerCount - parameterRegisterCount) {      writer.write('p');      writer.printSignedIntAsDec((register - (registerCount - parameterRegisterCount)));      return;    }  }  writer.write('v');  writer.printSignedIntAsDec(register);}  }
class C{  public MacroList(){  this.macrosses=new HashMap<Integer,String>(12);}  }
class C{  private static void computeGappedSequenceBlastP(String readName,String readSequence,String text,Collection<Pair<Integer,String>> insertions,boolean showInsertions,Single<char[]> referenceSequence,Alignment alignment) throws IOException {  int length=Basic.parseInt(grabNext(text,"Length =","Length="));  if (length == 0)   length=10000;  if (referenceSequence.get() == null)   referenceSequence.set(new char[length]);  int startQuery=Basic.parseInt(grabNext(text,"Query:","Query"));  int endQuery=Basic.parseInt(grabLastInLinePassedScore(text,"Query"));  if (readSequence == null)   throw new IOException("Read '" + readName + "': sequence not found");  if (readSequence.length() < Math.max(startQuery,endQuery)) {    throw new IOException("Read '" + readName + "': read length too short: "+ readSequence.length()+ " < "+ Math.max(startQuery,endQuery));  }  int startSubject=Basic.parseInt(grabNext(text,"Sbjct:","Sbjct"));  int endSubject=Basic.parseInt(grabLastInLinePassedScore(text,"Sbjct"));  String queryString=grabQueryString(text);  String subjectString=grabSubjectString(text);  int p=startSubject;  for (int i=0; i < subjectString.length(); i++) {    if (subjectString.charAt(i) != '-') {      referenceSequence.get()[p - 1]=subjectString.charAt(i);      p++;    }  }  int alignPos=(startSubject - 1);  Pair<Integer,String> insertion=null;  final StringWriter w=new StringWriter();  for (int mPos=0; mPos < queryString.length(); mPos++) {    char ch=queryString.charAt(mPos);    if (ch == '-') {      if (insertion != null) {        insertion=null;      }      w.write("-");      alignPos+=1;    } else     if (subjectString.charAt(mPos) == '-') {      if (showInsertions) {        if (insertion == null) {          insertion=new Pair<>(alignPos - 1,queryString.substring(mPos,mPos + 1));          insertions.add(insertion);        } else {          insertion.setSecond(insertion.getSecond() + readSequence.substring(mPos,mPos + 1));        }      }      alignPos+=1;    } else {      if (insertion != null) {        insertion=null;      }      w.write(ch);      alignPos+=1;    }  }  String block=w.toString();  int leadingGaps=startSubject - 1;  int trailingGaps=length - endSubject;  String unalignedPrefix=readSequence.substring(0,startQuery);  String unalignedSuffix=readSequence.substring(endQuery,readSequence.length());  alignment.addSequence(readName,text,null,unalignedPrefix,leadingGaps,block,trailingGaps,unalignedSuffix);}  }
class C{  @Override public MeasureColumnDataChunk[] readMeasureChunks(FileHolder fileReader,int... blockIndexes){  MeasureColumnDataChunk[] datChunk=new MeasureColumnDataChunk[values.length];  for (int i=0; i < blockIndexes.length; i++) {    datChunk[blockIndexes[i]]=readMeasureChunk(fileReader,blockIndexes[i]);  }  return datChunk;}  }
class C{  protected void internalTransform(Body b,String phaseName,Map<String,String> options){  boolean eliminateOnlyStackLocals=PhaseOptions.getBoolean(options,"only-stack-locals");  if (Options.v().verbose()) {    G.v().out.println("[" + b.getMethod().getName() + "] Eliminating dead code...");  }  if (Options.v().time()) {    Timers.v().deadCodeTimer.start();  }  Chain<Unit> units=b.getUnits();  Deque<Unit> q=new ArrayDeque<Unit>(units.size());  boolean isStatic=b.getMethod().isStatic();  boolean allEssential=true;  boolean checkInvoke=false;  Local thisLocal=null;  for (Iterator<Unit> it=units.iterator(); it.hasNext(); ) {    Unit s=it.next();    boolean isEssential=true;    if (s instanceof NopStmt) {      boolean removeNop=it.hasNext();      if (!removeNop) {        removeNop=true;        for (        Trap t : b.getTraps()) {          if (t.getEndUnit() == s) {            removeNop=false;            break;          }        }      }      if (removeNop) {        it.remove();        continue;      }    } else     if (s instanceof AssignStmt) {      AssignStmt as=(AssignStmt)s;      Value lhs=as.getLeftOp();      Value rhs=as.getRightOp();      if (lhs == rhs && lhs instanceof Local) {        it.remove();        continue;      }      if (lhs instanceof Local && (!eliminateOnlyStackLocals || ((Local)lhs).getName().startsWith("$") || lhs.getType() instanceof NullType)) {        isEssential=false;        if (!checkInvoke) {          checkInvoke|=as.containsInvokeExpr();        }        if (rhs instanceof CastExpr) {          CastExpr ce=(CastExpr)rhs;          Type t=ce.getCastType();          Value v=ce.getOp();          isEssential=!(t instanceof RefType && v == NullConstant.v());        } else         if (rhs instanceof InvokeExpr || rhs instanceof ArrayRef || rhs instanceof NewExpr|| rhs instanceof NewArrayExpr|| rhs instanceof NewMultiArrayExpr) {          isEssential=true;        } else         if (rhs instanceof FieldRef) {          isEssential=true;          if (rhs instanceof InstanceFieldRef) {            InstanceFieldRef ifr=(InstanceFieldRef)rhs;            if (!isStatic && thisLocal == null) {              thisLocal=b.getThisLocal();            }            isEssential=(isStatic || thisLocal != ifr.getBase());          }        } else         if (rhs instanceof DivExpr || rhs instanceof RemExpr) {          BinopExpr expr=(BinopExpr)rhs;          Type t1=expr.getOp1().getType();          Type t2=expr.getOp2().getType();          isEssential=IntType.v().equals(t1) || LongType.v().equals(t1) || IntType.v().equals(t2)|| LongType.v().equals(t2);          if (isEssential && IntType.v().equals(t2)) {            Value v=expr.getOp2();            if (v instanceof IntConstant) {              IntConstant i=(IntConstant)v;              isEssential=(i.value == 0);            }          }          if (isEssential && LongType.v().equals(t2)) {            Value v=expr.getOp2();            if (v instanceof LongConstant) {              LongConstant l=(LongConstant)v;              isEssential=(l.value == 0);            }          }        }      }    }    if (isEssential) {      q.addFirst(s);    }    allEssential&=isEssential;  }  if (checkInvoke || !allEssential) {    final LocalDefs localDefs=LocalDefs.Factory.newLocalDefs(b);    if (!allEssential) {      Set<Unit> essential=new HashSet<Unit>(b.getUnits().size());      while (!q.isEmpty()) {        Unit s=q.removeFirst();        if (essential.add(s)) {          for (          ValueBox box : s.getUseBoxes()) {            Value v=box.getValue();            if (v instanceof Local) {              Local l=(Local)v;              List<Unit> defs=localDefs.getDefsOfAt(l,s);              if (defs != null)               q.addAll(defs);            }          }        }      }      units.retainAll(essential);    }    if (checkInvoke) {      final LocalUses localUses=LocalUses.Factory.newLocalUses(b,localDefs);      List<AssignStmt> postProcess=new ArrayList<AssignStmt>();      for (      Unit u : units) {        if (u instanceof AssignStmt) {          AssignStmt s=(AssignStmt)u;          if (s.containsInvokeExpr()) {            boolean deadAssignment=true;            for (            UnitValueBoxPair pair : localUses.getUsesOf(s)) {              if (units.contains(pair.unit)) {                deadAssignment=false;                break;              }            }            if (deadAssignment) {              postProcess.add(s);            }          }        }      }      for (      AssignStmt s : postProcess) {        Stmt newInvoke=Jimple.v().newInvokeStmt(s.getInvokeExpr());        newInvoke.addAllTagsOf(s);        units.swapWith(s,newInvoke);        if (Scene.v().hasCallGraph())         Scene.v().getCallGraph().swapEdgesOutOf(s,newInvoke);      }    }  }  if (Options.v().time()) {    Timers.v().deadCodeTimer.end();  }}  }
class C{  public GroupsIsMemberQueryWithUserIdsExtended isMemberExtended(String groupId,List<Integer> userIds){  return new GroupsIsMemberQueryWithUserIdsExtended(getClient(),groupId,userIds);}  }
class C{  public PointValuePair(final double[] point,final double value,final boolean copyArray){  super(copyArray ? ((point == null) ? null : point.clone()) : point,value);}  }
class C{  protected void parseAndAdd(List list,String line){  try {    StringTokenizer tokenizer=new StringTokenizer(line," ");    String feature=tokenizer.nextToken();    float start=Float.parseFloat(tokenizer.nextToken());    float mid=Float.parseFloat(tokenizer.nextToken());    float end=Float.parseFloat(tokenizer.nextToken());    String type=tokenizer.nextToken();    if (type.equals("null")) {      type=null;    }    list.add(new F0ModelTerm(feature,start,mid,end,type));  } catch (  NoSuchElementException nsee) {    throw new Error("ContourGenerator: Error while parsing F0ModelTerm " + nsee.getMessage());  }catch (  NumberFormatException nfe) {    throw new Error("ContourGenerator: Bad float format " + nfe.getMessage());  }}  }
class C{  public void commitBuffer(int length) throws IOException {  updateSequence();  mPackets[mBufferIn].setLength(length);  mAverageBitrate.push(length);  if (++mBufferIn >= mBufferCount)   mBufferIn=0;  mBufferCommitted.release();  if (mThread == null) {    mThread=new Thread(this);    mThread.start();  }}  }
class C{  @Override public int hashCode(){  return JsonNull.class.hashCode();}  }
class C{  protected void pluginInitialize(){}  }
class C{  private static long sum(long n){  return n * (n + 1) / 2l;}  }
class C{  public void principalComponentAnalysis(Vector<Double> data,int rows,int cols,boolean eigen,boolean scale){  if (data == null)   throw new NullPointerException("Null data");  if (rows < 0 || cols < 0)   throw new IllegalArgumentException("Number of rows and cols must be greater than 0");  Matrix dataX=new Matrix(rows,cols);  int n=0;  for (int i=0; i < rows; i++) {    for (int j=0; j < cols; j++)     dataX.set(i,j,data.elementAt(n++));  }  boolean debug=false;  if (eigen)   eigenPCA(dataX,scale,debug); else   svdPCA(dataX,scale,debug);}  }
class C{  public PhotosGetByIdQuery(VkApiClient client,UserActor actor,List<String> photos){  super(client,"photos.getById",Utils.buildParametrizedType(List.class,Photo.class));  accessToken(actor.getAccessToken());  photos(photos);}  }
class C{  public static Map<String,List<List<Distributable>>> nodeBlockTaskMapping(List<Distributable> blockInfos,int noOfNodesInput,int parallelism,List<String> activeNode){  Map<String,List<Distributable>> mapOfNodes=CarbonLoaderUtil.nodeBlockMapping(blockInfos,noOfNodesInput,activeNode);  int taskPerNode=parallelism / mapOfNodes.size();  int noOfTasksPerNode=taskPerNode == 0 ? 1 : taskPerNode;  return assignBlocksToTasksPerNode(mapOfNodes,noOfTasksPerNode);}  }
class C{  public boolean isAfter(Period period){  if (period == null || period.getEndDate() == null) {    return false;  }  return getEndDate().after(period.getEndDate());}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public WildcardsCompilationUnit fullCopy(){  WildcardsCompilationUnit tree=(WildcardsCompilationUnit)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static RecyclerViewHeader fromXml(Context context,@LayoutRes int layoutRes){  RecyclerViewHeader header=new RecyclerViewHeader(context);  View v=View.inflate(context,layoutRes,header);  header.setHeaderView(v);  return header;}  }
class C{  public void addParameter(Expression e){  if (m_group == null)   m_group=e; else   throw new IllegalStateException("This function takes only 1 parameter.");}  }
class C{  public String copyTestData(String name){  String content=readTestData(name);  Path targetPath=Paths.get(tempDir,name);  try {    Files.createDirectories(targetPath.getParent());    Files.write(targetPath,content.getBytes(StandardCharsets.UTF_8));  } catch (  IOException e) {    throw new IllegalArgumentException(String.format("Cannot copy '%s': %s",targetPath,e.getMessage()));  }  return content;}  }
class C{  protected void load(String fileName,boolean tryMemoryMapping) throws IOException, BufferUnderflowException, MaryConfigurationException, NullPointerException {  assert fileName != null : "filename is null";  RandomAccessFile file=new RandomAccessFile(fileName,"r");  FileChannel fc=file.getChannel();  ByteBuffer headerBB=ByteBuffer.allocate(0x10000);  fc.read(headerBB);  headerBB.limit(headerBB.position());  headerBB.position(0);  maryHdr=new MaryHeader(headerBB);  if (maryHdr.getType() != MaryHeader.TIMELINE) {    throw new MaryConfigurationException("File is not a valid timeline file.");  }  procHdr=new ProcHeader(headerBB);  sampleRate=headerBB.getInt();  numDatagrams=headerBB.getLong();  if (sampleRate <= 0 || numDatagrams < 0) {    throw new MaryConfigurationException("Illegal values in timeline file.");  }  datagramsBytePos=(int)headerBB.getLong();  timeIdxBytePos=(int)headerBB.getLong();  if (timeIdxBytePos < datagramsBytePos) {    throw new MaryConfigurationException("File seems corrupt: index is expected after data, not before");  }  fc.position(timeIdxBytePos);  ByteBuffer indexBB=ByteBuffer.allocate((int)(fc.size() - timeIdxBytePos));  fc.read(indexBB);  indexBB.limit(indexBB.position());  indexBB.position(0);  idx=new Index(indexBB);  if (tryMemoryMapping) {    try {      mappedBB=fc.map(FileChannel.MapMode.READ_ONLY,datagramsBytePos,timeIdxBytePos - datagramsBytePos);      file.close();    } catch (    IOException ome) {      Log.w(Mary.LOG,"Cannot use memory mapping for timeline file '" + fileName + "' -- falling back to piecewise reading");    }  }  if (!tryMemoryMapping || mappedBB == null) {    fileChannel=fc;    assert fileChannel != null;  }  assert idx != null;  assert procHdr != null;  assert fileChannel == null && mappedBB != null || fileChannel != null && mappedBB == null;}  }
class C{  public static String checkAndFormatText(final FormatterDetails format,final String text){  if (format != null) {    return FormattingUtils.formatText(format,text,null);  }  return text;}  }
class C{  synchronized boolean visit() throws IOException {  if (exc != null) {    return true;  }  if (current == null) {    if (iter.hasNext() == false) {      c.close();      return true;    }    Map.Entry<String,FileMetaData> next=iter.next();    FileMetaData metaData=next.getValue();    String fileName=next.getKey();    long len=c.in.readVLong();    if (len != metaData.length) {      throw new IllegalStateException("file " + fileName + ": meta data says length="+ metaData.length+ " but c.in says "+ len);    }    current=new CopyOneFile(c.in,dest,fileName,metaData,copyBuffer);  }  if (current.visit()) {    copiedFiles.put(current.name,current.tmpName);    totBytesCopied+=current.getBytesCopied();    assert totBytesCopied <= totBytes : "totBytesCopied=" + totBytesCopied + " totBytes="+ totBytes;    current=null;    return false;  }  return false;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public OpenSpacesQueueObject newQueueTemplate(String queueName){  OpenSpacesQueueObject queueObject=isFifo() ? new OpenSpacesFifoQueueObject() : new OpenSpacesQueueObject();  queueObject.setPersistent(isPersistent());  queueObject.setEndpointURI(queueName);  return queueObject;}  }
class C{  public static final void serialize(final Object object,final OutputStream output) throws IOException, ReflectiveOperationException {  Objects.requireNonNull(object,"The serializable object is null");  Objects.requireNonNull(output,"The output stream is null");  final Externalizer externalizer=of(object.getClass());  try (final GZIPOutputStream compressed=new GZIPOutputStream(output)){    try (final ObjectOutputStream objected=new ObjectOutputStream(compressed)){      externalizer.writeExternal(object,objected);    }   } }  }
class C{  public void addException(Access node){  List<Access> list=(parent == null || state == null) ? getExceptionListNoTransform() : getExceptionList();  list.addChild(node);}  }
class C{  public static Long precedingTimestamp(Long timestamp){  return timestamp - 1;}  }
class C{  public Builder intoOpenFiles(@Nullable Collection<File> openFiles){  myOpenFiles=openFiles;  return this;}  }
class C{  public void java_lang_System_arraycopy(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  ReferenceVariable srcElm=helper.arrayElementOf(params[0]);  ReferenceVariable dstElm=helper.arrayElementOf(params[2]);  ReferenceVariable tmpVar=helper.tempLocalVariable(method);  helper.assign(tmpVar,srcElm);  helper.assign(dstElm,tmpVar);}  }
class C{  public static float interpolateCatmullRom(float u,float T,float p0,float p1,float p2,float p3){  double c1, c2, c3, c4;  c1=p1;  c2=-1.0 * T * p0 + T * p2;  c3=2 * T * p0 + (T - 3) * p1 + (3 - 2 * T) * p2 + -T * p3;  c4=-T * p0 + (2 - T) * p1 + (T - 2) * p2 + T * p3;  return (float)(((c4 * u + c3) * u + c2) * u + c1);}  }
class C{  public DOMSource(Node n){  setNode(n);}  }
class C{  @Override public void propagate(GeomPointsTo ptAnalyzer,IWorklist worklist){  int i, j;  AllocNode obj;  SegmentNode pts, pe, entry_pts[], entry_pe[];  GeometricManager gm1, gm2;  FullSensitiveNode qn, objn;  boolean added, hasNewPointsTo;  if (pt_objs.size() == 0)   return;  if (complex_cons != null) {    for (    Map.Entry<AllocNode,GeometricManager> entry : new_pts.entrySet()) {      obj=entry.getKey();      entry_pts=entry.getValue().getFigures();      for (      PlainConstraint pcons : complex_cons) {        objn=(FullSensitiveNode)ptAnalyzer.findInstanceField(obj,pcons.f);        if (objn == null) {          pt_objs.put(obj,(GeometricManager)deadManager);          entry.setValue((GeometricManager)deadManager);          break;        }        if (objn.willUpdate == false) {          continue;        }        qn=(FullSensitiveNode)pcons.otherSide;        for (i=0; i < GeometricManager.Divisions; ++i) {          pts=entry_pts[i];          while (pts != null && pts.is_new == true) {switch (pcons.type) {case Constants.STORE_CONS:              if (instantiateStoreConstraint(qn,objn,pts,(pcons.code << 8) | i))               worklist.push(qn);            break;case Constants.LOAD_CONS:          if (instantiateLoadConstraint(objn,qn,pts,(pcons.code << 8) | i))           worklist.push(objn);        break;    }    pts=pts.next;  }}}}}if (flowto.size() == 0) return;for (Map.Entry<FullSensitiveNode,GeometricManager> entry1 : flowto.entrySet()) {added=false;qn=entry1.getKey();gm1=entry1.getValue();entry_pe=gm1.getFigures();if (gm1.isThereUnprocessedFigures()) {for (Map.Entry<AllocNode,GeometricManager> entry2 : pt_objs.entrySet()) {obj=entry2.getKey();gm2=entry2.getValue();if (gm2 == deadManager) continue;if (!ptAnalyzer.castNeverFails(obj.getType(),qn.getType())) continue;entry_pts=gm2.getFigures();hasNewPointsTo=gm2.isThereUnprocessedFigures();for (j=0; j < GeometricManager.Divisions; ++j) {  pe=entry_pe[j];  while (pe != null) {    if (pe.is_new == false && hasNewPointsTo == false)     break;    for (i=0; i < GeometricManager.Divisions; ++i) {      pts=entry_pts[i];      while (pts != null && (pts.is_new || pe.is_new)) {        if (reasonAndPropagate(qn,obj,pts,pe,(i << 8) | j))         added=true;        pts=pts.next;      }    }    pe=pe.next;  }}}gm1.flush();} else {for (Map.Entry<AllocNode,GeometricManager> entry2 : new_pts.entrySet()) {obj=entry2.getKey();gm2=entry2.getValue();if (gm2 == deadManager) continue;if (!ptAnalyzer.castNeverFails(obj.getType(),qn.getType())) continue;entry_pts=gm2.getFigures();for (i=0; i < GeometricManager.Divisions; ++i) {  pts=entry_pts[i];  while (pts != null && pts.is_new == true) {    for (j=0; j < GeometricManager.Divisions; ++j) {      pe=entry_pe[j];      while (pe != null) {        if (reasonAndPropagate(qn,obj,pts,pe,(i << 8) | j))         added=true;        pe=pe.next;      }    }    pts=pts.next;  }}}}if (added) worklist.push(qn);}}  }
class C{  @Override public void printStackTrace(PrintWriter s){  if (getCause() != null) {    getCause().printStackTrace(s);    s.println("--------------- linked to ------------------");  }  super.printStackTrace(s);}  }
class C{  public boolean performGradleSync(){  return myGradleSync;}  }
class C{  public AccountSaveProfileInfoQuery cityId(Integer value){  return unsafeParam("city_id",value);}  }
class C{  public TIntObjectHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  @Override public Iterator<S2CellId> iterator(){  return cellIds.iterator();}  }
class C{  public void paintSelection(Graphics g0){  Graphics2D g=(Graphics2D)g0;  SelectedBlock selectedBlock=getSelectedBlock();  if (selectedBlock.isSelected()) {    Rectangle2D rect=new Rectangle2D.Double(Math.max(0,getX(selectedBlock.getFirstCol())),0,0,0);    rect.add(Math.min(getX(selectedBlock.getLastCol() + 1),getSize().getWidth()),getSize().height);    g.setColor(highlightColorSemiTransparent);    g.fill(rect);    g.setColor(highlightColor);    g.draw(rect);  }}  }
class C{  public void onAccuracyChanged(Sensor sensor,int accuracy){  if (sensor.getType() != Sensor.TYPE_ACCELEROMETER) {    return;  }  if (this.status == AccelListener.STOPPED) {    return;  }  this.accuracy=accuracy;}  }
class C{  public Boolean createSalesOrderHeader(EntityManager em,String salesOrderId){  boolean status=true;  SalesOrderHeader soHeader=null;  try {    em.getTransaction().begin();    soHeader=createSalesOrderHeader(salesOrderId);    em.persist(soHeader);    em.getTransaction().commit();  } catch (  Exception e) {    status=false;    logger.error("Error occured during creation of Sales Order Header. Detailed info: " + e);  }  return status;}  }
class C{  public static final void popTransform(GL2 gl){  gl.glPopMatrix();}  }
class C{  public MaryHeader(ByteBuffer input) throws MaryConfigurationException {  try {    this.load(input);  } catch (  BufferUnderflowException e) {    Log.d(Mary.LOG,"Cannot load mary header" + e);    throw new MaryConfigurationException("Cannot load mary header",e);  }  if (!hasLegalMagic() || !hasLegalType()) {    throw new MaryConfigurationException("Ill-formed Mary header!");  }  assert hasLegalMagic();  assert hasLegalType();}  }
class C{  public ColourMapEntryPanel(Class<?> panelId,ColourMapEntryUpdateInterface parent){  this.parentObj=parent;  createUI(panelId);}  }
class C{  @Override public void start(){  started=true;}  }
class C{  public InlineCellEditor(InLineFeatureModel model){  this.model=model;}  }
class C{  public IntIterator outEdgeRows(int node){  return edgeRows(node,OUTEDGES);}  }
class C{  public String requestServiceFromThirdPartyWebApp() throws Exception {  String url=ConsumerWebAppURL + "?scope=" + URLEncoder.encode(EndUserResourceURL,"UTF-8");  WebTarget target=ClientBuilder.newClient().target(url);  Response response=target.request().get();  response.close();  if (302 != response.getStatus()) {    throw new RuntimeException("Service request has failed - redirection is expected");  }  String authorizationURI=response.getStringHeaders().getFirst("Location");  if (authorizationURI == null) {    throw new RuntimeException("Token authorization URI is missing");  }  return authorizationURI;}  }
class C{  public static Value noExceptionThrowingRhs(Unit unit){  return noExceptionThrowing(rhs(unit));}  }
class C{  public static void resetTimingLogger(){  if (mTimingLogger == null) {    mTimingLogger=createDefaultTimingLogger();  }  mTimingLogger.reset();}  }
class C{  public static String escape(String url,String encoding,boolean escapeAll) throws UnsupportedEncodingException {  if (url == null)   return url;  Matcher protocolMatcher=protocolPattern.matcher(url);  StringBuilder sb=new StringBuilder();  if (protocolMatcher.find())   sb.append(protocolMatcher.group());  Matcher contentMatcher=contentPattern.matcher(url);  while (contentMatcher.find()) {    sb.append("/");    String content=contentMatcher.group(1);    if (escapeAll) {      sb.append(java.net.URLEncoder.encode(content,encoding));    } else {      if (content.matches("((%[A-Z0-9][A-Z0-9])|[a-zA-Z0-9_*\\.\\+-\\?=])*"))       sb.append(content); else {        for (        String part : split(content)) {          if (part.equals("?") || part.equals("="))           sb.append(part); else           sb.append(java.net.URLEncoder.encode(part,encoding));        }      }    }  }  return sb.toString();}  }
class C{  public Plan createQueryPlan(String qry,Transaction tx){  Parser parser=new Parser(qry);  QueryData data=parser.queryCommand();  Verifier.verifyQueryData(data,tx);  return qPlanner.createPlan(data,tx);}  }
class C{  @Override public void onRequestUserProfileSuccess(Call<User> call,Response<User> response){  if (response.isSuccessful() && response.body() != null) {    Mysplash.getInstance().setUser(response.body());    view.dismissRequestDialog();    view.drawBrowsableView();  } else {    requestUser();  }}  }
class C{  public ObjectFactory(){}  }
class C{  public static String toStringFromAscii(final byte[] bytes){  char[] ret=new char[bytes.length];  for (int x=0; x < bytes.length; x++) {    if (bytes[x] < 32 && bytes[x] >= 0) {      ret[x]='.';    } else {      int chr=((short)bytes[x]) & 0xFF;      ret[x]=(char)chr;    }  }  return String.valueOf(ret);}  }
class C{  private static boolean areDoubleValuesSame(Expression expression1,Expression expression2){  double value1=getValue(expression1);  double value2=getValue(expression2);  return (Math.abs(value1 - value2) < 0.001);}  }
class C{  public static boolean isPhiNode(Unit unit){  return getPhiExpr(unit) == null ? false : true;}  }
class C{  private void addNotify(ArrayList notifies,Map groupsMap,boolean discard){synchronized (pendingNotifies) {    pendingNotifies.addLast(new NotifyTask(notifies,groupsMap,discard));    if (notifierThread == null) {      notifierThread=new Notifier();      notifierThread.start();    }  }}  }
class C{  public GroupsGetBannedQuery fields(UserField... value){  return unsafeParam("fields",value);}  }
class C{  @NotNull public static byte[] rewriteClass(@NotNull byte[] classData,int layoutlibApi){  int current=getCurrentClassVersion();  return rewriteClass(classData,current,0,layoutlibApi);}  }
class C{  public boolean hasItemMeta(){  return !Bukkit.getItemFactory().equals(meta,null);}  }
class C{  private void doScroll(int delta){  scrollingOffset+=delta;  int itemHeight=getItemHeight();  int count=scrollingOffset / itemHeight;  int pos=currentItem - count;  int itemCount=viewAdapter.getItemsCount();  int fixPos=scrollingOffset % itemHeight;  if (Math.abs(fixPos) <= itemHeight / 2) {    fixPos=0;  }  if (isCyclic && itemCount > 0) {    if (fixPos > 0) {      pos--;      count++;    } else     if (fixPos < 0) {      pos++;      count--;    }    while (pos < 0) {      pos+=itemCount;    }    pos%=itemCount;  } else {    if (pos < 0) {      count=currentItem;      pos=0;    } else     if (pos >= itemCount) {      count=currentItem - itemCount + 1;      pos=itemCount - 1;    } else     if (pos > 0 && fixPos > 0) {      pos--;      count++;    } else     if (pos < itemCount - 1 && fixPos < 0) {      pos++;      count--;    }  }  int offset=scrollingOffset;  if (pos != currentItem) {    setCurrentItem(pos,false);  } else {    invalidate();  }  scrollingOffset=offset - count * itemHeight;  if (scrollingOffset > getHeight()) {    scrollingOffset=scrollingOffset % getHeight() + getHeight();  }}  }
class C{  @Override public void handle(final HttpRequest request,final HttpResponse response,final HttpContext context){  String uri=request.getRequestLine().getUri();  if (uri.startsWith("/")) {    uri=uri.substring(1);  }  if (uri.equals(""))   uri="index.html";  Log.d(Mary.LOG,"File requested: " + uri);  if (validFiles.contains(uri)) {    try {      sendResourceAsStream(uri,response);    } catch (    IOException ioe) {      Log.d(Mary.LOG,"Cannot send file",ioe);      MaryHttpServerUtils.errorInternalServerError(response,"Cannot send file",ioe);    }  } else {    MaryHttpServerUtils.errorFileNotFound(response,uri);  }}  }
class C{  public static void cleanDirectory(File directory) throws IOException {  if (!directory.exists()) {    String message=directory + " does not exist";    throw new IllegalArgumentException(message);  }  if (!directory.isDirectory()) {    String message=directory + " is not a directory";    throw new IllegalArgumentException(message);  }  File[] files=directory.listFiles();  if (files == null) {    throw new IOException("Failed to list contents of " + directory);  }  IOException exception=null;  for (  File file : files) {    try {      forceDelete(file);    } catch (    IOException ioe) {      exception=ioe;    }  }  if (null != exception) {    throw exception;  }}  }
class C{  int readCorner3(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_COMPOUND_ERROR_NOT_ENOUGH_MONEY(int i,int j){  return new SM_SYSTEM_MESSAGE(1400337,new DescriptionId(i),new DescriptionId(j));}  }
class C{  @Override protected void onPreExecute(){  mCurrentDialog=IndeterminateProgressDialog.newInstance(R.string.wait_a_moment,false);  mCurrentDialog.show(getSupportFragmentManager(),WAIT_DIALOG_TAG);  findViewById(R.id.ok).setEnabled(false);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  for (int i=0; i < segments.length; ++i) {    segments[i].setTable(new IHashEntry[1]);  }  for (; ; ) {    K key=(K)s.readObject();    V value=(V)s.readObject();    if (key == null)     break;    put(key,value);  }}  }
class C{  private void showWarningDialog(){  if (isTooltipEnabled) {    SimpleTooltip.Builder builder=new SimpleTooltip.Builder(mContext);    builder.anchorView(slickFieldContainer.getChildAt(0));    builder.text("     !     ");    builder.gravity(Gravity.END);    builder.animated(true);    builder.transparentOverlay(true);    SimpleTooltip mTooltip=builder.build();    if (!mTooltip.isShowing())     mTooltip.show();  }}  }
class C{  @Override public Attr createAttributeNS(String namespaceURI,String qualifiedName) throws DOMException {  return new PSVIAttrNSImpl(this,namespaceURI,qualifiedName);}  }
class C{  public static Map<String,Object> productImportFromSpreadsheet(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  Locale locale=(Locale)context.get("locale");  String path=System.getProperty("user.dir") + "/spreadsheet";  List<File> fileItems=FastList.newInstance();  if (UtilValidate.isNotEmpty(path)) {    File importDir=new File(path);    if (importDir.isDirectory() && importDir.canRead()) {      File[] files=importDir.listFiles();      for (int i=0; i < files.length; i++) {        if (files[i].getName().toUpperCase().endsWith("XLS")) {          fileItems.add(files[i]);        }      }    } else {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductProductImportDirectoryNotFound",locale));    }  } else {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductProductImportPathNotSpecified",locale));  }  if (fileItems.size() < 1) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductProductImportPathNoSpreadsheetExists",locale) + path);  }  for (  File item : fileItems) {    List<Map<String,Object>> products=FastList.newInstance();    List<Map<String,Object>> inventoryItems=FastList.newInstance();    POIFSFileSystem fs=null;    HSSFWorkbook wb=null;    try {      fs=new POIFSFileSystem(new FileInputStream(item));      wb=new HSSFWorkbook(fs);    } catch (    IOException e) {      Debug.logError("Unable to read or create workbook from file",module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductProductImportCannotCreateWorkbookFromFile",locale));    }    HSSFSheet sheet=wb.getSheetAt(0);    int sheetLastRowNumber=sheet.getLastRowNum();    for (int j=1; j <= sheetLastRowNumber; j++) {      HSSFRow row=sheet.getRow(j);      if (row != null) {        HSSFCell cell2=row.getCell(2);        cell2.setCellType(HSSFCell.CELL_TYPE_STRING);        String productId=cell2.getRichStringCellValue().toString();        HSSFCell cell5=row.getCell(5);        BigDecimal quantityOnHand=BigDecimal.ZERO;        if (cell5 != null && cell5.getCellType() == HSSFCell.CELL_TYPE_NUMERIC)         quantityOnHand=new BigDecimal(cell5.getNumericCellValue());        boolean productExists=ImportProductHelper.checkProductExists(productId,delegator);        if (productId != null && !productId.trim().equalsIgnoreCase("") && !productExists) {          products.add(ImportProductHelper.prepareProduct(productId));          if (quantityOnHand.compareTo(BigDecimal.ZERO) >= 0)           inventoryItems.add(ImportProductHelper.prepareInventoryItem(productId,quantityOnHand,delegator.getNextSeqId("InventoryItem"))); else           inventoryItems.add(ImportProductHelper.prepareInventoryItem(productId,BigDecimal.ZERO,delegator.getNextSeqId("InventoryItem")));        }        int rowNum=row.getRowNum() + 1;        if (row.toString() != null && !row.toString().trim().equalsIgnoreCase("") && productExists) {          Debug.logWarning("Row number " + rowNum + " not imported from "+ item.getName(),module);        }      }    }    for (int j=0; j < products.size(); j++) {      GenericValue productGV=delegator.makeValue("Product",products.get(j));      GenericValue inventoryItemGV=delegator.makeValue("InventoryItem",inventoryItems.get(j));      if (!ImportProductHelper.checkProductExists(productGV.getString("productId"),delegator)) {        try {          delegator.create(productGV);          delegator.create(inventoryItemGV);        } catch (        GenericEntityException e) {          Debug.logError("Cannot store product",module);          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductProductImportCannotStoreProduct",locale));        }      }    }    int uploadedProducts=products.size() + 1;    if (products.size() > 0)     Debug.logInfo("Uploaded " + uploadedProducts + " products from file "+ item.getName(),module);  }  return ServiceUtil.returnSuccess();}  }
class C{  public ResizeHandle findResizeHandle(float x,float y){  ResizeHandle candidate=null;  if (mWidget instanceof Guideline) {    Guideline guideline=(Guideline)mWidget;    if (guideline.getOrientation() == Guideline.VERTICAL) {      if (mLeftSide.hit(x,y)) {        return mLeftSide;      }    } else {      if (mTopSide.hit(x,y)) {        return mTopSide;      }    }  }  ConstraintAnchor leftAnchor=mWidget.getAnchor(ConstraintAnchor.Type.LEFT);  ConstraintAnchor topAnchor=mWidget.getAnchor(ConstraintAnchor.Type.TOP);  ConstraintAnchor rightAnchor=mWidget.getAnchor(ConstraintAnchor.Type.RIGHT);  ConstraintAnchor bottomAnchor=mWidget.getAnchor(ConstraintAnchor.Type.BOTTOM);  ConstraintAnchor baselineAnchor=mWidget.getAnchor(ConstraintAnchor.Type.BASELINE);  for (  ResizeHandle handle : mResizeHandles) {    if (handle.hit(x,y)) {      boolean leftAnchorIsConnected=leftAnchor != null && leftAnchor.isConnected();      boolean topAnchorIsConnected=topAnchor != null && topAnchor.isConnected();      boolean rightAnchorIsConnected=rightAnchor != null && rightAnchor.isConnected();      boolean bottomAnchorIsConnected=bottomAnchor != null && bottomAnchor.isConnected();      boolean baselineAnchorIsConnected=baselineAnchor != null && baselineAnchor.isConnected();switch (handle.getType()) {case LEFT_TOP:{          if (leftAnchorIsConnected || topAnchorIsConnected) {            continue;          }        }      break;case RIGHT_TOP:{      if (rightAnchorIsConnected || topAnchorIsConnected) {        continue;      }    }  break;case LEFT_BOTTOM:{  if (leftAnchorIsConnected || bottomAnchorIsConnected) {    continue;  }}break;case RIGHT_BOTTOM:{if (rightAnchorIsConnected || bottomAnchorIsConnected) {continue;}}break;case LEFT_SIDE:{if (leftAnchorIsConnected) {continue;}}break;case RIGHT_SIDE:{if (rightAnchorIsConnected) {continue;}}break;case TOP_SIDE:{if (topAnchorIsConnected || baselineAnchorIsConnected) {continue;}}break;case BOTTOM_SIDE:{if (bottomAnchorIsConnected) {continue;}}break;}if (candidate == null || candidate.isSideHandle()) {candidate=handle;}}}return candidate;}  }
class C{  public double doGraphCompareToSet(String sSummaryTextFile,Set<String> ssModelFiles,String sGraphModelClassName,String sComparatorClassName,int iMinNGramRank,int iMaxNGramRank,int iNGramDist){  DocumentNGramGraph ndNDoc1=null;  try {    int iIdx=utils.getConstructor(sGraphModelClassName,3);    if (iIdx > -1)     ndNDoc1=(DocumentNGramGraph)Class.forName(sGraphModelClassName).getConstructors()[iIdx].newInstance(iMinNGramRank,iMaxNGramRank,iNGramDist); else {      iIdx=utils.getConstructor(sGraphModelClassName,5);      ndNDoc1=(DocumentNGramGraph)Class.forName(sGraphModelClassName).getConstructors()[iIdx].newInstance(iMinNGramRank,iMaxNGramRank,iNGramDist,iMinNGramRank,iMaxNGramRank);    }  } catch (  IllegalArgumentException ex) {    ex.printStackTrace(System.err);  }catch (  SecurityException ex) {    ex.printStackTrace(System.err);  }catch (  ClassNotFoundException ex) {    ex.printStackTrace(System.err);  }catch (  InstantiationException ex) {    ex.printStackTrace(System.err);  }catch (  IllegalAccessException ex) {    ex.printStackTrace(System.err);  }catch (  InvocationTargetException ex) {    ex.printStackTrace(System.err);  }  if (ndNDoc1 == null)   return Double.NEGATIVE_INFINITY;  try {    ndNDoc1.loadDataStringFromFile(sSummaryTextFile);  } catch (  IOException ex) {    Logger.getLogger(summarySingleFileEvaluator.class.getName()).log(Level.SEVERE,null,ex);    return Double.NEGATIVE_INFINITY;  }  SimilarityComparatorListener sdcNComparator=null;  try {    int iIdx=utils.getConstructor(sComparatorClassName,1);    if (iIdx > -1)     sdcNComparator=(SimilarityComparatorListener)Class.forName(sComparatorClassName).getConstructors()[iIdx].newInstance(1.0); else     sdcNComparator=(SimilarityComparatorListener)Class.forName(sComparatorClassName).newInstance();  } catch (  IllegalArgumentException ex) {    ex.printStackTrace(System.err);  }catch (  SecurityException ex) {    ex.printStackTrace(System.err);  }catch (  ClassNotFoundException ex) {    ex.printStackTrace(System.err);  }catch (  InstantiationException ex) {    ex.printStackTrace(System.err);  }catch (  IllegalAccessException ex) {    ex.printStackTrace(System.err);  }catch (  InvocationTargetException ex) {    ex.printStackTrace(System.err);  }  if (sdcNComparator == null)   return Double.NEGATIVE_INFINITY;  if (!Jackknifing) {    DocumentNGramGraph ndNModel=null;    Iterator<String> iOtherIter=ssModelFiles.iterator();    int iDocCnt=0;    while (iOtherIter.hasNext()) {      String sModelFile=iOtherIter.next();      DocumentNGramGraph ndNDoc2=null;      try {        int iIdx=utils.getConstructor(sGraphModelClassName,3);        if (iIdx > -1)         ndNDoc2=(DocumentNGramGraph)Class.forName(sGraphModelClassName).getConstructors()[iIdx].newInstance(iMinNGramRank,iMaxNGramRank,iNGramDist); else {          iIdx=utils.getConstructor(sGraphModelClassName,5);          ndNDoc2=(DocumentNGramGraph)Class.forName(sGraphModelClassName).getConstructors()[iIdx].newInstance(iMinNGramRank,iMaxNGramRank,iNGramDist,iMinNGramRank,iMaxNGramRank);        }      } catch (      IllegalArgumentException ex) {        ex.printStackTrace(System.err);      }catch (      SecurityException ex) {        ex.printStackTrace(System.err);      }catch (      ClassNotFoundException ex) {        ex.printStackTrace(System.err);      }catch (      InstantiationException ex) {        ex.printStackTrace(System.err);      }catch (      IllegalAccessException ex) {        ex.printStackTrace(System.err);      }catch (      InvocationTargetException ex) {        ex.printStackTrace(System.err);      }      if (ndNDoc2 == null)       return Double.NEGATIVE_INFINITY;      try {        ndNDoc2.loadDataStringFromFile(sModelFile);      } catch (      IOException ex) {        Logger.getLogger(summarySingleFileEvaluator.class.getName()).log(Level.SEVERE,null,ex);        return Double.NEGATIVE_INFINITY;      }      ++iDocCnt;      if (ndNModel == null)       ndNModel=ndNDoc2; else       ndNModel.merge(ndNDoc2,1.0 - (iDocCnt / ssModelFiles.size()));    }    GraphSimilarity sSimil=null;    try {      sSimil=(GraphSimilarity)sdcNComparator.getSimilarityBetween(ndNDoc1,ndNModel);    } catch (    InvalidClassException iceE) {      System.err.println("Cannot compare...");      return Double.NEGATIVE_INFINITY;    }    return (sSimil.SizeSimilarity == 0) ? 0 : (sSimil.ValueSimilarity / sSimil.SizeSimilarity);  } else {    Distribution<Double> dJackknifingResults=new Distribution<Double>();    DocumentNGramGraph ndNModel=null;    for (int iLeaveOutCnt=0; iLeaveOutCnt < ssModelFiles.size(); iLeaveOutCnt++) {      Distribution<Double> dFoldRes=new Distribution<Double>();      Iterator<String> iOtherIter=ssModelFiles.iterator();      int iDocCnt=0;      int iCurModelCnt=0;      while (iOtherIter.hasNext()) {        String sModelFile=iOtherIter.next();        if (iCurModelCnt++ == iLeaveOutCnt) {          if (!Silent)           System.err.println(String.format("Skipping '%s' to " + "'%s' comparison",sModelFile,sSummaryTextFile));          continue;        }        DocumentNGramGraph ndNDoc2=null;        try {          int iIdx=utils.getConstructor(sGraphModelClassName,3);          if (iIdx > -1)           ndNDoc2=(DocumentNGramGraph)Class.forName(sGraphModelClassName).getConstructors()[iIdx].newInstance(iMinNGramRank,iMaxNGramRank,iNGramDist); else {            iIdx=utils.getConstructor(sGraphModelClassName,5);            ndNDoc2=(DocumentNGramGraph)Class.forName(sGraphModelClassName).getConstructors()[iIdx].newInstance(iMinNGramRank,iMaxNGramRank,iNGramDist,iMinNGramRank,iMaxNGramRank);          }        } catch (        IllegalArgumentException ex) {          ex.printStackTrace(System.err);        }catch (        SecurityException ex) {          ex.printStackTrace(System.err);        }catch (        ClassNotFoundException ex) {          ex.printStackTrace(System.err);        }catch (        InstantiationException ex) {          ex.printStackTrace(System.err);        }catch (        IllegalAccessException ex) {          ex.printStackTrace(System.err);        }catch (        InvocationTargetException ex) {          ex.printStackTrace(System.err);        }        if (ndNDoc2 == null)         return Double.NEGATIVE_INFINITY;        try {          ndNDoc2.loadDataStringFromFile(sModelFile);        } catch (        IOException ex) {          Logger.getLogger(summarySingleFileEvaluator.class.getName()).log(Level.SEVERE,null,ex);          return Double.NEGATIVE_INFINITY;        }        ++iDocCnt;        if (ndNModel == null)         ndNModel=ndNDoc2; else         ndNModel.merge(ndNDoc2,1.0 - (iDocCnt / ssModelFiles.size()));      }      GraphSimilarity sSimil=null;      try {        sSimil=(GraphSimilarity)sdcNComparator.getSimilarityBetween(ndNDoc1,ndNModel);      } catch (      InvalidClassException iceE) {        System.err.println("Cannot compare...");        return Double.NEGATIVE_INFINITY;      }      double dTmpRes=(sSimil.SizeSimilarity == 0) ? 0.0 : (sSimil.ValueSimilarity / sSimil.SizeSimilarity);      dJackknifingResults.increaseValue(dTmpRes,1.0);    }    return dJackknifingResults.average(false);  }}  }
class C{  public void dec(){  count.add(-1);}  }
class C{  public <T extends Spatial>List<T> descendantMatches(Class<T> spatialSubclass){  return descendantMatches(spatialSubclass,null);}  }
class C{  public int expandAttribute(String attribute,boolean allowReplaceAttribute){  final Set<Object> values=new TreeSet<>();  values.addAll(getSamples2Values(attribute).values());  final ArrayList<String> newOrder=new ArrayList<>(getAttributeOrder().size() + values.size());  newOrder.addAll(getAttributeOrder());  int pos=newOrder.indexOf(attribute);  int count=0;  for (  Object value : values) {    final String attributeName=attribute + ":" + value;    if (!getAttributeOrder().contains(attributeName)) {      Map<String,Object> samples2values=new HashMap<>();      for (      String sample : getSampleOrder()) {        samples2values.put(sample,get(sample,attribute).equals(value) ? 1 : 0);      }      boolean result=addAttribute(attributeName,samples2values,allowReplaceAttribute,false);      if (result) {        attribute2type.put(attributeName,Type.Integer);        count++;        newOrder.add(pos + count,attributeName);      }    }  }  setAttributeOrder(newOrder);  return count;}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new FileWriter(journalFileTmp),IO_BUFFER_SIZE);  writer.write(MAGIC);  writer.write("\n");  writer.write(VERSION_1);  writer.write("\n");  writer.write(Integer.toString(appVersion));  writer.write("\n");  writer.write(Integer.toString(valueCount));  writer.write("\n");  writer.write("\n");  for (  Entry entry : lruEntries.values()) {    if (entry.currentEditor != null) {      writer.write(DIRTY + ' ' + entry.key+ '\n');    } else {      writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');    }  }  writer.close();  journalFileTmp.renameTo(journalFile);  journalWriter=new BufferedWriter(new FileWriter(journalFile,true),IO_BUFFER_SIZE);}  }
class C{  public void executeLsPacket(Runnable pkt){  execute(pkt);}  }
class C{  public void open(){  select();  actions.doubleClick(pageNumber).perform();}  }
class C{  public void migrate(String template,File file){  checkBatchSize();  try (CSVReader reader=new CSVReader(new FileReader(file),delimiter,'"',0)){    resolve(template,reader).forEach(null);  } catch (  IOException e) {    throw new RuntimeException(e);  } finally {    loader.flush();    loader.waitToFinish();  }}  }
class C{  @Override public boolean isStepVisible(){  return myFinishClicks.get() == 1 && myComponentsPath.shouldDownloadingComponentsStepBeShown();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DONT_KILL_COUNT_BY_WRONG_LEVEL(String value0){  return new SM_SYSTEM_MESSAGE(1400771,value0);}  }
class C{  public static String rpcToRest(SymbolTable symbolTable,String description){  StringBuffer sb=new StringBuffer();  Matcher m=WORD.matcher(description);  while (m.find()) {    if (symbolTable.containsFieldName(m.group(0))) {      m.appendReplacement(sb,CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL,m.group(0)));    } else     if (symbolTable.lookupMethodSimpleName(m.group(0)) != null) {      RestMethod restMethod=RestMethod.getPrimaryRestMethod(symbolTable.lookupMethodSimpleName(m.group(0)).get(0));      if (restMethod == null) {        m.appendReplacement(sb,m.group(0));      } else {        m.appendReplacement(sb,restMethod.getSimpleRestCollectionName() + "." + restMethod.getRestMethodName());      }    } else {      m.appendReplacement(sb,m.group(0));    }  }  m.appendTail(sb);  return sb.toString();}  }
class C{  public Throwable appendLast(Throwable ex){  Throwable r=ex;  Set<Throwable> memory=new HashSet<Throwable>();  while (ex.getCause() != null) {    if (memory.add(ex)) {      ex=ex.getCause();    } else {      return r;    }  }  try {    ex.initCause(this);  } catch (  Throwable exc) {  }  return r;}  }
class C{  public static Set<String> toSet(String s){  Set<String> newSet=new LinkedHashSet<String>();  if (s.startsWith("[") && s.endsWith("]")) {    s=s.substring(1,s.length() - 1);    String[] entries=s.split("\\,\\s");    for (    String entry : entries) {      newSet.add(entry);    }  } else {    throw new IllegalArgumentException("String is not from Set.toString()");  }  return newSet;}  }
class C{  public HashIndex(IndexInfo ii,Type fldType,Transaction tx){  this.ii=ii;  this.dataFileName=ii.tableName() + ".tbl";  this.fldType=fldType;  this.tx=tx;}  }
class C{  public void onSearchTermResolutionResponse(String searchTerm){  getSearchBarControl().setSearchTerm(searchTerm);  animateSearchTermResolution();}  }
class C{  AsyncCommandResult(Process proc,Command command){  super(proc,command);}  }
class C{  protected void notifyScrollingListenersAboutEnd(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingFinished(this);  }}  }
class C{  public void onNativeLibraryReady(){  mRegularTabModel.initializeNative();  mIncognitoTabModel.initializeNative();}  }
class C{  public void clear(){  this.parameters=null;}  }
class C{  public static PathMapping create(Pattern pattern,Path path,Method method){  PathMapping e=new PathMapping();  e.pattern=pattern;  e.path=path;  e.method=method;  return e;}  }
class C{  @Override public String toString(){  StringBuilder str=new StringBuilder();  str.append("xmin = " + getXmin() + " \n");  str.append("xmax = " + getXmax() + " \n");  str.append("text = \"" + getText() + "\" \n");  return str.toString();}  }
class C{  void ensureStackCapacity(){  if (fElementDepth == fElemDeclStack.length) {    int newSize=fElementDepth + INC_STACK_SIZE;    boolean[] newArrayB=new boolean[newSize];    System.arraycopy(fSubElementStack,0,newArrayB,0,fElementDepth);    fSubElementStack=newArrayB;    XSElementDecl[] newArrayE=new XSElementDecl[newSize];    System.arraycopy(fElemDeclStack,0,newArrayE,0,fElementDepth);    fElemDeclStack=newArrayE;    newArrayB=new boolean[newSize];    System.arraycopy(fNilStack,0,newArrayB,0,fElementDepth);    fNilStack=newArrayB;    XSNotationDecl[] newArrayN=new XSNotationDecl[newSize];    System.arraycopy(fNotationStack,0,newArrayN,0,fElementDepth);    fNotationStack=newArrayN;    XSTypeDefinition[] newArrayT=new XSTypeDefinition[newSize];    System.arraycopy(fTypeStack,0,newArrayT,0,fElementDepth);    fTypeStack=newArrayT;    XSCMValidator[] newArrayC=new XSCMValidator[newSize];    System.arraycopy(fCMStack,0,newArrayC,0,fElementDepth);    fCMStack=newArrayC;    newArrayB=new boolean[newSize];    System.arraycopy(fSawTextStack,0,newArrayB,0,fElementDepth);    fSawTextStack=newArrayB;    newArrayB=new boolean[newSize];    System.arraycopy(fStringContent,0,newArrayB,0,fElementDepth);    fStringContent=newArrayB;    newArrayB=new boolean[newSize];    System.arraycopy(fStrictAssessStack,0,newArrayB,0,fElementDepth);    fStrictAssessStack=newArrayB;    int[][] newArrayIA=new int[newSize][];    System.arraycopy(fCMStateStack,0,newArrayIA,0,fElementDepth);    fCMStateStack=newArrayIA;  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);}  }
class C{  @Override public void readFields(DataInput in) throws IOException {}  }
class C{  private void escape(CharSequence text,int start,int end){  for (int i=start; i < end; i++) {    char c=text.charAt(i);    if (c == '\n') {      mOut.append(BR);    } else     if (c == '<') {      mOut.append(LT);    } else     if (c == '>') {      mOut.append(GT);    } else     if (c == '&') {      mOut.append(AMP);    } else     if (c == ' ') {      while (i + 1 < end && text.charAt(i + 1) == ' ') {        mOut.append(NBSP);        i++;      }      mOut.append(' ');    } else     if (c < ' ') {      mOut.append("&#" + ((int)c) + ";");    } else {      mOut.append(c);    }  }}  }
class C{  public SafeArray(){  this(10);}  }
class C{  public SwitchPreference(Context context){  this(context,null);}  }
class C{  public LongFilePutter(File file,long limit) throws IOException {  this(file,limit,false);}  }
class C{  public static String generateKey(String imageUri,ImageSize targetSize){  return new StringBuilder(imageUri).append(URI_AND_SIZE_SEPARATOR).append(targetSize.getWidth()).append(WIDTH_AND_HEIGHT_SEPARATOR).append(targetSize.getHeight()).toString();}  }
class C{  public static void closeQuietly(AutoCloseable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    RuntimeException rethrown) {      throw rethrown;    }catch (    Exception ignored) {    }  }}  }
class C{  @Override public long skip(long ln) throws IOException {  try {    return in.skip(ln);  } catch (  IOException e) {    handleIOException(e);    return 0;  }}  }
class C{  @NonNull public Job.Builder newJobBuilder(){  return new Job.Builder(mValidator);}  }
class C{  public static WebappInfo create(Intent intent){  String id=IntentUtils.safeGetStringExtra(intent,ShortcutHelper.EXTRA_ID);  String icon=IntentUtils.safeGetStringExtra(intent,ShortcutHelper.EXTRA_ICON);  String url=IntentUtils.safeGetStringExtra(intent,ShortcutHelper.EXTRA_URL);  int orientation=IntentUtils.safeGetIntExtra(intent,ShortcutHelper.EXTRA_ORIENTATION,ScreenOrientationValues.DEFAULT);  int source=IntentUtils.safeGetIntExtra(intent,ShortcutHelper.EXTRA_SOURCE,ShortcutSource.UNKNOWN);  long themeColor=IntentUtils.safeGetLongExtra(intent,ShortcutHelper.EXTRA_THEME_COLOR,ShortcutHelper.MANIFEST_COLOR_INVALID_OR_MISSING);  long backgroundColor=IntentUtils.safeGetLongExtra(intent,ShortcutHelper.EXTRA_BACKGROUND_COLOR,ShortcutHelper.MANIFEST_COLOR_INVALID_OR_MISSING);  boolean isIconGenerated=IntentUtils.safeGetBooleanExtra(intent,ShortcutHelper.EXTRA_IS_ICON_GENERATED,false);  String name=nameFromIntent(intent);  String shortName=shortNameFromIntent(intent);  return create(id,url,icon,name,shortName,orientation,source,themeColor,backgroundColor,isIconGenerated);}  }
class C{  public void paintDisplay(Graphics2D g2D,Dimension d){synchronized (m_vis) {synchronized (this) {      if (m_clip.isEmpty())       return;      m_screen.setClip(0,0,d.width + 1,d.height + 1);      m_screen.transform(m_itransform);      double pixel=1.0 + 1.0 / getScale();      if (m_damageRedraw) {        if (m_clip.isInvalid()) {          m_clip.setClip(m_screen);        } else {          m_clip.intersection(m_screen);        }        m_clip.expand(pixel);        prepareGraphics(g2D);        m_rclip.setFrameFromDiagonal(m_clip.getMinX(),m_clip.getMinY(),m_clip.getMaxX(),m_clip.getMaxY());        g2D.setClip(m_rclip);        m_rclip.setFrameFromDiagonal(m_clip.getMinX() - pixel,m_clip.getMinY() - pixel,m_clip.getMaxX() + pixel,m_clip.getMaxY() + pixel);      } else {        m_rclip.setFrame(m_screen.getMinX(),m_screen.getMinY(),m_screen.getWidth(),m_screen.getHeight());        m_clip.setClip(m_screen);        prepareGraphics(g2D);      }      clearRegion(g2D,m_rclip);      getItemBounds(m_rclip);      m_bounds.reset();      m_queue.clear();      Iterator items=m_vis.items(m_predicate);      for (m_visibleCount=0; items.hasNext(); ++m_visibleCount) {        VisualItem item=(VisualItem)items.next();        Rectangle2D bounds=item.getBounds();        m_bounds.union(bounds);        if (m_clip.intersects(bounds,pixel))         m_queue.addToRenderQueue(item);        if (item.isInteractive())         m_queue.addToPickingQueue(item);      }      m_queue.sortRenderQueue();      for (int i=0; i < m_queue.rsize; ++i) {        m_queue.ritems[i].render(g2D);      }      if (m_damageRedraw)       m_clip.reset();      checkItemBoundsChanged(m_rclip);    }  }}  }
class C{  public UTF16Reader(InputStream inputStream,byte[] buffer,boolean isBigEndian,MessageFormatter messageFormatter,Locale locale){  fInputStream=inputStream;  fBuffer=buffer;  fIsBigEndian=isBigEndian;  fFormatter=messageFormatter;  fLocale=locale;}  }
class C{  public void makePersistent(){  this.isTransient=false;}  }
class C{  public void addNewStyledLayer(UserLayer userLayer){  if (this.sld == null) {    ConsoleManager.getInstance().error(this,"sld == null");  } else {    this.sld.addStyledLayer(userLayer);  }}  }
class C{  private void filterSpuriousVertices(final List<Segment> loop){  for (int i=0; i < loop.size(); ++i) {    final Segment previous=loop.get(i);    int j=(i + 1) % loop.size();    final Segment next=loop.get(j);    if (next != null && Precision.equals(previous.getLine().getAngle(),next.getLine().getAngle(),Precision.EPSILON)) {      loop.set(j,new Segment(previous.getStart(),next.getEnd(),previous.getLine()));      loop.remove(i--);    }  }}  }
class C{  public ReadTakeEntriesSpaceOperationRequest(){}  }
class C{  private void finishScrollStacks(){  cancelAnimation(this,Property.STACK_SNAP);  final int currentModelIndex=getTabStackIndex();  float delta=Math.abs(currentModelIndex + mRenderedScrollOffset);  float target=-currentModelIndex;  if (delta != 0) {    long duration=FLING_MIN_DURATION + (long)Math.abs(delta * getFullScrollDistance() / mFlingSpeed);    addToAnimation(this,Property.STACK_SNAP,mRenderedScrollOffset,target,duration,0);  } else {    setProperty(Property.STACK_SNAP,target);    if (mTemporarySelectedStack != null) {      mTabModelSelector.selectModel(mTemporarySelectedStack);      mTemporarySelectedStack=null;    }  }}  }
class C{  static Iterable<Type> createAdditionalServiceTypes(){  Map<String,DescriptorProto> additionalMessages=Maps.newHashMap();  additionalMessages.put(Struct.getDescriptor().getFullName(),Struct.getDescriptor().toProto());  additionalMessages.put(Value.getDescriptor().getFullName(),Value.getDescriptor().toProto());  additionalMessages.put(ListValue.getDescriptor().getFullName(),ListValue.getDescriptor().toProto());  additionalMessages.put(Empty.getDescriptor().getFullName(),Empty.getDescriptor().toProto());  additionalMessages.put(Int32Value.getDescriptor().getFullName(),Int32Value.getDescriptor().toProto());  additionalMessages.put(DoubleValue.getDescriptor().getFullName(),DoubleValue.getDescriptor().toProto());  additionalMessages.put(BoolValue.getDescriptor().getFullName(),BoolValue.getDescriptor().toProto());  additionalMessages.put(StringValue.getDescriptor().getFullName(),StringValue.getDescriptor().toProto());  for (  Descriptor descriptor : Struct.getDescriptor().getNestedTypes()) {    additionalMessages.put(descriptor.getFullName(),descriptor.toProto());  }  String fileName="struct.proto";  List<Type> additionalTypes=Lists.newArrayList();  for (  String typeName : additionalMessages.keySet()) {    additionalTypes.add(TypesBuilderFromDescriptor.createType(typeName,additionalMessages.get(typeName),fileName));  }  return additionalTypes;}  }
class C{  public boolean dominates(Unit champ,Unit challenger){  if (champ == null || challenger == null)   return false;  if (champ.equals(challenger))   return true;  if (unitToBlock == null)   unitToBlock=getUnitToBlockMap(cfg);  Block champBlock=unitToBlock.get(champ);  Block challengerBlock=unitToBlock.get(challenger);  if (champBlock.equals(challengerBlock)) {    Iterator<Unit> unitsIt=champBlock.iterator();    while (unitsIt.hasNext()) {      Unit unit=unitsIt.next();      if (unit.equals(champ))       return true;      if (unit.equals(challenger))       return false;    }    throw new RuntimeException("Assertion failed.");  }  DominatorNode<Block> champNode=dt.getDode(champBlock);  DominatorNode<Block> challengerNode=dt.getDode(challengerBlock);  return (dt.isDominatorOf(champNode,challengerNode));}  }
class C{  public void rightClick(int delay) throws InterruptedException {  click(InputEvent.BUTTON3_MASK,delay);}  }
class C{  public Bundle onSaveInstanceState(){  Bundle state=new Bundle();  state.putInt("destType",this.destType);  state.putInt("srcType",this.srcType);  state.putInt("mQuality",this.mQuality);  state.putInt("targetWidth",this.targetWidth);  state.putInt("targetHeight",this.targetHeight);  state.putInt("encodingType",this.encodingType);  state.putInt("mediaType",this.mediaType);  state.putInt("numPics",this.numPics);  state.putBoolean("allowEdit",this.allowEdit);  state.putBoolean("correctOrientation",this.correctOrientation);  state.putBoolean("saveToPhotoAlbum",this.saveToPhotoAlbum);  if (this.croppedUri != null) {    state.putString("croppedUri",this.croppedUri.toString());  }  if (this.imageUri != null) {    state.putString("imageUri",this.imageUri.toString());  }  return state;}  }
class C{  private void disconnectFromGeoServer(GeoServerClientInterface client){  if (client != null) {    client.disconnect();    GeoServerConnection connection=client.getConnection();    if (connection != null) {      geoServerStyleMap.remove(connection);      geoServerLayerMap.remove(connection);      progress.disconnect(connection);    }  }}  }
class C{  private void onRenameFileOperationFinish(RenameFileOperation operation,RemoteOperationResult result){  OCFile renamedFile=operation.getFile();  if (result.isSuccess()) {    FileFragment details=getSecondFragment();    if (details != null) {      if (details instanceof FileDetailFragment && renamedFile.equals(details.getFile())) {        ((FileDetailFragment)details).updateFileDetails(renamedFile,getAccount());        showDetails(renamedFile);      } else       if (details instanceof PreviewMediaFragment && renamedFile.equals(details.getFile())) {        ((PreviewMediaFragment)details).updateFile(renamedFile);        if (PreviewMediaFragment.canBePreviewed(renamedFile)) {          int position=((PreviewMediaFragment)details).getPosition();          startMediaPreview(renamedFile,position,true);        } else {          getFileOperationsHelper().openFile(renamedFile);        }      } else       if (details instanceof PreviewTextFragment && renamedFile.equals(details.getFile())) {        ((PreviewTextFragment)details).updateFile(renamedFile);        if (PreviewTextFragment.canBePreviewed(renamedFile)) {          startTextPreview(renamedFile);        } else {          getFileOperationsHelper().openFile(renamedFile);        }      }    }    if (getStorageManager().getFileById(renamedFile.getParentId()).equals(getCurrentDir())) {      refreshListOfFilesFragment();    }  } else {    Toast msg=Toast.makeText(this,ErrorMessageAdapter.getErrorCauseMessage(result,operation,getResources()),Toast.LENGTH_LONG);    msg.show();    if (result.isSslRecoverableException()) {      mLastSslUntrustedServerResult=result;      showUntrustedCertDialog(mLastSslUntrustedServerResult);    }  }}  }
class C{  private static String buildMessage(final Locale locale,final Localizable specifier,final Object... parts){  return (specifier == null) ? "" : new MessageFormat(specifier.getLocalizedString(locale),locale).format(parts);}  }
class C{  private void refreshState(){  updateSummaries();  rebuildProfileList();  rebuildCreditCardList();}  }
class C{  @Override public void startCDATA(Augmentations augs) throws XNIException {  if (fPerformValidation && fInElementContent) {    charDataInContent();  }  fInCDATASection=true;  if (fDocumentHandler != null) {    fDocumentHandler.startCDATA(augs);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Aura_A_TO_B(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200917,skillcaster,skillname);}  }
class C{  public boolean handleNotifyFifoInCommit(Context context,XtnEntry xtnEntry,boolean fifoNotifyForNonFifoEvents) throws SAException {  boolean res=false;  if (!_cacheManager.getTemplatesManager().anyNotifyFifoTakeTemplates() && !_cacheManager.getTemplatesManager().anyNotifyFifoUpdateTemplates() && !_cacheManager.getTemplatesManager().anyNotifyFifoWriteTemplates())   return res;  if (fifoNotifyForNonFifoEvents) {    if (!_cacheManager.getTemplatesManager().anyNotifyFifoTakeTemplatesForNonFifoType() && !_cacheManager.getTemplatesManager().anyNotifyFifoUpdateTemplatesForNonFifoType() && !_cacheManager.getTemplatesManager().anyNotifyFifoWriteTemplatesForNonFifoType())     return res;  }  ISAdapterIterator iter=null;  IServerTypeDesc typeDesc=null;  try {    iter=_cacheManager.makeUnderXtnEntriesIter(context,xtnEntry,SelectType.NEED_NOTIFY_ENTRIES);    final XtnData pXtn=xtnEntry.getXtnData();    if (iter != null) {      while (true) {        IEntryHolder entry=(IEntryHolder)iter.next();        if (entry == null)         break;        if (!_engine.getLeaseManager().isNoReapUnderXtnLeases() && entry.isExpired(_engine.getLeaseManager().getEffectiveEntryLeaseTime(xtnEntry.m_CommitRollbackTimeStamp)) && !_engine.isExpiredEntryStayInSpace(entry))         continue;        context.setOperationID(pXtn.getOperationID(entry.getUID()));        int operation;switch (entry.getWriteLockOperation()) {case SpaceOperations.TAKE:case SpaceOperations.TAKE_IE:          if (!_cacheManager.getTemplatesManager().anyNotifyFifoTakeTemplates())           continue;        if (typeDesc == null || !typeDesc.getTypeName().equals(entry.getClassName()))         typeDesc=_engine.getTypeTableEntry(entry.getClassName());      if ((typeDesc.isFifoSupported() && fifoNotifyForNonFifoEvents) || (!typeDesc.isFifoSupported() && !fifoNotifyForNonFifoEvents))       continue;    if (!typeDesc.isFifoSupported() && !_cacheManager.getTemplatesManager().anyNotifyFifoForNonFifoTypePerOperation(typeDesc,SpaceOperations.TAKE))     continue;  operation=SpaceOperations.TAKE;break;case SpaceOperations.UPDATE:if (!_cacheManager.getTemplatesManager().anyNotifyFifoUpdateTemplates()) continue;if (typeDesc == null || !typeDesc.getTypeName().equals(entry.getClassName())) typeDesc=_engine.getTypeTableEntry(entry.getClassName());if ((typeDesc.isFifoSupported() && fifoNotifyForNonFifoEvents) || (!typeDesc.isFifoSupported() && !fifoNotifyForNonFifoEvents)) continue;if (!typeDesc.isFifoSupported() && !_cacheManager.getTemplatesManager().anyNotifyFifoForNonFifoTypePerOperation(typeDesc,SpaceOperations.UPDATE)) continue;operation=SpaceOperations.UPDATE;break;default :if (!_cacheManager.getTemplatesManager().anyNotifyFifoWriteTemplates()) continue;if (typeDesc == null || !typeDesc.getTypeName().equals(entry.getClassName())) typeDesc=_engine.getTypeTableEntry(entry.getClassName());if ((typeDesc.isFifoSupported() && fifoNotifyForNonFifoEvents) || (!typeDesc.isFifoSupported() && !fifoNotifyForNonFifoEvents)) continue;if (!typeDesc.isFifoSupported() && !_cacheManager.getTemplatesManager().anyNotifyFifoForNonFifoTypePerOperation(typeDesc,SpaceOperations.WRITE)) continue;operation=SpaceOperations.WRITE;}IEntryHolder notifyeh=operation != SpaceOperations.TAKE ? entry.createCopy() : entry;IEntryHolder shadowEh=entry.getTxnEntryData() != null ? entry.getTxnEntryData().getOtherUpdateUnderXtnEntry() : null;FifoBackgroundRequest red=new FifoBackgroundRequest(context.getOperationID(),true,false,entry,shadowEh,xtnEntry.isFromReplication(),operation,null,notifyeh);red.setXtnEnd();red.setTime(xtnEntry.m_CommitRollbackTimeStamp);if (fifoNotifyForNonFifoEvents) red.setAllowFifoNotificationsForNonFifoEvents(xtnEntry.getAllowFifoNotificationsForNonFifoEntries());_fifoBackgroundDispatcher.positionAndActivateRequest(red);res=true;}}}  finally {if (iter != null) iter.close();}return res;}  }
class C{  public void requestSetFailedNode(int nodeId){  enqueue(new ReplaceFailedNodeMessageClass().doRequest(nodeId));}  }
class C{  public WallSearchQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  private void drawRocket(Canvas canvas){  if (mIsRocketAnimationFinished) {    return;  }  Drawable rocketDrawable=mConfig.getRocketDrawable();  Drawable flameDrawable=mConfig.getFlameDrawable();  canvas.save();  float dragPercent=Math.min(1f,Math.abs(mPercent));  float scalePercentDelta=dragPercent - SCALE_START_PERCENT;  float scalePercent=scalePercentDelta / (1.0f - SCALE_START_PERCENT);  float rocketScale=ROCKET_INITIAL_SCALE + (ROCKET_FINAL_SCALE - ROCKET_INITIAL_SCALE) * scalePercent;  canvas.scale(rocketScale,rocketScale,canvas.getWidth() / 2.f,canvas.getHeight() / 2.f);  float offsetX=canvas.getWidth() / 2.f - rocketDrawable.getIntrinsicWidth() / 2.f + (1f - rocketScale) * rocketDrawable.getIntrinsicWidth() / 2.f;  float offsetY=mRocketTopOffset + (1.0f - dragPercent) * mParent.getTotalDragDistance() - mTop;  offsetY-=(Math.max(mParent.getTotalDragDistance(),mScreenWidth) + rocketDrawable.getIntrinsicHeight()) * mRocketAnimationPercent;  canvas.rotate((float)getRocketAngle(),canvas.getWidth() / 2.f,offsetY + rocketDrawable.getIntrinsicHeight() / 2.f);  float offsetXDelta=0;  if (mIsAnimationStarted) {    int sign=-1;    float rocketAngle=(float)getRocketAngle();    if (mPointerPositionX < mScreenWidth / 2.) {      sign=1;    } else {      rocketAngle=360 - rocketAngle;    }    double rocketAngleRadians=rocketAngle * (Math.PI / 180.);    double tan=Math.tan(rocketAngleRadians);    offsetXDelta=(float)((mParent.getTotalDragDistance() - offsetY) * tan) * sign;    if (mIgnoredRocketXOffset == 0) {      mIgnoredRocketXOffset=offsetXDelta;    }    offsetXDelta-=mIgnoredRocketXOffset;    final Bubble lastSmokeBubble=mRocketSmokeBubbles.isEmpty() ? null : mRocketSmokeBubbles.get(mRocketSmokeBubbles.size() - 1);    int rocketDPositionSign=lastSmokeBubble == null || lastSmokeBubble.getDPosition().getX() < 0 ? 1 : -1;    float points[]=mapPoints(canvas,offsetX + offsetXDelta + rocketDrawable.getIntrinsicWidth() / 2f,offsetY + rocketDrawable.getIntrinsicHeight());    if (lastSmokeBubble == null || points[1] < (lastSmokeBubble.getYPos() - mFireworkBubbleRadius)) {      mRocketSmokeBuilder.position(points[0],points[1]).dPosition(0.05f * rocketDPositionSign,0.05f).radius(mFireworkBubbleRadius / 2f).color(Color.WHITE);      mRocketSmokeBubbles.add(mRocketSmokeBuilder.build());    }  }  canvas.translate(offsetX + offsetXDelta,offsetY);  rocketDrawable.setBounds(0,0,rocketDrawable.getIntrinsicWidth(),rocketDrawable.getIntrinsicHeight());  rocketDrawable.draw(canvas);  canvas.translate(-rocketDrawable.getIntrinsicWidth() * rocketScale / 2f,rocketDrawable.getIntrinsicHeight() * rocketScale - flameDrawable.getIntrinsicHeight() / 4f);  canvas.scale(mFlameScale,mFlameScale,flameDrawable.getIntrinsicWidth() / 2f,flameDrawable.getIntrinsicHeight() / 2f);  flameDrawable.setBounds(0,0,flameDrawable.getIntrinsicWidth(),flameDrawable.getIntrinsicHeight());  flameDrawable.draw(canvas);  canvas.restore();}  }
class C{  public static int copy(Reader input,Writer output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  public void addSwipeListener(SwipeListener listener){  if (mListeners == null) {    mListeners=new ArrayList<SwipeListener>();  }  mListeners.add(listener);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_CHANNEL_LEVEL_CHANGED(String value0){  return new SM_SYSTEM_MESSAGE(1300938,value0);}  }
class C{  public FileAlterationObserver(String directoryName){  this(new File(directoryName));}  }
class C{  public void addNewEntry(){  FeatureTypeConstraint ftc=styleFactory.createFeatureTypeConstraint(DEFAULT_NAME,Filter.INCLUDE,new Extent[0]);  ftcList.add(ftc);  this.fireTableDataChanged();  if (parentObj != null) {    parentObj.featureTypeConstraintUpdated();  }}  }
class C{  private long binomialCoefficient(int n,int k) throws MathRuntimeException {  if (binomialCache.size() > n) {    Long cachedResult=binomialCache.get(n).get(Integer.valueOf(k));    if (cachedResult != null) {      return cachedResult.longValue();    }  }  long result=-1;  if ((n == k) || (k == 0)) {    result=1;  } else   if ((k == 1) || (k == n - 1)) {    result=n;  } else {    if (k < n - 100) {      binomialCoefficient(n - 100,k);    }    if (k > 100) {      binomialCoefficient(n - 100,k - 100);    }    result=ArithmeticUtils.addAndCheck(binomialCoefficient(n - 1,k - 1),binomialCoefficient(n - 1,k));  }  if (result == -1) {    throw new MathRuntimeException(LocalizedCoreFormats.ARITHMETIC_EXCEPTION);  }  for (int i=binomialCache.size(); i < n + 1; i++) {    binomialCache.add(new HashMap<Integer,Long>());  }  binomialCache.get(n).put(Integer.valueOf(k),Long.valueOf(result));  return result;}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  public IEntryHolder associateEntryWithXtn(Context context,IEntryHolder entryHolder,ITemplateHolder template,XtnEntry xtnEntry,IEntryHolder new_content) throws SAException {  final XtnData pXtn=xtnEntry.getXtnData();  xtnEntry.setOperatedUpon();  TypeData typeData=_typeDataMap.get(entryHolder.getServerTypeDesc());  IEntryCacheInfo pEntry=getPEntryByUid(entryHolder.getUID());  if (!pEntry.isPinned())   throw new RuntimeException("associateEntryWithXtn: internal error- entry uid =" + pEntry.getUID() + " not pinned");  if (!pXtn.isLockedEntry(pEntry)) {    lockEntry(pXtn,pEntry,context.getOperationID());  } else {    updateLock(pXtn,pEntry,context.getOperationID(),template.getTemplateOperation());  }switch (template.getTemplateOperation()) {case SpaceOperations.READ:case SpaceOperations.READ_IE:    if (pEntry.getEntryHolder(this).getWriteLockTransaction() == null || !pEntry.getEntryHolder(this).getWriteLockTransaction().equals(xtnEntry.m_Transaction)) {      if (ReadModifiers.isExclusiveReadLock(template.getOperationModifiers())) {        pEntry.getEntryHolder(this).clearReadLockOwners();        pEntry.getEntryHolder(this).setWriteLockOwnerAndOperation(xtnEntry,template.getTemplateOperation());      } else {        pEntry.getEntryHolder(this).addReadLockOwner(pXtn.getXtnEntry());      }    }  break;case SpaceOperations.TAKE:case SpaceOperations.TAKE_IE:boolean restoreShadowValues=false;if (pEntry.getEntryHolder(this).getWriteLockTransaction() != null && pEntry.getEntryHolder(this).hasShadow()) if (pEntry.getEntryHolder(this).getWriteLockOperation() == SpaceOperations.UPDATE && pEntry.getEntryHolder(this).getWriteLockTransaction().equals(xtnEntry.m_Transaction)) restoreShadowValues=true;pEntry.getEntryHolder(this).clearReadLockOwners();pEntry.getEntryHolder(this).setWriteLockOwnerAndOperation(xtnEntry,template.getTemplateOperation());if (restoreShadowValues) {consolidateWithShadowEntry(typeData,pEntry,true,false);pXtn.removeRewrittenEntryIndication(pEntry.getUID());}pXtn.addToTakenEntriesIfNotInside(pEntry);break;case SpaceOperations.UPDATE:pEntry.getEntryHolder(this).clearReadLockOwners();boolean newShadow=true;if (pEntry.getEntryHolder(this).getWriteLockOperation() == SpaceOperations.WRITE && pEntry.getEntryHolder(this).getWriteLockTransaction() != null && pEntry.getEntryHolder(this).getWriteLockTransaction().equals(xtnEntry.m_Transaction)) newShadow=false;if (pEntry.getEntryHolder(this).getWriteLockOperation() == SpaceOperations.UPDATE && pEntry.getEntryHolder(this).getWriteLockTransaction() != null && pEntry.getEntryHolder(this).getWriteLockTransaction().equals(xtnEntry.m_Transaction) && pEntry.getEntryHolder(this).hasShadow()) newShadow=false;if ((pEntry.getEntryHolder(this).getWriteLockOperation() == SpaceOperations.TAKE || pEntry.getEntryHolder(this).getWriteLockOperation() == SpaceOperations.TAKE_IE) && pEntry.getEntryHolder(this).getWriteLockTransaction() != null && pEntry.getEntryHolder(this).getWriteLockTransaction().equals(xtnEntry.m_Transaction)) {pXtn.signalRewrittenEntry(pEntry.getUID());pXtn.removeTakenEntry(pEntry);}if (newShadow) {if (getTypeData(pEntry.getEntryHolder(this).getServerTypeDesc()).hasFifoGroupingIndex()) pXtn.addToEntriesForFifoGroupScan(pEntry.getEntryHolder(this));ShadowEntryHolder shadowEh=createShadowEntry(pEntry,typeData);pEntry.getEntryHolder(this).setWriteLockOwnerOperationAndShadow(xtnEntry,template.getTemplateOperation(),shadowEh);}pEntry.getEntryHolder(this).setMaybeUnderXtn(true);IEntryData new_content_data=new_content.getEntryData();pEntry=updateEntryInCache(context,pEntry,pEntry.getEntryHolder(this),new_content_data,new_content_data.getExpirationTime(),template.getOperationModifiers());if (template.isChange()) pXtn.setInPlaceUpdatedEntry(pEntry.getEntryHolder(this),template.getMutators()); else pXtn.setUpdatedEntry(pEntry.getEntryHolder(this),context.getPartialUpdatedValuesIndicators());break;}pEntry.getEntryHolder(this).setMaybeUnderXtn(true);return pEntry.getEntryHolder(this);}  }
class C{  protected void addAbsoluteFooter(@LayoutRes int layoutId,int type){  Insertion insertion=new Insertion(layoutId,null,type);  mInserts.add(insertion);  getItems().add(null);  mFootersCount+=1;  notifyChangedIfNeed(getItemCount() - 1);}  }
class C{  public Session remove(String key){  a.remove(key);  return this;}  }
class C{  public void establishRelation(AtomicQuery aq){  Atomic aqAtom=aq.getAtom();  if (atom.getTypeId().equals(aqAtom.getTypeId())) {    if (atom.isRelation() && aqAtom.getRoleVarTypeMap().size() > atom.getRoleVarTypeMap().size())     aq.addChild(this); else     this.addChild(aq);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stumble_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200593,skillcaster,skillname);}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public NewLineSLD(){  super(Localisation.getString(NewLineSLD.class,"NewLineSLD.title"));}  }
class C{  public static float normalize(float val,float minVal,float maxVal){  if (val < minVal || val > maxVal)   throw new IllegalArgumentException("Value must be between min and max values. [val, min, max]: [" + val + ","+ minVal+ ", "+ maxVal+ "]");  return (val - minVal) / (maxVal - minVal);}  }
class C{  protected GroupsGetRequestsQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  private int calculateLayoutHeight(int heightSize,int mode){  mItemsLayout.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));  mItemsLayout.measure(MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED),MeasureSpec.makeMeasureSpec(heightSize,MeasureSpec.UNSPECIFIED));  int height=mItemsLayout.getMeasuredHeight();  if (mode == MeasureSpec.EXACTLY) {    height=heightSize;  } else {    height+=2 * mItemsPadding;    height=Math.max(height,getSuggestedMinimumHeight());    if (mode == MeasureSpec.AT_MOST && heightSize < height) {      height=heightSize;    }  }  mItemsLayout.measure(MeasureSpec.makeMeasureSpec(400,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(height - 2 * mItemsPadding,MeasureSpec.EXACTLY));  return height;}  }
class C{  public void tan(final double[] operand,final int operandOffset,final double[] result,final int resultOffset){  final double[] function=new double[1 + order];  final double t=FastMath.tan(operand[operandOffset]);  function[0]=t;  if (order > 0) {    final double[] p=new double[order + 2];    p[1]=1;    final double t2=t * t;    for (int n=1; n <= order; ++n) {      double v=0;      p[n + 1]=n * p[n];      for (int k=n + 1; k >= 0; k-=2) {        v=v * t2 + p[k];        if (k > 2) {          p[k - 2]=(k - 1) * p[k - 1] + (k - 3) * p[k - 3];        } else         if (k == 2) {          p[0]=p[1];        }      }      if ((n & 0x1) == 0) {        v*=t;      }      function[n]=v;    }  }  compose(operand,operandOffset,function,result,resultOffset);}  }
class C{  public PagerManageImplementor(PagerManageModel model,PagerManageView view){  this.model=model;  this.view=view;}  }
class C{  public double nextDouble(boolean includeZero,boolean includeOne){  double d=0.0;  do {    d=nextDouble();    if (includeOne && nextBoolean())     d+=1.0;  } while ((d > 1.0) || (!includeZero && d == 0.0));  return d;}  }
class C{  @Override public void onConfirmation(String callerTag){  ComponentsGetter cg=(ComponentsGetter)getActivity();  FileDataStorageManager storageManager=cg.getStorageManager();  if (storageManager.getFileById(mTargetFile.getFileId()) != null) {    ArrayList<OCFile> list=new ArrayList<>();    list.add(mTargetFile);    cg.getFileOperationsHelper().removeFiles(list,false);  }}  }
class C{  public boolean isAnimate(){  return animate;}  }
class C{  private void runExecutorAndAwaitCompletion(){  try {    executor.awaitCompletion();  } catch (  InterruptedException e) {    e.printStackTrace();  }  Throwable exception=executor.getException();  if (exception != null) {    throw new RuntimeException("There were exceptions during IFDS analysis. Exiting.",exception);  }}  }
class C{  double onAverage(String tableName,String column,String[] conditions){  return mathQuery(tableName,new String[]{"avg(" + column + ")"},conditions,double.class);}  }
class C{  @Override public void readCatalog(Catalog catalog,String fileUrl) throws IOException {  URL catURL=null;  try {    catURL=new URL(fileUrl);  } catch (  MalformedURLException e) {    catURL=new URL("file:///" + fileUrl);  }  URLConnection urlCon=catURL.openConnection();  try {    readCatalog(catalog,urlCon.getInputStream());  } catch (  FileNotFoundException e) {    catalog.getCatalogManager().debug.message(1,"Failed to load catalog, file not found",catURL.toString());  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PvPZONE_MY_DEATH_TO_B(String value0){  return new SM_SYSTEM_MESSAGE(1340001,value0);}  }
class C{  public void onTabsViewShown(){  mUma.onTabsViewShown();}  }
class C{  public WyporiumTradeCursor queryWyporiumTrades(){  return mHelper.queryWyporiumTrades();}  }
class C{  public double sumWithWeights(){  double dSum=0;  for (  TKeyType dKey : hDistro.keySet()) {    if (dKey instanceof Double)     dSum+=((Double)dKey * getValue(dKey)); else     dSum+=getValue(dKey);  }  return dSum;}  }
class C{  public void discardRecording(){  if (recorder != null) {    try {      recorder.stop();      recorder.release();      recorder=null;      if (file != null && file.exists() && !file.isDirectory()) {        file.delete();      }    } catch (    IllegalStateException e) {    }catch (    RuntimeException e) {    }    isRecording=false;  }}  }
class C{  public static boolean isValidVector(Vector2f vector){  if (vector == null) {    return false;  }  if (Float.isNaN(vector.x) || Float.isNaN(vector.y)) {    return false;  }  if (Float.isInfinite(vector.x) || Float.isInfinite(vector.y)) {    return false;  }  return true;}  }
class C{  Collection<? extends ClientRequestResult> handleTagConfigurationRequest(final ClientRequest tagConfigurationRequest){  final Collection<TagConfig> transferTags=new ArrayList<TagConfig>(tagConfigurationRequest.getIds().size());  for (  Long tagId : tagConfigurationRequest.getIds()) {    if (tagLocationService.isInTagCache(tagId)) {      final TagWithAlarms tagWithAlarms=tagFacadeGateway.getTagWithAlarms(tagId);      HashSet<Process> tagProcesses=new HashSet<Process>();      for (      Long procId : tagWithAlarms.getTag().getProcessIds()) {        tagProcesses.add(processCache.get(procId));      }switch (tagConfigurationRequest.getResultType()) {case TRANSFER_TAG_CONFIGURATION_LIST:        transferTags.add(TransferObjectFactory.createTagConfiguration(tagWithAlarms,tagProcesses));      break;default :    LOG.error("handleConfigurationRequest() - Could not generate response message. Unknown enum ResultType " + tagConfigurationRequest.getResultType());}} else {LOG.warn("handleConfigurationRequest() - Received client request (TagConfigRequest) for unrecognized Tag with id " + tagId);}}if (LOG.isDebugEnabled()) {LOG.debug("handleConfigurationRequest() - Finished processing Tag request (with config info): returning " + transferTags.size() + " Tags");}return transferTags;}  }
class C{  public boolean isSlackEnabled(){  return this.slackEnabled;}  }
class C{  public void addClickingListener(OnWheelClickedListener listener){  clickingListeners.add(listener);}  }
class C{  protected void finalize(){  release();}  }
class C{  private <T>T readValue(TypeReference<T> typeReference,String value){  try {    return objectMapper.readValue(value,typeReference);  } catch (  IOException e) {    LOG.error("Exception while reading dimension rows {}",e);    throw new RuntimeException(e);  }}  }
class C{  protected MarketEditCommentQuery commentId(int value){  return unsafeParam("comment_id",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_CHANNEL_LEAVE(String value0){  return new SM_SYSTEM_MESSAGE(1300843,value0);}  }
class C{  public int next(){  moveToNextIndex();  return _hash._set[_index];}  }
class C{  public ZoomingPanControl(){  this(true);}  }
class C{  @Override public String toIdString(Object id){  return meta.getPrimaryKey().toKeyString(id);}  }
class C{  @Override public void onMessageReceived(RemoteMessage remoteMessage){  FCMManager.getInstance(getApplicationContext()).onMessage(remoteMessage);}  }
class C{  public JSONObject append(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,new JSONArray().put(value));  } else   if (object instanceof JSONArray) {    this.put(key,((JSONArray)object).put(value));  } else {    throw new JSONException("JSONObject[" + key + "] is not a JSONArray.");  }  return this;}  }
class C{  public String cleanTextValueSafe(String text){  if (text != null) {    return text;  } else {    return text;  }}  }
class C{  public static String collapseNewlines(String str){  return collapseCharacter(str,'\n');}  }
class C{  public static int v(String tag,String msg,Throwable tr){  return isPrint && msg != null ? android.util.Log.v(tag,msg,tr) : -1;}  }
class C{  public void destroy(){  if (mDomThread != null && mDomThread.isWXThreadAlive()) {    mDomThread.quit();  }  if (mDomRegistries != null) {    mDomRegistries.clear();  }  mDomHandler=null;  mDomThread=null;}  }
class C{  public static Map<String,String> encodeFilename(String filename){  Map<String,String> propertyMap=new LinkedHashMap<String,String>();  propertyMap.put(DataSourceConnectorInterface.FILE_MAP_KEY,filename);  return propertyMap;}  }
class C{  public static String uNibble(int v){  char[] result=new char[1];  result[0]=Character.forDigit(v & 0x0f,16);  return new String(result);}  }
class C{  public Fraction(double value,double epsilon,int maxIterations) throws MathIllegalStateException {  this(value,epsilon,Integer.MAX_VALUE,maxIterations);}  }
class C{  public String readFile(){  StringBuffer file=new StringBuffer();  try {    BufferedReader br=new BufferedReader(new FileReader(getFilename()));    while (true) {      String temp=br.readLine();      if (temp == null)       break;      temp=temp.trim();      file.append(temp);    }  } catch (  IOException e1) {    System.out.println(e1.getMessage());  }  return file.toString();}  }
class C{  public void stopTrackingOrientation(){  sensorManager.unregisterListener(phoneOrientationListener);}  }
class C{  public static String toString(InputStream input) throws IOException {  return toString(input,Charset.defaultCharset());}  }
class C{  private void initData(Context context){  gestureDetector=new GestureDetector(context,gestureListener);  gestureDetector.setIsLongpressEnabled(false);  LABEL_OFFSET=DensityUtil.dip2px(context,LABEL_OFFSET_DIP);  scroller=new Scroller(context);}  }
class C{  public void refreshSeekTo(int position){  handler.sendMessage(handler.obtainMessage(HANDLER_MESSAGE_REFRESH_LIST));  android.os.Message msg=handler.obtainMessage(HANDLER_MESSAGE_SEEK_TO);  msg.arg1=position;  handler.sendMessage(msg);}  }
class C{  private Builder className(String className){  this.className=className;  return this;}  }
class C{  private Integer[] splitPointsByDelimiterList(String sStr,char[] lDelimiters){  TreeMap tmDels=new TreeMap();  for (int iCnt=0; iCnt < lDelimiters.length; iCnt++)   tmDels.put(iCnt,new String() + lDelimiters[iCnt]);  return splitPointsByDelimiterList(sStr,tmDels);}  }
class C{  public static String store(String name,InputStream in) throws IOException {  String id=id();  store(X.EMPTY,id,name,X.EMPTY,0,in.available(),in,-1,true,-1);  return id;}  }
class C{  public static <T extends RealFieldElement<T>>T distanceSq(final Vector3D v1,final FieldVector3D<T> v2){  return v2.distanceSq(v1);}  }
class C{  @deprecated public static boolean isSingleField(String skeleton){  char first=skeleton.charAt(0);  for (int i=1; i < skeleton.length(); i++) {    if (skeleton.charAt(i) != first)     return false;  }  return true;}  }
class C{  public PartOfSpeechImpl(URL url,String defaultPartOfSpeech) throws IOException {  BufferedReader reader;  String line;  partOfSpeechMap=new HashMap();  this.defaultPartOfSpeech=defaultPartOfSpeech;  reader=new BufferedReader(new InputStreamReader(Utilities.getInputStream(url)));  line=reader.readLine();  lineCount++;  while (line != null) {    if (!line.startsWith("***")) {      parseAndAdd(line);    }    line=reader.readLine();  }  reader.close();}  }
class C{  private boolean containsPan(){  return component.containsGesture(HighLevelGesture.PAN_START) || component.containsGesture(HighLevelGesture.PAN_MOVE) || component.containsGesture(HighLevelGesture.PAN_END);}  }
class C{  private void initView(View v){  this.handler=new SafeHandler<>(this);  StatusBarView statusBar=(StatusBarView)v.findViewById(R.id.fragment_multi_filter_statusBar);  if (DisplayUtils.isNeedSetStatusBarMask()) {    statusBar.setBackgroundResource(R.color.colorPrimary_light);    statusBar.setMask(true);  }  this.container=(CoordinatorLayout)v.findViewById(R.id.fragment_multi_filter_container);  this.appBar=(AppBarLayout)v.findViewById(R.id.fragment_multi_filter_appBar);  Toolbar toolbar=(Toolbar)v.findViewById(R.id.fragment_multi_filter_toolbar);  toolbar.setTitle(getString(R.string.action_multi_filter));  if (Mysplash.getInstance().isLightTheme()) {    toolbar.setNavigationIcon(R.drawable.ic_toolbar_menu_light);  } else {    toolbar.setNavigationIcon(R.drawable.ic_toolbar_menu_dark);  }  toolbar.setNavigationOnClickListener(this);  toolbar.setOnClickListener(this);  this.editTexts=new EditText[]{(EditText)v.findViewById(R.id.fragment_multi_filter_photos_editText),(EditText)v.findViewById(R.id.fragment_multi_filter_users_editText)};  editTexts[0].setOnEditorActionListener(this);  editTexts[1].setOnEditorActionListener(this);  DisplayUtils.setTypeface(getActivity(),editTexts[0]);  DisplayUtils.setTypeface(getActivity(),editTexts[1]);  editTexts[0].setFocusable(true);  editTexts[0].requestFocus();  ImageButton searchBtn=(ImageButton)v.findViewById(R.id.fragment_multi_filter_searchBtn);  searchBtn.setOnClickListener(this);  if (Mysplash.getInstance().isLightTheme()) {    searchBtn.setImageResource(R.drawable.ic_toolbar_search_light);  } else {    searchBtn.setImageResource(R.drawable.ic_toolbar_search_dark);  }  v.findViewById(R.id.fragment_multi_filter_categoryContainer).setOnClickListener(this);  v.findViewById(R.id.fragment_multi_filter_orientationContainer).setOnClickListener(this);  v.findViewById(R.id.fragment_multi_filter_featuredContainer).setOnClickListener(this);  this.menuTexts=new TextView[]{(TextView)v.findViewById(R.id.fragment_multi_filter_categoryTxt),(TextView)v.findViewById(R.id.fragment_multi_filter_orientationTxt),(TextView)v.findViewById(R.id.fragment_multi_filter_featuredTxt)};  for (  TextView t : menuTexts) {    t.setText(R.string.all);    DisplayUtils.setTypeface(getActivity(),t);  }  this.menuIcons=new ImageButton[]{(ImageButton)v.findViewById(R.id.fragment_multi_filter_categoryBtn),(ImageButton)v.findViewById(R.id.fragment_multi_filter_orientationBtn),(ImageButton)v.findViewById(R.id.fragment_multi_filter_featuredBtn)};  for (  ImageButton b : menuIcons) {    if (Mysplash.getInstance().isLightTheme()) {      b.setImageResource(R.drawable.ic_menu_down_light);    } else {      b.setImageResource(R.drawable.ic_menu_down_dark);    }    b.setOnClickListener(this);  }  this.photosView=(MultiFilterPhotosView)v.findViewById(R.id.fragment_multi_filter_photosView);  photosView.setActivity(getActivity());  photosView.setOnMultiFilterDataInputInterface(this);  photosView.setOnClickListener(this);}  }
class C{  @Override public boolean equals(Object o){  return o instanceof AirMapStatusAdvisoryRule && getId().equals(((AirMapStatusAdvisoryRule)o).getId());}  }
class C{  public List escapesThrough(Value sharedValue,SootMethod containingMethod){  List ret=new ArrayList();  for (  AbstractRuntimeThread thread : mhp.getThreads()) {    for (    Object meth : thread.getRunMethods()) {      SootMethod runMethod=(SootMethod)meth;      if (runMethod.getDeclaringClass().isApplicationClass() && !isObjectLocalToContext(sharedValue,containingMethod,runMethod)) {        ClassLocalObjectsAnalysis cloa=getClassLocalObjectsAnalysis(containingMethod.getDeclaringClass());        CallLocalityContext clc=cloa.getMergedContext(containingMethod);        SmartMethodInfoFlowAnalysis smifa=dfa.getMethodInfoFlowAnalysis(containingMethod);        EquivalentValue sharedValueEqVal;        if (sharedValue instanceof InstanceFieldRef)         sharedValueEqVal=InfoFlowAnalysis.getNodeForFieldRef(containingMethod,((FieldRef)sharedValue).getField()); else         sharedValueEqVal=new EquivalentValue(sharedValue);        List<EquivalentValue> sources=smifa.sourcesOf(sharedValueEqVal);        for (        EquivalentValue source : sources) {          if (source.getValue() instanceof Ref) {            if (clc != null && !clc.isFieldLocal(source)) {              ret.add(source);            }          }        }      }    }  }  return ret;}  }
class C{  protected void rehash(int newCapacity){  int oldCapacity=table.length;  int oldTable[]=table;  Object oldValues[]=values;  byte oldState[]=state;  int newTable[]=new int[newCapacity];  Object newValues[]=new Object[newCapacity];  byte newState[]=new byte[newCapacity];  this.lowWaterMark=chooseLowWaterMark(newCapacity,this.minLoadFactor);  this.highWaterMark=chooseHighWaterMark(newCapacity,this.maxLoadFactor);  this.table=newTable;  this.values=newValues;  this.state=newState;  this.freeEntries=newCapacity - this.distinct;  for (int i=oldCapacity; i-- > 0; ) {    if (oldState[i] == FULL) {      int element=oldTable[i];      int index=indexOfInsertion(element);      newTable[index]=element;      newValues[index]=oldValues[i];      newState[index]=FULL;    }  }}  }
class C{  public static boolean isGoUpOrDown(KeyEvent event){  return isGoDown(event) || isGoUp(event);}  }
class C{  @Override public boolean supportsInheritance(){  return false;}  }
class C{  public FilesExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public Vector2DFormat(final String prefix,final String suffix,final String separator,final NumberFormat format){  super(prefix,suffix,separator,format);}  }
class C{  private void updateDataTypeState(){  boolean isSyncEnabled=mSyncSwitchPreference.isChecked();  boolean syncEverything=mSyncEverything.isChecked();  boolean passwordSyncConfigurable=mProfileSyncService.isBackendInitialized() && mProfileSyncService.isCryptographerReady();  for (  CheckBoxPreference pref : mAllTypes) {    boolean canSyncType=pref != mSyncPasswords || passwordSyncConfigurable;    if (!isSyncEnabled) {      pref.setChecked(true);    } else     if (syncEverything) {      pref.setChecked(canSyncType);    }    pref.setEnabled(isSyncEnabled && !syncEverything && canSyncType);  }  if (isSyncEnabled && !syncEverything) {    Set<Integer> syncTypes=mProfileSyncService.getPreferredDataTypes();    mSyncAutofill.setChecked(syncTypes.contains(ModelType.AUTOFILL));    mSyncBookmarks.setChecked(syncTypes.contains(ModelType.BOOKMARKS));    mSyncOmnibox.setChecked(syncTypes.contains(ModelType.TYPED_URLS));    mSyncPasswords.setChecked(passwordSyncConfigurable && syncTypes.contains(ModelType.PASSWORDS));    mSyncRecentTabs.setChecked(syncTypes.contains(ModelType.PROXY_TABS));    mSyncSettings.setChecked(syncTypes.contains(ModelType.PRIORITY_PREFERENCES));  }}  }
class C{  public int addChild(int parent){  throw new UnsupportedOperationException("Changes to tree structure not allowed for spanning trees.");}  }
class C{  private void configureEncoder() throws IOException {  mEncoder=MediaCodec.createByCodecName(mEncoderName);  MediaFormat mediaFormat=MediaFormat.createVideoFormat(MIME_TYPE,mWidth,mHeight);  mediaFormat.setInteger(MediaFormat.KEY_BIT_RATE,BITRATE);  mediaFormat.setInteger(MediaFormat.KEY_FRAME_RATE,FRAMERATE);  mediaFormat.setInteger(MediaFormat.KEY_COLOR_FORMAT,mEncoderColorFormat);  mediaFormat.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL,1);  mEncoder.configure(mediaFormat,null,null,MediaCodec.CONFIGURE_FLAG_ENCODE);  mEncoder.start();}  }
class C{  public PSVIElementNSImpl(CoreDocumentImpl ownerDocument,String namespaceURI,String qualifiedName,String localName){  super(ownerDocument,namespaceURI,qualifiedName,localName);}  }
class C{  protected void createMediaPlayerIfNeeded(){  if (mPlayer == null) {    mPlayer=new MediaPlayer();    mPlayer.setWakeMode(getApplicationContext(),PowerManager.PARTIAL_WAKE_LOCK);    mPlayer.setOnPreparedListener(this);    mPlayer.setOnCompletionListener(this);    mPlayer.setOnErrorListener(this);  } else {    mPlayer.reset();  }}  }
class C{  protected AccountRegisterDeviceQuery token(String value){  return unsafeParam("token",value);}  }
class C{  private synchronized void notifyListeners(final Tag clone){  for (  BaseListener updateListener : listeners) {    try {      updateListener.onUpdate(clone);    } catch (    Exception e) {      LOG.error("notifyListeners() : error notifying DataTagUpdateListeners",e);    }  }}  }
class C{  public boolean isEmpty(){  return (mLayout == R.layout.file_details_empty || getFile() == null || mAccount == null);}  }
class C{  public static String fakeSignature(String qualifiedName){  String cname=qualifiedName.substring(0,qualifiedName.lastIndexOf('.'));  String mname=qualifiedName.substring(qualifiedName.lastIndexOf('.') + 1,qualifiedName.length());  return "<" + cname + ": "+ mname+ ">";}  }
class C{  public DOMParser(SymbolTable symbolTable,XMLGrammarPool grammarPool){  super((XMLParserConfiguration)ObjectFactory.createObject("mf.org.apache.xerces.xni.parser.XMLParserConfiguration","mf.org.apache.xerces.parsers.XIncludeAwareParserConfiguration"));  fConfiguration.addRecognizedProperties(RECOGNIZED_PROPERTIES);  if (symbolTable != null) {    fConfiguration.setProperty(SYMBOL_TABLE,symbolTable);  }  if (grammarPool != null) {    fConfiguration.setProperty(XMLGRAMMAR_POOL,grammarPool);  }}  }
class C{  public PhotosGetQueryWithExtended rev(Boolean value){  return unsafeParam("rev",value);}  }
class C{  public static double sumSq(final double... values) throws MathIllegalArgumentException {  return SUM_OF_SQUARES.evaluate(values);}  }
class C{  public boolean showCameraSites(){  return mContentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_MEDIASTREAM_CAMERA;}  }
class C{  public static String toString(URI uri) throws IOException {  return toString(uri,Charset.defaultCharset());}  }
class C{  private Set<Integer> computeTaxonomyId2DataRec(int numberOfDataSets,Node v,Map<Integer,Integer[]> id2counts,Map<Integer,NodeData> id2data){  int taxonomyId=(Integer)v.getInfo();  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {    Node w=e.getTarget();    computeTaxonomyId2DataRec(numberOfDataSets,w,id2counts,id2data);  }  int[] assigned=new int[numberOfDataSets];  int[] summarized=new int[numberOfDataSets];  long total=0;  Integer[] counts=id2counts.get(taxonomyId);  if (counts != null) {    int top=Math.min(assigned.length,counts.length);    for (int i=0; i < top; i++) {      if (counts[i] != null) {        assigned[i]=counts[i];        summarized[i]=counts[i];        total+=counts[i];      }    }  }  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {    Node w=e.getTarget();    int wId=(Integer)w.getInfo();    NodeData dataW=id2data.get(wId);    if (dataW != null) {      int[] below=dataW.getSummarized();      int top=Math.min(summarized.length,below.length);      for (int i=0; i < top; i++) {        summarized[i]+=below[i];        total+=below[i];      }    }  }  if (total > 0)   id2data.put(taxonomyId,new NodeData(assigned,summarized));  return null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_CONFLICT_A_TO_B(String skillcaster,String skillname,String skilltarget){  return new SM_SYSTEM_MESSAGE(1201095,skillcaster,skillname,skilltarget);}  }
class C{  @Override public void leave(DelegateExecution execution){  if (log.isDebugEnabled()) {    log.debug("Leaving exclusive gateway '{}'",execution.getCurrentActivityId());  }  ExclusiveGateway exclusiveGateway=(ExclusiveGateway)execution.getCurrentFlowElement();  if (Context.getProcessEngineConfiguration() != null && Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {    Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createActivityEvent(ActivitiEventType.ACTIVITY_COMPLETED,exclusiveGateway.getId(),exclusiveGateway.getName(),execution.getId(),execution.getProcessInstanceId(),execution.getProcessDefinitionId(),exclusiveGateway));  }  SequenceFlow outgoingSequenceFlow=null;  SequenceFlow defaultSequenceFlow=null;  String defaultSequenceFlowId=exclusiveGateway.getDefaultFlow();  Iterator<SequenceFlow> sequenceFlowIterator=exclusiveGateway.getOutgoingFlows().iterator();  while (outgoingSequenceFlow == null && sequenceFlowIterator.hasNext()) {    SequenceFlow sequenceFlow=sequenceFlowIterator.next();    String skipExpressionString=sequenceFlow.getSkipExpression();    if (!SkipExpressionUtil.isSkipExpressionEnabled(execution,skipExpressionString)) {      boolean conditionEvaluatesToTrue=ConditionUtil.hasTrueCondition(sequenceFlow,execution);      if (conditionEvaluatesToTrue && (defaultSequenceFlowId == null || !defaultSequenceFlowId.equals(sequenceFlow.getId()))) {        if (log.isDebugEnabled()) {          log.debug("Sequence flow '{}'selected as outgoing sequence flow.",sequenceFlow.getId());        }        outgoingSequenceFlow=sequenceFlow;      }    } else     if (SkipExpressionUtil.shouldSkipFlowElement(Context.getCommandContext(),execution,skipExpressionString)) {      outgoingSequenceFlow=sequenceFlow;    }    if (defaultSequenceFlowId != null && defaultSequenceFlowId.equals(sequenceFlow.getId())) {      defaultSequenceFlow=sequenceFlow;    }  }  Context.getCommandContext().getHistoryManager().recordActivityEnd((ExecutionEntity)execution,null);  if (outgoingSequenceFlow != null) {    execution.setCurrentFlowElement(outgoingSequenceFlow);  } else {    if (defaultSequenceFlow != null) {      execution.setCurrentFlowElement(defaultSequenceFlow);    } else {      throw new ActivitiException("No outgoing sequence flow of the exclusive gateway '" + exclusiveGateway.getId() + "' could be selected for continuing the process");    }  }  super.leave(execution);}  }
class C{  public static Classification load(String name,String treeFile,String mapFile,ProgressListener progress){synchronized (name2classification) {    Classification classification=name2classification.get(name);    if (classification == null) {      classification=new Classification(name);      name2classification.put(name,classification);    }    classification.load(treeFile,mapFile,progress);    return classification;  }}  }
class C{  private static NotificationCompat.Builder makeCommonBuilder(Context context,long currentTime,long dismissedTaskId){  Intent primaryAction=new Intent(context,MainActivity.class);  PendingIntent primaryActionPI=PendingIntent.getActivity(context,0,primaryAction,PendingIntent.FLAG_UPDATE_CURRENT);  Intent dismissAction=new Intent(context,NagboxService.class);  dismissAction.setAction(NagboxService.ACTION_ON_NOTIFICATION_DISMISSED);  dismissAction.putExtra(NagboxService.EXTRA_TASK_ID,dismissedTaskId);  PendingIntent dismissActionPI=PendingIntent.getService(context,(int)dismissedTaskId,dismissAction,PendingIntent.FLAG_UPDATE_CURRENT);  return new NotificationCompat.Builder(context).setSmallIcon(R.drawable.ic_nag).setColor(ContextCompat.getColor(context,R.color.primaryDark)).setCategory(NotificationCompat.CATEGORY_REMINDER).setPriority(NotificationCompat.PRIORITY_HIGH).setContentIntent(primaryActionPI).setDeleteIntent(dismissActionPI).setAutoCancel(true).setWhen(currentTime).setShowWhen(true).setDefaults(NotificationCompat.DEFAULT_ALL);}  }
class C{  public WallCreateCommentQuery(VkApiClient client,UserActor actor,int postId){  super(client,"wall.createComment",CreateCommentResponse.class);  accessToken(actor.getAccessToken());  postId(postId);}  }
class C{  public void clear(){  log.d(LOG_TAG,"Clear Belvedere cache");  belvedereStorage.clearStorage(context);}  }
class C{  public boolean isExclusiveReadLockOperation(){  return ((_templateOperation == SpaceOperations.READ || _templateOperation == SpaceOperations.READ_IE) && ReadModifiers.isExclusiveReadLock(_operationModifiers) && getXidOriginatedTransaction() != null);}  }
class C{  public void addActionListener(ActionListener actionListener){  this.listenerList.add(ActionListener.class,actionListener);}  }
class C{  public static String normalize(String publicId){  String normal=publicId.replace('\t',' ');  normal=normal.replace('\r',' ');  normal=normal.replace('\n',' ');  normal=normal.trim();  int pos;  while ((pos=normal.indexOf("  ")) >= 0) {    normal=normal.substring(0,pos) + normal.substring(pos + 1);  }  return normal;}  }
class C{  public String toString(String enc) throws UnsupportedEncodingException {  return new String(toByteArray(),enc);}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  if ((slider != null) && (undoRedoObject != null)) {    if (undoRedoObject.getOldValue() instanceof Integer) {      Integer oldValue=(Integer)undoRedoObject.getOldValue();      slider.setValue(oldValue.intValue());    }  }}  }
class C{  public void putSettingsValue(String key,Object value){  try {    JSONObject settingsObject=readSettings();    if (value instanceof Integer) {      settingsObject.put(key,(int)value);    } else     if (value instanceof Boolean) {      settingsObject.put(key,(boolean)value);    } else     if (value instanceof String) {      settingsObject.put(key,value);    } else     if (value instanceof Pair) {      String pairKey=(String)((Pair)value).first;      String pairValue=(String)((Pair)value).second;      JSONObject streamForItem=new JSONObject();      JSONArray streamsArray=settingsObject.has(key) ? settingsObject.getJSONArray(key) : new JSONArray();      JSONArray newStreamsArray=new JSONArray();      streamForItem.put(pairKey,pairValue);      for (int i=0; i < streamsArray.length(); i++) {        if (!streamsArray.getJSONObject(i).has(pairKey)) {          newStreamsArray.put(streamsArray.getJSONObject(i));        }      }      newStreamsArray.put(streamForItem);      settingsObject.put(key,newStreamsArray);    }    saveSettings(settingsObject);  } catch (  JSONException e) {    Logger.printInfo(TAG,"Can't put value for key: " + key + " to json settings");    e.printStackTrace();  }}  }
class C{  @Override public void loadSettings(final Player player){  final int playerId=player.getObjectId();  final PlayerSettings playerSettings=new PlayerSettings();  Connection con=null;  try {    con=DatabaseFactory.getConnection();    PreparedStatement statement=con.prepareStatement("SELECT * FROM player_settings WHERE player_id = ?");    statement.setInt(1,playerId);    ResultSet resultSet=statement.executeQuery();    while (resultSet.next()) {      int type=resultSet.getInt("settings_type");switch (type) {case 0:        playerSettings.setUiSettings(resultSet.getBytes("settings"));      break;case 1:    playerSettings.setShortcuts(resultSet.getBytes("settings"));  break;case 2:playerSettings.setHouseBuddies(resultSet.getBytes("settings"));break;case -1:playerSettings.setDisplay(resultSet.getInt("settings"));break;case -2:playerSettings.setDeny(resultSet.getInt("settings"));break;}}resultSet.close();statement.close();} catch (Exception e) {log.error("Could not restore PlayerSettings data for player " + playerId + " from DB: "+ e.getMessage(),e);} finally {DatabaseFactory.close(con);}playerSettings.setPersistentState(PersistentState.UPDATED);player.setPlayerSettings(playerSettings);}  }
class C{  private void initMetrics(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Initializing Metrics registries");  servletContext.setAttribute(InstrumentedFilter.REGISTRY_ATTRIBUTE,metricRegistry);  servletContext.setAttribute(MetricsServlet.METRICS_REGISTRY,metricRegistry);  log.debug("Registering Metrics Filter");  FilterRegistration.Dynamic metricsFilter=servletContext.addFilter("webappMetricsFilter",new InstrumentedFilter());  metricsFilter.addMappingForUrlPatterns(disps,true,"/*");  metricsFilter.setAsyncSupported(true);  log.debug("Registering Metrics Servlet");  ServletRegistration.Dynamic metricsAdminServlet=servletContext.addServlet("metricsServlet",new MetricsServlet());  metricsAdminServlet.addMapping("/management/jhipster/metrics/*");  metricsAdminServlet.setAsyncSupported(true);  metricsAdminServlet.setLoadOnStartup(2);}  }
