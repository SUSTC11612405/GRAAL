class C{  public void createTopic(String topic,int partitions,int replication){  createTopic(topic,partitions,replication,new Properties());}  }
class C{  public String slaveof(final String host,final int port){  client.slaveof(host,port);  return client.getStatusCodeReply();}  }
class C{  void open(){  if (!mainFrame.canNavigateAway()) {    return;  }  if (askToSave()) {    return;  }  boolean loading=true;  SaveType fileType;  tryAgain:   while (loading) {    int value=saveOpenFileChooser.showOpenDialog(mainFrame);    if (value != JFileChooser.APPROVE_OPTION) {      return;    }    loading=false;    fileType=convertFilterToType(saveOpenFileChooser.getFileFilter());    final File f=saveOpenFileChooser.getSelectedFile();    if (!fileType.isValid(f)) {      JOptionPane.showMessageDialog(saveOpenFileChooser,"That file is not compatible with the chosen file type","Invalid File",JOptionPane.WARNING_MESSAGE);      loading=true;      continue;    }switch (fileType) {case XML_ANALYSIS:      if (!f.getName().endsWith(".xml")) {        JOptionPane.showMessageDialog(saveOpenFileChooser,L10N.getLocalString("dlg.not_xml_data_lbl","This is not a saved bug XML data file."));        loading=true;        continue tryAgain;      }    if (!mainFrame.openAnalysis(f,fileType)) {      JOptionPane.showMessageDialog(saveOpenFileChooser,"An error occurred while trying to load the analysis.");      loading=true;      continue tryAgain;    }  break;case FBP_FILE:if (!openFBPFile(f)) {  JOptionPane.showMessageDialog(saveOpenFileChooser,"An error occurred while trying to load the analysis.");  loading=true;  continue tryAgain;}break;case FBA_FILE:if (!openFBAFile(f)) {JOptionPane.showMessageDialog(saveOpenFileChooser,"An error occurred while trying to load the analysis.");loading=true;continue tryAgain;}break;default :assert false;}}}  }
class C{  private void dumpPathBuilderResult(PKIXCertPathBuilderResult builderResult){  StringBuilder message=new StringBuilder("Trusted path found: ");  for (  Certificate cert : builderResult.getCertPath().getCertificates()) {    message.append('<').append(((X509Certificate)cert).getSubjectX500Principal().getName()).append("> -> ");  }  message.append('<').append(builderResult.getTrustAnchor().getTrustedCert().getSubjectX500Principal().getName()).append('>');  _log.debug(message.toString());}  }
class C{  public double computeAverageEntropyOfObservation1(){  double entropy=0.0;  for (int b=0; b < totalObservations; b++) {    double prob=mvkeSource.getProbability(sourceObservations[b],b);    double cont=0.0;    if (prob > 0.0) {      cont=-Math.log(prob);    }    entropy+=cont;    if (debug) {      System.out.println(b + ": " + prob+ " -> "+ cont / Math.log(2.0) + " -> sum: " + (entropy / Math.log(2.0)));    }  }  return entropy / (double)totalObservations / Math.log(2.0);}  }
class C{  @Override public void close() throws IOException {}  }
class C{  @Override protected void removeListener(){  DistributionAdvisor da=UpdateAttributesProcessor.this.advisee.getDistributionAdvisor();  if (da.useAdminMembersForDefault()) {    getDistributionManager().removeAllMembershipListener(this);  } else {    super.removeListener();  }}  }
class C{  private Assert(){}  }
class C{  @Override public void onUIReset(PtrFrameLayout frame){  mScale=1f;  mDrawable.stop();}  }
class C{  public void testBug7607() throws Exception {  if (versionMeetsMinimum(4,1)) {    Connection ms932Conn=null, cp943Conn=null, shiftJisConn=null, windows31JConn=null;    try {      Properties props=new Properties();      props.setProperty("characterEncoding","MS932");      ms932Conn=getConnectionWithProps(props);      this.rs=ms932Conn.createStatement().executeQuery("SHOW VARIABLES LIKE 'character_set_client'");      assertTrue(this.rs.next());      String encoding=this.rs.getString(2);      if (!versionMeetsMinimum(5,0,3) && !versionMeetsMinimum(4,1,11)) {        assertEquals("sjis",encoding.toLowerCase(Locale.ENGLISH));      } else {        assertEquals("cp932",encoding.toLowerCase(Locale.ENGLISH));      }      this.rs=ms932Conn.createStatement().executeQuery("SELECT 'abc'");      assertTrue(this.rs.next());      String charsetToCheck="ms932";      assertEquals(charsetToCheck,((com.mysql.jdbc.ResultSetMetaData)this.rs.getMetaData()).getColumnCharacterSet(1).toLowerCase(Locale.ENGLISH));      try {        ms932Conn.createStatement().executeUpdate("drop table if exists testBug7607");        ms932Conn.createStatement().executeUpdate("create table testBug7607 (sortCol int, col1 varchar(100) ) character set sjis");        ms932Conn.createStatement().executeUpdate("insert into testBug7607 values(1, 0x835C)");        ms932Conn.createStatement().executeUpdate("insert into testBug7607 values(2, 0x878A)");        this.rs=ms932Conn.createStatement().executeQuery("SELECT col1 FROM testBug7607 ORDER BY sortCol ASC");        assertTrue(this.rs.next());        String asString=this.rs.getString(1);        assertTrue("\u30bd".equals(asString));        assertTrue(this.rs.next());        asString=this.rs.getString(1);        assertEquals("\u3231",asString);      }  finally {        ms932Conn.createStatement().executeUpdate("drop table if exists testBug7607");      }      props=new Properties();      props.setProperty("characterEncoding","SHIFT_JIS");      shiftJisConn=getConnectionWithProps(props);      this.rs=shiftJisConn.createStatement().executeQuery("SHOW VARIABLES LIKE 'character_set_client'");      assertTrue(this.rs.next());      encoding=this.rs.getString(2);      assertTrue("sjis".equalsIgnoreCase(encoding));      this.rs=shiftJisConn.createStatement().executeQuery("SELECT 'abc'");      assertTrue(this.rs.next());      String charSetUC=((com.mysql.jdbc.ResultSetMetaData)this.rs.getMetaData()).getColumnCharacterSet(1).toUpperCase(Locale.US);      props=new Properties();      props.setProperty("characterEncoding","WINDOWS-31J");      windows31JConn=getConnectionWithProps(props);      this.rs=windows31JConn.createStatement().executeQuery("SHOW VARIABLES LIKE 'character_set_client'");      assertTrue(this.rs.next());      encoding=this.rs.getString(2);      if (!versionMeetsMinimum(5,0,3) && !versionMeetsMinimum(4,1,11)) {        assertEquals("sjis",encoding.toLowerCase(Locale.ENGLISH));      } else {        assertEquals("cp932",encoding.toLowerCase(Locale.ENGLISH));      }      this.rs=windows31JConn.createStatement().executeQuery("SELECT 'abc'");      assertTrue(this.rs.next());      if (!versionMeetsMinimum(4,1,11)) {        assertEquals("sjis".toLowerCase(Locale.ENGLISH),((com.mysql.jdbc.ResultSetMetaData)this.rs.getMetaData()).getColumnCharacterSet(1).toLowerCase(Locale.ENGLISH));      } else {        assertEquals("windows-31j".toLowerCase(Locale.ENGLISH),((com.mysql.jdbc.ResultSetMetaData)this.rs.getMetaData()).getColumnCharacterSet(1).toLowerCase(Locale.ENGLISH));      }      props=new Properties();      props.setProperty("characterEncoding","CP943");      cp943Conn=getConnectionWithProps(props);      this.rs=cp943Conn.createStatement().executeQuery("SHOW VARIABLES LIKE 'character_set_client'");      assertTrue(this.rs.next());      encoding=this.rs.getString(2);      assertTrue("sjis".equalsIgnoreCase(encoding));      this.rs=cp943Conn.createStatement().executeQuery("SELECT 'abc'");      assertTrue(this.rs.next());      charSetUC=((com.mysql.jdbc.ResultSetMetaData)this.rs.getMetaData()).getColumnCharacterSet(1).toUpperCase(Locale.US);      assertEquals("CP943",charSetUC);    }  finally {      if (ms932Conn != null) {        ms932Conn.close();      }      if (shiftJisConn != null) {        shiftJisConn.close();      }      if (windows31JConn != null) {        windows31JConn.close();      }      if (cp943Conn != null) {        cp943Conn.close();      }    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Seeker.getInstance().getIRScheduledAirings();}  }
class C{  public static <T>MutableList<T> toSortedList(Iterable<T> iterable,Comparator<? super T> comparator){  return FastList.newList(iterable).sortThis(comparator);}  }
class C{  @Override public boolean wasTransformCorrected(){  return mWasTransformCorrected;}  }
class C{  public static Dog maxDog(Dog[] dogs){  Dog maxDog=dogs[0];  for (  Dog d : dogs) {    if (d.size > maxDog.size) {      maxDog=d;    }  }  return maxDog;}  }
class C{  @Override public T update(final T entity){  return persistenceService.update(entity);}  }
class C{  public ConcurrentSkipListMap(Comparator<? super K> comparator){  this.comparator=comparator;  initialize();}  }
class C{  public IndicesAliasesRequestBuilder addAlias(String indices[],String alias,String filter){  AliasActions action=new AliasActions(AliasAction.Type.ADD,indices,alias).filter(filter);  request.addAliasAction(action);  return this;}  }
class C{  private DateTimeZone loadZoneData(String id){  InputStream in=null;  try {    in=openResource(id);    DateTimeZone tz=DateTimeZoneBuilder.readFrom(in,id);    iZoneInfoMap.put(id,new SoftReference<DateTimeZone>(tz));    return tz;  } catch (  IOException ex) {    uncaughtException(ex);    iZoneInfoMap.remove(id);    return null;  } finally {    try {      if (in != null) {        in.close();      }    } catch (    IOException ex) {    }  }}  }
class C{  public static int compute2(int x){  int loops=(x >>> 4) & 7;  while (loops-- > 0) {    x=(x * 2147483647) % 16807;  }  return x;}  }
class C{  public static void UTF8toUTF16(byte[] utf8,int offset,int len,CharArr out){  out.reserve(len);  int n=UTF8toUTF16(utf8,offset,len,out.getArray(),out.getEnd());  out.setEnd(out.getEnd() + n);}  }
class C{  public LuaError(String message,int level){  super(message);  this.level=level;}  }
class C{  public boolean isMixedDestSupported(){  return mixedDestSupported;}  }
class C{  public EPStatementObjectModel orderByClause(OrderByClause orderByClause){  this.orderByClause=orderByClause;  return this;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:42.409 -0500",hash_original_method="C149400C0C5347CE34188C78467CE5CF",hash_generated_method="8409B099537599632B5684367D8F59C3") public boolean equals(Object otherObj){  if (otherObj == null) {    return false;  }  try {    return mTarget.asBinder().equals(((Messenger)otherObj).mTarget.asBinder());  } catch (  ClassCastException e) {  }  return false;}  }
class C{  public Byte(byte value){  this.value=value;}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute("deploystatus") @Valid DeployStatus deployStatus,BindingResult bindingResult,Principal principal){  LOGGER.debug("Entering into update for deploy_status table");  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    com.wipro.ats.bdre.md.dao.jpa.DeployStatus jpaDeployStatus=new com.wipro.ats.bdre.md.dao.jpa.DeployStatus();    jpaDeployStatus.setDeployStatusId(deployStatus.getDeployStatusId().shortValue());    jpaDeployStatus.setDescription(deployStatus.getDescription());    deployStatusDAO.update(jpaDeployStatus);    LOGGER.debug("Updating Deploy Status Id" + jpaDeployStatus.getDeployStatusId());    LOGGER.debug("Exiting from update for deploy_status table");    restWrapper=new RestWrapper(deployStatus,RestWrapper.OK);    LOGGER.info(RECORDWITHID + deployStatus.getDeployStatusId() + " updated in DeployStatus by User:"+ principal.getName()+ deployStatus);  } catch (  Exception e) {    LOGGER.error(e);    return new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){}  }
class C{  private BOSHClientConfig(final URI cURI,final String cDomain,final String cFrom,final String cLang,final String cRoute,final String cProxyHost,final int cProxyPort,final SSLContext cSSLContext,final boolean cCompression){  uri=cURI;  to=cDomain;  from=cFrom;  lang=cLang;  route=cRoute;  proxyHost=cProxyHost;  proxyPort=cProxyPort;  sslContext=cSSLContext;  compressionEnabled=cCompression;}  }
class C{  protected SourceFolderLibrary newSourceFolderLibrary(AbstractClassLibrary parentLibrary){  return new SourceFolderLibrary(parentLibrary);}  }
class C{  @Deprecated public static <N>ImmutableGraph<N> copyOf(ImmutableGraph<N> graph){  return checkNotNull(graph);}  }
class C{  public void init() throws ServletException {}  }
class C{  private void resizeImageBounds(int x,int y){  if (_ileft == -1)   _ileft=x; else   if (x < _ileft)   _ileft=x;  if (_iright == -1)   _iright=x; else   if (x > _iright)   _iright=x;  if (_itop == -1)   _itop=y; else   if (y < _itop)   _itop=y;  if (_ibottom == -1)   _ibottom=y; else   if (y > _ibottom)   _ibottom=y;}  }
class C{  public static String safeCookieName(String cookieName){  return cookieName.replaceAll("\"","");}  }
class C{  private int internalAwaitAdvance(int phase,QNode node){  releaseWaiters(phase - 1);  boolean queued=false;  int lastUnarrived=0;  int spins=SPINS_PER_ARRIVAL;  long s;  int p;  while ((p=(int)((s=state) >>> PHASE_SHIFT)) == phase) {    if (node == null) {      int unarrived=(int)s & UNARRIVED_MASK;      if (unarrived != lastUnarrived && (lastUnarrived=unarrived) < NCPU)       spins+=SPINS_PER_ARRIVAL;      boolean interrupted=Thread.interrupted();      if (interrupted || --spins < 0) {        node=new QNode(this,phase,false,false,0L);        node.wasInterrupted=interrupted;      }    } else     if (node.isReleasable())     break; else     if (!queued) {      AtomicReference<QNode> head=(phase & 1) == 0 ? evenQ : oddQ;      QNode q=node.next=head.get();      if ((q == null || q.phase == phase) && (int)(state >>> PHASE_SHIFT) == phase)       queued=head.compareAndSet(q,node);    } else {      try {        ForkJoinPool.managedBlock(node);      } catch (      InterruptedException ie) {        node.wasInterrupted=true;      }    }  }  if (node != null) {    if (node.thread != null)     node.thread=null;    if (node.wasInterrupted && !node.interruptible)     Thread.currentThread().interrupt();    if (p == phase && (p=(int)(state >>> PHASE_SHIFT)) == phase)     return abortWait(phase);  }  releaseWaiters(phase);  return p;}  }
class C{  public boolean isValid(INode n){  FreeCellNode state=(FreeCellNode)n;  Column col=state.cols[nth];  if (col.num == 0)   return false;  card=(short)col.cards[col.num - 1];  return state.availableFree();}  }
class C{  public synchronized void delete(){  if (buffers == null)   return;  for (int i=0; i < buffers.idx; i++)   dir.memory().release(buffers.arr[i],BUFFER_SIZE);  buffers=null;  filesCnt.decrementAndGet();}  }
class C{  public boolean mouseReleased(MouseEvent e){  grabbed_plot_graphics_=false;  return false;}  }
class C{  public VcpcAltRunner(GraphWrapper graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);}  }
class C{  private final void turbulenceFractalStitch(final int[] rgb,double pointX,double pointY,final double[] fSum,final double[] noise,StitchInfo stitchInfo){  double ratio=127.5;  int nOctave;  fSum[0]=fSum[1]=fSum[2]=fSum[3]=127.5;  pointX*=baseFrequencyX;  pointY*=baseFrequencyY;  for (nOctave=numOctaves; nOctave > 0; nOctave--) {    noise2Stitch(noise,pointX,pointY,stitchInfo);switch (channels.length) {case 4:      fSum[3]+=(noise[3] * ratio);case 3:    fSum[2]+=(noise[2] * ratio);case 2:  fSum[1]+=(noise[1] * ratio);case 1:fSum[0]+=(noise[0] * ratio);}ratio*=.5;pointX*=2;pointY*=2;stitchInfo.doubleFrequency();}switch (channels.length) {case 4:rgb[3]=(int)fSum[3];if ((rgb[3] & 0xFFFFFF00) != 0) rgb[3]=((rgb[3] & 0x80000000) != 0) ? 0 : 255;case 3:rgb[2]=(int)fSum[2];if ((rgb[2] & 0xFFFFFF00) != 0) rgb[2]=((rgb[2] & 0x80000000) != 0) ? 0 : 255;case 2:rgb[1]=(int)fSum[1];if ((rgb[1] & 0xFFFFFF00) != 0) rgb[1]=((rgb[1] & 0x80000000) != 0) ? 0 : 255;case 1:rgb[0]=(int)fSum[0];if ((rgb[0] & 0xFFFFFF00) != 0) rgb[0]=((rgb[0] & 0x80000000) != 0) ? 0 : 255;}}  }
class C{  public ClusterConfiguration(String clusterName,String configFileName) throws ConfigurationException {  this(clusterName);  load(configFileName);}  }
class C{  public MemberName(Class<?> defClass,String name,Class<?> type,byte refKind){  init(defClass,name,type,flagsMods(IS_FIELD,0,refKind));  initResolved(false);}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  return toJSONObject(new XMLTokener(string));}  }
class C{  public boolean isCallableConstructor(){  return false;}  }
class C{  public static void assumeTrue(BooleanSupplier assumptionSupplier,String message) throws TestAbortedException {  assumeTrue(assumptionSupplier,null);}  }
class C{  public T random(){  if (size == 0)   return null;  return items[MathUtils.random(0,size - 1)];}  }
class C{  public List<String> letterCombinationsBFS(String digits){  LinkedList<String> queue=new LinkedList<>();  if (digits == null || digits.length() == 0) {    return queue;  }  queue.add("");  for (int i=0; i < digits.length(); i++) {    char[] letters=LETTERS[digits.charAt(i) - '0'].toCharArray();    while (queue.peek().length() == i) {      String s=queue.poll();      for (      char l : letters) {        queue.offer(s + l);      }    }  }  return queue;}  }
class C{  @Override public void onSearchClick(SearchCustomActionBar searchview,CharSequence query){  if (query.toString().equalsIgnoreCase("")) {    Log.d("log","please enter your query for the search");  } else {    final CharSequence keywords=query;  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @FlashException("list") public static void createSimple(String name){  VirtualArrayForm virtualArray=new VirtualArrayForm();  virtualArray.name=name;  virtualArray.validate("virtualArray");  if (Validation.hasErrors()) {    flash.error(MessagesUtils.get(SAVED_ERROR,virtualArray.name));    list();  }  VirtualArrayRestRep varray=virtualArray.save();  flash.success(MessagesUtils.get(SAVED_SUCCESS,virtualArray.name));  virtualArray.load(varray);  edit(virtualArray.id);}  }
class C{  public boolean process(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String cname=method.getDeclaringClass().getName();  NativeMethodClass clsSim=cnameToSim.get(cname);  if (clsSim == null) {    return true;  } else {    try {      clsSim.simulateMethod(method,thisVar,returnVar,params);    } catch (    NativeMethodNotSupportedException e) {      if (DEBUG) {        G.v().out.println("WARNING: it is unsafe to simulate the method ");        G.v().out.println("         " + method.toString());      }    }    return true;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public BasicSegmentString(Coordinate[] pts,Object data){  this.pts=pts;  this.data=data;}  }
class C{  public boolean contains(byte[] data){  for (int i=0; i < hashFunctions; ++i) {    if (!testBit((int)((murmurhash3bit(i,data,tweak) & 0xFFFFFFFFL) % (filter.length * 8)))) {      return false;    }  }  return true;}  }
class C{  static String unicodeToASCII(String input){  try {    return toASCII(input);  } catch (  IllegalArgumentException e) {    return input;  }}  }
class C{  public GuessKills(){  for (  Creature creature : SingletonRepository.getEntityManager().getCreatures()) {    if (!creature.isRare()) {      POSSIBLE_CREATURES.add(creature);    }  }}  }
class C{  public void writeImage(String imagePath) throws IOException {  startTag(IMAGE);  writeAttr(SRC,imagePath);}  }
class C{  public long add(final AddOp add,final UUID uuid) throws Exception {  if (add == null)   throw new IllegalArgumentException();  final ConnectOptions opts=mgr.newUpdateConnectOptions(sparqlEndpointURL,uuid,tx);  add.prepareForWire();  if (add.format != null) {    final ByteArrayEntity entity=new ByteArrayEntity(add.data);    entity.setContentType(add.format.getDefaultMIMEType());    opts.entity=entity;  }  if (add.uris != null) {    opts.addRequestParam("uri",add.uris.toArray(new String[0]));  }  if (add.context != null && add.context.length > 0) {    opts.addRequestParam("context-uri",toStrings(add.context));  }  opts.setAcceptHeader(ConnectOptions.MIME_APPLICATION_XML);  JettyResponseListener response=null;  boolean ok=false;  try {    checkResponseCode(response=doConnect(opts));    final MutationResult result=mutationResults(response);    ok=true;    return result.mutationCount;  }  finally {    if (response != null) {      response.abort();      if (!ok) {        try {          cancel(uuid);        } catch (        Exception ex) {          log.warn(ex);        }      }    }  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (language_1: ");  result.append(language_1);  result.append(", output_1: ");  result.append(output_1);  result.append(", override_1: ");  result.append(override_1);  result.append(')');  return result.toString();}  }
class C{  private void handleDataChanged(DataMap data){  if (data.containsKey("cities")) {    processCityList(data);  } else   if (data.containsKey("tickets")) {    processTicketsList(data);  } else   if (data.containsKey("notification")) {    processNotification(data);  } else   if (data.containsKey("error_message")) {    BusProvider.getInstance().post(new ErrorEvent(data.getString("error_message")));  }}  }
class C{  @Override public boolean implies(Permission p){  if (!(p instanceof TVPermission)) {    return false;  }  Iterator<TVPermission> i=permissions.iterator();  while (i.hasNext()) {    if (((TVPermission)i.next()).implies(p)) {      return true;    }  }  return false;}  }
class C{  public String concat(List list){  StringBuffer sb=new StringBuffer();  int size=list.size();  for (int i=0; i < size; i++) {    sb.append(list.get(i).toString());  }  return sb.toString();}  }
class C{  @Override public int numberOfClusters() throws Exception {  return m_NumClusters;}  }
class C{  public final void connect() throws RcsPermissionDeniedException {  if (!sApiCompatible) {    try {      sApiCompatible=mRcsServiceControl.isCompatible(this);      if (!sApiCompatible) {        throw new RcsPermissionDeniedException("The TAPI client version of the history service is not compatible with the TAPI service implementation version on this device!");      }    } catch (    RcsServiceException e) {      throw new RcsPermissionDeniedException("The compatibility of TAPI client version with the TAPI service implementation version of this device cannot be checked for the history service!",e);    }  }  Intent serviceIntent=new Intent(IHistoryService.class.getName());  serviceIntent.setPackage(RcsServiceControl.RCS_STACK_PACKAGENAME);  mCtx.bindService(serviceIntent,apiConnection,0);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.SUPER_LITERAL___IS_SUPER_CONSTRUCTOR_ACCESS:    return isSuperConstructorAccess();case N4JSPackage.SUPER_LITERAL___IS_SUPER_MEMBER_ACCESS:  return isSuperMemberAccess();}return super.eInvoke(operationID,arguments);}  }
class C{  public double skewness(){  double mu=mean();  double devsum=0;  double wsum=0;  int size=values.size();  for (int i=0; i < size; i++) {    double dev=values.get(i) - mu;    devsum+=dev * dev * dev* weights.get(i);    wsum+=weights.get(i);  }  double mu3=devsum / wsum;  double s3=Math.pow(variance(),3.0 / 2.0);  return mu3 / s3;}  }
class C{  public static byte parseByte(java.lang.String s,int radix) throws java.lang.NumberFormatException {  int intValue=Integer.parseInt(s,radix);  byte result=(byte)intValue;  if (result == intValue) {    return result;  }  throw new NumberFormatException("Value out of range for byte: \"" + s + "\"");}  }
class C{  private Assignment recursiveBackTrackingSearch(CSP csp,Assignment assignment){  Assignment result=null;  if (assignment.isComplete(csp.getVariables())) {    result=assignment;  } else {    Variable var=selectUnassignedVariable(assignment,csp);    for (    Object value : orderDomainValues(var,assignment,csp)) {      assignment.setAssignment(var,value);      fireStateChanged(assignment,csp);      if (assignment.isConsistent(csp.getConstraints(var))) {        DomainRestoreInfo info=inference(var,assignment,csp);        if (!info.isEmpty())         fireStateChanged(csp);        if (!info.isEmptyDomainFound()) {          result=recursiveBackTrackingSearch(csp,assignment);          if (result != null)           break;        }        info.restoreDomains(csp);      }      assignment.removeAssignment(var);    }  }  return result;}  }
class C{  private static int CallObjectMethodV(JNIEnvironment env,int objJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallObjectMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithVarArg(obj,methodID,argAddress,null,false);    return env.pushJNIRef(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public PutRepositoryRequest(String name){  this.name=name;}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer("{");  if (values != null) {    for (int i=0; i < values.length; i++) {      buf.append(values[i].toString());      if (i + 1 < values.length)       buf.append(", ");    }  }  buf.append("}");  return buf.toString();}  }
class C{  @DSSource({DSSourceKind.LOCATION}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.169 -0500",hash_original_method="BD08BF24DECE867FBC9BAD4B74A67538",hash_generated_method="2D32BC9CC9400302C75C909342F79A39") static public Allocation createSized(RenderScript rs,Element e,int count){  return createSized(rs,e,count,USAGE_SCRIPT);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.CorePluginManager.getInstance().refreshAvailablePlugins();  return null;}  }
class C{  private boolean isWrappingBreakCharacter(final char c){  for (int i=0; i < CHARACTERS_FOR_WRAPPING.length; i++) {    if (c == CHARACTERS_FOR_WRAPPING[i]) {      return true;    }  }  return false;}  }
class C{  public DateHistogramBuilder timeZone(String timeZone){  this.timeZone=timeZone;  return this;}  }
class C{  private List<Equation> parseEquations(){  List<Equation> equations=new ArrayList<>();  for (  ExpressionEditor editor : editors) {    try {      System.out.println(editor.getEquation());    } catch (    ParseException e) {      e.printStackTrace();    }    try {      equations.add(editor.getEquation());    } catch (    ParseException e) {      String s=e.getMessage();      if (!"".equals(s)) {        JOptionPane.showMessageDialog(this,s);      } else {        JOptionPane.showMessageDialog(this,"Could not parse " + "equations.");      }      e.printStackTrace();      return null;    }  }  return equations;}  }
class C{  public void incrementAccessCount(){  if ((this.accessDate != null) && ((System.currentTimeMillis() - this.accessDate.getTime()) < (24 * Utils.HOUR))) {    return;  }  setAccessDate(new Date());  setAccessCount(this.accessCount + 1);}  }
class C{  private String insertFormats(final String pattern,final ArrayList<String> customPatterns){  if (!containsElements(customPatterns)) {    return pattern;  }  final StringBuilder sb=new StringBuilder(pattern.length() * 2);  final ParsePosition pos=new ParsePosition(0);  int fe=-1;  int depth=0;  while (pos.getIndex() < pattern.length()) {    final char c=pattern.charAt(pos.getIndex());switch (c) {case QUOTE:      appendQuotedString(pattern,pos,sb);    break;case START_FE:  depth++;sb.append(START_FE).append(readArgumentIndex(pattern,next(pos)));if (depth == 1) {fe++;final String customPattern=customPatterns.get(fe);if (customPattern != null) {  sb.append(START_FMT).append(customPattern);}}break;case END_FE:depth--;default :sb.append(c);next(pos);}}return sb.toString();}  }
class C{  private void checkReqMinLauncherVer(){  if (LConsts.LAUNCHER_VERSION.compareTo(modules.getReqMinLauncherVer()) >= 0)   return;  LEnv.LOGGER.error("Cannot proceed with update because it requires a newer version of " + LConsts.LAUNCHER_NAME + " (our version: "+ LConsts.LAUNCHER_VERSION+ ", required min version: "+ modules.getReqMinLauncherVer()+ ")! You must download it manually!");  launcherFrame.setStatus(StatusType.ERROR,"Cannot proceed with update because it requires a newer version of " + LConsts.LAUNCHER_NAME + "! You must download it manually!");  throw new FinishException();}  }
class C{  protected void sequence_FunctionTypeExpressionOLD_TAnonymousFormalParameterList(ISerializationContext context,FunctionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static String toBinaryString(byte[] value){  BigInteger helpBigInteger=new BigInteger(1,value);  return helpBigInteger.toString(2);}  }
class C{  public static double convertMinutesToMillis(double minutes){  return (minutes * MINUTE_TO_MILLIS);}  }
class C{  public With(){}  }
class C{  public int double_set_new(){  String s=soot.PhaseOptions.getString(options,"double-set-new");  if (s.equalsIgnoreCase("hash"))   return double_set_new_hash;  if (s.equalsIgnoreCase("bit"))   return double_set_new_bit;  if (s.equalsIgnoreCase("hybrid"))   return double_set_new_hybrid;  if (s.equalsIgnoreCase("array"))   return double_set_new_array;  if (s.equalsIgnoreCase("heintze"))   return double_set_new_heintze;  if (s.equalsIgnoreCase("sharedlist"))   return double_set_new_sharedlist;  throw new RuntimeException("Invalid value " + s + " of phase option double-set-new");}  }
class C{  protected void delFromCollection(Collection collection,String collectionName,PersistentResource toDelete,boolean isInverseCheck){  final Collection original=copyCollection(collection);  checkFieldAwareDeferPermissions(UpdatePermission.class,collectionName,CollectionUtils.disjunction(collection,Collections.singleton(toDelete.getObject())),original);  String inverseField=getInverseRelationField(collectionName);  if (!isInverseCheck && !inverseField.isEmpty()) {    final Object originalValue=toDelete.getValueUnchecked(inverseField);    final Collection originalBidirectional;    if (originalValue instanceof Collection) {      originalBidirectional=copyCollection((Collection)originalValue);    } else {      originalBidirectional=Collections.singleton(originalValue);    }    final Collection removedBidrectional=CollectionUtils.disjunction(Collections.singleton(this.getObject()),originalBidirectional);    toDelete.checkFieldAwareDeferPermissions(UpdatePermission.class,inverseField,removedBidrectional,originalBidirectional);  }  if (collection == null) {    return;  }  collection.remove(toDelete.getObject());  auditField(new ChangeSpec(this,collectionName,original,collection));}  }
class C{  public void testConstructorBytesNegative3(){  byte aBytes[]={-128,-12,56,100};  byte rBytes[]={-128,-12,56,100};  BigInteger aNumber=new BigInteger(aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  public void paintMenuBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static Path2D generateBorderShape(Rectangle bounds,int side,BorderPropertySet border,boolean drawInterior,float scaledOffset,float widthScale){  border=border.normalizedInstance(new Rectangle((int)(bounds.width),(int)(bounds.height)));  RelativeBorderProperties props=new RelativeBorderProperties(bounds,border,0f,side,1 + scaledOffset,widthScale);  float sideWidth;  if (props.isDimmensionsSwapped()) {    sideWidth=bounds.height - (1 + scaledOffset) * (widthScale) * (border.top() + border.bottom());  } else {    sideWidth=bounds.width - (1 + scaledOffset) * (widthScale) * (border.left() + border.right());  }  Path2D path=new Path2D.Float();  float angle=90;  float widthSum=props.getTop() + props.getLeft();  if (widthSum != 0f) {    angle=angle * props.getTop() / widthSum;  }  appendPath(path,0 - props.getLeft(),0 - props.getTop(),props.getLeftCorner().left(),props.getLeftCorner().right(),90 + angle,-angle - 1,props.getTop(),props.getLeft(),scaledOffset,true,widthScale);  angle=90;  widthSum=props.getTop() + props.getRight();  if (widthSum != 0f) {    angle=angle * props.getTop() / widthSum;  }  appendPath(path,sideWidth + props.getRight(),0 - props.getTop(),props.getRightCorner().right(),props.getRightCorner().left(),90,-angle - 1,props.getTop(),props.getRight(),scaledOffset,false,widthScale);  if (drawInterior) {    appendPath(path,sideWidth,0,props.getRightCorner().right(),props.getRightCorner().left(),90 - angle,angle + 1,props.getTop(),props.getRight(),scaledOffset + 1,false,widthScale);    angle=90;    widthSum=props.getTop() + props.getLeft();    if (widthSum != 0f) {      angle=angle * props.getTop() / widthSum;    }    appendPath(path,0,0,props.getLeftCorner().left(),props.getLeftCorner().right(),90,angle + 1,props.getTop(),props.getLeft(),scaledOffset + 1,true,widthScale);    path.closePath();  }  path.transform(AffineTransform.getTranslateInstance((!props.isDimmensionsSwapped() ? -bounds.width / 2f : -bounds.height / 2f) + (scaledOffset + 1) * props.getLeft(),(props.isDimmensionsSwapped() ? -bounds.width / 2f : -bounds.height / 2f) + (scaledOffset + 1) * props.getTop()));  path.transform(AffineTransform.getRotateInstance(props.getRotation()));  path.transform(AffineTransform.getTranslateInstance(bounds.width / 2f + bounds.x,bounds.height / 2f + bounds.y));  return path;}  }
class C{  public static void gracefullyDisposeOf(final ObjectMap<?,? extends Disposable> disposables){  if (disposables != null) {    for (    final Disposable disposable : disposables.values()) {      gracefullyDisposeOf(disposable);    }  }}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar){  this(reader,separator,quotechar,CSVParser.DEFAULT_ESCAPE_CHARACTER,DEFAULT_SKIP_LINES,CSVParser.DEFAULT_STRICT_QUOTES);}  }
class C{  public Second(int second,int minute,int hour,int day,int month,int year){  this(second,new Minute(minute,hour,day,month,year));}  }
class C{  public CompactStringBuilder(int capacity){  value=new byte[capacity];}  }
class C{  public boolean isQuoteAllLines(){  return QUOTETYPE_QuoteAllLines.equals(getQuoteType());}  }
class C{  public void normal(){  if (headerArrowEnabled) {    if (mState == STATE_READY) {      mArrowImageView.startAnimation(mRotateDownAnim);    }    if (mState == STATE_REFRESHING) {      mArrowImageView.clearAnimation();    }  }  mHintTextView.setText(R.string.pulltorefresh_listview_header_hint_normal);}  }
class C{  private int handleScopeIntroduction(int bound){switch (fToken) {case Symbols.TokenLPAREN:    int pos=fPosition;  if (looksLikeMethodDecl()) {    if (fPrefs.prefMethodDeclDeepIndent)     return setFirstElementAlignment(pos,bound); else {      fIndent=fPrefs.prefMethodDeclIndent;      return pos;    }  } else {    fPosition=pos;    if (looksLikeMethodCall()) {      if (fPrefs.prefMethodCallDeepIndent)       return setFirstElementAlignment(pos,bound); else {        fIndent=fPrefs.prefMethodCallIndent;        return pos;      }    } else     if (fPrefs.prefParenthesisDeepIndent)     return setFirstElementAlignment(pos,bound);  }fIndent=fPrefs.prefParenthesisIndent;return pos;case Symbols.TokenLBRACE:pos=fPosition;if (looksLikeArrayInitializerIntro()) if (fPrefs.prefArrayDeepIndent) return setFirstElementAlignment(pos,bound); else fIndent=fPrefs.prefArrayIndent; else fIndent=fPrefs.prefBlockIndent;if (looksLikeArrayInitializerIntro() && !fPrefs.prefIndentBracesForArrays || !fPrefs.prefIndentBracesForBlocks) {fPosition=pos;return skipToStatementStart(true,true);} else {return pos;}case Symbols.TokenLBRACKET:pos=fPosition;if (fPrefs.prefArrayDimensionsDeepIndent) {return setFirstElementAlignment(pos,bound);}fIndent=fPrefs.prefBracketIndent;return pos;default :Assert.isTrue(false);return -1;}}  }
class C{  public void removeRow(int r){  int size=(rows - 1) * cols;  float[] x=new float[size];  float[] y=new float[size];  rows--;  int i=0;  int j=0;  for (int row=0; row < rows; row++) {    for (int col=0; col < cols; col++) {      int k=j + col;      int l=i + col;      x[k]=xGrid[l];      y[k]=yGrid[l];    }    if (row == r - 1)     i+=cols;    i+=cols;    j+=cols;  }  xGrid=x;  yGrid=y;}  }
class C{  public Object visit(ASTNENode node,Object data){  return showNode(node,data);}  }
class C{  protected void addWholeMatch(StringBuilder sb,String surface,String analyzed){  sb.append("<b>");  sb.append(surface);  sb.append("</b>");}  }
class C{  private void reportError(Environment env,String errorString,ClassDeclaration clazz,MemberDefinition method){  if (clazz == null) {    env.error(getWhere(),errorString,this,getClassDeclaration(),method.getClassDeclaration());  } else {    env.error(clazz.getClassDefinition().getWhere(),errorString,this,getClassDeclaration(),method.getClassDeclaration());  }}  }
class C{  public boolean collides(final double x,final double y,final double w,final double h){  if ((x < 0) || (x + w > width)) {    return true;  }  if ((y < 0) || (y + h > height)) {    return true;  }  int iHeight=(int)Math.ceil(Math.ceil(y + h) - y);  int iWidth=(int)Math.ceil(Math.ceil(x + w) - x);  return map.collides((int)x,(int)y,iWidth,iHeight);}  }
class C{  private void insertLookAheadChoices(int baseEnd,Action a,RegExp lookAhead){  if (lookAhead.type == sym.BAR) {    RegExp2 r=(RegExp2)lookAhead;    insertLookAheadChoices(baseEnd,a,r.r1);    insertLookAheadChoices(baseEnd,a,r.r2);  } else   if (lookAhead.type == sym.MACROUSE) {    RegExp1 r=(RegExp1)lookAhead;    insertLookAheadChoices(baseEnd,a,macros.getDefinition((String)r.content));  } else {    int len=SemCheck.length(lookAhead);    if (len >= 0) {      IntPair look=insertNFA(lookAhead);      addEpsilonTransition(baseEnd,look.start);      Action x=a.copyChoice(len);      action[look.end]=x;      isFinal[look.end]=true;      scanner.actions.add(x);    } else {      throw new Error("When inserting lookahead expression: unkown expression type " + lookAhead.type + " in "+ lookAhead);    }  }}  }
class C{  public Key(String url,KeyType type){  super(url,type);}  }
class C{  public T caseConcreteMethodDeclaration_(ConcreteMethodDeclaration_ object){  return null;}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(MetaDataRegressionTest.class);}  }
class C{  protected boolean add(Set<Value> reportedValues2,Value v) throws QueryEvaluationException {  return reportedValues2.add(v);}  }
class C{  public Complex times(Complex c){  return multiply(this,c);}  }
class C{  public ArrayListMap(Map<K,V> map){  super();  list=new ArrayList<Entry<K,V>>(map.size());  putAll(map);}  }
class C{  public double compute(double... dataset){  return computeInPlace(dataset.clone());}  }
class C{  @Override protected boolean useScroll(final Player player){  final StendhalRPZone zone=player.getZone();  if (zone.isTeleportInAllowed(player.getX(),player.getY())) {    final Item markedScroll=SingletonRepository.getEntityManager().getItem("marked scroll");    markedScroll.setInfoString(player.getID().getZoneID() + " " + player.getX()+ " "+ player.getY());    player.equipOrPutOnGround(markedScroll);    return true;  } else {    player.sendPrivateText("The strong anti magic aura in this area prevents the scroll from working!");    return false;  }}  }
class C{  public Neuron deepCopy(){  return new Neuron(parent,this);}  }
class C{  public FileBuffersPlugin(){  Assert.isTrue(fgPlugin == null);  fgPlugin=this;}  }
class C{  public List<Node> findMb(String targetName){  Node target=getVariableForName(targetName);  List<Node> blanket=new LinkedList<>();  boolean changed=true;  while (changed) {    changed=false;    List<Node> remaining=new LinkedList<>(variables);    remaining.removeAll(blanket);    remaining.remove(target);    for (    Node node : remaining) {      if (!independenceTest.isIndependent(node,target,blanket)) {        blanket.add(node);        changed=true;      }    }  }  changed=true;  while (changed) {    changed=false;    for (    Node node : new LinkedList<>(blanket)) {      blanket.remove(node);      if (independenceTest.isIndependent(node,target,blanket)) {        changed=true;        continue;      }      blanket.add(node);    }  }  return blanket;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("M_PriceList_Version_ID"))     p_M_PriceList_Version_ID=para[i].getParameterAsInt(); else     if (name.equals("DateValue"))     p_DateValue=(Timestamp)para[i].getParameter(); else     if (name.equals("M_Warehouse_ID"))     p_M_Warehouse_ID=para[i].getParameterAsInt(); else     if (name.equals("C_Currency_ID"))     p_C_Currency_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_Record_ID=getRecord_ID();  p_PInstance_ID=getAD_PInstance_ID();}  }
class C{  public static String normalizeMimeType(String type){  if (type == null) {    return null;  }  type=type.trim().toLowerCase(Locale.ROOT);  final int semicolonIndex=type.indexOf(';');  if (semicolonIndex != -1) {    type=type.substring(0,semicolonIndex);  }  return type;}  }
class C{  private ComponentAnimation animateHierarchy(final int duration,boolean wait,int opacity,boolean add){  setShouldCalcPreferredSize(true);  enableLayoutOnPaint=false;  dontRecurseContainer=true;  Vector comps=new Vector();  findComponentsInHierachy(comps);  final int componentCount=comps.size();  int[] beforeX=new int[componentCount];  int[] beforeY=new int[componentCount];  int[] beforeW=new int[componentCount];  int[] beforeH=new int[componentCount];  final Motion[] xMotions=new Motion[componentCount];  final Motion[] yMotions=new Motion[componentCount];  final Motion[] wMotions=new Motion[componentCount];  final Motion[] hMotions=new Motion[componentCount];  for (int iter=0; iter < componentCount; iter++) {    Component current=(Component)comps.elementAt(iter);    beforeX[iter]=current.getX();    beforeY[iter]=current.getY();    beforeW[iter]=current.getWidth();    beforeH[iter]=current.getHeight();  }  layoutContainer();  for (int iter=0; iter < componentCount; iter++) {    Component current=(Component)comps.elementAt(iter);    xMotions[iter]=createAnimateMotion(beforeX[iter],current.getX(),duration);    yMotions[iter]=createAnimateMotion(beforeY[iter],current.getY(),duration);    wMotions[iter]=createAnimateMotion(beforeW[iter],current.getWidth(),duration);    hMotions[iter]=createAnimateMotion(beforeH[iter],current.getHeight(),duration);    xMotions[iter].start();    yMotions[iter].start();    wMotions[iter].start();    hMotions[iter].start();    current.setX(beforeX[iter]);    current.setY(beforeY[iter]);    current.setWidth(beforeW[iter]);    current.setHeight(beforeH[iter]);  }  MorphAnimation a=new MorphAnimation(this,duration,new Motion[][]{xMotions,yMotions,wMotions,hMotions});  setAnimOpacity(opacity,255,a,componentCount,duration);  a.animatedComponents=comps;  if (add) {    if (wait) {      getAnimationManager().addAnimationAndBlock(a);    } else {      getAnimationManager().addAnimation(a);    }  }  return a;}  }
class C{  @SuppressWarnings("deprecation") public static byte[] stringToBytes(String fileName){  byte[] asciiName=new byte[fileName.length()];  fileName.getBytes(0,fileName.length(),asciiName,0);  return asciiName;}  }
class C{  public static DeleteServiceSessionsForSubscriptionE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeleteServiceSessionsForSubscriptionE object=new DeleteServiceSessionsForSubscriptionE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","deleteServiceSessionsForSubscription").equals(reader.getName())) {          object.setDeleteServiceSessionsForSubscription(DeleteServiceSessionsForSubscription.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE:  return isSetStore();case KEYS:return isSetKeys();}throw new IllegalStateException();}  }
class C{  @Override public boolean isEmpty(){  return size == 0;}  }
class C{  public int optInt(String key,int defaultValue){  try {    return this.getInt(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  private static String markLTR(String string,String delimiters){  return TextProcessor.process(string,delimiters);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_BEFORE_CODE_1__CODE_LANG_1:    getCodeLang_1().clear();  getCodeLang_1().addAll((Collection<? extends CodeLang_>)newValue);return;case UmplePackage.ANONYMOUS_BEFORE_CODE_1__CODE_LANGS_1:getCodeLangs_1().clear();getCodeLangs_1().addAll((Collection<? extends CodeLangs_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public PasswordEnterDialog(String message,boolean showIdentityMessage){  super((JFrame)null,true);  initComponents();  messageLabel.setText(message);  if (!showIdentityMessage) {    passwordLabel.setVisible(false);  }}  }
class C{  public String maxIterationsTipText(){  return "maximum number of iterations";}  }
class C{  public boolean equals(Matrix4f m1){  try {    return (this.m00 == m1.m00 && this.m01 == m1.m01 && this.m02 == m1.m02 && this.m03 == m1.m03 && this.m10 == m1.m10 && this.m11 == m1.m11 && this.m12 == m1.m12 && this.m13 == m1.m13 && this.m20 == m1.m20 && this.m21 == m1.m21 && this.m22 == m1.m22 && this.m23 == m1.m23 && this.m30 == m1.m30 && this.m31 == m1.m31 && this.m32 == m1.m32 && this.m33 == m1.m33);  } catch (  NullPointerException e2) {    return false;  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("GL_JournalBatch_ID"))     m_GL_JournalBatch_ID=((BigDecimal)para[i].getParameter()).intValue(); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  public void paint(Graphics g){  g.setColor(Color.white);  g.fillRect(0,0,getWidth(),getHeight());  g.setColor(Color.BLACK);  for (int stripeX=0; stripeX < getWidth(); stripeX+=CHECKER_SIZE) {    for (int y=0, row=0; y < getHeight(); y+=CHECKER_SIZE / 2, ++row) {      int x=(row % 2 == 0) ? stripeX : (stripeX + CHECKER_SIZE / 2);      g.fillRect(x,y,CHECKER_SIZE / 2,CHECKER_SIZE / 2);    }  }  g.translate(0,translateY);  super.paint(g);}  }
class C{  @SuppressWarnings("UnusedReturnValue") public int readOutlineFileMetadata(final PdfObject OutlinesObj,final PdfObjectReader currentPdfFile){  final int count=OutlinesObj.getInt(PdfDictionary.Count);  final PdfObject FirstObj=OutlinesObj.getDictionary(PdfDictionary.First);  currentPdfFile.checkResolved(FirstObj);  if (FirstObj != null) {    final Element root=OutlineDataXML.createElement("root");    OutlineDataXML.appendChild(root);    final int level=0;    readOutlineLevel(root,currentPdfFile,FirstObj,level,false);  }  return count;}  }
class C{  @Override protected void autoAdjustRange(){  Plot plot=getPlot();  if (plot == null) {    return;  }  if (plot instanceof ValueAxisPlot) {    ValueAxisPlot vap=(ValueAxisPlot)plot;    Range r=vap.getDataRange(this);    if (r == null) {      r=getDefaultAutoRange();    }    long upper=Math.round(r.getUpperBound());    long lower=Math.round(r.getLowerBound());    this.first=createInstance(this.autoRangeTimePeriodClass,new Date(lower),this.timeZone,this.locale);    this.last=createInstance(this.autoRangeTimePeriodClass,new Date(upper),this.timeZone,this.locale);    setRange(r,false,false);  }}  }
class C{  public boolean hasContents(){  TransferData[] available=clipboard.getAvailableTypes();  for (int i=0; i < available.length; ++i) {    if (MemoryByteArrayTransfer.getInstance().isSupportedType(available[i]) || TextTransfer.getInstance().isSupportedType(available[i]) || FileByteArrayTransfer.getInstance().isSupportedType(available[i])|| FileTransfer.getInstance().isSupportedType(available[i]))     return true;  }  return false;}  }
class C{  protected StreamPropertiesBuilder(){  queryMap=Maps.newHashMap();}  }
class C{  @SuppressWarnings("unchecked") public void buildRequest(String sql,QueryBody query,String... indices) throws SQLException {  if (this.esResponse != null && this.esResponse.getScrollId() != null) {    client.prepareClearScroll().addScrollId(this.esResponse.getScrollId()).execute();  }  this.request=client.prepareSearch(indices);  Map<String,Map<String,Integer>> esInfo=(Map<String,Map<String,Integer>>)Utils.getObjectProperty(props,Utils.PROP_TABLE_COLUMN_MAP);  ParseResult parseResult=parser.parse(sql,query,maxRowsRS,this.statement.getConnection().getClientInfo(),esInfo);  buildQuery(request,parseResult);  this.heading=parseResult.getHeading();  having=parseResult.getHaving();  orderings=parseResult.getSorts();  this.limit=parseResult.getLimit();  for (  Column column : heading.columns()) {    if (column.getOp() == Operation.HIGHLIGHT) {      request.addHighlightedField(column.getColumn(),Utils.getIntProp(props,Utils.PROP_FRAGMENT_SIZE,100),Utils.getIntProp(props,Utils.PROP_FRAGMENT_NUMBER,1));    }  }}  }
class C{  public static Remote lookup(String name) throws NotBoundException, java.net.MalformedURLException, RemoteException {  ParsedNamingURL parsed=parseURL(name);  Registry registry=getRegistry(parsed);  if (parsed.name == null)   return registry;  return registry.lookup(parsed.name);}  }
class C{  @Override public boolean addVertex(V vertex){  if (root == null) {    this.root=vertex;    vertex_depths.put(vertex,0);    return delegate.addVertex(vertex);  } else {    throw new UnsupportedOperationException("Unless you are setting the root, use addChild()");  }}  }
class C{  protected void log(String s){  if (mLog) {    Log.d(LOGTAG,s);  }}  }
class C{  public VariableTree buildVariableDecl(Tree type,String name,Element owner,ExpressionTree initializer){  Type typeMirror=(Type)InternalUtils.typeOf(type);  DetachedVarSymbol sym=new DetachedVarSymbol(0,names.fromString(name),typeMirror,(Symbol)owner);  JCTree.JCModifiers mods=maker.Modifiers(0);  JCTree.JCVariableDecl decl=maker.VarDef(mods,sym.name,(JCTree.JCExpression)type,(JCTree.JCExpression)initializer);  decl.setType(typeMirror);  decl.sym=sym;  sym.setDeclaration(decl);  return decl;}  }
class C{  public void streamReady(InputStream is,DocumentInfo docInfo){  InputStreamReader isr=null;  try {    if (is != null) {      isr=new InputStreamReader(is,docInfo.getEncoding());    }  } catch (  Exception uee) {    boolean cont=true;    if (htmlCallback != null) {      cont=htmlCallback.parsingError(HTMLCallback.ERROR_ENCODING,null,null,null,"Page encoding " + docInfo.getEncoding() + " failed: "+ uee.getMessage());    }    if (cont) {      try {        isr=new InputStreamReader(is);      } catch (      Exception e) {        htmlCallback.parsingError(HTMLCallback.ERROR_ENCODING,null,null,null,"Page loading failed, probably due to wrong encoding. " + e.getMessage());        isr=getStream("Page loading failed, probably due to encoding mismatch.",null);        setPageStatus(HTMLCallback.STATUS_ERROR);      }    } else {      isr=getStream("Page encoding not supported",null);      setPageStatus(HTMLCallback.STATUS_ERROR);    }  }  if (cancelled) {    isr=getStream("Page loading cancelled by user",null);  }  if (isr == null) {    if (htmlCallback != null) {      htmlCallback.parsingError(HTMLCallback.ERROR_CONNECTING,null,null,null,"Error connecting to stream");    }    setPageStatus(HTMLCallback.STATUS_ERROR);    isr=getStream("Error connecting to stream",null);  } else {    setPageStatus(HTMLCallback.STATUS_CONNECTED);  }  HTMLElement newDoc=null;  try {    newDoc=parser.parseHTML(isr);  } catch (  IllegalArgumentException iae) {    iae.printStackTrace();    setPageStatus(HTMLCallback.STATUS_ERROR);    isr=getStream("Parsing error " + iae.getMessage(),null);    newDoc=parser.parseHTML(isr);  }  if (cancelled) {    isr=getStream("Page loading cancelled by user",null);    newDoc=parser.parseHTML(isr);  }  setPageStatus(HTMLCallback.STATUS_PARSED);  documentReady(docInfo,newDoc);}  }
class C{  protected void addShortLegPolyForIntersection(Geo g1,Geo g2,Geo g3,int ribbonSide,double dist,OMAreaList ret){  List<Geo> results=new LinkedList<Geo>();  RibbonIterator leg1=new RibbonIterator(g1,g2,dist);  OMPoly fullPoly1=getPoly(leg1,ribbonSide);  RibbonIterator leg2=new RibbonIterator(g2,g3,dist);  OMPoly fullPoly2=getPoly(leg2,ribbonSide);  if (fullPoly1 == null || fullPoly2 == null) {    return;  }  Geo intersection=getPolyIntersection(fullPoly1,fullPoly2);  if (intersection == null) {    return;  }  leg1=new RibbonIterator(g1,g2,dist);  OMPoly halfPoly1=getHalfPoly(leg1,ribbonSide,false);  if (halfPoly1 != null) {    GeoArray geoPoly2=GeoArray.Double.createFromLatLonRadians(fullPoly2.getLatLonArray());    double[] leg1Coords=halfPoly1.getLatLonArray();    for (int i=0; i < leg1Coords.length - 1; i+=2) {      Geo pnt=new Geo(leg1Coords[i],leg1Coords[i + 1],false);      if (!tooClose(pnt,dist)) {        results.add(pnt);      }    }    if (!tooClose(intersection,dist)) {      results.add(intersection);    }  }  leg2=new RibbonIterator(g2,g3,dist);  OMPoly halfPoly2=getHalfPoly(leg2,ribbonSide,true);  if (halfPoly2 != null) {    GeoArray geoPoly1=GeoArray.Double.createFromLatLonRadians(fullPoly1.getLatLonArray());    double[] leg2Coords=halfPoly2.getLatLonArray();    for (int i=0; i < leg2Coords.length - 1; i+=2) {      Geo pnt=new Geo(leg2Coords[i],leg2Coords[i + 1],false);      if (!tooClose(pnt,dist)) {        results.add(pnt);      }    }  }  if (results.size() == 1 && !tooClose(intersection,dist)) {    results.add(intersection);  }  if (results.size() > 1) {    ret.add(getOMPolyFromGeos(results));  }}  }
class C{  public static void onErrorDropped(Throwable e){  ExceptionHelper.throwIfFatal(e);  if (e == null) {    e=new NullPointerException();  }  Consumer<Throwable> h=errorConsumer;  if (h == null) {    e.printStackTrace();  } else {    try {      h.accept(e);    } catch (    Throwable ex) {      ex.printStackTrace();      e.printStackTrace();    }  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof HistogramDataset)) {    return false;  }  HistogramDataset that=(HistogramDataset)obj;  if (!ObjectUtilities.equal(this.type,that.type)) {    return false;  }  if (!ObjectUtilities.equal(this.list,that.list)) {    return false;  }  return true;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static BufferedImage decode(final PdfObject formObj,final PdfObjectReader currentPdfFile,final PdfObject XObject,final int subtype,int width,int height,final int offsetImage,final float pageScaling){  if (XObject.getObjectType() == PdfDictionary.XFA_APPEARANCE) {    return ExternalHandlers.decode(formObj,currentPdfFile,XObject,subtype,width,height,offsetImage,pageScaling);  }  currentPdfFile.checkResolved(XObject);  try {    final ObjectStore localStore=new ObjectStore();    final T3Renderer glyphDisplay=new T3Display(0,false,20,localStore);    final PdfStreamDecoder glyphDecoder=new PdfStreamDecoder(currentPdfFile);    glyphDecoder.setParameters(false,true,15,0,false,false);    glyphDecoder.setStreamType(ValueTypes.FORM);    glyphDecoder.setObjectValue(ValueTypes.ObjectStore,localStore);    glyphDecoder.setRenderer(glyphDisplay);    try {      PdfObject Resources=XObject.getDictionary(PdfDictionary.Resources);      if (Resources == null) {        Resources=(PdfObject)XObject.getOtherDictionaries().get("Resources");      }      if (Resources != null) {        glyphDecoder.readResources(Resources,false);      }    } catch (    final Exception e) {      LogWriter.writeLog("Exception: " + e.getMessage());    }    final byte[] commands=XObject.getDecodedStream();    final float[] matrix=XObject.getFloatArray(PdfDictionary.Matrix);    final float[] BBox=XObject.getFloatArray(PdfDictionary.BBox);    glyphDecoder.setBBox(BBox);    if (commands != null) {      glyphDecoder.decodeStreamIntoObjects(commands,false);    }    final boolean ignoreColors=glyphDecoder.ignoreColors;    localStore.flush();    final org.jpedal.fonts.glyph.T3Glyph form=new org.jpedal.fonts.glyph.T3Glyph(glyphDisplay,0,0,ignoreColors);    final float scaling;    float rectX1=0, rectY1=0;    if (BBox != null) {      for (int ii=0; ii < 4; ii++) {        BBox[ii]*=pageScaling;      }      rectX1=(BBox[0]);      rectY1=(BBox[1]);      int boxWidth=(int)(((BBox[2] + 0.5f) - BBox[0]));      if (boxWidth < 0) {        boxWidth=-boxWidth;      }      int boxHeight=(int)(((BBox[3] + 0.5f) - BBox[1]));      if (boxHeight < 0) {        boxHeight=-boxHeight;      }      if (boxWidth == 0 && boxHeight > 0) {        boxWidth=1;      }      if (boxWidth > 0 && boxHeight == 0) {        boxHeight=1;      }      float ws=width / ((float)boxWidth);      float hs=height / ((float)boxHeight);      final float diff=ws - hs;      final int diffInt=(int)diff;      if (diffInt != 0) {        final int tmpI=width;        width=height;        height=tmpI;        ws=width / ((float)boxWidth);        hs=height / ((float)boxHeight);      }      if (ws < 1 || hs < 1) {        scaling=1;        width=boxWidth;        height=boxHeight;      } else {        if (ws > hs) {          scaling=ws;          height=(int)(boxHeight * scaling);        } else {          scaling=hs;          width=(int)(boxWidth * scaling);        }        rectX1*=scaling;        rectY1*=scaling;      }    } else {      final float defaultSize=20;      if (height < defaultSize) {        height=(int)defaultSize;      }      if (width < defaultSize) {        width=(int)defaultSize;      }      final float ws=width / defaultSize;      final float hs=height / defaultSize;      if (ws > hs) {        scaling=ws;        height=(int)(defaultSize * scaling);      } else {        scaling=hs;        width=(int)(defaultSize * scaling);      }      rectX1*=scaling;      rectY1*=scaling;    }    if (width == 0 || height == 0) {      return null;    }    if (offsetImage == 1) {      width+=2;      height+=2;    }    final BufferedImage aa;    final Graphics2D g2;    final float a;    final float b;    final float c;    final float d;    float e;    float f;    int offset=height;    if (matrix != null) {      if (pageScaling == 1 && matrix[4] > 0 && matrix[5] > 0) {        final float[] BBox2=formObj.getFloatArray(PdfDictionary.Rect);        if (BBox2[1] > BBox2[3]) {          float t=BBox2[1];          BBox2[1]=BBox2[3];          BBox2[3]=t;        }        if (BBox2[0] > BBox2[2]) {          float t=BBox2[0];          BBox2[0]=BBox2[2];          BBox2[2]=t;        }        matrix[0]=(BBox2[2] - BBox2[0]) / (BBox[2] - BBox[0]);        matrix[1]=0;        matrix[2]=0;        matrix[3]=(BBox2[3] - BBox2[1]) / (BBox[3] - BBox[1]);        matrix[4]=(BBox2[0] - BBox[0]);        matrix[5]=(BBox2[1] - BBox[1]);        a=matrix[0];        b=matrix[1];        c=matrix[2];        d=matrix[3];        e=matrix[4];        f=matrix[5];      } else {        a=matrix[0];        b=matrix[1];        c=matrix[2];        d=matrix[3];        e=matrix[4] * scaling * pageScaling;        f=matrix[5] * scaling * pageScaling;      }      if (c != 0) {        aa=new BufferedImage(height,width,BufferedImage.TYPE_INT_ARGB);        offset=width;      } else {        aa=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);        if (b < 0) {        } else {          if (e != 0f) {            e=-rectX1;          }          if (f != 0f) {            f=-rectY1;          }        }      }      g2=(Graphics2D)aa.getGraphics();      final AffineTransform flip=new AffineTransform();      flip.translate(0,offset);      flip.scale(1,-1);      g2.setTransform(flip);      if (debug) {        System.out.println(" rectX1 = " + rectX1 + " rectY1 = "+ rectY1+ " width = "+ width+ " height = "+ height);      }      final AffineTransform affineTransform=new AffineTransform(a,b,c,d,e,f);      g2.transform(affineTransform);    } else {      aa=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);      g2=(Graphics2D)aa.getGraphics();      final AffineTransform flip=new AffineTransform();      flip.translate(0,offset);      flip.scale(1,-1);      g2.setTransform(flip);    }    if (offsetImage == 2) {      g2.scale(-1,-1);    } else     if (offsetImage == 1) {      g2.translate(1,1);    }    if (subtype == PdfDictionary.Highlight) {      g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,0.5f));    }    form.render(0,g2,scaling * pageScaling,true);    g2.dispose();    return aa;  } catch (  final Exception e) {    LogWriter.writeLog("Exception: " + e.getMessage());    return null;  }catch (  final Error e) {    LogWriter.writeLog("Error: " + e.getMessage());    if (ExternalHandlers.throwMissingCIDError && e.getMessage() != null && e.getMessage().contains("kochi")) {      throw e;    }    return null;  }}  }
class C{  public void pushStaticVipRoute(boolean inBound,Route route,IPClient client,LBMember member,IOFSwitch pinSwitch){  List<NodePortTuple> path=route.getPath();  if (path.size() > 0) {    for (int i=0; i < path.size(); i+=2) {      DatapathId sw=path.get(i).getNodeId();      String entryName;      Match.Builder mb=pinSwitch.getOFFactory().buildMatch();      ArrayList<OFAction> actions=new ArrayList<OFAction>();      OFFlowMod.Builder fmb=pinSwitch.getOFFactory().buildFlowAdd();      fmb.setIdleTimeout(FlowModUtils.INFINITE_TIMEOUT);      fmb.setHardTimeout(FlowModUtils.INFINITE_TIMEOUT);      fmb.setBufferId(OFBufferId.NO_BUFFER);      fmb.setOutPort(OFPort.ANY);      fmb.setCookie(U64.of(0));      fmb.setPriority(FlowModUtils.PRIORITY_MAX);      if (inBound) {        entryName="inbound-vip-" + member.vipId + "-client-"+ client.ipAddress+ "-port-"+ client.targetPort+ "-srcswitch-"+ path.get(0).getNodeId()+ "-sw-"+ sw;        mb.setExact(MatchField.ETH_TYPE,EthType.IPv4).setExact(MatchField.IP_PROTO,client.nw_proto).setExact(MatchField.IPV4_SRC,client.ipAddress).setExact(MatchField.IN_PORT,path.get(i).getPortId());        if (client.nw_proto.equals(IpProtocol.TCP)) {          mb.setExact(MatchField.TCP_SRC,client.srcPort);        } else         if (client.nw_proto.equals(IpProtocol.UDP)) {          mb.setExact(MatchField.UDP_SRC,client.srcPort);        } else         if (client.nw_proto.equals(IpProtocol.SCTP)) {          mb.setExact(MatchField.SCTP_SRC,client.srcPort);        } else {          log.error("Unknown IpProtocol {} detected during inbound static VIP route push.",client.nw_proto);        }        if (sw.equals(pinSwitch.getId())) {          if (pinSwitch.getOFFactory().getVersion().compareTo(OFVersion.OF_12) < 0) {            actions.add(pinSwitch.getOFFactory().actions().setDlDst(MacAddress.of(member.macString)));            actions.add(pinSwitch.getOFFactory().actions().setNwDst(IPv4Address.of(member.address)));            actions.add(pinSwitch.getOFFactory().actions().output(path.get(i + 1).getPortId(),Integer.MAX_VALUE));          } else {            actions.add(pinSwitch.getOFFactory().actions().setField(pinSwitch.getOFFactory().oxms().ethDst(MacAddress.of(member.macString))));            actions.add(pinSwitch.getOFFactory().actions().setField(pinSwitch.getOFFactory().oxms().ipv4Dst(IPv4Address.of(member.address))));            actions.add(pinSwitch.getOFFactory().actions().output(path.get(i + 1).getPortId(),Integer.MAX_VALUE));          }        } else {          actions.add(switchService.getSwitch(path.get(i + 1).getNodeId()).getOFFactory().actions().output(path.get(i + 1).getPortId(),Integer.MAX_VALUE));        }      } else {        entryName="outbound-vip-" + member.vipId + "-client-"+ client.ipAddress+ "-port-"+ client.targetPort+ "-srcswitch-"+ path.get(0).getNodeId()+ "-sw-"+ sw;        mb.setExact(MatchField.ETH_TYPE,EthType.IPv4).setExact(MatchField.IP_PROTO,client.nw_proto).setExact(MatchField.IPV4_DST,client.ipAddress).setExact(MatchField.IN_PORT,path.get(i).getPortId());        if (client.nw_proto.equals(IpProtocol.TCP)) {          mb.setExact(MatchField.TCP_DST,client.srcPort);        } else         if (client.nw_proto.equals(IpProtocol.UDP)) {          mb.setExact(MatchField.UDP_DST,client.srcPort);        } else         if (client.nw_proto.equals(IpProtocol.SCTP)) {          mb.setExact(MatchField.SCTP_DST,client.srcPort);        } else {          log.error("Unknown IpProtocol {} detected during outbound static VIP route push.",client.nw_proto);        }        if (sw.equals(pinSwitch.getId())) {          if (pinSwitch.getOFFactory().getVersion().compareTo(OFVersion.OF_12) < 0) {            actions.add(pinSwitch.getOFFactory().actions().setDlSrc(vips.get(member.vipId).proxyMac));            actions.add(pinSwitch.getOFFactory().actions().setNwSrc(IPv4Address.of(vips.get(member.vipId).address)));            actions.add(pinSwitch.getOFFactory().actions().output(path.get(i + 1).getPortId(),Integer.MAX_VALUE));          } else {            actions.add(pinSwitch.getOFFactory().actions().setField(pinSwitch.getOFFactory().oxms().ethSrc(vips.get(member.vipId).proxyMac)));            actions.add(pinSwitch.getOFFactory().actions().setField(pinSwitch.getOFFactory().oxms().ipv4Src(IPv4Address.of(vips.get(member.vipId).address))));            actions.add(pinSwitch.getOFFactory().actions().output(path.get(i + 1).getPortId(),Integer.MAX_VALUE));          }        } else {          actions.add(switchService.getSwitch(path.get(i + 1).getNodeId()).getOFFactory().actions().output(path.get(i + 1).getPortId(),Integer.MAX_VALUE));        }      }      fmb.setActions(actions);      fmb.setPriority(U16.t(LB_PRIORITY));      fmb.setMatch(mb.build());      sfpService.addFlow(entryName,fmb.build(),sw);    }  }  return;}  }
class C{  public Rational(long numerator,long denominator){  mNumerator=numerator;  mDenominator=denominator;}  }
class C{  public final void wait(long timeout,int nanos) throws java.lang.InterruptedException {  return;}  }
class C{  public void testRandom(){  ExtremityMonitor monitor=new ExtremityMonitor();  Random random=new Random(42);  for (int i=0; i < 1000; i++) {    monitor.update(random.nextDouble());  }  assertTrue(monitor.getMin() < 0.1);  assertTrue(monitor.getMax() < 1.0);  assertTrue(monitor.getMin() >= 0.0);  assertTrue(monitor.getMax() > 0.9);}  }
class C{  private void marshallEnum(Object value,EnumType enumType) throws XMLStreamException {  LOG.debug("Enum value: {} of type: {}",value,enumType);  xmlWriter.writeCharacters(value.toString());}  }
class C{  public final void help(){  console.printCommands();}  }
class C{  @Override protected void onResume(){  super.onResume();  Log.d(TAG,"onResume() - the activity has become visible (it is now \"resumed\")");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public HostCommandResults execute(final RequestBuilder requestBuilder,Set<Host> hosts,String environmentId){  return executeParallel(requestBuilder,hosts,false,environmentId);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static Matrix triangulate(Matrix intr,List<Matrix> r,List<Matrix> c,List<Matrix> x){  Matrix intrInv=intr.inverse();  Matrix mtmSum=new Matrix(3,3);  Matrix mtmcSum=new Matrix(3,1);  Matrix id=Matrix.identity(3,3);  for (int k=0; k < r.size(); k++) {    Matrix xk=x.get(k);    Matrix vk=r.get(k).inverse().times(intrInv).times(xk);    vk=vk.times(1 / vk.normF());    Matrix mk=id.minus(vk.times(vk.transpose()));    Matrix mktmk=mk.transpose().times(mk);    mtmSum=mtmSum.plus(mktmk);    mtmcSum=mtmcSum.plus(mktmk.times(c.get(k)));  }  return mtmSum.inverse().times(mtmcSum);}  }
class C{  public Pc toNearPc(int line){  int n=tableLength();  int nearPc=0;  int distance=0;  if (n > 0) {    distance=lineNumber(0) - line;    nearPc=startPc(0);  }  for (int i=1; i < n; ++i) {    int d=lineNumber(i) - line;    if ((d < 0 && d > distance) || (d >= 0 && (d < distance || distance < 0))) {      distance=d;      nearPc=startPc(i);    }  }  Pc res=new Pc();  res.index=nearPc;  res.line=line + distance;  return res;}  }
class C{  public boolean hasMoreTokens(){  return i < buffer.length;}  }
class C{  public void endDocument() throws SAXException {  charactersFlush();  m_nextsib.setElementAt(NULL,m_currentDocumentNode);  if (m_firstch.elementAt(m_currentDocumentNode) == NOTPROCESSED)   m_firstch.setElementAt(NULL,m_currentDocumentNode);  if (DTM.NULL != m_previous)   m_nextsib.setElementAt(DTM.NULL,m_previous);  m_parents=null;  m_prefixMappings=null;  m_contextIndexes=null;  m_currentDocumentNode=NULL;  m_endDocumentOccured=true;}  }
class C{  private static int RegisterNatives(JNIEnvironment env,int classJREF,Address methodsAddress,int nmethods){  if (traceJNI)   VM.sysWrite("JNI called: RegisterNatives  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Class<?> jcls=(Class<?>)env.getJNIRef(classJREF);    RVMType type=java.lang.JikesRVMSupport.getTypeForClass(jcls);    if (!type.isClassType()) {      env.recordException(new NoSuchMethodError());      return 0;    }    RVMClass klass=type.asClass();    if (!klass.isInitialized()) {      RuntimeEntrypoints.initializeClassForDynamicLink(klass);    }    NativeMethod[] methods=new NativeMethod[nmethods];    AddressArray symbols=AddressArray.create(nmethods);    Address curMethod=methodsAddress;    for (int i=0; i < nmethods; i++) {      String methodString=JNIGenericHelpers.createStringFromC(curMethod.loadAddress());      Atom methodName=Atom.findOrCreateAsciiAtom(methodString);      String sigString=JNIGenericHelpers.createStringFromC(curMethod.loadAddress(Offset.fromIntSignExtend(BYTES_IN_ADDRESS)));      Atom sigName=Atom.findOrCreateAsciiAtom(sigString);      RVMMethod meth=klass.findDeclaredMethod(methodName,sigName);      if (meth == null || !meth.isNative()) {        env.recordException(new NoSuchMethodError(klass + ": " + methodName+ " "+ sigName));        return -1;      }      methods[i]=(NativeMethod)meth;      symbols.set(i,curMethod.loadAddress(Offset.fromIntSignExtend(BYTES_IN_ADDRESS * 2)));      curMethod=curMethod.plus(3 * BYTES_IN_ADDRESS);    }    for (int i=0; i < nmethods; i++) {      methods[i].registerNativeSymbol(symbols.get(i));    }    return 0;  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return -1;  }}  }
class C{  public static ManagedResourceType fromOrdinal(int ordinal){  return VALUES[ordinal];}  }
class C{  public boolean isLocked(){  if (!MRole.getDefault(m_vo.ctx,false).isPersonalLock())   return false;  if (m_Lock == null)   loadLocks();  if (m_Lock == null || m_Lock.isEmpty())   return false;  Integer key=new Integer(m_mTable.getKeyID(m_currentRow));  return m_Lock.contains(key);}  }
class C{  public boolean isStopped(){  return (this.state == STOPPED || this.state == INIT);}  }
class C{  @Interruptible public static Address allocateScalar(BootImageInterface bootImage,RVMClass klass,boolean needsIdentityHash,int identityHashValue){  TIB tib=klass.getTypeInformationBlock();  int size=klass.getInstanceSize();  if (needsIdentityHash) {    if (ADDRESS_BASED_HASHING) {      size+=HASHCODE_BYTES;    } else {      throw new Error("Unsupported allocation");    }  }  int align=getAlignment(klass);  int offset=getOffsetForAlignment(klass,needsIdentityHash);  Address ptr=bootImage.allocateDataStorage(size,align,offset);  Address ref=JavaHeader.initializeScalarHeader(bootImage,ptr,tib,size,needsIdentityHash,identityHashValue);  MemoryManager.initializeHeader(bootImage,ref,tib,size,true);  MiscHeader.initializeHeader(bootImage,ref,tib,size,true);  return ref;}  }
class C{  public static void completerStepSucceeded(String stepId,String warningMessage){  if (warningMessage != null && warningMessage.length() > 0) {    _instance.updateStepStatus(stepId,StepState.SUCCESS,null,warningMessage);  } else {    completerStepSucceded(stepId);  }}  }
class C{  public void refreshLogs(){  final Path logPath=LEnv.PATH_LOGS.resolve(logFilesComboBox.getSelectedItem());  final boolean dontShowDetails=!showDetailsCheckBox.isSelected();  final LogLevel filterLevel=filterLevelComboBox.getSelectedItem();  final XTableModel model=table.getXTableModel();  final Vector<String> columns=LUtils.asNewVector("Time","Level","Message");  final Vector<Vector<Object>> data=new Vector<>();  try (final BufferedReader in=Files.newBufferedReader(logPath,LEnv.UTF8)){    final boolean showMs=SkillLevel.ADVANCED.isAtLeast();    final Func<String,LoggedRecord> logParser=LogFormatter.getParser();    int count=0, allCount=0;    String line;    boolean recordFilteredOut=false;    LoggedRecord lr=null, lastLr=null;    while ((line=in.readLine()) != null) {      lr=logParser.exec(line);      if (lr == null && dontShowDetails)       continue;      if (lr != null) {        allCount++;        lastLr=lr;      }      if (lr != null)       recordFilteredOut=lr.logLevel.compareTo(filterLevel) < 0;      if (recordFilteredOut)       continue;      if (lr != null)       count++;      final Vector<Object> row=new Vector<>(columns.size());      if (lr == null) {        row.add(null);        row.add(lastLr.logLevel);        row.add(line);      } else {        row.add(LEnv.LANG.formatDateTime(lr.time,showMs));        row.add(lr.logLevel);        row.add(lr.message);      }      data.add(row);    }    model.setDataVector(data,columns);    table.setSortable(false);    table.packColumnsExceptLast();    refreshedTimeLabel.setText("Refreshed at " + LEnv.LANG.formatTime(new Date()));    recordsCountLabel.setText("Records: " + LEnv.LANG.formatNumber(count) + " / "+ LEnv.LANG.formatNumber(allCount));  } catch (  final Exception ie) {    LEnv.LOGGER.warning("Failed to read logs.",ie);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:13.028 -0500",hash_original_method="C5B06968060DB82F171AE45EB2B5A112",hash_generated_method="ABEADF15FB58787DF6D3E6D297120009") public TransitionDrawable(Drawable[] layers){  this(new TransitionState(null,null,null),layers);}  }
class C{  public void onArrival(Address from,Address to){  boolean spy=cfg.getProperty("spy","false").equals("true");  DRM=new Collective(group,this,(spy ? null : this),this);  new Thread(DRM,"DRM Collective").start();}  }
class C{  public static ResumptionAction fromName(String name){  if (name == null || name.length() == 0) {    throw new IllegalArgumentException(LocalizedStrings.ResumptionAction_INVALID_RESUMPTIONACTION_NAME_0.toLocalizedString(name));  }  for (int i=0; i < PRIVATE_VALUES.length; i++) {    if (name.equals(PRIVATE_VALUES[i].name)) {      return PRIVATE_VALUES[i];    }  }  throw new IllegalArgumentException(LocalizedStrings.ResumptionAction_INVALID_RESUMPTIONACTION_NAME_0.toLocalizedString(name));}  }
class C{  private static void paint(Graphics2D g){  Shape shape=null;  java.util.LinkedList<AffineTransform> transformations=new java.util.LinkedList<>();  transformations.offer(g.getTransform());  g.transform(new AffineTransform(1.0666667f,0,0,1.0666667f,0,0));  transformations.offer(g.getTransform());  g.transform(new AffineTransform(1,0,0,1,866.58136f,295.00067f));  shape=new Rectangle2D.Double(-866.2532958984375,-293.96893310546875,821.3438720703125,897.3438720703125);  g.setPaint(new RadialGradientPaint(new Point2D.Double(-448.5714111328125,384.4939880371094),514.7857f,new Point2D.Double(-448.5714111328125,384.4939880371094),new float[]{0,1},new Color[]{new Color(0x040404),new Color(0x333333)},NO_CYCLE,SRGB,new AffineTransform(0.7985288f,0,0,0.872094f,-97.38416f,-180.61191f)));  g.fill(shape);  g.setPaint(BLACK);  g.setStroke(new BasicStroke(0.6561659f,0,0,4));  g.draw(shape);  shape=new RoundRectangle2D.Double(-706.5104370117188,-237.91339111328125,498.2328186035156,245.23281860351562,63.69683837890625,63.69683837890625);  g.setPaint(new LinearGradientPaint(new Point2D.Double(-788.5,-183.63778686523438),new Point2D.Double(-113.5,-183.63778686523438),new float[]{0,1},new Color[]{new Color(0x167AB1),new Color(0x91D9EC)},NO_CYCLE,SRGB,new AffineTransform(0.73921794f,0,0,0.79621047f,-124.00672f,30.917376f)));  g.fill(shape);  g.setPaint(BLACK);  g.setStroke(new BasicStroke(0.76718515f,0,0,4));  g.draw(shape);  shape=new RoundRectangle2D.Double(-706.5103759765625,28.08660888671875,498.2328186035156,245.23281860351562,63.69683837890625,63.69683837890625);  g.setPaint(new LinearGradientPaint(new Point2D.Double(-788.5,148.36221313476562),new Point2D.Double(-113.5,148.36221313476562),new float[]{0,1},new Color[]{new Color(0x167AB1),new Color(0x91D9EC)},NO_CYCLE,SRGB,new AffineTransform(0.7392179f,0,0,0.7962104f,-124.00676f,32.57547f)));  g.fill(shape);  g.setPaint(BLACK);  g.setStroke(new BasicStroke(0.7671851f,0,0,4));  g.draw(shape);  shape=new RoundRectangle2D.Double(-706.5103759765625,294.08660888671875,498.2328186035156,245.23281860351562,63.69683837890625,63.69683837890625);  g.setPaint(new LinearGradientPaint(new Point2D.Double(-788.5,482.3622131347656),new Point2D.Double(-113.5,482.3622131347656),new float[]{0,1},new Color[]{new Color(0x167AB1),new Color(0x91D9EC)},NO_CYCLE,SRGB,new AffineTransform(0.7392179f,0,0,0.7962104f,-124.00676f,32.64117f)));  g.fill(shape);  g.setPaint(BLACK);  g.draw(shape);  shape=new Rectangle2D.Double(-820.3513793945312,-237.98419189453125,71.20879364013672,71.20879364013672);  g.setPaint(WHITE);  g.fill(shape);  g.setPaint(BLACK);  g.setStroke(new BasicStroke(0.79120874f,0,0,4));  g.draw(shape);  shape=new Rectangle2D.Double(-820.3513793945312,119.90274047851562,71.20879364013672,71.20879364013672);  g.setPaint(WHITE);  g.fill(shape);  g.setPaint(BLACK);  g.draw(shape);  shape=new Rectangle2D.Double(-820.3513793945312,-59.040191650390625,71.20879364013672,71.20879364013672);  g.setPaint(WHITE);  g.fill(shape);  g.setPaint(BLACK);  g.draw(shape);  shape=new Rectangle2D.Double(-820.3513793945312,294.0548095703125,71.20879364013672,71.20879364013672);  g.setPaint(WHITE);  g.fill(shape);  g.setPaint(BLACK);  g.draw(shape);  shape=new Rectangle2D.Double(-820.3513793945312,468.2068176269531,71.20879364013672,71.20879364013672);  g.setPaint(WHITE);  g.fill(shape);  g.setPaint(BLACK);  g.draw(shape);  shape=new Rectangle2D.Double(-161.31739807128906,-237.98419189453125,71.20879364013672,71.20879364013672);  g.setPaint(WHITE);  g.fill(shape);  g.setPaint(BLACK);  g.draw(shape);  shape=new Rectangle2D.Double(-161.31739807128906,119.90274047851562,71.20879364013672,71.20879364013672);  g.setPaint(WHITE);  g.fill(shape);  g.setPaint(BLACK);  g.draw(shape);  shape=new Rectangle2D.Double(-161.31739807128906,-59.040191650390625,71.20879364013672,71.20879364013672);  g.setPaint(WHITE);  g.fill(shape);  g.setPaint(BLACK);  g.draw(shape);  shape=new Rectangle2D.Double(-161.31739807128906,294.0548095703125,71.20879364013672,71.20879364013672);  g.setPaint(WHITE);  g.fill(shape);  g.setPaint(BLACK);  g.draw(shape);  shape=new Rectangle2D.Double(-161.31739807128906,468.2068176269531,71.20879364013672,71.20879364013672);  g.setPaint(WHITE);  g.fill(shape);  g.setPaint(BLACK);  g.draw(shape);  g.setTransform(transformations.poll());  g.setTransform(transformations.poll());}  }
class C{  public OpenFileAction(Application app){  super(app);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");  labels.configureAction(this,ID);}  }
class C{  public static Matrix backSub(Matrix U,Matrix y){  if (y.rows() != U.rows())   throw new ArithmeticException("Vector and matrix sizes do not agree");  Matrix x=new DenseMatrix(U.cols(),y.cols());  double[] x_col_k=new double[y.rows()];  final int start=Math.min(U.rows(),U.cols()) - 1;  for (int k=0; k < y.cols(); k++) {    for (int i=start; i >= 0; i--) {      x_col_k[i]=y.get(i,k);      for (int j=i + 1; j <= start; j++)       x_col_k[i]-=U.get(i,j) * x_col_k[j];      x_col_k[i]/=U.get(i,i);    }    for (int i=0; i < x_col_k.length; i++)     if (Double.isInfinite(x_col_k[i]))     x.set(i,k,0); else     x.set(i,k,x_col_k[i]);  }  return x;}  }
class C{  public void move(MouseEvent e){  if (gpm != null) {    gpm.set(e.getX(),e.getY());    gpm.updateOffsets();    movingPoint=gpm;  }}  }
class C{  public boolean canOpen(){  if (getIdleCount() > 0) {    return true;  }  State state=_state;  if (state == State.ACTIVE)   return true; else   if (!state.isEnabled())   return false; else {    long now=CurrentTime.currentTime();    if (isFailed(now)) {      return false;    }    return true;  }}  }
class C{  public TableInfo(ConnectionSource connectionSource,BaseDaoImpl<T,ID> baseDaoImpl,Class<T> dataClass) throws SQLException {  this(connectionSource.getDatabaseType(),baseDaoImpl,DatabaseTableConfig.fromClass(connectionSource,dataClass));}  }
class C{  public FPTreeNode createChildNode(Item nodeItem){  return new FPTreeNode(this,nodeItem);}  }
class C{  public TodolistObject(int id,boolean deleted){  this.id=id;  this.deleted=deleted;}  }
class C{  private void saveProfile(Profile profile) throws BusinessException, JAXBException, IOException {  if (profile.isCommonProfile()) {    throw new BusinessException("Save the profile '" + profile.getName() + " to disk.",ConfigurationInterfaceErrorCodeEnum.COMMON_PROFILE_CAN_NOT_BE_ALTERED);  }  transformator.marshall(pathResolver.getProfileFilePath(profile),profile,getRelativeToSchemaPath(pathResolver.getProfilesPath()).toString());}  }
class C{  public void joinGroup(InetAddress groupAddr) throws IOException {  checkJoinOrLeave(groupAddr);  impl.join(groupAddr);}  }
class C{  public static void nextImage(final IdocFrame ui){  ElementVO ele=(ElementVO)ui.getFileVO().getListImage().get(ui.getFileVO().getImageSelectIndex());  if (ele.getImageSelectIndex() + 2 > ele.getImages().size()) {    ele.setImageSelectIndex(0);  } else {    ele.setImageSelectIndex(ele.getImageSelectIndex() + 1);  }}  }
class C{  private void interpretMul(final ReilInstruction instruction){  final Pair<Boolean,BigInteger> firstValue=loadLongValue(instruction.getFirstOperand());  final Pair<Boolean,BigInteger> secondValue=loadLongValue(instruction.getSecondOperand());  if (firstValue.first() && secondValue.first()) {    final BigInteger result=firstValue.second().multiply(secondValue.second());    final String targetRegister=instruction.getThirdOperand().getValue();    final OperandSize targetSize=instruction.getThirdOperand().getSize();    setRegister(targetRegister,result,targetSize,ReilRegisterStatus.DEFINED);  } else {    assert false;  }}  }
class C{  public int countByExample(UserExample example) throws SQLException {  Integer count=(Integer)sqlMapClient.queryForObject("t_user.ibatorgenerated_countByExample",example);  return count.intValue();}  }
class C{  public void fillToolBar(ToolBarManager manager,IInformationControl infoControl){}  }
class C{  protected void writePixels() throws IOException {  LZWEncoder encoder=new LZWEncoder(width,height,indexedPixels,colorDepth);  encoder.encode(out);}  }
class C{  protected CoapObserveRelation(Request request,Endpoint endpoint){  this.request=request;  this.endpoint=endpoint;  this.orderer=new ObserveNotificationOrderer();}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  public static void extractPlaceholders(ClassNode node,Map<String,GenericsType> map){  if (node == null)   return;  if (node.isArray()) {    extractPlaceholders(node.getComponentType(),map);    return;  }  if (!node.isUsingGenerics() || !node.isRedirectNode())   return;  GenericsType[] parameterized=node.getGenericsTypes();  if (parameterized == null || parameterized.length == 0)   return;  GenericsType[] redirectGenericsTypes=node.redirect().getGenericsTypes();  if (redirectGenericsTypes == null)   redirectGenericsTypes=parameterized;  for (int i=0; i < redirectGenericsTypes.length; i++) {    GenericsType redirectType=redirectGenericsTypes[i];    if (redirectType.isPlaceholder()) {      String name=redirectType.getName();      if (!map.containsKey(name)) {        GenericsType value=parameterized[i];        map.put(name,value);        if (value.isWildcard()) {          ClassNode lowerBound=value.getLowerBound();          if (lowerBound != null) {            extractPlaceholders(lowerBound,map);          }          ClassNode[] upperBounds=value.getUpperBounds();          if (upperBounds != null) {            for (            ClassNode upperBound : upperBounds) {              extractPlaceholders(upperBound,map);            }          }        } else         if (!value.isPlaceholder()) {          extractPlaceholders(value.getType(),map);        }      }    }  }}  }
class C{  public SimpleFragmentIntent<F> putExtra(String name,float value){  if (extras == null) {    extras=new Bundle();  }  extras.putFloat(name,value);  return this;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:33.926 -0500",hash_original_method="BCACA708B6725C3BB29ED8DCC5E23FC1",hash_generated_method="F5EDD96EE5977E159E75809E65120ECE") protected void close(){  if (Log.isLoggable(TAG,Log.VERBOSE)) {    Log.d(TAG,"unBindFromSyncAdapter: connection " + this);  }  if (mBound) {    mBound=false;    mContext.unbindService(this);  }  mSyncWakeLock.release();  mSyncWakeLock.setWorkSource(null);}  }
class C{  public static Element svgText(Document document,double x,double y,String text){  Element elem=SVGUtil.svgElement(document,SVGConstants.SVG_TEXT_TAG);  SVGUtil.setAtt(elem,SVGConstants.SVG_X_ATTRIBUTE,x);  SVGUtil.setAtt(elem,SVGConstants.SVG_Y_ATTRIBUTE,y);  elem.setTextContent(text);  return elem;}  }
class C{  public THashSet(int initialCapacity,TObjectHashingStrategy<E> strategy){  super(initialCapacity,strategy);}  }
class C{  public JavaIndenter(IDocument document,JavaHeuristicScanner scanner){  this(document,scanner,null);}  }
class C{  protected void fireFigureAdded(Figure f,int zIndex){  CompositeFigureEvent event=null;  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == CompositeFigureListener.class) {      if (event == null)       event=new CompositeFigureEvent(this,f,f.getDrawingArea(),zIndex);      ((CompositeFigureListener)listeners[i + 1]).figureAdded(event);    }  }}  }
class C{  public SupportBarChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer,Type type){  super(dataset,renderer);  mType=type;}  }
class C{  public static String prepare(String s){  return s != null ? s.trim().toLowerCase() : "";}  }
class C{  public boolean isExcludeAutoDelivery(){  Object oo=get_Value(COLUMNNAME_IsExcludeAutoDelivery);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static String timeStampToString(Timestamp stamp,TimeZone tz,Locale locale){  return timeStampToString(stamp,null,tz,locale);}  }
class C{  private Boolean doValidations(final DragAndDropEvent dragEvent){  final Component compsource=dragEvent.getTransferable().getSourceComponent();  Boolean isValid=Boolean.TRUE;  if (compsource instanceof Table && !isComplexFilterViewDisplayed) {    final TableTransferable transferable=(TableTransferable)dragEvent.getTransferable();    final Table source=transferable.getSourceComponent();    if (!source.getId().equals(UIComponentIdProvider.DIST_TABLE_ID)) {      notification.displayValidationError(i18n.get("message.action.not.allowed"));      isValid=Boolean.FALSE;    } else {      if (getDropppedDistributionDetails(transferable).size() > 1) {        notification.displayValidationError(i18n.get("message.onlyone.distribution.dropallowed"));        isValid=Boolean.FALSE;      }    }  } else {    notification.displayValidationError(i18n.get("message.action.not.allowed"));    isValid=Boolean.FALSE;  }  return isValid;}  }
class C{  public float distance(double x,double y){  return _distance(x,y);}  }
class C{  public ReactionEffect createReactionEffect(){  ReactionEffectImpl reactionEffect=new ReactionEffectImpl();  return reactionEffect;}  }
class C{  public boolean isSimAccount(final long rawContactId){  Cursor cursor=null;  String[] selectionArgs=new String[]{String.valueOf(rawContactId)};  try {    cursor=mContentResolver.query(RawContacts.CONTENT_URI,PROJ_RAW_CONTACT_ID,SIM_ACCOUNT_SELECTION,selectionArgs,null);    CursorUtil.assertCursorIsNotNull(cursor,RawContacts.CONTENT_URI);    return cursor.moveToFirst();  }  finally {    CursorUtil.close(cursor);  }}  }
class C{  IntTree<V> changeKeysAbove(final long key,final int delta){  if (size == 0 || delta == 0)   return this;  if (this.key >= key)   return new IntTree<V>(this.key + delta,value,left.changeKeysBelow(key - this.key,-delta),right);  IntTree<V> newRight=right.changeKeysAbove(key - this.key,delta);  if (newRight == right)   return this;  return new IntTree<V>(this.key,value,left,newRight);}  }
class C{  public static String similarKeyMessage(Collection.Key[] _keys,String keySearched,String keyLabel,String keyLabels,String in,boolean listAll){  String inThe=StringUtil.isEmpty(in,true) ? "" : " in the " + in;  boolean empty=_keys.length == 0;  if (listAll && (_keys.length > 50 || empty)) {    listAll=false;  }  String list=null;  if (listAll) {    Arrays.sort(_keys);    list=ListUtil.arrayToList(_keys,",");  }  String keySearchedSoundex=StringUtil.soundex(keySearched);  for (int i=0; i < _keys.length; i++) {    if (StringUtil.soundex(_keys[i].getString()).equals(keySearchedSoundex)) {      String appendix;      if (listAll)       appendix=". Here is a complete list of all available " + keyLabels + ": ["+ list+ "]."; else       if (empty)       appendix=". The structure is empty"; else       appendix=".";      return "The " + keyLabel + " ["+ keySearched+ "] does not exist "+ inThe+ ", but there is a similar "+ keyLabel+ " with name ["+ _keys[i].getString()+ "] available"+ appendix;    }  }  String appendix;  if (listAll)   appendix=", only the following " + keyLabels + " are available: ["+ list+ "]."; else   if (empty)   appendix=", the structure is empty"; else   appendix=".";  return "The " + keyLabel + " ["+ keySearched+ "] does not exist"+ inThe+ appendix;}  }
class C{  public static String readFile(File file,String charsetName){  StringBuilder fileContent=new StringBuilder("");  if (file == null || !file.isFile()) {    return fileContent.toString();  }  BufferedReader reader=null;  try {    InputStreamReader is=new InputStreamReader(new FileInputStream(file),charsetName);    reader=new BufferedReader(is);    String line=null;    while ((line=reader.readLine()) != null) {      if (!fileContent.toString().equals("")) {        fileContent.append("\r\n");      }      fileContent.append(line);    }    reader.close();  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }  return fileContent.toString();}  }
class C{  public void testDivideBigDecimalScaleMathContextDOWN(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=15;  String b="748766876876723342238476237823787879183470";  int bScale=70;  int precision=21;  RoundingMode rm=RoundingMode.DOWN;  MathContext mc=new MathContext(precision,rm);  String c="4.98978611802562512995E+70";  int resScale=-50;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  @Override public ObjectMessage createObjectMessage() throws JMSException {  Session session=getSessionInternal();  if (ActiveMQRASession.trace) {    ActiveMQRALogger.LOGGER.trace("createObjectMessage" + session);  }  return session.createObjectMessage();}  }
class C{  @Override public void actionPerformed(ActionEvent e){  try {    if (e.getSource() == m_Input) {      String command=m_Input.getText();      int last=m_CommandHistory.size() - 1;      if ((last < 0) || !command.equals(m_CommandHistory.elementAt(last))) {        m_CommandHistory.addElement(command);        saveHistory();      }      m_HistoryPos=m_CommandHistory.size();      runCommand(command);      m_Input.setText("");    }  } catch (  Exception ex) {    System.err.println(ex.getMessage());  }}  }
class C{  void update(int status,int leaderId){  lock.lock();  try {    this.status=status;    this.leaderId=leaderId;    updateCond.signal();  }  finally {    lock.unlock();  }}  }
class C{  public void translateY(float units){  this.position.y+=units;  updated=false;}  }
class C{  public Builder t(){  this.withThread=true;  return this;}  }
class C{  public SQLiteLoader(final Context context,final boolean distinct,final String table,final String[] columns,final String selection,final String[] selectionArgs,final String groupBy,final String having,final String orderBy,final String limit){  super(context);  mDistinct=distinct;  mTable=table;  mColumns=columns;  mSelection=selection;  mSelectionArgs=selectionArgs;  mGroupBy=groupBy;  mHaving=having;  mOrderBy=orderBy;  mLimit=limit;}  }
class C{  public void writeBytes(String s) throws IOException {  int length=s.length();  for (int i=0; i < length; i++) {    out.write((byte)s.charAt(i));  }  written+=length;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isEmpty(){  return getN() == 0;}  }
class C{  public StringIndexOutOfBoundsException(java.lang.String s){}  }
class C{  public void testFirst(){  m_Filter=getFilter("1-2");  testBuffered();  performTest();}  }
class C{  private void cbCnvSystemItemStateChanged(java.awt.event.ItemEvent evt){  EcuDataItem.cnvSystem=cbCnvSystem.getSelectedIndex();switch (tabMain.getSelectedIndex()) {case 2:    panObdFreezeFrame.updateAllTableRows(EcuDataPv.FID_UNITS);  break;case 3:panObdData.updateAllTableRows(EcuDataPv.FID_UNITS);break;case 4:panCanData.updateAllTableRows(EcuDataPv.FID_UNITS);break;default :}}  }
class C{  public boolean containsQuotaDirResource(String quotaId){  for (  RelatedResourceRep quotaDirRes : getQuotaDirs()) {    URI quotaDirId=quotaDirRes.getId();    if ((quotaDirId != null) && (quotaDirId.toString().equals(quotaId))) {      return true;    }  }  return false;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  FragmentManager mFragmentManager=getFragmentManager();  FragmentTransaction mFragmentTransaction=mFragmentManager.beginTransaction();  UUID birthdayId=(UUID)getIntent().getSerializableExtra(BirthdayFragment.EXTRA_BIRTHDAY_ID);  BirthdayFragment mPrefsFragment=BirthdayFragment.newInstance(birthdayId);  mFragmentTransaction.replace(android.R.id.content,mPrefsFragment);  mFragmentTransaction.commit();}  }
class C{  DHCrypt(int keyLength,SecureRandom random){  this(keyLength,ParametersHolder.definedParams.get(keyLength),random);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public void serviceAvailable(BeanContextServiceAvailableEvent bcsae){}  }
class C{  public static void i(String tag,String msg,Object... args){  if (sLevel > LEVEL_INFO) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.i(tag,msg);}  }
class C{  public synchronized void pauseTime(){  Log.d(TAG,"Pausing time");  assert SPEEDS[STOPPED_INDEX].rate == 0.0;  speedIndex=STOPPED_INDEX;}  }
class C{  @Override protected void addTrailerToOutput(byte[] msg,int offset,jmri.jmrix.AbstractMRMessage m){  log.debug("aTTO offset = {} message = {} msg length = {}",offset,m.toString(),msg.length);  if (m.getNumDataElements() == 0) {    return;  }  msg[offset]='>';  log.debug("finished string = {}",new String(msg,StandardCharsets.UTF_8));}  }
class C{  public static byte[] encodeBase64(byte[] binaryData,boolean isChunked){  int lengthDataBits=binaryData.length * EIGHTBIT;  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  byte encodedData[]=null;  int encodedDataLength=0;  int nbrChunks=0;  if (fewerThan24bits != 0) {    encodedDataLength=(numberTriplets + 1) * 4;  } else {    encodedDataLength=numberTriplets * 4;  }  if (isChunked) {    nbrChunks=(CHUNK_SEPARATOR.length == 0 ? 0 : (int)Math.ceil((float)encodedDataLength / CHUNK_SIZE));    encodedDataLength+=nbrChunks * CHUNK_SEPARATOR.length;  }  encodedData=new byte[encodedDataLength];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  int i=0;  int nextSeparatorIndex=CHUNK_SIZE;  int chunksSoFar=0;  for (i=0; i < numberTriplets; i++) {    dataIndex=i * 3;    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    b3=binaryData[dataIndex + 2];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex + 3]=lookUpBase64Alphabet[b3 & 0x3f];    encodedIndex+=4;    if (isChunked) {      if (encodedIndex == nextSeparatorIndex) {        System.arraycopy(CHUNK_SEPARATOR,0,encodedData,encodedIndex,CHUNK_SEPARATOR.length);        chunksSoFar++;        nextSeparatorIndex=(CHUNK_SIZE * (chunksSoFar + 1)) + (chunksSoFar * CHUNK_SEPARATOR.length);        encodedIndex+=CHUNK_SEPARATOR.length;      }    }  }  dataIndex=i * 3;  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex + 2]=PAD;    encodedData[encodedIndex + 3]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex + 3]=PAD;  }  if (isChunked) {    if (chunksSoFar < nbrChunks) {      System.arraycopy(CHUNK_SEPARATOR,0,encodedData,encodedDataLength - CHUNK_SEPARATOR.length,CHUNK_SEPARATOR.length);    }  }  return encodedData;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.610 -0400",hash_original_method="C3B221668AABDAC9CAE97BC7412E7D54",hash_generated_method="C41E2660B0005382FF35D955F45A8276") public String encode(String pString){  return metaphone(pString);}  }
class C{  public void removeAt(int index){  System.arraycopy(mKeys,index + 1,mKeys,index,mSize - (index + 1));  System.arraycopy(mValues,index + 1,mValues,index,mSize - (index + 1));  mSize--;}  }
class C{  public static SQLConsumerException createSQLConsumerException(final ErrorKeys errorId,final String message,final Exception e){  return new SQLConsumerException(errorId.toString() + ":\r\n" + message,e);}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  int cost=expr.costInline(thresh,env,ctx);  for (int i=0; (i < args.length) && (cost < thresh); i++) {    if (args[i] != null) {      cost+=args[i].costInline(thresh,env,ctx);    }  }  return cost;}  }
class C{  private void startStoredFields() throws IOException, AbortingException {  try {    initStoredFieldsWriter();    storedFieldsWriter.startDocument();  } catch (  Throwable th) {    throw AbortingException.wrap(th);  }  lastStoredDocID++;}  }
class C{  protected void revokeCertificate(VMCAServerContext context,X509Certificate certificate) throws Exception {  VMCAAdapter2.RevokeCertificate(context,getEncodedStringFromCertificate(certificate));}  }
class C{  public boolean containOnlyDigitalGoods(){  for (  ShoppingCartItem cartItem : this.cartLines) {    GenericValue product=cartItem.getProduct();    try {      GenericValue productType=product.getRelatedOne("ProductType",true);      if (productType == null || !"N".equals(productType.getString("isPhysical"))) {        return false;      }    } catch (    GenericEntityException e) {      Debug.logError(e,"Error looking up ProductType: " + e.toString(),module);      return false;    }  }  return true;}  }
class C{  public void addCertRequest(CertRequest certReq){  certRequests.add(certReq);}  }
class C{  public String booleanColsTipText(){  return "The range of attributes that are generated as boolean ones.";}  }
class C{  void playChase(View anchorView,View chaserView,boolean force){  boolean changed=false;  for (  ViewChaseChoreography c : myChoreography) {    changed=changed || c.playChase(anchorView,chaserView);  }  if (changed || force) {    for (    View v : childChoreography.keySet()) {      childChoreography.get(v).playChase(chaserView,v,force);    }  }}  }
class C{  public static List<Vm> createVmList(int brokerId,int vmsNumber){  List<Vm> vms=new ArrayList<Vm>();  for (int i=0; i < vmsNumber; i++) {    int vmType=i / (int)Math.ceil((double)vmsNumber / Constants.VM_TYPES);    vms.add(new PowerVm(i,brokerId,Constants.VM_MIPS[vmType],Constants.VM_PES[vmType],Constants.VM_RAM[vmType],Constants.VM_BW,Constants.VM_SIZE,1,"Xen",new CloudletSchedulerDynamicWorkload(Constants.VM_MIPS[vmType],Constants.VM_PES[vmType]),Constants.SCHEDULING_INTERVAL));  }  return vms;}  }
class C{  public boolean isEmpty(){  return resourceList.isEmpty();}  }
class C{  @SuppressWarnings("deprecation") @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  mPrefs=PreferenceManager.getDefaultSharedPreferences(this);  ActionBar actionBar=getActionBar();  if (actionBar != null)   actionBar.setDisplayHomeAsUpEnabled(true);  for (  int id : GESTURE_PREF_KEY_IDS) {    mGesturePrefKeys.add(getString(id));  }  final String[] defaultGesturePrefValues=getResources().getStringArray(R.array.pref_shortcut_values);  mGesturePrefValues.addAll(Arrays.asList(defaultGesturePrefValues));  addPreferencesFromResource(R.xml.gesture_preferences);  final boolean treeDebugEnabled=mPrefs.getBoolean(getString(R.string.pref_tree_debug_key),false);  if (treeDebugEnabled) {    int numDefaultValues=defaultGesturePrefValues.length;    String[] newGesturePrefValues=Arrays.copyOf(defaultGesturePrefValues,numDefaultValues + 1);    newGesturePrefValues[numDefaultValues]=getString(R.string.shortcut_value_print_node_tree);    String[] defaultGesturePrefLabels=getResources().getStringArray(R.array.pref_shortcut_entries);    String[] newGesturePrefLabels=Arrays.copyOf(defaultGesturePrefLabels,numDefaultValues + 1);    newGesturePrefLabels[numDefaultValues]=getString(R.string.shortcut_print_node_tree);    for (    int gestureKey : GESTURE_PREF_KEY_IDS) {      final ListPreference gesturePref=(ListPreference)findPreference(getString(gestureKey));      gesturePref.setEntries(newGesturePrefLabels);      gesturePref.setEntryValues(newGesturePrefValues);    }    mGesturePrefValues.add(getString(R.string.shortcut_value_print_node_tree));  }  fixListSummaries(getPreferenceScreen());}  }
class C{  public void add(T value){  Element<T> element=new Element<T>(bundle,value);  element.previous=tail;  if (tail != null)   tail.next=element;  tail=element;  if (head == null)   head=element;}  }
class C{  public static Map<URI,Integer> filterVolumeMap(Map<URI,Integer> volumeMap,Set<URI> includedVolumes){  Map<URI,Integer> result=new HashMap<URI,Integer>();  if (includedVolumes == null) {    return result;  }  for (  URI includedVolume : includedVolumes) {    result.put(includedVolume,volumeMap.get(includedVolume));  }  return result;}  }
class C{  @Override public void onChangedRemoved(final RPObject object,final RPObject changes){  super.onChangedRemoved(object,changes);  if (changes.has("amount")) {    working=true;    fireChange(PROP_WORKING);  }}  }
class C{  @Pointcut("get(* *.*)") public void fieldGet(){}  }
class C{  public static LatLng travel(LatLng start,double initialBearing,double distance,LengthUnit unit){  double bR=Math.toRadians(initialBearing);  double lat1R=Math.toRadians(start.getLatitude());  double lon1R=Math.toRadians(start.getLongitude());  double dR=distance / LatLngConfig.getEarthRadius(unit);  double a=Math.sin(dR) * Math.cos(lat1R);  double lat2=Math.asin(Math.sin(lat1R) * Math.cos(dR) + a * Math.cos(bR));  double lon2=lon1R + Math.atan2(Math.sin(bR) * a,Math.cos(dR) - Math.sin(lat1R) * Math.sin(lat2));  return new LatLng(Math.toDegrees(lat2),Math.toDegrees(lon2));}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.TRACE_OPTIONS___TRACE_OPTION_1:    getTraceOption_1().clear();  return;case UmplePackage.TRACE_OPTIONS___ANONYMOUS_TRACE_OPTIONS_11:getAnonymous_traceOptions_1_1().clear();return;}super.eUnset(featureID);}  }
class C{  public boolean isCancelled(){  Object oo=get_Value(COLUMNNAME_IsCancelled);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,source.length);}  }
class C{  private static void addChildrenBlockIndex(Set<Integer> blockIndexes,CarbonDimension dimension){  for (int i=0; i < dimension.numberOfChild(); i++) {    addChildrenBlockIndex(blockIndexes,dimension.getListOfChildDimensions().get(i));    blockIndexes.add(dimension.getListOfChildDimensions().get(i).getOrdinal());  }}  }
class C{  public void showDialog(@NotNull DebuggerInfo debuggerInfo){  this.debuggerInfo=debuggerInfo;  view.setExpression("");  view.setResult("");  view.setEnableEvaluateButton(false);  view.showDialog();  view.focusInExpressionField();}  }
class C{  public boolean isActive(){  return joint.isActive();}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    camera.autoFocus(autoFocusCallback);  }}  }
class C{  protected void drawGrid(DrawingContext context){  Graphics2D graphics=context.getGraphics();  AffineTransform txOrig=graphics.getTransform();  graphics.translate(getX(),getY());  AffineTransform txOffset=graphics.getTransform();  Rectangle2D bounds=getBounds();  if (isMajorGridX() || isMinorGridX()) {    AxisRenderer axisXRenderer=plot.getAxisRenderer(AXIS_X);    Axis axisX=plot.getAxis(AXIS_X);    if (axisXRenderer != null && axisX != null && axisX.isValid()) {      Shape shapeX=axisXRenderer.getShape();      Rectangle2D shapeBoundsX=shapeX.getBounds2D();      List<Tick> ticksX=axisXRenderer.getTicks(axisX);      Line2D gridLineVert=new Line2D.Double(-shapeBoundsX.getMinX(),-shapeBoundsX.getMinY(),-shapeBoundsX.getMinX(),bounds.getHeight() - shapeBoundsX.getMinY());      for (      Tick tick : ticksX) {        if ((tick.type == TickType.MAJOR && !isMajorGridX()) || (tick.type == TickType.MINOR && !isMinorGridX())) {          continue;        }        Point2D tickPoint=tick.position.getPoint2D();        if (tickPoint == null) {          continue;        }        Paint paint=majorGridColor;        if (tick.type == TickType.MINOR) {          paint=getMinorGridColor();        }        graphics.translate(tickPoint.getX(),tickPoint.getY());        GraphicsUtils.drawPaintedShape(graphics,gridLineVert,paint,null,null);        graphics.setTransform(txOffset);      }    }  }  if (isMajorGridY() || isMinorGridY()) {    Axis axisY=plot.getAxis(AXIS_Y);    AxisRenderer axisYRenderer=plot.getAxisRenderer(AXIS_Y);    if (axisY != null && axisY.isValid() && axisYRenderer != null) {      Shape shapeY=axisYRenderer.getShape();      Rectangle2D shapeBoundsY=shapeY.getBounds2D();      List<Tick> ticksY=axisYRenderer.getTicks(axisY);      Line2D gridLineHoriz=new Line2D.Double(-shapeBoundsY.getMinX(),-shapeBoundsY.getMinY(),bounds.getWidth() - shapeBoundsY.getMinX(),-shapeBoundsY.getMinY());      for (      Tick tick : ticksY) {        boolean isMajorTick=tick.type == TickType.MAJOR;        boolean isMinorTick=tick.type == TickType.MINOR;        if ((isMajorTick && !isMajorGridY()) || (isMinorTick && !isMinorGridY())) {          continue;        }        Point2D tickPoint=tick.position.getPoint2D();        if (tickPoint == null) {          continue;        }        Paint paint=majorGridColor;        if (isMinorTick) {          paint=getMinorGridColor();        }        graphics.translate(tickPoint.getX(),tickPoint.getY());        GraphicsUtils.drawPaintedShape(graphics,gridLineHoriz,paint,null,null);        graphics.setTransform(txOffset);      }    }  }  graphics.setTransform(txOrig);}  }
class C{  public boolean adjustValue(float key,int amount){  int index=index(key);  if (index < 0) {    return false;  } else {    _values[index]+=amount;    return true;  }}  }
class C{  public IOObject store(IOObject ioobject,RepositoryLocation location,Operator callingOperator) throws RepositoryException {  return store(ioobject,location,callingOperator,null);}  }
class C{  public boolean isAccountGrantError(){  return (error != null && error.equalsIgnoreCase(ERROR_INVALID_GRANT));}  }
class C{  @Override public void trace(String format,Object arg){  if (logger.isLoggable(Level.FINEST)) {    FormattingTuple ft=MessageFormatter.format(format,arg);    log(SELF,Level.FINEST,ft.getMessage(),ft.getThrowable());  }}  }
class C{  public static RadioButton createToggle(Image icon,ButtonGroup bg){  return createToggle(null,icon,bg);}  }
class C{  public String printMessage(){  StringBuffer sb=new StringBuffer();  sb.append("msgId : " + msgId + "\n");  sb.append("msgMaxSize : " + msgMaxSize + "\n");  sb.append("msgFlags : " + msgFlags + "\n");  sb.append("msgSecurityModel : " + msgSecurityModel + "\n");  if (contextEngineId == null) {    sb.append("contextEngineId : null");  } else {    sb.append("contextEngineId : {\n");    sb.append(dumpHexBuffer(contextEngineId,0,contextEngineId.length));    sb.append("\n}\n");  }  if (contextName == null) {    sb.append("contextName : null");  } else {    sb.append("contextName : {\n");    sb.append(dumpHexBuffer(contextName,0,contextName.length));    sb.append("\n}\n");  }  return sb.append(super.printMessage()).toString();}  }
class C{  public void recursiveDelete(File fileOrDirectory){  if (fileOrDirectory.isDirectory())   for (  File child : fileOrDirectory.listFiles())   recursiveDelete(child);  try {    fileOrDirectory.delete();  } catch (  Exception e) {    e.getStackTrace();  }}  }
class C{  public void input(Comment comment,Comment parent,Network network){  if (!isEnabled()) {    return;  }  try {    log("Processing post comment",Bot.FINE,comment.getMessage(),comment.getId());    if ((System.currentTimeMillis() - comment.getCreatedTime().getTime()) > DAY) {      log("Day old post commentt",Bot.FINE,comment.getId(),comment.getCreatedTime().getTime());      return;    }    if (this.processedPosts.contains(comment)) {      log("Already processed post comment",Bot.FINE,comment.getMessage(),comment.getId());      return;    }    this.processedPosts.add(comment.getId());    String name=comment.getFrom() == null ? "anonymous" : comment.getFrom().getName();    String text=comment.getMessage().trim();    log("Input post comment",Level.FINE,comment.getMessage(),name);    this.postsProcessed++;    String id=comment.getId();    if (parent != null) {      id=parent.getId();    }    inputSentence(text,name,this.userName,id,comment.getCreatedTime().getTime(),network);  } catch (  Exception exception) {    log(exception);  }}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) @Path("/{id}/register") public IpInterfaceRestRep registerIpInterface(@PathParam("id") URI id){  ArgValidator.checkFieldUriType(id,IpInterface.class,"id");  IpInterface ipInterface=_dbClient.queryObject(IpInterface.class,id);  ArgValidator.checkEntity(ipInterface,id,isIdEmbeddedInURL(id));  if (RegistrationStatus.UNREGISTERED.toString().equalsIgnoreCase(ipInterface.getRegistrationStatus())) {    ipInterface.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());    _dbClient.persistObject(ipInterface);    auditOp(OperationTypeEnum.REGISTER_HOST_IPINTERFACE,true,null,ipInterface.getId().toString());  }  return map(ipInterface);}  }
class C{  private void saveMessages(FacesContext facesContext){  List<MessageWithClientId> messages=getAndResetFacesMessages(facesContext);  if (messages.size() > 0) {    writeToSessionBean(messages);  }}  }
class C{  public InternalButtonAction(){  super("OK");}  }
class C{  protected Double lookupElevation(final double latRadians,final double lonRadians){  LocalTile tile=this.findTile(latRadians,lonRadians);  if (tile == null)   return null;  final double sectorDeltaLat=tile.sector.getDeltaLat().radians;  final double sectorDeltaLon=tile.sector.getDeltaLon().radians;  final double dLat=tile.sector.getMaxLatitude().radians - latRadians;  final double dLon=lonRadians - tile.sector.getMinLongitude().radians;  final double sLat=dLat / sectorDeltaLat;  final double sLon=dLon / sectorDeltaLon;  int j=(int)((tile.tileHeight - 1) * sLat);  int i=(int)((tile.tileWidth - 1) * sLon);  int k=j * tile.tileWidth + i;  double eLeft=tile.elevations.getDouble(k);  double eRight=i < (tile.tileWidth - 1) ? tile.elevations.getDouble(k + 1) : eLeft;  if (tile.isMissingData(eLeft) || tile.isMissingData(eRight))   return this.missingDataFlag;  double dw=sectorDeltaLon / (tile.tileWidth - 1);  double dh=sectorDeltaLat / (tile.tileHeight - 1);  double ssLon=(dLon - i * dw) / dw;  double ssLat=(dLat - j * dh) / dh;  double eTop=eLeft + ssLon * (eRight - eLeft);  if (j < tile.tileHeight - 1 && i < tile.tileWidth - 1) {    eLeft=tile.elevations.getDouble(k + tile.tileWidth);    eRight=tile.elevations.getDouble(k + tile.tileWidth + 1);    if (tile.isMissingData(eLeft) || tile.isMissingData(eRight))     return this.missingDataFlag;  }  double eBot=eLeft + ssLon * (eRight - eLeft);  return eTop + ssLat * (eBot - eTop);}  }
class C{  public AnnotationVisitor visitAnnotationDefault(){  if (mv != null) {    return mv.visitAnnotationDefault();  }  return null;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:43.608 -0500",hash_original_method="34D150DBA15CCC20FE0F33E337B5D5A0",hash_generated_method="B95E5DE1929152BD530E9CE4F42C9C2C") public TestCaseClassLoader(){  this(System.getProperty("java.class.path"));}  }
class C{  public static URI toURI(String self) throws URISyntaxException {  return new URI(self);}  }
class C{  public boolean isSubclass(SootClass child,SootClass parent){  child.checkLevel(SootClass.HIERARCHY);  parent.checkLevel(SootClass.HIERARCHY);  Interval parentInterval=classToInterval.get(parent);  Interval childInterval=classToInterval.get(child);  return parentInterval.isSubrange(childInterval);}  }
class C{  public static double readLEDouble(byte[] b,int off){  double result=Double.longBitsToDouble(readLELong(b,off));  return result;}  }
class C{  public QueuedOperation(Operation op,Object key,byte[] value,Object valueObj,byte deserializationPolicy,Object cbArg){  this.op=op;  this.key=key;  this.value=value;  this.valueObj=valueObj;  this.deserializationPolicy=deserializationPolicy;  this.cbArg=cbArg;}  }
class C{  public PdfException(final String message){  super(message);  error_message=message;}  }
class C{  public void trimToSize(int maxSize){  while (true) {    K key;    V value;synchronized (this) {      if (size < 0 || (map.isEmpty() && size != 0)) {        throw new IllegalStateException(getClass().getName() + ".sizeOf() is reporting inconsistent results!");      }      if (size <= maxSize || map.isEmpty()) {        break;      }      Map.Entry<K,V> toEvict=map.entrySet().iterator().next();      key=toEvict.getKey();      value=toEvict.getValue();      map.remove(key);      size-=safeSizeOf(key,value);      evictionCount++;    }    entryRemoved(true,key,value,null);  }}  }
class C{  private boolean matchAtom(ContentType acceptedContentType){  String atomType=getAttribute("type");  String acceptedAtomType=acceptedContentType.getAttribute("type");  return atomType == null || acceptedAtomType == null || atomType.equals(acceptedAtomType);}  }
class C{  public static float calculateLeft(float top,float right,float bottom,float targetAspectRatio){  final float height=bottom - top;  final float left=right - (targetAspectRatio * height);  return left;}  }
class C{  public DevicePicker(Activity activity){  this.activity=activity;}  }
class C{  synchronized void removeNamingListener(NamingListener l){  if (debug)   System.err.println("EventSupport removing listener");  for (  NamingEventNotifier notifier : notifiers.values()) {    if (notifier != null) {      if (debug)       System.err.println("EventSupport removing listener from notifier");      notifier.removeNamingListener(l);      if (!notifier.hasNamingListeners()) {        if (debug)         System.err.println("EventSupport stopping notifier");        notifier.stop();        notifiers.remove(notifier.info);      }    }  }  if (debug)   System.err.println("EventSupport removing unsolicited: " + unsolicited);  if (unsolicited != null) {    unsolicited.removeElement(l);  }}  }
class C{  private void drawWidget(final PaintEvent e){  final Rectangle rect=getClientArea();  if (rect.width == 0 || rect.height == 0) {    return;  }  e.gc.setAdvanced(true);  e.gc.setAntialias(SWT.ON);  if (orientation == SWT.HORIZONTAL) {    drawHorizontalRangeSlider(e.gc);  } else {    drawVerticalRangeSlider(e.gc);  }}  }
class C{  private void doTestQuery(int cardinality,String[] fields) throws Exception {  String[] startOptions=new String[]{"(","["};  String[] endOptions=new String[]{")","]"};  Integer[] qRange=getRandomRange(cardinality,"id");  ModifiableSolrParams params=new ModifiableSolrParams();  params.set("q","id:[" + qRange[0] + " TO "+ qRange[1]+ "]");  params.set("facet","true");  params.set("rows","0");  String field=fields[random().nextInt(fields.length)];  if (random().nextBoolean()) {    params.set("facet.interval",field);  } else {    params.set("facet.interval",getFieldWithKey(field));  }  for (int i=0; i < 1 + random().nextInt(20); i++) {    Integer[] interval=getRandomRange(cardinality,field);    String open=startOptions[interval[0] % 2];    String close=endOptions[interval[1] % 2];    params.add("f." + field + ".facet.interval.set",open + interval[0] + ","+ interval[1]+ close);  }  query(params);}  }
class C{  public NBTTagCompound write(NBTTagCompound nbtTags){  nbtTags.setString("gasName",getName());  return nbtTags;}  }
class C{  public void loadAmmo(Entity shooter,FiringPlan plan){  if (shooter == null) {    return;  }  if (plan == null) {    return;  }  Targetable target=plan.getTarget();  for (  WeaponFireInfo info : plan) {    Mounted currentWeapon=info.getWeapon();    if (currentWeapon == null) {      continue;    }    WeaponType weaponType=(WeaponType)currentWeapon.getType();    if (AmmoType.T_NA == weaponType.getAmmoType()) {      continue;    }    Mounted mountedAmmo=getPreferredAmmo(shooter,target,weaponType);    if ((mountedAmmo != null) && !shooter.loadWeapon(currentWeapon,mountedAmmo)) {      owner.log(getClass(),"loadAmmo(Entity, Targetable)",LogLevel.WARNING,shooter.getDisplayName() + " tried to load " + currentWeapon.getName()+ " with ammo "+ mountedAmmo.getDesc()+ " but failed somehow.");    }    WeaponAttackAction action=info.getAction();    action.setAmmoId(shooter.getEquipmentNum(mountedAmmo));    info.setAction(action);    owner.sendAmmoChange(info.getShooter().getId(),shooter.getEquipmentNum(currentWeapon),shooter.getEquipmentNum(mountedAmmo));  }}  }
class C{  @After public void tearDown() throws Exception {  LoginActivity.setIdlingNotificationListener(null);  Espresso.unregisterIdlingResources(mCountingIdlingResourceListener.getCountingIdlingResource());  ActivityFinisher.finishOpenActivities();  letScreenOfTestDeviceTurnOff();  super.tearDown();}  }
class C{  public static void println(String prefix,String message){  System.err.println(prefix + ": " + message);}  }
class C{  public Boolean isDisabled(){  return disabled;}  }
class C{  public Bitmap put(String key,Bitmap value){  return cache.put(key,value);}  }
class C{  protected DebugMessageArgument(final DebugArgumentType type){  appendInt(type.getValue());}  }
class C{  @Override public void doInitialize(UimaContext aContext) throws ResourceInitializationException {  DB db=mongoResource.getDB();  entitiesCollection=db.getCollection(entitiesCollectionName);  relationsCollection=db.getCollection(relationsCollectionName);  documentsCollection=db.getCollection(documentsCollectionName);  documentsCollection.createIndex(new BasicDBObject(fields.getExternalId(),1));  entitiesCollection.createIndex(new BasicDBObject(fields.getExternalId(),1));  relationsCollection.createIndex(new BasicDBObject(fields.getExternalId(),1));  relationsCollection.createIndex(new BasicDBObject(FIELD_DOCUMENT_ID,1));  entitiesCollection.createIndex(new BasicDBObject(FIELD_DOCUMENT_ID,1));  stopFeatures=new HashSet<>();  stopFeatures.add("uima.cas.AnnotationBase:sofa");  stopFeatures.add("uk.gov.dstl.baleen.types.BaleenAnnotation:internalId");}  }
class C{  public void enableRowScaling(boolean enable){  mRowScaleEnabled=enable;}  }
class C{  static public String nfs(int num,int digits){  return (num < 0) ? nf(num,digits) : (' ' + nf(num,digits));}  }
class C{  public static LineCoverageTestFitness createLineTestFitness(String className,String method,Integer line){  return new LineCoverageTestFitness(className,method.substring(method.lastIndexOf(".") + 1),line);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private static boolean computeOverlap(IPath location1,IPath location2,boolean bothDirections){  IPath one=location1;  IPath two=location2;  if (!Workspace.caseSensitive) {    one=new Path(location1.toOSString().toLowerCase());    two=new Path(location2.toOSString().toLowerCase());  }  return one.isPrefixOf(two) || (bothDirections && two.isPrefixOf(one));}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){  if (row < dataset.getRowCount() - 1) {    return;  }  Comparable category=dataset.getColumnKey(column);  List values=createStackedValueList(dataset,dataset.getColumnKey(column),state.getVisibleSeriesArray(),getBase(),this.renderAsPercentages);  Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX(),dataArea.getY() + getYOffset(),dataArea.getWidth() - getXOffset(),dataArea.getHeight() - getYOffset());  PlotOrientation orientation=plot.getOrientation();  if (orientation == PlotOrientation.HORIZONTAL) {    drawStackHorizontal(values,category,g2,state,adjusted,plot,domainAxis,rangeAxis,dataset);  } else {    drawStackVertical(values,category,g2,state,adjusted,plot,domainAxis,rangeAxis,dataset);  }}  }
class C{  boolean isAnimating(){  return mTargetAlpha != mAlpha;}  }
class C{  @Override protected void initListeners(){}  }
class C{  public void ensureNotShared(){  if (_inputStart >= 0) {    unshare(16);  }}  }
class C{  public void addProcessAnnotation(final ProcessAnnotation anno){  if (anno == null) {    throw new IllegalArgumentException("anno must not be null!");  }  model.addProcessAnnotation(anno);  setSelected(anno);  fireProcessUpdate(anno);  model.fireAnnotationMoved(anno);}  }
class C{  public void deleteVideoSharing(String sharingId) throws RemoteException {  if (TextUtils.isEmpty(sharingId)) {    throw new ServerApiIllegalArgumentException("sharingId must not be null or empty!");  }  mRichcallService.tryToDeleteVideoSharing(sharingId);}  }
class C{  public void parse(InputSource is) throws IOException, SAXException {  if (is == null) {    throw new IllegalArgumentException("");  }  mInp=new Input(BUFFSIZE_READER);  mPh=PH_BEFORE_DOC;  try {    setinp(is);  } catch (  SAXException saxe) {    throw saxe;  }catch (  IOException ioe) {    throw ioe;  }catch (  RuntimeException rte) {    throw rte;  }catch (  Exception e) {    panic(e.toString());  }  parse();}  }
class C{  public static String toJSONString(Object value){  final StringWriter writer=new StringWriter();  try {    writeJSONString(value,writer);    return writer.toString();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean isSipURI(){  return true;}  }
class C{  private int[][] generateWorkingKey(byte[] key,boolean forEncryption){  int KC=key.length / 4;  int t;  if (((KC != 4) && (KC != 6) && (KC != 8)) || ((KC * 4) != key.length)) {    throw new IllegalArgumentException("Key length not 128/192/256 bits.");  }  ROUNDS=KC + 6;  int[][] W=new int[ROUNDS + 1][4];  t=0;  int i=0;  while (i < key.length) {    W[t >> 2][t & 3]=(key[i] & 0xff) | ((key[i + 1] & 0xff) << 8) | ((key[i + 2] & 0xff) << 16)| (key[i + 3] << 24);    i+=4;    t++;  }  int k=(ROUNDS + 1) << 2;  for (i=KC; (i < k); i++) {    int temp=W[(i - 1) >> 2][(i - 1) & 3];    if ((i % KC) == 0) {      temp=subWord(shift(temp,8)) ^ rcon[(i / KC) - 1];    } else     if ((KC > 6) && ((i % KC) == 4)) {      temp=subWord(temp);    }    W[i >> 2][i & 3]=W[(i - KC) >> 2][(i - KC) & 3] ^ temp;  }  if (!forEncryption) {    for (int j=1; j < ROUNDS; j++) {      for (i=0; i < 4; i++) {        W[j][i]=inv_mcol(W[j][i]);      }    }  }  return W;}  }
class C{  final void addRequestedBasicAttributes(BasicFileAttributes attrs,AttributesBuilder builder){  if (builder.match(SIZE_NAME))   builder.add(SIZE_NAME,attrs.size());  if (builder.match(CREATION_TIME_NAME))   builder.add(CREATION_TIME_NAME,attrs.creationTime());  if (builder.match(LAST_ACCESS_TIME_NAME))   builder.add(LAST_ACCESS_TIME_NAME,attrs.lastAccessTime());  if (builder.match(LAST_MODIFIED_TIME_NAME))   builder.add(LAST_MODIFIED_TIME_NAME,attrs.lastModifiedTime());  if (builder.match(FILE_KEY_NAME))   builder.add(FILE_KEY_NAME,attrs.fileKey());  if (builder.match(IS_DIRECTORY_NAME))   builder.add(IS_DIRECTORY_NAME,attrs.isDirectory());  if (builder.match(IS_REGULAR_FILE_NAME))   builder.add(IS_REGULAR_FILE_NAME,attrs.isRegularFile());  if (builder.match(IS_SYMBOLIC_LINK_NAME))   builder.add(IS_SYMBOLIC_LINK_NAME,attrs.isSymbolicLink());  if (builder.match(IS_OTHER_NAME))   builder.add(IS_OTHER_NAME,attrs.isOther());}  }
class C{  public void constValueIndex(double value) throws IOException {  constValueIndex('D',pool.addDoubleInfo(value));}  }
class C{  public CommandLine add(Map<String,String> options){  if (options != null && !options.isEmpty()) {    for (    Map.Entry<String,String> entry : options.entrySet()) {      addPair(entry.getKey(),entry.getValue());    }  }  return this;}  }
class C{  public static void CF9(double[] x,double[] f,double[] c,int nx){  int count1=0;  int count2=0;  int count3=0;  double sum1=0.0;  double sum2=0.0;  double sum3=0.0;  double yj;  double N=2.0;  double a=3.0;  for (int j=3; j <= nx; j++) {    yj=x[j - 1] - 2.0 * x[1] * Math.sin(2.0 * PI * x[0] + j * PI / nx);    if (j % 3 == 1) {      sum1+=yj * yj;      count1++;    } else     if (j % 3 == 2) {      sum2+=yj * yj;      count2++;    } else {      sum3+=yj * yj;      count3++;    }  }  f[0]=Math.cos(0.5 * PI * x[0]) * Math.cos(0.5 * PI * x[1]) + 2.0 * sum1 / (double)count1;  f[1]=Math.cos(0.5 * PI * x[0]) * Math.sin(0.5 * PI * x[1]) + 2.0 * sum2 / (double)count2;  f[2]=Math.sin(0.5 * PI * x[0]) + 2.0 * sum3 / (double)count3;  c[0]=(f[0] * f[0] + f[1] * f[1]) / (1 - f[2] * f[2]) - a * Math.sin(N * PI * ((f[0] * f[0] - f[1] * f[1]) / (1 - f[2] * f[2]) + 1.0)) - 1.0;}  }
class C{  public DataSourceScriptCommand(Configuration configuration,String resourcePath,DataSource dataSource,Collection<String> sharedLibraries){  super(configuration,resourcePath);  this.ds=dataSource;  this.sharedLibraries=sharedLibraries;}  }
class C{  protected AbstractCombinatorCondition(Condition c1,Condition c2){  firstCondition=c1;  secondCondition=c2;}  }
class C{  public void waitForArrival() throws InterruptedException {  hit.await();}  }
class C{  public String attr_current() throws IOException {  return read("attr/current");}  }
class C{  public void visitTypeInsn(int opcode,String type){  if (mv != null) {    mv.visitTypeInsn(opcode,type);  }}  }
class C{  public void testDoubleSignedZero() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new DoublePoint("value",+0d));  doc.add(new StoredField("value",+0d));  writer.addDocument(doc);  doc=new Document();  doc.add(new DoublePoint("value",-0d));  doc.add(new StoredField("value",-0d));  writer.addDocument(doc);  doc=new Document();  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.DOUBLE_POINT));  writer.close();  IndexSearcher searcher=newSearcher(ir,false);  Sort sort=new Sort(new SortField("value",SortField.Type.DOUBLE));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(2,td.totalHits);  double v0=searcher.doc(td.scoreDocs[0].doc).getField("value").numericValue().doubleValue();  double v1=searcher.doc(td.scoreDocs[1].doc).getField("value").numericValue().doubleValue();  assertEquals(0,v0,0d);  assertEquals(0,v1,0d);  assertEquals(1,Double.doubleToLongBits(v0) >>> 63);  assertEquals(0,Double.doubleToLongBits(v1) >>> 63);  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public String constantName(){  return constantName;}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  private DefaultMutableTreeNode removeParentFromView(Dn dn,int index,DefaultMutableTreeNode node){  if ((!node.isRoot()) && node.isLeaf() && (!(((XNodeInfo)node.getUserObject()).getType().equals(Type.MBEAN)))) {    DefaultMutableTreeNode parent=(DefaultMutableTreeNode)node.getParent();    removeChildNode(node);    String hashKey=dn.getHashKey(dn.getToken(index));    nodes.remove(hashKey);    removeParentFromView(dn,index + 1,parent);  }  return node;}  }
class C{  private void showMenu(MouseEvent e){  SearchResultMediator rp=getSelectedResultPanel();  if (rp != null) {    JPopupMenu menu=rp.createPopupMenu(new SearchResultDataLine[0]);    Point p=e.getPoint();    if (menu != null) {      try {        menu.show(MAIN_PANEL,p.x + 1,p.y - 6);      } catch (      IllegalComponentStateException icse) {      }    }  }}  }
class C{  @Override protected void finalize() throws Throwable {  try {    this.clear();  } catch (  Throwable e) {  }  super.finalize();}  }
class C{  @Override public <E>QueryResult<E> queryById(List<String> ids,EntityDefinition entityDefinition) throws IOException {  List<byte[]> rowkeys=new ArrayList<>(ids.size());  QueryResult<E> result=new QueryResult<E>();  for (  String id : ids)   rowkeys.add(EagleBase64Wrapper.decode(id));  RowKeyLogReader reader=null;  try {    reader=new RowKeyLogReader(entityDefinition,rowkeys,null);    reader.open();    List<TaggedLogAPIEntity> entities=new LinkedList<>();    while (true) {      InternalLog log=reader.read();      if (log == null)       break;      TaggedLogAPIEntity entity=HBaseInternalLogHelper.buildEntity(log,entityDefinition);      entities.add(entity);    }    result.setData((List<E>)entities);    result.setSuccess(true);    result.setSize(entities.size());    return result;  } catch (  Exception e) {    LOG.error(e.getMessage(),e);    throw new IOException(e);  } finally {    if (reader != null)     reader.close();  }}  }
class C{  protected void uploadAndRegisterTestData(String s3KeyPrefix) throws Exception {  uploadAndRegisterTestData(s3KeyPrefix,testManifestFiles);}  }
class C{  public boolean absolute(int rowNum) throws GenericEntityException {  if (closed)   throw new GenericResultSetClosedException("This EntityListIterator has been closed, this operation cannot be performed");  try {    if (rowNum == 0) {      resultSet.beforeFirst();      return true;    } else {      return resultSet.absolute(rowNum);    }  } catch (  SQLException e) {    if (!closed) {      this.close();      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GenericEntityException("Error setting the absolute index to " + rowNum,e);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void calculateAmounts(){  totalAmount=BigDecimal.ZERO;  for (  final ReceiptHeader receiptHeader : receiptHeaders) {    for (    final InstrumentHeader instrumentHeader : receiptHeader.getReceiptInstrument()) {      final String instrumentType=instrumentHeader.getInstrumentType().getType();      totalAmount=totalAmount.add(instrumentHeader.getInstrumentAmount()).setScale(2,BigDecimal.ROUND_HALF_UP);      BigDecimal instrumentAmount=instrumentWiseAmounts.get(instrumentType);      if (instrumentAmount == null)       instrumentAmount=instrumentHeader.getInstrumentAmount(); else       instrumentAmount=instrumentAmount.add(instrumentHeader.getInstrumentAmount());      instrumentWiseAmounts.put(instrumentType,instrumentAmount.setScale(2,BigDecimal.ROUND_HALF_UP));    }    receiptHeader.setInstrumentsAsString(receiptHeader.getInstrumentDetailAsString());  }}  }
class C{  private Matrix translationVector(Matrix R,Matrix mean1,Matrix mean2){  return mean2.transpose().minus(R.times(scaleFactor).times(mean1.transpose()));}  }
class C{  public ScriptedProblem(File file) throws ScriptException, IOException {  super();  BufferedReader reader=null;  try {    reader=new BufferedReader(new FileReader(file));    engine=newScriptEngine(file);    internalProblem=createInvocableInstance(reader);  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  public NotificationChain basicSetOwner(N4ClassifierDefinition newOwner,NotificationChain msgs){  msgs=eBasicSetContainer((InternalEObject)newOwner,N4JSPackage.N4_SETTER_DECLARATION__OWNER,msgs);  return msgs;}  }
class C{  public void balancedTree(Object[] tokens,Object[] vals,int lo,int hi,TernaryTreeNode root){  if (lo > hi)   return;  int mid=(lo + hi) / 2;  root=insert(root,(String)tokens[mid],vals[mid],0);  balancedTree(tokens,vals,lo,mid - 1,root);  balancedTree(tokens,vals,mid + 1,hi,root);}  }
class C{  public GridifyJobAdapter(GridifyArgument arg){  super(arg);}  }
class C{  public IntLazyValue(Collection<? super IntLazyValue> collection,IntSupplier supplier){  this.supplier=supplier;  collection.add(this);}  }
class C{  static void addBookmark(Context context,boolean showToast,String url,String name,Bitmap thumbnail,long parent){  ContentValues values=new ContentValues();  try {    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);    values.put(BrowserContract.Bookmarks.TITLE,name);    values.put(BrowserContract.Bookmarks.URL,url);    values.put(BrowserContract.Bookmarks.IS_FOLDER,0);    values.put(BrowserContract.Bookmarks.THUMBNAIL,bitmapToBytes(thumbnail));    values.put(BrowserContract.Bookmarks.PARENT,parent);    context.getContentResolver().insert(BrowserContract.Bookmarks.CONTENT_URI,values);  } catch (  IllegalStateException e) {    Log.e(LOGTAG,"addBookmark",e);  }  if (showToast) {    Toast.makeText(context,R.string.added_to_bookmarks,Toast.LENGTH_LONG).show();  }}  }
class C{  public OperationPendingException(String message,ReasonEnum reason,Object[] params){  super(message,params);  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  public void addNeighbor(Individual neighbor){  neighbors.add(neighbor);}  }
class C{  public boolean isSOTrx(){  Object oo=get_Value(COLUMNNAME_IsSOTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static Block createBlockWithHeight(final BlockHeight height){  final Account harvester=Utils.generateRandomAccount();  return new Block(harvester,DUMMY_PREVIOUS_HASH,DUMMY_GENERATION_HASH,new TimeInstant(7),height);}  }
class C{  public static boolean isSameDay(Date date1,Date date2){  if (date1 == null || date2 == null) {    throw new IllegalArgumentException("The date must not be null");  }  Calendar cal1=Calendar.getInstance();  cal1.setTime(date1);  Calendar cal2=Calendar.getInstance();  cal2.setTime(date2);  return isSameDay(cal1,cal2);}  }
class C{  public boolean isEnd(){  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:45.492 -0500",hash_original_method="877793596C03075095766EB10627CE12",hash_generated_method="5E593FA63C7CE6AD0FCAF97CBADB09C0") public GenericURI uriReference(boolean inBrackets) throws ParseException {  if (debug)   dbg_enter("uriReference");  GenericURI retval=null;  Token[] tokens=lexer.peekNextToken(2);  Token t1=(Token)tokens[0];  Token t2=(Token)tokens[1];  try {    if (t1.getTokenType() == TokenTypes.SIP || t1.getTokenType() == TokenTypes.SIPS) {      if (t2.getTokenType() == ':')       retval=sipURL(inBrackets); else       throw createParseException("Expecting \':\'");    } else     if (t1.getTokenType() == TokenTypes.TEL) {      if (t2.getTokenType() == ':') {        retval=telURL(inBrackets);      } else       throw createParseException("Expecting \':\'");    } else {      String urlString=uricString();      try {        retval=new GenericURI(urlString);      } catch (      ParseException ex) {        throw createParseException(ex.getMessage());      }    }  }  finally {    if (debug)     dbg_leave("uriReference");  }  return retval;}  }
class C{  @Override public synchronized int read() throws IOException {  ensureOpen();  while (mData.length == mIndex) {    if (!mParent.continueOperation(true,true)) {      return -1;    }  }  return (mData[mIndex++] & 0xFF);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  public void bindReverseWithModel(Object modelObject){  if (modelObject == null)   throw new IllegalArgumentException("The modelObject argument cannot be null.");  if (modelObject.getClass() != getModelObject().getClass())   throw new IllegalArgumentException("The model object type not is valid. Please pass an object of the same type that you passed on your Binder.Builder.");  int direction=this.builder.getBindDirectionReverse();  bind(direction,modelObject);}  }
class C{  protected void assureHashMapInitializedForLink(Id<Link> linkId){  if (!linkFacilityMapping.containsKey(linkId)) {    linkFacilityMapping.put(linkId,new ArrayList<ActivityFacilityImpl>());  }}  }
class C{  public static void createWaypoint(int markerNumber){  findMenuItem(trackListActivity.getString(R.string.menu_markers),true);  instrumentation.waitForIdleSync();  if (markerNumber > 0 && hasGpsSignal) {    SOLO.waitForText(WAYPOINT_NAME);    int actualMarkerNumber=SOLO.getCurrentViews(ListView.class).get(0).getCount();    Assert.assertEquals(markerNumber,actualMarkerNumber);  } else {    Log.d(TAG,"marker number, hasGpsSignal: " + markerNumber + ", "+ hasGpsSignal);    Assert.assertTrue(SOLO.waitForText(trackListActivity.getString(R.string.marker_list_empty_message)));  }  findMenuItem(trackListActivity.getString(R.string.menu_insert_marker),true);  enterTextAvoidSoftKeyBoard(0,WAYPOINT_NAME + (markerNumber + 1));  enterTextAvoidSoftKeyBoard(1,WAYPOINT_TYPE + (markerNumber + 1));  enterTextAvoidSoftKeyBoard(2,WAYPOINT_DESCRIPTION + (markerNumber + 1));  SOLO.clickOnButton(trackListActivity.getString(R.string.generic_add));  instrumentation.waitForIdleSync();  if (hasGpsSignal) {    Assert.assertTrue(SOLO.waitForText(WAYPOINT_NAME,1,LONG_WAIT_TIME,true));  } else {    Assert.assertFalse(SOLO.searchText(WAYPOINT_NAME));  }  SOLO.goBack();}  }
class C{  public boolean isRestoreSupported(){  return false;}  }
class C{  private String createEndMomentXml(){  return "</moment>";}  }
class C{  public boolean hasStatusText(){  return mStatusText != null;}  }
class C{  public Population postProcess(Population newpop,Population oldpop,EvolutionState state){  return newpop;}  }
class C{  protected void updateResultsTableName(ResultProducer rp) throws Exception {  if (!isConnected()) {    connectToDatabase();  }  if (!experimentIndexExists()) {    createExperimentIndex();  }  String tableName=getResultsTableName(rp);  if (tableName == null) {    tableName=createExperimentIndexEntry(rp);  }  if (!tableExists(tableName)) {    createResultsTable(rp,tableName);  }  m_ResultsTableName=tableName;}  }
class C{  public void stderrShouldNotContain(String notExpectedString){  if (stderr.contains(notExpectedString)) {    reportDiagnosticSummary();    throw new RuntimeException("'" + notExpectedString + "' found in stderr \n");  }}  }
class C{  public void removePositions(Collection<Integer> positions){  ArrayList<Integer> positionsList=new ArrayList<Integer>(positions);  Collections.sort(positionsList);  Collections.reverse(positionsList);  for (  int position : positionsList) {    mItems.remove(position);  }  notifyDataSetChanged();}  }
class C{  private void sendBroadcastDownloadFinished(DownloadFileOperation download,RemoteOperationResult downloadResult,String unlinkedFromRemotePath){  Intent end=new Intent(getDownloadFinishMessage());  end.putExtra(EXTRA_DOWNLOAD_RESULT,downloadResult.isSuccess());  end.putExtra(ACCOUNT_NAME,download.getAccount().name);  end.putExtra(EXTRA_REMOTE_PATH,download.getRemotePath());  end.putExtra(EXTRA_FILE_PATH,download.getSavePath());  if (unlinkedFromRemotePath != null) {    end.putExtra(EXTRA_LINKED_TO_PATH,unlinkedFromRemotePath);  }  sendStickyBroadcast(end);}  }
class C{  private boolean evaluateInheritance(@NonNull Class<?> original,@NonNull Class<?> classToCheck){  Validated validated=classToCheck.getAnnotation(Validated.class);  if (validated != null) {    Set<Class<?>> set=supportedClassesCache.get(original);    if (set == null) {      set=new HashSet<>();      supportedClassesCache.put(original,set);    }    set.add(classToCheck);    return true;  }  return traverseClassHierarchy(original,classToCheck);}  }
class C{  private void sendMessageToUI(String valuetosend,boolean clear){  if (mClients != null && mClients.size() > 0) {    for (int i=mClients.size() - 1; i >= 0; i--) {      try {        Message mSend=null;        if (clear) {          mSend=Message.obtain(null,MedtronicConstants.MSG_MEDTRONIC_CGM_CLEAR_DISPLAY);          mClients.get(i).send(mSend);          continue;        }        mSend=Message.obtain(null,MedtronicConstants.MSG_MEDTRONIC_CGM_MESSAGE_RECEIVED);        Bundle b=new Bundle();        b.putString("data",valuetosend);        mSend.setData(b);        mClients.get(i).send(mSend);      } catch (      RemoteException e) {        mClients.remove(i);      }    }  }}  }
class C{  @Override protected boolean singleUse(){  return true;}  }
class C{  public void paintScrollBarTrackBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  @Override protected Money handleTransactionThatIsOnTimePaymentOfInstallment(final LoanRepaymentScheduleInstallment currentInstallment,final LoanTransaction loanTransaction,final Money transactionAmountUnprocessed,final List<LoanTransactionToRepaymentScheduleMapping> transactionMappings){  final LocalDate transactionDate=loanTransaction.getTransactionDate();  final MonetaryCurrency currency=transactionAmountUnprocessed.getCurrency();  Money transactionAmountRemaining=transactionAmountUnprocessed;  Money principalPortion=Money.zero(transactionAmountRemaining.getCurrency());  Money interestPortion=Money.zero(transactionAmountRemaining.getCurrency());  Money feeChargesPortion=Money.zero(transactionAmountRemaining.getCurrency());  Money penaltyChargesPortion=Money.zero(transactionAmountRemaining.getCurrency());  if (loanTransaction.isChargesWaiver()) {    transactionAmountRemaining=Money.zero(currency);  } else   if (loanTransaction.isInterestWaiver()) {    interestPortion=currentInstallment.waiveInterestComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(interestPortion);    loanTransaction.updateComponents(principalPortion,interestPortion,feeChargesPortion,penaltyChargesPortion);  } else   if (loanTransaction.isChargePayment()) {    if (loanTransaction.isPenaltyPayment()) {      penaltyChargesPortion=currentInstallment.payPenaltyChargesComponent(transactionDate,transactionAmountRemaining);      transactionAmountRemaining=transactionAmountRemaining.minus(penaltyChargesPortion);    } else {      feeChargesPortion=currentInstallment.payFeeChargesComponent(transactionDate,transactionAmountRemaining);      transactionAmountRemaining=transactionAmountRemaining.minus(feeChargesPortion);    }    loanTransaction.updateComponents(principalPortion,interestPortion,feeChargesPortion,penaltyChargesPortion);  } else {    interestPortion=currentInstallment.payInterestComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(interestPortion);    principalPortion=currentInstallment.payPrincipalComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(principalPortion);    penaltyChargesPortion=currentInstallment.payPenaltyChargesComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(penaltyChargesPortion);    feeChargesPortion=currentInstallment.payFeeChargesComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(feeChargesPortion);    loanTransaction.updateComponents(principalPortion,interestPortion,feeChargesPortion,penaltyChargesPortion);  }  if (principalPortion.plus(interestPortion).plus(feeChargesPortion).plus(penaltyChargesPortion).isGreaterThanZero()) {    transactionMappings.add(LoanTransactionToRepaymentScheduleMapping.createFrom(currentInstallment,principalPortion,interestPortion,feeChargesPortion,penaltyChargesPortion));  }  return transactionAmountRemaining;}  }
class C{  protected boolean beforeDelete(){  return delete_Accounting("C_Withholding_Acct");}  }
class C{  private boolean dynInit(DataStatusEvent dse,String title){  if (dse.CreatedBy == null)   return false;  MUser user=MUser.get(Env.getCtx(),dse.CreatedBy.intValue());  m_info.append(" ").append(Msg.translate(Env.getCtx(),"CreatedBy")).append(": ").append(user.getName()).append(" - ").append(m_dateTimeFormat.format(dse.Created)).append("\n");  if (!dse.Created.equals(dse.Updated) || !dse.CreatedBy.equals(dse.UpdatedBy)) {    if (!dse.CreatedBy.equals(dse.UpdatedBy))     user=MUser.get(Env.getCtx(),dse.UpdatedBy.intValue());    m_info.append(" ").append(Msg.translate(Env.getCtx(),"UpdatedBy")).append(": ").append(user.getName()).append(" - ").append(m_dateTimeFormat.format(dse.Updated)).append("\n");  }  if (dse.Info != null && dse.Info.length() > 0)   m_info.append("\n (").append(dse.Info).append(")");  if (dse.AD_Table_ID != 0) {    MTable table1=MTable.get(Env.getCtx(),dse.AD_Table_ID);    setTitle(title + " - " + table1.getName());  }  if (!MRole.PREFERENCETYPE_Client.equals(MRole.getDefault().getPreferenceType()))   return false;  int Record_ID=0;  if (dse.Record_ID instanceof Integer)   Record_ID=((Integer)dse.Record_ID).intValue(); else   log.info("dynInit - Invalid Record_ID=" + dse.Record_ID);  if (Record_ID == 0)   return false;  String sql="SELECT AD_Column_ID, Updated, UpdatedBy, OldValue, NewValue " + "FROM AD_ChangeLog " + "WHERE AD_Table_ID=? AND Record_ID=? "+ "ORDER BY Updated DESC";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,dse.AD_Table_ID);    pstmt.setInt(2,Record_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      addLine(rs.getInt(1),rs.getTimestamp(2),rs.getInt(3),rs.getString(4),rs.getString(5));    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  Vector<String> columnNames=new Vector<String>();  columnNames.add(Msg.translate(Env.getCtx(),"Name"));  columnNames.add(Msg.translate(Env.getCtx(),"NewValue"));  columnNames.add(Msg.translate(Env.getCtx(),"OldValue"));  columnNames.add(Msg.translate(Env.getCtx(),"UpdatedBy"));  columnNames.add(Msg.translate(Env.getCtx(),"Updated"));  columnNames.add(Msg.translate(Env.getCtx(),"AD_Column_ID"));  DefaultTableModel model=new DefaultTableModel(m_data,columnNames);  table.setModel(model);  table.autoSize(false);  return true;}  }
class C{  HistoryEntryStats recordRegistrarHistory(String registrarName){  ImmutableList.Builder<String> clientIds=new ImmutableList.Builder<>();  for (int i=1; i <= 4; i++) {    clientIds.add(String.format("%s-%d",registrarName,i));  }  for (  HistoryEntry historyEntry : ofy().load().type(HistoryEntry.class).filter("clientId in",clientIds.build()).list()) {    try {      record(historyEntry);    } catch (    EppException e) {      throw new RuntimeException(e);    }  }  return this;}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    camera.autoFocus(autoFocusCallback);  }}  }
class C{  private void computeRange(int arc,int[][] est_heat){  double damage_by_bracket[]={0.0,0.0,0.0,0.0};  double heat_by_bracket[]={0,0,0,0};  long_range=MAX_RANGE - 1;  int bracket_start, bracket_end;  while ((damages[arc][long_range] == 0.0) && (long_range >= 4)) {    long_range--;  }  rd_bracket=long_range / 4;  long_range=3 * rd_bracket;  bracket_start=0;  bracket_end=rd_bracket;  for (int cur_bracket=RANGE_SHORT; cur_bracket <= RANGE_LONG; cur_bracket++) {switch (cur_bracket) {case RANGE_SHORT:      bracket_start=(entity instanceof Infantry ? 0 : 1);    bracket_end=rd_bracket;  break;case RANGE_MEDIUM:bracket_start=rd_bracket + 1;bracket_end=2 * rd_bracket;break;case RANGE_LONG:bracket_start=(2 * rd_bracket) + 1;bracket_end=Math.min(long_range,MAX_RANGE - 1);break;}for (int cur_range=bracket_start; cur_range <= bracket_end; cur_range++) {damage_by_bracket[cur_bracket]+=damages[arc][cur_range];damage_by_bracket[RANGE_ALL]+=damages[arc][cur_range];heat_by_bracket[cur_bracket]+=est_heat[arc][cur_range];heat_by_bracket[RANGE_ALL]+=est_heat[arc][cur_range];}}for (int cur_range=RANGE_SHORT; cur_range <= RANGE_LONG; cur_range++) {if ((damages[arc][0] != 0.0) && (cur_range == RANGE_SHORT)) {damage_by_bracket[cur_range]/=(rd_bracket + 1);heat_by_bracket[cur_range]/=(rd_bracket + 1);} else {damage_by_bracket[cur_range]/=rd_bracket;heat_by_bracket[cur_range]/=rd_bracket;}}damage_by_bracket[RANGE_ALL]/=long_range;heat_by_bracket[RANGE_ALL]/=long_range;range_damages=damage_by_bracket;for (int cur_bracket=RANGE_SHORT; cur_bracket <= RANGE_ALL; cur_bracket++) {heat_estimates[cur_bracket]=(int)heat_by_bracket[cur_bracket];}range=RANGE_SHORT;for (int cur_bracket=RANGE_SHORT; cur_bracket <= RANGE_ALL; cur_bracket++) {if (range_damages[cur_bracket] > range_damages[range]) {range=cur_bracket;}}heat_at_range=heat_estimates[range];}  }
class C{  private void fillBySlotSource(final RPAction action){  findSlotByObjectIdAndSlotName(action,EquipActionConsts.TARGET_OBJECT,EquipActionConsts.TARGET_SLOT);  RPObject.ID itemId=new RPObject.ID(action.getInt(EquipActionConsts.BASE_ITEM),"");  item=(Item)slot.get(itemId);}  }
class C{  static int newVecInsertPos(int oldPos,Vector<Insertion> vec){  return innerNewVecInsertPos(oldPos,0,vec);}  }
class C{  private void removeSelectedItems(TableViewer viewer){  IObservableList list=((IObservableList)viewer.getInput());  list.removeAll(viewer.getStructuredSelection().toList());}  }
class C{  public static boolean putInt(Context context,String key,int value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putInt(key,value);  return editor.commit();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public String toString(){  return temporal.toString();}  }
class C{  RandomGen random(){  return random;}  }
class C{  @Override public void goingInactive(){  if (log.isDebugEnabled()) {    log.debug("Allocated OBlock \"" + getSystemName() + "\" goes UNOCCUPIED. from state= "+ getState());  }  setState((getState() & ~(OCCUPIED | RUNNING)) | UNOCCUPIED);  setValue(null);  if (_warrant != null) {    ThreadingUtil.runOnLayout(null);  }}  }
class C{  private void adjustWindowSize(ContainerWrapper parent){  BoundSize wBounds=lc.getPackWidth();  BoundSize hBounds=lc.getPackHeight();  if (wBounds == null && hBounds == null)   return;  Window win=((Window)SwingUtilities.getAncestorOfClass(Window.class,(Component)parent.getComponent()));  if (win == null)   return;  Dimension prefSize=win.getPreferredSize();  int targW=constrain(checkParent(win),win.getWidth(),prefSize.width,wBounds);  int targH=constrain(checkParent(win),win.getHeight(),prefSize.height,hBounds);  int x=Math.round(win.getX() - ((targW - win.getWidth()) * (1 - lc.getPackWidthAlign())));  int y=Math.round(win.getY() - ((targH - win.getHeight()) * (1 - lc.getPackHeightAlign())));  win.setBounds(x,y,targW,targH);}  }
class C{  @Bean @ConditionalOnMissingBean(CacheStrategy.class) @Order(-90) <K,V>CacheStrategy<K,V> defaultCacheStrategy(){  LOGGER.debug("Creating cache strategy 'LruMemoryCacheStrategy'");  return new LruMemoryCacheStrategy<K,V>();}  }
class C{  public void addEntry(S source,S target){  this.entryData.add(new EntryData<S,E>(source,target));}  }
class C{  public void reset(){  lastMemoryRequest.clear();}  }
class C{  public void initializeScenePrefs(ScenePreferences prefs){  if (null == prefs) {    return;  }  setCameraPosition(prefs.getCameraPos());  setCameraDirection(prefs.getCameraDir());  glPanel.clearChanges();}  }
class C{  public static List<AuditDto> transformToDto(List<Audit> audits){  if (audits == null) {    throw new WebApplicationException("Null entity object cannot be converted to Dto object.",Status.INTERNAL_SERVER_ERROR);  }  List<AuditDto> result=new ArrayList<AuditDto>();  for (  Audit audit : audits) {    result.add(transformToDto(audit));  }  return result;}  }
class C{  private void separateFromNextPeer(CacheDataPage cacheDataPage) throws IOException {  DataPageMain dpMain=cacheDataPage._main;  setModified(cacheDataPage);  DataPageMain nextMain=dpMain.getNextPage();  setModified(new CacheDataPage(nextMain));  nextMain._prevPageNumber=INVALID_INDEX_PAGE_NUMBER;  dpMain._nextPageNumber=INVALID_INDEX_PAGE_NUMBER;}  }
class C{  public static InjectorBuilder create(final WroManagerFactory managerFactory){  return new InjectorBuilder(managerFactory);}  }
class C{  public boolean engineIsKeyEntry(String alias){  Entry entry=entries.get(alias.toLowerCase(Locale.ENGLISH));  if (entry != null && entry instanceof KeyEntry) {    return true;  } else {    return false;  }}  }
class C{  public boolean displayWarning(BugInstance bugInstance){  int priority=bugInstance.getPriority();  if (priority > getMinPriorityAsInt()) {    return false;  }  int rank=bugInstance.getBugRank();  if (rank > getMinRank()) {    return false;  }  BugPattern bugPattern=bugInstance.getBugPattern();  if (!containsCategory(bugPattern.getCategory())) {    return false;  }  if (!displayFalseWarnings) {    boolean isFalseWarning=!Boolean.valueOf(bugInstance.getProperty(BugProperty.IS_BUG,"true")).booleanValue();    if (isFalseWarning) {      return false;    }  }  return true;}  }
class C{  public boolean removeProxyFromMap(ObjectName objectName,RegionMXBean proxy,FederationComponent oldState){  mapOfProxy.remove(objectName);  setSize=mapOfProxy.keySet().size();  if (setSize == 0) {    return true;  }  updateRegion(null,oldState);  return false;}  }
class C{  private void initBPInvoiceDetails(int C_BPartner_ID){  log.config("C_BPartner_ID" + C_BPartner_ID);  invoiceField.removeActionListener(this);  invoiceField.removeAllItems();  KeyNamePair pp=new KeyNamePair(0,"");  invoiceField.addItem(pp);  ArrayList<KeyNamePair> list=loadInvoiceData(C_BPartner_ID);  for (  KeyNamePair knp : list)   invoiceField.addItem(knp);  invoiceField.setSelectedIndex(0);  invoiceField.addActionListener(this);  upcField.addValueChangeListener(this);}  }
class C{  private boolean doOneRound(){  if (round == MAX_ROUNDS && egressTimes != null)   touchedPatterns.and(patternsNearDestination);  for (int patIdx=touchedPatterns.nextSetBit(0); patIdx >= 0; patIdx=touchedPatterns.nextSetBit(patIdx + 1)) {    Map<StatePatternKey,McRaptorState> statesPerPatternSequence=new HashMap<>();    TObjectIntMap<StatePatternKey> tripsPerPatternSequence=new TObjectIntHashMap<>();    TObjectIntMap<StatePatternKey> boardTimesPerPatternSequence=new TObjectIntHashMap<>();    TObjectIntMap<StatePatternKey> boardStopsPositionsPerPatternSequence=new TObjectIntHashMap<>();    TripPattern pattern=network.transitLayer.tripPatterns.get(patIdx);    RouteInfo routeInfo=network.transitLayer.routes.get(pattern.routeIndex);    TransitModes mode=TransitLayer.getTransitModes(routeInfo.route_type);    if (!pattern.servicesActive.intersects(servicesActive) || !request.transitModes.contains(mode)) {      continue;    }    for (int stopPositionInPattern=0; stopPositionInPattern < pattern.stops.length; stopPositionInPattern++) {      int stop=pattern.stops[stopPositionInPattern];      if (request.wheelchair) {        if (!network.transitLayer.stopsWheelchair.get(stop)) {          continue;        }      }      boolean stopPreviouslyReached=bestStates.containsKey(stop);      for (      Map.Entry<StatePatternKey,McRaptorState> e : statesPerPatternSequence.entrySet()) {        int trip=tripsPerPatternSequence.get(e.getKey());        TripSchedule sched=pattern.tripSchedules.get(trip);        int boardStopPositionInPattern=boardStopsPositionsPerPatternSequence.get(e.getKey());        int arrival;        if (sched.headwaySeconds != null) {          int travelTimeToStop=sched.arrivals[stopPositionInPattern] - sched.departures[boardStopPositionInPattern];          arrival=boardTimesPerPatternSequence.get(e.getKey()) + travelTimeToStop;        } else {          arrival=sched.arrivals[stopPositionInPattern];        }        if (addState(stop,boardStopPositionInPattern,stopPositionInPattern,arrival,patIdx,trip,e.getValue()))         touchedStops.set(stop);      }      if (stopPreviouslyReached) {        STATES:         for (        McRaptorState state : bestStates.get(stop).getBestStates()) {          if (state.round != round - 1)           continue;          int prevPattern=state.pattern;          if (prevPattern == -1 && state.back != null)           prevPattern=state.back.pattern;          if (prevPattern == patIdx)           continue;          if (pattern.hasFrequencies && pattern.hasSchedules) {            throw new IllegalStateException("McRAPTOR router does not support frequencies and schedules in the same trip pattern!");          }          int currentTrip=-1;          StatePatternKey spk=new StatePatternKey(state);          if (pattern.hasSchedules) {            for (            TripSchedule tripSchedule : pattern.tripSchedules) {              currentTrip++;              if (!servicesActive.get(tripSchedule.serviceCode) || (request.wheelchair && !tripSchedule.getFlag(TripFlag.WHEELCHAIR))) {                continue;              }              int departure=tripSchedule.departures[stopPositionInPattern];              if (departure > state.time + BOARD_SLACK) {                if (!statesPerPatternSequence.containsKey(spk) || tripsPerPatternSequence.get(spk) > currentTrip) {                  statesPerPatternSequence.put(spk,state);                  tripsPerPatternSequence.put(spk,currentTrip);                  boardTimesPerPatternSequence.put(spk,departure);                  boardStopsPositionsPerPatternSequence.put(spk,stopPositionInPattern);                }                break;              }            }          } else           if (pattern.hasFrequencies) {            currentTrip++;            for (            TripSchedule tripSchedule : pattern.tripSchedules) {              if (!servicesActive.get(tripSchedule.serviceCode) || (request.wheelchair && !tripSchedule.getFlag(TripFlag.WHEELCHAIR))) {                continue;              }              int earliestPossibleBoardTime=state.time + BOARD_SLACK;              for (int frequencyEntry=0; frequencyEntry < tripSchedule.startTimes.length; frequencyEntry++) {                int departure=tripSchedule.startTimes[frequencyEntry] + offsets.offsets.get(patIdx)[currentTrip][frequencyEntry] + tripSchedule.departures[stopPositionInPattern];                int latestDeparture=tripSchedule.endTimes[frequencyEntry] + tripSchedule.departures[stopPositionInPattern];                if (earliestPossibleBoardTime > latestDeparture)                 continue;                while (departure < earliestPossibleBoardTime)                 departure+=tripSchedule.headwaySeconds[frequencyEntry];                if (departure > latestDeparture)                 continue;                if (!statesPerPatternSequence.containsKey(spk) || boardTimesPerPatternSequence.get(spk) > departure) {                  statesPerPatternSequence.put(spk,state);                  tripsPerPatternSequence.put(spk,currentTrip);                  boardTimesPerPatternSequence.put(spk,departure);                  boardStopsPositionsPerPatternSequence.put(spk,stopPositionInPattern);                }              }            }          }        }      }    }  }  doTransfers();  markPatterns();  round++;  return !touchedPatterns.isEmpty();}  }
class C{  private static int hash(int x,int y,int z){  int hash=HASH_SEED;  hash+=x;  hash*=HASH_SEED;  hash+=y;  hash*=HASH_SEED;  hash+=z;  hash*=HASH_SEED;  return hash;}  }
class C{  public static void assertEntryAbsent(SynonymMap synonynMap,String word) throws IOException {  word=word.replace(' ',SynonymMap.WORD_SEPARATOR);  BytesRef value=Util.get(synonynMap.fst,Util.toUTF32(new CharsRef(word),new IntsRefBuilder()));  assertNull("There should be no synonyms for: " + word,value);}  }
class C{  public VarInfo resolvePhiVariableValues(){  return null;}  }
class C{  public static final TColor newHSV(float h,float s,float v){  return newHSVA(h,s,v,1);}  }
class C{  public static ArrayDeque<EventTypeIndexBuilderIndexLookupablePair>[] add(FilterValueSet filterValueSet,FilterHandle filterCallback,FilterHandleSetNode topNode,FilterServiceGranularLockFactory lockFactory){  if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {    log.debug(".add (" + Thread.currentThread().getId() + ") Adding filter callback, "+ "  topNode="+ topNode+ "  filterCallback="+ filterCallback);  }  ArrayDeque<EventTypeIndexBuilderIndexLookupablePair>[] treePathInfo;  if (filterValueSet.getParameters().length == 0) {    treePathInfo=allocateTreePath(1);    treePathInfo[0]=new ArrayDeque<EventTypeIndexBuilderIndexLookupablePair>(1);    addToNode(new ArrayDeque<FilterValueSetParam>(1),filterCallback,topNode,treePathInfo[0],lockFactory);  } else {    treePathInfo=allocateTreePath(filterValueSet.getParameters().length);    ArrayDeque<FilterValueSetParam> remainingParameters=new ArrayDeque<FilterValueSetParam>(4);    for (int i=0; i < filterValueSet.getParameters().length; i++) {      treePathInfo[i]=new ArrayDeque<EventTypeIndexBuilderIndexLookupablePair>(filterValueSet.getParameters()[i].length);      remainingParameters.clear();      Collections.addAll(remainingParameters,filterValueSet.getParameters()[i]);      addToNode(remainingParameters,filterCallback,topNode,treePathInfo[i],lockFactory);    }  }  return treePathInfo;}  }
class C{  @SuppressWarnings("unchecked") public static <T>T instance(String className){  return (T)instance(toClass(className));}  }
class C{  public void openChat() throws RcsGenericException {  try {    mOneToOneChatInf.openChat();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  public static JPanel grid(int cols,JComponent... components){  final JPanel out=new JPanel();  out.setLayout(new GridLayout(components.length / cols + 1,cols));  for (  JComponent component : components) {    out.add(component);  }  return out;}  }
class C{  @Override public void useDefaultVisual(){  m_visual.loadIcons(BeanVisual.ICON_PATH + "DefaultText.gif",BeanVisual.ICON_PATH + "DefaultText_animated.gif");}  }
class C{  public static boolean isLessEqual(Date d1,Date d2){  return isEqual(d1,d2) || d1 != null && d1.compareTo(d2) < 0;}  }
class C{  public static String hex(int i){  return Hex.encodeString(Ints.toByteArray(i));}  }
class C{  @Override public void logError(CacheErrorCategory category,Class<?> clazz,String message,@Nullable Throwable throwable){}  }
class C{  static void reverse(StringBuffer result,int from,int to){  int i=from;  char swap;  int j=to - 1;  while (i < j) {    swap=result.charAt(i);    result.setCharAt(i,result.charAt(j));    result.setCharAt(j,swap);    i++;    j--;  }}  }
class C{  public void writeGraphic(final String filename,final String legMode){  try {    ChartUtilities.saveChartAsPNG(new File(filename),getGraphic(legMode),1024,768);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  @Override protected void onStop(){  if (null != mDownloaderClientStub) {    mDownloaderClientStub.disconnect(this);  }  super.onStop();}  }
class C{  public void cleanupTabs(){  mStackTabs=null;  resetInputActionIndices();}  }
class C{  public static RegionSubRegionSizeRequest create(){  RegionSubRegionSizeRequest m=new RegionSubRegionSizeRequest();  return m;}  }
class C{  @MediumTest public void testSubLaunch(){  Forwarding activity=startActivity(mStartIntent,null,null);  mButton=(Button)activity.findViewById(R.id.go);  mButton.performClick();  assertNotNull(getStartedActivityIntent());  assertTrue(isFinishCalled());}  }
class C{  private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){  try {    PackageManager pm=context.getPackageManager();    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);    if (handlers == null || handlers.size() == 0) {      return false;    }    for (    ResolveInfo resolveInfo : handlers) {      IntentFilter filter=resolveInfo.filter;      if (filter == null)       continue;      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;      if (resolveInfo.activityInfo == null)       continue;      return true;    }  } catch (  RuntimeException e) {    Log.e(TAG,"Runtime exception while getting specialized handlers");  }  return false;}  }
class C{  public Fraction(int num,int den){  if (den == 0) {    throw MathRuntimeException.createArithmeticException("zero denominator in fraction {0}/{1}",num,den);  }  if (den < 0) {    if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) {      throw MathRuntimeException.createArithmeticException("overflow in fraction {0}/{1}, cannot negate",num,den);    }    num=-num;    den=-den;  }  final int d=MathUtils.gcd(num,den);  if (d > 1) {    num/=d;    den/=d;  }  if (den < 0) {    num=-num;    den=-den;  }  this.numerator=num;  this.denominator=den;}  }
class C{  public synchronized void updateObject(int columnIndex,Object x,SQLType targetSqlType) throws SQLException {  super.updateObjectInternal(columnIndex,JDBC42Helper.convertJavaTimeToJavaSql(x),translateAndCheckSqlType(targetSqlType),0);}  }
class C{  @Override public void deleteAll(DBIDs ids){  throw new NotImplementedException();}  }
class C{  public static void addFlag(Vector options,String text,String flag){  options.add(new Option("\t" + text,flag,0,"-" + flag));}  }
class C{  private String[] parseCommand(String command){  if (command.startsWith("create")) {    return command.trim().split(" ",4);  } else   if (command.startsWith("upload")) {    return command.trim().split(" ",4);  }  return command.trim().split(" ");}  }
class C{  public void testAscii() throws Exception {  String str="AbCdEfGhIjKlMnOpQrStUvWxYzX";  ByteArrayInputStream aa=new ByteArrayInputStream(str.getBytes("ISO8859_1"));  InputStreamReader a=new InputStreamReader(aa,"ISO8859_1");  try {    int x=a.read();    assertEquals('A',x);    char[] c=new char[26];    x=a.read(c,0,26);    assertEquals("ISO-8859-1",a.getEncoding());    assertEquals(26,x);    assertEquals("bCdEfGhIjKlMnOpQrStUvWxYzX",String.valueOf(c));  }  finally {    a.close();  }}  }
class C{  public static String gensalt(int log_rounds){  return gensalt(log_rounds,new SecureRandom());}  }
class C{  protected void init(){  LOG.info("Initializing sound service.");  long startTime=System.currentTimeMillis();  bughouseSoundKeys=getSoundsKeys("bughouse");  soundKeys=getSoundsKeys("");  initSoundPlayer();  initSpeech();  LOG.info("Initializing sound service complete: " + (System.currentTimeMillis() - startTime) + "ms");}  }
class C{  @LargeTest public void testNotIncluded() throws Exception {  final String MARK_NONSPACING="a\u030A";  final String PUNCTUATION_OPEN_CLOSE="(c)";  final String PUNCTUATION_DASH="non-fiction";  final String PUNCTUATION_OTHER="b&b";  final String SYMBOL_OTHER="Android\u00AE";  final String SEPARATOR_SPACE="one two";  verifyWordLimits(MARK_NONSPACING,1,0,1);  verifyWordLimits(PUNCTUATION_OPEN_CLOSE,1,1,2);  verifyWordLimits(PUNCTUATION_DASH,3,0,3);  verifyWordLimits(PUNCTUATION_DASH,4,4,11);  verifyWordLimits(PUNCTUATION_OTHER,0,0,1);  verifyWordLimits(PUNCTUATION_OTHER,1,0,1);  verifyWordLimits(PUNCTUATION_OTHER,2,0,3);  verifyWordLimits(PUNCTUATION_OTHER,3,2,3);  verifyWordLimits(SYMBOL_OTHER,7,0,7);  verifyWordLimits(SYMBOL_OTHER,8,-1,-1);  verifyWordLimits(SEPARATOR_SPACE,1,0,3);}  }
class C{  private boolean refreshChildPadding(int i,ChildDrawable r){  if (r.mDrawable != null) {    final Rect rect=mTmpRect;    r.mDrawable.getPadding(rect);    if (rect.left != mPaddingL[i] || rect.top != mPaddingT[i] || rect.right != mPaddingR[i] || rect.bottom != mPaddingB[i]) {      mPaddingL[i]=rect.left;      mPaddingT[i]=rect.top;      mPaddingR[i]=rect.right;      mPaddingB[i]=rect.bottom;      return true;    }  }  return false;}  }
class C{  public CustomAttribute(int scope){  if (scope != SCOPE_ENVIRONMENT && scope != SCOPE_TEMPLATE && scope != SCOPE_CONFIGURATION) {    throw new IllegalArgumentException();  }  this.scope=scope;}  }
class C{  public String toReadableString(String className){  return className + "#" + mName+ "("+ convertParamList(mParamList)+ ")";}  }
class C{  public static boolean isSOTrx(Properties ctx){  String s=getContext(ctx,"IsSOTrx");  if (s != null && s.equals("N"))   return false;  return true;}  }
class C{  private void parseLine(int lineNumber){  LineInfo info=lineInfo.get(lineNumber);  ParseResult prOld=info.pr;  String lastLabel=getLastLabel(lineNumber);  int oldLabelType=0;  if ((prOld != null) && (prOld.label != null)) {    oldLabelType=getLabelType(prOld.label);  }  int oldLastLabelType=0;  if (lastLabel != null) {    oldLastLabelType=getLabelType(lastLabel);  }  Element lineElement=getLineElementByNumber(lineNumber);  int startOffset=lineElement.getStartOffset();  String line=getTextToOffset(startOffset,lineElement.getEndOffset());  ParseResult prNew=document.parser.parse(line,lastLabel);  if ((lastLabel != null) && (prNew.mnemo != null)) {    int newLastLabelType=getLabelType(lastLabel);    if ((newLastLabelType != oldLastLabelType) || (newLastLabelType == 3)) {      LineInfo definingLine=labelDefinitions.get(lastLabel);      int defLineNum=getLineNumberByLineInfo(definingLine);      Element defLineElem=getLineElementByNumber(defLineNum);      String defLine=getTextToOffset(defLineElem.getStartOffset(),defLineElem.getEndOffset());      highlight(defLineNum,defLine,defLineElem.getStartOffset());      toDoList.addAll(labelUses.get(lastLabel));      toDoList.addAll(errorLines);    }  }  if (prOld != null) {    if (prOld.label != null) {      if (!prOld.label.equals(prNew.label)) {        if (labelDefinitions.get(prOld.label) == info) {          labelDefinitions.remove(prOld.label);        }        toDoList.addAll(labelUses.get(prOld.label));        document.data.unregisterConstant(prOld.label);        document.data.unregisterVariable(prOld.label);        toDoList.addAll(errorLines);      }      int newLabelType=getLabelType(prNew.label);      if ((newLabelType != oldLabelType) || (newLabelType == 3)) {        toDoList.addAll(labelUses.get(prOld.label));      }    }    for (    String label : prOld.usedLabels) {      if (!prNew.usedLabels.contains(label)) {        labelUses.get(label).remove(info);      }    }    for (    String label : prNew.usedLabels) {      if (!prOld.usedLabels.contains(label)) {        labelUses.get(label).add(info);      }    }  } else {    for (    String label : prNew.usedLabels) {      labelUses.get(label).add(info);    }  }  if (prNew.label != null) {    LineInfo existingDefinition=labelDefinitions.get(prNew.label);    if ((existingDefinition != null) && (existingDefinition != info)) {      prNew.error=new ParseError(prNew.originalLine,prNew.label,0,"Label already defined in line " + getLineNumberByLineInfo(existingDefinition));    } else {      labelDefinitions.put(prNew.label,info);      if (!labelUses.containsKey(prNew.label)) {        labelUses.put(prNew.label,new HashSet<LineInfo>());      }      int newLabelType=getLabelType(prNew.label);      if (newLabelType != oldLabelType) {        toDoList.addAll(errorLines);      }      if (newLabelType == 3) {        toDoList.addAll(labelUses.get(prNew.label));      }    }  }  if (prNew.error != null) {    errorLines.add(info);  } else {    errorLines.remove(info);  }  info.pr=prNew;  highlight(lineNumber,line,startOffset);  document.parsingDone(lineNumber,prNew.mnemo,prNew.error);  toDoList.remove(info);}  }
class C{  @Override public Dimension minimumLayoutSize(Container parent){  ComponentOperation.SizeCalculator calculator=new ComponentOperation.SizeCalculator(SizeProperty.MINIMUM_SIZE);  withAllVisibleDo(parent,calculator);  OrientedDimensionSum result=calculator.getSum();  result.addInsets(parent.getInsets());  return result.getSum();}  }
class C{  public Breakpoint(String templateName,int line){  this.templateName=templateName;  this.line=line;}  }
class C{  private void sendMessage(String text){  if (text.equals("")) {    return;  }  if (!server.isConnected()) {    Message message=new Message(getString(R.string.message_not_connected));    message.setColor(Message.COLOR_RED);    message.setIcon(R.drawable.error);    server.getConversation(server.getSelectedConversation()).addMessage(message);    onConversationMessage(server.getSelectedConversation());  }  scrollback.addMessage(text);  Conversation conversation=pagerAdapter.getItem(pager.getCurrentItem());  if (conversation != null) {    if (!text.trim().startsWith("/")) {      if (conversation.getType() != Conversation.TYPE_SERVER) {        String nickname=binder.getService().getConnection(serverId).getNick();        conversation.addMessage(new Message(" " + nickname + " - "+ text));        binder.getService().getConnection(serverId).sendMessage(conversation.getName(),text);      } else {        Message message=new Message(getString(R.string.chat_only_form_channel));        message.setColor(Message.COLOR_YELLOW);        message.setIcon(R.drawable.warning);        conversation.addMessage(message);      }      onConversationMessage(conversation.getName());    } else {      CommandParser.getInstance().parse(text,server,conversation,binder.getService());    }  }}  }
class C{  @Nullable public RunnerAndConfigurationSettings findExisting(){  if (myExistingConfiguration != null)   return myExistingConfiguration.get();  myExistingConfiguration=new Ref<RunnerAndConfigurationSettings>();  if (myLocation == null) {    return null;  }  final PsiElement psiElement=myLocation.getPsiElement();  if (!psiElement.isValid()) {    return null;  }  final List<RuntimeConfigurationProducer> producers=findPreferredProducers();  if (myRuntimeConfiguration != null) {    if (producers != null) {      for (      RuntimeConfigurationProducer producer : producers) {        final RunnerAndConfigurationSettings configuration=producer.findExistingConfiguration(myLocation,this);        if (configuration != null && configuration.getConfiguration() == myRuntimeConfiguration) {          myExistingConfiguration.set(configuration);        }      }    }    for (    RunConfigurationProducer producer : RunConfigurationProducer.getProducers(getProject())) {      RunnerAndConfigurationSettings configuration=producer.findExistingConfiguration(this);      if (configuration != null && configuration.getConfiguration() == myRuntimeConfiguration) {        myExistingConfiguration.set(configuration);      }    }  }  if (producers != null) {    for (    RuntimeConfigurationProducer producer : producers) {      final RunnerAndConfigurationSettings configuration=producer.findExistingConfiguration(myLocation,this);      if (configuration != null) {        myExistingConfiguration.set(configuration);      }    }  }  for (  RunConfigurationProducer producer : RunConfigurationProducer.getProducers(getProject())) {    RunnerAndConfigurationSettings configuration=producer.findExistingConfiguration(this);    if (configuration != null) {      myExistingConfiguration.set(configuration);    }  }  return myExistingConfiguration.get();}  }
class C{  public void mapDatasetToRangeAxes(int index,List axisIndices){  ParamChecks.requireNonNegative(index,"index");  checkAxisIndices(axisIndices);  Integer key=new Integer(index);  this.datasetToRangeAxesMap.put(key,new ArrayList(axisIndices));  datasetChanged(new DatasetChangeEvent(this,getDataset(index)));}  }
class C{  public void testIndexContainsUncommitted(){  OffsetIndex index=new DelegatingOffsetIndex(HeapBuffer.allocate(1024 * 8));  assertFalse(index.contains(1));  index.index(0,1234);  index.index(1,2345);  index.index(2,3456);  assertTrue(index.contains(1));  assertFalse(index.contains(4));}  }
class C{  private void init(){  if (!Annotation.isInheritedMapped(configuredClass))   Error.classNotMapped(configuredClass);  for (  Class<?> classe : getClasses()) {    relationalManyToOneMapper.put(classe.getName(),new JMapper(configuredClass,classe,ChooseConfig.DESTINATION));    relationalOneToManyMapper.put(classe.getName(),new JMapper(classe,configuredClass,ChooseConfig.SOURCE));  }}  }
class C{  protected void moveTo(KMLAbstractFeature feature){  KMLViewController viewController=KMLViewController.create(this.wwd);  if (viewController == null)   return;  viewController.goTo(feature);}  }
class C{  public final int countWaypoints(final long session){  final Cursor cursor=contentResolver.query(ContentUris.withAppendedId(Uri.withAppendedPath(ContentProvider.CONTENT_URI_POSITION,ContentProvider.CONTENT_URI_SESSION_SUFFIX),session),new String[]{Schema.COL_ID},null,null,null);  final int count=cursor.getCount();  cursor.close();  return count;}  }
class C{  public LayerGraphicWarehouseSupport(){  initDrawingAttributes();  graphics=new OMGraphicList();  graphics.setTraverseMode(OMGraphicList.LAST_ADDED_ON_TOP);}  }
class C{  public boolean containsVirtualPoolResource(String computeVirtualPoolId){  for (  RelatedResourceRep vpoolListResource : getComputeVirtualPool()) {    URI vpoolListResourceId=vpoolListResource.getId();    if ((vpoolListResourceId != null) && (vpoolListResourceId.toString().equals(computeVirtualPoolId))) {      return true;    }  }  return false;}  }
class C{  private void updateValueToTheRoot(BFINode<E> current,BloomFilter<E> newValue,InsDelUpdateStatistics stat){  assert current != null;  current.value.orBloomFilter(newValue);  stat.nbBFAccessed+=2;  if (current.parent != null) {    updateValueToTheRoot(current.parent,newValue,stat);  }}  }
class C{  private long acquireRead(boolean interruptible,long deadline){  boolean wasInterrupted=false;  WNode node=null, p;  for (int spins=-1; ; ) {    WNode h;    if ((h=whead) == (p=wtail)) {      for (long m, s, ns; ; ) {        if ((m=(s=state) & ABITS) < RFULL ? U.compareAndSwapLong(this,STATE,s,ns=s + RUNIT) : (m < WBIT && (ns=tryIncReaderOverflow(s)) != 0L)) {          if (wasInterrupted)           Thread.currentThread().interrupt();          return ns;        } else         if (m >= WBIT) {          if (spins > 0) {            if (nextSecondarySeed() >= 0)             --spins;          } else {            if (spins == 0) {              WNode nh=whead, np=wtail;              if ((nh == h && np == p) || (h=nh) != (p=np))               break;            }            spins=SPINS;          }        }      }    }    if (p == null) {      WNode hd=new WNode(WMODE,null);      if (U.compareAndSwapObject(this,WHEAD,null,hd))       wtail=hd;    } else     if (node == null)     node=new WNode(RMODE,p); else     if (h == p || p.mode != RMODE) {      if (node.prev != p)       node.prev=p; else       if (U.compareAndSwapObject(this,WTAIL,p,node)) {        p.next=node;        break;      }    } else     if (!U.compareAndSwapObject(p,WCOWAIT,node.cowait=p.cowait,node))     node.cowait=null; else {      for (; ; ) {        WNode pp, c;        Thread w;        if ((h=whead) != null && (c=h.cowait) != null && U.compareAndSwapObject(h,WCOWAIT,c,c.cowait) && (w=c.thread) != null)         U.unpark(w);        if (h == (pp=p.prev) || h == p || pp == null) {          long m, s, ns;          do {            if ((m=(s=state) & ABITS) < RFULL ? U.compareAndSwapLong(this,STATE,s,ns=s + RUNIT) : (m < WBIT && (ns=tryIncReaderOverflow(s)) != 0L)) {              if (wasInterrupted)               Thread.currentThread().interrupt();              return ns;            }          } while (m < WBIT);        }        if (whead == h && p.prev == pp) {          long time;          if (pp == null || h == p || p.status > 0) {            node=null;            break;          }          if (deadline == 0L)           time=0L; else           if ((time=deadline - System.nanoTime()) <= 0L) {            if (wasInterrupted)             Thread.currentThread().interrupt();            return cancelWaiter(node,p,false);          }          Thread wt=Thread.currentThread();          U.putObject(wt,PARKBLOCKER,this);          node.thread=wt;          if ((h != pp || (state & ABITS) == WBIT) && whead == h && p.prev == pp)           U.park(false,time);          node.thread=null;          U.putObject(wt,PARKBLOCKER,null);          if (Thread.interrupted()) {            if (interruptible)             return cancelWaiter(node,p,true);            wasInterrupted=true;          }        }      }    }  }  for (int spins=-1; ; ) {    WNode h, np, pp;    int ps;    if ((h=whead) == p) {      if (spins < 0)       spins=HEAD_SPINS; else       if (spins < MAX_HEAD_SPINS)       spins<<=1;      for (int k=spins; ; ) {        long m, s, ns;        if ((m=(s=state) & ABITS) < RFULL ? U.compareAndSwapLong(this,STATE,s,ns=s + RUNIT) : (m < WBIT && (ns=tryIncReaderOverflow(s)) != 0L)) {          WNode c;          Thread w;          whead=node;          node.prev=null;          while ((c=node.cowait) != null) {            if (U.compareAndSwapObject(node,WCOWAIT,c,c.cowait) && (w=c.thread) != null)             U.unpark(w);          }          if (wasInterrupted)           Thread.currentThread().interrupt();          return ns;        } else         if (m >= WBIT && nextSecondarySeed() >= 0 && --k <= 0)         break;      }    } else     if (h != null) {      WNode c;      Thread w;      while ((c=h.cowait) != null) {        if (U.compareAndSwapObject(h,WCOWAIT,c,c.cowait) && (w=c.thread) != null)         U.unpark(w);      }    }    if (whead == h) {      if ((np=node.prev) != p) {        if (np != null)         (p=np).next=node;      } else       if ((ps=p.status) == 0)       U.compareAndSwapInt(p,WSTATUS,0,WAITING); else       if (ps == CANCELLED) {        if ((pp=p.prev) != null) {          node.prev=pp;          pp.next=node;        }      } else {        long time;        if (deadline == 0L)         time=0L; else         if ((time=deadline - System.nanoTime()) <= 0L)         return cancelWaiter(node,node,false);        Thread wt=Thread.currentThread();        U.putObject(wt,PARKBLOCKER,this);        node.thread=wt;        if (p.status < 0 && (p != h || (state & ABITS) == WBIT) && whead == h && node.prev == p)         U.park(false,time);        node.thread=null;        U.putObject(wt,PARKBLOCKER,null);        if (Thread.interrupted()) {          if (interruptible)           return cancelWaiter(node,node,true);          wasInterrupted=true;        }      }    }  }}  }
class C{  public static String noPrefix(String path,String prefix){  Objects.requireNonNull(path,"path must not be null");  Objects.requireNonNull(prefix,"prefix must not be null");  return path.startsWith(prefix) ? path.substring(prefix.length()) : path;}  }
class C{  public static boolean isPhysicalDataService(String ds){  return physicalDataServiceManagers.containsKey(ds);}  }
class C{  public CActionAbout(final JFrame parent){  super(String.format("About %s",Constants.PROJECT_NAME));  m_parent=Preconditions.checkNotNull(parent,"IE01843: Parent argument can not be null");  putValue(MNEMONIC_KEY,(int)'A');}  }
class C{  private static boolean isUninstallKeyChord(KeyEvent event){  int keyCode=event.getKeyCode();  return (keyCode == KeyEvent.KEYCODE_DEL || keyCode == KeyEvent.KEYCODE_FORWARD_DEL) && event.hasModifiers(KeyEvent.META_CTRL_ON | KeyEvent.META_SHIFT_ON);}  }
class C{  private boolean isDomain(String domain){  if (domain == null)   return true;  final int len=domain.length();  int next=0;  while (next < len) {    final char c=domain.charAt(next++);switch (c) {case ':':case '\n':      return false;case '*':case '?':    _domain_pattern=true;  break;}}return true;}  }
class C{  public String toString(){  return "Property ( " + "localName = " + this.getLocalName() + " "+ "namespace = "+ this.getNamespace()+ " "+ "value = "+ this.getValue()+ " )";}  }
class C{  public void printExceptionNoPathNameDefined(String morphingName){  System.out.println("Ok you forget to define your android:name for the android:morphin");  System.out.println("android:name is mandatory when you defined an android:morphingName");  System.out.println("the path without android:name has for android:morphing=" + morphingName);}  }
class C{  private ComputeState makeVmFromResults(EnumerationContext enumerationContext,VmOverlay vm){  ComputeEnumerateResourceRequest request=enumerationContext.getRequest();  ComputeState state=new ComputeState();  state.adapterManagementReference=request.adapterManagementReference;  state.parentLink=request.resourceLink();  state.resourcePoolLink=request.resourcePoolLink;  state.powerState=vm.getPowerState();  state.primaryMAC=vm.getPrimaryMac();  if (!vm.isTemplate()) {    state.address=vm.getIpAddressOrHostName();  }  state.id=vm.getInstanceUuid();  state.name=vm.getName();  CustomProperties.of(state).put(CustomProperties.MOREF,vm.getId()).put(CustomProperties.HOST,vm.getHost()).put(CustomProperties.TEMPLATE,vm.isTemplate()).put(CustomProperties.TYPE,VimNames.TYPE_VM);  return state;}  }
class C{  public Pos3D translate(ForgeDirection direction,double amount){  return translate(direction.offsetX * amount,direction.offsetY * amount,direction.offsetZ * amount);}  }
class C{  public static <T>int createTable(ConnectionSource connectionSource,Class<T> dataClass) throws SQLException {  return createTable(connectionSource,dataClass,false);}  }
class C{  public boolean contains(IntegerSyntax attribute){  return contains(attribute.getValue());}  }
class C{  public static void assertMainSearcher(SolrIndexSearcher s){  assertTrue("Searcher isn't 'main': " + s.toString(),s.toString().contains(" main{"));  assertTrue("Searcher is non-caching",s.isCachingEnabled());}  }
class C{  public <T>T createLambda(String code,TypeReference<T> typeReference) throws LambdaCreationException {  String helperClassSource=helperProvider.getHelperClassSource(typeReference.toString(),code,imports,staticImports);  try {    Class<?> helperClass=classFactory.createClass(helperProvider.getHelperClassName(),helperClassSource,javaCompiler,createOptionsForCompilationClasspath(compilationClassPath),parentClassLoader);    Method lambdaReturningMethod=helperClass.getMethod(helperProvider.getLambdaReturningMethodName());    @SuppressWarnings("unchecked") T lambda=(T)lambdaReturningMethod.invoke(null);    return lambda;  } catch (  ReflectiveOperationException|RuntimeException|NoClassDefFoundError e) {    throw new LambdaCreationException(e);  }catch (  ClassCompilationException classCompilationException) {    throw new LambdaCreationException(classCompilationException);  }}  }
class C{  public GridNearLockMapping(ClusterNode node,KeyCacheObject firstKey){  assert node != null;  assert firstKey != null;  this.node=node;  mappedKeys.add(firstKey);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void syncPanoIndicator(){  if (mPanoIndicator == null) {    Log.w(TAG,"Trying to sync a pano indicator that is not initialized.");    return;  }  ButtonManager buttonManager=mController.getButtonManager();  if (buttonManager.isPanoEnabled()) {    setIndicatorState(SettingsManager.SCOPE_GLOBAL,Keys.KEY_CAMERA_PANO_ORIENTATION,mPanoIndicator,mPanoIndicatorIcons,true);  } else {    changeVisibility(mPanoIndicator,View.GONE);  }}  }
class C{  @Override public boolean isFactoryForType(Object type){  return supportedTypes.contains(type) || super.isFactoryForType(type);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void updateRowId(String columnLabel,RowId x) throws SQLException {  throw unsupported("rowId");}  }
class C{  private void refreshButtonInvoked(){  final String currentUrl=browserHistory.getCurrentURL();  isBackOrForwardInProgress=true;  navigateToURL(currentUrl);}  }
class C{  protected void patch_addContext(Patch patch,String text){  if (text.length() == 0) {    return;  }  String pattern=text.substring(patch.start2,patch.start2 + patch.length1);  int padding=0;  while (text.indexOf(pattern) != text.lastIndexOf(pattern) && pattern.length() < Match_MaxBits - Patch_Margin - Patch_Margin) {    padding+=Patch_Margin;    pattern=text.substring(Math.max(0,patch.start2 - padding),Math.min(text.length(),patch.start2 + patch.length1 + padding));  }  padding+=Patch_Margin;  String prefix=text.substring(Math.max(0,patch.start2 - padding),patch.start2);  if (prefix.length() != 0) {    patch.diffs.addFirst(new Diff(Operation.EQUAL,prefix));  }  String suffix=text.substring(patch.start2 + patch.length1,Math.min(text.length(),patch.start2 + patch.length1 + padding));  if (suffix.length() != 0) {    patch.diffs.addLast(new Diff(Operation.EQUAL,suffix));  }  patch.start1-=prefix.length();  patch.start2-=prefix.length();  patch.length1+=prefix.length() + suffix.length();  patch.length2+=prefix.length() + suffix.length();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:49.818 -0500",hash_original_method="8E877A457FA4EF293EE7618CA0C5075F",hash_generated_method="AF2A9047422A9C3EE1FFAD5706368FAB") public CrashInfo(Throwable tr){  StringWriter sw=new StringWriter();  tr.printStackTrace(new PrintWriter(sw));  stackTrace=sw.toString();  exceptionMessage=tr.getMessage();  Throwable rootTr=tr;  while (tr.getCause() != null) {    tr=tr.getCause();    if (tr.getStackTrace() != null && tr.getStackTrace().length > 0) {      rootTr=tr;    }    String msg=tr.getMessage();    if (msg != null && msg.length() > 0) {      exceptionMessage=msg;    }  }  exceptionClassName=rootTr.getClass().getName();  if (rootTr.getStackTrace().length > 0) {    StackTraceElement trace=rootTr.getStackTrace()[0];    throwFileName=trace.getFileName();    throwClassName=trace.getClassName();    throwMethodName=trace.getMethodName();    throwLineNumber=trace.getLineNumber();  } else {    throwFileName="unknown";    throwClassName="unknown";    throwMethodName="unknown";    throwLineNumber=0;  }}  }
class C{  public static MethodType randomMethodTypeGenerator(int arity){  final Class<?>[] CLASSES={Object.class,int.class,boolean.class,byte.class,short.class,char.class,long.class,float.class,double.class};  if (arity > MAX_ARITY) {    throw new IllegalArgumentException(String.format("Arity should not exceed %d!",MAX_ARITY));  }  List<Class<?>> list=randomClasses(CLASSES,arity);  list=getParams(list,false,arity);  int i=RNG.nextInt(CLASSES.length + 1);  Class<?> rtype=i == CLASSES.length ? void.class : CLASSES[i];  return MethodType.methodType(rtype,list);}  }
class C{  public boolean isBridgeOperation(){  return this.isBridgeOp;}  }
class C{  protected SampleBase() throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException, ClientProtocolException, ClientException, IOException {  HOST=Config.getProperty(Config.HOSTNAME);  DOMAIN=Config.getProperty(Config.DOMAIN);  TENANT=Config.getProperty(Config.TENANT);  ADMIN_USERNAME=Config.getProperty(Config.ADMIN_USERNAME);  ADMIN_PASSWORD=Config.getProperty(Config.ADMIN_PASSWORD);  client=createClient(HOST,TENANT,ADMIN_USERNAME,ADMIN_PASSWORD);}  }
class C{  public void testCrawl_Site(){  System.out.println("crawl_full_site");  crawlerFactory.setCrawlConfigFilePath(FULL_SITE_CRAWL_CONF_FILE_PATH);  String siteUrl=bundle.getString(FULL_SITE_CRAWL_URL_KEY);  List<Content> contentList=initialiseAndLaunchCrawl(siteUrl,"3","","","","");  assertEquals(4,contentList.size());  Set<String> urlSet=getUrlSet(contentList);  assertTrue(urlSet.contains(siteUrl));  assertTrue(urlSet.contains(siteUrl + PAGE_NAME_LEVEL1));  assertTrue(urlSet.contains(siteUrl + PAGE_NAME_LEVEL2));  assertTrue(urlSet.contains(siteUrl + FORBIDDEN_PAGE_NAME));}  }
class C{  private String processFunction(String key,String value){  String result="";  if (ValidationUtil.isFunction(value)) {    result=FunctionHandler.executeFunction(value,this);  }  logVariable(key,value + " ==> " + result);  return result;}  }
class C{  public InputSource resolveEntity(String name,String publicId,String baseURI,String systemId) throws SAXException, IOException {  if (publicId == null || systemId == null) {    return resolveEntityByEntityResolvers(name,publicId,baseURI,systemId);  }  String location;  if (SYSTEM_ID_3_0.equals(systemId) || PUBLIC_ID_3_0.equals(publicId)) {    location=DTD_3_0_LOCATION;    version=CacheXmlVersion.GEMFIRE_3_0;  } else   if (SYSTEM_ID_4_0.equals(systemId) || PUBLIC_ID_4_0.equals(publicId)) {    location=DTD_4_0_LOCATION;    version=CacheXmlVersion.GEMFIRE_4_0;  } else   if (SYSTEM_ID_4_1.equals(systemId) || PUBLIC_ID_4_1.equals(publicId)) {    location=DTD_4_1_LOCATION;    version=CacheXmlVersion.GEMFIRE_4_1;  } else   if (SYSTEM_ID_5_0.equals(systemId) || PUBLIC_ID_5_0.equals(publicId)) {    location=DTD_5_0_LOCATION;    version=CacheXmlVersion.GEMFIRE_5_0;  } else   if (SYSTEM_ID_5_1.equals(systemId) || PUBLIC_ID_5_1.equals(publicId)) {    location=DTD_5_1_LOCATION;    version=CacheXmlVersion.GEMFIRE_5_1;  } else   if (SYSTEM_ID_5_5.equals(systemId) || PUBLIC_ID_5_5.equals(publicId)) {    location=DTD_5_5_LOCATION;    version=CacheXmlVersion.GEMFIRE_5_5;  } else   if (SYSTEM_ID_5_7.equals(systemId) || PUBLIC_ID_5_7.equals(publicId)) {    location=DTD_5_7_LOCATION;    version=CacheXmlVersion.GEMFIRE_5_7;  } else   if (SYSTEM_ID_5_8.equals(systemId) || PUBLIC_ID_5_8.equals(publicId)) {    location=DTD_5_8_LOCATION;    version=CacheXmlVersion.GEMFIRE_5_8;  } else   if (SYSTEM_ID_6_0.equals(systemId) || PUBLIC_ID_6_0.equals(publicId)) {    location=DTD_6_0_LOCATION;    version=CacheXmlVersion.GEMFIRE_6_0;  } else   if (SYSTEM_ID_6_1.equals(systemId) || PUBLIC_ID_6_1.equals(publicId)) {    location=DTD_6_1_LOCATION;    version=CacheXmlVersion.GEMFIRE_6_1;  } else   if (SYSTEM_ID_6_5.equals(systemId) || PUBLIC_ID_6_5.equals(publicId)) {    location=DTD_6_5_LOCATION;    version=CacheXmlVersion.GEMFIRE_6_5;  } else   if (SYSTEM_ID_6_6.equals(systemId) || PUBLIC_ID_6_6.equals(publicId)) {    location=DTD_6_6_LOCATION;    version=CacheXmlVersion.GEMFIRE_6_6;  } else   if (SYSTEM_ID_7_0.equals(systemId) || PUBLIC_ID_7_0.equals(publicId)) {    location=DTD_7_0_LOCATION;    version=CacheXmlVersion.GEMFIRE_7_0;  } else   if (SYSTEM_ID_8_0.equals(systemId) || PUBLIC_ID_8_0.equals(publicId)) {    location=DTD_8_0_LOCATION;    version=CacheXmlVersion.GEMFIRE_8_0;  } else {    version=CacheXmlVersion.valueForVersion(VERSION_LATEST);    return resolveEntityByEntityResolvers(name,publicId,baseURI,systemId);  }  InputSource result;  InputStream stream=ClassPathLoader.getLatest().getResourceAsStream(getClass(),location);  if (stream != null) {    result=new InputSource(stream);  } else {    throw new SAXNotRecognizedException(LocalizedStrings.CacheXml_DTD_NOT_FOUND_0.toLocalizedString(location));  }  return result;}  }
class C{  public boolean isLessThan(Seconds other){  if (other == null) {    return getValue() < 0;  }  return getValue() < other.getValue();}  }
class C{  public void writeSubpopulation(final EvolutionState state,final DataOutput dataOutput) throws IOException {  dataOutput.writeInt(individuals.length);  for (int i=0; i < individuals.length; i++)   individuals[i].writeIndividual(state,dataOutput);}  }
class C{  public static boolean isUserType(short flags){  return isFlagSet(flags,FLAG_USR_TYP);}  }
class C{  public static RequestEngine newRequestEngine(Context context,String engineTag){  RequestEngine requestEngine=sRequestEngineMap.get(engineTag);  if (requestEngine == null) {    OkHttpClient okHttpClient=new OkHttpClient();    okHttpClient.setConnectTimeout(DEFAULT_HTTP_TIMEOUT,TimeUnit.MILLISECONDS);    okHttpClient.setReadTimeout(DEFAULT_HTTP_TIMEOUT,TimeUnit.MILLISECONDS);    okHttpClient.setWriteTimeout(DEFAULT_HTTP_TIMEOUT,TimeUnit.MILLISECONDS);    okHttpClient.setSslSocketFactory(SSLManager.instance().getSSLSocketFactory());    okHttpClient.setHostnameVerifier(SSLManager.instance().getHostnameVerifier());    RequestQueue requestQueue=RestVolley.newRequestQueue(context.getApplicationContext(),new OkHttpStack(okHttpClient),DEF_THREAD_POOL_SIZE);    requestQueue.start();    requestEngine=new RequestEngine(requestQueue,okHttpClient);    sRequestEngineMap.put(engineTag,requestEngine);  }  return requestEngine;}  }
class C{  protected static void log(weka.core.logging.Logger.Level level,String message){  try {    File logFile=new File(WEKA_HOME.toString() + File.separator + "weka.log");    BufferedWriter writer=new BufferedWriter(new FileWriter(logFile,true));    SimpleDateFormat format=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");    String linefeed=System.getProperty("line.separator");    String m=format.format(new Date()) + " " + level+ ": "+ message+ linefeed;    writer.write(m);    writer.flush();    writer.close();  } catch (  Exception ex) {  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void removeSelected(){  StatusHistoryEntry selected=table.getSelectedEntry();  if (selected != null) {    table.removeEntry(selected);    history.remove(selected);  }}  }
class C{  public BurpCertificate importCertificate(String filename){  setStatus("Importing certificate...");  FileInputStream fis;  try {    fis=new FileInputStream(filename);    byte value[]=new byte[fis.available()];    fis.read(value);    ByteArrayInputStream bais=new ByteArrayInputStream(value);    fis.close();    CertificateFactory certFactory=CertificateFactory.getInstance("X.509");    X509Certificate x509certificate=(X509Certificate)certFactory.generateCertificate(bais);    BurpCertificate certificate=new BurpCertificate(x509certificate);    certificate.setPublicKey(x509certificate.getPublicKey());    certificate.setSource("Imported");    burpCertificateStore.addCertificate(certificate);    setCertificateTree();    setStatus("Certificate imported.");    setCertificateDetails(certificate);    return certificate;  } catch (  IOException|CertificateException e) {    setStatus("Error reading file. (" + e.getMessage() + ")");    e.printStackTrace();  }catch (  Exception e) {    setStatus("Error (" + e.getMessage() + ")");    e.printStackTrace();  }  return null;}  }
class C{  public ToStringBuilder append(final String fieldName,final boolean[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  @Override public boolean remove(Object o){  if (!(o instanceof Struct)) {    return false;  }  Struct s=(Struct)o;  if (!this.elementType.equals(StructTypeImpl.typeFromStruct(s))) {    return false;  }  return removeFieldValues(s.getFieldValues());}  }
class C{  public void move(double dt){  rx+=vx * dt;  ry+=vy * dt;}  }
class C{  public static int[] locateLargest(double[][] a){  int[] l=new int[2];  l[0]=0;  l[1]=0;  double max=0;  for (int i=0; i < a.length; i++) {    for (int j=0; j < a[i].length; j++) {      if (a[i][j] > max) {        l[0]=i;        l[1]=j;        max=a[i][j];      }    }  }  return l;}  }
class C{  public Vector3f add(Vector3fc v){  x+=v.x();  y+=v.y();  z+=v.z();  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private boolean checkStrategyOptionsForDROnStandby(Map<String,String> strategyOptions){  String dcId=drUtil.getCassandraDcId(drUtil.getLocalSite());  if (strategyOptions.containsKey(dcId)) {    return false;  }  Site localSite=drUtil.getLocalSite();  if (localSite.getState().equals(SiteState.STANDBY_PAUSED) || localSite.getState().equals(SiteState.STANDBY_DEGRADED) || localSite.getState().equals(SiteState.STANDBY_DEGRADING)) {    _log.info("local standby site has been paused/degraded and removed from strategy options. Do nothing");    return false;  }  _log.info("Add {} to strategy options",dcId);  strategyOptions.put(dcId,Integer.toString(getReplicationFactor()));  Site activeSite=drUtil.getActiveSite();  String activeSiteDcId=drUtil.getCassandraDcId(activeSite);  if (!strategyOptions.containsKey(activeSiteDcId)) {    _log.info("Add {} to strategy options",activeSiteDcId);    strategyOptions.put(activeSiteDcId,Integer.toString(activeSite.getNodeCount()));    if (strategyOptions.containsKey("replication_factor")) {      strategyOptions.remove("replication_factor");    }  }  return true;}  }
class C{  public void addParameter(String name,String value){  addParameter(name,new String[]{value});}  }
class C{  public void enrich(SolrInputDocument doc,List<String> synonyms,Map<String,Set<String>> genericFacets){  remove(doc,CollectionSchema.vocabularies_sxt);  for (  SolrInputField sif : doc) {    if (sif.getName().startsWith(CollectionSchema.VOCABULARY_PREFIX))     remove(doc,sif.getName());  }  if (this.isEmpty() || contains(CollectionSchema.vocabularies_sxt)) {    String text=(String)doc.getFieldValue(CollectionSchema.text_t.getSolrFieldName());    Map<String,String> classification=ProbabilisticClassifier.getClassification(text);    for (    Map.Entry<String,String> entry : classification.entrySet()) {      Set<String> facetAttrbutes=new HashSet<>();      facetAttrbutes.add(entry.getValue());      genericFacets.put(entry.getKey(),facetAttrbutes);    }    List<String> vocabularies=new ArrayList<>();    for (    Map.Entry<String,Set<String>> facet : genericFacets.entrySet()) {      String facetName=facet.getKey();      Set<String> facetValues=facet.getValue();      int count=facetValues.size();      if (count == 0)       continue;      int logcount=(int)(Math.log(count) / Math.log(2));      Integer[] counts=new Integer[logcount + 1];      for (int i=0; i <= logcount; i++)       counts[i]=i;      doc.setField(CollectionSchema.VOCABULARY_PREFIX + facetName + CollectionSchema.VOCABULARY_TERMS_SUFFIX,facetValues.toArray(new String[count]));      doc.setField(CollectionSchema.VOCABULARY_PREFIX + facetName + CollectionSchema.VOCABULARY_COUNT_SUFFIX,facetValues.size());      doc.setField(CollectionSchema.VOCABULARY_PREFIX + facetName + CollectionSchema.VOCABULARY_LOGCOUNT_SUFFIX,logcount);      doc.setField(CollectionSchema.VOCABULARY_PREFIX + facetName + CollectionSchema.VOCABULARY_LOGCOUNTS_SUFFIX,counts);      vocabularies.add(facetName);    }    if (vocabularies.size() > 0)     add(doc,CollectionSchema.vocabularies_sxt,vocabularies);  }  remove(doc,CollectionSchema.synonyms_sxt);  if (this.isEmpty() || contains(CollectionSchema.synonyms_sxt)) {    if (synonyms.size() > 0)     add(doc,CollectionSchema.synonyms_sxt,synonyms);  }}  }
class C{  public JSONObject put(String key,long value) throws JSONException {  this.put(key,new Long(value));  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else   if (myHost == null && progress != previousProgress) {    System.out.println(progress + "%");  }  previousProgress=progress;}  }
class C{  public static Result fromJson(String json){  Result result=null;  try {    GfJsonObject jsonObject=new GfJsonObject(json);    String contentType=jsonObject.getString("contentType");    GfJsonObject data=jsonObject.getJSONObject("data");    AbstractResultData resultData=null;    if (ResultData.TYPE_TABULAR.equals(contentType)) {      resultData=new TabularResultData(data);    } else     if (ResultData.TYPE_INFO.equals(contentType)) {      resultData=new InfoResultData(data);    } else     if (ResultData.TYPE_ERROR.equals(contentType)) {      resultData=new ErrorResultData(data);    } else     if (ResultData.TYPE_COMPOSITE.equals(contentType)) {      resultData=new CompositeResultData(data);    } else     if (ResultData.TYPE_OBJECT.equals(contentType)) {      resultData=new ObjectResultData<CliJsonSerializable>(data);    } else {      ErrorResultData errorResultData=new ErrorResultData();      errorResultData.addLine("Can not detect result type, unknown response format: " + json);      resultData=errorResultData;    }    result=buildResult(resultData);  } catch (  GfJsonException e) {    result=createBadResponseErrorResult(json);  }  return result;}  }
class C{  public int read(byte[] b) throws IOException {  return read(b,0,b.length);}  }
class C{  public Pegasos(){  this(DEFAULT_EPOCHS,DEFAULT_REG,DEFAULT_BATCH_SIZE);}  }
class C{  public int readSkewedGolomb(final int b) throws IOException {  if (b < 0)   throw new IllegalArgumentException("The modulus " + b + " is negative");  if (b == 0)   return 0;  final int M=((1 << readUnary() + 1) - 1) * b;  final int m=(M / (2 * b)) * b;  return m + readMinimalBinary(M - m);}  }
class C{  public static String indent(int level){  return (level <= 0) ? "" : String.format("%" + level * 2 + "s","");}  }
class C{  public FileBackupHelper(Context context,String... files){  super(context);  mContext=context;  mFilesDir=context.getFilesDir();  mFiles=files;}  }
class C{  public boolean isSuccess(){  return CoAP.ResponseCode.isSuccess(response.getCode());}  }
class C{  private OptionalInt(int value){  this.isPresent=true;  this.value=value;}  }
class C{  public Boolean isAdmissionControlEnabled(){  return admissionControlEnabled;}  }
class C{  public XPathContext(boolean recursiveVarContext){  m_prefixResolvers.push(null);  m_currentNodes.push(DTM.NULL);  m_currentExpressionNodes.push(DTM.NULL);  m_saxLocations.push(null);  m_variableStacks=recursiveVarContext ? new VariableStack() : new VariableStack(1);}  }
class C{  @Override public String[] determineColumnConstraints(ResultProducer rp) throws Exception {  return null;}  }
class C{  private static String unsignedToString(long value){  if (value >= 0) {    return Long.toString(value);  } else {    return BigInteger.valueOf(value & 0x7FFFFFFFFFFFFFFFL).setBit(63).toString();  }}  }
class C{  public byte[] averageColorRGB(byte[] rgb){  if (count == 0)   return RGB_BLACK;  float red=0, grn=0, blu=0;  int minR=min[0], minG=min[1], minB=min[2];  int maxR=max[0], maxG=max[1], maxB=max[2];  int[] minIdx={minR >> 4,minG >> 4,minB >> 4};  int[] maxIdx={maxR >> 4,maxG >> 4,maxB >> 4};  int[] vals=new int[3];  for (int i=minIdx[0]; i <= maxIdx[0]; i++) {    int idx1=i << 8;    for (int j=minIdx[1]; j <= maxIdx[1]; j++) {      int idx2=idx1 | (j << 4);      for (int k=minIdx[2]; k <= maxIdx[2]; k++) {        int idx=idx2 | k;        Counter[] v=colors[idx];        for (int iColor=0; iColor < v.length; iColor++) {          Counter c=v[iColor];          vals=c.getRgb(vals);          if (contains(vals)) {            float weight=(c.count / (float)count);            red+=(vals[0] * weight);            grn+=(vals[1] * weight);            blu+=(vals[2] * weight);          }        }      }    }  }  byte[] result=(rgb == null) ? new byte[3] : rgb;  result[RED]=(byte)(red + 0.5f);  result[GRN]=(byte)(grn + 0.5f);  result[BLU]=(byte)(blu + 0.5f);  return result;}  }
class C{  public ObjectState(S id,Collection<E> deferred,Collection<? extends Action<S,E>> entryActions,Collection<? extends Action<S,E>> exitActions,Collection<? extends Action<S,E>> stateActions,PseudoState<S,E> pseudoState,Collection<Region<S,E>> regions,StateMachine<S,E> submachine){  super(id,deferred,entryActions,exitActions,stateActions,pseudoState,regions,submachine);}  }
class C{  public AddIndexChange(Table table,IIndex newIndex){  super(table);  _newIndex=newIndex;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deactivate") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep deleteStoragePool(@PathParam("id") URI id){  ArgValidator.checkFieldUriType(id,StoragePool.class,"id");  StoragePool pool=queryResource(id);  if (!RegistrationStatus.UNREGISTERED.toString().equalsIgnoreCase(pool.getRegistrationStatus()) || DiscoveryStatus.VISIBLE.name().equalsIgnoreCase(pool.getDiscoveryStatus())) {    throw APIException.badRequests.cannotDeactivateStoragePool();  }  String taskId=UUID.randomUUID().toString();  Operation op=_dbClient.createTaskOpStatus(StoragePool.class,id,taskId,ResourceOperationTypeEnum.DELETE_STORAGE_POOL);  PurgeRunnable.executePurging(_dbClient,_dbPurger,_asynchJobService.getExecutorService(),pool,_retry_attempts,taskId,60);  return toTask(pool,taskId,op);}  }
class C{  public Builder<TFragment> onSkipClickListener(@NonNull View.OnClickListener onSkipClickListener){  mOnSkipClickListener=onSkipClickListener;  return this;}  }
class C{  public DeleteResourceChange(IPath resourcePath,boolean forceOutOfSync,boolean deleteContent){  Assert.isNotNull(resourcePath);  fResourcePath=resourcePath;  fForceOutOfSync=forceOutOfSync;  fDeleteContent=deleteContent;  setValidationMethod(SAVE_IF_DIRTY);}  }
class C{  public Arc(Node<Label> tail,Node<Label> head,float cost,Label label){  this.tail=tail;  this.head=head;  this.cost=cost;  this.label=label;}  }
class C{  public static HeaderClassDeclaration createClassDeclaration(@NotNull Project project,@NotNull String className,@Nullable Attribute[] attributes){  String text=createClassDeclarationText(className,attributes) + ";";  return (HeaderClassDeclaration)createElement(project,text,HeaderTypes.CLASS_DECLARATION);}  }
class C{  public static void main(String[] args){  commandLineCompileWithErrorHandling(args,true);}  }
class C{  public void incrementReceived(){  received++;}  }
class C{  public boolean removeBody(String language){  language=determineLanguage(language);  for (  Body body : bodies) {    if (language.equals(body.language)) {      return bodies.remove(body);    }  }  return false;}  }
class C{  public static void updatePerspective(IConfigurationElement configElement){  if (configElement == null) {    return;  }  String perspSetting=PrefUtil.getAPIPreferenceStore().getString(IDE.Preferences.PROJECT_OPEN_NEW_PERSPECTIVE);  String promptSetting=IDEWorkbenchPlugin.getDefault().getPreferenceStore().getString(IDEInternalPreferences.PROJECT_SWITCH_PERSP_MODE);  if (!(promptSetting.equals(MessageDialogWithToggle.PROMPT)) && perspSetting.equals(IWorkbenchPreferenceConstants.NO_NEW_PERSPECTIVE)) {    return;  }  String finalPerspId=configElement.getAttribute(FINAL_PERSPECTIVE);  if (finalPerspId == null) {    return;  }  IPerspectiveRegistry reg=PlatformUI.getWorkbench().getPerspectiveRegistry();  IPerspectiveDescriptor finalPersp=reg.findPerspectiveWithId(finalPerspId);  if (finalPersp != null && finalPersp instanceof IPluginContribution) {    IPluginContribution contribution=(IPluginContribution)finalPersp;    if (contribution.getPluginId() != null) {      IWorkbenchActivitySupport workbenchActivitySupport=PlatformUI.getWorkbench().getActivitySupport();      IActivityManager activityManager=workbenchActivitySupport.getActivityManager();      IIdentifier identifier=activityManager.getIdentifier(WorkbenchActivityHelper.createUnifiedId(contribution));      Set idActivities=identifier.getActivityIds();      if (!idActivities.isEmpty()) {        Set enabledIds=new HashSet(activityManager.getEnabledActivityIds());        if (enabledIds.addAll(idActivities)) {          workbenchActivitySupport.setEnabledActivityIds(enabledIds);        }      }    }  } else {    IDEWorkbenchPlugin.log("Unable to find persective " + finalPerspId + " in BasicNewProjectResourceWizard.updatePerspective");    return;  }  ArrayList preferredPerspIds=new ArrayList();  addPerspectiveAndDescendants(preferredPerspIds,finalPerspId);  String preferred=configElement.getAttribute(PREFERRED_PERSPECTIVES);  if (preferred != null) {    StringTokenizer tok=new StringTokenizer(preferred," \t\n\r\f,");    while (tok.hasMoreTokens()) {      addPerspectiveAndDescendants(preferredPerspIds,tok.nextToken());    }  }  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();  if (window != null) {    IWorkbenchPage page=window.getActivePage();    if (page != null) {      IPerspectiveDescriptor currentPersp=page.getPerspective();      if (currentPersp != null && preferredPerspIds.contains(currentPersp.getId())) {        return;      }    }    if (!confirmPerspectiveSwitch(window,finalPersp)) {      return;    }  }  int workbenchPerspectiveSetting=WorkbenchPlugin.getDefault().getPreferenceStore().getInt(IPreferenceConstants.OPEN_PERSP_MODE);  if (workbenchPerspectiveSetting == IPreferenceConstants.OPM_NEW_WINDOW) {    openInNewWindow(finalPersp);    return;  }  replaceCurrentPerspective(finalPersp);}  }
class C{  private String stateToString(int stateInt){  String stateDesc=null;switch (stateInt) {case INITIALIZING:    stateDesc="INITIALIZING";  break;case READY:stateDesc="READY";break;case DESTROYED:stateDesc="DESTROYED";break;default :stateDesc=null;break;}if (stateDesc == null) {throw new IllegalArgumentException(LocalizedStrings.DLockGrantor_UNKNOWN_STATE_FOR_GRANTOR_0.toLocalizedString(Integer.valueOf(state)));}return stateDesc;}  }
class C{  public Population breedPopulation(EvolutionState state){  for (int x=0; x < state.population.subpops.length; x++)   for (int y=0; y < state.population.subpops[x].individuals.length; y++)   ((VectorIndividualCGP)state.population.subpops[x].individuals[y]).expression=null;  return super.breedPopulation(state);}  }
class C{  private void fillByGroundSource(RPAction action){  int itemid=action.getInt(EquipActionConsts.BASE_ITEM);  Entity entity=(Entity)zone.get(new RPObject.ID(itemid,zone.getID()));  if (entity instanceof Item) {    item=(Item)entity;  }  slot=new GroundSlot(zone,item);}  }
class C{  public boolean readyToBuild(){  if (this.tableBuilders == null && this.dataBlocks != null && this.dataBlocks.size() > 0) {    return true;  }  for (  Table.Builder<? extends Table> tableBuilder : this.tableBuilders.values()) {    if (tableBuilder.readyToBuild() == false) {      return false;    }  }  return true;}  }
class C{  public static boolean close(final Socket socket){  if (socket != null) {    try {      socket.close();    } catch (    IOException ignore) {      return false;    }  }  return true;}  }
class C{  public void renew(int i){  int pos=lookup(i);  if (index[pos] == i) {    if (last_used[pos] > 0) {      counter++;      last_used[pos]=counter;    }    ;  }  ;}  }
class C{  public boolean showColorsNick(){  return preferences.getBoolean(resources.getString(R.string.key_show_colors_nick),Boolean.parseBoolean(resources.getString(R.string.default_show_colors_nick)));}  }
class C{  public void test_ConstructorILjava_lang_StringIIIIIIIII(){  SimpleTimeZone st=new SimpleTimeZone(1000,"TEST",Calendar.NOVEMBER,1,Calendar.SUNDAY,0,Calendar.NOVEMBER,-1,Calendar.SUNDAY,0,1000 * 60 * 60);  assertTrue("Incorrect TZ constructed",st.inDaylightTime(new GregorianCalendar(1998,Calendar.NOVEMBER,13).getTime()));  assertTrue("Incorrect TZ constructed",!(st.inDaylightTime(new GregorianCalendar(1998,Calendar.OCTOBER,13).getTime())));  assertEquals("Incorrect TZ constructed","TEST",st.getID());  assertEquals("Incorrect TZ constructed",1000,st.getRawOffset());  assertTrue("Incorrect TZ constructed",st.useDaylightTime());  assertTrue("Incorrect TZ constructed",st.getDSTSavings() == 1000 * 60 * 60);  try {    new SimpleTimeZone(1000,"TEST",12,1,Calendar.SUNDAY,0,Calendar.NOVEMBER,-1,Calendar.SUNDAY,0,1000 * 60 * 60);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new SimpleTimeZone(1000,"TEST",Calendar.NOVEMBER,10,Calendar.SUNDAY,0,Calendar.NOVEMBER,-1,Calendar.SUNDAY,0,1000 * 60 * 60);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new SimpleTimeZone(1000,"TEST",Calendar.NOVEMBER,1,10,0,Calendar.NOVEMBER,-1,Calendar.SUNDAY,0,1000 * 60 * 60);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new SimpleTimeZone(1000,"TEST",Calendar.DECEMBER,1,Calendar.SUNDAY,0,Calendar.NOVEMBER,-10,Calendar.SUNDAY,0,1000 * 60 * 60);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public void testUnmappableForLength(){  assertNotNull(CoderResult.unmappableForLength(Integer.MAX_VALUE));  assertNotNull(CoderResult.unmappableForLength(1));  assertSame(CoderResult.unmappableForLength(1),CoderResult.unmappableForLength(1));  assertNotSame(CoderResult.unmappableForLength(2),CoderResult.unmappableForLength(1));  try {    CoderResult.unmappableForLength(-1);    fail("Should throw IllegalArgumentException");  } catch (  IllegalArgumentException ex) {  }  try {    CoderResult.unmappableForLength(0);    fail("Should throw IllegalArgumentException");  } catch (  IllegalArgumentException ex) {  }}  }
class C{  public static Resource toExactResource(Resource res){  res=getCanonicalResourceEL(res);  if (res.getResourceProvider().isCaseSensitive()) {    if (res.exists())     return res;    return _check(res);  }  return res;}  }
class C{  @Inline private void releasePages(){  if (contiguous) {    if (zeroConcurrent) {      while (zeroingCursor.LT(zeroingSentinel)) {      }    }    if (cursor.GT(zeroingSentinel)) {      zeroingSentinel=cursor;    }    zeroingCursor=start;    cursor=start;    currentChunk=Conversions.chunkAlign(start,true);  } else {    if (!cursor.isZero()) {      do {        Extent bytes=cursor.diff(currentChunk).toWord().toExtent();        releasePages(currentChunk,bytes);      } while (moveToNextChunk());      currentChunk=Address.zero();      sentinel=Address.zero();      cursor=Address.zero();      space.releaseAllChunks();    }  }}  }
class C{  protected void shiftGapStartDown(int newGapStart){  int adjustIndex=findMarkAdjustIndex(newGapStart);  int n=marks.size();  int g0=getGapStart();  int g1=getGapEnd();  for (int i=adjustIndex; i < n; i++) {    MarkData mark=marks.elementAt(i);    if (mark.index > g0) {      break;    }    mark.index=g1;  }  super.shiftGapStartDown(newGapStart);  resetMarksAtZero();}  }
class C{  private static void dualPivotQuicksort(double[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  double ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    double t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    double t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    double t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    double t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    double t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    double t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    double t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    double t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    double t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  double pivot1=ae2;  a[e2]=a[left];  double pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      double ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      double ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      double ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.KEY_DEFINITION___DEFAULT_KEY_1:    return defaultKey_1 != null && !defaultKey_1.isEmpty();case UmplePackage.KEY_DEFINITION___KEY_1:  return key_1 != null && !key_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("Selection"))     p_Selection="Y".equals(para[i].getParameter()); else     if (name.equals("DocAction"))     p_docAction=(String)para[i].getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  m_dateinvoiced=Env.getContextAsDate(getCtx(),"#Date");  if (m_dateinvoiced == null) {    m_dateinvoiced=new Timestamp(System.currentTimeMillis());  }}  }
class C{  private static int gallopLeft(Comparable<Object> key,Object[] a,int base,int len,int hint){  if (DEBUG)   assert len > 0 && hint >= 0 && hint < len;  int lastOfs=0;  int ofs=1;  if (key.compareTo(a[base + hint]) > 0) {    int maxOfs=len - hint;    while (ofs < maxOfs && key.compareTo(a[base + hint + ofs]) > 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  } else {    final int maxOfs=hint + 1;    while (ofs < maxOfs && key.compareTo(a[base + hint - ofs]) <= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  }  if (DEBUG)   assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (key.compareTo(a[base + m]) > 0)     lastOfs=m + 1; else     ofs=m;  }  if (DEBUG)   assert lastOfs == ofs;  return ofs;}  }
class C{  public IconicsDrawable paddingRes(int dimenRes){  return paddingPx(mContext.getResources().getDimensionPixelSize(dimenRes));}  }
class C{  public void testDisableExternalGeneralEntities() throws Exception {  String xml="<!DOCTYPE foo [" + "  <!ENTITY bar SYSTEM \"/no-such-document.xml\">" + "]>"+ "<foo>&bar;</foo>";  testDisableExternalEntities("http://xml.org/sax/features/external-general-entities",xml);}  }
class C{  public boolean hasMoreTurns(){  return turnVector.size() > (turnIndex + 1);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getInvariant_();}  }
class C{  public GridBoundedConcurrentLinkedHashMap(int max,int initCap,float loadFactor){  this(max,initCap,loadFactor,DFLT_CONCUR_LVL);}  }
class C{  @Description(summary="Create h2small.jar containing only the embedded database.") public void jarSmall(){  compile(false,false,true);  FileList files=files("temp").exclude("temp/android/*").exclude("temp/org/h2/android/*").exclude("temp/org/h2/build/*").exclude("temp/org/h2/dev/*").exclude("temp/org/h2/jcr/*").exclude("temp/org/h2/jaqu/*").exclude("temp/org/h2/java/*").exclude("temp/org/h2/jcr/*").exclude("temp/org/h2/mode/*").exclude("temp/org/h2/samples/*").exclude("temp/org/h2/server/ftp/*").exclude("temp/org/h2/test/*").exclude("temp/org/h2/bnf/*").exclude("temp/org/h2/fulltext/*").exclude("temp/org/h2/jdbcx/*").exclude("temp/org/h2/jmx/*").exclude("temp/org/h2/server/*").exclude("temp/org/h2/tools/*").exclude("*.bat").exclude("*.sh").exclude("*.txt").exclude("*.DS_Store");  files=excludeTestMetaInfFiles(files);  files.add(new File("temp/org/h2/tools/DeleteDbFiles.class"));  files.add(new File("temp/org/h2/tools/CompressTool.class"));  jar("bin/h2small" + getJarSuffix(),files,"temp");}  }
class C{  protected CtClass createCtClass(String classname,boolean useCache){  if (classname.charAt(0) == '[')   classname=Descriptor.toClassName(classname);  if (classname.endsWith("[]")) {    String base=classname.substring(0,classname.indexOf('['));    if ((!useCache || getCached(base) == null) && find(base) == null)     return null; else     return new CtArray(classname,this);  } else   if (find(classname) == null)   return null; else   return new CtClassType(classname,this);}  }
class C{  @SmallTest public void testBadNewWakeLock() throws Exception {  final int badFlags=PowerManager.SCREEN_BRIGHT_WAKE_LOCK | PowerManager.SCREEN_DIM_WAKE_LOCK;  try {    PowerManager.WakeLock wl=mPm.newWakeLock(badFlags,"foo");  } catch (  IllegalArgumentException e) {    return;  }  fail("Bad WakeLock flag was not caught.");}  }
class C{  protected void vipProxyArpReply(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx,String vipId){  log.debug("vipProxyArpReply");  Ethernet eth=IFloodlightProviderService.bcStore.get(cntx,IFloodlightProviderService.CONTEXT_PI_PAYLOAD);  if (!(eth.getPayload() instanceof ARP))   return;  ARP arpRequest=(ARP)eth.getPayload();  byte[] vipProxyMacBytes=vips.get(vipId).proxyMac.toBytes();  IPacket arpReply=new Ethernet().setSourceMACAddress(vipProxyMacBytes).setDestinationMACAddress(eth.getSourceMACAddress()).setEtherType(Ethernet.TYPE_ARP).setVlanID(eth.getVlanID()).setPriorityCode(eth.getPriorityCode()).setPayload(new ARP().setHardwareType(ARP.HW_TYPE_ETHERNET).setProtocolType(ARP.PROTO_TYPE_IP).setHardwareAddressLength((byte)6).setProtocolAddressLength((byte)4).setOpCode(ARP.OP_REPLY).setSenderHardwareAddress(vipProxyMacBytes).setSenderProtocolAddress(arpRequest.getTargetProtocolAddress()).setTargetHardwareAddress(eth.getSourceMACAddress()).setTargetProtocolAddress(arpRequest.getSenderProtocolAddress()));  pushPacket(arpReply,sw,OFPacketOut.BUFFER_ID_NONE,OFPort.OFPP_NONE.getValue(),pi.getInPort(),cntx,true);  log.debug("proxy ARP reply pushed as {}",IPv4.fromIPv4Address(vips.get(vipId).address));  return;}  }
class C{  public void registerWalletBusyListener(WalletBusyListener walletBusyListener){  walletBusyListeners.add(walletBusyListener);}  }
class C{  public static boolean isDevMode(ILaunchConfiguration config) throws CoreException {  String mainTypeName=LaunchConfigurationProcessorUtilities.getMainTypeName(config);  return DEV_MODE_MAIN_TYPE.equals(mainTypeName);}  }
class C{  public TransitionRoot createTransitionRoot(){  TransitionRootImpl transitionRoot=new TransitionRootImpl();  return transitionRoot;}  }
class C{  public static Double countNodes(Node node,String nodePath) throws XPathExpressionException {  final XPathFactory factory=XPathFactory.newInstance();  final XPath xpath=factory.newXPath();  final XPathExpression expr=xpath.compile("count(" + nodePath + ')');  return (Double)expr.evaluate(node,XPathConstants.NUMBER);}  }
class C{  private void handleImage(Image img,Component cmp){  boolean bgUnselected=(threadQueue.bgImageCompsUnselected.contains(cmp));  ;  boolean bgSelected=(threadQueue.bgImageCompsSelected.contains(cmp));  boolean bgPressed=(threadQueue.bgImageCompsPressed.contains(cmp));  handleImage(img,cmp,bgUnselected,bgSelected,bgPressed);}  }
class C{  public final void interrupt(){  checkAccess();synchronized (this.childrenThreadsLock) {    for (int i=0; i < numThreads; i++) {      this.childrenThreads[i].interrupt();    }  }synchronized (this.childrenGroupsLock) {    for (int i=0; i < numGroups; i++) {      this.childrenGroups[i].interrupt();    }  }}  }
class C{  public boolean voidIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_VOID);  if (m_processMsg != null)   return false;  if (DOCSTATUS_Closed.equals(getDocStatus()) || DOCSTATUS_Reversed.equals(getDocStatus()) || DOCSTATUS_Voided.equals(getDocStatus())) {    m_processMsg="Document Closed: " + getDocStatus();    return false;  }  if (DOCSTATUS_Drafted.equals(getDocStatus()) || DOCSTATUS_Invalid.equals(getDocStatus()) || DOCSTATUS_InProgress.equals(getDocStatus())|| DOCSTATUS_Approved.equals(getDocStatus())|| DOCSTATUS_NotApproved.equals(getDocStatus())) {    MInOutLine[] lines=getLines(false);    for (int i=0; i < lines.length; i++) {      MInOutLine line=lines[i];      BigDecimal old=line.getMovementQty();      if (old.signum() != 0) {        line.setQty(Env.ZERO);        line.addDescription("Void (" + old + ")");        line.save(get_TrxName());      }    }    setDocStatus(DOCSTATUS_Voided);    saveEx();    voidConfirmations();  } else {    return reverseCorrectIt();  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_VOID);  if (m_processMsg != null)   return false;  setProcessed(true);  setDocAction(DOCACTION_None);  return true;}  }
class C{  public PixelMatrixImageNode(final PixelMatrix pixelMatrix){  super(pixelMatrix);  imageNode=new NonAntialiasingImageNode(pixelMatrix.getImage());  addChild(imageNode);}  }
class C{  public static void copyClose(Reader reader,Writer writer) throws IOException {  try {    copy(reader,writer);  }  finally {    IOUtils.closeQuietly(reader);    IOUtils.closeQuietly(writer);  }}  }
class C{  public static double cdf(double val,double loc,double scale,double shape1,double shape2){  val=(val - loc) / scale;  if (shape1 != 0.) {    double tmp=1. - shape1 * val;    if (tmp < 1e-15) {      return (shape1 < 0.) ? 0. : 1.;    }    val=Math.exp(Math.log(tmp) / shape1);  } else {    val=Math.exp(-val);  }  if (shape2 != 0.) {    double tmp=1. - shape2 * val;    if (tmp < 1e-15) {      return 0.;    }    val=Math.exp(Math.log(tmp) / shape2);  } else {    val=Math.exp(-val);  }  return val;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:38.033 -0500",hash_original_method="ED635EB76A78F00DCB10AED73CFEDC4B",hash_generated_method="11D84901F7C11F43D6F6B0A18CF21732") public UUID(long mostSigBits,long leastSigBits){  this.mostSigBits=mostSigBits;  this.leastSigBits=leastSigBits;  init();}  }
class C{  public static Date truncate(final Date date,final int field){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  final Calendar gval=Calendar.getInstance();  gval.setTime(date);  modify(gval,field,ModifyType.TRUNCATE);  return gval.getTime();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(ownerElement01.class,args);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeinsertbeforenodename.class,args);}  }
class C{  public static String formatNumber(float number,int digitCount,boolean separateThousands,char separateChar){  char[] out=new char[35];  boolean neg=false;  if (number == 0) {    return "0";  }  boolean zero=false;  if (number < 1 && number > -1) {    zero=true;  }  if (number < 0) {    neg=true;    number=-number;  }  if (digitCount > POW_10.length) {    digitCount=POW_10.length - 1;  }  number*=POW_10[digitCount];  long lval=Math.round(number);  int ind=out.length - 1;  int charCount=0;  boolean decimalPointAdded=false;  while (lval != 0 || charCount < (digitCount + 1)) {    int digit=(int)(lval % 10);    lval=lval / 10;    out[ind--]=(char)(digit + '0');    charCount++;    if (charCount == digitCount) {      out[ind--]=',';      charCount++;      decimalPointAdded=true;    } else     if (separateThousands && lval != 0 && charCount > digitCount) {      if (decimalPointAdded) {        if ((charCount - digitCount) % 4 == 0) {          out[ind--]=separateChar;          charCount++;        }      } else {        if ((charCount - digitCount) % 4 == 3) {          out[ind--]=separateChar;          charCount++;        }      }    }  }  if (zero) {    out[ind--]='0';    charCount+=1;  }  if (neg) {    out[ind--]='-';    charCount+=1;  }  int start=out.length - charCount;  return String.valueOf(out,start,out.length - start);}  }
class C{  public static boolean isSupportedRPRemoveProtectionVirtualPoolChange(Volume volume,VirtualPool currentVpool,VirtualPool newVpool,DbClient dbClient,StringBuffer notSuppReasonBuff){  s_logger.info(String.format("Checking isSupportedRPRemoveProtectionVirtualPoolChange from [%s] to [%s]...",currentVpool.getLabel(),newVpool.getLabel()));  if (isSameVirtualPool(currentVpool,newVpool,notSuppReasonBuff)) {    return false;  }  if (volume.checkForRp() && VirtualPool.vPoolSpecifiesProtection(currentVpool) && !VirtualPool.vPoolSpecifiesProtection(newVpool)) {    List<String> excluded=new ArrayList<String>();    String[] exclude=new String[]{PROTECTION_VARRAY_SETTINGS,RP_RPO_VALUE,RP_RPO_TYPE,RP_COPY_MODE,ARRAY_INFO,DRIVE_TYPE,JOURNAL_SIZE,JOURNAL_VARRAY,JOURNAL_VPOOL,MULTI_VOLUME_CONSISTENCY,METROPOINT,STANDBY_JOURNAL_VARRAY,STANDBY_JOURNAL_VPOOL};    excluded.addAll(Arrays.asList(exclude));    excluded.addAll(Arrays.asList(GENERALLY_EXCLUDED));    Map<String,Change> changes=analyzeChanges(currentVpool,newVpool,null,excluded.toArray(exclude),null);    if (!changes.isEmpty()) {      notSuppReasonBuff.append("These target virtual pool differences are invalid: ");      fillInNotSupportedReasons(changes,notSuppReasonBuff);      s_logger.info("Remove Protection change not supported, " + "these target pool differences are invalid: {}",notSuppReasonBuff.toString());      return false;    }  } else {    s_logger.warn("RP remove protection operation is NOT supported.");    return false;  }  s_logger.info("RP remove protection operation is supported.");  return true;}  }
class C{  private void addReplaceHistory(){  addReplaceHistory(tfReplaceEditor.getText());}  }
class C{  public DoubleMatrix1D like1D(int size){  return new SparseDoubleMatrix1D(size);}  }
class C{  public void write(byte[] buf,int off,int len){  return;}  }
class C{  @Override public AtlasClient.EntityResult updateEntities(String entityInstanceDefinition) throws AtlasException {  entityInstanceDefinition=ParamChecker.notEmpty(entityInstanceDefinition,"Entity instance definition");  ITypedReferenceableInstance[] typedInstances=deserializeClassInstances(entityInstanceDefinition);  AtlasClient.EntityResult entityResult=repository.updateEntities(typedInstances);  onEntitiesAddedUpdated(entityResult);  return entityResult;}  }
class C{  CacheServerJmxImpl(AdminDistributedSystemJmxImpl system,GemFireVM vm) throws AdminException {  super(system,vm);  initializeMBean();}  }
class C{  public static final long parseDate(String value,DateFormat[] threadLocalformats){  Long cachedDate=parseCache.get(value);  if (cachedDate != null) {    return cachedDate.longValue();  }  Long date=null;  if (threadLocalformats != null) {    date=internalParseDate(value,threadLocalformats);    updateParseCache(value,date);  } else {    date=internalParseDate(value,formats);    updateParseCache(value,date);  }  if (date == null) {    return (-1L);  }  return date.longValue();}  }
class C{  private static void reflectionAppend(final Object object,final Class<?> clazz,final HashCodeBuilder builder,final boolean useTransients,final String[] excludeFields){  if (isRegistered(object)) {    return;  }  try {    register(object);    final Field[] fields=clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,true);    for (    final Field field : fields) {      if (!ArrayUtils.contains(excludeFields,field.getName()) && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers()))&& (!Modifier.isStatic(field.getModifiers()))) {        try {          final Object fieldValue=field.get(object);          builder.append(fieldValue);        } catch (        final IllegalAccessException e) {          throw new InternalError("Unexpected IllegalAccessException");        }      }    }  }  finally {    unregister(object);  }}  }
class C{  private void fireHyperlinkUpdate(HyperlinkEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == HyperlinkListener.class) {      ((HyperlinkListener)listeners[i + 1]).hyperlinkUpdate(e);    }  }}  }
class C{  public static Map<String,Object> readJsonModel(File jsFile) throws IOException {  try (BufferedReader reader=new BufferedReader(new FileReader(jsFile))){    String line=null;    while ((line=reader.readLine()) != null) {      if ((line.startsWith("ex$.$CCMM$=") || line.startsWith("var $CCMM$=") || line.startsWith("var $$METAMODEL$$=")|| line.startsWith("var $$metamodel$$=")) && line.endsWith("};")) {        line=line.substring(line.indexOf("{"),line.length() - 1);        @SuppressWarnings("unchecked") Map<String,Object> rv=(Map<String,Object>)JSONValue.parse(line);        return rv;      }    }    return null;  } }  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.748 -0500",hash_original_method="67E70CE5ABA347B2A58E5303263E33C3",hash_generated_method="42DB9D434CFAFC3CDDF35D10DFCB7C02") public void debug(Object message,Throwable exception){  log(Level.FINE,String.valueOf(message),exception);}  }
class C{  public static String encodeRefinementValuePath(List<String> values){  assert null != values;  if (values.isEmpty()) {    return "";  }  StringBuilder out=new StringBuilder();  for (  String val : values) {    if (null == val) {      out.append('^');    } else {      out.append('~');      StrUtils.appendEscapedTextToBuilder(out,val,',');    }    out.append(',');  }  out.deleteCharAt(out.length() - 1);  return out.toString();}  }
class C{  protected final boolean execute() throws AdeException {  logger.info("Starting execution: " + m_requestType.name());  final long start=System.currentTimeMillis();  final boolean success=doControlLogic();  final long total=System.currentTimeMillis() - start;  logger.info(m_requestType.name() + (success ? " done. " : " failed. ") + "Total time elapsed: "+ millisecondsToHumanTime(total));  return success;}  }
class C{  public static NinePatch createNinePatch(InputStream stream,boolean is9Patch,boolean convert) throws IOException {  return NinePatch.load(stream,is9Patch,convert);}  }
class C{  public static String cache(String s){  if (!SysProperties.OBJECT_CACHE) {    return s;  }  if (s == null) {    return s;  } else   if (s.length() == 0) {    return "";  }  int hash=s.hashCode();  String[] cache=getCache();  if (cache != null) {    int index=hash & (SysProperties.OBJECT_CACHE_SIZE - 1);    String cached=cache[index];    if (cached != null) {      if (s.equals(cached)) {        return cached;      }    }    cache[index]=s;  }  return s;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean recursiveDelete(File file){  if (file.isDirectory()) {    String[] children=file.list();    if (children == null)     return false;    for (    String child : children) {      recursiveDelete(new File(file,child));    }  }  return file.delete();}  }
class C{  public long cacheStoreCreate(long memPtr){  enter();  try {    return PlatformCallbackUtils.cacheStoreCreate(envPtr,memPtr);  }  finally {    leave();  }}  }
class C{  public Rect createFromParcel(Parcel in){  Rect r=new Rect();  r.readFromParcel(in);  return r;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.209 -0500",hash_original_method="BA6D20A53269A42AE8656C6EBDDFC70F",hash_generated_method="844C0A50B5716AF87BD34EEB77E0CB7D") private void nativeSetResponseHeader(int nativeResponse,String key,String val){  addTaint(nativeResponse);  addTaint(key.getTaint());  addTaint(val.getTaint());}  }
class C{  public static void testValidity(Object o) throws JSONException {  if (o != null) {    if (o instanceof Double) {      if (((Double)o).isInfinite() || ((Double)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    } else     if (o instanceof Float) {      if (((Float)o).isInfinite() || ((Float)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    }  }}  }
class C{  private void processCustomDimensionParameters(@SuppressWarnings("rawtypes") GoogleAnalyticsRequest request,List<NameValuePair> postParms){  Map<String,String> customDimParms=new HashMap<String,String>();  for (  String defaultCustomDimKey : defaultRequest.customDimensions().keySet()) {    customDimParms.put(defaultCustomDimKey,defaultRequest.customDimensions().get(defaultCustomDimKey));  }  @SuppressWarnings("unchecked") Map<String,String> requestCustomDims=request.customDimensions();  for (  String requestCustomDimKey : requestCustomDims.keySet()) {    customDimParms.put(requestCustomDimKey,requestCustomDims.get(requestCustomDimKey));  }  for (  String key : customDimParms.keySet()) {    postParms.add(new BasicNameValuePair(key,customDimParms.get(key)));  }}  }
class C{  public static EventTypeMetadata createBeanType(String name,Class clazz,boolean isPreConfiguredStatic,boolean isPreConfigured,boolean isConfigured,TypeClass typeClass){  Set<String> secondaryNames=null;  if (name == null) {    name=clazz.getName();  } else {    if (!name.equals(clazz.getName())) {      secondaryNames=new LinkedHashSet<String>();      secondaryNames.add(clazz.getName());    }  }  return new EventTypeMetadata(name,secondaryNames,typeClass,isPreConfiguredStatic,isPreConfigured,isConfigured,ApplicationType.CLASS,false);}  }
class C{  public boolean isOffline(){  return mState == DeviceState.OFFLINE;}  }
class C{  public static int dehexchar(char c){  if (c >= '0' && c <= '9') {    return c - '0';  }  if (c >= 'A' && c <= 'F') {    return c - ('A' - 10);  }  if (c >= 'a' && c <= 'f') {    return c - ('a' - 10);  }  return -1;}  }
class C{  public CtField lookupFieldByJvmName2(String jvmClassName,Symbol fieldSym,ASTree expr) throws NoFieldException {  String field=fieldSym.get();  CtClass cc=null;  try {    cc=lookupClass(jvmToJavaName(jvmClassName),true);  } catch (  CompileError e) {    throw new NoFieldException(jvmClassName + "/" + field,expr);  }  try {    return cc.getField(field);  } catch (  NotFoundException e) {    jvmClassName=javaToJvmName(cc.getName());    throw new NoFieldException(jvmClassName + "$" + field,expr);  }}  }
class C{  void stratumSection(){  storeStratum(readLine());}  }
class C{  public BaseNode(){  this(new ArrayList<ConditionNode>());}  }
class C{  private void generateSSL() throws SAXException {  DistributedSystemConfig config=this.system.getConfig();  boolean sslEnabled=config.isSSLEnabled();  if (!sslEnabled) {    return;  }  AttributesImpl atts=new AttributesImpl();  atts.addAttribute("","",AUTHENTICATION_REQUIRED,"",String.valueOf(config.isSSLAuthenticationRequired()));  handler.startElement("",SSL,SSL,atts);  String protocols=config.getSSLProtocols();  if (protocols != null) {    handler.startElement("",PROTOCOLS,PROTOCOLS,EMPTY);    handler.characters(protocols.toCharArray(),0,protocols.length());    handler.endElement("",PROTOCOLS,PROTOCOLS);  }  String ciphers=config.getSSLCiphers();  if (ciphers != null) {    handler.startElement("",CIPHERS,CIPHERS,EMPTY);    handler.characters(ciphers.toCharArray(),0,ciphers.length());    handler.endElement("",CIPHERS,CIPHERS);  }  Properties sslProps=config.getSSLProperties();  for (Iterator iter=sslProps.entrySet().iterator(); iter.hasNext(); ) {    Map.Entry entry=(Map.Entry)iter.next();    String key=(String)entry.getKey();    String value=(String)entry.getValue();    handler.startElement("",PROPERTY,PROPERTY,EMPTY);    handler.startElement("",KEY,KEY,EMPTY);    handler.characters(key.toCharArray(),0,key.length());    handler.endElement("",KEY,KEY);    handler.startElement("",VALUE,VALUE,EMPTY);    handler.characters(value.toCharArray(),0,value.length());    handler.endElement("",VALUE,VALUE);    handler.endElement("",PROPERTY,PROPERTY);  }  handler.endElement("",SSL,SSL);}  }
class C{  public final JIPTerm parseTerm(String strTerm) throws JIPSyntaxErrorException {  final StringBufferInputStream sbins=new StringBufferInputStream(strTerm);  PrologParser parser=new PrologParser(new ParserReader(new PushbackLineNumberInputStream(sbins)),m_opManager,m_engine,"user");  m_singletonVars=parser.getSingletonVariables();  final PrologObject term=parser.parseNext();  return JIPTerm.getJIPTerm(term);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_1__LIST_1:    setList_1((Boolean)newValue);  return;case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_1__NAME_1:setName_1((String)newValue);return;case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_1__TYPE_1:setType_1((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected void appendDetail(final StringBuffer buffer,final String fieldName,final double[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    if (i > 0) {      buffer.append(arraySeparator);    }    appendDetail(buffer,fieldName,array[i]);  }  buffer.append(arrayEnd);}  }
class C{  public static Pair<Integer,Double> min(double[] array){  double min=Double.POSITIVE_INFINITY;  int argMin=-1;  int id=0;  for (  double d : array) {    if (d < min) {      min=d;      argMin=id;    }    id++;  }  return new Pair<>(argMin,min);}  }
class C{  public static void main(String[] args) throws GridClientException, IgniteCheckedException {  GridFileLock fileLock=GridLoadTestUtils.fileLock();  fileLock.lock();  try {    System.out.printf("%8s, %12s, %12s, %12s\n","Threads","It./s.","It./s.*th.","Iters.");    if (args.length == 0) {      for (int i=1; i <= 16; i*=2) {        ClientCacheBenchmark benchmark=new ClientCacheBenchmark(i,10000);        benchmark.run(false);        System.gc();      }      for (int i=1; i <= 64; i*=2) {        ClientCacheBenchmark benchmark=new ClientCacheBenchmark(i,10000);        benchmark.run(true);        System.gc();      }    } else {      int nThreads=Integer.parseInt(args[0]);      String outputFileName=(args.length >= 2 ? args[1] : null);      ClientCacheBenchmark benchmark=null;      for (int i=0; i < 2; i++) {        benchmark=new ClientCacheBenchmark(nThreads,10000);        benchmark.run(true);      }      if (outputFileName != null) {        X.println("Writing test results to a file: " + outputFileName);        assert benchmark != null;        try {          GridLoadTestUtils.appendLineToFile(outputFileName,"%s,%d",GridLoadTestUtils.DATE_TIME_FORMAT.format(new Date()),Math.round(benchmark.getItersPerSec()));        } catch (        IOException e) {          X.error("Failed to output to a file",e);        }      }    }  }  finally {    fileLock.close();  }}  }
class C{  public String globalInfo(){  return "An instance filter that creates a new attribute by applying a " + "mathematical expression to existing attributes. The expression " + "can contain attribute references and numeric constants. Supported "+ "operators are :\n"+ "+, -, *, /, ^, log, abs, cos, exp, sqrt, floor, ceil, rint, tan, "+ "sin, (, )\n"+ "Attributes are specified by prefixing with 'a', eg. a7 is "+ "attribute number 7 (starting from 1).\n"+ "Example expression : a1^2*a5/log(a7*4.0).";}  }
class C{  public void decrement(){  value--;}  }
class C{  public CutAction(@Nullable JComponent target){  super(target);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");  labels.configureAction(this,ID);}  }
class C{  public JSONObject(Object bean){  this();  this.populateMap(bean);}  }
class C{  public final boolean markDirty(@Nullable CompileContext context,File file,final BuildRootDescriptor rd,@Nullable Timestamps tsStorage) throws IOException {  return markDirty(context,CompilationRound.NEXT,file,rd,tsStorage);}  }
class C{  public ZippedItems(File zipFile,String categoryName,ItemFileFactory itemFactory) throws IllegalArgumentException, ZipException, IOException {  Enumeration<?> entries=null;  ZipEntry entry=null;  String catName=null;  String name=null;  int index;  Map<String,Object> category=null;  if (null == zipFile) {    throw new IllegalArgumentException("A null ZIP file was passed.");  }  if (null == itemFactory) {    throw new IllegalArgumentException("A null item factory was passed.");  }  rootName=categoryName;  factory=itemFactory;  if (null == rootName) {    rootName=zipFile.getName();  }  ZipFile contents=new ZipFile(zipFile);  Vector<ZipEntry> zipEntries=new Vector<ZipEntry>();  TreeMap<String,String> names=new TreeMap<String,String>(StringUtil.stringComparator());  entries=contents.entries();  while (entries.hasMoreElements()) {    entry=(ZipEntry)entries.nextElement();    name=entry.getName();    if (entry.isDirectory()) {      StringBuffer buffer=new StringBuffer();      buffer.append(rootName).append(" : ").append(name);      catName=buffer.toString();      categories.put(catName,new TreeMap<String,Object>(StringUtil.stringComparator()));      names.put(name,catName);    } else     if (ZippedItems.isZipName(name)) {      System.out.print("... found a ZIP file **inside** a ZIP file: ");      System.out.println(name);    } else     if (factory.accept(contents,name)) {      zipEntries.addElement(entry);    }  }  categories.put(rootName,new TreeMap<String,Object>(StringUtil.stringComparator()));  names.put(rootName,rootName);  entries=zipEntries.elements();  while (entries.hasMoreElements()) {    entry=(ZipEntry)entries.nextElement();    name=entry.getName();    index=name.lastIndexOf("/");    if (index < 0) {      catName=rootName;    } else {      index++;      catName=name.substring(0,index);      catName=names.get(catName);      if (null == catName) {        catName=rootName;      } else {        name=name.substring(index);      }    }    category=categories.get(catName);    category.put(name,factory.getItemFile(entry,contents));  }  entries=Collections.enumeration(names.values());  while (entries.hasMoreElements()) {    catName=(String)entries.nextElement();    category=categories.get(catName);    if (category.isEmpty()) {      categories.remove(catName);    }  }}  }
class C{  public final double priorEntropy() throws Exception {  if (!m_ClassIsNominal) {    throw new Exception("Can't compute entropy of class prior: " + "class numeric!");  }  if (m_NoPriors) {    return Double.NaN;  }  double entropy=0;  for (int i=0; i < m_NumClasses; i++) {    entropy-=m_ClassPriors[i] / m_ClassPriorsSum * Utils.log2(m_ClassPriors[i] / m_ClassPriorsSum);  }  return entropy;}  }
class C{  public Boolean isHidden(){  return hidden;}  }
class C{  public static boolean isBlockWhitelisted(Block block){  return whitelist.contains(block);}  }
class C{  @Override public int hashCode(){  if (ActiveMQRAConnectionRequestInfo.trace) {    ActiveMQRALogger.LOGGER.trace("hashCode()");  }  int hash=7;  hash+=31 * hash + (userName != null ? userName.hashCode() : 0);  hash+=31 * hash + (password != null ? password.hashCode() : 0);  hash+=31 * hash + Integer.valueOf(type).hashCode();  hash+=31 * hash + (transacted ? 1 : 0);  hash+=31 * hash + Integer.valueOf(acknowledgeMode).hashCode();  return hash;}  }
class C{  @Override public int compareTo(Value o){  return hashCode() - o.hashCode();}  }
class C{  @Override public void resume(){  isPaused=false;  if (worker != null) {    launch();  }}  }
class C{  public IdentifierNode(final String name){  this.name=name;}  }
class C{  @RequestMapping(method=RequestMethod.POST,value="/{functionId}",produces={MediaType.APPLICATION_JSON_VALUE}) @ApiOperation(value="execute function",notes="Execute function with arguments on regions, members, or group(s). By default function will be executed on all nodes if none of (onRegion, onMembers, onGroups) specified",response=void.class) @ApiResponses({@ApiResponse(code=200,message="OK."),@ApiResponse(code=401,message="Invalid Username or Password."),@ApiResponse(code=403,message="Insufficient privileges for operation."),@ApiResponse(code=500,message="if GemFire throws an error or exception"),@ApiResponse(code=400,message="if Function arguments specified as JSON document in the request body is invalid")}) @ResponseBody @ResponseStatus(HttpStatus.OK) @PreAuthorize("@securityService.authorize('DATA', 'WRITE')") public ResponseEntity<String> execute(@PathVariable("functionId") String functionId,@RequestParam(value="onRegion",required=false) String region,@RequestParam(value="onMembers",required=false) final String[] members,@RequestParam(value="onGroups",required=false) final String[] groups,@RequestParam(value="filter",required=false) final String[] filter,@RequestBody(required=false) final String argsInBody){  Execution function=null;  functionId=decode(functionId);  if (StringUtils.hasText(region)) {    logger.debug("Executing Function ({}) with arguments ({}) on Region ({})...",functionId,ArrayUtils.toString(argsInBody),region);    region=decode(region);    try {      function=FunctionService.onRegion(getRegion(region));    } catch (    FunctionException fe) {      throw new GemfireRestException(String.format("The Region identified by name (%1$s) could not found!",region),fe);    }  } else   if (ArrayUtils.isNotEmpty(members)) {    logger.debug("Executing Function ({}) with arguments ({}) on Member ({})...",functionId,ArrayUtils.toString(argsInBody),ArrayUtils.toString(members));    try {      function=FunctionService.onMembers(getMembers(members));    } catch (    FunctionException fe) {      throw new GemfireRestException("Could not found the specified members in distributed system!",fe);    }  } else   if (ArrayUtils.isNotEmpty(groups)) {    logger.debug("Executing Function ({}) with arguments ({}) on Groups ({})...",functionId,ArrayUtils.toString(argsInBody),ArrayUtils.toString(groups));    try {      function=FunctionService.onMembers(groups);    } catch (    FunctionException fe) {      throw new GemfireRestException("no member(s) are found belonging to the provided group(s)!",fe);    }  } else {    logger.debug("Executing Function ({}) with arguments ({}) on all Members...",functionId,ArrayUtils.toString(argsInBody));    try {      function=FunctionService.onMembers(getAllMembersInDS());    } catch (    FunctionException fe) {      throw new GemfireRestException("Distributed system does not contain any valid data node to run the specified  function!",fe);    }  }  if (!ArrayUtils.isEmpty(filter)) {    logger.debug("Executing Function ({}) with filter ({})",functionId,ArrayUtils.toString(filter));    Set filter1=ArrayUtils.asSet(filter);    function=function.withFilter(filter1);  }  final ResultCollector<?,?> results;  try {    if (argsInBody != null) {      Object[] args=jsonToObjectArray(argsInBody);      if (args.length == 1) {        results=function.withArgs(args[0]).execute(functionId);      } else {        results=function.withArgs(args).execute(functionId);      }    } else {      results=function.execute(functionId);    }  } catch (  ClassCastException cce) {    throw new GemfireRestException("Key is of an inappropriate type for this region!",cce);  }catch (  NullPointerException npe) {    throw new GemfireRestException("Specified key is null and this region does not permit null keys!",npe);  }catch (  LowMemoryException lme) {    throw new GemfireRestException("Server has encountered low memory condition!",lme);  }catch (  IllegalArgumentException ie) {    throw new GemfireRestException("Input parameter is null! ",ie);  }catch (  FunctionException fe) {    throw new GemfireRestException("Server has encountered error while executing the function!",fe);  }  try {    Object functionResult=results.getResult();    if (functionResult instanceof List<?>) {      final HttpHeaders headers=new HttpHeaders();      headers.setLocation(toUri("functions",functionId));      try {        @SuppressWarnings("unchecked") String functionResultAsJson=JSONUtils.convertCollectionToJson((ArrayList<Object>)functionResult);        return new ResponseEntity<String>(functionResultAsJson,headers,HttpStatus.OK);      } catch (      JSONException e) {        throw new GemfireRestException("Could not convert function results into Restful (JSON) format!",e);      }    } else {      throw new GemfireRestException("Function has returned results that could not be converted into Restful (JSON) format!");    }  } catch (  FunctionException fe) {    fe.printStackTrace();    throw new GemfireRestException("Server has encountered an error while processing function execution!",fe);  }}  }
class C{  protected DateTimeConverter makeConverter(Object defaultValue){  return new DateConverter(defaultValue);}  }
class C{  public Identity(String category,String name){  this.category=category;  this.name=name;}  }
class C{  public boolean contains(int data){  for (int i=0; i < size; i++) {    if (array[i] == data) {      return true;    }  }  return false;}  }
class C{  public boolean next() throws SQLException {  return crsInternal.next();}  }
class C{  public void disconnect(){  delegate.disconnect();}  }
class C{  public static void nodesToPath(PathDataNode[] node,Path path){  float[] current=new float[4];  char previousCommand='m';  for (int i=0; i < node.length; i++) {    addCommand(path,current,previousCommand,node[i].mType,node[i].mParams);    previousCommand=node[i].mType;  }}  }
class C{  public boolean satisfiedBasedOnChildren(boolean[] childValues){  if (this.isLeaf) {    return false;  }  return satisfiedBasedOnChildrenValues(childValues);}  }
class C{  public JpaRepositoryTransition(String machineId,JpaRepositoryState source,JpaRepositoryState target,String event){  this(machineId,source,target,event,null);}  }
class C{  public void removeListener(final IZyGraphSelectionListener listener){  m_selectionListeners.removeListener(listener);}  }
class C{  @Override public void fromXml(XmlReader reader,TikXmlConfig config,T value) throws IOException {  if (reader.hasAttribute()) {    if (attributeBinders != null) {      while (reader.hasAttribute()) {        String attributeName=reader.nextAttributeName();        AttributeBinder<T> attributeBinder=attributeBinders.get(attributeName);        if (attributeBinder != null) {          attributeBinder.fromXml(reader,config,value);        } else {          if (config.exceptionOnUnreadXml()) {            throw new IOException("Could not map the xml attribute with the name '" + attributeName + "' at path "+ reader.getPath()+ "to java class. Have you annotated such a field in your java class to map this xml attribute? Otherwise you can turn this error message off with TikXml.Builder().exceptionOnUnreadXml(false).build().");          } else {            reader.skipAttributeValue();          }        }      }    } else {      while (reader.hasAttribute()) {        reader.skipAttribute();      }    }  }  while (true) {    if (childElementBinders != null && reader.hasElement()) {      reader.beginElement();      String elementName=reader.nextElementName();      ChildElementBinder<T> childElementBinder=childElementBinders.get(elementName);      if (childElementBinder != null) {        childElementBinder.fromXml(reader,config,value);        reader.endElement();      } else {        if (config.exceptionOnUnreadXml()) {          throw new IOException("Could not map the xml element with the name '" + elementName + "' at path "+ reader.getPath()+ " to java class. Have you annotated such a field in your java class to map this xml element? Otherwise you can turn this error message off with TikXml.Builder().exceptionOnUnreadXml(false).build().");        } else {          reader.skipRemainingElement();        }      }    } else     if (reader.hasTextContent()) {      if (shouldReadTextContent) {        if (textContent == null) {          textContent=reader.nextTextContent();        } else {          if (textContentBuilder == null) {            textContentBuilder=new StringBuilder(textContent);          }          textContentBuilder.append(reader.nextTextContent());        }      } else {        if (config.exceptionOnUnreadXml()) {          throw new IOException("Could not map the xml element's text content at path  at path " + reader.getPath() + " to java class. Have you annotated such a field in your java class to map the xml element's text content? Otherwise you can turn this error message off with TikXml.Builder().exceptionOnUnreadXml(false).build().");        } else {          reader.skipTextContent();        }      }    } else {      break;    }  }  if (shouldReadTextContent) {    if (textContentBuilder != null && textContentBuilder.length() > 0) {      assignTextContent(config,textContentBuilder.toString(),value);      textContentBuilder.setLength(0);    } else     if (textContent != null) {      assignTextContent(config,textContent,value);      textContent=null;    }  }}  }
class C{  @Override public int executeUpdate() throws SQLException {  try {    debugCodeCall("executeUpdate");    checkClosedForWrite();    try {      return executeUpdateInternal();    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public boolean isImReportsActivated(){  return readBoolean(RcsSettingsData.IM_USE_REPORTS);}  }
class C{  private Hop processTempIntExpression(Expression source,HashMap<String,Hop> hops) throws ParseException {  DataIdentifier tmpOut=createTarget();  tmpOut.setDataType(DataType.SCALAR);  tmpOut.setValueType(ValueType.INT);  source.setOutput(tmpOut);  return processExpression(source,tmpOut,hops);}  }
class C{  private CVariableHighlighter(){}  }
class C{  protected void sequence_TemplateHead(ISerializationContext context,TemplateSegment semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.TEMPLATE_SEGMENT__RAW_VALUE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.TEMPLATE_SEGMENT__RAW_VALUE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getTemplateHeadAccess().getRawValueTEMPLATE_HEADTerminalRuleCall_1_0(),semanticObject.getRawValue());  feeder.finish();}  }
class C{  public static <T,F>void postComplete(Subscriber<? super T> actual,Queue<T> queue,AtomicLongFieldUpdater<F> field,F instance,BooleanSupplier isCancelled){  if (queue.isEmpty()) {    actual.onComplete();    return;  }  if (postCompleteDrain(field.get(instance),actual,queue,field,instance,isCancelled)) {    return;  }  for (; ; ) {    long r=field.get(instance);    if ((r & COMPLETED_MASK) != 0L) {      return;    }    long u=r | COMPLETED_MASK;    if (field.compareAndSet(instance,r,u)) {      if (r != 0L) {        postCompleteDrain(u,actual,queue,field,instance,isCancelled);      }      return;    }  }}  }
class C{  @Override public boolean loadDeferred(){  return true;}  }
class C{  public void render(java.awt.Graphics graphics){  Debug.message("eomgdetail","EditableOMRect.render()");  State state=getStateMachine().getState();  if (rect == null) {    Debug.message("eomg","EditableOMRect.render: null rect.");    return;  }  rect.setVisible(true);  rect.render(graphics);  rect.setVisible(false);  int renderType=rect.getRenderType();  if (state instanceof GraphicSelectedState || state instanceof GraphicEditState) {    for (int i=0; i < gPoints.length; i++) {      GrabPoint gp=gPoints[i];      if (gp != null) {        if ((i == OFFSET_POINT_INDEX && renderType == OMGraphic.RENDERTYPE_OFFSET && movingPoint == gpo) || (state instanceof GraphicSelectedState && ((i != OFFSET_POINT_INDEX && renderType != OMGraphic.RENDERTYPE_OFFSET) || (renderType == OMGraphic.RENDERTYPE_OFFSET)))) {          gp.setVisible(true);          gp.render(graphics);          gp.setVisible(false);        }      }    }  }}  }
class C{  private TokenEndpoint(){}  }
class C{  protected void drawEllipse(Point2D point,double oRadius,Graphics2D g2){  Ellipse2D.Double dot=new Ellipse2D.Double(point.getX() + oRadius / 2,point.getY(),oRadius,oRadius);  g2.draw(dot);}  }
class C{  public boolean isInteractive(){  return null == interactive ? _interactive : interactive.get();}  }
class C{  public DarkPanel(final Shell shell){  if (shell == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  if (shell.isDisposed()) {    SWT.error(SWT.ERROR_INVALID_ARGUMENT);  }  this.parent=shell;  if (shell.getData(DARK_PANEL_KEY) != null) {    throw new IllegalArgumentException("This shell has already an infinite panel attached on it !");  }  shell.setData(DARK_PANEL_KEY,this);  this.alpha=100;}  }
class C{  public History(String message,String hostname,JPAEntity entity,JobStatus jobStatus,long waitTime,long executionTime){  setMessage(message);  setHostName(hostname);  setEntity(entity);  setJobStatus(jobStatus);  setWaitTime(waitTime);  setExecutionTime(executionTime);}  }
class C{  private void saveRequestCode(Fragment to,int requestCode){  Bundle bundle=to.getArguments();  if (bundle == null) {    bundle=new Bundle();    to.setArguments(bundle);  }  FragmentResultRecord resultRecord=new FragmentResultRecord();  resultRecord.requestCode=requestCode;  bundle.putParcelable(FRAGMENTATION_ARG_RESULT_RECORD,resultRecord);}  }
class C{  private static String normalize(final String number){  final String cleanedNumber=number.replace(',',' ').replaceAll(" ","");  if (number.length() > 1 && cleanedNumber.startsWith("0")) {    return cleanedNumber.replaceFirst("0","");  }  return cleanedNumber;}  }
class C{  public static Document createDocument(){  return createDocument(false);}  }
class C{  public DistinctArgumentFunction(String functionName,Object argument){  super(functionName,argument);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return NODE_ID;case 2:  return DOMAIN_ID;case 3:return HOSTNAME;case 4:return PORT;default :return null;}}  }
class C{  public CircuitBreakerBuilder trialRequestInterval(Duration trialRequestInterval){  requireNonNull(trialRequestInterval,"trialRequestInterval");  if (trialRequestInterval.isNegative() || trialRequestInterval.isZero()) {    throw new IllegalArgumentException("trialRequestInterval: " + trialRequestInterval + " (expected: > 0)");  }  this.trialRequestInterval=trialRequestInterval;  return this;}  }
class C{  static public void assertEquals(String message,String expected,String actual){  if (expected == null && actual == null)   return;  if (expected != null && expected.equals(actual))   return;  throw new ComparisonFailure(message,expected,actual);}  }
class C{  public static JavaProjectBuilder load(File file) throws IOException {  FileInputStream fis=new FileInputStream(file);  ObjectInputStream in=new ObjectInputStream(fis);  JavaProjectBuilder builder;  try {    ClassLibraryBuilder libraryBuilder=(ClassLibraryBuilder)in.readObject();    builder=new JavaProjectBuilder(libraryBuilder);  } catch (  ClassNotFoundException e) {    throw new Error("Couldn't load class : " + e.getMessage());  } finally {    in.close();    fis.close();  }  return builder;}  }
class C{  protected Object execute() throws Exception {  init();  if (command == null) {    return session.execute("codenvy:");  }  String defaultNamespace="codenvy";  if (!command.startsWith(defaultNamespace)) {    command=defaultNamespace + ":" + command;  }  if (command.indexOf('|') > 0) {    if (command.startsWith("command|")) {      command=command.substring("command|".length());    } else {      return null;    }  }  Set<String> names=(Set<String>)session.get(COMMANDS);  if (names.contains(command)) {    session.execute(command + " --help");  } else {    System.out.println(String.format("Command %s has not been found",command));  }  return null;}  }
class C{  private int scale(SynthContext context,int size){  if (context == null || context.getComponent() == null) {    return size;  }  String scaleKey=SeaGlassStyle.getSizeVariant(context.getComponent());  if (scaleKey != null) {    if (SeaGlassStyle.LARGE_KEY.equals(scaleKey)) {      size*=SeaGlassStyle.LARGE_SCALE;    } else     if (SeaGlassStyle.SMALL_KEY.equals(scaleKey)) {      size*=SeaGlassStyle.SMALL_SCALE;    } else     if (SeaGlassStyle.MINI_KEY.equals(scaleKey)) {      size*=SeaGlassStyle.MINI_SCALE + 0.07;    }  }  return size;}  }
class C{  public final SecretKey generateSecret(String algorithm) throws IllegalStateException, NoSuchAlgorithmException, InvalidKeyException {  return spiImpl.engineGenerateSecret(algorithm);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapsetnameditemreturnvalue.class,args);}  }
class C{  public boolean dynInit() throws Exception {  log.config("");  setTitle(Msg.getElement(Env.getCtx(),"M_InOut_ID",false) + " .. " + Msg.translate(Env.getCtx(),"CreateFrom"));  return true;}  }
class C{  public Vector3f subtractLocal(Vector3f vec){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  x-=vec.x;  y-=vec.y;  z-=vec.z;  return this;}  }
class C{  public int hashCode(){  int retval=alg.hashCode();  retval^=maxKeySize;  if (exemptionMechanism != null) {    retval^=exemptionMechanism.hashCode();  }  if (checkParam)   retval^=100;  if (algParamSpec != null) {    retval^=algParamSpec.hashCode();  }  return retval;}  }
class C{  public void hideNavigationPane(){  if (contentBorderLayout.getChildren().contains(navigationPaneVBox)) {    contentBorderLayout.getChildren().remove(navigationPaneVBox);    showingNavigationPaneProperty.set(false);    LOG.debug("Showing navigation pane");  }}  }
class C{  public RenderContext(AffineTransform usr2dev,Shape aoi,RenderingHints hints){  this.hints=hints;  this.aoi=aoi;  this.usr2dev=(AffineTransform)usr2dev.clone();}  }
class C{  public static <T>ResponseOrError<T> fromError(@Nonnull Throwable t){  return new ResponseOrError<>(null,checkNotNull(t));}  }
class C{  public HookResult(int result,String smtpRetCode,CharSequence smtpDescription){  boolean match=false;  if ((result & HookReturnCode.DECLINED) == HookReturnCode.DECLINED) {    if (match == true)     throw new IllegalArgumentException();    match=true;  }  if ((result & HookReturnCode.OK) == HookReturnCode.OK) {    if (match == true)     throw new IllegalArgumentException();    match=true;  }  if ((result & HookReturnCode.DENY) == HookReturnCode.DENY) {    if (match == true)     throw new IllegalArgumentException();    match=true;  }  if ((result & HookReturnCode.DENYSOFT) == HookReturnCode.DENYSOFT) {    if (match == true)     throw new IllegalArgumentException();    match=true;  }  this.result=result;  this.smtpRetCode=smtpRetCode;  this.smtpDescription=(smtpDescription == null) ? null : smtpDescription.toString();}  }
class C{  public static void main(String[] args){  Rational r1=new Rational(4,2);  Rational r2=new Rational(2,3);  System.out.println(r1 + " + " + r2+ " = "+ r1.add(r2));  System.out.println(r1 + " - " + r2+ " = "+ r1.subtract(r2));  System.out.println(r1 + " * " + r2+ " = "+ r1.multiply(r2));  System.out.println(r1 + " / " + r2+ " = "+ r1.divide(r2));  System.out.println(r2 + " is " + r2.doubleValue());}  }
class C{  public void reinitialize(){  leftOf.clear();  other.clear();  rightBound.setLeft(0);  height=0;  for (int i=0; i < diagram.getNumberOfLifelines(); i++) {    addLifelineSlot();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.294 -0500",hash_original_method="F400F1CB4F55C1DB38DB506118AEBF9E",hash_generated_method="399E1A91FCB7925032E7C1A70F4E4379") public int[] startSubnegotiationLocal(){  return null;}  }
class C{  public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder clearUrl(){  url=null;  fieldSetFlags()[1]=false;  return this;}  }
class C{  public static int readHexInt(HashMap<String,? extends Object> map,String key,int defaultValue){  Object v=map.get(key);  if (v == null) {    return defaultValue;  } else   if (v instanceof Integer) {    return (Integer)v;  }  try {    return (int)Long.parseLong((String)v,16);  } catch (  NumberFormatException e) {    throw newIllegalStateException(ERROR_FILE_CORRUPT,"Error parsing the value {0}",v,e);  }}  }
class C{  public Drawable decideIcon(Context ctx,int iconColor,boolean tint,int paddingDp){  Drawable icon=mIcon;  if (mIIcon != null) {    icon=new IconicsDrawable(ctx,mIIcon).color(iconColor).sizeDp(24).paddingDp(paddingDp);  } else   if (mIconRes != -1) {    icon=UIUtils.getCompatDrawable(ctx,mIconRes);  } else   if (mUri != null) {    try {      InputStream inputStream=ctx.getContentResolver().openInputStream(mUri);      icon=Drawable.createFromStream(inputStream,mUri.toString());    } catch (    FileNotFoundException e) {    }  }  if (icon != null && tint && mIIcon == null) {    icon=icon.mutate();    icon.setColorFilter(iconColor,PorterDuff.Mode.SRC_IN);  }  return icon;}  }
class C{  public void init_get_bits(int[] buffer,int buffer_offset,int bit_size){  int buffer_size=(bit_size + 7) >> 3;  if (buffer_size < 0 || bit_size < 0) {    buffer_size=bit_size=0;    buffer=null;  }  this.buffer=buffer;  this.buffer_offset=buffer_offset;  this.size_in_bits=bit_size;  this.buffer_end=buffer_offset + buffer_size;  this.index=0;}  }
class C{  public boolean isMetadataModifiedSinceLastPublication(){  return metadataModifiedSinceLastPublication;}  }
class C{  public TriggerMatchesQuestSlotCondition(String questname,int index){  this.questname=questname;  this.index=index;}  }
class C{  public static FieldInfo createUnresolvedFieldInfo(String className,String name,String signature,boolean isStatic){  className=ClassName.toSlashedClassName(className);  return new FieldInfo(className,name,signature,null,isStatic ? Constants.ACC_STATIC : 0,new HashMap<ClassDescriptor,AnnotationValue>(),false);}  }
class C{  public static void transfer(InputStream in,OutputStream out,int bufferSize) throws IOException {  byte[] buffer=new byte[bufferSize];  int bytesRead;  while ((bytesRead=in.read(buffer)) != -1) {    out.write(buffer,0,bytesRead);  }}  }
class C{  public void stopPlayingVideo(){  if (null != mPlayingVideoView) {    mPlayingVideoView.stopPlayback();    displayVideoThumbnail((View)(mPlayingVideoView.getParent()),true);    mPlayingVideoView=null;  }}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  @SuppressWarnings("unchecked") @Pure public static <T>CollectorImpl<T,List<T>,ISeq<T>> toSeq(){  return new CollectorImpl<T,List<T>,ISeq<T>>((Supplier<List<T>>)null,null,null,null,CH_NOID);}  }
class C{  public static boolean checkpw(byte[] plaintext0,final String hashed){  byte hashed_bytes[];  byte try_bytes[];  try {    final String try_pw=hashpw(plaintext0,hashed);    hashed_bytes=hashed.getBytes("UTF-8");    try_bytes=try_pw.getBytes("UTF-8");  } catch (  final UnsupportedEncodingException uee) {    return false;  } finally {    if (plaintext0 != null) {      Arrays.fill(plaintext0,(byte)'\0');      plaintext0=null;    }  }  if (hashed_bytes.length != try_bytes.length) {    return false;  }  byte ret=0;  for (int i=0; i < try_bytes.length; i++) {    ret|=hashed_bytes[i] ^ try_bytes[i];  }  return ret == 0;}  }
class C{  public String nextTo(char d) throws JSONException {  StringBuffer sb=new StringBuffer();  for (; ; ) {    char c=next();    if (c == d || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  private void unregisterCacheObject(String name,String beanType){  MBeanServer mBeanSrv=ignite.configuration().getMBeanServer();  Set<ObjectName> registeredObjNames=mBeanSrv.queryNames(getObjectName(name,beanType),null);  for (  ObjectName registeredObjectName : registeredObjNames) {    try {      mBeanSrv.unregisterMBean(registeredObjectName);    } catch (    Exception e) {      throw new CacheException("Error unregistering object instance " + registeredObjectName + " . Error was "+ e.getMessage(),e);    }  }}  }
class C{  void concurrentModification(){  FacesContext ctx=FacesContext.getCurrentInstance();  ctx.getApplication().getNavigationHandler().handleNavigation(ctx,"",CONCURRENT_MODIFICATION_ERROR);  ctx.responseComplete();}  }
class C{  public ExtentEntityCopy(Vector from,Extent destination,Vector to,Transform transform){  checkNotNull(from);  checkNotNull(destination);  checkNotNull(to);  checkNotNull(transform);  this.destination=destination;  this.from=from;  this.to=to;  this.transform=transform;}  }
class C{  @Override public Cookie[] parse(String host,final int port,String path,final boolean secure,final String header) throws MalformedCookieException {  LOG.trace("enter CookieSpecBase.parse(" + "String, port, path, boolean, Header)");  if (host == null) {    throw new IllegalArgumentException("Host of origin may not be null");  }  if (host.trim().equals("")) {    throw new IllegalArgumentException("Host of origin may not be blank");  }  if (port < 0) {    throw new IllegalArgumentException("Invalid port: " + port);  }  if (path == null) {    throw new IllegalArgumentException("Path of origin may not be null.");  }  if (header == null) {    throw new IllegalArgumentException("Header may not be null.");  }  if (path.trim().equals("")) {    path=PATH_DELIM;  }  host=host.toLowerCase();  String defaultPath=path;  int lastSlashIndex=defaultPath.lastIndexOf(PATH_DELIM);  if (lastSlashIndex >= 0) {    if (lastSlashIndex == 0) {      lastSlashIndex=1;    }    defaultPath=defaultPath.substring(0,lastSlashIndex);  }  HeaderElement[] headerElements=null;  boolean isNetscapeCookie=false;  int i1=header.toLowerCase().indexOf("expires=");  if (i1 != -1) {    i1+="expires=".length();    int i2=header.indexOf(";",i1);    if (i2 == -1) {      i2=header.length();    }    try {      DateUtil.parseDate(header.substring(i1,i2),datepatterns);      isNetscapeCookie=true;    } catch (    final DateParseException e) {    }  }  if (isNetscapeCookie) {    headerElements=new HeaderElement[]{new HeaderElement(header.toCharArray())};  } else {    headerElements=HeaderElement.parseElements(header.toCharArray());  }  final Cookie[] cookies=new Cookie[headerElements.length];  for (int i=0; i < headerElements.length; i++) {    final HeaderElement headerelement=headerElements[i];    Cookie cookie=null;    try {      cookie=new Cookie(host,headerelement.getName(),headerelement.getValue(),defaultPath,null,false);    } catch (    final IllegalArgumentException e) {      throw new MalformedCookieException(e.getMessage());    }    final NameValuePair[] parameters=headerelement.getParameters();    if (parameters != null) {      for (int j=0; j < parameters.length; j++) {        parseAttribute(parameters[j],cookie);      }    }    cookies[i]=cookie;  }  return cookies;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:34.929 -0500",hash_original_method="CD37A3591E91E9E69217B8444E13EA3F",hash_generated_method="B2522EE3459C1FA0C920B6703052297C") public BasicPoolEntryRef(BasicPoolEntry entry,ReferenceQueue<Object> queue){  super(entry,queue);  if (entry == null) {    throw new IllegalArgumentException("Pool entry must not be null.");  }  route=entry.getPlannedRoute();}  }
class C{  static void terminateBits(int numDataBytes,BitArray bits) throws WriterException {  int capacity=numDataBytes << 3;  if (bits.getSize() > capacity) {    throw new WriterException("data bits cannot fit in the QR Code" + bits.getSize() + " > "+ capacity);  }  for (int i=0; i < 4 && bits.getSize() < capacity; ++i) {    bits.appendBit(false);  }  int numBitsInLastByte=bits.getSize() & 0x07;  if (numBitsInLastByte > 0) {    for (int i=numBitsInLastByte; i < 8; i++) {      bits.appendBit(false);    }  }  int numPaddingBytes=numDataBytes - bits.getSizeInBytes();  for (int i=0; i < numPaddingBytes; ++i) {    bits.appendBits((i & 0x01) == 0 ? 0xEC : 0x11,8);  }  if (bits.getSize() != capacity) {    throw new WriterException("Bits size does not equal capacity");  }}  }
class C{  public final boolean isParseErrorTrackNullComponent(){  return m_parseErrorTrackNullComponent;}  }
class C{  public static boolean checkALError(String msg){  msg=msg.trim();  if (msg.length() > 0) {    msg=msg + " ";  }switch (al.alGetError()) {case AL.AL_NO_ERROR:    return false;case AL.AL_INVALID_NAME:  log.warn(msg + "Invalid name parameter");return true;case AL.AL_INVALID_ENUM:log.warn(msg + "Invalid enumerated parameter value");return true;case AL.AL_INVALID_VALUE:log.warn(msg + "Invalid parameter value");return true;case AL.AL_INVALID_OPERATION:log.warn(msg + "Requested operation is not valid");return true;case AL.AL_OUT_OF_MEMORY:log.warn(msg + "Out of memory");return true;default :log.warn(msg + "Unrecognised error occurred");return true;}}  }
class C{  public static Object instantiate(ClassLoader cls,String beanName,BeanContext context,AppletInitializer initializer) throws IOException, ClassNotFoundException {  return internalInstantiate(cls,beanName,context,initializer);}  }
class C{  protected ImmutableMap<String,String> reconnectChannels(){  ImmutableMap<String,String> reconnectChannelsLocal=reconnectChannels;  reconnectChannels=null;  return reconnectChannelsLocal;}  }
class C{  public TestObject(){  this.intField=42;  this.stringField="123456789012345678901234567890";  this.objectField=new Integer(67);}  }
class C{  public RosterEntryComboBox(String rosterGroup){  this(Roster.getDefault(),rosterGroup,null,null,null,null,null,null,null);}  }
class C{  public void systemReady(){  registerForTelephonyIntents();  registerForAlarms();  registerForConnectivityIntents();  mThread=new HandlerThread(TAG);  mThread.start();  mHandler=new MyHandler(mThread.getLooper());  mHandler.obtainMessage(EVENT_POLL_NETWORK_TIME).sendToTarget();  mSettingsObserver=new SettingsObserver(mHandler,EVENT_AUTO_TIME_CHANGED);  mSettingsObserver.observe(mContext);}  }
class C{  public boolean matchesSecondGlyph(int glyphCode,String glyphUnicode){  if (secondGlyphCodes != null) {    int pt=Arrays.binarySearch(secondGlyphCodes,glyphCode);    if (pt >= 0)     return true;  }  if (glyphUnicode.length() < 1)   return false;  char glyphChar=glyphUnicode.charAt(0);  for (int i=0; i < secondUnicodeRanges.length; i++) {    if (secondUnicodeRanges[i].contains(glyphChar))     return true;  }  return false;}  }
class C{  private Revision buildRevisionMetaData(final int fullRevPK,final int limit) throws SQLException {  PreparedStatement statement=null;  ResultSet result=null;  try {    statement=this.connection.prepareStatement("SELECT Revision, PrimaryKey, RevisionCounter, RevisionID, ArticleID, Timestamp, Comment, Minor, ContributorName, ContributorId, ContributorIsRegistered " + "FROM revisions " + "WHERE PrimaryKey >= ? LIMIT "+ limit);    statement.setInt(1,fullRevPK);    result=statement.executeQuery();    Revision revision=null;    if (result.last()) {      revision=new Revision(result.getInt(3),this);      revision.setPrimaryKey(result.getInt(2));      revision.setRevisionID(result.getInt(4));      revision.setArticleID(result.getInt(5));      revision.setTimeStamp(new Timestamp(result.getLong(6)));      revision.setComment(result.getString(7));      revision.setMinor(result.getBoolean(8));      revision.setContributorName(result.getString(9));      String contribIdString=result.getString(10);      Integer contributorId=contribIdString == null ? null : Integer.parseInt(contribIdString);      revision.setContributorId(contributorId);      revision.setContributorIsRegistered(result.getBoolean(11));    }    return revision;  }  finally {    if (statement != null) {      statement.close();    }    if (result != null) {      result.close();    }  }}  }
class C{  public ListenableFuture<PaymentIncrementAck> incrementPayment(Coin size) throws ValueOutOfRangeException, IllegalStateException {  return channelClient.incrementPayment(size,null,null);}  }
class C{  public CouldntUpdateDatabaseException(final String exception,final int errorCode){  super(exception);  m_errorCode=errorCode;}  }
class C{  public Observable<JSON> exerciseMovie(Observable<Movies> movies){  return Observable.error(new RuntimeException("Not Implemented"));}  }
class C{  public Move interpretMove(Cell cell,Player p){  return logic.interpretMove(gameState,cell.col,cell.row,p);}  }
class C{  static void runOnMainThread(Context context,Runnable runnable){  Handler handler=new Handler(context.getMainLooper());  handler.post(runnable);}  }
class C{  public String toString(){  return ("EDIPartyName: " + ((assigner == null) ? "" : ("  nameAssigner = " + assigner + ",")) + "  partyName = "+ party);}  }
class C{  public String of(HasAlias document){switch (this) {case DATABASE_NAME:    return document.getName();case JAVA_NAME:  return document.getJavaName();default :throw new UnsupportedOperationException("Unknown enum constant '" + name() + "'.");}}  }
class C{  public static byte[] readFileToByteArray(File file) throws IOException {  int length=(int)file.length();  MappedByteBuffer in=new FileInputStream(file).getChannel().map(FileChannel.MapMode.READ_ONLY,0,length);  int i=0;  byte[] result=new byte[length];  while (i < length)   result[i]=in.get(i++);  return result;}  }
class C{  private void writeSortIndexFile(List<String> data,String columnId) throws IOException {  ColumnIdentifier columnIdentifier=new ColumnIdentifier(columnId,null,null);  Map<String,Integer> dataToSurrogateKeyMap=new HashMap<>(data.size());  int surrogateKey=0;  List<Integer> invertedIndexList=new ArrayList<>(data.size());  for (int i=0; i < data.size(); i++) {    dataToSurrogateKeyMap.put(data.get(i),++surrogateKey);  }  List<String> sortedKeyList=new ArrayList<>(dataToSurrogateKeyMap.keySet());  Collections.sort(sortedKeyList);  List<Integer> sortedIndexList=new ArrayList<>(data.size());  int[] invertedIndexArray=new int[sortedKeyList.size()];  for (int i=0; i < sortedKeyList.size(); i++) {    Integer key=dataToSurrogateKeyMap.get(sortedKeyList.get(i));    sortedIndexList.add(key);    invertedIndexArray[--key]=i + 1;  }  for (int i=0; i < invertedIndexArray.length; i++) {    invertedIndexList.add(invertedIndexArray[i]);  }  CarbonDictionarySortIndexWriter dictionarySortIndexWriter=new CarbonDictionarySortIndexWriterImpl(carbonTableIdentifier,columnIdentifier,carbonStorePath);  try {    dictionarySortIndexWriter.writeSortIndex(sortedIndexList);    dictionarySortIndexWriter.writeInvertedSortIndex(invertedIndexList);  }  finally {    dictionarySortIndexWriter.close();  }}  }
class C{  public Vertex evaluateOR(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  Vertex first=evaluateExpression(arguments.get(0).getTarget(),variables,network,startTime,maxTime,stack);  if (first.is(Primitive.TRUE)) {    return first;  }  if (arguments.size() == 1) {    return network.createVertex(Primitive.FALSE);  }  Vertex second=evaluateExpression(arguments.get(1).getTarget(),variables,network,startTime,maxTime,stack);  if (second.is(Primitive.TRUE)) {    return second;  }  return network.createVertex(Primitive.FALSE);}  }
class C{  public void reset(){  try {    if (state != State.ERROR) {      release();      filePath=null;      cAmplitude=0;      if (rUncompressed) {        audioRecorder=new AudioRecord(aSource,sRate,nChannels + 1,aFormat,bufferSize);      } else {        mediaRecorder=new MediaRecorder();        mediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);        mediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);        mediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);      }      state=State.INITIALIZING;    }  } catch (  Exception e) {    state=State.ERROR;  }}  }
class C{  public void updateTagRelation(final String tagRelationId,final JSONObject tagRelation) throws ServiceException {  final Transaction transaction=tagTagRepository.beginTransaction();  try {    tagTagRepository.update(tagRelationId,tagRelation);    transaction.commit();  } catch (  final RepositoryException e) {    if (transaction.isActive()) {      transaction.rollback();    }    LOGGER.log(Level.ERROR,"Updates a tag-tag relation [id=" + tagRelationId + "] failed",e);    throw new ServiceException(e);  }}  }
class C{  ExternalProblem(InputStream input,OutputStream output){  super();  reader=new BufferedReader(new InputStreamReader(input));  writer=new BufferedWriter(new OutputStreamWriter(output));}  }
class C{  public void addExcludedSubtree(GeneralSubtree subtree){  GeneralName base=subtree.getBase();switch (base.getTagNo()) {case 1:    excludedSubtreesEmail=unionEmail(excludedSubtreesEmail,extractNameAsString(base));  break;case 2:excludedSubtreesDNS=unionDNS(excludedSubtreesDNS,extractNameAsString(base));break;case 4:excludedSubtreesDN=unionDN(excludedSubtreesDN,(ASN1Sequence)base.getName().toASN1Primitive());break;case 6:excludedSubtreesURI=unionURI(excludedSubtreesURI,extractNameAsString(base));break;case 7:excludedSubtreesIP=unionIP(excludedSubtreesIP,ASN1OctetString.getInstance(base.getName()).getOctets());break;}}  }
class C{  public IStatus validate(final Binary binary){  final File file=new File(binary.getBinaryAbsolutePath());  if (!file.exists()) {    return error(binary,"'" + binary.getLabel() + "' binary does not exist at "+ file+ ". Please check your preferences.");  }  if (!file.isFile()) {    return error(binary,"Invalid '" + binary.getLabel() + "' configuration. Expected file at: "+ file+ ". Got a directory instead.");  }  if (!file.canExecute()) {    return error(binary,"Cannot execute '" + binary.getLabel() + "' binary at: "+ file+ ".");  }  final ProcessResult result=commandFactory.checkBinaryVersionCommand(binary).execute();  if (!result.isOK()) {    return error(binary,"Expected exit code 0 when checking version of '" + binary.getLabel() + "' got "+ result.getExitCode()+ "' instead.\n"+ result.getStdErr());  }  if (LOGGER.isDebugEnabled()) {    final String stdErrString=result.getStdErr();    if (!stdErrString.isEmpty())     LOGGER.debug(stdErrString);  }  final String stdOutString=result.getStdOut();  final Version currentVersion=Version.createFromString(stdOutString.trim());  if (!Version.isValid(currentVersion)) {    return error(binary,"Cannot find current version of '" + binary.getLabel() + "' binary. Output was: "+ stdOutString);  } else {    final Version minimumVersion=binary.getMinimumVersion();    if (0 < minimumVersion.compareTo(currentVersion)) {      return error(binary,"The required minimum version of '" + binary.getLabel() + "' is '"+ minimumVersion+ "'. Currently configured version is '"+ currentVersion+ "'.");    }    return OK_STATUS;  }}  }
class C{  @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.838 -0500",hash_original_method="37E6395A53D2856A75AD4C3F97C011E2",hash_generated_method="B3C18AA82E084366BF075DFC9488C49D") @DSVerified @DSSpec(DSCat.IO) public static final long copyReader(Reader source,Writer dest,int bufferSize) throws CopyStreamException {  return copyReader(source,dest,bufferSize,CopyStreamEvent.UNKNOWN_STREAM_SIZE,null);}  }
class C{  public void testConfigFileDirectory() throws Exception {  Properties properties=loadProperties("test-configFile-directory/test-subfolder");  assertEquals("12345",properties.getProperty("cargo.servlet.port"));}  }
class C{  public static java.lang.String valueOf(float f){  return null;}  }
class C{  public Tree[] parseTreesBlock(TaxonList taxonList) throws ImportException, IOException {  return readTreesBlock(taxonList,false);}  }
class C{  @Override public boolean doIsEquals(BodyDeclaration first,BodyDeclaration second){  return first.equals(second);}  }
class C{  public AutoEncoder(int inputDimensions,int compressedDimensions){  model=new LayeredNeuralNetwork();  model.addLayer(inputDimensions,false,FunctionFactory.createFloatFunction("Sigmoid"),null);  model.addLayer(compressedDimensions,false,FunctionFactory.createFloatFunction("Sigmoid"),null);  model.addLayer(inputDimensions,true,FunctionFactory.createFloatFunction("Sigmoid"),null);  model.setLearningStyle(LearningStyle.UNSUPERVISED);  model.setCostFunction(FunctionFactory.createFloatFloatFunction("SquaredError"));}  }
class C{  @RequestMapping(value="",method={RequestMethod.POST}) @ResponseBody public ModelRequest saveModelDesc(@RequestBody ModelRequest modelRequest){  DataModelDesc modelDesc=deserializeDataModelDesc(modelRequest);  if (modelDesc == null || StringUtils.isEmpty(modelDesc.getName())) {    return modelRequest;  }  if (StringUtils.isEmpty(modelDesc.getName())) {    logger.info("Model name should not be empty.");    throw new BadRequestException("Model name should not be empty.");  }  try {    modelDesc.setUuid(UUID.randomUUID().toString());    String projectName=(null == modelRequest.getProject()) ? ProjectInstance.DEFAULT_PROJECT_NAME : modelRequest.getProject();    modelService.createModelDesc(projectName,modelDesc);  } catch (  IOException e) {    logger.error("Failed to deal with the request:" + e.getLocalizedMessage(),e);    throw new InternalErrorException("Failed to deal with the request: " + e.getLocalizedMessage());  }  modelRequest.setUuid(modelDesc.getUuid());  modelRequest.setSuccessful(true);  return modelRequest;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Iterator<String> keyIterator(){  return mMap.keySet().iterator();}  }
class C{  public int size(){  Assert.stateNot(size == -1,"cannot determine size for non-persisted entry");  return size;}  }
class C{  private void processNullCheck(Instruction s){  RegisterOperand result=NullCheck.getGuardResult(s);  ValueGraphVertex v=findOrCreateVertex(result.getRegister());  v.setLabel(s.operator(),1);  Operand val=NullCheck.getRef(s);  val=bypassMoves(val);  link(v,findOrCreateVertex(val),0);}  }
class C{  public LocalSageFile(File file,boolean readonly) throws IOException {  randomAccessFile=new RandomAccessFile(file.getPath(),readonly ? "r" : "rw");  this.readonly=readonly;}  }
class C{  public float modelZ(float x,float y,float z){  return g.modelZ(x,y,z);}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public Header nextHeader() throws NoSuchElementException {  final int current=this.currentIndex;  if (current < 0) {    throw new NoSuchElementException("Iteration already finished.");  }  this.currentIndex=findNext(current);  return this.allHeaders[current];}  }
class C{  public void testNextInt(){  SplittableRandom sr=new SplittableRandom();  int f=sr.nextInt();  int i=0;  while (i < NCALLS && sr.nextInt() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  public FeatureList(){  list=new HashMap<String,String>();}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public char[] toCharArray(){  return value.toCharArray();}  }
class C{  @Override public void changeCursor(Cursor cursor){  super.changeCursor(cursor);  resetMappings();}  }
class C{  public String escaped(String unlessSchema){  return escape(new StringBuilder(),unlessSchema).toString();}  }
class C{  protected void emit_TStructMemberList___CommaKeyword_1_1_1_or_SemicolonKeyword_1_1_0__q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  private void _serializeQuery(Query query,StringBuilder sb,Set<Object> done) throws ConverterException {  Iterator<Key> it=query.keyIterator();  Key k;  sb.append(goIn());  sb.append("query(");  deep++;  boolean oDoIt=false;  int len=query.getRecordcount();  while (it.hasNext()) {    k=it.next();    if (oDoIt)     sb.append(',');    oDoIt=true;    sb.append(goIn());    sb.append(QUOTE_CHR);    sb.append(escape(k.getString()));    sb.append(QUOTE_CHR);    sb.append(":[");    boolean doIt=false;    for (int y=1; y <= len; y++) {      if (doIt)       sb.append(',');      doIt=true;      try {        _serialize(query.getAt(k,y),sb,done);      } catch (      PageException e) {        _serialize(e.getMessage(),sb,done);      }    }    sb.append(']');  }  deep--;  sb.append(')');}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:19.959 -0500",hash_original_method="9BE112C8870FAD3CF61652B8C6BD4A74",hash_generated_method="F2D77CB590F7FA9E0FF8D44FB616069C") public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof X509Name || obj instanceof ASN1Sequence)) {    return false;  }  DERObject derO=((DEREncodable)obj).getDERObject();  if (this.getDERObject().equals(derO)) {    return true;  }  X509Name other;  try {    other=X509Name.getInstance(obj);  } catch (  IllegalArgumentException e) {    return false;  }  int orderingSize=ordering.size();  if (orderingSize != other.ordering.size()) {    return false;  }  boolean[] indexes=new boolean[orderingSize];  int start, end, delta;  if (ordering.elementAt(0).equals(other.ordering.elementAt(0))) {    start=0;    end=orderingSize;    delta=1;  } else {    start=orderingSize - 1;    end=-1;    delta=-1;  }  for (int i=start; i != end; i+=delta) {    boolean found=false;    DERObjectIdentifier oid=(DERObjectIdentifier)ordering.elementAt(i);    String value=(String)values.elementAt(i);    for (int j=0; j < orderingSize; j++) {      if (indexes[j]) {        continue;      }      DERObjectIdentifier oOid=(DERObjectIdentifier)other.ordering.elementAt(j);      if (oid.equals(oOid)) {        String oValue=(String)other.values.elementAt(j);        if (equivalentStrings(value,oValue)) {          indexes[j]=true;          found=true;          break;        }      }    }    if (!found) {      return false;    }  }  return true;}  }
class C{  public void cbnz(int size,Register cmp,Label label){  if (label.isBound()) {    int offset=label.position() - position();    super.cbnz(size,cmp,offset);  } else {    label.addPatchAt(position());    int regEncoding=cmp.encoding << (PatchLabelKind.INFORMATION_OFFSET + 1);    int sizeEncoding=(size == 64 ? 1 : 0) << PatchLabelKind.INFORMATION_OFFSET;    emitInt(PatchLabelKind.BRANCH_NONZERO.encoding | regEncoding | sizeEncoding);  }}  }
class C{  public RE(REProgram program){  this(program,MATCH_NORMAL);}  }
class C{  public CipherSuite cipherSuite(){  return cipherSuite;}  }
class C{  public static Word zero(){  return new Word(0);}  }
class C{  @Override public String toString(){  return "CUdevice[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  public LocalVariableInfo(SsaMethod method){  if (method == null) {    throw new NullPointerException("method == null");  }  List<SsaBasicBlock> blocks=method.getBlocks();  this.regCount=method.getRegCount();  this.emptySet=new RegisterSpecSet(regCount);  this.blockStarts=new RegisterSpecSet[blocks.size()];  this.insnAssignments=new HashMap<SsaInsn,RegisterSpec>();  emptySet.setImmutable();}  }
class C{  @SuppressWarnings("unchecked") public ArrayDeque(final int minSize){  int size=countInitSize(minSize);  elements=(E[])new Object[size];  front=rear=0;  status=DequeStatus.Empty;  modCount=0;}  }
class C{  public void doUpdateVisitedHistory(WebView view,String url,boolean isReload){}  }
class C{  public ExecutionChoice createExecutionChoice(){  ExecutionChoiceImpl executionChoice=new ExecutionChoiceImpl();  return executionChoice;}  }
class C{  @Override public ControlFlowGraph run(CompilationUnitTree root,ProcessingEnvironment env,UnderlyingAST underlyingAST){  declaredClasses.clear();  declaredLambdas.clear();  CFTreeBuilder builder=new CFTreeBuilder(env);  PhaseOneResult phase1result=new CFCFGTranslationPhaseOne().process(root,env,underlyingAST,exceptionalExitLabel,builder,factory);  ControlFlowGraph phase2result=new CFGTranslationPhaseTwo().process(phase1result);  ControlFlowGraph phase3result=CFGTranslationPhaseThree.process(phase2result);  return phase3result;}  }
class C{  public boolean add(Match match,String id,Object object){  return add(match,id,object,false);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.PRECONDITION___NAME_1:    return NAME_1_EDEFAULT == null ? name_1 != null : !NAME_1_EDEFAULT.equals(name_1);case UmplePackage.PRECONDITION___CONSTRAINT_1:  return constraint_1 != null && !constraint_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static void main(String[] args){  Circle circle1=new Circle(5,"red",true);  Circle circle2=new Circle(5,"green",false);  Circle circle3=new Circle(4,"green",false);  System.out.println("Circle1 radius: " + circle1.getRadius());  System.out.println("Circle2 radius: " + circle2.getRadius());  System.out.println("Circle3 radius: " + circle3.getRadius());  System.out.println("Circle1 is " + (circle1.equals(circle2) ? "" : "not ") + "equal to circle2");  System.out.println("Circle1 is " + (circle1.equals(circle3) ? "" : "not ") + "equal to circle3");}  }
class C{  public CreateDomainScriptCommand(Configuration configuration,String resourcePath,String weblogicHome){  super(configuration,resourcePath);  this.weblogicHome=weblogicHome;}  }
class C{  void listKt(){  System.out.println("Keytab name: " + table.tabName());  KeyTabEntry[] entries=table.getEntries();  if ((entries != null) && (entries.length > 0)) {    String[][] output=new String[entries.length + 1][showTime ? 3 : 2];    int column=0;    output[0][column++]="KVNO";    if (showTime)     output[0][column++]="Timestamp";    output[0][column++]="Principal";    for (int i=0; i < entries.length; i++) {      column=0;      output[i + 1][column++]=entries[i].getKey().getKeyVersionNumber().toString();      if (showTime)       output[i + 1][column++]=DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT).format(new Date(entries[i].getTimeStamp().getTime()));      String princ=entries[i].getService().toString();      if (showEType) {        int e=entries[i].getKey().getEType();        output[i + 1][column++]=princ + " (" + e+ ":"+ EType.toString(e)+ ")";      } else {        output[i + 1][column++]=princ;      }    }    int[] width=new int[column];    for (int j=0; j < column; j++) {      for (int i=0; i <= entries.length; i++) {        if (output[i][j].length() > width[j]) {          width[j]=output[i][j].length();        }      }      if (j != 0)       width[j]=-width[j];    }    for (int j=0; j < column; j++) {      System.out.printf("%" + width[j] + "s ",output[0][j]);    }    System.out.println();    for (int j=0; j < column; j++) {      for (int k=0; k < Math.abs(width[j]); k++)       System.out.print("-");      System.out.print(" ");    }    System.out.println();    for (int i=0; i < entries.length; i++) {      for (int j=0; j < column; j++) {        System.out.printf("%" + width[j] + "s ",output[i + 1][j]);      }      System.out.println();    }  } else {    System.out.println("0 entry.");  }}  }
class C{  public synchronized void start(){  if (started)   throw new IllegalThreadStateException(getClass().getSimpleName() + " already started !");  if (runners.isEmpty())   throw new NoSuchElementException("No runnable were added to this " + getClass().getSimpleName());  for (  Runner t : runners) {    t.start();  }  started=true;}  }
class C{  public static boolean containsDeepError(PsiElement element){  final ErrorElementVisitor visitor=new ErrorElementVisitor();  element.accept(visitor);  return visitor.containsErrorElement();}  }
class C{  public XMLToken(int context,int startOffset,int endOffset){  this.context=context;  this.startOffset=startOffset;  this.endOffset=endOffset;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:24.483 -0500",hash_original_method="62A24BB1F647222AA978F8E837B2D330",hash_generated_method="D168F58C77AFC7F485C17CA9A1350579") private boolean retryAfterDisconnected(String reason){  boolean retry=true;  if (Phone.REASON_RADIO_TURNED_OFF.equals(reason)) {    retry=false;  }  return retry;}  }
class C{  HPBar(){  super(new LinearScalingModel());  setBackground(Color.DARK_GRAY);  setForeground(Color.WHITE);  setPreferredSize(new Dimension(0,DEFAULT_HEIGHT));  setMinimumSize(getPreferredSize());}  }
class C{  public static void readLines(InputStream stream,Consumer<String> lineProcessor) throws IOException {  try (BufferedReader reader=new BufferedReader(new InputStreamReader(stream))){    String line=null;    while ((line=reader.readLine()) != null) {      lineProcessor.accept(line);    }  } }  }
class C{  public void writeRawByte(final int value) throws IOException {  writeRawByte((byte)value);}  }
class C{  public java.lang.StringBuffer append(java.lang.Object obj){  internal.append(obj);  return this;}  }
class C{  private static String scanArgsData(String[] args,String value){  if (args != null) {    final int N=args.length;    for (int i=0; i < N; i++) {      if (value.equals(args[i])) {        i++;        return i < N ? args[i] : null;      }    }  }  return null;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return OS;case 2:  return UOS;case 3:return MOS;default :return null;}}  }
class C{  protected void output(String s){  out.println(s);}  }
class C{  public static void modifyRequestToAcceptGzipResponse(HttpRequest request){  request.addHeader("Accept-Encoding","gzip");}  }
class C{  private final boolean compareAndSetHead(Node update){  return unsafe.compareAndSwapObject(this,headOffset,null,update);}  }
class C{  public boolean onTouchEvent(MotionEvent event){  if (mController == null) {    return false;  }  return mController.onTouchEvent(event);}  }
class C{  protected Node newNode(){  return new SVGOMMissingGlyphElement();}  }
class C{  public void addActionListener(EventListener listener){  addEventListener(Events.ON_CHECK,listener);}  }
class C{  static void go(int shortFall) throws Exception {  InputStream r=new BufferedInputStream(new Source(shortFall),10);  byte[] buf=new byte[8];  int n1=r.read(buf);  int n2=r.read(buf);  System.err.println("Shortfall " + shortFall + ": Read "+ n1+ ", then "+ n2+ " bytes");  if (n1 != buf.length)   throw new Exception("First read returned " + n1);  if (n2 != buf.length)   throw new Exception("Second read returned " + n2);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (strictMode: ");  result.append(strictMode);  result.append(')');  return result.toString();}  }
class C{  public ImmutableLocation add(ImmutableLocation l){  return new ImmutableLocation(x + l.x,y + l.y,z + l.z,w);}  }
class C{  public static <T extends Enum<T>>T valueOf(Class<T> enumType,String name){  if (enumType == null) {    throw new NullPointerException("enumType == null");  } else   if (name == null) {    throw new NullPointerException("name == null");  }  T[] values=getSharedConstants(enumType);  if (values == null) {    throw new IllegalArgumentException(enumType + " is not an enum type");  }  for (  T value : values) {    if (name.equals(value.name())) {      return value;    }  }  throw new IllegalArgumentException(name + " is not a constant in " + enumType.getName());}  }
class C{  public void createPackageContents(){  if (isCreated)   return;  isCreated=true;  informationModelEClass=createEClass(INFORMATION_MODEL);  createEReference(informationModelEClass,INFORMATION_MODEL__PROPERTIES);  functionblockPropertyEClass=createEClass(FUNCTIONBLOCK_PROPERTY);  createEAttribute(functionblockPropertyEClass,FUNCTIONBLOCK_PROPERTY__NAME);  createEAttribute(functionblockPropertyEClass,FUNCTIONBLOCK_PROPERTY__DESCRIPTION);  createEReference(functionblockPropertyEClass,FUNCTIONBLOCK_PROPERTY__TYPE);}  }
class C{  private int calculateRealLength(final int position,final int length){  return length != -1 ? length : m_text.length() - position;}  }
class C{  private Collection<Insanity> checkValueMismatch(MapOfSets<Integer,CacheEntry> valIdToItems,MapOfSets<ReaderField,Integer> readerFieldToValIds,Set<ReaderField> valMismatchKeys){  final List<Insanity> insanity=new ArrayList<>(valMismatchKeys.size() * 3);  if (!valMismatchKeys.isEmpty()) {    final Map<ReaderField,Set<Integer>> rfMap=readerFieldToValIds.getMap();    final Map<Integer,Set<CacheEntry>> valMap=valIdToItems.getMap();    for (    final ReaderField rf : valMismatchKeys) {      final List<CacheEntry> badEntries=new ArrayList<>(valMismatchKeys.size() * 2);      for (      final Integer value : rfMap.get(rf)) {        for (        final CacheEntry cacheEntry : valMap.get(value)) {          badEntries.add(cacheEntry);        }      }      CacheEntry[] badness=new CacheEntry[badEntries.size()];      badness=badEntries.toArray(badness);      insanity.add(new Insanity(InsanityType.VALUEMISMATCH,"Multiple distinct value objects for " + rf.toString(),badness));    }  }  return insanity;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.LITERAL_OR_COMPUTED_PROPERTY_NAME__KIND:    return kind != KIND_EDEFAULT;case N4JSPackage.LITERAL_OR_COMPUTED_PROPERTY_NAME__LITERAL_NAME:  return LITERAL_NAME_EDEFAULT == null ? literalName != null : !LITERAL_NAME_EDEFAULT.equals(literalName);case N4JSPackage.LITERAL_OR_COMPUTED_PROPERTY_NAME__COMPUTED_NAME:return COMPUTED_NAME_EDEFAULT == null ? computedName != null : !COMPUTED_NAME_EDEFAULT.equals(computedName);case N4JSPackage.LITERAL_OR_COMPUTED_PROPERTY_NAME__EXPRESSION:return expression != null;}return super.eIsSet(featureID);}  }
class C{  @RequestMapping(value="/account",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Transactional public ResponseEntity<String> saveAccount(@RequestBody UserDTO userDTO){  return userRepository.findOneByLogin(userDTO.getLogin()).filter(null).map(null).orElseGet(null);}  }
class C{  @Override protected void processSuccess(Response response,Request request,TransactionID transactionID){  super.processSuccess(response,request,transactionID);  LifetimeAttribute lifetimeAttribute;  int lifetime=-1;switch (response.getMessageType()) {case Message.ALLOCATE_RESPONSE:    lifetimeAttribute=(LifetimeAttribute)response.getAttribute(Attribute.LIFETIME);  lifetime=(lifetimeAttribute == null) ? (10 * 60) : lifetimeAttribute.getLifetime();break;case Message.REFRESH_RESPONSE:lifetimeAttribute=(LifetimeAttribute)response.getAttribute(Attribute.LIFETIME);if (lifetimeAttribute != null) lifetime=lifetimeAttribute.getLifetime();break;}if (lifetime >= 0) {setSendKeepAliveMessageInterval(1000L * lifetime);}Object applicationData=transactionID.getApplicationData();if (applicationData instanceof RelayedCandidateDatagramSocket) {((RelayedCandidateDatagramSocket)applicationData).processSuccess(response,request);}}  }
class C{  public void spikeActivation(double ceiling){  activation=ceiling;}  }
class C{  @Override public String toString(){  return "[" + this.getClass().getName() + " proxy="+ _proxy+ "]";}  }
class C{  public CompiledST defineTemplate(String name,String argsS,String template){  if (name.charAt(0) != '/')   name="/" + name;  String[] args=argsS.split(",");  List<FormalArgument> a=new ArrayList<FormalArgument>();  for (  String arg : args) {    a.add(new FormalArgument(arg));  }  return defineTemplate(name,new CommonToken(GroupParser.ID,name),a,template,null);}  }
class C{  public static boolean cleanDirectory(@NonNull File target){  return FileUtil.deleteDir(target) && FileUtil.makeDir(target);}  }
class C{  public void addSegmentPattern(TransitLayer transitLayer,Path currentTransitPath,int pathIndex,ZonedDateTime fromTimeDateZD,List<TransitJourneyID> transitJourneyIDs){  int currentPatternID=currentTransitPath.patterns[pathIndex];  int segmentPatternIdx=0;  for (  SegmentPattern segmentPattern : segmentPatterns) {    if (currentPatternID == segmentPattern.patternIdx) {      int timeIndex=segmentPattern.addTime(transitLayer,currentPatternID,currentTransitPath.alightTimes[pathIndex],fromTimeDateZD,currentTransitPath.trips[pathIndex]);      transitJourneyIDs.add(new TransitJourneyID(segmentPatternIdx,timeIndex));      return;    }    segmentPatternIdx++;  }  final TripPattern tripPattern=currentTransitPath.getPattern(transitLayer,pathIndex);  SegmentPattern segmentPattern=new SegmentPattern(transitLayer,tripPattern,currentTransitPath,pathIndex,fromTimeDateZD);  segmentPatterns.add(segmentPattern);  transitJourneyIDs.add(new TransitJourneyID(segmentPatterns.size() - 1,0));  if (tripPattern.routeIndex >= 0) {    RouteInfo routeInfo=transitLayer.routes.get(tripPattern.routeIndex);    routes.putIfAbsent(tripPattern.routeIndex,Route.from(routeInfo,tripPattern.routeIndex));  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result;  result=new Vector<Option>();  result.addElement(new Option("\tWhether to use TAB as separator instead of comma.\n" + "\t(default: comma)","use-tab",0,"-use-tab"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public byte[] evaluateChallenge(byte[] challenge) throws SaslException {  byte[] response=null;switch (m_state) {case STATE_INITIAL:    if (challenge.length == 0)     throw new SaslException("response = byte[0]"); else     try {      response=createDigestResponse(challenge).getBytes("UTF-8");      m_state=STATE_DIGEST_RESPONSE_SENT;    } catch (    java.io.UnsupportedEncodingException e) {      throw new SaslException("UTF-8 encoding not suppported by platform",e);    }  break;case STATE_DIGEST_RESPONSE_SENT:if (checkServerResponseAuth(challenge)) m_state=STATE_VALID_SERVER_RESPONSE; else {  m_state=STATE_INVALID_SERVER_RESPONSE;  throw new SaslException("Could not validate response-auth " + "value from server");}break;case STATE_VALID_SERVER_RESPONSE:case STATE_INVALID_SERVER_RESPONSE:throw new SaslException("Authentication sequence is complete");case STATE_DISPOSED:throw new SaslException("Client has been disposed");default :throw new SaslException("Unknown client state.");}return response;}  }
class C{  public static void observeTeleop(){  FRCNetworkCommunicationsLibrary.FRCNetworkCommunicationObserveUserProgramTeleop();}  }
class C{  public static StringBuffer parseName(byte[] header,int offset,int length){  StringBuffer result=new StringBuffer(length);  int end=offset + length;  for (int i=offset; i < end; ++i) {    if (header[i] == 0) {      break;    }    result.append((char)header[i]);  }  return result;}  }
class C{  public ECKey(@Nullable EncryptedPrivateKey encryptedPrivateKey,@Nullable byte[] pubKey,KeyCrypter keyCrypter){  this((byte[])null,pubKey);  this.keyCrypter=Preconditions.checkNotNull(keyCrypter);  this.encryptedPrivateKey=encryptedPrivateKey;}  }
class C{  public HeaderElement(int headLevel,Element e){  super("h" + headLevel,e);  if (headLevel < 1)   throw new IllegalArgumentException("HeaderElement: headLevel = " + headLevel);}  }
class C{  public synchronized long allocate(int length){  int blocks=getBlockCount(length);  BlockRange x=null;  for (  BlockRange b : freeSpace) {    if (b.blocks >= blocks) {      x=b;      break;    }  }  long pos=getPos(x.start);  if (x.blocks == blocks) {    freeSpace.remove(x);  } else {    x.start+=blocks;    x.blocks-=blocks;  }  return pos;}  }
class C{  public SimpleNode removeChild(int n){  int numChildren=getChildCount();  if (n >= numChildren) {    throw new IllegalArgumentException("Nonexistent child");  }  return removeChild(child[n]);}  }
class C{  public final void testNumberWithContextAndResourceIdParameters(){  assertNotNull(Validators.number(getContext(),android.R.string.cancel));}  }
class C{  public Instrumenter attachApproximationSetCollector(){  includeApproximationSet=true;  return this;}  }
class C{  public void prepareSession(String remoteAddress,int remotePort,MediaOutput renderer,Format format,RtpStreamListener rtpStreamListener) throws RtpException {  try {    inputStream=new RtpInputStream(remoteAddress,remotePort,localPort,format);    inputStream.addRtpStreamListener(rtpStreamListener);    inputStream.open();    MediaRendererStream outputStream=new MediaRendererStream(renderer);    outputStream.open();    Codec[] codecChain=MediaRegistry.generateDecodingCodecChain(format.getCodec());    processor=new Processor(inputStream,outputStream,codecChain);  } catch (  Exception e) {    throw new RtpException("Can't prepare resources");  }}  }
class C{  public void testSetterInheritance() throws Exception {  ObjectMapper m=new ObjectMapper();  BeanSubClass result=m.readValue("{ \"x\":1, \"z\" : 3, \"y\" : 2 }",BeanSubClass.class);  assertEquals(1,result._x);  assertEquals(2,result._y);  assertEquals(3,result._z);}  }
class C{  @Override public DefaultWorkspaceClient workspace(){  return new DefaultWorkspaceClient(url,authenticationManager);}  }
class C{  public final int index(){  return bcIndex;}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.OPERATION_DEFINITION;}  }
class C{  public Ed25519DsaSigner(final KeyPair keyPair){  this.keyPair=keyPair;}  }
class C{  private String nextToken(ExtInputStreamReader r,boolean readNewline,boolean ignoreCommas,boolean ignoreColons,boolean ignoreWhiteSpaces) throws IOException {  boolean newline=false;  StringBuilder currentToken=new StringBuilder();  char c=r.readCharFromReader();  while (((byte)c) != -1 && isWhiteSpace(c)) {    newline=newline || (c == 10 || c == 13 || c == ';' || ((c == ',') && (!ignoreCommas)) || (c == '>') || (c == '+'));    if (!readNewline && newline) {      return null;    }    c=r.readCharFromReader();  }  if (c == ';' && readNewline) {    c=r.readCharFromReader();    while (((byte)c) != -1 && isWhiteSpace(c)) {      newline=newline || (c == 10 || c == 13 || c == ';' || ((c == ',') && (!ignoreCommas)) || (c == '>') || (c == '+'));      c=r.readCharFromReader();    }  }  char segment='\0';  while (((byte)c) != -1 && ((!isWhiteSpace(c)) || (segment != '\0') || (ignoreWhiteSpaces)) && c != ';' && ((c != ':') || (segment != '\0') || (ignoreColons)) && ((c != ',') || (segment != '\0') || (ignoreCommas)) && (((c != '>') && (c != '+')) || (segment != '\0'))) {    if ((segment == '\0') && (c == '/')) {      c=handleCSSComment(r);    }    if ((c == '}' || c == '{' || c == '*') && (segment == '\0')) {      newline=true;      if (currentToken.length() == 0) {        if (!readNewline) {          r.unreadChar(c);          return null;        }        return "" + c;      }      r.unreadChar(c);      break;    }    currentToken.append(c);    if (c == '(') {      segment=')';    } else     if ((segment == '\0') && ((c == '\"') || (c == '\''))) {      segment=c;    } else     if (c == segment) {      segment='\0';    }    c=r.readCharFromReader();  }  if (((c == ',') && (!ignoreCommas)) || (c == '>') || (c == '+')) {    currentToken.append(c);  }  if ((!readNewline) && (c == ';') && (currentToken.length() != 0)) {    r.unreadChar(c);  }  if (currentToken.length() == 0) {    return null;  }  return currentToken.toString();}  }
class C{  public void sendNotification(String title,String message) throws IOException {  PacketNOTIFICATION p;  if (hasIcon)   p=new PacketNOTIFICATION(title,message,iconType,iconData); else   p=new PacketNOTIFICATION(title,message);  p.send(hostAddress,hostPort);}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public void updateUI(){  setUI((ButtonUI)UIManager.getUI(this));}  }
class C{  public GT_MetaGenerated_Item(String aUnlocalized,short aOffset,short aItemAmount){  super(aUnlocalized);  setCreativeTab(GregTech_API.TAB_GREGTECH_MATERIALS);  setHasSubtypes(true);  setMaxDamage(0);  mEnabledItems=new BitSet(aItemAmount);  mVisibleItems=new BitSet(aItemAmount);  mOffset=(short)Math.min(32766,aOffset);  mItemAmount=(short)Math.min(aItemAmount,32766 - mOffset);  mIconList=new IIcon[aItemAmount][1];  sInstances.put(getUnlocalizedName(),this);}  }
class C{  public void suspend() throws SystemException {  XAResource xar=null;synchronized (this.resourceMap) {    Iterator iterator=resourceMap.entrySet().iterator();    Map.Entry entry;    Boolean isActive=Boolean.FALSE;    while (iterator.hasNext()) {      entry=(Map.Entry)iterator.next();      xar=(XAResource)entry.getKey();      isActive=(Boolean)entry.getValue();      if (isActive.booleanValue())       try {        xar.end(xid,XAResource.TMSUSPEND);        entry.setValue(Boolean.FALSE);      } catch (      Exception e) {        String exception=LocalizedStrings.GlobalTransaction_ERROR_WHILE_DELISTING_XARESOURCE_0_1.toLocalizedString(new Object[]{e," " + (e instanceof XAException ? ("Error Code =" + ((XAException)e).errorCode) : "")});        LogWriterI18n writer=TransactionUtils.getLogWriterI18n();        if (VERBOSE)         writer.fine(exception);        throw new SystemException(exception);      }    }  }}  }
class C{  public SignerInfoGenerator build(ContentSigner contentSigner,byte[] subjectKeyIdentifier) throws OperatorCreationException {  SignerIdentifier sigId=new SignerIdentifier(new DEROctetString(subjectKeyIdentifier));  return createGenerator(contentSigner,sigId);}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() == bCancel)   dispose(); else   if (m_C_PaySelection_ID <= 0)   return; else   if (e.getSource() == fPaymentRule)   loadPaymentRuleInfo(); else   if (e.getSource() == bExport)   cmd_export(); else   if (e.getSource() == bProcess)   cmd_EFT(); else   if (e.getSource() == bPrint)   cmd_print();}  }
class C{  void addMessage(long msgTimestamp,String message){  if (msgTimestamp - m_lastLogTimestamp > LOG_INTERVAL) {    m_intervalLogCount=0;    s_logger.warn("Unexpected source " + m_source + ", statistics"+ ": totalCount="+ m_totalCount+ ", deltaCount="+ (m_totalCount - m_prevTotalCount)+ ", intervalSize="+ (msgTimestamp - m_lastLogTimestamp));    m_lastLogTimestamp=msgTimestamp;    m_prevTotalCount=m_totalCount;  }  if (m_intervalLogCount < INTERVAL_MAX_LOG) {    s_logger.warn("Unexpected source " + m_source + ", log message:"+ message);    m_intervalLogCount++;  }  m_totalCount++;}  }
class C{  public static double firstDerivative(UnivariateFunction f,double x){  double h=MachineAccuracy.SQRT_EPSILON * (Math.abs(x) + 1.0);  return (f.evaluate(x + h) - f.evaluate(x - h)) / (2.0 * h);}  }
class C{  public Out(Socket socket){  try {    OutputStream os=socket.getOutputStream();    OutputStreamWriter osw=new OutputStreamWriter(os,CHARSET_NAME);    out=new PrintWriter(osw,true);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if ((argNum > 3) || (argNum < 2))   reportWrongNumberArgs();}  }
class C{  public void test_capacity_001(){  final int CAPACITY=5;  TxDag dag=new TxDag(CAPACITY);  Object[] tx=new String[CAPACITY];  assertEquals("capacity",0,dag.size());  assertEquals("size",0,dag.size());  for (int i=0; i < CAPACITY; i++) {    tx[i]="" + i;    dag.lookup(tx[i],true);    assertEquals("capacity",CAPACITY,dag.capacity());    assertEquals("size",i + 1,dag.size());  }  assertEquals("capacity",CAPACITY,dag.size());  assertEquals("size",CAPACITY,dag.size());  try {    dag.lookup("" + CAPACITY,true);    fail("Expecting: " + IllegalStateException.class);  } catch (  IllegalStateException ex) {    log.info("Ignoring expected exception: " + ex);  }}  }
class C{  private void resetTimer(){  if (fadeOutTime > 0) {    if (timer == null || timer._run == false) {      timer=new FadeTimer();      timer.execute();    } else {      timer.resetTimer();    }  }}  }
class C{  static public void resolveSids(String authorityServerName,NtlmPasswordAuthentication auth,SID[] sids) throws IOException {  ArrayList list=new ArrayList(sids.length);  int si;synchronized (sid_cache) {    for (si=0; si < sids.length; si++) {      SID sid=(SID)sid_cache.get(sids[si]);      if (sid != null) {        sids[si].type=sid.type;        sids[si].domainName=sid.domainName;        sids[si].acctName=sid.acctName;      } else {        list.add(sids[si]);      }    }    if (list.size() > 0) {      sids=(SID[])list.toArray(new SID[0]);      SID.resolveSids0(authorityServerName,auth,sids);      for (si=0; si < sids.length; si++) {        sid_cache.put(sids[si],sids[si]);      }    }  }}  }
class C{  public static XObject eval(Node contextNode,String str,Node namespaceNode) throws TransformerException {  XPathContext xpathSupport=new XPathContext(false);  PrefixResolverDefault prefixResolver=new PrefixResolverDefault((namespaceNode.getNodeType() == Node.DOCUMENT_NODE) ? ((Document)namespaceNode).getDocumentElement() : namespaceNode);  XPath xpath=new XPath(str,null,prefixResolver,XPath.SELECT,null);  int ctxtNode=xpathSupport.getDTMHandleFromNode(contextNode);  return xpath.execute(xpathSupport,ctxtNode,prefixResolver);}  }
class C{  private boolean performWork(Trx trx) throws Exception {  log.info(m_node + " [" + trx.getTrxName()+ "]");  m_docStatus=null;  if (m_node.getPriority() != 0)   setPriority(m_node.getPriority());  String action=m_node.getAction();  if (MWFNode.ACTION_WaitSleep.equals(action)) {    log.fine("Sleep:WaitTime=" + m_node.getWaitTime());    if (m_node.getWaitingTime() == 0)     return true;    Calendar cal=Calendar.getInstance();    cal.add(m_node.getDurationCalendarField(),m_node.getWaitTime());    setEndWaitTime(new Timestamp(cal.getTimeInMillis()));    return false;  } else   if (MWFNode.ACTION_DocumentAction.equals(action)) {    log.fine("DocumentAction=" + m_node.getDocAction());    getPO(trx);    if (m_po == null)     throw new Exception("Persistent Object not found - AD_Table_ID=" + getAD_Table_ID() + ", Record_ID="+ getRecord_ID());    boolean success=false;    String processMsg=null;    DocAction doc=null;    if (m_po instanceof DocAction) {      doc=(DocAction)m_po;      try {        success=doc.processIt(m_node.getDocAction());        setTextMsg(doc.getSummary());        processMsg=doc.getProcessMsg();        if (DocAction.ACTION_Prepare.equals(m_node.getDocAction()) || DocAction.ACTION_Complete.equals(m_node.getDocAction()) || success)         m_docStatus=doc.getDocStatus();      } catch (      Exception e) {        if (m_process != null)         m_process.setProcessMsg(e.getLocalizedMessage());        throw e;      }      if (m_process != null)       m_process.setProcessMsg(processMsg);    } else     throw new IllegalStateException("Persistent Object not DocAction - " + m_po.getClass().getName() + " - AD_Table_ID="+ getAD_Table_ID()+ ", Record_ID="+ getRecord_ID());    if (!m_po.save()) {      success=false;      processMsg="SaveError";    }    if (!success) {      if (processMsg == null || processMsg.length() == 0) {        processMsg="PerformWork Error - " + m_node.toStringX();        if (doc != null)         processMsg+=" - DocStatus=" + doc.getDocStatus();      }      throw new Exception(processMsg);    }    return success;  } else   if (MWFNode.ACTION_AppsReport.equals(action)) {    log.fine("Report:AD_Process_ID=" + m_node.getAD_Process_ID());    MProcess process=MProcess.get(getCtx(),m_node.getAD_Process_ID());    process.set_TrxName(trx != null ? trx.getTrxName() : null);    if (!process.isReport() || process.getAD_ReportView_ID() == 0)     throw new IllegalStateException("Not a Report AD_Process_ID=" + m_node.getAD_Process_ID());    ProcessInfo pi=new ProcessInfo(m_node.getName(true),m_node.getAD_Process_ID(),getAD_Table_ID(),getRecord_ID());    pi.setAD_User_ID(getAD_User_ID());    pi.setAD_Client_ID(getAD_Client_ID());    MPInstance pInstance=new MPInstance(process,getRecord_ID());    pInstance.set_TrxName(trx != null ? trx.getTrxName() : null);    fillParameter(pInstance,trx);    pi.setAD_PInstance_ID(pInstance.getAD_PInstance_ID());    ReportEngine re=ReportEngine.get(getCtx(),pi);    if (re == null)     throw new IllegalStateException("Cannot create Report AD_Process_ID=" + m_node.getAD_Process_ID());    File report=re.getPDF();    int AD_Message_ID=753;    MNote note=new MNote(getCtx(),AD_Message_ID,getAD_User_ID(),trx.getTrxName());    note.setTextMsg(m_node.getName(true));    note.setDescription(m_node.getDescription(true));    note.setRecord(getAD_Table_ID(),getRecord_ID());    note.saveEx();    MAttachment attachment=new MAttachment(getCtx(),MNote.Table_ID,note.getAD_Note_ID(),get_TrxName());    attachment.addEntry(report);    attachment.setTextMsg(m_node.getName(true));    attachment.saveEx();    return true;  } else   if (MWFNode.ACTION_AppsProcess.equals(action)) {    log.fine("Process:AD_Process_ID=" + m_node.getAD_Process_ID());    MProcess process=MProcess.get(getCtx(),m_node.getAD_Process_ID());    MPInstance pInstance=new MPInstance(process,getRecord_ID());    fillParameter(pInstance,trx);    ProcessInfo pi=new ProcessInfo(m_node.getName(true),m_node.getAD_Process_ID(),getAD_Table_ID(),getRecord_ID());    pi.setAD_User_ID(getAD_User_ID());    pi.setAD_Client_ID(getAD_Client_ID());    pi.setAD_PInstance_ID(pInstance.getAD_PInstance_ID());    return process.processItWithoutTrxClose(pi,trx);  } else   if (MWFNode.ACTION_EMail.equals(action)) {    log.fine("EMail:EMailRecipient=" + m_node.getEMailRecipient());    getPO(trx);    if (m_po == null)     throw new Exception("Persistent Object not found - AD_Table_ID=" + getAD_Table_ID() + ", Record_ID="+ getRecord_ID());    if (m_po instanceof DocAction) {      m_emails=new ArrayList<String>();      sendEMail();      setTextMsg(m_emails.toString());    } else {      MClient client=MClient.get(getCtx(),getAD_Client_ID());      MMailText mailtext=new MMailText(getCtx(),getNode().getR_MailText_ID(),null);      String subject=getNode().getDescription() + ": " + mailtext.getMailHeader();      String message=mailtext.getMailText(true) + "\n-----\n" + getNodeHelp();      String to=getNode().getEMail();      client.sendEMail(to,subject,message,null);    }    return true;  } else   if (MWFNode.ACTION_SetVariable.equals(action)) {    String value=m_node.getAttributeValue();    log.fine("SetVariable:AD_Column_ID=" + m_node.getAD_Column_ID() + " to "+ value);    MColumn column=m_node.getColumn();    int dt=column.getAD_Reference_ID();    return setVariable(value,dt,null,trx);  } else   if (MWFNode.ACTION_SubWorkflow.equals(action)) {    log.warning("Workflow:AD_Workflow_ID=" + m_node.getAD_Workflow_ID());    log.warning("Start WF Instance is not implemented yet");  } else   if (MWFNode.ACTION_UserChoice.equals(action)) {    log.fine("UserChoice:AD_Column_ID=" + m_node.getAD_Column_ID());    if (m_node.isUserApproval() && getPO(trx) instanceof DocAction) {      DocAction doc=(DocAction)m_po;      boolean autoApproval=false;      if (isInvoker()) {        int startAD_User_ID=Env.getAD_User_ID(getCtx());        if (startAD_User_ID == 0)         startAD_User_ID=doc.getDoc_User_ID();        int nextAD_User_ID=getApprovalUser(startAD_User_ID,doc.getC_Currency_ID(),doc.getApprovalAmt(),doc.getAD_Org_ID(),startAD_User_ID == doc.getDoc_User_ID());        autoApproval=startAD_User_ID == nextAD_User_ID;        if (!autoApproval)         setAD_User_ID(nextAD_User_ID);      } else {        MWFResponsible resp=getResponsible();        if (resp.isHuman()) {          autoApproval=resp.getAD_User_ID() == Env.getAD_User_ID(getCtx());          if (!autoApproval && resp.getAD_User_ID() != 0)           setAD_User_ID(resp.getAD_User_ID());        } else         if (resp.isRole()) {          MUserRoles[] urs=MUserRoles.getOfRole(getCtx(),resp.getAD_Role_ID());          for (int i=0; i < urs.length; i++) {            if (urs[i].getAD_User_ID() == Env.getAD_User_ID(getCtx())) {              autoApproval=true;              break;            }          }        } else         if (resp.isOrganization()) {          throw new AdempiereException("Support not implemented for " + resp);        } else {          throw new AdempiereException("@NotSupported@ " + resp);        }      }      if (autoApproval && doc.processIt(DocAction.ACTION_Approve) && doc.save())       return true;    }    return false;  } else   if (MWFNode.ACTION_UserForm.equals(action)) {    log.fine("Form:AD_Form_ID=" + m_node.getAD_Form_ID());    return false;  } else   if (MWFNode.ACTION_SmartBrowse.equals(action)) {    log.fine("Form:AD_Browse_ID=" + m_node.getAD_Browse_ID());    return false;  } else   if (MWFNode.ACTION_UserWindow.equals(action)) {    log.fine("Window:AD_Window_ID=" + m_node.getAD_Window_ID());    return false;  }  throw new IllegalArgumentException("Invalid Action (Not Implemented) =" + action);}  }
class C{  public void seek(long pos) throws IOException {  checkInputFile().seek(pos);}  }
class C{  public static boolean isAuthenticated(){  SecurityContext securityContext=SecurityContextHolder.getContext();  Collection<? extends GrantedAuthority> authorities=securityContext.getAuthentication().getAuthorities();  if (authorities != null) {    for (    GrantedAuthority authority : authorities) {      if (authority.getAuthority().equals(AuthoritiesConstants.ANONYMOUS)) {        return false;      }    }  }  return true;}  }
class C{  public NoSubscriptionServersAvailableException(String message,Throwable cause){  super(message,cause);}  }
class C{  private boolean traverse(Tree tree,NodeRef node) throws NegativeBranchLengthException {  boolean update=false;  int nodeNum=node.getNumber();  NodeRef parent=tree.getParent(node);  if (parent != null && updateNode[nodeNum]) {    double branchRate=branchRateModel.getBranchRate(tree,node);    double branchTime=branchRate * (tree.getNodeHeight(parent) - tree.getNodeHeight(node));    if (branchTime < 0.0) {      if (!DEBUG) {        throw new RuntimeException("Negative branch length: " + branchTime);      } else {        throw new NegativeBranchLengthException();      }    }    for (int i=0; i < categoryCount; i++) {      double branchLength=siteModel.getRateForCategory(i) * branchTime;      siteModel.getSubstitutionModel().getTransitionProbabilities(branchLength,probabilities);      likelihoodCore.setNodeMatrix(nodeNum,i,probabilities);    }    update=true;  }  if (!tree.isExternal(node)) {    int nodeCount=tree.getChildCount(node);    if (nodeCount != 2)     throw new RuntimeException("binary trees only!");    NodeRef child1=tree.getChild(node,0);    boolean update1=traverse(tree,child1);    NodeRef child2=tree.getChild(node,1);    boolean update2=traverse(tree,child2);    if (update1 || update2) {      int childNum1=child1.getNumber();      int childNum2=child2.getNumber();      if (integrateAcrossCategories) {        likelihoodCore.calculatePartials(childNum1,childNum2,nodeNum);      } else {        likelihoodCore.calculatePartials(childNum1,childNum2,nodeNum,siteCategories);      }      if (parent == null) {        double[] frequencies=frequencyModel.getFrequencies();        if (integrateAcrossCategories) {          double[] proportions=siteModel.getCategoryProportions();          likelihoodCore.integratePartials(nodeNum,proportions,rootPartials);        } else {          likelihoodCore.getPartials(nodeNum,rootPartials);        }        likelihoodCore.calculateLogLikelihoods(rootPartials,frequencies,patternLogLikelihoods);      }      update=true;    }  }  return update;}  }
class C{  private static void thresholdBlock(byte[] luminances,int xoffset,int yoffset,int threshold,int stride,BitMatrix matrix){  for (int y=0, offset=yoffset * stride + xoffset; y < BLOCK_SIZE; y++, offset+=stride) {    for (int x=0; x < BLOCK_SIZE; x++) {      if ((luminances[offset + x] & 0xFF) <= threshold) {        matrix.set(xoffset + x,yoffset + y);      }    }  }}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response createConsistencyGroupSnapshot(@PathParam("tenant_id") String openstackTenantId,final ConsistencyGroupSnapshotCreateRequest param,@HeaderParam("X-Cinder-V1-Call") String isV1Call,@Context HttpHeaders header){  final String consistencyGroupId=param.cgsnapshot.consistencygroup_id;  final BlockConsistencyGroup consistencyGroup=findConsistencyGroup(consistencyGroupId,openstackTenantId);  if (consistencyGroup == null) {    _log.error("Not Found : No Such Consistency Group Found {}",consistencyGroupId);    return CinderApiUtils.createErrorResponse(404,"Not Found : No Such Consistency Group Found");  } else   if (!consistencyGroupId.equals(CinderApiUtils.splitString(consistencyGroup.getId().toString(),":",3))) {    _log.error("Bad Request : Invalid Snapshot Id {} : Please enter valid or full Id",consistencyGroupId);    return CinderApiUtils.createErrorResponse(400,"Bad Request : No such consistency id exist, Please enter valid or full Id");  }  if (!isSnapshotCreationpermissible(consistencyGroup)) {    _log.error("Bad Request : vpool not being configured for the snapshots creation");    return CinderApiUtils.createErrorResponse(400,"Bad Request : vpool not being configured for the snapshots creation");  }  if (!consistencyGroup.created()) {    CinderApiUtils.createErrorResponse(400,"No such consistency group created");  }  Project project=getCinderHelper().getProject(openstackTenantId,getUserFromContext());  URI cgStorageControllerURI=consistencyGroup.getStorageController();  if (!NullColumnValueGetter.isNullURI(cgStorageControllerURI)) {    StorageSystem cgStorageController=_dbClient.queryObject(StorageSystem.class,cgStorageControllerURI);    if ((DiscoveredDataObject.Type.vplex.name().equals(cgStorageController.getSystemType())) && (!consistencyGroup.checkForType(Types.LOCAL))) {      CinderApiUtils.createErrorResponse(400,"can't create snapshot for VPLEX");    }  }  BlockServiceApi blockServiceApiImpl=getBlockServiceImpl(consistencyGroup);  List<Volume> volumeList=blockServiceApiImpl.getActiveCGVolumes(consistencyGroup);  _log.info("Active CG volume list : " + volumeList);  String taskId=UUID.randomUUID().toString();  String snapshotType=BlockSnapshot.TechnologyType.NATIVE.toString();  if (consistencyGroup.checkForType(BlockConsistencyGroup.Types.RP)) {    snapshotType=BlockSnapshot.TechnologyType.RP.toString();  } else   if ((!volumeList.isEmpty()) && (volumeList.get(0).checkForSRDF())) {    snapshotType=BlockSnapshot.TechnologyType.SRDF.toString();  }  Volume snapVolume=null;  if (consistencyGroup.checkForType(BlockConsistencyGroup.Types.RP)) {    for (    Volume volumeToSnap : volumeList) {      if (volumeToSnap.getPersonality() != null && volumeToSnap.getPersonality().equals(Volume.PersonalityTypes.SOURCE.toString())) {        snapVolume=volumeToSnap;        break;      }    }  } else   if (!volumeList.isEmpty()) {    snapVolume=volumeList.get(0);  }  String snapshotName=param.cgsnapshot.name;  blockServiceApiImpl.validateCreateSnapshot(snapVolume,volumeList,snapshotType,snapshotName,getFullCopyManager());  Boolean createInactive=Boolean.FALSE;  Boolean readOnly=Boolean.FALSE;  List<URI> snapIdList=new ArrayList<URI>();  List<BlockSnapshot> snapshotList=new ArrayList<BlockSnapshot>();  TaskList response=new TaskList();  snapshotList.addAll(blockServiceApiImpl.prepareSnapshots(volumeList,snapshotType,snapshotName,snapIdList,taskId));  for (  BlockSnapshot snapshot : snapshotList) {    response.getTaskList().add(toTask(snapshot,taskId));  }  blockServiceApiImpl.createSnapshot(snapVolume,snapIdList,snapshotType,createInactive,readOnly,taskId);  auditBlockConsistencyGroup(OperationTypeEnum.CREATE_CONSISTENCY_GROUP_SNAPSHOT,AuditLogManager.AUDITLOG_SUCCESS,AuditLogManager.AUDITOP_BEGIN,param.cgsnapshot.name,consistencyGroup.getId().toString());  ConsistencyGroupSnapshotCreateResponse cgSnapshotCreateRes=new ConsistencyGroupSnapshotCreateResponse();  for (  TaskResourceRep rep : response.getTaskList()) {    URI snapshotUri=rep.getResource().getId();    BlockSnapshot snap=_dbClient.queryObject(BlockSnapshot.class,snapshotUri);    snap.setId(snapshotUri);    snap.setConsistencyGroup(consistencyGroup.getId());    snap.setLabel(snapshotName);    if (snap != null) {      StringMap extensions=snap.getExtensions();      if (extensions == null) {        extensions=new StringMap();      }      extensions.put("status",CinderConstants.ComponentStatus.CREATING.getStatus().toLowerCase());      extensions.put("taskid",rep.getId().toString());      snap.setExtensions(extensions);      ScopedLabelSet tagSet=new ScopedLabelSet();      snap.setTag(tagSet);      tagSet.add(new ScopedLabel(project.getTenantOrg().getURI().toString(),CinderApiUtils.splitString(snapshotUri.toString(),":",3)));    }    _dbClient.updateObject(snap);    cgSnapshotCreateRes.id=CinderApiUtils.splitString(snapshotUri.toString(),":",3);    cgSnapshotCreateRes.name=param.cgsnapshot.name;  }  return CinderApiUtils.getCinderResponse(cgSnapshotCreateRes,header,true,CinderConstants.STATUS_OK);}  }
class C{  public static Filter parseFrom(final byte[] pbBytes) throws DeserializationException {  ByteArrayDataInput byteArrayDataInput=ByteStreams.newDataInput(pbBytes);  RowValueFilter filter=new RowValueFilter();  try {    filter.readFields(byteArrayDataInput);  } catch (  IOException e) {    LOG.error("Got error to deserialize RowValueFilter from PB bytes",e);    throw new DeserializationException(e);  }  return filter;}  }
class C{  @Override public int[][] multiResultsetWins(int comparisonColumn,int[][] nonSigWin) throws Exception {  int numResultsets=getNumResultsets();  int[][] win=new int[numResultsets][numResultsets];  for (int i=0; i < numResultsets; i++) {    for (int j=i + 1; j < numResultsets; j++) {      System.err.print("Comparing (" + (i + 1) + ") with ("+ (j + 1)+ ")\r");      System.err.flush();      for (int k=0; k < getNumDatasets(); k++) {        try {          PairedStats pairedStats=calculateStatistics(m_DatasetSpecifiers.specifier(k),i,j,comparisonColumn);          if (pairedStats.differencesSignificance < 0) {            win[i][j]++;          } else           if (pairedStats.differencesSignificance > 0) {            win[j][i]++;          }          if (pairedStats.differencesStats.mean < 0) {            nonSigWin[i][j]++;          } else           if (pairedStats.differencesStats.mean > 0) {            nonSigWin[j][i]++;          }        } catch (        Exception ex) {          System.err.println(ex.getMessage());        }      }    }  }  return win;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public static boolean validateAndCreateZkPath(ZooKeeper zkHandle,String path,byte[] nodeData) throws KeeperException, InterruptedException {  if (!zkPathExists(zkHandle,path)) {    zkHandle.create(path,nodeData,ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);    logger.info("Created ZK Path " + path);  }  return true;}  }
class C{  public boolean isRegistered(){  Object oo=get_Value(COLUMNNAME_IsRegistered);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.868 -0500",hash_original_method="3093818BF79083B0FD2B917354862E11",hash_generated_method="1C060EFB703FE482F85284AE10D6F2E9") public static String copyValueOf(char[] data,int start,int length){  return new String(data,start,length);}  }
class C{  @Override public void buildEvaluator(Instances data) throws Exception {  int z, totalInstances;  Random r=new Random(m_seed);  getCapabilities().testWithFail(data);  m_trainInstances=data;  m_classIndex=m_trainInstances.classIndex();  m_numAttribs=m_trainInstances.numAttributes();  m_numInstances=m_trainInstances.numInstances();  if (m_trainInstances.attribute(m_classIndex).isNumeric()) {    m_numericClass=true;  } else {    m_numericClass=false;  }  if (!m_numericClass) {    m_numClasses=m_trainInstances.attribute(m_classIndex).numValues();  } else {    m_ndc=0;    m_numClasses=1;    m_nda=new double[m_numAttribs];    m_ndcda=new double[m_numAttribs];  }  if (m_weightByDistance) {    m_weightsByRank=new double[m_Knn];    for (int i=0; i < m_Knn; i++) {      m_weightsByRank[i]=Math.exp(-((i / (double)m_sigma) * (i / (double)m_sigma)));    }  }  m_weights=new double[m_numAttribs];  m_karray=new double[m_numClasses][m_Knn][2];  if (!m_numericClass) {    m_classProbs=new double[m_numClasses];    for (int i=0; i < m_numInstances; i++) {      m_classProbs[(int)m_trainInstances.instance(i).value(m_classIndex)]++;    }    for (int i=0; i < m_numClasses; i++) {      m_classProbs[i]/=m_numInstances;    }  }  m_worst=new double[m_numClasses];  m_index=new int[m_numClasses];  m_stored=new int[m_numClasses];  m_minArray=new double[m_numAttribs];  m_maxArray=new double[m_numAttribs];  for (int i=0; i < m_numAttribs; i++) {    m_minArray[i]=m_maxArray[i]=Double.NaN;  }  for (int i=0; i < m_numInstances; i++) {    updateMinMax(m_trainInstances.instance(i));  }  if ((m_sampleM > m_numInstances) || (m_sampleM < 0)) {    totalInstances=m_numInstances;  } else {    totalInstances=m_sampleM;  }  for (int i=0; i < totalInstances; i++) {    if (totalInstances == m_numInstances) {      z=i;    } else {      z=r.nextInt() % m_numInstances;    }    if (z < 0) {      z*=-1;    }    if (!(m_trainInstances.instance(z).isMissing(m_classIndex))) {      for (int j=0; j < m_numClasses; j++) {        m_index[j]=m_stored[j]=0;        for (int k=0; k < m_Knn; k++) {          m_karray[j][k][0]=m_karray[j][k][1]=0;        }      }      findKHitMiss(z);      if (m_numericClass) {        updateWeightsNumericClass(z);      } else {        updateWeightsDiscreteClass(z);      }    }  }  for (int i=0; i < m_numAttribs; i++) {    if (i != m_classIndex) {      if (m_numericClass) {        m_weights[i]=m_ndcda[i] / m_ndc - ((m_nda[i] - m_ndcda[i]) / (totalInstances - m_ndc));      } else {        m_weights[i]*=(1.0 / totalInstances);      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:45.538 -0500",hash_original_method="A2F63CC3A1AD0DF2925153B5F3ECB644",hash_generated_method="794DAEAA0AA0F6D712FE329AACBE8206") public GenericURI parse() throws ParseException {  return uriReference(true);}  }
class C{  private void updateRcWithInputData(){  if (usingRawData) {    rc.setThrottle((int)RawDataInput.instance.getThrottle());    rc.setRoll((int)RawDataInput.instance.getRoll());    rc.setPitch((int)RawDataInput.instance.getPitch());    rc.setYaw((int)RawDataInput.instance.getHeading());    rc.set(RCSignals.AUX1,(int)RawDataInput.instance.getAux1());    rc.set(RCSignals.AUX2,(int)RawDataInput.instance.getAux2());    rc.set(RCSignals.AUX3,(int)RawDataInput.instance.getAux3());    rc.set(RCSignals.AUX4,(int)RawDataInput.instance.getAux4());  } else {    if (armed) {      rc.set(RCSignals.AUX1,RCSignals.RC_MAX);      if (isUserTouching) {        rc.set(RCSignals.AUX2,RCSignals.RC_MIN);      } else {        rc.set(RCSignals.AUX2,RCSignals.RC_MAX);      }      Log.i("AUX2","" + rc.get(RCSignals.AUX2));      rc.setThrottle((int)phoneSensorsInput.getThrottle());      yaw=RCSignals.RC_MID + ((int)yawCalculator.getYaw(droneSensorInput.getHeading() + headingDifference,phoneSensorsInput.getHeading()));      pitch=pitchRollCalculator.getValue((int)phoneSensorsInput.getPitch());      roll=pitchRollCalculator.getValue((int)phoneSensorsInput.getRoll());    } else {      rc.set(RCSignals.AUX1,RCSignals.RC_MIN);      rc.setThrottle(RCSignals.RC_MIN);      yaw=RCSignals.RC_MID;      pitch=RCSignals.RC_MID;      roll=RCSignals.RC_MID;    }    rc.setYaw(yaw);    rc.setRoll(pitch);    rc.setPitch(roll);    phoneOutputData.update(yaw,pitch,roll);  }}  }
class C{  public void putByte(long pos,byte val){  unsafe.putByte(pos + addr,val);}  }
class C{  private void removeView(){  Log.i(TAG,"removeView");  if (mView != null && isViewVisible) {    isViewVisible=false;    windowManager.removeView(mView);    if (FreeView.mListener != null) {      FreeView.dismissOnBackground=true;      FreeView.mListener.onDismiss();    }  }}  }
class C{  protected void validateUsers(org.oscm.xsd.User[] param){}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:56.832 -0500",hash_original_method="CD6FB45A1A4A8300476A32D9A94A5A2D",hash_generated_method="267E465882A299B4FD631D6D40CF5E7E") private void parsePdu(byte[] pdu){  ByteArrayInputStream bais=new ByteArrayInputStream(pdu);  DataInputStream dis=new DataInputStream(bais);  byte length;  int bearerDataLength;  SmsEnvelope env=new SmsEnvelope();  CdmaSmsAddress addr=new CdmaSmsAddress();  try {    env.messageType=dis.readInt();    env.teleService=dis.readInt();    env.serviceCategory=dis.readInt();    addr.digitMode=dis.readByte();    addr.numberMode=dis.readByte();    addr.ton=dis.readByte();    addr.numberPlan=dis.readByte();    length=dis.readByte();    addr.numberOfDigits=length;    addr.origBytes=new byte[length];    dis.read(addr.origBytes,0,length);    env.bearerReply=dis.readInt();    env.replySeqNo=dis.readByte();    env.errorClass=dis.readByte();    env.causeCode=dis.readByte();    bearerDataLength=dis.readInt();    env.bearerData=new byte[bearerDataLength];    dis.read(env.bearerData,0,bearerDataLength);    dis.close();  } catch (  Exception ex) {    Log.e(LOG_TAG,"createFromPdu: conversion from byte array to object failed: " + ex);  }  originatingAddress=addr;  env.origAddress=addr;  mEnvelope=env;  mPdu=pdu;  parseSms();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double z;  double currentVal;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  double numInNeighbours;  boolean flag=false;  double flowDir=0;  double flowLength=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    double gridResX=pntr.getCellSizeX();    double gridResY=pntr.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    WhiteboxRaster tmpGrid=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpGrid.isTemporaryFile=true;    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (pntr.getValue(row,col) != noData) {          z=0;          for (i=0; i < 8; i++) {            if (pntr.getValue(row + dY[i],col + dX[i]) == inflowingVals[i]) {              z++;            }          }          tmpGrid.setValue(row,col,z);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (tmpGrid.getValue(row,col) == 0) {          tmpGrid.setValue(row,col,-1);          flag=false;          x=col;          y=row;          do {            flowLength=output.getValue(y,x);            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              i=(int)(Math.log(flowDir) / LnOf2);              flowLength+=gridLengths[i];              x+=dX[i];              y+=dY[i];              currentVal=output.getValue(y,x);              if (flowLength > currentVal) {                output.setValue(y,x,flowLength);              }              numInNeighbours=tmpGrid.getValue(y,x) - 1;              tmpGrid.setValue(y,x,numInNeighbours);              if (numInNeighbours == 0) {                tmpGrid.setValue(y,x,-1);                flag=true;              } else {                flag=false;              }            } else {              flag=false;            }          } while (flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    tmpGrid.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  static void move(WindowsPath source,WindowsPath target,CopyOption... options) throws IOException {  boolean atomicMove=false;  boolean replaceExisting=false;  for (  CopyOption option : options) {    if (option == StandardCopyOption.ATOMIC_MOVE) {      atomicMove=true;      continue;    }    if (option == StandardCopyOption.REPLACE_EXISTING) {      replaceExisting=true;      continue;    }    if (option == LinkOption.NOFOLLOW_LINKS) {      continue;    }    if (option == null)     throw new NullPointerException();    throw new UnsupportedOperationException("Unsupported copy option");  }  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    source.checkWrite();    target.checkWrite();  }  final String sourcePath=asWin32Path(source);  final String targetPath=asWin32Path(target);  if (atomicMove) {    try {      MoveFileEx(sourcePath,targetPath,MOVEFILE_REPLACE_EXISTING);    } catch (    WindowsException x) {      if (x.lastError() == ERROR_NOT_SAME_DEVICE) {        throw new AtomicMoveNotSupportedException(source.getPathForExceptionMessage(),target.getPathForExceptionMessage(),x.errorString());      }      x.rethrowAsIOException(source,target);    }    return;  }  WindowsFileAttributes sourceAttrs=null;  WindowsFileAttributes targetAttrs=null;  long sourceHandle=0L;  try {    sourceHandle=source.openForReadAttributeAccess(false);  } catch (  WindowsException x) {    x.rethrowAsIOException(source);  }  try {    try {      sourceAttrs=WindowsFileAttributes.readAttributes(sourceHandle);    } catch (    WindowsException x) {      x.rethrowAsIOException(source);    }    long targetHandle=0L;    try {      targetHandle=target.openForReadAttributeAccess(false);      try {        targetAttrs=WindowsFileAttributes.readAttributes(targetHandle);        if (WindowsFileAttributes.isSameFile(sourceAttrs,targetAttrs)) {          return;        }        if (!replaceExisting) {          throw new FileAlreadyExistsException(target.getPathForExceptionMessage());        }      }  finally {        CloseHandle(targetHandle);      }    } catch (    WindowsException x) {    }  }  finally {    CloseHandle(sourceHandle);  }  if (targetAttrs != null) {    try {      if (targetAttrs.isDirectory() || targetAttrs.isDirectoryLink()) {        RemoveDirectory(targetPath);      } else {        DeleteFile(targetPath);      }    } catch (    WindowsException x) {      if (targetAttrs.isDirectory()) {        if (x.lastError() == ERROR_DIR_NOT_EMPTY || x.lastError() == ERROR_ALREADY_EXISTS) {          throw new DirectoryNotEmptyException(target.getPathForExceptionMessage());        }      }      x.rethrowAsIOException(target);    }  }  try {    MoveFileEx(sourcePath,targetPath,0);    return;  } catch (  WindowsException x) {    if (x.lastError() != ERROR_NOT_SAME_DEVICE)     x.rethrowAsIOException(source,target);  }  if (!sourceAttrs.isDirectory() && !sourceAttrs.isDirectoryLink()) {    try {      MoveFileEx(sourcePath,targetPath,MOVEFILE_COPY_ALLOWED);    } catch (    WindowsException x) {      x.rethrowAsIOException(source,target);    }    try {      copySecurityAttributes(source,target,false);    } catch (    IOException x) {    }    return;  }  assert sourceAttrs.isDirectory() || sourceAttrs.isDirectoryLink();  try {    if (sourceAttrs.isDirectory()) {      CreateDirectory(targetPath,0L);    } else {      String linkTarget=WindowsLinkSupport.readLink(source);      CreateSymbolicLink(targetPath,WindowsPath.addPrefixIfNeeded(linkTarget),SYMBOLIC_LINK_FLAG_DIRECTORY);    }  } catch (  WindowsException x) {    x.rethrowAsIOException(target);  }  WindowsFileAttributeViews.Dos view=WindowsFileAttributeViews.createDosView(target,false);  try {    view.setAttributes(sourceAttrs);  } catch (  IOException x) {    try {      RemoveDirectory(targetPath);    } catch (    WindowsException ignore) {    }    throw x;  }  try {    copySecurityAttributes(source,target,false);  } catch (  IOException ignore) {  }  try {    RemoveDirectory(sourcePath);  } catch (  WindowsException x) {    try {      RemoveDirectory(targetPath);    } catch (    WindowsException ignore) {    }    if (x.lastError() == ERROR_DIR_NOT_EMPTY || x.lastError() == ERROR_ALREADY_EXISTS) {      throw new DirectoryNotEmptyException(target.getPathForExceptionMessage());    }    x.rethrowAsIOException(source);  }}  }
class C{  public ArrayList gatherFirstSets(GrammarNode gn,GrammarNode parent){  ArrayList firstSet=new ArrayList();  if (gn instanceof GrammarRuleNode) {    for (int i=0; i < ((GrammarRuleNode)gn).getNumChoices(); i++) {      ArrayList set=gatherFirstSets(((GrammarRuleNode)gn).getChoice(i),gn);      firstSet.addAll(set);    }    if (parent != null) {      GrammarNode treeEdge=new GrammarRuleNode(parent.getHead());      treeEdge.children.add(gn);      ruleToFirstSet.put(treeEdge,firstSet);    }  } else   if (gn instanceof GrammarFunctionNode) {    firstSet.add(gn.getHead());    GrammarNode treeEdge=new GrammarRuleNode(parent.getHead());    treeEdge.children.add(gn);    ruleToFirstSet.put(treeEdge,firstSet);  }  return firstSet;}  }
class C{  public synchronized void addDataSourceListener(DataSourceListener dsl){  m_dataSetListeners.addElement(dsl);}  }
class C{  public void execute(){  if (regressorNames.size() == 0 || targetName == null) {    outGraph=new EdgeListGraph();    return;  }  if (regressorNames.contains(targetName)) {    outGraph=new EdgeListGraph();    return;  }  Regression regression;  Node target;  List<Node> regressors;  if (getDataModel() instanceof DataSet) {    DataSet _dataSet=(DataSet)getDataModel();    regression=new RegressionDataset(_dataSet);    target=_dataSet.getVariable(targetName);    regressors=new LinkedList<>();    for (    String regressorName : regressorNames) {      regressors.add(_dataSet.getVariable(regressorName));    }    double alpha=params.getDouble("alpha",0.001);    regression.setAlpha(alpha);    result=regression.regress(target,regressors);    outGraph=regression.getGraph();  } else   if (getDataModel() instanceof ICovarianceMatrix) {    ICovarianceMatrix covariances=(ICovarianceMatrix)getDataModel();    regression=new RegressionCovariance(covariances);    target=covariances.getVariable(targetName);    regressors=new LinkedList<>();    for (    String regressorName : regressorNames) {      regressors.add(covariances.getVariable(regressorName));    }    double alpha=params.getDouble("alpha",0.001);    regression.setAlpha(alpha);    result=regression.regress(target,regressors);    outGraph=regression.getGraph();  }  setResultGraph(outGraph);}  }
class C{  @Override public boolean isSelected(){  Boolean b=this.feature.getVisibility();  return b == null || b;}  }
class C{  public AlgorithmTerminationException(Algorithm algorithm,Throwable cause){  super(algorithm,cause);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public NotificationChain basicSetDef(StateSpecification newDef,NotificationChain msgs){  StateSpecification oldDef=def;  def=newDef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,StextPackage.STATE_ROOT__DEF,oldDef,newDef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void cancel(){  if (taskHandler != null)   taskHandler.cancel();}  }
class C{  public void storeArg(final int arg){  storeInsn(argumentTypes[arg],getArgIndex(arg));}  }
class C{  public static boolean compatible(IAType reqType,IAType inputType){  if (reqType.getTypeTag() == ATypeTag.ANY || inputType.getTypeTag() == ATypeTag.ANY) {    return true;  }  if (reqType.getTypeTag() != ATypeTag.UNION && inputType.getTypeTag() != ATypeTag.UNION) {    if (reqType.equals(inputType)) {      return true;    } else {      return false;    }  }  Set<IAType> reqTypePossible=new HashSet<IAType>();  Set<IAType> inputTypePossible=new HashSet<IAType>();  if (reqType.getTypeTag() == ATypeTag.UNION) {    AUnionType unionType=(AUnionType)reqType;    reqTypePossible.addAll(unionType.getUnionList());  } else {    reqTypePossible.add(reqType);  }  if (inputType.getTypeTag() == ATypeTag.UNION) {    AUnionType unionType=(AUnionType)inputType;    inputTypePossible.addAll(unionType.getUnionList());  } else {    inputTypePossible.add(inputType);  }  return reqTypePossible.equals(inputTypePossible);}  }
class C{  static void sendSLORequestToOtherParticipant(String requestUrl) throws URISyntaxException, ClientProtocolException, IOException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException {  if (requestUrl == null || requestUrl.isEmpty())   return;  SSLContextBuilder builder=new SSLContextBuilder();  builder.loadTrustMaterial(null,new TrustSelfSignedStrategy());  SSLConnectionSocketFactory socketFactory=new SSLConnectionSocketFactory(builder.build(),SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);  CloseableHttpClient client=HttpClients.custom().setSSLSocketFactory(socketFactory).build();  URI httpUri=new URI(requestUrl);  HttpGet httpGet=new HttpGet(httpUri);  CloseableHttpResponse response=client.execute(httpGet);  response.close();}  }
class C{  public boolean enclosingClassOf(ClassDefinition otherClass){  while ((otherClass=otherClass.getOuterClass()) != null) {    if (this == otherClass) {      return true;    }  }  return false;}  }
class C{  public DynamicIntArray(int[] intArray){  size=intArray.length;  int capacity=(int)Math.min(size * 110L / 100,Integer.MAX_VALUE);  data=new int[capacity];  System.arraycopy(intArray,0,data,0,size);}  }
class C{  public NonUniqueBusinessKeyException(String message){  super(message);}  }
class C{  public void add(Field field){  mFields.add(field);}  }
class C{  public void playWeek(){  if (week == 12) {    playConfChamp();  } else {    for (int i=0; i < confTeams.size(); ++i) {      confTeams.get(i).gameSchedule.get(week).playGame();    }    if (week == 11)     schedConfChamp();    week++;  }}  }
class C{  public void paintMenuBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  private SearchResultGroup[] searchForCallsTo(IMethodBinding methodBinding,IProgressMonitor pm,RefactoringStatus status) throws JavaModelException {  IMethod method=(IMethod)methodBinding.getJavaElement();  final RefactoringSearchEngine2 engine=new RefactoringSearchEngine2(createSearchPattern(method,methodBinding));  engine.setFiltering(true,true);  engine.setScope(createSearchScope(method,methodBinding));  engine.setStatus(status);  engine.searchPattern(new SubProgressMonitor(pm,1));  return (SearchResultGroup[])engine.getResults();}  }
class C{  @Override public boolean sameAs(RVVException ex){  if (ex instanceof RVVExceptionT) {    return ((RVVExceptionT)ex).sameAs(this);  }  if (!super.sameAs(ex)) {    return false;  }  RVVExceptionB other=(RVVExceptionB)ex;  if (this.received == null) {    if (other.received != null && !other.received.isEmpty()) {      return false;    }  } else   if (!this.received.equals(other.received))   return false;  return true;}  }
class C{  private ValueAnimator configureAnimator(){  ValueAnimator currentAnimator=null;  float scale=mCurrentScale * getScaleFactor();  if (mSourceScale > 0)   scale=mSourceScale;switch (mDirection) {case SCALE_FROM:    currentAnimator=ValueAnimator.ofFloat(scale,mCurrentScale);  break;case SCALE_TO:currentAnimator=ValueAnimator.ofFloat(mCurrentScale,scale);break;}return currentAnimator;}  }
class C{  private DLockGrantToken basicGetGrantToken(Object name){  return (DLockGrantToken)this.grantTokens.get(name);}  }
class C{  public BasePO(long key,int version){  this.key=key;  this.version=version;}  }
class C{  public final boolean weakCompareAndSet(long expect,long update){  return unsafe.compareAndSwapLong(this,valueOffset,expect,update);}  }
class C{  private String _getPluralizedDiffText(String unit,int diffValue){  boolean pluralize=Math.abs(diffValue) > 1;  if (diffValue > 0) {    return String.format("(~%d %s%s)",Math.abs(diffValue),unit,(pluralize) ? "s" : "");  } else {    return String.format("(~%d %s%s back)",Math.abs(diffValue),unit,(pluralize) ? "s" : "");  }}  }
class C{  static boolean rooted(Node currentNode,Set<Node> nodeList){  if (nodeList.isEmpty()) {    return false;  }  if (nodeList.contains(currentNode)) {    return true;  }  for (  Node rootNode : nodeList) {    if (XMLUtils.isDescendantOrSelf(rootNode,currentNode)) {      return true;    }  }  return false;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector result=new Vector();  OptionUtils.add(result,super.listOptions());  OptionUtils.addOption(result,lowerRunsTipText(),"" + getDefaultLowerRuns(),"lower");  OptionUtils.addOption(result,upperRunsTipText(),"" + getDefaultUpperRuns(),"upper");  OptionUtils.addOption(result,numThreadsTipText(),"" + getDefaultNumThreads(),"num-threads");  return OptionUtils.toEnumeration(result);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public boolean hasBlockedOns(){  return hasRepeatingExtension(BlockedOn.class);}  }
class C{  final public void print(long v){  Writer out=this.out;  if (out == null)   return;  if (v == 0x8000000000000000L) {    print("-9223372036854775808");    return;  }  try {    if (v < 0) {      out.write('-');      v=-v;    } else     if (v == 0) {      out.write('0');      return;    }    int j=31;    while (v > 0) {      _tempCharBuffer[--j]=(char)((v % 10) + '0');      v/=10;    }    out.write(_tempCharBuffer,j,31 - j);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public static DashboardFragment newInstance(){  DashboardFragment fragment=new DashboardFragment();  return fragment;}  }
class C{  private boolean deviceBelongsToUser(String useridFromUser,String useridFromDevice){  return useridFromUser.equals(useridFromDevice);}  }
class C{  void handshake(NextFilter nextFilter) throws SSLException {  for (; ; ) {switch (handshakeStatus) {case FINISHED:case NOT_HANDSHAKING:      if (LOGGER.isDebugEnabled()) {        LOGGER.debug("{} processing the FINISHED state",sslFilter.getSessionInfo(session));      }    session.setAttribute(SslFilter.SSL_SESSION,sslEngine.getSession());  handshakeComplete=true;if (firstSSLNegociation && session.containsAttribute(SslFilter.USE_NOTIFICATION)) {  firstSSLNegociation=false;  scheduleMessageReceived(nextFilter,SslFilter.SESSION_SECURED);}if (LOGGER.isDebugEnabled()) {if (!isOutboundDone()) {  LOGGER.debug("{} is now secured",sslFilter.getSessionInfo(session));} else {  LOGGER.debug("{} is not secured yet",sslFilter.getSessionInfo(session));}}return;case NEED_TASK:if (LOGGER.isDebugEnabled()) {LOGGER.debug("{} processing the NEED_TASK state",sslFilter.getSessionInfo(session));}handshakeStatus=doTasks();break;case NEED_UNWRAP:if (LOGGER.isDebugEnabled()) {LOGGER.debug("{} processing the NEED_UNWRAP state",sslFilter.getSessionInfo(session));}SSLEngineResult.Status status=unwrapHandshake(nextFilter);if (status == SSLEngineResult.Status.BUFFER_UNDERFLOW && handshakeStatus != SSLEngineResult.HandshakeStatus.FINISHED || isInboundDone()) {return;}break;case NEED_WRAP:if (LOGGER.isDebugEnabled()) {LOGGER.debug("{} processing the NEED_WRAP state",sslFilter.getSessionInfo(session));}if (outNetBuffer != null && outNetBuffer.hasRemaining()) {return;}SSLEngineResult result;createOutNetBuffer(0);for (; ; ) {result=sslEngine.wrap(emptyBuffer.buf(),outNetBuffer.buf());if (result.getStatus() == SSLEngineResult.Status.BUFFER_OVERFLOW) {outNetBuffer.capacity(outNetBuffer.capacity() << 1);outNetBuffer.limit(outNetBuffer.capacity());} else {break;}}outNetBuffer.flip();handshakeStatus=result.getHandshakeStatus();writeNetBuffer(nextFilter);break;default :String msg="Invalid Handshaking State" + handshakeStatus + " while processing the Handshake for session "+ session.getId();LOGGER.error(msg);throw new IllegalStateException(msg);}}}  }
class C{  public void startClat(NetworkStateTracker tracker){  if (mIsStarted) {    Slog.e(TAG,"startClat: already started");    return;  }  mTracker=tracker;  LinkProperties lp=mTracker.getLinkProperties();  String iface=lp.getInterfaceName();  Slog.i(TAG,"Starting clatd on " + iface + ", lp="+ lp);  try {    mNMService.startClatd(iface);  } catch (  RemoteException e) {    Slog.e(TAG,"Error starting clat daemon: " + e);  }  mIsStarted=true;}  }
class C{  CipherHandler(final SecretKey key,final byte[] nonce,final byte[] contentAad,final int cipherMode,final CryptoAlgorithm cryptoAlgorithm){  if (nonce.length != cryptoAlgorithm.getNonceLen()) {    throw new IllegalArgumentException("Invalid nonce length: " + nonce.length);  }  final AlgorithmParameterSpec spec=new GCMParameterSpec(cryptoAlgorithm.getTagLen() * 8,nonce,0,nonce.length);  try {    cipher_=buildCipherObject(cryptoAlgorithm);    cipher_.init(cipherMode,key,spec);    if (contentAad != null) {      cipher_.updateAAD(contentAad);    }  } catch (  final GeneralSecurityException gsx) {    throw new AwsCryptoException(gsx);  }}  }
class C{  public static void registerForReplicatedServiceAvailability(ServiceHost host,Operation op,String servicePath,String nodeSelectorPath){  CompletionHandler ch=null;  host.checkReplicatedServiceAvailable(ch,servicePath,nodeSelectorPath);}  }
class C{  protected void assertQueryEquals(final String defType,final SolrQueryRequest req,final String... inputs) throws Exception {  if (null != defType)   qParsersTested.add(defType);  final Query[] queries=new Query[inputs.length];  try {    SolrQueryResponse rsp=new SolrQueryResponse();    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req,rsp));    for (int i=0; i < inputs.length; i++) {      queries[i]=(QParser.getParser(inputs[i],defType,req).getQuery());    }  }  finally {    SolrRequestInfo.clearRequestInfo();  }  for (int i=0; i < queries.length; i++) {    QueryUtils.check(queries[i]);    for (int j=0; j < queries.length; j++) {      QueryUtils.checkEqual(queries[i],queries[j]);    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public OrientedSwitch(){  if (modelPackage == null) {    modelPackage=OrientedPackage.eINSTANCE;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:19.327 -0500",hash_original_method="17876694EB227DDF47ED60F50DDB1AB8",hash_generated_method="60BE5CDE27841B3EA519B90ADA5D01AD") protected void done(){}  }
class C{  public Property yearOfEra(){  return new Property(this,getChronology().yearOfEra());}  }
class C{  public LobbyServer(final int port){  IServerMessenger server;  try {    server=new ServerMessenger(ADMIN_USERNAME,port);  } catch (  final IOException ex) {    s_logger.log(Level.SEVERE,ex.toString());    throw new IllegalStateException(ex.getMessage());  }  m_messengers=new Messengers(server);  server.setLoginValidator(new LobbyLoginValidator());  new UserManager().register(m_messengers.getRemoteMessenger());  final ModeratorController moderatorController=new ModeratorController(server,m_messengers);  moderatorController.register(m_messengers.getRemoteMessenger());  new ChatController(LOBBY_CHAT,m_messengers,moderatorController);  final StatusManager statusManager=new StatusManager(m_messengers);  statusManager.shutDown();  final LobbyGameController controller=new LobbyGameController((ILobbyGameBroadcaster)m_messengers.getChannelMessenger().getChannelBroadcastor(ILobbyGameBroadcaster.GAME_BROADCASTER_CHANNEL),server);  controller.register(m_messengers.getRemoteMessenger());  server.setAcceptNewConnections(true);}  }
class C{  private byte[] bytes(String s,int extra){  int slen=s.length();  if (slen + extra > rspbuf.length) {    int diff=slen + extra - rspbuf.length;    rspbuf=new byte[2 * (rspbuf.length + diff)];  }  char c[]=s.toCharArray();  for (int i=0; i < c.length; i++) {    rspbuf[i]=(byte)c[i];  }  return rspbuf;}  }
class C{  public Iterator<AbstractNode> childIterator(final byte[] fromKey,final byte[] toKey){  return new ChildIterator(this,fromKey,toKey);}  }
class C{  public void subscription(String topic,int qos,boolean sub){  setTitleText("");  if (connected) {    try {      String[] theseTopics=new String[1];      int[] theseQoS=new int[1];      theseTopics[0]=topic;      theseQoS[0]=qos;synchronized (this) {        if (sub) {          writeLogln("  --> SUBSCRIBE,        TOPIC:" + topic + ", Requested QoS:"+ qos);        } else {          writeLogln("  --> UNSUBSCRIBE,      TOPIC:" + topic);        }      }      if (sub) {        mqtt.subscribe(theseTopics,theseQoS);      } else {        mqtt.unsubscribe(theseTopics);      }    } catch (    Exception ex) {      setTitleText("MQTT subscription exception caught !");      JOptionPane.showMessageDialog(frame,ex.getMessage(),"MQTT Subscription Exception",JOptionPane.ERROR_MESSAGE);    }  } else {    setTitleText("MQTT client not connected !");  }}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x8EEFD953,version=150) public int sceHttpCreateConnection(int templateId,PspString host,PspString protocol,int port,int unknown1){  HttpTemplate httpTemplate=getHttpTemplate(templateId);  HttpConnection httpConnection=new HttpConnection();  httpConnection.setUrl(host.getString(),protocol.getString(),port);  httpTemplate.addHttpConnection(httpConnection);  return httpConnection.getId();}  }
class C{  public String toString(){  return (gssNameStr);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void readyGoWithAnimatorForResult(Activity activity,Class<?> className,Bundle bundle,@NonNull ActivityOptionsCompat option,int requestCode){  ActivityCompat.startActivityForResult(activity,getIntent(activity,className).putExtras(bundle),requestCode,option.toBundle());}  }
class C{  public OpenCaCertificatesAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("OpenCaCertificatesAction.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() + InputEvent.SHIFT_MASK));  putValue(LONG_DESCRIPTION,res.getString("OpenCaCertificatesAction.statusbar"));  putValue(NAME,res.getString("OpenCaCertificatesAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("OpenCaCertificatesAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("OpenCaCertificatesAction.image")))));}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  public static void writeLn(final OutputStream out) throws IOException {  out.write(LS_BYTES);}  }
class C{  private static Method findParseMethod(Class<?> clazz){  Method[] methods=clazz.getMethods();  for (  Method method : methods) {    if (method.getName().startsWith("parse")) {      Class<?>[] params=method.getParameterTypes();      if ((params.length == 1) && params[0].equals(String.class)) {        return method;      }    }  }  return null;}  }
class C{  public void run() throws IOException, ServiceException, InterruptedException {  printMessage(WELCOME_MESSAGE);  BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));  while (executeCommand(reader)) {  }}  }
class C{  public QuotaNotFoundException(String message){  super(message);}  }
class C{  static int multiplyAndSubtract(int a[],int start,int b[],int bLen,int c){  long carry0=0;  long carry1=0;  for (int i=0; i < bLen; i++) {    carry0=TMultiplication.unsignedMultAddAdd(b[i],c,(int)carry0,0);    carry1=(a[start + i] & 0xffffffffL) - (carry0 & 0xffffffffL) + carry1;    a[start + i]=(int)carry1;    carry1>>=32;    carry0>>>=32;  }  carry1=(a[start + bLen] & 0xffffffffL) - carry0 + carry1;  a[start + bLen]=(int)carry1;  return (int)(carry1 >> 32);}  }
class C{  public static void wtf(String tag,String msg){  log(LEVEL.ASSERT,tag,msg,null);}  }
class C{  private void assignRemoteReducers(int cnt,HadoopMapReducePlanTopology top,Mappers mappers,Map<UUID,Integer> resMap){  TreeSet<HadoopMapReducePlanGroup> set=new TreeSet<>(new GroupWeightComparator());  set.addAll(top.groups());  while (cnt-- > 0) {    HadoopMapReducePlanGroup grp=set.first();    List<UUID> splitNodeIds=null;    for (int i=0; i < grp.nodeCount(); i++) {      UUID nodeId=grp.nodeId(i);      if (mappers.nodeToSplits.containsKey(nodeId)) {        if (splitNodeIds == null)         splitNodeIds=new ArrayList<>(2);        splitNodeIds.add(nodeId);      }    }    UUID id;    int newWeight;    if (splitNodeIds != null) {      id=splitNodeIds.get(ThreadLocalRandom.current().nextInt(splitNodeIds.size()));      newWeight=grp.weight() + locReducerWeight;    } else {      id=grp.nodeId(ThreadLocalRandom.current().nextInt(grp.nodeCount()));      newWeight=grp.weight() + rmtReducerWeight;    }    boolean rmv=set.remove(grp);    assert rmv;    grp.weight(newWeight);    boolean add=set.add(grp);    assert add;    Integer res=resMap.get(id);    resMap.put(id,res == null ? 1 : res + 1);  }}  }
class C{  protected void drawLabel(DrawContext dc){  if (this.getAnnotation() == null)   return;  Vec4 point=this.getLabelPoint(dc);  if (point == null)   return;  Vec4 screenPoint=dc.getView().project(point);  this.setLabelLocation(dc,screenPoint);  this.getAnnotation().render(dc);}  }
class C{  public void addHeader(String name,String value){  if (this.headers == null) {    this.headers=new ArrayList<HeaderItem>();  }  this.headers.add(new HeaderItem(name,value));}  }
class C{  public final QuadEdge lNext(){  return this.invRot().oNext().rot();}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_key_1_();}  }
class C{  public void testCertificateFactory04() throws NoSuchProviderException {  if (!X509Support) {    fail(NotSupportMsg);    return;  }  try {    CertificateFactory.getInstance(null,defaultProviderName);    fail("NullPointerException or CertificateException must be thrown when type is null");  } catch (  CertificateException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertificateFactory.getInstance(invalidValues[i],defaultProviderName);      fail("CertificateException must be thrown (type: ".concat(invalidValues[i]).concat(" provider: ").concat(defaultProviderName).concat(")"));    } catch (    CertificateException e) {    }  }}  }
class C{  public Builder(String variable){  table=new HashMap<Value,Double>(5);  this.variable=variable;}  }
class C{  public boolean isRootLevel(){  return parent == null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public List<XCalElement> children(ICalDataType dataType){  String localName=dataType.getName().toLowerCase();  List<XCalElement> children=new ArrayList<XCalElement>();  for (  Element child : children()) {    if (localName.equals(child.getLocalName()) && XCAL_NS.equals(child.getNamespaceURI())) {      children.add(new XCalElement(child));    }  }  return children;}  }
class C{  Record addImageRecord(PDFPage page,ImageInfo info,Bitmap image,PDFRenderer renderer){  Integer pageNumber=new Integer(page.getPageNumber());  PageRecord pageRec=getPageRecord(pageNumber);  if (pageRec == null) {    pageRec=addPageRecord(pageNumber,page,null);  }  Record rec=new Record();  rec.value=image;  rec.generator=renderer;  pageRec.images.put(info,new SoftReference<Record>(rec));  return rec;}  }
class C{  public Pointer(){  buffer=null;  pointers=null;  byteOffset=0;}  }
class C{  public void readData(DataInput din) throws IOException {  byteCount=din.readByte();  status=din.readUnsignedShort();  eventCount=din.readUnsignedShort();  messageCount=din.readUnsignedShort();  events=new byte[byteCount - 6];  if (events.length > 0) {    din.readFully(events,0,events.length);  }}  }
class C{  public AttachTodoObject(AttachTodoObject parent){  this.id=parent.getId();  this.attachType=parent.getAttachType();  this.attachId=parent.getAttachId();  this.todoId=parent.getTodoId();}  }
class C{  public int[] removeAttribute(int attributeNumberToDelete,int[] selectedAttributes){  int[] newSelection=new int[selectedAttributes.length - 1];  int j=0;  for (  int i : selectedAttributes) {    if (i != attributeNumberToDelete) {      newSelection[j]=i;      j++;    }  }  return newSelection;}  }
class C{  private boolean checkGenerics(final ClassNode classNode){  if (upperBounds != null) {    for (    ClassNode upperBound : upperBounds) {      if (!compareGenericsWithBound(classNode,upperBound))       return false;    }  }  if (lowerBound != null) {    if (!lowerBound.redirect().isUsingGenerics()) {      if (!compareGenericsWithBound(classNode,lowerBound))       return false;    }  }  return true;}  }
class C{  static public int computePasswordQuality(String password){  boolean hasDigit=false;  boolean hasNonDigit=false;  final int len=password.length();  for (int i=0; i < len; i++) {    if (Character.isDigit(password.charAt(i))) {      hasDigit=true;    } else {      hasNonDigit=true;    }  }  if (hasNonDigit && hasDigit) {    return DevicePolicyManager.PASSWORD_QUALITY_ALPHANUMERIC;  }  if (hasNonDigit) {    return DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC;  }  if (hasDigit) {    return DevicePolicyManager.PASSWORD_QUALITY_NUMERIC;  }  return DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED;}  }
class C{  public int generate(int uc,int len,char[] da,int dp,int dl){  if (Character.isBmpCodePoint(uc)) {    char c=(char)uc;    if (Character.isSurrogate(c)) {      error=CoderResult.malformedForLength(len);      return -1;    }    if (dl - dp < 1) {      error=CoderResult.OVERFLOW;      return -1;    }    da[dp]=c;    error=null;    return 1;  } else   if (Character.isValidCodePoint(uc)) {    if (dl - dp < 2) {      error=CoderResult.OVERFLOW;      return -1;    }    da[dp]=Character.highSurrogate(uc);    da[dp + 1]=Character.lowSurrogate(uc);    error=null;    return 2;  } else {    error=CoderResult.unmappableForLength(len);    return -1;  }}  }
class C{  void dfs(List<List<String>> res,List<String> path,String word,String start,Map<String,Integer> dist,Map<String,List<String>> map){  if (word.equals(start)) {    path.add(0,word);    res.add(new ArrayList<String>(path));    path.remove(0);    return;  }  for (  String next : map.get(word)) {    if (dist.containsKey(next) && dist.get(word) == dist.get(next) + 1) {      path.add(0,word);      dfs(res,path,next,start,dist,map);      path.remove(0);    }  }}  }
class C{  public HttpsURL(final String host,final int port,final String path) throws URIException {  this(null,host,port,path,null,null);}  }
class C{  public Object clone() throws CloneNotSupportedException {  chooseFirstProvider();  if (sigSpi instanceof Cloneable) {    SignatureSpi sigSpiClone=(SignatureSpi)sigSpi.clone();    Signature that=new Delegate(sigSpiClone,((Signature)this).algorithm);    that.provider=((Signature)this).provider;    return that;  } else {    throw new CloneNotSupportedException();  }}  }
class C{  private static Map<QName,ElementKey<?,?>> unionElements(Schema schema,ElementTransform transform){  Map<QName,ElementKey<?,?>> union=Maps.newLinkedHashMap();  Set<QName> invalid=Sets.newHashSet();  Set<QName> base=getElementNames(transform);  for (  ElementKey<?,?> adaptorKey : transform.getAdaptations().values()) {    ElementTransform adaptor=schema.getTransform(null,adaptorKey,null);    for (    ElementInfo info : adaptor.getElements().values()) {      ElementKey<?,?> key=info.key;      QName id=key.getId();      if (base.contains(id)) {        continue;      }      if (invalid.contains(id)) {        continue;      }      ElementKey<?,?> existing=union.get(id);      ElementKey<?,?> compatible=key;      if (existing != null) {        compatible=checkCompatibleElements(existing,key);      }      if (compatible == null) {        union.remove(id);        invalid.add(id);      } else       if (compatible == key) {        union.put(id,key);      }    }  }  return ImmutableMap.copyOf(union);}  }
class C{  public JSONTokener(String s){  this(new StringReader(s));}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder(String.format("RowDef #%d %s",table.getTableId(),table.getName()));  sb.append(" fieldCount ").append(getFieldCount()).append(' ');  for (int i=0; i < fieldDefs.length; i++) {    sb.append(i == 0 ? "[" : ",");    sb.append(fieldDefs[i].column().getTypeName());    if (parentJoinFields != null) {      for (int j=0; j < parentJoinFields.length; j++) {        if (parentJoinFields[j] == i) {          sb.append("^");          sb.append(j);          break;        }      }    }  }  sb.append("]");  return sb.toString();}  }
class C{  public void resetWorkspace(){  mBlockFactory.clearPriorBlockReferences();  mRootBlocks.clear();  mStats.clear();  mDeletedBlocks.clear();}  }
class C{  protected void sequence_ExactQuantifier(ISerializationContext context,ExactQuantifier semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void upgradeNode() throws Exception {  try {    moveSigner();    copyTrustedCertChain();  } catch (  Exception ex) {    System.out.println("Error occured during ldu cleanup.");    throw ex;  }  try {    if (!hasSignerAtOldLocation()) {      deleteTrustedCertChains();    }  } catch (  Exception ex) {    System.out.println("Upgrade preserves legacy tenant credential information, " + "however, cleaning up unused trusted certification chain " + "is incomplete. "+ ex);  }}  }
class C{  public static double pdf(double val,double loc,double scale,double shape){  val=(val - loc) / scale;  if (shape != 0.) {    val=-Math.log(1 - shape * val) / shape;  }  double f=1. + Math.exp(-val);  return Math.exp(-val * (1 - shape)) / (scale * f * f);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static final int nextPrime(int desiredCapacity){  int i=Arrays.binarySearch(primeCapacities,desiredCapacity);  if (i < 0) {    i=-i - 1;  }  return primeCapacities[i];}  }
class C{  final void longAccumulate(long x,LongBinaryOperator fn,boolean wasUncontended){  Integer uncontended=new Integer(0);  int h=getInitializedProbe(uncontended);  if (uncontended.intValue() == 1) {    wasUncontended=true;  }  boolean collide=false;  done:   for (; ; ) {    Cell[] as;    Cell a;    int n;    long v;    if ((as=cells) != null && (n=as.length) > 0) {      if ((a=as[(n - 1) & h]) == null) {        if (cellsBusy == 0) {          Cell r=new Cell(x);          if (cellsBusy == 0 && casCellsBusy()) {            try {              Cell[] rs;              int m, j;              if ((rs=cells) != null && (m=rs.length) > 0 && rs[j=(m - 1) & h] == null) {                rs[j]=r;                break done;              }            }  finally {              cellsBusy=0;            }            continue;          }        }        collide=false;      } else       if (!wasUncontended)       wasUncontended=true; else       if (a.cas(v=a.value,((fn == null) ? v + x : fn.applyAsLong(v,x))))       break; else       if (n >= NCPU || cells != as)       collide=false; else       if (!collide)       collide=true; else       if (cellsBusy == 0 && casCellsBusy()) {        try {          if (cells == as) {            cells=Arrays.copyOf(as,n << 1);          }        }  finally {          cellsBusy=0;        }        collide=false;        continue;      }      h=advanceProbe(h);    } else     if (cellsBusy == 0 && cells == as && casCellsBusy()) {      try {        if (cells == as) {          Cell[] rs=new Cell[2];          rs[h & 1]=new Cell(x);          cells=rs;          break done;        }      }  finally {        cellsBusy=0;      }    } else     if (casBase(v=base,((fn == null) ? v + x : fn.applyAsLong(v,x)))) {      break done;    }  }}  }
class C{  protected final void skipPacket() throws SQLException {  try {    int lengthRead=readFully(this.mysqlInput,this.packetHeaderBuf,0,4);    if (lengthRead < 4) {      forceClose();      throw new IOException(Messages.getString("MysqlIO.1"));    }    int packetLength=(this.packetHeaderBuf[0] & 0xff) + ((this.packetHeaderBuf[1] & 0xff) << 8) + ((this.packetHeaderBuf[2] & 0xff) << 16);    if (this.traceProtocol) {      StringBuilder traceMessageBuf=new StringBuilder();      traceMessageBuf.append(Messages.getString("MysqlIO.2"));      traceMessageBuf.append(packetLength);      traceMessageBuf.append(Messages.getString("MysqlIO.3"));      traceMessageBuf.append(StringUtils.dumpAsHex(this.packetHeaderBuf,4));      this.connection.getLog().logTrace(traceMessageBuf.toString());    }    byte multiPacketSeq=this.packetHeaderBuf[3];    if (!this.packetSequenceReset) {      if (this.enablePacketDebug && this.checkPacketSequence) {        checkPacketSequencing(multiPacketSeq);      }    } else {      this.packetSequenceReset=false;    }    this.readPacketSequence=multiPacketSeq;    skipFully(this.mysqlInput,packetLength);  } catch (  IOException ioEx) {    throw SQLError.createCommunicationsException(this.connection,this.lastPacketSentTimeMs,this.lastPacketReceivedTimeMs,ioEx,getExceptionInterceptor());  }catch (  OutOfMemoryError oom) {    try {      this.connection.realClose(false,false,true,oom);    } catch (    Exception ex) {    }    throw oom;  }}  }
class C{  public boolean hasEntries(){  return !fEntries.isEmpty();}  }
class C{  @Override public boolean isConscious(){  return false;}  }
class C{  public static BufferedImage createColorModelCompatibleImage(BufferedImage image){  ColorModel cm=image.getColorModel();  return new BufferedImage(cm,cm.createCompatibleWritableRaster(image.getWidth(),image.getHeight()),cm.isAlphaPremultiplied(),null);}  }
class C{  public static void testPrivKeyTweakMul_1() throws AssertFailException {  byte[] sec=BaseEncoding.base16().lowerCase().decode("67E56582298859DDAE725F972992A07C6C4FB9F62A8FFF58CE3CA926A1063530".toLowerCase());  byte[] data=BaseEncoding.base16().lowerCase().decode("3982F19BEF1615BCCFBB05E321C10E1D4CBA3DF0E841C2E41EEB6016347653C3".toLowerCase());  byte[] resultArr=NativeSecp256k1.privKeyTweakMul(sec,data);  String sigString=javax.xml.bind.DatatypeConverter.printHexBinary(resultArr);  assertEquals(sigString,"97F8184235F101550F3C71C927507651BD3F1CDB4A5A33B8986ACF0DEE20FFFC","testPrivKeyMul_1");}  }
class C{  @PATCH public void patchObjects(List<APIPatch<String>> patches) throws GuacamoleException {  for (  APIPatch<String> patch : patches) {    if (patch.getOp() != APIPatch.Operation.remove)     throw new GuacamoleUnsupportedException("Only the \"remove\" " + "operation is supported.");    String path=patch.getPath();    if (!path.startsWith("/"))     throw new GuacamoleClientException("Patch paths must start with \"/\".");    directory.remove(path.substring(1));  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  WebSessionCtx wsc=WebSessionCtx.get(request);  if (wsc == null) {    WebUtil.createTimeoutPage(request,response,this,null);    return;  }  int AD_Process_ID=WebUtil.getParameterAsInt(request,"AD_Process_ID");  int AD_Window_ID=WebUtil.getParameterAsInt(request,"AD_Window_ID");  int AD_Table_ID=WebUtil.getParameterAsInt(request,"AD_Table_ID");  int AD_Record_ID=WebUtil.getParameterAsInt(request,"AD_Record_ID");  if (AD_Process_ID == 0) {    WebUtil.createErrorPage(request,response,this,"No Process");    return;  }  createProcessPage(request,response,AD_Process_ID,AD_Window_ID);}  }
class C{  public void addResults(final Connector accumuloConn,final String pcjTableName,final Collection<VisibilityBindingSet> results) throws PCJStorageException {  checkNotNull(accumuloConn);  checkNotNull(pcjTableName);  checkNotNull(results);  writeResults(accumuloConn,pcjTableName,results);  if (accumuloConn.getInstance().getClass().equals(MockInstance.class)) {    updateMockCardinality(accumuloConn,pcjTableName,results.size());  } else {    updateCardinality(accumuloConn,pcjTableName,results.size());  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe order 'p'. With '1' being the Manhattan distance and '2'\n" + "\tthe Euclidean distance.\n" + "\t(default: 2)","P",1,"-P <order>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public void addCooc(int srcId,int tgtId){  increment(pack(srcId,tgtId));  increment(pack(MARGINALIZE,tgtId));  increment(pack(srcId,MARGINALIZE));}  }
class C{  public static String geFileFromAssets(Context context,String fileName){  if (context == null || TextUtils.isEmpty(fileName)) {    return null;  }  StringBuilder s=new StringBuilder("");  try {    InputStreamReader in=new InputStreamReader(context.getResources().getAssets().open(fileName));    BufferedReader br=new BufferedReader(in);    String line;    while ((line=br.readLine()) != null) {      s.append(line);    }    return s.toString();  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public Vec2 toVector(Point2D v){  return new Vec2(toMeters(v.getX()),toMeters(-v.getY()));}  }
class C{  public void addHyperedgesInNode(List<HyperEdge> hyperedges){  hyperedges.forEach(null);}  }
class C{  public boolean drawImage(Image img,int dx1,int dy1,int dx2,int dy2,int sx1,int sy1,int sx2,int sy2,ImageObserver observer){  return drawImage(img,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,null,observer);}  }
class C{  public void verify() throws VerificationException {  maybeParse();  if (inputs.size() == 0 || outputs.size() == 0)   throw new VerificationException("Transaction had no inputs or no outputs.");  if (this.getMessageSize() > Block.MAX_BLOCK_SIZE)   throw new VerificationException("Transaction larger than MAX_BLOCK_SIZE");  BigInteger valueOut=BigInteger.ZERO;  for (  TransactionOutput output : outputs) {    if (output.getValue().compareTo(BigInteger.ZERO) < 0)     throw new VerificationException("Transaction output negative");    valueOut=valueOut.add(output.getValue());  }  if (valueOut.compareTo(params.MAX_MONEY) > 0)   throw new VerificationException("Total transaction output value greater than possible");  if (isCoinBase()) {    if (inputs.get(0).getScriptBytes().length < 2 || inputs.get(0).getScriptBytes().length > 100)     throw new VerificationException("Coinbase script size out of range");  } else {    for (    TransactionInput input : inputs)     if (input.isCoinBase())     throw new VerificationException("Coinbase input as input in non-coinbase transaction");  }}  }
class C{  public DecoderException(String pMessage){  super(pMessage);}  }
class C{  private void runGnuplotScript(String gnuplotScriptName,int iteration){  String pathToSpecificAnalysisDir=scenario.getConfig().controler().getOutputDirectory() + "ITERS/it." + iteration+ "/analysis";  String relativePathToGnuplotScript="../../../../../analysis/" + gnuplotScriptName + ".p";  log.info("execute command: cd " + pathToSpecificAnalysisDir);  log.info("and afterwards: gnuplot " + relativePathToGnuplotScript);  try {    ProcessBuilder builder=new ProcessBuilder("cmd","/c","cd",pathToSpecificAnalysisDir,"&","gnuplot",relativePathToGnuplotScript);    Process p=builder.start();    BufferedReader read=new BufferedReader(new InputStreamReader(p.getInputStream()));    String zeile;    while ((zeile=read.readLine()) != null) {      log.error("input stream: " + zeile);    }    read=new BufferedReader(new InputStreamReader(p.getErrorStream()));    while ((zeile=read.readLine()) != null) {      log.error("error: " + zeile);    }  } catch (  IOException e) {    log.error("ERROR while executing gnuplot command.");    e.printStackTrace();  }}  }
class C{  public void serialize(Message message,OutputStream out) throws IOException {  String name=names.get(message.getClass());  if (name == null) {    throw new Error("BitcoinSerializer doesn't currently know how to serialize " + message.getClass());  }  serialize(name,message.bitcoinSerialize(),out);}  }
class C{  public int process(Buffer input,Buffer output){  if (input == null || output == null) {    return BUFFER_PROCESSED_FAILED;  }  extractNalUnitHeader(input);  if (mNalUnitHeader.isFragmentationUnit()) {    return handleFragmentationUnitPacket(input,output);  } else   if (mNalUnitHeader.isAggregationPacket()) {    return handleAggregationPacket(input,output);  } else {    return handleSingleNalUnitPacket(input,output);  }}  }
class C{  @Override public String toString(){  return new StringBuilder(this.getClass().getName()).append(": ").append(value).append("->").append(token).append(System.getProperty("line.separator")).toString();}  }
class C{  public LineLayout(final double spacing,final LineOrientation orientation){  this.spacing=spacing;  this.orientation=orientation;}  }
class C{  public static CreateContainerParams create(@NotNull ContainerConfig containerConfig){  return new CreateContainerParams().withContainerConfig(containerConfig);}  }
class C{  public boolean supportsAccountCreation(){  if (accountCreationSupported) {    return true;  }  try {    if (info == null) {      getRegistrationInfo();      accountCreationSupported=info.getType() != IQ.Type.ERROR;    }    return accountCreationSupported;  } catch (  XMPPException xe) {    return false;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:47.448 -0500",hash_original_method="9C582C13750EA226F05F84BEF0F6DC1F",hash_generated_method="B88DE28F9B47FE06D3B19C7105D84DBE") public ReplyToParser(String replyTo){  super(replyTo);}  }
class C{  public int evaluate(Address v1,Address v2){switch (value) {case EQUAL:    return (v1.EQ(v2)) ? TRUE : FALSE;case NOT_EQUAL:  return (v1.NE(v2)) ? TRUE : FALSE;case GREATER:return (v1.toWord().toOffset().sGT(v2.toWord().toOffset())) ? TRUE : FALSE;case LESS:return (v1.toWord().toOffset().sLT(v2.toWord().toOffset())) ? TRUE : FALSE;case GREATER_EQUAL:return (v1.toWord().toOffset().sGE(v2.toWord().toOffset())) ? TRUE : FALSE;case LESS_EQUAL:return (v1.toWord().toOffset().sLE(v2.toWord().toOffset())) ? TRUE : FALSE;case LOWER:return (v1.LT(v2)) ? TRUE : FALSE;case LOWER_EQUAL:return (v1.LE(v2)) ? TRUE : FALSE;case HIGHER:return (v1.GT(v2)) ? TRUE : FALSE;case HIGHER_EQUAL:return (v1.GE(v2)) ? TRUE : FALSE;}throw new OptimizingCompilerException("invalid condition " + this);}  }
class C{  private void addReminder(){  if (mDefaultReminderMinutes == GeneralPreferences.NO_REMINDER) {    EventViewUtils.addReminder(mActivity,mScrollView,this,mReminderItems,mReminderMinuteValues,mReminderMinuteLabels,mReminderMethodValues,mReminderMethodLabels,ReminderEntry.valueOf(GeneralPreferences.REMINDER_DEFAULT_TIME),mModel.mCalendarMaxReminders,null);  } else {    EventViewUtils.addReminder(mActivity,mScrollView,this,mReminderItems,mReminderMinuteValues,mReminderMinuteLabels,mReminderMethodValues,mReminderMethodLabels,ReminderEntry.valueOf(mDefaultReminderMinutes),mModel.mCalendarMaxReminders,null);  }  updateRemindersVisibility(mReminderItems.size());  EventViewUtils.updateAddReminderButton(mView,mReminderItems,mModel.mCalendarMaxReminders);}  }
class C{  public static int balanceAccounts(int excluded){  int missCount=0;  Object o=null;  for (int i=0; i < finishedCases.size(); i++) {    try {      o=startedCases.remove(startedCases.indexOf((String)finishedCases.get(i)));      if (o == null)       missCount++;    } catch (    Exception e) {      missCount++;    }  }  for (int i=0; i < startedCases.size(); i++) {    try {      System.out.println((String)startedCases.get(i) + " not finished yet");    } catch (    Exception e) {    }  }  return (startedCases.size() - excluded);}  }
class C{  public void testFailNotSerializable() throws Throwable {  Transport transport=NettyTransport.builder().withThreads(2).build();  Server server=transport.server();  Client client=transport.client();  ThreadContext context=new SingleThreadContext("test-thread-%d",new Serializer());  context.executor().execute(null);  await(1000);  context.executor().execute(null);  await(1000);  context.executor().execute(null);  await(1000,2);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void processGroups(final Document document){  final NodeList groupNodeList=document.getElementsByTagName(TAG_GROUP);  for (int i=0; i < groupNodeList.getLength(); i++) {    final Element groupElement=(Element)groupNodeList.item(i);    final String name=groupElement.getAttribute(ATTR_GROUP_NAME);    allGroupElements.put(name,groupElement);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.485 -0500",hash_original_method="5F50FEB40340882AAF112F9FFE8E6AE2",hash_generated_method="5E52CCE70CA2104CFA5F2279997090C2") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public int noop() throws IOException {  return sendCommand(SMTPCommand.NOOP);}  }
class C{  public DefaultBoxAndWhiskerXYDataset(Comparable seriesKey){  this.seriesKey=seriesKey;  this.dates=new ArrayList();  this.items=new ArrayList();  this.minimumRangeValue=null;  this.maximumRangeValue=null;  this.rangeBounds=null;}  }
class C{  public void contextDestroyed(ServletContextEvent servletContextEvent){}  }
class C{  protected double calcPlanWeight(final T plan,final double maxScore){  if (plan.getScore() == null) {    return Double.NaN;  }  double weight=Math.exp(this.beta * (plan.getScore() - maxScore));  if (weight < MIN_WEIGHT)   weight=MIN_WEIGHT;  return weight;}  }
class C{  public int compare(Object o1,Object o2){  Object cmp1=o1;  if (cmp1 instanceof NamePair)   cmp1=((NamePair)cmp1).getName();  Object cmp2=o2;  if (cmp2 instanceof NamePair)   cmp2=((NamePair)cmp2).getName();  if (cmp1 == null) {    if (cmp2 == null)     return 0;    return -1 * m_multiplier;  }  if (cmp2 == null)   return 1 * m_multiplier;  if (cmp1 instanceof String && cmp2 instanceof String) {    return m_collator.compare(cmp1,cmp2) * m_multiplier;  } else   if (cmp1 instanceof Timestamp && cmp2 instanceof Timestamp) {    Timestamp t=(Timestamp)cmp1;    return t.compareTo((Timestamp)cmp2) * m_multiplier;  } else   if (cmp1 instanceof BigDecimal && cmp2 instanceof BigDecimal) {    BigDecimal d=(BigDecimal)cmp1;    return d.compareTo((BigDecimal)cmp2) * m_multiplier;  } else   if (cmp1 instanceof Integer && cmp2 instanceof Integer) {    Integer d=(Integer)cmp1;    return d.compareTo((Integer)cmp2) * m_multiplier;  } else   if (cmp1 instanceof Double && cmp2 instanceof Double) {    Double d=(Double)cmp1;    return d.compareTo((Double)cmp2) * m_multiplier;  }  String s=cmp1.toString();  return m_collator.compare(s,cmp2.toString()) * m_multiplier;}  }
class C{  public static boolean isExtension(String filename,String[] extensions){  if (filename == null)   return false;  if (extensions == null || extensions.length == 0)   return indexOfExtension(filename) == -1;  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension))     return true;  }  return false;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  protected KMLAbstractContainer(String namespaceURI){  super(namespaceURI);}  }
class C{  public void addNotification(int notificationId,String messageTitle,String messageText,Notification.Status status){  Notification notification=new Notification();  notification.setId(notificationId);  notification.setMessageTitle(messageTitle);  notification.setMessageText(messageText);  notification.setStatus(status);  notification.setReceivedTime(Calendar.getInstance().getTime().toString());  try {    notificationDAO.open();    if (notificationDAO.getNotification(notificationId) == null) {      notificationDAO.addNotification(notification);    }  }  finally {    notificationDAO.close();  }}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster image;  int col, row, numImages, x, y;  int cols, rows;  int a=0;  double noData;  double z, zn;  int progress=0;  String progressMessage="";  String inputFilesString=null;  String[] imageFiles;  long[] n;  double[] mean;  String[] shortNames;  String[] units;  double[] I;  double[] stdDev;  double totalDeviation;  int[] dX;  int[] dY;  double numerator, W;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (args[1].toLowerCase().contains("bishop")) {    dX=new int[]{1,1,-1,-1};    dY=new int[]{-1,1,1,-1};  } else   if (args[1].toLowerCase().contains("queen") || args[1].toLowerCase().contains("king")) {    dX=new int[]{1,1,1,0,-1,-1,-1,0};    dY=new int[]{-1,0,1,1,1,0,-1,-1};  } else {    dX=new int[]{1,0,-1,0};    dY=new int[]{0,1,0,-1};  }  try {    double sigmaZ;    n=new long[numImages];    mean=new double[numImages];    I=new double[numImages];    shortNames=new String[numImages];    units=new String[numImages];    stdDev=new double[numImages];    double[] E_I=new double[numImages];    double[] varNormality=new double[numImages];    double[] varRandomization=new double[numImages];    double[] zN=new double[numImages];    double[] zR=new double[numImages];    double[] pValueN=new double[numImages];    double[] pValueR=new double[numImages];    double[] data;    NormalDistribution distribution=new NormalDistribution(0,1);    for (a=0; a < numImages; a++) {      progressMessage="Image " + (a + 1) + " of "+ numImages;      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      rows=image.getNumberRows();      cols=image.getNumberColumns();      shortNames[a]=image.getShortHeaderFile();      if (!image.getZUnits().toLowerCase().equals("not specified")) {        units[a]=image.getZUnits();      } else {        units[a]="";      }      sigmaZ=0;      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            sigmaZ+=data[col];            n[a]++;          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(row * 100.0 / rows);        updateProgress(progressMessage,progress);      }      mean[a]=sigmaZ / n[a];      E_I[a]=-1.0 / (n[a] - 1);      totalDeviation=0;      W=0;      numerator=0;      double S2=0;      double wij;      int numNeighbours=dX.length;      double k=0;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=image.getValue(row,col);          if (z != noData) {            totalDeviation+=(z - mean[a]) * (z - mean[a]);            k+=(z - mean[a]) * (z - mean[a]) * (z - mean[a])* (z - mean[a]);            wij=0;            for (int i=0; i < numNeighbours; i++) {              x=col + dX[i];              y=row + dY[i];              zn=image.getValue(y,x);              if (zn != noData) {                W+=1.0;                numerator+=(z - mean[a]) * (zn - mean[a]);                wij+=1;              }            }            S2+=wij * wij;          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(row * 100.0 / rows);        updateProgress(progressMessage,progress);      }      double S1=4 * W;      S2=S2 * 4;      stdDev[a]=Math.sqrt(totalDeviation / (n[a] - 1));      I[a]=n[a] * numerator / (totalDeviation * W);      varNormality[a]=(n[a] * n[a] * S1 - n[a] * S2 + 3 * W * W) / ((W * W) * (n[a] * n[a] - 1));      zN[a]=(I[a] - E_I[a]) / (Math.sqrt(varNormality[a]));      pValueN[a]=2d * (1.0 - distribution.cumulativeProbability(Math.abs(zN[a])));      k=k / (n[a] * stdDev[a] * stdDev[a]* stdDev[a]* stdDev[a]);      varRandomization[a]=(n[a] * ((n[a] * n[a] - 3 * n[a] + 3) * S1 - n[a] * S2 + 3 * W * W) - k * (n[a] * n[a] - n[a]) * S1 - 2 * n[a] * S1 + 6 * W * W) / ((n[a] - 1) * (n[a] - 2) * (n[a] - 3)* W* W);      zR[a]=(I[a] - E_I[a]) / (Math.sqrt(varRandomization[a]));      pValueR[a]=2d * (1.0 - distribution.cumulativeProbability(Math.abs(zR[a])));      image.close();      progress=(int)(100f * (a + 1) / numImages);      updateProgress(progressMessage,progress);    }    StringBuilder retstr=new StringBuilder();    DecimalFormat df1=new DecimalFormat("###,###,###,###");    DecimalFormat df2=new DecimalFormat("0.0000");    retstr.append("SPATIAL AUTOCORRELATION\n");    for (a=0; a < numImages; a++) {      retstr.append("\n");      retstr.append("Input image:\t\t\t").append(shortNames[a]).append("\n");      retstr.append("Number of cells included:\t\t").append(df1.format(n[a])).append("\n");      if (units[a].equals("")) {        retstr.append("Mean of cells included:\t\t").append(df2.format(mean[a])).append("\n");      } else {        retstr.append("Mean of cells included:\t\t").append(df2.format(mean[a])).append(" ").append(units[a]).append("\n");      }      retstr.append("Spatial autocorrelation (Moran's I):\t").append(df2.format(I[a])).append("\n");      retstr.append("Expected value:\t\t").append(df2.format(E_I[a])).append("\n");      retstr.append("Variance of I (normality assumption):\t").append(df2.format(varNormality[a])).append("\n");      retstr.append("z test stat (normality assumption):\t").append(df2.format(zN[a])).append("\n");      retstr.append("p-value (normality assumption):\t").append(df2.format(pValueN[a])).append("\n");      retstr.append("Variance of I (randomization assumption):\t").append(df2.format(varRandomization[a])).append("\n");      retstr.append("z test stat (randomization assumption):\t").append(df2.format(zR[a])).append("\n");      retstr.append("p-value (randomization assumption):\t").append(df2.format(pValueR[a])).append("\n");    }    returnData(retstr.toString());  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void handleFullscreenMode(){  if (browserStorage.getIsFullscreenEnabled()) {    if (Build.VERSION.SDK_INT == Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1) {      getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);    } else     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {      getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION| View.SYSTEM_UI_FLAG_FULLSCREEN| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);    } else     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {      getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION| View.SYSTEM_UI_FLAG_FULLSCREEN);    }  } else {    getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);  }}  }
class C{  public byte[] encode(boolean pad) throws StunException {  int dataLength=getDataLength();  if (pad)   dataLength=padTo4(dataLength);  byte binMsg[]=new byte[HEADER_LENGTH + dataLength];  int offset=0;  if (!validateChannelNumber(channelNumber)) {    throw new StunException(StunException.ILLEGAL_ARGUMENT,"Channel number invalid");  }  binMsg[offset++]=(byte)(channelNumber >> 8);  binMsg[offset++]=(byte)(channelNumber & 0xff);  binMsg[offset++]=(byte)((data != null) ? data.length >> 8 : 0);  binMsg[offset++]=(byte)((data != null) ? data.length & 0xff : 0);  if (data != null) {    System.arraycopy(data,0,binMsg,offset,data.length);  }  return binMsg;}  }
class C{  public Rational(double c){  N=new Polynomial(c);  D=new Polynomial(1.0);}  }
class C{  private void onPrintJobCancelled(PrintJob printJob){  mJobs.remove(printJob.getId());  printJob.cancel();}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  final RPAction storemessage=new RPAction();  storemessage.put("type","storemessage");  storemessage.put("target",params[0]);  storemessage.put("text",remainder);  ClientSingletonRepository.getClientFramework().send(storemessage);  return true;}  }
class C{  @Override public void decode(final BufferedInputStream bis,final BufferedOutputStream streamCache,final String cacheName,final Map<String,String> cachedObjects){  this.bis=bis;  this.streamCache=streamCache;  this.cachedObjects=cachedObjects;  long value;  int nextValue;  try {    boolean ignoreLastItem=false;    while (bis.available() > 0) {      value=0;      nextValue=read(bis);      if (nextValue == 122) {        for (int i3=0; i3 < 4; i3++) {          streamCache.write(0);        }      } else       if ((bis.available() >= 4) && (nextValue > 32) && (nextValue < 118)) {        value+=((nextValue - 33) * base_85_indices[0]);        for (int ii=1; ii < 5; ii++) {          nextValue=read(bis);          if (nextValue == -1) {            nextValue=0;          }          if (nextValue == -1) {            ignoreLastItem=true;          }          if (((nextValue > 32) && (nextValue < 118)) || (nextValue == 126)) {            value+=((nextValue - 33) * base_85_indices[ii]);          }        }        if (!ignoreLastItem) {          for (int i3=0; i3 < 4; i3++) {            final byte b=(byte)((value / hex_indices[i3]) & 255);            streamCache.write(b);          }        }      }    }  } catch (  final Exception e) {    LogWriter.writeLog("Exception " + e + " accessing Ascii85Decode filter ");  }}  }
class C{  public void removeLocks(long threadId,GridCacheVersion ver,Collection<KeyCacheObject> keys){  if (keys.isEmpty())   return;  try {    int keyCnt=-1;    Map<ClusterNode,GridNearUnlockRequest> map=null;    Collection<KeyCacheObject> locKeys=new LinkedList<>();    for (    KeyCacheObject key : keys) {      IgniteTxKey txKey=ctx.txKey(key);      GridCacheMvccCandidate lock=ctx.mvcc().removeExplicitLock(threadId,txKey,ver);      if (lock != null) {        AffinityTopologyVersion topVer=lock.topologyVersion();        if (map == null) {          Collection<ClusterNode> affNodes=CU.allNodes(ctx,topVer);          keyCnt=(int)Math.ceil((double)keys.size() / affNodes.size());          map=U.newHashMap(affNodes.size());        }        ClusterNode primary=ctx.affinity().primary(key,topVer);        if (primary == null) {          if (log.isDebugEnabled())           log.debug("Failed to remove locks (all partition nodes left the grid).");          continue;        }        if (!primary.isLocal()) {          GridNearUnlockRequest req=map.get(primary);          if (req == null) {            map.put(primary,req=new GridNearUnlockRequest(ctx.cacheId(),keyCnt,ctx.deploymentEnabled()));            req.version(ver);          }          GridCacheEntryEx entry=peekEx(key);          KeyCacheObject key0=entry != null ? entry.key() : key;          req.addKey(key0,ctx);        } else         locKeys.add(key);      }    }    if (!locKeys.isEmpty())     removeLocks(ctx.localNodeId(),ver,locKeys,true);    if (map == null || map.isEmpty())     return;    IgnitePair<Collection<GridCacheVersion>> versPair=ctx.tm().versions(ver);    Collection<GridCacheVersion> committed=versPair.get1();    Collection<GridCacheVersion> rolledback=versPair.get2();    for (    Map.Entry<ClusterNode,GridNearUnlockRequest> mapping : map.entrySet()) {      ClusterNode n=mapping.getKey();      GridDistributedUnlockRequest req=mapping.getValue();      if (!F.isEmpty(req.keys())) {        req.completedVersions(committed,rolledback);        try {          ctx.io().send(n,req,ctx.ioPolicy());        } catch (        ClusterTopologyCheckedException e) {          if (log.isDebugEnabled())           log.debug("Failed to send unlock request (node has left the grid) [keys=" + req.keys() + ", n="+ n+ ", e="+ e+ ']');        }catch (        IgniteCheckedException e) {          U.error(log,"Failed to send unlock request [keys=" + req.keys() + ", n="+ n+ ']',e);        }      }    }  } catch (  IgniteCheckedException ex) {    U.error(log,"Failed to unlock the lock for keys: " + keys,ex);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.633 -0400",hash_original_method="E5B19505EE022DF11F6B87B3BEA51BB3",hash_generated_method="38000AD25D7D054B6AD160C50838191E") public AgeFileFilter(Date cutoffDate,boolean acceptOlder){  this(cutoffDate.getTime(),acceptOlder);}  }
class C{  protected static void init(){  String notificationfactoryClassName=null;  try {    notificationfactoryClassName=System.getProperty(NOTIFICATION_FACTORY_NAME);  } catch (  SecurityException e) {    throw new RuntimeException(e);  }  if (notificationfactoryClassName != null) {    Class<?> nfc;    try {      nfc=Class.forName(notificationfactoryClassName);      factory=(INotificationManagerFactory)nfc.newInstance();    } catch (    ClassNotFoundException e) {      throw new RuntimeException(e);    }catch (    InstantiationException e) {      throw new RuntimeException(e);    }catch (    IllegalAccessException e) {      throw new RuntimeException(e);    }  }}  }
class C{  public static boolean hasBeenHalted(){  return hasBeenHalted(Thread.currentThread());}  }
class C{  @Override protected void tearDown() throws Exception {  setFixture(null);}  }
class C{  public int size(){  return this.fieldMap.size();}  }
class C{  public Dataset(final int dimensions){  this.dimensions=dimensions;  ntree=new NTree(dimensions);}  }
class C{  @Override @Inline public ObjectReference traceObject(TransitiveClosure trace,ObjectReference object){  if (HEADER_MARK_BITS) {    if (testAndMark(object)) {      markBlock(object);      trace.processNode(object);    }  } else {    if (testAndSetLiveBit(object)) {      trace.processNode(object);    }  }  return object;}  }
class C{  public static void destroy(){  try {    Region region1=cache.getRegion(Region.SEPARATOR + REGION_NAME1);    Region region2=cache.getRegion(Region.SEPARATOR + REGION_NAME2);    region1.destroy("key-1");    region2.destroy("key-1");  } catch (  Exception e) {    e.printStackTrace();    fail("test failed due to exception in destroy ");  }}  }
class C{  public void sort(int fromIndex,int toIndex){  Arrays.sort(_data,fromIndex,toIndex);}  }
class C{  void afterTopLevelExec(){}  }
class C{  public LazyPStackX<T> with(int i,T element){  return stream(Fluxes.insertAt(Fluxes.deleteBetween(flux(),i,i + 1),i,element));}  }
class C{  public boolean addOverlay(Overlay overlay,KmlDocument kmlDoc){  if (overlay == null)   return false;  KmlFeature kmlItem;  if (overlay instanceof GroundOverlay) {    kmlItem=new KmlGroundOverlay((GroundOverlay)overlay);  } else   if (overlay instanceof FolderOverlay) {    kmlItem=new KmlFolder((FolderOverlay)overlay,kmlDoc);  } else   if (overlay instanceof MarkerClusterer) {    kmlItem=new KmlFolder((MarkerClusterer)overlay,kmlDoc);  } else   if (overlay instanceof Marker) {    Marker marker=(Marker)overlay;    kmlItem=new KmlPlacemark(marker);  } else   if (overlay instanceof Polygon) {    Polygon polygon=(Polygon)overlay;    kmlItem=new KmlPlacemark(polygon,kmlDoc);  } else   if (overlay instanceof Polyline) {    Polyline polyline=(Polyline)overlay;    kmlItem=new KmlPlacemark(polyline,kmlDoc);  } else {    return false;  }  mItems.add(kmlItem);  return true;}  }
class C{  public synchronized void save(OutputStream output,String Header) throws IOException {  if (output != null) {    PrintWriter theWrtr=new PrintWriter(output);    if (Header != null) {      theWrtr.println(Header);    }    Enumeration theKeys=keys();    while (theKeys.hasMoreElements()) {      String key=(String)theKeys.nextElement();      Object value=get((Object)key);      if (value != null) {        if (value instanceof String) {          StringBuffer currentOutput=new StringBuffer();          currentOutput.append(key);          currentOutput.append("=");          currentOutput.append((String)value);          theWrtr.println(currentOutput.toString());        } else         if (value instanceof Vector) {          Vector values=(Vector)value;          Enumeration valuesEnum=values.elements();          while (valuesEnum.hasMoreElements()) {            String currentElement=(String)valuesEnum.nextElement();            StringBuffer currentOutput=new StringBuffer();            currentOutput.append(key);            currentOutput.append("=");            currentOutput.append(currentElement);            theWrtr.println(currentOutput.toString());          }        }      }      theWrtr.println();      theWrtr.flush();    }  }}  }
class C{  private LinkedList<Diff> diff_compute(String text1,String text2,boolean checklines,long deadline){  LinkedList<Diff> diffs=new LinkedList<Diff>();  if (text1.length() == 0) {    diffs.add(new Diff(Operation.INSERT,text2));    return diffs;  }  if (text2.length() == 0) {    diffs.add(new Diff(Operation.DELETE,text1));    return diffs;  }  String longtext=text1.length() > text2.length() ? text1 : text2;  String shorttext=text1.length() > text2.length() ? text2 : text1;  int i=longtext.indexOf(shorttext);  if (i != -1) {    Operation op=(text1.length() > text2.length()) ? Operation.DELETE : Operation.INSERT;    diffs.add(new Diff(op,longtext.substring(0,i)));    diffs.add(new Diff(Operation.EQUAL,shorttext));    diffs.add(new Diff(op,longtext.substring(i + shorttext.length())));    return diffs;  }  if (shorttext.length() == 1) {    diffs.add(new Diff(Operation.DELETE,text1));    diffs.add(new Diff(Operation.INSERT,text2));    return diffs;  }  String[] hm=diff_halfMatch(text1,text2);  if (hm != null) {    String text1_a=hm[0];    String text1_b=hm[1];    String text2_a=hm[2];    String text2_b=hm[3];    String mid_common=hm[4];    LinkedList<Diff> diffs_a=diff_main(text1_a,text2_a,checklines,deadline);    LinkedList<Diff> diffs_b=diff_main(text1_b,text2_b,checklines,deadline);    diffs=diffs_a;    diffs.add(new Diff(Operation.EQUAL,mid_common));    diffs.addAll(diffs_b);    return diffs;  }  if (checklines && text1.length() > 100 && text2.length() > 100) {    return diff_lineMode(text1,text2,deadline);  }  return diff_bisect(text1,text2,deadline);}  }
class C{  public static Integer networkOf(ByteTreeItem item,BiConsumer<String,Integer> cb){  if (!item.isTerminal()) {    return null;  }  if (item.hasNetworkId()) {    Integer id=item.getNetworkId();    String ipString=ViewUtils.ipString(id);    cb.accept(ipString,id);    return id;  }  if (item.details.hasExplicitNetwork()) {    if (cb != null) {      String ipString=ViewUtils.ipString(item.details.getNetworkId());      cb.accept(ipString,item.details.getNetworkId());    }    return item.details.getNetworkId();  }  int[] mask=item.details.cidr() == 24 ? LARGE_LAN_MASK : createMSBMask(item.details.cidr());  byte[] bytes=getBytes(item,3);  for (int i=0; i < 4; i++) {    bytes[i]&=mask[i];  }  Integer i=intFromBytes(bytes);  if (cb != null) {    cb.accept(ipString(i),i);  }  return i;}  }
class C{  public static long parseTimestampFromHdfsPath(String hdfsPath){  int index=hdfsPath.lastIndexOf('/');  if (index >= 0) {    return Long.parseLong(hdfsPath.substring(index + 1));  } else {    return Long.parseLong(hdfsPath);  }}  }
class C{  public boolean supportsSchemasInIndexDefinitions() throws SQLException {  return false;}  }
class C{  private void validateVNXFileSMISProviderMandatoryDetails(StorageSystemRequestParam param){  ArgValidator.checkFieldValidIP(param.getSmisProviderIP(),"smis_provider_ip");  ArgValidator.checkFieldNotNull(param.getSmisPortNumber(),"smis_port_number");  ArgValidator.checkFieldRange(param.getSmisPortNumber(),1,65535,"smis_port_number");  ArgValidator.checkFieldNotEmpty(param.getSmisUserName(),"smis_user_name");  ArgValidator.checkFieldNotEmpty(param.getSmisPassword(),"smis_password");}  }
class C{  private float pop(){  float val=0;  if (sloc > 0) {    val=stack[--sloc];  }  return val;}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xA063A957,version=271) public int sceUsbCamGetContrast(TPointer32 contrastAddr){  contrastAddr.setValue(contrast);  return 0;}  }
class C{  public String outputOffsetMultiplierTipText(){  return "Generates an additional attribute 'Offset' that contains the " + "multiplier the value is off the median: " + "value = median + 'multiplier' * IQR";}  }
class C{  public static boolean saveStringToFile(String dataInput,String path){  String filename=path;  File file=new File(filename);  FileOutputStream fos;  byte[] data=dataInput.getBytes();  try {    fos=new FileOutputStream(file);    fos.write(data);    fos.flush();    fos.close();    return true;  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  return false;}  }
class C{  private void makeChanges(){  final IntroButtonAccessor leftButtonAccessor=getLeftButtonAccessor();  leftButtonAccessor.setBehaviour(LEFT_BUTTON_BEHAVIOUR);  leftButtonAccessor.setAppearance(LEFT_BUTTON_APPEARANCE);  leftButtonAccessor.setText(LEFT_BUTTON_TEXT,null);  leftButtonAccessor.setIcon(leftDrawable,null);  leftButtonAccessor.setTextColor(LEFT_BUTTON_COLOR);  leftButtonAccessor.setTextSize(LEFT_BUTTON_TEXT_SIZE_SP);  leftButtonAccessor.setTypeface(Typeface.DEFAULT_BOLD);  final IntroButtonAccessor rightButtonAccessor=getRightButtonAccessor();  rightButtonAccessor.setBehaviour(RIGHT_BUTTON_BEHAVIOUR);  rightButtonAccessor.setAppearance(RIGHT_BUTTON_APPEARANCE);  rightButtonAccessor.setText(RIGHT_BUTTON_TEXT,null);  rightButtonAccessor.setIcon(rightDrawable,null);  rightButtonAccessor.setTextColor(RIGHT_BUTTON_COLOR);  rightButtonAccessor.setTextSize(RIGHT_BUTTON_TEXT_SIZE_SP);  rightButtonAccessor.setTypeface(Typeface.MONOSPACE);  final IntroButtonAccessor finalButtonAccessor=getFinalButtonAccessor();  finalButtonAccessor.setBehaviour(FINAL_BUTTON_BEHAVIOUR);  finalButtonAccessor.setAppearance(FINAL_BUTTON_APPEARANCE);  finalButtonAccessor.setText(FINAL_BUTTON_TEXT,null);  finalButtonAccessor.setIcon(finalDrawable,null);  finalButtonAccessor.setTextColor(FINAL_BUTTON_COLOR);  finalButtonAccessor.setTextSize(FINAL_BUTTON_TEXT_SIZE_SP);  finalButtonAccessor.setTypeface(Typeface.SANS_SERIF);}  }
class C{  public void assertArrayEqual(double[] expected,double[] actual,double maxRelativeError){  TestUtils.assertArrayEqual(expected,actual,maxRelativeError);}  }
class C{  @Override public int delete(Uri uri,String where,String[] whereArgs){  SQLiteDatabase db=getDbHelper().getWritableDatabase();  int count;switch (sUriMatcher.match(uri)) {case INSTANCES:    Cursor del=null;  try {    del=this.query(uri,null,where,whereArgs,null);    if (del.getCount() > 0) {      del.moveToFirst();      do {        String instanceFile=del.getString(del.getColumnIndex(InstanceColumns.INSTANCE_FILE_PATH));        Collect.getInstance().getActivityLogger().logAction(this,"delete",instanceFile);        File instanceDir=(new File(instanceFile)).getParentFile();        deleteAllFilesInDirectory(instanceDir);      } while (del.moveToNext());    }  }  finally {    if (del != null) {      del.close();    }  }count=db.delete(INSTANCES_TABLE_NAME,where,whereArgs);break;case INSTANCE_ID:String instanceId=uri.getPathSegments().get(1);Cursor c=null;try {c=this.query(uri,null,where,whereArgs,null);if (c.getCount() > 0) {c.moveToFirst();do {String instanceFile=c.getString(c.getColumnIndex(InstanceColumns.INSTANCE_FILE_PATH));Collect.getInstance().getActivityLogger().logAction(this,"delete",instanceFile);File instanceDir=(new File(instanceFile)).getParentFile();deleteAllFilesInDirectory(instanceDir);} while (c.moveToNext());}}  finally {if (c != null) {c.close();}}count=db.delete(INSTANCES_TABLE_NAME,InstanceColumns._ID + "=" + instanceId+ (!TextUtils.isEmpty(where) ? " AND (" + where + ')' : ""),whereArgs);break;default :throw new IllegalArgumentException("Unknown URI " + uri);}getContext().getContentResolver().notifyChange(uri,null);return count;}  }
class C{  public Expression popEnclosingMethodCall(){  return enclosingMethodCalls.removeFirst();}  }
class C{  public void scrollDownOneLine(int topMargin,int bottomMargin,long style){  if (topMargin > bottomMargin - 1 || topMargin < 0 || bottomMargin > mScreenRows)   throw new IllegalArgumentException("topMargin=" + topMargin + ", bottomMargin="+ bottomMargin+ ", mScreenRows="+ mScreenRows);  blockCopyLinesDown(mScreenFirstRow,topMargin);  blockCopyLinesDown(externalToInternalRow(bottomMargin),mScreenRows - bottomMargin);  mScreenFirstRow=(mScreenFirstRow + 1) % mTotalRows;  if (mActiveTranscriptRows < mTotalRows - mScreenRows)   mActiveTranscriptRows++;  int blankRow=externalToInternalRow(bottomMargin - 1);  if (mLines[blankRow] == null) {    mLines[blankRow]=new TerminalRow(mColumns,style);  } else {    mLines[blankRow].clear(style);  }}  }
class C{  public static void append(File file,Reader reader,boolean writeBom) throws IOException {  append(file,reader,Charset.defaultCharset().name(),writeBom);}  }
class C{  public boolean indexInRange(int index){  return index >= firstIndex_ && index < firstIndex_ + blockNum_;}  }
class C{  @Override void changeViewPosition(float xAxisDelta,float yAxisDelta){  ViewGroup.MarginLayoutParams layoutParams=(ViewGroup.MarginLayoutParams)getView().getLayoutParams();  if (isViewLeftAligned(layoutParams)) {    layoutParams.leftMargin+=xAxisDelta;  } else {    layoutParams.rightMargin-=xAxisDelta;  }  if (isViewTopAligned(layoutParams)) {    layoutParams.topMargin+=yAxisDelta;  } else {    layoutParams.bottomMargin-=yAxisDelta;  }  LOGGER.trace("Updated view margins: left = {}, top = {}, right = {}, bottom = {}",layoutParams.leftMargin,layoutParams.topMargin,layoutParams.rightMargin,layoutParams.bottomMargin);  getView().setLayoutParams(layoutParams);}  }
class C{  public void enableWriter(boolean enabled){  this.useWriter=enabled;}  }
class C{  public boolean hasStreamError(){  return streamError != null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public RawWriter(IChunkUploader uploader){  this.uploader=uploader;}  }
class C{  private void removeNewerPersistentID(Set<PersistentMemberID> membersToWaitFor,PersistentMemberID persistentID){  for (Iterator<PersistentMemberID> itr=membersToWaitFor.iterator(); itr.hasNext(); ) {    PersistentMemberID id=itr.next();    if (persistentID.isOlderOrEqualVersionOf(id)) {      if (logger.isDebugEnabled(LogMarker.PERSIST_ADVISOR)) {        logger.debug(LogMarker.PERSIST_ADVISOR,"{}-{}: Not waiting for {} because local member knows more about it",shortDiskStoreId(),regionPath,id);      }      itr.remove();    }  }}  }
class C{  public SatelliteAnimatedPickingGraphMousePlugin(){  this(InputEvent.BUTTON1_MASK | InputEvent.CTRL_MASK);}  }
class C{  public GPUImageRGBDilationFilter(int radius){  this(getVertexShader(radius),getFragmentShader(radius));}  }
class C{  public static boolean argParse(PsiBuilder builder,GroovyParser parser){  return AssignmentExpression.parse(builder,parser);}  }
class C{  public String publishReview() throws SaaSApplicationException {  if (!getConfig().isReviewEnabled()) {    return OUTCOME_REVIEW_ENABLEMENT_CHANGED;  }  HttpServletRequest httpRequest=getRequest();  getReviewService().writeReview(manageReviewModel.getServiceReview());  setForwardUrl(httpRequest);  return OUTCOME_MARKETPLACE_REDIRECT;}  }
class C{  public static boolean isValid(int c){  return (c < 0x10000 && (CHARS[c] & MASK_VALID) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  public String toBibTex(){  String result;  Field field;  Vector<Field> list;  int i;  String value;  result="@" + getType() + "{"+ getID()+ "";  list=new Vector<Field>();  Enumeration<Field> enm=fields();  while (enm.hasMoreElements()) {    list.add(enm.nextElement());  }  Collections.sort(list);  for (i=0; i < list.size(); i++) {    field=list.get(i);    if (!exists(field)) {      continue;    }    value=getValue(field);    value=value.replaceAll("\\~","\\\\~");    result+=",\n   " + field + " = {"+ value+ "}";  }  result+="\n}";  Enumeration<TechnicalInformation> enm2=additional();  while (enm2.hasMoreElements()) {    result+="\n\n" + enm2.nextElement().toBibTex();  }  return result;}  }
class C{  public static String ucfirst(String input){  return withFirst(input,null);}  }
class C{  public void zoom(double x,double y,double factor){  double rangeX=Math.abs(currentExtent.getMaxX() - currentExtent.getMinX());  double rangeY=Math.abs(currentExtent.getMaxY() - currentExtent.getMinY());  currentExtent.setMinX(x - (rangeX * factor) / 2.0);  currentExtent.setMinY(y - (rangeY * factor) / 2.0);  currentExtent.setMaxX(x + (rangeX * factor) / 2.0);  currentExtent.setMaxY(y + (rangeY * factor) / 2.0);  addToExtentHistory(currentExtent);}  }
class C{  public OutlierResult run(Relation<V> relation){  final DBIDs ids=relation.getDBIDs();  KNNQuery<V> knnQuery=QueryUtil.getKNNQuery(relation,getDistanceFunction(),k + 1);  final int dim=RelationUtil.dimensionality(relation);  if (k <= dim + 1) {    LOG.warning("PCA is underspecified with a too low k! k should be at much larger than " + dim);  }  WritableDoubleDataStore cop_score=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_STATIC);  WritableDataStore<double[]> cop_err_v=null;  WritableIntegerDataStore cop_dim=null;  if (models) {    cop_err_v=DataStoreUtil.makeStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_STATIC,double[].class);    cop_dim=DataStoreUtil.makeIntegerStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_STATIC,-1);  }  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Correlation Outlier Probabilities",relation.size(),LOG) : null;  for (DBIDIter id=ids.iter(); id.valid(); id.advance()) {    KNNList neighbors=knnQuery.getKNNForDBID(id,k + 1);    ModifiableDBIDs nids=DBIDUtil.newHashSet(neighbors);    nids.remove(id);    double[] centroid=Centroid.make(relation,nids).getArrayRef();    double[] relative=minusEquals(relation.get(id).toArray(),centroid);    PCAResult pcares=pca.processIds(nids,relation);    double[][] evecs=pcares.getEigenvectors();    double[] projected=transposeTimes(evecs,relative);    double[] evs=pcares.getEigenvalues();    double min=Double.POSITIVE_INFINITY;    int vdim=dim;switch (dist) {case CHISQUARED:{        double sqdevs=0;        for (int d=0; d < dim; d++) {          double dev=projected[d];          sqdevs+=dev * dev / evs[d];          double score=1 - ChiSquaredDistribution.cdf(sqdevs,d + 1);          if (score < min) {            min=score;            vdim=d + 1;          }        }        break;      }case GAMMA:{      double[][] dists=new double[dim][nids.size()];      int j=0;      double[] srel=new double[dim];      for (DBIDIter s=nids.iter(); s.valid() && j < nids.size(); s.advance()) {        V vec=relation.get(s);        for (int d=0; d < dim; d++) {          srel[d]=vec.doubleValue(d) - centroid[d];        }        double[] serr=transposeTimes(evecs,srel);        double sqdist=0.0;        for (int d=0; d < dim; d++) {          double serrd=serr[d];          sqdist+=serrd * serrd / evs[d];          dists[d][j]=sqdist;        }        j++;      }      double sqdevs=0;      for (int d=0; d < dim; d++) {        final double dev=projected[d];        sqdevs+=dev * dev / evs[d];        Arrays.sort(dists[d]);        double score=1 - GammaChoiWetteEstimator.STATIC.estimate(dists[d],SHORTENED_ARRAY).cdf(sqdevs);        if (score < min) {          min=score;          vdim=d + 1;        }      }      break;    }}final double prob=expect * (1 - min) / (expect + min);for (int d=vdim; d < dim; d++) {  projected[d]=0.;}double[] ev=timesEquals(times(evecs,projected),-1 * prob);cop_score.putDouble(id,prob);if (models) {  cop_err_v.put(id,ev);  cop_dim.putInt(id,dim + 1 - vdim);}LOG.incrementProcessed(prog);}LOG.ensureCompleted(prog);DoubleRelation scoreResult=new MaterializedDoubleRelation("Correlation Outlier Probabilities",COP_SCORES,cop_score,ids);OutlierScoreMeta scoreMeta=new ProbabilisticOutlierScore();OutlierResult result=new OutlierResult(scoreMeta,scoreResult);if (models) {result.addChildResult(new MaterializedRelation<>("Local Dimensionality",COP_DIM,TypeUtil.INTEGER,cop_dim,ids));result.addChildResult(new MaterializedRelation<>("Error vectors",COP_ERRORVEC,TypeUtil.DOUBLE_ARRAY,cop_err_v,ids));}return result;}  }
class C{  public void testTxPartitionedOptimisticRepeatableRead() throws Exception {  checkTx(PARTITIONED,OPTIMISTIC,REPEATABLE_READ);}  }
class C{  protected void assertCompactionTimeStat(long compactionTime,ASSERT_OP op){  ManagementService service=ManagementService.getExistingManagementService(getCache());  assertNotNull(service);  assertTrue(service.isManager());  MemberMXBean memberBean=service.getMemberMXBean();  assertNotNull(memberBean);switch (op) {case EQUAL:    assertEquals(compactionTime,memberBean.getOffHeapCompactionTime());  break;case GREATER_THAN:assertTrue(compactionTime < memberBean.getOffHeapCompactionTime());break;case GREATER_THAN_OR_EQUAL:assertTrue(compactionTime <= memberBean.getOffHeapCompactionTime());break;case LESS_THAN:assertTrue(compactionTime > memberBean.getOffHeapCompactionTime());break;}}  }
class C{  public void send(final byte[] theBytes,final InetAddress theAddress,final int thePort){  if (isRunning) {    try {      DatagramPacket myPacket=new DatagramPacket(theBytes,theBytes.length,theAddress,thePort);      send(myPacket);    } catch (    NullPointerException npe) {      Logger.printError("UdpClient.send","a nullpointer exception occured." + npe);    }  } else {    Logger.printWarning("UdpClient.send","DatagramSocket is not running. Packet has not been sent.");  }}  }
class C{  @Override public void close() throws IOException {  if (!access.equals("r")) {    if (dataStream != null) {      dataStream.close();      dataStream=null;    }    if (outputStream != null) {      outputStream.close();      outputStream=null;    }  } else   if (iStream != null) {    iStream.close();  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.293 -0500",hash_original_method="710CA77564EC78E634B8090E5C600333",hash_generated_method="F86F43D6D2A26E9F7B2A2BE42B2598B8") private void createSlot(int index){  Slot newSlot=new Slot();  Slot[] a=arena;synchronized (a) {    if (a[index] == null)     a[index]=newSlot;  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String arcHeaderFile=null;  String arcDataFile=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  String[] imageFiles;  int numImages=0;  double noData=-32768;  InputStream inStream=null;  OutputStream outStream=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    }  }  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      int progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",(int)progress);      arcDataFile=imageFiles[i];      if (!((new File(arcDataFile)).exists())) {        showFeedback("ArcGIS raster file does not exist.");        break;      }      arcHeaderFile=arcDataFile.replace(".flt",".hdr");      if (!arcHeaderFile.contains(".hdr")) {        arcHeaderFile=arcDataFile.replace(".FLT",".hdr");      }      whiteboxHeaderFile=arcHeaderFile.replace(".hdr",".dep");      whiteboxDataFile=arcHeaderFile.replace(".hdr",".tas");      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxDataFile)).delete();      File fromfile=new File(arcDataFile);      File tofile=new File(whiteboxDataFile);      inStream=new FileInputStream(fromfile);      outStream=new FileOutputStream(tofile);      byte[] buffer=new byte[1024];      int length;      while ((length=inStream.read(buffer)) > 0) {        outStream.write(buffer,0,length);      }      inStream.close();      outStream.close();      boolean success=createHeaderFile(arcHeaderFile,whiteboxHeaderFile);      if (!success) {        showFeedback("Arc header file was not read properly. " + "Tool failed to import");        return;      }      output=new WhiteboxRaster(whiteboxHeaderFile,"r");      output.findMinAndMaxVals();      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.writeHeaderFile();      output.close();      returnData(whiteboxHeaderFile);    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public ShortArray(final long length){  super(length);  mArray=new short[(int)length];}  }
class C{  public boolean hasLabel(){  return super.hasAttribute(LABEL);}  }
class C{  public boolean nfsv4Enabled(String firmwareVersion) throws IsilonException {  ClientResponse resp=null;  boolean isNfsv4Enabled=false;  try {    sLogger.debug("IsilonApi check nfsV4 support retrieve global status - start");    if (firmwareVersion.startsWith("8")) {      resp=_client.get(_baseUrl.resolve(URI_ARRAY_GLOBAL_STATUS_ONEFS8));    } else {      resp=_client.get(_baseUrl.resolve(URI_ARRAY_GLOBAL_STATUS));    }    sLogger.debug("IsilonApi check nfsV4 support retrieve global status - complete");    JSONObject jsonResp=resp.getEntity(JSONObject.class);    isNfsv4Enabled=Boolean.parseBoolean(jsonResp.getJSONObject("settings").getString("nfsv4_enabled"));    sLogger.info("IsilonApi  nfsv4 enable/disable is set to {}",isNfsv4Enabled);  } catch (  Exception e) {    throw IsilonException.exceptions.unableToConnect(_baseUrl,e);  } finally {    if (resp != null) {      resp.close();    }  }  return isNfsv4Enabled;}  }
class C{  private <T>List<T> runMaxParallel(final List<Callable<T>> tasks,final long timeout,final TimeUnit unit) throws ExecutionException, InterruptedException {  final long begin=System.nanoTime();  final List<Future<T>> futures=getThreadPool().invokeAll(tasks,timeout,unit);  final Iterator<Future<T>> itr=futures.iterator();  final List<T> list=new LinkedList<T>();  while (itr.hasNext()) {    final Future<T> f=itr.next();    list.add(f.get());  }  if (log.isInfoEnabled())   log.info("Ran " + tasks.size() + " tasks in parallel: elapsed="+ TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - begin));  return list;}  }
class C{  public boolean hasMatching(IMultiItemStacks stack){  final ItemStack s=get();  if (stack == null || stack.isEmpty()) {    return s == null;  } else   if (stack != null && s != null) {    return stack.containsItemStack(s);  }  return false;}  }
class C{  public AttributeCreator moveAttribute(AttributeKey<?> attKey,Path path){  Preconditions.checkArgument(path.selectsAttribute(),"Path must refer to an attribute.");  AttributeCreatorImpl dest=replaceAttribute(attKey);  AttributeCreatorImpl source=getAttributeCreator(path);  dest.setSource(path,source.getTransformKey());  source.moved();  return dest;}  }
class C{  public boolean isSupplier(){  return isRoleAvailable(getSelectedOrganization(),OrganizationRoleType.SUPPLIER);}  }
class C{  public KeyCrypterScrypt(){  Protos.ScryptParameters.Builder scryptParametersBuilder=Protos.ScryptParameters.newBuilder().setSalt(ByteString.copyFrom(randomSalt()));  this.scryptParameters=scryptParametersBuilder.build();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isRollOplogs(){  return this.compactOplogs;}  }
class C{  @DSComment("not data related") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:55.168 -0500",hash_original_method="D9A5990E9ED63A0A9D454C79A44593C3",hash_generated_method="AC521883E3CA4ADEFFD9410ACEB1F335") public IvParameterSpec(byte[] iv){  if (iv == null) {    throw new NullPointerException("iv == null");  }  this.iv=new byte[iv.length];  System.arraycopy(iv,0,this.iv,0,iv.length);}  }
class C{  public static void main(String[] args){  double[][] matrix=getMatrix();  System.out.println("It is" + (isMarkovMatrix(matrix) ? " " : " not ") + "a Markov matrix");}  }
class C{  protected BatchLookup(IRabaCoder keysCoder,IRabaCoder valsCoder,int fromIndex,int toIndex,byte[][] keys){  super(keysCoder,valsCoder,fromIndex,toIndex,keys,null);}  }
class C{  protected ProbDistPanel(){  pdf=null;}  }
class C{  public static void transformLine(Reader reader,Writer writer,@ClosureParams(value=SimpleType.class,options="java.lang.String") Closure closure) throws IOException {  BufferedReader br=new BufferedReader(reader);  BufferedWriter bw=new BufferedWriter(writer);  String line;  try {    while ((line=br.readLine()) != null) {      Object o=closure.call(line);      if (o != null) {        bw.write(o.toString());        bw.newLine();      }    }    bw.flush();    Writer temp2=writer;    writer=null;    temp2.close();    Reader temp1=reader;    reader=null;    temp1.close();  }  finally {    closeWithWarning(br);    closeWithWarning(reader);    closeWithWarning(bw);    closeWithWarning(writer);  }}  }
class C{  private CodeAnalysisResults analyseSourceFile(File sourceFile,ASTAnalyzer analyser){  final DelphiAST ast=new DelphiAST(sourceFile,delphiProjectHelper.encoding());  if (ast.isError()) {    DelphiUtils.LOG.error("Error while parsing " + sourceFile.getAbsolutePath());    return null;  }  try {    final CodeAnalysisResults results=analyser.analyze(ast);    ++scannedFiles;    return results;  } catch (  Exception e) {    if (DelphiUtils.LOG.isDebugEnabled()) {      DelphiUtils.LOG.debug("Error analyzing file: " + e.getMessage() + " "+ sourceFile.getAbsolutePath(),e);    } else {      DelphiUtils.LOG.error("Error analyzing file: " + e.getMessage() + " "+ sourceFile.getAbsolutePath());    }  }  return null;}  }
class C{  public static void fileReadEnd(Object context,long bytesRead){  IoTraceHandler.fileReadEnd(context,bytesRead);}  }
class C{  public void updated(T model){}  }
class C{  public boolean registerDimNoUpdate(DimensionProperties properties,boolean registerWithForge){  int dimId=properties.getId();  Integer dim=new Integer(dimId);  if (dimensionList.containsKey(dim))   return false;  if (registerWithForge && dimId < GASGIANT_DIMID_OFFSET && !net.minecraftforge.common.DimensionManager.isDimensionRegistered(dim)) {    net.minecraftforge.common.DimensionManager.registerProviderType(properties.getId(),DimensionManager.planetWorldProvider,false);    net.minecraftforge.common.DimensionManager.registerDimension(dimId,dimId);  }  dimensionList.put(dimId,properties);  return true;}  }
