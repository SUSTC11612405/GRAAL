class C{  public UserPreference(){  super();}  }
class C{  private void initializeControlDependencies(){  Set<String> targetClasses=new LinkedHashSet<String>();  for (  TestFitnessFunction ff : linesCoverageMap.values()) {    targetClasses.add(ff.getTargetClass());  }  for (  String className : targetClasses) {    List<BytecodeInstruction> instructions=BytecodeInstructionPool.getInstance(TestGenerationContext.getInstance().getClassLoaderForSUT()).getInstructionsIn(className);    if (instructions == null) {      logger.info("No instructions known for class {} (is it an enum?)",className);      continue;    }    for (    BytecodeInstruction bi : instructions) {      if (bi.getBasicBlock() == null) {        continue;      }      for (      ControlDependency cd : bi.getControlDependencies()) {        if (cd.getBranchExpressionValue()) {          branchesToCoverTrue.add(cd.getBranch().getActualBranchId());        } else {          branchesToCoverFalse.add(cd.getBranch().getActualBranchId());        }      }    }  }  branchesToCoverBoth.addAll(branchesToCoverTrue);  branchesToCoverBoth.retainAll(branchesToCoverFalse);  branchesToCoverTrue.removeAll(branchesToCoverBoth);  branchesToCoverFalse.removeAll(branchesToCoverBoth);  logger.info("Covering branches true: " + branchesToCoverTrue);  logger.info("Covering branches false: " + branchesToCoverFalse);  logger.info("Covering branches both: " + branchesToCoverBoth);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.378 -0500",hash_original_method="F0A4CF0EC627D6BB4B7444677CFA585E",hash_generated_method="DA599FFF1484C1231175AA0F18A7B1EF") public void printDialogTable(){  if (isLoggingEnabled()) {    this.getStackLogger().logDebug("dialog table  = " + this.dialogTable);    System.out.println("dialog table = " + this.dialogTable);  }}  }
class C{  public WorkloadFileReader(final String fileName,final int rating) throws FileNotFoundException {  if (fileName == null || fileName.length() == 0) {    throw new IllegalArgumentException("Invalid trace file name.");  } else   if (rating <= 0) {    throw new IllegalArgumentException("Resource PE rating must be > 0.");  }  file=new File(fileName);  if (!file.exists()) {    throw new FileNotFoundException("Workload trace " + fileName + " does not exist");  }  this.rating=rating;}  }
class C{  public void makeRectangleColorChange(){  final Timeline timeline=new Timeline();  timeline.setCycleCount(Timeline.INDEFINITE);  RectangleBlinkEventHandler cursorChange=new RectangleBlinkEventHandler();  KeyFrame keyFrame=new KeyFrame(Duration.seconds(1),cursorChange);  timeline.getKeyFrames().add(keyFrame);  timeline.play();}  }
class C{  protected <K,V>ConcurrentLinkedHashMap<K,V> newGuarded(){  EvictionListener<K,V> guardingListener=guardingListener();  return new Builder<K,V>().maximumWeightedCapacity(capacity()).listener(guardingListener).build();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.CONSTRAINT_BODY___CONSTRAINT_EXPR_1:    return constraintExpr_1 != null && !constraintExpr_1.isEmpty();case UmplePackage.CONSTRAINT_BODY___ANONYMOUS_CONSTRAINT_BODY_11:  return anonymous_constraintBody_1_1 != null && !anonymous_constraintBody_1_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private static NetworkInterface chooseDefaultInterface(){  Enumeration<NetworkInterface> nifs;  try {    nifs=NetworkInterface.getNetworkInterfaces();  } catch (  IOException ignore) {    return null;  }  NetworkInterface ppp=null;  NetworkInterface loopback=null;  while (nifs.hasMoreElements()) {    NetworkInterface ni=nifs.nextElement();    try {      if (ni.isUp() && ni.supportsMulticast()) {        boolean isLoopback=ni.isLoopback();        boolean isPPP=ni.isPointToPoint();        if (!isLoopback && !isPPP) {          return ni;        }        if (ppp == null && isPPP)         ppp=ni;        if (loopback == null && isLoopback)         loopback=ni;      }    } catch (    IOException skip) {    }  }  return (ppp != null) ? ppp : loopback;}  }
class C{  public DefaultJavaType(String fullName){  this(fullName,0);}  }
class C{  public long timestamp(){  return timestamp;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:14.801 -0500",hash_original_method="BFE96ED2CE5B148D8BC4E31880D4A75D",hash_generated_method="15ADCC82ED098E1EC67EA6E8E267CAA9") public final void recycle(){  if (TRACK_RECYCLED_LOCATION) {    if (mRecycledLocation != null) {      throw new RuntimeException(toString() + " recycled twice!",mRecycledLocation);    }    mRecycledLocation=new RuntimeException("Last recycled here");  } else {    if (mRecycled) {      throw new RuntimeException(toString() + " recycled twice!");    }    mRecycled=true;  }  mClipData=null;  mClipDescription=null;  mLocalState=null;synchronized (gRecyclerLock) {    if (gRecyclerUsed < MAX_RECYCLED) {      gRecyclerUsed++;      mNext=gRecyclerTop;      gRecyclerTop=this;    }  }}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] enclosingRectangle=image.getEnclosingRectangle();  if (enclosingRectangle == null) {    throw NotFoundException.getNotFoundInstance();  }  int left=enclosingRectangle[0];  int top=enclosingRectangle[1];  int width=enclosingRectangle[2];  int height=enclosingRectangle[3];  BitMatrix bits=new BitMatrix(MATRIX_WIDTH,MATRIX_HEIGHT);  for (int y=0; y < MATRIX_HEIGHT; y++) {    int iy=top + (y * height + height / 2) / MATRIX_HEIGHT;    for (int x=0; x < MATRIX_WIDTH; x++) {      int ix=left + (x * width + width / 2 + (y & 0x01) * width / 2) / MATRIX_WIDTH;      if (image.get(ix,iy)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  public boolean releaseEncumbranceBudget(final Map<String,Object> detailsMap){  if (detailsMap == null)   throw new ValidationException(Arrays.asList(new ValidationError("required input is null","required input is null")));  detailsMap.put(Constants.CONSUMEORRELEASE,false);  final BigDecimal bd=getDetails(detailsMap);  return bd.intValue() == 1;}  }
class C{  protected AbstractLongSpliterator(long est,int additionalCharacteristics){  this.est=est;  this.characteristics=((additionalCharacteristics & Spliterator.SIZED) != 0) ? additionalCharacteristics | Spliterator.SUBSIZED : additionalCharacteristics;}  }
class C{  public SignatureVisitor visitParameterType(){  return this;}  }
class C{  public long freeMemory(){  return MemoryManager.freeMemory().toLong();}  }
class C{  static synchronized public void create(Ade ade) throws AdeException {  if (m_adeExt != null) {    throw new AdeInternalException("Ade Ext object already created");  }  m_adeExt=new AdeExt(ade);}  }
class C{  public void deinstall(JTextComponent c){  component=null;}  }
class C{  protected void paintArrow(Graphics2D g2,double x,double y,int w,int h,boolean topDown){  int intX=(int)(x + 0.5);  int intY=(int)(y + 0.5);  if (orientation == VERTICAL) {    if (w % 2 == 0) {      w=w - 1;    }    if (topDown) {      for (int i=0; i < (w / 2 + 1); i++) {        g2.drawLine(intX + i,intY + i,intX + w - i - 1,intY + i);      }    } else {      for (int i=0; i < (w / 2 + 1); i++) {        g2.drawLine(intX + w / 2 - i,intY + i,intX + w - w / 2 + i - 1,intY + i);      }    }  } else {    if (h % 2 == 0) {      h=h - 1;    }    if (topDown) {      for (int i=0; i < (h / 2 + 1); i++) {        g2.drawLine(intX + i,intY + i,intX + i,intY + h - i - 1);      }    } else {      for (int i=0; i < (h / 2 + 1); i++) {        g2.drawLine(intX + i,intY + h / 2 - i,intX + i,intY + h - h / 2 + i - 1);      }    }  }}  }
class C{  public VerticalLineGenerator(double xValue){  this.xValue=xValue;}  }
class C{  public boolean isRunning(){  return this.running;}  }
class C{  public EqualsResult append(final short lhs,final short rhs){  if (!isEqual) {    return this;  }  isEqual=lhs == rhs;  return this;}  }
class C{  @Override protected void onPostExecute(final RecommendationCollection result){  PlaceDetailsActivity.this.setProgressBarIndeterminateVisibility(false);  if (result == null || result.getItems() == null || result.getItems().size() < 1) {    if (result == null) {      recommendationsListLabel.setText(R.string.failedToRetrieveRecommendations);    } else {      recommendationsListLabel.setText(R.string.noRecommendations);    }    recommendationsList.setAdapter(null);    return;  }  recommendationsListLabel.setText(R.string.recommendations);  ListAdapter recommendationsListAdapter=createRecommendationsListAdapter(result.getItems());  recommendationsList.setAdapter(recommendationsListAdapter);}  }
class C{  public static boolean isIBMXIVBackend(BlockObject fcObject,DbClient dbClient){  String systemType=getBackendStorageSystemType(fcObject,dbClient);  if (DiscoveredDataObject.Type.ibmxiv.name().equals(systemType)) {    return true;  }  return false;}  }
class C{  public void add(KmlFeature item){  mItems.add(item);}  }
class C{  public DViewPublicKey(JFrame parent,String title,PublicKey publicKey) throws CryptoException {  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  this.publicKey=publicKey;  initComponents();}  }
class C{  public X509CertificateHolderSelector(X500Name issuer,BigInteger serialNumber){  this(issuer,serialNumber,null);}  }
class C{  public void onCharacteristicChanged(BluetoothGatt gatt,BluetoothGattCharacteristic characteristic){}  }
class C{  void forceWrite(){  if (queue.offer(Roster.getDefault())) {    log.debug("forceWrite queued OK");  } else {    log.error("forceWrite failed to queue roster write");  }}  }
class C{  public void appendOpenSpanTag(String style){  StringBuilder sb=new StringBuilder("<span");  if (style != null) {    sb.append(" style=\"");    sb.append(style);    sb.append("\"");  }  sb.append(">");  text.append(sb.toString());}  }
class C{  public boolean isPropertyMatching(SingleProperty<?> updatedProperty){  return property.equals(updatedProperty.getLogicalName());}  }
class C{  @Override public void write(int b) throws IOException {  for (  OutputStream stream : outs)   stream.write(b);}  }
class C{  private static final void parseCmdLine(String[] args){  int i=0;  String arg;  while (i < args.length && args[i].startsWith("-")) {    arg=args[i++];    if (arg.equals("-b")) {      if (i < args.length) {        nbody=Integer.parseInt(args[i++]);      } else {        throw new Error("-l requires the number of levels");      }    } else     if (arg.equals("-s")) {      if (i < args.length) {        nsteps=Integer.parseInt(args[i++]);      } else {        throw new Error("-l requires the number of levels");      }    } else     if (arg.equals("-m")) {      printMsgs=true;    } else     if (arg.equals("-p")) {      printResults=true;    } else     if (arg.equals("-h")) {      usage();    }  }  if (nbody == 0)   usage();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static boolean isVplexBackendVolume(Volume volume,DbClient dbClient){  final List<Volume> vplexVolumes=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,Volume.class,getVolumesByAssociatedId(volume.getId().toString()));  for (  Volume vplexVolume : vplexVolumes) {    URI storageURI=vplexVolume.getStorageController();    StorageSystem storage=dbClient.queryObject(StorageSystem.class,storageURI);    if (DiscoveredDataObject.Type.vplex.name().equals(storage.getSystemType())) {      return true;    }  }  return false;}  }
class C{  public static void quicksort(int[] source){  quicksort(source,0,source.length - 1);}  }
class C{  private int[] mergeEstimators(HyperLogLogPlus other){  other.mergeTempList();  int[] tmp=other.getSparseSet();  mergeTempList();  int[] set=sparseSet;  List<Integer> newSet=new ArrayList<Integer>();  int seti=0;  int tmpi=0;  while (seti < set.length || tmpi < tmp.length) {    if (seti >= set.length) {      newSet.add(tmp[tmpi++]);    } else     if (tmpi >= tmp.length) {      newSet.add(set[seti++]);    } else {      int setVal=set[seti];      int tmpVal=tmp[tmpi];      if (getSparseIndex(setVal) == getSparseIndex(tmpVal)) {        newSet.add(Math.min(setVal,tmpVal));        tmpi++;        seti++;      } else       if (getSparseIndex(setVal) < getSparseIndex(tmpVal)) {        newSet.add(setVal);        seti++;      } else {        newSet.add(tmpVal);        tmpi++;      }    }  }  return toIntArray(newSet);}  }
class C{  public void append(String inner,String outer,String name,int flags){  int i=constPool.addClassInfo(inner);  int o=constPool.addClassInfo(outer);  int n=constPool.addUtf8Info(name);  append(i,o,n,flags);}  }
class C{  public void waitForUpdate(){  resolveExecutor.waitForEndAllTasks();}  }
class C{  public void testScalarArrays() throws Exception {  ObjectMapper m=new ObjectMapper();  m.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT);  Object[] input=new Object[]{"abc",new Date(1234567),null,Integer.valueOf(456)};  String json=m.writeValueAsString(input);  assertEquals("[\"abc\",[\"java.util.Date\",1234567],null,456]",json);  Object[] output=m.readValue(json,Object[].class);  assertArrayEquals(input,output);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  private static void storeParameters(Assembler asm,int frameSize,RVMMethod method,RVMClass klass){  int nextOSArgReg, nextOSArgFloatReg, nextVMArgReg, nextVMArgFloatReg;  int spillOffsetOS;  if (VM.BuildForPower64ELF_ABI) {    spillOffsetOS=NATIVE_FRAME_HEADER_SIZE + 2 * BYTES_IN_STACKSLOT;  } else {    if (VM.VerifyAssertions)     VM._assert(VM.BuildForSVR4ABI);    spillOffsetOS=NATIVE_FRAME_HEADER_SIZE;  }  int spillOffsetVM=frameSize + STACKFRAME_HEADER_SIZE;  TypeReference[] types=method.getParameterTypes();  asm.emitLAddrOffset(THREAD_REGISTER,S0,Entrypoints.JNIRefsField.getOffset());  asm.emitLIntOffset(KLUDGE_TI_REG,S0,Entrypoints.JNIRefsTopField.getOffset());  asm.emitADD(KLUDGE_TI_REG,THREAD_REGISTER,KLUDGE_TI_REG);  asm.emitLIntOffset(S1,S0,Entrypoints.JNIRefsSavedFPField.getOffset());  asm.emitSTWU(S1,BYTES_IN_ADDRESS,KLUDGE_TI_REG);  asm.emitSUBFC(S1,THREAD_REGISTER,KLUDGE_TI_REG);  asm.emitSTWoffset(S1,S0,Entrypoints.JNIRefsSavedFPField.getOffset());  nextOSArgFloatReg=FIRST_OS_PARAMETER_FPR.value();  nextVMArgFloatReg=FIRST_VOLATILE_FPR.value();  nextOSArgReg=FIRST_OS_PARAMETER_GPR.value() + 2;  if (method.isStatic()) {    nextVMArgReg=FIRST_VOLATILE_GPR.value();  } else {    nextVMArgReg=FIRST_VOLATILE_GPR.value() + 1;  }  if (VM.VerifyAssertions)   VM._assert(FIRST_OS_PARAMETER_FPR == FIRST_VOLATILE_FPR);  if (VM.VerifyAssertions)   VM._assert(LAST_OS_PARAMETER_FPR.value() <= LAST_VOLATILE_FPR.value());  if (VM.VerifyAssertions)   VM._assert(FIRST_OS_PARAMETER_GPR == FIRST_VOLATILE_GPR);  if (VM.VerifyAssertions)   VM._assert(LAST_OS_PARAMETER_GPR.value() <= LAST_VOLATILE_GPR.value());  generateParameterPassingCode(asm,types,nextVMArgReg,nextVMArgFloatReg,spillOffsetVM,nextOSArgReg,nextOSArgFloatReg,spillOffsetOS);  GPR SECOND_OS_PARAMETER_GPR=GPR.lookup(FIRST_OS_PARAMETER_GPR.value() + 1);  if (method.isStatic()) {    Offset klassOffset=Offset.fromIntSignExtend(Statics.findOrCreateObjectLiteral(klass.getClassForType()));    asm.emitLAddrToc(SECOND_OS_PARAMETER_GPR,klassOffset);    asm.emitSTAddrU(SECOND_OS_PARAMETER_GPR,BYTES_IN_ADDRESS,KLUDGE_TI_REG);    asm.emitSUBFC(SECOND_OS_PARAMETER_GPR,THREAD_REGISTER,KLUDGE_TI_REG);  } else {    asm.emitSTAddrU(T0,BYTES_IN_ADDRESS,KLUDGE_TI_REG);    asm.emitSUBFC(SECOND_OS_PARAMETER_GPR,THREAD_REGISTER,KLUDGE_TI_REG);  }  asm.emitSUBFC(KLUDGE_TI_REG,THREAD_REGISTER,KLUDGE_TI_REG);  asm.emitSTWoffset(KLUDGE_TI_REG,S0,Entrypoints.JNIRefsTopField.getOffset());}  }
class C{  public RootBlockUtility(final BufferMode bufferMode,final int offsetBits,final long createTime,final long quorumToken,final UUID storeUUID){  if (bufferMode == null)   throw new IllegalArgumentException("BufferMode is required.");  if (createTime == 0L)   throw new IllegalArgumentException("Create time may not be zero.");  if (storeUUID == null)   throw new IllegalArgumentException("Store UUID is required.");  final ChecksumUtility checker=ChecksumUtility.threadChk.get();  final long nextOffset=0L;  final long closeTime=0L;  final long commitCounter=0L;  final long firstCommitTime=0L;  final long lastCommitTime=0L;  final long commitRecordAddr=0L;  final long commitRecordIndexAddr=0L;  final StoreTypeEnum stenum=bufferMode.getStoreType();  final long blockSequence=IRootBlockView.NO_BLOCK_SEQUENCE;  rootBlock0=new RootBlockView(true,offsetBits,nextOffset,firstCommitTime,lastCommitTime,commitCounter,commitRecordAddr,commitRecordIndexAddr,storeUUID,blockSequence,quorumToken,0L,0L,stenum,createTime,closeTime,RootBlockView.currentVersion,checker);  rootBlock1=new RootBlockView(false,offsetBits,nextOffset,firstCommitTime,lastCommitTime,commitCounter,commitRecordAddr,commitRecordIndexAddr,storeUUID,blockSequence,quorumToken,0L,0L,stenum,createTime,closeTime,RootBlockView.currentVersion,checker);  this.rootBlock=rootBlock0;}  }
class C{  @Override public void flush(){}  }
class C{  public ArtisticArrowhead(){  setupControlPoints(4);}  }
class C{  public SubExpr newSubExpr(Value op1,Value op2){  return new JSubExpr(op1,op2);}  }
class C{  public boolean isReviewer(ReviewDb db) throws OrmException {  return isReviewer(db,null);}  }
class C{  @Override public boolean supportsLongValues(){  return SUPPORTS_LONG_VALUES;}  }
class C{  public Node appendNode(Object name,Object value){  return new Node(this,name,value);}  }
class C{  public static double[] defaultMinMix(){  return new double[]{Double.MAX_VALUE,-Double.MAX_VALUE};}  }
class C{  private boolean containsBlackPoint(int a,int b,int fixed,boolean horizontal){  if (horizontal) {    for (int x=a; x <= b; x++) {      if (image.get(x,fixed)) {        return true;      }    }  } else {    for (int y=a; y <= b; y++) {      if (image.get(fixed,y)) {        return true;      }    }  }  return false;}  }
class C{  public Vector4d sub(Vector4fc v){  x-=v.x();  y-=v.y();  z-=v.z();  w-=v.w();  return this;}  }
class C{  @Nonnull public static <T>Collection<T> checkNotEmpty(Collection<T> collection,@Nonnull String errorMessage){  checkState(collection != null && !collection.isEmpty(),errorMessage);  return collection;}  }
class C{  private void validateStoragePolicySelection(StoragePolicySelection storagePolicySelection){  Assert.notNull(storagePolicySelection,"A storage policy selection must be specified.");  businessObjectDataHelper.validateBusinessObjectDataKey(storagePolicySelection.getBusinessObjectDataKey(),true,true);  storagePolicyHelper.validateStoragePolicyKey(storagePolicySelection.getStoragePolicyKey());  Assert.notNull(storagePolicySelection.getStoragePolicyVersion(),"A storage policy version must be specified.");}  }
class C{  public void testIsError(){  assertFalse(CoderResult.UNDERFLOW.isError());  assertFalse(CoderResult.OVERFLOW.isError());  assertTrue(CoderResult.malformedForLength(1).isError());  assertTrue(CoderResult.unmappableForLength(1).isError());}  }
class C{  public static boolean contains(short[] self,Object value){  for (  short next : self) {    if (DefaultTypeTransformation.compareEqual(value,next))     return true;  }  return false;}  }
class C{  public MultiMatchQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  @Deprecated public RenderContext withAsciiOnly(boolean b){  return this;}  }
class C{  @Override public void beginWindow(long windowId){}  }
class C{  public void testUpdateLiteralsWithLanguageTags() throws Exception {  final String queryStr="SELECT * WHERE { ?s ?p ?o }";  long nrTriplesBeforeUpdate=countSolutions(queryStr);  StringBuilder updateStrBuf=new StringBuilder();  updateStrBuf.append("INSERT DATA { ");  updateStrBuf.append("<http://rm-lod.org/object/2176/production/date> ");  updateStrBuf.append("<http://www.w3.org/2000/01/rdf-schema#label> ");  updateStrBuf.append("\"1906\"@ru . }");  String updateStr=updateStrBuf.toString();  final BigdataSailUpdate update=(BigdataSailUpdate)con.prepareUpdate(QueryLanguage.SPARQL,updateStr);  update.execute();  long nrTriplesAfterUpdate=countSolutions(queryStr);  assertEquals(nrTriplesBeforeUpdate + 1,nrTriplesAfterUpdate);}  }
class C{  public synchronized void clearSessions(Context context,Boolean clearCredentials){synchronized (instance) {    while (mMXSessions.size() > 0) {      clearSession(context,mMXSessions.get(0),clearCredentials);    }  }}  }
class C{  public PrefixFilterator(final ITupleCursor<E> src,final Object context,final PrefixFilter<E> filter){  if (src == null)   throw new IllegalArgumentException();  if (filter == null)   throw new IllegalArgumentException();  this.src=src;  this.context=context;  this.filter=filter;  this.index=0;  nextPrefix();}  }
class C{  public static boolean removeRecipeByOutput(ItemStack aOutput,boolean aIgnoreNBT,boolean aNotRemoveShapelessRecipes,boolean aOnlyRemoveNativeHandlers){  if (aOutput == null)   return false;  boolean rReturn=false;  ArrayList<IRecipe> tList=(ArrayList<IRecipe>)CraftingManager.getInstance().getRecipeList();  aOutput=GT_OreDictUnificator.get(aOutput);  int tList_sS=tList.size();  for (int i=0; i < tList_sS; i++) {    IRecipe tRecipe=tList.get(i);    if (aNotRemoveShapelessRecipes && (tRecipe instanceof ShapelessRecipes || tRecipe instanceof ShapelessOreRecipe))     continue;    if (aOnlyRemoveNativeHandlers) {      if (!sNativeRecipeClasses.contains(tRecipe.getClass().getName()))       continue;    } else {      if (sSpecialRecipeClasses.contains(tRecipe.getClass().getName()))       continue;    }    ItemStack tStack=tRecipe.getRecipeOutput();    if ((!(tRecipe instanceof IGT_CraftingRecipe) || ((IGT_CraftingRecipe)tRecipe).isRemovable()) && GT_Utility.areStacksEqual(GT_OreDictUnificator.get(tStack),aOutput,aIgnoreNBT)) {      tList.remove(i--);      tList_sS=tList.size();      rReturn=true;    }  }  return rReturn;}  }
class C{  public boolean verifyTimeoutCode(String timeoutCode,long currentInterval,int pastIntervals,int futureIntervals) throws GeneralSecurityException {  pastIntervals=Math.max(pastIntervals,0);  futureIntervals=Math.max(futureIntervals,0);  for (int i=-pastIntervals; i <= futureIntervals; ++i) {    String candidate=generateResponseCode(currentInterval - i,null);    if (candidate.equals(timeoutCode)) {      return true;    }  }  return false;}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGraphPackage.STATECHART__SCOPES:    return ((InternalEList<?>)getScopes()).basicRemove(otherEnd,msgs);case SGraphPackage.STATECHART__REGIONS:  return ((InternalEList<?>)getRegions()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void dump(final File dumpFile) throws IOException {  final Logger logger=defaultLogger;  final Integer port=getCurrentPort(logger);  if (port == null) {    logger.info("Apache MiNiFi is not currently running");    return;  }  final Properties nifiProps=loadProperties(logger);  final String secretKey=nifiProps.getProperty("secret.key");  final StringBuilder sb=new StringBuilder();  try (final Socket socket=new Socket()){    logger.debug("Connecting to MiNiFi instance");    socket.setSoTimeout(60000);    socket.connect(new InetSocketAddress("localhost",port));    logger.debug("Established connection to MiNiFi instance.");    socket.setSoTimeout(60000);    logger.debug("Sending DUMP Command to port {}",port);    final OutputStream out=socket.getOutputStream();    out.write((DUMP_CMD + " " + secretKey+ "\n").getBytes(StandardCharsets.UTF_8));    out.flush();    final InputStream in=socket.getInputStream();    try (final BufferedReader reader=new BufferedReader(new InputStreamReader(in))){      String line;      while ((line=reader.readLine()) != null) {        sb.append(line).append("\n");      }    }   }   final String dump=sb.toString();  if (dumpFile == null) {    logger.info(dump);  } else {    try (final FileOutputStream fos=new FileOutputStream(dumpFile)){      fos.write(dump.getBytes(StandardCharsets.UTF_8));    }     cmdLogger.info("Successfully wrote thread dump to {}",dumpFile.getAbsolutePath());  }}  }
class C{  public void collectSubstitutes(Scope scope,TypeBinding actualType,InferenceContext inferenceContext,int constraint){  if ((this.tagBits & TagBits.HasTypeVariable) == 0) {    TypeBinding actualEquivalent=actualType.findSuperTypeOriginatingFrom(this.type);    if (actualEquivalent != null && actualEquivalent.isRawType()) {      inferenceContext.isUnchecked=true;    }    return;  }  if (actualType == TypeBinding.NULL)   return;  if (!(actualType instanceof ReferenceBinding))   return;  TypeBinding formalEquivalent, actualEquivalent;switch (constraint) {case TypeConstants.CONSTRAINT_EQUAL:case TypeConstants.CONSTRAINT_EXTENDS:    formalEquivalent=this;  actualEquivalent=actualType.findSuperTypeOriginatingFrom(this.type);if (actualEquivalent == null) return;break;case TypeConstants.CONSTRAINT_SUPER:default :formalEquivalent=this.findSuperTypeOriginatingFrom(actualType);if (formalEquivalent == null) return;actualEquivalent=actualType;break;}ReferenceBinding formalEnclosingType=formalEquivalent.enclosingType();if (formalEnclosingType != null) {formalEnclosingType.collectSubstitutes(scope,actualEquivalent.enclosingType(),inferenceContext,constraint);}if (this.arguments == null) return;TypeBinding[] formalArguments;switch (formalEquivalent.kind()) {case Binding.GENERIC_TYPE:formalArguments=formalEquivalent.typeVariables();break;case Binding.PARAMETERIZED_TYPE:formalArguments=((ParameterizedTypeBinding)formalEquivalent).arguments;break;case Binding.RAW_TYPE:if (inferenceContext.depth > 0) {inferenceContext.status=InferenceContext.FAILED;}return;default :return;}TypeBinding[] actualArguments;switch (actualEquivalent.kind()) {case Binding.GENERIC_TYPE:actualArguments=actualEquivalent.typeVariables();break;case Binding.PARAMETERIZED_TYPE:actualArguments=((ParameterizedTypeBinding)actualEquivalent).arguments;break;case Binding.RAW_TYPE:if (inferenceContext.depth > 0) {inferenceContext.status=InferenceContext.FAILED;} else {inferenceContext.isUnchecked=true;}return;default :return;}inferenceContext.depth++;for (int i=0, length=formalArguments.length; i < length; i++) {TypeBinding formalArgument=formalArguments[i];TypeBinding actualArgument=actualArguments[i];if (formalArgument.isWildcard()) {formalArgument.collectSubstitutes(scope,actualArgument,inferenceContext,constraint);continue;} else if (actualArgument.isWildcard()) {WildcardBinding actualWildcardArgument=(WildcardBinding)actualArgument;if (actualWildcardArgument.otherBounds == null) {if (constraint == TypeConstants.CONSTRAINT_SUPER) {switch (actualWildcardArgument.boundKind) {case Wildcard.EXTENDS:formalArgument.collectSubstitutes(scope,actualWildcardArgument.bound,inferenceContext,TypeConstants.CONSTRAINT_SUPER);continue;case Wildcard.SUPER:formalArgument.collectSubstitutes(scope,actualWildcardArgument.bound,inferenceContext,TypeConstants.CONSTRAINT_EXTENDS);continue;default :continue;}} else {continue;}}}formalArgument.collectSubstitutes(scope,actualArgument,inferenceContext,TypeConstants.CONSTRAINT_EQUAL);}inferenceContext.depth--;}  }
class C{  public static PathPoint moveTo(float x,float y){  return new PathPoint(MOVE,x,y);}  }
class C{  public void addUsers(org.oscm.xsd.User param){  if (localUsers == null) {    localUsers=new org.oscm.xsd.User[]{};  }  localUsersTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localUsers);  list.add(param);  this.localUsers=(org.oscm.xsd.User[])list.toArray(new org.oscm.xsd.User[list.size()]);}  }
class C{  public void updateShapeShadowsToCurrentTime(boolean updateMinutes,boolean updateHours,int currentMinute,int currentHour){  if (updateMinutes) {    int tens=(int)Math.floor(currentMinute / 10.0f);    int units=(int)Math.floor(currentMinute % 10.0f);    if (minutesTens.getCurrentValue() != tens) {      String mt=String.format("%d",tens);      mt=mt.concat(".json");      Log.d(TAG,"MINUTE TENS STRING: " + mt);      minutesTens.parseJSON(mt);    }    if (minutesUnits.getCurrentValue() != units) {      String mu=String.format("%d",units);      mu=mu.concat(".json");      Log.d(TAG,"MINUTE UNITS STRING: " + mu);      minutesUnits.parseJSON(mu);    }  }  if (updateHours) {    int tens=(int)Math.floor(currentHour / 10.0f);    int units=(int)Math.floor(currentHour % 10.0f);    if (hoursTens.getCurrentValue() != tens) {      String ht=String.format("%d",tens);      ht=ht.concat(".json");      Log.d(TAG,"HOURS TENS STRING: " + ht);      hoursTens.parseJSON(ht);    }    if (hoursUnits.getCurrentValue() != units) {      String hu=String.format("%d",units);      hu=hu.concat(".json");      Log.d(TAG,"HOURS UNITS STRING: " + hu);      hoursUnits.parseJSON(hu);    }  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:03.481 -0500",hash_original_method="C9A1242FF2125DF955BA0640C93EB6EB",hash_generated_method="F589F88BC8E285568B73C1ECE9CC898C") static CdmaDataConnection makeDataConnection(CDMAPhone phone,int id,RetryManager rm){synchronized (mCountLock) {    mCount+=1;  }  CdmaDataConnection cdmaDc=new CdmaDataConnection(phone,"CdmaDC-" + mCount,id,rm);  cdmaDc.start();  if (DBG)   cdmaDc.log("Made " + cdmaDc.getName());  return cdmaDc;}  }
class C{  public void testMaxAttributes(){  m_Filter=getFilter();  ((PrincipalComponents)m_Filter).setMaximumAttributeNames(2);  performTest();}  }
class C{  public void put(String key,Byte value){  mValues.put(key,value);}  }
class C{  public static ByteArray toByteArray(String s){  try {    return new ByteArray(s.getBytes("UTF-8"));  } catch (  UnsupportedEncodingException e) {    throw new IllegalStateException(e);  }}  }
class C{  public void writeRawBytes(final byte[] value) throws IOException {  writeRawBytes(value,0,value.length);}  }
class C{  public void moveItemUp(ScheduleItem si){  int sequenceId=si.getSequenceId();  if (sequenceId - 1 <= 0) {    si.setSequenceId(_sequenceNum + 1);    resequenceIds();  } else {    ScheduleItem replaceSi=getItemBySequenceId(sequenceId - 1);    if (replaceSi != null) {      replaceSi.setSequenceId(sequenceId);      si.setSequenceId(sequenceId - 1);    } else {      resequenceIds();    }  }  setDirtyAndFirePropertyChange(LISTCHANGE_CHANGED_PROPERTY,null,Integer.toString(sequenceId));}  }
class C{  public Page goTo(PageFactory factory){  return goTo(factory,new NoAnimationFactory());}  }
class C{  public boolean onReceivedClientCertRequest(CordovaWebView view,ICordovaClientCertRequest request){  return false;}  }
class C{  public static int size(char[] array){  return Array.getLength(array);}  }
class C{  private int detachFrom(JComponent comp){  assert comp instanceof JTree || comp instanceof JList;  comp.removeMouseMotionListener(this);  comp.removeMouseListener(this);  return refcount--;}  }
class C{  public void pruneValues(double threshold){  if (distrib.pruneValues(threshold)) {    cachedValues=null;  }}  }
class C{  public static <T>Collection<T> notNullElements(Collection<T> list,String name){  notEmpty(list,name);  for (  T ele : list) {    notNull(ele,String.format("Collection %s element %s",name,ele));  }  return list;}  }
class C{  public void insert(INode n){  closed.insert(n);}  }
class C{  public <T>T newModel(Class<T> type,Object key){  return newModel(type,key,EntityConstraint.noConstraints());}  }
class C{  public XYAreaRenderer2(){  this(null,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:49.736 -0500",hash_original_method="F508F532A25EB5B4727057181F2BF528",hash_generated_method="1237B74E8ECF0647A1B1DA830D1899AE") public boolean isReplyPathPresent(){  return mWrappedSmsMessage.isReplyPathPresent();}  }
class C{  public boolean matchStrings(String str,Map<String,String> uriTemplateVariables){  Matcher matcher=this.pattern.matcher(str);  if (matcher.matches()) {    if (uriTemplateVariables != null) {      if (this.variableNames.size() != matcher.groupCount()) {        throw new IllegalArgumentException("The number of capturing groups in the pattern segment " + this.pattern + " does not match the number of URI template variables it defines, "+ "which can occur if capturing groups are used in a URI template regex. "+ "Use non-capturing groups instead.");      }      for (int i=1; i <= matcher.groupCount(); i++) {        String name=this.variableNames.get(i - 1);        String value=matcher.group(i);        uriTemplateVariables.put(name,value);      }    }    return true;  } else {    return false;  }}  }
class C{  @Override public void remove(int offset,int length) throws BadLocationException {  if (m_VFormat.length() == 0 || length != 1) {    log.finest("Offset=" + offset + " Length="+ length);    super.remove(offset,length);    return;  }  if (offset == 0) {    if (length == m_mask.length())     super.remove(offset,length);    return;  }  if (offset - 1 >= 0 && m_mask.charAt(offset - 1) != SPACE) {    if (offset - 2 >= 0)     m_tc.setCaretPosition(offset - 2); else     return;  } else   m_tc.setCaretPosition(offset - 1);}  }
class C{  public static boolean isEnabled(){  return isEnabled;}  }
class C{  public E next(){  E retVal=current.value;  current=current.next;  return retVal;}  }
class C{  protected void updatePositions(){  for (int i=0; i < swarmSize; i++) {    updatePosition(i);  }}  }
class C{  public Entity_ createEntity_(){  Entity_Impl entity_=new Entity_Impl();  return entity_;}  }
class C{  public Lazy(){  this(null);}  }
class C{  public void testSortsElementsByNthName() throws Exception {  XppDom dom1=XppFactory.buildDom("<dom><a/><b/><c/><a/></dom>");  XppDom dom2=XppFactory.buildDom("<dom><a/><b/><c/><b/></dom>");  assertEquals(-1,comparator.compare(dom1,dom2));  assertEquals("/dom/a[1]?",xpath.get());  assertEquals(1,comparator.compare(dom2,dom1));  assertEquals("/dom/b[1]?",xpath.get());}  }
class C{  private void removeHeaders(HttpServletResponse response,String fileName){  response.reset();  response.setContentType("application/octet-stream; name=" + fileName);  response.addHeader("content-disposition","filename=" + fileName);}  }
class C{  public static byte[] bitmapToJpg(final Bitmap image,final int quality){  if (image == null)   return null;  ByteArrayOutputStream ba=new ByteArrayOutputStream();  if (image.compress(CompressFormat.JPEG,quality,ba))   return ba.toByteArray(); else   return null;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.EXTERNAL_DEFINITION___CLASS_CONTENT_1:    return ((InternalEList<?>)getClassContent_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  static Class lookUpFactoryClass(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  String factoryClassName=lookUpFactoryClassName(factoryId,propertiesFilename,fallbackClassName);  ClassLoader cl=findClassLoader();  if (factoryClassName == null) {    factoryClassName=fallbackClassName;  }  try {    Class providerClass=findProviderClass(factoryClassName,cl,true);    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return providerClass;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + factoryClassName + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + factoryClassName + " could not be instantiated: "+ x,x);  }}  }
class C{  protected void countSortFromTo(int from,int to,char min,char max){  if (size == 0)   return;  checkRangeFromTo(from,to,size);  final int width=(int)(max - min + 1);  int[] counts=new int[width];  char[] theElements=elements;  for (int i=from; i <= to; )   counts[(int)(theElements[i++] - min)]++;  int fromIndex=from;  char val=min;  for (int i=0; i < width; i++, val++) {    int c=counts[i];    if (c > 0) {      if (c == 1)       theElements[fromIndex++]=val; else {        int toIndex=fromIndex + c - 1;        fillFromToWith(fromIndex,toIndex,val);        fromIndex=toIndex + 1;      }    }  }}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);}  }
class C{  public boolean isIndexed(){  Object oo=get_Value(COLUMNNAME_IsIndexed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public JavaAnnotationIterator(Iterator<Annotation> parent,boolean returnAllAnnotations){  fReturnAllAnnotations=returnAllAnnotations;  fIterator=parent;  skip();}  }
class C{  @Override public void updateDate(int columnIndex,Date x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateDate(" + columnIndex + ", x);");    }    update(columnIndex,x == null ? (Value)ValueNull.INSTANCE : ValueDate.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public ServerCQProxyImpl(ServerProxy sp){  this(sp.pool);}  }
class C{  public ComboBox(){  this(new DefaultListModel<T>());}  }
class C{  public DtoCustomerOrderServiceImpl(final DtoFactory dtoFactory,final GenericService<CustomerOrder> customerOrderGenericService,final AdaptersRepository adaptersRepository,final PaymentModulesManager paymentModulesManager,final CustomerOrderTransitionService transitionService,final CustomerOrderPaymentService customerOrderPaymentService){  super(dtoFactory,customerOrderGenericService,adaptersRepository);  this.transitionService=transitionService;  this.customerOrderPaymentService=customerOrderPaymentService;  orderDeliveryDetailAssembler=DTOAssembler.newAssembler(CustomerOrderDeliveryDetailDTOImpl.class,CustomerOrderDeliveryDet.class);  orderDeliveryAssembler=DTOAssembler.newAssembler(CustomerOrderDeliveryDTOImpl.class,CustomerOrderDelivery.class);  orderDetailAssembler=DTOAssembler.newAssembler(CustomerOrderDetailDTOImpl.class,CustomerOrderDet.class);  this.paymentModulesManager=paymentModulesManager;}  }
class C{  public static void closeOutputDirLogging(){  String endLoggingInfo="closing the logfile, i.e. messages sent to the logger after this message are not written to the logfile.";  log.info(endLoggingInfo);  Logger root=Logger.getRootLogger();  Appender app=root.getAppender(LOGFILE);  if (app != null) {    root.removeAppender(app);    app.close();  }  app=root.getAppender(WARNLOGFILE);  if (app != null) {    root.removeAppender(app);    app.close();  }}  }
class C{  public double flow(){  return flow;}  }
class C{  @Override public int hashCode(){  return ((int)(seconds ^ (seconds >>> 32))) + 51 * nanos;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static String dayToString(int day,int dayOfWeekLength){  return DateUtils.getDayOfWeekString(dayToUtilDay(day),dayOfWeekLength);}  }
class C{  public RpfTocHandler(String parentDir,int TOCNumber){  tocNumber=TOCNumber;  estimateDiskSpace=DEFAULT_FRAME_SPACE;  valid=loadFile(parentDir);  if (!valid) {    Debug.error("RpfTocHandler: Invalid TOC File in " + parentDir);  }}  }
class C{  public T caseBreakStatement(BreakStatement object){  return null;}  }
class C{  public LifecycleException(String message){  this(message,null);}  }
class C{  public boolean step(final Player player,final Sentence sentence){  if (sentence.isEmpty()) {    logger.debug("empty input sentence: " + getCurrentState());    return false;  }  if (matchTransition(MatchType.EXACT_MATCH,player,sentence)) {    return true;  } else   if (matchTransition(MatchType.NORMALIZED_MATCH,player,sentence)) {    return true;  } else   if (matchTransition(MatchType.SIMILAR_MATCH,player,sentence)) {    return true;  } else   if (matchTransition(MatchType.ABSOLUTE_JUMP,player,sentence)) {    return true;  } else   if (matchTransition(MatchType.NORMALIZED_JUMP,player,sentence)) {    return true;  } else   if (matchTransition(MatchType.SIMILAR_JUMP,player,sentence)) {    return true;  } else {    logger.debug("Couldn't match any state: " + getCurrentState() + ":"+ sentence);    return false;  }}  }
class C{  protected void visitChildren(Node parent){  Node node=parent.getFirstChild();  while (node != null) {    Node next=node.getNext();    node.accept(this);    node=next;  }}  }
class C{  protected void addToAlliance(final PlayerID player,final String allianceName){  alliances.put(player,allianceName);}  }
class C{  public void lockLocallyForClear(DM dm,InternalDistributedMember locker,CacheEvent event){  RegionVersionVector rvv=getVersionVector();  ARMLockTestHook alth=getRegionMap().getARMLockTestHook();  if (alth != null)   alth.beforeLock(this,event);  if (rvv != null) {    rvv.lockForClear(getFullPath(),dm,locker);    checkReadiness();    if (this.getAttributes().getScope().isDistributedNoAck()) {      Set<InternalDistributedMember> mbrs=getDistributionAdvisor().adviseCacheOp();      StateFlushOperation.flushTo(mbrs,this);    }  }  if (alth != null)   alth.afterLock(this,null);}  }
class C{  private boolean isDelaySlotWritingRegister(CompilerContext context,int registerIndex){  CodeInstruction delaySlotCodeInstruction=getDelaySlotCodeInstruction(context);  if (delaySlotCodeInstruction == null) {    return false;  }  return delaySlotCodeInstruction.isWritingRegister(registerIndex);}  }
class C{  public KXml2Driver(final NameCoder nameCoder){  super(nameCoder);}  }
class C{  public void componentResized(ComponentEvent e){  if (logger.isLoggable(Level.FINE)) {    logger.fine("Size changed: " + getWidth() + " x "+ getHeight());  }  projection.setWidth(getWidth());  projection.setHeight(getHeight());  fireProjectionChanged();}  }
class C{  private static void writeMarshalArgument(IndentingWriter p,String streamName,Type type,String name) throws IOException {  if (type.dimension().length() > 0 || type.asClassDoc() != null) {    p.p(streamName + ".writeObject(" + name+ ")");  } else   if (type.typeName().equals("boolean")) {    p.p(streamName + ".writeBoolean(" + name+ ")");  } else   if (type.typeName().equals("byte")) {    p.p(streamName + ".writeByte(" + name+ ")");  } else   if (type.typeName().equals("char")) {    p.p(streamName + ".writeChar(" + name+ ")");  } else   if (type.typeName().equals("short")) {    p.p(streamName + ".writeShort(" + name+ ")");  } else   if (type.typeName().equals("int")) {    p.p(streamName + ".writeInt(" + name+ ")");  } else   if (type.typeName().equals("long")) {    p.p(streamName + ".writeLong(" + name+ ")");  } else   if (type.typeName().equals("float")) {    p.p(streamName + ".writeFloat(" + name+ ")");  } else   if (type.typeName().equals("double")) {    p.p(streamName + ".writeDouble(" + name+ ")");  } else {    throw new AssertionError(type);  }}  }
class C{  public static byte[] certHash(X509Certificate cert) throws Exception {  return certHash(cert.getEncoded());}  }
class C{  static long discoveryId(){  return Lists.<Object>newArrayList(Utils.getHost(),Utils.getProcessID(),Thread.currentThread().getId()).hashCode();}  }
class C{  public void move(float left_right_tilt,float front_back_tilt,float vertical_speed,float angular_speed) throws IOException {  cmd_queue.add(new MoveCommand(combinedYawMode,left_right_tilt,front_back_tilt,vertical_speed,angular_speed));}  }
class C{  public void configure(){  NceTrafficController tc=new NceTrafficController();  this.getSystemConnectionMemo().setNceTrafficController(tc);  tc.setAdapterMemo(this.getSystemConnectionMemo());  if (getOptionState(option2Name).equals(getOptionChoices(option2Name)[0])) {    this.getSystemConnectionMemo().configureCommandStation(NceTrafficController.OPTION_2006);    this.getSystemConnectionMemo().setNceCmdGroups(~NceTrafficController.CMDS_USB);  } else {    this.getSystemConnectionMemo().configureCommandStation(NceTrafficController.OPTION_2004);    this.getSystemConnectionMemo().setNceCmdGroups(~NceTrafficController.CMDS_USB);  }  tc.connectPort(this);  this.getSystemConnectionMemo().configureManagers();  jmri.jmrix.nce.ActiveFlag.setActive();}  }
class C{  public RecyclerView.ViewHolder obtain(String type){  if (CACHE.containsKey(type)) {    if (CACHE.get(type).size() > 0) {      return CACHE.get(type).pop();    }  }  return null;}  }
class C{  public void clearListener(){  mListener=null;}  }
class C{  public RSeqHeader createRSeqHeader(long sequenceNumber) throws InvalidArgumentException {  if (sequenceNumber < 0)   throw new InvalidArgumentException("invalid sequenceNumber arg " + sequenceNumber);  RSeq rseq=new RSeq();  rseq.setSeqNumber(sequenceNumber);  return rseq;}  }
class C{  public static <A>StreamTValue<A> fromAnyM(final AnyMValue<A> anyM){  return of(anyM.map(null));}  }
class C{  public static double logAdd(double lx,double ly){  double max, negDiff;  if (lx > ly) {    max=lx;    negDiff=ly - lx;  } else {    max=ly;    negDiff=lx - ly;  }  if (max == Double.NEGATIVE_INFINITY) {    return max;  } else   if (negDiff < -LOGTOLERANCE) {    return max;  } else {    return max + Math.log(1.0 + Math.exp(negDiff));  }}  }
class C{  public StunException(String message,Throwable cause){  super(message,cause);}  }
class C{  protected boolean[] updateableClassifier(){  boolean[] result=new boolean[2];  print("updateable classifier...");  if (m_Classifier instanceof UpdateableClassifier) {    println("yes");    result[0]=true;  } else {    println("no");    result[0]=false;  }  return result;}  }
class C{  public void interceptStream(int index,InputStream stream) throws GuacamoleException {  logger.debug("Intercepting input stream #{} of tunnel \"{}\".",index,getUUID());  try {    inputStreamFilter.interceptStream(index,new BufferedInputStream(stream));  }  finally {    logger.debug("Intercepted input stream #{} of tunnel \"{}\" ended.",index,getUUID());  }}  }
class C{  private Diff generateDiff(final char[] revA,final char[] revB) throws UnsupportedEncodingException {  blockCount=0;  queueA=new ArrayList<DiffBlock>();  queueB=new ArrayList<DiffBlock>();  revABlocked=new boolean[revA.length];  revBBlocked=new boolean[revB.length];  int revAStartIndex=0, revAEndIndex=revA.length - 1;  int revBStartIndex=0, revBEndIndex=revB.length - 1;  while (revAStartIndex <= revAEndIndex && revBStartIndex <= revBEndIndex && revA[revAStartIndex] == revB[revBStartIndex]) {    revABlocked[revAStartIndex]=true;    revBBlocked[revBStartIndex]=true;    revAStartIndex++;    revBStartIndex++;  }  if (revAStartIndex != 0) {    queueA.add(new DiffBlock(this.blockCount,0,revAStartIndex,0,revBStartIndex,true));    queueB.add(new DiffBlock(this.blockCount,0,revAStartIndex,0,revBStartIndex,false));    this.blockCount++;  }  while (revAStartIndex < revAEndIndex && revBStartIndex < revBEndIndex && revA[revAEndIndex] == revB[revBEndIndex]) {    revABlocked[revAEndIndex]=true;    revBBlocked[revBEndIndex]=true;    revAEndIndex--;    revBEndIndex--;  }  if (revAEndIndex + 1 != revA.length) {    queueA.add(new DiffBlock(this.blockCount,revAEndIndex + 1,revA.length,revBEndIndex + 1,revB.length,true));    queueB.add(new DiffBlock(this.blockCount,revAEndIndex + 1,revA.length,revBEndIndex + 1,revB.length,false));    this.blockCount++;  }  scan(revA,revAStartIndex,revAEndIndex);  ArrayList<Integer> list;  char c;  int i=revBStartIndex;  while (i < revBEndIndex) {    c=revB[i];    list=positions.get(c);    if (list != null && findLongestMatch(revA,list,revB,i)) {      i+=longestMatch_size;    } else {      i++;    }  }  int j;  for (i=revAStartIndex; i <= revAEndIndex; i++) {    if (!revABlocked[i]) {      j=i;      while (i + 1 <= revAEndIndex && !revABlocked[++i]) {        ;      }      if (i + 1 > revAEndIndex) {        i++;      }      queueA.add(new DiffBlock(-1,j,i,-1,-1,true));    }  }  for (i=revBStartIndex; i <= revBEndIndex; i++) {    if (!revBBlocked[i]) {      j=i;      while (i + 1 <= revBEndIndex && !revBBlocked[++i]) {        ;      }      if (i + 1 > revBEndIndex) {        i++;      }      queueB.add(new DiffBlock(-1,-1,-1,j,i,false));    }  }  Collections.sort(queueA);  Collections.sort(queueB);  return blocks.manage(revA,revB,queueA,queueB);}  }
class C{  protected void sequence_IndexedAccessExpressionTail_MemberExpression_IndexedAccessExpression_2_1_0_0_ParameterizedPropertyAccessExpression_2_1_1_0_TaggedTemplateString_2_1_2_0(ISerializationContext context,IndexedAccessExpression semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.INDEXED_ACCESS_EXPRESSION__TARGET) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.INDEXED_ACCESS_EXPRESSION__TARGET));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.INDEXED_ACCESS_EXPRESSION__INDEX) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.INDEXED_ACCESS_EXPRESSION__INDEX));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTargetAction_2_1_0_0(),semanticObject.getTarget());  feeder.accept(grammarAccess.getIndexedAccessExpressionTailAccess().getIndexExpressionParserRuleCall_1_0(),semanticObject.getIndex());  feeder.finish();}  }
class C{  @Override public int selectedTimes(Photo photo){  return photo.getSelectedTimes();}  }
class C{  private ASCIIPropertyListParser(byte[] propertyListContent){  data=propertyListContent;}  }
class C{  public DrawerBuilder withHeader(@LayoutRes int headerViewRes){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  if (headerViewRes != -1) {    this.mHeaderView=mActivity.getLayoutInflater().inflate(headerViewRes,null,false);  }  return this;}  }
class C{  public void add(K key,V[] items){  Set<V> values=map.get(key);  if (values == null) {    values=(sorted ? new TreeSet<V>() : new HashSet<V>());    map.put(key,values);  }  values.addAll(Arrays.asList(items));}  }
class C{  public void register(String user,String password,Boolean initialize) throws AuthenticationException {  UserInformation ui=this.entityManager.find(UserInformation.class,user);  if (null != ui) {    if (initialize == false) {      throw new AuthenticationException("The user exists already!");    } else {      return;    }  }  byte[] salt=generateSalt();  byte[] encrypted_password=getEncryptedPassword(password,salt);  UserInformation userInfo=new UserInformation(user,salt,encrypted_password);  this.persist(userInfo);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void removeWaiter(WaitNode node){  if (node != null) {    node.thread=null;    retry:     for (; ; ) {      for (WaitNode pred=null, q=waiters, s; q != null; q=s) {        s=q.next;        if (q.thread != null)         pred=q; else         if (pred != null) {          pred.next=s;          if (pred.thread == null)           continue retry;        } else         if (!UNSAFE.compareAndSwapObject(this,waitersOffset,q,s))         continue retry;      }      break;    }  }}  }
class C{  public Object decode(Object object) throws DecoderException {  try {    char[] charArray=object instanceof String ? ((String)object).toCharArray() : (char[])object;    return decodeHex(charArray);  } catch (  ClassCastException e) {    throw new DecoderException(e.getMessage());  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String arcHeaderFile=null;  String arcDataFile=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  double noData=-32768;  int progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      whiteboxHeaderFile=imageFiles[i];      if (!((new File(whiteboxHeaderFile)).exists())) {        showFeedback("Whitebox raster file does not exist.");        break;      }      WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"r");      rows=wbr.getNumberRows();      cols=wbr.getNumberColumns();      noData=wbr.getNoDataValue();      arcHeaderFile=whiteboxHeaderFile.replace(".dep",".hdr");      arcDataFile=whiteboxHeaderFile.replace(".dep",".flt");      (new File(arcHeaderFile)).delete();      (new File(arcDataFile)).delete();      output=new WhiteboxRaster(whiteboxHeaderFile.replace(".dep","_temp.dep"),"rw",whiteboxHeaderFile,WhiteboxRaster.DataType.FLOAT,-9999);      output.setNoDataValue(-9999);      whiteboxDataFile=whiteboxHeaderFile.replace(".dep","_temp.tas");      double[] data=null;      for (row=0; row < rows; row++) {        data=wbr.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            output.setValue(row,col,data[col]);          } else {            output.setValue(row,col,-9999);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      output.close();      File dataFile=new File(whiteboxDataFile);      File arcFile=new File(arcDataFile);      dataFile.renameTo(arcFile);      boolean success=createHeaderFile(wbr,arcHeaderFile);      if (!success) {        showFeedback("ArcGIS header file was not written properly. " + "Tool failed to export");        return;      }      wbr.close();      (new File(whiteboxHeaderFile.replace(".dep","_temp.dep"))).delete();    }    showFeedback("Operation complete!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  JSONObject jo=new JSONObject();  JSONTokener x=new JSONTokener(string);  while (x.more()) {    String name=Cookie.unescape(x.nextTo('='));    x.next('=');    jo.put(name,Cookie.unescape(x.nextTo(';')));    x.next();  }  return jo;}  }
class C{  public void addFstore(int n){  if (n < 4)   addOpcode(67 + n); else   if (n < 0x100) {    addOpcode(FSTORE);    add(n);  } else {    addOpcode(WIDE);    addOpcode(FSTORE);    addIndex(n);  }}  }
class C{  public boolean isCharacter(){  return meta.getType() == MetaCharacter.CHARACTER;}  }
class C{  public RaptorImageRegistry(Display display){  this(JFaceResources.getResources(display));}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public boolean isAssignableFrom(Class<?> cls){  return isAssignableFrom((Type)cls);}  }
class C{  public boolean isModified(){  I instance=_instance;  if (instance == null) {    return true;  }  if (DeployMode.MANUAL.equals(_strategy.redeployMode())) {    return false;  }  return instance.isModified();}  }
class C{  public MqttPersistenceException(int reason,Throwable cause){  super(reason,cause);}  }
class C{  public void addAll(MultiHashMap<K,V> source){  for (  K key : source.getKeys()) {    add(key,source.get(key));  }}  }
class C{  public void init(IWorkbench workbench,IStructuredSelection selection){  this.workbench=workbench;  this.selection=selection;  setWindowTitle(EipEditorPlugin.INSTANCE.getString("_UI_Wizard_label"));  setDefaultPageImageDescriptor(ExtendedImageRegistry.INSTANCE.getImageDescriptor(EipEditorPlugin.INSTANCE.getImage("full/wizban/NewEip")));}  }
class C{  public static String s(final String name){  return "html/help/setting/" + name + ".html";}  }
class C{  private static ValueLob createSmallLob(int type,byte[] small){  return new ValueLob(type,small);}  }
class C{  public static Date createDate(String str) throws ParseException {  throw new UnsupportedOperationException("Not yet implemented");}  }
class C{  public DataFormatDetector withMinimalMatch(MatchStrength minMatch){  if (minMatch == _minimalMatch) {    return this;  }  return new DataFormatDetector(_detectors,_optimalMatch,minMatch,_maxInputLookahead);}  }
class C{  public boolean matchesAny(String... seq){  for (  String s : seq) {    if (matches(s))     return true;  }  return false;}  }
class C{  private Method methodByName(Class<?> cls,String name,Class<?>... paramTypes){  try {    return cls.getMethod(name,paramTypes);  } catch (  NoSuchMethodException ignored) {    return null;  }}  }
class C{  private void populateProfiles(final ProfileList profiles){  profilesComboBox.removeAllItems();  for (  Profile p : profiles) {    profilesComboBox.addItem(p);  }  final int count=profilesComboBox.getItemCount();  if (count != 0) {    profilesComboBox.setSelectedIndex(count - 1);  }}  }
class C{  protected void skip(){  do {    readBlock();  } while ((blockSize > 0) && !err());}  }
class C{  DropLocation dropLocationForPoint(Point p){  Position.Bias[] bias=new Position.Bias[1];  int index=getUI().viewToModel(this,p,bias);  if (bias[0] == null) {    bias[0]=Position.Bias.Forward;  }  return new DropLocation(p,index,bias[0]);}  }
class C{  private static boolean isFinalField(Field field){  if (Properties.RESET_STATIC_FINAL_FIELDS) {    if (Modifier.isFinal(field.getModifiers())) {      return true;    } else {      String fieldName=field.getName();      final boolean isModifiedStaticField=ModifiedTargetStaticFields.getInstance().containsField(fieldName);      return isModifiedStaticField;    }  } else {    final boolean isFinalField=Modifier.isFinal(field.getModifiers());    return isFinalField;  }}  }
class C{  public Object put(Object key1,Object key2,Object key3,Object key4,Object key5,Object value){  int hashCode=hash(key1,key2,key3,key4,key5);  int index=map.hashIndex(hashCode,map.data.length);  AbstractHashedMap.HashEntry entry=map.data[index];  while (entry != null) {    if (entry.hashCode == hashCode && isEqualKey(entry,key1,key2,key3,key4,key5)) {      Object oldValue=entry.getValue();      map.updateEntry(entry,value);      return oldValue;    }    entry=entry.next;  }  map.addMapping(index,hashCode,new MultiKey(key1,key2,key3,key4,key5),value);  return null;}  }
class C{  public static void normalize(double[] doubles){  double sum=0;  for (  double d : doubles) {    sum+=d;  }  normalize(doubles,sum);}  }
class C{  private boolean nextString(){  int state;  int pos=0;  savedStates.grow(seekBytesRef.length() + 1);  savedStates.setIntAt(0,0);  while (true) {    curGen++;    linear=false;    for (state=savedStates.intAt(pos); pos < seekBytesRef.length(); pos++) {      visited[state]=curGen;      int nextState=runAutomaton.step(state,seekBytesRef.byteAt(pos) & 0xff);      if (nextState == -1)       break;      savedStates.setIntAt(pos + 1,nextState);      if (!finite && !linear && visited[nextState] == curGen) {        setLinear(pos);      }      state=nextState;    }    if (nextString(state,pos)) {      return true;    } else {      if ((pos=backtrack(pos)) < 0)       return false;      final int newState=runAutomaton.step(savedStates.intAt(pos),seekBytesRef.byteAt(pos) & 0xff);      if (newState >= 0 && runAutomaton.isAccept(newState))       return true;      if (!finite)       pos=0;    }  }}  }
class C{  private void correctErrors(byte[] codewordBytes,int numDataCodewords) throws ChecksumException {  int numCodewords=codewordBytes.length;  int[] codewordsInts=new int[numCodewords];  for (int i=0; i < numCodewords; i++) {    codewordsInts[i]=codewordBytes[i] & 0xFF;  }  int numECCodewords=codewordBytes.length - numDataCodewords;  try {    rsDecoder.decode(codewordsInts,numECCodewords);  } catch (  ReedSolomonException ignored) {    throw ChecksumException.getChecksumInstance();  }  for (int i=0; i < numDataCodewords; i++) {    codewordBytes[i]=(byte)codewordsInts[i];  }}  }
class C{  protected HttpCookie decodeCookie(String cookieString){  byte[] bytes=hexStringToByteArray(cookieString);  ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(bytes);  HttpCookie cookie=null;  try {    ObjectInputStream objectInputStream=new ObjectInputStream(byteArrayInputStream);    cookie=((SerializableHttpCookie)objectInputStream.readObject()).getCookie();  } catch (  IOException e) {    Log.d(LOG_TAG,"IOException in decodeCookie",e);  }catch (  ClassNotFoundException e) {    Log.d(LOG_TAG,"ClassNotFoundException in decodeCookie",e);  }  return cookie;}  }
class C{  private LoggerHolder(){  throw new AssertionError("This should never be instantiated");}  }
class C{  private static void mergeSort(Object[] src,Object[] dest,int low,int high,int off){  int length=high - low;  if (length < INSERTIONSORT_THRESHOLD) {    for (int i=low; i < high; i++)     for (int j=i; j > low && ((Comparable)dest[j - 1]).compareTo((Comparable)dest[j]) > 0; j--)     swap(dest,j,j - 1);    return;  }  int destLow=low;  int destHigh=high;  low+=off;  high+=off;  int mid=(low + high) >> 1;  mergeSort(dest,src,low,mid,-off);  mergeSort(dest,src,mid,high,-off);  if (((Comparable)src[mid - 1]).compareTo((Comparable)src[mid]) <= 0) {    System.arraycopy(src,low,dest,destLow,length);    return;  }  for (int i=destLow, p=low, q=mid; i < destHigh; i++) {    if (q >= high || p < mid && ((Comparable)src[p]).compareTo(src[q]) <= 0)     dest[i]=src[p++]; else     dest[i]=src[q++];  }}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public static void viterbiWalk(final HGNode node,final WalkerFunction walker,final int nodeIndex){  walker.apply(node,nodeIndex);  final HyperEdge bestEdge=node.bestHyperedge;  final List<HGNode> tailNodes=bestEdge.getTailNodes();  if (tailNodes != null) {    for (int tailNodeIndex=0; tailNodeIndex < tailNodes.size(); tailNodeIndex++) {      viterbiWalk(tailNodes.get(tailNodeIndex),walker,tailNodeIndex);    }  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public DebugDrawer build(){  return new DebugDrawer(this);}  }
class C{  @Override public String toString(){  final StringBuilder sb=new StringBuilder();  final String thisSimpleName=this.getClass().getSimpleName();  sb.append(LS);  sb.append("### ").append(thisSimpleName).append(" SUMMARY: ").append(LS);  sb.append("   Max k: ").append(ReservoirSize.decodeValue(encodedMaxK_)).append(LS);  if (gadget_ == null) {    sb.append("   Gadget is null").append(LS);  } else {    sb.append("   Gadget summary: ").append(gadget_.toString());  }  sb.append("### END UNION SUMMARY").append(LS);  return sb.toString();}  }
class C{  public void read(DataInputStream in) throws IOException {  int magic=in.readInt();  if (magic != JAVA_MAGIC) {    failure("fatal bad class file format");  }  expectedMinorVersion=in.readShort();  ;  expectedMajorVersion=in.readShort();  expectedCpoolCount=in.readUnsignedShort();  in.close();}  }
class C{  public static boolean isLocalHost(Object host){  if (host instanceof InetAddress) {    if (InetAddressUtil.LOCALHOST.equals(host)) {      return true;    } else     if (((InetAddress)host).isLoopbackAddress()) {      return true;    } else {      try {        Enumeration en=NetworkInterface.getNetworkInterfaces();        while (en.hasMoreElements()) {          NetworkInterface i=(NetworkInterface)en.nextElement();          for (Enumeration en2=i.getInetAddresses(); en2.hasMoreElements(); ) {            InetAddress addr=(InetAddress)en2.nextElement();            if (host.equals(addr)) {              return true;            }          }        }        return false;      } catch (      SocketException e) {        throw new IllegalArgumentException(LocalizedStrings.InetAddressUtil_UNABLE_TO_QUERY_NETWORK_INTERFACE.toLocalizedString(),e);      }    }  } else {    return isLocalHost(toInetAddress(host.toString()));  }}  }
class C{  public static void perform(final String tag){  final StackTraceElement[] trace=Thread.currentThread().getStackTrace();  final String testClass=trace[3].getClassName();  final String testMethod=trace[3].getMethodName();  onView(isRoot()).perform(new SpoonScreenshotAction(tag,testClass,testMethod));}  }
class C{  public boolean isAboveThresholdFlappingStopped(){  return aboveThresholdFlappingStopped;}  }
class C{  public boolean removeNondestructively(Object o){  int numObjs=this.numObjs;  Object[] objs=this.objs;  for (int x=0; x < numObjs; x++)   if (o == null ? objs[x] == null : o == objs[x] || o.equals(objs[x])) {    removeNondestructively(x);    return true;  }  return false;}  }
class C{  public void reduce(Text key,Iterator<FloatWritable> values,OutputCollector<Text,FloatWritable> output,Reporter reporter) throws IOException {  long numCollected=0;  float sumOrMax=0;  float val=0;  while (values.hasNext() && (numCollected < topn)) {    val=values.next().get();    if (sum) {      sumOrMax+=val;    } else {      if (sumOrMax < val) {        sumOrMax=val;      }    }    numCollected++;  }  output.collect(key,new FloatWritable(sumOrMax));}  }
class C{  public boolean containsPoint(ReadonlyVec2D p){  Vec2D v1=p.sub(a);  Vec2D v2=p.sub(b);  Vec2D v3=p.sub(c);  if (v1.isZeroVector() || v2.isZeroVector() || v3.isZeroVector()) {    return true;  }  v1.normalize();  v2.normalize();  v3.normalize();  double total_angles=Math.acos(v1.dot(v2));  total_angles+=Math.acos(v2.dot(v3));  total_angles+=Math.acos(v3.dot(v1));  return (MathUtils.abs(total_angles - MathUtils.TWO_PI) <= 0.001);}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);}  }
class C{  public void addTask(Task task,boolean isPriority){  int id=next_id.incrementAndGet();  task.addListener(finishListener);  task.setTaskID(id);  Optional<ServerSet> s=setFor(task.getRPC());  if (!s.isPresent()) {    task.kill();    return;  }  if (task.state.get() == TaskState.RUNNING) {synchronized (s.get().active) {      s.get().active.add(task);    }    return;  }  if (!task.setState(TaskState.INITIAL,TaskState.QUEUED))   return;synchronized (s.get().queued) {    if (isPriority)     s.get().queued.addFirst(task); else     s.get().queued.addLast(task);  }}  }
class C{  public void putBlockWidthRelative(int i,boolean b){  if (b)   masks[i]|=BLOCK_WIDTH_RELATIVE_MASK; else   masks[i]&=~BLOCK_WIDTH_RELATIVE_MASK;}  }
class C{  protected Field(String name){  super(name);}  }
class C{  protected boolean isOutlier(Instance inst){  boolean result;  int i;  result=false;  for (i=0; i < m_AttributeIndices.length; i++) {    if (m_AttributeIndices[i] == NON_NUMERIC) {      continue;    }    result=isOutlier(inst,i);    if (result) {      break;    }  }  return result;}  }
class C{  public static <K,V>Map<K,V> of(Map<K,V> map){  return new MRUMapCache<>(map);}  }
class C{  public void buildAclEntries(PrincipalImpl owner,AclImpl acl){  if (children != null) {    for (int i=0; i < children.length; ++i) {      SimpleNode n=(SimpleNode)children[i];      if (n != null) {        n.buildAclEntries(owner,acl);      }    }  }}  }
class C{  public static Long sizeStrToKBytes(String sizeStr){  return sizeStrToBytes(sizeStr) / KB;}  }
class C{  private void calcEntryCountIncludingStacks(List<BarEntry> yVals){  mEntryCountStacks=0;  for (int i=0; i < yVals.size(); i++) {    float[] vals=yVals.get(i).getVals();    if (vals == null)     mEntryCountStacks++; else     mEntryCountStacks+=vals.length;  }}  }
class C{  public boolean contains(XAtom atom){  return atoms.contains(atom);}  }
class C{  public void step(float dt,int velocityIterations,int positionIterations){  stepTimer.reset();  tempTimer.reset();  if ((m_flags & NEW_FIXTURE) == NEW_FIXTURE) {    m_contactManager.findNewContacts();    m_flags&=~NEW_FIXTURE;  }  m_flags|=LOCKED;  step.dt=dt;  step.velocityIterations=velocityIterations;  step.positionIterations=positionIterations;  if (dt > 0.0f) {    step.inv_dt=1.0f / dt;  } else {    step.inv_dt=0.0f;  }  step.dtRatio=m_inv_dt0 * dt;  step.warmStarting=m_warmStarting;  m_profile.stepInit.record(tempTimer.getMilliseconds());  tempTimer.reset();  m_contactManager.collide();  m_profile.collide.record(tempTimer.getMilliseconds());  if (m_stepComplete && step.dt > 0.0f) {    tempTimer.reset();    m_particleSystem.solve(step);    m_profile.solveParticleSystem.record(tempTimer.getMilliseconds());    tempTimer.reset();    solve(step);    m_profile.solve.record(tempTimer.getMilliseconds());  }  if (m_continuousPhysics && step.dt > 0.0f) {    tempTimer.reset();    solveTOI(step);    m_profile.solveTOI.record(tempTimer.getMilliseconds());  }  if (step.dt > 0.0f) {    m_inv_dt0=step.inv_dt;  }  if ((m_flags & CLEAR_FORCES) == CLEAR_FORCES) {    clearForces();  }  m_flags&=~LOCKED;  m_profile.step.record(stepTimer.getMilliseconds());}  }
class C{  @Override public boolean onSingleTapConfirmed(final MotionEvent e,final MapView mapView){  if (isEnabled()) {    mMarkerId=NO_MARKER_ID;    moveTo(e,mapView);    updateMarker(null,NO_MARKER_ID,getPosition(),null);    hideImage();  }  return super.onSingleTapConfirmed(e,mapView);}  }
class C{  public void clear(){  entries.clear();  if (filteredEntries != null) {    filteredEntries.clear();  }  if (entryLookup != null) {    entryLookup.clear();  }  logCount=0;  warningCount=0;  errorCount=0;}  }
class C{  public Object encode(Object object) throws EncoderException {  try {    byte[] byteArray=object instanceof String ? ((String)object).getBytes() : (byte[])object;    return encodeHex(byteArray);  } catch (  ClassCastException e) {    throw new EncoderException(e.getMessage());  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Object next(){  String[] line=(String[])super.next();  while (line != null && line.length == 0)   line=(String[])super.next();  if (line == null)   return null;  String pos=line[1];  if (pos.equals("-"))   pos=null;  Token t=new Token(new Word(line[0],pos),null,line[2]);  for (line=(String[])super.next(); line != null && line.length > 0; line=(String[])super.next()) {    pos=line[1];    if (pos.equals("-"))     pos=null;    t.next=new Token(new Word(line[0],pos),t,line[2]);    t=(Token)t.next;  }  return new LinkedVector(t);}  }
class C{  public void updateRaster(int x1,int y1,int w,int h,int[] pix,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkRaster.write(x1,y1,w,h,pix,properties,link.dos);}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  } else   if (o == null) {    return false;  }  if (getClass() != o.getClass()) {    return false;  }  Invocation inv=(Invocation)o;  if (_isSecure != inv._isSecure) {    return false;  }  if (_rawURI != inv._rawURI && (_rawURI == null || !_rawURI.equals(inv._rawURI))) {    return false;  }  if (_rawHost != inv._rawHost && (_rawHost == null || !_rawHost.equals(inv._rawHost))) {    return false;  }  if (_port != inv._port) {    return false;  }  String aQuery=queryString();  String bQuery=inv.queryString();  if (aQuery != bQuery && (aQuery == null || !aQuery.equals(bQuery))) {    return false;  }  return true;}  }
class C{  public double powerRequest(){  update();  return Math.min(maxEnergyReceived,maxEnergyStored - energyStored);}  }
class C{  public SortingParams limit(final int start,final int count){  params.add(LIMIT.raw);  params.add(Protocol.toByteArray(start));  params.add(Protocol.toByteArray(count));  return this;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.PROPERTY_ASSIGNMENT_ANNOTATION_LIST___GET_DEFINED_MEMBER:    return getDefinedMember();case N4JSPackage.PROPERTY_ASSIGNMENT_ANNOTATION_LIST___IS_VALID_NAME:  return isValidName();case N4JSPackage.PROPERTY_ASSIGNMENT_ANNOTATION_LIST___GET_NAME:return getName();case N4JSPackage.PROPERTY_ASSIGNMENT_ANNOTATION_LIST___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS:return appliesOnlyToBlockScopedElements();}return super.eInvoke(operationID,arguments);}  }
class C{  @Nullable public String taskName(){  return taskName;}  }
class C{  private static void _compressBZip2(InputStream source,OutputStream target) throws IOException {  InputStream is=IOUtil.toBufferedInputStream(source);  OutputStream os=new BZip2CompressorOutputStream(IOUtil.toBufferedOutputStream(target));  IOUtil.copy(is,os,true,true);}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.191 -0400",hash_original_method="D85C95A1BC3DD652B43ABCCC24BB8B76",hash_generated_method="8DAC215D6E10F1A38ABA131F4D502E9B") public static void writeLines(File file,Collection<?> lines) throws IOException {  writeLines(file,null,lines,null,false);}  }
class C{  @Override public String toString(){  return "CUmodule[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  public JSONArray add(String value){  values.add(JSON.value(value));  return this;}  }
class C{  public int loadSigned16(int addr){  return (loadSigned8(addr) << 8) | loadUnsigned8(addr + 1);}  }
class C{  private void sendBPGroup(){  log.info("C_BP_Group_ID=" + m_C_BP_Group_ID);  String sql="SELECT u.Name, u.EMail, u.AD_User_ID " + "FROM AD_User u" + " INNER JOIN C_BPartner bp ON (u.C_BPartner_ID=bp.C_BPartner_ID) "+ "WHERE u.IsActive='Y' AND bp.IsActive='Y'"+ " AND u.EMail IS NOT NULL"+ " AND bp.C_BP_Group_ID=?";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,m_C_BP_Group_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      Boolean ok=sendIndividualMail(rs.getString(1),rs.getInt(3),null);      if (ok == null)       ; else       if (ok.booleanValue())       m_counter++; else       m_errors++;    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  SQLException ex) {    log.log(Level.SEVERE,sql,ex);  }  try {    if (pstmt != null)     pstmt.close();  } catch (  SQLException ex1) {  }  pstmt=null;}  }
class C{  public WriteRequest clone(){  WriteRequest result=new WriteRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  if (NodesToWrite != null) {    result.NodesToWrite=new WriteValue[NodesToWrite.length];    for (int i=0; i < NodesToWrite.length; i++)     result.NodesToWrite[i]=NodesToWrite[i].clone();  }  return result;}  }
class C{  public SVGOMAnimatedPoints(AbstractElement elt,String ns,String ln,String defaultValue){  super(elt,ns,ln);  this.defaultValue=defaultValue;}  }
class C{  public void addComponent(File includeSource){  sources.add(new LocalFile(includeSource));}  }
class C{  public int read() throws IOException {  int result=(length == next) ? -1 : string.charAt(next++);  if (result <= 13) {switch (result) {case 13:      column=0;    line++;  int c=(length == next) ? -1 : string.charAt(next);if (c == 10) {  next++;}return 10;case 10:column=0;line++;}}return result;}  }
class C{  public SessionIndexNotFoundException(String message){  super(message);}  }
class C{  public ServerSocket createServerSocket(int p) throws IOException {  ServerSocket ss;  ss=new ServerSocket(p);  if (p == 0) {    if (servport != 0) {      System.err.println("TEST FAILED: " + "Duplicate createServerSocket(0)");      throw new Error("Test aborted (createServerSocket)");    }    servport=ss.getLocalPort();  }  return (ss);}  }
class C{  @SuppressWarnings("unchecked") public synchronized E pop(){  if (elementCount == 0) {    throw new EmptyStackException();  }  final int index=--elementCount;  final E obj=(E)elementData[index];  elementData[index]=null;  modCount++;  return obj;}  }
class C{  @Synchronized("accessLock") public boolean containsUser(@NonNull String nick){  String nickLowercase=nick.toLowerCase(locale);  return userNickMap.containsKey(nickLowercase) || privateUsers.containsKey(nickLowercase);}  }
class C{  public void addStatement(StatementInterface statement){  if (currentScope == TestScope.FIELDS) {    fields.add(statement);    return;  }  if (currentScope == TestScope.STATICFIELDS) {    staticFields.add(statement);    return;  }  if (currentScope == TestScope.STATIC) {    staticCode.add(statement);    return;  }  currentMethod.add(statement);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE;case 3:return VERSIONS;default :return null;}}  }
class C{  private boolean updateOrderTax(boolean oldTax){  MOrderTax tax=MOrderTax.get(this,getPrecision(),oldTax,get_TrxName());  if (tax != null) {    if (!tax.calculateTaxFromLines())     return false;    if (tax.getTaxAmt().signum() != 0) {      if (!tax.save(get_TrxName()))       return false;    } else {      if (!tax.is_new() && !tax.delete(false,get_TrxName()))       return false;    }  }  return true;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ValidationException(String message){  super(message);}  }
class C{  public String lastString(){  if (_laststring == null) {    nextString();  }  return _laststring;}  }
class C{  public final AC count(int size){  makeSize(size);  return this;}  }
class C{  public ByteRasterLocation(int x,int y,String name,byte bytearr[]){  super(x,y,name,getIconRaster(x,y,bytearr));  if (location instanceof OMRaster) {    setHorizontalLabelBuffer((((OMRaster)location).getWidth() / 2) + SPACING);  }}  }
class C{  @Override public boolean isValidLogin(final String login,final String password){  try {    OsmDto permissions=null;    Map<String,String> oAuthParams=loginPreferences.retrieveOAuthParams();    if (oAuthParams != null) {      String requestUrl="http://www.openstreetmap.org/api/0.6/permissions";      OAuthRequest oAuthRequest=new OAuthRequest(oAuthParams.get(CONSUMER_PARAM),oAuthParams.get(CONSUMER_SECRET_PARAM));      oAuthRequest.initParam(OAuthParams.getOAuthParams().put(TOKEN_PARAM,oAuthParams.get(TOKEN_PARAM)).toMap());      oAuthRequest.setOAuthToken(oAuthParams.get(TOKEN_PARAM));      oAuthRequest.setOAuthTokenSecret(oAuthParams.get(TOKEN_SECRET_PARAM));      oAuthRequest.setRequestUrl(requestUrl);      oAuthRequest.signRequest(Verb.GET);      permissions=osmRestClient.getPermissions(oAuthRequest.getParams());    } else {      String authorization="Basic " + Base64.encodeToString((login + ":" + password).getBytes(),Base64.NO_WRAP);      permissions=osmRestClient.getPermissions(authorization);    }    if (permissions.getPermissionsDto() != null && permissions.getPermissionsDto().getPermissionDtoList() != null) {      for (      PermissionDto permissionDto : permissions.getPermissionsDto().getPermissionDtoList()) {        if ("allow_write_api".equals(permissionDto.getName())) {          return true;        }      }    }  } catch (  RetrofitError e) {    Timber.e("Couldn't request permissions " + e);  }  return false;}  }
class C{  private void closeWall(String wallId){  RetroCallback retroCallback;  retroCallback=new RetroCallback(this);  retroCallback.setRequestId(HttpConstants.ApiResponseCodes.CLOSE_WALL);  Bundle args=new Bundle();  args.putString(AppConstants.Keys.WALL_ID,wallId);  retroCallback.setExtras(args);  retroCallbackList.add(retroCallback);  CloseWallRequestModel closeWallRequestModel=new CloseWallRequestModel();  closeWallRequestModel.setIs_solved("1");  mYeloApi.closeWall(wallId,closeWallRequestModel,retroCallback);}  }
class C{  static public <T>KVO<T>[] dense(final KVO<T>[] a,final int len){  if (a == null)   throw new IllegalArgumentException();  if (len < 0 || len > a.length)   throw new IllegalArgumentException();  if (len == a.length)   return a;  final KVO<T>[] b=new KVO[len];  System.arraycopy(a,0,b,0,len);  return b;}  }
class C{  private static void debugVerify(LocalList locals){  try {    debugVerify0(locals);  } catch (  RuntimeException ex) {    int sz=locals.size();    for (int i=0; i < sz; i++) {      System.err.println(locals.get(i));    }    throw ex;  }}  }
class C{  private void correctTooLow(int childCount){  if (mFirstPosition == 0 && childCount > 0) {    final int firstTop=getScrollChildTop();    final int start=mListPadding.top;    final int end=(getBottom() - getTop()) - mListPadding.bottom;    int topOffset=firstTop - start;    final int lastBottom=getScrollChildBottom();    int lastPosition=mFirstPosition + childCount - 1;    if (topOffset > 0) {      if (lastPosition < mItemCount - 1 || lastBottom > end) {        if (lastPosition == mItemCount - 1) {          topOffset=Math.min(topOffset,lastBottom - end);        }        tryOffsetChildrenTopAndBottom(-topOffset);        if (lastPosition < mItemCount - 1) {          fillDown(lastPosition + 1,getFillChildTop() + mDividerHeight);          adjustViewsUpOrDown();        }      } else       if (lastPosition == mItemCount - 1) {        adjustViewsUpOrDown();      }    }  }}  }
class C{  @Override public List<WorkOrderActivity> searchWOActivities(final Map<String,Object> criteriaMap){  logger.info("-------------------------Inside searchWOActivities-----------------------");  List<WorkOrderActivity> woActivityList;  String dynQuery="select distinct woa from WorkOrderActivity woa left join woa.activity.schedule schedule" + " left join woa.activity.nonSor nonSor where woa.id != null and woa.workOrderEstimate.estimate.parent is null " + " and woa.workOrderEstimate.workOrder.egwStatus.code != 'CANCELLED' ";  Object[] params;  final List<Object> paramList=new ArrayList<Object>();  if (criteriaMap.get(WORKORDER_NO) != null) {    dynQuery=dynQuery + " and woa.workOrderEstimate.workOrder.workOrderNumber = ? ";    paramList.add(criteriaMap.get(WORKORDER_NO));  }  if (criteriaMap.get(WORKORDER_ESTIMATE_ID) != null) {    dynQuery=dynQuery + " and woa.workOrderEstimate.estimate.id = ? ";    paramList.add(criteriaMap.get(WORKORDER_ESTIMATE_ID));  }  if (criteriaMap.get(ACTIVITY_DESC) != null) {    dynQuery=dynQuery + " and (" + "(UPPER(schedule.description) like ?) or ("+ " UPPER(nonSor.description)  like ? ))";    paramList.add("%" + ((String)criteriaMap.get(ACTIVITY_DESC)).toUpperCase() + "%");    paramList.add("%" + ((String)criteriaMap.get(ACTIVITY_DESC)).toUpperCase() + "%");  }  if (criteriaMap.get(ACTIVITY_CODE) != null) {    dynQuery=dynQuery + " and " + "UPPER(schedule.code) like ? ";    paramList.add("%" + ((String)criteriaMap.get(ACTIVITY_CODE)).toUpperCase() + "%");  }  final Double extraPercentage=worksService.getConfigval();  double factor=1;  if (extraPercentage.doubleValue() > 0)   factor=1 + extraPercentage / 100;  if (!"Required".equals(worksService.getWorksConfigValue("ORDER_NUMBER_REQUIRED"))) {    dynQuery=dynQuery + "and ((woa.approvedQuantity*? > (select sum(mbd.quantity) as sumq from MBDetails mbd " + " where mbd.mbHeader.egwStatus.code != ? group by mbd.workOrderActivity "+ "having mbd.workOrderActivity.id = woa.id)) or (select sum(mbd.quantity) as sumq from MBDetails mbd "+ " where mbd.mbHeader.egwStatus.code != ? group by mbd.workOrderActivity "+ "having mbd.workOrderActivity.id = woa.id) is null)";    paramList.add(factor);    paramList.add(MBHeader.MeasurementBookStatus.CANCELLED.toString());    paramList.add(MBHeader.MeasurementBookStatus.CANCELLED.toString());  }  params=new Object[paramList.size()];  params=paramList.toArray(params);  woActivityList=genericService.findAllBy(dynQuery,params);  return woActivityList;}  }
class C{  public double updateMiniBatch(List<Vec> x,List<Vec> y){  return updateMiniBatch(x,y,null);}  }
class C{  public TemporalOMGraphicList(int initialCapacity){  super(initialCapacity);}  }
class C{  public boolean execute(IRequestProcessor requestProcessor,IEventSender eventManager,ICvsListenerRegistry listenerRegistry,IClientEnvironment clientEnvironment,IProgressViewer progressViewer) throws CommandException, AuthenticationException {  final ICvsFiles cvsFiles;  try {    cvsFiles=scanFileSystem(clientEnvironment);  } catch (  IOException ex) {    throw new IOCommandException(ex);  }  final Requests requests=new Requests(CommandRequest.WATCHERS,clientEnvironment);  addFileRequests(cvsFiles,requests,clientEnvironment);  requests.addLocalPathDirectoryRequest();  addArgumentRequests(requests);  return requestProcessor.processRequests(requests,FileStateRequestsProgressHandler.create(progressViewer,cvsFiles));}  }
class C{  public static boolean matches(String str,String regex){  return Pattern.compile(regex).matcher(str).matches();}  }
class C{  public boolean isPartOf(final Outfit other){  boolean partOf;  partOf=((detail == null) || detail.equals(other.detail)) && ((hair == null) || hair.equals(other.hair)) && ((head == null) || head.equals(other.head))&& ((dress == null) || dress.equals(other.dress))&& ((body == null) || body.equals(other.body));  return partOf;}  }
class C{  public static double log2(double x){  return Math.log(x) * ONE_BY_LOG2;}  }
class C{  public boolean isTangent(){  return isTangent;}  }
class C{  public boolean isMandatory(){  return m_mandatory;}  }
class C{  public static Bitmap expand(Bitmap bitmap,float scale){  if (scale <= 1.0f) {    return bitmap.copy(bitmap.getConfig(),false);  }  Matrix matrix=new Matrix();  matrix.postScale(scale,scale);  return Bitmap.createBitmap(bitmap,0,0,(int)(scale * bitmap.getWidth()),(int)(scale * bitmap.getHeight()),matrix,true);}  }
class C{  public TextEventHandler(final NetworkPanel networkPanel){  super(networkPanel.getCanvas());  this.networkPanel=networkPanel;  this.setEventFilter(new TextEventFilter());}  }
class C{  public boolean isQueueEnabled(){  return true;}  }
class C{  public Uri build(){  return mUriBuilder.build();}  }
class C{  protected void drawSkyDome(DrawContext dc,float radius,double startLat,double endLat,int slices,int stacks,float zenithOpacity,float gradientBias){  double latitude, longitude, latitudeTop=endLat;  GL2 gl=dc.getGL().getGL2();  double linear, linearTop, k, kTop, colorFactorZ, colorFactorZTop=0;  double colorFactorH, colorFactorHTop=0;  double alphaFactor, alphaFactorTop=0;  latitude=startLat - Math.max((endLat - startLat) / 4,3);  gl.glBegin(GL2.GL_QUAD_STRIP);  for (int slice=0; slice <= slices; slice++) {    longitude=180 - ((float)slice / slices * (float)360);    Vec4 v=SphericalToCartesian(latitude,longitude,radius);    gl.glColor4d(zenithColor[0],zenithColor[1],zenithColor[2],0);    gl.glVertex3d(v.getX(),v.getY(),v.getZ());    v=SphericalToCartesian(startLat,longitude,radius);    gl.glColor4d(horizonColor[0],horizonColor[1],horizonColor[2],horizonColor[3]);    gl.glVertex3d(v.getX(),v.getY(),v.getZ());  }  gl.glEnd();  for (int stack=1; stack < stacks - 1; stack++) {    linear=(float)(stack - 1) / (stacks - 1f);    k=1 - Math.cos(linear * Math.PI / 2);    latitude=startLat + k * (endLat - startLat);    colorFactorZ=Math.min(1f,linear * gradientBias);    colorFactorH=1 - colorFactorZ;    alphaFactor=1 - Math.pow(linear,4) * (1 - zenithOpacity);    linearTop=(float)(stack) / (stacks - 1f);    kTop=1 - Math.cos(linearTop * Math.PI / 2);    latitudeTop=startLat + kTop * (endLat - startLat);    colorFactorZTop=Math.min(1f,linearTop * gradientBias);    colorFactorHTop=1 - colorFactorZTop;    alphaFactorTop=1 - Math.pow(linearTop,4) * (1 - zenithOpacity);    gl.glBegin(GL2.GL_QUAD_STRIP);    for (int slice=0; slice <= slices; slice++) {      longitude=180 - ((float)slice / slices * (float)360);      Vec4 v=SphericalToCartesian(latitude,longitude,radius);      gl.glColor4d((horizonColor[0] * colorFactorH + zenithColor[0] * colorFactorZ),(horizonColor[1] * colorFactorH + zenithColor[1] * colorFactorZ),(horizonColor[2] * colorFactorH + zenithColor[2] * colorFactorZ),(horizonColor[3] * colorFactorH + zenithColor[3] * colorFactorZ) * alphaFactor);      gl.glVertex3d(v.getX(),v.getY(),v.getZ());      v=SphericalToCartesian(latitudeTop,longitude,radius);      gl.glColor4d((horizonColor[0] * colorFactorHTop + zenithColor[0] * colorFactorZTop),(horizonColor[1] * colorFactorHTop + zenithColor[1] * colorFactorZTop),(horizonColor[2] * colorFactorHTop + zenithColor[2] * colorFactorZTop),(horizonColor[3] * colorFactorHTop + zenithColor[3] * colorFactorZTop) * alphaFactorTop);      gl.glVertex3d(v.getX(),v.getY(),v.getZ());    }    gl.glEnd();  }  gl.glBegin(GL2.GL_QUAD_STRIP);  for (int slice=0; slice <= slices; slice++) {    longitude=180 - ((float)slice / slices * (float)360);    Vec4 v=SphericalToCartesian(latitudeTop,longitude,radius);    gl.glColor4d((horizonColor[0] * colorFactorHTop + zenithColor[0] * colorFactorZTop),(horizonColor[1] * colorFactorHTop + zenithColor[1] * colorFactorZTop),(horizonColor[2] * colorFactorHTop + zenithColor[2] * colorFactorZTop),(horizonColor[3] * colorFactorHTop + zenithColor[3] * colorFactorZTop) * alphaFactorTop);    gl.glVertex3d(v.getX(),v.getY(),v.getZ());    v=SphericalToCartesian(endLat,longitude,radius);    gl.glColor4d(zenithColor[0],zenithColor[1],zenithColor[2],zenithOpacity < 1 ? 0 : zenithColor[3]);    gl.glVertex3d(v.getX(),v.getY(),v.getZ());  }  gl.glColor4d(1d,1d,1d,1d);  gl.glEnd();}  }
class C{  public SdfId(UUID id){  mSdfUuid=id;  mSdfId=0;  mHasUuid=true;  mLongHash=Long.valueOf(mSdfId).hashCode();}  }
class C{  private ResponseTimeoutException(){}  }
class C{  public boolean isStartAtZeroEnabled(){  return mStartAtZero;}  }
class C{  private boolean fetchChunk() throws IOException {  HTable messages=null;  try {    byte[] cp=Bytes.toBytes(chunkPos);    messages=new HTable(conf,tableName);    Get get=new Get(key);    get.addColumn(cf,cp);    get.setMaxVersions(1);    Result result=messages.get(get);    if (!result.isEmpty()) {      chunk=result.getValue(cf,cp);      chunkPos++;      pos=0;      return true;    } else {      return false;    }  } catch (  IOException e) {    throw new IOException("Unable to read data",e);  } finally {    if (messages != null) {      messages.close();    }  }}  }
class C{  public synchronized void close(){  this.notifyAll();}  }
class C{  public VonMises(double freedom,MersenneTwisterFast randomGenerator){  setRandomGenerator(randomGenerator);  setState(freedom);}  }
class C{  public void deleteResources(){  if (isOpen()) {    throw new IllegalStateException();  }  if (!file.delete()) {    log.warn("Could not delete memory-mapped file: " + file.getAbsoluteFile() + " - marked for deletion on exit");    try {      file.deleteOnExit();    } catch (    NullPointerException ex) {    }  }}  }
class C{  private void paintBackgroundEnabled(Graphics2D g,JComponent c,int width,int height){  paintBackground(g,c,width,height,enabled);}  }
class C{  public IVariable target(){  return target;}  }
class C{  private void createCountsLoadCurveGraphs(){  CountsLoadCurveGraphCreator cgc=new CountsLoadCurveGraphCreator("");  List<CountsGraph> graphs=cgc.createGraphs(this.countComparisonFilter.getCountsForHour(null),this.iterationNumber);  this.countsLoadCurveGraphMap=new HashMap<String,String>(graphs.size());  String linkid;  StringBuffer filename;  for (  CountsGraph cg : graphs) {    try {      filename=new StringBuffer();      linkid=((CountsLoadCurveGraph)cg).getLinkId();      filename.append(linkid);      filename.append(PNG);      writeChartToKmz(filename.toString(),cg.getChart());      this.countsLoadCurveGraphMap.put(linkid,filename.toString());    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public E poll(){  if (isEmpty()) {    return null;  }  E result=elements[0];  removeAt(0);  return result;}  }
class C{  public boolean removeChoosableFileFilter(FileFilter f){  int index=filters.indexOf(f);  if (index >= 0) {    if (getFileFilter() == f) {      FileFilter aaff=getAcceptAllFileFilter();      if (isAcceptAllFileFilterUsed() && (aaff != f)) {        setFileFilter(aaff);      } else       if (index > 0) {        setFileFilter(filters.get(0));      } else       if (filters.size() > 1) {        setFileFilter(filters.get(1));      } else {        setFileFilter(null);      }    }    FileFilter[] oldValue=getChoosableFileFilters();    filters.removeElement(f);    firePropertyChange(CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY,oldValue,getChoosableFileFilters());    return true;  } else {    return false;  }}  }
class C{  public void parseURL(URL u,String spec,int start,int limit){  String protocol=u.getProtocol();  String host="";  int port=u.getPort();  String file="";  if (start < limit) {    file=spec.substring(start,limit);  }  boolean nogood=false;  if (file == null || file.equals(""))   nogood=true; else {    boolean allwhites=true;    for (int i=0; i < file.length(); i++)     if (!Character.isWhitespace(file.charAt(i)))     allwhites=false;    if (allwhites)     nogood=true;  }  if (nogood)   throw new RuntimeException("No email address");  setURLHandler(u,protocol,host,port,file,null);}  }
class C{  private void drawBorder(){  if (borderColor == null) {    return;  }  gc.setForeground(borderColor);  final Point temp=this.computeSize(0,0,false);  if (round) {    gc.drawRoundRectangle(0,0,temp.x - 2,temp.y - 2,3,3);  } else {    gc.drawRectangle(0,0,temp.x - 2,temp.y - 2);  }}  }
class C{  private RealPathUtil(){}  }
class C{  private void populateNavigationMenu(){  LayoutInflater factory=LayoutInflater.from(getActivity());  CharSequence[] navItems=getSource().getNavigationItems();  Drawable[] icons=getSource().getNavigationIcons();  for (int index=0; index < navItems.length; index++) {    CharSequence item=navItems[index];    Drawable icon=icons[index];    DrawableHelper.setTint(icon,mPrimaryIconColor);    TextView itemView=(TextView)factory.inflate(R.layout.drawer_menu_item,mContainer,false);    itemView.setText(item);    itemView.setOnClickListener(mOnNavigationSelected);    itemView.setCompoundDrawablesWithIntrinsicBounds(icon,null,null,null);    RippleDrawable.makeFor(itemView,mRippleOverlay,true);    mContainer.addView(itemView);  }  mNavigationItems=navItems;}  }
class C{  public boolean isHidden(){  return hidden;}  }
class C{  public void updateForWrite(final int modNum){  this.dirty=true;  this.modSerialNum=modNum;}  }
class C{  public SearchSourceBuilder query(QueryBuilder query){  if (this.querySourceBuilder == null) {    this.querySourceBuilder=new QuerySourceBuilder();  }  this.querySourceBuilder.setQuery(query);  return this;}  }
class C{  public void printExceptionInMorphing(Exception e,String absoluteWorkingDirectoryPath,String initialPath,String finalPath){  System.out.println("************Exception in the morphing process occurs *********");  System.out.println("\nPlease report the issue at  https://github.com/bonnyfone/vectalign \n ");  System.out.println("\nWe have generate the bug report file under the name MorphingBugReport \n ");  File file=new File(absoluteWorkingDirectoryPath,"MorphingBugReport");  try {    if (!file.exists()) {      file.createNewFile();    }    BufferedWriter buff=new BufferedWriter(new FileWriter(file));    buff.write("Please report the issue at  https://github.com/bonnyfone/vectalign");    buff.write("Hello Mr Stefano Bonetta ");    buff.write("I am using your tool throught the librairy AnimatedVectorTool of Mathias Seguy (add git ref) and when we try to normalyze those two paths an exception is raised  ");    buff.write("Would you please have a look and save my life :)");    buff.write("InitialPath" + initialPath);    buff.write("FinalPath" + finalPath);    buff.write("Thanks again for your project");    buff.flush();    buff.close();  } catch (  IOException e1) {    e1.printStackTrace();  }}  }
class C{  public void paint(Graphics g){  if (controller != null) {    controller.drawBoard(g);  }}  }
class C{  protected void installKeyboardActions(mxGraphComponent graphComponent){  InputMap inputMap=getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);  SwingUtilities.replaceUIInputMap(graphComponent,JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,inputMap);  inputMap=getInputMap(JComponent.WHEN_FOCUSED);  SwingUtilities.replaceUIInputMap(graphComponent,JComponent.WHEN_FOCUSED,inputMap);  SwingUtilities.replaceUIActionMap(graphComponent,createActionMap());}  }
class C{  public boolean isValidSerialization(String preorder){  Deque<String> stack=new ArrayDeque<>();  String[] nodes=preorder.split(",");  for (int i=0; i < nodes.length; i++) {    String curr=nodes[i];    while ("#".equals(curr) && !stack.isEmpty() && "#".equals(stack.peek())) {      stack.pop();      if (stack.isEmpty()) {        return false;      }      stack.pop();    }    stack.push(curr);  }  return stack.size() == 1 && "#".equals(stack.peek());}  }
class C{  public void comment(String data) throws org.xml.sax.SAXException {  final int length=data.length();  if (length > m_charsBuff.length) {    m_charsBuff=new char[length * 2 + 1];  }  data.getChars(0,length,m_charsBuff,0);  comment(m_charsBuff,0,length);}  }
class C{  public static IMethodBinding findMethodInType(ITypeBinding type,String methodName,String[] parameters){  if (type.isPrimitive())   return null;  IMethodBinding[] methods=type.getDeclaredMethods();  for (int i=0; i < methods.length; i++) {    if (parameters == null) {      if (methodName.equals(methods[i].getName()))       return methods[i];    } else {      if (isEqualMethod(methods[i],methodName,parameters))       return methods[i];    }  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:15.485 -0400",hash_original_method="61CF21D5626AAAED4DA1E8F18F7DC7B0",hash_generated_method="8DE6D5EAB77828E6FFA3FF9E6AFE1CB8") public void testConnectPan(){  int iterations=BluetoothTestRunner.sConnectPanIterations;  if (iterations == 0) {    return;  }  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  BluetoothDevice device=adapter.getRemoteDevice(BluetoothTestRunner.sDeviceAddress);  mTestUtils.disable(adapter);  mTestUtils.enable(adapter);  mTestUtils.unpair(adapter,device);  mTestUtils.pair(adapter,device,BluetoothTestRunner.sDevicePairPasskey,BluetoothTestRunner.sDevicePairPin);  for (int i=0; i < iterations; i++) {    mTestUtils.writeOutput("connectPan iteration " + (i + 1) + " of "+ iterations);    mTestUtils.connectPan(adapter,device);    mTestUtils.disconnectPan(adapter,device);  }  mTestUtils.unpair(adapter,device);  mTestUtils.disable(adapter);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:27.278 -0500",hash_original_method="969F069748FB75BDEDE2897D8F038415",hash_generated_method="D4CDD87FAE7CA4C2F40C5A9FA4450F03") public Query orderBy(String column,int direction){  if (direction != ORDER_ASCENDING && direction != ORDER_DESCENDING) {    throw new IllegalArgumentException("Invalid direction: " + direction);  }  if (column.equals(COLUMN_LAST_MODIFIED_TIMESTAMP)) {    mOrderByColumn=Downloads.Impl.COLUMN_LAST_MODIFICATION;  } else   if (column.equals(COLUMN_TOTAL_SIZE_BYTES)) {    mOrderByColumn=Downloads.Impl.COLUMN_TOTAL_BYTES;  } else {    throw new IllegalArgumentException("Cannot order by " + column);  }  mOrderDirection=direction;  return this;}  }
class C{  public boolean loadLibraries(){synchronized (mLock) {    if (mLoadLibraries == false) {      return mLibrariesLoaded;    }    try {      for (      String name : mLibraryNames) {        SoLoader.loadLibrary(name);      }      initialNativeCheck();      mLibrariesLoaded=true;      mLibraryNames=null;    } catch (    UnsatisfiedLinkError error) {      Log.e(TAG,"Failed to load native lib: ",error);      mLinkError=error;      mLibrariesLoaded=false;    }    mLoadLibraries=false;    return mLibrariesLoaded;  }}  }
class C{  public void onNavClick(View view){  if (mLoadBitmapsTask != null) {    mLoadBitmapsTask.cancel(true);  }  if (mAnimator != null) {    mAnimator.cancel();  }  finish();}  }
class C{  public void testBigramsAtFirstChar(){  assertTrue(sh.isDefaultNextSuggestion("about","p","part"));  assertTrue(sh.isDefaultNextSuggestion("I'm","a","about"));  assertTrue(sh.isDefaultNextSuggestion("about","b","business"));  assertTrue(sh.isASuggestion("about","b","being"));  assertFalse(sh.isDefaultNextSuggestion("about","p","business"));}  }
class C{  private static StringBuilder appendCopyJsonExpression(String inVar,StringBuilder builder){  builder.append(COPY_JSONS_PARAM).append(" ? ");  appendNaiveCopyJsonExpression(inVar,builder).append(" : (JSONValue)(").append(inVar).append(")");  return builder;}  }
class C{  private QueryBuilder queryForString(String field,String term){  if (term.contains("%") || term.contains("_")) {    return QueryBuilders.wildcardQuery(field,term.replaceAll("%","*").replaceAll("_","?"));  } else   if (term.contains(" ")) {    return QueryBuilders.matchPhraseQuery(field,term);  } else   return QueryBuilders.termQuery(field,term);}  }
class C{  @Override public final int size(){  return this.size;}  }
class C{  public void testOnReceive_startService(){  Intent stopIntent=new Intent(getContext(),TrackRecordingService.class);  getContext().stopService(stopIntent);  assertFalse(isServiceExisted(getContext(),SERVICE_NAME));  BootReceiver bootReceiver=new BootReceiver();  Intent intent=new Intent();  intent.setAction(Intent.ACTION_BOOT_COMPLETED);  bootReceiver.onReceive(getContext(),intent);  assertTrue(isServiceExisted(getContext(),SERVICE_NAME));}  }
class C{  public static DoubleMatrix jblas_solveSymmetric(double[][] A,double[][] B){  return org.jblas.Solve.solveSymmetric(new DoubleMatrix(A),new DoubleMatrix(B));}  }
class C{  static double svd_ddot(int n,double[] dx,int incx,double[] dy,int incy){  double dot_product=0.0;  int ix0=0;  int iy0=0;  assert incx == 1 || incx == -1 || incx == 0;  assert incy == 1 || incy == -1 || incy == 0;  if (n <= 0 || incx == 0 || incy == 0)   return 0.0;  int ix=(incx == 1) ? ix0 : n - 1 + ix0;  int iy=(incy == 1) ? iy0 : n - 1 + iy0;  for (int i=0; i < n; i++) {    dot_product+=dy[iy] * dx[ix];    iy+=incy;    ix+=incx;  }  return dot_product;}  }
class C{  @NotNull public static List<SQFVariable> findGlobalVariables(@NotNull Project project,@NotNull SQFVariable findVar){  List<SQFVariable> result=new ArrayList<>();  Module m=PluginUtil.getModuleForPsiFile(findVar.getContainingFile());  if (m == null) {    return result;  }  GlobalSearchScope searchScope=m.getModuleContentScope();  Collection<VirtualFile> files=FileBasedIndex.getInstance().getContainingFiles(FileTypeIndex.NAME,SQFFileType.INSTANCE,searchScope);  for (  VirtualFile virtualFile : files) {    PsiFile file=PsiManager.getInstance(project).findFile(virtualFile);    if (!(file instanceof SQFFile)) {      continue;    }    SQFFile sqfFile=(SQFFile)file;    ArrayList<SQFVariable> vars=PsiUtil.findDescendantElementsOfInstance(sqfFile,SQFVariable.class,null);    if (vars == null) {      continue;    }    for (    SQFVariable var : vars) {      if (!var.isGlobalVariable()) {        continue;      }      if (findVar.getVarName().equals(var.getVarName())) {        result.add(var);      }    }  }  return result;}  }
class C{  public void recruitPlayersFromStr(String playersStr){  String[] players=playersStr.split("%\n");  String currLine=players[0];  int i=0;  while (!currLine.equals("END_RECRUITS")) {    recruitPlayerCSV(currLine,false);    currLine=players[++i];  }  recruitWalkOns();  currLine=players[++i];  while (!currLine.equals("END_REDSHIRTS")) {    recruitPlayerCSV(currLine,true);    currLine=players[++i];  }}  }
class C{  public void phase2(Translog.Snapshot snapshot){  if (shard.state() == IndexShardState.CLOSED) {    throw new IndexShardClosedException(request.shardId());  }  cancellableThreads.checkForCancel();  StopWatch stopWatch=new StopWatch().start();  logger.trace("{} recovery [phase2] to {}: sending transaction log operations",request.shardId(),request.targetNode());  int totalOperations=sendSnapshot(snapshot);  stopWatch.stop();  logger.trace("{} recovery [phase2] to {}: took [{}]",request.shardId(),request.targetNode(),stopWatch.totalTime());  response.phase2Time=stopWatch.totalTime().millis();  response.phase2Operations=totalOperations;}  }
class C{  public FastAdapterDialog<Item> withOnLongClickListener(FastAdapter.OnLongClickListener<Item> onLongClickListener){  this.mFastItemAdapter.withOnLongClickListener(onLongClickListener);  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static String formatDateAsIsoString(Date date){  if (date == null) {    return "";  }  return new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date);}  }
class C{  static protected <T>void distributMissing(List<List<DataPointPair<T>>> splits,double[] fracs,List<DataPointPair<T>> hadMissing){  for (  DataPointPair<T> dpp : hadMissing) {    DataPoint dp=dpp.getDataPoint();    Vec vec=dp.getNumericalValues();    int[] cats=dp.getCategoricalValues();    CategoricalData[] lab=dp.getCategoricalData();    for (int i=0; i < fracs.length; i++) {      double nw=fracs[i] * dp.getWeight();      if (Double.isNaN(nw))       continue;      if (nw <= 1e-13)       continue;      DataPointPair<T> dp_i=new DataPointPair<T>(new DataPoint(vec,cats,lab,nw),dpp.getPair());      splits.get(i).add(dp_i);    }  }}  }
class C{  private byte[] ionBytes(IonValue val){  IonDatagram dg=system().newDatagram(val);  return dg.getBytes();}  }
class C{  public int cardinality(){  if (this.isNoView)   return this.elements.size(); else   return super.cardinality();}  }
class C{  public HITS(Graph<V,E> g){  this(g,0.0);}  }
class C{  @Override protected void uninstallViewListeners(View p){  super.uninstallViewListeners(p);  Action undoActionInView=p.getActionMap().get(ID);  if (undoActionInView != null && undoActionInView != this) {    undoActionInView.removePropertyChangeListener(redoActionPropertyListener);  }}  }
class C{  public static ECPoint.F2m tau(ECPoint.F2m p){  if (p.isInfinity()) {    return p;  }  ECFieldElement x=p.getX();  ECFieldElement y=p.getY();  return new ECPoint.F2m(p.getCurve(),x.square(),y.square(),p.isCompressed());}  }
class C{  public void testSinglePointRoundTrip() throws SAXException, IOException, ParserConfigurationException {  PointGenerator pg=new PointGenerator();  pg.setGeometryFactory(geometryFactory);  pg.setBoundingBox(new Envelope(0,10,0,10));  Point pt=(Point)pg.create();  checkRoundTrip(pt);}  }
class C{  public StunCandidateHarvest(StunCandidateHarvester harvester,HostCandidate hostCandidate){  this.harvester=harvester;  this.hostCandidate=hostCandidate;}  }
class C{  public WishListView(final String id,final Model<String> customerEmail,final Model<String> wishListType,final Model<String> wishListTag){  super(id,true);  this.customerEmail=customerEmail;  this.wishListType=wishListType;  this.wishListTag=wishListTag;}  }
class C{  @Override public void close(){  if (logger.isDebugEnabled()) {    logger.debug("Closing CqService. {}",this);  }  closeAllCqs(false);  isRunning=false;}  }
class C{  public void putToParams(String key,String val){  if (this.params == null) {    this.params=new HashMap<String,String>();  }  this.params.put(key,val);}  }
class C{  public RequestInputDataMultipart(byte[] soapBytes,InputStream attachmentInputStream){  super(null);  this.soapBytes=soapBytes;  this.attachmentInputStream=attachmentInputStream;}  }
class C{  protected void makeWidgets(){  String locText;  GridBagLayout gridbag=new GridBagLayout();  GridBagConstraints c=new GridBagConstraints();  Insets leftInsets=new Insets(0,10,0,10);  Insets centerInsets=new Insets(0,0,0,0);  Insets rightInsets=new Insets(0,0,0,10);  setLayout(gridbag);  locText=i18n.get(UTMCoordPanel.class,"border","Zone Number|Hemisphere|Easting|Northing");  setBorder(new TitledBorder(new EtchedBorder(),locText));  locText=i18n.get(UTMCoordPanel.class,"utmLabel","UTM: ");  JLabel utmLabel=new JLabel(locText);  c.gridx=0;  c.fill=GridBagConstraints.NONE;  c.weightx=0f;  c.insets=leftInsets;  c.anchor=GridBagConstraints.EAST;  gridbag.setConstraints(utmLabel,c);  add(utmLabel);  c.gridx=GridBagConstraints.RELATIVE;  zoneNumber=new JTextField(3);  zoneNumber.setToolTipText(i18n.get(UTMCoordPanel.class,"zone",I18n.TOOLTIP,"Zone Number: 1-60"));  c.insets=centerInsets;  gridbag.setConstraints(zoneNumber,c);  add(zoneNumber);  zoneLetter=new JTextField(2);  zoneLetter.setToolTipText(i18n.get(UTMCoordPanel.class,"hemi",I18n.TOOLTIP,"Hemisphere: N or S"));  gridbag.setConstraints(zoneLetter,c);  add(zoneLetter);  easting=new JTextField(8);  c.fill=GridBagConstraints.HORIZONTAL;  c.weightx=.5f;  gridbag.setConstraints(easting,c);  add(easting);  northing=new JTextField(8);  c.insets=rightInsets;  gridbag.setConstraints(northing,c);  add(northing);}  }
class C{  SortedSet<String> typesToImport(){  SortedSet<String> typesToImport=new TreeSet<String>();  for (  Map.Entry<String,Spelling> entry : imports.entrySet()) {    if (entry.getValue().importIt) {      typesToImport.add(entry.getKey());    }  }  return typesToImport;}  }
class C{  public String doNotCheckCapabilitiesTipText(){  return "If set, classifier capabilities are not checked before classifier is built" + " (Use with caution to reduce runtime).";}  }
class C{  public void onGeofencePause(int geofenceId,int status){}  }
class C{  public Protocol(final String scheme,final ProtocolSocketFactory factory,final int defaultPort){  if (scheme == null) {    throw new IllegalArgumentException("scheme is null");  }  if (factory == null) {    throw new IllegalArgumentException("socketFactory is null");  }  if (defaultPort <= 0) {    throw new IllegalArgumentException("port is invalid: " + defaultPort);  }  this.scheme=scheme;  socketFactory=factory;  this.defaultPort=defaultPort;  secure=(factory instanceof SecureProtocolSocketFactory);}  }
class C{  public static void printNodeBasics(Node node){  if (node == null) {    System.out.println(" Null node");    return;  }  System.out.println(" Node[Namespace URI=" + node.getNamespaceURI() + " localname="+ node.getLocalName()+ " name="+ node.getNodeName()+ " type="+ getNodeTypeStr(node.getNodeType())+ " Value="+ node.getNodeValue()+ "]");}  }
class C{  public static AsyncModifySubscriptionResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  AsyncModifySubscriptionResponseE object=new AsyncModifySubscriptionResponseE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","asyncModifySubscriptionResponse").equals(reader.getName())) {          object.setAsyncModifySubscriptionResponse(org.oscm.xsd.AsyncModifySubscriptionResponse.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public Intersection[] intersect(double elevation,Sector sector){  if (sector == null) {    String message=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  ArrayList<SectorGeometry> sglist=new ArrayList<SectorGeometry>(this);  Intersection[] hits;  ArrayList<Intersection> list=new ArrayList<Intersection>();  for (  SectorGeometry sg : sglist) {    if (sector.intersects(sg.getSector()))     if ((hits=sg.intersect(elevation)) != null)     list.addAll(Arrays.asList(hits));  }  int numHits=list.size();  if (numHits == 0)   return null;  hits=new Intersection[numHits];  list.toArray(hits);  return hits;}  }
class C{  private Instances residualReplace(Instances data,Classifier c,boolean useShrinkage) throws Exception {  double pred, residual;  Instances newInst=new Instances(data);  for (int i=0; i < newInst.numInstances(); i++) {    pred=c.classifyInstance(newInst.instance(i));    if (Utils.isMissingValue(pred)) {      throw new UnassignedClassException("AdditiveRegression: base learner predicted missing value.");    }    if (useShrinkage) {      pred*=getShrinkage();    }    residual=newInst.instance(i).classValue() - pred;    newInst.instance(i).setClassValue(residual);  }  return newInst;}  }
class C{  public boolean equals(Object obj){  if ((obj != null) && (obj instanceof Attributes)) {    Attributes target=(Attributes)obj;    if (ignoreCase != target.isCaseIgnored()) {      return false;    }    if (size() == target.size()) {      Attribute their, mine;      try {        NamingEnumeration<?> theirs=target.getAll();        while (theirs.hasMore()) {          their=(Attribute)theirs.next();          mine=get(their.getID());          if (!their.equals(mine)) {            return false;          }        }      } catch (      NamingException e) {        return false;      }      return true;    }  }  return false;}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public void stop(){  mTarget=mValue;  mVelocity=0.0f;}  }
class C{  public static long size(String fileName){  return FilePath.get(fileName).size();}  }
class C{  public void fillArc(int x,int y,int width,int height,int startAngle,int arcAngle){  g.fillArc(x,y,width,height,startAngle,arcAngle);}  }
class C{  private void send(){  Toast.makeText(this,getString(R.string.message_sent,mBody,Contact.byId(mContactId).getName()),Toast.LENGTH_SHORT).show();  finish();}  }
class C{  @Override public boolean isRendered(){  return true;}  }
class C{  public void characters(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (!m_shouldProcess)   return;  XSLTElementProcessor elemProcessor=getCurrentProcessor();  XSLTElementDef def=elemProcessor.getElemDef();  if (def.getType() != XSLTElementDef.T_PCDATA)   elemProcessor=def.getProcessorFor(null,"text()");  if (null == elemProcessor) {    if (!XMLCharacterRecognizer.isWhiteSpace(ch,start,length))     error(XSLMessages.createMessage(XSLTErrorResources.ER_NONWHITESPACE_NOT_ALLOWED_IN_POSITION,null),null);  } else   elemProcessor.characters(this,ch,start,length);}  }
class C{  private Integer keyForNode(ClusterNode node,int type){  IgniteCache<Integer,Integer> cache=grid(0).cache(null);  if (cache.getConfiguration(CacheConfiguration.class).getCacheMode() == LOCAL)   return ++lastKey;  if (cache.getConfiguration(CacheConfiguration.class).getCacheMode() == REPLICATED && type == NOT_PRIMARY_AND_BACKUP)   return ++lastKey;  for (int key=lastKey + 1; key < (lastKey + 10_000); key++) {switch (type) {case NOT_PRIMARY_AND_BACKUP:{        if (!affinity(cache).isPrimaryOrBackup(node,key)) {          lastKey=key;          return key;        }        break;      }case PRIMARY:{      if (affinity(cache).isPrimary(node,key)) {        lastKey=key;        return key;      }      break;    }case BACKUP:{    if (affinity(cache).isBackup(node,key)) {      lastKey=key;      return key;    }    break;  }default :fail();}}throw new IllegalStateException("Failed to find key.");}  }
class C{  public void offline(TungstenProperties params) throws Exception {  runScript(CMD_OFFLINE);  context.getEventDispatcher().put(new OfflineNotification());}  }
class C{  public Profiler start(){  assureRightState("start",false);  time=System.nanoTime();  return this;}  }
class C{  public PrimitiveInfo(int value){  this(ClassInfo.primitiveInt,value,0);}  }
class C{  public static byte floatToByte(float f,int numMantissaBits,int zeroExp){  int fzero=(63 - zeroExp) << numMantissaBits;  int bits=Float.floatToRawIntBits(f);  int smallfloat=bits >> (24 - numMantissaBits);  if (smallfloat <= fzero) {    return (bits <= 0) ? (byte)0 : (byte)1;  } else   if (smallfloat >= fzero + 0x100) {    return -1;  } else {    return (byte)(smallfloat - fzero);  }}  }
class C{  public static void init(int poolSize,LogLevel logLevel,String debugTag,Context context){  mContext=context.getApplicationContext();  sDaVinci=new DaVinci(poolSize);  VinciLog.init(logLevel,debugTag,context);}  }
class C{  public void addCharEntitiesRange(String[] symbols,int startcode){  parser.addCharEntitiesRange(symbols,startcode);}  }
class C{  public static float mapCoordInSelfToDescendent(View descendant,View root,float[] coord,Matrix tmpInverseMatrix){  ArrayList<View> ancestorChain=new ArrayList<View>();  float[] pt={coord[0],coord[1]};  View v=descendant;  while (v != root) {    ancestorChain.add(v);    v=(View)v.getParent();  }  ancestorChain.add(root);  float scale=1.0f;  int count=ancestorChain.size();  tmpInverseMatrix.set(IDENTITY_MATRIX);  for (int i=count - 1; i >= 0; i--) {    View ancestor=ancestorChain.get(i);    View next=i > 0 ? ancestorChain.get(i - 1) : null;    pt[0]+=ancestor.getScrollX();    pt[1]+=ancestor.getScrollY();    if (next != null) {      pt[0]-=next.getLeft();      pt[1]-=next.getTop();      next.getMatrix().invert(tmpInverseMatrix);      tmpInverseMatrix.mapPoints(pt);      scale*=next.getScaleX();    }  }  coord[0]=pt[0];  coord[1]=pt[1];  return scale;}  }
class C{  public static FacetProcessor<?> createProcessor(SolrQueryRequest req,Map<String,Object> params,DocSet docs){  FacetParser parser=new FacetTopParser(req);  FacetRequest facetRequest=null;  try {    facetRequest=parser.parse(params);  } catch (  SyntaxError syntaxError) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,syntaxError);  }  FacetContext fcontext=new FacetContext();  fcontext.base=docs;  fcontext.req=req;  fcontext.searcher=req.getSearcher();  fcontext.qcontext=QueryContext.newContext(fcontext.searcher);  return facetRequest.createFacetProcessor(fcontext);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  private void tryGrow(Object[] array,int oldCap){  lock.unlock();  Object[] newArray=null;  if (allocationSpinLock == 0 && UNSAFE.compareAndSwapInt(this,allocationSpinLockOffset,0,1)) {    try {      int newCap=oldCap + ((oldCap < 64) ? (oldCap + 2) : (oldCap >> 1));      if (newCap - MAX_ARRAY_SIZE > 0) {        int minCap=oldCap + 1;        if (minCap < 0 || minCap > MAX_ARRAY_SIZE)         throw new OutOfMemoryError();        newCap=MAX_ARRAY_SIZE;      }      if (newCap > oldCap && queue == array)       newArray=new Object[newCap];    }  finally {      allocationSpinLock=0;    }  }  if (newArray == null)   Thread.yield();  lock.lock();  if (newArray != null && queue == array) {    queue=newArray;    System.arraycopy(array,0,newArray,0,oldCap);  }}  }
class C{  public void updateAsciiStream(int columnIndex,java.io.InputStream x,long length) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  private EcomConnection createEcomConnection(){  boolean wasException=false;  EcomConnection connection=null;  try {    connection=new EcomConnection(createConnectionInfo(),createListener(),new CimFilterMap());  } catch (  Exception e) {    wasException=true;  }  Assert.assertFalse(wasException);  return connection;}  }
class C{  protected <E extends SpatialComparable,A>double computeOverlap(A entries,ArrayAdapter<E,A> getter,long[] assign){  ModifiableHyperBoundingBox mbr1=null, mbr2=null;  for (int i=0; i < getter.size(entries); i++) {    E e=getter.get(entries,i);    if (BitsUtil.get(assign,i)) {      if (mbr1 == null) {        mbr1=new ModifiableHyperBoundingBox(e);      } else {        mbr1.extend(e);      }    } else {      if (mbr2 == null) {        mbr2=new ModifiableHyperBoundingBox(e);      } else {        mbr2.extend(e);      }    }  }  if (mbr1 == null || mbr2 == null) {    throw new AbortException("Invalid state in split: one of the sets is empty.");  }  return SpatialUtil.overlap(mbr1,mbr2);}  }
class C{  public T text(CharSequence text){  if (view instanceof TextView) {    TextView tv=(TextView)view;    tv.setText(text);  }  return self();}  }
class C{  public static boolean isWithinDistance(Geometry g0,Geometry g1,double distance){  Distance3DOp distOp=new Distance3DOp(g0,g1,distance);  return distOp.distance() <= distance;}  }
class C{  @Override public UpdateResponse optimize(boolean waitFlush,boolean waitSearcher) throws SolrServerException, IOException {  UpdateResponse ur=null;  if (this.solr0 != null)   ur=this.solr0.optimize(waitFlush,waitSearcher);  if (this.solr1 != null)   ur=this.solr1.optimize(waitFlush,waitSearcher);  return ur;}  }
class C{  public void accept(TlsServer tlsServer) throws IOException {  if (tlsServer == null) {    throw new IllegalArgumentException("'tlsServer' cannot be null");  }  if (this.tlsServer != null) {    throw new IllegalStateException("'accept' can only be called once");  }  this.tlsServer=tlsServer;  this.securityParameters=new SecurityParameters();  this.securityParameters.entity=ConnectionEnd.server;  this.tlsServerContext=new TlsServerContextImpl(secureRandom,securityParameters);  this.securityParameters.serverRandom=createRandomBlock(tlsServer.shouldUseGMTUnixTime(),tlsServerContext.getNonceRandomGenerator());  this.tlsServer.init(tlsServerContext);  this.recordStream.init(tlsServerContext);  this.recordStream.setRestrictReadVersion(false);  completeHandshake();}  }
class C{  private int minKStrictAscending(int[] A){  if (A == null || A.length == 0)   return 0;  int k=0;  int prev=A[0];  for (int i=1; i < A.length; i++) {    if (prev >= A[i] + k) {      int correction=(prev - (A[i] + k)) / 2 + 1;      k+=correction;      prev-=correction;      prev++;    } else     if (prev < A[i] - k) {      prev=A[i] - k;    } else {      prev++;    }  }  return k;}  }
class C{  private static boolean eq(long v1,long v2){  return v1 == v2;}  }
class C{  @Override public void handlePatch(Operation patch){  ServiceUtils.logInfo(this,"Handling patch for service %s",getSelfLink());  State startState=getState(patch);  State patchState=patch.getBody(State.class);  validatePatchState(startState,patchState);  State currentState=applyPatch(startState,patchState);  validateState(currentState);  patch.complete();  try {    if (ControlFlags.isOperationProcessingDisabled(currentState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping patch operation processing (disabled)");    } else     if (TaskState.TaskStage.STARTED == currentState.taskState.stage) {      processStartedState(currentState);    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  @Override public boolean addAll(@NotNull Collection<? extends E> c){  if (c.isEmpty())   return false;  Object[] cs=c.toArray();  if (cs.length == 0) {    return false;  }  while (true) {    Object[] elements=array;    Object[] newElements=createArrayAddAll(elements,cs);    if (replaceArray(elements,newElements))     return true;  }}  }
class C{  public boolean isSatisfied(XMLObject xo){  int satisfiedCount=0;  for (  XMLSyntaxRule rule : rules) {    if (rule.isSatisfied(xo)) {      satisfiedCount+=1;      if (satisfiedCount > 1)       return false;    }  }  return optional || satisfiedCount == 1;}  }
class C{  protected Blackboard(SqlValidatorScope scope,Map<String,RexNode> nameToNodeMap,boolean top){  this.scope=scope;  this.nameToNodeMap=nameToNodeMap;  this.top=top;  subqueryNeedsOuterJoin=false;}  }
class C{  protected boolean isValidLine(String line){  return true;}  }
class C{  public SystemProperty(){}  }
class C{  public void finished(){  layer.fireStatusUpdate(LayerStatusEvent.FINISH_WORKING);  workerComplete();}  }
class C{  public void run(){  if (ExecutionThread.currentThread().isKilled()) {    return;  }  varPath.getValue().subtract(expression.evaluate());}  }
class C{  public SsoRequestSettings(String spAlias,String idpAlias,Boolean isSigned,String nameIDFormat,Boolean allowProxy,Boolean forceAuthn,Boolean isPassive,Integer assertionConsumerServiceIndex,String assertionConsumerServiceUrl,String relayState){  this.spAlias=spAlias;  this.idpAlias=idpAlias;  this.isSigned=isSigned;  this.nameIDFormat=nameIDFormat;  this.allowProxy=allowProxy;  this.forceAuthn=forceAuthn;  this.isPassive=isPassive;  this.assertionConsumerServiceIndex=assertionConsumerServiceIndex;  this.assertionConsumerServiceUrl=assertionConsumerServiceUrl;  this.relayState=relayState;  this.isDelegable=false;  this.isRenewable=false;  this.allowScopingElement=true;  this.allowSPNameQualifierInNameIDPolicy=true;  this.allowAllowCreateInNameIDPolicy=true;  this.allowRequestedAuthnContext=true;}  }
class C{  public MLContext(SparkContext sc,boolean monitorPerformance,boolean setForcedSparkExecType) throws DMLRuntimeException {  initializeSpark(sc,monitorPerformance,setForcedSparkExecType);}  }
class C{  public JSONObject put(String key,Collection<Object> value) throws JSONException {  this.put(key,new JSONArray(value));  return this;}  }
class C{  private Pointer(Buffer buffer){  this.buffer=buffer;  pointers=null;  byteOffset=0;}  }
class C{  private void doAddProtocolLines(ProtocolInteractor session,String scriptName,BufferedReader reader) throws Exception {  String line;  int sessionNumber=-1;  int lineNumber=-1;  String lastClientMsg="";  while ((line=reader.readLine()) != null) {    line=substituteVariables(line);    String location=scriptName + ":" + lineNumber;    if (SERVER_CONTINUATION_TAG.equals(line)) {      session.CONT(sessionNumber);    } else     if (line.startsWith(CLIENT_TAG)) {      String clientMsg="";      if (line.length() > 3) {        clientMsg=line.substring(3);      }      session.CL(sessionNumber,clientMsg);      lastClientMsg=clientMsg;    } else     if (line.startsWith(SERVER_TAG)) {      String serverMsg="";      if (line.length() > 3) {        serverMsg=line.substring(3);      }      session.SL(sessionNumber,serverMsg,location,lastClientMsg);    } else     if (line.startsWith(OPEN_UNORDERED_BLOCK_TAG)) {      List<String> unorderedLines=new ArrayList<String>(5);      line=reader.readLine();      while (!line.startsWith(CLOSE_UNORDERED_BLOCK_TAG)) {        if (!line.startsWith(SERVER_TAG)) {          throw new Exception("Only 'S: ' lines are permitted inside a 'SUB {' block.");        }        String serverMsg=line.substring(3);        unorderedLines.add(serverMsg);        line=reader.readLine();        lineNumber++;      }      session.SUB(sessionNumber,unorderedLines,location,lastClientMsg);    } else     if (line.startsWith(COMMENT_TAG) || line.trim().length() == 0) {    } else     if (line.startsWith(SESSION_TAG)) {      String number=line.substring(SESSION_TAG.length()).trim();      if (number.length() == 0) {        throw new Exception("No session number specified");      }      sessionNumber=Integer.parseInt(number);    } else {      String prefix=line;      if (line.length() > 3) {        prefix=line.substring(0,3);      }      throw new Exception("Invalid line prefix: " + prefix);    }    lineNumber++;  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static boolean waitToSeeLiveReplica(ZkStateReader zkStateReader,String collection,String coreNodeName,String baseUrl,int timeoutInMs){  long timeout=System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutInMs,TimeUnit.MILLISECONDS);  while (System.nanoTime() < timeout) {    log.debug("waiting to see replica just created live collection={} replica={} baseUrl={}",collection,coreNodeName,baseUrl);    ClusterState clusterState=zkStateReader.getClusterState();    if (clusterState != null) {      DocCollection docCollection=clusterState.getCollection(collection);      Collection<Slice> slices=docCollection.getSlices();      for (      Slice slice : slices) {        if (slice.getState() == Slice.State.ACTIVE) {          Collection<Replica> replicas=slice.getReplicas();          for (          Replica replica : replicas) {            boolean live=clusterState.liveNodesContain(replica.getNodeName());            String rcoreNodeName=replica.getName();            String rbaseUrl=replica.getStr(ZkStateReader.BASE_URL_PROP);            if (live && coreNodeName.equals(rcoreNodeName) && baseUrl.equals(rbaseUrl)) {              return true;            }          }        }      }      try {        Thread.sleep(TIMEOUT_POLL_MS);      } catch (      InterruptedException e) {        Thread.currentThread().interrupt();        throw new SolrException(ErrorCode.SERVER_ERROR,"Interrupted");      }    }  }  log.error("Timed out waiting to see replica just created in cluster state. Continuing...");  return false;}  }
class C{  public static Funnel<Integer> integerFunnel(){  return IntegerFunnel.INSTANCE;}  }
class C{  protected Class<?> determineClass(String name) throws Exception {  Class<?> result;  if (name.equals(Boolean.TYPE.getName())) {    result=Boolean.TYPE;  } else   if (name.equals(Byte.TYPE.getName())) {    result=Byte.TYPE;  } else   if (name.equals(Character.TYPE.getName())) {    result=Character.TYPE;  } else   if (name.equals(Double.TYPE.getName())) {    result=Double.TYPE;  } else   if (name.equals(Float.TYPE.getName())) {    result=Float.TYPE;  } else   if (name.equals(Integer.TYPE.getName())) {    result=Integer.TYPE;  } else   if (name.equals(Long.TYPE.getName())) {    result=Long.TYPE;  } else   if (name.equals(Short.TYPE.getName())) {    result=Short.TYPE;  } else {    result=Class.forName(name);  }  return result;}  }
class C{  private void updateView(){  Map<String,List<String>> attributes=dataObject.getProject().getAttributes();  final String artifactId=getAttribute(ARTIFACT_ID);  if (!artifactId.isEmpty()) {    view.setArtifactId(artifactId);  }  if (attributes.get(GROUP_ID) != null) {    view.setGroupId(getAttribute(GROUP_ID));  } else {    view.setGroupId(getAttribute(PARENT_GROUP_ID));  }  if (attributes.get(VERSION) != null) {    view.setVersion(getAttribute(VERSION));  } else {    view.setVersion(getAttribute(PARENT_VERSION));  }}  }
class C{  private URLConnection connectURL(String strURL){  URLConnection conn=null;  try {    URL inputURL=new URL(strURL);    conn=inputURL.openConnection();  } catch (  MalformedURLException e) {    System.out.println("Please input a valid URL");  }catch (  IOException ioe) {    System.out.println("Can not connect to the URL");  }  return conn;}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,ScaleType scaleType,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(IMAGE_TIMEOUT_MS,IMAGE_MAX_RETRIES,IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;  mScaleType=scaleType;}  }
class C{  @Override public int compareTo(final BoElement be){  return loop - be.loop;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static boolean isValidJavaEncoding(String javaEncoding){  if (javaEncoding != null) {    int length=javaEncoding.length();    if (length > 0) {      for (int i=1; i < length; i++) {        char c=javaEncoding.charAt(i);        if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') && (c < '0' || c > '9')&& c != '.' && c != '_' && c != '-') {          return false;        }      }      return true;    }  }  return false;}  }
class C{  protected synchronized void loadDom(final InputStream inputStream){  if (inputStream == null) {    log.error("inputstream is null");    return;  }  DocumentBuilder parser;  ConfHandler handler=new ConfHandler(confSystemId);  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  log.debug("XML builder factory is: " + factory.getClass().getName());  factory.setValidating(true);  factory.setNamespaceAware(true);  factory.setIgnoringComments(true);  factory.setIgnoringElementContentWhitespace(true);  try {    parser=factory.newDocumentBuilder();  } catch (  ParserConfigurationException e) {    log.error("Unable to setup XML parser for reading conf",e);    return;  }  log.debug("XML Parser: " + parser.getClass().getName());  parser.setErrorHandler(handler);  parser.setEntityResolver(handler);  try {    log.debug("about to parse conf");    Document doc=parser.parse(inputStream,confSystemId);    processConfDoc(doc);  } catch (  SAXParseException e) {    addError("Parse error on line " + e.getLineNumber() + " "+ e.getMessage(),e);  }catch (  Exception e) {    addError("Exception loading conf " + " " + e.getMessage(),e);  }}  }
class C{  public void remove(Object o){  int end=_list.size();  for (int i=0; i < end; i++) {    if (_list.get(i).getInitializeObject().equals(o)) {      remove(i);      break;    }  }}  }
class C{  public static void main(String... args) throws Exception {  SelfDestructor.startCountdown(60);  if (args.length == 0) {    TestBase.createCaller().init().test();    return;  }  String url=args[0];  execute(url);}  }
class C{  private void addManifest(List<SwtPlatform> supported,Manifest parsed,File plugin){  String name=parsed.getMainAttributes().getValue(BUNDLE_NAME);  int splitIdx=name.indexOf(';');  if (splitIdx > 0) {    name=name.substring(0,splitIdx);  }  String platformFilter=parsed.getMainAttributes().getValue(ECLIPSE_PLATFORM_FILTER);  if (platformFilter != null) {    Filter filter=new Filter(platformFilter.replace(" ",""));    boolean isSupportedOS=supported.stream().anyMatch(Errors.rethrow().wrapPredicate(null));    if (!isSupportedOS) {      unsupportedPlatform.add(name);      return;    }  }  String versionRaw=parsed.getMainAttributes().getValue(BUNDLE_VERSION);  Version version=Version.parseVersion(versionRaw);  availableVersions.put(name,version);  toFile.put(name,version,plugin);}  }
class C{  @Override @SuppressWarnings("unchecked") public <T>T unwrap(Class<T> iface) throws SQLException {  if (isWrapperFor(iface)) {    return (T)this;  }  throw DbException.getInvalidValueException("iface",iface);}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getGroupRemoveDeviceDBDao() : null;}  }
class C{  public ListElement(){}  }
class C{  public java.lang.StringBuilder insert(int offset,float f){  return null;}  }
class C{  private JMenu createInsertMenu(){  JMenu insertMenu=new JMenu("Insert");  insertMenu.add(actionManager.getNewNetworkAction());  JMenu newGaugeSubMenu=new JMenu("New Plot");  for (  Action action : actionManager.getPlotActions()) {    newGaugeSubMenu.add(action);  }  insertMenu.add(newGaugeSubMenu);  JMenu newWorldSubMenu=new JMenu("New World");  for (  Action action : actionManager.getNewWorldActions()) {    newWorldSubMenu.add(action);  }  insertMenu.add(newWorldSubMenu);  insertMenu.addSeparator();  insertMenu.add(actionManager.getNewDocViewerAction());  insertMenu.add(actionManager.getNewConsoleAction());  return insertMenu;}  }
class C{  public static void drawImage(Graphics2D g2d,CachableRed cr){  AffineTransform at=null;  while (true) {    if (cr instanceof AffineRed) {      AffineRed ar=(AffineRed)cr;      if (at == null)       at=ar.getTransform(); else       at.concatenate(ar.getTransform());      cr=ar.getSource();      continue;    } else     if (cr instanceof TranslateRed) {      TranslateRed tr=(TranslateRed)cr;      int dx=tr.getDeltaX();      int dy=tr.getDeltaY();      if (at == null)       at=AffineTransform.getTranslateInstance(dx,dy); else       at.translate(dx,dy);      cr=tr.getSource();      continue;    }    break;  }  AffineTransform g2dAt=g2d.getTransform();  if ((at == null) || (at.isIdentity()))   at=g2dAt; else   at.preConcatenate(g2dAt);  ColorModel srcCM=cr.getColorModel();  ColorModel g2dCM=getDestinationColorModel(g2d);  ColorSpace g2dCS=null;  if (g2dCM != null)   g2dCS=g2dCM.getColorSpace();  if (g2dCS == null)   g2dCS=ColorSpace.getInstance(ColorSpace.CS_sRGB);  ColorModel drawCM=g2dCM;  if ((g2dCM == null) || !g2dCM.hasAlpha()) {    drawCM=sRGB_Unpre;  }  if (cr instanceof BufferedImageCachableRed) {    if (g2dCS.equals(srcCM.getColorSpace()) && drawCM.equals(srcCM)) {      g2d.setTransform(at);      BufferedImageCachableRed bicr;      bicr=(BufferedImageCachableRed)cr;      g2d.drawImage(bicr.getBufferedImage(),bicr.getMinX(),bicr.getMinY(),null);      g2d.setTransform(g2dAt);      return;    }  }  double determinant=at.getDeterminant();  if (!at.isIdentity() && (determinant <= 1.0)) {    if (at.getType() != AffineTransform.TYPE_TRANSLATION)     cr=new AffineRed(cr,at,g2d.getRenderingHints()); else {      int xloc=cr.getMinX() + (int)at.getTranslateX();      int yloc=cr.getMinY() + (int)at.getTranslateY();      cr=new TranslateRed(cr,xloc,yloc);    }  }  if (g2dCS != srcCM.getColorSpace()) {    if (g2dCS == ColorSpace.getInstance(ColorSpace.CS_sRGB))     cr=convertTosRGB(cr); else     if (g2dCS == ColorSpace.getInstance(ColorSpace.CS_LINEAR_RGB))     cr=convertToLsRGB(cr);  }  srcCM=cr.getColorModel();  if (!drawCM.equals(srcCM))   cr=FormatRed.construct(cr,drawCM);  if (!at.isIdentity() && (determinant > 1.0))   cr=new AffineRed(cr,at,g2d.getRenderingHints());  g2d.setTransform(IDENTITY);  Composite g2dComposite=g2d.getComposite();  if (g2d.getRenderingHint(RenderingHintsKeyExt.KEY_TRANSCODING) == RenderingHintsKeyExt.VALUE_TRANSCODING_PRINTING) {    if (SVGComposite.OVER.equals(g2dComposite)) {      g2d.setComposite(SVGComposite.OVER);    }  }  Rectangle crR=cr.getBounds();  Shape clip=g2d.getClip();  try {    Rectangle clipR;    if (clip == null) {      clip=crR;      clipR=crR;    } else {      clipR=clip.getBounds();      if (!clipR.intersects(crR))       return;      clipR=clipR.intersection(crR);    }    Rectangle gcR=getDestinationBounds(g2d);    if (gcR != null) {      if (!clipR.intersects(gcR))       return;      clipR=clipR.intersection(gcR);    }    boolean useDrawRenderedImage=false;    srcCM=cr.getColorModel();    SampleModel srcSM=cr.getSampleModel();    if ((srcSM.getWidth() * srcSM.getHeight()) >= (clipR.width * clipR.height))     useDrawRenderedImage=true;    Object atpHint=g2d.getRenderingHint(RenderingHintsKeyExt.KEY_AVOID_TILE_PAINTING);    if (atpHint == RenderingHintsKeyExt.VALUE_AVOID_TILE_PAINTING_ON)     useDrawRenderedImage=true;    if (atpHint == RenderingHintsKeyExt.VALUE_AVOID_TILE_PAINTING_OFF)     useDrawRenderedImage=false;    WritableRaster wr;    if (useDrawRenderedImage) {      Raster r=cr.getData(clipR);      wr=((WritableRaster)r).createWritableChild(clipR.x,clipR.y,clipR.width,clipR.height,0,0,null);      BufferedImage bi=new BufferedImage(srcCM,wr,srcCM.isAlphaPremultiplied(),null);      g2d.drawImage(bi,clipR.x,clipR.y,null);    } else {      wr=Raster.createWritableRaster(srcSM,new Point(0,0));      BufferedImage bi=new BufferedImage(srcCM,wr,srcCM.isAlphaPremultiplied(),null);      int xt0=cr.getMinTileX();      int xt1=xt0 + cr.getNumXTiles();      int yt0=cr.getMinTileY();      int yt1=yt0 + cr.getNumYTiles();      int tw=srcSM.getWidth();      int th=srcSM.getHeight();      Rectangle tR=new Rectangle(0,0,tw,th);      Rectangle iR=new Rectangle(0,0,0,0);      if (false) {        System.err.println("SrcCM: " + srcCM);        System.err.println("CR: " + cr);        System.err.println("CRR: " + crR + " TG: ["+ xt0+ ','+ yt0+ ','+ xt1+ ','+ yt1+ "] Off: "+ cr.getTileGridXOffset()+ ','+ cr.getTileGridYOffset());      }      int yloc=yt0 * th + cr.getTileGridYOffset();      int skip=(clipR.y - yloc) / th;      if (skip < 0)       skip=0;      yt0+=skip;      int xloc=xt0 * tw + cr.getTileGridXOffset();      skip=(clipR.x - xloc) / tw;      if (skip < 0)       skip=0;      xt0+=skip;      int endX=clipR.x + clipR.width - 1;      int endY=clipR.y + clipR.height - 1;      if (false) {        System.out.println("clipR: " + clipR + " TG: ["+ xt0+ ','+ yt0+ ','+ xt1+ ','+ yt1+ "] Off: "+ cr.getTileGridXOffset()+ ','+ cr.getTileGridYOffset());      }      yloc=yt0 * th + cr.getTileGridYOffset();      int minX=xt0 * tw + cr.getTileGridXOffset();      int xStep=tw;      xloc=minX;      for (int y=yt0; y < yt1; y++, yloc+=th) {        if (yloc > endY)         break;        for (int x=xt0; x < xt1; x++, xloc+=xStep) {          if ((xloc < minX) || (xloc > endX))           break;          tR.x=xloc;          tR.y=yloc;          Rectangle2D.intersect(crR,tR,iR);          WritableRaster twr;          twr=wr.createWritableChild(0,0,iR.width,iR.height,iR.x,iR.y,null);          cr.copyData(twr);          BufferedImage subBI;          subBI=bi.getSubimage(0,0,iR.width,iR.height);          if (false) {            System.out.println("Drawing: " + tR);            System.out.println("IR: " + iR);          }          g2d.drawImage(subBI,iR.x,iR.y,null);        }        xStep=-xStep;        xloc+=xStep;      }    }  }  finally {    g2d.setTransform(g2dAt);    g2d.setComposite(g2dComposite);  }}  }
class C{  @Override public void onExceededDatabaseQuota(String url,String databaseIdentifier,long currentQuota,long estimatedSize,long totalUsedQuota,AmazonWebStorage.QuotaUpdater quotaUpdater){  LOG.d(LOG_TAG,"onExceededDatabaseQuota estimatedSize: %d  currentQuota: %d  totalUsedQuota: %d",estimatedSize,currentQuota,totalUsedQuota);  if (estimatedSize < MAX_QUOTA) {    long newQuota=estimatedSize;    LOG.d(LOG_TAG,"calling quotaUpdater.updateQuota newQuota: %d",newQuota);    quotaUpdater.updateQuota(newQuota);  } else {    quotaUpdater.updateQuota(currentQuota);  }}  }
class C{  public static Security noSec(String serverUri,int shortServerId){  return new Security(serverUri,false,3,new byte[0],new byte[0],new byte[0],shortServerId);}  }
class C{  public static <O,A extends Comparable<A>>CompositePersistence<O,A> of(Persistence<O,A> primaryPersistence,Persistence<O,A> secondaryPersistence,List<? extends Persistence<O,A>> additionalPersistences){  return new CompositePersistence<O,A>(primaryPersistence,secondaryPersistence,additionalPersistences);}  }
class C{  public SELF withFixedExposedPort(int hostPort,int containerPort){  super.addFixedExposedPort(hostPort,containerPort);  return self();}  }
class C{  public static AvedevProjectionExpression avedevDistinct(String propertyName){  return new AvedevProjectionExpression(getPropExpr(propertyName),false);}  }
class C{  public T cacheBuster(String value){  setString(CACHE_BUSTER,value);  return (T)this;}  }
class C{  public boolean isInDomain(float domainValue){  if (mDomainA > mDomainB) {    return domainValue <= mDomainA && domainValue >= mDomainB;  }  return domainValue >= mDomainA && domainValue <= mDomainB;}  }
class C{  public static String generateSUM(String textoColumma){  StringBuffer sql=new StringBuffer(" SUM").append(ABRIR_PARENTESIS).append(textoColumma).append(CERRAR_PARENTESIS);  return sql.toString();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static RecyclerView.AdapterDataObserver fixAdapterForTesting(RecyclerView.Adapter adapter) throws NoSuchFieldException, IllegalAccessException {  Field observableField=RecyclerView.Adapter.class.getDeclaredField("mObservable");  observableField.setAccessible(true);  Object observable=observableField.get(adapter);  Field observersField=Observable.class.getDeclaredField("mObservers");  observersField.setAccessible(true);  final ArrayList<Object> observers=new ArrayList<>();  RecyclerView.AdapterDataObserver dataObserver=mock(RecyclerView.AdapterDataObserver.class);  observers.add(dataObserver);  observersField.set(observable,observers);  return dataObserver;}  }
class C{  private void handleReference(final Reference ref){  ConnectionSource source=null;synchronized (REFERENCE_TO_CONNECTION_SOURCE) {    source=(ConnectionSource)REFERENCE_TO_CONNECTION_SOURCE.remove(ref);  }  if (source != null) {    if (LOG.isDebugEnabled()) {      LOG.debug("Connection reclaimed by garbage collector, hostConfig=" + source.hostConfiguration);    }    source.connectionPool.handleLostConnection(source.hostConfiguration);  }}  }
class C{  public static Date strToDateMM_dd(String datestr){  Date date=null;  try {    SimpleDateFormat fmt=new SimpleDateFormat(MM_dd_HH_mm);    date=fmt.parse(datestr);  } catch (  Exception e) {    return date;  }  return date;}  }
class C{  public static void processCommandLine(TextUICommandLine commandLine,String[] argv,IFindBugsEngine findBugs) throws IOException, FilterException {  try {    argv=commandLine.expandOptionFiles(argv,true,true);  } catch (  HelpRequestedException e) {    showHelp(commandLine);  }  int argCount=0;  try {    argCount=commandLine.parse(argv);  } catch (  IllegalArgumentException e) {    System.out.println(e.getMessage());    showHelp(commandLine);  }catch (  HelpRequestedException e) {    showHelp(commandLine);  }  Project project=commandLine.getProject();  for (int i=argCount; i < argv.length; ++i) {    project.addFile(argv[i]);  }  commandLine.handleXArgs();  commandLine.configureEngine(findBugs);  if (commandLine.getProject().getFileCount() == 0 && !commandLine.justPrintConfiguration() && !commandLine.justPrintVersion()) {    System.out.println("No files to be analyzed");    showHelp(commandLine);  }}  }
class C{  public Organization(){  super();  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());}  }
class C{  public void addTableModelListener(WTableModelListener listener){  if (listener == null) {    return;  }  if (!m_listeners.contains(listener)) {    m_listeners.add(listener);  }  return;}  }
class C{  public void handleAnimatedAttributeChanged(AnimatedLiveAttributeValue alav){  if (alav.getNamespaceURI() == null) {    String ln=alav.getLocalName();    if (ln.equals(SVG_X_ATTRIBUTE) || ln.equals(SVG_Y_ATTRIBUTE) || ln.equals(SVG_DX_ATTRIBUTE)|| ln.equals(SVG_DY_ATTRIBUTE)|| ln.equals(SVG_ROTATE_ATTRIBUTE)|| ln.equals(SVG_TEXT_LENGTH_ATTRIBUTE)|| ln.equals(SVG_LENGTH_ADJUST_ATTRIBUTE)) {      textBridge.computeLaidoutText(ctx,textBridge.e,textBridge.getTextNode());      return;    }  }  super.handleAnimatedAttributeChanged(alav);}  }
class C{  public URIReferenceException(){  super();}  }
class C{  public synchronized EventBean assertOneGetNew(){  ScopeTestHelper.assertTrue("Listener invocation not received but expected",isInvoked);  ScopeTestHelper.assertEquals("Mismatch in the number of invocations",1,newDataList.size());  ScopeTestHelper.assertEquals("Mismatch in the number of invocations",1,oldDataList.size());  if (lastNewData == null) {    ScopeTestHelper.fail("No new-data events received");  }  ScopeTestHelper.assertEquals("Mismatch in the number of new-data events",1,lastNewData.length);  return lastNewData[0];}  }
class C{  public VNXeCommandJob createCIFSShare(String fsId,String cifsName,String permission,String path) throws VNXeException {  _logger.info("creating CIFS share:" + fsId);  FileSystemRequest fsRequest=new FileSystemRequest(_khClient,fsId);  VNXeFileSystem fs=fsRequest.get();  if (fs == null) {    _logger.info("Could not find file system in the vxne");    throw VNXeException.exceptions.vnxeCommandFailed("Could not find file system in the vnxe for: " + fsId);  }  String resourceId=fs.getStorageResource().getId();  ModifyFileSystemParam modifyFSParm=new ModifyFileSystemParam();  CifsShareParam cifsParam=new CifsShareParam();  cifsParam.setIsACEEnabled(false);  if (permission != null && !permission.isEmpty() && permission.equalsIgnoreCase(AccessEnum.READ.name())) {    cifsParam.setIsReadOnly(true);  } else {    cifsParam.setIsReadOnly(false);  }  CifsShareCreateParam cifsCreate=new CifsShareCreateParam();  cifsCreate.setName(cifsName);  cifsCreate.setPath(path);  _logger.info("Creating VNXe CIFS share by name: {} for path: {}",cifsName,path);  List<VNXeCifsServer> cifsServers=getCifsServers(fs.getNasServer().getId());  if (cifsServers == null || cifsServers.isEmpty()) {    throw VNXeException.exceptions.vnxeCommandFailed("The nasServer is not configured to support CIFS");  }  VNXeBase cifsServer=new VNXeBase();  cifsServer.setId(cifsServers.get(0).getId());  cifsCreate.setCifsServer(cifsServer);  cifsCreate.setCifsShareParameters(cifsParam);  netBios=cifsServers.get(0).getNetbiosName();  List<CifsShareCreateParam> cifsCreateList=new ArrayList<CifsShareCreateParam>();  cifsCreateList.add(cifsCreate);  modifyFSParm.setCifsShareCreate(cifsCreateList);  FileSystemActionRequest req=new FileSystemActionRequest(_khClient);  return req.modifyFileSystemAsync(modifyFSParm,resourceId);}  }
class C{  protected Iterator<Map.Entry<K,V>> createEntrySetIterator(){  if (size() == 0) {    return EmptyIterator.<Map.Entry<K,V>>emptyIterator();  }  return new EntrySetIterator<K,V>(this);}  }
class C{  private void initializeState(State current){  InitializationUtils.initialize(current);  if (current.documentExpirationTimeMicros <= 0) {    current.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(ServiceUtils.DEFAULT_DOC_EXPIRATION_TIME_MICROS);  }}  }
class C{  private String readMemberBasedOnNoDictionaryVal(DimColumnResolvedFilterInfo dimColumnEvaluatorInfo,VariableLengthDimensionDataChunk dimensionColumnDataChunk,int index){  byte[] noDictionaryVals;  if (null != dimensionColumnDataChunk.getAttributes().getInvertedIndexesReverse()) {    noDictionaryVals=dimensionColumnDataChunk.getCompleteDataChunk().get(dimensionColumnDataChunk.getAttributes().getInvertedIndexesReverse()[index]);  } else {    noDictionaryVals=dimensionColumnDataChunk.getCompleteDataChunk().get(index);  }  return new String(noDictionaryVals,Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));}  }
class C{  public int classIndex(){  return ByteArray.readU16bit(get(),0);}  }
class C{  private static String[] parseCapaths(String cRealm,String sRealm) throws KrbException {  Config cfg=Config.getInstance();  if (!cfg.exists("capaths",cRealm,sRealm)) {    throw new KrbException("No conf");  }  LinkedList<String> path=new LinkedList<>();  String head=sRealm;  while (true) {    String value=cfg.getAll("capaths",cRealm,head);    if (value == null) {      break;    }    String[] more=value.split("\\s+");    boolean changed=false;    for (int i=more.length - 1; i >= 0; i--) {      if (path.contains(more[i]) || more[i].equals(".") || more[i].equals(cRealm)|| more[i].equals(sRealm)|| more[i].equals(head)) {        continue;      }      changed=true;      path.addFirst(more[i]);    }    if (!changed)     break;    head=path.getFirst();  }  path.addFirst(cRealm);  return path.toArray(new String[path.size()]);}  }
class C{  public void editText(VisualItem item,String attribute){  if (m_editing) {    stopEditing();  }  Rectangle2D b=item.getBounds();  Rectangle r=m_transform.createTransformedShape(b).getBounds();  if (m_editor instanceof JTextArea) {    r.y-=2;    r.width+=22;    r.height+=2;  } else {    r.x+=3;    r.y+=1;    r.width-=5;    r.height-=2;  }  Font f=getFont();  int size=(int)Math.round(f.getSize() * m_transform.getScaleX());  Font nf=new Font(f.getFontName(),f.getStyle(),size);  m_editor.setFont(nf);  editText(item,attribute,r);}  }
class C{  public static PublicRegexp deepCopy(Regexp re){  PublicRegexp publicRegexp=new PublicRegexp(re);  if (re.subs != null) {    publicRegexp.publicSubs=new PublicRegexp[re.subs.length];    Stream<PublicRegexp> publicSubStream=Arrays.asList(re.subs).stream().map(null);    publicSubStream.collect(Collectors.toList()).toArray(publicRegexp.publicSubs);  } else {    publicRegexp.publicSubs=null;  }  return publicRegexp;}  }
class C{  private String determineBourneSnapshotEventType(){  String eventType="";  eventType=_indication.get(CIMConstants.INDICATION_CLASS_TAG);  String eventEnum=null;  logMessage("Raw indication of Type found {}",new Object[]{eventType});  if (eventType != null && eventType.length() > 0) {    if (eventType.contains(CIMConstants.INST_CREATION_EVENT)) {      eventEnum=OperationTypeEnum.CREATE_VOLUME_SNAPSHOT.getEvType(true);    } else     if (eventType.contains(CIMConstants.INST_DELETION_EVENT)) {      eventEnum=OperationTypeEnum.DELETE_VOLUME_SNAPSHOT.getEvType(true);    } else {      String[] osDescs=new String[0];      String[] osCodes=new String[0];      osDescs=MonitoringPropertiesLoader.splitStringIntoArray(getOperationalStatusDescriptions());      osCodes=MonitoringPropertiesLoader.splitStringIntoArray(getOperationalStatusCodes());      eventEnum=_evtDeterminer.determineEventTypeBasedOnOperationStatusValues(_indication,Boolean.TRUE,osDescs,osCodes);    }  }  return eventEnum;}  }
class C{  public FloatArray resize(FloatArray array,long size){  if (array instanceof BigFloatArray) {    return resizeInPlace((BigFloatArray)array,size);  } else {    AbstractArray arr=(AbstractArray)array;    final FloatArray newArray=newFloatArray(size,arr.clearOnResize);    for (long i=0, end=Math.min(size,array.size()); i < end; ++i) {      newArray.set(i,array.get(i));    }    arr.close();    return newArray;  }}  }
class C{  public void endElement(String name) throws SAXException {}  }
class C{  private static String formatNum(double n,int iteration){  double d=((long)n / 100) / 10.0;  boolean isRound=(d * 10) % 10 == 0;  return (d < 1000 ? ((d > 99.9 || isRound || (!isRound && d > 9.99) ? (int)d * 10 / 10 : d + "") + "" + c[iteration]) : formatNum(d,iteration + 1));}  }
class C{  public static double[] extract(int[] indicator,int value,double[] arr){  if (arr.length != indicator.length) {    throw new InputMismatchException("Length of x and indicator must be the same.");  }  int newLen=0;  for (  int v : indicator)   if (v == value)   newLen++;  double[] newx=new double[newLen];  int j=0;  for (int i=0; i < arr.length; i++) {    if (indicator[i] == value) {      newx[j]=arr[i];      j++;    }  }  return newx;}  }
class C{  public Builder append(ImageProcessor processor){  result.processors.add(processor);  return (this);}  }
class C{  public MappingRule createMappingRule(){  MappingRuleImpl mappingRule=new MappingRuleImpl();  return mappingRule;}  }
class C{  @Override public String toString(){  return String.valueOf(value);}  }
class C{  private void validateTableMetaDataSingleRow(String tableNamePattern,String[] types,Map<TableMetaData,Object> validationRules) throws Exception {  checkValidationRulesComplete(validationRules);  try (ResultSet tables=dbmd.getTables(null,null,tableNamePattern,types)){    assertTrue("Expected row in table metadata",tables.next());    validateRowValues(tables,validationRules);    assertFalse("Expected only one row in result set",tables.next());  } }  }
class C{  protected void doChildClosureVisit(Node node,Set<Node> closure){  if (!closure.contains(node)) {    closure.add(node);    for (    Edge edge1 : getEdges(node)) {      Node sub=Edges.traverseDirected(node,edge1);      if (sub == null) {        continue;      }      doChildClosureVisit(sub,closure);    }  }}  }
class C{  public static TypeReference newFormalParameterReference(int paramIndex){  return new TypeReference((METHOD_FORMAL_PARAMETER << 24) | (paramIndex << 16));}  }
class C{  public void securedNetworkCall(final APIResultCallBack callBack,int requestCode,final EndPointInfo apiUtilities,Context context){  if (IdentityProxy.getInstance().getContext() == null) {    IdentityProxy.getInstance().setContext(context);  }  setRequestMethod(apiUtilities.getHttpMethod());  IdentityProxy.getInstance().setRequestCode(requestCode);  if (apiUtilities.getRequestParamsMap() != null) {    sendStringRequest(callBack,apiUtilities,true);  } else   if (apiUtilities.getRequestParams() != null) {    if (isJSONObject(apiUtilities.getRequestParams())) {      sendJsonObjectRequest(callBack,apiUtilities,true);    } else {      sendJsonArrayRequest(callBack,apiUtilities,true);    }  } else {    sendJsonObjectRequest(callBack,apiUtilities,true);  }}  }
class C{  private Object convertBoolean(String defaultValue,int targetTypeCode){  boolean value=FormatUtils.toBoolean(defaultValue);  Object result=null;  if ((targetTypeCode == Types.BIT) || (PlatformUtils.supportsJava14JdbcTypes() && (targetTypeCode == PlatformUtils.determineBooleanTypeCode()))) {    result=value;  } else   if (TypeMap.isNumericType(targetTypeCode)) {    result=(value ? new Integer(1) : new Integer(0));  } else {    result=Boolean.toString(value);  }  return result;}  }
class C{  protected Node newNode(){  return new XBLOMShadowTreeElement();}  }
class C{  public void storageViewRemoveInitiators(URI vplexURI,URI exportGroupURI,URI exportMaskURI,List<URI> initiatorURIs,List<URI> targetURIs,String stepId) throws WorkflowException {  try {    WorkflowStepCompleter.stepExecuting(stepId);    StorageSystem vplex=getDataObject(StorageSystem.class,vplexURI,_dbClient);    ExportMask exportMask=_dbClient.queryObject(ExportMask.class,exportMaskURI);    VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplex,_dbClient);    String vplexClusterName=VPlexUtil.getVplexClusterName(exportMask,vplexURI,client,_dbClient);    Map<String,String> targetPortMap=VPlexControllerUtils.getTargetPortToPwwnMap(client,vplexClusterName);    VPlexStorageViewInfo storageView=client.getStorageView(vplexClusterName,exportMask.getMaskName());    _log.info("Refreshing ExportMask {}",exportMask.getMaskName());    VPlexControllerUtils.refreshExportMask(_dbClient,storageView,exportMask,targetPortMap,_networkDeviceController);    List<URI> volumeURIList=(exportMask.getUserAddedVolumes() != null) ? URIUtil.toURIList(exportMask.getUserAddedVolumes().values()) : new ArrayList<URI>();    if (volumeURIList.isEmpty()) {      _log.warn("volume URI list for validating remove initiators is empty...");    }    ExportMaskValidationContext ctx=new ExportMaskValidationContext();    ctx.setStorage(vplex);    ctx.setExportMask(exportMask);    ctx.setBlockObjects(volumeURIList,_dbClient);    ctx.setAllowExceptions(!WorkflowService.getInstance().isStepInRollbackState(stepId));    validator.removeInitiators(ctx).validate();    if (!exportMask.hasAnyExistingInitiators() && !exportMask.hasAnyExistingVolumes()) {      if (targetURIs != null && targetURIs.isEmpty() == false) {        List<PortInfo> targetPortInfos=new ArrayList<PortInfo>();        List<URI> targetsAddedToStorageView=new ArrayList<URI>();        for (        URI target : targetURIs) {          if (!exportMask.getStoragePorts().contains(target.toString())) {            continue;          }          StoragePort port=getDataObject(StoragePort.class,target,_dbClient);          PortInfo pi=new PortInfo(port.getPortNetworkId().toUpperCase().replaceAll(":",""),null,port.getPortName(),null);          targetPortInfos.add(pi);          targetsAddedToStorageView.add(target);        }        if (!targetPortInfos.isEmpty()) {          client.removeTargetsFromStorageView(exportMask.getMaskName(),targetPortInfos);          for (          URI target : targetsAddedToStorageView) {            exportMask.removeTarget(target);          }          _dbClient.updateObject(exportMask);        }      }    }    List<PortInfo> initiatorPortInfo=new ArrayList<PortInfo>();    for (    URI initiatorURI : initiatorURIs) {      Initiator initiator=getDataObject(Initiator.class,initiatorURI,_dbClient);      if (exportMask.hasExistingInitiator(initiator) && !WorkflowService.getInstance().isStepInRollbackState(stepId)) {        continue;      }      PortInfo portInfo=new PortInfo(initiator.getInitiatorPort().toUpperCase().replaceAll(":",""),initiator.getInitiatorNode().toUpperCase().replaceAll(":",""),initiator.getLabel(),getVPlexInitiatorType(initiator));      initiatorPortInfo.add(portInfo);    }    if (!initiatorPortInfo.isEmpty() && !exportMask.hasAnyExistingVolumes()) {      String lockName=null;      boolean lockAcquired=false;      try {        ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupURI);        String clusterId=ConnectivityUtil.getVplexClusterForVarray(exportGroup.getVirtualArray(),vplexURI,_dbClient);        lockName=_vplexApiLockManager.getLockName(vplexURI,clusterId);        lockAcquired=_vplexApiLockManager.acquireLock(lockName,LockTimeoutValue.get(LockType.VPLEX_API_LIB));        if (!lockAcquired) {          throw VPlexApiException.exceptions.couldNotObtainConcurrencyLock(vplex.getLabel());        }        client.removeInitiatorsFromStorageView(exportMask.getMaskName(),vplexClusterName,initiatorPortInfo);      }  finally {        if (lockAcquired) {          _vplexApiLockManager.releaseLock(lockName);        }      }    }    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  VPlexApiException vae) {    _log.error("Exception removing initiator from Storage View: " + vae.getMessage(),vae);    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception ex) {    _log.error("Exception removing initiator from Storage View: " + ex.getMessage(),ex);    String opName=ResourceOperationTypeEnum.DELETE_STORAGE_VIEW_INITIATOR.getName();    ServiceError serviceError=VPlexApiException.errors.storageViewRemoveInitiatorFailed(opName,ex);    WorkflowStepCompleter.stepFailed(stepId,serviceError);  }}  }
class C{  @Override public String toString(){  return String.format("Target Process");}  }
class C{  public Builder cause(final Throwable cause){  this.cause=cause;  return this;}  }
class C{  public void notifyDataSetChanged(){  mDataSetObservable.notifyChanged();}  }
class C{  public JSONArray put(int index,double value) throws JSONException {  this.put(index,new Double(value));  return this;}  }
class C{  public Socket onMessage(final IMessageCallback callback){  this.messageCallbacks.add(callback);  return this;}  }
class C{  public JSONObject optJSONObject(String key){  Object object=this.opt(key);  return object instanceof JSONObject ? (JSONObject)object : null;}  }
class C{  protected PShape createShapeFamily(int type){  return new PShape(this,type);}  }
class C{  public void printHelp(String cmdLineSyntax,String header,Options options,String footer,boolean autoUsage){  printHelp(defaultWidth,cmdLineSyntax,header,options,footer,autoUsage);}  }
class C{  public static Bitmap scale(Bitmap src,Matrix scaleMatrix){  return Bitmap.createBitmap(src,0,0,src.getWidth(),src.getHeight(),scaleMatrix,true);}  }
class C{  private List<Extension> matchExtensions(List<String> plugins,Extension[] extensions,String contentType){  List<Extension> extList=new ArrayList<Extension>();  if (plugins != null) {    for (    String parsePluginId : plugins) {      Extension ext=getExtension(extensions,parsePluginId,contentType);      if (ext == null) {        ext=getExtension(extensions,parsePluginId);        if (LOG.isWarnEnabled()) {          if (ext != null) {            LOG.warn("ParserFactory:Plugin: " + parsePluginId + " mapped to contentType "+ contentType+ " via parse-plugins.xml, but "+ "its plugin.xml "+ "file does not claim to support contentType: "+ contentType);          } else {            LOG.warn("ParserFactory: Plugin: " + parsePluginId + " mapped to contentType "+ contentType+ " via parse-plugins.xml, but not enabled via "+ "plugin.includes in nutch-default.xml");          }        }      }      if (ext != null) {        extList.add(ext);      }    }  } else {    for (int i=0; i < extensions.length; i++) {      if ("*".equals(extensions[i].getAttribute("contentType"))) {        extList.add(0,extensions[i]);      } else       if (extensions[i].getAttribute("contentType") != null && contentType.matches(escapeContentType(extensions[i].getAttribute("contentType")))) {        extList.add(extensions[i]);      }    }    if (extList.size() > 0) {      if (LOG.isInfoEnabled()) {        StringBuffer extensionsIDs=new StringBuffer("[");        boolean isFirst=true;        for (        Extension ext : extList) {          if (!isFirst)           extensionsIDs.append(" - "); else           isFirst=false;          extensionsIDs.append(ext.getId());        }        extensionsIDs.append("]");        LOG.info("The parsing plugins: " + extensionsIDs.toString() + " are enabled via the plugin.includes system "+ "property, and all claim to support the content type "+ contentType+ ", but they are not mapped to it  in the "+ "parse-plugins.xml file");      }    } else     if (LOG.isDebugEnabled()) {      LOG.debug("ParserFactory:No parse plugins mapped or enabled for " + "contentType " + contentType);    }  }  return (extList.size() > 0) ? extList : null;}  }
class C{  public NoPermissionException(String explanation){  super(explanation);}  }
class C{  private void populateData(Region region,Object[] data){  logger.info("PRQueryRegionDestroyedJUnitTest#populateData: Populating Data in the PR Region ");  for (int j=0; j < data.length; j++) {    region.put(new Integer(j),data[j]);  }}  }
class C{  @Override public void testQueryBindings() throws Exception {  con.addStatement(painter,RDF.TYPE,RDFS.CLASS);  con.addStatement(painting,RDF.TYPE,RDFS.CLASS);  con.addStatement(picasso,RDF.TYPE,painter,context1);  con.addStatement(guernica,RDF.TYPE,painting,context1);  con.addStatement(picasso,paints,guernica,context1);  con.commit();  MapBindingSet bindings=new MapBindingSet(2);  CloseableIteration<? extends BindingSet,QueryEvaluationException> iter;  iter=evaluate("select ?X where { ?X <" + RDF.TYPE + "> ?Y . ?Y <"+ RDF.TYPE+ "> <"+ RDFS.CLASS+ ">}",con,bindings);  int resultCount=verifyQueryResult(iter,1);  assertEquals("Wrong number of query results",2,resultCount);  bindings.addBinding("Y",painter);  iter=evaluate("select ?X where { ?X <" + RDF.TYPE + "> ?Y . ?Y <"+ RDF.TYPE+ "> <"+ RDFS.CLASS+ ">}",con,bindings);  resultCount=verifyQueryResult(iter,1);  assertEquals("Wrong number of query results",1,resultCount);  bindings.addBinding("Z",painting);  iter=evaluate("select ?X where { ?X <" + RDF.TYPE + "> ?Y . ?Y <"+ RDF.TYPE+ "> <"+ RDFS.CLASS+ ">}",con,bindings);  resultCount=verifyQueryResult(iter,1);  assertEquals("Wrong number of query results",1,resultCount);  bindings.removeBinding("Y");  iter=evaluate("select ?X where { ?X <" + RDF.TYPE + "> ?Y . ?Y <"+ RDF.TYPE+ "> <"+ RDFS.CLASS+ ">}",con,bindings);  resultCount=verifyQueryResult(iter,1);  assertEquals("Wrong number of query results",2,resultCount);  bindings.clear();  iter=evaluate("select ?X where { ?X <" + RDF.TYPE + "> ?Y . ?Y <"+ RDF.TYPE+ "> <"+ RDFS.CLASS+ "> . filter( ?Y = ?Z) }",con,bindings);  resultCount=verifyQueryResult(iter,1);  assertEquals("Wrong number of query results",0,resultCount);  bindings.addBinding("Z",painter);  iter=evaluate("select ?X where { ?X <" + RDF.TYPE + "> ?Y . ?Y <"+ RDF.TYPE+ "> <"+ RDFS.CLASS+ "> . filter( ?Y = ?Z) }",con,bindings);  resultCount=verifyQueryResult(iter,1);  assertEquals("Wrong number of query results",1,resultCount);}  }
class C{  protected boolean hasOutstandingChanges(){  return (fieldValue.hasChanged() || fieldName.hasChanged() || fieldUPC.hasChanged()|| fieldSKU.hasChanged()|| fPriceList_ID.hasChanged()|| fWarehouse_ID.hasChanged()|| fVendor_ID.hasChanged()|| fProductCategory_ID.hasChanged()|| fAS_ID.hasChanged()|| fASI_ID.hasChanged()|| checkOnlyStock.hasChanged()|| checkAND.hasChanged());}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  Debug.message("mousemodemenuitem","MouseModeMenuItem.propertyChange()");  if (evt.getPropertyName() == MouseDelegator.ActiveModeProperty) {    String mmID=((MapMouseMode)evt.getNewValue()).getID();    for (int i=0; i < mouseModeButtons.length; i++) {      if (mouseModeButtons[i].getName().equals(mmID)) {        mouseModeButtons[i].setSelected(true);        break;      }    }  } else   if (evt.getPropertyName() == MouseDelegator.MouseModesProperty) {    for (int i=0; i < mouseModeButtons.length; i++) {      remove(mouseModeButtons[i]);    }    MapMouseMode[] modes=mouseDelegator.getMouseModes();    String activeMode=mouseDelegator.getActiveMouseModeID();    setUpItems(modes,activeMode);  }}  }
class C{  @Override protected MapView createViewInstance(ThemedReactContext context){  mapView=new MapView(context);  mapView.onCreate(null);  mapView.onResume();  if (ContextCompat.checkSelfPermission(context,Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {    locationManager=(LocationManager)context.getSystemService(Context.LOCATION_SERVICE);  }  reactContext=context;  return mapView;}  }
class C{  public static boolean isEmptyJsonObject(JsonElement jsonElt){  return jsonElt.isJsonObject() && ((JsonObject)jsonElt).entrySet().isEmpty();}  }
class C{  public ByteSequencesWriter(IndexOutput out){  this.out=out;}  }
class C{  public final int endColumn(){  return this.eColumn;}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof StatisticResourceJmxImpl)) {    return false;  }  StatisticResourceJmxImpl other=(StatisticResourceJmxImpl)obj;  return this.getMBeanName().equals(other.getMBeanName());}  }
class C{  public static <E>Set<E> synchronizedSet(Set<E> set){  if (set == null) {    throw new NullPointerException("set == null");  }  return new SynchronizedSet<E>(set);}  }
class C{  public DefaultStateMachineContext(List<StateMachineContext<S,E>> childs,S state,E event,Map<String,Object> eventHeaders,ExtendedState extendedState){  this(childs,state,event,eventHeaders,extendedState,null);}  }
class C{  @Uninterruptible public static void scheduleFinalizerThread(){  int finalizedCount=FinalizableProcessor.countReadyForFinalize();  if (finalizedCount > 0) {    FinalizerThread.schedule();  }}  }
class C{  public void addFormatField(FormatField field){  addIdField(mFormatLines,field);}  }
class C{  public SignerInfo toSignerInfo(){  return info;}  }
class C{  public TaskList resynchronizeApplicationSnapshot(URI id,VolumeGroupSnapshotOperationParam input){  UriBuilder uriBuilder=client.uriBuilder(APP_SUPPORT_RESYNCHRONIZE_SNAPSHOT_URL);  return client.postURI(TaskList.class,input,uriBuilder.build(id));}  }
class C{  @Override protected Iterable<String> transform(final String item){  if (null == item) {    return Collections.emptyList();  }  return Arrays.asList(item.toUpperCase().split(","));}  }
class C{  public void endVisit(LabeledStatement node){}  }
class C{  protected void clearOutEvents(){}  }
class C{  public boolean isQuiet(){  return quiet;}  }
class C{  public void testGetAttributeCount(){  int expectedReturn=1;  int actualReturn=bindingRequest.getAttributeCount();  assertEquals("getAttributeCount failed for a bindingRequest",expectedReturn,actualReturn);  expectedReturn=3;  actualReturn=bindingResponse.getAttributeCount();  assertEquals("getAttributeCount failed for a bindingRequest",expectedReturn,actualReturn);}  }
class C{  public static boolean isValidPublicValue(BigInteger publicValue){  if (publicValue.signum() < 1 || publicValue.equals(BigInteger.ONE))   return false;  if (publicValue.compareTo(P1024.subtract(BigInteger.ONE)) >= 0)   return false;  return true;}  }
class C{  public Object nextValue() throws JSONException {  int c=nextCleanInternal();switch (c) {case -1:    throw syntaxError("End of input");case '{':  return readObject();case '[':return readArray();case '\'':case '"':return nextString((char)c);default :pos--;return readLiteral();}}  }
class C{  private static void sortArray(int[] array){  int i, j, h, N=array.length - 1;  for (h=1; h <= N / 9; h=3 * h + 1) {    ;  }  for (; h > 0; h/=3) {    for (i=h + 1; i <= N; i++) {      int v=array[i];      j=i;      while (j > h && array[j - h] > v) {        array[j]=array[j - h];        j-=h;      }      array[j]=v;    }  }}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public AppContext accessRequest(AUTH_MODE authMode,String customerName,String email,String login,String password,String locale,String domain,String linkURL,String defaultClientURL,EmailHelper emailHelper){  if (StringUtils.isEmpty(login) && StringUtils.isEmpty(email)) {    login="super";    password="super123";  }  if ((locale != null) && !locale.isEmpty()) {    locale=locale.trim();  } else {    locale=Locale.getDefault().toString();  }  List<String> urls=new ArrayList<String>();  if (defaultClientURL != null) {    if (defaultClientURL.contains(",")) {      StringTokenizer st=new StringTokenizer(defaultClientURL,",");      while (st.hasMoreElements()) {        urls.add(st.nextElement().toString());      }    } else {      urls.add(defaultClientURL);    }  }  if (domain != null && ((defaultClientURL == null) || (!defaultClientURL.equals(domain)))) {    urls.add(domain);  }  List<Client> clients=new ArrayList<Client>();  clients.add(new Client(new ClientPK(null,CoreConstants.CONSOLE_CLIENT_ID),CoreConstants.CONSOLE_CLIENT_NAME,"" + UUID.randomUUID(),urls));  clients.add(new Client(new ClientPK(null,CoreConstants.DASHBOARD_CLIENT_ID),CoreConstants.DASHBOARD_CLIENT_NAME,"" + UUID.randomUUID(),urls));  String salt=UUID.randomUUID().toString();  AppContext ctx=createCustomer(authMode,customerName,locale,salt,login,password,email,clients);  if (email != null) {    String linkAccessRequest=linkURL.replace('{' + CoreConstants.PARAM_NAME_CUSTOMER_ID + "}",ctx.getCustomerId());    String content="Welcome to the SquidAnalytics API.\n\n";    content+="Your Customer ID is " + ctx.getCustomerId() + "\n\n";    content+="Please follow this link to access your API Console :\n" + linkAccessRequest;    content+="\n\nThe SquidAnalytics Team.";    String subject="SquidAnalytics API access";    List<String> dests=Arrays.asList(email);    try {      logger.info("Sending API access request link (" + linkAccessRequest + ") to "+ email+ " "+ ctx.getUser());      List<String> bccAddresses=new ArrayList<String>();      String bccAddress=KrakenConfig.getProperty("signup.email.bcc",true);      if ((bccAddress != null) && !bccAddress.isEmpty()) {        bccAddresses.add(bccAddress);      }      emailHelper.sendEmail(dests,bccAddresses,subject,content,null,EmailHelper.PRIORITY_NORMAL);    } catch (    MessagingException e) {      throw new APIException(e,ctx.isNoError());    }  }  return ctx;}  }
class C{  public boolean hasDownImage(){  return (downOnImage != null || hasDownOff());}  }
class C{  private static void addLiquibaseScanPackages(){  System.setProperty("liquibase.scan.packages",Joiner.on(",").join("liquibase.change","liquibase.database","liquibase.parser","liquibase.precondition","liquibase.datatype","liquibase.serializer","liquibase.sqlgenerator","liquibase.executor","liquibase.snapshot","liquibase.logging","liquibase.diff","liquibase.structure","liquibase.structurecompare","liquibase.lockservice","liquibase.ext","liquibase.changelog"));}  }
class C{  public void update(SimulationThread simulationThread){  if (simulationThread.isCanceled()) {    frame.setStatus("Task canceled.");  } else   if (frame.simulationPaused()) {    frame.setStatus("Task paused.");  } else {    frame.setStatus("Task completed.");  }}  }
class C{  private static void checkTypeSafe(Object o){  try {    o=(Role)o;  } catch (  ClassCastException e) {    throw new IllegalArgumentException(e);  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_Client_ID"))     p_AD_Client_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("AD_Org_ID"))     p_AD_Org_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_BankAccount_ID"))     p_C_BankAccount_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("DeleteOldImported"))     p_deleteOldImported="Y".equals(para[i].getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  m_ctx=Env.getCtx();}  }
class C{  protected void checkSharePermission(Set<PersistentResource> resourceIdentifiers){  if (resourceIdentifiers == null) {    return;  }  final Set<PersistentResource> newResources=getRequestScope().getNewPersistentResources();  for (  PersistentResource persistentResource : resourceIdentifiers) {    if (!newResources.contains(persistentResource) && !lineage.getRecord(persistentResource.getType()).contains(persistentResource)) {      checkPermission(SharePermission.class,persistentResource);    }  }}  }
class C{  private void mapSecretKeys(HashMap<String,AliasInfo> sKeyMap) throws KeyStoreException {  for (  String label : sKeyMap.keySet()) {    if (aliasMap.containsKey(label)) {      throw new KeyStoreException("invalid KeyStore state: " + "found secret key sharing CKA_LABEL [" + label + "] with another token object");    }  }  aliasMap.putAll(sKeyMap);}  }
class C{  public List<NamedRelatedResourceRep> listByStorageSystem(URI storageSystemId){  return listByStorageSystem(storageSystemId,null);}  }
class C{  public boolean isDone(){  return m_progress;}  }
class C{  @Override public int read(byte[] b,int off,int len) throws IOException {  if (closed) {    throw new FormItem.ItemSkippedException();  }  if (len == 0) {    return 0;  }  int res=available();  if (res == 0) {    res=makeAvailable();    if (res == 0) {      return -1;    }  }  res=Math.min(res,len);  System.arraycopy(buffer,head,b,off,res);  head+=res;  total+=res;  return res;}  }
class C{  public boolean inject(ClassNode cnode){  String interfaceByteName=templateName.replace(".","/");  if (!cnode.interfaces.contains(interfaceByteName)) {    cnode.interfaces.add(interfaceByteName);  }  boolean changed=false;  List<String> names=new LinkedList<>();  for (  MethodNode method : cnode.methods) {    ObfMapping m=new ObfMapping(cnode.name,method.name,method.desc).toRuntime();    names.add(m.s_name + m.s_desc);  }  for (  MethodNode impl : this.methodImplementations) {    if (!impl.name.equals("<init>")) {      if (names.contains(impl.name + impl.desc)) {        continue;      }      ObfMapping mapping=new ObfMapping(cnode.name,impl.name,impl.desc).toRuntime();      MethodNode copy=new MethodNode(impl.access,mapping.s_name,mapping.s_desc,impl.signature,impl.exceptions == null ? null : impl.exceptions.toArray(new String[impl.exceptions.size()]));      ASMHelper.copy(impl,copy);      cnode.methods.add(impl);      changed=true;    }  }  return changed;}  }
class C{  public long insertWaypoint(WaypointCreationRequest waypointCreationRequest){  if (!isRecording() || isPaused()) {    return -1L;  }  WaypointType waypointType=waypointCreationRequest.getType();  boolean isStatistics=waypointType == WaypointType.STATISTICS;  String name;  if (waypointCreationRequest.getName() != null) {    name=waypointCreationRequest.getName();  } else {    int nextWaypointNumber=myTracksProviderUtils.getNextWaypointNumber(recordingTrackId,waypointType);    if (nextWaypointNumber == -1) {      nextWaypointNumber=0;    }    name=getString(isStatistics ? R.string.marker_split_name_format : R.string.marker_name_format,nextWaypointNumber);  }  String category=waypointCreationRequest.getCategory() != null ? waypointCreationRequest.getCategory() : "";  TripStatistics tripStatistics;  String description;  String icon;  if (isStatistics) {    long now=System.currentTimeMillis();    markerTripStatisticsUpdater.updateTime(now);    tripStatistics=markerTripStatisticsUpdater.getTripStatistics();    markerTripStatisticsUpdater=new TripStatisticsUpdater(now);    description=new DescriptionGeneratorImpl(this).generateWaypointDescription(tripStatistics);    icon=getString(R.string.marker_statistics_icon_url);  } else {    tripStatistics=null;    description=waypointCreationRequest.getDescription() != null ? waypointCreationRequest.getDescription() : "";    icon=getString(R.string.marker_waypoint_icon_url);  }  double length;  long duration;  Location location=getLastValidTrackPointInCurrentSegment(recordingTrackId);  if (location != null && trackTripStatisticsUpdater != null) {    TripStatistics stats=trackTripStatisticsUpdater.getTripStatistics();    length=stats.getTotalDistance();    duration=stats.getTotalTime();  } else {    if (!waypointCreationRequest.isTrackStatistics()) {      return -1L;    }    location=new Location("");    location.setLatitude(100);    location.setLongitude(180);    length=0.0;    duration=0L;  }  String photoUrl=waypointCreationRequest.getPhotoUrl() != null ? waypointCreationRequest.getPhotoUrl() : "";  Waypoint waypoint=new Waypoint(name,description,category,icon,recordingTrackId,waypointType,length,duration,-1L,-1L,location,tripStatistics,photoUrl);  Uri uri=myTracksProviderUtils.insertWaypoint(waypoint);  return Long.parseLong(uri.getLastPathSegment());}  }
class C{  public static boolean ignorableWhitespace(String value){  Matcher m;  m=whitespacePattern.matcher(value);  if (m.matches())   return true; else   return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private boolean isMechFactoryProperty(String prop){  return (prop.startsWith(PROV_PROP_PREFIX) || prop.regionMatches(true,0,PROV_PROP_PREFIX,0,PROV_PROP_PREFIX_LEN));}  }
class C{  private void locationUpdated(Intent intent){  Log.v(TAG,ACTION_LOCATION_UPDATED);  Location location=intent.getParcelableExtra(FusedLocationProviderApi.KEY_LOCATION_CHANGED);  if (location != null) {    LatLng latLngLocation=new LatLng(location.getLatitude(),location.getLongitude());    Utils.storeLocation(this,latLngLocation);    LocalBroadcastManager.getInstance(this).sendBroadcast(intent);  }}  }
class C{  public void read(int tenant,long time_nanos,long bytes){  finished(Operation.READ,tenant,bytes,time_nanos);}  }
class C{  protected void prepare(){  for (  ProcessInfoParameter para : getParameter()) {    String name=para.getParameterName();    if (para.getParameter() == null)     ; else     if (name.equals(MCostElement.COLUMNNAME_AD_Org_ID))     p_AD_Org_ID=para.getParameterAsInt(); else     if (name.equals(MAcctSchema.COLUMNNAME_C_AcctSchema_ID))     p_C_AcctSchema_ID=para.getParameterAsInt(); else     if (name.equals(MCostType.COLUMNNAME_M_CostType_ID))     p_M_CostType_ID=para.getParameterAsInt(); else     if (name.equals(MCostElement.COLUMNNAME_CostingMethod))     p_ConstingMethod=(String)para.getParameter(); else     if (name.equals(MProduct.COLUMNNAME_M_Product_ID))     p_M_Product_ID=para.getParameterAsInt(); else     if (name.equals(MProduct.COLUMNNAME_M_Product_Category_ID))     p_M_Product_Category_ID=para.getParameterAsInt(); else     if (name.equals(MProduct.COLUMNNAME_ProductType))     p_ProductType=para.getParameter() == null ? null : para.getParameter().toString(); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  public void invokeDynamic(String name,String desc,Handle bsm,Object... bsmArgs){  mv.visitInvokeDynamicInsn(name,desc,bsm,bsmArgs);}  }
class C{  public void closeCamera(boolean synced){  Log.v(TAG,"Closing camera");  mCameraProxy=null;  if (mUsingNewApi) {    mCameraAgentNg.closeCamera(mCameraProxy,synced);  } else {    mCameraAgent.closeCamera(mCameraProxy,synced);  }  mRequestingCameraId=EMPTY_REQUEST;  mUsingNewApi=false;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeStroke(this.borderStroke,stream);  SerialUtilities.writePaint(this.borderPaint,stream);  SerialUtilities.writePaint(this.backgroundPaint,stream);}  }
class C{  public double approximationDistanceAlphabet(double[] ts,int winSize,int paaSize,int alphabetSize,double normThreshold) throws Exception {  double resDistance=0d;  int windowCounter=0;  double[] centralLines=na.getCentralCuts(alphabetSize);  for (int i=0; i < ts.length - winSize + 1; i++) {    double[] subseries=Arrays.copyOfRange(ts,i,i + winSize);    double subsequenceDistance=0.;    if (tsProcessor.stDev(subseries) > normThreshold) {      subseries=tsProcessor.znorm(subseries,normThreshold);    }    double[] paa=tsProcessor.paa(subseries,paaSize);    int[] leterIndexes=tsProcessor.ts2Index(paa,na,alphabetSize);    windowCounter++;    for (int j=0; j < paa.length; j++) {      int letterIdx=leterIndexes[j];      double cLine=centralLines[letterIdx];      subsequenceDistance=subsequenceDistance + ed.distance(cLine,paa[j]);    }    resDistance=resDistance + subsequenceDistance / paa.length;  }  return resDistance / (double)windowCounter;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.296 -0500",hash_original_method="11B9FD6CF8A852954DB9868CF618C4FB",hash_generated_method="5637AF34F74A18AB5F4962975C9CF687") public static int forkSystemServer(int uid,int gid,int[] gids,int debugFlags,int[][] rlimits,long permittedCapabilities,long effectiveCapabilities){  preFork();  int pid=nativeForkSystemServer(uid,gid,gids,debugFlags,rlimits,permittedCapabilities,effectiveCapabilities);  postFork();  return pid;}  }
class C{  public void readFully(byte[] b,int off,int n) throws IOException, EOFException {  while (n > 0) {    int numRead=this.read(b,off,n);    if (numRead < 0)     throw new EOFException();    off+=numRead;    n-=numRead;  }}  }
class C{  public static int compareNull(boolean aNull,int sortType){  if ((sortType & NULLS_FIRST) != 0) {    return aNull ? -1 : 1;  } else   if ((sortType & NULLS_LAST) != 0) {    return aNull ? 1 : -1;  } else {    int comp=aNull ? DEFAULT_NULL_SORT : -DEFAULT_NULL_SORT;    return (sortType & DESCENDING) == 0 ? comp : -comp;  }}  }
class C{  public void moveTaskToFront(int task,int flags,Bundle options){  enforceCallingPermission(android.Manifest.permission.REORDER_TASKS,"moveTaskToFront()");synchronized (this) {    if (!checkAppSwitchAllowedLocked(Binder.getCallingPid(),Binder.getCallingUid(),"Task to front")) {      ActivityOptions.abort(options);      return;    }    final long origId=Binder.clearCallingIdentity();    try {      TaskRecord tr=taskForIdLocked(task);      if (tr != null) {        if ((flags & ActivityManager.MOVE_TASK_NO_USER_ACTION) == 0) {          mMainStack.mUserLeaving=true;        }        if ((flags & ActivityManager.MOVE_TASK_WITH_HOME) != 0) {          mMainStack.moveHomeToFrontLocked();        }        mMainStack.moveTaskToFrontLocked(tr,null,options);        return;      }      for (int i=mMainStack.mHistory.size() - 1; i >= 0; i--) {        ActivityRecord hr=(ActivityRecord)mMainStack.mHistory.get(i);        if (hr.task.taskId == task) {          if ((flags & ActivityManager.MOVE_TASK_NO_USER_ACTION) == 0) {            mMainStack.mUserLeaving=true;          }          if ((flags & ActivityManager.MOVE_TASK_WITH_HOME) != 0) {            mMainStack.moveHomeToFrontLocked();          }          mMainStack.moveTaskToFrontLocked(hr.task,null,options);          return;        }      }    }  finally {      Binder.restoreCallingIdentity(origId);    }    ActivityOptions.abort(options);  }}  }
class C{  public XBLEventSupport(AbstractNode n){  super(n);}  }
class C{  public boolean hasElement(ElementKey<?,?> childKey){  return hasElement(childKey.getId());}  }
class C{  private void processRequests(){  String sql="SELECT * FROM R_Request " + "WHERE DueType='" + MRequest.DUETYPE_Scheduled + "' AND Processed='N'"+ " AND DateNextAction < SysDate"+ " AND AD_Client_ID=?";  if (m_model.getR_RequestType_ID() != 0)   sql+=" AND R_RequestType_ID=?";  PreparedStatement pstmt=null;  int count=0;  int countEMails=0;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_model.getAD_Client_ID());    if (m_model.getR_RequestType_ID() != 0)     pstmt.setInt(2,m_model.getR_RequestType_ID());    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      MRequest request=new MRequest(getCtx(),rs,null);      request.setDueType();      if (request.isDue()) {        if (request.getRequestType().isEMailWhenDue()) {          if (sendEmail(request,"RequestDue")) {            request.setDateLastAlert();            countEMails++;          }        }        request.saveEx();        count++;      }    }    rs.close();  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(pstmt);  }  m_summary.append("New Due #").append(count);  if (countEMails > 0)   m_summary.append(" (").append(countEMails).append(" EMail)");  m_summary.append(" - ");  sql="SELECT * FROM R_Request r " + "WHERE r.DueType='" + MRequest.DUETYPE_Due + "' AND r.Processed='N'"+ " AND AD_Client_ID=?"+ " AND EXISTS (SELECT * FROM R_RequestType rt "+ "WHERE r.R_RequestType_ID=rt.R_RequestType_ID"+ " AND (r.DateNextAction+rt.DueDateTolerance) < SysDate)";  if (m_model.getR_RequestType_ID() != 0)   sql+=" AND r.R_RequestType_ID=?";  count=0;  countEMails=0;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_model.getAD_Client_ID());    if (m_model.getR_RequestType_ID() != 0)     pstmt.setInt(2,m_model.getR_RequestType_ID());    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      MRequest request=new MRequest(getCtx(),rs,null);      request.setDueType();      if (request.isOverdue()) {        if (request.getRequestType().isEMailWhenOverdue() && !TimeUtil.isSameDay(request.getDateLastAlert(),null)) {          if (sendEmail(request,"RequestDue")) {            request.setDateLastAlert();            countEMails++;          }        }        request.saveEx();        count++;      }    }    rs.close();  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(pstmt);  }  m_summary.append("New Overdue #").append(count);  if (countEMails > 0)   m_summary.append(" (").append(countEMails).append(" EMail)");  m_summary.append(" - ");  if (m_model.getOverdueAlertDays() > 0) {    sql="SELECT * FROM R_Request " + "WHERE Processed='N'" + " AND AD_Client_ID=?"+ " AND (DateNextAction+" + m_model.getOverdueAlertDays() + ") < SysDate"+ " AND (DateLastAlert IS NULL";    if (m_model.getRemindDays() > 0)     sql+=" OR (DateLastAlert+" + m_model.getRemindDays() + ") < SysDate";    sql+=")";    if (m_model.getR_RequestType_ID() != 0)     sql+=" AND R_RequestType_ID=?";    count=0;    countEMails=0;    try {      pstmt=DB.prepareStatement(sql,null);      pstmt.setInt(1,m_model.getAD_Client_ID());      if (m_model.getR_RequestType_ID() != 0)       pstmt.setInt(2,m_model.getR_RequestType_ID());      ResultSet rs=pstmt.executeQuery();      while (rs.next()) {        MRequest request=new MRequest(getCtx(),rs,null);        request.setDueType();        if (request.getRequestType().isEMailWhenOverdue() && (request.getDateLastAlert() == null || !TimeUtil.isSameDay(request.getDateLastAlert(),null))) {          if (sendEmail(request,"RequestAlert")) {            request.setDateLastAlert();            countEMails++;          }        }        request.saveEx();        count++;      }      rs.close();    } catch (    SQLException e) {      log.log(Level.SEVERE,sql,e);    } finally {      DB.close(pstmt);    }    m_summary.append("Alerts #").append(count);    if (countEMails > 0)     m_summary.append(" (").append(countEMails).append(" EMail)");    m_summary.append(" - ");  }  if (m_model.getOverdueAssignDays() > 0) {    sql="SELECT * FROM R_Request " + "WHERE Processed='N'" + " AND AD_Client_ID=?"+ " AND IsEscalated='N'"+ " AND (DateNextAction+" + m_model.getOverdueAssignDays() + ") < SysDate";    if (m_model.getR_RequestType_ID() != 0)     sql+=" AND R_RequestType_ID=?";    count=0;    countEMails=0;    try {      pstmt=DB.prepareStatement(sql,null);      pstmt.setInt(1,m_model.getAD_Client_ID());      if (m_model.getR_RequestType_ID() != 0)       pstmt.setInt(2,m_model.getR_RequestType_ID());      ResultSet rs=pstmt.executeQuery();      while (rs.next()) {        MRequest request=new MRequest(getCtx(),rs,null);        if (escalate(request))         count++;      }      rs.close();    } catch (    SQLException e) {      log.log(Level.SEVERE,sql,e);    } finally {      DB.close(pstmt);    }    m_summary.append("Escalated #").append(count).append(" - ");  }  if (m_model.getInactivityAlertDays() > 0) {    sql="SELECT * FROM R_Request " + "WHERE Processed='N'" + " AND AD_Client_ID=?"+ " AND (Updated+" + m_model.getInactivityAlertDays() + ") < SysDate"+ " AND (DateLastAlert IS NULL";    if (m_model.getRemindDays() > 0)     sql+=" OR (DateLastAlert+" + m_model.getRemindDays() + ") < SysDate";    sql+=")";    if (m_model.getR_RequestType_ID() != 0)     sql+=" AND R_RequestType_ID=?";    count=0;    countEMails=0;    try {      pstmt=DB.prepareStatement(sql,null);      pstmt.setInt(1,m_model.getAD_Client_ID());      if (m_model.getR_RequestType_ID() != 0)       pstmt.setInt(2,m_model.getR_RequestType_ID());      ResultSet rs=pstmt.executeQuery();      while (rs.next()) {        MRequest request=new MRequest(getCtx(),rs,null);        request.setDueType();        if (request.getDateLastAlert() == null || !TimeUtil.isSameDay(request.getDateLastAlert(),null)) {          if (sendEmail(request,"RequestInactive")) {            request.setDateLastAlert();            countEMails++;          }          request.saveEx();          count++;        }      }      rs.close();    } catch (    SQLException e) {      log.log(Level.SEVERE,sql,e);    } finally {      DB.close(pstmt);    }    m_summary.append("Inactivity #").append(count);    if (countEMails > 0)     m_summary.append(" (").append(countEMails).append(" EMail)");    m_summary.append(" - ");  }}  }
class C{  public static void checkSorted(Deck deck){  Card[] cards=deck.getCards();  for (int i=0; i < cards.length - 1; i++) {    if (cards[i].compareTo(cards[i + 1]) >= 0) {      System.out.println("Card #" + i + " not sorted!");    }  }}  }
class C{  public SegmentNode add(Coordinate intPt,int segmentIndex){  SegmentNode eiNew=new SegmentNode(edge,intPt,segmentIndex,edge.getSegmentOctant(segmentIndex));  SegmentNode ei=(SegmentNode)nodeMap.get(eiNew);  if (ei != null) {    Assert.isTrue(ei.coord.equals2D(intPt),"Found equal nodes with different coordinates");    return ei;  }  nodeMap.put(eiNew,eiNew);  return eiNew;}  }
class C{  public void toggle(JFXDrawer drawer,boolean show){  if (!drawers.contains(drawer))   addDrawer(drawer);  if (!show) {    if (drawer.isShown() || drawer.isShowing())     drawer.close();  } else {    if (!drawer.isShown() && !drawer.isShowing()) {      updateDrawerPosition(drawer);      drawer.open();    }  }}  }
class C{  @Override public int hashCode(){  return hashcode;}  }
class C{  public TLongObjectIterator(TLongObjectHashMap<V> map){  super(map);  _map=map;}  }
class C{  public static Test suite(){  return (new TestSuite(FacetTagTestCase.class));}  }
class C{  public long env_start(){  return Long.parseLong(fields[49]);}  }
class C{  private void checkNameUniqueness(List<VOCategory> toBeSaved,String locale) throws NonUniqueBusinessKeyException, ObjectNotFoundException {  final List<String> marketplaceIdList=createExistingMarketplaceList(toBeSaved);  for (  String marketplaceId : marketplaceIdList) {    List<VOCategory> toBeSavedForMarketplace=createCategoriesListForMarketplace(marketplaceId,toBeSaved);    checkNameUniquenessForMarketplace(marketplaceId,toBeSavedForMarketplace,locale);  }}  }
class C{  public double num() throws javax.xml.transform.TransformerException {  throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NUM_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER,null));}  }
class C{  static public void main(String args[]) throws Exception {  WbXml2Xml command=null;  try {    command=new WbXml2Xml(args);    command.process();  }  finally {    if (command != null) {      command.close();    }  }}  }
class C{  public boolean isHasVariables(){  return variableReferences != null && !variableReferences.isEmpty();}  }
class C{  private void leadNPC(){  final StendhalRPZone zone=fullpath.get(0).get(0).get().first();  final int x=fullpath.get(0).get(0).getPath().get(0).getX();  final int y=fullpath.get(0).get(0).getPath().get(0).getY();  piedpiper.setPosition(x,y);  zone.add(piedpiper);  Observer o=new MultiZonesFixedPathsList(piedpiper,fullpath,new AttractRat(),new RoadsEnd(new PhaseSwitcher(this)));  o.update(null,null);}  }
class C{  public void onData(byte[] newData,int offset,int limit){  if (!isFilling) {    return;  }  int readLength=limit - offset;  if (data.length < length + readLength) {    data=Arrays.copyOf(data,(length + readLength) * 2);  }  System.arraycopy(newData,offset,data,length,readLength);  length+=readLength;}  }
class C{  private void createCountsLoadCurveGraphs(){  PtCountsLoadCurveGraphCreator cgc=new PtCountsLoadCurveGraphCreator("");  List<CountsGraph> graphsBoard=cgc.createGraphs(this.boardCountComparisonFilter.getCountsForHour(null),this.iter);  List<CountsGraph> graphsAlight=cgc.createGraphs(this.alightCountComparisonFilter.getCountsForHour(null),this.iter);  this.boardCountsLoadCurveGraphMap=new HashMap<String,String>(graphsBoard.size());  this.alightCountsLoadCurveGraphMap=new HashMap<String,String>(graphsAlight.size());  String stopId;  String filename;  for (  CountsGraph cg : graphsBoard) {    try {      stopId=((CountsLoadCurveGraph)cg).getLinkId();      filename=stopId + "b" + PNG;      writeChartToKmz(filename,cg.getChart());      this.boardCountsLoadCurveGraphMap.put(stopId + "b",filename);    } catch (    IOException e) {      e.printStackTrace();    }  }  for (  CountsGraph cg : graphsAlight) {    try {      stopId=((CountsLoadCurveGraph)cg).getLinkId();      filename=stopId + "a" + PNG;      writeChartToKmz(filename,cg.getChart());      this.alightCountsLoadCurveGraphMap.put(stopId + "a",filename);    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  @Override public ExampleSet performPrediction(ExampleSet exampleSet,Attribute predictedLabelAttribute) throws OperatorException {  ExampleSet eSet=(ExampleSet)exampleSet.clone();  eSet=model.apply(eSet);  Iterator<Example> reader=eSet.iterator();  Iterator<Example> originalReader=exampleSet.iterator();switch (method) {case LOG:    while (originalReader.hasNext()) {      double functionValue=reader.next().getPredictedLabel();      if (zscale) {        functionValue=functionValue * stddev + mean;      }      Example example=originalReader.next();      example.setPredictedLabel(Math.exp(functionValue) - rank[0]);    }  break;case LOG_LINK:while (originalReader.hasNext()) {  double functionValue=reader.next().getPredictedLabel();  if (zscale) {    functionValue=functionValue * stddev + mean;  }  Example example=originalReader.next();  double powered=Math.exp(functionValue);  example.setPredictedLabel(powered / (1 + powered));}break;case EXP:while (originalReader.hasNext()) {double functionValue=reader.next().getPredictedLabel();if (zscale) {functionValue=functionValue * stddev + mean;}Example example=originalReader.next();example.setPredictedLabel(Math.log(functionValue));}break;case RANK:while (originalReader.hasNext()) {double predictedRank=reader.next().getPredictedLabel();if (zscale) {predictedRank=predictedRank * stddev + mean;}Example example=originalReader.next();if (interpolate) {int lower=(int)Math.round(Math.floor(predictedRank));int upper=(int)Math.round(Math.ceil(predictedRank));if (lower < 0) {lower=0;}if (lower >= rank.length) {lower=rank.length - 1;}if (upper < 0) {upper=0;}if (upper >= rank.length) {upper=rank.length - 1;}if (!(upper == lower)) {predictedRank=(upper - predictedRank) * rank[lower] + (predictedRank - lower) * rank[upper];} else {predictedRank=rank[lower];}} else {int thisRank=(int)Math.round(predictedRank);if (thisRank < 0) {thisRank=0;}if (thisRank >= rank.length) {thisRank=rank.length - 1;}predictedRank=rank[thisRank];}example.setPredictedLabel(predictedRank);}break;case NONE:if (zscale) {while (originalReader.hasNext()) {double functionValue=reader.next().getPredictedLabel() * stddev + mean;Example example=originalReader.next();example.setPredictedLabel(functionValue);}}break;default :break;}return exampleSet;}  }
class C{  public final void initColumnNumber(int columnNumber){  if (columnNumber <= 0)   throw new IllegalArgumentException(String.valueOf(columnNumber));  if (this.columnNumber > 0)   throw new IllegalStateException();  this.columnNumber=columnNumber;}  }
class C{  public final void testAddHelperText(){  CharSequence helperText="helperText";  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addHelperText(helperText);  assertEquals(1,passwordEditText.getHelperTexts().size());  assertEquals(helperText,passwordEditText.getHelperTexts().iterator().next());}  }
class C{  public static long lasttick(GeoTimeSerie gts){  if (isBucketized(gts)) {    return gts.lastbucket;  } else {    long lasttick=Long.MIN_VALUE;    if (gts.sorted && gts.values > 0) {      if (!gts.reversed) {        lasttick=gts.ticks[gts.values - 1];      } else {        lasttick=gts.ticks[0];      }    } else {      for (int i=0; i < gts.values; i++) {        if (gts.ticks[i] > lasttick) {          lasttick=gts.ticks[i];        }      }    }    return lasttick;  }}  }
class C{  public static String escapeInstanceIdentifier(String instanceIdentifier) throws Exception {  return URLEncoder.encode(instanceIdentifier,"UTF-8");}  }
class C{  public static int strcmp(char[] a,int startA,char[] b,int startB){  for (; a[startA] == b[startB]; startA++, startB++) {    if (a[startA] == 0) {      return 0;    }  }  return a[startA] - b[startB];}  }
class C{  public static int hash32(final int[] data,int length,int seed){  final int m=0x5bd1e995;  final int r=24;  int h=seed ^ length;  int length4=length;  for (int i=0; i < length4; i++) {    int k=(data[i] & 0xff);    k*=m;    k^=k >>> r;    k*=m;    h*=m;    h^=k;  }  h*=m;  h^=h >>> 13;  h*=m;  h^=h >>> 15;  return h;}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  private static int matchedUpto(String s1,String s2,String DELIM){  String s_1[]=s1.split(DELIM);  String s_2[]=s2.split(DELIM);  int i=0;  while (i < s_1.length && i < s_2.length && s_1[i].equals(s_2[i]))   i++;  return i;}  }
class C{  public boolean isChecked(){  return mChecked;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.552 -0400",hash_original_method="77CB7B14C0920E2315B4EAFBAD54E6D3",hash_generated_method="25A400C91FDB6DE244445ADCA4231F0E") public static Tailer create(File file,TailerListener listener,long delayMillis,boolean end,boolean reOpen,int bufSize){  Tailer tailer=new Tailer(file,listener,delayMillis,end,reOpen,bufSize);  Thread thread=new Thread(tailer);  thread.setDaemon(true);  thread.start();  return tailer;}  }
class C{  public static int toDimensionValue(char dimensionSymbol){switch (Character.toUpperCase(dimensionSymbol)) {case SYM_FALSE:    return FALSE;case SYM_TRUE:  return TRUE;case SYM_DONTCARE:return DONTCARE;case SYM_P:return P;case SYM_L:return L;case SYM_A:return A;}throw new IllegalArgumentException("Unknown dimension symbol: " + dimensionSymbol);}  }
class C{  public final void encode(DerOutputStream out) throws IOException {  encode(out,this.algid,getKey());}  }
class C{  public T caseLessOp_(LessOp_ object){  return null;}  }
class C{  public String[] validBaudRates(){  return new String[]{"fixed at 16600 baud"};}  }
class C{  public void showSecondaryMenu(){  mSlidingMenu.showSecondaryMenu();}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  mMenuText=new String[]{"Line chart","Scatter chart","Time chart","Bar chart"};  mMenuSummary=new String[]{"Line chart with randomly generated values","Scatter chart with randomly generated values","Time chart with randomly generated values","Bar chart with randomly generated values"};  setListAdapter(new SimpleAdapter(this,getListValues(),android.R.layout.simple_list_item_2,new String[]{IDemoChart.NAME,IDemoChart.DESC},new int[]{android.R.id.text1,android.R.id.text2}));}  }
class C{  @Override public void add(@NotNull File file,@Nullable Depth depth,boolean makeParents,boolean includeIgnored,boolean force,@Nullable ProgressTracker handler) throws VcsException {  try {    SVNWCClient client=myVcs.getSvnKitManager().createWCClient();    client.setEventHandler(toEventHandler(handler));    client.doAdd(file,force,false,makeParents,Depth.isRecursive(depth));  } catch (  SVNException e) {    throw new VcsException(e);  }}  }
class C{  private static boolean parseMsAcmCodecPrivate(ParsableByteArray buffer) throws ParserException {  try {    int formatTag=buffer.readLittleEndianUnsignedShort();    if (formatTag == WAVE_FORMAT_PCM) {      return true;    } else     if (formatTag == WAVE_FORMAT_EXTENSIBLE) {      buffer.setPosition(WAVE_FORMAT_SIZE + 6);      return buffer.readLong() == WAVE_SUBFORMAT_PCM.getMostSignificantBits() && buffer.readLong() == WAVE_SUBFORMAT_PCM.getLeastSignificantBits();    } else {      return false;    }  } catch (  ArrayIndexOutOfBoundsException e) {    throw new ParserException("Error parsing MS/ACM codec private");  }}  }
class C{  public IdentificadorBean(){}  }
class C{  protected void parseFont(byte[] font,int start,int len){  name2width=new HashMap<String,FlPoint>();  byte data[]=null;  if (isASCII(font,start)) {    byte[] bData=readASCII(font,start,start + len);    data=decrypt(bData,0,bData.length,55665,4);  } else {    data=decrypt(font,start,start + len,55665,4);  }  chr2name=readEncoding(font);  int lenIVLoc=findSlashName(data,"lenIV");  PSParser psp=new PSParser(data,0);  if (lenIVLoc < 0) {    lenIV=4;  } else {    psp.setLoc(lenIVLoc + 6);    lenIV=Integer.parseInt(psp.readThing());  }  password=4330;  int matrixloc=findSlashName(font,"FontMatrix");  if (matrixloc < 0) {    System.out.println("No FontMatrix!");    at=Utils.createMatrix(0.001f,0,0,0.001f,0,0);  } else {    PSParser psp2=new PSParser(font,matrixloc + 11);    float xf[]=psp2.readArray(6);    at=Utils.createMatrix(xf);  }  subrs=readSubrs(data);  name2outline=new TreeMap<String,Object>(readChars(data));}  }
class C{  @Override public void addedDatabase(final IDatabaseManager databaseManager,final IDatabase database){  for (int i=0; i < getChildCount(); i++) {    final CDatabaseNode child=(CDatabaseNode)getChildAt(i);    if (child.getObject() == database) {      throw new IllegalStateException("IE01177: Database should not be added twice");    }  }  add(new CDatabaseNode(getProjectTree(),CRootNode.this,database));  getTreeModel().nodeStructureChanged(CRootNode.this);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case EipPackage.METADATABLE__OWNED_METADATAS:    getOwnedMetadatas().clear();  return;}super.eUnset(featureID);}  }
class C{  public static double[] add(double[] input1,double[] input2) throws Exception {  if (input1.length != input2.length) {    throw new Exception("Lengths of arrays are not equal");  }  double[] returnValues=new double[input1.length];  for (int i=0; i < returnValues.length; i++) {    returnValues[i]=input1[i] + input2[i];  }  return returnValues;}  }
class C{  public static Path of(String path){  final String[] segments=splitToSegments(path);  if (segments.length == 0) {    return ROOT;  }  return new Path(path.charAt(0) == '/',normalizePathSegments(EMPTY_PATH,segments));}  }
class C{  public ParameterTypeProcessLocation(String key,String description,boolean allowEntries,boolean allowDirectories,boolean optional){  super(key,description,allowEntries,allowDirectories,optional);}  }
class C{  @Override public synchronized void connectionNotification(String eventName,Object source){}  }
class C{  void pop2(){  pop();  pop();}  }
class C{  public static List<String> toNCols(String s,int width){  List<String> ret=new ArrayList<>();  StringLineIterator i=new StringLineIterator(s);  while (i.hasMoreWords()) {    ret.add(i.nextLine(width));  }  return ret;}  }
class C{  public void handleSystemNotification(AlertDetails details){  if (!isServiceInitialised("handleSystemNotification")) {    return;  }  if (service.isManager()) {    String systemSource="DistributedSystem(" + service.getDistributedSystemMXBean().getDistributedSystemId() + ")";    Map<String,String> userData=prepareUserData(details);    Notification notification=new Notification(JMXNotificationType.SYSTEM_ALERT,systemSource,SequenceNumber.next(),details.getMsgTime().getTime(),details.getMsg());    notification.setUserData(userData);    service.handleNotification(notification);  }}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (!(obj instanceof URIName)) {    return false;  }  URIName other=(URIName)obj;  return uri.equals(other.getURI());}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  public long convertGeodeticToTransverseMercator(double Latitude,double Longitude){  double c;  double c2;  double c3;  double c5;  double c7;  double dlam;  double eta;  double eta2;  double eta3;  double eta4;  double s;  double sn;  double t;  double tan2;  double tan3;  double tan4;  double tan5;  double tan6;  double t1;  double t2;  double t3;  double t4;  double t5;  double t6;  double t7;  double t8;  double t9;  double tmd;  double tmdo;  long Error_Code=TRANMERC_NO_ERROR;  double temp_Origin;  double temp_Long;  if ((Latitude < -MAX_LAT) || (Latitude > MAX_LAT)) {    Error_Code|=TRANMERC_LAT_ERROR;  }  if (Longitude > PI)   Longitude-=(2 * PI);  if ((Longitude < (TranMerc_Origin_Long - MAX_DELTA_LONG)) || (Longitude > (TranMerc_Origin_Long + MAX_DELTA_LONG))) {    if (Longitude < 0)     temp_Long=Longitude + 2 * PI; else     temp_Long=Longitude;    if (TranMerc_Origin_Long < 0)     temp_Origin=TranMerc_Origin_Long + 2 * PI; else     temp_Origin=TranMerc_Origin_Long;    if ((temp_Long < (temp_Origin - MAX_DELTA_LONG)) || (temp_Long > (temp_Origin + MAX_DELTA_LONG)))     Error_Code|=TRANMERC_LON_ERROR;  }  if (Error_Code == TRANMERC_NO_ERROR) {    dlam=Longitude - TranMerc_Origin_Long;    if (Math.abs(dlam) > (9.0 * PI / 180)) {      Error_Code|=TRANMERC_LON_WARNING;    }    if (dlam > PI)     dlam-=(2 * PI);    if (dlam < -PI)     dlam+=(2 * PI);    if (Math.abs(dlam) < 2.e-10)     dlam=0.0;    s=Math.sin(Latitude);    c=Math.cos(Latitude);    c2=c * c;    c3=c2 * c;    c5=c3 * c2;    c7=c5 * c2;    t=Math.tan(Latitude);    tan2=t * t;    tan3=tan2 * t;    tan4=tan3 * t;    tan5=tan4 * t;    tan6=tan5 * t;    eta=TranMerc_ebs * c2;    eta2=eta * eta;    eta3=eta2 * eta;    eta4=eta3 * eta;    sn=TranMerc_a / Math.sqrt(1 - TranMerc_es * Math.pow(Math.sin(Latitude),2));    tmd=TranMerc_ap * Latitude - TranMerc_bp * Math.sin(2.0 * Latitude) + TranMerc_cp * Math.sin(4.0 * Latitude) - TranMerc_dp * Math.sin(6.0 * Latitude) + TranMerc_ep * Math.sin(8.0 * Latitude);    tmdo=TranMerc_ap * TranMerc_Origin_Lat - TranMerc_bp * Math.sin(2.0 * TranMerc_Origin_Lat) + TranMerc_cp * Math.sin(4.0 * TranMerc_Origin_Lat) - TranMerc_dp * Math.sin(6.0 * TranMerc_Origin_Lat) + TranMerc_ep * Math.sin(8.0 * TranMerc_Origin_Lat);    t1=(tmd - tmdo) * TranMerc_Scale_Factor;    t2=sn * s * c* TranMerc_Scale_Factor / 2.e0;    t3=sn * s * c3* TranMerc_Scale_Factor* (5.e0 - tan2 + 9.e0 * eta + 4.e0 * eta2) / 24.e0;    t4=sn * s * c5* TranMerc_Scale_Factor* (61.e0 - 58.e0 * tan2 + tan4 + 270.e0 * eta - 330.e0 * tan2 * eta + 445.e0 * eta2 + 324.e0 * eta3 - 680.e0 * tan2 * eta2 + 88.e0 * eta4 - 600.e0 * tan2 * eta3 - 192.e0 * tan2 * eta4) / 720.e0;    t5=sn * s * c7* TranMerc_Scale_Factor* (1385.e0 - 3111.e0 * tan2 + 543.e0 * tan4 - tan6) / 40320.e0;    Northing=TranMerc_False_Northing + t1 + Math.pow(dlam,2.e0) * t2 + Math.pow(dlam,4.e0) * t3 + Math.pow(dlam,6.e0) * t4 + Math.pow(dlam,8.e0) * t5;    t6=sn * c * TranMerc_Scale_Factor;    t7=sn * c3 * TranMerc_Scale_Factor* (1.e0 - tan2 + eta) / 6.e0;    t8=sn * c5 * TranMerc_Scale_Factor* (5.e0 - 18.e0 * tan2 + tan4 + 14.e0 * eta - 58.e0 * tan2 * eta + 13.e0 * eta2 + 4.e0 * eta3 - 64.e0 * tan2 * eta2 - 24.e0 * tan2 * eta3) / 120.e0;    t9=sn * c7 * TranMerc_Scale_Factor* (61.e0 - 479.e0 * tan2 + 179.e0 * tan4 - tan6) / 5040.e0;    Easting=TranMerc_False_Easting + dlam * t6 + Math.pow(dlam,3.e0) * t7 + Math.pow(dlam,5.e0) * t8 + Math.pow(dlam,7.e0) * t9;  }  return (Error_Code);}  }
class C{  private String stackTraceStr(final Throwable error){  if (error == null) {    return "";  }  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw);  error.printStackTrace(pw);  pw.close();  return sw.toString();}  }
class C{  @Override public void receive(ComplexBuffer buffer){  if (mFirstDecimatingStage != null) {    float[] samples=buffer.getSamples();    for (int x=0; x < samples.length; x+=2) {      mFirstDecimatingStage.receive(samples[x],samples[x + 1]);    }  }}  }
class C{  public PartitionedRegionRebalanceOp(PartitionedRegion region,boolean simulate,RebalanceDirector director,boolean replaceOfflineData,boolean isRebalance){  this(region,simulate,director,replaceOfflineData,isRebalance,new AtomicBoolean(),null);}  }
class C{  private void handleRegionDestroyed(HashMap<InternalDistributedMember,RegionCommitList> msgMap){  if (regionExceptions == null || regionExceptions.isEmpty()) {    return;  }  for (  Map.Entry<InternalDistributedMember,RegionCommitList> memberMap : msgMap.entrySet()) {    InternalDistributedMember member=memberMap.getKey();    RegionCommitList rcl=memberMap.getValue();    for (    RegionCommit region : rcl) {      Set<InternalDistributedMember> failedMembers=regionExceptions.get(region.r.getFullPath());      if (failedMembers != null && failedMembers.contains(member)) {        markMemberOffline(member,region);      }    }  }}  }
class C{  public FactoryConfigurationError(Exception e){  super(e.toString());  this.exception=e;}  }
class C{  public Address leader(){  return leader;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ScriptEngineBeanshell(){  i=new Interpreter();}  }
class C{  public GlanceApi(GlanceEndPointInfo endPointInfo,Client client){  endPoint=endPointInfo;  this.client=new GlanceRESTClient(client,endPointInfo.getGlanceToken());}  }
class C{  static void invokePropertyChange(Object listener,Object ev){  try {    propertyChangeMethod.invoke(listener,ev);  } catch (  IllegalAccessException x) {    throw new AssertionError(x);  }catch (  InvocationTargetException x) {    Throwable cause=x.getCause();    if (cause instanceof Error)     throw (Error)cause;    if (cause instanceof RuntimeException)     throw (RuntimeException)cause;    throw new AssertionError(x);  }}  }
class C{  protected CharacterClassRangeImpl(){  super();}  }
class C{  public static String toString(JSONArray ja) throws JSONException {  JSONObject jo=ja.optJSONObject(0);  if (jo != null) {    JSONArray names=jo.names();    if (names != null) {      return rowToString(names) + toString(names,ja);    }  }  return null;}  }
class C{  public static Supplier<Pair<Integer,JsonNode>> processJsonPatch(DataStore dataStore,String uri,String patchDoc,PatchRequestScope requestScope) throws IOException {  List<Patch> actions=requestScope.getMapper().readJsonApiPatchExtDoc(patchDoc);  JsonApiPatch processor=new JsonApiPatch(dataStore,actions,uri,requestScope);  return processor.processActions(requestScope);}  }
class C{  @Override public Collection<GridClientNode> nodes() throws GridClientException {  return applyFilter(projectionNodes(),NOT_DAEMON);}  }
class C{  private void emitReturnInsn(BasicType type){  int opcode;switch (type) {case I_TYPE:    opcode=Opcodes.IRETURN;  break;case J_TYPE:opcode=Opcodes.LRETURN;break;case F_TYPE:opcode=Opcodes.FRETURN;break;case D_TYPE:opcode=Opcodes.DRETURN;break;case L_TYPE:opcode=Opcodes.ARETURN;break;case V_TYPE:opcode=Opcodes.RETURN;break;default :throw new InternalError("unknown return type: " + type);}mv.visitInsn(opcode);}  }
class C{  private void checkActiveButtons(){  int[] indices=lstLoggingConfigurations.getSelectedIndices();  boolean selected=indices.length > 0;  cmdNew.setEnabled(selected);  cmdRename.setEnabled(selected);  cmdDelete.setEnabled(selected);  cmdView.setEnabled(selected);  cmdEdit.setEnabled(selected);  cmdUse.setEnabled(selected);}  }
class C{  public void touch(){  lastSeen=new Date();}  }
class C{  public SpecificationRunnerBuilder monitors(SpecificationRunnerMonitor... monitors){  for (  SpecificationRunnerMonitor monitor : monitors) {    compositeMonitor.add(monitor);  }  return this;}  }
class C{  @Override public Dimension maximumLayoutSize(Container parent){  return new Dimension(Integer.MAX_VALUE,Integer.MAX_VALUE);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public int enumerate(ThreadGroup[] groups){  return enumerate(groups,true);}  }
class C{  @Override protected void mouseClicked(int par1,int par2,int par3) throws IOException {  if (par2 >= 36 && par2 <= height - 57)   if (par1 >= width / 2 + 140 || par1 <= width / 2 - 126)   bindList.elementClicked(-1,false,0,0);  super.mouseClicked(par1,par2,par3);}  }
class C{  public static Vector toUpperCase(Vector v){  Vector result=new Vector();  for (Enumeration e=v.elements(); e.hasMoreElements(); ) {    String s=e.nextElement().toString();    result.add(s.toUpperCase());  }  return result;}  }
class C{  public static void main(String[] args){  ResinRun resin=new ResinRun(args);  resin.doRun();}  }
class C{  public static MediaType parse(String input){  checkNotNull(input);  Tokenizer tokenizer=new Tokenizer(input);  try {    String type=tokenizer.consumeToken(TOKEN_MATCHER);    tokenizer.consumeCharacter('/');    String subtype=tokenizer.consumeToken(TOKEN_MATCHER);    ImmutableListMultimap.Builder<String,String> parameters=ImmutableListMultimap.builder();    while (tokenizer.hasMore()) {      tokenizer.consumeCharacter(';');      tokenizer.consumeTokenIfPresent(LINEAR_WHITE_SPACE);      String attribute=tokenizer.consumeToken(TOKEN_MATCHER);      tokenizer.consumeCharacter('=');      final String value;      if ('"' == tokenizer.previewChar()) {        tokenizer.consumeCharacter('"');        StringBuilder valueBuilder=new StringBuilder();        while ('"' != tokenizer.previewChar()) {          if ('\\' == tokenizer.previewChar()) {            tokenizer.consumeCharacter('\\');            valueBuilder.append(tokenizer.consumeCharacter(ascii()));          } else {            valueBuilder.append(tokenizer.consumeToken(QUOTED_TEXT_MATCHER));          }        }        value=valueBuilder.toString();        tokenizer.consumeCharacter('"');      } else {        value=tokenizer.consumeToken(TOKEN_MATCHER);      }      parameters.put(attribute,value);    }    return create(type,subtype,parameters.build());  } catch (  IllegalStateException e) {    throw new IllegalArgumentException("Could not parse '" + input + "'",e);  }}  }
class C{  public Builder add(String fieldName,int value){  intent.putExtra(fieldName,value);  return this;}  }
class C{  public static boolean updatePreferredPools(Host host,Set<String> systemIds,DbClient dbClient,Map<String,String> poolToTypeMap){  StringMap existingPreferredPools=host.getPreferredPools();  List<String> poolsToRemove=new ArrayList<String>();  if (!existingPreferredPools.isEmpty()) {    Collection<URI> poolURIs=Collections2.transform(existingPreferredPools.keySet(),CommonTransformerFunctions.FCTN_STRING_TO_URI);    List<StoragePool> pools=dbClient.queryObject(StoragePool.class,poolURIs);    for (    StoragePool pool : pools) {      if (systemIds.contains(pool.getStorageDevice().toString())) {        String poolIdStr=pool.getId().toString();        if (!poolToTypeMap.containsKey(poolIdStr)) {          poolsToRemove.add(poolIdStr);        }      }    }  }  boolean needUpdateHost=false;  for (  String pool : poolsToRemove) {    existingPreferredPools.remove(pool);    needUpdateHost=true;  }  if (!poolToTypeMap.isEmpty()) {    existingPreferredPools.putAll(poolToTypeMap);    needUpdateHost=true;  }  return needUpdateHost;}  }
class C{  public int indexOf(Object obj){  return this.hlist.indexOf(obj);}  }
class C{  public final void splitTo(AbstractNode<E> newNode,List<E> sorting,int splitPoint){  assert (isLeaf() == newNode.isLeaf());  deleteAllEntries();  StringBuilder msg=LoggingConfiguration.DEBUG ? new StringBuilder("\n") : null;  for (int i=0; i < splitPoint; i++) {    addEntry(sorting.get(i));    if (msg != null) {      msg.append("n_").append(getPageID()).append(" ");      msg.append(sorting.get(i)).append("\n");    }  }  for (int i=splitPoint; i < sorting.size(); i++) {    newNode.addEntry(sorting.get(i));    if (msg != null) {      msg.append("n_").append(newNode.getPageID()).append(" ");      msg.append(sorting.get(i)).append("\n");    }  }  if (msg != null) {    Logging.getLogger(this.getClass().getName()).fine(msg.toString());  }}  }
class C{  public void startNumberList() throws ParseException {  as=new LinkedList();  a=new float[11];  count=0;  index=0;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public JobDataMap selectTriggerJobDataMap(Connection conn,String triggerName,String groupName) throws SQLException, ClassNotFoundException, IOException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    ps=conn.prepareStatement(rtp(SELECT_TRIGGER_DATA));    ps.setString(1,triggerName);    ps.setString(2,groupName);    rs=ps.executeQuery();    if (rs.next()) {      Map<?,?> map=null;      if (canUseProperties()) {        map=getMapFromProperties(rs);      } else {        map=(Map<?,?>)getObjectFromBlob(rs,COL_JOB_DATAMAP);      }      rs.close();      ps.close();      if (null != map) {        return new JobDataMap(map);      }    }  }  finally {    closeResultSet(rs);    closeStatement(ps);  }  return new JobDataMap();}  }
class C{  public void dispose(){  xblManager.setContentManager(shadowTree,null);  Iterator i=selectedNodes.entrySet().iterator();  while (i.hasNext()) {    Map.Entry e=(Map.Entry)i.next();    NodeList nl=(NodeList)e.getValue();    for (int j=0; j < nl.getLength(); j++) {      Node n=nl.item(j);      xblManager.getRecord(n).contentElement=null;    }  }  i=contentElementList.iterator();  while (i.hasNext()) {    NodeEventTarget n=(NodeEventTarget)i.next();    n.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",contentElementDomAttrModifiedEventListener,false);  }  contentElementList.clear();  selectedNodes.clear();  XBLEventSupport es=(XBLEventSupport)((AbstractNode)boundElement).getEventSupport();  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",domAttrModifiedEventListener,true);  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",domNodeInsertedEventListener,true);  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",domNodeRemovedEventListener,true);  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMSubtreeModified",domSubtreeModifiedEventListener,false);}  }
class C{  public void aliasPackage(final String name,final String pkgName){  if (packageAliasingMapper == null) {    throw new InitializationException("No " + PackageAliasingMapper.class.getName() + " available");  }  packageAliasingMapper.addPackageAlias(name,pkgName);}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute("processtemplate") @Valid ProcessTemplate processTemplate,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    processTemplate.setAddTS(DateConverter.stringToDate(processTemplate.getTableAddTS()));    if (processTemplate.getBatchPattern().isEmpty()) {      processTemplate.setBatchPattern(null);    }    com.wipro.ats.bdre.md.dao.jpa.ProcessTemplate jpaProcessTemplate=new com.wipro.ats.bdre.md.dao.jpa.ProcessTemplate();    jpaProcessTemplate.setProcessTemplateId(processTemplate.getProcessTemplateId());    jpaProcessTemplate.setDescription(processTemplate.getDescription());    jpaProcessTemplate.setProcessName(processTemplate.getProcessName());    jpaProcessTemplate.setBatchCutPattern(processTemplate.getBatchPattern());    jpaProcessTemplate.setAddTs(processTemplate.getAddTS());    if (processTemplate.getCanRecover() == null)     jpaProcessTemplate.setCanRecover(true); else     jpaProcessTemplate.setCanRecover(processTemplate.getCanRecover());    if (processTemplate.getDeleteFlag() == null)     jpaProcessTemplate.setDeleteFlag(false); else     jpaProcessTemplate.setDeleteFlag(processTemplate.getDeleteFlag());    jpaProcessTemplate.setNextProcessTemplateId(processTemplate.getNextProcessTemplateId());    ProcessType processType=new ProcessType();    processType.setProcessTypeId(processTemplate.getProcessTypeId());    jpaProcessTemplate.setProcessType(processType);    com.wipro.ats.bdre.md.dao.jpa.ProcessTemplate pt=new com.wipro.ats.bdre.md.dao.jpa.ProcessTemplate();    pt.setProcessTemplateId(processTemplate.getParentProcessId());    jpaProcessTemplate.setProcessTemplate(pt);    WorkflowType workflowType=new WorkflowType();    workflowType.setWorkflowId(processTemplate.getWorkflowId());    jpaProcessTemplate.setWorkflowType(workflowType);    BusDomain busDomain=new BusDomain();    busDomain.setBusDomainId(processTemplate.getBusDomainId());    jpaProcessTemplate.setBusDomain(busDomain);    processTemplateDAO.update(jpaProcessTemplate);    restWrapper=new RestWrapper(processTemplate,RestWrapper.OK);    LOGGER.info("Record with ID:" + processTemplate.getProcessTemplateId() + " updated in ProcessTemplate by User:"+ principal.getName()+ processTemplate);  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  private static int skipScope(JavaHeuristicScanner scanner,int start,int token){  int openToken=token;  int closeToken;switch (token) {case Symbols.TokenLPAREN:    closeToken=Symbols.TokenRPAREN;  break;case Symbols.TokenLBRACKET:closeToken=Symbols.TokenRBRACKET;break;case Symbols.TokenLBRACE:closeToken=Symbols.TokenRBRACE;break;default :Assert.isTrue(false);return -1;}int depth=1;int p=start;while (true) {int tok=scanner.nextToken(p,JavaHeuristicScanner.UNBOUND);p=scanner.getPosition();if (tok == openToken) {depth++;} else if (tok == closeToken) {depth--;if (depth == 0) return p + 1;} else if (tok == Symbols.TokenEOF) {return JavaHeuristicScanner.NOT_FOUND;}}}  }
class C{  public void goTo(final Label label){  mv.visitJumpInsn(Opcodes.GOTO,label);}  }
class C{  public String searchTipText(){  return "Set the search method. This search method is used " + "during the attribute selection phase before the classifier is " + "invoked.";}  }
class C{  private double[] initProbability(){  double[] prob=new double[langlist.size()];  if (priorMap != null) {    for (int i=0; i < prob.length; ++i)     prob[i]=priorMap[i];  } else {    for (int i=0; i < prob.length; ++i)     prob[i]=1.0 / langlist.size();  }  return prob;}  }
class C{  private static String full_process(String s,Boolean force_ascii){  if (force_ascii == null) {    force_ascii=false;  }  if (s == null) {    return "";  }  if (force_ascii)   s=asciidammit(s);  String string_out;  string_out=replace_non_letters_non_numbers_with_whitespace(s);  string_out=string_out.toLowerCase();  string_out=string_out.trim();  return string_out;}  }
class C{  private ComparableTimSort(Object[] a){  this.a=a;  int len=a.length;  @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) Object[] newArray=new Object[len < 2 * INITIAL_TMP_STORAGE_LENGTH ? len >>> 1 : INITIAL_TMP_STORAGE_LENGTH];  tmp=newArray;  int stackLen=(len < 120 ? 5 : len < 1542 ? 10 : len < 119151 ? 19 : 40);  runBase=new int[stackLen];  runLen=new int[stackLen];}  }
class C{  public void testDivideRoundHalfDownNeg(){  String a="-92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="-1.24390557635720517122423359799284E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_DOWN);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public static UiObjectMatcher withResourceId(String id,Class klass){  UiSelector uiSelector=new UiSelector().resourceId(id);  BySelector bySelector=By.res(id);  if (klass != null) {    uiSelector=uiSelector.className(klass);    bySelector.clazz(klass);  }  return new UiObjectMatcher(uiSelector,bySelector);}  }
class C{  public void addAttributeCertificates(Store attrStore) throws CMSException {  certs.addAll(CMSUtils.getAttributeCertificatesFromStore(attrStore));}  }
class C{  public boolean isOutputMethodSet(){  return m_outputMethodSet;}  }
class C{  public void testInvokeAll5() throws Throwable {  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    List<Callable<String>> l=new ArrayList<Callable<String>>();    l.add(new StringTask());    l.add(new StringTask());    List<Future<String>> futures=e.invokeAll(l);    assertEquals(2,futures.size());    for (    Future<String> future : futures)     assertSame(TEST_STRING,future.get());  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  public WidgetLocation(Widget widget,Widget reference){  internalSetWidget(widget);  internalSetReference(reference);  recalculate();}  }
class C{  private static void encode(float val,byte[] bytes,int offset){  NumericUtils.intToSortableBytes(NumericUtils.floatToSortableInt(val),bytes,offset);}  }
class C{  public void testHitchcock2(){  int sup[]=new int[]{7,4,5,3,1,2,6,5,5,4};  int dem[]=new int[]{1,3,5,2,9,8,7,1,2,4};  int d[][]=new int[][]{{8,6,4,6,5,7,8,9,5,8},{9,8,10,12,5,6,4,8,5,9},{11,8,8,10,8,8,8,10,8,10},{12,12,12,13,8,10,9,12,11,13},{10,7,8,9,5,4,5,7,8,9},{11,8,7,12,7,8,10,8,10,11},{11,9,9,11,12,10,10,10,8,13},{14,10,12,11,10,6,10,14,10,13},{13,10,9,14,8,10,10,9,8,11},{12,6,8,6,8,1,4,4,8,8}};  Transportation tr=new Transportation(sup,dem,d);  FordFulkerson ff=new FordFulkerson(tr,new ShortestPathArray(tr));  ff.compute();  assertEquals(42,tr.getFlow());  assertEquals(271,tr.getCost());}  }
class C{  public boolean isClosed(){  return closed;}  }
class C{  public void beginCompoundEdit(){}  }
class C{  private void collectHeadingsInfo(){  Map<Id,Departure> map=new HashMap<Id,Departure>(this.transitRoute.getDepartures().size() * 2);  for (  Departure departure : this.transitRoute.getDepartures().values()) {    if (departure.getVehicleId() != null) {      map.put(departure.getVehicleId(),departure);    }  }  this.headings=map;}  }
class C{  private void initExpandedPlaybackActions(boolean isPlaying){  mExpandedView.setOnClickPendingIntent(R.id.notification_expanded_base_play,retrievePlaybackActions(1));  mExpandedView.setOnClickPendingIntent(R.id.notification_expanded_base_next,retrievePlaybackActions(2));  mExpandedView.setOnClickPendingIntent(R.id.notification_expanded_base_previous,retrievePlaybackActions(3));  mExpandedView.setOnClickPendingIntent(R.id.notification_expanded_base_collapse,retrievePlaybackActions(4));  mExpandedView.setImageViewResource(R.id.notification_expanded_base_play,isPlaying ? R.drawable.btn_notification_playback_pause : R.drawable.btn_notification_playback_play);}  }
class C{  ExternalProblem(Socket socket) throws IOException {  this(socket.getInputStream(),socket.getOutputStream());}  }
class C{  public boolean isRecursive(){  return recursive;}  }
class C{  Item newFloat(final float value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(FLOAT).putInt(key.intVal);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  public boolean addVelocimacro(String name,Node macroBody,String argArray[],String sourceTemplate){  if (name == null || macroBody == null || argArray == null || sourceTemplate == null) {    logVMMessageWarn("Velocimacro : VM addition rejected : " + "programmer error : arg null");    return false;  }  if (!canAddVelocimacro(name,sourceTemplate)) {    return false;  }synchronized (this) {    vmManager.addVM(name,macroBody,argArray,sourceTemplate);  }  if (blather) {    String s="#" + name;    s+="(";    for (int i=0; i < argArray.length; i++) {      s+=" ";      s+=argArray[i];    }    s+=" ) : source = ";    s+=sourceTemplate;    logVMMessageInfo("Velocimacro : added new VM : " + s);  }  return true;}  }
class C{  public boolean write(Node nodeArg,LSOutput destination) throws LSException {  if (destination == null) {    String msg=Utils.messages.createMessage(MsgKey.ER_NO_OUTPUT_SPECIFIED,null);    if (fDOMErrorHandler != null) {      fDOMErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_NO_OUTPUT_SPECIFIED));    }    throw new LSException(LSException.SERIALIZE_ERR,msg);  }  if (nodeArg == null) {    return false;  }  Serializer serializer=fXMLSerializer;  serializer.reset();  if (nodeArg != fVisitedNode) {    String xmlVersion=getXMLVersion(nodeArg);    fEncoding=destination.getEncoding();    if (fEncoding == null) {      fEncoding=getInputEncoding(nodeArg);      fEncoding=fEncoding != null ? fEncoding : getXMLEncoding(nodeArg) == null ? "UTF-8" : getXMLEncoding(nodeArg);    }    if (!Encodings.isRecognizedEncoding(fEncoding)) {      String msg=Utils.messages.createMessage(MsgKey.ER_UNSUPPORTED_ENCODING,null);      if (fDOMErrorHandler != null) {        fDOMErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_UNSUPPORTED_ENCODING));      }      throw new LSException(LSException.SERIALIZE_ERR,msg);    }    serializer.getOutputFormat().setProperty("version",xmlVersion);    fDOMConfigProperties.setProperty(DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.S_XML_VERSION,xmlVersion);    fDOMConfigProperties.setProperty(DOMConstants.S_XSL_OUTPUT_ENCODING,fEncoding);    if ((nodeArg.getNodeType() != Node.DOCUMENT_NODE || nodeArg.getNodeType() != Node.ELEMENT_NODE || nodeArg.getNodeType() != Node.ENTITY_NODE) && ((fFeatures & XMLDECL) != 0)) {      fDOMConfigProperties.setProperty(DOMConstants.S_XSL_OUTPUT_OMIT_XML_DECL,DOMConstants.DOM3_DEFAULT_FALSE);    }    fVisitedNode=nodeArg;  }  fXMLSerializer.setOutputFormat(fDOMConfigProperties);  try {    Writer writer=destination.getCharacterStream();    if (writer == null) {      OutputStream outputStream=destination.getByteStream();      if (outputStream == null) {        String uri=destination.getSystemId();        if (uri == null) {          String msg=Utils.messages.createMessage(MsgKey.ER_NO_OUTPUT_SPECIFIED,null);          if (fDOMErrorHandler != null) {            fDOMErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_NO_OUTPUT_SPECIFIED));          }          throw new LSException(LSException.SERIALIZE_ERR,msg);        } else {          String absoluteURI=SystemIDResolver.getAbsoluteURI(uri);          URL url=new URL(absoluteURI);          OutputStream urlOutStream=null;          String protocol=url.getProtocol();          String host=url.getHost();          if (protocol.equalsIgnoreCase("file") && (host == null || host.length() == 0 || host.equals("localhost"))) {            urlOutStream=new FileOutputStream(getPathWithoutEscapes(url.getPath()));          } else {            URLConnection urlCon=url.openConnection();            urlCon.setDoInput(false);            urlCon.setDoOutput(true);            urlCon.setUseCaches(false);            urlCon.setAllowUserInteraction(false);            if (urlCon instanceof HttpURLConnection) {              HttpURLConnection httpCon=(HttpURLConnection)urlCon;              httpCon.setRequestMethod("PUT");            }            urlOutStream=urlCon.getOutputStream();          }          serializer.setOutputStream(urlOutStream);        }      } else {        serializer.setOutputStream(outputStream);      }    } else {      serializer.setWriter(writer);    }    if (fDOMSerializer == null) {      fDOMSerializer=(DOM3Serializer)serializer.asDOM3Serializer();    }    if (fDOMErrorHandler != null) {      fDOMSerializer.setErrorHandler(fDOMErrorHandler);    }    if (fSerializerFilter != null) {      fDOMSerializer.setNodeFilter(fSerializerFilter);    }    fDOMSerializer.setNewLine(fEndOfLine.toCharArray());    fDOMSerializer.serializeDOM3(nodeArg);  } catch (  UnsupportedEncodingException ue) {    String msg=Utils.messages.createMessage(MsgKey.ER_UNSUPPORTED_ENCODING,null);    if (fDOMErrorHandler != null) {      fDOMErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_UNSUPPORTED_ENCODING,ue));    }    throw (LSException)createLSException(LSException.SERIALIZE_ERR,ue).fillInStackTrace();  }catch (  LSException lse) {    throw lse;  }catch (  RuntimeException e) {    throw (LSException)createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();  }catch (  Exception e) {    if (fDOMErrorHandler != null) {      fDOMErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,e.getMessage(),null,e));    }    throw (LSException)createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();  }  return true;}  }
class C{  public static Bitmap resizeBitmap(Bitmap bitmap,int reqWidth,int reqHeight,CropImageView.RequestSizeOptions options){  try {    if (reqWidth > 0 && reqHeight > 0 && (options == CropImageView.RequestSizeOptions.RESIZE_FIT || options == CropImageView.RequestSizeOptions.RESIZE_INSIDE || options == CropImageView.RequestSizeOptions.RESIZE_EXACT)) {      Bitmap resized=null;      if (options == CropImageView.RequestSizeOptions.RESIZE_EXACT) {        resized=Bitmap.createScaledBitmap(bitmap,reqWidth,reqHeight,false);      } else {        int width=bitmap.getWidth();        int height=bitmap.getHeight();        float scale=Math.max(width / (float)reqWidth,height / (float)reqHeight);        if (scale > 1 || options == CropImageView.RequestSizeOptions.RESIZE_FIT) {          resized=Bitmap.createScaledBitmap(bitmap,(int)(width / scale),(int)(height / scale),false);        }      }      if (resized != null) {        if (resized != bitmap) {          bitmap.recycle();        }        return resized;      }    }  } catch (  Exception e) {    Log.w("AIC","Failed to resize cropped image, return bitmap before resize",e);  }  return bitmap;}  }
class C{  private void hasSubmittedInSeconds() throws InterruptedException {  this.submitTimes.addFirst(new Long(System.currentTimeMillis()));  if (this.submitTimes.size() == 5 && this.brokerModel.isConnected()) {    if ((this.submitTimes.getFirst() - this.submitTimes.getLast()) < (TIME_BETWEEN_SUBMIT * 1000)) {      _log.debug("hasSubmittedInSeconds 5 in: " + ((this.submitTimes.getFirst() - this.submitTimes.getLast()) / 1000d));      timerRunning=new AtomicInteger(0);      timer.start();synchronized (lockCoreUtilsTest) {        while (((this.submitTimes.getFirst() - this.submitTimes.getLast()) + timerRunning.get()) < (TIME_BETWEEN_SUBMIT * 1000) && !this.isCancelled()) {          _log.debug("Please wait " + (TIME_BETWEEN_SUBMIT - (timerRunning.get() / 1000)) + " seconds.");          lockCoreUtilsTest.wait();        }      }      timer.stop();    }    this.submitTimes.removeLast();  }}  }
class C{  public void forcePopulation(int x,int z){  try {    populateChunk(x,z,true);  } catch (  Throwable ex) {    GlowServer.logger.log(Level.SEVERE,"Error while populating chunk (" + x + ","+ z+ ")",ex);  }}  }
class C{  public SmsPortAddressedTextMessage(SmsPort destPort,SmsPort origPort,String msg,SmsAlphabet alphabet,SmsMsgClass messageClass){  super(destPort,origPort);  smsTextMessage_=new SmsTextMessage(msg,alphabet,messageClass);}  }
class C{  public void start(){  if (mNetworkStateListener == null) {    mNetworkStateListener=new NetworkStateListener();    mCtx.registerReceiver(mNetworkStateListener,new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));  }  if (mBatteryLevelListener == null) {    mBatteryLevelListener=new BatteryLevelListener();    mCtx.registerReceiver(mBatteryLevelListener,new IntentFilter(Intent.ACTION_BATTERY_CHANGED));  }}  }
class C{  public boolean isDynamic(){  if (widget instanceof MenuItem) {    boolean itemIsCheck=(widget.getStyle() & SWT.CHECK) != 0;    boolean actionIsCheck=getAction() != null && getAction().getStyle() == IAction.AS_CHECK_BOX;    boolean itemIsRadio=(widget.getStyle() & SWT.RADIO) != 0;    boolean actionIsRadio=getAction() != null && getAction().getStyle() == IAction.AS_RADIO_BUTTON;    return (itemIsCheck != actionIsCheck) || (itemIsRadio != actionIsRadio);  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:51.994 -0500",hash_original_method="7C7CB2A2E239FDA02FE8F80A9EE7770A",hash_generated_method="DFFDFDA6D89A1873E0163B25D5D32EAF") public static boolean putFloat(ContentResolver cr,String name,float value){  return putString(cr,name,Float.toString(value));}  }
class C{  @Override protected void dealFireDamage(int amount){  this.attackEntityFrom(DamageSource.inFire,amount);}  }
class C{  public boolean isStateActive(State state){switch (state) {case r_A:    return stateVector[0] == State.r_A;case r_B:  return stateVector[0].ordinal() >= State.r_B.ordinal() && stateVector[0].ordinal() <= State.r_B_r_F.ordinal();case r_B_r_E:return stateVector[0] == State.r_B_r_E;case r_B_r_F:return stateVector[0] == State.r_B_r_F;default :return false;}}  }
class C{  private void createMissingCompletionsByCategory(List<Long> dueChallenges,long categoryId){  List<Challenge> notCompletedYet=getUncompletedChallenges();  for (  Challenge challenge : notCompletedYet) {    if (categoryId == CategoryDataSource.CATEGORY_ID_ALL || challenge.getCategoryId() == categoryId) {      long userId=mUser.getId();      long challengeId=challenge.getId();      Completion completed;      completed=new Completion(null,1,new Date(0L),userId,challengeId);      mCompletionDataSource.create(completed);      dueChallenges.add(challenge.getId());    }  }}  }
class C{  @Override protected Position determineMainLabelPosition(DrawContext dc){  Iterable<? extends LatLon> locations=this.polygon.getLocations();  if (locations == null)   return null;  Iterator<? extends LatLon> iterator=locations.iterator();  LatLon locA=iterator.next();  LatLon northMost=locA;  while (iterator.hasNext()) {    LatLon locB=locA;    locA=iterator.next();    LatLon mid=LatLon.interpolateGreatCircle(0.5,locA,locB);    if (mid.latitude.compareTo(northMost.latitude) > 0) {      northMost=mid;    }  }  return new Position(northMost,0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:49.704 -0500",hash_original_method="0ACB85E19D1AFC6F8EA2F470F677C800",hash_generated_method="9393A5946E1A40C3CF22463056704523") public boolean isMwiDontStore(){  return mWrappedSmsMessage.isMwiDontStore();}  }
class C{  static void luBacksubstitution(double[] matrix1,int[] row_perm,double[] matrix2){  int i, ii, ip, j, k;  int rp;  int cv, rv;  rp=0;  for (k=0; k < 4; k++) {    cv=k;    ii=-1;    for (i=0; i < 4; i++) {      double sum;      ip=row_perm[rp + i];      sum=matrix2[cv + 4 * ip];      matrix2[cv + 4 * ip]=matrix2[cv + 4 * i];      if (ii >= 0) {        rv=i * 4;        for (j=ii; j <= i - 1; j++) {          sum-=matrix1[rv + j] * matrix2[cv + 4 * j];        }      } else       if (sum != 0.0) {        ii=i;      }      matrix2[cv + 4 * i]=sum;    }    rv=3 * 4;    matrix2[cv + 4 * 3]/=matrix1[rv + 3];    rv-=4;    matrix2[cv + 4 * 2]=(matrix2[cv + 4 * 2] - matrix1[rv + 3] * matrix2[cv + 4 * 3]) / matrix1[rv + 2];    rv-=4;    matrix2[cv + 4 * 1]=(matrix2[cv + 4 * 1] - matrix1[rv + 2] * matrix2[cv + 4 * 2] - matrix1[rv + 3] * matrix2[cv + 4 * 3]) / matrix1[rv + 1];    rv-=4;    matrix2[cv + 4 * 0]=(matrix2[cv + 4 * 0] - matrix1[rv + 1] * matrix2[cv + 4 * 1] - matrix1[rv + 2] * matrix2[cv + 4 * 2] - matrix1[rv + 3] * matrix2[cv + 4 * 3]) / matrix1[rv + 0];  }}  }
class C{  public void repaint(long tm,int x,int y,int width,int height){}  }
class C{  public void recycle(){  this.navigator=null;  this.action=WorldWind.NAVIGATOR_MOVED;  this.lastInputEvent=null;  pool.release(this);}  }
class C{  public void fill(byte val){  Arrays.fill(_data,0,_pos,val);}  }
class C{  public void pickImage(){  try {    super.pick();  } catch (  PickerException e) {    e.printStackTrace();    if (callback != null) {      callback.onError(e.getMessage());    }  }}  }
class C{  public static boolean isJavaArchive(IResource resource){  if (resource == null || (resource.getType() != IResource.FILE)) {    return false;  }  String name=resource.getName();  return Archive.isArchiveFileName(name);}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public static Format generateFormat(String codec){  return sSupportedCodexs.get(codec.toLowerCase());}  }
class C{  @SuppressWarnings("unchecked") private T readObject(Class<T> type,BufferInput<?> buffer,Serializer serializer){  try {    Constructor<?> constructor=constructorMap.get(type);    if (constructor == null) {      try {        constructor=type.getDeclaredConstructor();        constructor.setAccessible(true);        constructorMap.put(type,constructor);      } catch (      NoSuchMethodException e) {        throw new SerializationException("failed to instantiate reference: must provide a single argument constructor",e);      }    }    T object=(T)constructor.newInstance();    object.readObject(buffer,serializer);    return object;  } catch (  InstantiationException|IllegalAccessException|InvocationTargetException e) {    throw new SerializationException("failed to instantiate object: must provide a no argument constructor",e);  }}  }
class C{  private static void revertMenuIconColor(MenuItem menuitem){  Drawable drawable=menuitem.getIcon();  drawable.setColorFilter(new ColorMatrixColorFilter(REVERT_COLOR_MATRIX));}  }
class C{  public void addStream(String streamName,String sourceOperName,String sourcePortName,String targetOperName,String targetPortName){  OperatorMeta om=logicalPlan.getOperatorMeta(sourceOperName);  if (om == null) {    throw new ValidationException("Invalid operator name " + sourceOperName);  }  Operators.PortMappingDescriptor portMap=new Operators.PortMappingDescriptor();  Operators.describe(om.getOperator(),portMap);  PortContextPair<OutputPort<?>> sourcePort=portMap.outputPorts.get(sourcePortName);  if (sourcePort == null) {    throw new AssertionError(String.format("Invalid port %s (%s)",sourcePortName,om));  }  addStream(streamName,sourcePort.component,getInputPort(targetOperName,targetPortName));}  }
class C{  public void onSaveInstanceState(Bundle outState){  if (activityResultCallback != null) {    String serviceName=activityResultCallback.getServiceName();    outState.putString("callbackService",serviceName);  }}  }
class C{  public synchronized void cleanUp(){switch (this.awsClientType) {case CLOUD_WATCH:    this.cloudWatchClientCache.values().forEach(null);  this.cloudWatchClientCache.clear();break;case EC2:this.ec2ClientCache.values().forEach(null);this.ec2ClientCache.clear();break;case S3:this.s3ClientCache.values().forEach(null);this.s3ClientCache.clear();break;default :throw new UnsupportedOperationException("AWS client type not supported by this client manager");}cleanupExecutorCache();}  }
class C{  public void deleteToken(final URI targetUri){  BaseSecureStore.validateTargetUri(targetUri);  Trace.writeLine("SecretCache::deleteToken");  final String targetName=this.getTargetName(targetUri);synchronized (_cache) {    if (_cache.containsKey(targetName) && _cache.get(targetName) instanceof Token) {      _cache.remove(targetName);    }  }}  }
class C{  public void characters(final char chars[],final int start,final int length) throws org.xml.sax.SAXException {  if (length == 0 || (m_inEntityRef && !m_expandDTDEntities))   return;  m_docIsEmpty=false;  if (m_elemContext.m_startTagOpen) {    closeStartTag();    m_elemContext.m_startTagOpen=false;  } else   if (m_needToCallStartDocument) {    startDocumentInternal();  }  if (m_cdataStartCalled || m_elemContext.m_isCdataSection) {    cdata(chars,start,length);    return;  }  if (m_cdataTagOpen)   closeCDATA();  if (m_disableOutputEscapingStates.peekOrFalse() || (!m_escaping)) {    charactersRaw(chars,start,length);    if (m_tracer != null)     super.fireCharEvent(chars,start,length);    return;  }  if (m_elemContext.m_startTagOpen) {    closeStartTag();    m_elemContext.m_startTagOpen=false;  }  try {    int i;    int startClean;    final int end=start + length;    int lastDirtyCharProcessed=start - 1;    final Writer writer=m_writer;    boolean isAllWhitespace=true;    i=start;    while (i < end && isAllWhitespace) {      char ch1=chars[i];      if (m_charInfo.shouldMapTextChar(ch1)) {        writeOutCleanChars(chars,i,lastDirtyCharProcessed);        String outputStringForChar=m_charInfo.getOutputStringForChar(ch1);        writer.write(outputStringForChar);        isAllWhitespace=false;        lastDirtyCharProcessed=i;        i++;      } else {switch (ch1) {case CharInfo.S_SPACE:          i++;        break;case CharInfo.S_LINEFEED:      lastDirtyCharProcessed=processLineFeed(chars,i,lastDirtyCharProcessed,writer);    i++;  break;case CharInfo.S_CARRIAGERETURN:writeOutCleanChars(chars,i,lastDirtyCharProcessed);writer.write("&#13;");lastDirtyCharProcessed=i;i++;break;case CharInfo.S_HORIZONAL_TAB:i++;break;default :isAllWhitespace=false;break;}}}if (i < end || !isAllWhitespace) m_ispreserve=true;for (; i < end; i++) {char ch=chars[i];if (m_charInfo.shouldMapTextChar(ch)) {writeOutCleanChars(chars,i,lastDirtyCharProcessed);String outputStringForChar=m_charInfo.getOutputStringForChar(ch);writer.write(outputStringForChar);lastDirtyCharProcessed=i;} else {if (ch <= 0x1F) {switch (ch) {case CharInfo.S_HORIZONAL_TAB:break;case CharInfo.S_LINEFEED:lastDirtyCharProcessed=processLineFeed(chars,i,lastDirtyCharProcessed,writer);break;case CharInfo.S_CARRIAGERETURN:writeOutCleanChars(chars,i,lastDirtyCharProcessed);writer.write("&#13;");lastDirtyCharProcessed=i;break;default :writeOutCleanChars(chars,i,lastDirtyCharProcessed);writer.write("&#");writer.write(Integer.toString(ch));writer.write(';');lastDirtyCharProcessed=i;break;}} else if (ch < 0x7F) {} else if (ch <= 0x9F) {writeOutCleanChars(chars,i,lastDirtyCharProcessed);writer.write("&#");writer.write(Integer.toString(ch));writer.write(';');lastDirtyCharProcessed=i;} else if (ch == CharInfo.S_LINE_SEPARATOR) {writeOutCleanChars(chars,i,lastDirtyCharProcessed);writer.write("&#8232;");lastDirtyCharProcessed=i;} else if (m_encodingInfo.isInEncoding(ch)) {} else {writeOutCleanChars(chars,i,lastDirtyCharProcessed);writer.write("&#");writer.write(Integer.toString(ch));writer.write(';');lastDirtyCharProcessed=i;}}}startClean=lastDirtyCharProcessed + 1;if (i > startClean) {int lengthClean=i - startClean;m_writer.write(chars,startClean,lengthClean);}m_isprevtext=true;} catch (IOException e) {throw new SAXException(e);}if (m_tracer != null) super.fireCharEvent(chars,start,length);}  }
class C{  public LeastUsedWeightingStrategy(){  reset();}  }
class C{  @LogMessageDoc(level="ERROR",message="Tried to write OFFlowMod to {switch} but got {error}",explanation="An I/O error occured while trying to write a " + "static flow to a switch",recommendation=LogMessageDoc.CHECK_SWITCH) private void writeFlowModToSwitch(IOFSwitch sw,OFFlowMod flowMod){  sw.write(flowMod);  sw.flush();}  }
class C{  public String consumeToAny(String... seq){  int start=pos;  while (!isEmpty() && !matchesAny(seq)) {    pos++;  }  String data=queue.substring(start,pos);  return data;}  }
class C{  public SettingsGroupEvent(EventType type,SettingsGroup group){  if (type == null) {    throw new NullPointerException("EventType is null");  }  if (group == null) {    throw new NullPointerException("SettingsGroup is null");  }  this.type=type;  this.group=group;}  }
class C{  public boolean isIgnoreLinearDependent(){  return ignoreLinearDependent;}  }
class C{  public static boolean validateSexTemplateReference(CFlags flags,String sexFlag,String pedigreeFlag,String templateFlag){  return validateSexTemplateReference(flags,sexFlag,pedigreeFlag,(File)flags.getValue(templateFlag));}  }
class C{  @Override public boolean shouldPerform(OptOptions options){  return options.SSA_GCSE;}  }
class C{  public Message(byte[] b) throws IOException {  this(new DNSInput(b));}  }
class C{  @NotNull private static PyFunction createInitMethod(@NotNull final PyClass to){  final PyFunctionBuilder functionBuilder=new PyFunctionBuilder(PyNames.INIT);  functionBuilder.parameter(PyNames.CANONICAL_SELF);  final PyFunction function=functionBuilder.buildFunction(to.getProject(),LanguageLevel.forElement(to));  return PyClassRefactoringUtil.addMethods(to,true,function).get(0);}  }
class C{  public static FunctionTypeExpression createFunctionTypeExpression(TypeRef declaredThisType,List<TypeVariable> ownedTypeVars,List<TFormalParameter> fpars,TypeRef returnTypeRef){  final FunctionTypeExpression f=TypeRefsFactory.eINSTANCE.createFunctionTypeExpression();  if (declaredThisType != null) {    f.setDeclaredThisType(TypeUtils.copyIfContained(declaredThisType));  }  ownedTypeVars.stream().forEachOrdered(null);  fpars.stream().forEachOrdered(null);  f.setReturnTypeRef(TypeUtils.copyIfContained(returnTypeRef));  return f;}  }
class C{  public Rect(Rect r){  if (r == null) {    left=top=right=bottom=0;  } else {    left=r.left;    top=r.top;    right=r.right;    bottom=r.bottom;  }}  }
class C{  protected void onLoadMore(WXScrollView scrollView,int x,int y){  try {    String offset=getDomObject().getAttrs().getLoadMoreOffset();    if (TextUtils.isEmpty(offset)) {      return;    }    int contentH=scrollView.getChildAt(0).getHeight();    int scrollerH=scrollView.getHeight();    int offScreenY=contentH - y - scrollerH;    if (offScreenY < Integer.parseInt(offset)) {      if (WXEnvironment.isApkDebugable()) {        WXLogUtils.d("[WXScroller-onScroll] offScreenY :" + offScreenY);      }      if (mContentHeight != contentH) {        getInstance().fireEvent(getDomObject().getRef(),Constants.Event.LOADMORE);        mContentHeight=contentH;      }    }  } catch (  Exception e) {    WXLogUtils.d("[WXScroller-onScroll] ",e);  }}  }
class C{  private double innerproduct(double[] vec1,double[] vec2){  double sum=0;  for (int i=0; i < vec1.length; i++) {    sum+=vec1[i] * vec2[i];  }  return sum;}  }
class C{  private boolean looksLikeArrayInitializerIntro(){  nextToken();  if (fToken == Symbols.TokenEQUAL || skipBrackets()) {    return true;  }  return false;}  }
class C{  public void requestCertificate(boolean returnCertificate){  this.returnCertificate=returnCertificate;}  }
class C{  public void show(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);}  }
class C{  public static Environment newEnvironment(Environment env,Context ctx){  return new ContextEnvironment(env,ctx);}  }
class C{  protected static void safeMap(@NotNull final Map<IElementType,TextAttributesKey> map,@NotNull final TokenSet keys,@NotNull final TextAttributesKey value){  for (  final IElementType type : keys.getTypes()) {    safeMap(map,type,value);  }}  }
class C{  public static SpanQuery spanWithinQuery(SpanQuery big,SpanQuery little){  return spanQuery(new SpanWithinQuery(big,little));}  }
class C{  protected boolean endOfMessage(AbstractMRReply msg){  return true;}  }
class C{  public void endPrefixMapping(String prefix) throws SAXException {  if (DEBUG)   System.out.println("endPrefixMapping: prefix: " + prefix);  if (null == prefix)   prefix="";  int index=m_contextIndexes.peek() - 1;  do {    index=m_prefixMappings.indexOf(prefix,++index);  } while ((index >= 0) && ((index & 0x01) == 0x01));  if (index > -1) {    m_prefixMappings.setElementAt("%@$#^@#",index);    m_prefixMappings.setElementAt("%@$#^@#",index + 1);  }}  }
class C{  public boolean onUnequipped(){  return false;}  }
class C{  public JSONObject put(String key,int value) throws JSONException {  this.put(key,new Integer(value));  return this;}  }
class C{  @Override public String toString(){  if ((cachedString == null) || refreshCache) {    final StringBuilder buf=new StringBuilder();    final Iterator<String> staticIt=staticParts.iterator();    final Iterator<String> paramIt=parameterPositions.iterator();    while (staticIt.hasNext()) {      buf.append(staticIt.next());      if (paramIt.hasNext()) {        buf.append(parameter.get(paramIt.next()));      }    }    cachedString=buf.toString();  }  return cachedString;}  }
class C{  public static WebXml parseWebXmlFile(String webXmlFileLocation,boolean validate) throws IOException, SAXException {  Assert.notEmpty("webXmlFileLocation",webXmlFileLocation);  WebXml result=webXmlCache.get(webXmlFileLocation);  if (result == null) {    File file=new File(webXmlFileLocation);    if (!file.exists()) {      throw new IllegalArgumentException(webXmlFileLocation + " does not exist.");    }    boolean namespaceAware=true;    InputStream is=new FileInputStream(file);    result=new WebXml();    LocalResolver lr=new LocalResolver(new DefaultHandler());    ErrorHandler handler=new LocalErrorHandler(webXmlFileLocation,lr);    Digester digester=DigesterFactory.newDigester(validate,namespaceAware,new WebRuleSet(),false);    digester.getParser();    digester.push(result);    digester.setErrorHandler(handler);    try {      digester.parse(new InputSource(is));    }  finally {      digester.reset();      if (is != null) {        try {          is.close();        } catch (        Throwable t) {          Debug.logError(t,"Exception thrown while parsing " + webXmlFileLocation + ": ",module);        }      }    }    result=webXmlCache.putIfAbsentAndGet(webXmlFileLocation,result);  }  return result;}  }
class C{  private void expandWellKnownMimeType(){  if (mStringValue == null) {    int binaryContentType=(int)mUnsigned32bit;    mStringValue=WELL_KNOWN_MIME_TYPES.get(binaryContentType);  } else {    mUnsigned32bit=-1;  }}  }
class C{  public void removeSelectionRow(int row){  int[] rows={row};  removeSelectionRows(rows);}  }
class C{  public Builder<T> loadFactor(final int loadFactor){  this.loadFactor=loadFactor;  return this;}  }
class C{  public static Geometry bufferOp(Geometry g,double distance){  BufferOp gBuf=new BufferOp(g);  Geometry geomBuf=gBuf.getResultGeometry(distance);  return geomBuf;}  }
class C{  public void destroy(){  cacheUpdatePeriodListeners.clear();  modelUpdatePeriodListeners.clear();}  }
class C{  public static final int green(int color){  return (color >> 8) & 0xFF;}  }
class C{  public static void sort(short[] array,int start,int end){  if (array == null) {    throw new NullPointerException();  }  checkBounds(array.length,start,end);  sort(start,end,array);}  }
class C{  public EmbeddedJMSResource(Configuration configuration,JMSConfiguration jmsConfiguration){  this.configuration=configuration;  this.jmsConfiguration=jmsConfiguration;  init();}  }
class C{  public static File buildFile(File savePath,String name){  String baseName=FilenameUtils.getBaseName(name);  String ext=FilenameUtils.getExtension(name);  File f=new File(savePath,name);  int i=1;  while (f.exists() && i < Integer.MAX_VALUE) {    f=new File(savePath,baseName + " (" + i+ ")."+ ext);    i++;  }  return f;}  }
class C{  private void initMap(AccessProfile accessProfile){  _keyMap.put(Constants._computerSystem,CimObjectPathCreator.createInstance(Constants._cimSystem,accessProfile.getInteropNamespace()));  _keyMap.put(Constants._cimClient,_wbemClient);  _keyMap.put(Constants._serialID,accessProfile.getserialID());  _keyMap.put(Constants.dbClient,_dbClient);  if (_networkDeviceController != null) {    _keyMap.put(Constants.networkDeviceController,_networkDeviceController);  }  _keyMap.put(Constants._Volumes,new LinkedList<CIMObjectPath>());  _keyMap.put(Constants._nativeGUIDs,Sets.newHashSet());  _keyMap.put(Constants._Stats,new LinkedList<Stat>());  _keyMap.put(Constants._InteropNamespace,accessProfile.getInteropNamespace());  _keyMap.put(Constants._debug,debug);  _keyMap.put(Constants.ACCESSPROFILE,accessProfile);  List<String> manifestCollectionList=new LinkedList<String>();  manifestCollectionList.add(Constants.MANIFEST_COLLECTION_NAME);  _keyMap.put(Constants.MANIFEST_EXISTS,manifestCollectionList);  _keyMap.put(Constants.PROPS,accessProfile.getProps());  _keyMap.put(Constants._storagePool,CimObjectPathCreator.createInstance(Constants._cimPool,accessProfile.getInteropNamespace()));  _keyMap.put(Constants.STORAGEPOOLS,new LinkedList<CIMObjectPath>());}  }
class C{  public void addSymbolicName(String symName,String revisionNumber){  if (symNamesBuffer == null) {    symNamesBuffer=new StringBuilder();  }  symNamesBuffer.append(symName);  symNamesBuffer.append(' ');  symNamesBuffer.append(revisionNumber);  symNamesBuffer.append('\n');}  }
class C{  public Binding(String name,Object obj,boolean isRelative){  super(name,null,isRelative);  this.boundObj=obj;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.YIELD_EXPRESSION__EXPRESSION:    setExpression((Expression)newValue);  return;case N4JSPackage.YIELD_EXPRESSION__MANY:setMany((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static void printAllPosts(BloggerService myService) throws ServiceException, IOException {  URL feedUrl=new URL(feedUri + POSTS_FEED_URI_SUFFIX);  Feed resultFeed=myService.getFeed(feedUrl,Feed.class);  System.out.println(resultFeed.getTitle().getPlainText());  for (int i=0; i < resultFeed.getEntries().size(); i++) {    Entry entry=resultFeed.getEntries().get(i);    System.out.println("\t" + entry.getTitle().getPlainText());  }  System.out.println();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static String arrayToList(String[] array,String delimiter){  if (ArrayUtil.isEmpty(array))   return "";  StringBuilder sb=new StringBuilder(array[0]);  if (delimiter.length() == 1) {    char c=delimiter.charAt(0);    for (int i=1; i < array.length; i++) {      sb.append(c);      sb.append(array[i]);    }  } else {    for (int i=1; i < array.length; i++) {      sb.append(delimiter);      sb.append(array[i]);    }  }  return sb.toString();}  }
class C{  public static byte readByteWithPreamble(String preamble,final EvolutionState state,final LineNumberReader reader){  DecodeReturn d=checkPreamble(preamble,state,reader);  Code.decode(d);  if (d.type != DecodeReturn.T_BYTE)   state.output.fatal("Line " + d.lineNumber + " has no byte after preamble '"+ preamble+ "'\n-->"+ d.data);  return (byte)(d.l);}  }
class C{  private boolean estimateNumberChangeRequired(final AbstractEstimate entity,final CFinancialYear financialYear){  final String[] estNum=entity.getEstimateNumber().split("/");  if (estNum[0].equals(entity.getExecutingDepartment().getCode()) && estNum[1].equals(financialYear.getFinYearRange()))   return false;  return true;}  }
class C{  public ProcessingChain(String name,ChannelType channelType){  mName=name;  mChannelState=new ChannelState(channelType);  addModule(mChannelState);  mCallEventModel=new CallEventModel();  addCallEventListener(mCallEventModel);}  }
class C{  private void assignRandomUpperTriangularMatrix(int n,SecureRandom sr){  numRows=n;  numColumns=n;  length=(n + 31) >>> 5;  matrix=new int[numRows][length];  int rest=n & 0x1f;  int help;  if (rest == 0) {    help=0xffffffff;  } else {    help=(1 << rest) - 1;  }  for (int i=0; i < numRows; i++) {    int q=i >>> 5;    int r=i & 0x1f;    int s=r;    r=1 << r;    for (int j=0; j < q; j++) {      matrix[i][j]=0;    }    matrix[i][q]=(sr.nextInt() << s) | r;    for (int j=q + 1; j < length; j++) {      matrix[i][j]=sr.nextInt();    }    matrix[i][length - 1]&=help;  }}  }
class C{  static long multiplyFraction(long x,long numerator,long denominator){  if (x == 1) {    return numerator / denominator;  }  long commonDivisor=gcd(x,denominator);  x/=commonDivisor;  denominator/=commonDivisor;  return x * (numerator / denominator);}  }
class C{  private static void doSort(float[] a,int left,int right,float[] work,int workBase,int workLen){  if (right - left < QUICKSORT_THRESHOLD) {    sort(a,left,right,true);    return;  }  int[] run=new int[MAX_RUN_COUNT + 1];  int count=0;  run[0]=left;  for (int k=left; k < right; run[count]=k) {    while (k < right && a[k] == a[k + 1])     k++;    if (k == right)     break;    if (a[k] < a[k + 1]) {      while (++k <= right && a[k - 1] <= a[k])       ;    } else     if (a[k] > a[k + 1]) {      while (++k <= right && a[k - 1] >= a[k])       ;      for (int lo=run[count] - 1, hi=k; ++lo < --hi; ) {        float t=a[lo];        a[lo]=a[hi];        a[hi]=t;      }    }    if (run[count] > left && a[run[count]] >= a[run[count] - 1]) {      count--;    }    if (++count == MAX_RUN_COUNT) {      sort(a,left,right,true);      return;    }  }  if (count == 0) {    return;  } else   if (count == 1 && run[count] > right) {    return;  }  right++;  if (run[count] < right) {    run[++count]=right;  }  byte odd=0;  for (int n=1; (n<<=1) < count; odd^=1)   ;  float[] b;  int ao, bo;  int blen=right - left;  if (work == null || workLen < blen || workBase + blen > work.length) {    work=new float[blen];    workBase=0;  }  if (odd == 0) {    System.arraycopy(a,left,work,workBase,blen);    b=a;    bo=0;    a=work;    ao=workBase - left;  } else {    b=work;    ao=0;    bo=workBase - left;  }  for (int last; count > 1; count=last) {    for (int k=(last=0) + 2; k <= count; k+=2) {      int hi=run[k], mi=run[k - 1];      for (int i=run[k - 2], p=i, q=mi; i < hi; ++i) {        if (q >= hi || p < mi && a[p + ao] <= a[q + ao]) {          b[i + bo]=a[p++ + ao];        } else {          b[i + bo]=a[q++ + ao];        }      }      run[++last]=hi;    }    if ((count & 1) != 0) {      for (int i=right, lo=run[count - 1]; --i >= lo; b[i + bo]=a[i + ao])       ;      run[++last]=right;    }    float[] t=a;    a=b;    b=t;    int o=ao;    ao=bo;    bo=o;  }}  }
class C{  private Object js_eval(Context cx,Scriptable scope,Object[] args){  Scriptable global=ScriptableObject.getTopLevelScope(scope);  return ScriptRuntime.evalSpecial(cx,global,global,args,"eval code",1);}  }
class C{  public EnvironmentStream(OutputStream defaultStream){  _environmentStream=new EnvironmentLocal<>();  _environmentStream.setGlobal(defaultStream);}  }
class C{  @Override public void addPixels(int[] pixels,int offset,int count){  for (int i=0; i < count; i++) {    insertColor(pixels[i + offset]);    if (colors > reduceColors)     reduceTree(reduceColors);  }}  }
class C{  public boolean tasks(){  log.info("Starting WifiDirectSpeaker tasks (mSeekingDesired:" + mSeekingDesired + ")");  WifiManager wifiManager=(WifiManager)mContext.getSystemService(Context.WIFI_SERVICE);  if (mSeekingDesired && wifiManager.isWifiEnabled()) {    seekPeers();  } else {    stopSeekingPeers();    return false;  }  log.info("finished WifiDirectSpeaker");  return true;}  }
class C{  public OMScalingIcon(double centerLat,double centerLon,ImageIcon ii){  this(centerLat,centerLon,ii.getImage());}  }
class C{  public void testDynIntMissingFunction() throws Exception {  checkSortMissingFunction("dyn_intdv","-1","4");}  }
class C{  public final void add(double scalar){  m00+=scalar;  m01+=scalar;  m02+=scalar;  m10+=scalar;  m11+=scalar;  m12+=scalar;  m20+=scalar;  m21+=scalar;  m22+=scalar;}  }
class C{  public static OnInsertSplitStreamClause create(){  return new OnInsertSplitStreamClause(true,new ArrayList<OnInsertSplitStreamItem>());}  }
class C{  public void parse(Reader in,ContentHandler contentHandler,boolean isResume) throws IOException, ParseException {  if (!isResume) {    reset(in);    handlerStatusStack=new LinkedList();  } else {    if (handlerStatusStack == null) {      isResume=false;      reset(in);      handlerStatusStack=new LinkedList();    }  }  LinkedList statusStack=handlerStatusStack;  try {    do {switch (status) {case S_INIT:        contentHandler.startJSON();      nextToken();switch (token.type) {case Yytoken.TYPE_VALUE:      status=S_IN_FINISHED_VALUE;    statusStack.addFirst(new Integer(status));  if (!contentHandler.primitive(token.value))   return;break;case Yytoken.TYPE_LEFT_BRACE:status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));if (!contentHandler.startObject()) return;break;case Yytoken.TYPE_LEFT_SQUARE:status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));if (!contentHandler.startArray()) return;break;default :status=S_IN_ERROR;}break;case S_IN_FINISHED_VALUE:nextToken();if (token.type == Yytoken.TYPE_EOF) {contentHandler.endJSON();status=S_END;return;} else {status=S_IN_ERROR;throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}case S_IN_OBJECT:nextToken();switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:if (token.value instanceof String) {String key=(String)token.value;status=S_PASSED_PAIR_KEY;statusStack.addFirst(new Integer(status));if (!contentHandler.startObjectEntry(key)) return;} else {status=S_IN_ERROR;}break;case Yytoken.TYPE_RIGHT_BRACE:if (statusStack.size() > 1) {statusStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}if (!contentHandler.endObject()) return;break;default :status=S_IN_ERROR;break;}break;case S_PASSED_PAIR_KEY:nextToken();switch (token.type) {case Yytoken.TYPE_COLON:break;case Yytoken.TYPE_VALUE:statusStack.removeFirst();status=peekStatus(statusStack);if (!contentHandler.primitive(token.value)) return;if (!contentHandler.endObjectEntry()) return;break;case Yytoken.TYPE_LEFT_SQUARE:statusStack.removeFirst();statusStack.addFirst(new Integer(S_IN_PAIR_VALUE));status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));if (!contentHandler.startArray()) return;break;case Yytoken.TYPE_LEFT_BRACE:statusStack.removeFirst();statusStack.addFirst(new Integer(S_IN_PAIR_VALUE));status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));if (!contentHandler.startObject()) return;break;default :status=S_IN_ERROR;}break;case S_IN_PAIR_VALUE:statusStack.removeFirst();status=peekStatus(statusStack);if (!contentHandler.endObjectEntry()) return;break;case S_IN_ARRAY:nextToken();switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:if (!contentHandler.primitive(token.value)) return;break;case Yytoken.TYPE_RIGHT_SQUARE:if (statusStack.size() > 1) {statusStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}if (!contentHandler.endArray()) return;break;case Yytoken.TYPE_LEFT_BRACE:status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));if (!contentHandler.startObject()) return;break;case Yytoken.TYPE_LEFT_SQUARE:status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));if (!contentHandler.startArray()) return;break;default :status=S_IN_ERROR;}break;case S_END:return;case S_IN_ERROR:throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}if (status == S_IN_ERROR) {throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}} while (token.type != Yytoken.TYPE_EOF);} catch (IOException ie) {status=S_IN_ERROR;throw ie;}catch (ParseException pe) {status=S_IN_ERROR;throw pe;}catch (RuntimeException re) {status=S_IN_ERROR;throw re;}catch (Error e) {status=S_IN_ERROR;throw e;}status=S_IN_ERROR;throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}  }
class C{  public void attributeDecl(String arg0,String arg1,String arg2,String arg3,String arg4) throws SAXException {  m_handler.attributeDecl(arg0,arg1,arg2,arg3,arg4);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @Override public void write(final byte[] b,final int off,final int len){  if (off < 0 || off > b.length || len < 0 || off + len > b.length || off + len < 0) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }synchronized (this) {    int newcount=this.count + len;    int remaining=len;    int inBufferPos=this.count - this.filledBufferSum;    while (remaining > 0) {      int part=Math.min(remaining,this.currentBuffer.length - inBufferPos);      System.arraycopy(b,off + len - remaining,this.currentBuffer,inBufferPos,part);      remaining-=part;      if (remaining > 0) {        this.needNewBuffer(newcount);        inBufferPos=0;      }    }    this.count=newcount;  }}  }
class C{  public CustomSwitchPreference(Context context,AttributeSet attrs){  super(context,attrs);}  }
class C{  private int[] versionParts(String version){  String[] parts=version.split("\\.");  int[] p=new int[3];  for (int i=0; i < 3; i++) {    int pi;    if (i < parts.length) {      p[i]=Integer.parseInt(parts[i]);    } else {      p[i]=-1;    }  }  return p;}  }
class C{  protected void checkLabel(Environment env,Context ctx){  if (labels != null) {    loop:     for (int i=0; i < labels.length; i++) {      for (int j=i + 1; j < labels.length; j++) {        if (labels[i] == labels[j]) {          env.error(where,"nested.duplicate.label",labels[i]);          continue loop;        }      }      CheckContext destCtx=(CheckContext)ctx.getLabelContext(labels[i]);      if (destCtx != null) {        if (destCtx.frameNumber == ctx.frameNumber) {          env.error(where,"nested.duplicate.label",labels[i]);        }      }    }  }}  }
class C{  public SIPHeader parse() throws ParseException {  headerName(TokenTypes.PROXY_AUTHORIZATION);  ProxyAuthorization proxyAuth=new ProxyAuthorization();  super.parse(proxyAuth);  return proxyAuth;}  }
class C{  @Override public void close(){  try {    this.table.close();  } catch (  IOException ex) {    LOG.error("Unable to close connection to HBase table " + tableName,ex);  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MDistributionRunLine[").append(get_ID()).append("-").append(getInfo()).append("]");  return sb.toString();}  }
class C{  private void loadMetadata(){  Path f=backupPath.resolve(META_FILE);  try (BufferedReader reader=Files.newBufferedReader(f,CHARSET)){    String line=reader.readLine();    String[] split=line.split(" ");    number=Integer.parseInt(split[0]);    lastBackup=Long.parseLong(split[1]);  } catch (  IOException ex) {    LOGGER.warning("No backup meta file, using default. " + ex);  }catch (  NumberFormatException|ArrayIndexOutOfBoundsException ex) {    LOGGER.warning("Backup meta file invalid format, using default. " + ex);    number=0;    lastBackup=0;  }}  }
class C{  public void clearGrantor(long grantorVersion,String serviceName,int dlsSerialNumber,InternalDistributedMember oldGrantor,boolean locksHeld){synchronized (this) {    if (grantorVersion == -1) {      return;    }    GrantorInfo currentGI=(GrantorInfo)this.nameToInfo.get(serviceName);    if (currentGI == null) {      return;    }    if (currentGI.getVersionId() != grantorVersion || currentGI.getSerialNumber() != dlsSerialNumber) {      return;    }    GrantorInfo gi;    if (locksHeld) {      gi=(GrantorInfo)this.nameToInfo.put(serviceName,new GrantorInfo(null,currentGI.getVersionId(),0,true));    } else {      gi=(GrantorInfo)this.nameToInfo.remove(serviceName);    }    if (gi != null) {      InternalDistributedMember currentGrantor=gi.getId();      if (!oldGrantor.equals(currentGrantor)) {        this.nameToInfo.put(serviceName,gi);        if (logger.isTraceEnabled(LogMarker.DLS)) {          logger.trace(LogMarker.DLS,"Elder not making {} grantor shutdown for {} by {} because the current grantor is {}",(locksHeld ? "unclean" : "clean"),serviceName,oldGrantor,currentGrantor);        }      } else {        if (logger.isTraceEnabled(LogMarker.DLS)) {          logger.trace(LogMarker.DLS,"Elder making {} grantor shutdown for {} by {}",(locksHeld ? "unclean" : "clean"),serviceName,oldGrantor);        }      }    }  }}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  trimToFileCount();  journalWriter.close();  journalWriter=null;}  }
class C{  public SitemapsNewsEntry(BaseEntry<?> sourceEntry){  super(sourceEntry);  getCategories().add(CATEGORY);}  }
class C{  @Deprecated public void onSuccess(int statusCode,String content){  onSuccess(content);}  }
class C{  private boolean writeReference(Object value,NodeMap node){  String name=get(value);  int size=size();  if (name != null) {    node.put(refer,name);    return true;  }  String unique=String.valueOf(size);  node.put(mark,unique);  put(value,unique);  return false;}  }
class C{  void init(int opmode,Key key,AlgorithmParameterSpec params,SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException {  if (((opmode == Cipher.DECRYPT_MODE) || (opmode == Cipher.UNWRAP_MODE)) && (params == null)) {    throw new InvalidAlgorithmParameterException("Parameters " + "missing");  }  if ((key == null) || (key.getEncoded() == null) || !(key.getAlgorithm().regionMatches(true,0,"PBE",0,3))) {    throw new InvalidKeyException("Missing password");  }  if (params == null) {    salt=new byte[8];    random.nextBytes(salt);  } else {    if (!(params instanceof PBEParameterSpec)) {      throw new InvalidAlgorithmParameterException("Wrong parameter type: PBE expected");    }    salt=((PBEParameterSpec)params).getSalt();    if (salt.length != 8) {      throw new InvalidAlgorithmParameterException("Salt must be 8 bytes long");    }    iCount=((PBEParameterSpec)params).getIterationCount();    if (iCount <= 0) {      throw new InvalidAlgorithmParameterException("IterationCount must be a positive number");    }  }  byte[] derivedKey=deriveCipherKey(key);  SecretKeySpec cipherKey=new SecretKeySpec(derivedKey,0,derivedKey.length - 8,algo);  IvParameterSpec ivSpec=new IvParameterSpec(derivedKey,derivedKey.length - 8,8);  cipher.init(opmode,cipherKey,ivSpec,random);}  }
class C{  public synchronized void importProperties(Iterable<Map.Entry<String,String>> propSrc){  for (  CategoryConfig catConf : m_configs.values()) {    catConf.importProperties(propSrc);  }}  }
class C{  protected UnknownProtocolException(final IScope scope,final Integer message){  super(scope,"Unknown protocol: " + message);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  protected void generateFields(){  for (Iterator<Element> iterator=mElements.iterator(); iterator.hasNext(); ) {    Element element=iterator.next();    if (!element.used) {      iterator.remove();      continue;    }    PsiField[] fields=mClass.getFields();    boolean duplicateField=false;    for (    PsiField field : fields) {      String name=field.getName();      if (name != null && name.equals(element.getFieldName())) {        duplicateField=true;        break;      }    }    if (duplicateField) {      iterator.remove();      continue;    }    mClass.add(mFactory.createFieldFromText("private " + element.name + " "+ element.getFieldName()+ ";",mClass));  }}  }
class C{  public JoinQuery(JavaSparkContext sc,PointRDD pointRDD,PolygonRDD polygonRDDUnpartitioned){  if (pointRDD.gridPointRDD == null) {    throw new NullPointerException("Need to do spatial partitioning first, gridedSRDD is null");  }  this.polygonRDD=polygonRDDUnpartitioned;  this.polygonRDD.rawPolygonRDD=polygonRDDUnpartitioned.rawPolygonRDD;  this.polygonRDD.SpatialPartition(pointRDD.grids);  this.sc=sc;}  }
class C{  private static void argsReader(String[] args){  R.initResources();  S.initTempFolders();  boolean zipalign=false;  boolean sign=false;  boolean createZip=false;  boolean adbExtracted=false;  File systemFolder;  if (args.length == 2) {    String source=args[0];    if (source.equals("e")) {      adbExtracted=true;      systemFolder=new File(S.EXTRACTED_SYSTEMS.getAbsolutePath() + File.separator + S.getRomExtractionFolderName());    } else {      systemFolder=new File(source);      if (!systemFolder.exists()) {        System.out.println(systemFolder.getAbsolutePath() + " : No such file or directory");        System.exit(2);      }      boolean canWrite=false;      File writeTest=new File(systemFolder.getAbsolutePath() + File.separator + "test.write");      try {        canWrite=writeTest.createNewFile();        writeTest.delete();      } catch (      IOException e) {        e.printStackTrace();      }      if (!canWrite) {        System.out.println(systemFolder.getAbsolutePath() + " : read-only file system " + "\n please make sure that the system folder is read-write before trying again !");        System.exit(3);      }    }    String options=args[1];    for (int i=0; i < options.length(); i++) {      String str="" + options.charAt(i);      boolean valid=false;      for (      String s : OPTIONS) {        valid=valid || (s.equals(str));      }      if (!valid) {        System.out.println("Unkown Option  : " + str);        printHelp();        return;      }    }    zipalign=options.contains("z");    sign=options.contains("s");    createZip=options.contains("c");    Main.proseedWithNoGui(systemFolder,sign,zipalign,createZip,adbExtracted);  } else {    String source=args[0];    systemFolder=new File(source);    if (!systemFolder.exists()) {      System.out.println(systemFolder.getAbsolutePath() + " : No such file or directory");      System.exit(2);    }    boolean canWrite=false;    File writeTest=new File(systemFolder.getAbsolutePath() + File.separator + "test.write");    try {      canWrite=writeTest.createNewFile();      writeTest.delete();    } catch (    IOException e) {      e.printStackTrace();    }    if (!canWrite) {      System.out.println(systemFolder.getAbsolutePath() + " : read-only file system " + "\n please make sure that the system folder is read-write before trying again !");      System.exit(3);    }    Main.proseedWithNoGui(systemFolder,sign,zipalign,createZip,adbExtracted);  }}  }
class C{  public SetTriggeringRequest clone(){  SetTriggeringRequest result=new SetTriggeringRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.SubscriptionId=SubscriptionId;  result.TriggeringItemId=TriggeringItemId;  result.LinksToAdd=LinksToAdd == null ? null : LinksToAdd.clone();  result.LinksToRemove=LinksToRemove == null ? null : LinksToRemove.clone();  return result;}  }
class C{  public final ASTNode createMoveTarget(ASTNode first,ASTNode last){  return createMoveTarget(first,last,null,null);}  }
class C{  protected static boolean regexListMatch(List<String> regexList,String input){  for (  String regex : regexList) {    if (Pattern.matches(regex,input)) {      return true;    }  }  return false;}  }
class C{  public static UpdateUsersResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  UpdateUsersResponse object=new UpdateUsersResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"updateUsersResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (UpdateUsersResponse)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","return").equals(reader.getName())) {      object.set_return(org.oscm.xsd.BaseResult.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  private static void updateTags(final Map<String,Set<String>> data,final Map<String,Set<String>> add){  for (  final Map.Entry<String,Set<String>> entry : add.entrySet()) {    Set<String> entries=data.get(entry.getKey());    if (entries == null) {      entries=new HashSet<String>();      data.put(entry.getKey(),entries);    }    entries.addAll(entry.getValue());  }}  }
class C{  private void deactivateCustomerServices(Product template){  Query query=dm.createNamedQuery("Product.getCustomerCopies");  query.setParameter("template",template);  List<Product> productList=ParameterizedTypes.list(query.getResultList(),Product.class);  if (productList != null) {    for (    Product product : productList) {      if (product.getStatus() == ServiceStatus.ACTIVE) {        product.setStatus(ServiceStatus.INACTIVE);      }    }  }}  }
class C{  protected TGetterImpl(){  super();}  }
class C{  public StandardCategoryToolTipGenerator(String labelFormat,DateFormat formatter){  super(labelFormat,formatter);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static Vec4[] findThreeIndependentVertices(FloatBuffer coords,int stride){  int xstride=stride > 0 ? stride : 3;  if (coords == null || coords.limit() < 3 * xstride)   return null;  Vec4 a=new Vec4(coords.get(0),coords.get(1),coords.get(2));  Vec4 b=null;  Vec4 c=null;  int k=xstride;  for (; k < coords.limit(); k+=xstride) {    b=new Vec4(coords.get(k),coords.get(k + 1),coords.get(k + 2));    if (!(b.x == a.x && b.y == a.y && b.z == a.z))     break;    b=null;  }  if (b == null)   return null;  for (k+=xstride; k < coords.limit(); k+=xstride) {    c=new Vec4(coords.get(k),coords.get(k + 1),coords.get(k + 2));    if (!((c.x == a.x && c.y == a.y && c.z == a.z) || (c.x == b.x && c.y == b.y && c.z == b.z))) {      if (!Vec4.areColinear(a,b,c))       break;    }    c=null;  }  return c != null ? new Vec4[]{a,b,c} : null;}  }
class C{  public boolean minValue(double val,double minVal){  return GenericValidator.minValue(val,minVal);}  }
class C{  protected static VersionNumber parseVersionNumber(@Nonnull String versionString){  Matcher matcher=pattern.matcher(versionString.trim());  if (matcher.matches()) {    String major=matcher.group(2);    String minor=matcher.group(3);    String maint=matcher.group(4);    return new VersionNumber(String.format("%s.%s.%s",major,minor,maint));  } else {    return null;  }}  }
class C{  public long value(){  return _map._values[_index];}  }
class C{  public void unblockRequestOnBuckets(Range<Integer> splitRange){  lockManager.unblockRequestOnBuckets(splitRange);}  }
class C{  public ICovarianceMatrix parseCovariance(File file) throws IOException {  FileReader reader=null;  try {    reader=new FileReader(file);    ICovarianceMatrix covarianceMatrix=doCovariancePass(reader);    this.logger.log("info","\nCovariance matrix loaded!");    this.logger.reset();    return covarianceMatrix;  } catch (  FileNotFoundException e) {    throw e;  }catch (  Exception e) {    if (reader != null) {      reader.close();    }    throw new RuntimeException("Parsing failed.",e);  }}  }
class C{  public void capturePageSnapshotOnException(){  Boolean capture=SeleniumTestsContextManager.getThreadContext().getCaptureSnapshot();  SeleniumTestsContextManager.getThreadContext().setAttribute(SeleniumTestsContext.CAPTURE_SNAPSHOT,"true");  captureWebPageSnapshot();  SeleniumTestsContextManager.getThreadContext().setAttribute(SeleniumTestsContext.CAPTURE_SNAPSHOT,Boolean.toString(capture));  if (SeleniumTestsContextManager.getThreadContext().getScreenshots().size() > 0) {    SeleniumTestsContextManager.getThreadContext().getScreenshots().getLast().setException(true);  }}  }
class C{  public static String format(String pattern,Object... arguments){  int i=0;  while (i < arguments.length) {    String delimiter="{" + i + "}";    while (pattern.contains(delimiter)) {      pattern=pattern.replace(delimiter,String.valueOf(arguments[i]));    }    i++;  }  return pattern;}  }
class C{  public static String convertBytesToHex(byte[] value){  return convertBytesToHex(value,value.length);}  }
class C{  public List<BillingPeriodData> loadBillingData(){  long cutoffBillingEndDate=addMonths(effectiveBillingEndDate,-1);  long cutoffDeactivationDate=addDays(effectiveBillingEndDate,-DEACTIVATION_THRESHOLD);  List<BillingSubscriptionData> subscriptionList=bdr.getSubscriptionsForBilling(effectiveBillingEndDate,cutoffBillingEndDate,cutoffDeactivationDate);  Map<Long,List<Long>> billingPeriods=determineBillingPeriods(subscriptionList);  return sortBillingPeriods(billingPeriods);}  }
class C{  private Base64(){}  }
class C{  public static String nullSafeToString(byte[] array){  if (array == null) {    return NULL_STRING;  }  int length=array.length;  if (length == 0) {    return EMPTY_ARRAY;  }  StringBuffer buffer=new StringBuffer();  for (int i=0; i < length; i++) {    if (i == 0) {      buffer.append(ARRAY_START);    } else {      buffer.append(ARRAY_ELEMENT_SEPARATOR);    }    buffer.append(array[i]);  }  buffer.append(ARRAY_END);  return buffer.toString();}  }
class C{  public static String checkIndexHeaderSuffix(DataInput in,String expectedSuffix) throws IOException {  int suffixLength=in.readByte() & 0xFF;  byte suffixBytes[]=new byte[suffixLength];  in.readBytes(suffixBytes,0,suffixBytes.length);  String suffix=new String(suffixBytes,0,suffixBytes.length,StandardCharsets.UTF_8);  if (!suffix.equals(expectedSuffix)) {    throw new CorruptIndexException("file mismatch, expected suffix=" + expectedSuffix + ", got="+ suffix,in);  }  return suffix;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TANNOTATION_TYPE_REF_ARGUMENT__TYPE_REF:    return getTypeRef();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Builder classifierIds(List<String> classifierIds){  this.classifierIds=classifierIds;  return this;}  }
class C{  private static List<Territory> allEnemyTerritories(final GameData data,final PlayerID player){  final List<Territory> badGuys=new ArrayList<>();  for (  final Territory t : data.getMap().getTerritories()) {    if (Matches.isTerritoryEnemyAndNotUnownedWaterOrImpassableOrRestricted(player,data).match(t)) {      badGuys.add(t);    }  }  return badGuys;}  }
class C{  private static void addArrayMethods(List<MethodNode> methods,ClassNode receiver,String name,ClassNode[] args){  if (args.length != 1)   return;  if (!receiver.isArray())   return;  if (!isIntCategory(getUnwrapper(args[0])))   return;  if ("getAt".equals(name)) {    MethodNode node=new MethodNode(name,Opcodes.ACC_PUBLIC,receiver.getComponentType(),new Parameter[]{new Parameter(args[0],"arg")},null,null);    node.setDeclaringClass(receiver.redirect());    methods.add(node);  } else   if ("setAt".equals(name)) {    MethodNode node=new MethodNode(name,Opcodes.ACC_PUBLIC,VOID_TYPE,new Parameter[]{new Parameter(args[0],"arg")},null,null);    node.setDeclaringClass(receiver.redirect());    methods.add(node);  }}  }
class C{  public ReceiveMessageResult receiveMessage(String queueUrl) throws AmazonServiceException, AmazonClientException {  return amazonSqsToBeExtended.receiveMessage(queueUrl);}  }
class C{  void validatePricedProductRoles(List<VOPricedRole> roleSpecificUserPrices,Product product) throws OperationNotPermittedException {  Map<Long,RoleDefinition> keyRoleMap=new HashMap<Long,RoleDefinition>();  for (  RoleDefinition rd : product.getTechnicalProduct().getRoleDefinitions()) {    keyRoleMap.put(Long.valueOf(rd.getKey()),rd);  }  Set<Long> roleDefinitionKeys=new HashSet<Long>();  for (  VOPricedRole voPpr : roleSpecificUserPrices) {    long roleDefinitionKey=voPpr.getRole().getKey();    if (!roleDefinitionKeys.add(Long.valueOf(roleDefinitionKey))) {      continue;    }    RoleDefinition rdToSet=keyRoleMap.get(Long.valueOf(roleDefinitionKey));    if (rdToSet == null) {      OperationNotPermittedException onp=new OperationNotPermittedException(String.format("User '%s' tried to define a price for role definition '%s' which is not supported for product '%s'.",Long.valueOf(dm.getCurrentUser().getKey()),Long.valueOf(voPpr.getRole().getKey()),Long.valueOf(product.getKey())));      logger.logWarn(Log4jLogger.SYSTEM_LOG,onp,LogMessageIdentifier.WARN_USER_DEFINE_PRICE_FOR_ROLE_FAILED_NOT_SUPPORTED,Long.toString(dm.getCurrentUser().getKey()),Long.toString(voPpr.getRole().getKey()),Long.toString(product.getKey()));      throw onp;    }  }}  }
class C{  @NotNull @ObjectiveCName("addEndpoint:") public ConfigurationBuilder addEndpoint(@NotNull String url){  try {    endpoints.addEndpoint(url);  } catch (  ConnectionEndpointArray.UnknownSchemeException e) {    throw new RuntimeException(e.getMessage());  }  return this;}  }
class C{  public CChildTagsTable(final JTree projectTree,final ITreeNode<CTag> tag,final IDatabase database){  super(projectTree,new CChildTagsModel(database,tag),new CChildTagsTableHelp());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public int addChild(int parent){  throw new UnsupportedOperationException("Changes to tree structure not allowed for spanning trees.");}  }
class C{  private static int numericCompaction(int[] codewords,int codeIndex,StringBuilder result) throws FormatException {  int count=0;  boolean end=false;  int[] numericCodewords=new int[MAX_NUMERIC_CODEWORDS];  while (codeIndex < codewords[0] && !end) {    int code=codewords[codeIndex++];    if (codeIndex == codewords[0]) {      end=true;    }    if (code < TEXT_COMPACTION_MODE_LATCH) {      numericCodewords[count]=code;      count++;    } else {      if (code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR) {        codeIndex--;        end=true;      }    }    if (count % MAX_NUMERIC_CODEWORDS == 0 || code == NUMERIC_COMPACTION_MODE_LATCH || end) {      if (count > 0) {        String s=decodeBase900toBase10(numericCodewords,count);        result.append(s);        count=0;      }    }  }  return codeIndex;}  }
class C{  public ProjectionModel(int dimensions){  init(dimensions);}  }
class C{  public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {}  }
class C{  public XYSeries toXYSeries(){  XYSeries xySeries=new XYSeries(mTitle);  return xySeries;}  }
class C{  public static Version toVersion(String version,final Version defaultValue){  final int rIndex=version.lastIndexOf(".lco");  if (rIndex != -1)   version=version.substring(0,rIndex);  try {    return Version.parseVersion(version);  } catch (  final IllegalArgumentException iae) {    return defaultValue;  }}  }
class C{  private boolean isPEI(InstructionHandle handle) throws CFGBuilderException {  Instruction ins=handle.getInstruction();  if (!(ins instanceof ExceptionThrower)) {    return false;  }  if (ins instanceof NEW) {    return false;  }  if (ins instanceof GETSTATIC) {    return false;  }  if (ins instanceof PUTSTATIC) {    return false;  }  if (ins instanceof ReturnInstruction) {    return false;  }  if (ins instanceof INSTANCEOF) {    return false;  }  if (ins instanceof MONITOREXIT) {    return false;  }  if (ins instanceof LDC) {    return false;  }  if (ins instanceof GETFIELD && !methodGen.isStatic()) {    return !isSafeFieldSource(handle.getPrev());  }  if (ins instanceof PUTFIELD && !methodGen.isStatic()) {    int depth=ins.consumeStack(cpg);    for (InstructionHandle prev=handle.getPrev(); prev != null; prev=prev.getPrev()) {      Instruction prevInst=prev.getInstruction();      if (prevInst instanceof BranchInstruction) {        if (prevInst instanceof GotoInstruction) {          if (((BranchInstruction)prevInst).getTarget() == handle) {            depth=ins.consumeStack(cpg);          } else {            return true;          }        } else         if (!(prevInst instanceof IfInstruction)) {          return true;        }      }      depth=depth - prevInst.produceStack(cpg) + prevInst.consumeStack(cpg);      if (depth < 1) {        throw new CFGBuilderException("Invalid stack at " + prev + " when checking "+ handle);      }      if (depth == 1) {        InstructionHandle prevPrev=prev.getPrev();        if (prevPrev != null && prevPrev.getInstruction() instanceof BranchInstruction) {          continue;        }        return !isSafeFieldSource(prevPrev);      }    }  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:24.358 -0500",hash_original_method="DED9CF35B00E99A5C3539FDABA142E11",hash_generated_method="0CB332E1F3969BC82F1D26FCBE91FD13") @Override public synchronized int enableApnType(String apnType){  ApnContext apnContext=mApnContexts.get(apnType);  if (apnContext == null || !isApnTypeAvailable(apnType)) {    if (DBG)     log("enableApnType: " + apnType + " is type not available");    return Phone.APN_TYPE_NOT_AVAILABLE;  }  if (DBG)   log("enableApnType: " + apnType + " mState("+ apnContext.getState()+ ")");  if (apnContext.getState() == State.CONNECTED) {    if (DBG)     log("enableApnType: return APN_ALREADY_ACTIVE");    return Phone.APN_ALREADY_ACTIVE;  }  setEnabled(apnTypeToId(apnType),true);  if (DBG) {    log("enableApnType: new apn request for type " + apnType + " return APN_REQUEST_STARTED");  }  return Phone.APN_REQUEST_STARTED;}  }
class C{  protected ExifTag addTag(ExifTag tag){  if (tag != null) {    int ifd=tag.getIfd();    return addTag(tag,ifd);  }  return null;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void doneButtonActionPerformed(){  if (editMode) {    editMode=false;    curNode=null;    addButton.setVisible(true);    editButton.setVisible(true);    deleteButton.setVisible(true);    doneButton.setVisible(true);    updateButton.setVisible(false);    cancelButton.setVisible(false);    nodeAddrBox.setVisible(true);    nodeAddrStatic.setVisible(false);    nodeTypeStatic.setVisible(true);    nodeTypeBox.setVisible(false);  }  if (changedNode) {    javax.swing.JOptionPane.showMessageDialog(this,rb.getString("Reminder1") + "\n" + rb.getString("Reminder2"),rb.getString("ReminderTitle"),javax.swing.JOptionPane.INFORMATION_MESSAGE);  }  setVisible(false);  dispose();}  }
class C{  public static boolean isNetworkAvailable(Context context){  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo info=connectivityManager.getActiveNetworkInfo();  if (info == null) {    return false;  }  return info.isConnected();}  }
class C{  public void testPromotion() throws ChessParseError {  String fen="r1bqk2r/1Pppbppp/p1n2n2/2P1p3/B3P3/5N2/Pp1P1PPP/R1BQK2R w KQkq - 0 1";  Position pos=TextIO.readFEN(fen);  assertEquals(fen,TextIO.toFEN(pos));  Position origPos=new Position(pos);  assertEquals(origPos,pos);  Move move=new Move(Position.getSquare(1,6),Position.getSquare(0,7),Piece.WQUEEN);  UndoInfo ui=new UndoInfo();  pos.makeMove(move,ui);  assertEquals(Piece.EMPTY,pos.getPiece(Position.getSquare(1,6)));  assertEquals(Piece.WQUEEN,pos.getPiece(Position.getSquare(0,7)));  pos.unMakeMove(move,ui);  assertEquals(origPos,pos);  move=new Move(Position.getSquare(1,6),Position.getSquare(1,7),Piece.WKNIGHT);  ui=new UndoInfo();  pos.makeMove(move,ui);  assertEquals(Piece.EMPTY,pos.getPiece(Position.getSquare(1,6)));  assertEquals(Piece.WKNIGHT,pos.getPiece(Position.getSquare(1,7)));  pos.unMakeMove(move,ui);  assertEquals(origPos,pos);  pos.setWhiteMove(false);  origPos=new Position(pos);  move=new Move(Position.getSquare(1,1),Position.getSquare(2,0),Piece.BROOK);  ui=new UndoInfo();  pos.makeMove(move,ui);  assertEquals(Piece.EMPTY,pos.getPiece(Position.getSquare(1,1)));  assertEquals(Piece.BROOK,pos.getPiece(Position.getSquare(2,0)));  pos.unMakeMove(move,ui);  assertEquals(origPos,pos);}  }
class C{  public BitmapAjaxCallback fallback(int resId){  this.fallback=resId;  return this;}  }
class C{  public static DefaultTransitionController wrapAnimatorSet(@NonNull AnimatorSet animSet){  return new DefaultTransitionController(animSet);}  }
class C{  public EnumMappingModel createEnumMappingModel(){  EnumMappingModelImpl enumMappingModel=new EnumMappingModelImpl();  return enumMappingModel;}  }
class C{  static private String substituteSubString(String input,String find,String replace){  int find_length=find.length();  int replace_length=replace.length();  StringBuilder output=new StringBuilder(input);  int index=input.indexOf(find);  int outputOffset=0;  while (index > -1) {    output.replace(index + outputOffset,index + outputOffset + find_length,replace);    outputOffset=outputOffset + (replace_length - find_length);    index=input.indexOf(find,index + find_length);  }  String result=output.toString();  return result;}  }
class C{  public void next(Container parent){synchronized (parent.getTreeLock()) {    checkLayout(parent);    int ncomponents=parent.getComponentCount();    for (int i=0; i < ncomponents; i++) {      Component comp=parent.getComponent(i);      if (comp.isVisible()) {        comp.setVisible(false);        currentCard=(i + 1) % ncomponents;        comp=parent.getComponent(currentCard);        comp.setVisible(true);        parent.validate();        return;      }    }    showDefaultComponent(parent);  }}  }
class C{  private void cancelNotification(){  final NotificationManager nm=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);  nm.cancel(NOTIFICATION_ID);}  }
class C{  private void updateLabels(String loText,String hiText){  if (null == loText) {    loLabel.setText(getDefaultOption().getLoLabel());    loLimit.setEnabled(false);  } else {    loLabel.setText(loText);    loLimit.setEnabled(true);  }  if (null == hiText) {    hiLabel.setText(getDefaultOption().getLoLabel());    hiLimit.setEnabled(false);  } else {    hiLabel.setText(hiText);    hiLimit.setEnabled(true);  }}  }
class C{  public FieldIdItem(CstFieldRef field){  super(field);}  }
class C{  public void exec(String description,String[] baseCommand) throws BackupException {  exec(description,baseCommand,null,null,null,false,false);}  }
class C{  private static boolean matches(String str,String ptrn){  return str != null && (F.isEmpty(ptrn) || str.toUpperCase().matches(ptrn.toUpperCase().replace("%",".*").replace("_",".")));}  }
class C{  public boolean isRequired(){  return required;}  }
class C{  public boolean accept(File file){  if (file != null) {    if (this.allowedExts == null || this.allowedExts.size() == 0 || file.isDirectory()) {      return true;    }    for (int i=0; i < this.allowedExts.size(); i++) {      if (file.getName().toLowerCase().endsWith(this.allowedExts.get(i).toString())) {        return true;      }    }  }  return false;}  }
class C{  private boolean checkCongruence(ValueGraphVertex v,GVCongruenceClass c){  ValueGraphVertex r=c.getRepresentative();  boolean result=checkCongruence(r,v);  return result;}  }
class C{  private void fakeResponse(final HttpMethod method) throws IOException, HttpException {  LOG.debug("CONNECT failed, fake the response for the original method");  if (method instanceof HttpMethodBase) {    ((HttpMethodBase)method).fakeResponse(connectMethod.getStatusLine(),connectMethod.getResponseHeaderGroup(),connectMethod.getResponseBodyAsStream());    method.getProxyAuthState().setAuthScheme(connectMethod.getProxyAuthState().getAuthScheme());    connectMethod=null;  } else {    releaseConnection=true;    LOG.warn("Unable to fake response on method as it is not derived from HttpMethodBase.");  }}  }
class C{  public Map<Long,PoiType> loadPoiTypes(){  List<PoiType> poiTypes=poiTypeDao.queryForAll();  Map<Long,PoiType> result=new HashMap<>();  for (  PoiType poiType : poiTypes) {    result.put(poiType.getId(),poiType);  }  return result;}  }
class C{  public boolean isEmpty(){  return CollectionUtils.isEmpty(profiles) && CollectionUtils.isEmpty(environments);}  }
class C{  public KeepFreeArea(Area area,int x,int y){  super();  this.area=area;  this.x=x;  this.y=y;}  }
class C{  public static String makeMethodSafe(final String S){  String name=makeHTMLNameSafe(S);  name=name.replace("-","_");  return name;}  }
class C{  public static void main(String[] args){  DOMTestCase.doMain(alltests.class,args);}  }
class C{  private String errorMessage(String explanation){  String out="Error extracting zip file " + archive.getAbsolutePath() + " into directory "+ targetDir.getLocationURI();  if (explanation != null) {    out+=". " + explanation;  }  return out;}  }
class C{  private boolean updateAnchorFromPendingData(RecyclerView.State state,AnchorInfo anchorInfo){  if (state.isPreLayout() || mPendingScrollPosition == NO_POSITION) {    return false;  }  if (mPendingScrollPosition < 0 || mPendingScrollPosition >= state.getItemCount()) {    mPendingScrollPosition=NO_POSITION;    mPendingScrollPositionOffset=INVALID_OFFSET;    if (DEBUG) {      Log.e(TAG,"ignoring invalid scroll position " + mPendingScrollPosition);    }    return false;  }  anchorInfo.mPosition=mPendingScrollPosition;  if (mPendingSavedState != null && mPendingSavedState.hasValidAnchor()) {    anchorInfo.mLayoutFromEnd=mPendingSavedState.mAnchorLayoutFromEnd;    if (anchorInfo.mLayoutFromEnd) {      anchorInfo.mCoordinate=mOrientationHelper.getEndAfterPadding() - mPendingSavedState.mAnchorOffset;    } else {      anchorInfo.mCoordinate=mOrientationHelper.getStartAfterPadding() + mPendingSavedState.mAnchorOffset;    }    return true;  }  if (mPendingScrollPositionOffset == INVALID_OFFSET) {    View child=findViewByPosition(mPendingScrollPosition);    if (child != null) {      final int childSize=mOrientationHelper.getDecoratedMeasurement(child);      if (childSize > mOrientationHelper.getTotalSpace()) {        anchorInfo.assignCoordinateFromPadding();        return true;      }      final int startGap=mOrientationHelper.getDecoratedStart(child) - mOrientationHelper.getStartAfterPadding();      if (startGap < 0) {        anchorInfo.mCoordinate=mOrientationHelper.getStartAfterPadding();        anchorInfo.mLayoutFromEnd=false;        return true;      }      final int endGap=mOrientationHelper.getEndAfterPadding() - mOrientationHelper.getDecoratedEnd(child);      if (endGap < 0) {        anchorInfo.mCoordinate=mOrientationHelper.getEndAfterPadding();        anchorInfo.mLayoutFromEnd=true;        return true;      }      anchorInfo.mCoordinate=anchorInfo.mLayoutFromEnd ? (mOrientationHelper.getDecoratedEnd(child) + mOrientationHelper.getTotalSpaceChange()) : mOrientationHelper.getDecoratedStart(child);    } else {      if (getChildCount() > 0) {        int pos=getPosition(getChildAt(0));        anchorInfo.mLayoutFromEnd=mPendingScrollPosition < pos == mShouldReverseLayout;      }      anchorInfo.assignCoordinateFromPadding();    }    return true;  }  anchorInfo.mLayoutFromEnd=scrollToPositionWithOffsetCalled ? false : mShouldReverseLayout;  if (scrollToPositionWithOffsetCalled) {    anchorInfo.mLayoutFromEnd=false;    anchorInfo.mCoordinate=mOrientationHelper.getStartAfterPadding() + mPendingScrollPositionOffset;    scrollToPositionWithOffsetCalled=false;  } else   if (mShouldReverseLayout) {    anchorInfo.mCoordinate=mOrientationHelper.getEndAfterPadding() - mPendingScrollPositionOffset;  } else {    anchorInfo.mCoordinate=mOrientationHelper.getStartAfterPadding() + mPendingScrollPositionOffset;  }  return true;}  }
class C{  private static List<FixedRecord> createFixedRecords(int count){  List<FixedRecord> records=new ArrayList<>();  for (int i=0; i < count; i++) {    records.add(new FixedRecord(i));  }  return records;}  }
class C{  public void copy(){  invokeAction(TransferHandler.getCopyAction());}  }
class C{  public static boolean addTable(Table t){  try {    tableList.add(t);  } catch (  Exception e) {    return false;  }  return true;}  }
class C{  @Override protected void buildClassPath(ArrayList<String> pathList){  String path=null;  if (_path instanceof JarPath)   path=((JarPath)_path).getContainer().getNativePath(); else   if (_path.isDirectory())   path=_path.getNativePath();  if (path != null && !pathList.contains(path))   pathList.add(path);}  }
class C{  @Restrictions({@Restrict("SYSTEM_ADMIN"),@Restrict("SYSTEM_MONITOR"),@Restrict("RESTRICTED_SYSTEM_ADMIN")}) public static void itemsJson(@As(",") String[] ids){  List<BackupDataTable.Backup> results=Lists.newArrayList();  if (ids != null) {    for (    String id : ids) {      if (StringUtils.isNotBlank(id)) {        BackupSet backupSet=BackupUtils.getBackup(id);        if (backupSet != null) {          BackupDataTable.Backup backup=new BackupDataTable.Backup(backupSet);          BackupRestoreStatus restoreStatus=BackupUtils.getRestoreStatus(id,true);          backup.alterLocalBackupRestoreStatus(restoreStatus);          results.add(backup);        }      }    }  }  renderJSON(results);}  }
class C{  static void createPopulation2(final MutableScenario scenario){  Population population=scenario.getPopulation();  Network network=scenario.getNetwork();  Fixture.addPersonToPopulation(Fixture.createPerson2(1,"07:00",network.getLinks().get(Id.create("1",Link.class)),network.getLinks().get(Id.create("7",Link.class)),network.getLinks().get(Id.create("13",Link.class))),population);}  }
class C{  private void logModules(){  StringBuilder sb=new StringBuilder();  PollTcpManagerBase pollManager=NetworkSystem.currentPollManager();  if (pollManager != null) {    if (sb.length() > 0) {      sb.append(",");    }    sb.append(" poll keepalive (max=" + pollManager.pollMax() + ")");  } else   if (SelectManagerJni.getInitMessage() != null) {    log.config("  JNI poll: " + SelectManagerJni.getInitMessage());  }  if (JniServerSocketImpl.isEnabled()) {    if (sb.length() > 0)     sb.append(",");    sb.append(" socket");  } else   if (JniServerSocketImpl.getInitMessage() != null) {    log.config("  JNI socket: " + JniServerSocketImpl.getInitMessage());  } else {    log.config("  JNI socket: disabled for unknown reasons");  }  if (OpenSSLFactory.isEnabled()) {    if (sb.length() > 0)     sb.append(",");    sb.append(" openssl");  }  if (sb.length() > 0)   log.info("  Native:" + sb);  log.info("");}  }
class C{  @Override protected void paintTargetPanel(Graphics g){}  }
class C{  public synchronized void removeFromState(String variableId){  addToState(new Assignment(variableId,ValueFactory.none()));}  }
class C{  protected void writeStyles(List styles) throws IOException {  int numStyles=(styles != null) ? styles.size() : 0;  if (numStyles < 0xff) {    out.writeUI8(numStyles);  } else {    out.writeUI8(0xff);    out.writeUI16(numStyles);  }  if (styles != null) {    for (Iterator enumumerator=styles.iterator(); enumumerator.hasNext(); ) {      Style style=(Style)enumumerator.next();      style.write(out,hasAlpha);    }    styles.clear();  }}  }
class C{  void createSceneSSBO(){  this.ssbo=glGenBuffers();  glBindBuffer(GL_ARRAY_BUFFER,ssbo);  glBufferData(GL_ARRAY_BUFFER,4 * (4 + 4) * mesh.numVertices* 2,GL_DYNAMIC_DRAW);  glBindBuffer(GL_ARRAY_BUFFER,0);}  }
class C{  public static int round(double num){  return floor(num + 0.5d);}  }
class C{  public Object clone(){  return content.clone();}  }
class C{  void decrementFilesOpenedForWrite(){  filesOpenedForWrite.decrement();}  }
class C{  @Override public Object deserializeWithType(JsonParser jp,DeserializationContext ctxt,TypeDeserializer typeDeserializer) throws IOException, JsonProcessingException {switch (jp.getCurrentToken()) {case VALUE_NUMBER_INT:case VALUE_NUMBER_FLOAT:case VALUE_STRING:    return deserialize(jp,ctxt);}return typeDeserializer.deserializeTypedFromScalar(jp,ctxt);}  }
class C{  @Override public boolean transactAgreedDeal(ItemParserResult res,final EventRaiser seller,final Player player){  String chosenItemName=res.getChosenItemName();  int amount=res.getAmount();  final Item item=getAskedItem(chosenItemName);  if (item == null) {    logger.error("Trying to sell an nonexistent item: " + chosenItemName);    return false;  }  if (item instanceof StackableItem) {    ((StackableItem)item).setQuantity(amount);  } else   if (amount > 1) {    logger.error("Trying to sell more than one " + chosenItemName + " in one transaction.");  }  if (amount <= 0) {    seller.say("Sorry, you must buy at least one item.");    return false;  }  int price=getCharge(res,player);  if (player.isBadBoy()) {    price=(int)(BAD_BOY_BUYING_PENALTY * price);  }  if (player.isEquipped("money",price)) {    if (player.equipToInventoryOnly(item)) {      player.drop("money",price);      seller.say("Congratulations! Here " + Grammar.isare(amount) + " your "+ Grammar.plnoun(amount,chosenItemName)+ "!");      player.incBoughtForItem(chosenItemName,amount);      return true;    } else {      seller.say("Sorry, but you cannot equip the " + Grammar.plnoun(amount,chosenItemName) + ".");      return false;    }  } else {    seller.say("Sorry, you don't have enough money!");    return false;  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ExpressionsPackage.STRING_LITERAL__VALUE:    return getValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public SIRepidemicModel(Parameter N0Parameter,Parameter growthRateParameter,Parameter tpeakParameter,Parameter gammaParameter,Type units,boolean usingGrowthRate,double minPrevalence){  this(SIRepidemicModelParser.SIREPI_MODEL,N0Parameter,growthRateParameter,tpeakParameter,gammaParameter,units,usingGrowthRate,minPrevalence);}  }
class C{  public void addArc(String sParent,ArrayList<Integer> nodes) throws Exception {  int nParent=getNode(sParent);  if (m_bNeedsUndoAction) {    addUndoAction(new AddArcAction(nParent,nodes));  }  boolean bNeedsUndoAction=m_bNeedsUndoAction;  m_bNeedsUndoAction=false;  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nNode=nodes.get(iNode);    addArc(nParent,nNode);  }  m_bNeedsUndoAction=bNeedsUndoAction;}  }
class C{  private boolean isLikeToHave(){  final Expression verb=getVerb();  if (verb != null) {    if (verb.getNormalized().equals("have") && verb.getOriginal().contains("like")) {      final Expression subject1=getSubject(0);      final Expression firstExpression=expressions.get(0);      final Expression secondExpression=expressions.get(1);      if ((subject1 == null) && (verb == firstExpression)) {        return true;      }      if ((subject1 == firstExpression) && (verb == secondExpression)) {        return true;      }    }  }  return false;}  }
class C{  public void addTheme(ThemeTask task){  resources.add(task);}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(keyIdentifier);  if (date != null) {    v.add(date);  }  if (other != null) {    v.add(other);  }  return new DERSequence(v);}  }
class C{  public boolean usedInFix(){  return mUsedInFix;}  }
class C{  void usage(){  System.err.print("DEX dependency scanner v1.2\n" + "Copyright (C) 2009 The Android Open Source Project\n\n" + "Usage: dexdeps [options] <file.{dex,apk,jar}> ...\n"+ "Options:\n"+ "  --format={xml,brief}\n"+ "  --just-classes\n");}  }
class C{  public Podcast(String url){  try {    URL theURL=new URL(url);    XmlReader reader=null;    reader=new XmlReader(theURL);    podcastFeed=new SyndFeedInput().build(reader);  } catch (  IOException|FeedException e) {  }}  }
class C{  public final void replaceAll(double from,double to){  final int width=this.width;  final int height=this.height;  final int length=this.length;  double[][] fieldx=null;  double[] fieldxy=null;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++) {        if (fieldxy[z] == from)         fieldxy[z]=to;      }    }  }}  }
class C{  public HitonRunner(DagWrapper dagWrapper,Parameters params){  super(dagWrapper.getDag(),params);}  }
class C{  public void flush() throws IOException {  if (printWriter != null) {    printWriter.flush();  }  if (gzipOutputStream != null) {    gzipOutputStream.flush();  }}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (camera == null) {    camera=Camera.open();    if (camera == null) {      throw new IOException();    }    camera.setPreviewDisplay(holder);    if (!initialized) {      initialized=true;      configManager.initFromCameraParameters(camera);    }    configManager.setDesiredCameraParameters(camera);    FlashlightManager.enableFlashlight();  }}  }
class C{  public static void main(String[] args) throws IgniteException {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println("Compute asynchronous example started.");    IgniteCompute compute=ignite.compute().withAsync();    Collection<IgniteFuture<?>> futs=new ArrayList<>();    for (    final String word : "Print words using runnable".split(" ")) {      compute.run(null);      futs.add(compute.future());    }    futs.forEach(null);    System.out.println();    System.out.println(">>> Finished printing words using runnable execution.");    System.out.println(">>> Check all nodes for output (this node is also part of the cluster).");  } }  }
class C{  public static Monitor startPrimary(MonKey key){  return factory.startPrimary(key);}  }
class C{  public void resetToCheckpoint(){  if (checkPoint != -1) {    current_item=checkPoint;  }  checkPoint=-1;}  }
class C{  public static long union(long s1,long s2){  return s1 | s2;}  }
class C{  public ModifySubscriptionResponse ModifySubscription(RequestHeader RequestHeader,UnsignedInteger SubscriptionId,Double RequestedPublishingInterval,UnsignedInteger RequestedLifetimeCount,UnsignedInteger RequestedMaxKeepAliveCount,UnsignedInteger MaxNotificationsPerPublish,UnsignedByte Priority) throws ServiceFaultException, ServiceResultException {  ModifySubscriptionRequest req=new ModifySubscriptionRequest(RequestHeader,SubscriptionId,RequestedPublishingInterval,RequestedLifetimeCount,RequestedMaxKeepAliveCount,MaxNotificationsPerPublish,Priority);  return (ModifySubscriptionResponse)channel.serviceRequest(req);}  }
class C{  public TObjectIntHashMap(int initialCapacity,TObjectHashingStrategy<K> strategy){  super(initialCapacity,strategy);}  }
class C{  public void play(){  fan.play();}  }
class C{  public void doTerrainEditToolActivated(){  if (terrainTool != null && primary && !alternate) {    Vector3f point=getMarkerLocation();    if (point != null) {      topComponent.getExtraToolParams();      terrainTool.actionPrimary(point,selectedTextureIndex,jmeRootNode,editorController.getCurrentDataObject());    }  }}  }
class C{  public NondominatedPopulation(Iterable<? extends Solution> iterable){  this();  addAll(iterable);}  }
class C{  public ThreadGroup(String name){  this(Thread.currentThread().getThreadGroup(),name);}  }
class C{  public static String printMemInfo(){  String info=FileUtil.getFileOutputString(MEM_INFO_PATH);  return info;}  }
class C{  public static Date stringToDate(String dateText) throws ParseException {  SimpleDateFormat formatter=new SimpleDateFormat(ISO_DATE_FORMAT);  formatter.setTimeZone(TimeZone.getTimeZone("GMT"));  return formatter.parse(dateText);}  }
class C{  public Object nextElement(){  return nextToken();}  }
class C{  @SuppressWarnings("deprecation") private void startSetTimeChanged(){  int hours=0;  int minutes=0;  try {    hours=Integer.parseInt(startHoursField.getText());  } catch (  Exception e) {    JOptionPane.showMessageDialog(this,(Bundle.getMessage("HoursError") + "\n" + e),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);    log.error("Exception when parsing hours Field: " + e);    return;  }  if ((hours < 0) || (hours > 23)) {    JOptionPane.showMessageDialog(this,(Bundle.getMessage("HoursRangeError")),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);    return;  }  try {    minutes=Integer.parseInt(startMinutesField.getText());  } catch (  Exception e) {    JOptionPane.showMessageDialog(this,(Bundle.getMessage("HoursError") + "\n" + e),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);    log.error("Exception when parsing hours Field: " + e);    return;  }  if ((minutes < 0) || (minutes > 59)) {    JOptionPane.showMessageDialog(this,(Bundle.getMessage("MinutesRangeError")),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);    return;  }  long mSecPerHour=3600000;  long mSecPerMinute=60000;  Date tem=clock.getTime();  int cHours=tem.getHours();  long cNumMSec=tem.getTime();  long nNumMSec=((cNumMSec / mSecPerHour) * mSecPerHour) - (cHours * mSecPerHour) + (hours * mSecPerHour) + (minutes * mSecPerMinute);  clock.setStartSetTime(startSetTimeCheckBox.isSelected(),new Date(nNumMSec));  changed=true;}  }
class C{  public static OutputStream createTeedOutputStream(OutputStream first,OutputStream second){  return new TeeOutputStream(first,second);}  }
class C{  public boolean showWindow(Container c){  boolean result;  ChildFrameMDI mdiFrame;  ChildFrameSDI sdiFrame;  if (c != null) {    try {      if (c instanceof ChildFrameMDI) {        mdiFrame=(ChildFrameMDI)c;        mdiFrame.setIcon(false);        mdiFrame.toFront();        createTitle(mdiFrame.getTitle());      } else       if (c instanceof ChildFrameSDI) {        sdiFrame=(ChildFrameSDI)c;        sdiFrame.setExtendedState(JFrame.NORMAL);        sdiFrame.toFront();        createTitle(sdiFrame.getTitle());      }    } catch (    Exception e) {      e.printStackTrace();    }    result=true;  } else {    result=false;  }  return result;}  }
class C{  @Override public boolean resizeImage(final int width,final int height,final boolean force){  return false;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TypeArgument.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_ARGUMENT___GET_TYPE_REF_AS_STRING:      return TypeRefsPackage.TYPE_TYPE_REF___GET_TYPE_REF_AS_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_REF___GET_TYPE_REF_AS_STRING:  return TypeRefsPackage.TYPE_TYPE_REF___GET_TYPE_REF_AS_STRING;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (isNetworkedPlaylistCall(stack,1)) {    return makeNetworkedCall(stack);  }  int idx=getInt(stack);  Playlist p=getPlaylist(stack);  if (p == null)   return null;  if (!Permissions.hasPermission(Permissions.PERMISSION_PLAYLIST,stack.getUIMgr()) && p != stack.getUIMgrSafe().getVideoFrame().getNowPlayingList())   return null;  p.removeFromPlaylist(idx);  sage.plugin.PluginEventManager.postEvent(sage.plugin.PluginEventManager.PLAYLIST_MODIFIED,new Object[]{sage.plugin.PluginEventManager.VAR_PLAYLIST,p,sage.plugin.PluginEventManager.VAR_UICONTEXT,(stack.getUIMgr() != null ? stack.getUIMgr().getLocalUIClientName() : null)});  return null;}  }
class C{  String visibleNameOf(Class<? extends RealmModel> clazz){  return visibleNameOf(clazz.getSimpleName());}  }
class C{  public static void testRandomConcurrentReadWriteThreads(IntToIntPairHashMap intToIntPairHashMap,int defaultValue,int numReaders,int numKeysToInsert,Random random){  int maxWaitingTimeForThreads=20;  CountDownLatch readersDoneLatch=new CountDownLatch(numReaders);  IntToIntPairMapTestHelper.KeyTestInfo keyTestInfo=IntToIntPairMapTestHelper.generateRandomKeys(random,numKeysToInsert);  int[] keysAndValues=keyTestInfo.keysAndValues;  List<IntToIntPairHashMapReader> readers=Lists.newArrayListWithCapacity(numReaders);  for (int i=0; i < numReaders; i++) {    readers.add(new IntToIntPairHashMapReader(intToIntPairHashMap,new CountDownLatch(0),readersDoneLatch,keysAndValues[i * 3],random.nextInt(maxWaitingTimeForThreads)));  }  List<Integer> keyIndices=Lists.newArrayListWithCapacity(numKeysToInsert);  for (int i=0; i < numKeysToInsert; i++) {    keyIndices.add(i);  }  Collections.shuffle(keyIndices,random);  int[] shuffledKeysAndValues=new int[numKeysToInsert * 3];  for (int i=0; i < numKeysToInsert; i++) {    int index=keyIndices.get(i);    shuffledKeysAndValues[i * 3]=keysAndValues[index * 3];    shuffledKeysAndValues[i * 3 + 1]=keysAndValues[index * 3 + 1];    shuffledKeysAndValues[i * 3 + 2]=keysAndValues[index * 3 + 2];  }  CountDownLatch writerDoneLatch=new CountDownLatch(keyIndices.size());  MapWriterInfo mapWriterInfo=new MapWriterInfo(shuffledKeysAndValues,new CountDownLatch(0),writerDoneLatch);  ExecutorService executor=Executors.newFixedThreadPool(numReaders + 1);  List<Callable<Integer>> allThreads=Lists.newArrayListWithCapacity(numReaders + 1);  allThreads.add(Executors.callable(new IntToIntPairHashMapWriter(intToIntPairHashMap,mapWriterInfo),1));  for (int i=0; i < numReaders; i++) {    allThreads.add(Executors.callable(readers.get(i),1));  }  Collections.shuffle(allThreads,random);  try {    List<Future<Integer>> results=executor.invokeAll(allThreads,10,TimeUnit.SECONDS);    for (    Future<Integer> result : results) {      assertTrue(result.isDone());      assertEquals(1,result.get().intValue());    }  } catch (  InterruptedException e) {    throw new RuntimeException("Execution for a thread was interrupted: ",e);  }catch (  ExecutionException e) {    throw new RuntimeException("Execution issue in an executor thread: ",e.fillInStackTrace());  }  try {    readersDoneLatch.await();    writerDoneLatch.await();  } catch (  InterruptedException e) {    throw new RuntimeException("Execution for last reader was interrupted: ",e);  }  for (  IntToIntPairHashMapReader reader : readers) {    long expectedValue=intToIntPairHashMap.getBothValues(reader.key);    assertTrue("Expected either " + defaultValue + " or "+ expectedValue+ ", but found "+ reader.getBothValues()+ " for key "+ reader.key,(reader.getBothValues() == defaultValue) || (reader.getBothValues() == expectedValue));  }}  }
class C{  public ForwardExtentCopy(Extent source,Region region,Vector from,Extent destination,Vector to){  checkNotNull(source);  checkNotNull(region);  checkNotNull(from);  checkNotNull(destination);  checkNotNull(to);  this.source=source;  this.destination=destination;  this.region=region;  this.from=from;  this.to=to;}  }
class C{  private void initComponents(){  originX=new JTextField();  originY=new JTextField();  height=new JTextField();  width=new JTextField();}  }
class C{  public void nextViewpoint(){  if (viewpointList.size() == 0) {    return;  }  viewpointIndex++;  if (viewpointIndex >= viewpointList.size()) {    viewpointIndex=0;  }  viewpointNode.setViewpoint(viewpointList.get(viewpointIndex),true,true);}  }
class C{  private SingleResourceStatsCollectionTaskState aggregateComputeStatsResponses(AzureStatsDataHolder statsData,List<QueryTask> items){  int numberOfComputeResponse=items.size();  ComputeStats computeStats=new ComputeStats();  computeStats.computeLink=statsData.computeDesc.documentSelfLink;  Map<String,ServiceStat> statMap=new HashMap<>();  for (  QueryTask queryResult : items) {    if (queryResult.results.documents != null) {      for (      String key : queryResult.results.documents.keySet()) {        ResourceMetric metric=Utils.fromJson(queryResult.results.documents.get(key),ResourceMetric.class);        String metricName=StatsUtil.getMetricName(metric.documentSelfLink);        if (statMap.containsKey(metricName)) {          statMap.get(metricName).latestValue+=metric.value;        } else {          ServiceStat stat=new ServiceStat();          stat.latestValue=metric.value;          statMap.put(metricName,stat);        }      }    }  }  computeStats.statValues=new ConcurrentSkipListMap<>();  for (  String key : statMap.keySet()) {    ServiceStat serviceStatValue=statMap.get(key);    serviceStatValue.unit=PhotonModelConstants.getUnitForMetric(key);    serviceStatValue.sourceTimeMicrosUtc=Utils.getNowMicrosUtc();    serviceStatValue.latestValue=serviceStatValue.latestValue / numberOfComputeResponse;    computeStats.statValues.put(key,Collections.singletonList(serviceStatValue));  }  SingleResourceStatsCollectionTaskState statsResponse=new SingleResourceStatsCollectionTaskState();  statsResponse.statsList=new ArrayList<>();  if (computeStats.statValues.size() > 0) {    statsResponse.statsList.add(computeStats);  }  return statsResponse;}  }
class C{  public static ComponentUI createUI(JComponent x){  return new CompiereSplitPaneUI();}  }
class C{  public boolean continueExecuting(){  return this.shouldExecute() || !this.entityHost.getNavigator().noPath();}  }
class C{  public DrmInfo(int infoType,String path,String mimeType){  mInfoType=infoType;  mMimeType=mimeType;  try {    mData=DrmUtils.readBytes(path);  } catch (  IOException e) {    mData=null;  }  if (!isValid()) {    final String msg="infoType: " + infoType + ","+ "mimeType: "+ mimeType+ ","+ "data: "+ mData;    throw new IllegalArgumentException();  }}  }
class C{  public synchronized void deleteObservers(){  observers.clear();}  }
class C{  protected void prepareForFlush(){  doneLock=new ReentrantLock();  doneCondition=doneLock.newCondition();  doneLock.lock();}  }
class C{  public static void registerDefaultAlgorithms(){  transformSpiHash.put(Transforms.TRANSFORM_BASE64_DECODE,TransformBase64Decode.class);  transformSpiHash.put(Transforms.TRANSFORM_C14N_OMIT_COMMENTS,TransformC14N.class);  transformSpiHash.put(Transforms.TRANSFORM_C14N_WITH_COMMENTS,TransformC14NWithComments.class);  transformSpiHash.put(Transforms.TRANSFORM_C14N11_OMIT_COMMENTS,TransformC14N11.class);  transformSpiHash.put(Transforms.TRANSFORM_C14N11_WITH_COMMENTS,TransformC14N11_WithComments.class);  transformSpiHash.put(Transforms.TRANSFORM_C14N_EXCL_OMIT_COMMENTS,TransformC14NExclusive.class);  transformSpiHash.put(Transforms.TRANSFORM_C14N_EXCL_WITH_COMMENTS,TransformC14NExclusiveWithComments.class);  transformSpiHash.put(Transforms.TRANSFORM_XPATH,TransformXPath.class);  transformSpiHash.put(Transforms.TRANSFORM_ENVELOPED_SIGNATURE,TransformEnvelopedSignature.class);  transformSpiHash.put(Transforms.TRANSFORM_XSLT,TransformXSLT.class);  transformSpiHash.put(Transforms.TRANSFORM_XPATH2FILTER,TransformXPath2Filter.class);}  }
class C{  public TestConnection(String jdbcURL,String uid,String pwd){  System.out.println("Test Connection for " + jdbcURL);  m_jdbcURL=jdbcURL;  m_uid=uid;  m_pwd=pwd;  init();  if (m_conn != null) {    long time=test();    time+=test();    time+=test();    time+=test();    System.out.println("");    System.out.println("Total Average (" + m_jdbcURL + ")= "+ (time / 4)+ "ms");  }}  }
class C{  private static ModuleInfo readModuleInformation(final String moduleName,final File jarFile,Overrides overrides){  ClassFile moduleInfo=readModuleInfo(moduleName,jarFile);  if (moduleInfo == null)   return null;  Annotation ai=ClassFileUtil.findAnnotation(moduleInfo,MODULE_ANNOTATION);  if (ai == null)   return null;  final String version=(String)ClassFileUtil.getAnnotationValue(moduleInfo,ai,"version");  if (version == null)   return null;  final Object[] dependencies=(Object[])ClassFileUtil.getAnnotationValue(moduleInfo,ai,"dependencies");  final Set<ModuleDependencyInfo> infos=getDependencies(moduleInfo,dependencies,moduleName,version,overrides);  ModuleInfo ret=new ModuleInfo(moduleName,version,null,infos);  if (overrides != null)   ret=overrides.applyOverrides(moduleName,version,ret);  return ret;}  }
class C{  public void testDefaultGridGetOrStart() throws Exception {  IgniteConfiguration cfg=getConfiguration(null);  try (Ignite ignite=Ignition.getOrStart(cfg)){    try {      Ignition.start(cfg);      fail("Expected exception after grid started");    } catch (    IgniteException ignored) {    }    Ignite ignite2=Ignition.getOrStart(cfg);    assertEquals("Must return same instance",ignite,ignite2);  } }  }
class C{  public final AC gap(String size){  return gap(size,curIx++);}  }
class C{  public static boolean hasBodyContent(final RestRequest request){  return request.hasContent() || request.hasParam("source");}  }
class C{  public boolean removeNode(ServiceNode node){  try {    return nodes.remove(node);  } catch (  Exception e) {    return false;  }}  }
class C{  private boolean methodThrowsException(Method method,Class<? extends Exception> exceptionType){  for (  Class<?> thrownType : method.getExceptionTypes()) {    if (exceptionType.isAssignableFrom(thrownType))     return true;  }  return false;}  }
class C{  public SemImEditor(SemEstimatorWrapper semEstWrapper){  this(new SemImWrapper(semEstWrapper.getSemEstimator().getEstimatedSem()));}  }
class C{  public synchronized void notifyWaitingThread(final HostConfiguration configuration){  notifyWaitingThread(getHostPool(configuration,true));}  }
class C{  public static <T>void shuffle(T[] array,Random rnd){  int N=array.length;  for (int i=0; i < N; i++) {    int r=i + rnd.nextInt(N - i);    T swap=array[i];    array[i]=array[r];    array[r]=swap;  }}  }
class C{  protected void sequence_ExecModule(ISerializationContext context,ExecModule semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4mfPackage.Literals.EXEC_MODULE__EXEC_MODULE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4mfPackage.Literals.EXEC_MODULE__EXEC_MODULE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getExecModuleAccess().getExecModuleBootstrapModuleParserRuleCall_3_0(),semanticObject.getExecModule());  feeder.finish();}  }
class C{  public SeaGlassTextFieldUI(){  super();}  }
class C{  void encode(ASN1OutputStream out) throws IOException {  ASN1OutputStream dOut=out.getDLSubStream();  int length=getBodyLength();  out.write(BERTags.SEQUENCE | BERTags.CONSTRUCTED);  out.writeLength(length);  for (Enumeration e=this.getObjects(); e.hasMoreElements(); ) {    Object obj=e.nextElement();    dOut.writeObject((ASN1Encodable)obj);  }}  }
class C{  public static BitInputStream toBitInputStream(InputStream in){  return in instanceof BitInputStream ? (BitInputStream)in : new BitInputStream(in);}  }
class C{  public static JClassLoaderWrapper create(){  return create(Thread.currentThread().getContextClassLoader());}  }
class C{  COMMarkerSegment(String comment){  super(JPEG.COM);  data=comment.getBytes();}  }
class C{  public void generateWarning(){  logger.logDebug("generateWarning");  if (!ui.isLoggedIn()) {    return;  }  if (!checkIfUserCanSubscribeToService()) {    ui.getRequest().setAttribute(Constants.REQ_ATTR_WARNING_KEY,BaseBean.WARNING_SUBSCRIBE_ONLY_BY_ADMIN);  }  if (model.getSelectedService() != null && !model.getSelectedService().isSubscribable()) {    ui.getRequest().setAttribute(Constants.REQ_ATTR_WARNING_KEY,BaseBean.WARNING_SUBSCRIBE_ONLY_ONCE);  }}  }
class C{  public static org.oscm.vo.VOSteppedPrice convertToApi(org.oscm.internal.vo.VOSteppedPrice oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOSteppedPrice newVO=new org.oscm.vo.VOSteppedPrice();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setLimit(oldVO.getLimit());  newVO.setPrice(oldVO.getPrice());  return newVO;}  }
class C{  public void keyTyped(KeyEvent e){}  }
class C{  public ListIntSet(){  ints=new IntList();  ints.sort();}  }
class C{  static void applyRoundingParams(Rounded rounded,RoundingParams roundingParams){  rounded.setCircle(roundingParams.getRoundAsCircle());  rounded.setRadii(roundingParams.getCornersRadii());  rounded.setBorder(roundingParams.getBorderColor(),roundingParams.getBorderWidth());  rounded.setPadding(roundingParams.getPadding());}  }
class C{  void checkStartCode(){  if (!startCode) {    throw new IllegalStateException("Cannot visit instructions before visitCode has been called.");  }}  }
class C{  public long pos(){  return (id & (-1L >>> FACE_BITS));}  }
class C{  public TabularDataTable(DataSet dataSet){  this.dataSet=dataSet;}  }
class C{  public boolean isNotUncertain(){  return (value & SEVERITY_MASK) != SEVERITY_UNCERTAIN;}  }
class C{  private void ensureNoPre019State() throws Exception {  for (  Path dataLocation : nodeEnv.nodeDataPaths()) {    final Path stateLocation=dataLocation.resolve(MetaDataStateFormat.STATE_DIR_NAME);    if (!Files.exists(stateLocation)) {      continue;    }    try (DirectoryStream<Path> stream=Files.newDirectoryStream(stateLocation)){      for (      Path stateFile : stream) {        if (logger.isTraceEnabled()) {          logger.trace("[upgrade]: processing [" + stateFile.getFileName() + "]");        }        final String name=stateFile.getFileName().toString();        if (name.startsWith("metadata-")) {          throw new IllegalStateException("Detected pre 0.19 metadata file please upgrade to a version before " + Version.CURRENT.minimumCompatibilityVersion() + " first to upgrade state structures - metadata found: ["+ stateFile.getParent().toAbsolutePath());        }      }    }   }}  }
class C{  @Override public boolean batchFinished(){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  Instances instances;  if (!isFirstBatchDone()) {    if (m_Seed > 0) {      getInputFormat().randomize(new Random(m_Seed));    }    getInputFormat().stratify(m_NumFolds);    if (!m_Inverse) {      instances=getInputFormat().testCV(m_NumFolds,m_Fold - 1);    } else {      instances=getInputFormat().trainCV(m_NumFolds,m_Fold - 1);    }  } else {    instances=getInputFormat();  }  flushInput();  for (int i=0; i < instances.numInstances(); i++) {    push(instances.instance(i));  }  m_NewBatch=true;  m_FirstBatchDone=true;  return (numPendingOutput() != 0);}  }
class C{  private static void s_uamean(SparseBlock a,double[] c,int m,int n,KahanObject kbuff,Mean kmean,int rl,int ru){  int len=(ru - rl) * n;  int count=0;  count+=(ru - rl) * n - a.size(rl,ru);  if (a.isContiguous()) {    int alen=(int)a.size(rl,ru);    mean(a.values(rl),a.pos(rl),alen,count,kbuff,kmean);    count+=alen;  } else {    for (int i=rl; i < ru; i++) {      if (!a.isEmpty(i)) {        int alen=a.size(i);        mean(a.values(i),a.pos(i),alen,count,kbuff,kmean);        count+=alen;      }    }  }  c[0]=kbuff._sum;  c[1]=len;  c[2]=kbuff._correction;}  }
class C{  public Geo(Double latitude,Double longitude){  this(new GeoUri.Builder(latitude,longitude).build());}  }
class C{  public void openConnection(final boolean isReconnect){  if (isReconnect) {    if (isConnected()) {      connect(mSessionID);      return;    }  }  OkHttpClient client=new OkHttpClient();  client.setConnectTimeout(1,TimeUnit.MINUTES);  client.setReadTimeout(1,TimeUnit.MINUTES);  client.setWriteTimeout(1,TimeUnit.MINUTES);  HttpLoggingInterceptor loggingInterceptor=new HttpLoggingInterceptor();  loggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BASIC);  client.networkInterceptors().add(loggingInterceptor);  Request request=new Request.Builder().url(mServerUri).build();  WebSocketCall.create(client,request).enqueue(mWebSocketObserver);}  }
class C{  public MavenProjectModifications resolve(IProject project,MavenServerWrapper mavenServer,MavenServerManager serverManager){  MavenModelReader reader=new MavenModelReader();  MavenModelReaderResult modelReaderResult=reader.resolveMavenProject(getPom(project),mavenServer,info.activeProfiles,info.inactiveProfiles,serverManager);  return setModel(modelReaderResult,modelReaderResult.getProblems().isEmpty(),false);}  }
class C{  public synchronized void updateOffsets(){  if (!overflowLock) {    overflowLock=true;    for (    Offset offset : offsetPoints.values()) {      offset.update();    }    overflowLock=false;  }}  }
class C{  public static Map<String,Object> uploadImageAndParameters(HttpServletRequest request,String uploadField){  Locale locale=UtilHttp.getLocale(request);  Map<String,Object> results=FastMap.newInstance();  Map<String,String> formInput=FastMap.newInstance();  results.put("formInput",formInput);  ServletFileUpload fu=new ServletFileUpload(new DiskFileItemFactory(10240,new File(new File("runtime"),"tmp")));  List<FileItem> lst=null;  try {    lst=UtilGenerics.checkList(fu.parseRequest(request));  } catch (  FileUploadException e4) {    return ServiceUtil.returnError(e4.getMessage());  }  if (lst.size() == 0) {    String errMsg=UtilProperties.getMessage(err_resource,"layoutEvents.no_files_uploaded",locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return ServiceUtil.returnError(UtilProperties.getMessage(err_resource,"layoutEvents.no_files_uploaded",locale));  }  FileItem fi=null;  FileItem imageFi=null;  for (int i=0; i < lst.size(); i++) {    fi=lst.get(i);    String fieldName=fi.getFieldName();    String fieldStr=fi.getString();    if (fi.isFormField()) {      formInput.put(fieldName,fieldStr);      request.setAttribute(fieldName,fieldStr);    }    if (fieldName.equals(uploadField)) {      imageFi=fi;      results.put("uploadMimeType",fi.getContentType());    }  }  if (imageFi == null) {    String errMsg=UtilProperties.getMessage(err_resource,"layoutEvents.image_null",UtilMisc.toMap("imageFi",imageFi),locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return null;  }  byte[] imageBytes=imageFi.get();  ByteBuffer byteWrap=ByteBuffer.wrap(imageBytes);  results.put("imageData",byteWrap);  results.put("imageFileName",imageFi.getName());  return results;}  }
class C{  public void writeTo(ChannelBuffer data){  super.writeTo(data);  data.writeShort(this.portNumber);  data.writeInt(0);  data.writeShort(0);  for (  OFPacketQueue queue : queues) {    queue.writeTo(data);  }}  }
class C{  public static boolean contains(String name){  return get(name) != null;}  }
class C{  public void assignToRoute(final Itinerary itinerary){  Validate.notNull(itinerary,"Itinerary is required for assignment");  this.itinerary=itinerary;  this.delivery=delivery.updateOnRouting(this.routeSpecification,this.itinerary);}  }
class C{  private void dynInit(){  miniTable.addColumn("C_Order_ID");  miniTable.addColumn("AD_Org_ID");  miniTable.addColumn("C_DocType_ID");  miniTable.addColumn("DocumentNo");  miniTable.addColumn("C_BPartner_ID");  miniTable.addColumn("DateOrdered");  miniTable.addColumn("TotalLines");  miniTable.setMultiSelection(true);  miniTable.setRowSelectionAllowed(true);  miniTable.setColumnClass(0,IDColumn.class,false," ");  miniTable.setColumnClass(1,String.class,true,Msg.translate(Env.getCtx(),"AD_Org_ID"));  miniTable.setColumnClass(2,String.class,true,Msg.translate(Env.getCtx(),"C_DocType_ID"));  miniTable.setColumnClass(3,String.class,true,Msg.translate(Env.getCtx(),"DocumentNo"));  miniTable.setColumnClass(4,String.class,true,Msg.translate(Env.getCtx(),"C_BPartner_ID"));  miniTable.setColumnClass(5,Timestamp.class,true,Msg.translate(Env.getCtx(),"DateOrdered"));  miniTable.setColumnClass(6,BigDecimal.class,true,Msg.translate(Env.getCtx(),"TotalLines"));  miniTable.autoSize();  miniTable.getModel().addTableModelListener(this);  statusBar.setStatusLine(Msg.getMsg(Env.getCtx(),"InOutGenerateSel"));  statusBar.setStatusDB(" ");  tabbedPane.addChangeListener(this);}  }
class C{  protected SimScenario(){  Settings s=new Settings(SCENARIO_NS);  nrofGroups=s.getInt(NROF_GROUPS_S);  this.name=s.valueFillString(s.getSetting(NAME_S));  this.endTime=s.getDouble(END_TIME_S);  this.updateInterval=s.getDouble(UP_INT_S);  this.simulateConnections=s.getBoolean(SIM_CON_S);  s.ensurePositiveValue(nrofGroups,NROF_GROUPS_S);  s.ensurePositiveValue(endTime,END_TIME_S);  s.ensurePositiveValue(updateInterval,UP_INT_S);  this.simMap=null;  this.maxHostRange=1;  this.connectionListeners=new ArrayList<ConnectionListener>();  this.messageListeners=new ArrayList<MessageListener>();  this.movementListeners=new ArrayList<MovementListener>();  this.updateListeners=new ArrayList<UpdateListener>();  this.appListeners=new ArrayList<ApplicationListener>();  this.eqHandler=new EventQueueHandler();  s.setNameSpace(MovementModel.MOVEMENT_MODEL_NS);  int[] worldSize=s.getCsvInts(MovementModel.WORLD_SIZE,2);  this.worldSizeX=worldSize[0];  this.worldSizeY=worldSize[1];  createHosts();  this.world=new World(hosts,worldSizeX,worldSizeY,updateInterval,updateListeners,simulateConnections,eqHandler.getEventQueues());}  }
class C{  public boolean isPanYEnabled(){  return mPanYEnabled;}  }
class C{  public SamplingIntervalDiagnosticsDataType clone(){  SamplingIntervalDiagnosticsDataType result=new SamplingIntervalDiagnosticsDataType();  result.SamplingInterval=SamplingInterval;  result.MonitoredItemCount=MonitoredItemCount;  result.MaxMonitoredItemCount=MaxMonitoredItemCount;  result.DisabledMonitoredItemCount=DisabledMonitoredItemCount;  return result;}  }
class C{  public void testPreferencesClobbersExistingFiles() throws Exception {  File userPrefs=new File(System.getProperty("user.home") + "/.java/.userPrefs/prefs.xml");  FileWriter writer=new FileWriter(userPrefs);  writer.write("lamb");  writer.close();  userPrefs.setReadable(false);  userPrefs.setWritable(false);  long oldLength=userPrefs.length();  Preferences userPreferences=Preferences.userRoot();  userPreferences.sync();  userPreferences.put("a","lion");  userPreferences.flush();  assertTrue("Expected to exist " + userPrefs,userPrefs.exists());  assertTrue("Expected file to be clobbered",oldLength != userPrefs.length());}  }
class C{  public StoragePortRestRep update(URI id,StoragePortUpdate input){  return client.put(StoragePortRestRep.class,input,getIdUrl(),id);}  }
class C{  public String minimizeAbsoluteErrorTipText(){  return "Whether to minimize absolute error.";}  }
class C{  public void removeAllInputs(){  super.removeAllInputs();  double temp1=m_weights[0];  double temp2=m_changeInWeights[0];  m_weights=new double[1];  m_changeInWeights=new double[1];  m_weights[0]=temp1;  m_changeInWeights[0]=temp2;}  }
class C{  @Override public boolean parse(BashPsiBuilder builder){  IElementType token=builder.getTokenType();  log.assertTrue(token == BRACKET_KEYWORD);  PsiBuilder.Marker startMarker=builder.mark();  builder.advanceLexer();  boolean ok;  if (builder.getTokenType() == _BRACKET_KEYWORD) {    builder.error("Empty expression is not allowed");    ok=false;  } else {    ok=parseExpression(builder);  }  ok&=(builder.getTokenType() == _BRACKET_KEYWORD);  if (ok) {    builder.advanceLexer();    startMarker.done(BashElementTypes.CONDITIONAL_COMMAND);    return true;  }  startMarker.drop();  return false;}  }
class C{  public NetscapeCertTypeExtension(byte[] bitString) throws IOException {  this.bitString=new BitArray(bitString.length * 8,bitString).toBooleanArray();  this.extensionId=NetscapeCertType_Id;  this.critical=true;  encodeThis();}  }
class C{  private Shape decodeCornerInside(int width,int height){  return shapeGenerator.createRectangle(0,0,width,height);}  }
class C{  public static <Resp>Resp executeWithConnection(JedisPool jedisPool,int redisDBNum,Function<Jedis,Resp> func){  Preconditions.checkNotNull(jedisPool);  Preconditions.checkNotNull(func);  Jedis conn=null;  boolean gotJedisConnException=false;  try {    conn=jedisPool.getResource();    selectRedisDB(conn,redisDBNum);    return func.apply(conn);  } catch (  JedisConnectionException e) {    jedisPool.returnBrokenResource(conn);    gotJedisConnException=true;    throw e;  } finally {    if (conn != null && !gotJedisConnException) {      jedisPool.returnResource(conn);    }  }}  }
class C{  public Warning(String message,Integer code){  this.code=code;  this.message=message;}  }
class C{  public ImprovedOrientationSensor2Provider(SensorManager sensorManager){  super(sensorManager);  sensorList.add(sensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE));  sensorList.add(sensorManager.getDefaultSensor(Sensor.TYPE_ROTATION_VECTOR));}  }
class C{  public static Paint newBorderPaint(Context context){  final float lineThicknessPx=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,DEFAULT_LINE_THICKNESS_DP,context.getResources().getDisplayMetrics());  final Paint borderPaint=new Paint();  borderPaint.setColor(Color.parseColor(SEMI_TRANSPARENT));  borderPaint.setStrokeWidth(lineThicknessPx);  borderPaint.setStyle(Paint.Style.STROKE);  return borderPaint;}  }
class C{  public Boolean isIsProperty(){  return isProperty;}  }
class C{  public TransactionInput addSignedInput(TransactionOutput output,ECKey signingKey){  return addSignedInput(output.getOutPointFor(),output.getScriptPubKey(),signingKey);}  }
class C{  @Override public Event readEvent() throws IOException {  ensureOpen();  String line=readLine();  if (line == null) {    return null;  } else {    return EventBuilder.withBody(line,outputCharset);  }}  }
class C{  public int topologyLevel(){  if (covtable.cachedLineSchema[1] == -1) {    return 0;  }  if (covtable.cachedLineSchema[3] == -1) {    return 2;  }  return 3;}  }
class C{  public void add(Test test){  tests.add(test);}  }
class C{  static public List<NetworkZoningParam> convertExportMasksToNetworkZoningParam(URI exportGroupURI,List<URI> exportMaskURIs,DbClient dbClient){  ExportGroup exportGroup=dbClient.queryObject(ExportGroup.class,exportGroupURI);  List<NetworkZoningParam> zoningParams=new ArrayList<NetworkZoningParam>();  for (  URI exportMaskURI : exportMaskURIs) {    ExportMask exportMask=dbClient.queryObject(ExportMask.class,exportMaskURI);    if (exportMask == null || exportMask.getInactive()) {      throw WorkflowException.exceptions.workflowConstructionError("ExportMask is null: " + exportMaskURI.toString());    }    NetworkZoningParam zoningParam=new NetworkZoningParam(exportGroup,exportMask,dbClient);    zoningParams.add(zoningParam);  }  return zoningParams;}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer("LabelValue[");  sb.append(this.label);  sb.append(", ");  sb.append(this.value);  sb.append("]");  return (sb.toString());}  }
class C{  public void checkValid(){  nv.checkValid();}  }
class C{  public DaemonJvmLauncherFactory(){}  }
class C{  public static IMethodBinding findMethodInHierarchy(ITypeBinding type,String methodName,ITypeBinding[] parameters){  IMethodBinding method=findMethodInType(type,methodName,parameters);  if (method != null)   return method;  ITypeBinding superClass=type.getSuperclass();  if (superClass != null) {    method=findMethodInHierarchy(superClass,methodName,parameters);    if (method != null)     return method;  }  ITypeBinding[] interfaces=type.getInterfaces();  for (int i=0; i < interfaces.length; i++) {    method=findMethodInHierarchy(interfaces[i],methodName,parameters);    if (method != null)     return method;  }  return null;}  }
class C{  private ScreenOverlayType createBiasErrorGraphBoard(String kmlFilename){  int index=kmlFilename.lastIndexOf(System.getProperty("file.separator"));  if (index == -1) {    index=kmlFilename.lastIndexOf('/');  }  String outdir;  if (index == -1) {    outdir="";  } else {    outdir=kmlFilename.substring(0,index) + System.getProperty("file.separator");  }  PtBiasErrorGraph epBoard=new PtBiasErrorGraph(this.boardCountComparisonFilter.getCountsForHour(null),this.iter,null,"error graph - boarding");  epBoard.createChart(0);  double[] meanErrorBoard=epBoard.getMeanRelError();  double[] meanBiasBoard=epBoard.getMeanAbsBias();  String fileBoard=outdir + "biasErrorGraphDataBoard.txt";  log.info("writing chart data to " + new File(fileBoard).getAbsolutePath());  try {    BufferedWriter bwriter=IOUtils.getBufferedWriter(fileBoard);    StringBuffer buffer=new StringBuffer(200);    buffer.append("hour \t mean relative error \t mean absolute bias");    bwriter.write(buffer.toString());    bwriter.newLine();    for (int i=0; i < meanErrorBoard.length; i++) {      buffer.delete(0,buffer.length());      buffer.append(i + 1);      buffer.append('\t');      buffer.append(meanErrorBoard[i]);      buffer.append('\t');      buffer.append(meanBiasBoard[i]);      bwriter.write(buffer.toString());      bwriter.newLine();    }    bwriter.close();  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  String chartBoard="errorGraphErrorBiasBoard.png";  try {    writeChartToKmz(chartBoard,epBoard.getChart());    return createOverlayBottomRight(chartBoard,"Error Graph [Error/Bias]");  } catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  public TheBetweenlandsClassTransformer registerModule(TransformerModule module){  this.modules.add(module);  return this;}  }
class C{  public ExecutionError(@Nullable Error cause){  super(cause);}  }
class C{  public ParseFile(byte[] data,String contentType){  this(null,data,contentType);}  }
class C{  public MailetException(String message){  super(message);}  }
class C{  public static String toString(int x){  return toString(x,10);}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  @Override public String update(String xml){  try {    return query("/update?stream.body=" + URLEncoder.encode(xml,"UTF-8"));  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private synchronized void failOver() throws SQLException {  failOver(this.currentHostIndex);}  }
class C{  public void registerUnregisteredNamespaces(){  for (int i=0; i < m_unregisteredExtensions.size(); i++) {    String ns=(String)m_unregisteredExtensions.get(i);    ExtensionNamespaceSupport extNsSpt=defineJavaNamespace(ns);    if (extNsSpt != null)     m_extensions.add(extNsSpt);  }}  }
class C{  public FBTraceManager(){}  }
class C{  public NoSuchAlgorithmException(){  super();}  }
class C{  public static boolean includeUser(int flags){  return (flags & USER) != 0;}  }
class C{  private void readNetworkVariables(WifiConfiguration config){  int netId=config.networkId;  if (netId < 0)   return;  String value;  value=mWifiNative.getNetworkVariable(netId,WifiConfiguration.ssidVarName);  if (!TextUtils.isEmpty(value)) {    if (value.charAt(0) != '"') {      config.SSID="\"" + WifiSsid.createFromHex(value).toString() + "\"";    } else {      config.SSID=value;    }  } else {    config.SSID=null;  }  value=mWifiNative.getNetworkVariable(netId,WifiConfiguration.bssidVarName);  if (!TextUtils.isEmpty(value)) {    config.BSSID=value;  } else {    config.BSSID=null;  }  value=mWifiNative.getNetworkVariable(netId,WifiConfiguration.priorityVarName);  config.priority=-1;  if (!TextUtils.isEmpty(value)) {    try {      config.priority=Integer.parseInt(value);    } catch (    NumberFormatException ignore) {    }  }  value=mWifiNative.getNetworkVariable(netId,WifiConfiguration.hiddenSSIDVarName);  config.hiddenSSID=false;  if (!TextUtils.isEmpty(value)) {    try {      config.hiddenSSID=Integer.parseInt(value) != 0;    } catch (    NumberFormatException ignore) {    }  }  value=mWifiNative.getNetworkVariable(netId,WifiConfiguration.modeVarName);  config.isIBSS=false;  if (!TextUtils.isEmpty(value)) {    try {      config.isIBSS=Integer.parseInt(value) != 0;    } catch (    NumberFormatException ignore) {    }  }  value=mWifiNative.getNetworkVariable(netId,WifiConfiguration.frequencyVarName);  config.frequency=0;  if (!TextUtils.isEmpty(value)) {    try {      config.frequency=Integer.parseInt(value);    } catch (    NumberFormatException ignore) {    }  }  value=mWifiNative.getNetworkVariable(netId,WifiConfiguration.wepTxKeyIdxVarName);  config.wepTxKeyIndex=-1;  if (!TextUtils.isEmpty(value)) {    try {      config.wepTxKeyIndex=Integer.parseInt(value);    } catch (    NumberFormatException ignore) {    }  }  for (int i=0; i < 4; i++) {    value=mWifiNative.getNetworkVariable(netId,WifiConfiguration.wepKeyVarNames[i]);    if (!TextUtils.isEmpty(value)) {      config.wepKeys[i]=value;    } else {      config.wepKeys[i]=null;    }  }  value=mWifiNative.getNetworkVariable(netId,WifiConfiguration.pskVarName);  if (!TextUtils.isEmpty(value)) {    config.preSharedKey=value;  } else {    config.preSharedKey=null;  }  value=mWifiNative.getNetworkVariable(config.networkId,WifiConfiguration.Protocol.varName);  if (!TextUtils.isEmpty(value)) {    String vals[]=value.split(" ");    for (    String val : vals) {      int index=lookupString(val,WifiConfiguration.Protocol.strings);      if (0 <= index) {        config.allowedProtocols.set(index);      }    }  }  value=mWifiNative.getNetworkVariable(config.networkId,WifiConfiguration.KeyMgmt.varName);  if (!TextUtils.isEmpty(value)) {    String vals[]=value.split(" ");    for (    String val : vals) {      int index=lookupString(val,WifiConfiguration.KeyMgmt.strings);      if (0 <= index) {        config.allowedKeyManagement.set(index);      }    }  }  value=mWifiNative.getNetworkVariable(config.networkId,WifiConfiguration.AuthAlgorithm.varName);  if (!TextUtils.isEmpty(value)) {    String vals[]=value.split(" ");    for (    String val : vals) {      int index=lookupString(val,WifiConfiguration.AuthAlgorithm.strings);      if (0 <= index) {        config.allowedAuthAlgorithms.set(index);      }    }  }  value=mWifiNative.getNetworkVariable(config.networkId,WifiConfiguration.PairwiseCipher.varName);  if (!TextUtils.isEmpty(value)) {    String vals[]=value.split(" ");    for (    String val : vals) {      int index=lookupString(val,WifiConfiguration.PairwiseCipher.strings);      if (0 <= index) {        config.allowedPairwiseCiphers.set(index);      }    }  }  value=mWifiNative.getNetworkVariable(config.networkId,WifiConfiguration.GroupCipher.varName);  if (!TextUtils.isEmpty(value)) {    String vals[]=value.split(" ");    for (    String val : vals) {      int index=lookupString(val,WifiConfiguration.GroupCipher.strings);      if (0 <= index) {        config.allowedGroupCiphers.set(index);      }    }  }  if (config.enterpriseConfig == null) {    config.enterpriseConfig=new WifiEnterpriseConfig();  }  HashMap<String,String> enterpriseFields=config.enterpriseConfig.getFields();  for (  String key : WifiEnterpriseConfig.getSupplicantKeys()) {    value=mWifiNative.getNetworkVariable(netId,key);    if (!TextUtils.isEmpty(value)) {      enterpriseFields.put(key,removeDoubleQuotes(value));    } else {      enterpriseFields.put(key,WifiEnterpriseConfig.EMPTY_VALUE);    }  }  if (config.enterpriseConfig.migrateOldEapTlsNative(mWifiNative,netId)) {    saveConfig();  }  config.enterpriseConfig.migrateCerts(mKeyStore);}  }
class C{  public PooledByteBufferInputStream(PooledByteBuffer pooledByteBuffer){  super();  Preconditions.checkArgument(!pooledByteBuffer.isClosed());  mPooledByteBuffer=Preconditions.checkNotNull(pooledByteBuffer);  mOffset=0;  mMark=0;}  }
class C{  public PersistentArrayMap(Object[] init){  this.array=init;  this._meta=null;}  }
class C{  private void validateS3Files(List<StorageFile> expectedStorageFiles,List<S3ObjectSummary> actualS3Files,String storageName,BusinessObjectDataKey businessObjectDataKey,String fileDescription){  Map<String,StorageFile> actualFilesMap=getStorageFilesMapFromS3ObjectSummaries(actualS3Files);  for (  StorageFile expectedFile : expectedStorageFiles) {    if (!actualFilesMap.containsKey(expectedFile.getFilePath())) {      throw new ObjectNotFoundException(String.format("%s file \"%s\" does not exist in \"%s\" storage.",StringUtils.capitalize(fileDescription),expectedFile.getFilePath(),storageName));    } else {      StorageFile actualFile=actualFilesMap.get(expectedFile.getFilePath());      if (!Objects.equals(actualFile.getFileSizeBytes(),expectedFile.getFileSizeBytes())) {        throw new IllegalStateException(String.format("Specified file size of %d bytes for %s \"%s\" S3 file in \"%s\" storage does not match file size of %d bytes reported by S3.",expectedFile.getFileSizeBytes(),fileDescription,expectedFile.getFilePath(),storageName,actualFile.getFileSizeBytes()));      }    }  }  List<String> actualFilePaths=new ArrayList<>(actualFilesMap.keySet());  List<String> expectedFilePaths=getFilePathsFromStorageFiles(expectedStorageFiles);  if (!expectedFilePaths.containsAll(actualFilePaths)) {    actualFilePaths.removeAll(expectedFilePaths);    throw new IllegalStateException(String.format("Found unexpected S3 file \"%s\" in \"%s\" storage while validating %s S3 files. Business object data {%s}",actualFilePaths.get(0),storageName,fileDescription,businessObjectDataHelper.businessObjectDataKeyToString(businessObjectDataKey)));  }}  }
class C{  public CommitParams withAuthor(String author){  this.author=author;  return this;}  }
class C{  public static void closeInputStream(InputStream in){  try {    in.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  @Override public SampledEdgeDecorator<E> createEdge(E delegate){  return new SampledEdgeDecorator<E>(delegate);}  }
class C{  public static String serialize(List<Uri> emergencyContacts){  StringBuilder sb=new StringBuilder();  for (int i=0; i < emergencyContacts.size(); i++) {    sb.append(emergencyContacts.get(i).toString());    sb.append(CONTACT_SEPARATOR);  }  if (sb.length() > 0) {    sb.setLength(sb.length() - 1);  }  return sb.toString();}  }
class C{  public CryptoException(String message){  super(message);}  }
class C{  public void componentShown(ComponentEvent e){}  }
class C{  protected EffectImpl(){  super();}  }
class C{  public ImageEvent(Object source,BufferedImage image,String imageName){  super(source);  m_image=image;  m_imageName=imageName;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.061 -0500",hash_original_method="D5C09A7EAC3540D5025F54207902E2D8",hash_generated_method="0A3A120914A3FC2CDB8394889CA70444") public String namespace(){  return theNamespace;}  }
class C{  public FerryTerminal(){  super();}  }
class C{  @Override public void requestFocus(){  jpfPassword.requestFocus();}  }
class C{  public StringElement(String s){  this.s=s;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private SecurityFunctionEntity createSecurityFunctionEntity(String code){  SecurityFunctionEntity securityFunctionEntity=new SecurityFunctionEntity();  securityFunctionEntity.setCode(code);  return herdDao.saveAndRefresh(securityFunctionEntity);}  }
class C{  public void append(byte[] src){  int length=src.length;  if (BUFFER_SIZE - (end - pos) < length) {    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLException("Could not accept income app data."));  }  if (end + length > BUFFER_SIZE) {    System.arraycopy(buffer,pos,buffer,0,end - pos);    end-=pos;    pos=0;  }  System.arraycopy(src,0,buffer,end,length);  end=end + length;}  }
class C{  @Override public void onSearchSubmit(String searchText){  FragmentTransaction fragmentTransaction=mFragmentManager.beginTransaction();  fragmentTransaction.setCustomAnimations(android.R.anim.slide_in_left,android.R.anim.slide_out_right,android.R.anim.slide_in_left,android.R.anim.slide_out_right);  mSearchViewFragment=SearchViewFragment.newInstance(searchText);  fragmentTransaction.add(android.R.id.content,mSearchViewFragment);  fragmentTransaction.hide(mCoordinatorFragment);  fragmentTransaction.addToBackStack(null);  fragmentTransaction.commit();}  }
class C{  public synchronized long length() throws SQLException {  checkClosed();  return getBinaryData().length;}  }
class C{  public static boolean isSamsungGalaxyMini(){  return sBuildModel.equalsIgnoreCase("gt-i5800");}  }
class C{  public void writeFixed(int f) throws IOException {  this.writeULong(f);}  }
class C{  @Override public void output(Vertex output){}  }
class C{  public static boolean isMD5String(final String string){  Preconditions.checkNotNull(string,"Error: String argument can't be null");  return (string.length() == 32) && isHexString(string);}  }
class C{  public Node<T,E> addChild(String name,E kind){  if (name == null || name.length() == 0) {    throw new IllegalArgumentException("A node may not have a null name.");  }  Node<T,E> result=new Node<T,E>(name,this,kind);  children.put(name,result);  return result;}  }
class C{  public void addCert(Cert cert){  certs.add(cert);}  }
class C{  public DateOrTimeProperty(String text){  setText(text);}  }
class C{  public void addNodeValue(int nTargetNode,String sNewValue){  if (m_bNeedsUndoAction) {    addUndoAction(new AddValueAction(nTargetNode,sNewValue));  }  Attribute att=m_Instances.attribute(nTargetNode);  int nCardinality=att.numValues();  ArrayList<String> values=new ArrayList<String>(nCardinality);  for (int iValue=0; iValue < nCardinality; iValue++) {    values.add(att.value(iValue));  }  values.add(sNewValue);  replaceAtt(nTargetNode,att.name(),values);  Estimator[] distributions=m_Distributions[nTargetNode];  int nNewCard=values.size();  for (int iParent=0; iParent < distributions.length; iParent++) {    DiscreteEstimatorBayes distribution=new DiscreteEstimatorBayes(nNewCard,0);    for (int iValue=0; iValue < nNewCard - 1; iValue++) {      distribution.addValue(iValue,distributions[iParent].getProbability(iValue));    }    distributions[iParent]=distribution;  }  for (int iNode=0; iNode < getNrOfNodes(); iNode++) {    if (m_ParentSets[iNode].contains(nTargetNode)) {      distributions=m_Distributions[iNode];      ParentSet parentSet=m_ParentSets[iNode];      int nParentCard=parentSet.getFreshCardinalityOfParents(m_Instances);      Estimator[] newDistributions=new Estimator[nParentCard];      int nCard=getCardinality(iNode);      int nParents=parentSet.getNrOfParents();      int[] values2=new int[nParents];      int iOldPos=0;      int iTargetNode=0;      while (parentSet.getParent(iTargetNode) != nTargetNode) {        iTargetNode++;      }      for (int iPos=0; iPos < nParentCard; iPos++) {        DiscreteEstimatorBayes distribution=new DiscreteEstimatorBayes(nCard,0);        for (int iValue=0; iValue < nCard; iValue++) {          distribution.addValue(iValue,distributions[iOldPos].getProbability(iValue));        }        newDistributions[iPos]=distribution;        int i=0;        values2[i]++;        while (i < nParents && values2[i] == getCardinality(parentSet.getParent(i))) {          values2[i]=0;          i++;          if (i < nParents) {            values2[i]++;          }        }        if (values2[iTargetNode] != nNewCard - 1) {          iOldPos++;        }      }      m_Distributions[iNode]=newDistributions;    }  }}  }
class C{  private void recordSeqno(ThreadIdentifier threadID,EventSeqnoHolder evh,boolean ifAbsent){  boolean removed;  if (logger.isDebugEnabled()) {    logger.debug("recording {} {}",threadID.expensiveToString(),evh.toString());  }  do {    removed=false;    EventSeqnoHolder oldEvh=recordedEvents.putIfAbsent(threadID,evh);    if (oldEvh != null) {synchronized (oldEvh) {        if (oldEvh.removed) {          removed=true;          continue;        } else {          if (ifAbsent) {            break;          }          oldEvh.endOfLifeTimer=0;          if (oldEvh.lastSeqno < evh.lastSeqno) {            oldEvh.lastSeqno=evh.lastSeqno;            oldEvh.versionTag=evh.versionTag;          }        }      }    } else {      evh.endOfLifeTimer=0;    }  } while (removed);}  }
class C{  @DSComment("Unintended picture could be put here") @DSSpec(DSCat.SECURITY) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:26.329 -0500",hash_original_method="DC7CFB067EE80684132B2B92372F3B79",hash_generated_method="5B34C796B6326931CE918675C2735673") public void draw(Canvas canvas){  if (mRecordingCanvas != null) {    endRecording();  }  nativeDraw(canvas.mNativeCanvas,mNativePicture);  canvas.addTaint(getTaint());}  }
class C{  protected void skipAhead(BufferedReader reader){  String skipToken=getSkipToken();  String line;  int lines=getSkipLines();  try {    while ((line=reader.readLine()) != null) {      if (line.startsWith(skipToken)) {        if (--lines == 0) {          return;        }      }    }  } catch (  IOException ex) {    Logger.getLogger(CiscoV15MacAddressTableParse.class.getName()).log(Level.SEVERE,null,ex);  }}  }
class C{  @Override public String toString(){  return EntityTagHeaderParser.toString(this);}  }
class C{  public Map<String,Object> prepare(final Correlation<HttpRequest,HttpResponse> correlation) throws IOException {  final String correlationId=correlation.getId();  final HttpResponse response=correlation.getResponse();  final Map<String,Object> content=new LinkedHashMap<>();  content.put("origin",translate(response.getOrigin()));  content.put("type","response");  content.put("correlation",correlationId);  content.put("protocol",response.getProtocolVersion());  content.put("status",response.getStatus());  addUnless(content,"headers",response.getHeaders(),null);  addBody(response,content);  return content;}  }
class C{  private void convertPassword(Properties p){  String pw=p.getProperty(KEYSTOREPWD);  if (pw != null && !pw.startsWith(xorTag)) {    String epw=obfuscate(pw.toCharArray());    p.put(KEYSTOREPWD,epw);  }  pw=p.getProperty(TRUSTSTOREPWD);  if (pw != null && !pw.startsWith(xorTag)) {    String epw=obfuscate(pw.toCharArray());    p.put(TRUSTSTOREPWD,epw);  }}  }
class C{  public static Class classFromName(String className) throws ClassNotFoundException {  Class result=checkForPrimType(className);  if (result == null) {    result=ClassPathLoader.getLatest().forName(className);  }  return result;}  }
class C{  public static void copyTextFromTextViewAndShowToast(String text,Context c){  ClipData clipData=ClipData.newPlainText("copy",text);  ClipboardManager clipboard=(ClipboardManager)c.getSystemService(c.CLIPBOARD_SERVICE);  clipboard.setPrimaryClip(clipData);  Toast.makeText(c,R.string.message_copied_to_clipboard,Toast.LENGTH_LONG).show();}  }
class C{  private BootstrapInfo(){}  }
class C{  private void walk(Node<T> element,List<Node<T>> list){  list.add(element);  for (  Node<T> data : element.getChildren()) {    walk(data,list);  }}  }
class C{  public CertificateRequest(InetSocketAddress peerAddress){  this(new ArrayList<ClientCertificateType>(),new ArrayList<SignatureAndHashAlgorithm>(),new ArrayList<DistinguishedName>(),peerAddress);}  }
class C{  protected int scoreServiceDocument(ODataRequestContext requestContext,MediaType requiredMediaType){  if (isServiceDocument(requestContext.getUri())) {    int scoreByFormat=scoreByFormat(getFormatOption(requestContext.getUri()),requiredMediaType);    int scoreByMediaType=scoreByMediaType(requestContext.getRequest().getAccept(),requiredMediaType);    return max(scoreByFormat,scoreByMediaType);  } else {    return DEFAULT_SCORE;  }}  }
class C{  private void playEarcon(int earconId){  String earconName=mEarconNames.get(earconId);  if (earconName == null) {    Integer resourceId=sSoundsResourceIds.get(earconId);    if (resourceId != null) {      earconName="[" + earconId + "]";      mTts.addEarcon(earconName,getPackageName(),resourceId);      mEarconNames.put(earconId,earconName);    }  }  mTts.playEarcon(earconName,QUEUING_MODE_INTERRUPT,null);}  }
class C{  private void advanceRunState(int targetState){  for (; ; ) {    int c=ctl.get();    if (runStateOf(c) >= targetState || ctl.compareAndSet(c,ctlOf(targetState,workerCountOf(c))))     break;  }}  }
class C{  public static void encode(InputStream inputStream,OutputStream outputStream) throws IOException {  encode(inputStream,outputStream,0);}  }
class C{  public GraphDistanceFilter(String group,String sources,int distance){  super(group);  m_sources=sources;  m_distance=distance;  m_groupP=new InGroupPredicate(PrefuseLib.getGroupName(group,Graph.NODES));  m_bfs=new BreadthFirstIterator();}  }
class C{  public AuthenticationException(HttpURLConnection httpConn) throws IOException {  super(httpConn);  initFromAuthHeader(httpConn.getHeaderField("WWW-Authenticate"));}  }
class C{  public boolean isUnshared(){  return unshared;}  }
class C{  public void style(Action<ConventionStyle> action){  ConventionStyle convention=new ConventionStyle(this);  action.execute(convention);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrappendchild4.class,args);}  }
class C{  public static void trimAll(String[] strings){  if (strings == null) {    return;  }  for (int i=0; i < strings.length; i++) {    String string=strings[i];    if (string != null) {      strings[i]=trim(string);    }  }}  }
class C{  public static OutputFormat createPrettyPrint(){  OutputFormat format=new OutputFormat();  format.setIndentSize(2);  format.setNewlines(true);  format.setTrimText(true);  format.setPadText(true);  return format;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public final boolean hasResourcesOfType(final ResourceType resourceType){  notNull(resourceType,"ResourceType cannot be null!");  for (  final Resource resource : resources) {    if (resourceType.equals(resource.getType())) {      return true;    }  }  return false;}  }
class C{  public static void check(boolean cond,int value){  if (!cond)   error(String.valueOf(value));}  }
class C{  public DetachReply(final int packetId,final int errorCode){  super(packetId,errorCode);}  }
class C{  protected boolean canRunInWindow(Order order,Map<URI,ExecutionWindow> windows){  NamedURI windowId=order.getExecutionWindowId();  if (ExecutionWindow.isNextWindow(windowId)) {    LOG.debug("Matches NEXT window");    return true;  } else   if ((windowId != null) && windows.containsKey(windowId.getURI())) {    LOG.debug("Matches '" + windowId.getName() + "' window");    return true;  } else {    return false;  }}  }
class C{  public void fullyConnect(Endpoint endpoint){  edgesSet.clear();  edgeLists.clear();  for (  Node node : nodes) {    edgeLists.put(node,new ArrayList<Edge>(4));  }  for (int i=0; i < nodes.size(); i++) {    for (int j=i + 1; j < nodes.size(); j++) {      Node node1=nodes.get(i);      Node node2=nodes.get(j);      Edge edge=new Edge(node1,node2,endpoint,endpoint);      addEdge(edge);    }  }}  }
class C{  public Timer(){  startTime=System.currentTimeMillis();  running=true;}  }
class C{  public DailyTimeIntervalScheduleBuilder endingDailyAt(TimeOfDay timeOfDay){  this.endTimeOfDay=timeOfDay;  return this;}  }
class C{  private static boolean isSimplePreferences(Context context){  return !isXLargeTablet(context);}  }
class C{  public static void register(JComponent comp){  if (INSTANCE == null) {    INSTANCE=new ViewTooltips();  }  INSTANCE.attachTo(comp);}  }
class C{  private Route nextPostponed(){  return postponedRoutes.remove(0);}  }
class C{  public void changeCategory(ManualCategory category){  currentCategory=category;  currentCategory.init(this,true);  currentCategory.setPage(1,this);}  }
class C{  public UserProfileImpl(int userId,int product,int profile){  _userId=userId;  _product=product;  _profile=profile;}  }
class C{  private static boolean doSeaZone(){  String ans="";  while (true) {    ans=JOptionPane.showInputDialog(null,"Only Do Sea Zones? Enter [Y/N]");    if (ans == null) {      System.out.println("Cannot leave this blank!");      System.out.println("Retry");    } else {      if (ans.equalsIgnoreCase("Y")) {        return true;      } else       if (ans.equalsIgnoreCase("N")) {        return false;      } else {        System.out.println("You must enter Y or N");      }    }  }}  }
class C{  public int addCount(int size){  int original=count();  setCount(original + size);  return count - original;}  }
class C{  public int macStyleAsInt(){  return this.data.readUShort(Offset.macStyle.offset);}  }
class C{  protected boolean specialResolution(Vector<Report> vPhaseReport,Entity entityTarget){  return false;}  }
class C{  public static int binarySearch(short[] a,short key){  int low=0;  int high=a.length - 1;  while (low <= high) {    int mid=(low + high) >> 1;    short midVal=a[mid];    if (midVal < key)     low=mid + 1; else     if (midVal > key)     high=mid - 1; else     return mid;  }  return -(low + 1);}  }
class C{  private static void loadCache(IgniteCache<Long,Person> cache){  long start=System.currentTimeMillis();  cache.loadCache(null,ENTRY_COUNT);  long end=System.currentTimeMillis();  System.out.println(">>> Loaded " + cache.size() + " keys with backups in "+ (end - start)+ "ms.");}  }
class C{  private Method makeInputEventMethod(RCFGNode node){  ArgumentValue receiver=makeMethodReceiver(node);  ArgumentValue[] args=new ArgumentValue[node.getNumArgs()];  for (int i=0; i < node.getNumArgs(); i++) {    if (node.isArgPointer(i)) {      args[i]=getArgumentValueForPointer(node,i);    } else {      args[i]=getArgumentValueForPrimitive(node.getArgValue(i),node.getArgumentType(i));    }  }  Method method=new Method(node.getEntryPoint(),node,args,receiver);  method.checkForSynthetic();  return method;}  }
class C{  public JCheckBox createJCheckBox(String name) throws MissingResourceException, ResourceFormatException, MissingListenerException {  JCheckBox result=new JCheckBox(getString(name + TEXT_SUFFIX));  initializeButton(result,name);  try {    result.setSelected(getBoolean(name + SELECTED_SUFFIX));  } catch (  MissingResourceException e) {  }  return result;}  }
class C{  public V remove(K key){  BalancedBinaryNode<K,V> p=getEntry(key);  if (p == null)   return null;  V oldValue=p.value;  deleteEntry(p);  return oldValue;}  }
class C{  private void processComment(DocCommentNode comment){  this.key=new KeyPair("IGNORE",-1);  hasDefaultProperty=false;  if (comment.def instanceof PackageDefinitionNode) {    processPackage((PackageDefinitionNode)comment.def);  } else   if (comment.def instanceof ClassDefinitionNode) {    ClassDefinitionNode cd=(ClassDefinitionNode)comment.def;    processClassAndInterface(cd);  } else   if (comment.def instanceof FunctionDefinitionNode) {    processFunction((FunctionDefinitionNode)comment.def);  } else   if (comment.def instanceof VariableDefinitionNode) {    processField((VariableDefinitionNode)comment.def);  } else {    this.key.name="Unsupported";  }  if (this.key.type == -1)   return;  this.key.isStatic=isStatic;  if (comment.getId() != null)   processTags(comment.getId());  if (!exclude && hasInheritTag) {    processInheritDoc();  }  processMetadata(comment);  if (comment.def instanceof ClassDefinitionNode && abcClass != null) {    if (!hasDefaultProperty) {      ClassDefinitionNode cd=(ClassDefinitionNode)comment.def;      List<MetaData> metadataList=abcClass.getMetaData(StandardDefs.MD_DEFAULTPROPERTY,true);      if (metadataList.size() != 0) {        inheritMetaDataComment(cd.debug_name,metadataList.get(0));      }    }  }}  }
class C{  public static WindowActionEvent createWindowClosingEvent(Window.ClosingEvent event){  return new WindowActionEvent(event,WindowAction.CLOSING);}  }
class C{  public CNodeMenuBuilder(final JCriteriumTreeNode node,final CCriteriumTree ctree,final List<ICriteriumCreator> criteria){  m_criteriumNode=node;  final CCriteriumTreeNode clickedCriterium=CCriteriumFunctions.findNode(ctree.getRoot(),node.getCriterium());  m_appendAnd=new JMenuItem(new CAppendAndOperatorAction(ctree,clickedCriterium));  m_appendOr=new JMenuItem(new CAppendOrOperatorAction(ctree,clickedCriterium));  m_appendNot=new JMenuItem(new CAppendNotOperatorAction(ctree,clickedCriterium));  m_popup.add(m_appendAnd);  m_popup.add(m_appendOr);  m_popup.add(m_appendNot);  m_popup.add(new JSeparator());  m_insertAnd=new JMenuItem(new CInsertAndOperatorAction(ctree,clickedCriterium));  m_insertOr=new JMenuItem(new CInsertOrOperatorAction(ctree,clickedCriterium));  m_insertNot=new JMenuItem(new CInsertNotOperatorAction(ctree,clickedCriterium));  m_popup.add(m_insertAnd);  m_popup.add(m_insertOr);  m_popup.add(m_insertNot);  m_popup.add(new JSeparator());  m_conditionSubmenu=new JMenu("Create Condition");  for (  final ICriteriumCreator condition : criteria) {    m_conditionSubmenu.add(new JMenuItem(new CAddConditionAction(ctree,clickedCriterium,condition)));  }  m_popup.add(m_conditionSubmenu);  m_popup.add(new JSeparator());  m_remove=new JMenuItem(new CRemoveAction(ctree,clickedCriterium));  m_popup.add(m_remove);  m_popup.add(new JSeparator());  m_removeAll=new JMenuItem(new CRemoveAllAction(ctree));  m_popup.add(m_removeAll);}  }
class C{  private static String checkReadPlanets(){  System.out.println("Checking readPlanets...");  String planetsTxtPath="./data/planets.txt";  Planet[] actualOutput=NBody.readPlanets(planetsTxtPath);  if (actualOutput == null) {    return "FAIL: readPlanets(); null output";  }  if (actualOutput.length != 5) {    return "FAIL: readPlanets().length: Expected 5 and you gave " + actualOutput.length;  }  boolean foundEarth=false;  boolean foundMars=false;  boolean foundMercury=false;  boolean foundSun=false;  boolean foundVenus=false;  boolean randomChecksOkay=true;  for (  Planet p : actualOutput) {    if ("earth.gif".equals(p.imgFileName)) {      foundEarth=true;      if (!doubleEquals(p.xxPos,1.4960e+11,0.01)) {        System.out.println("Advice: Your Earth doesn't have the right xxPos!");        randomChecksOkay=false;      }    } else     if ("mars.gif".equals(p.imgFileName)) {      foundMars=true;    } else     if ("mercury.gif".equals(p.imgFileName)) {      foundMercury=true;      if (!doubleEquals(p.yyPos,0,0.01)) {        System.out.println("Advice: Your Mercury doesn't have the right yyPos!");        randomChecksOkay=false;      }    } else     if ("sun.gif".equals(p.imgFileName)) {      foundSun=true;    } else     if ("venus.gif".equals(p.imgFileName)) {      foundVenus=true;      if (!doubleEquals(p.mass,4.8690e+24,0.01)) {        System.out.println("Advice: Your Venus doesn't have the right mass!");        randomChecksOkay=false;      }    }  }  String missingPlanets="";  if (!foundEarth) {    missingPlanets+="Earth, ";  }  if (!foundMars) {    missingPlanets+="Mars, ";  }  if (!foundMercury) {    missingPlanets+="Mercury, ";  }  if (!foundSun) {    missingPlanets+="Sun, ";  }  if (!foundVenus) {    missingPlanets+="Venus, ";  }  if (missingPlanets.length() > 0) {    String answer="FAIL: readPlanets(); Missing these planets: ";    answer+=missingPlanets.substring(0,missingPlanets.length() - 2);    return answer;  }  if (!randomChecksOkay) {    return "FAIL: readPlanets(); Not all planets have correct info!";  }  return "PASS: readPlanets(); Congrats! This was the hardest test!";}  }
class C{  @RequestMapping(value="day_graph") @ResponseBody public String dayGraph(@RequestParam(value="id",required=true) String id,@RequestParam(value="y",required=true) Integer year,@RequestParam(value="m",required=true) Integer month,@RequestParam(value="d",required=true) Integer day){  try {    Calendar cal=Calendar.getInstance();    cal.set(Calendar.YEAR,year);    cal.set(Calendar.MONTH,month - 1);    cal.set(Calendar.DAY_OF_MONTH,day);    DateFormat format=new SimpleDateFormat("yyyyMMdd");    Integer dateInt=Integer.parseInt(format.format(cal.getTime()));    Graph graph=new Graph();    graph.add(logLevelHourlyStatisticsRepository.findByRabbitIdAndDateInt(id,dateInt));    return graph.getGraph();  } catch (  Exception e) {    logger.error(e.getMessage(),e);    return "[]";  }}  }
class C{  public int size(){  return vertices.size();}  }
class C{  public void loading(){  mHintView.setVisibility(View.GONE);  mProgressBar.setVisibility(View.VISIBLE);  layout_progress.setVisibility(View.VISIBLE);  txt_progresstext.setVisibility(View.VISIBLE);}  }
class C{  public void landscapeChanged(final QuadTree quadTree){  for (int i=0; i < getNumberOfChildren(); ++i) {    final Spatial child=getChild(i);    if (child instanceof Tool) {      ((Tool)child).updateElevation(quadTree);    }  }}  }
class C{  public void pickFile(){  try {    pick();  } catch (  PickerException e) {    e.printStackTrace();    if (callback != null) {      callback.onError(e.getMessage());    }  }}  }
class C{  protected void addToChannelsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Endpoint_toChannels_feature"),getString("_UI_PropertyDescriptor_description","_UI_Endpoint_toChannels_feature","_UI_Endpoint_type"),EipPackage.Literals.ENDPOINT__TO_CHANNELS,true,false,true,null,null,null));}  }
class C{  public List<String> createTraitType(String traitName) throws AtlasServiceException {  return createTraitType(traitName,null);}  }
class C{  public byte[] toByteArray(){  ByteBuffer buff=ByteBuffer.allocate(BYTES).order(ByteOrder.LITTLE_ENDIAN);  writeTo(buff);  return buff.array();}  }
class C{  public static byte[] bitmapToByte(Bitmap b){  ByteArrayOutputStream o=new ByteArrayOutputStream();  b.compress(Bitmap.CompressFormat.PNG,100,o);  return o.toByteArray();}  }
class C{  public boolean sendTextMessage(String text,String contentType){  if (!NgnStringUtils.isNullOrEmpty(contentType)) {    super.addHeader("Content-Type",contentType);  } else {    super.addHeader("Content-Type",NgnContentType.TEXT_PLAIN);  }  byte[] bytes=text.getBytes();  ByteBuffer payload=ByteBuffer.allocateDirect(bytes.length);  payload.put(bytes);  return mSession.send(payload,payload.capacity());}  }
class C{  @Override public void addDirtyFile(final FilePath newcomer){  final VirtualFile vcsRoot=myVcsManager.getVcsRootFor(newcomer);  myAffectedContentRoots.add(vcsRoot);  THashSet<FilePath> dirsByRoot=myDirtyDirectoriesRecursively.get(vcsRoot);  if (dirsByRoot != null) {    for (    FilePath oldBoy : dirsByRoot) {      if (newcomer.isUnder(oldBoy,false)) {        return;      }    }  }  final THashSet<FilePath> dirtyFiles=myDirtyFiles.get(vcsRoot);  if (dirtyFiles == null) {    final THashSet<FilePath> set=new THashSet<FilePath>();    set.add(newcomer);    myDirtyFiles.put(vcsRoot,set);  } else {    if (newcomer.isDirectory()) {      for (Iterator<FilePath> iterator=dirtyFiles.iterator(); iterator.hasNext(); ) {        final FilePath oldBoy=iterator.next();        if (!oldBoy.isDirectory() && Comparing.equal(oldBoy.getVirtualFileParent(),newcomer.getVirtualFile())) {          iterator.remove();        }      }    } else     if (!dirtyFiles.isEmpty()) {      VirtualFile parent=newcomer.getVirtualFileParent();      if (parent != null && dirtyFiles.contains(VcsUtil.getFilePath(parent))) {        return;      }      dirtyFiles.add(newcomer);    }  }}  }
class C{  public void acceptVisitorStartingFromLocation(CFG cfg,PathVisitor visitor,BasicBlock startBlock,InstructionHandle startHandle){  int index;  for (index=0; index < getLength(); index++) {    if (getBlockIdAt(index) == startBlock.getLabel()) {      break;    }  }  assert index < getLength();  Iterator<InstructionHandle> i=startBlock.instructionIterator();  if (startHandle != startBlock.getFirstInstruction()) {    while (i.hasNext()) {      InstructionHandle handle=i.next();      if (handle.getNext() == startHandle) {        break;      }    }  }  BasicBlock basicBlock=startBlock;  while (true) {    visitor.visitBasicBlock(basicBlock);    while (i.hasNext()) {      visitor.visitInstructionHandle(i.next());    }    index++;    if (index >= getLength()) {      break;    }    BasicBlock next=cfg.lookupBlockByLabel(getBlockIdAt(index));    Edge edge=cfg.lookupEdge(basicBlock,next);    assert edge != null;    visitor.visitEdge(edge);    basicBlock=next;    i=basicBlock.instructionIterator();  }}  }
class C{  public void close(){  if (closed) {    throw new IllegalStateException("Already closed.");  }  closed=true;  trace("kill session " + this);  notifyNextAction();}  }
class C{  public void selectOperators(List<Operator> ops){}  }
class C{  public SerializationHandler createSerializationHandler(Result outputTarget,OutputProperties format) throws TransformerException {  SerializationHandler xoh;  org.w3c.dom.Node outputNode=null;  if (outputTarget instanceof DOMResult) {    outputNode=((DOMResult)outputTarget).getNode();    org.w3c.dom.Node nextSibling=((DOMResult)outputTarget).getNextSibling();    org.w3c.dom.Document doc;    short type;    if (null != outputNode) {      type=outputNode.getNodeType();      doc=(org.w3c.dom.Node.DOCUMENT_NODE == type) ? (org.w3c.dom.Document)outputNode : outputNode.getOwnerDocument();    } else {      boolean isSecureProcessing=m_stylesheetRoot.isSecureProcessing();      doc=org.apache.xml.utils.DOMHelper.createDocument(isSecureProcessing);      outputNode=doc;      type=outputNode.getNodeType();      ((DOMResult)outputTarget).setNode(outputNode);    }    DOMBuilder handler=(org.w3c.dom.Node.DOCUMENT_FRAGMENT_NODE == type) ? new DOMBuilder(doc,(org.w3c.dom.DocumentFragment)outputNode) : new DOMBuilder(doc,outputNode);    if (nextSibling != null)     handler.setNextSibling(nextSibling);    String encoding=format.getProperty(OutputKeys.ENCODING);    xoh=new ToXMLSAXHandler(handler,(LexicalHandler)handler,encoding);  } else   if (outputTarget instanceof SAXResult) {    ContentHandler handler=((SAXResult)outputTarget).getHandler();    if (null == handler)     throw new IllegalArgumentException("handler can not be null for a SAXResult");    LexicalHandler lexHandler;    if (handler instanceof LexicalHandler)     lexHandler=(LexicalHandler)handler; else     lexHandler=null;    String encoding=format.getProperty(OutputKeys.ENCODING);    String method=format.getProperty(OutputKeys.METHOD);    ToXMLSAXHandler toXMLSAXHandler=new ToXMLSAXHandler(handler,lexHandler,encoding);    toXMLSAXHandler.setShouldOutputNSAttr(false);    xoh=toXMLSAXHandler;    String publicID=format.getProperty(OutputKeys.DOCTYPE_PUBLIC);    String systemID=format.getProperty(OutputKeys.DOCTYPE_SYSTEM);    if (systemID != null)     xoh.setDoctypeSystem(systemID);    if (publicID != null)     xoh.setDoctypePublic(publicID);    if (handler instanceof TransformerClient) {      XalanTransformState state=new XalanTransformState();      ((TransformerClient)handler).setTransformState(state);      ((ToSAXHandler)xoh).setTransformState(state);    }  } else   if (outputTarget instanceof StreamResult) {    StreamResult sresult=(StreamResult)outputTarget;    try {      SerializationHandler serializer=(SerializationHandler)SerializerFactory.getSerializer(format.getProperties());      if (null != sresult.getWriter())       serializer.setWriter(sresult.getWriter()); else       if (null != sresult.getOutputStream())       serializer.setOutputStream(sresult.getOutputStream()); else       if (null != sresult.getSystemId()) {        String fileURL=sresult.getSystemId();        if (fileURL.startsWith("file:///")) {          if (fileURL.substring(8).indexOf(":") > 0)           fileURL=fileURL.substring(8); else           fileURL=fileURL.substring(7);        } else         if (fileURL.startsWith("file:/")) {          if (fileURL.substring(6).indexOf(":") > 0)           fileURL=fileURL.substring(6); else           fileURL=fileURL.substring(5);        }        m_outputStream=new java.io.FileOutputStream(fileURL);        serializer.setOutputStream(m_outputStream);        xoh=serializer;      } else       throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_NO_OUTPUT_SPECIFIED,null));      xoh=serializer;    } catch (    IOException ioe) {      throw new TransformerException(ioe);    }  } else {    throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_CANNOT_TRANSFORM_TO_RESULT_TYPE,new Object[]{outputTarget.getClass().getName()}));  }  xoh.setTransformer(this);  SourceLocator srcLocator=getStylesheet();  xoh.setSourceLocator(srcLocator);  return xoh;}  }
class C{  public boolean isRemoteMediaLoaded() throws TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  return isRemoteMediaPaused() || isRemoteMediaPlaying();}  }
class C{  public Cone(Position centerPosition,double northSouthRadius,double verticalRadius,double eastWestRadius){  if (centerPosition == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (northSouthRadius <= 0 || eastWestRadius <= 0 || verticalRadius <= 0) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","radius <= 0");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.centerPosition=centerPosition;  this.northSouthRadius=northSouthRadius;  this.verticalRadius=verticalRadius;  this.eastWestRadius=eastWestRadius;  this.setUpGeometryCache();}  }
class C{  public static String createClubId(Delegator delegator,String prefix,int length){  final String clubSeqName="PartyClubSeq";  String clubId=prefix != null ? prefix : "";  Long seq=delegator.getNextSeqIdLong(clubSeqName);  clubId=clubId + UtilFormatOut.formatPaddedNumber(seq.longValue(),(length - clubId.length() - 1));  int check=UtilValidate.getLuhnCheckDigit(clubId);  clubId=clubId + Integer.toString(check);  return clubId;}  }
class C{  public boolean checkUserEMail(String email){  try {    if (email.length() == 0)     return true;    log.debug("checkUserMail: " + email);    TypedQuery<Adresses> query=em.createQuery("select c from Adresses as c where c.email LIKE :email AND c.deleted <> :deleted",Adresses.class);    query.setParameter("email",email);    query.setParameter("deleted","true");    int count=query.getResultList().size();    log.debug("size: " + count);    if (count > 0) {      return false;    }  } catch (  Exception ex2) {    log.error("checkUserEMail: ",ex2);  }  return true;}  }
class C{  public ValueNamePair(String value,String name){  super(name);  m_value=value;  if (m_value == null)   m_value="";}  }
class C{  public void updateComponent(int row){  updateComponent(row,row);}  }
class C{  public PTQuery_Partial HappenedBeforeJoin(Filter filter,String q,PTQuery_Partial Q) throws PTQueryException {  return AddHappenedBefore(this,filter,q,Q);}  }
class C{  public static Object[] putAll(){  Region region=cache.getRegion(Region.SEPARATOR + REGION_NAME);  assertNotNull(region);  try {    Map map=new LinkedHashMap();    map.put(PUTALL_KEY1,PUTALL_VALUE1);    map.put(PUTALL_KEY2,PUTALL_VALUE2);    map.put(PUTALL_KEY3,PUTALL_VALUE3);    map.put(PUTALL_KEY4,PUTALL_VALUE4);    map.put(PUTALL_KEY5,PUTALL_VALUE5);    region.putAll(map,"putAllCallbackArg");    EventID[] evids=new EventID[5];    evids[0]=putAlleventId1;    evids[1]=putAlleventId2;    evids[2]=putAlleventId3;    evids[3]=putAlleventId4;    evids[4]=putAlleventId5;    assertNotNull(evids[0]);    assertNotNull(evids[1]);    assertNotNull(evids[2]);    assertNotNull(evids[3]);    assertNotNull(evids[4]);    return evids;  } catch (  Exception e) {    fail("put failed due to " + e);  }  return null;}  }
class C{  public static boolean isLastNetworkStateStored(Object object){  return ConnectionBuddy.getInstance().getConfiguration().getInMemoryCache().snapshot().containsKey(object.toString());}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(3);  newVector.addElement(new Option("\tFull name of base classifier.\n" + "\t(default: " + defaultClassifierString() + ((defaultClassifierOptions().length > 0) ? " with options " + Utils.joinOptions(defaultClassifierOptions()) + ")" : ")"),"W",1,"-W"));  newVector.addAll(Collections.list(super.listOptions()));  newVector.addElement(new Option("","",0,"\nOptions specific to classifier " + m_Classifier.getClass().getName() + ":"));  newVector.addAll(Collections.list(((OptionHandler)m_Classifier).listOptions()));  return newVector.elements();}  }
class C{  public synchronized Sha256Hash hashForSignature(int inputIndex,byte[] connectedScript,byte sigHashType){  try {    byte[][] inputScripts=new byte[inputs.size()][];    long[] inputSequenceNumbers=new long[inputs.size()];    for (int i=0; i < inputs.size(); i++) {      inputScripts[i]=inputs.get(i).getScriptBytes();      inputSequenceNumbers[i]=inputs.get(i).getSequenceNumber();      inputs.get(i).setScriptBytes(TransactionInput.EMPTY_ARRAY);    }    connectedScript=Script.removeAllInstancesOfOp(connectedScript,ScriptOpCodes.OP_CODESEPARATOR);    TransactionInput input=inputs.get(inputIndex);    input.setScriptBytes(connectedScript);    ArrayList<TransactionOutput> outputs=this.outputs;    if ((sigHashType & 0x1f) == (SigHash.NONE.ordinal() + 1)) {      this.outputs=new ArrayList<TransactionOutput>(0);      for (int i=0; i < inputs.size(); i++)       if (i != inputIndex)       inputs.get(i).setSequenceNumber(0);    } else     if ((sigHashType & 0x1f) == (SigHash.SINGLE.ordinal() + 1)) {      if (inputIndex >= this.outputs.size()) {        for (int i=0; i < inputs.size(); i++) {          inputs.get(i).setScriptBytes(inputScripts[i]);          inputs.get(i).setSequenceNumber(inputSequenceNumbers[i]);        }        this.outputs=outputs;        return new Sha256Hash("0100000000000000000000000000000000000000000000000000000000000000");      }      this.outputs=new ArrayList<TransactionOutput>(this.outputs.subList(0,inputIndex + 1));      for (int i=0; i < inputIndex; i++)       this.outputs.set(i,new TransactionOutput(params,this,NEGATIVE_ONE,new byte[]{}));      for (int i=0; i < inputs.size(); i++)       if (i != inputIndex)       inputs.get(i).setSequenceNumber(0);    }    ArrayList<TransactionInput> inputs=this.inputs;    if ((sigHashType & SIGHASH_ANYONECANPAY_VALUE) == SIGHASH_ANYONECANPAY_VALUE) {      this.inputs=new ArrayList<TransactionInput>();      this.inputs.add(input);    }    ByteArrayOutputStream bos=new UnsafeByteArrayOutputStream(length == UNKNOWN_LENGTH ? 256 : length + 4);    bitcoinSerialize(bos);    uint32ToByteStreamLE(0x000000ff & sigHashType,bos);    Sha256Hash hash=new Sha256Hash(doubleDigest(bos.toByteArray()));    bos.close();    this.inputs=inputs;    for (int i=0; i < inputs.size(); i++) {      inputs.get(i).setScriptBytes(inputScripts[i]);      inputs.get(i).setSequenceNumber(inputSequenceNumbers[i]);    }    this.outputs=outputs;    return hash;  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public Map<Integer,Double> compute(double... dataset){  return computeInPlace(dataset.clone());}  }
class C{  private static void updateReplicatedConfiguration(Configuration backupConfiguration,String name,int portOffset,List<String> remoteConnectors,boolean fullServer){  backupConfiguration.setName(name);  backupConfiguration.setJournalDirectory(backupConfiguration.getJournalDirectory() + name);  backupConfiguration.setPagingDirectory(backupConfiguration.getPagingDirectory() + name);  backupConfiguration.setLargeMessagesDirectory(backupConfiguration.getLargeMessagesDirectory() + name);  backupConfiguration.setBindingsDirectory(backupConfiguration.getBindingsDirectory() + name);  updateAcceptorsAndConnectors(backupConfiguration,portOffset,remoteConnectors,fullServer);}  }
class C{  public boolean isInitialized(){  return _initialized;}  }
class C{  private List<TransitRouteStop> computeNewRouteProfile(TransitScheduleFactoryImpl factory,TransitRoute refTransitRoute,Map<Id<TransitRoute>,TransitRoute> transitRoutes,String[] listOfRoutes,NetworkRoute newRoute,List<TransitRouteStop> stops){  List<TransitRouteStop> newStops=new ArrayList<TransitRouteStop>();  for (int i=0; i < refTransitRoute.getStops().size(); i++) {    double arrivalOffset=0;    int arrCounter=0;    double departureOffset=0;    int depCounter=0;    for (int j=0; j < listOfRoutes.length; j++) {      TransitRouteStop stop=transitRoutes.get(Id.create(listOfRoutes[j],TransitRoute.class)).getStops().get(i);      arrivalOffset+=stop.getArrivalOffset();      arrCounter++;      departureOffset+=stop.getDepartureOffset();      depCounter++;    }    TransitRouteStop newStop=factory.createTransitRouteStop(refTransitRoute.getStops().get(i).getStopFacility(),arrivalOffset / arrCounter,departureOffset / depCounter);    newStop.setAwaitDepartureTime(refTransitRoute.getStops().get(i).isAwaitDepartureTime());    newStops.add(newStop);  }  return newStops;}  }
class C{  public QueryTask populateLocalInstanceInformationFromQueryResults(EnumerationDeletionContext aws,Operation op){  QueryTask responseTask=op.getBody(QueryTask.class);  for (  Object s : responseTask.results.documents.values()) {    ComputeState localInstance=Utils.fromJson(s,ComputeService.ComputeState.class);    if (!localInstance.id.startsWith(AWS_INSTANCE_ID_PREFIX)) {      continue;    }    aws.localInstanceIds.put(localInstance.id,localInstance);  }  aws.pageNo++;  aws.nextPageLink=responseTask.results.nextPageLink;  logInfo("Next page link is %s",aws.nextPageLink);  return responseTask;}  }
class C{  public void appendTextString(byte[] textString){  if (null == textString) {    throw new NullPointerException("Text-string is null.");  }  if (null == mData) {    mData=new byte[textString.length];    System.arraycopy(textString,0,mData,0,textString.length);  } else {    ByteArrayOutputStream newTextString=new ByteArrayOutputStream();    try {      newTextString.write(mData);      newTextString.write(textString);    } catch (    IOException e) {      e.printStackTrace();      throw new NullPointerException("appendTextString: failed when write a new Text-string");    }    mData=newTextString.toByteArray();  }}  }
class C{  public void testColdDeployEar(){  java.io.File earFile=new java.io.File("target/test-artifacts/simple-ear.ear");  EAR ear=(EAR)factory.createDeployable("jonas4x",earFile.getAbsolutePath(),DeployableType.EAR);  ear.setName("test");  setupAdminColdDeployment();  deployer.deploy(ear);  assertFalse(fileHandler.exists(deployer.getDeployableDir(ear) + "/simple-ear.ear"));  assertTrue(fileHandler.exists(deployer.getDeployableDir(ear) + "/autoload/test.ear"));}  }
class C{  public void show(boolean showNoMatterWhat){  if (showNoMatterWhat || showOnMessage) {    if (!visible) {      TypeScriptConsoleHelper.showConsole(this);    } else {      consoleManager.showConsoleView(this);    }  }}  }
