class C{  public void testFilterIndexReader() throws Exception {  Directory directory=newDirectory();  IndexWriter writer=new IndexWriter(directory,newIndexWriterConfig(new MockAnalyzer(random())));  Document d1=new Document();  d1.add(newTextField("default","one two",Field.Store.YES));  writer.addDocument(d1);  Document d2=new Document();  d2.add(newTextField("default","one three",Field.Store.YES));  writer.addDocument(d2);  Document d3=new Document();  d3.add(newTextField("default","two four",Field.Store.YES));  writer.addDocument(d3);  writer.forceMerge(1);  writer.close();  Directory target=newDirectory();  ((BaseDirectoryWrapper)target).setCrossCheckTermVectorsOnClose(false);  writer=new IndexWriter(target,newIndexWriterConfig(new MockAnalyzer(random())));  try (LeafReader reader=new TestReader(getOnlyLeafReader(DirectoryReader.open(directory)))){    writer.addIndexes(SlowCodecReaderWrapper.wrap(reader));  }   writer.close();  IndexReader reader=DirectoryReader.open(target);  TermsEnum terms=MultiFields.getTerms(reader,"default").iterator();  while (terms.next() != null) {    assertTrue(terms.term().utf8ToString().indexOf('e') != -1);  }  assertEquals(TermsEnum.SeekStatus.FOUND,terms.seekCeil(new BytesRef("one")));  PostingsEnum positions=terms.postings(null,PostingsEnum.ALL);  while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {    assertTrue((positions.docID() % 2) == 1);  }  reader.close();  directory.close();  target.close();}  }
class C{  public static Result diagnose(){  return ok(diagnostic.render("title.siteSetting",Diagnostic.checkAll()));}  }
class C{  public OutlierResult run(Database database,Relation<? extends NumberVector> relation){  @SuppressWarnings("unchecked") PrimitiveDistanceQuery<? super NumberVector> distq=(PrimitiveDistanceQuery<? super NumberVector>)database.getDistanceQuery(relation,distanceFunction);  Collection<? extends NumberVector> refPoints=refp.getReferencePoints(relation);  if (refPoints.isEmpty()) {    throw new AbortException("Cannot compute ROS without reference points!");  }  DBIDs ids=relation.getDBIDs();  if (k >= ids.size()) {    throw new AbortException("k must not be chosen larger than the database size!");  }  WritableDoubleDataStore rbod_score=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_STATIC | DataStoreFactory.HINT_HOT,Double.NaN);  for (  NumberVector refPoint : refPoints) {    DoubleDBIDList referenceDists=computeDistanceVector(refPoint,relation,distq);    updateDensities(rbod_score,referenceDists);  }  DoubleMinMax mm=new DoubleMinMax();  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    mm.put(rbod_score.doubleValue(iditer));  }  double scale=mm.getMax() > 0. ? 1. / mm.getMax() : 1.;  mm.reset();  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    double score=1 - (rbod_score.doubleValue(iditer) * scale);    mm.put(score);    rbod_score.putDouble(iditer,score);  }  DoubleRelation scoreResult=new MaterializedDoubleRelation("Reference-points Outlier Scores","reference-outlier",rbod_score,relation.getDBIDs());  OutlierScoreMeta scoreMeta=new BasicOutlierScoreMeta(mm.getMin(),mm.getMax(),0.,1.,0.);  OutlierResult result=new OutlierResult(scoreMeta,scoreResult);  result.addChildResult(new ReferencePointsResult<>("Reference points","reference-points",refPoints));  return result;}  }
class C{  Field(String tableName,String columnName,int charsetIndex,int jdbcType,int length){  this.tableName=tableName;  this.name=columnName;  this.length=length;  this.sqlType=jdbcType;  this.colFlag=0;  this.colDecimals=0;  this.collationIndex=charsetIndex;  this.valueNeedsQuoting=determineNeedsQuoting();switch (this.sqlType) {case Types.BINARY:case Types.VARBINARY:    this.colFlag|=128;  this.colFlag|=16;break;}}  }
class C{  public RemoteAtRequest(XBeeAddress16 remoteAddress16,String command,int[] value){  this(XBeeRequest.DEFAULT_FRAME_ID,XBeeAddress64.BROADCAST,remoteAddress16,true,command,value);}  }
class C{  private int read1(byte[] b,int off,int len) throws IOException {  int avail=count - pos;  if (avail <= 0) {    if (len >= getBufIfOpen().length && markpos < 0) {      return getInIfOpen().read(b,off,len);    }    fill();    avail=count - pos;    if (avail <= 0)     return -1;  }  int cnt=(avail < len) ? avail : len;  System.arraycopy(getBufIfOpen(),pos,b,off,cnt);  pos+=cnt;  return cnt;}  }
class C{  public void testRxLifecycleNotBound() throws Exception {  String file="bin/classes/LifecycleNotBoundKotlin.kt.class";  String warningMessage=file + ": Error: " + RxLifecycleDetector.ISSUE.getBriefDescription(TextFormat.TEXT)+ " ["+ RxLifecycleDetector.ISSUE.getId()+ "]\n"+ "1 errors, 0 warnings\n";  assertEquals(warningMessage,lintClassFile(file));}  }
class C{  public static boolean isComplexText(char[] chs,int start,int limit){  for (int i=start; i < limit; i++) {    if (chs[i] < MIN_LAYOUT_CHARCODE) {      continue;    } else     if (isNonSimpleChar(chs[i])) {      return true;    }  }  return false;}  }
class C{  public static boolean isEmptyString(String text){  return (text == null || text.trim().length() == 0);}  }
class C{  @SuppressWarnings("unchecked") public static <T extends Number>NumberArrayAdapter<T,List<? extends T>> numberListAdapter(List<? extends T> dummy){  return (NumberListArrayAdapter<T>)NUMBERLISTADAPTER;}  }
class C{  public boolean isFacingBack(){  return getCameraFacing() == OneCamera.Facing.BACK;}  }
class C{  private Response doEHLO(SMTPSession session,String argument){  SMTPResponse resp=new SMTPResponse(SMTPRetCode.MAIL_OK,new StringBuilder(session.getConfiguration().getHelloName()).append(" Hello ").append(argument).append(" [").append(session.getRemoteAddress().getAddress().getHostAddress()).append("])"));  session.setAttachment(SMTPSession.CURRENT_HELO_MODE,COMMAND_NAME,State.Connection);  processExtensions(session,resp);  return resp;}  }
class C{  public final void kick(String channel,String nick,String reason){  this.sendRawLine("KICK " + channel + " "+ nick+ " :"+ reason);}  }
class C{  private static List<Unit> sortUnitsForCasualtiesWithSupport(final Collection<Unit> targetsToPickFrom,final int hits,final boolean defending,final PlayerID player,final Collection<Unit> enemyUnits,final boolean amphibious,final Collection<Unit> amphibiousLandAttackers,final Territory battlesite,final IntegerMap<UnitType> costs,final Collection<TerritoryEffect> territoryEffects,final GameData data,final boolean allowMultipleHitsPerUnit,final boolean bonus){  if (!GameRunner.getCasualtySelectionSlow()) {    return sortUnitsForCasualtiesWithSupportNewWithCaching(targetsToPickFrom,defending,player,enemyUnits,amphibious,amphibiousLandAttackers,battlesite,costs,territoryEffects,data,bonus);  } else {    return sortUnitsForCasualtiesWithSupportBruteForce(targetsToPickFrom,hits,defending,enemyUnits,amphibious,amphibiousLandAttackers,battlesite,costs,territoryEffects,data,allowMultipleHitsPerUnit,bonus);  }}  }
class C{  @Override public V put(Double key,V value){  return wrapValue(_map.put(unwrapKey(key),unwrapValue(value)));}  }
class C{  public static final int sign(int x){  return (x < 0) ? -1 : 1;}  }
class C{  public void testNodeLocal() throws Exception {  Ignite g=G.ignite(getTestGridName());  String keyStr="key";  int keyNum=1;  Date keyDate=new Date();  GridTuple3 key=F.t(keyNum,keyStr,keyDate);  ConcurrentMap<Object,Object> nl=g.cluster().nodeLocalMap();  nl.put(keyStr,"Hello world!");  nl.put(key,12);  assert nl.containsKey(keyStr);  assert nl.containsKey(key);  assert !nl.containsKey(keyNum);  assert !nl.containsKey(F.t(keyNum,keyStr));  assert "Hello world!".equals(nl.get(keyStr));  assert (Integer)nl.get(key) == 12;}  }
class C{  public static JavacProcessingEnvironment instance(Context context){  JavacProcessingEnvironment instance=context.get(JavacProcessingEnvironment.class);  if (instance == null)   instance=new JavacProcessingEnvironment(context);  return instance;}  }
class C{  public void acceptDrop(int dropAction){  getDropTargetContext().acceptDrop(dropAction);}  }
class C{  public RangeBuilder addRange(String key,long from,long to){  ranges.add(new Range(key,from,to));  return this;}  }
class C{  public static double erf(double x){  if (x < 0.0)   return (-1.0 * (erf_of_nonneg(-1.0 * x))); else   return (erf_of_nonneg(x));}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster flowAccum;  String outputHeader=null;  String flowAccumHeader=null;  String outletHeader=null;  int rows=0;  int cols=0;  int row, col;  double noData=-32768;  double gridRes=0;  int i;  float progress=0;  double z;  double maxZ;  int x, y;  int maxX=0;  int maxY=0;  double snapDistance=0;  int snapDistInt=0;  double outletID;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  outletHeader=args[0];  flowAccumHeader=args[1];  outputHeader=args[2];  snapDistance=Double.parseDouble(args[3]);  if (outletHeader.isEmpty() || flowAccumHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if (outletHeader.endsWith(".dep") && outputHeader.endsWith(".shp")) {    outputHeader=StringUtilities.replaceLast(outputHeader,".shp",".dep");  }  if (outletHeader.endsWith(".shp") && outputHeader.endsWith(".dep")) {    outputHeader=StringUtilities.replaceLast(outputHeader,".dep",".shp");  }  try {    flowAccum=new WhiteboxRaster(flowAccumHeader,"r");    if (outletHeader.toLowerCase().endsWith(".shp")) {      double outletX, outletY;      int outletCol, outletRow;      int recordNumber;      double zValue=0, mValue=0;      ShapeFile outlets=new ShapeFile(outletHeader);      if (outlets.getShapeType().getBaseType() != ShapeType.POINT) {        showFeedback("The outlets vector should be of a Point or " + "MultiPoint ShapeType.");        return;      }      ShapeFile output=new ShapeFile(outputHeader,outlets.getShapeType(),outlets.getAttributeTable().getAllFields());      gridRes=(flowAccum.getCellSizeX() + flowAccum.getCellSizeY()) / 2;      snapDistInt=(int)(snapDistance / gridRes);      if (snapDistInt < 1) {        snapDistInt=1;      }      for (      ShapeFileRecord record : outlets.records) {        recordNumber=record.getRecordNumber();        double[][] vertices;        ShapeType shapeType=record.getShapeType();switch (shapeType) {case POINT:          whitebox.geospatialfiles.shapefile.Point recPoint=(whitebox.geospatialfiles.shapefile.Point)(record.getGeometry());        vertices=recPoint.getPoints();      break;case POINTZ:    PointZ recPointZ=(PointZ)(record.getGeometry());  zValue=recPointZ.getZ();mValue=recPointZ.getM();vertices=recPointZ.getPoints();break;case POINTM:PointM recPointM=(PointM)(record.getGeometry());mValue=recPointM.getM();vertices=recPointM.getPoints();break;default :showFeedback("This ShapeType is not supported by this operation. \n" + "Please use an outlet vector of a Point base ShapeType.");return;}outletRow=flowAccum.getRowFromYCoordinate(vertices[0][1]);outletCol=flowAccum.getColumnFromXCoordinate(vertices[0][0]);maxZ=0;for (x=outletCol - snapDistInt; x <= outletCol + snapDistInt; x++) {for (y=outletRow - snapDistInt; y <= outletRow + snapDistInt; y++) {z=flowAccum.getValue(y,x);if (z > maxZ) {maxZ=z;maxX=x;maxY=y;}}}outletX=flowAccum.getXCoordinateFromColumn(maxX);outletY=flowAccum.getYCoordinateFromRow(maxY);Object[] recData=outlets.getAttributeTable().getRecord(recordNumber - 1);switch (shapeType) {case POINT:whitebox.geospatialfiles.shapefile.Point wbPoint=new whitebox.geospatialfiles.shapefile.Point(outletX,outletY);output.addRecord(wbPoint,recData);break;case POINTZ:PointZ pointZ=new PointZ(outletX,outletY,zValue,mValue);output.addRecord(pointZ,recData);break;case POINTM:PointM pointM=new PointM(outletX,outletY,mValue);output.addRecord(pointM,recData);break;}}output.write();} else if (outletHeader.toLowerCase().endsWith(".dep")) {WhiteboxRaster outlets=new WhiteboxRaster(outletHeader,"r");rows=outlets.getNumberRows();cols=outlets.getNumberColumns();noData=outlets.getNoDataValue();gridRes=(outlets.getCellSizeX() + outlets.getCellSizeY()) / 2;if (flowAccum.getNumberColumns() != cols || flowAccum.getNumberRows() != rows) {showFeedback("The input files must have the same dimensions.");return;}WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",outletHeader,WhiteboxRaster.DataType.FLOAT,noData);output.setPreferredPalette(outlets.getPreferredPalette());output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);snapDistInt=(int)(snapDistance / gridRes);if (snapDistInt < 1) {snapDistInt=1;}double[] data;for (row=0; row < rows; row++) {data=outlets.getRowValues(row);for (col=0; col < cols; col++) {outletID=data[col];if (outletID != 0 && outletID != noData) {maxZ=0;for (x=col - snapDistInt; x <= col + snapDistInt; x++) {for (y=row - snapDistInt; y <= row + snapDistInt; y++) {z=flowAccum.getValue(y,x);if (z > maxZ) {maxZ=z;maxX=x;maxY=y;}}}output.setValue(maxY,maxX,outletID);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());outlets.close();flowAccum.close();output.close();}returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public PulsateEditor(){  initComponents();  duration.setModel(new SpinnerNumberModel(1000,100,20000,100));  smallSize.setModel(new SpinnerNumberModel(50,5,200,1));  largeSize.setModel(new SpinnerNumberModel(150,5,300,1));  frames.setModel(new SpinnerNumberModel(6,1,20,1));  preview.add(java.awt.BorderLayout.CENTER,new CodenameOneComponentWrapper(previewLabel));}  }
class C{  private void prepareProtectionSystemData() throws Exception {  ProtectionSystem protectionSystem=new ProtectionSystem();  URI protectionSystemURI=URIUtil.createId(ProtectionSystem.class);  protectionSystem.setId(protectionSystemURI);  StringSet associatedStorageSystems=new StringSet();  associatedStorageSystems.add("FAKE DATA");  associatedStorageSystems.add("FAKE DATA");  associatedStorageSystems.add("FAKE DATA");  associatedStorageSystems.add("FAKE DATA");  associatedStorageSystems.add("FAKE DATA");  protectionSystem.setAssociatedStorageSystems(associatedStorageSystems);  _dbClient.createObject(protectionSystem);  ProtectionSystem protectionSystem2=new ProtectionSystem();  URI protectionSystemURI2=URIUtil.createId(ProtectionSystem.class);  protectionSystem2.setId(protectionSystemURI2);  StringSet associatedStorageSystems2=new StringSet();  associatedStorageSystems2.add("FAKE DATA2");  associatedStorageSystems2.add("FAKE DATA2");  associatedStorageSystems2.add("FAKE DATA2");  associatedStorageSystems2.add("FAKE DATA2");  associatedStorageSystems2.add("FAKE DATA2");  protectionSystem2.setAssociatedStorageSystems(associatedStorageSystems2);  _dbClient.createObject(protectionSystem2);  List<URI> protectionSystemURIs=_dbClient.queryByType(ProtectionSystem.class,false);  int count=0;  for (  @SuppressWarnings("unused") URI ignore : protectionSystemURIs) {    count++;  }  Assert.assertTrue("Expected 2 ProtectionSystems, found: " + count,count == 2);}  }
class C{  public static boolean parseListOrListElement(PsiBuilder b,int l){  PsiBuilder.Marker m=b.mark();  if (PerlParserImpl.parenthesised_expr(b,l)) {    if (PerlParserImpl.array_index(b,l)) {      m.done(ANON_ARRAY_ELEMENT);    } else {      m.drop();    }    return true;  }  m.drop();  return false;}  }
class C{  public static String verifyPathnameExists(final String pathname) throws FileNotFoundException {  if (isExistingPathname(pathname)) {    return pathname;  }  throw new FileNotFoundException(String.format("Pathname (%1$s) could not be found!",pathname));}  }
class C{  public Object next(){  if (sentences.size() == 0) {    String paragraph=getParagraph();    if (paragraph.trim().length() != 0)     process(paragraph);    currentOffset+=paragraph.length();  }  if (sentences.size() == 0)   return null;  return sentences.removeFirst();}  }
class C{  @HLEFunction(nid=0x8F58BEDF,version=150) public int sceNetAdhocMatchingCancelTargetWithOpt(@CheckArgument("checkMatchingId") int matchingId,pspNetMacAddress macAddress,int optLen,@CanBeNull TPointer optData){  if (log.isTraceEnabled()) {    log.trace(String.format("Opt data: %s",Utilities.getMemoryDump(optData.getAddress(),optLen)));  }  return matchingObjects.get(matchingId).cancelTarget(macAddress,optLen,optData.getAddress());}  }
class C{  public static boolean deleteRecursively(File file){  if (file.isDirectory()) {    deleteContents(file);  }  return file.delete();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:05.061 -0400",hash_original_method="94714D6AF1AD7651029C5EBF06AD34A8",hash_generated_method="2BB496CFDDC5DAE90582DEA99219ACA9") public DSAPrivateKeyImpl(DSAPrivateKeySpec keySpec){  super("DSA");  PrivateKeyInfo pki;  g=keySpec.getG();  p=keySpec.getP();  q=keySpec.getQ();  ThreeIntegerSequence threeInts=new ThreeIntegerSequence(p.toByteArray(),q.toByteArray(),g.toByteArray());  AlgorithmIdentifier ai=new AlgorithmIdentifier(AlgNameMapper.map2OID("DSA"),threeInts.getEncoded());  x=keySpec.getX();  pki=new PrivateKeyInfo(0,ai,ASN1Integer.getInstance().encode(x.toByteArray()),null);  setEncoding(pki.getEncoded());  params=new DSAParameterSpec(p,q,g);}  }
class C{  protected void paintComponent(Component comp,Graphics g){  if (comp != null) {    final XComponentPeer peer=(XComponentPeer)comp.getPeer();    if (peer != null) {      peer.paintPeer(g);    }    super.paintComponent(comp,g);  }}  }
class C{  private static void printCloudletList(List<Cloudlet> list){  int size=list.size();  Cloudlet cloudlet;  String indent="    ";  Log.printLine();  Log.printLine("========== OUTPUT ==========");  Log.printLine("Cloudlet ID" + indent + "STATUS"+ indent+ "Data center ID"+ indent+ "VM ID"+ indent+ "Time"+ indent+ "Start Time"+ indent+ "Finish Time");  for (int i=0; i < size; i++) {    cloudlet=list.get(i);    Log.print(indent + cloudlet.getCloudletId() + indent+ indent);    if (cloudlet.getCloudletStatus() == Cloudlet.SUCCESS) {      Log.print("SUCCESS");      DecimalFormat dft=new DecimalFormat("###.##");      Log.printLine(indent + indent + cloudlet.getResourceId()+ indent+ indent+ indent+ cloudlet.getVmId()+ indent+ indent+ dft.format(cloudlet.getActualCPUTime())+ indent+ indent+ dft.format(cloudlet.getExecStartTime())+ indent+ indent+ dft.format(cloudlet.getFinishTime()));    }  }}  }
class C{  public void prepareSession(String remoteAddress,int remotePort,RtpInputStream rtpStream) throws RtpException {  try {    inputStream=new DummyPacketSourceStream();    inputStream.open();    outputStream=new RtpOutputStream(remoteAddress,remotePort,rtpStream);    outputStream.open();    processor=new Processor(inputStream,outputStream,new Codec[0]);  } catch (  Exception e) {    throw new RtpException("Can't prepare resources");  }}  }
class C{  @SuppressWarnings("unchecked") public void sort(){  if (this.children != null) {    Collections.sort(this.children,nodeComparator);  }}  }
class C{  protected void fireCDATAEvent(char[] chars,int start,int length) throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_CDATA,chars,start,length);  }}  }
class C{  protected void submit(U tuple){  getDestination().accept(tuple);}  }
class C{  private boolean isWeekly(){  return ExecutionWindowType.WEEKLY.name().equals(window.getExecutionWindowType());}  }
class C{  private void initStatus(){  durationStartTime=Tracking.getTracking().getTimeStart();  distanceTV=(TextView)findViewById(R.id.activity_analytics_distance);  distanceUnitTV=(TextView)findViewById(R.id.activity_analytics_distance_unit);  caloriesTV=(TextView)findViewById(R.id.activity_analytics_calories);  maxSpeedTV=(TextView)findViewById(R.id.activity_analytics_max_speed);  durationTV=(TextView)findViewById(R.id.activity_analytics_duration);  avgSpeedTV=(TextView)findViewById(R.id.activity_analytics_avg_speed);  updateDis(Tracking.getTracking().getDistance());  updateAvgSp(Tracking.getTracking().getAvgSpeed());  updateMaxSp(Tracking.getTracking().getMaxSpeed());  updateCalorieBurned();}  }
class C{  private Response response(final String home,final URI dest,final com.jcabi.http.Response rsp){  final Collection<String> hdrs=new LinkedList<>();  hdrs.add(String.format("X-Takes-TkProxy: from %s to %s by %s",home,dest,this.label));  for (  final Map.Entry<String,List<String>> entry : rsp.headers().entrySet()) {    for (    final String value : entry.getValue()) {      final String val;      if (TkProxy.isHost(entry.getKey())) {        val=this.target.toString();      } else {        val=value;      }      hdrs.add(String.format("%s: %s",entry.getKey(),val));    }  }  return new RsWithStatus(new RsWithBody(new RsWithHeaders(hdrs),rsp.binary()),rsp.status(),rsp.reason());}  }
class C{  public void load(){  Preferences preferences=getUnderlyingPreferences();  useCaCertificates=preferences.getBoolean(KSE3_USECACERTS,false);  String cacertsPath=preferences.get(KSE3_CACERTSFILE,AuthorityCertificates.getDefaultCaCertificatesLocation().toString());  caCertificatesFile=cleanFilePath(new File(cacertsPath));  useWindowsTrustedRootCertificates=preferences.getBoolean(KSE3_USEWINTRUSTROOTCERTS,false);  enableImportTrustedCertTrustCheck=preferences.getBoolean(KSE3_ENABLEIMPORTTRUSTEDCERTTRUSTCHECK,false);  enableImportCaReplyTrustCheck=preferences.getBoolean(KSE3_ENABLEIMPORTCAREPLYTRUSTCHECK,false);  generateKeyPairType=KeyPairType.resolveJce(preferences.get(KSE3_KEYPAIRTYPE,RSA.jce()));  if (generateKeyPairType == null) {    generateKeyPairType=RSA;  }  int defaultKeyPairSize;  if (generateKeyPairType == RSA) {    defaultKeyPairSize=2048;  } else {    defaultKeyPairSize=1024;  }  generateKeyPairSize=preferences.getInt(KSE3_KEYPAIRSIZE,defaultKeyPairSize);  generateSecretKeyType=SecretKeyType.resolveJce(preferences.get(KSE3_SECKEYTYPE,AES.jce()));  if (generateSecretKeyType == null) {    generateSecretKeyType=AES;  }  generateSecretKeySize=preferences.getInt(KSE3_SECKEYSIZE,192);  certificateFingerprintType=DigestType.resolveJce(preferences.get(KSE3_CERTFINGERTYPE,SHA1.jce()));  if (certificateFingerprintType == null) {    certificateFingerprintType=SHA1;  }  passwordQualityConfig=new PasswordQualityConfig(preferences.getBoolean(KSE3_PWDQUALENABLE,false),preferences.getBoolean(KSE3_MINPWDQUALENFORCE,false),preferences.getInt(KSE3_MINPWDQUAL,60));  ProxyConfigurationType proxyConfigurationType=ProxyConfigurationType.resolve(preferences.get(KSE3_PROXY,ProxyConfigurationType.SYSTEM.name()));  SystemProxySelector.setSystemProxySelector(ProxySelector.getDefault());switch (proxyConfigurationType) {case NONE:    ProxySelector.setDefault(new NoProxySelector());  break;case PAC:String pacUrl=preferences.get(KSE3_PACURL,null);if (pacUrl != null) {ProxySelector.setDefault(new PacProxySelector(pacUrl));} else {ProxySelector.setDefault(new NoProxySelector());}break;case MANUAL:ProxyAddress httpProxyAddress=null;ProxyAddress httpsProxyAddress=null;ProxyAddress socksProxyAddress=null;String httpHost=preferences.get(KSE3_HTTPHOST,null);int httpPort=preferences.getInt(KSE3_HTTPPORT,0);if (httpHost != null && httpPort > 0) {httpProxyAddress=new ProxyAddress(httpHost,httpPort);}String httpsHost=preferences.get(KSE3_HTTPSHOST,null);int httpsPort=preferences.getInt(KSE3_HTTPSPORT,0);if (httpsHost != null && httpsPort > 0) {httpsProxyAddress=new ProxyAddress(httpsHost,httpsPort);}String socksHost=preferences.get(KSE3_SOCKSHOST,null);int socksPort=preferences.getInt(KSE3_SOCKSPORT,0);if (socksHost != null && socksPort > 0) {socksProxyAddress=new ProxyAddress(socksHost,socksPort);}if (httpProxyAddress != null || httpsProxyAddress != null) {ProxySelector.setDefault(new ManualProxySelector(httpProxyAddress,httpsProxyAddress,null,socksProxyAddress));} else {ProxySelector.setDefault(new NoProxySelector());}break;case SYSTEM:default :ProxySelector.setDefault(new SystemProxySelector());break;}sizeAndPosition=new Rectangle(preferences.getInt(KSE3_XPOS,0),preferences.getInt(KSE3_YPOS,0),preferences.getInt(KSE3_WIDTH,KseFrame.DEFAULT_WIDTH),preferences.getInt(KSE3_HEIGHT,KseFrame.DEFAULT_HEIGHT));showToolBar=preferences.getBoolean(KSE3_SHOWTOOLBAR,true);showStatusBar=preferences.getBoolean(KSE3_SHOWSTATUSBAR,true);tabLayout=preferences.getInt(KSE3_TABLAYOUT,JTabbedPane.WRAP_TAB_LAYOUT);ArrayList<File> recentFilesList=new ArrayList<File>();for (int i=1; i <= KseFrame.RECENT_FILES_SIZE; i++) {String recentFile=preferences.get(KSE3_RECENTFILE + i,null);if (recentFile == null) {break;} else {recentFilesList.add(cleanFilePath(new File(recentFile)));}}recentFiles=recentFilesList.toArray(new File[recentFilesList.size()]);String currentDirectoryStr=preferences.get(KSE3_CURRENTDIR,null);if (currentDirectoryStr != null) {currentDirectory=cleanFilePath(new File(currentDirectoryStr));}lookAndFeelClass=preferences.get(KSE3_LOOKFEEL,null);lookAndFeelDecorated=preferences.getBoolean(KSE3_LOOKFEELDECOR,false);licenseAgreed=preferences.getBoolean(KSE3_LICENSEAGREED,false);showTipsOnStartUp=preferences.getBoolean(KSE3_TIPSONSTARTUP,true);nextTipIndex=preferences.getInt(KSE3_TIPINDEX,0);defaultDN=preferences.get(KSE3_DEFAULTDN,"");sslHosts=preferences.get(KSE3_SSLHOSTS,"www.google.com;www.amazon.com");sslPorts=preferences.get(KSE3_SSLPORTS,"443");autoUpdateCheckEnabled=preferences.getBoolean(KSE3_AUTO_UPDATE_CHECK_ENABLED,true);autoUpdateCheckInterval=preferences.getInt(KSE3_AUTO_UPDATE_CHECK_INTERVAL,14);autoUpdateCheckLastCheck=getDate(preferences,KSE3_AUTO_UPDATE_CHECK_LAST_CHECK,new Date());p11Libs=preferences.get(KSE3_PKCS11_LIBS,"");}  }
class C{  private TBGraphNode findOrCreateNode(final TBPar par){  for (int i=0; i < this.size(); i++) {    final TBGraphNode gn=(TBGraphNode)this.elementAt(i);    if (par.equals(gn.getPar())) {      return gn;    }  }  final TBGraphNode gn=new TBGraphNode(par);  this.addElement(gn);  return gn;}  }
class C{  public Boolean isAsn1Processable(){  return asn1Processable;}  }
class C{  public int reverseCompareTo(Ideas_2011_03_27 that){  return -this.compareTo(that);}  }
class C{  public ZookeeperEmbedded(int port){  this.port=port;  this.logDir=new File(System.getProperty("java.io.tmpdir"),"zk/logs/zookeeper-test-" + port);}  }
class C{  public ModifyContextImpl(final String channelId,final BlobStore store,final CacheStore cacheStore){  Objects.requireNonNull(channelId);  Objects.requireNonNull(store);  Objects.requireNonNull(cacheStore);  this.channelId=channelId;  this.store=store;  this.cacheStore=cacheStore;  this.state=new Builder();  this.modAspectStates=new TreeMap<>();  this.modCacheEntries=new HashMap<>();  this.modArtifacts=new HashMap<>();  this.modGeneratorArtifacts=new HashMap<>();  this.modExtractedMetadata=new HashMap<>();  this.modProvidedMetadata=new HashMap<>();  this.aspectStates=Collections.unmodifiableSortedMap(this.modAspectStates);  this.cacheEntries=Collections.unmodifiableMap(this.modCacheEntries);  this.artifacts=Collections.unmodifiableMap(this.modArtifacts);  this.generatorArtifacts=Collections.unmodifiableMap(this.modGeneratorArtifacts);  this.extractedMetadata=Collections.unmodifiableMap(this.modExtractedMetadata);  this.providedMetadata=Collections.unmodifiableMap(this.modProvidedMetadata);  this.aspectContext=new AspectContextImpl(this,Activator.getProcessor());}  }
class C{  private synchronized boolean _keepRunning(){  return m_run;}  }
class C{  private void rosterItemSelectAction(ActionEvent e){  if (rosterSelector.getSelectedRosterEntries().length != 0) {    log.debug("Roster Entry selected...");    setRosterEntry(rosterSelector.getSelectedRosterEntries()[0]);    enableProfileStuff(true);    if ((profileComboBox.getSelectedIndex() == -1) || (profileComboBox.getSelectedItem() instanceof NullProfileBoxItem)) {      closeButton.setEnabled(false);    }  }}  }
class C{  public int size(){  return size;}  }
class C{  public void addTag(final Tag tag) throws CouldntSaveDataException {  Preconditions.checkNotNull(tag,"Error: Tag argument can't be null");  try {    naviView.getConfiguration().tagView(tag.getNative().getObject());  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  private void process() throws Exception {  XMLStreamReader xmlStreamReader=null;  XMLEventReader xmlEventReader=null;  XMLInputFactory fact=new WbXmlInputFactory();  fact.setProperty(WbXmlInputFactory.DEFINITION_PROPERTY,def);  try {    WbXmlParser parser;    if (event) {      xmlEventReader=fact.createXMLEventReader(in);      parser=((WbXmlEventReader)xmlEventReader).getParser();    } else {      xmlStreamReader=fact.createXMLStreamReader(in);      parser=((WbXmlStreamReader)xmlStreamReader).getParser();    }    if (!useDom) {      String clazz=parser.getDefinition().getClazz();      if (clazz == null || clazz.isEmpty()) {        usage(String.format("The definition '%s' does not contain a main class.",parser.getDefinition().getName()));      }      JAXBContext jc=JAXBContext.newInstance(Class.forName(clazz));      Unmarshaller unmarshaller=jc.createUnmarshaller();      Object obj;      if (event) {        obj=unmarshaller.unmarshal(xmlEventReader);      } else {        obj=unmarshaller.unmarshal(xmlStreamReader);      }      Marshaller marshaller=jc.createMarshaller();      marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);      if (parser.getDefinition().getXmlPublicId() != null && parser.getDefinition().getXmlUriRef() != null) {        marshaller.setProperty("com.sun.xml.internal.bind.xmlHeaders",String.format("\n<!DOCTYPE %s PUBLIC \"%s\" \"%s\">",jc.createJAXBIntrospector().getElementName(obj),parser.getDefinition().getXmlPublicId(),parser.getDefinition().getXmlUriRef()));      }      marshaller.marshal(obj,out);    } else {      Transformer xformer=TransformerFactory.newInstance().newTransformer();      if (parser.getDefinition().getXmlPublicId() != null && parser.getDefinition().getXmlUriRef() != null) {        xformer.setOutputProperty(OutputKeys.DOCTYPE_PUBLIC,parser.getDefinition().getXmlPublicId());        xformer.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM,parser.getDefinition().getXmlUriRef());      }      xformer.setOutputProperty(OutputKeys.INDENT,"yes");      xformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","4");      StAXSource staxSource;      if (event) {        staxSource=new StAXSource(xmlEventReader);      } else {        staxSource=new StAXSource(xmlStreamReader);      }      DOMResult domResult=new DOMResult();      xformer.transform(staxSource,domResult);      Source domSource=new DOMSource(domResult.getNode(),domResult.getSystemId());      Result result=new StreamResult(out);      xformer.transform(domSource,result);    }  }  finally {    if (xmlStreamReader != null) {      try {        xmlStreamReader.close();      } catch (      Exception e) {      }    }    if (xmlEventReader != null) {      try {        xmlEventReader.close();      } catch (      Exception e) {      }    }  }}  }
class C{  public void reset(){  posPtr=bufPtr;}  }
class C{  public XMLBeans(JComponent layout,BeanContextSupport context,int tab) throws Exception {  this(layout,context,DATATYPE_LAYOUT,tab);}  }
class C{  private StunMessageEvent doTestI(TransportAddress serverAddress) throws IOException, StunException {  Request request=MessageFactory.createBindingRequest();  ChangeRequestAttribute changeRequest=AttributeFactory.createChangeRequestAttribute();  changeRequest.setChangeIpFlag(false);  changeRequest.setChangePortFlag(false);  request.putAttribute(changeRequest);  StunMessageEvent evt=null;  try {    evt=requestSender.sendRequestAndWaitForResponse(request,serverAddress);  } catch (  StunException ex) {    logger.log(Level.SEVERE,"Internal Error. Failed to encode a message",ex);    return null;  }  if (evt != null)   logger.fine("TEST I res=" + evt.getRemoteAddress().toString() + " - "+ evt.getRemoteAddress().getHostAddress()); else   logger.fine("NO RESPONSE received to TEST I.");  return evt;}  }
class C{  @Override public void endWindow(){  for (  Map.Entry<K,V> e : high.entrySet()) {    range.emit(new KeyValPair<K,HighLow<V>>(e.getKey(),new HighLow(e.getValue(),low.get(e.getKey()))));  }  clearCache();}  }
class C{  public boolean isImSessionSupported(){  return readBoolean(RcsSettingsData.CAPABILITY_IM_SESSION);}  }
class C{  public DrawerBuilder withHeaderPadding(boolean headerPadding){  this.mHeaderPadding=headerPadding;  return this;}  }
class C{  public void init(SecureRandom random) throws IllegalArgumentException {  if (random != null) {    this.random=random;  } else {    this.random=new SecureRandom();  }}  }
class C{  private static Number parseNumber(final String text,final Class<?> targetClass){  Hasor.assertIsNotNull(text,"Text must not be null");  Hasor.assertIsNotNull(targetClass,"Target class must not be null");  String trimmed=StringUtils.trimToEmpty(text);  if (targetClass.equals(Byte.class)) {    return AbstractRowMapper.isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed);  } else   if (targetClass.equals(Short.class)) {    return AbstractRowMapper.isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed);  } else   if (targetClass.equals(Integer.class)) {    return AbstractRowMapper.isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed);  } else   if (targetClass.equals(Long.class)) {    return AbstractRowMapper.isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed);  } else   if (targetClass.equals(BigInteger.class)) {    return AbstractRowMapper.isHexNumber(trimmed) ? AbstractRowMapper.decodeBigInteger(trimmed) : new BigInteger(trimmed);  } else   if (targetClass.equals(Float.class)) {    return Float.valueOf(trimmed);  } else   if (targetClass.equals(Double.class)) {    return Double.valueOf(trimmed);  } else   if (targetClass.equals(BigDecimal.class) || targetClass.equals(Number.class)) {    return new BigDecimal(trimmed);  } else {    throw new IllegalArgumentException("Cannot convert String [" + text + "] to target class ["+ targetClass.getName()+ "]");  }}  }
class C{  private Collection<? extends Object> instantiateFactoryResources(String factoryClassName,Config config) throws InstantiationException {  try {    ResourceFactory factory=ClassLoaderHelper.<ResourceFactory>fromClassName(factoryClassName);    return factory.getResourceInstances(config);  } catch (  Exception e) {    throw (InstantiationException)new InstantiationException("Unable to instantiate " + factoryClassName).initCause(e);  }}  }
class C{  public static PollTcpManagerNio create(){synchronized (_nioSelectManager) {    if (_nioSelectManager.get() == null) {      PollTcpManagerNio selectManager=new PollTcpManagerNio();      if (selectManager.start()) {        _nioSelectManager.set(selectManager);      }    }    return _nioSelectManager.get();  }}  }
class C{  public static void closeKeyboard(Context context,View field){  try {    InputMethodManager imm=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);    imm.hideSoftInputFromWindow(field.getWindowToken(),0);  } catch (  Exception ex) {    Log.e("PercolateAndroidUtils","Error occurred trying to hide the keyboard.  Exception=" + ex);  }}  }
class C{  protected Message(){}  }
class C{  public void toEPL(StringWriter writer){  writer.append("expression ");  writer.append(name);  if (alias) {    writer.append(" alias for");  }  writer.append(" {");  if (!alias) {    if (parameterNames != null && parameterNames.size() == 1) {      writer.append(parameterNames.get(0));    } else     if (parameterNames != null && !parameterNames.isEmpty()) {      String delimiter="";      writer.append("(");      for (      String name : parameterNames) {        writer.append(delimiter);        writer.append(name);        delimiter=",";      }      writer.append(")");    }    if (parameterNames != null && !parameterNames.isEmpty()) {      writer.append(" => ");    }  }  if (expression != null) {    expression.toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);  }  writer.append("}");}  }
class C{  private void createTextContentChild(Element parent,String tagname,String textContent){  Element child=parent.getOwnerDocument().createElement(tagname);  child.setTextContent(textContent);  parent.appendChild(child);}  }
class C{  private void springBack(long time){  if (mScroller.isFinished()) {    int minScroll=(int)getMinScroll(false);    int maxScroll=(int)getMaxScroll(false);    if (mScrollTarget < minScroll || mScrollTarget > maxScroll) {      mScroller.springBack(0,(int)mScrollTarget,0,0,minScroll,maxScroll,time);      setScrollTarget(MathUtils.clamp(mScrollTarget,minScroll,maxScroll),false);      requestUpdate();    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.032 -0500",hash_original_method="8C25963DC1F5FD75F75FC8C46F2D8080",hash_generated_method="2AECEAB147DF1422DFD870892004A44E") public static void fill(long[] array,long value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  protected MetricReducerOrMappingWithConstantTransform(ValueReducerOrMapping valueReducerOrMapping){  super(valueReducerOrMapping);}  }
class C{  public static byte[] readBytes(InputStream in) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream(4096);  transfer(in,out);  return out.toByteArray();}  }
class C{  public void populateStrategyData(Tradingday tradingday){  if (null != tradingday.getTradestrategies()) {    for (    Tradestrategy currTradestrategy : tradingday.getTradestrategies()) {      for (      Tradestrategy tradestrategy : this.getTradestrategies()) {        if (currTradestrategy.equals(tradestrategy)) {          tradestrategy.setStrategyData(currTradestrategy.getStrategyData());          break;        }      }    }  }}  }
class C{  static void testFailLoadAndGc() throws TestFailed {  try {    BrokenDexLoader loader;    loader=new BrokenDexLoader(ClassLoader.getSystemClassLoader());    loader.findBrokenClass();    System.err.println("ERROR: Inaccessible was accessible");  } catch (  InvocationTargetException ite) {    Throwable cause=ite.getCause();    if (cause instanceof NullPointerException) {      System.err.println("Got expected ITE/NPE");    } else {      System.err.println("Got unexpected ITE");      ite.printStackTrace();    }  }  System.gc();  System.out.println("GC complete.");}  }
class C{  public boolean isDeactivationLocked(){  return deactivationLock;}  }
class C{  private static HttpHost[] toChain(HttpHost[] proxies){  if ((proxies == null) || (proxies.length < 1))   return null;  for (  HttpHost proxy : proxies) {    if (proxy == null)     throw new IllegalArgumentException("Proxy chain may not contain null elements.");  }  HttpHost[] result=new HttpHost[proxies.length];  System.arraycopy(proxies,0,result,0,proxies.length);  return result;}  }
class C{  public static ComponentUI createUI(JComponent x){  return new BEScrollPaneUI();}  }
class C{  public synchronized T clearItems(){  items.clear();  selectedIndex=-1;  invalidate();  return self();}  }
class C{  ClassReader findClass(String className,Map<String,ClassReader> zipClasses,Map<String,ClassReader> inOutFound) throws LogAbortException {  ClassReader classReader=zipClasses.get(className);  if (classReader == null) {    throw new LogAbortException("Class %s not found by ASM in %s",className,mOsSourceJar);  }  inOutFound.put(className,classReader);  return classReader;}  }
class C{  private void push(final ClassWriter cw,final String desc){  int type=type(cw,desc);  if (type != 0) {    push(type);    if (type == LONG || type == DOUBLE) {      push(TOP);    }  }}  }
class C{  public boolean decodeTokenText(int startIndex){  int index=startIndex;  while (mWspData[index] != 0) {    index++;  }  mDataLength=index - startIndex + 1;  mStringValue=new String(mWspData,startIndex,mDataLength - 1);  return true;}  }
class C{  @Override public FSDataOutputStream createObject(String objName,String contentType,Map<String,String> metadata,Statistics statistics) throws IOException {  URL url=new URL(mJossAccount.getAccessURL() + "/" + objName);  LOG.debug("PUT {}. Content-Type : {}",url.toString(),contentType);  try {    return new FSDataOutputStream(new SwiftOutputStream(mJossAccount,url,contentType,metadata,swiftConnectionManager),statistics);  } catch (  IOException e) {    LOG.error(e.getMessage());    throw e;  }}  }
class C{  public boolean isOpened(){  return mOpened;}  }
class C{  public TransformException(Throwable cause){  super(cause == null ? null : cause.toString());  this.cause=cause;}  }
class C{  public JSONObject toJSONObject(JSONArray names) throws JSONException {  if (names == null || names.length() == 0 || this.length() == 0) {    return null;  }  JSONObject jo=new JSONObject();  for (int i=0; i < names.length(); i+=1) {    jo.put(names.getString(i),this.opt(i));  }  return jo;}  }
class C{  public void prepareQueries() throws ScopeException, SQLScopeException {  prepareQueries(hierarchy.getRoot(),hierarchy.getStructure());}  }
class C{  public void addResourceResolver(ResourceResolver resolver){  if (resolver == null) {    return;  }  if (perManifestResolvers == null) {    perManifestResolvers=new ArrayList<ResourceResolver>();  }  this.perManifestResolvers.add(resolver);}  }
class C{  private long[] executeBatchUsingMultiQueries(boolean multiQueriesEnabled,int nbrCommands,int individualStatementTimeout) throws SQLException {  MySQLConnection locallyScopedConn=checkClosed();synchronized (locallyScopedConn.getConnectionMutex()) {    if (!multiQueriesEnabled) {      locallyScopedConn.getIO().enableMultiQueries();    }    java.sql.Statement batchStmt=null;    CancelTask timeoutTask=null;    try {      long[] updateCounts=new long[nbrCommands];      for (int i=0; i < nbrCommands; i++) {        updateCounts[i]=Statement.EXECUTE_FAILED;      }      int commandIndex=0;      StringBuilder queryBuf=new StringBuilder();      batchStmt=locallyScopedConn.createStatement();      if (locallyScopedConn.getEnableQueryTimeouts() && individualStatementTimeout != 0 && locallyScopedConn.versionMeetsMinimum(5,0,0)) {        timeoutTask=new CancelTask((StatementImpl)batchStmt);        locallyScopedConn.getCancelTimer().schedule(timeoutTask,individualStatementTimeout);      }      int counter=0;      int numberOfBytesPerChar=1;      String connectionEncoding=locallyScopedConn.getEncoding();      if (StringUtils.startsWithIgnoreCase(connectionEncoding,"utf")) {        numberOfBytesPerChar=3;      } else       if (CharsetMapping.isMultibyteCharset(connectionEncoding)) {        numberOfBytesPerChar=2;      }      int escapeAdjust=1;      batchStmt.setEscapeProcessing(this.doEscapeProcessing);      if (this.doEscapeProcessing) {        escapeAdjust=2;      }      SQLException sqlEx=null;      int argumentSetsInBatchSoFar=0;      for (commandIndex=0; commandIndex < nbrCommands; commandIndex++) {        String nextQuery=(String)this.batchedArgs.get(commandIndex);        if (((((queryBuf.length() + nextQuery.length()) * numberOfBytesPerChar) + 1 + MysqlIO.HEADER_LENGTH) * escapeAdjust) + 32 > this.connection.getMaxAllowedPacket()) {          try {            batchStmt.execute(queryBuf.toString(),java.sql.Statement.RETURN_GENERATED_KEYS);          } catch (          SQLException ex) {            sqlEx=handleExceptionForBatch(commandIndex,argumentSetsInBatchSoFar,updateCounts,ex);          }          counter=processMultiCountsAndKeys((StatementImpl)batchStmt,counter,updateCounts);          queryBuf=new StringBuilder();          argumentSetsInBatchSoFar=0;        }        queryBuf.append(nextQuery);        queryBuf.append(";");        argumentSetsInBatchSoFar++;      }      if (queryBuf.length() > 0) {        try {          batchStmt.execute(queryBuf.toString(),java.sql.Statement.RETURN_GENERATED_KEYS);        } catch (        SQLException ex) {          sqlEx=handleExceptionForBatch(commandIndex - 1,argumentSetsInBatchSoFar,updateCounts,ex);        }        counter=processMultiCountsAndKeys((StatementImpl)batchStmt,counter,updateCounts);      }      if (timeoutTask != null) {        if (timeoutTask.caughtWhileCancelling != null) {          throw timeoutTask.caughtWhileCancelling;        }        timeoutTask.cancel();        locallyScopedConn.getCancelTimer().purge();        timeoutTask=null;      }      if (sqlEx != null) {        throw SQLError.createBatchUpdateException(sqlEx,updateCounts,getExceptionInterceptor());      }      return (updateCounts != null) ? updateCounts : new long[0];    }  finally {      if (timeoutTask != null) {        timeoutTask.cancel();        locallyScopedConn.getCancelTimer().purge();      }      resetCancelledState();      try {        if (batchStmt != null) {          batchStmt.close();        }      }  finally {        if (!multiQueriesEnabled) {          locallyScopedConn.getIO().disableMultiQueries();        }      }    }  }}  }
class C{  private void advance(){  while (iter.hasNext()) {    Map.Entry<SwapKey,SwapValue> entry=iter.next();    byte[] bytes;    try {      bytes=entry.getValue().value(Space.this);    } catch (    IgniteSpiException e) {      throw new IgniteException(e);    }    if (bytes != null) {      next=new T2<>(entry.getKey(),bytes);      break;    }  }}  }
class C{  public void tagDefineBitsLossless(int id,int format,int width,int height,Color[] colors,byte[] imageData) throws IOException {  if (tags != null) {    tags.tagDefineBitsLossless(id,format,width,height,colors,imageData);  }}  }
class C{  private void removeFlow(String name){  storageSource.deleteRowAsync("controller_staticflowtableentry",name);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StandardBarPainter)) {    return false;  }  return true;}  }
class C{  public Millisecond(){  this(new Date());}  }
class C{  public BillInfoImpl prepareBillInfo(BigDecimal amountPaid,COLLECTIONTYPE collType,String source){  BillInfoImpl billInfoImpl=initialiseFromBill(amountPaid,collType);  ArrayList<ReceiptDetail> receiptDetails=new ArrayList<ReceiptDetail>();  List<EgBillDetails> billDetails=new ArrayList<EgBillDetails>(bill.getEgBillDetails());  Collections.sort(billDetails);  if (isMutationFeePayment) {    for (    EgBillDetails billDet : billDetails) {      receiptDetails.add(initReceiptDetail(billDet.getGlcode(),billDet.getCrAmount(),billDet.getCrAmount().subtract(billDet.getDrAmount()),billDet.getDrAmount(),billDet.getDescription()));    }  } else {    for (    EgBillDetails billDet : billDetails) {      receiptDetails.add(initReceiptDetail(billDet.getGlcode(),BigDecimal.ZERO,billDet.getCrAmount().subtract(billDet.getDrAmount()),billDet.getDrAmount(),billDet.getDescription()));    }    SpringBeanUtil.getPropertyTaxCollection().apportionPaidAmount(String.valueOf(bill.getId()),amountPaid,receiptDetails);  }  boolean isActualDemand=false;  for (  EgBillDetails billDet : bill.getEgBillDetails()) {    for (    ReceiptDetail rd : receiptDetails) {      if ((billDet.getGlcode().equals(rd.getAccounthead().getGlcode())) && (billDet.getDescription().equals(rd.getDescription()))) {        isActualDemand=billDet.getAdditionalFlag() == 1 ? true : false;        BillAccountDetails billAccDetails=new BillAccountDetails(billDet.getGlcode(),billDet.getOrderNo(),rd.getCramount(),rd.getDramount(),billDet.getFunctionCode(),billDet.getDescription(),isActualDemand,PURPOSE.valueOf(billDet.getPurpose()));        billInfoImpl.getPayees().get(0).getBillDetails().get(0).addBillAccountDetails(billAccDetails);        break;      }    }  }  billInfoImpl.setTransactionReferenceNumber(bill.getTransanctionReferenceNumber());  billInfoImpl.setSource(source != null ? source : "");  return billInfoImpl;}  }
class C{  public JulianDate(JulianDate d){  julian=d.julian;}  }
class C{  void doAttack(int x,int y,int tx,int ty){  creatureCheck(x,y,"attack");  creatureCheck(tx,ty,"attack");  Creature from=getCreature(x,y);  Creature to=getCreature(tx,ty);  destroyCreature(tx,ty);  removeOccupant(x,y);  placeOccupant(tx,ty,from);  from.attack(to);  getInLine(tx,ty);}  }
class C{  public static int string_to_int(String str){  return Integer.parseInt(str);}  }
class C{  @Override public void paintComponent(Graphics g){  super.paintComponent(g);  Graphics2D graphics=(Graphics2D)g;  graphics.setBackground(mColorSpectrumBackground);  graphics.setRenderingHints(RENDERING_HINTS);  drawFrequencies(graphics);  drawChannels(graphics);  drawCursor(graphics);}  }
class C{  public Quaternionf rotateLocal(float angleX,float angleY,float angleZ){  return rotateLocal(angleX,angleY,angleZ,this);}  }
class C{  @Override public Parcelable onSaveInstanceState(){  String path=mPhotoFilePath.get();  if (path == null)   return null;  Bundle bundle=new Bundle();  bundle.putString("photoFilePath",path);  return bundle;}  }
class C{  public static long complement(long s){  return ~s;}  }
class C{  public List<InlineKeyboardButton> toButtons(){  return buttons.stream().map(null).collect(Collectors.toList());}  }
class C{  public void replaceTradestrategy(Tradestrategy newTradestrategy){synchronized (this.tradingdays) {    for (    Tradingday tradingday : this.tradingdays) {      for (ListIterator<Tradestrategy> itemIter=tradingday.getTradestrategies().listIterator(); itemIter.hasNext(); ) {        Tradestrategy tradestrategy=itemIter.next();        if (tradestrategy.equals(newTradestrategy)) {          itemIter.set(newTradestrategy);        }      }    }  }}  }
class C{  public boolean isStaging(){  return getLocationOps() == STAGING;}  }
class C{  public short acceptNode(int n){  try {    if (getPredicateCount() > 0) {      countProximityPosition(0);      if (!executePredicates(n,m_lpi.getXPathContext()))       return DTMIterator.FILTER_SKIP;    }    return DTMIterator.FILTER_ACCEPT;  } catch (  javax.xml.transform.TransformerException se) {    throw new RuntimeException(se.getMessage());  }}  }
class C{  public DefaultHttpResponse(int statusCode,String statusLine,int redirectsFollowed,String finalUri,Header[] responseHeaders,String body){  _statusCode=statusCode;  _statusLine=statusLine;  _maxRedirectsFollowed=redirectsFollowed;  _finalUri=finalUri;  _responseHeaders=new HashMap();  if (responseHeaders != null) {    String headerName;    Header header;    for (int i=0; i < responseHeaders.length; i++) {      headerName=responseHeaders[i].getName().toLowerCase();      header=responseHeaders[i];      List headerList=(List)_responseHeaders.get(headerName);      if (headerList != null)       headerList.add(responseHeaders[i]); else       _responseHeaders.put(headerName,new ArrayList(Arrays.asList(new Header[]{header})));    }  }  _body=body;  Date now=new Date();  _timestamp=now.getTime();}  }
class C{  private StartAction(){  super("Start");}  }
class C{  public T onmouseover(String value){  return attr("onmouseover",value);}  }
class C{  public static void assumeFileExists(File file){  if (!file.exists()) {    System.err.println(file + " does not exist, skipping test");    Assume.assumeTrue(false);  }}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFEDisplacementMapElement(prefix,(AbstractDocument)doc);}  }
class C{  public MLContext(JavaSparkContext sc,boolean monitorPerformance) throws DMLRuntimeException {  initializeSpark(sc.sc(),monitorPerformance,false);}  }
class C{  private void flush(){  this.hbaseClient.mutate();  batchHelper.ack();}  }
class C{  public String toString(){  String string=caller;  if (level > 0 || thread != -1) {    string+="[";  }  if (level > 0) {    string+=level;  }  if (thread != -1) {    string+="," + thread;  }  if (level > 0 || thread != -1) {    string+="]";  }  string+=":";  if (spawnMessage) {    string+=">";  }  if (answer.length() > 0) {    string+=answer + "=";  }  if (callee.length() > 0) {    string+=callee + ".";  }  string+=message;  if (returnsInstantly) {    string+="&";  }  return string;}  }
class C{  @Override public void write(final int theByte) throws java.io.IOException {  if (suspendEncoding) {    super.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      out.write(Base64.encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= Base64.MAX_LINE_LENGTH) {        out.write(Base64.NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > Base64.WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != Base64.WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  public FlexibleGrowth(Type units){  super(units);}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public ServiceCall<String> convertDocumentToText(File document,String mediaType){  Request request=createConversionRequest(document,mediaType,ConversionTarget.NORMALIZED_TEXT,null);  return createServiceCall(request,ResponseConverterUtils.getString());}  }
class C{  public static String toString(Object object,ToStringStyle style,boolean outputTransients){  return toString(object,style,outputTransients,false,null);}  }
class C{  public RestoreDialog(){  initComponents();}  }
class C{  public void testBadUrls() throws Exception {  String[] badUrls={"","jdbc:","jdbc:whatever//","jdbc:t-router:","jdbc:t-router://","jdbc:t-router://service/db?qos","jdbc:t-router://service/db?qos=RW_STRICT&missingvalue"};  for (  String badUrl : badUrls) {    try {      new RouterURL(badUrl,null);      fail("Bad URL was parsed: url=[" + badUrl + "]");    } catch (    SQLException e) {    }  }}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy){  startScroll(startX,startY,dx,dy,DEFAULT_DURATION);}  }
class C{  protected File createFile(File parent,String filename,String fileContents) throws Exception {  File file=new File(parent,filename);  file.deleteOnExit();  FileOutputStream outputStream=new FileOutputStream(file);  outputStream.write(fileContents.getBytes("UTF-8"));  outputStream.close();  return file;}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  out.writeInt(b.length);  for (  double aB : b) {    out.writeDouble(aB);  }}  }
class C{  public SimpleByteArrayFactory(){  super();}  }
class C{  public boolean isUseAnisotropy(){  return this.useAnisotropy;}  }
class C{  public boolean isPrinted(){  Object oo=get_Value(COLUMNNAME_IsPrinted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String undo(){  if (!canUndo()) {    return "";  }  UndoAction undoAction=m_undoStack.get(m_nCurrentEditAction);  m_bNeedsUndoAction=false;  undoAction.undo();  m_bNeedsUndoAction=true;  m_nCurrentEditAction--;  return undoAction.getUndoMsg();}  }
class C{  protected boolean isNameUsedOnPage(String name,Object pageKey){  Hashtable pageNames=(Hashtable)pageStorage.get(pageKey);  if (pageNames != null) {    return pageNames.containsKey(name);  } else {    return false;  }}  }
class C{  public boolean isSuperInvocation(){  return this.superInvocation;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.w3.org/XML/1998/namespaces";  String qualifiedName="xml:element1";  Document doc;  Element newElement;  doc=(Document)load("staffNS",false);{    boolean success=false;    try {      newElement=doc.createElementNS(namespaceURI,qualifiedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public List<MediaSearchResult> searchTvShow(String searchTerm,MediaScraper mediaScraper,MediaLanguages language){  List<MediaSearchResult> searchResult=null;  try {    ITvShowMetadataProvider provider;    if (mediaScraper == null) {      provider=(ITvShowMetadataProvider)getDefaultMediaScraper().getMediaProvider();    } else {      provider=(ITvShowMetadataProvider)mediaScraper.getMediaProvider();    }    MediaSearchOptions options=new MediaSearchOptions(MediaType.TV_SHOW,searchTerm);    options.setLanguage(LocaleUtils.toLocale(language.name()));    options.setCountry(TvShowModuleManager.SETTINGS.getCertificationCountry());    LOGGER.info("=====================================================");    LOGGER.info("Searching with scraper: " + provider.getProviderInfo().getId() + ", "+ provider.getProviderInfo().getVersion());    LOGGER.info(options.toString());    LOGGER.info("=====================================================");    searchResult=provider.search(options);  } catch (  Exception e) {    LOGGER.error("searchTvShow",e);  }  return searchResult;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodelistindexgetlength.class,args);}  }
class C{  public void addShape3D(float x,float y,float z,Coord2D[] coordinates,float depth,int shapeTextureWidth,int shapeTextureHeight,int sideTextureWidth,int sideTextureHeight,int direction){  addShape3D(x,y,z,coordinates,depth,shapeTextureWidth,shapeTextureHeight,sideTextureWidth,sideTextureHeight,direction,null);}  }
class C{  public static CronScheduleBuilder cronSchedule(String cronExpression){  try {    return cronSchedule(new CronExpression(cronExpression));  } catch (  ParseException e) {    throw new RuntimeException("CronExpression '" + cronExpression + "' is invalid.",e);  }}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  private int incrementAndGet(AtomicInteger value,int max){  while (true) {    int cur=value.get();    int next=cur == max ? 0 : cur + 1;    if (value.compareAndSet(cur,next))     return next;  }}  }
class C{  public PluginIntentFilter(String action){  mPriority=0;  mActions=new ArrayList<String>();  addAction(action);}  }
class C{  public void addNotify(){  super.addNotify();  refreshFontMetrics(getGraphics2D(getGraphics()));  if (parserManager != null) {    parserManager.restartParsing();  }}  }
class C{  public final static boolean isMainContext(AppContext ctx){  return (ctx != null && ctx == mainAppContext);}  }
class C{  protected Algebraic(){}  }
class C{  public SizeLimitExceededException(){  super();}  }
class C{  public void init() throws ServletException {}  }
class C{  @SuppressWarnings("unused") private String bitsetName(BitSet bitset){  Optional<Field> findField=Stream.of(InternalN4JSParser.class.getDeclaredFields()).filter(null).filter(null).findFirst();  return findField.map(null).orElse("NN");}  }
class C{  protected void doCommonDownloadSetup() throws Exception {  setWiFiStateOn(true);  setAirplaneModeOn(false);  waitForExternalStoreMount();  removeAllCurrentDownloads();}  }
class C{  public LinkedListNode addLast(Object object){  LinkedListNode node=new LinkedListNode(object,head,head.previous);  node.previous.next=node;  node.next.previous=node;  return node;}  }
class C{  @Override protected void validate(){  failIf((this.value <= 0 || this.value > 1.0),"Ratio must be a float between 0 and 1");}  }
class C{  public boolean saveAccounts(int AD_Client_ID,int AD_Org_ID,int C_Element_ID){  log.config("");  Iterator iterator=this.values().iterator();  while (iterator.hasNext()) {    MElementValue na=(MElementValue)iterator.next();    na.setAD_Client_ID(AD_Client_ID);    na.setAD_Org_ID(AD_Org_ID);    na.setC_Element_ID(C_Element_ID);    if (!na.save())     return false;  }  return true;}  }
class C{  public String sql_deleteByAge(String vendorName,String catalogName,String schemaName,String tableName,Integer daysOld){  return sql_delete(vendorName,catalogName,schemaName,tableName,(String)null,daysOld);}  }
class C{  private void invoiceNew(MRequest request){  m_invoice=new MInvoice(getCtx(),0,get_TrxName());  m_invoice.setIsSOTrx(true);  MBPartner partner=new MBPartner(getCtx(),request.getC_BPartner_ID(),null);  m_invoice.setBPartner(partner);  m_invoice.saveEx();  m_linecount=0;}  }
class C{  private String generateSerialNumber(String str){  int value=str.hashCode();  String serialNumber=null;  if (value < 0) {    value=-value;    serialNumber=String.format("%010d",value);    serialNumber="1" + serialNumber;  } else {    serialNumber=String.format("%011d",value);  }  return serialNumber;}  }
class C{  public ClientMessage browseMessage(String queueName,long timeout){  return browseMessage(SimpleString.toSimpleString(queueName),timeout);}  }
class C{  public static boolean saveDSAPrivateKeyFile(String uname,DSAPrivateKey pr){  byte[] keyBytes=pr.getEncoded();  String filename=ClientConfig.getUserKeysPath() + "/" + uname+ ".pr";  File f=new File(filename);  f.getParentFile().mkdirs();  FileOutputStream fos=null;  boolean success=false;  try {    fos=new FileOutputStream(filename);    fos.write(keyBytes);    success=true;  } catch (  IOException e) {    Logging.error(e.getMessage());  } finally {    CommonMessaging.close(fos);  }  return success;}  }
class C{  public void print(char ch){  print(String.valueOf(ch));}  }
class C{  public SVGPoint elementCoordinatesFromEvent(Element tag,Event evt){  return SVGUtil.elementCoordinatesFromEvent(document,tag,evt);}  }
class C{  public static void moveTag(final AbstractSQLProvider provider,final ITreeNode<CTag> newParentNode,final ITreeNode<CTag> movedNode,final TagType type) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE02083: Provider argument can not be null");  Preconditions.checkNotNull(newParentNode,"IE02190: Parent argument can not be null");  Preconditions.checkNotNull(movedNode,"IE02191: Child argument can not be null");  final List<Integer> childIds=new ArrayList<>();  for (  final ITreeNode<CTag> childChild : movedNode.getChildren()) {    childIds.add(childChild.getObject().getId());  }  try {    final String childParentId=movedNode.getParent().getObject().getId() == 0 ? "null" : String.valueOf(movedNode.getParent().getObject().getId());    if (!childIds.isEmpty()) {      provider.getConnection().executeUpdate("update " + CTableNames.TAGS_TABLE + " set parent_id = "+ childParentId+ " where id in ("+ Commafier.commafy(childIds)+ ") and type = '"+ tagToString(type)+ "'",true);    }    provider.getConnection().executeUpdate("update " + CTableNames.TAGS_TABLE + " set parent_id = "+ newParentNode.getObject().getId()+ " where id = "+ movedNode.getObject().getId()+ " and type = '"+ tagToString(type)+ "'",true);  } catch (  final SQLException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  public synchronized boolean write(final byte[] data,final int offset,final boolean append){  OutputStream out=null;  try {    out=new BufferedOutputStream(new FileOutputStream(file,append),data.length - offset);    out.write(data,offset,data.length - offset);    out.flush();    return true;  } catch (  final Exception ex) {    if (Cfg.EXCEPTION) {      Check.log(ex);    }    return false;  } finally {    if (out != null) {      try {        out.close();      } catch (      final IOException e) {        if (Cfg.EXCEPTION) {          Check.log(e);        }        if (Cfg.DEBUG) {          Check.log(TAG + " Error: " + e.toString());        }      }    }  }}  }
class C{  protected RefactoringArguments(){}  }
class C{  public char read() throws IOException {  int ch=this.currentReader.pbReader.read();  while (ch < 0) {    if (this.readers.empty()) {      throw new IOException("Unexpected EOF");    }    this.currentReader.pbReader.close();    this.currentReader=(StackedReader)this.readers.pop();    ch=this.currentReader.pbReader.read();  }  return (char)ch;}  }
class C{  private static boolean less(Comparable v,Comparable w){  return v.compareTo(w) < 0;}  }
class C{  private Request createRequest(String method,SIPResponse sipResponse) throws SipException {  if (method == null || sipResponse == null)   throw new NullPointerException("null argument");  if (method.equals(Request.CANCEL))   throw new SipException("Dialog.createRequest(): Invalid request");  if (this.getState() == null || (this.getState().getValue() == TERMINATED_STATE && !method.equalsIgnoreCase(Request.BYE)) || (this.isServer() && this.getState().getValue() == EARLY_STATE && method.equalsIgnoreCase(Request.BYE)))   throw new SipException("Dialog  " + getDialogId() + " not yet established or terminated "+ this.getState());  SipUri sipUri=null;  if (this.getRemoteTarget() != null)   sipUri=(SipUri)this.getRemoteTarget().getURI().clone(); else {    sipUri=(SipUri)this.getRemoteParty().getURI().clone();    sipUri.clearUriParms();  }  CSeq cseq=new CSeq();  try {    cseq.setMethod(method);    cseq.setSeqNumber(this.getLocalSeqNumber());  } catch (  Exception ex) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logError("Unexpected error");    InternalErrorHandler.handleException(ex);  }  ListeningPointImpl lp=(ListeningPointImpl)this.sipProvider.getListeningPoint(sipResponse.getTopmostVia().getTransport());  if (lp == null) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logError("Cannot find listening point for transport " + sipResponse.getTopmostVia().getTransport());    throw new SipException("Cannot find listening point for transport " + sipResponse.getTopmostVia().getTransport());  }  Via via=lp.getViaHeader();  From from=new From();  from.setAddress(this.localParty);  To to=new To();  to.setAddress(this.remoteParty);  SIPRequest sipRequest=sipResponse.createRequest(sipUri,via,cseq,from,to);  if (SIPRequest.isTargetRefresh(method)) {    ContactHeader contactHeader=((ListeningPointImpl)this.sipProvider.getListeningPoint(lp.getTransport())).createContactHeader();    ((SipURI)contactHeader.getAddress().getURI()).setSecure(this.isSecure());    sipRequest.setHeader(contactHeader);  }  try {    cseq=(CSeq)sipRequest.getCSeq();    cseq.setSeqNumber(this.localSequenceNumber + 1);  } catch (  InvalidArgumentException ex) {    InternalErrorHandler.handleException(ex);  }  if (method.equals(Request.SUBSCRIBE)) {    if (eventHeader != null)     sipRequest.addHeader(eventHeader);  }  try {    if (this.getLocalTag() != null) {      from.setTag(this.getLocalTag());    } else {      from.removeTag();    }    if (this.getRemoteTag() != null) {      to.setTag(this.getRemoteTag());    } else {      to.removeTag();    }  } catch (  ParseException ex) {    InternalErrorHandler.handleException(ex);  }  this.updateRequest(sipRequest);  return sipRequest;}  }
class C{  public Enumeration<K> keys(){  return new KIt();}  }
class C{  @SuppressWarnings("WeakerAccess") protected void writeToTerminal(byte... bytes) throws IOException {synchronized (terminalOutput) {    terminalOutput.write(bytes);  }}  }
class C{  public CertException(int code){  verfCode=code;}  }
class C{  public Instant(long instant){  super();  iMillis=instant;}  }
class C{  public void reset(){  startDelay=0;  translationY=0;  translationZ=0;  scale=1f;  alpha=1f;  visible=false;  rect.setEmpty();  p=0f;}  }
class C{  public StringIndexOutOfBoundsException(){  super();}  }
class C{  public V put(K key,V value){  return put(key,value,averageMemory);}  }
class C{  public ComparisonFailure(String message,String expected,String actual){  super(message);  fExpected=expected;  fActual=actual;}  }
class C{  public DUserNoticeChooser(JFrame parent,String title,UserNotice userNotice){  super(parent,title,ModalityType.DOCUMENT_MODAL);  initComponents(userNotice);}  }
class C{  protected void zip(String destFile,FileList files,String basePath,boolean storeOnly,boolean sortBySuffix){  long kb=zipOrJar(destFile,files,basePath,storeOnly,sortBySuffix,false);  println("Zip " + destFile + " ("+ kb+ " KB)");}  }
class C{  public String toGeneralizedTimeString(){  Calendar calendar=Calendar.getInstance(TimeZone.getTimeZone("UTC"));  calendar.clear();  calendar.setTimeInMillis(kerberosTime);  return String.format("%04d%02d%02d%02d%02d%02dZ",calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH) + 1,calendar.get(Calendar.DAY_OF_MONTH),calendar.get(Calendar.HOUR_OF_DAY),calendar.get(Calendar.MINUTE),calendar.get(Calendar.SECOND));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void add(double x,double y){  add(new Node(0,x,y,x,y,x,y));}  }
class C{  private String convert(String s){  String nfkd=Normalizer.normalize(s,Form.NFKD);  StringBuilder buf=new StringBuilder();  int len=nfkd.length();  String lower;  char c;  for (int i=0; i < len; i++) {    c=nfkd.charAt(i);    if (!_excluded.get(c)) {      lower=(String)_cMap.get(String.valueOf(c));      if (lower != null)       buf.append(lower); else       buf.append(c);    }  }  return blockSplit(Normalizer.normalize(buf.toString(),Form.NFC));}  }
class C{  public FragmentedHandshakeMessage(HandshakeType type,int messageLength,int messageSeq,int fragmentOffset,byte[] fragmentedBytes,InetSocketAddress peerAddress){  this(fragmentedBytes,type,fragmentOffset,messageLength,peerAddress);  setMessageSeq(messageSeq);}  }
class C{  DHPublicKey(BigInteger y,BigInteger p,BigInteger g,int l){  this.y=y;  this.p=p;  this.g=g;  this.l=l;  try {    this.key=new DerValue(DerValue.tag_Integer,this.y.toByteArray()).toByteArray();    this.encodedKey=getEncoded();  } catch (  IOException e) {    throw new ProviderException("Cannot produce ASN.1 encoding",e);  }}  }
class C{  private MaterialSection newSectionInternal(final String title,final Bitmap icon,final boolean bottom,final MaterialMenu menu,final int position,final boolean refreshMenu){  MaterialSection section=new MaterialSection(MaterialSection.TARGET_CLICK,bottom,changeListener,new MaterialSectionBind<customTextView>());  additionalSection(section);  section.setIcon(icon);  section.setTitle(title);  menu.addItem(section,position);  if (refreshMenu)   reloadMenu();  return section;}  }
class C{  public void moveViewTo(float xIndex,float yValue,AxisDependency axis){  float valsInView=getDeltaY(axis) / mViewPortHandler.getScaleY();  Runnable job=new MoveViewJob(mViewPortHandler,xIndex,yValue + valsInView / 2f,getTransformer(axis),this);  if (mViewPortHandler.hasChartDimens()) {    post(job);  } else {    mJobs.add(job);  }}  }
class C{  @Override public boolean isFactoryForType(Object object){  if (object == modelPackage) {    return true;  }  if (object instanceof EObject) {    return ((EObject)object).eClass().getEPackage() == modelPackage;  }  return false;}  }
class C{  @Override public boolean canRead(){  return _channel != null;}  }
class C{  public void loadDemoFiles() throws IOException {  File fromDir=new File(XmlFile.xmlDir(),"demoOperations");  copyBackupSet(fromDir,getOperationsRoot());  log.debug("copying file: {}",_demoPanelFileName);  File src=new File(fromDir,_demoPanelFileName);  File dst=new File(getOperationsRoot(),_demoPanelFileName);  FileHelper.copy(src.getAbsolutePath(),dst.getAbsolutePath(),true);}  }
class C{  public boolean isEnableLighting(){  return this.enableLighting;}  }
class C{  public int convertObjectToPageNumber(final String ref){  return pageLookup.convertObjectToPageNumber(ref);}  }
class C{  public static CharSequence[] split(CharSequence line,int delimiter,int n){  int[] l=limits(line,delimiter,n);  CharSequence[] tokens=new CharSequence[l.length - 1];  for (int i=0; i < tokens.length; i++) {    tokens[i]=new StringSegment(line,l[i] + 1,l[i + 1]);  }  return tokens;}  }
class C{  private void handleSendingResult(String error,Command command){  JLabel label=new JLabel(COMMAND_SUCCESS);  label.setForeground(Gray._50);  BalloonBuilder builder=JBPopupFactory.getInstance().createBalloonBuilder(label);  builder.setFadeoutTime(FADEOUT_TIME).setShowCallout(false);  if (error == null) {    System.out.println("SUCCESS sending command");    builder.setFillColor(new JBColor(10930928,10930928));    HistoryUtils.saveCommand(command);  } else {    System.out.println("Sending command FAILED: " + error);    label.setText(error);    label.setForeground(Gray._0);    builder.setFillColor(JBColor.PINK);  }  builder.createBalloon().showInCenterOf(sendButtonsPanel);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return MODULE_CODE;case 2:  return CONFIG_ITEM_CODE;case 3:return PARAM_CODE;case 4:return PARAM_VALUE;default :return null;}}  }
class C{  public boolean reverseCorrectIt(){  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSECORRECT);  if (m_processMsg != null)   return false;  boolean ok_correct=(reverseCorrectIt(getGL_JournalBatch_ID()) != null);  if (!ok_correct)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSECORRECT);  if (m_processMsg != null)   return false;  return ok_correct;}  }
class C{  public void onFacingChange(){}  }
class C{  public static boolean hostSupportsOnFireVariableReplacement(Bundle extrasFromHost){  return hostSupports(extrasFromHost,EXTRA_HOST_CAPABILITY_SETTING_FIRE_VARIABLE_REPLACEMENT);}  }
class C{  @Override protected void onEnsureDebugId(String baseID){  super.onEnsureDebugId(baseID);  ensureDebugId(labelElem,baseID,"label");  ensureDebugId(inputElem,baseID,"input");  labelElem.setHtmlFor(inputElem.getId());}  }
class C{  protected void addToChannelsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Endpoint_toChannels_feature"),getString("_UI_PropertyDescriptor_description","_UI_Endpoint_toChannels_feature","_UI_Endpoint_type"),EipPackage.Literals.ENDPOINT__TO_CHANNELS,true,false,true,null,null,null));}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return PERSON;case 2:  return PAGE;case 3:return NONCE;default :return null;}}  }
class C{  @Override public boolean isValidEntity(Entity entity,IGame game){  boolean retVal=false;  if (null != entity) {    final int entityId=entity.getId();    for (int index=0; (index < entityIds.length) && !retVal; index++) {      if (entityId == entityIds[index]) {        retVal=true;      }    }  }  return retVal;}  }
class C{  @Override public BytesReference sourceRef(){  try {    this.source=CompressorFactory.uncompressIfNeeded(this.source);    return this.source;  } catch (  IOException e) {    throw new ElasticsearchParseException("failed to decompress source",e);  }}  }
class C{  public static IllegalArgumentException newIllegalArgumentException(String message,Object... arguments){  return initCause(new IllegalArgumentException(formatMessage(0,message,arguments)),arguments);}  }
class C{  public int createNewBlockStoreForReplay(Date dateToReplayFrom) throws IOException, BlockStoreException {  log.debug("Loading/ creating blockstore ...");  if (blockStore != null) {    try {      blockStore.close();      blockStore=null;    } catch (    NullPointerException npe) {      log.debug("NullPointerException on blockstore close");    }  }  Date genesisPlusOnwWeekAndASecond=new Date(MultiBitService.genesisBlockCreationDate.getTime() + (86400 * 7 + 1) * 1000);  if (dateToReplayFrom != null) {    if (dateToReplayFrom.getTime() < genesisPlusOnwWeekAndASecond.getTime()) {      dateToReplayFrom=genesisPlusOnwWeekAndASecond;    }    blockStore=createBlockStore(dateToReplayFrom,true);  } else {    blockStore=createBlockStore(genesisPlusOnwWeekAndASecond,true);  }  log.debug("Blockstore is '" + blockStore + "'");  log.debug("Creating blockchain ...");  blockChain=new MultiBitBlockChain(bitcoinController.getModel().getNetworkParameters(),blockStore);  log.debug("Created blockchain '" + blockChain + "'");  if (blockChain != null) {    List<WalletData> perWalletModelDataList=bitcoinController.getModel().getPerWalletModelDataList();    for (    WalletData loopPerWalletModelData : perWalletModelDataList) {      if (loopPerWalletModelData.getWallet() != null) {        blockChain.addWallet(loopPerWalletModelData.getWallet());      }    }  }  return blockChain.getBestChainHeight();}  }
class C{  public AbstractDrawingViewAction(@Nullable DrawingView view){  this.specificView=view;  registerEventHandler();}  }
class C{  public XmlResourceParser loadXmlMetaData(PackageManager pm,String name){  if (metaData != null) {    int resid=metaData.getInt(name);    if (resid != 0) {      return pm.getXml(packageName,resid,getApplicationInfo());    }  }  return null;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:32.200 -0500",hash_original_method="A817FB22551D2F047707EAAC44367E27",hash_generated_method="A88C42586BD6041A191DF78F545394C3") private boolean ensureTouchModeLocally(boolean inTouchMode){  if (DBG)   Log.d("touchmode","ensureTouchModeLocally(" + inTouchMode + "), current "+ "touch mode is "+ mAttachInfo.mInTouchMode);  if (mAttachInfo.mInTouchMode == inTouchMode)   return false;  mAttachInfo.mInTouchMode=inTouchMode;  mAttachInfo.mTreeObserver.dispatchOnTouchModeChanged(inTouchMode);  return (inTouchMode) ? enterTouchMode() : leaveTouchMode();}  }
class C{  public PatternFilenameFilter(Pattern pattern){  this.pattern=Preconditions.checkNotNull(pattern);}  }
class C{  public static String toString(byte[] b){  ByteArrayOutputStream os=new ByteArrayOutputStream();  for (int i=0; i < b.length; i++) {    short value=(short)(b[i] & 0xFF);    byte high=(byte)(value >> 4);    byte low=(byte)(value & 0xF);    os.write(Base16.charAt(high));    os.write(Base16.charAt(low));  }  return new String(os.toByteArray());}  }
class C{  public VertexBufferObjectWithVAO(boolean isStatic,int numVertices,VertexAttribute... attributes){  this(isStatic,numVertices,new VertexAttributes(attributes));}  }
class C{  public static AndroidCustomField dir(String type,String... values){  AndroidCustomField property=new AndroidCustomField();  property.dir=true;  property.type=type;  Collections.addAll(property.values,values);  return property;}  }
class C{  public static boolean hasJavaNature(IProject project){  return true;}  }
class C{  public byte[] type3(byte[] type2,byte[] nonce) throws NTLMException {  if (type2 == null || (v != Version.NTLM && nonce == null)) {    throw new NTLMException(NTLMException.PROTOCOL,"type2 and nonce cannot be null");  }  debug("NTLM Client: Type 2 received\n");  debug(type2);  Reader r=new Reader(type2);  byte[] challenge=r.readBytes(24,8);  int inputFlags=r.readInt(20);  boolean unicode=(inputFlags & 1) == 1;  int flags=0x88200 | (inputFlags & 3);  Writer p=new Writer(3,64);  byte[] lm=null, ntlm=null;  p.writeSecurityBuffer(28,domain,unicode);  p.writeSecurityBuffer(36,username,unicode);  p.writeSecurityBuffer(44,hostname,unicode);  if (v == Version.NTLM) {    byte[] lmhash=calcLMHash(pw1);    byte[] nthash=calcNTHash(pw2);    if (writeLM)     lm=calcResponse(lmhash,challenge);    if (writeNTLM)     ntlm=calcResponse(nthash,challenge);  } else   if (v == Version.NTLM2) {    byte[] nthash=calcNTHash(pw2);    lm=ntlm2LM(nonce);    ntlm=ntlm2NTLM(nthash,nonce,challenge);  } else {    byte[] nthash=calcNTHash(pw2);    if (writeLM)     lm=calcV2(nthash,username.toUpperCase(Locale.US) + domain,nonce,challenge);    if (writeNTLM) {      byte[] alist=((inputFlags & 0x800000) != 0) ? r.readSecurityBuffer(40) : new byte[0];      byte[] blob=new byte[32 + alist.length];      System.arraycopy(new byte[]{1,1,0,0,0,0,0,0},0,blob,0,8);      byte[] time=BigInteger.valueOf(new Date().getTime()).add(new BigInteger("11644473600000")).multiply(BigInteger.valueOf(10000)).toByteArray();      for (int i=0; i < time.length; i++) {        blob[8 + time.length - i - 1]=time[i];      }      System.arraycopy(nonce,0,blob,16,8);      System.arraycopy(new byte[]{0,0,0,0},0,blob,24,4);      System.arraycopy(alist,0,blob,28,alist.length);      System.arraycopy(new byte[]{0,0,0,0},0,blob,28 + alist.length,4);      ntlm=calcV2(nthash,username.toUpperCase(Locale.US) + domain,blob,challenge);    }  }  p.writeSecurityBuffer(12,lm);  p.writeSecurityBuffer(20,ntlm);  p.writeSecurityBuffer(52,new byte[0]);  p.writeInt(60,flags);  debug("NTLM Client: Type 3 created\n");  debug(p.getBytes());  return p.getBytes();}  }
class C{  public boolean isSelected(int position){  return getSelectedItems().contains(position);}  }
class C{  private void loadCorpus(String source,String target,String align) throws IOException {  logger.info("Counting the number of corpus positions");  TimeKeeper timer=TimingUtils.start();  int numSourcePositions=0;  int numTargetPositions=0;  numSentences=0;  ParallelCorpus corpus=new ParallelCorpus(1);  try (LineNumberReader fReader=IOTools.getReaderFromFile(source)){    LineNumberReader eReader=IOTools.getReaderFromFile(target);    LineNumberReader aReader=IOTools.getReaderFromFile(align);    for (String fLine; (fLine=fReader.readLine()) != null; ) {      String eLine=eReader.readLine();      String aLine=aReader.readLine();      AlignedSentence example=corpus.getSentence(fLine,eLine,aLine);      if (example != null) {        numSourcePositions+=example.sourceLength();        numTargetPositions+=example.targetLength();        ++numSentences;      }    }  }   final int initialVocabularySize=corpus.getVocabulary().size();  timer.mark("Counting corpus positions");  logger.info("Source positions: {}  Target positions: {}  Sentences: {}",numSourcePositions,numTargetPositions,numSentences);  final int srcLength=numSourcePositions + numSentences;  if (srcLength < 0)   throw new RuntimeException("Maximum source bitext size exceeded");  srcBitext=new int[srcLength];  f2e=new int[srcLength];  final int tgtLength=numTargetPositions + numSentences;  if (tgtLength < 0)   throw new RuntimeException("Maximum target bitext size exceeded");  tgtBitext=new int[tgtLength];  e2f=new int[tgtLength];  try (LineNumberReader fReader=IOTools.getReaderFromFile(source)){    LineNumberReader eReader=IOTools.getReaderFromFile(target);    LineNumberReader aReader=IOTools.getReaderFromFile(align);    int srcOffset=0;    int tgtOffset=0;    for (String fLine; (fLine=fReader.readLine()) != null; ) {      String eLine=eReader.readLine();      String aLine=aReader.readLine();      AlignedSentence sentence=corpus.getSentence(fLine,eLine,aLine);      if (sentence == null) {        logger.info("Discarding parallel example {}",fReader.getLineNumber());      } else {        System.arraycopy(sentence.source,0,srcBitext,srcOffset,sentence.sourceLength());        System.arraycopy(sentence.f2e,0,f2e,srcOffset,sentence.f2e.length);        System.arraycopy(sentence.target,0,tgtBitext,tgtOffset,sentence.targetLength());        System.arraycopy(sentence.e2f,0,e2f,tgtOffset,sentence.e2f.length);        srcOffset+=sentence.sourceLength();        tgtOffset+=sentence.targetLength();        srcBitext[srcOffset]=toSentenceOffset(tgtOffset);        tgtBitext[tgtOffset]=toSentenceOffset(srcOffset);        ++srcOffset;        ++tgtOffset;      }    }  }   this.vocabulary=corpus.getVocabulary();  assert initialVocabularySize == vocabulary.size();  timer.mark("Loading corpus");  logger.info("Done loading corpus: {}",timer);}  }
class C{  public static <T>String toString(TreeDef<T> treeDef,T root,Function<? super T,String> toString){  return toString(treeDef,root,toString," ");}  }
class C{  public StrBuilder replace(StrMatcher matcher,String replaceStr,int startIndex,int endIndex,int replaceCount){  endIndex=validateRange(startIndex,endIndex);  return replaceImpl(matcher,replaceStr,startIndex,endIndex,replaceCount);}  }
class C{  private void tabCreatedInForeground(int id,int sourceId,boolean newIsIncognito,float originX,float originY){  LayoutTab newLayoutTab=createLayoutTab(id,newIsIncognito,NO_CLOSE_BUTTON,NO_TITLE);  if (mLayoutTabs == null || mLayoutTabs.length == 0) {    mLayoutTabs=new LayoutTab[]{newLayoutTab};  } else {    mLayoutTabs=new LayoutTab[]{mLayoutTabs[0],newLayoutTab};  }  updateCacheVisibleIds(new LinkedList<Integer>(Arrays.asList(id,sourceId)));  newLayoutTab.setBorderAlpha(0.0f);  newLayoutTab.setStaticToViewBlend(1.f);  forceAnimationToFinish();  Interpolator interpolator=BakedBezierInterpolator.TRANSFORM_CURVE;  addToAnimation(newLayoutTab,LayoutTab.Property.SCALE,0.f,1.f,FOREGROUND_ANIMATION_DURATION,0,false,interpolator);  addToAnimation(newLayoutTab,LayoutTab.Property.ALPHA,0.f,1.f,FOREGROUND_ANIMATION_DURATION,0,false,interpolator);  addToAnimation(newLayoutTab,LayoutTab.Property.X,originX,0.f,FOREGROUND_ANIMATION_DURATION,0,false,interpolator);  addToAnimation(newLayoutTab,LayoutTab.Property.Y,originY,0.f,FOREGROUND_ANIMATION_DURATION,0,false,interpolator);  mTabModelSelector.selectModel(newIsIncognito);  startHiding(id,false);}  }
class C{  @Contract(pure=true) public final boolean isRunning(@NonNull final String tag){  final Integer id=mTaggedRequests.get(tag);  if (id != null) {    return isRunning(id);  } else {    return false;  }}  }
class C{  public final boolean isClosed(){  return closed.get();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XYCoordinate)) {    return false;  }  XYCoordinate that=(XYCoordinate)obj;  if (this.x != that.x) {    return false;  }  if (this.y != that.y) {    return false;  }  return true;}  }
class C{  public ElementRule(Class type,String description){  this(type,description,null,1,1);}  }
class C{  public static ClassEnum parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ClassEnum object=null;  java.util.Map attributeMap=new java.util.HashMap();  java.util.List extraAttributeList=new java.util.ArrayList();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement() || reader.hasText()) {        java.lang.String content=reader.getElementText();        if (content.indexOf(":") > 0) {          prefix=content.substring(0,content.indexOf(":"));          namespaceuri=reader.getNamespaceURI(prefix);          object=ClassEnum.Factory.fromString(content,namespaceuri);        } else {          object=ClassEnum.Factory.fromString(content,"");        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void testProvidesChecksum(){  OlimexRfidProtocol instance=new OlimexRfidProtocol();  assertEquals(false,instance.providesChecksum());}  }
class C{  public CUDA_ARRAY_DESCRIPTOR(){}  }
class C{  private void handleSubmitCellsButton(){  int selected=worksheetListBox.getSelectedIndex();  if (worksheetEntries != null && selected >= 0) {    CellBasedSpreadsheetPanel.createWindow(service,worksheetEntries.get(selected).getCellFeedUrl());  }}  }
class C{  public void addDependency(ClassDeclaration c){  if (tab != null) {    tab.put(c);  }  if (toplevelEnv.print_dependencies() && c != getClassDeclaration()) {    deps.put(c,c);  }}  }
class C{  public boolean isSetDeleted(){  return EncodingUtils.testBit(__isset_bitfield,__DELETED_ISSET_ID);}  }
class C{  public Plot(){  super();  paintHelper=new PaintHelper();  currentDataset=-1;}  }
class C{  public ExtensionResourceFilter(String extension){  this(new String[]{extension},false,true);}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  public BaseRecentRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options,BaseRecentCollectionResponse.class,IRecentCollectionPage.class);}  }
class C{  public FBServiceManager(GDSType gdsType){  dbFactory=GDSFactory.getDatabaseFactoryForType(gdsType);}  }
class C{  public void onNavigationEvent(int navigationEvent,Bundle extras){}  }
class C{  public Collection<RunningQuery> showQueries() throws Exception {  final ConnectOptions opts=newUpdateConnectOptions(baseServiceURL,null,null);  opts.addRequestParam(SHOW_QUERIES);  opts.setAcceptHeader(IMimeTypes.MIME_APPLICATION_JSON);  JettyResponseListener response=null;  try {    checkResponseCode(response=doConnect(opts));    final String contentType=response.getContentType();    if (!IMimeTypes.MIME_APPLICATION_JSON.equals(contentType))     throw new RuntimeException("Expected MIME_TYPE " + IMimeTypes.MIME_APPLICATION_JSON + " but received : "+ contentType+ ".");    final InputStream is=response.getInputStream();    final List<RunningQuery> runningQueries=JsonHelper.readRunningQueryList(is);    return runningQueries;  }  finally {    if (response != null)     response.abort();  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  DShowTVPlayer.setVideoDecoderFilter(getString(stack));  return null;}  }
class C{  @SideEffectFree public void log(Level level,@Nullable String msg){  throw new RuntimeException();}  }
class C{  @Override protected void onStop(){  super.onStop();  if (this.mPubNub != null)   this.mPubNub.unsubscribeAll();}  }
class C{  public GitlabHTTPRequestor with(String key,Object value){  if (value != null && key != null) {    data.put(key,value);  }  return this;}  }
class C{  public final void testRSAMultiPrimePrivateCrtKeySpec03(){  try {    new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,null,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  public static boolean checkCPReblock(ExecutionContext ec,String varin) throws DMLRuntimeException {  CacheableData<?> obj=ec.getCacheableData(varin);  MatrixCharacteristics mc=ec.getMatrixCharacteristics(varin);  long rows=mc.getRows();  long cols=mc.getCols();  long nnz=mc.getNonZeros();  if (!ConfigurationManager.isDynamicRecompilation() || !OptimizerUtils.isHybridExecutionMode()) {    return false;  }  MatrixFormatMetaData iimd=(MatrixFormatMetaData)obj.getMetaData();  if (obj.getRDDHandle() != null && iimd.getInputInfo() != InputInfo.BinaryBlockInputInfo && iimd.getInputInfo() != InputInfo.BinaryCellInputInfo) {    return false;  }  if (rows <= 0 || cols <= 0) {    return false;  }  double sp=OptimizerUtils.getSparsity(rows,cols,nnz);  double mem=MatrixBlock.estimateSizeInMemory(rows,cols,sp);  if (!OptimizerUtils.isValidCPDimensions(rows,cols) || !OptimizerUtils.isValidCPMatrixSize(rows,cols,sp) || mem >= OptimizerUtils.getLocalMemBudget()) {    return false;  }  long estFilesize=(long)(3.5 * mem);  long cpThreshold=CP_REBLOCK_THRESHOLD_SIZE * OptimizerUtils.getParallelTextReadParallelism();  return (estFilesize < cpThreshold);}  }
class C{  protected float unwrap(Object value){  return ((Float)value).floatValue();}  }
class C{  public int compareTo(ReadablePartial partial){  if (this == partial) {    return 0;  }  if (partial instanceof LocalDateTime) {    LocalDateTime other=(LocalDateTime)partial;    if (iChronology.equals(other.iChronology)) {      return (iLocalMillis < other.iLocalMillis ? -1 : (iLocalMillis == other.iLocalMillis ? 0 : 1));    }  }  return super.compareTo(partial);}  }
class C{  private boolean isLocalRequest(DLockRequestMessage request){  return request.getSender().equals(this.dlock.getDistributionManager().getId());}  }
class C{  public static void hide(final Dialog dialog){  if (dialog != null) {    dialog.hide();  }}  }
class C{  public boolean isVoided(){  return STATUS_Voided.equals(m_status);}  }
class C{  public static Date valueOf(String s){  final int YEAR_LENGTH=4;  final int MONTH_LENGTH=2;  final int DAY_LENGTH=2;  final int MAX_MONTH=12;  final int MAX_DAY=31;  int firstDash;  int secondDash;  Date d=null;  if (s == null) {    throw new java.lang.IllegalArgumentException();  }  firstDash=s.indexOf('-');  secondDash=s.indexOf('-',firstDash + 1);  if ((firstDash > 0) && (secondDash > 0) && (secondDash < s.length() - 1)) {    String yyyy=s.substring(0,firstDash);    String mm=s.substring(firstDash + 1,secondDash);    String dd=s.substring(secondDash + 1);    if (yyyy.length() == YEAR_LENGTH && (mm.length() >= 1 && mm.length() <= MONTH_LENGTH) && (dd.length() >= 1 && dd.length() <= DAY_LENGTH)) {      int year=Integer.parseInt(yyyy);      int month=Integer.parseInt(mm);      int day=Integer.parseInt(dd);      if ((month >= 1 && month <= MAX_MONTH) && (day >= 1 && day <= MAX_DAY)) {        d=new Date(year - 1900,month - 1,day);      }    }  }  if (d == null) {    throw new java.lang.IllegalArgumentException();  }  return d;}  }
class C{  public void removeChangeListener(StructuredViewer listener){  listeners.remove(listener);}  }
class C{  public void copy(Column source){  checkConstraint=source.checkConstraint;  checkConstraintSQL=source.checkConstraintSQL;  displaySize=source.displaySize;  name=source.name;  precision=source.precision;  scale=source.scale;  nullable=source.nullable;  defaultExpression=source.defaultExpression;  originalSQL=source.originalSQL;  convertNullToDefault=source.convertNullToDefault;  sequence=source.sequence;  comment=source.comment;  computeTableFilter=source.computeTableFilter;  isComputed=source.isComputed;  selectivity=source.selectivity;  primaryKey=source.primaryKey;}  }
class C{  public static Object invokeStaticMethod(Class<?> clazz,String name) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {  return invokeStaticMethod(clazz,name,null,null);}  }
class C{  private int calculateLeftSeconds(){  return maxProgress - currentProgress;}  }
class C{  public Class toClass(CtClass clazz) throws CannotCompileException {  return toClass(clazz,getClassLoader());}  }
class C{  public int open(){  int value=super.open();  if (popupCloser == null) {    popupCloser=new PopupCloserListener();  }  popupCloser.installListeners();  IContentProposal p=getSelectedProposal();  if (p != null) {    showProposalDescription();  }  return value;}  }
class C{  @Override public void draw(final Graphics g,final int x,final int y){  update();  if (sprite != null) {    sprite.draw(g,x,y);  }}  }
class C{  public long key(){  return _map._set[_index];}  }
class C{  public BaseParams(final String key,final String value){  this(new HashMap<String,String>(){{      put(key,value);    }  });}  }
class C{  public void visitOuterClass(String owner,String name,String desc){  if (cv != null) {    cv.visitOuterClass(owner,name,desc);  }}  }
class C{  public JSONArray toJSONArray(JSONArray names) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  JSONArray ja=new JSONArray();  for (int i=0; i < names.length(); i+=1) {    ja.put(this.opt(names.getString(i)));  }  return ja;}  }
class C{  public static boolean isJSON(String data){  JSONParser parser=new JSONParser();  try {    JSONObject json=(JSONObject)parser.parse(data);  } catch (  ParseException e) {    return false;  }  return true;}  }
class C{  public GooglePlacesAdapter(Context context,int resource,GoogleApiClient googleApiClient,LatLngBounds bounds,AutocompleteFilter filter){  super(context,resource);  mGoogleApiClient=googleApiClient;  mBounds=bounds;  mPlaceFilter=filter;}  }
class C{  public static void resetHash(String s){  unsafe.getAndSetInt(s,hashOffset,0);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (list_1: ");  result.append(list_1);  result.append(", name_1: ");  result.append(name_1);  result.append(", type_1: ");  result.append(type_1);  result.append(')');  return result.toString();}  }
class C{  public String description(){  return m_Description;}  }
class C{  protected InterfaceScopeImpl(){  super();}  }
class C{  public JSONBuffer append(int[] cont){  startArray();  for (int i=0; i < cont.length; i++) {    if (i > 0) {      buffer.append(",");    }    buffer.append(Integer.toString(cont[i]));  }  closeArray();  return this;}  }
class C{  protected void invalidateUser(HttpServletRequest servletRequest,boolean invalidateSession){  if (invalidateSession) {    HttpSession session=servletRequest.getSession(false);    if (session != null) {      LOGGER.debug("Invalidating the session.");      session.invalidate();    }  }  LOGGER.debug("Clearing the security context.");  SecurityContextHolder.clearContext();}  }
class C{  static StackTraceElement findTestClassTraceElement(StackTraceElement[] trace){  for (int i=trace.length - 1; i >= 0; i--) {    StackTraceElement element=trace[i];    if (TEST_CASE_CLASS.equals(element.getClassName()) && TEST_CASE_METHOD.equals(element.getMethodName())) {      return trace[i - 3];    }  }  throw new IllegalArgumentException("Could not find test class!");}  }
class C{  public static void main(String[] args) throws IOException {  int runTime=Integer.parseInt(args[0]);  int repeat=Integer.parseInt(args[1]);  for (int i=runTime; i < repeat; ++i) {    boolean enableOutput=true;    boolean outputToFile=true;    String inputFolder=ContainerOverbooking.class.getClassLoader().getResource("workload/planetlab").getPath();    String outputFolder="~/Results";    String vmAllocationPolicy="MSThreshold-Under_0.80_0.70";    String containerSelectionPolicy="MaxUsage";    String containerAllocationPolicy="MostFull";    String hostSelectionPolicy="FirstFit";    String vmSelectionPolicy="VmMaxC";    int OverBookingFactor=80;    new RunnerInitiator(enableOutput,outputToFile,inputFolder,outputFolder,vmAllocationPolicy,containerAllocationPolicy,vmSelectionPolicy,containerSelectionPolicy,hostSelectionPolicy,OverBookingFactor,Integer.toString(i),outputFolder);  }}  }
class C{  public static double chisquare(double[] d1,double[] d2){  assert (d1.length == d2.length);  double sum=0d;  double m;  for (int i=0; i < d1.length; i++) {    m=(d1[i] + d2[i]) / 2;    sum+=(d1[i] - m) * (d1[i] - m) / m;  }  return sum;}  }
class C{  private boolean isPackageAboveVersion(String packageName,int minVersion){  return PackageUtils.getPackageVersion(mContext,packageName) >= minVersion;}  }
class C{  E doRemoveFirst(){  for (; ; ) {    Node<E> b=head.node;    Node<E> n=b.next;    if (n == null)     return null;    Node<E> f=n.next;    if (n != b.next)     continue;    Object v=n.value;    if (v == null) {      n.helpDelete(b,f);      continue;    }    if (!n.casValue(v,null))     continue;    if (!n.appendMarker(f) || !b.casNext(n,f))     findFirst();    clearIndexToFirst();    return n.key;  }}  }
class C{  public static boolean isUriRequiresPermissions(@NonNull Context context,@NonNull Uri uri){  try {    ContentResolver resolver=context.getContentResolver();    InputStream stream=resolver.openInputStream(uri);    stream.close();    return false;  } catch (  Exception e) {    return true;  }}  }
class C{  @Bean public MappingJackson2HttpMessageConverter jackson2Converter(){  MappingJackson2HttpMessageConverter converter=new MappingJackson2HttpMessageConverter();  converter.setObjectMapper(objectMapper());  return converter;}  }
class C{  public void addSelectionListener(final SelectionListener listener){  this.selectionListeners.add(listener);}  }
class C{  public static <S>TableView<S> tableView(String placeholder,TableColumn<S,?>... cols){  TableView<S> tbl=new TableView<>();  tbl.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);  tbl.setEditable(true);  tbl.setMinHeight(70);  tbl.setPlaceholder(text(placeholder,0));  tbl.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);  tbl.getColumns().addAll(cols);  return tbl;}  }
class C{  @DSSource({DSSourceKind.IO}) @DSComment("Activity on IO class") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:51.173 -0500",hash_original_method="44D2E1EC0EF3B53AC5594D464D2C83B9",hash_generated_method="6A4474C98316806C704D1FF867C7D064") @Override public synchronized int read() throws IOException {  return fillbuf(in,buf);}  }
class C{  protected static String addMavenNamespace(String effectiveXml,boolean isPom){  SAXBuilder builder=new SAXBuilder();  try {    Document document=builder.build(new StringReader(effectiveXml));    Element rootElement=document.getRootElement();    Namespace pomNamespace=Namespace.getNamespace("","http://maven.apache.org/POM/4.0.0");    rootElement.setNamespace(pomNamespace);    Namespace xsiNamespace=Namespace.getNamespace("xsi","http://www.w3.org/2001/XMLSchema-instance");    rootElement.addNamespaceDeclaration(xsiNamespace);    if (rootElement.getAttribute("schemaLocation",xsiNamespace) == null) {      rootElement.setAttribute("schemaLocation","http://maven.apache.org/POM/4.0.0 " + (isPom ? POM_XSD_URL : SETTINGS_XSD_URL),xsiNamespace);    }    ElementFilter elementFilter=new ElementFilter(Namespace.getNamespace(""));    for (Iterator i=rootElement.getDescendants(elementFilter); i.hasNext(); ) {      Element e=(Element)i.next();      e.setNamespace(pomNamespace);    }    addLineBreaks(document,pomNamespace);    StringWriter w=new StringWriter();    Format format=Format.getRawFormat();    XMLOutputter out=new XMLOutputter(format);    out.output(document.getRootElement(),w);    return w.toString();  } catch (  JDOMException e) {    return effectiveXml;  }catch (  IOException e) {    return effectiveXml;  }}  }
class C{  public double[][] allPredictions(){  double Y[][]=new double[predictions.size()][];  for (int i=0; i < predictions.size(); i++) {    Y[i]=rowConfidence(i);  }  return Y;}  }
class C{  public boolean offer(E e){  return add(e);}  }
class C{  static ModuleSpecifierProposal createFromPath(IPath path,ModuleProposalType moduleType){  String content, label;  if (moduleType == ModuleProposalType.FOLDER) {    content=path.removeFileExtension().addTrailingSeparator().toString();  } else {    content=path.removeFileExtension().toString();  }  if (moduleType == ModuleProposalType.FOLDER) {    label=path.addTrailingSeparator().toString();  } else {    label=path.toString();  }  return new ModuleSpecifierProposal(content,label,moduleType);}  }
class C{  private static void queryUserService(StatelessService service,Operation parentOp,BasicAuthenticationContext authContext){  QueryTask q=new QueryTask();  q.querySpec=new QueryTask.QuerySpecification();  q.querySpec.query=authContext.userQuery;  q.taskInfo.isDirect=true;  Operation.CompletionHandler userServiceCompletion=null;  Operation queryOp=Operation.createPost(service,ServiceUriPaths.CORE_QUERY_TASKS).setBody(q).setCompletion(userServiceCompletion);  service.setAuthorizationContext(queryOp,service.getSystemAuthorizationContext());  service.sendRequest(queryOp);}  }
class C{  public Phrase subPhrase(int start,int end){  return new ContiguousPhrase(startIndex + start,startIndex + end,corpusArray);}  }
class C{  public void quit(){  for (int i=0; i < control_systems.length; i++) {    System.out.println(control_systems.length);    control_systems[i].trialEnd();    control_systems[i].quit();  }}  }
class C{  boolean simpleRequestResponseMessage(DMessage msg,int msgType,int timeout){  boolean response=false;  timeout=(timeout > 0) ? timeout : getPreference(SessionManager.PREF_RESPONSE_TIMEOUT);  DMessageCounter msgCounter=getMessageCounter();  int isolate=msg.getTargetIsolate();  long num=getMessageInCount(msgCounter,isolate,msgType);  long expect=num + 1;  sendMessage(msg);  long startTime=System.currentTimeMillis();  m_incoming=false;synchronized (getMessageInLock(msgCounter,isolate)) {    while ((expect > getMessageInCount(msgCounter,isolate,msgType)) && System.currentTimeMillis() < startTime + timeout && isConnected()) {      try {        getMessageInLock(msgCounter,isolate).wait(timeout);      } catch (      InterruptedException e) {        e.printStackTrace();      }synchronized (this) {        if (m_incoming) {          startTime=System.currentTimeMillis();          m_incoming=false;        }      }    }  }  if (getMessageInCount(msgCounter,isolate,msgType) >= expect)   response=true; else   if (timeout <= 0 && Trace.error)   Trace.trace("Timed-out waiting for " + DMessage.inTypeName(msgType) + " response to message "+ msg.outToString());  m_lastResponse=response;  return response;}  }
class C{  public NceMenu(NceSystemConnectionMemo memo){  super();  ResourceBundle rb=ResourceBundle.getBundle("jmri.jmrix.JmrixSystemsBundle");  if (memo == null) {    new Exception().printStackTrace();    return;  }  setText(memo.getUserName());  jmri.util.swing.WindowInterface wi=new jmri.util.swing.sdi.JmriJFrameInterface();  for (  Item item : panelItems) {    if (item == null) {      add(new javax.swing.JSeparator());    } else {      NceNamedPaneAction a=new NceNamedPaneAction(rb.getString(item.name),wi,item.load,memo);      add(a);      if ((item.enable & memo.getNceCmdGroups()) != 0) {        a.setEnabled(true);      } else {        a.setEnabled(false);      }    }  }  setEnabled(memo.getNceTrafficController() != null);  add(new javax.swing.JSeparator());}  }
class C{  public boolean isAllAccess(){  return this == FULL_ACCESS;}  }
class C{  public void updateSizes(int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  protected void addAttributes(Element element,Attributes attributes){  boolean noNamespaceAttributes=false;  if (element instanceof AbstractElement) {    AbstractElement baseElement=(AbstractElement)element;    baseElement.setAttributes(attributes,namespaceStack,noNamespaceAttributes);  } else {    int size=attributes.getLength();    for (int i=0; i < size; i++) {      String attributeQName=attributes.getQName(i);      if (noNamespaceAttributes || !attributeQName.startsWith("xmlns")) {        String attributeURI=attributes.getURI(i);        String attributeLocalName=attributes.getLocalName(i);        String attributeValue=attributes.getValue(i);        QName qName=namespaceStack.getAttributeQName(attributeURI,attributeLocalName,attributeQName);        element.addAttribute(qName,attributeValue);      }    }  }}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }}  }
class C{  public boolean canWrite() throws SmbException {  if (getType() == TYPE_NAMED_PIPE) {    return true;  }  return exists() && (attributes & ATTR_READONLY) == 0;}  }
class C{  static public void addItems(JMenu m){  java.util.List<ComponentFactory> list=jmri.InstanceManager.getList(ComponentFactory.class);  for (  ComponentFactory memo : list) {    JMenu menu=memo.getMenu();    if (menu != null) {      m.add(menu);    }  }  if (jmri.jmrix.easydcc.ActiveFlag.isActive()) {    m.add(getMenu("jmri.jmrix.easydcc.EasyDCCMenu"));  }  if (jmri.jmrix.grapevine.ActiveFlag.isActive()) {    m.add(getMenu("jmri.jmrix.grapevine.GrapevineMenu"));  }  if (jmri.jmrix.oaktree.ActiveFlag.isActive()) {    m.add(getMenu("jmri.jmrix.oaktree.OakTreeMenu"));  }  if (jmri.jmrix.rps.ActiveFlag.isActive()) {    m.add(getMenu("jmri.jmrix.rps.RpsMenu"));  }  if (jmri.jmrix.secsi.ActiveFlag.isActive()) {    m.add(getMenu("jmri.jmrix.secsi.SecsiMenu"));  }  if (jmri.jmrix.tmcc.ActiveFlag.isActive()) {    m.add(getMenu("jmri.jmrix.tmcc.TMCCMenu"));  }  m.add(new javax.swing.JSeparator());  if (jmri.jmrix.direct.ActiveFlag.isActive()) {    m.add(getMenu("jmri.jmrix.direct.DirectMenu"));  }  if (jmri.jmrix.maple.ActiveFlag.isActive()) {    m.add(getMenu("jmri.jmrix.maple.MapleMenu"));  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  try {    if (Sage.client && !Sage.isNonLocalClient()) {      makeNetworkedCall(stack);    }  } catch (  Throwable t) {  }  SageTV.restart();  return Sage.MAC_OS_X ? Boolean.FALSE : Boolean.TRUE;}  }
class C{  private static void arcToBezier(Path p,double cx,double cy,double a,double b,double e1x,double e1y,double theta,double start,double sweep){  int numSegments=Math.abs((int)Math.ceil(sweep * 4 / Math.PI));  double eta1=start;  double cosTheta=Math.cos(theta);  double sinTheta=Math.sin(theta);  double cosEta1=Math.cos(eta1);  double sinEta1=Math.sin(eta1);  double ep1x=(-a * cosTheta * sinEta1) - (b * sinTheta * cosEta1);  double ep1y=(-a * sinTheta * sinEta1) + (b * cosTheta * cosEta1);  double anglePerSegment=sweep / numSegments;  for (int i=0; i < numSegments; i++) {    double eta2=eta1 + anglePerSegment;    double sinEta2=Math.sin(eta2);    double cosEta2=Math.cos(eta2);    double e2x=cx + (a * cosTheta * cosEta2) - (b * sinTheta * sinEta2);    double e2y=cy + (a * sinTheta * cosEta2) + (b * cosTheta * sinEta2);    double ep2x=-a * cosTheta * sinEta2 - b * sinTheta * cosEta2;    double ep2y=-a * sinTheta * sinEta2 + b * cosTheta * cosEta2;    double tanDiff2=Math.tan((eta2 - eta1) / 2);    double alpha=Math.sin(eta2 - eta1) * (Math.sqrt(4 + (3 * tanDiff2 * tanDiff2)) - 1) / 3;    double q1x=e1x + alpha * ep1x;    double q1y=e1y + alpha * ep1y;    double q2x=e2x - alpha * ep2x;    double q2y=e2y - alpha * ep2y;    p.cubicTo((float)q1x,(float)q1y,(float)q2x,(float)q2y,(float)e2x,(float)e2y);    eta1=eta2;    e1x=e2x;    e1y=e2y;    ep1x=ep2x;    ep1y=ep2y;  }}  }
class C{  void checkError() throws IOException {  if (diskFullOffCount == 0) {    return;  }  if (--diskFullOffCount > 0) {    return;  }  if (diskFullOffCount >= -1) {    diskFullOffCount--;    throw DISK_FULL;  }}  }
class C{  public boolean isEmpty(){  return names.isEmpty();}  }
class C{  public void hleKernelThreadEnterWaitState(int waitType,int waitId,IWaitStateChecker waitStateChecker,boolean callbacks){  hleKernelThreadEnterWaitState(currentThread,waitType,waitId,waitStateChecker,0,true,callbacks);}  }
class C{  public JSONWriter value(Object object) throws JSONException {  return this.append(JSONObject.valueToString(object));}  }
class C{  public final void testRemoveHelperText(){  CharSequence helperText1="helperText1";  CharSequence helperText2="helperText2";  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addHelperText(helperText1);  passwordEditText.addHelperText(helperText2);  passwordEditText.removeHelperText(helperText1);  passwordEditText.removeHelperText(helperText1);  assertEquals(1,passwordEditText.getHelperTexts().size());  assertEquals(helperText2,passwordEditText.getHelperTexts().iterator().next());}  }
class C{  public ScrollPaneBorder(){  super(new Insets(6,6,8,6),__Icon9Factory__.getInstance().getScrollPaneBorderBg());}  }
class C{  public NativeMemory(byte[] byteArray){  this(ARRAY_BYTE_BASE_OFFSET,byteArray,null);  if ((byteArray == null) || (byteArray.length == 0)) {    throw new IllegalArgumentException("Array must must not be null and have a length greater than zero.");  }  nativeRawStartAddress_=0L;  capacityBytes_=byteArray.length;}  }
class C{  public void open(){  this.createContents();  this.shell.open();  this.shell.layout();  Display display=this.getParent().getDisplay();  while (!this.shell.isDisposed()) {    if (!display.readAndDispatch()) {      display.sleep();    }  }}  }
class C{  @Override public void connectionNotification(String eventName,Object source){  if (connectionAllowed(eventName)) {    m_listenee=source;    m_connectionType=eventName;  }}  }
class C{  protected Constraint_Impl(){  super();}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    if (isClosed()) {      return;    }    Throwable thrown=null;    try {      flushInternal();    } catch (    Throwable e) {      thrown=e;    }    buf=null;    try {      out.close();    } catch (    Throwable e) {      if (thrown == null) {        thrown=e;      }    }    out=null;    if (thrown != null) {      SneakyThrow.sneakyThrow(thrown);    }  }}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  return new Long(mf == null ? 0 : mf.getRecordDuration());}  }
class C{  synchronized protected void displayTimeout(){  targetSpeed=avSpeed;  incSpeed=(targetSpeed - currentSpeed) / FAST_DISPLAY_RATIO;}  }
class C{  public long numBits(){  return offsetLcpLength.numBits() + lcp2Bucket.numBits() + transform.numBits();}  }
class C{  public static String normalizeDouble(String value){  return normalizeFPNumber(value,"-9007199254740991.0","9007199254740991.0","-1075","970");}  }
class C{  private void remotePacket(byte[] data,int len) throws IOException {  remoteTcp.notifyPacket(data,len);  updateRemoteClock();}  }
class C{  public ObjectNode putObject(String fieldName){  ObjectNode n=objectNode();  _put(fieldName,n);  return n;}  }
class C{  private void initValueSourceParsers(){  initPlugins(valueSourceParsers,ValueSourceParser.class);  for (  Map.Entry<String,ValueSourceParser> entry : ValueSourceParser.standardValueSourceParsers.entrySet()) {    try {      String name=entry.getKey();      if (null == valueSourceParsers.get(name)) {        ValueSourceParser valueSourceParser=entry.getValue();        valueSourceParsers.put(name,valueSourceParser);        valueSourceParser.init(null);      }    } catch (    Exception e) {      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);    }  }}  }
class C{  void addInput(String key,Object input,String defaultValue){  if (defaultValue != null) {    defaultValues.put(input,defaultValue);  }  if (key == null) {    return;  }  comps.put(key,input);  if ((htmlC.getHTMLCallback() != null) && (input instanceof TextArea)) {    String autoVal=htmlC.getHTMLCallback().getAutoComplete(htmlC,action,key);    if (autoVal != null) {      ((TextArea)input).setText(autoVal);    }  }}  }
class C{  public static boolean equals(String filename1,String filename2,boolean normalized,IOCase caseSensitivity){  if (filename1 == null || filename2 == null) {    return filename1 == null && filename2 == null;  }  if (normalized) {    filename1=normalize(filename1);    filename2=normalize(filename2);    if (filename1 == null || filename2 == null) {      throw new NullPointerException("Error normalizing one or both of the file names");    }  }  if (caseSensitivity == null) {    caseSensitivity=IOCase.SENSITIVE;  }  return caseSensitivity.checkEquals(filename1,filename2);}  }
class C{  @SuppressWarnings("unchecked") public List<ExternalEvent> readEvents(int nrof){  ArrayList<ExternalEvent> events=new ArrayList<ExternalEvent>(nrof);  if (eventsLeft == 0) {    return events;  }  try {    for (int i=0; i < nrof && eventsLeft > 0; i++) {      events.add((ExternalEvent)in.readObject());      eventsLeft--;    }    if (eventsLeft == 0) {      in.close();    }  } catch (  Exception e) {    throw new SimError(e);  }  return events;}  }
class C{  protected final void closeAllCache(){  closeCache();  Invoke.invokeInEveryVM(null);}  }
class C{  private final void transfer(Node<V>[] tab,Node<V>[] nextTab){  int n=tab.length, stride;  if ((stride=(NCPU > 1) ? (n >>> 3) / NCPU : n) < MIN_TRANSFER_STRIDE)   stride=MIN_TRANSFER_STRIDE;  if (nextTab == null) {    try {      @SuppressWarnings("unchecked") Node<V>[] nt=(Node<V>[])new Node<?>[n << 1];      nextTab=nt;    } catch (    Throwable ex) {      sizeCtl=Integer.MAX_VALUE;      return;    }    nextTable=nextTab;    transferIndex=n;  }  int nextn=nextTab.length;  ForwardingNode<V> fwd=new ForwardingNode<V>(nextTab);  boolean advance=true;  boolean finishing=false;  for (int i=0, bound=0; ; ) {    Node<V> f;    int fh;    while (advance) {      int nextIndex, nextBound;      if (--i >= bound || finishing)       advance=false; else       if ((nextIndex=transferIndex) <= 0) {        i=-1;        advance=false;      } else       if (U.compareAndSwapInt(this,TRANSFERINDEX,nextIndex,nextBound=(nextIndex > stride ? nextIndex - stride : 0))) {        bound=nextBound;        i=nextIndex - 1;        advance=false;      }    }    if (i < 0 || i >= n || i + n >= nextn) {      int sc;      if (finishing) {        nextTable=null;        table=nextTab;        sizeCtl=(n << 1) - (n >>> 1);        return;      }      if (U.compareAndSwapInt(this,SIZECTL,sc=sizeCtl,sc - 1)) {        if ((sc - 2) != resizeStamp(n) << RESIZE_STAMP_SHIFT)         return;        finishing=advance=true;        i=n;      }    } else     if ((f=tabAt(tab,i)) == null)     advance=casTabAt(tab,i,null,fwd); else     if ((fh=f.hash) == MOVED)     advance=true; else {synchronized (f) {        if (tabAt(tab,i) == f) {          Node<V> ln, hn;          if (fh >= 0) {            int runBit=fh & n;            Node<V> lastRun=f;            for (Node<V> p=f.next; p != null; p=p.next) {              int b=p.hash & n;              if (b != runBit) {                runBit=b;                lastRun=p;              }            }            if (runBit == 0) {              ln=lastRun;              hn=null;            } else {              hn=lastRun;              ln=null;            }            for (Node<V> p=f; p != lastRun; p=p.next) {              int ph=p.hash;              V pk=p.key;              if ((ph & n) == 0)               ln=new Node<V>(ph,pk,ln); else               hn=new Node<V>(ph,pk,hn);            }            setTabAt(nextTab,i,ln);            setTabAt(nextTab,i + n,hn);            setTabAt(tab,i,fwd);            advance=true;          } else           if (f instanceof TreeBin) {            TreeBin<V> t=(TreeBin<V>)f;            TreeNode<V> lo=null, loTail=null;            TreeNode<V> hi=null, hiTail=null;            int lc=0, hc=0;            for (Node<V> e=t.first; e != null; e=e.next) {              int h=e.hash;              TreeNode<V> p=new TreeNode<V>(h,e.key,null,null);              if ((h & n) == 0) {                if ((p.prev=loTail) == null)                 lo=p; else                 loTail.next=p;                loTail=p;                ++lc;              } else {                if ((p.prev=hiTail) == null)                 hi=p; else                 hiTail.next=p;                hiTail=p;                ++hc;              }            }            ln=(lc <= UNTREEIFY_THRESHOLD) ? untreeify(lo) : (hc != 0) ? new TreeBin<V>(lo) : t;            hn=(hc <= UNTREEIFY_THRESHOLD) ? untreeify(hi) : (lc != 0) ? new TreeBin<V>(hi) : t;            setTabAt(nextTab,i,ln);            setTabAt(nextTab,i + n,hn);            setTabAt(tab,i,fwd);            advance=true;          }        }      }    }  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case DELETED:  return isSetDeleted();}throw new IllegalStateException();}  }
class C{  protected void processEntity(IXMLReader reader,IXMLEntityResolver entityResolver) throws Exception {  if (!XMLUtil.checkLiteral(reader,"NTITY")) {    XMLUtil.skipTag(reader);    return;  }  XMLUtil.skipWhitespace(reader,null);  char ch=XMLUtil.readChar(reader,'\0');  if (ch == '%') {    XMLUtil.skipWhitespace(reader,null);    entityResolver=this.parameterEntityResolver;  } else {    reader.unread(ch);  }  String key=XMLUtil.scanIdentifier(reader);  XMLUtil.skipWhitespace(reader,null);  ch=XMLUtil.readChar(reader,'%');  String systemID=null;  String publicID=null;switch (ch) {case 'P':    if (!XMLUtil.checkLiteral(reader,"UBLIC")) {      XMLUtil.skipTag(reader);      return;    }  XMLUtil.skipWhitespace(reader,null);publicID=XMLUtil.scanString(reader,'%',this.parameterEntityResolver);XMLUtil.skipWhitespace(reader,null);systemID=XMLUtil.scanString(reader,'%',this.parameterEntityResolver);XMLUtil.skipWhitespace(reader,null);XMLUtil.readChar(reader,'%');break;case 'S':if (!XMLUtil.checkLiteral(reader,"YSTEM")) {XMLUtil.skipTag(reader);return;}XMLUtil.skipWhitespace(reader,null);systemID=XMLUtil.scanString(reader,'%',this.parameterEntityResolver);XMLUtil.skipWhitespace(reader,null);XMLUtil.readChar(reader,'%');break;case '"':case '\'':reader.unread(ch);String value=XMLUtil.scanString(reader,'%',this.parameterEntityResolver);entityResolver.addInternalEntity(key,value);XMLUtil.skipWhitespace(reader,null);XMLUtil.readChar(reader,'%');break;default :XMLUtil.skipTag(reader);}if (systemID != null) {entityResolver.addExternalEntity(key,publicID,systemID);}}  }
class C{  protected static byte[] encodeDHPrivateKey(DHPrivateKeyParameters privkey){  return privkey.getX().toByteArray();}  }
class C{  public void handlePut(Operation put){  ServiceDocument newState=put.getBody(this.context.stateType);  setState(put,newState);  put.complete();}  }
class C{  public Property property(DateTimeFieldType type){  return new Property(this,indexOfSupported(type));}  }
class C{  static public FunctionNode LT(final ValueExpressionNode t1,final ValueExpressionNode t2){  return new FunctionNode(FunctionRegistry.LT,null,new ValueExpressionNode[]{t1,t2});}  }
class C{  public ST createStringTemplateInternally(CompiledST impl){  ST st=createStringTemplate(impl);  if (trackCreationEvents && st.debugState != null) {    st.debugState.newSTEvent=null;  }  return st;}  }
class C{  public boolean equals(Object o){  return map.equals(o);}  }
class C{  public final void mul(Matrix3d m1,Matrix3d m2){  if (this != m1 && this != m2) {    this.m00=m1.m00 * m2.m00 + m1.m01 * m2.m10 + m1.m02 * m2.m20;    this.m01=m1.m00 * m2.m01 + m1.m01 * m2.m11 + m1.m02 * m2.m21;    this.m02=m1.m00 * m2.m02 + m1.m01 * m2.m12 + m1.m02 * m2.m22;    this.m10=m1.m10 * m2.m00 + m1.m11 * m2.m10 + m1.m12 * m2.m20;    this.m11=m1.m10 * m2.m01 + m1.m11 * m2.m11 + m1.m12 * m2.m21;    this.m12=m1.m10 * m2.m02 + m1.m11 * m2.m12 + m1.m12 * m2.m22;    this.m20=m1.m20 * m2.m00 + m1.m21 * m2.m10 + m1.m22 * m2.m20;    this.m21=m1.m20 * m2.m01 + m1.m21 * m2.m11 + m1.m22 * m2.m21;    this.m22=m1.m20 * m2.m02 + m1.m21 * m2.m12 + m1.m22 * m2.m22;  } else {    double m00, m01, m02, m10, m11, m12, m20, m21, m22;    m00=m1.m00 * m2.m00 + m1.m01 * m2.m10 + m1.m02 * m2.m20;    m01=m1.m00 * m2.m01 + m1.m01 * m2.m11 + m1.m02 * m2.m21;    m02=m1.m00 * m2.m02 + m1.m01 * m2.m12 + m1.m02 * m2.m22;    m10=m1.m10 * m2.m00 + m1.m11 * m2.m10 + m1.m12 * m2.m20;    m11=m1.m10 * m2.m01 + m1.m11 * m2.m11 + m1.m12 * m2.m21;    m12=m1.m10 * m2.m02 + m1.m11 * m2.m12 + m1.m12 * m2.m22;    m20=m1.m20 * m2.m00 + m1.m21 * m2.m10 + m1.m22 * m2.m20;    m21=m1.m20 * m2.m01 + m1.m21 * m2.m11 + m1.m22 * m2.m21;    m22=m1.m20 * m2.m02 + m1.m21 * m2.m12 + m1.m22 * m2.m22;    this.m00=m00;    this.m01=m01;    this.m02=m02;    this.m10=m10;    this.m11=m11;    this.m12=m12;    this.m20=m20;    this.m21=m21;    this.m22=m22;  }}  }
class C{  public DefaultUrlConnectionExpiryCalculator(){  this(60000L);}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  int i;  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_MethodHandle_info cu=(CONSTANT_MethodHandle_info)cp;  i=constant_pool[target_index].compareTo(constant_pool,cp_constant_pool[cu.target_index],cp_constant_pool);  if (i != 0)   return i;  return kind - cu.kind;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WIFILOCK_MANAGER'";  db.execSQL(sql);}  }
class C{  public static Test suite(){  return new TestSuite(SVMLightTest.class);}  }
class C{  private static void appendOption(final StringBuffer buff,final Option option,final boolean required){  if (!required) {    buff.append("[");  }  if (option.getOpt() != null) {    buff.append("-").append(option.getOpt());  } else {    buff.append("--").append(option.getLongOpt());  }  if (option.hasArg() && option.hasArgName()) {    buff.append(" <").append(option.getArgName()).append(">");  }  if (!required) {    buff.append("]");  }}  }
class C{  public void detach(){}  }
class C{  public TranslationImportExceptionBean(ApplicationExceptionBean sup,String details){  super(sup);  setDetails(details);}  }
class C{  private boolean readEqualsSign(){  skipWhitespace();  if (pos < input.length() && input.charAt(pos) == '=') {    pos++;    return true;  }  return false;}  }
class C{  public static void escapeJsIdentifier(CharSequence s,boolean asciiOnly,Appendable out) throws IOException {  new Escaper(s,STRING_MINIMAL_ESCAPES,asciiOnly ? NO_NON_ASCII : ALLOW_NON_ASCII,HEX4_ENCODER,out).escape();}  }
class C{  public void testKeyword() throws Exception {  Iterable<Input> keys=shuffle(new Input("foo",50),new Input("bar",10),new Input("barbar",10),new Input("barbar",12),new Input("barbara",6),new Input("bar",5),new Input("barbara",1));  Directory tempDir=getDirectory();  Analyzer analyzer=new MockAnalyzer(random(),MockTokenizer.KEYWORD,false);  AnalyzingSuggester suggester=new AnalyzingSuggester(tempDir,"suggest",analyzer);  suggester.build(new InputArrayIterator(keys));  List<LookupResult> results=suggester.lookup(TestUtil.stringToCharSequence("f",random()),false,2);  assertEquals(1,results.size());  assertEquals("foo",results.get(0).key.toString());  assertEquals(50,results.get(0).value,0.01F);  results=suggester.lookup(TestUtil.stringToCharSequence("bar",random()),false,1);  assertEquals(1,results.size());  assertEquals("bar",results.get(0).key.toString());  assertEquals(10,results.get(0).value,0.01F);  results=suggester.lookup(TestUtil.stringToCharSequence("b",random()),false,2);  assertEquals(2,results.size());  assertEquals("barbar",results.get(0).key.toString());  assertEquals(12,results.get(0).value,0.01F);  assertEquals("bar",results.get(1).key.toString());  assertEquals(10,results.get(1).value,0.01F);  results=suggester.lookup(TestUtil.stringToCharSequence("ba",random()),false,3);  assertEquals(3,results.size());  assertEquals("barbar",results.get(0).key.toString());  assertEquals(12,results.get(0).value,0.01F);  assertEquals("bar",results.get(1).key.toString());  assertEquals(10,results.get(1).value,0.01F);  assertEquals("barbara",results.get(2).key.toString());  assertEquals(6,results.get(2).value,0.01F);  IOUtils.close(analyzer,tempDir);}  }
class C{  private boolean safeEquals(Object o1,Object o2){  if (o1 == null && o2 == null)   return true;  if (o1 == null)   return false;  if (o2 == null)   return false;  return o1.equals(o2);}  }
class C{  protected void addElseStepPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_If_elseStep_feature"),getString("_UI_PropertyDescriptor_description","_UI_If_elseStep_feature","_UI_If_type"),SexecPackage.Literals.IF__ELSE_STEP,true,false,true,null,null,null));}  }
class C{  public void printCount(String kind,int count){  if (count != 0) {    String key;    if (count == 1)     key="count." + kind; else     key="count." + kind + ".plural";    log.printLines(WriterKind.ERROR,key,String.valueOf(count));    log.flush(Log.WriterKind.ERROR);  }}  }
class C{  protected int hashEntry(Object key,Object value){  return (key == null ? 0 : key.hashCode()) ^ (value == null ? 0 : value.hashCode());}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String fileName=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  int row, col, rows, cols;  int nBands=1;  int nBits=8;  int skipBytes=0;  double xDim=1;  double yDim=1;  double ulxmap=0;  double ulymap=0;  String layout="bil";  String pixelType="unsignedint";  String xyUnits="not specified";  String zUnits="not specified";  String projection="not specified";  String byteOrder=java.nio.ByteOrder.nativeOrder().toString();  String[] imageFiles;  int numImages=0;  double noData=-32768;  String dataType="float";  String dataScale="continuous";  DataInputStream in=null;  BufferedReader br=null;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  double west=0;  double north=0;  double east=0;  double south=0;  RandomAccessFile rIn=null;  FileChannel inChannel=null;  ByteBuffer buf=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      int progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",(int)progress);      fileName=imageFiles[i];      if (!((new File(fileName)).exists())) {        showFeedback("Image file does not exist.");        break;      }      String fileExtension=whitebox.utilities.FileUtilities.getFileExtension(fileName).toLowerCase();      String[] formatNames={"bil","bsq","bip"};      boolean checkForSupportedFormat=false;      for (      String str : formatNames) {        if (str.toLowerCase().equals(fileExtension)) {          checkForSupportedFormat=true;          break;        }      }      if (!checkForSupportedFormat) {        showFeedback("This image file format is not currently supported by this tool.");        return;      }      String fileHeader=fileName.replace("." + fileExtension,".hdr");      if (!whitebox.utilities.FileUtilities.fileExists(fileHeader) || !fileHeader.contains(".hdr")) {        showFeedback("This image header file (.hdr) could not be located.");        return;      }      FileInputStream fstream=new FileInputStream(fileHeader);      in=new DataInputStream(fstream);      br=new BufferedReader(new InputStreamReader(in));      String delimiter=",";      String line;      String[] str;      rows=0;      cols=0;      while ((line=br.readLine()) != null) {        if (line.startsWith("data type")) {          line=line.replace("data type","datatype");        }        if (line.startsWith("header offset")) {          line=line.replace("header offset","headeroffset");        }        if (line.startsWith("x start")) {          line=line.replace("x start","xstart");        }        if (line.startsWith("y start")) {          line=line.replace("y start","ystart");        }        str=line.split(delimiter);        if (str.length <= 1) {          delimiter=" ";          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);          }        }        if (str[0].toLowerCase().contains("byteorder")) {          if (str[str.length - 1].toLowerCase().contains("i")) {            byteOrder="LITTLE_ENDIAN";          } else {            byteOrder="BIG_ENDIAN";          }        } else         if (str[0].toLowerCase().contains("nrows")) {          rows=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("ncols")) {          cols=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("nbands")) {          nBands=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("nbits")) {          nBits=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("skipbytes")) {          skipBytes=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("xdim")) {          xDim=Double.parseDouble(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("ydim")) {          yDim=Double.parseDouble(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("ulxmap")) {          ulxmap=Double.parseDouble(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("ulymap")) {          ulymap=Double.parseDouble(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("layout")) {          layout=str[str.length - 1].toLowerCase();        } else         if (str[0].toLowerCase().contains("pixeltype")) {          if (str[str.length - 1].toLowerCase().contains("float")) {            pixelType="float";          } else           if (str[str.length - 1].toLowerCase().contains("signed") && !str[str.length - 1].toLowerCase().contains("unsigned")) {            pixelType="signedint";          } else {            pixelType="unsignedint";          }        } else         if (str[0].toLowerCase().contains("xyunits")) {          xyUnits=str[str.length - 1].toLowerCase();        } else         if (str[0].toLowerCase().contains("zunits")) {          zUnits=str[str.length - 1].toLowerCase();        } else         if (str[0].toLowerCase().contains("projection")) {          projection=str[str.length - 1].toLowerCase();        } else         if (str[0].toLowerCase().contains("nodata")) {          noData=Double.parseDouble(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("lines")) {          rows=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("samples")) {          cols=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("bands")) {          nBands=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("headeroffset")) {          skipBytes=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("interleave")) {          layout=str[str.length - 1].toLowerCase();        } else         if (str[0].toLowerCase().equals("xstart")) {        } else         if (str[0].toLowerCase().equals("ystart")) {        } else         if (str[0].toLowerCase().contains("datatype")) {          int enviDTCode=Integer.parseInt(str[str.length - 1]);switch (enviDTCode) {case 1:            nBits=8;          pixelType="unsignedint";        break;case 2:      nBits=16;    pixelType="signedint";  break;case 3:nBits=32;pixelType="signedint";break;case 4:nBits=32;pixelType="float";break;case 5:nBits=64;pixelType="float";break;case 6:showFeedback("Whitebox does not support the import of complex number file formats.");return;case 9:showFeedback("Whitebox does not support the import of complex number file formats.");return;case 12:nBits=(int)16;pixelType="unsignedint";break;case 13:nBits=32;pixelType="unsignedint";break;case 14:nBits=64;pixelType="unsignedint";break;}}}char[] extChars=fileExtension.toCharArray();boolean worldFileFound=false;String wfExtension=Character.toString(extChars[0]) + Character.toString(extChars[2]) + "w";String worldFile=imageFiles[i].replace(fileExtension,wfExtension);if ((new File(worldFile)).exists()) {worldFileFound=true;} else {wfExtension=fileExtension + "w";worldFile=imageFiles[i].replace(fileExtension,wfExtension);if ((new File(worldFile)).exists()) {worldFileFound=true;} else {wfExtension=".wld";worldFile=imageFiles[i].replace(fileExtension,wfExtension);if ((new File(worldFile)).exists()) {worldFileFound=true;}}}if (worldFileFound) {double A=0, B=0, C=0, D=0, E=0, F=0;fstream=new FileInputStream(worldFile);in=new DataInputStream(fstream);br=new BufferedReader(new InputStreamReader(in));int n=0;while ((line=br.readLine()) != null) {switch (n) {case 0:A=Double.parseDouble(line);break;case 1:D=Double.parseDouble(line);break;case 2:B=Double.parseDouble(line);break;case 3:E=Double.parseDouble(line);break;case 4:C=Double.parseDouble(line);break;case 5:F=Double.parseDouble(line);break;}n++;}if (B == 0 && D == 0) {west=A * 0 + B * 0 + C;north=D * 0 + E * 0 + F;east=A * (cols - 1) + B * (rows - 1) + C;south=D * (cols - 1) + E * (rows - 1) + F;} else {showFeedback("We're sorry but Whitebox cannot currently handle the import of rotated images.");break;}} else {west=ulxmap;north=ulymap;east=ulxmap + cols * xDim;south=ulymap - rows * yDim;}if (nBits <= 32 && pixelType.toLowerCase().contains("int")) {dataType="integer";} else if (nBits <= 32 && pixelType.toLowerCase().contains("float")) {dataType="float";} else {dataType="double";}for (int a=0; a < nBands; a++) {if (nBands > 1) {whiteboxHeaderFile=imageFiles[i].replace("." + fileExtension,"_band" + (a + 1) + ".dep");whiteboxDataFile=imageFiles[i].replace("." + fileExtension,"_band" + (a + 1) + ".tas");} else {whiteboxHeaderFile=imageFiles[i].replace("." + fileExtension,".dep");whiteboxDataFile=imageFiles[i].replace("." + fileExtension,".tas");}(new File(whiteboxHeaderFile)).delete();(new File(whiteboxDataFile)).delete();fw=new FileWriter(whiteboxHeaderFile,false);bw=new BufferedWriter(fw);out=new PrintWriter(bw,true);String outputByteOrder=java.nio.ByteOrder.nativeOrder().toString();str1="Min:\t" + Double.toString(Integer.MAX_VALUE);out.println(str1);str1="Max:\t" + Double.toString(Integer.MIN_VALUE);out.println(str1);str1="North:\t" + Double.toString(north);out.println(str1);str1="South:\t" + Double.toString(south);out.println(str1);str1="East:\t" + Double.toString(east);out.println(str1);str1="West:\t" + Double.toString(west);out.println(str1);str1="Cols:\t" + Integer.toString(cols);out.println(str1);str1="Rows:\t" + Integer.toString(rows);out.println(str1);str1="Data Type:\t" + dataType;out.println(str1);str1="Z Units:\t" + zUnits;out.println(str1);str1="XY Units:\t" + xyUnits;out.println(str1);str1="Projection:\t" + projection;out.println(str1);str1="Data Scale:\t" + dataScale;out.println(str1);str1="Preferred Palette:\t" + "grey.pal";out.println(str1);str1="NoData:\t" + String.valueOf(noData);out.println(str1);if (outputByteOrder.toLowerCase().contains("lsb") || outputByteOrder.toLowerCase().contains("little")) {str1="Byte Order:\t" + "LITTLE_ENDIAN";} else {str1="Byte Order:\t" + "BIG_ENDIAN";}out.println(str1);output=new WhiteboxRaster(whiteboxHeaderFile,"rw");int numBytes=nBits / 8;int pos;if (layout.equals("bil") || fileExtension.equals("bil")) {int readLengthInBytes=cols * numBytes;int rowLength=cols * numBytes * nBands;buf=ByteBuffer.allocate(readLengthInBytes);if (byteOrder.toLowerCase().contains("little")) {buf.order(ByteOrder.LITTLE_ENDIAN);} else {buf.order(ByteOrder.BIG_ENDIAN);}rIn=new RandomAccessFile(fileName,"r");inChannel=rIn.getChannel();if (nBits == 8 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedByte(buf,col * numBytes);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 8 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.get(col * numBytes));}outputRow--;}} else if (nBits == 16 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedShort(buf,col * numBytes);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 16 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getShort(col * numBytes));}outputRow--;}} else if (nBits == 32 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedInt(buf,col * numBytes);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 32 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getInt(col * numBytes));}outputRow--;}} else if (nBits == 32 && pixelType.equals("float")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getFloat(col * numBytes));}outputRow--;}} else if (nBits == 64 && pixelType.equals("unsignedint")) {showFeedback("We're sorry but this data type is not supported for import to Whitebox.");break;} else if (nBits == 64 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getLong(col * numBytes));}outputRow--;}} else if (nBits == 64 && pixelType.equals("float")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getDouble(col * numBytes));}outputRow--;}}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());output.writeHeaderFile();output.close();} else if (layout.equals("bsq") || fileExtension.equals("bsq")) {int rowLength=cols * numBytes;int bandLength=rows * cols * numBytes;buf=ByteBuffer.allocate(rowLength);if (byteOrder.toLowerCase().contains("little")) {buf.order(ByteOrder.LITTLE_ENDIAN);} else {buf.order(ByteOrder.BIG_ENDIAN);}rIn=new RandomAccessFile(fileName,"r");inChannel=rIn.getChannel();if (nBits == 8 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedByte(buf,col * numBytes);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 8 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.get(col * numBytes));}outputRow--;}} else if (nBits == 16 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedShort(buf,col * numBytes);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 16 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getShort(col * numBytes));}outputRow--;}} else if (nBits == 32 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedInt(buf,col * numBytes);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 32 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getInt(col * numBytes));}outputRow--;}} else if (nBits == 32 && pixelType.equals("float")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getFloat(col * numBytes));}outputRow--;}} else if (nBits == 64 && pixelType.equals("unsignedint")) {showFeedback("We're sorry but this data type is not supported for import to Whitebox.");break;} else if (nBits == 64 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getLong(col * numBytes));}outputRow--;}} else if (nBits == 64 && pixelType.equals("float")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getDouble(col * numBytes));}outputRow--;}}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());output.writeHeaderFile();output.close();} else if (layout.equals("bip") || fileExtension.equals("bip")) {int rowLength=cols * numBytes * nBands;buf=ByteBuffer.allocate(rowLength);if (byteOrder.toLowerCase().contains("little")) {buf.order(ByteOrder.LITTLE_ENDIAN);} else {buf.order(ByteOrder.BIG_ENDIAN);}rIn=new RandomAccessFile(fileName,"r");inChannel=rIn.getChannel();if (nBits == 8 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedByte(buf,col * numBytes * a);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 8 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.get(col * numBytes * a));}outputRow--;}} else if (nBits == 16 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedShort(buf,col * numBytes * a);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 16 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getShort(col * numBytes * a));}outputRow--;}} else if (nBits == 32 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedInt(buf,col * numBytes * a);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 32 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getInt(col * numBytes * a));}outputRow--;}} else if (nBits == 32 && pixelType.equals("float")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getFloat(col * numBytes * a));}outputRow--;}} else if (nBits == 64 && pixelType.equals("unsignedint")) {showFeedback("We're sorry but this data type is not supported for import to Whitebox.");break;} else if (nBits == 64 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getLong(col * numBytes * a));}outputRow--;}} else if (nBits == 64 && pixelType.equals("float")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getDouble(col * numBytes * a));}outputRow--;}}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());output.writeHeaderFile();output.close();}if (a < 10) {returnData(whiteboxHeaderFile);}}}} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static byte[] decode(char[] in){  return decode(in,0,in.length);}  }
class C{  public TestableBuilder<F> alternativeArgs(Object... args){  return new TestableBuilder<F>(clazz,defaultArgs,args);}  }
class C{  public K[] array(){  return array;}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public void endStopCQ(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(stopCQInProgressId,-1);  int endStopCQId;  if (timedOut) {    endStopCQId=stopCQTimedOutId;  } else   if (failed) {    endStopCQId=stopCQFailedId;  } else {    endStopCQId=stopCQId;  }  this.stats.incInt(endStopCQId,1);  this.stats.incLong(stopCQDurationId,duration);}  }
class C{  public void appendPacketIfNeeded(Buffer buffer,ReadPacketFetcher packetFetcher,long encLength) throws IOException {  while (encLength > buffer.remaining()) {    buffer.appendPacket(packetFetcher.getPacket());  }}  }
class C{  public static Resource createResource(Resource res,short level,short type){  boolean asDir=type == TYPE_DIR;  if (level >= LEVEL_FILE && res.exists() && ((res.isDirectory() && asDir) || (res.isFile() && !asDir))) {    return getCanonicalResourceEL(res);  }  Resource parent=res.getParentResource();  if (level >= LEVEL_PARENT_FILE && parent != null && parent.exists() && canRW(parent)) {    if (asDir) {      if (res.mkdirs())       return getCanonicalResourceEL(res);    } else {      if (createNewResourceEL(res))       return getCanonicalResourceEL(res);    }    return getCanonicalResourceEL(res);  }  if (level >= LEVEL_GRAND_PARENT_FILE && parent != null) {    Resource gparent=parent.getParentResource();    if (gparent != null && gparent.exists() && canRW(gparent)) {      if (asDir) {        if (res.mkdirs())         return getCanonicalResourceEL(res);      } else {        if (parent.mkdirs() && createNewResourceEL(res))         return getCanonicalResourceEL(res);      }    }  }  return null;}  }
class C{  private ItemsAuxiliary<T> constructAuxiliary(){  return new ItemsAuxiliary<T>(this);}  }
class C{  public ServiceOperationException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public TankDrive(Motor left,Motor right,Relay shifter,DoubleToDoubleFunction speedLimiter){  this.left=left;  this.right=right;  this.highGear=shifter != null ? shifter : Relay.fixed(State.OFF);  this.speedLimiter=speedLimiter != null ? speedLimiter : DEFAULT_SPEED_LIMITER;}  }
class C{  public void expandAllDumpNodes(boolean expand){  TreeNode root=(TreeNode)tree.getModel().getRoot();  expandAll(tree,new TreePath(root),expand);}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    return this.write(sw,indentFactor,0).toString();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr oldAttribute;  NodeList addressElementList;  Element testAddress;  Attr attrAddress;  doc=(Document)load("staff",true);  addressElementList=doc.getElementsByTagName("address");  testAddress=(Element)addressElementList.item(4);  oldAttribute=doc.createAttribute("oldAttribute");{    boolean success=false;    try {      attrAddress=testAddress.removeAttributeNode(oldAttribute);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  public boolean showOverflowMenu(){  if (mReserveOverflow && !isOverflowMenuShowing() && mMenu != null && mMenuView != null && mPostedOpenRunnable == null && !mMenu.getNonActionItems().isEmpty()) {    OverflowPopup popup=new OverflowPopup(mContext,mMenu,mOverflowButton,true);    mPostedOpenRunnable=new OpenOverflowRunnable(popup);    ((View)mMenuView).post(mPostedOpenRunnable);    super.onSubMenuSelected(null);    return true;  }  return false;}  }
class C{  public ServiceCall<DetectedFaces> detectFaces(VisualRecognitionOptions options){  Builder bodyBuilder=new MultipartBody.Builder().setType(MultipartBody.FORM);  if (options.url() != null) {    bodyBuilder.addFormDataPart(PARAM_PARAMETERS,getParametersAsJson(options).toString());  } else {    RequestBody requestBody=RequestBody.create(HttpMediaType.BINARY_FILE,options.images());    bodyBuilder.addFormDataPart(PARAM_IMAGES_FILE,options.images().getName(),requestBody);  }  RequestBuilder requestBuilder=RequestBuilder.post(PATH_DETECT_FACES);  requestBuilder.query(VERSION,versionDate).body(bodyBuilder.build());  return createServiceCall(requestBuilder.build(),ResponseConverterUtils.getObject(DetectedFaces.class));}  }
class C{  private void processColumnTypes(ArrayList<String> names,ArrayList<String> types,int[] targ,TypeInformation[] etyp,int[] dims){  int next=0;  for (int i=0; i < targ.length; i++) {    if (magic_eid != null && magic_eid.reset(names.get(i)).matches()) {      targ[i]=next;      etyp[next]=TypeUtil.EXTERNALID;      dims[next]=1;      next++;      continue;    } else     if (magic_class != null && magic_class.reset(names.get(i)).matches()) {      targ[i]=next;      etyp[next]=TypeUtil.CLASSLABEL;      dims[next]=1;      next++;      continue;    } else     if (ARFF_NUMERIC.reset(types.get(i)).matches()) {      if (next > 0 && TypeUtil.NUMBER_VECTOR_FIELD.equals(etyp[next - 1])) {        targ[i]=next - 1;        dims[next - 1]++;        continue;      } else {        targ[i]=next;        etyp[next]=TypeUtil.NUMBER_VECTOR_FIELD;        dims[next]=1;        next++;        continue;      }    } else {      if (next > 0 && TypeUtil.LABELLIST.equals(etyp[next - 1])) {        targ[i]=next - 1;        dims[next - 1]++;        continue;      } else {        targ[i]=next;        etyp[next]=TypeUtil.LABELLIST;        dims[next]=1;        next++;        continue;      }    }  }}  }
class C{  public static void share(boolean shareDirectly,Activity activity,String title,String url,Bitmap screenshot){  if (shareDirectly) {    shareWithLastUsed(activity,title,url,screenshot);  } else   if (TargetChosenReceiver.isSupported()) {    makeIntentAndShare(activity,title,url,screenshot,null);  } else {    showShareDialog(activity,title,url,screenshot);  }}  }
class C{  private static int scanAndCompare(Object[][] expectedRows,GroupScan scan){  int skippedRows=0;  Row row;  int rowIndex=0;  while ((row=scan.next()) != null) {    if (rowIndex == expectedRows.length) {      fail("More actual rows than expected");    }    assertEquals("Expected column count, row " + rowIndex,expectedRows[rowIndex].length,row.rowType().nFields());    for (int colIndex=0; colIndex < expectedRows[rowIndex].length; ++colIndex) {      final String msg="row " + rowIndex + ", col "+ colIndex;      final Object expected=expectedRows[rowIndex][colIndex];      final ValueSource actual=row.value(colIndex);      if (expected == null || actual.isNull()) {        Column column=row.rowType().table().getColumn(colIndex);        if (!Boolean.TRUE.equals(column.getNullable())) {          fail(String.format("Expected (%s) or actual (%s) NULL for column (%s) declared NOT NULL",expected,actual,column));        }      }      if (expected == null) {        assertEquals(msg + " isNull",true,actual.isNull());      } else       if (expected instanceof TInstance) {        assertEquals(msg + " (type only)",expected,actual.getType());      } else       if (expected instanceof String) {        if (colIndex == 1 && actual.getString().equals(I_S)) {          --rowIndex;          ++skippedRows;          break;        }        assertEquals(msg,expected,actual.getString());      } else       if (expected instanceof Integer) {        assertEquals(msg,expected,actual.getInt32());      } else       if (expected instanceof Long) {        assertEquals(msg,expected,actual.getInt64());      } else       if (expected instanceof Boolean) {        assertEquals(msg,(Boolean)expected ? "YES" : "NO",actual.getString());      } else       if (expected instanceof Text) {        assertEquals(msg,((Text)expected).getText(),actual.getString());      } else {        fail("Unsupported type: " + expected.getClass());      }    }    ++rowIndex;  }  if (rowIndex < expectedRows.length) {    fail("More expected rows than actual");  }  scan.close();  return skippedRows;}  }
class C{  public synchronized void stop(InputStream in){  if (DEBUG) {    System.out.println("> AudioPlayer.stop");  }  devAudio.closeChannel(in);  if (DEBUG) {    System.out.println("< AudioPlayer.stop completed");  }}  }
class C{  public boolean isMarker(){  return marker;}  }
class C{  public static String concatenate(final int[] arr){  final StringBuilder sb=new StringBuilder();  for (  final int n : arr) {    if (sb.length() > 0)     sb.append("; ");    sb.append(LEnv.LANG.formatNumber(n));  }  return sb.toString();}  }
class C{  public final void popPredicateRoot(){  m_predicateRoots.popQuick();}  }
class C{  public void cdata(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem() && XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;  String s=new String(ch,start,length);  Node n=m_currentNode.getLastChild();  if (n instanceof CDATASection)   ((CDATASection)n).appendData(s); else   if (n instanceof Comment)   ((Comment)n).appendData(s);}  }
class C{  protected StoreResponse(){  _parameters.set(new Parameter("mode","store_response_success"));  if (DEBUG)   _log.debug("Created empty store request.");}  }
class C{  private boolean isOpen(){  return buf != null;}  }
class C{  public static boolean isMCEFLoaded(){  return Loader.isModLoaded("MCEF");}  }
class C{  public void copyBytes(final byte[] src,final int start,final long index,final int length){  int chunk=(int)(index >> mChunkBits);  int offset=(int)(index & mChunkMask);  int len=length;  int copyPos=start;  while (len > 0) {    final int copyAmount=Math.min(mArray[chunk].length - offset,len);    System.arraycopy(src,copyPos,mArray[chunk],offset,copyAmount);    len-=copyAmount;    chunk++;    offset=0;    copyPos+=copyAmount;  }}  }
class C{  public _DefinitionTriggerType(){  super();}  }
class C{  public void leaveBusy(){  lock.readUnlock();}  }
class C{  public void stopCqs() throws CqException {  try {    getCqService().stopAllClientCqs();  } catch (  CqException cqe) {    if (logger.isDebugEnabled()) {      logger.debug("Unable to stop all CQs. Error :{}",cqe.getMessage(),cqe);    }  }}  }
class C{  public Object clone(){  SyntaxScheme shcs=null;  try {    shcs=(SyntaxScheme)super.clone();  } catch (  CloneNotSupportedException cnse) {    cnse.printStackTrace();    return null;  }  shcs.styles=new Style[Token.NUM_TOKEN_TYPES];  for (int i=0; i < Token.NUM_TOKEN_TYPES; i++) {    Style s=styles[i];    if (s != null) {      shcs.styles[i]=(Style)s.clone();    }  }  return shcs;}  }
class C{  protected Model trainBaseModel(ExampleSet exampleSet) throws OperatorException {  Model model=applyInnerLearner(exampleSet);  return model;}  }
class C{  public CertificateChain regenerateKeyAndCertificate(){  RotateKeyAndCertParam rotateKeyAndCertParam=new RotateKeyAndCertParam();  rotateKeyAndCertParam.setSystemSelfSigned(true);  return client.put(CertificateChain.class,rotateKeyAndCertParam,KEYSTORE_URL);}  }
class C{  public StringBuffer format(Date date,StringBuffer dateStrBuf,FieldPosition fieldPosition){  int start=dateStrBuf.length();  super.format(date,dateStrBuf,fieldPosition);  int pos=0;  for (pos=start + 25; dateStrBuf.charAt(pos) != 'X'; pos++)   ;  calendar.clear();  calendar.setTime(date);  int offset=calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);  if (offset < 0) {    dateStrBuf.setCharAt(pos++,'-');    offset=(-offset);  } else   dateStrBuf.setCharAt(pos++,'+');  int rawOffsetInMins=offset / 60 / 1000;  int offsetInHrs=rawOffsetInMins / 60;  int offsetInMins=rawOffsetInMins % 60;  dateStrBuf.setCharAt(pos++,Character.forDigit((offsetInHrs / 10),10));  dateStrBuf.setCharAt(pos++,Character.forDigit((offsetInHrs % 10),10));  dateStrBuf.setCharAt(pos++,Character.forDigit((offsetInMins / 10),10));  dateStrBuf.setCharAt(pos++,Character.forDigit((offsetInMins % 10),10));  return dateStrBuf;}  }
class C{  public static Entity succeeding(Entity entity,Schema nextSchema,EntityRenameDesc entityRenameDesc){  final Map<String,Entity> succeedingEntityMap=entityMapFromSchema(nextSchema);  Entity succeeding=null;  if (entityRenameDesc != null) {    final String succeedingName=entityRenameDesc.getChangedName(entity.getClassName());    if (succeedingName != null) {      succeeding=succeedingEntityMap.get(succeedingName);    }  }  if (succeeding == null) {    succeeding=succeedingEntityMap.get(entity.getClassName());  }  return succeeding;}  }
class C{  public void removeAll(){  contentPane.removeAll();}  }
class C{  public static void removeExpectedResults(Process process) throws RepositoryException {  Folder folder=process.getRepositoryLocation().locateEntry().getContainingFolder();  Collection<IOObjectEntry> toDelete=new ArrayList<IOObjectEntry>();  for (  DataEntry entry : folder.getDataEntries()) {    if (entry instanceof IOObjectEntry) {      IOObjectEntry ioo=(IOObjectEntry)entry;      String name=ioo.getLocation().getName();      String expectedPrefix=process.getRepositoryLocation().getName() + EXPECTED_TOKEN;      if (name.startsWith(expectedPrefix)) {        toDelete.add(ioo);      }    }  }  for (  IOObjectEntry entry : toDelete) {    entry.delete();  }}  }
class C{  public static final ParameterizedType parameterizeWithOwner(final Type owner,final Class<?> raw,final Type... typeArguments){  Validate.notNull(raw,"raw class is null");  final Type useOwner;  if (raw.getEnclosingClass() == null) {    Validate.isTrue(owner == null,"no owner allowed for top-level %s",raw);    useOwner=null;  } else   if (owner == null) {    useOwner=raw.getEnclosingClass();  } else {    Validate.isTrue(TypeUtils.isAssignable(owner,raw.getEnclosingClass()),"%s is invalid owner type for parameterized %s",owner,raw);    useOwner=owner;  }  Validate.noNullElements(typeArguments,"null type argument at index %s");  Validate.isTrue(raw.getTypeParameters().length == typeArguments.length,"invalid number of type parameters specified: expected %s, got %s",raw.getTypeParameters().length,typeArguments.length);  return new ParameterizedTypeImpl(raw,useOwner,typeArguments);}  }
class C{  public EntityMigrationBuilder removeProperty(String property,String defaultValue){  migrationBuilder.builder.entityMigrationRules().addRule(new EntityMigrationRule(migrationBuilder.fromVersion,migrationBuilder.toVersion,entityTypes,new RemoveProperty(property,defaultValue)));  return this;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void assertJPut(String request,String content,String... tests) throws Exception {  assertJPut(request,content,JSONTestUtil.DEFAULT_DELTA,tests);}  }
class C{  void checkMethodName(byte refKind,String name) throws NoSuchMethodException {  if (name.startsWith("<") && refKind != REF_newInvokeSpecial)   throw new NoSuchMethodException("illegal method name: " + name);}  }
class C{  public void reset(){  token=null;  status=S_INIT;  handlerStatusStack=null;}  }
class C{  @Override public void onStart(){  super.onStart();  if (CommService.medium == CommService.MEDIUM.BLUETOOTH && mBluetoothAdapter == null) {    setMode(MODE.DEMO);  }}  }
class C{  public T caseArgumentDefinition(ArgumentDefinition object){  return null;}  }
class C{  public synchronized void addPanListener(PanListener listener){  panDelegate.add(listener);}  }
class C{  public boolean isOrgTrxDim(){  Object oo=get_Value(COLUMNNAME_IsOrgTrxDim);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public NamedSmartTableCell(String name,int textPosition){  nameJL=new JLabel(name);  panel=new JPanel(new FlowLayout(textPosition));  panel.add(nameJL);}  }
class C{  public JsonUser(String id,String fullName){  Preconditions.checkNotNull(id);  Preconditions.checkNotNull(fullName);  this.id=id;  this.fullName=fullName;}  }
class C{  private void createProducedNonTerminalInfo(){  LinkedList<Production> prods=this.getProductions();  for (  Production prod : prods) {    SymbolInfo i=this.symbolInfos.get(prod.getLHS());    if (i != null) {      List<Symbol> rhsSymbols=prod.getRHS();      for (      Symbol rhsSymbol : rhsSymbols) {        if (rhsSymbol instanceof NonTerminal) {          NonTerminal nt=(NonTerminal)rhsSymbol;          i.producedNonTerminalsSet.add(nt);        }      }    }  }}  }
class C{  @Override public boolean isDefinitelyWritable(int columnIndex){  return false;}  }
class C{  public void assertEvicted(){  if (!evicted) {    TestHardReferenceQueue.fail("Expected " + expectedRef + " to have been evicted.");  }}  }
class C{  public static AuthToken none(){  return new InternalAuthToken(parameters("scheme","none").asMap(Values.ofValue()));}  }
class C{  public int attributeCount(){  return propertyDescriptors.length;}  }
class C{  public void test_fileLeak_historicalHALog() throws Exception {  final int MAX_OPEN_FILE_HANDLES=10000;  final HALogWriter writer=new HALogWriter(logdir);  try {    final IRootBlockView openRB=openRBV(StoreTypeEnum.RW);{      assertEquals(StoreTypeEnum.RW,openRB.getStoreType());      writer.createLog(openRB);      int sequence=0;      final ByteBuffer data=randomData(2000);      final UUID storeUUID=UUID.randomUUID();      final IHAWriteMessage msg=new HAWriteMessage(storeUUID,openRB.getCommitCounter(),openRB.getFirstCommitTime(),sequence,data.limit(),ChecksumUtility.getCHK().checksum(data),openRB.getStoreType(),openRB.getQuorumToken(),1000,0);      writer.writeOnHALog(msg,data);      writer.closeHALog(closeRBV(openRB));    }    final IHALogReader r1=writer.getReader(openRB.getCommitCounter() + 1);    try {      assertFalse(r1.isLive());      assertTrue(r1.isOpen());      assertFalse(r1.isEmpty());      assertTrue(r1.hasMoreBuffers());      for (int i=0; i < MAX_OPEN_FILE_HANDLES; i++) {        final IHALogReader r2=writer.getReader(openRB.getCommitCounter() + 1);        assertFalse(r2.isLive());        assertTrue(r2.isOpen());        assertFalse(r2.isEmpty());        assertTrue(r2.hasMoreBuffers());        try {          final ByteBuffer rbuf=ByteBuffer.allocate(DirectBufferPool.INSTANCE.getBufferCapacity());          while (r2.hasMoreBuffers()) {            r2.processNextBuffer(rbuf);          }        }  finally {          r2.close();        }        assertFalse(r2.isLive());        assertFalse(r2.isOpen());        assertFalse(r2.isEmpty());        assertFalse(r2.hasMoreBuffers());      }      r1.close();      assertFalse(r1.isLive());      assertFalse(r1.isOpen());      assertFalse(r1.isEmpty());      assertFalse(r1.hasMoreBuffers());    }  finally {      if (r1.isOpen())       r1.close();    }  }  finally {    writer.disableHALog();  }  HALogReader.main(new String[]{logdir.toString()});}  }
class C{  @PostConstruct public void initApplication() throws IOException {  if (env.getActiveProfiles().length == 0) {    log.warn("No Spring profile configured, running with default configuration");  } else {    log.info("Running with Spring profile(s) : {}",Arrays.toString(env.getActiveProfiles()));    Collection<String> activeProfiles=Arrays.asList(env.getActiveProfiles());    if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_PRODUCTION)) {      log.error("You have misconfigured your application! " + "It should not run with both the 'dev' and 'prod' profiles at the same time.");    }    if (activeProfiles.contains(Constants.SPRING_PROFILE_PRODUCTION) && activeProfiles.contains(Constants.SPRING_PROFILE_FAST)) {      log.error("You have misconfigured your application! " + "It should not run with both the 'prod' and 'fast' profiles at the same time.");    }    if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_CLOUD)) {      log.error("You have misconfigured your application! " + "It should not run with both the 'dev' and 'cloud' profiles at the same time.");    }  }}  }
class C{  public void resetWithEmpty(){  _inputBuffer=null;  _inputStart=-1;  _inputLen=0;  _resultString=null;  _resultArray=null;  if (_hasSegments) {    clearSegments();  }  _currentSize=0;}  }
class C{  public T webImage(String url,boolean zoom,boolean control,int color){  if (view instanceof WebView) {    setLayerType11(AQuery.LAYER_TYPE_SOFTWARE,null);    WebImage wi=new WebImage((WebView)view,url,progress,zoom,control,color);    wi.load();    progress=null;  }  return self();}  }
class C{  private boolean execute(boolean readResponse) throws IOException {  try {    httpEngine.sendRequest();    if (readResponse) {      httpEngine.readResponse();    }    return true;  } catch (  IOException e) {    if (handleFailure(e)) {      return false;    } else {      throw e;    }  }}  }
class C{  @Override public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(!((Agent)stack.pop()).testAgentFlag(Agent.DISABLED_FLAG));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static String retrieveDisplayName(String id,boolean daylight,int style,Locale locale){  String[] names=retrieveDisplayNamesImpl(id,locale);  if (Objects.nonNull(names)) {    return names[(daylight ? 4 : 2) - style];  } else {    return null;  }}  }
class C{  static public Timestamp nextBusinessDay(Timestamp day){  if (day == null)   day=new Timestamp(System.currentTimeMillis());  GregorianCalendar cal=new GregorianCalendar();  cal.setTime(day);  cal.set(Calendar.HOUR_OF_DAY,0);  cal.set(Calendar.MINUTE,0);  cal.set(Calendar.SECOND,0);  cal.set(Calendar.MILLISECOND,0);  int dow=cal.get(Calendar.DAY_OF_WEEK);  if (dow == Calendar.SATURDAY)   cal.add(Calendar.DAY_OF_YEAR,2); else   if (dow == Calendar.SUNDAY)   cal.add(Calendar.DAY_OF_YEAR,1);  java.util.Date temp=cal.getTime();  return new Timestamp(temp.getTime());}  }
class C{  private String printGFormat(final double x){  final String sx;  final String sy;  final String sz;  StringBuffer ret;  final int savePrecision=precision;  int i;  final char[] ca4;  final char[] ca5;  if (Double.isInfinite(x)) {    if (x == Double.POSITIVE_INFINITY) {      if (leadingSign) {        ca4="+Inf".toCharArray();      } else       if (leadingSpace) {        ca4=" Inf".toCharArray();      } else {        ca4="Inf".toCharArray();      }    } else {      ca4="-Inf".toCharArray();    }  } else   if (Double.isNaN(x)) {    if (leadingSign) {      ca4="+NaN".toCharArray();    } else     if (leadingSpace) {      ca4=" NaN".toCharArray();    } else {      ca4="NaN".toCharArray();    }  } else {    if (!precisionSet) {      precision=defaultDigits;    }    if (precision == 0) {      precision=1;    }    final int ePos;    if (conversionCharacter == 'g') {      sx=eFormatString(x,'e').trim();      ePos=sx.indexOf('e');    } else {      sx=eFormatString(x,'E').trim();      ePos=sx.indexOf('E');    }    i=ePos + 1;    int expon=0;    if (sx.charAt(i) == '-') {      for (++i; i < sx.length(); i++) {        if (sx.charAt(i) != '0') {          break;        }      }      if (i < sx.length()) {        expon=-Integer.parseInt(sx.substring(i));      }    } else {      if (sx.charAt(i) == '+') {        ++i;      }      for (; i < sx.length(); i++) {        if (sx.charAt(i) != '0') {          break;        }      }      if (i < sx.length()) {        expon=Integer.parseInt(sx.substring(i));      }    }    if (!alternateForm) {      if (expon >= -4 && expon < precision) {        sy=fFormatString(x).trim();      } else {        sy=sx.substring(0,ePos);      }      i=sy.length() - 1;      for (; i >= 0; i--) {        if (sy.charAt(i) != '0') {          break;        }      }      if (i >= 0 && sy.charAt(i) == '.') {        i--;      }      if (i == -1) {        sz="0";      } else       if (!Character.isDigit(sy.charAt(i))) {        sz=sy.substring(0,i + 1) + '0';      } else {        sz=sy.substring(0,i + 1);      }      if (expon >= -4 && expon < precision) {        ret=new StringBuffer(sz);      } else {        ret=new StringBuffer(sz);        ret.append(sx.substring(ePos));      }    } else {      if (expon >= -4 && expon < precision) {        ret=new StringBuffer(fFormatString(x).trim());      } else {        ret=new StringBuffer(sx);      }    }    if (leadingSpace) {      if (x >= 0) {        ret.append(' ').append(ret);      }    }    ca4=ret.toString().toCharArray();  }  ca5=applyFloatPadding(ca4,false);  precision=savePrecision;  return new String(ca5);}  }
class C{  public static byte[] bitmapToByte(Bitmap b){  ByteArrayOutputStream o=new ByteArrayOutputStream();  b.compress(Bitmap.CompressFormat.PNG,100,o);  return o.toByteArray();}  }
class C{  public synchronized void connect() throws Exception {  if (connection != null && !connection.isOpen()) {    connection.open();    transaction=connection.getModbusTransport().createTransaction();    setTransaction(transaction);  }}  }
class C{  private ReplaceEdit createUndoEdit(final IDocument document,final int offset,final int length,final String text){  String currentText=null;  try {    currentText=document.get(offset,length);  } catch (  BadLocationException cannotHappen) {  }  if (fCachedString != null && fCachedString.equals(currentText))   currentText=fCachedString; else   fCachedString=currentText;  return new ReplaceEdit(offset,text != null ? text.length() : 0,currentText);}  }
class C{  private static void generateRegisterPush(final ITranslationEnvironment environment,final long baseOffset,final String register,final OperandSize size,final List<ReilInstruction> instructions){  long offset=baseOffset;  final String pValue;  if (size == OperandSize.DWORD) {    pValue=register;  } else {    pValue=environment.getNextVariableString();    instructions.add(ReilHelpers.createAnd(offset,OperandSize.DWORD,register,size,"65535",size,pValue));    offset++;  }  generatePush(environment,offset,pValue,size,instructions);}  }
class C{  protected void fireStartDoc() throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_STARTDOCUMENT);  }}  }
class C{  private static String formatResult(Object result,int level){  StringBuilder builder=new StringBuilder();  String tab="";  for (int i=0; i < level + 1; i++) {    tab+="  ";  }  if (result == null) {    builder.append("null encountered\n");  } else   if (result.getClass().isArray()) {    Class<?> componentClass=result.getClass().getComponentType();    if (componentClass.isPrimitive()) {      String componentName=componentClass.toString();      int length=Array.getLength(result);      builder.append(componentName);      builder.append(" array, length = ");      builder.append(length);      builder.append("\n");      for (int i=0; i < length; i++) {        builder.append(tab);        builder.append("index ");        builder.append(i);        builder.append(", ");        builder.append(componentName);        builder.append(": ");        builder.append(Array.get(result,i));        builder.append("\n");      }    } else {      Object[] array=(Object[])result;      builder.append(array.getClass().getComponentType().getName());      builder.append(" array, length = ");      builder.append(array.length);      builder.append("\n");      for (int i=0; i < array.length; i++) {        builder.append(tab);        builder.append("index ");        builder.append(i);        builder.append(", ");        builder.append(formatResult(array[i],level + 1));      }    }  } else {    builder.append(result.getClass().getCanonicalName());    builder.append(": ");    builder.append(result);    builder.append("\n");  }  return builder.toString();}  }
class C{  public static synchronized GridTestPrintStream acquireOut(){  if (testOut == null)   testOut=new GridTestPrintStream(sysOut);  if (outCnt == 0)   System.setOut(testOut);  outCnt++;  return testOut;}  }
class C{  public boolean read(DataInputStream is) throws IOException {  setReading(true);  reset();  int functionId=0;  numRecords=0;  numObjects=is.readShort();  objectVector.ensureCapacity(numObjects);  for (int i=0; i < numObjects; i++) {    objectVector.add(new GdiObject(i,false));  }  while (functionId != -1) {    functionId=is.readShort();    if (functionId == -1) {      break;    }    MetaRecord mr;switch (functionId) {case WMFConstants.META_TEXTOUT:case WMFConstants.META_DRAWTEXT:case WMFConstants.META_EXTTEXTOUT:case WMFConstants.META_CREATEFONTINDIRECT:{        short len=is.readShort();        byte[] b=new byte[len];        for (int i=0; i < len; i++) {          b[i]=is.readByte();        }        String str=new String(b);        mr=new MetaRecord.StringRecord(str);      }    break;default :  mr=new MetaRecord();break;}int numPts=is.readShort();mr.numPoints=numPts;mr.functionId=functionId;for (int j=0; j < numPts; j++) {mr.AddElement(new Integer(is.readShort()));}records.add(mr);numRecords++;}setReading(false);return true;}  }
class C{  private String createPayment(X_I_BankStatement ibs) throws Exception {  if (ibs == null || ibs.getC_Payment_ID() != 0)   return "--";  log.fine(ibs.toString());  if (ibs.getC_Invoice_ID() == 0 && ibs.getC_BPartner_ID() == 0)   throw new AdempiereUserError("@NotFound@ @C_Invoice_ID@ / @C_BPartner_ID@");  if (ibs.getC_BankAccount_ID() == 0)   throw new AdempiereUserError("@NotFound@ @C_BankAccount_ID@");  MPayment payment=createPayment(ibs.getC_Invoice_ID(),ibs.getC_BPartner_ID(),ibs.getC_Currency_ID(),ibs.getStmtAmt(),ibs.getTrxAmt(),ibs.getC_BankAccount_ID(),ibs.getStatementLineDate() == null ? ibs.getStatementDate() : ibs.getStatementLineDate(),ibs.getDateAcct(),ibs.getDescription(),ibs.getAD_Org_ID());  if (payment == null)   throw new AdempiereSystemError("Could not create Payment");  ibs.setC_Payment_ID(payment.getC_Payment_ID());  ibs.setC_Currency_ID(payment.getC_Currency_ID());  ibs.setTrxAmt(payment.getPayAmt(true));  ibs.saveEx();  String retString="@C_Payment_ID@ = " + payment.getDocumentNo();  if (payment.getOverUnderAmt().signum() != 0)   retString+=" - @OverUnderAmt@=" + payment.getOverUnderAmt();  return retString;}  }
class C{  public ShoppingCart(Delegator delegator,String productStoreId,Locale locale,String currencyUom){  this(delegator,productStoreId,null,locale,currencyUom);}  }
class C{  public DistributedLogClientBuilder statsReceiver(StatsReceiver statsReceiver){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._statsReceiver=statsReceiver;  return newBuilder;}  }
class C{  public int findIndexOfValue(String value){  if (value != null && mEntryValues != null) {    for (int i=mEntryValues.length - 1; i >= 0; i--) {      if (mEntryValues[i].equals(value)) {        return i;      }    }  }  return -1;}  }
class C{  public void removePanListener(PanListener listener){  if (mPan != null) {    mPan.removePanListener(listener);  }}  }
class C{  public void clear(){  numObjs=0;}  }
class C{  void process_node(BaseElement parent,Node n) throws InvalidPropertiesFormatException {  if (n.getNodeType() == Node.ELEMENT_NODE) {    String name=n.getNodeName();    if (name.equalsIgnoreCase("application") || (name.equalsIgnoreCase("android.app.application")))     application=new Application(parent,n); else     if (name.equalsIgnoreCase("activity"))     activities.add(new Activity(parent,n)); else     if (name.equalsIgnoreCase("service"))     services.add(new Service(parent,n)); else     if (name.equalsIgnoreCase("receiver"))     receivers.add(new Receiver(parent,n)); else     if (name.equalsIgnoreCase("provider"))     providers.add(new Provider(parent,n)); else     if (name.equalsIgnoreCase("uses-sdk"))     uses_sdk=new UsesSDK(parent,n); else     if (name.equalsIgnoreCase("uses-permission"))     uses_permissions.add(new UsesPermission(parent,n)); else     if (name.equalsIgnoreCase("permission"))     permissions.add(new Permission(parent,n)); else     if (name.equalsIgnoreCase("uses-feature"))     features.add(new UsesFeature(parent,n)); else {      AnalysisReport.v().addEntry("Unsupported node in manifest: " + n.getNodeName(),AnalysisReport.Level.ELEVATED);      parent.xml_error("Unexpected node %s in manifest ignored",n.getNodeName());    }  }}  }
class C{  @Override public void init(final IWorkbench workbench,final IStructuredSelection selection){  this.selection=selection;}  }
class C{  public static void quickSort(int[] a,int fromIndex,int toIndex,IntComparator c){  rangeCheck(a.length,fromIndex,toIndex);  quickSort1(a,fromIndex,toIndex - fromIndex,c);}  }
class C{  public boolean allValuesEqual(final int integer){  if (mapValues.isEmpty()) {    return false;  }  for (  final int value : mapValues.values()) {    if (integer != value) {      return false;    }  }  return true;}  }
class C{  public static void makeCompactGrid(Container parent,int rows,int cols,int initialX,int initialY,int xPad,int yPad){  final SpringLayout layout;  try {    layout=(SpringLayout)parent.getLayout();  } catch (  final ClassCastException exc) {    throw new IllegalArgumentException("The first argument to makeCompactGrid must use SpringLayout.",exc);  }  Spring x=Spring.constant(initialX);  for (int c=0; c < cols; c++) {    Spring width=Spring.constant(0);    for (int r=0; r < rows; r++) {      width=Spring.max(width,getConstraintsForCell(r,c,parent,cols).getWidth());    }    for (int r=0; r < rows; r++) {      final SpringLayout.Constraints constraints=getConstraintsForCell(r,c,parent,cols);      constraints.setX(x);      constraints.setWidth(width);    }    x=Spring.sum(x,Spring.sum(width,Spring.constant(xPad)));  }  Spring y=Spring.constant(initialY);  for (int r=0; r < rows; r++) {    Spring height=Spring.constant(0);    for (int c=0; c < cols; c++) {      height=Spring.max(height,getConstraintsForCell(r,c,parent,cols).getHeight());    }    for (int c=0; c < cols; c++) {      final SpringLayout.Constraints constraints=getConstraintsForCell(r,c,parent,cols);      constraints.setY(y);      constraints.setHeight(height);    }    y=Spring.sum(y,Spring.sum(height,Spring.constant(yPad)));  }  final SpringLayout.Constraints pCons=layout.getConstraints(parent);  pCons.setConstraint(SpringLayout.SOUTH,y);  pCons.setConstraint(SpringLayout.EAST,x);}  }
class C{  public static Address fromIntZeroExtend(int address){  return null;}  }
class C{  public Matrix4x3d rotationZ(double ang){  double sin, cos;  if (ang == Math.PI || ang == -Math.PI) {    cos=-1.0;    sin=0.0;  } else   if (ang == Math.PI * 0.5 || ang == -Math.PI * 1.5) {    cos=0.0;    sin=1.0;  } else   if (ang == -Math.PI * 0.5 || ang == Math.PI * 1.5) {    cos=0.0;    sin=-1.0;  } else {    cos=Math.cos(ang);    sin=Math.sin(ang);  }  m00=cos;  m01=sin;  m02=0.0;  m10=-sin;  m11=cos;  m12=0.0;  m20=0.0;  m21=0.0;  m22=1.0;  m30=0.0;  m31=0.0;  m32=0.0;  properties=0;  return this;}  }
class C{  private NeuronGroupNode createNeuronGroupNode(NeuronGroup neuronGroup){  NeuronGroupNode ret;  if (neuronGroup instanceof SOMGroup) {    ret=new SOMGroupNode(NetworkPanel.this,(SOMGroup)neuronGroup);  } else   if (neuronGroup instanceof CompetitiveGroup) {    ret=new CompetitiveGroupNode(NetworkPanel.this,(CompetitiveGroup)neuronGroup);  } else {    ret=new NeuronGroupNode(this,neuronGroup);  }  return ret;}  }
class C{  public static String trimDown(String string){  string=string.trim();  if (string.length() == 0) {    string=null;  }  return string;}  }
class C{  public CTextNodeMenu(final JFrame parent,final INaviView view,final CTextNode node){  Preconditions.checkNotNull(parent,"IE02151: Parent argument can not be null");  Preconditions.checkNotNull(view,"IE02152: View argument can not be null");  Preconditions.checkNotNull(node,"IE00975: Node argument can't be null");  add(new JMenuItem(CActionProxy.proxy(new CEditTextAction(parent,node))));  addSeparator();  add(CActionProxy.proxy(new CActionDeleteNode(view,node)));}  }
class C{  private void addAction(String label,int id,int type){  CardAction cardAction=new CardAction();  cardAction.label=label;  cardAction.id=id;  cardAction.type=type;  mCardActions.add(cardAction);}  }
class C{  private UnManagedVolume createUnManagedVolume(UnManagedVolume unManagedVolume,String unManagedVolumeNativeGuid,VNXeLun lun,StorageSystem system,StoragePool pool,DbClient dbClient){  boolean created=false;  if (null == unManagedVolume) {    unManagedVolume=new UnManagedVolume();    unManagedVolume.setId(URIUtil.createId(UnManagedVolume.class));    unManagedVolume.setNativeGuid(unManagedVolumeNativeGuid);    unManagedVolume.setStorageSystemUri(system.getId());    unManagedVolume.setStoragePoolUri(pool.getId());    created=true;  }  unManagedVolume.setLabel(lun.getName());  Map<String,StringSet> unManagedVolumeInformation=new HashMap<String,StringSet>();  Map<String,String> unManagedVolumeCharacteristics=new HashMap<String,String>();  Boolean isVolumeExported=false;  if (lun.getHostAccess() != null && !lun.getHostAccess().isEmpty()) {    isVolumeExported=true;  }  unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_VOLUME_EXPORTED.toString(),isVolumeExported.toString());  Boolean isVolumeInCG=lun.getType() == VNXeApiClient.GENERIC_STORAGE_LUN_TYPE ? true : false;  unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_VOLUME_ADDED_TO_CONSISTENCYGROUP.toString(),isVolumeInCG.toString());  StringSet deviceLabel=new StringSet();  deviceLabel.add(lun.getName());  unManagedVolumeInformation.put(SupportedVolumeInformation.DEVICE_LABEL.toString(),deviceLabel);  String volumeWWN=lun.getWwn().replaceAll(":","");  unManagedVolume.setWwn(volumeWWN);  StringSet systemTypes=new StringSet();  systemTypes.add(system.getSystemType());  StringSet provCapacity=new StringSet();  provCapacity.add(String.valueOf(lun.getSizeTotal()));  unManagedVolumeInformation.put(SupportedVolumeInformation.PROVISIONED_CAPACITY.toString(),provCapacity);  StringSet allocatedCapacity=new StringSet();  allocatedCapacity.add(String.valueOf(lun.getSizeAllocated()));  unManagedVolumeInformation.put(SupportedVolumeInformation.ALLOCATED_CAPACITY.toString(),allocatedCapacity);  unManagedVolumeInformation.put(SupportedVolumeInformation.SYSTEM_TYPE.toString(),systemTypes);  StringSet nativeId=new StringSet();  nativeId.add(lun.getId());  unManagedVolumeInformation.put(SupportedVolumeInformation.NATIVE_ID.toString(),nativeId);  unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_INGESTABLE.toString(),Boolean.TRUE.toString());  unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_THINLY_PROVISIONED.toString(),lun.getIsThinEnabled().toString());  if (null != pool) {    unManagedVolume.setStoragePoolUri(pool.getId());    StringSet pools=new StringSet();    pools.add(pool.getId().toString());    unManagedVolumeInformation.put(SupportedVolumeInformation.STORAGE_POOL.toString(),pools);    StringSet driveTypes=pool.getSupportedDriveTypes();    if (null != driveTypes) {      unManagedVolumeInformation.put(SupportedVolumeInformation.DISK_TECHNOLOGY.toString(),driveTypes);    }    StringSet matchedVPools=DiscoveryUtils.getMatchedVirtualPoolsForPool(dbClient,pool.getId(),unManagedVolumeCharacteristics.get(SupportedVolumeCharacterstics.IS_THINLY_PROVISIONED.toString()));    log.debug("Matched Pools : {}",Joiner.on("\t").join(matchedVPools));    if (null == matchedVPools || matchedVPools.isEmpty()) {      unManagedVolume.getSupportedVpoolUris().clear();    } else {      unManagedVolume.getSupportedVpoolUris().replace(matchedVPools);      log.info("Replaced Pools : {}",Joiner.on("\t").join(unManagedVolume.getSupportedVpoolUris()));    }  }  unManagedVolume.addVolumeInformation(unManagedVolumeInformation);  if (unManagedVolume.getVolumeCharacterstics() == null) {    unManagedVolume.setVolumeCharacterstics(new StringMap());  }  unManagedVolume.getVolumeCharacterstics().replace(unManagedVolumeCharacteristics);  if (created) {    unManagedVolumesInsert.add(unManagedVolume);  } else {    unManagedVolumesUpdate.add(unManagedVolume);  }  return unManagedVolume;}  }
class C{  protected void updateAnnotation(ControlPointMarker controlPoint){  if (controlPoint == null) {    this.getAnnotationLayer().setEnabled(false);    return;  }  this.getAnnotationLayer().setEnabled(true);  this.getAnnotation().setPosition(controlPoint.getPosition());  String annotationText;  if (controlPoint.size != null)   annotationText=this.unitsFormat.length(null,controlPoint.size); else   if (controlPoint.rotation != null)   annotationText=this.unitsFormat.angle(null,controlPoint.rotation); else   annotationText=this.unitsFormat.latLon2(controlPoint.getPosition());  this.getAnnotation().setText(annotationText);}  }
class C{  public IndexRequest source(XContentBuilder sourceBuilder){  source=sourceBuilder.bytes();  return this;}  }
class C{  public GenericEntry updateOrganizationUser(String customerId,String orgUserEmail,String oldOrgUnitPath,String newOrgUnitPath) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  GenericEntry entry=new GenericEntry();  if (oldOrgUnitPath != null && oldOrgUnitPath.length() != 0) {    entry.addProperty("oldOrgUnitPath",oldOrgUnitPath);  }  entry.addProperty("orgUnitPath",newOrgUnitPath);  return service.update(new URL("https://apps-apis.google.com/a/feeds/orguser/2.0/" + customerId + "/"+ orgUserEmail),entry);}  }
class C{  public NoopBaleenHistory(){  this.documentHistory=new NoopDocumentHistory();}  }
class C{  public boolean buildAndPutEnabledInputMethodsStrRemovingIdLocked(StringBuilder builder,List<Pair<String,ArrayList<String>>> imsList,String id){  boolean isRemoved=false;  boolean needsAppendSeparator=false;  for (  Pair<String,ArrayList<String>> ims : imsList) {    String curId=ims.first;    if (curId.equals(id)) {      isRemoved=true;    } else {      if (needsAppendSeparator) {        builder.append(INPUT_METHOD_SEPARATER);      } else {        needsAppendSeparator=true;      }      buildEnabledInputMethodsSettingString(builder,ims);    }  }  if (isRemoved) {    putEnabledInputMethodsStr(builder.toString());  }  return isRemoved;}  }
class C{  private final long calculateSize(LegacyFile file){  if (file.isLink())   return 0;  if (file.isFile()) {    long size=(file.length() + (blockSize - 1)) / blockSize;    if (size == 0)     size=1;    return size;  }  LegacyFile[] list=null;  try {    list=file.listFiles();  } catch (  SecurityException io) {    Log.e("diskusage","list files",io);  }  if (list == null)   return 0;  long size=1;  for (int i=0; i < list.length; i++)   size+=calculateSize(list[i]);  return size;}  }
class C{  public double npv(final Leg cashflows,final InterestRate irr,final Date settlementDate){  Date date=settlementDate;  if (date.isNull()) {    date=new Settings().evaluationDate();  }  final YieldTermStructure flatRate=new FlatForward(date,irr.rate(),irr.dayCounter(),irr.compounding(),irr.frequency());  return npv(cashflows,new Handle<YieldTermStructure>(flatRate),date,date,0);}  }
class C{  @SuppressWarnings("unused") private void transformLateralShift(){  if (steps.size() < 3) {    return;  }  final int index=steps.size() - 3;  final MoveStep step1=getStep(index);  final MoveStep step2=getStep(index + 1);  final MoveStep step3=getStep(index + 2);  if (step1.oppositeTurn(step3) && ((step2.getType() == MovePath.MoveStepType.BACKWARDS) || (step2.getType() == MovePath.MoveStepType.FORWARDS))) {    final MoveStepType stepType=step1.getType();    final MoveStepType direction=step2.getType();    steps.removeElementAt(index);    steps.removeElementAt(index);    steps.removeElementAt(index);    final MoveStep shift=new MoveStep(this,lateralShiftForTurn(stepType,direction));    addStep(shift);  }}  }
class C{  public boolean isDebug(){  return this.debug;}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public Response createResponse(int statusCode,Request request,ContentTypeHeader contentType,byte[] content) throws ParseException {  if (request == null || content == null || contentType == null)   throw new NullPointerException("null Parameters");  SIPRequest sipRequest=(SIPRequest)request;  SIPResponse sipResponse=sipRequest.createResponse(statusCode);  sipResponse.setHeader((ContentType)contentType);  sipResponse.setMessageContent(content);  if (server != null) {    sipResponse.setHeader(server);  }  return sipResponse;}  }
class C{  protected void purge(){  Reference<?> ref=queue.poll();  while (ref != null) {    purge(ref);    ref=queue.poll();  }}  }
class C{  public boolean isLocalInstance(){  return LOCAL.equalsIgnoreCase(instanceName);}  }
class C{  public ReferenceSlot createReferenceSlot(){  ReferenceSlotImpl referenceSlot=new ReferenceSlotImpl();  return referenceSlot;}  }
class C{  public String consumeWord(){  int start=pos;  while (matchesWord())   pos++;  return queue.substring(start,pos);}  }
class C{  public void loading(){  mHintView.setVisibility(View.GONE);  mProgressBar.setVisibility(View.VISIBLE);}  }
class C{  @Override public void onBackPressed(){  File current=this.core.getCurrentFolder();  if (!this.useBackButton || current == null || current.getParent() == null || current.getPath().compareTo(this.startFolder.getPath()) == 0) {    super.onBackPressed();  } else {    this.core.loadFolder(current.getParent());  }}  }
class C{  public static String markLTR(String string,String delimiters){  if (!USE_TEXT_PROCESSOR)   return string;  return TextProcessor.process(string,delimiters);}  }
class C{  private void dynInit(){  pickFormat.appendItem(s_none,s_none);  String sql=MRole.getDefault().addAccessSQL("SELECT Name FROM AD_ImpFormat","AD_ImpFormat",MRole.SQL_FULLYQUALIFIED,MRole.SQL_RO);  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    ResultSet rs=pstmt.executeQuery();    while (rs.next())     pickFormat.appendItem(rs.getString(1),rs.getString(1));    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  pickFormat.setSelectedIndex(0);  pickFormat.addEventListener(Events.ON_SELECT,this);  Charset charset=Ini.getCharset();  for (int i=0; i < fCharset.getItemCount(); i++) {    ListItem listitem=fCharset.getItemAtIndex(i);    Charset compare=(Charset)listitem.getValue();    if (charset == compare) {      fCharset.setSelectedIndex(i);      break;    }  }  fCharset.addEventListener(Events.ON_SELECT,this);  confirmPanel.setEnabled("Ok",false);}  }
class C{  public void doCall(String url,String nameSpace,String methodName,AbSoapParams params,AbSoapListener listener){  String result=null;  try {    SoapObject request=new SoapObject(nameSpace,methodName);    List<BasicNameValuePair> paramsList=params.getParamsList();    for (    NameValuePair nameValuePair : paramsList) {      request.addProperty(nameValuePair.getName(),nameValuePair.getValue());    }    SoapSerializationEnvelope envelope=new SoapSerializationEnvelope(SoapEnvelope.VER11);    envelope.bodyOut=request;    envelope.dotNet=mDotNet;    envelope.setOutputSoapObject(request);    HttpTransportSE httpTransportSE=new HttpTransportSE(url,mTimeout);    httpTransportSE.debug=true;    AbLogUtil.d(AbSoapClient.class,"--call--");    httpTransportSE.call(nameSpace + methodName,envelope);    SoapObject bodyIn=(SoapObject)envelope.bodyIn;    result=bodyIn.toString();    if (result != null) {      listener.sendSuccessMessage(AbHttpStatus.SUCCESS_CODE,result);    }  } catch (  Exception e) {    e.printStackTrace();    listener.sendFailureMessage(AbHttpStatus.UNTREATED_CODE,AbAppConfig.UNTREATED_EXCEPTION,new AbAppException(AbAppConfig.UNTREATED_EXCEPTION));  }}  }
class C{  private void ensureOpen() throws IOException {  mParent.ensureOpen();  if (!mOpen) {    throw new IOException("Output stream is closed");  }}  }
class C{  public ObjectReference loadObjectReference(Offset offset){  return new ObjectReference(loadArchitecturalWord(offset));}  }
class C{  public int V(){  return V;}  }
class C{  private void doLoad(HttpServletRequest request,ClassInstructorAssignmentForm frm,String instrOffrConfigId,InstrOfferingConfig ioc) throws Exception {  if (instrOffrConfigId == null || instrOffrConfigId.trim().length() == 0)   throw new Exception(MSG.exceptionMissingIOConfig());  InstructionalOffering io=ioc.getInstructionalOffering();  frm.setInstrOffrConfigId(ioc.getUniqueId());  frm.setInstrOffrConfigLimit(ioc.getLimit());  frm.setInstrOfferingId(io.getUniqueId());  frm.setDisplayExternalId(ApplicationProperty.ClassSetupShowExternalIds.isTrue());  String name=io.getCourseNameWithTitle();  if (io.hasMultipleConfigurations()) {    name+=" [" + ioc.getName() + "]";  }  frm.setInstrOfferingName(name);  if (ioc.getSchedulingSubparts() == null || ioc.getSchedulingSubparts().size() == 0)   throw new Exception(MSG.exceptionIOConfigUndefined());  InstrOfferingConfig config=ioc.getNextInstrOfferingConfig(sessionContext);  if (config != null) {    frm.setNextId(config.getUniqueId().toString());  } else {    frm.setNextId(null);  }  config=ioc.getPreviousInstrOfferingConfig(sessionContext);  if (config != null) {    frm.setPreviousId(config.getUniqueId().toString());  } else {    frm.setPreviousId(null);  }  ArrayList subpartList=new ArrayList(ioc.getSchedulingSubparts());  Collections.sort(subpartList,new SchedulingSubpartComparator());  for (Iterator it=subpartList.iterator(); it.hasNext(); ) {    SchedulingSubpart ss=(SchedulingSubpart)it.next();    if (ss.getClasses() == null || ss.getClasses().size() == 0)     throw new Exception(MSG.exceptionInitialIOSetupIncomplete());    if (ss.getParentSubpart() == null) {      loadClasses(frm,ss.getClasses(),new String());    }  }}  }
class C{  @Override public int delete(Uri uri,String where,String[] whereArgs){  SQLiteDatabase db=mOpenHelper.getWritableDatabase();  String finalWhere;  int count;switch (mUriMatcher.match(uri)) {case MAIN:    count=db.delete(MainTable.TABLE_NAME,where,whereArgs);  break;case MAIN_ID:finalWhere=DatabaseUtils.concatenateWhere(MainTable._ID + " = " + ContentUris.parseId(uri),where);count=db.delete(MainTable.TABLE_NAME,finalWhere,whereArgs);break;default :throw new IllegalArgumentException("Unknown URI " + uri);}getContext().getContentResolver().notifyChange(uri,null);return count;}  }
class C{  private Review parseReviewJson(String noteDataStr){  try {    return new Gson().fromJson(noteDataStr,Review.class);  } catch (  JsonSyntaxException jse) {    logger.warning("Weird data in review note: " + noteDataStr);    return null;  }}  }
class C{  public static String shortUuid(URI uri){  NameBasedGenerator generator=Generators.nameBasedGenerator(NameBasedGenerator.NAMESPACE_URL);  UUID uuid=generator.generate(uri.toString());  long l=ByteBuffer.wrap(uuid.toString().getBytes()).getLong();  return Long.toString(l,Character.MAX_RADIX);}  }
class C{  public XMLSignatureInput engineResolveURI(ResourceResolverContext context) throws ResourceResolverException {  Document doc=context.attr.getOwnerElement().getOwnerDocument();  Node selectedElem=null;  if (context.uriToResolve.equals("")) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"ResolverFragment with empty URI (means complete document)");    }    selectedElem=doc;  } else {    String id=context.uriToResolve.substring(1);    selectedElem=doc.getElementById(id);    if (selectedElem == null) {      Object exArgs[]={id};      throw new ResourceResolverException("signature.Verification.MissingID",exArgs,context.attr,context.baseUri);    }    if (context.secureValidation) {      Element start=context.attr.getOwnerDocument().getDocumentElement();      if (!XMLUtils.protectAgainstWrappingAttack(start,id)) {        Object exArgs[]={id};        throw new ResourceResolverException("signature.Verification.MultipleIDs",exArgs,context.attr,context.baseUri);      }    }    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"Try to catch an Element with ID " + id + " and Element was "+ selectedElem);    }  }  XMLSignatureInput result=new XMLSignatureInput(selectedElem);  result.setExcludeComments(true);  result.setMIMEType("text/xml");  if (context.baseUri != null && context.baseUri.length() > 0) {    result.setSourceURI(context.baseUri.concat(context.uriToResolve));  } else {    result.setSourceURI(context.uriToResolve);  }  return result;}  }
class C{  @NonNull public static RegistrationResponse fromJson(@NonNull RegistrationRequest request,@NonNull JSONObject json) throws JSONException, MissingArgumentException {  checkNotNull(request,"registration request cannot be null");  return new RegistrationResponse.Builder(request).fromResponseJson(json).build();}  }
class C{  public static double quantile(double val,double loc,double scale,double shape){  if (shape == 0.) {    return loc - scale * Math.log((1 - val) / val);  }  return loc + scale * (1 - Math.pow((1 - val) / val,shape)) / shape;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:50.934 -0500",hash_original_method="060A9EEF28BA2151837477F91B43F7FB",hash_generated_method="4FB634BF302A3B38AE7DC3F2E3F82FB5") private static void decodeIs91ShortMessage(BearerData bData) throws BitwiseInputStream.AccessException, CodingException {  BitwiseInputStream inStream=new BitwiseInputStream(bData.userData.payload);  int dataLen=inStream.available() / 6;  int numFields=bData.userData.numFields;  if ((dataLen > 14) || (dataLen < numFields)) {    throw new CodingException("IS-91 voicemail status decoding failed");  }  StringBuffer strbuf=new StringBuffer(dataLen);  for (int i=0; i < numFields; i++) {    strbuf.append(UserData.ASCII_MAP[inStream.read(6)]);  }  bData.userData.payloadStr=strbuf.toString();}  }
class C{  public String runEvent(HttpServletRequest request,HttpServletResponse response,ConfigXMLReader.Event event,ConfigXMLReader.RequestMap requestMap,String trigger) throws EventHandlerException {  EventHandler eventHandler=eventFactory.getEventHandler(event.type);  String eventReturn=eventHandler.invoke(event,requestMap,request,response);  if (Debug.verboseOn() || (Debug.infoOn() && "request".equals(trigger)))   Debug.logInfo("Ran Event [" + event.type + ":"+ event.path+ "#"+ event.invoke+ "] from ["+ trigger+ "], result is ["+ eventReturn+ "]",module);  return eventReturn;}  }
class C{  public MethodHandleConstant addMethodHandle(MethodHandleType mhType,ConstantPoolEntry cpEntry){  MethodHandleConstant entry=getMethodHandle(mhType,cpEntry);  if (entry != null) {    return entry;  }  entry=new MethodHandleConstant(this,_entries.size(),mhType,cpEntry);  addConstant(entry);  return entry;}  }
class C{  private void showDrawerErrorToast(int errorId){  Toast.makeText(this,errorId,Toast.LENGTH_SHORT).show();  MenuItem m=mNavView.getMenu().findItem(currentFragment);  m.setChecked(true);  mDrawer.closeDrawers();}  }
class C{  public static void assertEqual(double expected,double actual,double maxRelativeError,String errorMessage){  if (verbose) {    log("assertEqual(" + expected + ", "+ actual+ ", "+ errorMessage+ ")");  }  if (expected != actual) {    assertRelativeErrorNotExceeded(expected,actual,maxRelativeError,errorMessage);  }}  }
class C{  public long toMilliseconds(){  return TimeUnit.MILLISECONDS.convert(length,timeUnit);}  }
class C{  public List makeListTipoCampoEntidad(){  List listaTipoCampoEntidad=new ArrayList();  PropertyBean propertyBean=new PropertyBean();  propertyBean.setValue(String.valueOf(TipoCampoEntidad.DATO_VALUE));  propertyBean.setLabel(TipoCampoEntidad.DATO_LABEL);  listaTipoCampoEntidad.add(propertyBean);  propertyBean=new PropertyBean();  propertyBean.setValue(String.valueOf(TipoCampoEntidad.TABLA_VALUE));  propertyBean.setLabel(TipoCampoEntidad.TABLA_LABEL);  listaTipoCampoEntidad.add(propertyBean);  return listaTipoCampoEntidad;}  }
class C{  static private IBindingSet[] resolveChunk(final UUID queryId,final LexiconRelation lex,final IBindingSet[] chunk,final IVariable<?>[] required,final int termsChunkSize,final int blobsChunkSize){  final long begin=System.currentTimeMillis();  if (log.isDebugEnabled())   log.debug("Fetched chunk: size=" + chunk.length + ", chunk="+ Arrays.toString(chunk));  final int initialCapacity=required == null ? chunk.length : ((required.length == 0) ? 1 : chunk.length * required.length);  final Collection<IV<?,?>> ids=new HashSet<IV<?,?>>(initialCapacity);  for (  IBindingSet solution : chunk) {    final IBindingSet bindingSet=solution;    assert bindingSet != null;    if (required == null) {      @SuppressWarnings("rawtypes") final Iterator<Map.Entry<IVariable,IConstant>> itr=bindingSet.iterator();      while (itr.hasNext()) {        @SuppressWarnings("rawtypes") final Map.Entry<IVariable,IConstant> entry=itr.next();        final IV<?,?> iv=(IV<?,?>)entry.getValue().get();        if (iv == null) {          throw new RuntimeException("NULL? : var=" + entry.getKey() + ", "+ bindingSet);        }        handleIV(iv,ids);      }    } else {      for (      IVariable<?> v : required) {        final IConstant<?> c=bindingSet.get(v);        if (c == null) {          continue;        }        final IV<?,?> iv=(IV<?,?>)c.get();        if (iv == null) {          throw new RuntimeException("NULL? : var=" + v + ", "+ bindingSet);        }        handleIV(iv,ids);      }    }  }  if (log.isDebugEnabled())   log.debug("Resolving " + ids.size() + " IVs, required="+ Arrays.toString(required));  final Map<IV<?,?>,BigdataValue> terms=lex.getTerms(ids,termsChunkSize,blobsChunkSize);{    final IBindingSet[] chunk2=new IBindingSet[chunk.length];    int i=0;    for (    IBindingSet e : chunk) {      final IBindingSet f=getBindingSet(e,required,terms);      chunk2[i++]=f;    }    if (SolutionsLog.INFO) {      SolutionsLog.log(queryId,null,-1,-1,chunk2);    }    final long elapsed=System.currentTimeMillis() - begin;    if (log.isDebugEnabled())     log.debug("Resolved chunk: size=" + chunk2.length + ", chunk="+ Arrays.toString(chunk2));    if (log.isInfoEnabled())     log.info("Resolved chunk: size=" + chunk2.length + ", elapsed="+ elapsed);    return chunk2;  }}  }
class C{  protected int countToken(String token,String target){  int tokenIndex=0;  int count=0;  while (tokenIndex != -1) {    tokenIndex=target.indexOf(token,tokenIndex);    if (tokenIndex > -1) {      tokenIndex++;      count++;    }  }  return count;}  }
class C{  public boolean canUseShaders(){  if (this.isShaderSupported()) {    return OpenGlHelper.isFramebufferEnabled() && ConfigHandler.useShader;  } else {    ConfigHandler.useShader=false;    return false;  }}  }
class C{  public void ruleR3(Graph graph){  List<Node> nodes=graph.getNodes();  for (  Node B : nodes) {    List<Node> intoBArrows=graph.getNodesInTo(B,Endpoint.ARROW);    List<Node> intoBCircles=graph.getNodesInTo(B,Endpoint.CIRCLE);    for (    Node D : intoBCircles) {      if (intoBArrows.size() < 2) {        continue;      }      ChoiceGenerator gen=new ChoiceGenerator(intoBArrows.size(),2);      int[] choice;      while ((choice=gen.next()) != null) {        Node A=intoBArrows.get(choice[0]);        Node C=intoBArrows.get(choice[1]);        if (graph.isAdjacentTo(A,C)) {          continue;        }        if (!graph.isAdjacentTo(A,D) || !graph.isAdjacentTo(C,D)) {          continue;        }        if (graph.getEndpoint(A,D) != Endpoint.CIRCLE) {          continue;        }        if (graph.getEndpoint(C,D) != Endpoint.CIRCLE) {          continue;        }        if (!isArrowpointAllowed(D,B,graph)) {          continue;        }        graph.setEndpoint(D,B,Endpoint.ARROW);        this.orientSimilarPairs(graph,this.getKnowledge(),D,B,Endpoint.ARROW);        if (verbose) {          logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Double triangle",graph.getEdge(D,B)));          System.out.println(SearchLogUtils.edgeOrientedMsg("Double triangle",graph.getEdge(D,B)));        }        changeFlag=true;      }    }  }}  }
class C{  public void remove(RegisterBinding binding,Interval i){  Interval list=get(binding);  Interval prev=null;  Interval cur=list;  while (cur != i) {    assert cur != null && cur != Interval.EndMarker : "interval has not been found in list: " + i;    prev=cur;    cur=cur.next;  }  if (prev == null) {    set(binding,cur.next);  } else {    prev.next=cur.next;  }}  }
class C{  protected String formatHtml(final String text){  return MHtmlEncoder.encodeString(text);}  }
class C{  @Override public boolean displayResultset(int index){  boolean result;  int i;  result=true;  if (m_DisplayedResultsets != null) {    result=false;    for (i=0; i < m_DisplayedResultsets.length; i++) {      if (m_DisplayedResultsets[i] == index) {        result=true;        break;      }    }  }  return result;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void testElementOrderFilterBeforeServletWithComment() throws Exception {  String xml=WEBAPP_TEST_HEADER.trim() + "  <!-- My servlets -->".trim() + "  <servlet>".trim()+ "    <servlet-name>s1</servlet-name>".trim()+ "    <servlet-class>s1class</servlet-class>".trim()+ "  </servlet>".trim()+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  webXml.addTag(createFilterElement(webXml.getDescriptorType(),"f1","f1class"));  List<Content> order=webXml.getRootElement().getContent();  assertEquals("filter",((Element)order.get(0)).getName());  assertEquals(Comment.class,order.get(1).getClass());  assertEquals("servlet",((Element)order.get(2)).getName());}  }
class C{  protected synchronized void purgeLaterList(){  if (addLaterVector != null && !addInProgress) {    Object[] objs=addLaterVector.toArray();    addLaterVector=null;    for (    Object obj : objs) {      if (DEBUG) {        logger.fine("+++ Adding " + obj.getClass().getName() + " to MapHandler from later list.");      }      add(obj);    }  }}  }
class C{  public boolean containsPoint(ReadonlyVec3D p){  Vec3D v0=c.sub(a);  Vec3D v1=b.sub(a);  Vec3D v2=p.sub(a);  float dot00=v0.dot(v0);  float dot01=v0.dot(v1);  float dot02=v0.dot(v2);  float dot11=v1.dot(v1);  float dot12=v1.dot(v2);  float invDenom=1.0f / (dot00 * dot11 - dot01 * dot01);  float u=(dot11 * dot02 - dot01 * dot12) * invDenom;  float v=(dot00 * dot12 - dot01 * dot02) * invDenom;  return (u >= 0.0) && (v >= 0.0) && (u + v <= 1.0);}  }
class C{  @PostConstruct public void demoOnly(){  logger.warning("The RestTemplate request factory is " + restTemplate.getRequestFactory().getClass());}  }
class C{  static public void qsort(int[] array){  qsort_h(array,0,array.length - 1);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:32.895 -0500",hash_original_method="017F163869C61C64FB5708C2B3013CCB",hash_generated_method="23842DFC2EE1BA3D3D8EF3AC7EB6023B") final void readTrailers() throws IOException {  readHeaders(responseHeaders.getHeaders());}  }
class C{  private void mergePossibleResponse(){  if (!runtimeStack.isEmpty() && runtimeStack.peek().getTypes().contains(Types.RESPONSE)) {    mergeReturnElement(runtimeStack.peek());  }}  }
class C{  public int readInt(){  return scanner.nextInt();}  }
class C{  public void createSubUsageScenario03() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.daysToMillis(6.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO03_PERUNIT_MONTH",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO03_PERUNIT_MONTH",serviceDetails,basicSetup.getCustomerUser1(),role);  long usageEndTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.daysToMillis(10);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO03_PERUNIT_MONTH",subDetails);}  }
class C{  private boolean isTarget(TypedBlock cur,TypedBlock prev){  int in=cur.incoming;  if (in > 1)   return true; else   if (in < 1)   return false;  return prev.stop;}  }
class C{  public static long[] insert(long[] dest,long src,int offset){  long[] temp=new long[dest.length + 1];  System.arraycopy(dest,0,temp,0,offset);  temp[offset]=src;  System.arraycopy(dest,offset,temp,offset + 1,dest.length - offset);  return temp;}  }
class C{  private boolean allow(SearchResultDataLine line){  return FILTER.allow(line);}  }
class C{  public void put(double coord,double val){  get(coord).put(val);}  }
class C{  public static void resetBarColor(){  if (OmniboxControl.isTop()) {    BarColors.updateBarsColor(getStaticWindow(),R.color.omnibox_statusbar_background,false,false,true);    BarColors.updateBarsColor(getStaticWindow(),R.color.black,false,true,false);  } else {    BarColors.updateBarsColor(getStaticWindow(),R.color.omnibox_statusbar_background,false,true,false);    BarColors.updateBarsColor(getStaticWindow(),R.color.omnibox_statusbar_background,false,false,true);  }}  }
class C{  public boolean isSVG12(){  return isSVG12;}  }
class C{  public synchronized void ensureUpdated(){}  }
class C{  public T caseMappedElement(MappedElement object){  return null;}  }
class C{  public boolean containsEdge(Edge edge){  return edgesSet.contains(edge);}  }
class C{  public void deactivateGLEnvironment(){  GLEnvironment glEnv=mContext.getGLEnvironment();  if (glEnv != null) {    mContext.getGLEnvironment().deactivate();  } else {    throw new NullPointerException("No GLEnvironment in place to deactivate!");  }}  }
class C{  private void paintBackground(Graphics2D g,JComponent c,int x,int y,int width,int height){  Color color=c.getBackground();  if (state == Which.BACKGROUND_ENABLED) {    color=(Color)componentColors[0];  } else   if (type == CommonControlState.DISABLED) {    color=new Color(color.getRed(),color.getGreen(),color.getBlue(),0x80);  }  Shape s=shapeGenerator.createRoundRectangle(x + 1,y + 1,width - 2,height - 2,CornerSize.BORDER);  g.setPaint(color);  g.fill(s);  if (isPaintLineSeperators(c)) {    paintLineSeparator(g,c,width,height);  }}  }
class C{  @BeforeClass public static void initTesting(){  File solr_config=new File("defaults/solr");  File storage=new File("test/DATA/INDEX/webportal/SEGMENTS/text/solr/");  storage.mkdirs();  System.out.println("setup EmeddedSolrConnector using config dir: " + solr_config.getAbsolutePath());  try {    localCollectionInstance=new EmbeddedInstance(solr_config,storage,CollectionSchema.CORE_NAME,new String[]{CollectionSchema.CORE_NAME,WebgraphSchema.CORE_NAME});    solr=new EmbeddedSolrConnector(localCollectionInstance);    solr.clear();  } catch (  final IOException ex) {    fail("IOException starting Jetty");  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public synchronized void createLOSImage(){  if (Debug.debugging("los")) {    Debug.output("createLOSimage: Entered with diameter = " + LOSedge);  }  if (layer == null || layer.frameCache == null) {    Debug.error("LOSGenerator:  can't access the DTED data through the terrain layer.");    return;  }  int squareRadius=LOSedge / 2 + 1;  int[] newPixels=new int[LOSedge * LOSedge];  float[] azimuthVals=new float[8 * (squareRadius - 1)];  newPixels[((LOSedge / 2) * LOSedge) + squareRadius]=MAYBEVISIBLE;  if (Debug.debugging("los")) {    Debug.output("createLOSimage: size of azimuth array = " + azimuthVals.length);  }  fireProgressUpdate(ProgressEvent.START,"Building LOS Image Mask...",0,100);  int x, y;  boolean mark=false;  int markColor=colortable[INVISIBLE];  int range;  float pix_arc_interval=(float)(2 * Math.PI / azimuthVals.length);  for (int round=1; round < squareRadius; round++) {    if (Debug.debugging("los")) {      Debug.output("createLOSimage: round " + round);    }    y=LOScenterP.y - round;    x=LOScenterP.x - round;    if (round == 1) {      mark=true;      markColor=colortable[MAYBEVISIBLE];    } else     mark=false;    if (LOSprecision == AZIMUTH) {      range=((LOSedge * 4) - 4) / (round * 16);      for (; x < LOScenterP.x + round; x++)       resolveImagePoint(x,y,newPixels,azimuthVals,range,pix_arc_interval,mark,markColor);      for (; y < LOScenterP.y + round; y++)       resolveImagePoint(x,y,newPixels,azimuthVals,range,pix_arc_interval,mark,markColor);      for (; x > LOScenterP.x - round; x--)       resolveImagePoint(x,y,newPixels,azimuthVals,range,pix_arc_interval,mark,markColor);      for (; y > LOScenterP.y - round; y--)       resolveImagePoint(x,y,newPixels,azimuthVals,range,pix_arc_interval,mark,markColor);    }    int whereWeAre=(int)(100f * ((float)round / (float)squareRadius));    fireProgressUpdate(ProgressEvent.UPDATE,"Analyzing data...",whereWeAre,100);  }  fireProgressUpdate(ProgressEvent.UPDATE,"Creating Mask",100,100);  LOSimage=new OMRaster(LOScenterLLP.getLatitude(),LOScenterLLP.getLongitude(),(-1 - LOSedge / 2),(-1 - LOSedge / 2),LOSedge,LOSedge,newPixels);  LOSimage.generate(proj);  graphics.clear();  graphics.add(LOSimage);  fireProgressUpdate(ProgressEvent.DONE,"LOS mask complete",100,100);  if (Debug.debugging("los")) {    Debug.output("createLOSimage: Done...");  }}  }
class C{  private Natives(){}  }
class C{  public boolean hasUsernameExt(){  return hasExtension(GphotoUsername.class);}  }
class C{  public boolean hasProperties(){  return hasRepeatingExtension(Property.class);}  }
class C{  protected Shape convertShapeFromGetDocuments(Shape shape){  return shape;}  }
class C{  public boolean isEnabled(){  RequestParameters params=new RequestParameters();  try {    ServiceResultIterator resultItr=this.getServices().get(params);    if (resultItr == null || !resultItr.hasNext()) {      return false;    }    ServiceResult res=resultItr.next();    StringHandle handle=new StringHandle();    String enabled=res.getContent(handle).get();    return Boolean.parseBoolean(enabled);  } catch (  ClientHandlerException e) {    return false;  }}  }
class C{  public static double[] toDoubleArray(Double[] array){  double[] result=new double[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i];  }  return result;}  }
class C{  public static String replaceNotEscaped(String s,String old,String replacement){  s=s.replace(ESCAPE_CHARACTER + old,TEMP_REPLACEMENT);  s=s.replace(old,replacement);  s=s.replace(TEMP_REPLACEMENT,old);  return s;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected void addTransitionPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Reaction_transition_feature"),getString("_UI_PropertyDescriptor_description","_UI_Reaction_transition_feature","_UI_Reaction_type"),SexecPackage.Literals.REACTION__TRANSITION,true,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  public static Optional<QualifiedName> toStaticPolyfillFQN(QualifiedName name){  if (name != null && name.getSegmentCount() > 0 && !MODULE_POLYFILL_SEGMENT.equals(name.getSegment(0))) {    return Optional.of(prepend(MODULE_POLYFILL_SEGMENT,name));  } else   return Optional.empty();}  }
class C{  public ScreenRelativeAnnotation(String text,double xFraction,double yFraction){  super(text,DUMMY_POINT);  this.init(xFraction,yFraction);}  }
class C{  private List<SearchHit> limitList(int limit,List<SearchHit> hitList){  if (LOG.isDebugEnabled()) {    LOG.debug("Reducing elastic search result list of size:\t" + hitList.size() + " to "+ limit+ " elements");  }  SearchHit[] limitedHits=new SearchHit[limit];  System.arraycopy(hitList.toArray(new SearchHit[hitList.size()]),0,limitedHits,0,limit);  return Arrays.asList(limitedHits);}  }
class C{  protected final int unknownFieldDataHashCode(){  return (unknownFieldData == null || unknownFieldData.isEmpty() ? 0 : unknownFieldData.hashCode());}  }
class C{  public <T extends Solution>Population(T[] solutions){  this(Arrays.asList(solutions));}  }
class C{  private void mark(){  theLastColumn=theCurrentColumn;  theLastLine=theCurrentLine;}  }
class C{  public void removeSelectionListener(SelectionListener l){  if (listeners != null) {    listeners.remove(l);  }}  }
class C{  private State applyPatch(State startState,State patchState){  if (patchState.taskState != null) {    if (patchState.taskState.stage != startState.taskState.stage || patchState.taskState.subStage != startState.taskState.subStage) {      ServiceUtils.logInfo(this,"Moving to stage %s:%s",patchState.taskState.stage,patchState.taskState.subStage);    }  }  PatchUtils.patchState(startState,patchState);  return startState;}  }
class C{  public static String formatCSV(String... values){  return formatCSV(Arrays.asList(values));}  }
class C{  public static String convertCharset(String source,String srcCharsetName,String newCharsetName){  if (srcCharsetName.equals(newCharsetName)) {    return source;  }  try {    return new String(source.getBytes(srcCharsetName),newCharsetName);  } catch (  UnsupportedEncodingException unex) {    throw new IllegalArgumentException(unex);  }}  }
class C{  public void clearValores(){  valores.clear();}  }
class C{  public MPreference(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node emNode;  Node nsNode;  String nsName;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("em");  emNode=elementList.item(1);  nsNode=emNode.getNextSibling();  nsName=nsNode.getNodeName();  assertEquals("whitespace","#text",nsName);}  }
class C{  public boolean isRemoteLdapActive(){  return dataContainer.isRemoteLdapActive();}  }
class C{  public synchronized void showExpandableErrorsDialog(String message,String content,Collection<String> errors){  Platform.runLater(null);}  }
class C{  void releaseLocks(final boolean waiting){  if (INFO)   log.info("Releasing locks");  final Thread t=Thread.currentThread();  try {    final Collection<ResourceQueue<R,Thread>> resources=lockedResources.remove(t);    if (resources == null) {      if (INFO)       log.info("No locks: " + t);      return;    }    if (INFO)     log.info("Releasing resource locks: resources=" + resources);    final Iterator<ResourceQueue<R,Thread>> itr=resources.iterator();    while (itr.hasNext()) {      final ResourceQueue<R,Thread> resourceQueue=itr.next();      final R resource=resourceQueue.getResource();      if (!resourceQueues.containsKey(resource)) {        throw new IllegalStateException("No queue for resource: " + resource);      }      try {        resourceQueue.unlock(t);      } catch (      Throwable ex) {        log.warn("Could not release lock",ex);        continue;      }      if (INFO)       log.info("Released lock: " + resource);    }    if (INFO)     log.info("Released resource locks: resources=" + resources);  } catch (  Throwable ex) {    log.error("Could not release locks: " + ex,ex);  } finally {    if (waitsFor != null) {      waitsFor.releaseVertex(t);    }  }}  }
class C{  public EdgeSwitch(String name,int level,NetworkDatacenter dc){  super(name,level,dc);  hostlist=new HashMap<Integer,NetworkHost>();  uplinkswitchpktlist=new HashMap<Integer,List<NetworkPacket>>();  packetTohost=new HashMap<Integer,List<NetworkPacket>>();  uplinkbandwidth=NetworkConstants.BandWidthEdgeAgg;  downlinkbandwidth=NetworkConstants.BandWidthEdgeHost;  switching_delay=NetworkConstants.SwitchingDelayEdge;  numport=NetworkConstants.EdgeSwitchPort;  uplinkswitches=new ArrayList<Switch>();}  }
class C{  public ServiceChangedException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public static IResource handleToResource(final String project,final String handle){  final IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();  if ("".equals(handle))   return null;  final IPath path=Path.fromPortableString(handle);  if (path == null)   return null;  if (project != null && !"".equals(project) && !path.isAbsolute())   return root.getProject(project).findMember(path);  return root.findMember(path);}  }
class C{  public Comparable findMin(){  if (isEmpty())   return null;  RedBlackNode itr=header.right;  while (itr.left != nullNode)   itr=itr.left;  return itr.element;}  }
class C{  public FileEntry createFile(String name,InputStream content,String mediaType) throws ForbiddenException, ConflictException, ServerException {  if (isRoot(getVirtualFile())) {    throw new ForbiddenException("Can't create file in root folder.");  }  return new FileEntry(getWorkspace(),getVirtualFile().createFile(name,mediaType,content));}  }
class C{  public boolean verifySignature(byte[] message,BigInteger r,BigInteger s){  DSAParameters params=key.getParameters();  BigInteger q=params.getQ();  BigInteger m=calculateE(q,message);  BigInteger zero=BigInteger.valueOf(0);  if (zero.compareTo(r) >= 0 || q.compareTo(r) <= 0) {    return false;  }  if (zero.compareTo(s) >= 0 || q.compareTo(s) <= 0) {    return false;  }  BigInteger w=s.modInverse(q);  BigInteger u1=m.multiply(w).mod(q);  BigInteger u2=r.multiply(w).mod(q);  BigInteger p=params.getP();  u1=params.getG().modPow(u1,p);  u2=((DSAPublicKeyParameters)key).getY().modPow(u2,p);  BigInteger v=u1.multiply(u2).mod(p).mod(q);  return v.equals(r);}  }
class C{  public boolean isAdFlag(){  Object oo=get_Value(COLUMNNAME_IsAdFlag);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isReadOnly(){  return ((ArffSortedTableModel)getModel()).isReadOnly();}  }
class C{  public boolean isWriteAllowed(CnATreeElement cte){  try {    ServiceFactory.lookupAuthService();    if (!ServiceFactory.isPermissionHandlingNeeded()) {      return true;    }    if (AuthenticationHelper.getInstance().currentUserHasRole(new String[]{ApplicationRoles.ROLE_ADMIN})) {      return true;    }    if (roles == null) {      LoadCurrentUserConfiguration lcuc=new LoadCurrentUserConfiguration();      lcuc=getCommandService().executeCommand(lcuc);      Configuration c=lcuc.getConfiguration();      if (c == null) {        return false;      }      roles=c.getRoles();    }    CnATreeElement elemntWithPermissions=Retriever.checkRetrievePermissions(cte);    for (    Permission p : elemntWithPermissions.getPermissions()) {      if (p.isWriteAllowed() && roles.contains(p.getRole())) {        return true;      }    }  } catch (  Exception e) {    log.error("Error while checking write permission.",e);  }  return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.789 -0500",hash_original_method="BC1E149DEA4318AACD21177389BEB192",hash_generated_method="CF86A7FDA40E49DE5A97A206A4212FEB") public boolean selectNewsgroup(String newsgroup,NewsgroupInfo info) throws IOException {  if (!NNTPReply.isPositiveCompletion(group(newsgroup)))   return false;  if (info != null)   __parseGroupReply(getReplyString(),info);  return true;}  }
class C{  public void remove(int i){  individuals.remove(i);}  }
class C{  public BigDecimal convertYardToSquareMeters(final Float vacantLandArea){  Float areaInSqMts=null;  areaInSqMts=new Float(vacantLandArea) * new Float(SQUARE_YARD_TO_SQUARE_METER_VALUE);  return new BigDecimal(areaInSqMts).setScale(2,BigDecimal.ROUND_HALF_UP);}  }
class C{  @Deprecated public Time(int hour,int minute,int second){  super(70,0,1,hour,minute,second);}  }
class C{  public static int size(float[] array){  return Array.getLength(array);}  }
class C{  public static void skipSpace(Reader in) throws IOException {  while ((c >= 0) && ((c == ' ') || (c == '\t') || (c == '\n')|| (c == '\r'))) {    c=in.read();  }}  }
class C{  void ensure(int n){  int curlen=instruction.length;  if (lenInstruction + n >= curlen) {    while (lenInstruction + n >= curlen) {      curlen*=2;    }    char[] newInstruction=new char[curlen];    System.arraycopy(instruction,0,newInstruction,0,lenInstruction);    instruction=newInstruction;  }}  }
class C{  public void notifyDataInvalidatedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onInvalidated();    }  }}  }
class C{  private static Consumer<Type> closureCacheRemover(Types types){  try {    Field closureCache=Types.class.getDeclaredField("closureCache");    closureCache.setAccessible(true);    Map<Type,com.sun.tools.javac.util.List<Type>> value=(Map<Type,com.sun.tools.javac.util.List<Type>>)closureCache.get(types);    return null;  } catch (  IllegalAccessException|NoSuchFieldException e) {    throw new RuntimeException(e);  }}  }
class C{  public synchronized short removeExt(EntityManager em,Object obj){  try {    if (em != null) {      em.remove(obj);    } else {      return 0;    }  } catch (  Exception Ex) {    return 0;  }  return 1;}  }
class C{  public void notifyUnRegistration(RcsServiceRegistration.ReasonCode reasonCode){synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.broadcastServiceUnRegistered(reasonCode);  }}  }
class C{  public static MCashBook loadCashBook(Properties ctx,int cashBookId,String trxName) throws OperationException {  MCashBook cashBook=new MCashBook(ctx,cashBookId,trxName);  if (cashBook.get_ID() <= 0) {    throw new OperationException("Could not load cash book with id: " + cashBookId);  }  return cashBook;}  }
class C{  public String generateEugeneFile(ArrayList<Gate> gates,String filename,PartLibrary part_library,Args options){  if (options.is_eugene_scars()) {    part_library.set_scars();  }  String eug="";  HashSet<String> part_type_set=new HashSet<String>();  HashSet<String> part_set=new HashSet<String>();  HashMap<String,ArrayList<Part>> txn_units=new HashMap<>();  for (  Gate g : gates) {    if (g.Regulator == null || g.Regulator.isEmpty()) {      g.Regulator=g.Name;    }    for (int i=0; i < g.get_txn_units().size(); ++i) {      String key="";      if (!txn_units.containsKey(g.Regulator)) {        key=g.Regulator;      } else {        key=g.Regulator + "_" + (i + 1);      }      txn_units.put(key,g.get_txn_units().get(i));    }  }  for (  ArrayList<Part> txn_unit : txn_units.values()) {    if (options.is_eugene_dnaseq()) {      for (      Part p : txn_unit) {        part_type_set.add(p.get_type());        part_set.add(p.get_type() + " " + p.get_name()+ "(.SEQUENCE(\""+ p.get_seq()+ "\"));\n");      }    } else {      for (      Part p : txn_unit) {        part_type_set.add(p.get_type());        part_set.add(p.get_type() + " " + p.get_name()+ ";\n");      }    }  }  ArrayList<Part> scars=new ArrayList<Part>();  if (options.is_eugene_scars()) {    part_type_set.add("scar");    for (int i=0; i < txn_units.size(); ++i) {      scars.add(part_library.get_scars().get(i));    }    scars.add(part_library.get_scars().get(part_library.get_scars().size() - 1));    for (    Part p : scars) {      if (options.is_eugene_dnaseq()) {        part_set.add(p.get_type() + " " + p.get_name()+ "(.SEQUENCE(\""+ p.get_seq()+ "\"));\n");      } else {        part_set.add(p.get_type() + " " + p.get_name()+ ";\n");      }    }  }  for (  String part_type : part_type_set) {    eug+="PartType " + part_type + ";\n";  }  eug+="\n";  ArrayList<String> parts=new ArrayList<String>();  for (  String p : part_set) {    parts.add(p);  }  Collections.sort(parts);  for (  String p : parts) {    eug+=p;  }  eug+="\n";  for (  String regulator : txn_units.keySet()) {    ArrayList<Part> txn_unit=txn_units.get(regulator);    eug+="Device " + regulator + "_device"+ "(\n";    int gi=0;    for (    Part p : txn_unit) {      if (gi != 0) {        eug+=",\n";      }      if (p.get_type().equals("promoter")) {        eug+="   " + p.get_type();      } else {        eug+="   " + p.get_name();      }      gi++;    }    eug+="\n);\n";  }  eug+="\n";  for (  String regulator : txn_units.keySet()) {    ArrayList<Part> txn_unit=txn_units.get(regulator);    ArrayList<String> names_in_this_device=new ArrayList<String>();    for (    Part p : txn_unit) {      names_in_this_device.add(p.get_name());    }    eug+="Rule " + regulator + "_rules "+ "( ON "+ regulator+ "_device"+ ":\n";    int pcount=0;    for (    Part p : txn_unit) {      if (p.get_type().equals("promoter")) {        if (pcount == 0) {          eug+="   CONTAINS " + p.get_name();          pcount++;        } else {          eug+=" AND \n   CONTAINS " + p.get_name();          pcount++;        }      }    }    eug+=insertRulesFromUCF(names_in_this_device,get_eugene_part_rules());    eug+=" AND\n   ALL_FORWARD\n);\n";  }  eug+="\n\n";  for (  String regulator : txn_units.keySet()) {    eug+=String.format("%-15s",regulator + "_devices") + " = product(" + regulator+ "_device"+ ");\n";  }  eug+="\n";  ArrayList<String> names_in_circuit_device=new ArrayList<String>();  for (  String regulator : txn_units.keySet()) {    eug+="Device " + "gate_" + regulator + "();"+ "\n";    names_in_circuit_device.add("gate_" + regulator);  }  eug+="\n";  eug+="Device circuit();\n\n";  eug+="Rule allRules( ON circuit:\n";  int gi=0;  for (  String regulator : txn_units.keySet()) {    if (gi == 0) {      eug+="   " + String.format("%-12s","gate_" + regulator) + " EXACTLY 1";    } else {      eug+=" AND \n" + "   " + String.format("%-12s","gate_" + regulator) + " EXACTLY 1";    }    gi++;  }  eug+=insertRulesFromUCF(names_in_circuit_device,get_eugene_gate_rules());  if (options.is_eugene_scars()) {    for (    Part scar : scars) {      eug+=" AND \n" + "   " + String.format("%-12s",scar.get_name()) + " EXACTLY 1";    }    for (    Part scar : scars) {      eug+=" AND \n" + "   FORWARD " + scar.get_name();    }    for (int i=0; i < scars.size(); ++i) {      eug+=" AND \n" + "   [" + (i * 2) + "] EQUALS "+ scars.get(i).get_name();    }  }  eug+="\n);";  eug+="\n\n";  eug+="Array allResults;\n\n";  int tu_counter=0;  for (  String regulator : txn_units.keySet()) {    tu_counter++;    String index="i" + Integer.toString(tu_counter);    eug+="for(num " + index + "=0;  "+ String.format("%-28s",index + "<sizeof(" + regulator+ "_devices);")+ index+ "="+ index+ "+1) {\n";  }  eug+="\n";  tu_counter=0;  for (  String regulator : txn_units.keySet()) {    tu_counter++;    String index="i" + Integer.toString(tu_counter);    eug+=String.format("%-12s","gate_" + regulator) + " = " + regulator+ "_devices["+ index+ "];\n";  }  eug+="\n";  gi=0;  eug+="Device circuit(\n";  for (  String regulator : txn_units.keySet()) {    if (gi == 0) {      eug+="   " + "gate_" + regulator;      gi++;    } else {      eug+=",\n   " + "gate_" + regulator;    }  }  if (options.is_eugene_scars()) {    for (    Part scar : scars) {      eug+=",\n   " + scar.get_name();    }  }  eug+="\n);\n";  eug+="\n";  eug+="result = permute(circuit);\n\n";  eug+="allResults = allResults + result;\n\n";  for (int i=0; i < txn_units.size(); ++i) {    eug+="}\n";  }  logger.info(eug);  Util.fileWriter(options.get_output_directory() + filename,eug,false);  return eug;}  }
class C{  public void accept(Delivery delivery) throws IOException {  accept(delivery,this.session,true);}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == TypeDefiningElement.class) {switch (derivedFeatureID) {case N4JSPackage.FUNCTION_DEFINITION__DEFINED_TYPE:      return N4JSPackage.TYPE_DEFINING_ELEMENT__DEFINED_TYPE;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public static void loadProfile(List<String> json_profiles) throws LangDetectException {  int index=0;  int langsize=json_profiles.size();  if (langsize < 2)   throw new LangDetectException(ErrorCode.NeedLoadProfileError,"Need more than 2 profiles");  for (  String json : json_profiles) {    try {      LangProfile profile=JSON.decode(json,LangProfile.class);      addProfile(profile,index,langsize);      ++index;    } catch (    JSONException e) {      throw new LangDetectException(ErrorCode.FormatError,"profile format error");    }  }}  }
class C{  private static boolean existsAsFile(Resource resource){  try {    resource.getFile();    return true;  } catch (  Exception e) {  }  return false;}  }
class C{  public boolean writeToURI(Node nodeArg,String uri) throws LSException {  if (nodeArg == null) {    return false;  }  Serializer serializer=fXMLSerializer;  serializer.reset();  if (nodeArg != fVisitedNode) {    String xmlVersion=getXMLVersion(nodeArg);    fEncoding=getInputEncoding(nodeArg);    if (fEncoding == null) {      fEncoding=fEncoding != null ? fEncoding : getXMLEncoding(nodeArg) == null ? "UTF-8" : getXMLEncoding(nodeArg);    }    serializer.getOutputFormat().setProperty("version",xmlVersion);    fDOMConfigProperties.setProperty(DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.S_XML_VERSION,xmlVersion);    fDOMConfigProperties.setProperty(DOMConstants.S_XSL_OUTPUT_ENCODING,fEncoding);    if ((nodeArg.getNodeType() != Node.DOCUMENT_NODE || nodeArg.getNodeType() != Node.ELEMENT_NODE || nodeArg.getNodeType() != Node.ENTITY_NODE) && ((fFeatures & XMLDECL) != 0)) {      fDOMConfigProperties.setProperty(DOMConstants.S_XSL_OUTPUT_OMIT_XML_DECL,DOMConstants.DOM3_DEFAULT_FALSE);    }    fVisitedNode=nodeArg;  }  fXMLSerializer.setOutputFormat(fDOMConfigProperties);  try {    if (uri == null) {      String msg=Utils.messages.createMessage(MsgKey.ER_NO_OUTPUT_SPECIFIED,null);      if (fDOMErrorHandler != null) {        fDOMErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_NO_OUTPUT_SPECIFIED));      }      throw new LSException(LSException.SERIALIZE_ERR,msg);    } else {      String absoluteURI=SystemIDResolver.getAbsoluteURI(uri);      URL url=new URL(absoluteURI);      OutputStream urlOutStream=null;      String protocol=url.getProtocol();      String host=url.getHost();      if (protocol.equalsIgnoreCase("file") && (host == null || host.length() == 0 || host.equals("localhost"))) {        urlOutStream=new FileOutputStream(getPathWithoutEscapes(url.getPath()));      } else {        URLConnection urlCon=url.openConnection();        urlCon.setDoInput(false);        urlCon.setDoOutput(true);        urlCon.setUseCaches(false);        urlCon.setAllowUserInteraction(false);        if (urlCon instanceof HttpURLConnection) {          HttpURLConnection httpCon=(HttpURLConnection)urlCon;          httpCon.setRequestMethod("PUT");        }        urlOutStream=urlCon.getOutputStream();      }      serializer.setOutputStream(urlOutStream);    }    if (fDOMSerializer == null) {      fDOMSerializer=(DOM3Serializer)serializer.asDOM3Serializer();    }    if (fDOMErrorHandler != null) {      fDOMSerializer.setErrorHandler(fDOMErrorHandler);    }    if (fSerializerFilter != null) {      fDOMSerializer.setNodeFilter(fSerializerFilter);    }    fDOMSerializer.setNewLine(fEndOfLine.toCharArray());    fDOMSerializer.serializeDOM3(nodeArg);  } catch (  LSException lse) {    throw lse;  }catch (  RuntimeException e) {    throw (LSException)createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();  }catch (  Exception e) {    if (fDOMErrorHandler != null) {      fDOMErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,e.getMessage(),null,e));    }    throw (LSException)createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();  }  return true;}  }
class C{  XSLTAttributeDef(String namespace,String name,int type,boolean supportsAVT,int errorType,String defaultVal){  this.m_namespace=namespace;  this.m_name=name;  this.m_type=type;  this.m_required=false;  this.m_supportsAVT=supportsAVT;  this.m_errorType=errorType;  this.m_default=defaultVal;}  }
class C{  public double length(){  return Math.sqrt(lengthSquared());}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_CONSTANT_DECLARATION_2__VALUE_1:    setValue_1(VALUE_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  @Override public boolean removeRef(Object obj) throws IOException {  if (_isUnshared) {    return false;  } else   if (_refs != null) {    _refs.remove(obj);    return true;  } else   return false;}  }
class C{  public static void sort(byte[] array){  DualPivotQuicksort.sort(array);}  }
class C{  public static Operand operand(final Expression inner){  return new Operand(inner);}  }
class C{  public SelectableMultiPoint(int x,int y){  super(x,y);}  }
class C{  public WhitespaceTokenizer(){}  }
class C{  public JSONWriter(Writer w){  this.comma=false;  this.mode='i';  this.stack=new JSONObject[maxdepth];  this.top=0;  this.writer=w;}  }
class C{  public static int reverseByteOrder(long value){  int reverseValue=0x00000000;  reverseValue|=value << 24 & 0xFF000000;  reverseValue|=value << 8 & 0xFF0000;  reverseValue|=value >> 8 & 0xFF00;  reverseValue|=value >> 24 & 0xFF;  return reverseValue;}  }
class C{  public void emitDirect(int taskId,List<Object> tuple,Object messageId){  emitDirect(taskId,Utils.DEFAULT_STREAM_ID,tuple,messageId);}  }
class C{  public CsvExportColumnImpl(final String columnHeader,final String fieldType,final String name,final String valueRegEx,final String lookupQuery){  super();  this.columnHeader=columnHeader;  this.fieldType=fieldType;  this.name=name;  this.valueRegEx=valueRegEx;  this.lookupQuery=lookupQuery;}  }
class C{  public static String serializeObject(Serializable o) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ObjectOutputStream oos=new ObjectOutputStream(baos);  oos.writeObject(o);  oos.close();  return Base64.getEncoder().encodeToString(baos.toByteArray());}  }
class C{  public WriteRequest(final int objectId,final int objectInstanceId,final int resourceId,Date value){  this(ContentFormat.TLV,objectId,objectInstanceId,resourceId,value);}  }
class C{  public void dump(Printer pw,String prefix){  pw.println(prefix + "exceptionClassName: " + exceptionClassName);  pw.println(prefix + "exceptionMessage: " + exceptionMessage);  pw.println(prefix + "throwFileName: " + throwFileName);  pw.println(prefix + "throwClassName: " + throwClassName);  pw.println(prefix + "throwMethodName: " + throwMethodName);  pw.println(prefix + "throwLineNumber: " + throwLineNumber);  pw.println(prefix + "stackTrace: " + stackTrace);}  }
class C{  public void add(Boolean value){  if (value == null) {    addNull();  } else {    _add(booleanNode(value.booleanValue()));  }}  }
class C{  @Override protected void createCandidates(Response response){  createRelayedCandidate(response);  super.createCandidates(response);}  }
class C{  private List<byte[]> readDictionaryFile(long dictionaryStartOffset,long dictionaryEndOffset) throws IOException {  CarbonDictionaryReaderImpl dictionaryReader=new CarbonDictionaryReaderImpl(this.carbonStorePath,this.carbonTableIdentifier,this.columnIdentifier);  List<byte[]> dictionaryValues=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  try {    if (0 == dictionaryEndOffset) {      dictionaryValues=dictionaryReader.read(dictionaryStartOffset);    } else {      dictionaryValues=dictionaryReader.read(dictionaryStartOffset,dictionaryEndOffset);    }  }  finally {    dictionaryReader.close();  }  return dictionaryValues;}  }
class C{  public boolean isCodeAttribute(){  return false;}  }
class C{  public void clearAllAnimation(){  if (animList != null)   animList.clear();}  }
class C{  private ConditionMatch evaluateBoolCondition(boolean outcome){  if (log.isTraceEnabled()) {    log.trace("outcome " + outcome);  }  if (operator == OPERATOR_NOT_EQUAL) {    log.debug("not equal operator in use");    return !outcome ? new ConditionMatch() : null;  }  return outcome ? new ConditionMatch() : null;}  }
class C{  public GlossCache(int capacity){  super(capacity + 1,1.1f,true);  this.capacity=capacity;}  }
class C{  @Override public void handleStart(Operation start){  ServiceUtils.logInfo(this,"Starting service");  State startState=start.getBody(State.class);  InitializationUtils.initialize(startState);  if (null == startState.taskPollDelay) {    startState.taskPollDelay=HostUtils.getDeployerContext(this).getTaskPollDelay();  }  validateStartState(startState);  if (TaskState.TaskStage.CREATED == startState.taskState.stage) {    startState.taskState.stage=TaskState.TaskStage.STARTED;    startState.taskState.subStage=TaskState.SubStage.CREATE_CONTAINER_TEMPLATES;  }  if (startState.documentExpirationTimeMicros <= 0) {    startState.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(ServiceUtils.DEFAULT_DOC_EXPIRATION_TIME_MICROS);  }  start.setBody(startState).complete();  try {    if (ControlFlags.isOperationProcessingDisabled(startState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping start operation processing (disabled)");    } else     if (TaskState.TaskStage.STARTED == startState.taskState.stage) {      sendStageProgressPatch(startState.taskState);    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  @Override public Block makeBlock(final byte[] payloadBytes,final int offset,final int length) throws ProtocolException {  return new Block(params,payloadBytes,offset,this,length);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case ImPackage.STRING_LITERAL_FOR_STE___GET_VALUE_AS_STRING:    return getValueAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  public boolean startDrag(int position,int deltaX,int deltaY){  int dragFlags=0;  if (mSortEnabled && !mIsRemoving) {    dragFlags|=DragSortListView.DRAG_POS_Y | DragSortListView.DRAG_NEG_Y;  }  if (mRemoveEnabled && mIsRemoving) {    dragFlags|=DragSortListView.DRAG_POS_X;    dragFlags|=DragSortListView.DRAG_NEG_X;  }  mDragging=mDslv.startDrag(position - mDslv.getHeaderViewsCount(),dragFlags,deltaX,deltaY);  return mDragging;}  }
class C{  public static String addLuhnDigit(String number){  char[] digits={'1','2','3','4','5','6','7','8','9','0'};  int c=number.length();  StringBuffer tryNumber=new StringBuffer(number + digits[0]);  int i;  for (i=0; i < 10; i++) {    tryNumber.setCharAt(c,digits[i]);    if (luhnCheck(tryNumber.toString()))     break;  }  return tryNumber.toString();}  }
class C{  private String convert23UserTo30(String userName23) throws DomainListException {  return userName23 + "@" + domainList.getDefaultDomain();}  }
class C{  protected EnumLiteralPropertyAttributeImpl(){  super();}  }
class C{  public Key min(){  if (isEmpty())   throw new NoSuchElementException("called min() with empty symbol table");  return st.firstKey();}  }
class C{  public float screenX(float x,float y,float z){  return g.screenX(x,y,z);}  }
class C{  public List<ExportGroupRestRep> findByName(String name,URI projectId,URI varrayId){  return search().byName(name).filter(new ExportFilter(projectId,varrayId)).run();}  }
class C{  protected int moveOrCopyFiles(boolean move,String what,File[] destFiles,File[] sourceFiles){  int opCode=(move) ? OP_MOVE : OP_COPY;  mModifiedSrcFiles=(move) ? new ArrayList<String>() : null;  mModifiedDestFiles=new ArrayList<String>();  openLogfile();  onPreProcess(what,null,null,opCode);  int itemCount=0;  int pos=0;  int fileCount=destFiles.length;  while (pos < fileCount) {    File sourceFile=sourceFiles[pos];    File destFile=destFiles[pos];    File destRenamed=renameDuplicate(destFile);    if (osFileMoveOrCopy(move,destRenamed,sourceFile))     itemCount++;    log(((move) ? "MOVE /y " : "COPY /y "),getFilenameForLog(sourceFile)," ",getFilenameForLog(destRenamed));    File sourceSidecar=getSidecar(sourceFile);    if (osFileExists(sourceSidecar)) {      File destSidecar=getSidecar(destRenamed);      if (osFileMoveOrCopy(move,destSidecar,sourceSidecar))       itemCount++;      log(((move) ? "MOVE /y " : "COPY /y "),getFilenameForLog(sourceSidecar)," ",getFilenameForLog(destSidecar));    }    pos++;  }  int modifyCount=mModifiedDestFiles.size();  String[] modifiedSourceFiles=((mModifiedSrcFiles != null) && (mModifiedSrcFiles.size() > 0)) ? mModifiedSrcFiles.toArray(new String[modifyCount]) : null;  onPostProcess(what,modifiedSourceFiles,(modifyCount > 0) ? mModifiedDestFiles.toArray(new String[modifyCount]) : null,itemCount,sourceFiles.length,opCode);  closeLogFile();  return itemCount;}  }
class C{  private void stopTracking(int reason){  unbindAll();  updateDatabase();  for (int i=mClients.size() - 1; i >= 0; i--) {    try {      mClients.get(i).send(Message.obtain(null,RadioBeacon.MSG_SERVICE_SHUTDOWN,reason,0));    } catch (    RemoteException e) {      mClients.remove(i);    }  }  hideNotification();}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == Type.class) {switch (baseOperationID) {case TypesPackage.TYPE___IS_POLYFILL:      return TypesPackage.TCLASS___IS_POLYFILL;case TypesPackage.TYPE___IS_STATIC_POLYFILL:    return TypesPackage.TCLASS___IS_STATIC_POLYFILL;case TypesPackage.TYPE___IS_FINAL:  return TypesPackage.TCLASS___IS_FINAL;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TClassifier.class) {switch (baseOperationID) {case TypesPackage.TCLASSIFIER___IS_ABSTRACT:return TypesPackage.TCLASS___IS_ABSTRACT;case TypesPackage.TCLASSIFIER___GET_SUPER_CLASSIFIER_REFS:return TypesPackage.TCLASS___GET_SUPER_CLASSIFIER_REFS;case TypesPackage.TCLASSIFIER___GET_IMPLEMENTED_OR_EXTENDED_INTERFACE_REFS:return TypesPackage.TCLASS___GET_IMPLEMENTED_OR_EXTENDED_INTERFACE_REFS;case TypesPackage.TCLASSIFIER___IS_FINAL:return TypesPackage.TCLASS___IS_FINAL;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void sendTrackballEventSync(MotionEvent event){  validateNotAppThread();  if ((event.getSource() & InputDevice.SOURCE_CLASS_TRACKBALL) == 0) {    event.setSource(InputDevice.SOURCE_TRACKBALL);  }  InputManager.getInstance().injectInputEvent(event,InputManager.INJECT_INPUT_EVENT_MODE_WAIT_FOR_FINISH);}  }
class C{  public boolean interactiveLogon(final URI targetUri,final boolean requestCompactToken){  BaseSecureStore.validateTargetUri(targetUri);  Trace.writeLine("VsoAadAuthentication::interactiveLogon");  TokenPair tokens;  if ((tokens=this.VsoAuthority.acquireToken(targetUri,this.ClientId,this.Resource,RedirectUri,(String)null)) != null) {    Trace.writeLine("   token acquisition succeeded.");    this.storeRefreshToken(targetUri,tokens.RefreshToken);    return this.generatePersonalAccessToken(targetUri,tokens.AccessToken,requestCompactToken);  }  Trace.writeLine("   interactive logon failed");  return false;}  }
class C{  final private String attrDef2AttrDesc(Attributes attrs) throws NamingException {  StringBuffer attrDesc=new StringBuffer("( ");  Attribute attr=null;  int count=0;  attr=attrs.get(NUMERICOID_ID);  if (attr != null) {    attrDesc.append(writeNumericOID(attr));    count++;  } else {    throw new ConfigurationException("Attribute type doesn't" + "have a numeric OID");  }  attr=attrs.get(NAME_ID);  if (attr != null) {    attrDesc.append(writeQDescrs(attr));    count++;  }  attr=attrs.get(DESC_ID);  if (attr != null) {    attrDesc.append(writeQDString(attr));    count++;  }  attr=attrs.get(OBSOLETE_ID);  if (attr != null) {    attrDesc.append(writeBoolean(attr));    count++;  }  attr=attrs.get(SUP_ID);  if (attr != null) {    attrDesc.append(writeWOID(attr));    count++;  }  attr=attrs.get(EQUALITY_ID);  if (attr != null) {    attrDesc.append(writeWOID(attr));    count++;  }  attr=attrs.get(ORDERING_ID);  if (attr != null) {    attrDesc.append(writeWOID(attr));    count++;  }  attr=attrs.get(SUBSTR_ID);  if (attr != null) {    attrDesc.append(writeWOID(attr));    count++;  }  attr=attrs.get(SYNTAX_ID);  if (attr != null) {    attrDesc.append(writeWOID(attr));    count++;  }  attr=attrs.get(SINGLE_VAL_ID);  if (attr != null) {    attrDesc.append(writeBoolean(attr));    count++;  }  attr=attrs.get(COLLECTIVE_ID);  if (attr != null) {    attrDesc.append(writeBoolean(attr));    count++;  }  attr=attrs.get(NO_USER_MOD_ID);  if (attr != null) {    attrDesc.append(writeBoolean(attr));    count++;  }  attr=attrs.get(USAGE_ID);  if (attr != null) {    attrDesc.append(writeQDString(attr));    count++;  }  if (count < attrs.size()) {    String attrId=null;    for (NamingEnumeration<? extends Attribute> ae=attrs.getAll(); ae.hasMoreElements(); ) {      attr=ae.next();      attrId=attr.getID();      if (attrId.equals(NUMERICOID_ID) || attrId.equals(NAME_ID) || attrId.equals(SYNTAX_ID)|| attrId.equals(DESC_ID)|| attrId.equals(SINGLE_VAL_ID)|| attrId.equals(EQUALITY_ID)|| attrId.equals(ORDERING_ID)|| attrId.equals(SUBSTR_ID)|| attrId.equals(NO_USER_MOD_ID)|| attrId.equals(USAGE_ID)|| attrId.equals(SUP_ID)|| attrId.equals(COLLECTIVE_ID)|| attrId.equals(OBSOLETE_ID)) {        continue;      } else {        attrDesc.append(writeQDStrings(attr));      }    }  }  attrDesc.append(")");  return attrDesc.toString();}  }
class C{  protected <T>List<List<T>> trivialPartition(List<T> objects,int minEntries,int maxEntries){  final int size=objects.size();  final int numberPartitions=(int)Math.ceil(((double)size) / maxEntries);  List<List<T>> partitions=new ArrayList<>(numberPartitions);  int start=0;  for (int pnum=0; pnum < numberPartitions; pnum++) {    int end=(int)((pnum + 1.) * size / numberPartitions);    if (pnum == numberPartitions - 1) {      end=size;    }    assert ((end - start) >= minEntries && (end - start) <= maxEntries);    partitions.add(objects.subList(start,end));    start=end;  }  return partitions;}  }
class C{  @Override protected void onPostResume(){  super.onPostResume();  if (mRetryProviderInstall && Controller.getInstance().useProviderInstaller()) {    ProviderInstaller.installIfNeededAsync(this,this);  }  mRetryProviderInstall=false;}  }
class C{  public void displayState(){  updateSize();  boolean foundActive=false;  for (int i=0; i < entries.size(); i++) {    Entry e=entries.get(i);    int state=e.namedSensor.getBean().getKnownState();switch (state) {case Sensor.ACTIVE:      if (isText()) {        super.setText(Bundle.getMessage("SensorStateActive"));      }    if (isIcon()) {      super.setIcon(e.icon);    }  foundActive=true;displaying=i;break;case Sensor.UNKNOWN:if (isText()) {super.setText(Bundle.getMessage("BeanStateUnknown"));}if (isIcon()) {super.setIcon(unknown);}return;case Sensor.INCONSISTENT:if (isText()) {super.setText(Bundle.getMessage("BeanStateInconsistent"));}if (isIcon()) {super.setIcon(inconsistent);}break;default :break;}}if (foundActive) {return;}if (isText()) {super.setText(Bundle.getMessage("SensorStateInactive"));}if (isIcon()) {super.setIcon(inactive);}return;}  }
class C{  public boolean hasParent(){  return parts.size() > 1;}  }
class C{  protected void sequence_AnnotatedN4MemberDeclaration_BogusTypeRefFragment_ColonSepTypeRef_GetterHeader(ISerializationContext context,N4GetterDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private boolean shouldBeCaptureConverted(final AnnotatedTypeMirror typeArg,final AnnotatedTypeParameterBounds bounds){  return typeArg.getKind() == TypeKind.WILDCARD && bounds.getUpperBound().getKind() == TypeKind.WILDCARD;}  }
class C{  private void loadDetailFromCourseOffering(InstructionalOfferingConfigEditForm frm,Long courseOfferingId,boolean init,boolean loadDefaultConfig) throws Exception {  if (courseOfferingId == null)   throw new Exception("Course Offering Id need for operation. ");  CourseOfferingDAO coDao=new CourseOfferingDAO();  CourseOffering co=coDao.get(courseOfferingId);  if (co == null)   throw new Exception("Course Offering not found for id: " + courseOfferingId);  InstructionalOffering io=co.getInstructionalOffering();  frm.setCourseOfferingId(co.getUniqueId().toString());  frm.setSubjectArea(co.getSubjectAreaAbbv());  frm.setCourseNumber(co.getCourseNbr());  frm.setInstrOfferingName(co.getCourseNameWithTitle());  frm.setInstrOfferingId(io.getUniqueId().toString());  frm.setNotOffered(io.isNotOffered());  frm.setDurationType(io.getSession().getDefaultClassDurationType() == null ? -1 : io.getSession().getDefaultClassDurationType().getUniqueId());  frm.setDurationTypeDefault(io.getSession().getDefaultClassDurationType() == null ? MSG.systemDefaultDurationType() : MSG.sessionDefault(io.getSession().getDefaultClassDurationType().getLabel()));  frm.setDurationTypeEditable(true);  frm.setInstructionalMethod(null);  Set configs=io.getInstrOfferingConfigs();  frm.setConfigCount(new Integer(configs.size()));  @SuppressWarnings("deprecation") String linkLookupClass=ApplicationProperty.CourseCatalogLinkProvider.value();  if (linkLookupClass != null && linkLookupClass.trim().length() > 0) {    ExternalLinkLookup lookup=(ExternalLinkLookup)(Class.forName(linkLookupClass).newInstance());    Map results=lookup.getLink(io);    if (results == null)     throw new Exception(lookup.getErrorMessage());    frm.setCatalogLinkLabel((String)results.get(ExternalLinkLookup.LINK_LABEL));    frm.setCatalogLinkLocation((String)results.get(ExternalLinkLookup.LINK_LOCATION));  }  if (loadDefaultConfig) {    if (configs == null || configs.size() == 0) {      frm.setConfigId(null);      frm.setName("1");    } else {      InstrOfferingConfig ioc=(InstrOfferingConfig)configs.iterator().next();      frm.setConfigId(ioc.getUniqueId());      if (init) {        frm.setName(ioc.getName());        frm.setUnlimited(ioc.isUnlimitedEnrollment());      }    }  } else {    if (frm.getName() == null || frm.getName().trim().length() == 0)     frm.setName(InstrOfferingConfig.getGeneratedName(io));  }}  }
class C{  @Override public String toString(){  return mediaType;}  }
class C{  public String toString(){  return "StraightLogic Rules";}  }
class C{  public void addRelatedTo(RelatedTo relatedTo){  addProperty(relatedTo);}  }
class C{  public boolean isNeedClientAuth(){  return needClientAuth;}  }
class C{  @Override public ArrayList<ArrayList<Region>> defineRegions(ArrayList<ChartSet> data){  ArrayList<ArrayList<Region>> result=new ArrayList<ArrayList<Region>>();  ArrayList<Region> regionSet;  float x;  float y;  for (  ChartSet set : data) {    regionSet=new ArrayList<Region>(set.size());    for (    ChartEntry e : set.getEntries()) {      x=e.getX();      y=e.getY();      regionSet.add(new Region((int)(x - sRegionRadius),(int)(y - sRegionRadius),(int)(x + sRegionRadius),(int)(y + sRegionRadius)));    }    result.add(regionSet);  }  return result;}  }
class C{  private boolean excludeResultNSDecl(String prefix,String uri) throws TransformerException {  if (null != m_excludeResultPrefixes) {    return containsExcludeResultPrefix(prefix,uri);  }  return false;}  }
class C{  private void updateButtonsState(ISelection selection){  if (selection.isEmpty()) {    removeButton.setEnabled(false);    duplicateButton.setEnabled(false);  } else {    removeButton.setEnabled(canEdit);    duplicateButton.setEnabled(canEdit);  }  addButton.setEnabled(canEdit);}  }
class C{  public RichText withSize(int size){  this.size=size;  return this;}  }
class C{  public boolean isSecure(Socket sock) throws IllegalArgumentException {  if (sock == null) {    throw new IllegalArgumentException("Socket may not be null.");  }  if (!(sock instanceof SSLSocket)) {    throw new IllegalArgumentException("Socket not created by this factory.");  }  if (sock.isClosed()) {    throw new IllegalArgumentException("Socket is closed.");  }  return true;}  }
class C{  @Override public void goingActive(){  setState((getState() & ~UNOCCUPIED) | OCCUPIED);  if (_warrant != null) {    ThreadingUtil.runOnLayout(null);  }  if (log.isDebugEnabled()) {    log.debug("Block \"" + getSystemName() + " went active, path= "+ _pathName+ ", state= "+ getState());  }}  }
class C{  public GeneralSubtrees(List<GeneralSubtree> subtrees){  this.subtrees=subtrees;}  }
class C{  public static void main(String[] args){  TestRunner.run(EIPModelTest.class);}  }
class C{  public final void transpose(Matrix3d m1){  if (this != m1) {    this.m00=m1.m00;    this.m01=m1.m10;    this.m02=m1.m20;    this.m10=m1.m01;    this.m11=m1.m11;    this.m12=m1.m21;    this.m20=m1.m02;    this.m21=m1.m12;    this.m22=m1.m22;  } else   this.transpose();}  }
class C{  public ModifiableSolrParams(SolrParams params){  vals=new LinkedHashMap<>();  if (params != null) {    this.add(params);  }}  }
class C{  public final void testValidateUppercaseNotAllowingSpacesFails(){  char[] allowedCharacters=new char[]{'-'};  LetterValidator characterValidator=new LetterValidator("foo",Case.UPPERCASE,false,allowedCharacters);  assertFalse(characterValidator.validate("Ab C-"));}  }
class C{  public static List<String> readLines(Reader input) throws IOException {  BufferedReader reader=toBufferedReader(input);  List<String> list=new ArrayList<String>();  String line=reader.readLine();  while (line != null) {    list.add(line);    line=reader.readLine();  }  return list;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double z;  int r, g, b;  int rOut, gOut, bOut;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  int E=Integer.parseInt(args[2]);  if (E < 20) {    E=20;  }  if (E > 235) {    E=235;  }  if (inputHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    int progress=0;    WhiteboxRaster input=new WhiteboxRaster(inputHeader,"r");    if (input.getDataScale() != WhiteboxRasterBase.DataScale.RGB) {      showFeedback("The input image should be of an RGB data scale.");      return;    }    int rows=input.getNumberRows();    int cols=input.getNumberColumns();    double noData=input.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setDataScale(WhiteboxRasterBase.DataScale.RGB);    double[] data;    long numPixels=0;    int r_l=Integer.MAX_VALUE;    int r_h=Integer.MIN_VALUE;    long r_e=0;    long rSqrTotal=0;    int g_l=Integer.MAX_VALUE;    int g_h=Integer.MIN_VALUE;    long g_e=0;    long gSqrTotal=0;    int b_l=Integer.MAX_VALUE;    int b_h=Integer.MIN_VALUE;    long b_e=0;    long bSqrTotal=0;    int L=0;    int H=255;    for (row=0; row < rows; row++) {      data=input.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          numPixels++;          r=((int)z & 0xFF);          g=(((int)z >> 8) & 0xFF);          b=(((int)z >> 16) & 0xFF);          if (r < r_l) {            r_l=r;          }          if (r > r_h) {            r_h=r;          }          r_e+=r;          rSqrTotal+=r * r;          if (g < g_l) {            g_l=g;          }          if (g > g_h) {            g_h=g;          }          g_e+=g;          gSqrTotal+=g * g;          if (b < b_l) {            b_l=b;          }          if (b > b_h) {            b_h=b;          }          b_e+=b;          bSqrTotal+=b * b;        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    r_e=r_e / numPixels;    g_e=g_e / numPixels;    b_e=b_e / numPixels;    double r_s=(double)rSqrTotal / numPixels;    double g_s=(double)gSqrTotal / numPixels;    double b_s=(double)bSqrTotal / numPixels;    double r_b=(r_h * r_h * (E - L) - r_s * (H - L) + r_l * r_l * (H - E)) / (2 * (r_h * (E - L) - r_e * (H - L) + r_l * (H - E)));    double r_a=(H - L) / ((r_h - r_l) * (r_h + r_l - 2 * r_b));    double r_c=L - r_a * ((r_l - r_b) * (r_l - r_b));    double g_b=(g_h * g_h * (E - L) - g_s * (H - L) + g_l * g_l * (H - E)) / (2 * (g_h * (E - L) - g_e * (H - L) + g_l * (H - E)));    double g_a=(H - L) / ((g_h - g_l) * (g_h + g_l - 2 * g_b));    double g_c=L - g_a * ((g_l - g_b) * (g_l - g_b));    double b_b=(b_h * b_h * (E - L) - b_s * (H - L) + b_l * b_l * (H - E)) / (2 * (b_h * (E - L) - b_e * (H - L) + b_l * (H - E)));    double b_a=(H - L) / ((b_h - b_l) * (b_h + b_l - 2 * b_b));    double b_c=L - b_a * ((b_l - b_b) * (b_l - b_b));    for (row=0; row < rows; row++) {      data=input.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          numPixels++;          r=((int)z & 0xFF);          g=(((int)z >> 8) & 0xFF);          b=(((int)z >> 16) & 0xFF);          rOut=(int)(r_a * ((r - r_b) * (r - r_b)) + r_c);          gOut=(int)(g_a * ((g - g_b) * (g - g_b)) + g_c);          bOut=(int)(b_a * ((b - b_b) * (b - b_b)) + b_c);          if (rOut > 255) {            rOut=255;          }          if (gOut > 255) {            gOut=255;          }          if (bOut > 255) {            bOut=255;          }          if (rOut < 0) {            rOut=0;          }          if (gOut < 0) {            gOut=0;          }          if (bOut < 0) {            bOut=0;          }          z=(double)((255 << 24) | (bOut << 16) | (gOut << 8)| rOut);          output.setValue(row,col,z);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    input.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void initialize(Thread t,int state,Object lockObj,Thread lockOwner,long blockedCount,long blockedTime,long waitedCount,long waitedTime,StackTraceElement[] stackTrace,MonitorInfo[] lockedMonitors,LockInfo[] lockedSynchronizers){  this.threadId=t.getId();  this.threadName=t.getName();  this.threadState=ManagementFactoryHelper.toThreadState(state);  this.suspended=ManagementFactoryHelper.isThreadSuspended(state);  this.inNative=ManagementFactoryHelper.isThreadRunningNative(state);  this.blockedCount=blockedCount;  this.blockedTime=blockedTime;  this.waitedCount=waitedCount;  this.waitedTime=waitedTime;  if (lockObj == null) {    this.lock=null;    this.lockName=null;  } else {    this.lock=new LockInfo(lockObj);    this.lockName=lock.getClassName() + '@' + Integer.toHexString(lock.getIdentityHashCode());  }  if (lockOwner == null) {    this.lockOwnerId=-1;    this.lockOwnerName=null;  } else {    this.lockOwnerId=lockOwner.getId();    this.lockOwnerName=lockOwner.getName();  }  if (stackTrace == null) {    this.stackTrace=NO_STACK_TRACE;  } else {    this.stackTrace=stackTrace;  }  this.lockedMonitors=lockedMonitors;  this.lockedSynchronizers=lockedSynchronizers;}  }
class C{  protected void fireFigureHandlesChanged(){  Rectangle2D.Double changedArea=getDrawingArea();  if (listenerList.getListenerCount() > 0) {    FigureEvent event=null;    Object[] listeners=listenerList.getListenerList();    for (int i=listeners.length - 2; i >= 0; i-=2) {      if (listeners[i] == FigureListener.class) {        if (event == null) {          event=new FigureEvent(this,changedArea);        }        ((FigureListener)listeners[i + 1]).figureHandlesChanged(event);      }    }  }}  }
class C{  public Assignment removePrimes(){  Assignment a=new Assignment();  for (  String var : map.keySet()) {    if (!map.containsKey(var + "'")) {      boolean hasPrime=(var.charAt(var.length() - 1) == '\'');      String newVar=(hasPrime) ? var.substring(0,var.length() - 1) : var;      a.addPair(newVar,map.get(var));    }  }  return a;}  }
class C{  public List<AuditEvent> convertToAuditEvent(Iterable<PersistentAuditEvent> persistentAuditEvents){  if (persistentAuditEvents == null) {    return Collections.emptyList();  }  List<AuditEvent> auditEvents=new ArrayList<>();  for (  PersistentAuditEvent persistentAuditEvent : persistentAuditEvents) {    AuditEvent auditEvent=new AuditEvent(persistentAuditEvent.getAuditEventDate().toDate(),persistentAuditEvent.getPrincipal(),persistentAuditEvent.getAuditEventType(),convertDataToObjects(persistentAuditEvent.getData()));    auditEvents.add(auditEvent);  }  return auditEvents;}  }
class C{  public void updateUser(User user) throws UsersRepositoryException {  if (user != null && user instanceof JCRUser) {    final JCRUser jcrUser=(JCRUser)user;    final String userName=jcrUser.getUserName();    try {      final Session session=login();      try {        final String name=toSafeName(userName);        final String path=USERS_PATH + "/" + name;        final Node rootNode=session.getRootNode();        try {          final String hashedSaltedPassword=jcrUser.getHashedSaltedPassword();          rootNode.getNode(path).setProperty(PASSWD_PROPERTY,hashedSaltedPassword);          session.save();        } catch (        PathNotFoundException e) {          getLogger().debug("User not found");          throw new UsersRepositoryException("User " + user.getUserName() + " not exist");        }      }  finally {        session.logout();      }    } catch (    RepositoryException e) {      if (getLogger().isInfoEnabled()) {        getLogger().info("Failed to add user: " + userName,e);      }      throw new UsersRepositoryException("Failed to add user: " + userName,e);    }  }}  }
class C{  public boolean isCreateAsset(){  MProductCategory pc=MProductCategory.get(getCtx(),getM_Product_Category_ID());  return pc.getA_Asset_Group_ID() != 0;}  }
class C{  public DrawerItem(){  this.id=DEFAULT_DIVIDER_ID;  this.type=TYPE_DIVIDER;  this.desc=null;  this.iconResourceId=0;}  }
class C{  public void testServiceModeRequest(){  InstanceManager.setProgrammerManager(new DebugProgrammerManager());  Programmer p=InstanceManager.getDefault(jmri.ProgrammerManager.class).getGlobalProgrammer();  Assert.assertTrue("got service mode",p != null);  Assert.assertTrue("correct type",(p instanceof ProgDebugger));}  }
class C{  public void clear(){  mObjects.clear();}  }
class C{  public OMGraphic remove(int location){  OMGraphic obj=super.remove(location);  if (obj != null) {    setNeedToRegenerate(true);  }  return obj;}  }
class C{  public void onProgress(OneSheeldDevice device,int totalBytes,int sentBytes){}  }
class C{  public OMScalingRaster(double ullat,double ullon,double lrlat,double lrlon,ImageIcon ii){  this(ullat,ullon,lrlat,lrlon,ii.getImage());}  }
class C{  public HttpEntityWrapper(HttpEntity wrapped){  super();  if (wrapped == null) {    throw new IllegalArgumentException("wrapped entity must not be null");  }  wrappedEntity=wrapped;}  }
class C{  @Override public void serialize(CumulativeTimeBucket ctb,JsonGenerator jGen,SerializerProvider serializer) throws IOException, JsonProcessingException {  jGen.writeStartObject();  Timestamp ts=new Timestamp(ctb.getStartTimeNs() / 1000000);  jGen.writeStringField("start-time",ts.toString());  jGen.writeStringField("current-time",new Timestamp(System.currentTimeMillis()).toString());  jGen.writeNumberField("total-packets",ctb.getTotalPktCnt());  jGen.writeNumberField("average",ctb.getAverageProcTimeNs());  jGen.writeNumberField("min",ctb.getMinTotalProcTimeNs());  jGen.writeNumberField("max",ctb.getMaxTotalProcTimeNs());  jGen.writeNumberField("std-dev",ctb.getTotalSigmaProcTimeNs());  jGen.writeArrayFieldStart("modules");  for (  OneComponentTime oct : ctb.getModules()) {    serializer.defaultSerializeValue(oct,jGen);  }  jGen.writeEndArray();  jGen.writeEndObject();}  }
class C{  boolean legalElementContext(Element elem) throws ChangedCharSetException {  if (stack == null) {    if (elem != dtd.html) {      startTag(makeTag(dtd.html,true));      return legalElementContext(elem);    }    return true;  }  if (stack.advance(elem)) {    markFirstTime(elem);    return true;  }  boolean insertTag=false;  String stackElemName=stack.elem.getName();  String elemName=elem.getName();  if (!strict && ((stackElemName.equals("table") && elemName.equals("td")) || (stackElemName.equals("table") && elemName.equals("th")) || (stackElemName.equals("tr") && !elemName.equals("tr")))) {    insertTag=true;  }  if (!strict && !insertTag && (stack.elem.getName() != elem.getName() || elem.getName().equals("body"))) {    if (skipTag=ignoreElement(elem)) {      error("tag.ignore",elem.getName());      return skipTag;    }  }  if (!strict && stackElemName.equals("table") && !elemName.equals("tr")&& !elemName.equals("td")&& !elemName.equals("th")&& !elemName.equals("caption")) {    Element e=dtd.getElement("tr");    TagElement t=makeTag(e,true);    legalTagContext(t);    startTag(t);    error("start.missing",elem.getName());    return legalElementContext(elem);  }  if (!insertTag && stack.terminate() && (!strict || stack.elem.omitEnd())) {    for (TagStack s=stack.next; s != null; s=s.next) {      if (s.advance(elem)) {        while (stack != s) {          endTag(true);        }        return true;      }      if (!s.terminate() || (strict && !s.elem.omitEnd())) {        break;      }    }  }  Element next=stack.first();  if (next != null && (!strict || next.omitStart()) && !(next == dtd.head && elem == dtd.pcdata)) {    TagElement t=makeTag(next,true);    legalTagContext(t);    startTag(t);    if (!next.omitStart()) {      error("start.missing",elem.getName());    }    return legalElementContext(elem);  }  if (!strict) {    ContentModel content=stack.contentModel();    Vector<Element> elemVec=new Vector<Element>();    if (content != null) {      content.getElements(elemVec);      for (      Element e : elemVec) {        if (stack.excluded(e.getIndex())) {          continue;        }        boolean reqAtts=false;        for (AttributeList a=e.getAttributes(); a != null; a=a.next) {          if (a.modifier == REQUIRED) {            reqAtts=true;            break;          }        }        if (reqAtts) {          continue;        }        ContentModel m=e.getContent();        if (m != null && m.first(elem)) {          TagElement t=makeTag(e,true);          legalTagContext(t);          startTag(t);          error("start.missing",e.getName());          return legalElementContext(elem);        }      }    }  }  if (stack.terminate() && (stack.elem != dtd.body) && (!strict || stack.elem.omitEnd())) {    if (!stack.elem.omitEnd()) {      error("end.missing",elem.getName());    }    endTag(true);    return legalElementContext(elem);  }  return false;}  }
class C{  public NewGLMNET(double C){  this(C,1);}  }
class C{  public String toString(){  StringBuilder s=new StringBuilder();  s.append(V + " " + E+ NEWLINE);  for (int v=0; v < V; v++) {    s.append(v + ": ");    for (    DirectedEdge e : adj(v)) {      s.append(e + "  ");    }    s.append(NEWLINE);  }  return s.toString();}  }
class C{  public InputBuilder<T> emit(T record){  if (record == null) {    throw new IllegalArgumentException("Record has too be not null!");  }  input.add(record);  return this;}  }
class C{  public Object cacheInsert(String cacheName,Object key,Object val){  SolrCache cache=cacheMap.get(cacheName);  return cache == null ? null : cache.put(key,val);}  }
class C{  public X509Certificate generateX509Certificate(PrivateKey key) throws SecurityException, SignatureException, InvalidKeyException {  try {    return generateX509Certificate(key,"BC",null);  } catch (  NoSuchProviderException e) {    throw new SecurityException("BC provider not installed!");  }}  }
class C{  public void callSeriallyAndWait(Runnable r){  if (isEdt()) {    throw new RuntimeException("This method MUST NOT be invoked on the EDT");  }  RunnableWrapper c=new RunnableWrapper(r,0);  callSerially(c);  flushEdt();synchronized (lock) {    while (!c.isDone()) {      try {        lock.wait(50);      } catch (      InterruptedException err) {      }    }  }}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (this.getAD_Client_ID() > 0)   this.setAD_Client_ID(0);  if (this.getAD_Org_ID() > 0)   this.setAD_Org_ID(0);  return true;}  }
class C{  public GsonBuilder generateNonExecutableJson(){  this.generateNonExecutableJson=true;  return this;}  }
class C{  @Override public int size(){  return elementCount;}  }
class C{  private static void registerKnownHandlers(){  if (registered)   return;  registerHandler(FXGVersion.v1_0,new FXG_v1_0_Handler());  registerHandler(FXGVersion.v2_0,new FXG_v2_0_Handler());  registered=true;}  }
class C{  public static void join(final @AligningRecyclerView.AlignOrientation int orientation,final @NonNull AligningRecyclerView... toJoin){  for (  final AligningRecyclerView currentSrc : toJoin) {    for (    final AligningRecyclerView currentTarget : toJoin) {      if (!currentSrc.equals(currentTarget)) {        currentSrc.bindTo(currentTarget,orientation);      }    }  }}  }
class C{  public TenantConfigurationValueBuilder<T> lastModifiedBy(final String lastModifiedBy){  this.configuration.lastModifiedBy=lastModifiedBy;  return this;}  }
class C{  public boolean isDeleteable(){  Object oo=get_Value(COLUMNNAME_IsDeleteable);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (value: ");  result.append(value);  result.append(')');  return result.toString();}  }
class C{  public PreDestroyCustomScopeEvent(FacesContext facesContext,ScopeContext scopeContext){  super(facesContext,scopeContext);}  }
class C{  protected void updateRange(){  if (m_type == int.class) {    setRange(m_lo.intValue(),m_hi.intValue() - m_lo.intValue(),m_min.intValue(),m_max.intValue());  } else   if (m_type == long.class) {    long range=m_max.longValue() - m_min.longValue();    if (range == 0) {      setRange(0,0,0,0);    } else {      long lo=m_lo.longValue() - m_min.longValue();      long hi=m_hi.longValue() - m_min.longValue();      int v=(int)(10000 * lo / range);      int e=(int)(10000 * hi / range) - v;      setRange(v,e,0,10000);    }  } else {    double range=m_max.doubleValue() - m_min.doubleValue();    if (range == 0) {      setRange(0,0,0,0);    } else {      double lo=m_lo.doubleValue() - m_min.doubleValue();      double hi=m_hi.doubleValue() - m_min.doubleValue();      int v=(int)(10000.0 * lo / range);      int e=(int)(10000.0 * hi / range) - v;      setRange(v,e,0,10000);    }  }}  }
class C{  protected AnimatableNumberValue(AnimationTarget target){  super(target);}  }
class C{  public static double binomialStandardError(double p,int n){  if (n == 0) {    return 0;  }  return Math.sqrt((p * (1 - p)) / n);}  }
class C{  public static void openBrowser(Context context,String url){  Intent intent=createOpenBrowserIntent(url);  checkContext(context,intent);  context.startActivity(intent);}  }
class C{  public static Action display(){  return create(DISPLAY);}  }
class C{  public boolean isConnectedToMobile(){  NetworkInfo networkInfo=mCM.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);  return networkInfo.isConnected();}  }
class C{  protected ControlFlowEdge addEdge(BytecodeInstruction src,BytecodeInstruction target,boolean isExceptionEdge){  logger.debug("Adding edge to RawCFG of " + className + "."+ methodName+ ": "+ this.vertexCount());  if (BranchPool.getInstance(classLoader).isKnownAsBranch(src))   if (src.isBranch())   return addBranchEdge(src,target,isExceptionEdge); else   if (src.isSwitch())   return addSwitchBranchEdge(src,target,isExceptionEdge);  return addUnlabeledEdge(src,target,isExceptionEdge);}  }
class C{  protected DestinationWrapper<Queue> lookupQueueFromJNDI(String uri) throws NamingException {  return new DestinationWrapper<Queue>(uri,(Queue)getInitialContext().lookup(uri));}  }
class C{  public int hashCode(){  return toString().hashCode();}  }
class C{  private void updateAchievementGoals(){  MMeasure measure=MMeasure.get(getCtx(),getPA_Measure_ID());  measure.updateGoals();}  }
class C{  private void doSend(SelectionKey sockKey,ByteBuffer[] bufs) throws IOException {  long totalWritten=0;  sockKey.interestOps(SelectionKey.OP_WRITE);  SocketChannel sock=(SocketChannel)sockKey.attachment();  long startMs=TimeUtil.nowMs();  long remainingMs=conf.ioTimeoutMs;  while (true) {    selector.select(remainingMs);    int firstBuf=0;    for (    SelectionKey key : selector.selectedKeys()) {      if (key.isWritable()) {        long written=sock.write(bufs,firstBuf,bufs.length - firstBuf);        if (LOG.isTraceEnabled()) {          LOG.trace("Sent " + written + " bytes to "+ conf.endpointStr);        }        totalWritten+=written;      }    }    while (true) {      if (firstBuf == bufs.length) {        if (LOG.isTraceEnabled()) {          LOG.trace("Finished sending " + totalWritten + " bytes to "+ conf.endpointStr);        }        return;      }      if (bufs[firstBuf].remaining() > 0) {        break;      }      firstBuf++;    }    remainingMs=updateRemainingMs(startMs,conf.ioTimeoutMs);    if (remainingMs == 0) {      throw new IOException("Attempt to write to " + conf.endpointStr + " timed out after "+ TimeUtil.deltaMs(startMs,TimeUtil.nowMs())+ " ms.");    }  }}  }
class C{  public int transform(CtClass clazz,int pos,CodeIterator iterator,ConstPool cp) throws CannotCompileException {  int index;  int c=iterator.byteAt(pos);  if (c == NEW) {    index=iterator.u16bitAt(pos + 1);    if (cp.getClassInfo(index).equals(classname)) {      if (iterator.byteAt(pos + 3) != DUP)       throw new CannotCompileException("NEW followed by no DUP was found");      if (newClassIndex == 0)       newClassIndex=cp.addClassInfo(newClassName);      iterator.write16bit(newClassIndex,pos + 1);      ++nested;    }  } else   if (c == INVOKESPECIAL) {    index=iterator.u16bitAt(pos + 1);    int typedesc=cp.isConstructor(classname,index);    if (typedesc != 0 && nested > 0) {      int nt=cp.getMethodrefNameAndType(index);      if (newMethodNTIndex != nt) {        newMethodNTIndex=nt;        newMethodIndex=cp.addMethodrefInfo(newClassIndex,nt);      }      iterator.write16bit(newMethodIndex,pos + 1);      --nested;    }  }  return pos;}  }
class C{  public void quickShutdown(){  if (isResumePossible()) {    mConnection.disconnect();    closeOnError();  } else {    mConnection.disconnect();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:03.191 -0500",hash_original_method="C034912C24C8AA492A55E1DAB6749820",hash_generated_method="5413705055B44539B10CEEEA8C0D255B") public String encodeBody(){  return date.encode();}  }
class C{  private static Method findMethod(Object instance,String name,Class<?>... parameterTypes) throws NoSuchMethodException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Method method=clazz.getDeclaredMethod(name,parameterTypes);      if (!method.isAccessible()) {        method.setAccessible(true);      }      return method;    } catch (    NoSuchMethodException e) {    }  }  throw new NoSuchMethodException("Method " + name + " with parameters "+ Arrays.asList(parameterTypes)+ " not found in "+ instance.getClass());}  }
class C{  public SerialBlob(Blob blob) throws SerialException, SQLException {  if (blob == null) {    throw new SQLException("Cannot instantiate a SerialBlob object with a null Blob object");  }  len=blob.length();  buf=blob.getBytes(1,(int)len);  this.blob=blob;  origLen=len;}  }
class C{  public synchronized boolean isAuthenticationPartialSuccess(){  if (am == null)   return false;  return am.getPartialSuccess();}  }
class C{  public void run(int id,int size) throws Exception {  KeyPairGenerator keyGen=KeyPairGenerator.getInstance("RSA");  keyGen.initialize(size);  KeyPair kp=keyGen.generateKeyPair();  PublicKey puk=kp.getPublic();  PrivateKey prk=kp.getPrivate();  saveToFile(id,puk,prk);}  }
class C{  private void promptSwitchToReviewBranch(TaskRepository taskRepository,String reviewBranch){  MessageDialog dialog=new MessageDialog(null,"Appraise Review",null,"Do you want to switch to the review branch (" + reviewBranch + ")",MessageDialog.QUESTION,new String[]{"Yes","No"},0);  int result=dialog.open();  if (result == 0) {    Repository repo=AppraisePluginUtils.getGitRepoForRepository(taskRepository);    try (Git git=new Git(repo)){      previousBranch=repo.getFullBranch();      git.checkout().setName(reviewBranch).call();    } catch (    RefNotFoundException rnfe) {      MessageDialog alert=new MessageDialog(null,"Oops",null,"Branch " + reviewBranch + " not found",MessageDialog.INFORMATION,new String[]{"OK"},0);      alert.open();    }catch (    Exception e) {      AppraiseUiPlugin.logError("Unable to switch to review branch: " + reviewBranch,e);    }  }}  }
class C{  private void insertHeapPhiFunctions(IR ir){  Iterator<HeapVariable<Object>> e=ir.HIRInfo.dictionary.getHeapVariables();  while (e.hasNext()) {    HeapVariable<Object> H=e.next();    if (DEBUG)     System.out.println("Inserting phis for Heap " + H);    if (DEBUG)     System.out.println("Start iterated frontier...");    BitVector defH=H.getDefBlocks();    if (DEBUG)     System.out.println(H + " DEFINED IN " + defH);    BitVector needsPhi=DominanceFrontier.getIteratedDominanceFrontier(ir,defH);    if (DEBUG)     System.out.println(H + " NEEDS PHI " + needsPhi);    if (DEBUG)     System.out.println("Done.");    for (int b=0; b < needsPhi.length(); b++) {      if (needsPhi.get(b)) {        BasicBlock bb=ir.getBasicBlock(b);        ir.HIRInfo.dictionary.createHeapPhiInstruction(bb,H);      }    }  }}  }
class C{  public void sendToAll(final ModPacket packet){  ec.sendToAll(getProxyPacket(packet));}  }
class C{  public void syncIndicators(){  syncFlashIndicator();  syncHdrIndicator();  syncPanoIndicator();  syncExposureIndicator();  syncCountdownTimerIndicator();}  }
class C{  public static boolean isValidType(short type){  return type == TYPE_UNSIGNED_BYTE || type == TYPE_ASCII || type == TYPE_UNSIGNED_SHORT || type == TYPE_UNSIGNED_LONG || type == TYPE_UNSIGNED_RATIONAL || type == TYPE_UNDEFINED || type == TYPE_LONG || type == TYPE_RATIONAL;}  }
class C{  @SuppressWarnings("unchecked") protected void initialize() throws IllegalArgumentException {  if (pattern.charAt(0) != PATTERN_CHAR) {    throw new IllegalArgumentException();  }  final StringBuilder patternBuilder=new StringBuilder(pattern);  patternBuilder.delete(0,1);  final char type=patternBuilder.charAt(0);  final String format=initParameter(patternBuilder,FORMAT_CHARS);  setInputs(new Input[]{valueInputFactory.createInput(type,format,null)});}  }
class C{  @Override public void checkRead(){  checkAccess(AccessType.READ,null);}  }
class C{  public static void copyProperties(Drawable to,Drawable from){  if (from == null || to == null || to == from) {    return;  }  to.setBounds(from.getBounds());  to.setChangingConfigurations(from.getChangingConfigurations());  to.setLevel(from.getLevel());  to.setVisible(from.isVisible(),false);  to.setState(from.getState());}  }
class C{  void recalcAlerts(){  if (!View.isInitialised()) {    return;  }  int totalInfo=0;  int totalLow=0;  int totalMedium=0;  int totalHigh=0;  AlertNode parent=(AlertNode)getAlertPanel().getTreeAlert().getModel().getRoot();  if (parent != null) {    for (int i=0; i < parent.getChildCount(); i++) {      AlertNode child=parent.getChildAt(i);switch (child.getRisk()) {case Alert.RISK_INFO:        totalInfo++;      break;case Alert.RISK_LOW:    totalLow++;  break;case Alert.RISK_MEDIUM:totalMedium++;break;case Alert.RISK_HIGH:totalHigh++;break;}}}MainFooterPanel footer=View.getSingleton().getMainFrame().getMainFooterPanel();footer.setAlertInfo(totalInfo);footer.setAlertLow(totalLow);footer.setAlertMedium(totalMedium);footer.setAlertHigh(totalHigh);}  }
class C{  public static void validateSql(SqlManager sqlManager,QueryParameters qps){  Sql sql=sqlManager.getSql(qps.getSql());  if (sql == null)   throw new RuntimeException("Cannot find sql for handle " + qps.getSql());  int paramCnt=sql.getParamCount();  for (int i=1; i <= paramCnt; i++) {    if (!qps.getSqlParams().containsKey("p_" + i)) {      throw new RuntimeException("Missing parameter p_" + i);    }  }}  }
class C{  public HeaderParser headerParser(){  return preferred;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:51.031 -0500",hash_original_method="11E23C3DFA194FF115BF392A022E2577",hash_generated_method="2276811DF7ECD563A885FF03F3709090") protected void stop(){  if (sipStack.isLoggingEnabled())   sipStack.getStackLogger().logDebug("Exiting provider");  for (Iterator it=listeningPoints.values().iterator(); it.hasNext(); ) {    ListeningPointImpl listeningPoint=(ListeningPointImpl)it.next();    listeningPoint.removeSipProvider();  }  this.eventScanner.stop();}  }
class C{  public boolean shouldBeMocked(){  int modifiers=method.getModifiers();  if (method.getReturnType().equals(Void.TYPE) || method.getName().equals("equals") || method.getName().equals("hashCode")|| Modifier.isPrivate(modifiers)) {    return false;  }  if (Properties.hasTargetClassBeenLoaded()) {    if (!Modifier.isPublic(modifiers)) {      assert !Modifier.isPrivate(modifiers);      String sutName=Properties.TARGET_CLASS;      int lastIndexMethod=className.lastIndexOf('.');      int lastIndexSUT=sutName.lastIndexOf('.');      boolean samePackage;      if (lastIndexMethod != lastIndexSUT) {        samePackage=false;      } else       if (lastIndexMethod < 0) {        samePackage=true;      } else {        samePackage=className.substring(0,lastIndexMethod).equals(sutName.substring(0,lastIndexSUT));      }      if (!samePackage) {        return false;      }    }  } else {    logger.warn("The target class should be loaded before invoking this method");  }  return true;}  }
class C{  public Collection(String href,TextContent title,String... accepts){  this();  setHref(href);  setTitle(title);  for (  String accept : accepts) {    addAccept(accept);  }}  }
class C{  private MpqHashType(final int offsetBase){  offset=offsetBase << 8;}  }
class C{  @Override public void doProcess(JCas aJCas) throws AnalysisEngineProcessException {  found=new HashSet<>();  String text=normalizeQuotesAndDots(aJCas.getDocumentText());  processDD(aJCas,text);  processDDCard(aJCas,text);  processDMS(aJCas);  processDMSText(aJCas);}  }
class C{  public void sameFrame(int offsetDelta){  numOfEntries++;  if (offsetDelta < 64)   output.write(offsetDelta); else {    output.write(251);    write16(offsetDelta);  }}  }
class C{  private void trackScreen(int index){  if (index == 0)   Track.screen("InboxUnread");  if (index == 1)   Track.screen("InboxOverview");  if (index == 2)   Track.screen("InboxPrivate");  if (index == 3)   Track.screen("InboxComments");}  }
class C{  private void mergeCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] <= runLen[n] + runLen[n + 1]) {      if (runLen[n - 1] < runLen[n + 1])       n--;      mergeAt(n);    } else     if (runLen[n] <= runLen[n + 1]) {      mergeAt(n);    } else {      break;    }  }}  }
class C{  public Filters(Configuration config){  String whitelist=config.getString(MongoDbConnectorConfig.COLLECTION_WHITELIST);  String blacklist=config.getString(MongoDbConnectorConfig.COLLECTION_BLACKLIST);  Predicate<CollectionId> collectionFilter=null;  if (whitelist != null && !whitelist.trim().isEmpty()) {    collectionFilter=Predicates.includes(whitelist,null);  } else   if (blacklist != null && !blacklist.trim().isEmpty()) {    collectionFilter=Predicates.excludes(blacklist,null);  } else {    collectionFilter=null;  }  Predicate<CollectionId> isNotBuiltIn=null;  this.collectionFilter=isNotBuiltIn.and(collectionFilter);}  }
class C{  @Override public int compare(Value[] a,Value[] b){  for (int i=0, len=queryColumnIndexes.length; i < len; i++) {    int idx=queryColumnIndexes[i];    int type=sortTypes[i];    Value ao=a[idx];    Value bo=b[idx];    boolean aNull=ao == ValueNull.INSTANCE, bNull=bo == ValueNull.INSTANCE;    if (aNull || bNull) {      if (aNull == bNull) {        continue;      }      return compareNull(aNull,type);    }    int comp=database.compare(ao,bo);    if (comp != 0) {      return (type & DESCENDING) == 0 ? comp : -comp;    }  }  return 0;}  }
class C{  private int whiteSpaceLength(String indent){  if (indent == null)   return 0; else {    int size=0;    int l=indent.length();    int tabSize=getTabSize();    for (int i=0; i < l; i++)     size+=indent.charAt(i) == '\t' ? tabSize : 1;    return size;  }}  }
class C{  public FastIntBuffer append(int[] array){  return append(array,0,array.length);}  }
class C{  @Override public String toString(){  return "CUDA_MEMCPY3D_PEER[" + createString(",") + "]";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:18.159 -0500",hash_original_method="5968CF2AF2A16738BF27A6383A99288B",hash_generated_method="9F3213A87FABDFF7CE0416771E73B4C1") protected void fireTimeoutTimer(){  if (sipStack.isLoggingEnabled())   sipStack.getStackLogger().logDebug("SIPServerTransaction.fireTimeoutTimer this = " + this + " current state = "+ this.getRealState()+ " method = "+ this.getOriginalRequest().getMethod());  if (this.getMethod().equals(Request.INVITE) && sipStack.removeTransactionPendingAck(this)) {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("Found tx pending ACK - returning");    }    return;  }  SIPDialog dialog=(SIPDialog)this.dialog;  if (((SIPTransactionStack)getSIPStack()).isDialogCreated(this.getOriginalRequest().getMethod()) && (TransactionState.CALLING == this.getRealState() || TransactionState.TRYING == this.getRealState())) {    dialog.setState(SIPDialog.TERMINATED_STATE);  } else   if (getOriginalRequest().getMethod().equals(Request.BYE)) {    if (dialog != null && dialog.isTerminatedOnBye())     dialog.setState(SIPDialog.TERMINATED_STATE);  }  if (TransactionState.COMPLETED == this.getRealState() && isInviteTransaction()) {    raiseErrorEvent(SIPTransactionErrorEvent.TIMEOUT_ERROR);    this.setState(TransactionState.TERMINATED);    sipStack.removeTransaction(this);  } else   if (TransactionState.COMPLETED == this.getRealState() && !isInviteTransaction()) {    this.setState(TransactionState.TERMINATED);    sipStack.removeTransaction(this);  } else   if (TransactionState.CONFIRMED == this.getRealState() && isInviteTransaction()) {    this.setState(TransactionState.TERMINATED);    sipStack.removeTransaction(this);  } else   if (!isInviteTransaction() && (TransactionState.COMPLETED == this.getRealState() || TransactionState.CONFIRMED == this.getRealState())) {    this.setState(TransactionState.TERMINATED);  } else   if (isInviteTransaction() && TransactionState.TERMINATED == this.getRealState()) {    raiseErrorEvent(SIPTransactionErrorEvent.TIMEOUT_ERROR);    if (dialog != null)     dialog.setState(SIPDialog.TERMINATED_STATE);  }}  }
class C{  public static int dipToPixels(Context context,int dip){  Resources r=context.getResources();  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dip,r.getDisplayMetrics());  return (int)px;}  }
class C{  public void reset(){  super.reset();  if (null != m_iterator)   m_iterator.reset();}  }
class C{  public SocketTimeoutException(Throwable cause){  super(null,cause);}  }
class C{  public JSONWriter value(long l) throws JSONException {  return this.append(Long.toString(l));}  }
class C{  public SoftwarePIDController withInputRange(double minimumInput,double maximumInput){  if (minimumInput > maximumInput) {    throw new IllegalArgumentException("Lower bound is greater than upper bound");  }  Target target=this.target.withInputRange(minimumInput,maximumInput);  this.target=target;  updateSetpoint(target);  return this;}  }
class C{  @Override public void freeMemory(){  this.hardDataReference=null;}  }
class C{  @Override public void propertyChange(PropertyChangeEvent event){  serializeSpecToFile(this,this.projectRootPath);}  }
class C{  public void addCase(Condition condition,RuleOutput output){  if (!cases.isEmpty() && cases.get(cases.size() - 1).condition instanceof VoidCondition) {    log.warning("unreachable case for rule " + id + "(previous case trivially true)");  }  if (ruleType == RuleType.PROB) {    double totalMass=output.getParameters().stream().filter(null).mapToDouble(null).peek(null).sum();    if (totalMass > 1.02) {      throw new RuntimeException(totalMass + " is > 1.0");    }  }  cases.add(new RuleCase(condition,output));}  }
class C{  void copyNodeStructure(Node[] destination){  if (nodes.length != destination.length) {    throw new IllegalArgumentException("Node arrays are of different lengths");  }  for (int i=0, n=nodes.length; i < n; i++) {    Node node0=nodes[i];    Node node1=destination[i];    node1.heightParameter=node0.heightParameter;    node1.rateParameter=node0.rateParameter;    node1.traitParameters=node0.traitParameters;    if (node0.parent != null) {      node1.parent=storedNodes[node0.parent.getNumber()];    } else {      node1.parent=null;    }    if (node0.leftChild != null) {      node1.leftChild=storedNodes[node0.leftChild.getNumber()];    } else {      node1.leftChild=null;    }    if (node0.rightChild != null) {      node1.rightChild=storedNodes[node0.rightChild.getNumber()];    } else {      node1.rightChild=null;    }  }}  }
class C{  public void addParameter(String name,int... initialSearchValues){  Parameter param;  param=getParameterByName(name);  if (!(param instanceof IntParameter))   throw new IllegalArgumentException("Parameter " + name + " is not for int values");  addParameter((IntParameter)param,initialSearchValues);}  }
class C{  private int generatePermutationId(double[] ids,int base){  int permutationId=0;  for (int c=0; c < ids.length; c++) {    permutationId*=base;    permutationId+=(int)ids[c];  }  return permutationId;}  }
class C{  public void nextValidId(int orderId){  try {    int maxKey=m_tradePersistentModel.findTradeOrderByMaxKey();    if (maxKey < minOrderId) {      maxKey=minOrderId;    }    if (maxKey < orderId) {      orderKey=new AtomicInteger(orderId);    } else {      orderKey=new AtomicInteger(maxKey + 1);    }    this.fireConnectionOpened();  } catch (  Exception ex) {    error(orderId,3210,ex.getMessage());  }}  }
class C{  private void configureMarkupSettings(){  final ApplicationContext ctx=WebApplicationContextUtils.getWebApplicationContext(this.getServletContext());  final MultiMarkupFactory multiMarkupFactory=ctx.getBean("wicketMultiMarkupFactory",MultiMarkupFactory.class);  getMarkupSettings().setMarkupFactory(multiMarkupFactory);  getMarkupSettings().setCompressWhitespace(true);  getMarkupSettings().setStripWicketTags(true);  getMarkupSettings().setDefaultMarkupEncoding("UTF-8");  getMarkupSettings().setDefaultBeforeDisabledLink("<a>");  getMarkupSettings().setDefaultAfterDisabledLink("</a>");}  }
class C{  public void update(){  fireContentsChanged(this,0,getSize() + 1);}  }
class C{  public PolarFilter(int type){  super(ConvolveFilter.CLAMP_EDGES);  this.type=type;}  }
class C{  public void removeColor(int index){  ColorRGB color=this.listOfColors.remove(index);  stopObservingForChanges(color);  fireUpdate(this);}  }
class C{  public RequestHandle post(Context context,String url,Header[] headers,RequestParams params,String contentType,ResponseHandlerInterface responseHandler){  HttpEntityEnclosingRequestBase request=new HttpPost(getURI(url));  if (params != null)   request.setEntity(paramsToEntity(params,responseHandler));  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context);}  }
class C{  public NetBlackboard(){  initComponents();  initVars();}  }
class C{  protected void addFromChannelsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Endpoint_fromChannels_feature"),getString("_UI_PropertyDescriptor_description","_UI_Endpoint_fromChannels_feature","_UI_Endpoint_type"),EipPackage.Literals.ENDPOINT__FROM_CHANNELS,true,false,true,null,null,null));}  }
class C{  public boolean fileExists(String filePath){  boolean result=false;  StringBuilder buf=new StringBuilder();  String command=String.format(ImageServerDialogProperties.getString("cmd.fileExists"),filePath);  sendWaitFor(command,defaultTimeout,prompts,buf);  log.debug(buf.toString());  String[] lines=getLines(buf);  for (  String line : lines) {    if (line.trim().equals("1")) {      result=true;      break;    }    if (line.trim().equals("0")) {      result=false;      break;    }  }  return result;}  }
class C{  public FlexibleColumnResizeAdapter(){  this(JTable.AUTO_RESIZE_NEXT_COLUMN,JTable.AUTO_RESIZE_LAST_COLUMN,JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS,JTable.AUTO_RESIZE_ALL_COLUMNS);}  }
class C{  @Override public void validate(final Cookie cookie,final CookieOrigin origin) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (cookie instanceof Cookie2) {    final Cookie2 cookie2=(Cookie2)cookie;    if (!cookie2.isVersionAttributeSpecified()) {      throw new MalformedCookieException("Violates RFC 2965. Version attribute is required.");    }  }}  }
class C{  private int epochMonthToMonth(int epochMonth){  return (epochMonth + hijrahStartEpochMonth) % 12;}  }
class C{  public static void waitUntilNoActivityUpTo(Jenkins jenkins,int timeout) throws Exception {  long startTime=System.currentTimeMillis();  int streak=0;  while (true) {    Thread.sleep(10);    if (isSomethingHappening(jenkins)) {      streak=0;    } else {      streak++;    }    if (streak > 5) {      return;    }    if (System.currentTimeMillis() - startTime > timeout) {      List<Queue.Executable> building=new ArrayList<Queue.Executable>();      for (      Computer c : jenkins.getComputers()) {        for (        Executor e : c.getExecutors()) {          if (e.isBusy())           building.add(e.getCurrentExecutable());        }        for (        Executor e : c.getOneOffExecutors()) {          if (e.isBusy())           building.add(e.getCurrentExecutable());        }      }      dumpThreads();      throw new AssertionError(String.format("Jenkins is still doing something after %dms: queue=%s building=%s",timeout,Arrays.asList(jenkins.getQueue().getItems()),building));    }  }}  }
class C{  public Reader create(InputStream is,String javaEncoding){  return new UTF16_REVReader(is);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private boolean isSuperBlockEnd(int opcode){switch (opcode) {case ByteCode.ARETURN:case ByteCode.FRETURN:case ByteCode.IRETURN:case ByteCode.LRETURN:case ByteCode.RETURN:case ByteCode.ATHROW:case ByteCode.GOTO:case ByteCode.GOTO_W:case ByteCode.TABLESWITCH:case ByteCode.LOOKUPSWITCH:    return true;default :  return false;}}  }
class C{  public static double trimmedMean(DoubleArrayList sortedData,double mean,int left,int right){  int N=sortedData.size();  if (N == 0)   throw new IllegalArgumentException("Empty data.");  if (left + right >= N)   throw new IllegalArgumentException("Not enough data.");  double[] sortedElements=sortedData.elements();  int N0=N;  for (int i=0; i < left; ++i)   mean+=(mean - sortedElements[i]) / (--N);  for (int i=0; i < right; ++i)   mean+=(mean - sortedElements[N0 - 1 - i]) / (--N);  return mean;}  }
class C{  public RelativeAbsoluteError(){  super();}  }
class C{  protected boolean initWorkbench(int AD_Workbench_ID){  this.setName("AWindow_WB_" + AD_Workbench_ID);  boolean loadedOK=m_APanel.initPanel(AD_Workbench_ID,0,null);  commonInit();  return loadedOK;}  }
class C{  public static CreateWindowClause create(String windowName,View view){  return new CreateWindowClause(windowName,new View[]{view});}  }
class C{  protected byte[] engineWrap(Key key) throws IllegalBlockSizeException, InvalidKeyException {  return core.wrap(key);}  }
class C{  private void loadPanel(){  String sql=MRole.getDefault().addAccessSQL("SELECT AD_Workflow_ID, Name FROM AD_Workflow " + (!Util.isEmpty(m_WF_whereClause,true) ? " WHERE " + m_WF_whereClause : "") + " ORDER BY 2","AD_Workflow",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  KeyNamePair[] pp=DB.getKeyNamePairs(sql,true);  workflow=new CComboBox(pp);  AutoCompletion.enable(workflow);  loadPanel.add(workflow);  workflow.addActionListener(this);  loadPanel.add(bIgnore);  bIgnore.addActionListener(this);  loadPanel.add(bResetLayout);  bResetLayout.addActionListener(this);  loadPanel.add(bSaveLayout);  bSaveLayout.addActionListener(this);  loadPanel.add(bZoom);  bZoom.addActionListener(this);}  }
class C{  public void onRowViewRemoved(NotificationBoard board,RowView rowView,NotificationEntry entry){  if (DBG)   Log.v(TAG,"onRowViewRemoved - " + entry.ID);}  }
class C{  public static boolean isRegularFile(Path file){  try {    BasicFileAttributes attr=Files.readAttributes(file,BasicFileAttributes.class);    return (attr.isRegularFile() || attr.isOther()) && !attr.isDirectory();  } catch (  IOException e) {    return false;  }}  }
class C{  public void seriesChanged(SeriesChangeEvent event){  this.lastEvent=event;}  }
class C{  @SuppressWarnings("AssignmentToForLoopParameter") public String substituteVariables(String val){  if (val.indexOf('$') < 0 && val.indexOf('&') < 0) {    return val;  }  val=val.replace("&lt;","<");  val=val.replace("&gt;",">");  val=val.replace("&quot;","\"");  val=val.replace("&amp;","&");  StringBuilder sb=new StringBuilder(val);  int charStart=sb.indexOf("&#");  while (charStart > -1) {    int charEnd=sb.indexOf(";",charStart);    if (charEnd > -1) {      char c=(char)Integer.parseInt(sb.substring(charStart + 2,charEnd));      sb.delete(charStart,charEnd + 1);      sb.insert(charStart,c);      charStart=sb.indexOf("&#");    } else {      break;    }  }  for (int i=0; i < sb.length(); ) {    for (; i < sb.length(); i++) {      if (sb.charAt(i) == '$') {        i++;        break;      }    }    if (i == sb.length())     break;    if (i > 1 && sb.charAt(i - 2) == '\\') {      sb.deleteCharAt(i - 2);      i--;      continue;    }    int nameStart=i;    int start=i - 1;    int end;    int nameEnd;    char endChar=' ';    if (sb.charAt(i) == '{') {      nameStart++;      endChar='}';    }    for (; i < sb.length(); i++) {      if (sb.charAt(i) == endChar)       break;    }    end=i;    nameEnd=end;    if (endChar == '}')     end++;    String varName=sb.substring(nameStart,nameEnd);    String value=getVariableValue(varName);    if (value == null)     value="";    sb.replace(start,end,value);    i=start + value.length();  }  return sb.toString();}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    int offs=target.getCaretPosition();    boolean failed=false;    int oldOffs=offs;    Element curPara=Utilities.getParagraphElement(target,offs);    try {      offs=Utilities.getNextWord(target,offs);      if (offs >= curPara.getEndOffset() && oldOffs != curPara.getEndOffset() - 1) {        offs=curPara.getEndOffset() - 1;      }    } catch (    BadLocationException bl) {      int end=target.getDocument().getLength();      if (offs != end) {        if (oldOffs != curPara.getEndOffset() - 1) {          offs=curPara.getEndOffset() - 1;        } else {          offs=end;        }      } else {        failed=true;      }    }    if (!failed) {      if (select) {        target.moveCaretPosition(offs);      } else {        target.setCaretPosition(offs);      }    } else {      UIManager.getLookAndFeel().provideErrorFeedback(target);    }  }}  }
class C{  public Note(String note){  super(note);}  }
class C{  public MultiCraftingRecipeItem(final ItemStack item,final Map<ItemStack,Boolean> items,final Collection<BiPredicate<Player,ItemStack>> validators){  this.item=item;  this.items=new Object2BooleanOpenHashMap<>(items);  this.validators=(validators == null) ? null : new ArrayList<>(validators);  this.replacement=null;  this.replacementFunc=null;}  }
class C{  public int next(){  int next=_currentNode;  int pos=--m_ancestorsPos;  _currentNode=(pos >= 0) ? m_ancestors.elementAt(m_ancestorsPos) : DTM.NULL;  return returnNode(next);}  }
class C{  public boolean isConstant(){  if (this.meta != null) {    return false;  }switch (this.op) {case EMPTY:case EPSILON:case STRING:    return true;case CONCAT:  for (  RE r : cats) {    if (!r.isConstant())     return false;  }return true;case UNION:if (alts.size() == 1) {RE re=alts.iterator().next();return re.isConstant();}return false;case RANGE:case STAR:case PLUS:case OPTION:case BINOP:case UNOP:return false;default :return false;}}  }
class C{  public void testPessimisticOffheapMixed() throws Exception {  testTransactionMixed(cacheOffheap,PESSIMISTIC,KEY_1,wrap(1),KEY_2,1);}  }
class C{  protected void evictWithFreezer(){  int elemsToRemovePreCheck=elementsToRemove();  if (elemsToRemovePreCheck <= 0) {    return;  }  int i=0;  Set<Entry<K,AccessTimeObjectHolder<V>>> entrySet=objects.entrySet();  int size=entrySet.size();  ArrayList<HolderFreezer<K,V>> toCheckL=new ArrayList<>(size);  for (  Entry<K,AccessTimeObjectHolder<V>> entry : entrySet) {    if (i == size) {      break;    }    K key=entry.getKey();    AccessTimeObjectHolder<V> holder=entry.getValue();    long frozenValue=evictionClass.getFreezeValue(key,holder);    HolderFreezer<K,V> frozen=new HolderFreezer<>(key,holder,frozenValue);    toCheckL.add(i,frozen);    i++;  }  @SuppressWarnings("unchecked") HolderFreezer<K,V>[] toCheck=toCheckL.toArray(new HolderFreezer[toCheckL.size()]);  Arrays.sort(toCheck,evictionClass.evictionComparator());  int removedCount=0;  int elemsToRemove=elementsToRemove();  for (  HolderFreezer<K,V> entryToRemove : toCheck) {    K key=entryToRemove.getKey();    V oldValue=remove(key);    if (oldValue != null) {      ++removedCount;      if (expiryNotification)       evictedElements.put(key,oldValue);      if (removedCount >= elemsToRemove)       break;    }  }  evictionCount.addAndGet(removedCount);  statisticsCalculator.incrementRemoveCount(removedCount);  evictionRateCounter.registerEvents(millisEstimator.seconds(),removedCount);}  }
class C{  @Override protected void onStartLoading(){  if (mData != null) {    deliverResult(mData);  }  if (takeContentChanged() || mData == null) {    forceLoad();  }}  }
class C{  @Override public boolean okToSend(){  return status();}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    BufferedInputStream fis=null;    try {      fis=new BufferedInputStream(new FileInputStream(file));      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  public static CommMessage createEmptyResponse(CommMessage request){  return createResponse(request,Value.create());}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public Matrix4d scaleLocal(double x,double y,double z){  return scaleLocal(x,y,z,this);}  }
class C{  public void testOrientationSetup(int orientation){  ActivityController<? extends CourseUnitNavigationActivity> controller=Robolectric.buildActivity(getActivityClass()).withIntent(getIntent());  CourseUnitNavigationActivity activity=controller.get();  activity.getResources().getConfiguration().orientation=orientation;  controller.create();  assertOrientationSetup(activity);}  }
class C{  private void configureAndStartPipeline(TungstenProperties config) throws Exception {  ReplicatorRuntime runtime=new ReplicatorRuntime(config,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  runtime.configure();  runtime.prepare();  pipeline=runtime.getPipeline();  pipeline.start(new MockEventDispatcher());}  }
class C{  protected void fireDocumentPartitioningChanged(DocumentPartitioningChangedEvent event){  if (fDocumentPartitioningListeners == null)   return;  Object[] listeners=fDocumentPartitioningListeners.getListeners();  for (  Object listener : listeners) {    DocumentPartitioningListener l=(DocumentPartitioningListener)listener;    try {      l.documentPartitioningChanged(event);    } catch (    Exception ex) {      fail(ex);    }  }}  }
class C{  public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(major & 0xff);  buffer.append('.');  int m=minor & 0xff;  if (m < 10) {    buffer.append('0');  }  buffer.append(m);  return buffer.toString();}  }
class C{  public static void ensureLength(final long bigArrayLength){  if (bigArrayLength < 0)   throw new IllegalArgumentException("Negative big-array size: " + bigArrayLength);  if (bigArrayLength >= (long)Integer.MAX_VALUE << SEGMENT_SHIFT)   throw new IllegalArgumentException("Big-array size too big: " + bigArrayLength);}  }
class C{  public boolean supportsMixedCaseQuotedIdentifiers() throws SQLException {  return true;}  }
class C{  public void loadAll(){  for (  DexFile dexFile : dexFiles) {    for (    final ClassDef classDef : dexFile.getClasses()) {      ClassInfo ci=Dalvik.findOrCreateClass(classDef.getType());      ClassDetail detail=translateClassDef(ci,classDef);      setDetails(ci,detail);    }  }  if (translateInstructions) {    resolver.resolveAll();  }}  }
class C{  public static double[][] I(double P[][]){  int L=P.length;  double M[][]=new double[L][L];  for (int j=0; j < L; j++) {    for (int k=j + 1; k < L; k++) {      M[j][k]=I(P,j,k);    }  }  return M;}  }
class C{  public void checkJvmMemPoolCollectThreshold(Long x) throws SnmpStatusException {  if (!pool.isCollectionUsageThresholdSupported())   throw new SnmpStatusException(SnmpDefinitions.snmpRspInconsistentValue);  final long val=x.longValue();  if (val < 0)   throw new SnmpStatusException(SnmpDefinitions.snmpRspWrongValue);}  }
class C{  public static <T,K>MutableMap<K,T> toMap(Iterable<T> iterable,Function<? super T,? extends K> keyFunction){  MutableMap<K,T> map=UnifiedMap.newMap();  Iterate.forEach(iterable,new MapCollectProcedure<>(map,keyFunction));  return map;}  }
class C{  private void applyKitKatTranslucency(){  if (Build.VERSION.SDK_INT == Build.VERSION_CODES.KITKAT) {    TypedValue tv=new TypedValue();    int actionBarHeight=0;    if (getActivity().getTheme().resolveAttribute(android.R.attr.actionBarSize,tv,true)) {      actionBarHeight=TypedValue.complexToDimensionPixelSize(tv.data,getResources().getDisplayMetrics());    }    mListView.setBackgroundColor(0xFFEEEEEE);    mRootView.setPadding(0,actionBarHeight + mApp.getStatusBarHeight(mContext),0,0);    mListView.setPadding(10,0,10,mApp.getNavigationBarHeight(mContext));    mListView.setClipToPadding(false);    getActivity().getWindow().setBackgroundDrawable(UIElementsHelper.getGeneralActionBarBackground(mContext));  }}  }
class C{  private static void copy(InputStream in,OutputStream out){  byte[] buffer=new byte[1024];  int read;  try {    while ((read=in.read(buffer)) > -1) {      out.write(buffer,0,read);    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private Organization(){}  }
class C{  public static AffineTransformation rotationInstance(double sinTheta,double cosTheta){  AffineTransformation trans=new AffineTransformation();  trans.setToRotation(sinTheta,cosTheta);  return trans;}  }
class C{  public Segment(double x1,double y1,double z1,double x2,double y2,double z2,Object data){  this(new Coordinate(x1,y1,z1),new Coordinate(x2,y2,z2),data);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.426 -0500",hash_original_method="26D71A046B8A5E21DEFC65FB89CD9FDA",hash_generated_method="2293476E78FCC8BDA181F927AEA93BD1") private void copyTables(){  if (prefixTable != null) {    prefixTable=(Hashtable)prefixTable.clone();  } else {    prefixTable=new Hashtable();  }  if (uriTable != null) {    uriTable=(Hashtable)uriTable.clone();  } else {    uriTable=new Hashtable();  }  elementNameTable=new Hashtable();  attributeNameTable=new Hashtable();  declSeen=true;}  }
class C{  public static boolean isSdcardReadable(){  String state=Environment.getExternalStorageState();  if (Environment.MEDIA_MOUNTED.equals(state) || Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {    return true;  }  return false;}  }
class C{  public void repaint(long tm,int x,int y,int width,int height){}  }
class C{  private void methodReturnStringSimplify(SootClass clz){  RefType stringType=RefType.v("java.lang.String");  SootMethodRef strCons=Scene.v().getMethod("<java.lang.String: void <init>()>").makeRef();  for (  SootMethod method : clz.getMethods()) {    if (!stringType.equals(method.getReturnType())) {      continue;    }    Body newBody=Jimple.v().newBody();    for (int i=0; i < method.getParameterCount(); i++) {      Local p=Jimple.v().newLocal("_$str_method_arg_" + localID++,method.getParameterType(i));      newBody.getLocals().add(p);      newBody.getUnits().add(Jimple.v().newIdentityStmt(p,Jimple.v().newParameterRef(method.getParameterType(i),i)));    }    Local l=Jimple.v().newLocal("_$str_method_return_" + localID++,stringType);    newBody.getLocals().add(l);    AssignStmt as=Jimple.v().newAssignStmt(l,Jimple.v().newNewExpr(stringType));    newBody.getUnits().add(as);    InvokeStmt cons=Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(l,strCons));    newBody.getUnits().add(cons);    newBody.getUnits().add(Jimple.v().newReturnStmt(l));    newBody.setMethod(method);    method.setActiveBody(newBody);  }}  }
class C{  public Builder convertRatesTo(TimeUnit rateUnit){  this.rateUnit=rateUnit;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:21.456 -0500",hash_original_method="25125C99E3204B3B6C4C8BDE15E97EE8",hash_generated_method="2EE0FCFE80BDFE6EE86FDD4F643952E8") public boolean commitText(CharSequence text,int newCursorPosition){  if (DEBUG)   Log.v(TAG,"commitText " + text);  replaceText(text,newCursorPosition,false);  sendCurrentText();  return true;}  }
class C{  public boolean isIndependent(Node x,Node y,List<Node> z){  if (x == null) {    throw new NullPointerException();  }  if (y == null) {    throw new NullPointerException();  }  if (z == null) {    throw new NullPointerException();  }  for (  Node node : z) {    if (node == null) {      throw new NullPointerException();    }  }  int[] testIndices=new int[2 + z.size()];  testIndices[0]=variables.indexOf(x);  testIndices[1]=variables.indexOf(y);  for (int i=0; i < z.size(); i++) {    testIndices[i + 2]=variables.indexOf(z.get(i));  }  for (int i=0; i < testIndices.length; i++) {    if (testIndices[i] < 0) {      throw new IllegalArgumentException("Variable " + i + " was not used in the constructor.");    }  }  GSquareTest.Result result=gSquareTest.calcGSquare(testIndices);  this.gSquare=result.getGSquare();  this.pValue=result.getPValue();  if (result.isIndep()) {    StringBuilder sb=new StringBuilder();    sb.append("INDEPENDENCE ACCEPTED: ");    sb.append(SearchLogUtils.independenceFact(x,y,z));    sb.append("\tp = ").append(nf.format(result.getPValue())).append("\tg^2 = ").append(nf.format(result.getGSquare())).append("\tdf = ").append(result.getDf());    TetradLogger.getInstance().log("independencies",sb.toString());  } else {    StringBuilder sb=new StringBuilder();    sb.append("Not independent: ");    sb.append(SearchLogUtils.independenceFact(x,y,z));    sb.append("\tp = ").append(nf.format(result.getPValue())).append("\tg^2 = ").append(nf.format(result.getGSquare())).append("\tdf = ").append(result.getDf());    TetradLogger.getInstance().log("independencies",sb.toString());  }  return result.isIndep();}  }
class C{  protected static void assertPixel(String name,Pixel value,int pixel){  Assert.assertEquals(name,value.toString(),formatPixel(pixel));}  }
class C{  public static Uri.Builder appendId(Uri.Builder builder,long id){  return builder.appendEncodedPath(String.valueOf(id));}  }
class C{  public void testDoConfigureSetsDomainVersion() throws Exception {  configuration.setProperty(WebLogicPropertySet.DOMAIN_VERSION,"1.2.2.1");  configuration.configure(container);  String config=configuration.getFileHandler().readTextFile(configuration.getHome() + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo("1.2.2.1","//weblogic:domain-version",config);}  }
class C{  private void partitionTracks(){  List<MediaTrack> allTracks=mMediaInfo.getMediaTracks();  mAudioTracks.clear();  mTextTracks.clear();  mTextTracks.add(buildNoneTrack());  mSelectedTextPosition=0;  mSelectedAudioPosition=-1;  if (allTracks != null) {    int textPosition=1;    int audioPosition=0;    for (    MediaTrack track : allTracks) {switch (track.getType()) {case MediaTrack.TYPE_TEXT:        mTextTracks.add(track);      if (mActiveTracks != null) {        for (        long mActiveTrack : mActiveTracks) {          if (mActiveTrack == track.getId()) {            mSelectedTextPosition=textPosition;          }        }      }    textPosition++;  break;case MediaTrack.TYPE_AUDIO:mAudioTracks.add(track);if (mActiveTracks != null) {for (long mActiveTrack : mActiveTracks) {  if (mActiveTrack == track.getId()) {    mSelectedAudioPosition=audioPosition;  }}}audioPosition++;break;}}}}  }
class C{  public TrailedPortrayal2D(GUIState state,SimplePortrayal2D child,FieldPortrayal2D fieldPortrayal,SimplePortrayal2D trail,double length){  this.state=state;  this.child=child;  this.trail=trail;  this.length=length;  this.fieldPortrayal=fieldPortrayal;  defaultMap=new SimpleColorMap(0.0,1.0,DEFAULT_MIN_COLOR,DEFAULT_MAX_COLOR);}  }
class C{  public PCA(int maxPCs){  this(maxPCs,1e-4);}  }
class C{  public static <T>LazyListX<T> fromStreamS(Stream<T> stream){  return new LazyListX<T>(Flux.from(ReactiveSeq.fromStream(stream)));}  }
class C{  public TimedEventListener(EventListener<T> listener,PluginContainer plugin,Method method,Class<? extends Event> eventClass){  this.listener=listener;  String id;  if (method == null) {    method=listener.getClass().getEnclosingMethod();  }  id=method.getDeclaringClass().getName();  this.timings=SpongeTimingsFactory.ofSafe(plugin.getId(),"Event: " + id + " ("+ eventClass.getSimpleName()+ ")",null);}  }
class C{  public static String youtubeTimeConverterToHumanReadable(String youtubeTimeFormat){  String temp="", hour="", minute="", second="", returnString;  for (int i=2; i < youtubeTimeFormat.length(); ++i) {    char c=youtubeTimeFormat.charAt(i);    if (c >= '0' && c <= '9')     temp=temp + c; else {switch (c) {case 'H':        if (temp.length() == 1)         temp="0" + temp;      hour=temp;    break;case 'M':  if (temp.length() == 1)   temp="0" + temp;minute=temp;break;case 'S':if (temp.length() == 1) temp="0" + temp;second=temp;break;}temp="";}}if (hour == "" && minute == "") returnString=second; else {if (hour == "") returnString=minute + ":" + second; else returnString=hour + ":" + minute+ ":"+ second;}return returnString;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public Bean<T> copy(){  Bean<T> copy=new Bean<T>(dataClass,ssp);  copy.takeValuesFrom(this);  return copy;}  }
class C{  public XTIFFTileCodec create(){  return new XTIFFFaxTileCodec();}  }
class C{  private static List<DgPhase> calculateSortedPhases(final List<SignalGroupSettingsData> groupSettingsList){  List<DgPhase> phases=new ArrayList<DgPhase>();  ArrayList<SignalGroupSettingsData> settingsList=new ArrayList<SignalGroupSettingsData>();  settingsList.addAll(groupSettingsList);  Collections.sort(settingsList,new DgSignalGroupSettingsDataOnsetComparator());  Map<Integer,Set<SignalGroupSettingsData>> onsetSettingsMap=new HashMap<Integer,Set<SignalGroupSettingsData>>();  Map<Integer,Set<SignalGroupSettingsData>> droppingSettingsMap=new HashMap<Integer,Set<SignalGroupSettingsData>>();  for (  SignalGroupSettingsData settings : groupSettingsList) {    if (!onsetSettingsMap.containsKey(settings.getOnset())) {      onsetSettingsMap.put(settings.getOnset(),new HashSet<SignalGroupSettingsData>());    }    onsetSettingsMap.get(settings.getOnset()).add(settings);    if (!droppingSettingsMap.containsKey(settings.getDropping())) {      droppingSettingsMap.put(settings.getDropping(),new HashSet<SignalGroupSettingsData>());    }    droppingSettingsMap.get(settings.getDropping()).add(settings);  }  Set<SignalGroupSettingsData> handledSettings=new HashSet<SignalGroupSettingsData>();  for (  SignalGroupSettingsData settings : settingsList) {    if (handledSettings.contains(settings)) {      continue;    }    Set<SignalGroupSettingsData> sameOnsetSettings=onsetSettingsMap.get(settings.getOnset());    SignalGroupSettingsData lastDropSettings=getLastDroppingSettings(sameOnsetSettings);    int phaseOn=lastDropSettings.getOnset();    int phaseDrop=lastDropSettings.getDropping();    DgPhase phase=new DgPhase(phaseOn,phaseDrop);    phases.add(phase);    Set<SignalGroupSettingsData> sameDroppingSettings=droppingSettingsMap.get(phaseDrop);    for (    SignalGroupSettingsData sameOnsetSetting : sameOnsetSettings) {      if (sameOnsetSetting.getDropping() <= phaseDrop) {        handledSettings.add(sameOnsetSetting);        phase.addSignalGroupSettingsData(sameOnsetSetting);      } else {        log.error("should not happen");      }    }    for (    SignalGroupSettingsData sameDropSetting : sameDroppingSettings) {      if (handledSettings.contains(sameDropSetting)) {        continue;      }      if (sameDropSetting.getOnset() >= phaseOn) {        handledSettings.add(sameDropSetting);        phase.addSignalGroupSettingsData(sameDropSetting);      } else {        log.error("should not happen");      }    }  }  return phases;}  }
class C{  @JsfTest(value=JsfVersion.JSF_2_2_0_M02,excludes={JsfServerExclude.GLASSFISH_4_1}) @Test public void testIssue2398() throws Exception {  HtmlPage page=webClient.getPage(webUrl.substring(0,webUrl.length() - 2) + "2/faces/index.xhtml");  if (!(page.getWebResponse().getResponseHeaderValue("Server").equals("GlassFish Server Open Source Edition  4.0"))) {    page=webClient.getPage(webUrl + "faces/index.xhtml");    page=webClient.getPage(webUrl.substring(0,webUrl.length() - 2) + "1/faces/index.xhtml");    assertTrue(page.asText().indexOf("Undeploy #1 is active!") != -1);    page=webClient.getPage(webUrl + "faces/index.xhtml");    assertTrue(page.asText().indexOf("Undeploy #2 is active!") != -1);    page=webClient.getPage(webUrl + "faces/count.xhtml");    Integer count=new Integer(page.asText().trim());    WebRequest webRequest=new WebRequest(new URL("http://localhost:4848/management/domain/applications/application/test-glassfish-undeploy-undeploy1"),HttpMethod.DELETE);    webRequest.setAdditionalHeader("X-Requested-By","127.0.0.1");    DefaultCredentialsProvider credentialsProvider=new DefaultCredentialsProvider();    credentialsProvider.addCredentials("admin","adminadmin");    webClient.setCredentialsProvider(credentialsProvider);    webClient.getOptions().setJavaScriptEnabled(false);    webClient.getPage(webRequest);    try {      webClient.getOptions().setPrintContentOnFailingStatusCode(false);      webClient.getPage(webUrl.substring(0,webUrl.length() - 2) + "1/faces/index.xhtml");      fail("Undeploy #1 is active!");    } catch (    FailingHttpStatusCodeException exception) {      assertEquals(404,exception.getStatusCode());      webClient.getOptions().setPrintContentOnFailingStatusCode(true);    }    page=webClient.getPage(webUrl + "faces/count.xhtml");    Integer newCount=new Integer(page.asText().trim());    assertTrue(count.intValue() >= newCount.intValue());  }}  }
class C{  protected String processPostRequest(HttpServletRequest request){  if (request == null) {    return Helper.ERROR_UNKNOWN_JSON;  }  try {    JsonObject jsonObject=Helper.getJsonObjectFromRequestBody(request);    Integer id=JsonUtils.getIntegerFieldFromJsonObject(jsonObject,"id");    String name=JsonUtils.getStringFieldFromJsonObject(jsonObject,"name");    if (id != null) {      AlertsDao alertsDao=new AlertsDao();      Alert alert=alertsDao.getAlert(id);      name=alert.getName();    }    AlertsDao alertsDao=new AlertsDao();    Alert alert=alertsDao.getAlertByName(name);    if (alert == null)     return Helper.ERROR_NOTFOUND_JSON;    com.pearson.statsagg.webui.Alerts alerts=new com.pearson.statsagg.webui.Alerts();    String result=alerts.removeAlert(name);    return Helper.createSimpleJsonResponse(result);  } catch (  Exception e) {    logger.error(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));    return Helper.ERROR_UNKNOWN_JSON;  }}  }
class C{  public StreetSegment(StreetPath path,LegMode mode,StreetLayer streetLayer){  duration=path.getDuration();  distance=path.getDistance();  streetEdges=new LinkedList<>();  List<com.vividsolutions.jts.geom.Coordinate> coordinates=new LinkedList<>();  for (  Integer edgeIdx : path.getEdges()) {    EdgeStore.Edge edge=path.getEdge(edgeIdx);    LineString geometry=edge.getGeometry();    if (geometry != null) {      if (coordinates.size() == 0) {        Collections.addAll(coordinates,geometry.getCoordinates());      } else {        coordinates.addAll(Arrays.asList(geometry.getCoordinates()).subList(1,geometry.getNumPoints()));      }    }  }  boolean first=true;  double lastAngleRad=0;  for (  StreetRouter.State state : path.getStates()) {    int edgeIdx=state.backEdge;    if (edgeIdx >= 0) {      EdgeStore.Edge edge=path.getEdge(edgeIdx);      StreetEdgeInfo streetEdgeInfo=new StreetEdgeInfo();      streetEdgeInfo.edgeId=edgeIdx;      streetEdgeInfo.geometry=edge.getGeometry();      streetEdgeInfo.streetName=streetLayer.getNameEdgeIdx(edgeIdx,Locale.ENGLISH);      streetEdgeInfo.mode=NonTransitMode.valueOf(state.streetMode.toString());      streetEdgeInfo.distance=edge.getLengthMm();      if (state.isBikeShare && streetLayer != null && streetLayer.bikeRentalStationMap != null) {        BikeRentalStation bikeRentalStation=streetLayer.bikeRentalStationMap.get(state.vertex);        if (bikeRentalStation != null) {          if (first) {            streetEdgeInfo.bikeRentalOnStation=bikeRentalStation;            first=false;          } else {            streetEdgeInfo.bikeRentalOffStation=bikeRentalStation;          }        }      }      if (mode == LegMode.CAR_PARK && streetLayer.parkRideLocationsMap != null && streetLayer.parkRideLocationsMap.get(state.vertex) != null) {        streetEdgeInfo.parkRide=streetLayer.parkRideLocationsMap.get(state.vertex);      }      double thisAngleRad=DirectionUtils.getFirstAngle(streetEdgeInfo.geometry);      if (streetEdges.isEmpty()) {        streetEdgeInfo.setAbsoluteDirection(thisAngleRad);        streetEdgeInfo.relativeDirection=RelativeDirection.DEPART;      } else {        streetEdgeInfo.setDirections(Math.toDegrees(lastAngleRad),Math.toDegrees(thisAngleRad),edge.getFlag(EdgeStore.EdgeFlag.ROUNDABOUT));        StreetEdgeInfo prev=streetEdges.get(streetEdges.size() - 1);        if (prev.streetName != null && prev.streetName.equals(streetEdgeInfo.streetName)) {          streetEdgeInfo.stayOn=true;        }      }      lastAngleRad=DirectionUtils.getLastAngle(streetEdgeInfo.geometry);      streetEdges.add(streetEdgeInfo);    }  }  compactEdges();  Coordinate[] coordinatesArray=new Coordinate[coordinates.size()];  coordinatesArray=coordinates.toArray(coordinatesArray);  this.geometry=GeometryUtils.geometryFactory.createLineString(coordinatesArray);  this.mode=mode;}  }
class C{  public EMailCharacterValidator(final String parameterValue){  this.parameterValue=parameterValue;}  }
class C{  @Override protected Transformation[] computeTransformationsToBeExecuted(TranspilerState state){  return new Transformation[]{staticPolyfillTransformationProvider.get(),memberPatchingTransformationProvider.get(),apiImplStubGenerationTransformationProvider.get(),destructuringTransformation.get(),superLiteralTransformationProvider.get(),expressionTransformationProvider.get(),enumAccessTransformationProvider.get(),dependencyInjectionTransformation.get(),classDeclarationTransformationProvider.get(),interfaceDeclarationTransformationProvider.get(),enumDeclarationTransformationProvider.get(),functionDeclarationTransformationProvider.get(),arrowFunction_Part1_TransformationProvider.get(),blockTransformationProvider.get(),formalParameterTransformationProvider.get(),arrowFunction_Part2_TransformationProvider.get(),trimTransformation.get(),sanitizeImportsTransformationProvider.get(),moduleWrappingTransformationProvider.get()};}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String remoteName=getString(stack);  int portNum=getInt(stack);  SFIRTuner tuney=ExternalTuningManager.getIRTunerPlugin(getString(stack),portNum);  if (tuney != null)   tuney.removeRemote(remoteName);  return null;}  }
class C{  public char charAt(int index){  return s.charAt(index);}  }
class C{  public CubePortrayal3D(Image image,double scale){  this(appearanceForImage(image,true),true,scale);}  }
class C{  public static void register(Map tagletMap){  ExampleTaglet tag=new ExampleTaglet();  Taglet t=(Taglet)tagletMap.get(tag.getName());  if (t != null) {    tagletMap.remove(tag.getName());  }  tagletMap.put(tag.getName(),tag);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:48.744 -0500",hash_original_method="9638F79FD1E953ECB07B4D80F472AAE0",hash_generated_method="B44BA49CDDEAD21A77F269B911990AB1") static Object parseValue(StreamTokenizer st,final int type) throws IOException {  final int token=st.nextToken();  if (type == TYPE_BOOLEAN) {    if (token != StreamTokenizer.TT_WORD) {      throw new ParseException(st,"boolean constant");    }    if ("true".equals(st.sval)) {      return Boolean.TRUE;    } else     if ("false".equals(st.sval)) {      return Boolean.FALSE;    }    throw new ParseException(st,"boolean constant");  } else   if ((type & 0xff) == 'I') {    if (token != StreamTokenizer.TT_WORD) {      throw new ParseException(st,"integer constant");    }    long value;    try {      value=Long.decode(st.sval);    } catch (    NumberFormatException ex) {      throw new ParseException(st,"integer constant");    }    int width=(type >> 8) & 0xff;switch (width) {case 1:      if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {        throw new ParseException(st,"8-bit integer constant");      }    return new Byte((byte)value);case 2:  if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {    throw new ParseException(st,"16-bit integer constant");  }return new Short((short)value);case 4:if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {throw new ParseException(st,"32-bit integer constant");}return new Integer((int)value);case 8:if (value < Long.MIN_VALUE || value > Long.MAX_VALUE) {throw new ParseException(st,"64-bit integer constant");}return new Long(value);default :throw new IllegalStateException("Internal error; unexpected integer type width " + width);}} else if ((type & 0xff) == 'F') {if (token != StreamTokenizer.TT_WORD) {throw new ParseException(st,"float constant");}double value;try {value=Double.parseDouble(st.sval);} catch (NumberFormatException ex) {throw new ParseException(st,"float constant");}if (((type >> 8) & 0xff) == 4) {double absValue=Math.abs(value);if (absValue != 0.0 && !Double.isInfinite(value) && !Double.isNaN(value)) {if (absValue < Float.MIN_VALUE || absValue > Float.MAX_VALUE) {throw new ParseException(st,"32-bit float constant");}}return new Float((float)value);} else {return new Double(value);}} else if (type == TYPE_STRING) {if (token == '"') {return st.sval;} else if (token == StreamTokenizer.TT_WORD && "null".equals(st.sval)) {return NULL_STRING;}throw new ParseException(st,"double-quoted string or 'null'");}throw new IllegalStateException("Internal error; unknown type " + type);}  }
class C{  public Textifier visitTypeAnnotation(final int typeRef,final TypePath typePath,final String desc,final boolean visible){  buf.setLength(0);  buf.append(tab).append('@');  appendDescriptor(FIELD_DESCRIPTOR,desc);  buf.append('(');  text.add(buf.toString());  Textifier t=createTextifier();  text.add(t.getText());  buf.setLength(0);  buf.append(") : ");  appendTypeReference(typeRef);  buf.append(", ").append(typePath);  buf.append(visible ? "\n" : " // invisible\n");  text.add(buf.toString());  return t;}  }
class C{  private List<String> processPartitionValueRangeFilterOption(PartitionValueRange partitionValueRange,BusinessObjectFormatEntity businessObjectFormatEntity){  List<String> resultPartitionValues=new ArrayList<>();  Assert.notNull(businessObjectFormatEntity.getPartitionKeyGroup(),String.format("A partition key group, which is required to use partition value ranges, is not specified for the business object format {%s}.",businessObjectFormatHelper.businessObjectFormatEntityAltKeyToString(businessObjectFormatEntity)));  List<ExpectedPartitionValueEntity> expectedPartitionValueEntities=expectedPartitionValueDao.getExpectedPartitionValuesByGroupAndRange(businessObjectFormatEntity.getPartitionKeyGroup().getPartitionKeyGroupName(),partitionValueRange);  for (  ExpectedPartitionValueEntity expectedPartitionValueEntity : expectedPartitionValueEntities) {    String partitionValue=expectedPartitionValueEntity.getPartitionValue();    Assert.isTrue(!partitionValue.equals(BusinessObjectDataService.MAX_PARTITION_VALUE_TOKEN) && !partitionValue.equals(BusinessObjectDataService.MIN_PARTITION_VALUE_TOKEN),"A partition value token cannot be specified as one of the expected partition values.");    resultPartitionValues.add(partitionValue);  }  Assert.notEmpty(resultPartitionValues,String.format("Partition value range [\"%s\", \"%s\"] contains no valid partition values.",partitionValueRange.getStartPartitionValue(),partitionValueRange.getEndPartitionValue()));  return resultPartitionValues;}  }
class C{  public boolean isEmpty(){  return map.isEmpty();}  }
class C{  public boolean isLoggable(Level level){  throw new RuntimeException();}  }
class C{  private void selectTrack(MusicTrack musicTrack,View view,TrackSelectionState state){  if (musicTrack.isOfflineAvailable()) {    PlayMusicExporterSettings settings=new PlayMusicExporterSettings(getActivity());    String pathStructure="{album-artist}/{album}/{disc=CD $}/{no=$$.} {title}.mp3";    if (!TextUtils.isEmpty(musicTrack.getContainerName())) {      pathStructure="{group}/{group-no=$$.} {title}.mp3";    }    String path=MusicPathBuilder.Build(musicTrack,pathStructure);    Uri uri=settings.getUri(PlayMusicExporterSettings.PREF_EXPORT_URI,Uri.EMPTY);    SelectedTrackList.getInstance().setDoNotCloseActionMode(true);switch (state) {case Select:      SelectedTrackList.getInstance().setSelected(new SelectedTrack(musicTrack.getId(),uri,path),true,view);    break;case Deselect:  SelectedTrackList.getInstance().setSelected(new SelectedTrack(musicTrack.getId(),uri,path),false,view);break;case Toggle:SelectedTrackList.getInstance().toggle(new SelectedTrack(musicTrack.getId(),uri,path),view);break;}SelectedTrackList.getInstance().setDoNotCloseActionMode(false);} else {if (state == TrackSelectionState.Toggle) {Toast toast=Toast.makeText(getActivity(),R.string.toast_error_track_not_offline,Toast.LENGTH_LONG);toast.show();}}updateFloatingButton();}  }
class C{  public boolean isAfterLast() throws SQLException {  if (cursorPos == numRows + 1 && numRows > 0) {    return true;  } else {    return false;  }}  }
class C{  public WriteBuffer putVarLong(long x){  DataUtils.writeVarLong(ensureCapacity(10),x);  return this;}  }
class C{  public static Typeface robotoRegular(Context context){  return FontSourceProcessor.process(R.raw.roboto_regular,context);}  }
class C{  public void shearY(float angle){  showMissingWarning("shearY");}  }
class C{  public Map<String,String> proxiedServiceMappings(){  return proxiedServiceMappings;}  }
class C{  public void start(final JFrame window){  if (m_activeWindow != window) {    window.getGlassPane().setVisible(true);    window.getGlassPane().addMouseListener(m_listener);    window.setCursor(m_helpCursor);    m_activeWindow=window;  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private synchronized void applyFilter(){  filteredModelMap=new LinkedHashMap<>();  for (  Entry<String,List<FunctionInput>> entry : modelMap.entrySet()) {    List<FunctionInput> list=entry.getValue();    List<FunctionInput> newList=new LinkedList<>();    for (    FunctionInput inputValue : list) {      newList.add(inputValue);    }    filteredModelMap.put(entry.getKey(),newList);  }  boolean anyFilterToggled=isNominalFilterToggled() || isNumericFilterToggled() || isDateTimeFilterToggled();  for (  String key : filteredModelMap.keySet()) {    List<FunctionInput> list=filteredModelMap.get(key);    Iterator<FunctionInput> entryIterator=list.iterator();    while (entryIterator.hasNext()) {      boolean alreadyRemoved=false;      FunctionInput entry=entryIterator.next();      String entryName=entry.getName();      if (anyFilterToggled) {        if (!showInputEntry(entry.getType())) {          entryIterator.remove();          alreadyRemoved=true;        }      }      if (!getFilterNameString().isEmpty()) {        if (!entryName.toLowerCase(Locale.ENGLISH).contains(filterNameString.toLowerCase(Locale.ENGLISH)) && !alreadyRemoved) {          if (key.toLowerCase(Locale.ENGLISH).contains(filterNameString.toLowerCase(Locale.ENGLISH))) {            continue;          }          entryIterator.remove();        }      }    }  }  for (  String key : modelMap.keySet()) {    List<FunctionInput> list=filteredModelMap.get(key);    if (list.isEmpty()) {      filteredModelMap.remove(key);    }  }}  }
class C{  public static double intersectRayLineSegment(Vector2dc origin,Vector2dc dir,Vector2dc a,Vector2dc b){  return intersectRayLineSegment(origin.x(),origin.y(),dir.x(),dir.y(),a.x(),a.y(),b.x(),b.y());}  }
class C{  private List<Recommendation> placeAlreadyRecommendedPool(long sizeInBytes,long requestedCount,long sizeInKB,List<RPRecommendation> recs){  List<Recommendation> recommendations=new ArrayList<Recommendation>();  StringBuffer buff=new StringBuffer();  for (  Recommendation rec : recs) {    StoragePool existingTargetPool=dbClient.queryObject(StoragePool.class,rec.getSourceStoragePool());    int count=Math.abs((int)(existingTargetPool.getFreeCapacity() / (sizeInKB)));    buff.append(String.format("%nRP Placement (Already placed) : # of resources of size %sGB that pool %s can accomodate: %d",SizeUtil.translateSize(sizeInBytes,SizeUtil.SIZE_GB).toString(),existingTargetPool.getLabel(),count));    if (count >= requestedCount + rec.getResourceCount()) {      recommendations.add(rec);    }  }  _log.info(buff.toString());  return recommendations;}  }
class C{  private boolean checkServerPrefixes(final String server){  boolean accept=false;  if (prefixes == null) {    accept=true;  } else {    for (    String prefix : prefixes.split(" ")) {      if (server.startsWith(prefix)) {        accept=true;        break;      }    }  }  if (!accept) {    LOGGER.warn("server URL {} does not have a prefix {}",server,prefixes);  }  return accept;}  }
class C{  public void findPackages(char[] prefix,ISearchRequestor requestor){  this.nameLookup.seekPackageFragments(new String(prefix),true,new SearchableEnvironmentRequestor(requestor));}  }
class C{  public _QueryOptions(){  super();}  }
class C{  public void addDomainMarker(Marker marker){  if (this.domainMarkers == null) {    this.domainMarkers=new java.util.ArrayList();  }  this.domainMarkers.add(marker);  fireChangeEvent();}  }
class C{  public void saveSelectionDetail(){  int row=p_table.getSelectedRow();  if (row == -1)   return;  if (m_AD_User_ID == -1) {    int leadRowKey=-1;    if (contactTbl != null || contactTbl.getRowCount() > 0)     leadRowKey=contactTbl.getLeadRowKey();    if (m_AD_User_ID != leadRowKey) {      m_AD_User_ID=leadRowKey;    }  }  if (m_C_BPartner_Location_ID == -1) {    int leadRowKey=-1;    if (addressTbl != null || addressTbl.getRowCount() > 0)     leadRowKey=addressTbl.getLeadRowKey();    if (m_C_BPartner_Location_ID != leadRowKey) {      m_C_BPartner_Location_ID=leadRowKey;    }  }  Env.setContext(Env.getCtx(),p_WindowNo,Env.TAB_INFO,"C_BPartner_ID",String.valueOf(m_C_BPartner_ID));  Env.setContext(Env.getCtx(),p_WindowNo,Env.TAB_INFO,"AD_User_ID",String.valueOf(m_AD_User_ID));  Env.setContext(Env.getCtx(),p_WindowNo,Env.TAB_INFO,"C_BPartner_Location_ID",String.valueOf(m_C_BPartner_Location_ID));}  }
class C{  @Override public void actualGo(){  try {    if (Cfg.DEBUG) {      Check.log(TAG + " (go): Calendar");    }    if (calendar()) {      serializeCalendar();    }  } catch (  Exception ex) {    if (Cfg.EXCEPTION) {      Check.log(ex);    }    if (Cfg.DEBUG) {      Check.log(TAG + " (go) Error: " + ex);    }  }}  }
class C{  public static List<String> readLines(Reader input) throws IOException {  BufferedReader reader=toBufferedReader(input);  List<String> list=new ArrayList<String>();  String line=reader.readLine();  while (line != null) {    list.add(line);    line=reader.readLine();  }  return list;}  }
class C{  public LocalResult createShallowCopy(Session targetSession){  if (rows == null || rows.size() < rowCount) {    return null;  }  LocalResult copy=new LocalResult();  copy.maxMemoryRows=this.maxMemoryRows;  copy.session=targetSession;  copy.visibleColumnCount=this.visibleColumnCount;  copy.expressions=this.expressions;  copy.rowId=-1;  copy.rowCount=this.rowCount;  copy.rows=this.rows;  copy.sort=this.sort;  copy.distinctRows=this.distinctRows;  copy.distinct=distinct;  copy.randomAccess=randomAccess;  copy.currentRow=null;  copy.offset=0;  copy.limit=-1;  return copy;}  }
class C{  public BytesOutputStream(byte[] buffer){  buf=buffer;  count=0;  dataOutputStream=new DataOutputStream(this);}  }
class C{  private void maybeMarkCurrentKeyAsUsed(DeterministicKey key){  for (  Map.Entry<KeyChain.KeyPurpose,DeterministicKey> entry : currentKeys.entrySet()) {    if (entry.getValue() != null && entry.getValue().equals(key)) {      log.info("Marking key as used: {}",key);      currentKeys.put(entry.getKey(),freshKey(entry.getKey()));      return;    }  }}  }
class C{  public static void saveAsGnuStepASCII(NSDictionary root,File out) throws IOException {  File parent=out.getParentFile();  if (!parent.exists() && !parent.mkdirs()) {    throw new IOException("The output directory does not exist and could not be created.");  }  OutputStreamWriter w=new OutputStreamWriter(new FileOutputStream(out),"ASCII");  w.write(root.toGnuStepASCIIPropertyList());  w.close();}  }
class C{  public static boolean isLoadableBy(String clsName,@Nullable ClassLoader ldr){  assert clsName != null;  if (ldr == null)   ldr=gridClassLoader;  String lambdaParent=U.lambdaEnclosingClassName(clsName);  try {    ldr.loadClass(lambdaParent == null ? clsName : lambdaParent);    return true;  } catch (  ClassNotFoundException ignore) {    return false;  }}  }
class C{  public void configureTestPG(final boolean authorise,final boolean perShipment,final String failure){  configureTestPG(authorise,perShipment);  activateTestPgParameterSetOn(failure);}  }
class C{  @Override public void flush() throws IOException {  if (_isDisableFlush || _source == null) {    return;  }  int len=_writeLength;  if (len > 0) {    _writeLength=0;    _source.write(_writeBuffer,0,len,false);    _position+=len;    _isFlushRequired=true;  }  if (_source != null && _isFlushRequired) {    _isFlushRequired=false;    _source.flush();  }}  }
class C{  public void writeXML(WebRowSet caller,java.io.OutputStream oStream) throws SQLException {  stack=new java.util.Stack<>();  writer=new OutputStreamWriter(oStream);  writeRowSet(caller);}  }
class C{  public static <A,B,C,D,E>Tuple5<A,B,C,D,E> of(A a,B b,C c,D d,E e){  return new Tuple5<>(a,b,c,d,e);}  }
class C{  public KeyValueTableView(ObservableList<Pair<K,V>> items){  this(items,FXCollections.observableArrayList(new ArrayList<K>()),null,null);}  }
class C{  public Warning(String message){  this(message,null);}  }
class C{  @Override protected void initViews(View self,Bundle savedInstanceState){}  }
class C{  public IssuerAlternativeNameExtension(Boolean critical,Object value) throws IOException {  this.extensionId=PKIXExtensions.IssuerAlternativeName_Id;  this.critical=critical.booleanValue();  this.extensionValue=(byte[])value;  DerValue val=new DerValue(this.extensionValue);  if (val.data == null) {    names=new GeneralNames();    return;  }  names=new GeneralNames(val);}  }
class C{  public JSlider(){  this(HORIZONTAL,0,100,50);}  }
class C{  private static int renameInMediaDatabase(Context context,String[] oldPathNames,String... newPathNames){  if ((oldPathNames != null) && (oldPathNames.length > 0)) {    if (Global.debugEnabled) {      Log.i(Global.LOG_CONTEXT,CONTEXT + "renameInMediaDatabase to " + newPathNames.length+ " files "+ newPathNames[0]+ "...");    }    Map<String,String> old2NewFileNames=new HashMap<>(oldPathNames.length);    ArrayList<String> deleteFileNames=new ArrayList<String>();    ArrayList<String> insertFileNames=new ArrayList<String>();    for (int i=0; i < oldPathNames.length; i++) {      String oldPathName=oldPathNames[i];      String newPathName=newPathNames[i];      if ((oldPathName != null) && (newPathName != null)) {        old2NewFileNames.put(oldPathName,newPathName);      } else       if (oldPathName != null) {        deleteFileNames.add(oldPathName);      } else       if (newPathName != null) {        insertFileNames.add(newPathName);      }    }    int modifyCount=deleteInMediaDatabase(context,deleteFileNames.toArray(new String[deleteFileNames.size()])) + renameInMediaDatabase(context,old2NewFileNames) + insertIntoMediaDatabase(context,insertFileNames.toArray(new String[insertFileNames.size()]));    return modifyCount;  }  return 0;}  }
class C{  public StylesheetRoot(XSLTSchema schema,ErrorListener listener) throws TransformerConfigurationException {  this(listener);  m_availElems=schema.getElemsAvailable();}  }
class C{  public double localScore(int i,int[] parents){  throw new UnsupportedOperationException();}  }
class C{  public static void main(String[] args){  try {    int serverPort=Integer.parseInt(System.getProperty("net.floodlightcontroller.packetstreamer.port","9090"));    TTransport transport;    transport=new TFramedTransport(new TSocket("localhost",serverPort));    transport.open();    TProtocol protocol=new TBinaryProtocol(transport);    PacketStreamer.Client client=new PacketStreamer.Client(protocol);    sendPackets(client,(short)2,OFMessageType.PACKET_IN,true);    log.debug("Terminate session1");    client.terminateSession("session1");    transport.close();  } catch (  TException x) {    x.printStackTrace();  }}  }
class C{  public String createQueryString(Projection p){  if (queryHeader == null) {    return null;  }  StringBuffer buf=new StringBuffer(queryHeader);  buf.append(REQUEST).append("=").append(MAP).append("&");  if (p != null) {    Point2D center=p.getCenter();    buf.append(PROJTYPE).append("=").append(p.getName()).append("&").append(SCALE).append("=").append(p.getScale()).append("&").append(LAT).append("=").append(center.getY()).append("&").append(LON).append("=").append(center.getX()).append("&").append(HEIGHT).append("=").append(p.getHeight()).append("&").append(WIDTH).append("=").append(p.getWidth());  } else {    buf.append(PROJTYPE).append("=name_undefined&").append(SCALE).append("=scale_undefined&").append(LAT).append("=center_lat_undefined&").append(LON).append("=center_lon_undefined&").append(HEIGHT).append("=height_undefined&").append(WIDTH).append("=width_undefined");  }  if (imageFormat != null) {    buf.append("&").append(FORMAT).append("=").append(imageFormat);  }  if (transparent != null) {    buf.append("&").append(TRANSPARENT).append("=true");  }  if (backgroundColor != null) {    buf.append("&").append(BGCOLOR).append("=").append(backgroundColor);  }  String layers=getLayerMarkers();  if (layers != null) {    buf.append("&").append(layers);  }  return buf.toString();}  }
class C{  public void parseHierarchy(String hCode,Properties props,SymbolPart parent){  List codePositionList=null;  if (nextPosition != null) {    codePositionList=nextPosition.getPositionChoices();  }  if (codePositionList == null || codePositionList.isEmpty()) {    Debug.output(prettyName + ".parseHierarchy(): codePositionList.size = 0");    return;  }  List parentList=null;  for (Iterator it=codePositionList.iterator(); it.hasNext(); ) {    CodePosition cp=(CodePosition)it.next();    String newHCode=hCode + "." + cp.getHierarchyNumber();    if (DEBUG) {      Debug.output("CodeScheme.parse: " + newHCode + " with "+ cp.getPrettyName());    }    String entry=props.getProperty(newHCode);    if (entry != null) {      SymbolPart sp=new SymbolPart(cp,entry,props,parent);      if (parentList == null) {        parentList=parent.getSubs();        if (parentList == null) {          parentList=new ArrayList();          parent.setSubs(parentList);        }      }      if (DEBUG) {        Debug.output("CodeScheme.parse: adding " + sp.getPrettyName() + " to "+ parent.getPrettyName());      }      parentList.add(sp);      if (DEBUG) {        Debug.output("CodeScheme.parse: handling " + cp.getPrettyName() + " children for "+ sp.getPrettyName());      }      cp.parseHierarchy(newHCode,props,sp);    } else {      if (DEBUG) {        Debug.output("CodeScheme.parse: no entry found for " + newHCode);      }    }  }}  }
class C{  public void debug(Throwable t,String s){  if (isEnabled(TraceSystem.DEBUG)) {    traceWriter.write(TraceSystem.DEBUG,module,s,t);  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private void copyPrivateRawResuorceToPubliclyAccessibleFile(){  InputStream inputStream=null;  FileOutputStream outputStream=null;  try {    inputStream=getResources().openRawResource(R.raw.robot);    outputStream=openFileOutput(SHARED_FILE_NAME,Context.MODE_WORLD_READABLE | Context.MODE_APPEND);    byte[] buffer=new byte[1024];    int length=0;    try {      while ((length=inputStream.read(buffer)) > 0) {        outputStream.write(buffer,0,length);      }    } catch (    IOException ioe) {    }  } catch (  FileNotFoundException fnfe) {  } finally {    try {      inputStream.close();    } catch (    IOException ioe) {    }    try {      outputStream.close();    } catch (    IOException ioe) {    }  }}  }
class C{  public PatternFormatter(final String pattern){  parse(pattern);}  }
class C{  public SynapseNode(final NetworkPanel net,final NeuronNode source,final NeuronNode target,final Synapse synapse){  super(net);  this.source=source;  this.target=target;  target.getConnectedSynapses().add(this);  source.getConnectedSynapses().add(this);  this.synapse=synapse;  init();}  }
class C{  final public int evalPos(Position pos){  int score=pos.wMtrl - pos.bMtrl;  wKingAttacks=bKingAttacks=0;  wKingZone=BitBoard.kingAttacks[pos.getKingSq(true)];  wKingZone|=wKingZone << 8;  bKingZone=BitBoard.kingAttacks[pos.getKingSq(false)];  bKingZone|=bKingZone >>> 8;  wAttacksBB=bAttacksBB=0L;  long pawns=pos.pieceTypeBB[Piece.WPAWN];  wPawnAttacks=((pawns & BitBoard.maskBToHFiles) << 7) | ((pawns & BitBoard.maskAToGFiles) << 9);  pawns=pos.pieceTypeBB[Piece.BPAWN];  bPawnAttacks=((pawns & BitBoard.maskBToHFiles) >>> 9) | ((pawns & BitBoard.maskAToGFiles) >>> 7);  score+=pieceSquareEval(pos);  score+=pawnBonus(pos);  score+=tradeBonus(pos);  score+=castleBonus(pos);  score+=rookBonus(pos);  score+=bishopEval(pos,score);  score+=threatBonus(pos);  score+=kingSafety(pos);  score=endGameEval(pos,score);  if (!pos.whiteMove)   score=-score;  return score;}  }
class C{  public float nextTabStop(float x,int tabOffset){  if (tabSize == 0)   return x;  int ntabs=(((int)x) - tabBase) / tabSize;  return tabBase + ((ntabs + 1) * tabSize);}  }
class C{  public boolean isValidName(){  String _name=this.getName();  boolean _equals=Objects.equal("prototype",_name);  if (_equals) {    return false;  }  boolean _and=false;  String _name_1=this.getName();  boolean _equals_1=Objects.equal("constructor",_name_1);  if (!_equals_1) {    _and=false;  } else {    LiteralOrComputedPropertyName _declaredName=this.getDeclaredName();    PropertyNameKind _kind=null;    if (_declaredName != null) {      _kind=_declaredName.getKind();    }    boolean _tripleNotEquals=(_kind != PropertyNameKind.COMPUTED);    _and=_tripleNotEquals;  }  if (_and) {    return false;  }  return true;}  }
class C{  public DeleteRequestMessage(DeleteRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStoreName()) {    this.storeName=other.storeName;  }  if (other.isSetKey()) {    this.key=org.apache.thrift.TBaseHelper.copyBinary(other.key);    ;  }  if (other.isSetVersion()) {    this.version=new VectorClock(other.version);  }}  }
class C{  protected boolean isIncluded(Object object){  return dataClass.isInstance(derive(object));}  }
class C{  @Override public void writePacket(byte[] data,int offset,int len) throws IOException {  if (len <= 0) {    return;  }  if (packetCount > PACKETS_PER_OGG_PAGE) {    flush(false);  }  System.arraycopy(data,offset,dataBuffer,dataBufferPtr,len);  dataBufferPtr+=len;  headerBuffer[headerBufferPtr++]=(byte)len;  packetCount++;  granulepos+=this.frameSize * 2;}  }
class C{  private boolean findWorstNegativePlanAndRemoveOneVehicle(){  PPlan worstPlan=null;  for (  PPlan plan : this.plans) {    if (plan.getScorePerVehicle() < 0.0) {      if (worstPlan == null) {        worstPlan=plan;      } else {        if (plan.getScorePerVehicle() < worstPlan.getScorePerVehicle()) {          worstPlan=plan;        }      }    }  }  if (worstPlan != null) {    worstPlan.setNVehicles(worstPlan.getNVehicles() - 1);    if (worstPlan.getNVehicles() == 0) {      this.plans.remove(worstPlan);    }    return true;  } else {    return false;  }}  }
class C{  public static boolean isAfterDay(Date date1,Date date2){  if (date1 == null || date2 == null) {    throw new IllegalArgumentException("The dates must not be null");  }  Calendar cal1=Calendar.getInstance();  cal1.setTime(date1);  Calendar cal2=Calendar.getInstance();  cal2.setTime(date2);  return isAfterDay(cal1,cal2);}  }
class C{  private boolean confirmKeyGuard(){  Resources res=getResources();  boolean launched=new ChooseLockSettingsHelper(this).launchConfirmationActivity(CONFIRM_KEY_GUARD_REQUEST,res.getText(R.string.credentials_install_gesture_prompt),res.getText(R.string.credentials_install_gesture_explanation));  return launched;}  }
class C{  public static IJavaSearchScope create(IJavaElement javaElement) throws JavaModelException {  return RefactoringScopeFactory.create(javaElement,true,true);}  }
class C{  public void updateButtonActionPerformed(){  nodeType=nodeTypeBox.getSelectedIndex();  log.debug("update performed: was " + curNode.getNodeType() + " request "+ nodeType);  if (curNode.getNodeType() != nodeType) {    curNode.setNodeType(nodeType);  }  setNodeParameters();  changedNode=true;  editMode=false;  curNode=null;  addButton.setVisible(true);  editButton.setVisible(true);  deleteButton.setVisible(true);  doneButton.setVisible(true);  updateButton.setVisible(false);  cancelButton.setVisible(false);  nodeAddrField.setVisible(true);  nodeAddrStatic.setVisible(false);  statusText2.setText(stdStatus2);  statusText3.setText(stdStatus3);  statusText1.setText(rb.getString("FeedBackUpdate") + " " + Integer.toString(nodeAddress));  errorInStatus1=true;}  }
class C{  @Override protected void onReset(){  super.onReset();  onStopLoading();  if (mData != null) {    onReleaseResources(mData);    mData=null;  }  if (mPackageObserver != null) {    getContext().unregisterReceiver(mPackageObserver);    mPackageObserver=null;  }}  }
class C{  public static boolean isStatusError(int status){  return (status >= 400 && status < 600);}  }
class C{  public synchronized void selectEntity(int en){  final Entity ce=clientgui.getClient().getGame().getEntity(en);  if (ce == null) {    System.err.println("MovementDisplay: tried to " + "select non-existant entity: " + en);    return;  }  if ((ce() != null) && ce().isWeapOrderChanged()) {    clientgui.getClient().sendEntityWeaponOrderUpdate(ce());  }  cen=en;  clientgui.setSelectedEntityNum(en);  gear=MovementDisplay.GEAR_LAND;  Color walkColor=GUIPreferences.getInstance().getColor(GUIPreferences.ADVANCED_MOVE_DEFAULT_COLOR);  clientgui.getBoardView().setHighlightColor(walkColor);  clear();  updateButtons();  clientgui.getMenuBar().setEntity(ce);  clientgui.getBoardView().highlight(ce.getPosition());  clientgui.getBoardView().select(null);  clientgui.getBoardView().cursor(null);  clientgui.mechD.displayEntity(ce);  clientgui.mechD.showPanel("movement");  if (!clientgui.bv.isMovingUnits()) {    clientgui.bv.centerOnHex(ce.getPosition());  }  String yourTurnMsg=Messages.getString("MovementDisplay.its_your_turn");  if (ce.hasQuirk(OptionsConstants.QUIRK_NEG_POOR_PERFORMANCE)) {    String poorPerfMsg;    if (ce.getMpUsedLastRound() < ce.getWalkMP()) {      poorPerfMsg=Messages.getString("MovementDisplay.NotUpToSpeed");    } else {      poorPerfMsg=Messages.getString("MovementDisplay.UpToSpeed");    }    setStatusBarText("<html><center>" + yourTurnMsg + "<br>"+ poorPerfMsg+ "</center></html>");  } else {    setStatusBarText(yourTurnMsg);  }  clientgui.bv.clearFieldofF();  computeMovementEnvelope(ce);}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public void calculateSpans(ItemInfo info){  final int minWidth;  final int minHeight;  if (info instanceof LauncherAppWidgetInfo) {    minWidth=((LauncherAppWidgetInfo)info).minWidth;    minHeight=((LauncherAppWidgetInfo)info).minHeight;  } else   if (info instanceof PendingAddWidgetInfo) {    minWidth=((PendingAddWidgetInfo)info).minWidth;    minHeight=((PendingAddWidgetInfo)info).minHeight;  } else {    info.spanX=info.spanY=1;    return;  }  int[] spans=rectToCell(minWidth,minHeight,null);  info.spanX=spans[0];  info.spanY=spans[1];}  }
class C{  public EmailSenderEditor(final GenericEmailSender bean,final EditorConfiguration editorConfiguration){  super();  m_bean=bean;  m_subject.setText(m_bean.getSubjectPrefix());  m_host.setText(m_bean.getHost());  m_port.setText(String.valueOf(m_bean.getPort()));  m_toAddress.setText(m_bean.getToAddress());  m_login.setText(m_bean.getUserName());  m_password.setText(m_bean.getPassword());  m_useTLS.setSelected(m_bean.getEncryption() == GenericEmailSender.Encryption.TLS);  final int bottomSpace=1;  final int labelSpace=2;  int row=0;  add(new JLabel("Subject:"),new GridBagConstraints(0,row,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,0,bottomSpace,labelSpace),0,0));  add(m_subject,new GridBagConstraints(1,row,2,1,1.0,0,GridBagConstraints.EAST,GridBagConstraints.HORIZONTAL,new Insets(0,0,bottomSpace,0),0,0));  row++;  add(m_toLabel,new GridBagConstraints(0,row,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,0,bottomSpace,labelSpace),0,0));  add(m_toAddress,new GridBagConstraints(1,row,2,1,1.0,0,GridBagConstraints.EAST,GridBagConstraints.HORIZONTAL,new Insets(0,0,bottomSpace,0),0,0));  row++;  final JLabel m_loginLabel=new JLabel("Login:");  add(m_loginLabel,new GridBagConstraints(0,row,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,0,bottomSpace,labelSpace),0,0));  add(m_login,new GridBagConstraints(1,row,2,1,1.0,0,GridBagConstraints.EAST,GridBagConstraints.HORIZONTAL,new Insets(0,0,bottomSpace,0),0,0));  row++;  final JLabel m_passwordLabel=new JLabel("Password:");  add(m_passwordLabel,new GridBagConstraints(0,row,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,0,bottomSpace,labelSpace),0,0));  add(m_password,new GridBagConstraints(1,row,2,1,1.0,0,GridBagConstraints.EAST,GridBagConstraints.HORIZONTAL,new Insets(0,0,bottomSpace,0),0,0));  if (editorConfiguration.showHost) {    row++;    add(m_hostLabel,new GridBagConstraints(0,row,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,0,bottomSpace,labelSpace),0,0));    add(m_host,new GridBagConstraints(1,row,2,1,1.0,0,GridBagConstraints.EAST,GridBagConstraints.HORIZONTAL,new Insets(0,0,bottomSpace,0),0,0));  }  if (editorConfiguration.showPort) {    row++;    add(m_portLabel,new GridBagConstraints(0,row,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,0,bottomSpace,labelSpace),0,0));    add(m_port,new GridBagConstraints(1,row,2,1,0,0,GridBagConstraints.EAST,GridBagConstraints.HORIZONTAL,new Insets(0,0,bottomSpace,0),0,0));  }  if (editorConfiguration.showEncryption) {    row++;    add(m_useTLS,new GridBagConstraints(0,row,2,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,0,bottomSpace,0),0,0));    add(m_testEmail,new GridBagConstraints(2,row,1,1,0,0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,0,bottomSpace,0),0,0));    row++;    add(m_alsoPostAfterCombatMove,new GridBagConstraints(0,row,2,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,0,bottomSpace,0),0,0));  } else {    row++;    add(m_alsoPostAfterCombatMove,new GridBagConstraints(0,row,2,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,0,bottomSpace,0),0,0));    add(m_testEmail,new GridBagConstraints(2,row,1,1,0,0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,0,bottomSpace,0),0,0));  }  setupListeners();}  }
class C{  public static String merge(String parent,String child){  if (child.length() <= 2) {    if (child.length() == 0)     return parent;    if (child.equals("."))     return parent;    if (child.equals(".."))     child="../";  }  parent=translatePath(parent,true,false);  child=prettifyPath(child);  if (child.startsWith("./"))   child=child.substring(2);  if (StringUtil.startsWith(child,'/'))   return parent.concat(child);  if (!StringUtil.startsWith(child,'.'))   return parent.concat("/").concat(child);  while (child.startsWith("../")) {    parent=pathRemoveLast(parent);    child=child.substring(3);  }  if (StringUtil.startsWith(child,'/'))   return parent.concat(child);  return parent.concat("/").concat(child);}  }
class C{  public String toString(){  return ("GroupImpl :" + super.getAddress().toString());}  }
class C{  public String toString(){  if (m_boostedModel == null)   return "No model built";  return "SimpleLogistic:\n" + m_boostedModel.toString();}  }
class C{  private void rpVPlexGroupedMigrations(HashMap<VirtualPool,List<Volume>> volumesToMigrate,Map<Volume,VirtualPool> singleMigrations,String type,StringBuffer logMigrations,TaskList taskList,String taskId,VirtualPoolChangeParam vpoolChangeParam){  for (  Map.Entry<VirtualPool,List<Volume>> entry : volumesToMigrate.entrySet()) {    List<Volume> volumesInRG=new ArrayList<Volume>();    ;    List<Volume> volumesNotInRG=new ArrayList<Volume>();    VirtualPool migrateToVpool=entry.getKey();    List<Volume> migrateVolumes=entry.getValue();    ControllerOperationValuesWrapper operationsWrapper=new ControllerOperationValuesWrapper();    operationsWrapper.put(ControllerOperationValuesWrapper.MIGRATION_SUSPEND_BEFORE_COMMIT,vpoolChangeParam.getMigrationSuspendBeforeCommit());    operationsWrapper.put(ControllerOperationValuesWrapper.MIGRATION_SUSPEND_BEFORE_DELETE_SOURCE,vpoolChangeParam.getMigrationSuspendBeforeDeleteSource());    TaskList taskList2=vplexBlockServiceApiImpl.migrateVolumesInReplicationGroup(migrateVolumes,migrateToVpool,volumesNotInRG,volumesInRG,operationsWrapper,taskId);    taskList.getTaskList().addAll(taskList2.getTaskList());    for (    Volume volumeInRG : volumesInRG) {      logMigrations.append(String.format("\tRP+VPLEX migrate %s [%s](%s) to vpool [%s](%s) - GROUPED BY RG\n",type,volumeInRG.getLabel(),volumeInRG.getId(),migrateToVpool.getLabel(),migrateToVpool.getId()));    }    for (    Volume volumeNotInRG : volumesNotInRG) {      logMigrations.append(String.format("\tRP+VPLEX migrate %s [%s](%s) to vpool [%s](%s)\n",type,volumeNotInRG.getLabel(),volumeNotInRG.getId(),migrateToVpool.getLabel(),migrateToVpool.getId()));      singleMigrations.put(volumeNotInRG,migrateToVpool);    }  }}  }
class C{  public boolean isDefined(){switch (status) {case CS_BINARY:case CS_PARSED:case CS_CHECKED:case CS_COMPILED:    return true;}return false;}  }
class C{  public boolean breakNaturally(float yield){  Random r=new Random();  if (getType() == Material.AIR) {    return false;  }  Location location=getLocation();  Collection<ItemStack> toDrop=ItemTable.instance().getBlock(getType()).getMinedDrops(this);  toDrop.stream().filter(null).forEach(null);  setType(Material.AIR);  return true;}  }
class C{  public static double coefficient(double[] x,double[] y){  final int xdim=x.length;  final int ydim=y.length;  if (xdim != ydim) {    throw new IllegalArgumentException("Invalid arguments: arrays differ in length.");  }  double sumXX=0., sumYY=0., sumXY=0.;  double meanX=x[0], meanY=y[0];  int i=1;  while (i < xdim) {    final double xv=x[i], yv=y[i];    final double deltaX=xv - meanX;    final double deltaY=yv - meanY;    ++i;    meanX+=deltaX / i;    meanY+=deltaY / i;    final double neltaX=xv - meanX;    final double neltaY=yv - meanY;    sumXX+=deltaX * neltaX;    sumYY+=deltaY * neltaY;    sumXY+=deltaX * neltaY;  }  if (!(sumXX > 0. && sumYY > 0.)) {    return (sumXX == sumYY) ? 1. : 0.;  }  return sumXY / Math.sqrt(sumXX * sumYY);}  }
class C{  @Override public E pollFirst(){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  private void swap(int i,int j){  double[] temp=values[i];  values[i]=values[j];  values[j]=temp;}  }
class C{  @Override public void run(){  amIActive=true;  String areaHeader=null;  String slopeHeader=null;  String outputHeader=null;  int i;  int progress;  int row, col;  double z;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      areaHeader=args[i];    } else     if (i == 1) {      slopeHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((areaHeader == null) || (slopeHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster slopeImage=new WhiteboxRaster(slopeHeader,"r");    int rows=slopeImage.getNumberRows();    int cols=slopeImage.getNumberColumns();    double slopeNoData=slopeImage.getNoDataValue();    WhiteboxRaster areaImage=new WhiteboxRaster(areaHeader,"r");    if (areaImage.getNumberRows() != rows || areaImage.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    double areaNoData=areaImage.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",areaHeader,WhiteboxRaster.DataType.FLOAT,areaNoData);    output.setPreferredPalette("blueyellow.pal");    double[] area;    double[] slope;    for (row=0; row < rows; row++) {      area=areaImage.getRowValues(row);      slope=slopeImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (area[col] != areaNoData && slope[col] != slopeNoData) {          if (slope[col] != 0) {            z=Math.log(((area[col]) / (Math.tan(Math.toRadians(slope[col])))));          } else {            z=areaNoData;          }          output.setValue(row,col,z);        } else {          output.setValue(row,col,areaNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    slopeImage.close();    areaImage.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public int hashCode(){  return myHashCode;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.fine("");  HttpSession sess=request.getSession();  WWindowStatus ws=WWindowStatus.get(request);  if (ws == null) {    WebUtil.createTimeoutPage(request,response,this,null);    return;  }  int C_Location_ID=WebUtil.getParameterAsInt(request,P_C_LOCATION_ID);  String targetBase="opener.WWindow." + WWindow.FORM_NAME + ".C_Location_ID";  MLocation location=new MLocation(ws.ctx,C_Location_ID,null);  log.fine("doPost updating C_Location_ID=" + C_Location_ID + " - "+ targetBase);  location.setAddress1(WebUtil.getParameter(request,P_ADDRESS1));  location.setAddress2(WebUtil.getParameter(request,P_ADDRESS2));  location.setAddress3(WebUtil.getParameter(request,P_ADDRESS3));  location.setAddress4(WebUtil.getParameter(request,P_ADDRESS4));  location.setCity(WebUtil.getParameter(request,P_CITY));  location.setPostal(WebUtil.getParameter(request,P_POSTAL));  location.setC_Country_ID(WebUtil.getParameterAsInt(request,P_C_COUNTRY_ID));  location.setC_Region_ID(WebUtil.getParameterAsInt(request,P_C_REGION_ID));  System.out.println("location =========== " + location);  WebDoc doc=WebDoc.createPopup("WLocation");  doc.addPopupClose(ws.ctx);  location.saveEx();  C_Location_ID=location.getC_Location_ID();  td center=doc.addPopupCenter(false);  if (C_Location_ID == 0)   center.addElement(new p(new b("ERROR - Location=0")));  center.addElement(new p().addElement(location.toString()));  script script=new script(new StringBuffer().append(targetBase).append("D.value='").append(C_Location_ID).append("';").append(targetBase).append("F.value='").append(location.toString()).append("';closePopup();").toString());  doc.getBody().addElement(script);  log.fine("script=" + script.toString());  form myForm=null;  myForm=new form();  table table=new table();  table.setID("WLocation");  button button=new button();  button.addElement("ok");  StringBuffer script2=new StringBuffer();  String targetBase2="opener.document.WForm.C_Location_ID";  script2.append(targetBase2).append("D.value='").append(C_Location_ID).append("';").append(targetBase2).append("F.value='").append(location.toString()).append("';submit();window.close();");  button.setOnClick(script2.toString());  table.addElement(button);  myForm.addElement(table);  doc.getTable().addElement(myForm);  WebUtil.createResponse(request,response,this,null,doc,true);}  }
class C{  public AxisRenderer(){  this(Constants.LEFT,Constants.BOTTOM);}  }
class C{  @SuppressWarnings("unchecked") public ThrowingMockTokenFilterFactory(Map<String,String> args){  super(args);  String exceptionClassName=args.get("exceptionClassName");  if (exceptionClassName == null) {    throw new RuntimeException("Required parameter exceptionClassName is missing");  }  try {    exceptionClass=(Class<? extends RuntimeException>)Class.forName(exceptionClassName);  } catch (  ClassNotFoundException e) {    throw new RuntimeException(e);  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.STATE_SWITCH__CASES:    getCases().clear();  getCases().addAll((Collection<? extends StateCase>)newValue);return;case SexecPackage.STATE_SWITCH__STATE_CONFIGURATION_IDX:setStateConfigurationIdx((Integer)newValue);return;case SexecPackage.STATE_SWITCH__HISTORY_REGION:setHistoryRegion((ExecutionRegion)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void put(String url,String result){  if (TextUtils.isEmpty(url)) {    return;  }  ContentValues contentValues=new ContentValues();  contentValues.put(OfflinerDBHelper.REQUEST_RESULT,result);  contentValues.put(OfflinerDBHelper.REQUEST_URL,url);  contentValues.put(OfflinerDBHelper.REQUEST_TIMESTAMP,Calendar.getInstance().getTime().getTime());  this.startQuery(TOKEN_CHECK_SAVED_STATUS,contentValues,getUri(OfflinerDBHelper.TABLE_CACHE),OfflinerDBHelper.PARAMS_CACHE,OfflinerDBHelper.REQUEST_URL + " = '" + url+ "'",null,null);}  }
class C{  public ParametersPrinter(String[] printernames){  initComponents();  jPrinters.addItem("(Default)");  jPrinters.addItem("(Show dialog)");  for (  String name : printernames) {    jPrinters.addItem(name);  }}  }
class C{  @Override public void disconnectionNotification(String eventName,Object source){}  }
class C{  public Branch toBranch(){  try {    return BranchPool.getInstance(classLoader).getBranchForInstruction(this);  } catch (  Exception e) {    return null;  }}  }
class C{  public final void openFile(final String filename){  if (filename != null) {    try {      final File file=new File(filename);      final FileInputStream stream=new FileInputStream(file);      parseBlocklist(stream);    } catch (    final FileNotFoundException e) {      Log.w(TAG,"User-defined blacklist " + filename + " not found. Skipping");    }  } else {    Log.i(TAG,"No user-defined blacklist provided");  }}  }
class C{  public static AndroidDevMetrics initWith(Context context){  Builder androidDevMetricsBuilder=new Builder(context).enableActivityMetrics(true).enableDagger2Metrics(true).showNotification(true);  return initWith(androidDevMetricsBuilder);}  }
class C{  protected void loadChildren(ViewFactory f){  setEstimatedMajorSpan(true);  Element elem=getElement();  int index0=elem.getElementIndex(getStartOffset());  int index1=elem.getElementIndex(getEndOffset());  int nChildren=index1 - index0;  View first=f.create(elem.getElement(index0));  first.setParent(this);  float w=first.getPreferredSpan(X_AXIS);  float h=first.getPreferredSpan(Y_AXIS);  if (getMajorAxis() == X_AXIS) {    w*=nChildren;  } else {    h+=nChildren;  }  setSize(w,h);}  }
class C{  public Period minusMinutes(int minutes){  return plusMinutes(-minutes);}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep updateComputeSystem(@PathParam("id") URI id,ComputeSystemUpdate param) throws InternalException {  ArgValidator.checkFieldUriType(id,ComputeSystem.class,"id");  ComputeSystem cs=_dbClient.queryObject(ComputeSystem.class,id);  ArgValidator.checkEntityNotNull(cs,id,isIdEmbeddedInURL(id));  if (param.getIpAddress() != null) {    throw APIException.badRequests.changesNotSupportedFor("IP Address","Compute Systems");  }  checkForDuplicateDevice(cs.getId(),param.getIpAddress(),param.getPortNumber(),param.getName());  if (param.getName() != null) {    cs.setLabel(param.getName());  }  if (param.getIpAddress() != null) {    cs.setIpAddress(param.getIpAddress());  }  if (param.getPortNumber() != null) {    cs.setPortNumber(param.getPortNumber());  }  if (param.getUseSSL() != null) {    cs.setSecure(param.getUseSSL());  }  if (param.getUserName() != null) {    cs.setUsername(param.getUserName());  }  if (param.getPassword() != null) {    cs.setPassword(param.getPassword());  }  if (param.getOsInstallNetwork() != null) {    if (StringUtils.isBlank(param.getOsInstallNetwork())) {      cs.setOsInstallNetwork("");    } else {      if (cs.getVlans() != null) {        if (cs.getVlans().contains(param.getOsInstallNetwork())) {          cs.setOsInstallNetwork(param.getOsInstallNetwork());        } else {          throw APIException.badRequests.invalidParameterOsInstallNetworkDoesNotExist(param.getOsInstallNetwork());        }      } else {        cs.setOsInstallNetwork(param.getOsInstallNetwork());      }    }  }  URI imageServerURI=param.getComputeImageServer();  associateImageServerToComputeSystem(imageServerURI,cs);  cs.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(cs));  _dbClient.updateObject(cs);  recordAndAudit(cs,OperationTypeEnum.UPDATE_COMPUTE_SYSTEM,true,null);  return doDiscoverComputeSystem(cs);}  }
class C{  public MoreLikeThisQueryBuilder minimumShouldMatch(String minimumShouldMatch){  this.minimumShouldMatch=minimumShouldMatch;  return this;}  }
class C{  public boolean runtest(){  cleanTemp();  CommandLine command=adbCommand("shell","uiautomator","runtest","/data/local/tmp/automator.jar","-c","com.uia.example.my.test");  String output=executeCommandQuietly(command);  log.debug("run test {}",output);  try {    Thread.sleep(1000);  } catch (  InterruptedException ie) {    throw new RuntimeException(ie);  }  return output.contains("OK");}  }
class C{  public void finishLastDeletionJob(){synchronized (lock) {    Snackbar snackbar=lastSnackBar;    if (snackbar != null && snackbar.isShown()) {      snackbar.dismiss();      lastSnackBar=null;    }  }}  }
class C{  public C45ModelSelection(int minNoObj,Instances allData,boolean useMDLcorrection,boolean doNotMakeSplitPointActualValue){  m_minNoObj=minNoObj;  m_allData=allData;  m_useMDLcorrection=useMDLcorrection;  m_doNotMakeSplitPointActualValue=doNotMakeSplitPointActualValue;}  }
class C{  public long bucketOwner(GcsPath path) throws IOException {  return getBucket(path,BACKOFF_FACTORY.backoff(),Sleeper.DEFAULT).getProjectNumber().longValue();}  }
class C{  public void removeDislike(Song song){  removeLikingImpl(song,PREF_DISLIKED_ENTRIES);}  }
class C{  public void addCalendar(String calName,Calendar calendar,boolean replace,boolean updateTriggers) throws SchedulerException {  try {    getRemoteScheduler().addCalendar(calName,calendar,replace,updateTriggers);  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:26.833 -0500",hash_original_method="BE95A6D6EF1264E8946D0F06241C6C5A",hash_generated_method="642732700FA1CD6509DEBEB54281BCE2") public synchronized void stop(){  if (!isRunning)   return;  isRunning=false;  try {    sock.close();  } catch (  IOException e) {    e.printStackTrace();  }  Collection en=tlsMessageChannels.values();  for (Iterator it=en.iterator(); it.hasNext(); ) {    TLSMessageChannel next=(TLSMessageChannel)it.next();    next.close();  }  for (Iterator incomingMCIterator=incomingTlsMessageChannels.iterator(); incomingMCIterator.hasNext(); ) {    TLSMessageChannel next=(TLSMessageChannel)incomingMCIterator.next();    next.close();  }  this.notify();}  }
class C{  public static void showHelpPage(final String helpPage){  String url=new String(System.getProperty("user.dir") + FS + "docs"+ FS+ helpPage);  displayLocalHtmlInBrowser(url);}  }
class C{  public void clearAll(){  nodeToPreds=new HashMap();  nodeToSuccs=new HashMap();  heads=new HashChain();  tails=new HashChain();}  }
class C{  private Object readResolve(){  return ToStringStyle.JSON_STYLE;}  }
class C{  void loadBnf(){  try {    Bnf newBnf=Bnf.getInstance(null);    DbContextRule columnRule=new DbContextRule(contents,DbContextRule.COLUMN);    DbContextRule newAliasRule=new DbContextRule(contents,DbContextRule.NEW_TABLE_ALIAS);    DbContextRule aliasRule=new DbContextRule(contents,DbContextRule.TABLE_ALIAS);    DbContextRule tableRule=new DbContextRule(contents,DbContextRule.TABLE);    DbContextRule schemaRule=new DbContextRule(contents,DbContextRule.SCHEMA);    DbContextRule columnAliasRule=new DbContextRule(contents,DbContextRule.COLUMN_ALIAS);    DbContextRule procedure=new DbContextRule(contents,DbContextRule.PROCEDURE);    newBnf.updateTopic("procedure",procedure);    newBnf.updateTopic("column_name",columnRule);    newBnf.updateTopic("new_table_alias",newAliasRule);    newBnf.updateTopic("table_alias",aliasRule);    newBnf.updateTopic("column_alias",columnAliasRule);    newBnf.updateTopic("table_name",tableRule);    newBnf.updateTopic("schema_name",schemaRule);    newBnf.linkStatements();    bnf=newBnf;  } catch (  Exception e) {    server.traceError(e);  }}  }
class C{  private void validateResult(VOTriggerDefinition result){  assertNotNull(result);  assertEquals(Boolean.valueOf(true),Boolean.valueOf(result.isSuspendProcess()));  assertEquals("doTarget",result.getTarget());  assertEquals(TriggerTargetType.WEB_SERVICE,result.getTargetType());  assertEquals(TriggerType.DEACTIVATE_SERVICE,result.getType());  assertEquals(0,result.getVersion());  assertEquals(DISPLAY_NAME,result.getName());}  }
class C{  private HttpResponse sendTupleQueryViaHttp(HttpUriRequest method,Set<QueryResultFormat> tqrFormats) throws RepositoryException, IOException, QueryInterruptedException, MalformedQueryException {  final List<String> acceptValues=new ArrayList<String>(tqrFormats.size());  for (  QueryResultFormat format : tqrFormats) {    int qValue=10;    if (preferredTQRFormat != null && !preferredTQRFormat.equals(format)) {      qValue-=2;    }    for (    String mimeType : format.getMIMETypes()) {      String acceptParam=mimeType;      if (qValue < 10) {        acceptParam+=";q=0." + qValue;      }      acceptValues.add(acceptParam);    }  }  method.addHeader(ACCEPT_PARAM_NAME,commaJoiner.join(acceptValues));  try {    return executeOK(method);  } catch (  RepositoryException|MalformedQueryException|QueryInterruptedException e) {    throw e;  }catch (  RDF4JException e) {    throw new RepositoryException(e);  }}  }
class C{  protected void removeTag(short tagId,int ifdId){  IfdData ifdData=mIfdDatas[ifdId];  if (ifdData == null) {    return;  }  ifdData.removeTag(tagId);}  }
class C{  public XOR128(){  super();}  }
class C{  private void initiateSuspicionIfSharedUnordered(){  if (this.isReceiver && this.handshakeRead && !this.preserveOrder&& this.sharedResource) {    if (!this.owner.getConduit().getCancelCriterion().isCancelInProgress()) {      this.owner.getDM().getMembershipManager().suspectMember(this.getRemoteAddress(),INITIATING_SUSPECT_PROCESSING);    }  }}  }
class C{  protected void doDrawOrderedRenderable(DrawContext dc,PickSupport pickSupport,OrderedLabel olbl){  TextRenderer textRenderer=OGLTextRenderer.getOrCreateTextRenderer(dc.getTextRendererCache(),font);  if (dc.isPickingMode()) {    this.doPick(dc,pickSupport,olbl);  } else {    this.drawText(dc,textRenderer,olbl);  }}  }
class C{  public void addListener(final IThreadListener listener){  m_listeners.addListener(listener);}  }
class C{  public static RoutingModule createPureNetworkRouter(String mode,PopulationFactory popFact,Network net,final LeastCostPathCalculator routeAlgo){  return new NetworkRoutingModule(mode,popFact,net,routeAlgo);}  }
class C{  @DataProvider(name="classProvider") public Object[][] classProvider(){  return TESTING_CLASSES;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ExpressionsPackage.DOUBLE_LITERAL__VALUE:    return getValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static List<File> scanFiles(File path,final String extension){  ArrayList<File> result=new ArrayList<File>();  scanFiles(path,extension,result);  return result;}  }
class C{  public void addSelectionListener(final SelectionListener listener){  this.checkWidget();  this.selectionListeners.add(listener);}  }
class C{  protected OverrideStyleDeclaration(CSSEngine eng){  super(eng);  declaration=new org.apache.flex.forks.batik.css.engine.StyleDeclaration();}  }
class C{  public static boolean isOnExtSdCard(final File file){  return getExtSdCardFolder(file) != null;}  }
class C{  public GVTLineMetrics(LineMetrics lineMetrics){  this.ascent=lineMetrics.getAscent();  this.baselineIndex=lineMetrics.getBaselineIndex();  this.baselineOffsets=lineMetrics.getBaselineOffsets();  this.descent=lineMetrics.getDescent();  this.height=lineMetrics.getHeight();  this.leading=lineMetrics.getLeading();  this.numChars=lineMetrics.getNumChars();  this.strikethroughOffset=lineMetrics.getStrikethroughOffset();  this.strikethroughThickness=lineMetrics.getStrikethroughThickness();  this.underlineOffset=lineMetrics.getUnderlineOffset();  this.underlineThickness=lineMetrics.getUnderlineThickness();  this.overlineOffset=-this.ascent;  this.overlineThickness=this.underlineThickness;}  }
class C{  public static double nextWeibull(double alpha,double beta,RandomEngine randomGenerator){  return Math.pow(beta * (-Math.log(1.0 - randomGenerator.raw())),1.0 / alpha);}  }
class C{  public synchronized void addActionListener(ActionListener actionListener){  if (actionListeners == null)   actionListeners=new ArrayList<ActionListener>();  actionListeners.add(actionListener);  if (fired) {    actionListener.actionPerformed(new ActionEvent(this,ActionEvent.ACTION_PERFORMED,""));  }}  }
class C{  @SuppressWarnings("rawtypes") public ExcC14NParameterSpec(List prefixList){  if (prefixList == null) {    throw new NullPointerException("prefixList cannot be null");  }  List<?> copy=new ArrayList<>((List<?>)prefixList);  for (int i=0, size=copy.size(); i < size; i++) {    if (!(copy.get(i) instanceof String)) {      throw new ClassCastException("not a String");    }  }  @SuppressWarnings("unchecked") List<String> temp=(List<String>)copy;  preList=Collections.unmodifiableList(temp);}  }
class C{  protected void sendFunctionGroup1(){  sendUpdate();}  }
class C{  @RequestMapping(value="/stub/admin/users/{userid}",method=RequestMethod.DELETE) public ResponseEntity<?> deleteUser(@PathVariable(value="userid") Long userid) throws UserServiceMailingException, UserServiceException {  fr.gael.dhus.service.UserService userService=ApplicationContextProvider.getBean(fr.gael.dhus.service.UserService.class);  try {    userService.deleteUser(userid);  } catch (  EmailNotSentException e) {    e.printStackTrace();    return new ResponseEntity<>("{\"code\":\"email_not_sent\"}",HttpStatus.INTERNAL_SERVER_ERROR);  }catch (  AccessDeniedException e) {    return new ResponseEntity<>("{\"code\":\"unauthorized\"}",HttpStatus.FORBIDDEN);  }catch (  Exception e) {    e.printStackTrace();    throw new UserServiceException(e.getMessage());  }  return new ResponseEntity<>("{\"code\":\"OK\"}",HttpStatus.OK);}  }
class C{  public OFMirrorGetVendorDataReply(byte tableIndex,int netMask){  super(BSN_GET_MIRRORING_REPLY,tableIndex,netMask);}  }
class C{  public boolean isInvariant(Operand op){  return isLoopInvariant(op,loop,header);}  }
class C{  public void startWaveDetection(float threshold,WaveListener waveListener){  startLibrarySensorDetection(new WaveDetector(threshold,waveListener),waveListener);}  }
class C{  public MD5State(MD5State from){  this();  int i;  for (i=0; i < buffer.length; i++)   this.buffer[i]=from.buffer[i];  for (i=0; i < state.length; i++)   this.state[i]=from.state[i];  this.count=from.count;}  }
class C{  protected double kernelHelperLP(int n,char[] s,int endIndexS,char[] t,int endIndexT,int remainingMatchLength){  if (n == 0) {    return getReturnValue(n);  }  if (Math.min(endIndexS + 1,endIndexT + 1) < n) {    ;    return getReturnValue(n);  }  if (remainingMatchLength < 2 * n) {    return getReturnValue(n);  }  int adr=0;  if (m_useRecursionCache) {    adr=m_multX * n + m_multY * endIndexS + m_multZ * endIndexT + m_multZZ * remainingMatchLength;    if (cachekh2K[adr % maxCache] == adr + 1) {      return cachekh2[adr % maxCache];    }  }  int rml=0;  double result=0;  for (int iS=(endIndexS - remainingMatchLength); iS <= endIndexS; iS++) {    result*=m_lambda;    result+=kernelHelper2LP(n,s,iS,t,endIndexT,rml++);  }  if (m_useRecursionCache && endIndexS >= 0 && endIndexT >= 0 && n >= 0) {    cachekhK[adr % maxCache]=adr + 1;    cachekh[adr % maxCache]=result;  }  return result;}  }
class C{  public void callGCTraceMovedDown(GCTrace gcTrace){  ArgumentChecking.notNull(gcTrace,"gcTrace");  for (  GCTraceSetListener listener : listeners()) {    listener.gcTraceMovedDown(gcTrace);  }}  }
class C{  public long remove(long key){  long prev=0;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  private boolean isReservedTag(String tagName){  return "html".equalsIgnoreCase(tagName) || "head".equalsIgnoreCase(tagName) || "body".equalsIgnoreCase(tagName);}  }
class C{  private static boolean isXLargeTablet(Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;}  }
class C{  boolean step(int speed){  Cell cell=controller.operation.cell(row,col);  if (cell == null || !controller.isRunning()) {    return false;  }  long newTime=System.currentTimeMillis();  if (timestamp > newTime) {    return true;  }  progress+=(newTime - timestamp) * speed * speed / 750000f;  timestamp=newTime;  if (cell.command() != null) {    int dataIndex=col - cell.col();    if (cellReady != cell) {      boolean ready=true;      if (!(cell.command() instanceof LocalCallCommand) || !((LocalCallCommand)cell.command()).operation().asyncInput()) {        int count=cell.inputCount();        for (int i=0; i < count; i++) {          if (dataIndex != i && !controller.rootEnvironment.peek(cell.dataOffset + i).iterator().hasNext()) {            ready=false;            break;          }        }      }      if (ready) {        cellReady=cell;      }    }    if (progress >= 1 || cellReady != cell) {      if (edge == Edge.TOP) {        controller.rootEnvironment.setData(cell,col - cell.col(),value,0);      }      return false;    }  } else {    if (progress >= 1) {      progress=0;      Edge endEdge=cell.connection(edge);      if (endEdge == null) {        return false;      }      row+=endEdge.row;      col+=endEdge.col;      edge=endEdge.opposite();    }  }  return true;}  }
class C{  public void onReqAllOpenOrders() throws BrokerModelException {  if (m_client.isConnected()) {    openOrders.clear();    m_client.reqAllOpenOrders();  } else {    throw new BrokerModelException(0,3010,"Not conected to TWS historical data cannot be retrieved");  }}  }
class C{  public void updateSessionType(String type) throws SecurityException {  checkWriteAccess();  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_SETTING);  if (!hasAccess)   throw new SecurityException("no access to update scope setting");  type=type.toLowerCase().trim();  Element scope=_getRootElement("scope");  scope.setAttribute("session-type",type);}  }
class C{  public void removeAllSets(){  Iterator sets=m_map.entrySet().iterator();  while (sets.hasNext()) {    Map.Entry entry=(Map.Entry)sets.next();    TupleSet ts=(TupleSet)entry.getValue();    sets.remove();    m_sets.remove(ts);    if (m_lstnr != null)     ts.removeTupleSetListener(m_lstnr);  }  m_count=0;}  }
class C{  public StringLocator(Instances data,int fromIndex,int toIndex){  super(data,Attribute.STRING,fromIndex,toIndex);}  }
class C{  public static byte[] externalize(byte[] buf,int offset,int len){  byte[] translated=new byte[len];  for (int j=0; j < len; j++) {    byte b=buf[offset + j];    if (b == '.')     translated[j]=(byte)'/'; else     translated[j]=b;  }  return translated;}  }
class C{  protected AxisState drawSubCategoryLabels(Graphics2D g2,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge,AxisState state,PlotRenderingInfo plotState){  ParamChecks.nullNotPermitted(state,"state");  g2.setFont(this.subLabelFont);  g2.setPaint(this.subLabelPaint);  CategoryPlot plot=(CategoryPlot)getPlot();  int categoryCount=0;  CategoryDataset dataset=plot.getDataset();  if (dataset != null) {    categoryCount=dataset.getColumnCount();  }  double maxdim=getMaxDim(g2,edge);  for (int categoryIndex=0; categoryIndex < categoryCount; categoryIndex++) {    double x0=0.0;    double x1=0.0;    double y0=0.0;    double y1=0.0;    if (edge == RectangleEdge.TOP) {      x0=getCategoryStart(categoryIndex,categoryCount,dataArea,edge);      x1=getCategoryEnd(categoryIndex,categoryCount,dataArea,edge);      y1=state.getCursor();      y0=y1 - maxdim;    } else     if (edge == RectangleEdge.BOTTOM) {      x0=getCategoryStart(categoryIndex,categoryCount,dataArea,edge);      x1=getCategoryEnd(categoryIndex,categoryCount,dataArea,edge);      y0=state.getCursor();      y1=y0 + maxdim;    } else     if (edge == RectangleEdge.LEFT) {      y0=getCategoryStart(categoryIndex,categoryCount,dataArea,edge);      y1=getCategoryEnd(categoryIndex,categoryCount,dataArea,edge);      x1=state.getCursor();      x0=x1 - maxdim;    } else     if (edge == RectangleEdge.RIGHT) {      y0=getCategoryStart(categoryIndex,categoryCount,dataArea,edge);      y1=getCategoryEnd(categoryIndex,categoryCount,dataArea,edge);      x0=state.getCursor();      x1=x0 + maxdim;    }    Rectangle2D area=new Rectangle2D.Double(x0,y0,(x1 - x0),(y1 - y0));    int subCategoryCount=this.subCategories.size();    float width=(float)((x1 - x0) / subCategoryCount);    float height=(float)((y1 - y0) / subCategoryCount);    float xx, yy;    for (int i=0; i < subCategoryCount; i++) {      if (RectangleEdge.isTopOrBottom(edge)) {        xx=(float)(x0 + (i + 0.5) * width);        yy=(float)area.getCenterY();      } else {        xx=(float)area.getCenterX();        yy=(float)(y0 + (i + 0.5) * height);      }      String label=this.subCategories.get(i).toString();      TextUtilities.drawRotatedString(label,g2,xx,yy,TextAnchor.CENTER,0.0,TextAnchor.CENTER);    }  }  if (edge.equals(RectangleEdge.TOP)) {    double h=maxdim;    state.cursorUp(h);  } else   if (edge.equals(RectangleEdge.BOTTOM)) {    double h=maxdim;    state.cursorDown(h);  } else   if (edge == RectangleEdge.LEFT) {    double w=maxdim;    state.cursorLeft(w);  } else   if (edge == RectangleEdge.RIGHT) {    double w=maxdim;    state.cursorRight(w);  }  return state;}  }
class C{  private void processStartedStage(final State current,final State patch) throws IOException, RpcException {switch (current.taskInfo.subStage) {case TRIGGER_DELETES:    this.processTriggerDeletes(current);  break;case AWAIT_COMPLETION:this.processAwaitCompletion(current,patch);break;default :failTask(new RuntimeException(String.format("un-expected substage: %s",current.taskInfo.subStage)));}}  }
class C{  public static BoundingShape box(double width,double height){  return new BoundingShape(ShapeType.POLYGON,new Dimension2D(width,height),new Dimension2D(width,height));}  }
class C{  public Date creationDate(){  return DateFormat.RESPONSE_DATE_FORMAT.parseDateTime(creationDate).toDate();}  }
class C{  public List<QueryStat> recentQueries(){  return _recentQueryList;}  }
class C{  public Builder withCustomPhoneNumberScreen(ConfirmationCodeCallback confirmationCodeCallback){  this.confirmationCodeCallback=confirmationCodeCallback;  return this;}  }
class C{  public static int[] colMax(DoubleMatrix2D m){  int[] maxVec=new int[m.columns()];  for (int i=0; i < m.columns(); i++) {    double curmax=-1;    for (int j=0; j < m.rows(); j++) {      double curval=m.getQuick(j,i);      if (curval > curmax) {        curmax=curval;      }    }    maxVec[i]=(int)curmax;  }  return maxVec;}  }
class C{  public static void main(String[] args) throws UnknownHostException {  SpringApplication app=new SpringApplication(Application.class);  SimpleCommandLinePropertySource source=new SimpleCommandLinePropertySource(args);  addDefaultProfile(app,source);  Environment env=app.run(args).getEnvironment();  log.info("Access URLs:\n----------------------------------------------------------\n\t" + "Local: \t\thttp://127.0.0.1:{}\n\t" + "External: \thttp://{}:{}\n----------------------------------------------------------",env.getProperty("server.port"),InetAddress.getLocalHost().getHostAddress(),env.getProperty("server.port"));}  }
class C{  public static Boolean[] nullToEmpty(final Boolean[] array){  if (array == null || array.length == 0) {    return ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;  }  return array;}  }
class C{  public void log(Level level,String msg,Object param1){  log(level,null,null,msg,new Object[]{param1});}  }
class C{  public SubstitutionModelDelegate(Tree tree,BranchModel branchModel){  this(tree,branchModel,0,BUFFER_POOL_SIZE_DEFAULT);}  }
class C{  @Override public Model learn() throws Exception {  RegressionProblem problem=(RegressionProblem)this.problem;  int numExamples=problem.getProblemSize();  int inputDim=problem.getInputDimension();  double[][] x=problem.getInputVectors();  double[][] y=problem.getTargetVectors();  double[] x_new;  double y_new;  Kernel kernel=problem.getKernel();  int dMax=parameter.maxBasisVectors + 1;  int d=0;  Matrix alpha=new Matrix(dMax,1);  Matrix C=new Matrix(dMax,dMax);  Matrix s;  Matrix Q=new Matrix(dMax,dMax);  Matrix k=new Matrix(dMax,1);  Matrix e;  Matrix u=new Matrix(dMax,1);  double[][] basisVectors=new double[dMax][inputDim];  Matrix C_times_k;  Matrix t=new Matrix(dMax,1);  double k_star=0;  double nabla=0;  int gamma_projections=0;  int kl_projections=0;  int geometrical_projections=0;  for (int i=0; i < numExamples; i++) {    checkForStop();    x_new=x[i];    y_new=y[i][0];    for (int j=0; j < d; j++) {      checkForStop();      k.getArray()[j][0]=kernel.eval(basisVectors[j],x_new);    }    k_star=kernel.eval(x_new,x_new);    double m=scalarProduct(k.getArray(),alpha.getArray(),d);    C_times_k=C.times(k);    double sigma_2=k_star + scalarProduct(k.getArray(),C_times_k.getArray(),d);    double q=(y_new - m) / (problem.sigma_0_2 + sigma_2);    double r=-1.0 / (problem.sigma_0_2 + sigma_2);    e=Q.times(k);    double gamma=k_star - scalarProduct(k.getArray(),e.getArray(),d);    Matrix Gram=new Matrix(d,d);    for (int ii=0; ii < d; ii++) {      for (int jj=0; jj < d; jj++) {        checkForStop();        Gram.getArray()[ii][jj]=kernel.eval(basisVectors[ii],basisVectors[jj]);      }    }    if (gamma < parameter.epsilon_tol) {      nabla=1.0 / (1 + gamma * r);      s=C_times_k.plus(e);      alpha=alpha.plus(s.times(q * nabla));      C=C.plus((s.times(s.transpose())).times(r * nabla));      gamma_projections++;    } else {      for (int j=0; j < dMax; j++) {        u.getArray()[j][0]=0;      }      u.getArray()[d][0]=1.0;      s=C_times_k.plus(u);      alpha=alpha.plus(s.times(q));      C=C.plus((s.times(s.transpose())).times(r));      t=e.minus(u);      Q=Q.plus((t.times(t.transpose())).times(1.0 / gamma));      basisVectors[d]=x_new;      d++;      Gram=new Matrix(d,d);      for (int ii=0; ii < d; ii++) {        for (int jj=0; jj < d; jj++) {          checkForStop();          Gram.getArray()[ii][jj]=kernel.eval(basisVectors[ii],basisVectors[jj]);        }      }      Matrix L=Gram.chol().getL();      Matrix invL=L.inverse();      Q.setMatrix(0,d - 1,0,d - 1,invL.transpose().times(invL));    }    if (d >= dMax) {      int min_index=((Score)getMinScoresKLApprox(alpha,C,Q,d).first()).getIndex();      deleteBV(alpha,C,Q,basisVectors,d - 1,min_index);      d--;      kl_projections++;    }    while (d > 0) {      Score minScore=(Score)getMinScoresGeometrical(alpha,C,Q,d).first();      if (minScore.getScore() > parameter.geometrical_tol) {        break;      }      deleteBV(alpha,C,Q,basisVectors,d - 1,minScore.getIndex());      d--;      geometrical_projections++;    }  }  return new Model(kernel,basisVectors,alpha.getMatrix(0,d - 1,0,0),C.getMatrix(0,d - 1,0,d - 1),Q.getMatrix(0,d - 1,0,d - 1),d,true);}  }
class C{  private void extract(final Rule rule,final int spanStart){  if (rule != null) {    merge(new WordAlignmentState(rule,spanStart));  }}  }
class C{  public static Option createOption(String name,String description){  return new Option(Type.OPTION,name,1,description);}  }
class C{  @Override public void escape(char[] buffer,int start,int length,boolean isAttributeValue,Writer outputWriter) throws IOException {  for (int i=start; i < start + length; i++) {    char ch=buffer[i];    if (ch == '&') {      outputWriter.write("&amp;");      continue;    }    if (ch == '<') {      outputWriter.write("&lt;");      continue;    }    if (ch == '>') {      outputWriter.write("&gt;");      continue;    }    if (ch == '"' && isAttributeValue) {      outputWriter.write("&quot;");      continue;    }    if (ch == '\'' && isAttributeValue) {      outputWriter.write("&apos;");      continue;    }    if (isXml11RestrictedCharacter(ch)) {      outputWriter.write("&#x");      outputWriter.write(Integer.toHexString(ch));      outputWriter.write(";");      continue;    }    outputWriter.write(ch);  }}  }
class C{  public static void addHighlighter(Editor editor,RangeHighlighter highlighter){  List<RangeHighlighter> hl=editor.getUserData(HIGHLIGHTERS_KEY);  if (hl == null) {    hl=new LinkedList<RangeHighlighter>();    editor.putUserData(HIGHLIGHTERS_KEY,hl);  } else {    purgeInvalidHighlighters(editor,hl);  }  hl.add(highlighter);}  }
class C{  public boolean isSetNode(){  return this.node != null;}  }
class C{  public TeXParser(String parseString,TeXFormula formula){  this(parseString,formula,true);}  }
class C{  public void testClassCastBug() throws Exception {  DOMDocument oDocument=new DOMDocument("Root");  org.w3c.dom.Element oParent=oDocument.createElement("Parent");  oParent.setAttribute("name","N01");  oParent.setAttribute("id","ID01");  oDocument.appendChild(oParent);}  }
class C{  public static void main(String[] argv){  String value=argv[0];  int width=Integer.parseInt(argv[1]);  String padding;  if (argv.length > 2) {    padding=argv[2];  } else {    padding="";  }  for (int i=0; i < width; i++) {    ToolIO.out.print("*");  }  ToolIO.out.println("");  ToolIO.out.println(pp(value,width,padding));  for (int i=0; i < width; i++) {    ToolIO.out.print("*");  }  ToolIO.out.println("");  return;}  }
class C{  protected CCJumpTiles3D(int j,float amp,ccGridSize gridSize,float d){  super(gridSize,d);  jumps=j;  amplitude=amp;  amplitudeRate=1.0f;}  }
class C{  public boolean containsKey(int key){  return key > -1 && key < array.length && array[key] != null;}  }
class C{  public static void checkArgument(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  public Object remove(Object key){  Entry e=removeEntryForKey(key);  return (e == null ? e : e.value);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:55.319 -0500",hash_original_method="C2AADFE11E1A3D243B7C66EFA8EB257F",hash_generated_method="8670EDA6E6A093F94862510C8FAD3351") public TimeInfo(NtpV3Packet message,long returnTime,List comments){  this(message,returnTime,comments,true);}  }
class C{  private void configureClient(){  ProtocolSocketFactory factory=new SSLProtocolSocketFactory();  Protocol https=new Protocol("https",factory,443);  Protocol.registerProtocol("https",https);  HttpConnectionManagerParams params=connectionManager.getParams();  params.setConnectionTimeout(timeout);  params.setSoTimeout(timeout);  params.setSendBufferSize(BUFFER_SIZE);  params.setReceiveBufferSize(BUFFER_SIZE);  params.setMaxTotalConnections(maxThreadsTotal);  params.setDefaultMaxConnectionsPerHost(maxThreadsTotal);  client.getParams().setConnectionManagerTimeout(timeout);  HostConfiguration hostConf=client.getHostConfiguration();  ArrayList<Header> headers=new ArrayList<Header>();  headers.add(new Header("User-Agent",userAgent));  headers.add(new Header("Accept-Language","en-us,en-gb,en;q=0.7,*;q=0.3"));  headers.add(new Header("Accept-Charset","utf-8,ISO-8859-1;q=0.7,*;q=0.7"));  headers.add(new Header("Accept","text/html,application/xml;q=0.9,application/xhtml+xml,text/xml;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"));  headers.add(new Header("Accept-Encoding","x-gzip, gzip, deflate"));  hostConf.getParams().setParameter("http.default-headers",headers);  if (useProxy) {    hostConf.setProxy(proxyHost,proxyPort);    if (proxyUsername.length() > 0) {      AuthScope proxyAuthScope=getAuthScope(this.proxyHost,this.proxyPort,this.proxyRealm);      NTCredentials proxyCredentials=new NTCredentials(this.proxyUsername,this.proxyPassword,Http.agentHost,this.proxyRealm);      client.getState().setProxyCredentials(proxyAuthScope,proxyCredentials);    }  }}  }
class C{  public boolean commit(){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.GINGERBREAD) {    return editor.commit();  } else {    editor.apply();    return true;  }}  }
class C{  public static void main(String[] args){  String[][] tests=new String[6][2];  for (int i=0; i < tests.length; i++) {    tests[i][0]=BUG_ID + FS + "allclasses-frame.html";    tests[i][1]="C" + (i + 1) + ".html";  }  String[][] negatedTests=new String[][]{{BUG_ID + FS + "allclasses-frame.html","DummyClass.html"}};  TestRecurseSubPackages tester=new TestRecurseSubPackages();  run(tester,ARGS,tests,negatedTests);  tester.printSummary();}  }
class C{  public static void clearCondition(String condition){  BValue cond;synchronized (conditions) {    cond=(BValue)conditions.get(condition);    if (cond == null) {      return;    }synchronized (cond) {      if (cond.v) {        conditions.remove(condition);      }    }  }}  }
class C{  public boolean addAll(Collection c){  return addAll(size,c);}  }
class C{  public static void main(String[] args){  ResultMatrix matrix;  int i;  int n;  matrix=new ResultMatrixGnuPlot(3,3);  matrix.addHeader("header1","value1");  matrix.addHeader("header2","value2");  matrix.addHeader("header2","value3");  for (i=0; i < matrix.getRowCount(); i++) {    for (n=0; n < matrix.getColCount(); n++) {      matrix.setMean(n,i,(i + 1) * n);      matrix.setStdDev(n,i,((double)(i + 1) * n) / 100);      if (i == n) {        if (i % 2 == 1)         matrix.setSignificance(n,i,SIGNIFICANCE_WIN); else         matrix.setSignificance(n,i,SIGNIFICANCE_LOSS);      }    }  }  System.out.println("\n\n--> " + matrix.getDisplayName());  System.out.println("\n1. complete\n");  System.out.println(matrix.toStringHeader() + "\n");  System.out.println(matrix.toStringMatrix() + "\n");  System.out.println(matrix.toStringKey());  System.out.println("\n2. complete with std deviations\n");  matrix.setShowStdDev(true);  System.out.println(matrix.toStringMatrix());  System.out.println("\n3. cols numbered\n");  matrix.setPrintColNames(false);  System.out.println(matrix.toStringMatrix());  System.out.println("\n4. second col missing\n");  matrix.setColHidden(1,true);  System.out.println(matrix.toStringMatrix());  System.out.println("\n5. last row missing, rows numbered too\n");  matrix.setRowHidden(2,true);  matrix.setPrintRowNames(false);  System.out.println(matrix.toStringMatrix());  System.out.println("\n6. mean prec to 3\n");  matrix.setMeanPrec(3);  matrix.setPrintRowNames(false);  System.out.println(matrix.toStringMatrix());}  }
class C{  public void initialize(){  InstanceTime instance=new InstanceTime(this,offset,false);  owner.addInstanceTime(instance,isBegin);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(textsplittextnomodificationallowederrEE.class,args);}  }
class C{  private View fillDown(int pos,int top){  int end=(getBottom() - getTop()) - mListPadding.bottom;  int childTop=getFillChildBottom() + mDividerHeight;  while (childTop < end && pos < mItemCount) {    makeAndAddView(pos,getItemTop(pos),true,false);    pos++;    childTop=getFillChildBottom() + mDividerHeight;  }  return null;}  }
class C{  public final boolean hasSignatures(){  boolean isErasureMatch=isErasureMatch();  for (int i=0, length=this.patterns.length; i < length && !isErasureMatch; i++) {    if (((JavaSearchPattern)this.patterns[i]).hasSignatures())     return true;  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  return Boolean.valueOf(mf != null && mf.getGeneralType() == MediaFile.MEDIAFILE_DEFAULT_DVD_DRIVE);}  }
class C{  public WmsGetMapUrlFactory(String serviceAddress,String wmsVersion,String layerNames,String styleNames){  if (serviceAddress == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"WmsGetMapUrlFactory","constructor","missingServiceAddress"));  }  if (wmsVersion == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"WmsGetMapUrlFactory","constructor","missingVersion"));  }  if (layerNames == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"WmsGetMapUrlFactory","constructor","missingLayerNames"));  }  this.serviceAddress=serviceAddress;  this.wmsVersion=wmsVersion;  this.layerNames=layerNames;  this.styleNames=styleNames;}  }
class C{  private TransitRoute createTransitRoute(OsmParser.OsmRelation relation){  List<TransitRouteStop> stopSequenceForward=new ArrayList<>();  for (int i=0; i < relation.members.size() - 1; i++) {    OsmParser.OsmRelationMember member=relation.members.get(i);    if (member.type.equals(OsmParser.OsmRelationMemberType.NODE) && (OsmValue.STOP.equals(member.role) || OsmValue.STOP_FORWARD.equals(member.role))) {      Id<TransitStopFacility> id=Id.create(member.refId,TransitStopFacility.class);      TransitStopFacility transitStopFacility=transitSchedule.getFacilities().get(id);      if (transitStopFacility == null) {        return null;      }      TransitRouteStop newRouteStop=factory.createTransitRouteStop(transitStopFacility,0.0,0.0);      stopSequenceForward.add(newRouteStop);    }  }  if (stopSequenceForward.size() == 0) {    return null;  }  Id<TransitRoute> transitRouteId=Id.create(createStringId(relation) + (++routeNr),TransitRoute.class);  TransitRoute newTransitRoute=factory.createTransitRoute(transitRouteId,null,stopSequenceForward,relation.tags.get(OsmTag.ROUTE));  newTransitRoute.addDeparture(factory.createDeparture(Id.create("departure" + routeNr,Departure.class),60.0));  return newTransitRoute;}  }
class C{  @Override public void bindView(View view,Context context,Cursor cursor){  final GridCellViewHolder holder=(GridCellViewHolder)view.getTag();  long count=cursor.getLong(cursor.getColumnIndex(FotoSql.SQL_COL_COUNT));  boolean gps=!cursor.isNull(cursor.getColumnIndex(FotoSql.SQL_COL_GPS));  final int columnIndexWhereParam=cursor.getColumnIndex(FotoSql.SQL_COL_WHERE_PARAM);  holder.filter=(columnIndexWhereParam >= 0) ? cursor.getString(columnIndexWhereParam) : null;  String description=cursor.getString(cursor.getColumnIndex(FotoSql.SQL_COL_DISPLAY_TEXT));  String uri=cursor.getString(cursor.getColumnIndex(FotoSql.SQL_COL_PATH));  long imageID=cursor.getLong(cursor.getColumnIndex(FotoSql.SQL_COL_PK));  if (count > 1)   description+=" (" + count + ")";  if (gps)   description+="#";  holder.description.setText(description);  holder.icon.setVisibility(((mSelectedItems != null) && (mSelectedItems.contains(imageID))) ? View.VISIBLE : View.GONE);  holder.imageID=imageID;  ThumbNailUtils.getThumb(uri,holder.image);  if (Global.debugEnabledViewItem)   Log.i(Global.LOG_CONTEXT,mDebugPrefix + "bindView for " + holder);}  }
class C{  public void computeVisibleRect(Rectangle visibleRect){  computeVisibleRect(this,visibleRect);}  }
class C{  public boolean mousePressed(MouseEvent e){  return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  LocalTime withLocalMillis(long newMillis){  return (newMillis == getLocalMillis() ? this : new LocalTime(newMillis,getChronology()));}  }
class C{  @Override public boolean matches(O object,QueryOptions queryOptions){  for (  Query<O> query : super.getSimpleQueries()) {    if (!query.matches(object,queryOptions)) {      return false;    }  }  for (  Query<O> query : super.getLogicalQueries()) {    if (!query.matches(object,queryOptions)) {      return false;    }  }  return true;}  }
class C{  protected void startDocumentInternal() throws org.xml.sax.SAXException {  super.startDocumentInternal();  m_needToCallStartDocument=false;}  }
class C{  private void addPolygonRing(Coordinate[] coord,double offsetDistance,int side,int cwLeftLoc,int cwRightLoc){  if (offsetDistance == 0.0 && coord.length < LinearRing.MINIMUM_VALID_SIZE)   return;  int leftLoc=cwLeftLoc;  int rightLoc=cwRightLoc;  if (coord.length >= LinearRing.MINIMUM_VALID_SIZE && CGAlgorithms.isCCW(coord)) {    leftLoc=cwRightLoc;    rightLoc=cwLeftLoc;    side=Position.opposite(side);  }  Coordinate[] curve=curveBuilder.getRingCurve(coord,side,offsetDistance);  addCurve(curve,leftLoc,rightLoc);}  }
class C{  private void prepareTestCase2(){  when(page1.canSkip()).thenReturn(false);  when(page1.isCompleted()).thenReturn(true);  when(page2.canSkip()).thenReturn(false);  when(page2.isCompleted()).thenReturn(true);  when(page3.canSkip()).thenReturn(true);  when(page3.isCompleted()).thenReturn(true);  when(page4.canSkip()).thenReturn(true);  when(page4.isCompleted()).thenReturn(true);  wizard.addPage(page1);  wizard.addPage(page2);  wizard.addPage(page3);  wizard.addPage(page4);}  }
class C{  private String addRollbackStepsForRefreshSystems(Workflow workflow,String waitFor,List<VolumeDescriptor> srdfDescriptors){  List<VolumeDescriptor> targetDescriptors=VolumeDescriptor.filterByType(srdfDescriptors,VolumeDescriptor.Type.SRDF_TARGET);  if (targetDescriptors.isEmpty()) {    return waitFor;  }  URI targetSystem=targetDescriptors.get(0).getDeviceURI();  StorageSystem tgt=dbClient.queryObject(StorageSystem.class,targetSystem);  Workflow.Method refreshTargetSystemsMethod=new Method(REFRESH_SRDF_TARGET_SYSTEM,tgt,null);  workflow.createStep(ROLLBACK_REFRESH_SYSTEM_STEP_GROUP,String.format(ROLLBACK_REFRESH_SYSTEM_STEP_DESC,tgt.getSerialNumber()),waitFor,tgt.getId(),tgt.getSystemType(),this.getClass(),rollbackMethodNullMethod(),refreshTargetSystemsMethod,null);  return ROLLBACK_REFRESH_SYSTEM_STEP_GROUP;}  }
class C{  public Drawer buildForFragment(){  if (mUsed) {    throw new RuntimeException("you must not reuse a DrawerBuilder builder");  }  if (mActivity == null) {    throw new RuntimeException("please pass an activity");  }  if (mRootView == null) {    throw new RuntimeException("please pass the view which should host the DrawerLayout");  }  mUsed=true;  if (mDrawerLayout == null) {    withDrawerLayout(-1);  }  View originalContentView=mRootView.getChildAt(0);  boolean alreadyInflated=originalContentView.getId() == R.id.materialize_root;  if (!alreadyInflated) {    mRootView.removeView(originalContentView);  } else {    mRootView.removeAllViews();  }  FrameLayout.LayoutParams layoutParamsContentView=new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);  mRootView.addView(mDrawerLayout,layoutParamsContentView);  mDrawerLayout.setId(R.id.materialize_root);  handleDrawerNavigation(mActivity,false);  Drawer result=buildView();  mDrawerLayout.addView(originalContentView,0);  mSliderLayout.setId(R.id.material_drawer_slider_layout);  mDrawerLayout.addView(mSliderLayout,1);  return result;}  }
class C{  @Override protected int intersectsValidDropTarget(int id){  int mCountX=mView.getCountX();  int mCountY=mView.getCountY();  int x=id % mCountX;  int y=id / mCountX;  LauncherAccessibilityDelegate.DragInfo dragInfo=mDelegate.getDragInfo();  if (dragInfo.dragType == DragType.WIDGET && mView.isHotseat()) {    return INVALID_POSITION;  }  if (dragInfo.dragType == DragType.WIDGET) {    boolean fits=false;    int spanX=dragInfo.info.spanX;    int spanY=dragInfo.info.spanY;    for (int m=0; m < spanX; m++) {      for (int n=0; n < spanY; n++) {        fits=true;        int x0=x - m;        int y0=y - n;        if (x0 < 0 || y0 < 0)         continue;        for (int i=x0; i < x0 + spanX; i++) {          if (!fits)           break;          for (int j=y0; j < y0 + spanY; j++) {            if (i >= mCountX || j >= mCountY || mView.isOccupied(i,j)) {              fits=false;              break;            }          }        }        if (fits) {          return x0 + mCountX * y0;        }      }    }    return INVALID_POSITION;  } else {    View child=mView.getChildAt(x,y);    if (child == null || child == dragInfo.item) {      return id;    } else     if (dragInfo.dragType != DragType.FOLDER) {      ItemInfo info=(ItemInfo)child.getTag();      if (info instanceof AppInfo || info instanceof FolderInfo || info instanceof ShortcutInfo) {        return id;      }    }    return INVALID_POSITION;  }}  }
class C{  public void fadeToLayer(int index){  mTransitionState=TRANSITION_STARTING;  Arrays.fill(mIsLayerOn,false);  mIsLayerOn[index]=true;  invalidateSelf();}  }
class C{  private Monitor removeMon(String label,String detail,String units){  MonKey key=getMonKey(label,detail,units);  Monitor mon=(Monitor)map.get(key);  if (mon != null)   map.remove(mon);  return mon;}  }
class C{  public CloseableImage decodeGif(EncodedImage encodedImage,ImageDecodeOptions options){  InputStream is=encodedImage.getInputStream();  if (is == null) {    return null;  }  try {    if (GifFormatChecker.isAnimated(is)) {      return mAnimatedImageFactory.decodeGif(encodedImage,options,mBitmapConfig);    }    return decodeStaticImage(encodedImage);  }  finally {    Closeables.closeQuietly(is);  }}  }
class C{  public boolean offer(E e){  final ReentrantLock lock=this.lock;  int tenant=tenant();  lock.lock();  try {    long t=now();    queue(tenant).offer(e,t);    if (peekNext(t) == e) {      leader=null;      available.signal();    }    return true;  }  finally {    lock.unlock();    taggregator.throttling(tenant);  }}  }
class C{  public int find(int cur){  assert (cur >= 0 && cur < parent.length);  int p=parent[cur], tmp;  while (cur != p) {    tmp=p;    p=parent[cur]=parent[p];    cur=tmp;  }  return cur;}  }
class C{  public static TitledBorder createTitledBorder(Border border,String title,int titleJustification,int titlePosition){  return new TitledBorder(border,title,titleJustification,titlePosition);}  }
class C{  @Override public String toString(){  return super.toString();}  }
class C{  @Dev public PlayerHasRecordedItemWithHimCondition(final String questName,final int index){  this.questName=questName;  this.index=index;}  }
class C{  public static MTuple5<String,String,Integer,String,String> url(final URL url){  return supplier5(null,null,null,null,null);}  }
class C{  public InverseDecay(){  this(1,1);}  }
class C{  public long skip(long n) throws IOException {  if (n <= 0) {    return 0;  }  byte[] buffer=new byte[BUFFER_SIZE];  long remaining=Math.min(n,this.contentLength - this.pos);  long count=0;  while (remaining > 0) {    int l=read(buffer,0,(int)Math.min(BUFFER_SIZE,remaining));    if (l == -1) {      break;    }    count+=l;    remaining-=l;  }  this.pos+=count;  return count;}  }
class C{  public void keyReleased(KeyEvent e){  log.finest("Key=" + e.getKeyCode() + " - "+ e.getKeyChar()+ " -> "+ m_text.getText());  if (e.getKeyCode() == KeyEvent.VK_ESCAPE)   m_text.setText(m_initialText);  m_modified=true;  m_setting=true;  try {    if (e.getKeyCode() == KeyEvent.VK_ENTER) {      fireVetoableChange(m_columnName,m_oldText,getValue());      fireActionPerformed();    }  } catch (  PropertyVetoException pve) {  }  m_setting=false;}  }
class C{  @Override public int length(){  return array.length;}  }
class C{  public Task<R> waitFor() throws ViPRException {  return waitFor(-1);}  }
class C{  private boolean useUDPMessagingIfNecessary(){  boolean result=false;  InternalDistributedSystem sys=cache.getDistributedSystem();  if (sys != null && !sys.threadOwnsResources()) {    sys.getDistributionManager().forceUDPMessagingForCurrentThread();    result=true;  }  return result;}  }
class C{  public JIPRuntimeException(){}  }
class C{  NodeTextRep subNodeText(SemanticNode sn){  NodeTextRep result=new NodeTextRep();  int beginIdx=getBeginLine(sn) - getBeginLine(this.semanticNode);  result.nodeText=new String[getEndLine(sn) - getBeginLine(sn) + 1];  result.mapping=new Vector[result.nodeText.length];  int beginCol=sn.stn.getLocation().beginColumn();  int beginPos=colToLoc(beginCol,this.mapping[beginIdx]);  result.nodeText[0]=this.nodeText[beginIdx].substring(beginPos);  Vector<MappingPair> mv=cloneMappingPairVector(this.mapping[beginIdx]);  adjustMappingPairVector(beginCol,-beginPos,mv);  result.mapping[0]=mv;  int minPos=beginPos;  for (int i=1; i < result.mapping.length; i++) {    result.nodeText[i]=this.nodeText[i + beginIdx];    if (!StringHelper.onlySpaces(result.nodeText[i])) {      minPos=Math.min(minPos,StringHelper.leadingSpaces(result.nodeText[i]));    }    result.mapping[i]=new Vector<MappingPair>();    for (int j=0; j < this.mapping[i + beginIdx].size(); j++) {      result.mapping[i].add(this.mapping[i + beginIdx].elementAt(j).clone());    }  }  result.nodeText[result.nodeText.length - 1]=result.nodeText[result.nodeText.length - 1].substring(0,colToLoc(sn.stn.getLocation().endColumn() + 1,result.mapping[result.mapping.length - 1]));  int spacesAddedToFirstLine=beginPos - minPos;  result.nodeText[0]=StringHelper.copyString(" ",spacesAddedToFirstLine) + result.nodeText[0];  adjustMappingPairVector(beginCol,spacesAddedToFirstLine,result.mapping[0]);  for (int i=1; i < result.nodeText.length; i++) {    if (!StringHelper.onlySpaces(result.nodeText[i])) {      result.nodeText[i]=result.nodeText[i].substring(minPos);      adjustMappingPairVector(1,-minPos,result.mapping[i]);    }  }  return result;}  }
class C{  final OptionsTreeNode addNode(final String parentKey,final String key,final String displayName){  OptionsTreeNode newNode=new OptionsTreeNode(key,displayName);  MutableTreeNode parentNode;  if (parentKey == OptionsMediator.ROOT_NODE_KEY) {    parentNode=ROOT;  } else {    try {      parentNode=getParentNode(ROOT,parentKey);    } catch (    IOException ioe) {      return null;    }    if (parentNode == null)     return null;  }  insertNodeInto(newNode,parentNode,parentNode.getChildCount());  reload(parentNode);  return newNode;}  }
class C{  private int[][] mmChainDP(double[] dimArray,int size){  double[][] dpMatrix=new double[size][size];  int[][] split=new int[size][size];  for (int i=0; i < size; i++) {    Arrays.fill(dpMatrix[i],0);    Arrays.fill(split[i],-1);  }  for (int l=2; l <= size; l++) {    for (int i=0; i < size - l + 1; i++) {      int j=i + l - 1;      dpMatrix[i][j]=Double.MAX_VALUE;      for (int k=i; k <= j - 1; k++) {        double cost=dpMatrix[i][k] + dpMatrix[k + 1][j] + (dimArray[i] * dimArray[k + 1] * dimArray[j + 1]);        if (cost < dpMatrix[i][j]) {          dpMatrix[i][j]=cost;          split[i][j]=k;        }      }      if (LOG.isTraceEnabled()) {        LOG.trace("mmchainopt [i=" + (i + 1) + ",j="+ (j + 1)+ "]: costs = "+ dpMatrix[i][j]+ ", split = "+ (split[i][j] + 1));      }    }  }  return split;}  }
class C{  public synchronized void handle(int id,Packet packet){  System.out.print("Connection #");  System.out.print(id);  System.out.print(", received a ");  if (null == packet) {    System.out.print("null");  } else {switch (packet.getCommand()) {case Packet.COMMAND_SERVER_GREETING:      System.out.print("COMMAND_SERVER_GREETING");    break;case Packet.COMMAND_CLIENT_NAME:  System.out.print("COMMAND_CLIENT_NAME");break;case Packet.COMMAND_LOCAL_PN:System.out.print("COMMAND_LOCAL_PN");break;case Packet.COMMAND_PLAYER_ADD:System.out.print("COMMAND_PLAYER_ADD");break;case Packet.COMMAND_PLAYER_REMOVE:System.out.print("COMMAND_PLAYER_REMOVE");break;case Packet.COMMAND_PLAYER_UPDATE:System.out.print("COMMAND_PLAYER_UPDATE");break;case Packet.COMMAND_PLAYER_READY:System.out.print("COMMAND_PLAYER_READY");break;case Packet.COMMAND_CHAT:System.out.print("COMMAND_CHAT");break;case Packet.COMMAND_ENTITY_ADD:System.out.print("COMMAND_ENTITY_ADD");break;case Packet.COMMAND_ENTITY_REMOVE:System.out.print("COMMAND_ENTITY_REMOVE");break;case Packet.COMMAND_ENTITY_MOVE:System.out.print("COMMAND_ENTITY_MOVE");break;case Packet.COMMAND_ENTITY_DEPLOY:System.out.print("COMMAND_ENTITY_DEPLOY");break;case Packet.COMMAND_ENTITY_ATTACK:System.out.print("COMMAND_ENTITY_ATTACK");break;case Packet.COMMAND_ENTITY_UPDATE:System.out.print("COMMAND_ENTITY_UPDATE");break;case Packet.COMMAND_ENTITY_MODECHANGE:System.out.print("COMMAND_ENTITY_MODECHANGE");break;case Packet.COMMAND_ENTITY_MOUNTED_FACINGCHANGE:System.out.print("COMMAND_ENTITY_MOUNTED_FACINGCHANGE");break;case Packet.COMMAND_ENTITY_AMMOCHANGE:System.out.print("COMMAND_ENTITY_AMMOCHANGE");break;case Packet.COMMAND_ENTITY_VISIBILITY_INDICATOR:System.out.print("COMMAND_ENTITY_VISIBILITY_INDICATOR");break;case Packet.COMMAND_CHANGE_HEX:System.out.print("COMMAND_CHANGE_HEX");break;case Packet.COMMAND_BLDG_ADD:System.out.print("COMMAND_BLDG_ADD");break;case Packet.COMMAND_BLDG_REMOVE:System.out.print("COMMAND_BLDG_REMOVE");break;case Packet.COMMAND_BLDG_UPDATE:System.out.print("COMMAND_BLDG_UPDATE_CF");break;case Packet.COMMAND_BLDG_COLLAPSE:System.out.print("COMMAND_BLDG_COLLAPSE");break;case Packet.COMMAND_PHASE_CHANGE:System.out.print("COMMAND_PHASE_CHANGE");break;case Packet.COMMAND_TURN:System.out.print("COMMAND_TURN");break;case Packet.COMMAND_ROUND_UPDATE:System.out.print("COMMAND_ROUND_UPDATE");break;case Packet.COMMAND_SENDING_BOARD:System.out.print("COMMAND_SENDING_BOARD");Board recvBoard=(Board)packet.getObject(0);try (OutputStream os=new FileOutputStream("xmit.board")){recvBoard.save(os);} catch (IOException ioErr) {ioErr.printStackTrace();}break;case Packet.COMMAND_SENDING_ENTITIES:System.out.print("COMMAND_SENDING_ENTITIES");break;case Packet.COMMAND_SENDING_PLAYERS:System.out.print("COMMAND_SENDING_PLAYERS");break;case Packet.COMMAND_SENDING_TURNS:System.out.print("COMMAND_SENDING_TURNS");break;case Packet.COMMAND_SENDING_REPORTS:System.out.print("COMMAND_SENDING_REPORTS");break;case Packet.COMMAND_SENDING_GAME_SETTINGS:System.out.print("COMMAND_SENDING_GAME_SETTINGS");break;case Packet.COMMAND_SENDING_MAP_SETTINGS:System.out.print("COMMAND_SENDING_MAP_SETTINGS");break;case Packet.COMMAND_SENDING_MAP_DIMENSIONS:System.out.print("COMMAND_SENDING_MAP_SETTINGS");break;case Packet.COMMAND_END_OF_GAME:System.out.print("COMMAND_END_OF_GAME");break;case Packet.COMMAND_DEPLOY_MINEFIELDS:System.out.print("COMMAND_DEPLOY_MINEFIELDS");break;case Packet.COMMAND_REVEAL_MINEFIELD:System.out.print("COMMAND_REVEAL_MINEFIELD");break;case Packet.COMMAND_REMOVE_MINEFIELD:System.out.print("COMMAND_REMOVE_MINEFIELD");break;case Packet.COMMAND_SENDING_MINEFIELDS:System.out.print("COMMAND_SENDING_MINEFIELDS");break;case Packet.COMMAND_REROLL_INITIATIVE:System.out.print("COMMAND_REROLL_INITIATIVE");break;case Packet.COMMAND_SET_ARTYAUTOHITHEXES:System.out.print("COMMAND_SET_ARTYAUTOHITHEXES");break;default :System.out.print("unknown");break;}}System.out.println(" packet.");}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:31.241 -0500",hash_original_method="96F418696A4CBAC7A39E33CF390C9745",hash_generated_method="796B97E864DDE00011C807F15057D093") public static int bitCount(int i){  return i;}  }
class C{  public static void updateRepositoryConfigs(RepositoryConnection con,RepositoryConfig... configs) throws RepositoryException, RepositoryConfigException {  ValueFactory vf=con.getRepository().getValueFactory();  con.begin();  for (  RepositoryConfig config : configs) {    Resource context=getContext(con,config.getID());    if (context != null) {      con.clear(context);    } else {      context=vf.createBNode();    }    con.add(context,RDF.TYPE,REPOSITORY_CONTEXT);    Model graph=new LinkedHashModel();    config.export(graph);    con.add(graph,context);  }  con.commit();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:00.430 -0500",hash_original_method="881854C294C034F2A83844483FCF0823",hash_generated_method="8E81C7EC04D9BAF42253C785966169E4") public final int bytesProduced(){  return bytesProduced;}  }
class C{  @Override final public byte[] removeFirst(final byte[] key){  if (isReadOnly()) {    final BucketPage copy=(BucketPage)copyOnWrite(getIdentity());    return copy.removeFirst(key);  }  final int index=lookupIndex(key);  if (index == -1)   return null;  final long addr=hasRawRecords() ? getRawRecord(index) : IRawStore.NULL;  final byte[] ret;  if (addr != IRawStore.NULL) {    ret=getBytes(htree.readRawRecord(addr));    htree.deleteRawRecord(addr);  } else {    ret=data.getValues().get(index);  }  ((MutableBucketData)data).remove(index);  return ret;}  }
class C{  public static byte[] toByteArray(Integer[] array){  byte[] result=new byte[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].byteValue();  }  return result;}  }
class C{  public void printSeries(){  for (int i=0; i < this.getItemCount(); i++) {    VostroItem dataItem=(VostroItem)this.getDataItem(i);    _log.debug("Type: " + this.getType() + " Time: "+ dataItem.getPeriod().getStart()+ " Value: "+ dataItem.getVostro());  }}  }
class C{  public void printStackTrace(PrintStream s){  super.printStackTrace(s);}  }
class C{  public int sizeOfType(int type) throws ArrayIndexOutOfBoundsException {  return _sizeOfType[type];}  }
class C{  public LabelMaker(boolean fullColor,int strikeWidth,int strikeHeight){  mFullColor=fullColor;  mStrikeWidth=strikeWidth;  mStrikeHeight=strikeHeight;  mTexelWidth=(float)(1.0 / mStrikeWidth);  mTexelHeight=(float)(1.0 / mStrikeHeight);  mClearPaint=new Paint();  mClearPaint.setARGB(0,0,0,0);  mClearPaint.setStyle(Style.FILL);  mState=STATE_NEW;}  }
class C{  protected void forward(String page,ServletRequest request,ServletResponse response) throws ServletException, IOException {  filterConfig.getServletContext().getRequestDispatcher(page).forward(request,response);}  }
class C{  public boolean isPrinted(){  Object oo=get_Value(COLUMNNAME_IsPrinted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static int postfixLen(String o1,String o2,int prefix){  int postfix=0;  int p1=o1.length(), p2=o2.length();  while (p1 > prefix && p2 > prefix && (o1.charAt(--p1) == o2.charAt(--p2))) {    ++postfix;  }  return postfix;}  }
class C{  private int handleSC(String value,DoubleMetaphoneResult result,int index){  if (charAt(value,index + 2) == 'H') {    if (contains(value,index + 3,2,"OO","ER","EN","UY","ED","EM")) {      if (contains(value,index + 3,2,"ER","EN")) {        result.append("X","SK");      } else {        result.append("SK");      }    } else {      if (index == 0 && !isVowel(charAt(value,3)) && charAt(value,3) != 'W') {        result.append('X','S');      } else {        result.append('X');      }    }  } else   if (contains(value,index + 2,1,"I","E","Y")) {    result.append('S');  } else {    result.append("SK");  }  return index + 3;}  }
class C{  public String write(Class target) throws Exception {  return target.getName();}  }
class C{  private void findCollapsesFromInsertedNodes(List collapsedVertexIndexes){  int[] collapsedVertexIndex=new int[1];  Iterator it=iterator();  SegmentNode eiPrev=(SegmentNode)it.next();  while (it.hasNext()) {    SegmentNode ei=(SegmentNode)it.next();    boolean isCollapsed=findCollapseIndex(eiPrev,ei,collapsedVertexIndex);    if (isCollapsed)     collapsedVertexIndexes.add(new Integer(collapsedVertexIndex[0]));    eiPrev=ei;  }}  }
class C{  public char charAt(int pos){  int startChunk=pos >>> m_chunkBits;  if (startChunk == 0 && m_innerFSB != null)   return m_innerFSB.charAt(pos & m_chunkMask); else   return m_array[startChunk][pos & m_chunkMask];}  }
class C{  IonBlobLite(ContainerlessContext context,boolean isNull){  super(context,isNull);}  }
class C{  public static RecentFragment newInstance(){  final RecentFragment fragment=new RecentFragment();  final Bundle args=new Bundle();  fragment.setArguments(args);  return fragment;}  }
class C{  public static void engineWrap(ClientConnectionManager ccm,Pipe<ClientNetRequestSchema> source,Pipe<ClientNetRequestSchema> target,ByteBuffer buffer,boolean isServer){  while (PipeWriter.hasRoomForWrite(target) && PipeReader.peekMsg(source,ClientNetRequestSchema.MSG_SIMPLEREQUEST_100)) {    final ClientConnection cc=ccm.get(PipeReader.peekLong(source,ClientNetRequestSchema.MSG_SIMPLEREQUEST_100_FIELD_CONNECTIONID_101));    if (null == cc || !cc.isValid) {      PipeReader.tryReadFragment(source);      PipeReader.releaseReadLock(source);      continue;    }    if ((!isServer) && ClientConnection.handShakeWrapIfNeeded(cc,target,buffer)) {      return;    }    PipeReader.tryReadFragment(source);    ByteBuffer[] bbHolder=PipeReader.wrappedUnstructuredLayoutBuffer(source,ClientNetRequestSchema.MSG_SIMPLEREQUEST_100_FIELD_PAYLOAD_103);    try {      final ByteBuffer[] targetBuffers=PipeWriter.wrappedUnstructuredLayoutBufferOpen(target,ClientNetRequestSchema.MSG_ENCRYPTEDREQUEST_110_FIELD_ENCRYPTED_104);      SSLEngineResult result=cc.engine.wrap(bbHolder,targetBuffers[0]);      Status status=wrapResultStatusState(target,buffer,cc,bbHolder,targetBuffers,result);      if (status == Status.OK) {        PipeReader.copyLong(source,target,ClientNetRequestSchema.MSG_SIMPLEREQUEST_100_FIELD_CONNECTIONID_101,ClientNetRequestSchema.MSG_ENCRYPTEDREQUEST_110_FIELD_CONNECTIONID_101);        PipeWriter.publishWrites(target);        PipeReader.releaseReadLock(source);      } else       if (status == Status.CLOSED) {        PipeReader.releaseReadLock(source);      }    } catch (    SSLException sslex) {      manageException(sslex,cc);    }  }}  }
class C{  public final void testCodeSigner_02(){  try {    CodeSigner cs=new CodeSigner(cpath,ts);    assertNotNull(cs);  } catch (  Exception e) {    fail("Unexpected exception");  }}  }
class C{  public final int classIndex(){  return m_ClassIndex;}  }
class C{  public static void addTransmutation(String input,String output,float xp){  if (!OreDictionary.getOres(output).isEmpty())   for (  ItemStack stack : OreDictionary.getOres(input))   addTransmutation(stack,OreDictionary.getOres(output).get(0),xp);}  }
class C{  public GenericFeed retrieveFirstPageOfOrganizationUsers(String customerId) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return service.getFeed(new URL("https://apps-apis.google.com/a/feeds/orguser/2.0/" + customerId + "?get=all"),GenericFeed.class);}  }
