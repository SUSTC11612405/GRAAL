class C{  public static Map<String,Object> encode(final Map<String,Object> form){  return encode(form,DEFAULT_ENCODING);}  }
class C{  protected boolean hasUncompressedStrip(){  return mStripBytes.size() != 0;}  }
class C{  protected void renderLabels(Graphics g){  Font f=getFont();  Paint labelPaint=getLabelPaint();  Paint mattingPaint=getMattingPaint();  boolean isMatted=isMatted();  for (Iterator<OMGraphic> it=labels.iterator(); it.hasNext(); ) {    OMText text=(OMText)it.next();    text.setFont(f);    text.setLinePaint(labelPaint);    if (isMatted) {      text.setFillPaint(mattingPaint);    }    text.render(g);  }}  }
class C{  public X509Certificate generate(PrivateKey key) throws CertificateEncodingException, IllegalStateException, NoSuchAlgorithmException, SignatureException, InvalidKeyException {  return generate(key,(SecureRandom)null);}  }
class C{  public static void forceMobileConnectionForAddress(ConnectivityManager mConnMgr,String address){  String hostName=extractAddressFromUrl(address);  if (TextUtils.isEmpty(hostName))   hostName=address;  int hostAddress=lookupHost(hostName);  mConnMgr.requestRouteToHost(ConnectivityManager.TYPE_MOBILE_MMS,hostAddress);}  }
class C{  public static DigestAlgorithm forXML(final String xmlName){  final DigestAlgorithm algorithm=Registry.XML_ALGORITHMS.get(xmlName);  if (algorithm == null) {    throw new DSSException("Unsupported algorithm: " + xmlName);  }  return algorithm;}  }
class C{  public Integer loadValuesList(DbOutputStatement statement,Integer idx) throws Exception {  int index=idx.intValue();  setId(statement.getLongInteger(index++));  setReport(statement.getLongText(index++));  setTypeReport(statement.getLongInteger(index++));  setTypeArch(statement.getLongInteger(index++));  setAllArch(statement.getLongInteger(index++));  setAllOfics(statement.getLongInteger(index++));  setAllPerfs(statement.getLongInteger(index++));  setDescription(statement.getLongText(index++));  return new Integer(index);}  }
class C{  public ArrowTip(double angle,double outerRadius,double innerRadius,boolean isFilled,boolean isStroked,boolean isSolid){  super(isFilled,isStroked,isSolid);  this.angle=angle;  this.outerRadius=outerRadius;  this.innerRadius=innerRadius;}  }
class C{  public void nodeRemoved(SessionEvent event){  getSessionSupport().fireSessionEvent(event);  setSessionChanged(true);}  }
class C{  public void PCDataAdded(String systemId,int lineNr){}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instruction,"Error: Argument instruction can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  Preconditions.checkArgument(instruction.getOperands().size() == 1,"Error: Argument instruction is not a conditional jump instruction (invalid number of operands)");  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final IOperandTree operand=instruction.getOperands().get(0);  final TranslationResult result=Helpers.translateOperand(environment,offset,operand,true);  instructions.addAll(result.getInstructions());  final String jumpTarget=result.getRegister();  offset=baseOffset + instructions.size();  final Pair<OperandSize,String> condition=conditionGenerator.generate(environment,offset,instructions);  offset=baseOffset + instructions.size();  instructions.add(ReilHelpers.createJcc(offset,condition.first(),condition.second(),environment.getArchitectureSize(),jumpTarget));}  }
class C{  public boolean canBeShortAddress(int address){  return !isLongAddress(address);}  }
class C{  @Override public void initView(){}  }
class C{  public static void saveImageToPath(Bitmap bitmap,String imagePath){  try {    File imageFile=new File(imagePath);    FileOutputStream fos=new FileOutputStream(imageFile);    bitmap.compress(Bitmap.CompressFormat.PNG,100,fos);    fos.flush();    fos.close();  } catch (  IOException e) {    Log.d(IMAGE_HELPER,e.toString());  }}  }
class C{  protected Fun(){  throw new RuntimeException("Non instantiable");}  }
class C{  private boolean canResolve(ResourceResolverContext context){  return this.resolverSpi.engineCanResolveURI(context);}  }
class C{  public LocalRepository(String name,File root) throws RepositoryException {  super(name,null,null);  this.root=root;  mkdir();  if (!root.isDirectory()) {    throw new RepositoryException("Folder '" + root + "' is not a directory.");  }  if (!root.canWrite()) {    throw new RepositoryException("Folder '" + root + "' is not writable.");  }  setRepository(this);}  }
class C{  @Override public void run(){  amIActive=true;  int row, col, x, y, x1, x2, y1, y2;  int progress;  double z;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int maxFlowpathLength;  double[][] flowpath1;  double[][] flowpath2;  double dist;  double gridResX, gridResY, diagGridRes;  double[] gridRes;  final double lnOf2=Math.log(2);  byte baseTestByte;  byte testByte;  int curPosFlowpath1, curPosFlowpath2;  boolean flag1, flag2;  int flowDir;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String pntrHeaderFile=args[0];  String outputHeader=args[1];  baseTestByte=30;  if ((pntrHeaderFile == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr1=new WhiteboxRaster(pntrHeaderFile,"r");    int rows=pntr1.getNumberRows();    int rowsLessOne=rows - 1;    int cols=pntr1.getNumberColumns();    int colsLessOne=cols - 1;    double noData=pntr1.getNoDataValue();    gridResX=pntr1.getCellSizeX();    gridResY=pntr1.getCellSizeY();    diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    gridRes=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    maxFlowpathLength=(int)(2 * Math.sqrt(cols * cols + rows * rows));    WhiteboxRaster pntr2=new WhiteboxRaster(pntrHeaderFile,"r");    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",pntrHeaderFile,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    output.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    updateProgress("Loop 1 of 2:",-1);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=pntr1.getValue(row,col);        if (z != noData) {          testByte=baseTestByte;          if (row == rowsLessOne) {            testByte=2;          }          if (col == 0) {            testByte=BitOps.clearBit(testByte,(byte)4);          }          if (col == colsLessOne) {            testByte=BitOps.clearBit(testByte,(byte)1);            testByte=BitOps.clearBit(testByte,(byte)2);          }          for (int c=1; c < 5; c++) {            if (BitOps.checkBit(testByte,(byte)c)) {              x=col + dX[c];              y=row + dY[c];              flowpath1=new double[3][maxFlowpathLength];              flowpath2=new double[3][maxFlowpathLength];              x1=col;              y1=row;              x2=col + dX[c];              y2=row + dY[c];              curPosFlowpath1=0;              curPosFlowpath2=0;              flowpath1[0][curPosFlowpath1]=x1;              flowpath1[1][curPosFlowpath1]=y1;              flowpath1[2][curPosFlowpath1]=0;              flowpath2[0][curPosFlowpath1]=x2;              flowpath2[1][curPosFlowpath1]=y2;              flowpath2[2][curPosFlowpath1]=0;              flag1=true;              flag2=true;              do {                if (flag1) {                  flowDir=(int)pntr1.getValue(y1,x1);                  if (flowDir > 0) {                    curPosFlowpath1++;                    flowDir=(int)(Math.log(flowDir) / lnOf2);                    dist=gridRes[flowDir];                    x1+=dX[flowDir];                    y1+=dY[flowDir];                    flowpath1[0][curPosFlowpath1]=x1;                    flowpath1[1][curPosFlowpath1]=y1;                    flowpath1[2][curPosFlowpath1]=flowpath1[2][curPosFlowpath1 - 1] + dist;                    for (int d=curPosFlowpath2; d >= 0; d--) {                      if (flowpath2[0][d] == x1 && flowpath2[1][d] == y1) {                        dist=flowpath1[2][curPosFlowpath1];                        if (output.getValue(row,col) < dist) {                          output.setValue(row,col,dist);                        }                        dist=flowpath2[2][d];                        if (output.getValue(y,x) < dist) {                          output.setValue(y,x,dist);                        }                        flag1=false;                        flag2=false;                        break;                      }                    }                  } else {                    flag1=false;                    if (!flag2) {                      dist=flowpath1[2][curPosFlowpath1];                      if (output.getValue(row,col) < dist) {                        output.setValue(row,col,dist);                      }                      dist=flowpath2[2][curPosFlowpath2];                      if (output.getValue(y,x) < dist) {                        output.setValue(y,x,dist);                      }                      break;                    }                  }                }                if (flag2) {                  flowDir=(int)pntr2.getValue(y2,x2);                  if (flowDir > 0) {                    curPosFlowpath2+=1;                    flowDir=(int)(Math.log(flowDir) / lnOf2);                    dist=gridRes[flowDir];                    x2+=dX[flowDir];                    y2+=dY[flowDir];                    flowpath2[0][curPosFlowpath2]=x2;                    flowpath2[1][curPosFlowpath2]=y2;                    flowpath2[2][curPosFlowpath2]=flowpath2[2][curPosFlowpath2 - 1] + dist;                    for (int d=curPosFlowpath1; d >= 0; d--) {                      if (flowpath1[0][d] == x2 && flowpath1[1][d] == y2) {                        dist=flowpath2[2][curPosFlowpath2];                        if (output.getValue(y,x) < dist) {                          output.setValue(y,x,dist);                        }                        dist=flowpath1[2][d];                        if (output.getValue(row,col) < dist) {                          output.setValue(row,col,dist);                        }                        flag1=false;                        flag2=false;                        break;                      }                    }                  } else {                    flag2=false;                    if (!flag1) {                      dist=flowpath1[2][curPosFlowpath1];                      if (output.getValue(row,col) < dist) {                        output.setValue(row,col,dist);                      }                      dist=flowpath2[2][curPosFlowpath2];                      if (output.getValue(y,x) < dist) {                        output.setValue(y,x,dist);                      }                      break;                    }                  }                }              } while (flag1 || flag2);            }          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",progress);    }    updateProgress("Loop 2 of 2:",-1);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (output.getValue(row,col) != noData) {          output.setValue(row,col,output.getValue(row,col) / 1000);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr1.close();    pntr2.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  void leaveMutatorPool(MutatorThread m){  Trace.trace(Item.SCHEDULER,"%d Leaving mutator pool",Thread.currentThread().getId());synchronized (count) {    boolean lastToGC=(mutatorsBlocked == (activeMutators - 1));    if (activeMutators == 1 || !lastToGC) {      decActiveMutators();      Trace.trace(Item.SCHEDULER,"%d Leaving mutator pool: Removing self from thread pool",Thread.currentThread().getId());      mutatorThreads.remove(m);      return;    }    mutatorsBlocked++;  }  Trace.trace(Item.SCHEDULER,"%d Leaving mutator pool: checking for GC",Thread.currentThread().getId());  waitForGC(true,false);synchronized (count) {    mutatorsBlocked--;    decActiveMutators();  }  Trace.trace(Item.SCHEDULER,"%d Leaving mutator pool: Removing self from thread pool",Thread.currentThread().getId());  mutatorThreads.remove(m);  Trace.trace(Item.SCHEDULER,"%d Leaving mutator pool: done",Thread.currentThread().getId());}  }
class C{  public String addPreRestoreVolumeSteps(Workflow workflow,URI storageSystemURI,URI volumeURI,URI snapshotURI,String taskId){  String waitFor=null;  BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,snapshotURI);  if (snapshot != null && NullColumnValueGetter.isNotNullValue(snapshot.getTechnologyType()) && snapshot.getTechnologyType().equals(TechnologyType.NATIVE.toString())) {    Volume volume=_dbClient.queryObject(Volume.class,volumeURI);    StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storageSystemURI);    if (volume != null && storageSystem != null) {      boolean vplexDistBackingVolume=false;      URI cgId=volume.getConsistencyGroup();      Volume associatedVPlexVolume=Volume.fetchVplexVolume(_dbClient,volume);      if (associatedVPlexVolume != null && associatedVPlexVolume.getAssociatedVolumes() != null && associatedVPlexVolume.getAssociatedVolumes().size() == 2) {        vplexDistBackingVolume=true;      }      if (vplexDistBackingVolume) {        volume=associatedVPlexVolume;      }      if (!NullColumnValueGetter.isNullURI(volume.getProtectionController()) && (vplexDistBackingVolume || (storageSystem != null && NullColumnValueGetter.isNotNullValue(storageSystem.getSystemType()) && storageSystem.getSystemType().equals(SystemType.vmax.toString())))) {        ProtectionSystem rpSystem=null;        rpSystem=_dbClient.queryObject(ProtectionSystem.class,volume.getProtectionController());        if (rpSystem == null) {          throw DeviceControllerExceptions.recoverpoint.failedConnectingForMonitoring(volume.getProtectionController());        }        List<URI> volumeURIs=getVolumesForRestore(snapshot,volume);        List<Volume> volumes=_dbClient.queryObject(Volume.class,volumeURIs);        RPHelper.validateRSetVolumeSizes(_dbClient,volumes);        Map<String,RecreateReplicationSetRequestParams> rsetParams=new HashMap<String,RecreateReplicationSetRequestParams>();        List<String> locks=new ArrayList<String>();        String lockName=ControllerLockingUtil.getConsistencyGroupStorageKey(_dbClient,cgId,rpSystem.getId());        if (null != lockName) {          locks.add(lockName);          acquireWorkflowLockOrThrow(workflow,locks);        }        for (        URI volumeId : volumeURIs) {          Volume vol=_dbClient.queryObject(Volume.class,volumeId);          RecreateReplicationSetRequestParams rsetParam=getReplicationSettings(rpSystem,vol.getId());          rsetParams.put(RPHelper.getRPWWn(vol.getId(),_dbClient),rsetParam);        }        String stepId=workflow.createStepId();        Workflow.Method deleteRsetExecuteMethod=new Workflow.Method(METHOD_DELETE_RSET_STEP,rpSystem.getId(),volumeURIs);        Workflow.Method recreateRSetExecuteMethod=new Workflow.Method(METHOD_RECREATE_RSET_STEP,rpSystem.getId(),volumeURIs,rsetParams);        waitFor=workflow.createStep(STEP_PRE_VOLUME_RESTORE,"Pre volume restore from snapshot, delete replication set step for RP: " + volumeURI.toString(),null,rpSystem.getId(),rpSystem.getSystemType(),this.getClass(),deleteRsetExecuteMethod,recreateRSetExecuteMethod,stepId);        _log.info(String.format("Created workflow step to delete replication set for volume %s.",volume.getId().toString()));      }    }  }  return waitFor;}  }
class C{  public static void write(char[] data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  private void validateCGIsNotInApplication(Volume requestedVolume,String snapshotType){  if (TechnologyType.RP.toString().equalsIgnoreCase(snapshotType)) {    return;  }  if (NullColumnValueGetter.isNotNullValue(requestedVolume.getReplicationGroupInstance()) && (VPlexUtil.isVplexVolume(requestedVolume,_dbClient) || NullColumnValueGetter.isNullURI(requestedVolume.getProtectionController()))) {    VolumeGroup application=requestedVolume.getApplication(_dbClient);    if (application != null) {      throw APIException.badRequests.cannotCreateSnapshotCgPartOfApplication(application.getLabel());    }  }}  }
class C{  public void close() throws java.io.IOException {  return;}  }
class C{  private static boolean isInCornerTargetZone(float x,float y,float handleX,float handleY,float targetRadius){  return Math.abs(x - handleX) <= targetRadius && Math.abs(y - handleY) <= targetRadius;}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  public RegexpQuery(Term term,int flags,AutomatonProvider provider,int maxDeterminizedStates){  super(term,new RegExp(term.text(),flags).toAutomaton(provider,maxDeterminizedStates),maxDeterminizedStates);}  }
class C{  public static MetadataSnapshot readMetadataSnapshot(Path indexLocation,ESLogger logger) throws IOException {  try (Directory dir=new SimpleFSDirectory(indexLocation)){    failIfCorrupted(dir,new ShardId("",1));    return new MetadataSnapshot(null,dir,logger);  } catch (  IndexNotFoundException ex) {  }catch (  FileNotFoundException|NoSuchFileException ex) {    logger.info("Failed to open / find files while reading metadata snapshot");  }  return MetadataSnapshot.EMPTY;}  }
class C{  public EntityPermissions(EntityDictionary dictionary,Class<?> cls,Collection<AccessibleObject> fieldOrMethodList){  this.dictionary=dictionary;  for (  Class<? extends Annotation> annotationClass : PERMISSION_ANNOTATIONS) {    ParseTree classPermission=bindClassPermissions(cls,annotationClass);    final Map<String,ParseTree> fieldPermissions=new HashMap<>();    fieldOrMethodList.stream().forEach(null);    if (classPermission != null || !fieldPermissions.isEmpty()) {      bindings.put(annotationClass,new AnnotationBinding(classPermission,fieldPermissions));    }  }}  }
class C{  public void bind(){  GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,mFBOIds[0]);}  }
class C{  public static void ensureRouteToHost(Context context,String url,String proxy) throws IOException {  ConnectivityManager connMgr=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  connMgr.startUsingNetworkFeature(ConnectivityManager.TYPE_MOBILE_HIPRI,"enableMMS");  if (LOCAL_LOGV)   Log.v(TAG,"ensuring route to host");  int inetAddr;  if (proxy != null && !proxy.equals("")) {    String proxyAddr=proxy;    inetAddr=lookupHost(proxyAddr);    if (inetAddr == -1) {      throw new IOException("Cannot establish route for " + url + ": Unknown host");    } else {      if (!connMgr.requestRouteToHost(ConnectivityManager.TYPE_MOBILE_MMS,inetAddr)) {        throw new IOException("Cannot establish route to proxy " + inetAddr);      }    }  } else {    Uri uri=Uri.parse(url);    inetAddr=lookupHost(uri.getHost());    if (inetAddr == -1) {      throw new IOException("Cannot establish route for " + url + ": Unknown host");    } else {      if (!connMgr.requestRouteToHost(ConnectivityManager.TYPE_MOBILE_MMS,inetAddr)) {        throw new IOException("Cannot establish route to " + inetAddr + " for "+ url);      }    }  }}  }
class C{  public AudioBuffer loadBuffer(String fileName){  AudioBuffer result=null;  try {    WAVData wd=WAVLoader.loadFromFile(fileName);    AudioBuffer[] tmp=generateBuffers(1);    result=tmp[0];    result.configure(wd.data,wd.format,wd.freq);  } catch (  IOException e) {    logger.severe(e.getMessage());  }catch (  UnsupportedAudioFileException e) {    logger.severe(e.getMessage());  }  return result;}  }
class C{  private static Node cloneNode(final Node dom){  final Transformer transformer;  try {    transformer=TransformerFactory.newInstance().newTransformer();  } catch (  final TransformerConfigurationException ex) {    throw new IllegalStateException("Could not create new Transformer to clone Node",ex);  }  final DOMSource source=new DOMSource(dom);  try {    final DOMResult result=new DOMResult();    transformer.transform(source,result);    return result.getNode();  } catch (  final TransformerException ex) {    throw new IllegalArgumentException(String.format("Could not clone Node %s with Transformer %s",source,transformer),ex);  }}  }
class C{  public void notReset(){  canonicalizerSpi.reset=false;}  }
class C{  public void deleteInstances(int[] rowIndices){  int[] realIndices;  int i;  realIndices=new int[rowIndices.length];  for (i=0; i < rowIndices.length; i++)   realIndices[i]=mIndices[rowIndices[i]];  ((DataTableModel)getModel()).deleteInstances(realIndices);}  }
class C{  private Instant convertTimestamp(long timestamp){  return Instant.ofEpochMilli(timestamp);}  }
class C{  public void encode(Long l,ByteBuffer buffer) throws BufferOverflowException {  long value=l;  if (value >>> 7 == 0) {    buffer.put((byte)value);  } else   if (value >>> 14 == 0) {    buffer.put((byte)((value & 0x7F) | 0x80));    buffer.put((byte)(value >>> 7));  } else   if (value >>> 21 == 0) {    buffer.put((byte)((value & 0x7F) | 0x80));    buffer.put((byte)(value >>> 7 | 0x80));    buffer.put((byte)(value >>> 14));  } else   if (value >>> 28 == 0) {    buffer.put((byte)((value & 0x7F) | 0x80));    buffer.put((byte)(value >>> 7 | 0x80));    buffer.put((byte)(value >>> 14 | 0x80));    buffer.put((byte)(value >>> 21));  } else   if (value >>> 35 == 0) {    buffer.put((byte)((value & 0x7F) | 0x80));    buffer.put((byte)(value >>> 7 | 0x80));    buffer.put((byte)(value >>> 14 | 0x80));    buffer.put((byte)(value >>> 21 | 0x80));    buffer.put((byte)(value >>> 28));  } else   if (value >>> 42 == 0) {    buffer.put((byte)((value & 0x7F) | 0x80));    buffer.put((byte)(value >>> 7 | 0x80));    buffer.put((byte)(value >>> 14 | 0x80));    buffer.put((byte)(value >>> 21 | 0x80));    buffer.put((byte)(value >>> 28 | 0x80));    buffer.put((byte)(value >>> 35));  } else   if (value >>> 49 == 0) {    buffer.put((byte)((value & 0x7F) | 0x80));    buffer.put((byte)(value >>> 7 | 0x80));    buffer.put((byte)(value >>> 14 | 0x80));    buffer.put((byte)(value >>> 21 | 0x80));    buffer.put((byte)(value >>> 28 | 0x80));    buffer.put((byte)(value >>> 35 | 0x80));    buffer.put((byte)(value >>> 42));  } else   if (value >>> 56 == 0) {    buffer.put((byte)((value & 0x7F) | 0x80));    buffer.put((byte)(value >>> 7 | 0x80));    buffer.put((byte)(value >>> 14 | 0x80));    buffer.put((byte)(value >>> 21 | 0x80));    buffer.put((byte)(value >>> 28 | 0x80));    buffer.put((byte)(value >>> 35 | 0x80));    buffer.put((byte)(value >>> 42 | 0x80));    buffer.put((byte)(value >>> 49));  } else {    buffer.put((byte)((value & 0x7F) | 0x80));    buffer.put((byte)(value >>> 7 | 0x80));    buffer.put((byte)(value >>> 14 | 0x80));    buffer.put((byte)(value >>> 21 | 0x80));    buffer.put((byte)(value >>> 28 | 0x80));    buffer.put((byte)(value >>> 35 | 0x80));    buffer.put((byte)(value >>> 42 | 0x80));    buffer.put((byte)(value >>> 49 | 0x80));    buffer.put((byte)(value >>> 56));  }}  }
class C{  private static int initializeClockSkew(){  Integer tmp=java.security.AccessController.doPrivileged(new GetIntegerAction("com.sun.security.ocsp.clockSkew"));  if (tmp == null || tmp < 0) {    return DEFAULT_MAX_CLOCK_SKEW;  }  return tmp * 1000;}  }
class C{  private void testBasicLockUnlock(long timeout) throws Exception {  String lockPath="/test-basic-lock-unlock-" + timeout + System.currentTimeMillis();  String clientId="test-basic-lock-unlock";  createLockPath(zkc.get(),lockPath);  ZKSessionLock lock=new ZKSessionLock(zkc,lockPath,clientId,lockStateExecutor);  lock.tryLock(timeout,TimeUnit.MILLISECONDS);  assertEquals(State.CLAIMED,lock.getLockState());  List<String> children=getLockWaiters(zkc,lockPath);  assertEquals(1,children.size());  assertEquals(lock.getLockId(),Await.result(asyncParseClientID(zkc.get(),lockPath,children.get(0))));  try {    lock.tryLock(timeout,TimeUnit.MILLISECONDS);    fail("Should fail on locking a failure lock.");  } catch (  LockStateChangedException lsce) {  }  assertEquals(State.CLAIMED,lock.getLockState());  children=getLockWaiters(zkc,lockPath);  assertEquals(1,children.size());  assertEquals(lock.getLockId(),Await.result(asyncParseClientID(zkc.get(),lockPath,children.get(0))));  lock.unlock();  assertEquals(State.CLOSED,lock.getLockState());  assertEquals(0,getLockWaiters(zkc,lockPath).size());}  }
class C{  public static void hb(){  if (!hbeat) {    hbeat=true;    Heartbeat.add(engine);  }}  }
class C{  static long buildOne(int c,UnicodeSpec us,SpecialCaseMap[] specialMaps){  long resultA=0;  resultA|=us.generalCategory;  NUMERIC: {    STRANGE: {      int val=0;      if ((c >= 0x0041) && (c <= 0x005A)) {        val=c - 0x0041;        resultA|=valueJavaSupradecimal;      } else       if ((c >= 0x0061) && (c <= 0x007A)) {        val=c - 0x0061;        resultA|=valueJavaSupradecimal;      } else       if ((c >= 0xFF21) && (c <= 0xFF3A)) {        val=c - 0xFF21;        resultA|=valueJavaSupradecimal;      } else       if ((c >= 0xFF41) && (c <= 0xFF5A)) {        val=c - 0xFF41;        resultA|=valueJavaSupradecimal;      } else       if (us.isDecimalValue()) {        val=us.decimalValue;        resultA|=valueDigit;      } else       if (us.isDigitValue()) {        val=us.digitValue;        resultA|=valueDigit;      } else {        if (us.numericValue.length() == 0) {          break NUMERIC;        } else {          try {            val=Integer.parseInt(us.numericValue);            if (val >= 32 || val < 0)             break STRANGE;            if (c == 0x215F)             break STRANGE;          } catch (          NumberFormatException e) {            break STRANGE;          }          resultA|=valueDigit;        }      }      if (val >= 32 || val < 0)       break STRANGE;      resultA|=((val - c & maskDigit) << shiftDigitOffset);      break NUMERIC;    }    resultA|=valueStrangeNumeric;  }  int offset=0;  int specialMap=SpecialCaseMap.find(c,specialCaseMaps);  boolean bHasUpper=(us.hasUpperMap()) || (specialMap != -1);  if (bHasUpper) {    resultA|=maskUpperCase;  }  if (specialMap != -1) {    offset=-1;  } else   if (us.hasUpperMap()) {    offset=c - us.upperMap;  }  if (us.hasLowerMap()) {    resultA|=maskLowerCase;    if (offset == 0)     offset=us.lowerMap - c; else     if (offset != (us.lowerMap - c)) {      if (DEBUG) {        FAIL("Character " + hex(c) + " has incompatible lowercase and uppercase mappings");      }    }  }  if ((us.hasTitleMap() && us.titleMap != us.upperMap) || (bHasUpper && us.hasLowerMap())) {    resultA|=maskTitleCase;  }  if (bHasUpper && !us.hasLowerMap() && !us.hasTitleMap()&& verbose) {    System.out.println("Warning: Character " + hex4(c) + " has upper but "+ "no title case; Java won't know this");  }  if (offset < minOffsetSeen)   minOffsetSeen=offset;  if (offset > maxOffsetSeen)   maxOffsetSeen=offset;  if (offset > maxOffset || offset < minOffset) {    if (DEBUG) {      FAIL("Case offset " + offset + " for character "+ hex4(c)+ " must be handled as a special case");    }    offset=maskCase;  }  resultA|=((offset & maskCase) << shiftCaseOffset);  if (us.generalCategory == UnicodeSpec.LOWERCASE_LETTER || us.generalCategory == UnicodeSpec.UPPERCASE_LETTER || us.generalCategory == UnicodeSpec.TITLECASE_LETTER || us.generalCategory == UnicodeSpec.MODIFIER_LETTER || us.generalCategory == UnicodeSpec.OTHER_LETTER || us.generalCategory == UnicodeSpec.LETTER_NUMBER) {    resultA|=valueJavaUnicodeStart;  } else   if (us.generalCategory == UnicodeSpec.COMBINING_SPACING_MARK || us.generalCategory == UnicodeSpec.NON_SPACING_MARK || us.generalCategory == UnicodeSpec.DECIMAL_DIGIT_NUMBER) {    resultA|=valueJavaUnicodePart;  } else   if (us.generalCategory == UnicodeSpec.CONNECTOR_PUNCTUATION) {    resultA|=valueJavaStartUnicodePart;  } else   if (us.generalCategory == UnicodeSpec.CURRENCY_SYMBOL) {    resultA|=valueJavaOnlyStart;  } else   if (((c >= 0x0000) && (c <= 0x0008)) || ((c >= 0x000E) && (c <= 0x001B)) || ((c >= 0x007F) && (c <= 0x009F))|| us.generalCategory == UnicodeSpec.FORMAT) {    resultA|=valueIgnorable;  } else   if (us.generalCategory == UnicodeSpec.SPACE_SEPARATOR || us.generalCategory == UnicodeSpec.LINE_SEPARATOR || us.generalCategory == UnicodeSpec.PARAGRAPH_SEPARATOR) {    if (!isInvalidJavaWhiteSpace(c))     resultA|=valueJavaWhitespace;  } else   if (((c >= 0x0009) && (c <= 0x000D)) || ((c >= 0x001C) && (c <= 0x001F))) {    resultA|=valueJavaWhitespace;  }  if (!nobidi) {    int tmpBidi=(us.bidiCategory > UnicodeSpec.DIRECTIONALITY_OTHER_NEUTRALS || us.bidiCategory == -1) ? maskBidi : (us.bidiCategory << shiftBidi);    resultA|=tmpBidi;  }  if (!nomirror) {    resultA|=us.mirrored ? maskMirrored : 0;  }  if (identifiers) {    long replacement=0;    if ((resultA & maskIdentifierInfo) >= lowJavaStart) {      replacement|=bitJavaStart;    }    if (((resultA & nonzeroJavaPart) != 0) && ((resultA & maskIdentifierInfo) != valueIgnorable)) {      replacement|=bitJavaPart;    }    resultA=replacement;  }  return resultA;}  }
class C{  public TrayNotification(String title,String body,Image img,Paint rectangleFill){  initTrayNotification(title,body,NotificationType.CUSTOM);  setImage(img);  setRectangleFill(rectangleFill);}  }
class C{  public synchronized void save(List<Token> tokens) throws Exception {  confType.getDevice().clear();  tokens.stream().filter(null).forEach(null);  save();}  }
class C{  private static int[] tableFloatToInt(float[] tableValues){  int[] values=new int[tableValues.length];  for (int i=0; i < tableValues.length; i++) {    values[i]=(int)(tableValues[i] * 255f);  }  return values;}  }
class C{  public StaxWriter(final QNameMap qnameMap,final XMLStreamWriter out,final NameCoder nameCoder) throws XMLStreamException {  this(qnameMap,out,true,true,nameCoder);}  }
class C{  static public boolean isZero(float value){  return Math.abs(value) <= FLOAT_ROUNDING_ERROR;}  }
class C{  public String name(){  return name;}  }
class C{  public void returnValue(){  mv.visitInsn(returnType.getOpcode(Opcodes.IRETURN));}  }
class C{  public Vertex mostConscious(Primitive type,float min){  return mostConscious(this.network.createVertex(type),min);}  }
class C{  public static int toInt(Object obj){  if (obj == null)   return 0;  return toInt(obj.toString(),0);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeaderRed=null;  String inputHeaderGreen=null;  String inputHeaderBlue=null;  String inputHeaderPan=null;  String outputHeader=null;  WhiteboxRaster ouptut=null;  int nCols=0;  int nRows=0;  int nColsPan, nRowsPan;  double redNoData=-32768;  double greenNoData=-32768;  double blueNoData=-32768;  double panNoData=-32768;  double x, y, z;  int progress=0;  int col, row;  int a, i;  double north, south, east, west;  double gridResX, gridResY;  String fusionMethod="brovey";  double r, g, b;  int rOut, gOut, bOut;  double adj;  double p;  double[] dataR, dataG, dataB, dataI, dataP;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeaderRed=args[0];  inputHeaderGreen=args[1];  inputHeaderBlue=args[2];  inputHeaderPan=args[3];  outputHeader=args[4];  if (args[5].toLowerCase().contains("ihs")) {    fusionMethod="ihs";  } else   if (args[5].toLowerCase().contains("brov")) {    fusionMethod="brovey";  }  try {    WhiteboxRasterInfo red=new WhiteboxRasterInfo(inputHeaderRed);    WhiteboxRasterInfo green=new WhiteboxRasterInfo(inputHeaderGreen);    WhiteboxRasterInfo blue=new WhiteboxRasterInfo(inputHeaderBlue);    WhiteboxRasterInfo pan=new WhiteboxRasterInfo(inputHeaderPan);    nCols=red.getNumberColumns();    nRows=red.getNumberRows();    if (green.getNumberColumns() != nCols || green.getNumberRows() != nRows) {      showFeedback("The input multispectral files must have the same dimensions.");      return;    }    if (blue.getNumberColumns() != nCols || blue.getNumberRows() != nRows) {      showFeedback("The input multispectral files must have the same dimensions.");      return;    }    north=red.getNorth();    south=red.getSouth();    east=red.getEast();    west=red.getWest();    redNoData=red.getNoDataValue();    greenNoData=green.getNoDataValue();    blueNoData=blue.getNoDataValue();    panNoData=pan.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeaderPan,WhiteboxRaster.DataType.FLOAT,panNoData);    output.setDataScale(DataScale.RGB);    nColsPan=pan.getNumberColumns();    nRowsPan=pan.getNumberRows();    int nColsLessOne=nColsPan - 1;    int nRowsLessOne=nRowsPan - 1;    gridResX=pan.getCellSizeX();    gridResY=pan.getCellSizeY();    double yRange=pan.getNorth() - pan.getSouth() - gridResY;    double xRange=pan.getEast() - pan.getWest() - gridResX;    int sourceCol, sourceRow;    double northernEdge=pan.getNorth() - gridResY;    double westernEdge=pan.getWest() + gridResX;    if (north < south) {      northernEdge=pan.getNorth() + gridResY;    }    if (east < west) {      westernEdge=west - gridResX;    }    double pMin=pan.getMinimumValue();    double pRange=pan.getMaximumValue() - pMin;    double maxMSVal=red.getMaximumValue();    if (green.getMaximumValue() > maxMSVal) {      maxMSVal=green.getMaximumValue();    }    if (blue.getMaximumValue() > maxMSVal) {      maxMSVal=blue.getMaximumValue();    }    if (fusionMethod.contains("brov")) {      for (row=0; row < nRowsPan; row++) {        y=northernEdge - (yRange * row) / nRowsLessOne;        sourceRow=(int)Math.round((north - y) / (north - south) * (nRows - 0.5));        if (sourceRow >= nRows) {          break;        }        if (sourceRow < 0) {          sourceRow=0;        }        dataR=red.getRowValues(sourceRow);        dataG=green.getRowValues(sourceRow);        dataB=blue.getRowValues(sourceRow);        dataP=pan.getRowValues(row);        for (col=0; col < nColsPan; col++) {          x=westernEdge + (xRange * col) / nColsLessOne;          sourceCol=(int)Math.round((x - west) / (east - west) * (nCols - 0.5));          if (sourceCol >= nCols) {            break;          }          if (sourceCol < 0) {            sourceCol=0;          }          p=(dataP[col] - pMin) / pRange;          if (dataP[col] != panNoData && dataR[sourceCol] != redNoData && dataG[sourceCol] != greenNoData && dataB[sourceCol] != blueNoData) {            r=dataR[sourceCol];            g=dataG[sourceCol];            b=dataB[sourceCol];            adj=(r + g + b) / 3;            rOut=(int)(r * p / adj * 255);            gOut=(int)(g * p / adj * 255);            bOut=(int)(b * p / adj * 255);            if (rOut < 0) {              rOut=0;            }            if (gOut < 0) {              gOut=0;            }            if (bOut < 0) {              bOut=0;            }            if (rOut > 255) {              rOut=255;            }            if (gOut > 255) {              gOut=255;            }            if (bOut > 255) {              bOut=255;            }            z=(double)((255 << 24) | (bOut << 16) | (gOut << 8)| rOut);            output.setValue(row,col,z);          } else {            output.setValue(row,col,panNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRowsPan - 1));        updateProgress(progress);      }    } else     if (fusionMethod.contains("ihs")) {      double[] ihs=new double[3];      double[] rgb=new double[3];      for (row=0; row < nRowsPan; row++) {        y=northernEdge - (yRange * row) / nRowsLessOne;        sourceRow=(int)Math.round((north - y) / (north - south) * (nRows - 0.5));        if (sourceRow >= nRows) {          break;        }        if (sourceRow < 0) {          sourceRow=0;        }        dataR=red.getRowValues(sourceRow);        dataG=green.getRowValues(sourceRow);        dataB=blue.getRowValues(sourceRow);        dataP=pan.getRowValues(row);        for (col=0; col < nColsPan; col++) {          x=westernEdge + (xRange * col) / nColsLessOne;          sourceCol=(int)Math.round((x - west) / (east - west) * (nCols - 0.5));          if (sourceCol >= nCols) {            break;          }          if (sourceCol < 0) {            sourceCol=0;          }          p=(dataP[col] - pMin) / pRange;          if (dataP[col] != panNoData && dataR[sourceCol] != redNoData && dataG[sourceCol] != greenNoData && dataB[sourceCol] != blueNoData) {            r=dataR[sourceCol] / maxMSVal;            g=dataG[sourceCol] / maxMSVal;            b=dataB[sourceCol] / maxMSVal;            ihs=RGBtoIHS(r,g,b);            ihs[0]=p * 3;            rgb=IHStoRGB(ihs);            rOut=(int)(rgb[0] * 255);            gOut=(int)(rgb[1] * 255);            bOut=(int)(rgb[2] * 255);            if (rOut < 0) {              rOut=0;            }            if (gOut < 0) {              gOut=0;            }            if (bOut < 0) {              bOut=0;            }            if (rOut > 255) {              rOut=255;            }            if (gOut > 255) {              gOut=255;            }            if (bOut > 255) {              bOut=255;            }            z=(double)((255 << 24) | (bOut << 16) | (gOut << 8)| rOut);            output.setValue(row,col,z);          } else {            output.setValue(row,col,panNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRowsPan - 1));        updateProgress(progress);      }    }    pan.close();    red.close();    green.close();    blue.close();    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public FixedWindows withOffset(Duration offset){  return new FixedWindows(size,offset);}  }
class C{  @Override public void load(String fileName,String encoding) throws IOException {  if (fileName == null) {    return;  }  Set<String> defs=new HashSet<String>(definitions);  boolean extendIncludes=true;  StringBuilder fileData=new StringBuilder(DelphiUtils.readFileContent(new File(fileName),encoding));  SourceResolverResults resolverResult=new SourceResolverResults(fileName,fileData);  SourceResolver resolver=new ExcludeResolver();  resolver.chain(new IncludeResolver(extendIncludes,includeDirectories)).chain(new ExcludeResolver()).chain(new DefineResolver(defs)).chain(new SourceFixerResolver());  resolver.resolve(resolverResult);  data=resolverResult.getFileData().toString().toCharArray();  super.n=data.length;}  }
class C{  public void createSubUsageScenario05() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") - DateTimeHandling.daysToMillis(5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO05_PERUNIT_DAY",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_DAY_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO05_PERUNIT_DAY",serviceDetails,basicSetup.getCustomerUser1(),role);  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") + DateTimeHandling.daysToMillis(8);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO05_PERUNIT_DAY",subDetails);}  }
class C{  private static void unlink(final ITreeNode<CTag> parent,final ITreeNode<CTag> child){  child.setParent(null);  parent.removeChild(child);}  }
class C{  public boolean provideTransaction(Transaction tx) throws VerificationException {  Sha256Hash hash=tx.getHash();  if (getTransactionHashes().contains(hash)) {    associatedTransactions.put(hash,tx);    return true;  } else   return false;}  }
class C{  public void onGreenButtonClick(View v){  if (isSubscribed()) {    final SharedPreferences settings=getSharedPreferencesForCurrentUser();    boolean entitled=settings.getBoolean(GREEN_BUTTON,false);    if (!entitled) {      String requestId=PurchasingManager.initiatePurchaseRequest(getResources().getString(R.string.entitlement_sku_green));      storeRequestId(requestId,GREEN_BUTTON);    } else {      centerButton.setBackgroundDrawable(getResources().getDrawable(R.drawable.greenbutton));    }  } else {    generateSubscribeDialog();  }}  }
class C{  public void addListener(ChartListener listener){  if (listenerList == null) {    listenerList=new ArrayList<ChartListener>();  }  listenerList.add(listener);}  }
class C{  public void clear(){  dirtyNodes=null;}  }
class C{  private static <T>int gallopRight(T key,T[] a,int base,int len,int hint,Comparator<? super T> c){  if (DEBUG)   assert len > 0 && hint >= 0 && hint < len;  int ofs=1;  int lastOfs=0;  if (c.compare(key,a[base + hint]) < 0) {    int maxOfs=hint + 1;    while (ofs < maxOfs && c.compare(key,a[base + hint - ofs]) < 0) {      lastOfs=ofs;      ofs=(ofs * 2) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  } else {    int maxOfs=len - hint;    while (ofs < maxOfs && c.compare(key,a[base + hint + ofs]) >= 0) {      lastOfs=ofs;      ofs=(ofs * 2) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  }  if (DEBUG)   assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (c.compare(key,a[base + m]) < 0)     ofs=m; else     lastOfs=m + 1;  }  if (DEBUG)   assert lastOfs == ofs;  return ofs;}  }
class C{  public boolean isNull(String key){  return JSONObject.NULL.equals(this.opt(key));}  }
class C{  public static double quantile(double x,double mu,double sigma){  return Math.exp(mu + sigma * NormalDistribution.standardNormalQuantile(x));}  }
class C{  public Complex(double real){  this.real=real;  this.imag=0.0;}  }
class C{  public boolean isDone(){  return (index > 1);}  }
class C{  public ClassLoader resolveDependencies(String containerId,ClassLoader parent) throws MojoExecutionException {  URLClassLoader classloader;  List<Dependency> dependencies=this.containerDependencies.get(containerId);  if (dependencies == null) {    return null;  }  try {    List<URL> urls=new ArrayList<URL>(dependencies.size() + 1);    for (    Dependency dependency : dependencies) {      Artifact artifact=this.artifactFactory.createArtifact(dependency.groupId,dependency.artifactId,dependency.version,"compile","jar");      this.artifactResolver.resolve(artifact,this.repositories,this.localRepository);      urls.add(artifact.getFile().toURI().toURL());    }    if (!JdkUtils.isOSX() && JdkUtils.getMajorJavaVersion() < 9) {      urls.add(JdkUtils.getToolsJar().toURI().toURL());    }    URL[] urlArray=(URL[])urls.toArray(new URL[urls.size()]);    if (parent == null) {      classloader=new URLClassLoader(urlArray);    } else {      classloader=new URLClassLoader(urlArray,parent);    }  } catch (  Exception e) {    throw new MojoExecutionException("Failed to resolve dependency",e);  }  return classloader;}  }
class C{  public MaterialCollapsibleItem(final Widget... widgets){  this();  for (  Widget w : widgets) {    add(w);  }}  }
class C{  private void startNetworkSystem(NetworkSystem device) throws InternalException {  NetworkController controller=getNetworkController(device.getSystemType());  controller.connectNetwork(device.getId());}  }
class C{  public void fillAligned(){  int len=MathUtils.roundUpInt(pos + 2,Constants.FILE_BLOCK_SIZE);  pos=len;  if (data.length < len) {    checkCapacity(len - data.length);  }}  }
class C{  public void addObjectsToLocation(final Collection objs,final int x,final int y){  if (objs == null)   return;  Bag[] fieldx=field[x];  if (fieldx[y] == null)   buildBag(fieldx,y);  fieldx[y].addAll(objs);}  }
class C{  @BeforeClass() public static void initClass() throws SQLException {  createTable("emojiTest","id int unsigned, field longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");  createTable("unicodeTestChar","id int unsigned, field1 varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci, field2 longtext " + "CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci","DEFAULT CHARSET=utf8mb4");  createTable("textUtf8","column1 text","DEFAULT CHARSET=utf8");  createTable("blobUtf8","column1 blob","DEFAULT CHARSET=utf8");}  }
class C{  public void removeAt(int index){  System.arraycopy(mKeys,index + 1,mKeys,index,mSize - (index + 1));  System.arraycopy(mValues,index + 1,mValues,index,mSize - (index + 1));  mSize--;}  }
class C{  @Override public void run(){}  }
class C{  @Override public String toString(){  StringBuilder s=new StringBuilder();  s.append("if ");  s.append(this.state);  s.append(" then ");  s.append(this.plan);  return s.toString();}  }
class C{  public static int floorMod(final long x,final int y){  return (int)(x - floorDiv(x,y) * y);}  }
class C{  private static byte[] convertStreamToString(InputStream is) throws IOException {  BufferedReader reader=new BufferedReader(new InputStreamReader(is));  StringBuilder sb=new StringBuilder();  String line;  try {    while ((line=reader.readLine()) != null) {      sb.append(line);    }    return sb.toString().getBytes(UTF8);  }  finally {    CloseableUtils.tryToClose(is);  }}  }
class C{  public OnTransitionEvent(Object source,Transition<?,?> transition){  super(source,transition);}  }
class C{  void checkContactRequirements(Set<RegistrarContact> existingContacts,Set<RegistrarContact> updatedContacts){  Set<String> emails=new HashSet<>();  for (  RegistrarContact contact : updatedContacts) {    if (!emails.add(contact.getEmailAddress())) {      throw new ContactRequirementException(String.format("One email address (%s) cannot be used for multiple contacts",contact.getEmailAddress()));    }  }  Multimap<RegistrarContact.Type,RegistrarContact> oldContactsByType=HashMultimap.create();  for (  RegistrarContact contact : existingContacts) {    for (    RegistrarContact.Type t : contact.getTypes()) {      oldContactsByType.put(t,contact);    }  }  Multimap<RegistrarContact.Type,RegistrarContact> newContactsByType=HashMultimap.create();  for (  RegistrarContact contact : updatedContacts) {    for (    RegistrarContact.Type t : contact.getTypes()) {      newContactsByType.put(t,contact);    }  }  for (  RegistrarContact.Type t : difference(oldContactsByType.keySet(),newContactsByType.keySet())) {    if (t.isRequired()) {      throw new ContactRequirementException(t);    }  }  if (any(oldContactsByType.get(RegistrarContact.Type.TECH),HAS_PHONE) && !any(newContactsByType.get(RegistrarContact.Type.TECH),HAS_PHONE)) {    throw new ContactRequirementException(String.format("At least one %s contact must have a phone number",RegistrarContact.Type.TECH.getDisplayName()));  }}  }
class C{  public void test_getProvider() throws NoSuchAlgorithmException, NoSuchProviderException {  assertEquals("Incorrect provider",getDefaultProvider(),TrustManagerFactory.getInstance(getDefaultAlgorithm()).getProvider());  assertEquals("Incorrect provider",getDefaultProvider(),TrustManagerFactory.getInstance(getDefaultAlgorithm(),getDefaultProviderName()).getProvider());  assertEquals("Incorrect provider",getDefaultProvider(),TrustManagerFactory.getInstance(getDefaultAlgorithm(),getDefaultProvider()).getProvider());}  }
class C{  public void initialise(int k) throws Exception {  initialise(k,epsilon);}  }
class C{  public CompiledST defineTemplate(String name,String argsS,String template){  if (name.charAt(0) != '/')   name="/" + name;  String[] args=argsS.split(",");  List<FormalArgument> a=new ArrayList<FormalArgument>();  for (  String arg : args) {    a.add(new FormalArgument(arg));  }  return defineTemplate(name,new CommonToken(GroupParser.ID,name),a,template,null);}  }
class C{  public ServiceOperationException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.114 -0500",hash_original_method="7E02E9AA12C4A958E94F9A413E55434A",hash_generated_method="0665231E11D1B705C546F5C3CB2CBE70") void handleAuthResponse(String username,String password){  if (DebugFlags.LOAD_LISTENER) {    Log.v(LOGTAG,"LoadListener.handleAuthResponse: url: " + mUrl + " username: "+ username+ " password: "+ password);  }  if (username != null && password != null) {    makeAuthResponse(username,password);  } else {    commitLoad();    tearDown();  }}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public static ListViewLicenseFragment newInstance(){  return (ListViewLicenseFragment)onNewInstance(new ListViewLicenseFragment());}  }
class C{  protected void fillRaster(int[] pixels,int off,int adjust,int x,int y,int w,int h){  final float initConst=(dgdX * x) + gc;  if (fillMethod == ANTI_ALIAS_IMPL) {    for (int i=0; i < h; i++) {      float g=initConst + dgdY * (y + i);      final int rowLimit=off + w;      while (off < rowLimit) {        pixels[off++]=indexGradientAntiAlias(g,pixSz);        g+=dgdX;      }      off+=adjust;    }  } else   if (!isSimpleLookup) {    if (cycleMethod == MultipleGradientPaint.NO_CYCLE) {      fillHardNoCycle(pixels,off,adjust,x,y,w,h);    } else {      for (int i=0; i < h; i++) {        float g=initConst + dgdY * (y + i);        final int rowLimit=off + w;        while (off < rowLimit) {          pixels[off++]=indexIntoGradientsArrays(g);          g+=dgdX;        }        off+=adjust;      }    }  } else {    if (cycleMethod == MultipleGradientPaint.NO_CYCLE)     fillSimpleNoCycle(pixels,off,adjust,x,y,w,h); else     if (cycleMethod == MultipleGradientPaint.REPEAT)     fillSimpleRepeat(pixels,off,adjust,x,y,w,h); else     fillSimpleReflect(pixels,off,adjust,x,y,w,h);  }}  }
class C{  private void addHelpNodesToTree(HelpNode node,DefaultTreeModel model,MutableTreeNode parent){  MutableTreeNode n=new DefaultMutableTreeNode(node);  int index=model.getChildCount(parent);  model.insertNodeInto(n,parent,index);  for (int i=0; i < node.nodes.size(); i++) {    addHelpNodesToTree(node.nodes.get(i),model,n);  }}  }
class C{  public EmptyBorder(int top,int left,int bottom,int right){  this.top=top;  this.right=right;  this.bottom=bottom;  this.left=left;}  }
class C{  void removeMin(){  queue[1]=queue[size];  queue[size--]=null;  fixDown(1);}  }
class C{  public final CC shrinkY(float w){  ver.setShrink(new Float(w));  return this;}  }
class C{  public static ServerAsset map(Asset asset,ServerAsset serverAsset){  return map(asset,serverAsset,null,null,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:27.372 -0500",hash_original_method="16D0E6CF226A4618D75D1B422CC8FCDF",hash_generated_method="4164740904B2F8F392B631D8C36F225E") public boolean isReliable(){  return true;}  }
class C{  public static String showPasswordHint(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  String userLoginId=request.getParameter("USERNAME");  String errMsg=null;  if ((userLoginId != null) && ("true".equals(EntityUtilProperties.getPropertyValue("security.properties","username.lowercase",delegator)))) {    userLoginId=userLoginId.toLowerCase();  }  if (!UtilValidate.isNotEmpty(userLoginId)) {    errMsg=UtilProperties.getMessage(resource,"loginevents.username_was_empty_reenter",UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  GenericValue supposedUserLogin=null;  try {    supposedUserLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId",userLoginId).queryOne();  } catch (  GenericEntityException gee) {    Debug.logWarning(gee,"",module);  }  if (supposedUserLogin == null) {    errMsg=UtilProperties.getMessage(resource,"loginevents.username_not_found_reenter",UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  String passwordHint=supposedUserLogin.getString("passwordHint");  if (!UtilValidate.isNotEmpty(passwordHint)) {    errMsg=UtilProperties.getMessage(resource,"loginevents.no_password_hint_specified_try_password_emailed",UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  Map<String,String> messageMap=UtilMisc.toMap("passwordHint",passwordHint);  errMsg=UtilProperties.getMessage(resource,"loginevents.password_hint_is",messageMap,UtilHttp.getLocale(request));  request.setAttribute("_EVENT_MESSAGE_",errMsg);  return "success";}  }
class C{  @Override public int available(){  if (pos == -1) {    return tail - head - pad;  }  return pos - head;}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public CompiledST defineTemplateAlias(Token aliasT,Token targetT){  String alias=aliasT.getText();  String target=targetT.getText();  CompiledST targetCode=rawGetTemplate("/" + target);  if (targetCode == null) {    errMgr.compileTimeError(ErrorType.ALIAS_TARGET_UNDEFINED,null,aliasT,alias,target);    return null;  }  rawDefineTemplate("/" + alias,targetCode,aliasT);  return targetCode;}  }
class C{  private void writeTrackStyle(){  printWriter.println("<Style id=\"" + TRACK_STYLE + "\">");  printWriter.println("<LineStyle><color>7f0000ff</color><width>4</width></LineStyle>");  printWriter.println("<IconStyle>");  printWriter.println("<scale>1.3</scale>");  printWriter.println("<Icon><href>" + TRACK_ICON + "</href></Icon>");  printWriter.println("</IconStyle>");  printWriter.println("</Style>");}  }
class C{  @Nullable @Override public Project findById(@Nonnull Integer id){  Project project=null;  try {    begin();    project=getEntityManager().find(Project.class,id);    if (project != null) {      project.getWorkloads().get(0).getJobConfiguration().readConfig();      project.getWorkloads().get(0).getJobConfiguration().getJobRegions();      project.getWorkloads().get(0).getJobConfiguration().getVariables();      project.getWorkloads().get(0).getJobConfiguration().getDataFileIds();      project.getWorkloads().get(0).getJobConfiguration().getNotifications();      for (      TestPlan tp : project.getWorkloads().get(0).getTestPlans()) {        for (        ScriptGroup sg : tp.getScriptGroups()) {          sg.getScriptGroupSteps();        }      }    }    commit();  } catch (  Exception e) {    rollback();    e.printStackTrace();    throw new RuntimeException(e);  } finally {    cleanup();  }  return project;}  }
class C{  private void onPublicKeysGroupRemoved(int uid,int keyGroupId){  UserKeys userKeys=getCachedUserKeys(uid);  if (userKeys == null) {    return;  }  UserKeys updatedUserKeys=userKeys.removeUserKeyGroup(keyGroupId);  cacheUserKeys(updatedUserKeys);  context().getEncryption().getEncryptedChatManager(uid).send(new EncryptedPeerActor.KeyGroupUpdated(userKeys));}  }
class C{  public void testUnsatisfiableMinusExplainHint01() throws Exception {  final ASTContainer container=new TestHelper("explainHints-unsatisfiableminus01","explainHints-unsatisfiableminus01.rq","explainHints.trig","explainHints-unsatisfiableminus01.srx").runTest();  assertCarriesExactlyOneExplainHintOfType(container.getOptimizedAST(),UnsatisfiableMinusExplainHint.class);}  }
class C{  public void onSuccess(int statusCode,Header[] headers,JSONObject response){  AsyncHttpClient.log.w(LOG_TAG,"onSuccess(int, Header[], JSONObject) was not overriden, but callback was received");}  }
class C{  @POST public Response createOrder(Order order){  String id=producer.requestBody("direct:createOrder",order,String.class);  return Response.ok(id).build();}  }
class C{  private static void vecswap(float[] x,int a,int b,int n){  for (int i=0; i < n; i++, a++, b++)   swap(x,a,b);}  }
class C{  @Override public boolean isMinorTickMarksVisible(){  return this.minorTickMarksVisible;}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  this.lastChartChangeEvent=event;}  }
class C{  public static void doMain(File modelFile,Properties properties) throws N4JSCompileException {  N4HeadlessCompiler hlc=injectAndSetup(properties);  hlc.compileSingleFile(modelFile,new DismissingIssueAcceptor());}  }
class C{  public HttpStatus createUser(User user){  logger.info("GitlabService : createUser " + user.getLogin());  if (gitlabToken == null || gitlabToken.trim().length() == 0) {    logger.warn("Cannot use this feature because no token for GitLab");    return HttpStatus.BAD_REQUEST;  }  if (gitlabAPI == null || gitlabAPI.trim().length() == 0) {    logger.warn("Cannot use this feature because no URL given for GitLab API");    return HttpStatus.BAD_REQUEST;  }  try {    GitlabAPI api=GitlabAPI.connect(gitlabAPI,gitlabToken,TokenType.PRIVATE_TOKEN,AuthMethod.URL_PARAMETER);    api.createUser(user.getEmail(),user.getPassword(),user.getLogin(),user.getFirstName() + " " + user.getLastName(),null,null,null,null,null,null,null,null,false,false,false);    return HttpStatus.OK;  } catch (  Exception e) {    logger.error(user.toString(),e);    return HttpStatus.BAD_REQUEST;  }}  }
class C{  @Override public void buildClassifier(Instances data) throws Exception {  Instances newData=new Instances(data);  newData.deleteWithMissingClass();  m_structure=new Instances(newData,0);  m_Random=new Random(getSeed());  if (m_classifiersToLoad.size() > 0) {    m_preBuiltClassifiers.clear();    loadClassifiers(data);    if (m_Classifiers.length == 1 && m_Classifiers[0] instanceof weka.classifiers.rules.ZeroR) {      m_Classifiers=new Classifier[0];    }  }  getCapabilities().testWithFail(data);  for (int i=0; i < m_Classifiers.length; i++) {    getClassifier(i).buildClassifier(newData);  }}  }
class C{  private void renameVolumeAfterExtentMigration(VPlexVirtualVolumeInfo virtualVolumeInfo,VPlexMigrationInfo migrationInfo){  String migrationSrcName=migrationInfo.getSource();  String srcVolumeName=migrationSrcName.substring(VPlexApiConstants.EXTENT_PREFIX.length(),migrationSrcName.indexOf(VPlexApiConstants.EXTENT_SUFFIX));  String migrationTgtName=migrationInfo.getTarget();  String tgtVolumeName=migrationTgtName.substring(VPlexApiConstants.EXTENT_PREFIX.length(),migrationTgtName.indexOf(VPlexApiConstants.EXTENT_SUFFIX));  String virtualVolumeName=virtualVolumeInfo.getName();  String updatedVirtualVolumeName=virtualVolumeName.replace(srcVolumeName,tgtVolumeName);  virtualVolumeInfo=_vplexApiClient.getVirtualVolumeManager().renameVPlexResource(virtualVolumeInfo,updatedVirtualVolumeName);  virtualVolumeInfo.updateNameOnMigrationCommit(updatedVirtualVolumeName);  migrationInfo.setVirtualVolumeInfo(virtualVolumeInfo);}  }
class C{  public static String extractUsername(String auth){  auth=emptyToNull(auth);  if (auth == null) {    return null;  } else   if (auth.startsWith("Basic ")) {    auth=auth.substring("Basic ".length());    auth=new String(Base64.decode(auth));    final int c=auth.indexOf(':');    return c > 0 ? auth.substring(0,c) : null;  } else   if (auth.startsWith("Digest ")) {    final int u=auth.indexOf("username=\"");    if (u <= 0) {      return null;    }    auth=auth.substring(u + 10);    final int e=auth.indexOf('"');    return e > 0 ? auth.substring(0,e) : null;  } else {    return null;  }}  }
class C{  public Cursor query(SQLiteDatabase db,String[] projectionIn,String selection,String[] selectionArgs,String groupBy,String having,String sortOrder){  return query(db,projectionIn,selection,selectionArgs,groupBy,having,sortOrder,null,null);}  }
class C{  public void addTo(Address address){  _toList.add(address);}  }
class C{  private int[] blackWhiteRange(int fixedDimension,int maxWhiteRun,int minDim,int maxDim,boolean horizontal){  int center=(minDim + maxDim) >> 1;  int start=center;  while (start >= minDim) {    if (horizontal ? image.get(start,fixedDimension) : image.get(fixedDimension,start)) {      start--;    } else {      int whiteRunStart=start;      do {        start--;      } while (start >= minDim && !(horizontal ? image.get(start,fixedDimension) : image.get(fixedDimension,start)));      int whiteRunSize=whiteRunStart - start;      if (start < minDim || whiteRunSize > maxWhiteRun) {        start=whiteRunStart;        break;      }    }  }  start++;  int end=center;  while (end < maxDim) {    if (horizontal ? image.get(end,fixedDimension) : image.get(fixedDimension,end)) {      end++;    } else {      int whiteRunStart=end;      do {        end++;      } while (end < maxDim && !(horizontal ? image.get(end,fixedDimension) : image.get(fixedDimension,end)));      int whiteRunSize=end - whiteRunStart;      if (end >= maxDim || whiteRunSize > maxWhiteRun) {        end=whiteRunStart;        break;      }    }  }  end--;  return end > start ? new int[]{start,end} : null;}  }
class C{  @Deprecated public static EpisodeMatchingResult detectEpisodeFromFilename(File file){  LOGGER.debug("Detect episodes/seasons from file " + file.getName());  EpisodeMatchingResult result=new EpisodeMatchingResult();  String fileName=file.getName();  result=parseString(fileName);  Collections.sort(result.episodes);  Matcher matcher=stackingMarkerPattern.matcher(result.name);  result.stackingMarkerFound=matcher.matches();  LOGGER.debug("returning result " + result);  return result;}  }
class C{  public void push(final int value){  if (value >= -1 && value <= 5) {    mv.visitInsn(Opcodes.ICONST_0 + value);  } else   if (value >= Byte.MIN_VALUE && value <= Byte.MAX_VALUE) {    mv.visitIntInsn(Opcodes.BIPUSH,value);  } else   if (value >= Short.MIN_VALUE && value <= Short.MAX_VALUE) {    mv.visitIntInsn(Opcodes.SIPUSH,value);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  public ZeroLengthPath(Scope scope,Var subjVar,Var objVar,Var conVar){  setScope(scope);  setSubjectVar(subjVar);  setObjectVar(objVar);  setContextVar(conVar);}  }
class C{  private void applyLastDayOfMonth(Calendar cal,int month){  cal.set(Calendar.MONTH,month + 1);  cal.set(Calendar.DAY_OF_MONTH,1);  cal.add(Calendar.DAY_OF_MONTH,-1);}  }
class C{  public synchronized void run(){  if (fullInit == true) {    return;  }  try {    fullInit=true;    finishInitialization();  } catch (  FormatException f) {  }  close();}  }
class C{  public void remove(int size) throws CacheException {  for (int i=0; i < size; i++) {    remove();  }  if (logger.isTraceEnabled()) {    logger.trace("{}: Removed a batch of {} entries",this,size);  }}  }
class C{  public List arguments(){  return this.arguments;}  }
class C{  public void writeFile(File pFile,Element pRootElement,RosterEntry pEntry){  if (log.isDebugEnabled()) {    log.debug("writeFile to " + pFile.getAbsolutePath() + " "+ pFile.getName());  }  try {    Document doc=newDocument(pRootElement,dtdLocation + "locomotive-config.dtd");    if (log.isDebugEnabled()) {      log.debug("pEntry: " + pEntry);    }    pRootElement.getChild("locomotive").getAttribute("id").setValue(pEntry.getId());    writeXML(pFile,doc);  } catch (  IOException ex) {    ex.printStackTrace();  }}  }
class C{  public boolean isCentrallyMaintained(){  Object oo=get_Value(COLUMNNAME_IsCentrallyMaintained);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected Node nextSibling(Node n,Node root){  while (true) {    if (n == root) {      return null;    }    Node result=n.getNextSibling();    if (result == null) {      result=n.getParentNode();      if (result == null || result == root) {        return null;      }      if (acceptNode(result) == NodeFilter.FILTER_SKIP) {        n=result;        continue;      }      return null;    }switch (acceptNode(result)) {case NodeFilter.FILTER_ACCEPT:      return result;case NodeFilter.FILTER_SKIP:    Node t=firstChild(result);  if (t != null) {    return t;  }default :n=result;continue;}}}  }
class C{  public void increaseNumberOfRunsByOne(){  this.numberOfRuns++;}  }
class C{  private void move(CampusWorld geoTest){  if (!arrived()) {    moveAlongPath();  } else {    findNewPath(geoTest);  }}  }
class C{  public <T extends E>T insert(T newEntry) throws ServiceException, IOException {  if (feedState.service == null) {    throw new ServiceException(CoreErrorDomain.ERR.entryNotAssociated);  }  Link postLink=getEntryPostLink();  if (postLink == null) {    throw new UnsupportedOperationException("Media cannot be inserted");  }  URL postUrl=new URL(postLink.getHref());  return feedState.service.insert(postUrl,newEntry);}  }
class C{  public void transformValues(TIntFunction function){  Object[] keys=_set;  int[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (keys[i] != null && keys[i] != REMOVED) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  public void dispose(){  super.clear();  if (pcNotifier != null) {    pcNotifier.setTerminated(true);    pcNotifier.fireProjectionEvent(null);    pcNotifier.interrupt();    pcNotifier=null;  }}  }
class C{  public static PullParams create(@NotNull String image){  return new PullParams().withImage(image);}  }
class C{  protected boolean regExpRegionMatches(String text,int tStart,String p,int pStart,int plen){  while (plen-- > 0) {    char tchar=text.charAt(tStart++);    char pchar=p.charAt(pStart++);    if (!this.fIgnoreWildCards) {      if (pchar == fSingleWildCard) {        continue;      }    }    if (pchar == tchar) {      continue;    }    if (this.fIgnoreCase) {      if (Character.toUpperCase(tchar) == Character.toUpperCase(pchar)) {        continue;      }      if (Character.toLowerCase(tchar) == Character.toLowerCase(pchar)) {        continue;      }    }    return false;  }  return true;}  }
class C{  public float dst2(float x,float y,float z){  float a=x - this.x;  float b=y - this.y;  float c=z - this.z;  a*=a;  b*=b;  c*=c;  return a + b + c;}  }
class C{  public void remove(ITicket ticket){  tickets.remove(ticket);  scanShouldTick();}  }
class C{  public static void main(String[] args) throws Exception {  Project.initialize();  GenericObjectEditor.registerAllEditors();  MeasurementEvaluationStatisticsExporterFileChooser fchooser=new MeasurementEvaluationStatisticsExporterFileChooser();  int retVal=fchooser.showSaveDialog(null);  System.out.println("OK? " + (retVal == MeasurementEvaluationStatisticsExporterFileChooser.APPROVE_OPTION));  System.out.println("file: " + fchooser.getSelectedFile());  System.out.println("writer: " + OptionUtils.toCommandLine(fchooser.getWriter()));}  }
class C{  public void addDependency(String... dependencyIDs){  if (dependencyIDs == null) {    throw new IllegalArgumentException("dependencyIDs must not be null!");  }  for (  String dependencyID : dependencyIDs) {    if (dependencyID == null) {      throw new IllegalArgumentException("dependencyID must not be null!");    }    this.dependencies.add(dependencyID);  }}  }
class C{  public void dupX1(){  mv.visitInsn(Opcodes.DUP_X1);}  }
class C{  public void destroyBody(Body body){  assert (m_bodyCount > 0);  assert (isLocked() == false);  if (isLocked()) {    return;  }  JointEdge je=body.m_jointList;  while (je != null) {    JointEdge je0=je;    je=je.next;    if (m_destructionListener != null) {      m_destructionListener.sayGoodbye(je0.joint);    }    destroyJoint(je0.joint);    body.m_jointList=je;  }  body.m_jointList=null;  ContactEdge ce=body.m_contactList;  while (ce != null) {    ContactEdge ce0=ce;    ce=ce.next;    m_contactManager.destroy(ce0.contact);  }  body.m_contactList=null;  Fixture f=body.m_fixtureList;  while (f != null) {    Fixture f0=f;    f=f.m_next;    if (m_destructionListener != null) {      m_destructionListener.sayGoodbye(f0);    }    f0.destroyProxies(m_contactManager.m_broadPhase);    f0.destroy();    body.m_fixtureList=f;    body.m_fixtureCount-=1;  }  body.m_fixtureList=null;  body.m_fixtureCount=0;  if (body.m_prev != null) {    body.m_prev.m_next=body.m_next;  }  if (body.m_next != null) {    body.m_next.m_prev=body.m_prev;  }  if (body == m_bodyList) {    m_bodyList=body.m_next;  }  --m_bodyCount;}  }
class C{  public void replay(NodeProcess primary,long start,long end) throws IOException {  try (Connection c=new Connection(primary.tcpPort)){    c.out.writeByte(SimplePrimaryNode.CMD_INDEXING);    byte[] intBuffer=new byte[4];    ByteBuffer intByteBuffer=ByteBuffer.wrap(intBuffer);    ByteArrayDataInput in=new ByteArrayDataInput();    long pos=start;    while (pos < end) {      intByteBuffer.position(0);      intByteBuffer.limit(4);      readBytesFromChannel(pos,intByteBuffer);      pos+=4;      int len=((intBuffer[0] & 0xff) << 24) | (intBuffer[1] & 0xff) << 16 | (intBuffer[2] & 0xff) << 8 | (intBuffer[3] & 0xff);      byte[] bytes=new byte[len];      readBytesFromChannel(pos,ByteBuffer.wrap(bytes));      pos+=len;      in.reset(bytes);      byte op=in.readByte();switch (op) {case 0:        replayAddDocument(c,primary,in);      break;case 1:    replayAddDocument(c,primary,in);  break;case 2:replayDeleteDocuments(c,primary,in);break;default :throw new CorruptIndexException("invalid operation " + op,in);}}assert pos == end;c.out.writeByte(SimplePrimaryNode.CMD_INDEXING_DONE);c.flush();c.in.readByte();} }  }
class C{  public DeadEvent(Object source,Object event){  this.source=checkNotNull(source);  this.event=checkNotNull(event);}  }
class C{  private Ref concatOp() throws PageException {  Ref ref=plusMinusOp();  while (cfml.isCurrent('&') && !cfml.isNext('&')) {    cfml.next();    ref=_concat(ref);  }  return ref;}  }
class C{  public final String processStringWithoutTrace(String in){  String out=in;  for (int i=0; i < replacements.length; ++i) {    out=out.replaceAll(replacements[i][0],replacements[i][1]);  }  return out;}  }
class C{  @Override public void visitEnd(){  if (!subroutineHeads.isEmpty()) {    markSubroutines();    if (LOGGING) {      log(mainSubroutine.toString());      Iterator<BitSet> it=subroutineHeads.values().iterator();      while (it.hasNext()) {        BitSet sub=it.next();        log(sub.toString());      }    }    emitCode();  }  if (mv != null) {    accept(mv);  }}  }
class C{  public static void testFrustumPlanePerspectiveRotateTranslate(){  Vector4f left=new Vector4f();  Vector4f right=new Vector4f();  Vector4f top=new Vector4f();  Vector4f bottom=new Vector4f();  Vector4f near=new Vector4f();  Vector4f far=new Vector4f();  Matrix4f m=new Matrix4f().perspective((float)Math.toRadians(90),1.0f,0.1f,100.0f).rotateY((float)Math.toRadians(90)).translate(0,-5,0);  m.frustumPlane(Matrix4f.PLANE_NX,left);  m.frustumPlane(Matrix4f.PLANE_PX,right);  m.frustumPlane(Matrix4f.PLANE_NY,bottom);  m.frustumPlane(Matrix4f.PLANE_PY,top);  m.frustumPlane(Matrix4f.PLANE_NZ,near);  m.frustumPlane(Matrix4f.PLANE_PZ,far);  Vector4f expectedLeft=new Vector4f(1,0,1,0).normalize3();  Vector4f expectedRight=new Vector4f(1,0,-1,0).normalize3();  Vector4f expectedTop=new Vector4f(1,-1,0,5).normalize3();  Vector4f expectedBottom=new Vector4f(1,1,0,-5).normalize3();  Vector4f expectedNear=new Vector4f(1,0,0,-0.1f).normalize3();  Vector4f expectedFar=new Vector4f(-1,0,0,100.0f).normalize3();  TestUtil.assertVector4fEquals(expectedLeft,left,1E-5f);  TestUtil.assertVector4fEquals(expectedRight,right,1E-5f);  TestUtil.assertVector4fEquals(expectedTop,top,1E-5f);  TestUtil.assertVector4fEquals(expectedBottom,bottom,1E-5f);  TestUtil.assertVector4fEquals(expectedNear,near,1E-5f);  TestUtil.assertVector4fEquals(expectedFar,far,1E-4f);}  }
class C{  public String testNextToken() throws IOException {  Token t=super.nextToken();  return Integer.toString(t.type) + ";" + t.content+ ";";}  }
class C{  public String hmset(final byte[] key,final Map<byte[],byte[]> hash){  checkIsInMulti();  client.hmset(key,hash);  return client.getStatusCodeReply();}  }
class C{  protected void buildJMSResources() throws Exception {  destroyJMSResources(true);  if (!connectionInitialised)   buildConnectionResources();  if (transacted) {    Log.logger.log(Level.FINE,"Using Transacted Mode");    context=masterContext.createContext(JMSContext.SESSION_TRANSACTED);  } else {    int ackMode=Config.parms.getInt("am");    Log.logger.log(Level.FINE,"Using Acknowledge Mode: {0}",ackMode);    context=masterContext.createContext(ackMode);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:33.389 -0500",hash_original_method="92EC2CE878476F294B46126B230CFAA0",hash_generated_method="C81ECE984E1B9187376FA6FCDCE9A2CB") public void removeUserInfo(){  this.userInfo=null;}  }
class C{  public Rankings copy(){  return new Rankings(this);}  }
class C{  public static void initialize(InputStream is) throws IOException {  logger.debug("ServerConfig initialize called");  if (is != null) {    props=new Properties();    props.load(is);  } else {    props=null;  }}  }
class C{  public static void liftingFromBottom(View view,float baseRotation,int duration,int startDelay){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,view.getHeight() / 3);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  public static NumberObjectDataSet serializableInstance(){  return new NumberObjectDataSet(0,new LinkedList<Node>());}  }
class C{  private boolean selectItem(int position){  disMissOrUpdatePopupWindow();  if (position >= 0 && mCacheDataList.size() > position) {    setText(mCacheDataList.get(position));    return true;  }  return false;}  }
class C{  public void markChanges(SerialReply l){  try {    int inputBits=(l.getElement(0) & 0xFF) + ((l.getElement(1) & 0xF) << 8);    for (int i=0; i <= lastUsedSensor; i++) {      if (sensorArray[i] == null) {        continue;      }      boolean value=((inputBits & 1) != 0);      inputBits=inputBits >> 1;      if (value) {        if (((sensorTempSetting[i] == Sensor.ACTIVE) || (sensorTempSetting[i] == Sensor.UNKNOWN)) && (sensorLastSetting[i] != Sensor.ACTIVE)) {          sensorLastSetting[i]=Sensor.ACTIVE;          sensorArray[i].setKnownState(Sensor.ACTIVE);        }        sensorTempSetting[i]=Sensor.ACTIVE;      } else {        if (((sensorTempSetting[i] == Sensor.INACTIVE) || (sensorTempSetting[i] == Sensor.UNKNOWN)) && (sensorLastSetting[i] != Sensor.INACTIVE)) {          sensorLastSetting[i]=Sensor.INACTIVE;          sensorArray[i].setKnownState(Sensor.INACTIVE);        }        sensorTempSetting[i]=Sensor.INACTIVE;      }    }  } catch (  JmriException e) {    log.error("exception in markChanges: " + e);  }}  }
class C{  public static char[] encode(byte[] in){  return encode(in,0,in.length);}  }
class C{  private CommandlineParser(){}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:57.987 -0500",hash_original_method="83871D5A105C781298F6AD1F6CCA2A68",hash_generated_method="C249710EF074815F212BBD44972F73A4") protected boolean scrollLineEnd(TextView widget,Spannable buffer){  final int maxScrollX=getScrollBoundsRight(widget) - getInnerWidth(widget);  int scrollX=widget.getScrollX();  if (scrollX < maxScrollX) {    widget.scrollTo(maxScrollX,widget.getScrollY());    return true;  }  return false;}  }
class C{  public static ArrayList<String> lineTokenizer(String line){  ArrayList<String> tokens=new ArrayList<String>();  StringTokenizer st=new StringTokenizer(line," \t\n\r\f,");  while (st.hasMoreTokens()) {    tokens.add(st.nextToken());  }  return tokens;}  }
class C{  private static double streamlineTrust(double priority){  if (priority < MIN_TRUST) {    return MIN_TRUST;  } else   if (priority > MAX_PRIORITY_VALUE) {    return MAX_PRIORITY_VALUE;  } else {    return priority;  }}  }
class C{  public static boolean isVarargs(int flags){  return (flags & AccVarargs) != 0;}  }
class C{  public IntIterator(int[] primitiveArray){  super(primitiveArray);}  }
class C{  public Socket onClose(final ISocketCloseCallback callback){  this.socketCloseCallbacks.add(callback);  return this;}  }
class C{  public Channel(){  mChannelID=UNIQUE_ID++;}  }
class C{  public IComment editLocalInstructionComment(final INaviInstruction instruction,final IComment oldComment,final String commentText) throws CouldntSaveDataException {  return CommentManager.get(m_provider).editLocalInstructionComment(m_codeNode,instruction,oldComment,commentText);}  }
class C{  public static Mapping<Long> longv(Constraint... constraints){  return new FieldMapping(InputMode.SINGLE,mkSimpleConverter(null),new MappingMeta("long",Long.class)).constraint(checking(null,"error.long",true)).constraint(constraints);}  }
class C{  public void storeState(){  System.arraycopy(currentMatricesIndices,0,storedMatricesIndices,0,nodeCount);  System.arraycopy(currentPartialsIndices,0,storedPartialsIndices,0,nodeCount);}  }
class C{  public QuadTreeCompositeFigure(){  figureHandler=createFigureHandler();}  }
class C{  public void seekStart(long pos) throws IOException {  if (_fileChannel == null) {    _fileChannel=_os.getChannel();  }  _fileChannel.position(pos);}  }
class C{  private Id<TransitStopFacility> createChildStopFacilityId(String stopIdStr,String refLinkId){  return Id.create(getParentId(stopIdStr) + SUFFIX + refLinkId,TransitStopFacility.class);}  }
class C{  public boolean tetradScore1(int v1,int v2,int v3,int v4){  if (oneFactorTest(v1,v2,v3,v4)) {    return false;  }  return twoFactorTest(v1,v2,v3,v4);}  }
class C{  protected boolean selectBracketBlock(){  if (matchBracketsAt()) {    if (startPos == endPos)     fText.setSelectedRange(startPos,0); else     fText.setSelectedRange(startPos + 1,endPos - startPos - 1);    return true;  }  return false;}  }
class C{  public void addMutedUsername(final String username,final Date muteTill){  if (isUsernameMuted(username)) {    removeMutedUsername(username);  }  Timestamp muteTillTs=null;  if (muteTill != null) {    muteTillTs=new Timestamp(muteTill.getTime());  }  s_logger.fine("Muting username:" + username);  final Connection con=Database.getConnection();  try {    final PreparedStatement ps=con.prepareStatement("insert into muted_usernames (username, mute_till) values (?, ?)");    ps.setString(1,username);    ps.setTimestamp(2,muteTillTs);    ps.execute();    ps.close();    con.commit();  } catch (  final SQLException sqle) {    if (sqle.getErrorCode() == 30000) {      s_logger.info("Tried to create duplicate muted username:" + username + " error:"+ sqle.getMessage());      return;    }    s_logger.log(Level.SEVERE,"Error inserting muted username:" + username,sqle);    throw new IllegalStateException(sqle.getMessage());  } finally {    DbUtil.closeConnection(con);  }}  }
class C{  private void add(String clsName,BinaryInternalMapper mapper,BinarySerializer serializer,String affKeyFieldName,boolean isEnum,boolean canOverride) throws BinaryObjectException {  TypeDescriptor desc=new TypeDescriptor(clsName,mapper,serializer,affKeyFieldName,isEnum,canOverride);  TypeDescriptor oldDesc=descs.get(clsName);  if (oldDesc == null)   descs.put(clsName,desc); else   oldDesc.override(desc);}  }
class C{  private ActionUtil(){}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == ParameterizedAccess.class) {switch (baseOperationID) {case N4JSPackage.PARAMETERIZED_ACCESS___IS_PARAMETERIZED:      return N4JSPackage.PARAMETERIZED_CALL_EXPRESSION___IS_PARAMETERIZED;default :    return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void addRequest(ActionRequest request,LimitedQueueInfo queueInfo){  String requestId=PennStation.requestAction(request,queueInfo);synchronized (this) {    mLastRequestIdByType.put(request.type(),requestId);    mRequestIds.add(requestId);  }}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == DeprecatableElement.class) {switch (baseFeatureID) {case SGenPackage.DEPRECATABLE_ELEMENT__DEPRECATED:      return SGenPackage.FEATURE_PARAMETER__DEPRECATED;case SGenPackage.DEPRECATABLE_ELEMENT__COMMENT:    return SGenPackage.FEATURE_PARAMETER__COMMENT;default :  return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public LatchCompletionSignal(final int signals){  this(new CountDownLatch(signals));}  }
class C{  public static void copy(File source,File target,FilenameFilter filter) throws IOException {  copy(source,target,filter,false,true);}  }
class C{  public void removeAllNullElements(){  for (int i=size() - 1; i >= 0; i--) {    if (get(i) == null) {      remove(i);    }  }}  }
class C{  public synchronized void updateTypeSubstitution(final INaviOperandTreeNode node,final int baseTypeId,final Integer[] memberPathIds,final int offset){  Preconditions.checkNotNull(node,"Error: node argument can not be null.");  Preconditions.checkNotNull(memberPathIds,"Error: member path ids can not be null.");  final BaseType baseType=typesContainer.getBaseTypeById(baseTypeId);  final TypeSubstitution typeSubstitution=node.getTypeSubstitution();  typesContainer.updateTypeSubstitution(typeSubstitution,baseType,idsToMembers(memberPathIds),offset);  notifySubstitutionChanged(typeSubstitution);}  }
class C{  protected Object readResolve() throws ObjectStreamException {  return map;}  }
class C{  public static BeanInstance findInstance(Point p,Integer... tab){  int index=0;  if (tab.length > 0) {    index=tab[0].intValue();  }  Vector<Object> components=null;  if (TABBED_COMPONENTS.size() > 0 && index < TABBED_COMPONENTS.size()) {    components=TABBED_COMPONENTS.get(index);  }  Rectangle tempBounds=new Rectangle();  for (int i=0; i < components.size(); i++) {    BeanInstance t=(BeanInstance)components.elementAt(i);    JComponent temp=(JComponent)t.getBean();    tempBounds=temp.getBounds(tempBounds);    if (tempBounds.contains(p)) {      return t;    }  }  return null;}  }
class C{  protected boolean isMultiReport(HttpServletRequest request,HttpServletResponse response,ActionForm form,ActionMapping mapping){  return true;}  }
class C{  public void update(Graphics g,JComponent c){  if (c.isOpaque())   CompiereUtils.fillRectange((Graphics2D)g,c,CompiereLookAndFeel.ROUND);  paint(g,c);}  }
class C{  public static void prune(DialogueState state){  try {    Set<String> nodesToKeep=getNodesToKeep(state);    if (!nodesToKeep.isEmpty()) {      DialogueState reduced=reduce(state,nodesToKeep);      reinsertActionAndUtilityNodes(reduced,state);      removePrimes(reduced);      removeSpuriousNodes(reduced);      state.reset(reduced);    } else {      state.reset(new BNetwork());    }  } catch (  RuntimeException e) {    log.warning("cannot prune state: " + e);  }}  }
class C{  private Element writeAttributeMetaData(String tag,Attribute attribute,int sourcecol,Document document,boolean sparse){  Element attributeElement=document.createElement(tag);  attributeElement.setAttribute("name",attribute.getName());  if (!sparse || tag.equals("attribute")) {    attributeElement.setAttribute("sourcecol",sourcecol + "");  }  attributeElement.setAttribute("valuetype",Ontology.ATTRIBUTE_VALUE_TYPE.mapIndex(attribute.getValueType()));  if (!Ontology.ATTRIBUTE_BLOCK_TYPE.isA(attribute.getBlockType(),Ontology.SINGLE_VALUE)) {    attributeElement.setAttribute("blocktype",Ontology.ATTRIBUTE_BLOCK_TYPE.mapIndex(attribute.getBlockType()));  }  if ((Ontology.ATTRIBUTE_VALUE_TYPE.isA(attribute.getValueType(),Ontology.NOMINAL)) && (!tag.equals(Attributes.KNOWN_ATTRIBUTE_TYPES[Attributes.TYPE_ID]))) {    for (    String nominalValue : attribute.getMapping().getValues()) {      Element valueElement=document.createElement("value");      valueElement.setTextContent(nominalValue);      attributeElement.appendChild(valueElement);    }  }  return attributeElement;}  }
class C{  public void removeAndNotifyKeys(Object keys[]){  final boolean isTraceEnabled=logger.isTraceEnabled();synchronized (allKeysMap) {    for (int i=0; i < keys.length; i++) {      LockObject lockValue=(LockObject)allKeysMap.remove(keys[i]);      if (lockValue != null) {synchronized (lockValue) {          lockValue.setRemoved();          if (isTraceEnabled) {            long waitTime=System.currentTimeMillis() - lockValue.lockedTimeStamp;            logger.trace("LockKeys: remove key {}, notifyAll for {}. It waited",keys[i],lockValue,waitTime);          }          if (lockValue.isSomeoneWaiting()) {            lockValue.notifyAll();          }        }      }    }  }}  }
class C{  private Object readLiteral() throws JSONException {  String literal=nextToInternal("{}[]/\\:,=;# \t\f");  if (literal.length() == 0) {    throw syntaxError("Expected literal value");  } else   if ("null".equalsIgnoreCase(literal)) {    return JSONObject.NULL;  } else   if ("true".equalsIgnoreCase(literal)) {    return Boolean.TRUE;  } else   if ("false".equalsIgnoreCase(literal)) {    return Boolean.FALSE;  }  if (literal.indexOf('.') == -1) {    int base=10;    String number=literal;    if (number.startsWith("0x") || number.startsWith("0X")) {      number=number.substring(2);      base=16;    } else     if (number.startsWith("0") && number.length() > 1) {      number=number.substring(1);      base=8;    }    try {      long longValue=Long.parseLong(number,base);      if (longValue <= Integer.MAX_VALUE && longValue >= Integer.MIN_VALUE) {        return (int)longValue;      } else {        return longValue;      }    } catch (    NumberFormatException e) {    }  }  try {    return Double.valueOf(literal);  } catch (  NumberFormatException ignored) {  }  return new String(literal);}  }
class C{  public ResultTableModel(RModel reportModel){  m_model=reportModel;}  }
class C{  private StateSet DFAEdge(StateSet start,int input){  tempStateSet.clear();  states.reset(start);  while (states.hasMoreElements())   tempStateSet.add(table[states.nextElement()][input]);  StateSet result=new StateSet(tempStateSet);  states.reset(tempStateSet);  while (states.hasMoreElements())   result.add(epsilon[states.nextElement()]);  return result;}  }
class C{  public ElasticInterpolator(EasingMode easingMode,double amplitude,double oscillations){  super(easingMode);  this.amplitude.set(amplitude);  this.oscillations.set(oscillations);}  }
class C{  protected void addDeviceGroupPathToMap(Map<String,Object> keyMap,CIMObjectPath deviceGroupPath,String resultKey) throws BaseCollectionException {  addPath(keyMap,resultKey,deviceGroupPath);  String fastPolicy=getFASTPolicyNameFromDeviceGroupID(deviceGroupPath);  keyMap.put(deviceGroupPath.getKey(Constants.INSTANCEID).getValue().toString(),(CIMObjectPath)keyMap.get(fastPolicy));}  }
class C{  public T caseObjectPropertyType(ObjectPropertyType object){  return null;}  }
class C{  public void clear(){  textArea.setText("");}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    camera.autoFocus(autoFocusCallback);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public DeviceIterator(Iterator<Device> subIterator,IEntityClass[] entityClasses,MacAddress macAddress,VlanVid vlan,IPv4Address ipv4Address,DatapathId switchDPID,OFPort switchPort){  super(subIterator);  this.entityClasses=entityClasses;  this.subIterator=subIterator;  this.macAddress=macAddress;  this.vlan=vlan;  this.ipv4Address=ipv4Address;  this.switchDPID=switchDPID;  this.switchPort=switchPort;}  }
class C{  private void publish(){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  String actionTaken=context.getString(R.string.toast_pub_success,(Object[])additionalArgs);  c.addAction(actionTaken);  Notify.toast(context,actionTaken,Toast.LENGTH_SHORT);  System.out.print("Published");}  }
class C{  public boolean isDelete(){  if (delete == null) {    return false;  } else {    return delete;  }}  }
class C{  protected void drawHullArc(String sname,double[] cent,Polygon chres){  if (chres.size() <= 1) {    return;  }  CSSClass cls=opacStyle == 1 ? new CSSClass(null,"temp") : null;  for (int i=1; i <= times; i++) {    SVGPath path=new SVGPath();    ArrayList<double[]> delta=new ArrayList<>(chres.size());    for (int p=0; p < chres.size(); p++) {      double[] prev=chres.get((p - 1 + chres.size()) % chres.size());      double[] curr=chres.get(p);      double[] next=chres.get((p + 1) % chres.size());      double[] d1=normalize(minus(next,curr));      double[] d2=normalize(minus(curr,prev));      delta.add(plus(d1,d2));    }    for (int p=0; p < chres.size(); p++) {      double[] cur=plus(cent,chres.get(p));      double[] nex=plus(cent,chres.get((p + 1) % chres.size()));      double[] dcur=delta.get(p);      double[] dnex=delta.get((p + 1) % chres.size());      drawArc(path,cent,cur,nex,dcur,dnex,i);    }    path.close();    Element ellipse=path.makeElement(svgp);    SVGUtil.addCSSClass(ellipse,sname);    if (cls != null) {      double s=(i >= 1 && i <= sigma.length) ? sigma[i - 1] : 0.0;      cls.setStatement(SVGConstants.CSS_FILL_OPACITY_PROPERTY,s);      SVGUtil.setAtt(ellipse,SVGConstants.SVG_STYLE_ATTRIBUTE,cls.inlineCSS());    }    layer.appendChild(ellipse);  }}  }
class C{  public dd addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @Override protected BufferedImage initializeOutput(final int imageWidth,final int imageHeight){  return new BufferedImage(imageWidth,imageHeight,BufferedImage.TYPE_INT_ARGB);}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  int cost=1;  for (int i=0; i < args.length; i++) {    if (args[i] != null) {      cost+=args[i].costInline(thresh,env,ctx);    }  }  return cost;}  }
class C{  public CSVParser(char separator,char quotechar,char escape,boolean strictQuotes,boolean ignoreLeadingWhiteSpace){  if (anyCharactersAreTheSame(separator,quotechar,escape)) {    throw new UnsupportedOperationException("The separator, quote, and escape characters must be different!");  }  if (separator == NULL_CHARACTER) {    throw new UnsupportedOperationException("The separator character must be defined!");  }  this.separator=separator;  this.quotechar=quotechar;  this.escape=escape;  this.strictQuotes=strictQuotes;  this.ignoreLeadingWhiteSpace=ignoreLeadingWhiteSpace;}  }
class C{  public int update(Connection conn,String sql,Object param) throws SQLException {  return this.update(conn,sql,new Object[]{param});}  }
class C{  public void forceRepaint(){  if (!updateTracker.hasChanged()) {    outOfDateTime=0;    return;  }  List dirtyAreas=updateTracker.getDirtyAreas();  updateTracker.clear();  if (dirtyAreas != null) {    updateRendering(dirtyAreas,false);  }  outOfDateTime=0;}  }
class C{  @Override public void restore(String database,boolean isSchema){  restore(database,isSchema,false);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.EXTENDED_STATE_MACHINE___ANONYMOUS_EXTENDED_STATE_MACHINE_11:    getAnonymous_extendedStateMachine_1_1().clear();  getAnonymous_extendedStateMachine_1_1().addAll((Collection<? extends Anonymous_extendedStateMachine_1_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public int adminAuthenticated(final RequestHeader requestHeader){  final String adminAccountUserName=getConfig(SwitchboardConstants.ADMIN_ACCOUNT_USER_NAME,"admin");  final String adminAccountBase64MD5=getConfig(SwitchboardConstants.ADMIN_ACCOUNT_B64MD5,"");  if (adminAccountBase64MD5.isEmpty()) {    adminAuthenticationLastAccess=System.currentTimeMillis();    return 2;  }  final boolean accessFromLocalhost=requestHeader.accessFromLocalhost();  if (accessFromLocalhost && getConfigBool(SwitchboardConstants.ADMIN_ACCOUNT_FOR_LOCALHOST,false)) {    adminAuthenticationLastAccess=System.currentTimeMillis();    return 3;  }  final String realmProp=(requestHeader.get(RequestHeader.AUTHORIZATION,"")).trim();  String realmValue=realmProp.isEmpty() ? null : realmProp.substring(6);  if (realmValue == null || realmValue.isEmpty()) {    return 1;  }  if (realmValue.length() > 256) {    return 0;  }  String pass=Base64Order.standardCoder.encodeString(adminAccountUserName + ":" + adminAccountBase64MD5);  if (accessFromLocalhost && (pass.equals(realmValue))) {    adminAuthenticationLastAccess=System.currentTimeMillis();    return 3;  }  if (this.userDB.hasAdminRight(realmValue,requestHeader.getHeaderCookies())) {    adminAuthenticationLastAccess=System.currentTimeMillis();    return 4;  }  if (adminAccountBase64MD5.startsWith("MD5:")) {    String realmtmp=Base64Order.standardCoder.decodeString(realmValue);    int i=realmtmp.indexOf(':');    if (i >= 3) {      realmtmp=realmtmp.substring(0,i + 1) + sb.getConfig(SwitchboardConstants.ADMIN_REALM,"YaCy") + ":"+ realmtmp.substring(i + 1);      if (adminAccountBase64MD5.substring(4).equals(Digest.encodeMD5Hex(realmtmp))) {        adminAuthenticationLastAccess=System.currentTimeMillis();        return 4;      }    } else {      if (adminAccountBase64MD5.equals(realmValue)) {        adminAuthenticationLastAccess=System.currentTimeMillis();        return 4;      }    }  } else {    if (adminAccountBase64MD5.equals(Digest.encodeMD5Hex(realmValue))) {      adminAuthenticationLastAccess=System.currentTimeMillis();      return 4;    }  }  return 1;}  }
class C{  @Override public short[][] action_table(){  return _action_table;}  }
class C{  @Override public void requery(Activity context,QueryParameter parameters,String why){  this.mGalleryContentQuery=parameters;  requery(why);}  }
class C{  @Override public void readFields(DataInput in) throws IOException {  type=mapping[in.readByte()];  nodeid=in.readInt();  if (type.equals(Type.Distance)) {    distance=in.readInt();    return;  }  if (type.equals(Type.Complete)) {    distance=in.readInt();  }  adjacenyList=new ArrayListOfIntsWritable();  adjacenyList.readFields(in);}  }
class C{  public Iterator<String> keys(){  return this.keySet().iterator();}  }
class C{  private static MappingObject ObjectAt(PCalLocation loc,MappingObject[][] map){  return map[loc.getLine()][loc.getColumn()];}  }
class C{  public String toString(){  return detail.toString();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node refChild;  DocumentFragment newdocFragment;  Node newChild1;  Node newChild2;  Node child;  String childName;  Node appendedChild;  Node insertedNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  refChild=childList.item(3);  newdocFragment=doc.createDocumentFragment();  newChild1=doc.createElement("newChild1");  newChild2=doc.createElement("newChild2");  appendedChild=newdocFragment.appendChild(newChild1);  appendedChild=newdocFragment.appendChild(newChild2);  insertedNode=employeeNode.insertBefore(newdocFragment,refChild);  child=childList.item(3);  childName=child.getNodeName();  assertEquals("childName3","newChild1",childName);  child=childList.item(4);  childName=child.getNodeName();  assertEquals("childName4","newChild2",childName);}  }
class C{  private Utils(){  throw new AssertionError();}  }
class C{  public String address(){  return addr;}  }
class C{  private static void initializeDrawee(Context context,@Nullable DraweeConfig draweeConfig){  sDraweeControllerBuilderSupplier=new PipelineDraweeControllerBuilderSupplier(context,draweeConfig);  SimpleDraweeView.initialize(sDraweeControllerBuilderSupplier);}  }
class C{  public static void copyCurrentLoadToHDFS(CarbonLoadModel loadModel,String segmentName,List<String> updatedSlices) throws IOException, CarbonUtilException {  boolean copyStore=Boolean.valueOf(CarbonProperties.getInstance().getProperty("dataload.hdfs.copy","true"));  String databaseName=loadModel.getDatabaseName();  String tableName=loadModel.getTableName();  String aggTableName=loadModel.getAggTableName();  if (copyStore) {    CarbonTableIdentifier carbonTableIdentifier=loadModel.getCarbonDataLoadSchema().getCarbonTable().getCarbonTableIdentifier();    String segmentId=segmentName.substring(CarbonCommonConstants.LOAD_FOLDER.length());    String carbonStoreLocation=getStoreLocation(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.STORE_LOCATION_HDFS),carbonTableIdentifier,segmentId,loadModel.getPartitionId());    String tempLocationKey=databaseName + '_' + tableName;    String localStoreLocation=getStoreLocation(CarbonProperties.getInstance().getProperty(tempLocationKey,CarbonCommonConstants.STORE_LOCATION_DEFAULT_VAL),carbonTableIdentifier,segmentId,loadModel.getPartitionId());    localStoreLocation=localStoreLocation + File.separator + loadModel.getTaskNo();    boolean isUpdate=false;    if (loadModel.isAggLoadRequest() && null != aggTableName) {      if (updatedSlices.contains(segmentId)) {        isUpdate=true;      }    }    copyToHDFS(carbonStoreLocation,localStoreLocation,isUpdate);    CarbonUtil.deleteFoldersAndFiles(new File[]{new File(localStoreLocation)});  }}  }
class C{  public MobilityTrace(String filename) throws FileNotFoundException {  this.locations=parseLocationsFile(filename);}  }
class C{  private static final String export(Convex c,String tabs){  StringBuilder sb=new StringBuilder();  if (c instanceof Circle) {    Circle circle=(Circle)c;    sb.append(tabs).append("Convex c = Geometry.createCircle(").append(circle.getRadius()).append(");").append(NEW_LINE);    if (!circle.getCenter().isZero()) {      sb.append(tabs).append("c.translate(").append(export(circle.getCenter())).append(");").append(NEW_LINE);    }  } else   if (c instanceof Rectangle) {    Rectangle rectangle=(Rectangle)c;    sb.append(tabs).append("Convex c = Geometry.createRectangle(").append(rectangle.getWidth()).append(", ").append(rectangle.getHeight()).append(");").append(NEW_LINE);    if (Math.abs(rectangle.getRotation()) > Epsilon.E) {      sb.append(tabs).append("c.rotate(Math.toRadians(").append(Math.toDegrees(rectangle.getRotation())).append("));").append(NEW_LINE);    }    if (!rectangle.getCenter().isZero()) {      sb.append(tabs).append("c.translate(").append(export(rectangle.getCenter())).append(");").append(NEW_LINE);    }  } else   if (c instanceof Triangle) {    Triangle triangle=(Triangle)c;    sb.append(tabs).append("Convex c = Geometry.createTriangle(").append(export(triangle.getVertices()[0])).append(", ").append(export(triangle.getVertices()[1])).append(", ").append(export(triangle.getVertices()[2])).append(");").append(NEW_LINE);  } else   if (c instanceof Polygon) {    Polygon polygon=(Polygon)c;    sb.append(tabs).append("Convex c = Geometry.createPolygon(");    int vSize=polygon.getVertices().length;    for (int i=0; i < vSize; i++) {      Vector2 v=polygon.getVertices()[i];      if (i != 0)       sb.append(", ");      sb.append(export(v));    }    sb.append(");").append(NEW_LINE);  } else   if (c instanceof Segment) {    Segment segment=(Segment)c;    sb.append(tabs).append("Convex c = Geometry.createSegment(").append(export(segment.getVertices()[0])).append(", ").append(export(segment.getVertices()[1])).append(");").append(NEW_LINE);  } else {    throw new UnsupportedOperationException(MessageFormat.format(Messages.getString("exception.persist.unknownClass"),c.getClass().getName()));  }  return sb.toString();}  }
class C{  public boolean acquireWriteLock(long msecTimeout){  return true;}  }
class C{  private void attachToRoot(){  WaitForAsyncUtils.waitForAsyncFx(5000,null);  WaitForAsyncUtils.waitForFxEvents();}  }
class C{  public static DefaultListModel createObjectsModel(DefaultListModel hashtablesModel,Class fbObjectClass) throws IllegalAccessException, InstantiationException {  DefaultListModel model=new DefaultListModel();  for (int i=0; i < hashtablesModel.getSize(); i++) {    Hashtable table=(Hashtable)hashtablesModel.getItemAt(i);    FBObject obj=(FBObject)fbObjectClass.newInstance();    obj.copy(table);    model.addItem(obj);  }  return model;}  }
class C{  void connected(MqttClient client) throws MqttException {  logger.info("{} subscribe({}, {})",id(),topicFilter,qos);  client.subscribe(topicFilter,qos);}  }
class C{  public Iterator tuples(){  return m_tuples.iterator(rows());}  }
class C{  public double optDouble(int index){  return this.optDouble(index,Double.NaN);}  }
class C{  public Matrix V(){  return V.clone();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:01.282 -0500",hash_original_method="3CAF328B13970C51C4DF071BCDFD21EA",hash_generated_method="3CAF328B13970C51C4DF071BCDFD21EA") Matcher(Pattern pattern,CharSequence input){  usePattern(pattern);  reset(input);}  }
class C{  public HasParentQueryBuilder innerHit(QueryInnerHitBuilder innerHit){  this.innerHit=innerHit;  return this;}  }
class C{  public WaterBody(){  super();}  }
class C{  public void add(CoreCmd ccmd) throws GondolaException {  if (cmember.masterId >= 0) {    throw new GondolaException(GondolaException.Code.SLAVE_MODE,cmember.memberId);  }  commandQueue.add(ccmd);}  }
class C{  public GameEventEntryIterator(final Statement statement,final ResultSet resultSet){  super(statement,resultSet);}  }
class C{  public static byte[] readUploadData(final UploadStorageType storageType,final byte[] body,final RandomAccessFile uploadFile,final int uploadTempFileSize,final int chunkSize) throws IOException {  byte[] data;  if (storageType == UploadStorageType.RAM_STORAGE) {    data=Arrays.copyOfRange(body,uploadTempFileSize,uploadTempFileSize + chunkSize);  } else {    data=new byte[chunkSize];    uploadFile.seek(uploadTempFileSize);    uploadFile.read(data);  }  return data;}  }
class C{  public Map<AbstractProperty,PropertyValidation> validate(){  Map<AbstractProperty,PropertyValidation> validationMap=new HashMap<>();  for (  AbstractProperty property : getAllProperties()) {    PropertyValidation propertyValidation=property.validate();    if (propertyValidation.hasErrors()) {      validationMap.put(property,propertyValidation);    }  }  return validationMap;}  }
class C{  public DriveCollectionRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public void removeSwipeOpenListener(ActionListener l){  dispatcher.removeListener(l);}  }
class C{  public static void main(String[] args) throws Exception {  new KeywhizService().run(args);}  }
class C{  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {  SCHEMES.get(oprot.getScheme()).getScheme().write(oprot,this);}  }
class C{  public final void copySubMatrix(int rowSource,int colSource,int numRow,int numCol,int rowDest,int colDest,GMatrix target){  int i, j;  if (this != target) {    for (i=0; i < numRow; i++) {      for (j=0; j < numCol; j++) {        target.values[rowDest + i][colDest + j]=values[rowSource + i][colSource + j];      }    }  } else {    double[][] tmp=new double[numRow][numCol];    for (i=0; i < numRow; i++) {      for (j=0; j < numCol; j++) {        tmp[i][j]=values[rowSource + i][colSource + j];      }    }    for (i=0; i < numRow; i++) {      for (j=0; j < numCol; j++) {        target.values[rowDest + i][colDest + j]=tmp[i][j];      }    }  }}  }
class C{  public static boolean isSameLength(boolean[] array1,boolean[] array2){  if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {    return false;  }  return true;}  }
class C{  public ElasticsearchClient(final String[] addresses,final String clusterName){  Settings.Builder settings=Settings.builder().put("cluster.name",clusterName).put("cluster.routing.allocation.enable","all").put("cluster.routing.allocation.allow_rebalance","true");  TransportClient tc=TransportClient.builder().settings(settings.build()).build();  for (  String address : addresses) {    String a=address.trim();    int p=a.indexOf(':');    if (p >= 0)     try {      InetAddress i=InetAddress.getByName(a.substring(0,p));      int port=Integer.parseInt(a.substring(p + 1));      tc.addTransportAddress(new InetSocketTransportAddress(i,port));    } catch (    UnknownHostException e) {      Log.getLog().warn(e);    }  }  this.elasticsearchClient=tc;}  }
class C{  public void read(Reader in,Object desc) throws IOException {  EditorKit kit=getUI().getEditorKit(this);  Document doc=kit.createDefaultDocument();  if (desc != null) {    doc.putProperty(Document.StreamDescriptionProperty,desc);  }  try {    kit.read(in,doc,0);    setDocument(doc);  } catch (  BadLocationException e) {    throw new IOException(e.getMessage());  }}  }
class C{  public boolean addPackage(String x_app_id,String content_type,String package_name,String class_name,int app_type,boolean need_signature,boolean further_processing){  WapPushManDBHelper dbh=getDatabase(mContext);  SQLiteDatabase db=dbh.getWritableDatabase();  WapPushManDBHelper.queryData lastapp=dbh.queryLastApp(db,x_app_id,content_type);  boolean ret=false;  boolean insert=false;  int sq=0;  if (!appTypeCheck(app_type)) {    Log.w(LOG_TAG,"invalid app_type " + app_type + ". app_type must be "+ WapPushManagerParams.APP_TYPE_ACTIVITY+ " or "+ WapPushManagerParams.APP_TYPE_SERVICE);    return false;  }  if (lastapp == null) {    insert=true;    sq=0;  } else   if (!lastapp.packageName.equals(package_name) || !lastapp.className.equals(class_name)) {    insert=true;    sq=lastapp.installOrder + 1;  }  if (insert) {    ContentValues values=new ContentValues();    values.put("x_wap_application",x_app_id);    values.put("content_type",content_type);    values.put("package_name",package_name);    values.put("class_name",class_name);    values.put("app_type",app_type);    values.put("need_signature",need_signature ? 1 : 0);    values.put("further_processing",further_processing ? 1 : 0);    values.put("install_order",sq);    db.insert(APPID_TABLE_NAME,null,values);    if (LOCAL_LOGV)     Log.v(LOG_TAG,"add:" + x_app_id + ":"+ content_type+ " "+ package_name+ "."+ class_name+ ", newsq:"+ sq);    ret=true;  }  db.close();  return ret;}  }
class C{  @HLEFunction(nid=0x99560ABE,version=150) public int sceNetAdhocctlGetAddrByName(@StringInfo(maxLength=NICK_NAME_LENGTH) PspString nickName,TPointer32 sizeAddr,@CanBeNull TPointer buf){  checkInitialized();  LinkedList<AdhocctlPeer> matchingPeers=new LinkedList<sceNetAdhocctl.AdhocctlPeer>();  for (  AdhocctlPeer peer : peers) {    if (nickName.equals(peer.nickName)) {      matchingPeers.add(peer);    }  }  int size=sizeAddr.getValue();  SceNetAdhocctlPeerInfo peerInfo=new SceNetAdhocctlPeerInfo();  sizeAddr.setValue(peerInfo.sizeof() * matchingPeers.size());  if (log.isDebugEnabled()) {    log.debug(String.format("sceNetAdhocctlGetAddrByName returning size=%d",sizeAddr.getValue()));  }  if (buf.isNotNull()) {    int offset=0;    for (    AdhocctlPeer peer : matchingPeers) {      if (offset + peerInfo.sizeof() > size) {        break;      }      if (log.isDebugEnabled()) {        log.debug(String.format("sceNetAdhocctlGetAddrByName returning %s at 0x%08X",peer,buf.getAddress() + offset));      }      peerInfo.nickName=peer.nickName;      peerInfo.macAddress=new pspNetMacAddress();      peerInfo.macAddress.setMacAddress(peer.macAddress);      peerInfo.timestamp=peer.timestamp;      peerInfo.write(buf,offset);      offset+=peerInfo.sizeof();    }    fillNextPointersInLinkedList(buf,offset,peerInfo.sizeof());  }  return 0;}  }
class C{  void printModifiers(int modifiers){  if (Modifier.isPublic(modifiers)) {    this.buffer.append("public ");  }  if (Modifier.isProtected(modifiers)) {    this.buffer.append("protected ");  }  if (Modifier.isPrivate(modifiers)) {    this.buffer.append("private ");  }  if (Modifier.isStatic(modifiers)) {    this.buffer.append("static ");  }  if (Modifier.isAbstract(modifiers)) {    this.buffer.append("abstract ");  }  if (Modifier.isFinal(modifiers)) {    this.buffer.append("final ");  }  if (Modifier.isSynchronized(modifiers)) {    this.buffer.append("synchronized ");  }  if (Modifier.isVolatile(modifiers)) {    this.buffer.append("volatile ");  }  if (Modifier.isNative(modifiers)) {    this.buffer.append("native ");  }  if (Modifier.isStrictfp(modifiers)) {    this.buffer.append("strictfp ");  }  if (Modifier.isTransient(modifiers)) {    this.buffer.append("transient ");  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.ADDITIVE_EXPRESSION__LHS:    return lhs != null;case N4JSPackage.ADDITIVE_EXPRESSION__OP:  return op != OP_EDEFAULT;case N4JSPackage.ADDITIVE_EXPRESSION__RHS:return rhs != null;}return super.eIsSet(featureID);}  }
class C{  public void reshape(int x,int y,int width,int height){  super.reshape(x,y,width,height);  validate();  repaint();}  }
class C{  public int length(){  return this.myArrayList.size();}  }
class C{  public static void append(Path self,Object text,boolean writeBom) throws IOException {  append(self,text,Charset.defaultCharset().name(),writeBom);}  }
class C{  public void updateRowId(String columnName,RowId x) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  public static String parseExpressionContent(String expression){  Matcher matcher=EXP_PATTERN.matcher(expression);  if (matcher.find()) {    expression=matcher.group(1);  }  return expression;}  }
class C{  public boolean verifySignature(byte[] message,BigInteger r,BigInteger s){  byte[] mRev=new byte[message.length];  for (int i=0; i != mRev.length; i++) {    mRev[i]=message[mRev.length - 1 - i];  }  BigInteger e=new BigInteger(1,mRev);  BigInteger n=key.getParameters().getN();  if (r.compareTo(ECConstants.ONE) < 0 || r.compareTo(n) >= 0) {    return false;  }  if (s.compareTo(ECConstants.ONE) < 0 || s.compareTo(n) >= 0) {    return false;  }  BigInteger v=e.modInverse(n);  BigInteger z1=s.multiply(v).mod(n);  BigInteger z2=(n.subtract(r)).multiply(v).mod(n);  ECPoint G=key.getParameters().getG();  ECPoint Q=((ECPublicKeyParameters)key).getQ();  ECPoint point=ECAlgorithms.sumOfTwoMultiplies(G,z1,Q,z2).normalize();  if (point.isInfinity()) {    return false;  }  BigInteger R=point.getAffineXCoord().toBigInteger().mod(n);  return R.equals(r);}  }
class C{  private void updateWeightsDiscreteClass(int instNum){  int i, j, k;  int cl;  double temp_diff, w_norm=1.0;  double[] tempDistClass;  int[] tempSortedClass=null;  double distNormClass=1.0;  double[] tempDistAtt;  int[][] tempSortedAtt=null;  double[] distNormAtt=null;  int firstI, secondI;  Instance inst=m_trainInstances.instance(instNum);  cl=(int)m_trainInstances.instance(instNum).value(m_classIndex);  if (m_weightByDistance) {    tempDistClass=new double[m_stored[cl]];    for (j=0, distNormClass=0; j < m_stored[cl]; j++) {      tempDistClass[j]=m_karray[cl][j][0];      distNormClass+=m_weightsByRank[j];    }    tempSortedClass=Utils.sort(tempDistClass);    tempSortedAtt=new int[m_numClasses][1];    distNormAtt=new double[m_numClasses];    for (k=0; k < m_numClasses; k++) {      if (k != cl) {        tempDistAtt=new double[m_stored[k]];        for (j=0, distNormAtt[k]=0; j < m_stored[k]; j++) {          tempDistAtt[j]=m_karray[k][j][0];          distNormAtt[k]+=m_weightsByRank[j];        }        tempSortedAtt[k]=Utils.sort(tempDistAtt);      }    }  }  if (m_numClasses > 2) {    w_norm=(1.0 - m_classProbs[cl]);  }  for (j=0, temp_diff=0.0; j < m_stored[cl]; j++) {    Instance cmp;    cmp=(m_weightByDistance) ? m_trainInstances.instance((int)m_karray[cl][tempSortedClass[j]][1]) : m_trainInstances.instance((int)m_karray[cl][j][1]);    for (int p1=0, p2=0; p1 < inst.numValues() || p2 < cmp.numValues(); ) {      if (p1 >= inst.numValues()) {        firstI=m_trainInstances.numAttributes();      } else {        firstI=inst.index(p1);      }      if (p2 >= cmp.numValues()) {        secondI=m_trainInstances.numAttributes();      } else {        secondI=cmp.index(p2);      }      if (firstI == m_trainInstances.classIndex()) {        p1++;        continue;      }      if (secondI == m_trainInstances.classIndex()) {        p2++;        continue;      }      if (firstI == secondI) {        i=firstI;        temp_diff=difference(i,inst.valueSparse(p1),cmp.valueSparse(p2));        p1++;        p2++;      } else       if (firstI > secondI) {        i=secondI;        temp_diff=difference(i,0,cmp.valueSparse(p2));        p2++;      } else {        i=firstI;        temp_diff=difference(i,inst.valueSparse(p1),0);        p1++;      }      if (m_weightByDistance) {        temp_diff*=(m_weightsByRank[j] / distNormClass);      } else {        if (m_stored[cl] > 0) {          temp_diff/=m_stored[cl];        }      }      m_weights[i]-=temp_diff;    }  }  temp_diff=0.0;  for (k=0; k < m_numClasses; k++) {    if (k != cl) {      for (j=0; j < m_stored[k]; j++) {        Instance cmp;        cmp=(m_weightByDistance) ? m_trainInstances.instance((int)m_karray[k][tempSortedAtt[k][j]][1]) : m_trainInstances.instance((int)m_karray[k][j][1]);        for (int p1=0, p2=0; p1 < inst.numValues() || p2 < cmp.numValues(); ) {          if (p1 >= inst.numValues()) {            firstI=m_trainInstances.numAttributes();          } else {            firstI=inst.index(p1);          }          if (p2 >= cmp.numValues()) {            secondI=m_trainInstances.numAttributes();          } else {            secondI=cmp.index(p2);          }          if (firstI == m_trainInstances.classIndex()) {            p1++;            continue;          }          if (secondI == m_trainInstances.classIndex()) {            p2++;            continue;          }          if (firstI == secondI) {            i=firstI;            temp_diff=difference(i,inst.valueSparse(p1),cmp.valueSparse(p2));            p1++;            p2++;          } else           if (firstI > secondI) {            i=secondI;            temp_diff=difference(i,0,cmp.valueSparse(p2));            p2++;          } else {            i=firstI;            temp_diff=difference(i,inst.valueSparse(p1),0);            p1++;          }          if (m_weightByDistance) {            temp_diff*=(m_weightsByRank[j] / distNormAtt[k]);          } else {            if (m_stored[k] > 0) {              temp_diff/=m_stored[k];            }          }          if (m_numClasses > 2) {            m_weights[i]+=((m_classProbs[k] / w_norm) * temp_diff);          } else {            m_weights[i]+=temp_diff;          }        }      }    }  }}  }
class C{  public void addSuffix(String s){  if (!suffix.contains(s)) {    suffix.addElement(s);    update();  }}  }
class C{  private void loadChatsFragment(){  Bundle args=new Bundle();  args.putBoolean(AppConstants.Keys.FROM_NOTIFICATIONS,true);  loadFragment(R.id.frame_content,(AbstractYeloFragment)Fragment.instantiate(this,ChatsFragment.class.getName(),getIntent().getExtras()),AppConstants.FragmentTags.CHATS,false,null);}  }
class C{  private CnATreeElement findDbElement(String sourceId,String externalId,boolean fetchLinksDown,boolean fetchLinksUp){  CnATreeElement result=null;  LoadCnAElementByExternalID command=new LoadCnAElementByExternalID(sourceId,externalId,fetchLinksDown,fetchLinksUp);  command.setParent(true);  try {    command=getCommandService().executeCommand(command);  } catch (  CommandException e) {    final String message="Error while loading element by source and externeal id";    log.error(message,e);    throw new RuntimeCommandException(message,e);  }  List<CnATreeElement> foundElements=command.getElements();  if (foundElements != null) {    if (foundElements.size() == 1) {      result=foundElements.get(0);    }    if (foundElements.size() > 1) {      final String message="Found more than one element with source-id: " + sourceId + " and externeal-id: "+ externalId;      log.error(message);      throw new RuntimeCommandException(message);    }  }  return result;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:07.518 -0500",hash_original_method="6641F70E0E9C6153122A4B9C58397241",hash_generated_method="AC3C770EA337D5D3EEA5382F4D68ABF2") public char previous(){  if (offset == start) {    return DONE;  }  return string.charAt(--offset);}  }
class C{  public static boolean deviceHasAnyAbility(@NonNull Intent intent){  return BaseProjectApplication.getContext().getPackageManager().queryIntentActivities(intent,0).size() > 0;}  }
class C{  public void rename(SchemaObject obj,String newName){  int type=obj.getType();  Map<String,SchemaObject> map=getMap(type);  if (SysProperties.CHECK) {    if (!map.containsKey(obj.getName())) {      DbException.throwInternalError("not found: " + obj.getName());    }    if (obj.getName().equals(newName) || map.containsKey(newName)) {      DbException.throwInternalError("object already exists: " + newName);    }  }  obj.checkRename();  map.remove(obj.getName());  freeUniqueName(obj.getName());  obj.rename(newName);  map.put(newName,obj);  freeUniqueName(newName);}  }
class C{  private void checkContainerStatus(){  Collection<StreamingContainerAgent> containers=this.dnmgr.getContainerAgents();  for (  StreamingContainerAgent ca : containers) {    ContainerId containerId=ConverterUtils.toContainerId(ca.container.getExternalId());    NodeId nodeId=ConverterUtils.toNodeId(ca.container.host);    org.apache.hadoop.yarn.api.records.Token containerToken=null;    Resource resource=Resource.newInstance(ca.container.getAllocatedMemoryMB(),ca.container.getAllocatedVCores());    Priority priority=Priority.newInstance(ca.container.getResourceRequestPriority());    Container yarnContainer=Container.newInstance(containerId,nodeId,ca.container.nodeHttpAddress,resource,priority,containerToken);    this.allocatedContainers.put(containerId.toString(),new AllocatedContainer(yarnContainer));    nmClient.getContainerStatusAsync(containerId,nodeId);  }}  }
class C{  private void statInit(){  lDocumentNo.setLabelFor(fDocumentNo);  fDocumentNo.setBackground(AdempierePLAF.getInfoBackground());  fDocumentNo.addActionListener(this);  lDescription.setLabelFor(fDescription);  fDescription.setBackground(AdempierePLAF.getInfoBackground());  fDescription.addActionListener(this);  fIsPaid.setSelected(false);  fIsPaid.addActionListener(this);  fIsSOTrx.setSelected(!"N".equals(Env.getContext(Env.getCtx(),p_WindowNo,"IsSOTrx")));  fIsSOTrx.addActionListener(this);  fBPartner_ID=new VLookup("C_BPartner_ID",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MInvoice.Table_Name,MInvoice.COLUMNNAME_C_BPartner_ID),DisplayType.Search));  lBPartner_ID.setLabelFor(fBPartner_ID);  fBPartner_ID.setBackground(AdempierePLAF.getInfoBackground());  fBPartner_ID.addActionListener(this);  fOrder_ID=new VLookup("C_Order_ID",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MInvoice.Table_Name,MInvoice.COLUMNNAME_C_Order_ID),DisplayType.Search));  lOrder_ID.setLabelFor(fOrder_ID);  fOrder_ID.setBackground(AdempierePLAF.getInfoBackground());  fOrder_ID.addActionListener(this);  lDateFrom.setLabelFor(fDateFrom);  fDateFrom.setBackground(AdempierePLAF.getInfoBackground());  fDateFrom.setToolTipText(Msg.translate(Env.getCtx(),"DateFrom"));  lDateTo.setLabelFor(fDateTo);  fDateTo.setBackground(AdempierePLAF.getInfoBackground());  fDateTo.setToolTipText(Msg.translate(Env.getCtx(),"DateTo"));  lAmtFrom.setLabelFor(fAmtFrom);  fAmtFrom.setBackground(AdempierePLAF.getInfoBackground());  fAmtFrom.setToolTipText(Msg.translate(Env.getCtx(),"AmtFrom"));  lAmtTo.setLabelFor(fAmtTo);  fAmtTo.setBackground(AdempierePLAF.getInfoBackground());  fAmtTo.setToolTipText(Msg.translate(Env.getCtx(),"AmtTo"));  CPanel amtPanel=new CPanel();  CPanel datePanel=new CPanel();  amtPanel.setLayout(new ALayout(0,0,true));  amtPanel.add(fAmtFrom,new ALayoutConstraint(0,0));  amtPanel.add(lAmtTo,null);  amtPanel.add(fAmtTo,null);  datePanel.setLayout(new ALayout(0,0,true));  datePanel.add(fDateFrom,new ALayoutConstraint(0,0));  datePanel.add(lDateTo,null);  datePanel.add(fDateTo,null);  p_criteriaGrid.add(lDocumentNo,new ALayoutConstraint(0,0));  p_criteriaGrid.add(fDocumentNo,null);  p_criteriaGrid.add(lBPartner_ID,null);  p_criteriaGrid.add(fBPartner_ID,null);  p_criteriaGrid.add(fIsSOTrx,new ALayoutConstraint(0,5));  p_criteriaGrid.add(lDescription,new ALayoutConstraint(1,0));  p_criteriaGrid.add(fDescription,null);  p_criteriaGrid.add(lDateFrom,null);  p_criteriaGrid.add(datePanel,null);  p_criteriaGrid.add(fIsPaid,new ALayoutConstraint(1,5));  p_criteriaGrid.add(lOrder_ID,new ALayoutConstraint(2,0));  p_criteriaGrid.add(fOrder_ID,null);  p_criteriaGrid.add(lAmtFrom,null);  p_criteriaGrid.add(amtPanel,null);  m_sqlSchedule=scheduleTbl.prepareTable(s_subLayout,s_subFrom,s_subWhere,false,"i");  scheduleTbl.setRowSelectionAllowed(true);  scheduleTbl.setMultiSelection(false);  scheduleTbl.addMouseListener(this);  scheduleTbl.setShowTotals(true);  scheduleTbl.autoSize();  tablePanel.setPreferredSize(new Dimension(INFO_WIDTH,SCREEN_HEIGHT > 600 ? 255 : 110));  tablePanel.setLayout(new BorderLayout());  tablePanel.add(new JScrollPane(scheduleTbl),BorderLayout.CENTER);  p_detailTaskPane.setTitle(Msg.translate(Env.getCtx(),"C_InvoicePaySchedule_ID"));  p_detailTaskPane.add(tablePanel,BorderLayout.CENTER);  p_detailTaskPane.setVisible(true);}  }
class C{  public boolean canGoBack(){  return pager.getCurrentItem() > 0;}  }
class C{  @DSComment("movement of Intent is spec") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.786 -0500",hash_original_method="77921182B442B1D522A9772E07DC4CA3",hash_generated_method="0D6591890E76CE60B3E65B000F6BC744") public final int countActions(){  return 1;}  }
class C{  private void ib0(int a,int b,int c,int d){  int t1=~a;  int t2=a ^ b;  int t4=d ^ (t1 | t2);  int t5=c ^ t4;  X2=t2 ^ t5;  int t8=t1 ^ (d & t2);  X1=t4 ^ (X2 & t8);  X3=(a & t4) ^ (t5 | X1);  X0=X3 ^ (t5 ^ t8);}  }
class C{  private void moveCameraOverTrack(){  if (googleMap == null || currentTrack == null || currentTrack.getNumberOfPoints() < 2 || mapView == null || mapView.getWidth() == 0 || mapView.getHeight() == 0) {    return;  }  TripStatistics tripStatistics=currentTrack.getTripStatistics();  int latitudeSpanE6=tripStatistics.getTop() - tripStatistics.getBottom();  int longitudeSpanE6=tripStatistics.getRight() - tripStatistics.getLeft();  if (latitudeSpanE6 > 0 && latitudeSpanE6 < 180E6 && longitudeSpanE6 > 0 && longitudeSpanE6 < 360E6) {    LatLng southWest=new LatLng(tripStatistics.getBottomDegrees(),tripStatistics.getLeftDegrees());    LatLng northEast=new LatLng(tripStatistics.getTopDegrees(),tripStatistics.getRightDegrees());    LatLngBounds bounds=LatLngBounds.builder().include(southWest).include(northEast).build();    CameraUpdate cameraUpdate=CameraUpdateFactory.newLatLngBounds(bounds,mapView.getWidth(),mapView.getHeight(),MAP_VIEW_PADDING);    googleMap.moveCamera(cameraUpdate);  }}  }
class C{  public static void addVillagerTrade(String blueprintCategory,ItemStack villagerPrice){  villagerPrices.put(blueprintCategory,villagerPrice);}  }
class C{  public static int[] findBitErrors(BitSet msg){  int[] retVal=null;  int checksum=getChecksum(msg);  checksum^=1;  for (int i=msg.nextSetBit(0); i >= 0 && i < 48; i=msg.nextSetBit(i + 1)) {    checksum^=sCHECKSUMS[i];  }  if (checksum == 0) {    retVal=new int[1];    retVal[0]=63;  } else {    for (int x=0; x < 63; x++) {      if (checksum == sCHECKSUMS[x]) {        retVal=new int[1];        retVal[0]=x;      }    }  }  return retVal;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:23.565 -0400",hash_original_method="FE50170C6E9B5F6E23D039E9F1C0F9A6",hash_generated_method="E5F2AB62762346A4AF55168101F6229C") public boolean containsKey(Object key){  return key == null ? (indexOfNull() >= 0) : (indexOf(key,key.hashCode()) >= 0);}  }
class C{  public void writeParameterRef(String wrapperName,String id,XMLWriter writer){  writer.writeOpenTag(wrapperName);  writer.writeIDref(ParameterParser.PARAMETER,id);  writer.writeCloseTag(wrapperName);}  }
class C{  public static NodeMetadataLeftIndexedMultiSegmentBipartiteGraph buildSmallTestNodeMetadataLeftIndexedMultiSegmentBipartiteGraph(){  NodeMetadataLeftIndexedMultiSegmentBipartiteGraph nodeMetadataGraph=new NodeMetadataLeftIndexedPowerLawMultiSegmentBipartiteGraph(3,10,10,10,2.0,100,2,new IdentityEdgeTypeMask(),new NullStatsReceiver());  int[][] leftNodeMetadata=new int[][]{};  nodeMetadataGraph.addEdge(1,2,(byte)0,leftNodeMetadata,new int[][]{new int[]{67},new int[]{302}});  nodeMetadataGraph.addEdge(1,3,(byte)0,leftNodeMetadata,new int[][]{new int[]{37,67},new int[]{100}});  nodeMetadataGraph.addEdge(1,4,(byte)0,leftNodeMetadata,new int[][]{null,new int[]{700}});  nodeMetadataGraph.addEdge(1,5,(byte)0,leftNodeMetadata,new int[][]{new int[]{11},new int[]{900,901,902,903,904}});  nodeMetadataGraph.addEdge(2,5,(byte)0,leftNodeMetadata,new int[][]{new int[]{11},new int[]{900,901,902,903,904}});  nodeMetadataGraph.addEdge(2,6,(byte)0,leftNodeMetadata,new int[][]{new int[]{10,11,12,33,24,19},new int[]{400,401,402,403,404}});  nodeMetadataGraph.addEdge(2,10,(byte)0,leftNodeMetadata,null);  nodeMetadataGraph.addEdge(3,7,(byte)0,leftNodeMetadata,new int[][]{new int[]{23,24},null});  nodeMetadataGraph.addEdge(3,8,(byte)0,leftNodeMetadata,new int[][]{null,new int[]{700}});  nodeMetadataGraph.addEdge(3,5,(byte)0,leftNodeMetadata,new int[][]{new int[]{11},new int[]{900,901,902,903,904}});  nodeMetadataGraph.addEdge(3,9,(byte)0,leftNodeMetadata,new int[][]{null,new int[]{102,103,101}});  nodeMetadataGraph.addEdge(3,2,(byte)0,leftNodeMetadata,new int[][]{new int[]{67},new int[]{302}});  nodeMetadataGraph.addEdge(3,10,(byte)0,leftNodeMetadata,new int[][]{new int[]{43},null});  nodeMetadataGraph.addEdge(3,11,(byte)0,leftNodeMetadata,new int[][]{null,null});  nodeMetadataGraph.addEdge(3,1,(byte)0,leftNodeMetadata,new int[][]{null,null});  return nodeMetadataGraph;}  }
class C{  @Override protected void process(final DistributionManager dm){  Assert.assertTrue(this.id != null);  dm.shutdownMessageReceived(id,LocalizedStrings.ShutdownMessage_SHUTDOWN_MESSAGE_RECEIVED.toLocalizedString());}  }
class C{  public void start(final String[] args,final URL warLocation) throws Exception {  Server server=new Server();  ServerConnector connector=new ServerConnector(server);  System.setProperty("org.apache.jasper.compiler.disablejsr199","false");  connector.setIdleTimeout(1000 * 60 * 60);  connector.setSoLingerTime(-1);  connector.setPort(Integer.parseInt(System.getProperty("logsniffer.httpPort","8082")));  connector.setHost(System.getProperty("logsniffer.httpListenAddress","0.0.0.0"));  server.setConnectors(new Connector[]{connector});  Configuration.ClassList classlist=Configuration.ClassList.setServerDefault(server);  classlist.addBefore("org.eclipse.jetty.webapp.JettyWebXmlConfiguration","org.eclipse.jetty.annotations.AnnotationConfiguration");  WebContextWithExtraConfigurations ctx=createWebAppContext();  ctx.setServer(server);  ctx.setWar(warLocation.toExternalForm());  String ctxPath=System.getProperty("logsniffer.contextPath","/");  if (!ctxPath.startsWith("/")) {    ctxPath="/" + ctxPath;  }  ctx.setContextPath(ctxPath);  configureWebAppContext(ctx);  ctx.freezeConfigClasses();  server.setHandler(ctx);  server.setStopAtShutdown(true);  try {    server.start();    server.join();  } catch (  Exception e) {    e.printStackTrace();    System.exit(100);  }}  }
class C{  private void updateRelationShip(InstagramAPIResponseCallback<IGRelationship> callback,String action,String userId){  Call<IGAPIResponse> call=instagramAPIService.updateRelationship(userId,action,getSession().getAccessToken());  call.enqueue(new InstagramAPIResponseManager<>(callback,new TypeToken<IGRelationship>(){  }.getType()));}  }
class C{  public long addCompletedDownload(String title,String description,boolean isMediaScannerScannable,String mimeType,String path,long length,boolean showNotification){  validateArgumentIsNonEmpty("title",title);  validateArgumentIsNonEmpty("description",description);  validateArgumentIsNonEmpty("path",path);  validateArgumentIsNonEmpty("mimeType",mimeType);  if (length < 0) {    throw new IllegalArgumentException(" invalid value for param: totalBytes");  }  Request request=new Request(NON_DOWNLOADMANAGER_DOWNLOAD).setTitle(title).setDescription(description).setMimeType(mimeType);  ContentValues values=request.toContentValues(null);  values.put(Downloads.Impl.COLUMN_DESTINATION,Downloads.Impl.DESTINATION_NON_DOWNLOADMANAGER_DOWNLOAD);  values.put(Downloads.Impl._DATA,path);  values.put(Downloads.Impl.COLUMN_STATUS,Downloads.Impl.STATUS_SUCCESS);  values.put(Downloads.Impl.COLUMN_TOTAL_BYTES,length);  values.put(Downloads.Impl.COLUMN_MEDIA_SCANNED,(isMediaScannerScannable) ? Request.SCANNABLE_VALUE_YES : Request.SCANNABLE_VALUE_NO);  values.put(Downloads.Impl.COLUMN_VISIBILITY,(showNotification) ? Request.VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETION : Request.VISIBILITY_HIDDEN);  Uri downloadUri=mResolver.insert(Downloads.Impl.CONTENT_URI,values);  if (downloadUri == null) {    return -1;  }  return Long.parseLong(downloadUri.getLastPathSegment());}  }
class C{  public SpinnerListModel(List<?> values){  if (values == null || values.size() == 0) {    throw new IllegalArgumentException("SpinnerListModel(List) expects non-null non-empty List");  }  this.list=values;  this.index=0;}  }
class C{  public int remainingCapacity(){  return maxSize - size();}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return TYPE;case 2:  return HELLO;case 3:return ERROR;case 4:return ECHO_REQUEST;case 5:return ECHO_REPLY;case 6:return GET_REQUEST;case 7:return GET_RESPONSE;case 8:return PUT_REQUEST;case 9:return PUT_RESPONSE;case 10:return DELETE_REQUEST;case 11:return DELETE_RESPONSE;case 12:return SYNC_VALUE;case 13:return SYNC_VALUE_RESPONSE;case 14:return SYNC_OFFER;case 15:return SYNC_REQUEST;case 16:return FULL_SYNC_REQUEST;case 17:return CURSOR_REQUEST;case 18:return CURSOR_RESPONSE;case 19:return REGISTER_REQUEST;case 20:return REGISTER_RESPONSE;case 21:return CLUSTER_JOIN_REQUEST;case 22:return CLUSTER_JOIN_RESPONSE;default :return null;}}  }
class C{  public Individual<Double> createRandomIndividual(){  List<Double> representation=new ArrayList<Double>(individualLength);  for (int i=0; i < individualLength; i++)   representation.add(minimum + random.nextDouble() * (maximum - minimum));  return new Individual<Double>(representation);}  }
class C{  @RequestMapping(value=BUSINESS_OBJECT_DEFINITION_TAGS_URI_PREFIX + "/namespaces/{namespace}" + "/businessObjectDefinitionNames/{businessObjectDefinitionName}"+ "/tagTypes/{tagTypeCode}"+ "/tagCodes/{tagCode}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DEFINITION_TAGS_DELETE) public BusinessObjectDefinitionTag deleteBusinessObjectDefinitionTag(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("tagTypeCode") String tagTypeCode,@PathVariable("tagCode") String tagCode){  return businessObjectDefinitionTagService.deleteBusinessObjectDefinitionTag(new BusinessObjectDefinitionTagKey(new BusinessObjectDefinitionKey(namespace,businessObjectDefinitionName),new TagKey(tagTypeCode,tagCode)));}  }
class C{  public static SpatialIndex locateAndSetShapeData(String shapeFileName){  SpatialIndex spi=null;  if (shapeFileName == null) {    return null;  }  int appendixIndex=shapeFileName.indexOf(".shp");  if (logger.isLoggable(Level.FINE)) {    logger.fine("created with just the shape file " + shapeFileName);  }  if (appendixIndex != -1) {    if (BinaryFile.exists(shapeFileName)) {      String spatialIndexFileName=ssx(shapeFileName);      if (logger.isLoggable(Level.FINE)) {        logger.fine("Trying to locate spatial index file " + spatialIndexFileName);      }      try {        spi=new SpatialIndex(shapeFileName);      } catch (      java.io.IOException ioe) {        logger.warning(ioe.getMessage());        ioe.printStackTrace();        spi=null;      }    } else {      logger.warning("Couldn't locate shape file " + shapeFileName);    }  } else {    if (logger.isLoggable(Level.FINE)) {      logger.fine("file " + shapeFileName + " doesn't look like a shape file");    }  }  return spi;}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  public static void CF5(double[] x,double[] f,double[] c,int nx){  double sum1=0.0;  double sum2=0.0;  double yj;  for (int j=2; j <= nx; j++) {    if (j % 2 == 1) {      yj=x[j - 1] - 0.8 * x[0] * Math.cos(6.0 * PI * x[0] + j * PI / nx);      sum1+=2.0 * yj * yj - Math.cos(4.0 * PI * yj) + 1.0;    } else {      yj=x[j - 1] - 0.8 * x[0] * Math.sin(6.0 * PI * x[0] + j * PI / nx);      if (j == 2) {        sum2+=yj < 1.5 - 0.75 * Math.sqrt(2.0) ? Math.abs(yj) : (0.125 + (yj - 1) * (yj - 1));      } else {        sum2+=2.0 * yj * yj - Math.cos(4.0 * PI * yj) + 1.0;      }    }  }  f[0]=x[0] + sum1;  f[1]=1.0 - x[0] + sum2;  c[0]=x[1] - 0.8 * x[0] * Math.sin(6.0 * x[0] * PI + 2.0 * PI / nx) - 0.5 * x[0] + 0.25;}  }
class C{  void onDragEnter(){  mDragEnforcer.onDragEnter();  mDragging=true;}  }
class C{  public double eval(double params[]){  double p1=params[0];  double p2=params[1];  double p3=params[2];  double p4=params[3];  return (p1 == p2) ? p3 : p4;}  }
class C{  public boolean verifySignedData(SignatureType signatureType,KeyPair keyPair,String fileName,byte[] sign){  boolean verified=false;  try {    signature=Signature.getInstance(signatureType.jce());    signature.initSign(keyPair.getPrivate());    FileInputStream fis=new FileInputStream(fileName);    BufferedInputStream bufin=new BufferedInputStream(fis);    byte[] buffer=new byte[1024];    int len;    while ((len=bufin.read(buffer)) >= 0) {      signature.update(buffer,0,len);    }    bufin.close();    verified=signature.verify(sign);  } catch (  Exception e) {    LOG.error("Error verifying signed data",e);  }  return verified;}  }
class C{  public static MessageIntegrityAttribute createMessageIntegrityAttribute(String username){  MessageIntegrityAttribute attribute=new MessageIntegrityAttribute();  attribute.setUsername(username);  return attribute;}  }
class C{  public double distanceTo(GeoLocation location,double radius){  return Math.acos(Math.sin(radLat) * Math.sin(location.radLat) + Math.cos(radLat) * Math.cos(location.radLat) * Math.cos(radLon - location.radLon)) * radius;}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(Base64.encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  @Override protected void onLayout(boolean changed,int l,int t,int r,int b){  super.onLayout(changed,l,t,r,b);  mInLayout=true;  layout(0,false);  mInLayout=false;}  }
class C{  public static void stop() throws Exception {  if (actorSystem != null) {    actorSystem.shutdown();  }}  }
class C{  private boolean isSubscribed(){  final SharedPreferences settings=getSharedPreferencesForCurrentUser();  return settings.getBoolean(HAS_SUBSCRIPTION,false);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @InitBinder public void initBinder(WebDataBinder webDataBinder){  SimpleDateFormat dateFormat=new SimpleDateFormat(DATE_FORMAT);  dateFormat.setLenient(true);  webDataBinder.registerCustomEditor(Date.class,new CustomDateEditor(dateFormat,true));}  }
class C{  public LongArrayList(long[] elements){  elements(elements);}  }
class C{  public CommitParams withContainer(@NotNull String container){  requireNonNull(container);  this.container=container;  return this;}  }
class C{  @Override public String toString(){  return "Target Information Object";}  }
class C{  @Override public void writeInsertFieldsIntoRow(AbstractRecord databaseRow,AbstractSession session){  if (isReadOnly()) {    return;  }  AbstractRecord targetRow=buildTemplateInsertRow(session);  for (Enumeration keyEnum=targetRow.keys(); keyEnum.hasMoreElements(); ) {    DatabaseField field=(DatabaseField)keyEnum.nextElement();    if (field.isInsertable()) {      Object value=targetRow.get(field);      databaseRow.add(field,value);    }  }}  }
class C{  public boolean rowInserted() throws SQLException {  throw SQLError.createSQLFeatureNotSupportedException();}  }
class C{  public void disableHardwareAccelerationForDecoView(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {    setLayerType(LAYER_TYPE_SOFTWARE,null);  }}  }
class C{  private static boolean isSparseArray(Element arrayE){  String name=arrayE.getTagName();  if (name.equals("INT-SparseArray") || name.equals("REAL-SparseArray")) {    return true;  }  return false;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,(double)Math.round(z1));        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Query groupBy(Field<?>... fields){  if (immutable) {    return fork().groupBy(fields);  }  if (this.groupByFields == null) {    this.groupByFields=new ArrayList<>();  }  SquidUtilities.addAll(this.groupByFields,fields);  invalidateCompileCache();  return this;}  }
class C{  public boolean saveWarning(String AD_Message,String message){  ValueNamePair lastWarning=new ValueNamePair(AD_Message,message);  Env.getCtx().put(LAST_WARNING,lastWarning);  if (true)   warning(AD_Message + " - " + message);  return true;}  }
class C{  private void detachVolumesFromInitiators(StorageSystem storage,List<Volume> volumes,List<Initiator> initiators) throws Exception {  CinderEndPointInfo ep=CinderUtils.getCinderEndPoint(storage.getActiveProviderURI(),dbClient);  log.debug("Getting the cinder APi for the provider with id {}",storage.getActiveProviderURI());  CinderApi cinderApi=cinderApiFactory.getApi(storage.getActiveProviderURI(),ep);  List<Initiator> iSCSIInitiators=new ArrayList<Initiator>();  List<Initiator> fcInitiators=new ArrayList<Initiator>();  splitInitiatorsByProtocol(initiators,iSCSIInitiators,fcInitiators);  String host=getHostNameFromInitiators(initiators);  Map<String,String[]> mapSettingVsValues=getFCInitiatorsArray(fcInitiators);  String[] fcInitiatorsWwpns=mapSettingVsValues.get(WWPNS);  String[] fcInitiatorsWwnns=mapSettingVsValues.get(WWNNS);  for (  Volume volume : volumes) {    String volumeId=volume.getNativeId();    for (    Initiator initiator : iSCSIInitiators) {      String initiatorPort=initiator.getInitiatorPort();      log.debug(String.format("Detaching volume %s ( %s ) from initiator %s on Openstack cinder node",volumeId,volume.getId(),initiatorPort));      cinderApi.detachVolume(volumeId,initiatorPort,null,null,host);    }    if (fcInitiatorsWwpns.length > 0) {      log.debug(String.format("Detaching volume %s ( %s ) from initiator %s on Openstack cinder node",volumeId,volume.getId(),fcInitiatorsWwpns));      cinderApi.detachVolume(volumeId,null,fcInitiatorsWwpns,fcInitiatorsWwnns,host);    }    removeITLsFromVolume(volume);  }}  }
class C{  public void mousePressed(MouseEvent ev){  if (!tryPopup(ev) && SwingUtilities.isLeftMouseButton(ev)) {    if (((JTableHeader)ev.getSource()).getResizingColumn() == null)     hmo.handleHeaderColumnPressed(ev.getPoint()); else     isResizing=true;  }}  }
class C{  public OrganizationAuthoritiesException(String message){  super(message);}  }
class C{  public void onCreate(Bundle bundle){  mIsAttached=false;  mBundle=bundle != null ? bundle : new Bundle();  if (bundle == null || !mBundle.containsKey(mKeyTags)) {    mDelegateTag=generateTag();  } else {    mDelegateTag=bundle.getString(mKeyTags);  }  mPresenters=MvpFacade.getInstance().getMvpProcessor().getMvpPresenters(mDelegated,mDelegateTag);  for (  MvpDelegate childDelegate : mChildDelegates) {    childDelegate.onCreate(bundle);  }}  }
class C{  UserService(ArgusHttpClient client){  super(client);}  }
class C{  @Override public Codebase edit(Codebase input,Map<String,String> options){  File tempDir=filesystem.getTemporaryDirectory("scrubber_run_");  File outputTar=new File(tempDir,"scrubbed.tar");  try {    cmd.runCommand(executable.get().getCanonicalPath(),ImmutableList.of("--temp_dir",tempDir.getAbsolutePath(),"--output_tar",outputTar.getAbsolutePath(),"--config_data",(scrubberConfig == null) ? "{}" : GsonModule.provideGson().toJson(scrubberConfig),input.path().getAbsolutePath()),executable.get().getParentFile().getPath());  } catch (  CommandRunner.CommandException|IOException e) {    throw new MoeProblem(e,"Problem executing the scrubber: %s",e.getMessage());  }  File expandedDir=null;  try {    expandedDir=tarUtils.expandTar(outputTar);  } catch (  IOException|CommandRunner.CommandException e) {    throw new MoeProblem(e.getMessage());  }  return Codebase.create(expandedDir,input.projectSpace(),input.expression());}  }
class C{  public T caseType(Type object){  return null;}  }
class C{  private Object readResolve(){  if (list instanceof RandomAccess) {    return new SynchronizedRandomAccessList<E>(list,mutex);  }  return this;}  }
class C{  void loadDemos(){  for (int i=0; i < demos.length; ) {    if (isApplet() && demos[i].equals("FileChooserDemo")) {    } else {      loadDemo(demos[i]);    }    i++;  }}  }
class C{  public boolean isMagic(){  return getType().isMagicType() || ((resolvedMember != null) && (resolvedMember.isSysCall() || resolvedMember.isSpecializedInvoke()));}  }
class C{  public void toInteger() throws IOException {  writeCode(TO_INTEGER);}  }
class C{  public void toggle(JFXDrawer drawer){  if (!drawers.contains(drawer))   addDrawer(drawer);  if (drawer.isShown() || drawer.isShowing())   drawer.close(); else {    updateDrawerPosition(drawer);    drawer.open();  }}  }
class C{  public static final int ldu(int v){  int c=0;  do {    v>>=1;    c++;  } while (v > 1);  return c;}  }
class C{  public boolean thisIsYou(Object n){  return id.equals(n);}  }
class C{  public void zoomToLayers(){  BoundingBox bbox=null;  Enumeration e=_layers.elements();  while (e.hasMoreElements()) {    LayerWithZoomLevels layer=(LayerWithZoomLevels)e.nextElement();    BoundingBox layerBbox=layer.layer.boundingBox();    if (layerBbox == null) {      continue;    }    if (bbox == null) {      bbox=layerBbox;    } else {      bbox=bbox.extend(layerBbox);    }  }  if (bbox != null) {    if (bbox.projected()) {      bbox=_map.projection().toWGS84(bbox);    }    zoomTo(bbox);  }  _needTiles=true;}  }
class C{  private void handleError(Request request,Throwable e,long startTime){  if (interceptors == null) {    return;  }  long ellapsedTime=getElapsedTimeInMs(startTime);  for (  IInterceptor interceptor : interceptors) {    interceptor.handleError(e,this,request.getCommand(),ellapsedTime);  }}  }
class C{  public Textifier visitTypeAnnotation(final int typeRef,final TypePath typePath,final String desc,final boolean visible){  buf.setLength(0);  buf.append(tab).append('@');  appendDescriptor(FIELD_DESCRIPTOR,desc);  buf.append('(');  text.add(buf.toString());  Textifier t=createTextifier();  text.add(t.getText());  buf.setLength(0);  buf.append(") : ");  appendTypeReference(typeRef);  buf.append(", ").append(typePath);  buf.append(visible ? "\n" : " // invisible\n");  text.add(buf.toString());  return t;}  }
class C{  public void messageTransferred(String id,DTNHost from){  this.router.messageTransferred(id,from);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean remove(Object obj){  return this.hlist.remove(obj);}  }
class C{  @Override public void nodeJoined(GfManagerAgent source,GemFireVM joined){  try {    super.nodeJoined(source,joined);    SystemMember member=findSystemMember(joined);    if (null == member) {      if (logger.isDebugEnabled()) {        logger.debug("AdminDistributedSystemJmxImpl.nodeJoined(), Could not find SystemMember for VM {}",joined);      }      return;    }    try {      if (logger.isDebugEnabled()) {        logger.debug("Processing node joined for: {}",member);        logger.debug("RemoteGemFireVM.nodeJoined(), setting alerts manager *************");      }      setAlertsManager(joined);      this.modelMBean.sendNotification(new Notification(NOTIF_MEMBER_JOINED,((ManagedResource)member).getObjectName(),notificationSequenceNumber.addAndGet(1),joined.getId().toString()));      if (isEmailNotificationEnabled) {        String mess=LocalizedStrings.AdminDistributedSystemJmxImpl_MEMBER_JOINED_THE_DISTRIBUTED_SYSTEM_MEMBER_ID_0.toLocalizedString(new Object[]{joined.getId().toString()});        sendEmail(EML_SUBJ_PRFX_GFE_NOTFY + EML_SUBJ_ITEM_GFE_DS + getName()+ " <"+ LocalizedStrings.AdminDistributedSystemJmxImpl_MEMBER_JOINED.toLocalizedString()+ ">",mess);      }    } catch (    javax.management.MBeanException e) {      logger.warn(e.getMessage(),e);    }  } catch (  RuntimeException e) {    logger.warn(e.getMessage(),e);    throw e;  }catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  Error e) {    SystemFailure.checkFailure();    logger.error(e.getMessage(),e);    throw e;  }}  }
class C{  public SQLInvalidAuthorizationSpecException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public NotificationChain basicSetTemplate(TemplateLiteral newTemplate,NotificationChain msgs){  TemplateLiteral oldTemplate=template;  template=newTemplate;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.TAGGED_TEMPLATE_STRING__TEMPLATE,oldTemplate,newTemplate);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private CModuleStaringFunctions(){}  }
class C{  protected String taskReportLine(String longestOp,TaskStats stat){  PerfTask task=stat.getTask();  StringBuilder sb=new StringBuilder();  sb.append(Format.format(task.getName(),longestOp));  String round=(stat.getRound() >= 0 ? "" + stat.getRound() : "-");  sb.append(Format.formatPaddLeft(round,ROUND));  sb.append(getRunData().getConfig().getColsValuesForValsByRound(stat.getRound()));  sb.append(Format.format(stat.getNumRuns(),RUNCNT));  sb.append(Format.format(stat.getCount() / stat.getNumRuns(),RECCNT));  long elapsed=(stat.getElapsed() > 0 ? stat.getElapsed() : 1);  sb.append(Format.format(2,(float)(stat.getCount() * 1000.0 / elapsed),RECSEC));  sb.append(Format.format(2,(float)stat.getElapsed() / 1000,ELAPSED));  sb.append(Format.format(0,(float)stat.getMaxUsedMem() / stat.getNumRuns(),USEDMEM));  sb.append(Format.format(0,(float)stat.getMaxTotMem() / stat.getNumRuns(),TOTMEM));  return sb.toString();}  }
class C{  public static String fromCacheOrNew(String s){  if (!SysProperties.OBJECT_CACHE) {    return s;  }  if (s == null) {    return s;  } else   if (s.length() == 0) {    return "";  }  int hash=s.hashCode();  String[] cache=getCache();  int index=hash & (SysProperties.OBJECT_CACHE_SIZE - 1);  if (cache == null) {    return s;  }  String cached=cache[index];  if (cached != null) {    if (s.equals(cached)) {      return cached;    }  }  s=new String(s);  cache[index]=s;  return s;}  }
class C{  @Override public String toString(){  String s=stringForm;  if (s == null) {    int length=encoding.length;    StringBuffer sb=new StringBuffer(length * 4);    int fromPos=0;    for (int i=0; i < length; i++) {      if ((encoding[i] & 0x80) == 0) {        if (fromPos != 0) {          sb.append('.');        }        if (i - fromPos + 1 > 4) {          BigInteger big=new BigInteger(pack(encoding,fromPos,i - fromPos + 1,7,8));          if (fromPos == 0) {            sb.append("2.");            sb.append(big.subtract(BigInteger.valueOf(80)));          } else {            sb.append(big);          }        } else {          int retval=0;          for (int j=fromPos; j <= i; j++) {            retval<<=7;            byte tmp=encoding[j];            retval|=(tmp & 0x07f);          }          if (fromPos == 0) {            if (retval < 80) {              sb.append(retval / 40);              sb.append('.');              sb.append(retval % 40);            } else {              sb.append("2.");              sb.append(retval - 80);            }          } else {            sb.append(retval);          }        }        fromPos=i + 1;      }    }    s=sb.toString();    stringForm=s;  }  return s;}  }
class C{  public UF3(int numberOfVariables){  super(numberOfVariables,2);}  }
class C{  public void testSignumNegative(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  private synchronized CompletableFuture<Void> join(){  joinFuture=new CompletableFuture<>();  context.getThreadContext().executor().execute(null);  return joinFuture.whenComplete(null);}  }
class C{  private void rebuildNode(){  nodeRealizer.regenerate();  graph.updateViews();}  }
class C{  public static boolean isFolderExist(String directoryPath){  if (TextUtils.isEmpty(directoryPath)) {    return false;  }  File dire=new File(directoryPath);  return (dire.exists() && dire.isDirectory());}  }
class C{  public void requestQueryFocus(){  mFindQuery.requestFocus();  showKeyboard();}  }
class C{  public static DateTimeFormatter yearMonth(){  if (ym == null) {    ym=new DateTimeFormatterBuilder().append(yearElement()).append(monthElement()).toFormatter();  }  return ym;}  }
class C{  public void remove(int pos){  if (pos < 0) {    throw new IllegalArgumentException("index less than zero.");  }  if (pos > getItemCount()) {    throw new IllegalArgumentException("index greater than the number of items.");  }  if (popupMenu != null)   popupMenu.remove(pos);}  }
class C{  public Relationship nextMostConsciousRelationship(Vertex type,Vertex ignoring){  return nextMostConsciousRelationship(type,ignoring,0,false);}  }
class C{  @Override public void run(){  amIActive=true;  try {    String inputFilesString=null;    String sagaHeaderFile=null;    String sagaDataFile=null;    String whiteboxHeaderFile=null;    String whiteboxDataFile=null;    WhiteboxRaster output=null;    int i=0;    int row, col, rows, cols;    String[] imageFiles;    int numImages=0;    double noData=-32768;    int progress=0;    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      whiteboxHeaderFile=imageFiles[i];      if (!((new File(whiteboxHeaderFile)).exists())) {        showFeedback("Whitebox raster file does not exist.");        break;      }      WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"r");      rows=wbr.getNumberRows();      cols=wbr.getNumberColumns();      noData=wbr.getNoDataValue();      sagaHeaderFile=whiteboxHeaderFile.replace(".dep",".sgrd");      sagaDataFile=whiteboxHeaderFile.replace(".dep",".sdat");      (new File(sagaHeaderFile)).delete();      (new File(sagaDataFile)).delete();      WhiteboxRaster.DataType dataType;      if (wbr.getDataType() == WhiteboxRaster.DataType.DOUBLE) {        dataType=WhiteboxRaster.DataType.DOUBLE;      } else       if (wbr.getDataType() == WhiteboxRaster.DataType.FLOAT) {        dataType=WhiteboxRaster.DataType.FLOAT;      } else       if (wbr.getDataType() == WhiteboxRaster.DataType.INTEGER) {        dataType=WhiteboxRaster.DataType.INTEGER;      } else {        dataType=WhiteboxRaster.DataType.BYTE;      }      output=new WhiteboxRaster(whiteboxHeaderFile.replace(".dep","_temp.dep"),"rw",whiteboxHeaderFile,dataType,noData);      output.setNoDataValue(noData);      whiteboxDataFile=whiteboxHeaderFile.replace(".dep","_temp.tas");      double[] data=null;      for (row=0; row < rows; row++) {        data=wbr.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            output.setValue(rows - row - 1,col,data[col]);          } else {            output.setValue(rows - row - 1,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      output.close();      File dataFile=new File(whiteboxDataFile);      File sagaFile=new File(sagaDataFile);      dataFile.renameTo(sagaFile);      if (!createHeaderFile(wbr,sagaHeaderFile)) {        showFeedback("SAGA header file was not written properly. " + "Tool failed to export");        return;      }      wbr.close();      (new File(whiteboxHeaderFile.replace(".dep","_temp.dep"))).delete();    }    showFeedback("Operation complete!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void testSinglePolygonManyPointsHolesRoundTrip() throws SAXException, IOException, ParserConfigurationException {  PolygonGenerator pg=new PolygonGenerator();  pg.setGeometryFactory(geometryFactory);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setGenerationAlgorithm(PolygonGenerator.BOX);  pg.setNumberPoints(1000);  pg.setNumberHoles(4);  Polygon pt=(Polygon)pg.create();  checkRoundTrip(pt);}  }
class C{  public static ArrayList<Attribute> parseOperationsMessage(String message){  ArrayList<Attribute> contents=new ArrayList<Attribute>();  int start;  int end;  int equals;  String request;  if ((message != null) && message.startsWith(OPERATIONS)) {    for (start=message.indexOf(REQUEST_DELIMITER); start > 0; start=end) {      start+=REQUEST_DELIMITER.length();      end=message.indexOf(REQUEST_DELIMITER,start);      if (end > 0) {        request=message.substring(start,end);      } else {        request=message.substring(start,message.length());      }      equals=request.indexOf(FIELDSEPARATOR);      if ((equals > 0) && (equals < (request.length() - 1))) {        contents.add(new Attribute(request.substring(0,equals),request.substring(equals + 1,request.length())));      } else {        contents.add(new Attribute(request,null));      }    }  }  return contents;}  }
class C{  private void unswapAll(IgniteCache<Integer,CacheValue> cache,int lowerBound,int upperBound) throws Exception {  resetCounters();  Set<Integer> keys=new HashSet<>();  for (int i=lowerBound; i < upperBound; i++) {    assert cache.localPeek(i,CachePeekMode.ONHEAP) == null;    keys.add(i);  }  cache.localPromote(keys);  assert swapCnt.get() == 0;  assert unswapCnt.get() == upperBound - lowerBound;  checkEntries(cache,lowerBound,upperBound);  assert swapCnt.get() == 0;  assert unswapCnt.get() == upperBound - lowerBound;}  }
class C{  public K maxValue(){  if (refSet.isEmpty()) {    return null;  }  return refSet.lastKey();}  }
class C{  private Producer<EncodedImage> newEncodedCacheMultiplexToTranscodeSequence(Producer<EncodedImage> inputProducer){  if (WebpSupportStatus.sIsWebpSupportRequired && (!mWebpSupportEnabled || WebpSupportStatus.sWebpBitmapFactory == null)) {    inputProducer=mProducerFactory.newWebpTranscodeProducer(inputProducer);  }  inputProducer=newDiskCacheSequence(inputProducer);  EncodedMemoryCacheProducer encodedMemoryCacheProducer=mProducerFactory.newEncodedMemoryCacheProducer(inputProducer);  return mProducerFactory.newEncodedCacheKeyMultiplexProducer(encodedMemoryCacheProducer);}  }
class C{  public static long toLong(byte[] data){  if (data == null || data.length != 8)   return 0x0;  return (long)((long)(0xff & data[0]) << 56 | (long)(0xff & data[1]) << 48 | (long)(0xff & data[2]) << 40 | (long)(0xff & data[3]) << 32 | (long)(0xff & data[4]) << 24 | (long)(0xff & data[5]) << 16 | (long)(0xff & data[6]) << 8 | (long)(0xff & data[7]) << 0);}  }
class C{  public static <E,S extends Set<E>>SynchronizedMutableSet<E> of(S set){  return new SynchronizedMutableSet<>(SetAdapter.adapt(set));}  }
class C{  @Override public XMLStreamReader createXMLStreamReader(InputStream in,String encoding) throws XMLStreamException {  try {    return new WbXmlStreamReader(in,(WbXmlDefinition)props.get(DEFINITION_PROPERTY));  } catch (  IOException e) {    throw new XMLStreamException(e);  }}  }
class C{  public void testGetNameWhenEjbHasNoExtension(){  EJB ejb=new EJB("/some/path/to/ejb/test");  assertEquals("test",ejb.getName());}  }
class C{  protected void handleResponse(final NextFilter nextFilter,final IoBuffer buf,int step) throws Exception {  int len=2;  if (step == SocksProxyConstants.SOCKS5_GREETING_STEP) {    byte method=buf.get(1);    if (method == SocksProxyConstants.NO_ACCEPTABLE_AUTH_METHOD) {      throw new IllegalStateException("No acceptable authentication method to use with " + "the socks proxy server");    }    getSession().setAttribute(SELECTED_AUTH_METHOD,Byte.valueOf(method));  } else   if (step == SocksProxyConstants.SOCKS5_AUTH_STEP) {    byte method=((Byte)getSession().getAttribute(Socks5LogicHandler.SELECTED_AUTH_METHOD)).byteValue();    if (method == SocksProxyConstants.GSSAPI_AUTH) {      int oldPos=buf.position();      if (buf.get(0) != 0x01) {        throw new IllegalStateException("Authentication failed");      }      if (buf.get(1) == 0xFF) {        throw new IllegalStateException("Authentication failed: GSS API Security Context Failure");      }      if (buf.remaining() >= 2) {        byte[] size=new byte[2];        buf.get(size);        int s=ByteUtilities.makeIntFromByte2(size);        if (buf.remaining() >= s) {          byte[] token=new byte[s];          buf.get(token);          getSession().setAttribute(GSS_TOKEN,token);          len=0;        } else {          return;        }      } else {        buf.position(oldPos);        return;      }    } else     if (buf.get(1) != SocksProxyConstants.V5_REPLY_SUCCEEDED) {      throw new IllegalStateException("Authentication failed");    }  } else   if (step == SocksProxyConstants.SOCKS5_REQUEST_STEP) {    byte addressType=buf.get(3);    len=6;    if (addressType == SocksProxyConstants.IPV6_ADDRESS_TYPE) {      len+=16;    } else     if (addressType == SocksProxyConstants.IPV4_ADDRESS_TYPE) {      len+=4;    } else     if (addressType == SocksProxyConstants.DOMAIN_NAME_ADDRESS_TYPE) {      len+=1 + (buf.get(4));    } else {      throw new IllegalStateException("Unknwon address type");    }    if (buf.remaining() >= len) {      byte status=buf.get(1);      LOGGER.debug("  response status: {}",SocksProxyConstants.getReplyCodeAsString(status));      if (status == SocksProxyConstants.V5_REPLY_SUCCEEDED) {        buf.position(buf.position() + len);        setHandshakeComplete();        return;      }      throw new Exception("Proxy handshake failed - Code: 0x" + ByteUtilities.asHex(new byte[]{status}));    }    return;  }  if (len > 0) {    buf.position(buf.position() + len);  }  boolean isAuthenticating=false;  if (step == SocksProxyConstants.SOCKS5_AUTH_STEP) {    byte method=((Byte)getSession().getAttribute(Socks5LogicHandler.SELECTED_AUTH_METHOD)).byteValue();    if (method == SocksProxyConstants.GSSAPI_AUTH) {      GSSContext ctx=(GSSContext)getSession().getAttribute(GSS_CONTEXT);      if (ctx == null || !ctx.isEstablished()) {        isAuthenticating=true;      }    }  }  if (!isAuthenticating) {    getSession().setAttribute(HANDSHAKE_STEP,++step);  }  doHandshake(nextFilter);}  }
class C{  public OpenSecureChannelResponse clone(){  OpenSecureChannelResponse result=new OpenSecureChannelResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  result.ServerProtocolVersion=ServerProtocolVersion;  result.SecurityToken=SecurityToken == null ? null : SecurityToken.clone();  result.ServerNonce=ServerNonce;  return result;}  }
class C{  public Object put(String type,String id,Object entity){  uuidReverseMap.put(entity,id);  return resourceCache.put(getCacheKey(type,id),entity);}  }
class C{  public IEEE802154Message(byte[] a,int l){  super(String.valueOf(a));  setResponseLength(l);  setBinary(true);  setTimeout(5000);}  }
class C{  @Override public final void write(int b){  ensureCapacity(1);  if (this.overflowBuf != null) {    this.overflowBuf.write(b);    return;  }  this.buffer.put((byte)b);}  }
class C{  @Override public void onPassphraseCanceled(){}  }
class C{  public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public void testMT() throws Exception {  tryMT(2,3);}  }
class C{  public void postDeregister(){}  }
class C{  public static double[] stringArrayToDoubleArray(final String[] line){  double[] ret=new double[line.length];  for (int i=0; i < line.length; i++) {    ret[i]=Double.parseDouble(line[i]);  }  return ret;}  }
class C{  public synchronized void logTruncate(Session session,int tableId){  if (!recoveryRunning) {    openForWriting();    log.logTruncate(session,tableId);  }}  }
class C{  public static String slotInfoFlagsToString(long flags){  return slotInfoFlags.toString(flags);}  }
class C{  public static byte[] decode(final String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  @SuppressWarnings("unchecked") public static <T>T asType(Closure cl,Class<T> clazz){  if (clazz.isInterface() && !(clazz.isInstance(cl))) {    if (Traits.isTrait(clazz)) {      Method samMethod=CachedSAMClass.getSAMMethod(clazz);      if (samMethod != null) {        Map impl=Collections.singletonMap(samMethod.getName(),cl);        return (T)ProxyGenerator.INSTANCE.instantiateAggregate(impl,Collections.<Class>singletonList(clazz));      }    }    return (T)Proxy.newProxyInstance(clazz.getClassLoader(),new Class[]{clazz},new ConvertedClosure(cl));  }  try {    return asType((Object)cl,clazz);  } catch (  GroovyCastException ce) {    try {      return (T)ProxyGenerator.INSTANCE.instantiateAggregateFromBaseClass(cl,clazz);    } catch (    GroovyRuntimeException cause) {      throw new GroovyCastException("Error casting closure to " + clazz.getName() + ", Reason: "+ cause.getMessage());    }  }}  }
class C{  public boolean disableUserAccount(String tenantName,PrincipalId userId) throws Exception {  return getService().disableUserAccount(tenantName,userId,this.getServiceContext());}  }
class C{  public Stream<SentencePair> parallelStream(){  return IntStream.range(0,srcBitext.length).parallel().mapToObj(null).filter(null);}  }
class C{  public ToStringBuilder append(String fieldName,boolean[] array,boolean fullDetail){  style.append(buffer,fieldName,array,BooleanUtils.toBooleanObject(fullDetail));  return this;}  }
class C{  protected SVGGraphicsElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public void test_ConstructorIIIIII(){  Date d1=new Date(70,0,1,1,1,1);  Date d2=new Date(0 + d1.getTimezoneOffset() * 60 * 1000 + 60 * 60 * 1000 + 60 * 1000 + 1000);  assertTrue("Created incorrect date",d1.equals(d2));}  }
class C{  @SuppressWarnings("unchecked") public OrderPosition(T ord,Integer posNo){  super();  Assert.notNull(ord);  Assert.notNull(posNo);  this.order=ord;  this.order.addPostions((U)this);  this.positionId=new OrderPositionKey(ord,posNo);}  }
class C{  public CompiledST defineTemplate(String templateName,String template){  if (templateName.charAt(0) != '/')   templateName="/" + templateName;  try {    CompiledST impl=defineTemplate(templateName,new CommonToken(GroupParser.ID,templateName),null,template,null);    return impl;  } catch (  STException se) {  }  return null;}  }
class C{  public AttrValueDTO createEntityAttributeValue(final AttrValueDTO attrValueDTO) throws UnmappedInterfaceException, UnableToCreateInstanceException {  try {    getById(((AttrValueProductSkuDTO)attrValueDTO).getSkuId());  } catch (  UnmappedInterfaceException e) {  }catch (  UnableToCreateInstanceException e) {  }  AttrValueProductSkuDTO rez=(AttrValueProductSkuDTO)dtoProductSkuService.createEntityAttributeValue(attrValueDTO);  reindexService.reindexProductSku(rez.getSkuId());  return rez;}  }
class C{  public boolean hasExclusion(){  return !mExcludedClasses.isEmpty() || !mExcludedTests.isEmpty();}  }
class C{  public static int choice(final Shell shell,final String title,final String text,final int defaultSelection,final ChoiceItem... items){  final Dialog dialog=new Dialog(shell);  dialog.setTitle(ResourceManager.getLabel(ResourceManager.CHOICE));  dialog.getMessageArea().setTitle(title).setText(text).setIcon(Display.getCurrent().getSystemImage(SWT.ICON_QUESTION)).addChoice(defaultSelection,items);  dialog.setButtonType(OpalDialogType.NONE);  dialog.show();  return dialog.getMessageArea().getChoice();}  }
class C{  public synchronized void performAdd(final float x,final float y) throws OsmIllegalOperationException {  Log.d("Logic","performAdd");  createCheckpoint(R.string.undo_action_add);  Node nextNode;  Node lSelectedNode=selectedNodes != null && selectedNodes.size() > 0 ? selectedNodes.get(0) : null;  Way lSelectedWay=selectedWays != null && selectedWays.size() > 0 ? selectedWays.get(0) : null;  if (lSelectedNode == null) {    lSelectedNode=getClickedNodeOrCreatedWayNode(x,y);    if (lSelectedNode == null) {      int lat=yToLatE7(y);      int lon=xToLonE7(x);      lSelectedNode=getDelegator().getFactory().createNodeWithNewId(lat,lon);      getDelegator().insertElementSafe(lSelectedNode);      if (!getDelegator().isInDownload(lat,lon)) {        Log.d("Logic","Outside of download");        Toast.makeText(Application.mainActivity,R.string.toast_outside_of_download,Toast.LENGTH_SHORT).show();      }    }  } else {    nextNode=getClickedNodeOrCreatedWayNode(x,y);    if (nextNode == null) {      if (lSelectedWay == null) {        lSelectedWay=getDelegator().createAndInsertWay(lSelectedNode);      }      int lat=yToLatE7(y);      int lon=xToLonE7(x);      lSelectedNode=getDelegator().getFactory().createNodeWithNewId(lat,lon);      getDelegator().addNodeToWay(lSelectedNode,lSelectedWay);      getDelegator().insertElementSafe(lSelectedNode);      if (!getDelegator().isInDownload(lat,lon)) {        Log.d("Logic","Outside of download");        Toast.makeText(Application.mainActivity,R.string.toast_outside_of_download,Toast.LENGTH_SHORT).show();      }    } else {      if (nextNode == lSelectedNode) {        removeCheckpoint(R.string.undo_action_add);        lSelectedNode=null;        lSelectedWay=null;      } else {        if (lSelectedWay == null) {          lSelectedWay=getDelegator().createAndInsertWay(lSelectedNode);        }        getDelegator().addNodeToWay(nextNode,lSelectedWay);        lSelectedNode=nextNode;      }    }  }  setSelectedNode(lSelectedNode);  setSelectedWay(lSelectedWay);}  }
class C{  public boolean add(E e,int numSubstates){  if (contains(e))   return false;  objects.add(e);  indexes.put(e,size() - 1);  Integer previousSubindex=subindexes.get(subindexes.size() - 1);  subindexes.add(previousSubindex + numSubstates);  return true;}  }
class C{  public void backup(File file) throws IOException {  this.rotate(file,4,"bak");}  }
class C{  public static IonStruct sharedSymtabStruct(ValueFactory factory,String name,int version,String... syms){  IonStruct s=factory.newEmptyStruct();  s.setTypeAnnotations(SystemSymbols.ION_SHARED_SYMBOL_TABLE);  s.add(SystemSymbols.NAME).newString(name);  s.add(SystemSymbols.VERSION).newInt(version);  if (syms != null) {    IonList l=s.add(SystemSymbols.SYMBOLS).newEmptyList();    for (    String sym : syms) {      l.add().newString(sym);    }  }  return s;}  }
class C{  public Builder maxCount(Integer maxCount){  this.maxCount=maxCount;  return this;}  }
class C{  void sendFile(PrintStream ps) throws IOException {  if (testNum == -1) {    if (!Support_TestWebData.test0DataAvailable) {      log("test data was not initialized");      return;    }    sendFile(ps,Support_TestWebData.test0Data);  } else {    sendFile(ps,Support_TestWebData.tests[testNum]);  }}  }
class C{  public void sendMrcMessage(MrcMessage m){  transmittedMsgCount++;  m.setByteStream();  if (log.isDebugEnabled()) {    log.debug("queue Mrc packet: {}",m.toString());  }  try {synchronized (xmtHandler) {      xmtList.addLast(m);      if (log.isDebugEnabled()) {        log.debug("xmt list size " + xmtList.size());        Iterator<MrcMessage> iterator=xmtList.iterator();        while (iterator.hasNext()) {          log.debug(iterator.next().toString());        }        log.debug("==");      }    }  } catch (  Exception e) {    log.warn("passing to xmit: unexpected exception: {0}",e);  }}  }
class C{  private void cleanupADSequences(){  if (!m_source.isObjectExists("AD_Sequence",m_source.getTables()))   return;  if (!m_source.isObjectExists("AD_Table",m_source.getTables()))   return;  if (!m_source.isObjectExists("AD_Column",m_source.getTables()))   return;  HashMap<String,DBObject> currentSequences=new HashMap<String,DBObject>(m_target.reloadSequences());  resetDBObjects(null);  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"cleanupADSequences",m_direction);  String vendor=m_target.getVendor();  String catalog=m_target.getCatalog();  String schema=m_target.getSchema();  Savepoint sp=m_target.setSavepoint("synchronize sequences");  ArrayList<String> insertColumnNames=new ArrayList<String>();  ArrayList<String> updateColumnNames=new ArrayList<String>();  ArrayList<String> updateWhereColumnNames=new ArrayList<String>();  DBObject sequenceTable=m_source.getObjectByName("AD_Sequence",m_source.getTables());  Vector<Integer> v=new Vector<Integer>(sequenceTable.getContents().keySet());  java.util.Collections.sort(v);  for (Iterator<Integer> columnIterator=v.iterator(); columnIterator.hasNext(); ) {    Integer key=columnIterator.next();    DBObject_Table_Column sequenceColumn=(DBObject_Table_Column)sequenceTable.getContents().get(key);    String columnName=sequenceColumn.getName();    if (columnName.equalsIgnoreCase("AD_Sequence_ID") || columnName.equalsIgnoreCase("AD_Client_ID") || columnName.equalsIgnoreCase("AD_Org_ID")|| columnName.equalsIgnoreCase("CreatedBy")|| columnName.equalsIgnoreCase("UpdatedBy")|| columnName.equalsIgnoreCase("Name")|| columnName.equalsIgnoreCase("Description")|| columnName.equalsIgnoreCase("IncrementNo")|| columnName.equalsIgnoreCase("StartNo")|| columnName.equalsIgnoreCase("CurrentNext")|| columnName.equalsIgnoreCase("CurrentNextSys")|| columnName.equalsIgnoreCase("isTableId")) {      insertColumnNames.add(columnName);    }    if (columnName.equalsIgnoreCase("Updated") || columnName.equalsIgnoreCase("CurrentNext") || columnName.equalsIgnoreCase("CurrentNextSys")) {      updateColumnNames.add(columnName);    }    if (columnName.equalsIgnoreCase("AD_Sequence_ID")) {      updateWhereColumnNames.add(columnName);    }  }  PreparedStatementWrapper stmtInsertSequence=m_target.setPreparedStatement(s_dbEngine.sql_insertPreparedStatement(vendor,catalog,schema,"AD_Sequence",insertColumnNames));  PreparedStatementWrapper stmtUpdateSequence=m_target.setPreparedStatement(s_dbEngine.sql_updatePreparedStatement(vendor,catalog,schema,"AD_Sequence",updateColumnNames,updateWhereColumnNames));  PreparedStatementWrapper stmtLoadUnsequencedDocuments=m_target.setPreparedStatement(s_dbEngine.sqlAD_getUnsequencedDocuments(vendor,catalog,schema));  int adSequenceNextSys=0;  int adSequenceNextUser=0;  int adSequenceIncrement=0;  ArrayList<String> whereColumnNames=new ArrayList<String>();  whereColumnNames.add("name");  String sqlCommand=s_dbEngine.sql_selectPreparedStatement(vendor,catalog,schema,"AD_Sequence",whereColumnNames);  PreparedStatementWrapper pstmt=m_target.setPreparedStatement(sqlCommand);  m_target.setPreparedStatementString(pstmt,1,"AD_Sequence");  ResultSet rs=m_target.executeQuery(pstmt);  if (m_target.getResultSetNext(rs)) {    adSequenceIncrement=m_target.getResultSetInt(rs,"IncrementNo");  }  m_target.releaseResultSet(rs);  m_target.releasePreparedStatement(pstmt);  sqlCommand=s_dbEngine.sqlAD_getSequenceMaxUser(vendor,catalog,schema,"AD_Sequence","AD_Sequence_ID");  Statement stmt=m_target.setStatement();  rs=m_target.executeQuery(stmt,sqlCommand);  if (m_target.getResultSetNext(rs)) {    adSequenceNextUser=m_target.getResultSetInt(rs,"MAX_SEQ") + adSequenceIncrement;  }  m_target.releaseResultSet(rs);  m_target.releaseStatement(stmt);  sqlCommand=s_dbEngine.sqlAD_getSequenceMaxSystem(vendor,catalog,schema,"AD_Sequence","AD_Sequence_ID");  stmt=m_target.setStatement();  rs=m_target.executeQuery(stmt,sqlCommand);  if (m_target.getResultSetNext(rs)) {    adSequenceNextSys=m_target.getResultSetInt(rs,"MAX_SEQ") + adSequenceIncrement;  }  m_target.releaseResultSet(rs);  m_target.releaseStatement(stmt);  int ad_client_id=0;  String tableName="";  sqlCommand=s_dbEngine.sqlAD_getUnsequencedTables(vendor,catalog,schema);  stmt=m_target.setStatement();  rs=m_target.executeQuery(stmt,sqlCommand);  while (m_target.getResultSetNext(rs)) {    ad_client_id=m_target.getResultSetInt(rs,"AD_Client_ID");    tableName=m_target.getResultSetString(rs,"TableName");    int nextSeq=0;    if (ad_client_id < s_parameters.MINUSERLEVELID) {      nextSeq=adSequenceNextSys;      adSequenceNextSys+=adSequenceIncrement;    } else {      nextSeq=adSequenceNextUser;      adSequenceNextUser+=adSequenceIncrement;    }    for (int i=0; i < insertColumnNames.size(); i++) {      String columnName=insertColumnNames.get(i);      int parameterIndex=i + 1;      if (columnName.equalsIgnoreCase("AD_Sequence_ID")) {        m_target.setPreparedStatementInt(stmtInsertSequence,parameterIndex,nextSeq);      } else       if (columnName.equalsIgnoreCase("AD_Client_ID")) {        m_target.setPreparedStatementInt(stmtInsertSequence,parameterIndex,ad_client_id);      } else       if (columnName.equalsIgnoreCase("AD_Org_ID")) {        m_target.setPreparedStatementInt(stmtInsertSequence,parameterIndex,0);      } else       if (columnName.equalsIgnoreCase("CreatedBy")) {        m_target.setPreparedStatementInt(stmtInsertSequence,parameterIndex,0);      } else       if (columnName.equalsIgnoreCase("UpdatedBy")) {        m_target.setPreparedStatementInt(stmtInsertSequence,parameterIndex,0);      } else       if (columnName.equalsIgnoreCase("Name")) {        m_target.setPreparedStatementString(stmtInsertSequence,parameterIndex,tableName);      } else       if (columnName.equalsIgnoreCase("Description")) {        m_target.setPreparedStatementString(stmtInsertSequence,parameterIndex,tableName);      } else       if (columnName.equalsIgnoreCase("IncrementNo")) {        m_target.setPreparedStatementInt(stmtInsertSequence,parameterIndex,1);      } else       if (columnName.equalsIgnoreCase("StartNo")) {        m_target.setPreparedStatementInt(stmtInsertSequence,parameterIndex,1000000);      } else       if (columnName.equalsIgnoreCase("CurrentNext")) {        m_target.setPreparedStatementInt(stmtInsertSequence,parameterIndex,1000000);      } else       if (columnName.equalsIgnoreCase("CurrentNextSys")) {        m_target.setPreparedStatementInt(stmtInsertSequence,parameterIndex,100);      } else       if (columnName.equalsIgnoreCase("isTableId")) {        m_target.setPreparedStatementString(stmtInsertSequence,parameterIndex,"Y");      }    }    Integer sqlResult=m_target.executeUpdate(stmtInsertSequence,false);    if (sqlResult != null) {      logAddDetail(sqlResult,null);    }  }  m_target.releaseResultSet(rs);  m_target.releaseStatement(stmt);  String sqlLoadClients=s_dbEngine.sql_select(vendor,catalog,schema,"AD_Client");  stmt=m_target.setStatement();  ResultSet rsLoadClients=m_target.executeQuery(stmt,sqlLoadClients);  while (m_target.getResultSetNext(rsLoadClients)) {    ad_client_id=m_target.getResultSetInt(rsLoadClients,"AD_Client_ID");    m_target.setPreparedStatementInt(stmtLoadUnsequencedDocuments,1,ad_client_id);    ResultSet rsLoadDocuments=m_target.executeQuery(stmtLoadUnsequencedDocuments);    while (m_target.getResultSetNext(rsLoadDocuments)) {      tableName=m_target.getResultSetString(rsLoadDocuments,"TableName");      String documentName=new StringBuffer("DocumentNo_").append(tableName).toString();      String documentDescription=new StringBuffer("DocumentNo/Value for table ").append(tableName).toString();      int nextSeq=0;      if (ad_client_id < s_parameters.MINUSERLEVELID) {        nextSeq=adSequenceNextSys;        adSequenceNextSys+=adSequenceIncrement;      } else {        nextSeq=adSequenceNextUser;        adSequenceNextUser+=adSequenceIncrement;      }      for (int i=0; i < insertColumnNames.size(); i++) {        String columnName=insertColumnNames.get(i);        int parameterIndex=i + 1;        if (columnName.equalsIgnoreCase("AD_Sequence_ID")) {          m_target.setPreparedStatementInt(stmtInsertSequence,parameterIndex,nextSeq);        } else         if (columnName.equalsIgnoreCase("AD_Client_ID")) {          m_target.setPreparedStatementInt(stmtInsertSequence,parameterIndex,ad_client_id);        } else         if (columnName.equalsIgnoreCase("AD_Org_ID")) {          m_target.setPreparedStatementInt(stmtInsertSequence,parameterIndex,0);        } else         if (columnName.equalsIgnoreCase("CreatedBy")) {          m_target.setPreparedStatementInt(stmtInsertSequence,parameterIndex,0);        } else         if (columnName.equalsIgnoreCase("UpdatedBy")) {          m_target.setPreparedStatementInt(stmtInsertSequence,parameterIndex,0);        } else         if (columnName.equalsIgnoreCase("Name")) {          m_target.setPreparedStatementString(stmtInsertSequence,parameterIndex,documentName);        } else         if (columnName.equalsIgnoreCase("Description")) {          m_target.setPreparedStatementString(stmtInsertSequence,parameterIndex,documentDescription);        } else         if (columnName.equalsIgnoreCase("IncrementNo")) {          m_target.setPreparedStatementInt(stmtInsertSequence,parameterIndex,1);        } else         if (columnName.equalsIgnoreCase("StartNo")) {          m_target.setPreparedStatementInt(stmtInsertSequence,parameterIndex,1000000);        } else         if (columnName.equalsIgnoreCase("CurrentNext")) {          m_target.setPreparedStatementInt(stmtInsertSequence,parameterIndex,1000000);        } else         if (columnName.equalsIgnoreCase("CurrentNextSys")) {          m_target.setPreparedStatementInt(stmtInsertSequence,parameterIndex,1000000);        } else         if (columnName.equalsIgnoreCase("isTableId")) {          m_target.setPreparedStatementString(stmtInsertSequence,parameterIndex,"Y");        }      }      Integer sqlResult=m_target.executeUpdate(stmtInsertSequence,false);      if (sqlResult != null) {        logAddDetail(sqlResult,null);      }    }    m_target.releaseResultSet(rsLoadDocuments);  }  m_target.releaseResultSet(rsLoadClients);  m_target.releaseStatement(stmt);  whereColumnNames=new ArrayList<String>();  whereColumnNames.add("IsTableID");  sqlCommand=s_dbEngine.sql_selectPreparedStatement(vendor,catalog,schema,"AD_Sequence",whereColumnNames);  PreparedStatementWrapper stmtLoadSequences=m_target.setPreparedStatement(sqlCommand);  m_target.setPreparedStatementString(stmtLoadSequences,1,"Y");  ResultSet rsLoadSequences=m_target.executeQuery(stmtLoadSequences);  while (m_target.getResultSetNext(rsLoadSequences)) {    int ad_sequence_id=m_target.getResultSetInt(rsLoadSequences,"AD_Sequence_ID");    tableName=m_target.getResultSetString(rsLoadSequences,"Name");    String columnName=new StringBuffer(tableName).append("_ID").toString();    int incrementNo=m_target.getResultSetInt(rsLoadSequences,"IncrementNo");    long currentNext=m_target.getResultSetLong(rsLoadSequences,"CurrentNext");    long currentNextSys=m_target.getResultSetLong(rsLoadSequences,"CurrentNextSys");    ad_client_id=m_target.getResultSetInt(rsLoadSequences,"AD_Client_ID");    DBObject table=m_source.getObjectByName(tableName,m_source.getTables());    String checkVendor=m_source.getVendor();    if (table == null) {      table=m_target.getObjectByName(tableName,m_target.getTables());      checkVendor=m_target.getVendor();      if (table != null && table.getCustomizationLevel() == s_parameters.CUSTOMNONE)       table=null;    }    if (table != null) {      if (!hasTableColumn(table,columnName))       columnName="seqno";      if (hasTableColumn(table,columnName)) {        boolean isIDNumeric=false;        for (Iterator<Integer> colIterator=table.getContents().keySet().iterator(); colIterator.hasNext(); ) {          Integer key=colIterator.next();          DBObject_Table_Column col=(DBObject_Table_Column)table.getContents().get(key);          if (columnName.equalsIgnoreCase(col.getName())) {            int columnType=s_dbEngine.getDataTypeID(checkVendor,col.getType());            if (columnType < s_dbEngine.CHARTYPE_START)             isIDNumeric=true;          }        }        if (isIDNumeric) {          long maxUserSequence=0;          sqlCommand=s_dbEngine.sqlAD_getSequenceMaxUser(vendor,catalog,schema,tableName,columnName);          stmt=m_target.setStatement();          rs=m_target.executeQuery(stmt,sqlCommand);          if (m_target.getResultSetNext(rs)) {            maxUserSequence=m_target.getResultSetLong(rs,"MAX_SEQ");          }          m_target.releaseResultSet(rs);          m_target.releaseStatement(stmt);          if (maxUserSequence == 0)           maxUserSequence=1000000; else           maxUserSequence+=incrementNo;          long maxSysSequence=0;          sqlCommand=s_dbEngine.sqlAD_getSequenceMaxSystem(vendor,catalog,schema,tableName,columnName);          stmt=m_target.setStatement();          rs=m_target.executeQuery(stmt,sqlCommand);          if (m_target.getResultSetNext(rs)) {            maxSysSequence=m_target.getResultSetLong(rs,"MAX_SEQ");          }          m_target.releaseResultSet(rs);          m_target.releaseStatement(stmt);          if (maxSysSequence == 0)           maxSysSequence=100; else           maxSysSequence+=incrementNo;          String nativeSequenceName=new StringBuffer(tableName).append("_SEQ").toString().toUpperCase();          DBObject nativeSequenceObject=null;          DBObject_Sequence_Counter nativeSequenceCounter=null;          long nativeSequenceValue=0;          long checkSeq=0;          if (m_target.isObjectExists(nativeSequenceName,currentSequences)) {            nativeSequenceObject=m_target.getObjectByName(nativeSequenceName,currentSequences);            nativeSequenceCounter=(DBObject_Sequence_Counter)nativeSequenceObject.getContents().get(0);            nativeSequenceValue=nativeSequenceCounter.getCurrent();            if (ad_client_id < s_parameters.MINUSERLEVELID) {              checkSeq=currentNextSys;              if (maxSysSequence < nativeSequenceValue)               maxSysSequence=nativeSequenceValue;            } else {              checkSeq=currentNext;              if (maxUserSequence < nativeSequenceValue)               maxUserSequence=nativeSequenceValue;            }          }          if (isPreserveTableIDs()) {            long previousSystemSequence=0;            long previousUserSequence=0;            HashMap<String,Long> previousSequences=m_target.getSequenceSystem();            if (previousSequences.containsKey(tableName.toUpperCase()))             previousSystemSequence=previousSequences.get(tableName.toUpperCase());            if (maxSysSequence < previousSystemSequence)             maxSysSequence=previousSystemSequence;            previousSequences=m_target.getSequenceUser();            if (previousSequences.containsKey(tableName.toUpperCase()))             previousUserSequence=previousSequences.get(tableName.toUpperCase());            if (maxUserSequence < previousUserSequence)             maxUserSequence=previousUserSequence;          }          if (currentNext < maxUserSequence || currentNextSys < maxSysSequence || nativeSequenceValue != checkSeq) {            if (currentNext < maxUserSequence)             currentNext=maxUserSequence;            if (currentNextSys < maxSysSequence)             currentNextSys=maxSysSequence;            for (int i=0; i < updateColumnNames.size(); i++) {              String updateColumnName=updateColumnNames.get(i);              int parameterIndex=i + 1;              if (updateColumnName.equalsIgnoreCase("Updated")) {                m_target.setPreparedStatementTimestamp(stmtUpdateSequence,parameterIndex,new java.sql.Timestamp(System.currentTimeMillis()));              } else               if (updateColumnName.equalsIgnoreCase("CurrentNext")) {                m_target.setPreparedStatementLong(stmtUpdateSequence,parameterIndex,currentNext);              } else               if (updateColumnName.equalsIgnoreCase("CurrentNextSys")) {                m_target.setPreparedStatementLong(stmtUpdateSequence,parameterIndex,currentNextSys);              }            }            m_target.setPreparedStatementInt(stmtUpdateSequence,updateColumnNames.size() + 1,ad_sequence_id);            Integer sqlResult=m_target.executeUpdate(stmtUpdateSequence,false);            if (sqlResult != null) {              logUpdateDetail(sqlResult,null);            }            if (nativeSequenceObject != null) {              long nextSeq=currentNextSys;              if (ad_client_id >= s_parameters.MINUSERLEVELID)               nextSeq=currentNext;              if (nextSeq != nativeSequenceValue) {                nativeSequenceCounter.setCurrent(nextSeq);                if (nativeSequenceObject.update(nativeSequenceObject))                 logUpdateDetail(1,null);              }            }          }        }      }    }  }  m_target.releaseResultSet(rsLoadSequences);  m_target.releasePreparedStatement(stmtLoadSequences);  m_target.releasePreparedStatement(stmtInsertSequence);  m_target.releasePreparedStatement(stmtUpdateSequence);  m_target.releasePreparedStatement(stmtLoadUnsequencedDocuments);  m_target.releaseSavepoint(sp);  logResults();}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.STATECHART_SCOPE;}  }
class C{  @SafeVarargs public final GenericFastItemAdapter<Model,Item> addModel(int position,Model... models){  mItemAdapter.addModel(position,models);  return this;}  }
class C{  public static Coords scatterAssaultDrop(Coords coords,int margin){  int scatterDirection=Compute.d6(1) - 1;  int distance=Compute.d6(margin);  return coords.translated(scatterDirection,distance);}  }
class C{  private void populateValuesOfSwModule(){  if (baseSwModuleId == null) {    return;  }  editSwModule=Boolean.TRUE;  final SoftwareModule swModle=softwareManagement.findSoftwareModuleById(baseSwModuleId);  nameTextField.setValue(swModle.getName());  versionTextField.setValue(swModle.getVersion());  vendorTextField.setValue(swModle.getVendor() == null ? HawkbitCommonUtil.SP_STRING_EMPTY : HawkbitCommonUtil.trimAndNullIfEmpty(swModle.getVendor()));  descTextArea.setValue(swModle.getDescription() == null ? HawkbitCommonUtil.SP_STRING_EMPTY : HawkbitCommonUtil.trimAndNullIfEmpty(swModle.getDescription()));  if (swModle.getType().isDeleted()) {    typeComboBox.addItem(swModle.getType().getName());  }  typeComboBox.setValue(swModle.getType().getName());}  }
class C{  public ObjectFactory(){}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entities;  Node entityNode;  NamedNodeMap attrList;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  entities=docType.getEntities();  assertNotNull("entitiesNotNull",entities);  entityNode=entities.getNamedItem("ent1");  assertNotNull("ent1NotNull",entityNode);  attrList=entityNode.getAttributes();  assertNull("entityAttributesNull",attrList);}  }
class C{  public String thresholdTipText(){  return "Repeat xval if stdev of mean exceeds this value.";}  }
class C{  public static String generateTypeString(final TypeSubstitution typeSubstitution,final long operandValue){  final BaseType baseType=typeSubstitution.getBaseType();  final int totaBitOffset=(int)(operandValue) * 8 + typeSubstitution.getOffset();switch (baseType.getCategory()) {case STRUCT:    return renderStruct(baseType,totaBitOffset);case UNION:  return renderUnion(baseType,typeSubstitution.getMemberPath(),totaBitOffset);case ARRAY:return renderArray(baseType,totaBitOffset);case ATOMIC:case POINTER:return renderAtomic(baseType,totaBitOffset);default :return "";}}  }
class C{  void put(final MethodWriter owner,final ByteVector out,final int source,final boolean wideOffset){  if ((status & RESOLVED) == 0) {    if (wideOffset) {      addReference(-1 - source,out.length);      out.putInt(-1);    } else {      addReference(source,out.length);      out.putShort(-1);    }  } else {    if (wideOffset) {      out.putInt(position - source);    } else {      out.putShort(position - source);    }  }}  }
class C{  @Override public void undoRemove(Offer offer){  offers.remove(offer);  acceptedOffers.add(offer);  undoOfferRemoveStream.onNext(offer);}  }
class C{  private void onChanged(){  if (builder != null) {    message=null;  }  if (isClean && parent != null) {    parent.markDirty();    isClean=false;  }}  }
class C{  @Deprecated public void clearDiscCache(){  clearDiskCache();}  }
class C{  public void clearState(W window,Timers timers,StateAccessor<?> state) throws Exception {  FinishedTriggers finishedSet=readFinishedBits(state.access(FINISHED_BITS_TAG));  rootTrigger.invokeClear(contextFactory.base(window,timers,rootTrigger,finishedSet));}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  public DuplicateUserException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.VARIABLE___IS_CONST:    return isConst();case N4JSPackage.VARIABLE___GET_CONTAINING_MODULE:  return getContainingModule();}return super.eInvoke(operationID,arguments);}  }
class C{  public static <S extends HasDateChangedHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    DateChangedEvent event=new DateChangedEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public void dumpSecretKey(String dumpFileName){  dumpKeyToFile(dumpFileName);  updateFilePermissions(dumpFileName);}  }
class C{  public static SolverParameterGroup findByName(String name){  List list=(new SolverParameterGroupDAO()).getSession().createCriteria(SolverParameterGroup.class).add(Restrictions.eq("name",name)).list();  if (!list.isEmpty())   return (SolverParameterGroup)list.get(0);  return null;}  }
class C{  protected AdminResponse createResponse(DistributionManager dm){  return DurableClientInfoResponse.create(dm,this.getSender(),this);}  }
class C{  static void removeTopLevelWindow(Window w){synchronized (topLevelWindows) {    if (topLevelWindows.contains(w)) {      topLevelWindows.removeElement(w);      if (topLevelWindowListener != null) {        topLevelWindowListener.topLevelWindowDestroyed(w);      }    }  }}  }
class C{  public void testDoubleValuePosRounded1(){  byte[] a={-128,1,2,3,4,5,60,23,1,-3,-5};  int aSign=1;  double result=1.54747264387948E26;  double aNumber=new BigInteger(aSign,a).doubleValue();  assertTrue(aNumber == result);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("MaintenanceMode"))     p_MaintenanceMode=(String)para[i].getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_AD_Language_ID=getRecord_ID();}  }
class C{  public static void branchWithCommit(GitRepository repository,String name){  GitScenarios.branchWithCommit(repository,name,"branch_file.txt","branch content",true);}  }
class C{  @SuppressWarnings("unchecked") private static <T extends Throwable>RuntimeException throwUnchecked(Throwable t) throws T {  throw (T)t;}  }
class C{  public static boolean isValid(String version){  try {    new SoftwareVersion(version);    return true;  } catch (  InvalidSoftwareVersionException e) {    return false;  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    double multiplier=Math.PI / 180;    if (inputFile.getZUnits().toLowerCase().contains("rad")) {      multiplier=1;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.sin(z * multiplier));        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void updateRangeDisplayForAmmo(Mounted mAmmo){  if (!(mAmmo.getType() instanceof AmmoType)) {    return;  }  AmmoType atype=(AmmoType)mAmmo.getType();  if (atype.getAmmoType() == AmmoType.T_ATM) {    if (atype.getMunitionType() == AmmoType.M_EXTENDED_RANGE) {      wMinR.setText("4");      wShortR.setText("1 - 9");      wMedR.setText("10 - 18");      wLongR.setText("19 - 27");      wExtR.setText("28 - 36");    } else     if (atype.getMunitionType() == AmmoType.M_HIGH_EXPLOSIVE) {      wMinR.setText("---");      wShortR.setText("1 - 3");      wMedR.setText("4 - 6");      wLongR.setText("7 - 9");      wExtR.setText("10 - 12");    } else {      wMinR.setText("4");      wShortR.setText("1 - 5");      wMedR.setText("6 - 10");      wLongR.setText("11 - 15");      wExtR.setText("16 - 20");    }  } else   if (atype.getAmmoType() == AmmoType.T_MML) {    if (atype.hasFlag(AmmoType.F_MML_LRM)) {      wMinR.setText("6");      wShortR.setText("1 - 7");      wMedR.setText("8 - 14");      wLongR.setText("15 - 21");      wExtR.setText("21 - 28");    } else {      wMinR.setText("---");      wShortR.setText("1 - 3");      wMedR.setText("4 - 6");      wLongR.setText("7 - 9");      wExtR.setText("10 - 12");    }  } else   if (atype.getAmmoType() == AmmoType.T_IATM) {    if (atype.getMunitionType() == AmmoType.M_EXTENDED_RANGE) {      wMinR.setText("4");      wShortR.setText("1 - 9");      wMedR.setText("10 - 18");      wLongR.setText("19 - 27");      wExtR.setText("28 - 36");    } else     if (atype.getMunitionType() == AmmoType.M_HIGH_EXPLOSIVE) {      wMinR.setText("---");      wShortR.setText("1 - 3");      wMedR.setText("4 - 6");      wLongR.setText("7 - 9");      wExtR.setText("10 - 12");    } else     if (atype.getMunitionType() == AmmoType.M_IATM_IIW) {      wMinR.setText("4");      wShortR.setText("1 - 5");      wMedR.setText("6 - 10");      wLongR.setText("11 - 15");      wExtR.setText("16 - 20");    } else     if (atype.getMunitionType() == AmmoType.M_IATM_IMP) {      wMinR.setText("---");      wShortR.setText("1 - 3");      wMedR.setText("4 - 6");      wLongR.setText("7 - 9");      wExtR.setText("10 - 12");    } else {      wMinR.setText("4");      wShortR.setText("1 - 5");      wMedR.setText("6 - 10");      wLongR.setText("11 - 15");      wExtR.setText("16 - 20");    }  }  if (mAmmo.isHotLoaded()) {    wMinR.setText("---");  }  onResize();}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  @Override public Object valueFromObject(Object object,DatabaseField field,AbstractSession session) throws DescriptorException {  Object attributeValue=getAttributeValueFromObject(object);  if (attributeValue == null) {    if (isNullAllowed()) {      return null;    } else {      throw DescriptorException.nullForNonNullAggregate(object,this);    }  } else {    return getObjectBuilder(attributeValue,session).extractValueFromObjectForField(attributeValue,field,session);  }}  }
class C{  private void updateTreeViewer(List<Object> elements){  for (  Object element : elements) {    TreeElement<?,?> parent=((TreeElement<?,?>)element).getParent();    if (parent != null)     treeViewer.setExpandedState(parent,true);    treeViewer.update(element,null);  }}  }
class C{  public List<URI> load() throws SAXException, IOException {  final InputStream in=getClass().getResourceAsStream(uri.getPath());  if (in == null) {    throw new FileNotFoundException("Cannot find resource: " + uri.getPath());  }  try {    return load(in);  }  finally {    in.close();  }}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws NotSerializableException {  throw new NotSerializableException("Not serializable.");}  }
class C{  public static SQLException createSQLFeatureNotSupportedException() throws SQLException {  SQLException newEx;  if (Util.isJdbc4()) {    newEx=(SQLException)Util.getInstance("java.sql.SQLFeatureNotSupportedException",null,null,null);  } else {    newEx=new NotImplemented();  }  return newEx;}  }
class C{  public static File bundlePool(){  return defOverride(ROOT + "/shared-bundles",override_bundlePool);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public static boolean isMultipleOf8AndGT0(long v){  return (((v & 0X7L) == 0L) && (v > 0L));}  }
class C{  @Override public void initialize() throws ReplicatorException, InterruptedException {  logger.info("Initializing data source files: service=" + serviceName + " directory="+ directory);  commitSeqno.initialize();}  }
class C{  public Bundler(){  this(null);}  }
class C{  private static void createCorruptedLibFile() throws IOException {  File libFile=new File(System.getProperty("java.io.tmpdir"),LOADED_LIB_FILE_NAME);  if (libFile.exists() && !libFile.delete())   throw new IllegalStateException("Could not delete loaded lib file.");  libFile.deleteOnExit();  if (!libFile.createNewFile())   throw new IllegalStateException("Could not create new file.");  try (FileOutputStream out=new FileOutputStream(libFile)){    out.write("Corrupted file information instead of good info.\n".getBytes());  } }  }
class C{  @Override public void respond(String response){  getChannel().send().message(getUser(),response);}  }
class C{  protected Type parseType() throws SyntaxError, IOException {  Type t;switch (token) {case IDENT:    t=Type.tClass(parseName(false).id);  break;case VOID:scan();t=Type.tVoid;break;case BOOLEAN:scan();t=Type.tBoolean;break;case BYTE:scan();t=Type.tByte;break;case CHAR:scan();t=Type.tChar;break;case SHORT:scan();t=Type.tShort;break;case INT:scan();t=Type.tInt;break;case FLOAT:scan();t=Type.tFloat;break;case LONG:scan();t=Type.tLong;break;case DOUBLE:scan();t=Type.tDouble;break;default :env.error(pos,"type.expected");throw new SyntaxError();}return parseArrayBrackets(t);}  }
class C{  public Matrix div(final double scalar){  final Matrix result=new Matrix(rows(),cols());  if (addr.isContiguous()) {    for (int addr=0; addr < size(); addr++) {      result.$[addr]=this.$[addr] / scalar;    }  } else {    int addr=0;    final Address.MatrixAddress.MatrixOffset src=this.addr.offset();    for (int row=0; row < rows(); row++) {      src.setRow(row);      for (int col=0; col < cols(); col++) {        result.$[addr]=this.$[src.op()] / scalar;        addr++;        src.nextCol();      }    }  }  return result;}  }
class C{  private static int CallNonvirtualIntMethod(JNIEnvironment env,int objJREF,int classJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualIntMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(obj,methodID,TypeReference.Int,true);    return Reflection.unwrapInt(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  private boolean isInSameRow(Component source,Component dest){  return Rectangle.intersects(0,source.getAbsoluteY(),Integer.MAX_VALUE,source.getHeight(),dest.getAbsoluteX(),dest.getAbsoluteY(),dest.getWidth(),dest.getHeight());}  }
class C{  public boolean isOptOut(){  configuration.load();  return configuration.get(Configuration.CATEGORY_GENERAL,"opt-out",false).getBoolean(false);}  }
class C{  public long skip(long n) throws IOException {  return in.skip(n);}  }
class C{  public byte[] toBytes(){  byte[] buf=new byte[PACKET_SIZE];  int off=0;  off=U.longToBytes(origNodeId.getLeastSignificantBits(),buf,off);  off=U.longToBytes(origNodeId.getMostSignificantBits(),buf,off);  off=U.longToBytes(targetNodeId.getLeastSignificantBits(),buf,off);  off=U.longToBytes(targetNodeId.getMostSignificantBits(),buf,off);  off=U.longToBytes(origTs,buf,off);  off=U.longToBytes(replyTs,buf,off);  assert off == PACKET_SIZE;  return buf;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","ldxy");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  private void compileSpec(){  log(" === Creating parser  (Specification = " + this.spec + " Directory = "+ this.specdir+ ")",Project.MSG_INFO);  Javac jsct=new Javac();  jsct.setProject(this.getProject());  jsct.setSrcdir(new Path(this.getProject(),specdir));  jsct.setIncludes(getSpecRelativePath());  jsct.setClasspath(classpath);  jsct.setDestdir(new File(destdir));  jsct.execute();}  }
class C{  public void addEqualValue(String column,Object value){  equalMap.put(column,value);}  }
class C{  void ideSetupP2() throws Exception {  if (p2isClean()) {    return;  }  File ideDir=getIdeDir();  FileMisc.cleanDir(ideDir);  P2Model p2cached=new P2Model();  p2cached.addArtifactRepoBundlePool();  p2cached.copyFrom(p2);  DirectorApp app=p2cached.directorApp(ideDir,"OomphIde");  app.consolelog();  app.bundlepool(GoomphCacheLocations.bundlePool());  app.platform(SwtPlatform.getRunning());  directorModifier.execute(app);  app.runUsingBootstrapper(project);  writeBrandingPlugin(ideDir);  setupEclipseIni(ideDir);  FileMisc.writeToken(ideDir,STALE_TOKEN,p2state());}  }
class C{  private void updateStateView(int itCount,Collection<Individual<Double>> gen){  Platform.runLater(null);  simPaneCtrl.waitAfterStep();}  }
class C{  private void calculateScale(){  scale=maxRepresentation / maxValue;}  }
class C{  public void deallocateType(ItemStack drive,ItemStack item){  NBTTagCompound prototype=createPrototype(item);  int idx=findDataIndexForPrototype(drive,prototype);  if (idx != -1) {    ItemStacks.getCompoundList(drive,"Data").removeTag(idx);    markDirty(drive);  }}  }
class C{  public void testDelim() throws Exception {  byte[] delim="aabb".getBytes(ASCII);  List<String> strs=Arrays.asList("za","zaa","zaab","zab","zaabaababbbbabaab");  int buffSize=0;  for (  String str : strs)   buffSize+=str.length() + delim.length;  ByteBuffer buff=ByteBuffer.allocate(buffSize);  for (  String str : strs) {    buff.put(str.getBytes(ASCII));    buff.put(delim);  }  buff.flip();  byte[] msg;  GridNioDelimitedBuffer delimBuff=new GridNioDelimitedBuffer(delim);  List<String> res=new ArrayList<>(strs.size());  while ((msg=delimBuff.read(buff)) != null)   res.add(new String(msg,ASCII));  assertEquals(strs,res);}  }
class C{  public final void invert(){  for (int i=0; i < length; i++) {    this.values[i]*=-1.0;  }}  }
class C{  private static void verifyMarkdownContainsFieldsInTables(File doc,Map<String,Set<String>> fieldsByTable) throws IOException {  final List<String> lines=Files.readAllLines(doc.toPath(),Charset.defaultCharset());  final Map<String,Set<String>> fieldsLeftByTable=Maps.newHashMap();  for (  Map.Entry<String,Set<String>> entry : fieldsByTable.entrySet()) {    fieldsLeftByTable.put(entry.getKey(),Sets.newHashSet(entry.getValue()));  }  String inTable=null;  for (  String line : lines) {    if (fieldsLeftByTable.isEmpty()) {      return;    }    final String currentHeader=getTableHeader(line);    if (inTable == null || currentHeader != null) {      inTable=currentHeader;    }    if (inTable != null && fieldsLeftByTable.containsKey(inTable)) {      String[] parts=line.split("\\|");      if (parts.length > 1) {        final String fieldName=parts[1];        final Set<String> fieldsLeft=fieldsLeftByTable.get(inTable);        Iterator<String> fieldIt=fieldsLeft.iterator();        while (fieldIt.hasNext()) {          String fieldLeft=fieldIt.next();          if (fieldName.contains(fieldLeft))           fieldIt.remove();        }        if (fieldsLeft.isEmpty()) {          fieldsLeftByTable.remove(inTable);        }      }    }  }  if (!fieldsLeftByTable.isEmpty()) {    fail(String.format("Markdown file '%s' did not contain expected fields (by table): %s",doc,fieldsLeftByTable));  }}  }
class C{  public void useVertexColors(boolean value){  if (value != mUseVertexColors) {    mIsDirty=true;    mUseVertexColors=value;  }}  }
class C{  void updateCache(IgniteInternalCache<Object,Object> cache) throws IgniteCheckedException {  if (!F.isEmpty(rmvs))   cache.removeAll(rmvs);  if (!F.isEmpty(updates))   cache.putAll(updates);}  }
class C{  @Nullable public static String boxIfPossible(final String type){  if (type == null)   return null;  final String s=ourBoxedTypes.get(type);  return s == null ? type : s;}  }
class C{  public KeyStoreHistory(KeyStore keyStore,String name,Password password,Provider explicitProvider){  this.name=name;  this.explicitProvider=explicitProvider;  KeyStoreType type=KeyStoreType.resolveJce(keyStore.getType());  if (type.isFileBased()) {    initialState=new KeyStoreState(this,keyStore,password);  } else {    initialState=new AlwaysIdenticalKeyStoreState(this,keyStore,password);  }  currentState=initialState;}  }
class C{  public BinarySearchTree(boolean selfBalancing){  this.root=null;  this.size=0;  this.selfBalancing=selfBalancing;}  }
class C{  void simpleCRUD(){  Todo todo=new Todo();  todo.title="buy";  todo.content="milk banana apple";  todo.createdTime=new Date();  orma.insertIntoTodo(todo);  todo=orma.selectFromTodo().titleEq("buy").value();  Log.d(TAG,"selectFromTodo: " + todo.id);  orma.updateTodo().titleEq("buy").done(true).execute();  orma.deleteFromTodo().doneEq(true).execute();}  }
class C{  public boolean isUnicode(){  return isUnicode;}  }
class C{  public static String stringArrayToIndentedString(String[] A,int indent){  if (A.length == 0) {    return A[0];  }  String result=A[0];  for (int i=1; i < A.length; i++) {    result=result + "\n" + StringHelper.copyString(" ",indent)+ A[i];  }  return result;}  }
class C{  private void thereCanBeOnlyOne(String xpath,String section){  NodeList lst=config.getNodeList(xpath,false);  if (1 < lst.getLength())   throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,lst.getLength() + " instances of " + section+ " found in solr.xml");}  }
class C{  public Matrix4f normalize3x3(){  return normalize3x3(this);}  }
class C{  private void recordExchangeTime(Peer peer,Date exchangeTime){  BluetoothDevice device=peer.getNetwork().getBluetoothDevice();  if (device == null) {    log.error("Recording exchange time of non-bluetooth peer! Can't do it.");    return;  } else {    exchangeTimes.put(device.getAddress(),exchangeTime);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void main(String... ignore) throws Throwable {  new JavaDocExamplesTest().run();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_MONITOR,Role.TENANT_ADMIN},acls={ACL.ANY}) public CinderQosDetail createQoS(@PathParam("tenant_id") String openstackTenantId,CinderQosCreateRequest param,@Context HttpHeaders header){  _log.debug("START create QoS");  throw new UnsupportedOperationException();}  }
class C{  public static void writeStringToFile(File file,String s,String charset) throws IOException {  writeStringToFile(file,s,charset,false);}  }
class C{  public static void mount(FileSystem fs,Path mountPoint) throws IOException {  mount(fs,mountPoint,false,false,null);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:38:21.802 -0400",hash_original_method="AAC17ED6F21DB1AA39943BA358CCD6BE",hash_generated_method="873117076B828C3677075711DA431F87") protected void finalize() throws Throwable {  if (mVocabulary != 0 || mRecognizer != 0) {    destroy();    throw new IllegalStateException("someone forgot to destroy Recognizer");  }}  }
class C{  protected boolean resetWithShake(UIAcceleration acceleration){  if (!mIsShakeResetEnabled || !mIsResetEnabled || this.isLocked()|| mIsValidForCameraAnimation|| mIsValidForTransition)   return false;  boolean result=false;  long currentTime=System.currentTimeMillis();  if ((currentTime - mShakeData.lastTime) > PLConstants.kShakeDiffTime) {    long diffTime=(currentTime - mShakeData.lastTime);    mShakeData.lastTime=currentTime;    mShakeData.shakePosition.setValues(acceleration);    float speed=Math.abs(mShakeData.shakePosition.x + mShakeData.shakePosition.y + mShakeData.shakePosition.z - mShakeData.shakeLastPosition.x - mShakeData.shakeLastPosition.y - mShakeData.shakeLastPosition.z) / diffTime * 10000;    if (speed > mShakeThreshold) {      boolean isNotCancelable=true;      if (mListener != null)       isNotCancelable=mListener.onShouldReset(this);      if (isNotCancelable) {        this.reset();        if (mListener != null)         mListener.onDidReset(this);        result=true;      }    }    mShakeData.shakeLastPosition.setValues(mShakeData.shakePosition);  }  return result;}  }
class C{  public KMLFolder(String namespaceURI){  super(namespaceURI);}  }
class C{  public static String nowDateString(){  return nowDateString("yyyyMMddHHmmss");}  }
class C{  public void enableQueue(){}  }
class C{  public Lint augment(Attribute.Compound attr){  return augmentor.augment(this,attr);}  }
class C{  @AndroidOnly("Uses specific classes: " + "org.apache.harmony.security.asn1.ASN1OctetString, " + "org.apache.harmony.security.asn1.ASN1Integer.") public void testClone(){  X509CRLSelector selector=new X509CRLSelector();  X500Principal iss1=new X500Principal("O=First Org.");  X500Principal iss2=new X500Principal("O=Second Org.");  X500Principal iss3=new X500Principal("O=Third Org.");  BigInteger minCRL=new BigInteger("10000");  BigInteger maxCRL=new BigInteger("10000");  Date date=new Date(200);  selector.addIssuer(iss1);  selector.addIssuer(iss2);  selector.setMinCRLNumber(minCRL);  selector.setMaxCRLNumber(maxCRL);  selector.setDateAndTime(date);  X509CRLSelector clone=(X509CRLSelector)selector.clone();  TestCRL crl=new TestCRL(iss1);  crl.setCrlNumber(minCRL);  crl.setUpdateDates(new Date(200),new Date(200));  assertTrue("The specified CRL should match the clone selector.",selector.match(crl));  clone.addIssuer(iss3);  assertFalse("The changes of the clone selector should not cause " + "the changes of initial object",selector.getIssuerNames().size() == 3);}  }
class C{  final int nextInt(int n){  long r=nextInt() >>> 1;  r=(r * n) >> 31;  return (int)r;}  }
class C{  public void parse(String systemId) throws SAXException, IOException {  parse(new InputSource(systemId));}  }
class C{  public String numFoldsTipText(){  return "Determines the amount of data used for reduced-error pruning. " + " One fold is used for pruning, the rest for growing the tree.";}  }
class C{  public static UserInfo create(String address,String alias,int gender,int age,int height,int weight,int type) throws IllegalArgumentException {  if (address == null || address.length() == 0 || alias == null || alias.length() == 0 || gender < 0 || age <= 0 || weight <= 0 || type < 0) {    throw new IllegalArgumentException("Invalid parameters");  }  try {    return new UserInfo(address,alias,gender,age,height,weight,type);  } catch (  Exception ex) {    throw new IllegalArgumentException("Illegal user info data",ex);  }}  }
class C{  public static Typeface robotoMediumItalic(Context context){  sRobotoMediumItalic=getFontFromRes(R.raw.roboto_mediumitalic,context);  return sRobotoMediumItalic;}  }
class C{  public int convertIndexToCharacterCode(final String glyph,int index){  int index2=-1;  final int rawIndex=index;  int format=CMAPformats[formatToUse];  final boolean debugMapping=false;  if (debugMapping) {    System.out.println(glyph + " fontMapping=" + fontMapping+ " index="+ index+ ' '+ remapType4);  }  if ((fontMapping == 1 || fontMapping == 2 || fontMapping == 3 || (fontMapping == 4 && remapType4))) {    if (glyph != null && !"notdef".equals(glyph)) {      index2=index;      index=StandardFonts.getAdobeMap(glyph);    } else     if (exceptions.containsKey(glyph)) {      index=exceptions.get(glyph);    }  }  int value=-1;  if (rawIndex == 128 && endCode != null && "Euro".equals(glyph)) {    value=getFormat4Value(8364,value);  } else   if (format == 0) {    if (index > 255) {      index=0;    }    value=glyphIndexToChar[formatToUse][index];    if (value == 0 && index2 != -1) {      value=glyphIndexToChar[formatToUse][index2];    }    if (value == 0) {      final int format4Value=getFormat4Value(index,0);      if (format4Value > 0) {        value=format4Value;      }    }  } else   if (format == 4) {    value=getFormat4Value(index,value);    if (value == -1) {      if (index > 0xf000) {        value=getFormat4Value(index - 0xf000,value);      } else {        value=getFormat4Value(index + 0xf000,value);      }    }    if (value == -1) {      value=getFormat4Value(rawIndex + 0xf000,value);    }  } else   if (format == 12) {    value=getFormat12Value(index,debugMapping,value);  }  if (value == -1 && hasSix) {    index=rawIndex;    format=6;  }  if (format == 6) {    if (fontEncoding != 1) {      index=StandardFonts.lookupCharacterIndex(glyph,StandardFonts.MAC);    }    if (index >= f6glyphIdArray.length) {      value=0;    } else {      value=f6glyphIdArray[index];    }  }  if (debugMapping) {    System.out.println("returns " + value + ' '+ this);  }  return value;}  }
class C{  public void writeBatch() throws IOException {  if (getRetrieval() == INCREMENTAL)   throw new IOException("Batch and incremental saving cannot be mixed.");  if (getInstances() == null)   throw new IOException("No instances to save");  setRetrieval(BATCH);  if (m_objectstream == null)   throw new IOException("No output for serialization.");  setWriteMode(WRITE);  m_objectstream.writeObject(getInstances());  m_objectstream.flush();  m_objectstream.close();  setWriteMode(WAIT);  resetWriter();  setWriteMode(CANCEL);}  }
class C{  public synchronized int goOnline(int portFrom,int portTo){  for (int i=portFrom; !isOnline() && i <= portTo; ++i) {    try {      serverSocket=new ServerSocket(i);      listenThread=new ListenThread();      listenThread.start();      port=i;      Logger.debug(getClass().getName() + "#goOnline","port " + port + ", "+ name);    } catch (    BindException e) {    }catch (    IOException e) {    }  }  if (!isOnline())   return -1;  try {    if (boxes.get(name) == null)     addAgent(this,null,null);  } catch (  LaunchImpossibleException e) {    Logger.panic(getClass().getName() + "#goOnline",null,e);    System.exit(1);  }  return port;}  }
class C{  public SolrQuery addHighlightField(String f){  this.add(HighlightParams.FIELDS,f);  this.set(HighlightParams.HIGHLIGHT,true);  return this;}  }
class C{  public static ValueTimestamp fromDateValueAndNanos(long dateValue,long timeNanos){  return (ValueTimestamp)cache(new ValueTimestamp(dateValue,timeNanos));}  }
class C{  public static void createNativeCallgraphEdges(final CConnection connection,final int rawModuleId,final int moduleId) throws SQLException {  Preconditions.checkNotNull(connection,"IE01870: connection argument can not be null");  final String query=" { call create_native_callgraph_edges(?, ?) } ";  final CallableStatement call=connection.getConnection().prepareCall(query);  call.setInt(1,rawModuleId);  call.setInt(2,moduleId);  call.execute();}  }
class C{  static final public String binary(int what){  return binary(what,32);}  }
class C{  public static File open(@NonNull File dir,@NonNull String name){  return new File(dir,name);}  }
class C{  protected boolean isMessageSeen() throws MessagingException {  return getMessageIn().isSet(Flags.Flag.SEEN);}  }
class C{  private String unicode(char ch){  return Integer.toString(ch);}  }
class C{  public void remove(String cacheName){  assert grid(0).cache(cacheName).get(KEY_VAL) != null;  grid(0).cache(cacheName).remove(KEY_VAL);}  }
class C{  @Override public void process(K tuple){  out1.emit(cloneKey(tuple));  out2.emit(cloneKey(tuple));}  }
class C{  public MMatchPO(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  public Projection create(Properties props) throws ProjectionException {  try {    LatLonPoint llp=convertToLLP((Point2D)props.get(ProjectionFactory.CENTER));    float scale=PropUtils.floatFromProperties(props,ProjectionFactory.SCALE,10000000);    int height=PropUtils.intFromProperties(props,ProjectionFactory.HEIGHT,100);    int width=PropUtils.intFromProperties(props,ProjectionFactory.WIDTH,100);    return new Orthographic(llp,scale,width,height);  } catch (  Exception e) {    if (Debug.debugging("proj")) {      Debug.output("OrthographicLoader: problem creating Orthographic projection " + e.getMessage());    }  }  throw new ProjectionException("OrthographicLoader: problem creating Orthographic projection");}  }
class C{  public DERGeneralizedTime(String time){  this.time=Strings.toByteArray(time);  try {    this.getDate();  } catch (  ParseException e) {    throw new IllegalArgumentException("invalid date string: " + e.getMessage());  }}  }
class C{  public static boolean isFloatingCategory(ClassNode type){  return type == float_TYPE || type == double_TYPE;}  }
class C{  public static void main(final String[] args) throws IOException {  String projectId=System.getProperty("projectId");  if (projectId == null || projectId.isEmpty()) {    System.err.println("The projectId property must be set.");    System.exit(1);  }  System.out.printf("projectId: %s\n",projectId);  String queryString=System.getProperty("query");  if (queryString == null || queryString.isEmpty()) {    System.out.println("The query property was not set, using default.");    queryString=DEFAULT_QUERY;  }  System.out.printf("query: %s\n",queryString);  String waitTimeString=System.getProperty("waitTime");  if (waitTimeString == null || waitTimeString.isEmpty()) {    waitTimeString="1000";  }  long waitTime=Long.parseLong(waitTimeString);  System.out.printf("waitTime: %d (milliseconds)\n",waitTime);  if (waitTime > TEN_SECONDS_MILLIS) {    System.out.println("WARNING: If the query is going to take longer than 10 seconds to complete, use an" + " asynchronous query.");  }  String useLegacySqlString=System.getProperty("useLegacySql");  if (useLegacySqlString == null || useLegacySqlString.isEmpty()) {    useLegacySqlString="false";  }  boolean useLegacySql=Boolean.parseBoolean(useLegacySqlString);  Iterator<GetQueryResultsResponse> pages=run(projectId,queryString,waitTime,useLegacySql);  while (pages.hasNext()) {    BigQueryUtils.printRows(pages.next().getRows(),System.out);  }}  }
class C{  private void buildDescription(){  final Label label=new Label(this.shell,SWT.NONE);  final GridData gridData=new GridData(GridData.FILL,GridData.BEGINNING,true,false,4,1);  gridData.verticalIndent=5;  gridData.horizontalIndent=5;  label.setLayoutData(gridData);  final Font bold=SWTGraphicUtil.buildFontFrom(label,SWT.BOLD);  label.setFont(bold);  SWTGraphicUtil.addDisposer(label,bold);  if (this.description == null || this.description.trim().equals("")) {    label.setText(" ");  } else {    label.setText(this.description);  }}  }
class C{  public void removeAdapter(RecyclerView.Adapter adapter){  for (int i=mAdapters.size() - 1; i >= 0; i--) {    LocalAdapter local=mAdapters.get(i);    if (local.mAdapter.equals(adapter)) {      removeAdapter(mAdapters.indexOf(local));    }  }}  }
class C{  @Hidden static Object invoke__L(MethodHandle mh,Object[] a) throws Throwable {  assert (arityCheck(0,mh,a));  return mh.invokeBasic();}  }
class C{  public static PropertyAccessException convertProperty(RecognitionException e,String expression,boolean addPleaseCheck,EsperEPL2GrammarParser parser){  UniformPair<String> pair=convert(e,expression,addPleaseCheck,parser);  return new PropertyAccessException(pair.getFirst(),pair.getSecond());}  }
class C{  public AsyncMultiRead(ComStmtPrepare comStmtPrepare,int nbResult,int sendCmdCounter,Protocol protocol,boolean readPrepareStmtResult,AbstractMultiSend bulkSend,int paramCount,int resultSetScrollType,boolean binaryProtocol,ExecutionResult executionResult,List<ParameterHolder[]> parametersList,List<String> queries,PrepareResult prepareResult){  this.comStmtPrepare=comStmtPrepare;  this.nbResult=nbResult;  this.sendCmdCounter=sendCmdCounter;  this.protocol=protocol;  this.readPrepareStmtResult=readPrepareStmtResult;  this.bulkSend=bulkSend;  this.paramCount=paramCount;  this.resultSetScrollType=resultSetScrollType;  this.binaryProtocol=binaryProtocol;  this.executionResult=executionResult;  this.parametersList=parametersList;  this.queries=queries;  this.asyncMultiReadResult=new AsyncMultiReadResult(prepareResult);}  }
class C{  public static boolean demo3(Sproblem Prob){  Scs A, C, W=null, WW, WT, E=null, W2;  int n, k, Li[], Lp[], Wi[], Wp[], p1, p2, p[]=null;  boolean ok;  float b[], x[], resid[], y[]=null, Lx[], Wx[], s, t, t1;  Scss S=null;  Scsn N=null;  if (Prob == null || Prob.sym == 0 || Prob.A.n == 0)   return (false);  A=Prob.A;  C=Prob.C;  b=Prob.b;  x=Prob.x;  resid=Prob.resid;  n=A.n;  if (Prob.sym == 0 || n == 0)   return (true);  rhs(x,b,n);  System.out.print("\nchol then update/downdate ");  print_order(1);  y=new float[n];  t=tic();  S=Scs_schol.cs_schol(1,C);  System.out.print(String.format("\nsymbolic chol time %8.2f ms\n",toc(t)));  t=tic();  N=Scs_chol.cs_chol(C,S);  System.out.print(String.format("numeric  chol time %8.2f ms\n",toc(t)));  if (S == null || N == null)   return (false);  t=tic();  Scs_ipvec.cs_ipvec(S.pinv,b,y,n);  Scs_lsolve.cs_lsolve(N.L,y);  Scs_ltsolve.cs_ltsolve(N.L,y);  Scs_pvec.cs_pvec(S.pinv,y,x,n);  System.out.print(String.format("solve    chol time %8.2f ms\n",toc(t)));  System.out.println("original: ");  print_resid(true,C,x,b,resid);  k=n / 2;  W=Scs_util.cs_spalloc(n,1,n,true,false);  Lp=N.L.p;  Li=N.L.i;  Lx=N.L.x;  Wp=W.p;  Wi=W.i;  Wx=W.x;  Wp[0]=0;  p1=Lp[k];  Wp[1]=Lp[k + 1] - p1;  s=Lx[p1];  Random r=new Random(1);  for (; p1 < Lp[k + 1]; p1++) {    p2=p1 - Lp[k];    Wi[p2]=Li[p1];    Wx[p2]=s * r.nextFloat();  }  t=tic();  ok=Scs_updown.cs_updown(N.L,+1,W,S.parent);  t1=toc(t);  System.out.print(String.format("update:   time: %8.2f ms\n",t1));  if (!ok)   return (false);  t=tic();  Scs_ipvec.cs_ipvec(S.pinv,b,y,n);  Scs_lsolve.cs_lsolve(N.L,y);  Scs_ltsolve.cs_ltsolve(N.L,y);  Scs_pvec.cs_pvec(S.pinv,y,x,n);  t=toc(t);  p=Scs_pinv.cs_pinv(S.pinv,n);  W2=Scs_permute.cs_permute(W,p,null,true);  WT=Scs_transpose.cs_transpose(W2,true);  WW=Scs_multiply.cs_multiply(W2,WT);  WT=null;  W2=null;  E=Scs_add.cs_add(C,WW,1,1);  WW=null;  if (E == null || p == null)   return (false);  System.out.print(String.format("update:   time: %8.2f ms(incl solve) ",t1 + t));  print_resid(true,E,x,b,resid);  N=null;  t=tic();  N=Scs_chol.cs_chol(E,S);  if (N == null)   return (false);  Scs_ipvec.cs_ipvec(S.pinv,b,y,n);  Scs_lsolve.cs_lsolve(N.L,y);  Scs_ltsolve.cs_ltsolve(N.L,y);  Scs_pvec.cs_pvec(S.pinv,y,x,n);  t=toc(t);  System.out.print(String.format("rechol:   time: %8.2f ms(incl solve) ",t));  print_resid(true,E,x,b,resid);  t=tic();  ok=Scs_updown.cs_updown(N.L,-1,W,S.parent);  t1=toc(t);  if (!ok)   return (false);  System.out.print(String.format("downdate: time: %8.2f\n",t1));  t=tic();  Scs_ipvec.cs_ipvec(S.pinv,b,y,n);  Scs_lsolve.cs_lsolve(N.L,y);  Scs_ltsolve.cs_ltsolve(N.L,y);  Scs_pvec.cs_pvec(S.pinv,y,x,n);  t=toc(t);  System.out.print(String.format("downdate: time: %8.2f ms(incl solve) ",t1 + t));  print_resid(true,C,x,b,resid);  return (true);}  }
class C{  public static org.oscm.vo.VOUserSubscription convertToApi(org.oscm.internal.vo.VOUserSubscription oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOUserSubscription newVO=new org.oscm.vo.VOUserSubscription();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setServiceId(oldVO.getServiceId());  newVO.setServiceKey(oldVO.getServiceKey());  newVO.setActivationDate(oldVO.getActivationDate());  newVO.setCreationDate(oldVO.getCreationDate());  newVO.setDeactivationDate(oldVO.getDeactivationDate());  newVO.setServiceAccessInfo(oldVO.getServiceAccessInfo());  newVO.setServiceAccessType(EnumConverter.convert(oldVO.getServiceAccessType(),org.oscm.types.enumtypes.ServiceAccessType.class));  newVO.setServiceBaseURL(oldVO.getServiceBaseURL());  newVO.setServiceLoginPath(oldVO.getServiceLoginPath());  newVO.setStatus(EnumConverter.convert(oldVO.getStatus(),org.oscm.types.enumtypes.SubscriptionStatus.class));  newVO.setServiceInstanceId(oldVO.getServiceInstanceId());  newVO.setTimeoutMailSent(oldVO.isTimeoutMailSent());  newVO.setPurchaseOrderNumber(oldVO.getPurchaseOrderNumber());  newVO.setSubscriptionId(oldVO.getSubscriptionId());  newVO.setProvisioningProgress(oldVO.getProvisioningProgress());  newVO.setNumberOfAssignedUsers(oldVO.getNumberOfAssignedUsers());  newVO.setSellerName(oldVO.getSellerName());  newVO.setTechnicalServiceOperations(convertToApiVOTechnicalServiceOperation(oldVO.getTechnicalServiceOperations()));  newVO.setLicense(convertToApi(oldVO.getLicense()));  newVO.setOwnerId(oldVO.getOwnerId());  newVO.setUnitKey(oldVO.getUnitKey());  newVO.setUnitName(oldVO.getUnitName());  return newVO;}  }
class C{  @Override public FluidStack drain(int maxDrain,boolean doDrain){  return null;}  }
class C{  public static int hash(Object object){  return object == null ? 0 : object.hashCode();}  }
class C{  public ECHO512(){  super();}  }
class C{  public static void handleLogin(StatelessService service,Operation op,BasicAuthenticationContext authContext){  queryUserService(service,op,authContext);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.463 -0500",hash_original_method="316EA3FE02F120244DD49AEBA8B051C7",hash_generated_method="7D77327781AF9C48E35C6EC2E191C842") public final boolean equals(Object obj){  if (this == obj) {    return true;  }  if (!(obj instanceof ProtocolVersion)) {    return false;  }  ProtocolVersion that=(ProtocolVersion)obj;  return ((this.protocol.equals(that.protocol)) && (this.major == that.major) && (this.minor == that.minor));}  }
class C{  public void printTo(Body b,PrintWriter out){  b.validate();  boolean isPrecise=!useAbbreviations();  String decl=b.getMethod().getDeclaration();  out.println("    " + decl);  if (!addJimpleLn()) {  }  if (addJimpleLn()) {    setJimpleLnNum(addJimpleLnTags(getJimpleLnNum(),b.getMethod()));  }  out.println("    {");  incJimpleLnNum();  UnitGraph unitGraph=new soot.toolkits.graph.BriefUnitGraph(b);  LabeledUnitPrinter up;  if (isPrecise)   up=new NormalUnitPrinter(b); else   up=new BriefUnitPrinter(b);  if (addJimpleLn()) {    up.setPositionTagger(new AttributesUnitPrinter(getJimpleLnNum()));  }  printLocalsInBody(b,up);  printStatementsInBody(b,out,up,unitGraph);  out.println("    }");  incJimpleLnNum();}  }
class C{  public X509CRLEntryImpl(BigInteger num,Date date){  this.serialNumber=new SerialNumber(num);  this.revocationDate=date;}  }
class C{  public void testGetTable_String(){  System.out.println("getTable");  String id="123";  Table expResult=new Table(new TableHelper(null),"testName",id);  TableDB.addTable(expResult);  Table result=TableDB.getTable(id);  assertEquals(expResult.getID(),result.getID());}  }
class C{  public void testCase6(){  byte aBytes[]={1,100,56,7,98,-1,39,-128,127};  byte bBytes[]={15,100,56,7,98,-1,39,-128,127};  int aSign=1;  int bSign=1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public int available() throws IOException {synchronized (lock) {    return present - pos;  }}  }
class C{  public ReferenceSyntaxException(Throwable cause){  super(cause);}  }
class C{  public byte[] toByteArray(){  byte[] newarr=new byte[last + 1];  for (int i=0; i < newarr.length; i++)   newarr[i]=buffer[i / SIZE][i % SIZE];  return newarr;}  }
class C{  @SuppressWarnings("unused") public boolean isVideoFullscreen(){  return videoEnabledWebChromeClient != null && videoEnabledWebChromeClient.isVideoFullscreen();}  }
class C{  public AccountNotFoundException(String msg){  super(msg);}  }
class C{  public boolean isDownloadData(){  return vDownloadData;}  }
class C{  public static final Number MAX(Number[] vals){  try {    Collection col=Arrays.asList(vals);    Number max=(Number)Collections.max(col);    return max;  } catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  Throwable t) {    SystemFailure.checkFailure();    return null;  }}  }
class C{  static int readUnsignedShort(final byte[] b,final int index){  return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF);}  }
class C{  public EqualityOp_ createEqualityOp_(){  EqualityOp_Impl equalityOp_=new EqualityOp_Impl();  return equalityOp_;}  }
class C{  public static TetradMatrix matrixMult(TetradMatrix a,TetradMatrix b){  if (a.columns() != b.rows())   return null;  TetradMatrix result=new TetradMatrix(a.rows(),b.columns());  for (int i=0; i < a.rows(); i++) {    for (int j=0; j < b.columns(); j++) {      double value=0;      for (int k=0; k < b.rows(); k++) {        value+=a.get(i,k) * b.get(k,j);      }      result.set(i,j,value);    }  }  return result;}  }
class C{  public void allowSubstitutions(boolean allow){  splitter.allowSubstitutions(allow);}  }
class C{  protected Node copyInto(Node n){  GenericProcessingInstruction p;  p=(GenericProcessingInstruction)super.copyInto(n);  p.setTarget(getTarget());  return p;}  }
class C{  public void testGlobalClearAllPartitioned() throws Exception {  cacheMode=PARTITIONED;  startNodes();  performTest();}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  private void populateCoverageMap(Map<TestFitnessFunction,Set<TestChromosome>> goalMap,TestSuiteChromosome suite){  for (  TestChromosome test : suite.getTestChromosomes()) {    for (    TestFitnessFunction goal : test.getTestCase().getCoveredGoals()) {      if (!goalMap.containsKey(goal))       goalMap.put(goal,new HashSet<TestChromosome>());      goalMap.get(goal).add(test);    }  }}  }
class C{  public void shutdown(){  if (!done) {    for (    ConnectionListener listener : connection.getConnectionListeners()) {      try {        listener.connectionClosed();      } catch (      Exception e) {        e.printStackTrace();      }    }  }  done=true;  listenerExecutor.shutdown();}  }
class C{  private boolean balanced(State state){  int consumedCount=state.getObligationSet().getCount(consumed.getId());  int producedCount=state.getObligationSet().getCount(produced.getId());  return (consumedCount + producedCount == 0) && (consumedCount == 1 || producedCount == 1);}  }
class C{  private static void test2(String proto) throws Exception {  ByteArrayOutputStream bo=new ByteArrayOutputStream();  PrintStream oldout=System.out;  System.setOut(new PrintStream(bo));  Context c=Context.fromJAAS("client");  System.setOut(oldout);  int count=2;  String[] lines=new String(bo.toByteArray()).split("\n");  System.out.println("----------------- TEST -----------------");  for (  String line : lines) {    if (line.startsWith(">>> KDCCommunication")) {      System.out.println(line);      count--;      if (line.indexOf(proto) < 0) {        throw new Exception("Wrong timeout value");      }    }  }  if (count != 0) {    throw new Exception("Retry count is " + count + " less");  }}  }
class C{  protected Field findPropertySetField(String propertyValue,Class propertySetClass) throws Exception {  Field[] fields=propertySetClass.getFields();  for (  Field field : fields) {    String value=(String)field.get(null);    if (value.equals(propertyValue)) {      return field;    }  }  return null;}  }
class C{  public boolean isPasswordProtected(){  return passwordProtected;}  }
class C{  public Complex times(double a){  return multiply(this,a);}  }
class C{  public static String capitalizeWords(String data){  if (data == null)   return null;  StringBuilder res=new StringBuilder();  char ch;  char prevCh='.';  for (int i=0; i < data.length(); i++) {    ch=data.charAt(i);    if (Character.isLetter(ch)) {      if (!Character.isLetter(prevCh))       res.append(Character.toUpperCase(ch)); else       res.append(Character.toLowerCase(ch));    } else     res.append(ch);    prevCh=ch;  }  return res.toString();}  }
class C{  private static Date parseDate(String when) throws ParseException {  if (!DATE_TIME.matcher(when).matches()) {    throw new ParseException(when,0);  }  if (when.length() == 8) {    return buildDateFormat().parse(when);  } else {    Date date;    if (when.length() == 16 && when.charAt(15) == 'Z') {      date=buildDateTimeFormat().parse(when.substring(0,15));      Calendar calendar=new GregorianCalendar();      long milliseconds=date.getTime();      milliseconds+=calendar.get(Calendar.ZONE_OFFSET);      calendar.setTime(new Date(milliseconds));      milliseconds+=calendar.get(Calendar.DST_OFFSET);      date=new Date(milliseconds);    } else {      date=buildDateTimeFormat().parse(when);    }    return date;  }}  }
class C{  @Override public Pair<OperandSize,String> generate(final ITranslationEnvironment environment,final long offset,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  Preconditions.checkArgument(offset >= 0,"Error: Argument offset can't be less than 0");  final String isolatedCx=environment.getNextVariableString();  final String cxZero=environment.getNextVariableString();  instructions.add(ReilHelpers.createAnd(offset,OperandSize.DWORD,"ecx",OperandSize.WORD,"65535",OperandSize.WORD,isolatedCx));  instructions.add(ReilHelpers.createBisz(offset + 1,OperandSize.WORD,isolatedCx,OperandSize.BYTE,cxZero));  return new Pair<OperandSize,String>(OperandSize.BYTE,cxZero);}  }
class C{  public int removeIfLowerScore(INode state){  if (state == null) {    throw new NullPointerException("removeIfLowerScore received null state");  }  INode prev=closed.contains(state);  if (prev == null)   return -1;  if (state.score() < prev.score()) {    closed.remove(prev);    return +1;  }  return 0;}  }
class C{  protected URI unwrap(URI uri){  return uri;}  }
class C{  @Override public StoragePolicyTransitionParamsDto initiateStoragePolicyTransition(StoragePolicySelection storagePolicySelection){  return initiateStoragePolicyTransitionImpl(storagePolicySelection);}  }
class C{  private void checkVariableNames(DelphiPMDNode node,RuleContext ctx,boolean clear){  for (int i=0; i < node.getChildCount(); ++i) {    DelphiPMDNode child=new DelphiPMDNode((CommonTree)node.getChild(i));    if (child.getLine() > lastLineParsed) {      lastLineParsed=child.getLine();    }    if (child.getType() == DelphiLexer.BEGIN) {      checkVariableNames(child,ctx,false);    } else {      for (      String globalName : variableNames) {        if (child.getText().equalsIgnoreCase(globalName.toLowerCase()) && !child.getText().equals(globalName)) {          addViolation(ctx,child,"Avoid mixing variable names (found: '" + child.getText() + "' expected: '"+ globalName+ "').");        }      }    }  }  if (clear) {    variableNames.clear();  }}  }
class C{  public String apply(Instance inst){  for (int i=0; i < m_selectedAtts.length; i++) {    if (!inst.isMissing(m_selectedAtts[i])) {      String value=inst.stringValue(m_selectedAtts[i]);      String result=apply(value);      if (result != null) {        return result;      }    }  }  return null;}  }
class C{  public void logp(Level level,String sourceClass,String sourceMethod,String msg){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msg);  lr.setSourceClassName(sourceClass);  lr.setSourceMethodName(sourceMethod);  doLog(lr);}  }
class C{  private boolean isInfixOperator(char op){  for (int i=0; i < infixOps.length; i++) {    if (op == infixOps[i]) {      return true;    }  }  return false;}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.BINDING_ELEMENT__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void writeSQL(boolean revTableExists,boolean pageTableExists,GeneratorMode mode) throws Exception {  Writer writer=null;  try {    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputPath),charset));    StringBuffer dataToDump=new StringBuffer();    dataToDump.append(generateTemplateIdSQLStatement(this.tableExists));    if (mode.active_for_pages) {      dataToDump.append(generatePageSQLStatement(pageTableExists,mode.templateNameToPageId));    }    if (mode.active_for_revisions) {      dataToDump.append(generateRevisionSQLStatement(revTableExists,mode.templateNameToRevId));    }    writer.write(dataToDump.toString());  } catch (  IOException e) {    logger.error("Error writing SQL file: " + e.getMessage());  } finally {    try {      if (writer != null) {        writer.close();      }    } catch (    IOException e) {      logger.error("Error closing stream: " + e.getMessage());    }  }}  }
class C{  public String extractMsgFileName(byte[] stegoData,String stegoFileName) throws OpenStegoException {  LSBInputStream lsbIS=null;  lsbIS=new LSBInputStream(ImageUtil.byteArrayToImage(stegoData,stegoFileName),this.config);  return lsbIS.getDataHeader().getFileName();}  }
class C{  public void checkChanges(){  if (rdbtnThumbWithPostfix.isSelected()) {    settings.setTvShowEpisodeThumbFilename(FILENAME_THUMB_POSTFIX);  }  if (rdbtnThumbWoPostfix.isSelected()) {    settings.setTvShowEpisodeThumbFilename(TvShowEpisodeThumbNaming.FILENAME_THUMB);  }  if (rdbtnThumbTbn.isSelected()) {    settings.setTvShowEpisodeThumbFilename(TvShowEpisodeThumbNaming.FILENAME_THUMB_TBN);  }}  }
class C{  static void checkDesc(final String desc,final boolean canBeVoid){  int end=checkDesc(desc,0,canBeVoid);  if (end != desc.length()) {    throw new IllegalArgumentException("Invalid descriptor: " + desc);  }}  }
class C{  public DebugMessageAddressArgument(final IAddress address){  super(DebugArgumentType.ADDRESS);  this.address=Preconditions.checkNotNull(address,"IE01051: Address argument can not be null");  appendLong(this.address.toBigInteger());}  }
class C{  protected Vec4 intersectPolygonAltitudeAt(Line ray){  double elevation=0.0;  if (this.controlPoints.size() > 0) {    elevation=this.controlPoints.get(0).getPosition().getElevation();  }  return AirspaceEditorUtil.intersectGlobeAt(this.wwd,elevation,ray);}  }
class C{  public boolean currentValueIsApproximately(double value){  return Math.abs(getCurrentValue() - value) <= getRestDisplacementThreshold();}  }
class C{  private void bundleThumbnail(PlanarYUVLuminanceSource source,Bundle bundle){  int[] pixels=source.renderThumbnail();  int width=source.getThumbnailWidth();  int height=source.getThumbnailHeight();  Bitmap bitmap=Bitmap.createBitmap(pixels,0,width,width,height,Bitmap.Config.RGB_565);  ByteArrayOutputStream out=new ByteArrayOutputStream();  bitmap.compress(Bitmap.CompressFormat.JPEG,50,out);  bundle.putByteArray(DecodeThread.BARCODE_BITMAP,out.toByteArray());}  }
class C{  public TunnelConnectEvent(UserContext context,Credentials credentials,GuacamoleTunnel tunnel){  this.context=context;  this.credentials=credentials;  this.tunnel=tunnel;}  }
class C{  private String cookieToString(Cookie cookie){  return cookie.getClass().getSimpleName() + "[version=" + cookie.getVersion()+ ",name="+ cookie.getName()+ ",domain="+ cookie.getDomain()+ ",path="+ cookie.getPath()+ ",expiry="+ cookie.getExpiryDate()+ "]";}  }
class C{  public static void main(String[] args) throws Exception {  Tracer tracer=new Tracer.Builder().conf(new HBaseHTraceConfiguration(HBaseConfiguration.create())).build();  tracer.addSampler(Sampler.ALWAYS);  TraceScope parent=tracer.newScope("HBaseSpanReceiver.main.parent");  Thread.sleep(10);  long traceid=parent.getSpan().getSpanId().getHigh();  TraceScope child1=tracer.newScope("HBaseSpanReceiver.main.child.1");  Thread.sleep(10);  child1.close();  TraceScope child2=tracer.newScope("HBaseSpanReceiver.main.child.2");  Thread.sleep(10);  TraceScope gchild=tracer.newScope("HBaseSpanReceiver.main.grandchild");  gchild.addTimelineAnnotation("annotation 1.");  Thread.sleep(10);  gchild.addTimelineAnnotation("annotation 2.");  gchild.close();  Thread.sleep(10);  child2.close();  Thread.sleep(10);  parent.close();  tracer.close();  System.out.println("trace id: " + traceid);}  }
class C{  public IrcDiscovery(String channel){  this(channel,"irc.lfnet.org",6667);}  }
class C{  public MissingBuilder field(String field){  this.field=field;  return this;}  }
class C{  public void repaintConnectors(){  Rectangle2D.Double invalidArea=null;  for (  Connector c : connectors) {    if (invalidArea == null) {      invalidArea=c.getDrawingArea();    } else {      invalidArea.add(c.getDrawingArea());    }  }  connectors=(connectableFigure == null) ? new java.util.LinkedList<Connector>() : connectableFigure.getConnectors(prototype);  for (  Connector c : connectors) {    if (invalidArea == null) {      invalidArea=c.getDrawingArea();    } else {      invalidArea.add(c.getDrawingArea());    }  }  if (invalidArea != null) {    view.getComponent().repaint(view.drawingToView(invalidArea));  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (params == null) {    throw new NullPointerException();  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.MORE_GUARDS___ANONYMOUS_MORE_GUARDS_11:    return ((InternalEList<?>)getAnonymous_moreGuards_1_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static Typeface process(int resource,Context context){  Typeface sResTypeface;  InputStream sInputStream=null;  String sOutPath=context.getCacheDir() + "/tmp" + System.currentTimeMillis()+ ".raw";  try {    sInputStream=context.getResources().openRawResource(resource);  } catch (  Resources.NotFoundException e) {    Log.e(TAG,"Could not find font in Resources!");  }  try {    byte[] sBuffer=new byte[sInputStream.available()];    BufferedOutputStream sBOutStream=new BufferedOutputStream(new FileOutputStream(sOutPath));    int l;    while ((l=sInputStream.read(sBuffer)) > 0) {      sBOutStream.write(sBuffer,0,l);    }    sBOutStream.close();    sResTypeface=Typeface.createFromFile(sOutPath);    new File(sOutPath).delete();  } catch (  IOException e) {    Log.e(TAG,"Error reading in fonts!");    return null;  }  Log.d(TAG,"Successfully loaded font.");  return sResTypeface;}  }
class C{  public JSONObject(Object object,String names[]){  this();  Class c=object.getClass();  for (int i=0; i < names.length; i+=1) {    String name=names[i];    try {      this.putOpt(name,c.getField(name).get(object));    } catch (    Exception ignore) {    }  }}  }
class C{  static public void assertBaselineAligned(View first,View second){  int[] xy=new int[2];  first.getLocationOnScreen(xy);  int firstTop=xy[1] + first.getBaseline();  second.getLocationOnScreen(xy);  int secondTop=xy[1] + second.getBaseline();  assertEquals("views are not baseline aligned",firstTop,secondTop);}  }
class C{  public void randomize(final int upperBound){  for (int i=0; i < getNumPoints(); i++) {    double[] data=new double[dimensions];    for (int j=0; j < dimensions; j++) {      data[j]=Math.random() * upperBound;    }    getPoint(i).setData(data);  }  Arrays.fill(distances,-1);  calculateDistances();}  }
class C{  public String selectHeaderContentType(String[] contentTypes){  if (contentTypes.length == 0)   return "application/json";  if (StringUtil.containsIgnoreCase(contentTypes,"application/json"))   return "application/json";  return contentTypes[0];}  }
class C{  public static String guessAuthor(final String ip){  final String author=AUTHORS.get(ip);  return author;}  }
class C{  private static final InputSource resolveSchema(final Map<String,List<String>> schemaLocationMap,String namespaceUri) throws IOException {  final EntityResolver2 entityResolver=new CacheXmlParser();  InputSource inputSource=null;  final List<String> locations=schemaLocationMap.get(namespaceUri);  for (  final String location : locations) {    try {      inputSource=entityResolver.resolveEntity(null,location);      if (null != inputSource) {        break;      }    } catch (    final SAXException e) {    }  }  if (null == inputSource) {    inputSource=new InputSource(new URL(namespaceUri).openStream());  }  return inputSource;}  }
class C{  @Override public boolean isFactoryForType(Object object){  if (object == modelPackage) {    return true;  }  if (object instanceof EObject) {    return ((EObject)object).eClass().getEPackage() == modelPackage;  }  return false;}  }
class C{  private boolean isTopBottom(){  return (m_to.y + m_to.height <= m_from.y);}  }
class C{  public UniversalDataSource find(String name){  return datasources.get(name);}  }
class C{  public double distanceSq(final double x,final double y,final double z){  final double dx=(double)this.x - x;  final double dy=(double)this.y - y;  final double dz=(double)this.z - z;  return (dx * dx + dy * dy + dz * dz);}  }
class C{  public Address minus(Extent extent){  return null;}  }
class C{  public final void removeCols(int[] cols){  int[] rows=new int[tetradMatrix.rows()];  for (int i=0; i < tetradMatrix.rows(); i++) {    rows[i]=i;  }  int[] retainedCols=new int[variables.size() - cols.length];  int i=-1;  for (int j=0; j < variables.size(); j++) {    if (Arrays.binarySearch(cols,j) < 0) {      retainedCols[++i]=j;    }  }  List<Node> retainedVars=new LinkedList<>();  for (  int retainedCol : retainedCols) {    retainedVars.add(variables.get(retainedCol));  }  tetradMatrix=tetradMatrix.getSelection(rows,retainedCols).copy();  variables=retainedVars;  selection=new HashSet<>();  knowledge=knowledge.copy();}  }
class C{  public CancelException(String message,Throwable cause){  super(message,cause);}  }
class C{  protected AbstractEntityReference(String name,AbstractDocument owner) throws DOMException {  ownerDocument=owner;  if (owner.getStrictErrorChecking() && !DOMUtilities.isValidName(name)) {    throw createDOMException(DOMException.INVALID_CHARACTER_ERR,"xml.name",new Object[]{name});  }  nodeName=name;}  }
class C{  public static Test suite(){  return new TestSuite(TestHistogram.class);}  }
class C{  public static Vec4 fromFloatArray(float[] array,int offset,int length){  if (array == null) {    String msg=Logging.getMessage("nullValue.ArrayIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (offset < 0) {    String msg=Logging.getMessage("generic.OffsetIsInvalid",offset);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (length < 1) {    String msg=Logging.getMessage("generic.LengthIsInvalid",length);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (array.length < offset + length) {    String msg=Logging.getMessage("generic.ArrayInvalidLength",array.length);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (length == 2)   return new Vec4(array[offset],array[offset + 1],0d);  if (length == 3)   return new Vec4(array[offset],array[offset + 1],array[offset + 2]);  return new Vec4(array[offset],array[offset + 1],array[offset + 2],array[offset + 3]);}  }
class C{  void replace(int offset,int length,char[] replArray,int replOffset,int replLength){  int delta=replLength - length;  int src=offset + length;  int nmove=count - src;  int dest=src + delta;  if ((count + delta) >= data.length) {    int newLength=Math.max(2 * data.length,count + delta);    char[] newData=new char[newLength];    System.arraycopy(data,0,newData,0,offset);    System.arraycopy(replArray,replOffset,newData,offset,replLength);    System.arraycopy(data,src,newData,dest,nmove);    data=newData;  } else {    System.arraycopy(data,src,data,dest,nmove);    System.arraycopy(replArray,replOffset,data,offset,replLength);  }  count=count + delta;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:23.588 -0400",hash_original_method="C68F9C1CA0ECDC5E3EA9380F963B92A4",hash_generated_method="B7EB395BBA2A6FD76A1273DB5A773C28") public V valueAt(int index){  return (V)mArray[(index << 1) + 1];}  }
class C{  public ArraySet<DelaunayVertex> facetOpposite(DelaunayVertex vertex){  ArraySet<DelaunayVertex> facet=new ArraySet<DelaunayVertex>(this);  if (!facet.remove(vertex)) {    throw new IllegalArgumentException("Vertex not in triangle");  }  return facet;}  }
class C{  public void updateSpeedSetting(int speed){  float oldSpeed=this.speedSetting;  this.speedSetting=floatSpeed(speed);  if (speed < 0) {    this.speedSetting=-1.f;  }  int new_spd=speed;  if (this.isForward) {    new_spd=new_spd | 0x80;  }  log.debug("Updated speed/dir for speed: " + new_spd);  if (Math.abs(oldSpeed - this.speedSetting) > 0.0001) {    notifyPropertyChangeListener("SpeedSetting",oldSpeed,this.speedSetting);  }}  }
class C{  protected Locale findMatch(FacesContext context,Locale perf){  Locale result=null;  Iterator it=context.getApplication().getSupportedLocales();  while (it.hasNext()) {    Locale supportedLocale=(Locale)it.next();    if (perf.equals(supportedLocale)) {      result=supportedLocale;      break;    } else {      if (perf.getLanguage().equals(supportedLocale.getLanguage()) && supportedLocale.getCountry().equals("")) {        result=supportedLocale;      }    }  }  return result;}  }
class C{  protected void storeBuffer(){  if (buffer != null && buffer.length() > insertStatement.length()) {    if (!insertStatement.isEmpty()) {      this.buffer.append(";");    }    bufferList.add(buffer);  }  this.buffer=new StringBuilder();  this.buffer.append(insertStatement);}  }
class C{  public Utf8Constant addUTF8(String value){  Utf8Constant entry=getUTF8(value);  if (entry != null)   return entry;  entry=new Utf8Constant(this,_entries.size(),value);  addConstant(entry);  return entry;}  }
class C{  public void computeConvexHull(){  ArrayList<Coordinate> pts=new ArrayList<Coordinate>();  if (geometries.isEmpty()) {    return;  }  for (int i=0; i < geometries.size(); i++) {    Geometry g=((MasonGeometry)geometries.get(i)).getGeometry();    Coordinate c[]=g.getCoordinates();    pts.addAll(Arrays.asList(c));  }  Coordinate[] coords=pts.toArray(new Coordinate[pts.size()]);  ConvexHull hull=new ConvexHull(coords,geomFactory);  this.convexHull=new PreparedPolygon((Polygon)hull.getConvexHull());}  }
class C{  public String uploadCloudFile(String mimeType,String file) throws CloudException, IOException {  return uploadCloudFileImpl(mimeType,file,null,-1);}  }
class C{  public void removeEdge(T fromNode,T toNode) throws NotExistingEdge {  if (!nodesMap.containsKey(fromNode)) {    throw new NotExistingEdge();  }  if (!nodesMap.containsKey(toNode)) {    throw new NotExistingEdge();  }  if (nodesMap.get(fromNode).outEdges.remove(nodesMap.get(toNode)) && nodesMap.get(toNode).inEdges.remove(nodesMap.get(fromNode)))   countEdges--; else   throw new NotExistingEdge();}  }
class C{  @Unpreemptible private static boolean inflateAndLock(Object o,Offset lockOffset){  Lock l=Lock.allocate();  if (l == null)   return false;  Lock rtn=attemptToInflate(o,lockOffset,l);  if (l != rtn) {    l=rtn;    l.mutex.lock();  }  return l.lockHeavyLocked(o);}  }
class C{  public static void copyFile(File srcFile,File destFile) throws IOException {  if (destFile.exists() && destFile.isDirectory()) {    throw new IOException("Destination '" + destFile + "' exists but is a directory");  }  FileInputStream input=new FileInputStream(srcFile);  try {    FileOutputStream output=new FileOutputStream(destFile);    try {      copy(input,output);    }  finally {      close(output);    }  }  finally {    close(input);  }  if (srcFile.length() != destFile.length()) {    throw new IOException("Failed to copy full contents from '" + srcFile + "' to '"+ destFile+ "'");  }  destFile.setLastModified(srcFile.lastModified());}  }
class C{  protected void addRange(TextPresentation presentation,int offset,int length,TextAttribute attr){  if (attr != null)   presentation.addStyleRange(new StyleRange(offset,length,attr.getForeground(),attr.getBackground(),attr.getStyle()));}  }
class C{  public void unregisterNetworkStateListener(){  mNetworkCnx.unregisterNetworkStateListener();}  }
class C{  private FibonacciHeapNode<T> removeMin(){  FibonacciHeapNode<T> z=minNode;  if (z != null) {    int numKids=z.degree;    FibonacciHeapNode<T> x=z.child;    FibonacciHeapNode<T> tempRight;    while (numKids > 0) {      tempRight=x.right;      x.left.right=x.right;      x.right.left=x.left;      x.left=minNode;      x.right=minNode.right;      minNode.right=x;      x.right.left=x;      x.parent=null;      x=tempRight;      numKids--;    }    z.left.right=z.right;    z.right.left=z.left;    if (z == z.right) {      minNode=null;    } else {      minNode=z.right;      consolidate();    }    nNodes--;  }  return z;}  }
class C{  public TemporalOMScalingIcon(Object id,int renderType,boolean interpolate,Image ii,float baseScale){  this(id,renderType,interpolate);  setColorModel(OMRasterObject.COLORMODEL_IMAGEICON);  setImage(ii);  setBaseScale(baseScale);}  }
class C{  public LagartoParser(char[] charArray,boolean emitStrings){  super(emitStrings);  initialize(charArray);}  }
class C{  public static Dcs cs_transpose(Dcs A,boolean values){  int p, q, j, Cp[], Ci[], n, m, Ap[], Ai[], w[];  double Cx[], Ax[];  Dcs C;  if (!Dcs_util.CS_CSC(A))   return (null);  m=A.m;  n=A.n;  Ap=A.p;  Ai=A.i;  Ax=A.x;  C=Dcs_util.cs_spalloc(n,m,Ap[n],values && (Ax != null),false);  w=new int[m];  Cp=C.p;  Ci=C.i;  Cx=C.x;  for (p=0; p < Ap[n]; p++)   w[Ai[p]]++;  Dcs_cumsum.cs_cumsum(Cp,w,m);  for (j=0; j < n; j++) {    for (p=Ap[j]; p < Ap[j + 1]; p++) {      Ci[q=w[Ai[p]]++]=j;      if (Cx != null)       Cx[q]=Ax[p];    }  }  return C;}  }
class C{  public String toString(org.w3c.dom.Node n){  int nodeHandle=getDTMHandleFromNode(n);  DTM dtm=getDTM(nodeHandle);  XMLString strVal=dtm.getStringValue(nodeHandle);  return strVal.toString();}  }
class C{  public static boolean isEmpty(String s){  if (null == s)   return true;  if (s.length() == 0)   return true;  if (s.trim().length() == 0)   return true;  return false;}  }
class C{  public void processConnection(DataInputStream dis,DataOutputStream dosParam) throws IOException, Exception {  GZIPOutputStream gzip=new GZIPOutputStream(new BufferedOutputStream(dosParam));  DataOutputStream dos=new DataOutputStream(gzip);  byte responseStatus=ResponseStatus.STATUS_ERROR;  try {    ByteArrayOutputStream baos=new ByteArrayOutputStream();    String name=dis.readUTF();    String pw=dis.readUTF();    String serializer=dis.readUTF();    @SuppressWarnings("unused") String locale=dis.readUTF();    byte action=dis.readByte();    Context.openSession();    try {      Context.authenticate(name,pw);    } catch (    ContextAuthenticationException ex) {      responseStatus=ResponseStatus.STATUS_ACCESS_DENIED;    }    if (responseStatus != ResponseStatus.STATUS_ACCESS_DENIED) {      DataOutputStream dosTemp=new DataOutputStream(baos);      if (action == ACTION_DOWNLOAD_PATIENTS)       downloadPatients(String.valueOf(dis.readInt()),dosTemp,serializer,false); else       if (action == ACTION_DOWNLOAD_SS_PATIENTS)       downloadPatients(String.valueOf(dis.readInt()),dosTemp,serializer,true); else       if (action == ACTION_DOWNLOAD_COHORTS)       PatientDownloadManager.downloadCohorts(dosTemp,serializer); else       if (action == ACTION_DOWNLOAD_SAVED_SEARCHES)       PatientDownloadManager.downloadSavesSearches(dosTemp,serializer); else       if (action == ACTION_DOWNLOAD_FORMS)       XformDownloadManager.downloadXforms(dosTemp,serializer); else       if (action == ACTION_UPLOAD_FORMS)       submitXforms(dis,dosTemp,serializer); else       if (action == ACTION_DOWNLOAD_USERS)       UserDownloadManager.downloadUsers(dosTemp,serializer); else       if (action == ACTION_DOWNLOAD_USERS_AND_FORMS)       downloadUsersAndForms(dosTemp,serializer); else       if (action == ACTION_DOWNLOAD_FILTERED_PATIENTS)       downloadPatients(dis.readUTF(),dis.readUTF(),dosTemp,serializer);      responseStatus=ResponseStatus.STATUS_SUCCESS;    }    dos.writeByte(responseStatus);    if (responseStatus == ResponseStatus.STATUS_SUCCESS)     dos.write(baos.toByteArray());    dos.close();    gzip.finish();  } catch (  Exception ex) {    log.error(ex.getMessage(),ex);    try {      dos.writeByte(responseStatus);      dos.flush();      gzip.finish();    } catch (    Exception e) {      e.printStackTrace();    }  } finally {    Context.closeSession();  }}  }
class C{  public static String join(Collection collection,String delim){  return join(collection,delim,false);}  }
class C{  public long nextLongFromTo(long from,long to){  if (from >= 0 && to < Long.MAX_VALUE) {    return from + (long)(nextDoubleFromTo(0.0,to - from + 1));  }  double diff=((double)to) - (double)from + 1.0;  if (diff <= Long.MAX_VALUE) {    return from + (long)(nextDoubleFromTo(0.0,diff));  }  long random;  if (from == Long.MIN_VALUE) {    if (to == Long.MAX_VALUE) {      int i1=nextIntFromTo(Integer.MIN_VALUE,Integer.MAX_VALUE);      int i2=nextIntFromTo(Integer.MIN_VALUE,Integer.MAX_VALUE);      return ((i1 & 0xFFFFFFFFL) << 32) | (i2 & 0xFFFFFFFFL);    }    random=Math.round(nextDoubleFromTo(from,to + 1));    if (random > to)     random=from;  } else {    random=Math.round(nextDoubleFromTo(from - 1,to));    if (random < from)     random=to;  }  return random;}  }
class C{  public static Vec4 nearestPointOnSegment(Vec4 p0,Vec4 p1,Vec4 p){  Vec4 v=p1.subtract3(p0);  Vec4 w=p.subtract3(p0);  double c1=w.dot3(v);  double c2=v.dot3(v);  if (c1 <= 0)   return p0;  if (c2 <= c1)   return p1;  return p0.add3(v.multiply3(c1 / c2));}  }
class C{  public boolean isRoot(InputNode node){  return stack.bottom() == node;}  }
class C{  public Map<Direction,Occupant> neighbors(int x,int y){  HashMap<Direction,Occupant> neighbors=new HashMap<Direction,Occupant>();  Occupant top=getOccupant(x,y + 1);  Occupant bottom=getOccupant(x,y - 1);  Occupant left=getOccupant(x - 1,y);  Occupant right=getOccupant(x + 1,y);  neighbors.put(Direction.TOP,top);  neighbors.put(Direction.BOTTOM,bottom);  neighbors.put(Direction.LEFT,left);  neighbors.put(Direction.RIGHT,right);  return neighbors;}  }
class C{  public static boolean writeToFile(String filename,String message,boolean append){  boolean result;  BufferedWriter writer;  try {    writer=new BufferedWriter(new FileWriter(filename,append));    writer.write(message);    writer.newLine();    writer.flush();    writer.close();    result=true;  } catch (  Exception e) {    result=false;  }  return result;}  }
class C{  private static boolean isJavaNumber(Object val){  return val instanceof Number && val.getClass().getName().startsWith("java.");}  }
class C{  public void write(Writer writer,Integer indent,String xmlVersion) throws TransformerException {  write(writer,new XCalOutputProperties(indent,xmlVersion));}  }
class C{  public final static void changeByteEndianess(byte[] b,int offset,int length){  byte tmp;  for (int i=offset; i < offset + length; i+=2) {    tmp=b[i];    b[i]=b[i + 1];    b[i + 1]=tmp;  }}  }
class C{  public final void close(){  if (!isClosed()) {    m_wam.closeQuery();  }}  }
class C{  private Node addWaiter(Node mode){  Node node=new Node(Thread.currentThread(),mode);  Node pred=tail;  if (pred != null) {    node.prev=pred;    if (compareAndSetTail(pred,node)) {      pred.next=node;      return node;    }  }  enq(node);  return node;}  }
class C{  protected String doIt() throws Exception {  log.info("C_Commission_ID=" + getRecord_ID() + ", StartDate="+ p_StartDate);  if (p_StartDate == null)   p_StartDate=new Timestamp(System.currentTimeMillis());  m_com=new MCommission(getCtx(),getRecord_ID(),get_TrxName());  if (m_com.get_ID() == 0)   throw new AdempiereUserError("No Commission");  MCommissionRun comRun=new MCommissionRun(m_com);  setStartEndDate();  comRun.setStartDate(p_StartDate);  SimpleDateFormat format=DisplayType.getDateFormat(DisplayType.Date);  String description=format.format(p_StartDate) + " - " + format.format(m_EndDate)+ " - "+ MCurrency.getISO_Code(getCtx(),m_com.getC_Currency_ID());  comRun.setDescription(description);  if (!comRun.save())   throw new AdempiereSystemError("Could not save Commission Run");  MCommissionLine[] lines=m_com.getLines();  for (int i=0; i < lines.length; i++) {    MCommissionAmt comAmt=new MCommissionAmt(comRun,lines[i].getC_CommissionLine_ID());    if (!comAmt.save())     throw new AdempiereSystemError("Could not save Commission Amt");    StringBuffer sql=new StringBuffer();    if (MCommission.DOCBASISTYPE_Receipt.equals(m_com.getDocBasisType())) {      if (m_com.isListDetails()) {        sql.append("SELECT h.C_Currency_ID, (l.LineNetAmt*al.Amount/h.GrandTotal) AS Amt," + " (l.QtyInvoiced*al.Amount/h.GrandTotal) AS Qty," + " NULL, l.C_InvoiceLine_ID, p.DocumentNo||'_'||h.DocumentNo,"+ " COALESCE(prd.Value,l.Description), h.DateInvoiced "+ "FROM C_Payment p"+ " INNER JOIN C_AllocationLine al ON (p.C_Payment_ID=al.C_Payment_ID)"+ " INNER JOIN C_Invoice h ON (al.C_Invoice_ID = h.C_Invoice_ID)"+ " INNER JOIN C_InvoiceLine l ON (h.C_Invoice_ID = l.C_Invoice_ID) "+ " LEFT OUTER JOIN M_Product prd ON (l.M_Product_ID = prd.M_Product_ID) "+ "WHERE p.DocStatus IN ('CL','CO','RE')"+ " AND h.IsSOTrx='Y'"+ " AND p.AD_Client_ID = ?"+ " AND p.DateTrx BETWEEN ? AND ?");      } else {        sql.append("SELECT h.C_Currency_ID, SUM(l.LineNetAmt*al.Amount/h.GrandTotal) AS Amt," + " SUM(l.QtyInvoiced*al.Amount/h.GrandTotal) AS Qty," + " NULL, NULL, NULL, NULL, MAX(h.DateInvoiced) "+ "FROM C_Payment p"+ " INNER JOIN C_AllocationLine al ON (p.C_Payment_ID=al.C_Payment_ID)"+ " INNER JOIN C_Invoice h ON (al.C_Invoice_ID = h.C_Invoice_ID)"+ " INNER JOIN C_InvoiceLine l ON (h.C_Invoice_ID = l.C_Invoice_ID) "+ "WHERE p.DocStatus IN ('CL','CO','RE')"+ " AND h.IsSOTrx='Y'"+ " AND p.AD_Client_ID = ?"+ " AND p.DateTrx BETWEEN ? AND ?");      }    } else     if (MCommission.DOCBASISTYPE_Order.equals(m_com.getDocBasisType())) {      if (m_com.isListDetails()) {        sql.append("SELECT h.C_Currency_ID, l.LineNetAmt, l.QtyOrdered, " + "l.C_OrderLine_ID, NULL, h.DocumentNo," + " COALESCE(prd.Value,l.Description),h.DateOrdered "+ "FROM C_Order h"+ " INNER JOIN C_OrderLine l ON (h.C_Order_ID = l.C_Order_ID)"+ " LEFT OUTER JOIN M_Product prd ON (l.M_Product_ID = prd.M_Product_ID) "+ "WHERE h.DocStatus IN ('CL','CO')"+ " AND h.IsSOTrx='Y'"+ " AND h.AD_Client_ID = ?"+ " AND h.DateOrdered BETWEEN ? AND ?");      } else {        sql.append("SELECT h.C_Currency_ID, SUM(l.LineNetAmt) AS Amt," + " SUM(l.QtyOrdered) AS Qty, " + "NULL, NULL, NULL, NULL, MAX(h.DateOrdered) "+ "FROM C_Order h"+ " INNER JOIN C_OrderLine l ON (h.C_Order_ID = l.C_Order_ID) "+ "WHERE h.DocStatus IN ('CL','CO')"+ " AND h.IsSOTrx='Y'"+ " AND h.AD_Client_ID = ?"+ " AND h.DateOrdered BETWEEN ? AND ?");      }    } else {      if (m_com.isListDetails()) {        sql.append("SELECT h.C_Currency_ID, l.LineNetAmt, l.QtyInvoiced, " + "NULL, l.C_InvoiceLine_ID, h.DocumentNo," + " COALESCE(prd.Value,l.Description),h.DateInvoiced "+ "FROM C_Invoice h"+ " INNER JOIN C_InvoiceLine l ON (h.C_Invoice_ID = l.C_Invoice_ID)"+ " LEFT OUTER JOIN M_Product prd ON (l.M_Product_ID = prd.M_Product_ID) "+ "WHERE h.DocStatus IN ('CL','CO','RE')"+ " AND h.IsSOTrx='Y'"+ " AND h.AD_Client_ID = ?"+ " AND h.DateInvoiced BETWEEN ? AND ?");      } else {        sql.append("SELECT h.C_Currency_ID, SUM(l.LineNetAmt) AS Amt," + " SUM(l.QtyInvoiced) AS Qty, " + "NULL, NULL, NULL, NULL, MAX(h.DateInvoiced) "+ "FROM C_Invoice h"+ " INNER JOIN C_InvoiceLine l ON (h.C_Invoice_ID = l.C_Invoice_ID) "+ "WHERE h.DocStatus IN ('CL','CO','RE')"+ " AND h.IsSOTrx='Y'"+ " AND h.AD_Client_ID = ?"+ " AND h.DateInvoiced BETWEEN ? AND ?");      }    }    if (lines[i].isCommissionOrders()) {      MUser[] users=MUser.getOfBPartner(getCtx(),m_com.getC_BPartner_ID(),get_TrxName());      if (users == null || users.length == 0)       throw new AdempiereUserError("Commission Business Partner has no Users/Contact");      if (users.length == 1) {        int SalesRep_ID=users[0].getAD_User_ID();        sql.append(" AND h.SalesRep_ID=").append(SalesRep_ID);      } else {        log.warning("Not 1 User/Contact for C_BPartner_ID=" + m_com.getC_BPartner_ID() + " but "+ users.length);        sql.append(" AND h.SalesRep_ID IN (SELECT AD_User_ID FROM AD_User WHERE C_BPartner_ID=").append(m_com.getC_BPartner_ID()).append(")");      }    }    if (lines[i].getOrg_ID() != 0)     sql.append(" AND h.AD_Org_ID=").append(lines[i].getOrg_ID());    if (lines[i].getC_BPartner_ID() != 0)     sql.append(" AND h.C_BPartner_ID=").append(lines[i].getC_BPartner_ID());    if (lines[i].getC_BP_Group_ID() != 0)     sql.append(" AND h.C_BPartner_ID IN " + "(SELECT C_BPartner_ID FROM C_BPartner WHERE C_BP_Group_ID=").append(lines[i].getC_BP_Group_ID()).append(")");    if (lines[i].getC_SalesRegion_ID() != 0)     sql.append(" AND h.C_BPartner_Location_ID IN " + "(SELECT C_BPartner_Location_ID FROM C_BPartner_Location WHERE C_SalesRegion_ID=").append(lines[i].getC_SalesRegion_ID()).append(")");    if (lines[i].getM_Product_ID() != 0)     sql.append(" AND l.M_Product_ID=").append(lines[i].getM_Product_ID());    if (lines[i].getM_Product_Category_ID() != 0)     sql.append(" AND l.M_Product_ID IN " + "(SELECT M_Product_ID FROM M_Product WHERE M_Product_Category_ID=").append(lines[i].getM_Product_Category_ID()).append(")");    if (lines[i].getPaymentRule() != null)     sql.append(" AND h.PaymentRule='").append(lines[i].getPaymentRule()).append("'");    if (!m_com.isListDetails())     sql.append(" GROUP BY h.C_Currency_ID");    log.fine("Line=" + lines[i].getLine() + " - "+ sql);    createDetail(sql.toString(),comAmt);    comAmt.calculateCommission();    comAmt.saveEx();  }  m_com.setDateLastRun(p_StartDate);  m_com.saveEx();  return "@C_CommissionRun_ID@ = " + comRun.getDocumentNo() + " - "+ comRun.getDescription();}  }
class C{  public JdbcRowSetImpl(ResultSet res) throws SQLException {  conn=null;  ps=null;  rs=res;  try {    resBundle=JdbcRowSetResourceBundle.getJdbcRowSetResourceBundle();  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }  initParams();  setShowDeleted(false);  setQueryTimeout(0);  setMaxRows(0);  setMaxFieldSize(0);  setParams();  setReadOnly(true);  setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);  setEscapeProcessing(true);  setTypeMap(null);  resMD=rs.getMetaData();  rowsMD=new RowSetMetaDataImpl();  initMetaData(rowsMD,resMD);  iMatchColumns=new Vector<Integer>(10);  for (int i=0; i < 10; i++) {    iMatchColumns.add(i,Integer.valueOf(-1));  }  strMatchColumns=new Vector<String>(10);  for (int j=0; j < 10; j++) {    strMatchColumns.add(j,null);  }}  }
class C{  private void onClickGalleryImage(final RecentMedia aMediaItem){  if (null != mCamera) {    mCamera.stopPreview();  }  mSelectedGalleryItemsList.add(aMediaItem);  if ((null != aMediaItem.mThumbnail) && !mIsAvatarMode) {    updateUiConfiguration(UI_SHOW_TAKEN_IMAGE,IMAGE_ORIGIN_GALLERY);    mImagePreviewImageView.setImageBitmap(aMediaItem.mThumbnail);    VectorApp.setSavedCameraImagePreview(aMediaItem.mThumbnail);  } else   if (null != aMediaItem.mFileUri) {    displayImagePreview(null,null,aMediaItem.mFileUri,IMAGE_ORIGIN_GALLERY);  } else {    Log.e(LOG_TAG,"## onClickGalleryImage(): no image to display");  }  mImagePreviewImageView.setTag(aMediaItem.mFileUri);}  }
class C{  @Override public int updateCharacter(Uri uri,ContentValues cvs,String selection,String[] selectionArgs){  final long requestId=ContentUris.parseId(uri);synchronized (this) {    CharacterRecord cr=mCharacterMap.get(requestId);    if (cr != null)     return updateEntryConditionally(cr,cvs,selection,selectionArgs); else     return 0;  }}  }
class C{  public Builder withPadding(int leftPadding,int rightPadding,int topPadding,int bottomPadding){  this.leftPadding=leftPadding;  this.rightPadding=rightPadding;  this.topPadding=topPadding;  this.bottomPadding=bottomPadding;  return this;}  }
class C{  public SnmpUnsignedInt(Integer v) throws IllegalArgumentException {  super(v);}  }
class C{  public static final short tertiaryOrder(int order){  return (short)CollationElementIteratorICU.tertiaryOrder(order);}  }
class C{  private void drawSwitchButton(final Point buttonSize){  this.gc.setForeground(this.buttonBorderColor);  if (this.round) {    this.gc.drawRoundRectangle(2,2,buttonSize.x,buttonSize.y,5,5);  } else {    this.gc.drawRectangle(2,2,buttonSize.x,buttonSize.y);  }  if (selection)   this.drawRightPart(buttonSize); else   this.drawLeftPart(buttonSize);  this.drawToggleButton(buttonSize);}  }
class C{  @NoInline private static void throwNewNegativeArraySizeException(){  throw new NegativeArraySizeException();}  }
class C{  public String nextTo(char delimiter) throws JSONException {  StringBuffer sb=new StringBuffer();  for (; ; ) {    char c=this.next();    if (c == delimiter || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeentitysetnodevalue.class,args);}  }
class C{  protected void onFailedAppCall(String appCallId,String action,Bundle extras){}  }
class C{  public LinkedIntegerMap(final LinkedIntegerMap<T> integerMap){  m_values=new LinkedHashMap<>(integerMap.size());  for (  final T t : integerMap.keySet()) {    m_values.put(t,integerMap.getInt(t));  }}  }
class C{  static public void assertEquals(String msg,boolean[] expected,boolean[] actual){  if (msg == null) {    msg="";  } else {    msg=msg + " : ";  }  if (expected == actual) {    return;  } else   if (expected == null && actual != null) {    fail(msg + "Expected a null array.");  } else   if (expected != null && actual == null) {    fail(msg + "Not expecting a null array.");  } else   if (expected.length != actual.length) {    assertEquals(msg + "length differs.",expected.length,actual.length);  }  for (int i=0; i < expected.length; i++) {    if (expected[i] != actual[i]) {      assertEquals(msg + "values differ: index=" + i,expected[i],actual[i]);    }  }}  }
class C{  private boolean checkURLRecursively(int indent,URL url) throws IOException {  verboseMessage("Comparing with " + url);  JarLoader jarloader=new JarLoader(url);  JarFile j=jarloader.getJarFile();  Manifest man=j.getManifest();  if (man != null) {    Attributes attr=man.getMainAttributes();    if (attr != null) {      String title=attr.getValue(Name.SPECIFICATION_TITLE);      String version=attr.getValue(Name.SPECIFICATION_VERSION);      String vendor=attr.getValue(Name.SPECIFICATION_VENDOR);      String implTitle=attr.getValue(Name.IMPLEMENTATION_TITLE);      String implVersion=attr.getValue(Name.IMPLEMENTATION_VERSION);      String implVendor=attr.getValue(Name.IMPLEMENTATION_VENDOR);      String sealed=attr.getValue(Name.SEALED);      if (title != null) {        if (title.equals(targetSpecTitle)) {          if (version != null) {            if (version.equals(targetSpecVersion) || isNotOlderThan(version,targetSpecVersion)) {              verboseMessage("");              verboseMessage("CONFLICT DETECTED ");              verboseMessage("Conflicting file:" + url);              verboseMessage("Installed Version:" + version);              if (implTitle != null)               verboseMessage("Implementation Title:" + implTitle);              if (implVersion != null)               verboseMessage("Implementation Version:" + implVersion);              if (implVendor != null)               verboseMessage("Implementation Vendor:" + implVendor);              return false;            }          }        }      }    }  }  boolean result=true;  URL[] loaderList=jarloader.getClassPath();  if (loaderList != null) {    for (int i=0; i < loaderList.length; i++) {      if (url != null) {        boolean res=checkURLRecursively(indent + 1,loaderList[i]);        result=res && result;      }    }  }  return result;}  }
class C{  @Override public void connectionStateChanged(State state){  log.info("ipreconfig connection state changed to {}",state);  if (state.equals(State.CONNECTED)) {    log.info("Curator (re)connected. Waking up the ip reconfig procedure...");    wakeup();  }}  }
class C{  private void clearIndexToFirst(){  for (; ; ) {    Index<K,V> q=head;    for (; ; ) {      Index<K,V> r=q.right;      if (r != null && r.indexesDeletedNode() && !q.unlink(r))       break;      if ((q=q.down) == null) {        if (head.right == null)         tryReduceLevel();        return;      }    }  }}  }
class C{  public void removeListener(final IAddressSpaceConfigurationListener listener){  m_listeners.removeListener(listener);}  }
class C{  public VcfEvalParamsBuilder templateFile(final File template){  mTemplateFile=template;  return self();}  }
class C{  public int hashCode(){  return start * end + capacity;}  }
class C{  private UnsignalledExceptions(){  throw new IllegalStateException("No instances!");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.881 -0400",hash_original_method="994C69F88466BB47F9A8EB3CD8F01375",hash_generated_method="B7ED5D9BD28F162D5BC9560B072F418F") public static IOFileFilter ageFileFilter(File cutoffReference,boolean acceptOlder){  return new AgeFileFilter(cutoffReference,acceptOlder);}  }
class C{  public static ReilInstruction createMul(final Address address,final ReilOperand firstOperand,final ReilOperand secondOperand,final ReilOperand thirdOperand){  return new ReilInstruction(address,ReilMnemonics.MUL,firstOperand,secondOperand,thirdOperand);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void done(){  isCompleted=true;  if (later != null) {synchronized (later) {      later.notify();    }  }  earlier=null;  later=null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static boolean isCoreType(Type type){  if (type == null) {    return false;  }  if ("java.lang.toString".equals(type.toString())) {    return true;  }switch (type.getKind()) {case BYTE:case SHORT:case INT:case LONG:case DOUBLE:case FLOAT:case BOOLEAN:case CHAR:    return true;default :  return false;}}  }
class C{  protected void sendFunctionGroup2(){  writeData();}  }
class C{  public boolean isDoubleSupportedKHR(){  return hasExtension("cl_khr_fp64");}  }
class C{  public static void inform(String description,String subDescription,JFrame frame){  JLabel label=new JLabel();  Font labelFont=label.getFont();  Font boldFont=labelFont.deriveFont(Font.BOLD);  FontMetrics boldFontMetrics=label.getFontMetrics(boldFont);  Font smallFont=labelFont.deriveFont(labelFont.getSize2D() - 2.0f);  FontMetrics smallFontMetrics=label.getFontMetrics(smallFont);  label.setText("<html><p style=\"padding-top: 12pt; padding-right: 50pt; font: " + boldFont.getSize() + "pt "+ boldFont.getFamily()+ ";\"><b>"+ WordWrap.toHTML(WordWrap.wrap("" + description,DIALOG_WIDTH,boldFontMetrics))+ "</b></p>"+ "<p style=\"padding-top: 12pt; padding-right: 50pt; padding-bottom: 12pt; font: "+ smallFont.getSize()+ "pt "+ smallFont.getFamily()+ ";\">"+ WordWrap.toHTML(WordWrap.wrap("" + subDescription,DIALOG_WIDTH,smallFontMetrics))+ "</p></html>");  JOptionPane.showMessageDialog(frame,label,"Error",JOptionPane.INFORMATION_MESSAGE);}  }
class C{  public boolean hasActiveTasks(){  return userScheduler.hasActiveTasks() || userThreads.hasActiveNonDaemonThreads();}  }
class C{  private void shutdownAndAwaitTermination(ExecutorService pool){  Log.d(TAG,"Attempting to shutdown cordova threadpool");  if (!pool.isShutdown()) {    try {      pool.shutdown();      if (!pool.awaitTermination(5,TimeUnit.SECONDS)) {        pool.shutdownNow();        if (!pool.awaitTermination(30,TimeUnit.SECONDS)) {          System.err.println("Cordova thread pool did not terminate.");        }      }    } catch (    InterruptedException ie) {      Thread.currentThread().interrupt();    }  }}  }
class C{  public static double convertFrequency(double frequency,int nyquist,int totalLength){  return frequency / (2.0d * Math.PI) * ((double)totalLength / (double)nyquist);}  }
class C{  public void inputMethodTextChanged(InputMethodEvent event){  cmd_calculateDifference();}  }
class C{  private static int[] parseNrofRuns(String arg){  int val[]={0,1};  try {    if (arg.contains(RANGE_DELIMETER)) {      val[0]=Integer.parseInt(arg.substring(0,arg.indexOf(RANGE_DELIMETER))) - 1;      val[1]=Integer.parseInt(arg.substring(arg.indexOf(RANGE_DELIMETER) + 1,arg.length()));    } else {      val[0]=0;      val[1]=Integer.parseInt(arg);    }  } catch (  NumberFormatException e) {    System.err.println("Invalid argument '" + arg + "' for"+ " number of runs");    System.err.println("The argument must be either a single value, " + "or a range of values (e.g., '2:5'). Note that this " + "option has changed in version 1.3.");    System.exit(-1);  }  if (val[0] < 0) {    System.err.println("Starting run value can't be smaller than 1");    System.exit(-1);  }  if (val[0] >= val[1]) {    System.err.println("Starting run value can't be bigger than the " + "last run value");    System.exit(-1);  }  return val;}  }
class C{  public static boolean isBlank(String str){  if (str == null || str.length() == 0) {    return true;  }  for (  char c : str.toCharArray()) {    if (!Character.isWhitespace(c)) {      return false;    }  }  return true;}  }
class C{  public boolean excludeFromProjection(final IVariable<?> var){  Set<IVariable<?>> vars=(Set<IVariable<?>>)getProperty(Annotations.VARS_TO_EXCLUDE_FROM_PROJECTION,Annotations.DEFAULT_VARS_TO_EXCLUDE_FROM_PROJECTION);  return (vars != null) && vars.contains(var);}  }
class C{  @Override public boolean isEntityReference(){  return eventType == XMLStreamConstants.ENTITY_REFERENCE;}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  public final CC shrink(float... widthHeight){switch (widthHeight.length) {default :    throw new IllegalArgumentException("Illegal argument count: " + widthHeight.length);case 2:  shrinkY(widthHeight[1]);case 1:shrinkX(widthHeight[0]);}return this;}  }
class C{  public Object cast(Object object){  return null;}  }
class C{  @Ignore("NotSupported") @Test public void testPersistentPartitionedRegionWithGatewaySenderPersistenceEnabled_Restart2(){  Integer lnPort=(Integer)vm0.invoke(null);  Integer nyPort=(Integer)vm1.invoke(null);  createCacheInVMs(nyPort,vm2,vm3);  createReceiverInVMs(vm2,vm3);  createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);  String diskStore1=(String)vm4.invoke(null);  String diskStore2=(String)vm5.invoke(null);  String diskStore3=(String)vm6.invoke(null);  String diskStore4=(String)vm7.invoke(null);  LogWriterUtils.getLogWriter().info("The DS are: " + diskStore1 + ","+ diskStore2+ ","+ diskStore3+ ","+ diskStore4);  vm2.invoke(null);  vm3.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  startSenderInVMs("ln",vm4,vm5,vm6,vm7);  vm4.invoke(waitForSenderRunnable());  vm5.invoke(waitForSenderRunnable());  vm6.invoke(waitForSenderRunnable());  vm7.invoke(waitForSenderRunnable());  vm4.invoke(pauseSenderRunnable());  vm5.invoke(pauseSenderRunnable());  vm6.invoke(pauseSenderRunnable());  vm7.invoke(pauseSenderRunnable());  vm4.invoke(null);  LogWriterUtils.getLogWriter().info("Completed puts in the region");  vm4.invoke(killSenderRunnable());  vm5.invoke(killSenderRunnable());  vm6.invoke(killSenderRunnable());  vm7.invoke(killSenderRunnable());  LogWriterUtils.getLogWriter().info("Killed all the senders.");  createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);  LogWriterUtils.getLogWriter().info("Created back the cache");  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  LogWriterUtils.getLogWriter().info("Created the senders back from the disk store.");  startSenderInVMs("ln",vm4,vm5,vm6,vm7);  LogWriterUtils.getLogWriter().info("Started the senders.");  LogWriterUtils.getLogWriter().info("Waiting for senders running.");  vm4.invoke(waitForSenderRunnable());  vm5.invoke(waitForSenderRunnable());  vm6.invoke(waitForSenderRunnable());  vm7.invoke(waitForSenderRunnable());  LogWriterUtils.getLogWriter().info("All the senders are now running...");  vm2.invoke(null);  vm3.invoke(null);}  }
class C{  protected CommandResult executeCommand(HeadlessGfsh shell,String command){  assert (shell != null);  assert (command != null);  CommandResult commandResult=executeCommandWithoutClear(shell,command);  shell.clearEvents();  return commandResult;}  }
class C{  @Override public void CALL_RESULT(int res,String owner,String name,String desc){  CALL_RESULT(owner,name,desc);  if (env.topFrame().weInvokedInstrumentedCode()) {    return;  } else {    IntegerConstant value=ExpressionFactory.buildNewIntegerConstant(res);    env.topFrame().operandStack.pushBv32(value);  }}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (this == o)   return true;  if (!(o instanceof SolarisNumericGroupPrincipal))   return false;  SolarisNumericGroupPrincipal that=(SolarisNumericGroupPrincipal)o;  if (this.getName().equals(that.getName()) && this.isPrimaryGroup() == that.isPrimaryGroup())   return true;  return false;}  }
class C{  private boolean polling(long qAddr){  return mem.readByte(qAddr + 10) == 1;}  }
class C{  public K min(){  return min;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case EipPackage.SERVICE_INVOCATION__CONTEXT:    setContext(CONTEXT_EDEFAULT);  return;case EipPackage.SERVICE_INVOCATION__OPERATION_NAME:setOperationName(OPERATION_NAME_EDEFAULT);return;case EipPackage.SERVICE_INVOCATION__SERVICE_REF:setServiceRef((ServiceRef)null);return;}super.eUnset(featureID);}  }
class C{  public static void loadRoomAvatar(Context context,MXSession session,ImageView imageView,Room room){  if (null != room) {    VectorUtils.loadUserAvatar(context,session,imageView,room.getAvatarUrl(),room.getRoomId(),VectorUtils.getRoomDisplayName(context,session,room));  }}  }
class C{  public boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof LdapPrincipal) {    try {      return name.equals(getLdapName(((LdapPrincipal)object).getName()));    } catch (    InvalidNameException e) {      return false;    }  }  return false;}  }
class C{  public static void clearBaseTestDir(){  if (baseTestDir().exists())   assert delete(baseTestDir());}  }
class C{  public static Uri componentNameToUri(String packageName,String className){  return Applications.CONTENT_URI.buildUpon().appendEncodedPath(APPLICATION_PATH).appendPath(packageName).appendPath(className).build();}  }
class C{  private void logBufferStatistics(){  String[] lines=buffer.toString().split("\n");  for (  String str : lines) {    log.info(str);  }  logGraphicalBufferOccupancy(buffer.getOccupancyPercentage());}  }
class C{  public static IntentBuilder newSearch(){  return new NoArgsIntentBuilder(ACTION_SEARCH);}  }
class C{  private void validateGroupAcls(DBGroup targetGroup,List<DBAcl> acls) throws InvalidRequestException, SQLException {  if (acls.isEmpty()) {    throw new InvalidRequestException("acls must not be empty");  }  HashSet<Integer> uniqueMemberIdentities=new HashSet<>();  HashSet<Integer> uniqueMemberGroups=new HashSet<>();  for (  DBAcl acl : acls) {    if (acl.getGroupId().getId() != targetGroup.getId()) {      throw new InvalidRequestException("acl applies to the wrong group");    }    boolean isIdentityAcl=acl.getMemberIdentityId() != null;    boolean isGroupAcl=acl.getMemberGroupId() != null;    if (!(isIdentityAcl ^ isGroupAcl)) {      throw new InvalidRequestException("acl must apply to exactly one identity or group; " + "specifies identity: " + isIdentityAcl + "; specifies group: "+ isGroupAcl);    }    if (isIdentityAcl) {      assert !isGroupAcl;      if (!uniqueMemberIdentities.add(acl.getMemberIdentityId().getId())) {        throw new InvalidRequestException("duplicate identity: " + acl.getMemberIdentityId().getId());      }    } else {      assert !isIdentityAcl;      if (!uniqueMemberGroups.add(acl.getMemberGroupId().getId())) {        throw new InvalidRequestException("duplicate group: " + acl.getMemberGroupId().getId());      }    }  }  if (!uniqueMemberIdentities.isEmpty()) {    if (DBIdentity.getUserNamesFromIds(manager,uniqueMemberIdentities).size() != uniqueMemberIdentities.size()) {      throw new InvalidRequestException("some identities do not exist");    }  }  if (!uniqueMemberGroups.isEmpty()) {    QueryBuilder<DBGroup,Integer> groupQuery=getDirectlyAccessibleGroupsQuery(uniqueMemberGroups);    if (groupQuery.countOf() != uniqueMemberGroups.size()) {      throw new InvalidRequestException("some groups are not accessible");    }  }}  }
class C{  public void copyFrom(Properties src,boolean shouldResetDefaults){  Enumeration keys=src.keys();  while (keys.hasMoreElements()) {    String key=(String)keys.nextElement();    if (!isLegalPropertyKey(key))     throw new IllegalArgumentException(XSLMessages.createMessage(XSLTErrorResources.ER_OUTPUT_PROPERTY_NOT_RECOGNIZED,new Object[]{key}));    Object oldValue=m_properties.get(key);    if (null == oldValue) {      String val=(String)src.get(key);      if (shouldResetDefaults && key.equals(OutputKeys.METHOD)) {        setMethodDefaults(val);      }      m_properties.put(key,val);    } else     if (key.equals(OutputKeys.CDATA_SECTION_ELEMENTS)) {      m_properties.put(key,(String)oldValue + " " + (String)src.get(key));    }  }}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  public XRTreeFrag(int root,XPathContext xctxt){  super(null);  initDTM(root,xctxt);}  }
class C{  public void render(Appendable writer,Map<String,Object> context) throws Exception {  if (modelForm instanceof ModelGrid) {    WidgetWorker.incrementPaginatorNumber(context);  }  context.put("viewIndex",Paginator.getViewIndex(modelForm,context));  context.put("viewSize",Paginator.getViewSize(modelForm,context));  modelForm.runFormActions(context);  if (modelForm instanceof ModelGrid) {    context.put("useRequestParameters",Boolean.FALSE);  }  int positions=1;  for (  ModelFormField modelFormField : modelForm.getFieldList()) {    int curPos=modelFormField.getPosition();    if (curPos > positions) {      positions=curPos;    }    FieldInfo currentFieldInfo=modelFormField.getFieldInfo();    if (currentFieldInfo == null) {      throw new IllegalArgumentException("Error rendering form, a field has no FieldInfo, ie no sub-element for the type of field for field named: " + modelFormField.getName());    }  }  if ("single".equals(modelForm.getType())) {    this.renderSingleFormString(writer,context,positions);  } else   if ("list".equals(modelForm.getType())) {    this.renderListFormString(writer,context,positions);  } else   if ("multi".equals(modelForm.getType())) {    this.renderMultiFormString(writer,context,positions);  } else   if ("upload".equals(modelForm.getType())) {    this.renderSingleFormString(writer,context,positions);  } else {    if (UtilValidate.isEmpty(modelForm.getType())) {      throw new IllegalArgumentException("The form 'type' tag is missing or empty on the form with the name " + modelForm.getName());    } else {      throw new IllegalArgumentException("The form type " + modelForm.getType() + " is not supported for form with name "+ modelForm.getName());    }  }}  }
class C{  public boolean isReserved(){  return false;}  }
class C{  public static void main(String[] args) throws Exception {  try {    int exitCode=ToolRunner.run(new KafkaExportJob(),args);    System.exit(exitCode);  } catch (  Exception e) {    LOG.error(e.getMessage());    System.exit(1);  }}  }
class C{  public List<VirtualArrayRestRep> findByConnectedHost(HostRestRep host){  return findByConnectedHost(ResourceUtils.id(host),null);}  }
class C{  @Override public boolean contains(Object value){  final Iterator<Comparable> iter=new StepIterator(this,1);  if (value == null) {    return false;  }  while (iter.hasNext()) {    if (DefaultTypeTransformation.compareEqual(value,iter.next()))     return true;  }  return false;}  }
class C{  public static void deleteReplicationGroup(final StorageSystem storage,final String groupName,final DbClient dbClient,final SmisCommandHelper helper,final CIMObjectPathFactory cimPath){  try {    CIMObjectPath cgPath=cimPath.getReplicationGroupPath(storage,groupName);    CIMObjectPath replicationSvc=cimPath.getControllerReplicationSvcPath(storage);    CIMInstance cgPathInstance=helper.checkExists(storage,cgPath,false,false);    if (cgPathInstance != null) {      CIMArgument[] inArgs=helper.getDeleteReplicationGroupInputArguments(storage,groupName);      helper.invokeMethod(storage,replicationSvc,SmisConstants.DELETE_GROUP,inArgs,new CIMArgument[5]);    }  } catch (  Exception e) {    _log.error("Failed to delete replication group: ",e);  }}  }
class C{  public boolean isPathSelected(TreePath path){  return getSelectionModel().isPathSelected(path);}  }
class C{  public StackedBarChart(final String title,final String xAxisLabel,final String yAxisLabel,final String[] categories){  super(title,xAxisLabel,yAxisLabel);  this.dataset=new DefaultCategoryDataset();  this.chart=createChart(title,xAxisLabel,yAxisLabel,this.dataset);  this.plot=this.chart.getCategoryPlot();  this.categories=categories.clone();}  }
class C{  @Interruptible public static void enableCollection(){  Selected.Plan.get().enableCollection();  collectionEnabled=true;}  }
class C{  protected void fillConditionsLayout(ConditionsFocusType conditionsFocusType){  layout.setSpacing(false);  for (  Component component : conditionsLayout.getComponents()) {    conditionsLayout.remove(component);  }  paramEditComponentToFocus=null;  recursivelyCreateConditionsLayout(conditionsFocusType,false,conditions.getRootNodes(),conditionsLayout,0);  if (!conditionsLayout.getComponents().isEmpty())   layout.setSpacing(true);}  }
class C{  @Override public Integer[] batchInsert(List<Map<String,Object>> datas,String tabNameSuffix){  if (logger.isDebugEnabled()) {    logger.debug("batchInsert(List<Map<String,Object>>, String) - start");  }  validate(datas);  Map<String,Object> cols=this.merge(datas);  Integer[] returnIntegerArray=batchInsert(new ArrayList(cols.keySet()),datas,tabNameSuffix);  if (logger.isDebugEnabled()) {    logger.debug("batchInsert(List<Map<String,Object>>, String) - end");  }  return returnIntegerArray;}  }
class C{  public void removeObjectActions(String objectResource){  if (this.conditions != null) {    return;  }  if (this.resources.size() > 1) {    this.resources.remove(objectResource);  } else {    this.actions.removeAll(Constants.READ_WRITE_OBJECT_ACTIONS);  }}  }
class C{  public static RoutingKey create(Object object){  return new RoutingKey(object.hashCode());}  }
class C{  public void reset(){  npoints=0;  bounds=null;}  }
class C{  public boolean put(int key,double value){  int i=indexOfInsertion(key);  if (i < 0) {    i=-i - 1;    this.values[i]=value;    return false;  }  if (this.distinct > this.highWaterMark) {    int newCapacity=chooseGrowCapacity(this.distinct + 1,this.minLoadFactor,this.maxLoadFactor);    rehash(newCapacity);    return put(key,value);  }  this.table[i]=key;  this.values[i]=value;  if (this.state[i] == FREE)   this.freeEntries--;  this.state[i]=FULL;  this.distinct++;  if (this.freeEntries < 1) {    int newCapacity=chooseGrowCapacity(this.distinct + 1,this.minLoadFactor,this.maxLoadFactor);    rehash(newCapacity);  }  return true;}  }
class C{  public long diff(){  if (running)   return System.currentTimeMillis() - startTime; else   return stopTime - startTime;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case EipPackage.FILTER__NAME:    setName(NAME_EDEFAULT);  return;case EipPackage.FILTER__TO_CHANNELS:getToChannels().clear();return;case EipPackage.FILTER__FROM_CHANNELS:getFromChannels().clear();return;case EipPackage.FILTER__EXPRESSION:setExpression(EXPRESSION_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public InvalidRequestException(String message,String param,Throwable e){  super(message,e);  this.param=param;}  }
class C{  public static void main(String[] args){  runDataGenerator(new MexicanHat(),args);}  }
class C{  @ModelAttribute public void addDataToModel(ModelMap model){  SearchData dataForSearchBar=new SearchData();  dataForSearchBar.setSearchMode("natural");  dataForSearchBar.setCurrentPage(1);  dataForSearchBar.setQueryText(null);  dataForSearchBar.setNumberResultsPerPage(10);  model.put("advancedSearchData",dataForSearchBar);}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.startBT=(Button)this.findViewById(R.id.start_bt);}  }
class C{  public void save(String filename) throws IOException {  DataOutputStream dos=new DataOutputStream(new FileOutputStream(filename,false));  this.out(dos);  dos.close();}  }
class C{  public boolean containsAll(Collection coll){  Iterator e=coll.iterator();  while (e.hasNext())   if (!contains(e.next()))   return false;  return true;}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  public boolean render(InternalContextAdapter context,Writer writer,Node node) throws IOException, ResourceNotFoundException, ParseErrorException, MethodInvocationException {  if (node.jjtGetChild(0) == null) {    rsvc.error("#parse() error :  null argument");    return false;  }  Object value=node.jjtGetChild(0).value(context);  if (value == null) {    rsvc.error("#parse() error :  null argument");    return false;  }  String arg=value.toString();  Object[] templateStack=context.getTemplateNameStack();  if (templateStack.length >= rsvc.getInt(RuntimeConstants.PARSE_DIRECTIVE_MAXDEPTH,20)) {    StringBuffer path=new StringBuffer();    for (int i=0; i < templateStack.length; ++i) {      path.append(" > " + templateStack[i]);    }    rsvc.error("Max recursion depth reached (" + templateStack.length + ")"+ " File stack:"+ path);    return false;  }  Template t=null;  try {    t=rsvc.getTemplate(arg,getInputEncoding(context));  } catch (  ResourceNotFoundException rnfe) {    rsvc.error("#parse(): cannot find template '" + arg + "', called from template "+ context.getCurrentTemplateName()+ " at ("+ getLine()+ ", "+ getColumn()+ ")");    throw rnfe;  }catch (  ParseErrorException pee) {    rsvc.error("#parse(): syntax error in #parse()-ed template '" + arg + "', called from template "+ context.getCurrentTemplateName()+ " at ("+ getLine()+ ", "+ getColumn()+ ")");    throw pee;  }catch (  Exception e) {    rsvc.error("#parse() : arg = " + arg + ".  Exception : "+ e);    return false;  }  try {    context.pushCurrentTemplateName(arg);    ((SimpleNode)t.getData()).render(context,writer);  } catch (  Exception e) {    if (e instanceof MethodInvocationException) {      throw (MethodInvocationException)e;    }    rsvc.error("Exception rendering #parse( " + arg + " )  : "+ e);    return false;  } finally {    context.popCurrentTemplateName();  }  return true;}  }
class C{  public StringConverter(){}  }
class C{  public final int countIPs(){  final String ipx=this.dna.get(Seed.IP);  Set<String> ip6s=getIPv6Entries();  if (ip6s == null || ip6s.size() == 0) {    return (ipx == null || ipx.isEmpty()) ? 0 : 1;  }  return (ipx == null || ipx.isEmpty()) ? ip6s.size() : ip6s.size() + 1;}  }
class C{  public static void listJson(){  try {    performListJson(VirtualArrayUtils.getVirtualArrays(),new JsonItemOperation());  } catch (  Exception e) {    renderJSON(DataTablesSupport.createJSON(Collections.emptyList(),params,getUserMessage(e)));  }}  }
class C{  private void doReleaseShared(){  for (; ; ) {    Node h=head;    if (h != null && h != tail) {      int ws=h.waitStatus;      if (ws == Node.SIGNAL) {        if (!compareAndSetWaitStatus(h,Node.SIGNAL,0))         continue;        unparkSuccessor(h);      } else       if (ws == 0 && !compareAndSetWaitStatus(h,0,Node.PROPAGATE))       continue;    }    if (h == head)     break;  }}  }
class C{  public static Object invokeExactMethod(final Object object,final String methodName,Object[] args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {  if (args == null) {    args=ArrayUtils.EMPTY_OBJECT_ARRAY;  }  int arguments=args.length;  Class<?>[] parameterTypes=new Class[arguments];  for (int i=0; i < arguments; i++) {    parameterTypes[i]=args[i].getClass();  }  return MethodUtils.invokeExactMethod(object,methodName,args,parameterTypes);}  }
class C{  static public void withinBounds(int arg,int min,int max,String argName){  if (!(min <= arg && arg <= max)) {    throw new IllegalArgumentException(String.format("%s (%d) out of bounds",argName,arg));  }}  }
class C{  public void reset(){  element=null;  previous=null;  next=null;}  }
class C{  public ByteVector putShort(final int s){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  static public void showError(String str){  if (statusLabel == null) {    System.out.println(str);    return;  }  ArgumentChecking.notNull(str,"str");  statusLabel.showError(str);}  }
class C{  private boolean containsNullValue(){  Entry<K,V>[] tab=getTable();  for (int i=tab.length; i-- > 0; )   for (Entry e=tab[i]; e != null; e=e.next)   if (e.value == null)   return true;  return false;}  }
class C{  public static <V extends Parcelable>void writeHashMapStringKey(Map<String,V> map,Parcel out,int flags){  if (map != null) {    out.writeInt(map.size());    for (    Entry<String,V> entry : map.entrySet()) {      out.writeString(entry.getKey());      out.writeParcelable(entry.getValue(),flags);    }  } else {    out.writeInt(-1);  }}  }
class C{  public PLImage(){  super();  mBitmap=null;  mWidth=mHeight=0;  mIsRecycled=mIsLoaded=false;}  }
class C{  private static int estimateUnitsBetween(long t0,long t1,int field){  long d=t1 - t0;switch (field) {case Calendar.MILLISECOND:    return (int)d;case Calendar.SECOND:  return (int)(d / SECOND_MILLIS + .5);case Calendar.MINUTE:return (int)(d / MINUTE_MILLIS + .5);case Calendar.HOUR_OF_DAY:case Calendar.HOUR:return (int)(d / HOUR_MILLIS + .5);case Calendar.DAY_OF_WEEK_IN_MONTH:case Calendar.DAY_OF_MONTH:return (int)(d / DAY_MILLIS + .5);case Calendar.WEEK_OF_YEAR:return (int)(d / WEEK_MILLIS + .5);case Calendar.MONTH:return (int)(d / MONTH_MILLIS + .5);case Calendar.YEAR:return (int)(d / YEAR_MILLIS + .5);case DECADE:return (int)(d / DECADE_MILLIS + .5);case CENTURY:return (int)(d / CENTURY_MILLIS + .5);case MILLENIUM:return (int)(d / MILLENIUM_MILLIS + .5);default :return 0;}}  }
class C{  private boolean removeMapping(Object rowKey,Object columnKey,Object value){  if (containsMapping(rowKey,columnKey,value)) {    remove(rowKey,columnKey);    return true;  }  return false;}  }
class C{  boolean isValidScheme(String scheme){  for (int i=0; i < scheme.length(); i++) {    char ch=scheme.charAt(i);    if (URIHelper.isAlpha(ch) || URIHelper.isNumeric(ch) || ch == '-') {      continue;    }    return false;  }  return true;}  }
class C{  public boolean isConstant(){  if (isFinal() && isVariable() && value != null) {    try {      modifiers&=~M_FINAL;      return ((Expression)value).isConstant();    }  finally {      modifiers|=M_FINAL;    }  }  return false;}  }
class C{  public static String encode(final String unescaped,final BitSet allowed) throws URIException {  return encode(unescaped,allowed,URI.getDefaultProtocolCharset());}  }
class C{  public final double unclassified(){  return m_delegate.unclassified();}  }
class C{  public static void onEvent(final Context context,final String event_id,final String label,final int acc){  onEvent(context,event_id,label,acc,null);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public NSString(String string){  content=string;}  }
class C{  public static void updateAddReminderButton(View view,ArrayList<LinearLayout> reminders,int maxReminders){  View reminderAddButton=view.findViewById(R.id.reminder_add);  if (reminderAddButton != null) {    if (reminders.size() >= maxReminders) {      reminderAddButton.setEnabled(false);      reminderAddButton.setVisibility(View.GONE);    } else {      reminderAddButton.setEnabled(true);      reminderAddButton.setVisibility(View.VISIBLE);    }  }}  }
class C{  public static byte[] serializeToByteArray(Serializable value){  try {    ByteArrayOutputStream buffer=new ByteArrayOutputStream();    try (ObjectOutputStream oos=new ObjectOutputStream(new SnappyOutputStream(buffer))){      oos.writeObject(value);    }     return buffer.toByteArray();  } catch (  IOException exn) {    throw new IllegalArgumentException("unable to serialize " + value,exn);  }}  }
class C{  DeathMatchCreature spawnNewCreature(final Creature template,final Player player,final DeathmatchInfo deathmatchInfo){  DeathMatchCreature creature=new DeathMatchCreature(new ArenaCreature(template.getNewInstance(),deathmatchInfo.getArena().getShape()));  if (StendhalRPAction.placeat(deathmatchInfo.getZone(),creature,player.getX(),player.getY(),deathmatchInfo.getArena().getShape())) {    creature.clearDropItemList();    creature.setTarget(player);    creature.setPlayerToReward(player);    spawnedCreatures.add(creature);  } else {    logger.info(" could not add a creature: " + creature);    creature=null;  }  return creature;}  }
class C{  public void incrementApplied(){  applied++;}  }
class C{  @Override public final R visitWildcard(AnnotatedWildcardType type,P p){  defaultAction(type,p);  return super.visitWildcard(type,p);}  }
class C{  protected Command installCommands(Command clear,Command t9){  Form f=getComponentForm();  if (f != null) {    Command original=f.getClearCommand();    if (original instanceof CommandHandler) {      original=originalClearCommand;    }    if (replaceMenu && originalCommands == null) {      originalCommands=new Command[f.getCommandCount()];      int olen=originalCommands.length;      for (int iter=0; iter < olen; iter++) {        originalCommands[iter]=f.getCommand(iter);      }      f.removeAllCommands();      if (Display.getInstance().isThirdSoftButton()) {        getComponentForm().getMenuBar().addSelectCommand(getSelectCommandText());        selectCommand=getComponentForm().getCommand(0);      }    }    f.addCommand(clear,0);    f.addCommand(t9,0);    f.setClearCommand(clear);    f.revalidate();    return original;  }  return null;}  }
class C{  public final int toInt(){  return mValue;}  }
class C{  public void resetAllSeparateAndConquer(){  this.getAllSeparateAndConquerLevels().clear();}  }
class C{  public static SnapshotMode parse(String value){  if (value == null)   return null;  value=value.trim();  for (  SnapshotMode option : SnapshotMode.values()) {    if (option.getValue().equalsIgnoreCase(value))     return option;  }  return null;}  }
class C{  public short[] addVect(short[] vector1,short[] vector2){  if (vector1.length != vector2.length) {    throw new RuntimeException("Multiplication is not possible!");  }  short rslt[]=new short[vector1.length];  for (int n=0; n < rslt.length; n++) {    rslt[n]=GF2Field.addElem(vector1[n],vector2[n]);  }  return rslt;}  }
class C{  private static String uuid(){  String dateInHex=Long.toHexString(System.currentTimeMillis()).toUpperCase();  String partDate=dateInHex.substring(0,8) + "-" + dateInHex.substring(8);  char[] uuid=new char[24];  int r;  uuid[1]=uuid[6]=uuid[11]='-';  uuid[0]='4';  for (int i=0; i < 24; i++) {    if (uuid[i] == 0) {      r=(int)(Math.random() * 16);      uuid[i]=CHARS[(i == 19) ? (r & 0x3) | 0x8 : r & 0xf];    }  }  return partDate + new String(uuid);}  }
class C{  private char isQuote(int index){  if (index >= input.length()) {    return 0;  }  char c=input.charAt(index);  for (int i=0; i < quoteChars.length; i++) {    if (c == quoteChars[i]) {      return c;    }  }  return 0;}  }
class C{  public void mouseExited(MouseEvent e){}  }
class C{  public void testEncodeV6(){  byte[] expectedReturn=msgFixture.requestedAddressFamilyV6;  requestedAddressFamilyAttribute.setFamily(MsgFixture.REQUESTED_ADDRESS_FAMILY_ATTRIBUTE_V6);  byte[] actualReturn=requestedAddressFamilyAttribute.encode();  assertTrue("RequestedAddressFamilyAttribute.encode() did not " + "properly encode a sample attribute for IPv6 family",Arrays.equals(expectedReturn,actualReturn));}  }
class C{  public boolean isAbsolute(){  int nlabels=labels();  if (nlabels == 0)   return false;  return name[offset(nlabels - 1)] == 0;}  }
class C{  public void serverHandshake(ProtocolHandshakeResponseValidator validator,long minSeqNo,long maxSeqNo,boolean encryptionInUse) throws ReplicatorException, IOException, InterruptedException {  ProtocolHandshake handshake=new ProtocolHandshake();  String masterSourceId=pluginContext.getSourceId();  handshake.setCapability(SOURCE_ID,masterSourceId);  handshake.setCapability(ROLE,pluginContext.getRoleName());  handshake.setCapability(VERSION,ManifestParser.parseReleaseWithBuildNumber());  handshake.setCapability(MIN_SEQNO,new Long(minSeqNo).toString());  handshake.setCapability(MAX_SEQNO,new Long(maxSeqNo).toString());  handshake.setCapability(AUTH_REQUIRED,new Boolean(encryptionInUse).toString());  serverCapabilities=new TungstenProperties(handshake.getCapabilities());  writeMessage(handshake);  ProtocolMessage response=readMessage();  if (response instanceof ProtocolHandshakeResponse) {    ProtocolHandshakeResponse handshakeResponse=(ProtocolHandshakeResponse)response;    this.clientSourceId=handshakeResponse.getSourceId();    try {      validator.validateResponse(masterSourceId,handshakeResponse);      writeMessage(new ProtocolOK(new SeqNoRange(minSeqNo,maxSeqNo)));    } catch (    THLException e) {      writeMessage(new ProtocolNOK("Client response validation failed: " + e.getMessage()));      throw e;    }  } else {    writeMessage(new ProtocolNOK("Protocol error: message=" + response.getClass().getName()));    throw new THLException("Protocol error: message=" + response.getClass().getName());  }}  }
class C{  private void writeFormatted(Geometry geometry,boolean useFormatting,Writer writer) throws IOException {  this.useFormatting=useFormatting;  formatter=createFormatter(geometry.getPrecisionModel());  appendGeometryTaggedText(geometry,0,writer);}  }
class C{  private Document parseRouteFile() throws Exception {  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  factory.setNamespaceAware(true);  DocumentBuilder builder=factory.newDocumentBuilder();  return builder.parse(routeFile);}  }
class C{  public WeakReference(java.lang.Object ref){  this.objReference=objReference;}  }
class C{  public Dataset toFilesOnly(){  Dataset dataset=new Dataset();synchronized (m_files) {    for (    DataKey key : getAllFileKeys()) {      DataFile file=getFile(key);      dataset.addFile(key,file);    }  }  dataset.setContext(m_context);  return dataset;}  }
class C{  public EaseOut(){  this(DEFAULT_AMPLITUDE,DEFAULT_PERIOD);}  }
class C{  public static int nextOid(long[] index,int start) throws SnmpStatusException {  if (start >= index.length) {    throw new SnmpStatusException(SnmpStatusException.noSuchName);  } else {    return start + 1;  }}  }
class C{  public static boolean isCommentNode(Node node){  if (node == null)   return false;  return (node.getNodeType() == Node.COMMENT_NODE);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void syncQueue(){  Logger.d(TAG,"Pending Syncs: %d",mSyncQueue != null ? mSyncQueue.size() : 0);  if (mSyncQueue != null && !mSyncQueue.isEmpty()) {    final MD5 md5=new MD5();    for (    ContactSyncEntry currentSyncEntry : mSyncQueue) {      filterAlreadySynced(currentSyncEntry);      Logger.d(TAG,"Numbers to sync: %d",currentSyncEntry.numbersToSync.size());      final UploadContactRequestModel uploadContactRequestModel=new UploadContactRequestModel();      String hashedNumber;      String contactName="";      List<Contacts> contactsList=new ArrayList<Contacts>();      for (int i=0; i < currentSyncEntry.numbersToSync.size(); i++) {        Contacts contacts=new Contacts();        hashedNumber=numberToMd5(currentSyncEntry.numbersToSync.get(i),md5);        if (i < currentSyncEntry.nameToSync.size())         contactName=currentSyncEntry.nameToSync.get(i);        if (!TextUtils.isEmpty(hashedNumber)) {          contacts.setHash_mobile_numbers(hashedNumber);          contacts.setName(contactName);        }        contactsList.add(contacts);      }      uploadContactRequestModel.setContacts(contactsList);      if (contactsList.size() != 0) {        long lastContactBatchUploaded=SharedPreferenceHelper.getLong(R.string.pref_last_contact_back_uploaded_time);        if ((Utils.getCurrentEpochTime() - lastContactBatchUploaded) < AppConstants.CONTACT_PER_BATCH_UPLOAD_INTERVAL) {        } else {          final YeloApi api=((YeloApplication)getApplication()).getYeloApi();          try {            final UploadContactsModel response=api.uploadContacts(uploadContactRequestModel);            if ("success".equals(response.status)) {              currentSyncEntry.setSynced(true);              SharedPreferenceHelper.set(R.string.pref_last_contact_back_uploaded_time,Utils.getCurrentEpochTime());            }          } catch (          Exception exception) {            currentSyncEntry.setSynced(false);          }        }      }    }  }}  }
class C{  private void fireBindTargetChangeSync(BindTarget[] arr,Component source,String propertyName,Object oldValue,Object newValue){  int alen=arr.length;  for (int iter=0; iter < alen; iter++) {    arr[iter].propertyChanged(source,propertyName,oldValue,newValue);  }}  }
class C{  public boolean isTopDown(){  return topDown;}  }
class C{  @Override public double disc(int k){  return 1 / (k + 1.0);}  }
class C{  public NSEC3Record(Name name,int dclass,long ttl,int hashAlg,int flags,int iterations,byte[] salt,byte[] next,int[] types){  super(name,Type.NSEC3,dclass,ttl);  this.hashAlg=checkU8("hashAlg",hashAlg);  this.flags=checkU8("flags",flags);  this.iterations=checkU16("iterations",iterations);  if (salt != null) {    if (salt.length > 255)     throw new IllegalArgumentException("Invalid salt");    if (salt.length > 0) {      this.salt=new byte[salt.length];      System.arraycopy(salt,0,this.salt,0,salt.length);    }  }  if (next.length > 255) {    throw new IllegalArgumentException("Invalid next hash");  }  this.next=new byte[next.length];  System.arraycopy(next,0,this.next,0,next.length);  this.types=new TypeBitmap(types);}  }
class C{  public void putAt(int index,Object newValue) throws SQLException {  index=normalizeIndex(index);  getResultSet().updateObject(index,newValue);}  }
class C{  public static Format generateFormat(String codec){  return (Format)SUPPORTED_CODECS.get(codec.toLowerCase());}  }
class C{  static int makeTag(final int fieldNumber,final int wireType){  return (fieldNumber << TAG_TYPE_BITS) | wireType;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.EXPRESSION_ANNOTATION_LIST;}  }
class C{  @Override public void inviteFriends(String appLinkUrl,String previewImageUrl){  inviteFriends(appLinkUrl,previewImageUrl,null);}  }
class C{  @Override protected void doAction(){  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    KeyStoreState currentState=history.getCurrentState();    String alias=kseFrame.getSelectedEntryAlias();    Password password=getEntryPassword(alias,currentState);    if (password == null) {      return;    }    KeyStoreState newState=currentState.createBasisForNextState(this);    KeyStore keyStore=newState.getKeyStore();    Key key=keyStore.getKey(alias,password.toCharArray());    DGetAlias dGetAlias=new DGetAlias(frame,res.getString("RenameKeyAction.NewEntryAlias.Title"),alias);    dGetAlias.setLocationRelativeTo(frame);    dGetAlias.setVisible(true);    String newAlias=dGetAlias.getAlias();    if (newAlias == null) {      return;    }    if (newAlias.equalsIgnoreCase(alias)) {      JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString("RenameKeyAction.RenameAliasIdentical.message"),alias),res.getString("RenameKeyAction.RenameEntry.Title"),JOptionPane.WARNING_MESSAGE);      return;    }    if (keyStore.containsAlias(newAlias)) {      String message=MessageFormat.format(res.getString("RenameKeyAction.OverWriteEntry.message"),newAlias);      int selected=JOptionPane.showConfirmDialog(frame,message,res.getString("RenameKeyAction.RenameEntry.Title"),JOptionPane.YES_NO_OPTION);      if (selected != JOptionPane.YES_OPTION) {        return;      }      keyStore.deleteEntry(newAlias);      newState.removeEntryPassword(newAlias);    }    keyStore.setKeyEntry(newAlias,key,password.toCharArray(),null);    newState.setEntryPassword(newAlias,new Password(password));    keyStore.deleteEntry(alias);    newState.removeEntryPassword(alias);    currentState.append(newState);    kseFrame.updateControls(true);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  private void createUpdateSql(String columnName,String value){  m_createSqlColumn.add(columnName);  m_createSqlValue.add(value);  log.finest("#" + m_createSqlColumn.size() + " - "+ columnName+ "="+ value);}  }
class C{  public FluentSupplier<R> partiallyApply(final T param){  return new FluentSupplier<>(PartialApplicator.partial(param,fn));}  }
class C{  public boolean resumeSrdfGroupStep(final URI systemURI,final RemoteDirectorGroup group,final List<URI> sourceVolumes,final List<URI> targetVolumes,String opId){  log.info("START Resume SRDF group {} for {}",group.getLabel(),systemURI);  TaskCompleter completer=null;  try {    WorkflowStepCompleter.stepExecuting(opId);    StorageSystem system=getStorageSystem(systemURI);    List<Volume> volumes=utils.getAssociatedVolumesForSRDFGroup(system,group);    Collection<Volume> tgtVolumes=newArrayList(filter(volumes,utils.volumePersonalityPredicate(TARGET)));    if (!tgtVolumes.isEmpty() && tgtVolumes.iterator().hasNext()) {      List<URI> combinedVolumeList=new ArrayList<URI>();      combinedVolumeList.addAll(sourceVolumes);      combinedVolumeList.addAll(targetVolumes);      completer=new SRDFTaskCompleter(combinedVolumeList,opId);      getRemoteMirrorDevice().doResumeLink(system,tgtVolumes.iterator().next(),false,completer);    } else {      log.info("There are no more volumes in the SRDF group {} {}, so no need to call resume.",group.getLabel(),group.getId());      WorkflowStepCompleter.stepSucceded(opId);    }  } catch (  Exception e) {    ServiceError error=DeviceControllerException.errors.jobFailed(e);    if (null != completer) {      completer.error(dbClient,error);    }    WorkflowStepCompleter.stepFailed(opId,error);    return false;  }  return true;}  }
class C{  public String next(){  int first=data.getFirst();  scroll(first + data.getRows());  return (null);}  }
class C{  public SQLSyntaxErrorException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  public synchronized void update(){  final boolean isSyncInProgress=!mActiveSyncContexts.isEmpty();  if (isSyncInProgress == mLastWasSyncing)   return;  final long now=SystemClock.elapsedRealtime();  if (isSyncInProgress) {    mWhenSyncStarted=now;  } else {    mTimeSpentSyncing+=now - mWhenSyncStarted;  }  mLastWasSyncing=isSyncInProgress;}  }
class C{  public PermuteRowsWrapper(DataWrapper data,Parameters params){  if (data == null) {    throw new NullPointerException("The given data must not be null");  }  DataSet originalData=(DataSet)data.getSelectedDataModel();  DataSet copy=originalData.copy();  copy.permuteRows();  this.setDataModel(copy);  this.setSourceGraph(data.getSourceGraph());  LogDataUtils.logDataModelList("Parent data in which rows have been randomly permuted.",getDataModelList());}  }
class C{  public BeanContextServicesSupport(BeanContextServices peer){  this(peer,null,false,true);}  }
class C{  public void normalize(){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);}  }
class C{  @Override public int hashCode(){  int result;  result=this.x.hashCode();  result=29 * result + (this.y != null ? this.y.hashCode() : 0);  return result;}  }
class C{  public static void print(Tax tax,double from,double to,double interval){  System.out.println("---------------------------------------------------------------------\n" + "Taxable       Single      Married Joint       Married        Head of\n" + "Income                    or Qualifying       Separate       a House\n"+ "                          Widow(er)\n"+ "---------------------------------------------------------------------");  for (double taxableIncome=from; taxableIncome <= to; taxableIncome+=interval) {    tax.setTaxableIncome(taxableIncome);    System.out.printf("%-13.0f",taxableIncome);    tax.setFilingStatus(tax.SINGLE_FILER);    System.out.printf("%8.2f",tax.getTax());    tax.setFilingStatus(tax.MARRIED_JOINTLY_OR_QUALIFYING_WIDOWER);    System.out.printf("%15.2f",tax.getTax());    tax.setFilingStatus(tax.MARRIED_SEPARATELY);    System.out.printf("%18.2f",tax.getTax());    tax.setFilingStatus(tax.HEAD_OF_HOUSEHOLD);    System.out.printf("%15.2f\n",tax.getTax());  }}  }
class C{  public static boolean isValidKey(byte[] key){  for (int i=0; i < KLVPacket.KEY_FIELD_SIZE; i++) {    if ((IndexTableSegment.KEY_MASK[i] != 0) && (IndexTableSegment.KEY[i] != key[i])) {      return false;    }  }  return true;}  }
class C{  public void doubleBufferingChanged(JRootPane rootPane){}  }
class C{  public OMLine(double lat_1,double lon_1,double lat_2,double lon_2,int lineType){  this(lat_1,lon_1,lat_2,lon_2,lineType,-1);}  }
class C{  public T caseStrictness_(Strictness_ object){  return null;}  }
class C{  public static Document parseXML(File xmlFile){  try {    DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();    DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();    Document doc=dBuilder.parse(xmlFile);    doc.getDocumentElement().normalize();    return doc;  } catch (  IOException ioe) {    DelphiUtils.LOG.error("Error parsing file: " + ioe.getMessage());    return null;  }catch (  Exception e) {    DelphiUtils.LOG.error("XML Error: " + e.getMessage());    return null;  }}  }
class C{  public void assertEquals(Object[] expected,Object[] actual){  if (expected == null || actual == null) {    assertTrue(expected == actual);    return;  }  assertEquals(expected.length,actual.length);  for (int i=0; i < expected.length; i++) {    if (expected[i] == null || actual[i] == null) {      if (expected[i] != actual[i]) {        fail("[" + i + "]: expected: "+ expected[i]+ " actual: "+ actual[i]);      }    } else     if (!expected[i].equals(actual[i])) {      fail("[" + i + "]: expected: "+ expected[i]+ " actual: "+ actual[i]);    }  }}  }
class C{  private static void applyInvokeWithSecurityPolicy(Arguments args,Credentials peer,String peerSecurityContext) throws ZygoteSecurityException {  int peerUid=peer.getUid();  if (args.invokeWith != null && peerUid != 0) {    throw new ZygoteSecurityException("Peer is not permitted to specify " + "an explicit invoke-with wrapper command");  }  if (args.invokeWith != null) {    boolean allowed=SELinux.checkSELinuxAccess(peerSecurityContext,peerSecurityContext,"zygote","specifyinvokewith");    if (!allowed) {      throw new ZygoteSecurityException("Peer is not permitted to specify " + "an explicit invoke-with wrapper command");    }  }}  }
class C{  @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DomPackage.TAG_TITLE__TAG:    if (eInternalContainer() != null)     msgs=eBasicRemoveFromContainer(msgs);  return basicSetTag((Tag)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public void updateIcon(){  setIcon(determineIcon(typeMember));}  }
class C{  public static int[] sequence(int start,int end){  if (start >= end) {    return EMPTY_INTS;  }  int[] ret=new int[end - start];  for (int j=0; start < end; start++, j++) {    ret[j]=start;  }  return ret;}  }
class C{  public TrainSchedule newSchedule(String name){  TrainSchedule schedule=getScheduleByName(name);  if (schedule == null) {    _id++;    schedule=new TrainSchedule(Integer.toString(_id),name);    Integer oldSize=Integer.valueOf(_scheduleHashTable.size());    _scheduleHashTable.put(schedule.getId(),schedule);    setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_scheduleHashTable.size()));  }  return schedule;}  }
class C{  @Override public boolean isObstacle(final Entity entity){  if (!(entity instanceof Creature)) {    return super.isObstacle(entity);  }  return matchesCriteria((Creature)entity,defaultBlocked);}  }
class C{  public static boolean instanceofObjArray(Object o){  return getImplementation().instanceofObjArray(o);}  }
class C{  public static ArrayList<String> stringToArrayList(String string){  return new ArrayList<>(Arrays.asList(string.split(",")));}  }
class C{  private static void copy(InputStream in,OutputStream out) throws IOException {synchronized (in) {synchronized (out) {      byte[] buffer=new byte[256];      while (true) {        int bytesRead=in.read(buffer);        if (bytesRead == -1)         break;        out.write(buffer,0,bytesRead);      }    }  }}  }
class C{  public OrderEventImpl(final String eventId,final CustomerOrder customerOrder,final CustomerOrderDelivery customerOrderDelivery,final Map params){  this(null,eventId,customerOrder,customerOrderDelivery,params);}  }
class C{  private void parseGroups(){  for (  final Element element : allGroupElements.values()) {    parseGroup(element);  }}  }
class C{  public void addEntity(WorldEntity entity){  logger.debug("Adding '{}' to world '{}'",entity.getName(),name);  entities.add(entity);  entity.btRigidBody.setUserValue(entities.size());  bulletWorld.addRigidBody(entity.btRigidBody);}  }
class C{  public void addMethod(JavaMethod method){  _methods.add(method);}  }
class C{  public EffectColor createEffectItem(MediaItem mediaItem,String effectId,long startTime,long duration,int effectType,int colorType){  EffectColor effectonMVI=null;  effectonMVI=new EffectColor(mediaItem,effectId,startTime,duration,effectType,colorType);  return effectonMVI;}  }
class C{  public void onUpdate(Record record){  delegate.onUpdate(record);}  }
class C{  public Map<Integer,TestRecord> selectToMap(String whereStatement,Object... args){  List<TestRecord> list=super.select(whereStatement,args);  Map<Integer,TestRecord> m=new LinkedHashMap<Integer,TestRecord>();  for (  TestRecord x : list) {    m.put(x.getRecordId(),x);  }  return m;}  }
class C{  private void notifyAdditionalOnScrollStateChangedListener(AbsListView view,int scrollState){  if (mAdditionalOnScrollListener != null) {    mAdditionalOnScrollListener.onScrollStateChanged(view,scrollState);  }}  }
class C{  protected void onConnected() throws Exception {}  }
class C{  public XmlTextParser(){  m_text=null;  m_pos=-1;}  }
class C{  static String dbNameForUser(final int userId){  if (userId == UserHandle.USER_OWNER) {    return DATABASE_NAME;  } else {    File databaseFile=new File(Environment.getUserSystemDirectory(userId),DATABASE_NAME);    return databaseFile.getPath();  }}  }
class C{  public boolean hasRemoteCopyProtection(){  if ((getProtection() != null) && (getProtection().getRemoteCopies() != null) && (getProtection().getRemoteCopies().getRemoteCopySettings() != null)) {    return true;  }  return false;}  }
class C{  public static String systemInfo(){  String[] properties={"java.vm.vendor","java.vm.version","java.vm.name","os.name","os.version","os.arch","java.version","java.vendor","java.vendor.url"};  cern.colt.matrix.ObjectMatrix2D matrix=new cern.colt.matrix.impl.DenseObjectMatrix2D(properties.length,2);  matrix.viewColumn(0).assign(properties);  for (int i=0; i < properties.length; i++) {    String value=System.getProperty(properties[i]);    if (value == null)     value="?";    matrix.set(i,1,value);  }  cern.colt.matrix.objectalgo.Formatter formatter=new cern.colt.matrix.objectalgo.Formatter();  formatter.setPrintShape(false);  return formatter.toString(matrix);}  }
class C{  @Override public String toString(){  return getClass().getName() + "{age=" + getAge()+ ",value="+ getValue()+ ",decl="+ getMetadata()+ "}";}  }
class C{  public static mxICell resolve(mxICell root,String path){  mxICell parent=root;  String[] tokens=path.split(Pattern.quote(PATH_SEPARATOR));  for (int i=0; i < tokens.length; i++) {    parent=parent.getChildAt(Integer.parseInt(tokens[i]));  }  return parent;}  }
class C{  public Object decode(Object ascii) throws DecoderException {  if (ascii == null) {    return EMPTY_BYTE_ARRAY;  }  if (ascii instanceof byte[]) {    return fromAscii((byte[])ascii);  }  if (ascii instanceof char[]) {    return fromAscii((char[])ascii);  }  if (ascii instanceof String) {    return fromAscii(((String)ascii).toCharArray());  }  throw new DecoderException("argument not a byte array");}  }
class C{  public final boolean popAndTop(){  m_index--;  return (m_index >= 0) ? m_values[m_index] : false;}  }
class C{  private int calculateTranslation(View view){  int height=view.getHeight();  ViewGroup.MarginLayoutParams params=(ViewGroup.MarginLayoutParams)view.getLayoutParams();  int margins=params.topMargin + params.bottomMargin;  return height + margins;}  }
class C{  protected Complex calcPower(Complex number,int factor){  Complex powered;  if (factor == 0) {    powered=new Complex(1,0);  } else   if (factor > 0) {    powered=number;    for (int i=1; i < factor; i++) {      powered=powered.times(number);    }    return powered;  } else {    powered=calcPower(number,0 - factor);    powered=new Complex(1,0).divides(powered);  }  return powered;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:25.887 -0500",hash_original_method="CFEA0B963C36C0E6CA161741555B0EDA",hash_generated_method="EC4E6B86A0B1F508A6076903FE132A4B") @Override public int hashCode(){  int result=0;  Iterator<?> it=iterator();  while (it.hasNext()) {    Object next=it.next();    result+=next == null ? 0 : next.hashCode();  }  return result;}  }
class C{  public boolean hasDebugger(final DebuggerTemplate debugger){  return m_configuration.hasDebugger(debugger);}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.lastModified=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  public XPathExtractor registerNamespace(Namespace namespace){  this.namespaces.add(namespace);  return this;}  }
class C{  @Override public List<Map<String,String>> taskConfigs(int maxTasks){  List<Map<String,String>> taskConfigs=new ArrayList<>();  Map<String,String> taskProps=new HashMap<>();  taskProps.putAll(configProps);  for (int i=0; i < maxTasks; i++)   taskConfigs.add(taskProps);  return taskConfigs;}  }
class C{  private boolean isTaskRedrivable(Status taskStatus){  return !(taskStatus.equals(Status.completed) || taskStatus.equals(Status.sidelined) || taskStatus.equals(Status.errored)|| taskStatus.equals(Status.cancelled));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.725 -0400",hash_original_method="73F04B968EDAB2AA927750D7924907E5",hash_generated_method="5DF1A6A078C5A68D443B50DC7D3BF1A1") public FileWriterWithEncoding(File file,Charset encoding) throws IOException {  this(file,encoding,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:44.076 -0500",hash_original_method="9CBDEDF34C527A410521706D53450B12",hash_generated_method="49A7A7A3637AB734AAB578182CC5AFC2") public void waitForIdle(Runnable recipient){  mMessageQueue.addIdleHandler(new Idler(recipient));  mThread.getHandler().post(new EmptyRunnable());}  }
class C{  public void trackSynchronously(FocusPoint focusPoint,InfoComponent infoComponent){  logMessage("JGoogleAnalytics: Tracking synchronously focusPoint=" + focusPoint.getEventName());  httpRequest.request(urlBuildingStrategy.buildURL(focusPoint,infoComponent));}  }
class C{  public char last(){  return setIndex(end - 1);}  }
class C{  public List<TaskStats> taskStats(){  return points;}  }
class C{  public String encode(){  return parseAbbreviation != null ? parseAbbreviation : abbreviation;}  }
class C{  public SusiThought addObservation(String featureName,String observation){  JSONArray data=getData();  for (int i=0; i < data.length(); i++) {    JSONObject spark=data.getJSONObject(i);    if (!spark.has(featureName)) {      spark.put(featureName,observation);      return this;    }  }  data.put(new JSONObject().put(featureName,observation));  return this;}  }
class C{  private void statsClose(LocalRegion region){  if (region instanceof BucketRegion) {    statsClear(region);  } else {    this.stats.close();  }}  }
class C{  public boolean hasCity(){  return hasExtension(City.class);}  }
class C{  public void addDeleteTemplate(String deleteTemplate){  deleteTemplates.add(deleteTemplate);}  }
class C{  public StubGenerator(){  proxyClasses=new Hashtable();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:13.332 -0500",hash_original_method="7C0B16AD34D2790FBD73D96D003DD91D",hash_generated_method="40DF09C1461284A20372BDE4CE08D655") @Override public int hashCode(){  return name.hashCode() ^ getDeclaringClass().getName().hashCode();}  }
class C{  public T caseTVariable(TVariable object){  return null;}  }
class C{  public static String convertMultipartContentType(String ct){  if (ct.equalsIgnoreCase("multipart/*")) {    return "application/vnd.wap.multipart.*";  } else   if (ct.equalsIgnoreCase("multipart/mixed")) {    return "application/vnd.wap.multipart.mixed";  } else   if (ct.equalsIgnoreCase("multipart/form-data")) {    return "application/vnd.wap.multipart.form-data";  } else   if (ct.equalsIgnoreCase("multipart/byteranges")) {    return "application/vnd.wap.multipart.byteranges";  } else   if (ct.equalsIgnoreCase("multipart/alternative")) {    return "application/vnd.wap.multipart.alternative";  } else   if (ct.equalsIgnoreCase("multipart/related")) {    return "application/vnd.wap.multipart.related";  } else {    return ct;  }}  }
class C{  public int compareTo(TinyPuzzle tp){  if (s[0] < tp.s[0])   return -1;  if (s[0] > tp.s[0])   return +1;  if (s[1] < tp.s[1])   return -1;  if (s[1] > tp.s[1])   return +1;  return 0;}  }
class C{  public String name(){  return theName;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:50.291 -0500",hash_original_method="373CBEDF2A2DC4BB05F4307048ABF6D6",hash_generated_method="5BD5F6C67C2B829D72164C4552A43708") public String debugDump(){  stringRep="";  Object obj=this.first();  if (obj == null)   return "<null>";  sprint("listName:");  sprint(listName);  sprint("{");  while (obj != null) {    sprint("[");    sprint(((GenericObject)obj).debugDump(this.indentation));    obj=next();    sprint("]");  }  sprint("}");  return stringRep;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:17.130 -0500",hash_original_method="BD44C4716A0E3FC25053D312996F500E",hash_generated_method="BDC6CE66737DE329DDD2B2D5AEA45D4E") public static String writeDateTime(Calendar cal,StringBuilder sb){  int n;  n=cal.get(Calendar.YEAR);  sb.setCharAt(3,(char)('0' + n % 10));  n/=10;  sb.setCharAt(2,(char)('0' + n % 10));  n/=10;  sb.setCharAt(1,(char)('0' + n % 10));  n/=10;  sb.setCharAt(0,(char)('0' + n % 10));  n=cal.get(Calendar.MONTH) + 1;  sb.setCharAt(5,(char)('0' + n % 10));  n/=10;  sb.setCharAt(4,(char)('0' + n % 10));  n=cal.get(Calendar.DAY_OF_MONTH);  sb.setCharAt(7,(char)('0' + n % 10));  n/=10;  sb.setCharAt(6,(char)('0' + n % 10));  sb.setCharAt(8,'T');  n=cal.get(Calendar.HOUR_OF_DAY);  sb.setCharAt(10,(char)('0' + n % 10));  n/=10;  sb.setCharAt(9,(char)('0' + n % 10));  n=cal.get(Calendar.MINUTE);  sb.setCharAt(12,(char)('0' + n % 10));  n/=10;  sb.setCharAt(11,(char)('0' + n % 10));  n=cal.get(Calendar.SECOND);  sb.setCharAt(14,(char)('0' + n % 10));  n/=10;  sb.setCharAt(13,(char)('0' + n % 10));  return sb.toString();}  }
class C{  public void bindListUI(int layout){  Cursor cursor=mActivity.managedQuery(TrackerProvider.CONTENT_URI,TrackerEntry.ATTRIBUTES,null,null,SORT_ORDER);  TrackerAdapter adapter=new TrackerAdapter(mActivity,layout,cursor);  mActivity.setListAdapter(adapter);  cursor.setNotificationUri(mActivity.getContentResolver(),TrackerProvider.CONTENT_URI);}  }
class C{  private void initializeState(State current){  InitializationUtils.initialize(current);  if (current.documentExpirationTimeMicros <= 0) {    current.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(ServiceUtils.DEFAULT_DOC_EXPIRATION_TIME_MICROS);  }}  }
class C{  public int showDialog(){  pack();  setVisible(true);  return returnCode;}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),new LithuanianAnalyzer(),1000 * RANDOM_MULTIPLIER);}  }
class C{  public Maybe<Zipper<A>> maybeReplaceNext(A a){  return Maybe.JustWhenTrue(!isEnd(),null);}  }
class C{  public static String canonicalName(String blobName){  if (blobName.contains(".part")) {    return blobName.substring(0,blobName.indexOf(".part"));  }  return blobName;}  }
class C{  public SVGOMFEBlendElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  private void doClearWeaponJam(){  ArrayList<Mounted> weapons=((Tank)ce()).getJammedWeapons();  String[] names=new String[weapons.size()];  for (int loop=0; loop < names.length; loop++) {    names[loop]=weapons.get(loop).getDesc();  }  String input=(String)JOptionPane.showInputDialog(clientgui,Messages.getString("FiringDisplay.ClearWeaponJam" + ".question"),Messages.getString("FiringDisplay.ClearWeaponJam.title"),JOptionPane.QUESTION_MESSAGE,null,names,null);  if (input != null) {    for (int loop=0; loop < names.length; loop++) {      if (input.equals(names[loop])) {        RepairWeaponMalfunctionAction rwma=new RepairWeaponMalfunctionAction(ce().getId(),ce().getEquipmentNum(weapons.get(loop)));        attacks.add(rwma);        ready();      }    }  }}  }
class C{  @Override public boolean canLoad(Entity unit){  boolean result=false;  if ((unit instanceof Tank) && (unit.getWeight() <= 50)) {    result=true;  }  if (currentSpace < 1) {    result=false;  }  if (doors < loadedThisTurn) {    result=false;  }  return result;}  }
class C{  public boolean isLenient(){  return false;}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  private static SecretKey constructAESKey(int len,int rounds) throws IllegalArgumentException {  if ((len != 16) && (len != 24) && (len != 32)) {    throw new IllegalArgumentException("Wrong Key Length: " + len);  }  byte[] rawKeyValue=constructKeyValue(len,rounds);  SecretKeySpec key=new SecretKeySpec(rawKeyValue,"AES");  return key;}  }
class C{  public void putClone(Map<AttributeKey,Object> a,@Nullable T value){  try {    put(a,value == null ? null : clazz.cast(Methods.invoke(value,"clone")));  } catch (  NoSuchMethodException ex) {    InternalError e=new InternalError();    e.initCause(ex);    throw e;  }}  }
class C{  public String lookAheadIterationsTipText(){  return "The number of iterations to look ahead for to find a better optimum.";}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_CODE_LANGS_1__CODE_LANG_1:    getCodeLang_1().clear();  getCodeLang_1().addAll((Collection<? extends CodeLang_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void stopParsing(){  timer.stop();  running=false;}  }
class C{  public SubtreeCrossover(double probability){  super();  this.probability=probability;}  }
class C{  public void deleteStorageFile(String name){  name=fixFileName(name);  Util.getImplementation().deleteStorageFile(name);  cache.delete(name);}  }
class C{  protected String doIt() throws Exception {  outDocument=createNewDocument();  MClient client=MClient.get(getCtx(),p_AD_Client_ID);  log.info(client.toString());  int EXP_Format_ID=1000000;  MTable table=MTable.get(getCtx(),AD_Table_ID);  log.info("Table = " + table);  PO po=table.getPO(p_Record_ID,get_TrxName());  if (po.get_KeyColumns().length > 1 || po.get_KeyColumns().length < 1) {    throw new Exception(Msg.getMsg(getCtx(),"ExportMultiColumnNotSupported"));  }  MEXPFormat exportFormat=new MEXPFormat(getCtx(),EXP_Format_ID,get_TrxName());  StringBuffer sql=new StringBuffer("SELECT * ").append("FROM ").append(table.getTableName()).append(" ").append("WHERE ").append(po.get_KeyColumns()[0]).append("=?");  if (exportFormat.getWhereClause() != null & !"".equals(exportFormat.getWhereClause())) {    sql.append(" AND ").append(exportFormat.getWhereClause());  }  ResultSet rs=null;  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    pstmt.setInt(1,p_Record_ID);    rs=pstmt.executeQuery();    if (rs.next()) {      HashMap<String,Integer> variableMap=new HashMap<String,Integer>();      variableMap.put(TOTAL_SEGMENTS,new Integer(1));      Element rootElement=outDocument.createElement(exportFormat.getValue());      rootElement.appendChild(outDocument.createComment(exportFormat.getDescription()));      outDocument.appendChild(rootElement);      generateExportFormat(rootElement,exportFormat,rs,po,p_Record_ID,variableMap);    }  }  finally {    try {      if (rs != null)       rs.close();      if (pstmt != null)       pstmt.close();    } catch (    SQLException ex) {    }    rs=null;    pstmt=null;  }  addLog(0,null,null,Msg.getMsg(getCtx(),"ExportProcessResult") + "\n" + outDocument.toString());  return outDocument.toString();}  }
class C{  @Nullable public UUID subjectId(){  return subjId;}  }
class C{  public FloatMatrix(String filename) throws IOException {  load(filename);}  }
class C{  protected AbstractMatrix2D vDice(){  super.vDice();  int[] tmp=rowOffsets;  rowOffsets=columnOffsets;  columnOffsets=tmp;  this.isNoView=false;  return this;}  }
class C{  public int read() throws IOException {  if (closed) {    throw new IOException("The stream is closed.");  }  if (available() == 0) {    if (makeAvailable() == 0) {      return -1;    }  }  ++total;  int b=buffer[head++];  if (b >= 0) {    return b;  }  return b + BYTE_POSITIVE_OFFSET;}  }
class C{  private void logAlternateVendorMessage(P25Message message){}  }
class C{  public Boolean isAllowPromiscuous(){  return allowPromiscuous;}  }
class C{  @Override public void loadTxMtd(JobConf job,FileSystem fs,Path tfMtdDir,TfUtils agents) throws IOException {  if (fs.isDirectory(tfMtdDir)) {    if (_colList != null)     for (int i=0; i < _colList.length; i++) {      int colID=_colList[i];      if (_mvMethodList[i] == MVMethod.GLOBAL_MEAN || _mvMethodList[i] == MVMethod.GLOBAL_MODE)       _replacementList[i]=readReplacement(colID,fs,tfMtdDir,agents); else       if (_mvMethodList[i] == MVMethod.CONSTANT) {      } else       throw new RuntimeException("Invalid Missing Value Imputation methods: " + _mvMethodList[i]);    }    if (_colList != null)     for (int i=0; i < _colList.length; i++)     if (_isMVScaled.get(i))     processScalingFile(i,_colList,_meanList,_varList,fs,tfMtdDir,agents);    if (_scnomvList != null)     for (int i=0; i < _scnomvList.length; i++)     processScalingFile(i,_scnomvList,_scnomvMeanList,_scnomvVarList,fs,tfMtdDir,agents);  } else {    fs.close();    throw new RuntimeException("Path to recode maps must be a directory: " + tfMtdDir);  }}  }
class C{  public boolean isNullOnComplicatedPath(){  int baseKind=getBaseKind();  return baseKind == NN_UNKNOWN || baseKind == NCP2 || baseKind == NCP3;}  }
class C{  public void onPackageRemovedAllUsers(String packageName,int uid){}  }
class C{  private void logMissingResource(FacesContext ctx,String resourceId,Throwable t){  Level level;  if (!ctx.isProjectStage(ProjectStage.Production)) {    level=Level.WARNING;  } else {    level=((t != null) ? Level.WARNING : Level.FINE);  }  if (LOGGER.isLoggable(level)) {    LOGGER.log(level,"jsf.application.resource.unable_to_serve",new Object[]{resourceId});    if (t != null) {      LOGGER.log(level,"",t);    }  }}  }
class C{  public void name(String name){  this.name=name;}  }
class C{  public static InstructionGraph create(final ReilGraph graph){  return CInstructionGraphConverter.convert(com.google.security.zynamics.reil.algorithms.mono.InstructionGraph.create(ReilGraphConverter.convert(graph)));}  }
class C{  public static double gamma(double x){  x=logGamma(x);  return Math.exp(x);}  }
class C{  @Override public void write(byte[] b,int offset,int length) throws IOException {  ZipUtil.checkRequestedFeatures(entry.entry);  entry.hasWritten=true;  if (entry.entry.getMethod() == DEFLATED) {    writeDeflated(b,offset,length);  } else {    writeOut(b,offset,length);    written+=length;  }  crc.update(b,offset,length);  count(length);}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public static CompletionSuggestionFuzzyBuilder fuzzyCompletionSuggestion(String name){  return new CompletionSuggestionFuzzyBuilder(name);}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (is_ValueChanged("Percentage") || is_ValueChanged("IsActive")) {    log.fine("beforeSave");    setIsValid(false);  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:29.717 -0500",hash_original_method="47F03A4B7607EC42FAB580BDD530C12C",hash_generated_method="FE92A991493A370A91578410E0107D1F") public CipherParameters generateDerivedParameters(int keySize){  keySize=keySize / 8;  byte[] dKey=generateDerivedKey(keySize);  return new KeyParameter(dKey,0,keySize);}  }
class C{  @Ignore("Bug46049") @Test public void testBug46049() throws Exception {  final Host host=Host.getHost(0);  VM locator=host.getVM(0);  VM server=host.getVM(1);  final int locatorPort=AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);  locator.invoke("Start Locator",null);  String locators=NetworkUtils.getServerHostName(locator.getHost()) + "[" + locatorPort+ "]";  server.invoke("Start BridgeServer",null);  server.invoke("Check Server",null);  JmxManagerLocatorRequest.send(locator.getHost().getHostName(),locatorPort,CONNECT_LOCATOR_TIMEOUT_MS,Collections.<String,String>emptyMap());  locator.invoke("Check locator",null);  helper.closeCache(locator);  helper.closeCache(server);}  }
class C{  private void hideFootView(){  if (loadmoreView != null) {    loadmoreView.setVisibility(View.GONE);  }}  }
class C{  public final TextImpl minimize(){  if (getLength() == 0) {    parent.removeChild(this);    return null;  }  Node previous=getPreviousSibling();  if (previous == null || previous.getNodeType() != Node.TEXT_NODE) {    return this;  }  TextImpl previousText=(TextImpl)previous;  previousText.buffer.append(buffer);  parent.removeChild(this);  return previousText;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(DShowTVPlayer.hasPVR350HWDecoder());}  }
class C{  public boolean isRequestBasicCheckout(){  return requestBasicCheckout;}  }
class C{  @Override public void chartMouseClicked(ChartMouseEvent event){}  }
class C{  public void addStep(Step step){  getSteps().add(step);}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(UtilsRegressionTest.class);}  }
class C{  public void beSick(){}  }
class C{  public SparseIntegerVector(int[] values) throws IllegalArgumentException {  this.dimensionality=values.length;  int size=0;{    for (int i=0; i < values.length; i++) {      if (values[i] != 0) {        size++;      }    }  }  this.indexes=new int[size];  this.values=new int[size];{    int pos=0;    for (int i=0; i < values.length; i++) {      int value=values[i];      if (value != 0) {        this.indexes[pos]=i;        this.values[pos]=value;        pos++;      }    }  }}  }
class C{  EagerReferenceBound(ReferenceType boundType){  super(boundType);}  }
class C{  public static String[] resolvePropertyOrder(String[] firstRow,Map<String,Object> propertyTypes){  log.debug(".resolvePropertyOrder firstRow==" + Arrays.asList(firstRow));  String[] result=null;  if (isValidTitleRow(firstRow,propertyTypes)) {    result=firstRow;    log.debug(".resolvePropertyOrder using valid title row, propertyOrder==" + Arrays.asList(result));  } else {    throw new EPException("Cannot resolve the order of properties in the CSV file");  }  return result;}  }
class C{  public static float calculateHeight(float left,float right,float targetAspectRatio){  final float width=right - left;  final float height=width / targetAspectRatio;  return height;}  }
class C{  public static int toRealPosition(int position,int count){  position=position - 1;  if (position < 0) {    position+=count;  } else {    position=position % count;  }  return position;}  }
class C{  private ByteArrayResource findDeckMavenArtifact(ModuleDetails details,Map<String,String> data){  log.info("Fetching " + details.getArtifact() + " from the web...");  MavenResource mavenResource=MavenResource.parse(details.getArtifact(),this.mavenProperties);  ByteArrayOutputStream newDeck=new ByteArrayOutputStream();  try {    Manifest manifest=new Manifest();    manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION,"1.0");    try (ZipFile deckInputFile=new ZipFile(mavenResource.getFile())){      try (JarOutputStream deckOutputStream=new JarOutputStream(newDeck,manifest)){        deckInputFile.stream().filter(null).map(null).filter(predicate(null)).map(function(null)).forEach(consumer(null));      }     }   } catch (  IOException e) {    throw new RuntimeException(e);  }  return new ByteArrayResource(newDeck.toByteArray());}  }
class C{  public static void send(final String recipient,final String subject,final String body){  final LatkeBeanManager beanManager=Lifecycle.getBeanManager();  final LangPropsService langService=beanManager.getReference(LangPropsServiceImpl.class);  try {    final MailService.Message message=new MailService.Message();    message.setFrom(javax.mail.internet.MimeUtility.encodeText(langService.get("symphonyLabel")) + " <" + MAIL_CONF.getString("mail.user")+ ">");    message.addRecipient(recipient);    message.setSubject(subject);    message.setHtmlBody(body);    try {      MAIL_SVC.send(message);    } catch (    final Exception e) {      MAIL_SVC.send(message);    }  } catch (  final Exception e) {    LOGGER.log(Level.ERROR,"Sends mail failed",e);  }}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.CASE_CLAUSE__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public Builder convertRatesTo(TimeUnit rateUnit){  this.rateUnit=rateUnit;  return this;}  }
class C{  public void xor(BitMatrix other){  checkDimensionCompatibility(other);  toBitVector().xor(other.toBitVector());}  }
class C{  public PropertyDialog(Frame owner,PropertyEditor pe){  this(owner,pe,-1,-1);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.EXPRESSION;}  }
class C{  protected void curveInit(){  if (curveDrawMatrix == null) {    curveBasisMatrix=new PMatrix3D();    curveDrawMatrix=new PMatrix3D();    curveInited=true;  }  float s=curveTightness;  curveBasisMatrix.set((s - 1) / 2f,(s + 3) / 2f,(-3 - s) / 2f,(1 - s) / 2f,(1 - s),(-5 - s) / 2f,(s + 2),(s - 1) / 2f,(s - 1) / 2f,0,(1 - s) / 2f,0,0,1,0,0);  splineForward(curveDetail,curveDrawMatrix);  if (bezierBasisInverse == null) {    bezierBasisInverse=bezierBasisMatrix.get();    bezierBasisInverse.invert();    curveToBezierMatrix=new PMatrix3D();  }  curveToBezierMatrix.set(curveBasisMatrix);  curveToBezierMatrix.preApply(bezierBasisInverse);  curveDrawMatrix.apply(curveBasisMatrix);}  }
class C{  public double entropyFirst(){  return entropyFirst;}  }
class C{  public final Flux<T> distinctUntilChanged(){  return distinctUntilChanged(hashcodeSupplier());}  }
class C{  private static String decodeBase900toBase10(int[] codewords,int count) throws FormatException {  BigInteger result=BigInteger.ZERO;  for (int i=0; i < count; i++) {    result=result.add(EXP900[count - i - 1].multiply(BigInteger.valueOf(codewords[i])));  }  String resultString=result.toString();  if (resultString.charAt(0) != '1') {    throw FormatException.getFormatInstance();  }  return resultString.substring(1);}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,DM dm,long size){  Assert.assertTrue(recipient != null,"PRDistribuedGetReplyMessage NULL reply message");  BucketSizeReplyMessage m=new BucketSizeReplyMessage(processorId,size);  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  public String paramString(){  String typeStr;switch (id) {case INTERNAL_FRAME_OPENED:    typeStr="INTERNAL_FRAME_OPENED";  break;case INTERNAL_FRAME_CLOSING:typeStr="INTERNAL_FRAME_CLOSING";break;case INTERNAL_FRAME_CLOSED:typeStr="INTERNAL_FRAME_CLOSED";break;case INTERNAL_FRAME_ICONIFIED:typeStr="INTERNAL_FRAME_ICONIFIED";break;case INTERNAL_FRAME_DEICONIFIED:typeStr="INTERNAL_FRAME_DEICONIFIED";break;case INTERNAL_FRAME_ACTIVATED:typeStr="INTERNAL_FRAME_ACTIVATED";break;case INTERNAL_FRAME_DEACTIVATED:typeStr="INTERNAL_FRAME_DEACTIVATED";break;default :typeStr="unknown type";}return typeStr;}  }
class C{  public static int indexOfIgnoreCase(String src,String subS,int startIndex){  return indexOfIgnoreCase(src,subS,startIndex,src.length());}  }
class C{  public void dismiss(){  mWindow.dismiss();}  }
class C{  public static Rectangle2D toObjectBBox(Rectangle2D r,GraphicsNode node){  Rectangle2D bounds=node.getGeometryBounds();  if (bounds != null) {    return new Rectangle2D.Double(bounds.getX() + r.getX() * bounds.getWidth(),bounds.getY() + r.getY() * bounds.getHeight(),r.getWidth() * bounds.getWidth(),r.getHeight() * bounds.getHeight());  } else {    return new Rectangle2D.Double();  }}  }
class C{  @Override public final void execute(WorkItem workItem,WorkflowSession workflowSession,MetaDataMap args) throws WorkflowException {  final WorkflowData workflowData=workItem.getWorkflowData();  final String type=workflowData.getPayloadType();  if (!StringUtils.equals(type,"JCR_PATH")) {    return;  }  final String path=workflowData.getPayload().toString();  String processArgs=args.get("PROCESS_ARGS","default value");  String[] proccesArgsVals=StringUtils.split(processArgs,",");  String singleValue=args.get("argSingle","not set");  String[] multiValue=args.get("argMulti",new String[]{"not set"});  log.debug("Single Value: {}",singleValue);  log.debug("Multi Value: {}",Arrays.toString(multiValue));  String previouslySetData=this.getPersistedData(workItem,"set-in-previous-workflow-step",String.class);  ResourceResolver resourceResolver=null;  try {    resourceResolver=getResourceResolver(workflowSession.getSession());    Resource resource=resourceResolver.getResource(path);    persistData(workItem,workflowSession,"set-for-next-workflow-step","whatever data you want");  } catch (  Exception e) {    log.error("Unable to complete processing the Workflow Process step",e);    throw new WorkflowException("Unable to complete processing the Workflow Process step",e);  }}  }
class C{  private List<Metric> mapping(List<Metric> metrics){  SystemAssert.requireArgument(metrics != null,"Cannot transform empty metric/metrics");  if (metrics.isEmpty()) {    return metrics;  }  List<Metric> newMetricsList=new ArrayList<Metric>();  for (  Metric metric : metrics) {    Map<Long,String> cleanDatapoints=cleanDPs(metric.getDatapoints());    metric.setDatapoints(this.valueMapping.mapping(cleanDatapoints));    newMetricsList.add(metric);  }  return newMetricsList;}  }
class C{  public void printViolatingInstances(){  System.out.println(violated);}  }
class C{  public void logout(){  m_loggedIn=false;}  }
class C{  private static String formatList(String[] stringList,String listPattern,String listCompositionPattern){  if (listPattern == null || listCompositionPattern == null) {    StringBuilder result=new StringBuilder();    for (int i=0; i < stringList.length; ++i) {      if (i > 0) {        result.append(',');      }      result.append(stringList[i]);    }    return result.toString();  }  if (stringList.length > 3) {    MessageFormat format=new MessageFormat(listCompositionPattern);    stringList=composeList(format,stringList);  }  Object[] args=new Object[stringList.length + 1];  System.arraycopy(stringList,0,args,1,stringList.length);  args[0]=new Integer(stringList.length);  MessageFormat format=new MessageFormat(listPattern);  return format.format(args);}  }
class C{  public static <T>void assertNotEmpty(T expression){  Assert.notEmpty(expression);}  }
class C{  private boolean canonicalize(){  for (int i=0, max=segments.length; i < max; i++) {    String segment=segments[i];    if (segment.charAt(0) == '.' && (segment.equals("..") || segment.equals("."))) {      collapseParentReferences();      if (segments.length == 0)       separators&=(HAS_LEADING | IS_UNC);      separators=(separators & ALL_SEPARATORS) | (computeHashCode() << 3);      return true;    }  }  return false;}  }
class C{  public static boolean isCompositionPlaylist(ResourceByteRangeProvider resourceByteRangeProvider) throws IOException {  try (InputStream inputStream=resourceByteRangeProvider.getByteRangeAsStream(0,resourceByteRangeProvider.getResourceSize() - 1)){    DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();    documentBuilderFactory.setNamespaceAware(true);    DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();    Document document=documentBuilder.parse(inputStream);    NodeList nodeList=null;    for (    String cplNamespaceURI : supportedCPLSchemaURIs) {      nodeList=document.getElementsByTagNameNS(cplNamespaceURI,"CompositionPlaylist");      if (nodeList != null && nodeList.getLength() == 1) {        return true;      }    }  } catch (  ParserConfigurationException|SAXException e) {    return false;  }  return false;}  }
class C{  private String _hexString(byte[] bytes){  StringBuilder result=new StringBuilder(2 * bytes.length);  for (int i=0; i < bytes.length; i++) {    int b=bytes[i] & 0xFF;    result.append(_nibbleToHex[b / 16]);    result.append(_nibbleToHex[b % 16]);  }  return result.toString();}  }
class C{  private static void addImportFromAbc(@NotNull final PsiFile file,@NotNull final String nameToImport){  AddImportHelper.addOrUpdateFromImportStatement(file,ABC_META_PACKAGE,nameToImport,null,ImportPriority.BUILTIN,null);}  }
class C{  public boolean isCreateAsActive(){  Object oo=get_Value(COLUMNNAME_IsCreateAsActive);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  void build(TaskContainmentHierarchyFacade containment){  List<Task> tasksInDocumentOrder=containment.getTasksInDocumentOrder();  final Task firstVisible=insideViewport.isEmpty() ? null : insideViewport.get(0);  final Task lastVisible=insideViewport.isEmpty() ? null : insideViewport.get(insideViewport.size() - 1);  List<Task> addTo=aboveViewport;  Task collapsedRoot=null;  for (  Task nextTask : tasksInDocumentOrder) {    if (addTo == null) {      if (nextTask.equals(lastVisible)) {        addTo=belowViewport;      }      continue;    }    if (nextTask.equals(firstVisible)) {      addTo=null;      continue;    }    if (collapsedRoot != null) {      if (containment.areUnrelated(nextTask,collapsedRoot)) {        collapsedRoot=null;      } else {        continue;      }    }    addTo.add(nextTask);    if (!nextTask.getExpand()) {      assert collapsedRoot == null : "All tasks processed prior to this one must be expanded";      collapsedRoot=nextTask;    }  }}  }
class C{  public void remove(final AbstractInsnNode insn){  --size;  AbstractInsnNode next=insn.next;  AbstractInsnNode prev=insn.prev;  if (next == null) {    if (prev == null) {      first=null;      last=null;    } else {      prev.next=null;      last=prev;    }  } else {    if (prev == null) {      first=next;      next.prev=null;    } else {      prev.next=next;      next.prev=prev;    }  }  cache=null;  insn.index=-1;  insn.prev=null;  insn.next=null;}  }
class C{  public int show(FragmentTransaction transaction,@IdRes int bottomSheetLayoutId){  dismissed=false;  shownByMe=true;  this.bottomSheetLayoutId=bottomSheetLayoutId;  transaction.add(fragment,String.valueOf(bottomSheetLayoutId));  viewDestroyed=false;  backStackId=transaction.commit();  return backStackId;}  }
class C{  public synchronized void addVertex(Vertex vertex){  vertex.setNetwork(this);  if (vertex.hasData() && (vertex.getData() instanceof Data)) {    this.entityManager.persist(vertex.getData());  }  this.entityManager.persist(vertex);  if (vertex.hasData()) {    this.verticiesByData.put(vertex.getData(),vertex);  }}  }
class C{  public void storeNewPackageOrder(){  List<String> packageList=new ArrayList<String>();  for (  AppInfo actApp : mInstalledApps) {    packageList.add(actApp.packageName);  }  mSettings.setPackageOrder(packageList);}  }
class C{  private void dispatch(Dibit symbol){  mBroadcaster.receive(symbol);}  }
class C{  private Contacts(){}  }
class C{  ImpreciseCutoverField(DateTimeField julianField,DateTimeField gregorianField,DurationField durationField,long cutoverMillis){  this(julianField,gregorianField,durationField,cutoverMillis,false);}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("ExpenseServlet.init");}  }
class C{  public StringIdItem intern(StringIdItem string){  if (string == null) {    throw new NullPointerException("string == null");  }  throwIfPrepared();  CstString value=string.getValue();  StringIdItem already=strings.get(value);  if (already != null) {    return already;  }  strings.put(value,string);  return string;}  }
class C{  public static int xInDir(int x,int y,int dir){switch (dir) {case 1:case 2:    return x + 1;case 4:case 5:  return x - 1;default :return x;}}  }
class C{  private void saveMemoryBlockSerialized(ImageData imageData,File fileSerialize) throws Exception {  FileOutputStream fos=null;  ObjectOutputStream oos=null;  try {    fos=new FileOutputStream(fileSerialize);    oos=new ObjectOutputStream(fos);    oos.writeObject(imageData);    addScanFile(fileSerialize);  } catch (  Exception e) {    throw e;  } finally {    if (oos != null) {      oos.close();    }    if (fos != null) {      fos.close();    }  }}  }
class C{  public void close() throws IOException {  resetVersion();  if (inputStream != null) {    try {      inputStream.close();    } catch (    IOException e) {    } finally {      inputStream=null;    }  }  if (randomAccessFile != null) {    try {      if (randomAccessFile.getFD().valid())       randomAccessFile.close();    }  finally {      randomAccessFile=null;    }  }}  }
class C{  public static int binarySearch(int[] array,int startIndex,int endIndex,int value){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  int low=startIndex, mid=-1, high=endIndex - 1;  while (low <= high) {    mid=(low + high) >>> 1;    if (value > array[mid]) {      low=mid + 1;    } else     if (value == array[mid]) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (value < array[index]) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (value < array[mid] ? 1 : 2);}  }
class C{  public Rational multiply(Rational secondRational){  BigInteger n=r[0].multiply(secondRational.getNumerator());  BigInteger d=r[1].multiply(secondRational.getDenominator());  return new Rational(n,d);}  }
class C{  public BLAKE384(){  super();}  }
class C{  private static int multLookupLeastSignificantBit(long x){  return LSB_TABLE[(int)(((x & -x) * 0x03f79d71b4ca8b09L) >>> 58)];}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TOBJECT_PROTOTYPE;}  }
class C{  private static Object[] toObjectArray(Object primitiveArray){  if (primitiveArray == null) {    throw new NullPointerException();  }  if (primitiveArray instanceof Object[]) {    return (Object[])primitiveArray;  }  if (primitiveArray instanceof Collection) {    return ((Collection)primitiveArray).toArray();  }  Class clazz=primitiveArray.getClass();  if (!clazz.isArray()) {    return null;  }  int length=Array.getLength(primitiveArray);  Object[] array=new Object[length];  for (int i=0; i < length; i++) {    array[i]=Array.get(primitiveArray,i);  }  return array;}  }
class C{  public void testSendLargeTrackToGoogle(){  EndToEndTestUtils.deleteAllTracks();  EndToEndTestUtils.createSimpleTrack(200,false);  instrumentation.waitForIdleSync();  checkSendTrackToGoogle();}  }
class C{  public double measureTreeSize(){  return m_root.numNodes();}  }
class C{  @Override public <K,A,D>Eval<Map<K,D>> groupBy(final Function<? super T,? extends K> classifier,final Collector<? super T,A,D> downstream){  return Eval.later(null);}  }
class C{  public static String toString(AbstractCollection self){  return toListString(self);}  }
class C{  @SuppressWarnings("nullness") @GwtIncompatible("Array.newInstance(Class, int)") public static <T>T[] toArray(Iterable<? extends T> iterable,Class<T> type){  @SuppressWarnings("unchecked") Collection<? extends T> collection=(iterable instanceof Collection) ? (Collection<? extends T>)iterable : Lists.newArrayList(iterable);  T[] array=ObjectArrays.newArray(type,collection.size());  return collection.toArray(array);}  }
class C{  public void onZoomOut(View view){  if (!checkReady()) {    return;  }  changeCamera(CameraUpdateFactory.zoomOut());}  }
class C{  public void insert(final String collectionName,String randomSeed,final Map<String,Object> data,final ResultListener listener){  callWithSeed("/" + collectionName + "/insert",randomSeed,new Object[]{data},listener);}  }
class C{  public void visit(Page page){}  }
class C{  public boolean isActive(){  return _lifecycle.isActive();}  }
class C{  public void close(){  try {    m_fw.flush();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static <T>Address objectAsAddress(T object){  if (VM.VerifyAssertions && VM.runningVM) {    VM._assert(VM.NOT_REACHED);  }  if (objectAddressRemapper == null) {    return Address.zero();  }  return objectAddressRemapper.objectAsAddress(object);}  }
class C{  public void clear(){synchronized (mLock) {    mObjects.clear();  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public CeylonRepoManagerBuilder offline(boolean offline){  this.offline=offline;  return this;}  }
class C{  public static final LocoNetMessage createIplSpecificHostQueryPacket(Integer hostMfr,Integer hostDevice){  LocoNetMessage m=createQueryAllIplDevicesPacket();  m.setElement(4,hostMfr);  m.setElement(5,hostDevice);  return m;}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.TRANSITION_ROOT;}  }
class C{  public static Recipe fromCursor(Cursor cursor){  Recipe recipe=new Recipe(null);  for (int c=0; c < cursor.getColumnCount(); c++) {    String columnName=cursor.getColumnName(c);    if (columnName.equals(RecipeTable.ID_COLUMN)) {      recipe.id=cursor.getString(c);    } else     if (columnName.equals(RecipeTable.TITLE_COLUMN)) {      recipe.setTitle(cursor.getString(c));    } else     if (columnName.equals(RecipeTable.DESCRIPTION_COLUMN)) {      recipe.setDescription(cursor.getString(c));    } else     if (columnName.equals(RecipeTable.PHOTO_COLUMN)) {      recipe.setPhoto(cursor.getString(c));    } else     if (columnName.equals(RecipeTable.PREP_TIME_COLUMN)) {      recipe.setPrepTime(cursor.getString(c));    }  }  return recipe;}  }
class C{  protected CommandResult extractCommandResult(Map<String,Object> commandOutput){  assert (commandOutput != null);  for (  Object resultObject : commandOutput.values()) {    if (resultObject instanceof CommandResult) {      CommandResult result=(CommandResult)resultObject;      result.resetToFirstLine();      return result;    }  }  return null;}  }
class C{  static public void clearPickableFlags(Node n){  n.setPickable(false);  n.clearCapability(Group.ENABLE_PICK_REPORTING);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(prefix03.class,args);}  }
class C{  public void writeFloat(float v) throws IOException {  int bits=Float.floatToIntBits(v);  _os.write(bits >> 24);  _os.write(bits >> 16);  _os.write(bits >> 8);  _os.write(bits);}  }
class C{  public TetradLogArea(TetradDesktop tetradDesktop){  super(new BorderLayout());  if (tetradDesktop == null) {    throw new NullPointerException("The given desktop must not be null");  }  this.desktop=tetradDesktop;  this.textArea=new JTextArea();  if (TetradLogger.getInstance().isDisplayLogEnabled()) {    this.stream=new TextAreaOutputStream(this.textArea);    TetradLogger.getInstance().addOutputStream(this.stream);  }  JScrollPane pane=new JScrollPane(this.textArea);  pane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);  add(createHeader(),BorderLayout.NORTH);  add(pane,BorderLayout.CENTER);}  }
class C{  public static synchronized void write(Object... x){  if (!allowLog)   return;  Thread th=Thread.currentThread();  try {    out.write((formatEntry(System.currentTimeMillis(),th.getName(),th.getId(),x) + "\n").getBytes(charset));    out.flush();  } catch (  IOException e) {    throw new IllegalStateException(e);  }}  }
class C{  public List<Event> decodeGameEvents(final byte[] data,final Replay replay){  final BitPackedDecoder decoder=new BitPackedDecoder(data,typeInfos,true);  return decodeEventStream(decoder,gameEventIdTypeid,gameEventTypeMap,true,new GameEventFactory(replay),replay.getPlayerIdUserIdMap());}  }
class C{  public String list(boolean withText){  StringBuffer sBuf=new StringBuffer();  Vector3 coord=new Vector3();  for (int i=0; i < pointSet.getNumberOfChildren(); ++i) {    Waypoint wp=(Waypoint)pointSet.getChild(i);    coord.set(wp.getTranslation());    Landscape.getInstance().localToWorldCoordinate(coord);    if (withText) {      sBuf.append(wp.getName() + "," + wp.getState().getAnnotation()+ ","+ coord.getX()+ ","+ coord.getY()+ ","+ coord.getZ()+ "\n");    } else {      sBuf.append(coord.getX() + "," + coord.getY()+ ","+ coord.getZ()+ "\n");    }  }  return (sBuf.toString());}  }
class C{  private static boolean nextPeriodReady(){  return impl.station().isNewControlData();}  }
class C{  public boolean isDrawHoleEnabled(){  return mDrawHole;}  }
class C{  public String name(Declaration decl){  return getName(decl,false,false);}  }
class C{  private BusinessObjectDataEntity createBusinessObjectDataEntity(BusinessObjectDataCreateRequest request,BusinessObjectFormatEntity businessObjectFormatEntity,Integer businessObjectDataVersion,BusinessObjectDataStatusEntity businessObjectDataStatusEntity){  BusinessObjectDataEntity businessObjectDataEntity=new BusinessObjectDataEntity();  businessObjectDataEntity.setBusinessObjectFormat(businessObjectFormatEntity);  businessObjectDataEntity.setPartitionValue(request.getPartitionValue());  int subPartitionValuesCount=org.apache.commons.collections4.CollectionUtils.size(request.getSubPartitionValues());  businessObjectDataEntity.setPartitionValue2(subPartitionValuesCount > 0 ? request.getSubPartitionValues().get(0) : null);  businessObjectDataEntity.setPartitionValue3(subPartitionValuesCount > 1 ? request.getSubPartitionValues().get(1) : null);  businessObjectDataEntity.setPartitionValue4(subPartitionValuesCount > 2 ? request.getSubPartitionValues().get(2) : null);  businessObjectDataEntity.setPartitionValue5(subPartitionValuesCount > 3 ? request.getSubPartitionValues().get(3) : null);  businessObjectDataEntity.setVersion(businessObjectDataVersion);  businessObjectDataEntity.setLatestVersion(true);  businessObjectDataEntity.setStatus(businessObjectDataStatusEntity);  businessObjectDataEntity.setStorageUnits(createStorageUnitEntitiesFromStorageUnits(request.getStorageUnits(),businessObjectFormatEntity,businessObjectDataEntity));  List<BusinessObjectDataAttributeEntity> attributeEntities=new ArrayList<>();  businessObjectDataEntity.setAttributes(attributeEntities);  if (!org.apache.commons.collections4.CollectionUtils.isEmpty(request.getAttributes())) {    for (    Attribute attribute : request.getAttributes()) {      BusinessObjectDataAttributeEntity attributeEntity=new BusinessObjectDataAttributeEntity();      attributeEntities.add(attributeEntity);      attributeEntity.setBusinessObjectData(businessObjectDataEntity);      attributeEntity.setName(attribute.getName());      attributeEntity.setValue(attribute.getValue());    }  }  List<BusinessObjectDataEntity> businessObjectDataParents=new ArrayList<>();  businessObjectDataEntity.setBusinessObjectDataParents(businessObjectDataParents);  if (request.getBusinessObjectDataParents() != null) {    for (    BusinessObjectDataKey businessObjectDataKey : request.getBusinessObjectDataParents()) {      BusinessObjectDataEntity businessObjectDataParent=getBusinessObjectDataEntity(businessObjectDataKey);      businessObjectDataParent.getBusinessObjectDataChildren().add(businessObjectDataEntity);      businessObjectDataParents.add(businessObjectDataParent);    }  }  return businessObjectDataEntity;}  }
class C{  public Text createKey(){  return ReflectionUtils.newInstance(Text.class,conf);}  }
class C{  public final AC noGrid(int... indexes){  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setNoGrid(true);  }  return this;}  }
class C{  protected AbstractElementSelector(String uri,String name){  namespaceURI=uri;  localName=name;}  }
class C{  @SuppressWarnings("rawtypes") private void addAllSpringBeans(final ApplicationContext applicationContext){  final Map<String,Mapper> mappers=applicationContext.getBeansOfType(Mapper.class);  for (  final Mapper mapper : mappers.values()) {    addMapper(mapper);  }  final Map<String,Converter> converters=applicationContext.getBeansOfType(Converter.class);  for (  final Converter converter : converters.values()) {    addConverter(converter);  }}  }
class C{  private URIUtils(){}  }
class C{  protected boolean isEntityQuery(ODataUri uri,EntityDataModel entityDataModel){  return getTargetType(uri,entityDataModel).map(null).orElse(false);}  }
class C{  protected static int value(Object element){  return ((Number)element).intValue();}  }
class C{  private void before(StringPrimitiveStatement statement,Scope scope){}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,final long inputOffset,final long length,byte[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  final int bufferLength=buffer.length;  int bytesToRead=bufferLength;  if (length > 0 && length < bufferLength) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,bufferLength);    }  }  return totalRead;}  }
class C{  public JsonServer(){  this(JsonServerPreferences.getDefault().getPort(),JsonServerPreferences.getDefault().getHeartbeatInterval());}  }
class C{  public synchronized IntSetting createIntSetting(String key,int defaultValue){  IntSetting result=new IntSetting(DEFAULT_PROPS,PROPS,key,defaultValue);  handleSettingInternal(result,null);  return result;}  }
class C{  private void meekR1(Node b,Graph graph,IKnowledge knowledge){  List<Node> adjacentNodes=graph.getAdjacentNodes(b);  if (adjacentNodes.size() < 2) {    return;  }  ChoiceGenerator cg=new ChoiceGenerator(adjacentNodes.size(),2);  int[] choice;  while ((choice=cg.next()) != null) {    List<Node> nodes=GraphUtils.asList(choice,adjacentNodes);    Node a=nodes.get(0);    Node c=nodes.get(1);    r1Helper(a,b,c,graph,knowledge);    r1Helper(c,b,a,graph,knowledge);  }}  }
class C{  protected UnManagedCifsShareACL checkUnManagedFsCifsACLExistsInDB(DbClient dbClient,String cifsACLNativeGuid){  UnManagedCifsShareACL unManagedCifsAcl=null;  URIQueryResultList result=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getFileCifsACLNativeGUIdConstraint(cifsACLNativeGuid),result);  Iterator<URI> iter=result.iterator();  while (iter.hasNext()) {    URI cifsAclURI=iter.next();    unManagedCifsAcl=dbClient.queryObject(UnManagedCifsShareACL.class,cifsAclURI);    return unManagedCifsAcl;  }  return unManagedCifsAcl;}  }
class C{  protected void receive(Command c,Map h,String b,Authenticatable y){  long id=(int)(Math.random() * 10000);  try {    if (c == Command.COMMIT) {synchronized (_transactions) {        List trans=(List)_transactions.remove(y);        trans=new ArrayList(trans);        for (Iterator i=trans.iterator(); i.hasNext(); ) {          Message m=(Message)i.next();          try {            receive(m.command(),m.headers(),m.body(),y);          } catch (          Exception e) {          }        }      }    } else     if (c == Command.ABORT) {synchronized (_transactions) {        _transactions.remove(y);      }    } else     if (_transactions.get(y) != null) {synchronized (_transactions) {        ((List)_transactions.get(y)).add(new Message(c,h,b));      }    } else {      if (h == null)       h=new HashMap();      String destination=(String)h.get("destination");      if (c == Command.SEND) {        if (y instanceof IntraVMClient || _authenticator.authorizeSend(y.token(),destination)) {synchronized (_listeners) {            List l=(List)_listeners.get(destination);            if (l != null) {              l=new ArrayList(l);              for (Iterator i=l.iterator(); i.hasNext(); ) {                Listener sh=(Listener)i.next();                try {                  sh.message(h,b);                } catch (                Exception e) {                }              }            }          }        } else {          Map error_headers=new HashMap();          error_headers.put("message:","authorization refused");          error_headers.put("type:","send");          error_headers.put("channel:",destination);          y.error(error_headers,"The message:\n-----\n" + b + "\n-----\nAuthentication token refused for this channel");        }      } else       if (c == Command.SUBSCRIBE) {        if (y instanceof IntraVMClient || _authenticator.authorizeSubscribe(y.token(),destination)) {synchronized (_listeners) {            List l=(List)_listeners.get(destination);            if (l == null) {              l=new ArrayList();              _listeners.put(destination,l);            }            if (!l.contains(y))             l.add(y);          }        } else {          Map error_headers=new HashMap();          error_headers.put("message:","authorization refused");          error_headers.put("type:","subscription");          error_headers.put("channel:",destination);          y.error(error_headers,"The message:\n-----\n" + b + "\n-----\nAuthentication token refused for this channel");        }      } else       if (c == Command.UNSUBSCRIBE) {synchronized (_listeners) {          List l=(List)_listeners.get(destination);          if (l != null)           l.remove(y);        }      } else       if (c == Command.BEGIN) {synchronized (_transactions) {          List trans=new ArrayList();          _transactions.put(y,trans);        }      } else       if (c == Command.DISCONNECT) {synchronized (_listeners) {          for (Iterator i=_listeners.values().iterator(); i.hasNext(); ) {            List l=(List)i.next();            l.remove(y);          }        }      }    }    if (h != null) {      String receipt=(String)h.get("receipt");      if (receipt != null) {        HashMap headers=new HashMap();        headers.put("receipt-id",receipt);        y.receive(Command.RECEIPT,headers,null);      }    }  } catch (  Exception e) {  }}  }
class C{  private void _setPoint(int index,DataPoint point){  ntree.set(index,point);  ensureDistances();}  }
class C{  public DrawerBuilder withDrawerLayout(@NonNull DrawerLayout drawerLayout){  this.mDrawerLayout=drawerLayout;  return this;}  }
class C{  private void doUpdate(HttpServletRequest request,ClassEditForm frm,Class_ c,org.hibernate.Session hibSession) throws Exception {  c.setExpectedCapacity(frm.getExpectedCapacity());  if (frm.getDatePattern() == null || frm.getDatePattern().intValue() < 0)   c.setDatePattern(null); else   c.setDatePattern(new DatePatternDAO().get(frm.getDatePattern()));  c.setNbrRooms(frm.getNbrRooms());  c.setNotes(frm.getNotes());  c.setSchedulePrintNote(frm.getSchedulePrintNote());  c.setMaxExpectedCapacity(frm.getMaxExpectedCapacity());  c.setRoomRatio(frm.getRoomRatio());  Boolean disb=frm.getEnabledForStudentScheduling();  c.setEnabledForStudentScheduling(disb == null ? new Boolean(false) : disb);  Boolean di=frm.getDisplayInstructor();  c.setDisplayInstructor(di == null ? new Boolean(false) : di);  Set classInstrs=c.getClassInstructors();  for (Iterator iter=classInstrs.iterator(); iter.hasNext(); ) {    ClassInstructor ci=(ClassInstructor)iter.next();    DepartmentalInstructor instr=ci.getInstructor();    instr.getClasses().remove(ci);    hibSession.saveOrUpdate(instr);    hibSession.delete(ci);  }  classInstrs.clear();  List instrLead=frm.getInstrLead();  List instructors=frm.getInstructors();  List instrPctShare=frm.getInstrPctShare();  for (int i=0; i < instructors.size(); i++) {    String instrId=instructors.get(i).toString();    if (Preference.BLANK_PREF_VALUE.equals(instrId))     continue;    String pctShare=instrPctShare.get(i).toString();    boolean lead="on".equals(instrLead.get(i));    DepartmentalInstructor deptInstr=new DepartmentalInstructorDAO().get(new Long(instrId));    ClassInstructor classInstr=new ClassInstructor();    classInstr.setClassInstructing(c);    classInstr.setInstructor(deptInstr);    classInstr.setLead(new Boolean(lead));    try {      classInstr.setPercentShare(new Integer(pctShare));    } catch (    NumberFormatException e) {      classInstr.setPercentShare(new Integer(0));    }    classInstrs.add(classInstr);    deptInstr.getClasses().add(classInstr);    hibSession.saveOrUpdate(deptInstr);  }  c.setClassInstructors(classInstrs);  ChangeLog.addChange(hibSession,sessionContext,c,ChangeLog.Source.CLASS_EDIT,ChangeLog.Operation.UPDATE,c.getSchedulingSubpart().getInstrOfferingConfig().getControllingCourseOffering().getSubjectArea(),c.getManagingDept());}  }
class C{  public static void initialize(){  MockitoFilter filter=new AllowAll();  initialize(filter);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TDoubleObjectHashMap)) {    return false;  }  TDoubleObjectHashMap that=(TDoubleObjectHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure<V>(that));}  }
class C{  public boolean isEnabled(){  return mEnabled;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override default Eval<Integer> sumInt(final ToIntFunction<? super T> fn){  return Eval.later(null);}  }
class C{  public void trackingBtnClicked(){  final ImageView iv=(ImageView)activity.findViewById(R.id.app_settings_tracking_iv);  final TextView tv=(TextView)activity.findViewById(R.id.app_settings_tracking_tv_switch);  if (Tracking.getTracking().isTracking()) {    iv.setImageResource(R.drawable.ic_stop_orange_24dp);    tv.setTextColor(activity.getResources().getColor(R.color.my_accent));    tv.setText(R.string.tracking_stop);    resetAnalyticsItem();  } else {    iv.setImageResource(R.drawable.ic_play_arrow_light_green_a700_24dp);    tv.setTextColor(activity.getResources().getColor(R.color.my_primary));    tv.setText(R.string.tracking_start);    trackingAnalyticsVP.setVisibility(View.GONE);    changeMapItemVP.setVisibility(View.VISIBLE);  }}  }
class C{  private static boolean needToInclude(boolean excludeOfNonConfigurable,ParameterDefinition paramDef){  if (excludeOfNonConfigurable && !paramDef.isConfigurable()) {    return false;  }  return true;}  }
class C{  protected void processLogEntries(List<String> logs){  if (!wifiOnly || utils.isOnWifi(context)) {    for (    String log : logs) {      if (log != null && log.startsWith("E")) {        for (        LoggingService service : services) {          if (service.isEnabled()) {            service.logEvent(log);          }        }      }    }  }}  }
class C{  @Override public int size(){  return this._map.size();}  }
class C{  static void test(DatagramChannel dc) throws IOException {  try (DatagramChannel server=DatagramChannel.open()){    server.bind(new InetSocketAddress(0));    InetAddress lh=InetAddress.getLocalHost();    dc.connect(new InetSocketAddress(lh,server.socket().getLocalPort()));    dc.write(ByteBuffer.wrap("hello".getBytes()));    ByteBuffer bb=ByteBuffer.allocate(100);    server.receive(bb);    dc.disconnect();    try {      dc.write(ByteBuffer.wrap("another message".getBytes()));      throw new RuntimeException("write should fail, not connected");    } catch (    NotYetConnectedException expected) {    }  } }  }
class C{  public ReplDBMSEvent nextEvent(){  fragno++;  if (fragno >= fragmentsPerTransaction) {    seqno++;    fragno=0;  }  if (seqno >= transactions)   return null; else {    long id=(seqno + 1) % shards;    String shardId="db" + id;    int localVariation=(int)(variation * (Math.random() - .5));    Timestamp ts=new Timestamp(baseTimeMillis + (timestampOffset * eventCount) + localVariation);    if (logger.isDebugEnabled()) {      logger.debug("Event: seqno=" + seqno + " timestamp="+ ts.toString());    }    return helper.createEvent(seqno,fragno,(fragno >= (fragmentsPerTransaction - 1)),shardId,ts);  }}  }
class C{  public int decode(String data,OutputStream out) throws IOException {  byte b1, b2, b3, b4;  int length=0;  int end=data.length();  while (end > 0) {    if (!ignore(data.charAt(end - 1))) {      break;    }    end--;  }  int i=0;  int finish=end - 4;  i=nextI(data,i,finish);  while (i < finish) {    b1=decodingTable[data.charAt(i++)];    i=nextI(data,i,finish);    b2=decodingTable[data.charAt(i++)];    i=nextI(data,i,finish);    b3=decodingTable[data.charAt(i++)];    i=nextI(data,i,finish);    b4=decodingTable[data.charAt(i++)];    if ((b1 | b2 | b3| b4) < 0) {      throw new IOException("invalid characters encountered in base64 data");    }    out.write((b1 << 2) | (b2 >> 4));    out.write((b2 << 4) | (b3 >> 2));    out.write((b3 << 6) | b4);    length+=3;    i=nextI(data,i,finish);  }  length+=decodeLastBlock(out,data.charAt(end - 4),data.charAt(end - 3),data.charAt(end - 2),data.charAt(end - 1));  return length;}  }
class C{  private boolean needsValidation(Method controller){  if (controller == null || !hasAnnotation(controller,POST.class)) {    return false;  }  final Object value=config.getProperty(Csrf.CSRF_PROTECTION);  if (value != null) {    final Csrf.CsrfOptions options=(Csrf.CsrfOptions)config.getProperty(Csrf.CSRF_PROTECTION);switch (options) {case OFF:      return false;case IMPLICIT:    return true;case EXPLICIT:  return hasAnnotation(controller,CsrfValid.class);}}return false;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case MappingPackage.FUNCTION_BLOCK_ATTRIBUTE_SOURCE__ATTRIBUTE:    setAttribute(ATTRIBUTE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  @Override @SuppressWarnings("unchecked") public void addKeyBinding(String keyBinding,ActionListener action){  Hashtable<KeyStroke,Object> current=bindings;  StringTokenizer st=new StringTokenizer(keyBinding);  while (st.hasMoreTokens()) {    KeyStroke keyStroke=parseKeyStroke(st.nextToken());    if (keyStroke == null) {      return;    }    if (st.hasMoreTokens()) {      Object o=current.get(keyStroke);      if (o instanceof Hashtable) {        current=(Hashtable)o;      } else {        o=new Hashtable();        current.put(keyStroke,o);        current=(Hashtable<KeyStroke,Object>)o;      }    } else {      current.put(keyStroke,action);    }  }}  }
class C{  @Nullable public PkiVerificationData verifyPki(){  return pkiVerificationData;}  }
class C{  @Interruptible public static void addSoftReference(SoftReference<?> obj,Object referent){  ReferenceProcessor.addSoftCandidate(obj,ObjectReference.fromObject(referent));}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_Record_ID=getRecord_ID();  m_AD_PInstance_ID=getAD_PInstance_ID();}  }
class C{  @Override public boolean addAll(int location,Collection<? extends KnownShield> collection){  throw new UnsupportedOperationException();}  }
class C{  public AsyncMonitor(final IOneDriveClient client,final AsyncMonitorLocation monitorLocation,final ResultGetter<T> resultGetter){  mClient=client;  mMonitorLocation=monitorLocation;  mResultGetter=resultGetter;}  }
class C{  public static void writeMorphLineStyle(OutStream out,LineStyle startStyle,LineStyle endStyle) throws IOException {  out.writeUI16(startStyle.width);  out.writeUI16(endStyle.width);  startStyle.color.writeWithAlpha(out);  endStyle.color.writeWithAlpha(out);}  }
class C{  @CanIgnoreReturnValue @Override public int add(E element,int occurrences){  checkNotNull(element);  if (occurrences == 0) {    return count(element);  }  CollectPreconditions.checkPositive(occurrences,"occurences");  while (true) {    AtomicInteger existingCounter=Maps.safeGet(countMap,element);    if (existingCounter == null) {      existingCounter=countMap.putIfAbsent(element,new AtomicInteger(occurrences));      if (existingCounter == null) {        return 0;      }    }    while (true) {      int oldValue=existingCounter.get();      if (oldValue != 0) {        try {          int newValue=IntMath.checkedAdd(oldValue,occurrences);          if (existingCounter.compareAndSet(oldValue,newValue)) {            return oldValue;          }        } catch (        ArithmeticException overflow) {          throw new IllegalArgumentException("Overflow adding " + occurrences + " occurrences to a count of "+ oldValue);        }      } else {        AtomicInteger newCounter=new AtomicInteger(occurrences);        if ((countMap.putIfAbsent(element,newCounter) == null) || countMap.replace(element,existingCounter,newCounter)) {          return 0;        }        break;      }    }  }}  }
class C{  Cursor runQuery(ContentResolver resolver,String[] projection,Uri baseUri){  Uri uri=baseUri;  List<String> selectionParts=new ArrayList<String>();  String[] selectionArgs=null;  if (mIds != null) {    selectionParts.add(getWhereClauseForIds(mIds));    selectionArgs=getWhereArgsForIds(mIds);  }  if (mStatusFlags != null) {    List<String> parts=new ArrayList<String>();    if ((mStatusFlags & STATUS_PENDING) != 0) {      parts.add(statusClause("=",Downloads.Impl.STATUS_PENDING));    }    if ((mStatusFlags & STATUS_RUNNING) != 0) {      parts.add(statusClause("=",Downloads.Impl.STATUS_RUNNING));    }    if ((mStatusFlags & STATUS_PAUSED) != 0) {      parts.add(statusClause("=",Downloads.Impl.STATUS_PAUSED_BY_APP));      parts.add(statusClause("=",Downloads.Impl.STATUS_WAITING_TO_RETRY));      parts.add(statusClause("=",Downloads.Impl.STATUS_WAITING_FOR_NETWORK));      parts.add(statusClause("=",Downloads.Impl.STATUS_QUEUED_FOR_WIFI));    }    if ((mStatusFlags & STATUS_SUCCESSFUL) != 0) {      parts.add(statusClause("=",Downloads.Impl.STATUS_SUCCESS));    }    if ((mStatusFlags & STATUS_FAILED) != 0) {      parts.add("(" + statusClause(">=",400) + " AND "+ statusClause("<",600)+ ")");    }    selectionParts.add(joinStrings(" OR ",parts));  }  if (mOnlyIncludeVisibleInDownloadsUi) {    selectionParts.add(Downloads.Impl.COLUMN_IS_VISIBLE_IN_DOWNLOADS_UI + " != '0'");  }  selectionParts.add(Downloads.Impl.COLUMN_DELETED + " != '1'");  String selection=joinStrings(" AND ",selectionParts);  String orderDirection=(mOrderDirection == ORDER_ASCENDING ? "ASC" : "DESC");  String orderBy=mOrderByColumn + " " + orderDirection;  return resolver.query(uri,projection,selection,selectionArgs,orderBy);}  }
class C{  @Override public String toString(){  String s="";  for (  Assignment condition : table.keySet()) {    IndependentDistribution distrib=table.get(condition);    for (    Value head : distrib.getValues()) {      String prob=StringUtils.getShortForm(distrib.getProb(head));      if (condition.size() > 0) {        s+="P(" + headVar + "="+ head+ " | "+ condition+ "):="+ prob+ "\n";      } else {        s+="P(" + headVar + "="+ head+ "):="+ prob+ "\n";      }    }  }  return s;}  }
class C{  public BaseCheckBox(String label,Direction dir){  this();  setText(label,dir);}  }
class C{  private CTaggingFunctions(){}  }
class C{  void startEditingUrl(boolean clearInput,boolean forceIME){  setVisibility(View.VISIBLE);  if (clearInput) {    mUrlInput.setText("");  }  if (!mUrlInput.hasFocus()) {    mUrlInput.requestFocus();  }  if (forceIME) {    mUrlInput.showIME();  }}  }
class C{  public boolean canUpdateReferences(){  return canUpdateJavaReferences();}  }
class C{  private void rotate(float degrees,boolean animate){  if (animate) {    mRotateRunnable.start(degrees);  } else {    mRotation+=degrees;    mMatrix.postRotate(degrees,getWidth() / 2,getHeight() / 2);    invalidate();  }}  }
class C{  public void testLast() throws Exception {  int upper=10;  SingleIndex index=getIndex("last",upper);  assertEquals(upper,index.getIndex());  assertEquals("last",index.getSingleIndex());}  }
class C{  public void info(){  if (!CLogMgt.isLevelFine())   return;  RuntimeMXBean rt=ManagementFactory.getRuntimeMXBean();  if (CLogMgt.isLevelFiner()) {    List<MemoryPoolMXBean> list=ManagementFactory.getMemoryPoolMXBeans();    Iterator<MemoryPoolMXBean> it=list.iterator();    while (it.hasNext()) {      MemoryPoolMXBean pool=(MemoryPoolMXBean)it.next();    }  } else {    MemoryMXBean memory=ManagementFactory.getMemoryMXBean();  }  ThreadMXBean th=ManagementFactory.getThreadMXBean();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @SafeVarargs public Maker(Instantiator<T> instantiator,PropertyValue<? super T,?>... propertyValues){  this.instantiator=instantiator;  this.values=byProperty(propertyValues);}  }
class C{  public boolean hasBeenWritten(int cv){  Integer saw=(mValues.get(cv));  return (saw != null);}  }
class C{  @Override public X509Certificate generateIssuerCert(PublicKey publicKey,PrivateKey privateKey,KeyPair issuerKeys,String commonName,BigInteger serialNr,Date startDate,Date expiryDate) throws GeneralSecurityException, IOException {  JcaX509v3CertificateBuilder certBldr;  JcaX509ExtensionUtils extUtils=new JcaX509ExtensionUtils();  AuthorityKeyIdentifier authorityKeyIdentifier;  if (issuerKeys == null) {    X500Name dn=new X500Name(commonName);    certBldr=new JcaX509v3CertificateBuilder(dn,serialNr,startDate,expiryDate,dn,publicKey);    authorityKeyIdentifier=extUtils.createAuthorityKeyIdentifier(publicKey);  } else {    X509Certificate caCert=issuerKeys.getCertificate().getCertificate();    certBldr=new JcaX509v3CertificateBuilder(caCert,serialNr,startDate,expiryDate,new X500Principal(commonName),publicKey);    authorityKeyIdentifier=extUtils.createAuthorityKeyIdentifier(caCert);  }  certBldr.addExtension(Extension.authorityKeyIdentifier,false,authorityKeyIdentifier).addExtension(Extension.subjectKeyIdentifier,false,extUtils.createSubjectKeyIdentifier(publicKey)).addExtension(Extension.basicConstraints,true,new BasicConstraints(0)).addExtension(Extension.keyUsage,true,new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyCertSign | KeyUsage.cRLSign));  ContentSigner signer;  try {    signer=new JcaContentSignerBuilder(CertificateUtils.getCertificateSignatureAlgorithm()).setProvider("SC").build(privateKey);  } catch (  OperatorCreationException e) {    throw new GeneralSecurityException("Failed to sign the certificate",e);  }  return new JcaX509CertificateConverter().setProvider("SC").getCertificate(certBldr.build(signer));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:29.854 -0500",hash_original_method="51142E64B42932805E0B604E9F91CFAD",hash_generated_method="C303AAB7EA511965A225079A754DF7E1") public CipherParameters generateDerivedParameters(int keySize,int ivSize){  keySize=keySize / 8;  ivSize=ivSize / 8;  byte[] dKey=generateDerivedKey(keySize + ivSize);  return new ParametersWithIV(new KeyParameter(dKey,0,keySize),dKey,keySize,ivSize);}  }
class C{  public FastValueGridPortrayal2D(String valueName,boolean immutableField){  super(valueName);  setImmutableField(immutableField);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  public void printTo(Writer out,long instant) throws IOException {  printTo(out,instant,null);}  }
class C{  public void parseAnswer(Vertex state,TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  stream.nextWord();  stream.skipWhitespace();  float correctness=1.0f;  if (stream.peek() == ':') {    stream.skip();    stream.skipWhitespace();    if (Character.isDigit(stream.peek())) {      String correctnessText=stream.nextWord();      try {        correctness=Float.valueOf(correctnessText);      } catch (      NumberFormatException exception) {        throw new SelfParseException("Invalid correctness: " + correctnessText,stream);      }    }  }  Vertex value=parseElement(stream,elements,debug,network);  Relationship relationship=state.addWeakRelationship(Primitive.QUOTIENT,value,correctness);  stream.skipWhitespace();  if (stream.peek() == '{') {    Vertex meta=network.createMeta(relationship);    stream.skip();    String next=stream.nextWord();    while (!("}".equals(next))) {      if (next == null) {        throw new SelfParseException("Unexpected end of quotient, missing '}'",stream);      }      next=next.toLowerCase();      if (!(PREVIOUS.equals(next))) {        throw new SelfParseException("Unexpected word: '" + next + "' expected 'PREVIOUS'",stream);      }      boolean not=false;      next=stream.peekWord();      if (NOT.equals(next)) {        not=true;        stream.nextWord();      }      Vertex previous=parseElement(stream,elements,debug,network);      ensureNext(';',stream);      if (not) {        meta.removeRelationship(Primitive.PREVIOUS,previous);      } else {        meta.addRelationship(Primitive.PREVIOUS,previous);      }      next=stream.nextWord();    }  }  ensureNext(';',stream);}  }
class C{  public static TimeOfDay hourAndMinuteAndSecondFromDate(Date dateTime,TimeZone tz){  if (dateTime == null)   return null;  Calendar cal=Calendar.getInstance();  cal.setTime(dateTime);  if (tz != null)   cal.setTimeZone(tz);  return new TimeOfDay(cal.get(Calendar.HOUR_OF_DAY),cal.get(Calendar.MINUTE),cal.get(Calendar.SECOND));}  }
class C{  private void writeUpdatedDeviceToStorage(Device device){  try {    cntDeviceStrored.increment();    DeviceSyncRepresentation storeDevice=new DeviceSyncRepresentation(device);    storeClient.put(storeDevice.getKey(),storeDevice);  } catch (  ObsoleteVersionException e) {  }catch (  SyncException e) {    cntSyncException.increment();    logger.error("Could not write device " + device + " to sync store:",e);  }catch (  Exception e) {    logger.error("Count not write device to sync storage " + e.getMessage());  }}  }
class C{  int expandLocalICs(){  List<InnerClass> localICs=innerClasses;  List<InnerClass> actualICs;  int changed;  if (localICs == null) {    List<InnerClass> impliedICs=computeGloballyImpliedICs();    if (impliedICs.isEmpty()) {      actualICs=null;      changed=0;    } else {      actualICs=impliedICs;      changed=1;    }  } else   if (localICs.isEmpty()) {    actualICs=null;    changed=0;  } else {    actualICs=computeICdiff();    changed=actualICs.containsAll(localICs) ? +1 : -1;  }  setInnerClasses(actualICs);  return changed;}  }
class C{  public static void createScript(Map<Id<TransitLine>,TransitLine> lines,String outDir,double interval,int maxSlices){  readScript(outDir,interval,maxSlices);  heatmapScript(outDir,interval,maxSlices);  StringBuffer b=new StringBuffer();  StringBuffer b2=new StringBuffer();  for (  TransitLine l : lines.values()) {    for (    TransitRoute r : l.getRoutes().values()) {      createRouteScript(l.getId(),r.getId(),outDir);      b.append(l.getId().toString() + "--" + r.getId().toString()+ ".R\n");      b2.append("source(\"" + l.getId().toString() + "--"+ r.getId().toString()+ ".R\")\n");    }  }  BufferedWriter w=IOUtils.getBufferedWriter(outDir + "plotAll.bat");  try {    w.write(b.toString());    w.flush();    w.close();  } catch (  IOException e) {    e.printStackTrace();  }  BufferedWriter w2=IOUtils.getBufferedWriter(outDir + "plotAll.R");  try {    w2.write(b2.toString());    w2.flush();    w2.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static boolean hasJoda(){  try {    Class.forName("org.joda.time.LocalDate");    return true;  } catch (  ClassNotFoundException e) {    return false;  }}  }
class C{  public String explain(){  StringBuffer sb=new StringBuffer();  sb.append("I don't understand your formula ");  quotify(sb,scanner.getInput());  sb.append(".\n\n");  explainWhere(sb);  explainWhy(sb);  explainWhat(sb);  return sb.toString();}  }
class C{  void resumeMigrations(List<String> migrationNames) throws VPlexApiException {  s_logger.info("Resuming migrations {}",migrationNames);  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  List<VPlexMigrationInfo> migrationInfoList=discoveryMgr.findMigrations(migrationNames);  StringBuilder migrationArgBuilder=new StringBuilder();  for (  VPlexMigrationInfo migrationInfo : migrationInfoList) {    String migrationStatus=migrationInfo.getStatus();    if (VPlexApiConstants.MIGRATION_INPROGRESS.equals(migrationStatus)) {      continue;    } else     if (!VPlexApiConstants.MIGRATION_PAUSED.equals(migrationStatus)) {      throw VPlexApiException.exceptions.cantResumeMigrationNotPaused(migrationInfo.getName());    }    if (migrationArgBuilder.length() != 0) {      migrationArgBuilder.append(",");    }    migrationArgBuilder.append(migrationInfo.getPath());  }  String migrationPaths=migrationArgBuilder.toString();  if (migrationPaths.length() == 0) {    s_logger.info("All requested migrations are already in progress");    return;  }  URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_RESUME_MIGRATIONS);  s_logger.info("Resume migrations URI is {}",requestURI.toString());  ClientResponse response=null;  try {    s_logger.info("Resuming migrations");    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_M,migrationArgBuilder.toString());    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,false);    s_logger.info("Resume migrations POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Resume migrations response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Resume migrations is completing asynchronously");        _vplexApiClient.waitForCompletion(response);      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.resumeMigrationsFailureStatus(migrationNames,String.valueOf(response.getStatus()),cause);      }    }    s_logger.info("Successfully resume migrations {}",migrationNames);  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedResumeMigrations(migrationNames,e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  int progress;  int i, j, n;  int oneHundredthTotal;  int numRecs;  int FID=0;  ShapeType shapeType;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON && shapeType.getBaseType() != ShapeType.POLYLINE) {      showFeedback("The input shapefile must have a POLYLINE or POLYGON shape type.");      return;    }    numRecs=input.getNumberOfRecords();    oneHundredthTotal=numRecs / 100;    AttributeTable reader=input.getAttributeTable();    int numFields=reader.getFieldCount();    DBFField[] fields=reader.getAllFields();    ShapeFile output=new ShapeFile(outputFile,ShapeType.POINT,fields);    output.setProjectionStringFromOtherShapefile(input);    Object[][] attributeTableRecords=new Object[numRecs][numFields];    Object[] dataRow;    int a=0;    while ((dataRow=reader.nextRecord()) != null) {      System.arraycopy(dataRow,0,attributeTableRecords[a],0,numFields);      a++;    }    com.vividsolutions.jts.geom.Point p=null;    com.vividsolutions.jts.geom.Geometry[] JTSGeometries=null;    n=0;    progress=0;    for (    ShapeFileRecord record : input.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        JTSGeometries=record.getGeometry().getJTSGeometries();        for (a=0; a < JTSGeometries.length; a++) {          p=JTSGeometries[a].getCentroid();          Coordinate pCoord=p.getCoordinate();          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(pCoord.x,pCoord.y);          Object[] rowData=attributeTableRecords[record.getRecordNumber() - 1];          output.addRecord(wbGeometry,rowData);        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Reading shapefile data:",progress);      }    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public String sigmaTipText(){  return "The Sigma value.";}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TypableElement.class) {switch (baseOperationID) {default :      return -1;  }}if (baseClass == IdentifiableElement.class) {switch (baseOperationID) {case TypesPackage.IDENTIFIABLE_ELEMENT___GET_CONTAINING_MODULE:    return TypesPackage.TENUM_LITERAL___GET_CONTAINING_MODULE;default :  return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
