class C{  private void parseSecondaryDevicePar(Node node){}  }
class C{  @PatchMethod public static <T>void add(List array,T value){}  }
class C{  public Matrix4x3f rotateXYZ(Vector3f angles){  return rotateXYZ(angles.x,angles.y,angles.z);}  }
class C{  @Override protected void textLineImpl(char buffer[],int start,int stop,float x,float y){  if (textMode == MODEL) {    textTex=getFontTexture(textFont);    if (textTex == null || textTex.contextIsOutdated()) {      textTex=new FontTexture(this,textFont,is3D());      setFontTexture(textFont,textTex);    }    textTex.begin();    int savedTextureMode=textureMode;    boolean savedStroke=stroke;    float savedNormalX=normalX;    float savedNormalY=normalY;    float savedNormalZ=normalZ;    boolean savedTint=tint;    int savedTintColor=tintColor;    int savedBlendMode=blendMode;    textureMode=NORMAL;    stroke=false;    normalX=0;    normalY=0;    normalZ=1;    tint=true;    tintColor=fillColor;    blendMode(BLEND);    super.textLineImpl(buffer,start,stop,x,y);    textureMode=savedTextureMode;    stroke=savedStroke;    normalX=savedNormalX;    normalY=savedNormalY;    normalZ=savedNormalZ;    tint=savedTint;    tintColor=savedTintColor;    blendMode(savedBlendMode);    textTex.end();  } else   if (textMode == SHAPE) {    super.textLineImpl(buffer,start,stop,x,y);  }}  }
class C{  private URI buildLogoutRequestURI(ClientID clientID,ClientIDToken idToken,URI postLogoutURI) throws AuthException, URISyntaxException, UnsupportedEncodingException {  try {    return replaceIdTokenWithPlaceholder(oidcClient.getOidcClient(clientID).buildLogoutRequestURI(postLogoutURI,idToken,new State(LOGOUT_STATE)));  } catch (  OIDCClientException e) {    throw new AuthException("Failed to build logout URI",e);  }}  }
class C{  @Override public int texturesLength(){  return mTextures.size();}  }
class C{  public void printOptions(){  System.err.println("Current value of GC options");  Option o=getFirst();  while (o != null) {    if (o.getType() == Option.BOOLEAN_OPTION) {      String key=o.getKey();      System.err.print("\t");      System.err.print(key);      for (int c=key.length(); c < 31; c++) {        System.err.print(" ");      }      System.err.print(" = ");      logValue(o,false);      System.err.println();    }    o=o.getNext();  }  o=getFirst();  while (o != null) {    if (o.getType() != Option.BOOLEAN_OPTION && o.getType() != Option.ENUM_OPTION) {      String key=o.getKey();      System.err.print("\t");      System.err.print(key);      for (int c=key.length(); c < 31; c++) {        System.err.print(" ");      }      System.err.print(" = ");      logValue(o,false);      System.err.println();    }    o=o.getNext();  }  o=getFirst();  while (o != null) {    if (o.getType() == Option.ENUM_OPTION) {      String key=o.getKey();      System.err.print("\t");      System.err.print(key);      for (int c=key.length(); c < 31; c++) {        System.err.print(" ");      }      System.err.print(" = ");      logValue(o,false);      System.err.println();    }    o=o.getNext();  }}  }
class C{  protected void mutate(Node node,Rules rules){  if (!node.isFixed() && (PRNG.nextDouble() <= probability)) {    List<Node> mutations=rules.listAvailableMutations(node);    if (!mutations.isEmpty()) {      Node mutation=PRNG.nextItem(mutations).copyNode();      Node parent=node.getParent();      for (int i=0; i < parent.getNumberOfArguments(); i++) {        if (parent.getArgument(i) == node) {          parent.setArgument(i,mutation);          break;        }      }      for (int i=0; i < node.getNumberOfArguments(); i++) {        mutation.setArgument(i,node.getArgument(i));      }      node=mutation;    }  }  for (int i=0; i < node.getNumberOfArguments(); i++) {    mutate(node.getArgument(i),rules);  }}  }
class C{  public CharacterClass createCharacterClass(){  CharacterClassImpl characterClass=new CharacterClassImpl();  return characterClass;}  }
class C{  @Override protected void register(DeployerFactory deployerFactory){  deployerFactory.registerDeployer("tomee1x",DeployerType.INSTALLED,TomeeCopyingInstalledLocalDeployer.class);  deployerFactory.registerDeployer("tomee1x",DeployerType.REMOTE,Tomee1xRemoteDeployer.class);  deployerFactory.registerDeployer("tomee7x",DeployerType.INSTALLED,TomeeCopyingInstalledLocalDeployer.class);  deployerFactory.registerDeployer("tomee7x",DeployerType.REMOTE,Tomee7xRemoteDeployer.class);}  }
class C{  public Object clone(){  UnknownDoubleQuantileEstimator copy=(UnknownDoubleQuantileEstimator)super.clone();  if (this.sampler != null)   copy.sampler=(WeightedRandomSampler)copy.sampler.clone();  return copy;}  }
class C{  public void addKeyBinding(KeyStroke keyStroke,ActionListener action){  Object o=bindings.get(keyStroke);  if (o instanceof Map) {    ((Map)o).put(keyStroke,action);  } else {    bindings.put(keyStroke,action);  }}  }
class C{  public Proposal(String replacementString,int replacementOffset,int replacementLength,int cursorPosition){  this(replacementString,replacementOffset,replacementLength,cursorPosition,null,null);}  }
class C{  public static byte[] decodeFromFile(String filename) throws java.io.IOException {  byte[] decodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      throw new java.io.IOException("File is too big for this convenience method (" + file.length() + " bytes).");    }    buffer=new byte[(int)file.length()];    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  private void initProduct(long key,ServiceAccessType type){  product.setKey(key);  product.setProductId("ProductId");  product.setTemplate(product);  TechnicalProduct tp=new TechnicalProduct();  tp.setAccessType(type);  product.setTechnicalProduct(tp);}  }
class C{  private void startDraining(boolean overflow){  byteBuffer.flip();  if (overflow && byteBuffer.remaining() == 0) {    byteBuffer=ByteBuffer.allocate(byteBuffer.capacity() * 2);  } else {    draining=true;  }}  }
class C{  public synchronized byte[] toByteArray(){  int remaining=count;  if (remaining == 0) {    return EMPTY_BYTE_ARRAY;  }  byte newbuf[]=new byte[remaining];  int pos=0;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    System.arraycopy(buf,0,newbuf,pos,c);    pos+=c;    remaining-=c;    if (remaining == 0) {      break;    }  }  return newbuf;}  }
class C{  private void tred2(){  for (int j=0; j < n; j++) {    d[j]=V[n - 1][j];  }  for (int i=n - 1; i > 0; i--) {    double scale=0.0;    double h=0.0;    for (int k=0; k < i; k++) {      scale=scale + Math.abs(d[k]);    }    if (scale == 0.0) {      e[i]=d[i - 1];      for (int j=0; j < i; j++) {        d[j]=V[i - 1][j];        V[i][j]=0.0;        V[j][i]=0.0;      }    } else {      for (int k=0; k < i; k++) {        d[k]/=scale;        h+=d[k] * d[k];      }      double f=d[i - 1];      double g=Math.sqrt(h);      if (f > 0) {        g=-g;      }      e[i]=scale * g;      h=h - f * g;      d[i - 1]=f - g;      for (int j=0; j < i; j++) {        e[j]=0.0;      }      for (int j=0; j < i; j++) {        f=d[j];        V[j][i]=f;        g=e[j] + V[j][j] * f;        for (int k=j + 1; k <= i - 1; k++) {          g+=V[k][j] * d[k];          e[k]+=V[k][j] * f;        }        e[j]=g;      }      f=0.0;      for (int j=0; j < i; j++) {        e[j]/=h;        f+=e[j] * d[j];      }      double hh=f / (h + h);      for (int j=0; j < i; j++) {        e[j]-=hh * d[j];      }      for (int j=0; j < i; j++) {        f=d[j];        g=e[j];        for (int k=j; k <= i - 1; k++) {          V[k][j]-=(f * e[k] + g * d[k]);        }        d[j]=V[i - 1][j];        V[i][j]=0.0;      }    }    d[i]=h;  }  for (int i=0; i < n - 1; i++) {    V[n - 1][i]=V[i][i];    V[i][i]=1.0;    double h=d[i + 1];    if (h != 0.0) {      for (int k=0; k <= i; k++) {        d[k]=V[k][i + 1] / h;      }      for (int j=0; j <= i; j++) {        double g=0.0;        for (int k=0; k <= i; k++) {          g+=V[k][i + 1] * V[k][j];        }        for (int k=0; k <= i; k++) {          V[k][j]-=g * d[k];        }      }    }    for (int k=0; k <= i; k++) {      V[k][i + 1]=0.0;    }  }  for (int j=0; j < n; j++) {    d[j]=V[n - 1][j];    V[n - 1][j]=0.0;  }  V[n - 1][n - 1]=1.0;  e[0]=0.0;}  }
class C{  public void computeLocalVariablePositions(int initOffset){  this.offset=initOffset;  this.maxOffset=initOffset;  int ilocal=0, maxLocals=this.localIndex;  while (ilocal < maxLocals) {    LocalVariableBinding local=this.locals[ilocal];    if (local == null || ((local.tagBits & TagBits.IsArgument) == 0))     break;    local.resolvedPosition=this.offset;    if ((local.type == TypeBinding.LONG) || (local.type == TypeBinding.DOUBLE)) {      this.offset+=2;    } else {      this.offset++;    }    if (this.offset > 0xFF) {      problemReporter().noMoreAvailableSpaceForArgument(local,local.declaration);    }    ilocal++;  }  if (this.extraSyntheticArguments != null) {    for (int iarg=0, maxArguments=this.extraSyntheticArguments.length; iarg < maxArguments; iarg++) {      SyntheticArgumentBinding argument=this.extraSyntheticArguments[iarg];      argument.resolvedPosition=this.offset;      if ((argument.type == TypeBinding.LONG) || (argument.type == TypeBinding.DOUBLE)) {        this.offset+=2;      } else {        this.offset++;      }      if (this.offset > 0xFF) {        problemReporter().noMoreAvailableSpaceForArgument(argument,(ASTNode)this.referenceContext);      }    }  }  this.computeLocalVariablePositions(ilocal,this.offset);}  }
class C{  private String createFullMessageText(String senderName,String receiverName,String text){  if (senderName.equals(receiverName)) {    return "You mutter to yourself: " + text;  } else {    return senderName + " tells you: " + text;  }}  }
class C{  public String format(int number){  return "" + number;}  }
class C{  private void deleteHelper(EnumerationContext ctx,ServiceDocumentQueryResult results){  if (results.documentCount == 0) {    checkLinkAndFinishDeleting(ctx,results.nextPageLink);    return;  }  List<Operation> operations=new ArrayList<>();  results.documents.values().forEach(null);  if (operations.isEmpty()) {    checkLinkAndFinishDeleting(ctx,results.nextPageLink);    return;  }  OperationJoin.create(operations).setCompletion(null).sendWith(this);}  }
class C{  private void attemptLogin(){  mUserNameView.setError(null);  mPasswordView.setError(null);  String username=mUserNameView.getText().toString();  String password=mPasswordView.getText().toString();  boolean cancel=false;  View focusView=null;  if (TextUtils.isEmpty(password)) {    mPasswordView.setError(getString(R.string.error_field_required));    focusView=mPasswordView;    cancel=true;  }  if (TextUtils.isEmpty(username)) {    mUserNameView.setError(getString(R.string.error_field_required));    focusView=mUserNameView;    cancel=true;  }  if (cancel) {    focusView.requestFocus();  } else {    showProgress();    FetLifeApiIntentService.startApiCall(this,FetLifeApiIntentService.ACTION_APICALL_LOGON_USER,username,password,Boolean.toString(passwordPreferenceCheckBox.isChecked()));  }}  }
class C{  protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){  if (changeSupport == null || (oldValue != null && newValue != null && oldValue.equals(newValue))) {    return;  }  changeSupport.firePropertyChange(propertyName,oldValue,newValue);}  }
class C{  public void init(int address){  slice=pool.buffers[address >> ByteBlockPool.BYTE_BLOCK_SHIFT];  assert slice != null;  upto=address & ByteBlockPool.BYTE_BLOCK_MASK;  offset0=address;  assert upto < slice.length;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TGETTER___GET_MEMBER_TYPE:    return getMemberType();case TypesPackage.TGETTER___GET_MEMBER_AS_STRING:  return getMemberAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static Version resolveVersion(MinecraftDirectory minecraftDir,String version) throws IOException {  Objects.requireNonNull(minecraftDir);  Objects.requireNonNull(version);  if (doesVersionExist(minecraftDir,version)) {    try {      return getVersionParser().parseVersion(resolveVersionHierarchy(version,minecraftDir),PlatformDescription.current());    } catch (    JSONException e) {      throw new IOException("Couldn't parse version json: " + version,e);    }  } else {    return null;  }}  }
class C{  @DSComment("Potential intent to trigger other processing") @DSSafe(DSCat.INTENT_EXCHANGE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.521 -0500",hash_original_method="49B5D5019DC4C58D3432134ADBF206CE",hash_generated_method="6A4551931679F7F4C88D98B48A5B93F2") public Intent putExtras(Intent src){  if (src.mExtras != null) {    mExtras.putAll(src.mExtras);  }  return this;}  }
class C{  public boolean isSecure(){  return this.firstTransactionSecure;}  }
class C{  public Board(int width,int height){  this.width=width;  this.height=height;  data=new IHex[width * height];}  }
class C{  public void testFloatSortMissingFirst() throws Exception {  checkSortMissingFirst("floatdv_missingfirst","-1.3","4.2");}  }
class C{  public static float dpToPixel(Resources res,int dp){  return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,res.getDisplayMetrics());}  }
class C{  private int supplementalHash(int h){  h^=(h >>> 20) ^ (h >>> 12);  return h ^ (h >>> 7) ^ (h >>> 4);}  }
class C{  public EmptyResponse(){  requestFileName="getstate.query";  responseFile="empty.query";}  }
class C{  public static Map<String,List<Point>> readOneToMany(final InputStream stream){  if (stream == null) {    return Collections.emptyMap();  }  final HashMap<String,List<Point>> mapping=new HashMap<>();  try (InputStreamReader inputStreamReader=new InputStreamReader(stream);LineNumberReader reader=new LineNumberReader(inputStreamReader)){    String current=reader.readLine();    while (current != null) {      if (current.trim().length() != 0) {        readMultiple(current,mapping);      }      current=reader.readLine();    }  } catch (  final IOException ioe) {    ClientLogger.logError(ioe);    System.exit(0);  } finally {    try {      stream.close();    } catch (    final IOException e) {      ClientLogger.logError(e);    }  }  return mapping;}  }
class C{  public SimpleConstant(String name,boolean booleanValue){  if (name == null) {    throw new IllegalArgumentException("name must not be null");  }  this.type=ExpressionType.BOOLEAN;  this.name=name;  this.stringValue=null;  this.doubleValue=0;  this.booleanValue=booleanValue;  this.dateValue=null;}  }
class C{  public boolean isSkip(){  return skip;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:25.373 -0500",hash_original_method="1543F2E70FF0D503FC0C174797134204",hash_generated_method="1543F2E70FF0D503FC0C174797134204") Values(Values fromParent){  this.table=fromParent.table.clone();  this.mask=fromParent.mask;  this.size=fromParent.size;  this.tombstones=fromParent.tombstones;  this.maximumLoad=fromParent.maximumLoad;  this.clean=fromParent.clean;  inheritValues(fromParent);}  }
class C{  @Deprecated public Task<VolumeRestRep> changeVirtualArray(URI id,VirtualArrayChangeParam input){  return putTask(input,getIdUrl() + "/varray",id);}  }
class C{  public void resolveMethodReferences(){  for (  PseudoOp op : contents) {    if (op instanceof ResolvableOp) {      ((ResolvableOp)op).resolve();    }  }}  }
class C{  public static void simpleDataExchange(Socket s1,Socket s2) throws Exception {  InputStream i1=s1.getInputStream();  InputStream i2=s2.getInputStream();  OutputStream o1=s1.getOutputStream();  OutputStream o2=s2.getOutputStream();  startSimpleWriter("SimpleWriter-1",o1,100);  startSimpleWriter("SimpleWriter-2",o2,200);  simpleRead(i2,100);  simpleRead(i1,200);}  }
class C{  public boolean isEnabled(){  if (isAvailable()) {    return mBluetoothAdapter.isEnabled();  }  return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static Map<String,Router> guessRouters(TransitSchedule schedule,Network network){  Map<String,Set<String>> modeAssignments=new HashMap<>();  for (  TransitLine transitLine : schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : transitLine.getRoutes().values()) {      Set<String> usedNetworkModes=MapUtils.getSet(transitRoute.getTransportMode(),modeAssignments);      List<Link> links=getLinksFromIds(network,getTransitRouteLinkIds(transitRoute));      for (      Link link : links) {        usedNetworkModes.addAll(link.getAllowedModes());      }    }  }  Map<Set<String>,Router> modeDependentRouters=new HashMap<>();  for (  Set<String> networkModes : modeAssignments.values()) {    if (!modeDependentRouters.containsKey(networkModes)) {      modeDependentRouters.put(networkModes,FastAStarRouter.createModeSeparatedRouter(network,networkModes));    }  }  Map<String,Router> routers=new HashMap<>();  for (  Map.Entry<String,Set<String>> e : modeAssignments.entrySet()) {    routers.put(e.getKey(),modeDependentRouters.get(e.getValue()));  }  return routers;}  }
class C{  public void clearActive(){  end=array.length;}  }
class C{  protected boolean isAdministrador(String idUsuario,String idLibro) throws HibernateException {  boolean result=false;  boolean isAdministrador=isAdministradorLibro(idUsuario,idLibro);  result=isAdministrador;  if (!isAdministrador) {    boolean isCreadorLibro=isCreadorLibro(idUsuario,idLibro);    result=isCreadorLibro;  }  return result;}  }
class C{  public BaggingMLdupTest(String name){  super(name);}  }
class C{  @Override public String toString(){  if (!isValid())   return null;  TransformerData transformerData=Ruqus.getTransformerData();switch (type) {case NORMAL:    return Phrase.from("{field} {transformer_v_name}").put("field",Ruqus.visibleFieldFromField(realmClass,field)).put("transformer_v_name",transformerData.visibleNameOf(transformer)).format() + ReadableStringUtils.argsToString(fieldType,transformer,args);case NO_ARGS:case BEGIN_GROUP:case END_GROUP:case OR:case NOT:  return transformerData.visibleNameOf(transformer);default :return super.toString();}}  }
class C{  public void zoneNullRollback(String stepId){  WorkflowStepCompleter.stepSucceded(stepId);}  }
class C{  public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {  return decodeToObject(encodedObject,NO_OPTIONS,null);}  }
class C{  protected boolean haveSharedCellsRaw(ObjectMatrix2D other){  if (other instanceof SelectedDenseObjectMatrix2D) {    SelectedDenseObjectMatrix2D otherMatrix=(SelectedDenseObjectMatrix2D)other;    return this.elements == otherMatrix.elements;  } else   if (other instanceof DenseObjectMatrix2D) {    DenseObjectMatrix2D otherMatrix=(DenseObjectMatrix2D)other;    return this.elements == otherMatrix.elements;  }  return false;}  }
class C{  public void onContractDetails(Contract contract) throws BrokerModelException {  try {    if (m_client.isConnected()) {      if (!m_contractRequests.containsKey(contract.getId())) {        contract.setIdContractIB(null);        m_contractRequests.put(contract.getId(),contract);        TWSBrokerModel.logContract(TWSBrokerModel.getIBContract(contract));        m_client.reqContractDetails(contract.getId(),TWSBrokerModel.getIBContract(contract));      }    } else {      throw new BrokerModelException(contract.getId(),3080,"Not conected to TWS contract data cannot be retrieved");    }  } catch (  Exception ex) {    throw new BrokerModelException(contract.getId(),3090,"Error broker data Symbol: " + contract.getSymbol() + " Msg: "+ ex.getMessage());  }}  }
class C{  public MenuExecAction(AppView app,String icon,String keytext,String sMyView){  putValue(Action.SMALL_ICON,new ImageIcon(JPrincipalApp.class.getResource(icon)));  putValue(Action.NAME,AppLocal.getIntString(keytext));  putValue(AppUserView.ACTION_TASKNAME,sMyView);  m_App=app;  m_sMyView=sMyView;}  }
class C{  public static MediaType create(String type,String subtype){  return create(type,subtype,ImmutableListMultimap.<String,String>of());}  }
class C{  public static ZipFileIndexCache instance(Context context){  ZipFileIndexCache instance=context.get(ZipFileIndexCache.class);  if (instance == null)   context.put(ZipFileIndexCache.class,instance=new ZipFileIndexCache());  return instance;}  }
class C{  private void removeEmptyRates(){  final List<OverheadRate> emptyRateObjs=new LinkedList<OverheadRate>();  for (  final OverheadRate overheadRate : overheadRates)   if (overheadRate.getPercentage() == 0.0 && (overheadRate.getLumpsumAmount() == null || overheadRate.getLumpsumAmount().getValue() == 0.0) && (overheadRate.getValidity() == null || overheadRate.getValidity().getStartDate() == null || overheadRate.getValidity().getEndDate() == null))   emptyRateObjs.add(overheadRate);  overheadRates.removeAll(emptyRateObjs);}  }
class C{  Object adjustValue(Object value,Map attributes,Object field,int direction) throws BadLocationException, ParseException {  return null;}  }
class C{  private static int testForCompenstation(){  int failures=0;  double base=1.0;  double increment=Math.ulp(base) / 2.0;  int count=1_000_001;  double expectedSum=base + (increment * (count - 1));  double expectedAvg=expectedSum / count;  Supplier<DoubleStream> ds=null;  DoubleSummaryStatistics stats=ds.get().collect(null,null,null);  failures+=compareUlpDifference(expectedSum,stats.getSum(),3);  failures+=compareUlpDifference(expectedAvg,stats.getAverage(),3);  failures+=compareUlpDifference(expectedSum,ds.get().sum(),3);  failures+=compareUlpDifference(expectedAvg,ds.get().average().getAsDouble(),3);  failures+=compareUlpDifference(expectedSum,ds.get().boxed().collect(Collectors.summingDouble(null)),3);  failures+=compareUlpDifference(expectedAvg,ds.get().boxed().collect(Collectors.averagingDouble(null)),3);  return failures;}  }
class C{  public boolean isInSpace(String namespace){  return this.namespace.equals(namespace);}  }
class C{  public static final void rescheduleMissedAlarms(ContentResolver cr,Context context,AlarmManager manager){  long now=System.currentTimeMillis();  long ancient=now - DateUtils.DAY_IN_MILLIS;  String[] projection=new String[]{ALARM_TIME};  Cursor cursor=cr.query(CalendarAlerts.CONTENT_URI,projection,WHERE_RESCHEDULE_MISSED_ALARMS,(new String[]{Long.toString(now),Long.toString(ancient),Long.toString(now)}),SORT_ORDER_ALARMTIME_ASC);  if (cursor == null) {    return;  }  if (DEBUG) {    Log.d(TAG,"missed alarms found: " + cursor.getCount());  }  try {    long alarmTime=-1;    while (cursor.moveToNext()) {      long newAlarmTime=cursor.getLong(0);      if (alarmTime != newAlarmTime) {        if (DEBUG) {          Log.w(TAG,"rescheduling missed alarm. alarmTime: " + newAlarmTime);        }        scheduleAlarm(context,manager,newAlarmTime);        alarmTime=newAlarmTime;      }    }  }  finally {    cursor.close();  }}  }
class C{  public static void install(Globals globals){  globals.undumper=instance;}  }
class C{  public static Level stringToLevel(String level){  Level result;  if (level.equalsIgnoreCase("ALL"))   result=ALL; else   if (level.equalsIgnoreCase("CONFIG"))   result=CONFIG; else   if (level.equalsIgnoreCase("FINE"))   result=FINE; else   if (level.equalsIgnoreCase("FINER"))   result=FINER; else   if (level.equalsIgnoreCase("FINEST"))   result=FINEST; else   if (level.equalsIgnoreCase("INFO"))   result=INFO; else   if (level.equalsIgnoreCase("OFF"))   result=OFF; else   if (level.equalsIgnoreCase("SEVERE"))   result=SEVERE; else   if (level.equalsIgnoreCase("WARNING"))   result=WARNING; else   result=ALL;  return result;}  }
class C{  public static void cleanupCache(){  for (  SoftReference<ReplaceableBitmapDrawable> reference : sImageCache.values()) {    final ReplaceableBitmapDrawable drawable=reference.get();    if (drawable != null)     drawable.setCallback(null);  }}  }
class C{  public BERSequence(ASN1Encodable obj){  super(obj);}  }
class C{  public URL(String protocol,String host,String file) throws MalformedURLException {  this(protocol,host,-1,file,null);}  }
class C{  public int compareTo(UUID uuid){  if (uuid == this) {    return 0;  }  if (this.mostSigBits != uuid.mostSigBits) {    return this.mostSigBits < uuid.mostSigBits ? -1 : 1;  }  if (this.leastSigBits != uuid.leastSigBits) {    return this.leastSigBits < uuid.leastSigBits ? -1 : 1;  }  return 0;}  }
class C{  @Override public void addHandler(Handler handler){synchronized (this) {    ClassLoader loader=Thread.currentThread().getContextClassLoader();    if (loader == null) {      loader=_systemClassLoader;    }    boolean hasLoader=false;    for (int i=_loaders.size() - 1; i >= 0; i--) {      WeakReference<ClassLoader> ref=_loaders.get(i);      ClassLoader refLoader=ref.get();      if (refLoader == null)       _loaders.remove(i);      if (refLoader == loader)       hasLoader=true;      if (isParentLoader(loader,refLoader))       addHandler(handler,refLoader);    }    if (!hasLoader) {      _loaders.add(new WeakReference<ClassLoader>(loader));      addHandler(handler,loader);      EnvLoader.addClassLoaderListener(this,loader);    }    HandlerEntry ownHandlers=_ownHandlers.get();    if (ownHandlers == null) {      ownHandlers=new HandlerEntry(this);      _ownHandlers.set(ownHandlers);    }    ownHandlers.addHandler(handler);  }}  }
class C{  private synchronized void resumeTrackDataHub(){  trackDataHub=((TrackDetailActivity)getActivity()).getTrackDataHub();  trackDataHub.registerTrackDataListener(this,EnumSet.of(TrackDataType.TRACKS_TABLE,TrackDataType.WAYPOINTS_TABLE,TrackDataType.SAMPLED_IN_TRACK_POINTS_TABLE,TrackDataType.SAMPLED_OUT_TRACK_POINTS_TABLE,TrackDataType.PREFERENCE));}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  public WhitenedPCA(int dims){  this(1e-4,dims);}  }
class C{  public void removePrefix(String s){  prefix.removeElement(s);  update();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  SeriesInfo si=getSeriesInfo(stack);  if (si == null)   return new Integer(0);  return new Integer(si.getImageCount());}  }
class C{  public TwoClassStats(double tp,double fp,double tn,double fn){  setTruePositive(tp);  setFalsePositive(fp);  setTrueNegative(tn);  setFalseNegative(fn);}  }
class C{  public Ping(){  this.hasNonce=false;}  }
class C{  public static Bitmap resizeImage(Bitmap originalBitmap,int w,int h){  if (originalBitmap == null) {    return null;  }  int width=originalBitmap.getWidth();  int height=originalBitmap.getHeight();  if (width <= w && height <= h) {    return originalBitmap;  }  float screenRatio=(float)w / h;  float ratio=(float)width / height;  if (screenRatio >= ratio) {    width=(int)(h * ratio);    height=h;  } else {    height=(int)(w / ratio);    width=w;  }  return Bitmap.createScaledBitmap(originalBitmap,width,height,true);}  }
class C{  public int method(int i,float f,Main main,final int iFinal){  return 0;}  }
class C{  public RequestHandle post(Context context,String url,Header[] headers,RequestParams params,String contentType,ResponseHandlerInterface responseHandler){  HttpEntityEnclosingRequestBase request=new HttpPost(getURI(url));  if (params != null)   request.setEntity(paramsToEntity(params,responseHandler));  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context);}  }
class C{  public static <T>List<T> tuple(T... objects){  return Collections.unmodifiableList(list(objects));}  }
class C{  public boolean isSetParams(){  return this.params != null;}  }
class C{  public void createStack(PropertyHandler ph) throws HeatException, APPlatformException {  logger.debug("HeatProcessor.createStack() stackname: " + ph.getStackName());  HeatClient heatClient=createHeatClient(ph);  String template=getTemplate(ph,"create");  String id=String.valueOf((ph.getSettings().getSubscriptionId() + ph.getSettings().getOrganizationId()).hashCode());  if (!ph.getStackName().endsWith(id)) {    ph.setStackName(ph.getStackName() + id);  }  CreateStackRequest request=(CreateStackRequest)new CreateStackRequest(ph.getStackName()).withTemplate(template).withParameters(ph.getTemplateParameters());  try {    Stack created=heatClient.createStack(request);    ph.setStackId(created.getId());  } catch (  HeatException ex) {    try {      ph.setStackId(getStackDetails(ph).getId());    } catch (    HeatException ex2) {      throw ex;    }  }}  }
class C{  @Override protected void determineLabelPositions(DrawContext dc){  LatLon center=this.circle.getCenter();  double distance=this.circle.getRadius() * 1.1;  Angle radius=Angle.fromRadians(distance / dc.getGlobe().getRadius());  LatLon eastEdge=LatLon.greatCircleEndPosition(center,Angle.POS90,radius);  this.labels.get(0).setPosition(new Position(eastEdge,0));}  }
class C{  public static String generatePop(final ITranslationEnvironment environment,final long offset,final OperandSize size,final String target,final List<ReilInstruction> instructions) throws IllegalArgumentException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(size,"Error: Argument size can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  final OperandSize archSize=environment.getArchitectureSize();  final OperandSize resultSize=TranslationHelpers.getNextSize(archSize);  final String loadedValue=target == null ? environment.getNextVariableString() : target;  instructions.add(ReilHelpers.createLdm(offset,archSize,"esp",size,loadedValue));  final String tempEsp=environment.getNextVariableString();  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(archSize));  final String stackValue=String.valueOf(size.getByteSize());  instructions.add(ReilHelpers.createAdd(offset + 1,archSize,"esp",archSize,stackValue,resultSize,tempEsp));  instructions.add(ReilHelpers.createAnd(offset + 2,resultSize,tempEsp,archSize,truncateMask,archSize,"esp"));  return loadedValue;}  }
class C{  @Override public void init(CanvasRenderer canvasRenderer){  canvasRenderer.getRenderer().setBackgroundColor(backgroundColor);}  }
class C{  private void validateTagCreateRequest(TagCreateRequest tagCreateRequest){  Assert.notNull(tagCreateRequest,"A tag create request must be specified.");  tagHelper.validateTagKey(tagCreateRequest.getTagKey());  if (tagCreateRequest.getParentTagKey() != null) {    tagHelper.validateTagKey(tagCreateRequest.getParentTagKey());  }  tagCreateRequest.setDisplayName(alternateKeyHelper.validateStringParameter("display name",tagCreateRequest.getDisplayName()));  tagDaoHelper.validateCreateTagParentKey(tagCreateRequest);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public GF2mVector toExtensionFieldVector(GF2mField field){  int m=field.getDegree();  if ((length % m) != 0) {    throw new ArithmeticException("conversion is impossible");  }  int t=length / m;  int[] result=new int[t];  int count=0;  for (int i=t - 1; i >= 0; i--) {    for (int j=field.getDegree() - 1; j >= 0; j--) {      int q=count >>> 5;      int r=count & 0x1f;      int e=(v[q] >>> r) & 1;      if (e == 1) {        result[i]^=1 << j;      }      count++;    }  }  return new GF2mVector(field,result);}  }
class C{  public void testRetention() throws Exception {  int retain=3;  StorageAgent agent=this.configureStorageService("testRetention",retain);  assertEquals("Initial backups should be 0",0,agent.list().length);  int size=1000;  int[] backupSizes=new int[50];  for (int i=0; i < backupSizes.length; i++) {    size=size + 10;    backupSizes[i]=size;    BackupSpecification backupSpecStore=createBackup("testRetention",size);    agent.store(backupSpecStore);    StorageSpecification[] availableSpecs=agent.list();    if (i < retain) {      assertEquals("URI list size must match number of backups",i + 1,availableSpecs.length);    } else {      assertEquals("URI list size must match retained number of backups",retain,availableSpecs.length);    }    int offset=(i < retain) ? 0 : i - retain + 1;    for (int j=0; j <= i && j < 3; j++) {      StorageSpecification spec=availableSpecs[j];      assertEquals("URI file size must match order i=" + i + " j="+ j+ " offset="+ offset,backupSizes[j + offset],spec.getFileLength(0));    }  }  agent.release();}  }
class C{  private LatLong internalPoint(){  LatLong A=points.get(0);  LatLong B=points.get(1);  LatLong C=points.get(2);  LatLong sample=new LatLong(B);  sample.moveTowards(A,10);  sample.moveTowards(C,10);  return sample;}  }
class C{  public void print(java.lang.String s){  return;}  }
class C{  public int size(){  return count;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void scanFiles(File base) throws JasperException {  Stack<String> dirs=new Stack<String>();  dirs.push(base.toString());  if (extensions == null) {    extensions=new ArrayList<String>();    extensions.add("jsp");    extensions.add("jspx");  }  while (!dirs.isEmpty()) {    String s=dirs.pop();    File f=new File(s);    if (f.exists() && f.isDirectory()) {      String[] files=f.list();      String ext;      for (int i=0; (files != null) && i < files.length; i++) {        File f2=new File(s,files[i]);        if (f2.isDirectory()) {          dirs.push(f2.getPath());        } else {          String path=f2.getPath();          String uri=path.substring(uriRoot.length());          ext=files[i].substring(files[i].lastIndexOf('.') + 1);          if (extensions.contains(ext) || jspConfig.isJspPage(uri)) {            pages.add(path);          }        }      }    }  }}  }
class C{  public void connectAndBind(String host,int port,BindType bindType,String systemId,String password,String systemType,TypeOfNumber addrTon,NumberingPlanIndicator addrNpi,String addressRange,long timeout) throws IOException {  connectAndBind(host,port,new BindParameter(bindType,systemId,password,systemType,addrTon,addrNpi,addressRange),timeout);}  }
class C{  void writeHeader(PrintWriter out){  for (  Statement s : nativeHeaders) {    out.println(s.asString());  }  if (JavaParser.REF_COUNT_STATIC) {    out.println("#define STRING(s) STRING_REF(s)");  } else {    out.println("#define STRING(s) STRING_PTR(s)");  }  out.println();  for (  ClassObj c : classes.values()) {    out.println("class " + toC(c.className) + ";");  }  for (  ClassObj c : classes.values()) {    for (    FieldObj f : c.staticFields.values()) {      StringBuilder buff=new StringBuilder();      buff.append("extern ");      if (f.isFinal) {        buff.append("const ");      }      buff.append(f.type.asString());      buff.append(" ").append(toC(c.className + "." + f.name));      buff.append(";");      out.println(buff.toString());    }    for (    ArrayList<MethodObj> list : c.methods.values()) {      for (      MethodObj m : list) {        if (m.isIgnore) {          continue;        }        if (m.isStatic) {          out.print(m.returnType.asString());          out.print(" " + toC(c.className + "_" + m.name) + "(");          int i=0;          for (          FieldObj p : m.parameters.values()) {            if (i > 0) {              out.print(", ");            }            out.print(p.type.asString() + " " + p.name);            i++;          }          out.println(");");        }      }    }    out.print("class " + toC(c.className) + " : public ");    if (c.superClassName == null) {      if (c.className.equals("java.lang.Object")) {        out.print("RefBase");      } else {        out.print("java_lang_Object");      }    } else {      out.print(toC(c.superClassName));    }    out.println(" {");    out.println("public:");    for (    FieldObj f : c.instanceFields.values()) {      out.print("    ");      out.print(f.type.asString() + " " + f.name);      out.println(";");    }    out.println("public:");    for (    ArrayList<MethodObj> list : c.methods.values()) {      for (      MethodObj m : list) {        if (m.isIgnore) {          continue;        }        if (m.isStatic) {          continue;        }        if (m.isConstructor) {          out.print("    " + toC(c.className) + "(");        } else {          out.print("    " + m.returnType.asString() + " "+ m.name+ "(");        }        int i=0;        for (        FieldObj p : m.parameters.values()) {          if (i > 0) {            out.print(", ");          }          out.print(p.type.asString());          out.print(" " + p.name);          i++;        }        out.println(");");      }    }    out.println("};");  }  ArrayList<String> constantNames=New.arrayList(stringConstantToStringMap.keySet());  Collections.sort(constantNames);  for (  String c : constantNames) {    String s=stringConstantToStringMap.get(c);    if (JavaParser.REF_COUNT_STATIC) {      out.println("ptr<java_lang_String> " + c + " = STRING(L\""+ s+ "\");");    } else {      out.println("java_lang_String* " + c + " = STRING(L\""+ s+ "\");");    }  }}  }
class C{  private void updateToggleButton(Action action,Icon icon,Icon iconRover,Icon iconPressed){  toggleButton.setAction(action);  toggleButton.setIcon(icon);  toggleButton.setRolloverIcon(iconRover);  toggleButton.setPressedIcon(iconPressed);  toggleButton.setText(null);}  }
class C{  public void clearAllBreakpoints(){  for (  SourceInfo si : urlToSourceInfo.values()) {    si.removeAllBreakpoints();  }}  }
class C{  void maybeStartFlow(){synchronized (this) {    if (runState == IDLE || runState == PAUSED_AT_GO_LAZY) {      runState=RUNNING;      lastDirectiveIndex=-1;      restartNeeded=false;    } else {      if (runState == CANCEL_REQUESTED) {        restartNeeded=true;      }      return;    }  }  intermediateValue=currentValue;  runFlowFrom(0,false);}  }
class C{  public void populate(IChunkProvider p_73153_1_,int p_73153_2_,int p_73153_3_){  BlockFalling.fallInstantly=true;  int k=p_73153_2_ * 16;  int l=p_73153_3_ * 16;  BiomeGenBase biomegenbase=this.worldObj.getBiomeGenForCoords(k + 16,l + 16);  this.rand.setSeed(this.worldObj.getSeed());  long i1=this.rand.nextLong() / 2L * 2L + 1L;  long j1=this.rand.nextLong() / 2L * 2L + 1L;  this.rand.setSeed((long)p_73153_2_ * i1 + (long)p_73153_3_ * j1 ^ this.worldObj.getSeed());  boolean flag=false;  boolean populationFlag=((WorldProviderPlanet)worldObj.provider).getDimensionProperties(k,l).hasRivers();  if (populationFlag)   MinecraftForge.EVENT_BUS.post(new PopulateChunkEvent.Pre(p_73153_1_,worldObj,rand,p_73153_2_,p_73153_3_,flag));  if (this.mapFeaturesEnabled) {  }  biomegenbase.decorate(this.worldObj,this.rand,k,l);  if (TerrainGen.populate(p_73153_1_,worldObj,rand,p_73153_2_,p_73153_3_,flag,ANIMALS)) {    SpawnerAnimals.performWorldGenSpawning(this.worldObj,biomegenbase,k + 8,l + 8,16,16,this.rand);  }  k+=8;  l+=8;  if (zmaster587.advancedRocketry.api.Configuration.allowTerraforming && worldObj.provider.getClass() == WorldProviderPlanet.class) {    if (DimensionManager.getInstance().getDimensionProperties(worldObj.provider.dimensionId).isTerraformed()) {      Chunk chunk=worldObj.getChunkFromChunkCoords(p_73153_2_,p_73153_3_);      PlanetEventHandler.modifyChunk(worldObj,(WorldProviderPlanet)worldObj.provider,chunk);    }  }  if (populationFlag)   MinecraftForge.EVENT_BUS.post(new PopulateChunkEvent.Post(p_73153_1_,worldObj,rand,p_73153_2_,p_73153_3_,flag));  BlockFalling.fallInstantly=false;}  }
class C{  public static ImdnDocument parseDeliveryReport(String xml) throws SAXException, ParserConfigurationException, ParseFailureException {  InputSource input=new InputSource(new ByteArrayInputStream(xml.getBytes()));  ImdnParser parser=new ImdnParser(input).parse();  return parser.getImdnDocument();}  }
class C{  public static String findOptionValue(String optionName,List<String> args,boolean remove){  int idx=args.indexOf(optionName);  if (idx >= 0 && idx < args.size() - 2 && !args.get(idx + 1).startsWith("-")) {    if (remove) {      args.remove(idx);      return args.remove(idx);    } else {      return args.get(idx + 1);    }  }  return null;}  }
class C{  private void validateFechaDevolucion(HttpServletRequest request,ConsultaUnidadesDocumentalesForm consultaUnidadesDocumentalesForm,ActionErrors errors){  if (!new CustomDate(consultaUnidadesDocumentalesForm.getFechaFormatoFin(),consultaUnidadesDocumentalesForm.getFechaAFin(),consultaUnidadesDocumentalesForm.getFechaMFin(),consultaUnidadesDocumentalesForm.getFechaDFin(),consultaUnidadesDocumentalesForm.getFechaSFin()).validate() || !new CustomDate(consultaUnidadesDocumentalesForm.getFechaFinFormatoIni(),consultaUnidadesDocumentalesForm.getFechaFinAIni(),consultaUnidadesDocumentalesForm.getFechaFinMIni(),consultaUnidadesDocumentalesForm.getFechaFinDIni(),consultaUnidadesDocumentalesForm.getFechaFinSIni()).validate() || !new CustomDate(consultaUnidadesDocumentalesForm.getFechaFinFormatoFin(),consultaUnidadesDocumentalesForm.getFechaFinAFin(),consultaUnidadesDocumentalesForm.getFechaFinMFin(),consultaUnidadesDocumentalesForm.getFechaFinDFin(),consultaUnidadesDocumentalesForm.getFechaFinSFin()).validate()) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(SolicitudesConstants.LABEL_FECHA_DEVOLUCION,request.getLocale())));  }}  }
class C{  public NbtTagInt(){}  }
class C{  public double filter(double x){  double s0=x - a1 * s1 - a2 * s2;  double retval=(double)(b0 * s0 + b1 * s1 + b2 * s2);  s2=s1;  s1=s0;  return retval;}  }
class C{  public String addOpts(String opts){  applicationUtils.checkApplicationSelected();  Map<String,String> parameters=new HashMap<>();  parameters.put("applicationName",applicationUtils.getCurrentApplication().getName());  parameters.put("jvmOptions",opts);  parameters.put("jvmRelease",applicationUtils.getCurrentApplication().getJvmRelease());  parameters.put("jvmMemory",applicationUtils.getCurrentApplication().getServer().getJvmMemory().toString());  try {    restUtils.sendPutCommand(authenticationUtils.finalHost + "/server/configuration/jvm",authenticationUtils.getMap(),parameters).get("body");  } catch (  ManagerResponseException e) {    throw new CloudUnitCliException("Couldn't add JVM option",e);  }  return "Add java options to " + applicationUtils.getCurrentApplication().getName() + " application successfully";}  }
class C{  static public void assertNull(String message,Object object){  assertTrue(message,object == null);}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot,boolean isNeedResultMsg){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,isNeedResultMsg);}  }
class C{  protected void cacheCtClass(String classname,CtClass c,boolean dynamic){  if (dynamic) {    super.cacheCtClass(classname,c,dynamic);  } else {    if (repository.isPrune())     c.prune();    softcache.put(classname,c);  }}  }
class C{  public static boolean hasNfc(final Context context){  if (Build.VERSION.SDK_INT > Build.VERSION_CODES.GINGERBREAD_MR1) {    final NfcManager manager=(NfcManager)context.getSystemService(Context.NFC_SERVICE);    final NfcAdapter adapter=manager.getDefaultAdapter();    return (adapter != null && adapter.isEnabled());  }  return false;}  }
class C{  private void process(){  log.fine("Start Rows=" + m_rows.size());  int gSize=groups.size();  int[] groupBys=new int[gSize];  Object[] groupBysValue=new Object[gSize];  Object INITVALUE=new Object();  for (int i=0; i < gSize; i++) {    groupBys[i]=groups.get(i).intValue();    groupBysValue[i]=INITVALUE;    log.fine("GroupBy level=" + i + " col="+ groupBys[i]);  }  if (gSize > 0) {    ArrayList<Object> newRow=new ArrayList<Object>();    for (int c=0; c < cols.size(); c++)     newRow.add("");    m_rows.add(newRow);  }  int fSize=functions.size();  int[] funcCols=new int[fSize];  String[] funcFuns=new String[fSize];  int index=0;  Iterator<Integer> it=functions.keySet().iterator();  while (it.hasNext()) {    Object key=it.next();    funcCols[index]=((Integer)key).intValue();    funcFuns[index]=functions.get(key).toString();    log.fine("Function " + funcFuns[index] + " col="+ funcCols[index]);    index++;  }  BigDecimal[][] funcVals=new BigDecimal[fSize][gSize + 1];  int totalIndex=gSize;  log.fine("FunctionValues = [ " + fSize + " * "+ (gSize + 1)+ " ]");  for (int f=0; f < fSize; f++)   for (int g=0; g < gSize + 1; g++)   funcVals[f][g]=Env.ZERO;  rows.clear();  for (int r=0; r < m_rows.size(); r++) {    ArrayList<Object> row=m_rows.get(r);    boolean[] haveBreak=new boolean[groupBys.length];    for (int level=0; level < groupBys.length; level++) {      int idx=groupBys[level];      if (groupBysValue[level] == INITVALUE)       haveBreak[level]=false; else       if (!groupBysValue[level].equals(row.get(idx)))       haveBreak[level]=true; else       haveBreak[level]=false;      if (level > 0 && haveBreak[level - 1])       haveBreak[level]=true;    }    for (int level=groupBys.length - 1; level >= 0; level--) {      int idx=groupBys[level];      if (groupBysValue[level] == INITVALUE)       groupBysValue[level]=row.get(idx); else       if (haveBreak[level]) {        ArrayList<Object> newRow=new ArrayList<Object>();        for (int c=0; c < cols.size(); c++) {          if (c == idx) {            if (groupBysValue[c] == null || groupBysValue[c].toString().length() == 0)             newRow.add("="); else             newRow.add(groupBysValue[c]);          } else {            boolean found=false;            for (int fc=0; fc < funcCols.length; fc++) {              if (c == funcCols[fc]) {                newRow.add(funcVals[fc][level]);                funcVals[fc][level]=Env.ZERO;                found=true;              }            }            if (!found)             newRow.add(null);          }        }        m_groupRows.add(new Integer(rows.size()));        rows.add(newRow);        groupBysValue[level]=row.get(idx);      }    }    for (int fc=0; fc < funcCols.length; fc++) {      int col=funcCols[fc];      Object value=row.get(col);      BigDecimal bd=Env.ZERO;      if (value == null)       ; else       if (value instanceof BigDecimal)       bd=(BigDecimal)value; else {        try {          bd=new BigDecimal(value.toString());        } catch (        Exception e) {        }      }      for (int level=0; level < gSize + 1; level++) {        if (funcFuns[fc].equals(RModel.FUNCTION_SUM))         funcVals[fc][level]=funcVals[fc][level].add(bd); else         if (funcFuns[fc].equals(RModel.FUNCTION_COUNT))         funcVals[fc][level]=funcVals[fc][level].add(ONE);      }    }    rows.add(row);  }  if (functions.size() > 0) {    ArrayList<Object> newRow=new ArrayList<Object>();    for (int c=0; c < cols.size(); c++) {      boolean found=false;      for (int fc=0; fc < funcCols.length; fc++) {        if (c == funcCols[fc]) {          newRow.add(funcVals[fc][totalIndex]);          found=true;        }      }      if (!found)       newRow.add(null);    }    if (gSize > 0)     rows.remove(rows.size() - 1);    m_groupRows.add(new Integer(rows.size()));    rows.add(newRow);  }  log.fine("End Rows=" + rows.size());  m_rows.clear();}  }
class C{  public void loadUrl(String url,JSONObject props) throws JSONException {  LOG.d("App","App.loadUrl(" + url + ","+ props+ ")");  int wait=0;  boolean openExternal=false;  boolean clearHistory=false;  HashMap<String,Object> params=new HashMap<String,Object>();  if (props != null) {    JSONArray keys=props.names();    for (int i=0; i < keys.length(); i++) {      String key=keys.getString(i);      if (key.equals("wait")) {        wait=props.getInt(key);      } else       if (key.equalsIgnoreCase("openexternal")) {        openExternal=props.getBoolean(key);      } else       if (key.equalsIgnoreCase("clearhistory")) {        clearHistory=props.getBoolean(key);      } else {        Object value=props.get(key);        if (value == null) {        } else         if (value.getClass().equals(String.class)) {          params.put(key,(String)value);        } else         if (value.getClass().equals(Boolean.class)) {          params.put(key,(Boolean)value);        } else         if (value.getClass().equals(Integer.class)) {          params.put(key,(Integer)value);        }      }    }  }  if (wait > 0) {    try {synchronized (this) {        this.wait(wait);      }    } catch (    InterruptedException e) {      e.printStackTrace();    }  }  this.webView.showWebPage(url,openExternal,clearHistory,params);}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public XmlReplacement(String file,String xpathExpression,String attributeName,Boolean ignoreIfNonExisting,String value){  this.file=file;  this.xpathExpression=xpathExpression;  this.attributeName=attributeName;  this.ignoreIfNonExisting=ignoreIfNonExisting;  this.value=value;}  }
class C{  public boolean isEmpty(){  return parameters.isEmpty();}  }
class C{  public static boolean vPoolSpecifiesFileReplication(final VirtualPool virtualPool){  return (virtualPool.getFileReplicationType() != null && FileReplicationType.validFileReplication(virtualPool.getFileReplicationType()));}  }
class C{  public void bar(@Nullable Object o){}  }
class C{  private void initAtpTab(){  m_tableAtp=ListboxFactory.newDataTable();  m_tableAtp.setMultiSelection(false);  ArrayList<Info_Column> list=new ArrayList<Info_Column>();  list.add(new Info_Column(" ","M_Product_ID",IDColumn.class));  list.add(new Info_Column(Msg.translate(Env.getCtx(),"M_Warehouse_ID"),"Warehouse",String.class));  list.add(new Info_Column(Msg.translate(Env.getCtx(),"M_Locator_ID"),"Locator",String.class));  list.add(new Info_Column(Msg.getMsg(Env.getCtx(),"Date",true),"Date",Timestamp.class));  list.add(new Info_Column(Msg.translate(Env.getCtx(),"QtyAvailable"),"QtyAvailable",Double.class,true,true,null));  list.add(new Info_Column(Msg.translate(Env.getCtx(),"QtyOnHand"),"QtyOnHand",Double.class));  list.add(new Info_Column(Msg.getMsg(Env.getCtx(),"ExpectedChange",true),"DeltaQty",Double.class));  list.add(new Info_Column(Msg.translate(Env.getCtx(),"C_BPartner_ID"),"BP_Name",String.class));  list.add(new Info_Column(Msg.translate(Env.getCtx(),"QtyOrdered"),"QtyOrdered",Double.class));  list.add(new Info_Column(Msg.translate(Env.getCtx(),"QtyReserved"),"QtyReserved",Double.class));  list.add(new Info_Column(Msg.translate(Env.getCtx(),"M_AttributeSetInstance_ID"),"PASI",String.class));  list.add(new Info_Column(Msg.translate(Env.getCtx(),"DocumentNo"),"DocumentNo",String.class));  m_layoutATP=new Info_Column[list.size()];  list.toArray(m_layoutATP);}  }
class C{  public static int listFindNoCase(String list,String value,String delimiter,boolean trim){  Array arr=trim ? listToArrayTrim(list,delimiter) : listToArray(list,delimiter);  int len=arr.size();  for (int i=1; i <= len; i++) {    if (((String)arr.get(i,"")).equalsIgnoreCase(value))     return i - 1;  }  return -1;}  }
class C{  public TargetInformationReply(final int packetId,final int errorCode,final TargetInformation targetInformation){  super(packetId,errorCode);  if (success()) {    Preconditions.checkNotNull(targetInformation,"IE01053: Target information argument can not be null");  } else {    if (targetInformation != null) {      throw new IllegalArgumentException("IE01074: Target information must be null");    }  }  this.targetInformation=targetInformation;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Document read(File file) throws DocumentException, IOException, XmlPullParserException {  String systemID=file.getAbsolutePath();  return read(new BufferedReader(new FileReader(file)),systemID);}  }
class C{  public void dequeueGroupFileInfo(String fileTransferId,String fileInfo,boolean displayedReportEnabled,boolean deliveredReportEnabled,GroupFileTransferImpl groupFileTransfer) throws PayloadException, NetworkException, SessionNotEstablishedException {  GroupChatSession session=mImService.getGroupChatSession(mChatId);  if (session == null) {    mImService.rejoinGroupChatAsPartOfSendOperation(mChatId);  } else   if (session.isMediaEstablished()) {    session.sendFileInfo(groupFileTransfer,fileTransferId,fileInfo,displayedReportEnabled,deliveredReportEnabled);  } else   if (session.isInitiatedByRemote()) {    if (sLogger.isActivated()) {      sLogger.debug("Group chat session with chatId '" + mChatId + "' is pending for acceptance, accept it.");    }    session.acceptSession();  } else {    throw new SessionNotEstablishedException("The existing group chat session with chatId '" + mChatId + "' is not established right now!");  }}  }
class C{  public static void parser(PrintStream out,parse_action_table action_table,parse_reduce_table reduce_table,int start_st,production start_prod,boolean compact_reduces) throws internal_error {  long start_time=System.currentTimeMillis();  out.println();  out.println("//----------------------------------------------------");  out.println("// The following code was generated by " + version.title_str);  out.println("// " + new Date());  out.println("//----------------------------------------------------");  out.println();  emit_package(out);  for (int i=0; i < import_list.size(); i++)   out.println("import " + import_list.elementAt(i) + ";");  out.println();  out.println("public class " + parser_class_name + " extends java_cup.runtime.lr_parser {");  out.println();  out.println("  /** constructor */");  out.println("  public " + parser_class_name + "() {super();}");  emit_production_table(out);  do_action_table(out,action_table,compact_reduces);  do_reduce_table(out,reduce_table);  out.println("  /** instance of action encapsulation class */");  out.println("  protected " + pre("actions") + " action_obj;");  out.println();  out.println("  /** action encapsulation object initializer */");  out.println("  protected void init_actions()");  out.println("    {");  out.println("      action_obj = new " + pre("actions") + "();");  out.println("    }");  out.println();  out.println("  /** invoke a user supplied parse action */");  out.println("  public java_cup.runtime.symbol do_action(");  out.println("    int                        act_num,");  out.println("    java_cup.runtime.lr_parser parser,");  out.println("    java.util.Stack            stack,");  out.println("    int                        top)");  out.println("    throws java.lang.Exception");  out.println("  {");  out.println("    /* call code in generated class */");  out.println("    return action_obj." + pre("do_action(") + "act_num, parser, stack, top);");  out.println("  }");  out.println("");  out.println("  /** start state */");  out.println("  public int start_state() {return " + start_st + ";}");  out.println("  /** start production */");  out.println("  public int start_production() {return " + start_production.index() + ";}");  out.println();  out.println("  /** EOF symbol index */");  out.println("  public int EOF_sym() {return " + terminal.EOF.index() + ";}");  out.println();  out.println("  /** error symbol index */");  out.println("  public int error_sym() {return " + terminal.error.index() + ";}");  out.println();  if (init_code != null) {    out.println();    out.println("  /** user initialization */");    out.println("  public void user_init() throws java.lang.Exception");    out.println("    {");    out.println(init_code);    out.println("    }");  }  if (scan_code != null) {    out.println();    out.println("  /** scan to get the next token */");    out.println("  public java_cup.runtime.token scan()");    out.println("    throws java.lang.Exception");    out.println("    {");    out.println(scan_code);    out.println("    }");  }  if (parser_code != null) {    out.println();    out.println(parser_code);  }  out.println("};");  emit_action_code(out,start_prod);  parser_time=System.currentTimeMillis() - start_time;}  }
class C{  public void addVideoSharingInvitationRejected(ContactId contact,VideoContent content,ReasonCode reasonCode,long timestamp){  String sessionId=SessionIdGenerator.getNewId();  mRichCallLog.addVideoSharing(sessionId,contact,Direction.INCOMING,content,VideoSharing.State.REJECTED,reasonCode,timestamp);  mBroadcaster.broadcastInvitation(sessionId);}  }
class C{  public MJournal reverseCorrectIt(int GL_JournalBatch_ID){  log.info(toString());  MJournal reverse=new MJournal(this);  reverse.setGL_JournalBatch_ID(GL_JournalBatch_ID);  reverse.setDateDoc(getDateDoc());  reverse.setC_Period_ID(getC_Period_ID());  reverse.setDateAcct(getDateAcct());  reverse.addDescription("(->" + getDocumentNo() + ")");  reverse.setReversal_ID(getGL_Journal_ID());  if (!reverse.save())   return null;  addDescription("(" + reverse.getDocumentNo() + "<-)");  reverse.copyLinesFrom(this,null,'C');  setProcessed(true);  setReversal_ID(reverse.getGL_Journal_ID());  setDocAction(DOCACTION_None);  return reverse;}  }
class C{  private void initLocation(){  MCountry country=m_location.getCountry();  log.fine(country.getName() + ", Region=" + country.isHasRegion()+ " "+ country.getCaptureSequence()+ ", C_Location_ID="+ m_location.getC_Location_ID());  if (country.getC_Country_ID() != s_oldCountry_ID) {    fRegion.removeAllItems();    if (country.isHasRegion()) {      for (      MRegion region : MRegion.getRegions(Env.getCtx(),country.getC_Country_ID())) {        fRegion.addItem(region);      }      if (m_location.getCountry().get_Translation(MCountry.COLUMNNAME_RegionName) != null && m_location.getCountry().get_Translation(MCountry.COLUMNNAME_RegionName).trim().length() > 0)       lRegion.setText(m_location.getCountry().get_Translation(MCountry.COLUMNNAME_RegionName)); else       lRegion.setText(Msg.getMsg(Env.getCtx(),"Region"));    }    s_oldCountry_ID=m_location.getC_Country_ID();  }  if (m_location.getC_Region_ID() > 0 && m_location.getC_Region().getC_Country_ID() == country.getC_Country_ID()) {    fRegion.setSelectedItem(m_location.getC_Region());  } else {    fRegion.setSelectedItem(null);    m_location.setC_Region_ID(0);  }  if (country.isHasRegion() && m_location.getC_Region_ID() > 0) {    Env.setContext(Env.getCtx(),m_WindowNo,Env.TAB_INFO,"C_Region_ID",String.valueOf(m_location.getC_Region_ID()));  } else {    Env.setContext(Env.getCtx(),m_WindowNo,Env.TAB_INFO,"C_Region_ID","0");  }  Env.setContext(Env.getCtx(),m_WindowNo,Env.TAB_INFO,"C_Country_ID",String.valueOf(country.get_ID()));  fCityAutoCompleter.fillList();  gbc.anchor=GridBagConstraints.NORTHWEST;  gbc.gridy=0;  gbc.gridx=0;  gbc.gridwidth=1;  gbc.insets=fieldInsets;  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.weightx=0;  gbc.weighty=0;  mainPanel.removeAll();  mainPanel.add(Box.createVerticalStrut(5),gbc);  int line=1;  String ds=country.getCaptureSequence();  if (ds == null || ds.length() == 0) {    log.log(Level.SEVERE,"CaptureSequence empty - " + country);    ds="";  }  isCityMandatory=false;  isRegionMandatory=false;  isAddress1Mandatory=false;  isAddress2Mandatory=false;  isAddress3Mandatory=false;  isAddress4Mandatory=false;  isPostalMandatory=false;  isPostalAddMandatory=false;  StringTokenizer st=new StringTokenizer(ds,"@",false);  while (st.hasMoreTokens()) {    String s=st.nextToken();    if (s.startsWith("CO")) {      addLine(line++,lCountry,fCountry);      if (m_location.getCountry().isPostcodeLookup()) {        addLine(line++,lOnline,fOnline);      }    } else     if (s.startsWith("A1")) {      addLine(line++,lAddress1,fAddress1);      isAddress1Mandatory=s.endsWith("!");    } else     if (s.startsWith("A2")) {      addLine(line++,lAddress2,fAddress2);      isAddress2Mandatory=s.endsWith("!");    } else     if (s.startsWith("A3")) {      addLine(line++,lAddress3,fAddress3);      isAddress3Mandatory=s.endsWith("!");    } else     if (s.startsWith("A4")) {      addLine(line++,lAddress4,fAddress4);      isAddress4Mandatory=s.endsWith("!");    } else     if (s.startsWith("C")) {      addLine(line++,lCity,fCity);      isCityMandatory=s.endsWith("!");    } else     if (s.startsWith("P")) {      addLine(line++,lPostal,fPostal);      isPostalMandatory=s.endsWith("!");    } else     if (s.startsWith("A")) {      addLine(line++,lPostalAdd,fPostalAdd);      isPostalAddMandatory=s.endsWith("!");    } else     if (s.startsWith("R") && m_location.getCountry().isHasRegion()) {      addLine(line++,lRegion,fRegion);      isRegionMandatory=s.endsWith("!");    }  }  if (m_location.getC_Location_ID() != 0) {    fAddress1.setText(m_location.getAddress1());    fAddress2.setText(m_location.getAddress2());    fAddress3.setText(m_location.getAddress3());    fAddress4.setText(m_location.getAddress4());    fCity.setText(m_location.getCity());    fPostal.setText(m_location.getPostal());    fPostalAdd.setText(m_location.getPostal_Add());    if (m_location.getCountry().isHasRegion()) {      if (m_location.getCountry().get_Translation(MCountry.COLUMNNAME_RegionName) != null && m_location.getCountry().get_Translation(MCountry.COLUMNNAME_RegionName).trim().length() > 0)       lRegion.setText(m_location.getCountry().get_Translation(MCountry.COLUMNNAME_RegionName)); else       lRegion.setText(Msg.getMsg(Env.getCtx(),"Region"));      fRegion.setSelectedItem(m_location.getRegion());    }    if (!fCountry.getSelectedItem().equals(country))     fCountry.setSelectedItem(country);  }  pack();}  }
class C{  public synchronized void onGlobalCounterChanged(int value){  globalCounter.change(value);  if (!isAppVisible.get()) {    globalTempCounter.change(value);  }}  }
class C{  @NotNull private Collection<PyPresenterTestMemberEntry> launchAndGetMembers(@NotNull final String classUnderRefactoring,@NotNull final String destinationClass){  final PyPullUpPresenterImpl sut=configureByClass(classUnderRefactoring);  EasyMock.expect(myView.getSelectedParent()).andReturn(getClassByName(destinationClass)).anyTimes();  myMocksControl.replay();  sut.launch();  return getMembers();}  }
class C{  public static String toString(final byte[] input,final String encoding) throws IOException {  return new String(input,Charsets.toCharset(encoding));}  }
class C{  public void initTuner(boolean controlI2C) throws UsbException {  writeDemodRegister(mDeviceHandle,Page.ONE,(short)0xB1,(short)0x1A,1);  writeDemodRegister(mDeviceHandle,Page.ZERO,(short)0x08,(short)0x4D,1);  setIFFrequency(R820T_IF_FREQUENCY);  writeDemodRegister(mDeviceHandle,Page.ONE,(short)0x15,(short)0x01,1);  initializeRegisters(controlI2C);  setTVStandard(controlI2C);  systemFrequencySelect(0,controlI2C);}  }
class C{  public FrInterruptRequest(int interruptNumber,boolean NMI,int icr){  this.interruptNumber=interruptNumber;  isNMI=NMI;  this.icr=icr;}  }
class C{  protected boolean storeSecretKey(Context context,String keystoreAlias,SecretKey secretKey){  SharedPreferences.Editor editor=getSharedPreferences(context).edit();  if (secretKey == null) {    editor.remove(getSharedPreferenceKey(keystoreAlias));    editor.apply();    return true;  } else {    try {      byte[] wrappedKey=mSecretKeyWrapper.wrap(secretKey);      String encoded=Base64.encodeToString(wrappedKey,Base64.DEFAULT);      editor.putString(getSharedPreferenceKey(keystoreAlias),encoded);      editor.apply();      return true;    } catch (    GeneralSecurityException|IOException|RuntimeException e) {      Log.e(TAG,"save failed",e);    }  }  return false;}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  if (implementation != null)   return implementation.costInline(thresh,env,ctx);  if (ctx == null) {    return 3 + ((right == null) ? 0 : right.costInline(thresh,env,ctx));  }  ClassDefinition ctxClass=ctx.field.getClassDefinition();  try {    if (ctxClass.permitInlinedAccess(env,field.getClassDeclaration()) && ctxClass.permitInlinedAccess(env,field)) {      if (right == null) {        return 3;      } else {        ClassDeclaration rt=env.getClassDeclaration(right.type);        if (ctxClass.permitInlinedAccess(env,rt)) {          return 3 + right.costInline(thresh,env,ctx);        }      }    }  } catch (  ClassNotFound e) {  }  return thresh;}  }
class C{  public void testDetectLanguageHe(){  LOGGER.debug("detectLanguage he");  LanguageDetector instance=LanguageDetector.getInstance();  Document doc;  try {    doc=Jsoup.parse(new File(PATH + "he.wikipedia.org-wiki_20140701.html"),UTF_8);    LOGGER.debug("start detection");    assertEquals("he",instance.detectLanguage(doc.text()).getDetectedLanguage());    assertEquals("he",instance.detectLanguage(doc.text().toLowerCase()).getDetectedLanguage());    assertEquals("he",instance.detectLanguage(doc.text().toUpperCase()).getDetectedLanguage());    LOGGER.debug("detection ended");  } catch (  IOException ex) {    LOGGER.error(ex);  }catch (  NullPointerException npe) {    LOGGER.error("error while fetching page " + npe);  }}  }
class C{  public static String urlEncodeArgs(Map<String,? extends Object> args){  return urlEncodeArgs(args,true);}  }
class C{  private IFolder createFolder(IFolder folderHandle,IProgressMonitor monitor) throws CoreException {  folderHandle.create(false,true,monitor);  if (monitor.isCanceled()) {    throw new OperationCanceledException();  }  return folderHandle;}  }
class C{  public void handleException(ParseException ex,SIPMessage sipMessage,Class hdrClass,String header,String message) throws ParseException {  if (sipStack.isLoggingEnabled())   sipStack.getStackLogger().logException(ex);  if ((hdrClass != null) && (hdrClass.equals(From.class) || hdrClass.equals(To.class) || hdrClass.equals(CSeq.class)|| hdrClass.equals(Via.class)|| hdrClass.equals(CallID.class)|| hdrClass.equals(RequestLine.class)|| hdrClass.equals(StatusLine.class))) {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("Encountered Bad Message \n" + sipMessage.toString());    }    String msgString=sipMessage.toString();    if (!msgString.startsWith("SIP/") && !msgString.startsWith("ACK ")) {      SIPMessage badReqRes=createBadReqRes(msgString,ex);      if (badReqRes != null) {        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("Sending automatic 400 Bad Request:");          sipStack.getStackLogger().logDebug(msgString);        }        try {          this.sendMessage(badReqRes,this.getPeerInetAddress(),this.getPeerPort(),false);        } catch (        IOException e) {          if (sipStack.isLoggingEnabled())           this.sipStack.getStackLogger().logException(e);        }      } else {        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("Could not formulate automatic 400 Bad Request");        }      }    }    throw ex;  } else {    sipMessage.addUnparsed(header);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  double z;  double noData;  int progress;  int i;  double minVal, maxVal;  int numBins=1024;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  minVal=Double.parseDouble(args[2]);  maxVal=Double.parseDouble(args[3]);  numBins=Integer.parseInt(args[4]);  int numBinsLessOne=numBins - 1;  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int nRows=image.getNumberRows();    int nCols=image.getNumberColumns();    noData=image.getNoDataValue();    double scaleFactor=numBins / (maxVal - minVal);    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,noData);    output.setPreferredPalette(image.getPreferredPalette());    double[] data=null;    for (row=0; row < nRows; row++) {      data=image.getRowValues(row);      for (col=0; col < nCols; col++) {        if (data[col] != noData) {          z=(int)(data[col] - minVal) * scaleFactor;          if (z < 0) {            z=0;          }          if (z > numBinsLessOne) {            z=numBinsLessOne;          }          output.setValue(row,col,z);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress(progress);    }    image.close();    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);    showFeedback(e.getMessage());  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected CommandOutput receiveOutput(String shellId,String commandId) throws WinRMException {  StrBuilder stdout=new StrBuilder();  StrBuilder stderr=new StrBuilder();  int exitCode=0;  int sequenceId=0;  boolean done=false;  while (!done) {    ReceiveData data=newReceiveOutput(shellId,commandId,sequenceId).execute();    stdout.append(data.getStdout());    stderr.append(data.getStderr());    if (data.getExitCode() != null) {      exitCode=data.getExitCode();    }    done=data.isDone();    sequenceId++;  }  return new CommandOutput(stdout.toString(),stderr.toString(),exitCode);}  }
class C{  @SuppressWarnings("unchecked") public SimpleLexicon(short[] numSubStates,int smoothingCutoff,double[] smoothParam,Smoother smoother,double threshold,StateSetTreeList trainTrees){  this(numSubStates,threshold);  init(trainTrees);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgrSafe() == null)   return null;  PseudoMenu currUI=stack.getUIMgrSafe().getCurrUI();  if (currUI != null)   currUI.repaint();  return null;}  }
class C{  public String toString(){  int old=data.position();  try {    data.position(0);    return data.asCharBuffer().toString();  }  finally {    data.position(old);  }}  }
class C{  public void writeEnum(final int fieldNumber,final int value) throws IOException {  writeTag(fieldNumber,WireFormat.WIRETYPE_VARINT);  writeEnumNoTag(value);}  }
class C{  public Bindings add(String property,JComboBox combo,int defaultValue){  combo.addActionListener(this);  return add(new JComboBoxBinding(property,combo,defaultValue));}  }
class C{  public SuffixText(Composite parent,int style){  super(parent,style);  this.setLayout(new SuffixLayout());  suffixText=createSuffixText();  editableText=new Text(this,SWT.NONE);  configureListeners();  this.setBackground(getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));  this.setCursor(getDisplay().getSystemCursor(SWT.CURSOR_IBEAM));}  }
class C{  Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    final int length=this.length();    Iterator keys=this.keys();    writer.write('{');    if (length == 1) {      Object key=keys.next();      writer.write(quote(key.toString()));      writer.write(':');      if (indentFactor > 0) {        writer.write(' ');      }      writeValue(writer,this.map.get(key),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      while (keys.hasNext()) {        Object key=keys.next();        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        indent(writer,newindent);        writer.write(quote(key.toString()));        writer.write(':');        if (indentFactor > 0) {          writer.write(' ');        }        writeValue(writer,this.map.get(key),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      indent(writer,indent);    }    writer.write('}');    return writer;  } catch (  IOException exception) {    throw new JSONException(exception);  }}  }
class C{  protected boolean[] instanceWeights(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance){  print("clusterer uses instance weights");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance);  print("...");  int numTrain=2 * getNumInstances(), missingLevel=0;  boolean predictorMissing=false;  boolean[] result=new boolean[2];  Instances train=null;  Clusterer[] clusterers=null;  ClusterEvaluation evaluationB=null;  ClusterEvaluation evaluationI=null;  boolean built=false;  boolean evalFail=false;  try {    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() + 1 : 0,numericPredictor ? getNumNumeric() + 1 : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,multiInstance);    if (nominalPredictor && !multiInstance) {      train.deleteAttributeAt(0);    }    if (missingLevel > 0) {      addMissing(train,missingLevel,predictorMissing);    }    clusterers=AbstractClusterer.makeCopies(getClusterer(),2);    evaluationB=new ClusterEvaluation();    evaluationI=new ClusterEvaluation();    clusterers[0].buildClusterer(train);    evaluationB.setClusterer(clusterers[0]);  } catch (  Exception ex) {    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    for (int i=0; i < train.numInstances(); i++) {      train.instance(i).setWeight(0);    }    Random random=new Random(1);    for (int i=0; i < train.numInstances() / 2; i++) {      int inst=Math.abs(random.nextInt()) % train.numInstances();      int weight=Math.abs(random.nextInt()) % 10 + 1;      train.instance(inst).setWeight(weight);    }    clusterers[1].buildClusterer(train);    built=true;    evaluationI.setClusterer(clusterers[1]);    if (evaluationB.equals(evaluationI)) {      evalFail=true;      throw new Exception("evalFail");    }    println("yes");    result[0]=true;  } catch (  Exception ex) {    println("no");    result[0]=false;    if (m_Debug) {      println("\n=== Full Report ===");      if (evalFail) {        println("Results don't differ between non-weighted and " + "weighted instance models.");        println("Here are the results:\n");        println("\nboth methods\n");        println(evaluationB.clusterResultsToString());      } else {        print("Problem during");        if (built) {          print(" testing");        } else {          print(" training");        }        println(": " + ex.getMessage() + "\n");      }      println("Here is the dataset:\n");      println("=== Train Dataset ===\n" + train.toString() + "\n");      println("=== Train Weights ===\n");      for (int i=0; i < train.numInstances(); i++) {        println(" " + (i + 1) + "    "+ train.instance(i).weight());      }    }  }  return result;}  }
class C{  public void mutableMultiply(double c){  for (  KernelPoint kp : points)   kp.mutableMultiply(c);}  }
class C{  protected void paintComponent(Graphics g){  if (ui != null) {    Graphics scratchGraphics=(g == null) ? null : g.create();    try {      ui.update(scratchGraphics,this);    }  finally {      scratchGraphics.dispose();    }  }}  }
class C{  protected Object createElementInfo(){  return new JarPackageFragmentRootInfo();}  }
class C{  public synchronized static boolean removeGlobalUnitConverter(UnitConverter unit){  return CONVERTERS.remove(unit);}  }
class C{  private void hideActionBarIfNeeded(){  ActionBar actionBar=getActionBar();  if (actionBar != null && !isHardwareKeyboardPresent() && mHideActionBarOnSoftKeyboardUp && mIsKeyboardOpen && actionBar.isShowing()) {    getActionBar().hide();  }}  }
class C{  public static double sin(double a){  return 0.0d;}  }
class C{  public boolean isShowFlowgraphViews(){  return m_flowgraphViewsCheckbox.isSelected();}  }
class C{  @Override public ModbusRequest readRequest(AbstractModbusListener listener) throws ModbusIOException {  ModbusRequest req;  try {    byteInputStream.reset();synchronized (byteInputStream) {      byte[] buffer=byteInputStream.getBuffer();      if (!headless) {        if (dataInputStream.read(buffer,0,6) == -1) {          throw new EOFException("Premature end of stream (Header truncated)");        }        int transaction=ModbusUtil.registerToShort(buffer,0) & 0x0000FFFF;        int protocol=ModbusUtil.registerToShort(buffer,2);        int count=ModbusUtil.registerToShort(buffer,4);        if (dataInputStream.read(buffer,6,count) == -1) {          throw new ModbusIOException("Premature end of stream (Message truncated)");        }        logger.debug("Read: {}",ModbusUtil.toHex(buffer,0,count + 6));        byteInputStream.reset(buffer,(6 + count));        byteInputStream.skip(6);        int unit=byteInputStream.readByte();        int functionCode=byteInputStream.readUnsignedByte();        byteInputStream.reset();        req=ModbusRequest.createModbusRequest(functionCode);        req.setUnitID(unit);        req.setHeadless(false);        req.setTransactionID(transaction);        req.setProtocolID(protocol);        req.setDataLength(count);        req.readFrom(byteInputStream);      } else {        int unit=dataInputStream.readByte();        int function=dataInputStream.readByte();        req=ModbusRequest.createModbusRequest(function);        req.setUnitID(unit);        req.setHeadless(true);        req.readData(dataInputStream);        dataInputStream.readShort();        if (logger.isDebugEnabled()) {          logger.debug("Read: {}",req.getHexMessage());        }      }    }    return req;  } catch (  EOFException eoex) {    throw new ModbusIOException("End of File",true);  }catch (  SocketTimeoutException x) {    throw new ModbusIOException("Timeout reading request",x);  }catch (  SocketException sockex) {    throw new ModbusIOException("Socket Exception",sockex);  }catch (  IOException ex) {    throw new ModbusIOException("I/O exception - failed to read",ex);  }}  }
class C{  public BackButtonBuilder<T> backButton(String text){  if (!(parent instanceof SubInlineMenuBuilder)) {    throw new UnsupportedOperationException("Back buttons are only allowed for sub menus!");  }  return new BackButtonBuilder<>(this,buttons().size(),text);}  }
class C{  public static void deinitialize(){  INSTANCE.codenameOneRunning=false;synchronized (lock) {    lock.notifyAll();  }}  }
class C{  @Path(TriggerCommonParams.PATH_PROCESSES) public Process redirectToProcess(){  return new Process();}  }
class C{  public DateMidnight withWeekyear(int weekyear){  return withMillis(getChronology().weekyear().set(getMillis(),weekyear));}  }
class C{  void paintComponent(Graphics g){  RectangularShape rectangle;  int radius=RapidLookAndFeel.CORNER_DEFAULT_RADIUS;switch (position) {case SwingConstants.LEFT:    rectangle=new RoundRectangle2D.Double(0,0,button.getWidth() + radius,button.getHeight(),radius,radius);  break;case SwingConstants.CENTER:rectangle=new Rectangle2D.Double(0,0,button.getWidth(),button.getHeight());break;default :rectangle=new RoundRectangle2D.Double(-radius,0,button.getWidth() + radius,button.getHeight(),radius,radius);break;}RapidLookTools.drawButton(button,g,rectangle);}  }
class C{  public void add(String key,String value){  String k=normalize(key);  List<String> l=map.get(k);  if (l == null) {    l=new LinkedList<String>();    map.put(k,l);  }  l.add(value);}  }
class C{  public void startElement(String elementNamespaceURI,String elementLocalName,String elementName) throws SAXException {  super.startElement(elementNamespaceURI,elementLocalName,elementName);}  }
class C{  public List subList(int fromIndex,int toIndex){  throw new UnsupportedOperationException();}  }
class C{  public PaintContext createContext(ColorModel cm,Rectangle deviceBounds,Rectangle2D userBounds,AffineTransform xform,RenderingHints hints){  if (patternTransform != null) {    xform=new AffineTransform(xform);    xform.concatenate(patternTransform);  }  if ((lastContext != null) && lastContext.getColorModel().equals(cm)) {    double[] p=new double[6];    double[] q=new double[6];    xform.getMatrix(p);    lastContext.getUsr2Dev().getMatrix(q);    if ((p[0] == q[0]) && (p[1] == q[1]) && (p[2] == q[2])&& (p[3] == q[3])) {      if ((p[4] == q[4]) && (p[5] == q[5]))       return lastContext; else       return new PatternPaintContextWrapper(lastContext,(int)(q[4] - p[4] + 0.5),(int)(q[5] - p[5] + 0.5));    }  }  lastContext=new PatternPaintContext(cm,xform,hints,tile,patternRegion,overflow);  return lastContext;}  }
class C{  public DefaultResourceLoader(ClassLoader classLoader){  this.classLoader=classLoader;}  }
class C{  @Override protected boolean showCriteriaParameter(){  return false;}  }
class C{  private boolean hasMatchingDo(){  Assert.isTrue(fToken == Symbols.TokenWHILE);  nextToken();switch (fToken) {case Symbols.TokenRBRACE:    skipScope();case Symbols.TokenSEMICOLON:  skipToStatementStart(false,false);return fToken == Symbols.TokenDO;}return false;}  }
class C{  public void trim(final int ego){  this.alters[ego].trim();}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public void copyMeta(GridMetadataAwareAdapter from){  assert from != null;  copyMeta(from.allMeta());}  }
class C{  public synchronized static LinkedHashMap<String,ArrayList<String>> predictAddressTags(Context context,final String elementType,final long elementOsmId,final ElementSearch es,final LinkedHashMap<String,ArrayList<String>> current,int maxRank){  Address newAddress=null;  loadLastAddresses(context);  if (lastAddresses != null && lastAddresses.size() > 0) {    newAddress=new Address(elementType,elementOsmId,lastAddresses.get(0).tags);    if (newAddress.tags.containsKey(Tags.KEY_ADDR_HOUSENUMBER)) {      newAddress.tags.put(Tags.KEY_ADDR_HOUSENUMBER,Util.getArrayList(""));    }    Log.d("Address","seeding with last addresses");  }  if (newAddress == null) {    newAddress=new Address(elementType,elementOsmId,new LinkedHashMap<String,ArrayList<String>>());    Log.d("Address","nothing to seed with, creating new");  }  for (  String k : current.keySet()) {    Log.d("Address","Adding in existing tag " + k);    newAddress.tags.put(k,current.get(k));  }  boolean hasPlace=newAddress.tags.containsKey(Tags.KEY_ADDR_PLACE);  boolean hasNumber=current.containsKey(Tags.KEY_ADDR_HOUSENUMBER);  StorageDelegator storageDelegator=Application.getDelegator();  if (es != null) {    ArrayList<String> streetNames=new ArrayList<String>(Arrays.asList(es.getStreetNames()));    if ((streetNames != null && streetNames.size() > 0) || hasPlace) {      LinkedHashMap<String,ArrayList<String>> tags=newAddress.tags;      Log.d(DEBUG_TAG,"tags.get(Tags.KEY_ADDR_STREET)) " + tags.get(Tags.KEY_ADDR_STREET));      String street;      if (!hasPlace) {        ArrayList<String> addrStreetValues=tags.get(Tags.KEY_ADDR_STREET);        int rank=-1;        boolean hasAddrStreet=addrStreetValues != null && addrStreetValues.size() > 0 && !addrStreetValues.get(0).equals("");        if (hasAddrStreet) {          rank=streetNames.indexOf(addrStreetValues.get(0));        }        Log.d(DEBUG_TAG,(hasAddrStreet ? "rank " + rank + " for "+ addrStreetValues.get(0) : "no addrStreet tag"));        if (!hasAddrStreet || rank > maxRank || rank < 0) {          tags.put(Tags.KEY_ADDR_STREET,Util.getArrayList(streetNames.get(0)));        }        addrStreetValues=tags.get(Tags.KEY_ADDR_STREET);        if (addrStreetValues != null && addrStreetValues.size() > 0) {          street=tags.get(Tags.KEY_ADDR_STREET).get(0);        } else {          street="";        }        try {          newAddress.setSide(es.getStreetId(street));        } catch (        OsmException e) {          newAddress.side=Side.UNKNOWN;        }      } else {        ArrayList<String> addrPlaceValues=tags.get(Tags.KEY_ADDR_PLACE);        if (addrPlaceValues != null && addrPlaceValues.size() > 0) {          street=tags.get(Tags.KEY_ADDR_PLACE).get(0);        } else {          street="";        }        newAddress.side=Side.UNKNOWN;      }      Log.d(DEBUG_TAG,"side " + newAddress.getSide());      Side side=newAddress.getSide();      if (!hasNumber && street != null && lastAddresses != null) {        TreeMap<Integer,Address> list=getHouseNumbers(street,side,lastAddresses);        if (list.size() == 0) {          try {            Log.d(DEBUG_TAG,"street " + street);            long streetId=-1;            if (!hasPlace) {              streetId=es.getStreetId(street);            }            for (            Node n : storageDelegator.getCurrentStorage().getNodes()) {              seedAddressList(street,streetId,n,lastAddresses);            }            for (            Way w : storageDelegator.getCurrentStorage().getWays()) {              seedAddressList(street,streetId,w,lastAddresses);            }            list=getHouseNumbers(street,side,lastAddresses);          } catch (          OsmException e) {            e.printStackTrace();          }        }        if (list.size() >= 2) {          try {            int firstNumber=list.firstKey();            int lastNumber=list.lastKey();            int inc=1;            float incTotal=0;            float incCount=0;            ArrayList<Integer> numbers=new ArrayList<Integer>(list.keySet());            for (int i=0; i < numbers.size() - 1; i++) {              int diff=numbers.get(i + 1).intValue() - numbers.get(i).intValue();              if (diff > 0 && diff <= 2) {                incTotal=incTotal + diff;                incCount++;              }            }            inc=Math.round(incTotal / incCount);            int nearest=-1;            int prev=-1;            int post=-1;            double distanceFirst=0;            double distanceLast=0;            double distance=Double.MAX_VALUE;            for (int i=0; i < numbers.size(); i++) {              int number=Integer.valueOf(numbers.get(i));              Address a=list.get(number);              double newDistance=GeoMath.haversineDistance(newAddress.lon,newAddress.lat,a.lon,a.lat);              if (newDistance <= distance) {                distance=newDistance;                nearest=number;                prev=numbers.get(Math.max(0,i - 1));                post=numbers.get(Math.min(numbers.size() - 1,i + 1));              }              if (i == 0) {                distanceFirst=newDistance;              } else               if (i == numbers.size() - 1) {                distanceLast=newDistance;              }            }            double distanceTotal=GeoMath.haversineDistance(list.get(firstNumber).lon,list.get(firstNumber).lat,list.get(lastNumber).lon,list.get(lastNumber).lat);            if (nearest == firstNumber) {              if (distanceLast > distanceTotal) {                inc=-inc;              }            } else             if (nearest == lastNumber) {              if (distanceFirst < distanceTotal) {                inc=-inc;              }            } else {              double distanceNearestFirst=GeoMath.haversineDistance(list.get(firstNumber).lon,list.get(firstNumber).lat,list.get(nearest).lon,list.get(nearest).lat);              if (distanceFirst < distanceNearestFirst) {                inc=-inc;              }            }            Log.d("TagEditor","First " + firstNumber + " last "+ lastNumber+ " nearest "+ nearest+ " inc "+ inc+ " prev "+ prev+ " post "+ post+ " side "+ side);            for (            String key : list.get(nearest).tags.keySet()) {              if (!tags.containsKey(key)) {                tags.put(key,list.get(nearest).tags.get(key));              }            }            int newNumber=Math.max(1,nearest + inc);            if (numbers.contains(Integer.valueOf(newNumber))) {              if (!numbers.contains(Integer.valueOf(Math.max(1,newNumber + inc)))) {                newNumber=Math.max(1,newNumber + inc);              } else               if (!numbers.contains(Integer.valueOf(Math.max(1,newNumber - inc)))) {                newNumber=Math.max(1,newNumber - inc);              }            }            tags.put(Tags.KEY_ADDR_HOUSENUMBER,Util.getArrayList("" + newNumber));          } catch (          NumberFormatException nfe) {            tags.put(Tags.KEY_ADDR_HOUSENUMBER,Util.getArrayList(""));          }        } else         if (list.size() == 1) {          for (          String key : list.get(list.firstKey()).tags.keySet()) {            if (!tags.containsKey(key)) {              tags.put(key,list.get(list.firstKey()).tags.get(key));            }          }        } else         if (list.size() == 0) {          tags.put(Tags.KEY_ADDR_HOUSENUMBER,Util.getArrayList(""));        }      }    } else {      Preferences prefs=new Preferences(Application.getCurrentApplication());      Set<String> addressTags=prefs.addressTags();      for (      String key : addressTags) {        newAddress.tags.put(key,Util.getArrayList(""));      }    }  }  if (elementType.equals(Node.NAME)) {    boolean isOnBuilding=false;    for (    Way w : storageDelegator.getCurrentStorage().getWays((Node)storageDelegator.getOsmElement(Node.NAME,elementOsmId))) {      if (w.hasTagKey(Tags.KEY_BUILDING)) {        isOnBuilding=true;      } else       if (w.getParentRelations() != null) {        for (        Relation r : w.getParentRelations()) {          if (r.hasTagKey(Tags.KEY_BUILDING) || r.hasTag(Tags.KEY_TYPE,Tags.VALUE_BUILDING)) {            isOnBuilding=true;            break;          }        }      }      if (isOnBuilding) {        break;      }    }    if (isOnBuilding && !newAddress.tags.containsKey(Tags.KEY_ENTRANCE)) {      newAddress.tags.put(Tags.KEY_ENTRANCE,Util.getArrayList("yes"));    }  }  return newAddress.tags;}  }
class C{  public static PlaceholderFragment newInstance(){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  fragment.setArguments(args);  return fragment;}  }
class C{  public MTreeNode(int capacity,boolean isLeaf){  super(capacity,isLeaf,MTreeEntry.class);}  }
class C{  static char[][] translatedNames(char[][] names){  if (names == null)   return null;  int length=names.length;  char[][] newNames=new char[length][];  for (int i=0; i < length; i++) {    newNames[i]=translatedName(names[i]);  }  return newNames;}  }
class C{  public void cleanActivityList(List<Activity> list,QuadTree<ClusterPoint> qt){  if (list.size() > 1) {    int index=1;    while (index < list.size()) {      Activity a=list.get(index - 1);      Cluster ca=((List<ClusterPoint>)qt.getDisk(a.getLocation().getCoordinate().x,a.getLocation().getCoordinate().y,0)).get(0).getCluster();      Activity b=list.get(index);      Cluster cb=((List<ClusterPoint>)qt.getDisk(b.getLocation().getCoordinate().x,b.getLocation().getCoordinate().y,0)).get(0).getCluster();      if (ca != null && cb != null) {        if (ca.getClusterId().equalsIgnoreCase(cb.getClusterId())) {          a.setEndTime(b.getEndTime());          list.remove(index);        } else {          index++;        }      } else {        index++;      }    }  } else {    log.warn("Could not thin the list. There is only one element in the list.");  }  for (  Activity a : list) {    Cluster c=((List<ClusterPoint>)qt.getDisk(a.getLocation().getCoordinate().x,a.getLocation().getCoordinate().y,0)).get(0).getCluster();    if (c != null) {      a.getLocation().setCoordinate(c.getCenterOfGravity().getCoordinate());    }  }}  }
class C{  public static long longEncode(long geohash,int level){  final short precision=(short)(geohash & 15);  if (precision == level) {    return geohash;  } else   if (precision > level) {    return ((geohash >>> (((precision - level) * 5) + 4)) << 4) | level;  }  return ((geohash >>> 4) << (((level - precision) * 5) + 4) | level);}  }
class C{  public double interpolate(Coord coord){  if (sg != null && coord != null)   return interpolate(coord.getX(),coord.getY());  log.warn("Either the spatial grid is not initialized or the coordinates are zero!");  return Double.NaN;}  }
class C{  public UnchangeableAllowingOnBehalfActingException(Object[] params){  super(params);}  }
class C{  public MusicTrack(PlayMusicManager playMusicManager){  super(playMusicManager);}  }
class C{  public static void updateQtyBatchs(Properties ctx,I_PP_Order order,boolean override){  BigDecimal qtyBatchSize=order.getQtyBatchSize();  if (qtyBatchSize.signum() == 0 || override) {    int AD_Workflow_ID=order.getAD_Workflow_ID();    if (AD_Workflow_ID <= 0)     return;    MWorkflow wf=MWorkflow.get(ctx,AD_Workflow_ID);    qtyBatchSize=wf.getQtyBatchSize().setScale(0,RoundingMode.UP);    order.setQtyBatchSize(qtyBatchSize);  }  BigDecimal QtyBatchs;  if (qtyBatchSize.signum() == 0)   QtyBatchs=Env.ONE; else   QtyBatchs=order.getQtyOrdered().divide(qtyBatchSize,0,BigDecimal.ROUND_UP);  order.setQtyBatchs(QtyBatchs);}  }
class C{  @Pointcut("execution(* java.lang.Object.*(..))") public void objectMethod(){}  }
class C{  public static final Bitmap createBlurredBitmap(final Bitmap sentBitmap){  if (sentBitmap == null) {    return null;  }  final Bitmap mBitmap=sentBitmap.copy(sentBitmap.getConfig(),true);  final int w=mBitmap.getWidth();  final int h=mBitmap.getHeight();  final int[] pix=new int[w * h];  mBitmap.getPixels(pix,0,w,0,0,w,h);  final int wm=w - 1;  final int hm=h - 1;  final int wh=w * h;  final int div=DEFAULT_BLUR_RADIUS + DEFAULT_BLUR_RADIUS + 1;  final int r[]=new int[wh];  final int g[]=new int[wh];  final int b[]=new int[wh];  final int vmin[]=new int[Math.max(w,h)];  int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;  int divsum=div + 1 >> 1;  divsum*=divsum;  final int dv[]=new int[256 * divsum];  for (i=0; i < 256 * divsum; i++) {    dv[i]=i / divsum;  }  yw=yi=0;  final int[][] stack=new int[div][3];  int stackpointer;  int stackstart;  int[] sir;  int rbs;  final int r1=DEFAULT_BLUR_RADIUS + 1;  int routsum, goutsum, boutsum;  int rinsum, ginsum, binsum;  for (y=0; y < h; y++) {    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;    for (i=-DEFAULT_BLUR_RADIUS; i <= DEFAULT_BLUR_RADIUS; i++) {      p=pix[yi + Math.min(wm,Math.max(i,0))];      sir=stack[i + DEFAULT_BLUR_RADIUS];      sir[0]=(p & 0xff0000) >> 16;      sir[1]=(p & 0x00ff00) >> 8;      sir[2]=p & 0x0000ff;      rbs=r1 - Math.abs(i);      rsum+=sir[0] * rbs;      gsum+=sir[1] * rbs;      bsum+=sir[2] * rbs;      if (i > 0) {        rinsum+=sir[0];        ginsum+=sir[1];        binsum+=sir[2];      } else {        routsum+=sir[0];        goutsum+=sir[1];        boutsum+=sir[2];      }    }    stackpointer=DEFAULT_BLUR_RADIUS;    for (x=0; x < w; x++) {      r[yi]=dv[rsum];      g[yi]=dv[gsum];      b[yi]=dv[bsum];      rsum-=routsum;      gsum-=goutsum;      bsum-=boutsum;      stackstart=stackpointer - DEFAULT_BLUR_RADIUS + div;      sir=stack[stackstart % div];      routsum-=sir[0];      goutsum-=sir[1];      boutsum-=sir[2];      if (y == 0) {        vmin[x]=Math.min(x + DEFAULT_BLUR_RADIUS + 1,wm);      }      p=pix[yw + vmin[x]];      sir[0]=(p & 0xff0000) >> 16;      sir[1]=(p & 0x00ff00) >> 8;      sir[2]=p & 0x0000ff;      rinsum+=sir[0];      ginsum+=sir[1];      binsum+=sir[2];      rsum+=rinsum;      gsum+=ginsum;      bsum+=binsum;      stackpointer=(stackpointer + 1) % div;      sir=stack[stackpointer % div];      routsum+=sir[0];      goutsum+=sir[1];      boutsum+=sir[2];      rinsum-=sir[0];      ginsum-=sir[1];      binsum-=sir[2];      yi++;    }    yw+=w;  }  for (x=0; x < w; x++) {    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;    yp=-DEFAULT_BLUR_RADIUS * w;    for (i=-DEFAULT_BLUR_RADIUS; i <= DEFAULT_BLUR_RADIUS; i++) {      yi=Math.max(0,yp) + x;      sir=stack[i + DEFAULT_BLUR_RADIUS];      sir[0]=r[yi];      sir[1]=g[yi];      sir[2]=b[yi];      rbs=r1 - Math.abs(i);      rsum+=r[yi] * rbs;      gsum+=g[yi] * rbs;      bsum+=b[yi] * rbs;      if (i > 0) {        rinsum+=sir[0];        ginsum+=sir[1];        binsum+=sir[2];      } else {        routsum+=sir[0];        goutsum+=sir[1];        boutsum+=sir[2];      }      if (i < hm) {        yp+=w;      }    }    yi=x;    stackpointer=DEFAULT_BLUR_RADIUS;    for (y=0; y < h; y++) {      pix[yi]=0xff000000 | dv[rsum] << 16 | dv[gsum] << 8 | dv[bsum];      rsum-=routsum;      gsum-=goutsum;      bsum-=boutsum;      stackstart=stackpointer - DEFAULT_BLUR_RADIUS + div;      sir=stack[stackstart % div];      routsum-=sir[0];      goutsum-=sir[1];      boutsum-=sir[2];      if (x == 0) {        vmin[y]=Math.min(y + r1,hm) * w;      }      p=x + vmin[y];      sir[0]=r[p];      sir[1]=g[p];      sir[2]=b[p];      rinsum+=sir[0];      ginsum+=sir[1];      binsum+=sir[2];      rsum+=rinsum;      gsum+=ginsum;      bsum+=binsum;      stackpointer=(stackpointer + 1) % div;      sir=stack[stackpointer];      routsum+=sir[0];      goutsum+=sir[1];      boutsum+=sir[2];      rinsum-=sir[0];      ginsum-=sir[1];      binsum-=sir[2];      yi+=w;    }  }  mBitmap.setPixels(pix,0,w,0,0,w,h);  return mBitmap;}  }
class C{  public static void loadProject(final JTree tree,final INaviProject project){  Preconditions.checkNotNull(tree,"IE01435: Tree argument can not be null");  Preconditions.checkNotNull(project,"IE01436: Project argument can not be null");  loadProjectThreaded(SwingUtilities.getWindowAncestor(tree),project,tree);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private Data(){}  }
class C{  @Override public void cancel() throws SQLException {  try {    debugCodeCall("cancel");    checkClosed();    CommandInterface c=executingCommand;    try {      if (c != null) {        c.cancel();        cancelled=true;      }    }  finally {      setExecutingStatement(null);    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private static int lowerBound(int from,final int to,final int pos,final IntComparator comp){  int len=to - from;  while (len > 0) {    int half=len / 2;    int middle=from + half;    if (comp.compare(middle,pos) < 0) {      from=middle + 1;      len-=half + 1;    } else {      len=half;    }  }  return from;}  }
class C{  public T link(String value){  return attr("link",value);}  }
class C{  public void init() throws ServletException {}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_afterCode_2_();}  }
class C{  public void write(long position,ByteBuf src,int srcStart,int srcLength) throws IOException {  final int bufferPosition=checkOffset(position,srcLength);  final long destAddress=PlatformDependent.directBufferAddress(lastMapped) + bufferPosition;  if (src.hasMemoryAddress()) {    final long srcAddress=src.memoryAddress() + srcStart;    PlatformDependent.copyMemory(srcAddress,destAddress,srcLength);  } else   if (src.hasArray()) {    final byte[] srcArray=src.array();    PlatformDependent.copyMemory(srcArray,srcStart,destAddress,srcLength);  } else {    throw new IllegalArgumentException("unsupported byte buffer");  }  position+=srcLength;  if (position > this.length) {    this.length=position;  }}  }
class C{  public void requestUpdate(){synchronized (updateLock) {    updateOnce=true;  }}  }
class C{  public final View findNextFocus(ViewGroup root,View focused,int direction){  return findNextFocus(root,focused,null,direction);}  }
class C{  public void printUnit(JCCompilationUnit tree,JCClassDecl cdef) throws IOException {  docComments=tree.docComments;  printDocComment(tree);  if (tree.pid != null) {    print("package ");    printExpr(tree.pid);    print(";");    println();  }  boolean firstImport=true;  for (List<JCTree> l=tree.defs; l.nonEmpty() && (cdef == null || l.head.hasTag(IMPORT)); l=l.tail) {    if (l.head.hasTag(IMPORT)) {      JCImport imp=(JCImport)l.head;      Name name=TreeInfo.name(imp.qualid);      if (name == name.table.names.asterisk || cdef == null || isUsed(TreeInfo.symbol(imp.qualid),cdef)) {        if (firstImport) {          firstImport=false;          println();        }        printStat(imp);      }    } else {      printStat(l.head);    }  }  if (cdef != null) {    printStat(cdef);    println();  }}  }
class C{  public static SpannableString typeface(Context context,int strResId,int style){  if (sDefaultTypefaceCollection == null) {    throw new IllegalStateException("Default typeface collection not initialized. Forgot to call init()?");  }  return typeface(context.getString(strResId),sDefaultTypefaceCollection,style);}  }
class C{  public static NodeSelection empty(){  return EMPTY;}  }
class C{  public static Io.Builder<GraphSONIo> build(){  return build(GraphSONVersion.V1_0);}  }
class C{  String[] createdAssumptions(){  Boolean sufficesSelected=useSufficesButton.getSelection();  Vector<String[]> vec=new Vector<String[]>();  int lastAddedAssump=state.assumeReps.size();  if (state.splitChosen()) {    lastAddedAssump--;  }  for (int i=state.firstAddedAssumption; i < lastAddedAssump; i++) {    NodeRepresentation rep=state.assumeReps.elementAt(i);    String newDecls=null;    while (rep.onSameLineAsNext) {      if (newDecls != null) {        newDecls=newDecls + ", ";      } else {        newDecls="";      }      newDecls=newDecls + rep.nodeText[0];      i++;      rep=state.assumeReps.elementAt(i);    }    if (newDecls == null) {      vec.add(rep.primedNodeText());    } else {      vec.add(new String[]{newDecls + ", " + rep.nodeText[0]});    }  }  Vector<String> resVec=new Vector<String>();  for (int i=0; i < vec.size(); i++) {    String[] strArray=vec.elementAt(i);    for (int j=0; j < strArray.length; j++) {      String str=strArray[j];      if ((j == strArray.length - 1) && (i != vec.size() - 1)) {        str=str + ",";      }      resVec.add(str);    }  }  String[] result=new String[resVec.size()];  for (int i=0; i < result.length; i++) {    result[i]=resVec.elementAt(i);  }  return result;}  }
class C{  private static boolean isLdapRef(Object obj){  if (!(obj instanceof Reference)) {    return false;  }  String thisClassName=LdapCtxFactory.class.getName();  Reference ref=(Reference)obj;  return thisClassName.equals(ref.getFactoryClassName());}  }
class C{  private void initializeListeners(){  addMouseListener(m_listener);  addMouseMotionListener(m_listener);  addKeyListener(m_listener);  addFocusListener(m_listener);  m_caret.addCaretListener(m_listener);}  }
class C{  public int[] coefficients(){  IntArrayList coefficients=new IntArrayList();  for (int i=0, c; i < list.size(); i++)   if ((c=(int)list.getLong(i)) != 0)   coefficients.add(c);  return coefficients.toIntArray();}  }
class C{  @Override public void accept(double value){  ++count;  simpleSum+=value;  sumWithCompensation(value);  min=Math.min(min,value);  max=Math.max(max,value);}  }
class C{  private void notifyRegisterChanged(){  for (  final IRegistersChangedListener listener : reglisteners) {    listener.registerDataChanged();  }}  }
class C{  public void add(int v){  _add(numberNode(v));}  }
class C{  public @Test final void testCreationNegative(){  thrown.expect(IllegalArgumentException.class);  new Email(null,null);}  }
class C{  public static void printHelp(){  Debug.output("");  Debug.output("usage: java com.bbn.openmap.image.ImageMaster [-file <properties file> || -url <properties file>] [-masterprops || -serverprops");  Debug.output("     -file requires a complete path to a ImageMaster properties file.");  Debug.output("     -url requires an URL to a ImageMaster properties file.");  Debug.output("     -masterprops prints out an example of a ImageMaster properties file.");  Debug.output("     -serverprops prints out an example of a ImageServer properties file.");  Debug.output("");  System.exit(1);}  }
class C{  public static PolygonRDD SpatialRangeQuery(PolygonRDD polygonRDD,Envelope envelope,Integer condition){  JavaRDD<Polygon> result=polygonRDD.getRawPolygonRDD().filter(new PolygonRangeFilter(envelope,condition));  return new PolygonRDD(result);}  }
class C{  public void add(String name,String value){  if (headerBuilder == null) {    headerBuilder=new Headers.Builder();  }  headerBuilder.add(name,value);}  }
class C{  public JSONObject put(String key,int value) throws JSONException {  this.put(key,new Integer(value));  return this;}  }
class C{  public VNXeCommandJob restoreSnap(String snapId){  SnapRequests req=new SnapRequests(_khClient);  return req.restoreSnap(snapId,null);}  }
class C{  public void addLayoutComponent(String name,Component comp){}  }
class C{  public void addSample(int weight,float value){  ensureSortedByIndex();  Sample newSample=recycledSampleCount > 0 ? recycledSamples[--recycledSampleCount] : new Sample();  newSample.index=nextSampleIndex++;  newSample.weight=weight;  newSample.value=value;  samples.add(newSample);  totalWeight+=weight;  while (totalWeight > maxWeight) {    int excessWeight=totalWeight - maxWeight;    Sample oldestSample=samples.get(0);    if (oldestSample.weight <= excessWeight) {      totalWeight-=oldestSample.weight;      samples.remove(0);      if (recycledSampleCount < MAX_RECYCLED_SAMPLES) {        recycledSamples[recycledSampleCount++]=oldestSample;      }    } else {      oldestSample.weight-=excessWeight;      totalWeight-=excessWeight;    }  }}  }
class C{  public ClientPropertiesBuilder withClientTimeout(Integer timeout){  properties.setProperty(CLIENT_CONNECTION_TIMEOUT,timeout.toString());  return this;}  }
class C{  public ErrorDetails validateOwnerDetails(ErrorDetails errorDetails,final List<OwnerInformation> ownerDetailsList){  if (ownerDetailsList == null) {    errorDetails=new ErrorDetails();    errorDetails.setErrorCode(OWNER_DETAILS_REQ_CODE);    errorDetails.setErrorMessage(OWNER_DETAILS_REQ_MSG);    return errorDetails;  } else {    for (    final OwnerInformation ownerDetails : ownerDetailsList) {      if (StringUtils.isBlank(ownerDetails.getMobileNumber())) {        errorDetails=new ErrorDetails();        errorDetails.setErrorCode(MOBILE_NO_REQ_CODE);        errorDetails.setErrorMessage(MOBILE_NO_REQ_MSG);        return errorDetails;      } else {        if (ownerDetails.getMobileNumber().trim().length() != 10) {          errorDetails=new ErrorDetails();          errorDetails.setErrorCode(MOBILENO_MAX_LENGTH_ERROR_CODE);          errorDetails.setErrorMessage(MOBILENO_MAX_LENGTH_ERROR_MSG);          return errorDetails;        }        Pattern pattern=Pattern.compile("\\d{10}");        Matcher matcher=pattern.matcher(ownerDetails.getMobileNumber());        if (!matcher.matches()) {          errorDetails=new ErrorDetails();          errorDetails.setErrorCode(MOBILENO_ALPHANUMERIC_ERROR_CODE);          errorDetails.setErrorMessage(MOBILENO_ALPHANUMERIC_ERROR_MSG);          return errorDetails;        }      }      if (StringUtils.isBlank(ownerDetails.getName())) {        errorDetails=new ErrorDetails();        errorDetails.setErrorCode(OWNER_NAME_REQ_CODE);        errorDetails.setErrorMessage(OWNER_NAME_REQ_MSG);        return errorDetails;      } else       if (StringUtils.isBlank(ownerDetails.getGender())) {        errorDetails=new ErrorDetails();        errorDetails.setErrorCode(GENDER_REQ_CODE);        errorDetails.setErrorMessage(GENDER_REQ_MSG);        return errorDetails;      } else       if (StringUtils.isBlank(ownerDetails.getGuardianRelation())) {        errorDetails=new ErrorDetails();        errorDetails.setErrorCode(GUARDIAN_RELATION_REQ_CODE);        errorDetails.setErrorMessage(GUARDIAN_RELATION_REQ_MSG);        return errorDetails;      } else       if (StringUtils.isBlank(ownerDetails.getGuardian())) {        errorDetails=new ErrorDetails();        errorDetails.setErrorCode(GUARDIAN_REQ_CODE);        errorDetails.setErrorMessage(GUARDIAN_REQ_MSG);        return errorDetails;      }    }  }  return errorDetails;}  }
class C{  public DataTruncation(int index,boolean parameter,boolean read,int dataSize,int transferSize,Throwable cause){  super(THE_REASON,read ? THE_SQLSTATE_READ : THE_SQLSTATE_WRITE,THE_ERROR_CODE,cause);  this.index=index;  this.parameter=parameter;  this.read=read;  this.dataSize=dataSize;  this.transferSize=transferSize;}  }
class C{  public SimpleRegister(){  register=null;}  }
class C{  LDAPCertSelector(X509CertSelector selector,X500Principal certSubject,String ldapDN) throws IOException {  this.selector=selector == null ? new X509CertSelector() : selector;  this.certSubject=certSubject;  this.subject=new X500Name(ldapDN).asX500Principal();}  }
class C{  public FolderDescription(IFolder folder,boolean virtual){  super(folder);  this.virtual=virtual;}  }
class C{  @Override public void updateScreen(){  tokenBox.updateCursorCounter();}  }
class C{  public Trie(){  clear();}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.ARGUMENT__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static void mapDatasource(Map map,List props){  String value=(String)map.get("type");  String jndiName="";  LogWriterI18n writer=TransactionUtils.getLogWriterI18n();  Object ds=null;  try {    jndiName=(String)map.get("jndi-name");    if (value.equals("PooledDataSource")) {      ds=DataSourceFactory.getPooledDataSource(map,props);      ctx.rebind("java:/" + jndiName,ds);      dataSourceList.add(ds);      if (writer.fineEnabled())       writer.fine("Bound java:/" + jndiName + " to Context");    } else     if (value.equals("XAPooledDataSource")) {      ds=DataSourceFactory.getTranxDataSource(map,props);      ctx.rebind("java:/" + jndiName,ds);      dataSourceList.add(ds);      if (writer.fineEnabled())       writer.fine("Bound java:/" + jndiName + " to Context");    } else     if (value.equals("SimpleDataSource")) {      ds=DataSourceFactory.getSimpleDataSource(map,props);      ctx.rebind("java:/" + jndiName,ds);      if (writer.fineEnabled())       writer.fine("Bound java:/" + jndiName + " to Context");    } else     if (value.equals("ManagedDataSource")) {      ClientConnectionFactoryWrapper ds1=DataSourceFactory.getManagedDataSource(map,props);      ctx.rebind("java:/" + jndiName,ds1.getClientConnFactory());      dataSourceList.add(ds1);      if (writer.fineEnabled())       writer.fine("Bound java:/" + jndiName + " to Context");    } else {      String exception="JNDIInvoker::mapDataSource::No correct type of DataSource";      if (writer.fineEnabled())       writer.fine(exception);      throw new DataSourceCreateException(exception);    }    ds=null;  } catch (  NamingException ne) {    if (writer.infoEnabled())     writer.info(LocalizedStrings.JNDIInvoker_JNDIINVOKER_MAPDATASOURCE_0_WHILE_BINDING_1_TO_JNDI_CONTEXT,new Object[]{"NamingException",jndiName});  }catch (  DataSourceCreateException dsce) {    if (writer.infoEnabled())     writer.info(LocalizedStrings.JNDIInvoker_JNDIINVOKER_MAPDATASOURCE_0_WHILE_BINDING_1_TO_JNDI_CONTEXT,new Object[]{"DataSourceCreateException",jndiName});  }}  }
class C{  public long allocateSlot(int slotNumber){  return toLong(bucketNum,slotNumber);}  }
class C{  public static boolean intersectLineSegmentTriangle(Vector3d p0,Vector3d p1,Vector3d v0,Vector3d v1,Vector3d v2,double epsilon,Vector3d intersectionPoint){  return intersectLineSegmentTriangle(p0.x,p0.y,p0.z,p1.x,p1.y,p1.z,v0.x,v0.y,v0.z,v1.x,v1.y,v1.z,v2.x,v2.y,v2.z,epsilon,intersectionPoint);}  }
class C{  private void visitFrame(final Frame f){  int i, t;  int nTop=0;  int nLocal=0;  int nStack=0;  int[] locals=f.inputLocals;  int[] stacks=f.inputStack;  for (i=0; i < locals.length; ++i) {    t=locals[i];    if (t == Frame.TOP) {      ++nTop;    } else {      nLocal+=nTop + 1;      nTop=0;    }    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    ++nStack;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  int frameIndex=startFrame(f.owner.position,nLocal,nStack);  for (i=0; nLocal > 0; ++i, --nLocal) {    t=locals[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  endFrame();}  }
class C{  private void reserveStock(MPPOrderBOMLine[] lines){  for (  MPPOrderBOMLine line : lines) {    line.reserveStock();    line.saveEx();  }}  }
class C{  static public double jn(int n,double x) throws ArithmeticException {  int j, m;  double ax, bj, bjm, bjp, sum, tox, ans;  boolean jsum;  final double ACC=40.0;  final double BIGNO=1.0e+10;  final double BIGNI=1.0e-10;  if (n == 0)   return j0(x);  if (n == 1)   return j1(x);  ax=Math.abs(x);  if (ax == 0.0)   return 0.0;  if (ax > (double)n) {    tox=2.0 / ax;    bjm=j0(ax);    bj=j1(ax);    for (j=1; j < n; j++) {      bjp=j * tox * bj - bjm;      bjm=bj;      bj=bjp;    }    ans=bj;  } else {    tox=2.0 / ax;    m=2 * ((n + (int)Math.sqrt(ACC * n)) / 2);    jsum=false;    bjp=ans=sum=0.0;    bj=1.0;    for (j=m; j > 0; j--) {      bjm=j * tox * bj - bjp;      bjp=bj;      bj=bjm;      if (Math.abs(bj) > BIGNO) {        bj*=BIGNI;        bjp*=BIGNI;        ans*=BIGNI;        sum*=BIGNI;      }      if (jsum)       sum+=bj;      jsum=!jsum;      if (j == n)       ans=bjp;    }    sum=2.0 * sum - bj;    ans/=sum;  }  return x < 0.0 && n % 2 == 1 ? -ans : ans;}  }
class C{  @Override public SurfaceData restoreContents(){  acceleratedSurfaceLost();  return super.restoreContents();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Show s=getShow(stack);  return (s == null) ? "" : s.getLanguage();}  }
class C{  private void assertWriteLittleEndian64(byte[] data,long value) throws Exception {  ByteArrayOutputStream rawOutput=new ByteArrayOutputStream();  CodedOutputStream output=CodedOutputStream.newInstance(rawOutput);  output.writeRawLittleEndian64(value);  output.flush();  assertEqualBytes(data,rawOutput.toByteArray());  for (int blockSize=1; blockSize <= 16; blockSize*=2) {    rawOutput=new ByteArrayOutputStream();    output=CodedOutputStream.newInstance(rawOutput,blockSize);    output.writeRawLittleEndian64(value);    output.flush();    assertEqualBytes(data,rawOutput.toByteArray());  }}  }
class C{  private void drawX(Canvas canvas,Paint paint,float x,float y){  canvas.drawLine(x - size,y - size,x + size,y + size,paint);  canvas.drawLine(x + size,y - size,x - size,y + size,paint);}  }
class C{  @SuppressWarnings({"unchecked"}) public RecordSet(Input input){  Deserializer deserializer=new Deserializer();  Map<String,Object> dataMap=input.readKeyValues(deserializer);  Object map=dataMap.get("serverinfo");  Map<String,Object> serverInfo=null;  if (map != null) {    if (!(map instanceof Map)) {      throw new RuntimeException("Expected Map but got " + map.getClass().getName());    }    serverInfo=(Map<String,Object>)map;    totalCount=(Integer)serverInfo.get("totalCount");    List<List<Object>> initialData=(List<List<Object>>)serverInfo.get("initialData");    cursor=(Integer)serverInfo.get("cursor");    serviceName=(String)serverInfo.get("serviceName");    columns=(List<String>)serverInfo.get("columnNames");    version=(Integer)serverInfo.get("version");    id=serverInfo.get("id");    this.data=new ArrayList<List<Object>>(totalCount);    for (int i=0; i < initialData.size(); i++) {      this.data.add(i + cursor - 1,initialData.get(i));    }  } else {    throw new RuntimeException("Map (serverinfo) was null");  }}  }
class C{  public static void d(String tag,String s){  if (LDJSLOG.DEBUG >= LOGLEVEL)   Log.d(tag,s);}  }
class C{  public void onTick(){  if (entity.isBurning()) {    lightLevel=15;  } else {    lightLevel=getLightFromItemStack(entity.getEntityItem());    if (notWaterProof && entity.worldObj.getBlockState(new BlockPos(MathHelper.floor_double(entity.posX),MathHelper.floor_double(entity.posY),MathHelper.floor_double(entity.posZ))).getBlock().getMaterial() == Material.water) {      lightLevel=0;    }  }  if (!enabled && lightLevel > 0) {    enableLight();  } else   if (enabled && lightLevel < 1) {    disableLight();  }}  }
class C{  public Column(String label,String variable,String type){  this.label=label;  this.variable=variable;  this.type=type;}  }
class C{  public void createPictScenario11() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-31 00:00:00"));  String supplierAdminId="Pict11Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict11SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_ASYNC_XML);  VOTechnicalService example2TechService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ASYNC_ID);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="Pict11DiscountedCustomer";  VOOrganization customer=orgSetup.registerCustomer("Pict11DiscountedCustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplierMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.updateCustomerDiscount(customer,new BigDecimal("10.00"),DateTimeHandling.calculateMillis("2013-08-02 00:00:00"),DateTimeHandling.calculateMillis("2013-08-12 00:00:00"));  orgSetup.saveAllVats(supplierAdmin.getKey(),VOVatRateFactory.newVOVatRate(new BigDecimal("13.00")),Arrays.asList(VOVatRateFactory.newVOCountryVatRate(new BigDecimal("20.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_UK),VOVatRateFactory.newVOCountryVatRate(new BigDecimal("19.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_DE)),null);  orgSetup.createMarketingPermission(supplierAdmin.getKey(),supplier.getOrganizationId(),example2TechService);  VOServiceDetails unitServTemplate=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT11_UNIT_WEEK_SERVICE",TestService.EXAMPLE2_ASYNC,TestPriceModel.FREE,example2TechService,supplierMarketplace);  VOServiceDetails serviceUnitDetails=serviceSetup.savePriceModelForCustomer(unitServTemplate,TestPriceModel.EXAMPLE_PICT11_UNIT_WEEK,customer);  VOServiceDetails freeTemplate=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT11_FREE",TestService.EXAMPLE2_ASYNC,TestPriceModel.EXAMPLE_PICT11_UNIT_WEEK,example2TechService,supplierMarketplace);  VOServiceDetails serviceFreeDetails=serviceSetup.savePriceModelForCustomer(freeTemplate,TestPriceModel.FREE,customer);  VOServiceDetails unitServTemplate2=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT11_2_UNIT_MONTH_SERVICE",TestService.EXAMPLE2_ASYNC,TestPriceModel.FREE,example2TechService,supplierMarketplace);  VOServiceDetails serviceUnitDetails2=serviceSetup.savePriceModelForCustomer(unitServTemplate2,TestPriceModel.EXAMPLE_PICT11_2_UNIT_WEEK,customer);  unitServTemplate=serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),unitServTemplate,freeTemplate);  freeTemplate=serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),freeTemplate,unitServTemplate2);  serviceUnitDetails=serviceSetup.activateMarketableService(serviceUnitDetails);  serviceFreeDetails=serviceSetup.activateMarketableService(serviceFreeDetails);  serviceUnitDetails2=serviceSetup.activateMarketableService(serviceUnitDetails2);  VORoleDefinition role=VOServiceFactory.getRole(serviceUnitDetails,"USER");  serviceUnitDetails=serviceSetup.getServiceDetails(supplierAdmin.getKey(),serviceUnitDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_11",serviceUnitDetails,customerAdmin,role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-01 00:00:00"));  subDetails=subscrSetup.completeAsyncSubscription(supplierAdmin.getKey(),customerAdmin,subDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-08-01 00:30:00"),"BOOLEAN_PARAMETER","true");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-01 01:00:00"));  subDetails=subscrSetup.completeAsyncModifySubscription(supplierAdmin.getKey(),customerAdmin,subDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-01 01:00:01"));  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetailsOld=subDetails;  subDetails.setSubscriptionId("PICT_TEST_11" + "_SubID2");  subDetails=subscrSetup.modifySubscription(subDetails,null);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-01 01:00:01"));  subDetails=subscrSetup.completeAsyncModifySubscription(supplierAdmin.getKey(),customerAdmin,subDetailsOld);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long roleChangeTime=DateTimeHandling.calculateMillis("2013-08-01 02:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(roleChangeTime);  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(0),VOServiceFactory.getRole(serviceUnitDetails,"ADMIN"),subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-01 02:00:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  paymentSetup.deleteCustomerPaymentTypes(customer);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-01 03:00:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-12 12:00:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  subscrSetup.recordEventForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-08-12 12:30:00"),"FILE_UPLOAD",10);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-08-12 15:00:00"),"BOOLEAN_PARAMETER","false");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-13 00:00:00"));  subDetails=subscrSetup.completeAsyncModifySubscription(supplierAdmin.getKey(),customerAdmin,subDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-08-13 12:00:00"),"BOOLEAN_PARAMETER","true");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-14 00:00:00"));  subDetails=subscrSetup.completeAsyncModifySubscription(supplierAdmin.getKey(),customerAdmin,subDetails);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-14 01:00:00"));  VOPriceModel newSubPriceModel=VOPriceModelFactory.modifyPriceModelPeriodFee(subDetails.getPriceModel(),new BigDecimal("4.00"));  subscrSetup.savePriceModelForSubscription(supplierAdmin.getKey(),subDetails,newSubPriceModel,customer);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-14 02:00:00"));  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(0),VOServiceFactory.getRole(serviceUnitDetails,"USER"),subDetails.getSubscriptionId());  serviceFreeDetails=serviceSetup.getServiceDetails(supplierAdmin.getKey(),serviceFreeDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-14 23:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,serviceFreeDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-15 00:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncUpgradeSubscription(supplierAdmin.getKey(),customerAdmin,upgradedSubDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-19 00:00:00"));  VOSubscriptionDetails upgradedSubDetails2=subscrSetup.upgradeSubscription(upgradedSubDetails,serviceUnitDetails2);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-20 00:00:00"));  upgradedSubDetails2=subscrSetup.completeAsyncUpgradeSubscription(supplierAdmin.getKey(),customerAdmin,upgradedSubDetails2);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-08-22 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(upgradedSubDetails2.getSubscriptionId());  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_11",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_11",upgradedSubDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_11",upgradedSubDetails2);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_11",customer);}  }
class C{  protected String loadSourceCode(URL sourceUrl){  InputStreamReader isr=null;  CodeStyler cv=new CodeStyler();  String styledCode="<html><body bgcolor=\"#ffffff\"><pre>";  try {    isr=new InputStreamReader(sourceUrl.openStream(),"UTF-8");    BufferedReader reader=new BufferedReader(isr);    String line=reader.readLine();    while (line != null) {      styledCode+=cv.syntaxHighlight(line) + " \n ";      line=reader.readLine();    }    styledCode+="</pre></body></html>";  } catch (  Exception ex) {    ex.printStackTrace();    return "Could not load file from: " + sourceUrl;  } finally {    if (isr != null) {      try {        isr.close();      } catch (      IOException e) {        System.err.println(e);      }    }  }  return styledCode;}  }
class C{  public static DateFormat toDateTimeFormat(String dateTimeFormat,TimeZone tz,Locale locale){  DateFormat df=null;  if (UtilValidate.isEmpty(dateTimeFormat)) {    df=DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.MEDIUM,locale);  } else {    df=new SimpleDateFormat(dateTimeFormat,locale == null ? Locale.getDefault() : locale);  }  df.setTimeZone(tz);  return df;}  }
class C{  public void flushBuffer() throws IOException {  log.debug("flush buffer @ CompressionServletResponseWrapper");  ((CompressionResponseStream)stream).flush();}  }
class C{  public static double isLeftOfLine(Coordinate c0,Coordinate c1,Coordinate c2){  return (c2.x - c1.x) * (c0.y - c1.y) - (c0.x - c1.x) * (c2.y - c1.y);}  }
class C{  public SaturationFilter(float amount){  this.amount=amount;  canFilterIndexColorModel=true;}  }
class C{  public JythonScript(Document doc){  super(doc);}  }
class C{  public int v1(){  return v1;}  }
class C{  private void deleteStorePath(){  FileFactory.FileType fileType=FileFactory.getFileType(this.hdfsStorePath);  CarbonFile carbonFile=FileFactory.getCarbonFile(this.hdfsStorePath,fileType);  deleteRecursiveSilent(carbonFile);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  PseudoMenu currUI=(stack.getUIMgrSafe() == null) ? null : stack.getUIMgrSafe().getCurrUI();  if (currUI != null)   currUI.repaintByWidgetName(s);  return null;}  }
class C{  public static PsiClass findClass(PsiElement element){  return (element instanceof PsiClass) ? (PsiClass)element : PsiTreeUtil.getParentOfType(element,PsiClass.class);}  }
class C{  public TDoubleHashSet(int initialCapacity){  super(initialCapacity);}  }
class C{  public static CWindowManager instance(){  return m_instance;}  }
class C{  @SideEffectFree public XMLStreamException(@Nullable String msg,Location location){  super("ParseError at [row,col]:[" + location.getLineNumber() + ","+ location.getColumnNumber()+ "]\n"+ "Message: "+ msg);  this.location=location;}  }
class C{  private boolean hasTargetConnection(){  return (this.target != null);}  }
class C{  public TemporalOMGraphicList(List<OMGraphic> list){  super(list);}  }
class C{  public XmlChecker(){  m_domParser=null;  m_onlyCheckValidity=true;  m_infoMsg=null;  m_valid=true;}  }
class C{  public boolean isDeclaredProvidedByRuntime(){  return declaredProvidedByRuntime;}  }
class C{  protected static void validateDocuments(Map documents) throws ValidationException {  if (documents != null) {    for (Iterator itDoc=documents.keySet().iterator(); itDoc.hasNext(); ) {      String key=(String)itDoc.next();      FlushFdrDocument document=(FlushFdrDocument)documents.get(key);      if (document.getDocumentName().length() > 32) {        if (log.isDebugEnabled()) {          log.debug("Error en la longitud del nombre del documento [" + document.getDocumentName() + "]");        }        throw new ValidationException(ValidationException.ERROR_DOCUMENT_NAME_LENGTH);      }      validatePagesDocument(document.getPages());    }  }}  }
class C{  public static MockMotor runningMotor(double speed){  return new MockMotor(speed);}  }
class C{  private void processStart(final State current){  try {    if (!isFinalStage(current)) {      TaskUtils.sendSelfPatch(this,buildPatch(current.taskState.stage,null));    }  } catch (  Throwable e) {    failTask(e);  }}  }
class C{  @Override public BlockConsistencyGroupBulkRep queryBulkResourceReps(final List<URI> ids){  Iterator<BlockConsistencyGroup> _dbIterator=_dbClient.queryIterativeObjects(getResourceClass(),ids);  return new BlockConsistencyGroupBulkRep(BulkList.wrapping(_dbIterator,MapBlockConsistencyGroup.getInstance(_dbClient)));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList testList;  Node commentNode;  String commentNodeName;  int nodeType;  doc=(Document)load("hc_staff",false);  testList=doc.getChildNodes();  for (int indexN10040=0; indexN10040 < testList.getLength(); indexN10040++) {    commentNode=(Node)testList.item(indexN10040);    commentNodeName=commentNode.getNodeName();    if (equals("#comment",commentNodeName)) {      nodeType=(int)commentNode.getNodeType();      assertEquals("existingCommentNodeType",8,nodeType);    }  }  commentNode=doc.createComment("This is a comment");  nodeType=(int)commentNode.getNodeType();  assertEquals("createdCommentNodeType",8,nodeType);}  }
class C{  public AVTPartSimple(String val){  m_val=val;}  }
class C{  private void formatCheck(Formatter formatter) throws IOException {  List<File> problemFiles=new ArrayList<>();  for (  File file : target) {    getLogger().debug("Checking format on " + file);    if (!formatter.isClean(file)) {      problemFiles.add(file);    }  }  if (paddedCell) {    PaddedCellTaskMisc.check(this,formatter,problemFiles);  } else {    if (!problemFiles.isEmpty()) {      if (PaddedCellTaskMisc.anyMisbehave(formatter,problemFiles)) {        throw PaddedCellTaskMisc.youShouldTurnOnPaddedCell(this);      } else {        throw formatViolationsFor(formatter,problemFiles);      }    }  }}  }
class C{  private static void generateGraph(IDataProcessStatus schmaModel,SchemaInfo info,String tableName,String partitionID,CarbonDataLoadSchema schema,String factStoreLocation,int currentRestructNumber,List<LoadMetadataDetails> loadMetadataDetails) throws GraphGeneratorException {  DataLoadModel model=new DataLoadModel();  model.setCsvLoad(null != schmaModel.getCsvFilePath() || null != schmaModel.getFilesToProcess());  model.setSchemaInfo(info);  model.setTableName(schmaModel.getTableName());  model.setTaskNo("1");  model.setBlocksID(schmaModel.getBlocksID());  model.setFactTimeStamp(readCurrentTime());  model.setEscapeCharacter(schmaModel.getEscapeCharacter());  if (null != loadMetadataDetails && !loadMetadataDetails.isEmpty()) {    model.setLoadNames(CarbonDataProcessorUtil.getLoadNameFromLoadMetaDataDetails(loadMetadataDetails));    model.setModificationOrDeletionTime(CarbonDataProcessorUtil.getModificationOrDeletionTimesFromLoadMetadataDetails(loadMetadataDetails));  }  boolean hdfsReadMode=schmaModel.getCsvFilePath() != null && schmaModel.getCsvFilePath().startsWith("hdfs:");  int allocate=null != schmaModel.getCsvFilePath() ? 1 : schmaModel.getFilesToProcess().size();  String outputLocation=CarbonProperties.getInstance().getProperty("store_output_location","../carbon-store/system/carbon/etl");  GraphGenerator generator=new GraphGenerator(model,hdfsReadMode,partitionID,factStoreLocation,currentRestructNumber,allocate,schema,"0",outputLocation);  generator.generateGraph();}  }
class C{  public String globalInfo(){  return "Simple plain text format that places one statistcs result per line, as tab-separated " + "key-value pairs (separated by '=').";}  }
class C{  public void accept(IBalancedVisitor<K,V> visitor){  if (root == null)   return;  accept(null,root,visitor);}  }
class C{  public static void copyFolder(File srcFolder,File destFolder) throws CoreException, IOException {  for (  File file : srcFolder.listFiles()) {    if (file.isDirectory()) {      copyFolder(file,new File(destFolder.getAbsolutePath() + File.separator + file.getName()));    } else {      ResourceUtils.copyFile(file,new File(destFolder.getAbsolutePath() + File.separator + file.getName()));    }  }}  }
class C{  public String addStepsForMigrateVolumes(Workflow workflow,URI vplexURI,URI virtualVolumeURI,List<URI> targetVolumeURIs,Map<URI,URI> migrationsMap,Map<URI,URI> poolVolumeMap,URI newVpoolURI,URI newVarrayURI,boolean suspendBeforeCommit,boolean suspendBeforeDeleteSource,String opId,String waitFor) throws InternalException {  try {    _log.info("VPlex controller migrate volume {} on VPlex {}",virtualVolumeURI,vplexURI);    String volumeUserLabel="Label Unknown";    Volume virtualVolume=getDataObject(Volume.class,virtualVolumeURI,_dbClient);    if (virtualVolume != null && virtualVolume.getDeviceLabel() != null && virtualVolume.getLabel() != null) {      volumeUserLabel=virtualVolume.getLabel() + " (" + virtualVolume.getDeviceLabel()+ ")";    }    StorageSystem vplexSystem=getDataObject(StorageSystem.class,vplexURI,_dbClient);    _log.info("Got VPlex system");    waitFor=createWorkflowStepToValidateVPlexVolume(workflow,vplexSystem,virtualVolumeURI,waitFor);    Map<URI,Volume> volumeMap=new HashMap<URI,Volume>();    Map<URI,StorageSystem> storageSystemMap=new HashMap<URI,StorageSystem>();    for (    URI volumeURI : targetVolumeURIs) {      Volume volume=getDataObject(Volume.class,volumeURI,_dbClient);      volumeMap.put(volumeURI,volume);      StorageSystem storageSystem=getDataObject(StorageSystem.class,volume.getStorageController(),_dbClient);      storageSystemMap.put(volume.getStorageController(),storageSystem);    }    Volume firstVolume=volumeMap.values().iterator().next();    Project vplexProject=VPlexUtil.lookupVplexProject(firstVolume,vplexSystem,_dbClient);    URI tenantURI=vplexProject.getTenantOrg().getURI();    _log.info("Project is {}, Tenant is {}",vplexProject.getId(),tenantURI);    waitFor=createWorkflowStepsForBlockVolumeExport(workflow,vplexSystem,storageSystemMap,volumeMap,vplexProject.getId(),tenantURI,waitFor);    _log.info("Created workflow steps for volume export.");    Iterator<URI> targetVolumeIter=targetVolumeURIs.iterator();    while (targetVolumeIter.hasNext()) {      URI targetVolumeURI=targetVolumeIter.next();      _log.info("Target volume is {}",targetVolumeURI);      URI migrationURI=migrationsMap.get(targetVolumeURI);      _log.info("Migration is {}",migrationURI);      String stepId=workflow.createStepId();      _log.info("Migration opId is {}",stepId);      Workflow.Method vplexExecuteMethod=new Workflow.Method(MIGRATE_VIRTUAL_VOLUME_METHOD_NAME,vplexURI,virtualVolumeURI,targetVolumeURI,migrationURI,newVarrayURI);      Workflow.Method vplexRollbackMethod=new Workflow.Method(RB_MIGRATE_VIRTUAL_VOLUME_METHOD_NAME,vplexURI,migrationURI,stepId);      _log.info("Creating workflow migration step");      workflow.createStep(MIGRATION_CREATE_STEP,String.format("VPlex %s migrating volume",vplexSystem.getId().toString()),waitFor,vplexSystem.getId(),vplexSystem.getSystemType(),getClass(),vplexExecuteMethod,vplexRollbackMethod,stepId);      _log.info("Created workflow migration step");    }    String waitForStep=MIGRATION_CREATE_STEP;    List<URI> migrationURIs=new ArrayList<URI>(migrationsMap.values());    List<URI> migrationSources=new ArrayList<URI>();    Iterator<URI> migrationsIter=migrationsMap.values().iterator();    while (migrationsIter.hasNext()) {      URI migrationURI=migrationsIter.next();      _log.info("Migration is {}",migrationURI);      Migration migration=getDataObject(Migration.class,migrationURI,_dbClient);      Boolean rename=Boolean.TRUE;      if (migration.getSource() != null) {        migrationSources.add(migration.getSource());      } else {        rename=Boolean.FALSE;      }      _log.info("Added migration source {}",migration.getSource());      String stepId=workflow.createStepId();      _log.info("Commit operation id is {}",stepId);      Workflow.Method vplexExecuteMethod=new Workflow.Method(COMMIT_MIGRATION_METHOD_NAME,vplexURI,virtualVolumeURI,migrationURI,rename,newVpoolURI,newVarrayURI);      Workflow.Method vplexRollbackMethod=new Workflow.Method(RB_COMMIT_MIGRATION_METHOD_NAME,migrationURIs,newVpoolURI,newVarrayURI,stepId);      _log.info("Creating workflow step to commit migration");      String stepDescription=String.format("migration commit step on VPLEX %s of volume %s",vplexSystem.getSerialNumber(),volumeUserLabel);      waitForStep=workflow.createStep(MIGRATION_COMMIT_STEP,stepDescription,waitForStep,vplexSystem.getId(),vplexSystem.getSystemType(),getClass(),vplexExecuteMethod,vplexRollbackMethod,suspendBeforeCommit,stepId);      workflow.setSuspendedStepMessage(stepId,COMMIT_MIGRATION_SUSPEND_MESSAGE);      _log.info("Created workflow step to commit migration");    }    String stepId=workflow.createStepId();    Workflow.Method vplexExecuteMethod=new Workflow.Method(DELETE_MIGRATION_SOURCES_METHOD,vplexURI,virtualVolumeURI,newVpoolURI,newVarrayURI,migrationSources);    List<String> migrationSourceLabels=new ArrayList<>();    Iterator<Volume> volumeIter=_dbClient.queryIterativeObjects(Volume.class,migrationSources);    while (volumeIter.hasNext()) {      migrationSourceLabels.add(volumeIter.next().getNativeGuid());    }    String stepDescription=String.format("post-migration delete of original source backing volumes [%s] associated with virtual volume %s",Joiner.on(',').join(migrationSourceLabels),volumeUserLabel);    workflow.createStep(DELETE_MIGRATION_SOURCES_STEP,stepDescription,waitForStep,vplexSystem.getId(),vplexSystem.getSystemType(),getClass(),vplexExecuteMethod,null,suspendBeforeDeleteSource,stepId);    workflow.setSuspendedStepMessage(stepId,DELETE_MIGRATION_SOURCES_SUSPEND_MESSAGE);    _log.info("Created workflow step to create sub workflow for source deletion");    return DELETE_MIGRATION_SOURCES_STEP;  } catch (  Exception e) {    throw VPlexApiException.exceptions.addStepsForChangeVirtualPoolFailed(e);  }}  }
class C{  public void removeDragSourceMotionListener(DragSourceMotionListener dsml){  if (dsml != null) {synchronized (this) {      motionListener=DnDEventMulticaster.remove(motionListener,dsml);    }  }}  }
class C{  public static Box computeBoundingBox(Iterable<? extends Vec4> points){  if (points == null) {    String msg=Logging.getMessage("nullValue.PointListIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Vec4[] axes=WWMath.computePrincipalAxes(points);  if (axes == null) {    String msg=Logging.getMessage("generic.ListIsEmpty");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Vec4 r=axes[0];  Vec4 s=axes[1];  Vec4 t=axes[2];  double minDotR=Double.MAX_VALUE;  double maxDotR=-minDotR;  double minDotS=Double.MAX_VALUE;  double maxDotS=-minDotS;  double minDotT=Double.MAX_VALUE;  double maxDotT=-minDotT;  for (  Vec4 p : points) {    if (p == null)     continue;    double pdr=p.dot3(r);    if (pdr < minDotR)     minDotR=pdr;    if (pdr > maxDotR)     maxDotR=pdr;    double pds=p.dot3(s);    if (pds < minDotS)     minDotS=pds;    if (pds > maxDotS)     maxDotS=pds;    double pdt=p.dot3(t);    if (pdt < minDotT)     minDotT=pdt;    if (pdt > maxDotT)     maxDotT=pdt;  }  if (maxDotR == minDotR)   maxDotR=minDotR + 1;  if (maxDotS == minDotS)   maxDotS=minDotS + 1;  if (maxDotT == minDotT)   maxDotT=minDotT + 1;  return new Box(axes,minDotR,maxDotR,minDotS,maxDotS,minDotT,maxDotT);}  }
class C{  public void bindAllArgsAsStrings(String[] bindArgs){  if (bindArgs != null) {    for (int i=bindArgs.length; i != 0; i--) {      bindString(i,bindArgs[i - 1]);    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override protected void keyTyped(char par1,int par2){  if (par2 == 28 || par2 == 156)   actionPerformed((GuiButton)buttonList.get(0));}  }
class C{  public boolean isValidAction(String action){  String[] options=getActionOptions();  for (int i=0; i < options.length; i++) {    if (options[i].equals(action))     return true;  }  return false;}  }
class C{  public static <T,A>ReaderTValue<T,A> of(final AnyMValue<Reader<T,A>> monads){  return new ReaderTValue<>(monads);}  }
class C{  @Override public Object createSerializableMapKeyInfo(Object key,AbstractSession session){  return key;}  }
class C{  public Complex(double real,double imag){  re=real;  im=imag;}  }
class C{  public EsriPolylineMList(int initialCapacity){  super(initialCapacity);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.insertData(0,"Mss. ");  childData=child.getData();  assertEquals("characterdataInsertDataBeginningAssert","Mss. Margaret Martin",childData);}  }
class C{  public void close(){  if (file != null) {    try {      trace("close",name,file);      file.close();    } catch (    IOException e) {      throw DbException.convertIOException(e,name);    } finally {      file=null;    }  }}  }
class C{  public String post(String request,String content) throws IOException {  HttpPost httpPost=new HttpPost(getBaseURL() + request);  httpPost.setEntity(new StringEntity(content,ContentType.create("application/json",StandardCharsets.UTF_8)));  return getResponse(httpPost);}  }
class C{  private void clearCachedValues(){  cachedTemplateNumberFormats=null;  cachedTemplateNumberFormat=null;  cachedTempDateFormatArray=null;  cachedTempDateFormatsByFmtStrArray=null;  cachedCollator=null;  cachedURLEscapingCharset=null;  cachedURLEscapingCharsetSet=false;}  }
class C{  private static List<BillingResult> createBillingResults(){  createBillingResultDataMock();  billingResults=new LinkedList<BillingResult>();  for (long subscriptionKey=1; subscriptionKey <= NUMBER_SUBSCRIPTIONS; subscriptionKey++) {    BillingResult billingResult=new BillingResult();    billingResult.setKey(10000 + subscriptionKey);    billingResult.setSubscriptionKey(subscriptionKey);    billingResult.setCurrency(new SupportedCurrency(billingResultDataMock.get(subscriptionKey).currencyCode));    billingResult.setNetAmount(billingResultDataMock.get(subscriptionKey).netAmount);    billingResults.add(billingResult);  }  return billingResults;}  }
class C{  public double entropyConditionalFirst(){  return (entropyJoint() - entropySecond());}  }
class C{  public static void dispatchSocketTimeout(final boolean forceCloseSocket,final List<ISpeedTestListener> listenerList,final boolean isDownload,final String errorMessage){  if (!forceCloseSocket) {    if (isDownload) {      for (int i=0; i < listenerList.size(); i++) {        listenerList.get(i).onDownloadError(SpeedTestError.SOCKET_TIMEOUT,errorMessage);      }    } else {      for (int i=0; i < listenerList.size(); i++) {        listenerList.get(i).onUploadError(SpeedTestError.SOCKET_TIMEOUT,errorMessage);      }    }  }}  }
class C{  public static void checkTimestamp(Timestamp expected,IonValue actual){  checkType(IonType.TIMESTAMP,actual);  IonTimestamp v=(IonTimestamp)actual;  Timestamp actualTime=v.timestampValue();  if (expected == null) {    assertTrue("expected null value",v.isNullValue());    assertNull(actualTime);  } else {    assertEquals("timestamp",expected,actualTime);    assertEquals("timestamp content",expected.toString(),actualTime.toString());  }}  }
class C{  protected void read(UCharacterProperty ucharppty) throws IOException {  int count=INDEX_SIZE_;  m_propertyOffset_=m_dataInputStream_.readInt();  count--;  m_exceptionOffset_=m_dataInputStream_.readInt();  count--;  m_caseOffset_=m_dataInputStream_.readInt();  count--;  m_additionalOffset_=m_dataInputStream_.readInt();  count--;  m_additionalVectorsOffset_=m_dataInputStream_.readInt();  count--;  m_additionalColumnsCount_=m_dataInputStream_.readInt();  count--;  m_reservedOffset_=m_dataInputStream_.readInt();  count--;  m_dataInputStream_.skipBytes(3 << 2);  count-=3;  ucharppty.m_maxBlockScriptValue_=m_dataInputStream_.readInt();  count--;  ucharppty.m_maxJTGValue_=m_dataInputStream_.readInt();  count--;  m_dataInputStream_.skipBytes(count << 2);  ucharppty.m_trie_=new CharTrie(m_dataInputStream_,null);  int size=m_exceptionOffset_ - m_propertyOffset_;  m_dataInputStream_.skipBytes(size * 4);  size=m_caseOffset_ - m_exceptionOffset_;  m_dataInputStream_.skipBytes(size * 4);  size=(m_additionalOffset_ - m_caseOffset_) << 1;  m_dataInputStream_.skipBytes(size * 2);  if (m_additionalColumnsCount_ > 0) {    ucharppty.m_additionalTrie_=new CharTrie(m_dataInputStream_,null);    size=m_reservedOffset_ - m_additionalVectorsOffset_;    ucharppty.m_additionalVectors_=new int[size];    for (int i=0; i < size; i++) {      ucharppty.m_additionalVectors_[i]=m_dataInputStream_.readInt();    }  }  m_dataInputStream_.close();  ucharppty.m_additionalColumnsCount_=m_additionalColumnsCount_;  ucharppty.m_unicodeVersion_=VersionInfo.getInstance((int)m_unicodeVersion_[0],(int)m_unicodeVersion_[1],(int)m_unicodeVersion_[2],(int)m_unicodeVersion_[3]);}  }
class C{  public LogStreamMerger(LogRequest req,LogSvcPropertiesLoader propertiesLoader){  logger.trace("LogStreamMerger()");  this.request=req;  LogFileFinder fileFinder=new LogFileFinder(propertiesLoader.getLogFilePaths(),propertiesLoader.getExcludedLogFilePaths());  Map<String,List<File>> groupedLogFiles=fileFinder.findFilesGroupedByBaseName();  List<String> groups=req.getBaseNames();  if (groups == null || groups.isEmpty()) {    groups=new ArrayList<>(groupedLogFiles.keySet());  }  logger.debug("log names: {}",groups);  if (groups.retainAll(groupedLogFiles.keySet())) {    logger.info("log names after filter: {}",groups);  }  int size=groups.size();  logStreamList=new LogFileStream[size];  logHeads=new LogMessage[size];  for (int i=0; i < size; i++) {    String service=groups.get(i);    logStreamList[i]=new LogFileStream(service,groupedLogFiles.get(service),req,status);    logHeads[i]=null;  }}  }
class C{  public static void load(final AbstractSQLProvider provider,final INaviView view,final List<INaviViewNode> nodes,final List<? extends INaviModule> modules) throws SQLException, CPartialLoadException {  Preconditions.checkNotNull(provider,"Error: provider argument can not be null");  Preconditions.checkNotNull(view,"Error: view argument can not be null");  Preconditions.checkNotNull(nodes,"Error: nodes argument can not be null");  Preconditions.checkNotNull(modules,"Error: modules argument can not be null");  final String query=" SELECT * FROM load_code_nodes(?) ";  final PreparedStatement statement=provider.getConnection().getConnection().prepareStatement(query,ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);  statement.setInt(1,view.getConfiguration().getId());  final ResultSet resultSet=statement.executeQuery();  try {    final CCodeNodeParser parser=new CCodeNodeParser(new SqlCodeNodeProvider(resultSet),modules,provider);    nodes.addAll(parser.parse());  } catch (  final ParserException e) {    CUtilityFunctions.logException(e);  } finally {    resultSet.close();  }}  }
class C{  static void FindPfStepTokens(Token[][] toks){  for (int k=0; k < toks.length; k++) {    Token[] input=toks[k];    Vector outputVec=new Vector(input.length);    int i=0;    while (i < input.length) {      if ((i < input.length - 2) && (input[i].string.equals("<")) && (input[i + 1].column == input[i].column + 1)&& (input[i + 1].type == NUMBER)&& (input[i + 2].string.equals(">"))&& (input[i + 2].column == input[i + 1].column + input[i + 1].getWidth())) {        int numOfToks=3;        boolean needsSpace=true;        String str="<" + input[i + 1].string + ">";        if ((i < input.length - 3) && (input[i + 3].column == input[i + 2].column + 1) && ((input[i + 3].type == NUMBER) || (input[i + 3].type == IDENT))) {          str=str + input[i + 3].string;          numOfToks=4;          if ((i < input.length - 4) && (input[i + 4].column == input[i + 3].column + input[i + 3].getWidth()) && (input[i + 4].string.equals("."))) {            str=str + ".";            numOfToks=5;          }          ;        }        ;        if ((i < input.length - numOfToks) && (input[i + numOfToks].type == BUILTIN) && ((BuiltInSymbols.GetBuiltInSymbol(input[i + numOfToks].string,true).symbolType == Symbol.INFIX) || (BuiltInSymbols.GetBuiltInSymbol(input[i + numOfToks].string,true).symbolType == Symbol.PUNCTUATION))) {          needsSpace=false;        }        ;        outputVec.addElement(new Token.PfStepToken(str,input[i].column,needsSpace));        i=i + numOfToks;      } else {        outputVec.addElement(input[i]);        i=i + 1;      }    }    ;    if (outputVec.size() != input.length) {      toks[k]=new Token[outputVec.size()];      for (i=0; i < outputVec.size(); i++) {        toks[k][i]=(Token)outputVec.elementAt(i);      }      ;    }  }}  }
class C{  @Override public String toString(){  return value + " " + unit;}  }
class C{  public int findRowIndex(String value,String columnName){  return findRowIndex(value,getColumnIndex(columnName));}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:22.051 -0400",hash_original_method="F7B998F5AE180E31090E44B8A03A92F7",hash_generated_method="08FF0ED30143F58CAB4DEB62E6201927") @Override public boolean equals(Object obj){  return (obj == this);}  }
class C{  public CModuleConfiguration(final INaviModule module,final SQLProvider provider,final ListenerProvider<IModuleListener> listeners,final int moduleId,final String name,final String comment,final Date creationDate,final Date modificationDate,final String md5,final String sha1,final IAddress fileBase,final IAddress imageBase,final DebuggerTemplate debuggerTemplate,final boolean isStared,final INaviRawModule rawModule){  m_module=module;  m_provider=provider;  m_listeners=listeners;  m_id=moduleId;  m_name=name;  m_description=comment;  m_creationDate=new Date(creationDate.getTime());  m_modificationDate=new Date(modificationDate.getTime());  m_md5=md5;  m_sha1=sha1;  m_fileBase=fileBase;  m_imageBase=imageBase;  m_debuggerTemplate=debuggerTemplate;  m_isStared=isStared;  m_rawModule=rawModule;  updateDebugger(debuggerTemplate);}  }
class C{  public static TranBlob createBlob(byte[] bytes){  return new TranBlob(new BlobImpl(bytes),false);}  }
class C{  public DailyTimeIntervalScheduleBuilder onDaysOfTheWeek(Integer... onDaysOfWeek){  Set<Integer> daysAsSet=new HashSet<Integer>(12);  Collections.addAll(daysAsSet,onDaysOfWeek);  return onDaysOfTheWeek(daysAsSet);}  }
class C{  public ImmutableMultimap<State,Service> servicesByState(){  return state.servicesByState();}  }
class C{  public void removeArchive(final int index){  this.archives.removeArchive(index);}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public static void Init(PcalCharReader charR){  addedLabels=new Vector();  addedLabelsLocs=new Vector();  nextLabelNum=1;  charReader=charR;  allLabels=new Hashtable();  hasLabel=false;  hasDefaultInitialization=false;  currentProcedure=null;  procedures=new Vector();  pSyntax=false;  cSyntax=false;  plusLabels=new Vector(0);  minusLabels=new Vector(0);  proceduresCalled=new Vector(0);  gotoUsed=false;  gotoDoneUsed=false;  omitPC=true;  omitStutteringWhenDone=true;  if (PcalParams.inputVersionNumber < PcalParams.VersionToNumber("1.5")) {    omitPC=false;    omitStutteringWhenDone=false;  }  PcalBuiltInSymbols.Initialize();  AST.ASTInit();  LATsize=0;}  }
class C{  public void removeAll(){  ioObjects.clear();}  }
class C{  static MediaType createAudioType(String subtype){  return create(AUDIO_TYPE,subtype);}  }
class C{  protected IOContext _createContext(Object srcRef,boolean resourceManaged){  return new IOContext(_getBufferRecycler(),srcRef,resourceManaged);}  }
class C{  public QueryExpression(){  super();}  }
class C{  protected void parseq() throws ParseException, IOException {  current=reader.read();  skipSpaces();  boolean expectNumber=true;  for (; ; ) {switch (current) {default :      if (expectNumber)       reportUnexpected(current);    return;case '+':case '-':case '.':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':  break;}float x1=parseFloat();skipCommaSpaces();float y1=parseFloat();skipCommaSpaces();float x=parseFloat();skipCommaSpaces();float y=parseFloat();pathHandler.curvetoQuadraticRel(x1,y1,x,y);expectNumber=skipCommaSpaces2();}}  }
class C{  public Mark popStream(){  if (includeStack.size() <= 0) {    return null;  }  IncludeState state=includeStack.pop();  cursor=state.cursor;  line=state.line;  col=state.col;  fileid=state.fileid;  fileName=state.fileName;  baseDir=state.baseDir;  stream=state.stream;  return this;}  }
class C{  public Matrix4d shadow(Vector4dc light,double a,double b,double c,double d){  return shadow(light.x(),light.y(),light.z(),light.w(),a,b,c,d,this);}  }
class C{  private static boolean isGooglePlayServicesLatest(){  return findTextView("Google Play services") == null;}  }
class C{  public void removeLineHighlight(Object tag){  if (lineHighlightManager != null) {    lineHighlightManager.removeLineHighlight(tag);  }}  }
class C{  public Ed25519EncodedFieldElement multiplyAndAddModQ(final Ed25519EncodedFieldElement b,final Ed25519EncodedFieldElement c){  final long a0=0x1FFFFF & threeBytesToLong(this.values,0);  final long a1=0x1FFFFF & (fourBytesToLong(this.values,2) >> 5);  final long a2=0x1FFFFF & (threeBytesToLong(this.values,5) >> 2);  final long a3=0x1FFFFF & (fourBytesToLong(this.values,7) >> 7);  final long a4=0x1FFFFF & (fourBytesToLong(this.values,10) >> 4);  final long a5=0x1FFFFF & (threeBytesToLong(this.values,13) >> 1);  final long a6=0x1FFFFF & (fourBytesToLong(this.values,15) >> 6);  final long a7=0x1FFFFF & (threeBytesToLong(this.values,18) >> 3);  final long a8=0x1FFFFF & threeBytesToLong(this.values,21);  final long a9=0x1FFFFF & (fourBytesToLong(this.values,23) >> 5);  final long a10=0x1FFFFF & (threeBytesToLong(this.values,26) >> 2);  final long a11=(fourBytesToLong(this.values,28) >> 7);  final long b0=0x1FFFFF & threeBytesToLong(b.values,0);  final long b1=0x1FFFFF & (fourBytesToLong(b.values,2) >> 5);  final long b2=0x1FFFFF & (threeBytesToLong(b.values,5) >> 2);  final long b3=0x1FFFFF & (fourBytesToLong(b.values,7) >> 7);  final long b4=0x1FFFFF & (fourBytesToLong(b.values,10) >> 4);  final long b5=0x1FFFFF & (threeBytesToLong(b.values,13) >> 1);  final long b6=0x1FFFFF & (fourBytesToLong(b.values,15) >> 6);  final long b7=0x1FFFFF & (threeBytesToLong(b.values,18) >> 3);  final long b8=0x1FFFFF & threeBytesToLong(b.values,21);  final long b9=0x1FFFFF & (fourBytesToLong(b.values,23) >> 5);  final long b10=0x1FFFFF & (threeBytesToLong(b.values,26) >> 2);  final long b11=(fourBytesToLong(b.values,28) >> 7);  final long c0=0x1FFFFF & threeBytesToLong(c.values,0);  final long c1=0x1FFFFF & (fourBytesToLong(c.values,2) >> 5);  final long c2=0x1FFFFF & (threeBytesToLong(c.values,5) >> 2);  final long c3=0x1FFFFF & (fourBytesToLong(c.values,7) >> 7);  final long c4=0x1FFFFF & (fourBytesToLong(c.values,10) >> 4);  final long c5=0x1FFFFF & (threeBytesToLong(c.values,13) >> 1);  final long c6=0x1FFFFF & (fourBytesToLong(c.values,15) >> 6);  final long c7=0x1FFFFF & (threeBytesToLong(c.values,18) >> 3);  final long c8=0x1FFFFF & threeBytesToLong(c.values,21);  final long c9=0x1FFFFF & (fourBytesToLong(c.values,23) >> 5);  final long c10=0x1FFFFF & (threeBytesToLong(c.values,26) >> 2);  final long c11=(fourBytesToLong(c.values,28) >> 7);  long s0;  long s1;  long s2;  long s3;  long s4;  long s5;  long s6;  long s7;  long s8;  long s9;  long s10;  long s11;  long s12;  long s13;  long s14;  long s15;  long s16;  long s17;  long s18;  long s19;  long s20;  long s21;  long s22;  long s23;  long carry0;  long carry1;  long carry2;  long carry3;  long carry4;  long carry5;  long carry6;  long carry7;  long carry8;  long carry9;  long carry10;  long carry11;  long carry12;  long carry13;  long carry14;  long carry15;  long carry16;  final long carry17;  final long carry18;  final long carry19;  final long carry20;  final long carry21;  final long carry22;  s0=c0 + a0 * b0;  s1=c1 + a0 * b1 + a1 * b0;  s2=c2 + a0 * b2 + a1 * b1 + a2 * b0;  s3=c3 + a0 * b3 + a1 * b2 + a2 * b1 + a3 * b0;  s4=c4 + a0 * b4 + a1 * b3 + a2 * b2 + a3 * b1 + a4 * b0;  s5=c5 + a0 * b5 + a1 * b4 + a2 * b3 + a3 * b2 + a4 * b1 + a5 * b0;  s6=c6 + a0 * b6 + a1 * b5 + a2 * b4 + a3 * b3 + a4 * b2 + a5 * b1 + a6 * b0;  s7=c7 + a0 * b7 + a1 * b6 + a2 * b5 + a3 * b4 + a4 * b3 + a5 * b2 + a6 * b1 + a7 * b0;  s8=c8 + a0 * b8 + a1 * b7 + a2 * b6 + a3 * b5 + a4 * b4 + a5 * b3 + a6 * b2 + a7 * b1 + a8 * b0;  s9=c9 + a0 * b9 + a1 * b8 + a2 * b7 + a3 * b6 + a4 * b5 + a5 * b4 + a6 * b3 + a7 * b2 + a8 * b1 + a9 * b0;  s10=c10 + a0 * b10 + a1 * b9 + a2 * b8 + a3 * b7 + a4 * b6 + a5 * b5 + a6 * b4 + a7 * b3 + a8 * b2 + a9 * b1 + a10 * b0;  s11=c11 + a0 * b11 + a1 * b10 + a2 * b9 + a3 * b8 + a4 * b7 + a5 * b6 + a6 * b5 + a7 * b4 + a8 * b3 + a9 * b2 + a10 * b1 + a11 * b0;  s12=a1 * b11 + a2 * b10 + a3 * b9 + a4 * b8 + a5 * b7 + a6 * b6 + a7 * b5 + a8 * b4 + a9 * b3 + a10 * b2 + a11 * b1;  s13=a2 * b11 + a3 * b10 + a4 * b9 + a5 * b8 + a6 * b7 + a7 * b6 + a8 * b5 + a9 * b4 + a10 * b3 + a11 * b2;  s14=a3 * b11 + a4 * b10 + a5 * b9 + a6 * b8 + a7 * b7 + a8 * b6 + a9 * b5 + a10 * b4 + a11 * b3;  s15=a4 * b11 + a5 * b10 + a6 * b9 + a7 * b8 + a8 * b7 + a9 * b6 + a10 * b5 + a11 * b4;  s16=a5 * b11 + a6 * b10 + a7 * b9 + a8 * b8 + a9 * b7 + a10 * b6 + a11 * b5;  s17=a6 * b11 + a7 * b10 + a8 * b9 + a9 * b8 + a10 * b7 + a11 * b6;  s18=a7 * b11 + a8 * b10 + a9 * b9 + a10 * b8 + a11 * b7;  s19=a8 * b11 + a9 * b10 + a10 * b9 + a11 * b8;  s20=a9 * b11 + a10 * b10 + a11 * b9;  s21=a10 * b11 + a11 * b10;  s22=a11 * b11;  s23=0;  carry0=(s0 + (1 << 20)) >> 21;  s1+=carry0;  s0-=carry0 << 21;  carry2=(s2 + (1 << 20)) >> 21;  s3+=carry2;  s2-=carry2 << 21;  carry4=(s4 + (1 << 20)) >> 21;  s5+=carry4;  s4-=carry4 << 21;  carry6=(s6 + (1 << 20)) >> 21;  s7+=carry6;  s6-=carry6 << 21;  carry8=(s8 + (1 << 20)) >> 21;  s9+=carry8;  s8-=carry8 << 21;  carry10=(s10 + (1 << 20)) >> 21;  s11+=carry10;  s10-=carry10 << 21;  carry12=(s12 + (1 << 20)) >> 21;  s13+=carry12;  s12-=carry12 << 21;  carry14=(s14 + (1 << 20)) >> 21;  s15+=carry14;  s14-=carry14 << 21;  carry16=(s16 + (1 << 20)) >> 21;  s17+=carry16;  s16-=carry16 << 21;  carry18=(s18 + (1 << 20)) >> 21;  s19+=carry18;  s18-=carry18 << 21;  carry20=(s20 + (1 << 20)) >> 21;  s21+=carry20;  s20-=carry20 << 21;  carry22=(s22 + (1 << 20)) >> 21;  s23+=carry22;  s22-=carry22 << 21;  carry1=(s1 + (1 << 20)) >> 21;  s2+=carry1;  s1-=carry1 << 21;  carry3=(s3 + (1 << 20)) >> 21;  s4+=carry3;  s3-=carry3 << 21;  carry5=(s5 + (1 << 20)) >> 21;  s6+=carry5;  s5-=carry5 << 21;  carry7=(s7 + (1 << 20)) >> 21;  s8+=carry7;  s7-=carry7 << 21;  carry9=(s9 + (1 << 20)) >> 21;  s10+=carry9;  s9-=carry9 << 21;  carry11=(s11 + (1 << 20)) >> 21;  s12+=carry11;  s11-=carry11 << 21;  carry13=(s13 + (1 << 20)) >> 21;  s14+=carry13;  s13-=carry13 << 21;  carry15=(s15 + (1 << 20)) >> 21;  s16+=carry15;  s15-=carry15 << 21;  carry17=(s17 + (1 << 20)) >> 21;  s18+=carry17;  s17-=carry17 << 21;  carry19=(s19 + (1 << 20)) >> 21;  s20+=carry19;  s19-=carry19 << 21;  carry21=(s21 + (1 << 20)) >> 21;  s22+=carry21;  s21-=carry21 << 21;  s11+=s23 * 666643;  s12+=s23 * 470296;  s13+=s23 * 654183;  s14-=s23 * 997805;  s15+=s23 * 136657;  s16-=s23 * 683901;  s10+=s22 * 666643;  s11+=s22 * 470296;  s12+=s22 * 654183;  s13-=s22 * 997805;  s14+=s22 * 136657;  s15-=s22 * 683901;  s9+=s21 * 666643;  s10+=s21 * 470296;  s11+=s21 * 654183;  s12-=s21 * 997805;  s13+=s21 * 136657;  s14-=s21 * 683901;  s8+=s20 * 666643;  s9+=s20 * 470296;  s10+=s20 * 654183;  s11-=s20 * 997805;  s12+=s20 * 136657;  s13-=s20 * 683901;  s7+=s19 * 666643;  s8+=s19 * 470296;  s9+=s19 * 654183;  s10-=s19 * 997805;  s11+=s19 * 136657;  s12-=s19 * 683901;  s6+=s18 * 666643;  s7+=s18 * 470296;  s8+=s18 * 654183;  s9-=s18 * 997805;  s10+=s18 * 136657;  s11-=s18 * 683901;  carry6=(s6 + (1 << 20)) >> 21;  s7+=carry6;  s6-=carry6 << 21;  carry8=(s8 + (1 << 20)) >> 21;  s9+=carry8;  s8-=carry8 << 21;  carry10=(s10 + (1 << 20)) >> 21;  s11+=carry10;  s10-=carry10 << 21;  carry12=(s12 + (1 << 20)) >> 21;  s13+=carry12;  s12-=carry12 << 21;  carry14=(s14 + (1 << 20)) >> 21;  s15+=carry14;  s14-=carry14 << 21;  carry16=(s16 + (1 << 20)) >> 21;  s17+=carry16;  s16-=carry16 << 21;  carry7=(s7 + (1 << 20)) >> 21;  s8+=carry7;  s7-=carry7 << 21;  carry9=(s9 + (1 << 20)) >> 21;  s10+=carry9;  s9-=carry9 << 21;  carry11=(s11 + (1 << 20)) >> 21;  s12+=carry11;  s11-=carry11 << 21;  carry13=(s13 + (1 << 20)) >> 21;  s14+=carry13;  s13-=carry13 << 21;  carry15=(s15 + (1 << 20)) >> 21;  s16+=carry15;  s15-=carry15 << 21;  s5+=s17 * 666643;  s6+=s17 * 470296;  s7+=s17 * 654183;  s8-=s17 * 997805;  s9+=s17 * 136657;  s10-=s17 * 683901;  s4+=s16 * 666643;  s5+=s16 * 470296;  s6+=s16 * 654183;  s7-=s16 * 997805;  s8+=s16 * 136657;  s9-=s16 * 683901;  s3+=s15 * 666643;  s4+=s15 * 470296;  s5+=s15 * 654183;  s6-=s15 * 997805;  s7+=s15 * 136657;  s8-=s15 * 683901;  s2+=s14 * 666643;  s3+=s14 * 470296;  s4+=s14 * 654183;  s5-=s14 * 997805;  s6+=s14 * 136657;  s7-=s14 * 683901;  s1+=s13 * 666643;  s2+=s13 * 470296;  s3+=s13 * 654183;  s4-=s13 * 997805;  s5+=s13 * 136657;  s6-=s13 * 683901;  s0+=s12 * 666643;  s1+=s12 * 470296;  s2+=s12 * 654183;  s3-=s12 * 997805;  s4+=s12 * 136657;  s5-=s12 * 683901;  s12=0;  carry0=(s0 + (1 << 20)) >> 21;  s1+=carry0;  s0-=carry0 << 21;  carry2=(s2 + (1 << 20)) >> 21;  s3+=carry2;  s2-=carry2 << 21;  carry4=(s4 + (1 << 20)) >> 21;  s5+=carry4;  s4-=carry4 << 21;  carry6=(s6 + (1 << 20)) >> 21;  s7+=carry6;  s6-=carry6 << 21;  carry8=(s8 + (1 << 20)) >> 21;  s9+=carry8;  s8-=carry8 << 21;  carry10=(s10 + (1 << 20)) >> 21;  s11+=carry10;  s10-=carry10 << 21;  carry1=(s1 + (1 << 20)) >> 21;  s2+=carry1;  s1-=carry1 << 21;  carry3=(s3 + (1 << 20)) >> 21;  s4+=carry3;  s3-=carry3 << 21;  carry5=(s5 + (1 << 20)) >> 21;  s6+=carry5;  s5-=carry5 << 21;  carry7=(s7 + (1 << 20)) >> 21;  s8+=carry7;  s7-=carry7 << 21;  carry9=(s9 + (1 << 20)) >> 21;  s10+=carry9;  s9-=carry9 << 21;  carry11=(s11 + (1 << 20)) >> 21;  s12+=carry11;  s11-=carry11 << 21;  s0+=s12 * 666643;  s1+=s12 * 470296;  s2+=s12 * 654183;  s3-=s12 * 997805;  s4+=s12 * 136657;  s5-=s12 * 683901;  s12=0;  carry0=s0 >> 21;  s1+=carry0;  s0-=carry0 << 21;  carry1=s1 >> 21;  s2+=carry1;  s1-=carry1 << 21;  carry2=s2 >> 21;  s3+=carry2;  s2-=carry2 << 21;  carry3=s3 >> 21;  s4+=carry3;  s3-=carry3 << 21;  carry4=s4 >> 21;  s5+=carry4;  s4-=carry4 << 21;  carry5=s5 >> 21;  s6+=carry5;  s5-=carry5 << 21;  carry6=s6 >> 21;  s7+=carry6;  s6-=carry6 << 21;  carry7=s7 >> 21;  s8+=carry7;  s7-=carry7 << 21;  carry8=s8 >> 21;  s9+=carry8;  s8-=carry8 << 21;  carry9=s9 >> 21;  s10+=carry9;  s9-=carry9 << 21;  carry10=s10 >> 21;  s11+=carry10;  s10-=carry10 << 21;  carry11=s11 >> 21;  s12+=carry11;  s11-=carry11 << 21;  s0+=s12 * 666643;  s1+=s12 * 470296;  s2+=s12 * 654183;  s3-=s12 * 997805;  s4+=s12 * 136657;  s5-=s12 * 683901;  carry0=s0 >> 21;  s1+=carry0;  s0-=carry0 << 21;  carry1=s1 >> 21;  s2+=carry1;  s1-=carry1 << 21;  carry2=s2 >> 21;  s3+=carry2;  s2-=carry2 << 21;  carry3=s3 >> 21;  s4+=carry3;  s3-=carry3 << 21;  carry4=s4 >> 21;  s5+=carry4;  s4-=carry4 << 21;  carry5=s5 >> 21;  s6+=carry5;  s5-=carry5 << 21;  carry6=s6 >> 21;  s7+=carry6;  s6-=carry6 << 21;  carry7=s7 >> 21;  s8+=carry7;  s7-=carry7 << 21;  carry8=s8 >> 21;  s9+=carry8;  s8-=carry8 << 21;  carry9=s9 >> 21;  s10+=carry9;  s9-=carry9 << 21;  carry10=s10 >> 21;  s11+=carry10;  s10-=carry10 << 21;  final byte[] result=new byte[32];  result[0]=(byte)(s0);  result[1]=(byte)(s0 >> 8);  result[2]=(byte)((s0 >> 16) | (s1 << 5));  result[3]=(byte)(s1 >> 3);  result[4]=(byte)(s1 >> 11);  result[5]=(byte)((s1 >> 19) | (s2 << 2));  result[6]=(byte)(s2 >> 6);  result[7]=(byte)((s2 >> 14) | (s3 << 7));  result[8]=(byte)(s3 >> 1);  result[9]=(byte)(s3 >> 9);  result[10]=(byte)((s3 >> 17) | (s4 << 4));  result[11]=(byte)(s4 >> 4);  result[12]=(byte)(s4 >> 12);  result[13]=(byte)((s4 >> 20) | (s5 << 1));  result[14]=(byte)(s5 >> 7);  result[15]=(byte)((s5 >> 15) | (s6 << 6));  result[16]=(byte)(s6 >> 2);  result[17]=(byte)(s6 >> 10);  result[18]=(byte)((s6 >> 18) | (s7 << 3));  result[19]=(byte)(s7 >> 5);  result[20]=(byte)(s7 >> 13);  result[21]=(byte)(s8);  result[22]=(byte)(s8 >> 8);  result[23]=(byte)((s8 >> 16) | (s9 << 5));  result[24]=(byte)(s9 >> 3);  result[25]=(byte)(s9 >> 11);  result[26]=(byte)((s9 >> 19) | (s10 << 2));  result[27]=(byte)(s10 >> 6);  result[28]=(byte)((s10 >> 14) | (s11 << 7));  result[29]=(byte)(s11 >> 1);  result[30]=(byte)(s11 >> 9);  result[31]=(byte)(s11 >> 17);  return new Ed25519EncodedFieldElement(result);}  }
class C{  public AccountHeaderBuilder withProfiles(@NonNull ArrayList<IProfile> profiles){  this.mProfiles=IdDistributor.checkIds(profiles);  return this;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Object[] patch_apply(LinkedList<Patch> patches,String text){  if (patches.isEmpty()) {    return new Object[]{text,new boolean[0]};  }  patches=patch_deepCopy(patches);  String nullPadding=patch_addPadding(patches);  text=nullPadding + text + nullPadding;  patch_splitMax(patches);  int x=0;  int delta=0;  boolean[] results=new boolean[patches.size()];  for (  Patch aPatch : patches) {    int expected_loc=aPatch.start2 + delta;    String text1=diff_text1(aPatch.diffs);    int start_loc;    int end_loc=-1;    if (text1.length() > this.Match_MaxBits) {      start_loc=match_main(text,text1.substring(0,this.Match_MaxBits),expected_loc);      if (start_loc != -1) {        end_loc=match_main(text,text1.substring(text1.length() - this.Match_MaxBits),expected_loc + text1.length() - this.Match_MaxBits);        if (end_loc == -1 || start_loc >= end_loc) {          start_loc=-1;        }      }    } else {      start_loc=match_main(text,text1,expected_loc);    }    if (start_loc == -1) {      results[x]=false;      delta-=aPatch.length2 - aPatch.length1;    } else {      results[x]=true;      delta=start_loc - expected_loc;      String text2;      if (end_loc == -1) {        text2=text.substring(start_loc,Math.min(start_loc + text1.length(),text.length()));      } else {        text2=text.substring(start_loc,Math.min(end_loc + this.Match_MaxBits,text.length()));      }      if (text1.equals(text2)) {        text=text.substring(0,start_loc) + diff_text2(aPatch.diffs) + text.substring(start_loc + text1.length());      } else {        LinkedList<Diff> diffs=diff_main(text1,text2,false);        if (text1.length() > this.Match_MaxBits && diff_levenshtein(diffs) / (float)text1.length() > this.Patch_DeleteThreshold) {          results[x]=false;        } else {          diff_cleanupSemanticLossless(diffs);          int index1=0;          for (          Diff aDiff : aPatch.diffs) {            if (aDiff.operation != Operation.EQUAL) {              int index2=diff_xIndex(diffs,index1);              if (aDiff.operation == Operation.INSERT) {                text=text.substring(0,start_loc + index2) + aDiff.text + text.substring(start_loc + index2);              } else               if (aDiff.operation == Operation.DELETE) {                text=text.substring(0,start_loc + index2) + text.substring(start_loc + diff_xIndex(diffs,index1 + aDiff.text.length()));              }            }            if (aDiff.operation != Operation.DELETE) {              index1+=aDiff.text.length();            }          }        }      }    }    x++;  }  text=text.substring(nullPadding.length(),text.length() - nullPadding.length());  return new Object[]{text,results};}  }
class C{  public void waitUntilFinished(){  try {    while (m_runningCount > 0) {      Thread.sleep(200);    }    while (true) {      boolean busy=false;      for (int i=0; i < m_beans.size(); i++) {        BeanInstance temp=(BeanInstance)m_beans.elementAt(i);        if (temp.getBean() instanceof BeanCommon) {          if (((BeanCommon)temp.getBean()).isBusy()) {            busy=true;            break;          }        }      }      if (busy) {        Thread.sleep(3000);      } else {        break;      }    }  } catch (  Exception ex) {    if (m_log != null) {      m_log.logMessage("[FlowRunner] Attempting to stop all flows...");    } else {      System.err.println("[FlowRunner] Attempting to stop all flows...");    }    stopAllFlows();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:34:30.649 -0500",hash_original_method="91D303D5C085A2886EA18E68D84B5130",hash_generated_method="AB93A70CB43B88578EAB171A59E30AB6") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public static byte[] toAsciiBytes(byte[] raw){  if (raw == null || raw.length == 0) {    return EMPTY_BYTE_ARRAY;  }  byte[] l_ascii=new byte[raw.length << 3];  l_ascii.addTaint(raw.getTaint());  return l_ascii;}  }
class C{  private void fieldInsn(final int opcode,final Type ownerType,final String name,final Type fieldType){  mv.visitFieldInsn(opcode,ownerType.getInternalName(),name,fieldType.getDescriptor());}  }
class C{  public String write(String value){  return value;}  }
class C{  public static float[] toFloatArray(short[] array){  float[] result=new float[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(float)array[i];  }  return result;}  }
class C{  public final boolean readBoolean() throws IOException {  int ch=this.read();  if (ch < 0) {    throw new EOFException();  }  return (ch != 0);}  }
class C{  public static Boolean isAppFavorite(String apk,Set<String> appFavorites){  Boolean res=false;  if (appFavorites.contains(apk)) {    res=true;  }  return res;}  }
class C{  public static DocList doSimpleQuery(String sreq,SolrQueryRequest req,int start,int limit) throws IOException {  List<String> commands=StrUtils.splitSmart(sreq,';');  String qs=commands.size() >= 1 ? commands.get(0) : "";  try {    Query query=QParser.getParser(qs,req).getQuery();    Sort sort=null;    if (commands.size() >= 2) {      sort=SortSpecParsing.parseSortSpec(commands.get(1),req).getSort();    }    DocList results=req.getSearcher().getDocList(query,(DocSet)null,sort,start,limit);    return results;  } catch (  SyntaxError e) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Error parsing query: " + qs);  }}  }
class C{  public void submitOne(final R resource,final long retryMillis) throws InterruptedException, Exception {  if (resource == null)   throw new IllegalArgumentException();  if (retryMillis < 0)   throw new IllegalArgumentException();  int retryCount=0;  final long begin=System.currentTimeMillis();  long lastLogTime=begin;  final Callable<?> task=newParserTask(resource);  while (true) {    try {      submitOne(resource,task);      return;    } catch (    RejectedExecutionException ex) {      if (parserService.isShutdown()) {        throw ex;      }      if (retryMillis == 0L) {        throw ex;      }      Thread.sleep(retryMillis);      retryCount++;      if (log.isInfoEnabled()) {        final long now=System.currentTimeMillis();        final long elapsedSinceLastLogTime=now - lastLogTime;        if (elapsedSinceLastLogTime > 5000) {          final long elapsed=now - begin;          lastLogTime=now;          log.info("Parser pool blocking: retryCount=" + retryCount + ", elapsed="+ elapsed+ "ms, resource="+ resource);        }      }      continue;    }catch (    InterruptedException ex) {      throw ex;    }catch (    Exception ex) {      log.error(resource,ex);    }  }}  }
class C{  public static byte[] generateIv() throws GeneralSecurityException {  return randomBytes(IV_LENGTH_BYTES);}  }
class C{  public static double decodeTimestamp(byte[] array,int pointer){  double r=0.0;  for (int i=0; i < 8; i++) {    r+=unsignedByteToShort(array[pointer + i]) * Math.pow(2,(3 - i) * 8);  }  return r;}  }
class C{  public JCheckBox(String text,Icon icon){  this(text,icon,false);}  }
class C{  @Override public void zEventCustomPopupWasClosed(CustomPopup popup){  popup=null;  if (timeMenuPanel != null) {    timeMenuPanel.clearParent();  }  timeMenuPanel=null;  lastPopupCloseTime=Instant.now();}  }
class C{  public void register5(String name,Type arg1,Type arg2,Type arg3,Type arg4,Type arg5,InvocationPlugin plugin){  plugins.register(plugin,false,allowOverwrite,declaringType,name,arg1,arg2,arg3,arg4,arg5);}  }
class C{  private void runSingleDeleteTask(String url,OnDeleteDownloadFileListener onDeleteEverySingleDownloadFileListener,boolean sync){  DeleteDownloadFileTask deleteSingleDownloadFileTask=new DeleteDownloadFileTask(url,mDeleteDownloadedFile,mDownloadFileDeleter);  deleteSingleDownloadFileTask.enableSyncCallback();  deleteSingleDownloadFileTask.setOnDeleteDownloadFileListener(onDeleteEverySingleDownloadFileListener);  if (sync) {    deleteSingleDownloadFileTask.run();  } else {    mTaskEngine.execute(deleteSingleDownloadFileTask);  }}  }
class C{  public void pushRTFContext(){  m_last_pushed_rtfdtm.push(m_which_rtfdtm);  if (null != m_rtfdtm_stack)   ((SAX2RTFDTM)(getRTFDTM())).pushRewindMark();}  }
class C{  public String qty(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive() || value == null)   return "";  int M_Product_ID=Env.getContextAsInt(ctx,WindowNo,"M_Product_ID");  checkQtyAvailable(ctx,mTab,WindowNo,M_Product_ID,(BigDecimal)value);  return "";}  }
class C{  public final void transpose(){  float temp;  temp=this.m10;  this.m10=this.m01;  this.m01=temp;  temp=this.m20;  this.m20=this.m02;  this.m02=temp;  temp=this.m30;  this.m30=this.m03;  this.m03=temp;  temp=this.m21;  this.m21=this.m12;  this.m12=temp;  temp=this.m31;  this.m31=this.m13;  this.m13=temp;  temp=this.m32;  this.m32=this.m23;  this.m23=temp;}  }
class C{  public static boolean isMarkup(int c){  return c == '<' || c == '&' || c == '%';}  }
class C{  public JpaRepositoryTransition(String machineId,JpaRepositoryState source,JpaRepositoryState target,String event,Set<JpaRepositoryAction> actions){  this.machineId=machineId;  this.source=source;  this.target=target;  this.event=event;  this.actions=actions;}  }
class C{  protected double computeScale(){  Double scale=null;  ColladaAsset asset=this.getAsset();  if (asset != null) {    ColladaUnit unit=asset.getUnit();    if (unit != null)     scale=unit.getMeter();  }  return (scale != null) ? scale : 1.0;}  }
class C{  static void validateInstance(){  checkNotNull(defaultSessionConfiguration,"Login Configuration must be set using initialize before use");}  }
class C{  public synchronized Name makeNewName(final Evidence log,final String logType){  final Date timestamp=log.timestamp;  final int progressive=getNewProgressive();  if (Cfg.DEBUG) {    Check.asserts(progressive >= 0,"makeNewName fail progressive >=0");  }  final String basePath=Path.logs();  final String blockDir=prefix + (progressive / LOG_PER_DIRECTORY);  final String mask=M.e("0000");  final String ds=Long.toString(progressive % 10000);  final int size=mask.length() - ds.length();  if (Cfg.DEBUG) {    Check.asserts(size >= 0,"makeNewName: failed size>0");  }  final String paddedProgressive=mask.substring(0,size) + ds;  final String fileName=paddedProgressive + "" + logType+ ""+ makeDateName(timestamp);  final String encName=encryptName(fileName + LOG_EXTENSION);  if (Cfg.DEBUG) {    Check.asserts(!encName.endsWith("mob"),"makeNewName: " + encName + " ch: "+ seed+ " not scrambled: "+ fileName+ LOG_EXTENSION);  }  final Name name=new Name();  name.progressive=progressive;  name.basePath=basePath;  name.blockDir=blockDir;  name.encName=encName;  name.fileName=fileName;  return name;}  }
class C{  public static String toString(JSONArray ja) throws JSONException {  int i;  JSONObject jo;  String key;  Iterator keys;  int length;  Object object;  StringBuffer sb=new StringBuffer();  String tagName;  String value;  tagName=ja.getString(0);  XML.noSpace(tagName);  tagName=XML.escape(tagName);  sb.append('<');  sb.append(tagName);  object=ja.opt(1);  if (object instanceof JSONObject) {    i=2;    jo=(JSONObject)object;    keys=jo.keys();    while (keys.hasNext()) {      key=keys.next().toString();      XML.noSpace(key);      value=jo.optString(key);      if (value != null) {        sb.append(' ');        sb.append(XML.escape(key));        sb.append('=');        sb.append('"');        sb.append(XML.escape(value));        sb.append('"');      }    }  } else {    i=1;  }  length=ja.length();  if (i >= length) {    sb.append('/');    sb.append('>');  } else {    sb.append('>');    do {      object=ja.get(i);      i+=1;      if (object != null) {        if (object instanceof String) {          sb.append(XML.escape(object.toString()));        } else         if (object instanceof JSONObject) {          sb.append(toString((JSONObject)object));        } else         if (object instanceof JSONArray) {          sb.append(toString((JSONArray)object));        }      }    } while (i < length);    sb.append('<');    sb.append('/');    sb.append(tagName);    sb.append('>');  }  return sb.toString();}  }
class C{  public AccessibilityNodeInfo focusSearch(int direction){  enforceSealed();  enforceValidFocusDirection(direction);  if (!canPerformRequestOverConnection(mSourceNodeId)) {    return null;  }  return AccessibilityInteractionClient.getInstance().focusSearch(mConnectionId,mWindowId,mSourceNodeId,direction);}  }
class C{  public T caseDefaultImportSpecifier(DefaultImportSpecifier object){  return null;}  }
class C{  public Node selectSingleNode(Node contextNode,String str,Node namespaceNode) throws TransformerException {  NodeIterator nl=selectNodeIterator(contextNode,str,namespaceNode);  return nl.nextNode();}  }
class C{  private EmrCluster createEmrClusterInRunningState(String namespace,String emrClusterDefinitionName){  String amiVersion=MockAwsOperationsHelper.AMAZON_CLUSTER_STATUS_RUNNING;  return createEmrCluster(namespace,emrClusterDefinitionName,amiVersion);}  }
class C{  protected void showErrorDialog(StatusAdapter statusAdapter){  if (ignore(statusAdapter.getStatus())) {    return;  }  if (!PlatformUI.isWorkbenchRunning()) {    WorkbenchPlugin.log(statusAdapter.getStatus());    return;  }  Dialog dialog=null;  if (statusAdapter.getStatus().getException() instanceof BusinessException) {    dialog=new BusinessExceptionDialog(null,(BusinessException)statusAdapter.getStatus().getException());  } else {    String message=statusAdapter.getStatus().getMessage();    if (StringUtils.isEmpty(message)) {      message=statusAdapter.getStatus().getException().getMessage();    }    dialog=new ThrowableDialog(null,message,statusAdapter.getStatus().getException());  }  dialog.open();}  }
class C{  public void mouseClicked(MouseEvent e){  if (SwingUtilities.isRightMouseButton(e))   adaptee.popupMenu.show((Component)e.getSource(),e.getX(),e.getY());}  }
class C{  public CRegisterMenuProvider(final CDebugPerspectiveModel debugPerspectiveModel,final CRegisterProvider dataProvider){  Preconditions.checkNotNull(debugPerspectiveModel,"IE01219: Debug perspective model argument can not be null");  Preconditions.checkNotNull(dataProvider,"IE01474: Data provider argument can not be null");  m_debugPerspectiveModel=debugPerspectiveModel;  m_dataProvider=dataProvider;}  }
class C{  private static Domain extractPartialDomain(Node mainNode,Domain domain,String rootpath,boolean fullExtract){  if (mainNode.getNodeName().equals("domain")) {    NodeList firstElements=mainNode.getChildNodes();    for (int j=0; j < firstElements.getLength(); j++) {      Node node=firstElements.item(j);      domain=extractPartialDomain(node,domain,rootpath,fullExtract);    }  } else   if (fullExtract && mainNode.getNodeName().equals("settings")) {    Properties settings=XMLUtils.extractMapping(mainNode);    domain.getSettings().fillSettings(settings);  } else   if (fullExtract && mainNode.getNodeName().equals("function") && mainNode.getAttributes().getNamedItem("name") != null) {    String name=mainNode.getAttributes().getNamedItem("name").getNodeValue();    String functionStr=mainNode.getTextContent().trim();    try {      Class<?> clazz=Class.forName(functionStr);      @SuppressWarnings("unchecked") Function<List<String>,Value> f=(Function<List<String>,Value>)clazz.newInstance();      domain.getSettings();      Settings.addFunction(name,f);    } catch (    Exception e) {      log.warning("cannot load function : " + e);    }  } else   if (fullExtract && mainNode.getNodeName().equals("initialstate")) {    BNetwork state=XMLStateReader.getBayesianNetwork(mainNode);    domain.setInitialState(new DialogueState(state));  } else   if (fullExtract && mainNode.getNodeName().equals("model")) {    Model model=createModel(mainNode);    domain.addModel(model);  } else   if (fullExtract && mainNode.getNodeName().equals("parameters")) {    BNetwork parameters=XMLStateReader.getBayesianNetwork(mainNode);    domain.setParameters(parameters);  } else   if (mainNode.getNodeName().equals("import") && mainNode.hasAttributes() && mainNode.getAttributes().getNamedItem("href") != null) {    String fileName=mainNode.getAttributes().getNamedItem("href").getNodeValue();    String filepath=rootpath == null ? fileName : rootpath + File.separator + fileName;    domain.addImportedFiles(new File(filepath));    Document subdoc=XMLUtils.getXMLDocument(filepath);    domain=extractPartialDomain(XMLUtils.getMainNode(subdoc),domain,rootpath,fullExtract);  } else   if (fullExtract && XMLUtils.hasContent(mainNode)) {    if (mainNode.getNodeName().equals("#text")) {      throw new RuntimeException("cannot insert free text in <domain>");    }    throw new RuntimeException("Invalid tag in <domain>: " + mainNode.getNodeName());  }  return domain;}  }
class C{  public static String toBase64(byte[] input){  return new Base64().encodeToString(input);}  }
class C{  @SuppressWarnings("unchecked") public static Class<? extends Enum<?>> findEnumType(Enum<?> en){  Class<?> ec=en.getClass();  if (ec.getSuperclass() != Enum.class) {    ec=ec.getSuperclass();  }  return (Class<? extends Enum<?>>)ec;}  }
class C{  @Override public boolean handleMessage(Message msg){  loadingDialog.dismiss();  if (msg.what == 1) {    adapter.setSubscriptions(subscriptions);    adapter.notifyDataSetChanged();  } else {    Toast.makeText(SubscriptionListActivity.this,errMsg,Toast.LENGTH_SHORT).show();  }  return true;}  }
class C{  private void appendTypeParameterSignaturesLabel(String[] typeParamSigs,StringBuilder builder){  if (typeParamSigs.length > 0) {    builder.append(getLT());    for (int i=0; i < typeParamSigs.length; i++) {      if (i > 0) {        builder.append(JavaElementLabels.COMMA_STRING);      }      builder.append(Signature.getTypeVariable(typeParamSigs[i]));    }    builder.append(getGT());  }}  }
class C{  public void testDefaults() throws Exception {  ClassicSimilarity sim=getSimilarity("text",ClassicSimilarity.class);  assertEquals(true,sim.getDiscountOverlaps());}  }
class C{  private void insertLineDetail(){  if (!m_report.isListSources())   return;  log.info("");  for (int line=0; line < m_lines.length; line++) {    if (m_lines[line].isLineTypeSegmentValue())     insertLineSource(line);  }  StringBuffer sql=new StringBuffer("DELETE FROM T_Report WHERE ABS(LevelNo)<>0").append(" AND Col_0 IS NULL AND Col_1 IS NULL AND Col_2 IS NULL AND Col_3 IS NULL AND Col_4 IS NULL AND Col_5 IS NULL AND Col_6 IS NULL AND Col_7 IS NULL AND Col_8 IS NULL AND Col_9 IS NULL").append(" AND Col_10 IS NULL AND Col_11 IS NULL AND Col_12 IS NULL AND Col_13 IS NULL AND Col_14 IS NULL AND Col_15 IS NULL AND Col_16 IS NULL AND Col_17 IS NULL AND Col_18 IS NULL AND Col_19 IS NULL AND Col_20 IS NULL");  int no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Deleted empty #=" + no);  sql=new StringBuffer("UPDATE T_Report r1 " + "SET SeqNo = (SELECT SeqNo " + "FROM T_Report r2 "+ "WHERE r1.AD_PInstance_ID=r2.AD_PInstance_ID AND r1.PA_ReportLine_ID=r2.PA_ReportLine_ID"+ " AND r2.Record_ID=0 AND r2.Fact_Acct_ID=0)"+ "WHERE SeqNo IS NULL");  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("SeqNo #=" + no);  if (!m_report.isListTrx())   return;  String sql_select="SELECT e.Name, fa.Description " + "FROM Fact_Acct fa" + " INNER JOIN AD_Table t ON (fa.AD_Table_ID=t.AD_Table_ID)"+ " INNER JOIN AD_Element e ON (t.TableName||'_ID'=e.ColumnName) "+ "WHERE r.Fact_Acct_ID=fa.Fact_Acct_ID";  sql=new StringBuffer("UPDATE T_Report r SET (Name,Description)=(").append(sql_select).append(") " + "WHERE Fact_Acct_ID <> 0 AND AD_PInstance_ID=").append(getAD_PInstance_ID());  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (CLogMgt.isLevelFinest())   log.fine("Trx Name #=" + no + " - "+ sql.toString());}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @Override public Long rpush(final byte[] key,final byte[]... strings){  checkIsInMultiOrPipeline();  client.rpush(key,strings);  return client.getIntegerReply();}  }
class C{  private void handleHttpRequestToHelloWorld(final HttpServerRequest httpRequest){  vertx.eventBus().send(Services.HELLO_WORLD.toString(),HelloWorldOperations.SAY_HELLO_WORLD.toString(),null);}  }
class C{  public final void handleElement(Element elt,Object data){}  }
class C{  public boolean isResubscribe(){  return resubscribe;}  }
class C{  public CyclicXYItemRenderer(int type){  super(type);}  }
class C{  public Source<String> ofFixedNumberOfCodePoints(int codePoints){  ArgumentAssertions.checkArguments(codePoints >= 0,"The number of codepoints cannot be negative; %s is not an accepted argument",codePoints);  return Strings.ofFixedNumberOfCodePointsStrings(minCodePoint,maxCodePoint,codePoints);}  }
class C{  public void clearIndex() throws IOException {  if (indexWriter != null) {    indexWriter.deleteAll();  }}  }
class C{  public static Executor createExecutor(int threadPoolSize,int threadPriority,QueueProcessingType tasksProcessingType){  boolean lifo=tasksProcessingType == QueueProcessingType.LIFO;  BlockingQueue<Runnable> taskQueue=lifo ? new LIFOLinkedBlockingDeque<Runnable>() : new LinkedBlockingQueue<Runnable>();  return new ThreadPoolExecutor(threadPoolSize,threadPoolSize,0L,TimeUnit.MILLISECONDS,taskQueue,createThreadFactory(threadPriority));}  }
class C{  public ChunkedArrayIterator(final E[] a){  this(a.length,a,null);}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  public void close(){  if (connected) {    try {      transport.close();      socket.close();    } catch (    IOException ex) {      logger.warn("Could not close socket",ex);    }    connected=false;  }}  }
class C{  public BufferedImage findBestMatch(final BufferedImage original,final ImageSearchHits hits,double scalePercentage,IndexReader reader) throws IOException {  assert original != null;  assert hits != null;  WeightingData bestHit=null;  float bestRating=Float.NEGATIVE_INFINITY;  for (int i=0; i < hits.length(); i++) {    Document doc=reader.document(hits.documentID(i));    String file=doc.getField(DocumentBuilder.FIELD_NAME_IDENTIFIER).stringValue();    WeightingData data=weightingDataFactory_.newInstance(doc);    data.setRelevancy((float)hits.score(i));    data.setSlice(original);    data.setId(file);    data.setScalePercentage(scalePercentage);    float weight=getWeightedRelevancy(data);    if (outweightImageReuse) {      if (file2occurence.containsKey(file))       weight*=1f / (((float)file2occurence.get(file)) + 1f);    }    if (bestRating < weight) {      bestRating=weight;      bestHit=data;    }  }  for (  EngineObserver observer : observer_)   observer.notifyState(bestHit,EngineObserver.USED);  if (outweightImageReuse) {    if (file2occurence.containsKey(bestHit.getId()))     file2occurence.put(bestHit.getId(),file2occurence.get(bestHit.getId()) + 1); else     file2occurence.put(bestHit.getId(),1);  }  return bestHit.getReplacement();}  }
class C{  public void invert(){  for (int i=0; i < m_Selected.length; i++) {    m_Selected[i]=!m_Selected[i];  }  fireTableRowsUpdated(0,m_Selected.length);}  }
class C{  public EntryStream<K,V> peekValues(Consumer<? super V> valueAction){  return peek(null);}  }
class C{  public void test_DivideBigDecimalRoundingModeCEILING(){  String a="3736186567876876578956958765675671119238118911893939591735";  String b="74723342238476237823787879183470";  RoundingMode rm=RoundingMode.CEILING;  String c="50000260373164286401361914";  BigDecimal aNumber=new BigDecimal(new BigInteger(a));  BigDecimal bNumber=new BigDecimal(new BigInteger(b));  BigDecimal result=aNumber.divide(bNumber,rm);  assertEquals("incorrect value",c,result.toString());}  }
class C{  public int run(String[] argv) throws Exception {  Args args=new Args();  CmdLineParser parser=new CmdLineParser(args,ParserProperties.defaults().withUsageWidth(100));  try {    parser.parseArgument(argv);  } catch (  CmdLineException e) {    System.err.println(e.getMessage());    parser.printUsage(System.err);    return -1;  }  LOG.info("Tool name: " + ComputeBigramRelativeFrequencyPairs.class.getSimpleName());  LOG.info(" - input path: " + args.input);  LOG.info(" - output path: " + args.output);  LOG.info(" - num reducers: " + args.numReducers);  LOG.info(" - text output: " + args.textOutput);  Job job=Job.getInstance(getConf());  job.setJobName(ComputeBigramRelativeFrequencyPairs.class.getSimpleName());  job.setJarByClass(ComputeBigramRelativeFrequencyPairs.class);  job.setNumReduceTasks(args.numReducers);  FileInputFormat.setInputPaths(job,new Path(args.input));  FileOutputFormat.setOutputPath(job,new Path(args.output));  job.setMapOutputKeyClass(PairOfStrings.class);  job.setMapOutputValueClass(FloatWritable.class);  job.setOutputKeyClass(PairOfStrings.class);  job.setOutputValueClass(FloatWritable.class);  if (args.textOutput) {    job.setOutputFormatClass(TextOutputFormat.class);  } else {    job.setOutputFormatClass(SequenceFileOutputFormat.class);  }  job.setMapperClass(MyMapper.class);  job.setCombinerClass(MyCombiner.class);  job.setReducerClass(MyReducer.class);  job.setPartitionerClass(MyPartitioner.class);  Path outputDir=new Path(args.output);  FileSystem.get(getConf()).delete(outputDir,true);  long startTime=System.currentTimeMillis();  job.waitForCompletion(true);  System.out.println("Job Finished in " + (System.currentTimeMillis() - startTime) / 1000.0 + " seconds");  return 0;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TypeProvidingElement.class) {switch (baseOperationID) {case N4JSPackage.TYPE_PROVIDING_ELEMENT___GET_DECLARED_TYPE_REF:      return N4JSPackage.SETTER_DECLARATION___GET_DECLARED_TYPE_REF;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == FieldAccessor.class) {switch (baseOperationID) {case N4JSPackage.FIELD_ACCESSOR___GET_DECLARED_TYPE_REF:  return N4JSPackage.SETTER_DECLARATION___GET_DECLARED_TYPE_REF;case N4JSPackage.FIELD_ACCESSOR___GET_DEFINED_ACCESSOR:return N4JSPackage.SETTER_DECLARATION___GET_DEFINED_ACCESSOR;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public UserProfilesImpl(){  list=new ArrayList();}  }
class C{  public GitFetchResult fetch(@NotNull GitRepository repository){  GitFetchResult fetchResult=GitFetchResult.success();  if (myFetchAll) {    fetchResult=fetchAll(repository,fetchResult);  } else {    return fetchCurrentRemote(repository);  }  VfsUtil.markDirtyAndRefresh(false,true,false,repository.getGitDir());  return fetchResult;}  }
class C{  protected void updateEntry(final HashEntry<K,V> entry,final V newValue){  entry.setValue(newValue);}  }
class C{  private Object _evaluate(Object element){  if (element == null) {    return null;  }  int index=expr.indexOf("=");  if (index != -1) {    return _evaluate(element,index);  }  index=expr.indexOf(">");  if (index != -1) {    return _evaluate(element,index);  }  index=expr.indexOf("<");  if (index != -1) {    return _evaluate(element,index);  }  index=expr.indexOf("%");  if (index != -1) {    return _evaluate(element,index);  }  return _evaluateSingle(element);}  }
class C{  public double computeAverageLocalOfObservationsWhileComputingDistances() throws Exception {  int N=continuousData.length;  double averageDiGammas=0;  double avNx=0;  double avNy=0;  double testSum=0.0;  for (int t=0; t < N; t++) {    double[] norms=new double[N];    for (int t2=0; t2 < N; t2++) {      if (t2 == t) {        norms[t2]=Double.POSITIVE_INFINITY;        continue;      }      norms[t2]=normCalculator.norm(continuousData[t],continuousData[t2]);    }    double eps_x=MatrixUtils.kthMinSubjectTo(norms,k,discreteData,discreteData[t]);    int n_x=0;    for (int t2=0; t2 < N; t2++) {      if (norms[t2] <= eps_x) {        n_x++;      }    }    int n_y=counts[discreteData[t]] - 1;    avNx+=n_x;    avNy+=n_y;    double localSum=MathsUtils.digamma(n_x) + MathsUtils.digamma(n_y);    averageDiGammas+=localSum;    if (debug) {      double localValue=MathsUtils.digamma(k) - localSum + MathsUtils.digamma(N);      testSum+=localValue;      if (dimensions == 1) {        System.out.printf("t=%d: x=%.3f, eps_x=%.3f, n_x=%d, n_y=%d, local=%.3f, running total = %.5f\n",t,continuousData[t][0],eps_x,n_x,n_y,localValue,testSum);      } else {        System.out.printf("t=%d: eps_x=%.3f, n_x=%d, n_y=%d, local=%.3f, running total = %.5f\n",t,eps_x,n_x,n_y,localValue,testSum);      }    }  }  averageDiGammas/=(double)N;  if (debug) {    avNx/=(double)N;    avNy/=(double)N;    System.out.println(String.format("Average n_x=%.3f, Average n_y=%.3f",avNx,avNy));  }  mi=MathsUtils.digamma(k) - averageDiGammas + MathsUtils.digamma(N);  miComputed=true;  return mi;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:07.567 -0500",hash_original_method="36F25878FE380B4CEA8E7C4B89DDFC1A",hash_generated_method="366843CDEB60ED07212DE3CF20310076") public ComponentName(Context pkg,String cls){  if (cls == null)   throw new NullPointerException("class name is null");  mPackage=pkg.getPackageName();  mClass=cls;}  }
class C{  @Override protected EClass eStaticClass(){  return FunctionblockPackage.Literals.PARAM;}  }
class C{  @Override public void start(){  super.start();}  }
class C{  protected void rejectDrop(){  DropTargetContextPeer peer=getDropTargetContextPeer();  if (peer != null) {    peer.rejectDrop();  }}  }
class C{  public Collapser(){}  }
class C{  public List<NamedRelatedResourceRep> listByVirtualArray(URI virtualArrayId,String provisioningType,Boolean uniqueNames){  UriBuilder builder=client.uriBuilder(PathConstants.AUTO_TIER_BY_VARRAY_URL);  if ((provisioningType != null) && (provisioningType.length() > 0)) {    builder.queryParam("provisioning_type",provisioningType);  }  if (uniqueNames != null) {    builder.queryParam("unique_auto_tier_policy_names",uniqueNames);  }  return getList(builder.build(virtualArrayId));}  }
class C{  public static int nextOid(long[] index,int start) throws SnmpStatusException {  if (start + 4 <= index.length) {    return start + 4;  } else {    throw new SnmpStatusException(SnmpStatusException.noSuchName);  }}  }
class C{  public BarChartProgressView loadStyledAttributes(TypedArray attributes,ChartProgressAttr progress){  mAttributes=attributes;  mChartProgressAttr=progress;  mIsFuture=progress == null ? false : progress.isFuture();  Resources res=getContext().getResources();  if (attributes != null) {    mCompletedColor=attributes.getColor(R.styleable.SlidePager_slide_progress_bar_chart_completed_color,res.getColor(R.color.default_progress_completed_reach_color));    mNotCompletedColor=attributes.getColor(R.styleable.SlidePager_slide_progress_bar_chart_not_completed_color,res.getColor(R.color.default_progress_not_completed_reach_color));    mFutureColor=attributes.getColor(R.styleable.SlidePager_slide_progress_bar_chart_future_color,res.getColor(R.color.default_progress_chart_bar_color));    mTodayColor=attributes.getColor(R.styleable.SlidePager_slide_progress_bar_chart_today_color,res.getColor(R.color.default_progress_special_reach_color));    mBarWidth=attributes.getDimension(R.styleable.SlidePager_slide_progress_bar_chart_bar_width,res.getDimension(R.dimen.bar_view_default_width));    mBarVisibleNullValue=attributes.getBoolean(R.styleable.SlidePager_slide_progress_bar_chart_null_value_bar_display,true);    mCheckMarkVisible=attributes.getBoolean(R.styleable.SlidePager_slide_progress_bar_chart_check_mark_visible,true);    mHasToReanimate=mAttributes.getBoolean(R.styleable.SlidePager_slide_pager_reanimate_slide_view,true);  } else {    mCompletedColor=res.getColor(R.color.default_progress_completed_reach_color);    mNotCompletedColor=res.getColor(R.color.default_progress_not_completed_reach_color);    mFutureColor=res.getColor(R.color.default_progress_chart_bar_color);    mTodayColor=res.getColor(R.color.default_progress_special_reach_color);    mBarWidth=res.getDimension(R.dimen.bar_view_default_width);    mBarVisibleNullValue=true;    mCheckMarkVisible=true;    mHasToReanimate=true;  }  setBarColorsAndSize();  initAnimations();  return this;}  }
class C{  public void test3a(){  final JPanel panel=new JPanel(new GridLayoutManager(2,3,new Insets(0,0,0,0),1000,0));  final JButton btn1=new JButton();  btn1.setPreferredSize(new Dimension(100,20));  final JButton btn2=new JButton();  btn2.setPreferredSize(new Dimension(100,20));  final JButton btn3=new JButton();  btn3.setPreferredSize(new Dimension(100,20));  final JButton btn4=new JButton();  btn4.setPreferredSize(new Dimension(100,20));  panel.add(btn1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(btn2,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(btn3,new GridConstraints(1,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(btn4,new GridConstraints(0,2,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  final Dimension preferredSize=panel.getPreferredSize();  assertEquals(2300,preferredSize.width);  panel.setSize(panel.getPreferredSize());  panel.doLayout();}  }
class C{  private void socksBind() throws IOException {  try {    IoBridge.connect(fd,socksGetServerAddress(),socksGetServerPort());  } catch (  Exception e) {    throw new IOException("Unable to connect to SOCKS server",e);  }  if (lastConnectedAddress == null) {    throw new SocketException("Invalid SOCKS client");  }  socksSendRequest(Socks4Message.COMMAND_BIND,lastConnectedAddress,lastConnectedPort);  Socks4Message reply=socksReadReply();  if (reply.getCommandOrResult() != Socks4Message.RETURN_SUCCESS) {    throw new IOException(reply.getErrorString(reply.getCommandOrResult()));  }  if (reply.getIP() == 0) {    address=socksGetServerAddress();  } else {    byte[] replyBytes=new byte[4];    Memory.pokeInt(replyBytes,0,reply.getIP(),ByteOrder.BIG_ENDIAN);    address=InetAddress.getByAddress(replyBytes);  }  localport=reply.getPort();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.INTERFACE_MEMBER_DECLARATION___CONSTANT_DECLARATION_1:    return getConstantDeclaration_1();case UmplePackage.INTERFACE_MEMBER_DECLARATION___ABSTRACT_METHOD_DECLARATION_1:  return getAbstractMethodDeclaration_1();case UmplePackage.INTERFACE_MEMBER_DECLARATION___POSITION_1:return getPosition_1();case UmplePackage.INTERFACE_MEMBER_DECLARATION___DISPLAY_COLOR_1:return getDisplayColor_1();case UmplePackage.INTERFACE_MEMBER_DECLARATION___IS_A1:return getIsA_1();case UmplePackage.INTERFACE_MEMBER_DECLARATION___EXTRA_CODE_1:return getExtraCode_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static int[] randPermute(int floor,int ceil){  int[] permute=new int[ceil - floor];  Random randi=new Random();  for (int i=floor; i < ceil; i++) {    int j=randi.nextInt(i - floor + 1);    if (j != i - floor) {      permute[i - floor]=permute[j];    }    permute[j]=i;  }  return permute;}  }
class C{  public final void writeBytes(char b[],int off,int len) throws IOException {  for (int i=off; i < len; i++) {    write((byte)b[i]);  }}  }
class C{  private void adjustByteCounts(){  if (byteCount1 > 0x1fffffffffffffffL) {    byteCount2+=(byteCount1 >>> 61);    byteCount1&=0x1fffffffffffffffL;  }}  }
class C{  public void writeUnsafeTo(final PacketOutputStream os) throws IOException {  if (loadedStream == null)   writeObjectToBytes();  ParameterWriter.writeUnsafe(os,loadedStream,noBackSlashEscapes);}  }
class C{  public static RectF adjustToFitInBounds(RectF rect,int viewportWidth,int viewportHeight){  float dx=0, dy=0;  RectF newRect=new RectF(rect);  if (newRect.width() < viewportWidth) {    dx=viewportWidth / 2 - (newRect.left + newRect.right) / 2;  } else {    if (newRect.left > 0) {      dx=-newRect.left;    } else     if (newRect.right < viewportWidth) {      dx=viewportWidth - newRect.right;    }  }  if (newRect.height() < viewportHeight) {    dy=viewportHeight / 2 - (newRect.top + newRect.bottom) / 2;  } else {    if (newRect.top > 0) {      dy=-newRect.top;    } else     if (newRect.bottom < viewportHeight) {      dy=viewportHeight - newRect.bottom;    }  }  if (dx != 0 || dy != 0) {    newRect.offset(dx,dy);  }  return newRect;}  }
class C{  public Polynomial times(double c){  Polynomial retval=new Polynomial(order);  for (int i=0; i <= order; i++)   retval.a[i]=c * a[i];  return retval;}  }
class C{  public Iterator<JsonElement> iterator(){  return elements.iterator();}  }
class C{  private void writeAssignmentIdentifiers(long triggerProcessKey) throws Exception {  UserAssignmentIdentifiers userAssignmentIds=determineUserAssignmentIds(triggerProcessKey);  createTriggerProcessIdentifier(triggerProcessKey,TriggerProcessIdentifierName.SUBSCRIPTION_ID,userAssignmentIds.getSubscriptionId());  for (  String userIdToAdd : userAssignmentIds.getUsersToAdd()) {    createTriggerProcessIdentifier(triggerProcessKey,TriggerProcessIdentifierName.USER_TO_ADD,userIdToAdd);  }  for (  String userIdToRevoke : userAssignmentIds.getUsersToRevoke()) {    createTriggerProcessIdentifier(triggerProcessKey,TriggerProcessIdentifierName.USER_TO_REVOKE,userIdToRevoke);  }}  }
class C{  public static String block(String text){  return "{" + nl + indent(text)+ nl+ "}";}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public final int index(){  return m_Index;}  }
class C{  public static UnicodeSpec[] readSpecFile(File file,int plane) throws FileNotFoundException {  ArrayList<UnicodeSpec> list=new ArrayList<>(3000);  UnicodeSpec[] result=null;  int count=0;  BufferedReader f=new BufferedReader(new FileReader(file));  String line=null;  loop:   while (true) {    try {      line=f.readLine();    } catch (    IOException e) {      break loop;    }    if (line == null)     break loop;    UnicodeSpec item=parse(line.trim());    int specPlane=item.getCodePoint() >>> 16;    if (specPlane < plane)     continue;    if (specPlane > plane)     break;    if (item != null) {      list.add(item);    }  }  result=new UnicodeSpec[list.size()];  list.toArray(result);  return result;}  }
class C{  public void saveToFile(){  String filePath=FileHelper.getCSVFile();  saveAsCsv(filePath);}  }
class C{  public void testShellAndHoleSelfTouch(){  String wkt="POLYGON ((0 0, 0 340, 320 340, 320 0, 120 0, 180 100, 60 100, 120 0, 0 0),   (80 300, 80 180, 200 180, 200 240, 280 200, 280 280, 200 240, 200 300, 80 300))";  checkIsValidSTR(wkt,true);  checkIsValidDefault(wkt,false);}  }
class C{  private void showSearchSuggestions(String query,SearchView searchView){  if (searchSuggestionsAdapter != null && searchSuggestionsList != null) {    Timber.d("Populate search adapter - mySuggestions.size(): %d",searchSuggestionsList.size());    final MatrixCursor c=new MatrixCursor(new String[]{BaseColumns._ID,"categories"});    for (int i=0; i < searchSuggestionsList.size(); i++) {      if (searchSuggestionsList.get(i) != null && searchSuggestionsList.get(i).toLowerCase().startsWith(query.toLowerCase()))       c.addRow(new Object[]{i,searchSuggestionsList.get(i)});    }    searchView.setSuggestionsAdapter(searchSuggestionsAdapter);    searchSuggestionsAdapter.changeCursor(c);  } else {    Timber.e("Search adapter is null or search data suggestions missing");  }}  }
class C{  protected void time(Calendar calendar) throws ParseException {  try {    String s=lexer.number();    int hour=Integer.parseInt(s);    calendar.set(Calendar.HOUR_OF_DAY,hour);    lexer.match(':');    s=lexer.number();    int min=Integer.parseInt(s);    calendar.set(Calendar.MINUTE,min);    lexer.match(':');    s=lexer.number();    int sec=Integer.parseInt(s);    calendar.set(Calendar.SECOND,sec);  } catch (  Exception ex) {    throw createParseException("error processing time ");  }}  }
class C{  protected static int storeDoubleAsF2Dot14(final double a){  return (int)((a * 16384) + 0.5);}  }
class C{  private void ensureEnumValueDescriptor(FieldDescriptor field,Object value){  if (field.isRepeated()) {    for (    Object item : (List)value) {      ensureSingularEnumValueDescriptor(field,item);    }  } else {    ensureSingularEnumValueDescriptor(field,value);  }}  }
class C{  @SafeVarargs public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8,E e9,E e10,E e11,E e12,E... others){  Object[] array=new Object[12 + others.length];  array[0]=e1;  array[1]=e2;  array[2]=e3;  array[3]=e4;  array[4]=e5;  array[5]=e6;  array[6]=e7;  array[7]=e8;  array[8]=e9;  array[9]=e10;  array[10]=e11;  array[11]=e12;  System.arraycopy(others,0,array,12,others.length);  return construct(array);}  }
class C{  public BufferedDataOutputStream(String name) throws IOException {  this(new FileOutputStream(name));}  }
class C{  public boolean isAppendStatics(){  return this.appendStatics;}  }
class C{  @HLEFunction(nid=0x5E7F79C9,version=150,checkInsideInterrupt=true) public int sceNetAdhocctlJoin(TPointer scanInfoAddr){  checkInitialized();  if (scanInfoAddr.isAddressGood()) {    int nextAddr=scanInfoAddr.getValue32(0);    int ch=scanInfoAddr.getValue32(4);    String groupName=scanInfoAddr.getStringNZ(8,GROUP_NAME_LENGTH);    String bssID=scanInfoAddr.getStringNZ(16,IBSS_NAME_LENGTH);    int mode=scanInfoAddr.getValue32(24);    if (log.isDebugEnabled()) {      log.debug(String.format("sceNetAdhocctlJoin nextAddr 0x%08X, ch %d, groupName '%s', bssID '%s', mode %d",nextAddr,ch,groupName,bssID,mode));    }    doJoin=true;    setGroupName(groupName,PSP_ADHOCCTL_MODE_NORMAL);    networkAdapter.sceNetAdhocctlJoin();  }  return 0;}  }
class C{  @Ignore @Test public void test_DR_PGS_NOMANUALSTART_4Nodes_Put_ValidateReceiver() throws Exception {  try {    Integer lnPort=(Integer)vm0.invoke(null);    Integer nyPort=(Integer)vm1.invoke(null);    createCacheInVMs(nyPort,vm2);    vm2.invoke(null);    vm2.invoke(null);    createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);    vm4.invoke(null);    vm5.invoke(null);    vm6.invoke(null);    vm7.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    vm6.invoke(null);    vm7.invoke(null);    vm4.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    vm6.invoke(null);    vm7.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    vm6.invoke(null);    vm7.invoke(null);    vm2.invoke(null);  } catch (  Exception e) {    Assert.fail("Unexpected exception",e);  }}  }
class C{  boolean isReusable(){  return true;}  }
class C{  public int execute() throws IOException, InterruptedException {  start();  return waitFor();}  }
class C{  public File newFolder(String folder) throws IOException {  return newFolder(new String[]{folder});}  }
class C{  public void removeColumn(final int columnToRemoveIndex,boolean fireEvent){  if (getColumnCount() <= 1) {    return;  }  for (  List<T> row : rowData) {    row.remove(columnToRemoveIndex);  }  if (fireEvent) {    this.fireTableStructureChanged();  }}  }
class C{  private static HostResource fakeHost(String nameserver,InetAddress... addresses){  return newHostResource(nameserver).asBuilder().setInetAddresses(ImmutableSet.copyOf(addresses)).build();}  }
class C{  public Set entrySet(){  Set es=entrySet;  return (es != null ? es : (entrySet=new EntrySet()));}  }
class C{  public void addTimezoneName(TimezoneName timezoneName){  addProperty(timezoneName);}  }
class C{  public static boolean download(String res,File dst,boolean gzip,IProgressListener ph){  String err="Couldn't download " + dst.getName() + "!";  ph=secure(ph);  ph.onTaskChanged("Downloading " + dst.getName());  SizedInputStream sis=openStream(res,err);  if (sis == null)   return false;  InputStream is;  if (gzip) {    try {      is=new GZIPInputStream(sis);    } catch (    IOException e) {      Log.error("Couldn't create GZIPInputStream: IOException.");      e.printStackTrace();      close(sis);      return false;    }  } else   is=sis;  delete(dst);  mkdirs(dst);  FileOutputStream fos;  try {    fos=new FileOutputStream(dst);  } catch (  FileNotFoundException e) {    Log.error("%s Couldn't open the destination file. Maybe you're missing rights.",err);    e.printStackTrace();    close(is);    return false;  }  int read;  byte[] data=new byte[65536];  double total=(double)sis.getContentLength();  double cur=.0d;  try {    while ((read=is.read(data)) > 0) {      fos.write(data,0,read);      cur+=(double)sis.resetLengthCounter();      ph.onProgressed(cur / total * 100.d);    }    return true;  } catch (  IOException e) {    Log.error("%s IOException while downloading.",err);    e.printStackTrace();    return false;  } finally {    close(is);    close(fos);  }}  }
class C{  public ReplDBMSEvent createEvent(long seqno,short fragNo,boolean lastFrag,String shardId,Timestamp timestamp,long epochNumber){  ArrayList<DBMSData> t=new ArrayList<DBMSData>();  t.add(new StatementData("SELECT 1"));  DBMSEvent dbmsEvent=new DBMSEvent(new Long(seqno).toString(),null,t,true,timestamp);  ReplDBMSEvent replDbmsEvent=new ReplDBMSEvent(seqno,fragNo,lastFrag,"NONE",epochNumber,timestamp,dbmsEvent);  if (shardId != null) {    replDbmsEvent.getDBMSEvent().addMetadataOption(ReplOptionParams.SHARD_ID,shardId);  }  return replDbmsEvent;}  }
class C{  public static void append(File file,Writer writer) throws IOException {  append(file,writer,false);}  }
class C{  public Sector union(float[] array,int count,int stride){  if (array == null || array.length < stride) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Sector","union","missingArray"));  }  if (count < 0) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Sector","union","invalidCount"));  }  if (stride < 2) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Sector","union","invalidStride"));  }  double minLat=Double.isNaN(this.minLatitude) ? Double.MAX_VALUE : this.minLatitude;  double maxLat=Double.isNaN(this.maxLatitude) ? -Double.MAX_VALUE : this.maxLatitude;  double minLon=Double.isNaN(this.minLongitude) ? Double.MAX_VALUE : this.minLongitude;  double maxLon=Double.isNaN(this.maxLongitude) ? -Double.MAX_VALUE : this.maxLongitude;  for (int idx=0; idx < count; idx+=stride) {    float lon=array[idx];    float lat=array[idx + 1];    if (maxLat < lat) {      maxLat=lat;    }    if (minLat > lat) {      minLat=lat;    }    if (maxLon < lon) {      maxLon=lon;    }    if (minLon > lon) {      minLon=lon;    }  }  if (minLat < Double.MAX_VALUE) {    this.minLatitude=minLat;  }  if (maxLat > -Double.MAX_VALUE) {    this.maxLatitude=maxLat;  }  if (minLon < Double.MAX_VALUE) {    this.minLongitude=minLon;  }  if (maxLon > -Double.MAX_VALUE) {    this.maxLongitude=maxLon;  }  return this;}  }
class C{  public void queryForCustomDayStats(DateTime dateTime,String filename){  System.out.println("\n\n -> Querying Stats");  ExecutorService executor=Executors.newFixedThreadPool(100);  StatQueryResult result=new StatQueryResult(filename);  try {    _dbClient.queryTimeSeries(StatTimeSeries.class,dateTime,TimeSeriesMetadata.TimeBucket.HOUR,result,executor);    System.out.println(" --- Job Exceution for Querying Stats completed ---\n\n");    return;  } catch (  DatabaseException e) {    System.err.println("Exception Query " + e);    log.error("Exception Query ",e);  }}  }
class C{  @Override public void clear(){  try {    file.resizeFile(0);  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public synchronized void writeKey(CCacheOutputStream cos) throws IOException {  cos.write16(keyType);  cos.write16(keyType);  cos.write32(keyValue.length);  for (int i=0; i < keyValue.length; i++) {    cos.write8(keyValue[i]);  }}  }
class C{  public ObjectNode insertObject(int index){  ObjectNode n=objectNode();  _insert(index,n);  return n;}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image,int width,int height){  return isHeadless() ? new BufferedImage(width,height,image.getType()) : getGraphicsConfiguration().createCompatibleImage(width,height,image.getTransparency());}  }
class C{  public void transformValues(TObjectFunction<V,V> function){  V[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (isFull(values,i)) {      values[i]=wrapNull(function.execute(unwrapNull(values[i])));    }  }}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(octStr);  v.add(iterationCount);  if (keyLength != null) {    v.add(keyLength);  }  if (prf != null && !prf.equals(algid_hmacWithSHA1)) {    v.add(prf);  }  return new DERSequence(v);}  }
class C{  @Override public long ramBytesUsed(){  return BASE_RAM_BYTES_USED + ((long)docs.length << 2) + (scores == null ? 0 : ((long)scores.length << 2) + RamUsageEstimator.NUM_BYTES_ARRAY_HEADER);}  }
class C{  public LegendItem(String label,String description,String toolTipText,String urlText,boolean shapeVisible,Shape shape,boolean shapeFilled,Paint fillPaint,boolean shapeOutlineVisible,Paint outlinePaint,Stroke outlineStroke,boolean lineVisible,Shape line,Stroke lineStroke,Paint linePaint){  ParamChecks.nullNotPermitted(label,"label");  ParamChecks.nullNotPermitted(fillPaint,"fillPaint");  ParamChecks.nullNotPermitted(lineStroke,"lineStroke");  ParamChecks.nullNotPermitted(outlinePaint,"outlinePaint");  ParamChecks.nullNotPermitted(outlineStroke,"outlineStroke");  this.label=label;  this.labelPaint=null;  this.attributedLabel=null;  this.description=description;  this.shapeVisible=shapeVisible;  this.shape=shape;  this.shapeFilled=shapeFilled;  this.fillPaint=fillPaint;  this.fillPaintTransformer=new StandardGradientPaintTransformer();  this.shapeOutlineVisible=shapeOutlineVisible;  this.outlinePaint=outlinePaint;  this.outlineStroke=outlineStroke;  this.lineVisible=lineVisible;  this.line=line;  this.lineStroke=lineStroke;  this.linePaint=linePaint;  this.toolTipText=toolTipText;  this.urlText=urlText;}  }
class C{  public boolean assemblePolygon(S2Polygon polygon,List<S2Edge> unusedEdges){  List<S2Loop> loops=Lists.newArrayList();  boolean success=assembleLoops(loops,unusedEdges);  if (!options.getUndirectedEdges()) {    for (int i=0; i < loops.size(); ++i) {      loops.get(i).normalize();    }  }  if (options.getValidate() && !S2Polygon.isValid(loops)) {    if (unusedEdges != null) {      for (      S2Loop loop : loops) {        rejectLoop(loop,loop.numVertices(),unusedEdges);      }    }    return false;  }  polygon.init(loops);  return success;}  }
class C{  int remoteSend(byte[] data,int len) throws IOException {  return remoteTcp.send(data,len);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  protected void checkTreeWalking(BashAbstractProcessor processor) throws Exception {  PsiFile file=configure().getElement().getContainingFile();  file.processDeclarations(processor,ResolveState.initial(),null,file);  assertSingleVisitedElements(file);}  }
class C{  @Deprecated public static double haversinKilometers(double lat1,double lon1,double lat2,double lon2){  double h=haversinSortKey(lat1,lon1,lat2,lon2);  return TO_KILOMETERS * 2 * asin(Math.min(1,Math.sqrt(h * 0.5)));}  }
class C{  @Override public void perform(IR ir){  for (Enumeration<Instruction> e=ir.forwardInstrEnumerator(); e.hasMoreElements(); ) {    Instruction s=e.nextElement();    if (PutField.conforms(s)) {      LocationOperand l=PutField.getLocation(s);      RVMField f=l.getFieldRef().peekResolvedField();      if (f == null)       continue;      if (!isCandidate(f.getType()))       continue;      if (s.position().getMethod() != ir.method) {        continue;      }      Operand value=PutField.getValue(s);      if (value.isRegister()) {        if (value.asRegister().isPreciseType()) {          TypeReference type=value.asRegister().getType();          recordConcreteType(ir.method,f,type);        } else {          recordBottom(ir.method,f);        }      }    } else     if (PutStatic.conforms(s)) {      LocationOperand l=PutStatic.getLocation(s);      RVMField f=l.getFieldRef().peekResolvedField();      if (f == null)       continue;      if (!isCandidate(f.getType()))       continue;      if (s.position().getMethod() != ir.method) {        continue;      }      Operand value=PutStatic.getValue(s);      if (value.isRegister()) {        if (value.asRegister().isPreciseType()) {          TypeReference type=value.asRegister().getType();          recordConcreteType(ir.method,f,type);        } else {          recordBottom(ir.method,f);        }      }    }  }}  }
class C{  public static TypeReference newExceptionReference(int exceptionIndex){  return new TypeReference((THROWS << 24) | (exceptionIndex << 8));}  }
class C{  @Override public void actionPerformed(ActionEvent e){  FileDialog chooser=new FileDialog(frame,"Use a .png or .jpg extension",FileDialog.SAVE);  chooser.setVisible(true);  if (chooser.getFile() != null) {    save(chooser.getDirectory() + File.separator + chooser.getFile());  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void notationDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {  try {    if (fDTDHandler != null) {      String publicId=identifier.getPublicId();      String systemId=fResolveDTDURIs ? identifier.getExpandedSystemId() : identifier.getLiteralSystemId();      fDTDHandler.notationDecl(name,publicId,systemId);    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public DateTimeFormatter withDecimalStyle(DecimalStyle decimalStyle){  if (this.decimalStyle.equals(decimalStyle)) {    return this;  }  return new DateTimeFormatter(printerParser,locale,decimalStyle,resolverStyle,resolverFields,chrono,zone);}  }
class C{  public StepSwitcher(Context context){  super(context);  init();}  }
class C{  public void addComponentListener(ComponentListener cl){  super.addComponentListener(cl);  if (localHackList == null) {    localHackList=new ListenerSupport<ComponentListener>(this);  }  localHackList.add(cl);}  }
class C{  public WrapperDoubleMatrix2D(DoubleMatrix2D newContent){  if (newContent != null)   setUp(newContent.rows(),newContent.columns());  this.content=newContent;}  }
class C{  private void odsParseSheet(XML sheet){  final boolean ignoreTags=true;  XML[] rows=sheet.getChildren("table:table-row");  int rowIndex=0;  for (  XML row : rows) {    int rowRepeat=row.getInt("table:number-rows-repeated",1);    boolean rowNotNull=false;    XML[] cells=row.getChildren();    int columnIndex=0;    for (    XML cell : cells) {      int cellRepeat=cell.getInt("table:number-columns-repeated",1);      String cellData=ignoreTags ? cell.getString("office:value") : null;      if (cellData == null) {        int cellKids=cell.getChildCount();        if (cellKids != 0) {          XML[] paragraphElements=cell.getChildren("text:p");          if (paragraphElements.length != 1) {            for (            XML el : paragraphElements) {              System.err.println(el.toString());            }            throw new RuntimeException("found more than one text:p element");          }          XML textp=paragraphElements[0];          String textpContent=textp.getContent();          if (textpContent != null) {            cellData=textpContent;          } else {            XML[] textpKids=textp.getChildren();            StringBuffer cellBuffer=new StringBuffer();            for (            XML kid : textpKids) {              String kidName=kid.getName();              if (kidName == null) {                odsAppendNotNull(kid,cellBuffer);              } else               if (kidName.equals("text:s")) {                int spaceCount=kid.getInt("text:c",1);                for (int space=0; space < spaceCount; space++) {                  cellBuffer.append(' ');                }              } else               if (kidName.equals("text:span")) {                odsAppendNotNull(kid,cellBuffer);              } else               if (kidName.equals("text:a")) {                if (ignoreTags) {                  cellBuffer.append(kid.getString("xlink:href"));                } else {                  odsAppendNotNull(kid,cellBuffer);                }              } else {                odsAppendNotNull(kid,cellBuffer);                System.err.println(getClass().getName() + ": don't understand: " + kid);              }            }            cellData=cellBuffer.toString();          }        }      }      for (int r=0; r < cellRepeat; r++) {        if (cellData != null) {          setString(rowIndex,columnIndex,cellData);        }        columnIndex++;        if (cellData != null) {          rowNotNull=true;        }      }    }    if (rowNotNull && rowRepeat > 1) {      String[] rowStrings=getStringRow(rowIndex);      for (int r=1; r < rowRepeat; r++) {        addRow(rowStrings);      }    }    rowIndex+=rowRepeat;  }}  }
class C{  protected void createQuad1Quad234567QuadControls(){  quad9quad12345678=new RaptorWindowSashForm(windowComposite,SWT.HORIZONTAL,PreferenceKeys.APP_QUAD9_QUAD12345678_SASH_WEIGHTS);  quad9quad12345678.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));  folders[Quadrant.IX.ordinal()]=new RaptorTabFolder(quad9quad12345678,SWT.BORDER,Quadrant.IX);  quad1quad2345678=new RaptorWindowSashForm(quad9quad12345678,SWT.VERTICAL,PreferenceKeys.APP_QUAD1_QUAD2345678_SASH_WEIGHTS);  folders[Quadrant.I.ordinal()]=new RaptorTabFolder(quad1quad2345678,SWT.BORDER,Quadrant.I);  quad2345quad678Sash=new RaptorWindowSashForm(quad1quad2345678,SWT.VERTICAL,PreferenceKeys.APP_QUAD2345_QUAD678_SASH_WEIGHTS);  quad2quad3quad4quad5Sash=new RaptorWindowSashForm(quad2345quad678Sash,SWT.HORIZONTAL,PreferenceKeys.APP_QUAD2_QUAD3_QUAD4_QUAD5_SASH_WEIGHTS);  quad67quad8Sash=new RaptorWindowSashForm(quad2345quad678Sash,SWT.HORIZONTAL,PreferenceKeys.APP_QUAD67_QUAD8_SASH_WEIGHTS);  folders[Quadrant.II.ordinal()]=new RaptorTabFolder(quad2quad3quad4quad5Sash,SWT.BORDER,Quadrant.II);  folders[Quadrant.III.ordinal()]=new RaptorTabFolder(quad2quad3quad4quad5Sash,SWT.BORDER,Quadrant.III);  folders[Quadrant.IV.ordinal()]=new RaptorTabFolder(quad2quad3quad4quad5Sash,SWT.BORDER,Quadrant.IV);  folders[Quadrant.V.ordinal()]=new RaptorTabFolder(quad2quad3quad4quad5Sash,SWT.BORDER,Quadrant.V);  quad6quad7Sash=new RaptorWindowSashForm(quad67quad8Sash,SWT.VERTICAL,PreferenceKeys.APP_QUAD6_QUAD7_SASH_WEIGHTS);  folders[Quadrant.VI.ordinal()]=new RaptorTabFolder(quad6quad7Sash,SWT.BORDER,Quadrant.VI);  folders[Quadrant.VII.ordinal()]=new RaptorTabFolder(quad6quad7Sash,SWT.BORDER,Quadrant.VII);  folders[Quadrant.VIII.ordinal()]=new RaptorTabFolder(quad67quad8Sash,SWT.BORDER,Quadrant.VIII);}  }
class C{  public JTextArea(String text,int rows,int columns){  this(null,text,rows,columns);}  }
class C{  public <T extends Expression>Optional<T> positional(Class<T> expected){  if (args.isEmpty()) {    return Optional.empty();  }  return Optional.of(args.removeFirst().cast(expected));}  }
class C{  public V[] toArray(V[] arr){  return vars.values().toArray(arr);}  }
class C{  public void closeContextMenu(){  mWindow.closePanel(Window.FEATURE_CONTEXT_MENU);}  }
class C{  public WebApp webApp(){  return _webApp;}  }
class C{  void drawHexLayer(Point p,Graphics g,Color col,boolean outOfFOV){  drawHexLayer(p,g,col,outOfFOV,0);}  }
class C{  private void doFailTask(Class<? extends DataObject> clazz,URI id,String opId,ServiceCoded serviceCoded){  List<URI> ids=new ArrayList<URI>();  ids.add(id);  doFailTask(clazz,ids,opId,serviceCoded);}  }
class C{  public int addChild(int parent){  int child=super.addNodeRow();  addChildEdge(parent,child);  return child;}  }
class C{  public void putAsString(String key,Long value){  String strValue=value.toString();  super.put(key,strValue);}  }
class C{  @Override public void post(Runnable runnable){  if (runnable == null)   return;  TaskProxy.sHandler.post(runnable);}  }
class C{  public void widgetDefaultSelected(SelectionEvent e){  widgetSelected(e);}  }
class C{  void b2a1__b2a1b2(){  mv.visitInsn(DUP_X2);  mv.visitInsn(POP);  mv.visitInsn(DUP2_X1);}  }
class C{  public static boolean isCameraBackFacing(SettingsManager settingsManager,String moduleScope){  return settingsManager.isDefault(moduleScope,KEY_CAMERA_ID);}  }
class C{  public static <T>Seq<T> newSeq(T value){  Collection<T> collection=new ArrayList<>();  collection.add(value);  return new SeqImpl<>(collection);}  }
class C{  public static QueryPlan build(EventType[] typesPerStream,QueryGraph queryGraph,OuterJoinType optionalOuterJoinType,String[][][] uniqueIndexProps,TableMetadata[] tablesPerStream){  QueryPlanIndex[] indexSpecs=QueryPlanIndexBuilder.buildIndexSpec(queryGraph,typesPerStream,uniqueIndexProps);  QueryPlanNode[] execNodeSpecs=new QueryPlanNode[2];  TableLookupPlan lookupPlans[]=new TableLookupPlan[2];  lookupPlans[1]=NStreamQueryPlanBuilder.createLookupPlan(queryGraph,1,0,indexSpecs[0],typesPerStream,tablesPerStream[0]);  lookupPlans[0]=NStreamQueryPlanBuilder.createLookupPlan(queryGraph,0,1,indexSpecs[1],typesPerStream,tablesPerStream[1]);  execNodeSpecs[0]=new TableLookupNode(lookupPlans[0]);  execNodeSpecs[1]=new TableLookupNode(lookupPlans[1]);  if (optionalOuterJoinType != null) {    if ((optionalOuterJoinType.equals(OuterJoinType.LEFT)) || (optionalOuterJoinType.equals(OuterJoinType.FULL))) {      execNodeSpecs[0]=new TableOuterLookupNode(lookupPlans[0]);    }    if ((optionalOuterJoinType.equals(OuterJoinType.RIGHT)) || (optionalOuterJoinType.equals(OuterJoinType.FULL))) {      execNodeSpecs[1]=new TableOuterLookupNode(lookupPlans[1]);    }  }  return new QueryPlan(indexSpecs,execNodeSpecs);}  }
class C{  public boolean isIconBtn1(){  return isIconBtn1;}  }
class C{  public void translate(ConditionOperand c){switch (c.value) {case ConditionOperand.EQUAL:case ConditionOperand.CMPL_EQUAL:    value=EQUAL;  break;case ConditionOperand.NOT_EQUAL:case ConditionOperand.CMPL_NOT_EQUAL:value=NOT_EQUAL;break;case ConditionOperand.LESS:case ConditionOperand.LOWER:case ConditionOperand.CMPG_LESS:case ConditionOperand.CMPL_LESS:value=LESS;break;case ConditionOperand.LESS_EQUAL:case ConditionOperand.LOWER_EQUAL:case ConditionOperand.CMPG_LESS_EQUAL:case ConditionOperand.CMPL_LESS_EQUAL:value=LESS_EQUAL;break;case ConditionOperand.GREATER:case ConditionOperand.HIGHER:case ConditionOperand.CMPL_GREATER:case ConditionOperand.CMPG_GREATER:value=GREATER;break;case ConditionOperand.GREATER_EQUAL:case ConditionOperand.HIGHER_EQUAL:case ConditionOperand.CMPL_GREATER_EQUAL:case ConditionOperand.CMPG_GREATER_EQUAL:value=GREATER_EQUAL;break;default :org.jikesrvm.compilers.opt.OptimizingCompilerException.UNREACHABLE();}}  }
class C{  protected void sequence_LeftHandSideExpression_MemberExpression_ParameterizedPropertyAccessExpressionTail_TypeArguments(ISerializationContext context,ParameterizedPropertyAccessExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public ResultSetTableCellRenderer(){  this(new Color(223,223,223),new Color(192,192,192));}  }
class C{  public void clear(){  messages=Collections.emptyList();  isMessagesListMutable=false;  if (builders != null) {    for (    SingleFieldBuilder<MType,BType,IType> entry : builders) {      if (entry != null) {        entry.dispose();      }    }    builders=null;  }  onChanged();  incrementModCounts();}  }
class C{  public Response changePassword(PasswordChangeParam passwordChange,boolean bDryRun){  SysSvcEndPointLocator sysSvcEndPointLocator=new SysSvcEndPointLocator();  sysSvcEndPointLocator.setCoordinator(coordinator);  int attempts=0;  ClientResponse response=null;  while (attempts < MAX_CONFIG_RETRIES) {    _log.debug("change password attempt {}",++attempts);    AuthSvcInternalApiClientIterator sysSvcClientItr=new AuthSvcInternalApiClientIterator(sysSvcEndPointLocator,coordinator);    try {      if (sysSvcClientItr.hasNext()) {        if (bDryRun) {          _log.debug("change password dry run");          response=sysSvcClientItr.post(URI_VALIDATE_PASSWORD,passwordChange);        } else {          response=sysSvcClientItr.put(URI_CHANGE_PASSWORD,passwordChange);        }        _log.debug("change password response with status: " + response.getStatus());        break;      }    } catch (    Exception exception) {      _log.warn(exception.getMessage());      if (attempts == MAX_CONFIG_RETRIES - 1) {        throw exception;      }    }  }  Response.ResponseBuilder b=Response.status(response.getStatus());  if (!(response.getStatus() == ClientResponse.Status.NO_CONTENT.getStatusCode())) {    b.entity(response.getEntity(String.class));  }  return b.build();}  }
class C{  public boolean isWindow(){  return X_AD_Menu.ACTION_Window.equals(m_imageIndicator);}  }
class C{  public static void main(String[] args) throws Exception {  AbstractMultiLabelClassifier.evaluation(new MLCBMaD(),args);}  }
class C{  public ZookeeperConfigProvider(URI uri) throws Exception {  String connectString=uri.getHost() + ":" + (uri.getPort() == -1 ? 2181 : uri.getPort());  String serviceName=uri.getPath().split("/",2)[1];  client=CuratorFrameworkFactory.newClient(connectString,new RetryOneTime(1000));  client.start();  shutdownFunctions.add(null);  initProvider(client,serviceName);}  }
class C{  private void checkSame(String name,String propName,UUID rmtNodeId,Object rmtVal,Object locVal,String igfsName) throws IgniteCheckedException {  if (!F.eq(rmtVal,locVal))   throw new IgniteCheckedException(name + " should be the same on all nodes in grid for IGFS configuration " + "(fix configuration or set "+ "-D"+ IGNITE_SKIP_CONFIGURATION_CONSISTENCY_CHECK+ "=true system "+ "property ) [rmtNodeId="+ rmtNodeId+ ", rmt"+ propName+ "="+ rmtVal+ ", loc"+ propName+ "="+ locVal+ ", ggfName="+ igfsName+ ']');}  }
class C{  public ByteList VarInfo(ByteList bytes,int type_index,int value_index,int slot_index,int var_info){  if (show_bytecode) {    defns_out.write("\n      VarInfo type_index=" + type_index + " value_index="+ value_index+ " slot_index="+ slot_index+ " -> "+ var_info);  }  bytes=Int(bytes,slot_index);  bytes=Int(bytes,type_index);  bytes=Int(bytes,value_index);  return bytes;}  }
class C{  private static double computeCorrelationSum(double[][] points,double r){  double sum=0.0;  int n=points.length;  for (int i=0; i <= n - 2; i++) {    for (int j=i + 1; j <= n - 1; j++) {      if ((r - distance(points[i],points[j])) >= 0) {        sum+=1.0;      }    }  }  return sum / (n * (n - 1) / 2.0);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static XMLTree from(String xml){  return new XMLTree(xml.getBytes(UTF_8));}  }
class C{  @Override public void clearUndo(){  m_UndoList=new Vector<File>();}  }
class C{  public static DAOEntryLimit newInstance(){  final DAOEntryLimit returnInstance=new DAOEntryLimit();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  public void test_setEntry() throws Exception {  String type="DSA";  KeyStore keyTest=KeyStore.getInstance(KeyStore.getDefaultType());  keyTest.load(null,pssWord);  Certificate[] chain={new MyCertificate(type,testEncoding),new MyCertificate(type,testEncoding)};  DSAPrivateKey privateKey1=(DSAPrivateKey)KeyFactory.getInstance(type).generatePrivate(new DSAPrivateKeySpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"),new BigInteger("4")));  KeyStore.PasswordProtection pp=new KeyStore.PasswordProtection(pssWord);  KeyStore.PrivateKeyEntry pke=new KeyStore.PrivateKeyEntry(getPrivateKey(),chain);  KeyStore.PrivateKeyEntry pke1=new KeyStore.PrivateKeyEntry(privateKey1,chain);  try {    keyTest.setEntry("alias",pke,null);    assertFalse(StandardNames.IS_RI);  } catch (  KeyStoreException e) {    assertTrue(StandardNames.IS_RI);  }  keyTest.setEntry("alias",pke,pp);  KeyStore.PrivateKeyEntry pkeActual=(KeyStore.PrivateKeyEntry)keyTest.getEntry("alias",pp);  assertTrue(Arrays.equals(chain,pkeActual.getCertificateChain()));  assertEquals(getPrivateKey(),pkeActual.getPrivateKey());  assertEquals(new MyCertificate(type,testEncoding),pkeActual.getCertificate());  assertTrue(keyTest.entryInstanceOf("alias",KeyStore.PrivateKeyEntry.class));  keyTest.setEntry("alias",pke1,pp);  pkeActual=(KeyStore.PrivateKeyEntry)keyTest.getEntry("alias",pp);  assertTrue(Arrays.equals(chain,pkeActual.getCertificateChain()));  DSAPrivateKey actualPrivateKey=(DSAPrivateKey)pkeActual.getPrivateKey();  assertEquals(privateKey1.getX(),actualPrivateKey.getX());  assertEquals(privateKey1.getParams().getG(),actualPrivateKey.getParams().getG());  assertEquals(privateKey1.getParams().getP(),actualPrivateKey.getParams().getP());  assertEquals(privateKey1.getParams().getQ(),actualPrivateKey.getParams().getQ());  assertEquals(new MyCertificate(type,testEncoding),pkeActual.getCertificate());  assertTrue(keyTest.entryInstanceOf("alias",KeyStore.PrivateKeyEntry.class));  keyTest.setEntry("alias2",pke1,pp);  pkeActual=(KeyStore.PrivateKeyEntry)keyTest.getEntry("alias2",pp);  assertTrue(Arrays.equals(chain,pkeActual.getCertificateChain()));  actualPrivateKey=(DSAPrivateKey)pkeActual.getPrivateKey();  assertEquals(privateKey1.getX(),actualPrivateKey.getX());  assertEquals(privateKey1.getParams().getG(),actualPrivateKey.getParams().getG());  assertEquals(privateKey1.getParams().getP(),actualPrivateKey.getParams().getP());  assertEquals(privateKey1.getParams().getQ(),actualPrivateKey.getParams().getQ());  assertEquals(new MyCertificate(type,testEncoding),pkeActual.getCertificate());  assertTrue(keyTest.entryInstanceOf("alias2",KeyStore.PrivateKeyEntry.class));  try {    keyTest.setEntry(null,null,null);    fail();  } catch (  NullPointerException expected) {  }}  }
class C{  public String toStringHeader(){  return new ResultMatrixPlainText(this).toStringHeader();}  }
class C{  @Override public Attribute resolveToAttribute(String x,ActionAST node){  return rule.resolveToAttribute(x,node);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public SimpleSelect(final BitVector bitVector){  this.bitVector=bitVector;  this.bits=bitVector.bits();  final long length=bitVector.length();  numWords=(int)((length + 63) / 64);  long d=0;  for (int i=numWords; i-- != 0; )   d+=Long.bitCount(bits[i]);  onesPerInventory=1 << (log2OnesPerInventory=Fast.mostSignificantBit(length == 0 ? 1 : (int)((d * MAX_ONES_PER_INVENTORY + length - 1) / length)));  onesPerInventoryMask=onesPerInventory - 1;  final int inventorySize=(int)((d + onesPerInventory - 1) / onesPerInventory);  inventory=new long[inventorySize + 1];  d=0;  for (int i=0; i < numWords; i++)   for (int j=0; j < 64; j++) {    if (i * 64L + j >= length)     break;    if ((bits[i] & 1L << j) != 0) {      if ((d & onesPerInventoryMask) == 0)       inventory[(int)(d >>> log2OnesPerInventory)]=i * 64L + j;      d++;    }  }  numOnes=d;  inventory[inventorySize]=length;  log2LongwordsPerSubinventory=Math.min(MAX_LOG2_LONGWORDS_PER_SUBINVENTORY,Math.max(0,log2OnesPerInventory - 2));  log2OnesPerSub64=Math.max(0,log2OnesPerInventory - log2LongwordsPerSubinventory);  log2OnesPerSub16=Math.max(0,log2OnesPerSub64 - 2);  onesPerSub64=(1 << log2OnesPerSub64);  onesPerSub16=(1 << log2OnesPerSub16);  onesPerSub16Mask=onesPerSub16 - 1;  if (onesPerInventory > 1) {    d=0;    int ones;    long diff16=0, start=0, span=0;    int spilled=0, inventoryIndex=0;    for (int i=0; i < numWords; i++)     for (int j=0; j < 64; j++) {      if (i * 64L + j >= length)       break;      if ((bits[i] & 1L << j) != 0) {        if ((d & onesPerInventoryMask) == 0) {          inventoryIndex=(int)(d >>> log2OnesPerInventory);          start=inventory[inventoryIndex];          span=inventory[inventoryIndex + 1] - start;          ones=(int)Math.min(numOnes - d,onesPerInventory);          diff16+=Math.max(4,(ones + onesPerSub16 - 1) >>> log2OnesPerSub16);          if (span >= MAX_SPAN && onesPerSub64 > 1)           spilled+=ones;        }        d++;      }    }    final int subinventorySize=(int)((diff16 + 3) / 4);    final int exactSpillSize=spilled;    subinventory=new long[subinventorySize];    exactSpill=new long[exactSpillSize];    subinventory16=LongArrayBitVector.wrap(subinventory).asLongBigList(Short.SIZE);    int offset=0;    spilled=0;    d=0;    for (int i=0; i < numWords; i++)     for (int j=0; j < 64; j++) {      if (i * 64L + j >= length)       break;      if ((bits[i] & 1L << j) != 0) {        if ((d & onesPerInventoryMask) == 0) {          inventoryIndex=(int)(d >>> log2OnesPerInventory);          start=inventory[inventoryIndex];          span=inventory[inventoryIndex + 1] - start;          offset=0;        }        if (span < MAX_SPAN) {          if (ASSERTS)           assert i * 64L + j - start <= MAX_SPAN;          if ((d & onesPerSub16Mask) == 0) {            subinventory16.set((inventoryIndex << log2LongwordsPerSubinventory + 2) + offset++,i * 64L + j - start);          }        } else {          if (onesPerSub64 == 1) {            subinventory[(inventoryIndex << log2LongwordsPerSubinventory) + offset++]=i * 64L + j;          } else {            if ((d & onesPerInventoryMask) == 0) {              inventory[inventoryIndex]|=1L << 63;              subinventory[inventoryIndex << log2LongwordsPerSubinventory]=spilled;            }            exactSpill[spilled++]=i * 64L + j;          }        }        d++;      }    }  } else {    subinventory=exactSpill=LongArrays.EMPTY_ARRAY;    subinventory16=null;  }}  }
class C{  public JSONObject(){  this.map=new HashMap<String,Object>();}  }
class C{  public static boolean isIndependentPooledWorsleyFriston(List<IndependenceTest> independenceTests,Node x,Node y,List<Node> condSet){  double alpha=independenceTests.get(0).getAlpha();  double p=-1.0;  for (  IndependenceTest independenceTest : independenceTests) {    List<Node> localCondSet=new ArrayList<>();    if (missingVariable(x,y,condSet,independenceTest))     continue;    for (    Node node : condSet) {      localCondSet.add(independenceTest.getVariable(node.getName()));    }    independenceTest.isIndependent(independenceTest.getVariable(x.getName()),independenceTest.getVariable(y.getName()),localCondSet);    if (p == -1.0) {      p=independenceTest.getPValue();      continue;    }    double newp=independenceTest.getPValue();    if (newp > p) {      p=newp;    }  }  return (p > Math.pow(alpha,(1 / (double)independenceTests.size())));}  }
class C{  public Random(){  setSeed(System.currentTimeMillis() + System.identityHashCode(this));}  }
class C{  private static int readCode(boolean[] rawbits,int startIndex,int length){  int res=0;  for (int i=startIndex; i < startIndex + length; i++) {    res<<=1;    if (rawbits[i]) {      res|=0x01;    }  }  return res;}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  public Ion(List<Graph> pags){  for (  Graph pag : pags) {    this.input.add(pag);  }  for (  Graph pag : input) {    for (    Node node : pag.getNodes()) {      if (!variables.contains(node.getName())) {        this.variables.add(node.getName());      }    }    for (    Triple triple : getAllTriples(pag)) {      if (pag.isDefNoncollider(triple.getX(),triple.getY(),triple.getZ())) {        pag.addUnderlineTriple(triple.getX(),triple.getY(),triple.getZ());      }    }  }}  }
class C{  public void registerFactory(String name,Factory factory){  registerFactory(name,registrationGroupName,factory);}  }
class C{  public LinkedList<Patch> patch_make(String text1,String text2){  if (text1 == null || text2 == null) {    throw new IllegalArgumentException("Null inputs. (patch_make)");  }  LinkedList<Diff> diffs=diff_main(text1,text2,true);  if (diffs.size() > 2) {    diff_cleanupSemantic(diffs);    diff_cleanupEfficiency(diffs);  }  return patch_make(text1,diffs);}  }
class C{  public void release(boolean majorGC){  sweepAllBlocks(majorGC);}  }
class C{  private Queue createQueueForSubscription(String topic,int qos) throws Exception {  String address=MQTTUtil.convertMQTTAddressFilterToCore(topic);  SimpleString queue=getQueueNameForTopic(address);  Queue q=session.getServer().locateQueue(queue);  if (q == null) {    q=session.getServerSession().createQueue(new SimpleString(address),queue,managementFilter,false,MQTTUtil.DURABLE_MESSAGES && qos >= 0);  }  return q;}  }
class C{  public MapObject(Object id,Drawable drawable,Point position,Point pivotPoint){  this(id,drawable,position.x,position.y,pivotPoint.x,pivotPoint.y);}  }
class C{  public BillingApplicationException(){}  }
class C{  public AttributeWeights(ExampleSet exampleSet){  for (  Attribute attribute : exampleSet.getAttributes()) {    setWeight(attribute.getName(),1.0d);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.498 -0500",hash_original_method="EF115B092B0444968DFDE421B1D070CE",hash_generated_method="C7D761A604DCC217929B7918AB961994") public void connect(Context srcContext,Handler srcHandler,Class<?> klass){  connect(srcContext,srcHandler,klass.getPackage().getName(),klass.getName());}  }
class C{  public LongHashSet(){  this(DEFAULT_CAPACITY,DEFAULT_FILLFACTOR);}  }
class C{  private boolean makeAutoShuffleList(){  Cursor cursor=null;  try {    cursor=getContentResolver().query(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,new String[]{MediaStore.Audio.Media._ID},MediaStore.Audio.Media.IS_MUSIC + "=1",null,null);    if (cursor == null || cursor.getCount() == 0) {      return false;    }    final int len=cursor.getCount();    final long[] list=new long[len];    for (int i=0; i < len; i++) {      cursor.moveToNext();      list[i]=cursor.getLong(0);    }    mAutoShuffleList=list;    return true;  } catch (  final RuntimeException ignored) {  } finally {    if (cursor != null) {      cursor.close();    }  }  return false;}  }
class C{  public void clear(){  data_.clear();  addKnownRates();}  }
class C{  @DSComment("exception") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:08.257 -0500",hash_original_method="1BAAD892782075B201BE55BD9DAC535A",hash_generated_method="AA9F9CC55712E63E74CB29634AA09FCD") public MalformedURLException(String detailMessage){  super(detailMessage);}  }
class C{  private void action_treeAdd(ListItem item){  log.info("VTreeMaintenance.action_treeAdd " + item);  if (item != null) {  }}  }
class C{  static public void call(int dstAddrReg,int cReg,int nStartReg,int cLength,int nEndReg){  int dstAddr=getRegisterValue(dstAddrReg);  int c=getRegisterValue(cReg);  int nStart=getRegisterValue(nStartReg);  int nEnd=getRegisterValue(nEndReg);  int n=nEnd - nStart;  if (n == 0) {    return;  }  if (cLength == 2) {    if ((c & 0xFF) == ((c >> 8) & 0xFF)) {      getMemory().memsetWithVideoCheck(dstAddr,(byte)c,n * 2);    } else {      Memory mem=getMemory();      int value32=(c & 0xFFFF) | (c << 16);      short value16=(short)(c & 0xFFFF);      if (n > 0 && (dstAddr & 3) != 0) {        mem.write16(dstAddr,value16);        dstAddr+=2;        n--;      }      IMemoryWriter memoryWriter=MemoryWriter.getMemoryWriter(dstAddr,n * 2,4);      for (int i=0; i < n; i+=2, dstAddr+=4) {        memoryWriter.writeNext(value32);      }      memoryWriter.flush();      if ((n & 1) != 0) {        mem.write16(dstAddr,value16);      }    }  } else   if (cLength == 4) {    if ((c & 0xFF) == ((c >> 8) & 0xFF) && (c & 0xFFFF) == ((c >> 16) & 0xFFFF)) {      getMemory().memsetWithVideoCheck(dstAddr,(byte)c,n * 4);    } else {      IMemoryWriter memoryWriter=MemoryWriter.getMemoryWriter(dstAddr,n * 4,4);      for (int i=0; i < n; i++) {        memoryWriter.writeNext(c);      }      memoryWriter.flush();    }  } else {    Compiler.log.error("Memset.call: unsupported cLength=0x" + Integer.toHexString(cLength));  }  setRegisterValue(dstAddrReg,getRegisterValue(dstAddrReg) + n * cLength);  setRegisterValue(nStartReg,nEnd);}  }
class C{  @SuppressWarnings("BooleanMethodIsAlwaysInverted") public boolean isCursorBlinking(){  return cursorBlinking;}  }
class C{  public void PCDataAdded(String systemId,int lineNr){}  }
class C{  public Server(PluginContext context,AtomicCounter sequencer,THL thl) throws ReplicatorException {  this.context=context;  this.thl=thl;  this.storeName=thl.getName();  String uriString=thl.getStorageListenerUri();  URI uri;  try {    uri=new URI(uriString);  } catch (  URISyntaxException e) {    throw new THLException("Malformed URI: " + uriString);  }  String protocol=uri.getScheme();  if (THL.PLAINTEXT_URI_SCHEME.equals(protocol)) {    this.useSSL=false;  } else   if (THL.SSL_URI_SCHEME.equals(protocol)) {    this.useSSL=true;  } else {    throw new THLException("Unsupported scheme " + protocol);  }  host=uri.getHost();  if ((port=uri.getPort()) == -1) {    port=2112;  }}  }
class C{  private void closeLogStream(){  try {    WriteStream os=_os;    _os=null;    if (os != null)     os.close();  } catch (  Throwable e) {  }  try {    WriteStream zipOut=_zipOut;    _zipOut=null;    if (zipOut != null)     zipOut.close();  } catch (  Throwable e) {  }}  }
class C{  private void saveTableVersion(int t_version){  Context ctx=mDb.getContext();  SharedPreferences tableVersions=ctx.getSharedPreferences(PREFS_TABLE_VERSION,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=tableVersions.edit();  editor.putInt(mTableName,t_version);  editor.commit();}  }
class C{  public boolean isTerminal(){  return terminal;}  }
class C{  public PlayerHasHarvestedNumberOfItemsCondition(int number,String... items){  itemMinedList=new ArrayList<String>();  if (items != null) {    for (    String item : items) {      itemMinedList.add(item);    }  }  quantity=number;}  }
class C{  public List<Action> search(Problem problem,Queue<Node> frontier){  assert (problem instanceof BidirectionalProblem);  this.frontier=frontier;  clearInstrumentation();  explored.get(ORG_P_IDX).clear();  explored.get(REV_P_IDX).clear();  Problem orgP=((BidirectionalProblem)problem).getOriginalProblem();  Problem revP=((BidirectionalProblem)problem).getReverseProblem();  ExtendedNode initStateNode;  initStateNode=new ExtendedNode(nodeExpander.createRootNode(orgP.getInitialState()),ORG_P_IDX);  goalStateNode=new ExtendedNode(nodeExpander.createRootNode(revP.getInitialState()),REV_P_IDX);  if (orgP.getInitialState().equals(revP.getInitialState()))   return getSolution(orgP,initStateNode,goalStateNode);  addToFrontier(initStateNode);  addToFrontier(goalStateNode);  while (!isFrontierEmpty() && !CancelableThread.currIsCanceled()) {    ExtendedNode nodeToExpand=(ExtendedNode)removeFromFrontier();    ExtendedNode nodeFromOtherProblem;    if (!earlyGoalTest && (nodeFromOtherProblem=getCorrespondingNodeFromOtherProblem(nodeToExpand)) != null)     return getSolution(orgP,nodeToExpand,nodeFromOtherProblem);    for (    Node s : nodeExpander.expand(nodeToExpand,problem)) {      ExtendedNode successor=new ExtendedNode(s,nodeToExpand.getProblemIndex());      if (!isReverseActionTestEnabled || nodeToExpand.getProblemIndex() == ORG_P_IDX || getReverseAction(orgP,successor) != null) {        if (earlyGoalTest && (nodeFromOtherProblem=getCorrespondingNodeFromOtherProblem(successor)) != null)         return getSolution(orgP,successor,nodeFromOtherProblem);        addToFrontier(successor);      }    }  }  return SearchUtils.failure();}  }
class C{  public void update(byte input){  digest.update(input);}  }
class C{  public void updateLayerStatus(LayerStatusEvent evt){switch (evt.getStatus()) {case LayerStatusEvent.START_WORKING:    onoffButton.setSelectedIcon(layerWorking);  break;case LayerStatusEvent.FINISH_WORKING:onoffButton.setSelectedIcon(layerDone);break;}}  }
class C{  public String replace(char oldChar,char newChar){  int index=indexOf(oldChar,0);  if (index == -1) {    return this;  }  char[] buffer=new char[count];  System.arraycopy(value,offset,buffer,0,count);  do {    buffer[index++]=newChar;  } while ((index=indexOf(oldChar,index)) != -1);  return new String(0,count,buffer);}  }
class C{  protected void unhandledMessage(Message msg){  if (mSmHandler.mDbg)   loge(" - unhandledMessage: msg.what=" + msg.what);}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  public String execute() throws Exception {  String forward=RESULT_SEARCH_NO_DATA;  try {    this.createChart();    forward=SUCCESS;  } catch (  ControllerException e) {    this.setPageMessage(e.getMessage().toString());  }catch (  ServiceException e) {    this.setPageMessage(e.getMessage().toString());  }catch (  Exception e) {    e.printStackTrace();    this.setPageMessage(e.getMessage().toString());  }  return forward;}  }
class C{  public boolean validateWithFillDefault() throws ParallelTaskInvalidException {  if (this.targetHostMeta.getHosts().isEmpty()) {    throw new ParallelTaskInvalidException("Empty targetHosts! Please set target hosts and try again...return..");  }  if (requestProtocol == null) {    requestProtocol=RequestProtocol.HTTP;    logger.info("USE DEFAULT HTTP PROTOCOL: Missing Protocol HTTP/HTTPS. SET protocol as default HTTP");  }  if (this.getConcurrency() <= 0 || this.getConcurrency() > ParallecGlobalConfig.maxCapacity) {    logger.info("USE DEFAULT CONCURRENCY: User did not specify max concurrency " + "or its out of max allowed capacity: " + ParallecGlobalConfig.concurrencyDefault);    this.setConcurrency(ParallecGlobalConfig.concurrencyDefault);  }  if (this.config == null) {    logger.info("USE DEFAULT CONFIG: User did not specify" + " config for task/actor timeout etc. ");    this.config=new ParallelTaskConfig();  }  if (this.requestProtocol == RequestProtocol.SSH) {    this.sshMeta.validation();    if (this.getConcurrency() > ParallecGlobalConfig.concurrencySshLimit) {      logger.info("SSH CONCURRENCY LIMIT is lower. Apply value as: " + ParallecGlobalConfig.concurrencySshLimit);      this.setConcurrency(ParallecGlobalConfig.concurrencySshLimit);    }    if (this.httpMeta.isPollable())     throw new ParallelTaskInvalidException("Not support pollable job with SSH.");    this.httpMeta.initValuesNa();    this.tcpMeta=null;    this.pingMeta=null;    this.udpMeta=null;  } else   if (this.requestProtocol == RequestProtocol.PING) {    if (this.httpMeta.isPollable())     throw new ParallelTaskInvalidException("Not support pollable job with PING.");    this.httpMeta.initValuesNa();    this.pingMeta.validation();    this.sshMeta=null;    this.tcpMeta=null;    this.udpMeta=null;  } else   if (this.requestProtocol == RequestProtocol.TCP) {    if (this.httpMeta.isPollable())     throw new ParallelTaskInvalidException("Not support pollable job with TCP.");    this.httpMeta.initValuesNa();    this.tcpMeta.validation();    this.sshMeta=null;    this.pingMeta=null;    this.udpMeta=null;  } else   if (this.requestProtocol == RequestProtocol.UDP) {    if (this.httpMeta.isPollable())     throw new ParallelTaskInvalidException("Not support pollable job with UDP.");    this.httpMeta.initValuesNa();    this.udpMeta.validation();    this.tcpMeta=null;    this.sshMeta=null;    this.pingMeta=null;  } else {    this.httpMeta.validation();    this.sshMeta=null;    this.tcpMeta=null;    this.pingMeta=null;    this.udpMeta=null;  }  return true;}  }
class C{  public boolean isTable(long arc){switch ((int)arc) {default :    break;}return false;}  }
class C{  public ImageEffectEvent(String image,boolean attached){  super(Events.IMAGE);  put(IMAGE_ATTR,image);  if (attached) {    put(ATTACH_ATTR,"");  }}  }
class C{  public String invokeAPI(String path,String method,List<Pair> queryParams,Object body,Map<String,String> headerParams,Map<String,String> formParams,String accept,String contentType,String[] authNames) throws ApiException {  updateParamsForAuth(authNames,queryParams,headerParams);  Client client=getClient();  StringBuilder b=new StringBuilder();  b.append("?");  if (queryParams != null) {    for (    Pair queryParam : queryParams) {      if (!queryParam.getName().isEmpty()) {        b.append(escapeString(queryParam.getName()));        b.append("=");        b.append(escapeString(queryParam.getValue()));        b.append("&");      }    }  }  String querystring=b.substring(0,b.length() - 1);  Builder builder;  if (accept == null)   builder=client.resource(basePath + path + querystring).getRequestBuilder(); else   builder=client.resource(basePath + path + querystring).accept(accept);  for (  String key : headerParams.keySet()) {    builder=builder.header(key,headerParams.get(key));  }  for (  String key : defaultHeaderMap.keySet()) {    if (!headerParams.containsKey(key)) {      builder=builder.header(key,defaultHeaderMap.get(key));    }  }  ClientResponse response=null;  if ("GET".equals(method)) {    response=(ClientResponse)builder.get(ClientResponse.class);  } else   if ("POST".equals(method)) {    if (contentType.startsWith("application/x-www-form-urlencoded")) {      String encodedFormParams=this.getXWWWFormUrlencodedParams(formParams);      response=builder.type(contentType).post(ClientResponse.class,encodedFormParams);    } else     if (body == null) {      response=builder.post(ClientResponse.class,null);    } else     if (body instanceof FormDataMultiPart) {      response=builder.type(contentType).post(ClientResponse.class,body);    } else     response=builder.type(contentType).post(ClientResponse.class,serialize(body));  } else   if ("PUT".equals(method)) {    if ("application/x-www-form-urlencoded".equals(contentType)) {      String encodedFormParams=this.getXWWWFormUrlencodedParams(formParams);      response=builder.type(contentType).put(ClientResponse.class,encodedFormParams);    } else     if (body == null) {      response=builder.put(ClientResponse.class,serialize(body));    } else {      response=builder.type(contentType).put(ClientResponse.class,serialize(body));    }  } else   if ("DELETE".equals(method)) {    if ("application/x-www-form-urlencoded".equals(contentType)) {      String encodedFormParams=this.getXWWWFormUrlencodedParams(formParams);      response=builder.type(contentType).delete(ClientResponse.class,encodedFormParams);    } else     if (body == null) {      response=builder.delete(ClientResponse.class);    } else {      response=builder.type(contentType).delete(ClientResponse.class,serialize(body));    }  } else {    throw new ApiException(500,"unknown method type " + method);  }  if (response.getStatusInfo() == ClientResponse.Status.NO_CONTENT) {    return null;  } else   if (response.getStatusInfo().getFamily() == Family.SUCCESSFUL) {    if (response.hasEntity()) {      return (String)response.getEntity(String.class);    } else {      return "";    }  } else {    String message="error";    String respBody=null;    if (response.hasEntity()) {      try {        respBody=String.valueOf(response.getEntity(String.class));        message=respBody;      } catch (      RuntimeException e) {      }    }    throw new ApiException(response.getStatusInfo().getStatusCode(),message,response.getHeaders(),respBody);  }}  }
class C{  @Override public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("Normalizes all attributes proportional to their respective total sum. Attributes sums: \n");  for (  Entry<String,Double> entry : attributeSums.entrySet()) {    buffer.append(entry.getKey() + ": " + entry.getValue().doubleValue()+ "\n");  }  return buffer.toString();}  }
class C{  public WriteMemoryReply(final int packetId,final int errorCode){  super(packetId,errorCode);}  }
class C{  private boolean isQuoted(String text){  text=text.trim();  return text.length() > 1 && text.charAt(0) == '"' && text.charAt(text.length() - 1) == '"';}  }
class C{  public long ramBytesUsed(){  return bytesUsed.get();}  }
class C{  void write(ByteCodeWriter out) throws IOException {  out.write(ConstantPool.CP_FLOAT);  out.writeFloat(_value);}  }
class C{  protected void sequence_Access(ISerializationContext context,Access semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public T caseModel(Model object){  return null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(isSupported11.class,args);}  }
class C{  @Override public void delete(int operatorId,long windowId) throws IOException {  if (!getStore().isConnected()) {    getStore().connect();  }  try {    getStore().remove(generateKey(operatorId,windowId));    logger.debug("deleted object from store key {} region {}",generateKey(operatorId,windowId));  } catch (  Exception ex) {    throw new RuntimeException(ex);  }}  }
class C{  final public boolean isTextIndex(){  return textIndex;}  }
class C{  private static int unitIndex(int bitIndex){  return bitIndex >> ADDRESS_BITS_PER_UNIT;}  }
class C{  public static byte[] calculateDigest(String algorithm,InputStream data) throws OperatorCreationException, IOException {  DigestCalculator dc=createDigestCalculator(algorithm);  return calculateDigest(dc,data);}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (fv != null) {    return fv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  @Nullable @ObjectiveCName("findDownloadedDescriptorWithFileId:") public String findDownloadedDescriptor(long fileId){  return modules.getFilesModule().getDownloadedDescriptor(fileId);}  }
class C{  private void showMessage(String number,String order){}  }
class C{  public static MultisigTransaction createMultisigTransferWithThreeSignatures(){  final MultisigTransaction multisig=createMultisigTransfer();  IntStream.range(0,3).forEach(null);  return multisig;}  }
class C{  public static String flagNames(long flags){  return Flags.toString(flags & ExtendedStandardFlags).trim();}  }
class C{  protected final void _configAndWriteValue(JsonGenerator jgen,Object value) throws IOException, JsonGenerationException, JsonMappingException {  if (_prettyPrinter != null) {    PrettyPrinter pp=_prettyPrinter;    jgen.setPrettyPrinter((pp == NULL_PRETTY_PRINTER) ? null : pp);  } else   if (_config.isEnabled(SerializationConfig.Feature.INDENT_OUTPUT)) {    jgen.useDefaultPrettyPrinter();  }  if (_schema != null) {    jgen.setSchema(_schema);  }  if (_config.isEnabled(SerializationConfig.Feature.CLOSE_CLOSEABLE) && (value instanceof Closeable)) {    _configAndWriteCloseable(jgen,value,_config);    return;  }  boolean closed=false;  try {    if (_rootType == null) {      _provider.serializeValue(_config,jgen,value,_serializerFactory);    } else {      _provider.serializeValue(_config,jgen,value,_rootType,_serializerFactory);    }    closed=true;    jgen.close();  }  finally {    if (!closed) {      try {        jgen.close();      } catch (      IOException ioe) {      }    }  }}  }
class C{  public void removeAllPhotos(){  photos.clear();}  }
class C{  public void attrAdded(Attr node,String newv){  if (!changing) {    valid=false;  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public Value read(Type type,NodeMap node) throws Exception {  Node entry=node.remove(label);  Class expect=type.getType();  if (expect.isArray()) {    expect=expect.getComponentType();  }  if (entry != null) {    String name=entry.getValue();    expect=loader.load(name);  }  return readInstance(type,expect,node);}  }
class C{  private boolean isConnected(){  return (pclient == null ? false : pclient.isConnected());}  }
class C{  public void write(OutStream out) throws IOException {  int flags=0;  if (noMultiplePlay) {    flags+=1;  }  if (stopPlaying) {    flags+=2;  }  out.writeUBits(4,flags);  boolean hasEnvelope=(envelope != null && envelope.length > 0);  boolean hasLoops=(loopCount > 1);  boolean hasOutPoint=(outPoint >= 0);  boolean hasInPoint=(inPoint >= 0);  flags=0;  if (hasEnvelope) {    flags+=8;  }  if (hasLoops) {    flags+=4;  }  if (hasOutPoint) {    flags+=2;  }  if (hasInPoint) {    flags+=1;  }  out.writeUBits(4,flags);  if (hasInPoint) {    out.writeUI32(inPoint);  }  if (hasOutPoint) {    out.writeUI32(outPoint);  }  if (hasLoops) {    out.writeUI16(loopCount);  }  if (hasEnvelope) {    out.writeUI8(envelope.length);    for (int i=0; i < envelope.length; i++) {      out.writeUI32(envelope[i].mark44);      out.writeUI16(envelope[i].level0);      out.writeUI16(envelope[i].level1);    }  }}  }
class C{  private void layoutMenu(){  if (mMenuSideEnum == MenuSideEnum.ARC_RIGHT) {    cx=0 + menuMargin;    cy=getMeasuredHeight() - fabMenu.getMeasuredHeight() - menuMargin;  } else {    cx=getMeasuredWidth() - fabMenu.getMeasuredWidth() - menuMargin;    cy=getMeasuredHeight() - fabMenu.getMeasuredHeight() - menuMargin;  }  fabMenu.layout(cx,cy,cx + fabMenu.getMeasuredWidth(),cy + fabMenu.getMeasuredHeight());}  }
class C{  public void paintScrollBarTrackBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  public ST createSingleton(Token templateToken){  String template;  if (templateToken.getType() == GroupParser.BIGSTRING || templateToken.getType() == GroupParser.BIGSTRING_NO_NL) {    template=Misc.strip(templateToken.getText(),2);  } else {    template=Misc.strip(templateToken.getText(),1);  }  CompiledST impl=compile(getFileName(),null,null,template,templateToken);  ST st=createStringTemplateInternally(impl);  st.groupThatCreatedThisInstance=this;  st.impl.hasFormalArgs=false;  st.impl.name=ST.UNKNOWN_NAME;  st.impl.defineImplicitlyDefinedTemplates(this);  return st;}  }
class C{  private static double calculate_MDEF_norm(Node sn,Node cg){  long sq=sn.getSquareSum(cg.getLevel() - sn.getLevel());  if (sq == sn.getCount()) {    return 0.0;  }  long cb=sn.getCubicSum(cg.getLevel() - sn.getLevel());  double n_hat=(double)sq / sn.getCount();  double sig_n_hat=java.lang.Math.sqrt(cb * sn.getCount() - (sq * sq)) / sn.getCount();  if (sig_n_hat < Double.MIN_NORMAL) {    return 0.0;  }  double mdef=n_hat - cg.getCount();  return mdef / sig_n_hat;}  }
class C{  protected S_DefinitionImpl(){  super();}  }
class C{  public int deleteAllRemoteFiles(){  if (!isDBAvailable())   return 0;  SQLiteDatabase db=getOpenHelper().getWritableDatabase();  write.lock();  try {    db.delete(TABLE_REMOTEFILE2ARTICLE,null,null);    int count=db.delete(TABLE_REMOTEFILES,null,null);    ContentValues cv=new ContentValues();    cv.putNull("cachedImages");    db.update(TABLE_ARTICLES,cv,"cachedImages IS NOT NULL",null);    return count;  }  finally {    write.unlock();  }}  }
class C{  private static void reportHistogram(){  final Histogram histogram=registry.histogram(APP_PREFIX.tagged("what","response-size").tagged("endpoint","/v1/content"));  final long responseSize=1000;  histogram.update(responseSize);}  }
class C{  public Shape createScrollButtonApart(int x,int y,int w,int h){  path.reset();  path.moveTo(x,y);  path.lineTo(x,y + h);  path.lineTo(x + w,y + h);  addScrollGapPath(x,y,w,h,true);  path.closePath();  return path;}  }
class C{  public void overrideDuration(int duration){  overriddenDuration=duration;}  }
class C{  public DcwCrossTileID(BinaryFile in) throws FormatException, EOFException {  int format;  try {    format=in.read();  } catch (  IOException ioe) {    throw new FormatException(ioe.getMessage());  }  if (format == -1) {    throw new EOFException();  }  try {    currentTileKey=readIntegerByKey(in,format >> 6);    nextTileID=readIntegerByKey(in,format >> 4);    nextTileKey=readIntegerByKey(in,format >> 2);    readIntegerByKey(in,format);  } catch (  EOFException e) {    throw new FormatException("DcwCrossTileID: unexpected EOD " + e.getMessage());  }}  }
class C{  private static boolean areEquivalentParameters(final Class<?>[] expectedTypes,final Class<?>[] givenTypes){  if (expectedTypes.length == 0) {    return givenTypes.length == 0;  }  if (givenTypes.length != expectedTypes.length) {    return false;  }  for (int idx=0; idx < expectedTypes.length; idx++) {    if (!isAssignableFrom(expectedTypes[idx],givenTypes[idx])) {      return false;    }  }  return true;}  }
class C{  @Override @Nullable public ECKey findKeyFromPubHash(byte[] pubkeyHash){  keyChainGroupLock.lock();  try {    return keyChainGroup.findKeyFromPubHash(pubkeyHash);  }  finally {    keyChainGroupLock.unlock();  }}  }
class C{  @Override public String toString(){  return String.format("Memory Section [%s - %s]",getStart().toHexString(),getEnd().toHexString());}  }
class C{  public UTXO(Sha256Hash hash,long index,Coin value,int height,boolean coinbase,Script script,String address){  this(hash,index,value,height,coinbase,script);  this.address=address;}  }
class C{  void error(String msg){  System.err.println("Error: " + msg);  errors++;}  }
class C{  public static <T>T checkNotNull(T reference,String message){  if (reference == null) {    throw new NullPointerException(message);  }  return reference;}  }
class C{  public void init(SecureRandom random) throws IllegalArgumentException {  if (random != null) {    this.random=random;  } else {    this.random=new SecureRandom();  }}  }
class C{  public void clearParameters(){synchronized (m_reentryGuard) {    VariableStack varstack=new VariableStack();    m_xcontext.setVarStack(varstack);    m_userParams=null;  }}  }
class C{  protected static void addNodeActionFormList(int id,String name,String code,String fullname,Element parent){  Element node=parent.addElement(XML_NODE_TEXT);  node.addElement(XML_ID_TEXT).addText(Integer.toString(id));  node.addElement(XML_NAME_TEXT).add(DocumentHelper.createCDATA(name));  node.addElement(XML_CODELOWER_TEXT).add(DocumentHelper.createCDATA(code));  node.addElement(XML_FULLNAMELOWER_TEXT).add(DocumentHelper.createCDATA(fullname));}  }
class C{  MultiplexInputStream(ConnectionMultiplexer manager,MultiplexConnectionInfo info,int bufferLength){  this.manager=manager;  this.info=info;  buffer=new byte[bufferLength];  waterMark=bufferLength / 2;}  }
class C{  private static boolean wasClicked(FacesContext context,UIComponent component,String clientId){  if (clientId == null) {    clientId=component.getClientId(context);  }  if (context.getPartialViewContext().isAjaxRequest()) {    return BEHAVIOR_SOURCE_PARAM.getValue(context).contains(clientId);  } else {    Map<String,String> requestParameterMap=context.getExternalContext().getRequestParameterMap();    if (requestParameterMap.get(clientId) == null) {      if (RenderKitUtils.isPartialOrBehaviorAction(context,clientId)) {        return true;      }      StringBuilder builder=new StringBuilder(clientId);      String xValue=builder.append(".x").toString();      builder.setLength(clientId.length());      String yValue=builder.append(".y").toString();      return (requestParameterMap.get(xValue) != null && requestParameterMap.get(yValue) != null);    }    return true;  }}  }
class C{  public TypeDeclaration newTypeDeclaration(){  TypeDeclaration result=new TypeDeclaration(this);  result.setInterface(false);  return result;}  }
class C{  protected void drawTickMarksHorizontal(Graphics2D g2,AxisState state,Rectangle2D dataArea,RectangleEdge edge){  List ticks=new ArrayList();  double x0;  double y0=state.getCursor();  double insideLength=getTickMarkInsideLength();  double outsideLength=getTickMarkOutsideLength();  RegularTimePeriod t=createInstance(this.majorTickTimePeriodClass,this.first.getStart(),getTimeZone(),this.locale);  long t0=t.getFirstMillisecond();  Line2D inside=null;  Line2D outside=null;  long firstOnAxis=getFirst().getFirstMillisecond();  long lastOnAxis=getLast().getLastMillisecond() + 1;  while (t0 <= lastOnAxis) {    ticks.add(new NumberTick(Double.valueOf(t0),"",TextAnchor.CENTER,TextAnchor.CENTER,0.0));    x0=valueToJava2D(t0,dataArea,edge);    if (edge == RectangleEdge.TOP) {      inside=new Line2D.Double(x0,y0,x0,y0 + insideLength);      outside=new Line2D.Double(x0,y0,x0,y0 - outsideLength);    } else     if (edge == RectangleEdge.BOTTOM) {      inside=new Line2D.Double(x0,y0,x0,y0 - insideLength);      outside=new Line2D.Double(x0,y0,x0,y0 + outsideLength);    }    if (t0 >= firstOnAxis) {      g2.setPaint(getTickMarkPaint());      g2.setStroke(getTickMarkStroke());      g2.draw(inside);      g2.draw(outside);    }    if (this.minorTickMarksVisible) {      RegularTimePeriod tminor=createInstance(this.minorTickTimePeriodClass,new Date(t0),getTimeZone(),this.locale);      long tt0=tminor.getFirstMillisecond();      while (tt0 < t.getLastMillisecond() && tt0 < lastOnAxis) {        double xx0=valueToJava2D(tt0,dataArea,edge);        if (edge == RectangleEdge.TOP) {          inside=new Line2D.Double(xx0,y0,xx0,y0 + this.minorTickMarkInsideLength);          outside=new Line2D.Double(xx0,y0,xx0,y0 - this.minorTickMarkOutsideLength);        } else         if (edge == RectangleEdge.BOTTOM) {          inside=new Line2D.Double(xx0,y0,xx0,y0 - this.minorTickMarkInsideLength);          outside=new Line2D.Double(xx0,y0,xx0,y0 + this.minorTickMarkOutsideLength);        }        if (tt0 >= firstOnAxis) {          g2.setPaint(this.minorTickMarkPaint);          g2.setStroke(this.minorTickMarkStroke);          g2.draw(inside);          g2.draw(outside);        }        tminor=tminor.next();        tminor.peg(this.calendar);        tt0=tminor.getFirstMillisecond();      }    }    t=t.next();    t.peg(this.calendar);    t0=t.getFirstMillisecond();  }  if (edge == RectangleEdge.TOP) {    state.cursorUp(Math.max(outsideLength,this.minorTickMarkOutsideLength));  } else   if (edge == RectangleEdge.BOTTOM) {    state.cursorDown(Math.max(outsideLength,this.minorTickMarkOutsideLength));  }  state.setTicks(ticks);}  }
class C{  public ClassFactory(File dir,ClassLoader parent){  super(parent);  this.output=dir;  dir.mkdirs();}  }
class C{  public BurlapProtocolException(String message,Throwable rootCause){  super(message);  this.rootCause=rootCause;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.paint=SerialUtilities.readPaint(stream);  this.stroke=SerialUtilities.readStroke(stream);}  }
class C{  public int read(int bits) throws AccessException {  int index=mPos >>> 3;  int offset=16 - (mPos & 0x07) - bits;  if ((bits < 0) || (bits > 8) || ((mPos + bits) > mEnd)) {    throw new AccessException("illegal read " + "(pos " + mPos + ", end "+ mEnd+ ", bits "+ bits+ ")");  }  int data=(mBuf[index] & 0xFF) << 8;  if (offset < 8)   data|=mBuf[index + 1] & 0xFF;  data>>>=offset;  data&=(-1 >>> (32 - bits));  mPos+=bits;  return data;}  }
class C{  private Set<StorageSystem> findMatchingSRDFPools(final VirtualArray srdfVarray,final Set<SRDFPoolMapping> srcDestPoolsList,final StoragePool recommendedPool,final StoragePool destinationPool){  Set<StorageSystem> storageDeviceList=new HashSet<StorageSystem>();  for (  SRDFPoolMapping srdfPoolMapping : srcDestPoolsList) {    if (srdfPoolMapping.destVarray.getId().equals(srdfVarray.getId())) {      _log.info("Comparison for SRDF target varray: " + srdfVarray.getLabel());      _log.info("recommended pool: " + recommendedPool.getLabel() + " vs. SRDF pool mapping source: "+ srdfPoolMapping.sourceStoragePool.getLabel());      _log.info("destination pool: " + destinationPool.getLabel() + " vs. SRDF pool mapping destination: "+ srdfPoolMapping.destStoragePool.getLabel());      if (srdfPoolMapping.sourceStoragePool.equals(recommendedPool) && srdfPoolMapping.destStoragePool.equals(destinationPool)) {        if (!srdfPoolMapping.sourceStoragePool.getStorageDevice().equals(srdfPoolMapping.destStoragePool.getStorageDevice())) {          StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,srdfPoolMapping.destStoragePool.getStorageDevice());          storageDeviceList.add(storageSystem);          _log.info("SRDF potentially will be recommended to array: " + storageSystem.getNativeGuid());        }      }    }  }  return storageDeviceList;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/register") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public ComputeSystemRestRep registerComputeSystem(@PathParam("id") URI id) throws ControllerException {  ArgValidator.checkUri(id);  ComputeSystem cs=_dbClient.queryObject(ComputeSystem.class,id);  ArgValidator.checkEntity(cs,id,isIdEmbeddedInURL(id));  if (RegistrationStatus.UNREGISTERED.toString().equalsIgnoreCase(cs.getRegistrationStatus())) {    cs.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());    _dbClient.persistObject(cs);    List<URI> cvpIds=_dbClient.queryByType(ComputeVirtualPool.class,true);    Iterator<ComputeVirtualPool> iter=_dbClient.queryIterativeObjects(ComputeVirtualPool.class,cvpIds);    while (iter.hasNext()) {      ComputeVirtualPool cvp=iter.next();      if (cvp.getUseMatchedElements()) {        _log.debug("Compute pool " + cvp.getLabel() + " configured to use dynamic matching -- refresh matched elements");        computeVirtualPoolService.getMatchingCEsforCVPAttributes(cvp);        _dbClient.updateAndReindexObject(cvp);      }    }    recordAndAudit(cs,OperationTypeEnum.REGISTER_COMPUTE_SYSTEM,true,null);  }  return getComputeSystem(id);}  }
class C{  protected SVGOMAnimateTransformElement(){}  }
class C{  List<SubscriptionHistory> filterSubscriptionHistories(){  List<SubscriptionHistory> subscriptionHistories=filterIrrelevantSubscriptionHistories(billingInput.getSubscriptionHistoryEntries());  subscriptionHistories=filterSuspendedSubscriptionHistories(subscriptionHistories);  return filterIrrelevantSubscriptionHistories(subscriptionHistories);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:43.547 -0500",hash_original_method="38A7A19069D4290FC9AB0139CD44ADE1",hash_generated_method="7007E02A81768D652D66865EF7A7DE15") public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY,int overX,int overY){  if (mFlywheel && !isFinished()) {    float oldVelocityX=mScrollerX.mCurrVelocity;    float oldVelocityY=mScrollerY.mCurrVelocity;    if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {      velocityX+=oldVelocityX;      velocityY+=oldVelocityY;    }  }  mMode=FLING_MODE;  mScrollerX.fling(startX,velocityX,minX,maxX,overX);  mScrollerY.fling(startY,velocityY,minY,maxY,overY);}  }
class C{  private Messages(){}  }
class C{  public IgniteFutureTimeoutException(Throwable cause){  this(cause.getMessage(),cause);}  }
class C{  void onAddToDatabase(Context context,ContentValues values){  values.put(LauncherSettings.BaseLauncherColumns.ITEM_TYPE,itemType);  values.put(LauncherSettings.Favorites.CONTAINER,container);  values.put(LauncherSettings.Favorites.SCREEN,screenId);  values.put(LauncherSettings.Favorites.CELLX,cellX);  values.put(LauncherSettings.Favorites.CELLY,cellY);  values.put(LauncherSettings.Favorites.SPANX,spanX);  values.put(LauncherSettings.Favorites.SPANY,spanY);  values.put(LauncherSettings.Favorites.RANK,rank);  long serialNumber=UserManagerCompat.getInstance(context).getSerialNumberForUser(user);  values.put(LauncherSettings.Favorites.PROFILE_ID,serialNumber);  if (screenId == Workspace.EXTRA_EMPTY_SCREEN_ID) {    throw new RuntimeException("Screen id should not be EXTRA_EMPTY_SCREEN_ID");  }}  }
class C{  public LibraryLocation(IPath libraryPath,IPath sourcePath,IPath packageRoot){  this(libraryPath,sourcePath,packageRoot,null);}  }
class C{  public void testMoveFileSourceParentRoot() throws Exception {  IgfsPath file=new IgfsPath("/" + FILE.name());  create(igfs,paths(DIR_NEW,SUBDIR_NEW),paths(file));  igfs.rename(file,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,new IgfsPath(SUBDIR_NEW,FILE.name()));  checkNotExist(igfs,igfsSecondary,file);}  }
class C{  protected void internalFrame(DockWrapper wrapper){  freeWrapper(wrapper);  internalFrameWrappers.add(wrapper);  wrapper.makeInternalFrame();}  }
class C{  public static boolean isLoginStatusAvailable(){  return OSUtils.isModernWindows();}  }
class C{  public RaceControlPanel(){  add(goButton);  add(stopButton);}  }
class C{  private SQLDeArger parse(){  while (hasTokens()) {    String token=getNextToken();    if (firstToken) {      setSQLType(token);      firstToken=false;    }    token=(isFloatString(token) || isQuotedString(token) || (token == null && isInString())) ? "?" : token;    parsedSQL.append(token);  }  parseMatches();  return this;}  }
class C{  @Override protected void acceptState(){  if (storedPrecision != precision.getParameterValue(0)) {    mode=null;  }}  }
class C{  public static boolean comparable(IOObject ioobject){  return ASSERTER_REGISTRY.getAsserterForObject(ioobject) != null;}  }
class C{  public int readBigUleb128(){  int end=offset;  int currentByteValue;  int result;  byte[] buf=dexBuf.buf;  result=buf[end++] & 0xff;  if (result > 0x7f) {    currentByteValue=buf[end++] & 0xff;    result=(result & 0x7f) | ((currentByteValue & 0x7f) << 7);    if (currentByteValue > 0x7f) {      currentByteValue=buf[end++] & 0xff;      result|=(currentByteValue & 0x7f) << 14;      if (currentByteValue > 0x7f) {        currentByteValue=buf[end++] & 0xff;        result|=(currentByteValue & 0x7f) << 21;        if (currentByteValue > 0x7f) {          currentByteValue=buf[end++];          if (currentByteValue < 0) {            throw new ExceptionWithContext("Invalid uleb128 integer encountered at offset 0x%x",offset);          }          result|=currentByteValue << 28;        }      }    }  }  offset=end;  return result;}  }
class C{  public int hashCode(){  if (!isHashValueSet) {    hashValue=super.hashCode();    isHashValueSet=true;  }  return hashValue;}  }
class C{  public int maxIndex(){  return tcount;}  }
class C{  public boolean isOneDotSix(){  return jdkVersion == JDK1_6 || jdkVersion == JDK1_6_U10_AND_AFTER;}  }
class C{  @Override public void startMonitoring(StorageSystem storageDevice,WorkPool.Work work) throws StorageMonitorException {  s_logger.debug("Connecting storage for event monitoring. {}",storageDevice.getSystemType());  if (storageDevice == null) {    throw new StorageMonitorException("Passed storage device is null");  }  s_logger.info("Attempting to connect to storage provider {} for event monitoring.",storageDevice.getSmisProviderIP());  if (_cimConnectionManager == null) {    throw new StorageMonitorException("CIM adapter connection manager reference is null.");  }  CimConnectionInfo connectionInfo=new CimConnectionInfo();  connectionInfo.setHost(storageDevice.getSmisProviderIP());  connectionInfo.setPort(storageDevice.getSmisPortNumber());  connectionInfo.setUser(storageDevice.getSmisUserName());  connectionInfo.setPassword(storageDevice.getSmisPassword());  connectionInfo.setInteropNS(CimConstants.DFLT_CIM_CONNECTION_INTEROP_NS);  connectionInfo.setUseSSL(storageDevice.getSmisUseSSL());  connectionInfo.setType(getConnectionTypeForDevice(storageDevice.getSystemType()));  connectionInfo.setImplNS(getImplNamespaceForDevice(storageDevice.getSystemType()));  try {    _cimConnectionManager.addConnection(connectionInfo);  } catch (  ConnectionManagerException cme) {    throw new StorageMonitorException(MessageFormatter.format("Failed attempting to establish a connection to storage provider {}.",storageDevice.getSmisProviderIP()).getMessage(),cme);  }  s_logger.info("Connection established for storage provider {}.",storageDevice.getSmisProviderIP());}  }
class C{  public Object clone(){  OpenIntIntHashMap copy=(OpenIntIntHashMap)super.clone();  copy.table=(int[])copy.table.clone();  copy.values=(int[])copy.values.clone();  copy.state=(byte[])copy.state.clone();  return copy;}  }
class C{  public void call(String name,Object... array) throws IOException {  if (generator.isExcludingFieldsNamed(name)) {    return;  }  writeName(name);  writeArray(Arrays.asList(array));}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  ValueByteWrapper(byte[] value,byte userBit){  this.valueBytes=value;  this.userBit=userBit;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public NativeUnixDirectory(Path path,LockFactory lockFactory,Directory delegate) throws IOException {  this(path,DEFAULT_MERGE_BUFFER_SIZE,DEFAULT_MIN_BYTES_DIRECT,lockFactory,delegate);}  }
class C{  public HiveTableInputFormat(String fullQualifiedTableName){  String[] parts=HadoopUtil.parseHiveTableName(fullQualifiedTableName);  dbName=parts[0];  tableName=parts[1];}  }
class C{  public PacketExtension parseExtension(XmlPullParser parser) throws Exception {  XHTMLExtension xhtmlExtension=new XHTMLExtension();  boolean done=false;  StringBuilder buffer=new StringBuilder();  int startDepth=parser.getDepth();  int depth=parser.getDepth();  String lastTag="";  while (!done) {    int eventType=parser.next();    if (eventType == XmlPullParser.START_TAG) {      if (parser.getName().equals("body")) {        buffer=new StringBuilder();        depth=parser.getDepth();      }      lastTag=parser.getText();      buffer.append(parser.getText());    } else     if (eventType == XmlPullParser.TEXT) {      if (buffer != null) {        buffer.append(StringUtils.escapeForXML(parser.getText()));      }    } else     if (eventType == XmlPullParser.END_TAG) {      if (parser.getName().equals("body") && parser.getDepth() <= depth) {        buffer.append(parser.getText());        xhtmlExtension.addBody(buffer.toString());      } else       if (parser.getName().equals(xhtmlExtension.getElementName()) && parser.getDepth() <= startDepth) {        done=true;      } else {        if (lastTag == null || !lastTag.equals(parser.getText())) {          buffer.append(parser.getText());        }      }    }  }  return xhtmlExtension;}  }
class C{  private void assertReadResult(InputStream in,int size) throws IOException {  byte[] readContent=new byte[size + 1];  int count=0;  int total=0;  while ((count=in.read(readContent,total,size + 1 - total)) != -1) {    total=total + count;  }  assertEquals(size,total);  for (int i=0; i < size; i++) {    assertEquals((byte)i,readContent[i]);  }}  }
class C{  static protected void assertSameHTree(final AbstractHTree expected,final AbstractHTree actual){  assertTrue(((HTree)expected).nentries == ((HTree)actual).nentries);  assertTrue(((HTree)expected).nleaves == ((HTree)actual).nleaves);  assertTrue(((HTree)expected).nnodes == ((HTree)actual).nnodes);  assertSameIterator(expected.getRoot().getTuples(),actual.getRoot().getTuples());}  }
class C{  public TypeRef[] collectLowerBounds(InferenceVariable infVar,boolean onlyProper,boolean resolveRawTypes){  return collectBounds(infVar,onlyProper,resolveRawTypes,null);}  }
class C{  public DetailView makeDetailView(PlotItem it){  return new DetailView(context,it,ratio);}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  public void tableChanged(TableModelEvent e){  boolean isUpdate=(e.getType() == TableModelEvent.UPDATE);  if (!isUpdate) {    calculate();    return;  }  int row=e.getFirstRow();  int col=e.getColumn();  boolean isInvoice=(e.getSource().equals(invoiceTable.getModel()));  boolean isAutoWriteOff=autoWriteOff.isSelected();  String msg=writeOff(row,col,isInvoice,paymentTable,invoiceTable,isAutoWriteOff);  if (msg != null && msg.length() > 0)   ADialog.warn(m_WindowNo,panel,"AllocationWriteOffWarn");  calculate();}  }
class C{  public static String toString(InputStream input,String encoding) throws IOException {  return toString(input,Charsets.toCharset(encoding));}  }
class C{  public boolean isSetDeleteRequest(){  return this.deleteRequest != null;}  }
class C{  public static TVShowFragment newInstance(){  final TVShowFragment fragment=new TVShowFragment();  final Bundle args=new Bundle();  fragment.setArguments(args);  return fragment;}  }
class C{  protected boolean startsWithOpenQuote(Word w){  return w.form.startsWith("`") || w.form.startsWith("``") || w.form.startsWith("```")|| w.form.startsWith("\"")|| w.form.startsWith("\"`");}  }
class C{  private void updateDisplay(){  if (m_gui) {    m_controlPanel.m_errorLabel.repaint();    m_controlPanel.m_epochsLabel.repaint();  }}  }
class C{  public int fontSize(){  return 0;}  }
class C{  boolean isEnvelopeEnabled(){  return this.envelopeEnabled;}  }
class C{  public boolean isValid(int timeout) throws SQLException {synchronized (getConnectionMutex()) {    if (isClosed()) {      return false;    }    try {      try {        pingInternal(false,timeout * 1000);      } catch (      Throwable t) {        try {          abortInternal();        } catch (        Throwable ignoreThrown) {        }        return false;      }    } catch (    Throwable t) {      return false;    }    return true;  }}  }
class C{  public span(String value){  addElement(value);}  }
class C{  @Deprecated public void addImmutableType(final Class<?> type){  addImmutableType(type,true);}  }
class C{  public boolean equals(XObject obj2){  try {    return m_val == obj2.bool();  } catch (  javax.xml.transform.TransformerException te) {    throw new org.apache.xml.utils.WrappedRuntimeException(te);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  Sesion oSesion=AutenticacionAdministracion.obtenerDatosEntidad(request);  SesionAdministracion poSesion=new SesionAdministracion();  poSesion.setIdEntidad(oSesion.getIdEntidad());  poSesion.setIdSesion(oSesion.getIdSesion());  poSesion.setIdUsuario(oSesion.getUsuario());  request.getSession().setAttribute(ConstantesSesionAdmin.ID_SESION_ADMINISTRACION,poSesion);  return mapping.findForward(SUCCESS_FORWARD);}  }
class C{  private ParamBinder obtainJobParamBinder(String classQualifiedName,String context){  return paramBinderCache.getBinderForClassNameAndContext(classQualifiedName,context);}  }
class C{  @SuppressWarnings("unchecked") public <R>SimpleReactStream<R> from(final Collection<R> collection){  return from(collection.stream());}  }
class C{  public void write(@WillClose OutputStream out) throws IOException {  Properties props=new SortedProperties();  for (int i=0; i < recentProjectsList.size(); i++) {    String projectName=recentProjectsList.get(i);    String key="recent" + i;    props.put(key,projectName);  }  Iterator<Entry<String,Boolean>> it=detectorEnablementMap.entrySet().iterator();  while (it.hasNext()) {    Entry<String,Boolean> entry=it.next();    props.put("detector" + entry.getKey(),entry.getKey() + BOOL_SEPARATOR + String.valueOf(entry.getValue().booleanValue()));  }  props.put(FILTER_SETTINGS_KEY,filterSettings.toEncodedString());  props.put(FILTER_SETTINGS2_KEY,filterSettings.hiddenToEncodedString());  props.put(DETECTOR_THRESHOLD_KEY,String.valueOf(filterSettings.getMinPriorityAsInt()));  props.put(RUN_AT_FULL_BUILD,String.valueOf(runAtFullBuild));  props.setProperty(EFFORT_KEY,effort);  if (cloudId != null) {    props.setProperty(CLOUD_ID_KEY,cloudId);  }  writeProperties(props,KEY_INCLUDE_FILTER,includeFilterFiles);  writeProperties(props,KEY_EXCLUDE_FILTER,excludeFilterFiles);  writeProperties(props,KEY_EXCLUDE_BUGS,excludeBugsFiles);  writeProperties(props,KEY_PLUGIN,customPlugins);  OutputStream prefStream=null;  try {    prefStream=new BufferedOutputStream(out);    props.store(prefStream,"FindBugs User Preferences");    prefStream.flush();  }  finally {    try {      if (prefStream != null) {        prefStream.close();      }    } catch (    IOException ioe) {    }  }}  }
class C{  private boolean isIndexedType(Class<?> raw){  return raw.isArray() || Collection.class.isAssignableFrom(raw) || Map.class.isAssignableFrom(raw);}  }
class C{  public static <T>Set<T> randomSample(List<T> items,int m){  if (items.size() <= m) {    return new HashSet<>(items);  }  Random rnd=new Random(100);  HashSet<T> res=new HashSet<>(m);  int n=items.size();  for (int i=n - m; i < n; i++) {    int pos=rnd.nextInt(i + 1);    T item=items.get(pos);    if (res.contains(item))     res.add(items.get(i)); else     res.add(item);  }  return res;}  }
class C{  public SolrCore(String name,CoreDescriptor cd){  coreDescriptor=cd;  this.setName(name);  this.schema=null;  this.dataDir=null;  this.solrConfig=null;  this.startTime=System.currentTimeMillis();  this.maxWarmingSearchers=2;  this.resourceLoader=null;  this.updateHandler=null;  this.isReloaded=true;  this.reqHandlers=null;  this.searchComponents=null;  this.updateProcessorChains=null;  this.infoRegistry=null;  this.codec=null;  this.ruleExpiryLock=null;  solrCoreState=null;}  }
class C{  public void flush() throws IOException {  out.flush();}  }
class C{  public static AsymmetricCipherKeyPair generateUserID(){  return generateDHKeyPair();}  }
class C{  public static String removeNotation(String name){  if (name.matches("^m[A-Z]{1}")) {    return name.substring(1,2).toLowerCase();  } else   if (name.matches("m[A-Z]{1}.*")) {    return name.substring(1,2).toLowerCase() + name.substring(2);  }  return name;}  }
class C{  final int findFreePages(int pages){  starting_page_search:   for (int i=0; i < NUM_PAGES; i++) {    if (getPage(i) == null) {      int start=i;      int end=i + pages;      for (; i <= end; i++) {        if (getPage(i) != null) {          continue starting_page_search;        }      }      return start << OFFSET_BITS;    }  }  throw new Error("No mappable consecutive pages found for an anonymous map of size" + (pages * PAGE_SIZE));}  }
class C{  public List<List<Integer>> toFinalList(){  final List<List<Integer>> alignment=new ArrayList<>(trgPoints.size());  if (trgPoints.isEmpty()) {    return alignment;  }  final ListIterator<AlignedSourceTokens> it=trgPoints.listIterator();  it.next();  while (it.hasNext()) {    final AlignedSourceTokens alignedSourceTokens=it.next();    if (it.hasNext()) {      final List<Integer> newAlignedSourceTokens=new ArrayList<>();      for (      Integer sourceIndex : alignedSourceTokens) {        newAlignedSourceTokens.add(sourceIndex - 1);      }      alignment.add(newAlignedSourceTokens);    }  }  return alignment;}  }
class C{  protected void tryToPrepare(){  if (this.surfaceIsReady && this.videoIsReady) {    if (this.mediaPlayer != null) {      this.initialMovieWidth=this.mediaPlayer.getVideoWidth();      this.initialMovieHeight=this.mediaPlayer.getVideoHeight();    }    resize();    stopLoading();    currentState=State.PREPARED;    if (shouldAutoplay)     start();    if (this.preparedListener != null)     this.preparedListener.onPrepared(mediaPlayer);  }}  }
class C{  public static void lockdown(){  locked=true;}  }
class C{  public static void printArrayOfBigInts(InputStream in) throws IOException {  BigInt[] A=ByteUtils.readSizeArrayOfSizeBigInts(in);  for (int i=0; i < A.length; i++) {    ToolIO.out.println(A[i]);  }}  }
class C{  public void addHouseNumber(HouseNumber houseNumber){  if (houseNumber != null) {    SortedSet<HouseNumber> currentHouseNumbers=getHouseNumbers();    if (currentHouseNumbers == null) {      currentHouseNumbers=new TreeSet<HouseNumber>(houseNumberComparator);    }    currentHouseNumbers.add(houseNumber);    this.setHouseNumbers(currentHouseNumbers);    houseNumber.setStreet(this);  }}  }
class C{  private void validateSignatureReferences(XMLSignature xmlSignature,DOMValidateContext valContext,Document document,Node timestampNode) throws XMLSignatureException {  assert xmlSignature != null;  assert valContext != null;  assert document != null;  assert timestampNode != null;  Node soapBody=getSoapBody(document);  Node wsTrustNode=getWsTrustNode(soapBody);  boolean foundTimestampElement=false;  boolean foundBodyOrWSTrustElement=false;  List<Reference> references=xmlSignature.getSignedInfo().getReferences();  if ((references == null) || (references.size() == 0)) {    throw new XMLSignatureException("Signature's SignInfo does not contain any references.");  }  for (  Reference reference : references) {    if (reference != null) {      validateReferenceTransforms(reference);      validateReferenceUri(reference);      if (!reference.validate(valContext)) {        throw new XMLSignatureException(String.format("Signature reference '%s' is invalid.",reference.getURI()));      }      if (!foundTimestampElement || !foundBodyOrWSTrustElement) {        String id=org.jcp.xml.dsig.internal.dom.Utils.parseIdFromSameDocumentURI(reference.getURI());        Node referencedNode=document.getElementById(id);        foundTimestampElement=(foundTimestampElement) || (timestampNode.isSameNode(referencedNode));        foundBodyOrWSTrustElement=(foundBodyOrWSTrustElement) || (soapBody.isSameNode(referencedNode)) || (wsTrustNode.isSameNode(referencedNode));      }    }  }  if (!foundTimestampElement || !foundBodyOrWSTrustElement) {    throw new XMLSignatureException("Signature must include <wsu:Timestamp> and either SoapBody, or the WSTrust element within it.");  }}  }
class C{  public void writeData(DataOutput dout) throws IOException {  dout.write(getMessage());}  }
class C{  @DSComment("not sensitive") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:40.790 -0500",hash_original_method="B09EB233D31BD7460B333EC44F947FB5",hash_generated_method="E7CB9BC1806291A715CC7DD98DB83FD9") @Override public void close() throws IOException {synchronized (lock) {    if (!isClosed()) {      in.close();      buf=null;    }  }}  }
class C{  private long calculateLastCompleted(long index){  long lastCompleted=index;  for (  ServerSessionContext session : executor.context().sessions().sessions.values()) {    lastCompleted=Math.min(lastCompleted,session.getLastCompleted());  }  return lastCompleted;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/register") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public StorageSystemRestRep registerStorageSystem(@PathParam("id") URI id) throws ControllerException {  ArgValidator.checkFieldUriType(id,StorageSystem.class,"id");  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,id);  ArgValidator.checkEntity(storageSystem,id,isIdEmbeddedInURL(id));  if (RegistrationStatus.UNREGISTERED.toString().equalsIgnoreCase(storageSystem.getRegistrationStatus())) {    storageSystem.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());    _dbClient.persistObject(storageSystem);    startStorageSystem(storageSystem);    auditOp(OperationTypeEnum.REGISTER_STORAGE_SYSTEM,true,null,storageSystem.getId().toString(),id.toString());  }  URIQueryResultList storagePoolURIs=new URIQueryResultList();  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceStoragePoolConstraint(id),storagePoolURIs);  Iterator<URI> storagePoolIter=storagePoolURIs.iterator();  List<StoragePool> registeredPools=new ArrayList<StoragePool>();  while (storagePoolIter.hasNext()) {    StoragePool pool=_dbClient.queryObject(StoragePool.class,storagePoolIter.next());    if (pool.getInactive() || DiscoveredDataObject.RegistrationStatus.REGISTERED.toString().equals(pool.getRegistrationStatus())) {      continue;    }    registerStoragePool(pool);    registeredPools.add(pool);  }  URIQueryResultList storagePortURIs=new URIQueryResultList();  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceStoragePortConstraint(id),storagePortURIs);  Iterator<URI> storagePortIter=storagePortURIs.iterator();  while (storagePortIter.hasNext()) {    StoragePort port=_dbClient.queryObject(StoragePort.class,storagePortIter.next());    if (port.getInactive() || DiscoveredDataObject.RegistrationStatus.REGISTERED.toString().equals(port.getRegistrationStatus())) {      continue;    }    registerStoragePort(port);  }  StringBuffer errorMessage=new StringBuffer();  ImplicitPoolMatcher.matchModifiedStoragePoolsWithAllVirtualPool(registeredPools,_dbClient,_coordinator,errorMessage);  return map(storageSystem);}  }
class C{  public AnnotationResizeHelper(final WorkflowAnnotation resized,final ResizeDirection direction,final Point origin){  if (resized == null) {    throw new IllegalArgumentException("resized must not be null!");  }  if (origin == null) {    throw new IllegalArgumentException("origin must not be null!");  }  this.resized=resized;  this.direction=direction;  this.origin=origin;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case RegularExpressionPackage.LOOK_AHEAD__NOT:    return isNot();case RegularExpressionPackage.LOOK_AHEAD__PATTERN:  return getPattern();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static void max(TextField campo,int maxLength){  campo.textProperty().addListener(null);}  }
class C{  public static Class<?> lookupClass(String className){  ClassLoader loader=Util.getCurrentLoader(null);  if (loader == null) {    return null;  }  return getMetaData(loader,className).lookupClass();}  }
class C{  private IElementUpdater findElementUpdater(String commandId){  if (IWorkbenchCommandConstants.FILE_EXPORT.equals(commandId)) {    return new WizardHandler.Export();  } else   if (IWorkbenchCommandConstants.FILE_IMPORT.equals(commandId)) {    return new WizardHandler.Import();  }  return null;}  }
class C{  public static FeatureSet of(final Feature... features){  return new FeatureSet(ImmutableSet.copyOf(features),ImmutableSet.of());}  }
class C{  public boolean isMulticastEnabled(){  return multicastEnabled;}  }
class C{  void informReferenceChange(ReferenceEvent e){  for (  INodeChangeListener listener : nodeChangeListeners) {    listener.informReferenceChange(e);  }}  }
class C{  public static AnnotationPart unmap(AnnotationDesc node){  List<AnnotationPart> list=unmapAnnotations(new ArrayList<AnnotationDesc>(Collections.singletonList(node)));  return list.get(0);}  }
class C{  public void rotate(float angle,int pivotX,int pivotY){  impl.rotate(nativeGraphics,angle,pivotX,pivotY);}  }
class C{  public boolean isNeedClientAuth(){  return needClientAuth;}  }
class C{  public AppCardBuilder iPhoneId(String appIPhoneId){  this.appIPhoneId=appIPhoneId;  return this;}  }
class C{  private String createStyleDefinition(){  int fontSize=getFont().getSize() + 2;  return "<style type=\"text/css\">body {font-family:" + fontName + "; font-size:"+ fontSize+ "; margin:12px} p {margin:4px 0px} a {color:#a00000} li, ul {margin-left:10px}</style>";}  }
class C{  public DOMWriter(Writer output){  super(output);}  }
class C{  protected static void println(String msg){  System.out.println(msg);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe max size of the Ngram (default = 3).","max",1,"-max <int>"));  result.addElement(new Option("\tThe min size of the Ngram (default = 1).","min",1,"-min <int>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public static void register(){  RxJavaPlugins instance=RxJavaPlugins.getInstance();  if (!(instance.getErrorHandler() instanceof RethrowerJavaErrorHandler)) {    unregister();    instance.registerErrorHandler(new RethrowerJavaErrorHandler());  }}  }
class C{  public static void assignToCatalogEntry(DataService mgr,Category category,CatalogEntry ce) throws ObjectNotFoundException, NonUniqueBusinessKeyException {  CategoryToCatalogEntry cc=new CategoryToCatalogEntry();  cc.setCatalogEntry(ce);  cc.setCategory(mgr.getReference(Category.class,category.getKey()));  mgr.persist(cc);}  }
class C{  public boolean isCreateSingleOrder(){  Object oo=get_Value(COLUMNNAME_IsCreateSingleOrder);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String[] tzids=java.util.TimeZone.getAvailableIDs();  java.util.Vector rv=new java.util.Vector();  java.util.TimeZone lastTZ=null;  String lastTZStr="";  for (int i=0; i < tzids.length; i++) {    java.util.TimeZone tz=java.util.TimeZone.getTimeZone(tzids[i]);    if (lastTZ == null || !lastTZ.hasSameRules(tz)) {      if (lastTZ != null) {        lastTZStr+=")";        rv.add(lastTZStr);      }      lastTZ=tz;      lastTZStr=tz.getDisplayName(true,java.util.TimeZone.SHORT,Sage.userLocale) + " " + tz.getDisplayName(Sage.userLocale)+ " ("+ tzids[i];    } else {      lastTZStr+=", " + tzids[i];    }  }  rv.add(lastTZStr + ")");  return rv;}  }
class C{  public void resetWithEmpty(){  _inputStart=-1;  _currentSize=0;  _inputLen=0;  _inputBuffer=null;  _resultString=null;  _resultArray=null;  if (_hasSegments) {    clearSegments();  }}  }
class C{  public NumericPrediction(double actual,double predicted,double weight,double[][] predInt){  m_Actual=actual;  m_Predicted=predicted;  m_Weight=weight;  setPredictionIntervals(predInt);}  }
class C{  private String serializeColorMap(){  String output="";  for (  Map.Entry<String,BiomeColorJson> pairs : getSortedColorMapEntries()) {    output+="[ \"" + pairs.getKey() + "\", { ";    output+="\"r\":" + pairs.getValue().getR() + ", ";    output+="\"g\":" + pairs.getValue().getG() + ", ";    output+="\"b\":" + pairs.getValue().getB() + " } ],\r\n";  }  return output.substring(0,output.length() - 3);}  }
class C{  public static TermsQueryBuilder termsQuery(String name,Object... values){  return new TermsQueryBuilder(name,values);}  }
class C{  public void configure(){  this.getSystemConnectionMemo().getSprogTrafficController().connectPort(this);  this.getSystemConnectionMemo().configureCommandStation();  this.getSystemConnectionMemo().configureManagers();  if (this.getSystemConnectionMemo().getSprogMode() == SprogMode.OPS) {    jmri.jmrix.sprog.ActiveFlagCS.setActive();  } else {    jmri.jmrix.sprog.ActiveFlag.setActive();  }  if (getOptionState("TrackPowerState") != null && getOptionState("TrackPowerState").equals("Powered On")) {    try {      this.getSystemConnectionMemo().getPowerManager().setPower(jmri.PowerManager.ON);    } catch (    jmri.JmriException e) {      log.error(e.toString());    }  }}  }
class C{  private AdvertiseData buildAdvertiseData(){  AdvertiseData.Builder dataBuilder=new AdvertiseData.Builder();  dataBuilder.addServiceUuid(Constants.Service_UUID);  dataBuilder.setIncludeDeviceName(true);  return dataBuilder.build();}  }
class C{  public ConfiguratorDescriptor(final String className){  this.className=className;}  }
class C{  long readObjectRef(){  return readID(vm.sizeofObjectRef);}  }
class C{  @Override public void visitClass(PsiClass psiClass){  if (!EndpointUtilities.isEndpointClass(psiClass)) {    return;  }  PsiMethod[] allMethods=psiClass.getMethods();  Map<String,PsiMethod> javaMethodNames=Maps.newHashMap();  for (  PsiMethod psiMethod : allMethods) {    validateBackendMethodNameUnique(psiMethod,javaMethodNames);  }}  }
class C{  public boolean isHalfSupported(){  return hasExtension("cl_khr_fp16");}  }
class C{  private void ensureFreq() throws IOException {  int currentDoc=docID();  if (lastScoredDoc != currentDoc) {    setFreqCurrentDoc();    lastScoredDoc=currentDoc;  }}  }
class C{  public String toString(){  return "Analysis for " + Utils.doubleToString(count,0) + " points:\n"+ "                "+ "         Column 1"+ "         Column 2"+ "       Difference\n"+ "Minimums        "+ Utils.doubleToString(xStats.min,17,4)+ Utils.doubleToString(yStats.min,17,4)+ Utils.doubleToString(differencesStats.min,17,4)+ '\n'+ "Maximums        "+ Utils.doubleToString(xStats.max,17,4)+ Utils.doubleToString(yStats.max,17,4)+ Utils.doubleToString(differencesStats.max,17,4)+ '\n'+ "Sums            "+ Utils.doubleToString(xStats.sum,17,4)+ Utils.doubleToString(yStats.sum,17,4)+ Utils.doubleToString(differencesStats.sum,17,4)+ '\n'+ "SumSquares      "+ Utils.doubleToString(xStats.sumSq,17,4)+ Utils.doubleToString(yStats.sumSq,17,4)+ Utils.doubleToString(differencesStats.sumSq,17,4)+ '\n'+ "Means           "+ Utils.doubleToString(xStats.mean,17,4)+ Utils.doubleToString(yStats.mean,17,4)+ Utils.doubleToString(differencesStats.mean,17,4)+ '\n'+ "SDs             "+ Utils.doubleToString(xStats.stdDev,17,4)+ Utils.doubleToString(yStats.stdDev,17,4)+ Utils.doubleToString(differencesStats.stdDev,17,4)+ '\n'+ "Prob(differences) "+ Utils.doubleToString(differencesProbability,4)+ " (sigflag "+ differencesSignificance+ ")\n"+ "Correlation       "+ Utils.doubleToString(correlation,4)+ "\n";}  }
class C{  public void test_ticket_1105_quads_select1() throws Exception {  new TestHelper("ticket_1105_quads_select1","ticket_1105_select1.rq","ticket_1105.trig","ticket_1105.srx").runTest();}  }
class C{  public void visitBooleanExpression(BooleanExpression expression){  controller.getCompileStack().pushBooleanExpression();  int mark=controller.getOperandStack().getStackLength();  Expression inner=expression.getExpression();  inner.visit(this);  controller.getOperandStack().castToBool(mark,true);  controller.getCompileStack().pop();}  }
class C{  final public void startServer(int port) throws IOException {  serverSocket=new ServerSocket(port,50);  serverInstance=new Thread(this);  serverInstance.start();}  }
class C{  protected void onActionEnd(){}  }
class C{  public static <K,V>MutableMap<K,V> rejectMapOnEntry(Map<K,V> map,Predicate2<? super K,? super V> predicate){  return MapIterate.rejectMapOnEntry(map,predicate,UnifiedMap.newMap());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Envelope boundary(){  minXEnvelope=this.rawPolygonRDD.min((PolygonXMinComparator)GeometryComparatorFactory.createComparator("polygon","x","min")).getEnvelopeInternal();  Double minLongitude=minXEnvelope.getMinX();  maxXEnvelope=this.rawPolygonRDD.max((PolygonXMaxComparator)GeometryComparatorFactory.createComparator("polygon","x","max")).getEnvelopeInternal();  Double maxLongitude=maxXEnvelope.getMaxX();  minYEnvelope=this.rawPolygonRDD.min((PolygonYMinComparator)GeometryComparatorFactory.createComparator("polygon","y","min")).getEnvelopeInternal();  Double minLatitude=minYEnvelope.getMinY();  maxYEnvelope=this.rawPolygonRDD.max((PolygonYMaxComparator)GeometryComparatorFactory.createComparator("polygon","y","max")).getEnvelopeInternal();  Double maxLatitude=maxYEnvelope.getMaxY();  this.boundary[0]=minLongitude;  this.boundary[1]=minLatitude;  this.boundary[2]=maxLongitude;  this.boundary[3]=maxLatitude;  this.boundaryEnvelope=new Envelope(boundary[0],boundary[2],boundary[1],boundary[3]);  return new Envelope(boundary[0],boundary[2],boundary[1],boundary[3]);}  }
class C{  public WebSocketImpl(URI location,Map<String,WebSocketExtensionFactorySpi> extensionFactories) throws URISyntaxException {  this(location,extensionFactories,HttpRedirectPolicy.ALWAYS,null,null,new HashMap<String,WsExtensionParameterValuesSpiImpl>(),null,0);}  }
class C{  public static void addPurificationChamberRecipe(ItemStack input,ItemStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addPurificationChamberRecipe",ItemStack.class,ItemStack.class);    m.invoke(null,input,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public static PartnerBookmarksProviderIterator createIfAvailable(ContentResolver contentResolver){  Cursor cursor=contentResolver.query(BOOKMARKS_CONTENT_URI,BOOKMARKS_PROJECTION,null,null,BOOKMARKS_SORT_ORDER);  if (cursor == null)   return null;  return new PartnerBookmarksProviderIterator(cursor);}  }
class C{  public View findViewById(int id){  View v;  if (mSlidingMenu != null) {    v=mSlidingMenu.findViewById(id);    if (v != null)     return v;  }  return null;}  }
class C{  public boolean expectPassed(){  for (int i=0; i < TEST_NUM_EXPECTS; i++) {    if (expects[i] == true) {      return false;    }  }  for (int i=0; i < TEST_NUM_EXPECTS; i++) {    if (eventsReceived[i] && notExpecting[i]) {      return false;    }  }  return true;}  }
class C{  public void paintListBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  private void findAny(List<Trade> trades){  Optional<Trade> anyTrade=trades.stream().filter(null).findAny();  System.out.println("First trade (uisng findAny function): " + anyTrade.get());}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static void main(String... args) throws Exception {  if (System.getProperty("boot.module.loader") == null) {    System.setProperty("boot.module.loader","org.wildfly.swarm.bootstrap.modules.BootModuleLoader");  }  Module bootstrap=Module.getBootModuleLoader().loadModule(ModuleIdentifier.create("swarm.application"));  ServiceLoader<ContainerFactory> factory=bootstrap.loadService(ContainerFactory.class);  Iterator<ContainerFactory> factoryIter=factory.iterator();  if (!factoryIter.hasNext()) {    simpleMain(args);  } else {    factoryMain(factoryIter.next(),args);  }}  }
class C{  public static String createTestPtTravelTimesAndDistancesCSVFile(){  String location=TempDirectoryUtil.createCustomTempDirectory("ptStopFileDir") + "/ptTravelInfo.csv";  BufferedWriter bw=IOUtils.getBufferedWriter(location);  try {    for (int origin=1; origin <= 4; origin++) {      for (int destination=1; destination <= 4; destination++) {        if (origin == destination)         bw.write(origin + " " + destination+ " 0"+ org.matsim.contrib.matsim4urbansim.utils.InternalConstants.NEW_LINE); else         bw.write(origin + " " + destination+ " 100"+ org.matsim.contrib.matsim4urbansim.utils.InternalConstants.NEW_LINE);      }    }    bw.flush();    bw.close();  } catch (  Exception e) {    e.printStackTrace();  }  return location;}  }
class C{  private List<ValidationError> toErrors(final Map errors){  List<ValidationError> validationErrors;  validationErrors=new LinkedList<ValidationError>();  final Set<Entry> errorEntries=errors.entrySet();  for (  final Entry entry : errorEntries)   validationErrors.add(new ValidationError(entry.getKey().toString(),entry.getValue().toString()));  return validationErrors;}  }
class C{  public void stop(){  advertiser.stop();  webHandler.stop();  started=false;}  }
class C{  public Card popCard(){  int i=size() - 1;  return popCard(i);}  }
class C{  private void createAttachMenuBar(){  JMenuBar bar=new JMenuBar();  JMenu fileMenu=new JMenu("File");  for (  Action action : actionManager.getOpenSavePlotActions()) {    fileMenu.add(action);  }  fileMenu.addSeparator();  fileMenu.add(new CloseAction(this.getWorkspaceComponent()));  JMenu editMenu=new JMenu("Edit");  editMenu.add(new JMenuItem(TimeSeriesPlotActions.getPropertiesDialogAction(timeSeriesPanel)));  JMenu helpMenu=new JMenu("Help");  ShowHelpAction helpAction=new ShowHelpAction("Pages/Plot/time_series.html");  JMenuItem helpItem=new JMenuItem(helpAction);  helpMenu.add(helpItem);  bar.add(fileMenu);  bar.add(editMenu);  bar.add(helpMenu);  getParentFrame().setJMenuBar(bar);}  }
class C{  protected void drawWithOffset(float zone,int pointsRight,int pointsLeft,float fixedPoints,Canvas canvas,Paint paint){  int position=getPositionForZone(zone);  int firstPosition=(int)(position - pointsLeft - fixedPoints);  int lastPosition=(int)(position + pointsRight + fixedPoints);  if (lastPosition > pointsNumber - 1 && lastPosition != pointsNumber) {    int offset=lastPosition - pointsNumber - 1;    float[] pointsF=getArrayFloat(points.subList(0,offset));    lastPosition=pointsNumber - 1;    canvas.drawPoints(pointsF,paint);  }  if (firstPosition < 0) {    int offset=Math.abs(firstPosition);    float[] pointsF=getArrayFloat(points.subList((pointsNumber - 1) - offset,pointsNumber - 1));    canvas.drawPoints(pointsF,paint);    firstPosition=0;  }  float[] pointsF=getArrayFloat(points.subList(firstPosition,lastPosition));  canvas.drawPoints(pointsF,paint);}  }
class C{  synchronized protected void timeout(){  JOptionPane.showMessageDialog(null,"Timeout talking to SPROG","Timeout",JOptionPane.ERROR_MESSAGE);  state=State.IDLE;}  }
class C{  @Beta public static <K,V>ImmutableSortedMap<K,V> copyOf(Iterable<? extends Entry<? extends K,? extends V>> entries){  @SuppressWarnings("unchecked") Ordering<K> naturalOrder=(Ordering<K>)NATURAL_ORDER;  return copyOf(entries,naturalOrder);}  }
class C{  private void registerHook(final String requestUrl,final String target,String[] methods,Integer expireTime,int resourceExpireTime){  String body="{ \"destination\":\"" + target + "\"";  String m=null;  if (methods != null) {    for (    String method : methods) {      m+="\"" + method + "\", ";    }    m=m.endsWith(", ") ? m.substring(0,m.lastIndexOf(",")) : m;    m="\"methods\": [" + m + "]";  }  body+=expireTime != null ? ", \"expireTime\" : " + expireTime : "";  body=body + "}";  with().body(body).header("x-expire-after",String.valueOf(resourceExpireTime)).put(requestUrl).then().assertThat().statusCode(200);}  }
class C{  public synchronized void unhidePieces(){  for (int i=0; i < 8; i++) {    for (int j=0; j < 8; j++) {      squares[i][j].setHidingPiece(false);    }  }  for (  PieceJailChessSquare pieceJailSquare : pieceJailSquares) {    if (pieceJailSquare != null) {      pieceJailSquare.setHidingPiece(false);    }  }}  }
class C{  public void printOptions(PrintWriter pw,int width,Options options,int leftPad,int descPad){  StringBuffer sb=new StringBuffer();  renderOptions(sb,width,options,leftPad,descPad);  pw.println(sb.toString());}  }
class C{  private ConstCollector(SsaMethod ssaMethod){  this.ssaMeth=ssaMethod;}  }
class C{  private void fireObjectRemoved(Binding oldBd,long changeID){  if (namingListeners == null || namingListeners.size() == 0)   return;  NamingEvent e=new NamingEvent(eventSrc,NamingEvent.OBJECT_REMOVED,null,oldBd,new Long(changeID));  support.queueEvent(e,namingListeners);}  }
class C{  public void testDoConfigureSetsDomainVersion() throws Exception {  configuration.setProperty(WebLogicPropertySet.DOMAIN_VERSION,DOMAIN_VERSION);  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(DOMAIN_VERSION,"//weblogic:domain-version",config);}  }
class C{  public ByteBuffer buildPacket(int encap,short destUdp,short srcUdp){  ByteBuffer result=ByteBuffer.allocate(MAX_LENGTH);  InetAddress destIp=mClientIp;  InetAddress srcIp=mYourIp;  fillInPacket(encap,destIp,srcIp,destUdp,srcUdp,result,DHCP_BOOTREPLY,mBroadcast);  result.flip();  return result;}  }
class C{  public final CC sizeGroupY(String s){  ver.setSizeGroup(s);  return this;}  }
class C{  @Override protected void entryRemoved(boolean evicted,String key,BitmapDrawable oldValue,BitmapDrawable newValue){  if (RecyclingBitmapDrawable.class.isInstance(oldValue)) {    ((RecyclingBitmapDrawable)oldValue).setIsCached(false);  } else {  }}  }
class C{  public byte[] processPacket(byte[] in,int inOff,int inLen) throws IllegalStateException, InvalidCipherTextException {  byte[] output;  if (forEncryption) {    output=new byte[inLen + macSize];  } else {    if (inLen < macSize) {      throw new InvalidCipherTextException("data too short");    }    output=new byte[inLen - macSize];  }  processPacket(in,inOff,inLen,output,0);  return output;}  }
class C{  public void copyFrom(P2Model other){  ius.addAll(other.ius);  repos.addAll(other.repos);  metadataRepos.addAll(other.metadataRepos);  artifactRepos.addAll(other.artifactRepos);}  }
class C{  public JSONArray put(Object value){  this.myArrayList.add(value);  return this;}  }
class C{  public boolean isCurrentIgnoreSpace(String str){  if (!hasNext())   return false;  int start=getPos();  removeSpace();  boolean is=isCurrent(str);  setPos(start);  return is;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public static double calculateJulianDate(GregorianCalendar cal){  int year=cal.get(Calendar.YEAR);  int month=cal.get(Calendar.MONTH);  int day=cal.get(Calendar.DAY_OF_MONTH);  month++;  if ((month == 1) || (month == 2)) {    year-=1;    month+=12;  }  int A=year / 100;  int B=(int)(2 - A + (A / 4));  int C=(int)(365.25 * (float)year);  int D=(int)(30.6001 * (float)(month + 1));  double julianDate=(double)(B + C + D+ day) + 1720994.5;  return julianDate;}  }
class C{  public static Declaration lookupMemberForBackend(List<Declaration> members,String name,Backends backends){  for (  Declaration dec : members) {    if (isResolvable(dec) && isNamed(name,dec)) {      Backends bs=dec.getNativeBackends();      if (bs.none()) {        return dec;      } else       if (backends.supports(bs)) {        return dec;      }    }  }  return null;}  }
class C{  private void handleMobileCellScroll(){  mIsMobileScrolling=handleMobileCellScroll(mHoverCellCurrentBounds);}  }
class C{  private static void runTests2(){  Graph g=GraphConverter.convert("X1-->X2,X3-->X2,X4-->X5");  HashMap<String,Integer> nd=new HashMap<>();  nd.put("X1",0);  nd.put("X2",0);  nd.put("X3",4);  nd.put("X4",4);  nd.put("X5",4);  g=MixedUtils.makeMixedGraph(g,nd);  GeneralizedSemPm pm=MixedUtils.GaussianCategoricalPm(g,"Split(-1.5,-.5,.5,1.5)");  System.out.println(pm);  GeneralizedSemIm im=MixedUtils.GaussianCategoricalIm(pm);  System.out.println(im);  int samps=1000;  DataSet ds=im.simulateDataAvoidInfinity(samps,false);  ds=MixedUtils.makeMixedData(ds,nd);  double lambda=0;  MGM model=new MGM(ds,new double[]{lambda,lambda,lambda});  System.out.println("Init nll: " + model.smoothValue(model.params.toMatrix1D()));  System.out.println("Init reg term: " + model.nonSmoothValue(model.params.toMatrix1D()));  model.learn(1e-8,1000);  System.out.println("Learned nll: " + model.smoothValue(model.params.toMatrix1D()));  System.out.println("Learned reg term: " + model.nonSmoothValue(model.params.toMatrix1D()));  System.out.println("params:\n" + model.params);  System.out.println("adjMat:\n" + model.adjMatFromMGM());}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitDoubleMemberValue(this);}  }
class C{  public boolean hasSectionId(){  return hasExtension(GwoSectionId.class);}  }
class C{  public IDevice learnEntity(long macAddress,Short vlan,Integer ipv4Address,Long switchDPID,Integer switchPort){  return learnEntity(macAddress,vlan,ipv4Address,switchDPID,switchPort,true);}  }
class C{  public static JMenuItem addMenuItem(String actionName,String iconName,KeyStroke ks,JMenu menu,ActionListener al){  if (iconName == null)   iconName=actionName;  String text=Msg.getMsg(Env.getCtx(),actionName);  ImageIcon icon=Env.getImageIcon2(iconName + "16");  CMenuItem mi=new CMenuItem(text,icon);  mi.setActionCommand(actionName);  if (ks != null)   mi.setAccelerator(ks);  if (menu != null)   menu.add(mi);  if (al != null)   mi.addActionListener(al);  return mi;}  }
class C{  @Override public final void perform(IR ir){  this.ir=ir;  translateFromSSA(ir);  ir.HIRInfo.dictionary=null;  ir.actualSSAOptions=null;  branchOpts.perform(ir,true);  ir.HIRInfo.dominatorsAreComputed=false;}  }
class C{  public void decrementRunCount(){  count--;  if (count <= 0) {synchronized (RequestAPITest.syncObj) {      RequestAPITest.syncObj.notifyAll();    }  }}  }
class C{  public SpanishAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  public boolean hasNotes(){  return getNotes() != null;}  }
class C{  public StructSet(Collection c,StructType structType){  this.contents=new ObjectOpenCustomHashSet(c,new ObjectArrayHashingStrategy());  if (structType == null) {    throw new IllegalArgumentException(LocalizedStrings.StructSet_STRUCTTYPE_MUST_NOT_BE_NULL.toLocalizedString());  }  this.structType=structType;}  }
class C{  public double length(){  return Math.sqrt(x * x + y * y + z * z);}  }
class C{  public static void unescapeXml(Writer writer,String str) throws IOException {  if (writer == null) {    throw new IllegalArgumentException("The Writer must not be null.");  }  if (str == null) {    return;  }  Entities.XML.unescape(writer,str);}  }
class C{  public void update(final T dataItem){  if (dataItem == null)   return;  if (gadget_ == null)   gadget_=ItemsSketch.getInstance(k_,comparator_);  gadget_.update(dataItem);}  }
class C{  public void test_restartSafe_oneWriteNoCommit(){  IAtomicStore store=(IAtomicStore)getStore();  try {    assertTrue(store.isStable());    final Random r=new Random();    final int len=100;    final byte[] expected=new byte[len];    r.nextBytes(expected);    final ByteBuffer tmp=ByteBuffer.wrap(expected);    final long addr1=store.write(tmp);    assertEquals(len,tmp.position());    assertEquals(tmp.position(),tmp.limit());    final ByteBuffer actual=store.read(addr1);    assertEquals(expected,actual);    assertEquals(0,actual.position());    assertEquals(expected.length,actual.limit());    store=(IAtomicStore)reopenStore(store);    assertTrue(store.isStable());    try {      store.read(addr1);      fail("Expecting: " + IllegalArgumentException.class);    } catch (    RuntimeException ex) {      if (InnerCause.isInnerCause(ex,IllegalArgumentException.class)) {        if (log.isInfoEnabled())         log.info("Ignoring expected exception: " + ex);      } else {        fail("Expecting inner cause: " + IllegalArgumentException.class + ", not: "+ ex,ex);      }    }  }  finally {    store.destroy();  }}  }
class C{  public AlertIdWithTimestamp(){}  }
class C{  public int numFeatures(){  if (features == null) {    return 0;  } else {    return features.size();  }}  }
class C{  private final void notifyConnectionClosed(OFConnection connection){  connection.getListener().connectionClosed(connection);}  }
class C{  public void registerMetrics(MetricsCollector metricsCollector){  SystemConfig systemConfig=(SystemConfig)SingletonRegistry.INSTANCE.getSingleton(SystemConfig.HERON_SYSTEM_CONFIG);  int interval=systemConfig.getHeronMetricsExportIntervalSec();  metricsCollector.registerMetric("__jvm-gc-collection-time-ms",jvmGCTimeMs,interval);  metricsCollector.registerMetric("__jvm-gc-collection-count",jvmGCCount,interval);  metricsCollector.registerMetric("__jvm-gc-time-ms",jvmGCTimeMsPerGCType,interval);  metricsCollector.registerMetric("__jvm-gc-count",jvmGCCountPerGCType,interval);  metricsCollector.registerMetric("__jvm-uptime-secs",jvmUpTimeSecs,interval);  metricsCollector.registerMetric("__jvm-thread-count",jvmThreadCount,interval);  metricsCollector.registerMetric("__jvm-daemon-thread-count",jvmDaemonThreadCount,interval);  metricsCollector.registerMetric("__jvm-process-cpu-time-nanos",processCPUTimeNs,interval);  metricsCollector.registerMetric("__jvm-threads-cpu-time-nanos",threadsCPUTimeNs,interval);  metricsCollector.registerMetric("__jvm-other-threads-cpu-time-nanos",otherThreadsCPUTimeNs,interval);  metricsCollector.registerMetric("__jvm-threads-user-cpu-time-nanos",threadsUserCPUTimeNs,interval);  metricsCollector.registerMetric("__jvm-other-threads-user-cpu-time-nanos",otherThreadsUserCPUTimeNs,interval);  metricsCollector.registerMetric("__jvm-process-cpu-load",processCPULoad,interval);  metricsCollector.registerMetric("__jvm-fd-count",fdCount,interval);  metricsCollector.registerMetric("__jvm-fd-limit",fdLimit,interval);  metricsCollector.registerMetric("__jvm-memory-free-mb",jvmMemoryFreeMB,interval);  metricsCollector.registerMetric("__jvm-memory-used-mb",jvmMemoryUsedMB,interval);  metricsCollector.registerMetric("__jvm-memory-mb-total",jvmMemoryTotalMB,interval);  metricsCollector.registerMetric("__jvm-memory-heap-mb-used",jvmMemoryHeapUsedMB,interval);  metricsCollector.registerMetric("__jvm-memory-heap-mb-committed",jvmMemoryHeapCommittedMB,interval);  metricsCollector.registerMetric("__jvm-memory-heap-mb-max",jvmMemoryHeapMaxMB,interval);  metricsCollector.registerMetric("__jvm-memory-non-heap-mb-used",jvmMemoryNonHeapUsedMB,interval);  metricsCollector.registerMetric("__jvm-memory-non-heap-mb-committed",jvmMemoryNonHeapCommittedMB,interval);  metricsCollector.registerMetric("__jvm-memory-non-heap-mb-max",jvmMemoryNonHeapMaxMB,interval);  metricsCollector.registerMetric("__jvm-peak-usage",jvmPeakUsagePerMemoryPool,interval);  metricsCollector.registerMetric("__jvm-collection-usage",jvmCollectionUsagePerMemoryPool,interval);  metricsCollector.registerMetric("__jvm-estimated-usage",jvmEstimatedUsagePerMemoryPool,interval);  metricsCollector.registerMetric("__jvm-buffer-pool",jvmBufferPoolMemoryUsage,interval);}  }
class C{  public CheckTourTimer(GuidedTour guidedTour){  this.guidedTour=guidedTour;}  }
class C{  public void markDirty(){  this.chunkData.markDirty();}  }
class C{  int countStackFrames(){  return vmdata.countStackFrames();}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer();  int temp;  temp=ipAddress & 0x000000FF;  result.append(temp);  result.append(".");  temp=(ipAddress >> 8) & 0x000000FF;  result.append(temp);  result.append(".");  temp=(ipAddress >> 16) & 0x000000FF;  result.append(temp);  result.append(".");  temp=(ipAddress >> 24) & 0x000000FF;  result.append(temp);  return result.toString();}  }
class C{  private ActivityFacility findActivityLocation(String actType,Coord coordStart,Coord coordEnd){  Coord coord=CoordUtils.createCoord((coordStart.getX() + coordEnd.getX()) / 2.0,(coordStart.getY() + coordEnd.getY()) / 2.0);  if (actType.equals("leisure"))   return (ActivityFacility)leisureFacilityQuadTree.getClosest(coord.getX(),coord.getY()); else   if (actType.equals("shop"))   return (ActivityFacility)shopFacilityQuadTree.getClosest(coord.getX(),coord.getY()); else   throw new NullPointerException("The activity type: " + actType + " ,is not known!");}  }
class C{  public String requestId(){  return requestId;}  }
class C{  public void parseVectorDrawable(){  if (ManageInputArguments()) {    return;  }  fileSize=args.length;  analyseTrimAndDebugOption();  loadFilesInMemory();  if (exceptionOccursWhenLoadingFiles) {    printer.printHelp();    return;  }  findWorkingDirectoryPath();  if (BuildVectorDrawablesFromFiles()) {    return;  }  vectAlignThePath();  ResultGenerator generator=new ResultGenerator(absoluteWorkingDirectoryPath,vectorDrawables);  try {    generator.launchGeneration();  } catch (  IOException e) {    CustomLogger.logError("Danm fuck the generation failed",e);  }}  }
class C{  private void addRoomFeatures(Set extRoomFeatures,Room room,org.hibernate.Session hibSession){  Set roomFeatures=room.getFeatures();  Iterator f=extRoomFeatures.iterator();  Collection globalRoomFeatures=RoomFeature.getAllGlobalRoomFeatures(room.getSession());  while (f.hasNext()) {    ExternalRoomFeature extRoomFeature=(ExternalRoomFeature)f.next();    String featureValue=extRoomFeature.getValue();    Iterator g=globalRoomFeatures.iterator();    while (g.hasNext()) {      RoomFeature globalFeature=(RoomFeature)g.next();      if (globalFeature.getLabel().equalsIgnoreCase(featureValue)) {        globalFeature.getRooms().add((Location)room);        hibSession.save(globalFeature);        roomFeatures.add(globalFeature);        break;      }    }  }  room.setFeatures(roomFeatures);  return;}  }
class C{  public final <V>SynchronizedGenericMatrix<V> synchronizedMatrix(GenericMatrix<V> matrix){  return new SynchronizedGenericMatrix<V>(matrix);}  }
class C{  public static void reboot(String into,InetSocketAddress adbSockAddr,Device device) throws TimeoutException, AdbCommandRejectedException, IOException {  byte[] request;  if (into == null) {    request=formAdbRequest("reboot:");  } else {    request=formAdbRequest("reboot:" + into);  }  try (SocketChannel adbChan=SocketChannel.open(adbSockAddr)){    adbChan.configureBlocking(false);    setDevice(adbChan,device);    write(adbChan,request);  } }  }
class C{  private static void prepareLoggingSystemEnviroment(){  System.setProperty("log.directory",getLogFolder());}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return NODE_ID;case 2:  return VERSION;default :return null;}}  }
class C{  @Override public void requestLocationSuccess(String locationName){  weatherUtils.requestWeather(locationName,this);  getLocation().realLocation=locationName;  DatabaseHelper.getInstance(this).insertLocation(getLocation());}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(1);  newVector.addElement(new Option("\tRandom number seed.\n" + "\t(default 1)","S",1,"-S <num>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public Facet createFacet(){  FacetImpl facet=new FacetImpl();  return facet;}  }
class C{  public void start(){  invokeAction(null);}  }
class C{  public void stop(){  if (drivingClip != null) {    drivingClip.stop();  }  if (turningClip != null) {    turningClip.stop();  }}  }
class C{  TagStack(TagElement tag,TagStack next){  this.tag=tag;  this.elem=tag.getElement();  this.next=next;  Element elem=tag.getElement();  if (elem.getContent() != null) {    this.state=new ContentModelState(elem.getContent());  }  if (next != null) {    inclusions=next.inclusions;    exclusions=next.exclusions;    pre=next.pre;  }  if (tag.isPreformatted()) {    pre=true;  }  if (elem.inclusions != null) {    if (inclusions != null) {      inclusions=(BitSet)inclusions.clone();      inclusions.or(elem.inclusions);    } else {      inclusions=elem.inclusions;    }  }  if (elem.exclusions != null) {    if (exclusions != null) {      exclusions=(BitSet)exclusions.clone();      exclusions.or(elem.exclusions);    } else {      exclusions=elem.exclusions;    }  }}  }
class C{  @Override public void mouseReleased(){  isDragging=false;  inputManager.releaseElement(this);}  }
class C{  public T cache(String url,long expire){  return ajax(url,byte[].class,expire,null,null);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public SIPETagParser(String etag){  super(etag);}  }
class C{  private boolean varrayHasPoolMatchingHaVpool(String nhId,List<StoragePool> haCosPoolList){  for (  StoragePool haCosPool : haCosPoolList) {    StringSet poolNHs=haCosPool.getTaggedVirtualArrays();    if (poolNHs != null && poolNHs.contains(nhId)) {      return true;    }  }  return false;}  }
class C{  public static InteriorIntersectionFinder createIntersectionCounter(LineIntersector li){  InteriorIntersectionFinder finder=new InteriorIntersectionFinder(li);  finder.setFindAllIntersections(true);  finder.setKeepIntersections(false);  return finder;}  }
class C{  public final void execute() throws Exception {  ConfProxyHelper.purgeOutdatedGenerations(conf);  ConfigurationDirectory confDir=download();  OutputBuilder output=new OutputBuilder(confDir,conf);  output.buildSignedDirectory();  output.moveAndCleanup();}  }
class C{  public void visitCode(){  if (mv != null) {    mv.visitCode();  }}  }
class C{  static String formatTenthsOfSecond(int tenthsOfSecond){  int seconds=tenthsOfSecond / 10;  int tenths=tenthsOfSecond - seconds * 10;  return seconds + "." + tenths;}  }
class C{  void makeAntecedent(){  String str="";  if (_variableList.size() != 0) {    String not=Bundle.getMessage("LogicNOT").toLowerCase();    String row="R";    String and=" " + Bundle.getMessage("LogicAND").toLowerCase() + " ";    String or=" " + Bundle.getMessage("LogicOR").toLowerCase() + " ";    if (_variableList.get(0).isNegated()) {      str=not + " ";    }    str=str + row + "1";    for (int i=1; i < _variableList.size(); i++) {      ConditionalVariable variable=_variableList.get(i);switch (variable.getOpern()) {case Conditional.OPERATOR_AND:        str=str + and;      break;case Conditional.OPERATOR_OR:    str=str + or;  break;default :break;}if (variable.isNegated()) {str=str + not + " ";}str=str + row + (i + 1);if (i > 0 && i + 1 < _variableList.size()) {str="(" + str + ")";}}}_antecedent=str;_antecedentField.setText(_antecedent);_showReminder=true;}  }
class C{  private Annotation generateAnnotation(){  return AnnotationParser.annotationForMap(annoType,getAllReflectedValues());}  }
class C{  private void markSubroutineWalkDFS(final BitSet sub,int index,final BitSet anyvisited){  while (true) {    AbstractInsnNode node=instructions.get(index);    if (sub.get(index)) {      return;    }    sub.set(index);    if (anyvisited.get(index)) {      dualCitizens.set(index);      if (LOGGING) {        log("Instruction #" + index + " is dual citizen.");      }    }    anyvisited.set(index);    if (node.getType() == AbstractInsnNode.JUMP_INSN && node.getOpcode() != JSR) {      JumpInsnNode jnode=(JumpInsnNode)node;      int destidx=instructions.indexOf(jnode.label);      markSubroutineWalkDFS(sub,destidx,anyvisited);    }    if (node.getType() == AbstractInsnNode.TABLESWITCH_INSN) {      TableSwitchInsnNode tsnode=(TableSwitchInsnNode)node;      int destidx=instructions.indexOf(tsnode.dflt);      markSubroutineWalkDFS(sub,destidx,anyvisited);      for (int i=tsnode.labels.size() - 1; i >= 0; --i) {        LabelNode l=tsnode.labels.get(i);        destidx=instructions.indexOf(l);        markSubroutineWalkDFS(sub,destidx,anyvisited);      }    }    if (node.getType() == AbstractInsnNode.LOOKUPSWITCH_INSN) {      LookupSwitchInsnNode lsnode=(LookupSwitchInsnNode)node;      int destidx=instructions.indexOf(lsnode.dflt);      markSubroutineWalkDFS(sub,destidx,anyvisited);      for (int i=lsnode.labels.size() - 1; i >= 0; --i) {        LabelNode l=lsnode.labels.get(i);        destidx=instructions.indexOf(l);        markSubroutineWalkDFS(sub,destidx,anyvisited);      }    }switch (instructions.get(index).getOpcode()) {case GOTO:case RET:case TABLESWITCH:case LOOKUPSWITCH:case IRETURN:case LRETURN:case FRETURN:case DRETURN:case ARETURN:case RETURN:case ATHROW:      return;  }  index++;  if (index >= instructions.size()) {    return;  }}}  }
class C{  public void purgeEvents(Long low,Long high) throws ReplicatorException {  LogConnection conn=diskLog.connect(false);  try {    conn.delete(low,high);    conn.release();  } catch (  InterruptedException e) {    logger.warn("Delete operation was interrupted!");  }  logger.info("Transactions deleted");}  }
class C{  @Override public String formatCookie(final Cookie cookie){  LOG.trace("enter CookieSpecBase.formatCookie(Cookie)");  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  final StringBuffer buf=new StringBuffer();  buf.append(cookie.getName());  buf.append("=");  final String s=cookie.getValue();  if (s != null) {    buf.append(s);  }  return buf.toString();}  }
class C{  public final boolean owns(ConditionObject condition){  if (condition == null)   throw new NullPointerException();  return condition.isOwnedBy(this);}  }
class C{  private List<String> determineProxies() throws XMPPException {  ServiceDiscoveryManager serviceDiscoveryManager=ServiceDiscoveryManager.getInstanceFor(this.connection);  List<String> proxies=new ArrayList<String>();  DiscoverItems discoverItems=serviceDiscoveryManager.discoverItems(this.connection.getServiceName());  Iterator<Item> itemIterator=discoverItems.getItems();  while (itemIterator.hasNext()) {    Item item=itemIterator.next();    if (this.proxyBlacklist.contains(item.getEntityID())) {      continue;    }    try {      DiscoverInfo proxyInfo;      proxyInfo=serviceDiscoveryManager.discoverInfo(item.getEntityID());      Iterator<Identity> identities=proxyInfo.getIdentities();      while (identities.hasNext()) {        Identity identity=identities.next();        if ("proxy".equalsIgnoreCase(identity.getCategory()) && "bytestreams".equalsIgnoreCase(identity.getType())) {          proxies.add(item.getEntityID());          break;        }        this.proxyBlacklist.add(item.getEntityID());      }    } catch (    XMPPException e) {      this.proxyBlacklist.add(item.getEntityID());    }  }  return proxies;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double z;  double currentVal;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  double numInNeighbours;  boolean flag=false;  double flowDir=0;  double flowLength=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    double gridResX=pntr.getCellSizeX();    double gridResY=pntr.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    WhiteboxRaster tmpGrid=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpGrid.isTemporaryFile=true;    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (pntr.getValue(row,col) != noData) {          z=0;          for (i=0; i < 8; i++) {            if (pntr.getValue(row + dY[i],col + dX[i]) == inflowingVals[i]) {              z++;            }          }          tmpGrid.setValue(row,col,z);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (tmpGrid.getValue(row,col) == 0) {          tmpGrid.setValue(row,col,-1);          flag=false;          x=col;          y=row;          do {            flowLength=output.getValue(y,x);            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              i=(int)(Math.log(flowDir) / LnOf2);              flowLength+=gridLengths[i];              x+=dX[i];              y+=dY[i];              currentVal=output.getValue(y,x);              if (flowLength > currentVal) {                output.setValue(y,x,flowLength);              }              numInNeighbours=tmpGrid.getValue(y,x) - 1;              tmpGrid.setValue(y,x,numInNeighbours);              if (numInNeighbours == 0) {                tmpGrid.setValue(y,x,-1);                flag=true;              } else {                flag=false;              }            } else {              flag=false;            }          } while (flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    tmpGrid.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public <T>T read(T value,File source,boolean strict) throws Exception {  InputStream file=new FileInputStream(source);  try {    return read(value,file,strict);  }  finally {    file.close();  }}  }
class C{  private void mergeCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] <= runLen[n] + runLen[n + 1]) {      if (runLen[n - 1] < runLen[n + 1])       n--;      mergeAt(n);    } else     if (runLen[n] <= runLen[n + 1]) {      mergeAt(n);    } else {      break;    }  }}  }
class C{  public boolean isHttpsEnabled(){  ProxyPreference preference=getProxyDao().get(ProxyKey.HTTPS_ENABLED);  if ((preference == null) || StringUtils.isEmpty(preference.getValue())) {    return false;  } else {    return Boolean.valueOf(preference.getValue()).booleanValue();  }}  }
class C{  public boolean hasTitle(){  return super.hasElement(Source.TITLE);}  }
class C{  public JSearchPanel createSearchPanel(){  return createSearchPanel(m_set instanceof PrefixSearchTupleSet);}  }
class C{  public ICalReader(InputStream in){  this(in,ICalVersion.V2_0);}  }
class C{  public int readEnum() throws IOException {  return readRawVarint32();}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  for (Node<K,V> n=findFirst(); n != null; n=n.next) {    V v=n.getValidValue();    if (v != null) {      s.writeObject(n.key);      s.writeObject(v);    }  }  s.writeObject(null);}  }
class C{  private void createPackageDefinition(String className){  int i=className.lastIndexOf('.');  if (i != -1) {    String pkgname=className.substring(0,i);    Package pkg=getPackage(pkgname);    if (pkg == null) {      definePackage(pkgname,null,null,null,null,null,null,null);      logger.info("Defined package (3): " + getPackage(pkgname) + ", "+ getPackage(pkgname).hashCode());    }  }}  }
class C{  public static boolean isAnnotationPresent(Class c,Class<? extends Annotation> annotationType){  return getAnnotation(c,annotationType) != null;}  }
class C{  public boolean hasFeature(String s){  return FEATURES.contains(s);}  }
class C{  public void updateAveragedOutlier(){  double totalXCoords=0.0;  double totalYCoords=0.0;  int size=getItemCount();  for (Iterator iterator=this.outliers.iterator(); iterator.hasNext(); ) {    Outlier o=(Outlier)iterator.next();    totalXCoords+=o.getX();    totalYCoords+=o.getY();  }  getAveragedOutlier().getPoint().setLocation(new Point2D.Double(totalXCoords / size,totalYCoords / size));}  }
class C{  private static void openDefaultUnixBrowser(final String url) throws Exception {  String cmd="xdg-open " + url;  Process p=Runtime.getRuntime().exec(cmd);  p.waitFor();  if (p.exitValue() != 0) {    throw new RuntimeException("Unix Exec Error/xdg-open: " + errorResponse(p));  }}  }
class C{  @Override public Object signature(final FormObject form){  final JButton sigBut=new JButton();  setupButton(sigBut,form);  setupUniversalFeatures(sigBut,form);  final boolean[] flags=form.getFieldFlags();  if (flags != null && flags[FormObject.READONLY_ID]) {    sigBut.setEnabled(false);    sigBut.setDisabledIcon(sigBut.getIcon());    sigBut.setDisabledSelectedIcon(sigBut.getSelectedIcon());  }  if (!form.isAppearanceUsed()) {    sigBut.setOpaque(false);    final BufferedImage img=new BufferedImage(1,1,BufferedImage.TYPE_INT_ARGB);    final Graphics2D imgG2=img.createGraphics();    imgG2.setPaint(new Color(221,228,255,175));    imgG2.fillRect(0,0,1,1);    sigBut.setIcon(new FixImageIcon(form,img,0));  }  return sigBut;}  }
class C{  public void xor(BitVector set){  int setLength=set.bits.length;  for (int i=setLength; i-- > 0; ) {    bits[i]^=set.bits[i];  }}  }
class C{  public ExceptionRule(Recurrence recur){  super(recur);}  }
class C{  public Graph<T> toMain(){  return to(new ThreadNode<>(true));}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (mv != null) {    return mv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  String readString() throws IOException {  int utf16len=readUnsignedLeb128();  byte inBuf[]=new byte[utf16len * 3];  int idx;  for (idx=0; idx < inBuf.length; idx++) {    byte val=readByte();    if (val == 0)     break;    inBuf[idx]=val;  }  return new String(inBuf,0,idx,"UTF-8");}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  long x=getLong(stack);  return (x == 0) ? "" : Sage.tfjLong(x);}  }
class C{  protected File createTempFile() throws IOException {  return createTempFile("");}  }
class C{  public void update(long n){  uncounted.addAndGet(n);}  }
class C{  public T casePropertyAttribute(PropertyAttribute object){  return null;}  }
class C{  public void addLongSelectionListener(SelectionListener listener){  if (listener == null)   throw new IllegalArgumentException();  if (hexEditControl == null) {    if (listOfLongListeners == null)     listOfLongListeners=new ArrayList<>();    listOfLongListeners.add(listener);  } else {    hexEditControl.addLongSelectionListener(listener);  }}  }
class C{  private void initialize(URI p_other){  m_scheme=p_other.getScheme();  m_userinfo=p_other.getUserinfo();  m_host=p_other.getHost();  m_port=p_other.getPort();  m_path=p_other.getPath();  m_queryString=p_other.getQueryString();  m_fragment=p_other.getFragment();}  }
class C{  public AbViewInfo(View view,int width,int height,int top,int bottom){  super();  this.view=view;  this.width=width;  this.height=height;  this.top=top;  this.bottom=bottom;}  }
class C{  public TextMimeEncoder(){}  }
class C{  private void validateBusinessObjectDataStorageFilesCreateRequest(BusinessObjectDataStorageFilesCreateRequest businessObjectDataStorageFilesCreateRequest){  Assert.hasText(businessObjectDataStorageFilesCreateRequest.getNamespace(),"A namespace must be specified.");  businessObjectDataStorageFilesCreateRequest.setNamespace(businessObjectDataStorageFilesCreateRequest.getNamespace().trim());  Assert.hasText(businessObjectDataStorageFilesCreateRequest.getBusinessObjectDefinitionName(),"A business object definition name must be specified.");  businessObjectDataStorageFilesCreateRequest.setBusinessObjectDefinitionName(businessObjectDataStorageFilesCreateRequest.getBusinessObjectDefinitionName().trim());  Assert.hasText(businessObjectDataStorageFilesCreateRequest.getBusinessObjectFormatUsage(),"A business object format usage must be specified.");  businessObjectDataStorageFilesCreateRequest.setBusinessObjectFormatUsage(businessObjectDataStorageFilesCreateRequest.getBusinessObjectFormatUsage().trim());  Assert.hasText(businessObjectDataStorageFilesCreateRequest.getBusinessObjectFormatFileType(),"A business object format file type must be specified.");  businessObjectDataStorageFilesCreateRequest.setBusinessObjectFormatFileType(businessObjectDataStorageFilesCreateRequest.getBusinessObjectFormatFileType().trim());  Assert.notNull(businessObjectDataStorageFilesCreateRequest.getBusinessObjectFormatVersion(),"A business object format version must be specified.");  Assert.hasText(businessObjectDataStorageFilesCreateRequest.getPartitionValue(),"A partition value must be specified.");  businessObjectDataStorageFilesCreateRequest.setPartitionValue(businessObjectDataStorageFilesCreateRequest.getPartitionValue().trim());  int subPartitionValuesCount=CollectionUtils.size(businessObjectDataStorageFilesCreateRequest.getSubPartitionValues());  Assert.isTrue(subPartitionValuesCount <= BusinessObjectDataEntity.MAX_SUBPARTITIONS,String.format("Exceeded maximum number of allowed subpartitions: %d.",BusinessObjectDataEntity.MAX_SUBPARTITIONS));  for (int i=0; i < subPartitionValuesCount; i++) {    Assert.hasText(businessObjectDataStorageFilesCreateRequest.getSubPartitionValues().get(i),"A subpartition value must be specified.");    businessObjectDataStorageFilesCreateRequest.getSubPartitionValues().set(i,businessObjectDataStorageFilesCreateRequest.getSubPartitionValues().get(i).trim());  }  Assert.notNull(businessObjectDataStorageFilesCreateRequest.getBusinessObjectDataVersion(),"A business object data version must be specified.");  Assert.hasText(businessObjectDataStorageFilesCreateRequest.getStorageName(),"A storage name must be specified.");  businessObjectDataStorageFilesCreateRequest.setStorageName(businessObjectDataStorageFilesCreateRequest.getStorageName().trim());  if (BooleanUtils.isTrue(businessObjectDataStorageFilesCreateRequest.isDiscoverStorageFiles())) {    Assert.isTrue(CollectionUtils.isEmpty(businessObjectDataStorageFilesCreateRequest.getStorageFiles()),"Storage files cannot be specified when discovery of storage files is enabled.");  } else {    Assert.notEmpty(businessObjectDataStorageFilesCreateRequest.getStorageFiles(),"At least one storage file must be specified when discovery of storage files is not enabled.");    Set<String> storageFilePathValidationSet=new HashSet<>();    for (    StorageFile storageFile : businessObjectDataStorageFilesCreateRequest.getStorageFiles()) {      Assert.hasText(storageFile.getFilePath(),"A file path must be specified.");      storageFile.setFilePath(storageFile.getFilePath().trim());      Assert.notNull(storageFile.getFileSizeBytes(),"A file size must be specified.");      if (storageFile.getRowCount() != null) {        Assert.isTrue(storageFile.getRowCount() >= 0,"File \"" + storageFile.getFilePath() + "\" has a row count which is < 0.");      }      if (storageFilePathValidationSet.contains(storageFile.getFilePath())) {        throw new IllegalArgumentException(String.format("Duplicate storage file found: %s",storageFile.getFilePath()));      }      storageFilePathValidationSet.add(storageFile.getFilePath());    }  }}  }
class C{  public boolean isHalted(){synchronized (this) {    return beenHalted;  }}  }
class C{  void updateStyle(String ref,JSONObject style){  if (mDestroy || style == null) {    return;  }  WXSDKInstance instance=WXSDKManager.getInstance().getSDKInstance(mInstanceId);  WXDomObject domObject=mRegistry.get(ref);  if (domObject == null) {    if (instance != null) {      instance.commitUTStab(IWXUserTrackAdapter.DOM_MODULE,WXErrorCode.WX_ERR_DOM_UPDATESTYLE);    }    return;  }  Map<String,Object> animationMap=WXDataStructureUtil.newHashMapWithExpectedSize(2);  animationMap.put(WXDomObject.TRANSFORM,style.remove(WXDomObject.TRANSFORM));  animationMap.put(WXDomObject.TRANSFORM_ORIGIN,style.remove(WXDomObject.TRANSFORM_ORIGIN));  animations.add(new Pair<>(ref,animationMap));  if (!style.isEmpty()) {    domObject.updateStyle(style);    transformStyle(domObject,false);    updateStyle(domObject,style);  }  mDirty=true;  if (instance != null) {    instance.commitUTStab(IWXUserTrackAdapter.DOM_MODULE,WXErrorCode.WX_SUCCESS);  }}  }
class C{  public boolean isSignalMastAssignedAnywhere(SignalMast signalMast){  for (  PositionablePoint po : layoutEditor.pointList) {    if ((po.getEastBoundSignalMast() != null) && po.getEastBoundSignalMast() == signalMast) {      return true;    }    if ((po.getWestBoundSignalMast() != null) && po.getWestBoundSignalMast() == signalMast) {      return true;    }  }  for (  LayoutTurnout to : layoutEditor.turnoutList) {    if ((to.getSignalAMast() != null) && to.getSignalDMast() == signalMast) {      return true;    }    if ((to.getSignalBMast() != null) && to.getSignalDMast() == signalMast) {      return true;    }    if ((to.getSignalCMast() != null) && to.getSignalDMast() == signalMast) {      return true;    }    if ((to.getSignalDMast() != null) && to.getSignalDMast() == signalMast) {      return true;    }  }  for (  LayoutSlip to : layoutEditor.slipList) {    if ((to.getSignalAMast() != null) && to.getSignalDMast() == signalMast) {      return true;    }    if ((to.getSignalBMast() != null) && to.getSignalDMast() == signalMast) {      return true;    }    if ((to.getSignalCMast() != null) && to.getSignalDMast() == signalMast) {      return true;    }    if ((to.getSignalDMast() != null) && to.getSignalDMast() == signalMast) {      return true;    }  }  for (  LevelXing x : layoutEditor.xingList) {    if ((x.getSignalAMast() != null) && x.getSignalAMast() == signalMast) {      return true;    }    if ((x.getSignalBMast() != null) && x.getSignalAMast() == signalMast) {      return true;    }    if ((x.getSignalCMast() != null) && x.getSignalAMast() == signalMast) {      return true;    }    if ((x.getSignalDMast() != null) && x.getSignalAMast() == signalMast) {      return true;    }  }  return false;}  }
class C{  private void visitBlock(BlockTree node,CollapseEmptyOrNot collapseEmptyOrNot,AllowLeadingBlankLine allowLeadingBlankLine,AllowTrailingBlankLine allowTrailingBlankLine){  sync(node);  if (node.isStatic()) {    token("static");    builder.space();  }  if (collapseEmptyOrNot.isYes() && node.getStatements().isEmpty()) {    if (builder.peekToken().equals(Optional.of(";"))) {      token(";");    } else {      tokenBreakTrailingComment("{",plusTwo);      builder.blankLineWanted(BlankLineWanted.NO);      token("}",plusTwo);    }  } else {    builder.open(ZERO);    builder.open(plusTwo);    tokenBreakTrailingComment("{",plusTwo);    if (allowLeadingBlankLine == AllowLeadingBlankLine.NO) {      builder.blankLineWanted(BlankLineWanted.NO);    } else {      builder.blankLineWanted(BlankLineWanted.PRESERVE);    }    visitStatements(node.getStatements());    builder.close();    builder.forcedBreak();    builder.close();    if (allowTrailingBlankLine == AllowTrailingBlankLine.NO) {      builder.blankLineWanted(BlankLineWanted.NO);    } else {      builder.blankLineWanted(BlankLineWanted.PRESERVE);    }    markForPartialFormat();    token("}",plusTwo);  }}  }
class C{  private double naiveQuery(V obj,WritableDoubleDataStore scores,HashSetModifiableDBIDs cands){  if (obj instanceof SparseNumberVector) {    return naiveQuerySparse((SparseNumberVector)obj,scores,cands);  } else {    return naiveQueryDense(obj,scores,cands);  }}  }
class C{  public final void deleteAllEntries(){  if (numEntries > 0) {    Arrays.fill(entries,null);    this.numEntries=0;  }}  }
class C{  public void addGroupColumn(String groupColumnName){  m_groups.add(groupColumnName);}  }
class C{  public AsyncResult DeleteSubscriptionsAsync(RequestHeader RequestHeader,UnsignedInteger... SubscriptionIds){  DeleteSubscriptionsRequest req=new DeleteSubscriptionsRequest(RequestHeader,SubscriptionIds);  return channel.serviceRequestAsync(req);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Channel c=getChannel(stack);  return Boolean.valueOf((c == null) ? true : c.isViewable());}  }
class C{  public static void printLibrary(String prefix,CoverageAttributeTable cat){  if (cat == null) {    println(prefix,"Library doesn't exist");    return;  }  println(prefix);  String[] coverages=cat.getCoverageNames();  println(prefix,"uses " + (cat.isTiledData() ? "tiled" : "untiled") + " data");  print(prefix,"Coverage names:");  for (int i=0; i < coverages.length; i++) {    print(coverages[i]);    print(" ");  }  println();  for (int i=0; i < coverages.length; i++) {    printCoverage(prefix + coverages[i] + ":",cat,coverages[i]);  }}  }
class C{  private void assertEventPropertyNull(ReplDBMSEvent event,String name){  String value=event.getDBMSEvent().getMetadataOptionValue(name);  DBMSData rawData=event.getData().get(0);  String query=((StatementData)rawData).getQuery();  Assert.assertNull("Expected property to be unset: query=" + query + " name="+ name,value);}  }
class C{  public void addTransaction(final Transaction transaction){  this.transactions.add(transaction);}  }
class C{  public void testIssue709() throws Exception {  ObjectMapper mapper=new ObjectMapper();  byte[] inputData=new byte[]{1,2,3};  ObjectNode node=mapper.createObjectNode();  node.put("data",inputData);  Issue709Bean result=mapper.readValue(node,Issue709Bean.class);  String json=mapper.writeValueAsString(node);  Issue709Bean resultFromString=mapper.readValue(json,Issue709Bean.class);  Issue709Bean resultFromConvert=mapper.convertValue(node,Issue709Bean.class);  Assert.assertArrayEquals(inputData,resultFromString.data);  Assert.assertArrayEquals(inputData,resultFromConvert.data);  Assert.assertArrayEquals(inputData,result.data);}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof RequestedAddressFamilyAttribute))   return false;  if (obj == this)   return true;  RequestedAddressFamilyAttribute att=(RequestedAddressFamilyAttribute)obj;  if (att.getAttributeType() != getAttributeType() || att.getDataLength() != getDataLength() || att.family != family)   return false;  return true;}  }
class C{  public static void perspectiveM(float[] m,int offset,float fovy,float aspect,float zNear,float zFar){  float f=1.0f / (float)Math.tan(fovy * (Math.PI / 360.0));  float rangeReciprocal=1.0f / (zNear - zFar);  m[offset + 0]=f / aspect;  m[offset + 1]=0.0f;  m[offset + 2]=0.0f;  m[offset + 3]=0.0f;  m[offset + 4]=0.0f;  m[offset + 5]=f;  m[offset + 6]=0.0f;  m[offset + 7]=0.0f;  m[offset + 8]=0.0f;  m[offset + 9]=0.0f;  m[offset + 10]=(zFar + zNear) * rangeReciprocal;  m[offset + 11]=-1.0f;  m[offset + 12]=0.0f;  m[offset + 13]=0.0f;  m[offset + 14]=2.0f * zFar * zNear* rangeReciprocal;  m[offset + 15]=0.0f;}  }
class C{  @Override public void execute(String[] params,Server server,Conversation conversation,IRCService service) throws CommandException {  if (params.length > 1) {    String text=BaseHandler.mergeParams(params);    Collection<Conversation> mConversations=server.getConversations();    for (    Conversation currentConversation : mConversations) {      if (currentConversation.getType() == Conversation.TYPE_CHANNEL) {        Message message=new Message(" " + service.getConnection(server.getId()).getNick() + " - "+ text);        currentConversation.addMessage(message);        Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),currentConversation.getName());        service.sendBroadcast(intent);        service.getConnection(server.getId()).sendMessage(currentConversation.getName(),text);      }    }  } else {    throw new CommandException(service.getString(R.string.invalid_number_of_params));  }}  }
class C{  public Property era(){  return new Property(this,getChronology().era());}  }
class C{  public String saveFile(String handleId,String relativeFile,InputStream inputStream){  String file=fileHandler.append(getWorkspaceDirectory(handleId),relativeFile);  if (inputStream != null) {    fileHandler.copy(inputStream,fileHandler.getOutputStream(file));  }  return file;}  }
class C{  private void parseNodeString(String nodeLine){  StringTokenizer tokenizer=new StringTokenizer(nodeLine);  int parameters=3;  if (nodeLine.contains("Edges:")) {    state=PARSE_EDGES;    return;  }  if (!tokenizer.hasMoreElements()) {    return;  }  int nodeID=0;  String nodeLabel="";  int xPos=0;  int yPos=0;  for (int actualParam=0; tokenizer.hasMoreElements() && actualParam < parameters; actualParam++) {    String token=tokenizer.nextToken();switch (actualParam) {case 0:      nodeID=Integer.valueOf(token);    nodeLabel=Integer.toString(nodeID);  break;case 1:xPos=Integer.valueOf(token);break;case 2:yPos=Integer.valueOf(token);break;}}TopologicalNode topoNode=new TopologicalNode(nodeID,nodeLabel,xPos,yPos);graph.addNode(topoNode);}  }
class C{  public boolean isBackupRunData(){  return backupRunData;}  }
class C{  public Duration plus(long amount){  return withDurationAdded(amount,1);}  }
class C{  private StringBuffer format(BigDecimal number,StringBuffer result,FieldDelegate delegate){  if (multiplier != 1) {    number=number.multiply(getBigDecimalMultiplier());  }  boolean isNegative=number.signum() == -1;  if (isNegative) {    number=number.negate();  }synchronized (digitList) {    int maxIntDigits=getMaximumIntegerDigits();    int minIntDigits=getMinimumIntegerDigits();    int maxFraDigits=getMaximumFractionDigits();    int minFraDigits=getMinimumFractionDigits();    int maximumDigits=maxIntDigits + maxFraDigits;    digitList.set(isNegative,number,useExponentialNotation ? ((maximumDigits < 0) ? Integer.MAX_VALUE : maximumDigits) : maxFraDigits,!useExponentialNotation);    return subformat(result,delegate,isNegative,false,maxIntDigits,minIntDigits,maxFraDigits,minFraDigits);  }}  }
class C{  public static String readValueFromFile(File file,String key) throws IOException {  String value=null;  if (file.exists()) {    Properties prop=new Properties();    FileReader reader=new FileReader(file);    prop.load(reader);    reader.close();    value=prop.getProperty(key);    log.info("The value of property with key({}) is: {}",key,value);    return value;  }  log.info("File({}) doesn't exist",file.getAbsoluteFile());  return null;}  }
class C{  public short readShort() throws EOFException {  if (iv_bytesinbuffer < 2) {    throw new EOFException();  }  iv_curptr+=2;  iv_bytesinbuffer-=2;  return MoreMath.BuildShort(iv_buffer,iv_curptr - 2,true);}  }
class C{  private static <Item extends Comparable>Queue<Item> mergeSortedQueues(Queue<Item> q1,Queue<Item> q2){  return null;}  }
class C{  public static void processReplyContent(MultipartBody multipartBody,ReplyingOptions replyingOptions){  if (replyingOptions.getReplyTo() != 0)   multipartBody.field("reply_to_message_id",String.valueOf(replyingOptions.getReplyTo()),"application/json; charset=utf8;");  if (replyingOptions.getReplyMarkup() != null) {switch (replyingOptions.getReplyMarkup().getType()) {case FORCE_REPLY:      multipartBody.field("reply_markup",TelegramBot.GSON.toJson(replyingOptions.getReplyMarkup(),ForceReply.class),"application/json; charset=utf8;");    break;case KEYBOARD_HIDE:  multipartBody.field("reply_markup",TelegramBot.GSON.toJson(replyingOptions.getReplyMarkup(),ReplyKeyboardHide.class),"application/json; charset=utf8;");break;case KEYBOARD_MARKUP:multipartBody.field("reply_markup",TelegramBot.GSON.toJson(replyingOptions.getReplyMarkup(),ReplyKeyboardMarkup.class),"application/json; charset=utf8;");break;case INLINE_KEYBOARD_MARKUP:multipartBody.field("reply_markup",TelegramBot.GSON.toJson(replyingOptions.getReplyMarkup(),InlineKeyboardMarkup.class),"application/json; charset=utf8;");break;}}}  }
class C{  public List<String> listTypes() throws AtlasServiceException {  final JSONObject jsonObject=callAPI(API.LIST_TYPES,null);  return extractResults(jsonObject,AtlasClient.RESULTS,new ExtractOperation<String,String>());}  }
class C{  private static Size clampSize(Size original,double maxArea,Size maxSize){  if (original.getWidth() * original.getHeight() < maxArea && original.getWidth() < maxSize.getWidth() && original.getHeight() < maxSize.getHeight()) {    return original;  }  double ratio=Math.min(Math.sqrt(maxArea / original.area()),1.0f);  int width=(int)Math.round(original.width() * ratio);  int height=(int)Math.round(original.height() * ratio);  if (width > maxSize.width() || height > maxSize.height()) {    return computeFitWithinSize(original,maxSize);  }  return new Size(width,height);}  }
class C{  @POST @Path("/internal/switchoverprecheck") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public SiteErrorResponse switchoverPrecheck(){  log.info("Precheck for switchover internally");  SiteErrorResponse response=new SiteErrorResponse();  try {    precheckForSwitchoverForLocalStandby();  } catch (  InternalServerErrorException e) {    log.warn("Failed to precheck switchover",e);    response.setErrorMessage(e.getMessage());    response.setServiceCode(e.getServiceCode().ordinal());    return response;  }catch (  Exception e) {    log.error("Failed to precheck switchover",e);    response.setErrorMessage(e.getMessage());    return response;  }  return response;}  }
class C{  private void removeVolumesFromPhantomStorageGroup(StorageSystem storage,WBEMClient client,URI exportMaskURI,List<URI> volumeURIList,String childGroupName,boolean forceFlag) throws Exception {  CloseableIterator<CIMObjectPath> volumePathItr=null;  try {    Map<StorageGroupPolicyLimitsParam,List<URI>> policyVolumeMap=_helper.groupVolumesBasedOnFastPolicy(storage,volumeURIList);    for (    StorageGroupPolicyLimitsParam storageGroupPolicyLimitsParam : policyVolumeMap.keySet()) {      if (!_helper.isFastPolicy(storageGroupPolicyLimitsParam.getAutoTierPolicyName())) {        continue;      }      _log.info("Checking if volumes are associated with phantom storage groups with policy name: " + storageGroupPolicyLimitsParam);      List<String> storageGroupNames=_helper.findPhantomStorageGroupAssociatedWithFastPolicy(storage,storageGroupPolicyLimitsParam);      if (storageGroupNames != null) {        for (        String storageGroupName : storageGroupNames) {          List<URI> volumesToRemove=new ArrayList<URI>();          List<Volume> volumes=_dbClient.queryObject(Volume.class,policyVolumeMap.get(storageGroupPolicyLimitsParam));          volumePathItr=_helper.getAssociatorNames(storage,_cimPath.getStorageGroupObjectPath(storageGroupName,storage),null,SmisConstants.CIM_STORAGE_VOLUME,null,null);          while (volumePathItr.hasNext()) {            CIMObjectPath volumePath=volumePathItr.next();            for (            Volume volume : volumes) {              if (volume.getNativeGuid().equalsIgnoreCase(_helper.getVolumeNativeGuid(volumePath))) {                _log.info("Found volume " + volume.getLabel() + " is in phantom storage group "+ storageGroupName);                volumesToRemove.add(volume.getId());              }            }          }          List<URI> inMoreViewsVolumes=new ArrayList<URI>();          for (          URI volumeToRemove : volumesToRemove) {            if (_helper.isPhantomVolumeInMultipleMaskingViews(storage,volumeToRemove,childGroupName)) {              Volume volume=_dbClient.queryObject(Volume.class,volumeToRemove);              _log.info("Volume " + volume.getLabel() + " is in other masking views, so we will not remove it from storage group "+ storageGroupName);              inMoreViewsVolumes.add(volume.getId());            }          }          volumesToRemove.removeAll(inMoreViewsVolumes);          if (!volumesToRemove.isEmpty()) {            _log.info(String.format("Going to remove volumes %s from phantom storage group %s",Joiner.on("\t").join(volumesToRemove),storageGroupName));            Map<String,List<URI>> phantomGroupVolumeMap=_helper.groupVolumesBasedOnExistingGroups(storage,storageGroupName,volumesToRemove);            if (phantomGroupVolumeMap != null && phantomGroupVolumeMap.get(storageGroupName) != null && phantomGroupVolumeMap.get(storageGroupName).size() == volumesToRemove.size() && !_helper.isStorageGroupSizeGreaterThanGivenVolumes(storageGroupName,storage,volumesToRemove.size())) {              _log.info("Storage Group has no more than {} volumes",volumesToRemove.size());              URI blockURI=volumesToRemove.get(0);              BlockObject blockObj=BlockObject.fetch(_dbClient,blockURI);              CIMObjectPath maskingGroupPath=_cimPath.getMaskingGroupPath(storage,storageGroupName,SmisCommandHelper.MASKING_GROUP_TYPE.SE_DeviceMaskingGroup);              String foundPolicyName=ControllerUtils.getAutoTieringPolicyName(blockObj.getId(),_dbClient);              if (_helper.isFastPolicy(foundPolicyName) && storageGroupPolicyLimitsParam.getAutoTierPolicyName().equalsIgnoreCase(foundPolicyName)) {                _log.info("Storage Group {} contains only 1 volume, so this group will be disassociated from FAST because group can not be deleted if associated with FAST",storageGroupName);                _helper.removeVolumeGroupFromPolicyAndLimitsAssociation(client,storage,maskingGroupPath);              }            }            String task=UUID.randomUUID().toString();            ExportMaskVolumeToStorageGroupCompleter completer=new ExportMaskVolumeToStorageGroupCompleter(null,exportMaskURI,task);            List<URI> volumesInSG=_helper.findVolumesInStorageGroup(storage,storageGroupName,volumesToRemove);            List<CIMObjectPath> volumePaths=new ArrayList<CIMObjectPath>();            if (volumesInSG != null && !volumesInSG.isEmpty()) {              CIMArgument[] inArgs=_helper.getRemoveVolumesFromMaskingGroupInputArguments(storage,storageGroupName,volumesInSG,forceFlag);              CIMArgument[] outArgs=new CIMArgument[5];              _helper.invokeMethodSynchronously(storage,_cimPath.getControllerConfigSvcPath(storage),"RemoveMembers",inArgs,outArgs,new SmisMaskingViewRemoveVolumeJob(null,storage.getId(),volumePaths,null,storageGroupName,_cimPath,completer));            }          }        }      }    }  }  finally {    if (volumePathItr != null) {      volumePathItr.close();    }  }}  }
class C{  public int addScatterPlot(String name,Color color,double[][] XY){  return ((Plot2DCanvas)plotCanvas).addScatterPlot(name,color,XY);}  }
class C{  public static List<Intersection> intersectTriStrip(final Line line,FloatBuffer vertices,IntBuffer indices){  if (line == null) {    String msg=Logging.getMessage("nullValue.LineIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (vertices == null || indices == null) {    String msg=Logging.getMessage("nullValue.BufferIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  List<Intersection> intersections=null;  for (int n=indices.position(); n < indices.limit() - 2; n++) {    Intersection intersection;    int i=indices.get(n) * 3;    int j=indices.get(n + 1) * 3;    int k=indices.get(n + 2) * 3;    intersection=intersect(line,vertices.get(i),vertices.get(i + 1),vertices.get(i + 2),vertices.get(j),vertices.get(j + 1),vertices.get(j + 2),vertices.get(k),vertices.get(k + 1),vertices.get(k + 2));    if (intersection != null) {      if (intersections == null)       intersections=new ArrayList<Intersection>();      intersections.add(intersection);    }  }  return intersections;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public void openOptionsMenu(){  mWindow.openPanel(Window.FEATURE_OPTIONS_PANEL,null);}  }
class C{  public void drawSelector(View content,Canvas canvas,float openPercent){  if (!mSelectorEnabled)   return;  if (mSelectorDrawable != null && mSelectedView != null) {    String tag=(String)mSelectedView.getTag(selectedViewId);    if (tag.equals(TAG + "SelectedView")) {      canvas.save();      int left, right, offset;      offset=(int)(mSelectorDrawable.getWidth() * openPercent);      if (mMode == SlidingMenu.LEFT) {        right=content.getLeft();        left=right - offset;        canvas.clipRect(left,0,right,getHeight());        canvas.drawBitmap(mSelectorDrawable,left,getSelectorTop(),null);      } else       if (mMode == SlidingMenu.RIGHT) {        left=content.getRight();        right=left + offset;        canvas.clipRect(left,0,right,getHeight());        canvas.drawBitmap(mSelectorDrawable,right - mSelectorDrawable.getWidth(),getSelectorTop(),null);      }      canvas.restore();    }  }}  }
class C{  public boolean checkParity(){  int len=getNumDataElements();  int chksum=0xff;  int loop;  if (getOpCode() == 0xD3 && len > 6) {    int sum=0xFF;    for (loop=0; loop < 5; loop++) {      sum=sum ^ getElement(loop);    }    if (getElement(5) != sum) {      return false;    }    sum=0xFF;    for (loop=6; loop < len - 1; loop++) {      sum=sum ^ getElement(loop);    }    if (getElement(len - 1) != sum) {      return false;    }    return true;  }  for (loop=0; loop < len - 1; loop++) {    chksum^=getElement(loop);  }  return (chksum == getElement(len - 1));}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return m_arg0.execute(xctxt).bool() ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  private void notifyDataSetChanged(){  addDebugText("notifyDataSetChanged");  adapter.notifyDataSetChanged();}  }
class C{  private SystemPropertiesProxy(){}  }
class C{  public synchronized boolean hasChapterWeek(){  try {    final Query query=new Query().addSort(Keys.OBJECT_ID,SortDirection.DESCENDING).setCurrentPageNum(1).setPageSize(1);    query.setFilter(new PropertyFilter(Article.ARTICLE_TYPE,FilterOperator.EQUAL,Article.ARTICLE_TYPE_C_JOURNAL_CHAPTER));    final JSONObject result=articleRepository.get(query);    final List<JSONObject> journals=CollectionUtils.<JSONObject>jsonArrayToList(result.optJSONArray(Keys.RESULTS));    if (journals.isEmpty()) {      return false;    }    final JSONObject maybeToday=journals.get(0);    final long created=maybeToday.optLong(Article.ARTICLE_CREATE_TIME);    return Times.isSameWeek(new Date(created),new Date());  } catch (  final RepositoryException e) {    LOGGER.log(Level.ERROR,"Check chapter generated failed",e);    return false;  }}  }
class C{  public RetentionPolicy retention(){  return retention;}  }
class C{  public ContentLengthOutputStream(final SessionOutputBuffer out,long contentLength){  super();  if (out == null) {    throw new IllegalArgumentException("Session output buffer may not be null");  }  if (contentLength < 0) {    throw new IllegalArgumentException("Content length may not be negative");  }  this.out=out;  this.contentLength=contentLength;}  }
class C{  public String minLogLikelihoodImprovementIteratingTipText(){  return "The minimum improvement in log likelihood required to " + "perform another iteration of the E and M steps";}  }
class C{  public void startInternalActivity(Intent intent,boolean requireBackStack){  isNextActionInternal=true;  if (requireBackStack)   addRequirementsToIntent(intent);  activity.startActivity(intent);}  }
class C{  @Override protected void blendModeImpl(){  if (blendMode != lastBlendMode) {    flush();  }  pgl.enable(PGL.BLEND);  if (blendMode == REPLACE) {    if (blendEqSupported) {      pgl.blendEquation(PGL.FUNC_ADD);    }    pgl.blendFunc(PGL.ONE,PGL.ZERO);  } else   if (blendMode == BLEND) {    if (blendEqSupported) {      pgl.blendEquationSeparate(PGL.FUNC_ADD,PGL.FUNC_ADD);    }    pgl.blendFuncSeparate(PGL.SRC_ALPHA,PGL.ONE_MINUS_SRC_ALPHA,PGL.ONE,PGL.ONE);  } else   if (blendMode == ADD) {    if (blendEqSupported) {      pgl.blendEquationSeparate(PGL.FUNC_ADD,PGL.FUNC_ADD);    }    pgl.blendFuncSeparate(PGL.SRC_ALPHA,PGL.ONE,PGL.ONE,PGL.ONE);  } else   if (blendMode == SUBTRACT) {    if (blendEqSupported) {      pgl.blendEquationSeparate(PGL.FUNC_REVERSE_SUBTRACT,PGL.FUNC_ADD);      pgl.blendFuncSeparate(PGL.SRC_ALPHA,PGL.ONE,PGL.ONE,PGL.ONE);    } else {      PGraphics.showWarning(BLEND_DRIVER_ERROR,"SUBTRACT");    }  } else   if (blendMode == LIGHTEST) {    if (blendEqSupported) {      pgl.blendEquationSeparate(PGL.FUNC_MAX,PGL.FUNC_ADD);      pgl.blendFuncSeparate(PGL.ONE,PGL.ONE,PGL.ONE,PGL.ONE);    } else {      PGraphics.showWarning(BLEND_DRIVER_ERROR,"LIGHTEST");    }  } else   if (blendMode == DARKEST) {    if (blendEqSupported) {      pgl.blendEquationSeparate(PGL.FUNC_MIN,PGL.FUNC_ADD);      pgl.blendFuncSeparate(PGL.ONE,PGL.ONE,PGL.ONE,PGL.ONE);    } else {      PGraphics.showWarning(BLEND_DRIVER_ERROR,"DARKEST");    }  } else   if (blendMode == EXCLUSION) {    if (blendEqSupported) {      pgl.blendEquationSeparate(PGL.FUNC_ADD,PGL.FUNC_ADD);    }    pgl.blendFuncSeparate(PGL.ONE_MINUS_DST_COLOR,PGL.ONE_MINUS_SRC_COLOR,PGL.ONE,PGL.ONE);  } else   if (blendMode == MULTIPLY) {    if (blendEqSupported) {      pgl.blendEquationSeparate(PGL.FUNC_ADD,PGL.FUNC_ADD);    }    pgl.blendFuncSeparate(PGL.ZERO,PGL.SRC_COLOR,PGL.ONE,PGL.ONE);  } else   if (blendMode == SCREEN) {    if (blendEqSupported) {      pgl.blendEquationSeparate(PGL.FUNC_ADD,PGL.FUNC_ADD);    }    pgl.blendFuncSeparate(PGL.ONE_MINUS_DST_COLOR,PGL.ONE,PGL.ONE,PGL.ONE);  } else   if (blendMode == DIFFERENCE) {    PGraphics.showWarning(BLEND_RENDERER_ERROR,"DIFFERENCE");  } else   if (blendMode == OVERLAY) {    PGraphics.showWarning(BLEND_RENDERER_ERROR,"OVERLAY");  } else   if (blendMode == HARD_LIGHT) {    PGraphics.showWarning(BLEND_RENDERER_ERROR,"HARD_LIGHT");  } else   if (blendMode == SOFT_LIGHT) {    PGraphics.showWarning(BLEND_RENDERER_ERROR,"SOFT_LIGHT");  } else   if (blendMode == DODGE) {    PGraphics.showWarning(BLEND_RENDERER_ERROR,"DODGE");  } else   if (blendMode == BURN) {    PGraphics.showWarning(BLEND_RENDERER_ERROR,"BURN");  }  lastBlendMode=blendMode;}  }
class C{  public static float dp(Context context,float dp){  return applyDimension(COMPLEX_UNIT_DIP,dp,context.getResources().getDisplayMetrics());}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.222 -0400",hash_original_method="0850C4F50DF9074FD1264564BB99F7E9",hash_generated_method="A520A96F7749BBC59CBB734AA3915CEC") public static boolean contentEquals(Reader input1,Reader input2) throws IOException {  input1=toBufferedReader(input1);  input2=toBufferedReader(input2);  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  public boolean is_set_property(){  return this.property != null;}  }
class C{  public void processPacket(Packet packet){  if (pingMinDelta > 0) {    long currentMillies=System.currentTimeMillis();    long delta=currentMillies - lastPingStamp;    lastPingStamp=currentMillies;    if (delta < pingMinDelta) {      return;    }  }  Pong pong=new Pong((Ping)packet);  connection.sendPacket(pong);}  }
class C{  @Override public void offsetWrite(ObjectReference src,Address slot,Offset value,Word metaDataA,Word metaDataB,int mode){  VM.barriers.offsetWrite(src,value,metaDataA,metaDataB,mode);}  }
class C{  private static void swap(Object x[],int a,int b){  Object t=x[a];  x[a]=x[b];  x[b]=t;}  }
class C{  public void schedule(String serviceName,Map<String,? extends Object> context,long startTime,int frequency,int interval,int count) throws JobManagerException {  schedule(serviceName,context,startTime,frequency,interval,count,0);}  }
class C{  public boolean isBPInstructionEnabled(){  return (bpStatus == BPINSTRUCTION_STATUS.ENABLED);}  }
class C{  static String path(String uri){  int i=uri.indexOf("://");  if (i == -1) {    i=0;  } else {    i=uri.indexOf('/',i + 3);    if (i == -1) {      return "/";    }  }  int queryStart=uri.indexOf('?',i);  if (queryStart == -1) {    queryStart=uri.length();  }  return uri.substring(i,queryStart);}  }
class C{  private void errAboutTextRun() throws SAXException {  err("Source text is not in Unicode Normalization Form C.");  alreadyComplainedAboutThisRun=true;}  }
class C{  public int size(){  return this.realTSindex.size();}  }
class C{  public CDeleteBookmarkAction(final CCodeBookmarkManager manager,final int[] rows){  super(rows.length == 1 ? "Delete Bookmark" : "Delete Bookmarks");  m_manager=Preconditions.checkNotNull(manager,"IE01314: Bookmark manager argument can not be null");  m_rows=rows.clone();}  }
class C{  public Consist newConsist(String name){  Consist consist=getConsistByName(name);  if (consist == null) {    consist=new Consist(name);    Integer oldSize=Integer.valueOf(_consistHashTable.size());    _consistHashTable.put(name,consist);    setDirtyAndFirePropertyChange(CONSISTLISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_consistHashTable.size()));  }  return consist;}  }
class C{  private void validateText(InputNode node,Schema schema) throws Exception {  Label label=schema.getText();  if (label != null) {    validate(node,label);  }}  }
class C{  @Override public void onClick(final DialogInterface dialog,final int which){  Visibility visibility=Visibility.PRIVATE;switch (visibilitySpinner.getSelectedItemPosition()) {case 0:    visibility=Visibility.PRIVATE;  break;case 1:visibility=Visibility.PUBLIC;break;case 2:visibility=Visibility.TRACKABLE;break;case 3:visibility=Visibility.IDENTIFIABLE;break;}caller.performTrackUpload(descriptionField.getText().toString(),tagsField.getText().toString(),visibility);}  }
class C{  public static float byte315ToFloat(byte b){  if (b == 0)   return 0.0f;  int bits=(b & 0xff) << (24 - 3);  bits+=(63 - 15) << 24;  return Float.intBitsToFloat(bits);}  }
class C{  public static long invgrayC(long v){  v^=(v >>> 1);  v^=(v >>> 2);  v^=(v >>> 4);  v^=(v >>> 8);  v^=(v >>> 16);  v^=(v >>> 32);  return v;}  }
class C{  public DagInPatternIterator(Graph pattern,IKnowledge knowledge,boolean allowArbitraryOrientations,boolean allowNewColliders){  if (knowledge == null) {    this.knowledge=new Knowledge2();  } else {    this.knowledge=knowledge;  }  this.allowNewColliders=allowNewColliders;  assert knowledge != null;  if (knowledge.isViolatedBy(pattern)) {    throw new IllegalArgumentException("The pattern already violates that knowledge.");  }  HashMap<Graph,Set<Edge>> changedEdges=new HashMap<>();  changedEdges.put(pattern,new HashSet<Edge>());  decoratedGraphs.add(new DecoratedGraph(pattern,getKnowledge(),changedEdges,allowArbitraryOrientations));  this.colliders=GraphUtils.listColliderTriples(pattern);}  }
class C{  public boolean addAliasByNumber(String aliasName,String number){  if (aliasName.contains("'"))   return false;  String contactName=ContactsManager.getContactNameOrNull(ctx,number);  addOrUpdate(aliasName,number,contactName);  return true;}  }
class C{  @POST @Consumes("application/json") @ApiOperation(value="Add a stock item",notes="Add a valid stock item") public void addStock(@ApiParam(value="Stock object",required=true) Stock stock) throws DuplicateSymbolException {  String symbol=stock.getSymbol();  if (stockQuotes.containsKey(symbol)) {    throw new DuplicateSymbolException("Symbol " + symbol + " already exists");  }  stockQuotes.put(symbol,stock);}  }
class C{  public TypeVariable typeVariable(Type type){  return typeVariable(ClassHierarchy.v().typeNode(type));}  }
class C{  private static void extractDirective(String key,byte[] value,String[] keyTable,byte[][] valueTable,List<byte[]> realmChoices,int realmIndex) throws SaslException {  for (int i=0; i < keyTable.length; i++) {    if (key.equalsIgnoreCase(keyTable[i])) {      if (valueTable[i] == null) {        valueTable[i]=value;        if (logger.isLoggable(Level.FINE)) {          logger.log(Level.FINE,"DIGEST11:Directive {0} = {1}",new Object[]{keyTable[i],new String(valueTable[i])});        }      } else       if (realmChoices != null && i == realmIndex) {        if (realmChoices.isEmpty()) {          realmChoices.add(valueTable[i]);        }        realmChoices.add(value);      } else {        throw new SaslException("DIGEST-MD5: peer sent more than one " + key + " directive: "+ new String(value));      }      break;    }  }}  }
class C{  public final boolean hasCategory(String category){  return mCategories != null && mCategories.contains(category);}  }
class C{  private long endTime(){  long endTime=System.currentTimeMillis();  Task<T> finishedTask=tasks.latestFinishedTask();  if (finishedTask != null && finishedTask.getEndTime() != null) {    endTime=finishedTask.getEndTime().getTimeInMillis();  }  return endTime;}  }
class C{  private void endSection() throws SAXException {  for (int i=0, len=currentSection.validators.size(); i < len; i++) {    Validator validator=(Validator)currentSection.validators.elementAt(i);    cleanupHandler(validator.getContentHandler());    releaseValidator((Schema)currentSection.schemas.elementAt(i),validator);    currentSection.validators.setElementAt(null,i);  }  currentSection=currentSection.parent;}  }
class C{  private void writeFlowModToSwitch(DatapathId dpid,OFFlowMod flowMod){  IOFSwitch ofSwitch=switchService.getSwitch(dpid);  if (ofSwitch == null) {    if (log.isDebugEnabled()) {      log.debug("Not deleting key {} :: switch {} not connected",dpid.toString());    }    return;  }  writeFlowModToSwitch(ofSwitch,flowMod);}  }
class C{  public static String quoteIdentifier(String identifier,boolean isPedantic){  return quoteIdentifier(identifier,"`",isPedantic);}  }
class C{  public static PropertyValuesHolder ofInt(String propertyName,int... values){  return new IntPropertyValuesHolder(propertyName,values);}  }
class C{  private static String maybeGetDevJarPath(IJavaProject project){  try {    if (GWTProjectsRuntime.isGWTRuntimeProject(project)) {      GwtSdk tempContribSDK=GWTProjectsRuntime.syntheziseContributorRuntime();      if (tempContribSDK.validate().isOK()) {        return tempContribSDK.getDevJar().getAbsolutePath();      } else {        return "";      }    }    GwtSdk sdk=GwtSdk.findSdkFor(project);    if (sdk.usesGwtDevProject()) {      File gwtDevJarFile=sdk.getDevJar();      return gwtDevJarFile.getAbsolutePath();    }  } catch (  SdkException sdke) {    GWTPluginLog.logError(sdke,"Unable to extract gwt dev jar argument from GWTProjectsRuntime");  }catch (  JavaModelException jme) {    GWTPluginLog.logError(jme,"Unable to extract gwt dev jar argument from GWTProjectsRuntime");  }  return "";}  }
class C{  public static char binaryToHexDigit(final boolean[] src,final int srcPos){  if (src.length == 0) {    throw new IllegalArgumentException("Cannot convert an empty array.");  }  if (src.length > srcPos + 3 && src[srcPos + 3]) {    if (src.length > srcPos + 2 && src[srcPos + 2]) {      if (src.length > srcPos + 1 && src[srcPos + 1]) {        return src[srcPos] ? 'f' : 'e';      }      return src[srcPos] ? 'd' : 'c';    }    if (src.length > srcPos + 1 && src[srcPos + 1]) {      return src[srcPos] ? 'b' : 'a';    }    return src[srcPos] ? '9' : '8';  }  if (src.length > srcPos + 2 && src[srcPos + 2]) {    if (src.length > srcPos + 1 && src[srcPos + 1]) {      return src[srcPos] ? '7' : '6';    }    return src[srcPos] ? '5' : '4';  }  if (src.length > srcPos + 1 && src[srcPos + 1]) {    return src[srcPos] ? '3' : '2';  }  return src[srcPos] ? '1' : '0';}  }
class C{  private static int compareVersion(String versionStr1,String versionStr2){  if (versionStr1 == null) {    throw new MLContextException("First version argument to compareVersion() is null");  }  if (versionStr2 == null) {    throw new MLContextException("Second version argument to compareVersion() is null");  }  Scanner scanner1=null;  Scanner scanner2=null;  try {    scanner1=new Scanner(versionStr1);    scanner2=new Scanner(versionStr2);    scanner1.useDelimiter("\\.");    scanner2.useDelimiter("\\.");    while (scanner1.hasNextInt() && scanner2.hasNextInt()) {      int version1=scanner1.nextInt();      int version2=scanner2.nextInt();      if (version1 < version2) {        return -1;      } else       if (version1 > version2) {        return 1;      }    }    return scanner1.hasNextInt() ? 1 : 0;  }  finally {    scanner1.close();    scanner2.close();  }}  }
class C{  public static void swap(long[] array){  for (int i=0; i < array.length; i++)   array[i]=swap(array[i]);}  }
class C{  @Override public void writeValueEOF(){  m_oId=null;  m_jTaxID.setText(null);  m_jSearchkey.setText(null);  m_jName.setText(null);  m_CategoryModel.setSelectedKey(null);  m_jNotes.setText(null);  txtMaxdebt.setText(null);  txtDiscount.setText(null);  txtCurdebt.setText(null);  txtCurdate.setText(null);  m_jVisible.setSelected(false);  jcard.setText(null);  txtFirstName.setText(null);  txtLastName.setText(null);  txtEmail.setText(null);  txtPhone.setText(null);  txtPhone2.setText(null);  txtFax.setText(null);  m_jImage.setImage(null);  txtAddress.setText(null);  txtAddress2.setText(null);  txtPostal.setText(null);  txtCity.setText(null);  txtRegion.setText(null);  txtCountry.setText(null);  j_mDOB.setText(null);  m_jTaxID.setEnabled(false);  m_jSearchkey.setEnabled(false);  m_jName.setEnabled(false);  m_jCategory.setEnabled(false);  m_jNotes.setEnabled(false);  txtMaxdebt.setEnabled(false);  txtDiscount.setEnabled(false);  txtCurdebt.setEnabled(false);  txtCurdate.setEnabled(false);  m_jVisible.setEnabled(false);  jcard.setEnabled(false);  txtFirstName.setEnabled(false);  txtLastName.setEnabled(false);  txtEmail.setEnabled(false);  txtPhone.setEnabled(false);  txtPhone2.setEnabled(false);  txtFax.setEnabled(false);  m_jImage.setEnabled(false);  txtAddress.setEnabled(false);  txtAddress2.setEnabled(false);  txtPostal.setEnabled(false);  txtCity.setEnabled(false);  txtRegion.setEnabled(false);  txtCountry.setEnabled(false);  jButton2.setEnabled(false);  jButton3.setEnabled(false);  jTable1.setEnabled(false);  jTable1.setVisible(false);  j_mDOB.setEnabled(false);}  }
class C{  public Iterator iterator(){  return options.iterator();}  }
class C{  public static void save(Tree t,Parser parser,String fileName) throws IOException, PrintException {  List<String> ruleNames=parser != null ? Arrays.asList(parser.getRuleNames()) : null;  save(t,ruleNames,fileName);}  }
class C{  private int calculateInitialRotation(){  final File[] matchingFiles=getMatchingFiles();  if (null == matchingFiles || 0 == matchingFiles.length) {    return 0;  }  final int[] rotations=calculateRotations(matchingFiles);  int maxRotation=0;  for (int i=0; i < rotations.length; i++) {    final int rotation=rotations[i];    if (rotation > maxRotation) {      maxRotation=rotation;    }  }  if (m_maxRotations != maxRotation) {    return maxRotation + 1;  }  long time=matchingFiles[0].lastModified();  int oldest=rotations[0];  for (int i=0; i < matchingFiles.length; i++) {    final File file=matchingFiles[i];    final long lastModified=file.lastModified();    if (lastModified < time) {      time=lastModified;      oldest=rotations[i];    }  }  return oldest;}  }
class C{  public MultipartFormContentType(){  this.boundary=createBoundary();}  }
class C{  public static Calendar toCalendar(String datestring,String format){  Date d=parse(datestring,format);  Calendar cal=Calendar.getInstance();  cal.setTimeInMillis(d.getTime());  return cal;}  }
class C{  public void onEvent(Event e){  if (e.getTarget().getId().equals(ConfirmPanel.A_CANCEL))   dispose(); else   if (e.getTarget().getId().equals(ConfirmPanel.A_REFRESH) || e.getTarget().getId().equals(ConfirmPanel.A_OK))   refresh(); else   if (e.getTarget().getId().equals(ConfirmPanel.A_ZOOM))   zoom();}  }
class C{  public boolean contains(int x,int y){  return left < right && top < bottom && x >= left && x < right && y >= top && y < bottom;}  }
class C{  protected void printlnIdentifier(String identifier,StringBuilder ddl){  println(getDelimitedIdentifier(identifier),ddl);}  }
class C{  public WindowBuilder layout(final AbstractLayout layout){  this.layout=layout;  return this;}  }
class C{  public int closestAxisPlane(){  double xmag=Math.abs(normal.getX());  double ymag=Math.abs(normal.getY());  double zmag=Math.abs(normal.getZ());  if (xmag > ymag) {    if (xmag > zmag)     return YZ_PLANE; else     return XY_PLANE;  } else   if (zmag > ymag) {    return XY_PLANE;  }  return XZ_PLANE;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public synchronized void close(){  if (closed)   return;  Code.wrapThrow(null);  closed=true;}  }
class C{  private void createExplosion(float x,float y,float maxForce){  float force;  Vector2 touch=new Vector2(x,y);  for (int i=0; i < bodies.length; i++) {    Body b=bodies[i];    Vector2 v=b.getPosition();    float dist=v.dst2(touch);    if (dist == 0)     force=maxForce; else     force=MathUtils.clamp(maxForce / dist,0,maxForce);    float angle=v.cpy().sub(touch).angle();    float xForce=force * MathUtils.cosDeg(angle);    float yForce=force * MathUtils.sinDeg(angle);    Vector3 touch3, v3, boundMin, boundMax, intersection;    touch3=new Vector3(touch.x,touch.y,0);    v3=new Vector3(v.x,v.y,0);    boundMin=new Vector3(v.x - 1,v.y - 1,0);    boundMax=new Vector3(v.x + 1,v.y + 1,0);    intersection=Vector3.Zero;    Intersector.intersectRayBounds(new Ray(touch3,v3),new BoundingBox(boundMin,boundMax),intersection);    b.applyForce(new Vector2(xForce,yForce),new Vector2(intersection.x,intersection.y),true);  }}  }
class C{  public static boolean isAttachment(String contentDisposition){  return contentDisposition != null && contentDisposition.regionMatches(true,0,"attachment",0,10);}  }
class C{  public void startRecording(EncoderConfig config){  Log.d(TAG,"Encoder: startRecording()");synchronized (mReadyFence) {    if (mRunning) {      Log.w(TAG,"Encoder thread already running");      return;    }    mRunning=true;    new Thread(this,"TextureMovieEncoder").start();    while (!mReady) {      try {        mReadyFence.wait();      } catch (      InterruptedException ie) {      }    }  }  mHandler.sendMessage(mHandler.obtainMessage(MSG_START_RECORDING,config));}  }
class C{  private void reportError(String context,String fmt,Object... args){  String message=String.format(fmt,args);  reasons.add(context + ": " + message);}  }
class C{  public SlidingWindows withOffset(Duration offset){  return new SlidingWindows(period,size,offset);}  }
class C{  public synchronized void playDead(){  if (!playingDead) {    playingDead=true;    logger.info("GroupMembershipService.playDead invoked for {}",this.address);    services.getJoinLeave().playDead();    services.getHealthMonitor().playDead();    services.getMessenger().playDead();  }}  }
class C{  public static boolean isTestDir(String dirName){  return (!dirName.equals("script-tests") && !dirName.equals("resources") && !dirName.startsWith("."));}  }
class C{  public static java.util.Date parseDateTime(String date,String format,String locale,String timeZone){  SimpleDateFormat dateFormat=getDateFormat(format,locale,timeZone);  try {synchronized (dateFormat) {      return dateFormat.parse(date);    }  } catch (  Exception e) {    throw DbException.get(ErrorCode.PARSE_ERROR_1,e,date);  }}  }
class C{  private static int readBgzfBlock(InputStream fis,byte[] buf,BgzfBlock block) throws IOException {  final int first=fis.read();  if (first == -1) {    return -1;  }  int tot=1;  tot+=readIOFully(fis,buf,11);  block.mExtraLength=ByteArrayIOUtils.bytesToShortLittleEndian(buf,9);  tot+=readIOFully(fis,buf,block.mExtraLength);  if (block.mExtraLength < 6) {    throw new IOException("Not a valid BGZF file");  }  block.mBlockSize=ByteArrayIOUtils.bytesToShortLittleEndian(buf,4);  tot+=readIOFully(fis,block.mData,block.mBlockSize - block.mExtraLength - 19);  tot+=readIOFully(fis,buf,8);  block.mCrc=ByteArrayIOUtils.bytesToIntLittleEndian(buf,0);  block.mInputSize=ByteArrayIOUtils.bytesToIntLittleEndian(buf,4);  assert tot == block.mBlockSize + 1 : "tot: " + tot + " blocksize: "+ block.mBlockSize;  return tot;}  }
class C{  public boolean canUndo(){  return alive && hasBeenDone;}  }
class C{  public static boolean isDefined(int codePoint){  return getType(codePoint) != Character.UNASSIGNED;}  }
class C{  private void createMediaPlayerIfNeeded(){  LogHelper.d(TAG,"createMediaPlayerIfNeeded. needed? ",(mMediaPlayer == null));  if (mMediaPlayer == null) {    mMediaPlayer=new MediaPlayer();    mMediaPlayer.setWakeMode(mContext.getApplicationContext(),PowerManager.PARTIAL_WAKE_LOCK);    mMediaPlayer.setOnPreparedListener(this);    mMediaPlayer.setOnCompletionListener(this);    mMediaPlayer.setOnErrorListener(this);    mMediaPlayer.setOnSeekCompleteListener(this);  } else {    mMediaPlayer.reset();  }}  }
class C{  public void close(){  client.close();  client=null;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.ANNOTABLE_N4_MEMBER_DECLARATION__ANNOTATION_LIST:    return annotationList != null;}return super.eIsSet(featureID);}  }
class C{  public ExtentTest fail(Throwable t){  log(Status.FAIL,t);  return this;}  }
class C{  private boolean checkMemberAccess(){  if (this.previousToken == TokenNameDOT && this.qualifier > -1 && this.expressionPtr == this.qualifier) {    if (this.identifierLengthPtr > 1 && this.identifierLengthStack[this.identifierLengthPtr - 1] < 0) {      return false;    }    pushCompletionOnMemberAccessOnExpressionStack(false);    return true;  }  return false;}  }
class C{  protected static void check_unused(){  terminal term;  non_terminal nt;  for (Enumeration t=terminal.all(); t.hasMoreElements(); ) {    term=(terminal)t.nextElement();    if (term == terminal.EOF)     continue;    if (term == terminal.error)     continue;    if (term.use_count() == 0) {      emit.unused_term++;      if (!emit.nowarn) {        System.err.println("Warning: Terminal \"" + term.name() + "\" was declared but never used");        lexer.warning_count++;      }    }  }  for (Enumeration n=non_terminal.all(); n.hasMoreElements(); ) {    nt=(non_terminal)n.nextElement();    if (nt.use_count() == 0) {      emit.unused_term++;      if (!emit.nowarn) {        System.err.println("Warning: Non terminal \"" + nt.name() + "\" was declared but never used");        lexer.warning_count++;      }    }  }}  }
class C{  public GridCacheBatchSwapEntry(KeyCacheObject key,int part,ByteBuffer valBytes,byte type,GridCacheVersion ver,long ttl,long expireTime,IgniteUuid keyClsLdrId,@Nullable IgniteUuid valClsLdrId){  super(valBytes,type,ver,ttl,expireTime,keyClsLdrId,valClsLdrId);  this.key=key;  this.part=part;}  }
class C{  @Override public final String sourceExpression(int index,Instances data){  return m_c45S.sourceExpression(index,data);}  }
class C{  public static byte[] decode(String s,int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  boolean dontGunzip=(options & DONT_GUNZIP) != 0;  if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {        e.printStackTrace();      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  private void addVNXFileStorageSystemIntoCache(String storageSystemURI,DistributedQueueItemProcessedCallback callBack){  if (StringUtils.isNotEmpty(storageSystemURI)) {    VNXFILE_CACHE.put(storageSystemURI,callBack);  }}  }
class C{  static byte complement(final byte b){  if (b == 0) {    return 0;  }  return (byte)(5 - b);}  }
class C{  final void updateHead(Node<E> h,Node<E> p){  if (h != p && casHead(h,p))   h.lazySetNext(h);}  }
class C{  private void verifyWebSocketKey(String key,String accept) throws NoSuchAlgorithmException, HandshakeFailedException {  byte[] sha1Bytes=sha1(key + ACCEPT_SALT);  String encodedSha1Bytes=Base64.encodeBytes(sha1Bytes).trim();  if (!encodedSha1Bytes.equals(encodedSha1Bytes)) {    throw new HandshakeFailedException();  }}  }
class C{  public AbstractItem(final int id,@Nullable final CharSequence title){  this.id=id;  this.title=title;}  }
class C{  public void flush(){  updateQueue();  while (getQueueSize() > 0) {    updateQueue();    try {      Thread.sleep(10);    } catch (    InterruptedException e) {      throw new RuntimeException(e);    }  }}  }
class C{  protected String readLines(int startingLineNumber,String classpathResource){  try (InputStream stream=getClass().getClassLoader().getResourceAsStream(classpathResource)){    assertThat(stream).isNotNull();    StringBuilder sb=new StringBuilder();    AtomicInteger counter=new AtomicInteger();    IoUtil.readLines(stream,null);    return sb.toString();  } catch (  IOException e) {    fail("Unable to read '" + classpathResource + "'");  }  assert false : "should never get here";  return null;}  }
class C{  public static Predicate<Number> odd(){  return even().negate();}  }
class C{  public void testFilterPlacement04(){  new Helper(){{      given=select(varNode(x),where(stmtPatternWithVar("x1"),stmtPatternWithVarOptional("x2"),stmtPatternWithVarOptional("x2"),stmtPatternWithVar("x2"),stmtPatternWithVars("x2","x3"),stmtPatternWithVarOptional("y2"),filterWithVars("x1","x2"),filterWithVar("y2")));      expected=select(varNode(x),where(stmtPatternWithVar("x1"),stmtPatternWithVarOptional("x2"),stmtPatternWithVarOptional("x2"),stmtPatternWithVar("x2"),filterWithVars("x1","x2"),stmtPatternWithVars("x2","x3"),stmtPatternWithVarOptional("y2"),filterWithVar("y2")));    }  }.testWhileIgnoringExplainHints();}  }
class C{  @Benchmark public long factorialConditional(){  return factConditionl(n);}  }
class C{  private boolean isValidState(String key){  if (key == null) {    return false;  }  if (key.equals(rbean.getString("SignalHeadStateDark")) || key.equals(rbean.getString("SignalHeadStateHeld"))) {    if (log.isDebugEnabled()) {      log.debug(key + " is a valid state. ");    }    return true;  }  for (int i=0; i < _validKey.length; i++) {    if (key.equals(_validKey[i])) {      if (log.isDebugEnabled()) {        log.debug(key + " is a valid state. ");      }      return true;    }  }  if (log.isDebugEnabled()) {    log.debug(key + " is NOT a valid state. ");  }  return false;}  }
class C{  public void paintSliderBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  public static void removePlayer(final String playerName,final StendhalRPZone zone){  final Player player=MockStendhalRPRuleProcessor.get().getPlayer(playerName);  if (player != null) {    unregisterPlayer(player,zone);  }}  }
class C{  protected final void insertSamlToken(SoapMessage message,String elementNamespace,String elementLocalName,SamlToken token) throws ParserException {  Document messageDocument=message.getMessage().getSOAPPart();  NodeList targetElement=messageDocument.getElementsByTagNameNS(elementNamespace,elementLocalName);  if (targetElement == null || targetElement.getLength() != 1) {    String errMsg="Error inserting SAML token into the SOAP message. " + "No/Too many " + elementLocalName + " found.";    log.debug(errMsg);    throw new ParserException(errMsg);  }  Node copiedToken=token.importTo(messageDocument);  targetElement.item(0).appendChild(copiedToken);}  }
class C{  public static void cancelTouchEvent(View view){  final long now=SystemClock.uptimeMillis();  MotionEvent event=MotionEvent.obtain(now,now,MotionEvent.ACTION_CANCEL,0.0f,0.0f,0);  view.dispatchTouchEvent(event);  event.recycle();}  }
class C{  public BooleanSparseArrayDataRow(int size){  super(size);  values=new boolean[size];}  }
class C{  private void loadStringValue(JTextField comp,final String elementName){  String propValue=properties.getValue(elementName);  if (propValue != null && !propValue.isEmpty()) {    comp.setText(propValue);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.551 -0400",hash_original_method="C216811775A6723BB41E0D3A835823FC",hash_generated_method="2E1788EBA86DBE00B0A103790D8375CB") public static Tailer create(File file,TailerListener listener,long delayMillis,boolean end,int bufSize){  Tailer tailer=new Tailer(file,listener,delayMillis,end,bufSize);  Thread thread=new Thread(tailer);  thread.setDaemon(true);  thread.start();  return tailer;}  }
class C{  @Override public void updateStatus(JobContext jobContext) throws Exception {  LogicalUnit logicalUnit=null;  try {    if (_status == JobStatus.IN_PROGRESS) {      return;    }    DbClient dbClient=jobContext.getDbClient();    String opId=getTaskCompleter().getOpId();    StringBuilder logMsgBuilder=new StringBuilder(String.format("Updating status of job %s to %s, task: %s",this.getJobName(),_status.name(),opId));    if (_status == JobStatus.SUCCESS) {      logicalUnit=(LogicalUnit)_javaResult.getBean("logicalunit");      if (null != logicalUnit.getLdevList() && !logicalUnit.getLdevList().isEmpty()) {        Iterator<LDEV> ldevListItr=logicalUnit.getLdevList().iterator();        if (ldevListItr.hasNext()) {          LDEV ldev=ldevListItr.next();          if (null != ldev && -1 != ldev.getTierLevel()) {            logMsgBuilder.append(String.format("Task %s is successful to update volume %s tieringPolicy: %s",opId,logicalUnit.getObjectID(),ldev.getTierLevel()));          }        }      }    } else     if (_status == JobStatus.FAILED && VOLUME_MODIFY_JOB.equalsIgnoreCase(getJobName())) {      URI id=getTaskCompleter().getId();      logMsgBuilder.append(String.format("Task %s failed to update volume tieringPolicy: %s",opId,id.toString()));      Volume volume=dbClient.queryObject(Volume.class,id);      volume.setInactive(true);      dbClient.persistObject(volume);    }    log.info(logMsgBuilder.toString());  } catch (  Exception e) {    log.error("Caught an exception while trying to updating tieringPolicy of the volume",e);    setErrorStatus("Encountered an internal error during tieringPolicy updation of volume: " + e.getMessage());  } finally {    super.updateStatus(jobContext);  }}  }
class C{  public void ImportHastusSchedule(String filename) throws IOException {  final String[] SKIPPABLE={"Block","Note","From","To"};  final String COLON=":";  ArrayList<String> SkippedHeaders=new ArrayList<String>();  for (  String s : SKIPPABLE)   SkippedHeaders.add(s);  String currentRouteName="";  String currentDirectionName="";  Integer currentBranchNumber=0;  String currentColumnWidths="";  ArrayList<String> currentStops=new ArrayList<String>();  ArrayList<String> currentCells=null;  BufferedReader reader=new BufferedReader(new FileReader(filename));  String fileLine=reader.readLine();  do {    if (fileLine.split(COLON).length > 1) {      currentRouteName=fileLine.split(COLON)[1];      currentDirectionName=reader.readLine().split(COLON)[1];      currentColumnWidths=reader.readLine();      currentStops=SplitFixedWidth(reader.readLine(),getFixedColumnWidths(currentColumnWidths));      currentBranchNumber=0;    } else {      currentCells=SplitFixedWidth(fileLine,getFixedColumnWidths(currentColumnWidths));      boolean[] emptyCells=new boolean[currentCells.size()];      for (int i=0; i < currentCells.size(); i++)       emptyCells[i]=(currentCells.get(i).isEmpty() || SkippedHeaders.contains(currentCells.get(i)));      if (currentCells.size() > currentStops.size()) {        System.err.println("ERROR: Stop header length doesn't match timetable length!");      }      ArrayList<String> tempStops=new ArrayList<String>();      for (int i=0; i < currentCells.size(); i++)       if (!(emptyCells[i]))       tempStops.add(currentStops.get(i));      if (tempStops.size() == 1) {        System.err.println("check here!");      }      if (!(SearchForStopSequence(tempStops))) {        ScheduledRoute newRoute=new ScheduledRoute(currentRouteName,currentDirectionName,"" + currentBranchNumber++,tempStops);        int currentStopIndex=0;        for (int i=0; i < currentCells.size(); i++) {          if (!(emptyCells[i])) {            String parsedArrivalTime=currentCells.get(i);            newRoute.getStop(currentStopIndex++).AddTime(new Tuple<String,String>(parsedArrivalTime,""));          }        }        this.routes.add(newRoute);      } else {        int currentRouteIndex=MatchStopSequence(tempStops);        int currentStopIndex=0;        for (int i=0; i < currentCells.size(); i++) {          String parsedArrivalTime=currentCells.get(i);          if (!(emptyCells[i])) {            this.routes.get(currentRouteIndex).getStop(currentStopIndex++).AddTime(new Tuple<String,String>(parsedArrivalTime,""));          }        }      }    }    fileLine=reader.readLine();  } while (fileLine != null);  for (  ScheduledRoute R : this.routes) {    System.out.println(R.id + "(" + R.direction+ "): "+ R.getStopSequence().toString());  }  System.out.println("...done");}  }
class C{  @BeforeMethod(alwaysRun=true) public void doBeforeMethod(ITestContext tc,ITestResult tr,Method m) throws Exception {  final String mname=m.getName();  currentTest=this.getClass().getName() + "." + mname;  logger.info(String.format("************************ %s *******************",currentTest));  gondolaRc.start();  member1=gondolaRc.getMember(4);  member2=gondolaRc.getMember(5);  member3=gondolaRc.getMember(6);  members=Stream.of(member1,member2,member3).collect(Collectors.toList());  startTimer=System.currentTimeMillis();}  }
class C{  public static OutputStream createOutputStream(File file,boolean zip,boolean append) throws IOException {  return createOutputStream(file,zip,append,false);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static float b2f(boolean inp){  return inp ? 1f : -1f;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ExpressionsPackage.BITWISE_AND_EXPRESSION__LEFT_OPERAND:    return basicSetLeftOperand(null,msgs);case ExpressionsPackage.BITWISE_AND_EXPRESSION__RIGHT_OPERAND:  return basicSetRightOperand(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public Random(long seed,boolean debug){  super(seed);  setDebug(debug);  m_ID=nextID();  if (getDebug())   printStackTrace();}  }
class C{  public void updateUI(){  setUI((SeparatorUI)UIManager.getUI(this));}  }
class C{  private void doTestTopStatsWithRefinement(final boolean allStats) throws Exception {  String stat_param=allStats ? "{!tag=s1}foo_i" : "{!tag=s1 min=true max=true count=true missing=true}foo_i";  ModifiableSolrParams coreParams=params("q","*:*","rows","0","stats","true","stats.field",stat_param);  ModifiableSolrParams facetParams=new ModifiableSolrParams(coreParams);  facetParams.add(params("facet","true","facet.limit","1","facet.pivot","{!stats=s1}place_t,company_t"));  ModifiableSolrParams facetForceRefineParams=new ModifiableSolrParams(facetParams);  facetForceRefineParams.add(params(FacetParams.FACET_OVERREQUEST_COUNT,"0",FacetParams.FACET_OVERREQUEST_RATIO,"0"));  for (  ModifiableSolrParams params : new ModifiableSolrParams[]{coreParams,facetParams,facetForceRefineParams}) {    ModifiableSolrParams q=new ModifiableSolrParams(params);    q.set("shards",getShardsString());    QueryResponse rsp=queryServer(q);    FieldStatsInfo fieldStatsInfo=rsp.getFieldStatsInfo().get("foo_i");    String msg=q.toString();    assertEquals(msg,3.0,fieldStatsInfo.getMin());    assertEquals(msg,91.0,fieldStatsInfo.getMax());    assertEquals(msg,10,(long)fieldStatsInfo.getCount());    assertEquals(msg,0,(long)fieldStatsInfo.getMissing());    if (allStats) {      assertEquals(msg,248.0,fieldStatsInfo.getSum());      assertEquals(msg,15294.0,fieldStatsInfo.getSumOfSquares(),0.1E-7);      assertEquals(msg,24.8,(double)fieldStatsInfo.getMean(),0.1E-7);      assertEquals(msg,31.87405772027709,fieldStatsInfo.getStddev(),0.1E-7);    } else {      assertNull(msg,fieldStatsInfo.getSum());      assertNull(msg,fieldStatsInfo.getSumOfSquares());      assertNull(msg,fieldStatsInfo.getMean());      assertNull(msg,fieldStatsInfo.getStddev());    }    if (params.getBool("facet",false)) {      List<PivotField> placePivots=rsp.getFacetPivot().get("place_t,company_t");      assertEquals(1,placePivots.size());      PivotField dublinPivotField=placePivots.get(0);      assertEquals("dublin",dublinPivotField.getValue());      assertEquals(4,dublinPivotField.getCount());      assertEquals(1,dublinPivotField.getPivot().size());      PivotField microsoftPivotField=dublinPivotField.getPivot().get(0);      assertEquals("microsoft",microsoftPivotField.getValue());      assertEquals(4,microsoftPivotField.getCount());      FieldStatsInfo dublinMicrosoftStatsInfo=microsoftPivotField.getFieldStatsInfo().get("foo_i");      assertEquals(3.0D,dublinMicrosoftStatsInfo.getMin());      assertEquals(91.0D,dublinMicrosoftStatsInfo.getMax());      assertEquals(4,(long)dublinMicrosoftStatsInfo.getCount());      assertEquals(0,(long)dublinMicrosoftStatsInfo.getMissing());      if (!allStats) {        assertNull(msg,dublinMicrosoftStatsInfo.getSum());        assertNull(msg,dublinMicrosoftStatsInfo.getSumOfSquares());        assertNull(msg,dublinMicrosoftStatsInfo.getMean());        assertNull(msg,dublinMicrosoftStatsInfo.getStddev());      }    }  }  Object s0pivValue=clients.get(0).query(facetParams).getFacetPivot().get("place_t,company_t").get(0).getValue();  Object s1pivValue=clients.get(1).query(facetParams).getFacetPivot().get("place_t,company_t").get(0).getValue();  assertFalse("both shards have same top constraint, test is invalid" + "(did someone change the test data?) ==> " + s0pivValue + "=="+ s1pivValue,s0pivValue.equals(s1pivValue));}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deregister") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public CustomConfigRestRep deregisterCustomConfig(@PathParam("id") URI id){  CustomConfig config=getCustomConfigById(id,true);  if (config.getSystemDefault()) {    throw APIException.badRequests.systemDefaultConfigCouldNotBeModifiedOrDeactivated(config.getId());  }  config.setRegistered(false);  _dbClient.updateAndReindexObject(config);  auditOp(OperationTypeEnum.DEREGISTER_CONFIG,true,null,config.getId().toString(),config.getLabel(),config.getScope());  return DbObjectMapper.map(config);}  }
class C{  public static String atan(String[] params) throws FBSQLParseException {  if (params.length != 1)   throw new FBSQLParseException("Incorrect number of " + "parameters of function atan : " + params.length);  return "atan(" + params[0] + ")";}  }
class C{  protected ReplyProcessor21(DM dm,InternalDistributedSystem system,Collection initMembers,CancelCriterion cancelCriterion,boolean register){  if (!allowReplyFromSender()) {    Assert.assertTrue(initMembers != null,"null initMembers");    Assert.assertTrue(system != null,"null system");    if (dm != null) {      Assert.assertTrue(!initMembers.contains(dm.getId()),"dm present in initMembers but reply from sender is not allowed");    }  }  this.system=system;  this.dmgr=dm;  if (cancelCriterion == null) {    cancelCriterion=dm.getCancelCriterion();  }  this.latch=new StoppableCountDownLatch(cancelCriterion,1);  int sz=initMembers.size();  this.members=new InternalDistributedMember[sz];  if (sz > 0) {    int i=0;    for (Iterator it=initMembers.iterator(); it.hasNext(); i++) {      this.members[i]=(InternalDistributedMember)it.next();    }  }  this.done=false;  this.shutdown=false;  this.exception=null;  if (register) {    register();  }  this.keeperCleanedUp=false;  this.initTime=System.currentTimeMillis();}  }
class C{  public void addChild(FeatureTreeNode child) throws FeatureParsingException {  if (this.isMetadataNode) {    throw new FeatureParsingException("You can not add a child for metadata nodes. Node name " + this.name + ", value: "+ this.value+ ".");  }  if (child != null) {    if (this.value == null) {      this.children.add(child);      child.parent=this;    } else {      throw new FeatureParsingException("You can not add a child for nodes with defined values. Node name " + this.name + ", value: "+ this.value+ ".");    }  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return NODE_ID;case 3:return AUTH_SCHEME;case 4:return AUTH_CHALLENGE_RESPONSE;default :return null;}}  }
class C{  private static RE brzozowski(Automaton fsm) throws InterruptedException {  logger.debug("Brzozowski");  String singleton=fsm.getSingleton();  if (singleton != null) {    return mkString(singleton);  }  if (fsm.isEmpty()) {    logger.debug("Empty language");  }  if (fsm.getAcceptStates().size() == 0) {    logger.debug("No Accept States");    return empty;  }  if (fsm.getNumberOfStates() > 5000) {    logger.debug("Way too many states, so minimizing");    fsm.minimize();  }  int m=fsm.getNumberOfStates();  int idx=0;  logger.debug("Have " + m + " states");  logger.debug("Allocating Arrays");  RE[][] a=new RE[m][m];  RE[] b=new RE[m];  logger.debug("Done Allocating Arrays");  Map<State,Integer> sm=new HashMap<State,Integer>();  State initial=fsm.getInitialState();  Set<State> available=fsm.getLiveStates();  logger.debug("Got Live States!");  Set<State> done=new HashSet<State>();  ArrayList<State> worklist=new ArrayList<State>();  idx=0;  worklist.add(initial);  while (!worklist.isEmpty()) {    if (Thread.interrupted())     throw new InterruptedException();    State cur=worklist.remove(0);    if (!done.contains(cur)) {      sm.put(cur,idx);      if (cur.isAccept()) {        b[idx]=epsilon;      } else {        b[idx]=empty;      }      done.add(cur);      idx++;      for (      Transition t : cur.getTransitions()) {        State dest=t.getDest();        if (available.contains(dest) && (!done.contains(dest))) {          worklist.add(dest);        }      }    }  }  for (  State s : fsm.getStates()) {    int i=sm.get(s);    for (int j=0; j < m; j++)     a[i][j]=empty;    for (    Transition t : s.getTransitions()) {      int j=sm.get(t.getDest());      RE e=RE.mkRange(t.getMin(),t.getMax());      a[i][j]=a[i][j].union(e);    }  }  for (int n=m - 1; n >= 0; n--) {    b[n]=a[n][n].star().concat(b[n]);    for (int j=0; j < n; j++) {      a[n][j]=a[n][n].star().concat(a[n][j]);    }    for (int i=0; i < n; i++) {      b[i]=b[i].union(a[i][n].concat(b[n]));      for (int j=0; j < n; j++) {        a[i][j]=a[i][j].union(a[i][n].concat(a[n][j]));      }    }    for (int i=0; i < n; i++) {      a[i][n]=empty;    }  }  RE res=b[sm.get(fsm.getInitialState())];  return res;}  }
class C{  public Object call(int objectid,int methodid,Object[] args) throws RemoteException {  boolean result;  Object rvalue;  String errmsg;  try {    Socket sock=new Socket(servername,port);    OutputStream out=new BufferedOutputStream(sock.getOutputStream());    out.write(rmiCommand);    out.write(endofline);    out.write(endofline);    ObjectOutputStream dout=new ObjectOutputStream(out);    dout.writeInt(objectid);    dout.writeInt(methodid);    writeParameters(dout,args);    dout.flush();    InputStream ins=new BufferedInputStream(sock.getInputStream());    skipHeader(ins);    ObjectInputStream din=new ObjectInputStream(ins);    result=din.readBoolean();    rvalue=null;    errmsg=null;    if (result)     rvalue=din.readObject(); else     errmsg=din.readUTF();    din.close();    dout.close();    sock.close();    if (rvalue instanceof RemoteRef) {      RemoteRef ref=(RemoteRef)rvalue;      rvalue=createProxy(ref.oid,ref.classname);    }  } catch (  ClassNotFoundException e) {    throw new RemoteException(e);  }catch (  IOException e) {    throw new RemoteException(e);  }catch (  Exception e) {    throw new RemoteException(e);  }  if (result)   return rvalue; else   throw new RemoteException(errmsg);}  }
class C{  public UpdateRequest refresh(boolean refresh){  this.refresh=refresh;  return this;}  }
class C{  public AsteroidsWithUI(){  super(new Asteroids(System.currentTimeMillis()));}  }
class C{  public static double pow(double x,double y){  return Math.pow(x,y);}  }
class C{  @Override public void validate(){}  }
class C{  public MemberName asNormalOriginal(){  byte normalVirtual=clazz.isInterface() ? REF_invokeInterface : REF_invokeVirtual;  byte refKind=getReferenceKind();  byte newRefKind=refKind;  MemberName result=this;switch (refKind) {case REF_invokeInterface:case REF_invokeVirtual:case REF_invokeSpecial:    newRefKind=normalVirtual;  break;}if (newRefKind == refKind) return this;result=clone().changeReferenceKind(newRefKind,refKind);assert (this.referenceKindIsConsistentWith(result.getReferenceKind()));return result;}  }
class C{  protected FloatBuffer computeCapNormals(ExtrudedBoundaryInfo boundary,FloatBuffer nBuf){  int nVerts=boundary.locations.size();  Vec4[] verts=boundary.capVertices;  double avgX, avgY, avgZ;  Vec4 va=verts[1].subtract3(verts[0]);  Vec4 vb=verts[nVerts - 2].subtract3(verts[0]);  avgX=(va.y * vb.z) - (va.z * vb.y);  avgY=(va.z * vb.x) - (va.x * vb.z);  avgZ=(va.x * vb.y) - (va.y * vb.x);  for (int i=1; i < nVerts - 1; i++) {    va=verts[i + 1].subtract3(verts[i]);    vb=verts[i - 1].subtract3(verts[i]);    avgX+=(va.y * vb.z) - (va.z * vb.y);    avgY+=(va.z * vb.x) - (va.x * vb.z);    avgZ+=(va.x * vb.y) - (va.y * vb.x);  }  avgX/=nVerts - 1;  avgY/=nVerts - 1;  avgZ/=nVerts - 1;  double length=Math.sqrt(avgX * avgX + avgY * avgY + avgZ * avgZ);  for (int i=0; i < nVerts; i++) {    nBuf.put((float)(avgX / length)).put((float)(avgY / length)).put((float)(avgZ / length));  }  nBuf.flip();  return nBuf;}  }
class C{  private void handleStartAction(SolrQueryRequest req,SolrQueryResponse rsp){  if (processStateManager.getState() == CdcrParams.ProcessState.STOPPED) {    processStateManager.setState(CdcrParams.ProcessState.STARTED);    processStateManager.synchronize();  }  rsp.add(CdcrParams.CdcrAction.STATUS.toLower(),this.getStatus());}  }
class C{  public void testSerialization(){  DefaultPieDataset d1=new DefaultPieDataset();  d1.setValue("C1",new Double(234.2));  d1.setValue("C2",null);  d1.setValue("C3",new Double(345.9));  d1.setValue("C4",new Double(452.7));  DefaultPieDataset d2=(DefaultPieDataset)TestUtilities.serialised(d1);  assertEquals(d1,d2);}  }
class C{  public Where<T,ID> raw(String rawStatement,ArgumentHolder... args){  for (  ArgumentHolder arg : args) {    String columnName=arg.getColumnName();    if (columnName == null) {      if (arg.getSqlType() == null) {        throw new IllegalArgumentException("Either the column name or SqlType must be set on each argument");      }    } else {      arg.setMetaInfo(findColumnFieldType(columnName));    }  }  addClause(new Raw(rawStatement,args));  return this;}  }
class C{  private static void startCMR(){  initLogger();  long startTime=System.nanoTime();  LOGGER.info("Central Measurement Repository is starting up!");  LOGGER.info("==============================================");  startRepository();  LOGGER.info("CMR started in " + Converter.nanoToMilliseconds(System.nanoTime() - startTime) + " ms");}  }
class C{  public String toString(){  String result=super.toString() + "SubjectAlternativeName [\n";  if (names == null) {    result+="  null\n";  } else {    for (    GeneralName name : names.names()) {      result+="  " + name + "\n";    }  }  result+="]\n";  return result;}  }
class C{  protected String doIt() throws Exception {  log.info("Selection=" + p_Selection + ", DateInvoiced="+ p_DateInvoiced+ ", AD_Org_ID="+ p_AD_Org_ID+ ", C_BPartner_ID="+ p_C_BPartner_ID+ ", M_InOut_ID="+ p_M_InOut_ID+ ", DocAction="+ p_docAction+ ", Consolidate="+ p_ConsolidateDocument);  String sql=null;  if (p_Selection) {    sql="SELECT M_InOut.* FROM M_InOut, T_Selection " + "WHERE M_InOut.DocStatus='CO' AND M_InOut.IsSOTrx='Y' " + " AND M_InOut.M_InOut_ID = T_Selection.T_Selection_ID "+ " AND T_Selection.AD_PInstance_ID=? "+ "ORDER BY M_InOut.M_InOut_ID";  } else {    sql="SELECT * FROM M_InOut o " + "WHERE DocStatus IN('CO','CL') AND IsSOTrx='Y'";    if (p_AD_Org_ID != 0)     sql+=" AND AD_Org_ID=?";    if (p_C_BPartner_ID != 0)     sql+=" AND C_BPartner_ID=?";    if (p_M_InOut_ID != 0)     sql+=" AND M_InOut_ID=?";    sql+=" AND EXISTS (SELECT * FROM M_InOutLine ol " + "WHERE o.M_InOut_ID=ol.M_InOut_ID AND ol.IsInvoiced='N') " + "ORDER BY M_InOut_ID";  }  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    int index=1;    if (p_Selection) {      pstmt.setInt(index,getAD_PInstance_ID());    } else {      if (p_AD_Org_ID != 0)       pstmt.setInt(index++,p_AD_Org_ID);      if (p_C_BPartner_ID != 0)       pstmt.setInt(index++,p_C_BPartner_ID);      if (p_M_InOut_ID != 0)       pstmt.setInt(index++,p_M_InOut_ID);    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  }  return generate(pstmt);}  }
class C{  public StylesheetPIHandler(String baseID,String media,String title,String charset){  m_baseID=baseID;  m_media=media;  m_title=title;  m_charset=charset;}  }
class C{  public boolean isMoreSpecific(Type from,Type to) throws ClassNotFound {  return implicitCast(from,to);}  }
class C{  public QueryEvaluationException(String msg){  super(msg);}  }
class C{  public void testEdgeCase(){  final int bits=3;  final int size=1 << bits;  final IntIndex ix0=new IntChunks(size - 1,bits);  ix0.integrity();  final IntIndex ix1=new IntChunks(size,bits);  ix1.integrity();  final IntIndex ix2=new IntChunks(size + 1,bits);  ix2.integrity();}  }
class C{  private void scheduleCacheCleanup(Context context){  if (!isAlarmActive(context)) {    mAlarmManager.setInexactRepeating(AlarmManager.ELAPSED_REALTIME_WAKEUP,SystemClock.elapsedRealtime() + CLEANUP_SCHEDULER_TIME_INTERVAL,CLEANUP_SCHEDULER_TIME_INTERVAL,CacheCleanupReceiver.makeReceiverPendingIntent(context));  }}  }
class C{  @Override public String toString(){  return super.toString();}  }
class C{  public int read(long position,ByteBuf dst,int dstStart,int dstLength) throws IOException {  final int bufferPosition=checkOffset(position,dstLength);  final long srcAddress=PlatformDependent.directBufferAddress(lastMapped) + bufferPosition;  if (dst.hasMemoryAddress()) {    final long dstAddress=dst.memoryAddress() + dstStart;    PlatformDependent.copyMemory(srcAddress,dstAddress,dstLength);  } else   if (dst.hasArray()) {    final byte[] dstArray=dst.array();    PlatformDependent.copyMemory(srcAddress,dstArray,dstStart,dstLength);  } else {    throw new IllegalArgumentException("unsupported byte buffer");  }  position+=dstLength;  if (position > this.length) {    this.length=position;  }  return dstLength;}  }
class C{  public GitConflictException(String message,Throwable cause){  super(message,cause);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:14.668 -0500",hash_original_method="666C086AB9DBFD99FFC100F4BBE01D6D",hash_generated_method="3F628D0222C9A381116CFF161912E138") Impl(File directory) throws IOException {  boolean exists=directory.exists();  if (exists && !directory.isDirectory()) {    throw new IOException(directory + " exists but is not a directory.");  }  if (exists) {    initialFiles=directory.list();    if (initialFiles == null) {      throw new IOException(directory + " exists but cannot list contents.");    }    Arrays.sort(initialFiles);    size=initialFiles.length;  } else {    if (!directory.mkdirs()) {      throw new IOException("Creation of " + directory + " directory failed.");    }    size=0;  }  this.directory=directory;}  }
class C{  public FlyweightProcessingInstruction(String target,Map<String,String> values){  this.target=target;  this.values=values;  this.text=toString(values);}  }
class C{  public synchronized void decrementState(MentalState state){  if (this.state.ordinal() > state.ordinal()) {    setState(state);  }}  }
class C{  private synchronized void addLookupToCache(String lookupName,LookupQualifier qualifier,Lookup lookup){  Hashtable<String,Lookup> lookupsByQualifier=_lookups.get(lookupName);  if (null == lookupsByQualifier) {    lookupsByQualifier=new Hashtable<String,Lookup>();    _lookups.put(lookupName,lookupsByQualifier);  }  lookupsByQualifier.put(qualifier.toString(),lookup);}  }
class C{  @Override public boolean containsKey(Object key){  return _map.containsKey(unwrapKey(key));}  }
class C{  public boolean sphereInFrustumWithoutNearFar(Vector3 center,float radius){  for (int i=2; i < 6; i++)   if ((planes[i].normal.x * center.x + planes[i].normal.y * center.y + planes[i].normal.z * center.z) < (-radius - planes[i].d))   return false;  return true;}  }
class C{  protected void formatAnnotationMirror(AnnotationMirror am,StringBuilder sb){  sb.append("@");  sb.append(am.getAnnotationType().asElement().getSimpleName());  Map<? extends ExecutableElement,? extends AnnotationValue> args=am.getElementValues();  if (!args.isEmpty()) {    sb.append("(");    boolean oneValue=false;    if (args.size() == 1) {      Map.Entry<? extends ExecutableElement,? extends AnnotationValue> first=args.entrySet().iterator().next();      if (first.getKey().getSimpleName().contentEquals("value")) {        formatAnnotationMirrorArg(first.getValue(),sb);        oneValue=true;      }    }    if (!oneValue) {      boolean notfirst=false;      for (      Map.Entry<? extends ExecutableElement,? extends AnnotationValue> arg : args.entrySet()) {        if (notfirst) {          sb.append(", ");        }        notfirst=true;        sb.append(arg.getKey().getSimpleName() + "=");        formatAnnotationMirrorArg(arg.getValue(),sb);      }    }    sb.append(")");  }}  }
class C{  int attribArgs(List<JCExpression> trees,Env<AttrContext> env,ListBuffer<Type> argtypes){  int kind=VAL;  for (  JCExpression arg : trees) {    Type argtype;    if (allowPoly && deferredAttr.isDeferred(env,arg)) {      argtype=deferredAttr.new DeferredType(arg,env);      kind|=POLY;    } else {      argtype=chk.checkNonVoid(arg,attribTree(arg,env,unknownAnyPolyInfo));    }    argtypes.append(argtype);  }  return kind;}  }
class C{  public NotificationChain basicSet_lok(LocalArgumentsVariable new_lok,NotificationChain msgs){  LocalArgumentsVariable old_lok=_lok;  _lok=new_lok;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.N4_FIELD_ACCESSOR__LOK,old_lok,new_lok);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr streetAttr;  String value;  doc=(Document)load("hc_staff",true);  addressList=doc.getElementsByTagName("acronym");  testNode=addressList.item(3);  attributes=testNode.getAttributes();  streetAttr=(Attr)attributes.getNamedItem("class");  streetAttr.setValue("Y&ent1;");  value=streetAttr.getValue();  assertEquals("value","Y&ent1;",value);  value=streetAttr.getNodeValue();  assertEquals("nodeValue","Y&ent1;",value);}  }
class C{  public static void correctTableFocusTraversal(JTable table){  table.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,Collections.singleton(AWTKeyStroke.getAWTKeyStroke("TAB")));  table.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,Collections.singleton(AWTKeyStroke.getAWTKeyStroke("shift TAB")));}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.811 -0500",hash_original_method="9D77FFE69AA84BF1048ED5CBD8EE386C",hash_generated_method="14BE1B47B3BDFB19FC4452BDB9ABB0DE") public String(byte[] data,Charset charset){  this(data,0,data.length,charset);}  }
class C{  public SendablePhotoMessage.SendablePhotoMessageBuilder disableNotification(boolean disableNotification){  this.disableNotification=disableNotification;  return this;}  }
class C{  public boolean isResponseAvailable(final int timeout) throws IOException {  LOG.trace("enter HttpConnection.isResponseAvailable(int timeout: " + timeout + ")");  assertOpen();  boolean result=false;  if (inputStream.available() > 0) {    result=true;  } else {    try {      socket.setSoTimeout(timeout);      inputStream.mark(1);      final int byteRead=inputStream.read();      if (byteRead != -1) {        inputStream.reset();        LOG.debug("Input data available");        result=true;      } else {        LOG.debug("Input data not available");      }    } catch (    final InterruptedIOException e) {      if (!ExceptionUtil.isSocketTimeoutException(e)) {        throw e;      }      if (LOG.isDebugEnabled()) {        LOG.debug("Input data not available after " + timeout + " ms");      }    } finally {      try {        socket.setSoTimeout(params.getSoTimeout());      } catch (      final IOException ioe) {        LOG.debug("An error ocurred while resetting soTimeout, we will assume that" + " no response is available.",ioe);        result=false;      }    }  }  return result;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.tv_album_list);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:36.474 -0500",hash_original_method="32065C4976C924BEAD40EDE2A514E0EE",hash_generated_method="CC87C1C88F7B8E80FD89EE1BFCFB11DF") public boolean isColumnStretchable(int columnIndex){  return mStretchAllColumns || mStretchableColumns.get(columnIndex);}  }
class C{  private static void calcNetForceExertedByXY(){  System.out.println("Checking setNetForce...");  Planet p1=new Planet(1.0,1.0,3.0,4.0,5.0,"jupiter.gif");  Planet p2=new Planet(2.0,1.0,3.0,4.0,4e11,"jupiter.gif");  Planet p3=new Planet(4.0,5.0,3.0,4.0,5.0,"jupiter.gif");  Planet p4=new Planet(3.0,2.0,3.0,4.0,5.0,"jupiter.gif");  Planet[] planets={p2,p3,p4};  double xNetForce=p1.calcNetForceExertedByX(planets);  double yNetForce=p1.calcNetForceExertedByY(planets);  checkEquals(133.4,round(xNetForce,2),"calcNetForceExertedByX()");  checkEquals(0.0,round(yNetForce,2),"calcNetForceExertedByY()");  System.out.println("Running test again, but with array that contains the target planet.");  planets=new Planet[]{p1,p2,p3,p4};  xNetForce=p1.calcNetForceExertedByX(planets);  yNetForce=p1.calcNetForceExertedByY(planets);  checkEquals(133.4,round(xNetForce,2),"calcNetForceExertedByX()");  checkEquals(0.0,round(yNetForce,2),"calcNetForceExertedByY()");}  }
class C{  private void popCurrentDoc(){  assert numSubsOnDoc == 0;  assert docIDQueue.size() > 0;  subsOnDoc[numSubsOnDoc++]=docIDQueue.pop();  docID=subsOnDoc[0].posEnum.docID();  while (docIDQueue.size() > 0 && docIDQueue.top().posEnum.docID() == docID) {    subsOnDoc[numSubsOnDoc++]=docIDQueue.pop();  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return IOUtils.getFileAsString(getFile(stack));}  }
class C{  public String engineGetProperty(String key){  if (properties == null) {    return null;  }  return properties.get(key);}  }
class C{  public void logInWithReadPermissions(Fragment fragment,Collection<String> permissions){  validateReadPermissions(permissions);  LoginClient.Request loginRequest=createLoginRequest(permissions);  startLogin(new FragmentStartActivityDelegate(fragment),loginRequest);}  }
class C{  Record makeRecord(String line){  if (line == null || "".equals(line))   return null;  BreastCancerWRecord r=new BreastCancerWRecord();  String[] split=line.split(",");  String col;  for (int i=0; i < split.length; i++) {    col=split[i].replaceAll("'","");    if (i == 0) {      r.clumpThickness="?".equals(col) ? 0 : (Float.valueOf(col) - 1) / 9f;    } else     if (i == 1) {      r.cellSizeUniformity="?".equals(col) ? 0 : (Float.valueOf(col) - 1) / 9f;    } else     if (i == 2) {      r.cellShapeUniformity="?".equals(col) ? 0 : (Float.valueOf(col) - 1) / 9f;    } else     if (i == 3) {      r.marginalAdhesion="?".equals(col) ? 0 : (Float.valueOf(col) - 1) / 9f;    } else     if (i == 4) {      r.singleEpiCellSize="?".equals(col) ? 0 : (Float.valueOf(col) - 1) / 9f;    } else     if (i == 5) {      r.bareNuclei="?".equals(col) ? 0 : (Float.valueOf(col) - 1) / 9f;    } else     if (i == 6) {      r.blandChromatin="?".equals(col) ? 0 : (Float.valueOf(col) - 1) / 9f;    } else     if (i == 7) {      r.normalNucleoli="?".equals(col) ? 0 : (Float.valueOf(col) - 1) / 9f;    } else     if (i == 8) {      r.mitoses="?".equals(col) ? 0 : (Float.valueOf(col) - 1) / 9f;    } else     if (i == 9) {      r.malignant="malignant".equals(col);    } else {      System.err.println("Too many columns!!!");    }  }  return r;}  }
class C{  private void addToCache(JarInputStream fis,String mnemo){  String text="";  byte[] buf=new byte[4096];  int i=0;  try {    while ((i=fis.read(buf)) != -1) {      text+=new String(buf,0,i);    }  } catch (  IOException ignored) {  }  helpcache.put(mnemo,text);}  }
class C{  public ReportedData submitSearch(String serviceJID,Form completedForm) throws XMPPException {  TranscriptSearch search=new TranscriptSearch();  search.setType(IQ.Type.GET);  search.setTo(serviceJID);  search.addExtension(completedForm.getDataFormToSend());  PacketCollector collector=connection.createPacketCollector(new PacketIDFilter(search.getPacketID()));  connection.sendPacket(search);  TranscriptSearch response=(TranscriptSearch)collector.nextResult(SmackConfiguration.getPacketReplyTimeout());  collector.cancel();  if (response == null) {    throw new XMPPException("No response from server on status set.");  }  if (response.getError() != null) {    throw new XMPPException(response.getError());  }  return ReportedData.getReportedDataFrom(response);}  }
class C{  public static boolean cs_lusol(int order,Scs A,float[] b,float tol){  float[] x;  Scss S;  Scsn N;  int n;  boolean ok;  if (!Scs_util.CS_CSC(A) || b == null)   return (false);  n=A.n;  S=Scs_sqr.cs_sqr(order,A,false);  N=Scs_lu.cs_lu(A,S,tol);  x=new float[n];  ok=(S != null && N != null);  if (ok) {    Scs_ipvec.cs_ipvec(N.pinv,b,x,n);    Scs_lsolve.cs_lsolve(N.L,x);    Scs_usolve.cs_usolve(N.U,x);    Scs_ipvec.cs_ipvec(S.q,x,b,n);  }  return (ok);}  }
class C{  public void copySourceTemplatesFile(SdfReaderWrapper reader) throws IOException {  if (mIsPaired) {    SourceTemplateReadWriter.writeTemplateMappingFile(mLeft.directory(),SourceTemplateReadWriter.readTemplateMap(reader.left().path()));    SourceTemplateReadWriter.writeTemplateMappingFile(mRight.directory(),SourceTemplateReadWriter.readTemplateMap(reader.right().path()));    SourceTemplateReadWriter.copyMutationMappingFile(reader.left().path(),mLeft.directory());    SourceTemplateReadWriter.copyMutationMappingFile(reader.right().path(),mRight.directory());  } else {    SourceTemplateReadWriter.writeTemplateMappingFile(mSingle.directory(),SourceTemplateReadWriter.readTemplateMap(reader.single().path()));    SourceTemplateReadWriter.copyMutationMappingFile(reader.single().path(),mSingle.directory());  }}  }
class C{  @Override public String toString(){  StringBuilder b=new StringBuilder();  b.append("// <ExceptionalExecution, exception type=" + exception.getClass().getName());  b.append(">;");  return b.toString();}  }
class C{  public boolean hasThumbnailExt(){  return hasExtension(GphotoThumbnail.class);}  }
class C{  public GraphicContext(){}  }
class C{  public DomainObjectException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static <E,M,A>ProducerT<E,M,A> done(A r){  return ProducerT.producerT(FreeT.done(r));}  }
class C{  public IsometricViewAction(final VisionWorld visionWorld){  super("Isometric view");  if (visionWorld == null) {    throw new IllegalArgumentException("visionWorld must not be null");  }  this.visionWorld=visionWorld;}  }
class C{  public ProjectTodoStatusObject(int id){  this.id=id;}  }
class C{  public void enableOverview(boolean b){  if (overviewItem != null) {    overviewItem.setEnabled(b);  }}  }
class C{  public Vector3 add(float x,float y,float z){  return this.set(this.x + x,this.y + y,this.z + z);}  }
class C{  public HttpResponse send(final Method method,final String path,final HttpEntity payload){  try {    return sendAsync(method,path,payload,null).get();  } catch (  InterruptedException|ExecutionException|IOException e) {    throw new RuntimeException(e);  }}  }
class C{  private void constructTimeSteps(){  int numTimeSteps=(1 + getStepsGenerated() - getFirstStepStored()) / getInterval();  this.timeSteps=new int[numTimeSteps];  for (int i=0; i < timeSteps.length; i++) {    this.timeSteps[i]=getFirstStepStored() + i * getInterval();  }}  }
class C{  protected void failIfErrors() throws CompilationFailedException {  if (hasErrors()) {    throw new MultipleCompilationErrorsException(this);  }}  }
class C{  @Override public void menuAboutToShow(IMenuManager menuManager){  super.menuAboutToShow(menuManager);  MenuManager submenuManager=null;  submenuManager=new MenuManager(EipEditorPlugin.INSTANCE.getString("_UI_CreateChild_menu_item"));  populateManager(submenuManager,createChildActions,null);  menuManager.insertBefore("edit",submenuManager);  submenuManager=new MenuManager(EipEditorPlugin.INSTANCE.getString("_UI_CreateSibling_menu_item"));  populateManager(submenuManager,createSiblingActions,null);  menuManager.insertBefore("edit",submenuManager);}  }
class C{  LongEntry<VALUE> removeMapping(Object o){  if (!(o instanceof LongEntry))   return null;  LongEntry<VALUE> entry=(LongEntry<VALUE>)o;  int hash=hash(entry.key);  int i=indexFor(hash,table.length);  LongEntry<VALUE> prev=table[i];  LongEntry<VALUE> e=prev;  while (e != null) {    LongEntry<VALUE> next=e.next;    if (e.hash == hash && e.equals(entry)) {      modCount++;      size--;      if (prev == e)       table[i]=next; else       prev.next=next;      return e;    }    prev=e;    e=next;  }  return e;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void parsePersons(String filename){  LOG.info("Parsing persons from " + filename);  Counter counter=new Counter("  persons # ");  BufferedReader br=IOUtils.getBufferedReader(filename);  try {    String line=null;    while ((line=br.readLine()) != null) {      String serial=line.substring(0,9);      String quarterType=line.substring(9,11);      String person=line.substring(11,15);      String age=line.substring(23,26);      String gender=line.substring(26,27);      String relationship=line.substring(27,29);      String population=line.substring(32,33);      String school=line.substring(83,84);      String employment=line.substring(96,98);      String sector=line.substring(99,102);      String hours=line.substring(105,107);      String workplace=line.substring(107,108);      String mainPlaceOfWork=line.substring(109,117);      String travel=line.substring(143,144);      String income=line.substring(144,146);      String enumeration=line.substring(146,147);      String s=getComprehensiveQuarterType(quarterType) + "," + Integer.parseInt(age)+ ","+ getGender(gender)+ ","+ getRelationship(relationship)+ ","+ getPopulation(population)+ ","+ getSchool(school)+ ","+ getDerivedEmployment(employment)+ ","+ getMainPlaceOfWork(mainPlaceOfWork)+ ","+ getMainModeToPrimary(travel)+ ","+ getIncome(income);      personMap.put(Id.create(serial + "_" + String.valueOf(Integer.parseInt(person)),Person.class),s);      counter.incCounter();    }  } catch (  IOException e) {    throw new RuntimeException("Could not read from BufferedReader " + filename);  } finally {    try {      br.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedReader " + filename);    }  }  counter.printCounter();  LOG.info("Done parsing persons (" + personMap.size() + ").");}  }
class C{  @Override public void snmpV2Trap(SnmpOid trapOid,SnmpVarBindList varBindList) throws IOException, SnmpStatusException {  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {    SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,"snmpV2Trap","trapOid=" + trapOid);  }  SnmpPduRequest pdu=new SnmpPduRequest();  pdu.address=null;  pdu.port=trapPort;  pdu.type=pduV2TrapPdu;  pdu.version=snmpVersionTwo;  pdu.community=null;  SnmpVarBindList fullVbl;  if (varBindList != null)   fullVbl=varBindList.clone(); else   fullVbl=new SnmpVarBindList(2);  SnmpTimeticks sysUpTimeValue=new SnmpTimeticks(getSysUpTime());  fullVbl.insertElementAt(new SnmpVarBind(snmpTrapOidOid,trapOid),0);  fullVbl.insertElementAt(new SnmpVarBind(sysUpTimeOid,sysUpTimeValue),0);  pdu.varBindList=new SnmpVarBind[fullVbl.size()];  fullVbl.copyInto(pdu.varBindList);  sendTrapPdu(pdu);}  }
class C{  public boolean equivTo(Object c){  if (sourcename instanceof Value)   return (c instanceof AbstractDataSource && ((Value)sourcename).equivTo(((AbstractDataSource)c).sourcename));  return (c instanceof AbstractDataSource && ((AbstractDataSource)c).sourcename.equals(sourcename));}  }
class C{  public void accept(String key,String val,Integer arg) throws ConfigurationException {  if (arg < min || arg > max) {    throw new ConfigurationException(key,val,"Must be in [" + min + ":"+ max+ "]");  }}  }
