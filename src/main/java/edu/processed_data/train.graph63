class C{  protected ISwingWorker<OMGraphicList> createLayerWorker(){  return new LayerWorker();}  }
class C{  public Task performRestartOperation(String vmId) throws IOException {  String path=String.format("%s/%s/restart",getBasePath(),vmId);  HttpResponse httpResponse=this.restClient.perform(RestClient.Method.POST,path,null);  this.restClient.checkResponse(httpResponse,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(httpResponse);}  }
class C{  public static Map<String,String> strToMap(String str,String delim,boolean trim,String pairsSeparator){  if (str == null)   return null;  Map<String,String> decodedMap=new HashMap<String,String>();  List<String> elements=split(str,delim);  pairsSeparator=pairsSeparator == null ? "=" : pairsSeparator;  for (  String s : elements) {    List<String> e=split(s,pairsSeparator);    if (e.size() != 2) {      continue;    }    String name=e.get(0);    String value=e.get(1);    if (trim) {      if (name != null) {        name=name.trim();      }      if (value != null) {        value=value.trim();      }    }    try {      decodedMap.put(URLDecoder.decode(name,"UTF-8"),URLDecoder.decode(value,"UTF-8"));    } catch (    UnsupportedEncodingException e1) {      Debug.logError(e1,module);    }  }  return decodedMap;}  }
class C{  public void addNode(int id,int parentId,String name,String rank){  TaxonNode node=mNodes.get(id);  if (node != null) {    if (node.isLeaf()) {      throw new IllegalArgumentException("Duplicate taxon id: " + id);    } else     if (node.getName() == null) {      node.setName(name);      node.setRank(rank);    }  } else {    node=new TaxonNode(id,name,rank);    mNodes.put(id,node);  }  if (parentId > -1 && parentId != id) {    TaxonNode parent=mNodes.get(parentId);    if (parent == null) {      parent=new TaxonNode(parentId);      mNodes.put(parentId,parent);    }    parent.addChild(node);  }  mReason=null;}  }
class C{  public void clusterActivities(float radius,int minimumPoints,String activityType){  List<Point> studyAreaPoints=new ArrayList<Point>();  try {    if (activityType == null) {      MyActivityReader minor=new MyActivityReader();      List<Point> minorPoints=minor.readActivityPointsToList(sb.getMinorActivityFilename(),studyArea);      studyAreaPoints.addAll(minorPoints);      MyActivityReader major=new MyActivityReader();      List<Point> majorPoints=major.readActivityPointsToList(sb.getMajorActivityFilename(),studyArea);      studyAreaPoints.addAll(majorPoints);    } else     if (activityType.equalsIgnoreCase("minor")) {      MyActivityReader minor=new MyActivityReader();      List<Point> minorPoints=minor.readActivityPointsToList(sb.getMinorActivityFilename(),studyArea);      studyAreaPoints.addAll(minorPoints);    } else     if (activityType.equalsIgnoreCase("major")) {      MyActivityReader major=new MyActivityReader();      List<Point> majorPoints=major.readActivityPointsToList(sb.getMajorActivityFilename(),studyArea);      studyAreaPoints.addAll(majorPoints);    } else {      log.warn("Incorrect activity type provided.");      throw new RuntimeException("Only `minor', `major' or `null' are acceptable activity types.");    }  }  finally {    log.info("Read activity file(s) sucessfully.");  }  this.djc=new DJCluster(radius,minimumPoints,studyAreaPoints);  djc.clusterInput();}  }
class C{  public JSONObject accumulate(String key,Object value) throws JSONException {  testValidity(value);  Object o=opt(key);  if (o == null) {    put(key,value);  } else   if (o instanceof JSONArray) {    ((JSONArray)o).put(value);  } else {    put(key,new JSONArray().put(o).put(value));  }  return this;}  }
class C{  public void visit(PipelineVisitor visitor,Set<PValue> visitedValues){  if (!finishedSpecifying) {    finishSpecifying();  }  for (  Map.Entry<PValue,TransformTreeNode> entry : inputs.entrySet()) {    if (visitedValues.add(entry.getKey())) {      visitor.visitValue(entry.getKey(),entry.getValue());    }  }  if (isCompositeNode()) {    PipelineVisitor.CompositeBehavior recurse=visitor.enterCompositeTransform(this);    if (recurse.equals(CompositeBehavior.ENTER_TRANSFORM)) {      for (      TransformTreeNode child : parts) {        child.visit(visitor,visitedValues);      }    }    visitor.leaveCompositeTransform(this);  } else {    visitor.visitPrimitiveTransform(this);  }  for (  PValue pValue : getExpandedOutputs()) {    if (visitedValues.add(pValue)) {      visitor.visitValue(pValue,this);    }  }}  }
class C{  private void renameInternal(String url,String newFileName,boolean includedSuffix,OnRenameDownloadFileListener onRenameDownloadFileListener){  RenameDownloadFileTask task=new RenameDownloadFileTask(url,newFileName,includedSuffix,mDownloadFileRenamer);  task.setOnRenameDownloadFileListener(onRenameDownloadFileListener);  addAndRunTask(task);}  }
class C{  private void syncMenu(){  if (bugInstance != null) {    BugProperty severityProperty=bugInstance.lookupProperty(BugProperty.SEVERITY);    if (severityProperty != null) {      try {        int severity=severityProperty.getValueAsInt();        if (severity > 0 && severity <= severityItemList.length) {          selectSeverity(severity);          return;        }      } catch (      NumberFormatException e) {      }    }    resetMenuItems(true);  } else {    resetMenuItems(false);  }}  }
class C{  public boolean hasDescriptions(){  return hasRepeatingExtension(Description.class);}  }
class C{  protected void onPageBiggerThanMaxSize(String urlStr,long pageSize){  logger.warn("Skipping a URL: {} which was bigger ( {} ) than max allowed size",urlStr,pageSize);}  }
class C{  private static void ensureTable(byte[] tableName,byte[] columnFamilyName) throws IOException {  HBaseAdmin hbaseAdmin=new HBaseAdmin(configuration);  try {    if (!hbaseAdmin.tableExists(tableName)) {      HTableDescriptor desc=new HTableDescriptor(tableName);      HColumnDescriptor hColumnDescriptor=new HColumnDescriptor(columnFamilyName);      hColumnDescriptor.setMaxVersions(1);      desc.addFamily(hColumnDescriptor);      hbaseAdmin.createTable(desc);    }  }  finally {    hbaseAdmin.close();  }}  }
class C{  public Triple rewrite(String str){  for (  Command command : mCommands) {    Log.i("editor: rewrite with command: " + str + ": "+ command);    Pair<String,String[]> pair=command.match(str);    if (pair != null) {      str=pair.first;      String commandId=command.getId();      if (commandId != null) {        String[] args=pair.second;        Log.i("editor: rewrite: success: " + str + ": "+ commandId+ "("+ TextUtils.join(",",args)+ ")");        return new Triple(commandId,str,args);      }    }  }  return new Triple(null,str,null);}  }
class C{  public List discover(String url,int maxRedirects) throws DiscoveryException {  return discover(url,maxRedirects,_httpFetcher);}  }
class C{  protected void appendSummary(final StringBuffer buffer,final String fieldName,final Object[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  public boolean isMandatory(){  Object oo=get_Value(COLUMNNAME_IsMandatory);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isSoapBodyLoggingEnabled(){  return MessageLogProperties.isSoapBodyLoggingEnabled();}  }
class C{  public static <R,C,V>Cell<R,C,V> immutableCell(@Nullable R rowKey,@Nullable C columnKey,@Nullable V value){  return new ImmutableCell<R,C,V>(rowKey,columnKey,value);}  }
class C{  public static String toIndentedString(Object o){  if (o == null)   return "null";  return o.toString().replace("\n","\n    ");}  }
class C{  public boolean isMandatoryAlways(){  return MANDATORYTYPE_AlwaysMandatory.equals(getMandatoryType());}  }
class C{  public Time randomTime(){  if (random.nextInt(10) == 0) {    return null;  }  StringBuilder buff=new StringBuilder();  buff.append(getInt(24));  buff.append(':');  buff.append(getInt(24));  buff.append(':');  buff.append(getInt(24));  return Time.valueOf(buff.toString());}  }
class C{  public XYImageAnnotation(double x,double y,Image image){  this(x,y,image,RectangleAnchor.CENTER);}  }
class C{  protected void engineInit(int opmode,Key key,AlgorithmParameterSpec params,SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException {  core.init(opmode,key,params,random);}  }
class C{  public int size(){  return super.size();}  }
class C{  public StringBand append(byte b){  return append(Byte.toString(b));}  }
class C{  public static Set<Emoticon> parseSetEmotes(String json,Emoticon.SubType subType,String room){  try {    JSONParser parser=new JSONParser();    JSONObject root=(JSONObject)parser.parse(json);    JSONObject setData=(JSONObject)root.get("set");    return parseEmoteSet(setData,room,subType);  } catch (  ParseException|ClassCastException|NullPointerException ex) {    LOGGER.warning("Error parsing FFZ emotes: " + ex);  }  return new HashSet<>();}  }
class C{  @SuppressWarnings("ResultOfMethodCallIgnored") public static String parseJsonFile(Context ctx,String filename){  String json;  try {    InputStream stream=ctx.getAssets().open(filename);    byte[] buffer=new byte[stream.available()];    stream.read(buffer);    stream.close();    json=new String(buffer,"UTF-8");  } catch (  IOException e) {    e.printStackTrace();    return null;  }  return json;}  }
class C{  public List<Node> listAvailableTerminals(Class<?> type){  List<Node> result=new ArrayList<Node>();  for (  Node node : availableNodes) {    if ((node.getNumberOfArguments() == 0) && type.isAssignableFrom(node.getReturnType())) {      result.add(node);    }  }  return result;}  }
class C{  private void testJoinEvent(Member.Type type) throws Throwable {  List<CopycatServer> servers=createServers(3);  Member member=nextMember(type);  CopycatServer server=servers.get(0);  server.cluster().onJoin(null);  CopycatServer joiner=createServer(member);  joiner.join(members.stream().map(null).collect(Collectors.toList())).thenRun(null);  await(10000,2);}  }
class C{  public static BlockNode skipSyntheticSuccessor(BlockNode block){  if (block.isSynthetic() && block.getSuccessors().size() == 1) {    return block.getSuccessors().get(0);  }  return block;}  }
class C{  public void putAsString(String key,Float value){  String strValue=value.toString();  super.put(key,strValue);}  }
class C{  public float x(){  return this.m[0];}  }
class C{  protected void updateMapContents(){  mGoogleMap.clear();  if (mOptionView.isMultipleMarker() && !mOptionView.isSingleMarker()) {    LatLngBounds.Builder builder=new LatLngBounds.Builder();    if (mOptionView.getLatLngArray() != null && mOptionView.getLatLngArray().length > 0) {      if (mOptionView.getMarkerTitleArray() != null && mOptionView.getMarkerTitleArray().length > 0 && mOptionView.getLatLngArray().length == mOptionView.getMarkerTitleArray().length) {        if (mOptionView.getMarkerIconArray() != null && mOptionView.getMarkerIconArray().length > 0 && mOptionView.getLatLngArray().length == mOptionView.getMarkerIconArray().length) {          for (int i=0; i < mOptionView.getLatLngArray().length; i++) {            BitmapDescriptor icon=BitmapDescriptorFactory.fromResource(mOptionView.getMarkerIconArray()[i]);            mGoogleMap.addMarker(new MarkerOptions().position(mOptionView.getLatLngArray()[i]).title(mOptionView.getMarkerTitleArray()[i]).icon(icon));            builder.include(mOptionView.getLatLngArray()[i]);          }        } else {          for (int i=0; i < mOptionView.getLatLngArray().length; i++) {            mGoogleMap.addMarker(new MarkerOptions().position(mOptionView.getLatLngArray()[i]).title(mOptionView.getMarkerTitleArray()[i]));            builder.include(mOptionView.getLatLngArray()[i]);          }        }      } else {        if (mOptionView.getMarkerIconArray() != null && mOptionView.getMarkerIconArray().length > 0 && mOptionView.getLatLngArray().length == mOptionView.getMarkerIconArray().length) {          for (int i=0; i < mOptionView.getLatLngArray().length; i++) {            BitmapDescriptor icon=BitmapDescriptorFactory.fromResource(mOptionView.getMarkerIconArray()[i]);            mGoogleMap.addMarker(new MarkerOptions().position(mOptionView.getLatLngArray()[i]).title(mOptionView.getMarkerTitleArray()[i]).icon(icon));            builder.include(mOptionView.getLatLngArray()[i]);          }        } else {          for (int i=0; i < mOptionView.getLatLngArray().length; i++) {            mGoogleMap.addMarker(new MarkerOptions().position(mOptionView.getLatLngArray()[i]));            builder.include(mOptionView.getLatLngArray()[i]);          }        }      }    }    if (mOptionView.getLatLngList() != null && mOptionView.getLatLngList().size() > 0) {      if (mOptionView.getMarkerTitleList() != null && mOptionView.getMarkerTitleList().size() > 0 && mOptionView.getMarkerTitleList().size() == mOptionView.getLatLngList().size()) {        if (mOptionView.getMarkerIconList() != null && mOptionView.getMarkerIconList().size() > 0 && mOptionView.getMarkerIconList().size() == mOptionView.getLatLngList().size()) {          for (int i=0; i < mOptionView.getLatLngList().size(); i++) {            BitmapDescriptor icon=BitmapDescriptorFactory.fromResource(mOptionView.getMarkerIconList().get(i));            mGoogleMap.addMarker(new MarkerOptions().position(mOptionView.getLatLngList().get(i)).title(mOptionView.getMarkerTitleList().get(i)).icon(icon));            builder.include(mOptionView.getLatLngList().get(i));          }        } else {          for (int i=0; i < mOptionView.getLatLngList().size(); i++) {            mGoogleMap.addMarker(new MarkerOptions().position(mOptionView.getLatLngList().get(i)).title(mOptionView.getMarkerTitleList().get(i)));            builder.include(mOptionView.getLatLngList().get(i));          }        }      } else {        if (mOptionView.getMarkerIconList() != null && mOptionView.getMarkerIconList().size() > 0 && mOptionView.getMarkerIconList().size() == mOptionView.getLatLngList().size()) {          for (int i=0; i < mOptionView.getLatLngList().size(); i++) {            BitmapDescriptor icon=BitmapDescriptorFactory.fromResource(mOptionView.getMarkerIconList().get(i));            mGoogleMap.addMarker(new MarkerOptions().position(mOptionView.getLatLngList().get(i)).icon(icon));            builder.include(mOptionView.getLatLngList().get(i));          }        } else {          for (int i=0; i < mOptionView.getLatLngList().size(); i++) {            mGoogleMap.addMarker(new MarkerOptions().position(mOptionView.getLatLngList().get(i)));            builder.include(mOptionView.getLatLngList().get(i));          }        }      }    }    LatLngBounds bounds=builder.build();    CameraUpdate cameraUpdate=CameraUpdateFactory.newLatLngBounds(bounds,0);    mGoogleMap.moveCamera(cameraUpdate);  } else {    if (mOptionView.getMarkerTitle() != null) {      if (mOptionView.getMarkerIcon() != 0) {        BitmapDescriptor icon=BitmapDescriptorFactory.fromResource(mOptionView.getMarkerIcon());        mGoogleMap.addMarker(new MarkerOptions().position(mMapLocation).title(mOptionView.getMarkerTitle()).icon(icon));      } else {        mGoogleMap.addMarker(new MarkerOptions().position(mMapLocation).title(mOptionView.getMarkerTitle()));      }    } else {      if (mOptionView.getMarkerIcon() != 0) {        BitmapDescriptor icon=BitmapDescriptorFactory.fromResource(mOptionView.getMarkerIcon());        mGoogleMap.addMarker(new MarkerOptions().position(mMapLocation).icon(icon));      } else {        mGoogleMap.addMarker(new MarkerOptions().position(mMapLocation));      }    }    CameraUpdate cameraUpdate=CameraUpdateFactory.newLatLngZoom(mMapLocation,mapsZoom);    mGoogleMap.moveCamera(cameraUpdate);  }}  }
class C{  public static String decode(byte[] in,char[] out,int offset,int utfSize) throws UTFDataFormatException {  int count=0, s=0, a;  while (count < utfSize) {    if ((out[s]=(char)in[offset + count++]) < '\u0080') {      s++;    } else     if (((a=out[s]) & 0xe0) == 0xc0) {      if (count >= utfSize) {        throw new UTFDataFormatException("bad second byte at " + count);      }      int b=in[offset + count++];      if ((b & 0xC0) != 0x80) {        throw new UTFDataFormatException("bad second byte at " + (count - 1));      }      out[s++]=(char)(((a & 0x1F) << 6) | (b & 0x3F));    } else     if ((a & 0xf0) == 0xe0) {      if (count + 1 >= utfSize) {        throw new UTFDataFormatException("bad third byte at " + (count + 1));      }      int b=in[offset + count++];      int c=in[offset + count++];      if (((b & 0xC0) != 0x80) || ((c & 0xC0) != 0x80)) {        throw new UTFDataFormatException("bad second or third byte at " + (count - 2));      }      out[s++]=(char)(((a & 0x0F) << 12) | ((b & 0x3F) << 6) | (c & 0x3F));    } else {      throw new UTFDataFormatException("bad byte at " + (count - 1));    }  }  return new String(out,0,s);}  }
class C{  private void put112(final int b1,final int b2,final int s){  pool.put11(b1,b2).putShort(s);}  }
class C{  public boolean isEmpty(){  return elements == 0;}  }
class C{  public FunctionInputException(String i18n,Object... arguments){  super(i18n,arguments);}  }
class C{  public SpkacMissingPropertyException(){  super();}  }
class C{  public boolean containsInstruction(BytecodeInstruction instruction){  if (instruction == null)   throw new IllegalArgumentException("null given");  return instructions.contains(instruction);}  }
class C{  public void testNext() throws SQLException {  assertTrue(target.next());  assertTrue(target.next());  assertFalse(target.next());  assertTrue(target.isAfterLast());  assertFalse(target.next());  assertFalse(emptyTarget.next());  target.close();  try {    target.next();    fail("Exception expected");  } catch (  SQLException e) {  }}  }
class C{  public Builder addEntitlement(Entitlement entitlement){  entitlements.add(entitlement);  return this;}  }
class C{  public synchronized void pressPause(){  pressPause(true);}  }
class C{  private void doSearchTest01(AbstractKeyBuffer kbuf){  assertEquals(0,search(kbuf,new byte[]{5}));  assertEquals(1,search(kbuf,new byte[]{7}));  assertEquals(3,search(kbuf,new byte[]{11}));  assertEquals(4,search(kbuf,new byte[]{13}));  assertEquals(-1,search(kbuf,new byte[]{4}));  assertEquals(-2,search(kbuf,new byte[]{6}));  assertEquals(-5,search(kbuf,new byte[]{12}));  assertEquals(-6,search(kbuf,new byte[]{14}));}  }
class C{  @Override public void onStart(){}  }
class C{  public void protectedWait(int millis){synchronized (this) {    try {      wait(millis);    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();    }  }}  }
class C{  public synchronized InterProcessLock acquireLock(String lockName) throws Exception {  InterProcessLock lock=nameLockMap.get(lockName);  if (lock == null) {    lock=coordinator.getSiteLocalLock(lockName);    nameLockMap.put(lockName,lock);  }  lock.acquire();  log.info("Acquired the lock {}",lockName);  return lock;}  }
class C{  public void monitorExit(){  mv.visitInsn(Opcodes.MONITOREXIT);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static double[][] sample(double M[][],Random r){  return threshold(M,r);}  }
class C{  public Keccak224(){}  }
class C{  public Complex exp(){  return new Complex(Math.exp(re) * Math.cos(im),Math.exp(re) * Math.sin(im));}  }
class C{  public static SynchronizerStatus makeStoppedStatus(Date since){  return new SynchronizerStatus(Status.STOPPED,since,null);}  }
class C{  public static JSONArray toJSONArray(String string) throws JSONException {  return toJSONArray(new XMLTokener(string));}  }
class C{  public static <S extends HasApplyClickHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    ApplyClickEvent event=new ApplyClickEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return (m_left.num(xctxt) * m_right.num(xctxt));}  }
class C{  private DocLine[] loadLines(MJournal journal){  ArrayList<DocLine> list=new ArrayList<DocLine>();  MJournalLine[] lines=journal.getLines(false);  for (int i=0; i < lines.length; i++) {    MJournalLine line=lines[i];    DocLine docLine=new DocLine(line,this);    docLine.setAmount(line.getAmtSourceDr(),line.getAmtSourceCr());    docLine.setConvertedAmt(m_C_AcctSchema_ID,line.getAmtAcctDr(),line.getAmtAcctCr());    docLine.setQty(line.getQty(),false);    MAccount account=line.getAccount_Combi();    docLine.setAccount(account);    list.add(docLine);  }  int size=list.size();  DocLine[] dls=new DocLine[size];  list.toArray(dls);  return dls;}  }
class C{  private static String contentDispositionHeader(final String dsp){  return String.format("Content-Disposition: %s",dsp);}  }
class C{  private AFTPClient actionChangeDir() throws IOException, PageException {  required("directory",directory);  AFTPClient client=getClient();  client.changeWorkingDirectory(directory);  writeCfftp(client);  return client;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void mult(BigInteger factor){  for (int i=0; i < coeffs.length; i++) {    coeffs[i]=coeffs[i].multiply(factor);  }}  }
class C{  public JCertificateFingerprint(int columns){  initComponents(columns);}  }
class C{  public void componentHidden(ComponentEvent e){  if (AWTEventMonitor.componentListener_private != null) {    AWTEventMonitor.componentListener_private.componentHidden(e);  }}  }
class C{  Cursor query(H2Database db,String[] projectionIn,String selection,String[] selectionArgs,String groupBy,String having,String orderBy,String limit){  return null;}  }
class C{  public static TypeReference newTryCatchReference(int tryCatchBlockIndex){  return new TypeReference((EXCEPTION_PARAMETER << 24) | (tryCatchBlockIndex << 8));}  }
class C{  public static void log(final String msg,final Throwable t){  if (DEBUG) {    log(msg);    t.printStackTrace(System.out);  }}  }
class C{  public ShingleFilterFactory(Map<String,String> args){  super(args);  maxShingleSize=getInt(args,"maxShingleSize",ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE);  if (maxShingleSize < 2) {    throw new IllegalArgumentException("Invalid maxShingleSize (" + maxShingleSize + ") - must be at least 2");  }  minShingleSize=getInt(args,"minShingleSize",ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE);  if (minShingleSize < 2) {    throw new IllegalArgumentException("Invalid minShingleSize (" + minShingleSize + ") - must be at least 2");  }  if (minShingleSize > maxShingleSize) {    throw new IllegalArgumentException("Invalid minShingleSize (" + minShingleSize + ") - must be no greater than maxShingleSize ("+ maxShingleSize+ ")");  }  outputUnigrams=getBoolean(args,"outputUnigrams",true);  outputUnigramsIfNoShingles=getBoolean(args,"outputUnigramsIfNoShingles",false);  tokenSeparator=get(args,"tokenSeparator",ShingleFilter.DEFAULT_TOKEN_SEPARATOR);  fillerToken=get(args,"fillerToken",ShingleFilter.DEFAULT_FILLER_TOKEN);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public String turinName(){  return Character.toUpperCase(name.charAt(0)) + name.substring(1);}  }
class C{  public static <F,T>Observable<T> transform(final List<? extends Observable<F>> input,Function<List<F>,T> function){  return ObservableCombiner.transform(input,function);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;default :  return null;}}  }
class C{  public void indent(){  indent(1);}  }
class C{  @Override public void map(Key row,Value data,Context context) throws IOException, InterruptedException {  fact.setTriple(MRReasoningUtils.getStatement(row,data,context.getConfiguration()));  boolean isSchemaTriple=Schema.isSchemaTriple(fact.getTriple());  if (isSchemaTriple) {    context.write(NullWritable.get(),fact);  }  countInput(isSchemaTriple,context);}  }
class C{  public static String toClassName(String str){  StringBuilder rtn=new StringBuilder();  String[] arr=str.split("[\\\\|//]");  for (int i=0; i < arr.length; i++) {    if (arr[i].length() == 0)     continue;    if (rtn.length() != 0)     rtn.append('.');    char[] chars=arr[i].toCharArray();    long changes=0;    for (int y=0; y < chars.length; y++) {      char c=chars[y];      if (y == 0 && (c >= '0' && c <= '9'))       rtn.append("_" + c); else       if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'))       rtn.append(c); else {        rtn.append('_');        changes+=(c * (i + 1));      }    }    if (changes > 0)     rtn.append(changes);  }  return rtn.toString();}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>ImmutableListMultimap<K,V> of(){  return (ImmutableListMultimap<K,V>)EmptyImmutableListMultimap.INSTANCE;}  }
class C{  private char[] symbol(char ch){switch (ch) {case '<':    return LESS;case '>':  return GREATER;case '"':return DOUBLE;case '\'':return SINGLE;case '&':return AND;}return null;}  }
class C{  public AccessTokensBuilder connectTimeout(final int connectTimeout){  checkLock();  this.httpConfig.setConnectTimeout(connectTimeout);  return this;}  }
class C{  public Gamma(double alpha,double lambda,RandomEngine randomGenerator){  setRandomGenerator(randomGenerator);  setState(alpha,lambda);}  }
class C{  public static Object safeConvert(Class type,Object arg){  if (int.class.equals(type) || Integer.class.equals(type)) {    return ((Number)arg).intValue();  } else   if (long.class.equals(type) || Long.class.equals(type)) {    return ((Number)arg).longValue();  } else   if (short.class.equals(type) || Short.class.equals(type)) {    return ((Number)arg).shortValue();  } else {    return arg;  }}  }
class C{  public CipherParameters generateDerivedParameters(int keySize){  keySize=keySize / 8;  byte[] dKey=generateDerivedKey(KEY_MATERIAL,keySize);  return new KeyParameter(dKey,0,keySize);}  }
class C{  private static boolean matches(Type from,Type to,Map<String,Type> typeMap){  if (to.equals(from))   return true;  if (from instanceof TypeVariable) {    return to.equals(typeMap.get(((TypeVariable<?>)from).getName()));  }  return false;}  }
class C{  private void throwback(){  resend=true;}  }
class C{  public void delete(String entityId) throws RetryableException {  URI uri=uris.delete(entityId);  log.debug("Deleting entity {} using {}",entityId,uri);  try {    JSONObject result=checkApi(getJson(postWithToken(uri)));    log.debug("Deleted: {}",result);  } catch (  IOException|ParseException e) {    throw new RetryableException("Error deleting page",e);  }}  }
class C{  @Override protected void mouseClicked(int par1,int par2,int par3) throws IOException {  super.mouseClicked(par1,par2,par3);  tokenBox.mouseClicked(par1,par2,par3);  if (tokenBox.isFocused()) {    errorText="";    helpText="";  }}  }
class C{  public NetworkEvent(ConnectionRequest source,Exception error){  super(source,ActionEvent.Type.Exception);  this.error=error;}  }
class C{  public void openOptionsMenu(){  mActivity.openOptionsMenu();}  }
class C{  public DomesticAnimal searchAnimal(final String name,final boolean exactly){  final List<DomesticAnimal> animals=getAnimals();  for (  final DomesticAnimal animal : animals) {    if (animal != null) {      if (animal.getTitle().equalsIgnoreCase(name)) {        return animal;      }      if (!exactly) {        final String type=animal.get("type");        if (type != null && ItemTools.itemNameToDisplayName(type).equals(name)) {          return animal;        }        if ("pet".equals(name)) {          return animal;        }      }    }  }  return null;}  }
class C{  @SuppressWarnings("unchecked") public CTracesFilterCreator(){  super(Lists.newArrayList(new CEventGenerator(),new CNameDescriptionGenerator<CTraceListWrapper>()));}  }
class C{  private static void notifyDrawable(Drawable drawable,final boolean isDisplayed){  if (drawable instanceof RecyclingBitmapDrawable) {    ((RecyclingBitmapDrawable)drawable).setIsDisplayed(isDisplayed);  } else   if (drawable instanceof LayerDrawable) {    LayerDrawable layerDrawable=(LayerDrawable)drawable;    for (int i=0, z=layerDrawable.getNumberOfLayers(); i < z; i++) {      notifyDrawable(layerDrawable.getDrawable(i),isDisplayed);    }  }}  }
class C{  public SyncHttpClient(boolean fixNoHttpResponseException,int httpPort,int httpsPort){  super(fixNoHttpResponseException,httpPort,httpsPort);}  }
class C{  final public static float[] earthCircle(float phi1,float lambda0,float c,int n){  return earthCircle(phi1,lambda0,c,0.0f,MoreMath.TWO_PI,n,new float[n << 1]);}  }
class C{  boolean isPlaceholderReady(int position){  return (placeholders[position] != null) || defaultPlaceholder != null;}  }
class C{  @Override public void handleMousePressed(ChartCanvas canvas,MouseEvent e){}  }
class C{  private void pauseGame(){  mViewPauseButton.setVisibility(View.GONE);  mViewPlayButton.setVisibility(View.VISIBLE);  if (mCountDownTimer != null) {    mCountDownTimer.cancel();    wasPaused=true;  }  mViewMatchPauseOverlay.setVisibility(View.VISIBLE);  mViewCancelBar.setVisibility(View.VISIBLE);  SensorManager sensorManager=(SensorManager)getActivity().getSystemService(Activity.SENSOR_SERVICE);  sensorManager.unregisterListener(this);  if (Utils.hasKitKat()) {    ImmersiveModeHelper.setImmersiveStickyWithActionBar(getActivity().getWindow());  }}  }
class C{  public void removeListListener(ActionListener a){  listeners.remove(a);}  }
class C{  private void addCdataSectionElement(String URI_and_localName,Vector v){  StringTokenizer tokenizer=new StringTokenizer(URI_and_localName,"{}",false);  String s1=tokenizer.nextToken();  String s2=tokenizer.hasMoreTokens() ? tokenizer.nextToken() : null;  if (null == s2) {    v.addElement(null);    v.addElement(s1);  } else {    v.addElement(s1);    v.addElement(s2);  }}  }
class C{  private double minDist(Vec p,Rectangle r){  if (r.contains(p))   return 0;  for (int i=0; i < dim; i++) {    double pi=p.get(i);    if (pi < r.lB.get(i))     dcScratch.set(i,r.lB.get(i)); else     if (pi > r.uB.get(i))     dcScratch.set(i,r.uB.get(i)); else     dcScratch.set(i,pi);  }  return dm.dist(p,dcScratch);}  }
class C{  private void initializeIDPLib(String clientKey,String clientSecret){  String serverIP=Preference.getString(AuthenticationActivity.this,context.getResources().getString(R.string.shared_pref_ip));  ServerConfig utils=new ServerConfig();  utils.setServerIP(serverIP);  String serverURL=utils.getServerURL() + Constants.OAUTH_ENDPOINT;  if (etDomain.getText() != null && !etDomain.getText().toString().trim().isEmpty()) {    username=etUsername.getText().toString().trim() + context.getResources().getString(R.string.intent_extra_at) + etDomain.getText().toString().trim();  } else {    username=etUsername.getText().toString().trim();  }  Preference.putString(context,context.getResources().getString(R.string.shared_pref_client_id),clientKey);  Preference.putString(context,context.getResources().getString(R.string.shared_pref_client_secret),clientSecret);  CredentialInfo info=new CredentialInfo();  info.setClientID(clientKey);  info.setClientSecret(clientSecret);  info.setUsername(username);  info.setPassword(passwordVal);  info.setTokenEndPoint(serverURL);  IdentityProxy.getInstance().init(info,AuthenticationActivity.this,this.getApplicationContext());}  }
class C{  protected boolean isLocationInExpandControl(TreePath path,int mouseX,int mouseY){  if (path != null && !treeModel.isLeaf(path.getLastPathComponent())) {    int boxWidth;    Insets i=tree.getInsets();    if (getExpandedIcon() != null)     boxWidth=getExpandedIcon().getIconWidth(); else     boxWidth=8;    int boxLeftX=getRowX(tree.getRowForPath(path),path.getPathCount() - 1);    if (leftToRight) {      boxLeftX=boxLeftX + i.left - getRightChildIndent() + 1;    } else {      boxLeftX=tree.getWidth() - boxLeftX - i.right + getRightChildIndent() - 1;    }    boxLeftX=findCenteredX(boxLeftX,boxWidth);    return (mouseX >= boxLeftX && mouseX < (boxLeftX + boxWidth));  }  return false;}  }
class C{  SegmentDocValuesProducer(SegmentCommitInfo si,Directory dir,FieldInfos coreInfos,FieldInfos allInfos,SegmentDocValues segDocValues) throws IOException {  boolean success=false;  try {    DocValuesProducer baseProducer=null;    for (    FieldInfo fi : allInfos) {      if (fi.getDocValuesType() == DocValuesType.NONE) {        continue;      }      long docValuesGen=fi.getDocValuesGen();      if (docValuesGen == -1) {        if (baseProducer == null) {          baseProducer=segDocValues.getDocValuesProducer(docValuesGen,si,dir,coreInfos);          dvGens.add(docValuesGen);          dvProducers.add(baseProducer);        }        dvProducersByField.put(fi.name,baseProducer);      } else {        assert !dvGens.contains(docValuesGen);        final DocValuesProducer dvp=segDocValues.getDocValuesProducer(docValuesGen,si,dir,new FieldInfos(new FieldInfo[]{fi}));        dvGens.add(docValuesGen);        dvProducers.add(dvp);        dvProducersByField.put(fi.name,dvp);      }    }    success=true;  }  finally {    if (success == false) {      try {        segDocValues.decRef(dvGens);      } catch (      Throwable t) {      }    }  }}  }
class C{  @Override public SurfaceBuilder<T> snapDistance(double distance){  snapDistance=distance;  return this;}  }
class C{  public void add(Tree tree){  if (taxonList == null) {    taxonList=tree;  }  totalTrees+=1;  addClades(tree,tree.getRoot(),null);}  }
class C{  protected int calculateCycles(int unitsCycle,BigDecimal qty){  BigDecimal cycles=qty;  BigDecimal unitsCycleBD=BigDecimal.valueOf(unitsCycle);  if (unitsCycleBD.signum() > 0) {    cycles=qty.divide(unitsCycleBD,0,RoundingMode.UP);  }  return cycles.intValue();}  }
class C{  @Override public byte[] next(){  if (iteratorIndex >= dictionaryChunks.get(outerIndex).size()) {    iteratorIndex=0;    outerIndex++;  }  byte[] value=dictionaryChunks.get(outerIndex).get(iteratorIndex);  currentIndex++;  iteratorIndex++;  return value;}  }
class C{  private static <T>int gallopRight(T key,T[] a,int base,int len,int hint,Comparator<? super T> c){  int ofs=1;  int lastOfs=0;  if (c.compare(key,a[base + hint]) < 0) {    int maxOfs=hint + 1;    while (ofs < maxOfs && c.compare(key,a[base + hint - ofs]) < 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  } else {    int maxOfs=len - hint;    while (ofs < maxOfs && c.compare(key,a[base + hint + ofs]) >= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  }  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (c.compare(key,a[base + m]) < 0)     ofs=m; else     lastOfs=m + 1;  }  return ofs;}  }
class C{  protected void masterLayout(){  gbc.anchor=GridBagConstraints.CENTER;  gbc.insets=new Insets(5,5,5,5);  gbc.fill=GridBagConstraints.NONE;  gbc.weighty=0.0;  gbc.gridx=0;  gbc.gridy=0;  int jbHeight=applyButton.getPreferredSize().height;  int jbWidth=applyButton.getPreferredSize().width;  int mpHeight=mainPanel.getPanel().getPreferredSize().height;  int mpWidth=mainPanel.getPanel().getPreferredSize().width;  gbc.gridheight=(int)Math.ceil((double)mpHeight / jbHeight);  gbc.gridwidth=(int)Math.ceil((double)mpWidth / jbWidth);  this.add(mainPanel.getPanel(),gbc);  gbc.gridy+=gbc.gridheight;  gbc.weighty=1.0;  gbc.fill=GridBagConstraints.VERTICAL;  gbc.anchor=GridBagConstraints.CENTER;  this.add(Box.createVerticalGlue(),gbc);  gbc.gridx+=gbc.gridwidth - 1;  gbc.gridy+=1;  gbc.weighty=0.0;  gbc.fill=GridBagConstraints.NONE;  gbc.anchor=GridBagConstraints.EAST;  gbc.insets=new Insets(10,10,10,10);  gbc.gridheight=1;  gbc.gridwidth=1;  applyButton.setVisible(true);  this.add(applyButton,gbc);}  }
class C{  public static void generateParameterReifierCode(String[] paramTypes,boolean isStatic,final CodeVisitor cv){  cv.visitIntInsn(SIPUSH,paramTypes.length);  cv.visitTypeInsn(ANEWARRAY,"java/lang/Object");  int localVarIndex=isStatic ? 0 : 1;  for (int i=0; i < paramTypes.length; ++i) {    String param=paramTypes[i];    cv.visitInsn(DUP);    cv.visitIntInsn(SIPUSH,i);    if (isPrimitive(param)) {      int opcode;      if (param.equals("F")) {        opcode=FLOAD;      } else       if (param.equals("D")) {        opcode=DLOAD;      } else       if (param.equals("J")) {        opcode=LLOAD;      } else {        opcode=ILOAD;      }      String type="bsh/Primitive";      cv.visitTypeInsn(NEW,type);      cv.visitInsn(DUP);      cv.visitVarInsn(opcode,localVarIndex);      String desc=param;      cv.visitMethodInsn(INVOKESPECIAL,type,"<init>","(" + desc + ")V");    } else {      cv.visitVarInsn(ALOAD,localVarIndex);    }    cv.visitInsn(AASTORE);    localVarIndex+=((param.equals("D") || param.equals("J")) ? 2 : 1);  }}  }
class C{  protected void updateIntensityLow(double intensity){  notifyTargetIntensityChange(intensity);  setState(OFF);}  }
class C{  public static <T>Set<T> toSet(T obj1,T obj2,T obj3){  Set<T> theSet=new LinkedHashSet<T>();  theSet.add(obj1);  theSet.add(obj2);  theSet.add(obj3);  return theSet;}  }
class C{  private String printList(final List<String> strings){  final StringBuilder sb=new StringBuilder("[");  if (strings != null && !strings.isEmpty()) {    sb.append(strings.get(0));    for (    String string : strings.subList(1,strings.size())) {      sb.append(", ");      sb.append(string);    }  }  sb.append("]");  return sb.toString();}  }
class C{  static public ICloseableIterator<IBindingSet[]> evaluateTupleQuery2(final AbstractTripleStore store,final ASTContainer astContainer,final QueryBindingSet globallyScopedBS,final boolean materialize) throws QueryEvaluationException {  final AST2BOpContext context=new AST2BOpContext(astContainer,store);  astContainer.clearOptimizedAST();  final IBindingSet[] globallyScopedBSAsList=toBindingSet(globallyScopedBS);  AST2BOpUtility.convert(context,globallyScopedBSAsList);  final QueryRoot optimizedQuery=astContainer.getOptimizedAST();  final boolean materializeProjectionInQuery=materialize && context.materializeProjectionInQuery && !optimizedQuery.hasSlice();  final List<String> projectedSet;  if (materialize) {    final IVariable<?>[] projected=astContainer.getOptimizedAST().getProjection().getProjectionVars();    projectedSet=new LinkedList<String>();    for (    IVariable<?> var : projected)     projectedSet.add(var.getName());  } else {    projectedSet=null;  }  doSparqlLogging(context);  final PipelineOp queryPlan=astContainer.getQueryPlan();  IRunningQuery runningQuery=null;  try {    runningQuery=context.queryEngine.eval(queryPlan,globallyScopedBSAsList);    final ICloseableIterator<IBindingSet[]> it1=runningQuery.iterator();    final ICloseableIterator<IBindingSet[]> it2;    if (materialize && !materializeProjectionInQuery && !projectedSet.isEmpty()) {      final IVariable<?>[] vars=projectedSet.toArray(new IVariable[projectedSet.size()]);      it2=new ChunkedMaterializationIterator(vars,context.db.getLexiconRelation(),false,it1);    } else {      it2=it1;    }    return it2;  } catch (  Throwable t) {    if (runningQuery != null) {      runningQuery.cancel(true);    }    throw new QueryEvaluationException(t);  }}  }
class C{  public boolean mouseDragged(MouseEvent e){  if (grabbed_plot_graphics_) {    int x=e.getX();    int y=e.getY();    int dx=x - prevX;    int dy=y - prevY;    plotX+=dx;    plotY+=dy;    prevX=x;    prevY=y;    graph.resize(plotX,plotY,plotWidth,plotHeight);    OMGraphicList plotGraphics=graph.getPlotGraphics();    plotGraphics.generate(getProjection(),true);    repaint();  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object obj=stack.pop();  return (obj instanceof sage.plugin.PluginWrapper) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public void onClampToPacific(View view){  if (!checkReady()) {    return;  }  mMap.setLatLngBoundsForCameraTarget(PACIFIC);  mMap.animateCamera(CameraUpdateFactory.newCameraPosition(PACIFIC_CAMERA));}  }
class C{  private void clusterData(DBIDs ids,RangeQuery<O> rnnQuery,WritableDoubleDataStore radii,WritableDataStore<ModifiableDBIDs> labels){  FiniteProgress clustProg=LOG.isVerbose() ? new FiniteProgress("Density-Based Clustering",ids.size(),LOG) : null;  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    if (labels.get(iter) != null) {      continue;    }    ModifiableDBIDs newCluster=DBIDUtil.newArray();    newCluster.add(iter);    labels.put(iter,newCluster);    LOG.incrementProcessed(clustProg);    ModifiableDBIDs nChain=DBIDUtil.newArray();    nChain.add(iter);    for (DBIDIter toGetNeighbors=nChain.iter(); toGetNeighbors.valid(); toGetNeighbors.advance()) {      double range=radii.doubleValue(toGetNeighbors);      DoubleDBIDList nNeighbors=rnnQuery.getRangeForDBID(toGetNeighbors,range);      for (DoubleDBIDListIter iter2=nNeighbors.iter(); iter2.valid(); iter2.advance()) {        if (DBIDUtil.equal(toGetNeighbors,iter2)) {          continue;        }        if (labels.get(iter2) == null) {          newCluster.add(iter2);          labels.put(iter2,newCluster);          nChain.add(iter2);          LOG.incrementProcessed(clustProg);        } else         if (labels.get(iter2) != newCluster) {          ModifiableDBIDs toBeDeleted=labels.get(iter2);          newCluster.addDBIDs(toBeDeleted);          for (DBIDIter iter3=toBeDeleted.iter(); iter3.valid(); iter3.advance()) {            labels.put(iter3,newCluster);          }          toBeDeleted.clear();        }      }    }  }  LOG.ensureCompleted(clustProg);}  }
class C{  public CSVParserBuilder withIgnoreQuotations(final boolean ignoreQuotations){  this.ignoreQuotations=ignoreQuotations;  return this;}  }
class C{  public PoolParams(int maxSizeSoftCap,int maxSizeHardCap,@Nullable SparseIntArray bucketSizes,int minBucketSize,int maxBucketSize,int maxNumThreads){  Preconditions.checkState(maxSizeSoftCap >= 0 && maxSizeHardCap >= maxSizeSoftCap);  this.maxSizeSoftCap=maxSizeSoftCap;  this.maxSizeHardCap=maxSizeHardCap;  this.bucketSizes=bucketSizes;  this.minBucketSize=minBucketSize;  this.maxBucketSize=maxBucketSize;  this.maxNumThreads=maxNumThreads;}  }
class C{  public void printStackTrace(PrintStream ps){  super.printStackTrace(ps);  if (rootCause != null) {    ps.println("With Root Cause:");    rootCause.printStackTrace(ps);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    double east=0, west=0, north=0, south=0;    if (inputFile.toLowerCase().endsWith(".dep")) {      WhiteboxRaster input=new WhiteboxRaster(inputFile,"r");      double gridResX=input.getCellSizeX();      double gridResY=input.getCellSizeY();      east=input.getEast();      west=input.getWest();      north=input.getNorth();      south=input.getSouth();      input.close();    } else     if (inputFile.toLowerCase().endsWith(".shp")) {      ShapeFile input=new ShapeFile(inputFile);      east=input.getxMax();      west=input.getxMin();      north=input.getyMax();      south=input.getyMin();    } else {      showFeedback("There was a problem reading the input file.");      return;    }    DBFField fields[]=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    ShapeFile output=new ShapeFile(outputFile,ShapeType.POLYGON,fields);    if (inputFile.toLowerCase().endsWith(".shp")) {      output.setProjectionStringFromOtherShapefile(new ShapeFile(inputFile));    }    int[] parts={0};    PointsList points=new PointsList();    points.addPoint(west,north);    points.addPoint(east,north);    points.addPoint(east,south);    points.addPoint(west,south);    points.addPoint(west,north);    Polygon poly=new Polygon(parts,points.getPointsArray());    Object[] rowData=new Object[1];    rowData[0]=new Double(1);    output.addRecord(poly,rowData);    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  LayerDrawable(@NonNull Drawable[] layers,@Nullable LayerState state){  this(state,null);  if (layers == null) {    throw new IllegalArgumentException("layers must be non-null");  }  final int length=layers.length;  final ChildDrawable[] r=new ChildDrawable[length];  for (int i=0; i < length; i++) {    r[i]=new ChildDrawable();    r[i].mDrawable=layers[i];    layers[i].setCallback(this);    mLayerState.mChildrenChangingConfigurations|=layers[i].getChangingConfigurations();  }  mLayerState.mNum=length;  mLayerState.mChildren=r;  ensurePadding();  refreshPadding();}  }
class C{  protected Node newNode(){  return new SVGOMDefsElement();}  }
class C{  private boolean query() throws SQLException {  statement=this.connection.createStatement();  String query="SELECT PrimaryKey, RevisionCounter," + " RevisionID, ArticleID, Timestamp, FullRevisionID " + "FROM revisions";  if (primaryKey > 0) {    query+=" WHERE PrimaryKey > " + primaryKey;  }  if (MAX_NUMBER_RESULTS > 0) {    query+=" LIMIT " + MAX_NUMBER_RESULTS;  }  result=statement.executeQuery(query);  return result.next();}  }
class C{  public SingleParameter(String paramId){  this.paramId=paramId;  this.dimension=-1;}  }
class C{  public void zonesetActivate(String zonesetName,Integer vsanId,boolean no) throws NetworkDeviceControllerException {  if (!inConfigMode) {    throw NetworkDeviceControllerException.exceptions.mdsDeviceNotInConfigMode();  }  if (lastPrompt != SSHPrompt.MDS_CONFIG) {    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedLastPrompt(lastPrompt.toString(),SSHPrompt.MDS_CONFIG.toString());  }  String noString=no ? MDSDialogProperties.getString("MDSDialog.zonesetActivate.no.cmd") : "";  SSHPrompt[] prompts={SSHPrompt.MDS_CONFIG,SSHPrompt.MDS_CONTINUE_QUERY};  StringBuilder buf=new StringBuilder();  boolean retryNeeded=true;  for (int retryCount=0; retryCount < sessionLockRetryMax && retryNeeded; retryCount++) {    String payload=MessageFormat.format(MDSDialogProperties.getString("MDSDialog.zonesetActivate.cmd"),zonesetName,vsanId.toString(),noString);    lastPrompt=sendWaitFor(payload,defaultTimeout,prompts,buf);    if (buf.toString().indexOf(MDSDialogProperties.getString("MDSDialog.zonesetActivate.no.zone.members")) >= 0) {      throw new NetworkDeviceControllerException("Activate zoneset/vsan: " + zonesetName + "/"+ vsanId+ " failed.  One or more zone do not have members");    } else {      if (lastPrompt == SSHPrompt.MDS_CONTINUE_QUERY) {        payload=MDSDialogProperties.getString("MDSDialog.zonesetActivate.continue.y.cmd");        SSHPrompt[] prompts2={SSHPrompt.MDS_CONFIG};        buf=new StringBuilder();        lastPrompt=sendWaitFor(payload,defaultTimeout,prompts2,buf);      }      String[] lines=getLines(buf);      retryNeeded=checkForEnhancedZoneSession(lines,retryCount);    }  }}  }
class C{  public JoinGroupNode(final boolean optional,final IGroupMemberNode child){  super();  setOptional(optional);  addChild(child);}  }
class C{  public StatusEffectType(String enumName,int enumId,int typeID,boolean instant,int maxPotionLevel){  super(enumName,enumId);  this.typeID=(byte)typeID;  this.instant=instant;  this.maxPotionLevel=maxPotionLevel;}  }
class C{  public XPathAPI newXPathAPI(){  return new JDKXPathAPI();}  }
class C{  private Strategy findStrategyByName(String name){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Strategy> query=builder.createQuery(Strategy.class);    Root<Strategy> from=query.from(Strategy.class);    query.select(from);    query.where(builder.equal(from.get("name"),name));    List<Strategy> items=entityManager.createQuery(query).getResultList();    if (items.size() > 0) {      for (      Strategy itme : items) {        itme.getIndicatorSeries().size();      }      return items.get(0);    }    return null;  } catch (  Exception re) {    throw re;  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ResettableScanner(final ICharacterScanner scanner){  Assert.isNotNull(scanner);  fDelegate=scanner;  mark();}  }
class C{  void removeDockWrapper(DockWrapper dw){  super.remove(dw);}  }
class C{  public static boolean isConstantField(PsiField field){  PsiModifierList list=field.getModifierList();  if (list == null) {    return false;  }  if (!list.hasModifierProperty(PsiModifier.STATIC)) {    return false;  }  return !StringUtil.hasLowerCaseChar(field.getName());}  }
class C{  public void pointerRelease(float x,float y,String componentName){  TestUtils.pointerRelease(x,y,componentName);}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public static String isMinimalExpression(ExprNode expression){  ExprNodeSubselectDeclaredDotVisitor subselectVisitor=new ExprNodeSubselectDeclaredDotVisitor();  expression.accept(subselectVisitor);  if (subselectVisitor.getSubselects().size() > 0) {    return "a subselect";  }  ExprNodeViewResourceVisitor viewResourceVisitor=new ExprNodeViewResourceVisitor();  expression.accept(viewResourceVisitor);  if (viewResourceVisitor.getExprNodes().size() > 0) {    return "a function that requires view resources (prior, prev)";  }  List<ExprAggregateNode> aggregateNodes=new LinkedList<ExprAggregateNode>();  ExprAggregateNodeUtil.getAggregatesBottomUp(expression,aggregateNodes);  if (!aggregateNodes.isEmpty()) {    return "an aggregation function";  }  return null;}  }
class C{  @RequestProcessing(value="/mall/product/buy",method=HTTPRequestMethod.POST) @Before(adviceClass={StopwatchStartAdvice.class,LoginCheck.class,CSRFCheck.class}) @After(adviceClass={StopwatchEndAdvice.class}) public void buyProduct(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final JSONObject requestJSONObject=Requests.parseRequestJSONObject(request,context.getResponse());  final String productId=requestJSONObject.optString(Common.PRODUCT_ID);  final int num=requestJSONObject.optInt(Common.NUM,1);  final JSONObject currentUser=(JSONObject)request.getAttribute(User.USER);  final String userId=currentUser.optString(Keys.OBJECT_ID);  final JSONObject ret=productMgmtService.buyProduct(productId,userId,num);  if (ret.optBoolean(Keys.STATUS_CODE)) {    final JSONObject data=new JSONObject();    data.put(Common.GOTO,"/member/" + currentUser.optString(User.USER_NAME) + "/points");    context.renderJSON(data).renderTrueResult().renderMsg(langPropsService.get("buySuccLabel"));  } else {    context.renderJSON().renderFalseResult().renderMsg(langPropsService.get("buyFailedLabel") + " - " + ret.optString(Keys.MSG));  }}  }
class C{  protected void recordLocalNSDecl(Node node){  NamedNodeMap atts=((Element)node).getAttributes();  int length=atts.getLength();  for (int i=0; i < length; i++) {    Node attr=atts.item(i);    String localName=attr.getLocalName();    String attrPrefix=attr.getPrefix();    String attrValue=attr.getNodeValue();    String attrNS=attr.getNamespaceURI();    localName=localName == null || XMLNS_PREFIX.equals(localName) ? "" : localName;    attrPrefix=attrPrefix == null ? "" : attrPrefix;    attrValue=attrValue == null ? "" : attrValue;    attrNS=attrNS == null ? "" : attrNS;    if (XMLNS_URI.equals(attrNS)) {      if (XMLNS_URI.equals(attrValue)) {        String msg=Utils.messages.createMessage(MsgKey.ER_NS_PREFIX_CANNOT_BE_BOUND,new Object[]{attrPrefix,XMLNS_URI});        if (fErrorHandler != null) {          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_ERROR,msg,MsgKey.ER_NS_PREFIX_CANNOT_BE_BOUND,null,null,null));        }      } else {        if (XMLNS_PREFIX.equals(attrPrefix)) {          if (attrValue.length() != 0) {            fNSBinder.declarePrefix(localName,attrValue);          } else {          }        } else {          fNSBinder.declarePrefix("",attrValue);        }      }    }  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.fine("doGet");  log.info(response.toString());  WebSessionCtx wsc=WebSessionCtx.get(request);  WWindowStatus ws=WWindowStatus.get(request);  m_curTab=ws.curTab;  WebDoc doc=null;  File file=null;  if (ws == null) {    doc=WebDoc.createPopup("No Context");    doc.addPopupClose(wsc.ctx);  } else {    log.info("");    if (!MRole.getDefault().isCanReport(ws.curTab.getAD_Table_ID())) {      doc=WebDoc.createPopup("Access Cannot Report");      doc.addPopupClose(wsc.ctx);    }    MQuery query=new MQuery(m_curTab.getTableName());    String queryColumn=m_curTab.getLinkColumnName();    if (queryColumn.length() == 0)     queryColumn=m_curTab.getKeyColumnName();    String infoName=null;    String infoDisplay=null;    for (int i=0; i < m_curTab.getFieldCount(); i++) {      GridField field=m_curTab.getField(i);      if (field.isKey())       infoName=field.getHeader();      if ((field.getColumnName().equals("Name") || field.getColumnName().equals("DocumentNo")) && field.getValue() != null)       infoDisplay=field.getValue().toString();      if (infoName != null && infoDisplay != null)       break;    }    if (queryColumn.length() != 0) {      if (queryColumn.endsWith("_ID"))       query.addRestriction(queryColumn,MQuery.EQUAL,new Integer(Env.getContextAsInt(wsc.ctx,m_curTab.getWindowNo(),queryColumn)),infoName,infoDisplay); else       query.addRestriction(queryColumn,MQuery.EQUAL,Env.getContext(wsc.ctx,m_curTab.getWindowNo(),queryColumn),infoName,infoDisplay);    }    file=getPrintFormats(m_curTab.getAD_Table_ID(),request,m_curTab,query);    String error=WebUtil.streamFile(response,file);    if (error == null)     return;    doc=WebDoc.createWindow(error);  }  WebUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  public static AnnotationFS selectSingleFsAt(JCas aJcas,Type aType,int aBegin,int aEnd){  for (  AnnotationFS anFS : selectCovered(aJcas.getCas(),aType,aBegin,aEnd)) {    if (anFS.getBegin() == aBegin && anFS.getEnd() == aEnd) {      return anFS;    }  }  return null;}  }
class C{  protected boolean err(){  return status != STATUS_OK;}  }
class C{  public AttributeParameterPrecondition(InputPort inport,Operator operator,String parameterName){  this(inport,operator,parameterName,null,Ontology.VALUE_TYPE);}  }
class C{  protected Color parseColor(String prop,Color defValue){  Color result;  Color color;  String colorStr;  result=defValue;  try {    colorStr=PROPERTIES.getProperty(prop);    color=VisualizeUtils.processColour(colorStr,result);    if (color == null) {      throw new Exception(colorStr);    }    result=color;  } catch (  Exception e) {    System.err.println("MemoryUsagePanel: cannot parse color '" + e.getMessage() + "' - ignored!");  }  return result;}  }
class C{  public XmlHandler overrideClass(Class<?> aClass,Global global){  overrideGlobal(aClass,global);  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static boolean canCreatePalette(RenderedImage image){  if (image == null) {    throw new IllegalArgumentException("image == null");  }  ImageTypeSpecifier type=new ImageTypeSpecifier(image);  return canCreatePalette(type);}  }
class C{  public synchronized void pushMessage(final Message msg){  if (msg == null) {    if (Cfg.DEBUG) {      Check.log(TAG + " Command queue is null");    }    return;  }  msgQueue.add(msg);}  }
class C{  protected void ensureLoaded() throws RepositoryException {  if (isLoaded()) {    return;  }  String resourcePath=getResource() + "/CONTENTS";  InputStream in=null;  try {    in=Tools.getResourceInputStream(resourcePath);  } catch (  IOException e1) {    throw new RepositoryException("Cannot find contents of folder " + getResource(),e1);  }  this.folders=new LinkedList<Folder>();  this.data=new LinkedList<DataEntry>();  try {    String[] lines=Tools.readTextFile(new InputStreamReader(in,"UTF-8")).split("\n");    for (    String line : lines) {      line=line.trim();      if (!line.isEmpty()) {        int space=line.indexOf(" ");        String name=space != -1 ? line.substring(space + 1).trim() : null;        if (line.startsWith("FOLDER ")) {          folders.add(new ResourceFolder(this,name,getPath() + "/" + name,getRepository()));        } else         if (line.startsWith("ENTRY")) {          String nameWOExt=name.substring(0,name.length() - 4);          if (name.endsWith(".rmp")) {            data.add(new ResourceProcessEntry(this,nameWOExt,getPath() + "/" + nameWOExt,getRepository()));          } else           if (name.endsWith(".ioo")) {            data.add(new ResourceIOObjectEntry(this,nameWOExt,getPath() + "/" + nameWOExt,getRepository()));          } else {            throw new RepositoryException("Unknown entry type infolder '" + getName() + "': "+ name);          }        } else {          throw new RepositoryException("Illegal entry type in folder '" + getName() + "': "+ line);        }      }    }  } catch (  Exception e) {    throw new RepositoryException("Error reading contents of folder " + getName() + ": "+ e,e);  } finally {    try {      in.close();    } catch (    IOException e) {    }  }}  }
class C{  public FilterDialog(Frame owner){  super(owner,"Filter Settings",true);  try {    setIconImage(TDA.createImageIcon("Filters.png").getImage());  } catch (  NoSuchMethodError nsme) {  }  frame=owner;  getContentPane().setLayout(new BorderLayout());  initPanel();}  }
class C{  public void addConfigured(final ResourceCollection resources){  compareTo.add(resources);}  }
class C{  @Override public void respond(String response){  getChannel().send().message(getUser(),response);}  }
class C{  public void error(int message){  sendPluginResult(new PluginResult(PluginResult.Status.ERROR,message));}  }
class C{  public void undoListeners(MapBean map){  removeProjectionListener(map);  map.removeProjectionListener(this);}  }
class C{  public OpenSecureChannelRequest clone(){  OpenSecureChannelRequest result=new OpenSecureChannelRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.ClientProtocolVersion=ClientProtocolVersion;  result.RequestType=RequestType;  result.SecurityMode=SecurityMode;  result.ClientNonce=ClientNonce;  result.RequestedLifetime=RequestedLifetime;  return result;}  }
class C{  private Tuple<SignalPlan,DgSylviaSignalPlan> searchActivePlans(){  DgSylviaSignalPlan sylviaPlan=null;  SignalPlan fixedTimePlan=null;  for (  Id<SignalPlan> planId : this.signalPlans.keySet()) {    if (planId.toString().startsWith(DgSylviaPreprocessData.SYLVIA_PREFIX)) {      sylviaPlan=(DgSylviaSignalPlan)this.signalPlans.get(planId);    }    if (planId.toString().startsWith(DgSylviaPreprocessData.FIXED_TIME_PREFIX)) {      fixedTimePlan=this.signalPlans.get(planId);    }  }  if (sylviaPlan == null && fixedTimePlan == null) {    throw new IllegalStateException("No suitable plans found for controller of signal system: " + this.system.getId());  }  return new Tuple<SignalPlan,DgSylviaSignalPlan>(fixedTimePlan,sylviaPlan);}  }
class C{  private void sendFromGame(GpgClientMessage message) throws IOException {  String action=message.getCommand().getString();  int headerSize=action.length();  String headerField=action.replace("\t","/t").replace("\n","/n");  gameToRelayOutputStream.writeInt(headerSize);  gameToRelayOutputStream.writeString(headerField);  gameToRelayOutputStream.writeArgs(message.getArgs());  gameToRelayOutputStream.flush();}  }
class C{  public static boolean checkRootPermission(){  return execCommand("echo root",true,false).result == 0;}  }
class C{  private static void fetchReferenceMap(final IOperandTreeNode node,final INaviInstruction instruction,final Map<INaviInstruction,INaviFunction> functions){  final List<IReference> references=node.getReferences();  for (  final IReference reference : references) {    if (ReferenceType.isCodeReference(reference.getType())) {      final IAddress target=reference.getTarget();      final INaviFunction function=instruction.getModule().getContent().getFunctionContainer().getFunction(target);      if (function != null) {        functions.put(instruction,function);      }    }  }  for (  final IOperandTreeNode child : node.getChildren()) {    fetchReferenceMap(child,instruction,functions);  }}  }
class C{  public void incrementErrorLoginCount(){  _errorLoginAttempts++;}  }
class C{  public DbfFile(int columnCount){  this();  _columnCount=columnCount;  _records=new ArrayList<List<Object>>();  _lengths=new int[columnCount];  _decimalCounts=new byte[columnCount];  _types=new byte[columnCount];  _names=new String[columnCount];}  }
class C{  protected String resolve(TemplateContext context){  return context.getVariable(getType());}  }
class C{  public void add(final int revisionID,final long revisionPrimaryKey,final long fullRevisionPrimaryKey){  boolean sql=!insertStatement.isEmpty();  if (sql && buffer.length() != insertStatement.length()) {    this.buffer.append(",");  }  this.buffer.append((sql ? "(" : "") + revisionID + ","+ revisionPrimaryKey+ ","+ fullRevisionPrimaryKey+ (sql ? ")" : ""));  if (!sql) {    buffer.append("\n");  }  if (buffer.length() + 100 >= MAX_ALLOWED_PACKET) {    storeBuffer();  }}  }
class C{  public boolean isEnabled(){  return m_Enabled;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isGroupExpanded(int groupPosition){  GroupMetadata groupMetadata;  for (int i=mExpGroupMetadataList.size() - 1; i >= 0; i--) {    groupMetadata=mExpGroupMetadataList.get(i);    if (groupMetadata.gPos == groupPosition) {      return true;    }  }  return false;}  }
class C{  public Trie(boolean caseSensitive){  this.caseSensitive=caseSensitive;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:03.059 -0500",hash_original_method="27B70155371A7D816D4F089317C25CF6",hash_generated_method="9613E116A4D58A04814824802D7E1A98") private final int loadResourceValue(int ident,short density,TypedValue outValue,boolean resolve){  addTaint(ident);  addTaint(density);  addTaint(outValue.getTaint());  addTaint(resolve);  return getTaintInt();}  }
class C{  @Override public void onCreate(Bundle icicle){  super.onCreate(icicle);  if (!LibsChecker.checkVitamioLibs(this))   return;  setContentView(R.layout.mediaplayer_2);  mPreview=(SurfaceView)findViewById(R.id.surface);  holder=mPreview.getHolder();  holder.addCallback(this);  extras=getIntent().getExtras();}  }
class C{  public BasicTextImage(int columns,int rows){  this(new TerminalSize(columns,rows));}  }
class C{  public void breakpoint(@NotNull String file,int lineNumber) throws IOException, InterruptedException, DebuggerException {  String command="break " + file + ":"+ lineNumber;  GdbOutput gdbOutput=sendCommand(command);  GdbBreak.parse(gdbOutput);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  String attrValue;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(3);  testEmployee.setAttribute("class","Neither");  attrValue=testEmployee.getAttribute("class");  assertEquals("elementChangeAttributeValueAssert","Neither",attrValue);}  }
class C{  protected void sequence_S_Equation(ISerializationContext context,S_Assignment semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public boolean isSOTrx(){  Object oo=get_Value(COLUMNNAME_IsSOTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public final boolean addAll(RTLVariable[] array){  if (array == null)   return false;  boolean changed=false;  for (int i=0; i < array.length; i++)   changed|=this.add(array[i]);  return changed;}  }
class C{  public static void logWarning(String message){  log(IStatus.WARNING,IStatus.OK,message,null);}  }
class C{  public void enableSQLDetail(boolean enable){  params.isSQLDetailEnabled=enable;  if (enable)   params.sqlBuffer.enable(); else   params.sqlBuffer.disable();  if (enable)   enable(true);}  }
class C{  public void paint(Graphics g){  super.paint(g);  plotScale(g);}  }
class C{  public Response addOutcast(String roomName,String jid){  return restClient.post("chatrooms/" + roomName + "/outcasts/"+ jid,null,new HashMap<String,String>());}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","gzdhxy");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public boolean isExistential(){  return false;}  }
class C{  @Override public ResponseWriter cloneWithWriter(Writer writer){  try {    HtmlResponseWriter responseWriter=new HtmlResponseWriter(writer,getContentType(),getCharacterEncoding(),isScriptHidingEnabled,isScriptInAttributeValueEnabled,disableUnicodeEscaping,isPartial);    responseWriter.dontEscape=this.dontEscape;    responseWriter.writingCdata=this.writingCdata;    return responseWriter;  } catch (  FacesException e) {    throw new IllegalStateException();  }}  }
class C{  public void clearColumns(){  m_tableColumns.clear();  columnAttributesMap.clear();  hiddenColumns.clear();}  }
class C{  public Object executeCommand(final int ID,Object[] args){  if (args != null && args.length == 1 && args[0] == null) {    args=null;  }  Object status=null;  currentGUI.setExecutingCommand(true);  final Map jpedalActionHandlers=(Map)decode_pdf.getExternalHandler(Options.JPedalActionHandlers);  if (jpedalActionHandlers != null) {    final JPedalActionHandler jpedalAction=(JPedalActionHandler)jpedalActionHandlers.get(ID);    if (jpedalAction != null) {      jpedalAction.actionPerformed(currentGUI,this);      return null;    }  }  if (!SharedViewer.isFX()) {    status=executeSwingCommand(ID,args,status);  }  if (!currentGUI.isCommandInThread()) {    currentGUI.setExecutingCommand(false);  }  return status;}  }
class C{  public void toExternal(Coordinate internal,Coordinate external){  external.x=internal.x;  external.y=internal.y;}  }
class C{  public void installUI(JComponent c){  super.installUI(c);  MetalToolBarUI.register(c);}  }
class C{  public static void uiImpl(){  UIManager.put("Slider.background",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("Slider.tickColor",new ColorUIResource(new Color(154,154,154)));  UIManager.put("Slider.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("Slider.focus",new ColorUIResource(BeautyEyeLNFHelper.commonFocusedBorderColor));  UIManager.put("SliderUI",org.jb2011.lnf.beautyeye.ch15_slider.BESliderUI.class.getName());}  }
class C{  public Node<T> addChildNodes(Collection<? extends Node<T>> nodes){  for (  Node<T> aux : nodes) {    aux.increaseDepth();    aux.parent=this;    aux.index=children.size();    children.add(aux);  }  return this;}  }
class C{  FormatSpecifierParser(String format){  this.format=format;  this.length=format.length();}  }
class C{  public static void showProgressDialog(Context ctx,String title,String body,boolean isCancellable){  showProgressDialog(ctx,title,body,null,isCancellable);}  }
class C{  public DOMKeyInfo(List<? extends XMLStructure> content,String id){  if (content == null) {    throw new NullPointerException("content cannot be null");  }  this.keyInfoTypes=Collections.unmodifiableList(new ArrayList<XMLStructure>(content));  if (this.keyInfoTypes.isEmpty()) {    throw new IllegalArgumentException("content cannot be empty");  }  for (int i=0, size=this.keyInfoTypes.size(); i < size; i++) {    if (!(this.keyInfoTypes.get(i) instanceof XMLStructure)) {      throw new ClassCastException("content[" + i + "] is not a valid KeyInfo type");    }  }  this.id=id;}  }
class C{  public GuildRoleUpdateHandler(ImplDiscordAPI api){  super(api,true,"GUILD_ROLE_UPDATE");}  }
class C{  public void hit(int timestamp){  if (time[timestamp % 300] == timestamp)   hit[timestamp % 300]++; else   hit[timestamp % 300]=1;}  }
class C{  Random forkRandom(){  if (random == null) {    return null;  }  return new Random(random.nextLong());}  }
class C{  @Override OrganizedOperands organizeOperands(ExecutionContext context) throws FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException {  if (getOperator() == LITERAL_and) {    return organizeOperandsForAndJunction(context);  } else {    throw new IllegalStateException(LocalizedStrings.RangeJunction_IN_THE_CASE_OF_AN_OR_JUNCTION_A_RANGEJUNCTION_SHOULD_NOT_BE_FORMED_FOR_NOW.toLocalizedString());  }}  }
class C{  public GraphBuilder<N> expectedNodeCount(int expectedNodeCount){  checkArgument(expectedNodeCount >= 0,"The expected number of nodes can't be negative: %s",expectedNodeCount);  this.expectedNodeCount=Optional.of(expectedNodeCount);  return this;}  }
class C{  @Override public int indexOf(Comparable seriesKey){  return this.seriesKeys.indexOf(seriesKey);}  }
class C{  private Set<EgDemandDetails> carryForwardCollection(final Property newProperty,final Installment inst,final Set<EgDemandDetails> newEgDemandDetailsSet,final Ptdemand ptDmndOld,final PropertyTypeMaster oldPropTypeMaster,final PropertyTypeMaster newPropTypeMaster){  LOGGER.debug("Entered into carryForwardCollection");  LOGGER.debug("carryForwardCollection: newProperty: " + newProperty + ", inst: "+ inst+ ", newEgDemandDetailsSet: "+ newEgDemandDetailsSet+ ", ptDmndOld: "+ ptDmndOld+ ", oldPropTypeMaster: "+ oldPropTypeMaster+ ", newPropTypeMaster: "+ newPropTypeMaster);  final Map<String,BigDecimal> dmdRsnAmt=new LinkedHashMap<String,BigDecimal>();  final List<String> demandReasonsWithAdvance=new ArrayList<String>(DEMAND_RSNS_LIST);  demandReasonsWithAdvance.add(PropertyTaxConstants.DEMANDRSN_CODE_ADVANCE);  for (  final String rsn : demandReasonsWithAdvance) {    List<EgDemandDetails> oldEgDmndDtlsList=null;    List<EgDemandDetails> newEgDmndDtlsList=null;    oldEgDmndDtlsList=getEgDemandDetailsListForReason(ptDmndOld.getEgDemandDetails(),rsn);    newEgDmndDtlsList=getEgDemandDetailsListForReason(newEgDemandDetailsSet,rsn);    Map<Installment,EgDemandDetails> oldDemandDtlsMap=null;    Map<Installment,EgDemandDetails> newDemandDtlsMap=null;    EgDemandDetails oldDmndDtls=null;    EgDemandDetails newDmndDtls=null;    if (oldEgDmndDtlsList != null) {      oldDemandDtlsMap=getEgDemandDetailsAsMap(oldEgDmndDtlsList);      oldDmndDtls=oldDemandDtlsMap.get(inst);    }    if (newEgDmndDtlsList != null) {      newDemandDtlsMap=getEgDemandDetailsAsMap(newEgDmndDtlsList);      newDmndDtls=newDemandDtlsMap.get(inst);    }    calculateExcessCollection(dmdRsnAmt,rsn,oldDmndDtls,newDmndDtls);  }  excessCollAmtMap.put(inst,dmdRsnAmt);  demandDetails.put(inst,newEgDemandDetailsSet);  LOGGER.debug("carryForwardCollection: newEgDemandDetailsSet: " + newEgDemandDetailsSet);  LOGGER.debug("Exiting from carryForwardCollection");  return newEgDemandDetailsSet;}  }
class C{  public Asn1Object read() throws IOException {  int tag=in.read();  if (tag == -1) {    throw new IOException("Invalid DER: stream too short, missing tag");  }  int length=getLength();  byte[] value=new byte[length];  int n=in.read(value);  if (n < length) {    throw new IOException("Invalid DER: stream too short, missing value");  }  return new Asn1Object(tag,length,value);}  }
class C{  private void addMovie(MovieSet movieSet,Movie movie){synchronized (root) {    MovieSetTreeNode parent=(MovieSetTreeNode)nodeMap.get(movieSet);    MovieTreeNode child=new MovieTreeNode(movie);    if (parent != null) {      nodeMap.put(movie,child);      parent.add(child);      int index=parent.getIndex(child);      TreeModelEvent event=new TreeModelEvent(this,parent.getPath(),new int[]{index},new Object[]{child});      for (      TreeModelListener listener : listeners) {        listener.treeNodesInserted(event);      }    }  }}  }
class C{  public boolean isSrcClass(String clz){  return srcClasses.contains(clz);}  }
class C{  private static boolean CallStaticBooleanMethodA(JNIEnvironment env,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallStaticBooleanMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,0,methodID,argAddress,TypeReference.Boolean,true);  return Reflection.unwrapBoolean(returnObj);}  }
class C{  public NpmToolRunnerPage(String pageName){  super(pageName);  setTitle(pageName);}  }
class C{  public boolean startDrag(int position,int deltaX,int deltaY){  int mDragFlags=0;  if (mSortEnabled) {    mDragFlags|=DragSortListView.DRAG_POS_Y | DragSortListView.DRAG_NEG_Y;  }  if (mRemoveEnabled) {    if (mRemoveMode == FLING_RIGHT_REMOVE) {      mDragFlags|=DragSortListView.DRAG_POS_X;    } else     if (mRemoveMode == FLING_LEFT_REMOVE) {      mDragFlags|=DragSortListView.DRAG_NEG_X;    }  }  mDragging=mDslv.startDrag(position - mDslv.getHeaderViewsCount(),mDragFlags,deltaX,deltaY);  return mDragging;}  }
class C{  int flipTriangle(int i,long[] flipped){  final Triangle cur=tris.get(i);  if (cur.ab >= 0) {    final int ot=cur.ab;    Triangle oth=tris.get(ot);    Orientation orient=cur.findOrientation(oth);    final int opp, lef, rig;switch (orient) {case ORIENT_AB_BA:      opp=oth.c;    lef=oth.bc;  rig=oth.ca;break;case ORIENT_AB_CB:opp=oth.a;lef=oth.ca;rig=oth.ab;break;case ORIENT_AB_AC:opp=oth.b;lef=oth.ab;rig=oth.bc;break;default :throw new RuntimeException("Neighbor triangles not aligned?");}if (cur.inCircle(points.get(opp))) {final int a=cur.c, b=cur.a, c=opp, d=cur.b;final int ab=cur.ca, bc=lef, cd=rig, da=cur.bc;final int ca=ot, ac=i;cur.set(a,ab,b,bc,c,ca);cur.updateCircumcircle(points);oth.set(c,cd,d,da,a,ac);oth.updateCircumcircle(points);if (bc >= 0) {tris.get(bc).replaceEdge(c,b,ot,i);}if (da >= 0) {tris.get(da).replaceEdge(a,d,i,ot);}BitsUtil.setI(flipped,i);BitsUtil.setI(flipped,ot);return ot;}}if (cur.bc >= 0) {final int ot=cur.bc;Triangle oth=tris.get(ot);Orientation orient=cur.findOrientation(oth);final int opp, lef, rig;switch (orient) {case ORIENT_BC_BA:opp=oth.c;lef=oth.bc;rig=oth.ca;break;case ORIENT_BC_CB:opp=oth.a;lef=oth.ca;rig=oth.ab;break;case ORIENT_BC_AC:opp=oth.b;lef=oth.ab;rig=oth.bc;break;default :throw new RuntimeException("Neighbor triangles not aligned? " + orient);}if (cur.inCircle(points.get(opp))) {final int a=cur.a, b=cur.b, c=opp, d=cur.c;final int ab=cur.ab, bc=lef, cd=rig, da=cur.ca;final int ca=ot, ac=i;cur.set(a,ab,b,bc,c,ca);cur.updateCircumcircle(points);oth.set(c,cd,d,da,a,ac);oth.updateCircumcircle(points);if (bc >= 0) {tris.get(bc).replaceEdge(c,b,ot,i);}if (da >= 0) {tris.get(da).replaceEdge(a,d,i,ot);}BitsUtil.setI(flipped,i);BitsUtil.setI(flipped,ot);return ot;}}if (cur.ca >= 0) {final int ot=cur.ca;Triangle oth=tris.get(ot);Orientation orient=cur.findOrientation(oth);final int opp, lef, rig;switch (orient) {case ORIENT_CA_BA:opp=oth.c;lef=oth.bc;rig=oth.ca;break;case ORIENT_CA_CB:opp=oth.a;lef=oth.ca;rig=oth.ab;break;case ORIENT_CA_AC:opp=oth.b;lef=oth.ab;rig=oth.bc;break;default :throw new RuntimeException("Neighbor triangles not aligned?");}if (cur.inCircle(points.get(opp))) {final int a=cur.b, b=cur.c, c=opp, d=cur.a;final int ab=cur.bc, bc=lef, cd=rig, da=cur.ab;final int ca=ot, ac=i;cur.set(a,ab,b,bc,c,ca);cur.updateCircumcircle(points);oth.set(c,cd,d,da,a,ac);oth.updateCircumcircle(points);if (bc >= 0) {tris.get(bc).replaceEdge(c,b,ot,i);}if (da >= 0) {tris.get(da).replaceEdge(a,d,i,ot);}BitsUtil.setI(flipped,i);BitsUtil.setI(flipped,ot);return ot;}}return -1;}  }
class C{  public void addVectorTokenPair(String token,double[] vec){  StringDataPoint point=new StringDataPoint(vec,token);  vectorToTokenDict.add(point);}  }
class C{  public static byte hexToByte(final String src,final int srcPos,final byte dstInit,final int dstPos,final int nHex){  if (0 == nHex) {    return dstInit;  }  if ((nHex - 1) * 4 + dstPos >= 8) {    throw new IllegalArgumentException("(nHexs-1)*4+dstPos is greather or equal to than 8");  }  byte out=dstInit;  int shift=0;  for (int i=0; i < nHex; i++) {    shift=i * 4 + dstPos;    final int bits=(0xf & hexDigitToInt(src.charAt(i + srcPos))) << shift;    final int mask=0xf << shift;    out=(byte)((out & ~mask) | bits);  }  return out;}  }
class C{  public CRLDistributionPointsExtension(Boolean critical,Object value) throws IOException {  this(PKIXExtensions.CRLDistributionPoints_Id,critical,value,NAME);}  }
class C{  public void add(final double x,final double y){  maxX=Math.max(maxX,x);  minX=Math.min(minX,x);  this.values.add(new Tuple<Double,Double>(x,y));}  }
class C{  public XYValueSeries(String title){  super(title);}  }
class C{  public void i(Object str){  if (debug) {    if (logLevel <= Log.INFO) {      String name=getFunctionName();      if (name != null) {        Log.i(tag,name + "\n" + str+ "\n------------------------------------------------------------------------------");      } else {        Log.i(tag,str.toString());      }    }  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public synchronized void print(String s,int _verbosity,int log) throws OutputException {  if (log == NO_LOGS)   return;  if (log == ALL_MESSAGE_LOGS)   for (int x=0; x < logs.size(); x++) {    Log l=(Log)logs.elementAt(x);    if (l == null)     throw new OutputException("Unknown log number" + l);    print(s,V_VERBOSE,l);  } else {    Log l=(Log)logs.elementAt(log);    if (l == null)     throw new OutputException("Unknown log number" + log);    print(s,V_VERBOSE,l);  }}  }
class C{  public MaterialFilePicker withActivity(Activity activity){  if (mSupportFragment != null || mFragment != null) {    throw new RuntimeException("You must pass either Activity, Fragment or SupportFragment");  }  mActivity=activity;  return this;}  }
class C{  @RequestMapping(value=ApiUrl.COMPLAINT_CREATE,method=RequestMethod.POST) public ResponseEntity<String> complaintCreate(@RequestParam(value="json_complaint",required=false) final String complaintJSON,@RequestParam("files") final MultipartFile[] files){  try {    final JSONObject complaintRequest=(JSONObject)JSONValue.parse(complaintJSON);    final Complaint complaint=new Complaint();    if (securityUtils.currentUserType().equals(UserType.EMPLOYEE))     if (complaintRequest.containsKey("complainantName") && complaintRequest.containsKey("complainantMobileNo")) {      if (org.apache.commons.lang.StringUtils.isEmpty(complaintRequest.get("complainantName").toString()) || org.apache.commons.lang.StringUtils.isEmpty(complaintRequest.get("complainantMobileNo").toString()))       return getResponseHandler().error(getMessage("msg.complaint.reg.failed.user"));      complaint.getComplainant().setName(complaintRequest.get("complainantName").toString());      complaint.getComplainant().setMobile(complaintRequest.get("complainantMobileNo").toString());      if (complaintRequest.containsKey("complainantEmail")) {        final String email=complaintRequest.get("complainantEmail").toString();        if (!email.matches("^[A-Za-z0-9+_.-]+@(.+)$"))         return getResponseHandler().error(getMessage("msg.invalid.mail"));        complaint.getComplainant().setEmail(email);      }    } else     if (!complaintRequest.containsKey("complainantName") && !complaintRequest.containsKey("complainantMobileNo") && !complaintRequest.containsKey("complainantEmail")) {      final User currentUser=securityUtils.getCurrentUser();      complaint.getComplainant().setName(currentUser.getUsername());      complaint.getComplainant().setMobile(currentUser.getMobileNumber());      if (!org.apache.commons.lang.StringUtils.isEmpty(currentUser.getEmailId()))       complaint.getComplainant().setEmail(currentUser.getEmailId());    } else     return getResponseHandler().error(getMessage("msg.complaint.reg.failed.user"));    final long complaintTypeId=(long)complaintRequest.get("complaintTypeId");    if (complaintRequest.get("locationId") != null && (long)complaintRequest.get("locationId") > 0) {      final long locationId=(long)complaintRequest.get("locationId");      final CrossHierarchy crosshierarchy=crossHierarchyService.findById(locationId);      complaint.setLocation(crosshierarchy.getParent());      complaint.setChildLocation(crosshierarchy.getChild());    }    if (complaintRequest.get("lng") != null && (double)complaintRequest.get("lng") > 0) {      final double lng=(double)complaintRequest.get("lng");      complaint.setLng(lng);    }    if (complaintRequest.get("lat") != null && (double)complaintRequest.get("lat") > 0) {      final double lat=(double)complaintRequest.get("lat");      complaint.setLat(lat);    }    if (complaint.getLocation() == null && (complaint.getLat() == 0 || complaint.getLng() == 0))     return getResponseHandler().error(getMessage("location.required"));    complaint.setDetails(complaintRequest.get("details").toString());    complaint.setLandmarkDetails(complaintRequest.get("landmarkDetails").toString());    if (complaintTypeId > 0) {      final ComplaintType complaintType=complaintTypeService.findBy(complaintTypeId);      complaint.setComplaintType(complaintType);    }    complaint.setReceivingMode(ReceivingMode.MOBILE);    if (files.length > 0)     complaint.setSupportDocs(addToFileStore(files));    complaintService.createComplaint(complaint);    return getResponseHandler().setDataAdapter(new ComplaintAdapter()).success(complaint,getMessage("msg.complaint.reg.success"));  } catch (  final ValidationException e) {    return getResponseHandler().error(getMessage(e.getMessage()));  }catch (  final Exception e) {    LOGGER.error("EGOV-API ERROR ",e);    return getResponseHandler().error(getMessage("server.error"));  }}  }
class C{  public void write(final String filename){  try (PrintStream stream=new PrintStream(new File(filename))){    write(stream);  } catch (  FileNotFoundException e) {    e.printStackTrace();  }}  }
class C{  public void hide(Animation anim){  hide(true,anim);}  }
class C{  private void merge(int pos,Range r){  Range t=ranges.get(pos);  t.merge(r);  pos+=1;  while ((pos < ranges.size()) && t.mergeable(ranges.get(pos))) {    t.merge(ranges.get(pos));    ranges.remove(pos);  }}  }
class C{  private final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  void swapCursor(long monthMillis,@Nullable EventCursor cursor,ContentObserver contentObserver){  for (int i=0; i < mMonths.size(); i++) {    if (CalendarUtils.sameMonth(monthMillis,mMonths.get(i))) {      swapCursor(i,cursor,contentObserver);      break;    }  }}  }
class C{  @SuppressWarnings("unchecked") public synchronized List<Vertex> findAllLike(String filter,int pageSize,int page){  Query query=null;  if (filter.indexOf('*') == -1) {    query=this.entityManager.createQuery("Select v from Vertex v where v.dataValue = :filter");    query.setParameter("filter",filter);  } else {    query=this.entityManager.createQuery("Select v from Vertex v where v.dataValue like :filter");    query.setParameter("filter",filter.replace('*','%'));  }  setHints(query);  query.setFirstResult(page * pageSize);  query.setMaxResults(pageSize);  return query.getResultList();}  }
class C{  public void removeDirectoryRecursive(String dir) throws IOException {  for (  File f : listFiles(dir)) {    String name=f.getName();    if (f.isDirectory()) {      if (!name.equals(".") && !name.equals("..")) {        removeDirectoryRecursive(dir + "/" + name);      }    } else {      delete(dir + "/" + name);    }  }  removeDirectory(dir);}  }
class C{  public void dispose(){  synchronizeThreads(m_debugger.getProcessManager().getActiveThread(),null);}  }
class C{  public void invalidate(){  for (int i=0; i < size; i++) {    XBLRecord rec=getRecord((Node)nodes.get(i));    rec.previousSibling=null;    rec.nextSibling=null;    rec.linksValid=false;  }  nodes.clear();  size=-1;}  }
class C{  private void addToInputEventCombine(Method inputEvent,List<Method> oes){  if (inputEvent != null && oes != null) {    for (    Method oe : oes) {      addToInputEventCombine(inputEvent,oe);    }  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MWFNextCondition[");  sb.append(get_ID()).append(",SeqNo=").append(getSeqNo()).append("]");  return sb.toString();}  }
class C{  public MekaFrame(){  this("");}  }
class C{  public TokenScanner(Scanner scanner){  this.scanner=scanner;  this.endPosition=this.scanner.getSource().length - 1;}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream bytes=new DerOutputStream();  DerOutputStream temp=new DerOutputStream();  temp.putInteger(BigInteger.valueOf(methodType));  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),temp);  if (methodData != null) {    temp=new DerOutputStream();    temp.putOctetString(methodData);    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),temp);  }  temp=new DerOutputStream();  temp.write(DerValue.tag_Sequence,bytes);  return temp.toByteArray();}  }
class C{  public void onQueryExecute(boolean fail){  execs.increment();  if (fail)   fails.increment();}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","sdufe");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public void begin() throws ResourceException {  internalBegin();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:35.627 -0500",hash_original_method="040104E30D8A876DF591293449491AA6",hash_generated_method="09CF06890A0238BCB3134F67E4117897") public int show(FragmentTransaction transaction,String tag){  mDismissed=false;  mShownByMe=true;  transaction.add(this,tag);  mViewDestroyed=false;  mBackStackId=transaction.commit();  return mBackStackId;}  }
class C{  public void fft(double[] re,double[] im){  int i, j, k, n1, n2, a;  double c, s, t1, t2;  j=0;  n2=n / 2;  for (i=1; i < n - 1; i++) {    n1=n2;    while (j >= n1) {      j=j - n1;      n1=n1 / 2;    }    j=j + n1;    if (i < j) {      t1=re[i];      re[i]=re[j];      re[j]=t1;      t1=im[i];      im[i]=im[j];      im[j]=t1;    }  }  n1=0;  n2=1;  for (i=0; i < m; i++) {    n1=n2;    n2=n2 + n2;    a=0;    for (j=0; j < n1; j++) {      c=cos[a];      s=sin[a];      a+=1 << (m - i - 1);      for (k=j; k < n; k=k + n2) {        t1=c * re[k + n1] - s * im[k + n1];        t2=s * re[k + n1] + c * im[k + n1];        re[k + n1]=re[k] - t1;        im[k + n1]=im[k] - t2;        re[k]=re[k] + t1;        im[k]=im[k] + t2;      }    }  }}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  public boolean processComment(@NotNull PsiComment comment){  final TextRange range=comment.getTextRange();  final TextRange expandedRange=myDocument == null ? range : ArrangementUtil.expandToLineIfPossible(range,myDocument);  final TextRange sectionTextRange=new TextRange(expandedRange.getStartOffset(),expandedRange.getEndOffset());  final String commentText=comment.getText().trim();  final ArrangementSectionRule openSectionRule=isSectionStartComment(mySettings,commentText);  if (openSectionRule != null) {    mySectionEntryProducer.consume(new ArrangementSectionEntryTemplate(comment,START_SECTION,sectionTextRange,commentText));    myOpenedSections.push(openSectionRule);    return true;  }  if (!myOpenedSections.isEmpty()) {    final ArrangementSectionRule lastSection=myOpenedSections.peek();    if (lastSection.getEndComment() != null && StringUtil.equals(commentText,lastSection.getEndComment())) {      mySectionEntryProducer.consume(new ArrangementSectionEntryTemplate(comment,END_SECTION,sectionTextRange,commentText));      myOpenedSections.pop();      return true;    }  }  return false;}  }
class C{  public InputStream openInputStream() throws IOException {  return _path.openRead();}  }
class C{  public SabresQuery<T> whereNotEqualTo(String key,Object value){  addWhere(key,Where.notEqualTo(key,SabresValue.create(value)));  return this;}  }
class C{  public void delete(String[] listaIds){  String qual=new StringBuffer().append(DBUtils.WHERE).append(DBUtils.generateInTokenField(CAMPO_ID,listaIds)).toString();  if (logger.isDebugEnabled())   logger.debug("Se van a eliminar las listas descriptoras con ids: " + listaIds);  deleteVO(qual,TABLE_NAME);}  }
class C{  public void add(T actual,T predicted,int count){  if (matrix.containsKey(actual)) {    matrix.get(actual).add(predicted,count);  } else {    Multiset<T> counts=HashMultiset.create();    counts.add(predicted,count);    matrix.put(actual,counts);  }  classes.add(actual);  classes.add(predicted);}  }
class C{  public static boolean isNull(QualifiedName value){  return value == null || value.equals(NULL);}  }
class C{  public void paint(Graphics g,JComponent c){  Rectangle bounds=c.getBounds();  check(bounds);  int h=c.getHeight();  int w=c.getWidth();  g.drawImage(m_backImage,0,0,w,h,bounds.x,bounds.y,bounds.x + w,bounds.y + h,c);}  }
class C{  public boolean equals(byte[] targetID){  return Arrays.equals(transactionID,targetID);}  }
class C{  public static void addListener(ILogAlertListener aListener){  loggerImpl.addListener(aListener);}  }
class C{  public boolean isCurrent(String first,String second){  int start=pos;  if (!forwardIfCurrent(first))   return false;  removeSpace();  boolean rtn=isCurrent(second);  pos=start;  return rtn;}  }
class C{  @Override protected void mouseClicked(int par1,int par2,int par3) throws IOException {  super.mouseClicked(par1,par2,par3);  commandBox.mouseClicked(par1,par2,par3);}  }
class C{  public static boolean isDeviceStructureValid(String deviceName,String drillDownResponse){  if (drillDownResponse != null && !drillDownResponse.isEmpty()) {    _log.info("looking at device {} with drill-down {}",deviceName,drillDownResponse);    try {      String[] lines=drillDownResponse.split("\n");      if (lines.length > 1) {        int localDeviceComponentCount=StringUtils.countMatches(drillDownResponse,LOCAL_DEVICE_COMPONENT);        int storageVolumeCount=StringUtils.countMatches(drillDownResponse,STORAGE_VOLUME);        int extentCount=StringUtils.countMatches(drillDownResponse,EXTENT);        String firstLine=lines[0];        if (firstLine.trim().startsWith(LOCAL_DEVICE)) {          return validateLocalDevice(drillDownResponse,localDeviceComponentCount,storageVolumeCount,extentCount);        } else         if (firstLine.trim().startsWith(DISTRIBUTED_DEVICE)) {          return validateDistributedDevice(drillDownResponse,localDeviceComponentCount,storageVolumeCount,extentCount);        }      }    } catch (    Exception ex) {      _log.error("Exception encountered parsing device drill down: " + ex.getLocalizedMessage(),ex);    }  }  _log.error("this is not a compatible supporting device structure");  return false;}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public ScriptSortBuilder(Script script,String type){  this.script=script;  this.type=type;}  }
class C{  public Type attribStat(JCTree tree,Env<AttrContext> env){  return attribTree(tree,env,statInfo);}  }
class C{  protected boolean isWFXMLChar(String chardata,Character refInvalidChar){  if (chardata == null || (chardata.length() == 0)) {    return true;  }  char[] dataarray=chardata.toCharArray();  int datalength=dataarray.length;  if (fIsXMLVersion11) {    int i=0;    while (i < datalength) {      if (XML11Char.isXML11Invalid(dataarray[i++])) {        char ch=dataarray[i - 1];        if (XMLChar.isHighSurrogate(ch) && i < datalength) {          char ch2=dataarray[i++];          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {            continue;          }        }        refInvalidChar=new Character(ch);        return false;      }    }  } else {    int i=0;    while (i < datalength) {      if (XMLChar.isInvalid(dataarray[i++])) {        char ch=dataarray[i - 1];        if (XMLChar.isHighSurrogate(ch) && i < datalength) {          char ch2=dataarray[i++];          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {            continue;          }        }        refInvalidChar=new Character(ch);        return false;      }    }  }  return true;}  }
class C{  public void remove(Rule rule){  rules.remove(rule);}  }
class C{  public void removeListener(final ITraceListener listener){  listeners.removeListener(listener);}  }
class C{  public boolean pemEncode(){  return pemEncode;}  }
class C{  public KrbCredInfo(DerValue encoding) throws Asn1Exception, IOException, RealmException {  if (encoding.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  pname=null;  flags=null;  authtime=null;  starttime=null;  endtime=null;  renewTill=null;  sname=null;  caddr=null;  key=EncryptionKey.parse(encoding.getData(),(byte)0x00,false);  Realm prealm=null, srealm=null;  if (encoding.getData().available() > 0)   prealm=Realm.parse(encoding.getData(),(byte)0x01,true);  if (encoding.getData().available() > 0)   pname=PrincipalName.parse(encoding.getData(),(byte)0x02,true,prealm);  if (encoding.getData().available() > 0)   flags=TicketFlags.parse(encoding.getData(),(byte)0x03,true);  if (encoding.getData().available() > 0)   authtime=KerberosTime.parse(encoding.getData(),(byte)0x04,true);  if (encoding.getData().available() > 0)   starttime=KerberosTime.parse(encoding.getData(),(byte)0x05,true);  if (encoding.getData().available() > 0)   endtime=KerberosTime.parse(encoding.getData(),(byte)0x06,true);  if (encoding.getData().available() > 0)   renewTill=KerberosTime.parse(encoding.getData(),(byte)0x07,true);  if (encoding.getData().available() > 0)   srealm=Realm.parse(encoding.getData(),(byte)0x08,true);  if (encoding.getData().available() > 0)   sname=PrincipalName.parse(encoding.getData(),(byte)0x09,true,srealm);  if (encoding.getData().available() > 0)   caddr=HostAddresses.parse(encoding.getData(),(byte)0x0A,true);  if (encoding.getData().available() > 0)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);}  }
class C{  protected void parseResponseHeaders(URLConnection conn){}  }
class C{  public static int floorDiv(final int x,final int y){  int r=x / y;  if ((x ^ y) < 0 && r * y != x) {    r--;  }  return r;}  }
class C{  private String addDefaultProfile(){  String profile=System.getProperty("spring.profiles.active");  if (profile != null) {    log.info("Running with Spring profile(s) : {}",profile);    return profile;  }  log.warn("No Spring profile configured, running with default configuration");  return Constants.SPRING_PROFILE_DEVELOPMENT;}  }
class C{  public static char readCharacterWithPreamble(String preamble,final EvolutionState state,final LineNumberReader reader){  DecodeReturn d=checkPreamble(preamble,state,reader);  Code.decode(d);  if (d.type != DecodeReturn.T_CHAR)   state.output.fatal("Line " + d.lineNumber + " has no character after preamble '"+ preamble+ "'\n-->"+ d.data);  return (char)(d.l);}  }
class C{  public void removeAt(int index){  if (mValues[index] != DELETED) {    mValues[index]=DELETED;    mGarbage=true;  }}  }
class C{  public void clear(){  target.clear();}  }
class C{  protected void addMapBeanToPanel(MapBean map){  add(map,BorderLayout.CENTER);}  }
class C{  public XBeeMessage(XBeeAPIPacket request){  _nDataChars=request.getPacketData().length;  byte data[]=request.getPacketData();  _dataChars=new int[_nDataChars];  for (int i=0; i < _nDataChars; i++) {    _dataChars[i]=(int)data[i];  }  xbm=request;}  }
class C{  public synchronized boolean removeElement(Object object){  int index;  if ((index=indexOf(object,0)) == -1) {    return false;  }  removeElementAt(index);  return true;}  }
class C{  public long swapKeys(@Nullable String spaceName) throws IgniteCheckedException {  try {    return getSpi().count(spaceName);  } catch (  IgniteSpiException e) {    throw new IgniteCheckedException("Failed to get swap keys count for space: " + spaceName,e);  }}  }
class C{  public ConfirmDialog(Dialog owner,String key,int mode,boolean showAskAgainCheckbox,Object... arguments){  this((Window)owner,key,mode,showAskAgainCheckbox,arguments);}  }
class C{  public final AC gap(String size){  return gap(size,curIx++);}  }
class C{  public ListQuery(URL feedUrl){  super(feedUrl);}  }
class C{  private static long convertByWeekyear(final long instant,Chronology from,Chronology to){  long newInstant;  newInstant=to.weekyear().set(0,from.weekyear().get(instant));  newInstant=to.weekOfWeekyear().set(newInstant,from.weekOfWeekyear().get(instant));  newInstant=to.dayOfWeek().set(newInstant,from.dayOfWeek().get(instant));  newInstant=to.millisOfDay().set(newInstant,from.millisOfDay().get(instant));  return newInstant;}  }
class C{  public static boolean enableConnected(final String ssid){  return WifiAdmin.getInstance().enableConnected(ssid);}  }
class C{  public static void main(String[] argv) throws IOException, SAXException {  Scanner s=new HTMLScanner();  Reader r=new InputStreamReader(System.in,"UTF-8");  Writer w=new OutputStreamWriter(System.out,"UTF-8");  PYXWriter pw=new PYXWriter(w);  s.scan(r,pw);  w.close();}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public boolean isNotificationEnabled(){  return m_NotificationEnabled;}  }
class C{  public void open(){  try {    this.createContents();    this.shell.open();    this.shell.layout();    Display display=this.getParent().getDisplay();    while (!this.shell.isDisposed()) {      if (!display.readAndDispatch()) {        display.sleep();      }    }  }  finally {    if (this.timer != null) {      this.timer.cancel();    }    if (this.font != null) {      this.font.dispose();    }  }}  }
class C{  private QName toWildcardLocalName(QName id){  return new QName(id.getNs(),QName.ANY_LOCALNAME);}  }
class C{  public static void scaleM(float[] sm,int smOffset,float[] m,int mOffset,float x,float y,float z){  for (int i=0; i < 4; i++) {    int smi=smOffset + i;    int mi=mOffset + i;    sm[smi]=m[mi] * x;    sm[4 + smi]=m[4 + mi] * y;    sm[8 + smi]=m[8 + mi] * z;    sm[12 + smi]=m[12 + mi];  }}  }
class C{  public static String rightJustify(String source,int length){  if (source.length() >= length) {    return source;  }  return source + StringUtils.spaces(length - source.length());}  }
class C{  public final boolean isPackagePrivate(){  return !isPrivate() && !isPublic() && !isProtected();}  }
class C{  public ServicesStillPublishedException(){  super();}  }
class C{  public InMemorySorter(Comparator<BytesRef> comparator){  this.comparator=comparator;}  }
class C{  static void checkIdentifier(final String name,final int start,final int end,final String msg){  if (name == null || (end == -1 ? name.length() <= start : end <= start)) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null or empty)");  }  if (!Character.isJavaIdentifierStart(name.charAt(start))) {    throw new IllegalArgumentException("Invalid " + msg + " (must be a valid Java identifier): "+ name);  }  int max=end == -1 ? name.length() : end;  for (int i=start + 1; i < max; ++i) {    if (!Character.isJavaIdentifierPart(name.charAt(i))) {      throw new IllegalArgumentException("Invalid " + msg + " (must be a valid Java identifier): "+ name);    }  }}  }
class C{  public SIPServerTransaction findPendingTransaction(SIPRequest requestReceived){  if (isLoggingEnabled()) {    stackLogger.logDebug("looking for pending tx for :" + requestReceived.getTransactionId());  }  return (SIPServerTransaction)pendingTransactions.get(requestReceived.getTransactionId());}  }
class C{  public void makeHistogramMultiplot(LogicCircuit lc,String suffix,String input_truth){  for (int i=0; i < lc.get_output_gates().size(); ++i) {    Gate g=lc.get_output_gates().get(i);    String h_datapoints="";    for (int h=0; h < g.get_histogram_bins().get_NBINS(); ++h) {      h_datapoints+=g.get_histogram_bins().get_LOG_BIN_CENTERS()[h] + " \t ";      for (int row=0; row < lc.get_output_gates().get(i).get_histogram_rpus().size(); ++row) {        h_datapoints+=lc.get_output_gates().get(i).get_histogram_rpus().get(row)[h] + " \t ";      }      h_datapoints+="\n";    }    String name_conv_rpus=lc.get_assignment_name() + "_" + lc.get_output_gates().get(i).Name+ "_"+ suffix+ ".txt";    Util.fileWriter(_output_directory + name_conv_rpus,h_datapoints,false);    String logic_string=BooleanLogic.logicString(lc.get_output_gates().get(i).get_logics());    logic_string=logic_string.replaceAll("[^\\d.]","");    String cmd="perl " + _home + "/resources/scripts/make_conv_multiplot.pl "+ _output_directory+ " "+ _dateID+ " "+ name_conv_rpus+ " "+ logic_string+ " "+ input_truth;    String command_result=Util.executeCommand(cmd);  }}  }
class C{  private void renderLoads(Load prevLoad,Load curLoad,List<Offset> offsets,int ypos,String suffix){  final Date prevEnd=curLoad.startDate;  final Date prevStart=prevLoad.startDate;  Rectangle nextRect=createRectangle(offsets,prevStart,prevEnd,ypos);  if (nextRect == null) {    return;  }  String style;  if (prevLoad.isResourceUnavailable()) {    style="dayoff";  } else {    suffix+=curLoad.load == 0 ? ".last" : "";    if (prevLoad.load < 100f) {      style="load.underload";    } else     if (prevLoad.load > 100f) {      style="load.overload";    } else {      style="load.normal";    }    style+=suffix;  }  nextRect.setStyle(style);  nextRect.setModelObject(new ResourceLoad(prevLoad.load));  createLoadText(nextRect,prevLoad);}  }
class C{  private void logCountSumMinMax(String type,String value,String arg,long amount){  log(type,value,arg + COUNT_INDICATOR);  log(type,value,arg,amount);  logMin(type,value,arg,amount);  logMax(type,value,arg,amount);}  }
class C{  public final void clear() throws IOException {  if ((bufferSize == 0) && (out != null))   throw new IllegalStateException(getLocalizeMessage("jsp.error.ise_on_clear"));  if (flushed)   throw new IOException(getLocalizeMessage("jsp.error.attempt_to_clear_flushed_buffer"));  ensureOpen();  if (buf != null)   buf.pos=buf.offset;}  }
class C{  void add(ThreadLocal<?> key,Object value){  for (int index=key.hash & mask; ; index=next(index)) {    Object k=table[index];    if (k == null) {      table[index]=key.reference;      table[index + 1]=value;      return;    }  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private NativeGenerator(){}  }
class C{  Item newFloat(final float value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(FLOAT).putInt(key.intVal);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  protected boolean heapifyDown(int pos,Object reinsert){  assert (pos >= 0);  if (comparator != null) {    return heapifyDownComparator(pos,reinsert);  } else {    return heapifyDownComparable(pos,reinsert);  }}  }
class C{  public String type(){  return type;}  }
class C{  public org.eclipse.jdt.internal.core.ClasspathEntry combineWith(org.eclipse.jdt.internal.core.ClasspathEntry referringEntry){  if (referringEntry == null)   return this;  if (referringEntry.isExported() || referringEntry.getAccessRuleSet() != null) {    boolean combine=this.entryKind == IClasspathEntry.CPE_SOURCE || referringEntry.combineAccessRules();    return new org.eclipse.jdt.internal.core.ClasspathEntry(getContentKind(),getEntryKind(),getPath(),this.inclusionPatterns,this.exclusionPatterns,getSourceAttachmentPath(),getSourceAttachmentRootPath(),getOutputLocation(),referringEntry.isExported() || this.isExported,combine(referringEntry.getAccessRules(),getAccessRules(),combine),this.combineAccessRules,this.extraAttributes);  }  return this;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  MobileDoc doc=MobileDoc.create("WStatus Get Request");  MobileUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodevalue07.class,args);}  }
class C{  static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {  return createObject(factoryId,null,fallbackClassName);}  }
class C{  public void close() throws IOException {  unlock();  _fileChannel=null;  InputStream is=_is;  _is=null;  if (is != null)   is.close();}  }
class C{  public void monitor(){synchronized (this) {  }}  }
class C{  public void init(Context context){  if (initialized == true) {    return;  }  Assert.notNull(context,"Context");  Resources resources=context.getResources();  XmlPullParser parser=resources.getXml(XML_PATH_ID);  XmlPullParserWrapper wrapper=new XmlPullParserWrapper(parser);  try {    node=new PullToRefreshConfigXmlParser(wrapper).parse();    XmlPullParser extendedXmlParser=ExtendedConfigXmlParserFactory.createParser(context);    if (extendedXmlParser != null) {      XmlPullParserWrapper extendedXmlWrapper=new XmlPullParserWrapper(extendedXmlParser);      PullToRefreshNode extendedNode=new PullToRefreshConfigXmlParser(extendedXmlWrapper).parse();      node.extendProperties(extendedNode);    }  } catch (  XmlPullParserException e) {    Log.d(LOG_TAG,"It has failed to parse the xmlpullparser xml.",e);  }catch (  IOException e) {    Log.d(LOG_TAG,"It has failed to parse the xmlpullparser xml.\n ",e);  }  initialized=true;}  }
class C{  @Override public boolean isCellEditable(int row,int column){  return false;}  }
class C{  public int addNodeInDocOrder(int node,boolean test,XPathContext support){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  int insertIndex=-1;  if (test) {    int size=size(), i;    for (i=size - 1; i >= 0; i--) {      int child=elementAt(i);      if (child == node) {        i=-2;        break;      }      DTM dtm=support.getDTM(node);      if (!dtm.isNodeAfter(node,child)) {        break;      }    }    if (i != -2) {      insertIndex=i + 1;      insertElementAt(node,insertIndex);    }  } else {    insertIndex=this.size();    boolean foundit=false;    for (int i=0; i < insertIndex; i++) {      if (i == node) {        foundit=true;        break;      }    }    if (!foundit)     addElement(node);  }  return insertIndex;}  }
class C{  public final int incrementAndGet(){  for (; ; ) {    int current=get();    int next=current + 1;    if (compareAndSet(current,next))     return next;  }}  }
class C{  public ArrayList<Value> keys(){  ArrayList<Value> list=New.arrayList(size);  for (  Value k : keys) {    if (k != null && k != ValueNull.DELETED) {      list.add(k);    }  }  return list;}  }
class C{  protected void unmountObb(String obbFilePath,boolean force){  Log.i(LOG_TAG,"doUnmountObb() on " + obbFilePath);  assertTrue("Null path was passed in for OBB file!",obbFilePath != null);  ObbListener obbListener=new ObbListener();  assertTrue("unmountObb call failed",mSm.unmountObb(obbFilePath,force,obbListener));  boolean stateChanged=doWaitForObbStateChange(obbListener);  if (force) {    assertTrue("Timed out waiting to unmount OBB file " + obbFilePath,stateChanged);    assertEquals("OBB failed to unmount",OnObbStateChangeListener.UNMOUNTED,obbListener.state());    assertFalse("Obb should NOT be mounted, but SM reports it is!",mSm.isObbMounted(obbFilePath));  }}  }
class C{  public static boolean nextBoolean(){synchronized (random) {    return random.nextBoolean();  }}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  this.chartChangeEvents.add(event);}  }
class C{  private void updateBounds(TimePeriod period,int index){  long start=period.getStart().getTime();  long end=period.getEnd().getTime();  long middle=start + ((end - start) / 2);  if (this.minStartIndex >= 0) {    long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();    if (start < minStart) {      this.minStartIndex=index;    }  } else {    this.minStartIndex=index;  }  if (this.maxStartIndex >= 0) {    long maxStart=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime();    if (start > maxStart) {      this.maxStartIndex=index;    }  } else {    this.maxStartIndex=index;  }  if (this.minMiddleIndex >= 0) {    long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();    long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();    long minMiddle=s + (e - s) / 2;    if (middle < minMiddle) {      this.minMiddleIndex=index;    }  } else {    this.minMiddleIndex=index;  }  if (this.maxMiddleIndex >= 0) {    long s=getDataItem(this.maxMiddleIndex).getPeriod().getStart().getTime();    long e=getDataItem(this.maxMiddleIndex).getPeriod().getEnd().getTime();    long maxMiddle=s + (e - s) / 2;    if (middle > maxMiddle) {      this.maxMiddleIndex=index;    }  } else {    this.maxMiddleIndex=index;  }  if (this.minEndIndex >= 0) {    long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();    if (end < minEnd) {      this.minEndIndex=index;    }  } else {    this.minEndIndex=index;  }  if (this.maxEndIndex >= 0) {    long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();    if (end > maxEnd) {      this.maxEndIndex=index;    }  } else {    this.maxEndIndex=index;  }}  }
class C{  public static XContentBuilder jsonBuilder(OutputStream os) throws IOException {  return new XContentBuilder(JsonXContent.jsonXContent,os);}  }
class C{  public int EOF_sym(){  return 0;}  }
class C{  public synchronized void submitTask(Runnable task) throws InterruptedException {  waitForAvailability();  assert currentTaskCount.get() < concurrentTaskLimit : "currentTaskCount must be less than currentTaskLimit";  service.submit(task,null);  currentTaskCount.incrementAndGet();}  }
class C{  public Cube(float size,boolean isSkybox,boolean hasCubemapTexture,boolean createTextureCoordinates,boolean createVertexColorBuffer,boolean createVBOs){  super();  mIsSkybox=isSkybox;  mSize=size;  mHasCubemapTexture=hasCubemapTexture;  mCreateTextureCoords=createTextureCoordinates;  mCreateVertexColorBuffer=createVertexColorBuffer;  init(createVBOs);}  }
class C{  static boolean compare(Expression leftExp,int operator,String operatorString,Expression rightExp,Expression defaultBlamed,Environment env) throws TemplateException {  TemplateModel ltm=leftExp.eval(env);  TemplateModel rtm=rightExp.eval(env);  return compare(ltm,leftExp,operator,operatorString,rtm,rightExp,defaultBlamed,false,false,false,false,env);}  }
class C{  public static double logpdf(double val,double loc,double scale,double shape){  val=(val - loc) / scale;  if (shape != 0.) {    val=-Math.log(1 - shape * val) / shape;  }  double f=1. + Math.exp(-val);  return -val * (1 - shape) - Math.log(scale * f * f);}  }
class C{  @Override public IMessage onMessage(MessageUpdateHeldLastUseTime message,MessageContext ctx){  Minecraft.getMinecraft().addScheduledTask(null);  return null;}  }
class C{  @Override public void finalizeAggregation() throws Exception {  if (m_numModels == 0) {    throw new Exception("Unable to finalize aggregation - " + "haven't seen any models to aggregate");  }  for (int i=0; i < m_weights.length; i++) {    m_weights[i]/=(m_numModels + 1);  }  m_numModels=0;}  }
class C{  private void decodeRearArmor(Mech mech,int loc,String string){  mech.initializeRearArmor(Integer.parseInt(string.substring(2,4)),loc);}  }
class C{  private void parseEntrants(JSONObject o,Race race){  for (  Object key : o.keySet()) {    JSONObject entrant=(JSONObject)o.get(key);    String name=(String)entrant.get("displayname");    String statetext=(String)entrant.get("statetext");    int place=((Number)entrant.get("place")).intValue();    long time=((Number)entrant.get("time")).longValue();    String twitch=(String)entrant.get("twitch");    int points=Integer.parseInt((String)entrant.get("trueskill"));    String message=(String)entrant.get("message");    race.addEntrant(new Race.Entrant(name,statetext,place,time,twitch,points,message));  }}  }
class C{  public static void deleteSite(WebmasterToolsService myService,String siteUrl) throws IOException, ServiceException {  String siteId=URLEncoder.encode(siteUrl,"UTF-8");  URL feedUrl=new URL(getSitesFeedUrl() + siteId);  SitesEntry entry=myService.getEntry(feedUrl,SitesEntry.class);  System.out.println("Now deleting site: " + siteUrl);  entry.delete();}  }
class C{  public static JPanel createDialogButtonPanel(JButton[] jbPositives,JButton jbNegative,boolean resizable){  return createDialogButtonPanel(jbPositives,jbNegative,null,resizable,null);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.N4_CLASS_DECLARATION__ANNOTATION_LIST:    return annotationList != null;case N4JSPackage.N4_CLASS_DECLARATION__DECLARED_MODIFIERS:  return declaredModifiers != null && !declaredModifiers.isEmpty();case N4JSPackage.N4_CLASS_DECLARATION__NAME:return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case N4JSPackage.N4_CLASS_DECLARATION__TYPE_VARS:return typeVars != null && !typeVars.isEmpty();case N4JSPackage.N4_CLASS_DECLARATION__TYPING_STRATEGY:return typingStrategy != TYPING_STRATEGY_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public static void clearCache(){  cache.clear();}  }
class C{  public static TransportUnit createTransportUnit(String unitId,TransportUnitType tut){  TransportUnit tu=new TransportUnit(unitId);  tu.setTransportUnitType(tut);  return tu;}  }
class C{  @Override public double classifyInstance(Instance instance){  return m_ClassValue;}  }
class C{  public void updateFrom(ItemPresentation presentation){  setIcon(presentation.getIcon(false));  setPresentableText(presentation.getPresentableText());  setLocationString(presentation.getLocationString());  if (presentation instanceof ColoredItemPresentation) {    setAttributesKey(((ColoredItemPresentation)presentation).getTextAttributesKey());  }  setSeparatorAbove(presentation instanceof ItemPresentationWithSeparator);  if (presentation instanceof LocationPresentation) {    myLocationPrefix=((LocationPresentation)presentation).getLocationPrefix();    myLocationSuffix=((LocationPresentation)presentation).getLocationSuffix();  }}  }
class C{  public void compressedAndSend(int notCompressPosition,byte[] bufferBytes,boolean logQuery) throws IOException {  int position=0;  int packetLength;  while (position - notCompressPosition < 0) {    packetLength=Math.min(notCompressPosition - position,maxPacketSize);    boolean compressedPacketSend=false;    if (packetLength > MIN_COMPRESSION_SIZE) {      ByteArrayOutputStream baos=new ByteArrayOutputStream();      DeflaterOutputStream deflater=new DeflaterOutputStream(baos);      deflater.write(bufferBytes,position,packetLength);      deflater.finish();      deflater.close();      byte[] compressedBytes=baos.toByteArray();      baos.close();      if (compressedBytes.length < (int)(MIN_COMPRESSION_RATIO * packetLength)) {        int compressedLength=compressedBytes.length;        writeCompressedHeader(compressedLength,packetLength);        if (logger.isTraceEnabled() && logQuery) {          logger.trace("send packet seq:" + compressSeqNo + " length:"+ packetLength+ " data:"+ Utils.hexdump(compressedBytes,maxQuerySizeToLog));        }        outputStream.write(compressedBytes,0,compressedLength);        compressedPacketSend=true;      }    }    if (!compressedPacketSend) {      writeCompressedHeader(packetLength,0);      if (logger.isTraceEnabled() && logQuery) {        logger.trace("send packet seq:" + compressSeqNo + " length:"+ packetLength+ " data:"+ Utils.hexdump(bufferBytes,maxQuerySizeToLog,position,packetLength));      }      outputStream.write(bufferBytes,position,packetLength);    }    position+=packetLength;  }}  }
class C{  private void consumeQuota(CreateVirtualNetworkWorkflowDocument state,String resourceTicketId){  ResourceTicketService.Patch patch=new ResourceTicketService.Patch();  patch.patchtype=ResourceTicketService.Patch.PatchType.USAGE_CONSUME;  patch.cost=new HashMap<>();  QuotaLineItem costItem=new QuotaLineItem();  costItem.setKey(SDN_RESOURCE_TICKET_KEY);  costItem.setValue(state.size);  costItem.setUnit(QuotaUnit.COUNT);  patch.cost.put(costItem.getKey(),costItem);  ServiceHostUtils.getCloudStoreHelper(getHost()).createPatch(ResourceTicketServiceFactory.SELF_LINK + "/" + resourceTicketId).setBody(patch).setCompletion(null).sendWith(this);}  }
class C{  static void decay(int handle,double rate){  int len=counterArrays[handle].length;  for (int i=0; i < len; i++) {    counterArrays[handle][i]/=rate;  }}  }
class C{  public static void checkNull(Object... inputs) throws IllegalArgumentException {  if (inputs == null) {    throw new IllegalArgumentException("No inputs to check");  }  for (int i=0; i < inputs.length; i++) {    Object obj=inputs[i];    if (obj == null) {      throw new IllegalArgumentException("Null input in position " + i);    }  }}  }
class C{  static void sort(byte[] a,int left,int right){  if (right - left > COUNTING_SORT_THRESHOLD_FOR_BYTE) {    int[] count=new int[NUM_BYTE_VALUES];    for (int i=left - 1; ++i <= right; count[a[i] - Byte.MIN_VALUE]++)     ;    for (int i=NUM_BYTE_VALUES, k=right + 1; k > left; ) {      while (count[--i] == 0)       ;      byte value=(byte)(i + Byte.MIN_VALUE);      int s=count[i];      do {        a[--k]=value;      } while (--s > 0);    }  } else {    for (int i=left, j=i; i < right; j=++i) {      byte ai=a[i + 1];      while (ai < a[j]) {        a[j + 1]=a[j];        if (j-- == left) {          break;        }      }      a[j + 1]=ai;    }  }}  }
class C{  public float readFloat() throws IOException {  return Float.intBitsToFloat(readSI32());}  }
class C{  public boolean isParallel(){  return false;}  }
class C{  @Override public ProcessLogInfo execute(String[] params){  try {    ProcessLogInfo processLogInfo=new ProcessLogInfo();    CommandLine commandLine=getCommandLine(params,PARAMS_STRUCTURE);    String pId=commandLine.getOptionValue("process-id");    LOGGER.debug("processId is " + pId);    String logCat=commandLine.getOptionValue("log-category");    LOGGER.debug("log category is " + logCat);    String message=commandLine.getOptionValue("message");    LOGGER.debug("message is " + message);    String mId=commandLine.getOptionValue("message-id");    LOGGER.debug("message id is" + mId);    String iRef=commandLine.getOptionValue("instance-ref");    LOGGER.debug("instance ref is " + iRef);    String addTs=commandLine.getOptionValue("add-ts");    LOGGER.debug("add ts " + addTs);    processLogInfo.setProcessId(Integer.parseInt(pId));    processLogInfo.setLogCategory(logCat);    processLogInfo.setMessage(message);    processLogInfo.setMessageId(mId);    processLogInfo.setInstanceRef(Long.parseLong(iRef));    processLogInfo.setAddTs(Timestamp.valueOf(addTs));    com.wipro.ats.bdre.md.dao.jpa.ProcessLog processLog=new com.wipro.ats.bdre.md.dao.jpa.ProcessLog();    processLog.setAddTs(Timestamp.valueOf(addTs));    processLog.setInstanceRef(Long.parseLong(iRef));    processLog.setLogCategory(logCat);    processLog.setMessage(message);    processLog.setMessageId(mId);    Process process=new Process();    process.setProcessId(Integer.parseInt(pId));    processLog.setProcess(process);    Long logId=processLogDAO.insert(processLog);    processLogInfo.setLogId(logId);    return processLogInfo;  } catch (  Exception e) {    LOGGER.error("Error occurred",e);    throw new MetadataException(e);  }}  }
class C{  public void receiveResultgetAlarms(com.emc.storageos.vasa.VasaServiceStub.GetAlarmsResponse result){}  }
class C{  @Override public String decode(String input){  return input;}  }
class C{  public UTF8StreamWriter(OutputStream outputStream,int capacity){  _bytes=new byte[capacity];  _outputStream=outputStream;}  }
class C{  private boolean continueAfterAcceptFailure(Throwable t){  RMIFailureHandler fh=RMISocketFactory.getFailureHandler();  if (fh != null) {    return fh.failure(t instanceof Exception ? (Exception)t : new InvocationTargetException(t));  } else {    throttleLoopOnException();    return true;  }}  }
class C{  public boolean hasSpaceBefore(){  return pos > 0 && lcText[pos - 1] == ' ';}  }
class C{  private boolean isJUnit4Test(Class scriptClass){  boolean isTest=false;  try {    if (InvokerHelper.invokeStaticMethod("org.codehaus.groovy.vmplugin.v5.JUnit4Utils","realIsJUnit4Test",new Object[]{scriptClass,this.loader}) == Boolean.TRUE) {      isTest=true;    }  } catch (  ClassNotFoundException e) {    throw new GroovyRuntimeException("Failed to invoke the JUnit 4 helper class.",e);  }  return isTest;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.PROPERTY_GETTER_DECLARATION__ANNOTATION_LIST:    return annotationList != null;}return super.eIsSet(featureID);}  }
class C{  public Keyboard(Context context,int defaultHeight,int xmlLayoutResId,int modeId,float kbHeightPercent){  DisplayMetrics dm=context.getResources().getDisplayMetrics();  mDisplayWidth=dm.widthPixels;  mDisplayHeight=dm.heightPixels;  Log.v(TAG,"keyboard's display metrics:" + dm + ", mDisplayWidth="+ mDisplayWidth);  mDefaultHorizontalGap=0;  mDefaultWidth=mDisplayWidth / 10;  mDefaultVerticalGap=0;  mDefaultHeight=defaultHeight;  mKeyboardHeight=Math.round(mDisplayHeight * kbHeightPercent / 100);  mKeys=new ArrayList<Key>();  mModifierKeys=new ArrayList<Key>();  mKeyboardMode=modeId;  mUseExtension=LatinIME.sKeyboardSettings.useExtension;  loadKeyboard(context,context.getResources().getXml(xmlLayoutResId));  setEdgeFlags();  fixAltChars(LatinIME.sKeyboardSettings.inputLocale);}  }
class C{  private static void assertArrayLength(final int length,final JBBPNamedFieldInfo name){  if (length < 0) {    throw new JBBPParsingException("Detected negative calculated array length for field '" + (name == null ? "<NONAMED>" : name.getFieldPath()) + "\' ["+ JBBPUtils.int2msg(length)+ ']');  }}  }
class C{  public static void p(String txt){  p(txt,0,false);}  }
class C{  public VolumeImpl(String entidad){  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    this.engine=dbConn.getEngine();    this.version=dbConn.getEngineVersion();  } catch (  Exception e) {  } finally {    try {      dbConn.close();    } catch (    Exception e) {    }  }  init(ISicresAdminDefsKeys.NULL_ID,ISicresAdminDefsKeys.NULL_ID);}  }
class C{  public static Potato potate(Context context){  return new Potato(context);}  }
class C{  public void changedUpdate(DocumentEvent changes,Shape a,ViewFactory f){  updateDamage(changes,a,f);}  }
class C{  public FastByteArrayInputStream(byte[] buffer,int offset,int length){  buf=buffer;  pos=offset;  count=length;}  }
class C{  private MQuery initialQuery(MQuery query,GridTab mTab){  MRole role=MRole.getDefault(m_ctx,false);  if (query != null && query.isActive() && !role.isQueryMax(query.getRecordCount()))   return query;  StringBuffer where=new StringBuffer(Env.parseContext(m_ctx,m_curWindowNo,mTab.getWhereExtended(),false));  boolean require=mTab.isHighVolume();  if (!require && !m_onlyCurrentRows) {    if (query != null) {      String wh2=query.getWhereClause();      if (wh2.length() > 0) {        if (where.length() > 0)         where.append(" AND ");        where.append(wh2);      }    }    StringBuffer sql=new StringBuffer("SELECT COUNT(*) FROM ").append(mTab.getTableName());    if (where.length() > 0)     sql.append(" WHERE ").append(where);    int no=DB.getSQLValue(null,sql.toString());    require=MRole.getDefault().isQueryRequire(no);  }  if (require) {    GridField[] findFields=mTab.getFields();    Find find=new Find(Env.getFrame(this),m_curWindowNo,mTab.getName(),mTab.getAD_Tab_ID(),mTab.getAD_Table_ID(),mTab.getTableName(),where.toString(),findFields,10);    query=find.getQuery();    isCancel=(query == null);    find.dispose();    find=null;  }  return query;}  }
class C{  @Override public void zoomDomainAxes(double factor,PlotRenderingInfo info,Point2D source){  zoomDomainAxes(factor,info,source,false);}  }
class C{  public static boolean isEmpty(final float[] array){  return array == null || array.length == 0;}  }
class C{  private ArrayList<IconMarker> createIconMarkers(){  final ArrayList<IconMarker> iconMarkers=new ArrayList<>(LOCATIONS.length);  iconMarkers.add(new IconMarker(LOCATIONS[0],R.drawable.bread,R.drawable.bread_c));  iconMarkers.add(new IconMarker(LOCATIONS[1],R.drawable.butcher,R.drawable.butcher_c));  iconMarkers.add(new IconMarker(LOCATIONS[2],R.drawable.fruits,R.drawable.fruits_c));  iconMarkers.add(new IconMarker(LOCATIONS[3],R.drawable.grocery,R.drawable.grocery_c));  iconMarkers.add(new IconMarker(LOCATIONS[4],R.drawable.patisserie,R.drawable.patisserie_c));  return iconMarkers;}  }
class C{  public static void printServerProps(){  Debug.output("");  Debug.output("#################################################");  Debug.output("# Properties for ImageServer");  Debug.output("# List of unique layer nicknames to use for the image (your choice).");  Debug.output("# server1 is the name specified in the ImageMaster properties.");  Debug.output("server1.imageServer.layers=<layer1> <layer2> <etc>");  Debug.output("# Classname of object to determine image format.");  Debug.output("server1.imageServer.formatter=<classname of ImageFormatter>");  Debug.output("");  Debug.output("layer1.class=<com.bbn.openmap.layer.ShapeLayer");  Debug.output("layer1.prettyName=ShapeLayer");  Debug.output("# Continue with layer specific properties.  See each layer's documentation or source for more details.");  Debug.output("");  Debug.output("# Continue for each layer listed in the imageServer.layers property.");  Debug.output("#################################################");  Debug.output("");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:22.170 -0500",hash_original_method="7ECE87C8E0B6AC612BF4B05EB3BE89DA",hash_generated_method="5061C51BA9AB55A45A330545ECB336D2") public void disconnected(){}  }
class C{  public static void reset(){  currentNumber=0;  wasAccessed=false;}  }
class C{  public final MutableDouble3D subtract(MutableDouble3D other1,MutableDouble3D other2){  x=other1.x - other2.x;  y=other1.y - other2.y;  z=other1.z - other2.z;  return this;}  }
class C{  public E push(E object){  addElement(object);  return object;}  }
class C{  public void log(){  root.log("");  wordToNode.forEach(null);}  }
class C{  public static MethExecutorResult executeInstance(String receiver,String selector,Class[] types,Object[] args){  try {    Class receiverClass=Class.forName(receiver);    Constructor init=receiverClass.getDeclaredConstructor(new Class[0]);    init.setAccessible(true);    Object target=init.newInstance(new Object[0]);    Object res=null;    try {      Method theMethod=getMethod(receiverClass,selector,types);      res=theMethod.invoke(target,args);      return new MethExecutorResult(res);    } catch (    InvocationTargetException invTargEx) {      Throwable targEx=invTargEx.getTargetException();      if (targEx == null) {        return new MethExecutorResult(res);      } else {        return new MethExecutorResult(targEx);      }    }  } catch (  VirtualMachineError e) {    SystemFailure.initiateFailure(e);    throw e;  }catch (  Throwable t) {    return new MethExecutorResult(t);  }}  }
class C{  @Override public void onDeleteComplete(int taskId,Object cookie,int deleteCount){  if (taskId == AppConstants.QueryTokens.DELETE_TAGS) {    fetchServiceCategoriesFromServer();    fetchGocs();  }}  }
class C{  public void seekStart(long pos) throws IOException {  flushBuffer();  StreamImpl source=_source;  if (source != null) {    source.seekStart(pos);    _position=pos;  }}  }
class C{  protected StoragePool checkStoragePoolExistsInDB(String nativeGuid) throws IOException {  StoragePool pool=null;  @SuppressWarnings("deprecation") List<URI> poolURIs=_dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePoolByNativeGuidConstraint(nativeGuid));  if (!poolURIs.isEmpty()) {    pool=_dbClient.queryObject(StoragePool.class,poolURIs.get(0));  }  return pool;}  }
class C{  public synchronized void copyInto(Object[] anArray){  System.arraycopy(elementData,0,anArray,0,elementCount);}  }
class C{  public void start(){  _start=System.nanoTime();}  }
class C{  public String serverHeader(){  return _serverHeader;}  }
class C{  public ImportScopeItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void unselectLabel(){  listView.setAdapter(null);  view.findViewById(R.id.selectALabel).setVisibility(View.VISIBLE);}  }
class C{  protected void rewritePersistentReadsAndWrites(){  LocalVariableMap symbolTable=script.getSymbolTable();  if (symbolTable != null) {    String[] inputs=(script.getInputVariables() == null) ? new String[0] : script.getInputVariables().toArray(new String[0]);    String[] outputs=(script.getOutputVariables() == null) ? new String[0] : script.getOutputVariables().toArray(new String[0]);    RewriteRemovePersistentReadWrite rewrite=new RewriteRemovePersistentReadWrite(inputs,outputs,script.getSymbolTable());    ProgramRewriter programRewriter=new ProgramRewriter(rewrite);    try {      programRewriter.rewriteProgramHopDAGs(dmlProgram);    } catch (    LanguageException e) {      throw new MLContextException("Exception occurred while rewriting persistent reads and writes",e);    }catch (    HopsException e) {      throw new MLContextException("Exception occurred while rewriting persistent reads and writes",e);    }  }}  }
class C{  public long update(){  long physicalTime=physicalTimeProvider.getPhysicalTime();  if (compare(logicalTime,physicalTime) < 0) {    logicalTime=physicalTime;    logicalCounter=0;  } else {    logicalCounter++;  }  return timestamp();}  }
class C{  protected void doNewState(int oldState,int newState){  boolean state=true;  if (newState == OFF) {    state=false;  }  if (tc.getCommandOptions() >= NceTrafficController.OPTION_2006) {    byte[] bl=NceBinaryCommand.accDecoder(mBit,state);    if (log.isDebugEnabled()) {      log.debug("Command: " + Integer.toHexString(0xFF & bl[0]) + " "+ Integer.toHexString(0xFF & bl[1])+ " "+ Integer.toHexString(0xFF & bl[2])+ " "+ Integer.toHexString(0xFF & bl[3])+ " "+ Integer.toHexString(0xFF & bl[4]));    }    NceMessage m=NceMessage.createBinaryMessage(tc,bl);    tc.sendNceMessage(m,null);  } else {    byte[] bl=NmraPacket.accDecoderPkt(mBit,state);    if (log.isDebugEnabled()) {      log.debug("packet: " + Integer.toHexString(0xFF & bl[0]) + " "+ Integer.toHexString(0xFF & bl[1])+ " "+ Integer.toHexString(0xFF & bl[2]));    }    NceMessage m=NceMessage.sendPacketMessage(tc,bl);    tc.sendNceMessage(m,null);  }}  }
class C{  public static void checkEquals(String message,String expected,String actual){  checkEqualsWithScaleOfExpected(message,new BigDecimal(expected),new BigDecimal(actual));}  }
class C{  public static Map<String,String> hello(final Seed mySeed,final PeerActions peerActions,final String targetAddress,final String targetHash){  Map<String,String> result=null;  final String salt=crypt.randomSalt();  long responseTime=Long.MAX_VALUE;  byte[] content=null;  try {    final Map<String,ContentBody> parts=basicRequestParts(Switchboard.getSwitchboard(),null,salt);    parts.put("count",UTF8.StringBody("20"));    parts.put("magic",UTF8.StringBody(Long.toString(Network.magic)));    parts.put("seed",UTF8.StringBody(mySeed.genSeedStr(salt)));    final long start=System.currentTimeMillis();    final HTTPClient httpClient=new HTTPClient(ClientIdentification.yacyInternetCrawlerAgent,30000);    content=httpClient.POSTbytes(new MultiProtocolURL("http://" + targetAddress + "/yacy/hello.html"),Seed.b64Hash2hexHash(targetHash) + ".yacyh",parts,false,true);    responseTime=System.currentTimeMillis() - start;    result=FileUtils.table(content);  } catch (  final Exception e) {    if (Thread.currentThread().isInterrupted()) {      Network.log.info("yacyClient.hello thread '" + Thread.currentThread().getName() + "' interrupted.");      return null;    }    Network.log.info("yacyClient.hello thread '" + Thread.currentThread().getName() + "', peer "+ targetAddress+ "; exception: "+ e.getMessage());    result=null;  }  if (result == null || result.size() == 0) {    Network.log.info("yacyClient.hello result error: " + ((result == null) ? "result null" : ("result=" + result.toString())));    return null;  }  Network.log.info("yacyClient.hello thread '" + Thread.currentThread().getName() + "' contacted peer at "+ targetAddress+ ", received "+ ((content == null) ? "null" : content.length)+ " bytes, time = "+ responseTime+ " milliseconds");  Seed otherPeer=null;  String seed;  if ((targetHash != null) && (targetHash.length() > 0) && ((seed=result.get("seed0")) != null)) {    if (seed.length() > Seed.maxsize) {      Network.log.info("hello/client 0: rejected contacting seed; too large (" + seed.length() + " > "+ Seed.maxsize+ ")");    } else {      try {        String host=Domains.stripToHostName(targetAddress);        InetAddress ie=Domains.dnsResolve(host);        otherPeer=Seed.genRemoteSeed(seed,false,ie.getHostAddress());        if (!otherPeer.hash.equals(targetHash)) {          Network.log.info("yacyClient.hello: consistency error: otherPeer.hash = " + otherPeer.hash + ", otherHash = "+ targetHash);          return null;        }      } catch (      final IOException e) {        Network.log.info("yacyClient.hello: consistency error: other seed bad:" + e.getMessage() + ", seed="+ seed);        return null;      }    }  }  String mytype=result.get(Seed.YOURTYPE);  if (mytype == null) {    mytype="";  }  if (serverCore.useStaticIP) {    mySeed.setIPs(Switchboard.getSwitchboard().myPublicIPs());  } else {    final String myIP=result.get("yourip");    if (myIP == null) {      Network.log.info("yacyClient.hello result error: Peer sent incompleet hello message (key yourip is missing)");      return null;    }    HashSet<String> h=new HashSet<>();    for (    String s : CommonPattern.COMMA.split(myIP)) {      if (s.length() > 0 && Seed.isProperIP(s))       h.add(s);    }    if (h.size() > 0)     mySeed.setIPs(h);  }  mySeed.setFlagRootNode((mytype.equals(Seed.PEERTYPE_SENIOR) || mytype.equals(Seed.PEERTYPE_PRINCIPAL)) && Switchboard.getSwitchboard().index.fulltext().connectedLocalSolr() && responseTime < 1000 && Domains.isThisHostIP(mySeed.getIPs()));  final Accessible accessible=new Accessible();  if (mytype.equals(Seed.PEERTYPE_SENIOR) || mytype.equals(Seed.PEERTYPE_PRINCIPAL)) {    accessible.IWasAccessed=true;    if (mySeed.isPrincipal()) {      mytype=Seed.PEERTYPE_PRINCIPAL;    }  } else {    accessible.IWasAccessed=false;  }  accessible.lastUpdated=System.currentTimeMillis();  Network.amIAccessibleDB.put(targetHash,accessible);  if (mytype.equalsIgnoreCase(Seed.PEERTYPE_JUNIOR)) {    Network.log.info("yacyClient.hello: Peer '" + ((otherPeer == null) ? "unknown" : otherPeer.getName()) + "' reported us as junior.");  } else   if ((mytype.equalsIgnoreCase(Seed.PEERTYPE_SENIOR)) || (mytype.equalsIgnoreCase(Seed.PEERTYPE_PRINCIPAL))) {    if (Network.log.isFine()) {      Network.log.fine("yacyClient.hello: Peer '" + ((otherPeer == null) ? "unknown" : otherPeer.getName()) + "' reported us as "+ mytype+ ", accepted other peer.");    }  } else {    if (Network.log.isFine()) {      Network.log.fine("yacyClient.hello: Peer '" + ((otherPeer == null) ? "unknown" : otherPeer.getName()) + "' reported us as "+ mytype+ ", rejecting other peer.");    }    return null;  }  if (mySeed.orVirgin().equals(Seed.PEERTYPE_VIRGIN)) {    mySeed.put(Seed.PEERTYPE,mytype);  }  final String error=mySeed.isProper(true);  if (error != null) {    Network.log.warn("yacyClient.hello mySeed error - not proper: " + error);    return null;  }  int i=0;  String seedStr;  Seed s;  final int connectedBefore=peerActions.sizeConnected();  while ((seedStr=result.get("seed" + i++)) != null) {    if (seedStr.length() > Seed.maxsize) {      Network.log.info("hello/client: rejected contacting seed; too large (" + seedStr.length() + " > "+ Seed.maxsize+ ")");    } else {      try {        if (i == 1) {          String host=Domains.stripToHostName(targetAddress);          InetAddress ia=Domains.dnsResolve(host);          if (ia == null)           continue;          host=ia.getHostAddress();          s=Seed.genRemoteSeed(seedStr,false,host);        } else {          s=Seed.genRemoteSeed(seedStr,false,null);        }        peerActions.peerArrival(s,(i == 1));      } catch (      final IOException e) {        Network.log.info("hello/client: rejected contacting seed; bad (" + e.getMessage() + ")");      }    }  }  final int connectedAfter=peerActions.sizeConnected();  EventTracker.update(EventTracker.EClass.PEERPING,new ProfilingGraph.EventPing(mySeed.getName(),targetHash,true,connectedAfter - connectedBefore),false);  return result;}  }
class C{  @Override protected void extendSignatureTag() throws DSSException {  assertExtendSignaturePossible();  super.extendSignatureTag();  if (xadesSignature.hasLTAProfile()) {    return;  }  checkSignatureIntegrity();  final ValidationContext valContext=xadesSignature.getSignatureValidationContext(certificateVerifier);  removeOldCertificateValues();  removeOldRevocationValues();  final List<CertificateToken> toIncludeCertificates=getToIncludeCertificateTokens(valContext);  incorporateCertificateValues(unsignedSignaturePropertiesDom,toIncludeCertificates);  incorporateRevocationValues(unsignedSignaturePropertiesDom,valContext);  xadesSignature.resetCertificateSource();  xadesSignature.resetRevocationSources();}  }
class C{  public static void directOutput(File file,boolean alsoToOutStream){  try {    directOutput(new FileOutputStream(file),alsoToOutStream);  } catch (  IOException ioe) {    notifyOut=true;    out=System.out;    error("Debug: can't set up <" + file + "> for log file! \n"+ ioe);    return;  }}  }
class C{  public void classForName(SootMethod container,Stmt forNameInvokeStmt){  Set<String> classNames=reflectionInfo.classForNameClassNames(container);  if (classNames == null || classNames.isEmpty()) {    registerGuard(container,forNameInvokeStmt,"Class.forName() call site; Soot did not expect this site to be reached");  } else {    for (    String clsName : classNames) {      constantForName(clsName,container,forNameInvokeStmt);    }  }}  }
class C{  public void disableCurlLogging(){  curlConfiguration=null;}  }
class C{  public void updateAppWidgetOptions(int appWidgetId,Bundle options){  try {    sService.updateAppWidgetOptions(appWidgetId,options,mContext.getUserId());  } catch (  RemoteException e) {    throw new RuntimeException("system server dead?",e);  }}  }
class C{  public ByteArray(int size){  if (size < 0) {    size=32;  }  if (size > 0) {    buf=new byte[size];  }}  }
class C{  public static String toOptionList(Tag[] tags){  String result;  int i;  result="<";  for (i=0; i < tags.length; i++) {    if (i > 0)     result+="|";    result+=tags[i];  }  result+=">";  return result;}  }
class C{  private void drawResultPoints(Bitmap barcode,Result rawResult){  ResultPoint[] points=rawResult.getResultPoints();  if (points != null && points.length > 0) {    Canvas canvas=new Canvas(barcode);    Paint paint=new Paint();    paint.setColor(getResources().getColor(fakeR.getId("color","result_points")));    if (points.length == 2) {      paint.setStrokeWidth(4.0f);      drawLine(canvas,paint,points[0],points[1]);    } else     if (points.length == 4 && (rawResult.getBarcodeFormat() == BarcodeFormat.UPC_A || rawResult.getBarcodeFormat() == BarcodeFormat.EAN_13)) {      drawLine(canvas,paint,points[0],points[1]);      drawLine(canvas,paint,points[2],points[3]);    } else {      paint.setStrokeWidth(10.0f);      for (      ResultPoint point : points) {        canvas.drawPoint(point.getX(),point.getY(),paint);      }    }  }}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            outputFile.setValue(row,col,Math.pow(z1,z2));          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            outputFile.setValue(row,col,Math.pow(z1,constant2));          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            outputFile.setValue(row,col,Math.pow(constant1,z2));          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public long startTime(){  return DistributionStats.getStatTime();}  }
class C{  public EchoClient(String host,int port,boolean useSSL,long sleepMillis){  this.host=host;  this.port=port;  this.useSSL=useSSL;  this.sleepMillis=sleepMillis;}  }
class C{  @Override public final Integer add(K key){  return add(key,1);}  }
class C{  public InsolvableRuntimeEnvironmentException(final IN4JSProject project){  super(getMessage(checkNotNull(project,"project")));}  }
class C{  @SuppressWarnings({"squid:S2095"}) public static void main(final String[] args){  SpringApplication.run(Start.class,args);}  }
class C{  private void commitCommentNote(String reviewCommitHash,ReviewComment comment){  try (GitNoteWriter<ReviewComment> writer=GitNoteWriter.createNoteWriter(reviewCommitHash,repo,author,COMMENTS_REF)){    comment.setTimestamp(System.currentTimeMillis() / 1000);    comment.setAuthor(author.getEmailAddress());    List<ReviewComment> comments=new ArrayList<ReviewComment>();    comments.add(comment);    writer.create("Writing comment for " + reviewCommitHash,comments);  } }  }
class C{  public AuthnData(SubjectData subjectData,Date expDate,String sessionIndex,String authnContext,List<Attribute> attrs,TokenType tokenType,Document token,DateTime sessionNotOnOrAfter){  this.subjectData=subjectData;  this.expireDate=expDate;  this.sessionIndex=sessionIndex;  this.authnContext=authnContext;  this.attributes=attrs;  this.tokenType=tokenType;  this.token=token;  this.sessionNotOnOrAfter=sessionNotOnOrAfter;}  }
class C{  public Matrix4x3d rotation(double angle,Vector3fc axis){  return rotation(angle,axis.x(),axis.y(),axis.z());}  }
class C{  public JSONArray put(JSONObject jsonObject){  add(jsonObject);  return this;}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public TokenizerChain(TokenizerFactory tokenizer,TokenFilterFactory[] filters){  this(null,tokenizer,filters);}  }
class C{  public static BitcoinHeader fromWire(WireFormat.Reader reader) throws IOException {  return fromWire(new BitcoinHeader.Builder(),reader).build();}  }
class C{  public static String generateActivationKey(){  return RandomStringUtils.randomNumeric(DEF_COUNT);}  }
class C{  public boolean startUsingDataSocket(){  try {    dataSocket=localDataSocket.onTransfer();    if (dataSocket == null) {      Log.i(TAG,"dataSocketFactory.onTransfer() returned null");      return false;    }    dataOutputStream=dataSocket.getOutputStream();    return true;  } catch (  IOException e) {    Log.i(TAG,"IOException getting OutputStream for data socket");    dataSocket=null;    return false;  }}  }
class C{  public void applyKitKatTranslucency(){  if (Build.VERSION.SDK_INT == Build.VERSION_CODES.KITKAT) {    TypedValue tv=new TypedValue();    int actionBarHeight=0;    if (getTheme().resolveAttribute(android.R.attr.actionBarSize,tv,true)) {      actionBarHeight=TypedValue.complexToDimensionPixelSize(tv.data,getResources().getDisplayMetrics());    }    ((View)this.getListView().getParent()).setPadding(0,actionBarHeight + mApp.getStatusBarHeight(mContext),0,0);    this.getListView().setBackgroundColor(0xFFEEEEEE);    this.getListView().setPadding(0,0,0,mApp.getNavigationBarHeight(mContext));    this.getListView().setClipToPadding(false);    getWindow().setBackgroundDrawable(UIElementsHelper.getGeneralActionBarBackground(mContext));  }}  }
class C{  public int[] e2fAll(){  return sentencePair.e2f(tgtStartInclusive,tgtEndExclusive);}  }
class C{  public void acceptInvitation() throws RcsPermissionDeniedException, RcsGenericException {  try {    mSessionIntf.acceptInvitation();  } catch (  Exception e) {    RcsPermissionDeniedException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public String valueOf(char data[],int offset,int count){  return String.valueOf(data,offset,count);}  }
class C{  public ByteBufferBackedOutputStream(ByteBuffer buf){  this.buf=buf;}  }
class C{  public synchronized IAudioProcessor remove(int index){  IAudioProcessor processor=processors.remove(index);  buildFinalProcessor();  return processor;}  }
class C{  public Property minuteOfHour(){  return new Property(this,getChronology().minuteOfHour());}  }
class C{  public static ExecutorService singleThreadExecutor(){synchronized (QueuedWork.class) {    if (sSingleThreadExecutor == null) {      sSingleThreadExecutor=Executors.newSingleThreadExecutor();    }    return sSingleThreadExecutor;  }}  }
class C{  public void fireObjectsUpdated(DBIDs updates){  fireObjectsChanged(updates,Type.UPDATE);}  }
class C{  private byte[] markRightTree(long rightCount,int splitDim,PathSlice source,LongBitSet ordBitSet) throws IOException {  try (PointReader reader=source.writer.getReader(source.start + source.count - rightCount,rightCount)){    boolean result=reader.next();    assert result;    System.arraycopy(reader.packedValue(),splitDim * bytesPerDim,scratch1,0,bytesPerDim);    if (numDims > 1) {      assert ordBitSet.get(reader.ord()) == false;      ordBitSet.set(reader.ord());      reader.markOrds(rightCount - 1,ordBitSet);    }  } catch (  Throwable t) {    verifyChecksum(t,source.writer);  }  return scratch1;}  }
class C{  public final void increaseReadMessages(long currentTime){  throughputCalculationLock.lock();  try {    readMessages++;    lastReadTime=currentTime;  }  finally {    throughputCalculationLock.unlock();  }}  }
class C{  public static long[] transformLongArray(Long[] source){  long[] destin=new long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public int size(){  return elements.size();}  }
class C{  public BytesReference extraSource(){  return this.extraSource;}  }
class C{  public CharMemberValue(int index,ConstPool cp){  super('C',cp);  this.valueIndex=index;}  }
class C{  public void finishDecode(IoSession session,ProtocolDecoderOutput out) throws Exception {}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public static FileResource createFileResourceByFilename(final String filename){  final FileResource resource=new FileResource();  resource.filename=filename;  return resource;}  }
class C{  public boolean handleQuit(){  return false;}  }
class C{  public JSONAPIResponseBodyConverter(ResourceConverter parser,Class<?> clazz,boolean isCollection){  this.clazz=clazz;  this.isCollection=isCollection;  this.parser=parser;}  }
class C{  private boolean isReservedWord(String word){  return reservedWords.contains(word);}  }
class C{  public void write(ByteBuf dataStream){  dataStream.writeInt(xCoord);  dataStream.writeInt(yCoord);  dataStream.writeInt(zCoord);  dataStream.writeInt(dimensionId);}  }
class C{  public static int executeUpdate(Connection connection,String rawSqlQuery,Object... parameters) throws SQLException {  PreparedStatement stmt=null;  try {    stmt=connection.prepareStatement(rawSqlQuery);    for (int index=0; index < parameters.length; index++) {      JdbcUtils.bindParameter(stmt,index + 1,parameters[index]);    }    return stmt.executeUpdate();  }  finally {    JdbcUtils.closeStatement(stmt);  }}  }
class C{  public DSAParameterGenerationParameters(int L,int N,int certainty,SecureRandom random){  this(L,N,certainty,random,-1);}  }
class C{  public static File insertDriveFile(Drive drive,String folderId,Context context,MyTracksProviderUtils myTracksProviderUtils,Track track,boolean canRetry,boolean updateTrack) throws IOException {  java.io.File file=null;  try {    file=getTempFile(context,myTracksProviderUtils,track,true);    if (file == null) {      Log.e(TAG,"Unable to add Drive file. File is null for track " + track.getName());      return null;    }    Log.d(TAG,"Add Drive file for track " + track.getName());    File uploadedFile=insertDriveFile(drive,folderId,track.getName(),file,canRetry);    if (uploadedFile == null) {      Log.e(TAG,"Unable to add Drive file. Uploaded file is null for track " + track.getName());      return null;    }    if (updateTrack) {      SyncUtils.updateTrack(myTracksProviderUtils,track,uploadedFile);    }    return uploadedFile;  }  finally {    if (file != null) {      file.delete();    }  }}  }
class C{  @Override public int hashCode(){  int result=193;  long temp=Double.doubleToLongBits(this.x);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.y);  result=37 * result + (int)(temp ^ (temp >>> 32));  return result;}  }
class C{  public Boolean startServer(PropertyHandler ph,String serverId) throws OpenStackConnectionException {  String uri;  try {    uri=connection.getNovaEndpoint() + "/servers/" + URLEncoder.encode(serverId,"UTF-8")+ "/action";    connection.processRequest(uri,"POST","{\"os-start\": null}");    logger.debug("Start server: " + serverId);    return Boolean.TRUE;  } catch (  UnsupportedEncodingException e) {    logger.error("Runtime error happened during encoding",e);    throw new RuntimeException(e);  }}  }
class C{  @Override public void updateNavigationDrawerTopHandler(NavigationDrawerTopHandler navigationDrawerTopHandler,int defaultNavigationDrawerItemSelectedPosition){  replaceTopItems(navigationDrawerTopHandler);  selectDefaultItemPosition(defaultNavigationDrawerItemSelectedPosition,false);}  }
class C{  @Override public void draw(Graphics2D g2,DialPlot plot,Rectangle2D frame,Rectangle2D view){  Rectangle2D f=DialPlot.rectangleByRadius(frame,this.radius,this.radius);  Arc2D arc=new Arc2D.Double(f,this.angle,0.0,Arc2D.OPEN);  Point2D pt=arc.getStartPoint();  FontMetrics fm=g2.getFontMetrics(this.font);  double value=plot.getValue(this.datasetIndex);  String valueStr=this.formatter.format(value);  Rectangle2D valueBounds=TextUtilities.getTextBounds(valueStr,g2,fm);  String s=this.formatter.format(this.templateValue);  Rectangle2D tb=TextUtilities.getTextBounds(s,g2,fm);  double minW=tb.getWidth();  double minH=tb.getHeight();  double maxW=Double.MAX_VALUE;  double maxH=Double.MAX_VALUE;  if (this.maxTemplateValue != null) {    s=this.formatter.format(this.maxTemplateValue);    tb=TextUtilities.getTextBounds(s,g2,fm);    maxW=Math.max(tb.getWidth(),minW);    maxH=Math.max(tb.getHeight(),minH);  }  double w=fixToRange(valueBounds.getWidth(),minW,maxW);  double h=fixToRange(valueBounds.getHeight(),minH,maxH);  Rectangle2D bounds=RectangleAnchor.createRectangle(new Size2D(w,h),pt.getX(),pt.getY(),this.frameAnchor);  Rectangle2D fb=this.insets.createOutsetRectangle(bounds);  g2.setPaint(this.backgroundPaint);  g2.fill(fb);  g2.setStroke(this.outlineStroke);  g2.setPaint(this.outlinePaint);  g2.draw(fb);  Shape savedClip=g2.getClip();  g2.clip(fb);  Point2D pt2=RectangleAnchor.coordinates(bounds,this.valueAnchor);  g2.setPaint(this.paint);  g2.setFont(this.font);  TextUtilities.drawAlignedString(valueStr,g2,(float)pt2.getX(),(float)pt2.getY(),this.textAnchor);  g2.setClip(savedClip);}  }
class C{  public void declareExtensions(ExtensionProfile extProfile){  super.declareExtensions(extProfile);}  }
class C{  DownloadState query(int downloadId){synchronized (currentRequests) {    for (    DownloadRequest request : currentRequests) {      if (request.downloadId() == downloadId) {        return request.downloadState();      }    }  }  return DownloadState.INVALID;}  }
class C{  @Override public Set<Statement> apply(final IGASState<Set<Statement>,Set<Statement>,Set<Statement>> state,final Value u,final Set<Statement> sum){  if (sum != null) {    final Set<Statement> us=state.getState(u);    us.addAll(sum);    return us;  }  return null;}  }
class C{  public void reset(){  Arrays.fill(mean,0.);  Arrays.fill(nmea,0.);  if (elements != null) {    for (int i=0; i < elements.length; i++) {      Arrays.fill(elements[i],0.);    }  } else {    elements=new double[mean.length][mean.length];  }  wsum=0.;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  static private String delimit(String s,char c){  int i=s.indexOf(c);  while (i != -1) {    if (i == 0 || s.charAt(i - 1) != '\\') {      s=s.substring(0,i) + "\\" + s.substring(i);      i=s.indexOf(c,i + 2);    } else {      i=s.indexOf(c,i + 1);    }  }  return s;}  }
class C{  private void initWebApp(Injector injector) throws Exception {  webServer=injector.getInstance(MyriadWebServer.class);  webServer.start();}  }
class C{  public Result run(junit.framework.Test test){  return run(new JUnit38ClassRunner(test));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy != null) {    if (pluggy.isServerConfiguredPlugin()) {      stack.push(pluggy);      return makeNetworkedCall(stack);    }    return sage.plugin.CorePluginManager.getInstance().disablePlugin(pluggy.getId(),stack.getUIMgr()) ? Boolean.TRUE : Boolean.FALSE;  }  return null;}  }
class C{  public void updateRole(){  clearParametersSelectedRole();  pricePerUserSelectedRole=BigDecimal.ZERO;  if (selectedRole != null) {    int index=getSelectedRoleIndex();    if (index != -1) {      int paramNum=pricedParametersOfAllRoles[index].length;      for (int i=0; i < paramNum; i++) {        if ((pricedParametersOfSelectedRole[i].getPricedParameter() != null) && (pricedParametersOfAllRoles[index][i].getPricedParameter() != null)) {          pricedParametersOfSelectedRole[i].getPricedParameter().setPricePerUser(pricedParametersOfAllRoles[index][i].getPricedParameter().getPricePerUser());        }        if ((pricedParametersOfSelectedRole[i].getPricedOption() != null) && (pricedParametersOfAllRoles[index][i].getPricedOption() != null)) {          pricedParametersOfSelectedRole[i].getPricedOption().setPricePerUser(pricedParametersOfAllRoles[index][i].getPricedOption().getPricePerUser());        }      }      pricePerUserSelectedRole=priceModelPricedRoles[index].getPricePerUser();    }  }}  }
class C{  public String namespaceURI(){  if (namespacePrefix == null || namespacePrefix.isEmpty())   return "";  String uri=namespaceTagHints.get(namespacePrefix);  return uri == null ? "" : uri;}  }
class C{  public static Status createErrorStatus(String message){  return createErrorStatus(message,null);}  }
class C{  public final BufferedImage filter(BufferedImage src,BufferedImage dst){  ColorModel srcCM=src.getColorModel();  int numBands=srcCM.getNumColorComponents();  ColorModel dstCM;  if (srcCM instanceof IndexColorModel) {    throw new IllegalArgumentException("LookupOp cannot be " + "performed on an indexed image");  }  int numComponents=ltable.getNumComponents();  if (numComponents != 1 && numComponents != srcCM.getNumComponents() && numComponents != srcCM.getNumColorComponents()) {    throw new IllegalArgumentException("Number of arrays in the " + " lookup table (" + numComponents + " is not compatible with the "+ " src image: "+ src);  }  boolean needToConvert=false;  int width=src.getWidth();  int height=src.getHeight();  if (dst == null) {    dst=createCompatibleDestImage(src,null);    dstCM=srcCM;  } else {    if (width != dst.getWidth()) {      throw new IllegalArgumentException("Src width (" + width + ") not equal to dst width ("+ dst.getWidth()+ ")");    }    if (height != dst.getHeight()) {      throw new IllegalArgumentException("Src height (" + height + ") not equal to dst height ("+ dst.getHeight()+ ")");    }    dstCM=dst.getColorModel();    if (srcCM.getColorSpace().getType() != dstCM.getColorSpace().getType()) {      needToConvert=true;      dst=createCompatibleDestImage(src,null);    }  }  BufferedImage origDst=dst;  if (ImagingLib.filter(this,src,dst) == null) {    WritableRaster srcRaster=src.getRaster();    WritableRaster dstRaster=dst.getRaster();    if (srcCM.hasAlpha()) {      if (numBands - 1 == numComponents || numComponents == 1) {        int minx=srcRaster.getMinX();        int miny=srcRaster.getMinY();        int[] bands=new int[numBands - 1];        for (int i=0; i < numBands - 1; i++) {          bands[i]=i;        }        srcRaster=srcRaster.createWritableChild(minx,miny,srcRaster.getWidth(),srcRaster.getHeight(),minx,miny,bands);      }    }    if (dstCM.hasAlpha()) {      int dstNumBands=dstRaster.getNumBands();      if (dstNumBands - 1 == numComponents || numComponents == 1) {        int minx=dstRaster.getMinX();        int miny=dstRaster.getMinY();        int[] bands=new int[numBands - 1];        for (int i=0; i < numBands - 1; i++) {          bands[i]=i;        }        dstRaster=dstRaster.createWritableChild(minx,miny,dstRaster.getWidth(),dstRaster.getHeight(),minx,miny,bands);      }    }    filter(srcRaster,dstRaster);  }  if (needToConvert) {    ColorConvertOp ccop=new ColorConvertOp(hints);    ccop.filter(dst,origDst);  }  return origDst;}  }
class C{  public boolean isReadable(){  return isRead;}  }
class C{  public Intent newIntent(Context context,Class<? extends Fragment> fragmentClass){  return newIntent(context,fragmentClass,null);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof KeyedObjects2D)) {    return false;  }  KeyedObjects2D that=(KeyedObjects2D)obj;  if (!getRowKeys().equals(that.getRowKeys())) {    return false;  }  if (!getColumnKeys().equals(that.getColumnKeys())) {    return false;  }  int rowCount=getRowCount();  if (rowCount != that.getRowCount()) {    return false;  }  int colCount=getColumnCount();  if (colCount != that.getColumnCount()) {    return false;  }  for (int r=0; r < rowCount; r++) {    for (int c=0; c < colCount; c++) {      Object v1=getObject(r,c);      Object v2=that.getObject(r,c);      if (v1 == null) {        if (v2 != null) {          return false;        }      } else {        if (!v1.equals(v2)) {          return false;        }      }    }  }  return true;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:09.889 -0500",hash_original_method="47F90CF51661FE278576148D8412D8DA",hash_generated_method="630F52B46C2356B6C4E27989C8E6C819") @Override public boolean isGroupingUsed(){  return dform.isGroupingUsed();}  }
class C{  public static void dispose(){  Disposables.disposeOf(INTERFACE_STYLE);}  }
class C{  public AxisAngle4d normalize(){  double invLength=1.0 / Math.sqrt(x * x + y * y + z * z);  x*=invLength;  y*=invLength;  z*=invLength;  return this;}  }
class C{  public static XMLTableDefinition load(Element definition){  XMLTableDefinition answer=new XMLTableDefinition();  answer.setRowExpression(definition.attributeValue("select"));  for (Iterator<Element> iter=definition.elementIterator("column"); iter.hasNext(); ) {    Element element=iter.next();    String expression=element.attributeValue("select");    String name=element.getText();    String typeName=element.attributeValue("type","string");    String columnXPath=element.attributeValue("columnNameXPath");    int type=XMLTableColumnDefinition.parseType(typeName);    if (columnXPath != null) {      answer.addColumnWithXPathName(columnXPath,expression,type);    } else {      answer.addColumn(name,expression,type);    }  }  return answer;}  }
class C{  private boolean advanceToEligibleSample(){  boolean haveNext=rollingBuffer.peekSample(sampleInfoHolder);  if (needKeyframe) {    while (haveNext && !sampleInfoHolder.isSyncFrame()) {      rollingBuffer.skipSample();      haveNext=rollingBuffer.peekSample(sampleInfoHolder);    }  }  if (!haveNext) {    return false;  }  if (spliceOutTimeUs != Long.MIN_VALUE && sampleInfoHolder.timeUs >= spliceOutTimeUs) {    return false;  }  return true;}  }
class C{  public String toStringMatrix(){  StringBuffer result;  String[][] cells;  int i;  int n;  String line;  String title;  String generated;  result=new StringBuffer();  cells=toArray();  generated="# generated by WEKA " + Version.VERSION + "\n";  result.append("\n");  result.append("##################\n");  result.append("# file: plot.dat #\n");  result.append("##################\n");  result.append(generated);  result.append("# contains the data for the plot\n");  result.append("\n");  result.append("# key for the x-axis\n");  for (i=1; i < cells.length - 1; i++)   result.append("# " + i + " - "+ cells[i][0]+ "\n");  result.append("\n");  result.append("# data for the plot\n");  for (i=1; i < cells.length - 1; i++) {    result.append(Integer.toString(i));    for (n=1; n < cells[i].length; n++) {      if (isSignificance(n))       continue;      result.append(" ");      result.append(Utils.quote(cells[i][n]));    }    result.append("\n");  }  result.append("#######\n");  result.append("# end #\n");  result.append("#######\n");  result.append("\n");  result.append("##################\n");  result.append("# file: plot.scr #\n");  result.append("##################\n");  result.append(generated);  result.append("# script to plot the data\n");  result.append("\n");  result.append("# display it in a window:\n");  result.append("set terminal x11\n");  result.append("set output\n");  result.append("\n");  result.append("# to display all data rows:\n");  result.append("set xrange [0:" + ((cells.length - 2) + 1) + "]\n");  result.append("\n");  result.append("# axis labels, e.g.:\n");  result.append("#set xlabel \"Datasets\"\n");  result.append("#set ylabel \"Accuracy in %\"\n");  result.append("\n");  result.append("# the plot commands\n");  n=1;  i=0;  while (i < cells[0].length - 1) {    i++;    if (isSignificance(i))     continue;    n++;    if (i == 1)     line="plot"; else     line="replot";    line+=" \"plot.dat\"";    title="title \"" + cells[0][i] + "\"";    line+=" using 1:" + n;    if (getShowStdDev()) {      n++;      i++;      line+=":" + n;    }    line+=" with";    if (getShowStdDev())     line+=" yerrorbars"; else     line+=" lines";    line+=" " + title;    result.append(line + "\n");  }  result.append("\n");  result.append("# generate ps:\n");  result.append("#set terminal postscript\n");  result.append("#set output \"plot.ps\"\n");  result.append("#replot\n");  result.append("\n");  result.append("# generate png:\n");  result.append("#set terminal png size 800,600\n");  result.append("#set output \"plot.png\"\n");  result.append("#replot\n");  result.append("\n");  result.append("# wait for user to hit <Return>\n");  result.append("pause -1\n");  result.append("#######\n");  result.append("# end #\n");  result.append("#######\n");  return result.toString();}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public static final boolean isValid(Position pos,Move move){  if (move == null)   return false;  ArrayList<Move> moves=new MoveGen().legalMoves(pos);  for (int i=0; i < moves.size(); i++)   if (move.equals(moves.get(i)))   return true;  return false;}  }
class C{  public SystemMemberJmxImpl(AdminDistributedSystemJmxImpl system,ApplicationVM application) throws org.apache.geode.admin.AdminException {  super(system,application);  initializeMBean();}  }
class C{  public static CharSeq of(char[] charArr){  return new CharSeq(new String(charArr));}  }
class C{  public void testCompare13To12() throws Exception {  assertTrue(ApplicationXmlVersion.V1_3.compareTo(ApplicationXmlVersion.V1_2) > 0);}  }
class C{  @Override public void refreshAllOutputs(){  for (  final IOutputManager manager : getActiveOutputManagers()) {    manager.forceUpdateOutputs();  }}  }
class C{  public static List<Locale> languagesByCountry(final String countryCode){  if (countryCode == null) {    return Collections.emptyList();  }  List<Locale> langs=cLanguagesByCountry.get(countryCode);  if (langs == null) {    langs=new ArrayList<Locale>();    final List<Locale> locales=availableLocaleList();    for (int i=0; i < locales.size(); i++) {      final Locale locale=locales.get(i);      if (countryCode.equals(locale.getCountry()) && locale.getVariant().isEmpty()) {        langs.add(locale);      }    }    langs=Collections.unmodifiableList(langs);    cLanguagesByCountry.putIfAbsent(countryCode,langs);    langs=cLanguagesByCountry.get(countryCode);  }  return langs;}  }
class C{  public void addArtworkScraper(MediaScraper artworkScraper){  this.artworkScrapers.add(artworkScraper);}  }
class C{  public void detach(){  if (listener != null) {    contextFactory.removeListener(listener);    contextFactory=null;    listener=null;  }}  }
class C{  public static boolean writeFile(String filePath,String content){  return writeFile(filePath,content,false);}  }
class C{  public static boolean needsParentheses(Expression expression,ASTNode parent,StructuralPropertyDescriptor locationInParent){  if (!expressionTypeNeedsParentheses(expression))   return false;  if (!locationNeedsParentheses(locationInParent)) {    return false;  }  if (parent instanceof Expression) {    Expression parentExpression=(Expression)parent;    int expressionPrecedence=OperatorPrecedence.getExpressionPrecedence(expression);    int parentPrecedence=OperatorPrecedence.getExpressionPrecedence(parentExpression);    if (expressionPrecedence > parentPrecedence)     return false;    if (expressionPrecedence < parentPrecedence)     return true;    if (parentExpression instanceof InfixExpression) {      return needsParenthesesInInfixExpression(expression,(InfixExpression)parentExpression,locationInParent);    }    if (parentExpression instanceof ConditionalExpression && locationInParent == ConditionalExpression.EXPRESSION_PROPERTY) {      return true;    }    return false;  }  return true;}  }
class C{  private List<InstrumentHeader> populateInstrumentDetails(){  List<InstrumentHeader> instrumentHeaderList=new ArrayList<InstrumentHeader>();  if (CollectionConstants.INSTRUMENTTYPE_CASH.equals(instrumentTypeCashOrCard)) {    instrHeaderCash.setInstrumentType(financialsUtil.getInstrumentTypeByType(CollectionConstants.INSTRUMENTTYPE_CASH));    instrHeaderCash.setIsPayCheque(CollectionConstants.ZERO_INT);    cashOrCardInstrumenttotal=cashOrCardInstrumenttotal.add(instrHeaderCash.getInstrumentAmount());    instrumentHeaderList.add(instrHeaderCash);  }  if (CollectionConstants.INSTRUMENTTYPE_CARD.equals(instrumentTypeCashOrCard)) {    instrHeaderCard.setInstrumentType(financialsUtil.getInstrumentTypeByType(CollectionConstants.INSTRUMENTTYPE_CARD));    if (instrHeaderCard.getTransactionDate() == null)     instrHeaderCard.setTransactionDate(new Date());    instrHeaderCard.setIsPayCheque(CollectionConstants.ZERO_INT);    cashOrCardInstrumenttotal=cashOrCardInstrumenttotal.add(instrHeaderCard.getInstrumentAmount());    instrumentHeaderList.add(instrHeaderCard);  }  if (instrumentProxyList != null)   if (getInstrumentType().equals(CollectionConstants.INSTRUMENTTYPE_CHEQUE) || getInstrumentType().equals(CollectionConstants.INSTRUMENTTYPE_DD))   instrumentHeaderList=populateInstrumentHeaderForChequeDD(instrumentHeaderList,instrumentProxyList);  instrumentHeaderList=receiptHeaderService.createInstrument(instrumentHeaderList);  return instrumentHeaderList;}  }
class C{  public static int unsignedShortToInt(byte[] buffer,int index){  int r=(buffer[index] & 0xFF) << 8;  r|=buffer[index + 1] & 0xFF;  return r;}  }
class C{  protected Set<TUConstraint> afToTuConstraints(Set<? extends AFConstraint> afConstraints,Set<TypeVariable> targets){  final Set<TUConstraint> outgoing=new LinkedHashSet<>();  for (  final AFConstraint afConstraint : afConstraints) {    if (!afConstraint.isIrreducible(targets)) {      ErrorReporter.errorAbort("All afConstraints should be irreducible before conversion.\n" + "afConstraints=[ " + PluginUtil.join(", ",afConstraints) + " ]\n"+ "targets=[ "+ PluginUtil.join(", ",targets)+ "]");    }    outgoing.add(afConstraint.toTUConstraint());  }  return outgoing;}  }
class C{  public static final float[][] multiply(final float[][] matrix1,final float[][] matrix2){  final float[][] output_matrix=new float[3][3];  for (int col=0; col < 3; col++) {    for (int row=0; row < 3; row++) {      output_matrix[row][col]=(matrix1[row][0] * matrix2[0][col]) + (matrix1[row][1] * matrix2[1][col]) + (matrix1[row][2] * matrix2[2][col]);    }  }  return output_matrix;}  }
class C{  public int readPacket(byte[] buffer) throws HexFileValidationException, IOException {  int i=0;  while (i < buffer.length) {    if (localPos < size) {      buffer[i++]=localBuf[localPos++];      continue;    }    bytesRead+=size=readLine();    if (size == 0)     break;  }  return i;}  }
class C{  protected ST(){  if (STGroup.trackCreationEvents) {    if (debugState == null)     debugState=new ST.DebugState();    debugState.newSTEvent=new ConstructionEvent();  }}  }
class C{  public final void checkAssert(final Consumer<T> property){  check(null);}  }
class C{  private ReplDBMSEvent generateReplDBMSEvent(OneRowChange oneRowChange){  long seqno=1;  RowChangeData rowChangeData=new RowChangeData();  rowChangeData.appendOneRowChange(oneRowChange);  ArrayList<DBMSData> data=new ArrayList<DBMSData>();  data.add(rowChangeData);  DBMSEvent dbmsEvent=new DBMSEvent(new Long(seqno).toString(),null,data,true,new Timestamp(System.currentTimeMillis()));  return new ReplDBMSEvent(seqno,dbmsEvent);}  }
class C{  public double computeAverageLocal(int states[][][],int sourceRowIndex,int sourceColumnIndex,int destRowIndex,int destColumnIndex){  initialise();  addObservations(states,sourceRowIndex,sourceColumnIndex,destRowIndex,destColumnIndex);  return computeAverageLocalOfObservations();}  }
class C{  public static String americanize(String str){  return americanize(str,staticCapitalizeTimex);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static byte[] readData(File input) throws IOException {  try (InputStream is=new FileInputStream(input)){    return readData(is);  } }  }
class C{  public boolean removeFooterView(View v){  if (mFooterViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeFooter(v)) {      result=true;    }    removeFixedViewInfo(v,mFooterViewInfos);    return result;  }  return false;}  }
class C{  public void print(java.io.PrintWriter out){  new Printer(this,out).print();}  }
class C{  public String[] toShellCommand(){  return ShellFactory.getShell().createShellCommand(this);}  }
class C{  public static double distanceLineLine(Coordinate A,Coordinate B,Coordinate C,Coordinate D){  if (A.equals(B))   return distancePointLine(A,C,D);  if (C.equals(D))   return distancePointLine(D,A,B);  double r_top=(A.y - C.y) * (D.x - C.x) - (A.x - C.x) * (D.y - C.y);  double r_bot=(B.x - A.x) * (D.y - C.y) - (B.y - A.y) * (D.x - C.x);  double s_top=(A.y - C.y) * (B.x - A.x) - (A.x - C.x) * (B.y - A.y);  double s_bot=(B.x - A.x) * (D.y - C.y) - (B.y - A.y) * (D.x - C.x);  if ((r_bot == 0) || (s_bot == 0)) {    return Math.min(distancePointLine(A,C,D),Math.min(distancePointLine(B,C,D),Math.min(distancePointLine(C,A,B),distancePointLine(D,A,B))));  }  double s=s_top / s_bot;  double r=r_top / r_bot;  if ((r < 0) || (r > 1) || (s < 0)|| (s > 1)) {    return Math.min(distancePointLine(A,C,D),Math.min(distancePointLine(B,C,D),Math.min(distancePointLine(C,A,B),distancePointLine(D,A,B))));  }  return 0.0;}  }
class C{  @RabbitListener(queues="${hawkbit.dmf.rabbitmq.receiverQueue}",containerFactory="listenerContainerFactory") public Message onMessage(final Message message,@Header(MessageHeaderKey.TYPE) final String type,@Header(MessageHeaderKey.TENANT) final String tenant){  return onMessage(message,type,tenant,getRabbitTemplate().getConnectionFactory().getVirtualHost());}  }
class C{  public void restoreAutoDomainBounds(){  Plot plot=this.chart.getPlot();  if (plot instanceof Zoomable) {    Zoomable z=(Zoomable)plot;    boolean savedNotify=plot.isNotify();    plot.setNotify(false);    Point2D zp=(this.zoomPoint != null ? this.zoomPoint : new Point());    z.zoomDomainAxes(0.0,this.info.getPlotInfo(),zp);    plot.setNotify(savedNotify);  }}  }
class C{  public void updateArc(float latPoint,float lonPoint,int offset_x1,int offset_y1,int w,int h,float s,float e,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkArc.write(latPoint,lonPoint,offset_x1,offset_y1,w,h,s,e,properties,link.dos);}  }
class C{  public void onIceCandidates(Collection<LocalCandidate> iceCandidates){  if (iceCandidates != null)   candidateCounter++;  Collection<Attribute> update=IceSdpUtils.createTrickleUpdate(iceCandidates);  for (  Attribute attribute : update) {    logger.info(attribute.toString().trim());  }  if (iceCandidates == null) {    try {      Thread.sleep(1000);    } catch (    Exception e) {    }    logger.info("ICE stats: time=" + agent.getTotalHarvestingTime() + "ms");    for (    CandidateHarvester harvester : agent.getHarvesters()) {      logger.info(harvester.getHarvestStatistics().toString().trim());    }  }}  }
class C{  public JSONArray optJSONArray(int index){  Object o=opt(index);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  private boolean isN4JSProject(IProject project){  URI uri=URI.createPlatformResourceURI(project.getName(),true);  IN4JSProject n4Project=n4jsCore.findProject(uri).orNull();  return null != n4Project && n4Project.exists();}  }
class C{  public LoginException(){}  }
class C{  protected void onSuccessfulAppCall(String appCallId,String action,Bundle extras){}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:52.660 -0500",hash_original_method="55A3B9E950023A6988A6B5C4DCBDEA6C",hash_generated_method="FCA9220C59ACC5602EBC8A8A450E14DD") private void handleSetSelectNetwork(AsyncResult ar){  if (!(ar.userObj instanceof NetworkSelectMessage)) {    if (DBG)     Log.d(LOG_TAG,"unexpected result from user object.");    return;  }  NetworkSelectMessage nsm=(NetworkSelectMessage)ar.userObj;  if (nsm.message != null) {    if (DBG)     Log.d(LOG_TAG,"sending original message to recipient");    AsyncResult.forMessage(nsm.message,ar.result,ar.exception);    nsm.message.sendToTarget();  }  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(getContext());  SharedPreferences.Editor editor=sp.edit();  editor.putString(NETWORK_SELECTION_KEY,nsm.operatorNumeric);  editor.putString(NETWORK_SELECTION_NAME_KEY,nsm.operatorAlphaLong);  if (!editor.commit()) {    Log.e(LOG_TAG,"failed to commit network selection preference");  }}  }
class C{  public ModbusTCPMaster(String addr,int port,int timeout,boolean reconnect){  super();  try {    InetAddress slaveAddress=InetAddress.getByName(addr);    connection=new TCPMasterConnection(slaveAddress);    connection.setPort(port);    connection.setTimeout(timeout);    this.timeout=timeout;    setReconnecting(reconnect);  } catch (  UnknownHostException e) {    throw new RuntimeException("Failed to contruct ModbusTCPMaster instance.",e);  }}  }
class C{  public void close(){  SocketPool loadBalancePool=_loadBalanceSocketPool.get();  if (loadBalancePool != null)   loadBalancePool.getFactory().close();  SocketPool clusterPool=_clusterSocketPool.get();  if (clusterPool != null)   clusterPool.getFactory().close();}  }
class C{  private static void writeFullyImpl(WritableByteChannel ch,ByteBuffer bb) throws IOException {  while (bb.remaining() > 0) {    int n=ch.write(bb);    if (n <= 0)     throw new RuntimeException("no bytes written");  }}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  public static double maxNormWithAbort(double[] x1,double[] x2,double limit){  double distance=0.0;  for (int d=0; d < x1.length; d++) {    double difference=x1[d] - x2[d];    if (difference < 0) {      difference=-difference;    }    if (difference > distance) {      if (difference > limit) {        return Double.POSITIVE_INFINITY;      }      distance=difference;    }  }  return distance;}  }
class C{  public TestCertificate(){  super(TYPE);}  }
class C{  AVA(Reader in,Map<String,String> keywordMap) throws IOException {  this(in,DEFAULT,keywordMap);}  }
class C{  public void loadCellBlock(int c,ByteBuffer buf){  loadColumns(info.colBlocks[c],buf);}  }
class C{  @Override public void putAll(@NotNull Map<? extends K,? extends V> t){  for (  Entry<? extends K,? extends V> e : t.entrySet()) {    V value=e.getValue();    if (value != null) {      put(e.getKey(),value);    }  }}  }
class C{  private StreetRouter findBikeRentalPath(ProfileRequest request,StreetRouter streetRouter,boolean direct){  streetRouter.streetMode=StreetMode.WALK;  streetRouter.timeLimitSeconds=request.maxWalkTime * 60;  if (!direct) {    streetRouter.dominanceVariable=StreetRouter.State.RoutingVariable.DURATION_SECONDS;  }  streetRouter.flagSearch=VertexStore.VertexFlag.BIKE_SHARING;  if (streetRouter.setOrigin(request.fromLat,request.fromLon)) {    if (direct && !streetRouter.setDestination(request.toLat,request.toLon)) {      return null;    }    Split destinationSplit=streetRouter.getDestinationSplit();    streetRouter.setDestination(null);    streetRouter.route();    TIntObjectMap<StreetRouter.State> bikeStations=streetRouter.getReachedVertices(VertexStore.VertexFlag.BIKE_SHARING);    LOG.info("BIKE RENT: Found {} bike stations which are {} minutes away",bikeStations.size(),streetRouter.timeLimitSeconds / 60);    StreetRouter bicycle=new StreetRouter(transportNetwork.streetLayer);    bicycle.previousRouter=streetRouter;    bicycle.streetMode=StreetMode.BICYCLE;    bicycle.profileRequest=request;    bicycle.flagSearch=streetRouter.flagSearch;    bicycle.maxVertices=Integer.MAX_VALUE;    if (direct) {      bicycle.timeLimitSeconds=request.streetTime * 60;    } else {      bicycle.timeLimitSeconds=request.maxBikeTime * 60;      bicycle.dominanceVariable=StreetRouter.State.RoutingVariable.DURATION_SECONDS;    }    bicycle.setOrigin(bikeStations,BIKE_RENTAL_PICKUP_TIME_S,BIKE_RENTAL_PICKUP_COST,LegMode.BICYCLE_RENT);    bicycle.setDestination(destinationSplit);    bicycle.route();    TIntObjectMap<StreetRouter.State> cycledStations=bicycle.getReachedVertices(VertexStore.VertexFlag.BIKE_SHARING);    LOG.info("BIKE RENT: Found {} cycled stations which are {} minutes away",cycledStations.size(),bicycle.timeLimitSeconds / 60);    StreetRouter end=new StreetRouter(transportNetwork.streetLayer);    end.streetMode=StreetMode.WALK;    end.profileRequest=request;    end.timeLimitSeconds=bicycle.timeLimitSeconds;    if (!direct) {      end.transitStopSearch=true;      end.dominanceVariable=StreetRouter.State.RoutingVariable.DURATION_SECONDS;    }    end.setOrigin(cycledStations,BIKE_RENTAL_DROPOFF_TIME_S,BIKE_RENTAL_DROPOFF_COST,LegMode.BICYCLE_RENT);    end.route();    end.previousRouter=bicycle;    return end;  } else {    return null;  }}  }
class C{  @Override public void onAction(final Player player,final RPAction action){  if (player.hasPath()) {    player.clearPath();  }  if (player.has(PATHSET)) {    player.remove(PATHSET);  }  final double currentSpeed=player.getSpeed();  final double newSpeed=player.getBaseSpeed();  final Direction walkDirection=player.getDirection();  final String mode=action.get(MODE);  if (mode != null && mode.equals("stop")) {    if (!player.stopped()) {      if (player.has(AUTOWALK)) {        player.remove(AUTOWALK);      }      player.stop();      return;    } else {      return;    }  }  if (player.stopped()) {    if ((walkDirection == Direction.STOP) || (walkDirection == null)) {      player.setDirection(Direction.DOWN);    }    if (player.hasStatus(StatusType.POISONED) || player.hasStatus(StatusType.CONFUSED)) {      player.setDirection(player.getDirection().oppositeDirection());    }    if (newSpeed != currentSpeed) {      if (!player.has(AUTOWALK)) {        player.put(AUTOWALK,"");      }      player.setSpeed(newSpeed);    }  } else {    if (player.has(AUTOWALK)) {      player.remove(AUTOWALK);    }    player.stop();  }}  }
class C{  public boolean isMenuRegistrations(){  Object oo=get_Value(COLUMNNAME_IsMenuRegistrations);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected Pair<PropositionSymbol,Boolean> findPureSymbol(List<PropositionSymbol> symbols,Set<Clause> clauses,Model model){  Pair<PropositionSymbol,Boolean> result=null;  Set<PropositionSymbol> symbolsToKeep=new HashSet<PropositionSymbol>(symbols);  Set<PropositionSymbol> candidatePurePositiveSymbols=new HashSet<PropositionSymbol>();  Set<PropositionSymbol> candidatePureNegativeSymbols=new HashSet<PropositionSymbol>();  for (  Clause c : clauses) {    if (Boolean.TRUE.equals(model.determineValue(c))) {      continue;    }    for (    PropositionSymbol p : c.getPositiveSymbols()) {      if (symbolsToKeep.contains(p)) {        candidatePurePositiveSymbols.add(p);      }    }    for (    PropositionSymbol n : c.getNegativeSymbols()) {      if (symbolsToKeep.contains(n)) {        candidatePureNegativeSymbols.add(n);      }    }  }  for (  PropositionSymbol s : symbolsToKeep) {    if (candidatePurePositiveSymbols.contains(s) && candidatePureNegativeSymbols.contains(s)) {      candidatePurePositiveSymbols.remove(s);      candidatePureNegativeSymbols.remove(s);    }  }  if (candidatePurePositiveSymbols.size() > 0) {    result=new Pair<PropositionSymbol,Boolean>(candidatePurePositiveSymbols.iterator().next(),true);  } else   if (candidatePureNegativeSymbols.size() > 0) {    result=new Pair<PropositionSymbol,Boolean>(candidatePureNegativeSymbols.iterator().next(),false);  }  return result;}  }
class C{  public TableHeaderRendererPainter(Which state){  super();  this.ctx=new PaintContext(CacheMode.FIXED_SIZES);  this.type=getButtonType(state);  this.isSorted=(state == Which.BACKGROUND_DISABLED_SORTED || state == Which.BACKGROUND_ENABLED_SORTED || state == Which.BACKGROUND_ENABLED_FOCUSED_SORTED);}  }
class C{  protected String compute(Date dateDate,String sizeString,String formatString,String localeString){  if (dateDate == null || sizeString == null || formatString == null || localeString == null) {    return null;  }  String result;  DateFormat dateFormat;  Locale locale=new Locale(localeString);  int formatting;  if (sizeString.equals(ExpressionParserConstants.DATE_FORMAT_FULL)) {    formatting=DateFormat.FULL;  } else   if (sizeString.equals(ExpressionParserConstants.DATE_FORMAT_LONG)) {    formatting=DateFormat.LONG;  } else   if (sizeString.equals(ExpressionParserConstants.DATE_FORMAT_MEDIUM)) {    formatting=DateFormat.MEDIUM;  } else   if (sizeString.equals(ExpressionParserConstants.DATE_FORMAT_SHORT)) {    formatting=DateFormat.SHORT;  } else {    throw new FunctionInputException("invalid_argument.date_size",getFunctionName());  }  if (formatString.equals(ExpressionParserConstants.DATE_SHOW_DATE_ONLY)) {    dateFormat=(DateFormat)DateFormat.getDateInstance(formatting,locale).clone();  } else   if (formatString.equals(ExpressionParserConstants.DATE_SHOW_TIME_ONLY)) {    dateFormat=(DateFormat)DateFormat.getTimeInstance(formatting,locale).clone();  } else   if (formatString.equals(ExpressionParserConstants.DATE_SHOW_DATE_AND_TIME)) {    dateFormat=(DateFormat)DateFormat.getDateTimeInstance(formatting,formatting,locale).clone();  } else {    throw new FunctionInputException("invalid_argument.date_format",getFunctionName());  }  result=dateFormat.format(dateDate);  return result;}  }
class C{  public void testBasics() throws IOException {  Analyzer a=new EnglishAnalyzer();  checkOneTerm(a,"books","book");  checkOneTerm(a,"book","book");  assertAnalyzesTo(a,"the",new String[]{});  checkOneTerm(a,"steven's","steven");  checkOneTerm(a,"steven\u2019s","steven");  checkOneTerm(a,"steven\uFF07s","steven");  a.close();}  }
class C{  @RequestMapping(method=RequestMethod.GET,produces={MediaType.APPLICATION_JSON_UTF8_VALUE}) @ApiOperation(value="list all parametrized queries",notes="List all parametrized queries by id/name",response=void.class) @ApiResponses({@ApiResponse(code=200,message="OK."),@ApiResponse(code=401,message="Invalid Username or Password."),@ApiResponse(code=403,message="Insufficient privileges for operation."),@ApiResponse(code=500,message="if GemFire throws an error or exception")}) @ResponseBody @ResponseStatus(HttpStatus.OK) @PreAuthorize("@securityService.authorize('DATA', 'READ')") public ResponseEntity<?> list(){  logger.debug("Listing all parametrized Queries in GemFire...");  final Region<String,String> parametrizedQueryRegion=getQueryStore(PARAMETERIZED_QUERIES_REGION);  String queryListAsJson=JSONUtils.formulateJsonForListQueriesCall(parametrizedQueryRegion);  final HttpHeaders headers=new HttpHeaders();  headers.setLocation(toUri("queries"));  return new ResponseEntity<String>(queryListAsJson,headers,HttpStatus.OK);}  }
class C{  public String map(String typeName){  return typeName;}  }
class C{  private static VirtualArrayAssignmentChanges addVirtualArray(VirtualArrayRestRep virtualArray){  VirtualArrayAssignmentChanges changes=new VirtualArrayAssignmentChanges();  changes.setAdd(new VirtualArrayAssignments(Sets.newHashSet(stringId(virtualArray))));  return changes;}  }
class C{  public void testParseFloatTrailingNoise(){  testParseFloat("7890","789e1");  testParseFloat("7890","789E1");  testParseFloat("7890","789E+1");  testParseFloat("7890","789E+1e");  testParseFloat("789","7890E-1");  testParseFloat("789","7890E-1e");  testParseFloat("789","789hello");  testParseFloat("789","789e");  testParseFloat("789","789E");  testParseFloat("789","789e+");  testParseFloat("789","789Efgh");  testParseFloat("789","789efgh");  testParseFloat("789","789e-");  testParseFloat("789","789e-hello");  testParseFloat("789","789e+hello");  testParseFloat("789","789+++hello");  testParseFloat("789","789-e-+hello");  testParseFloat("789","789e+e++hello");  testParseFloat("789","789e-e++hello");}  }
class C{  protected void append_multipart(String name){  String dot="";  if (multipart_name.length() != 0)   dot=".";  multipart_name=multipart_name.concat(dot + name);}  }
class C{  public static void copyPropertiesIgnoreNull(Object src,Object target){  org.springframework.beans.BeanUtils.copyProperties(src,target,getNamesOfNullProperties(src));}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    if (!useOneShotPreviewCallback) {      camera.setPreviewCallback(null);    }    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  private void handleStopMessage(){  if (!checkOpenConnection()) {    return;  }  try {    mService.stopListening(mListener);    if (DBG)     Log.d(TAG,"service stop listening command succeded");  } catch (  final RemoteException e) {    Log.e(TAG,"stopListening() failed",e);    mListener.onError(ERROR_CLIENT);  }}  }
class C{  @Override public String toString(){  short[] array=this.getArray();  return Arrays.toString(array);}  }
class C{  public void assertEquals(final String sessionId,final Iterable<String> expectedEvents){  assertNotNull("Queue was not initialized. One should call #init(int) before invoking #assertEquals()",latch);  try {    latch.await(20L,SECONDS);    unregisterSupplier.get();  } catch (  final InterruptedException e) {    throw new AssertionError("Time outed while waiting to receive all expected test events.",e);  }  final Collection<String> eventsForSession=events.get(sessionId);  if (size(expectedEvents) != eventsForSession.size()) {    throw new ComparisonFailure("Expected:",toString(expectedEvents),toString(eventsForSession));  }  final Iterator<String> actItr=eventsForSession.iterator();  final Iterator<String> expItr=expectedEvents.iterator();  while (expItr.hasNext()) {    if (!actItr.hasNext()) {      throw new ComparisonFailure("Expected:",toString(expectedEvents),toString(eventsForSession));    }    final String expected=expItr.next();    final String actual=actItr.next();    if (null == expected || null == actual) {      if (expected != actual) {        throw new ComparisonFailure("Expected:",toString(expectedEvents),toString(eventsForSession));      }    } else {      if (!expected.equals(actual)) {        throw new ComparisonFailure("Expected:",toString(expectedEvents),toString(eventsForSession));      }    }    Assert.assertEquals(expected,actual);  }}  }
class C{  public String parseUserSelectedModuleName(Element element){  return element.getText();}  }
class C{  public static double logBinCoeff(int n,int k){  if (k > n)   throw new IllegalArgumentException("Cannot compute (" + n + " choose "+ k+ " )"); else   if (k == 0 || k == n)   return Math.log(1);  double r=0.0;  for (int d=1; d <= k; d++)   r+=Math.log(n - (k - d)) - Math.log(d);  return r;}  }
class C{  private StringBuilder appendIfNotNull(StringBuilder source,String addStr,String delimiter){  if (addStr != null) {    if (addStr.length() == 0) {      delimiter="";    }    return source.append(addStr).append(delimiter);  }  return source;}  }
class C{  public TomcatManager(URL url,String username,String password){  this(url,username,password,"ISO-8859-1");}  }
class C{  private void writeHeader(OutputStream docOS) throws IOException {  IOUtils.write("#FORMAT=WebAnno TSV 3" + LF,docOS,encoding);  for (  String type : featurePerLayer.keySet()) {    String annoType;    if (spanLayers.contains(type)) {      annoType=SP;    } else     if (relationLayers.contains(type)) {      annoType=RL;    } else {      annoType=CH;    }    IOUtils.write("#" + annoType + "="+ type+ "|",docOS,encoding);    StringBuffer fsb=new StringBuffer();    for (    String feature : featurePerLayer.get(type)) {      if (fsb.length() < 1) {        fsb.append(feature);      } else {        fsb.append("|" + feature);      }    }    IOUtils.write(fsb.toString() + LF,docOS,encoding);  }  IOUtils.write(LF,docOS,encoding);}  }
class C{  public String toDelimitedString(char delimiter){  StringBuilder sb=new StringBuilder();  for (  Map.Entry<String,String> entry : settings.entrySet()) {    sb.append(entry.getKey()).append("=").append(entry.getValue()).append(delimiter);  }  return sb.toString();}  }
class C{  private long pop2(){  long type=pop();  if (TypeInfo.isTwoWords((int)type)) {    return type;  } else {    return type << 32 | (pop() & 0xFFFFFF);  }}  }
class C{  public static ServiceId create(ClientId client,String serviceCode){  return create(client.getXRoadInstance(),client.getMemberClass(),client.getMemberCode(),client.getSubsystemCode(),serviceCode);}  }
class C{  public static Spacing createDependentLFSpacing(int minSpaces,int maxSpaces,@NotNull TextRange dependencyRange,boolean keepLineBreaks,int keepBlankLines,@NotNull DependentSpacingRule rule){  return myFactory.createDependentLFSpacing(minSpaces,maxSpaces,dependencyRange,keepLineBreaks,keepBlankLines,rule);}  }
class C{  public static InfoField parseInfoLine(String line){  return new InfoField(line);}  }
class C{  public AudioWife addOnPlayClickListener(View.OnClickListener listener){  mPlayListeners.add(listener);  return this;}  }
class C{  private boolean absListViewCanScrollList(AbsListView absListView,int direction){  final int childCount=absListView.getChildCount();  if (childCount == 0) {    return false;  }  final int firstPosition=absListView.getFirstVisiblePosition();  if (direction > 0) {    final int lastBottom=absListView.getChildAt(childCount - 1).getBottom();    final int lastPosition=firstPosition + childCount;    return lastPosition < absListView.getCount() || lastBottom > absListView.getHeight() - absListView.getPaddingTop();  } else {    final int firstTop=absListView.getChildAt(0).getTop();    return firstPosition > 0 || firstTop < absListView.getPaddingTop();  }}  }
class C{  public void testAddEjbReferenceDescriptionWhenOtherDescriptionsExists() throws Exception {  String xml="<weblogic-web-app>" + "  <reference-descriptor>" + "    <resource-description/>"+ "    <resource-env-description/>"+ "  </reference-descriptor>"+ "</weblogic-web-app>";  WeblogicXml descr=WeblogicXmlIo.parseWeblogicXml(new ByteArrayInputStream(xml.getBytes("UTF-8")));  EjbRef ref=new EjbRef();  ref.setName("foo");  ref.setJndiName("fee");  descr.addEjbReference(ref);  List<Element> nl=descr.getDocument().getRootElement().getChildren(WeblogicXmlTag.REFERENCE_DESCRIPTOR);  Element n=nl.get(0);  assertEquals("reference-descriptor",n.getName());  List<Element> elements=getAllElements(n);  n=elements.get(0);  assertEquals("resource-description",n.getName());  n=elements.get(1);  assertEquals("resource-env-description",n.getName());  n=elements.get(2);  assertEquals("ejb-reference-description",n.getName());}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  if (pass == 0) {    drawItemPass0(g2,dataArea,info,plot,domainAxis,rangeAxis,dataset,series,item,crosshairState);  } else   if (pass == 1) {    drawItemPass1(g2,dataArea,info,plot,domainAxis,rangeAxis,dataset,series,item,crosshairState);  }}  }
class C{  public static IJavaSearchScope createStrictHierarchyScope(IJavaProject project,IType type,boolean onlySubtypes,boolean includeFocusType,WorkingCopyOwner owner) throws JavaModelException {  return BasicSearchEngine.createStrictHierarchyScope(project,type,onlySubtypes,includeFocusType,owner);}  }
class C{  public CachedImageHandlerBase64Encoder(){  super();  setImageCacher(new ImageCacher.Embedded());}  }
class C{  public static void generatePush(final ITranslationEnvironment environment,final long offset,final String value,final OperandSize size,final List<ReilInstruction> instructions) throws IllegalArgumentException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(value,"Error: Argument value can't be null");  Preconditions.checkNotNull(size,"Error: Argument size can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  final OperandSize archSize=environment.getArchitectureSize();  final OperandSize nextSize=TranslationHelpers.getNextSize(archSize);  final String addResult=environment.getNextVariableString();  final String mask=String.valueOf(TranslationHelpers.getAllBitsMask(archSize));  final String subtractionValue=String.valueOf(size.getByteSize());  instructions.add(ReilHelpers.createSub(offset,archSize,"esp",archSize,subtractionValue,nextSize,addResult));  instructions.add(ReilHelpers.createAnd(offset + 1,nextSize,addResult,archSize,mask,archSize,"esp"));  instructions.add(ReilHelpers.createStm(offset + 2,size,value,archSize,"esp"));}  }
class C{  public WrappedByteBuffer limit(int limit){  _autoExpandAt(limit,0);  _buf.limit(limit);  return this;}  }
class C{  @Override public boolean contains(Value subvalue){  return set.contains(subvalue);}  }
class C{  public void visitEnd(){  if (fv != null) {    fv.visitEnd();  }}  }
class C{  static LogFile openExistingFileForRead(String name) throws Exception {  File logfile=new File(name);  LogFile tf=new LogFile(logfile);  tf.openRead();  return tf;}  }
class C{  public void add(byte element){  if (size == elements.length) {    ensureCapacity(size + 1);  }  elements[size++]=element;}  }
class C{  private Lop constructLopsMRCumulativeUnary() throws HopsException, LopsException {  Hop input=getInput().get(0);  long rlen=input.getDim1();  long clen=input.getDim2();  long brlen=input.getRowsInBlock();  long bclen=input.getColsInBlock();  boolean force=!dimsKnown() || _etypeForced == ExecType.MR;  OperationTypes aggtype=getCumulativeAggType();  Lop X=input.constructLops();  Lop TEMP=X;  ArrayList<Lop> DATA=new ArrayList<Lop>();  int level=0;  while (((2 * OptimizerUtils.estimateSize(TEMP.getOutputParameters().getNumRows(),clen) + OptimizerUtils.estimateSize(1,clen)) > OptimizerUtils.getLocalMemBudget() && TEMP.getOutputParameters().getNumRows() > 1) || force) {    DATA.add(TEMP);    long rlenAgg=(long)Math.ceil((double)TEMP.getOutputParameters().getNumRows() / brlen);    Lop preagg=new CumulativePartialAggregate(TEMP,DataType.MATRIX,ValueType.DOUBLE,aggtype,ExecType.MR);    preagg.getOutputParameters().setDimensions(rlenAgg,clen,brlen,bclen,-1);    setLineNumbers(preagg);    Group group=new Group(preagg,Group.OperationTypes.Sort,DataType.MATRIX,ValueType.DOUBLE);    group.getOutputParameters().setDimensions(rlenAgg,clen,brlen,bclen,-1);    setLineNumbers(group);    Aggregate agg=new Aggregate(group,HopsAgg2Lops.get(AggOp.SUM),getDataType(),getValueType(),ExecType.MR);    agg.getOutputParameters().setDimensions(rlenAgg,clen,brlen,bclen,-1);    agg.setupCorrectionLocation(CorrectionLocationType.NONE);    setLineNumbers(agg);    TEMP=agg;    level++;    force=false;  }  if (TEMP.getOutputParameters().getNumRows() != 1) {    int k=OptimizerUtils.getConstrainedNumThreads(_maxNumThreads);    Unary unary1=new Unary(TEMP,HopsOpOp1LopsU.get(_op),DataType.MATRIX,ValueType.DOUBLE,ExecType.CP,k);    unary1.getOutputParameters().setDimensions(TEMP.getOutputParameters().getNumRows(),clen,brlen,bclen,-1);    setLineNumbers(unary1);    TEMP=unary1;  }  while (level-- > 0) {    double init=getCumulativeInitValue();    CumulativeSplitAggregate split=new CumulativeSplitAggregate(TEMP,DataType.MATRIX,ValueType.DOUBLE,init);    split.getOutputParameters().setDimensions(rlen,clen,brlen,bclen,-1);    setLineNumbers(split);    Group group1=new Group(DATA.get(level),Group.OperationTypes.Sort,DataType.MATRIX,ValueType.DOUBLE);    group1.getOutputParameters().setDimensions(rlen,clen,brlen,bclen,-1);    setLineNumbers(group1);    Group group2=new Group(split,Group.OperationTypes.Sort,DataType.MATRIX,ValueType.DOUBLE);    group2.getOutputParameters().setDimensions(rlen,clen,brlen,bclen,-1);    setLineNumbers(group2);    CumulativeOffsetBinary binary=new CumulativeOffsetBinary(group1,group2,DataType.MATRIX,ValueType.DOUBLE,aggtype,ExecType.MR);    binary.getOutputParameters().setDimensions(rlen,clen,brlen,bclen,-1);    setLineNumbers(binary);    TEMP=binary;  }  return TEMP;}  }
class C{  public double ymin(){  return ymin;}  }
class C{  public Dimension dimension(){  return dimension;}  }
class C{  public double groupDelay(double omega){  if (order == 0)   return 0; else {    Complex c=new Complex(0.0,omega);    Complex N=derivative().evaluate(c);    Complex D=evaluate(c);    return -(N.over(D)).real();  }}  }
class C{  public void readExif(String inFileName) throws FileNotFoundException, IOException {  if (inFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  InputStream is=null;  is=new BufferedInputStream(new FileInputStream(inFileName));  readExif(is);  is.close();}  }
class C{  @Override protected void decorateCGInfoInVolumes(BlockConsistencyGroup vplexCG,BlockObject volume,IngestionRequestContext requestContext,UnManagedVolume unManagedVolume){  updateCG(vplexCG,volume,requestContext.getStorageSystem(),unManagedVolume);  StringSet vplexBackendVolumes=PropertySetterUtil.extractValuesFromStringSet(SupportedVolumeInformation.VPLEX_BACKEND_VOLUMES.toString(),unManagedVolume.getVolumeInformation());  if (null != vplexBackendVolumes && !vplexBackendVolumes.isEmpty()) {    Set<DataObject> toUpdateSet=new HashSet<DataObject>();    for (    String vplexBackendUmvNativeGuid : vplexBackendVolumes) {      String backendVolumeNativeGuid=vplexBackendUmvNativeGuid.replace(VolumeIngestionUtil.UNMANAGEDVOLUME,VolumeIngestionUtil.VOLUME);      BlockObject blockObject=requestContext.getRootIngestionRequestContext().findCreatedBlockObject(backendVolumeNativeGuid);      if (blockObject == null) {        blockObject=(BlockObject)requestContext.findInUpdatedObjects(URI.create(backendVolumeNativeGuid));      }      if (blockObject == null) {        blockObject=VolumeIngestionUtil.getBlockObject(backendVolumeNativeGuid,_dbClient);        if (null == blockObject) {          _logger.warn("Unmanaged Volume {} is not yet ingested. Hence skipping",vplexBackendUmvNativeGuid);          continue;        }        toUpdateSet.add(blockObject);      }      blockObject.setConsistencyGroup(vplexCG.getId());    }    if (!toUpdateSet.isEmpty()) {      ((VplexVolumeIngestionContext)requestContext.getVolumeContext()).getDataObjectsToBeUpdatedMap().put(unManagedVolume.getNativeGuid(),toUpdateSet);    }  }  volume.setConsistencyGroup(vplexCG.getId());  volume.setReplicationGroupInstance(vplexCG.getLabel());}  }
class C{  private void bindEntityId(Class<?> cls,String type,AccessibleObject fieldOrMethod){  String fieldName=getFieldName(fieldOrMethod);  Class<?> fieldType=getFieldType(fieldOrMethod);  fieldsToTypes.put(fieldName,fieldType);  idField=fieldOrMethod;  idType=fieldType;  idFieldName=fieldName;  fieldsToValues.put(fieldName,fieldOrMethod);  if (idField != null && !fieldOrMethod.equals(idField)) {    throw new DuplicateMappingException(type + " " + cls.getName()+ ":"+ fieldName);  }}  }
class C{  public void executeCommand(Notification note){  Class<? extends Command> commandClass=commandMap.get(note.getName());  if (commandClass != null) {    Command command;    try {      command=commandClass.newInstance();      command.execute(note);    } catch (    InstantiationException|IllegalAccessException e) {      e.printStackTrace();    }  }}  }
class C{  private static boolean checkOffset(String value,int offset,char expected){  return (offset < value.length()) && (value.charAt(offset) == expected);}  }
class C{  private void procFunctions5_12(int currCabId,int c){  if ((c & NceCmdStationMemory.FUNC_H_F5) != 0) {    cabData[currCabId].F5=true;  } else {    cabData[currCabId].F5=false;  }  if ((c & NceCmdStationMemory.FUNC_H_F6) != 0) {    cabData[currCabId].F6=true;  } else {    cabData[currCabId].F6=false;  }  if ((c & NceCmdStationMemory.FUNC_H_F7) != 0) {    cabData[currCabId].F7=true;  } else {    cabData[currCabId].F7=false;  }  if ((c & NceCmdStationMemory.FUNC_H_F8) != 0) {    cabData[currCabId].F8=true;  } else {    cabData[currCabId].F8=false;  }  if ((c & NceCmdStationMemory.FUNC_H_F9) != 0) {    cabData[currCabId].F9=true;  } else {    cabData[currCabId].F9=false;  }  if ((c & NceCmdStationMemory.FUNC_H_F10) != 0) {    cabData[currCabId].F10=true;  } else {    cabData[currCabId].F10=false;  }  if ((c & NceCmdStationMemory.FUNC_H_F11) != 0) {    cabData[currCabId].F11=true;  } else {    cabData[currCabId].F11=false;  }  if ((c & NceCmdStationMemory.FUNC_H_F12) != 0) {    cabData[currCabId].F12=true;  } else {    cabData[currCabId].F12=false;  }}  }
class C{  public ProjectTodoIdObject(){  super();}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public int findLastCompletelyVisibleItemPosition(){  final View child=findOneVisibleChild(layoutManager.getChildCount() - 1,-1,true,false);  return child == null ? NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  public Chest(final RPObject object){  super(object);  setRPClass(CHEST_RPCLASS_NAME);  put("type",CHEST_RPCLASS_NAME);  if (!hasSlot("content")) {    final RPSlot slot=new ChestSlot(this);    addSlot(slot);  }  update();}  }
class C{  public static void openAppDetail(Context context,String packageName){  Intent intent=new Intent();  final int apiLevel=Build.VERSION.SDK_INT;  if (apiLevel >= 9) {    intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);    Uri uri=Uri.fromParts(SCHEME,packageName,null);    intent.setData(uri);  } else {    final String appPkgName=(apiLevel == 8 ? APP_PKG_NAME_22 : APP_PKG_NAME_21);    intent.setAction(Intent.ACTION_VIEW);    intent.setClassName(APP_DETAILS_PACKAGE_NAME,APP_DETAILS_CLASS_NAME);    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    intent.putExtra(appPkgName,packageName);  }  context.startActivity(intent);}  }
class C{  public boolean matches(RegisterSpec otherSpec){  return spec.equalsUsingSimpleType(otherSpec);}  }
class C{  public void onClientRegistered(int status,int clientIf){  if (DBG)   Log.d(TAG,"onClientRegistered() - status=" + status + " clientIf="+ clientIf);  if (VDBG) {synchronized (mStateLock) {      if (mConnState != CONN_STATE_CONNECTING) {        Log.e(TAG,"Bad connection state: " + mConnState);      }    }  }  mClientIf=clientIf;  if (status != GATT_SUCCESS) {    mCallback.onConnectionStateChange(BluetoothGatt.this,GATT_FAILURE,BluetoothProfile.STATE_DISCONNECTED);synchronized (mStateLock) {      mConnState=CONN_STATE_IDLE;    }    return;  }  try {    mService.clientConnect(mClientIf,mDevice.getAddress(),!mAutoConnect);  } catch (  RemoteException e) {    Log.e(TAG,"",e);  }}  }
class C{  static private byte[] toBytes(Vector octs){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  for (int i=0; i != octs.size(); i++) {    try {      DEROctetString o=(DEROctetString)octs.elementAt(i);      bOut.write(o.getOctets());    } catch (    ClassCastException e) {      throw new IllegalArgumentException(octs.elementAt(i).getClass().getName() + " found in input should only contain DEROctetString");    }catch (    IOException e) {      throw new IllegalArgumentException("exception converting octets " + e.toString());    }  }  return bOut.toByteArray();}  }
class C{  public static IOTask<Void> deleteProfileTask(String profileName){  log.debug(null);  return FS.deleteDirectoryTask("./" + PROFILES_DIR + profileName);}  }
class C{  public Finished(byte[] masterSecret,boolean isClient,byte[] handshakeHash,InetSocketAddress peerAddress){  super(peerAddress);  verifyData=getVerifyData(masterSecret,isClient,handshakeHash);}  }
class C{  protected EscapedCharacterClassAtomImpl(){  super();}  }
class C{  @CanIgnoreReturnValue public E removeLast(){  if (isEmpty()) {    throw new NoSuchElementException();  }  return removeAndGet(getMaxElementIndex());}  }
class C{  @Override public void remove(Activity oldOne){  super.remove(oldOne);  removeChangesOnActivity(oldOne);}  }
class C{  public synchronized void close(){  for (  StackInstance se : this.stacks.values()) {    se.stack.close();  }}  }
class C{  public void visit(String name,Object value){  if (av != null) {    av.visit(name,value);  }}  }
class C{  public SQLTimeoutException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  public boolean catchableAs(RefType catcher){  if (INSTRUMENTING) {    Manager.v().catchableAsQueries++;  }  FastHierarchy h=Scene.v().getOrMakeFastHierarchy();  if (exceptionsExcluded.size() > 0) {    if (INSTRUMENTING) {      Manager.v().catchableAsFromSearch++;    }    for (Iterator i=exceptionsExcluded.iterator(); i.hasNext(); ) {      AnySubType exclusion=(AnySubType)i.next();      if (h.canStoreType(catcher,exclusion.getBase())) {        return false;      }    }  }  if (exceptionsIncluded.contains(catcher)) {    if (INSTRUMENTING) {      if (exceptionsExcluded.size() == 0) {        Manager.v().catchableAsFromMap++;      } else {        Manager.v().catchableAsFromSearch++;      }    }    return true;  } else {    if (INSTRUMENTING) {      if (exceptionsExcluded.size() == 0) {        Manager.v().catchableAsFromSearch++;      }    }    for (Iterator i=exceptionsIncluded.iterator(); i.hasNext(); ) {      RefLikeType thrownType=(RefLikeType)i.next();      if (thrownType instanceof RefType) {        if (thrownType == catcher) {          throw new IllegalStateException("ThrowableSet.catchableAs(RefType): exceptions.contains() failed to match contained RefType " + catcher);        } else         if (h.canStoreType(thrownType,catcher)) {          return true;        }      } else {        RefType thrownBase=((AnySubType)thrownType).getBase();        if (h.canStoreType(thrownBase,catcher) || h.canStoreType(catcher,thrownBase)) {          return true;        }      }    }    return false;  }}  }
class C{  private static ArrayList<GridCollisionJobContextWrapper> slice(Collection<CollisionJobContext> src,int num){  ArrayList<GridCollisionJobContextWrapper> slice=new ArrayList<>();  Iterator<CollisionJobContext> iter=src.iterator();  for (int i=0; i < num && iter.hasNext(); i++)   slice.add(new GridCollisionJobContextWrapper(iter.next(),i));  return slice;}  }
class C{  private boolean test_float_1D(){  CUarray array=new CUarray();  CUDA_ARRAY_DESCRIPTOR ad=new CUDA_ARRAY_DESCRIPTOR();  ad.Format=CU_AD_FORMAT_FLOAT;  ad.Width=sizeX;  ad.Height=1;  ad.NumChannels=1;  cuArrayCreate(array,ad);  Pointer pInput=Pointer.to(input_float_1D);  cuMemcpyHtoA(array,0,pInput,sizeX * Sizeof.FLOAT);  CUtexref texref=new CUtexref();  cuModuleGetTexRef(texref,module,"texture_float_1D");  cuTexRefSetFilterMode(texref,CU_TR_FILTER_MODE_LINEAR);  cuTexRefSetAddressMode(texref,0,CU_TR_ADDRESS_MODE_CLAMP);  cuTexRefSetFlags(texref,CU_TRSF_NORMALIZED_COORDINATES);  cuTexRefSetFormat(texref,CU_AD_FORMAT_FLOAT,1);  cuTexRefSetArray(texref,array,CU_TRSA_OVERRIDE_FORMAT);  CUdeviceptr dOutput=new CUdeviceptr();  cuMemAlloc(dOutput,Sizeof.FLOAT * 1);  CUfunction function=new CUfunction();  cuModuleGetFunction(function,module,"test_float_1D");  Pointer kernelParameters=Pointer.to(Pointer.to(dOutput),Pointer.to(new float[]{posX}));  cuLaunchKernel(function,1,1,1,1,1,1,0,null,kernelParameters,null);  cuCtxSynchronize();  float hOutput[]=new float[1];  cuMemcpyDtoH(Pointer.to(hOutput),dOutput,Sizeof.FLOAT * 1);  log("Result float  1D " + Arrays.toString(hOutput));  float expected[]=new float[]{0.5f};  boolean passed=Arrays.equals(hOutput,expected);  log("Test   float  1D " + (passed ? "PASSED" : "FAILED"));  cuArrayDestroy(array);  cuMemFree(dOutput);  return passed;}  }
class C{  @Override public String toString(){  return distrib.toString();}  }
class C{  public static AffineTransform createAffineTransform(String s) throws ParseException {  TransformListParser p=new TransformListParser();  AWTTransformProducer th=new AWTTransformProducer();  p.setTransformListHandler(th);  p.parse(s);  return th.getAffineTransform();}  }
class C{  protected final void parseArgs(String[] args) throws AdeException {  final ArrayList<String> adeArgs=parseAdeExtArgs(args);  super.parseArgs(adeArgs.toArray(new String[adeArgs.size()]));}  }
class C{  public boolean matches(String seq){  return queue.regionMatches(true,pos,seq,0,seq.length());}  }
class C{  @Override public void onAction(final Player player,final RPAction action){  if (!action.has(BASEITEM) || !action.has(X) || !action.has(Y)) {    logger.error("Incomplete DisplaceAction: " + action);    return;  }  final int targetObject=action.getInt(BASEITEM);  int quantity=-1;  if (action.has("quantity")) {    quantity=action.getInt("quantity");  }  final StendhalRPZone zone=player.getZone();  final Entity object=EntityHelper.entityFromZoneByID(targetObject,zone);  if (!(object instanceof PassiveEntity)) {    return;  }  final int x=action.getInt(X);  final int y=action.getInt(Y);  if ((x == object.getX()) && (y == object.getY())) {    return;  }  final PassiveEntity entity=(PassiveEntity)object;  if (mayDisplace(player,zone,x,y,entity)) {    displace(player,zone,x,y,entity,quantity);  }}  }
class C{  @Override public void close(){}  }
class C{  private DistributionPointFetcher(){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  HalfPath(byte[] template){  mHaplotypeA=new HaplotypePlayback(template);  mHaplotypeB=mHaplotypeA.copy();}  }
class C{  public boolean scheduleOnce(double time,final int ordering,final Steppable event){synchronized (lock) {    return _scheduleOnce(new Key(time,ordering),event);  }}  }
class C{  @Override public void configure(ClientDetailsServiceConfigurer clients) throws Exception {  clients.withClientDetails(clientDetailsService());}  }
class C{  public void dispose(){}  }
class C{  public ArrayBasedSet(E[] A,Comparator<E> comparator){  this.comparator=comparator;  type=(Class<E>)A.getClass().getComponentType();  array=(E[])java.lang.reflect.Array.newInstance(type,A.length);  System.arraycopy(A,0,array,0,A.length);  size=A.length;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public synchronized int leftNodesCount(){  return leftNodesCnt;}  }
class C{  private String processSpecialCharacters(String s){  if (s == null) {    return null;  }  char[] charStr=s.toCharArray();  String specialStr="";  for (int i=0; i < charStr.length; i++) {    if (charStr[i] == '&') {      specialStr=specialStr.concat("&amp;");    } else     if (charStr[i] == '<') {      specialStr=specialStr.concat("&lt;");    } else     if (charStr[i] == '>') {      specialStr=specialStr.concat("&gt;");    } else     if (charStr[i] == '\'') {      specialStr=specialStr.concat("&apos;");    } else     if (charStr[i] == '\"') {      specialStr=specialStr.concat("&quot;");    } else {      specialStr=specialStr.concat(String.valueOf(charStr[i]));    }  }  s=specialStr;  return s;}  }
class C{  public static String format(final Iterable<? extends NameValuePair> parameters,final Charset charset){  final StringBuilder result=new StringBuilder();  for (  final NameValuePair parameter : parameters) {    final String encodedName=encodeFormFields(parameter.getName(),charset);    final String encodedValue=encodeFormFields(parameter.getValue(),charset);    if (result.length() > 0) {      result.append(PARAMETER_SEPARATOR);    }    result.append(encodedName);    if (encodedValue != null) {      result.append(NAME_VALUE_SEPARATOR);      result.append(encodedValue);    }  }  return result.toString();}  }
class C{  @Override public boolean removeEldestEntry(Map.Entry eldest){  boolean mustBeRemoved=this.size() > maxSize;  if (mustBeRemoved) {    ServerPrepareResult serverPrepareResult=((ServerPrepareResult)eldest.getValue());    serverPrepareResult.setRemoveFromCache();    if (serverPrepareResult.canBeDeallocate()) {      try {        protocol.forceReleasePrepareStatement(serverPrepareResult.getStatementId());      } catch (      QueryException e) {      }    }  }  return mustBeRemoved;}  }
class C{  public void put(E e){  xfer(e,true,ASYNC,0);}  }
class C{  public boolean isSetCreateTime(){  return EncodingUtils.testBit(issetBitfield,CREATETIME_ISSET_ID);}  }
class C{  public List<jvntextpro.data.Sentence> jvnTagging(String instr){  List<jvntextpro.data.Sentence> data=reader.readString(instr);  for (int i=0; i < data.size(); ++i) {    jvntextpro.data.Sentence sent=data.get(i);    for (int j=0; j < sent.size(); ++j) {      String[] cps=dataTagger.getContext(sent,j);      String label=classifier.classify(cps);      if (label.equalsIgnoreCase("Mrk")) {        if (StringUtils.isPunc(sent.getWordAt(j)))         label=sent.getWordAt(j); else         label="X";      }      sent.getTWordAt(j).setTag(label);    }  }  return data;}  }
class C{  public PdfRendererBuilder useSVGDrawer(SVGDrawer svgImpl){  this._svgImpl=svgImpl;  return this;}  }
class C{  public Vec2D add(Vec2D otherVector){  return new Vec2D(x() + otherVector.x(),y() + otherVector.y());}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  if (prior) {    sb.append('-');  }  sb.append('P');  if (weeks != null) {    sb.append(weeks).append('W');  }  if (days != null) {    sb.append(days).append('D');  }  if (hasTime()) {    sb.append('T');    if (hours != null) {      sb.append(hours).append('H');    }    if (minutes != null) {      sb.append(minutes).append('M');    }    if (seconds != null) {      sb.append(seconds).append('S');    }  }  return sb.toString();}  }
class C{  public void drawLine(int x1,int y1,int x2,int y2){  Line2D line=new Line2D.Float(x1,y1,x2,y2);  draw(line);}  }
class C{  public DOM4JTestDocumentBuilderFactory(DocumentBuilderSetting[] settings) throws DOMTestIncompatibleException {  super(settings);  try {    ClassLoader classLoader=ClassLoader.getSystemClassLoader();    Class domFactoryClass=classLoader.loadClass("org.dom4j.dom.DOMDocumentFactory");    Method getInstance=domFactoryClass.getMethod("getInstance",new Class[]{});    domFactory=getInstance.invoke(null,new Object[]{});    domImpl=(DOMImplementation)domFactory;    Class saxReaderClass=classLoader.loadClass("org.dom4j.io.SAXReader");    Constructor saxReaderConstructor=saxReaderClass.getConstructor(new Class[]{classLoader.loadClass("org.dom4j.DocumentFactory")});    saxReader=saxReaderConstructor.newInstance(new Object[]{domFactory});    Method getReaderMethod=saxReaderClass.getMethod("getXMLReader",new Class[]{});    xmlReader=(XMLReader)getReaderMethod.invoke(saxReader,new Object[0]);    readMethod=saxReaderClass.getMethod("read",new Class[]{java.net.URL.class});  } catch (  InvocationTargetException ex) {    throw new DOMTestIncompatibleException(ex.getTargetException(),null);  }catch (  Exception ex) {    throw new DOMTestIncompatibleException(ex,null);  }}  }
class C{  public Boolean isGetCompatibleConfigurations(){  return getCompatibleConfigurations;}  }
class C{  public JSONObject put(String key,Map<String,Object> value) throws JSONException {  this.put(key,new JSONObject(value));  return this;}  }
class C{  public ReadCoilsRequest(int ref,int count){  super();  setFunctionCode(Modbus.READ_COILS);  setDataLength(4);  setReference(ref);  setBitCount(count);}  }
class C{  public static boolean isVPlexVolume(Volume volume,DbClient dbClient){  return volume.isVPlexVolume(dbClient);}  }
class C{  public static PsiBuilder adapt_builder_(IElementType root,PsiBuilder builder,PsiParser parser,TokenSet[] extendsSets){  ErrorState state=new ErrorState();  ErrorState.initState(state,builder,root,extendsSets);  PerlBuilder perlBuilder=new PerlBuilder(builder,state,parser);  if (root == PARSABLE_STRING_USE_VARS) {    perlBuilder.setUseVarsContent(true);  }  return perlBuilder;}  }
class C{  public boolean isInvalidOverload(MethodSymbol method){  Overload overload=getOverload((ClassSymbol)method.getEnclosingElement(),method);  return overload != null && !overload.isValid;}  }
class C{  private void checkVolExists(String entidad) throws Exception {  int count;  VolumesTable table=new VolumesTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    if (_id == Defs.NULL_ID)     count=DbSelectFns.selectCount(dbConn,table.getVolumeTableName(),table.getCountVolNameQual(_name)); else     count=DbSelectFns.selectCount(dbConn,table.getVolumeTableName(),table.getCountVolNameIdQual(_id,_name));    if (count > 0)     AdminException.throwException(VolumeErrorCodes.EC_VOL_EXIST_NAME);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  public static void main(String[] args){  System.out.print("Enter list1: ");  int[][] list1=getArray();  System.out.print("Enter list2: ");  int[][] list2=getArray();  System.out.println("The two arrays are" + (equals(list1,list2) ? " " : " not ") + "identical");}  }
class C{  private static int p2capacity(int initialCapacity){  int cap=initialCapacity;  int result;  if (cap > MAXIMUM_CAPACITY || cap < 0) {    result=MAXIMUM_CAPACITY;  } else {    result=MINIMUM_CAPACITY;    while (result < cap)     result<<=1;  }  return result;}  }
class C{  public static int hash(float item){  return Float.floatToIntBits(item);}  }
class C{  public void registerAboveContentView(View v,LayoutParams params){  if (!mBroadcasting)   mViewAbove=v;}  }
class C{  protected void stepAnimation(DrawContext dc){  if (this.isAnimating()) {    this.animation.step();    if (this.animation.hasNext())     dc.setRedrawRequested(this.animationDelay); else     this.animation=null;  }}  }
class C{  public static void closeQuietly(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    RuntimeException rethrown) {      throw rethrown;    }catch (    Exception ignored) {    }  }}  }
class C{  public static boolean meekR1Locally(Graph graph,IKnowledge knowledge,IndependenceTest test,int depth){  List<Node> nodes=graph.getNodes();  boolean changed=true;  while (changed) {    changed=false;    for (    Node a : nodes) {      List<Node> adjacentNodes=graph.getAdjacentNodes(a);      if (adjacentNodes.size() < 2) {        continue;      }      ChoiceGenerator cg=new ChoiceGenerator(adjacentNodes.size(),2);      int[] combination;      while ((combination=cg.next()) != null) {        Node b=adjacentNodes.get(combination[0]);        Node c=adjacentNodes.get(combination[1]);        if (graph.isAdjacentTo(b,c)) {          continue;        }        if (graph.getEndpoint(b,a) == Endpoint.ARROW && graph.isUndirectedFromTo(a,c)) {          if (existsLocalSepsetWithout(b,a,c,test,graph,depth)) {            continue;          }          if (isArrowpointAllowed(a,c,knowledge)) {            graph.setEndpoint(a,c,Endpoint.ARROW);            TetradLogger.getInstance().log("impliedOrientation",SearchLogUtils.edgeOrientedMsg("Meek R1",graph.getEdge(a,c)));            changed=true;          }        } else         if (graph.getEndpoint(c,a) == Endpoint.ARROW && graph.isUndirectedFromTo(a,b)) {          if (existsLocalSepsetWithout(b,a,c,test,graph,depth)) {            continue;          }          if (isArrowpointAllowed(a,b,knowledge)) {            graph.setEndpoint(a,b,Endpoint.ARROW);            TetradLogger.getInstance().log("impliedOrientation",SearchLogUtils.edgeOrientedMsg("Meek R1",graph.getEdge(a,b)));            changed=true;          }        }      }    }  }  return changed;}  }
class C{  private boolean match(Class<?>[] declaredTypes,Class<?>[] actualTypes){  if (declaredTypes.length == actualTypes.length) {    for (int i=0; i < actualTypes.length; i++) {      if (actualTypes[i] == NULL.class)       continue;      if (wrapper(declaredTypes[i]).isAssignableFrom(wrapper(actualTypes[i])))       continue;      return false;    }    return true;  } else {    return false;  }}  }
class C{  public CompressedMemorySequencesReader(File originPath,IndexFile indexFile,BitwiseByteArray seqData,ByteCompression qualityData,ByteArray seqChecksums,ByteArray qualityChecksums,ExtensibleIndex positions,PrereadNamesInterface names,PrereadNamesInterface nameSuffixes,LongRange region){  mDirectory=originPath;  mCanonicalDirectory=null;  mIndex=indexFile;  mSeqData=seqData;  mQualityData=qualityData;  mChecksums=seqChecksums;  mQualityChecksums=qualityChecksums;  mQualityLoader=null;  mPositions=positions;  mNames=names;  mNameSuffixes=nameSuffixes;  mFullNamesRequested=mNameSuffixes != null;  mRegion=SequencesReaderFactory.resolveRange(indexFile,region);  mStart=mRegion.getStart();  mEnd=mRegion.getEnd();  assert mEnd >= mStart;  if (mEnd > indexFile.getNumberSequences()) {    throw new IllegalArgumentException("End sequence is greater than number of sequences in SDF");  }  final StringBuilder sb=new StringBuilder("CompressedMemorySequencesReader from non SDF source");  this.infoString(sb);  Diagnostic.developerLog(sb.toString());}  }
class C{  public TimePeriodValues(String name,String domain,String range){  super(name);  this.domain=domain;  this.range=range;  this.data=new ArrayList();}  }
class C{  public GridCacheMvccCandidate removeCandidate(IgniteTxKey key,@Nullable GridCacheVersion ver){  lock();  try {    Deque<GridCacheMvccCandidate> deque=cands.get(key);    GridCacheMvccCandidate cand=null;    if (deque != null) {      assert !deque.isEmpty();      if (ver == null || deque.peekFirst().version().equals(ver)) {        cand=deque.removeFirst();        if (deque.isEmpty())         cands.remove(cand.key());      }    }    boolean empty=cands.isEmpty();    if (empty)     releaseFut.onDone();    return cand;  }  finally {    unlock();  }}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.296 -0400",hash_original_method="BF6CBA9653E90970E99199ACD6FE8DC4",hash_generated_method="9BC968F9B86D1828A5DF1E63F8C520FC") @Override public int read(byte[] bts,int st,int end) throws IOException {  int n=super.read(bts,st,end);  if (n != -1) {    branch.write(bts,st,n);  }  return n;}  }
class C{  public LocalDate withMonthOfYear(int monthOfYear){  return withLocalMillis(getChronology().monthOfYear().set(getLocalMillis(),monthOfYear));}  }
class C{  public void createRESTExportMask(StorageSystem storage,URI exportMaskURI,VolumeURIHLU[] volumeURIHLUs,List<URI> targetURIList,List<Initiator> initiatorList,TaskCompleter taskCompleter){  try {    ExportMask exportMask=_dbClient.queryObject(ExportMask.class,exportMaskURI);    XIVRestClient restExportOpr=getRestClient(storage);    final String storageIP=storage.getSmisProviderIP();    String exportName=null;    String clusterName=null;    URI clusterURI=null;    Set<String> hosts=new HashSet<String>();    for (    Initiator initiator : initiatorList) {      final Host host=_dbClient.queryObject(Host.class,initiator.getHost());      exportName=host.getLabel();      hosts.add(exportName);      clusterURI=host.getCluster();    }    final String exportType=ExportMaskUtils.getExportType(_dbClient,exportMask);    if (ExportGroup.ExportGroupType.Cluster.name().equals(exportType) && null != clusterURI) {      Cluster cluster=_dbClient.queryObject(Cluster.class,clusterURI);      clusterName=cluster.getLabel();      exportName=clusterName;      restExportOpr.createCluster(storageIP,clusterName);    }    for (    String hostName : hosts) {      restExportOpr.createHost(storageIP,clusterName,hostName);    }    List<Initiator> userAddedInitiator=new ArrayList<Initiator>();    List<BlockObject> userAddedVolumes=new ArrayList<BlockObject>();    for (    Initiator initiator : initiatorList) {      final Host host=_dbClient.queryObject(Host.class,initiator.getHost());      if (!restExportOpr.createHostPort(storageIP,host.getLabel(),Initiator.normalizePort(initiator.getInitiatorPort()),initiator.getProtocol().toLowerCase())) {        userAddedInitiator.add(initiator);      }    }    if (volumeURIHLUs != null && volumeURIHLUs.length > 0) {      for (      VolumeURIHLU volumeURIHLU : volumeURIHLUs) {        final BlockObject blockObject=getBlockObject(volumeURIHLU.getVolumeURI());        final String volumeHLU=volumeURIHLU.getHLU();        if (volumeHLU != null && !volumeHLU.equalsIgnoreCase(ExportGroup.LUN_UNASSIGNED_STR)) {          int hluDec=Integer.parseInt(volumeHLU,16);          if (hluDec > MAXIMUM_LUN) {            String errMsg=String.format(INVALID_LUN_ERROR_MSG,hluDec,MAXIMUM_LUN);            _log.error(errMsg);            throw new Exception(errMsg);          } else {            if (!restExportOpr.exportVolume(storageIP,exportType,exportName,blockObject.getLabel(),String.valueOf(hluDec),isSnapshot(volumeURIHLU.getVolumeURI()))) {              userAddedVolumes.add(blockObject);            }          }        }      }    }    exportMask.setCreatedBySystem(true);    exportMask.addToUserCreatedInitiators(userAddedInitiator);    exportMask.addToUserCreatedVolumes(userAddedVolumes);    exportMask.setMaskName(exportName);    exportMask.setNativeId(exportName);    exportMask.setLabel(exportName);    _dbClient.updateObject(exportMask);    taskCompleter.ready(_dbClient);  } catch (  Exception e) {    _log.error("Unexpected error: createRESTExportMask failed.",e);    ServiceError error=XIVRestException.exceptions.methodFailed("createExportMask",e);    taskCompleter.error(_dbClient,error);  }}  }
class C{  public void addOptions(Map<String,String> options){  this.options.putAll(options);}  }
class C{  @Override public void tearDown() throws Exception {  ctag.doEndTag();  rtag.doEndTag();  ctag=null;  rtag=null;  super.tearDown();}  }
class C{  public boolean isCompatibleURL(ParsedURL purl){  try {    new URL(purl.toString());  } catch (  MalformedURLException mue) {    return false;  }  return true;}  }
class C{  public Clock(){  this(true);}  }
class C{  protected String doIt() throws Exception {  log.info("R_MailText_ID=" + m_R_MailText_ID);  m_MailText=new MMailText(getCtx(),m_R_MailText_ID,get_TrxName());  if (m_MailText.getR_MailText_ID() == 0)   throw new Exception("Not found @R_MailText_ID@=" + m_R_MailText_ID);  m_client=MClient.get(getCtx());  if (m_client.getAD_Client_ID() == 0)   throw new Exception("Not found @AD_Client_ID@");  if (m_client.getSMTPHost() == null || m_client.getSMTPHost().length() == 0)   throw new Exception("No SMTP Host found");  if (m_AD_User_ID > 0) {    m_from=new MUser(getCtx(),m_AD_User_ID,get_TrxName());    if (m_from.getAD_User_ID() == 0)     throw new Exception("No found @AD_User_ID@=" + m_AD_User_ID);  }  log.fine("From " + m_from);  long start=System.currentTimeMillis();  if (m_R_InterestArea_ID > 0)   sendInterestArea();  if (m_C_BP_Group_ID > 0)   sendBPGroup();  return "@Created@=" + m_counter + ", @Errors@="+ m_errors+ " - "+ (System.currentTimeMillis() - start)+ "ms";}  }
class C{  public boolean onInterceptTouchEvent(MotionEvent ev){  boolean hasChildren=(mDeckView.getChildCount() > 0);  if (!hasChildren) {    return false;  }  mInterceptedBySwipeHelper=mSwipeHelper.onInterceptTouchEvent(ev);  if (mInterceptedBySwipeHelper) {    return true;  }  boolean wasScrolling=mScroller.isScrolling() || (mScroller.mScrollAnimator != null && mScroller.mScrollAnimator.isRunning());  int action=ev.getAction();switch (action & MotionEvent.ACTION_MASK) {case MotionEvent.ACTION_DOWN:{      mInitialMotionX=mLastMotionX=(int)ev.getX();      mInitialMotionY=mLastMotionY=(int)ev.getY();      mInitialP=mLastP=mDeckView.getStackAlgorithm().screenYToCurveProgress(mLastMotionY);      mActivePointerId=ev.getPointerId(0);      mActiveDeckChildView=findViewAtPoint(mLastMotionX,mLastMotionY);      mScroller.stopScroller();      mScroller.stopBoundScrollAnimation();      initOrResetVelocityTracker();      mVelocityTracker.addMovement(createMotionEventForStackScroll(ev));      break;    }case MotionEvent.ACTION_MOVE:{    if (mActivePointerId == INACTIVE_POINTER_ID)     break;    initVelocityTrackerIfNotExists();    mVelocityTracker.addMovement(createMotionEventForStackScroll(ev));    int activePointerIndex=ev.findPointerIndex(mActivePointerId);    int y=(int)ev.getY(activePointerIndex);    int x=(int)ev.getX(activePointerIndex);    if (Math.abs(y - mInitialMotionY) > mScrollTouchSlop) {      mIsScrolling=true;      final ViewParent parent=mDeckView.getParent();      if (parent != null) {        parent.requestDisallowInterceptTouchEvent(true);      }    }    mLastMotionX=x;    mLastMotionY=y;    mLastP=mDeckView.getStackAlgorithm().screenYToCurveProgress(mLastMotionY);    break;  }case MotionEvent.ACTION_CANCEL:case MotionEvent.ACTION_UP:{  mScroller.animateBoundScroll();  mIsScrolling=false;  mActivePointerId=INACTIVE_POINTER_ID;  mActiveDeckChildView=null;  mTotalPMotion=0;  recycleVelocityTracker();  break;}}return wasScrolling || mIsScrolling;}  }
class C{  public synchronized byte[] toByteArray(){  byte[] newArray=new byte[count];  System.arraycopy(buf,0,newArray,0,count);  return newArray;}  }
class C{  public GaussJordanElimination(double[][] A,double[] b){  n=b.length;  a=new double[n][n + n + 1];  for (int i=0; i < n; i++)   for (int j=0; j < n; j++)   a[i][j]=A[i][j];  for (int i=0; i < n; i++)   a[i][n + i]=1.0;  for (int i=0; i < n; i++)   a[i][n + n]=b[i];  solve();  assert certifySolution(A,b);}  }
class C{  public static final Criterion or(Criterion one,Criterion two){  final List<Criterion> criteria=new ArrayList<Criterion>();  criteria.add(one);  criteria.add(two);  return new ConjunctionCriterion(Conjunction.OR,criteria);}  }
class C{  public void internalFrame(JComponent child){  internalFrame(getWrapper(child));}  }
class C{  private void expand(){  int i;  if (isCompact) {    int[] tempArray;    for (int plane=0; plane < PLANECOUNT; plane++) {      if (!planeTouched[plane]) {        continue;      }      blockTouched[plane]=new boolean[INDEXCOUNT];      tempArray=new int[UNICODECOUNT];      for (i=0; i < UNICODECOUNT; ++i) {        tempArray[i]=values[plane][indices[plane][i >> BLOCKSHIFT] & 0xffff + (i & BLOCKMASK)];        blockTouched[plane][i >> BLOCKSHIFT]=true;      }      for (i=0; i < INDEXCOUNT; ++i) {        indices[plane][i]=(short)(i << BLOCKSHIFT);      }      values[plane]=tempArray;    }    isCompact=false;  }}  }
class C{  public static JPopupButton createSelectionColorButton(DrawingEditor editor,AttributeKey<Color> attributeKey,java.util.List<ColorIcon> swatches,int columnCount,String labelKey,ResourceBundleUtil labels,@Nullable Map<AttributeKey,Object> defaultAttributes,Shape colorShape,java.util.List<Disposable> dsp){  final JPopupButton popupButton=new JPopupButton();  popupButton.setPopupAlpha(1f);  if (defaultAttributes == null) {    defaultAttributes=new HashMap<AttributeKey,Object>();  }  popupButton.setColumnCount(columnCount,false);  boolean hasNullColor=false;  for (  ColorIcon swatch : swatches) {    AttributeAction a;    HashMap<AttributeKey,Object> attributes=new HashMap<AttributeKey,Object>(defaultAttributes);    if (swatch != null) {      Color swatchColor=swatch.getColor();      attributes.put(attributeKey,swatchColor);      if (swatchColor == null || swatchColor.getAlpha() == 0) {        hasNullColor=true;      }      popupButton.add(a=new AttributeAction(editor,attributes,labels.getToolTipTextProperty(labelKey),swatch));      a.putValue(Action.SHORT_DESCRIPTION,swatch.getName());      a.setUpdateEnabledState(false);      dsp.add(a);    } else {      popupButton.add(new JPanel());    }  }  if (!hasNullColor) {    AttributeAction a;    HashMap<AttributeKey,Object> attributes=new HashMap<AttributeKey,Object>(defaultAttributes);    attributes.put(attributeKey,null);    popupButton.add(a=new AttributeAction(editor,attributes,labels.getToolTipTextProperty("attribute.color.noColor"),new ColorIcon(null,labels.getToolTipTextProperty("attribute.color.noColor"))));    a.putValue(Action.SHORT_DESCRIPTION,labels.getToolTipTextProperty("attribute.color.noColor"));    a.setUpdateEnabledState(false);    dsp.add(a);  }  ImageIcon chooserIcon=new ImageIcon(Images.createImage(ButtonFactory.class,"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png"));  AttributeAction a;  popupButton.add(a=new SelectionColorChooserAction(editor,attributeKey,labels.getToolTipTextProperty("attribute.color.colorChooser"),chooserIcon,defaultAttributes));  a.putValue(Action.SHORT_DESCRIPTION,labels.getToolTipTextProperty("attribute.color.colorChooser"));  dsp.add(a);  labels.configureToolBarButton(popupButton,labelKey);  Icon icon=new SelectionColorIcon(editor,attributeKey,labels.getIconProperty(labelKey,ButtonFactory.class).getImage(),colorShape);  popupButton.setIcon(icon);  popupButton.setDisabledIcon(icon);  popupButton.setFocusable(false);  dsp.add(new SelectionComponentRepainter(editor,popupButton));  return popupButton;}  }
class C{  int numAvailableSlaves(){  int i=0;synchronized (availableSlaves) {    i=availableSlaves.size();  }  return i;}  }
class C{  public Object next() throws IOException, InterruptedException {  long pos=fis.position();synchronized (HdfsTransactionLog.this) {    if (trace) {      log.trace("Reading log record.  pos=" + pos + " currentSize="+ fos.size());    }    if (pos >= fos.size()) {      return null;    }    fos.flushBuffer();  }  if (fis.position() >= sz) {    fis.close();    tlogOutStream.hflush();    try {      FSDataInputStream fdis=fs.open(tlogFile);      fis=new FSDataFastInputStream(fdis,pos);      sz=fs.getFileStatus(tlogFile).getLen();    } catch (    IOException e) {      throw new RuntimeException(e);    }  }  if (pos == 0) {    readHeader(fis);synchronized (HdfsTransactionLog.this) {      if (fis.position() >= fos.size()) {        return null;      }      pos=fis.position();    }  }  Object o=codec.readVal(fis);  int size=fis.readInt();  assert size == fis.position() - pos - 4;  return o;}  }
class C{  public boolean isUILocked(){  return this.isEnabled();}  }
class C{  public IntIterator rowsSortedBy(String field,boolean ascend){  Class type=getColumnType(field);  Index index=getIndex(field,type,true);  int t=ascend ? Index.TYPE_ASCENDING : Index.TYPE_DESCENDING;  return index.allRows(t);}  }
class C{  public NATURAL_CROSS_JOIN NATURAL_CROSS_JOIN(String tableToJoin){  return new NATURAL_CROSS_JOIN(this,tableToJoin);}  }
class C{  public Task<HostRestRep> update(URI id,HostUpdateParam input,boolean validateConnection,boolean updateExports){  UriBuilder uriBuilder=client.uriBuilder(getIdUrl());  if (validateConnection) {    uriBuilder.queryParam(VALIDATE_CONNECTION_PARAM,Boolean.TRUE);  }  if (updateExports) {    uriBuilder.queryParam(UPDATE_EXPORTS,Boolean.TRUE);  } else {    uriBuilder.queryParam(UPDATE_EXPORTS,Boolean.FALSE);  }  return putTaskURI(input,uriBuilder.build(id));}  }
class C{  public void pop(){  clearFrame();  top--;  if (top < currentDefaultNS) {    currentDefaultNS=top;    while (currentDefaultNS > 0) {      if (stack[currentDefaultNS] != null && stack[currentDefaultNS].getPrefix().length() == 0)       break;      currentDefaultNS--;    }  }}  }
class C{  public void testLoadContent_WebResource_Map(){  System.out.println("loadContent with file Map");  WebResource mockWebResource=EasyMock.createMock(WebResource.class);  ContentDataService mockContentDataService=EasyMock.createMock(ContentDataService.class);  ContentLoaderFactory mockContentLoaderFactory=EasyMock.createMock(ContentLoaderFactory.class);  DateFactory mockDateFactory=EasyMock.createMock(DateFactory.class);  ContentLoader mockContentLoader=EasyMock.createMock(ContentLoader.class);  Map<String,String> fileMap=new HashMap<>();  EasyMock.expect(mockContentLoaderFactory.create(mockContentDataService,null,mockDateFactory,fileMap)).andReturn(mockContentLoader).once();  mockContentLoader.setWebResource(mockWebResource);  EasyMock.expectLastCall().once();  mockContentLoader.run();  EasyMock.expectLastCall().once();  List<Content> contentList=new ArrayList<>();  Content mockContent=EasyMock.createMock(Content.class);  contentList.add(mockContent);  EasyMock.expect(mockContentLoader.getResult()).andReturn(contentList).once();  EasyMock.replay(mockContent);  EasyMock.replay(mockContentDataService);  EasyMock.replay(mockContentLoader);  EasyMock.replay(mockContentLoaderFactory);  EasyMock.replay(mockDateFactory);  ContentLoaderServiceImpl instance=new ContentLoaderServiceImpl();  instance.setContentDataService(mockContentDataService);  instance.setContentLoaderFactory(mockContentLoaderFactory);  instance.setDateFactory(mockDateFactory);  assertEquals(contentList,instance.loadContent(mockWebResource,fileMap));  EasyMock.verify(mockContent);  EasyMock.verify(mockContentDataService);  EasyMock.verify(mockContentLoader);  EasyMock.verify(mockContentLoaderFactory);  EasyMock.verify(mockDateFactory);}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.TEXT_HTML}) @Consumes("application/x-www-form-urlencoded") @Path("formlogin") public Response formlogin(@Context HttpServletRequest request,@Context HttpServletResponse servletResponse,@QueryParam("service") String service,@QueryParam("src") String source,@QueryParam("fragment") String fragment,MultivaluedMap<String,String> formData) throws IOException {  boolean isPasswordExpired=false;  String loginError=null;  if (service == null || service.isEmpty()) {    loginError=FORM_LOGIN_POST_NO_SERVICE_ERROR;  }  String updatedService=service;  if (StringUtils.isNotBlank(service) && StringUtils.isNotBlank(fragment)) {    updatedService=updatedService + "#" + fragment;  }  boolean updateInvalidLoginCount=true;  String clientIP=_invLoginManager.getClientIP(request);  _log.debug("Client IP: {}",clientIP);  if (_invLoginManager.isTheClientIPBlocked(clientIP) == true) {    _log.error("The client IP is blocked for too many invalid login attempts: " + clientIP);    int minutes=_invLoginManager.getTimeLeftToUnblock(clientIP);    loginError=String.format("%s.<br>Will be cleared within %d minutes",FORM_INVALID_LOGIN_LIMIT_ERROR,minutes);    updateInvalidLoginCount=false;  }  if (null == loginError) {    String rememberMeStr=formData.getFirst("remember");    boolean rememberMe=StringUtils.isNotBlank(rememberMeStr) && rememberMeStr.equalsIgnoreCase("true");    String tokenFromForm=formData.getFirst(AUTH_FORM_LOGIN_TOKEN_PARAM);    if (StringUtils.isNotBlank(tokenFromForm)) {      try {        StorageOSUserDAO userDAOFromForm=_tokenManager.validateToken(tokenFromForm);        if (userDAOFromForm != null) {          _log.debug("Form login was posted with valid token");          return buildLoginResponse(updatedService,source,true,rememberMe,new LoginStatus(userDAOFromForm.getUserName(),tokenFromForm,false),request);        }        _log.error("Auth token passed to this formlogin could not be validated and returned null user");        loginError=FORM_INVALID_AUTH_TOKEN_ERROR;      } catch (      APIException ex) {        loginError=FORM_INVALID_AUTH_TOKEN_ERROR;        _log.error("Auth token passed to this formlogin could not be validated.  Exception: ",ex);      }catch (      URISyntaxException e) {        loginError=SERVICE_URL_FORMAT_ERROR;      }    }    UsernamePasswordCredentials credentials=getFormCredentials(formData);    if (null == loginError) {      loginError=FORM_LOGIN_BAD_CREDS_ERROR;    }    try {      if (credentials != null) {        StorageOSUserDAO user=authenticateUser(credentials);        if (user != null) {          validateLocalUserExpiration(credentials);          String token=_tokenManager.getToken(user);          if (token == null) {            _log.error("Could not generate token for user: {}",user.getUserName());            auditOp(null,null,OperationTypeEnum.AUTHENTICATION,false,null,credentials.getUserName());            return Response.status(Status.INTERNAL_SERVER_ERROR).build();          }          _log.debug("Redirecting to the original service: {}",updatedService);          _invLoginManager.removeInvalidRecord(clientIP);          auditOp(URI.create(user.getTenantId()),URI.create(user.getUserName()),OperationTypeEnum.AUTHENTICATION,true,null,credentials.getUserName());          return buildLoginResponse(updatedService,source,true,rememberMe,new LoginStatus(user.getUserName(),token,null != credentials),request);        }      } else {        updateInvalidLoginCount=false;      }    } catch (    APIException e) {      loginError=e.getMessage();      if (loginError.contains("expired")) {        isPasswordExpired=true;      }    }catch (    URISyntaxException e) {      loginError=SERVICE_URL_FORMAT_ERROR;    }  }  if (updateInvalidLoginCount) {    _invLoginManager.markErrorLogin(clientIP);  }  if (null != loginError) {    _log.error(loginError);  }  String formLP=null;  if (isPasswordExpired) {    formLP=getFormChangePasswordPage(updatedService,source,request.getServerName(),MessageFormat.format(FORM_LOGIN_AUTH_ERROR_ENT,loginError));  } else {    formLP=getFormLoginPage(updatedService,source,request.getServerName(),MessageFormat.format(FORM_LOGIN_AUTH_ERROR_ENT,loginError));  }  auditOp(null,null,OperationTypeEnum.AUTHENTICATION,false,null,formData.getFirst("username"));  if (formLP != null) {    return Response.ok(formLP).type(MediaType.TEXT_HTML).cacheControl(_cacheControl).header(HEADER_PRAGMA,HEADER_PRAGMA_VALUE).build();  } else {    _log.error("Could not generate custom (form) login page");    return Response.status(Status.INTERNAL_SERVER_ERROR).build();  }}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public boolean isIdentity(){  if (type == TYPE_IDENTITY)   return true;  if (this.equals(IDENTITY())) {    setIdentity();    return true;  }  return false;}  }
class C{  private RFC1960Filter(final int operator){  this.operator=operator;}  }
class C{  static WindowsPath parse(WindowsFileSystem fs,String path){  WindowsPathParser.Result result=WindowsPathParser.parse(path);  return new WindowsPath(fs,result.type(),result.root(),result.path());}  }
class C{  public boolean smoothScrollToSection(int scrollY,int availableScrollHeight,AlphabeticalAppsList.FastScrollSectionInfo info){  if (mTargetFastScrollPosition != info.fastScrollToItem.position) {    mTargetFastScrollPosition=info.fastScrollToItem.position;    smoothSnapToPosition(scrollY,availableScrollHeight,info);    return true;  }  return false;}  }
class C{  @DSSource({DSSourceKind.IO}) @DSComment("Activity on IO class") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:40.807 -0500",hash_original_method="434E790CE8DCEADB6D081C3AE915A829",hash_generated_method="BD51F80B0E1483CC290DA4C926697DD8") @Override public int read() throws IOException {synchronized (lock) {    checkNotClosed();    if (pos < end || fillBuf() != -1) {      return buf[pos++];    }    return -1;  }}  }
class C{  @Override public String toString(){  return start + " " + end;}  }
class C{  public static boolean isSdcardExist(){  if (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED))   return true; else   return false;}  }
class C{  @Ignore @Test public void testWANPDX_PR_SerialSender_RemoteSite_Bounce(){  Integer lnPort=(Integer)vm0.invoke(null);  Integer nyPort=(Integer)vm1.invoke(null);  createCacheInVMs(nyPort,vm2);  vm2.invoke(null);  createCacheInVMs(lnPort,vm3);  vm3.invoke(null);  vm2.invoke(null);  vm3.invoke(null);  vm3.invoke(null);  vm3.invoke(null);  vm2.invoke(null);  vm2.invoke(null);  createReceiverInVMs(vm2,vm4);  vm2.invoke(null);  vm4.invoke(null);  vm3.invoke(null);  vm2.invoke(null);}  }
class C{  public void externalEntityDecl(String name,String publicId,String systemId) throws SAXException {  if (null != m_resultDeclHandler)   m_resultDeclHandler.externalEntityDecl(name,publicId,systemId);}  }
class C{  private boolean isViewAncestorOf(View child,View parent){  if (child == parent) {    return true;  }  final ViewParent theParent=child.getParent();  return (theParent instanceof ViewGroup) && isViewAncestorOf((View)theParent,parent);}  }
class C{  private String checkAndCreateCarbonStoreLocation(String factStoreLocation,String schemaName,String tableName,String partitionId,String segmentId){  String carbonStorePath=factStoreLocation;  CarbonTable carbonTable=CarbonMetadata.getInstance().getCarbonTable(schemaName + CarbonCommonConstants.UNDERSCORE + tableName);  CarbonTableIdentifier carbonTableIdentifier=carbonTable.getCarbonTableIdentifier();  CarbonTablePath carbonTablePath=CarbonStorePath.getCarbonTablePath(carbonStorePath,carbonTableIdentifier);  String carbonDataDirectoryPath=carbonTablePath.getCarbonDataDirectoryPath(partitionId,segmentId);  CarbonUtil.checkAndCreateFolder(carbonDataDirectoryPath);  return carbonDataDirectoryPath;}  }
class C{  public CountTrigger(long period){  this(1,period,null);}  }
class C{  public Set<TableSource> addFlattenOrProduct(PlanNode join){  if (flattens == null)   flattens=new ArrayList<>();  flattens.add(join);  if (flattened == null)   flattened=new HashMap<>();  Set<TableSource> tables=new HashSet<>(loaders.keySet());  flattened.put(join,tables);  return tables;}  }
class C{  public static int longSub(long l1,long l2){  if (l1 == l2) {    ConstantPoolManager.getInstance().addDynamicConstant(l1);    return 0;  } else {    double diff=(double)l1 - (double)l2;    double diff2=Math.signum(diff) * Math.abs(diff) / (1.0 + Math.abs(diff));    int d3=(int)Math.ceil(Integer.MAX_VALUE * diff2);    ConstantPoolManager.getInstance().addDynamicConstant(l1);    ConstantPoolManager.getInstance().addDynamicConstant(l2);    return d3;  }}  }
class C{  public StateMachineConfig(ConfigurationData<S,E> stateMachineConfigurationConfig,TransitionsData<S,E> transitions,StatesData<S,E> states){  this(stateMachineConfigurationConfig,transitions,states,null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:05:58.697 -0400",hash_original_method="532AF2CB70F634AF3C0AFD4E52F346C0",hash_generated_method="9737C3928C505E32BBBEFCA99B803424") @Override synchronized public void stop(){  if (mRunTask != null && !mRunTask.isCancelled()) {    if (mLogVerbose)     Log.v(TAG,"Stopping graph.");    mRunTask.cancel(false);  }}  }
class C{  protected Node newNode(){  return new SVGOMFEOffsetElement();}  }
class C{  private void deleteChildren(Element container){  while (container.hasChildNodes()) {    container.removeChild(container.getLastChild());  }}  }
class C{  @Deprecated public SelectionInputDialog(String key,T[] selectionValues,T initialSelectionValue,Object... keyArguments){  this(ApplicationFrame.getApplicationFrame(),key,selectionValues,initialSelectionValue,keyArguments);}  }
class C{  public static void filterLine(Path self,Writer writer,@ClosureParams(value=SimpleType.class,options="java.lang.String") Closure closure) throws IOException {  IOGroovyMethods.filterLine(newReader(self),writer,closure);}  }
class C{  private SerializerReadString(){}  }
class C{  public static String buildSelectorFromAttributeAndParentDifferentFrom(String elementName,String attributeName){  StringBuilder selector=new StringBuilder();  selector.append(NOT_PREFIX);  selector.append(elementName);  selector.append(SPACE);  if (attributeName != null && !attributeName.isEmpty()) {    selector.append(OPEN_BRACKET);    selector.append(attributeName);    selector.append(CLOSE_BRACKET);  }  selector.append(CLOSE_PARENTHESE);  return selector.toString();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  String childValue;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.setNodeValue("Marilyn Martin");  childData=child.getData();  assertEquals("data","Marilyn Martin",childData);  childValue=child.getNodeValue();  assertEquals("value","Marilyn Martin",childValue);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  synchronized int addOrGet(String fieldName,int preferredFieldNumber,DocValuesType dvType,int dimensionCount,int dimensionNumBytes){  if (dvType != DocValuesType.NONE) {    DocValuesType currentDVType=docValuesType.get(fieldName);    if (currentDVType == null) {      docValuesType.put(fieldName,dvType);    } else     if (currentDVType != DocValuesType.NONE && currentDVType != dvType) {      throw new IllegalArgumentException("cannot change DocValues type from " + currentDVType + " to "+ dvType+ " for field \""+ fieldName+ "\"");    }  }  if (dimensionCount != 0) {    FieldDimensions dims=dimensions.get(fieldName);    if (dims != null) {      if (dims.dimensionCount != dimensionCount) {        throw new IllegalArgumentException("cannot change point dimension count from " + dims.dimensionCount + " to "+ dimensionCount+ " for field=\""+ fieldName+ "\"");      }      if (dims.dimensionNumBytes != dimensionNumBytes) {        throw new IllegalArgumentException("cannot change point numBytes from " + dims.dimensionNumBytes + " to "+ dimensionNumBytes+ " for field=\""+ fieldName+ "\"");      }    } else {      dimensions.put(fieldName,new FieldDimensions(dimensionCount,dimensionNumBytes));    }  }  Integer fieldNumber=nameToNumber.get(fieldName);  if (fieldNumber == null) {    final Integer preferredBoxed=Integer.valueOf(preferredFieldNumber);    if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {      fieldNumber=preferredBoxed;    } else {      while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {      }      fieldNumber=lowestUnassignedFieldNumber;    }    assert fieldNumber >= 0;    numberToName.put(fieldNumber,fieldName);    nameToNumber.put(fieldName,fieldNumber);  }  return fieldNumber.intValue();}  }
class C{  public DataBufferNIOInt(int size){  super(TYPE_INT,size);  data=getBufferOfSize(size * 4).asIntBuffer();  bankdata=new IntBuffer[1];  bankdata[0]=data;}  }
class C{  private ObjectAnimator createExitingImageMatrixAnimator(){  Matrix initialMatrix=MatrixUtils.getImageMatrix(mAnimatedImage);  Matrix endMatrix=new Matrix();  endMatrix.setValues(mToThumbnailMatrixValues);  Log.v(TAG,"createExitingImageMatrixAnimator, initialMatrix " + initialMatrix);  Log.v(TAG,"createExitingImageMatrixAnimator,     endMatrix " + endMatrix);  mAnimatedImage.setScaleType(ImageView.ScaleType.MATRIX);  return ObjectAnimator.ofObject(mAnimatedImage,MatrixEvaluator.ANIMATED_TRANSFORM_PROPERTY,new MatrixEvaluator(),initialMatrix,endMatrix);}  }
class C{  public ExistsRequest minScore(float minScore){  this.minScore=minScore;  return this;}  }
class C{  public boolean isEmpty(){  return extOrdering.isEmpty();}  }
class C{  public boolean areLastThreeNonRight(){  if (!hasThree())   return false;  double x1, y1, x2, y2, x3, y3;  DoubleNode<IPoint> last=points.last();  DoubleNode<IPoint> second=last.prev();  DoubleNode<IPoint> third=second.prev();  x1=third.value().getX();  y1=third.value().getY();  x2=second.value().getX();  y2=second.value().getY();  x3=last.value().getX();  y3=last.value().getY();  double val1=(x2 - x1) * (y3 - y1);  double val2=(y2 - y1) * (x3 - x1);  double diff=FloatingPoint.value(val1 - val2);  if (diff == 0)   return true;  if (diff > 0)   return true;  return false;}  }
class C{  @SuppressWarnings("WeakerAccess") public TerminalEmulatorDeviceConfiguration(int lineBufferScrollbackSize,int blinkLengthInMilliSeconds,CursorStyle cursorStyle,TextColor cursorColor,boolean cursorBlinking,boolean clipboardAvailable){  this.lineBufferScrollbackSize=lineBufferScrollbackSize;  this.blinkLengthInMilliSeconds=blinkLengthInMilliSeconds;  this.cursorStyle=cursorStyle;  this.cursorColor=cursorColor;  this.cursorBlinking=cursorBlinking;  this.clipboardAvailable=clipboardAvailable;}  }
class C{  public static String consistentToString(BigDecimal decimal){  if (decimal == null) {    return null;  }  if (toPlainStringMethod != null) {    try {      return (String)toPlainStringMethod.invoke(decimal,(Object[])null);    } catch (    InvocationTargetException invokeEx) {    }catch (    IllegalAccessException accessEx) {    }  }  return decimal.toString();}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("DocAction"))     p_DocAction=(String)para[i].getParameter();  }  p_C_InvoiceBatch_ID=getRecord_ID();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return getCapDev(stack).getInputNames();}  }
class C{  public boolean isDefaultImport(){  return true;}  }
class C{  public static int calcTextWidth(Paint paint,String demoText){  return (int)paint.measureText(demoText);}  }
class C{  public static long deserializeLong(byte[] buffer){  Preconditions.checkArgument(buffer.length == Type.LONG.getByteSize());  return deserializeLong(buffer,new MutableInt(0));}  }
class C{  public static void removeIOSFile(String target){  Process p=null;  File file=null;  if (findIOSFile(target) != null) {    try {      System.out.println("Removing " + target);      String[] cmdRemove={"ssh","-p","2222","root@localhost","rm","-r",target};      p=Runtime.getRuntime().exec(cmdRemove);      p.waitFor();      if (findIOSFile(target) != null) {        System.out.println("Removal of " + target + " failed.  Maybe it wasn't present.");      }    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public static void updateOpenViews(final INaviModule module,final INaviInstruction instruction,final ArrayList<IComment> comments) throws CouldntSaveDataException {  if (module.isLoaded()) {    for (    final INaviView view : module.getContent().getViewContainer().getViews()) {      if (view.isLoaded()) {        updateOpenView(view,instruction,comments);      }    }  }}  }
class C{  @Override protected void initData(){}  }
class C{  private boolean isBlockIndexingExpression(Hop lbound,Hop ubound){  boolean ret=false;  LiteralOp constant=null;  DataOp var=null;  if (lbound instanceof BinaryOp && ((BinaryOp)lbound).getOp() == OpOp2.PLUS && lbound.getInput().get(1) instanceof LiteralOp && HopRewriteUtils.getDoubleValueSafe((LiteralOp)lbound.getInput().get(1)) == 1 && lbound.getInput().get(0) instanceof BinaryOp) {    BinaryOp lmult=(BinaryOp)lbound.getInput().get(0);    if (lmult.getOp() == OpOp2.MULT && lmult.getInput().get(0) instanceof LiteralOp && lmult.getInput().get(1) instanceof BinaryOp) {      BinaryOp lminus=(BinaryOp)lmult.getInput().get(1);      if (lminus.getOp() == OpOp2.MINUS && lminus.getInput().get(1) instanceof LiteralOp && HopRewriteUtils.getDoubleValueSafe((LiteralOp)lminus.getInput().get(1)) == 1 && lminus.getInput().get(0) instanceof DataOp) {        constant=(LiteralOp)lmult.getInput().get(0);        var=(DataOp)lminus.getInput().get(0);      }    }  }  if (var != null && constant != null && ubound instanceof BinaryOp && ubound.getInput().get(0) instanceof LiteralOp && ubound.getInput().get(1) instanceof DataOp && ubound.getInput().get(1).getName().equals(var.getName())) {    LiteralOp constant2=(LiteralOp)ubound.getInput().get(0);    ret=(HopRewriteUtils.getDoubleValueSafe(constant) == HopRewriteUtils.getDoubleValueSafe(constant2));  }  return ret;}  }
class C{  boolean isRoot(){  return m_Parent == null;}  }
class C{  public Builder until(Date until,boolean hasTime){  this.until=new ICalDate(until,hasTime);  return this;}  }
class C{  public void deserialize(Column<CompositeColumnName> column,Object obj){  if (_encrypt && _parentType.getEncryptionProvider() != null) {    deserializeEncryptedColumn(column,obj,_parentType.getEncryptionProvider());  } else {    ColumnValue.setField(column,_property,obj);  }}  }
class C{  public static IJavaElement determineIfOnClasspath(File resource,JavaProject project){  IPath resourcePath=new Path(resource.getAbsolutePath());  boolean isExternal=false;  try {    JavaProjectElementInfo projectInfo=(JavaProjectElementInfo)((JavaProject)project).manager.getInfo(project);    JavaProjectElementInfo.ProjectCache projectCache=projectInfo == null ? null : projectInfo.projectCache;    HashtableOfArrayToObject allPkgFragmentsCache=projectCache == null ? null : projectCache.allPkgFragmentsCache;    boolean isJavaLike=Util.isJavaLikeFileName(resourcePath.lastSegment());    IClasspathEntry[] entries=isJavaLike ? project.getRawClasspath() : ((JavaProject)project).getResolvedClasspath();    int length=entries.length;    if (length > 0) {      String sourceLevel=project.getOption(JavaCore.COMPILER_SOURCE,true);      String complianceLevel=project.getOption(JavaCore.COMPILER_COMPLIANCE,true);      for (int i=0; i < length; i++) {        IClasspathEntry entry=entries[i];        if (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT)         continue;        IPath rootPath=entry.getPath();        if (rootPath.equals(resourcePath)) {          if (isJavaLike)           return null;          return project.getPackageFragmentRoot(resource);        } else         if (rootPath.isPrefixOf(resourcePath)) {          if (!Util.isExcluded(resourcePath,((ClasspathEntry)entry).fullInclusionPatternChars(),((ClasspathEntry)entry).fullExclusionPatternChars(),true)) {            PackageFragmentRoot root=(PackageFragmentRoot)((JavaProject)project).getFolderPackageFragmentRoot(rootPath);            if (root == null)             return null;            IPath pkgPath=resourcePath.removeFirstSegments(rootPath.segmentCount());            if (resource.isFile()) {              pkgPath=pkgPath.removeLastSegments(1);            }            String[] pkgName=pkgPath.segments();            if (allPkgFragmentsCache != null && allPkgFragmentsCache.containsKey(pkgName))             return root.getPackageFragment(pkgName);            if (pkgName.length != 0 && JavaConventions.validatePackageName(Util.packageName(pkgPath,sourceLevel,complianceLevel),sourceLevel,complianceLevel).getSeverity() == IStatus.ERROR) {              return null;            }            return root.getPackageFragment(pkgName);          }        }      }    }  } catch (  JavaModelException npe) {    return null;  }  return null;}  }
class C{  public void update(){  visual=null;}  }
class C{  @Override public int hashCode(){  return filter.hashCode() + Float.floatToIntBits(getBoost());}  }
class C{  public ProgressStatusEvent(String type,String item,String description,String information,List<String> data){  this(type,item,description,data);  put("information",information);}  }
class C{  protected TerminalExpressionImpl(){  super();}  }
class C{  public void verify(){  if (!mReplaying) {    throw new IllegalStateException("Did you forget to call replay()");  }  if (mExpectedInterrupt) {    throw new IllegalStateException("Expected call to #interrupt() not received");  }  if (!mExpectedEvents.isEmpty()) {    throw new IllegalStateException("Expected a call to onAccessibilityEvent() for " + "events \"" + mExpectedEvents + "\" not received");  }}  }
class C{  public void remove(final int index){  checkWidget();  if (index < 0 || index >= items.size()) {    SWT.error(SWT.ERROR_INVALID_ARGUMENT);  }  items.remove(index);  redrawTables();}  }
class C{  private boolean colinear(LatLong A,LatLong B,Intersection C){  return (Math.abs(B.signedDistanceToLineSegment(A,C)) < 100);}  }
class C{  public static void validateProperties(final Object entity,final EntityDataModel edm) throws ODataException {  final Type type=edm.getType(entity.getClass());  if (!(type instanceof StructuredType)) {    return;  }  visitProperties(edm,(StructuredType)type,null);}  }
class C{  public File createPDF(){  try {    File temp=File.createTempFile(get_TableName() + get_ID() + "_",".pdf");    return createPDF(temp);  } catch (  Exception e) {    log.severe("Could not create PDF - " + e.getMessage());  }  return null;}  }
class C{  public static <T>long addAndGet(AtomicLongFieldUpdater<T> updater,T instance,long n){  for (; ; ) {    long r=updater.get(instance);    if (r == Long.MAX_VALUE) {      return Long.MAX_VALUE;    }    long u=addCap(r,n);    if (updater.compareAndSet(instance,r,u)) {      return r;    }  }}  }
class C{  public FBTraceManager(String gdsType){  super(gdsType);}  }
class C{  @Inject public GusNotifier(MetricService metricService,AnnotationService annotationService,AuditService auditService,MailService mailService,SystemConfiguration config,Provider<EntityManager> emf){  super(metricService,annotationService,auditService,config,emf);  requireArgument(mailService != null,"Mail service cannot be null.");  requireArgument(config != null,"The configuration cannot be null.");}  }
class C{  @Override public boolean hasMore(){  return !rest().isEmpty();}  }
class C{  private static int partition(double[] array,int[] index,int l,int r){  double pivot=array[index[(l + r) / 2]];  int help;  while (l < r) {    while ((array[index[l]] < pivot) && (l < r)) {      l++;    }    while ((array[index[r]] > pivot) && (l < r)) {      r--;    }    if (l < r) {      help=index[l];      index[l]=index[r];      index[r]=help;      l++;      r--;    }  }  if ((l == r) && (array[index[r]] > pivot)) {    r--;  }  return r;}  }
class C{  public ParseException(String message,Throwable e){  super(message,e);}  }
class C{  public void populateFilterResolvedInfo(DimColumnResolvedFilterInfo visitableObj,FilterResolverMetadata metadata) throws FilterUnsupportedException {  DimColumnFilterInfo resolvedFilterObject=null;  List<String> evaluateResultListFinal;  try {    evaluateResultListFinal=metadata.getExpression().evaluate(null).getListAsString();    if (!metadata.isIncludeFilter() && !evaluateResultListFinal.contains(CarbonCommonConstants.MEMBER_DEFAULT_VAL)) {      evaluateResultListFinal.add(CarbonCommonConstants.MEMBER_DEFAULT_VAL);    }  } catch (  FilterIllegalMemberException e) {    throw new FilterUnsupportedException(e);  }  resolvedFilterObject=FilterUtil.getNoDictionaryValKeyMemberForFilter(metadata.getTableIdentifier(),metadata.getColumnExpression(),evaluateResultListFinal,metadata.isIncludeFilter());  visitableObj.setFilterValues(resolvedFilterObject);}  }
class C{  protected CCRibbon(float w,String path,float l,ccColor4B color,float fade){  segments_=new ArrayList<CCRibbonSegment>();  deletedSegments_=new ArrayList<CCRibbonSegment>();  CCRibbonSegment seg=new CCRibbonSegment();  segments_.add(seg);  textureLength_=l;  color_=color;  fadeTime_=fade;  lastLocation_=CGPoint.make(0,0);  lastWidth_=w / 2;  texVPos_=0.0f;  curTime_=0;  pastFirstPoint_=false;  blendFunc_=new ccBlendFunc(GL10.GL_SRC_ALPHA,GL10.GL_ONE_MINUS_SRC_ALPHA);  texture_=CCTextureCache.sharedTextureCache().addImage(path);  CCTexParams params=new CCTexParams(GL10.GL_LINEAR,GL10.GL_LINEAR,GL10.GL_REPEAT,GL10.GL_REPEAT);  texture_.setTexParameters(params);}  }
class C{  public static boolean isStackTracePrinted(Throwable e){  if (e instanceof WebApplicationException) {    Class<?> cl2check=AbstractRootElementProvider.class;    StackTraceElement[] ste=e.getStackTrace();    for (int i=0; i < ste.length; i++) {      if (ste[i].getClassName().equals(cl2check.getName())) {        return false;      }    }  }  return true;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ExpressionsPackage.BITWISE_AND_EXPRESSION__LEFT_OPERAND:    return getLeftOperand();case ExpressionsPackage.BITWISE_AND_EXPRESSION__RIGHT_OPERAND:  return getRightOperand();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override protected boolean hasOverflow(FlatRStarTreeNode node){  if (node.isLeaf()) {    return node.getNumEntries() == leafCapacity;  } else   if (node.getNumEntries() == node.getCapacity()) {    node.increaseEntries();  }  return false;}  }
class C{  public GaussianProcess(CovarianceFunction covFunction){  this.covFunction=covFunction;}  }
class C{  public BasicStroke(float width){  this(width,CAP_SQUARE,JOIN_MITER,10.0f,null,0.0f);}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  ButterKnife.bind(this);  this.observable=new AgeraBroadcastObservable(this,AGERA_BROADCAST_ACTION);  this.observable.addUpdatable(this);}  }
class C{  protected SSLRecordProtocol(HandshakeProtocol handshakeProtocol,AlertProtocol alertProtocol,SSLInputStream in,Appendable appData){  this.handshakeProtocol=handshakeProtocol;  this.handshakeProtocol.setRecordProtocol(this);  this.alertProtocol=alertProtocol;  this.alertProtocol.setRecordProtocol(this);  this.in=in;  this.appData=appData;}  }
class C{  public static void sleepSimple(long sleepMillis){  if (sleepMillis <= 0)   return;  try {    Thread.sleep(sleepMillis);  } catch (  InterruptedException e) {  }}  }
class C{  final void forceAddValue(String value){  Object store=value;  if (value.length() > STRING_COMPRESS_THRESHOLD) {    try {      store=new SerializedObject(value,true);    } catch (    Exception ex) {      System.err.println("Couldn't compress string attribute value -" + " storing uncompressed.");    }  }  m_Values.addElement(store);  m_Hashtable.put(store,new Integer(m_Values.size() - 1));}  }
class C{  public CoverageEntry(int topologyLevel,String desc){  this(topologyLevel,desc,null);}  }
class C{  static void label(AbstractBURS_TreeNode tn){  if (VM.BuildForIA32) {    if (VM.BuildFor32Addr) {      org.jikesrvm.compilers.opt.lir2mir.ia32_32.BURS_STATE.label(tn);    } else {      org.jikesrvm.compilers.opt.lir2mir.ia32_64.BURS_STATE.label(tn);    }  } else {    if (VM.BuildFor32Addr) {      org.jikesrvm.compilers.opt.lir2mir.ppc_32.BURS_STATE.label(tn);    } else {      org.jikesrvm.compilers.opt.lir2mir.ppc_64.BURS_STATE.label(tn);    }  }}  }
class C{  public static void clearGamePosition(Game game){  game.clear();}  }
class C{  public LuaValue callCellLayout(LuaValue cellData,int pos,int currentItem){  return callCellFunction("Layout",cellData,pos,currentItem);}  }
class C{  public static String gensalt(int log_rounds,SecureRandom random){  StringBuilder rs=new StringBuilder();  byte rnd[]=new byte[BCRYPT_SALT_LEN];  random.nextBytes(rnd);  rs.append("$2a$");  if (log_rounds < 10)   rs.append("0");  if (log_rounds > 30) {    throw new IllegalArgumentException("log_rounds exceeds maximum (30)");  }  rs.append(Integer.toString(log_rounds));  rs.append("$");  rs.append(encode_base64(rnd,rnd.length));  return rs.toString();}  }
class C{  private FastBlurHelper(){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void appendGeometryCollectionText(GeometryCollection geometryCollection,int level,Writer writer) throws IOException {  int level2=level;  for (int i=0; i < geometryCollection.getNumGeometries(); i++) {    if (i > 0) {      level2=level + 1;    }    appendGeometryTaggedText(geometryCollection.getGeometryN(i),level2,writer);  }}  }
class C{  boolean relevantToFuture(Fact fact){  if (relevantJoinRule(fact,schema) != Relevance.NONE) {    return true;  }  Relevance general=relevantFact(fact,schema);  Resource s=fact.getSubject();  Value o=fact.getObject();  if (!s.equals(o)) {    if (general == Relevance.SUBJECT && node.equals(s)) {      return false;    }    if (general == Relevance.OBJECT && node.equals(o)) {      return false;    }  }  return general != Relevance.NONE;}  }
class C{  public static void writePlainFile(String filePath,byte[] content) throws IOException {  FileOutputStream fileOuputStream=new FileOutputStream(filePath);  fileOuputStream.write(content);  fileOuputStream.close();}  }
class C{  private boolean intersects(Command command){  if (offset + length <= command.fOffset || command.fOffset + command.fLength <= offset)   return (2 * offset + length) - (2 * command.fOffset + command.fLength) == 0;  return true;}  }
class C{  public void onEvent(Event e){  if (cbLanguage.getSelectedIndex() == -1) {    statusBar.setStatusLine(Msg.getMsg(Env.getCtx(),"LanguageSetupError"),true);    return;  }  ValueNamePair AD_Language=(ValueNamePair)cbLanguage.getSelectedItem().toValueNamePair();  if (AD_Language == null) {    statusBar.setStatusLine(Msg.getMsg(Env.getCtx(),"LanguageSetupError"),true);    return;  }  if (cbTable.getSelectedIndex() == -1)   return;  ValueNamePair AD_Table=(ValueNamePair)cbTable.getSelectedItem().toValueNamePair();  if (AD_Table == null)   return;  boolean imp=(e.getTarget() == bImport);  int AD_Client_ID=-1;  KeyNamePair AD_Client=null;  if (cbTable.getSelectedIndex() != -1)   AD_Client=(KeyNamePair)cbClient.getSelectedItem().toKeyNamePair();  if (AD_Client != null)   AD_Client_ID=AD_Client.getKey();  FolderBrowser directoryDialog=new FolderBrowser(true);  String directory=directoryDialog.getPath();  if (directory == null)   return;  statusBar.setStatusLine(directory);  Translation t=new Translation(Env.getCtx());  String msg=t.validateLanguage(AD_Language.getValue());  if (msg.length() > 0) {    FDialog.error(m_WindowNo,form,"LanguageSetupError",msg);    return;  }  if (AD_Table.getValue().equals("")) {    msg="";    for (int i=1; i < cbTable.getItemCount(); i++) {      AD_Table=(ValueNamePair)cbTable.getItemAtIndex(i).toValueNamePair();      msg+=AD_Table.getValue() + " " + (imp ? t.importTrl(directory,AD_Client_ID,AD_Language.getValue(),AD_Table.getValue()) : t.exportTrl(directory,AD_Client_ID,AD_Language.getValue(),AD_Table.getValue()))+ " ";    }    if (msg == null || msg.length() == 0)     msg=(imp ? "Import" : "Export") + " Successful. [" + directory+ "]";    statusBar.setStatusLine(msg);  } else {    msg=null;    msg=imp ? t.importTrl(directory,AD_Client_ID,AD_Language.getValue(),AD_Table.getValue()) : t.exportTrl(directory,AD_Client_ID,AD_Language.getValue(),AD_Table.getValue());    if (msg == null || msg.length() == 0)     msg=(imp ? "Import" : "Export") + " Successful. [" + directory+ "]";    statusBar.setStatusLine(msg);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:38.177 -0500",hash_original_method="5287A3990077935C24A2BD79FED1C6A1",hash_generated_method="24331F1DD3A548F079B4D04E636A5F9F") public void linkToDeath(DeathRecipient recipient,int flags){}  }
class C{  public MutablePeriod toMutablePeriod(){  return new MutablePeriod(this);}  }
class C{  private static int numericCompaction(int[] codewords,int codeIndex,StringBuilder result) throws FormatException {  int count=0;  boolean end=false;  int[] numericCodewords=new int[MAX_NUMERIC_CODEWORDS];  while (codeIndex < codewords[0] && !end) {    int code=codewords[codeIndex++];    if (codeIndex == codewords[0]) {      end=true;    }    if (code < TEXT_COMPACTION_MODE_LATCH) {      numericCodewords[count]=code;      count++;    } else {      if (code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR) {        codeIndex--;        end=true;      }    }    if (count % MAX_NUMERIC_CODEWORDS == 0 || code == NUMERIC_COMPACTION_MODE_LATCH || end) {      String s=decodeBase900toBase10(numericCodewords,count);      result.append(s);      count=0;    }  }  return codeIndex;}  }
class C{  private void takeWakeLock(){  if (wakeLock == null) {    PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);    if (FsSettings.shouldTakeFullWakeLock()) {      Log.d(TAG,"takeWakeLock: Taking full wake lock");      wakeLock=pm.newWakeLock(PowerManager.FULL_WAKE_LOCK,TAG);    } else {      Log.d(TAG,"maybeTakeWakeLock: Taking parial wake lock");      wakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);    }    wakeLock.setReferenceCounted(false);  }  wakeLock.acquire();}  }
class C{  public int awaitAdvance(int phase){  final Phaser root=this.root;  long s=(root == this) ? state : reconcileState();  int p=(int)(s >>> PHASE_SHIFT);  if (phase < 0)   return phase;  if (p == phase)   return root.internalAwaitAdvance(phase,null);  return p;}  }
class C{  public PhaseLine(String sidc){  super(sidc);  this.path=this.createPath();}  }
class C{  public void clear(){synchronized (mLock) {    if (mOriginalValues != null) {      mOriginalValues.clear();    } else {      mObjects.clear();    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public Type basicGetDefinedType(){  return definedType;}  }
class C{  SnmpEngineId(String hexString){  engineId=SnmpTools.ascii2binary(hexString);  this.hexString=hexString.toLowerCase();}  }
class C{  public void put(Value key,V value){  checkSizePut();  internalPut(key,value);}  }
class C{  protected HashEntry createEntry(HashEntry next,int hashCode,Object key,Object value){  return new ReferenceEntry(this,next,hashCode,key,value);}  }
class C{  public void assignContactFromPhone(String phoneNumber,boolean lazyLookup){  assignContactFromPhone(phoneNumber,lazyLookup,new Bundle());}  }
class C{  private boolean rehash(){  if (tombstones + size < maximumLoad) {    return false;  }  int capacity=table.length >> 1;  int newCapacity=capacity;  if (size > (capacity >> 1)) {    newCapacity=capacity * 2;  }  Object[] oldTable=this.table;  initializeTable(newCapacity);  this.tombstones=0;  if (size == 0) {    return true;  }  for (int i=oldTable.length - 2; i >= 0; i-=2) {    Object k=oldTable[i];    if (k == null || k == TOMBSTONE) {      continue;    }    @SuppressWarnings("unchecked") Reference<ThreadLocal<?>> reference=(Reference<ThreadLocal<?>>)k;    ThreadLocal<?> key=reference.get();    if (key != null) {      add(key,oldTable[i + 1]);    } else {      size--;    }  }  return true;}  }
class C{  private static void onSavePosition(Window window){  if (!isWindowFrameOrDialog(window)) {    return;  }  if (Settings.getInstance().readBool("gui.saveWindowPos")) {    String identifierForConfig=window.getClass().getSimpleName();    if (identifierForConfig.equals("JDialog")) {      return;    }    if (identifierForConfig.equals("MainGUI") && Emulator.getMainGUI().isFullScreen()) {      return;    }    Emulator.log.debug("saving window position of '" + identifierForConfig + "'");    Settings.getInstance().writeWindowPos(identifierForConfig,window.getLocation());    if (isWindowResizeable(window)) {      Settings.getInstance().writeWindowSize(identifierForConfig,window.getSize());    }  }}  }
class C{  public void testPowException(){  byte aBytes[]={1,2,3,4,5,6,7};  int aSign=1;  int exp=-5;  BigInteger aNumber=new BigInteger(aSign,aBytes);  try {    aNumber.pow(exp);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  private static boolean lower(int x,int y){  return (x & 0xFFFFFFFFL) < ((long)y & 0xFFFFFFFF);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("Local Variable Table: \n");  for (  LocalVariable lv : locals) {    sb.append(lv.toString());  }  return sb.toString();}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processRequest(request,response);}  }
class C{  public static Class toReturnType(QName resultType,Class optionalCastToType){  if (optionalCastToType != null) {    return optionalCastToType;  }  if (resultType.equals(XPathConstants.NODESET))   return NodeList.class;  if (resultType.equals(XPathConstants.NODE))   return Node.class;  if (resultType.equals(XPathConstants.BOOLEAN))   return Boolean.class;  if (resultType.equals(XPathConstants.NUMBER))   return Double.class;  if (resultType.equals(XPathConstants.STRING))   return String.class;  return String.class;}  }
class C{  public SurfaceObjectTileBuilder(Dimension tileTextureDimension,int tileTextureFormat,boolean useLinearFilter,boolean useMipmaps){  if (tileTextureDimension == null) {    String message=Logging.getMessage("nullValue.DimensionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.setTileDimension(tileTextureDimension);  this.setTileTextureFormat(tileTextureFormat);  this.setUseLinearFilter(useLinearFilter);  this.setUseMipmaps(useMipmaps);}  }
class C{  public void stopAutoScroll(){  isAutoScroll=false;  handler.removeMessages(SCROLL_WHAT);}  }
class C{  @Override public void processAttribute(String namespace,String localName,String value) throws ParseException {  if (!namespace.equals("") || !localName.equals("type")) {    super.processAttribute(namespace,localName,value);  }}  }
class C{  public synchronized Object co_entry_pause(int thisCoroutine) throws java.lang.NoSuchMethodException {  if (!m_activeIDs.get(thisCoroutine))   throw new java.lang.NoSuchMethodException();  while (m_nextCoroutine != thisCoroutine) {    try {      wait();    } catch (    java.lang.InterruptedException e) {    }  }  return m_yield;}  }
class C{  public Boolean isPrtcptnRegn(){  return prtcptnRegn;}  }
class C{  public CharSequence loadLabel(PackageManager pm){  return mService.loadLabel(pm);}  }
class C{  public void stopSensorDetection(SensorDetector detector){  if (detector != null) {    sensorManager.unregisterListener(detector);  }}  }
class C{  public static Map<String,Object> checkInventoryAvailability(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Map<String,Map<String,Timestamp>> ordersToUpdate=FastMap.newInstance();  Map<String,Map<String,Timestamp>> ordersToCancel=FastMap.newInstance();  List<GenericValue> inventoryItems=null;  try {    inventoryItems=EntityQuery.use(delegator).from("InventoryItem").where(EntityCondition.makeCondition("availableToPromiseTotal",EntityOperator.LESS_THAN,BigDecimal.ZERO)).queryList();  } catch (  GenericEntityException e) {    Debug.logError(e,"Trouble getting inventory items",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotRetrieveInventoryItem",locale));  }  if (inventoryItems == null) {    Debug.logInfo("No items out of stock; no backorders to worry about",module);    return ServiceUtil.returnSuccess();  }  Debug.logInfo("OOS Inventory Items: " + inventoryItems.size(),module);  for (  GenericValue inventoryItem : inventoryItems) {    List<GenericValue> shipmentAndItems=null;    try {      List<EntityExpr> exprs=new ArrayList<EntityExpr>();      exprs.add(EntityCondition.makeCondition("productId",EntityOperator.EQUALS,inventoryItem.get("productId")));      exprs.add(EntityCondition.makeCondition("destinationFacilityId",EntityOperator.EQUALS,inventoryItem.get("facilityId")));      exprs.add(EntityCondition.makeCondition("statusId",EntityOperator.NOT_EQUAL,"SHIPMENT_DELIVERED"));      exprs.add(EntityCondition.makeCondition("statusId",EntityOperator.NOT_EQUAL,"SHIPMENT_CANCELLED"));      shipmentAndItems=EntityQuery.use(delegator).from("ShipmentAndItem").where(EntityCondition.makeCondition(exprs,EntityOperator.AND)).orderBy("estimatedArrivalDate").queryList();    } catch (    GenericEntityException e) {      Debug.logError(e,"Problem getting ShipmentAndItem records",module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotRetrieveShipmentAndItem",locale));    }    List<GenericValue> reservations=null;    try {      reservations=inventoryItem.getRelated("OrderItemShipGrpInvRes",null,UtilMisc.toList("-reservedDatetime"),false);    } catch (    GenericEntityException e) {      Debug.logError(e,"Problem getting related reservations",module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotRetrieveRelativeReservation",locale));    }    if (reservations == null) {      Debug.logWarning("No outstanding reservations for this inventory item, why is it negative then?",module);      continue;    }    Debug.logInfo("Reservations for item: " + reservations.size(),module);    BigDecimal availableBeforeReserved=inventoryItem.getBigDecimal("availableToPromiseTotal");    for (    GenericValue reservation : reservations) {      String orderId=reservation.getString("orderId");      String orderItemSeqId=reservation.getString("orderItemSeqId");      Timestamp promisedDate=reservation.getTimestamp("promisedDatetime");      Timestamp currentPromiseDate=reservation.getTimestamp("currentPromisedDate");      Timestamp actualPromiseDate=currentPromiseDate;      if (actualPromiseDate == null) {        if (promisedDate != null) {          actualPromiseDate=promisedDate;        } else {          actualPromiseDate=reservation.getTimestamp("reservedDatetime");        }      }      Debug.logInfo("Promised Date: " + actualPromiseDate,module);      Timestamp nextShipDate=null;      BigDecimal availableAtTime=BigDecimal.ZERO;      for (      GenericValue shipmentItem : shipmentAndItems) {        availableAtTime=availableAtTime.add(shipmentItem.getBigDecimal("quantity"));        if (availableAtTime.compareTo(availableBeforeReserved) >= 0) {          nextShipDate=shipmentItem.getTimestamp("estimatedArrivalDate");          break;        }      }      Debug.logInfo("Next Ship Date: " + nextShipDate,module);      Calendar pCal=Calendar.getInstance();      pCal.setTimeInMillis(actualPromiseDate.getTime());      pCal.add(Calendar.DAY_OF_YEAR,-1);      Timestamp modifiedPromisedDate=new Timestamp(pCal.getTimeInMillis());      Timestamp now=UtilDateTime.nowTimestamp();      Debug.logInfo("Promised Date + 1: " + modifiedPromisedDate,module);      Debug.logInfo("Now: " + now,module);      if (nextShipDate == null || nextShipDate.after(actualPromiseDate)) {        if (nextShipDate == null && modifiedPromisedDate.after(now)) {          Debug.logInfo("No ship date known yet, but promised date hasn't approached, assuming it will be here on time",module);        } else {          Debug.logInfo("We won't ship on time, getting notification info",module);          Map<String,Timestamp> notifyItems=ordersToUpdate.get(orderId);          if (notifyItems == null) {            notifyItems=FastMap.newInstance();          }          notifyItems.put(orderItemSeqId,nextShipDate);          ordersToUpdate.put(orderId,notifyItems);          Calendar sCal=Calendar.getInstance();          sCal.setTimeInMillis(actualPromiseDate.getTime());          sCal.add(Calendar.DAY_OF_YEAR,30);          Timestamp farPastPromised=new Timestamp(sCal.getTimeInMillis());          boolean needToCancel=false;          if (nextShipDate == null || nextShipDate.after(farPastPromised)) {            Debug.logInfo("Ship date is >30 past the promised date",module);            needToCancel=true;          } else           if (currentPromiseDate != null && actualPromiseDate.equals(currentPromiseDate)) {            needToCancel=true;          }          if (needToCancel) {            Debug.logInfo("Flagging the item to auto-cancel",module);            Map<String,Timestamp> cancelItems=ordersToCancel.get(orderId);            if (cancelItems == null) {              cancelItems=FastMap.newInstance();            }            cancelItems.put(orderItemSeqId,farPastPromised);            ordersToCancel.put(orderId,cancelItems);          }          try {            reservation.set("currentPromisedDate",nextShipDate);            reservation.store();          } catch (          GenericEntityException e) {            Debug.logError(e,"Problem storing reservation : " + reservation,module);          }        }      }      availableBeforeReserved=availableBeforeReserved.subtract(reservation.getBigDecimal("quantity"));    }  }  List<String> ordersToNotify=FastList.newInstance();  for (  Map.Entry<String,Map<String,Timestamp>> entry : ordersToUpdate.entrySet()) {    String orderId=entry.getKey();    Map<String,Timestamp> backOrderedItems=entry.getValue();    Map<String,Timestamp> cancelItems=ordersToCancel.get(orderId);    boolean cancelAll=false;    Timestamp cancelAllTime=null;    List<GenericValue> orderItemShipGroups=null;    try {      orderItemShipGroups=EntityQuery.use(delegator).from("OrderItemShipGroup").where("orderId",orderId).queryList();    } catch (    GenericEntityException e) {      Debug.logError(e,"Cannot get OrderItemShipGroups from orderId" + orderId,module);    }    for (    GenericValue orderItemShipGroup : orderItemShipGroups) {      List<GenericValue> orderItems=FastList.newInstance();      List<GenericValue> orderItemShipGroupAssoc=null;      try {        orderItemShipGroupAssoc=EntityQuery.use(delegator).from("OrderItemShipGroupAssoc").where("shipGroupSeqId",orderItemShipGroup.get("shipGroupSeqId"),"orderId",orderId).queryList();        for (        GenericValue assoc : orderItemShipGroupAssoc) {          GenericValue orderItem=assoc.getRelatedOne("OrderItem",false);          if (orderItem != null) {            orderItems.add(orderItem);          }        }      } catch (      GenericEntityException e) {        Debug.logError(e,"Problem fetching OrderItemShipGroupAssoc",module);      }      boolean maySplit=false;      if (orderItemShipGroup != null && orderItemShipGroup.get("maySplit") != null) {        maySplit=orderItemShipGroup.getBoolean("maySplit").booleanValue();      }      if (!maySplit && cancelItems != null) {        cancelAll=true;        Set<String> cancelSet=cancelItems.keySet();        cancelAllTime=cancelItems.get(cancelSet.iterator().next());      }      if (cancelItems == null) {        cancelItems=FastMap.newInstance();      }      if (orderItems != null) {        List<GenericValue> toBeStored=FastList.newInstance();        for (        GenericValue orderItem : orderItems) {          String orderItemSeqId=orderItem.getString("orderItemSeqId");          Timestamp shipDate=backOrderedItems.get(orderItemSeqId);          Timestamp cancelDate=cancelItems.get(orderItemSeqId);          Timestamp currentCancelDate=orderItem.getTimestamp("autoCancelDate");          Debug.logInfo("OI: " + orderId + " SEQID: "+ orderItemSeqId+ " cancelAll: "+ cancelAll+ " cancelDate: "+ cancelDate,module);          if (backOrderedItems.containsKey(orderItemSeqId)) {            orderItem.set("estimatedShipDate",shipDate);            if (currentCancelDate == null) {              if (cancelAll || cancelDate != null) {                if (orderItem.get("dontCancelSetUserLogin") == null && orderItem.get("dontCancelSetDate") == null) {                  if (cancelAllTime != null) {                    orderItem.set("autoCancelDate",cancelAllTime);                  } else {                    orderItem.set("autoCancelDate",cancelDate);                  }                }              }              ordersToNotify.add(orderId);            }            toBeStored.add(orderItem);          }        }        if (toBeStored.size() > 0) {          try {            delegator.storeAll(toBeStored);          } catch (          GenericEntityException e) {            Debug.logError(e,"Problem storing order items",module);          }        }      }    }  }  for (  String orderId : ordersToNotify) {    try {      dispatcher.runAsync("sendOrderBackorderNotification",UtilMisc.<String,Object>toMap("orderId",orderId,"userLogin",userLogin));    } catch (    GenericServiceException e) {      Debug.logError(e,"Problems sending off the notification",module);      continue;    }  }  return ServiceUtil.returnSuccess();}  }
class C{  private byte[] xor(final byte[] input){  final byte[] output=new byte[input.length];  if (this.secret.length == 0) {    System.arraycopy(input,0,output,0,input.length);  } else {    int spos=0;    for (int pos=0; pos < input.length; ++pos) {      output[pos]=(byte)(input[pos] ^ this.secret[spos]);      ++spos;      if (spos >= this.secret.length) {        spos=0;      }    }  }  return output;}  }
class C{  public T caseN4FieldAccessor(N4FieldAccessor object){  return null;}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.MANDATORY) public List<UsageLicenseHistory> loadUsageLicenses(long subscriptionKey,long startTimeForPeriod,long endTimeForPeriod){  Query query=dm.createNamedQuery("UsageLicenseHistory.getForSubKey_VersionDESC");  Date startDate=new Date(startTimeForPeriod);  query.setParameter("startTimeAsDate",startDate);  query.setParameter("subscriptionKey",Long.valueOf(subscriptionKey));  Date endDate=new Date(endTimeForPeriod);  query.setParameter("endTimeAsDate",endDate);  final List<UsageLicenseHistory> usageLicenseHistoryElements=ParameterizedTypes.list(query.getResultList(),UsageLicenseHistory.class);  setUserIdsForUsageLicenses(usageLicenseHistoryElements);  return usageLicenseHistoryElements;}  }
class C{  public void testErrors(){  try {    new ArrayConverter(null,new DateConverter());    fail("Default Type missing - expected IllegalArgumentException");  } catch (  IllegalArgumentException e) {  }  try {    new ArrayConverter(Boolean.class,new DateConverter());    fail("Default Type not an array - expected IllegalArgumentException");  } catch (  IllegalArgumentException e) {  }  try {    new ArrayConverter(int[].class,null);    fail("Component Converter missing - expected IllegalArgumentException");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public synchronized void removeDataUpdateListener(PropertyChangeListener l){  data_updates.removePropertyChangeListener(l);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaNode node=getMediaNode(stack);  return Boolean.valueOf(node != null && node.isVirtual());}  }
class C{  public SceneDimension(@NamedArg("width") double width,@NamedArg("height") double height){  super(width,height);}  }
class C{  public JobDefinitionCreateRequest createJobDefinitionCreateRequest(){  return createJobDefinitionCreateRequest(null);}  }
class C{  public boolean hasNonVoidReturn(){  Iterator<ReturnStatement> _allNonVoidReturnStatements=this.getAllNonVoidReturnStatements();  boolean _isEmpty=IteratorExtensions.isEmpty(_allNonVoidReturnStatements);  return (!_isEmpty);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  private void newSection(final String title){  if (lines.isEmpty())   addLineNumber(); else {    finishLine();    finishLine();  }  sb.append("-----").append(title);}  }
class C{  private static void usage(){  int consoleWidth=ConsoleUtil.getConsoleWidth();  if (consoleWidth <= 0) {    consoleWidth=80;  }  System.out.println("java -cp baksmali.jar org.jf.dexlib2.analysis.DumpVtables -d path/to/framework/jar/files <dex-file>");}  }
class C{  public static String ifNotEmpty(String base,String pre,String post){  if (UtilValidate.isNotEmpty(base))   return pre + base + post; else   return "";}  }
class C{  public void write(OutputStream out,Map<String,String> outputProperties) throws TransformerException {  write(new Utf8Writer(out),outputProperties);}  }
class C{  private IdleStatus(String strValue){  this.strValue=strValue;}  }
class C{  @Override public void labelVertex(RenderContext<V,E> rc,Layout<V,E> layout,V v,String label){  Graph<V,E> graph=layout.getGraph();  if (rc.getVertexIncludePredicate().evaluate(Context.<Graph<V,E>,V>getInstance(graph,v)) == false) {    return;  }  Point2D pt=layout.transform(v);  pt=rc.getMultiLayerTransformer().transform(Layer.LAYOUT,pt);  float x=(float)pt.getX();  float y=(float)pt.getY();  Component component=prepareRenderer(rc,rc.getVertexLabelRenderer(),label,rc.getPickedVertexState().isPicked(v),v);  GraphicsDecorator g=rc.getGraphicsContext();  Dimension d=component.getPreferredSize();  AffineTransform xform=AffineTransform.getTranslateInstance(x,y);  Shape shape=rc.getVertexShapeTransformer().transform(v);  shape=xform.createTransformedShape(shape);  if (rc.getGraphicsContext() instanceof TransformingGraphics) {    BidirectionalTransformer transformer=((TransformingGraphics)rc.getGraphicsContext()).getTransformer();    if (transformer instanceof ShapeTransformer) {      ShapeTransformer shapeTransformer=(ShapeTransformer)transformer;      shape=shapeTransformer.transform(shape);    }  }  Rectangle2D bounds=shape.getBounds2D();  Point p=null;  if (position == Position.AUTO) {    Dimension vvd=rc.getScreenDevice().getSize();    if (vvd.width == 0 || vvd.height == 0) {      vvd=rc.getScreenDevice().getPreferredSize();    }    p=getAnchorPoint(bounds,d,positioner.getPosition(x,y,vvd));  } else {    p=getAnchorPoint(bounds,d,position);  }  if (graphCreator.isLeaf((String)v)) {    p.setLocation(p.x,p.y + LABEL_OFFSET_Y);  }  g.draw(component,rc.getRendererPane(),p.x,p.y,d.width,d.height,true);}  }
class C{  @Override public boolean containsWithinBounds(Object o){  return false;}  }
class C{  XmlElements(XmlElement[] elems){  m_elems=elems;}  }
class C{  public void init(int WindowNo,FormFrame frame){  log.info("VSQLProcess.init");  m_WindowNo=WindowNo;  m_frame=frame;  try {    jbInit();    frame.getContentPane().add(this,BorderLayout.CENTER);  } catch (  Exception e) {    log.log(Level.SEVERE,"VSQLProcess.init",e);  }}  }
class C{  protected void writeTags() throws IOException {  writer.writeComment("===================== HTML 4.0 basic tags ======================");  Map<String,ComponentBean> componentsByComponentFamily=GeneratorUtil.getComponentFamilyComponentMap(configBean);  Map<String,ArrayList<RendererBean>> renderersByComponentFamily=GeneratorUtil.getComponentFamilyRendererMap(configBean,propManager.getProperty(PropertyManager.RENDERKIT_ID));  String targetPackage=propManager.getProperty(PropertyManager.TARGET_PACKAGE);  for (  Map.Entry entry : renderersByComponentFamily.entrySet()) {    String componentFamily=(String)entry.getKey();    List<RendererBean> renderers=(List<RendererBean>)entry.getValue();    for (Iterator<RendererBean> rendererIter=renderers.iterator(); rendererIter.hasNext(); ) {      RendererBean renderer=rendererIter.next();      if (renderer.isIgnoreAll()) {        continue;      }      String rendererType=renderer.getRendererType();      writer.startElement("tag");      DescriptionBean description=renderer.getDescription("");      if (description != null) {        String descriptionText=description.getDescription().trim();        if (descriptionText != null) {          writer.startElement("description");          StringBuffer sb=new StringBuffer();          sb.append("<![CDATA[");          sb.append(descriptionText);          sb.append("]]>\n");          writer.writeText(sb.toString());          writer.closeElement();        }      }      String tagName=renderer.getTagName();      if (tagName == null) {        tagName=makeTldTagName(GeneratorUtil.stripJavaxFacesPrefix(componentFamily),GeneratorUtil.stripJavaxFacesPrefix(rendererType));      }      if (tagName == null) {        throw new IllegalStateException("Could not determine tag name");      }      writer.startElement("name");      writer.writeText(tagName);      writer.closeElement();      if (GeneratorUtil.makeTagClassName(GeneratorUtil.stripJavaxFacesPrefix(componentFamily),GeneratorUtil.stripJavaxFacesPrefix(rendererType)) == null) {        throw new IllegalStateException("Could not determine tag class name");      }      writer.startElement("tag-class");      writer.writeText(targetPackage + '.' + GeneratorUtil.makeTagClassName(GeneratorUtil.stripJavaxFacesPrefix(componentFamily),GeneratorUtil.stripJavaxFacesPrefix(rendererType)));      writer.closeElement();      writer.startElement("body-content");      writer.writeText(getBodyContent(tagName));      writer.closeElement();      List excludeComponentProperties=COMPONENT_PROPERTY_EXCLUDES.get(tagName);      ComponentBean component=componentsByComponentFamily.get(componentFamily);      PropertyBean[] properties=component.getProperties();      PropertyBean property;      for (int i=0, len=properties.length; i < len; i++) {        if (null == (property=properties[i])) {          continue;        }        if (!property.isTagAttribute()) {          continue;        }        if (null != excludeComponentProperties && excludeComponentProperties.contains(property.getPropertyName())) {          continue;        }        writer.startElement("attribute");        description=property.getDescription("");        if (description != null) {          String descriptionText=description.getDescription().trim();          if (descriptionText != null) {            writer.startElement("description");            StringBuffer sb=new StringBuffer();            sb.append("<![CDATA[");            sb.append(descriptionText);            sb.append("]]>\n");            writer.writeText(sb.toString());            writer.closeElement();          }        }        String propertyName=property.getPropertyName();        writer.startElement("name");        writer.writeText(propertyName);        writer.closeElement();        writer.startElement("required");        writer.writeText(property.isRequired() ? Boolean.TRUE.toString() : Boolean.FALSE.toString());        writer.closeElement();        if (!"id".equals(propertyName)) {          if (property.isMethodExpressionEnabled()) {            writer.startElement("deferred-method");            writer.startElement("method-signature");            writer.writeText(property.getMethodSignature());            writer.closeElement(2);          } else           if (property.isValueExpressionEnabled()) {            String type=property.getPropertyClass();            writer.startElement("deferred-value");            writer.startElement("type");            writer.writeText(type);            writer.closeElement(2);          } else {            writer.startElement("rtexprvalue");            writer.writeText(getRtexprvalue(tagName,propertyName));            writer.closeElement();          }        } else {          writer.startElement("rtexprvalue");          writer.writeText(getRtexprvalue(tagName,propertyName));          writer.closeElement();        }        writer.closeElement();      }      AttributeBean[] attributes=renderer.getAttributes();      AttributeBean attribute;      for (int i=0, len=attributes.length; i < len; i++) {        if (null == (attribute=attributes[i])) {          continue;        }        if (!attribute.isTagAttribute()) {          continue;        }        if (attributeShouldBeExcluded(renderer,attribute.getAttributeName())) {          continue;        }        writer.startElement("attribute");        description=attribute.getDescription("");        if (description != null) {          String descriptionText=description.getDescription().trim();          if (descriptionText != null) {            writer.startElement("description");            StringBuffer sb=new StringBuffer();            sb.append("<![CDATA[");            sb.append(descriptionText);            sb.append("]]>\n");            writer.writeText(sb.toString());            writer.closeElement();          }        }        String attributeName=attribute.getAttributeName();        writer.startElement("name");        writer.writeText(attributeName);        writer.closeElement();        writer.startElement("required");        writer.writeText(attribute.isRequired() ? Boolean.TRUE.toString() : Boolean.FALSE.toString());        writer.closeElement();        if (!"id".equals(attributeName)) {          String type=attribute.getAttributeClass();          writer.startElement("deferred-value");          writer.startElement("type");          writer.writeText(type);          writer.closeElement(2);        } else {          writer.startElement("rtexprvalue");          writer.writeText(getRtexprvalue(tagName,attributeName));          writer.closeElement();        }        writer.closeElement();      }      writer.startElement("attribute");      writer.startElement("description");      writer.writeText("The ValueExpression linking this component to a property in a backing bean");      writer.closeElement();      writer.startElement("name");      writer.writeText("binding");      writer.closeElement();      writer.startElement("required");      writer.writeText("false");      writer.closeElement();      writer.startElement("deferred-value");      writer.startElement("type");      writer.writeText("javax.faces.component.UIComponent");      writer.closeElement(2);      writer.closeElement(2);    }  }  String tagDef=loadOptionalTags();  if (tagDef != null) {    writer.write(tagDef);  }}  }
class C{  void sendRoleRequest(OFControllerRole role){  try {    roleChanger.sendRoleRequest(role,0);  } catch (  IOException e) {    log.error("Disconnecting switch {} due to IO Error: {}",getSwitchInfoString(),e.getMessage());    mainConnection.disconnect();  }}  }
class C{  private IFilledList<INaviView> convert(final ImmutableList<IFlowgraphView> nativeFlowgraphViews){  final IFilledList<INaviView> views=new FilledList<INaviView>();  for (  final IFlowgraphView flowgraphView : nativeFlowgraphViews) {    views.add(flowgraphView);  }  return views;}  }
class C{  public void addContext(String str){  if (str == null) {    throw new NullPointerException("str == null");  }  context.append(str);  if (!str.endsWith("\n")) {    context.append('\n');  }}  }
class C{  private void runEnterAnimation(){  final long duration=ANIM_DURATION;  ViewHelper.setPivotX(mViewPager,0);  ViewHelper.setPivotY(mViewPager,0);  ViewHelper.setScaleX(mViewPager,(float)thumbnailWidth / mViewPager.getWidth());  ViewHelper.setScaleY(mViewPager,(float)thumbnailHeight / mViewPager.getHeight());  ViewHelper.setTranslationX(mViewPager,thumbnailLeft);  ViewHelper.setTranslationY(mViewPager,thumbnailTop);  ViewPropertyAnimator.animate(mViewPager).setDuration(duration).scaleX(1).scaleY(1).translationX(0).translationY(0).setInterpolator(new DecelerateInterpolator());  ObjectAnimator bgAnim=ObjectAnimator.ofInt(mViewPager.getBackground(),"alpha",0,255);  bgAnim.setDuration(duration);  bgAnim.start();  ObjectAnimator colorizer=ObjectAnimator.ofFloat(ImagePagerFragment.this,"saturation",0,1);  colorizer.setDuration(duration);  colorizer.start();}  }
class C{  public long readLock(){  long s=state, next;  return ((whead == wtail && (s & ABITS) < RFULL && U.compareAndSwapLong(this,STATE,s,next=s + RUNIT)) ? next : acquireRead(false,0L));}  }
class C{  protected <V>V awaitResult(ListenableFuture<V> future){  return awaitResult(future,timeout,TimeUnit.MILLISECONDS);}  }
class C{  public ExtendedBufferCapabilities derive(VSyncType t){  return new ExtendedBufferCapabilities(this,t);}  }
class C{  public int flagsAsInt(){  return this.data.readUShort(Offset.flags.offset);}  }
class C{  @Override TemplateElement[] accept(Environment env) throws TemplateException, IOException {  return getChildBuffer();}  }
class C{  public DateFormatter(){  this(DateFormat.getDateInstance());}  }
class C{  public PowerVmAllocationPolicyMigrationInterQuartileRange(List<? extends Host> hostList,PowerVmSelectionPolicy vmSelectionPolicy,double safetyParameter,PowerVmAllocationPolicyMigrationAbstract fallbackVmAllocationPolicy){  super(hostList,vmSelectionPolicy);  setSafetyParameter(safetyParameter);  setFallbackVmAllocationPolicy(fallbackVmAllocationPolicy);}  }
class C{  @Override public void run(){  amIActive=true;  int numDecimalPlaces=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  numDecimalPlaces=Integer.parseInt(args[1]);  if (numDecimalPlaces < 0) {    numDecimalPlaces=0;  }  String outputHeader=args[2];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          BigDecimal bd=new BigDecimal(z);          bd=bd.setScale(numDecimalPlaces,BigDecimal.ROUND_FLOOR);          outputFile.setValue(row,col,bd.doubleValue());        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @SuppressWarnings("unused") @Test public void testClosingPooledDoesNotFireConnectionClosed() throws SQLException {  final Connection physical=context.mock(Connection.class);  final FBPooledConnection pooled=new FBPooledConnection(physical);  final ConnectionEventListener cel=context.mock(ConnectionEventListener.class);  pooled.addConnectionEventListener(cel);  context.checking(new Expectations(){{      ignoring(physical);      never(cel).connectionClosed(with(any(ConnectionEvent.class)));    }  });  Connection logical=pooled.getConnection();  pooled.close();}  }
class C{  @SuppressWarnings("unchecked") @Override public Path calcLeastCostPath(final Node fromNode,final Node toNode,final double startTime,final Person person2,final Vehicle vehicle2){  checkNodeBelongToNetwork(fromNode);  checkNodeBelongToNetwork(toNode);  augmentIterationId();  this.person=person2;  this.vehicle=vehicle2;  if (this.pruneDeadEnds) {    this.deadEndEntryNode=getPreProcessData(toNode).getDeadEndEntryNode();  }  RouterPriorityQueue<Node> pendingNodes=(RouterPriorityQueue<Node>)createRouterPriorityQueue();  initFromNode(fromNode,toNode,startTime,pendingNodes);  Node foundToNode=searchLogic(fromNode,toNode,pendingNodes);  if (foundToNode == null)   return null; else {    DijkstraNodeData outData=getData(foundToNode);    double arrivalTime=outData.getTime();    return constructPath(fromNode,foundToNode,startTime,arrivalTime);  }}  }
class C{  public boolean removeEdge(E edge,boolean remove_subtree){  if (!delegate.containsEdge(edge))   return false;  V child=getDest(edge);  if (remove_subtree)   return removeVertex(child); else {    delegate.removeEdge(edge);    return false;  }}  }
class C{  public static <S extends HasYesClickHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    YesClickEvent event=new YesClickEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  protected void onServerResponse(int code,String response){}  }
class C{  public void testMinEqual(){  String a="8478231212478987482988429808779810457634781384756794987";  int aScale=41;  String b="8478231212478987482988429808779810457634781384756794987";  int bScale=41;  String c="8478231212478987482988429808779810457634781384756794987";  int cScale=41;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);  assertEquals("incorrect value",cNumber,aNumber.min(bNumber));}  }
class C{  public static int createSplitsFile(final Connector conn,final String table,final FileSystem fs,final Path splitsFile,final int maxSplits) throws IOException {  LOGGER.info("Creating splits file in location {} from table {} with maximum splits {}",splitsFile,table,maxSplits);  Collection<Text> splits;  try {    splits=conn.tableOperations().listSplits(table,maxSplits);  } catch (  TableNotFoundException|AccumuloSecurityException|AccumuloException e) {    throw new IOException(e.getMessage(),e);  }  if (splits.size() > maxSplits) {    if (conn instanceof MockConnector) {      LOGGER.info("Manually reducing the number of splits to {} due to MockInstance not implementing" + " listSplits(table, maxSplits) properly",maxSplits);    } else {      LOGGER.info("Manually reducing the number of splits to {} (number of splits was {})",maxSplits,splits.size());    }    final Collection<Text> filteredSplits=new TreeSet<>();    final int outputEveryNth=splits.size() / maxSplits;    LOGGER.info("Outputting every {}-th split from {} total",outputEveryNth,splits.size());    int i=0;    for (    final Text text : splits) {      if (i % outputEveryNth == 0) {        filteredSplits.add(text);      }      i++;      if (filteredSplits.size() >= maxSplits) {        break;      }    }    splits=filteredSplits;  }  LOGGER.info("Found {} splits from table {}",splits.size(),table);  try (final PrintStream out=new PrintStream(new BufferedOutputStream(fs.create(splitsFile,true)),false,CommonConstants.UTF_8)){    if (splits.isEmpty()) {      out.close();      return 0;    }    for (    final Text split : splits) {      out.println(new String(Base64.encodeBase64(split.getBytes()),CommonConstants.UTF_8));    }  }   return splits.size();}  }
class C{  public static SendableVenueMessageBuilder builder(){  return new SendableVenueMessageBuilder();}  }
class C{  protected String[] diff_halfMatch(String text1,String text2){  if (Diff_Timeout <= 0) {    return null;  }  String longtext=text1.length() > text2.length() ? text1 : text2;  String shorttext=text1.length() > text2.length() ? text2 : text1;  if (longtext.length() < 4 || shorttext.length() * 2 < longtext.length()) {    return null;  }  String[] hm1=diff_halfMatchI(longtext,shorttext,(longtext.length() + 3) / 4);  String[] hm2=diff_halfMatchI(longtext,shorttext,(longtext.length() + 1) / 2);  String[] hm;  if (hm1 == null && hm2 == null) {    return null;  } else   if (hm2 == null) {    hm=hm1;  } else   if (hm1 == null) {    hm=hm2;  } else {    hm=hm1[4].length() > hm2[4].length() ? hm1 : hm2;  }  if (text1.length() > text2.length()) {    return hm;  } else {    return new String[]{hm[2],hm[3],hm[0],hm[1],hm[4]};  }}  }
class C{  @Deprecated public static <T>UnmodifiableIterator<T> unmodifiableIterator(UnmodifiableIterator<T> iterator){  return checkNotNull(iterator);}  }
class C{  public static final void validate(Key key) throws InvalidKeyException {  if (key == null) {    throw new NullPointerException("The key to be validated cannot be null");  }  if (key instanceof DHPublicKey) {    validateDHPublicKey((DHPublicKey)key);  }}  }
class C{  void postRemoveChildEvent(ASTNode node,ASTNode child,StructuralPropertyDescriptor property){}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entities;  NamedNodeMap notations;  Attr attr;  Node newNode;  doc=(Document)load("staffNS",true);  docType=doc.getDoctype();  entities=docType.getEntities();  notations=docType.getNotations();  attr=doc.createAttributeNS("http://www.w3.org/DOM/Test","test");{    boolean success=false;    try {      newNode=entities.setNamedItemNS(attr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR_entities",success);  }{    boolean success=false;    try {      newNode=notations.setNamedItemNS(attr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR_notations",success);  }}  }
class C{  public static AuthTime readFrom(SeekableByteChannel chan) throws IOException {  String client=readStringWithLength(chan);  String server=readStringWithLength(chan);  ByteBuffer bb=ByteBuffer.allocate(8);  chan.read(bb);  bb.order(ByteOrder.nativeOrder());  int cusec=bb.getInt(0);  int ctime=bb.getInt(4);  if (client.isEmpty()) {    StringTokenizer st=new StringTokenizer(server," :");    if (st.countTokens() != 6) {      throw new IOException("Incorrect rcache style");    }    st.nextToken();    String hash=st.nextToken();    st.nextToken();    client=st.nextToken();    st.nextToken();    server=st.nextToken();    return new AuthTimeWithHash(client,server,ctime,cusec,hash);  } else {    return new AuthTime(client,server,ctime,cusec);  }}  }
class C{  public LimeTextField(Document doc,String text,int columns){  super(doc,text,columns);  init();}  }
class C{  public void advanceProcessingTime(Instant newProcessingTime) throws Exception {  ReduceFnRunner<String,InputT,OutputT,W> runner=createRunner();  timerInternals.advanceProcessingTime(runner,newProcessingTime);  runner.persist();}  }
class C{  public Future<Void> into(@NonNull File file){  final Bitmap croppedBitmap=cropView.crop();  return Utils.flushToFile(croppedBitmap,format,quality,file);}  }
class C{  public double computeAverageLocalOfObservations(){  return 0.5 * Math.log(2.0 * Math.PI * Math.E* variance);}  }
class C{  public static <T>T min(T[] self,@ClosureParams(value=FromString.class,options={"T","T,T"}) Closure closure){  return min((Iterable<T>)toList(self),closure);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    final double log2=0.301029995663981;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.log(z) / log2);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private boolean isAcceptedMethod(String method){  for (  String allowed : ALLOWED_METHODS) {    if (allowed.equals(method)) {      return true;    }  }  return false;}  }
class C{  @SuppressWarnings("all") void paintBackground(SeaGlassContext context,Graphics g,JComponent c){  context.getPainter().paintArrowButtonBackground(context,g,0,0,c.getWidth(),c.getHeight());}  }
class C{  protected void extendElement(Element e){  SerialNode node=(SerialNode)SerialTrafficController.instance().getNode(0);  int index=1;  while (node != null) {    Element n=new Element("node");    n.setAttribute("name","" + node.getNodeAddress());    e.addContent(n);    n.addContent(makeParameter("nodetype","" + node.getNodeType()));    node=(SerialNode)SerialTrafficController.instance().getNode(index);    index++;  }}  }
class C{  private void updateBounds(Relation<V> relation,WritableIntegerDataStore assignment,WritableDoubleDataStore upper,WritableDataStore<double[]> lower,double[] move){  for (DBIDIter it=relation.iterDBIDs(); it.valid(); it.advance()) {    upper.increment(it,move[assignment.intValue(it)]);    double[] l=lower.get(it);    for (int i=0; i < k; i++) {      l[i]-=move[i];    }  }}  }
class C{  private boolean journalRebuildRequired(){  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();}  }
class C{  public Postcode(){  super(POSTCODE_REGEX,true,1.0);}  }
class C{  @LargeTest public void testEffectKenBurnSet() throws Exception {  final String imageItemFileName=INPUT_FILE_PATH + "IMG_640x480.jpg";  final int imageItemRenderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  boolean flagForException=false;  final MediaImageItem mediaImageItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaImageItem1",imageItemFileName,5000,imageItemRenderingMode);  mVideoEditor.addMediaItem(mediaImageItem);  final Rect startRect=new Rect((mediaImageItem.getHeight() / 3),(mediaImageItem.getWidth() / 3),(mediaImageItem.getHeight() / 2),(mediaImageItem.getWidth() / 2));  final Rect endRect=new Rect(0,0,mediaImageItem.getWidth(),mediaImageItem.getHeight());  EffectKenBurns kbEffectOnMediaItem=null;  kbEffectOnMediaItem=new EffectKenBurns(mediaImageItem,"KBOnM2",startRect,endRect,500,3000);  assertNotNull("EffectKenBurns",kbEffectOnMediaItem);  mediaImageItem.addEffect(kbEffectOnMediaItem);  assertEquals("KenBurn Start Rect",startRect,kbEffectOnMediaItem.getStartRect());  assertEquals("KenBurn End Rect",endRect,kbEffectOnMediaItem.getEndRect());  final Rect startRect1=new Rect((mediaImageItem.getHeight() / 5),(mediaImageItem.getWidth() / 5),(mediaImageItem.getHeight() / 4),(mediaImageItem.getWidth() / 4));  final Rect endRect1=new Rect(10,10,mediaImageItem.getWidth() / 4,mediaImageItem.getHeight() / 4);  kbEffectOnMediaItem=new EffectKenBurns(mediaImageItem,"KBOnM2_changed",startRect1,endRect1,500,3000);  assertEquals("KenBurn Start Rect",startRect1,kbEffectOnMediaItem.getStartRect());  assertEquals("KenBurn End Rect",endRect1,kbEffectOnMediaItem.getEndRect());  final Rect zeroRect=new Rect(0,0,0,0);  try {    kbEffectOnMediaItem=new EffectKenBurns(mediaImageItem,"KBOnM2_zeroStart",zeroRect,endRect,500,3000);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Invalid Start Rect",flagForException);  flagForException=false;  try {    kbEffectOnMediaItem=new EffectKenBurns(mediaImageItem,"KBOnM2_zeroEnd",startRect,zeroRect,500,3000);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Invalid End Rect",flagForException);}  }
class C{  public void writeUnsafeTo(final PacketOutputStream os){  os.writeUnsafe(ParameterWriter.QUOTE);  os.writeUnsafe(dateByteFormat());  os.writeUnsafe(ParameterWriter.QUOTE);}  }
class C{  public SheetEvent(JSheet source,JFileChooser fileChooser,int option,@Nullable Object value){  super(source);  this.pane=fileChooser;  this.option=option;  this.value=value;}  }
class C{  public static boolean hasChanges(@NotNull PsiDirectory directory){  return hasChanges(directory.getVirtualFile(),directory.getProject());}  }
class C{  public Boolean isPartialUpgradeAllowed(){  return partialUpgradeAllowed;}  }
class C{  private static CompletionResultSet createResult(@NotNull final PsiElement original,@NotNull final CompletionResultSet result,final int offset){  PyStringLiteralExpression prevElement=PsiTreeUtil.getPrevSiblingOfType(original,PyStringLiteralExpression.class);  if (prevElement != null) {    ASTNode prevNode=prevElement.getNode();    if (prevNode != null) {      if (prevNode.getElementType() != PyTokenTypes.LBRACKET)       return result.withPrefixMatcher(findPrefix(prevElement,offset));    }  }  final PsiElement parentElement=original.getParent();  if (parentElement != null) {    if (parentElement instanceof PyStringLiteralExpression)     return result.withPrefixMatcher(findPrefix((PyElement)parentElement,offset));  }  final PyNumericLiteralExpression number=PsiTreeUtil.findElementOfClassAtOffset(original.getContainingFile(),offset - 1,PyNumericLiteralExpression.class,false);  if (number != null)   return result.withPrefixMatcher(findPrefix(number,offset));  return result;}  }
class C{  public int decrementSubscriberCount(){  if (isAvailable()) {    return jmdnsSubscriberCount.decrementAndGet();  }  return 0;}  }
class C{  public void addFlower(@Nonnull Block flower){  addFlower(flower,ItemKey.WILDCARD_VALUE);}  }
class C{  public Loader(ClassLoader parent,ClassPool cp){  super(parent);  init(cp);}  }
class C{  public void refreshProfileExtras(){  if (s_profile.getSelectedItemPosition() > 2) {    mSlicingHandler.setExtras("profile.layer_height",getFloatValue(layerHeight.getText().toString()));    mSlicingHandler.setExtras("profile.wall_thickness",getFloatValue(shellThickness.getText().toString()));    mSlicingHandler.setExtras("profile.solid_layer_thickness",getFloatValue(bottomTopThickness.getText().toString()));    mSlicingHandler.setExtras("profile.print_speed",getFloatValue(printSpeed.getText().toString()));    mSlicingHandler.setExtras("profile.print_temperature",new JSONArray().put(getFloatValue(printTemperature.getText().toString())));    mSlicingHandler.setExtras("profile.filament_diameter",new JSONArray().put(getFloatValue(filamentDiamenter.getText().toString())));    mSlicingHandler.setExtras("profile.filament_flow",getFloatValue(filamentFlow.getText().toString()));    mSlicingHandler.setExtras("profile.retraction_enable",enableRetraction.isChecked());    mSlicingHandler.setExtras("profile.travel_speed",getFloatValue(travelSpeed.getText().toString()));    mSlicingHandler.setExtras("profile.bottom_layer_speed",getFloatValue(bottomLayerSpeed.getText().toString()));    mSlicingHandler.setExtras("profile.infill_speed",getFloatValue(infillSpeed.getText().toString()));    mSlicingHandler.setExtras("profile.outer_shell_speed",getFloatValue(outerShellSpeed.getText().toString()));    mSlicingHandler.setExtras("profile.inner_shell_speed",getFloatValue(innerShellSpeed.getText().toString()));    mSlicingHandler.setExtras("profile.cool_min_layer_time",getFloatValue(minimalLayerTime.getText().toString()));    mSlicingHandler.setExtras("profile.fan_enabled",enableCoolingFan.isChecked());  }}  }
class C{  public void notifyRegistration(){synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.broadcastServiceRegistered();  }}  }
class C{  public static String removeDuplicates(String source,String searchFor){  StringBuffer result=new StringBuffer("");  Enumeration myEnum=new StringTokenizer(source,searchFor,true);  String current="";  String previous="";  while (myEnum.hasMoreElements()) {    current=(String)myEnum.nextElement();    if (!current.equals(previous)) {      result.append(current);    }    previous=current;  }  return result.toString();}  }
class C{  public TransformHandleKit(){}  }
class C{  public static Solenoid doubleSolenoid(int module,int extendChannel,int retractChannel,Solenoid.Direction initialDirection){  DoubleSolenoid solenoid=new DoubleSolenoid(module,extendChannel,retractChannel);  return new HardwareDoubleSolenoid(solenoid,initialDirection);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.CASE_CLAUSE__EXPRESSION:    return getExpression();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override protected void doClose(){  super.doClose();  closeInternal();}  }
class C{  public static String toString(int x){  return toString(x,10);}  }
class C{  public void addSipEventListener(SipEventListener listener){  mListeners.add(listener);}  }
class C{  @Deprecated public static void printStatusMsg(boolean isErr,String msg){  String status=msg;  if (isErr) {    status="Error: " + status;  }  System.out.println(status);}  }
class C{  public void copy(StateSet set){  if (DEBUG)   Out.dump("StateSet.copy(" + set + ") start");  if (set == null) {    for (int i=0; i < bits.length; i++)     bits[i]=0;    return;  }  if (bits.length < set.bits.length) {    bits=new long[set.bits.length];  } else {    for (int i=set.bits.length; i < bits.length; i++)     bits[i]=0;  }  System.arraycopy(set.bits,0,bits,0,bits.length);  if (DEBUG) {    Out.dump("StateSet.copy(" + set + ") end");    Out.dump("Set is : " + this);  }}  }
class C{  public boolean executeFreeTextQuery(Repository repo) throws Exception {  if (((BigdataSailRepository)repo).getDatabase().getLexiconRelation().getSearchEngine() == null) {    return false;  }  RepositoryConnection cxn=repo.getConnection();  cxn.setAutoCommit(false);  try {    cxn.add(new URIImpl("http://www.bigdata.com/A"),RDFS.LABEL,new LiteralImpl("Yellow Rose"));    cxn.add(new URIImpl("http://www.bigdata.com/B"),RDFS.LABEL,new LiteralImpl("Red Rose"));    cxn.add(new URIImpl("http://www.bigdata.com/C"),RDFS.LABEL,new LiteralImpl("Old Yellow House"));    cxn.add(new URIImpl("http://www.bigdata.com/D"),RDFS.LABEL,new LiteralImpl("Loud Yell"));    cxn.commit();  } catch (  Exception ex) {    cxn.rollback();    throw ex;  } finally {    cxn.close();  }  String query="select ?x where { ?x <" + BDS.SEARCH + "> \"Yell\" . }";  executeSelectQuery(repo,query,QueryLanguage.SPARQL);  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.150 -0500",hash_original_method="379200F1BB84BA87FFEA29C22000A4D9",hash_generated_method="463696934A97BB7B13571CF5275474F5") public void copyTo(int[] d){  validateIsInt32();  mRS.validate();  mRS.nAllocationRead(getID(),d);}  }
class C{  private static String internalGetStrippedReversed(String np,int numDigits){  if (np == null)   return null;  StringBuilder ret=new StringBuilder(numDigits);  int length=np.length();  for (int i=length - 1, s=length; i >= 0 && (s - i) <= numDigits; i--) {    char c=np.charAt(i);    ret.append(c);  }  return ret.toString();}  }
class C{  private ManagedIndexSchema shallowCopy(boolean includeFieldDataStructures){  ManagedIndexSchema newSchema=null;  try {    newSchema=new ManagedIndexSchema(solrConfig,loader,isMutable,managedSchemaResourceName,schemaZkVersion,getSchemaUpdateLock());  } catch (  KeeperException e) {    final String msg="Error instantiating ManagedIndexSchema";    log.error(msg,e);    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,msg,e);  }catch (  InterruptedException e) {    Thread.currentThread().interrupt();    log.warn("",e);  }  assert newSchema != null;  newSchema.name=name;  newSchema.version=version;  newSchema.defaultSearchFieldName=defaultSearchFieldName;  newSchema.queryParserDefaultOperator=queryParserDefaultOperator;  newSchema.isExplicitQueryParserDefaultOperator=isExplicitQueryParserDefaultOperator;  newSchema.similarity=similarity;  newSchema.similarityFactory=similarityFactory;  newSchema.isExplicitSimilarity=isExplicitSimilarity;  newSchema.uniqueKeyField=uniqueKeyField;  newSchema.uniqueKeyFieldName=uniqueKeyFieldName;  newSchema.uniqueKeyFieldType=uniqueKeyFieldType;  newSchema.resourceName=managedSchemaResourceName;  if (includeFieldDataStructures) {    newSchema.fields.putAll(fields);    newSchema.fieldsWithDefaultValue.addAll(fieldsWithDefaultValue);    newSchema.requiredFields.addAll(requiredFields);  }  newSchema.fieldTypes=fieldTypes;  newSchema.dynamicFields=dynamicFields;  newSchema.dynamicCopyFields=dynamicCopyFields;  newSchema.copyFieldsMap=copyFieldsMap;  newSchema.copyFieldTargetCounts=copyFieldTargetCounts;  newSchema.schemaAware=schemaAware;  return newSchema;}  }
class C{  public boolean isVertical(){  return p0.x == p1.x;}  }
class C{  public Soundex(){  this(US_ENGLISH_MAPPING);}  }
class C{  @Override public void translate(int x,int y){  if (DEBUG) {    System.out.println("translate with x = " + x + " and y = "+ y);  }  m_localGraphicsState.setXOffset(m_localGraphicsState.getXOffset() + xScale(x));  m_localGraphicsState.setYOffset(m_localGraphicsState.getYOffset() + yScale(y));  m_psGraphicsState.setXOffset(m_psGraphicsState.getXOffset() + xScale(x));  m_psGraphicsState.setYOffset(m_psGraphicsState.getYOffset() + yScale(y));}  }
class C{  @Override public void generateCode(BlockScope currentScope,boolean valueRequired){}  }
class C{  @Override public void printStackTrace(PrintStream ps){  super.printStackTrace(ps);}  }
class C{  @Override protected void onBindView(View view){  super.onBindView(view);  if (mOriginalTotalPhrase == null)   updateDetailData();  mOriginalSizeTextView=(TextView)view.findViewById(R.id.data_reduction_original_size);  mOriginalSizeTextView.setText(mOriginalTotalPhrase);  mReceivedSizeTextView=(TextView)view.findViewById(R.id.data_reduction_compressed_size);  mReceivedSizeTextView.setText(mReceivedTotalPhrase);  mPercentReductionTextView=(TextView)view.findViewById(R.id.data_reduction_percent);  mPercentReductionTextView.setText(mPercentReductionPhrase);  mStartDateTextView=(TextView)view.findViewById(R.id.data_reduction_start_date);  mStartDateTextView.setText(mStartDatePhrase);  mEndDateTextView=(TextView)view.findViewById(R.id.data_reduction_end_date);  mEndDateTextView.setText(mEndDatePhrase);  mChartDataUsageView=(ChartDataUsageView)view.findViewById(R.id.chart);  mChartDataUsageView.bindOriginalNetworkStats(mOriginalNetworkStatsHistory);  mChartDataUsageView.bindCompressedNetworkStats(mReceivedNetworkStatsHistory);  mChartDataUsageView.setVisibleRange(mCurrentTime - DateUtils.DAY_IN_MILLIS * DAYS_IN_CHART,mCurrentTime + DateUtils.HOUR_IN_MILLIS,mLeftPosition,mRightPosition);  View dataReductionProxyUnreachableWarning=view.findViewById(R.id.data_reduction_proxy_unreachable);  if (DataReductionProxySettings.getInstance().isDataReductionProxyUnreachable()) {    dataReductionProxyUnreachableWarning.setVisibility(View.VISIBLE);  } else {    dataReductionProxyUnreachableWarning.setVisibility(View.GONE);  }}  }
class C{  private Uri insertTrackPoint(Uri url,ContentValues values){  boolean hasLatitude=values.containsKey(TrackPointsColumns.LATITUDE);  boolean hasLongitude=values.containsKey(TrackPointsColumns.LONGITUDE);  boolean hasTime=values.containsKey(TrackPointsColumns.TIME);  if (!hasLatitude || !hasLongitude || !hasTime) {    throw new IllegalArgumentException("Latitude, longitude, and time values are required.");  }  long rowId=db.insert(TrackPointsColumns.TABLE_NAME,TrackPointsColumns._ID,values);  if (rowId >= 0) {    return ContentUris.appendId(TrackPointsColumns.CONTENT_URI.buildUpon(),rowId).build();  }  throw new SQLiteException("Failed to insert a track point " + url);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FlushFdrFile[");  buffer.append("order = ").append(order);  buffer.append(", fileNameFis = ").append(fileNameFis);  buffer.append(", fileNameLog = ").append(fileNameLog);  buffer.append(", fileID = ").append(fileID);  buffer.append(", pageID = ").append(pageID);  buffer.append("]");  return buffer.toString();}  }
class C{  private String lookupString(){  String name=lookupClass.getName();  String suffix="";  if (lookupModes == 0)   suffix="/noaccess"; else   if (lookupModes == PUBLIC)   suffix="/public"; else   if (lookupModes == (PUBLIC | PACKAGE))   suffix="/package"; else   if (lookupModes == (PUBLIC | PACKAGE | PRIVATE))   suffix="/private"; else   if (lookupModes == (PUBLIC | PACKAGE | PRIVATE| PROTECTED))   suffix=""; else   suffix="/#" + Integer.toHexString(lookupModes);  return name + suffix;}  }
class C{  public static int[] range(int start,int end){  int[] out=new int[end - start];  for (int i=0, j=start; j < end; i++, j++) {    out[i]=j;  }  return out;}  }
class C{  private static int GetStringUTFLength(JNIEnvironment env,int objJREF){  if (traceJNI)   VM.sysWrite("JNI called: GetStringUTFLength  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    String str=(String)env.getJNIRef(objJREF);    return UTF8Convert.utfLength(str);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public InverseMatrixWrapper(DataWrapper wrapper,Parameters params){  if (wrapper == null) {    throw new NullPointerException("The given data must not be null");  }  DataModel model=wrapper.getSelectedDataModel();  if (model instanceof DataSet) {    DataSet dataSet=(DataSet)model;    if (!(dataSet.isContinuous())) {      throw new IllegalArgumentException("The data must be continuous");    }    TetradMatrix _data=dataSet.getDoubleData();    TetradMatrix _data2=_data.inverse();    DataSet inverse=ColtDataSet.makeData(dataSet.getVariables(),_data2);    setDataModel(inverse);    setSourceGraph(wrapper.getSourceGraph());  } else   if (model instanceof ICovarianceMatrix) {    ICovarianceMatrix cov=(ICovarianceMatrix)model;    TetradMatrix _data=cov.getMatrix();    TetradMatrix _data2=_data.inverse();    DataSet inverse=ColtDataSet.makeData(cov.getVariables(),_data2);    setDataModel(inverse);    setSourceGraph(wrapper.getSourceGraph());  } else {    throw new IllegalArgumentException("Must be a dataset or a covariance  matrix");  }  LogDataUtils.logDataModelList("Conversion of data to covariance matrix form.",getDataModelList());}  }
class C{  public boolean isRTL(){  return rtl;}  }
class C{  private Optional<Type> find(Map<Node,Type> map,LambdaExpr lambdaExpr){  for (  Node key : map.keySet()) {    if (key instanceof LambdaExpr) {      LambdaExpr keyLambdaExpr=(LambdaExpr)key;      if (keyLambdaExpr.toString().equals(lambdaExpr.toString()) && getParentNode(keyLambdaExpr) == getParentNode(lambdaExpr)) {        return Optional.of(map.get(keyLambdaExpr));      }    }  }  return Optional.empty();}  }
class C{  public static String randomRealisticUnicodeString(Random r){  return randomRealisticUnicodeString(r,20);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  private void drawPolyPolygon(Graphics2D g2d,List pols){  Iterator it=pols.iterator();  while (it.hasNext()) {    Polygon2D pol=(Polygon2D)(it.next());    g2d.draw(pol);  }}  }
class C{  public static Animation inFromLeftAnimation(long duration,Interpolator interpolator){  Animation inFromLeft=new TranslateAnimation(Animation.RELATIVE_TO_PARENT,-1.0f,Animation.RELATIVE_TO_PARENT,0.0f,Animation.RELATIVE_TO_PARENT,0.0f,Animation.RELATIVE_TO_PARENT,0.0f);  inFromLeft.setDuration(duration);  inFromLeft.setInterpolator(interpolator == null ? new AccelerateInterpolator() : interpolator);  return inFromLeft;}  }
class C{  private void drawFrequencyLineAndLabel(Graphics2D graphics,long frequency){  float xAxis=(float)(getSize().getWidth() * ((double)frequency / mBandwidth));  drawFrequencyLine(graphics,xAxis,mColorSpectrumLine);  graphics.setColor(mColorSpectrumLine);  drawFrequencyLabel(graphics,xAxis,frequency);}  }
class C{  public Text(byte[] utf8){  set(utf8);}  }
class C{  protected ListAdapter onCreateRootAdapter(){  return new PreferenceGroupAdapter(this);}  }
class C{  public void put(String localPath,String hdfsPath) throws ReplicatorException {  JavaFileIO localFileIO=new JavaFileIO();  FilePath local=new FilePath(localPath);  FilePath remote=new FilePath(hdfsPath);  try {    FileIOUtils.copyBytes(localFileIO.getInputStream(local),hdfsFileIO.getOutputStream(remote),1024,true);  } catch (  IOException e) {    throw new ReplicatorException("Unable to copy file: local path=" + localPath + " hdfs path="+ hdfsPath+ " message="+ e.getMessage(),e);  }}  }
class C{  public OutlierResult run(Database database,Relation<O> relation){  StepProgress stepprog=LOG.isVerbose() ? new StepProgress("VOV",3) : null;  DBIDs ids=relation.getDBIDs();  int dim=RelationUtil.dimensionality(relation);  LOG.beginStep(stepprog,1,"Materializing nearest-neighbor sets.");  KNNQuery<O> knnq=DatabaseUtil.precomputedKNNQuery(database,relation,getDistanceFunction(),k);  LOG.beginStep(stepprog,2,"Computing Volumes.");  WritableDoubleDataStore vols=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP);  computeVolumes(knnq,dim,ids,vols);  LOG.beginStep(stepprog,3,"Computing Variance of Volumes (VOV).");  WritableDoubleDataStore vovs=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_DB);  DoubleMinMax vovminmax=new DoubleMinMax();  computeVOVs(knnq,ids,vols,vovs,vovminmax);  LOG.setCompleted(stepprog);  DoubleRelation scoreResult=new MaterializedDoubleRelation("Variance of Volume","vov-outlier",vovs,ids);  OutlierScoreMeta scoreMeta=new BasicOutlierScoreMeta(vovminmax.getMin(),vovminmax.getMax(),0.0,Double.POSITIVE_INFINITY,0.0);  return new OutlierResult(scoreMeta,scoreResult);}  }
class C{  public AnimatablePointListValue(AnimationTarget target,float[] numbers){  super(target,numbers);}  }
class C{  public static int find(Array array,Object object){  int len=array.size();  for (int i=1; i <= len; i++) {    Object tmp=array.get(i,null);    try {      if (tmp != null && Operator.compare(object,tmp) == 0)       return i;    } catch (    PageException e) {    }  }  return 0;}  }
class C{  protected void initializeLog4j(final String log4jConfigurationFile){  String log4jPropertiesFile=StringUtils.lowerCase(StringUtils.trim(log4jConfigurationFile));  if (StringUtils.isNoneBlank(log4jConfigurationFile)) {    File log4jFile=new File(log4jPropertiesFile);    if (log4jFile.isFile()) {      try {        PropertyConfigurator.configure(new FileInputStream(log4jFile));      } catch (      FileNotFoundException e) {        System.out.println("No log4j configuration found at '" + log4jConfigurationFile + "'");      }    } else {      System.out.println("No log4j configuration found at '" + log4jConfigurationFile + "'");    }  } else {    System.out.println("No log4j configuration file provided");  }}  }
class C{  public static void notifyTicket(Context c,@NonNull Ticket t,boolean keepNotification){  String text;  String ticker;  int smallIcon;  int largeIcon;  int status;switch (TicketsAdapter.getValidityStatus(t.getStatus(),t.getValidTo())) {case TicketProvider.Tickets.STATUS_VALID:case TicketProvider.Tickets.STATUS_VALID_EXPIRING:    text=c.getString(R.string.notif_valid_text,FormatUtil.formatDateTimeDifference(t.getValidTo()));  ticker=c.getString(R.string.notif_valid_ticker);smallIcon=R.drawable.notification_small_ready;largeIcon=R.drawable.notification_big_ready;status=TicketProvider.Tickets.STATUS_VALID_EXPIRING;break;case TicketProvider.Tickets.STATUS_EXPIRING:case TicketProvider.Tickets.STATUS_EXPIRING_EXPIRED:text=c.getString(R.string.notif_expiring_text,FormatUtil.formatTime(t.getValidTo()));ticker=c.getString(R.string.notif_expiring_ticker);smallIcon=R.drawable.notification_small_warning;largeIcon=R.drawable.notification_big_warning;status=TicketProvider.Tickets.STATUS_EXPIRING_EXPIRED;break;case TicketProvider.Tickets.STATUS_EXPIRED:text=c.getString(R.string.notif_expired_text,FormatUtil.formatTime(t.getValidTo()));ticker=c.getString(R.string.notif_expired_ticker);smallIcon=R.drawable.notification_small_expired;largeIcon=R.drawable.notification_big_expired;status=TicketProvider.Tickets.STATUS_EXPIRED;break;default :return;}Intent intent=new Intent(c,WearableService.class);intent.setAction("sent_notification_to_wear");intent.putExtra("ticket",t);intent.putExtra("status",status);c.startService(intent);Intent i=new Intent(c,MainActivity.class);i.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);i.putExtra(MainActivity.EXTRA_TICKET_ID,t.getId());PendingIntent openIntent=PendingIntent.getActivity(c,t.getNotificationId(),i,PendingIntent.FLAG_CANCEL_CURRENT);Intent i2=new Intent(c,MainActivity.class);i2.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);i2.putExtra(MainActivity.EXTRA_TICKET_ID,t.getId());i2.putExtra(MainActivity.EXTRA_SHOW_SMS,true);PendingIntent showSmsIntent=PendingIntent.getActivity(c,t.getNotificationId() + 1000,i2,PendingIntent.FLAG_CANCEL_CURRENT);List<Action> actions=new ArrayList<Action>();actions.add(new Action(R.drawable.notification_show_sms,R.string.notif_show_sms,showSmsIntent));List<String> rows=new ArrayList<String>();rows.add(text);rows.add(c.getString(R.string.tickets_valid_from) + ": " + FormatUtil.formatDateTime(t.getValidFrom()));rows.add(c.getString(R.string.tickets_code) + ": " + t.getHash());fireNotification(c,t.getNotificationId(),openIntent,c.getString(R.string.application_name),text,rows,t.getCity(),ticker,smallIcon,largeIcon,actions,keepNotification);}  }
class C{  private static OFActionSetTpSrc decode_set_src_port(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("((?:0x)?\\d+)").matcher(actionToDecode);  if (n.matches()) {    if (n.group(1) != null) {      try {        TransportPort portnum=TransportPort.of(get_short(n.group(1)));        OFActionSetTpSrc.Builder ab=OFFactories.getFactory(version).actions().buildSetTpSrc();        ab.setTpPort(portnum);        log.debug("action {}",ab.build());        return ab.build();      } catch (      NumberFormatException e) {        log.debug("Invalid src-port in: {} (error ignored)",actionToDecode);        return null;      }    }  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }  return null;}  }
class C{  public void componentAdded(ContainerEvent e){  installListeners(e.getChild());  if (AWTEventMonitor.containerListener_private != null) {    AWTEventMonitor.containerListener_private.componentAdded(e);  }}  }
class C{  public synchronized void removeMarkup(){  if (Cfg.DEBUG) {    Check.requires(markupId != null,"agentId null");  }  final String markupName=makeMarkupName(markupId,true);  if (Cfg.DEBUG) {    Check.asserts(markupName != "","markupName empty");  }  final AutoFile remove=new AutoFile(markupName);  remove.delete();}  }
class C{  @SuppressWarnings("nls") public void flush(){synchronized (this) {    if (!hasXmlHeader) {      out.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?> ");      out.println("<java version=\"" + System.getProperty("java.version") + "\" class=\"com.googlecode.openbeans.XMLDecoder\"> ");      hasXmlHeader=true;    }    for (Iterator<Object> iter=flushPending.iterator(); iter.hasNext(); ) {      Object o=iter.next();      Record rec=objRecordMap.get(o);      if (rec != null) {        preprocess(o,rec);      }    }    for (Iterator<Object> iter=flushPending.iterator(); iter.hasNext(); ) {      Object o=iter.next();      flushObject(o,INDENT_UNIT);      iter.remove();    }    objRecordMap.clear();    flushPendingStat.clear();    objPrePendingCache.clear();    clazzCounterMap.clear();    super.clear();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.976 -0500",hash_original_method="5AB01C88F799E5B54FF71EE82B91E811",hash_generated_method="EC72A69BD5DAA2B233102023BAFFC2D1") public String trim(){  return this;}  }
class C{  public static Document createXMLDirection(Document doc,int size,Locale locale,boolean onlyDirection,int typeAddress){  Document document=DocumentHelper.createDocument();  Element root=null;  Element body=null;  Element telem=null;  Element bodytel=null;  List nodeList=null;  List telemList=null;  if (!onlyDirection) {    root=document.addElement(XML_PERSONA_TEXT);    String firstName=null;    String secondName=null;    String personType=null;    addPersonData(doc.selectSingleNode(XPATH_PERSONA_ID).getText(),doc.selectSingleNode(XPATH_PERSONA_TIPO).getText(),doc.selectSingleNode(XPATH_PERSONA_TIPODOC).getText(),doc.selectSingleNode(XPATH_PERSONA_NIF).getText(),parseValues(doc.selectSingleNode(XPATH_PERSONA_APELLIDO1).getText()),parseValues(doc.selectSingleNode(XPATH_PERSONA_APELLIDO2).getText()),parseValues(doc.selectSingleNode(XPATH_PERSONA_NOMBRE).getText()),root,locale);    body=root.addElement(XML_DOMICILIOS_TEXT);    nodeList=doc.selectNodes(XPATH_PERSONA_DOMICILIO);    bodytel=root.addElement(XML_TELEMATICAS_TEXT);    telemList=doc.selectNodes(XPATH_PERSONA_TELEMATICA);  } else {    if (typeAddress == 0) {      root=document.addElement(XML_DOMICILIOS_TEXT);      nodeList=doc.selectNodes(XPATH_DOMICILIOS_DOMICILIO);    } else {      root=document.addElement(XML_TELEMATICAS_TEXT);      telemList=doc.selectNodes(XPATH_TELEMATICAS_TELEMATICA);    }  }  if (nodeList != null) {    if (!nodeList.isEmpty()) {      Element node=null;      ScrDom dom=null;      for (Iterator it=nodeList.iterator(); it.hasNext(); ) {        node=(Element)it.next();        dom=new ScrDom();        dom.setAddress(((Element)node.selectObject(XML_DIRECCION_TEXT)).getText());        dom.setCity(((Element)node.selectObject(XML_POBLACION_TEXT)).getText());        dom.setCountry(((Element)node.selectObject(XML_PROVINCIA_TEXT)).getText());        dom.setId(new Integer(((Element)node.selectObject(XML_ID_TEXT)).getText()));        dom.setPreference(new Integer(((Element)node.selectObject(XML_PREFERENCIA_TEXT)).getText()).intValue());        dom.setZip(((Element)node.selectObject(XML_CODPOSTAL_TEXT)).getText());        if (!onlyDirection) {          addDom(dom,body);        } else {          addDom(dom,root);        }      }    }  }  if (telemList != null) {    if (!telemList.isEmpty()) {      Element node=null;      ScrAddrtel dirtel=null;      ScrTypeaddress tipo=null;      for (Iterator it=telemList.iterator(); it.hasNext(); ) {        node=(Element)it.next();        dirtel=new ScrAddrtel();        dirtel.setAddress(((Element)node.selectObject(XML_DIRECCIONTEL_TEXT)).getText());        tipo=new ScrTypeaddress();        tipo.setId(new Integer(((Element)node.selectObject(XML_TIPOTEL_TEXT)).getText()));        dirtel.setScrTypeaddress(tipo);        dirtel.setId(new Integer(((Element)node.selectObject(XML_IDTEL_TEXT)).getText()).intValue());        dirtel.setPreference(new Integer(((Element)node.selectObject(XML_PREFERENCIATEL_TEXT)).getText()).intValue());        if (!onlyDirection) {          addDirtel(dirtel,bodytel);        } else {          addDirtel(dirtel,root);        }      }    }  }  return document;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void readData(long absolutePosition,ByteBuffer target,int length){  int remaining=length;  while (remaining > 0) {    dropFragmentsTo(absolutePosition);    int positionInFragment=(int)(absolutePosition - totalBytesDropped);    int toCopy=Math.min(remaining,fragmentLength - positionInFragment);    target.put(dataQueue.peek(),positionInFragment,toCopy);    absolutePosition+=toCopy;    remaining-=toCopy;  }}  }
class C{  public static void main(String[] args){  TrackingContactIds simulation=new TrackingContactIds();  simulation.run();}  }
class C{  public void addSigner(PrivateKey key,byte[] subjectKeyID,String digestOID) throws IllegalArgumentException {  addSigner(key,subjectKeyID,getEncOID(key,digestOID),digestOID);}  }
class C{  public static void initialize(Context context){  context=context.getApplicationContext();  foregroundActivityTracker=new ForegroundActivityTracker(context);  preferences=new MainPreferences(context);  final int currentOsVersion=Build.VERSION.SDK_INT;  if (currentOsVersion > preferences.getLastOsVersion()) {    preferences.clearAppDisabled();  }  preferences.setLastOsVersion(currentOsVersion);  if (preferences.isAppDisabled()) {    disableApp();  } else {    currentApplicationVersion=Utils.getApplicationVersion(context);    if (currentApplicationVersion < preferences.getForcedUpdateVersion()) {      showUpdatePrompt(preferences.getForcedUpdateVersion(),true);    }  }}  }
class C{  public static synchronized void addCert(String keyId,CertificateInfo certInfo){  log.trace("addCert({})",keyId);  Key key=findKey(keyId);  Cert cert=new Cert(certInfo.getId());  cert.setActive(certInfo.isActive());  cert.setCertificate(certInfo.getCertificateBytes());  cert.setOcspResponse(certInfo.getOcspBytes());  cert.setMemberId(certInfo.getMemberId());  cert.setSavedToConfiguration(certInfo.isSavedToConfiguration());  cert.setStatus(certInfo.getStatus());  key.addCert(cert);}  }
class C{  public boolean forEachEntry(TDoubleLongProcedure procedure){  byte[] states=_states;  double[] keys=_set;  long[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  @Field(18) public Pointer<Long> pllVal(){  return this.io.getPointerField(this,18);}  }
class C{  protected AnimatableColorValue(AnimationTarget target){  super(target);}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  public static Sector createSectorFromLatLonBox(KMLAbstractLatLonBoxType box){  if (box == null) {    String message=Logging.getMessage("nullValue.BoxIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (box.getNorth() == null || box.getSouth() == null || box.getEast() == null || box.getWest() == null)   return null;  double north=box.getNorth();  double south=box.getSouth();  double east=box.getEast();  double west=box.getWest();  double minLat=Math.min(north,south);  double maxLat=Math.max(north,south);  double minLon=Math.min(east,west);  double maxLon=Math.max(east,west);  return Sector.fromDegrees(minLat,maxLat,minLon,maxLon);}  }
class C{  private static boolean eq(Object x,Object y){  return x == y || x.equals(y);}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  private synchronized void updateOutdoorMode(){  if (!mUseOutdoorMode) {    return;  }  updateSensorState();  if (isScreenOn()) {    boolean enabled=false;    if (!isLowPowerMode()) {      int mode=getMode();      if (mode == MODE_OUTDOOR) {        enabled=true;      } else       if (isAutomaticOutdoorModeEnabled()) {        if (mSelfManaged) {          enabled=true;        } else         if (mIsOutdoor) {          if (mode == MODE_DAY) {            enabled=true;          } else           if (mode == MODE_AUTO && !isNight()) {            enabled=true;          }        }      }    }    mHardware.set(CMHardwareManager.FEATURE_SUNLIGHT_ENHANCEMENT,enabled);  }}  }
class C{  public THL(){}  }
class C{  @Override public void onUpdate(){  this.prevPosX=this.posX;  this.prevPosY=this.posY;  this.prevPosZ=this.posZ;  this.motionY-=this.particleGravity;  if (this.bobTimer-- > 0) {    this.motionX*=0.02D;    this.motionY*=0.02D;    this.motionZ*=0.02D;    setParticleTextureIndex(113);  } else {    setParticleTextureIndex(112);  }  moveEntity(this.motionX,this.motionY,this.motionZ);  this.motionX*=0.9800000190734863D;  this.motionY*=0.9800000190734863D;  this.motionZ*=0.9800000190734863D;  if (this.particleMaxAge-- <= 0) {    setDead();  }  if (this.onGround) {    setParticleTextureIndex(114);    this.motionX*=0.699999988079071D;    this.motionZ*=0.699999988079071D;  }  final int x=MathHelper.floor_double(this.posX);  final int y=MathHelper.floor_double(this.posY);  final int z=MathHelper.floor_double(this.posZ);  final Block block=worldObj.getBlock(x,y,z);  final Material material=block.getMaterial();  if ((material.isLiquid() || material.isSolid()) && block instanceof IFluidBlock) {    final double d0=MathHelper.floor_double(this.posY) + 1 - ((IFluidBlock)block).getFilledPercentage(worldObj,x,y,z);    if (this.posY < d0) {      setDead();    }  }}  }
class C{  public synchronized void deRegister() throws PayloadException, NetworkException {  if (mRegistered) {    mPendingUnRegister=false;    stopTimer();    mDialogPath.incrementCseq();    mNb4xx5xx6xxFailures=0;    SipRequest register=SipMessageFactory.createRegister(mDialogPath,mFeatureTags,0,mInstanceId,mRcsSettings.isSipKeepAliveEnabled());    sendRegister(register);    mRegistered=false;    resetDialogPath();    mReasonCode=isBatteryLow() ? RcsServiceRegistration.ReasonCode.BATTERY_LOW : RcsServiceRegistration.ReasonCode.CONNECTION_LOST;    mCore.getListener().onRegistrationTerminated(mReasonCode);  } else {    mPendingUnRegister=true;  }}  }
class C{  @SuppressWarnings({"unchecked"}) public static <T extends Throwable>T findCause(Throwable throwable,Class<T> cause){  while (throwable != null) {    if (throwable.getClass().equals(cause)) {      return (T)throwable;    }    throwable=throwable.getCause();  }  return null;}  }
class C{  public void testParameters() throws Exception {  Similarity sim=getSimilarity("text_params");  assertEquals(DFISimilarity.class,sim.getClass());  DFISimilarity dfr=(DFISimilarity)sim;  assertFalse(dfr.getDiscountOverlaps());}  }
class C{  public T nohref(String value){  return attr("nohref",value);}  }
class C{  private void initializePopulation(int populationSize){  population=new ArrayList<Individual>(populationSize);  if (weightGenerator == null) {    List<double[]> weights=new RandomGenerator(problem.getNumberOfObjectives(),populationSize).generate();    for (    double[] weight : weights) {      population.add(new Individual(weight));    }  } else {    List<double[]> weights=weightGenerator.generate();    if (weights.size() != populationSize) {      throw new FrameworkException("weight generator must return " + populationSize + " weights");    }    for (    double[] weight : weights) {      population.add(new Individual(weight));    }  }}  }
class C{  static public void qsort(float[] array){  qsort_h(array,0,array.length - 1);}  }
class C{  private List<DiffEntry> commitToIndex(String commitId,DiffFormatter formatter) throws IOException {  if (commitId == null) {    commitId=Constants.HEAD;  }  ObjectId commitA=repository.resolve(commitId);  if (commitA == null) {    throw new IllegalArgumentException("Invalid commit id " + commitId);  }  RevTree treeA;  try (RevWalk revWalkA=new RevWalk(repository)){    treeA=revWalkA.parseTree(commitA);  }   DirCache dirCache=null;  List<DiffEntry> diff;  try (ObjectReader reader=repository.newObjectReader()){    dirCache=repository.lockDirCache();    CanonicalTreeParser iterA=new CanonicalTreeParser();    iterA.reset(reader,treeA);    DirCacheIterator iterB=new DirCacheIterator(dirCache);    if (!request.isNoRenames()) {      formatter.setDetectRenames(true);      int renameLimit=request.getRenameLimit();      if (renameLimit > 0) {        formatter.getRenameDetector().setRenameLimit(renameLimit);      }    }    diff=formatter.scan(iterA,iterB);  }  finally {    if (dirCache != null) {      dirCache.unlock();    }  }  return diff;}  }
class C{  public Builder url(URL url){  if (url == null)   throw new IllegalArgumentException("url == null");  HttpUrl parsed=HttpUrl.get(url);  if (parsed == null)   throw new IllegalArgumentException("unexpected url: " + url);  return url(parsed);}  }
class C{  protected ReRoutePtSubModeStrategy(Scenario sc,Provider<TripRouter> rc){  super(sc.getConfig().global());  this.tripRouterProvider=rc;}  }
class C{  public HttpResponse removeContactFromBlockedList(ContactId contact) throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.info("Remove " + contact + " from blocked list");  }  String url="/resource-lists/users/" + Uri.encode(ImsModule.getImsUserProfile().getPublicUri()) + "/index/~~/resource-lists/list%5B@name=%22rcs_blockedcontacts%22%5D/entry%5B@uri=%22"+ Uri.encode(PhoneUtils.formatContactIdToUri(contact).toString())+ "%22%5D";  return sendRequestToXDMS(new HttpDeleteRequest(url));}  }
class C{  public String parameterToString(Object param){  if (param == null) {    return "";  } else   if (param instanceof Date) {    return formatDate((Date)param);  } else   if (param instanceof Collection) {    StringBuilder b=new StringBuilder();    for (    Object o : (Collection)param) {      if (b.length() > 0) {        b.append(",");      }      b.append(String.valueOf(o));    }    return b.toString();  } else {    return String.valueOf(param);  }}  }
class C{  public AttributeGenerator(double pGenerate,int numberOfNewAttributes,int totalMaxNumberOfAttributes,List<FeatureGenerator> generatorList,RandomGenerator random){  this.pGenerate=pGenerate;  this.numberOfNewAttributes=numberOfNewAttributes;  this.totalMaxNumberOfAttributes=totalMaxNumberOfAttributes;  this.generatorList=generatorList;  this.random=random;}  }
class C{  public ChannelResult(String response){  if (response.startsWith("SUCCESS: ")) {    success=true;    message=response.substring(9);  } else {    message=response;  }}  }
class C{  public CommercialVehicle(int id){  this.vehID=id;  this.chains=new ArrayList<Chain>();  this.averageActivitesPerChain=0;  this.averageChainDuration=0;  this.averageChainDistance=0;  this.fractionMinorInStudyArea=0;  this.fractionMajorInStudyArea=0;  this.kilometerPerAreaActivityStat=0;}  }
class C{  protected CCSpriteFrame(CCTexture2D texture,CGRect rect,CGPoint offset,CGSize originalSize,Boolean rotated){  texture_=texture;  offset_=offset;  rect_=rect;  originalSize_=originalSize;  rotated_=rotated;}  }
class C{  @VisibleForTesting void updateProgress(int uploaded,int total){  publishProgress(getPercentage(uploaded,total));}  }
class C{  public static void print(double[][] m1,double[][] m2,double[][] m3){  System.out.println("The matrices are added as follows");  for (int i=0; i < 3; i++) {    print(m1,i);    System.out.print((i == 1 ? "   * " : "     "));    print(m2,i);    System.out.print((i == 1 ? "   = " : "     "));    print(m3,i);    System.out.println();  }}  }
class C{  private void bindViewType(WXComponent component){  int id=generateViewType(component);  if (mViewTypes == null) {    mViewTypes=new SparseArray<>();  }  ArrayList<WXComponent> mTypes=mViewTypes.get(id);  if (mTypes == null) {    mTypes=new ArrayList<>();    mViewTypes.put(id,mTypes);  }  mTypes.add(component);}  }
class C{  public static boolean isEnabled(){  return instance != null && instance.isAnalyticsEnabled();}  }
class C{  public void delete(String url,boolean deleteDownloadedFileInPath,OnDeleteDownloadFileListener onDeleteDownloadFileListener){  getDownloadDeleteManager().delete(url,deleteDownloadedFileInPath,onDeleteDownloadFileListener);}  }
class C{  public S3PointSetLoader(Boolean workOffline,AmazonS3Client s3,String pointsetBucket){  this.workOffline=workOffline;  this.s3=s3;  this.pointsetBucket=pointsetBucket;}  }
class C{  public CompilingLoader(ClassLoader loader,PathImpl classDir){  this(loader,classDir,classDir,null,null);}  }
class C{  public AstRoot parse(Reader sourceReader,String sourceURI,int lineno) throws IOException {  if (parseFinished)   throw new IllegalStateException("parser reused");  if (compilerEnv.isIdeMode()) {    return parse(readFully(sourceReader),sourceURI,lineno);  }  try {    this.sourceURI=sourceURI;    ts=new TokenStream(this,sourceReader,null,lineno);    return parse();  }  finally {    parseFinished=true;  }}  }
class C{  void trackWorkspaceEvents(final WorkspaceDto workspace,final Callback<Component,Exception> callback){  if (workspaceEventsHandled) {    return;  }  workspaceEventsHandled=true;  this.workspaceComponent=wsComponentProvider.get();  this.messageBus=messageBusProvider.getMessageBus();  subscribeToWorkspaceStatusEvents(workspace);  subscribeOnEnvironmentStatusChannel(workspace);  subscribeOnEnvironmentOutputChannel(workspace);  if (wsAgentLogSubscriptionHandler == null && workspace.getRuntime() != null) {    subscribeOnWsAgentOutputChannel(workspace,getDevMachineName(workspace));  }}  }
class C{  public final void testEqualsObject03(){  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  assertFalse(c1.equals(null));}  }
class C{  private void parseMessaging(Node node){  String ftHTTPCapAlwaysOn=null;  String deliveryTimeout=null;  if (node == null) {    return;  }  Node childnode=node.getFirstChild();  if (childnode != null) {    do {      if (ftHTTPCapAlwaysOn == null) {        if ((ftHTTPCapAlwaysOn=getValueByParamName("ftHTTPCapAlwaysOn",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.FT_HTTP_CAP_ALWAYS_ON,!ftHTTPCapAlwaysOn.equals("0"));          continue;        }      }      if (deliveryTimeout == null) {        if ((deliveryTimeout=getValueByParamName("deliveryTimeout",childnode,TYPE_INT)) != null) {          long timeout=Long.parseLong(deliveryTimeout) * SECONDS_TO_MILLISECONDS_CONVERSION_RATE;          mRcsSettings.writeLong(RcsSettingsData.MSG_DELIVERY_TIMEOUT,timeout);        }      }    } while ((childnode=childnode.getNextSibling()) != null);  }}  }
class C{  @Override protected void onDetachedFromWindow(){  super.onDetachedFromWindow();  presenter.dropView();}  }
class C{  private int compareX(LineSegment seg0,LineSegment seg1){  int compare0=seg0.p0.compareTo(seg1.p0);  if (compare0 != 0)   return compare0;  return seg0.p1.compareTo(seg1.p1);}  }
class C{  public static ODataRequest createSimpleODataRequest(ODataRequest.Method method) throws UnsupportedEncodingException {  return new ODataRequest.Builder().setBodyText("test","UTF-8").setUri(SERVICE_ROOT).setMethod(method).build();}  }
class C{  private void initFirstLogicalVertex(){  int first=0;  for (int i=1; i < numVertices; ++i) {    if (vertex(i).compareTo(vertex(first)) < 0) {      first=i;    }  }  firstLogicalVertex=first;}  }
class C{  public void removeAttributeWeight(String attributeName){  this.weightMap.remove(attributeName);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode06.class,args);}  }
class C{  private void extend() throws IOException {  while (true) {    long nowMsSinceEpoch=now();    List<String> assumeExpired=new ArrayList<>();    List<String> toBeExtended=new ArrayList<>();    List<String> toBeExpired=new ArrayList<>();    for (    Map.Entry<String,InFlightState> entry : inFlight.entrySet()) {      if (entry.getValue().ackDeadlineMsSinceEpoch - (ackTimeoutMs * ACK_SAFETY_PCT) / 100 > nowMsSinceEpoch) {        break;      }      if (entry.getValue().ackDeadlineMsSinceEpoch - ACK_TOO_LATE.getMillis() < nowMsSinceEpoch) {        assumeExpired.add(entry.getKey());        continue;      }      if (entry.getValue().requestTimeMsSinceEpoch + PROCESSING_TIMEOUT.getMillis() < nowMsSinceEpoch) {        toBeExpired.add(entry.getKey());        continue;      }      toBeExtended.add(entry.getKey());      if (toBeExtended.size() >= ACK_BATCH_SIZE) {        break;      }    }    if (assumeExpired.isEmpty() && toBeExtended.isEmpty() && toBeExpired.isEmpty()) {      return;    }    if (!assumeExpired.isEmpty()) {      numLateDeadlines.add(nowMsSinceEpoch,assumeExpired.size());      for (      String ackId : assumeExpired) {        inFlight.remove(ackId);      }    }    if (!toBeExpired.isEmpty()) {      numExpired.add(nowMsSinceEpoch,toBeExpired.size());      for (      String ackId : toBeExpired) {        inFlight.remove(ackId);      }    }    if (!toBeExtended.isEmpty()) {      long newDeadlineMsSinceEpoch=nowMsSinceEpoch + (ackTimeoutMs * ACK_EXTENSION_PCT) / 100;      for (      String ackId : toBeExtended) {        InFlightState state=inFlight.remove(ackId);        inFlight.put(ackId,new InFlightState(state.requestTimeMsSinceEpoch,newDeadlineMsSinceEpoch));      }      extendBatch(nowMsSinceEpoch,toBeExtended);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.948 -0500",hash_original_method="4BA0FED02486EFBF4EE8334994DBE6CC",hash_generated_method="CCB0D26414F71ECFF28E424750726E31") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public boolean verify(String username) throws IOException {  int result;  result=vrfy(username);  return (result == SMTPReply.ACTION_OK || result == SMTPReply.USER_NOT_LOCAL_WILL_FORWARD);}  }
class C{  public static double longBitsToDouble(long bits){  return 0.0d;}  }
class C{  public double pdf(double x){  recomputeZ();  if (x < 0 || x > 1) {    return 0;  } else   if (x == 0) {    if (alpha < 1) {      return Double.NaN;    }    return 0;  } else   if (x == 1) {    if (beta < 1) {      return Double.NaN;    }    return 0;  } else {    double logX=Math.log(x);    double log1mX=Math.log1p(-x);    return Math.exp((alpha - 1) * logX + (beta - 1) * log1mX - z);  }}  }
class C{  public ImageException(String message,ImageExceptionBean bean,Throwable cause){  super(message,bean,cause);  this.bean=bean;}  }
class C{  public Prototype undump(InputStream stream,String chunkname) throws IOException {  if (stream.read() != LUA_SIGNATURE[0] || stream.read() != LUA_SIGNATURE[1] || stream.read() != LUA_SIGNATURE[2] || stream.read() != LUA_SIGNATURE[3])   return null;  String sname=getSourceName(chunkname);  LoadState s=new LoadState(stream,sname);  s.loadHeader();switch (s.luacNumberFormat) {case NUMBER_FORMAT_FLOATS_OR_DOUBLES:case NUMBER_FORMAT_INTS_ONLY:case NUMBER_FORMAT_NUM_PATCH_INT32:    break;default :  throw new LuaError("unsupported int size");}return s.loadFunction(LuaString.valueOf(sname));}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.206 -0400",hash_original_method="7D1BEF9DACBBFB1337ED15541908C9EE",hash_generated_method="C7E2057BD82A81E836E06B912DC68985") @Deprecated public static void write(StringBuffer data,Writer output) throws IOException {  if (data != null) {    output.write(data.toString());  }}  }
class C{  private boolean canonicalizeNumber(int start,int end){  elide(start,start);  int sanStart=sanitizedJson.length();  normalizeNumber(start,end);  elide(end,end);  int sanEnd=sanitizedJson.length();  return canonicalizeNumber(sanitizedJson,sanStart,sanEnd);}  }
class C{  public void createTopic(String topic,int partitions,int replicationFactor) throws TimeoutException, InterruptedException {  List<KafkaServer> servers=new ArrayList<>();  servers.add(kafkaSrv);  TestUtils.createTopic(zkUtils,topic,partitions,replicationFactor,scala.collection.JavaConversions.asScalaBuffer(servers),new Properties());}  }
class C{  public static String toInitLiteral(List<long[]> llarr){  List<String> slist=new ArrayList<String>();  for (  long[] larr : llarr) {    slist.add(toInitLiteral(larr));  }  return "{" + StringUtils.join(slist,",") + "}";}  }
class C{  public void add(XAtom atom){  atoms.add(atom);}  }
class C{  public static boolean contentEqualsIgnoreEOL(Reader input1,Reader input2) throws IOException {  BufferedReader br1=toBufferedReader(input1);  BufferedReader br2=toBufferedReader(input2);  String line1=br1.readLine();  String line2=br2.readLine();  while (line1 != null && line2 != null && line1.equals(line2)) {    line1=br1.readLine();    line2=br2.readLine();  }  return line1 == null ? line2 == null ? true : false : line1.equals(line2);}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    this.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      this.out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        this.out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  public final Vec2D scaleSelf(float s){  x*=s;  y*=s;  return this;}  }
class C{  public void beginReadOnly() throws RepositoryException {  assertOpen();synchronized (remoteTx) {    assertOpen();    if (remoteTx.get() != null)     throw new RepositoryException("Active transaction exists");    try {      remoteTx.set(repo.getRemoteRepository().getRemoteRepositoryManager().getTransactionManager().createTx(RemoteTransactionManager.READ_COMMITTED));    } catch (    RuntimeException e) {      throw new RepositoryException(e);    }  }}  }
class C{  public void testSetTimesMissingPartially() throws Exception {  if (!timesSupported())   return;  create(igfs,paths(DIR),null);  createFile(igfsSecondary,FILE,chunk);  igfs.setTimes(FILE,Long.MAX_VALUE - 1,Long.MAX_VALUE);  IgfsFile info=igfs.info(FILE);  assert info != null;  assertEquals(Long.MAX_VALUE - 1,info.accessTime());  assertEquals(Long.MAX_VALUE,info.modificationTime());  T2<Long,Long> secondaryTimes=igfsSecondary.times(FILE.toString());  assertEquals(info.accessTime(),(long)secondaryTimes.get1());  assertEquals(info.modificationTime(),(long)secondaryTimes.get2());  try {    igfs.setTimes(FILE2,Long.MAX_VALUE,Long.MAX_VALUE);    fail("Exception is not thrown for missing file.");  } catch (  Exception ignore) {  }}  }
class C{  private double priorIndependent(int x,int y,int[] z){  return 0.5;}  }
class C{  @Override public synchronized void close() throws IOException {  mActionTracer.close();}  }
class C{  public final Enumeration<Body> bodies(){  return bodyTab.elements();}  }
class C{  public static ArrayList<Integer> extractImAs(ArrayList<String[]> frames){  ArrayList<Integer> immediateAssignment=new ArrayList<>();  for (int i=0; i < frames.size(); i++) {    if (isImmediateAssignment(frames.get(i))) {      immediateAssignment.add(i);    }  }  return immediateAssignment;}  }
class C{  @SuppressWarnings("unchecked") protected void onInsertComplete(int token,Object cookie,Uri uri){  ((AsyncProviderCommand<ArgType>)cookie).onCompletion(token,uri);}  }
class C{  public static Builder builder(){  return new Builder(new ConfigureRequest());}  }
class C{  void recordCflow(String name,String cname,String fname){  if (cflow == null)   cflow=new Hashtable();  cflow.put(name,new Object[]{cname,fname});}  }
class C{  public void addRRset(RRset rrset){  Name name=rrset.getName();  addRRset(name,rrset);}  }
class C{  public T caseAfterEvent_(AfterEvent_ object){  return null;}  }
class C{  public SegmentDescriptor build(){  return new SegmentDescriptor(buffer.writeLong(32,0).rewind());}  }
class C{  public void updateParentRelations(final OsmElement e,final HashMap<Long,String> parents){  Log.d(DEBUG_TAG,"updateParentRelations new parents size " + parents.size());  ArrayList<Relation> origParents=e.getParentRelations() != null ? new ArrayList<Relation>(e.getParentRelations()) : new ArrayList<Relation>();  for (  Relation o : origParents) {    if (!parents.containsKey(Long.valueOf(o.getOsmId()))) {      removeElementFromRelation(e,o);      continue;    }    if (parents.containsKey(Long.valueOf(o.getOsmId()))) {      String newRole=parents.get(Long.valueOf(o.getOsmId()));      if (!o.getMember(e).getRole().equals(newRole)) {        setRole(e,newRole,o);      }    }  }  for (  Long l : parents.keySet()) {    Log.d(DEBUG_TAG,"updateParentRelations new parent " + l.longValue());    if (l.longValue() != -1) {      Relation r=(Relation)currentStorage.getOsmElement(Relation.NAME,l.longValue());      if (!origParents.contains(r)) {        Log.d(DEBUG_TAG,"updateParentRelations adding " + e.getDescription() + " to "+ r.getDescription());        addElementToRelation(e,-1,parents.get(l),r);      }    }  }}  }
class C{  private String toLoggableString(){  String string=canceled ? "canceled call" : "call";  HttpUrl redactedUrl=originalRequest.url().resolve("/...");  return string + " to " + redactedUrl;}  }
class C{  public static BrowserDescriptor standaloneBrowser(@NonNull String version){  return new BrowserDescriptor(PACKAGE_NAME,SIGNATURE_SET,version,false);}  }
class C{  private void executeAction(@NotNull String watch){  AnAction action=ActionManager.getInstance().getAction(watch);  Presentation presentation=action.getTemplatePresentation().clone();  DataContext context=DataManager.getInstance().getDataContext(treePanel.getTree());  AnActionEvent actionEvent=new AnActionEvent(null,context,ActionPlaces.DEBUGGER_TOOLBAR,presentation,ActionManager.getInstance(),0);  action.actionPerformed(actionEvent);}  }
class C{  @Field(34) public int ulVal(){  return this.io.getIntField(this,34);}  }
class C{  public PostRenderViewEvent(FacesContext facesContext,UIViewRoot root){  super(facesContext,root);}  }
class C{  public IntersectIteration(Iteration<? extends E,? extends X> arg1,Iteration<? extends E,? extends X> arg2,boolean distinct){  super(arg1);  assert arg2 != null;  this.arg2=arg2;  this.distinct=distinct;  this.initialized=false;}  }
class C{  final boolean transferForSignal(Node node){  if (!compareAndSetWaitStatus(node,Node.CONDITION,0))   return false;  Node p=enq(node);  int ws=p.waitStatus;  if (ws > 0 || !compareAndSetWaitStatus(p,ws,Node.SIGNAL))   LockSupport.unpark(node.thread);  return true;}  }
class C{  public static <T>T orderWrites(T ref){  theVolatile=0;  return ref;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:37.248 -0500",hash_original_method="63286152494B19CF26590FA425B39B18",hash_generated_method="F9C67CEB7FC05B284B157EA7E1FC8FFF") public boolean domainMatch(String host,String domain){  boolean match=host.equals(domain) || (domain.startsWith(".") && host.endsWith(domain));  return match;}  }
class C{  public Analyzer includeR1(){  includeR1=true;  return this;}  }
class C{  private static void varAgg(double[] a,double[] c,int[] aix,int ai,final int len,final int n,CM_COV_Object cbuff,CM cm) throws DMLRuntimeException {  for (int i=ai; i < ai + len; i++) {    cbuff.w=c[aix[i] + 2 * n];    cbuff.m2._sum=c[aix[i]] * (cbuff.w - 1);    cbuff.mean._sum=c[aix[i] + n];    cbuff.m2._correction=c[aix[i] + 3 * n];    cbuff.mean._correction=c[aix[i] + 4 * n];    cbuff=(CM_COV_Object)cm.execute(cbuff,a[i]);    c[aix[i]]=cbuff.getRequiredResult(AggregateOperationTypes.VARIANCE);    c[aix[i] + n]=cbuff.mean._sum;    c[aix[i] + 2 * n]=cbuff.w;    c[aix[i] + 3 * n]=cbuff.m2._correction;    c[aix[i] + 4 * n]=cbuff.mean._correction;  }}  }
class C{  public int distanceTo(Coord4D obj){  int subX=xCoord - obj.xCoord;  int subY=yCoord - obj.yCoord;  int subZ=zCoord - obj.zCoord;  return (int)MathHelper.sqrt_double(subX * subX + subY * subY + subZ * subZ);}  }
class C{  public void postComment(String postId,String message) throws IOException {  postComment(postId,message,null);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.PAREN_EXPRESSION;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.667 -0500",hash_original_method="1D191D7F570684E003696ECD55ECD643",hash_generated_method="0A46AE5BBA3526BAF33DF6C195CE13E9") public Iterator<E> iterator(){  return al.iterator();}  }
class C{  public static String toString(URI uri) throws IOException {  return toString(uri,Charset.defaultCharset());}  }
class C{  private void fill(){  for (  GraphEdgeMatcherDescriptor edgeMatcher : edgeMatchers) {    edgeMatcherContentProvider.add(edgeMatcher);  }}  }
class C{  @Override public void downloadBlockChain(){  startBlockChainDownload(multiBitDownloadListener);}  }
class C{  public String readString(){  return scanner.next();}  }
class C{  public void printLibrary(HttpServletRequest request,HttpServletResponse response,String pathPrefix,CoverageAttributeTable cat) throws ServletException, IOException {  PrintWriter out=response.getWriter();  if (cat == null) {    out.println("<H2>Catalog doesn't exist</H2>");    return;  }  String libName=cat.getLibraryName();  String libpath=pathPrefix + "/" + libName;  out.println("<H2>Library <A NAME=\"" + libName + "\"></A>"+ buildURL(request,response,pathPrefix,libName,libName)+ "</H2>");  String[] coverages=cat.getCoverageNames();  Arrays.sort(coverages);  HtmlListElement list=new HtmlListElement();  list.addElement("Library uses " + (cat.isTiledData() ? "tiled" : "untiled") + " data");  HtmlListElement clist=new HtmlListElement("Coverage names (from " + buildURL(request,response,libpath,"cat") + ")");  list.addElement(clist);  for (int i=0; i < coverages.length; i++) {    clist.addElement("<A HREF=\"#" + libName + "_"+ coverages[i]+ "\">"+ coverages[i]+ "</A>");  }  list.addElement("Library Header Table: " + buildURL(request,response,libpath,"lht"));  list.addElement("Geographic Reference Table: " + buildURL(request,response,libpath,"grt"));  list.generate(out);  for (int i=0; i < coverages.length; i++) {    printCoverage(request,response,libpath + "/" + coverages[i],libName,cat,coverages[i]);  }}  }
class C{  public static void addValueToHeader(Map<String,List<String>> headers,String key,String value,boolean singleValued){  List<String> values=headers.get(key);  if (values == null) {    values=new ArrayList<String>(1);    headers.put(key,values);  }  if (singleValued && values.size() == 1) {    values.set(0,value);  } else {    values.add(value);  }}  }
class C{  public DBLClickSelectMapMouseInterpreter(){  DEBUG=Debug.debugging("grp");}  }
class C{  private Instant convertTimestamp(long timestamp) throws FormatParseException {  if (timestamp == 0) {    return Instant.ofEpochSecond(timestamp);  }  int digits=(int)(Math.log10(timestamp) + 1);  if (digits != 10 && digits != 13) {    throw new FormatParseException("Expected a timestamp length of 10 or 13, found " + digits + " ('"+ timestamp+ "')");  }  boolean secondResolution=digits == 10;  return secondResolution ? Instant.ofEpochSecond(timestamp) : Instant.ofEpochMilli(timestamp);}  }
class C{  public void reset(){  closeAllQueries();synchronized (m_globalDB) {    m_globalDB=s_globalDB.newInstance(this);    m_opManager.reset();    try {      consultFile("INTERNAL://com/ugos/jiprolog/resources/x.pl");    } catch (    JIPSyntaxErrorException e) {      e.printStackTrace();    }catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public double imag(){  return imag;}  }
class C{  private void showPopup(MouseEvent e){  JPopupMenu popupMenu=getPopupMenu();  if (popupMenu != null) {    configurePopupMenu(popupMenu);    popupMenu.show(e.getComponent(),e.getX(),e.getY());  }}  }
class C{  public final synchronized void ponderHit(int id){  if ((searchRequest == null) || (searchRequest.ponderMove == null) || (searchRequest.searchId != id))   return;  searchRequest.ponderHit();  if (engineState.state != MainState.PONDER)   searchRequest.startTime=System.currentTimeMillis();  if (engineState.state == MainState.PONDER) {    uciEngine.writeLineToEngine("ponderhit");    engineState.setState(MainState.SEARCH);    pvModified=true;    notifyGUI();  }}  }
class C{  public static <T>Predicate<T> not(Predicate<? super T> predicate){  return new NotPredicate<T>(predicate);}  }
class C{  @Override public void onRemoved(final RPObject object){  if (isUser(object)) {    adminlevel=0;    name=null;    sheepID=0;  }}  }
class C{  public void incrementCount(UnaryRule key,double[][] increment){  double[][] current=getCount(key);  if (current == null) {    setCount(key,increment);    return;  }  for (int i=0; i < current.length; i++) {    if (increment[i] == null)     continue;    if (current[i] == null)     current[i]=new double[increment[i].length];    for (int j=0; j < current[i].length; j++) {      current[i][j]+=increment[i][j];    }  }  setCount(key,current);}  }
class C{  protected ITypeScriptServiceClient createServiceClient(File projectDir) throws TypeScriptException {  File nodeFile=getProjectSettings().getNodejsInstallPath();  File tsserverFile=getProjectSettings().getTsserverFile();  return new TypeScriptServiceClient(getProjectDir(),tsserverFile,nodeFile);}  }
class C{  public void stop(){  transportManager.stopTransports();  log.info("Microservices server stopped");}  }
class C{  protected void refreshUpdateDividers(){  int i;  FolderTokenDivider div=null;  for (i=0; i < count(); i++) {    div=get(i);    if (div.isUpdate())     div.clearEditInfo();  }}  }
class C{  public InputStream post(String name,Object value) throws IOException {  postCookies();  setParameter(name,value);  return doPost();}  }
class C{  private void initialize() throws RepositoryException, IndexException {  initialize(provider.get());}  }
class C{  public boolean isBoundsInGrid(){  return boundsInGrid;}  }
class C{  public void test_getLowestSetBitZero(){  byte[] aBytes={0};  int aSign=0;  int iNumber=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  int result=aNumber.getLowestSetBit();  assertTrue("incorrect value",result == iNumber);  byte[] aBytes_={0,0,0};  iNumber=-1;  aNumber=new BigInteger(aSign,aBytes_);  result=aNumber.getLowestSetBit();  assertTrue("incorrect value",result == iNumber);}  }
class C{  public void normalizeEigenValues(double scale){  this.normalization=scale;  int dim=Eval.length;  for (int i=0; i < dim; i++) {    Eval[i]/=scale;  }}  }
class C{  public void serialize(KXmlSerializer serializer) throws IOException {  if (mName != null) {    serializer.startTag(CtsXmlResultReporter.ns,TAG);    serializer.attribute(CtsXmlResultReporter.ns,"name",mName);  }  for (  TestSuite childSuite : mChildSuiteMap.values()) {    childSuite.serialize(serializer);  }  for (  TestCase childCase : mChildTestCaseMap.values()) {    childCase.serialize(serializer);  }  if (mName != null) {    serializer.endTag(CtsXmlResultReporter.ns,TAG);  }}  }
class C{  private static void insertStubPrologue(Assembler asm){  asm.baselineEmitLoadTIB(S0,T0);}  }
class C{  public static JavacNode injectType(JavacNode typeNode,final JCClassDecl type){  JCClassDecl typeDecl=(JCClassDecl)typeNode.get();  addSuppressWarningsAll(type.mods,typeNode,type.pos,getGeneratedBy(type),typeNode.getContext());  addGenerated(type.mods,typeNode,type.pos,getGeneratedBy(type),typeNode.getContext());  typeDecl.defs=typeDecl.defs.append(type);  return typeNode.add(type,Kind.TYPE);}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  private void $$$setupUI$$$(){  myContentPanel=new JPanel();  myContentPanel.setLayout(new GridLayoutManager(1,2,new Insets(0,0,0,0),-1,-1));  final JPanel panel1=new JPanel();  panel1.setLayout(new GridLayoutManager(4,1,new Insets(0,0,0,0),-1,-1));  myContentPanel.add(panel1,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  myAcceptYoursButton=new JButton();  myAcceptYoursButton.setEnabled(false);  myAcceptYoursButton.setText("Accept Yours");  myAcceptYoursButton.setMnemonic('Y');  myAcceptYoursButton.setDisplayedMnemonicIndex(7);  panel1.add(myAcceptYoursButton,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  final Spacer spacer1=new Spacer();  panel1.add(spacer1,new GridConstraints(3,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_VERTICAL,1,GridConstraints.SIZEPOLICY_WANT_GROW,null,null,null,0,false));  myAcceptTheirsButton=new JButton();  myAcceptTheirsButton.setEnabled(false);  myAcceptTheirsButton.setText("Accept Theirs");  myAcceptTheirsButton.setMnemonic('T');  myAcceptTheirsButton.setDisplayedMnemonicIndex(7);  panel1.add(myAcceptTheirsButton,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  myMergeButton=new JButton();  myMergeButton.setEnabled(false);  myMergeButton.setText("Merge");  myMergeButton.setMnemonic('M');  myMergeButton.setDisplayedMnemonicIndex(0);  panel1.add(myMergeButton,new GridConstraints(2,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  final JBScrollPane jBScrollPane1=new JBScrollPane();  myContentPanel.add(jBScrollPane1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,null,null,null,0,false));  myItemsTable=new JBTable();  myItemsTable.putClientProperty("Table.isFileList",Boolean.FALSE);  jBScrollPane1.setViewportView(myItemsTable);}  }
class C{  public JSONObject remove(String name){  if (name == null) {    throw new NullPointerException("name is null");  }  int index=indexOf(name);  if (index != -1) {    table.remove(index);    names.remove(index);    values.remove(index);  }  return this;}  }
class C{  public static void killContainer(String jdbcUrl){synchronized (jdbcUrlContainerCache) {    JdbcDatabaseContainer container=jdbcUrlContainerCache.get(jdbcUrl);    if (container != null) {      container.stop();      jdbcUrlContainerCache.remove(jdbcUrl);      containerConnections.remove(container.getContainerId());      initializedContainers.remove(container.getContainerId());    }  }}  }
class C{  public IsilonList<String> listDir(String fspath,String resumeToken) throws IsilonException {  fspath=scrubPath(fspath);  ClientResponse clientResp=null;  try {    fspath=URLEncoder.encode(fspath,"UTF-8");    IsilonList<String> ret=new IsilonList<String>();    String query=(resumeToken == null) ? "?type=container" : "?type=container&resume=" + resumeToken;    clientResp=_client.get(_baseUrl.resolve(URI_IFS.resolve(fspath + query)));    if (clientResp.getStatus() != 200) {      processErrorResponse("list","directories",clientResp.getStatus(),clientResp.getEntity(JSONObject.class));    } else {      JSONObject resp=clientResp.getEntity(JSONObject.class);      sLogger.debug("listDir: Output from Server {}",resp.get("children"));      JSONArray ar=(JSONArray)resp.get("children");      for (int i=0; i < ar.length(); i++) {        JSONObject ind=ar.getJSONObject(i);        ret.add(ind.get("name").toString());      }      if (resp.has("resume") && !resp.getString("resume").equals("null")) {        ret.setToken(resp.getString("resume"));      }    }    return ret;  } catch (  IsilonException ie) {    throw ie;  }catch (  Exception e) {    String msg=String.format("%1$s",(clientResp == null) ? "" : clientResp);    throw IsilonException.exceptions.unableToGetSubDirectoryList(msg,e);  } finally {    if (clientResp != null) {      clientResp.close();    }  }}  }
class C{  public int size(){  return map.size();}  }
class C{  public DefaultSamFilter(final SamFilterParams params){  mFilterParams=params;}  }
class C{  private void copyToPersistNfsACL(NfsACE ace,NFSShareACL dbShareAcl,FileShare fs,FileDeviceInputOutput args){  if (args.getFileSystemPath() != null) {    String path=args.getFileSystemPath();    if (args.getSubDirectory() != null && !args.getSubDirectory().isEmpty()) {      path=path + "/" + args.getSubDirectory();    }    dbShareAcl.setFileSystemPath(path);  }  if (ace.getUser() != null) {    dbShareAcl.setUser(ace.getUser());  }  if (ace.getType() != null) {    dbShareAcl.setType(ace.getType());  }  if (ace.getDomain() != null) {    dbShareAcl.setDomain(ace.getDomain());  }  if (args.getFileOperation()) {    dbShareAcl.setFileSystemId(fs.getId());  } else {    dbShareAcl.setSnapshotId(args.getSnapshotId());  }  if (ace.getPermissions() != null) {    dbShareAcl.setPermissions(ace.getPermissions());  }  if (ace.getPermissionType() != null) {    dbShareAcl.setPermissionType(ace.getPermissionType());  }}  }
class C{  public TransitionExpressionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public boolean prettyPrintEnabled(){  return _prettyPrint;}  }
class C{  private MethodType resolveMethodReferences(MethodType method,Events events){  for (  AnnotationType a : method.getAnnotations()) {    AnnotationType lookupUp=getOrAddReferredType(a,events,AnnotationType.class);    method.addAnnotation(lookupUp);  }  for (  ClassType t : method.getExceptions()) {    ClassType lookup=getOrAddReferredType(t,events,ClassType.class);    method.addException(lookup);  }  return method;}  }
class C{  public void importCertificateInPem(KeyStore keyStore,KeyStoreData keyStoreData){  try {    X509Certificate cert=certificateTool.convertX509PemToCert(keyStoreData.getHEXCert());    keyStore.setCertificateEntry(keyStoreData.getAlias(),cert);    this.save(keyStore,keyStoreData);  } catch (  Exception e) {    throw new RuntimeException("Error importing certificate",e);  }}  }
class C{  public void beforeFirst(){  currentIndex=0;}  }
class C{  public CheckUpdateAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("CheckUpdateAction.statusbar"));  putValue(NAME,res.getString("CheckUpdateAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("CheckUpdateAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("CheckUpdateAction.image")))));}  }
class C{  public SharedUser(AuthenticatedUser user,SharedUserContext userContext){  this.user=user;  this.userContext=userContext;}  }
class C{  public DeletionConstraintExceptionBean(DomainObjectExceptionBean sup,ClassEnum depClassEnum){  super(sup,sup.getClassEnum());  setDependentClassEnum(depClassEnum);}  }
class C{  public SimpleEnumMap(int expected,float f){  super(expected,f,(Strategy)SimpleEnumHashingStrategy.INSTANCE);}  }
class C{  public String createTablesString(TableCreationMode mode){  ArrayList<Type<?>> sorted=sortTypes();  StringBuilder sb=new StringBuilder();  for (  Type<?> type : sorted) {    String sql=tableCreateStatement(type,mode);    sb.append(sql);    sb.append(";\n");  }  return sb.toString();}  }
class C{  void fireParserNoticesChange(){  firePropertyChange(PARSER_NOTICES_PROPERTY,null,null);}  }
class C{  private List<NFSShareACL> queryAllNfsACLInDB(FileShare fs,String subDir,FileDeviceInputOutput args){  List<NFSShareACL> allNfsShareAcl=null;  List<NFSShareACL> returnNfsShareAcl=null;  List<NFSShareACL> fsNfsShareAcl=new ArrayList<NFSShareACL>();  List<NFSShareACL> subDirNfsShareAcl=new ArrayList<NFSShareACL>();  _log.info("Querying all Nfs File System ACL Using FsId {}",fs.getId());  try {    ContainmentConstraint containmentConstraint=null;    if (args.getFileOperation()) {      containmentConstraint=ContainmentConstraint.Factory.getFileNfsAclsConstraint(fs.getId());    } else {      containmentConstraint=ContainmentConstraint.Factory.getSnapshotNfsAclsConstraint(args.getSnapshotId());    }    allNfsShareAcl=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,NFSShareACL.class,containmentConstraint);  } catch (  Exception e) {    _log.error("Error while querying {}",e);  }  returnNfsShareAcl=fsNfsShareAcl;  String absolutefsPath=fs.getPath();  String absoluteDirPath="";  if (subDir != null && !subDir.isEmpty()) {    absoluteDirPath=absolutefsPath + "/" + subDir;    returnNfsShareAcl=subDirNfsShareAcl;  }  for (  NFSShareACL nfsAcl : allNfsShareAcl) {    if (nfsAcl.getFileSystemPath().equals(absoluteDirPath)) {      subDirNfsShareAcl.add(nfsAcl);    } else     if (nfsAcl.getFileSystemPath().equals(absolutefsPath)) {      fsNfsShareAcl.add(nfsAcl);    }  }  return returnNfsShareAcl;}  }
class C{  @SafeVarargs public static <T>T[] prepend(T first,T... rest){  T[] newArray=createWithSameComponentType(rest.length + 1,rest);  newArray[0]=first;  System.arraycopy(rest,0,newArray,1,rest.length);  return newArray;}  }
class C{  @Deprecated public ContentItem language(String language){  this.language=language;  return this;}  }
class C{  public ParetoChartItemLabelGenerator(Map<String,String> itemLabels){  super(DEFAULT_LABEL_FORMAT_STRING,NumberFormat.getInstance());  this.itemLabels=itemLabels;}  }
class C{  public boolean readBoolean() throws IOException {  expectStartTag("boolean");  int value=parseInt();  expectEndTag("boolean");  return value != 0;}  }
class C{  private void sendInstallNotificationAndNextStep(OMAInfo omaInfo,DownloadInfo downloadInfo,String statusMessage){  if (!sendNotification(omaInfo,downloadInfo,statusMessage)) {    showNextUrlDialog(omaInfo);  }}  }
class C{  private static void fileInit(InputStream is){  try {    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();    dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,Boolean.TRUE);    dbf.setNamespaceAware(true);    dbf.setValidating(false);    DocumentBuilder db=dbf.newDocumentBuilder();    Document doc=db.parse(is);    Node config=doc.getFirstChild();    for (; config != null; config=config.getNextSibling()) {      if ("Configuration".equals(config.getLocalName())) {        break;      }    }    if (config == null) {      log.log(java.util.logging.Level.SEVERE,"Error in reading configuration file - Configuration element not found");      return;    }    for (Node el=config.getFirstChild(); el != null; el=el.getNextSibling()) {      if (Node.ELEMENT_NODE != el.getNodeType()) {        continue;      }      String tag=el.getLocalName();      if (tag.equals("ResourceBundles")) {        Element resource=(Element)el;        Attr langAttr=resource.getAttributeNode("defaultLanguageCode");        Attr countryAttr=resource.getAttributeNode("defaultCountryCode");        String languageCode=(langAttr == null) ? null : langAttr.getNodeValue();        String countryCode=(countryAttr == null) ? null : countryAttr.getNodeValue();        I18n.init(languageCode,countryCode);      }      if (tag.equals("CanonicalizationMethods")) {        Element[] list=XMLUtils.selectNodes(el.getFirstChild(),CONF_NS,"CanonicalizationMethod");        for (int i=0; i < list.length; i++) {          String uri=list[i].getAttributeNS(null,"URI");          String javaClass=list[i].getAttributeNS(null,"JAVACLASS");          try {            Canonicalizer.register(uri,javaClass);            if (log.isLoggable(java.util.logging.Level.FINE)) {              log.log(java.util.logging.Level.FINE,"Canonicalizer.register(" + uri + ", "+ javaClass+ ")");            }          } catch (          ClassNotFoundException e) {            Object exArgs[]={uri,javaClass};            log.log(java.util.logging.Level.SEVERE,I18n.translate("algorithm.classDoesNotExist",exArgs));          }        }      }      if (tag.equals("TransformAlgorithms")) {        Element[] tranElem=XMLUtils.selectNodes(el.getFirstChild(),CONF_NS,"TransformAlgorithm");        for (int i=0; i < tranElem.length; i++) {          String uri=tranElem[i].getAttributeNS(null,"URI");          String javaClass=tranElem[i].getAttributeNS(null,"JAVACLASS");          try {            Transform.register(uri,javaClass);            if (log.isLoggable(java.util.logging.Level.FINE)) {              log.log(java.util.logging.Level.FINE,"Transform.register(" + uri + ", "+ javaClass+ ")");            }          } catch (          ClassNotFoundException e) {            Object exArgs[]={uri,javaClass};            log.log(java.util.logging.Level.SEVERE,I18n.translate("algorithm.classDoesNotExist",exArgs));          }catch (          NoClassDefFoundError ex) {            log.log(java.util.logging.Level.WARNING,"Not able to found dependencies for algorithm, I'll keep working.");          }        }      }      if ("JCEAlgorithmMappings".equals(tag)) {        Node algorithmsNode=((Element)el).getElementsByTagName("Algorithms").item(0);        if (algorithmsNode != null) {          Element[] algorithms=XMLUtils.selectNodes(algorithmsNode.getFirstChild(),CONF_NS,"Algorithm");          for (int i=0; i < algorithms.length; i++) {            Element element=algorithms[i];            String id=element.getAttribute("URI");            JCEMapper.register(id,new JCEMapper.Algorithm(element));          }        }      }      if (tag.equals("SignatureAlgorithms")) {        Element[] sigElems=XMLUtils.selectNodes(el.getFirstChild(),CONF_NS,"SignatureAlgorithm");        for (int i=0; i < sigElems.length; i++) {          String uri=sigElems[i].getAttributeNS(null,"URI");          String javaClass=sigElems[i].getAttributeNS(null,"JAVACLASS");          try {            SignatureAlgorithm.register(uri,javaClass);            if (log.isLoggable(java.util.logging.Level.FINE)) {              log.log(java.util.logging.Level.FINE,"SignatureAlgorithm.register(" + uri + ", "+ javaClass+ ")");            }          } catch (          ClassNotFoundException e) {            Object exArgs[]={uri,javaClass};            log.log(java.util.logging.Level.SEVERE,I18n.translate("algorithm.classDoesNotExist",exArgs));          }        }      }      if (tag.equals("ResourceResolvers")) {        Element[] resolverElem=XMLUtils.selectNodes(el.getFirstChild(),CONF_NS,"Resolver");        for (int i=0; i < resolverElem.length; i++) {          String javaClass=resolverElem[i].getAttributeNS(null,"JAVACLASS");          String description=resolverElem[i].getAttributeNS(null,"DESCRIPTION");          if ((description != null) && (description.length() > 0)) {            if (log.isLoggable(java.util.logging.Level.FINE)) {              log.log(java.util.logging.Level.FINE,"Register Resolver: " + javaClass + ": "+ description);            }          } else {            if (log.isLoggable(java.util.logging.Level.FINE)) {              log.log(java.util.logging.Level.FINE,"Register Resolver: " + javaClass + ": For unknown purposes");            }          }          try {            ResourceResolver.register(javaClass);          } catch (          Throwable e) {            log.log(java.util.logging.Level.WARNING,"Cannot register:" + javaClass + " perhaps some needed jars are not installed",e);          }        }      }      if (tag.equals("KeyResolver")) {        Element[] resolverElem=XMLUtils.selectNodes(el.getFirstChild(),CONF_NS,"Resolver");        List<String> classNames=new ArrayList<String>(resolverElem.length);        for (int i=0; i < resolverElem.length; i++) {          String javaClass=resolverElem[i].getAttributeNS(null,"JAVACLASS");          String description=resolverElem[i].getAttributeNS(null,"DESCRIPTION");          if ((description != null) && (description.length() > 0)) {            if (log.isLoggable(java.util.logging.Level.FINE)) {              log.log(java.util.logging.Level.FINE,"Register Resolver: " + javaClass + ": "+ description);            }          } else {            if (log.isLoggable(java.util.logging.Level.FINE)) {              log.log(java.util.logging.Level.FINE,"Register Resolver: " + javaClass + ": For unknown purposes");            }          }          classNames.add(javaClass);        }        KeyResolver.registerClassNames(classNames);      }      if (tag.equals("PrefixMappings")) {        if (log.isLoggable(java.util.logging.Level.FINE)) {          log.log(java.util.logging.Level.FINE,"Now I try to bind prefixes:");        }        Element[] nl=XMLUtils.selectNodes(el.getFirstChild(),CONF_NS,"PrefixMapping");        for (int i=0; i < nl.length; i++) {          String namespace=nl[i].getAttributeNS(null,"namespace");          String prefix=nl[i].getAttributeNS(null,"prefix");          if (log.isLoggable(java.util.logging.Level.FINE)) {            log.log(java.util.logging.Level.FINE,"Now I try to bind " + prefix + " to "+ namespace);          }          ElementProxy.setDefaultPrefix(namespace,prefix);        }      }    }  } catch (  Exception e) {    log.log(java.util.logging.Level.SEVERE,"Bad: ",e);    e.printStackTrace();  }}  }
class C{  @SuppressWarnings("fallthrough") public int read() throws IOException {switch (ch) {case '%':{      ch=in.read();      if (replace > 0) {        return '%';      }      int pos=0;      while (((ch >= 'a') && (ch <= 'z')) || ((ch >= 'A') && (ch <= 'Z')) || ((ch >= '0') && (ch <= '9'))|| (ch == '.')|| (ch == '-')) {        str[pos++]=(char)ch;        ch=in.read();      }      if (pos == 0) {        return '%';      }      String nm=new String(str,0,pos);      Entity ent=dtd.getEntity(nm);      if (ent == null) {        error("undefined entity reference: " + nm);        return read();      }switch (ch) {case '\r':        ln++;case ';':      ch=in.read();    break;case '\n':  ln++;if ((ch=in.read()) == '\r') {  ch=in.read();}break;}try {push(getEntityInputReader(ent));} catch (Exception e) {error("entity data not found: " + ent + ", "+ ent.getString());}return read();}case '\n':ln++;if ((ch=in.read()) == '\r') {ch=in.read();}return '\n';case '\r':ln++;ch=in.read();return '\n';case -1:if (stack.size() > 0) {in=(Reader)stack.pop();ch=((Integer)stack.pop()).intValue();ln=((Integer)stack.pop()).intValue();return read();}return -1;default :int c=ch;ch=in.read();return c;}}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void incrementModCounts(){  if (externalMessageList != null) {    externalMessageList.incrementModCount();  }  if (externalBuilderList != null) {    externalBuilderList.incrementModCount();  }  if (externalMessageOrBuilderList != null) {    externalMessageOrBuilderList.incrementModCount();  }}  }
class C{  public Agent(String type,String job,String name){  if (type == null || job == null)   throw new IllegalArgumentException("null argument in agent constructor");  if (name == null)   name=randomName();  this.name=type + "." + job+ "."+ name;  this.job=job;  this.type=type;}  }
class C{  private void addItem(File directory){  if (directory == null) {    return;  }  boolean useShellFolder=FilePane.usesShellFolder(chooser);  directories.clear();  File[] baseFolders=(useShellFolder) ? (File[])ShellFolder.get("fileChooserComboBoxFolders") : fsv.getRoots();  directories.addAll(Arrays.asList(baseFolders));  File canonical;  try {    canonical=ShellFolder.getNormalizedFile(directory);  } catch (  IOException e) {    canonical=directory;  }  try {    File sf=useShellFolder ? ShellFolder.getShellFolder(canonical) : canonical;    File f=sf;    Vector<File> path=new Vector<File>(10);    do {      path.addElement(f);    } while ((f=f.getParentFile()) != null);    int pathCount=path.size();    for (int i=0; i < pathCount; i++) {      f=path.get(i);      if (directories.contains(f)) {        int topIndex=directories.indexOf(f);        for (int j=i - 1; j >= 0; j--) {          directories.insertElementAt(path.get(j),topIndex + i - j);        }        break;      }    }    calculateDepths();    setSelectedItem(sf);  } catch (  FileNotFoundException ex) {    calculateDepths();  }}  }
class C{  public DoubleListAdapter(AbstractDoubleList content){  this.content=content;}  }
class C{  private void cleanImport(){  for (  long trackId : trackIds) {    myTracksProviderUtils.deleteTrack(context,trackId);  }}  }
class C{  @Override protected Object createTest() throws Exception {  if (LOGGER.isLoggable(Level.FINER)) {    LOGGER.finer(" Create and inject test class: " + getTestClass().getJavaClass());  }  return this.injector.getInstance(getTestClass().getJavaClass());}  }
class C{  public static void pcOrientbk(IKnowledge bk,Graph graph,List<Node> nodes){  TetradLogger.getInstance().log("details","Staring BK Orientation.");  for (Iterator<KnowledgeEdge> it=bk.forbiddenEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=translate(edge.getFrom(),nodes);    Node to=translate(edge.getTo(),nodes);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.removeEdge(from,to);    graph.addDirectedEdge(to,from);    TetradLogger.getInstance().log("knowledgeOrientations",SearchLogUtils.edgeOrientedMsg("IKnowledge",graph.getEdge(to,from)));  }  for (Iterator<KnowledgeEdge> it=bk.requiredEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=translate(edge.getFrom(),nodes);    Node to=translate(edge.getTo(),nodes);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.removeEdges(from,to);    graph.addDirectedEdge(from,to);    TetradLogger.getInstance().log("knowledgeOrientations",SearchLogUtils.edgeOrientedMsg("IKnowledge",graph.getEdge(from,to)));  }  TetradLogger.getInstance().log("details","Finishing BK Orientation.");}  }
