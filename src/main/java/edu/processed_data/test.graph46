class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_INVITE_PARTY(String value0,String value2,String value1){  return new SM_SYSTEM_MESSAGE(1300968,value0,value2,value1);}  }
class C{  @Override public void internalEntityDecl(String name,XMLString text,XMLString nonNormalizedText,Augmentations augs) throws XNIException {  if (DEBUG_EVENTS) {    System.out.println("==>internalEntityDecl: " + name);    if (DEBUG_BASEURI) {      System.out.println("   baseURI:" + fBaseURIStack.peek());    }  }  if (fInternalSubset != null && !fInDTDExternalSubset) {    fInternalSubset.append("<!ENTITY ");    if (name.startsWith("%")) {      fInternalSubset.append("% ");      fInternalSubset.append(name.substring(1));    } else {      fInternalSubset.append(name);    }    fInternalSubset.append(' ');    String value=nonNormalizedText.toString();    boolean singleQuote=value.indexOf('\'') == -1;    fInternalSubset.append(singleQuote ? '\'' : '"');    fInternalSubset.append(value);    fInternalSubset.append(singleQuote ? '\'' : '"');    fInternalSubset.append(">\n");  }  if (name.startsWith("%"))   return;  if (fDocumentType != null) {    NamedNodeMap entities=fDocumentType.getEntities();    EntityImpl entity=(EntityImpl)entities.getNamedItem(name);    if (entity == null) {      entity=(EntityImpl)fDocumentImpl.createEntity(name);      entity.setBaseURI((String)fBaseURIStack.peek());      entities.setNamedItem(entity);    }  }  if (fDocumentTypeIndex != -1) {    boolean found=false;    int node=fDeferredDocumentImpl.getLastChild(fDocumentTypeIndex,false);    while (node != -1) {      short nodeType=fDeferredDocumentImpl.getNodeType(node,false);      if (nodeType == Node.ENTITY_NODE) {        String nodeName=fDeferredDocumentImpl.getNodeName(node,false);        if (nodeName.equals(name)) {          found=true;          break;        }      }      node=fDeferredDocumentImpl.getRealPrevSibling(node,false);    }    if (!found) {      int entityIndex=fDeferredDocumentImpl.createDeferredEntity(name,null,null,null,(String)fBaseURIStack.peek());      fDeferredDocumentImpl.appendChild(fDocumentTypeIndex,entityIndex);    }  }}  }
class C{  private void saveWidgetValues(){  IDialogSettings settings=getDialogSettings();  if (settings != null) {    if (showCredentials) {      String[] userNames=settings.getArray(STORE_USERNAME_ID);      if (userNames == null)       userNames=new String[0];      userNames=addToHistory(userNames,userCombo.getText());      settings.put(STORE_USERNAME_ID,userNames);    }    String[] hostNames=settings.getArray(STORE_URL_ID);    if (hostNames == null)     hostNames=new String[0];    hostNames=addToHistory(hostNames,urlCombo.getText());    settings.put(STORE_URL_ID,hostNames);  }}  }
class C{  public long optLong(String key,long defaultValue){  try {    return this.getLong(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static void shuffle(double[] a){  if (a == null)   throw new NullPointerException("argument array is null");  int n=a.length;  for (int i=0; i < n; i++) {    int r=i + uniform(n - i);    double temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  public boolean hideRequested(){  return hideRequested;}  }
class C{  public void addColumn(String name,Class type,Object defaultValue){  throw new UnsupportedOperationException();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UNION_ALREADY_OTHER_UNION(String value0){  return new SM_SYSTEM_MESSAGE(1400564,value0);}  }
class C{  public void put(String key,InputStream stream,String name){  put(key,stream,name,null);}  }
class C{  public String toStringMultiLine(boolean interpolate){  ConfigurationNodeVisitor visitor=new ToStringMultiLineVisitor();  getRootNode().visit(visitor);  return visitor.toString();}  }
class C{  private void mapGUI(){  this.btnRelativeLayoutTest=(Button)findViewById(R.id.btnRelativeLayout);  this.btnRelativeLayoutTest.setOnClickListener(btnRelativeLayoutOnClickListener);  this.btnLinearLayoutTest=(Button)findViewById(R.id.btnLinearLayout);  this.btnLinearLayoutTest.setOnClickListener(btnLinearLayoutOnClickListener);  this.btnFrameLayoutTest=(Button)findViewById(R.id.btnFrameLayout);  this.btnFrameLayoutTest.setOnClickListener(btnFrameLayoutOnClickListener);}  }
class C{  public void storeFenceId(@NonNull String fenceId){  Set<String> setTmp=mPrefs.getStringSet(mPrefix + FENCE_ID_SET_KEY,null);  HashSet<String> fenceIdSet;  if (setTmp == null) {    fenceIdSet=new HashSet<>();  } else {    fenceIdSet=new HashSet<>(setTmp);  }  SharedPreferences.Editor editor=mPrefs.edit();  fenceIdSet.add(fenceId);  editor.putStringSet(mPrefix + FENCE_ID_SET_KEY,fenceIdSet);  editor.apply();}  }
class C{  @Override public void processingInstruction(String target,XMLString data,Augmentations augs) throws XNIException {}  }
class C{  public DiffMovingAverage(){  this(DEFAULT_SIZE);}  }
class C{  public boolean isNumericType(){  return getValueType().isNumeric();}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  @Override protected void processPolar(double[] r,double[] phi){  for (int i=0; i < phi.length; i++) {    phi[i]=0;  }}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  previewFormat=parameters.getPreviewFormat();  previewFormatString=parameters.get("preview-format");  Log.d(TAG,"Default preview format: " + previewFormat + '/'+ previewFormatString);  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  screenResolution=new Point(display.getWidth(),display.getHeight());  Log.d(TAG,"Screen resolution: " + screenResolution);  Point screenResolutionForCamera=new Point();  screenResolutionForCamera.x=screenResolution.x;  screenResolutionForCamera.y=screenResolution.y;  if (screenResolution.x < screenResolution.y) {    screenResolutionForCamera.x=screenResolution.y;    screenResolutionForCamera.y=screenResolution.x;  }  cameraResolution=getCameraResolution(parameters,screenResolutionForCamera);  Log.d(TAG,"Camera resolution: " + screenResolution);}  }
class C{  public void normalizeIndices(){  Int2ObjectMap<List<CTNode>> mOrg=new Int2ObjectOpenHashMap<List<CTNode>>();  getCoIndexMap(n_root,mOrg);  if (mOrg.isEmpty())   return;  List<Entry<Integer,List<CTNode>>> ps=new ArrayList<>(mOrg.entrySet());  Collections.sort(ps,Entry.comparingByKey());  Int2IntMap mNew=new Int2IntOpenHashMap();  int coIndex=1, last, i;  boolean isAnteFound;  List<CTNode> list;  CTNode curr, ec;  for (  Entry<Integer,List<CTNode>> p : ps) {    list=p.getValue();    last=list.size() - 1;    isAnteFound=false;    for (i=last; i >= 0; i--) {      curr=list.get(i);      if (curr.isEmptyCategoryTerminal()) {        ec=curr.getTerminalList().get(0);        if (i == last || isAnteFound || PTBLib.isDiscontinuousConstituent(ec) || PTBLib.containsCoordination(curr.getLowestCommonAncestor(list.get(i + 1))))         curr.setEmptyCategoryIndex(-1); else         curr.setEmptyCategoryIndex(coIndex++);        if (isAnteFound || i > 0)         ec.appendWordForm("-" + coIndex);      } else       if (isAnteFound) {        curr.setEmptyCategoryIndex(-1);      } else {        curr.setEmptyCategoryIndex(coIndex);        mNew.put(p.getKey().intValue(),coIndex);        isAnteFound=true;      }    }    coIndex++;  }  int[] lastIndex={coIndex};  remapGapIndices(mNew,lastIndex,n_root);}  }
class C{  public static double chiSquare2by2(int k,int n,int r,int m){  int[][] cg={{k,r - k},{m - k,n - (k + (r - k) + (m - k))}};  int[] cgr={r,n - r};  int[] cgc={m,n - m};  double total=0.0;  for (int i=0; i < 2; i++) {    for (int j=0; j < 2; j++) {      double exp=(double)cgr[i] * cgc[j] / n;      total+=(cg[i][j] - exp) * (cg[i][j] - exp) / exp;    }  }  return total;}  }
class C{  public void parseLabelMapFromLine(String labelMapAsLine){  NexusStreamParser np=new NexusStreamParser(new StringReader(labelMapAsLine));  try {    while (!np.peekMatchIgnoreCase(";")) {      String sample=np.getWordRespectCase();      np.matchIgnoreCase(":");      String label=np.getWordRespectCase();      sample2label.put(sample,label);    }  } catch (  IOException e) {  }}  }
class C{  private static String wrapLine(String logContent,int maxLengthPerLine){  assert logContent != null;  if (logContent.isEmpty()) {    return logContent;  }  int currentIndex=0;  StringBuilder sb=new StringBuilder(logContent.length() + logContent.length() / maxLengthPerLine);  while (currentIndex < logContent.length()) {    int currentLineLength=Math.min(mConfig.getMaxLengthPerLine(),logContent.length() - currentIndex);    String subLine;    int newlineIndex=logContent.indexOf("\n",currentIndex);    int thisLineEnd=currentIndex + currentLineLength;    if (newlineIndex != -1 && newlineIndex < thisLineEnd) {      subLine=logContent.substring(currentIndex,newlineIndex);      currentIndex=newlineIndex + 1;    } else {      subLine=logContent.substring(currentIndex,thisLineEnd);      currentIndex=thisLineEnd;    }    sb.append(subLine);    if (currentIndex < logContent.length()) {      sb.append("\n");    }  }  return sb.toString();}  }
class C{  public static boolean isHasSdcard(){  String status=Environment.getExternalStorageState();  if (status.equals(Environment.MEDIA_MOUNTED)) {    return true;  } else {    return false;  }}  }
class C{  public void loadBasicClasses(){  addReflectionTraceClasses();  for (int i=SootClass.BODIES; i >= SootClass.HIERARCHY; i--) {    for (    String name : basicclasses[i]) {      tryLoadClass(name,i);    }  }}  }
class C{  @RequestMapping(value={"/rest/v1/user"},method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @ResponseStatus(value=HttpStatus.OK) public ModelAndView returnLoggedInUser(){  final User loggedInUser=AppScanUtils.getLoggedInUser();  loggedInUser.setPassword("");  return new ModelAndView(view,AppScanConstants.JSON_RESPONSE_DATA_IDENTIFIER,loggedInUser);}  }
class C{  protected int processChar(){  return 0;}  }
class C{  public boolean isAscending(){  return m_asc;}  }
class C{  public static boolean isEmpty(Collection<?> collection){  return (collection == null || collection.isEmpty());}  }
class C{  public MarketAddToAlbumQuery(VkApiClient client,UserActor actor,int ownerId,int itemId,int... albumIds){  super(client,"market.addToAlbum",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  itemId(itemId);  albumIds(albumIds);}  }
class C{  public ElemValPair(String name,char kind){  this.name=new AsciiCP(name);  this.kind=(byte)kind;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_EAT(String value0){  return new SM_SYSTEM_MESSAGE(1300385,value0);}  }
class C{  private HttpmdUtil(){}  }
class C{  public ProjectDTO toDTO(Project project){  return toDTO(project,1);}  }
class C{  public LeastSquaresBuilder checker(final ConvergenceChecker<Evaluation> newChecker){  this.checker=newChecker;  return this;}  }
class C{  public void decode(int[] received,int twoS) throws ReedSolomonException {  GenericGFPoly poly=new GenericGFPoly(field,received);  int[] syndromeCoefficients=new int[twoS];  boolean noError=true;  for (int i=0; i < twoS; i++) {    int eval=poly.evaluateAt(field.exp(i + field.getGeneratorBase()));    syndromeCoefficients[syndromeCoefficients.length - 1 - i]=eval;    if (eval != 0) {      noError=false;    }  }  if (noError) {    return;  }  GenericGFPoly syndrome=new GenericGFPoly(field,syndromeCoefficients);  GenericGFPoly[] sigmaOmega=runEuclideanAlgorithm(field.buildMonomial(twoS,1),syndrome,twoS);  GenericGFPoly sigma=sigmaOmega[0];  GenericGFPoly omega=sigmaOmega[1];  int[] errorLocations=findErrorLocations(sigma);  int[] errorMagnitudes=findErrorMagnitudes(omega,errorLocations);  for (int i=0; i < errorLocations.length; i++) {    int position=received.length - 1 - field.log(errorLocations[i]);    if (position < 0) {      throw new ReedSolomonException("Bad error location");    }    received[position]=GenericGF.addOrSubtract(received[position],errorMagnitudes[i]);  }}  }
class C{  public synchronized void close(){}  }
class C{  public BatchResponsePacket(int[] result){  _result=result;}  }
class C{  public int length(){  return fLength;}  }
class C{  private void drawYAxisTicksLog(Graphics2D gc){  gc.setFont(getFont(ChartViewer.FontKeys.YAxisFont.toString()));  int x0=leftMargin;  int y0=getHeight() - bottomMargin;  int y1=topMargin;  double maxValue=getChartData().getRangeY().get2().doubleValue();  double botY=0;  double topY=computeMaxYAxisValueLogScale(maxValue);  double yFactor;  if (topY > botY)   yFactor=(y0 - y1) / (topY - botY); else   yFactor=1;  double value=0;  double previousY=-100000;  int mantisse=0;  int exponent=0;  while (value <= maxValue) {    if (maxDisplayedYValue != null && value > maxDisplayedYValue)     break;    double yPos=y0 - (value > 0 ? Math.log10(value) : 0) * yFactor;    if ((mantisse <= 1 || mantisse == 5) && Math.abs(yPos - previousY) >= 20) {      String label="" + (long)value;      Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();      previousY=yPos;      int x=leftMargin - (int)(labelSize.getWidth() + 3);      int y=(int)(yPos + labelSize.getHeight() / 2.0);      gc.drawString(label,x,y);      gc.drawLine(x0,(int)Math.round(yPos),x0 + 2,(int)Math.round(yPos));    }    if (mantisse < 9)     mantisse++; else {      mantisse=1;      exponent++;    }    value=mantisse * Math.pow(10,exponent);  }}  }
class C{  public boolean isPrimitive(){  return !isBinaryObject() && !isCollection() && !isSymbol()&& !isNull();}  }
class C{  @Override public DocumentType createDocumentType(String qualifiedName,String publicID,String systemID){  checkQName(qualifiedName);  return new DocumentTypeImpl(null,qualifiedName,publicID,systemID);}  }
class C{  public void add(Predicate p,FontAction f){  super.add(p,f);}  }
class C{  public boolean splitSymbolizers(){  return splitSymbolizers;}  }
class C{  public static void lsp2lpc(double lsp[],double a[],int m){  int i, k, mh1, mh2, flag_odd;  double xx, xf, xff;  int p, q;  int a0, a1, a2, b0, b1, b2;  flag_odd=0;  if (m % 2 == 0)   mh1=mh2=m / 2; else {    mh1=(m + 1) / 2;    mh2=(m - 1) / 2;    flag_odd=1;  }  double[] lsp2lpc_buff=new double[(5 * m + 6)];  int lsp2lpc_size=m;  p=m;  q=p + mh1;  a0=q + mh2;  a1=a0 + (mh1 + 1);  a2=a1 + (mh1 + 1);  b0=a2 + (mh1 + 1);  b1=b0 + (mh2 + 1);  b2=b1 + (mh2 + 1);  System.arraycopy(lsp,1,lsp2lpc_buff,0,m);  for (i=0; i < mh1 + 1; i++)   lsp2lpc_buff[a0 + i]=0.0;  for (i=0; i < mh1 + 1; i++)   lsp2lpc_buff[a1 + i]=0.0;  for (i=0; i < mh1 + 1; i++)   lsp2lpc_buff[a2 + i]=0.0;  for (i=0; i < mh2 + 1; i++)   lsp2lpc_buff[b0 + i]=0.0;  for (i=0; i < mh2 + 1; i++)   lsp2lpc_buff[b1 + i]=0.0;  for (i=0; i < mh2 + 1; i++)   lsp2lpc_buff[b2 + i]=0.0;  for (i=k=0; i < mh1; i++, k+=2)   lsp2lpc_buff[p + i]=-2.0 * Math.cos(lsp2lpc_buff[k]);  for (i=k=0; i < mh2; i++, k+=2)   lsp2lpc_buff[q + i]=-2.0 * Math.cos(lsp2lpc_buff[k + 1]);  xx=1.0;  xf=xff=0.0;  for (k=0; k <= m; k++) {    if (flag_odd == 1) {      lsp2lpc_buff[a0 + 0]=xx;      lsp2lpc_buff[b0 + 0]=xx - xff;      xff=xf;      xf=xx;    } else {      lsp2lpc_buff[a0 + 0]=xx + xf;      lsp2lpc_buff[b0 + 0]=xx - xf;      xf=xx;    }    for (i=0; i < mh1; i++) {      lsp2lpc_buff[a0 + i + 1]=lsp2lpc_buff[a0 + i] + lsp2lpc_buff[p + i] * lsp2lpc_buff[a1 + i] + lsp2lpc_buff[a2 + i];      lsp2lpc_buff[a2 + i]=lsp2lpc_buff[a1 + i];      lsp2lpc_buff[a1 + i]=lsp2lpc_buff[a0 + i];    }    for (i=0; i < mh2; i++) {      lsp2lpc_buff[b0 + i + 1]=lsp2lpc_buff[b0 + i] + lsp2lpc_buff[q + i] * lsp2lpc_buff[b1 + i] + lsp2lpc_buff[b2 + i];      lsp2lpc_buff[b2 + i]=lsp2lpc_buff[b1 + i];      lsp2lpc_buff[b1 + i]=lsp2lpc_buff[b0 + i];    }    if (k != 0)     a[k - 1]=-0.5 * (lsp2lpc_buff[a0 + mh1] + lsp2lpc_buff[b0 + mh2]);    xx=0.0;  }  for (i=m - 1; i >= 0; i--)   a[i + 1]=-a[i];  a[0]=1.0;}  }
class C{  private DateUtils(){}  }
class C{  @Override public void write(byte[] b) throws IOException {}  }
class C{  protected MarketReportCommentQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  private static Number createNumberFromStringValue(String type,String value) throws NumberFormatException {  final String suffix=value.substring(value.length() - 1);  if ("L".equalsIgnoreCase(suffix)) {    return Long.valueOf(value.substring(0,value.length() - 1));  }  if ("F".equalsIgnoreCase(suffix)) {    return Float.valueOf(value.substring(0,value.length() - 1));  }  if ("D".equalsIgnoreCase(suffix)) {    return Double.valueOf(value.substring(0,value.length() - 1));  }  try {    return (Number)newStringConstructor(type,value);  } catch (  Exception ex) {  }  try {    return Integer.valueOf(value);  } catch (  NumberFormatException e) {  }  try {    return Long.valueOf(value);  } catch (  NumberFormatException e1) {  }  try {    return Double.valueOf(value);  } catch (  NumberFormatException e2) {  }  throw new NumberFormatException("Cannot convert string value '" + value + "' into a numerical value");}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] leftTopBlack=image.getTopLeftOnBit();  int[] rightBottomBlack=image.getBottomRightOnBit();  if (leftTopBlack == null || rightBottomBlack == null) {    throw NotFoundException.getNotFoundInstance();  }  float moduleSize=moduleSize(leftTopBlack,image);  int top=leftTopBlack[1];  int bottom=rightBottomBlack[1];  int left=leftTopBlack[0];  int right=rightBottomBlack[0];  if (left >= right || top >= bottom) {    throw NotFoundException.getNotFoundInstance();  }  if (bottom - top != right - left) {    right=left + (bottom - top);  }  int matrixWidth=Math.round((right - left + 1) / moduleSize);  int matrixHeight=Math.round((bottom - top + 1) / moduleSize);  if (matrixWidth <= 0 || matrixHeight <= 0) {    throw NotFoundException.getNotFoundInstance();  }  if (matrixHeight != matrixWidth) {    throw NotFoundException.getNotFoundInstance();  }  int nudge=(int)(moduleSize / 2.0f);  top+=nudge;  left+=nudge;  int nudgedTooFarRight=left + (int)((matrixWidth - 1) * moduleSize) - right;  if (nudgedTooFarRight > 0) {    if (nudgedTooFarRight > nudge) {      throw NotFoundException.getNotFoundInstance();    }    left-=nudgedTooFarRight;  }  int nudgedTooFarDown=top + (int)((matrixHeight - 1) * moduleSize) - bottom;  if (nudgedTooFarDown > 0) {    if (nudgedTooFarDown > nudge) {      throw NotFoundException.getNotFoundInstance();    }    top-=nudgedTooFarDown;  }  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);  for (int y=0; y < matrixHeight; y++) {    int iOffset=top + (int)(y * moduleSize);    for (int x=0; x < matrixWidth; x++) {      if (image.get(left + (int)(x * moduleSize),iOffset)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  private static void extractLineSegments(CurveImpl curveImpl,WKTSegmentList ptList){  for (  LineSegment lineSegment : curveImpl.asLineSegments()) {    WKTPoint startPoint=new WKTPoint(lineSegment.getStartPoint());    WKTPoint endPoint=new WKTPoint(lineSegment.getEndPoint());    ptList.addPoint(startPoint);    ptList.addPoint(endPoint);  }  ptList.removeIfFirstLastSame();}  }
class C{  public boolean isPublic(){  return Modifier.isPublic(this.getModifiers());}  }
class C{  private static boolean isURICharacter(char p_char){  return (p_char <= '~' && (fgLookupTable[p_char] & MASK_URI_CHARACTER) != 0);}  }
class C{  public EqCommandTagException(final String descr,final Throwable e){  super(descr,e);}  }
class C{  public void switchContent(BaseFragment from,BaseFragment to){  if (currentFragment == to) {    return;  } else {    currentFragment=to;    FragmentTransaction ft=fragmentManager.beginTransaction();    ft.setCustomAnimations(R.anim.fragment_fade_in,R.anim.fragment_fade_out);    ft.replace(R.id.fl_content,to).commit();  }  invalidateOptionsMenu();}  }
class C{  private double[] calculateDifferences(final double[] x,final double[] y){  final double[] z=new double[x.length];  for (int i=0; i < x.length; ++i) {    z[i]=y[i] - x[i];  }  return z;}  }
class C{  public void eliminatePhiNodes(){  sbb.preElimOpt();  sbb.eliminatePhiNodes();  sbb.postElimOpt();  setSSA(false);}  }
class C{  public Txn<T> txnRead(){  return txn(null,MDB_RDONLY_TXN);}  }
class C{  public synchronized void deleteAllTables(){  List<String> tableNames=new ArrayList<String>(tableLookup.keySet());  for (  String s : tableNames) {    deleteTable(s);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_FORCE_MATCH_ALREADY_SENT_DECLINE(String value0){  return new SM_SYSTEM_MESSAGE(1400242,value0);}  }
class C{  private static void configureSystemProperties() throws IOException {  File sandbox=new File(getTmpDirFile(),"_intellij_test_sandbox");  setSandboxPath("idea.home.path",new File(sandbox,"home"));  setSandboxPath("idea.config.path",new File(sandbox,"config"));  setSandboxPath("idea.system.path",new File(sandbox,"system"));  setIfEmpty(PlatformUtils.PLATFORM_PREFIX_KEY,"Idea");  setIfEmpty("idea.classpath.index.enabled","false");  PluginManagerCore.BUILD_NUMBER=readApiVersionNumber();  VfsRootAccess.allowRootAccess(RUNFILES_PATH);  String platformApi=getPlatformApiPath();  if (platformApi != null) {    VfsRootAccess.allowRootAccess(platformApi);  }  List<String> pluginJars=Lists.newArrayList();  try {    Enumeration<URL> urls=BlazeTestSystemPropertiesRule.class.getClassLoader().getResources("META-INF/plugin.xml");    while (urls.hasMoreElements()) {      URL url=urls.nextElement();      addArchiveFile(url,pluginJars);    }  } catch (  IOException e) {    System.err.println("Cannot find plugin.xml resources");    e.printStackTrace();  }  setIfEmpty("idea.plugins.path",Joiner.on(File.pathSeparator).join(pluginJars));}  }
class C{  private List<CentroidCluster<T>> chooseInitialCenters(final Collection<T> points){  final List<T> pointList=Collections.unmodifiableList(new ArrayList<T>(points));  final int numPoints=pointList.size();  final boolean[] taken=new boolean[numPoints];  final List<CentroidCluster<T>> resultSet=new ArrayList<CentroidCluster<T>>();  final int firstPointIndex=random.nextInt(numPoints);  final T firstPoint=pointList.get(firstPointIndex);  resultSet.add(new CentroidCluster<T>(firstPoint));  taken[firstPointIndex]=true;  final double[] minDistSquared=new double[numPoints];  for (int i=0; i < numPoints; i++) {    if (i != firstPointIndex) {      double d=distance(firstPoint,pointList.get(i));      minDistSquared[i]=d * d;    }  }  while (resultSet.size() < k) {    double distSqSum=0.0;    for (int i=0; i < numPoints; i++) {      if (!taken[i]) {        distSqSum+=minDistSquared[i];      }    }    final double r=random.nextDouble() * distSqSum;    int nextPointIndex=-1;    double sum=0.0;    for (int i=0; i < numPoints; i++) {      if (!taken[i]) {        sum+=minDistSquared[i];        if (sum >= r) {          nextPointIndex=i;          break;        }      }    }    if (nextPointIndex == -1) {      for (int i=numPoints - 1; i >= 0; i--) {        if (!taken[i]) {          nextPointIndex=i;          break;        }      }    }    if (nextPointIndex >= 0) {      final T p=pointList.get(nextPointIndex);      resultSet.add(new CentroidCluster<T>(p));      taken[nextPointIndex]=true;      if (resultSet.size() < k) {        for (int j=0; j < numPoints; j++) {          if (!taken[j]) {            double d=distance(p,pointList.get(j));            double d2=d * d;            if (d2 < minDistSquared[j]) {              minDistSquared[j]=d2;            }          }        }      }    } else {      break;    }  }  return resultSet;}  }
class C{  public static void main(String[] args){  CorpusPack cp=new CorpusPack(Language.VIETNAMESE);  String modelFileName=cp.taggerModelFileName();  JavaSparkContext jsc=SparkContextFactory.create();  Tagger tagger=new Tagger(jsc).setVerbose(true);  tagger.test(modelFileName,TaggerMode.TRAIN);  tagger.test(modelFileName,TaggerMode.TAG);}  }
class C{  protected AdsGetAdsPostsReachQuery adsIds(String value){  return unsafeParam("ads_ids",value);}  }
class C{  @Override public XSModel loadInputList(LSInputList is){  final int length=is.getLength();  try {    fGrammarPool.clear();    for (int i=0; i < length; ++i) {      fSchemaLoader.loadGrammar(fSchemaLoader.dom2xmlInputSource(is.item(i)));    }    return fGrammarPool.toXSModel();  } catch (  Exception e) {    fSchemaLoader.reportDOMFatalError(e);    return null;  }}  }
class C{  private void sleep(long millis){  try {    Thread.sleep(millis);  } catch (  InterruptedException e) {    e.printStackTrace();  }}  }
class C{  public static MediaLocator createMediaLocator(String url){  MediaLocator ml;  if (url.indexOf(":") > 0 && (ml=new MediaLocator(url)) != null)   return ml;  if (url.startsWith(File.separator)) {    if ((ml=new MediaLocator("file:" + url)) != null)     return ml;  } else {    String file="file:" + System.getProperty("user.dir") + File.separator+ url;    if ((ml=new MediaLocator(file)) != null)     return ml;  }  return null;}  }
class C{  public TextFieldPropertyChange(){  this(0);}  }
class C{  public Set<Speaker> find(final Speaker speaker){  final ArrayList<Speaker> speakers=new ArrayList<>();  speakers.addAll(this.speakers.values());  CollectionUtils.filter(speakers,null);  if (!speakers.isEmpty()) {    return new HashSet<>(speakers);  }  return Collections.emptySet();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_ENEMY_PARRY(String value0){  return new SM_SYSTEM_MESSAGE(1210225,value0);}  }
class C{  public void unregister(String spaceName){  try {    if (m_jmsLookupManager != null)     m_jmsLookupManager.close();  } catch (  Exception e) {    if (_logger.isLoggable(Level.WARNING))     _logger.log(Level.WARNING,"\n\nDirectory Service: Failed to unregister space " + spaceName + " : "+ e.toString(),e);  }  _registeredSpaces.remove(spaceName);}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public static String makeSafe(String s){  return (s == null) ? "" : s;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_ABSTATUS_SKILL_CAN_NOT_BE_TURNED_OFF_BY_TARGET(String value0){  return new SM_SYSTEM_MESSAGE(1300056,value0);}  }
class C{  public static boolean emailIsValid(String email){  return EmailValidator.getInstance().isValid(email);}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer("MethodDesc[");  toString(buf,true);  buf.append(']');  return buf.toString();}  }
class C{  public EmptySearchViewerFilter(){}  }
class C{  private static LinkedList<MaryModule> modulesRequiredForProcessing(MaryDataType sourceType,MaryDataType targetType,Locale locale,Voice voice,LinkedList<MaryDataType> seenTypes){  if (sourceType.equals(targetType)) {    Log.d(Mary.LOG,"found path through modules");    return new LinkedList<MaryModule>();  }  List<MaryModule> candidates=null;  if (voice != null)   candidates=voice.getPreferredModulesAcceptingType(sourceType);  if (candidates == null || candidates.isEmpty()) {    candidates=get(sourceType,locale,voice);  }  if (candidates == null || candidates.isEmpty()) {    return null;  }  for (Iterator<MaryModule> it=candidates.iterator(); it.hasNext(); ) {    MaryModule candidate=it.next();    MaryDataType outputType=candidate.outputType();    if (!seenTypes.contains(outputType)) {      seenTypes.add(outputType);      Log.d(Mary.LOG,"Module " + candidate.name() + " converts "+ sourceType.name()+ " into "+ outputType+ " (locale "+ locale+ ", voice "+ voice+ ")");      LinkedList<MaryModule> path=modulesRequiredForProcessing(outputType,targetType,locale,voice,seenTypes);      if (path != null) {        path.addFirst(candidate);        return path;      }      seenTypes.removeLast();    }  }  return null;}  }
class C{  private static ResultPoint[] expandSquare(ResultPoint[] cornerPoints,float oldSide,float newSide){  float ratio=newSide / (2 * oldSide);  float dx=cornerPoints[0].getX() - cornerPoints[2].getX();  float dy=cornerPoints[0].getY() - cornerPoints[2].getY();  float centerx=(cornerPoints[0].getX() + cornerPoints[2].getX()) / 2.0f;  float centery=(cornerPoints[0].getY() + cornerPoints[2].getY()) / 2.0f;  ResultPoint result0=new ResultPoint(centerx + ratio * dx,centery + ratio * dy);  ResultPoint result2=new ResultPoint(centerx - ratio * dx,centery - ratio * dy);  dx=cornerPoints[1].getX() - cornerPoints[3].getX();  dy=cornerPoints[1].getY() - cornerPoints[3].getY();  centerx=(cornerPoints[1].getX() + cornerPoints[3].getX()) / 2.0f;  centery=(cornerPoints[1].getY() + cornerPoints[3].getY()) / 2.0f;  ResultPoint result1=new ResultPoint(centerx + ratio * dx,centery + ratio * dy);  ResultPoint result3=new ResultPoint(centerx - ratio * dx,centery - ratio * dy);  return new ResultPoint[]{result0,result1,result2,result3};}  }
class C{  public static void json(String json){  printer.json(json);}  }
class C{  @Override protected void onNewIntent(Intent intent){  super.onNewIntent(intent);  if (this.appView != null)   this.appView.onNewIntent(intent);}  }
class C{  public boolean isThisParameter(){  return (o1 instanceof SootMethod && o2.equals(PointsToAnalysis.THIS_NODE)) ? true : false;}  }
class C{  public IterationManager(final int maxIterations,final Incrementor.MaxCountExceededCallback callBack){  this.iterations=new Incrementor(maxIterations,callBack);  this.listeners=new CopyOnWriteArrayList<IterationListener>();}  }
class C{  public CreatePageWindow selectNthTemplate(int i){  templatesList.get(i).click();  return this;}  }
class C{  public AdsGetSuggestionsQueryWithCities ids(String value){  return unsafeParam("ids",value);}  }
class C{  public Builder memoryCacheExtraOptions(int maxImageWidthForMemoryCache,int maxImageHeightForMemoryCache){  this.maxImageWidthForMemoryCache=maxImageWidthForMemoryCache;  this.maxImageHeightForMemoryCache=maxImageHeightForMemoryCache;  return this;}  }
class C{  public FaveGetUsersQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public MarketEditCommentQuery message(String value){  return unsafeParam("message",value);}  }
class C{  private static String lowerCaseFirstCharacter(String str){  if (str.length() == 0) {    return str;  }  return Character.toLowerCase(str.charAt(0)) + str.substring(1);}  }
class C{  private void broadcastNewFile(Uri nativeUri){  Intent intent=new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,nativeUri);  context.sendBroadcast(intent);}  }
class C{  private void createRGBImageSymbol(RasterSymbolizer sym,GridCoverage2D cov,WritableRaster raster){  double dest;  List<Double> valueList=new ArrayList<Double>();  GridEnvelope2D gridRange2D=cov.getGridGeometry().getGridRange2D();  for (int x=0; x < gridRange2D.getWidth(); x++) {    for (int y=0; y < gridRange2D.getHeight(); y++) {      try {        dest=raster.getSampleDouble(x,y,0);        if (!valueList.contains(dest)) {          valueList.add(dest);        }      } catch (      Exception e) {        e.printStackTrace();      }    }  }  ColorMapImpl colourMap=new ColorMapImpl();  Collections.sort(valueList);  for (  Double value : valueList) {    ColorMapEntry entry=new ColorMapEntryImpl();    Literal colourExpression=ff.literal(ColourUtils.fromColour(ColourUtils.createRandomColour()));    entry.setColor(colourExpression);    entry.setQuantity(ff.literal(value.doubleValue()));    colourMap.addColorMapEntry(entry);  }  colourMap.setType(ColorMap.TYPE_VALUES);  sym.setColorMap(colourMap);}  }
class C{  public Megan5ServerConnector(String url,String userName,String password){  String plainCreds=userName + ":" + password;  byte[] plainCredsBytes=plainCreds.getBytes();  byte[] base64CredsBytes=Base64.encodeBase64(plainCredsBytes);  String base64Creds=new String(base64CredsBytes);  HttpHeaders headers=new HttpHeaders();  headers.add("Authorization","Basic " + base64Creds);  request=new HttpEntity<>(headers);  restTemplate=new RestTemplate();  if (url.endsWith("/")) {    this.url=url;  } else {    this.url=url + "/";  }}  }
class C{  public static Bitmap decodeSampledBitmapFromResource(Resources res,int resId,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeResource(res,resId,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  options.inJustDecodeBounds=false;  return BitmapFactory.decodeResource(res,resId,options);}  }
class C{  private void handleRegisterRequest(Intent intent){  if (!isChromeBeingUsed()) {    cancelRepeatingAlarm();    return;  }  long currentTimestamp=getBackoffScheduler().getCurrentTime();  boolean isTooOld=hasRequest() && mCurrentRequest.getAgeInMilliseconds(currentTimestamp) >= MS_BETWEEN_REQUESTS;  boolean isOverdue=!hasRequest() && currentTimestamp >= mTimestampForNewRequest;  if (isTooOld || isOverdue) {    registerNewRequest(currentTimestamp);  }  if (hasRequest()) {    startService(createPostRequestIntent(this));  }}  }
class C{  public static int v(Object tag,String msg){  return isPrint ? android.util.Log.v(tag.getClass().getSimpleName(),msg) : -1;}  }
class C{  public boolean isFullyZoomedOut(){  return mViewPortHandler.isFullyZoomedOut();}  }
class C{  public void cleanPatch(){  if (patchDirectory == null) {    return;  }  if (isTinkerLoaded()) {    TinkerLog.e(TAG,"it is not safety to clean patch when tinker is loaded, you should kill all your process after clean!");  }  SharePatchFileUtil.deleteDir(patchDirectory);}  }
class C{  @Override public void vendorOptionsUpdated(List<VersionData> vendorOptionVersionsList){}  }
class C{  public AppsSendRequestQuery(VkApiClient client,UserActor actor,int userId){  super(client,"apps.sendRequest",Integer.class);  accessToken(actor.getAccessToken());  userId(userId);}  }
class C{  public static Map<String,Object> cancelOrderItem(DispatchContext ctx,Map<String,? extends Object> context){  LocalDispatcher dispatcher=ctx.getDispatcher();  Delegator delegator=ctx.getDelegator();  Locale locale=(Locale)context.get("locale");  GenericValue userLogin=(GenericValue)context.get("userLogin");  BigDecimal cancelQuantity=(BigDecimal)context.get("cancelQuantity");  String orderId=(String)context.get("orderId");  String orderItemSeqId=(String)context.get("orderItemSeqId");  String shipGroupSeqId=(String)context.get("shipGroupSeqId");  Map<String,String> itemReasonMap=UtilGenerics.checkMap(context.get("itemReasonMap"));  Map<String,String> itemCommentMap=UtilGenerics.checkMap(context.get("itemCommentMap"));  Map<String,String> itemQuantityMap=UtilGenerics.checkMap(context.get("itemQtyMap"));  if ((cancelQuantity == null) && UtilValidate.isNotEmpty(itemQuantityMap)) {    String key=orderItemSeqId + ":" + shipGroupSeqId;    if (UtilValidate.isNotEmpty(itemQuantityMap.get(key))) {      cancelQuantity=new BigDecimal(itemQuantityMap.get(key));    }  }  String itemMsgInfo=orderId + " / " + orderItemSeqId+ " / "+ shipGroupSeqId;  Security security=ctx.getSecurity();  boolean hasPermission=OrderServices.hasPermission(orderId,userLogin,"UPDATE",security,delegator);  if (!hasPermission) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderYouDoNotHavePermissionToChangeThisOrdersStatus",locale));  }  Map<String,String> fields=UtilMisc.<String,String>toMap("orderId",orderId);  if (orderItemSeqId != null) {    fields.put("orderItemSeqId",orderItemSeqId);  }  if (shipGroupSeqId != null) {    fields.put("shipGroupSeqId",shipGroupSeqId);  }  OrderReadHelper orh=new OrderReadHelper(delegator,orderId);  List<GenericValue> orderItemShipGroupAssocs=null;  try {    orderItemShipGroupAssocs=EntityQuery.use(delegator).from("OrderItemShipGroupAssoc").where(fields).queryList();  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCannotGetOrderItemAssocEntity",UtilMisc.toMap("itemMsgInfo",itemMsgInfo),locale));  }  if (orderItemShipGroupAssocs != null) {    for (    GenericValue orderItemShipGroupAssoc : orderItemShipGroupAssocs) {      GenericValue orderItem=null;      String itemStatus="ITEM_CANCELLED";      try {        orderItem=orderItemShipGroupAssoc.getRelatedOne("OrderItem",false);      } catch (      GenericEntityException e) {        Debug.logError(e,module);      }      if (orderItem == null) {        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCannotCancelItemItemNotFound",UtilMisc.toMap("itemMsgInfo",itemMsgInfo),locale));      }      BigDecimal aisgaCancelQuantity=orderItemShipGroupAssoc.getBigDecimal("cancelQuantity");      if (aisgaCancelQuantity == null) {        aisgaCancelQuantity=BigDecimal.ZERO;      }      BigDecimal availableQuantity=orderItemShipGroupAssoc.getBigDecimal("quantity").subtract(aisgaCancelQuantity);      BigDecimal itemCancelQuantity=orderItem.getBigDecimal("cancelQuantity");      if (itemCancelQuantity == null) {        itemCancelQuantity=BigDecimal.ZERO;      }      BigDecimal itemQuantity=orderItem.getBigDecimal("quantity").subtract(itemCancelQuantity);      if (availableQuantity == null)       availableQuantity=BigDecimal.ZERO;      if (itemQuantity == null)       itemQuantity=BigDecimal.ZERO;      if ("PURCHASE_ORDER".equals(orh.getOrderTypeId())) {        BigDecimal receivedQty=orh.getItemReceivedQuantity(orderItem);        if (receivedQty.compareTo(BigDecimal.ZERO) > 0)         itemStatus="ITEM_COMPLETED";        itemQuantity=itemQuantity.subtract(receivedQty);      } else {        BigDecimal shippedQty=orh.getItemShippedQuantity(orderItem);        if (shippedQty.compareTo(BigDecimal.ZERO) > 0)         itemStatus="ITEM_COMPLETED";        itemQuantity=itemQuantity.subtract(shippedQty);      }      BigDecimal thisCancelQty=null;      if (cancelQuantity != null) {        thisCancelQty=cancelQuantity;      } else {        thisCancelQty=itemQuantity;      }      if (availableQuantity.compareTo(thisCancelQty) >= 0) {        if (availableQuantity.compareTo(BigDecimal.ZERO) == 0) {          continue;        }        orderItem.set("cancelQuantity",itemCancelQuantity.add(thisCancelQty));        orderItemShipGroupAssoc.set("cancelQuantity",aisgaCancelQuantity.add(thisCancelQty));        try {          List<GenericValue> toStore=UtilMisc.toList(orderItem,orderItemShipGroupAssoc);          delegator.storeAll(toStore);        } catch (        GenericEntityException e) {          Debug.logError(e,module);          return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderUnableToSetCancelQuantity",UtilMisc.toMap("itemMsgInfo",itemMsgInfo),locale));        }        Map<String,Object> localCtx=UtilMisc.toMap("userLogin",userLogin,"orderId",orderItem.getString("orderId"),"orderItemSeqId",orderItem.getString("orderItemSeqId"),"shipGroupSeqId",orderItemShipGroupAssoc.getString("shipGroupSeqId"));        if (availableQuantity.compareTo(thisCancelQty) == 0) {          try {            dispatcher.runSync("deleteOrderItemShipGroupAssoc",localCtx);          } catch (          GenericServiceException e) {            Debug.logError(e,module);            return ServiceUtil.returnError(e.getMessage());          }        }        if (!"Y".equals(orderItem.getString("isPromo"))) {          String reasonEnumId=null;          String changeComments=null;          if (UtilValidate.isNotEmpty(itemReasonMap)) {            reasonEnumId=itemReasonMap.get(orderItem.getString("orderItemSeqId"));          }          if (UtilValidate.isNotEmpty(itemCommentMap)) {            changeComments=itemCommentMap.get(orderItem.getString("orderItemSeqId"));          }          Map<String,Object> serviceCtx=FastMap.newInstance();          serviceCtx.put("orderId",orderItem.getString("orderId"));          serviceCtx.put("orderItemSeqId",orderItem.getString("orderItemSeqId"));          serviceCtx.put("cancelQuantity",thisCancelQty);          serviceCtx.put("changeTypeEnumId","ODR_ITM_CANCEL");          serviceCtx.put("reasonEnumId",reasonEnumId);          serviceCtx.put("changeComments",changeComments);          serviceCtx.put("userLogin",userLogin);          Map<String,Object> resp=null;          try {            resp=dispatcher.runSync("createOrderItemChange",serviceCtx);          } catch (          GenericServiceException e) {            Debug.logError(e,module);            return ServiceUtil.returnError(e.getMessage());          }          if (ServiceUtil.isError(resp)) {            return ServiceUtil.returnError((String)resp.get(ModelService.ERROR_MESSAGE));          }        }        try {          BigDecimal quantity=thisCancelQty.setScale(1,orderRounding);          String cancelledItemToOrder=UtilProperties.getMessage(resource,"OrderCancelledItemToOrder",locale);          dispatcher.runSync("createOrderNote",UtilMisc.<String,Object>toMap("orderId",orderId,"note",cancelledItemToOrder + orderItem.getString("productId") + " ("+ quantity+ ")","internalNote","Y","userLogin",userLogin));        } catch (        GenericServiceException e) {          Debug.logError(e,module);        }        if (thisCancelQty.compareTo(itemQuantity) >= 0) {          if ("ITEM_COMPLETED".equals(itemStatus) && "SALES_ORDER".equals(orh.getOrderTypeId())) {            Map<String,Object> cancelOrderItemInvResCtx=UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItem.getString("orderItemSeqId"),"shipGroupSeqId",shipGroupSeqId,"cancelQuantity",thisCancelQty,"userLogin",userLogin);            try {              dispatcher.runSyncIgnore("cancelOrderItemInvResQty",cancelOrderItemInvResCtx);            } catch (            GenericServiceException e) {              Debug.logError(e,module);              return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderUnableToUpdateInventoryReservations",UtilMisc.toMap("itemMsgInfo",itemMsgInfo),locale));            }          }          Map<String,Object> statusCtx=UtilMisc.<String,Object>toMap("orderId",orderId,"orderItemSeqId",orderItem.getString("orderItemSeqId"),"statusId",itemStatus,"userLogin",userLogin);          try {            dispatcher.runSyncIgnore("changeOrderItemStatus",statusCtx);          } catch (          GenericServiceException e) {            Debug.logError(e,module);            return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderUnableToCancelOrderLine",UtilMisc.toMap("itemMsgInfo",itemMsgInfo),locale));          }        } else {          Map<String,Object> invCtx=UtilMisc.<String,Object>toMap("orderId",orderId,"orderItemSeqId",orderItem.getString("orderItemSeqId"),"shipGroupSeqId",shipGroupSeqId,"cancelQuantity",thisCancelQty,"userLogin",userLogin);          try {            dispatcher.runSyncIgnore("cancelOrderItemInvResQty",invCtx);          } catch (          GenericServiceException e) {            Debug.logError(e,module);            return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderUnableToUpdateInventoryReservations",UtilMisc.toMap("itemMsgInfo",itemMsgInfo),locale));          }        }      } else {        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderInvalidCancelQuantityCannotCancel",UtilMisc.toMap("thisCancelQty",thisCancelQty),locale));      }    }  } else {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCannotCancelItemItemNotFound",UtilMisc.toMap("itemMsgInfo",itemMsgInfo),locale));  }  return ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"OrderOrderItemCancelled",locale));}  }
class C{  public void destroyApplet(){  checkApplet();  logInfo(LogArea.CONFIG,"destroyApplet() --> %s.destroy()",applet.getClass().getName());  applet.destroy();}  }
class C{  public static double[] scaleArray(double[] f,double d){  for (int i=0; i < f.length; i++) {    f[i]*=d;  }  return f;}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  try {    initFromName(getName());  } catch (  RuntimeException e) {    if (e instanceof NullPointerException || e instanceof IllegalArgumentException) {      InvalidObjectException ee=new InvalidObjectException(e.getMessage());      ee.initCause(e);      throw ee;    }    throw e;  }}  }
class C{  public static LinearRing createLinearRingFromJson(JsonNode json){  Coordinate[] coords=new Coordinate[MapUtils.getNonEmptyNodes(json)];  for (int i=0; i < json.size(); i++) {    JsonNode node=json.get(i);    if (MapUtils.nodeIsNonEmpty(node)) {      coords[i]=createCoordinateFromJson(node);    }  }  return FACTORY.createLinearRing(coords);}  }
class C{  public List<Element> initSimpleFields(final Object pojo,final Element element) throws NoSuchFieldException, IllegalAccessException, NoSimpleValueParseException {  List<Element> complexElements=new ArrayList<Element>();  NamedNodeMap attributes=element.getAttributes();  for (int i=0; i < attributes.getLength(); i++) {    Attr attribute=(Attr)attributes.item(i);    String attributeName=attribute.getNodeName();    if (!attributeName.startsWith(XMLConstants.XMLNS_ATTRIBUTE) && !attributeName.startsWith("xsi")) {      setSimpleFieldForTag(pojo,attributeName,attribute.getNodeValue());    }  }  NodeList children=element.getChildNodes();  for (int i=0; i < children.getLength(); i++) {    Node node=children.item(i);    if (node.getNodeType() == Node.ELEMENT_NODE) {      Element child=(Element)node;      if (child.hasAttributes() || (child.hasChildNodes() && child.getChildNodes().getLength() > 1 || child.getChildNodes().item(0).getNodeType() != Node.TEXT_NODE)) {        complexElements.add(child);      } else {        setSimpleFieldForTag(pojo,child.getTagName(),child.getTextContent());      }    }  }  return complexElements;}  }
class C{  public double put(final int key,final double value){  int index=findInsertionIndex(key);  double previous=missingEntries;  boolean newMapping=true;  if (index < 0) {    index=changeIndexSign(index);    previous=values[index];    newMapping=false;  }  keys[index]=key;  states[index]=FULL;  values[index]=value;  if (newMapping) {    ++size;    if (shouldGrowTable()) {      growTable();    }    ++count;  }  return previous;}  }
class C{  @Override protected void readImpl(){  int et;  et=readC();  emotionType=EmotionType.getEmotionTypeById(et);switch (emotionType) {case SELECT_TARGET:case JUMP:case SIT:case STAND:case LAND_FLYTELEPORT:case FLY:case LAND:case DIE:case END_DUEL:case WALK:case RUN:case OPEN_DOOR:case CLOSE_DOOR:case POWERSHARD_ON:case POWERSHARD_OFF:case ATTACKMODE:case ATTACKMODE2:case NEUTRALMODE:case NEUTRALMODE2:case START_SPRINT:case END_SPRINT:case WINDSTREAM_STRAFE:    break;case EMOTE:  emotion=readH();targetObjectId=readD();break;case CHAIR_SIT:case CHAIR_UP:x=readF();y=readF();z=readF();heading=(byte)readC();break;default :log.error("Unknown emotion type? 0x" + Integer.toHexString(et).toUpperCase());break;}}  }
class C{  @Subscribe(threadMode=ThreadMode.MAIN) public void onEvent(ClearMapEvent event){  nianticManager.cancelPendingSearches();  clearMarkers();  MarkerRefreshController.getInstance().clear();}  }
class C{  static void schedule(Activity a){  getInstance()._schedule(a,a.getStartTime());}  }
class C{  public static ToolbarTapTarget forToolbarMenuItem(Toolbar toolbar,@IdRes int menuItemId,CharSequence title){  return forToolbarMenuItem(toolbar,menuItemId,title,null);}  }
class C{  public boolean isEvictionPermissionIndicator(){  return _evictionIndicator;}  }
class C{  public static DateTimeUnit fromJodaDateTime(DateTime dateTime,boolean iso8601){  DateTimeUnit dateTimeUnit=new DateTimeUnit(iso8601);  dateTimeUnit.setDate(dateTime.getYear(),dateTime.getMonthOfYear(),dateTime.getDayOfMonth());  dateTimeUnit.setDayOfWeek(dateTime.getDayOfWeek());  dateTimeUnit.setTime(dateTime.getHourOfDay(),dateTime.getMinuteOfHour(),dateTime.getSecondOfMinute(),dateTime.getMillisOfSecond());  dateTimeUnit.setTimeZone(dateTime.getZone().toTimeZone());  return dateTimeUnit;}  }
class C{  private AnimationUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  private boolean isVisible(SootClass from,SootMethod m){  from.checkLevel(SootClass.HIERARCHY);  if (m.isPublic())   return true;  if (m.isPrivate()) {    return from.equals(m.getDeclaringClass());  }  if (m.isProtected()) {    return canStoreClass(from,m.getDeclaringClass());  }  return from.getJavaPackageName().equals(m.getDeclaringClass().getJavaPackageName());}  }
class C{  public void drawChart(Graphics2D gc){  final SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  gc.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));  int y0=getHeight() - bottomMargin;  int y1=topMargin;  int x0=leftMargin;  int scaleWidth=30;  int x1=getWidth() - rightMargin - scaleWidth;  if (x0 >= x1)   return;  if (inUpdateCoordinates) {    gc.setFont(getFont("Default"));    gc.setColor(Color.LIGHT_GRAY);    gc.drawString("Computing correlation plot...",x0,y1 + 20);    viewer.getScrollPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));    return;  } else   viewer.getScrollPane().setCursor(Cursor.getDefaultCursor());  if (sgc != null) {    drawYAxis(gc,null);  }  if (!getChartTitle().startsWith("Correlation plot: "))   setChartTitle("Correlation plot: " + getChartTitle());  final int numberOfClasses=(classNames != null ? classNames.length : 0);  final int numberOfAttributes=(attributeNames != null ? attributeNames.length : 0);  if (viewer.getClassesList().isDoClustering())   y1+=topTreeSpace;  if (sgc == null) {    drawScaleBar(gc,x1,scaleWidth,y1,y0 - y1);  }  if (viewer.getAttributesList().isDoClustering()) {    x1-=rightTreeSpace;    int height=(int)Math.round((y0 - y1) / (numberOfAttributes + 1.0) * numberOfAttributes);    int yStart=y0 + ((y1 - y0) - height) / 2;    final Rectangle rect=new Rectangle(x1,yStart,rightTreeSpace,height);    attributesClusteringTree.paint(gc,rect);  }  if (viewer.getClassesList().isDoClustering()) {    int width=(int)((x1 - x0) / (numberOfClasses + 1.0) * numberOfClasses);    int xStart=x0 + ((x1 - x0) - width) / 2;    final Rectangle rect=new Rectangle(xStart,y1 - topTreeSpace,width,topTreeSpace);    classesClusteringTree.paint(gc,rect);  }  if (numberOfClasses > 0 && numberOfAttributes > 0) {    double xStep=(x1 - x0) / (double)numberOfClasses;    double yStep=(y0 - y1) / (double)numberOfAttributes;    int d=0;    for (    String classNameX : classNames) {      final double xLabel=x0 + (d + 0.5) * xStep;      Point2D apt=new Point2D.Double(xLabel,getHeight() - bottomMargin + 10);      final Dimension labelSize=Basic.getStringSize(gc,classNameX,gc.getFont()).getSize();      if (classLabelAngle == 0) {        apt.setLocation(apt.getX() - labelSize.getWidth() / 2,apt.getY());      } else       if (classLabelAngle > Math.PI / 2) {        apt=Geometry.translateByAngle(apt,classLabelAngle,-labelSize.width);      }      if (getChartData().getChartSelection().isSelected(null,classNameX)) {        fillAndDrawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);      }      gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.DARK_GRAY));      drawString(gc,classNameX,apt.getX(),apt.getY(),classLabelAngle);      if (sgc != null) {        sgc.setCurrentItem(new String[]{null,classNameX});        drawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle);        sgc.clearCurrentItem();      }      int c=numberOfAttributes - 1;      for (      String attributeNameY : attributeNames) {        final Float correlationCoefficient=dataMatrix.get(classNameX,attributeNameY);        if (correlationCoefficient != null) {          final double[] boundingBox=new double[]{x0 + d * xStep,y0 - (c + 1) * yStep,xStep,yStep};          drawCell(gc,boundingBox,correlationCoefficient);          if (sgc != null && !sgc.isShiftDown()) {            sgc.setCurrentItem(new String[]{null,classNameX,attributeNameY});            gc.fillRect((int)Math.round(boundingBox[0]),(int)Math.round(boundingBox[1]),(int)Math.round(boundingBox[2]),(int)Math.round(boundingBox[3]));            sgc.clearCurrentItem();            sgc.setCurrentItem(new String[]{null,null,attributeNameY});            gc.fillRect((int)Math.round(boundingBox[0]),(int)Math.round(boundingBox[1]),(int)Math.round(boundingBox[2]),(int)Math.round(boundingBox[3]));            sgc.clearCurrentItem();          }          boolean isSelected=false;          if (getChartData().getChartSelection().isSelectedClass(classNameX)) {            if (getChartData().getChartSelection().isSelectedAttribute(attributeNameY) || getChartData().getChartSelection().getSelectedAttributes().size() == 0)             isSelected=true;          } else           if (getChartData().getChartSelection().getSelectedClasses().size() == 0 && getChartData().getChartSelection().isSelectedAttribute(attributeNameY))           isSelected=true;          if (isSelected) {            gc.setStroke(HEAVY_STROKE);            gc.setColor(ProgramProperties.SELECTION_COLOR);            gc.drawRect((int)Math.round(boundingBox[0]),(int)Math.round(boundingBox[1]),(int)Math.round(boundingBox[2]),(int)Math.round(boundingBox[3]));            gc.setStroke(NORMAL_STROKE);          }          if (showValues || isSelected) {            String aLabel=String.format("%.3f",correlationCoefficient);            valuesList.add(new DrawableValue(aLabel,(int)Math.round(boundingBox[0] + boundingBox[2] / 2),(int)Math.round(boundingBox[1] + boundingBox[3] / 2) - gc.getFont().getSize() / 2,isSelected));          }        }        c--;      }      d++;    }  }  if (valuesList.size() > 0) {    gc.setFont(getFont(ChartViewer.FontKeys.ValuesFont.toString()));    DrawableValue.drawValues(gc,valuesList,true,true);    valuesList.clear();  }}  }
class C{  public void destroy(){  if (mSelectorObserver != null) {    mTabModelSelector.removeObserver(mSelectorObserver);    mSelectorObserver=null;  }  List<TabModel> tabModels=mTabModelSelector.getModels();  for (int i=0; i < tabModels.size(); i++) {    TabModel tabModel=tabModels.get(i);    tabModel.removeObserver(mTabModelObserver);    TabList comprehensiveTabList=tabModel.getComprehensiveModel();    for (int j=0; j < comprehensiveTabList.getCount(); j++) {      comprehensiveTabList.getTabAt(j).removeObserver(this);    }  }}  }
class C{  public void java_util_jar_JarFile_getMetaInfoEntryNames(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getStringObject());}  }
class C{  public XorPredicate(Predicate p1){  add(p1);}  }
class C{  public CancelException(File file,int depth){  this("Operation Cancelled",file,depth);}  }
class C{  public ArraySet(){  mHashes=ContainerHelpers.EMPTY_INTS;  mArray=ContainerHelpers.EMPTY_OBJECTS;  mSize=0;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public static byte[] generateSalt() throws GeneralSecurityException {  return randomBytes(PBE_SALT_LENGTH_BITS);}  }
class C{  protected void pushLeft(BinarySearchTreeNode<E> node){  while (node != null) {    this.stack.push(node);    node=node.left;  }}  }
class C{  public T distance(final Vector3D v){  final T dx=x.subtract(v.getX());  final T dy=y.subtract(v.getY());  final T dz=z.subtract(v.getZ());  return dx.multiply(dx).add(dy.multiply(dy)).add(dz.multiply(dz)).sqrt();}  }
class C{  public FriendsGetQueryWithFields count(Integer value){  return unsafeParam("count",value);}  }
class C{  public boolean isWarehouseManaged(String facilityId){  boolean isWarehouseManaged=false;  try {    if ("WIP".equals(getProduct().getString("productTypeId"))) {      return false;    }    List<GenericValue> pfs=null;    if (UtilValidate.isEmpty(facilityId)) {      pfs=getProduct().getRelated("ProductFacility",null,null,true);    } else {      pfs=getProduct().getRelated("ProductFacility",UtilMisc.toMap("facilityId",facilityId),null,true);    }    if (UtilValidate.isEmpty(pfs)) {      if (getSubstitutedNode() != null && getSubstitutedNode().getProduct() != null) {        if (UtilValidate.isEmpty(facilityId)) {          pfs=getSubstitutedNode().getProduct().getRelated("ProductFacility",null,null,true);        } else {          pfs=getSubstitutedNode().getProduct().getRelated("ProductFacility",UtilMisc.toMap("facilityId",facilityId),null,true);        }      }    }    if (UtilValidate.isNotEmpty(pfs)) {      for (int i=0; i < pfs.size(); i++) {        GenericValue pf=pfs.get(i);        if (UtilValidate.isNotEmpty(pf.get("minimumStock")) && UtilValidate.isNotEmpty(pf.get("reorderQuantity"))) {          isWarehouseManaged=true;          break;        }      }    }  } catch (  GenericEntityException gee) {    Debug.logError("Problem in BOMNode.isWarehouseManaged()",module);  }  return isWarehouseManaged;}  }
class C{  private JsonElement createColourRamp(IColorRamp colourRamp){  JsonArray colourArray=null;  if (colourRamp != null) {    colourArray=new JsonArray();    try {      for (int index=0; index < colourRamp.getSize(); index++) {        JsonObject colour=CommonObjects.createColour(colourRamp.getColor(index));        if (colour != null) {          colourArray.add(colour);        }      }    } catch (    AutomationException e) {      e.printStackTrace();    }catch (    IOException e) {      e.printStackTrace();    }  }  return colourArray;}  }
class C{  static private void circularConjugateGrads(int ntax,int npairs,double[] r,double[] w,double[] p,double[] y,double[] W,double[] b,boolean[] active,double[] x){  int kmax=ntax * (ntax - 1) / 2;  calculateAb(ntax,x,y);  for (int k=0; k < npairs; k++)   y[k]=W[k] * y[k];  calculateAtx(ntax,y,r);  for (int k=0; k < npairs; k++)   if (!active[k])   r[k]=b[k] - r[k]; else   r[k]=0.0;  double rho=norm(r);  double rho_old=0;  double e_0=CG_EPSILON * Math.sqrt(norm(b));  int k=0;  while ((rho > e_0 * e_0) && (k < kmax)) {    k=k + 1;    if (k == 1) {      System.arraycopy(r,0,p,0,npairs);    } else {      double beta=rho / rho_old;      for (int i=0; i < npairs; i++)       p[i]=r[i] + beta * p[i];    }    calculateAb(ntax,p,y);    for (int i=0; i < npairs; i++)     y[i]*=W[i];    calculateAtx(ntax,y,w);    for (int i=0; i < npairs; i++)     if (active[i])     w[i]=0.0;    double alpha=0.0;    for (int i=0; i < npairs; i++)     alpha+=p[i] * w[i];    alpha=rho / alpha;    for (int i=0; i < npairs; i++) {      x[i]+=alpha * p[i];      r[i]-=alpha * w[i];    }    rho_old=rho;    rho=norm(r);  }}  }
class C{  public AuthCheckPhoneQuery clientId(Integer value){  return unsafeParam("client_id",value);}  }
class C{  public boolean matchesDirectly(String packageRelativePath,boolean isDirectory){  if (isDirectory && element.areDirectoriesExcluded()) {    return false;  }  for (  String exclude : resolveListContents(element.getExcludes())) {    if (UnixGlob.matches(exclude,packageRelativePath)) {      return false;    }  }  for (  String include : resolveListContents(element.getIncludes())) {    if (!hasWildcard(include) && UnixGlob.matches(include,packageRelativePath)) {      return true;    }  }  return false;}  }
class C{  static boolean isTextXml(String mime){  return mime != null && (mime.equals("text/xml") || mime.equals("text/xml-external-parsed-entity") || mime.startsWith("text/") && mime.endsWith("+xml"));}  }
class C{  public void readerWait(Object notifier,long time){  try {synchronized (notifier) {      readUnlock();      notifier.wait(time);    }  } catch (  InterruptedException e) {    throw new ConcurrentLockException("read wait interrupted in thread");  } finally {    readLock();  }}  }
class C{  public ArrayFieldVector(Field<T> field,T[] d,int pos,int size) throws MathIllegalArgumentException, NullArgumentException {  MathUtils.checkNotNull(d);  if (d.length < pos + size) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_LARGE,pos + size,d.length);  }  this.field=field;  data=MathArrays.buildArray(field,size);  System.arraycopy(d,pos,data,0,size);}  }
class C{  private int measureWidthSize(int measureSpec){  int defSize=dp2px(DEFAULT_WIDTH);  int specSize=MeasureSpec.getSize(measureSpec);  int specMode=MeasureSpec.getMode(measureSpec);  int result=0;switch (specMode) {case MeasureSpec.UNSPECIFIED:case MeasureSpec.AT_MOST:    result=Math.min(defSize,specSize);  break;case MeasureSpec.EXACTLY:result=specSize;break;}return result;}  }
class C{  public void reset(){  this.fBuffer.setLength(0);}  }
class C{  private void scroll(float x,float y,float amountX,float amountY,boolean isTilt){  if ((!mScroller.isFinished() && isTilt) || mStackTabs == null || (mOverviewAnimationType != OverviewAnimationType.NONE && mOverviewAnimationType != OverviewAnimationType.DISCARD && mOverviewAnimationType != OverviewAnimationType.UNDISCARD && mOverviewAnimationType != OverviewAnimationType.DISCARD_ALL && mOverviewAnimationType != OverviewAnimationType.ENTER_STACK)) {    return;  }  float amountScreen=mCurrentMode == Orientation.PORTRAIT ? amountY : amountX;  float amountScroll=amountScreen;  float amountEvenOut=amountScreen;  float tabScrollSpaceFinal=0;  if (mScrollingTab == null || isTilt) {    mScrollingTab=getTabAtPositon(x,y);  }  if (mScrollingTab == null && mInSwipe && mStackTabs != null) {    int index=mTabModel.index();    if (index >= 0 && index <= mStackTabs.length)     mScrollingTab=mStackTabs[index];  }  if (mScrollingTab == null) {    if (!isTilt) {      amountScroll=0;      amountEvenOut=0;    }  } else   if (mScrollingTab.getIndex() == 0) {    amountEvenOut=0;  } else {    float tabScrollSpace=mScrollingTab.getScrollOffset() + mScrollOffset;    float tabScreen=scrollToScreen(tabScrollSpace);    tabScrollSpaceFinal=screenToScroll(tabScreen + amountScreen);    amountScroll=tabScrollSpaceFinal - tabScrollSpace;    amountScroll=Math.signum(amountScreen) * MathUtils.clamp(Math.abs(amountScroll),Math.abs(amountScreen) * 0.5f,Math.abs(amountScreen) * 2.0f);  }  if (evenOutTabs(amountEvenOut,false) && mScrollingTab.getIndex() > 0) {    float tabScrollSpace=mScrollingTab.getScrollOffset() + mScrollOffset;    amountScroll=tabScrollSpaceFinal - tabScrollSpace;  }  setScrollTarget(mScrollTarget + amountScroll,false);}  }
class C{  public void disableDashedLine(){  mDashPathEffect=null;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  private void createInitializer(polyglot.ast.Initializer initializer){  if (initializer.flags().isStatic()) {    if (staticInitializerBlocks == null) {      staticInitializerBlocks=new ArrayList<Block>();    }    staticInitializerBlocks.add(initializer.body());  } else {    if (initializerBlocks == null) {      initializerBlocks=new ArrayList<Block>();    }    initializerBlocks.add(initializer.body());  }}  }
class C{  public void actionPerformed(ActionEvent ev){  String fontName=ProgramProperties.get("Font","Arial-PLAIN-12");  fontName=JOptionPane.showInputDialog("Enter font",fontName);  if (fontName != null) {    execute("set font='" + fontName + "';");    ProgramProperties.put("Font",fontName);  }}  }
class C{  protected PhotosRemoveTagQuery tagId(int value){  return unsafeParam("tag_id",value);}  }
class C{  private static String unescapeForEncodeUriCompatability(String str){  return str.replace("%21","!").replace("%7E","~").replace("%27","'").replace("%28","(").replace("%29",")").replace("%3B",";").replace("%2F","/").replace("%3F","?").replace("%3A",":").replace("%40","@").replace("%26","&").replace("%3D","=").replace("%2B","+").replace("%24","$").replace("%2C",",").replace("%23","#");}  }
class C{  public void treeWillCollapse(TreeExpansionEvent event) throws ExpandVetoException {  if (inspectorWindow.isLocked()) {    if (dir.getDocument().getProgressListener() != null)     dir.getDocument().getProgressListener().setUserCancelled(true);    throw new ExpandVetoException(event);  }}  }
class C{  public static int modulateAlpha(int colorAlpha,int alpha){  int scale=alpha + (alpha >> 7);  return colorAlpha * scale >> 8;}  }
class C{  protected WallGetByIdQueryWithExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  public AsyncCatchOptions useRazzberries(boolean useRazzBerries){  this.useRazzBerry=useRazzBerries ? 1 : 0;  return this;}  }
class C{  public static Method findMethod(Object instance,String name,Class<?>... parameterTypes) throws NoSuchMethodException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Method method=clazz.getDeclaredMethod(name,parameterTypes);      if (!method.isAccessible()) {        method.setAccessible(true);      }      return method;    } catch (    NoSuchMethodException e) {    }  }  throw new NoSuchMethodException("Method " + name + " with parameters "+ Arrays.asList(parameterTypes)+ " not found in "+ instance.getClass());}  }
class C{  public static void update(VisualItem item,String field,Object val){  item.set(getStartField(field),item.get(field));  item.set(field,val);  item.set(getEndField(field),val);}  }
class C{  protected void onHideAnimationStart(){  setResultsBarVisibility(false);}  }
class C{  public boolean addEdge(Edge e){  if (!edges.add(e))   return false;  stream.add(e);  srcMap.put(e.getSrc(),e);  tgtMap.put(e.getTgt(),e);  unitMap.put(e.srcUnit(),e);  return true;}  }
class C{  private String populateI18nStrings(String dataEntryFormCode,I18n i18n){  StringBuffer sb=new StringBuffer();  Pattern i18nPattern=Pattern.compile("(<i18n.*?)[/]?</i18n>",Pattern.DOTALL);  Matcher i18nMatcher=i18nPattern.matcher(dataEntryFormCode);  while (i18nMatcher.find()) {    String i18nCode=i18nMatcher.group(1);    i18nCode=i18nCode.replaceAll("<i18n>","");    i18nCode=i18n.getString(i18nCode);    i18nMatcher.appendReplacement(sb,i18nCode);  }  i18nMatcher.appendTail(sb);  String result=sb.toString().replaceAll("</i18n>","");  return result;}  }
class C{  @Override public void mark(int readAheadLimit){  mark=idx;}  }
class C{  public void smoothOpenLeftMenu(int position){  smoothOpenMenu(position,LEFT_DIRECTION,SwipeMenuLayout.DEFAULT_SCROLLER_DURATION);}  }
class C{  public GroupsAddLinkQuery(VkApiClient client,UserActor actor,int groupId,String link){  super(client,"groups.addLink",GroupLink.class);  accessToken(actor.getAccessToken());  groupId(groupId);  link(link);}  }
class C{  public void closeDriver(){  if (camera != null) {    FlashlightManager.disableFlashlight();    camera.release();    camera=null;  }}  }
class C{  public void whitelistRequests(String[] patterns,int responseCode){  if (patterns == null || patterns.length == 0) {    this.enableEmptyWhitelist(responseCode);  } else {    this.whitelistRequests(Arrays.asList(patterns),responseCode);  }}  }
class C{  public CronTimer(String expression){  this.cronExpression=expression;}  }
class C{  public Decision suggestCategory(String sFilename){  DocumentNGramGraph dDoc=new DocumentNGramSymWinGraph();  try {    dDoc.loadDataStringFromFile(sFilename);  } catch (  IOException ex) {    Logger.getLogger(Decider.class.getName()).log(Level.SEVERE,null,ex);    return null;  }  return suggestCategory(dDoc);}  }
class C{  private void closeMenuDrawer(){  if (mDrawerLayout != null) {    mDrawerLayout.closeDrawer(MENU_DRAWER_GRAVITY);  }}  }
class C{  public static IProgressMonitor subMonitorFor(IProgressMonitor monitor,int ticks,int style){  if (monitor == null)   return new NullProgressMonitor();  if (monitor instanceof NullProgressMonitor)   return monitor;  return new SubProgressMonitor(monitor,ticks,style);}  }
class C{  public static void ensureTreeIsLoaded(String name){  get(name,true);}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  @NotNull public AddFaceToPersonAction addFaceToPerson(@NotNull String personGroupId,@NotNull String personId,String userData,File image){  return addFaceToPerson(personGroupId,personId,userData,Utils.fileToFileInputStream(image));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_SEAL_STATUS_UNSEALPROGRESS(String value0,String durationday1){  return new SM_SYSTEM_MESSAGE(1400807,value0,durationday1);}  }
class C{  private SubHyperplane<Euclidean3D> recurseFirstIntersection(final BSPTree<Euclidean3D> node,final Vector3D point,final Line line){  final SubHyperplane<Euclidean3D> cut=node.getCut();  if (cut == null) {    return null;  }  final BSPTree<Euclidean3D> minus=node.getMinus();  final BSPTree<Euclidean3D> plus=node.getPlus();  final Plane plane=(Plane)cut.getHyperplane();  final double offset=plane.getOffset((Point<Euclidean3D>)point);  final boolean in=FastMath.abs(offset) < getTolerance();  final BSPTree<Euclidean3D> near;  final BSPTree<Euclidean3D> far;  if (offset < 0) {    near=minus;    far=plus;  } else {    near=plus;    far=minus;  }  if (in) {    final SubHyperplane<Euclidean3D> facet=boundaryFacet(point,node);    if (facet != null) {      return facet;    }  }  final SubHyperplane<Euclidean3D> crossed=recurseFirstIntersection(near,point,line);  if (crossed != null) {    return crossed;  }  if (!in) {    final Vector3D hit3D=plane.intersection(line);    if (hit3D != null && line.getAbscissa(hit3D) > line.getAbscissa(point)) {      final SubHyperplane<Euclidean3D> facet=boundaryFacet(hit3D,node);      if (facet != null) {        return facet;      }    }  }  return recurseFirstIntersection(far,point,line);}  }
class C{  public AdsImportTargetContactsQuery clientId(Integer value){  return unsafeParam("client_id",value);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(getClass().getSimpleName());  sb.append(" [");  sb.append("Hash = ").append(hashCode());  sb.append(", menuName=").append(menuName);  sb.append(", menuType=").append(menuType);  sb.append(", parentId=").append(parentId);  sb.append(", iconcls=").append(iconcls);  sb.append(", request=").append(request);  sb.append(", expand=").append(expand);  sb.append(", sortNo=").append(sortNo);  sb.append(", isShow=").append(isShow);  sb.append(", permission=").append(permission);  sb.append("]");  return sb.toString();}  }
class C{  public static java.sql.Timestamp toTimestamp(String dateTime){  java.util.Date newDate=toDate(dateTime);  if (newDate != null) {    return new java.sql.Timestamp(newDate.getTime());  } else {    return null;  }}  }
class C{  public Reader(RecordStream recordStream,DataInputStream in,long startSequenceId){  this(recordStream,in,startSequenceId,true);}  }
class C{  public static void loadClass(String name){  SootClass c=Scene.v().loadClassAndSupport(name);  c.setApplicationClass();  Iterator mi=c.getMethods().iterator();  while (mi.hasNext()) {    SootMethod sm=(SootMethod)mi.next();    if (sm.isConcrete()) {      sm.retrieveActiveBody();    }  }}  }
class C{  public static InputStream toInputStream(CharSequence input,Charset encoding){  return toInputStream(input.toString(),encoding);}  }
class C{  public final boolean isAlternatingTarget(){  return (myAlternate & CFG_TARGET) != 0;}  }
class C{  public UsersSearchQuery sort(UsersSearchSort value){  return unsafeParam("sort",value);}  }
class C{  protected void assertEquals(String msg,Fraction[] m,Fraction[] n){  if (m.length != n.length) {    Assert.fail("vectors have different lengths");  }  for (int i=0; i < m.length; i++) {    Assert.assertEquals(msg + " " + i+ " elements differ",m[i],n[i]);  }}  }
class C{  public static final void fillPolygon(GL2 gl,Vector2... vs){  gl.glBegin(GL2.GL_POLYGON);  for (int i=0; i < vs.length; i++) {    Vector2 v=vs[i];    gl.glVertex2d(v.x,v.y);  }  gl.glEnd();}  }
class C{  private void appendPermittedContentType(ContentType contentType){  if (permittedContentTypesMask == ContentType.ANY.getFlagValue()) {    permittedContentTypesMask=contentType.getFlagValue();  } else {    permittedContentTypesMask|=contentType.getFlagValue();  }}  }
class C{  public CompletableFuture<Integer> unloadServiceUnit(ServiceUnitId serviceUnit){  CompletableFuture<Integer> result=new CompletableFuture<Integer>();  List<CompletableFuture<Void>> closeFutures=Lists.newArrayList();  topics.forEach(null);  CompletableFuture<Void> aggregator=FutureUtil.waitForAll(closeFutures);  aggregator.thenAccept(null).exceptionally(null);  return result;}  }
class C{  protected final boolean handleAllocNode(AllocNode src){  boolean ret=false;  Node[] targets=pag.allocLookup(src);  for (  Node element : targets) {    if (element.makeP2Set().add(src)) {      varNodeWorkList.add(element);      ret=true;    }  }  return ret;}  }
class C{  public AionPacketHandlerFactory(){  handler=new AionPacketHandler();  addPacket(new CM_UI_SETTINGS(0xC4,State.IN_GAME));  addPacket(new CM_MOTION(0x101,State.IN_GAME));  addPacket(new CM_WINDSTREAM(0x100,State.IN_GAME));  addPacket(new CM_STOP_TRAINING(0x112,State.IN_GAME));  addPacket(new CM_REVIVE(0xC3,State.IN_GAME));  addPacket(new CM_DUEL_REQUEST(0x14C,State.IN_GAME));  addPacket(new CM_CRAFT(0x14B,State.IN_GAME));  addPacket(new CM_QUESTION_RESPONSE(0x10C,State.IN_GAME));  addPacket(new CM_OPEN_STATICDOOR(0xD1,State.IN_GAME));  addPacket(new CM_SPLIT_ITEM(0x15B,State.IN_GAME));  addPacket(new CM_CUSTOM_SETTINGS(0xCA,State.IN_GAME));  addPacket(new CM_PLAY_MOVIE_END(0x12F,State.IN_GAME));  addPacket(new CM_LEVEL_READY(0xC7,State.IN_GAME));  addPacket(new CM_ENTER_WORLD(0xC6,State.AUTHED));  addPacket(new CM_TIME_CHECK(0xEC,State.CONNECTED,State.AUTHED,State.IN_GAME));  addPacket(new CM_QUIT(0xDD,State.AUTHED,State.IN_GAME));  addPacket(new CM_L2AUTH_LOGIN_CHECK(0x153,State.CONNECTED));  addPacket(new CM_CHARACTER_LIST(0x150,State.AUTHED));  addPacket(new CM_CREATE_CHARACTER(0x151,State.AUTHED));  addPacket(new CM_MAC_ADDRESS(0x17B,State.CONNECTED,State.AUTHED,State.IN_GAME));  addPacket(new CM_CHARACTER_PASSKEY(0x1AC,State.AUTHED));  addPacket(new CM_MAY_LOGIN_INTO_GAME(0x174,State.AUTHED));  addPacket(new CM_MOVE(0x10E,State.IN_GAME));  addPacket(new CM_CASTSPELL(0xFF,State.IN_GAME));  addPacket(new CM_EMOTION(0xE5,State.IN_GAME));  addPacket(new CM_TITLE_SET(0x145,State.IN_GAME));  addPacket(new CM_DELETE_ITEM(0x132,State.IN_GAME));  addPacket(new CM_QUEST_SHARE(0x162,State.IN_GAME));  addPacket(new CM_DELETE_QUEST(0x12E,State.IN_GAME));  addPacket(new CM_ABYSS_RANKING_PLAYERS(0x17A,State.IN_GAME));  addPacket(new CM_ABYSS_RANKING_LEGIONS(0x130,State.IN_GAME));  addPacket(new CM_PRIVATE_STORE(0x131,State.IN_GAME));  addPacket(new CM_USE_ITEM(0xE3,State.IN_GAME));  addPacket(new CM_TARGET_SELECT(0xD9,State.IN_GAME));  addPacket(new CM_SHOW_DIALOG(0x2F2,State.IN_GAME));  addPacket(new CM_CHECK_NICKNAME(0x18F,State.AUTHED));  addPacket(new CM_PRIVATE_STORE_NAME(0x136,State.IN_GAME));  addPacket(new CM_DELETE_CHARACTER(0x156,State.AUTHED));  addPacket(new CM_RESTORE_CHARACTER(0x157,State.AUTHED));  addPacket(new CM_MACRO_CREATE(0x169,State.IN_GAME));  addPacket(new CM_MACRO_DELETE(0x18E,State.IN_GAME));  addPacket(new CM_GATHER(0xED,State.IN_GAME));  addPacket(new CM_INSTANCE_INFO(0x19E,State.IN_GAME));  addPacket(new CM_CLIENT_COMMAND_ROLL(0x125,State.IN_GAME));  addPacket(new CM_START_LOOT(0x154,State.IN_GAME));  addPacket(new CM_CLOSE_DIALOG(0x2F3,State.IN_GAME));  addPacket(new CM_DIALOG_SELECT(0x2F0,State.IN_GAME));  addPacket(new CM_BUY_ITEM(0x10D,State.IN_GAME));  addPacket(new CM_EQUIP_ITEM(0xE0,State.IN_GAME));  addPacket(new CM_TELEPORT_SELECT(0x152,State.IN_GAME));  addPacket(new CM_LOOT_ITEM(0x155,State.IN_GAME));  addPacket(new CM_QUESTIONNAIRE(0x16F,State.IN_GAME));  addPacket(new CM_ATTACK(0xFE,State.IN_GAME));  addPacket(new CM_PET(0xD0,State.IN_GAME));  addPacket(new CM_TUNE(0x1A5,State.IN_GAME));  addPacket(new CM_PET_EMOTE(0xD3,State.IN_GAME));  addPacket(new CM_CHALLENGE_LIST(0x1A6,State.IN_GAME));  addPacket(new CM_SHOW_FRIENDLIST(0x1A0,State.IN_GAME));  addPacket(new CM_FRIEND_ADD(0x129,State.IN_GAME));  addPacket(new CM_FRIEND_DEL(0x14E,State.IN_GAME));  addPacket(new CM_FRIEND_STATUS(0x164,State.IN_GAME));  addPacket(new CM_FRIEND_EDIT(0x1A9,State.IN_GAME));  addPacket(new CM_SET_NOTE(0x2F4,State.IN_GAME));  addPacket(new CM_MARK_FRIENDLIST(0x128,State.IN_GAME));  addPacket(new CM_SHOW_BLOCKLIST(0x158,State.IN_GAME));  addPacket(new CM_BLOCK_ADD(0x160,State.IN_GAME));  addPacket(new CM_BLOCK_DEL(0x161,State.IN_GAME));  addPacket(new CM_PLAYER_SEARCH(0x159,State.IN_GAME));  addPacket(new CM_LEGION(0xEB,State.IN_GAME));  addPacket(new CM_LEGION_WH_KINAH(0x10A,State.IN_GAME));  addPacket(new CM_LEGION_UPLOAD_INFO(0x17E,State.IN_GAME));  addPacket(new CM_LEGION_UPLOAD_EMBLEM(0x17F,State.IN_GAME));  addPacket(new CM_LEGION_SEARCH(0x1BA,State.IN_GAME));  addPacket(new CM_LEGION_JOIN_REQUEST(0x1BB,State.IN_GAME));  addPacket(new CM_LEGION_JOIN_REQUEST_CANCEL(0x1B8,State.IN_GAME));  addPacket(new CM_LEGION_SEND_EMBLEM_INFO(0xEE,State.IN_GAME));  addPacket(new CM_LEGION_SEND_EMBLEM(0xE9,State.IN_GAME));  addPacket(new CM_LEGION_MODIFY_EMBLEM(0x2F5,State.IN_GAME));  addPacket(new CM_LEGION_TABS(0x2F1,State.IN_GAME));  addPacket(new CM_STONESPEAR_SIEGE(0xDB,State.IN_GAME));  addPacket(new CM_FIND_GROUP(0x10B,State.IN_GAME));  addPacket(new CM_AUTO_GROUP(0x186,State.IN_GAME));  addPacket(new CM_INVITE_TO_GROUP(0x13F,State.IN_GAME));  addPacket(new CM_GROUP_DISTRIBUTION(0x12A,State.IN_GAME));  addPacket(new CM_GROUP_LOOT(0x176,State.IN_GAME));  addPacket(new CM_GROUP_DATA_EXCHANGE(0x109,State.IN_GAME));  addPacket(new CM_DISTRIBUTION_SETTINGS(0x177,State.IN_GAME));  addPacket(new CM_SHOW_BRAND(0x173,State.IN_GAME));  addPacket(new CM_BROKER_LIST(0x135,State.IN_GAME));  addPacket(new CM_BROKER_SEARCH(0x13A,State.IN_GAME));  addPacket(new CM_REGISTER_BROKER_ITEM(0x139,State.IN_GAME));  addPacket(new CM_BROKER_ADD_ITEM(0x133,State.IN_GAME));  addPacket(new CM_BROKER_SETTLE_LIST(0x15F,State.IN_GAME));  addPacket(new CM_BROKER_REGISTERED(0x13B,State.IN_GAME));  addPacket(new CM_BUY_BROKER_ITEM(0x138,State.IN_GAME));  addPacket(new CM_BROKER_CANCEL_REGISTERED(0x15E,State.IN_GAME));  addPacket(new CM_BROKER_SETTLE_ACCOUNT(0x15C,State.IN_GAME));  addPacket(new CM_PING_REQUEST(0x121,State.IN_GAME));  addPacket(new CM_PING(0xEA,State.AUTHED,State.IN_GAME));  addPacket(new CM_SUMMON_EMOTION(0x184,State.IN_GAME));  addPacket(new CM_SUMMON_ATTACK(0x185,State.IN_GAME));  addPacket(new CM_SUMMON_CASTSPELL(0x018B,State.IN_GAME));  addPacket(new CM_SUMMON_COMMAND(0x137,State.IN_GAME));  addPacket(new CM_SUMMON_MOVE(0x187,State.IN_GAME));  addPacket(new CM_CHECK_MAIL_SIZE(0x143,State.IN_GAME));  addPacket(new CM_CHECK_MAIL_SIZE2(0x193,State.IN_GAME));  addPacket(new CM_SEND_MAIL(0x142,State.IN_GAME));  addPacket(new CM_READ_MAIL(0x140,State.IN_GAME));  addPacket(new CM_READ_EXPRESS_MAIL(0x17C,State.IN_GAME));  addPacket(new CM_DELETE_MAIL(0x147,State.IN_GAME));  addPacket(new CM_GET_MAIL_ATTACHMENT(0x146,State.IN_GAME));  addPacket(new CM_EXCHANGE_ADD_ITEM(0x11E,State.IN_GAME));  addPacket(new CM_EXCHANGE_ADD_KINAH(0x11C,State.IN_GAME));  addPacket(new CM_EXCHANGE_LOCK(0x11D,State.IN_GAME));  addPacket(new CM_EXCHANGE_CANCEL(0x103,State.IN_GAME));  addPacket(new CM_EXCHANGE_OK(0x102,State.IN_GAME));  addPacket(new CM_EXCHANGE_REQUEST(0x2F9,State.IN_GAME));  addPacket(new CM_HOUSE_OPEN_DOOR(0x1BC,State.IN_GAME));  addPacket(new CM_HOUSE_TELEPORT_BACK(0x119,State.IN_GAME));  addPacket(new CM_HOUSE_SCRIPT(0xD8,State.IN_GAME));  addPacket(new CM_HOUSE_TELEPORT(0x198,State.IN_GAME));  addPacket(new CM_HOUSE_EDIT(0x12C,State.IN_GAME));  addPacket(new CM_USE_HOUSE_OBJECT(0x1BE,State.IN_GAME));  addPacket(new CM_HOUSE_SETTINGS(0x107,State.IN_GAME));  addPacket(new CM_HOUSE_KICK(0x106,State.IN_GAME));  addPacket(new CM_GET_HOUSE_BIDS(0x194,State.IN_GAME));  addPacket(new CM_HOUSE_PAY_RENT(0x199,State.IN_GAME));  addPacket(new CM_REGISTER_HOUSE(0x195,State.IN_GAME));  addPacket(new CM_PLACE_BID(0x19B,State.IN_GAME));  addPacket(new CM_HOUSE_DECORATE(0x105,State.IN_GAME));  addPacket(new CM_RELEASE_OBJECT(0x1BF,State.IN_GAME));  addPacket(new CM_OBJECT_SEARCH(0xC5,State.IN_GAME));  addPacket(new CM_MOVE_IN_AIR(0x10F,State.IN_GAME));  addPacket(new CM_VIEW_PLAYER_DETAILS(0x122,State.IN_GAME));  addPacket(new CM_TELEPORT_DONE(0xC9,State.IN_GAME));  addPacket(new CM_CHARACTER_EDIT(0xC1,State.AUTHED));  addPacket(new CM_PLAYER_STATUS_INFO(0x13E,State.IN_GAME));  addPacket(new CM_MANASTONE(0x104,State.IN_GAME));  addPacket(new CM_FUSION_WEAPONS(0x188,State.IN_GAME));  addPacket(new CM_ITEM_REMODEL(0x114,State.IN_GAME));  addPacket(new CM_TOGGLE_SKILL_DEACTIVATE(0xFC,State.IN_GAME));  addPacket(new CM_RECIPE_DELETE(0x117,State.IN_GAME));  addPacket(new CM_REMOVE_ALTERED_STATE(0xFD,State.IN_GAME));  addPacket(new CM_MAY_QUIT(0xC2,State.AUTHED,State.IN_GAME));  addPacket(new CM_REPORT_PLAYER(0x179,State.IN_GAME));  addPacket(new CM_PLAYER_LISTENER(0xE6,State.IN_GAME));  addPacket(new CM_BONUS_TITLE(0x1A7,State.IN_GAME));  addPacket(new CM_BUY_TRADE_IN_TRADE(0x116,State.IN_GAME));  addPacket(new CM_BREAK_WEAPONS(0x189,State.IN_GAME));  addPacket(new CM_CHARGE_ITEM(0x108,State.IN_GAME));  addPacket(new CM_USE_CHARGE_SKILL(0x1A4,State.IN_GAME));  addPacket(new CM_RECONNECT_AUTH(0x171,State.AUTHED));  addPacket(new CM_BLOCK_SET_REASON(0x18D,State.IN_GAME));  addPacket(new CM_INSTANCE_LEAVE(0xE8,State.IN_GAME));  addPacket(new CM_APPEARANCE(0x183,State.IN_GAME));  addPacket(new CM_CAPTCHA(0xC8,State.IN_GAME));  addPacket(new CM_COMPOSITE_STONES(0x1AE,State.IN_GAME));  addPacket(new CM_MEGAPHONE(0x1AB,State.IN_GAME));  addPacket(new CM_SUBZONE_CHANGE(0x17D,State.IN_GAME));  addPacket(new CM_MOVE_ITEM(0x15A,State.IN_GAME));  addPacket(new CM_SELECTITEM_OK(0x1AA,State.IN_GAME));  addPacket(new CM_GAMEGUARD(0x126,State.IN_GAME));  addPacket(new CM_FAST_TRACK_CHECK(0x191,State.IN_GAME));  addPacket(new CM_FAST_TRACK(0x196,State.IN_GAME));  addPacket(new CM_DIRECT_ENTER_WORLD(0x191,State.IN_GAME));  addPacket(new CM_CHAT_AUTH(0x168,State.IN_GAME));  addPacket(new CM_CHAT_MESSAGE_PUBLIC(0xD5,State.IN_GAME));  addPacket(new CM_CHAT_GROUP_INFO(0x2FB,State.IN_GAME));  addPacket(new CM_CHAT_MESSAGE_WHISPER(0xDA,State.IN_GAME));  addPacket(new CM_CHAT_PLAYER_INFO(0xE1,State.IN_GAME));  addPacket(new CM_VERSION_CHECK(0xDE,State.CONNECTED));  addPacket(new CM_FATIGUE_RECOVER(0x135,State.IN_GAME));  addPacket(new CM_ATREIAN_PASSPORT(0x1B6,State.IN_GAME));  addPacket(new CM_HOTSPOT_TELEPORT(0x1B2,State.IN_GAME));  addPacket(new CM_ITEM_PURIFICATION(0x1B1,State.IN_GAME));  addPacket(new CM_UPGRADE_ARCADE(0x1B0,State.IN_GAME));  addPacket(new CM_FILE_VERIFY(0x2F8,State.IN_GAME));  addPacket(new CM_EXPAND_CUBE(0x1B5,State.IN_GAME));  addPacket(new CM_GM_COMMAND_SEND(0xE4,State.IN_GAME));  addPacket(new CM_GM_BOOKMARK(0xE7,State.IN_GAME));  addPacket(new CM_1A3_UNK(0x1A3,State.IN_GAME));  addPacket(new CM_11A_UNK(0x11A,State.IN_GAME));}  }
class C{  public void resetHeaders(){  headers.clear();}  }
class C{  public DataSizeAction(String group,String field,int bins){  this(group,field,bins,Constants.LINEAR_SCALE);}  }
class C{  public String process(Item item) throws ProcessException {  int count=0;  Item ss=item.getItemAs(Relation.SYLLABLE);  Item lastSyllable=LAST_SYLLABLE_PATH.findItem(item);  for (Item p=ss.getNext(); p != null; p=p.getNext()) {    if ("1".equals(p.getFeatures().getString("stress"))) {      count++;    }    if (p.equalsShared(lastSyllable)) {      break;    }  }  return Integer.toString(rail(count));}  }
class C{  public static void arc(double x,double y,double radius,double angle1,double angle2){  if (radius < 0)   throw new IllegalArgumentException("arc radius must be nonnegative");  while (angle2 < angle1)   angle2+=360;  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * radius);  double hs=factorY(2 * radius);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Arc2D.Double(xs - ws / 2,ys - hs / 2,ws,hs,angle1,angle2 - angle1,Arc2D.OPEN));  draw();}  }
class C{  private void addToken(String tokenStr){  Integer tokenInt=(Integer)fTokenNames.get(tokenStr);  if (tokenInt == null) {    tokenInt=new Integer(fTokenNames.size());    fTokenNames.put(tokenInt,tokenStr);  }  addToken(tokenInt.intValue());}  }
class C{  public final boolean canSetDate(String field){  Column col=getColumn(field);  return (col == null ? false : col.canSetDate());}  }
class C{  private void updateDisplay(boolean allowEmptyDisplay){  if (!allowEmptyDisplay && mTypedTimes.isEmpty()) {    int hour=mRadialTimePickerView.getCurrentHour();    int minute=mRadialTimePickerView.getCurrentMinute();    updateHeaderHour(hour,false);    updateHeaderMinute(minute,false);    if (!mIs24HourView) {      updateAmPmLabelStates(hour < 12 ? AM : PM);    }    setCurrentItemShowing(mRadialTimePickerView.getCurrentItemShowing(),true,true);    onValidationChanged(true);  } else {    boolean[] enteredZeros={false,false};    int[] values=getEnteredTime(enteredZeros);    String hourFormat=enteredZeros[0] ? "%02d" : "%2d";    String minuteFormat=(enteredZeros[1]) ? "%02d" : "%2d";    String hourStr=(values[0] == -1) ? mDoublePlaceholderText : String.format(hourFormat,values[0]).replace(' ',mPlaceholderText);    String minuteStr=(values[1] == -1) ? mDoublePlaceholderText : String.format(minuteFormat,values[1]).replace(' ',mPlaceholderText);    mHourView.setText(hourStr);    mHourView.setSelected(false);    mMinuteView.setText(minuteStr);    mMinuteView.setSelected(false);    if (!mIs24HourView) {      updateAmPmLabelStates(values[2]);    }  }}  }
class C{  private ConsolePrintStream(final LogController logController){  super(new ConsoleOutStream(logController));  setPrintStream(this,this);}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  public static List<Lock> loadBySid(long uid,long time,String sid){  Beans<Lock> bs=Helper.load(W.create("uid",uid).and("created",time,W.OP_GT).and("sid",sid).sort("created",1),0,Integer.MAX_VALUE,Lock.class);  return bs == null ? null : bs.getList();}  }
class C{  public boolean isValidInet4Address(String inet4Address){  String[] groups=ipv4Validator.match(inet4Address);  if (groups == null) {    return false;  }  for (int i=0; i <= 3; i++) {    String ipSegment=groups[i];    if (ipSegment == null || ipSegment.length() == 0) {      return false;    }    int iIpSegment=0;    try {      iIpSegment=Integer.parseInt(ipSegment);    } catch (    NumberFormatException e) {      return false;    }    if (iIpSegment > 255) {      return false;    }    if (ipSegment.length() > 1 && ipSegment.startsWith("0")) {      return false;    }  }  return true;}  }
class C{  public boolean standard_local_names(){  return soot.PhaseOptions.getBoolean(options,"standard-local-names");}  }
class C{  public static void add(Matrix a,Matrix b,Matrix result){  for (int i=0; i < a.rows; i++) {    for (int j=0; j < a.cols; j++) {      result.set(i,j,a.get(i,j) + b.get(i,j));    }  }}  }
class C{  @Override protected void onStopLoading(){  cancelLoad();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  @Override public InputSource resolveEntity(String publicId,String systemId) throws SAXException, IOException {  return resolveEntity(null,publicId,null,systemId);}  }
class C{  public DynamicInvokeExpr newDynamicInvokeExpr(SootMethodRef bootstrapMethodRef,List<? extends Value> bootstrapArgs,SootMethodRef methodRef,List<? extends Value> args){  return new JDynamicInvokeExpr(bootstrapMethodRef,bootstrapArgs,methodRef,args);}  }
class C{  public boolean isParam(){  return true;}  }
class C{  private View findReferenceChildClosestToEnd(RecyclerView.State state){  return mShouldReverseLayout ? findFirstReferenceChild(state.getItemCount()) : findLastReferenceChild(state.getItemCount());}  }
class C{  private String formatThrowableSet(ThrowableSet set){  String input=set.toAbbreviatedString();  int inputLength=input.length();  StringBuffer result=new StringBuffer(inputLength + 5);  for (int i=0; i < inputLength; i++) {    char c=input.charAt(i);    if (c == '+' || c == '-') {      result.append("\\l");    }    result.append(c);  }  return result.toString();}  }
class C{  public BlockVector toBlockVector(){  return new BlockVector(x,y,z);}  }
class C{  public synchronized void shutdown(){  if (!isActive) {    return;  }  log.info("Shutting down the default async job executor [{}].",getClass().getName());  if (timerJobRunnable != null) {    timerJobRunnable.stop();  }  if (asyncJobsDueRunnable != null) {    asyncJobsDueRunnable.stop();  }  if (resetExpiredJobsRunnable != null) {    resetExpiredJobsRunnable.stop();  }  stopResetExpiredJobsThread();  stopTimerAcquisitionThread();  stopJobAcquisitionThread();  stopExecutingAsyncJobs();  timerJobRunnable=null;  asyncJobsDueRunnable=null;  resetExpiredJobsRunnable=null;  isActive=false;}  }
class C{  public CommandDirectories(String sourceDirectoryPathString,String targetDirectoryPathString){  sourceDirectoryPathString=MoreObjects.firstNonNull(sourceDirectoryPathString,System.getProperty("user.dir"));  targetDirectoryPathString=MoreObjects.firstNonNull(targetDirectoryPathString,sourceDirectoryPathString);  sourceDirectoryPath=Paths.get(sourceDirectoryPathString).toAbsolutePath();  targetDirectoryPath=Paths.get(targetDirectoryPathString).toAbsolutePath();}  }
class C{  @Override protected void checkVectorDimensions(RealVector v) throws MathIllegalArgumentException {  checkVectorDimensions(v.getDimension());}  }
class C{  public boolean isPerformingBlockingOperation(){  return (!mServiceHandler.mPendingOperations.isEmpty());}  }
class C{  public void success(int message){  sendPluginResult(new PluginResult(PluginResult.Status.OK,message));}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public boolean isAxisMinCustom(){  return mCustomAxisMin;}  }
class C{  public static Type<?> valueOf(final String typeDescriptor){  try {    return TypeUtil.parseTypeDescriptor(typeDescriptor);  } catch (  TypeUtil.InvalidTypeDescriptorException e) {    throw new IllegalArgumentException(typeDescriptor + " is an invalid type descriptor");  }}  }
class C{  public void eigenPCA(Matrix data,boolean scale,boolean debug){  int M=data.getRowDimension();  int N=data.getColumnDimension();  double mn;  double sd;  for (int i=0; i < M; i++) {    mn=MathUtils.mean(data.getArray()[i]);    if (mn == 0.0)     throw new Error("eigenPCA: mean of dimension " + (i + 1) + " is 0.0");    if (scale) {      sd=MathUtils.standardDeviation(data.getArray()[i]);      if (sd == 0.0)       throw new Error("eigenPCA: variance of dimension " + (i + 1) + " is 0.0");      for (int j=0; j < N; j++)       data.set(i,j,((data.get(i,j) - mn) / sd));    } else {      for (int j=0; j < N; j++)       data.set(i,j,(data.get(i,j) - mn));    }  }  if (debug) {    System.out.println("Data:");    data.print(data.getRowDimension(),3);  }  covariance=data.times(data.transpose());  covariance=covariance.times(1.0 / (N - 1));  if (debug) {    System.out.println("Covariance");    covariance.print(covariance.getRowDimension(),3);  }  EigenvalueDecomposition pc=covariance.eig();  if (debug) {    System.out.println("EigenValues (on the diagonal)");    pc.getD().print(pc.getD().getRowDimension(),3);    System.out.println("EigenVectors");    pc.getV().print(pc.getV().getRowDimension(),3);  }  double values[]=new double[pc.getD().getRowDimension()];  for (int i=0; i < pc.getD().getRowDimension(); i++)   values[i]=pc.getD().get(i,i);  int indices[]=MathUtils.quickSort(values);  V=new double[values.length];  double d[][]=new double[pc.getV().getRowDimension()][pc.getV().getColumnDimension()];  for (int j=0; j < values.length; j++) {    int k=indices[values.length - 1 - j];    V[j]=values[k];    for (int i=0; i < pc.getV().getRowDimension(); i++)     d[i][j]=pc.getV().get(i,k);  }  PC=new Matrix(d);  if (debug) {    System.out.println("PC:");    PC.print(PC.getRowDimension(),3);  }  Matrix projectedData=PC.transpose().times(data);  Matrix covProjectedData=projectedData.times(projectedData.transpose());  varianceProportion=new double[covProjectedData.getColumnDimension()];  double sumPropVar=0.0;  for (int j=0; j < covProjectedData.getColumnDimension(); j++) {    varianceProportion[j]=covProjectedData.get(j,j);    sumPropVar+=varianceProportion[j];  }  for (int j=0; j < covProjectedData.getColumnDimension(); j++)   varianceProportion[j]=varianceProportion[j] / sumPropVar;}  }
class C{  private void powerPhaseFFT(double[] re,double[] im){  fft(re,im,FFT_FORWARD);  for (int i=0; i < re.length; i++) {    double pow=re[i] * re[i] + im[i] * im[i];    im[i]=Math.atan2(im[i],re[i]);    re[i]=pow;  }}  }
class C{  public synchronized boolean isRunning(){  return this.running;}  }
class C{  public ReadModifiers(ReadModifiers modifiers1,ReadModifiers modifiers2){  super(modifiers1,modifiers2);}  }
class C{  public void preventHandlingCurrentSelectionModification(){  mShouldHandleSelectionModification=false;}  }
class C{  public static Value noInvokeRhs(Unit unit){  return noInvoke(rhs(unit));}  }
class C{  public Builder className(String className){  this.className=className;  return this;}  }
class C{  public InterruptedStatusThread(String name){  super(name);}  }
class C{  public Matrix solveTranspose(Matrix B){  return transpose().solve(B.transpose());}  }
class C{  public void showLoadingView(){  mLoadingView.showLoadingUI();}  }
class C{  public MarketGetCommentsQuery extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  @Override protected String dateToString(DateTimeData date){  StringBuffer message=new StringBuffer(16);  append(message,date.hour,2);  message.append(':');  append(message,date.minute,2);  message.append(':');  append(message,date.second);  append(message,(char)date.utc,0);  return message.toString();}  }
class C{  public static void writeStringToFile(File file,String data,Charset encoding,boolean append) throws IOException {  OutputStream out=null;  try {    out=openOutputStream(file,append);    IOUtils.write(data,out,encoding);    out.close();  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  public ResourceId parseResourceId(int resourceId){  return new ResourceId((resourceId & 0xFF000000) >> 24,(resourceId & 0x00FF0000) >> 16,resourceId & 0x0000FFFF);}  }
class C{  public void moveViewTo(float xIndex,float yValue,AxisDependency axis){  float valsInView=getDeltaY(axis) / mViewPortHandler.getScaleY();  Runnable job=new MoveViewJob(mViewPortHandler,xIndex,yValue + valsInView / 2f,getTransformer(axis),this);  addViewportJob(job);}  }
class C{  public static boolean isExclusiveReadLock(int mod){  return Modifiers.contains(mod,EXCLUSIVE_READ_LOCK);}  }
class C{  public RemoteResultSetImpl(Plan plan,RemoteConnectionImpl rconn) throws RemoteException {  s=plan.open();  schema=plan.schema();  this.rconn=rconn;}  }
class C{  public String readString() throws IOException {  return dis.readUTF();}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  @Override public boolean isSpecified(int attrIndex){  return fAttributes[attrIndex].specified;}  }
class C{  public OutputStream put(String key) throws FileNotFoundException {  return new xFileOutputStream(mCache.newFile(key));}  }
class C{  public ResultSet buildResultSet(JsonNode json,DruidAggregationQuery<?> druidQuery,DateTimeZone dateTimeZone){  ZonedSchema resultSetSchema=new ZonedSchema(granularity,dateTimeZone);  PhysicalTable physicalTable=druidQuery.getDataSource().getPhysicalTables().iterator().next();  for (  Aggregation aggregation : druidQuery.getAggregations()) {    MetricColumn.addNewMetricColumn(resultSetSchema,aggregation.getName());  }  for (  PostAggregation postAggregation : druidQuery.getPostAggregations()) {    MetricColumn.addNewMetricColumn(resultSetSchema,postAggregation.getName());  }  for (  Dimension dimension : druidQuery.getDimensions()) {    resultSetSchema.addColumn(new LogicalDimensionColumn(dimension));  }  return druidResponseParser.parse(json,resultSetSchema,druidQuery.getQueryType());}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public Transform lerped(Transform end,double alpha){  double a1=1.0 - alpha;  double x=a1 * this.x + alpha * end.x;  double y=a1 * this.y + alpha * end.y;  double rs=this.getRotation();  double re=end.getRotation();  double diff=re - rs;  if (diff < -Math.PI)   diff+=Geometry.TWO_PI;  if (diff > Math.PI)   diff-=Geometry.TWO_PI;  double a=diff * alpha + rs;  Transform tx=new Transform();  tx.rotate(a);  tx.translate(x,y);  return tx;}  }
class C{  public SVNSynchronizeParticipant(){  super();}  }
class C{  public void write(short u0,short u1,short u2,short u3,short u4){  write(u0);  write(u1);  write(u2);  write(u3);  write(u4);}  }
class C{  public static VersionNumber parseLastVersionNumber(@Nonnull final String text){  Check.notNull(text,"text");  final Matcher matcher=VERSIONNUMBER_WITH_SUFFIX.matcher(text);  String[] split=null;  String ext=null;  while (matcher.find()) {    split=matcher.group(MAJOR_INDEX).split("\\.");    ext=matcher.group(EXTENSION_INDEX);  }  final String extension=ext == null ? VersionNumber.EMPTY_EXTENSION : trimRight(ext);  return split == null ? VersionNumber.UNKNOWN : new VersionNumber(Arrays.asList(split),extension);}  }
class C{  private Object readResolve(){  return LazyHolder.INSTANCE;}  }
class C{  @Override public void startExecuting(){  this.theEntityCreature.getNavigator().tryMoveToXYZ(this.randPosX,this.randPosY,this.randPosZ,this.speed);}  }
class C{  @deprecated protected void zeroPaddingNumber(NumberFormat nf,StringBuffer buf,int value,int minDigits,int maxDigits){  if ((this.useLocalZeroPaddingNumberFormat) && (value >= 0)) {    fastZeroPaddingNumber(buf,value,minDigits,maxDigits);  } else {    nf.setMinimumIntegerDigits(minDigits);    nf.setMaximumIntegerDigits(maxDigits);    nf.format(value,buf,new FieldPosition(-1));  }}  }
class C{  public static void insertIntoCombo(JComboBox combo,Object item){  MutableComboBoxModel model=(MutableComboBoxModel)combo.getModel();  if (model.getSize() == 0) {    model.insertElementAt(item,0);    return;  }  Object o=model.getElementAt(0);  if (o.equals(item)) {    return;  }  model.removeElement(item);  model.insertElementAt(item,0);  combo.setSelectedIndex(0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSkillCastingTime_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200791,skillcaster,skillname);}  }
class C{  @Override public void updateSymbol(TextSymbolizer textSymbolizer){  Map<String,String> options=textSymbolizer.getOptions();  for (  FieldIdEnum key : fieldMap.keySet()) {    internalUpdateSymbol(options,key,fieldMap.get(key));  }}  }
class C{  public FieldConfigFont(FieldConfigCommonData commonData){  super(commonData);}  }
class C{  VUserManagerService(Context context,VPackageManagerService pm,Object installLock,Object packagesLock){  this(context,pm,installLock,packagesLock,VEnvironment.getDataDirectory(),new File(VEnvironment.getDataDirectory(),"user"));}  }
class C{  public void smoothOpenLeftMenu(int position,int duration){  smoothOpenMenu(position,LEFT_DIRECTION,duration);}  }
class C{  float readBoost(Element el){  NodeList list=el.getElementsByTagName("boost");  if (list == null || list.getLength() == 0)   return DomainSuffix.DEFAULT_BOOST;  return Float.parseFloat(list.item(0).getFirstChild().getNodeValue());}  }
class C{  private Split pow(final long e){  Split result=new Split(1);  Split d2p=new Split(full,high,low);  for (long p=e; p != 0; p>>>=1) {    if ((p & 0x1) != 0) {      result=result.multiply(d2p);    }    d2p=d2p.multiply(d2p);  }  if (Double.isNaN(result.full)) {    if (Double.isNaN(full)) {      return Split.NAN;    } else {      if (FastMath.abs(full) < 1) {        return new Split(FastMath.copySign(0.0,full),0.0);      } else       if (full < 0 && (e & 0x1) == 1) {        return Split.NEGATIVE_INFINITY;      } else {        return Split.POSITIVE_INFINITY;      }    }  } else {    return result;  }}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new Opt(),1);  setChild(new List(),2);}  }
class C{  public synchronized void panAbs(double dx,double dy){  damageReport();  m_transform.translate(dx,dy);  try {    m_itransform=m_transform.createInverse();  } catch (  Exception e) {  }}  }
class C{  public boolean isExistingCommand(){  return (!name.equals(CommandTagHandle.CMD_UNKNOWN));}  }
class C{  public double calcAngleWithRatios(Entry p1,Entry p2){  float dx=p2.getXIndex() * mDeltaRatio - p1.getXIndex() * mDeltaRatio;  float dy=p2.getVal() * mScaleRatio - p1.getVal() * mScaleRatio;  return Math.atan2(dy,dx) * 180.0 / Math.PI;}  }
class C{  public boolean isLowerLimitEnabled(){  return this.lowerLimitEnabled;}  }
class C{  public MessagesSendQuery userIds(List<Integer> value){  return unsafeParam("user_ids",value);}  }
class C{  public Insn(int opc,Label target) throws jasError {  this.opc=opc;switch (opc) {case opc_jsr:case opc_goto:case opc_if_acmpne:case opc_if_acmpeq:case opc_if_icmpge:case opc_if_icmple:case opc_if_icmpgt:case opc_if_icmplt:case opc_if_icmpne:case opc_if_icmpeq:case opc_ifge:case opc_ifgt:case opc_ifne:case opc_ifle:case opc_iflt:case opc_ifeq:case opc_ifnull:case opc_ifnonnull:    operand=new LabelOperand(target,this);  break;case opc_goto_w:case opc_jsr_w:operand=new LabelOperand(target,this,true);break;default :throw new jasError(opcNames[opc] + " does not take a label as its argument");}}  }
class C{  public static void finishActivityOnPhone(Context context){  if (context instanceof EnhancedBookmarkActivity) {    ((Activity)context).finish();  }}  }
class C{  protected AppsSendRequestQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  public DocsDeleteQuery(VkApiClient client,UserActor actor,int ownerId,int docId){  super(client,"docs.delete",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  docId(docId);}  }
class C{  public void deleteComponent(String componentName){  getComponent(componentName).delete();}  }
class C{  public StorageGetQuery keys(List<String> value){  return unsafeParam("keys",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_FINISHED_QUEST(String value0){  return new SM_SYSTEM_MESSAGE(1300596,value0);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set keep1=");  boolean value=np.getBoolean();  np.matchIgnoreCase(";");  CompareWindow viewer=(CompareWindow)getParent();  viewer.setKeep1(value);}  }
class C{  private float computeCorrelationCoefficent(String classNameX,String classNameY){  final ArrayList<Double> xValues=new ArrayList<>(getChartData().getSeriesNames().size());  final ArrayList<Double> yValues=new ArrayList<>(getChartData().getSeriesNames().size());  for (  String sample : getChartData().getSeriesNames()) {    xValues.add(getChartData().getValueAsDouble(sample,classNameX));    yValues.add(getChartData().getValueAsDouble(sample,classNameY));  }  return (float)Correlation.computePersonsCorrelationCoefficent(xValues.size(),xValues,yValues);}  }
class C{  @PUT @Path("{experimentID}") @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) @ApiOperation(value="Update an experiment",notes="Can update an experiment that is in DRAFT state to change the experiment state, or " + "to change sampling percentage or to enable personalization and more.",response=Experiment.class) @Timed public Response putExperiment(@PathParam("experimentID") @ApiParam(value="Experiment ID") final Experiment.ID experimentID,@ApiParam(value="Please read the implementation notes above",required=true) final Experiment experimentEntity,@QueryParam("createNewApplication") @DefaultValue("false") final boolean createNewApplication,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){  Username userName=authorization.getUser(authorizationHeader);  Experiment experiment=experiments.getExperiment(experimentID);  if (experiment == null) {    throw new ExperimentNotFoundException(experimentID);  }  if (!createNewApplication) {    authorization.checkUserPermissions(userName,experiment.getApplicationName(),UPDATE);  }  experiment=experiments.updateExperiment(experimentID,experimentEntity,authorization.getUserInfo(userName));  assert experiment != null : "Error updating experiment";  if ((createNewApplication) && !experiment.getState().equals(DELETED)) {    UserRole userRole=newInstance(experiment.getApplicationName(),ADMIN).withUserID(userName).build();    authorization.setUserRole(userRole,null);  }  return experiment.getState().equals(DELETED) ? httpHeader.headers(NO_CONTENT).build() : httpHeader.headers().entity(experiment).build();}  }
class C{  public H263Stream() throws IOException {  this(CameraInfo.CAMERA_FACING_BACK);}  }
class C{  public void testConfigurationUpdate(){  myFixture.copyFileToProject("themeEditor/attributeResolution/styles-v17.xml","res/values-v17/styles.xml");  myFixture.copyFileToProject("themeEditor/attributeResolution/styles-v19.xml","res/values-v19/styles.xml");  VirtualFile file=myFixture.copyFileToProject("themeEditor/attributeResolution/styles-v20.xml","res/values-v20/styles.xml");  ConfigurationManager configurationManager=myFacet.getConfigurationManager();  Configuration configuration=configurationManager.getConfiguration(file);  ThemeEditorContext context=new ThemeEditorContext(configuration);  ThemeResolver resolver=context.getThemeResolver();  assertNotNull(resolver.getTheme("V20OnlyTheme"));  assertNotNull(resolver.getTheme("V19OnlyTheme"));  assertNotNull(resolver.getTheme("V17OnlyTheme"));  configuration.setTarget(new CompatibilityRenderTarget(configurationManager.getHighestApiTarget(),17,configurationManager.getHighestApiTarget()));  resolver=context.getThemeResolver();  assertNull(resolver.getTheme("V20OnlyTheme"));  assertNull(resolver.getTheme("V19OnlyTheme"));  assertNotNull(resolver.getTheme("V17OnlyTheme"));}  }
class C{  protected Object internalGet(Object key,Transaction txn,long waitForResponse,int readModifiers,boolean isRemove){  try {    final SpaceMapEntry template=MapEntryFactory.create(key);    final boolean ifExists=txn != null;    SpaceMapEntry envelopeObj;    if (isRemove)     envelopeObj=(SpaceMapEntry)_spaceProxy.take(template,txn,waitForResponse,ReadModifiers.MATCH_BY_ID,ifExists); else     envelopeObj=(SpaceMapEntry)_spaceProxy.read(template,txn,waitForResponse,readModifiers | ReadModifiers.MATCH_BY_ID,ifExists);    if (envelopeObj == null) {      if (txn == null)       return null;      throw new CacheTimeoutException(key);    }    Object envValue=envelopeObj.getValue();    envValue=SerializationUtil.deSerializeFieldValue(envValue,_compression);    if (_isVersioned)     _entryInfos.setEntryVersion(envValue,key,envelopeObj.getVersion());    return envValue;  } catch (  EntryNotInSpaceException ex) {    return null;  }catch (  CacheException e) {    throw e;  }catch (  Exception e) {    throw new SpaceCacheException("Failed to get value from space cache",e);  }}  }
class C{  @Override @TargetApi(21) public void onReceivedClientCertRequest(WebView view,ClientCertRequest request){  PluginManager pluginManager=this.parentEngine.pluginManager;  if (pluginManager != null && pluginManager.onReceivedClientCertRequest(null,new CordovaClientCertRequest(request))) {    parentEngine.client.clearLoadTimeoutTimer();    return;  }  super.onReceivedClientCertRequest(view,request);}  }
class C{  public static int red(int color){  return (color >> 16) & 0xFF;}  }
class C{  @Override public double[] makeCumulativeTestPoints(){  return new double[]{0.857104827257,1.64649737269,2.17973074725,2.7326367935,3.48953912565,26.1244815584,20.0902350297,17.5345461395,15.5073130559,13.3615661365};}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public static FunktionConfig findFromFolder(File folder) throws IOException {  if (folder.isDirectory()) {    File file=new File(folder,FILE_NAME);    if (file != null && file.exists() && file.isFile()) {      return loadFromFile(file);    }    File parentFile=folder.getParentFile();    if (parentFile != null) {      return findFromFolder(parentFile);    }    FunktionConfig answer=tryFindConfigOnClassPath();    if (answer != null) {      return answer;    }    throw new IOException("Funktion configuration file does not exist: " + file.getPath());  } else   if (folder.isFile()) {    return loadFromFile(folder);  }  FunktionConfig answer=tryFindConfigOnClassPath();  if (answer != null) {    return answer;  }  throw new IOException("Funktion configuration folder does not exist: " + folder.getPath());}  }
class C{  public DefaultScrollableDataIterator(String entityName,SessionFactory sessionFactory,int fetchSize,boolean performOrderById){  super(entityName,sessionFactory,fetchSize,performOrderById);}  }
class C{  public void parseBuffer(ByteInputBuffer buffer){  int query_len=buffer.readIntLittleEndian();  queryName=buffer.readBytesNullTerminated();  int flags=buffer.readCharBigEndian();  boolean hasN=((flags & 1) == 1);switch (daaParser.getHeader().getAlignMode()) {case blastp:{      byte[] packed=PackedSequence.readPackedSequence(buffer,query_len,5);      sourceSequence=context[0]=PackedSequence.getUnpackedSequence(packed,query_len,5);      break;    }case blastx:{    byte[] packed=PackedSequence.readPackedSequence(buffer,query_len,hasN ? 3 : 2);    sourceSequence=PackedSequence.getUnpackedSequence(packed,query_len,hasN ? 3 : 2);    byte[][] sixFrameTranslation=Translator.getSixFrameTranslations(sourceSequence);    System.arraycopy(sixFrameTranslation,0,context,0,sixFrameTranslation.length);    break;  }case blastn:{  byte[] packed=PackedSequence.readPackedSequence(buffer,query_len,hasN ? 3 : 2);  sourceSequence=PackedSequence.getUnpackedSequence(packed,query_len,hasN ? 3 : 2);  context[0]=sourceSequence;  context[1]=Translator.getReverseComplement(sourceSequence);  break;}default :}}  }
class C{  public static void isNotInstanceOf(String argumentName,Object argumentObject,Class<?> targetClass){  notNull(argumentName,argumentObject);  if (targetClass.isInstance(argumentObject)) {    throw new IllegalArgumentException(argumentName + " cannot be an instance of " + targetClass.getName());  }}  }
class C{  public static synchronized void authReconnectingAccount(int accountId,int loginOk,int reconnectKey,LoginConnection client){  ReconnectingAccount reconnectingAccount=reconnectingAccounts.remove(accountId);  if (reconnectingAccount != null && reconnectingAccount.getReconnectionKey() == reconnectKey) {    Account acc=reconnectingAccount.getAccount();    client.setAccount(acc);    accountsOnLS.put(acc.getId(),client);    client.setState(State.AUTHED_LOGIN);    client.setSessionKey(new SessionKey(client.getAccount()));    client.sendPacket(new SM_UPDATE_SESSION(client.getSessionKey()));  } else {    client.closeNow();  }}  }
class C{  public E valueAt(int index){  if (mGarbage) {    gc();  }  return (E)mValues[index];}  }
class C{  public static int extractLowSignedNibble(int value){  return (value << 28) >> 28;}  }
class C{  public V remove(R rowKey,C columnKey){  if (rowKey == null || columnKey == null)   return null;  Map<C,V> row=row(rowKey);  if (row == null)   return null;  V oldValue=get(rowKey,columnKey);  row.remove(columnKey);  return oldValue;}  }
class C{  public XMLTokener(String s){  super(s);}  }
class C{  public static String sanitizeAppIdentifier(String appIdentifier) throws IllegalArgumentException {  if (appIdentifier == null) {    throw new IllegalArgumentException("App Key must not be null.");  }  String sAppIdentifier=appIdentifier.trim();  if (sAppIdentifier.length() != APP_IDENTIFIER_LENGTH) {    throw new IllegalArgumentException("App Key length must be " + APP_IDENTIFIER_LENGTH + " characters.");  }  return sAppIdentifier;}  }
class C{  public void train(String sTrainingText){  sgOverallGraph.setDataString(sTrainingText + (new StringBuffer().append((char)StreamTokenizer.TT_EOF)).toString());  clLocator.resetCache();  getDelimiters();}  }
class C{  public BytesMessage createBytesMessage(byte[] bytesArrayBody) throws JMSException {  ensureOpen();  GSBytesMessageImpl bytesMsg=new GSBytesMessageImpl(this,bytesArrayBody);  return bytesMsg;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  void execute(final int opcode,final int arg,final ClassWriter cw,final Item item){  int t1, t2, t3, t4;switch (opcode) {case Opcodes.NOP:case Opcodes.INEG:case Opcodes.LNEG:case Opcodes.FNEG:case Opcodes.DNEG:case Opcodes.I2B:case Opcodes.I2C:case Opcodes.I2S:case Opcodes.GOTO:case Opcodes.RETURN:    break;case Opcodes.ACONST_NULL:  push(NULL);break;case Opcodes.ICONST_M1:case Opcodes.ICONST_0:case Opcodes.ICONST_1:case Opcodes.ICONST_2:case Opcodes.ICONST_3:case Opcodes.ICONST_4:case Opcodes.ICONST_5:case Opcodes.BIPUSH:case Opcodes.SIPUSH:case Opcodes.ILOAD:push(INTEGER);break;case Opcodes.LCONST_0:case Opcodes.LCONST_1:case Opcodes.LLOAD:push(LONG);push(TOP);break;case Opcodes.FCONST_0:case Opcodes.FCONST_1:case Opcodes.FCONST_2:case Opcodes.FLOAD:push(FLOAT);break;case Opcodes.DCONST_0:case Opcodes.DCONST_1:case Opcodes.DLOAD:push(DOUBLE);push(TOP);break;case Opcodes.LDC:switch (item.type) {case ClassWriter.INT:push(INTEGER);break;case ClassWriter.LONG:push(LONG);push(TOP);break;case ClassWriter.FLOAT:push(FLOAT);break;case ClassWriter.DOUBLE:push(DOUBLE);push(TOP);break;case ClassWriter.CLASS:push(OBJECT | cw.addType("java/lang/Class"));break;default :push(OBJECT | cw.addType("java/lang/String"));}break;case Opcodes.ALOAD:push(get(arg));break;case Opcodes.IALOAD:case Opcodes.BALOAD:case Opcodes.CALOAD:case Opcodes.SALOAD:pop(2);push(INTEGER);break;case Opcodes.LALOAD:case Opcodes.D2L:pop(2);push(LONG);push(TOP);break;case Opcodes.FALOAD:pop(2);push(FLOAT);break;case Opcodes.DALOAD:case Opcodes.L2D:pop(2);push(DOUBLE);push(TOP);break;case Opcodes.AALOAD:pop(1);t1=pop();push(ELEMENT_OF + t1);break;case Opcodes.ISTORE:case Opcodes.FSTORE:case Opcodes.ASTORE:t1=pop();set(arg,t1);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);}}break;case Opcodes.LSTORE:case Opcodes.DSTORE:pop(1);t1=pop();set(arg,t1);set(arg + 1,TOP);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);}}break;case Opcodes.IASTORE:case Opcodes.BASTORE:case Opcodes.CASTORE:case Opcodes.SASTORE:case Opcodes.FASTORE:case Opcodes.AASTORE:pop(3);break;case Opcodes.LASTORE:case Opcodes.DASTORE:pop(4);break;case Opcodes.POP:case Opcodes.IFEQ:case Opcodes.IFNE:case Opcodes.IFLT:case Opcodes.IFGE:case Opcodes.IFGT:case Opcodes.IFLE:case Opcodes.IRETURN:case Opcodes.FRETURN:case Opcodes.ARETURN:case Opcodes.TABLESWITCH:case Opcodes.LOOKUPSWITCH:case Opcodes.ATHROW:case Opcodes.MONITORENTER:case Opcodes.MONITOREXIT:case Opcodes.IFNULL:case Opcodes.IFNONNULL:pop(1);break;case Opcodes.POP2:case Opcodes.IF_ICMPEQ:case Opcodes.IF_ICMPNE:case Opcodes.IF_ICMPLT:case Opcodes.IF_ICMPGE:case Opcodes.IF_ICMPGT:case Opcodes.IF_ICMPLE:case Opcodes.IF_ACMPEQ:case Opcodes.IF_ACMPNE:case Opcodes.LRETURN:case Opcodes.DRETURN:pop(2);break;case Opcodes.DUP:t1=pop();push(t1);push(t1);break;case Opcodes.DUP_X1:t1=pop();t2=pop();push(t1);push(t2);push(t1);break;case Opcodes.DUP_X2:t1=pop();t2=pop();t3=pop();push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2:t1=pop();t2=pop();push(t2);push(t1);push(t2);push(t1);break;case Opcodes.DUP2_X1:t1=pop();t2=pop();t3=pop();push(t2);push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2_X2:t1=pop();t2=pop();t3=pop();t4=pop();push(t2);push(t1);push(t4);push(t3);push(t2);push(t1);break;case Opcodes.SWAP:t1=pop();t2=pop();push(t1);push(t2);break;case Opcodes.IADD:case Opcodes.ISUB:case Opcodes.IMUL:case Opcodes.IDIV:case Opcodes.IREM:case Opcodes.IAND:case Opcodes.IOR:case Opcodes.IXOR:case Opcodes.ISHL:case Opcodes.ISHR:case Opcodes.IUSHR:case Opcodes.L2I:case Opcodes.D2I:case Opcodes.FCMPL:case Opcodes.FCMPG:pop(2);push(INTEGER);break;case Opcodes.LADD:case Opcodes.LSUB:case Opcodes.LMUL:case Opcodes.LDIV:case Opcodes.LREM:case Opcodes.LAND:case Opcodes.LOR:case Opcodes.LXOR:pop(4);push(LONG);push(TOP);break;case Opcodes.FADD:case Opcodes.FSUB:case Opcodes.FMUL:case Opcodes.FDIV:case Opcodes.FREM:case Opcodes.L2F:case Opcodes.D2F:pop(2);push(FLOAT);break;case Opcodes.DADD:case Opcodes.DSUB:case Opcodes.DMUL:case Opcodes.DDIV:case Opcodes.DREM:pop(4);push(DOUBLE);push(TOP);break;case Opcodes.LSHL:case Opcodes.LSHR:case Opcodes.LUSHR:pop(3);push(LONG);push(TOP);break;case Opcodes.IINC:set(arg,INTEGER);break;case Opcodes.I2L:case Opcodes.F2L:pop(1);push(LONG);push(TOP);break;case Opcodes.I2F:pop(1);push(FLOAT);break;case Opcodes.I2D:case Opcodes.F2D:pop(1);push(DOUBLE);push(TOP);break;case Opcodes.F2I:case Opcodes.ARRAYLENGTH:case Opcodes.INSTANCEOF:pop(1);push(INTEGER);break;case Opcodes.LCMP:case Opcodes.DCMPL:case Opcodes.DCMPG:pop(4);push(INTEGER);break;case Opcodes.JSR:case Opcodes.RET:throw new RuntimeException("JSR/RET are not supported with computeFrames option");case Opcodes.GETSTATIC:push(cw,item.strVal3);break;case Opcodes.PUTSTATIC:pop(item.strVal3);break;case Opcodes.GETFIELD:pop(1);push(cw,item.strVal3);break;case Opcodes.PUTFIELD:pop(item.strVal3);pop();break;case Opcodes.INVOKEVIRTUAL:case Opcodes.INVOKESPECIAL:case Opcodes.INVOKESTATIC:case Opcodes.INVOKEINTERFACE:pop(item.strVal3);if (opcode != Opcodes.INVOKESTATIC) {t1=pop();if (opcode == Opcodes.INVOKESPECIAL && item.strVal2.charAt(0) == '<') {init(t1);}}push(cw,item.strVal3);break;case Opcodes.NEW:push(UNINITIALIZED | cw.addUninitializedType(item.strVal1,arg));break;case Opcodes.NEWARRAY:pop();switch (arg) {case Opcodes.T_BOOLEAN:push(ARRAY_OF | BOOLEAN);break;case Opcodes.T_CHAR:push(ARRAY_OF | CHAR);break;case Opcodes.T_BYTE:push(ARRAY_OF | BYTE);break;case Opcodes.T_SHORT:push(ARRAY_OF | SHORT);break;case Opcodes.T_INT:push(ARRAY_OF | INTEGER);break;case Opcodes.T_FLOAT:push(ARRAY_OF | FLOAT);break;case Opcodes.T_DOUBLE:push(ARRAY_OF | DOUBLE);break;default :push(ARRAY_OF | LONG);break;}break;case Opcodes.ANEWARRAY:String s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,'[' + s);} else {push(ARRAY_OF | OBJECT | cw.addType(s));}break;case Opcodes.CHECKCAST:s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,s);} else {push(OBJECT | cw.addType(s));}break;default :pop(arg);push(cw,item.strVal1);break;}}  }
class C{  private boolean areClassesEqual(Class<?> c1,Class<?> c2){  if (isMap(c1)) {    return isMap(c2);  } else   if (isList(c1)) {    return isList(c2);  } else {    return c1.equals(c2);  }}  }
class C{  public PagesGetTitlesQuery(VkApiClient client,UserActor actor){  super(client,"pages.getTitles",Utils.buildParametrizedType(List.class,Wikipage.class));  accessToken(actor.getAccessToken());}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ClassAccess fullCopy(){  ClassAccess tree=(ClassAccess)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static Point createPointFromJson(JsonNode json){  return FACTORY.createPoint(createCoordinateFromJson(json));}  }
class C{  private void removeBodyAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxBody) {      SandboxBody body=(SandboxBody)node.getUserObject();      int choice=JOptionPane.showConfirmDialog(ControlUtilities.getParentWindow(this),MessageFormat.format(Messages.getString("menu.context.body.remove.warning"),body.getName()),Messages.getString("menu.context.body.remove.warning.title"),JOptionPane.YES_NO_CANCEL_OPTION);      if (choice == JOptionPane.YES_OPTION) {synchronized (Simulation.LOCK) {          this.simulation.getWorld().removeBody(body);        }        this.model.removeNodeFromParent(node);        this.notifyActionListeners("remove-body",body);      }    }  }}  }
class C{  public NumberRangeModel(float lo,float hi,float min,float max){  this(new Float(lo),new Float(hi),new Float(min),new Float(max));}  }
class C{  private void monitorReplicationStateForModifyingOperation(Transaction transaction){  if (transaction != null)   return;  monitorReplicationState();}  }
class C{  public Bucket(String label,String experimentId,double allocationPercent,boolean isControl,String description,String payload){  this(label,experimentId,allocationPercent,isControl,description,payload,null);}  }
class C{  private boolean canInvitePlayer(Player activePlayer,Player targetPlayer){  Legion legion=activePlayer.getLegion();  if (activePlayer.getLifeStats().isAlreadyDead()) {    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_INVITE_CANT_INVITE_WHEN_DEAD);    return false;  }  if (isSelf(activePlayer,targetPlayer.getObjectId())) {    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_INVITE_CAN_NOT_INVITE_SELF);    return false;  } else   if (targetPlayer.isLegionMember()) {    if (legion.isMember(targetPlayer.getObjectId())) {      PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_INVITE_HE_IS_MY_GUILD_MEMBER(targetPlayer.getName()));    } else {      PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_INVITE_HE_IS_OTHER_GUILD_MEMBER(targetPlayer.getName()));    }    return false;  } else   if (!activePlayer.getLegionMember().hasRights(LegionPermissionsMask.INVITE)) {    return false;  } else   if (activePlayer.getRace() != targetPlayer.getRace() && !LegionConfig.LEGION_INVITEOTHERFACTION) {    return false;  }  return true;}  }
class C{  public static void configurePeriodicSync(Context context,Account account){  final String authority=context.getString(R.string.data_provider_authority);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    SyncRequest request=new SyncRequest.Builder().setExtras(Bundle.EMPTY).syncPeriodic(SYNC_INTERVAL,SYNC_FLEXTIME).setSyncAdapter(account,authority).build();    ContentResolver.requestSync(request);  } else {    ContentResolver.addPeriodicSync(account,authority,Bundle.EMPTY,SYNC_INTERVAL);  }  Log.v(LOG_TAG,"Periodic sync configured with " + SYNC_INTERVAL + " interval and "+ SYNC_FLEXTIME+ " flextime");}  }
class C{  protected void endVisitNode(ASTNode node){}  }
class C{  public MessagesDeleteDialogQuery userId(String value){  return unsafeParam("user_id",value);}  }
class C{  @Override public Histogram histogram(){  return hist;}  }
class C{  private void createTreeItemMap(){  if (treeItemMap.isEmpty()) {    StyledLayerDescriptorTreeItem sldTreeItem=new StyledLayerDescriptorTreeItem();    StyleTreeItem styleTreeItem=new StyleTreeItem();    FeatureTypeStyleTreeItem ftsTreeItem=new FeatureTypeStyleTreeItem();    NameLayerTreeItem nameLayerTreeItem=new NameLayerTreeItem();    UserLayerTreeItem userLayerTreeItem=new UserLayerTreeItem();    FillTreeItem fillTreeItem=new FillTreeItem();    StrokeTreeItem strokeTreeItem=new StrokeTreeItem();    treeItemMap.put(StyledLayerDescriptorImpl.class,sldTreeItem);    treeItemMap.put(StyleImpl.class,styleTreeItem);    treeItemMap.put(FeatureTypeStyleImpl.class,ftsTreeItem);    treeItemMap.put(RuleImpl.class,ruleTreeItem);    treeItemMap.put(PointSymbolizerImpl.class,symbolizerTreeItem);    treeItemMap.put(LineSymbolizerImpl.class,symbolizerTreeItem);    treeItemMap.put(PolygonSymbolizerImpl.class,symbolizerTreeItem);    treeItemMap.put(TextSymbolizerImpl.class,symbolizerTreeItem);    treeItemMap.put(NamedLayerImpl.class,nameLayerTreeItem);    treeItemMap.put(UserLayerImpl.class,userLayerTreeItem);    treeItemMap.put(StrokeImpl.class,strokeTreeItem);    treeItemMap.put(FillImpl.class,fillTreeItem);    treeItemMap.put(RasterSymbolizerImpl.class,symbolizerTreeItem);  }}  }
class C{  private static boolean checkVerticalMarginsSnap(ArrayList<SnapCandidate> snapCandidates,ConstraintWidget widget,Point candidatePoint,int margin){  if (widget.getParent() == null) {    return false;  }  int parentY1=widget.getParent().getDrawY() + margin;  int parentY2=widget.getParent().getDrawBottom() - margin;  if (Math.abs(widget.getDrawY() - parentY1) < CONNECTION_SLOPE) {    candidatePoint.y=parentY1;    SnapCandidate candidate=createSnapCandidate(widget,ConstraintAnchor.Type.TOP,0,parentY1);    candidate.padding=margin;    snapCandidates.add(candidate);    return true;  }  if (Math.abs(widget.getDrawY() + widget.getHeight() - parentY2) < CONNECTION_SLOPE) {    candidatePoint.y=parentY2 - widget.getHeight();    SnapCandidate candidate=createSnapCandidate(widget,ConstraintAnchor.Type.BOTTOM,0,parentY2);    candidate.padding=margin;    snapCandidates.add(candidate);    return true;  }  return false;}  }
class C{  protected void parseTimeZone(String buffer,int start,int end,DateTimeData date) throws RuntimeException {  if (start < end) {    if (!isNextCharUTCSign(buffer,start,end)) {      throw new RuntimeException("Error in month parsing");    } else {      getTimeZone(buffer,date,start,end);    }  }}  }
class C{  public static void install(Context context,String filename){  install(context,BIN_DIR_NAME,filename);}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines,String lineEnding,boolean append) throws IOException {  FileOutputStream out=null;  try {    out=openOutputStream(file,append);    final BufferedOutputStream buffer=new BufferedOutputStream(out);    IOUtils.writeLines(lines,lineEnding,buffer,encoding);    buffer.flush();    out.close();  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  public String encrypt(String input){  if (input == null || input.length() == 0) {    return input;  }  byte[] inputBytes=input.getBytes(UTF_8);  byte[] outputBytes=encrypt(inputBytes);  return new String(outputBytes,UTF_8);}  }
class C{  public static int nullSafeHashCode(char[] array){  if (array == null) {    return 0;  }  int hash=INITIAL_HASH;  int arraySize=array.length;  for (int i=0; i < arraySize; i++) {    hash=MULTIPLIER * hash + array[i];  }  return hash;}  }
class C{  @Override public boolean shouldUseFullyQualifiedName(@NotNull PsiFile targetFile,@NotNull String classQualifiedName){  if (classQualifiedName.equals(CLASS_R) || classQualifiedName.startsWith(CLASS_R_PREFIX)) {    return true;  }  int index=classQualifiedName.lastIndexOf('.');  if (index == classQualifiedName.length() - 2 && classQualifiedName.charAt(index + 1) == 'R') {    String pkg=getApplicationPackage(targetFile);    if (pkg != null) {      return !isResourceClassReference(classQualifiedName,pkg + ".R");    }  } else   if (index > 2 && classQualifiedName.charAt(index - 1) == 'R' && classQualifiedName.charAt(index - 2) == '.') {    return classQualifiedName.startsWith(CLASS_R) || ResourceType.getEnum(classQualifiedName.substring(index + 1)) != null;  }  return false;}  }
class C{  public MultiDirectionalSimplex(final double[] steps){  this(steps,DEFAULT_KHI,DEFAULT_GAMMA);}  }
class C{  public void run(String[] args) throws Exception {  final ArgsOptions options=new ArgsOptions(args,this,"Merges reads-to-reference alignments using reference alignment");  options.setVersion(ProgramProperties.getProgramVersion());  options.setLicense("Copyright (C) 2016 Daniel H. Huson. This program comes with ABSOLUTELY NO WARRANTY.");  options.setAuthors("Daniel H. Huson");  final String referencesAlignmentFile=options.getOptionMandatory("-ref","refInput","file containing multiple alignment of references","");  String[] readsAlignmentFiles=options.getOption("-rea","readAlignmentsFile","Files containing alignments of reads to references",new String[0]);  String readsFile=options.getOption("-r","readsFile","File containing all reads","");  final boolean dna2ProteinMode=options.getOption("-d2p","dna2prot","Aligned reads are DNA, references are protein",false);  final String outputFile=options.getOption("-o","output","Output file","");  final OutputFormat outputFormat=OutputFormat.valueOf(options.getOption("-f","format","Output format",OutputFormat.values(),OutputFormat.MSA.toString()));  final String referenceName=options.getOption("-n","name","Name of references",Basic.getFileBaseName(Basic.getFileNameWithoutPath(referencesAlignmentFile)));  options.done();  if (outputFormat == OutputFormat.BlastXText)   throw new IOException("Option '--format BlastXText': not implemented");  if (outputFormat == OutputFormat.BlastXText && !dna2ProteinMode)   throw new IOException("Option '--format BlastXText' requires option '--dna2prot'");  if (outputFormat == OutputFormat.BlastXText && readsFile.length() == 0)   throw new IOException("Option '--format BlastXText' requires option '--readsFile'");  if (readsAlignmentFiles.length == 1 && (new File(readsAlignmentFiles[0]).isDirectory())) {    File[] files=(new File(readsAlignmentFiles[0])).listFiles();    if (files != null) {      List<String> names=new LinkedList<>();      for (      File file : files) {        if (file.isFile() && file.canRead() && !file.getName().startsWith("."))         names.add(file.getPath());      }      readsAlignmentFiles=names.toArray(new String[names.size()]);    }  }  final Map<String,String> referencesGlobalAlignment=new HashMap<>();  final List<String> referenceNames=new LinkedList<>();  int refGlobalAlignmentLength=-1;  try (FileInputIterator it=new FileInputIterator(referencesAlignmentFile)){    final ProgressPercentage progress=new ProgressPercentage("Processing file: " + referencesAlignmentFile,it.getMaximumProgress());    String name=null;    final List<String> sequences=new LinkedList<>();    while (it.hasNext()) {      final String aLine=it.next();      if (aLine.startsWith(">")) {        if (name != null) {          final String alignedSequence=Basic.toString(sequences,"");          if (refGlobalAlignmentLength == -1)           refGlobalAlignmentLength=alignedSequence.length(); else           if (refGlobalAlignmentLength != alignedSequence.length())           throw new IOException("Aligned reference sequences have different lengths: " + refGlobalAlignmentLength + " vs "+ alignedSequence.length());          referencesGlobalAlignment.put(name,alignedSequence);        }        name=Basic.getWordAfter(">",aLine);        if (referencesGlobalAlignment.keySet().contains(name))         throw new IOException("Reference name occurs more than once: " + name);        referenceNames.add(name);        sequences.clear();        progress.setProgress(it.getProgress());      } else       sequences.add(aLine.replaceAll("\\s+",""));    }    if (name != null) {      final String alignedSequence=Basic.toString(sequences,"");      referencesGlobalAlignment.put(name,alignedSequence);      if (refGlobalAlignmentLength == -1)       refGlobalAlignmentLength=alignedSequence.length(); else       if (refGlobalAlignmentLength != alignedSequence.length())       throw new IOException("Aligned reference sequences have different lengths: " + refGlobalAlignmentLength + " vs "+ alignedSequence.length());    }    progress.close();    System.err.println("Input: " + referencesGlobalAlignment.size());  }   if (referencesGlobalAlignment.size() <= 5) {    System.err.println("Reference alignment (" + referencesGlobalAlignment.size() + " x "+ refGlobalAlignmentLength+ "):");    for (    String name : referenceNames) {      System.err.println(referencesGlobalAlignment.get(name));    }  }  final Map<String,String> readsGlobalAlignment=new HashMap<>();  final List<String> readNames=new LinkedList<>();  final int readGlobalAlignmentLength=(dna2ProteinMode ? 3 * refGlobalAlignmentLength : refGlobalAlignmentLength);  for (  String readsAlignmentFile : readsAlignmentFiles) {    try (FileInputIterator it=new FileInputIterator(readsAlignmentFile)){      final ProgressPercentage progress=new ProgressPercentage("Processing file: " + readsAlignmentFile,it.getMaximumProgress());      String refName=null;      String refSequence=null;      String readName=null;      String readSequence;      final List<String> sequences=new LinkedList<>();      while (it.hasNext()) {        final String aLine=it.next();        if (aLine.startsWith(">")) {          final String name=Basic.getWordAfter(">",aLine);          final boolean isRef=referencesGlobalAlignment.keySet().contains(name);          if (refName == null) {            refName=name;          } else           if (readName == null) {            if (refSequence == null)             refSequence=Basic.toString(sequences,"");            readName=name;            readNames.add(readName);          } else {            readSequence=placeBracketsAroundInsertionsInReadSequence(dna2ProteinMode,refSequence,Basic.toString(sequences,""));            String globallyAlignedReference=referencesGlobalAlignment.get(refName);            if (globallyAlignedReference == null)             throw new IOException("Reference sequence not found: " + refName);            String globallyAligned=computeGlobalReadAlignment(dna2ProteinMode,globallyAlignedReference,readSequence,readGlobalAlignmentLength);            if (globallyAligned.length() != readGlobalAlignmentLength)             throw new IOException("Read global alignment has wrong length: " + globallyAligned.length() + ", should be: "+ readGlobalAlignmentLength);            readsGlobalAlignment.put(readName,globallyAligned);            if (isRef) {              refName=name;              refSequence=null;              readName=null;            } else {              readName=name;              readNames.add(readName);            }          }          sequences.clear();        } else {          sequences.add(parseAlignedSequence(aLine));        }        progress.setProgress(it.getProgress());      }      if (readName != null) {        readSequence=placeBracketsAroundInsertionsInReadSequence(dna2ProteinMode,refSequence,Basic.toString(sequences,""));        String globallyAligned=computeGlobalReadAlignment(dna2ProteinMode,referencesGlobalAlignment.get(refName),readSequence,readGlobalAlignmentLength);        readsGlobalAlignment.put(readName,globallyAligned);      }      progress.close();    }   }  if (readsGlobalAlignment.size() <= 5) {    System.err.println("Reads alignment (" + readsGlobalAlignment.size() + " x "+ readGlobalAlignmentLength+ "):");    for (    String name : readNames) {      System.err.println(readsGlobalAlignment.get(name));    }  }  Map<String,String> readName2ReadSequence=new HashMap<>();  if (readsFile.length() > 0) {    readNames.clear();    try (FastAFileIterator it=new FastAFileIterator(readsFile)){      while (it.hasNext()) {        Pair<String,String> pair=it.next();        String name=Basic.getFirstWord(Basic.swallowLeadingGreaterSign(pair.getFirst()));        readNames.add(name);        if (outputFormat == OutputFormat.BlastXText)         readName2ReadSequence.put(name,pair.get2());      }    }   }  try (final Writer w=(outputFile.length() == 0 ? new OutputStreamWriter(System.out) : new FileWriter(outputFile))){    ProgressPercentage progress=new ProgressPercentage("Writing file: " + outputFile,-1);switch (outputFormat) {case MSA:{        for (        String name : readNames) {          if (readsGlobalAlignment.get(name) != null)           w.write(String.format(">%s\n%s\n",name,readsGlobalAlignment.get(name)));        }        break;      }case BlastNText:{      w.write("BLASTN computed by MergeAlignments\n\n");      String referenceSequence=computeConsensus(readsGlobalAlignment,'N');      for (      String name : readNames) {        if (readsGlobalAlignment.get(name) != null) {          w.write("Query= " + name + "\n\n");          w.write(getPairwiseBlastNAlignment(referenceName,referenceSequence,readsGlobalAlignment.get(name)));        }      }      break;    }case BlastXText:{    w.write("BLASTX computed by MergeAlignments\n\n");    String referenceSequence=computeConsensus(referencesGlobalAlignment,'X');    for (    String name : readNames) {      if (readsGlobalAlignment.get(name) != null) {        w.write("Query= " + name + "\n\n");        w.write(getPairwiseBlastXAlignment(referenceName,referenceSequence,readsGlobalAlignment.get(name),readName2ReadSequence.get(name)));      }    }    break;  }}progress.close();} }  }
class C{  public NumericHaving withAggregation(String aggregation){  return new NumericHaving(getType(),aggregation,getValue());}  }
class C{  public <RES>MatcherNext<RES,ARG> as(Class<RES> dummy){  return new MatcherNext<>(arg);}  }
class C{  public boolean isGlobalFindable(){  return table.getGrid().getRowCount() > 0;}  }
class C{  public void stop(String name){  getTimer(name).stop(verbose);}  }
class C{  public static byte indicator(final byte x){  return (x >= ZB) ? PB : NB;}  }
class C{  public JSONArray put(boolean value){  put(value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public Matrix3f(float m00,float m01,float m02,float m10,float m11,float m12,float m20,float m21,float m22){  this.m00=m00;  this.m01=m01;  this.m02=m02;  this.m10=m10;  this.m11=m11;  this.m12=m12;  this.m20=m20;  this.m21=m21;  this.m22=m22;}  }
class C{  public void flattenHierarchy(ConstraintWidgetContainer root){  ArrayList<ConstraintWidgetContainer> containers=gatherContainers(root);  while (containers.size() > 0) {    for (    ConstraintWidgetContainer container : containers) {      removeContainer(container);    }    containers=gatherContainers(root);  }}  }
class C{  public UsersGetSubscriptionsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public static byte[] decode(byte[] data,String pri_key){  try {    Cipher cipher=Cipher.getInstance("RSA/ECB/PKCS1Padding");    java.security.Key k=getPrivateKey(pri_key);    cipher.init(Cipher.DECRYPT_MODE,k);    byte[] deBytes=cipher.doFinal(data);    return deBytes;  } catch (  Exception e) {    log.error(pri_key,e);  }  return null;}  }
class C{  void print(cp_info constant_pool[]){  G.v().out.println(prototype(constant_pool));  ByteCode.showCode(instructions,constant_pool);}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  public void start(){  doGarbageCollecting();  startTime=nanoTime();  if (hasStarted)   throw new RuntimeException("timer " + name + " has already been started!");  hasStarted=true;  if (!G.v().Timer_isGarbageCollecting) {    G.v().Timer_outstandingTimers.add(this);  }}  }
class C{  public void writeString(String str) throws IOException {  if (str == null)   writeInt(0); else {    if (useCompression && str.length() >= Compressor.MIN_SIZE_FOR_DEFLATION) {      byte[] bytes=compressor.deflateString2ByteArray(str);      writeInt(-bytes.length);      io.write(bytes,0,bytes.length);    } else {      byte[] bytes=str.getBytes("UTF-8");      writeInt(bytes.length);      io.write(bytes,0,bytes.length);    }  }}  }
class C{  public BoardEditCommentQuery editComment(UserActor actor,int groupId,int topicId,int commentId){  return new BoardEditCommentQuery(getClient(),actor,groupId,topicId,commentId);}  }
class C{  public static Color fromBGR(int bgr) throws IllegalArgumentException {  Validate.isTrue((bgr >> 24) == 0,"Extrenuous data in: ",bgr);  return fromBGR(bgr >> 16 & BIT_MASK,bgr >> 8 & BIT_MASK,bgr >> 0 & BIT_MASK);}  }
class C{  public boolean isEmpty(){  return mSize <= 0;}  }
class C{  public void flush(LogSeqNum lsn){  logMgrLock.lock();  try {    if (lsn.compareTo(lastFlushedLsn) >= 0)     flush();  }  finally {    logMgrLock.unlock();  }}  }
class C{  public JSONArray put(int index,Map value) throws JSONException {  put(index,new JSONObject(value));  return this;}  }
class C{  public static void showError(String message,long milliseconds){  showNotification(title,message,Mode.error,Pos.BOTTOM_LEFT,milliseconds);}  }
class C{  public LikesIsLikedQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  public String post() throws HttpClientException {  return sendHttpRequest("post");}  }
class C{  protected void addRow(Object[] carbonTuple) throws SliceMergerException {  Object[] rowInWritableFormat;  rowInWritableFormat=tupleConvertor.getObjectArray(carbonTuple);  try {    this.dataHandler.addDataToStore(rowInWritableFormat);  } catch (  CarbonDataWriterException e) {    throw new SliceMergerException("Problem in merging the slice",e);  }}  }
class C{  public <T>T recall(String pathName,Class<T> type) throws IOException {  return recall(new Path(pathName),type);}  }
class C{  public void addException(Access node){  List<Access> list=(parent == null || state == null) ? getExceptionListNoTransform() : getExceptionList();  list.addChild(node);}  }
class C{  public void java_lang_System_mapLibraryName(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getStringObject());}  }
class C{  private void siftUp(Item item){  Item parent=getParent(item);  while (item.idx > 0 && parent.position.compareTo(item.position) > 0) {    swap(item,parent);    parent=getParent(item);  }}  }
class C{  public boolean equivTo(Object c){  if (sourcename instanceof Value)   return (c instanceof AbstractDataSource && ((Value)sourcename).equivTo(((AbstractDataSource)c).sourcename));  return (c instanceof AbstractDataSource && ((AbstractDataSource)c).sourcename.equals(sourcename));}  }
class C{  public XSCMLeaf(int type,Object leaf,int id,int position){  super(type);  fLeaf=leaf;  fParticleId=id;  fPosition=position;}  }
class C{  public void addFiles(String fileUris,String group,Host host){  ParamValidationUtil.validateParamNotNull(fileUris,"fileUris");  ParamValidationUtil.validateParamNotNull(group,"group");  Host cleanHost=UtilMethods.isSet(host) ? host : HostTools.getCurrentHost(request);  for (  String fileUri : StringListUtil.getCleanStringList(fileUris)) {    FileAsset fileAsset=FileTools.getFileAssetByURI(fileUri,cleanHost,isLiveMode);    if (fileAsset != null) {      if (!fileMap.containsKey(group)) {        fileMap.put(group,new LinkedHashSet<FileAsset>());      }      fileMap.get(group).add(fileAsset);    }  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set labelColor=");  Color color=null;  if (np.peekMatchIgnoreCase("null"))   np.matchIgnoreCase("null"); else   color=np.getColor();  np.matchIgnoreCase(";");  if (getViewer() instanceof GraphView) {    boolean changed=false;    GraphView viewer=(GraphView)getViewer();    for (    Node v : viewer.getSelectedNodes()) {      if (viewer.isLabelVisible(v)) {        viewer.setLabelColor(v,color);        changed=true;      }    }    for (    Edge edge : viewer.getSelectedEdges()) {      if (viewer.isLabelVisible(edge)) {        viewer.setLabelColor(edge,color);        changed=true;      }    }    if (changed) {      viewer.repaint();    }  }}  }
class C{  public static void testValidity(Object o) throws JSONException {  if (o != null) {    if (o instanceof Double) {      if (((Double)o).isInfinite() || ((Double)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    } else     if (o instanceof Float) {      if (((Float)o).isInfinite() || ((Float)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    }  }}  }
class C{  public MessagesGetHistoryQuery(VkApiClient client,Actor actor){  super(client,"messages.getHistory",GetHistoryResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public void addFooter(@LayoutRes int layoutId,Object data){  int absoluteFootersCount=getAbsoluteFootersCount();  if (absoluteFootersCount > 0) {    int position=getItemCount() <= absoluteFootersCount ? 0 : getItemCount() - absoluteFootersCount;    mInserts.add(position,new Insertion(layoutId,data,Insertion.TYPE_FOOTER));    getItems().add(position,null);    mFootersCount+=1;  } else {    mInserts.add(new Insertion(layoutId,data,Insertion.TYPE_FOOTER));    getItems().add(null);    mFootersCount+=1;  }  notifyIfNeed();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  final Director dir=getDir();  final MainViewer viewer=dir.getMainViewer();  final Document doc=dir.getDocument();  if (!ProgramProperties.isUseGUI() || doc.neverOpenedReads) {    doc.neverOpenedReads=false;    np.matchIgnoreCase("import blastFile=");    LinkedList<String> blastFiles=new LinkedList<>();    while (true) {      boolean comma=false;      String name=np.getAbsoluteFileName();      if (name.endsWith(",")) {        name=name.substring(0,name.length() - 1);        comma=true;      }      blastFiles.add(name);      if (!comma && np.peekMatchIgnoreCase(",")) {        np.matchIgnoreCase(",");        comma=true;      }      if (!comma && np.peekMatchAnyTokenIgnoreCase("fastaFile readFile meganFile ;"))       break;    }    LinkedList<String> readsFiles=new LinkedList<>();    if (np.peekMatchAnyTokenIgnoreCase("fastaFile readFile")) {      np.matchAnyTokenIgnoreCase("fastaFile readFile");      np.matchIgnoreCase("=");      while (true) {        boolean comma=false;        String name=np.getAbsoluteFileName();        if (name.endsWith(",")) {          name=name.substring(0,name.length() - 1);          comma=true;        }        readsFiles.add(name);        if (!comma && np.peekMatchIgnoreCase(",")) {          np.matchIgnoreCase(",");          comma=true;        }        if (!comma && np.peekMatchAnyTokenIgnoreCase("meganFile ;"))         break;      }    }    np.matchIgnoreCase("meganFile=");    final String meganFileName=np.getAbsoluteFileName();    boolean useCompression=true;    if (np.peekMatchIgnoreCase("useCompression")) {      np.matchIgnoreCase("useCompression=");      useCompression=np.getBoolean();    }    np.matchIgnoreCase("format=");    final BlastFileFormat format=BlastFileFormat.valueOfIgnoringCase(np.getWordMatchesIgnoringCase(Basic.toString(BlastFileFormat.valuesExceptUnknown()," ")));    np.matchIgnoreCase("mode=");    doc.setBlastMode(BlastMode.valueOfIgnoringCase(np.getWordMatchesIgnoringCase(Basic.toString(BlastMode.valuesExceptUnknown()," "))));    int maxMatchesPerRead=25;    if (np.peekMatchIgnoreCase("maxMatches")) {      np.matchIgnoreCase("maxMatches=");      maxMatchesPerRead=np.getInt(0,Integer.MAX_VALUE);    }    if (np.peekMatchIgnoreCase("minScore")) {      np.matchIgnoreCase("minScore=");      doc.setMinScore((float)np.getDouble(0,Float.MAX_VALUE));    }    if (np.peekMatchIgnoreCase("maxExpected")) {      np.matchIgnoreCase("maxExpected=");      doc.setMaxExpected((float)np.getDouble(0,Float.MAX_VALUE));    }    if (np.peekMatchIgnoreCase("minPercentIdentity")) {      np.matchIgnoreCase("minPercentIdentity=");      doc.setMinPercentIdentity((float)np.getDouble(0,Float.MAX_VALUE));    }    if (np.peekMatchIgnoreCase("topPercent")) {      np.matchIgnoreCase("topPercent=");      doc.setTopPercent((float)np.getDouble(0,100));    }    if (np.peekMatchIgnoreCase("minSupportPercent")) {      np.matchIgnoreCase("minSupportPercent=");      doc.setMinSupportPercent((float)np.getDouble(0,100));    } else     doc.setMinSupportPercent(0);    if (np.peekMatchIgnoreCase("minSupport")) {      np.matchIgnoreCase("minSupport=");      doc.setMinSupport(np.getInt(1,Integer.MAX_VALUE));    } else     doc.setMinScore(1);    if (np.peekMatchIgnoreCase("weightedLCA")) {      np.matchIgnoreCase("weightedLCA=");      getDoc().setWeightedLCA(np.getBoolean());      ProgramProperties.put("weightedLCA",doc.isWeightedLCA());    }    if (np.peekMatchIgnoreCase("weightedLCAPercent")) {      np.matchIgnoreCase("weightedLCAPercent=");      getDoc().setWeightedLCAPercent((float)np.getDouble(1,100));      ProgramProperties.put("weightedLCAPercent",doc.getWeightedLCAPercent());    }    if (np.peekMatchIgnoreCase("minComplexity")) {      np.matchIgnoreCase("minComplexity=");      doc.setMinComplexity((float)np.getDouble(-1.0,1.0));    }    if (np.peekMatchIgnoreCase("useIdentityFilter")) {      np.matchIgnoreCase("useIdentityFilter=");      getDoc().setUseIdentityFilter(np.getBoolean());    }    Collection<String> known=ClassificationManager.getAllSupportedClassifications();    if (np.peekMatchIgnoreCase("fNames=")) {      doc.getActiveViewers().clear();      np.matchIgnoreCase("fNames=");      while (!np.peekMatchIgnoreCase(";")) {        String token=np.getWordRespectCase();        if (!known.contains(token)) {          np.pushBack();          break;        }        doc.getActiveViewers().add(token);      }      doc.getActiveViewers().add(Classification.Taxonomy);    }    if (np.peekMatchIgnoreCase("paired")) {      np.matchIgnoreCase("paired=");      boolean paired=np.getBoolean();      doc.setPairedReads(paired);      if (paired) {        np.matchIgnoreCase("pairSuffixLength=");        doc.setPairedReadSuffixLength(np.getInt(0,10));        System.err.println("Assuming paired-reads distinguishing suffix has length: " + doc.getPairedReadSuffixLength());      }    }    boolean hasMagnitudes=false;    if (np.peekMatchIgnoreCase("hasMagnitudes")) {      np.matchIgnoreCase("hasMagnitudes=");      hasMagnitudes=np.getBoolean();      ReadMagnitudeParser.setEnabled(hasMagnitudes);      ProgramProperties.put("allow-read-weights",hasMagnitudes);    }    String description=null;    if (np.peekMatchIgnoreCase("description")) {      np.matchIgnoreCase("description=");      description=np.getWordFileNamePunctuation().trim();    }    np.matchIgnoreCase(";");    ReadMagnitudeParser.setUnderScoreEnabled(ProgramProperties.get("allow-read-weights-underscore",false));    if (meganFileName == null)     throw new IOException("Must specify MEGAN file");    if (format == null)     throw new IOException("Failed to determine file format");    File meganFile=new File(meganFileName);    if (meganFile.exists()) {      if (meganFile.delete())       System.err.println("Deleting existing file: " + meganFile.getPath());    }    final String[] blastFileNames=blastFiles.toArray(new String[blastFiles.size()]);    final String[] readFileNames=readsFiles.toArray(new String[readsFiles.size()]);    doc.getMeganFile().setFile(meganFileName,MeganFile.Type.RMA6_FILE);    RMA6FromBlastCreator rma6Creator=new RMA6FromBlastCreator(ProgramProperties.getProgramName(),format,doc.getBlastMode(),blastFileNames,readFileNames,doc.getMeganFile().getFileName(),useCompression,doc,maxMatchesPerRead,hasMagnitudes);    rma6Creator.parseFiles(doc.getProgressListener());    doc.loadMeganFile();    if (description != null && description.length() > 0) {      description=description.replaceAll("^ +| +$|( )+","$1");      final String sampleName=Basic.replaceFileSuffix(Basic.getFileNameWithoutPath(doc.getMeganFile().getFileName()),"");      doc.getSampleAttributeTable().put(sampleName,SampleAttributeTable.DescriptionAttribute,description);    }    MeganProperties.addRecentFile(meganFileName);    if (doc.getNumberOfReads() == 0)     NotificationsInSwing.showWarning(getViewer().getFrame(),"No reads found");    if (dir.getViewerByClass(InspectorWindow.class) != null)     ((InspectorWindow)dir.getViewerByClass(InspectorWindow.class)).clear();    viewer.setCollapsedIds(TaxonomyData.getTree().getAllAtLevel(3));    viewer.setDoReset(true);    viewer.setDoReInduce(true);    ProgramProperties.put(MeganProperties.DEFAULT_PROPERTIES,doc.getParameterString());  } else {    final Director newDir=Director.newProject();    newDir.getMainViewer().getFrame().setVisible(true);    newDir.getMainViewer().setDoReInduce(true);    newDir.getMainViewer().setDoReset(true);    newDir.execute(np.getQuotedTokensRespectCase(null,";") + ";",newDir.getMainViewer().getCommandManager());  }}  }
class C{  public static StorableTimeFence inWednesdayInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){  return new StorableTimeFence(WEDNESDAY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis);}  }
class C{  private List<ProcessChange> updateControlTagInformation(final ConfigurationElement element,final Equipment equipment){  List<ProcessChange> changes=new ArrayList<ProcessChange>(3);  Long processId=equipment.getProcessId();  Long equipmentId=equipment.getId();  if (equipment.getAliveTagId() != null) {    ControlTag aliveTagCopy=controlCache.getCopy(equipment.getAliveTagId());    if (aliveTagCopy != null) {      setEquipmentId((ControlTagCacheObject)aliveTagCopy,equipmentId,processId);      if (aliveTagCopy.getAddress() != null) {        IChange toAdd=new DataTagAdd(element.getSequenceId(),equipmentId,controlTagFacade.generateSourceDataTag(aliveTagCopy));        ConfigurationElementReport report=new ConfigurationElementReport(Action.CREATE,Entity.CONTROLTAG,aliveTagCopy.getId());        ProcessChange change=new ProcessChange(processId,toAdd);        change.setNestedSubReport(report);        changes.add(change);      }    } else {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,String.format("No Alive tag (%s) found for equipment #%d (%s).",equipment.getAliveTagId(),equipment.getId(),equipment.getName()));    }  }  ControlTag commFaultTagCopy=controlCache.getCopy(equipment.getCommFaultTagId());  if (commFaultTagCopy != null) {    setEquipmentId((ControlTagCacheObject)commFaultTagCopy,equipmentId,processId);  } else {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,String.format("No CommFault tag (%s) found for equipment #%d (%s).",equipment.getCommFaultTagId(),equipment.getId(),equipment.getName()));  }  ControlTag statusTagCopy=controlCache.getCopy(equipment.getStateTagId());  if (statusTagCopy != null) {    setEquipmentId((ControlTagCacheObject)statusTagCopy,equipmentId,processId);  } else {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,String.format("No Status tag (%s) found for equipment #%d (%s).",equipment.getStateTagId(),equipment.getId(),equipment.getName()));  }  return changes;}  }
class C{  public static boolean isHighSurrogate(int c){  return (0xD800 <= c && c <= 0xDBFF);}  }
class C{  public static final Object[] resize(Object[] a,int size){  if (a.length >= size)   return a;  Object[] b=new Object[size];  System.arraycopy(a,0,b,0,a.length);  return b;}  }
class C{  private static Unit insertGotoAfter(Chain<Unit> unitChain,Unit node,Unit target){  Unit newGoto=Jimple.v().newGotoStmt(target);  unitChain.insertAfter(newGoto,node);  return newGoto;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Silence_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200283,skillname);}  }
class C{  private String readMemberBasedOnNoDictionaryVal(DimColumnResolvedFilterInfo dimColumnEvaluatorInfo,VariableLengthDimensionDataChunk dimensionColumnDataChunk,int index){  byte[] noDictionaryVals;  if (null != dimensionColumnDataChunk.getAttributes().getInvertedIndexesReverse()) {    noDictionaryVals=dimensionColumnDataChunk.getCompleteDataChunk().get(dimensionColumnDataChunk.getAttributes().getInvertedIndexesReverse()[index]);  } else {    noDictionaryVals=dimensionColumnDataChunk.getCompleteDataChunk().get(index);  }  return new String(noDictionaryVals,Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));}  }
class C{  public double searchDurInCartTree(HTSModel m,FeatureVector fv,HMMData htsData,double diffdur){  return searchDurInCartTree(m,fv,htsData,false,false,diffdur);}  }
class C{  protected boolean isEnabledForAddedResources(){  return false;}  }
class C{  protected void doOptimizedEval(final Semaphore sSem,PrintStream pOverallResultsOutStream,int NGramSize_Min,int NGramSize_Max,int Dmax,String sSummaryDir,String sModelDir,int iThreads,String DocumentClass,String ComparatorClass,boolean bSilent,boolean bProgress){  if (pOverallResultsOutStream == null)   pOverallResultsOutStream=System.out;  ThreadList tqRobin=new ThreadList(iThreads);  DocumentSet dsSummarySet=new DocumentSet(sSummaryDir,1.0);  final DocumentSet dsModelSet=new DocumentSet(sModelDir,1.0);  dsSummarySet.createSets();  dsModelSet.createSets();  HashMap hmCategoryResults=new HashMap();  if (dsSummarySet.getTrainingSet().size() * dsModelSet.getTrainingSet().size() == 0) {    System.err.println("Empty document set...");    System.exit(-1);  }  pOverallResultsOutStream.print("Theme\t");  pOverallResultsOutStream.print("SystemID\t");  pOverallResultsOutStream.print("GraphCooccurence\t");  pOverallResultsOutStream.print("GraphValue\t");  pOverallResultsOutStream.print("GraphSize\t");  pOverallResultsOutStream.print("HistoContainmentSimilarity\t");  pOverallResultsOutStream.print("HistoValue\t");  pOverallResultsOutStream.print("HistoSize\t");  pOverallResultsOutStream.print("OverallSimil\t");  pOverallResultsOutStream.println();  int iTotal=dsSummarySet.getTrainingSet().size();  int iCur=0;  Iterator iCatIter=dsModelSet.getCategories().iterator();  Date dStart=new Date();  while (iCatIter.hasNext()) {    String sCurCategory=(String)iCatIter.next();    if (!bSilent)     System.err.println("Processing category:" + sCurCategory);    hModelCache.clear();    hNModelCache.clear();    List lModelFiles=dsModelSet.getFilesFromCategory(sCurCategory);    Iterator iIter=dsSummarySet.getFilesFromCategory(sCurCategory,dsSummarySet.FROM_TRAINING_SET).iterator();    while (iIter.hasNext()) {      final CategorizedFileEntry cfeCur=(CategorizedFileEntry)iIter.next();      Runnable r=new GenericCalcSimilRunner(NGramSize_Min,NGramSize_Max,Dmax,cfeCur,lModelFiles,sSem,pOverallResultsOutStream,bSilent,this,DocumentClass,ComparatorClass,Progress);      while (!tqRobin.addThreadFor(r))       Thread.yield();      Date dCurTime=new Date();      long lRemaining=(iTotal - iCur + 1) * (long)((double)(dCurTime.getTime() - dStart.getTime()) / iCur);      if (!bSilent || (bProgress))       System.err.print("Completed " + String.format("%7.4f",(double)iCur++ / iTotal * 100) + "%"+ String.format(" - Remaining %50s\r",gr.demokritos.iit.jinsect.utils.millisToMinSecString(lRemaining)));    }  }  try {    tqRobin.waitUntilCompletion();  } catch (  InterruptedException ex) {    System.err.println("Could not complete execution of all tasks.");    ex.printStackTrace(System.err);  }  System.err.println("Completed 100%. A total of " + iTotal + " comparisons were "+ "performed.");}  }
class C{  protected void undeferChildren(Node node){  Node top=node;  while (null != node) {    if (((NodeImpl)node).needsSyncData()) {      ((NodeImpl)node).synchronizeData();    }    NamedNodeMap attributes=node.getAttributes();    if (attributes != null) {      int length=attributes.getLength();      for (int i=0; i < length; ++i) {        undeferChildren(attributes.item(i));      }    }    Node nextNode=null;    nextNode=node.getFirstChild();    while (null == nextNode) {      if (top.equals(node))       break;      nextNode=node.getNextSibling();      if (null == nextNode) {        node=node.getParentNode();        if ((null == node) || (top.equals(node))) {          nextNode=null;          break;        }      }    }    node=nextNode;  }}  }
class C{  public PlacesCheckinQuery friendsOnly(Boolean value){  return unsafeParam("friends_only",value);}  }
class C{  public MonsterToQuestCursor queryMonsterToQuestMonster(long id){  QueryHelper qh=new QueryHelper();  qh.Distinct=true;  qh.Table=S.TABLE_MONSTER_TO_QUEST;  qh.Columns=null;  qh.Selection="mtq." + S.COLUMN_MONSTER_TO_QUEST_MONSTER_ID + " = ? ";  qh.SelectionArgs=new String[]{"" + id};  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy="CASE q." + S.COLUMN_QUESTS_HUB + " WHEN 'Village' THEN 0 WHEN 'Guild' THEN 1 WHEN 'Permit' THEN 2 ELSE (3||q."+ S.COLUMN_QUESTS_HUB+ ") END, "+ "q."+ S.COLUMN_QUESTS_STARS+ " ASC";  qh.Limit=null;  return new MonsterToQuestCursor(wrapJoinHelper(builderMonsterToQuest(qh.Distinct),qh));}  }
class C{  public static float handle(float digSpeed,World world,IBlockState state,BlockPos pos){  DigSpeed event=new DigSpeed(digSpeed,world,state,pos);  return !OpenModLoader.getEventBus().post(event) || event.getDigSpeed() < 0.0F ? 0.0F : event.getDigSpeed();}  }
class C{  private static void doCopyDirectory(File srcDir,File destDir,FileFilter filter,boolean preserveFileDate,List<String> exclusionList) throws IOException {  File[] srcFiles=filter == null ? srcDir.listFiles() : srcDir.listFiles(filter);  if (srcFiles == null) {    throw new IOException("Failed to list contents of " + srcDir);  }  if (destDir.exists()) {    if (destDir.isDirectory() == false) {      throw new IOException("Destination '" + destDir + "' exists but is not a directory");    }  } else {    if (!destDir.mkdirs() && !destDir.isDirectory()) {      throw new IOException("Destination '" + destDir + "' directory cannot be created");    }  }  if (destDir.canWrite() == false) {    throw new IOException("Destination '" + destDir + "' cannot be written to");  }  for (  File srcFile : srcFiles) {    File dstFile=new File(destDir,srcFile.getName());    if (exclusionList == null || !exclusionList.contains(srcFile.getCanonicalPath())) {      if (srcFile.isDirectory()) {        doCopyDirectory(srcFile,dstFile,filter,preserveFileDate,exclusionList);      } else {        doCopyFile(srcFile,dstFile,preserveFileDate);      }    }  }  if (preserveFileDate) {    destDir.setLastModified(srcDir.lastModified());  }}  }
class C{  public static R1Interval fromPointPair(double p1,double p2){  if (p1 <= p2) {    return new R1Interval(p1,p2);  } else {    return new R1Interval(p2,p1);  }}  }
class C{  public void addDoubleOpt(String key,String val){  addSingleOpt(key);  addSingleOpt(val);}  }
class C{  @RequestMapping(value="/",method=POST,produces=APPLICATION_JSON_VALUE) public ResponseEntity<RoleDTO> create(@RequestBody RoleDTO roleDTO) throws URISyntaxException {  log.debug("Create RoleDTO : {}",roleDTO);  if (roleDTO.isIdSet()) {    return ResponseEntity.badRequest().header("Failure","Cannot create Role with existing ID").body(null);  }  RoleDTO result=roleDTOService.save(roleDTO);  return ResponseEntity.created(new URI("/api/roles/" + result.id)).body(result);}  }
class C{  @Override public void onStreamReceived(Session session,Stream stream){  if (mSubscriber == null) {    startSubscribing(stream);    sendEvent(Events.EVENT_SUBSCRIBE_START,Arguments.createMap());  }}  }
class C{  @Nullable public StringLiteral findChildReferenceToTarget(final FuncallExpression targetRule){  final StringLiteral[] child=new StringLiteral[1];  Processor<StringLiteral> processor=null;  PsiUtils.processChildrenOfType(this,processor,StringLiteral.class);  return child[0];}  }
class C{  private void zzDoEOF() throws java.io.IOException {  if (!zzEOFDone) {    zzEOFDone=true;    yyclose();  }}  }
class C{  private static void bitReversalShuffle2(double[] a,double[] b){  final int n=a.length;  assert b.length == n;  final int halfOfN=n >> 1;  int j=0;  for (int i=0; i < n; i++) {    if (i < j) {      double temp=a[i];      a[i]=a[j];      a[j]=temp;      temp=b[i];      b[i]=b[j];      b[j]=temp;    }    int k=halfOfN;    while (k <= j && k > 0) {      j-=k;      k>>=1;    }    j+=k;  }}  }
class C{  public LibraryObject(String title,String subtitle,String uri){  this.title=title;  this.subtitle=subtitle;  this.uri=uri;}  }
class C{  public void updateEnableStateSwingItems(){  if (SwingUtilities.isEventDispatchThread())   super.updateEnableState();}  }
class C{  @Override public void endElement(QName element,Augmentations augs) throws XNIException {}  }
class C{  @Override public void addRelations(Task task,Iterable<ObjectId> projectIds,String fieldName){  List<Project> newProjectList=new LinkedList<>();  Iterable<Project> projectsToAdd=projectRepository.findAll(projectIds,null);  for (  Project project : projectsToAdd) {    newProjectList.add(project);  }  try {    if (PropertyUtils.getProperty(task,fieldName) != null) {      Iterable<Project> projects=(Iterable<Project>)PropertyUtils.getProperty(task,fieldName);      for (      Project project : projects) {        newProjectList.add(project);      }    }  } catch (  Exception e) {    throw new RuntimeException(e);  }  try {    PropertyUtils.setProperty(task,fieldName,newProjectList);  } catch (  Exception e) {    throw new RuntimeException(e);  }  taskRepository.save(task);}  }
class C{  private void reduceInstructions(){  for (int i=0; i < this.insns.size() - 1; i++) {    Insn curInsn=this.insns.get(i);    if (curInsn instanceof AddressInsn)     continue;    if (!curInsn.getOpcode().name.startsWith("move/"))     continue;    Insn nextInsn=null;    int nextIndex=-1;    for (int j=i + 1; j < this.insns.size(); j++) {      Insn candidate=this.insns.get(j);      if (candidate instanceof AddressInsn)       continue;      nextInsn=candidate;      nextIndex=j;      break;    }    if (nextInsn == null || !nextInsn.getOpcode().name.startsWith("move/"))     continue;    if (nextIndex == this.insns.size() - 1)     continue;    Register firstTarget=curInsn.getRegs().get(0);    Register firstSource=curInsn.getRegs().get(1);    Register secondTarget=nextInsn.getRegs().get(0);    Register secondSource=nextInsn.getRegs().get(1);    if (firstTarget.equals(secondSource) && secondTarget.equals(firstSource)) {      Stmt origStmt=insnStmtMap.get(nextInsn);      if (origStmt == null || !isJumpTarget(origStmt)) {        Insn nextStmt=this.insns.get(nextIndex + 1);        insns.remove(nextIndex);        if (origStmt != null) {          insnStmtMap.remove(nextInsn);          insnStmtMap.put(nextStmt,origStmt);        }      }    }  }}  }
class C{  @Override public void requestUser(){  view.initRefreshStart();  listener=new OnRequestUserProfileListener();  model.getService().requestUserProfile(model.getUser().username,listener);}  }
class C{  public MessagesSendQuery message(String value){  return unsafeParam("message",value);}  }
class C{  long freeSpaceWindows(String path,long timeout) throws IOException {  path=FilenameUtils.normalize(path,false);  if (path.length() > 0 && path.charAt(0) != '"') {    path="\"" + path + "\"";  }  String[] cmdAttribs=new String[]{"cmd.exe","/C","dir /a /-c " + path};  List<String> lines=performCommand(cmdAttribs,Integer.MAX_VALUE,timeout);  for (int i=lines.size() - 1; i >= 0; i--) {    String line=lines.get(i);    if (line.length() > 0) {      return parseDir(line,path);    }  }  throw new IOException("Command line 'dir /-c' did not return any info " + "for path '" + path + "'");}  }
class C{  public static String slurpURLNoExceptions(URL u,String encoding){  try {    return slurpURL(u,encoding);  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  @Override public String asFieldName(){  return fldName;}  }
class C{  public void addVariableDecl(VariableDecl node){  List<VariableDecl> list=(parent == null || state == null) ? getVariableDeclListNoTransform() : getVariableDeclList();  list.addChild(node);}  }
class C{  private static Map<String,Object> createBillingAccountFromReturn(GenericValue returnHeader,List<GenericValue> returnItems,DispatchContext dctx,Map<String,? extends Object> context){  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  try {    List<GenericValue> orders=EntityUtil.getRelated("OrderHeader",null,returnItems,false);    List<GenericValue> productStores=EntityUtil.getRelated("ProductStore",null,orders,false);    Long storeCreditValidDays=null;    for (    GenericValue productStore : productStores) {      Long thisStoreValidDays=productStore.getLong("storeCreditValidDays");      if (thisStoreValidDays == null)       continue;      if (storeCreditValidDays == null) {        storeCreditValidDays=thisStoreValidDays;      } else       if (thisStoreValidDays.compareTo(storeCreditValidDays) < 0) {        storeCreditValidDays=thisStoreValidDays;      }    }    Timestamp thruDate=null;    if (storeCreditValidDays != null)     thruDate=UtilDateTime.getDayEnd(UtilDateTime.nowTimestamp(),storeCreditValidDays);    Map<String,Object> input=UtilMisc.<String,Object>toMap("accountLimit",BigDecimal.ZERO,"description","Credit Account for Return #" + returnHeader.get("returnId"),"userLogin",userLogin);    input.put("accountCurrencyUomId",returnHeader.get("currencyUomId"));    input.put("thruDate",thruDate);    Map<String,Object> results=dispatcher.runSync("createBillingAccount",input);    if (ServiceUtil.isError(results))     return results;    String billingAccountId=(String)results.get("billingAccountId");    input=UtilMisc.toMap("billingAccountId",billingAccountId,"partyId",returnHeader.get("fromPartyId"),"roleTypeId","BILL_TO_CUSTOMER","userLogin",userLogin);    Map<String,Object> roleResults=dispatcher.runSync("createBillingAccountRole",input);    if (ServiceUtil.isError(roleResults)) {      Debug.logError("Error with createBillingAccountRole: " + roleResults.get(ModelService.ERROR_MESSAGE),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorWithCreateBillingAccountRole",locale) + roleResults.get(ModelService.ERROR_MESSAGE));    }    return results;  } catch (  GenericEntityException e) {    Debug.logError(e,"Entity error when creating BillingAccount: " + e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemsCreatingBillingAccount",locale));  }catch (  GenericServiceException e) {    Debug.logError(e,"Service error when creating BillingAccount: " + e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemsCreatingBillingAccount",locale));  }}  }
class C{  public boolean isBinaryObject(){  return myObject instanceof BinaryObject;}  }
class C{  public RequestHandle put(Context context,String url,Header[] headers,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  HttpEntityEnclosingRequestBase request=addEntityToRequestBase(new HttpPut(url),entity);  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context);}  }
class C{  @RequestMapping(value={"/rest/v1/proxyui"},method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE,produces=MediaType.APPLICATION_JSON_VALUE) @ResponseStatus(value=HttpStatus.OK) public ModelAndView returnProxyDetails(@RequestBody ProxyEntity proxyEntity) throws DASTProxyException {  if (proxyEntity != null) {    if (proxyEntity.getUser() != null && proxyEntity.getUser().getUserId() != null) {      if (AppScanUtils.getLoggedInUser() != null && AppScanUtils.getLoggedInUser().getUserId() != null) {        if (openProxyServers.containsKey(AppScanUtils.getLoggedInUser().getUserId())) {          proxyEntity=openProxyServers.get(AppScanUtils.getLoggedInUser().getUserId());          proxyEntity.getProxy().setNewlyCreated(false);        } else {          final ProxyServer newProxyServerForUser=getBrowserMobServiceBean().setUpProxyAndStartRecordForUser(AppScanUtils.getLoggedInUser().getUserId());          if (AppScanUtils.isNotNull(newProxyServerForUser)) {            proxyEntity.setUser(AppScanUtils.getLoggedInUser());            proxyEntity.setProxyServer(newProxyServerForUser);            proxyEntity.setProxy(new Proxy(AppScanUtils.getIpAddress(),newProxyServerForUser.getPort(),true));            openProxyServers.put(AppScanUtils.getLoggedInUser().getUserId(),proxyEntity);          } else {            LOGGER.error("Error in returnProxyDetails function. Browser Mob Service bean didn't send me a proxy server");          }        }      } else {        LOGGER.error("Error in returnProxyDetails function. There is no logged in user, even though a proxy entity has arrived claiming to be from a logged in user.");      }    } else {      if (openProxyServers.containsKey(proxyEntity.toString())) {        final ProxyEntity proxyEntityForBluefinTestCase=openProxyServers.get(proxyEntity.toString());        proxyEntity=proxyEntityForBluefinTestCase;      } else {        if (!AppScanUtils.isNotNull(proxyEntity.getProxyIdentifier())) {          throw new DASTProxyException("Please provide a valid AppScan Test Identifier");        }        if (!AppScanUtils.isNotNull(proxyEntity.getUser()) || !AppScanUtils.isNotNull(proxyEntity.getUser().getUserId())) {          throw new DASTProxyException("Please provide a valid AppScan User Id");        }        final ProxyServer newProxyServerFoBluefinTestCase=getBrowserMobServiceBean().setUpProxyAndStartRecordForUser(proxyEntity.getProxyIdentifier());        proxyEntity.setProxy(new Proxy(AppScanUtils.getIpAddress(),newProxyServerFoBluefinTestCase.getPort(),true));        proxyEntity.setProxyServer(newProxyServerFoBluefinTestCase);        openProxyServers.put(proxyEntity.toString(),proxyEntity);      }    }  } else {    LOGGER.error("Error in returnProxyDetails function. The 'ProxyEntity' sent is null. No way to track a proxy server.");  }  return new ModelAndView(view,AppScanConstants.JSON_RESPONSE_DATA_IDENTIFIER,proxyEntity);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SignetBurst_A_TO_B(String skillcaster,int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201021,skillcaster,num0,skilltarget,skillname);}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> propertyIn(String propertyName,Object... values){  return property(propertyName,in(values));}  }
class C{  private void loadInstantUploadVideoPath(){  SharedPreferences appPrefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());  mUploadVideoPath=appPrefs.getString("instant_video_upload_path",getString(R.string.instant_upload_path));  mPrefInstantVideoUploadPath.setSummary(mUploadVideoPath);}  }
class C{  protected MarketCreateCommentQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  void addToSubroutine(final long id,final int nbSubroutines){  if ((status & VISITED) == 0) {    status|=VISITED;    srcAndRefPositions=new int[(nbSubroutines - 1) / 32 + 1];  }  srcAndRefPositions[(int)(id >>> 32)]|=(int)id;}  }
class C{  private static final UInteger[] mkValues(){  int precacheSize=getPrecacheSize();  UInteger[] ret;  if (precacheSize <= 0)   return null;  ret=new UInteger[precacheSize];  for (int i=0; i < precacheSize; i++)   ret[i]=new UInteger(i);  return ret;}  }
class C{  private static String[] toSuffixes(String[] extensions){  String[] suffixes=new String[extensions.length];  for (int i=0; i < extensions.length; i++) {    suffixes[i]="." + extensions[i];  }  return suffixes;}  }
class C{  public static String prepareInitiator(Exchange exchange,ActivitiEndpoint activitiEndpoint){  String initiator=null;  if (activitiEndpoint.isSetProcessInitiator()) {    try {      initiator=exchange.getIn().getHeader(activitiEndpoint.getProcessInitiatorHeaderName(),String.class);    } catch (    TypeConversionException e) {      throw new ActivitiException("Initiator header '" + activitiEndpoint.getProcessInitiatorHeaderName() + "': Value must be of type String.",e);    }    if (StringUtils.isEmpty(initiator)) {      throw new ActivitiException("Initiator header '" + activitiEndpoint.getProcessInitiatorHeaderName() + "': Value must be provided");    }  }  return initiator;}  }
class C{  public Session store(long expired){  this.setExpired(expired);  if (!Cache.set("session/" + sid,this)) {    log.error("set session failed !",new Exception("store session failed"));  }  return this;}  }
class C{  public void processAlignment(Alignment alignment){  clear();  if (alignment != null) {    LinkedList<Pair<Integer,Integer>> events=new LinkedList<>();    for (int row=0; row < alignment.getNumberOfSequences(); row++) {      Lane lane=alignment.getLane(row);      Pair<Integer,Integer> startEvent=new Pair<>(lane.getFirstNonGapPosition(),-1);      events.add(startEvent);      Pair<Integer,Integer> endEvent=new Pair<>(lane.getLastNonGapPosition(),1);      events.add(endEvent);    }    Pair<Integer,Integer>[] array=(Pair<Integer,Integer>[])events.toArray(new Pair[events.size()]);    Arrays.sort(array);    int lastStart=0;    int coverage=0;    for (    Pair<Integer,Integer> event : array) {      if (event.getSecond() == -1) {        if (coverage == 0) {          if (event.getFirst() - 1 >= 0 && lastStart != -1) {            origGapColumns.add(new Pair<>(lastStart,event.getFirst() - 1));            orig2jump.put(lastStart,event.getFirst() - lastStart);            lastStart=-1;          }        }        coverage++;      } else       if (event.getSecond() == 1) {        coverage--;        if (coverage == 0)         lastStart=event.getFirst();      }    }    if (lastStart != -1 && lastStart < alignment.getLength()) {      origGapColumns.add(new Pair<>(lastStart,alignment.getLength()));      orig2jump.put(lastStart,alignment.getLength() - lastStart);    }    originalColumns=alignment.getLength();    for (    Pair<Integer,Integer> col : origGapColumns) {      layout2jump.put(col.getFirst() - jumped,orig2jump.get(col.getFirst()));      jumped+=orig2jump.get(col.getFirst());    }  }}  }
class C{  @NotNull public File createProjectDir(@NotNull String path){  File dir=createDirectory(myRootDir,path);  String msg=String.format("Directory '%s' should exist",path);  Assert.assertTrue(msg,dir.isDirectory());  return dir;}  }
class C{  public void deactivate(){  if (!inSelection) {    inSelection=true;    try {      chartSelection.clearSelectionAttributes();      this.repaint();    }  finally {      inSelection=false;    }  }}  }
class C{  public void addDetailsView(DetailsView detailsView,int location){  DisplayArea displayArea=getDisplayArea(location);  if (displayArea != null) {    if ("".equals(displayArea.getCaption()))     displayArea.setCaption(detailsView.getTab().getName());    displayArea.addTab(detailsView.getTab());    revalidate();    repaint();  }}  }
class C{  public TShortObjectHashMap(int initialCapacity,TShortHashingStrategy strategy){  super(initialCapacity,strategy);}  }
class C{  public void removeWord(String sWord){  removeWord(sWord,RemoveSubStrings);}  }
class C{  @deprecated public Object parseObject(String source,ParsePosition pos){  return parse(source,pos);}  }
class C{  public boolean hasTag(String aName){  return (searchForTag(aName) != -1);}  }
class C{  protected GenericDelegator(String delegatorFullName) throws GenericEntityException {  this.setDelegatorNames(delegatorFullName);  this.delegatorInfo=EntityConfig.getInstance().getDelegator(delegatorBaseName);  String kekText;  if (UtilValidate.isNotEmpty(this.delegatorTenantId)) {    Delegator baseDelegator=DelegatorFactory.getDelegator(this.delegatorBaseName);    GenericValue tenant=EntityQuery.use(baseDelegator).from("Tenant").where("tenantId",this.delegatorTenantId).cache(true).queryOne();    if (tenant == null) {      throw new GenericEntityException("No Tenant record found for delegator [" + this.delegatorFullName + "] with tenantId ["+ this.delegatorTenantId+ "]");    } else     if ("Y".equals(tenant.getString("disabled"))) {      throw new GenericEntityException("No Tenant record found for delegator [" + this.delegatorFullName + "] with tenantId ["+ this.delegatorTenantId+ "]");    }    GenericValue kekValue=EntityQuery.use(baseDelegator).from("TenantKeyEncryptingKey").where("tenantId",getDelegatorTenantId()).cache(true).queryOne();    if (kekValue != null) {      kekText=kekValue.getString("kekText");    } else {      kekText=this.delegatorInfo.getKeyEncryptingKey();    }  } else {    kekText=this.delegatorInfo.getKeyEncryptingKey();  }  this.modelReader=ModelReader.getModelReader(delegatorBaseName);  this.modelGroupReader=ModelGroupReader.getModelGroupReader(delegatorBaseName);  cache=new Cache(delegatorFullName);  List<String> warningList=new LinkedList<String>();  Debug.logInfo("Doing entity definition check...",module);  ModelEntityChecker.checkEntities(this,warningList);  if (warningList.size() > 0) {    Debug.logWarning("=-=-=-=-= Found " + warningList.size() + " warnings when checking the entity definitions:",module);    for (    String warning : warningList) {      Debug.logWarning(warning,module);    }  }  Set<String> groupNames=getModelGroupReader().getGroupNames(delegatorBaseName);  List<Future<Void>> futures=new LinkedList<Future<Void>>();  for (  String groupName : groupNames) {    futures.add(ExecutionPool.GLOBAL_BATCH.submit(createHelperCallable(groupName)));  }  ExecutionPool.getAllFutures(futures);  this.crypto=new EntityCrypto(this,kekText);}  }
class C{  public int scanLiteral(int quote,XMLString content) throws IOException {  if (DEBUG_BUFFER) {    System.out.print("(scanLiteral, '" + (char)quote + "': ");    XMLEntityManager.print(fCurrentEntity);    System.out.println();  }  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  } else   if (fCurrentEntity.position == fCurrentEntity.count - 1) {    fCurrentEntity.ch[0]=fCurrentEntity.ch[fCurrentEntity.count - 1];    load(1,false);    fCurrentEntity.position=0;    fCurrentEntity.startPosition=0;  }  int offset=fCurrentEntity.position;  int c=fCurrentEntity.ch[offset];  int newlines=0;  boolean external=fCurrentEntity.isExternal();  if (c == '\n' || (c == '\r' && external)) {    if (DEBUG_BUFFER) {      System.out.print("[newline, " + offset + ", "+ fCurrentEntity.position+ ": ");      XMLEntityManager.print(fCurrentEntity);      System.out.println();    }    do {      c=fCurrentEntity.ch[fCurrentEntity.position++];      if (c == '\r' && external) {        newlines++;        fCurrentEntity.lineNumber++;        fCurrentEntity.columnNumber=1;        if (fCurrentEntity.position == fCurrentEntity.count) {          offset=0;          fCurrentEntity.baseCharOffset+=(fCurrentEntity.position - fCurrentEntity.startPosition);          fCurrentEntity.position=newlines;          fCurrentEntity.startPosition=newlines;          if (load(newlines,false)) {            break;          }        }        if (fCurrentEntity.ch[fCurrentEntity.position] == '\n') {          fCurrentEntity.position++;          offset++;        } else {          newlines++;        }      } else       if (c == '\n') {        newlines++;        fCurrentEntity.lineNumber++;        fCurrentEntity.columnNumber=1;        if (fCurrentEntity.position == fCurrentEntity.count) {          offset=0;          fCurrentEntity.baseCharOffset+=(fCurrentEntity.position - fCurrentEntity.startPosition);          fCurrentEntity.position=newlines;          fCurrentEntity.startPosition=newlines;          if (load(newlines,false)) {            break;          }        }      } else {        fCurrentEntity.position--;        break;      }    } while (fCurrentEntity.position < fCurrentEntity.count - 1);    for (int i=offset; i < fCurrentEntity.position; i++) {      fCurrentEntity.ch[i]='\n';    }    int length=fCurrentEntity.position - offset;    if (fCurrentEntity.position == fCurrentEntity.count - 1) {      content.setValues(fCurrentEntity.ch,offset,length);      if (DEBUG_BUFFER) {        System.out.print("]newline, " + offset + ", "+ fCurrentEntity.position+ ": ");        XMLEntityManager.print(fCurrentEntity);        System.out.println();      }      return -1;    }    if (DEBUG_BUFFER) {      System.out.print("]newline, " + offset + ", "+ fCurrentEntity.position+ ": ");      XMLEntityManager.print(fCurrentEntity);      System.out.println();    }  }  while (fCurrentEntity.position < fCurrentEntity.count) {    c=fCurrentEntity.ch[fCurrentEntity.position++];    if ((c == quote && (!fCurrentEntity.literal || external)) || c == '%' || !XMLChar.isContent(c)) {      fCurrentEntity.position--;      break;    }  }  int length=fCurrentEntity.position - offset;  fCurrentEntity.columnNumber+=length - newlines;  content.setValues(fCurrentEntity.ch,offset,length);  if (fCurrentEntity.position != fCurrentEntity.count) {    c=fCurrentEntity.ch[fCurrentEntity.position];    if (c == quote && fCurrentEntity.literal) {      c=-1;    }  } else {    c=-1;  }  if (DEBUG_BUFFER) {    System.out.print(")scanLiteral, '" + (char)quote + "': ");    XMLEntityManager.print(fCurrentEntity);    System.out.println(" -> '" + (char)c + "'");  }  return c;}  }
class C{  public boolean isBigEndian(){  return bigEndian;}  }
class C{  @Override public void stop() throws ContainerException {  this.pollTimer.shutdown();  Debug.logWarning("stop JavaMail poller",module);}  }
class C{  private void prepareBitmaps(){  trigger.setEnabled(false);  bitmapArray=new Bitmap[apiList.size()];  for (int i=0; i < bitmapArray.length; i++) {    bitmapArray[i]=BitmapFactory.decodeByteArray(apiList.get(i).getImage(),0,apiList.get(i).getImage().length);  }  slot1.setImageBitmap(bitmapArray[new Random().nextInt(bitmapArray.length - 1)]);  slot2.setImageBitmap(bitmapArray[new Random().nextInt(bitmapArray.length - 1)]);  slot3.setImageBitmap(bitmapArray[new Random().nextInt(bitmapArray.length - 1)]);  showMessage("Slot machine ready");}  }
class C{  public void add(String expr,StrokeAction f){  Predicate p=(Predicate)ExpressionParser.parse(expr);  super.add(p,f);}  }
class C{  public static String contextualEncode(String s,Type t,boolean template){  return _encode(s,t,template,true);}  }
class C{  @Override public byte[] asBytes(int rowNumber){  return ByteBuffer.allocate(4).putInt(getInt(rowNumber)).array();}  }
class C{  public void writeLong(long a) throws IOException {  outs.write((byte)(a >> 56));  outs.write((byte)(a >> 48));  outs.write((byte)(a >> 40));  outs.write((byte)(a >> 32));  outs.write((byte)(a >> 24));  outs.write((byte)(a >> 16));  outs.write((byte)(a >> 8));  outs.write((byte)(a));  position+=8;}  }
class C{  public void stop(){  mBasoStatus=BasoStatus.ERROR;  toggleLayout();}  }
class C{  public IntElemValPair(String name,char kind,int val){  super(name,kind);  this.val=new IntegerCP(val);}  }
class C{  private boolean greaterThan(VersionData versionData){  if (versionData.majorNumber > this.majorNumber) {    return true;  } else   if (versionData.majorNumber == this.majorNumber) {    if (versionData.minorNumber > this.minorNumber) {      return true;    } else     if (versionData.minorNumber == this.minorNumber) {      if (versionData.pointNumber >= this.pointNumber) {        return true;      }    }  }  return false;}  }
class C{  @After public void afterTest(){  removeTestData();}  }
class C{  protected static String cast(String value,Type<?> type){  String castValue=value.trim();  String typeName=type.getCanonicalName();  if (!"null".equals(value)) {    if (type.isPrimitive()) {      if (type.getRawType() == Character.TYPE) {        castValue=format("(\"\"+%s).charAt(0)",castValue);      } else       if (!isPrimitiveLiteral(castValue,type)) {        castValue=format("%s.valueOf(\"\"+%s).%sValue()",type.getWrapperType().getCanonicalName(),castValue,type);      }    } else     if (type.isPrimitiveWrapper() && isPrimitiveLiteral(castValue,type)) {      castValue=format("%s.valueOf(%s)",type.getWrapperType().getCanonicalName(),castValue);    } else     if (!value.startsWith("(" + typeName + ")") && !value.startsWith("((" + typeName + ")")) {      castValue="((" + typeName + ")"+ castValue+ ")";    }  }  return castValue;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPATK_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200821,skillcaster,skillname);}  }
class C{  public String convertUtt(Utterance utt){  StringBuilder buf=new StringBuilder();  buf.append("===Utterance===\n");  buf.append(VOICEMARKER + FreeTTSVoices.getMaryVoice(utt.getVoice()).getName() + "\n");  buf.append("==Segment==\n");  buf.append("#\n");  Relation segmentRelation=utt.getRelation(Relation.SEGMENT);  assert segmentRelation != null;  Item segmentItem=segmentRelation.getHead();  while (segmentItem != null) {    float endInSeconds=segmentItem.getFeatures().getFloat("end");    String segmentString=segmentItem.toString();    buf.append(String.valueOf(endInSeconds) + " 100 " + segmentString+ "\n");    segmentItem=segmentItem.getNext();  }  buf.append("==Target==\n");  buf.append("#\n");  Relation targetRelation=utt.getRelation(Relation.TARGET);  assert targetRelation != null;  Item targetItem=targetRelation.getHead();  while (targetItem != null) {    float posInSeconds=targetItem.getFeatures().getFloat("pos");    float f0Value=targetItem.getFeatures().getFloat("f0");    buf.append(String.valueOf(posInSeconds) + " 100 " + String.valueOf(f0Value)+ "\n");    targetItem=targetItem.getNext();  }  buf.append("==Syllable==\n");  buf.append("#\n");  Relation syllStrucRelation=utt.getRelation(Relation.SYLLABLE_STRUCTURE);  assert syllStrucRelation != null;  StringBuilder word=new StringBuilder();  word.append("==Word==\n");  word.append("#\n");  StringBuilder iE=new StringBuilder();  iE.append("==IntEvent==\n");  iE.append("#\n");  Item syllStrucItem=syllStrucRelation.getHead();  while (syllStrucItem != null) {    Item syllItem=syllStrucItem.getDaughter();    float end=0;    while (syllItem != null) {      end=syllItem.getLastDaughter().getFeatures().getFloat("end");      StringBuilder syllable=new StringBuilder();      Item segItem=syllItem.getDaughter();      while (segItem != null) {        syllable.append(segItem.toString());        segItem=segItem.getNext();      }      String stress=syllItem.getFeatures().getString("stress");      buf.append(String.valueOf(end) + " 100 " + syllable.toString()+ " ; stress "+ stress+ "\n");      if (syllItem.getFeatures().isPresent("accent")) {        iE.append(String.valueOf(end) + " 100 " + syllItem.getFeatures().getString("accent")+ "\n");      }      if (syllItem.getFeatures().isPresent("endtone")) {        iE.append(String.valueOf(end) + " 100 " + syllItem.getFeatures().getString("endtone")+ "\n");      }      syllItem=syllItem.getNext();    }    word.append(String.valueOf(end) + " 100 " + syllStrucItem.toString()+ "\n");    syllStrucItem=syllStrucItem.getNext();  }  buf.append(word.toString());  buf.append(iE.toString());  buf.append("==Phrase==\n");  buf.append("#\n");  Relation phraseRelation=utt.getRelation(Relation.PHRASE);  assert phraseRelation != null;  Item phraseItem=phraseRelation.getHead();  while (phraseItem != null) {    float end=0;    int phraseBreak;    if (phraseItem.getFeatures().getString("name").equals("BB")) {      phraseBreak=4;    } else     if (phraseItem.getFeatures().getString("name").equals("B")) {      phraseBreak=3;    } else {      Log.d(Mary.LOG,"Unexpected phrase name: '" + phraseItem.getFeatures().getString("name") + "'");      phraseBreak=1;    }    Item wordItemInPhrase=phraseItem.getDaughter();    while (wordItemInPhrase != null) {      Item next=wordItemInPhrase.getNext();      Item lastSegmentItem=wordItemInPhrase.findItem("R:SylStructure.daughtern.daughtern");      if (lastSegmentItem != null) {        end=lastSegmentItem.getFeatures().getFloat("end");        int thisBreak=1;        if (next == null) {          thisBreak=phraseBreak;        }        buf.append(end + " 100 " + thisBreak+ "\n");      }      wordItemInPhrase=next;    }    phraseItem=phraseItem.getNext();  }  return buf.toString();}  }
class C{  public Builder removeColumns(String... columnNames){  return transform(new RemoveColumnsTransform(columnNames));}  }
class C{  public AdsUpdateClientsQuery(VkApiClient client,UserActor actor,int accountId,String data){  super(client,"ads.updateClients",Integer.class);  accessToken(actor.getAccessToken());  accountId(accountId);  data(data);}  }
class C{  public void clickOption(ToolbarOptions option){  By locator=By.xpath(String.format(BUTTON_XPATH_TEMPLATE,option.getTitle()));  toolbar.findElement(locator).click();}  }
class C{  @deprecated public final void reset(){  while (stackIsNotEmpty()) {    pop();  }  this.scriptStart=this.textStart;  this.scriptLimit=this.textStart;  this.scriptCode=-1;  this.parenSP=-1;  this.pushCount=0;  this.fixupCount=0;  this.textIndex=this.textStart;}  }
class C{  public static Document parseDocument(File file,boolean validating) throws ParserConfigurationException, SAXException, IOException {  return parseDocument(new FileInputStream(file),validating);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_DODGED_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201104,skilltarget,skillcaster,skillname);}  }
class C{  protected MarketDeleteAlbumQuery albumId(int value){  return unsafeParam("album_id",value);}  }
class C{  public JSONObject put(String key,Object value) throws JSONException {  if (key == null) {    throw new NullPointerException("Null key.");  }  if (value != null) {    testValidity(value);    this.map.put(key,value);  } else {    this.remove(key);  }  return this;}  }
class C{  public void reset(){  fSubGroupsB.clear();  fSubGroups.clear();}  }
class C{  public void selectAll(int skipViewType){  Log.v(TAG,"selectAll");  selectedItems=new ArrayList<Integer>(getItemCount());  for (int i=0; i < getItemCount(); i++) {    if (getItemViewType(i) == skipViewType)     continue;    selectedItems.add(i);    Log.v(TAG,"selectAll notifyItemChanged on position " + i);    notifyItemChanged(i);  }}  }
class C{  public <T extends DataQueryParams>T copyTo(T params){  params.dimensions=DimensionalObjectUtils.getCopies(this.dimensions);  params.filters=DimensionalObjectUtils.getCopies(this.filters);  params.aggregationType=this.aggregationType;  params.measureCriteria=this.measureCriteria;  params.preAggregateMeasureCriteria=this.preAggregateMeasureCriteria;  params.skipMeta=this.skipMeta;  params.skipData=this.skipData;  params.skipHeaders=this.skipHeaders;  params.skipRounding=this.skipRounding;  params.completedOnly=this.completedOnly;  params.hierarchyMeta=this.hierarchyMeta;  params.dimensionItemMeta=this.dimensionItemMeta;  params.ignoreLimit=this.ignoreLimit;  params.hideEmptyRows=this.hideEmptyRows;  params.showHierarchy=this.showHierarchy;  params.includeNumDen=this.includeNumDen;  params.displayProperty=this.displayProperty;  params.outputIdScheme=this.outputIdScheme;  params.outputFormat=this.outputFormat;  params.approvalLevel=this.approvalLevel;  params.startDate=this.startDate;  params.endDate=this.endDate;  params.partitions=new Partitions(this.partitions);  params.dataType=this.dataType;  params.periodType=this.periodType;  params.dataPeriodType=this.dataPeriodType;  params.skipPartitioning=this.skipPartitioning;  params.timely=this.timely;  params.restrictByOrgUnitOpeningClosedDate=this.restrictByOrgUnitOpeningClosedDate;  params.restrictByCategoryOptionStartEndDate=this.restrictByCategoryOptionStartEndDate;  params.dataApprovalLevels=new HashMap<>(this.dataApprovalLevels);  return params;}  }
class C{  public boolean write(byte[] audioData){  return write(audioData,0,audioData.length);}  }
class C{  @SuppressWarnings("unchecked") private void addVertex(Configuration configuration,String configName,Consumer<String> nameValidator){  if (!configuration.containsKey(MODULE_NAME_KEY)) {    LOG.warn(MODULE_NAME_MISSING.logFormat(configName));    return;  }  String moduleName=configuration.getString(MODULE_NAME_KEY);  nameValidator.accept(moduleName);  LOG.debug(MODULE_FOUND_MESSAGE.logFormat(moduleName,configName));  if (moduleConfigurations.containsKey(moduleName)) {    LOG.error(MODULE_NAME_DUPLICATION.format(configName,moduleName));    throw new SystemConfigException(MODULE_NAME_DUPLICATION.format(configName,moduleName));  }  moduleConfigurations.put(moduleName,configuration);  List<String> dependencies=new ArrayList<>(configuration.getList(DEPENDENT_MODULE_KEY,Collections.<String>emptyList()));  Collections.reverse(dependencies);  moduleDependencies.put(moduleName,dependencies);}  }
class C{  public static String formatQuantity(double quantity){  return quantityDecimalFormat.format(quantity);}  }
class C{  @Override public Iterator<E> iterator(){  return this.inOrderIterator();}  }
class C{  protected DfpDec(final DfpField factory,long x){  super(factory,x);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonGroupGate_A_TO_SELF(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200882,skillcaster,value0,skillname);}  }
class C{  private boolean isCallerValid(Context context,int authRequirements,String packageToMatch){  boolean shouldBeGoogleSigned=(authRequirements & FLAG_SHOULD_BE_GOOGLE_SIGNED) != 0;  boolean shouldBeSystem=(authRequirements & FLAG_SHOULD_BE_SYSTEM) != 0;  String[] callingPackages=getCallingPackages(context);  PackageManager pm=context.getApplicationContext().getPackageManager();  boolean matchFound=false;  for (  String packageName : callingPackages) {    if (!TextUtils.isEmpty(packageToMatch) && !packageName.equals(packageToMatch))     continue;    matchFound=true;    if ((shouldBeGoogleSigned && !isGoogleSigned(pm,packageName)) || (shouldBeSystem && !isSystemBuild(pm,packageName))) {      return false;    }  }  return matchFound;}  }
class C{  public static void touch(File file) throws IOException {  if (!file.exists()) {    OutputStream out=openOutputStream(file);    IOUtils.closeQuietly(out);  }  boolean success=file.setLastModified(System.currentTimeMillis());  if (!success) {    throw new IOException("Unable to set the last modification time for " + file);  }}  }
class C{  public boolean delete(){  return deleteStrategy.deleteQuietly(new File(path));}  }
class C{  @Override public Filter createFilter(){  return new DWithinExtended();}  }
class C{  @Override public Histogram histogram(){  return hist;}  }
class C{  public final String loadDocumentElement(String sDocID,String sElement){  Node nDoc=XMLDoc.getElementById(sDocID);  if (nDoc == null)   return null;  Element eDoc=(Element)nDoc;  NodeList nDocElements=nDoc.getChildNodes();  Node n=null;  for (int iCnt=0; iCnt < nDocElements.getLength(); iCnt++) {    if (nDocElements.item(iCnt).getNodeName().equalsIgnoreCase(sElement)) {      n=nDocElements.item(iCnt);      break;    }  }  String sRes;  if (n != null)   sRes=n.getTextContent(); else   sRes="";  return sRes;}  }
class C{  public static Equipment buildCreateBasicEquipment(Properties properties){  if (properties == null) {    properties=new Properties();  }  Equipment equipment=Equipment.create("E_TEST","cern.c2mon.daq.testhandler.TestMessageHandler").build();  equipment.setProcessId(1L);  properties.setProperty("name","E_TEST");  properties.setProperty("description","<no description provided>");  properties.setProperty("statusTagId",String.valueOf(101l));  properties.setProperty("commFaultTagId",String.valueOf(100l));  properties.setProperty("aliveInterval",String.valueOf(60000));  properties.setProperty("processId",String.valueOf(1l));  properties.setProperty("handlerClass","cern.c2mon.daq.testhandler.TestMessageHandler");  return equipment;}  }
class C{  static String leftTrim(String str,int len){  return str.substring(str.length() - len);}  }
class C{  private SLDTreeLeafFactory(){  populate();}  }
class C{  public void close() throws CanceledException {  notifyDestroyViewer();}  }
class C{  static BitArray interleaveWithECBytes(BitArray bits,int numTotalBytes,int numDataBytes,int numRSBlocks) throws WriterException {  if (bits.getSizeInBytes() != numDataBytes) {    throw new WriterException("Number of bits and data bytes does not match");  }  int dataBytesOffset=0;  int maxNumDataBytes=0;  int maxNumEcBytes=0;  Collection<BlockPair> blocks=new ArrayList<>(numRSBlocks);  for (int i=0; i < numRSBlocks; ++i) {    int[] numDataBytesInBlock=new int[1];    int[] numEcBytesInBlock=new int[1];    getNumDataBytesAndNumECBytesForBlockID(numTotalBytes,numDataBytes,numRSBlocks,i,numDataBytesInBlock,numEcBytesInBlock);    int size=numDataBytesInBlock[0];    byte[] dataBytes=new byte[size];    bits.toBytes(8 * dataBytesOffset,dataBytes,0,size);    byte[] ecBytes=generateECBytes(dataBytes,numEcBytesInBlock[0]);    blocks.add(new BlockPair(dataBytes,ecBytes));    maxNumDataBytes=Math.max(maxNumDataBytes,size);    maxNumEcBytes=Math.max(maxNumEcBytes,ecBytes.length);    dataBytesOffset+=numDataBytesInBlock[0];  }  if (numDataBytes != dataBytesOffset) {    throw new WriterException("Data bytes does not match offset");  }  BitArray result=new BitArray();  for (int i=0; i < maxNumDataBytes; ++i) {    for (    BlockPair block : blocks) {      byte[] dataBytes=block.getDataBytes();      if (i < dataBytes.length) {        result.appendBits(dataBytes[i],8);      }    }  }  for (int i=0; i < maxNumEcBytes; ++i) {    for (    BlockPair block : blocks) {      byte[] ecBytes=block.getErrorCorrectionBytes();      if (i < ecBytes.length) {        result.appendBits(ecBytes[i],8);      }    }  }  if (numTotalBytes != result.getSizeInBytes()) {    throw new WriterException("Interleaving error: " + numTotalBytes + " and "+ result.getSizeInBytes()+ " differ.");  }  return result;}  }
class C{  public static String toString(Reader input) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw);  return sw.toString();}  }
class C{  public ModelKeyMap findKeyMapByRelated(String relFieldName){  for (  ModelKeyMap keyMap : keyMaps) {    if (keyMap.getRelFieldName().equals(relFieldName))     return keyMap;  }  return null;}  }
class C{  public GroupsLeaveQuery(VkApiClient client,UserActor actor,int groupId){  super(client,"groups.leave",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);}  }
class C{  public Matrix times(double s){  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=s * A[i][j];    }  }  return X;}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  private void expandTo(int size){  final double[] tempArray=new double[size];  System.arraycopy(internalArray,0,tempArray,0,internalArray.length);  internalArray=tempArray;}  }
class C{  public static void suspend(){  TrafficService service=getAirMapTrafficService();  if (service != null && service.isConnected()) {    service.disconnect();  }}  }
class C{  public double quadraticMean(){  return NumericReduceUtils.quadraticMean.reduce(this);}  }
class C{  protected boolean isAwareOf(VisibleObject newObject){  return true;}  }
class C{  public void centerViewTo(float xIndex,float yValue,AxisDependency axis){  float valsInView=getDeltaY(axis) / mViewPortHandler.getScaleY();  float xsInView=getXAxis().getValues().size() / mViewPortHandler.getScaleX();  Runnable job=new MoveViewJob(mViewPortHandler,xIndex - xsInView / 2f,yValue + valsInView / 2f,getTransformer(axis),this);  addViewportJob(job);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelDeBuff_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200662,skillcaster,skillname);}  }
class C{  public static Plugin toBukkit(cn.nukkit.plugin.Plugin plugin){  if (plugin == null) {    return null;  }  if (plugin instanceof PokkitPlugin) {    return ((PokkitPlugin)plugin).bukkit;  }  return new NukkitPluginWrapper(plugin);}  }
class C{  public Matrix(double[][] A,int m,int n){  this.A=A;  this.m=m;  this.n=n;}  }
class C{  public boolean isAvailable(){  return available;}  }
class C{  public DrawerImplementor(DrawerModel model,DrawerView view){  this.model=model;  this.view=view;}  }
class C{  public boolean execute(String action,JSONArray args,CallbackContext callbackContext) throws JSONException {  this.callbackContext=callbackContext;  if (action.equals("takePicture")) {    this.srcType=CAMERA;    this.destType=FILE_URI;    this.saveToPhotoAlbum=false;    this.targetHeight=0;    this.targetWidth=0;    this.encodingType=JPEG;    this.mediaType=PICTURE;    this.mQuality=80;    this.destType=args.getInt(1);    this.srcType=args.getInt(2);    this.mQuality=args.getInt(0);    this.targetWidth=args.getInt(3);    this.targetHeight=args.getInt(4);    this.encodingType=args.getInt(5);    this.mediaType=args.getInt(6);    this.allowEdit=args.getBoolean(7);    this.correctOrientation=args.getBoolean(8);    this.saveToPhotoAlbum=args.getBoolean(9);    if (this.targetWidth < 1) {      this.targetWidth=-1;    }    if (this.targetHeight < 1) {      this.targetHeight=-1;    }    if (this.targetHeight == -1 && this.targetWidth == -1 && this.mQuality == 100 && !this.correctOrientation && this.encodingType == PNG && this.srcType == CAMERA) {      this.encodingType=JPEG;    }    try {      if (this.srcType == CAMERA) {        this.callTakePicture(destType,encodingType);      } else       if ((this.srcType == PHOTOLIBRARY) || (this.srcType == SAVEDPHOTOALBUM)) {        if (!PermissionHelper.hasPermission(this,permissions[0])) {          PermissionHelper.requestPermission(this,SAVE_TO_ALBUM_SEC,Manifest.permission.READ_EXTERNAL_STORAGE);        } else {          this.getImage(this.srcType,destType,encodingType);        }      }    } catch (    IllegalArgumentException e) {      callbackContext.error("Illegal Argument Exception");      PluginResult r=new PluginResult(PluginResult.Status.ERROR);      callbackContext.sendPluginResult(r);      return true;    }    PluginResult r=new PluginResult(PluginResult.Status.NO_RESULT);    r.setKeepCallback(true);    callbackContext.sendPluginResult(r);    return true;  }  return false;}  }
class C{  public static RxJavaAssemblyException find(Throwable ex){  Set<Throwable> memory=new HashSet<Throwable>();  while (ex != null) {    if (ex instanceof RxJavaAssemblyException) {      return (RxJavaAssemblyException)ex;    }    if (memory.add(ex)) {      ex=ex.getCause();    } else {      return null;    }  }  return null;}  }
class C{  protected XMLGrammarParser(SymbolTable symbolTable){  super((XMLParserConfiguration)ObjectFactory.createObject("mf.org.apache.xerces.xni.parser.XMLParserConfiguration","mf.org.apache.xerces.parsers.XIncludeAwareParserConfiguration"));  fConfiguration.setProperty(Constants.XERCES_PROPERTY_PREFIX + Constants.SYMBOL_TABLE_PROPERTY,symbolTable);}  }
class C{  public void write(byte b[],int off,int len) throws IOException {  raf.write(b,off,len);}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  private boolean checkForNameCollision(List<JobDefinition> jobDefinitions,JobDefinition jobDefinitionToAdd){  for (  JobDefinition jobDefinition : jobDefinitions) {    if (jobDefinition.getId().equals(jobDefinitionToAdd.getId())) {      continue;    }    if (jobDefinition.getName().equals(jobDefinitionToAdd.getName())) {      return true;    }  }  return false;}  }
class C{  public static int convertDayOfWeekFromTimeToCalendar(int timeDayOfWeek){switch (timeDayOfWeek) {case Time.MONDAY:    return Calendar.MONDAY;case Time.TUESDAY:  return Calendar.TUESDAY;case Time.WEDNESDAY:return Calendar.WEDNESDAY;case Time.THURSDAY:return Calendar.THURSDAY;case Time.FRIDAY:return Calendar.FRIDAY;case Time.SATURDAY:return Calendar.SATURDAY;case Time.SUNDAY:return Calendar.SUNDAY;default :throw new IllegalArgumentException("Argument must be between Time.SUNDAY and " + "Time.SATURDAY");}}  }
class C{  public synchronized void rotateAbs(final Point2D p,double theta){  double zx=p.getX(), zy=p.getY();  damageReport();  m_transform.translate(zx,zy);  m_transform.rotate(theta);  m_transform.translate(-zx,-zy);  try {    m_itransform=m_transform.createInverse();  } catch (  Exception e) {  }}  }
class C{  public BigFraction reduce(){  final BigInteger gcd=numerator.gcd(denominator);  if (BigInteger.ONE.compareTo(gcd) < 0) {    return new BigFraction(numerator.divide(gcd),denominator.divide(gcd));  } else {    return this;  }}  }
class C{  static Principal[] reduce(Principal[] principals){  return reduce0(principals.clone());}  }
class C{  @Override public void initialJobs(){  try {    Scheduler scheduler=Singleton.getScheduler();    List<RepoResult> repoResults=this.repo.getAllRepo();    for (int i=0; i < this.NUMBERGITPROCESSORS; i++) {      this.startIndexGitRepoJobs("" + i);    }    if (SVNENABLED) {      for (int i=0; i < this.NUMBERSVNPROCESSORS; i++) {        this.startIndexSvnRepoJobs("" + i);      }    }    for (int i=0; i < this.NUMBERFILEPROCESSORS; i++) {      this.startIndexFileRepoJobs("" + i);    }    if (repoResults.size() == 0) {      LOGGER.info("///////////////////////////////////////////////////////////////////////////\n      // You have no repositories set to index. Add some using the admin page. //\n      // Browse to the admin page and manually add some repositories to index. //\n      ///////////////////////////////////////////////////////////////////////////");    }    startEnqueueJob();    startDeleteJob();    JobDetail job=newJob(IndexDocumentsJob.class).withIdentity("indexerjob").build();    SimpleTrigger trigger=newTrigger().withIdentity("indexerjob").withSchedule(simpleSchedule().withIntervalInSeconds(this.INDEXTIME).repeatForever()).build();    scheduler.scheduleJob(job,trigger);    scheduler.start();  } catch (  SchedulerException ex) {    LOGGER.severe(" caught a " + ex.getClass() + "\n with message: "+ ex.getMessage());  }}  }
class C{  public synchronized void writeTo(OutputStream out) throws IOException {  int remaining=count;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    out.write(buf,0,c);    remaining-=c;    if (remaining == 0) {      break;    }  }}  }
class C{  public boolean isFinal(){  return Modifier.isFinal(this.getModifiers());}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public FileAlterationMonitor(){  this(10000);}  }
class C{  public static double distFrom(Point start,Point end){  return distFrom(start.getLatitude(),start.getLongitude(),end.getLatitude(),end.getLongitude());}  }
class C{  int readUtah(int row,int column,int numRows,int numColumns){  int currentByte=0;  if (readModule(row - 2,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 2,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public NotesEditQuery privacyComment(String... value){  return unsafeParam("privacy_comment",value);}  }
class C{  public TrainedLTS(AllophoneSet aPhonSet,InputStream treeStream) throws IOException, MaryConfigurationException {  this(aPhonSet,treeStream,true);}  }
class C{  public T distanceSq(final Vector3D v){  final T dx=x.subtract(v.getX());  final T dy=y.subtract(v.getY());  final T dz=z.subtract(v.getZ());  return dx.multiply(dx).add(dy.multiply(dy)).add(dz.multiply(dz));}  }
class C{  public JSearchPanel(Visualization vis,String group,String field,boolean autoIndex){  this(vis,group,Visualization.SEARCH_ITEMS,new String[]{field},autoIndex,false);}  }
class C{  public void unlockUserInput(){  getCommandManager().setEnableCritical(true);  searchManager.getFindDialogAsToolBar().setEnableCritical(true);  frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));  isLocked=false;  statusBar.setText2("");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_IDSHULACKSHIP_OPEN_DOOR(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400246,value0,value1);}  }
class C{  public VocalizationIntonationReader(String fileName) throws IOException, MaryConfigurationException {  load(fileName);}  }
class C{  public final void close(LsServerPacket closePacket,boolean forced){synchronized (guard) {    if (isWriteDisabled()) {      return;    }    log.debug("sending packet: " + closePacket + " and closing connection after that.");    pendingClose=true;    isForcedClosing=forced;    sendMsgQueue.clear();    sendMsgQueue.addLast(closePacket);    enableWriteInterest();  }}  }
class C{  public static void toXls(Grid grid,OutputStream out) throws Exception {  WritableWorkbook workbook=openWorkbook(out);  String sheetName=CodecUtils.filenameEncode(StringUtils.defaultIfEmpty(grid.getTitle(),XLS_SHEET_PREFIX + 1));  toXlsInternal(grid,workbook,sheetName,0);  workbook.write();  workbook.close();}  }
class C{  private Throwable extractThrowable(Runnable runnable){  if ((runnable instanceof Future<?>) && ((Future<?>)runnable).isDone()) {    try {      ((Future<?>)runnable).get();    } catch (    CancellationException e) {      LOG.info("Task {} cancelled",runnable,e.getCause());    }catch (    InterruptedException e) {      LOG.info("Task {} was interrupted",runnable,e);    }catch (    ExecutionException e) {      return e.getCause();    }  }  return null;}  }
class C{  public static void dropAllTables(Database db,boolean ifExists){  ChatMessageBeanDao.dropTable(db,ifExists);}  }
class C{  @Override public synchronized void maybeStopTrackingJob(JobStatus job){  if (mTrackedJobs.remove(job)) {    checkExpiredDelaysAndResetAlarm();    checkExpiredDeadlinesAndResetAlarm();  }}  }
class C{  public FieldRefNode makeLocalFieldRefNode(Object baseValue,Type baseType,SparkField field,SootMethod method){  VarNode base=makeLocalVarNode(baseValue,baseType,method);  return makeFieldRefNode(base,field);}  }
class C{  public Builder forceConcatGlobalTag(boolean val){  forceConcatGlobalTag=val;  return this;}  }
class C{  public static byte[] decrypt(final SecretKeySpec key,final byte[] iv,final byte[] decodedCipherText) throws GeneralSecurityException {  final Cipher cipher=Cipher.getInstance(AES_MODE);  IvParameterSpec ivSpec=new IvParameterSpec(iv);  cipher.init(Cipher.DECRYPT_MODE,key,ivSpec);  byte[] decryptedBytes=cipher.doFinal(decodedCipherText);  return decryptedBytes;}  }
class C{  public EdgeFeature(PointFeature vertex1,PointFeature vertex2,PointFeature max,Vector2 edge,int index){  super(index);  this.vertex1=vertex1;  this.vertex2=vertex2;  this.edge=edge;  this.max=max;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_RESISTED_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201081,skilltarget,skillname);}  }
class C{  private Plan makeIndexSelectPlan(){  for (  String fld : idxes.keySet()) {    ConstantRange searchRange=pred.constantRange(fld);    if (searchRange == null)     continue;    IndexInfo ii=idxes.get(fld);    if ((ii.indexType() == IDX_HASH && searchRange.isConstant()) || ii.indexType() == IDX_BTREE) {      return new IndexSelectPlan(tp,ii,searchRange,tx);    }  }  return null;}  }
class C{  protected String createAgentID(int iLen){  String sTemp=String.valueOf(new Date().getTime());  return sTemp.substring(sTemp.length() - iLen);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  AlignmentViewer viewer=(AlignmentViewer)getViewer();  viewer.getSelectedBlock().selectAll();}  }
class C{  public AllocDotField dot(SparkField field){  return fields == null ? null : fields.get(field);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  private void createRGBChannelSymbol(RasterSymbolizer sym,GridCoverage2D cov,int numBands){  String[] sampleDimensionNames=new String[numBands];  for (int i=0; i < numBands; i++) {    GridSampleDimension dim=cov.getSampleDimension(i);    sampleDimensionNames[i]=dim.getDescription().toString();  }  final int RED=0, GREEN=1, BLUE=2;  int[] channelNum={-1,-1,-1};  for (int i=0; i < numBands; i++) {    String name=sampleDimensionNames[i].toLowerCase();    if (name != null) {      if (name.matches("red.*")) {        channelNum[RED]=i + 1;      } else       if (name.matches("green.*")) {        channelNum[GREEN]=i + 1;      } else       if (name.matches("blue.*")) {        channelNum[BLUE]=i + 1;      }    }  }  if (channelNum[RED] < 0 || channelNum[GREEN] < 0 || channelNum[BLUE] < 0) {    channelNum[RED]=1;    channelNum[GREEN]=2;    channelNum[BLUE]=3;  }  SelectedChannelType[] sct=new SelectedChannelType[cov.getNumSampleDimensions()];  ContrastEnhancement ce=sf.contrastEnhancement(ff.literal(1.0),ContrastMethod.NORMALIZE);  for (int i=0; i < 3; i++) {    sct[i]=sf.createSelectedChannelType(String.valueOf(channelNum[i]),ce);  }  ChannelSelection sel=sf.channelSelection(sct[RED],sct[GREEN],sct[BLUE]);  sym.setChannelSelection(sel);}  }
class C{  public EquipmentTimeDeadband(final IDynamicTimeDeadbandFilterer dynamicTimeDeadbandFilterer,final IProcessMessageSender processMessageSender,final EquipmentSenderFilterModule equipmentSenderFilterModule,final EquipmentLoggerFactory equipmentLoggerFactory){  this.dynamicTimeDeadbandFilterer=dynamicTimeDeadbandFilterer;  this.processMessageSender=processMessageSender;  this.equipmentSenderFilterModule=equipmentSenderFilterModule;  this.equipmentLogger=equipmentLoggerFactory.getEquipmentLogger(getClass());  this.dataTagValueFilter=new DataTagValueFilter(equipmentLoggerFactory);}  }
class C{  public InfoflowResults runInfoflow(){  return runInfoflow(null);}  }
class C{  private void refreshCardinality(){  keyValueStore.put(DimensionStoreKeyUtils.getCardinalityKey(),Integer.toString(findAllDimensionRows().size()));}  }
class C{  public static int hashBytes(byte[] bytes,int offset,int length){  int hash=1;  for (int i=offset; i < offset + length; i++)   hash=(31 * hash) + (int)bytes[i];  return hash;}  }
class C{  public FriendsGetOnlineQueryWithMobile onlineMobile(Boolean value){  return unsafeParam("online_mobile",value);}  }
class C{  public void registerReceiver(Context context){  assert Looper.getMainLooper() == Looper.myLooper();  if (!mIsRegistered.getAndSet(true)) {    context.registerReceiver(this,new IntentFilter(Intent.ACTION_SCREEN_ON));    mNeedToRunActions.set(true);  }}  }
class C{  public static List<String> readLines(Reader input) throws IOException {  BufferedReader reader=toBufferedReader(input);  List<String> list=new ArrayList<>();  String line=reader.readLine();  while (line != null) {    list.add(line);    line=reader.readLine();  }  return list;}  }
class C{  protected DatabaseGetStreetsByIdQuery streetIds(List<Integer> value){  return unsafeParam("street_ids",value);}  }
class C{  public void update(HttpServletRequest request){  if ("Y".equals(request.getParameter("changeStatusAndTypeState"))) {    changeOrderListStates(request);  } else {    String viewSizeParam=request.getParameter(VIEW_SIZE_PARAM);    String viewIndexParam=request.getParameter(VIEW_INDEX_PARAM);    if (!UtilValidate.isEmpty(viewSizeParam) && !UtilValidate.isEmpty(viewIndexParam))     changePaginationState(viewSizeParam,viewIndexParam);  }}  }
class C{  public void startCDATA(){  theNextState=S_CDATA;}  }
class C{  public AudioGetAlbumsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  protected VideoGetCommentsQuery videoId(int value){  return unsafeParam("video_id",value);}  }
class C{  public void add(long x){  Cell[] as;  long b, v;  HashCode hc;  Cell a;  int n;  if ((as=cells) != null || !casBase(b=base,b + x)) {    boolean uncontended=true;    int h=(hc=threadHashCode.get()).code;    if (as == null || (n=as.length) < 1 || (a=as[(n - 1) & h]) == null || !(uncontended=a.cas(v=a.value,v + x)))     retryUpdate(x,hc,uncontended);  }}  }
class C{  public static final ClientRequest fromMessage(final Message message) throws JMSException, MessageConversionException {  if (message instanceof TextMessage) {    String json=((TextMessage)message).getText();    try {      return ClientRequestImpl.fromJson(json);    } catch (    JsonSyntaxException jse) {      StringBuffer str=new StringBuffer("fromMessage() : Unsupported JSON message (");      str.append(json);      str.append(") : Message discarded.");      LOG.error(str.toString());      throw new MessageConversionException("Unsupported JSON message received on tag request connection.");    }  } else   if (message instanceof ObjectMessage) {    ObjectMessage oMessage=(ObjectMessage)message;    Object object=oMessage.getObject();    return ClientRequestImpl.fromObject(object);  } else {    StringBuffer str=new StringBuffer("fromMessage() : Unsupported message type(");    str.append(message.getClass().getName());    str.append(") : Message discarded.");    LOG.error(str.toString());    throw new MessageConversionException("Unsupported JMS message type received on tag request connection.");  }}  }
class C{  public boolean hasChanged(){  return changed.get();}  }
class C{  public static List<String> readLines(File file,Charset encoding) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.readLines(in,Charsets.toCharset(encoding));  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public boolean isConditionMet(final ExpectedCondition<?> condition,int timeout){  try {    bobcatWait.withTimeout(timeout).until(condition);  } catch (  TimeoutException|StaleElementReferenceException e) {    LOG.debug("Condition has not been made before timeout: ",e);    return false;  }  return true;}  }
class C{  public void updateGeometry(int row,Geometry geometry){  setValueAt(geometry,row,getGeometryFieldIndex());}  }
class C{  public ResourceLazyLoadingScript(String name,String type,String resoruceLocation){  this.name=name;  this.type=type;  this.resourceLocation=resoruceLocation;}  }
class C{  public void updateFile(OCFile file){  setFile(file);}  }
class C{  private void fixDescendants(int id){  if (descendants.get(id)) {    return;  }  for (Iterator<TypeNode> parentIt=parents.iterator(); parentIt.hasNext(); ) {    final TypeNode parent=parentIt.next();    parent.fixDescendants(id);  }  descendants.set(id);}  }
class C{  private boolean queryPreferPublic(){  String prefer=System.getProperty(pPrefer);  if (prefer == null) {    if (resources == null)     readProperties();    if (resources == null)     return defaultPreferPublic;    try {      prefer=resources.getString("prefer");    } catch (    MissingResourceException e) {      return defaultPreferPublic;    }  }  if (prefer == null) {    return defaultPreferPublic;  }  return (prefer.equalsIgnoreCase("public"));}  }
class C{  public VideoSearchQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public static Color hex2Rgb(String colourStr){  return new Color(Integer.valueOf(colourStr.substring(1,3),16),Integer.valueOf(colourStr.substring(3,5),16),Integer.valueOf(colourStr.substring(5,7),16));}  }
class C{  public GSSessionImpl(GSConnectionImpl conn,boolean isTransacted,int acknowledgeMode) throws JMSException {  if (_logger.isLoggable(Level.FINEST)) {    _logger.log(Level.FINEST,"GSSessionImpl.GSSessionImpl()");  }  if (!isTransacted && acknowledgeMode != Session.AUTO_ACKNOWLEDGE && acknowledgeMode != Session.CLIENT_ACKNOWLEDGE && acknowledgeMode != Session.DUPS_OK_ACKNOWLEDGE)   throw new JMSException("Can't create a non transacted session with an" + " invalid acknowledge mode.");  this.m_space=conn.getSpace();  this.m_sessionID=conn.nextSessionId();  this.m_conn=conn;  this.m_providerName=conn.getMetaData().getJMSProviderName();  _deliveries=new Hashtable<String,MessageAcks>();  m_consumers=new HashMap<String,GSMessageConsumerImpl>();  m_producers=new Vector<GSMessageProducerImpl>();  m_browsers=new Vector<GSQueueBrowserImpl>();  recoverMessages=new LinkedList<MessageQueueElement>();  unackedMessages=new LinkedList<MessageQueueElement>();  if (!isTransacted) {    m_acknowledgeMode=acknowledgeMode;    if (m_acknowledgeMode == Session.CLIENT_ACKNOWLEDGE) {      if (_logger.isLoggable(Level.FINE)) {        _logger.log(Level.FINE,"GSSessionImpl.GSSessionImpl(): " + "The session's acknowledge mode is CLIENT_ACKNOWLEDGE." + " The session will use " + txnType + " transactions: "+ m_sessionID);      }      try {        renewTransaction();      } catch (      TransactionCreateException e) {        JMSException jmse=new JMSException(e.msg);        jmse.setLinkedException(e.orig);        throw jmse;      }    } else {      if (_logger.isLoggable(Level.FINE)) {        _logger.log(Level.FINE,"GSSessionImpl.GSSessionImpl(): The session is not transacted: " + m_sessionID);      }    }  } else {    if (_logger.isLoggable(Level.FINE)) {      _logger.log(Level.FINE,"GSSessionImpl.GSSessionImpl(): Session is transacted: " + m_sessionID);    }    m_acknowledgeMode=Session.SESSION_TRANSACTED;    sentMessages=new LinkedList<GSMessageImpl>();    if (_logger.isLoggable(Level.FINE)) {      _logger.log(Level.FINE,"GSSessionImpl.GSSessionImpl(): " + "The session is transacted " + " and it will use " + txnType + " transactions: "+ m_sessionID);    }    try {      renewTransaction();    } catch (    TransactionCreateException e) {      JMSException jmse=new JMSException(e.msg);      jmse.setLinkedException(e.orig);      throw jmse;    }  }  this.m_compressionMinSize=m_conn.getCompressionMinSize();  _compressedConvertorPool=new ResourcePool<CompressedMarshObjectConvertor>(CompressedMarshObjectConvertor.getFactory(),0,100);  conn.addSession(this);  if (_logger.isLoggable(Level.FINE)) {    _logger.fine("GSSessionImpl.GSSessionImpl() session: " + this.getClass().getName() + " |	"+ toString()+ " |	space: "+ m_space);  }}  }
class C{  public static Builder register(Application application,String encryptionKey){  if (encryptionKey == null)   throw new RuntimeException(ERROR_ENCRYPTION_KEY_IS_NULL);  RxActivityResult.register(application);  return new Builder(application,encryptionKey);}  }
class C{  public byte[] sign(byte[] hash){  return crypto.sign(hash,toByteArray());}  }
class C{  public static String combineSetMethodName(String fieldName){  return "set" + fieldName.substring(0,1).toUpperCase() + fieldName.substring(1);}  }
class C{  public void addParameter(ParameterDeclaration node){  List<ParameterDeclaration> list=(parent == null || state == null) ? getParameterListNoTransform() : getParameterList();  list.addChild(node);}  }
class C{  public DuplicateAionObjectException(){  super();}  }
class C{  public static <T>Set<T> toSet(T obj1,T obj2,T obj3,T obj4,T obj5){  Set<T> theSet=new LinkedHashSet<T>();  theSet.add(obj1);  theSet.add(obj2);  theSet.add(obj3);  theSet.add(obj4);  theSet.add(obj5);  return theSet;}  }
class C{  public void addActionListener(ActionListener actionListener){  this.listenerList.add(ActionListener.class,actionListener);}  }
class C{  public BoardGetTopicsQueryWithExtended topicIds(List<Integer> value){  return unsafeParam("topic_ids",value);}  }
class C{  @Override public Schema schema(){  return ti.schema();}  }
class C{  public int hash(char[] buffer,int offset,int length){  int code=0;  for (int i=0; i < length; ++i) {    code=code * 31 + buffer[offset + i];  }  return code & 0x7FFFFFFF;}  }
class C{  private <T,S extends ParseTree>T parseQueryFragment(Function<GraqlParser,S> parseRule,BiFunction<QueryVisitor,S,T> visit,TokenStream tokens){  GraqlErrorListener errorListener=new GraqlErrorListener(tokens.getText());  return parseQueryFragment(parseRule,visit,errorListener,tokens);}  }
class C{  public static final double kilogramsToPounds(double kilograms){  return kilograms * KILOGRAM_TO_POUND;}  }
class C{  public static Path parsePath(String pathString){  return doPath(pathString);}  }
class C{  public void onRestoreStateForActivityResult(Bundle state,CallbackContext callbackContext){}  }
class C{  public boolean hasChild(String name){  for (  Node child : children) {    if (child.name.equals(name)) {      return true;    }  }  return false;}  }
class C{  public void add(String expr,SizeAction f){  Predicate p=(Predicate)ExpressionParser.parse(expr);  super.add(p,f);}  }
class C{  public static BigFraction parseAspectRatio(String aspectRatio){  String[] parts=aspectRatio.split("/");  try {    if (parts.length == 2) {      return new BigFraction(Long.parseLong(parts[0]),Long.parseLong(parts[1]));    } else     if (parts.length == 1) {      return new BigFraction(Long.parseLong(parts[0]));    }  } catch (  NumberFormatException e) {    throw new ConversionHelperException("Incorrect aspect ratio! Aspect ratio must consist of two numbers.",e);  }  throw new ConversionHelperException("Incorrect aspect ratio! Aspect ratio must consist of two values.");}  }
class C{  public static void main(String[] args){  try {    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());  } catch (  ClassNotFoundException e) {    e.printStackTrace();  }catch (  InstantiationException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }catch (  UnsupportedLookAndFeelException e) {    e.printStackTrace();  }  ExampleJOGL window=new ExampleJOGL();  window.setVisible(true);  window.start();}  }
class C{  public LookupTranslator(final CharSequence[]... lookup){  lookupMap=new HashMap<>();  int _shortest=Integer.MAX_VALUE;  int _longest=0;  if (lookup != null) {    for (    final CharSequence[] seq : lookup) {      this.lookupMap.put(seq[0].toString(),seq[1]);      final int sz=seq[0].length();      if (sz < _shortest) {        _shortest=sz;      }      if (sz > _longest) {        _longest=sz;      }    }  }  shortest=_shortest;  longest=_longest;}  }
class C{  public String toString(){  return ("InvocationConstraints[reqs: " + Constraint.toString(reqs) + ", prefs: "+ Constraint.toString(prefs)+ "]");}  }
class C{  public ZWaveUserCodeCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public SyntaxException(){}  }
class C{  public synchronized void onWriteEvent() throws IOException {  LRMIInvocationTrace trace=null;  try {    while (!_contexts.isEmpty()) {      Context current=_contexts.peek();      trace=current.getTrace();      if (trace != null)       LRMIInvocationContext.updateContext(trace,null,null,null,null,false,null,null);      noneBlockingWrite(current);      if (current.getPhase() != Context.Phase.FINISH) {        setWriteInterest();        break;      } else {        traceContextTotalWriteTime(current);        _contexts.poll();        pendingWrites.decrement();      }    }    if (_contexts.isEmpty()) {      removeWriteInterest(true);    }  }  finally {    if (trace != null)     LRMIInvocationContext.resetContext();  }}  }
class C{  public void dismissLoadingDialog(){  final Fragment frag=getActivity().getSupportFragmentManager().findFragmentByTag(DIALOG_WAIT_TAG);  if (frag != null) {    LoadingDialog loading=(LoadingDialog)frag;    loading.dismissAllowingStateLoss();  }}  }
class C{  private void onSearchPanelFirstView(){  if (mIsSearchPanelFullyPreloaded) {    logSearchPanelLoadDuration(true,0);  } else {    mSearchViewStartTimeNs=System.nanoTime();  }}  }
class C{  private void localRedisConnect(){  if (this.localJedis == null) {    logger.info("Connecting to Redis.");    this.localJedis=JedisUtils.connect(REDIS_ADDRESS,REDIS_PORT);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_REMAIN_PRINT_SCREEN_COOLTIME(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400600,value0,value1);}  }
class C{  public boolean hasDimensionConstraints(){  Set<DimensionalObject> constraints=getDimensionConstraints();  return constraints != null && !constraints.isEmpty();}  }
class C{  protected BoardOpenTopicQuery topicId(int value){  return unsafeParam("topic_id",value);}  }
class C{  private void displaySuperToast(SuperToast superToast){  if (superToast.isShowing())   return;  if (superToast instanceof SuperActivityToast) {    if (((SuperActivityToast)superToast).getViewGroup() == null) {      Log.e(getClass().getName(),ERROR_SAT_VIEWGROUP_NULL);      return;    }    try {      ((SuperActivityToast)superToast).getViewGroup().addView(superToast.getView());      if (!((SuperActivityToast)superToast).isFromOrientationChange()) {        AnimationUtils.getShowAnimation((SuperActivityToast)superToast).start();      }    } catch (    IllegalStateException illegalStateException) {      Log.e(getClass().getName(),illegalStateException.toString());    }    if (!((SuperActivityToast)superToast).isIndeterminate()) {      sendDelayedMessage(superToast,Messages.REMOVE_SUPERTOAST,superToast.getDuration() + AnimationUtils.SHOW_DURATION);    }  } else {    final WindowManager windowManager=(WindowManager)superToast.getContext().getApplicationContext().getSystemService(Context.WINDOW_SERVICE);    if (windowManager != null) {      windowManager.addView(superToast.getView(),superToast.getWindowManagerParams());    }    sendDelayedMessage(superToast,Messages.REMOVE_SUPERTOAST,superToast.getDuration() + AnimationUtils.SHOW_DURATION);  }}  }
class C{  public boolean isValid(String inetAddress){  return isValidInet4Address(inetAddress) || isValidInet6Address(inetAddress);}  }
class C{  public static UShort ushort(short value){  return UShort.valueOf(value);}  }
class C{  public static String rawHexDump(byte[] b){  if (b == null)   return "";  int size=b.length;  if (size == 0)   return "";  StringBuffer buf=new StringBuffer();  for (  byte aB : b) {    buf.append(zeropad(Integer.toHexString(byteToUInt(aB)).toUpperCase(),2));    buf.append(" ");  }  buf.delete(buf.length() - 1,buf.length());  return buf.toString();}  }
class C{  private void initModel(){  this.editResultModel=new EditResultObject();  this.browsableModel=new BorwsableObject(getIntent());}  }
class C{  public AudioSearchQuery autoComplete(Boolean value){  return unsafeParam("auto_complete",value);}  }
class C{  @PostConstruct public void init(){  listenerContainer=supervisionNotifier.registerAsListener(this,10);  clusterCache.acquireWriteLockOnKey(EVENT_LOCK);  try {    for (    Long key : processCache.getKeys()) {      if (!processEventCache.hasKey(key)) {        processEventCache.put(key,processFacade.getSupervisionStatus(key));      }    }    for (    Long key : equipmentCache.getKeys()) {      if (!equipmentEventCache.hasKey(key)) {        equipmentEventCache.put(key,equipmentFacade.getSupervisionStatus(key));      }    }    for (    Long key : subEquipmentCache.getKeys()) {      if (!subEquipmentEventCache.hasKey(key)) {        subEquipmentEventCache.put(key,subEquipmentFacade.getSupervisionStatus(key));      }    }  }  finally {    clusterCache.releaseWriteLockOnKey(EVENT_LOCK);  }}  }
class C{  @Provides @Singleton @BlobStoreZooKeeper CuratorFramework provideBlobStoreZooKeeperConnection(@Global CuratorFramework curator){  return withComponentNamespace(curator,"blob");}  }
class C{  @Override public void actionPerformed(ActionEvent event){  final ImportBlastDialog importBlastDialog=(ImportBlastDialog)getParent();  final File lastOpenFile=ProgramProperties.getFile(MeganProperties.BLASTFILE);  BlastFileFilter blastFileFilter=new BlastFileFilter();  blastFileFilter.add("rdp");  blastFileFilter.add("out");  blastFileFilter.add("sam");  blastFileFilter.add("log");  blastFileFilter.add("aln");  blastFileFilter.add("m8");  blastFileFilter.add("daa");  blastFileFilter.setAllowGZipped(true);  blastFileFilter.setAllowZipped(true);  java.util.List<File> files=ChooseFileDialog.chooseFilesToOpen(importBlastDialog,lastOpenFile,blastFileFilter,blastFileFilter,event,"Open BLAST (RDP, Silva or SAM) file(s)");  if (files.size() > 0) {    importBlastDialog.setBlastFileName(Basic.toString(files,"\n"));    importBlastDialog.getBlastFileNameField().setText(Basic.toString(files,"\n"));    final FastaFileFilter fastaFileFilter=new FastaFileFilter();    fastaFileFilter.add(".fastq");    fastaFileFilter.add(".fnq");    fastaFileFilter.add(".fq");    importBlastDialog.setReadFileName("");    for (    File aFile : files) {      String fileName=Basic.getAnExistingFileWithGivenExtension(aFile.getPath(),fastaFileFilter.getFileExtensions());      if (fileName == null)       fileName=Basic.getAnExistingFileWithGivenExtension(Basic.getFilePath(ProgramProperties.get(MeganProperties.READSFILE,""),aFile.getName()),fastaFileFilter.getFileExtensions());      if (fileName != null)       importBlastDialog.addReadFileName(fileName);    }    importBlastDialog.getReadFileNameField().setText(importBlastDialog.getReadFileName());    final String fileName=(files.size() > 1 ? Basic.getCommonPrefix(files.toArray(new File[files.size()]),"out") : files.get(0).getName());    final File meganFile=makeNewRMAFile(files.get(0).getParentFile(),fileName);    importBlastDialog.setMeganFileName(meganFile.getPath());    importBlastDialog.getMeganFileNameField().setText(meganFile.getPath());    ProgramProperties.put(MeganProperties.BLASTFILE,files.get(0));  }}  }
class C{  @Deprecated public boolean isValidShortNumberForRegion(String shortNumber,String regionDialingFrom){  PhoneMetadata phoneMetadata=metadataSource.getShortNumberMetadataForRegion(regionDialingFrom);  if (phoneMetadata == null) {    return false;  }  PhoneNumberDesc generalDesc=phoneMetadata.getGeneralDesc();  if (!matchesPossibleNumberAndNationalNumber(shortNumber,generalDesc)) {    return false;  }  PhoneNumberDesc shortNumberDesc=phoneMetadata.getShortCode();  return matchesPossibleNumberAndNationalNumber(shortNumber,shortNumberDesc);}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  if (name == null)   throw new InvalidObjectException("name cannot be null");  if (hash == 0)   throw new InvalidObjectException("hash cannot be zero");  integrity=MarshalledWrapper.integrityEnforced(in);}  }
class C{  public static String httpEngine(HttpServletRequest request,HttpServletResponse response){  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  Delegator delegator=(Delegator)request.getAttribute("delegator");  String serviceName=request.getParameter("serviceName");  String serviceMode=request.getParameter("serviceMode");  String xmlContext=request.getParameter("serviceContext");  Map<String,Object> result=new HashMap<String,Object>();  Map<String,Object> context=null;  if (serviceName == null)   result.put(ModelService.ERROR_MESSAGE,"Cannot have null service name");  if (serviceMode == null)   serviceMode="SYNC";  if (!result.containsKey(ModelService.ERROR_MESSAGE)) {    if (xmlContext != null) {      try {        Object o=XmlSerializer.deserialize(xmlContext,delegator);        if (o instanceof Map<?,?>)         context=UtilGenerics.checkMap(o); else {          Debug.logError("Context not an instance of Map error",module);          result.put(ModelService.ERROR_MESSAGE,"Context not an instance of Map");        }      } catch (      Exception e) {        Debug.logError(e,"Deserialization error",module);        result.put(ModelService.ERROR_MESSAGE,"Error occurred deserializing context: " + e.toString());      }    }  }  if (!result.containsKey(ModelService.ERROR_MESSAGE)) {    try {      ModelService model=dispatcher.getDispatchContext().getModelService(serviceName);      if (model.export || exportAll) {        if (serviceMode.equals("ASYNC")) {          dispatcher.runAsync(serviceName,context);        } else {          result=dispatcher.runSync(serviceName,context);        }      } else {        Debug.logWarning("Attempt to invoke a non-exported service: " + serviceName,module);        throw new GenericServiceException("Cannot find requested service");      }    } catch (    GenericServiceException e) {      Debug.logError(e,"Service invocation error",module);      result.put(ModelService.ERROR_MESSAGE,"Service invocation error: " + e.toString());    }  }  StringBuilder errorMessage=new StringBuilder();  String resultString=null;  try {    resultString=XmlSerializer.serialize(result);  } catch (  Exception e) {    Debug.logError(e,"Cannot serialize result",module);    if (result.containsKey(ModelService.ERROR_MESSAGE))     errorMessage.append(result.get(ModelService.ERROR_MESSAGE));    errorMessage.append("::");    errorMessage.append(e);  }  try {    PrintWriter out=response.getWriter();    response.setContentType("plain/text");    if (errorMessage.length() > 0) {      response.setContentLength(errorMessage.toString().getBytes().length);      out.write(errorMessage.toString());    } else {      response.setContentLength(resultString.getBytes().length);      out.write(resultString);    }    out.flush();    response.flushBuffer();  } catch (  IOException e) {    Debug.logError(e,"Problems w/ getting the servlet writer.",module);    return "error";  }  return null;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEARCH_SUFFIX\"";  db.execSQL(sql);}  }
class C{  private boolean has(Object spec){  if (!matched) {    return false;  }  String match=matcher.group(EXPR_TOKEN_GROUP);  if (spec instanceof Pattern) {    return ((Pattern)spec).matcher(match).matches();  }  return spec.equals(match);}  }
class C{  protected void rehash(int newCapacity){  int oldCapacity=_set.length;  int oldKeys[]=_set;  V oldVals[]=_values;  byte oldStates[]=_states;  _set=new int[newCapacity];  _values=(V[])new Object[newCapacity];  _states=new byte[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldStates[i] == FULL) {      int o=oldKeys[i];      int index=insertionIndex(o);      _set[index]=o;      _values[index]=oldVals[i];      _states[index]=FULL;    }  }}  }
class C{  private void writeName(String uri,String localName,String qName,boolean isElement) throws SAXException {  String prefix=doPrefix(uri,qName,isElement);  if (prefix != null && !"".equals(prefix)) {    write(prefix);    write(':');  }  if (localName != null && !"".equals(localName)) {    write(localName);  } else {    int i=qName.indexOf(':');    write(qName.substring(i + 1,qName.length()));  }}  }
class C{  public static void createTable(Database db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"NEWS\" ("+ "\"DATE\" TEXT,"+ "\"JSON_STRING\" TEXT,"+ "\"CREATED_TIME\" INTEGER);");}  }
class C{  private void putFieldsToDefaultValue(DataSupport baseObj,ContentValues values){  String fieldName=null;  try {    DataSupport emptyModel=getEmptyModel(baseObj);    Class<?> emptyModelClass=emptyModel.getClass();    for (    String name : baseObj.getFieldsToSetToDefault()) {      if (!isIdColumn(name)) {        fieldName=name;        Field field=emptyModelClass.getDeclaredField(fieldName);        putContentValues(emptyModel,field,values);      }    }  } catch (  NoSuchFieldException e) {    throw new DataSupportException(DataSupportException.noSuchFieldExceptioin(baseObj.getClassName(),fieldName));  }catch (  Exception e) {    throw new DataSupportException(e.getMessage());  }}  }
class C{  @Override public List<Class<? extends ConfigAspect>> mergeDependencies(){  return ImmutableList.<Class<? extends ConfigAspect>>of(HttpConfigAspect.class);}  }
class C{  public static int readByte(byte b,boolean signed){  if (signed) {    return b;  } else {    return b & 0xFF;  }}  }
class C{  @Override protected void onSetInitialValue(boolean restorePersistedValue,Object defaultValue){  setTime(restorePersistedValue ? getPersistedInt(mTime) : (int)defaultValue);}  }
class C{  public static String addToCartBulk(HttpServletRequest request,HttpServletResponse response){  String categoryId=request.getParameter("category_id");  ShoppingCart cart=getCartObject(request);  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  ShoppingCartHelper cartHelper=new ShoppingCartHelper(delegator,dispatcher,cart);  String controlDirective;  Map<String,Object> result;  Map<String,Object> paramMap=UtilHttp.getParameterMap(request);  String catalogId=CatalogWorker.getCurrentCatalogId(request);  result=cartHelper.addToCartBulk(catalogId,categoryId,paramMap);  controlDirective=processResult(result,request);  if (controlDirective.equals(ERROR)) {    return "error";  } else {    return "success";  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_StatDown_A_TO_ME(String skillcaster,String skilltarget,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200723,skillcaster,skilltarget,value0,skillname);}  }
class C{  public void addFile(File file){  addEntry(file.getPath());}  }
class C{  private void doTest(@NotNull String path,@NotNull String testClass) throws Exception {  guiTest.importProjectAndWaitForProjectSyncToFinish("ProjectWithUnitTests");  myEditor=guiTest.ideFrame().getEditor();  myEditor.open(path + "/" + testClass+ ".java");  myEditor.moveBetween("passing","Test");  runTestUnderCursor();  UnitTestTreeFixture unitTestTree=getTestTree(testClass + ".passingTest");  assertTrue(unitTestTree.isAllTestsPassed());  assertEquals(1,unitTestTree.getAllTestsCount());  myEditor.moveBetween("failing","Test");  runTestUnderCursor();  unitTestTree=getTestTree(testClass + ".failingTest");  assertEquals(1,unitTestTree.getFailingTestsCount());  assertEquals(1,unitTestTree.getAllTestsCount());  myEditor.moveBetween("(7",",");  myEditor.invokeAction(EditorFixture.EditorAction.BACK_SPACE);  myEditor.enterText("6");  runTestUnderCursor();  guiTest.waitForBackgroundTasks();  unitTestTree=getTestTree(testClass + ".failingTest");  assertTrue(unitTestTree.isAllTestsPassed());  assertEquals(1,unitTestTree.getAllTestsCount());  myEditor.moveBetween("class ",testClass);  runTestUnderCursor();  unitTestTree=getTestTree(testClass);  assertTrue(unitTestTree.isAllTestsPassed());  assertThat(unitTestTree.getAllTestsCount()).isGreaterThan(1);  myEditor.moveBetween("(6",",");  myEditor.invokeAction(EditorFixture.EditorAction.BACK_SPACE);  myEditor.enterText("8");  unitTestTree.getContent().rerun();  guiTest.waitForBackgroundTasks();  unitTestTree=getTestTree(testClass);  assertEquals(1,unitTestTree.getFailingTestsCount());  assertThat(unitTestTree.getAllTestsCount()).isGreaterThan(1);  myEditor.moveBetween("(8",",");  myEditor.invokeAction(EditorFixture.EditorAction.BACK_SPACE);  myEditor.enterText("6");  unitTestTree.getContent().rerunFailed();  guiTest.waitForBackgroundTasks();  unitTestTree=getTestTree("Rerun Failed Tests");  assertTrue(unitTestTree.isAllTestsPassed());  assertEquals(1,unitTestTree.getAllTestsCount());  guiTest.ideFrame().invokeMenuPath("Build","Rebuild Project");  guiTest.waitForBackgroundTasks();  myEditor.moveBetween("class ",testClass);  runTestUnderCursor();  unitTestTree=getTestTree(testClass);  assertTrue(unitTestTree.isAllTestsPassed());  assertThat(unitTestTree.getAllTestsCount()).isGreaterThan(1);}  }
class C{  public DataTypeException(Class type){  super("Type " + type.getName() + " not supported.");}  }
class C{  public SpecifiedLayout(String group,String xField,String yField){  super(group);  m_xfield=xField;  m_yfield=yField;}  }
class C{  public void writeExifData() throws IOException {  if (this.outFile == null) {    return;  }  if (this.aperture != null) {    this.outFile.setAttribute(ExifInterface.TAG_APERTURE,this.aperture);  }  if (this.datetime != null) {    this.outFile.setAttribute(ExifInterface.TAG_DATETIME,this.datetime);  }  if (this.exposureTime != null) {    this.outFile.setAttribute(ExifInterface.TAG_EXPOSURE_TIME,this.exposureTime);  }  if (this.flash != null) {    this.outFile.setAttribute(ExifInterface.TAG_FLASH,this.flash);  }  if (this.focalLength != null) {    this.outFile.setAttribute(ExifInterface.TAG_FOCAL_LENGTH,this.focalLength);  }  if (this.gpsAltitude != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_ALTITUDE,this.gpsAltitude);  }  if (this.gpsAltitudeRef != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_ALTITUDE_REF,this.gpsAltitudeRef);  }  if (this.gpsDateStamp != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_DATESTAMP,this.gpsDateStamp);  }  if (this.gpsLatitude != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_LATITUDE,this.gpsLatitude);  }  if (this.gpsLatitudeRef != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_LATITUDE_REF,this.gpsLatitudeRef);  }  if (this.gpsLongitude != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_LONGITUDE,this.gpsLongitude);  }  if (this.gpsLongitudeRef != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF,this.gpsLongitudeRef);  }  if (this.gpsProcessingMethod != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_PROCESSING_METHOD,this.gpsProcessingMethod);  }  if (this.gpsTimestamp != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_TIMESTAMP,this.gpsTimestamp);  }  if (this.iso != null) {    this.outFile.setAttribute(ExifInterface.TAG_ISO,this.iso);  }  if (this.make != null) {    this.outFile.setAttribute(ExifInterface.TAG_MAKE,this.make);  }  if (this.model != null) {    this.outFile.setAttribute(ExifInterface.TAG_MODEL,this.model);  }  if (this.orientation != null) {    this.outFile.setAttribute(ExifInterface.TAG_ORIENTATION,this.orientation);  }  if (this.whiteBalance != null) {    this.outFile.setAttribute(ExifInterface.TAG_WHITE_BALANCE,this.whiteBalance);  }  this.outFile.saveAttributes();}  }
class C{  public static boolean isIgnoredPermission(String permission){  if (permission == null) {    return false;  }  return getIgnoredPermissions().contains(permission);}  }
class C{  @Override public List<RoleModule> searchRoleModule(RoleModule roleModule){  return sessionTemplate.selectList(NAMESPACE + ".searchRoleModule",roleModule);}  }
class C{  public void absoluteLocal(){  m00=FastMath.abs(m00);  m01=FastMath.abs(m01);  m02=FastMath.abs(m02);  m10=FastMath.abs(m10);  m11=FastMath.abs(m11);  m12=FastMath.abs(m12);  m20=FastMath.abs(m20);  m21=FastMath.abs(m21);  m22=FastMath.abs(m22);}  }
class C{  private boolean groupsOverlap(String[] possibilities){  if (groups == null)   return true;  for (int i=0; i < possibilities.length; i++) {    if (groups.contains(possibilities[i]))     return true;  }  return false;}  }
class C{  public void processPicture(Bitmap bitmap,int encodingType){  ByteArrayOutputStream jpeg_data=new ByteArrayOutputStream();  CompressFormat compressFormat=encodingType == JPEG ? CompressFormat.JPEG : CompressFormat.PNG;  try {    if (bitmap.compress(compressFormat,mQuality,jpeg_data)) {      byte[] code=jpeg_data.toByteArray();      byte[] output=Base64.encode(code,Base64.NO_WRAP);      String js_out=new String(output);      this.callbackContext.success(js_out);      js_out=null;      output=null;      code=null;    }  } catch (  Exception e) {    this.failPicture("Error compressing image.");  }  jpeg_data=null;}  }
class C{  public IncompatibleComparatorException(Throwable cause){  super(cause);}  }
class C{  public boolean isSetOldGC(){  return __isset_bit_vector.get(__OLDGC_ISSET_ID);}  }
class C{  public SecondMoment(){  super();  m2=Double.NaN;}  }
class C{  public DummyReference withTimestamp(Instant newTimestamp){  return new DummyReference(this.reference,this.message,this.author,this.changesBase,newTimestamp);}  }
class C{  public SerialMessage startLevelChangeMessage(boolean increase,int duration){  logger.debug("NODE {}: Creating new message for command SWITCH_MULTILEVEL_START_LEVEL_CHANGE",getNode().getNodeId());  SerialMessage result=new SerialMessage(getNode().getNodeId(),SerialMessageClass.SendData,SerialMessageType.Request,SerialMessageClass.SendData,SerialMessagePriority.Set);  byte[] newPayload={(byte)getNode().getNodeId(),5,(byte)getCommandClass().getKey(),(byte)SWITCH_MULTILEVEL_START_LEVEL_CHANGE,0,0,0};  if (increase) {    newPayload[4]=32;  } else {    newPayload[4]=96;  }  newPayload[5]=0;  newPayload[6]=(byte)duration;  result.setMessagePayload(newPayload);  return result;}  }
class C{  public static void o(Z a,int w,int d){  System.out.print("\n");  System.out.print(ZtoEstring(a,w,d));  System.out.print("\n");}  }
class C{  public GossipSettings(int gossipInterval,int cleanupInterval){  this.gossipInterval=gossipInterval;  this.cleanupInterval=cleanupInterval;}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy,int duration){  mMode=SCROLL_MODE;  mScrollerX.startScroll(startX,dx,duration);  mScrollerY.startScroll(startY,dy,duration);}  }
class C{  public NaturalRanking(RandomGenerator randomGenerator){  super();  this.tiesStrategy=TiesStrategy.RANDOM;  nanStrategy=DEFAULT_NAN_STRATEGY;  randomData=RandomDataGenerator.of(randomGenerator);}  }
class C{  public boolean isCanceled(){  return canceled;}  }
class C{  public synchronized void resetTime(){}  }
class C{  public static int calcTextWidth(Paint paint,String demoText){  return (int)paint.measureText(demoText);}  }
class C{  public void configConstant(ConstantLoader constantLoader){}  }
class C{  @Override public void textDecl(String version,String encoding,Augmentations augs) throws XNIException {  if (fDTDGrammar != null)   fDTDGrammar.textDecl(version,encoding,augs);  if (fDTDHandler != null) {    fDTDHandler.textDecl(version,encoding,augs);  }}  }
class C{  public Transaction deleteTask(long taskId){  if (!mIsSuccess) {    return this;  }  mDatabase.delete(TasksTable.TABLE_NAME,BuildingBlocks.SELECTION_ID,new String[]{Long.toString(taskId)});  return this;}  }
class C{  @Override public boolean isDataSource(){  return true;}  }
class C{  public ShardRouterException(String message,Throwable cause){  super(message,cause);}  }
class C{  public boolean disableCharacteristicNotify(){  return disableCharacteristicNotify(getCharacteristic());}  }
class C{  public void synthesisWithContinuousFeatureProcessors() throws Exception {  int i, j, n, t;  String feaFile="/project/mary/marcela/f0-hsmm-experiment/THAT_BALL.pfeats";  HTSEngine hmm_tts=new HTSEngine();  HMMData htsData=new HMMData();  String MaryBase="/project/mary/marcela/openmary/";  String voiceName="cmu-slt-hsmm";  String voiceConfig="en_US-cmu-slt-hsmm.config";  String outWavFile=MaryBase + "tmp/tmp.wav";  htsData.initHMMData(voiceName,MaryBase,voiceConfig);  htsData.setUseAcousticModels(true);  htsData.setUseGV(true);  htsData.setUseMixExc(true);  htsData.setUseFourierMag(true);  HTSUttModel um=new HTSUttModel();  HTSParameterGeneration pdf2par=new HTSParameterGeneration();  HTSVocoder par2speech=new HTSVocoder();  AudioInputStream ais;  try {    um=hmm_tts.processUttFromFile(feaFile,htsData);    boolean debug=false;    pdf2par.htsMaximumLikelihoodParameterGeneration(um,htsData);    ais=par2speech.htsMLSAVocoder(pdf2par,htsData);    System.out.println("saving to file: " + outWavFile);    File fileOut=new File(outWavFile);    if (AudioSystem.isFileTypeSupported(AudioFileFormat.Type.WAVE,ais)) {      AudioSystem.write(ais,AudioFileFormat.Type.WAVE,fileOut);    }    System.out.println("Calling audioplayer:");    AudioPlayer player=new AudioPlayer(fileOut);    player.start();    player.join();    System.out.println("audioplayer finished...");  } catch (  Exception e) {    System.err.println("Exception: " + e.getMessage());  }}  }
class C{  public AggregationSet sum(String path){  return add(new SumAggregator().setPath(path));}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public TryWithResources fullCopy(){  TryWithResources tree=(TryWithResources)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public void putAndEnsureCapacity(long index,int value){  int segment=(int)(index >>> SEGMENT_BITS);  int position=(int)(index & SEGMENT_MASK);  if (segment >= segments.length) {    grow(segment + 1);    segments[segment][position]=value;    if (value != 0)     numberOfNonZeroEntries++;  } else {    final int old=segments[segment][position];    if (old == 0) {      if (value != 0) {        segments[segment][position]=value;        numberOfNonZeroEntries++;      }    } else {      segments[segment][position]=value;      if (value == 0)       numberOfNonZeroEntries--;    }  }  maxIndex=Math.max(maxIndex,index);}  }
class C{  protected WallEditQuery postId(int value){  return unsafeParam("post_id",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Summon_A_TO_SELF(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200880,skillcaster,value0,skillname);}  }
class C{  @Override public void onCompletion(MediaPlayer mp){  mVideoPlayer.seekTo(0);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public boolean catchableException(TypeDecl type){  Object _parameters=type;  if (catchableException_TypeDecl_values == null)   catchableException_TypeDecl_values=new java.util.HashMap(4);  if (catchableException_TypeDecl_values.containsKey(_parameters)) {    return ((Boolean)catchableException_TypeDecl_values.get(_parameters)).booleanValue();  }  ASTNode$State state=state();  int num=state.boundariesCrossed;  boolean isFinal=this.is$Final();  boolean catchableException_TypeDecl_value=catchableException_compute(type);  if (isFinal && num == state().boundariesCrossed)   catchableException_TypeDecl_values.put(_parameters,Boolean.valueOf(catchableException_TypeDecl_value));  return catchableException_TypeDecl_value;}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof ConnectionRelativeTime)) {    return false;  }  ConnectionRelativeTime cc=(ConnectionRelativeTime)obj;  return time == cc.time;}  }
class C{  public static int hash(int h){  h+=(h << 15) ^ 0xffffcd7d;  h^=(h >>> 10);  h+=(h << 3);  h^=(h >>> 6);  h+=(h << 2) + (h << 14);  return h ^ (h >>> 16);}  }
class C{  private void position(){  velocity.x=(int)(sx * 160);  velocity.y=(int)(sy * 160);  if (position.x < posX + this.map_controler.syncCnt)   dir=2; else   dir=14;  if (position.y < posY)   dir=(dir == 2) ? 2 : 14;  if (Math.abs(position.y - posY) <= 4) {    position.y=posY;    velocity.y=0;    if (position.x < posX + this.map_controler.syncCnt)     dir=4; else     dir=12;  }  if (Math.abs(position.x - (posX + this.map_controler.syncCnt)) <= 4) {    position.x=posX + this.map_controler.syncCnt;    velocity.x=0;    dir=0;  }  if (position.y == posY && position.x == posX + this.map_controler.syncCnt) {    dir=0;    sx=1;    status=SYNC;    return;  }  sx=this.map_controler.get_Direc_Dis_X(dir);  sy=this.map_controler.get_Direc_Dis_Y(dir);}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  OpenCamera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.getCamera().setOneShotPreviewCallback(previewCallback);  }}  }
class C{  public static double hypot(double a,double b){  double r;  if (Math.abs(a) > Math.abs(b)) {    r=b / a;    r=Math.abs(a) * Math.sqrt(1 + r * r);  } else   if (b != 0) {    r=a / b;    r=Math.abs(b) * Math.sqrt(1 + r * r);  } else {    r=0.0;  }  return r;}  }
class C{  public String listFeatureProcessorNames(){  String bytes=listByteValuedFeatureProcessorNames();  String shorts=listShortValuedFeatureProcessorNames();  String conts=listContinuousFeatureProcessorNames();  StringBuilder sb=new StringBuilder(bytes.length() + shorts.length() + conts.length()+ 2);  sb.append(bytes);  if (bytes.length() > 0 && shorts.length() > 0) {    sb.append(" ");  }  sb.append(shorts);  if (conts.length() > 0) {    sb.append(" ");  }  sb.append(conts);  return sb.toString();}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x110000];  int i=0;  int j=0;  while (i < 168) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  private LinkedHashMap<MetricColumn,Object> extractMetricValues(Set<MetricColumn> metricColumns,JsonNode entry){  LinkedHashMap<MetricColumn,Object> metricValues=new LinkedHashMap<>();  for (  MetricColumn mc : metricColumns) {    JsonNode fieldNode=entry.get(mc.getName());    if (fieldNode == null) {      LOG.warn("Found null node for metric column {}",mc.getName());    } else {      metricValues.put(mc,getNodeValue(fieldNode));    }  }  return metricValues;}  }
class C{  public EmailBuilder cc(String cc){  this.cc.add(cc);  return this;}  }
class C{  public ConversationFactory(Plugin plugin){  this.plugin=plugin;  isModal=true;  localEchoEnabled=true;  prefix=new NullConversationPrefix();  firstPrompt=Prompt.END_OF_CONVERSATION;  initialSessionData=new HashMap<Object,Object>();  playerOnlyMessage=null;  cancellers=new ArrayList<ConversationCanceller>();  abandonedListeners=new ArrayList<ConversationAbandonedListener>();}  }
class C{  public static int v(String tag,Object... msg){  return isPrint ? android.util.Log.v(tag,getLogMessage(msg)) : -1;}  }
class C{  private static JsonObject convertFileToJSON(String fileName){  JsonObject jsonObject=new JsonObject();  try {    JsonParser parser=new JsonParser();    JsonElement jsonElement=parser.parse(new FileReader(fileName));    jsonObject=jsonElement.getAsJsonObject();  } catch (  FileNotFoundException e) {    ConsoleManager.getInstance().exception(MXDParser.class,e);  }  return jsonObject;}  }
class C{  public FriendsGetSuggestionsQuery filter(List<FriendsGetSuggestionsFilter> value){  return unsafeParam("filter",value);}  }
class C{  public boolean pop(){  return fData[--fDepth];}  }
class C{  public void reset(){  mPacketCount=0;  mOctetCount=0;  setLong(mPacketCount,20,24);  setLong(mOctetCount,24,28);  delta=now=oldnow=0;}  }
class C{  private void visitFocus(NodeItem n,NodeItem c){  if (n.getDOI() <= -1) {    visit(n,c,0,0);    if (m_threshold < 0)     visitDescendants(n,c);    visitAncestors(n);  }}  }
class C{  public String readString() throws IOException {  int size=readInt();  if (Math.abs(size) > 100000000)   throw new IOException("Unreasonable string length: " + Math.abs(size));  byte[] bytes=new byte[Math.abs(size)];  int got=io.read(bytes,0,Math.abs(size));  if (got != Math.abs(size))   throw new IOException("Bytes read: " + got + ", expected: "+ Math.abs(size));  if (size < 0) {    try {      return compressor.inflateByteArray2String(-size,bytes);    } catch (    DataFormatException e) {      throw new IOException(e.getMessage());    }  } else {    return Compressor.convertUncompressedByteArray2String(size,bytes);  }}  }
class C{  private void chooseDataSourceToOpen(){  DataSourcePropertiesInterface dsProperties=SLDEditorFile.getInstance().getDataSource();  String dataSourceString=null;  if (dsProperties != null) {    dataSourceString=ExternalFilenames.convertURLToFile(dsProperties.getFilename());  }  JFileChooser fileChooser=new JFileChooser();  FileNameExtensionFilter filter=new FileNameExtensionFilter("Shape files","shp");  fileChooser.setFileFilter(filter);  try {    if (dataSourceString != null) {      File f=new File(new File(dataSourceString).getCanonicalPath());      if (f.exists()) {        fileChooser.setSelectedFile(f);      }    }    int result=fileChooser.showOpenDialog(Controller.getInstance().getFrame());    if (result == JFileChooser.APPROVE_OPTION) {      File selectedFile=fileChooser.getSelectedFile();      dsProperties=getDataSourceProperties(DataSourceProperties.encodeFilename(selectedFile.toURI().toURL().toString()));      SLDEditorFile.getInstance().setDataSource(dsProperties);      if (dataSource != null) {        dataSource.connect(SLDEditorFile.getInstance());      }    }  } catch (  IOException e1) {    ConsoleManager.getInstance().exception(this,e1);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Provoker_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200550,skilltarget,skillname);}  }
class C{  public void handleDecode(Result rawResult,Bundle bundle){  inactivityTimer.onActivity();  if (rawResult == null) {    Snackbar.make(scanContainer,getString(R.string.decode_null),Snackbar.LENGTH_SHORT).show();    return;  }  AudioPlayer.getInstance(this).playRaw(R.raw.scan,false,false);  operateResult(rawResult);}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  CrossesImpl filter=null;  if ((parameterList == null) || (parameterList.size() != 2)) {    filter=new CrossesExtended();  } else {    filter=new CrossesExtended(parameterList.get(0),parameterList.get(1));  }  return filter;}  }
class C{  public void unregisterOnSharedPreferenceChangeListener(SharedPreferences.OnSharedPreferenceChangeListener listener){  preferences.unregisterOnSharedPreferenceChangeListener(listener);}  }
class C{  public CounterTimeDeadbandActivator(final int numberOfCounters,final long checkInterval,final int maxTagsPerTime,final int timeDeadbandTime){  this(numberOfCounters,checkInterval,maxTagsPerTime,maxTagsPerTime / 2,timeDeadbandTime);}  }
class C{  public T onCreateViewHolderItemType(ViewGroup parent,ItemType itemType){switch (itemType) {case LVL3_ITEM:    return onCreateLvl3ItemViewHolder(parent);case LVL2_ITEM:  return onCreateLvl2ItemViewHolder(parent);case LVL1_ITEM:return onCreateLvl1ItemViewHolder(parent);case LVL0_ITEM:return onCreateLvl0ItemViewHolder(parent);case LVL3_SECTION:return onCreateLvl3SectionViewHolder(parent);case LVL2_SECTION:return onCreateLvl2SectionViewHolder(parent);case LVL1_SECTION:return onCreateLvl1SectionViewHolder(parent);default :return null;}}  }
class C{  public static void parseAndIgnoreWhitespace(final String source,final ParsePosition pos){  parseNextCharacter(source,pos);  pos.setIndex(pos.getIndex() - 1);}  }
class C{  public void resetCustom(){  mIsLegendCustom=false;}  }
class C{  public void clear(){  map.clear();}  }
class C{  public static WebSiteProperties from(Delegator delegator,String webSiteId) throws GenericEntityException {  Assert.notNull("webSiteId",webSiteId);  GenericValue webSiteValue=EntityQuery.use(delegator).from("WebSite").where("webSiteId",webSiteId).cache().queryOne();  if (webSiteValue != null) {    return from(webSiteValue);  } else {    throw new GenericEntityException("Scipio: Could not find WebSite for webSiteId '" + webSiteId + "'");  }}  }
class C{  @deprecated public UScriptRun(char[] chars){  reset(chars);}  }
class C{  protected FriendsSearchQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  boolean isAccepted(){  return accepted;}  }
class C{  public int compareTo(Object o){  int thisValue=this.value;  int thatValue=((ByteWritable)o).value;  return (thisValue < thatValue ? -1 : (thisValue == thatValue ? 0 : 1));}  }
class C{  private void processFormFieldBegin(){  currentFieldPosition++;  FormField field=formFields.get(currentFieldPosition);  slickFormSubmitButton.setText(field.getStepLabel());  slickFieldContainer.setVisibility(View.VISIBLE);  slickFieldContainer.setAlpha(0.0f);  slickFieldContainer.animate().translationY(slickFormSubmitButton.getY()).alpha(1.0f);  applySlideDownAnimationTo(slickFormSubmitButton);  slickFieldContainer.addView(field);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public RawMethodDecl fullCopy(){  RawMethodDecl tree=(RawMethodDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public SlickForm withProcessingLabel(String label){  this.endTag=label;  return this;}  }
class C{  public JSONObject(JSONObject jo,String[] names){  this();  for (int i=0; i < names.length; i+=1) {    try {      putOnce(names[i],jo.opt(names[i]));    } catch (    Exception ignore) {    }  }}  }
class C{  public static boolean supportsEnvelopedEntries(int version){  return version >= LogSegmentMetadataVersion.VERSION_V4_ENVELOPED_ENTRIES.value;}  }
class C{  public DefaultTaskConfigRouter(Map<String,String> config){  this.config=config;}  }
class C{  public MultiBufferProductPlan(Plan lhs,Plan rhs,Transaction tx){  this.lhs=lhs;  this.rhs=rhs;  this.tx=tx;  schema=new Schema();  schema.addAll(lhs.schema());  schema.addAll(rhs.schema());  hist=ProductPlan.productHistogram(lhs.histogram(),rhs.histogram());}  }
class C{  @POST @Timed @Path("/dimensions/{dimensionName}") @Consumes("application/json") public Response updateDimensionLastUpdated(@PathParam("dimensionName") String dimensionName,String json){  LOG.debug("Updating lastUpdated for dimension:{} using json: {}",dimensionName,json);  DimensionUpdateDate dimensionUpdateDate;  try {    Dimension dimension=dimensionDictionary.findByApiName(dimensionName);    if (dimension == null) {      LOG.error("Dimension {} cannot be found",dimensionName);      String message=String.format("Dimension %s cannot be found.",dimensionName);      return Response.status(BAD_REQUEST).entity(message).build();    }    dimensionUpdateDate=mapper.readValue(json,new TypeReference<DimensionUpdateDate>(){    });    if (dimensionUpdateDate.getLastUpdated() == null) {      LOG.error("lastUpdated value not in json");      return Response.status(BAD_REQUEST).entity("Last updated value not in json.").build();    }    dimension.setLastUpdated(dimensionUpdateDate.getLastUpdated());  } catch (  IOException e) {    LOG.error("Failed to process lastUpdated date: {}",e);    return Response.status(BAD_REQUEST).entity("Failed to process lastUpdated date: " + e).build();  }  LOG.info("Successfully updated lastUpdated {} for dimension: {}",dimensionUpdateDate.getLastUpdated(),dimensionName);  return Response.status(Status.OK).build();}  }
class C{  public static void checkArgument(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  private String encodePanelKey(String key,PopulateDetailsInterface panel){  return key + "/" + panel.getClass().getName();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_protect_PROTECT_HEAL_A_to_B(String protector,int num0,String skilltarget,String skillcaster){  return new SM_SYSTEM_MESSAGE(1201183,protector,num0,skilltarget,skillcaster);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("deselect series=");  List<String> list=np.getTokensRespectCase(null,";");  ChartViewer viewer=(ChartViewer)getViewer();  for (  String name : list) {    if (name.equalsIgnoreCase("all"))     viewer.getChartSelection().setSelectedSeries(viewer.getChartData().getSeriesNames(),false); else     viewer.getChartSelection().setSelectedSeries(name,false);  }  viewer.repaint();}  }
class C{  @ObjectiveCName("error:err:") void error(String rpcName,String err){  this.callback.onRpcError(rpcName,err);  this.clearTimeouts();}  }
class C{  private void fillQName(QName toFill,mf.javax.xml.namespace.QName toCopy){  StAXValidatorHelper.this.fillQName(toFill,toCopy.getNamespaceURI(),toCopy.getLocalPart(),toCopy.getPrefix());}  }
class C{  public static IQueryProcessor newInstance(IJSpace proxy,IRemoteSpace remoteSpace,Properties config) throws Exception {  if (isRemoteQueryProcessor(config))   return remoteSpace.getQueryProcessor();  ISpaceProxy clusteredProxy=(ISpaceProxy)proxy;  ISpaceProxy singleProxy=clusteredProxy;  if (clusteredProxy.isClustered()) {    singleProxy=(ISpaceProxy)clusteredProxy.getDirectProxy().getNonClusteredProxy();    CredentialsProvider credentialsProvider=clusteredProxy.getDirectProxy().getSecurityManager().getCredentialsProvider();    if (credentialsProvider != null)     singleProxy.getDirectProxy().getSecurityManager().login(credentialsProvider);  }  return newLocalInstance(clusteredProxy,singleProxy,config,null);}  }
class C{  public EventBuilder maxPriority(){  this.event.setPriority(Thread.MAX_PRIORITY);  return this;}  }
class C{  public MarketReorderItemsQuery albumId(Integer value){  return unsafeParam("album_id",value);}  }
class C{  public TapTarget transparentTarget(boolean transparent){  this.transparentTarget=transparent;  return this;}  }
class C{  TriDiagonalTransformer(RealMatrix matrix){  if (!matrix.isSquare()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NON_SQUARE_MATRIX,matrix.getRowDimension(),matrix.getColumnDimension());  }  final int m=matrix.getRowDimension();  householderVectors=matrix.getData();  main=new double[m];  secondary=new double[m - 1];  cachedQ=null;  cachedQt=null;  cachedT=null;  transform();}  }
class C{  public static boolean match(final String string,final int offset,final String query){  if (string.length() - offset < query.length())   return false;  for (int i=0; i < query.length(); i++) {    if (string.charAt(offset + i) != query.charAt(i))     return false;  }  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GET_EXP2_VITAL_MAKEUP_BONUS(long num0,long num1,long num2){  return new SM_SYSTEM_MESSAGE(1400350,num0,num1,num2);}  }
class C{  public boolean isApplicable(){  CompareWindow viewer=(CompareWindow)getParent();  return viewer != null;}  }
class C{  public static AudioDestination createAudioDestination() throws IOException {  boolean ram=false;  if (audiostoreProperty.equals("ram"))   ram=true; else   if (audiostoreProperty.equals("file"))   ram=false; else   ram=!lowMemoryCondition();  return new AudioDestination(ram);}  }
class C{  private boolean keyMatch(String key,LazyNode token){  if (token.type == LazyNode.EFIELD) {    String field=token.getStringValue(cbuf);    return field.equals(key);  } else {    int length=key.length();    if (token.endIndex - token.startIndex != length) {      return false;    }    for (int i=0; i < length; i++) {      char c=key.charAt(i);      if (c != cbuf[token.startIndex + i]) {        return false;      }    }    return true;  }}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (mCamera != null && mPreviewing) {    mAutoFocusCallback.setHandler(handler,message);    mCamera.autoFocus(mAutoFocusCallback);  }}  }
class C{  public void destroy(){  vmId=0L;}  }
class C{  private void initView(){  this.initContentView();  this.initLoadingView();}  }
class C{  private SchurTransformer transformToSchur(final RealMatrix matrix){  final SchurTransformer schurTransform=new SchurTransformer(matrix);  final double[][] matT=schurTransform.getT().getData();  realEigenvalues=new double[matT.length];  imagEigenvalues=new double[matT.length];  for (int i=0; i < realEigenvalues.length; i++) {    if (i == (realEigenvalues.length - 1) || Precision.equals(matT[i + 1][i],0.0,EPSILON)) {      realEigenvalues[i]=matT[i][i];    } else {      final double x=matT[i + 1][i + 1];      final double p=0.5 * (matT[i][i] - x);      final double z=FastMath.sqrt(FastMath.abs(p * p + matT[i + 1][i] * matT[i][i + 1]));      realEigenvalues[i]=x + p;      imagEigenvalues[i]=z;      realEigenvalues[i + 1]=x + p;      imagEigenvalues[i + 1]=-z;      i++;    }  }  return schurTransform;}  }
class C{  private void parseDateParam(Map<String,Integer> params,Object value){  if (value instanceof Number) {    int n=((Number)value).intValue();    if (n <= 31) {      if (params.get("day1") == null) {        params.put("day1",n);      } else {        params.put("day2",n);      }    } else {      if (params.get("year1") == null) {        params.put("year1",n);      } else {        params.put("year2",n);      }    }  }  if (value instanceof String) {    int n=MONTH.indexOf(((String)value).toUpperCase());    if (n > -1) {      if (params.get("month1") == null) {        params.put("month1",n);      } else {        params.put("month2",n);      }    }  }  if (GMT.equalsIgnoreCase(String.valueOf(value))) {    params.put("gmt",1);  }}  }
class C{  public static boolean isWithinWorld(int x,int y){  return x >= 0 && y >= 0 && x < (CHUNKS_X * Chunk.CHUNK_SIZE) && y < (CHUNKS_Y * Chunk.CHUNK_SIZE);}  }
class C{  public static void i(String c,String s){  if (isEnable()) {    if (s == null)     s="\"NULL\"";    Log.i(c,s);  }}  }
class C{  public static LpCoeffs calcLPC(double[] x,int p){  return calcLPC(x,p,0.0f);}  }
class C{  @Override public void startParameterEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augs) throws XNIException {  if (DEBUG_EVENTS) {    System.out.println("==>startParameterEntity: " + name);    if (DEBUG_BASEURI) {      System.out.println("   expandedSystemId: " + identifier.getExpandedSystemId());      System.out.println("   baseURI:" + identifier.getBaseSystemId());    }  }  if (augs != null && fInternalSubset != null && !fInDTDExternalSubset && Boolean.TRUE.equals(augs.getItem(Constants.ENTITY_SKIPPED))) {    fInternalSubset.append(name).append(";\n");  }  fBaseURIStack.push(identifier.getExpandedSystemId());}  }
class C{  private void free(){  this.ref=null;}  }
class C{  @Override public BKAsyncLogWriter startAsyncLogSegmentNonPartitioned() throws IOException {  return (BKAsyncLogWriter)FutureUtils.result(openAsyncLogWriter());}  }
class C{  private static byte calculateChecksum(byte[] buffer){  byte checkSum=(byte)0xFF;  for (int i=1; i < buffer.length - 1; i++) {    checkSum=(byte)(checkSum ^ buffer[i]);  }  logger.trace(String.format("Calculated checksum = 0x%02X",checkSum));  return checkSum;}  }
class C{  private static Enum createEnum(String enumName,EnumDescriptorProto enumDescriptorProto,String fileName){  com.google.protobuf.Enum.Builder coreEnumBuilder=com.google.protobuf.Enum.newBuilder().setName(enumName);  coreEnumBuilder.setSyntax(Syntax.SYNTAX_PROTO3);  for (  EnumValueDescriptorProto value : enumDescriptorProto.getValueList()) {    com.google.protobuf.EnumValue.Builder coreEnumValueBuilder=com.google.protobuf.EnumValue.newBuilder();    coreEnumValueBuilder.setName(value.getName()).setNumber(value.getNumber());    coreEnumBuilder.addEnumvalue(coreEnumValueBuilder.build());  }  coreEnumBuilder.setSourceContext(SourceContext.newBuilder().setFileName(fileName));  return coreEnumBuilder.build();}  }
class C{  static public Node transformDOM2DOM(InputStream _DOMInputStream,InputStream _XSLInputStream) throws TransformerException, TransformerConfigurationException, FileNotFoundException, IOException, ParserConfigurationException {  if (tFactory == null)   tFactory=TransformerFactory.newInstance();  Transformer transformer=tFactory.newTransformer(new StreamSource(_XSLInputStream));  Document convertedDoc=XmlUtils.getDocumentBuilder().newDocument();  DOMResult sr=new DOMResult(convertedDoc);  StreamSource ss=new StreamSource(_DOMInputStream);  transformer.transform(ss,sr);  Node retDOMnode=sr.getNode();  return retDOMnode;}  }
class C{  public void add(Predicate p,ShapeAction f){  super.add(p,f);}  }
class C{  public NewsfeedGetBannedQueryWithExtended nameCase(UsersNameCase value){  return unsafeParam("name_case",value);}  }
class C{  public void addPoint(final T point){  points.add(point);}  }
class C{  public int readInt(){  return scanner.nextInt();}  }
class C{  public void add(short val){  ensureCapacity(_pos + 1);  _data[_pos++]=val;}  }
class C{  public String sprintf(long x) throws IllegalArgumentException {  Enumeration e=vFmt.elements();  ConversionSpecification cs=null;  char c=0;  StringBuilder sb=new StringBuilder();  while (e.hasMoreElements()) {    cs=(ConversionSpecification)e.nextElement();    c=cs.getConversionCharacter();    if (c == '\0')     sb.append(cs.getLiteral()); else     if (c == '%')     sb.append("%"); else     sb.append(cs.internalsprintf(x));  }  return sb.toString();}  }
class C{  private static X500Name createX500NameForCertificate(CertificateInfo certificateInfo){  X500NameBuilder x500NameBuilder=new X500NameBuilder(BCStyle.INSTANCE);  if (certificateInfo.getCommonName() != null) {    x500NameBuilder.addRDN(BCStyle.CN,certificateInfo.getCommonName());  }  if (certificateInfo.getOrganization() != null) {    x500NameBuilder.addRDN(BCStyle.O,certificateInfo.getOrganization());  }  if (certificateInfo.getOrganizationalUnit() != null) {    x500NameBuilder.addRDN(BCStyle.OU,certificateInfo.getOrganizationalUnit());  }  if (certificateInfo.getEmail() != null) {    x500NameBuilder.addRDN(BCStyle.E,certificateInfo.getEmail());  }  if (certificateInfo.getLocality() != null) {    x500NameBuilder.addRDN(BCStyle.L,certificateInfo.getLocality());  }  if (certificateInfo.getState() != null) {    x500NameBuilder.addRDN(BCStyle.ST,certificateInfo.getState());  }  if (certificateInfo.getCountryCode() != null) {    x500NameBuilder.addRDN(BCStyle.C,certificateInfo.getCountryCode());  }  return x500NameBuilder.build();}  }
class C{  GSStreamMessageImpl(GSSessionImpl session) throws JMSException {  super(session,GSMessageImpl.STREAM);}  }
class C{  public int size(){  return length() + 3;}  }
class C{  public void write(IOutputWriter w) throws IOException {  infoSectionStart=w.getPosition();  w.write(version);  w.writeLong(creationDate);  w.writeLong(modificationDate);  w.writeInt(numberOfReads);  w.writeInt(numberOfMatches);  if (version != VERSION_RMA2_0) {    w.writeString(rma2Formatter.getReadBlockRMA2Formatter().toString());    w.writeString(rma2Formatter.getMatchBlockRMA2Formatter().toString());  }  w.write(TextStoragePolicy.getId(textStoragePolicy));switch (textStoragePolicy) {case Embed:    w.writeLong(dataDumpSectionStart);  w.writeLong(dataDumpSectionEnd);break;case InRMAZ:case Reference:w.writeInt(textFileNames.length);for (String textFileName : textFileNames) {if (textFileName != null) w.writeString(textFileName); else w.writeString("");}if (textFileSizes == null) w.writeInt(0); else {w.writeInt(textFileSizes.length);for (Long textFileSize : textFileSizes) {if (textFileSize != null) w.writeLong(textFileSize); else w.writeLong(-1);}}break;default :throw new IOException("Unknown textStoragePolicy: " + textStoragePolicy);}w.writeLong(dataIndexSectionStart);w.writeLong(dataIndexSectionEnd);w.writeInt(classificationNames.length);for (String name : classificationNames) w.writeString(name);for (int size : classificationSizes) w.writeInt(size);for (long pos : classificationIndexSectionStart) w.writeLong(pos);for (long pos : classificationIndexSectionEnd) w.writeLong(pos);for (long pos : classificationDumpSectionStart) w.writeLong(pos);for (long pos : classificationDumpSectionEnd) w.writeLong(pos);w.writeLong(auxiliaryDataStart);w.writeLong(auxiliaryDataEnd);w.write(AUXILIARY_DATA_AS_MAP_BYTE);w.write(RMA2File.CHECK_BYTE);w.writeLong(infoSectionStart);}  }
class C{  public SingleFileAudioPlayer(){  this(Utilities.getProperty("com.sun.speech.freetts.AudioPlayer.baseName","freetts"),AudioFileFormat.Type.WAVE);}  }
class C{  public InfoflowResults analyzeAPKFile(String fileName) throws IOException, XmlPullParserException {  return analyzeAPKFile(fileName,false);}  }
class C{  public DynamicPolicyProvider(Policy basePolicy){  if (basePolicy == null) {    throw new NullPointerException();  }  this.basePolicy=basePolicy;  cacheBasePerms=!(basePolicy instanceof DynamicPolicy);  ensureDependenciesResolved();}  }
class C{  private int replicateAndfreeCache(Context context){  if (context != null) {    try {      return performReplication(context);    }  finally {      _cacheManager.freeCacheContext(context);    }  }  return 0;}  }
class C{  public static void removeMarkers(JTextComponent editorPane){  removeMarkers(editorPane,null);}  }
class C{  @TargetApi(23) private static boolean checkSelfPermissionForXiaomi(Context context,String permission){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {    try {      return checkSelfPermission(context,permission) == PackageManager.PERMISSION_GRANTED;    } catch (    RuntimeException t) {      return false;    }  }  int auth=ActivityCompat.checkSelfPermission(context,permission);  AppOpsManager appOpsManager=(AppOpsManager)context.getSystemService(Context.APP_OPS_SERVICE);  int checkOp=appOpsManager.checkOp(AppOpsManager.permissionToOp(permission),Process.myUid(),context.getPackageName());  if (auth == PackageManager.PERMISSION_GRANTED && checkOp == AppOpsManager.MODE_ALLOWED) {    return true;  }  if (auth == PackageManager.PERMISSION_GRANTED && checkOp == AppOpsManager.MODE_IGNORED) {    return false;  }  return false;}  }
class C{  public AuthenticatorException(){  super();}  }
class C{  private static BitMatrix bitMatrixFromEncoder(PDF417 encoder,String contents,int errorCorrectionLevel,int width,int height,int margin) throws WriterException {  encoder.generateBarcodeLogic(contents,errorCorrectionLevel);  int aspectRatio=4;  byte[][] originalScale=encoder.getBarcodeMatrix().getScaledMatrix(1,aspectRatio);  boolean rotated=false;  if ((height > width) ^ (originalScale[0].length < originalScale.length)) {    originalScale=rotateArray(originalScale);    rotated=true;  }  int scaleX=width / originalScale[0].length;  int scaleY=height / originalScale.length;  int scale;  if (scaleX < scaleY) {    scale=scaleX;  } else {    scale=scaleY;  }  if (scale > 1) {    byte[][] scaledMatrix=encoder.getBarcodeMatrix().getScaledMatrix(scale,scale * aspectRatio);    if (rotated) {      scaledMatrix=rotateArray(scaledMatrix);    }    return bitMatrixFrombitArray(scaledMatrix,margin);  }  return bitMatrixFrombitArray(originalScale,margin);}  }
class C{  public int read() throws EOFException {  try {    int value=array[cursor()];    advance(1);    return value & 0xffff;  } catch (  ArrayIndexOutOfBoundsException ex) {    throw new EOFException();  }}  }
class C{  public boolean equals(Object object){  return object instanceof Split && equals((Split)object);}  }
class C{  public static boolean isCraftingSkill(int skillId){  Iterator<Integer> it=craftingSkillIds.iterator();  while (it.hasNext()) {    if (it.next() == skillId) {      return true;    }  }  return false;}  }
class C{  public static Rot genr(Zmat A,int ii,int jj1,int jj2){  A.dirty=true;  int i=ii - A.basex;  int j1=jj1 - A.basex;  int j2=jj2 - A.basex;  Rot P=Rot.genr(A.re[i][j1],A.im[i][j1],A.re[i][j2],A.im[i][j2]);  A.re[i][j1]=P.zr;  A.im[i][j1]=P.zi;  A.re[i][j2]=0;  A.im[i][j2]=0;  return P;}  }
class C{  private static String toDp(int n){  return String.format("%d" + UNIT_DP,n);}  }
class C{  public static Z uz(){  return new Z(R.nextDouble(),R.nextDouble());}  }
class C{  public void register(Object listener){  eventBus.register(listener);  Logs.info("register an listener({})",listener);}  }
class C{  protected void initializeSchedulerProperties(Properties properties){  if (this.schedulerProperties != null) {    throw new IllegalStateException("Can't overwrite scheduler properties when they are already set. Set the properties before adding Jobs, and do not change them afterwards.");  }  this.schedulerProperties=properties;}  }
class C{  public boolean isProgressDialogShowing(){  return null != mProgressDialog && mProgressDialog.isShowing();}  }
class C{  public static String searchExportProductList(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  String errMsg=null;  List<Map<String,Object>> productExportList=FastList.newInstance();  try {    boolean beganTransaction=TransactionUtil.begin(DEFAULT_TX_TIMEOUT);    try {      EntityListIterator eli=getProductSearchResults(request);      if (eli == null) {        errMsg=UtilProperties.getMessage(resource,"productsearchevents.no_results_found_probably_error_constraints",UtilHttp.getLocale(request));        request.setAttribute("_ERROR_MESSAGE_",errMsg);        return "error";      }      GenericValue searchResultView=null;      while ((searchResultView=eli.next()) != null) {        Map<String,Object> productMap=FastMap.newInstance();        String productId=searchResultView.getString("mainProductId");        productMap.put("productId",productId);        productMap.put("productFeatureCustom",EntityQuery.use(delegator).from("ProductFeatureAndAppl").where("productId",productId,"productFeatureTypeId","HAZMAT").filterByDate().queryFirst());        List<GenericValue> productCategories=EntityQuery.use(delegator).from("ProductCategoryAndMember").where("productId",productId).filterByDate().queryList();        productMap.put("productCategories",productCategories);        List<GenericValue> productFeatures=EntityQuery.use(delegator).from("ProductFeatureAndAppl").where("productId",productId).filterByDate().queryList();        productMap.put("productFeatures",productFeatures);        productExportList.add(productMap);      }      eli.close();    } catch (    GenericEntityException e) {      Map<String,String> messageMap=UtilMisc.toMap("errSearchResult",e.toString());      errMsg=UtilProperties.getMessage(resource,"productsearchevents.error_getting_search_results",messageMap,UtilHttp.getLocale(request));      Debug.logError(e,errMsg,module);      request.setAttribute("_ERROR_MESSAGE_",errMsg);      TransactionUtil.rollback(beganTransaction,errMsg,e);      return "error";    } finally {      TransactionUtil.commit(beganTransaction);    }  } catch (  GenericTransactionException e) {    Map<String,String> messageMap=UtilMisc.toMap("errSearchResult",e.toString());    errMsg=UtilProperties.getMessage(resource,"productsearchevents.error_getting_search_results",messageMap,UtilHttp.getLocale(request));    Debug.logError(e,errMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  request.setAttribute("productExportList",productExportList);  return "success";}  }
class C{  private void startScrolling(){  if (!isScrollingPerformed) {    isScrollingPerformed=true;    notifyScrollingListenersAboutStart();  }}  }
class C{  public void onNewIntent(Intent intent){  if (mInitializationComplete) {    mActivityDelegate.onNewIntentWithNative(intent);  } else {    if (mPendingNewIntents == null)     mPendingNewIntents=new ArrayList<Intent>(1);    mPendingNewIntents.add(intent);  }}  }
class C{  public GSConnectionFactoryImpl(){}  }
class C{  private String loadRMIRegistry(String hostAndPort) throws Exception {  String jndiFlag=_url.getCustomProperties().getProperty(XPathProperties.CONTAINER_JNDI_ENABLED);  if (!JSpaceUtilities.isEmpty(jndiFlag) && jndiFlag.equalsIgnoreCase("false")) {    if (_rmiHostAndPort == null)     return hostAndPort;    return _rmiHostAndPort;  }  if (_rmiHostAndPort != null)   return _rmiHostAndPort;  _rmiHostAndPort=hostAndPort;  if (hostAndPort != null && hostAndPort.indexOf(':') != -1) {    try {      int jndiPort=0;      int portSeparator=hostAndPort.lastIndexOf(":");      String hostName=hostAndPort.substring(0,portSeparator);      jndiPort=Integer.parseInt(hostAndPort.substring(portSeparator + 1));      String registryPortStr=System.getProperty(CommonSystemProperties.REGISTRY_PORT);      boolean isStartedRMIRegistry=false;      boolean isPortOccupiedByAnotherAppl=false;      if (registryPortStr != null) {        jndiPort=Integer.parseInt(registryPortStr);        try {          LocateRegistry.createRegistry(jndiPort);          isStartedRMIRegistry=true;        } catch (        RemoteException re) {          try {            Registry registry=LocateRegistry.getRegistry(jndiPort);            registry.list();          } catch (          RemoteException exc) {            isPortOccupiedByAnotherAppl=true;            if (_logger.isLoggable(Level.INFO)) {              _logger.info("Failed to run RMI registry on " + jndiPort + ".Port is busy.");            }          }          isStartedRMIRegistry=false;        }      }      if ((!isStartedRMIRegistry && registryPortStr == null) || isPortOccupiedByAnotherAppl) {        while (IOUtils.isPortBusy(jndiPort,null)) {          jndiPort=IOUtils.getAnonymousPort();        }        LocateRegistry.createRegistry(jndiPort);        System.setProperty(CommonSystemProperties.REGISTRY_PORT,String.valueOf(jndiPort));      }      _rmiHostAndPort=hostName + ":" + jndiPort;      if (!isStartedRMIRegistry && registryPortStr == null) {        String jmxServiceURL=JMXUtilities.createJMXUrl(_rmiHostAndPort);        System.setProperty(CommonSystemProperties.JMX_SERVICE_URL,jmxServiceURL);        if (_logger.isLoggable(Level.CONFIG))         _logger.config("Created RMIRegistry on: < " + _rmiHostAndPort + " >");      } else {        if (_logger.isLoggable(Level.CONFIG))         _logger.config("Using an already running RMIRegistry on: < " + _rmiHostAndPort + " >");      }    } catch (    RemoteException ex) {      if (_logger.isLoggable(Level.CONFIG)) {        _logger.config("RMIRegistry did not start on: < " + _rmiHostAndPort + " >. It might be already running.");      }    }  }  return _rmiHostAndPort;}  }
class C{  public static File writePatchFileContents(List<String> patchFileContents,File outputDir){  ClassWriter cw=new ClassWriter(0);  MethodVisitor mv;  cw.visit(Opcodes.V1_6,Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER,IncrementalVisitor.APP_PATCHES_LOADER_IMPL,null,IncrementalVisitor.ABSTRACT_PATCHES_LOADER_IMPL,null);{    mv=cw.visitMethod(Opcodes.ACC_PUBLIC,"<init>","()V",null,null);    mv.visitCode();    mv.visitVarInsn(Opcodes.ALOAD,0);    mv.visitMethodInsn(Opcodes.INVOKESPECIAL,IncrementalVisitor.ABSTRACT_PATCHES_LOADER_IMPL,"<init>","()V",false);    mv.visitInsn(Opcodes.RETURN);    mv.visitMaxs(1,1);    mv.visitEnd();  }{    mv=cw.visitMethod(Opcodes.ACC_PUBLIC,"getPatchedClasses","()[Ljava/lang/String;",null,null);    mv.visitCode();    mv.visitIntInsn(Opcodes.BIPUSH,patchFileContents.size());    mv.visitTypeInsn(Opcodes.ANEWARRAY,"java/lang/String");    for (int index=0; index < patchFileContents.size(); index++) {      mv.visitInsn(Opcodes.DUP);      mv.visitIntInsn(Opcodes.BIPUSH,index);      mv.visitLdcInsn(patchFileContents.get(index));      mv.visitInsn(Opcodes.AASTORE);    }    mv.visitInsn(Opcodes.ARETURN);    mv.visitMaxs(4,1);    mv.visitEnd();  }  cw.visitEnd();  byte[] classBytes=cw.toByteArray();  File outputFile=new File(outputDir,IncrementalVisitor.APP_PATCHES_LOADER_IMPL + ".class");  try {    Files.createParentDirs(outputFile);    Files.write(classBytes,outputFile);    return outputFile;  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException(e);  }}  }
class C{  public WaitForAllListener(int numberOfResults){  this(numberOfResults,null);}  }
class C{  public DocumentNGramGaussNormGraph(){  InitGraphs();}  }
class C{  public CarouselOptions animationDuration(int animationDuration){  mAnimationDuration=animationDuration;  return this;}  }
class C{  private String printSFormat(String x){  int nPrint=x.length();  int width=fieldWidth;  if (precisionSet && nPrint > precision)   nPrint=precision;  if (!fieldWidthSet)   width=nPrint;  int n=0;  if (width > nPrint)   n+=width - nPrint;  if (nPrint >= x.length())   n+=x.length(); else   n+=nPrint;  char[] ca=new char[n];  int i=0;  if (leftJustify) {    if (nPrint >= x.length()) {      char[] csx=x.toCharArray();      for (i=0; i < x.length(); i++)       ca[i]=csx[i];    } else {      char[] csx=x.substring(0,nPrint).toCharArray();      for (i=0; i < nPrint; i++)       ca[i]=csx[i];    }    for (int j=0; j < width - nPrint; j++, i++)     ca[i]=' ';  } else {    for (i=0; i < width - nPrint; i++)     ca[i]=' ';    if (nPrint >= x.length()) {      char[] csx=x.toCharArray();      for (int j=0; j < x.length(); i++, j++)       ca[i]=csx[j];    } else {      char[] csx=x.substring(0,nPrint).toCharArray();      for (int j=0; j < nPrint; i++, j++)       ca[i]=csx[j];    }  }  return new String(ca);}  }
class C{  public static boolean execute(String s,Map<String,Object> m) throws Exception {  log.debug("vengine.execute ...");  try {    VelocityContext context=new VelocityContext(m);    StringWriter out=new StringWriter();    Velocity.evaluate(context,out,"ve",s);    log.debug("s=" + s + ", out="+ out);    return true;  } catch (  Exception e) {    log.error(s,e);    throw e;  }}  }
class C{  public Lexicon(String fileName){  this();  String[] words=UTF8FileIO.readLines(fileName);  for (  String word : words) {    addWord(word);  }}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  private String readLine() throws IOException {  String line=null;  int newLineMatchByteCount;  boolean isLastFilePart=no == 1;  int i=currentLastBytePos;  while (i > -1) {    if (!isLastFilePart && i < avoidNewlineSplitBufferSize) {      createLeftOver();      break;    }    if ((newLineMatchByteCount=getNewLineMatchByteCount(data,i)) > 0) {      final int lineStart=i + 1;      int lineLengthBytes=currentLastBytePos - lineStart + 1;      if (lineLengthBytes < 0) {        throw new IllegalStateException("Unexpected negative line length=" + lineLengthBytes);      }      byte[] lineData=new byte[lineLengthBytes];      System.arraycopy(data,lineStart,lineData,0,lineLengthBytes);      line=new String(lineData,encoding);      currentLastBytePos=i - newLineMatchByteCount;      break;    }    i-=byteDecrement;    if (i < 0) {      createLeftOver();      break;    }  }  if (isLastFilePart && leftOver != null) {    line=new String(leftOver,encoding);    leftOver=null;  }  return line;}  }
class C{  public VideoGetCatalogSectionQuery(VkApiClient client,String sectionId,String from){  super(client,"video.getCatalogSection",GetCatalogSectionResponse.class);  sectionId(sectionId);  from(from);}  }
class C{  public ForceSimulator(Integrator integr){  integrator=integr;  iforces=new Force[5];  sforces=new Force[5];  iflen=0;  sflen=0;  items=new ArrayList();  springs=new ArrayList();}  }
class C{  public BesselJResult(double[] b,int n){  vals=b.clone();  nVals=n;}  }
class C{  public static char[] toCharArray(InputStream is) throws IOException {  return toCharArray(is,Charset.defaultCharset());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_EXTRACT_GATHER_START_1_BASIC(String value0){  return new SM_SYSTEM_MESSAGE(1330077,value0);}  }
class C{  public Suggester(){  this(0.80);}  }
class C{  private EmoClientException asEmoClientException(UniformInterfaceException e) throws EmoClientException {  throw new EmoClientException(e.getMessage(),e,toEmoResponse(e.getResponse()));}  }
class C{  private void sendMessageFirebase(){  ChatModel model=new ChatModel(userModel,edMessage.getText().toString(),Calendar.getInstance().getTime().getTime() + "",null);  mFirebaseDatabaseReference.child(CHAT_REFERENCE).push().setValue(model);  edMessage.setText(null);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysHit_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200786,skillcaster,skillname);}  }
class C{  public ArithmeticMaker(MetricDictionary metricDictionary,ArithmeticPostAggregationFunction function){  this(metricDictionary,function,new SketchRoundUpMapper());}  }
class C{  public boolean isCurrentSelected(){  return isCurrentSet() && toSelectTaxonIds.contains(currentTaxonId);}  }
class C{  public UserCriteria(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public static String clockFormat(long duration){  long value=duration;  value=value / 1000;  long seconds=value % 60;  value=value / 60;  long minutes=value % 60;  value=value / 60;  long hours=value % 24;  return ((hours < 10 ? "0" + hours : "" + hours) + ":" + (minutes < 10 ? "0" + minutes : "" + minutes)+ ":"+ (seconds < 10 ? "0" + seconds : "" + seconds));}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (perms == null) {    throw new InvalidObjectException("list cannot be null");  }  if (!perms.getClass().equals(ArrayList.class)) {    perms=new ArrayList(perms);  }  if (perms.contains(null)) {    throw new InvalidObjectException("element must be a GrantPermission");  }  GrantPermission[] pa;  try {    pa=(GrantPermission[])perms.toArray(new GrantPermission[perms.size()]);  } catch (  ArrayStoreException e) {    throw new InvalidObjectException("element must be a GrantPermission");  }  implier=new Implier();  for (int i=0; i < pa.length; i++) {    implier.add(pa[i]);  }}  }
class C{  static boolean manifestSpecifiesMultiProcess(@Nullable Element element,@NotNull Set<String> allowedProcesses){  if (element == null) {    return false;  }  NodeList children=element.getChildNodes();  for (int i=0, n=children.getLength(); i < n; i++) {    Node child=children.item(i);    if (child.getNodeType() == Node.ELEMENT_NODE) {      if (manifestSpecifiesMultiProcess((Element)child,allowedProcesses)) {        return true;      }    }  }  String process=element.getAttributeNS(ANDROID_URI,"process");  if (!process.isEmpty() && !allowedProcesses.contains(process)) {    return true;  }  return false;}  }
class C{  public static void writeln(String fileName,List<String> lines){  String[] a=lines.toArray(new String[lines.size()]);  writeln(fileName,a);}  }
class C{  public static String parseCharset(Map<String,String> headers,String defaultCharset){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return defaultCharset;}  }
class C{  public static GenericEntity createGenericEntity(ModelEntity modelEntity){  if (modelEntity == null) {    throw new IllegalArgumentException("Cannot create a GenericEntity with a null modelEntity parameter");  }  GenericEntity newEntity=new GenericEntity();  newEntity.init(modelEntity);  return newEntity;}  }
class C{  public void cancelJob(int uid,int jobId){  JobStatus toCancel;synchronized (mJobs) {    toCancel=mJobs.getJobByUidAndJobId(uid,jobId);  }  if (toCancel != null) {    cancelJobImpl(toCancel);  }}  }
class C{  public void seekToPlaying(int milliseconds){  if (this.readyPlayer(this.audioFile)) {    this.player.seekTo(milliseconds);    Log.d(LOG_TAG,"Send a onStatus update for the new seek");    sendStatusChange(MEDIA_POSITION,null,(milliseconds / 1000.0f));  } else {    this.seekOnPrepared=milliseconds;  }}  }
class C{  public AlignerTrainer(){  this(false,false);}  }
class C{  private String printXFormat(String sx){  int nLeadingZeros=0;  int nBlanks=0;  if (sx.equals("0") && precisionSet && precision == 0)   sx="";  if (precisionSet)   nLeadingZeros=precision - sx.length();  if (nLeadingZeros < 0)   nLeadingZeros=0;  if (fieldWidthSet) {    nBlanks=fieldWidth - nLeadingZeros - sx.length();    if (alternateForm)     nBlanks=nBlanks - 2;  }  if (nBlanks < 0)   nBlanks=0;  int n=0;  if (alternateForm)   n+=2;  n+=nLeadingZeros;  n+=sx.length();  n+=nBlanks;  char[] ca=new char[n];  int i=0;  if (leftJustify) {    if (alternateForm) {      ca[i++]='0';      ca[i++]='x';    }    for (int j=0; j < nLeadingZeros; j++, i++)     ca[i]='0';    char[] csx=sx.toCharArray();    for (int j=0; j < csx.length; j++, i++)     ca[i]=csx[j];    for (int j=0; j < nBlanks; j++, i++)     ca[i]=' ';  } else {    if (!leadingZeros)     for (int j=0; j < nBlanks; j++, i++)     ca[i]=' ';    if (alternateForm) {      ca[i++]='0';      ca[i++]='x';    }    if (leadingZeros)     for (int j=0; j < nBlanks; j++, i++)     ca[i]='0';    for (int j=0; j < nLeadingZeros; j++, i++)     ca[i]='0';    char[] csx=sx.toCharArray();    for (int j=0; j < csx.length; j++, i++)     ca[i]=csx[j];  }  String caReturn=new String(ca);  if (conversionCharacter == 'X')   caReturn=caReturn.toUpperCase();  return caReturn;}  }
class C{  static VersionNumber identifyWebOSVersion(final String userAgent){  VersionNumber version=VersionNumber.UNKNOWN;  final List<Pattern> patterns=new ArrayList<Pattern>();  patterns.add(Pattern.compile("hpwOS/((\\d+)((\\.\\d+)+)?);"));  patterns.add(Pattern.compile("webOS/((\\d+)((\\.\\d+)+)?);"));  for (  final Pattern pattern : patterns) {    final Matcher m=pattern.matcher(userAgent);    if (m.find()) {      version=parseFirstVersionNumber(m.group(MAJOR_INDEX));      break;    }  }  return version;}  }
class C{  public EntireTextBuilder addBackgroundRes(@ColorRes int bgColorRes,int start,int end){  return addBackground(getColor(mContext,bgColorRes),start,end);}  }
class C{  static double checkDouble(double d) throws JSONException {  if (Double.isInfinite(d) || Double.isNaN(d)) {    throw new JSONException("Forbidden numeric value: " + d);  }  return d;}  }
class C{  protected AuthCheckPhoneQuery clientSecret(String value){  return unsafeParam("client_secret",value);}  }
class C{  @Override public boolean next(){  while (true) {    if (rp.next())     return true;    if (current == endBlkNum)     return false;    moveToBlock(current + 1);  }}  }
class C{  public GaussWindow(int length){  this(length,DEFAULT_SIGMA,1.);}  }
class C{  public static void destroyInstance(WorldMapInstance instance){  if (instance.getEmptyInstanceTask() != null) {    instance.getEmptyInstanceTask().cancel(false);  }  int worldId=instance.getMapId();  WorldMap map=World.getInstance().getWorldMap(worldId);  if (!map.isInstanceType()) {    return;  }  int instanceId=instance.getInstanceId();  map.removeWorldMapInstance(instanceId);  log.info("Destroying instance:" + worldId + " "+ instanceId);  Iterator<VisibleObject> it=instance.objectIterator();  while (it.hasNext()) {    VisibleObject obj=it.next();    if (obj instanceof Player) {      Player player=(Player)obj;      PacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(SystemMessageId.LEAVE_INSTANCE_NOT_PARTY));      moveToExitPoint((Player)obj);    } else {      obj.getController().onDelete();    }  }  instance.getInstanceHandler().onInstanceDestroy();  if (instance instanceof WorldMap2DInstance) {    WorldMap2DInstance w2d=(WorldMap2DInstance)instance;    if (w2d.isPersonal()) {      HousingService.getInstance().onInstanceDestroy(w2d.getOwnerId());    }  }  WalkerFormator.onInstanceDestroy(worldId,instanceId);}  }
class C{  @Override public IntegerDistribution makeDistribution(){  return new HypergeometricDistribution(10,5,5);}  }
class C{  public RegisterReplicationNotificationRequestInfo(){}  }
class C{  @Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){  FieldConfigWindBarbs copy=null;  if (fieldConfigBase != null) {    copy=new FieldConfigWindBarbs(fieldConfigBase.getCommonData());  }  return copy;}  }
class C{  public void parseLines(String queryLine,String midLine,String subjectLine) throws IOException {  if (!queryLine.startsWith(Query))   throw new IOException("Token '" + Query + "' not found in line: "+ queryLine);  String[] queryTokens=queryLine.split("\\s+");  if (queryTokens.length != 4)   throw new IOException("Wrong number of tokens: " + queryTokens.length + " in query line: "+ queryLine);  queryStart=Basic.parseInt(queryTokens[1]);  querySequence=queryTokens[2];  queryEnd=Basic.parseInt(queryTokens[3]);  if (!subjectLine.startsWith(Subject))   throw new IOException("Token '" + Subject + "' not found in line: "+ midLine);  String[] subjTokens=subjectLine.split("\\s+");  if (subjTokens.length != 4)   throw new IOException("Wrong number of tokens: " + subjTokens.length + " in subject line: "+ subjectLine);  refStart=Basic.parseInt(subjTokens[1]);  refSequence=subjTokens[2];  refEnd=Basic.parseInt(subjTokens[3]);}  }
class C{  private static AccessControlContext createPrivilegedContext(Class caller,AccessControlContext acc){  DomainCombiner comb=acc.getDomainCombiner();  ProtectionDomain pd=caller.getProtectionDomain();  ProtectionDomain[] pds=(pd != null) ? new ProtectionDomain[]{pd} : null;  if (comb != null) {    pds=comb.combine(pds,null);  }  if (pds == null) {    pds=new ProtectionDomain[0];  }  return new AccessControlContext(new AccessControlContext(pds),comb);}  }
class C{  private void initPresenter(){  this.collectionsPresenter=new CollectionsImplementor(collectionsModel,this);  this.pagerPresenter=new PagerImplementor(this);  this.loadPresenter=new LoadImplementor(loadModel,this);  this.scrollPresenter=new ScrollImplementor(scrollModel,this);  this.swipeBackPresenter=new SwipeBackImplementor(this);}  }
class C{  private Options createOptions(){  Options options=new Options();  Option optionHelp=new Option("h","help",false,"Print out the help documentation for this command line execution");  optionHelp.setRequired(false);  options.addOption(optionHelp);  Option optionLocalPropFile=new Option("localPropFile",LOCALPROPFILE,true,"Optional local properties file");  optionLocalPropFile.setRequired(false);  optionLocalPropFile.setArgName(LOCALPROPFILE);  optionLocalPropFile.setType(String.class);  options.addOption(optionLocalPropFile);  Option optionACTION=new Option("a",QuerierProps.ACTION,true,"required - 'encrypt' or 'decrypt' -- The action performed by the QuerierDriver");  optionACTION.setRequired(false);  optionACTION.setArgName(QuerierProps.ACTION);  optionACTION.setType(String.class);  options.addOption(optionACTION);  Option optionINPUTFILE=new Option("i",QuerierProps.INPUTFILE,true,"required - Fully qualified file containing input " + "-- \n The input is either: \n (1) For Encryption: A query file - Contains the query selectors, one per line; " + "the first line must be the query number \n OR \n (2) For Decryption: A response file - Contains the serialized Response object");  optionINPUTFILE.setRequired(false);  optionINPUTFILE.setArgName(QuerierProps.INPUTFILE);  optionINPUTFILE.setType(String.class);  options.addOption(optionINPUTFILE);  Option optionOUTPUTFILE=new Option("o",QuerierProps.OUTPUTFILE,true,"required - Fully qualified file for the result output. " + "\n The output file specifies either: \n (1) For encryption: \n \t (a) A file to contain the serialized Querier object named: " + "<outputFile>-" + QuerierConst.QUERIER_FILETAG + "  AND \n \t "+ "(b) A file to contain the serialized Query object named: <outputFile>-"+ QuerierConst.QUERY_FILETAG+ "\n "+ "OR \n (2) A file to contain the decryption results where each line is where each line "+ "corresponds to one hit and is a JSON object with the schema QuerySchema");  optionOUTPUTFILE.setRequired(false);  optionOUTPUTFILE.setArgName(QuerierProps.OUTPUTFILE);  optionOUTPUTFILE.setType(String.class);  options.addOption(optionOUTPUTFILE);  Option optionNUMTHREADS=new Option("nt",QuerierProps.NUMTHREADS,true,"required -- Number of threads to use for encryption/decryption");  optionNUMTHREADS.setRequired(false);  optionNUMTHREADS.setArgName(QuerierProps.NUMTHREADS);  optionNUMTHREADS.setType(String.class);  options.addOption(optionNUMTHREADS);  Option optionDataSchemas=new Option("ds",QuerierProps.DATASCHEMAS,true,"optional -- Comma separated list of data schema file names");  optionDataSchemas.setRequired(false);  optionDataSchemas.setArgName(QuerierProps.DATASCHEMAS);  optionDataSchemas.setType(String.class);  options.addOption(optionDataSchemas);  Option optionQuerySchemas=new Option("qs",QuerierProps.QUERYSCHEMAS,true,"optional -- Comma separated list of query schema file names");  optionQuerySchemas.setRequired(false);  optionQuerySchemas.setArgName(QuerierProps.QUERYSCHEMAS);  optionQuerySchemas.setType(String.class);  options.addOption(optionQuerySchemas);  Option optionTYPE=new Option("qt",QuerierProps.QUERYTYPE,true,"required for encryption -- Type of the query as defined " + "in the 'schemaName' tag of the corresponding query schema file");  optionTYPE.setRequired(false);  optionTYPE.setArgName(QuerierProps.QUERYTYPE);  optionTYPE.setType(String.class);  options.addOption(optionTYPE);  Option optionHASHBITSIZE=new Option("hb",QuerierProps.HASHBITSIZE,true,"required -- Bit size of keyed hash");  optionHASHBITSIZE.setRequired(false);  optionHASHBITSIZE.setArgName(QuerierProps.HASHBITSIZE);  optionHASHBITSIZE.setType(String.class);  options.addOption(optionHASHBITSIZE);  Option optionHASHKEY=new Option("hk",QuerierProps.HASHKEY,true,"required for encryption -- String key for the keyed hash functionality");  optionHASHKEY.setRequired(false);  optionHASHKEY.setArgName(QuerierProps.HASHKEY);  optionHASHKEY.setType(String.class);  options.addOption(optionHASHKEY);  Option optionDATAPARTITIONSIZE=new Option("dps",QuerierProps.DATAPARTITIONSIZE,true,"required for encryption -- Partition bit size in data partitioning");  optionDATAPARTITIONSIZE.setRequired(false);  optionDATAPARTITIONSIZE.setArgName(QuerierProps.DATAPARTITIONSIZE);  optionDATAPARTITIONSIZE.setType(String.class);  options.addOption(optionDATAPARTITIONSIZE);  Option optionPAILLIERBITSIZE=new Option("pbs",QuerierProps.PAILLIERBITSIZE,true,"required for encryption -- Paillier modulus size N");  optionPAILLIERBITSIZE.setRequired(false);  optionPAILLIERBITSIZE.setArgName(QuerierProps.PAILLIERBITSIZE);  optionPAILLIERBITSIZE.setType(String.class);  options.addOption(optionPAILLIERBITSIZE);  Option optionCERTAINTY=new Option("c",QuerierProps.CERTAINTY,true,"required for encryption -- Certainty of prime generation for Paillier -- must  be greater than or " + "equal to " + SystemConfiguration.getProperty("pir.primeCertainty") + "");  optionCERTAINTY.setRequired(false);  optionCERTAINTY.setArgName(QuerierProps.CERTAINTY);  optionCERTAINTY.setType(String.class);  options.addOption(optionCERTAINTY);  Option optionBITSET=new Option("b",QuerierProps.BITSET,true,"required for encryption -- Ensure that this bit position is set in the " + "Paillier modulus (will generate Paillier moduli until finding one in which this bit is set)");  optionBITSET.setRequired(false);  optionBITSET.setArgName(QuerierProps.BITSET);  optionBITSET.setType(String.class);  options.addOption(optionBITSET);  Option optionEmbedSelector=new Option("embed",QuerierProps.EMBEDSELECTOR,true,"required for encryption -- 'true' or 'false' - Whether or not to embed " + "the selector in the results to reduce false positives");  optionEmbedSelector.setRequired(false);  optionEmbedSelector.setArgName(QuerierProps.EMBEDSELECTOR);  optionEmbedSelector.setType(String.class);  options.addOption(optionEmbedSelector);  Option optionUseMemLookupTable=new Option("mlu",QuerierProps.USEMEMLOOKUPTABLE,true,"required for encryption -- 'true' or 'false' - Whether or not to generate and use " + "an in memory modular exponentation lookup table - only for standalone/testing right now...");  optionUseMemLookupTable.setRequired(false);  optionUseMemLookupTable.setArgName(QuerierProps.USEMEMLOOKUPTABLE);  optionUseMemLookupTable.setType(String.class);  options.addOption(optionUseMemLookupTable);  Option optionUseHDFSLookupTable=new Option("lu",QuerierProps.USEHDFSLOOKUPTABLE,true,"required for encryption -- 'true' or 'false' -- Whether or not to generate and use " + "a hdfs modular exponentation lookup table");  optionUseHDFSLookupTable.setRequired(false);  optionUseHDFSLookupTable.setArgName(QuerierProps.USEHDFSLOOKUPTABLE);  optionUseHDFSLookupTable.setType(String.class);  options.addOption(optionUseHDFSLookupTable);  Option optionQUERIERFILE=new Option("qf",QuerierProps.QUERIERFILE,true,"required for decryption -- Fully qualified file containing the serialized Querier object");  optionQUERIERFILE.setRequired(false);  optionQUERIERFILE.setArgName(QuerierProps.QUERIERFILE);  optionQUERIERFILE.setType(String.class);  options.addOption(optionQUERIERFILE);  Option optionEMBEDQUERYSCHEMA=new Option("embedQS",QuerierProps.EMBEDQUERYSCHEMA,true,"optional (defaults to false) -- Whether or not to embed the QuerySchema in the Query (via QueryInfo)");  optionEMBEDQUERYSCHEMA.setRequired(false);  optionEMBEDQUERYSCHEMA.setArgName(QuerierProps.EMBEDQUERYSCHEMA);  optionEMBEDQUERYSCHEMA.setType(String.class);  options.addOption(optionEMBEDQUERYSCHEMA);  Option optionSR_ALGORITHM=new Option("srAlg",QuerierProps.SR_ALGORITHM,true,"optional - specify the SecureRandom algorithm, defaults to NativePRNG");  optionSR_ALGORITHM.setRequired(false);  optionSR_ALGORITHM.setArgName(QuerierProps.SR_ALGORITHM);  optionSR_ALGORITHM.setType(String.class);  options.addOption(optionSR_ALGORITHM);  Option optionSR_PROVIDER=new Option("srProvider",QuerierProps.SR_PROVIDER,true,"optional - specify the SecureRandom provider, defaults to SUN");  optionSR_PROVIDER.setRequired(false);  optionSR_PROVIDER.setArgName(QuerierProps.SR_PROVIDER);  optionSR_PROVIDER.setType(String.class);  options.addOption(optionSR_PROVIDER);  return options;}  }
class C{  protected AdsGetStatisticsQuery ids(String value){  return unsafeParam("ids",value);}  }
class C{  public void onDie(Creature lastAttacker){  this.getOwner().getMoveController().abortMove();  this.getOwner().setCasting(null);  this.getOwner().getEffectController().removeAllEffects();  if (getOwner() instanceof Player) {    if (((Player)getOwner()).getIsFlyingBeforeDeath()) {      getOwner().unsetState(CreatureState.ACTIVE);      getOwner().setState(CreatureState.FLOATING_CORPSE);    } else {      this.getOwner().setState(CreatureState.DEAD);    }  } else {    if (getOwner() instanceof Npc) {      if (((Npc)getOwner()).getObjectTemplate().isFloatCorpse()) {        getOwner().setState(CreatureState.FLOATING_CORPSE);      }    }    this.getOwner().setState(CreatureState.DEAD);  }  this.getOwner().getObserveController().notifyDeathObservers(lastAttacker);}  }
class C{  PartInputStream(InputStream in,String boundary) throws IOException {  super(in);  this.boundary=boundary;}  }
class C{  public LineEvent(Line line,Type type,long position){  super(line);  this.type=type;  this.position=position;}  }
class C{  public void init$Children(){}  }
class C{  @Deprecated public static String toString(byte[] input) throws IOException {  return new String(input);}  }
class C{  @Override public void addSLDOutputListener(SLDOutputInterface sldOutput){}  }
class C{  @Override public final void writeLong(final long l){  bos.writeByte((byte)(l & 0xFF));  bos.writeByte((byte)((l >>> 8) & 0xFF));  bos.writeByte((byte)((l >>> 16) & 0xFF));  bos.writeByte((byte)((l >>> 24) & 0xFF));  bos.writeByte((byte)((l >>> 32) & 0xFF));  bos.writeByte((byte)((l >>> 40) & 0xFF));  bos.writeByte((byte)((l >>> 48) & 0xFF));  bos.writeByte((byte)((l >>> 56) & 0xFF));}  }
class C{  public FieldConfigSlider(FieldConfigCommonData commonData){  super(commonData);}  }
class C{  public void addAppender(final Appender appender){  logger.addAppender(appender);}  }
class C{  public BigFraction(final double value,final int maxDenominator) throws MathIllegalStateException {  this(value,0,maxDenominator,100);}  }
class C{  public void addSubscriptionToStore(final String topic,final String clientId){  final ClientTopicCouple subscription=new ClientTopicCouple(clientId,topic);  if (!topics.contains(topic)) {    logger.debug("Added subscription " + topic + " ("+ clientId+ ") to store");    subscriptionsStore.add(subscription);    topics.add(topic);  }}  }
class C{  private int readBytesFormBuffer(byte[] buffer,int start,int bytesToRead) throws IOException {  int sample=0;  int bytesRead=0;  while (bytesRead < bytesToRead) {    sample=readSample();    if (reduceChannels) {      sample+=readSample();      if (sample > 32767)       sample=32767;      if (sample < -32768)       sample=-32768;    }    if (pos < bytesInBuffer) {      buffer[start++]=(byte)(sample & 0xff);      buffer[start++]=(byte)((sample >> 8) & 0xff);      bytesRead+=2;      pos+=skipSize;    } else {      if (reduceChannels)       pos-=2 * sampleSize; else       pos-=sampleSize;      if (endOfFile) {        if (bytesRead > 0)         return bytesRead; else         return -1;      } else {        refillBuffer();      }    }  }  return bytesRead;}  }
class C{  public ArrayList<ConstraintWidget> buildList(ScoutWidget[] list){  ArrayList<ConstraintWidget> ret=new ArrayList<>();  for (int i=mContainSet.nextSetBit(0); i >= 0; i=mContainSet.nextSetBit(i + 1)) {    ret.add(list[i].mConstraintWidget);  }  return ret;}  }
class C{  private static String generateAutoSubmitForm(String actionUrl,Map<String,String> paramMap){  StringBuilder html=new StringBuilder();  html.append("<script language=\"javascript\">window.onload=function(){document.pay_form.submit();}</script>\n");  html.append("<form id=\"pay_form\" name=\"pay_form\" action=\"").append(actionUrl).append("\" method=\"post\">\n");  for (  String key : paramMap.keySet()) {    html.append("<input type=\"hidden\" name=\"" + key + "\" id=\""+ key+ "\" value=\""+ paramMap.get(key)+ "\">\n");  }  html.append("</form>\n");  return html.toString();}  }
class C{  public SerialMessage allOnMessage(){  logger.debug("NODE {}: Switch All - Creating All On message.",getNode().getNodeId());  SerialMessage result=new SerialMessage(getNode().getNodeId(),SerialMessage.SerialMessageClass.SendData,SerialMessage.SerialMessageType.Request,SerialMessage.SerialMessageClass.SendData,SerialMessage.SerialMessagePriority.Set);  byte[] newPayload={(byte)getNode().getNodeId(),2,(byte)getCommandClass().getKey(),(byte)SWITCH_ALL_ON};  result.setMessagePayload(newPayload);  return result;}  }
class C{  public CassandraExperiment(ColumnList<String> columns){  super();  super.setID(Preconditions.checkNotNull(columns.getValue("id",ExperimentIDSerializer.get(),null)));  super.setDescription(columns.getStringValue("description",null));  super.setHypothesisIsCorrect(columns.getStringValue("hypothesis_is_correct",null));  super.setResults(columns.getStringValue("results",null));  super.setRule(columns.getStringValue("rule",null));  super.setRuleJson(convertRuleToJson(columns.getStringValue("rule",null)));  super.setSamplingPercent(Preconditions.checkNotNull(columns.getDoubleValue("sample_percent",null)));  super.setStartTime(Preconditions.checkNotNull(columns.getDateValue("start_time",null)));  super.setEndTime(Preconditions.checkNotNull(columns.getDateValue("end_time",null)));  super.setState(State.valueOf(Preconditions.checkNotNull(columns.getStringValue("state",null))));  super.setLabel(Experiment.Label.valueOf(Preconditions.checkNotNull(columns.getStringValue("label",null))));  super.setApplicationName(Application.Name.valueOf(Preconditions.checkNotNull(columns.getStringValue("app_name",null))));  super.setCreationTime(Preconditions.checkNotNull(columns.getDateValue("created",null)));  super.setModificationTime(Preconditions.checkNotNull(columns.getDateValue("modified",null)));  super.setIsPersonalizationEnabled(Preconditions.checkNotNull(columns.getBooleanValue("is_personalized",false)));  super.setModelName(Preconditions.checkNotNull(columns.getStringValue("model_name","")));  super.setModelVersion(Preconditions.checkNotNull(columns.getStringValue("model_version","")));  super.setIsRapidExperiment(Preconditions.checkNotNull(columns.getBooleanValue("is_rapid_experiment",false)));  super.setUserCap(Preconditions.checkNotNull(columns.getIntegerValue("user_cap",Integer.MAX_VALUE)));  super.setCreatorID(columns.getStringValue("creatorid",null));}  }
class C{  private void checkMatrixDimensions(Matrix B){  if (B.m != m || B.n != n) {    throw new IllegalArgumentException("Matrix dimensions must agree.");  }}  }
class C{  public static void main(String[] args){  PlayerControl simulation=new PlayerControl();  simulation.run();}  }
class C{  public boolean isValidLocalTld(String lTld){  lTld=unicodeToASCII(lTld);  return Arrays.binarySearch(LOCAL_TLDS,chompLeadingDot(lTld.toLowerCase(Locale.ENGLISH))) >= 0;}  }
class C{  private View findFocusableViewInBounds(boolean topFocus,int left,int right){  List<View> focusables=getFocusables(View.FOCUS_FORWARD);  View focusCandidate=null;  boolean foundFullyContainedFocusable=false;  int count=focusables.size();  for (int i=0; i < count; i++) {    View view=focusables.get(i);    int viewLeft=view.getLeft();    int viewRight=view.getRight();    if (left < viewRight && viewLeft < right) {      final boolean viewIsFullyContained=(left < viewLeft) && (viewRight < right);      if (focusCandidate == null) {        focusCandidate=view;        foundFullyContainedFocusable=viewIsFullyContained;      } else {        final boolean viewIsCloserToBoundary=(topFocus && viewLeft < focusCandidate.getLeft()) || (!topFocus && viewRight > focusCandidate.getRight());        if (foundFullyContainedFocusable) {          if (viewIsFullyContained && viewIsCloserToBoundary) {            focusCandidate=view;          }        } else {          if (viewIsFullyContained) {            focusCandidate=view;            foundFullyContainedFocusable=true;          } else           if (viewIsCloserToBoundary) {            focusCandidate=view;          }        }      }    }  }  return focusCandidate;}  }
class C{  public boolean isByteFeature(String featureName){  try {    int index=getFeatureIndex(featureName);    return isByteFeature(index);  } catch (  Exception e) {    return false;  }}  }
class C{  private static void initWatchdog(){  if (_shutdown)   return;  if (null == _config)   _config=ServiceConfigLoader.getTransportConfiguration();  int timeoutResolution=Integer.parseInt(System.getProperty(SystemProperties.WATCHDOG_TIMEOUT_RESOLUTION,SystemProperties.WATCHDOG_TIMEOUT_RESOLUTION_DEFAULT));  boolean protocolValidationEnabled=((NIOConfiguration)_config).isProtocolValidationEnabled();  _watchdog=new Watchdog(WATCHDOG,_config.getWatchdogRequestTimeout(),_config.getWatchdogListeningTimeout(),_config.getWatchdogIdleConnectionTimeout(),timeoutResolution,protocolValidationEnabled);  _watchdog.start();}  }
class C{  private void registerRenderers(){  logger.info("Renderers supported:");  addRenderer(new SimpleRenderer());  addRenderer(new UniqueValueRenderer());}  }
class C{  public String toString(){  return this.mode == 'd' ? this.writer.toString() : null;}  }
class C{  public static ModelLocation fromAddress(String address){  return new ModelLocation(address);}  }
class C{  public NewsfeedGetSuggestedSourcesQuery fields(List<EnumParam> value){  return unsafeParam("fields",value);}  }
class C{  public void upDateProgress(float progress){  setProgressInternal(progress);}  }
class C{  public static String createEvent(String json,String index,TaskListener listener){  String protocol=Systems.getEnvVarOrSystemProperty("PIPELINE_ELASTICSEARCH_PROTOCOL","http");  String server=Systems.getEnvVarOrSystemProperty("PIPELINE_ELASTICSEARCH_HOST","elasticsearch");  String port=Systems.getEnvVarOrSystemProperty("ELASTICSEARCH_SERVICE_PORT","9200");  if (!isUrlReachable(protocol + "://" + server+ ":"+ port)) {    return null;  } else {    listener.getLogger().println("Found Elasticsearch server, sending:" + json);  }  try {    RestAssured.baseURI=protocol + "://" + server+ ":"+ port+ "/"+ index+ "/custom";    Response r=given().contentType("application/json").body(json).when().post("");    ResponseBody body=r.getBody();    if (body != null) {      JsonPath path=body.jsonPath();      if (path != null) {        Boolean created=path.get("created");        if (created != null && created == true) {          listener.getLogger().println("Event created");          return path.get("_id");        } else         if (path.get("error") != null) {          listener.error("Elasticsearch response: " + path.get("error.reason"));        }      }    }    return null;  } catch (  Exception e) {    e.printStackTrace(listener.getLogger());    listener.error("Failed to send event: " + json);    return null;  }}  }
class C{  public static void expandNumber(String numberString,WordRelation wordRelation){  int numDigits=numberString.length();  if (numDigits == 0) {  } else   if (numDigits == 1) {    expandDigits(numberString,wordRelation);  } else   if (numDigits == 2) {    expand2DigitNumber(numberString,wordRelation);  } else   if (numDigits == 3) {    expand3DigitNumber(numberString,wordRelation);  } else   if (numDigits < 7) {    expandBelow7DigitNumber(numberString,wordRelation);  } else   if (numDigits < 10) {    expandBelow10DigitNumber(numberString,wordRelation);  } else   if (numDigits < 13) {    expandBelow13DigitNumber(numberString,wordRelation);  } else {    expandDigits(numberString,wordRelation);  }}  }
class C{  public PartOfSpeechTagger(){}  }
class C{  public ShapelessRecipe addIngredient(int count,Material ingredient){  return addIngredient(count,ingredient,0);}  }
class C{  private BSPTree<Sphere1D> childBefore(BSPTree<Sphere1D> node){  if (isDirect(node)) {    return node.getMinus();  } else {    return node.getPlus();  }}  }
class C{  public int geom_worklist(){  String s=soot.PhaseOptions.getString(options,"geom-worklist");  if (s.equalsIgnoreCase("PQ"))   return geom_worklist_PQ;  if (s.equalsIgnoreCase("FIFO"))   return geom_worklist_FIFO;  throw new RuntimeException("Invalid value " + s + " of phase option geom-worklist");}  }
class C{  public FriendsGetOnlineQuery onlineMobile(Boolean value){  return unsafeParam("online_mobile",value);}  }
class C{  public QRDecomposition(Matrix A){  QR=A.getArrayCopy();  m=A.getRowDimension();  n=A.getColumnDimension();  Rdiag=new double[n];  for (int k=0; k < n; k++) {    double nrm=0;    for (int i=k; i < m; i++) {      nrm=Maths.hypot(nrm,QR[i][k]);    }    if (nrm != 0.0) {      if (QR[k][k] < 0) {        nrm=-nrm;      }      for (int i=k; i < m; i++) {        QR[i][k]/=nrm;      }      QR[k][k]+=1.0;      for (int j=k + 1; j < n; j++) {        double s=0.0;        for (int i=k; i < m; i++) {          s+=QR[i][k] * QR[i][j];        }        s=-s / QR[k][k];        for (int i=k; i < m; i++) {          QR[i][j]+=s * QR[i][k];        }      }    }    Rdiag[k]=-nrm;  }}  }
class C{  public GaussianCurveFitter withStartPoint(double[] newStart){  return new GaussianCurveFitter(newStart.clone(),maxIter);}  }
class C{  protected void fireTableEvent(int row0,int row1,int col,int type){  if (type == EventConstants.UPDATE) {    if (col != VisualItem.IDX_VALIDATED) {      for (int r=row0; r <= row1; ++r)       setValidated(r,false);    } else {      for (int r=row0; r <= row1; ++r) {        if (!isValidated(r)) {          m_vis.damageReport(getItem(r),getBounds(r));        }      }    }  } else   if (type == EventConstants.DELETE && col == EventConstants.ALL_COLUMNS) {    for (int r=row0; r <= row1; ++r) {      if (isVisible(r) && isValidated(r)) {        VisualItem item=(VisualItem)getTuple(r);        m_vis.damageReport(item,getBounds(r));      }    }  }  super.fireTableEvent(row0,row1,col,type);}  }
class C{  public static void showCreateAircraft(Activity activity,int requestCode){  Intent intent=new Intent(activity,CreateEditAircraftActivity.class);  activity.startActivityForResult(intent,requestCode);}  }
class C{  public void convertSymbols(Rule rule,String layerName,int transparency,JsonElement element){  if (element == null)   return;  JsonObject jsonSymbol=element.getAsJsonObject();  boolean found=false;  for (  String symbolType : symbolMap.keySet()) {    JsonElement obj=jsonSymbol.get(symbolType);    if (obj != null) {      EsriSymbolInterface esriSymbol=symbolMap.get(symbolType);      esriSymbol.convert(rule,obj,layerName,transparency);      found=true;      break;    }  }  if (!found) {    ConsoleManager.getInstance().error(this,"Unsupported symbol : " + SymbolUtils.extractName(element));  }}  }
class C{  public void stop(){  run=false;}  }
class C{  public static void clearAllCaches(){  for (  UtilCache<?,?> cache : utilCacheTable.values()) {    cache.clear();  }}  }
class C{  private static int stToIJ(double s){  final int m=MAX_SIZE / 2;  return (int)Math.max(0,Math.min(2 * m - 1,Math.round(m * s + (m - 0.5))));}  }
class C{  public void retryFailedUploads(Context context,Account account,UploadResult uploadResult){  UploadsStorageManager uploadsStorageManager=new UploadsStorageManager(context.getContentResolver());  OCUpload[] failedUploads=uploadsStorageManager.getFailedUploads();  Account currentAccount=null;  boolean resultMatch, accountMatch;  for (  OCUpload failedUpload : failedUploads) {    accountMatch=(account == null || account.name.equals(failedUpload.getAccountName()));    resultMatch=(uploadResult == null || uploadResult.equals(failedUpload.getLastResult()));    if (accountMatch && resultMatch) {      if (currentAccount == null || !currentAccount.name.equals(failedUpload.getAccountName())) {        currentAccount=failedUpload.getAccount(context);      }      retry(context,currentAccount,failedUpload);    }  }}  }
class C{  public void addExtension(String ext){  exts.add(ext.toLowerCase());}  }
class C{  public SpaceTypeDescriptorBuilder addFixedProperty(String propertyName,Class<?> propertyType,SpaceDocumentSupport documentSupport,StorageType storageType){  if (propertyName == null)   throw new IllegalArgumentException("Argument cannot be null - 'propertyName'.");  if (propertyType == null)   throw new IllegalArgumentException("Argument cannot be null - 'propertyType'.");  if (documentSupport == null)   throw new IllegalArgumentException("Argument cannot be null - 'documentSupport'.");  if (storageType == null)   throw new IllegalArgumentException("Argument cannot be null - 'storageType'.");  return addFixedProperty(new PropertyInfo(propertyName,propertyType,documentSupport,storageType));}  }
class C{  public IsLessThanOrEqualToExtended(){  super(null,null);}  }
class C{  public void transformContainerToContainer(WidgetContainer oldContainer,ConstraintWidgetContainer newContainer){  WidgetContainer parent=(WidgetContainer)oldContainer.getParent();  if (newContainer.getCompanionWidget() == null) {    newContainer.setCompanionWidget(oldContainer.getCompanionWidget());  }  newContainer.setOrigin(oldContainer.getX(),oldContainer.getY());  newContainer.setDimension(oldContainer.getWidth(),oldContainer.getHeight());  newContainer.setHorizontalDimensionBehaviour(oldContainer.getHorizontalDimensionBehaviour());  newContainer.setVerticalDimensionBehaviour(oldContainer.getVerticalDimensionBehaviour());  ArrayList<ConstraintWidget> children=new ArrayList<>(oldContainer.getChildren());  for (  ConstraintWidget child : children) {    newContainer.add(child);  }  for (  ConstraintAnchor anchor : oldContainer.getAnchors()) {    if (anchor.isConnected()) {      newContainer.getAnchor(anchor.getType()).connect(anchor.getTarget(),anchor.getMargin(),anchor.getStrength(),anchor.getConnectionCreator());    }  }  for (  ConstraintWidget child : newContainer.getChildren()) {    child.resetAnchors();  }  if (parent != null) {    parent.remove(oldContainer);    parent.add(newContainer);  } else {    removeWidget(oldContainer);  }  mWidgets.remove(getTag(oldContainer));  setWidget(newContainer);  if (mRoot != null) {    boolean previousAnimationState=Animator.doAnimation();    Animator.setAnimationEnabled(false);    mRoot.layout();    Animator.setAnimationEnabled(previousAnimationState);  }}  }
class C{  public void registerListener(Condition condition,EventListener listener){  getListenerForCondition(condition,-1).registerListener(listener);}  }
class C{  public FileInfo query_file_info(String group_name,String remote_filename) throws IOException, MyException {  boolean bNewConnection=this.newUpdatableStorageConnection(group_name,remote_filename);  Socket storageSocket=this.storageServer.getSocket();  try {    byte[] header;    byte[] groupBytes;    byte[] filenameBytes;    byte[] bs;    int groupLen;    ProtoCommon.RecvPackageInfo pkgInfo;    filenameBytes=remote_filename.getBytes(ClientGlobal.g_charset);    groupBytes=new byte[ProtoCommon.FDFS_GROUP_NAME_MAX_LEN];    bs=group_name.getBytes(ClientGlobal.g_charset);    Arrays.fill(groupBytes,(byte)0);    if (bs.length <= groupBytes.length) {      groupLen=bs.length;    } else {      groupLen=groupBytes.length;    }    System.arraycopy(bs,0,groupBytes,0,groupLen);    header=ProtoCommon.packHeader(ProtoCommon.STORAGE_PROTO_CMD_QUERY_FILE_INFO,+groupBytes.length + filenameBytes.length,(byte)0);    OutputStream out=storageSocket.getOutputStream();    byte[] wholePkg=new byte[header.length + groupBytes.length + filenameBytes.length];    System.arraycopy(header,0,wholePkg,0,header.length);    System.arraycopy(groupBytes,0,wholePkg,header.length,groupBytes.length);    System.arraycopy(filenameBytes,0,wholePkg,header.length + groupBytes.length,filenameBytes.length);    out.write(wholePkg);    pkgInfo=ProtoCommon.recvPackage(storageSocket.getInputStream(),ProtoCommon.STORAGE_PROTO_CMD_RESP,3 * ProtoCommon.FDFS_PROTO_PKG_LEN_SIZE + ProtoCommon.FDFS_IPADDR_SIZE);    this.errno=pkgInfo.errno;    if (pkgInfo.errno != 0) {      return null;    }    long file_size=ProtoCommon.buff2long(pkgInfo.body,0);    int create_timestamp=(int)ProtoCommon.buff2long(pkgInfo.body,ProtoCommon.FDFS_PROTO_PKG_LEN_SIZE);    int crc32=(int)ProtoCommon.buff2long(pkgInfo.body,2 * ProtoCommon.FDFS_PROTO_PKG_LEN_SIZE);    String source_ip_addr=(new String(pkgInfo.body,3 * ProtoCommon.FDFS_PROTO_PKG_LEN_SIZE,ProtoCommon.FDFS_IPADDR_SIZE)).trim();    return new FileInfo(file_size,create_timestamp,crc32,source_ip_addr);  } catch (  IOException ex) {    if (!bNewConnection) {      try {        this.storageServer.close();      } catch (      IOException ex1) {        ex1.printStackTrace();      } finally {        this.storageServer=null;      }    }    throw ex;  } finally {    if (bNewConnection) {      try {        this.storageServer.close();      } catch (      IOException ex1) {        ex1.printStackTrace();      } finally {        this.storageServer=null;      }    }  }}  }
class C{  public ASTFlattener(){  this.fBuffer=new StringBuffer();}  }
class C{  public static double deviation(Iterator tuples,String field){  return deviation(tuples,field,DataLib.mean(tuples,field));}  }
class C{  public AudioInputStream(InputStream stream,AudioFormat format,long length){  super();  this.format=format;  this.frameLength=length;  this.frameSize=format.getFrameSize();  if (this.frameSize == AudioSystem.NOT_SPECIFIED || frameSize <= 0) {    this.frameSize=1;  }  this.stream=stream;  framePos=0;  markpos=0;}  }
class C{  @Override public void attributeSelection(String field){}  }
class C{  public XMLSerializer(Writer writer,OutputFormat format){  super(format != null ? format : new OutputFormat(Method.XML,null,false));  _format.setMethod(Method.XML);  setOutputCharStream(writer);}  }
class C{  protected void deleteExceptionByteArrayRef(DeadLetterJobEntity jobEntity){  ByteArrayRef exceptionByteArrayRef=jobEntity.getExceptionByteArrayRef();  if (exceptionByteArrayRef != null) {    exceptionByteArrayRef.delete();  }}  }
class C{  public void stop(){synchronized (this) {    mStopped=true;    if (mListenerThread == null) {      return;    }  }  mListenerThread.interrupt();  try {    if (mServerSocket != null) {      mServerSocket.close();    }  } catch (  IOException e) {  }}  }
class C{  public SparseFieldVector(Field<T> field,T[] values) throws NullArgumentException {  MathUtils.checkNotNull(values);  this.field=field;  virtualSize=values.length;  entries=new OpenIntToFieldHashMap<T>(field);  for (int key=0; key < values.length; key++) {    T value=values[key];    entries.put(key,value);  }}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines) throws IOException {  writeLines(file,encoding,lines,null,false);}  }
class C{  public PathExtractorImpl(String pathAndFeature,boolean wantFeature){  this.pathAndFeature=pathAndFeature;  if (INTERPRET_PATHS) {    path=pathAndFeature;    return;  }  if (wantFeature) {    int lastDot=pathAndFeature.lastIndexOf(".");    if (lastDot == -1) {      feature=pathAndFeature;      path=null;    } else {      feature=pathAndFeature.substring(lastDot + 1);      path=pathAndFeature.substring(0,lastDot);    }    this.wantFeature=wantFeature;  } else {    this.path=pathAndFeature;  }  if (!LAZY_COMPILE) {    compiledPath=compile(path);  }}  }
class C{  public static Experiment createFromJSONString(String json){  return new GsonBuilder().create().fromJson(json,Experiment.class);}  }
class C{  public static List<Window> windows(List<String> words,int windowSize){  List<Window> ret=new ArrayList<>();  for (int i=0; i < words.size(); i++)   ret.add(windowForWordInPosition(windowSize,i,words));  return ret;}  }
class C{  public BoardGetCommentsQueryWithExtended(VkApiClient client,int groupId,int topicId){  super(client,"board.getComments",GetCommentsExtendedResponse.class);  groupId(groupId);  topicId(topicId);  extended(true);}  }
class C{  public void put(HttpSession session,T value,Map<String,Object> expandContext){  AttributeAccessor<T> aa=new AttributeAccessor<T>(name,expandContext,this.attributeName,this.fma,this.needsExpand);  aa.put(session,value);}  }
class C{  @Override public void endValueScopeFor(IdentityConstraint identityConstraint,int initialDepth){  ValueStoreBase valueStore=fValueStoreCache.getValueStoreFor(identityConstraint,initialDepth);  valueStore.endValueScope();}  }
class C{  public SortedTupleIterator(Iterator iter,Comparator c){  this(iter,128,c);}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;  this.networkTimeMs=networkTimeMs;}  }
class C{  public UndoEvent(UndoActionInterface parentObj,FieldIdEnum fieldId,Object oldValue,Object newValue){  this.parentObj=parentObj;  this.fieldId=fieldId;  this.oldValue=oldValue;  this.newValue=newValue;  representation=String.format("Storing value : %s Old : %s New : %s",fieldId.toString(),oldValue,newValue);}  }
class C{  public static boolean isSystemApplication(Context context){  if (context == null) {    return false;  }  return isSystemApplication(context,context.getPackageName());}  }
class C{  public DistributedLogClientBuilder uri(URI uri){  DistributedLogClientBuilder newBuilder=newBuilder(this);  String zkServers=uri.getAuthority().replace(";",",");  String[] zkServerList=StringUtils.split(zkServers,',');  String finagleNameStr=String.format("zk!%s!%s/.write_proxy",zkServerList[random.nextInt(zkServerList.length)],uri.getPath());  newBuilder._routingServiceBuilder=RoutingUtils.buildRoutingService(finagleNameStr);  newBuilder._enableRegionStats=false;  return newBuilder;}  }
class C{  public static <T>ObservableList<T> filterInverted(ObservableList<T> items,Function<T,ObservableBooleanValue> conditionExtractor){  return filterInternal(items,conditionExtractor,null);}  }
class C{  public DocumentProperties(){  this(DEFAULT_INITIAL_CAPACITY,DEFAULT_LOAD_FACTOR);}  }
class C{  public void removeData(double[][] data){  for (int i=0; i < data.length && n > 0; i++) {    removeData(data[i][0],data[i][1]);  }}  }
class C{  private static void logHistogramByGesture(boolean wasPanelSeen,boolean wasTap,String histogramName){  RecordHistogram.recordEnumeratedHistogram(histogramName,getPanelSeenByGestureStateCode(wasPanelSeen,wasTap),RESULTS_BY_GESTURE_BOUNDARY);}  }
class C{  @OnClick({R.id.primary1,R.id.primary2,R.id.primary3,R.id.primary4,R.id.primary5,R.id.primary6}) void onPrimaryColorClicked(View view){  Button btn=(Button)view;  int tintColor=btn.getBackgroundTintList().getDefaultColor();  Scoop.sugarCone().update(Toppings.PRIMARY,tintColor);}  }
class C{  @Override protected void normalizeWhitespace(XMLString value,int fromIndex){  int end=value.offset + value.length;  for (int i=value.offset + fromIndex; i < end; ++i) {    int c=value.ch[i];    if (XMLChar.isSpace(c)) {      value.ch[i]=' ';    }  }}  }
class C{  @ObjectiveCName("addEntry:index:") public List addEntry(String entry,int index){  java.util.List<String> entries=this.getEntries();  entries.add(index,entry);  this.updateList(entries);  return this;}  }
class C{  public SpaceRuntimeInfo appendSpaceRuntimeInfo(SpaceRuntimeInfo spaceRuntimeInfo){  if (spaceRuntimeInfo == null) {    return this;  }  List<String> classesNamesList=spaceRuntimeInfo.m_ClassNames;  int listSize=classesNamesList.size();  for (int i=0; i < listSize; i++) {    String className=classesNamesList.get(i);    int index=m_ClassNames.indexOf(className);    if (index >= 0) {      int newNumEntriesValue=m_NumOFEntries.get(index).intValue() + spaceRuntimeInfo.m_NumOFEntries.get(i).intValue();      m_NumOFEntries.set(index,newNumEntriesValue);      int newNumTemplatesValue=m_NumOFTemplates.get(index).intValue() + spaceRuntimeInfo.m_NumOFTemplates.get(i).intValue();      m_NumOFTemplates.set(index,newNumTemplatesValue);    } else {      m_ClassNames.add(className);      m_NumOFEntries.add(spaceRuntimeInfo.m_NumOFEntries.get(i));      m_NumOFTemplates.add(spaceRuntimeInfo.m_NumOFTemplates.get(i));    }  }  return this;}  }
class C{  protected View reuseOrInflateView(View convertView,ViewGroup parent,AdapterType type){  int itemLayout=getItemLayoutResId();switch (type) {case BASE_RECIPIENT:case RECIPIENT_ALTERNATES:    break;case SINGLE_RECIPIENT:  itemLayout=getAlternateItemLayoutResId();break;}return convertView != null ? convertView : mInflater.inflate(itemLayout,parent,false);}  }
class C{  public void clear(){  int max=bits.length;  for (int i=0; i < max; i++) {    bits[i]=0;  }}  }
class C{  public SpaceDocument readDocmentByKey(SpaceDocumentColumnFamilyMapper mapper,String typeName,Object keyValue){  ColumnFamilyMetadata metadata=metadataCache.getColumnFamilyMetadata(typeName);  if (metadata == null) {    metadata=fetchColumnFamilyMetadata(typeName,mapper);    if (metadata == null) {      return null;    }  }  ColumnFamilyTemplate<Object,String> template=getTemplate(metadata);  if (!template.isColumnsExist(keyValue)) {    return null;  }  SpaceDocumentMapper hectorMapper=getMapperTemplate(metadata,mapper);  try {    return template.queryColumns(keyValue,hectorMapper);  } catch (  Exception e) {    return null;  }}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,Writer writer) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  for (  Object line : lines) {    if (line != null) {      writer.write(line.toString());    }    writer.write(lineEnding);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostDropRate_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200607,skillcaster,skillname);}  }
class C{  public static char[] toCharArray(InputStream is,Charset encoding) throws IOException {  CharArrayWriter output=new CharArrayWriter();  copy(is,output,encoding);  return output.toCharArray();}  }
class C{  public int update(V v){  for (  String name : v.names()) {    this.set(name,v.value(name));  }  return update(this.getId(),v);}  }
class C{  public Bundler putShortArray(String key,short[] value){  bundle.putShortArray(key,value);  return this;}  }
class C{  public boolean isSetThreadNum(){  return __isset_bit_vector.get(__THREADNUM_ISSET_ID);}  }
class C{  public static int skipAs(String stmt,int offset){  offset=ParseUtil.move(stmt,offset,0);  if (stmt.length() > offset + "AS".length() && (stmt.charAt(offset) == 'A' || stmt.charAt(offset) == 'a') && (stmt.charAt(offset + 1) == 'S' || stmt.charAt(offset + 1) == 's') && (stmt.charAt(offset + 2) == ' ' || stmt.charAt(offset + 2) == '\r' || stmt.charAt(offset + 2) == '\n' || stmt.charAt(offset + 2) == '\t' || stmt.charAt(offset + 2) == '/' || stmt.charAt(offset + 2) == '#')) {    offset=ParseUtil.move(stmt,offset + 2,0);  }  return offset;}  }
class C{  @NonNull public static State empty(@NonNull final Object key){  return new State(key);}  }
class C{  public static synchronized Scope build(LIPermission... permissions){  return new Scope(permissions);}  }
class C{  @After @Before @CacheEvict("default") public void post(){}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (!(obj instanceof ColumnSchema)) {    return false;  }  ColumnSchema other=(ColumnSchema)obj;  if (columnName == null) {    if (other.columnName != null) {      return false;    }  } else   if (!columnName.equals(other.columnName)) {    return false;  }  return true;}  }
class C{  public void remove(Vertex v) throws Exception {  if (hVertexTypes.containsKey(v))   hVertexTypes.remove(v);  super.remove(v);}  }
class C{  public static long copyLarge(Reader input,Writer output,char[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public TPrimitiveHash(int initialCapacity,float loadFactor){  super();  _loadFactor=loadFactor;  setUp((int)Math.ceil(initialCapacity / loadFactor));}  }
class C{  public SpaceAlreadyStoppedException(String spaceName,String s){  super(spaceName,s);}  }
class C{  @Override public boolean treeExpanded(Object selectedItem){  return false;}  }
class C{  public CMMModel(PipelineModel pipelineModel,Vector weights,MarkovOrder markovOrder,Map<String,Set<Integer>> tagDictionary){  this.pipelineModel=pipelineModel;  this.contextExtractor=new ContextExtractor(markovOrder,Constants.REGEXP_FILE);  this.weights=weights;  this.tags=((StringIndexerModel)(pipelineModel.stages()[2])).labels();  String[] features=((CountVectorizerModel)(pipelineModel.stages()[1])).vocabulary();  featureMap=new HashMap<String,Integer>();  for (int j=0; j < features.length; j++) {    featureMap.put(features[j],j);  }  this.tagDictionary=tagDictionary;}  }
class C{  public MultipartParser(HttpRequest req,int maxSize,boolean buffer,boolean limitLength,String encoding) throws IOException {  if (encoding != null) {    setEncoding(encoding);  }  String type=null;  String type1=req.getHeader("Content-Type");  String type2=req.getContentType();  if (type1 == null && type2 != null) {    type=type2;  } else   if (type2 == null && type1 != null) {    type=type1;  } else   if (type1 != null) {    type=(type1.length() > type2.length() ? type1 : type2);  }  if (type == null || !type.toLowerCase().startsWith(ContentType.MULTIPART.value())) {    throw new WebException("Posted content type isn't '" + ContentType.MULTIPART.value() + "'.");  }  int length=req.getContentLength();  if (length > maxSize) {    throw new WebException("Posted content length of " + length + " exceeds limit of "+ maxSize+ ".");  }  String boundary=extractBoundary(type);  if (boundary == null) {    throw new IOException("File separation boundary was not specified.");  }  InputStream is=req.getContentStream();  if (buffer) {    in=new BufferedServletInputStream(is);  }  if (limitLength) {    in=new LimitedServletInputStream(is,length);  }  this.boundary=boundary;  do {    String line=readLine();    if (line == null) {      throw new IOException("Corrupt form data: premature ending");    }    if (line.startsWith(boundary)) {      break;    }  } while (true);}  }
class C{  private synchronized boolean waitResume(){  while (isPaused() && !isCancelled() && !isDone()) {    try {      debugPrint("   paused waiting ");      wait();    } catch (    InterruptedException ie) {    }  }  return !isCancelled() && !isDone();}  }
class C{  public String formatValue(Object value){  if (value == null) {    return EMPTY;  }  if (value instanceof Number) {    try {      return FORMAT_VALUE.format(value);    } catch (    IllegalArgumentException ex) {      return NAN;    }  } else {    return String.valueOf(value);  }}  }
class C{  public RegisterReplicationLocalViewRequestInfo(){}  }
class C{  public Entry(char[] ch,int offset,int length,Entry next){  characters=new char[length];  System.arraycopy(ch,offset,characters,0,length);  symbol=new String(characters).intern();  this.next=next;}  }
class C{  public SpectralSpellInteroperator(String sInputFile,String[] sArgs){  InputFile=sInputFile;  Args=sArgs;}  }
class C{  private IDFactory(){  idList=new BitSet();  lock=new ReentrantLock();  lockIds(0);  lockIds(DAOManager.getDAO(PlayerDAO.class).getUsedIDs());  lockIds(DAOManager.getDAO(InventoryDAO.class).getUsedIDs());  lockIds(DAOManager.getDAO(PlayerRegisteredItemsDAO.class).getUsedIDs());  lockIds(DAOManager.getDAO(LegionDAO.class).getUsedIDs());  lockIds(DAOManager.getDAO(MailDAO.class).getUsedIDs());  lockIds(DAOManager.getDAO(GuideDAO.class).getUsedIDs());  lockIds(DAOManager.getDAO(HousesDAO.class).getUsedIDs());  log.info("IDFactory: " + getUsedCount() + " id's used.");}  }
class C{  public BaseViewHolder linkify(int viewId){  TextView view=getView(viewId);  Linkify.addLinks(view,Linkify.ALL);  return this;}  }
class C{  public DatabaseGetUniversitiesQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  protected void populateStandardData(Symbolizer symbolizer){  StandardData standardData=new StandardData();  if (symbolizer != null) {    standardData.name=symbolizer.getName();    standardData.description=symbolizer.getDescription();    standardData.unit=symbolizer.getUnitOfMeasure();  }  populateStandardData(standardData);}  }
class C{  public static int bkResultCode(Throwable throwable){  if (throwable instanceof BKException) {    return ((BKException)throwable).getCode();  }  return BKException.Code.UnexpectedConditionException;}  }
class C{  public static float calculateLeft(float top,float right,float bottom,float targetAspectRatio){  final float height=bottom - top;  final float left=right - (targetAspectRatio * height);  return left;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set nodeRadius=");  int radius=np.getInt(0,100);  np.matchIgnoreCase(";");  ClusterViewer viewer=getViewer();  for (Node v=viewer.getGraphView().getGraph().getFirstNode(); v != null; v=v.getNext()) {    viewer.getGraphView().getNV(v).setHeight(radius);    viewer.getGraphView().getNV(v).setWidth(radius);  }  viewer.setNodeRadius(radius);}  }
class C{  @Override public Node cloneNode(boolean deep){  HTMLTableSectionElementImpl clonedNode=(HTMLTableSectionElementImpl)super.cloneNode(deep);  clonedNode._rows=null;  return clonedNode;}  }
class C{  public void downloadFile(TRSHttpRequest request,TRSFileDownloadHttpCallback callback){  mProvider.downloadFile(request,callback);}  }
class C{  public CustomConfigurationBuilder(ClassLoader cl,String resource) throws ConfigurationException {  this();  InputStream is=cl.getResourceAsStream(resource);  if (is == null)   throw new ConfigurationException("Unable to locate resource '" + resource + "'");  try {    try {      load(is);      loadedOnInstantiation=true;    }  finally {      is.close();    }  } catch (  IOException e) {    throw new ConfigurationException(e);  }}  }
class C{  public boolean isChangeToPrimaryStage(){  return changeToPrimaryStage;}  }
class C{  public void clearSaveLatches(){  saveLatches.clear();}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public LoadObject(int state){  this.state=state;}  }
class C{  public boolean equivTo(Object o){  if (o == null)   return false;  if (o instanceof JimpleLocal) {    if (getName() != null && getType() != null)     return getName().equals(((Local)o).getName()) && getType().equals(((Local)o).getType()); else     if (getName() != null)     return getName().equals(((Local)o).getName()) && ((Local)o).getType() == null; else     if (getType() != null)     return ((Local)o).getName() == null && getType().equals(((Local)o).getType()); else     return ((Local)o).getName() == null && ((Local)o).getType() == null;  }  return false;}  }
class C{  public static RoundedBitmapDrawable bitmapToCircularBitmapDrawable(Resources resources,Bitmap bitmap){  RoundedBitmapDrawable roundedBitmap=RoundedBitmapDrawableFactory.create(resources,bitmap);  roundedBitmap.setCircular(true);  return roundedBitmap;}  }
class C{  public GroupByResult(){}  }
class C{  void insertedText(CharacterDataImpl node,int offset,int count){}  }
class C{  public static JsonObject createColour(IColor colour){  JsonObject jsonObject=null;  if (colour != null) {    try {      if (!colour.isNullColor()) {        int rgb=colour.getRGB();        int blue=(rgb & 0xFF0000) >> 16;        int green=(rgb & 0x00FF00) >> 8;        int red=rgb & 0x0000FF;        jsonObject=new JsonObject();        jsonObject.addProperty(ColourKeys.RED,red);        jsonObject.addProperty(ColourKeys.GREEN,green);        jsonObject.addProperty(ColourKeys.BLUE,blue);        jsonObject.addProperty(ColourKeys.TRANSPARENCY,(int)colour.getTransparency());      }    } catch (    AutomationException e) {      e.printStackTrace();    }catch (    IOException e) {      e.printStackTrace();    }  }  return jsonObject;}  }
class C{  public BlacklistEntry(String urlPattern,int statusCode){  this(urlPattern,statusCode,null);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_EVENT_LOSE_FORT(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1320005,value0,value1);}  }
class C{  public int hashCode(){  int hashcode=0;  for (int i=0; i < m_size; ++i) {    int idx=i + 1;    int code=idx * m_names[i].hashCode();    code^=idx * m_types[i].hashCode();    if (m_dflts[i] != null)     code^=m_dflts[i].hashCode();    hashcode^=code;  }  return hashcode;}  }
class C{  public Iterator edgesOutOf(MethodOrMethodContext m){  return new ArrayList(srcMap.get(m)).iterator();}  }
class C{  public MFCC(float sampleRate) throws IllegalArgumentException {  this(sampleRate,512,20,true,20.0,16000.0,40);}  }
class C{  private Bitmap addThumbnailToCache(String imageKey,Bitmap bitmap,String path,int px){  Bitmap thumbnail=ThumbnailUtils.extractThumbnail(bitmap,px,px);  thumbnail=BitmapUtils.rotateImage(thumbnail,path);  addBitmapToCache(imageKey,thumbnail);  return thumbnail;}  }
class C{  public void haltAllTasks(){  LinkedList<Thread> endingThreads=new LinkedList<>();  endingThreads.addAll(executions.values());  for (  Thread thread : endingThreads) {    while (thread.isAlive() && thread != Thread.currentThread()) {      LOGGER.info("Interrupting execution thread " + thread);      thread.interrupt();    }  }  executions.clear();}  }
class C{  public AccountChangePasswordQuery changePassword(UserActor actor,String newPassword){  return new AccountChangePasswordQuery(getClient(),actor,newPassword);}  }
class C{  public RealMatrix computeCorrelationMatrix(double[][] data){  return computeCorrelationMatrix(new BlockRealMatrix(data));}  }
class C{  private void notifyConsumer(final Consumer<Object> consumer,final Object event){  final Executor executor=consumerExecutors.get(consumer);  if (executor == null) {    consumer.accept(event);  } else {    executor.execute(null);  }}  }
class C{  private void fillDeclaredPrefixes(Iterator namespaces){  fDeclaredPrefixes.clear();  while (namespaces.hasNext()) {    Namespace ns=(Namespace)namespaces.next();    String prefix=ns.getPrefix();    fDeclaredPrefixes.add(prefix != null ? prefix : "");  }}  }
class C{  public LinkedList<Diff> diff_main(String text1,String text2,boolean checklines){  long deadline;  if (Diff_Timeout <= 0) {    deadline=Long.MAX_VALUE;  } else {    deadline=System.currentTimeMillis() + (long)(Diff_Timeout * 1000);  }  return diff_main(text1,text2,checklines,deadline);}  }
class C{  public int numberOfObjects(){  return numberOfObjects;}  }
class C{  public char readChar() throws JMSException {  initializeReading();  try {    if (this.dataIn.available() == 0) {      throw new MessageEOFException("reached end of data");    }    this.dataIn.mark(17);    int type=this.dataIn.read();    if (type == _CHAR) {      return this.dataIn.readChar();    }    if (type == _NULL) {      this.dataIn.reset();      throw new NullPointerException("Cannot convert _NULL value to char.");    } else {      this.dataIn.reset();      throw new MessageFormatException(" not a char type");    }  } catch (  NumberFormatException mfe) {    try {      this.dataIn.reset();    } catch (    IOException ioe) {      JMSException jmsEx=new JMSException("reset failed");      jmsEx.setLinkedException(ioe);    }    throw mfe;  }catch (  EOFException e) {    JMSException jmsEx=new MessageEOFException(e.toString());    jmsEx.setLinkedException(e);    throw jmsEx;  }catch (  IOException e) {    JMSException jmsEx=new MessageFormatException(e.toString());    jmsEx.setLinkedException(e);    throw jmsEx;  }}  }
class C{  @PluginFactory public static ZebraRolloverStrategy createStrategy(@PluginAttribute("max") final String max,@PluginAttribute("min") final String min,@PluginAttribute("fileIndex") final String fileIndex,@PluginAttribute("compressionLevel") final String compressionLevelStr,@PluginConfiguration final Configuration config){  final boolean useMax=fileIndex == null ? true : fileIndex.equalsIgnoreCase("max");  int minIndex=MIN_WINDOW_SIZE;  if (min != null) {    minIndex=Integer.parseInt(min);    if (minIndex < 1) {      LOGGER.error("Minimum window size too small. Limited to " + MIN_WINDOW_SIZE);      minIndex=MIN_WINDOW_SIZE;    }  }  int maxIndex=DEFAULT_WINDOW_SIZE;  if (max != null) {    maxIndex=Integer.parseInt(max);    if (maxIndex < minIndex) {      maxIndex=minIndex < DEFAULT_WINDOW_SIZE ? DEFAULT_WINDOW_SIZE : minIndex;      LOGGER.error("Maximum window size must be greater than the minimum windows size. Set to " + maxIndex);    }  }  final int compressionLevel=Integers.parseInt(compressionLevelStr,Deflater.DEFAULT_COMPRESSION);  return new ZebraRolloverStrategy(minIndex,maxIndex,useMax,compressionLevel,config.getStrSubstitutor());}  }
class C{  public boolean isFullyZoomedOut(){  return (isFullyZoomedOutX() && isFullyZoomedOutY());}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  public static void createAndStartBroker() throws Exception {  broker=new BrokerService();  broker.setPersistent(false);  broker.setUseShutdownHook(false);  broker.setUseJmx(false);  broker.start();  c=new ActiveMQConnectionFactory();  c.setObjectMessageSerializationDefered(true);  c.setBrokerURL("vm://localhost");  c.setCopyMessageOnSend(false);  System.setProperty("c2mon.client.jms.url","vm://localhost");  System.setProperty("c2mon.client.jms.user","");  System.setProperty("c2mon.client.jms.password","");}  }
class C{  private int sourceRegister(){  if (instruction instanceof Instruction23x)   return ((Instruction23x)instruction).getRegisterA(); else   if (instruction instanceof Instruction22c)   return ((Instruction22c)instruction).getRegisterA(); else   if (instruction instanceof Instruction21c)   return ((Instruction21c)instruction).getRegisterA(); else   throw new RuntimeException("Instruction is not a instance, array or static op");}  }
class C{  public void close(){  this.open=false;}  }
class C{  public static Predicate<ItemStack> matcherOf(ItemStack value,boolean checkNBT){  return null;}  }
class C{  public static User load(long id){  return Helper.load(id,User.class);}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  public static final Authentication create(String authPluginClassName,String authParamsString) throws UnsupportedAuthenticationException {  Map<String,String> authParams=new HashMap<String,String>();  if (isNotBlank(authParamsString)) {    String[] params=authParamsString.split(",");    for (    String p : params) {      String[] kv=p.split(":");      if (kv.length == 2) {        authParams.put(kv[0],kv[1]);      }    }  }  return AuthenticationFactory.create(authPluginClassName,authParams);}  }
class C{  public DataIOException(Throwable cause){  super(cause);}  }
class C{  private void requestPermission(int permissionCode,int type){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {    return;  }switch (permissionCode) {case Mysplash.WRITE_EXTERNAL_STORAGE:    if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {      this.requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},type);    } else {      downloadByType(type);    }  break;}}  }
class C{  public static final void toString(StringBuffer output,String str){  if (str == null) {    output.append("null");    return;  }  output.append(toString(str));}  }
class C{  public void writeEoModelText(PrintWriter writer,String entityPrefix,String helperName,Set<String> entityNameIncludeSet,ModelReader entityModelReader) throws GenericEntityException {  if (entityPrefix == null)   entityPrefix="";  if (helperName == null)   helperName="localderby";  UtilPlist.writePlistPropertyMap(this.createEoModelMap(entityPrefix,helperName,entityNameIncludeSet,entityModelReader),0,writer,false);}  }
class C{  public static ExpectedCondition<Boolean> expandFieldset(final WebElement fieldset){  return null;}  }
class C{  @Override public boolean hasNext(){  if (!isForward) {    currentRec=currentRec - pointerSize;    isForward=true;  }  return currentRec > 0 || blk.number() > 0;}  }
class C{  private void processDownloadedImage(RequestContext context,File tempFile,CompletionHandler imageCompletionHandler){  Operation fileReadOp=Operation.createPatch(null).setContextId(context.request.getRequestId()).setCompletion(null);  FileUtils.readFileAndComplete(fileReadOp,tempFile);}  }
class C{  public WheelVerticalView(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set networkdata=" + ClassificationType.Taxonomy + ";");}  }
class C{  public PointsToSet reachingObjects(Local l,SootField f){  return reachingObjects(reachingObjects(l),f);}  }
class C{  public Response writeLong(long l){  writeInt((int)((l >> 32) & 0xFFFFFFFF));  writeInt((int)(l & 0xFFFFFFFF));  return this;}  }
class C{  public final boolean isValid(){  return qualityCode == SourceDataQuality.OK;}  }
class C{  public void addImplements(Access node){  List<Access> list=(parent == null || state == null) ? getImplementsListNoTransform() : getImplementsList();  list.addChild(node);}  }
class C{  private void sendResponse(int response){  try {synchronized (serialPort.getOutputStream()) {      serialPort.getOutputStream().write(response);      serialPort.getOutputStream().flush();      logger.trace("Response SENT");    }  } catch (  IOException e) {    logger.error(e.getMessage());  }}  }
class C{  @SafeVarargs public final TestSubscriber<T> assertValuesWith(Consumer<T>... expectations){  if (!valuesStorage) {    throw new IllegalStateException("Using assertNoValues() requires enabling values storage");  }  final int expectedValueCount=expectations.length;  if (expectedValueCount != values.size()) {    throw new AssertionError("Different value count: expected = " + expectedValueCount + ", actual = "+ valueCount,null);  }  for (int i=0; i < expectedValueCount; i++) {    Consumer<T> consumer=expectations[i];    T actualValue=values.get(i);    consumer.accept(actualValue);  }  return this;}  }
class C{  public int addOrIncreaseItem(String productId,BigDecimal selectedAmount,BigDecimal quantity,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,String accommodationMapId,String accommodationSpotId,Timestamp shipBeforeDate,Timestamp shipAfterDate,Map<String,GenericValue> features,Map<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,String itemGroupNumber,String parentProductId,LocalDispatcher dispatcher) throws CartItemModifyException, ItemNotFoundException {  return addOrIncreaseItem(productId,selectedAmount,quantity,reservStart,reservLength,reservPersons,accommodationMapId,accommodationSpotId,shipBeforeDate,shipAfterDate,features,attributes,null,prodCatalogId,configWrapper,itemType,itemGroupNumber,parentProductId,dispatcher);}  }
class C{  public static <V>int addDistinctList(List<V> sourceList,List<V> entryList){  if (sourceList == null || isEmpty(entryList)) {    return 0;  }  int sourceCount=sourceList.size();  for (  V entry : entryList) {    if (!sourceList.contains(entry)) {      sourceList.add(entry);    }  }  return sourceList.size() - sourceCount;}  }
class C{  public static void addStartStopNodesTo(BlockGraph graph){  ADDSTART: {    List<Block> heads=graph.getHeads();    if (heads.size() == 0)     break ADDSTART;    if ((heads.size() == 1) && (heads.get(0) instanceof DummyBlock))     break ADDSTART;    List<Block> blocks=graph.getBlocks();    DummyBlock head=new DummyBlock(graph.getBody(),0);    head.makeHeadBlock(heads);    graph.mHeads=Collections.<Block>singletonList(head);    for (    Block block : blocks) {      block.setIndexInMethod(block.getIndexInMethod() + 1);    }    List<Block> newBlocks=new ArrayList<Block>();    newBlocks.add(head);    newBlocks.addAll(blocks);    graph.mBlocks=newBlocks;  }  ADDSTOP: {    List<Block> tails=graph.getTails();    if (tails.size() == 0)     break ADDSTOP;    if ((tails.size() == 1) && (tails.get(0) instanceof DummyBlock))     break ADDSTOP;    List<Block> blocks=graph.getBlocks();    DummyBlock tail=new DummyBlock(graph.getBody(),blocks.size());    tail.makeTailBlock(tails);    graph.mTails=Collections.<Block>singletonList(tail);    blocks.add(tail);  }}  }
class C{  public HumanTime s(){  return s(1);}  }
class C{  public Vector3f multNormal(Vector3f vec,Vector3f store){  if (store == null) {    store=new Vector3f();  }  float vx=vec.x, vy=vec.y, vz=vec.z;  store.x=m00 * vx + m01 * vy + m02 * vz;  store.y=m10 * vx + m11 * vy + m12 * vz;  store.z=m20 * vx + m21 * vy + m22 * vz;  return store;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Poison_INTERVAL_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201069,num0,skillname);}  }
class C{  public static final Gson createGson(){  return createGsonBuilder().create();}  }
class C{  public boolean optBoolean(String key){  return optBoolean(key,false);}  }
class C{  public void click(int mask,int delay) throws InterruptedException {  hold(mask,delay);}  }
class C{  @Override public void startDocument() throws SAXException {  baseURIStack.push(catalog.getCurrentBase());  overrideStack.push(catalog.getDefaultOverride());  return;}  }
class C{  public int length(){  if (root.child == null) {    return 0;  }  if (length > -1) {    return length;  }  length=root.getChildCount();  return length;}  }
class C{  public Page(FileChannel fc,int blockNum,int pageNum){  this(fc,blockNum,pageNum,true);}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  public boolean intersects(S2CellId other){  return other.rangeMin().lessOrEquals(rangeMax()) && other.rangeMax().greaterOrEquals(rangeMin());}  }
class C{  public void insertCertificate(String namespace,String secretName,CertificateResponse certificate){  val expiryDate=LocalDate.fromDateFields(certificate.getExpiryDate());  val domains=gson.toJson(certificate.getDomains());  val annotations=ImmutableMap.of(EXPIRY_ANNOTATION,expiryDate.toString(),ACME_CA_ANNOTATION,certificate.getCa(),REQUEST_ANNOTATION,domains);  client.secrets().inNamespace(namespace).createNew().withNewMetadata().withName(secretName).withAnnotations(annotations).endMetadata().withData(certificate.getCertificateFiles()).done();  log.info("Inserted secret {} into namespace {}",secretName,namespace);}  }
class C{  public void deleteLegionMember(int playerObjId){  legionMembers.remove(new Integer(playerObjId));}  }
class C{  public double percentage(ConstantRange range){  SortedSet<Constant> sorted=values();  SortedSet<Constant> contained=new TreeSet<Constant>();  Constant prev=null;  for (  Constant pct : sorted) {    if (range.contains(pct))     contained.add(pct); else     if (contained.isEmpty())     prev=pct;  }  if (contained.size() == 0)   return 0.0;  double prevPercent=prev == null ? 0.0 : pcts.get(prev);  return pcts.get(contained.last()) - prevPercent;}  }
class C{  public static AccountOperationResponseCode updatePassword(String email,String oldPassword,String newPassword){  PersistenceManager pm=pmf.getPersistenceManager();  try {    UserRecord user=findUserByEmail(pm,email);    if (user != null) {      user.setPassword(newPassword);      pm.makePersistent(user);      return AccountOperationResponseCode.OK;    } else {      return AccountOperationResponseCode.USER_NOT_FOUND;    }  }  finally {    pm.close();  }}  }
class C{  protected AdsGetDemographicsQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  @Override public String toString(){  return "Reading{" + "mDatabaseTag='" + mDatabaseTag + '\''+ ", mTimestampMillis="+ mTimestampMillis+ ", mValue="+ mValue+ '}';}  }
class C{  public EmptyBucketGetUserAssignmentToEmptyBucketTest(){  setResponseLogLengthLimit(1000);  experiment=ExperimentFactory.createExperiment();  DefaultNameExclusionStrategy experimentComparisonStrategy=new DefaultNameExclusionStrategy("creationTime","modificationTime","ruleJson");  experiment.setSerializationStrategy(experimentComparisonStrategy);}  }
class C{  private void unlockFocus(){  try {    mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,CameraMetadata.CONTROL_AF_TRIGGER_CANCEL);    setAutoFlash(mPreviewRequestBuilder);    mCaptureSession.capture(mPreviewRequestBuilder.build(),mCaptureCallback,mBackgroundHandler);    mState=STATE_PREVIEW;    mCaptureSession.setRepeatingRequest(mPreviewRequest,mCaptureCallback,mBackgroundHandler);  } catch (  CameraAccessException e) {    e.printStackTrace();  }}  }
class C{  public boolean isResolvable(String host){  try {    InetAddress.getByName(host).getHostAddress();    return true;  } catch (  UnknownHostException ex) {    Logger.log(JavaxPacScriptParser.class,LogLevel.DEBUG,"Hostname not resolveable {0}.",host);  }  return false;}  }
class C{  public static JsonNode addChild(JsonNode original,String key,JsonNode value){  Map<JsonStringNode,JsonNode> existingFields=original.getFields();  Map<JsonStringNode,JsonNode> newMap=new HashMap<>();  for (  Entry<JsonStringNode,JsonNode> entry : existingFields.entrySet()) {    newMap.put(entry.getKey(),entry.getValue());  }  newMap.put(JsonNodeFactories.string(key),value);  return JsonNodeFactories.object(newMap);}  }
class C{  public boolean matches(String url,String httpMethod){  if (httpMethodPattern != null) {    return urlPattern.matcher(url).matches() && httpMethodPattern.matcher(httpMethod).matches();  } else {    return urlPattern.matcher(url).matches();  }}  }
class C{  public WasabiEmailException(ErrorCode errorCode,String message){  this(errorCode,message,null);}  }
class C{  public long readLong() throws JMSException {  initializeReading();  try {    if (this.dataIn.available() == 0) {      throw new MessageEOFException("reached end of data");    }    this.dataIn.mark(65);    int type=this.dataIn.read();    if (type == _LONG) {      return this.dataIn.readLong();    }    if (type == _INT) {      return this.dataIn.readInt();    }    if (type == _SHORT) {      return this.dataIn.readShort();    }    if (type == _BYTE) {      return this.dataIn.readByte();    }    if (type == _STRING) {      return Long.valueOf(this.dataIn.readUTF()).longValue();    }    if (type == _NULL) {      this.dataIn.reset();      throw new NullPointerException("Cannot convert _NULL value to long.");    } else {      this.dataIn.reset();      throw new MessageFormatException(" not a long type");    }  } catch (  NumberFormatException mfe) {    try {      this.dataIn.reset();    } catch (    IOException ioe) {      JMSException jmsEx=new JMSException("reset failed");      jmsEx.setLinkedException(ioe);    }    throw mfe;  }catch (  EOFException e) {    JMSException jmsEx=new MessageEOFException(e.toString());    jmsEx.setLinkedException(e);    throw jmsEx;  }catch (  IOException e) {    JMSException jmsEx=new MessageFormatException(e.toString());    jmsEx.setLinkedException(e);    throw jmsEx;  }}  }
class C{  public void execute(JobExecutionContext context) throws JobExecutionException {  if (isEnabled() == false) {    return;  }  if (Singleton.getBackgroundJobsEnabled() == false) {    return;  }  Thread.currentThread().setPriority(Thread.MIN_PRIORITY);  while (CodeIndexer.shouldPauseAdding()) {    Singleton.getLogger().info("Pausing parser.");    return;  }  UniqueRepoQueue repoQueue=this.getNextQueuedRepo();  RepoResult repoResult=repoQueue.poll();  AbstractMap<String,Integer> runningIndexRepoJobs=Singleton.getRunningIndexRepoJobs();  if (repoResult != null && !runningIndexRepoJobs.containsKey(repoResult.getName())) {    Singleton.getLogger().info("Indexing " + repoResult.getName());    try {      runningIndexRepoJobs.put(repoResult.getName(),(int)(System.currentTimeMillis() / 1000));      JobDataMap data=context.getJobDetail().getJobDataMap();      String repoName=repoResult.getName();      String repoRemoteLocation=repoResult.getUrl();      String repoUserName=repoResult.getUsername();      String repoPassword=repoResult.getPassword();      String repoBranch=repoResult.getBranch();      String repoLocations=data.get("REPOLOCATIONS").toString();      this.LOWMEMORY=Boolean.parseBoolean(data.get("LOWMEMORY").toString());      boolean cloneSucess=checkCloneUpdateSucess(repoLocations + repoName);      if (cloneSucess == false) {        try {          FileUtils.deleteDirectory(new File(repoLocations + "/" + repoName+ "/"));          CodeIndexer.deleteByReponame(repoName);        } catch (        IOException ex) {          Singleton.getLogger().warning("ERROR - caught a " + ex.getClass() + " in "+ this.getClass()+ "\n with message: "+ ex.getMessage());        }      }      deleteCloneUpdateSuccess(repoLocations + "/" + repoName);      String repoGitLocation=repoLocations + "/" + repoName+ "/.git/";      File f=new File(repoGitLocation);      boolean existingRepo=f.exists();      boolean useCredentials=repoUserName != null && !repoUserName.isEmpty();      RepositoryChanged repositoryChanged=null;      if (existingRepo) {        repositoryChanged=this.updateExistingRepository(repoName,repoRemoteLocation,repoUserName,repoPassword,repoLocations,repoBranch,useCredentials);      } else {        repositoryChanged=this.getNewRepository(repoName,repoRemoteLocation,repoUserName,repoPassword,repoLocations,repoBranch,useCredentials);      }      createCloneUpdateSuccess(repoLocations + "/" + repoName);      boolean indexsuccess=checkIndexSucess(repoGitLocation);      if (repositoryChanged.isChanged() || indexsuccess == false) {        Singleton.getLogger().info("Update found indexing " + repoRemoteLocation);        this.updateIndex(repoName,repoLocations,repoRemoteLocation,existingRepo,repositoryChanged);      }    }  finally {      runningIndexRepoJobs.remove(repoResult.getName());    }  }}  }
class C{  private static int determineConsecutiveTextCount(CharSequence msg,int startpos){  int len=msg.length();  int idx=startpos;  while (idx < len) {    char ch=msg.charAt(idx);    int numericCount=0;    while (numericCount < 13 && isDigit(ch) && idx < len) {      numericCount++;      idx++;      if (idx < len) {        ch=msg.charAt(idx);      }    }    if (numericCount >= 13) {      return idx - startpos - numericCount;    }    if (numericCount > 0) {      continue;    }    ch=msg.charAt(idx);    if (!isText(ch)) {      break;    }    idx++;  }  return idx - startpos;}  }
class C{  public void removeChangingListener(OnWheelChangedListener listener){  changingListeners.remove(listener);}  }
class C{  GitReference createReferenceFromCompleteSha1(String ref){  return new GitReference(this,ref);}  }
class C{  public double variance(boolean bOnlyValue){  double dExpectation=average(bOnlyValue);  double dRes=0.0;  Iterator iKeyIter=hDistro.keySet().iterator();  double dObservationCount=0;  while (iKeyIter.hasNext()) {    Object oNextKey=iKeyIter.next();    if (bOnlyValue) {      dRes+=Math.pow((Double)hDistro.get(oNextKey) - dExpectation,2);      dObservationCount++;    } else {      dRes+=(Double)hDistro.get(oNextKey) * Math.pow((Double)oNextKey - dExpectation,2);      dObservationCount+=(Double)hDistro.get(oNextKey);    }  }  return (dRes / dObservationCount);}  }
class C{  public boolean inRange(){  return getDistance() <= api.getSettings().getFortSettings().getInteractionRangeInMeters();}  }
class C{  public OperatelogExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public static void fixFontStyles(@NotNull JTextComponent component){  Document document=component.getDocument();  if (!(document instanceof StyledDocument)) {    return;  }  StyledDocument styledDocument=(StyledDocument)document;  EditorColorsManager colorsManager=EditorColorsManager.getInstance();  EditorColorsScheme scheme=colorsManager.getGlobalScheme();  Style style=styledDocument.addStyle("active",null);  StyleConstants.setFontFamily(style,scheme.getEditorFontName());  StyleConstants.setFontSize(style,scheme.getEditorFontSize());  styledDocument.setCharacterAttributes(0,document.getLength(),style,false);}  }
class C{  protected void drawGridBackground(Canvas c){  if (mDrawGridBackground) {    c.drawRect(mViewPortHandler.getContentRect(),mGridBackgroundPaint);  }  if (mDrawBorders) {    c.drawRect(mViewPortHandler.getContentRect(),mBorderPaint);  }}  }
class C{  public FactoryConfigurationError(){  super();  this.exception=null;}  }
class C{  final public void print(Object o){  try {    BufferedWriter writer=new BufferedWriter(resp.getWriter());    writer.write(o.toString());    writer.flush();  } catch (  Exception e) {    if (log.isErrorEnabled())     log.error(o,e);  }}  }
class C{  void insertAfter(Node pred){  Node succ=pred.next;  next=succ;  prev=pred;  pred.next=this;  succ.prev=this;}  }
class C{  public void prepareMatrixValuePx(float xChartMin,float deltaX,float deltaY,float yChartMin){  float scaleX=mViewPortHandler.contentWidth() / deltaX;  float scaleY=mViewPortHandler.contentHeight() / deltaY;  if (Float.isInfinite(scaleX))   scaleX=0;  if (Float.isInfinite(scaleY))   scaleY=0;  mMatrixValueToPx.reset();  mMatrixValueToPx.postTranslate(-xChartMin,-yChartMin);  mMatrixValueToPx.postScale(scaleX,-scaleY);}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  private Frame padFrameBottom(Frame originalFrame,int newHeight){  Frame.Metadata metadata=originalFrame.getMetadata();  int width=metadata.getWidth();  int height=metadata.getHeight();  Log.i(TAG,"Padded image from: " + width + "x"+ height+ " to "+ width+ "x"+ newHeight);  ByteBuffer origBuffer=originalFrame.getGrayscaleImageData();  int origOffset=origBuffer.arrayOffset();  byte[] origBytes=origBuffer.array();  ByteBuffer paddedBuffer=ByteBuffer.allocateDirect(width * newHeight);  int paddedOffset=paddedBuffer.arrayOffset();  byte[] paddedBytes=paddedBuffer.array();  Arrays.fill(paddedBytes,(byte)0);  for (int y=0; y < height; ++y) {    int origStride=origOffset + y * width;    int paddedStride=paddedOffset + y * width;    System.arraycopy(origBytes,origStride,paddedBytes,paddedStride,width);  }  return new Frame.Builder().setImageData(paddedBuffer,width,newHeight,ImageFormat.NV21).setId(metadata.getId()).setRotation(metadata.getRotation()).setTimestampMillis(metadata.getTimestampMillis()).build();}  }
class C{  public static List<Pair<Integer,Float>> computeTaxPath(BitSet activeMatches,IReadBlock readBlock){  List<Pair<Integer,Float>> result=new LinkedList<>();  if (readBlock.getNumberOfMatches() == 0) {    Pair<Integer,Float> pair=new Pair<>(IdMapper.NOHITS_ID,100f);    result.add(pair);    return result;  }  Map<Node,Integer> node2count=new HashMap<>();  int totalCount=0;  if (activeMatches.cardinality() > 0) {    for (int i=activeMatches.nextSetBit(0); i != -1; i=activeMatches.nextSetBit(i + 1)) {      final IMatchBlock matchBlock=readBlock.getMatchBlock(i);      int taxonId=matchBlock.getTaxonId();      if (taxonId > 0) {        if (!TaxonomyData.isTaxonDisabled(taxonId)) {          totalCount++;          Node v=TaxonomyData.getTree().getANode(taxonId);          while (v != null) {            Integer count=node2count.get(v);            if (count != null)             node2count.put(v,count + 1); else             node2count.put(v,1);            if (v.getInDegree() > 0)             v=v.getFirstInEdge().getSource(); else             v=null;          }        }      }    }    if (totalCount == 0) {      for (int i=activeMatches.nextSetBit(0); i != -1; i=activeMatches.nextSetBit(i + 1)) {        final IMatchBlock matchBlock=readBlock.getMatchBlock(i);        int taxonId=matchBlock.getTaxonId();        if (taxonId > 0) {          totalCount++;          Node v=TaxonomyData.getTree().getANode(taxonId);          while (v != null) {            Integer count=node2count.get(v);            if (count != null)             node2count.put(v,count + 1); else             node2count.put(v,1);            if (v.getInDegree() > 0)             v=v.getFirstInEdge().getSource(); else             v=null;          }        }      }    }  }  if (totalCount == 0) {    Pair<Integer,Float> pair=new Pair<>(IdMapper.UNASSIGNED_ID,100f);    result.add(pair);    return result;  }  Node v=TaxonomyData.getTree().getRoot();  while (v != null) {    Integer count=node2count.get(v);    if (count == null)     count=0;    float percent=Math.min(100f,Math.round(100f * count / (float)totalCount));    Pair<Integer,Float> pair=new Pair<>((Integer)v.getInfo(),percent);    result.add(pair);    int bestCount=0;    Node bestChild=null;    for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {      Node w=e.getTarget();      count=node2count.get(w);      if (count != null && count > bestCount) {        bestChild=w;        bestCount=count;      }    }    v=bestChild;  }  return result;}  }
class C{  public UniformRealDistribution(double lower,double upper) throws MathIllegalArgumentException {  super();  if (lower >= upper) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);  }  this.lower=lower;  this.upper=upper;}  }
class C{  NonActivatableMahaloImpl(String[] configArgs,LifeCycle lifeCycle) throws Exception {  super(configArgs,lifeCycle,true);}  }
class C{  private void onWaitingRoom(final int resultCode){  if (resultCode != Activity.RESULT_OK) {    Logger.log("waiting room result != ok, leaving room");    leaveRoomIfExists(null,Option.<Throwable>none());  } else {    setSession(controller.session);  }  if (future != null && !future.isHappened()) {    Gdx.app.postRunnable(future);  }  future=null;}  }
class C{  private synchronized void removeAllKeys(String storeName){  if (storeName != null) {    String escapedStoreName=storeName;    escapedStoreName=escapedStoreName.replace("\\","\\\\");    escapedStoreName=escapedStoreName.replace("*","\\*");    escapedStoreName=escapedStoreName.replace("[","\\[");    escapedStoreName=escapedStoreName.replace("]","\\]");    escapedStoreName=escapedStoreName.replace("?","\\?");    String pattern=redisKey(escapedStoreName,"*");    try (Jedis jedis=pool.getResource()){      Set<String> keys=jedis.keys(pattern);      if (!keys.isEmpty()) {        jedis.del(keys.toArray(new String[keys.size()]));      }    } catch (    JedisException e) {      redisIsHealthy=false;      String msg="Unable to remove all keys";      LOG.error(msg);      throw new RuntimeException(msg,e);    }  }}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new Opt(),1);  setChild(new List(),2);}  }
class C{  @Override public void beforeFirst(){  idx.beforeFirst(searchRange);}  }
class C{  private static void loadCrashIdentifier(Context context){  String deviceIdentifier=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID);  if ((Constants.APP_PACKAGE != null) && (deviceIdentifier != null)) {    String combined=Constants.APP_PACKAGE + ":" + deviceIdentifier+ ":"+ createSalt(context);    try {      MessageDigest digest=MessageDigest.getInstance("SHA-1");      byte[] bytes=combined.getBytes("UTF-8");      digest.update(bytes,0,bytes.length);      bytes=digest.digest();      Constants.CRASH_IDENTIFIER=bytesToHex(bytes);    } catch (    Throwable e) {    }  }}  }
class C{  @Override public Long processIdentifier(Object id){  Objects.requireNonNull(id,"Element identifier cannot be null");  if (id instanceof Long)   return (Long)id;  if (id instanceof Number)   return ((Number)id).longValue();  if (id instanceof String)   return Long.valueOf((String)id);  throw new IllegalArgumentException(String.format("Expected an id that is convertible to Long but received %s",id.getClass()));}  }
class C{  protected short compareDates(DateTimeData date1,DateTimeData date2,boolean strict){  if (date1.utc == date2.utc) {    return compareOrder(date1,date2);  }  short c1, c2;  DateTimeData tempDate=new DateTimeData(null,this);  if (date1.utc == 'Z') {    cloneDate(date2,tempDate);    tempDate.timezoneHr=14;    tempDate.timezoneMin=0;    tempDate.utc='+';    normalize(tempDate);    c1=compareOrder(date1,tempDate);    if (c1 == LESS_THAN)     return c1;    cloneDate(date2,tempDate);    tempDate.timezoneHr=-14;    tempDate.timezoneMin=0;    tempDate.utc='-';    normalize(tempDate);    c2=compareOrder(date1,tempDate);    if (c2 == GREATER_THAN)     return c2;    return INDETERMINATE;  } else   if (date2.utc == 'Z') {    cloneDate(date1,tempDate);    tempDate.timezoneHr=-14;    tempDate.timezoneMin=0;    tempDate.utc='-';    if (DEBUG) {      System.out.println("tempDate=" + dateToString(tempDate));    }    normalize(tempDate);    c1=compareOrder(tempDate,date2);    if (DEBUG) {      System.out.println("date=" + dateToString(date2));      System.out.println("tempDate=" + dateToString(tempDate));    }    if (c1 == LESS_THAN)     return c1;    cloneDate(date1,tempDate);    tempDate.timezoneHr=14;    tempDate.timezoneMin=0;    tempDate.utc='+';    normalize(tempDate);    c2=compareOrder(tempDate,date2);    if (DEBUG) {      System.out.println("tempDate=" + dateToString(tempDate));    }    if (c2 == GREATER_THAN)     return c2;    return INDETERMINATE;  }  return INDETERMINATE;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately(getSyntax());}  }
class C{  public static List<Window> windows(String words){  StringTokenizer tokenizer=new StringTokenizer(words);  List<String> list=new ArrayList<String>();  while (tokenizer.hasMoreTokens())   list.add(tokenizer.nextToken());  return windows(list,5);}  }
class C{  protected void removeAt(int index){  _set[index]=(int)0;  super.removeAt(index);}  }
class C{  public static JavaRDD<List<Writable>> executeSequenceToSeparate(JavaRDD<List<List<Writable>>> inputSequence,TransformProcess transformProcess){  if (transformProcess.getFinalSchema() instanceof SequenceSchema) {    throw new IllegalStateException("Cannot return sequence data with this method");  }  return execute(null,inputSequence,transformProcess).getFirst();}  }
class C{  public boolean use_older_type_assigner(){  return soot.PhaseOptions.getBoolean(options,"use-older-type-assigner");}  }
class C{  public FriendsGetOnlineQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PAY_RESULT_OTHER(String value0){  return new SM_SYSTEM_MESSAGE(1390184,value0);}  }
class C{  public MarketReorderAlbumsQuery reorderAlbums(UserActor actor,int ownerId,int albumId){  return new MarketReorderAlbumsQuery(getClient(),actor,ownerId,albumId);}  }
class C{  @Override protected void loadData() throws IOException, MaryConfigurationException {  if (htsData == null)   htsData=new HMMData();  htsData.initHMMDataForHMMModel(voiceName);  cart=htsData.getCartTreeSet();  fperiodsec=((float)htsData.getFperiod() / (float)htsData.getRate());  predictionFeatureNames=htsData.getFeatureDefinition().getFeatureNames();}  }
class C{  @Override public void run(Context context) throws IOException, InterruptedException {  outer=context;  int numberOfThreads=getThreadCount(context);  mapClass=getMapperClass(context);  if (LOG.isDebugEnabled()) {    LOG.debug("Running with " + numberOfThreads + " threads");  }  numberOfThreads--;  InputSplit split=context.getInputSplit();  try {    List<Future<?>> taskList=null;    if (threadPool != null) {      taskList=new ArrayList<Future<?>>();synchronized (threadPool) {        for (int i=0; i < numberOfThreads; ++i) {          MapRunner runner=new MapRunner();          BaseMapper<K1,V1,K2,V2> mapper=runner.getMapper();          if (!threadPool.isShutdown()) {            Collection<Future<Object>> tasks=mapper.submitTasks(threadPool,split);            taskList.addAll(tasks);            numberOfThreads-=tasks.size();            Future<?> future=threadPool.submit(runner);            taskList.add(future);          } else {            throw new InterruptedException("Thread Pool has been shut down");          }        }        threadPool.notify();      }      MapRunner r=new MapRunner();      r.run();      for (      Future<?> f : taskList) {        f.get();      }    } else {      runners=new ArrayList<MapRunner>(numberOfThreads);      for (int i=0; i < numberOfThreads; ++i) {        MapRunner thread;        thread=new MapRunner();        thread.start();        runners.add(i,thread);      }      MapRunner r=new MapRunner();      r.run();      for (int i=0; i < numberOfThreads; ++i) {        MapRunner thread=runners.get(i);        thread.join();        Throwable th=thread.throwable;        if (th != null) {          if (th instanceof IOException) {            throw (IOException)th;          } else           if (th instanceof InterruptedException) {            throw (InterruptedException)th;          } else {            throw new RuntimeException(th);          }        }      }    }  } catch (  ClassNotFoundException e) {    LOG.error("MapRunner class not found",e);  }catch (  ExecutionException e) {    LOG.error("Error waiting for MapRunner threads to complete",e);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SkillATK_Instant_A_TO_B(String skillcaster,int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201022,skillcaster,num0,skilltarget,skillname);}  }
class C{  public int computeWeightedLCA(final Map<Integer,Integer> tax2weight,final double proportionOfWeightToCover){  if (tax2weight.size() == 0)   return IdMapper.UNASSIGNED_ID;  if (tax2weight.size() == 1)   return tax2weight.keySet().iterator().next();  if (tax2weight.size() > addresses.length) {    addresses=new String[tax2weight.size()];    weights=new int[tax2weight.size()];  }  int length=0;  int aTaxon=0;  int totalWeight=0;  for (  Integer taxonId : tax2weight.keySet()) {    if (taxonId > 0) {      String address=TaxonomyData.getAddress(taxonId);      Integer weight=tax2weight.get(taxonId);      if (address != null && weight != null) {        addresses[length]=address;        weights[length]=weight;        totalWeight+=weight;        if (length == 0)         aTaxon=taxonId;        length++;      }    }  }  if (length == 0)   return IdMapper.UNASSIGNED_ID; else   if (length == 1)   return aTaxon;  try {    final int weightToCover=Math.min(totalWeight,(int)Math.ceil(proportionOfWeightToCover * totalWeight));    final String address=getCommonPrefix(weightToCover,addresses,weights,length);    if (address != null) {      return TaxonomyData.getAddress2Id(address);    }  } catch (  Exception ex) {    Basic.caught(ex);  }  return 1;}  }
class C{  @Override public INDArray asRowVector(File f) throws IOException {  return asMatrix(f).ravel();}  }
class C{  public NativeAdView(ThemedReactContext context){  super(context);  mEventEmitter=context.getJSModule(RCTEventEmitter.class);}  }
class C{  public ClosingAwareWebDriverWrapper(WebDriver driver,FrameSwitcher frameSwitcher,boolean maximize,boolean reusable,boolean mobile){  super(driver,frameSwitcher);  this.closedListeners=new HashSet<>();  this.maximize=maximize;  this.reusable=reusable;  this.mobile=mobile;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public LUDecomposition(Matrix A){  LU=A.getArrayCopy();  m=A.getRowDimension();  n=A.getColumnDimension();  piv=new int[m];  for (int i=0; i < m; i++) {    piv[i]=i;  }  pivsign=1;  double[] LUrowi;  double[] LUcolj=new double[m];  for (int j=0; j < n; j++) {    for (int i=0; i < m; i++) {      LUcolj[i]=LU[i][j];    }    for (int i=0; i < m; i++) {      LUrowi=LU[i];      int kmax=Math.min(i,j);      double s=0.0;      for (int k=0; k < kmax; k++) {        s+=LUrowi[k] * LUcolj[k];      }      LUrowi[j]=LUcolj[i]-=s;    }    int p=j;    for (int i=j + 1; i < m; i++) {      if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {        p=i;      }    }    if (p != j) {      for (int k=0; k < n; k++) {        double t=LU[p][k];        LU[p][k]=LU[j][k];        LU[j][k]=t;      }      int k=piv[p];      piv[p]=piv[j];      piv[j]=k;      pivsign=-pivsign;    }    if (j < m & LU[j][j] != 0.0) {      for (int i=j + 1; i < m; i++) {        LU[i][j]/=LU[j][j];      }    }  }}  }
class C{  public String[] upload_file(String group_name,byte[] file_buff,int offset,int length,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_FILE,group_name,null,null,file_ext_name,length,new UploadBuff(file_buff,offset,length),meta_list);}  }
class C{  public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {  OutputStream bos=null;  try {    bos=new OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public QuestCursor queryQuests(){  return mHelper.queryQuests();}  }
class C{  private void createElement(Document doc,Element parentElement,String elementName,Font value){  Element element=doc.createElement(elementName);  element.setAttribute(FONT_SIZE,Integer.toString(value.getSize()));  element.setAttribute(FONT_STYLE,Integer.toString(value.getStyle()));  element.appendChild(doc.createTextNode(value.getName()));  parentElement.appendChild(element);}  }
class C{  public EditorFixture enterText(@NotNull final String text){  Component component=getFocusedEditor();  if (component != null) {    robot.enterText(text);  }  return this;}  }
class C{  private void reset(){  rootNode.removeAllChildren();  treeModel.reload();}  }
class C{  private String printFFormat(double x){  return fFormatString(x);}  }
class C{  private static void buildId2AddressRec(Node v,String path,Map<Integer,String> id2address,Map<String,Integer> address2id){  int id=(Integer)v.getInfo();  id2address.put(id,path);  address2id.put(path,id);  if (v.getOutDegree() < Character.MAX_VALUE) {    char count=1;    for (Edge f=v.getFirstOutEdge(); f != null; f=v.getNextOutEdge(f)) {      buildId2AddressRec(f.getOpposite(v),path + count,id2address,address2id);      count++;    }  } else {    char count1=1;    char count2=1;    for (Edge f=v.getFirstOutEdge(); f != null; f=v.getNextOutEdge(f)) {      if (count1 == Character.MAX_VALUE) {        count2++;        count1=1;      }      buildId2AddressRec(f.getOpposite(v),(path + count1) + count2,id2address,address2id);      count1++;    }  }}  }
class C{  public double doCompare(String sSummaryTextFile,Set<String> ssModelFiles){  ILoadableTextPrint ndNDoc1=null;  try {    int iIdx=utils.getConstructor(DocumentModelClassName,3);    if (iIdx > -1)     ndNDoc1=(ILoadableTextPrint)Class.forName(DocumentModelClassName).getConstructors()[iIdx].newInstance(MinNGramRank,MaxNGramRank,NGramDist); else {      iIdx=utils.getConstructor(DocumentModelClassName,5);      ndNDoc1=(ILoadableTextPrint)Class.forName(DocumentModelClassName).getConstructors()[iIdx].newInstance(MinNGramRank,MaxNGramRank,NGramDist,MinNGramRank,MaxNGramRank);    }  } catch (  IllegalArgumentException ex) {    ex.printStackTrace(System.err);  }catch (  SecurityException ex) {    ex.printStackTrace(System.err);  }catch (  ClassNotFoundException ex) {    ex.printStackTrace(System.err);  }catch (  InstantiationException ex) {    ex.printStackTrace(System.err);  }catch (  IllegalAccessException ex) {    ex.printStackTrace(System.err);  }catch (  InvocationTargetException ex) {    ex.printStackTrace(System.err);  }  if (ndNDoc1 == null)   return Double.NEGATIVE_INFINITY;  ndNDoc1.loadDataStringFromFile(sSummaryTextFile);  File fSummaryFile=new File(sSummaryTextFile);  SimilarityComparatorListener sdcNComparator=null;  try {    int iIdx=utils.getConstructor(ComparatorClassName,1);    if (iIdx > -1)     sdcNComparator=(SimilarityComparatorListener)Class.forName(ComparatorClassName).getConstructors()[iIdx].newInstance(1.0); else     sdcNComparator=(SimilarityComparatorListener)Class.forName(ComparatorClassName).newInstance();  } catch (  IllegalArgumentException ex) {    ex.printStackTrace(System.err);  }catch (  SecurityException ex) {    ex.printStackTrace(System.err);  }catch (  ClassNotFoundException ex) {    ex.printStackTrace(System.err);  }catch (  InstantiationException ex) {    ex.printStackTrace(System.err);  }catch (  IllegalAccessException ex) {    ex.printStackTrace(System.err);  }catch (  InvocationTargetException ex) {    ex.printStackTrace(System.err);  }  if (sdcNComparator == null)   return Double.NEGATIVE_INFINITY;  Iterator<String> iOtherIter=ssModelFiles.iterator();  if (Jackknifing) {    Distribution<Double> dJackResults=new Distribution<Double>();    for (int iLeaveOneOutCnt=0; iLeaveOneOutCnt < ssModelFiles.size(); iLeaveOneOutCnt++) {      Distribution dFoldSims=new Distribution();      int iCurIdx=0;      iOtherIter=ssModelFiles.iterator();      while (iOtherIter.hasNext()) {        String sModelFile=iOtherIter.next();        if ((new File(sModelFile).getName().equals(fSummaryFile.getName()) && AvoidSelfComparison) || (iCurIdx++ == iLeaveOneOutCnt)) {          if (!Silent)           System.err.println(String.format("Skipping '%s' to '%s' comparison",sModelFile,fSummaryFile));          continue;        }        ILoadableTextPrint ndNDoc2=null;        try {          int iIdx=utils.getConstructor(DocumentModelClassName,3);          if (iIdx > -1)           ndNDoc2=(ILoadableTextPrint)Class.forName(DocumentModelClassName).getConstructors()[iIdx].newInstance(MinNGramRank,MaxNGramRank,NGramDist); else {            iIdx=utils.getConstructor(DocumentModelClassName,5);            ndNDoc2=(ILoadableTextPrint)Class.forName(DocumentModelClassName).getConstructors()[iIdx].newInstance(MinNGramRank,MaxNGramRank,NGramDist,MinNGramRank,MaxNGramRank);          }        } catch (        IllegalArgumentException ex) {          ex.printStackTrace(System.err);        }catch (        SecurityException ex) {          ex.printStackTrace(System.err);        }catch (        ClassNotFoundException ex) {          ex.printStackTrace(System.err);        }catch (        InstantiationException ex) {          ex.printStackTrace(System.err);        }catch (        IllegalAccessException ex) {          ex.printStackTrace(System.err);        }catch (        InvocationTargetException ex) {          ex.printStackTrace(System.err);        }        if (ndNDoc2 == null)         return Double.NEGATIVE_INFINITY;        ndNDoc2.loadDataStringFromFile(sModelFile);        try {          GraphSimilarity sSimil=null;          sSimil=(GraphSimilarity)sdcNComparator.getSimilarityBetween(ndNDoc1,ndNDoc2);          dFoldSims.increaseValue(sSimil.ValueSimilarity,1.0);        } catch (        InvalidClassException iceE) {          System.err.println("Cannot compare..." + iceE.getMessage());        }      }      dJackResults.increaseValue(dFoldSims.average(false),1.0);    }    return dJackResults.average(false);  }  Distribution<Double> dRes=new Distribution<Double>();  while (iOtherIter.hasNext()) {    String sModelFile=iOtherIter.next();    if (new File(sModelFile).getName().equals(fSummaryFile.getName()) && AvoidSelfComparison) {      if (!Silent)       System.err.print(String.format("Skipping '%s' to '%s' comparison",sModelFile,fSummaryFile));      continue;    }    ILoadableTextPrint ndNDoc2=null;    try {      int iIdx=utils.getConstructor(DocumentModelClassName,3);      if (iIdx > -1)       ndNDoc2=(ILoadableTextPrint)Class.forName(DocumentModelClassName).getConstructors()[iIdx].newInstance(MinNGramRank,MaxNGramRank,NGramDist); else {        iIdx=utils.getConstructor(DocumentModelClassName,5);        ndNDoc2=(ILoadableTextPrint)Class.forName(DocumentModelClassName).getConstructors()[iIdx].newInstance(MinNGramRank,MaxNGramRank,NGramDist,MinNGramRank,MaxNGramRank);      }    } catch (    IllegalArgumentException ex) {      ex.printStackTrace(System.err);    }catch (    SecurityException ex) {      ex.printStackTrace(System.err);    }catch (    ClassNotFoundException ex) {      ex.printStackTrace(System.err);    }catch (    InstantiationException ex) {      ex.printStackTrace(System.err);    }catch (    IllegalAccessException ex) {      ex.printStackTrace(System.err);    }catch (    InvocationTargetException ex) {      ex.printStackTrace(System.err);    }    if (ndNDoc2 == null)     return Double.NEGATIVE_INFINITY;    ndNDoc2.loadDataStringFromFile(sModelFile);    try {      GraphSimilarity sSimil=null;      sSimil=(GraphSimilarity)sdcNComparator.getSimilarityBetween(ndNDoc1,ndNDoc2);      dRes.increaseValue(sSimil.ValueSimilarity,1.0);    } catch (    InvalidClassException iceE) {      System.err.println("Cannot compare...");    }  }  return dRes.average(false);}  }
class C{  private static void reloadAttributeOptionCombos(Collection<ValidationResult> results,DataElementCategoryService dataElementCategoryService){  for (  ValidationResult result : results) {    result.setAttributeOptionCombo(dataElementCategoryService.getDataElementCategoryOptionCombo(result.getAttributeOptionCombo().getId()));  }}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public Iterator<E> iterator(E u){  return new PatchingIterator(innerChain,u);}  }
