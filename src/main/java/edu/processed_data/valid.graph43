class C{  public static void writeLDIFLine(StringBuilder line,BufferedWriter writer,boolean wrapLines,int wrapColumn) throws IOException {  ifNull(line,writer);  int length=line.length();  if (wrapLines && length > wrapColumn) {    writer.write(line.substring(0,wrapColumn));    writer.newLine();    int pos=wrapColumn;    while (pos < length) {      int writeLength=Math.min(wrapColumn - 1,length - pos);      writer.write(' ');      writer.write(line.substring(pos,pos + writeLength));      writer.newLine();      pos+=wrapColumn - 1;    }  } else {    writer.write(line.toString());    writer.newLine();  }}  }
class C{  public void testInviteCancel(){  doCancelTest(true);}  }
class C{  private int readToken(String credentials,int startPos,int length,StringBuilder token) throws LDAPException {  if (startPos >= length) {    return startPos;  }  boolean isEscaped=false;  boolean isQuoted=false;  int pos=startPos;  char c=credentials.charAt(pos++);  if (c == ',') {    return pos;  } else   if (c == '"') {    isQuoted=true;  } else   if (c == '\\') {    isEscaped=true;  } else {    token.append(c);  }  while (pos < length) {    c=credentials.charAt(pos++);    if (isEscaped) {      token.append(c);      isEscaped=false;    } else     if (c == ',') {      if (!isQuoted) {        break;      }      token.append(c);    } else     if (c == '"') {      if (isQuoted) {        if (pos >= length) {          break;        }        char c2=credentials.charAt(pos++);        if (c2 == ',') {          break;        } else {          LocalizableMessage message=ERR_LDAPAUTH_DIGESTMD5_INVALID_CLOSING_QUOTE_POS.get(pos - 2);          throw new LDAPException(ReturnCode.INVALID_CREDENTIALS.get(),message);        }      } else {        token.append(c);      }    } else     if (c == '\\') {      isEscaped=true;    } else {      token.append(c);    }  }  return pos;}  }
class C{  public RunStats delegateGetBucketForFourthousandYearDates(int buckets) throws Exception {  long startTime=System.currentTimeMillis();  PrimaryIndexBucketGeneratorImpl ibg=new PrimaryIndexBucketGeneratorImpl(FieldDataType.DATE_TIME,buckets);  PrimaryIndexBucketLocatorImpl locator=new PrimaryIndexBucketLocatorImpl(null,ibg.generateBuckets(),null,null,null,null,null,null,null);  logger.debug("test to getBucket for the bucket distribution on FourthousandYear dates");  SimpleDateFormat simpleDtFormat=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSXXX");  String startDate="0015-07-14T00:00:00.000-06:00";  HashMap<Long,List<Object>> hm=new HashMap<>();  SummaryStatistics stats=new SummaryStatistics();  Date date=null;  for (int i=0; i < 1460000; i++) {    date=simpleDtFormat.parse(startDate);    final Date TIME=new Date((long)(Math.random() * 86400000l));    date.setTime(date.getTime() + TIME.getTime());    Long bucketId=locator.getBucket(startDate,FieldDataType.DATE_TIME);    calculate(hm,stats,bucketId,startDate);    date.setTime(date.getTime() + 86400000l - TIME.getTime());    startDate=simpleDtFormat.format(date.getTime());  }  long runTime=System.currentTimeMillis() - startTime;  RunStats runStats=new RunStats("BucketForFourthousandYearDates",FieldDataType.DATE_TIME,runTime,stats,hm);  logger.debug(runStats.toString());  return runStats;}  }
class C{  public JKTagMapping(){}  }
class C{  public CHAPChallengeAttribute(byte[] octets){  super(octets);  str=new String(octets,2,octets.length - 2);}  }
class C{  void processDragExit(DragSourceEvent dse){  DragSourceListener dsl=listener;  if (dsl != null) {    dsl.dragExit(dse);  }}  }
class C{  public static Name anyCamel(String... pieces){  List<NamePiece> namePieces=new ArrayList<>();  for (  String piece : pieces) {    validateCamel(piece,CheckCase.NO_CHECK);    CaseFormat format=CaseFormat.LOWER_CAMEL;    if (Character.isUpperCase(piece.charAt(0))) {      format=CaseFormat.UPPER_CAMEL;    }    namePieces.add(new NamePiece(piece,format));  }  return new Name(namePieces);}  }
class C{  static void testClassNewInstance(){  try {    MaybeAbstract ma=new MaybeAbstract();    System.err.println("ERROR: MaybeAbstract succeeded unexpectedly");  } catch (  InstantiationError ie) {    System.out.println("Got expected InstantationError");    if (VERBOSE)     System.out.println("--- " + ie);  }catch (  Exception ex) {    System.err.println("Got unexpected MaybeAbstract failure");  }}  }
class C{  void addPolicyToResourceTree(Policy policy) throws PolicyException, SSOException {  Set ruleNames=policy.getRuleNames();  Iterator i=ruleNames.iterator();  String ruleName=null;  Rule rule=null;  while (i.hasNext()) {    ruleName=(String)i.next();    rule=policy.getRule(ruleName);    addRuleToResourceTree(policy.getName(),rule);  }  Referrals referrals=policy.getReferrals();  if (referrals != null) {    Set referralNames=referrals.getReferralNames();    if ((referralNames != null) && (!referralNames.isEmpty())) {      Iterator referralIter=referralNames.iterator();      while (referralIter.hasNext()) {        String referralName=(String)referralIter.next();        Referral referral=referrals.getReferral(referralName);        if (referral instanceof OrgReferral) {          Set values=referral.getValues();          if ((values != null) && (!values.isEmpty())) {            Iterator valueIter=values.iterator();            while (valueIter.hasNext()) {              String value=(String)valueIter.next();              PolicyManager pm=new PolicyManager(token,value);              ResourceManager rm=pm.getResourceManager();              Set ruleNames1=policy.getRuleNames();              Iterator ruleIter=ruleNames1.iterator();              while (ruleIter.hasNext()) {                String ruleName1=(String)ruleIter.next();                Rule rule1=policy.getRule(ruleName1);                String resourceName=rule1.getResourceName();                if (resourceName != null) {                  String serviceTypeName=rule1.getServiceTypeName();                  Set resourceNames=new HashSet();                  resourceNames.add(resourceName);                  rm.addResourcePrefixes(serviceTypeName,resourceNames);                }              }            }          }        }      }    }  }}  }
class C{  private static boolean needIncrement(MutableBigInteger mdivisor,int roundingMode,int qsign,MutableBigInteger mq,MutableBigInteger mr){  assert !mr.isZero();  int cmpFracHalf=mr.compareHalf(mdivisor);  return commonNeedIncrement(roundingMode,qsign,cmpFracHalf,mq.isOdd());}  }
class C{  @Override public void logout() throws Exception {  if (loginContext != null) {    loginContext.logout();  }}  }
class C{  private static int type(final ClassWriter cw,final String desc){  String t;  int index=desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0;switch (desc.charAt(index)) {case 'V':    return 0;case 'Z':case 'C':case 'B':case 'S':case 'I':  return INTEGER;case 'F':return FLOAT;case 'J':return LONG;case 'D':return DOUBLE;case 'L':t=desc.substring(index + 1,desc.length() - 1);return OBJECT | cw.addType(t);default :int data;int dims=index + 1;while (desc.charAt(dims) == '[') {++dims;}switch (desc.charAt(dims)) {case 'Z':data=BOOLEAN;break;case 'C':data=CHAR;break;case 'B':data=BYTE;break;case 'S':data=SHORT;break;case 'I':data=INTEGER;break;case 'F':data=FLOAT;break;case 'J':data=LONG;break;case 'D':data=DOUBLE;break;default :t=desc.substring(dims + 1,desc.length() - 1);data=OBJECT | cw.addType(t);}return (dims - index) << 28 | data;}}  }
class C{  public boolean computeScrollOffset(){  return mScroller.computeScrollOffset();}  }
class C{  @Override public void close() throws IOException {  out.close();}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot,boolean isNeedResultMsg){  int result=-1;  if (commands == null || commands.length == 0) {    return new CommandResult(result,null,null);  }  Process process=null;  BufferedReader successResult=null;  BufferedReader errorResult=null;  StringBuilder successMsg=null;  StringBuilder errorMsg=null;  DataOutputStream os=null;  try {    process=Runtime.getRuntime().exec(isRoot ? COMMAND_SU : COMMAND_SH);    os=new DataOutputStream(process.getOutputStream());    for (    String command : commands) {      if (command == null) {        continue;      }      os.write(command.getBytes());      os.writeBytes(COMMAND_LINE_END);      os.flush();    }    os.writeBytes(COMMAND_EXIT);    os.flush();    result=process.waitFor();    if (isNeedResultMsg) {      successMsg=new StringBuilder();      errorMsg=new StringBuilder();      successResult=new BufferedReader(new InputStreamReader(process.getInputStream()));      errorResult=new BufferedReader(new InputStreamReader(process.getErrorStream()));      String s;      while ((s=successResult.readLine()) != null) {        successMsg.append(s);      }      while ((s=errorResult.readLine()) != null) {        errorMsg.append(s);      }    }  } catch (  IOException e) {    OPENLOG.E(e.toString());    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();    OPENLOG.E(e.toString());  } finally {    try {      if (os != null) {        os.close();      }      if (successResult != null) {        successResult.close();      }      if (errorResult != null) {        errorResult.close();      }    } catch (    IOException e) {      e.printStackTrace();    }    if (process != null) {      process.destroy();    }  }  return new CommandResult(result,successMsg == null ? null : successMsg.toString(),errorMsg == null ? null : errorMsg.toString());}  }
class C{  @Override public void removeServletMapping(String pattern){  String name=null;synchronized (servletMappingsLock) {    name=servletMappings.remove(pattern);  }  Wrapper wrapper=(Wrapper)findChild(name);  if (wrapper != null) {    wrapper.removeMapping(pattern);  }  fireContainerEvent("removeServletMapping",pattern);}  }
class C{  private static void writeUntouchedImage(final File sourceFile,final File destFile) throws IOException {  FileInputStream fileIS=new FileInputStream(sourceFile);  writeUntouchedImage(fileIS,destFile);}  }
class C{  void handleText(TagElement tag){  if (tag.breaksFlow()) {    space=false;    if (!strict) {      ignoreSpace=true;    }  }  if (textpos == 0) {    if ((!space) || (stack == null) || last.breaksFlow()|| !stack.advance(dtd.pcdata)) {      last=tag;      space=false;      lastBlockStartPos=currentBlockStartPos;      return;    }  }  if (space) {    if (!ignoreSpace) {      if (textpos + 1 > text.length) {        char newtext[]=new char[text.length + 200];        System.arraycopy(text,0,newtext,0,text.length);        text=newtext;      }      text[textpos++]=' ';      if (!strict && !tag.getElement().isEmpty()) {        ignoreSpace=true;      }    }    space=false;  }  char newtext[]=new char[textpos];  System.arraycopy(text,0,newtext,0,textpos);  if (tag.getElement().getName().equals("title")) {    handleTitle(newtext);  } else {    handleText(newtext);  }  lastBlockStartPos=currentBlockStartPos;  textpos=0;  last=tag;  space=false;}  }
class C{  public void removeMenuKeyListener(MenuKeyListener l){  listenerList.remove(MenuKeyListener.class,l);}  }
class C{  public SecureConnectionCliArgs(boolean alwaysUseSSL){  this.alwaysUseSSL=alwaysUseSSL;}  }
class C{  public Builder attributes(String... attributeOIDs){  this.attributeOIDs.addAll(asList(attributeOIDs));  return this;}  }
class C{  private void switchOverToHash(int numAtts){  for (int index=0; index < numAtts; index++) {    String qName=super.getQName(index);    Integer i=new Integer(index);    m_indexFromQName.put(qName,i);    String uri=super.getURI(index);    String local=super.getLocalName(index);    m_buff.setLength(0);    m_buff.append('{').append(uri).append('}').append(local);    String key=m_buff.toString();    m_indexFromQName.put(key,i);  }}  }
class C{  public FrameBodyTDEN(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public AnnotationMember(String name,Object val,Class type,Method m){  this(name,val);  definingMethod=m;  if (type == int.class) {    elementType=Integer.class;  } else   if (type == boolean.class) {    elementType=Boolean.class;  } else   if (type == char.class) {    elementType=Character.class;  } else   if (type == float.class) {    elementType=Float.class;  } else   if (type == double.class) {    elementType=Double.class;  } else   if (type == long.class) {    elementType=Long.class;  } else   if (type == short.class) {    elementType=Short.class;  } else   if (type == byte.class) {    elementType=Byte.class;  } else {    elementType=type;  }}  }
class C{  public Door(final TreeSpecies species,boolean isHingeRight){  this(getWoodDoorOfSpecies(species),isHingeRight);}  }
class C{  public void paintRadioButtonMenuItemBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  MBeanOperationInfo createOperationInfo(){  if (info == null) {    int impact=MBeanOperationInfo.UNKNOWN;    if ("ACTION".equals(getImpact()))     impact=MBeanOperationInfo.ACTION; else     if ("ACTION_INFO".equals(getImpact()))     impact=MBeanOperationInfo.ACTION_INFO; else     if ("INFO".equals(getImpact()))     impact=MBeanOperationInfo.INFO;    info=new MBeanOperationInfo(getName(),getDescription(),getMBeanParameterInfo(),getReturnType(),impact);  }  return (MBeanOperationInfo)info;}  }
class C{  @DataProvider(name="listCommunities") Object[][] listCommunities(){  return new Object[][]{{"public",false},{"private",false},{"OpenDS@OpenDS",true},{"dummy",false},{"",false}};}  }
class C{  private void buildStatement(StringBuilder sb,Statement stmt,int indentation) throws SyntaxException {  if (stmt instanceof ClassDef) {    buildClass(sb,(ClassDef)stmt,indentation);  } else   if (stmt instanceof InterfaceDef) {    err.SyntaxException("JavaScript don't have interfaces",stmt.line_col());  } else   if (stmt instanceof FunDef) {    buildFun(sb,(FunDef)stmt,indentation);  } else   if (stmt instanceof MethodDef) {    buildMethod(sb,(MethodDef)stmt,indentation);  } else   if (stmt instanceof Pre) {    err.SyntaxException("JavaScript don't support " + stmt,stmt.line_col());  } else   if (stmt instanceof Expression) {    buildIndentation(sb,indentation);    buildExpression(sb,(Expression)stmt,indentation);  } else   if (stmt instanceof AST.Anno) {    err.SyntaxException("JavaScript don't support annotations",stmt.line_col());  } else   if (stmt instanceof AST.For) {    buildFor(sb,(AST.For)stmt,indentation);  } else   if (stmt instanceof AST.If) {    buildIf(sb,(AST.If)stmt,indentation);  } else   if (stmt instanceof AST.Pass) {    buildIndentation(sb,indentation);    sb.append("/* pass */");  } else   if (stmt instanceof AST.Return) {    buildIndentation(sb,indentation);    sb.append("return ");    buildExpression(sb,((AST.Return)stmt).exp,indentation);  } else   if (stmt instanceof AST.StaticScope) {    err.SyntaxException("JavaScript don't support static",stmt.line_col());    buildIndentation(sb,indentation);    sb.append("function static() {\n");    buildStatements(sb,((AST.StaticScope)stmt).statements,indentation + INDENT);    buildIndentation(sb,indentation);    sb.append("}\n");  } else   if (stmt instanceof AST.Synchronized) {    err.SyntaxException("JavaScript don't support synchronized",stmt.line_col());    buildIndentation(sb,indentation);    sb.append("function synchronized() {\n");    buildStatements(sb,((AST.Synchronized)stmt).statements,indentation + INDENT);    buildIndentation(sb,indentation);    sb.append("}\n");  } else   if (stmt instanceof AST.Throw) {    buildIndentation(sb,indentation);    sb.append("throw ");    buildExpression(sb,((AST.Throw)stmt).exp,indentation);  } else   if (stmt instanceof AST.Try) {    buildIndentation(sb,indentation);    sb.append("try {\n");    buildStatements(sb,((AST.Try)stmt).statements,indentation + INDENT);    buildIndentation(sb,indentation);    sb.append("} catch (").append(((AST.Try)stmt).varName).append(") {\n");    buildStatements(sb,((AST.Try)stmt).catchStatements,indentation + INDENT);    buildIndentation(sb,indentation);    sb.append("} finally {\n");    buildStatements(sb,((AST.Try)stmt).fin,indentation + INDENT);    buildIndentation(sb,indentation);    sb.append("}\n");  } else   if (stmt instanceof AST.While) {    if (((AST.While)stmt).doWhile) {      buildIndentation(sb,indentation);      sb.append("do {\n");      buildStatements(sb,((AST.While)stmt).statements,indentation + INDENT);      buildIndentation(sb,indentation);      sb.append("} while (");      buildExpression(sb,((AST.While)stmt).condition,indentation);      sb.append(");\n");    } else {      buildIndentation(sb,indentation);      sb.append("while (");      buildExpression(sb,((AST.While)stmt).condition,indentation);      sb.append(") {\n");      buildStatements(sb,((AST.While)stmt).statements,indentation + INDENT);      buildIndentation(sb,indentation);      sb.append("}\n");    }  } else   if (stmt instanceof AST.Continue) {    buildIndentation(sb,indentation);    sb.append("continue");  } else   if (stmt instanceof AST.Break) {    buildIndentation(sb,indentation);    sb.append("break");  } else   throw new LtBug("unknown token " + stmt);}  }
class C{  public int hashCode(){  return (errorIndex << 16) | index;}  }
class C{  public OpenIDMSessionFactory(){}  }
class C{  static MutableBigInteger fixup(MutableBigInteger c,MutableBigInteger p,int k){  MutableBigInteger temp=new MutableBigInteger();  int r=-inverseMod32(p.value[p.offset + p.intLen - 1]);  for (int i=0, numWords=k >> 5; i < numWords; i++) {    int v=r * c.value[c.offset + c.intLen - 1];    p.mul(v,temp);    c.add(temp);    c.intLen--;  }  int numBits=k & 0x1f;  if (numBits != 0) {    int v=r * c.value[c.offset + c.intLen - 1];    v&=((1 << numBits) - 1);    p.mul(v,temp);    c.add(temp);    c.rightShift(numBits);  }  while (c.compare(p) >= 0)   c.subtract(p);  return c;}  }
class C{  protected PStmtKey createKey(final String sql,final int resultSetType,final int resultSetConcurrency,final StatementType stmtType){  String catalog=null;  try {    catalog=getCatalog();  } catch (  final SQLException e) {  }  return new PStmtKey(normalizeSQL(sql),catalog,resultSetType,resultSetConcurrency,stmtType);}  }
class C{  public void transform(Source xmlSource,Result outputTarget,boolean shouldRelease) throws TransformerException {synchronized (m_reentryGuard) {    SerializationHandler xoh=createSerializationHandler(outputTarget);    this.setSerializationHandler(xoh);    m_outputTarget=outputTarget;    transform(xmlSource,shouldRelease);  }}  }
class C{  public static void unbindClassLoader(Object obj,Object token,ClassLoader classLoader){  if (ContextAccessController.checkSecurityToken(obj,token)) {    Object o=clObjectBindings.get(classLoader);    if (o == null || !o.equals(obj)) {      return;    }    clBindings.remove(classLoader);    clObjectBindings.remove(classLoader);  }}  }
class C{  Map<String,List<RequestMethod>> extractTypeLevelMappings(final RequestMapping parentRequestMapping){  final Map<String,List<RequestMethod>> parentUrls=new TreeMap<>();  List<String> urls=new ArrayList<>();  List<RequestMethod> methods=new ArrayList<>();  if (parentRequestMapping != null) {    try {      urls=concatValues(parentRequestMapping.value(),parentRequestMapping.path());      methods=Arrays.asList(parentRequestMapping.method());    } catch (    IncompleteAnnotationException ex) {    }  }  final List<String> usedUrls=urls.isEmpty() ? Arrays.asList("/") : urls;  for (  final String url : usedUrls) {    final String usedUrl=url.startsWith("/") ? url : "/" + url;    parentUrls.put(usedUrl,methods);  }  return parentUrls;}  }
class C{  private static int checkMajorVersion(String majorVer) throws FSMsgException {  int majorVersion;  if (majorVer == null) {    throw new FSMsgException("nullMajorVersion",null);  }  try {    majorVersion=Integer.parseInt(majorVer);  } catch (  NumberFormatException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnRequest.checkMajorVersion: " + "invalid MajorVersion: " + e.getMessage());    }    throw new FSMsgException("wrongInput",null);  }  if (majorVersion != SAMLConstants.PROTOCOL_MAJOR_VERSION) {    if (majorVersion > SAMLConstants.PROTOCOL_MAJOR_VERSION) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSAuthnRequest.checkMajorVersion: " + "MajorVersion of the AuthnRequest is too high" + majorVersion);      }      throw new FSMsgException("requestVersionTooHigh",null);    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSAuthnRequest.checkMajorVersion:MajorVersion of " + "the AuthnRequest is too low. " + majorVersion);      }      throw new FSMsgException("requestVersionTooLow",null);    }  }  return majorVersion;}  }
class C{  public String toString(){  String s;switch (getSeverity()) {case WARNING:    s="WARNING";  break;case ERROR:s="ERROR";break;case FATAL_ERROR:s="FATAL_ERROR";break;default :s=String.valueOf(getSeverity());break;}return MessageFormat.format("[severity={0},message={1},locator={2}]",new Object[]{s,getMessage(),getLocator()});}  }
class C{  public NotFoundException(String message){  super(message);}  }
class C{  private static boolean isDigit(char p_char){  return p_char >= '0' && p_char <= '9';}  }
class C{  protected void PushStack(){  arg_count++;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeprocessinginstructionnodename.class,args);}  }
class C{  public void externalEntityDecl(String name,String publicId,String systemId) throws SAXException {  if (null != m_resultDeclHandler)   m_resultDeclHandler.externalEntityDecl(name,publicId,systemId);}  }
class C{  public ProviderNotFoundException(){}  }
class C{  protected void BuildGSubrsUsed(int Font){  int LBias=0;  int SizeOfNonCIDSubrsUsed=0;  if (fonts[Font].privateSubrs >= 0) {    LBias=CalcBias(fonts[Font].privateSubrs,Font);    SizeOfNonCIDSubrsUsed=lSubrsUsedNonCID.size();  }  for (int i=0; i < lGSubrsUsed.size(); i++) {    int Subr=(int)lGSubrsUsed.get(i);    if (Subr < gsubrOffsets.length - 1 && Subr >= 0) {      int Start=gsubrOffsets[Subr];      int End=gsubrOffsets[Subr + 1];      if (fonts[Font].isCID)       ReadASubr(Start,End,GBias,0,hGSubrsUsed,lGSubrsUsed,null); else {        ReadASubr(Start,End,GBias,LBias,hSubrsUsedNonCID,lSubrsUsedNonCID,fonts[Font].SubrsOffsets);        if (SizeOfNonCIDSubrsUsed < lSubrsUsedNonCID.size()) {          for (int j=SizeOfNonCIDSubrsUsed; j < lSubrsUsedNonCID.size(); j++) {            int LSubr=(int)lSubrsUsedNonCID.get(j);            if (LSubr < fonts[Font].SubrsOffsets.length - 1 && LSubr >= 0) {              int LStart=fonts[Font].SubrsOffsets[LSubr];              int LEnd=fonts[Font].SubrsOffsets[LSubr + 1];              ReadASubr(LStart,LEnd,GBias,LBias,hSubrsUsedNonCID,lSubrsUsedNonCID,fonts[Font].SubrsOffsets);            }          }          SizeOfNonCIDSubrsUsed=lSubrsUsedNonCID.size();        }      }    }  }}  }
class C{  private Set<Map<ServerGroupProperty,Object>> readServerGroupRegistry() throws ADSContextException {  SearchRequest request=newSearchRequest(getServerGroupContainerDN(),SINGLE_LEVEL,objectClassPresent());  try (ConnectionEntryReader entryReader=connectionWrapper.getConnection().search(request)){    Set<Map<ServerGroupProperty,Object>> result=new HashSet<>();    while (entryReader.hasNext()) {      SearchResultEntry sr=entryReader.readEntry();      result.add(makePropertiesFromServerGroupAttrs(sr));    }    return result;  } catch (  EntryNotFoundException x) {    throw new ADSContextException(ErrorType.BROKEN_INSTALL);  }catch (  AuthorizationException x) {    throw new ADSContextException(ErrorType.ACCESS_PERMISSION);  }catch (  IOException x) {    throw new ADSContextException(ErrorType.ERROR_UNEXPECTED,x);  }}  }
class C{  public boolean isOwnerExecutable(){  return is(encodedPermission,OWNER_EXECUTABLE);}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){  int w=width;  int h=height;  g.translate(x,y);  g.setColor(etchType == LOWERED ? getShadowColor(c) : getHighlightColor(c));  g.drawRect(0,0,w - 2,h - 2);  g.setColor(etchType == LOWERED ? getHighlightColor(c) : getShadowColor(c));  g.drawLine(1,h - 3,1,1);  g.drawLine(1,1,w - 3,1);  g.drawLine(0,h - 1,w - 1,h - 1);  g.drawLine(w - 1,h - 1,w - 1,0);  g.translate(-x,-y);}  }
class C{  public boolean isStrikeThrough(){  sync();  return strike;}  }
class C{  private void doSignalAll(Node first){  lastWaiter=firstWaiter=null;  do {    Node next=first.nextWaiter;    first.nextWaiter=null;    transferForSignal(first);    first=next;  } while (first != null);}  }
class C{  public PdfExtGState put(PdfName key,PdfObject value){  getPdfObject().put(key,value);  return this;}  }
class C{  public void testSecretKeyFactory07() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  try {    SecretKeyFactory.getInstance(null,defaultProvider);    fail("NullPointerException or NoSuchAlgorithmException should be thrown if algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      SecretKeyFactory.getInstance(invalidValues[i],defaultProvider);      fail("NoSuchAlgorithmException was not thrown as expected (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public DSInfo(int dsId,String dsUrl,int rsId,long generationId,ServerStatus status,boolean assuredFlag,AssuredMode assuredMode,byte safeDataLevel,byte groupId,Collection<String> refUrls,Collection<String> eclIncludes,Collection<String> eclIncludesForDeletes,short protocolVersion){  this.dsId=dsId;  this.dsUrl=dsUrl;  this.rsId=rsId;  this.generationId=generationId;  this.status=status;  this.assuredFlag=assuredFlag;  this.assuredMode=assuredMode;  this.safeDataLevel=safeDataLevel;  this.groupId=groupId;  this.refUrls=Collections.unmodifiableList(new ArrayList<String>(refUrls));  this.eclIncludes=Collections.unmodifiableSet(new HashSet<String>(eclIncludes));  this.eclIncludesForDeletes=Collections.unmodifiableSet(new HashSet<String>(eclIncludesForDeletes));  this.protocolVersion=protocolVersion;}  }
class C{  public MenuResult<Void> edit(ManagedObject<?> mo,Collection<PropertyDefinition<?>> c,boolean isCreate) throws ClientException {  for (  PropertyDefinition<?> pd : c) {    if (pd.hasOption(PropertyOption.MANDATORY) && mo.getPropertyValues(pd).isEmpty()) {      MandatoryPropertyInitializer mpi=new MandatoryPropertyInitializer(mo,pd);      MenuResult<Void> result=mpi.invoke(app);      if (!result.isSuccess()) {        return result;      }    }  }  while (true) {    MenuBuilder<Boolean> builder=new MenuBuilder<>(app);    String ufn=mo.getManagedObjectPath().getName();    if (ufn == null) {      ufn=mo.getManagedObjectDefinition().getUserFriendlyName().toString();    }    builder.setPrompt(INFO_EDITOR_HEADING_CONFIGURE_COMPONENT.get(ufn));    LocalizableMessage heading1=INFO_DSCFG_HEADING_PROPERTY_NAME.get();    LocalizableMessage heading2=INFO_DSCFG_HEADING_PROPERTY_VALUE.get();    builder.setColumnHeadings(heading1,heading2);    builder.setColumnWidths(null,0);    for (    PropertyDefinition<?> pd : c) {      boolean isReadOnly=pd.hasOption(PropertyOption.MONITORING);      if (!isCreate && pd.hasOption(PropertyOption.READ_ONLY)) {        isReadOnly=true;      }      MenuCallback<Boolean> callback;      if (isReadOnly) {        callback=new ReadOnlyPropertyViewer(mo,pd);      } else       if (pd.hasOption(PropertyOption.MULTI_VALUED)) {        callback=new MultiValuedPropertyEditor(mo,pd);      } else {        callback=new SingleValuedPropertyEditor(mo,pd);      }      LocalizableMessage values=getPropertyValues(pd,mo);      builder.addNumberedOption(LocalizableMessage.raw("%s",pd.getName()),callback,values);    }    HelpCallback helpCallback=new ComponentHelpCallback(mo,c);    builder.addHelpOption(helpCallback);    if (isCreate) {      builder.addCharOption(INFO_EDITOR_OPTION_FINISH_KEY.get(),INFO_EDITOR_OPTION_FINISH_CREATE_COMPONENT.get(ufn),MenuResult.success(true));    } else {      builder.addCharOption(INFO_EDITOR_OPTION_FINISH_KEY.get(),INFO_EDITOR_OPTION_FINISH_MODIFY_COMPONENT.get(ufn),MenuResult.success(true));    }    builder.setDefault(INFO_EDITOR_OPTION_FINISH_KEY.get(),MenuResult.success(true));    if (app.isMenuDrivenMode()) {      builder.addCancelOption(false);    }    builder.addQuitOption();    app.println();    app.println();    Menu<Boolean> menu=builder.toMenu();    MenuResult<Boolean> result=menu.run();    if (result.isSuccess()) {      if (result.getValue()) {        return MenuResult.success();      }    } else     if (result.isCancel()) {      return MenuResult.cancel();    } else {      return MenuResult.quit();    }  }}  }
class C{  public ClassLoaderObjectInputStream(ClassLoader classLoader,InputStream inputStream) throws IOException, StreamCorruptedException {  super(inputStream);  this.classLoader=classLoader;}  }
class C{  public boolean endsWith(Name n){  if (n instanceof CompositeName) {    return (impl.endsWith(n.size(),n.getAll()));  } else {    return false;  }}  }
class C{  public void init(String componentName) throws DataStoreProviderException {}  }
class C{  @SuppressWarnings("unchecked") private E removeAt(int i){  modCount++;  int s=--size;  if (s == i)   queue[i]=null; else {    E moved=(E)queue[s];    queue[s]=null;    siftDown(i,moved);    if (queue[i] == moved) {      siftUp(i,moved);      if (queue[i] != moved)       return moved;    }  }  return null;}  }
class C{  protected ComponentListener createComponentListener(){  return new ComponentHandler();}  }
class C{  void update(Node n){  Node node;  attrSchemaNode=n;  name=XMLUtils.getNodeAttributeValue(n,SMSUtils.NAME);  resourceName=XMLUtils.getNodeAttributeValue(n,SMSUtils.RESOURCE_NAME);  key=XMLUtils.getNodeAttributeValue(n,SMSUtils.I18N_KEY);  try {    order=Integer.valueOf(XMLUtils.getNodeAttributeValue(n,SMSUtils.ORDER));  } catch (  NumberFormatException e) {    order=null;  }  String attrType=XMLUtils.getNodeAttributeValue(n,SMSUtils.ATTRIBUTE_TYPE);  type=AttributeSchema.Type.LIST;  if (attrType != null) {    try {      Class attrClass=(AttributeSchema.Type.LIST).getClass();      type=(AttributeSchema.Type)(attrClass.getField(attrType.toUpperCase()).get(AttributeSchema.Type.LIST));    } catch (    Exception e) {    }  }  String attrUIType=XMLUtils.getNodeAttributeValue(n,SMSUtils.ATTRIBUTE_UITYPE);  uitype=null;  if (attrUIType != null) {    try {      Class attrClass=(AttributeSchema.UIType.LINK).getClass();      uitype=(AttributeSchema.UIType)(attrClass.getField(attrUIType.toUpperCase()).get(AttributeSchema.UIType.LINK));    } catch (    Exception e) {    }  }  String attrListOrder=XMLUtils.getNodeAttributeValue(n,SMSUtils.ATTRIBUTE_LIST_ORDER);  listOrder=null;  if (attrListOrder != null) {    try {      listOrder=AttributeSchema.ListOrder.valueOf(attrListOrder.toUpperCase());    } catch (    Exception e) {    }  }  String attrSyntax=XMLUtils.getNodeAttributeValue(n,SMSUtils.ATTRIBUTE_SYNTAX);  syntax=AttributeSchema.Syntax.STRING;  if (attrSyntax != null) {    try {      Class syntaxClass=(AttributeSchema.Syntax.STRING).getClass();      syntax=(AttributeSchema.Syntax)(syntaxClass.getField(attrSyntax.toUpperCase()).get(AttributeSchema.Syntax.STRING));    } catch (    Exception e) {    }  }  Node booleanValue;  if ((syntax.equals(AttributeSchema.Syntax.BOOLEAN)) && ((booleanValue=XMLUtils.getChildNode(n,SMSUtils.ATTRIBUTE_BOOLEAN_VALUES_ELEMENT)) != null)) {    if ((node=XMLUtils.getChildNode(booleanValue,SMSUtils.ATTRIBUTE_TRUE_BOOLEAN_ELEMENT)) != null) {      trueBooleanValue=XMLUtils.getValueOfValueNode(node);      trueValueKey=XMLUtils.getNodeAttributeValue(node,SMSUtils.I18N_KEY);    } else {      trueBooleanValue="true";    }    if ((node=XMLUtils.getChildNode(booleanValue,SMSUtils.ATTRIBUTE_FALSE_BOOLEAN_ELEMENT)) != null) {      falseBooleanValue=XMLUtils.getValueOfValueNode(node);      falseValueKey=XMLUtils.getNodeAttributeValue(node,SMSUtils.I18N_KEY);    } else {      falseBooleanValue="false";    }  } else {    trueBooleanValue="true";    falseBooleanValue="false";  }  if (type.equals(AttributeSchema.Type.SINGLE_CHOICE) || type.equals(AttributeSchema.Type.MULTIPLE_CHOICE) || type.equals(AttributeSchema.Type.LIST)) {    Node choiceValueNode=XMLUtils.getChildNode(n,SMSUtils.ATTRIBUTE_CHOICE_VALUES_ELEMENT);    if (choiceValueNode != null) {      hasChoiceValues=true;      Node cvClassName=XMLUtils.getChildNode(choiceValueNode,SMSUtils.ATTRIBUTE_CHOICE_CLASS);      if (cvClassName != null) {        String className=XMLUtils.getNodeAttributeValue(cvClassName,SMSUtils.CLASS_NAME);        try {          Class c=Class.forName(className);          choiceObject=(ChoiceValues)c.newInstance();          choiceObject.setAttributeSchema(this);          choiceObject.setKeyValues(cvClassName);          choiceObject.setParentNode(n);        } catch (        Exception e) {          SMSEntry.debug.error("SMS AttributeSchema: " + "Unable to load class: " + className,e);          choiceObject=null;        }      }      if (choiceObject == null) {        choiceValues=new LinkedHashMap();        Iterator cit=XMLUtils.getChildNodes(choiceValueNode,SMSUtils.ATTRIBUTE_CHOICE_VALUE_ELEMENT).iterator();        while (cit.hasNext()) {          Node cnode=(Node)cit.next();          String choiceValue=XMLUtils.getValueOfValueNode(cnode);          String i18nKey=XMLUtils.getNodeAttributeValue(cnode,SMSUtils.I18N_KEY);          choiceValues.put(choiceValue,i18nKey);        }      }    }  }  if ((node=XMLUtils.getChildNode(n,SMSUtils.ATTRIBUTE_DEFAULT_ELEMENT)) != null) {    Node dvClassName=XMLUtils.getChildNode(node,SMSUtils.ATTRIBUTE_DEFAULT_CLASS);    if (dvClassName != null) {      String className=XMLUtils.getNodeAttributeValue(dvClassName,SMSUtils.CLASS_NAME);      try {        Class c=Class.forName(className);        defaultsObject=(DefaultValues)c.newInstance();        defaultsObject.setAttributeSchema(this);        defaultsObject.setKeyValues(dvClassName);        defaultsObject.setParentNode(n);      } catch (      Exception e) {        SMSEntry.debug.error("SMS AttributeSchema: " + "Unable to load class: " + className,e);        defaultValues=getValues(node);      }    } else {      defaultValues=getValues(node);    }  }  if ((node=XMLUtils.getChildNode(n,SMSUtils.ATTRIBUTE_EXAMPLE_ELEMENT)) != null) {    exampleValues=getValues(node);  }  if ((syntax.equals(AttributeSchema.Syntax.PASSWORD) || syntax.equals(AttributeSchema.Syntax.ENCRYPTED_PASSWORD)) && (defaultValues != null)) {    Iterator iter=defaultValues.iterator();    defaultValues=new HashSet();    while (iter.hasNext()) {      String value=(String)iter.next();      if (value != null) {        try {          value=(String)AccessController.doPrivileged(new DecodeAction(value));        } catch (        Throwable e) {          SMSEntry.debug.error("AttributeSchemaImpl: Unable to decode",e);        }      }      defaultValues.add(value);    }  }  if ((cosQualifier=XMLUtils.getNodeAttributeValue(n,SMSUtils.ATTRIBUTE_COS_QUALIFIER)) == null) {    cosQualifier="default";  }  rangeStart=XMLUtils.getNodeAttributeValue(n,SMSUtils.ATTRIBUTE_RANGE_START);  rangeEnd=XMLUtils.getNodeAttributeValue(n,SMSUtils.ATTRIBUTE_RANGE_END);  try {    minValue=Integer.parseInt(XMLUtils.getNodeAttributeValue(n,SMSUtils.ATTRIBUTE_MIN_VALUE));  } catch (  NumberFormatException e) {    minValue=-1;  }  try {    maxValue=Integer.parseInt(XMLUtils.getNodeAttributeValue(n,SMSUtils.ATTRIBUTE_MAX_VALUE));  } catch (  NumberFormatException e) {    maxValue=-1;  }  validator=XMLUtils.getNodeAttributeValue(n,SMSUtils.ATTRIBUTE_VALIDATOR);  if (XMLUtils.getChildNode(n,SMSUtils.ATTRIBUTE_OPTIONAL) != null) {    isOptional=true;  }  isServiceIdentifier=false;  if (XMLUtils.getChildNode(n,SMSUtils.ATTRIBUTE_SERVICE_ID) != null) {    isServiceIdentifier=true;  }  isResourceNameAllowed=false;  if (XMLUtils.getChildNode(n,SMSUtils.ATTRIBUTE_RESOURCE_NAME) != null) {    isResourceNameAllowed=true;  }  isStatusAttribute=false;  if (XMLUtils.getChildNode(n,SMSUtils.ATTRIBUTE_STATUS_ATTR) != null) {    isStatusAttribute=true;  }  any=XMLUtils.getNodeAttributeValue(n,SMSUtils.ATTRIBUTE_ANY);  attributeViewBeanURL=XMLUtils.getNodeAttributeValue(n,SMSUtils.ATTRIBUTE_VIEW_BEAN_URL);  isSearchable=false;  String srch=XMLUtils.getNodeAttributeValue(n,SMSUtils.ISSEARCHABLE);  if ((srch != null) && (srch.equalsIgnoreCase("yes"))) {    isSearchable=true;  }}  }
class C{  private void removeHeader(int idx){  MimeHeaderField mh=headers[idx];  mh.recycle();  headers[idx]=headers[count - 1];  headers[count - 1]=mh;  count--;}  }
class C{  protected static void notifyAffectedDNs(String affectedDN,AMEvent dpEvent){  if (debug.messageEnabled()) {    debug.message("In AMObjectImpl.notifyAffectedDNs(..): ");  }synchronized (objImplListeners) {    Iterator mapItr=objImplListeners.entrySet().iterator();    while (mapItr.hasNext()) {      Map.Entry me=(Map.Entry)mapItr.next();      if (((String)(me.getKey())).endsWith(affectedDN)) {        Set objImplSet=(Set)me.getValue();        Iterator setItr=objImplSet.iterator();        while (setItr.hasNext()) {          AMObjectImpl dpObjImpl=(AMObjectImpl)setItr.next();          dpObjImpl.sendEvents(dpEvent);        }      }    }  }}  }
class C{  protected void parseDOMChileElements(ListIterator iter) throws SAML2Exception {  super.parseDOMChileElements(iter);  AssertionFactory assertionFactory=AssertionFactory.getInstance();  if (iter.hasNext()) {    Element childElement=(Element)iter.next();    String localName=childElement.getLocalName();    if (SAML2Constants.BASEID.equals(localName)) {      baseID=assertionFactory.createBaseID(childElement);    } else     if (SAML2Constants.NAMEID.equals(localName)) {      nameID=assertionFactory.createNameID(childElement);    } else     if (SAML2Constants.ENCRYPTEDID.equals(localName)) {      encryptedID=assertionFactory.createEncryptedID(childElement);    } else {      throw new SAML2Exception(SAML2SDKUtils.bundle.getString("nameIDMReqWrongID"));    }  } else {    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("nameIDMReqWrongID"));  }  if (iter.hasNext()) {    Element childElement=(Element)iter.next();    String localName=childElement.getLocalName();    if (SAML2Constants.NAMEID_POLICY.equals(localName)) {      nameIDPolicy=ProtocolFactory.getInstance().createNameIDPolicy(childElement);    } else {      throw new SAML2Exception(SAML2SDKUtils.bundle.getString("nameIDMReqMissingNameIDPolicy"));    }  } else {    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("nameIDMReqMissingNameIDPolicy"));  }}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setMavenLike(true).setUseDirty(true);  unchecked(null);}  }
class C{  private void generatePostamble(){  out.popIndent();  out.printil("} catch (java.lang.Throwable t) {");  out.pushIndent();  out.printil("if (!(t instanceof javax.servlet.jsp.SkipPageException)){");  out.pushIndent();  out.printil("out = _jspx_out;");  out.printil("if (out != null && out.getBufferSize() != 0)");  out.pushIndent();  out.printil("try {");  out.pushIndent();  out.printil("if (response.isCommitted()) {");  out.pushIndent();  out.printil("out.flush();");  out.popIndent();  out.printil("} else {");  out.pushIndent();  out.printil("out.clearBuffer();");  out.popIndent();  out.printil("}");  out.popIndent();  out.printil("} catch (java.io.IOException e) {}");  out.popIndent();  out.printil("if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);");  out.printil("else throw new ServletException(t);");  out.popIndent();  out.printil("}");  out.popIndent();  out.printil("} finally {");  out.pushIndent();  out.printil("_jspxFactory.releasePageContext(_jspx_page_context);");  out.popIndent();  out.printil("}");  out.popIndent();  out.printil("}");  genCommonPostamble();}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] removeElement(Class<T> kind,T[] array,T element){  if (array != null) {    final int length=array.length;    for (int i=0; i < length; i++) {      if (array[i] == element) {        if (length == 1) {          return null;        }        T[] result=(T[])Array.newInstance(kind,length - 1);        System.arraycopy(array,0,result,0,i);        System.arraycopy(array,i + 1,result,i,length - i - 1);        return result;      }    }  }  return array;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  List names=(List)rc.getOption(IArgument.AGENT_GROUP_NAMES);  String file=getStringOptionValue(IArgument.FILE);  if (names == null) {    names=new ArrayList();  }  if (file != null) {    names.addAll(AttributeValues.parseValues(file));  }  if (names.isEmpty()) {    throw new CLIException(getResourceString("missing-agent-group-names"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }  String displayableNames=tokenize(names);  String[] params={realm,displayableNames};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_DELETE_AGENT_GROUPS",params);  try {    Set setDelete=new HashSet();    for (Iterator i=names.iterator(); i.hasNext(); ) {      String name=(String)i.next();      AMIdentity amid=new AMIdentity(adminSSOToken,name,IdType.AGENTGROUP,realm,null);      setDelete.add(amid);    }    AgentConfiguration.deleteAgentGroups(adminSSOToken,realm,setDelete);    IOutput outputWriter=getOutputWriter();    outputWriter.printlnMessage(getResourceString("delete-agent-group-succeeded"));    for (Iterator i=names.iterator(); i.hasNext(); ) {      outputWriter.printlnMessage("    " + (String)i.next());    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_DELETE_AGENT_GROUPS",params);  } catch (  IdRepoException e) {    String[] args={realm,displayableNames,e.getMessage()};    debugError("DeleteAgentGroups.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_DELETE_AGENT_GROUPS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,displayableNames,e.getMessage()};    debugError("DeleteAgentGroups.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_DELETE_AGENT_GROUPS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={realm,displayableNames,e.getMessage()};    debugError("DeleteAgentGroups.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_DELETE_AGENT_GROUPS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public Object encode(Object pObject) throws EncoderException {  if (!(pObject instanceof java.lang.String)) {    throw new EncoderException("Parameter supplied to Metaphone encode is not of type java.lang.String");  }  return metaphone((String)pObject);}  }
class C{  public Map<String,Set<String>> read(SSOToken token,String dn) throws SMSException, SSOException {  if (dn == null || dn.length() == 0) {    debug.error("SMSLdapObject: read():Null or Empty DN=" + dn);    throw new SMSException(LdapException.newLdapException(ResultCode.NO_SUCH_OBJECT,getBundleString(IUMSConstants.SMS_INVALID_DN,dn)),"sms-NO_SUCH_OBJECT");  }  if (!LDAPUtils.isDN(dn)) {    debug.warning("SMSLdapObject: Invalid DN=" + dn);    String[] args={dn};    throw new SMSException(IUMSConstants.UMS_BUNDLE_NAME,"sms-INVALID_DN",args);  }  if (SMSNotificationManager.isCacheEnabled() && entriesNotPresent.contains(dn)) {    debug.message("SMSLdapObject:read Entry not present: {} (checked in cache)",dn);    return null;  }  Entry ldapEntry=null;  int retry=0;  while (retry <= connNumRetry) {    debug.message("SMSLdapObject.read() retry: {}",retry);    ResultCode errorCode=null;    try (Connection conn=getConnection(token.getPrincipal())){      ldapEntry=conn.searchSingleEntry(LDAPRequests.newSingleEntrySearchRequest(DN.valueOf(dn),getAttributeNames()));      break;    } catch (    LdapException e) {      errorCode=e.getResult().getResultCode();      if (!retryErrorCodes.contains(errorCode) || retry == connNumRetry) {        if (errorCode.equals(ResultCode.NO_SUCH_OBJECT)) {          objectChanged(dn,DELETE);          debug.message("SMSLdapObject.read: entry not present: {}",dn);          break;        } else {          debug.warning("SMSLdapObject.read: Error in accessing entry DN: {}",dn,e);          throw new SMSException(e,"sms-entry-cannot-access");        }      }      retry++;      try {        Thread.sleep(connRetryInterval);      } catch (      InterruptedException ex) {      }    }  }  if (ldapEntry != null) {    if (debug.messageEnabled()) {      debug.message("SMSLdapObject.read(): reading entry: " + dn);    }    return SMSUtils.convertEntryToAttributesMap(ldapEntry);  } else {    return null;  }}  }
class C{  private void buildLogicAnd(MethodVisitor methodVisitor,CodeInfo info,Ins.LogicAnd logicAnd){  buildValueAccess(methodVisitor,info,logicAnd.b1(),true);  Label flag=new Label();  methodVisitor.visitJumpInsn(Opcodes.IFEQ,flag);  info.pop(1);  buildValueAccess(methodVisitor,info,logicAnd.b2(),true);  methodVisitor.visitJumpInsn(Opcodes.IFEQ,flag);  info.pop(1);  methodVisitor.visitInsn(Opcodes.ICONST_1);  Label nop=new Label();  methodVisitor.visitJumpInsn(Opcodes.GOTO,nop);  methodVisitor.visitLabel(flag);  methodVisitor.visitInsn(Opcodes.ICONST_0);  methodVisitor.visitLabel(nop);  methodVisitor.visitInsn(Opcodes.NOP);  info.push(CodeInfo.Size._1);}  }
class C{  @Override public int read() throws IOException {  if (max >= 0 && pos >= max) {    return -1;  }  int result=in.read();  pos++;  return result;}  }
class C{  public void enableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glEnableVertexAttribArray(location);}  }
class C{  public synchronized void clear(){  this.credMap.clear();}  }
class C{  boolean mustCheckUnsavedChanges(){  return index != null && saveChanges.isVisible() && saveChanges.isEnabled();}  }
class C{  public static long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){  return getService().dynamicQueryCount(dynamicQuery);}  }
class C{  public void receive() throws IOException {  boolean checkexpired=true;  try {    socket.receive(receivePacket);    if (receivePacket.getLength() > MAX_PACKET_SIZE) {      log.error(sm.getString("mcastServiceImpl.packet.tooLong",Integer.toString(receivePacket.getLength())));    } else {      byte[] data=new byte[receivePacket.getLength()];      System.arraycopy(receivePacket.getData(),receivePacket.getOffset(),data,0,data.length);      if (XByteBuffer.firstIndexOf(data,0,MemberImpl.TRIBES_MBR_BEGIN) == 0) {        memberDataReceived(data);      } else {        memberBroadcastsReceived(data);      }    }  } catch (  SocketTimeoutException x) {  }  if (checkexpired)   checkExpired();}  }
class C{  private void replace(MethodNode method){  StackFrame[] frames=StackUtil.getFrames(method);  AbstractInsnNode ain=method.instructions.getFirst();  List<String> strings=new ArrayList<String>();  List<Integer> argSizes=new ArrayList<Integer>();  List<Integer> indecies=new ArrayList<Integer>();  while (ain != null) {    if (ain.getOpcode() == Opcodes.INVOKESTATIC) {      String desc=((MethodInsnNode)ain).desc;      if (isDashDesc(desc)) {        int opIndex=OpUtils.getIndex(ain);        Type t=Type.getMethodType(desc);        MethodInsnNode min=(MethodInsnNode)ain;        ClassNode owner=getNodes().get(min.owner);        Object[] args=new Object[t.getArgumentTypes().length];        if (opIndex < 0 || opIndex >= frames.length || args.length <= 1) {          ain=ain.getNext();          continue;        }        StackFrame frame=frames[opIndex];        if (frame == null) {          ain=ain.getNext();          continue;        }        if (frame.getStackSize() < args.length) {          ain=ain.getNext();          continue;        }        boolean failed=false;        for (int i=0; i < args.length; i++) {          InsnValue val=(InsnValue)frame.getStack(frame.getStackSize() - i - 1);          if (val.getValue() == null) {            failed=true;            break;          }          args[args.length - i - 1]=val.getValue();        }        if (failed) {          ain=ain.getNext();          continue;        }        Object o=Sandbox.getIsolatedReturn(owner,min,args);        if (o != null) {          strings.add(o.toString());          argSizes.add(args.length);          indecies.add(opIndex);        }      }    }    ain=ain.getNext();  }  ain=method.instructions.getFirst();  int offset=0;  while (ain != null) {    if (ain.getOpcode() == Opcodes.INVOKESTATIC) {      MethodInsnNode min=(MethodInsnNode)ain;      if (isDashDesc(min.desc)) {        int opIndex=OpUtils.getIndex(ain);        if (indecies.size() > 0 && indecies.get(0) + offset == opIndex) {          indecies.remove(0);          int args=argSizes.remove(0);          String string=strings.remove(0);          for (int i=0; i < args; i++) {            method.instructions.insertBefore(min,new InsnNode(Opcodes.POP));            offset++;          }          LdcInsnNode ldc=new LdcInsnNode(string);          method.instructions.set(ain,ldc);          ain=ldc;        }      }    }    ain=ain.getNext();  }}  }
class C{  public void enforceTlsPolicy(ClientTransactionExt transaction) throws SecurityException {}  }
class C{  public void addNotify(){synchronized (getTreeLock()) {    if (peer == null)     peer=getToolkit().createCanvas(this);    super.addNotify();  }}  }
class C{  @Override public void initParams(HttpServletRequest request,IConfiguration configuration,Object... params) throws ConnectorException {  super.initParams(request,configuration);  this.files=new ArrayList<>();  getFilesListFromRequest(request);}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public static ValueExpression createValueException(final String value){  return JKJsfUtil.createValueException(value,Object.class);}  }
class C{  public static final String toJson(final Object object){  return toJson(object,true);}  }
class C{  public DirectoryEnvironmentConfig(){  this(true);}  }
class C{  public ArraySet<Pnt> facetOpposite(Pnt vertex){  ArraySet<Pnt> facet=new ArraySet<Pnt>(this);  if (!facet.remove(vertex))   throw new IllegalArgumentException("Vertex not in triangle");  return facet;}  }
class C{  public boolean entryExists(String tokenID,String objName) throws SSOException, RemoteException {  initialize();  if (debug.messageEnabled()) {    debug.message("SMSJAXRPCObjectImpl::exists dn: " + objName);  }  boolean entryExists=false;  try {    CachedSMSEntry ce=CachedSMSEntry.getInstance(getToken(tokenID),objName);    if (ce.isDirty()) {      ce.refresh();    }    entryExists=!(ce.getSMSEntry().isNewEntry());  } catch (  SMSException smse) {  }  return (entryExists);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemthatexists.class,args);}  }
class C{  private Map removeResourcePrefixes(Set prefixes,Map prefixMap){  Iterator iter=prefixes.iterator();  while (iter.hasNext()) {    String prefix=(String)iter.next();    int intValue=0;    String count=(String)prefixMap.get(prefix);    if (count != null) {      try {        intValue=Integer.parseInt(count);      } catch (      Exception e) {        PolicyManager.debug.error("ResourceManager.removeResourcePrefixes:",e);      }    }    intValue--;    if (intValue > 0) {      prefixMap.put(prefix,Integer.toString(intValue));    } else {      prefixMap.remove(prefix);    }  }  return prefixMap;}  }
class C{  public static ExternalSASLBindRequest newExternalSASLBindRequest(){  return new ExternalSASLBindRequestImpl();}  }
class C{  public static boolean isErrorLoggable(Level level){  if (logger == null) {    return false;  } else {    return logger.isErrorLoggable(level);  }}  }
class C{  void executeNSDecls(TransformerImpl transformer,String ignorePrefix) throws TransformerException {  try {    if (null != m_prefixTable) {      SerializationHandler rhandler=transformer.getResultTreeHandler();      int n=m_prefixTable.size();      for (int i=n - 1; i >= 0; i--) {        XMLNSDecl decl=(XMLNSDecl)m_prefixTable.get(i);        if (!decl.getIsExcluded() && !(null != ignorePrefix && decl.getPrefix().equals(ignorePrefix))) {          rhandler.startPrefixMapping(decl.getPrefix(),decl.getURI(),true);        }      }    }  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  }}  }
class C{  public MemberVirtualAttributeProvider(){  super();}  }
class C{  public org.w3c.dom.Document encryptAndReplaceResourceID(org.w3c.dom.Document doc,org.w3c.dom.Element element,java.lang.String secretKeyAlg,int keySize,java.security.Key kek,int kekStrength,String providerID) throws EncryptionException {  return ep.encryptAndReplaceResourceID(doc,element,secretKeyAlg,keySize,kek,kekStrength,providerID);}  }
class C{  public String encodeBody(){  return encodeBody(new StringBuilder()).toString();}  }
class C{  public SQLTransactionRollbackException(Throwable cause){  super(cause);}  }
class C{  protected void fireCaretUpdate(CaretEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == CaretListener.class) {      ((CaretListener)listeners[i + 1]).caretUpdate(e);    }  }}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public void insert_double(double value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_double",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    $self.insert_double(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  WindowMsg(byte[] in) throws DataFormatException {  final ByteArrayScanner scanner=new ByteArrayScanner(in);  final byte msgType=scanner.nextByte();  if (msgType != MSG_TYPE_WINDOW) {    throw new DataFormatException("input is not a valid Window Message");  }  numAck=scanner.nextIntUTF8();}  }
class C{  public LongIteratorSpliterator(PrimitiveIterator.OfLong iterator,long size,int characteristics){  this.it=iterator;  this.est=size;  this.characteristics=(characteristics & Spliterator.CONCURRENT) == 0 ? characteristics | Spliterator.SIZED | Spliterator.SUBSIZED : characteristics;}  }
class C{  public static NSObject parse(byte[] data) throws PropertyListFormatException, UnsupportedEncodingException {  BinaryPropertyListParser parser=new BinaryPropertyListParser();  return parser.doParse(data);}  }
class C{  private AttributeDescription loadAttributeToMaps(final int id,final String attributeName,final Iterable<String> attributeOptions,final Mappings mappings){  final AttributeType type=DirectoryServer.getSchema().getAttributeType(attributeName);  final Set<String> options=getOptions(attributeOptions);  final AttributeDescription ad=AttributeDescription.create(type,options);  exclusiveLock.lock();  try {    mappings.adEncodeMap.put(ad,id);    if (id < mappings.adDecodeMap.size()) {      mappings.adDecodeMap.set(id,ad);    } else {      while (id > mappings.adDecodeMap.size()) {        mappings.adDecodeMap.add(null);      }      mappings.adDecodeMap.add(ad);    }    return ad;  }  finally {    exclusiveLock.unlock();  }}  }
class C{  public void print(PrintStream out,PropertyDefinition<?> pd){  pd.accept(pimpl,out);}  }
class C{  final public void enable_tracing(){}  }
class C{  private Key createStoreKey(Object key){  return new Key(key,queue);}  }
class C{  protected static boolean isBufferNotSyncSafe(ByteBuffer buffer){  int position=buffer.position();  for (int i=0; i < INTEGRAL_SIZE; i++) {    byte nextByte=buffer.get(position + i);    if ((nextByte & 0x80) > 0) {      return true;    }  }  return false;}  }
class C{  protected boolean validateIfNecessary(){  if (!isValid() && canBeValid) {    children=null;    Object lock=lock();    try {      validate();    }  finally {      unlock(lock);    }  }  return isValid();}  }
class C{  public LinkedList(){  head.next=head.previous=head;}  }
class C{  public TriggerWrapper resume(){  return reState(Trigger.STATE_PAUSED);}  }
class C{  public boolean visitPredicate(ExpressionOwner owner,Expression pred){  m_predDepth++;  if (m_predDepth == 1) {    if ((pred instanceof Variable) || (pred instanceof XNumber) || (pred instanceof Div)|| (pred instanceof Plus)|| (pred instanceof Minus)|| (pred instanceof Mod)|| (pred instanceof Quo)|| (pred instanceof Mult)|| (pred instanceof org.apache.xpath.operations.Number)|| (pred instanceof Function))     m_hasPositionalPred=true; else     pred.callVisitors(owner,this);  }  m_predDepth--;  return false;}  }
class C{  private int matchString(String text,int start,int field,String[] data,CalendarBuilder calb){  int i=0;  int count=data.length;  if (field == Calendar.DAY_OF_WEEK) {    i=1;  }  int bestMatchLength=0, bestMatch=-1;  for (; i < count; ++i) {    int length=data[i].length();    if (length > bestMatchLength && text.regionMatches(true,start,data[i],0,length)) {      bestMatch=i;      bestMatchLength=length;    }  }  if (bestMatch >= 0) {    calb.set(field,bestMatch);    return start + bestMatchLength;  }  return -start;}  }
class C{  protected DecodingException(LocalizableMessage message){  super(message);}  }
class C{  @DataProvider public Object[][] equivalentDnRepresentations(){  return new Object[][]{{"",""},{"   ",""},{"cn=","cn="},{"cn= ","cn="},{"cn =","cn="},{"cn = ","cn="},{"dc=com","dc=com"},{"dc=com+o=com","dc=com+o=com"},{"DC=COM","DC=COM"},{"dc = com","dc=com"},{" dc = com ","dc=com"},{"dc=example,dc=com","dc=example,dc=com"},{"dc=example, dc=com","dc=example,dc=com"},{"dc=example ,dc=com","dc=example,dc=com"},{"dc =example , dc  =   com","dc=example,dc=com"},{"givenName=John+cn=Doe,ou=People,dc=example,dc=com","givenName=John+cn=Doe,ou=People,dc=example,dc=com"},{"givenName=John\\+cn=Doe,ou=People,dc=example,dc=com","givenName=John\\+cn=Doe,ou=People,dc=example,dc=com"},{"cn=Doe\\, John,ou=People,dc=example,dc=com","cn=Doe\\, John,ou=People,dc=example,dc=com"},{"UID=jsmith,DC=example,DC=net","UID=jsmith,DC=example,DC=net"},{"OU=Sales+CN=J. Smith,DC=example,DC=net","OU=Sales+CN=J. Smith,DC=example,DC=net"},{"CN=James \\\"Jim\\\" Smith\\, III,DC=example,DC=net","CN=James \\\"Jim\\\" Smith\\, III,DC=example,DC=net"},{"CN=John Smith\\2C III,DC=example,DC=net","CN=John Smith\\, III,DC=example,DC=net"},{"CN=\\23John Smith\\20,DC=example,DC=net","CN=\\#John Smith\\ ,DC=example,DC=net"},{"CN=Before\\0dAfter,DC=example,DC=net","CN=Before\\0dAfter,DC=example,DC=net"},{"2.5.4.3=#04024869","2.5.4.3=\\04\\02Hi"},{"1.1.1=","1.1.1="},{"CN=Lu\\C4\\8Di\\C4\\87","CN=Lu\u010di\u0107"},{"ou=\\e5\\96\\b6\\e6\\a5\\ad\\e9\\83\\a8,o=Airius","ou=\u55b6\u696d\u90e8,o=Airius"},{"photo=\\ john \\ ,dc=com","photo=\\ john \\ ,dc=com"},{"AB-global=","AB-global="},{"OU= Sales + CN = J. Smith ,DC=example,DC=net","OU=Sales+CN=J. Smith,DC=example,DC=net"},{"cn=John+a=b","cn=John+a=b"},{"O=\"Sue, Grabbit and Runn\",C=US","O=Sue\\, Grabbit and Runn,C=US"}};}  }
class C{  public void close(){  flush();  stopBufferTimer();}  }
class C{  private static String digits(long val,int digits){  long hi=1L << (digits * 4);  return Long.toHexString(hi | (val & (hi - 1))).substring(1);}  }
class C{  @KnownFailure("Fixed on DonutBurger, Wrong Exception thrown") public void test_unwrap_03(){  String host="new host";  int port=8080;  ByteBuffer bbR=ByteBuffer.allocate(100).asReadOnlyBuffer();  ByteBuffer[] bbA={bbR,ByteBuffer.allocate(10),ByteBuffer.allocate(100)};  ByteBuffer bb=ByteBuffer.allocate(10);  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.unwrap(bb,bbA,0,bbA.length);    fail("ReadOnlyBufferException wasn't thrown");  } catch (  ReadOnlyBufferException iobe) {  }catch (  Exception e) {    fail(e + " was thrown instead of ReadOnlyBufferException");  }}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  logger.info("Got an INVITE  " + request);  try {    logger.info("shootme: got an Invite sending OK");    Response response=protocolObjects.messageFactory.createResponse(180,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    Address address=protocolObjects.addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=protocolObjects.headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);      logger.info("Server transaction created!" + request);      logger.info("Dialog = " + st.getDialog());      if (st.getDialog().getApplicationData() == null) {        st.getDialog().setApplicationData(new ApplicationData());      }    } else {      logger.info("This is a RE INVITE ");      ReInviteTest.assertSame("Dialog mismatch ",st.getDialog(),this.dialog);      if (isTargetRefresh) {        address=protocolObjects.addressFactory.createAddress("ShootmeTargetRefresh <sip:shootmeTargetRefresh@" + myAddress + ":"+ myPort+ ">");        contactHeader=protocolObjects.headerFactory.createContactHeader(address);      }    }    logger.info("got a server tranasaction " + st);    byte[] content=request.getRawContent();    if (content != null) {      logger.info(" content = " + new String(content));      ContentTypeHeader contentTypeHeader=protocolObjects.headerFactory.createContentTypeHeader("application","sdp");      logger.info("response = " + response);      response.setContent(content,contentTypeHeader);    }    dialog=st.getDialog();    if (dialog != null) {      logger.info("Dialog " + dialog);      logger.info("Dialog state " + dialog.getState());    }    st.sendResponse(response);    response=protocolObjects.messageFactory.createResponse(200,request);    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    response.addHeader(contactHeader);    st.sendResponse(response);    logger.info("TxState after sendResponse = " + st.getState());    this.inviteTid=st;  } catch (  Exception ex) {    String s="unexpected exception";    logger.error(s,ex);    ReInviteTest.fail(s);  }}  }
class C{  public static byte[] wrapBMP(ImageData image) throws IOException {  if (image.getOriginalType() != ImageType.BMP) {    throw new PdfException(PdfException.OnlyBmpCanBeWrappedInWmf);  }  InputStream imgIn;  byte data[];  if (image.getData() == null) {    imgIn=image.getUrl().openStream();    ByteArrayOutputStream out=new ByteArrayOutputStream();    int b=0;    while ((b=imgIn.read()) != -1)     out.write(b);    imgIn.close();    data=out.toByteArray();  } else {    data=image.getData();  }  int sizeBmpWords=data.length - 14 + 1 >>> 1;  ByteArrayOutputStream os=new ByteArrayOutputStream();  writeWord(os,1);  writeWord(os,9);  writeWord(os,0x0300);  writeDWord(os,9 + 4 + 5+ 5+ 13+ sizeBmpWords+ 3);  writeWord(os,1);  writeDWord(os,14 + sizeBmpWords);  writeWord(os,0);  writeDWord(os,4);  writeWord(os,META_SETMAPMODE);  writeWord(os,8);  writeDWord(os,5);  writeWord(os,META_SETWINDOWORG);  writeWord(os,0);  writeWord(os,0);  writeDWord(os,5);  writeWord(os,META_SETWINDOWEXT);  writeWord(os,(int)image.getHeight());  writeWord(os,(int)image.getWidth());  writeDWord(os,13 + sizeBmpWords);  writeWord(os,META_DIBSTRETCHBLT);  writeDWord(os,0x00cc0020);  writeWord(os,(int)image.getHeight());  writeWord(os,(int)image.getWidth());  writeWord(os,0);  writeWord(os,0);  writeWord(os,(int)image.getHeight());  writeWord(os,(int)image.getWidth());  writeWord(os,0);  writeWord(os,0);  os.write(data,14,data.length - 14);  if ((data.length & 1) == 1) {    os.write(0);  }  writeDWord(os,3);  writeWord(os,0);  os.close();  return os.toByteArray();}  }
class C{  public void removeMember(PersistentObject member) throws UMSException {  Principal principal=getPrincipal();  if (principal == null) {    throw new IllegalArgumentException(i18n.getString(IUMSConstants.BAD_PRINCIPAL_HDL));  }  member.modify(new Attr(MEMBER_ATTR_NAME,this.getDN()),ModificationType.DELETE);  DataLayer.getInstance().removeAttributeValue(principal,member.getGuid(),MEMBER_ATTR_NAME,this.getDN());}  }
class C{  public void parse(String filename,List<LocalizableMessage> warnings) throws IOException, InitializationException, MakeLDIFException {  templatePath=null;  File f=getFile(filename);  if (f == null || !f.exists()) {    LocalizableMessage message=ERR_MAKELDIF_COULD_NOT_FIND_TEMPLATE_FILE.get(filename);    throw new IOException(message.toString());  }  templatePath=f.getParentFile().getAbsolutePath();  List<String> fileLines=readLines(f);  String[] lines=fileLines.toArray(new String[fileLines.size()]);  parse(lines,warnings);}  }
class C{  public boolean isMandatoryAttribute(String name){  return mandatory.contains(name);}  }
class C{  public Set searchRoles(String wildcard,int level) throws AMException, SSOException {  return searchRoles(wildcard,null,level);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGetPost(request,response);}  }
class C{  boolean alwaysOnTop(){  return false;}  }
class C{  public static byte[] createJarArchiveByteArray(File[] tobeJared,String relativeToDir) throws IOException {  int BUFFER_SIZE=10240;  byte buffer[]=new byte[BUFFER_SIZE];  ByteArrayOutputStream stream=new ByteArrayOutputStream();  JarOutputStream out=new JarOutputStream(stream,new Manifest());  for (  File t : tobeJared) {    if (t == null || !t.exists() || t.isDirectory()) {      if (t != null && !t.isDirectory())       logger.error("Can't add to jar {}",t);      continue;    }    String filename=t.getPath().replace(relativeToDir,"").replace("\\","/");    JarEntry jarAdd=new JarEntry(filename);    jarAdd.setTime(t.lastModified());    out.putNextEntry(jarAdd);    FileInputStream in=new FileInputStream(t);    while (true) {      int nRead=in.read(buffer,0,buffer.length);      if (nRead <= 0)       break;      out.write(buffer,0,nRead);    }    in.close();  }  out.close();  stream.close();  return stream.toByteArray();}  }
class C{  public void readLoop(ReadCallback readCallback) throws IOException {  Frame frame=new Frame();  do {    frame.readFrom(mBufferedInput);    mCurrentPayload.write(frame.payloadData,0,(int)frame.payloadLen);    if (frame.fin) {      byte[] completePayload=mCurrentPayload.toByteArray();      readCallback.onCompleteFrame(frame.opcode,completePayload,completePayload.length);      mCurrentPayload.reset();    }  } while (frame.opcode != Frame.OPCODE_CONNECTION_CLOSE);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  try {    s.defaultReadObject();    this.queue=new Object[q.size()];    comparator=q.comparator();    addAll(q);  }  finally {    q=null;  }}  }
class C{  protected AMInvalidDNException(String msg,String errorCode,UMSException ue){  super(msg,errorCode,ue);}  }
class C{  public boolean isAppSession(){  return sessionType == SessionType.APPLICATION;}  }
class C{  public void writeModifyDNChangeRecord(DN dn,RDN newRDN,boolean deleteOldRDN,DN newSuperior) throws IOException {  ifNull(dn,newRDN);  BufferedWriter writer=exportConfig.getWriter();  int wrapColumn=exportConfig.getWrapColumn();  boolean wrapLines=wrapColumn > 1;  writeDN("dn",dn,writer,wrapLines,wrapColumn);  String changeType=newSuperior == null ? "changetype: modrdn" : "changetype: moddn";  writeLDIFLine(new StringBuilder(changeType),writer,wrapLines,wrapColumn);  StringBuilder rdnLine=new StringBuilder("newrdn");  appendLDIFSeparatorAndValue(rdnLine,ByteString.valueOfUtf8(newRDN.toString()));  writeLDIFLine(rdnLine,writer,wrapLines,wrapColumn);  StringBuilder deleteOldRDNLine=new StringBuilder();  deleteOldRDNLine.append("deleteoldrdn: ");  deleteOldRDNLine.append(deleteOldRDN ? "1" : "0");  writeLDIFLine(deleteOldRDNLine,writer,wrapLines,wrapColumn);  if (newSuperior != null) {    writeDN("newsuperior",newSuperior,writer,wrapLines,wrapColumn);  }  writer.newLine();}  }
class C{  public static void main(String[] args){  System.exit(filterExitCode(stopWindowsService(System.out,System.err)));}  }
class C{  public AMSecurityPropertiesException(String message){  super(message);}  }
class C{  public boolean isValid(TagData data){  return true;}  }
class C{  public void traverseAndPrint(final String tabs){  logger.info(tabs + toString());  final int len=this.subEntries.size();  for (int i=0; i < len; i++) {    final MagicMimeEntry me=this.subEntries.get(i);    me.traverseAndPrint(tabs + "\t");  }}  }
class C{  public SslRMIClientSocketFactory(){}  }
class C{  public RecurringTask(ServerContext serverContext,TaskScheduler taskScheduler,Entry recurringTaskEntry) throws DirectoryException {  this.serverContext=serverContext;  this.taskScheduler=taskScheduler;  this.recurringTaskEntry=recurringTaskEntry;  this.recurringTaskEntryDN=recurringTaskEntry.getName();  Attribute attr=getSingleAttribute(recurringTaskEntry,ATTR_RECURRING_TASK_ID,ERR_RECURRINGTASK_NO_ID_ATTRIBUTE,ERR_RECURRINGTASK_MULTIPLE_ID_TYPES,ERR_RECURRINGTASK_NO_ID);  recurringTaskID=getSingleAttributeValue(attr,ResultCode.OBJECTCLASS_VIOLATION,ERR_RECURRINGTASK_MULTIPLE_ID_VALUES,ATTR_RECURRING_TASK_ID);  attr=getSingleAttribute(recurringTaskEntry,ATTR_RECURRING_TASK_SCHEDULE,ERR_RECURRINGTASK_NO_SCHEDULE_ATTRIBUTE,ERR_RECURRINGTASK_MULTIPLE_SCHEDULE_TYPES,ERR_RECURRINGTASK_NO_SCHEDULE_VALUES);  String taskScheduleTab=getSingleAttributeValue(attr,ResultCode.CONSTRAINT_VIOLATION,ERR_RECURRINGTASK_MULTIPLE_SCHEDULE_VALUES,ATTR_RECURRING_TASK_SCHEDULE);  boolean[][] taskArrays=new boolean[][]{null,null,null,null,null};  parseTaskTab(taskScheduleTab,taskArrays,true);  minutesArray=taskArrays[MINUTE_INDEX];  hoursArray=taskArrays[HOUR_INDEX];  daysArray=taskArrays[DAY_INDEX];  monthArray=taskArrays[MONTH_INDEX];  weekdayArray=taskArrays[WEEKDAY_INDEX];  attr=getSingleAttribute(recurringTaskEntry,ATTR_TASK_CLASS,ERR_TASKSCHED_NO_CLASS_ATTRIBUTE,ERR_TASKSCHED_MULTIPLE_CLASS_TYPES,ERR_TASKSCHED_NO_CLASS_VALUES);  taskClassName=getSingleAttributeValue(attr,ResultCode.CONSTRAINT_VIOLATION,ERR_TASKSCHED_MULTIPLE_CLASS_VALUES,ATTR_TASK_CLASS);  Class<?> taskClass;  try {    taskClass=DirectoryServer.loadClass(taskClassName);  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_RECURRINGTASK_CANNOT_LOAD_CLASS.get(taskClassName,ATTR_TASK_CLASS,getExceptionMessage(e));    throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,message,e);  }  try {    task=(Task)taskClass.newInstance();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_RECURRINGTASK_CANNOT_INSTANTIATE_CLASS_AS_TASK.get(taskClassName,Task.class.getName());    throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,message,e);  }  try {    task.initializeTaskInternal(serverContext,taskScheduler,recurringTaskEntry);  } catch (  InitializationException ie) {    logger.traceException(ie);    LocalizableMessage message=ERR_RECURRINGTASK_CANNOT_INITIALIZE_INTERNAL.get(taskClassName,ie.getMessage());    throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message,ie);  }  task.initializeTask();}  }
class C{  public ResourceResult(String resourceName,PolicyDecision policyDecision){  this.resourceName=resourceName;  setPolicyDecision(policyDecision);}  }
class C{  public void destroy(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("destroy",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    $self.destroy();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public SAML2ConfigBuilder customAuthzDecisionStatementsProviderClassName(String customAuthzDecisionStatementsProviderClassName){  this.customAuthzDecisionStatementsProviderClassName=customAuthzDecisionStatementsProviderClassName;  return this;}  }
class C{  private void parseMajorVersion(String majorVer) throws SAMLException, FSMsgException {  try {    majorVersion=Integer.parseInt(majorVer);  } catch (  NumberFormatException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSResponse(Element): invalid " + "MajorVersion",e);    }    throw new FSMsgException("wrongInput",null);  }  if (majorVersion != SAMLConstants.PROTOCOL_MAJOR_VERSION) {    if (majorVersion > SAMLConstants.PROTOCOL_MAJOR_VERSION) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSResponse(Element):MajorVersion of" + " the Response is too high.");      }      throw new SAMLVersionMismatchException(FSUtils.BUNDLE_NAME,"responseVersionTooHigh",null);    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSResponse(Element):MajorVersion of" + " the Response is too low.");      }      throw new SAMLVersionMismatchException(FSUtils.BUNDLE_NAME,"responseVersionTooLow",null);    }  }}  }
class C{  public boolean delete(Long appID){  if (appID == null) {    throw new IllegalArgumentException("primary key null.");  }  return database.delete(DATABASE_TABLE,KEY_APPID + "=" + appID,null) > 0;}  }
class C{  public boolean removeAll(Collection<?> c){  if (c == null)   throw new NullPointerException();  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] elements=getArray();    int len=elements.length;    if (len != 0) {      int newlen=0;      Object[] temp=new Object[len];      for (int i=0; i < len; ++i) {        Object element=elements[i];        if (!c.contains(element))         temp[newlen++]=element;      }      if (newlen != len) {        setArray(Arrays.copyOf(temp,newlen));        return true;      }    }    return false;  }  finally {    lock.unlock();  }}  }
class C{  public void debugWarning(String message,Exception e){  debug.warning(message,e);}  }
class C{  public void signXML(String certAlias) throws SAMLException {  FSUtils.debug.message("FSNameRegistrationResponse.signXML: Called");  if (signed) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameRegistrationResponse.signXML: " + "the assertion is already signed.");    }    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"alreadySigned",null);  }  if (certAlias == null || certAlias.length() == 0) {    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"cannotFindCertAlias",null);  }  try {    XMLSignatureManager manager=XMLSignatureManager.getInstance();    if (minorVersion == IFSConstants.FF_11_PROTOCOL_MINOR_VERSION) {      signatureString=manager.signXML(this.toXMLString(true,true),certAlias,IFSConstants.DEF_SIG_ALGO,IFSConstants.ID,this.id,false);    } else     if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      signatureString=manager.signXML(this.toXMLString(true,true),certAlias,IFSConstants.DEF_SIG_ALGO,IFSConstants.RESPONSE_ID,this.getResponseID(),false);    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("invalid minor version.");      }    }    signature=XMLUtils.toDOMDocument(signatureString,FSUtils.debug).getDocumentElement();    signed=true;    xmlString=this.toXMLString(true,true);  } catch (  Exception e) {    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"signError",null);  }}  }
class C{  public static boolean isValid(String inetAddress){  return isValidInet4Address(inetAddress) || isValidInet6Address(inetAddress);}  }
class C{  public SessionEncodeURL(){}  }
class C{  public ASN1InputStream(byte[] input){  this(new ByteArrayInputStream(input),input.length);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node oldChild;  Node removedChild;  String childName;  String oldName;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  oldChild=childList.item(0);  oldName=oldChild.getNodeName();  removedChild=employeeNode.removeChild(oldChild);  assertNotNull("notnull",removedChild);  childName=removedChild.getNodeName();  assertEquals("nodeName",oldName,childName);}  }
class C{  static DebugGraphicsInfo info(){  DebugGraphicsInfo debugGraphicsInfo=(DebugGraphicsInfo)SwingUtilities.appContextGet(debugGraphicsInfoKey);  if (debugGraphicsInfo == null) {    debugGraphicsInfo=new DebugGraphicsInfo();    SwingUtilities.appContextPut(debugGraphicsInfoKey,debugGraphicsInfo);  }  return debugGraphicsInfo;}  }
class C{  public LogException(){  super();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodereplacechildoldchildnonexistent.class,args);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String agentName=getStringOptionValue(IArgument.AGENT_NAME);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  boolean bSet=isOptionSet(IArgument.AGENT_SET_ATTR_VALUE);  List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  if ((datafile == null) && (attrValues == null)) {    throw new CLIException(getResourceString("missing-attributevalues"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());  }  Map attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);  String[] params={realm,agentName};  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_UPDATE_AGENT",params);    AMIdentity amid=new AMIdentity(adminSSOToken,agentName,IdType.AGENTONLY,realm,null);    if (!amid.isExists()) {      String[] args={realm,agentName,"agent did not exist"};      writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UPDATE_AGENT",args);      Object[] p={agentName};      String msg=MessageFormat.format(getResourceString("update-agent-does-not-exist"),p);      throw new CLIException(msg,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    AgentConfiguration.updateAgent(adminSSOToken,realm,agentName,attributeValues,bSet);    outputWriter.printlnMessage(getResourceString("update-agent-succeeded"));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_UPDATE_AGENT",params);  } catch (  IdRepoException e) {    String[] args={realm,agentName,e.getMessage()};    debugError("UpdateAgent.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UPDATE_AGENT",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={realm,agentName,e.getMessage()};    debugError("UpdateAgent.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UPDATE_AGENT",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,agentName,e.getMessage()};    debugError("UpdateAgent.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UPDATE_AGENT",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  ConfigurationException e) {    String[] args={realm,agentName,e.getMessage()};    debugError("UpdateAgent.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UPDATE_AGENT",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void rowsRemoved(TableModelEvent event){  fireTableChanged(event);}  }
class C{  public void testGetTrustedCertificate(){  Certificate cert=new MyCertificate("TEST",new byte[10]);  KeyStore.TrustedCertificateEntry ksTCE=new KeyStore.TrustedCertificateEntry(cert);  assertEquals("Incorrect certificate",cert,ksTCE.getTrustedCertificate());}  }
class C{  public BasicHttpResponse(final StatusLine statusline){  this(statusline,null,null);}  }
class C{  public IllegalPathStateException(String s){  super(s);}  }
class C{  public static String filterSchemaBackendName(final String dsCfgBackendName){  final String cfgNameRegExp="(.*)-backend.*";  final Matcher regExpMatcher=Pattern.compile(cfgNameRegExp,Pattern.CASE_INSENSITIVE).matcher(dsCfgBackendName);  if (regExpMatcher.matches()) {    return regExpMatcher.group(1);  }  return dsCfgBackendName;}  }
class C{  public int period(){  return values.period;}  }
class C{  public boolean invokeExportPlugins(){  return invokeExportPlugins;}  }
class C{  void removePending(DN dn){  CountDownLatch l=pendingMap.remove(dn);  if (l != null) {    l.countDown();  }}  }
class C{  public boolean canBeStaticallyBound(){  return Modifier.isFinal(flags | clazz.getModifiers());}  }
class C{  @Override public boolean accept(File file,String name){  for (  String suffix : this.suffixes) {    if (caseSensitivity.checkEndsWith(name,suffix)) {      return true;    }  }  return false;}  }
class C{  protected void fill() throws IOException {  checkClosed();  if (nativeEndBufSize > 0) {    ZipFile.RAFStream is=(ZipFile.RAFStream)in;    len=is.fill(inf,nativeEndBufSize);  } else {    if ((len=in.read(buf)) > 0) {      inf.setInput(buf,0,len);    }  }}  }
class C{  public void test_ConstructorLjava_io_InputStreamLjava_security_MessageDigest(){  DigestInputStream dis=new DigestInputStream(inStream,digest);  assertNotNull("Constructor returned null instance",dis);}  }
class C{  public MetaObject(int type){  this.type=type;}  }
class C{  public void modifyCircleOfTrust(String realm,CircleOfTrustDescriptor cotDescriptor) throws COTException {  String classMethod="COTManager.modifyCircleOfTrust :";  if (cotDescriptor == null) {    throw new COTException("nullCot",null);  }  if (realm == null) {    realm="/";  }  String name=cotDescriptor.getCircleOfTrustName();  isValidCOTName(realm,name);  try {    Map attrs=cotDescriptor.getAttributes();    configInst.setConfiguration(realm,name,attrs);  } catch (  ConfigurationException e) {    debug.error(classMethod,e);    String[] data={e.getMessage(),name,realm};    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_MODIFY_COT_DESCRIPTOR,data);    throw new COTException(e);  }}  }
class C{  static void selfInterrupt(){  Thread.currentThread().interrupt();}  }
class C{  @Override public void begin(String namespace,String name,Attributes attributes) throws Exception {  if (digester.getLogger().isDebugEnabled())   digester.getLogger().debug("Copying parent class loader");  Container child=(Container)digester.peek(0);  Object parent=digester.peek(1);  Method method=parent.getClass().getMethod("getParentClassLoader",new Class[0]);  ClassLoader classLoader=(ClassLoader)method.invoke(parent,new Object[0]);  child.setParentClassLoader(classLoader);}  }
class C{  public OrganizationConfigManager createSubOrganization(String subOrgName,Map attributes) throws SMSException {  validateConfigImpl();  validateOrgNameCollision(subOrgName);  validateOrgAliasCollision(attributes);  SMSEntry.debug.message("OrganizationConfigManager::createSubOrganization() New Realm, creating realm: {}",subOrgName);  String subOrgDN=normalizeDN(subOrgName,orgDN);  StringTokenizer st=new StringTokenizer(specialCharsString,SEPERATOR);  while (st.hasMoreTokens()) {    String obj=(String)st.nextToken();    if (subOrgName.indexOf(obj) > -1) {      SMSEntry.debug.error("OrganizationConfigManager::" + "createSubOrganization() : Invalid realm name: " + subOrgName);      SMSEntry.debug.error("OrganizationConfigManager::" + "createSubOrganization() : Detected invalid chars: " + obj);      Object args1[]={subOrgName};      throw (new SMSException(UMS_BUNDLE_NAME,SMSEntry.bundle.getString("sms-invalid-org-name"),args1));    }  }  validateOrgName(subOrgName);  if ((coexistMode) || (realmEnabled && isCopyOrgEnabled())) {    amsdk.createSubOrganization(subOrgName);  }  if ((realmEnabled || subOrgDN.toLowerCase().startsWith(SMSEntry.SUN_INTERNAL_REALM_PREFIX)) && getSubOrganizationNames(subOrgName,false).isEmpty()) {    CreateServiceConfig.createOrganization(token,subOrgDN);  }  OrganizationConfigManager ocm=getSubOrgConfigManager(subOrgName);  if ((attributes != null) && (!attributes.isEmpty())) {    for (Iterator svcNames=attributes.keySet().iterator(); svcNames.hasNext(); ) {      String serviceName=(String)svcNames.next();      Map svcAttributes=(Map)attributes.get(serviceName);      if ((svcAttributes != null) && (!svcAttributes.isEmpty())) {        ocm.setAttributes(serviceName,svcAttributes);      }    }  }  if (realmEnabled) {    AgentsRepo agentsRepo=new AgentsRepo();    HashMap config=new HashMap(1);    HashSet realmName=new HashSet(1);    realmName.add(subOrgDN);    config.put("agentsRepoRealmName",realmName);    try {      agentsRepo.initialize(config);      agentsRepo.createAgentGroupConfig(token);    } catch (    IdRepoException ide) {      SMSEntry.debug.error("OrganizationConfigManager::" + "createSubOrganization:",ide);    }  }  if (realmEnabled && !coexistMode) {    loadDefaultServices(token,ocm);  }  if (realmEnabled && isCopyOrgEnabled()) {    registerSvcsForOrg(subOrgName,subOrgDN);    OrganizationConfigManager subOrg=getSubOrgConfigManager(subOrgName);    ServiceConfig s=subOrg.getServiceConfig(ServiceManager.REALM_SERVICE);    if (s != null) {      try {        Iterator items=s.getSubConfigNames().iterator();        while (items.hasNext()) {          ServiceConfig subConfig=s.getSubConfig((String)items.next());          if (subConfig.getSchemaID().equalsIgnoreCase(AMSDK_PLUGIN_NAME)) {            Map amsdkConfig=new HashMap();            Set vals=new HashSet();            vals.add(orgNamingAttrInLegacyMode + SMSEntry.EQUALS + subOrgName+ SMSEntry.COMMA+ amSDKOrgDN);            amsdkConfig.put("amSDKOrgName",vals);            subConfig.setAttributes(amsdkConfig);          }          break;        }      } catch (      SSOException ssoe) {        SMSEntry.debug.error("OrganizationConfigManager::" + "createSubOrganization:",ssoe);        throw (new SMSException(SMSEntry.bundle.getString(SMS_INVALID_SSO_TOKEN),SMS_INVALID_SSO_TOKEN));      }    }  }  if (realmEnabled) {    try {      if (coexistMode) {        DelegationUtils.createRealmPrivileges(token,orgName);      } else {        OrganizationConfigManager parentOrg=getParentOrgConfigManager();        DelegationUtils.copyRealmPrivilegesFromParent(token,parentOrg,ocm);      }    } catch (    SSOException ssoe) {      if (SMSEntry.debug.messageEnabled()) {        SMSEntry.debug.message("Creating delegation permissions for: " + orgName + " failed",ssoe);      }    }catch (    SMSException smse) {      if (SMSEntry.debug.messageEnabled()) {        SMSEntry.debug.message("Creating delegation permissions for: " + orgName + " failed",smse);      }    }catch (    DelegationException de) {      if (SMSEntry.debug.messageEnabled()) {        SMSEntry.debug.message("Creating delegation permissions for: " + orgName + " failed",de);      }    }  }  return (ocm);}  }
class C{  public void addAci(DN dn,SortedSet<Aci> acis){  lock.writeLock().lock();  try {    aciList.put(dn,new LinkedList<>(acis));  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public void disableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glDisableVertexAttribArray(location);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodecloneattributescopied.class,args);}  }
class C{  public Object extFunction(FuncExtFunction extFunction,Vector argVec,ExpressionContext exprContext) throws javax.xml.transform.TransformerException {  Object result=null;  String ns=extFunction.getNamespace();  if (null != ns) {    ExtensionHandler extNS=(ExtensionHandler)m_extensionFunctionNamespaces.get(ns);    if (null != extNS) {      try {        result=extNS.callFunction(extFunction,argVec,exprContext);      } catch (      javax.xml.transform.TransformerException e) {        throw e;      }catch (      Exception e) {        throw new javax.xml.transform.TransformerException(e);      }    } else {      throw new XPathProcessorException(XSLMessages.createMessage(XSLTErrorResources.ER_EXTENSION_FUNC_UNKNOWN,new Object[]{ns,extFunction.getFunctionName()}));    }  }  return result;}  }
class C{  public int addNumberedOption(LocalizableMessage description,MenuResult<T> result,LocalizableMessage... extraFields){  return addNumberedOption(description,new ResultCallback<T>(result),extraFields);}  }
class C{  public boolean equalsTo(MultiDomainServerState other){  return cover(other) && other.cover(this);}  }
class C{  private void growByOne(){  int adding=0;  if (capacityIncrement <= 0) {    if ((adding=elementData.length) == 0) {      adding=1;    }  } else {    adding=capacityIncrement;  }  E[] newData=newElementArray(elementData.length + adding);  System.arraycopy(elementData,0,newData,0,elementCount);  elementData=newData;}  }
class C{  public synchronized void reload() throws ConfigException {  ensureInitialized();  loader=null;  jarFiles=new HashSet<>();  initialize0();}  }
class C{  public Set searchDynamicGroups(String wildcard,int level) throws AMException, SSOException {  return searchDynamicGroups(wildcard,null,level);}  }
class C{  public Source resolveURI(String base,String urlString,SourceLocator locator) throws TransformerException, IOException {  Source source=null;  if (null != m_uriResolver) {    source=m_uriResolver.resolve(urlString,base);  }  if (null == source) {    String uri=SystemIDResolver.getAbsoluteURI(urlString,base);    source=new StreamSource(uri);  }  return source;}  }
class C{  public Object clone(){  AuthenticatedUsers theClone=null;  try {    theClone=(AuthenticatedUsers)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  return theClone;}  }
class C{  public static XObject eval(Node contextNode,String str,PrefixResolver prefixResolver) throws TransformerException {  XPath xpath=new XPath(str,null,prefixResolver,XPath.SELECT,null);  XPathContext xpathSupport=new XPathContext(false);  int ctxtNode=xpathSupport.getDTMHandleFromNode(contextNode);  return xpath.execute(xpathSupport,ctxtNode,prefixResolver);}  }
class C{  @Override public void lifecycleEvent(LifecycleEvent event){  if (Lifecycle.BEFORE_INIT_EVENT.equals(event.getType())) {synchronized (lock) {      init();      for (      String msg : initInfoLogMessages) {        log.info(msg);      }      initInfoLogMessages.clear();      if (aprAvailable) {        try {          initializeSSL();        } catch (        Throwable t) {          t=ExceptionUtils.unwrapInvocationTargetException(t);          ExceptionUtils.handleThrowable(t);          log.error(sm.getString("aprListener.sslInit"),t);        }      }      if (!(null == FIPSMode || "off".equalsIgnoreCase(FIPSMode)) && !isFIPSModeActive()) {        Error e=new Error(sm.getString("aprListener.initializeFIPSFailed"));        log.fatal(e.getMessage(),e);        throw e;      }    }  } else   if (Lifecycle.AFTER_DESTROY_EVENT.equals(event.getType())) {synchronized (lock) {      if (!aprAvailable) {        return;      }      try {        terminateAPR();      } catch (      Throwable t) {        t=ExceptionUtils.unwrapInvocationTargetException(t);        ExceptionUtils.handleThrowable(t);        log.info(sm.getString("aprListener.aprDestroy"));      }    }  }}  }
class C{  public void testZeroZero(){  String numA="0";  String numB="0";  String res="0";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  protected void RelativePathPattern() throws javax.xml.transform.TransformerException {  boolean trailingSlashConsumed=StepPattern(false);  while (tokenIs('/')) {    nextToken();    trailingSlashConsumed=StepPattern(!trailingSlashConsumed);  }}  }
class C{  public int discardBodyData() throws MalformedStreamException, IOException {  return readBodyData(null);}  }
class C{  static Throwable loadLibrary(){  try {    File nativeLibFile=findNativeLibrary();    if (nativeLibFile != null) {      System.load(nativeLibFile.getAbsolutePath());    } else {      System.loadLibrary("commons-crypto");    }    return null;  } catch (  Exception t) {    return t;  }catch (  UnsatisfiedLinkError t) {    return t;  }}  }
class C{  public void testDivideRoundCeilingPos(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="1.24390557635720517122423359799284E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_CEILING);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public boolean isMutable(){  return mutable;}  }
class C{  @Override public int hashCode(){  return (first == null ? 0 : first.hashCode()) ^ (second == null ? 0 : second.hashCode());}  }
class C{  long checkLogIsValid() throws ChangelogException {  try {    final long lastBlockStart=getClosestBlockStartToEndOfFile();    positionToRecordFromBlockStart(lastBlockStart);    long lastValidPosition=lastBlockStart;    for (ByteString recordData=readNextRecord(); recordData != null; recordData=readNextRecord()) {      parser.decodeRecord(recordData);      lastValidPosition=reader.getFilePointer();    }    final boolean isFileValid=lastValidPosition == getFileLength();    return isFileValid ? -1 : lastValidPosition;  } catch (  Exception e) {    throw new ChangelogException(ERR_CHANGELOG_UNABLE_TO_RECOVER_LOG_FILE.get(file.getPath(),StaticUtils.stackTraceToSingleLineString(e)));  }}  }
class C{  public boolean isPopupTrigger(MouseEvent e){  return getUI().isPopupTrigger(e);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element addrNode;  Attr addrAttr;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("emp:address");  addrNode=(Element)elementList.item(0);  assertNotNull("empAddrNotNull",addrNode);  addrAttr=addrNode.getAttributeNode("emp:domestic");{    boolean success=false;    try {      addrAttr.setPrefix("xmlns");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public boolean offer(E e,long timeout,TimeUnit unit){  return offer(e);}  }
class C{  public float transformY(int y){  return (1f - ((float)y - offsetWy) / extentWy) * scalingY;}  }
class C{  public int signal_layer_count(){  int found_signal_layers=0;  for (int index=0; index < size(); ++index) {    if (get(index).is_signal)     found_signal_layers++;  }  return found_signal_layers;}  }
class C{  private void internalSendMessageAsync(AbstractWebsocketMessage msg){  try {    if (msg instanceof StringWebsocketMessage) {      StringWebsocketMessage sMsg=(StringWebsocketMessage)msg;      async.sendText(sMsg.getString(),sendHandler);    } else     if (msg instanceof BinaryWebsocketMessage) {      BinaryWebsocketMessage bMsg=(BinaryWebsocketMessage)msg;      async.sendBinary(bMsg.getBytes(),sendHandler);    } else     if (msg instanceof CloseWebsocketMessage) {      session.close();    }  } catch (  IllegalStateException|IOException ex) {  }}  }
class C{  public QueueTaskFuture<WorkflowRun> startBuilding() throws Exception {  QueueTaskFuture<WorkflowRun> f=p.scheduleBuild2(0);  b=f.waitForStart();  e=(CpsFlowExecution)b.getExecutionPromise().get();  return f;}  }
class C{  public LDAPException(int resultCode,LocalizableMessage errorMessage,LocalizableMessage message,DN matchedDN,Throwable cause){  super(message,cause);  this.resultCode=resultCode;  this.errorMessage=errorMessage;  this.matchedDN=matchedDN;}  }
class C{  private static void loadProperties(){  InputStream is=null;  try {    String configUrl=System.getProperty("catalina.config");    if (configUrl != null) {      is=(new URL(configUrl)).openStream();    }  } catch (  Throwable t) {    handleThrowable(t);  }  if (is == null) {    try {      File home=new File(Bootstrap.getCatalinaBase());      File conf=new File(home,"conf");      File propsFile=new File(conf,"catalina.properties");      is=new FileInputStream(propsFile);    } catch (    Throwable t) {      handleThrowable(t);    }  }  if (is == null) {    try {      is=CatalinaProperties.class.getResourceAsStream("/org/apache/catalina/startup/catalina.properties");    } catch (    Throwable t) {      handleThrowable(t);    }  }  if (is != null) {    try {      properties=new Properties();      properties.load(is);    } catch (    Throwable t) {      handleThrowable(t);      log.warn(t);    } finally {      try {        is.close();      } catch (      IOException ioe) {        log.warn("Could not close catalina.properties",ioe);      }    }  }  if ((is == null)) {    log.warn("Failed to load catalina.properties");    properties=new Properties();  }  Enumeration<?> enumeration=properties.propertyNames();  while (enumeration.hasMoreElements()) {    String name=(String)enumeration.nextElement();    String value=properties.getProperty(name);    if (value != null) {      System.setProperty(name,value);    }  }}  }
class C{  public String toStringImpl(){  return filterId;}  }
class C{  public boolean isAnswerBlank(){  return missingData;}  }
class C{  public AuthenticationNotSupportedException(String explanation){  super(explanation);}  }
class C{  public static File writeDataToTempFile(final String data,final String ext){  try {    final File file=createTempFile(ext);    final PrintWriter out=new PrintWriter(new FileOutputStream(file));    out.print(data);    out.close();    return file;  } catch (  IOException e) {    JKExceptionUtil.handle(e);    return null;  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.EncryptedKeyElement createEncryptedKeyElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.EncryptedKeyElementImpl();}  }
class C{  public Segment(char[] array,int offset,int count){  this.array=array;  this.offset=offset;  this.count=count;  partialReturn=false;}  }
class C{  public boolean equals(Object o){  if (o == this)   return true;  if (o instanceof TreePath) {    TreePath oTreePath=(TreePath)o;    if (getPathCount() != oTreePath.getPathCount())     return false;    for (TreePath path=this; path != null; path=path.parentPath) {      if (!(path.lastPathComponent.equals(oTreePath.lastPathComponent))) {        return false;      }      oTreePath=oTreePath.parentPath;    }    return true;  }  return false;}  }
class C{  public void testUrlEncoderEncodesNonPrintableNonAsciiCharacters() throws Exception {  assertEquals("%00",URLEncoder.encode("\u0000","UTF-8"));  assertEquals("%00",URLEncoder.encode("\u0000"));  assertEquals("%E2%82%AC",URLEncoder.encode("\u20AC","UTF-8"));  assertEquals("%E2%82%AC",URLEncoder.encode("\u20AC"));  assertEquals("%F0%A0%AE%9F",URLEncoder.encode("\ud842\udf9f","UTF-8"));  assertEquals("%F0%A0%AE%9F",URLEncoder.encode("\ud842\udf9f"));}  }
class C{  public final boolean isDaemon(){  return daemon;}  }
class C{  public Operation nextOperation(ParallelWorkerThread workerThread){  return retryNextOperation(workerThread,0);}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.AffiliationDescriptorType createAffiliationDescriptorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.AffiliationDescriptorTypeImpl();}  }
class C{  public SQLFeatureNotSupportedException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  private static String formatMemoryUsage(String name,MemoryUsage usage){  if (usage != null) {    StringBuilder sb=new StringBuilder();    sb.append(INDENT1 + name + " init: "+ usage.getInit()+ CRLF);    sb.append(INDENT1 + name + " used: "+ usage.getUsed()+ CRLF);    sb.append(INDENT1 + name + " committed: "+ usage.getCommitted()+ CRLF);    sb.append(INDENT1 + name + " max: "+ usage.getMax()+ CRLF);    return sb.toString();  }  return "";}  }
class C{  private FakeReplicationDomain(ReplicationDomainCfg config,long generationId,int scenario,ServerState serverState) throws ConfigException {  super(config,generationId,serverState);  this.scenario=scenario;  gen=new CSNGenerator(config.getServerId(),0L);}  }
class C{  public void _releaseReply(InputStream input){  throw new org.omg.CORBA.NO_IMPLEMENT(reason);}  }
class C{  public com.sun.identity.wsfederation.jaxb.entityconfig.IDPSSOConfigElement createIDPSSOConfigElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.entityconfig.impl.IDPSSOConfigElementImpl();}  }
class C{  protected void checkIfDeletedUser(SSOToken token,String userDN) throws AMEntryExistsException {  String userAttribute[]={USER_STATUS_ATTRIBUTE};  Attr attr;  try {    PersistentObject po=UMSObject.getObject(token,new Guid(userDN),userAttribute);    attr=po.getAttribute(USER_STATUS_ATTRIBUTE);  } catch (  UMSException ue) {    if (debug.messageEnabled())     debug.message("Compliance.checkIfDeletedUser(): ",ue);    return;  }  if (attr != null) {    String attrValue=attr.getValue();    if (attrValue != null && attrValue.equalsIgnoreCase("deleted")) {      debug.warning("Compliance.checkIfDeletedUser(): " + "deleted user entry: " + userDN);      throw new AMEntryExistsException(AMSDKBundle.getString("329"),"329");    }  }}  }
class C{  public PdfExtGState(){  this(new PdfDictionary());}  }
class C{  public void clear(){  match="";  bodyTexts.clear();  params.clear();  publicId=null;  stack.clear();  log=null;  saxLog=null;  configured=false;}  }
class C{  public final boolean hasConflict(DocumentBuilderSetting other){  if (other == null) {    throw new NullPointerException("other");  }  if (other == this) {    return true;  }  return strategy.hasConflict(other.strategy);}  }
class C{  private static int findAnyZero(double[] a,int low,int high){  while (true) {    int middle=(low + high) >>> 1;    double middleValue=a[middle];    if (middleValue < 0.0d) {      low=middle + 1;    } else     if (middleValue > 0.0d) {      high=middle - 1;    } else {      return middle;    }  }}  }
class C{  public boolean isReset(){  return reset;}  }
class C{  public boolean isEmpty(){  return values.isEmpty();}  }
class C{  public boolean readChunk() throws IOException {  String applicationSignature=Utils.readString(raf,4);  String applicationName=null;  byte[] data=new byte[(int)(bytesLeft - 4)];  raf.readFully(data);  if ("stoc".equals(applicationSignature) || "pdos".equals(applicationSignature)) {    applicationName=AiffUtil.bytesToPascalString(data);  }  aiffHeader.addApplicationIdentifier(applicationSignature + ": " + applicationName);  return true;}  }
class C{  public static Clause not(String clause){  return new NotClause(where(clause));}  }
class C{  public static JavacErrorDetail createJavacError(String fname,Node.Nodes page,StringBuilder errMsgBuf,int lineNum) throws JasperException {  return createJavacError(fname,page,errMsgBuf,lineNum,null);}  }
class C{  public void invoke(Context context,Map<String,Object> syncFailure,Exception failureCause) throws SyncHandlerException {  throw new SyncHandlerException("Failed to synchronize " + syncFailure.get("uid") + " object on "+ syncFailure.get("systemIdentifier")+ ": "+ failureCause.getMessage(),failureCause);}  }
class C{  public LineView(Element elem){  super(elem);}  }
class C{  public FlowLayout(){  this(CENTER,5,5);}  }
class C{  public void exec(String[] args) throws Throwable {  URLClassLoader urlClassLoader=new URLClassLoader(classPath.toArray(new URL[classPath.size()]));  Class<?> cls=urlClassLoader.loadClass(mainClass);  Method method=cls.getDeclaredMethod("main",String[].class);  method.setAccessible(true);  try {    method.invoke(null,new Object[]{args});  } catch (  InvocationTargetException e) {    throw e.getTargetException();  }}  }
class C{  public FrameBodyTIT1(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  @Override public Value generate() throws SyntaxException {  StringBuilder sb=new StringBuilder();  buildStatements(sb,ast,0);  StringConstantValue s=new StringConstantValue(sb.toString().trim());  s.setType((SClassDef)processor.getTypeWithName("java.lang.String",LineCol.SYNTHETIC));  return s;}  }
class C{  public void copyFrom(OutputProperties opsrc) throws TransformerException {  copyFrom(opsrc.getProperties());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodecdatasectionnodeattribute.class,args);}  }
class C{  protected void markSizeInvalid(){  preferredHeight=0;}  }
class C{  public boolean show(Container c,int x,int y,int w,int h){  return false;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider01() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  Provider provider=null;  for (int i=0; i < validValues.length; i++) {    try {      SSLContext.getInstance(validValues[i],provider);      fail("IllegalArgumentException must be thrown when provider is null");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public Failure(Node node){  parseNode(node);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.ReferenceDigestType createReferenceDigestType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.ReferenceDigestTypeImpl();}  }
class C{  private void parseBuffer(ByteBuffer buffer,String time){  int start=buffer.position();  int buffLen=buffer.capacity();  if (buffLen == 1) {    if (ZStreamingConfig.isHeartBitMsgPrintable()) {      System.out.println("StreamingQuoteParserThread.parseBuffer(): WS HEARTBIT Byte");    }  } else {    int numPackets=buffer.getShort();    if (numPackets == 0) {      System.out.println("StreamingQuoteParserThread.parseBuffer(): ERROR: WS Byte numPackets is 0 in WS message, Ignoring !!!");    } else {      start+=2;      for (int i=0; i < numPackets; i++) {        int numBytes=buffer.getShort();        if (numBytes != 0) {          start+=2;          byte[] pkt=new byte[numBytes];          buffer.get(pkt,0,numBytes);          ByteBuffer pktBuffer=ByteBuffer.wrap(pkt);          if (pktBuffer != null) {            parseQuotePktBuffer(pktBuffer,time);            start+=numBytes;          } else {            System.out.println("StreamingQuoteParserThread.parseBuffer(): ERROR: pktBuffer is null in WS message, Ignoring !!!");          }        } else {          System.out.println("StreamingQuoteParserThread.parseBuffer(): ERROR: numBytes is 0 in WS message packet[" + i + "], Ignoring !!!");        }      }    }  }}  }
class C{  AttributeIterator(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis);}  }
class C{  private static int fastfloor(double x){  final int xi=(int)x;  return x < xi ? xi - 1 : xi;}  }
class C{  public void description(LocalizableMessage description){  this.description=description;}  }
class C{  static LDAPReplicationDomain createNewDomain(ReplicationDomainCfg configuration,BlockingQueue<UpdateToReplay> queue) throws ConfigException {  final LDAPReplicationDomain domain=new LDAPReplicationDomain(configuration,queue,dsrsShutdownSync);  domains.put(domain.getBaseDN(),domain);  return domain;}  }
class C{  protected EventListener remove(EventListener oldl){  if (oldl == a)   return b;  if (oldl == b)   return a;  EventListener a2=removeInternal(a,oldl);  EventListener b2=removeInternal(b,oldl);  if (a2 == a && b2 == b) {    return this;  }  return addInternal(a2,b2);}  }
class C{  public void clearAuthenticationFailureTimes(){  operations.add(PasswordPolicyStateOperationType.CLEAR_AUTHENTICATION_FAILURE_TIMES);}  }
class C{  public void removeFromTag(){  parameters.delete(ParameterNames.FROM_TAG);}  }
class C{  public boolean isMultiline(){  return getFieldFlag(FF_MULTILINE);}  }
class C{  public int next(){  int node=_currentNode;  int expType;  int nodeType=_nodeType;  int startID=_startNodeID;  if (nodeType >= DTM.NTYPES) {    while (node != NULL && node != startID && _exptype(node) != nodeType) {      node=_nextsib(node);    }  } else {    while (node != NULL && node != startID) {      expType=_exptype(node);      if (expType < DTM.NTYPES) {        if (expType == nodeType) {          break;        }      } else {        if (m_expandedNameTable.getType(expType) == nodeType) {          break;        }      }      node=_nextsib(node);    }  }  if (node == DTM.NULL || node == _startNodeID) {    _currentNode=NULL;    return NULL;  } else {    _currentNode=_nextsib(node);    return returnNode(makeNodeHandle(node));  }}  }
class C{  private boolean resize(int newCapacity){  int newLength=newCapacity * 2;  Object[] oldTable=table;  int oldLength=oldTable.length;  if (oldLength == 2 * MAXIMUM_CAPACITY) {    if (size == MAXIMUM_CAPACITY - 1)     throw new IllegalStateException("Capacity exhausted.");    return false;  }  if (oldLength >= newLength)   return false;  Object[] newTable=new Object[newLength];  for (int j=0; j < oldLength; j+=2) {    Object key=oldTable[j];    if (key != null) {      Object value=oldTable[j + 1];      oldTable[j]=null;      oldTable[j + 1]=null;      int i=hash(key,newLength);      while (newTable[i] != null)       i=nextKeyIndex(i,newLength);      newTable[i]=key;      newTable[i + 1]=value;    }  }  table=newTable;  return true;}  }
class C{  public boolean isEqualNode(Node arg){  if (arg == this) {    return true;  }  if (arg.getNodeType() != getNodeType()) {    return false;  }  if (getNodeName() == null) {    if (arg.getNodeName() != null) {      return false;    }  } else   if (!getNodeName().equals(arg.getNodeName())) {    return false;  }  if (getLocalName() == null) {    if (arg.getLocalName() != null) {      return false;    }  } else   if (!getLocalName().equals(arg.getLocalName())) {    return false;  }  if (getNamespaceURI() == null) {    if (arg.getNamespaceURI() != null) {      return false;    }  } else   if (!getNamespaceURI().equals(arg.getNamespaceURI())) {    return false;  }  if (getPrefix() == null) {    if (arg.getPrefix() != null) {      return false;    }  } else   if (!getPrefix().equals(arg.getPrefix())) {    return false;  }  if (getNodeValue() == null) {    if (arg.getNodeValue() != null) {      return false;    }  } else   if (!getNodeValue().equals(arg.getNodeValue())) {    return false;  }  return true;}  }
class C{  @Fluent public Job emit(String event,Object msg){  logger.debug("[LOG] Emit: " + Kue.getCertainJobAddress(event,this));  eventBus.send(Kue.getCertainJobAddress(event,this),msg);  return this;}  }
class C{  public SHA1PRNG_SecureRandomImpl(){  seed=new int[HASH_OFFSET + EXTRAFRAME_OFFSET];  seed[HASH_OFFSET]=H0;  seed[HASH_OFFSET + 1]=H1;  seed[HASH_OFFSET + 2]=H2;  seed[HASH_OFFSET + 3]=H3;  seed[HASH_OFFSET + 4]=H4;  seedLength=0;  copies=new int[2 * FRAME_LENGTH + EXTRAFRAME_OFFSET];  nextBytes=new byte[DIGEST_LENGTH];  nextBIndex=HASHBYTES_TO_USE;  counter=COUNTER_BASE;  state=UNDEFINED;}  }
class C{  protected String[] parseParamNames(StringBuilder cmd,int start){  int bIdx=start;  int i=0;  int quotes=0;  boolean inside=false;  StringBuilder retBuf=new StringBuilder();  while (bIdx < cmd.length()) {    if (!inside) {      while (bIdx < cmd.length() && isSpace(cmd.charAt(bIdx)))       bIdx++;      if (bIdx >= cmd.length())       break;      inside=!inside;    } else {      while (bIdx < cmd.length() && cmd.charAt(bIdx) != '=') {        retBuf.append(cmd.charAt(bIdx));        bIdx++;      }      retBuf.append('=');      inside=!inside;      quotes=0;      boolean escaped=false;      for (; bIdx < cmd.length() && quotes != 2; bIdx++) {        char c=cmd.charAt(bIdx);        if (c == '\\' && !escaped) {          escaped=true;          continue;        }        if (c == '"' && !escaped)         quotes++;        escaped=false;      }    }  }  StringTokenizer str=new StringTokenizer(retBuf.toString(),"=");  String[] retString=new String[str.countTokens()];  while (str.hasMoreTokens()) {    retString[i++]=str.nextToken().trim();  }  return retString;}  }
class C{  public boolean isValueQuoted(){  return isQuotedString;}  }
class C{  public boolean isGetFieldAtRuntime(Value target){  if (target instanceof Ins.InvokeStatic) {    Ins.InvokeStatic invokeStatic=(Ins.InvokeStatic)target;    if (invokeStatic.invokable() instanceof SMethodDef) {      SMethodDef m=(SMethodDef)invokeStatic.invokable();      if ((m.name().equals("getField")) && m.declaringType().fullName().equals("lt.lang.LtRuntime")) {        return true;      }    }  }  return false;}  }
class C{  public INTF_REPOS(){  this("");}  }
class C{  @Override public Foo fetchByUuid_Last(String uuid,OrderByComparator<Foo> orderByComparator){  int count=countByUuid(uuid);  if (count == 0) {    return null;  }  List<Foo> list=findByUuid(uuid,count - 1,count,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  public Document toDocument() throws SOAPBindingException {  return toDocument(false);}  }
class C{  public SCPolicyModelImpl(HttpServletRequest req,Map map){  super(req,map);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws javax.servlet.ServletException, java.io.IOException {  FSUtils.debug.message("FSSOAPReceiver.doPost: Called");  FSUtils.checkHTTPRequestLength(request);  try {    MimeHeaders mimeHeaders=SAMLUtils.getMimeHeaders(request);    ServletInputStream sInputStream=request.getInputStream();    SOAPMessage soapMessage=msgFactory.createMessage(mimeHeaders,sInputStream);    this.onMessage(request,response,soapMessage);    return;  } catch (  SOAPException se) {    throw new ServletException(se);  }}  }
class C{  @DataProvider(name="certificateExactMatchInvalidAttributeValues") public Object[][] createCertificateExactMatchingRuleInvalidAttributeValues() throws Exception {  String invalidcert1="MIICpTCCAg6gAwIBBQIJALeoA6I3ZC/cMA0GCSqGSIb3DQEBBQUAMFYxCzAJBgNV" + "BAYTAlVTMRMwEQYDVQQHEwpDdXBlcnRpb25lMRwwGgYDVQQLExNQcm9kdWN0IERl" + "dmVsb3BtZW50MRQwEgYDVQQDEwtCYWJzIEplbnNlbjAeFw0xMjA1MDIxNjM0MzVa"+ "Fw0xMjEyMjExNjM0MzVaMFYxCzAJBgNVBAYTAlVTMRMwEQYDVQQHEwpDdXBlcnRp"+ "b25lMRwwGgYDVQQLExNQcm9kdWN0IERldmVsb3BtZW50MRQwEgYDVQQDEwtCYWJz"+ "IEplbnNlbjCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEApysa0c9qc8FB8gIJ"+ "8zAb1pbJ4HzC7iRlVGhRJjFORkGhyvU4P5o2wL0iz/uko6rL9/pFhIlIMbwbV8sm"+ "mKeNUPitwiKOjoFDmtimcZ4bx5UTAYLbbHMpEdwSpMC5iF2UioM7qdiwpAfZBd6Z"+ "69vqNxuUJ6tP+hxtr/aSgMH2i8ECAwEAAaN7MHkwCQYDVR0TBAIwADAsBglghkgB"+ "hvhCAQ0EHxYdT3BlblNTTCBHZW5lcmF0ZWQgQ2VydGlmaWNhdGUwHQYDVR0OBBYE"+ "FLlZD3aKDa8jdhzoByOFMAJDs2osMB8GA1UdIwQYMBaAFLlZD3aKDa8jdhzoByOF"+ "MAJDs2osMA0GCSqGSIb3DQEBBQUAA4GBAE5vccY8Ydd7by2bbwiDKgQqVyoKrkUg"+ "6CD0WRmc2pBeYX2z94/PWO5L3Fx+eIZh2wTxScF+FdRWJzLbUaBuClrxuy0Y5ifj"+ "axuJ8LFNbZtsp1ldW3i84+F5+SYT+xI67ZcoAtwx/VFVI9s5I/Gkmu9f9nxjPpK7"+ "1AIUXiE3Qcck";  String brokencert1="MIICpTCCAg6gAwIBAgIJALeoA6I3ZC/cMA0GCSqGSIb3DQEBBQUAMFYxCzAJBgNV";  return new Object[][]{{ByteString.valueOfBase64(invalidcert1)},{ByteString.valueOfBase64(brokencert1)}};}  }
class C{  public ModifyOperationBasis(ClientConnection clientConnection,long operationID,int messageID,List<Control> requestControls,ByteString rawEntryDN,List<RawModification> rawModifications){  super(clientConnection,operationID,messageID,requestControls);  this.rawEntryDN=rawEntryDN;  this.rawModifications=rawModifications;  entryDN=null;  modifications=null;  responseControls=new ArrayList<>();  cancelRequest=null;}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS,boolean includeHeader) throws FSMsgException {  StringBuffer xml=new StringBuffer(300);  if (includeHeader) {    xml.append("<?xml version=\"1.0\" encoding=\"").append(IFSConstants.DEFAULT_ENCODING).append("\" ?>\n");  }  String prefix="";  String uri="";  if (includeNS) {    prefix=IFSConstants.LIB_PREFIX;  }  if (declareNS) {    uri=IFSConstants.LIB_NAMESPACE_STRING;  }  xml.append("<").append(prefix).append("IDPEntry").append(uri).append(">\n");  if (providerID != null) {    xml.append("<").append(prefix).append("ProviderID").append(">").append(providerID).append("</").append(prefix).append("ProviderID").append(">\n");  }  if (providerName != null) {    xml.append("<").append(prefix).append("ProviderName").append(">").append(providerName).append("</").append(prefix).append("ProviderName").append(">\n");  }  if (location != null) {    xml.append("<").append(prefix).append("Loc").append(">").append(location).append("</").append(prefix).append("Loc").append(">\n");  }  xml.append("</").append(prefix).append("IDPEntry").append(">\n");  return xml.toString();}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder(name);  if (hasDescription()) {    sb.append(" (");    sb.append(description);    sb.append(")");  }  return sb.toString();}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public AuthenticationInfo(Entry authenticationEntry,DN simpleBindDN,boolean isRoot){  ifNull(authenticationEntry);  this.authenticationEntry=authenticationEntry;  this.simpleBindDN=simpleBindDN;  this.isRoot=isRoot;  this.isAuthenticated=true;  this.mustChangePassword=false;  this.authorizationEntry=authenticationEntry;  this.saslMechanism=null;  this.authenticationType=AuthenticationType.SIMPLE;}  }
class C{  private static SecurityOptions createSelfSignedCertificateOptions(boolean enableSSL,boolean enableStartTLS,int sslPort,Collection<String> aliasesToUse){  return createOptionsForCertificatType(CertificateType.SELF_SIGNED_CERTIFICATE,null,null,enableSSL,enableStartTLS,sslPort,aliasesToUse);}  }
class C{  public SipException(){  super();}  }
class C{  public WeakHashtable(){}  }
class C{  public final byte[] generateSecret() throws IllegalStateException {  return spiImpl.engineGenerateSecret();}  }
class C{  protected Map<AttributeType,List<Attribute>> toAttributesMap(Map<AttributeType,List<AttributeBuilder>> attrBuilders){  Map<AttributeType,List<Attribute>> attributes=new HashMap<>(attrBuilders.size());  for (  Map.Entry<AttributeType,List<AttributeBuilder>> attrTypeEntry : attrBuilders.entrySet()) {    AttributeType attrType=attrTypeEntry.getKey();    List<Attribute> attrList=toAttributesList(attrTypeEntry.getValue());    attributes.put(attrType,attrList);  }  return attributes;}  }
class C{  public void testCacheConcurrency() throws Exception {  String b=DirectoryServer.getBackend(DN.valueOf("o=test")).getBackendID();  for (int loops=0; loops < CONCURRENCYLOOPS; loops++) {    for (int i=0; i < NUMTESTENTRIES; i++) {      cache.putEntry(testEntriesList.get(i),b,i);      cache.getEntry(testEntriesList.get(i).getName());      cache.removeEntry(testEntriesList.get(i).getName());      cache.putEntryIfAbsent(testEntriesList.get(i),b,i);      cache.getEntry(b,i);    }  }}  }
class C{  public void publish(LogRecord lrecord){  if (MonitoringUtil.isRunning() && fileLogHandlerForMonitoring != null) {    fileLogHandlerForMonitoring.incHandlerRequestCount(1);  }  if (maxFileSize <= 0) {    return;  }  if (!isLoggable(lrecord)) {    return;  }  Formatter formatter=getFormatter();  String message=formatter.format(lrecord);synchronized (this) {    recordBuffer.add(message);    if (recordBuffer.size() >= recCountLimit) {      if (Debug.messageEnabled()) {        Debug.message(fileName + ":FileHandler.publish(): got " + recordBuffer.size()+ " records, writing all");      }      nonBlockingFlush();    }  }}  }
class C{  public void printSet(Set set,int indentLevel){  Iterator itr=set.iterator();  while (itr.hasNext()) {    printIndent(indentLevel);    writer.println(itr.next().toString());  }  writer.flush();}  }
class C{  public boolean isUrlSafe(){  return this.encodeTable == URL_SAFE_ENCODE_TABLE;}  }
class C{  public void addReferralAuthenticationListener(ReferralAuthenticationListener listener){  if (listeners == null) {    listeners=new ArrayList<>();  }  listeners.add(listener);}  }
class C{  private DateUtil(DateTimeZone zone){  chrono=ISOChronology.getInstance(zone);}  }
class C{  public String toString(){  String classname=Util.getUnqualifiedName(getClass());  return (ref == null) ? classname : classname + "[" + ref.remoteToString()+ "]";}  }
class C{  public void modifyDN(ModifyDNRequest request) throws LdapException {  addControls(request);  conn.getConnection().modifyDN(request);}  }
class C{  public ConditionDecision(boolean allowed){  this.allowed=allowed;}  }
class C{  public static Document marshalRow(Row row){  if (row == null) {    return null;  }  Document d=new Document();  d.setUuid(row.getUUID(DocumentRepositoryImpl.Columns.ID));  ByteBuffer b=row.getBytes(DocumentRepositoryImpl.Columns.OBJECT);  if (b != null && b.hasArray()) {    byte[] result=new byte[b.remaining()];    b.get(result);    BSONObject o=BSON.decode(result);    d.setObject(o);  }  d.setCreatedAt(row.getDate(DocumentRepositoryImpl.Columns.CREATED_AT));  d.setUpdatedAt(row.getDate(DocumentRepositoryImpl.Columns.UPDATED_AT));  return d;}  }
class C{  static Class<?>[] canonicalizeAll(Class<?>[] ts,int how){  Class<?>[] cs=null;  for (int imax=ts.length, i=0; i < imax; i++) {    Class<?> c=canonicalize(ts[i],how);    if (c == void.class)     c=null;    if (c != null) {      if (cs == null)       cs=ts.clone();      cs[i]=c;    }  }  return cs;}  }
class C{  public static void registerSupportedFeature(String featureOID){  DirectoryServer.registerSupportedFeature(featureOID);}  }
class C{  public void enableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glEnableVertexAttribArray(location);}  }
class C{  @Override public int read(byte[] bts,int off,int len) throws IOException {  try {    beforeRead(len);    int n=in.read(bts,off,len);    afterRead(n);    return n;  } catch (  IOException e) {    handleIOException(e);    return -1;  }}  }
class C{  private void addTestEntries(String suffix) throws Exception {  TestCaseUtils.addEntries("dn: ou=dept," + suffix,"objectClass: top","objectClass: organizationalUnit","ou: dept","aci: (targetattr= \"*\")" + "(version 3.0; acl \"allow all\";" + "allow(all) userdn=\"ldap:///anyone\";)","","dn: ou=moved dept," + suffix,"objectClass: top","objectClass: organizationalUnit","ou: moved dept","aci: (targetattr= \"*\")" + "(version 3.0; acl \"allow all\";" + "allow(all) userdn=\"ldap:///anyone\";)","","dn: ou=groups," + suffix,"objectClass: top","objectClass: organizationalUnit","ou: groups","aci: (targetattr= \"*\")" + "(version 3.0; acl \"allow all\";" + "allow(all) userdn=\"ldap:///anyone\";)","","dn: ou=unique Groups," + suffix,"objectClass: top","objectClass: organizationalUnit","ou: unique Groups","aci: (targetattr= \"*\")" + "(version 3.0; acl \"allow all\";" + "allow(all) userdn=\"ldap:///anyone\";)","","dn: ou=People, ou=dept," + suffix,"objectClass: top","objectClass: organizationalUnit","ou: People","","dn: ou=Special People," + suffix,"objectClass: top","objectClass: organizationalUnit","ou: Special People","aci: (targetattr= \"*\")" + "(version 3.0; acl \"allow all\";" + "allow(all) userdn=\"ldap:///anyone\";)","","dn: cn=special person, ou=Special People," + suffix,"objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: 1","givenName: User","sn: 1","cn: special person","userPassword: password","mail: user1" + "@test","employeeNumber: 1","mobile: 1-111-1234","pager: 1-111-5678","description: Use for seeAlso attribute","","dn: cn=group, ou=groups," + suffix,"objectClass: top","objectClass: groupOfNames","cn: group","aci: (targetattr= \"*\")" + "(version 3.0; acl \"allow all\";" + "allow(all) userdn=\"ldap:///anyone\";)","","dn: cn=group, ou=unique groups," + suffix,"objectClass: top","objectClass: groupOfUniqueNames","cn: group","aci: (targetattr= \"*\")" + "(version 3.0; acl \"allow all\";" + "allow(all) userdn=\"ldap:///anyone\";)","","dn: uid=user.1, ou=People, ou=dept," + suffix,"objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: 1","givenName: User","sn: 1","cn: User 1","userPassword: password","mail: user1" + "@test","employeeNumber: 1","mobile: 1-111-1234","pager: 1-111-5678","telephoneNumber: 1-111-9012","","dn: uid=user.2, ou=People, ou=dept," + suffix,"objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: 2","givenName: User","sn: 2","cn: User 2","mail: user2" + "@test","userPassword: password","employeeNumber: 2","mobile: 1-222-1234","pager: 1-222-5678","telephoneNumber: 1-222-9012","","dn: uid=user.3, ou=People, ou=dept," + suffix,"objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: 3","givenName: User","sn: 3","cn: User 3","mail: user3" + "@test","userPassword: password","employeeNumber: 3","mobile: 1-333-1234","pager: 1-333-5678","telephoneNumber: 1-333-9012","","dn: uid=user.4, ou=People, ou=dept," + suffix,"objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: 4","givenName: User","sn: 4","cn: User 4","mail: user4" + "@test","userPassword: password","employeeNumber: 4","mobile: 1-444-1234","pager: 1-444-5678","telephoneNumber: 1-444-9012","","dn: uid=user.5, ou=People, ou=dept," + suffix,"objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: 5","givenName: User","sn: 5","cn: User 5","mail: user5" + "@test","userPassword: password","employeeNumber: 5","mobile: 1-555-1234","pager: 1-555-5678","telephoneNumber: 1-555-9012");}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  private SecretKey generateSecretKey(String algorithm,int keyStrength) throws SAML2Exception {  KeyGenerator keygen=null;  try {    if (algorithm.equals(XMLCipher.AES_128) || algorithm.equals(XMLCipher.AES_192) || algorithm.equals(XMLCipher.AES_256)) {      keygen=KeyGenerator.getInstance("AES");    } else     if (algorithm.equals(XMLCipher.TRIPLEDES)) {      keygen=KeyGenerator.getInstance("TripleDES");    } else {      SAML2SDKUtils.debug.error("generateSecretKey : unsupported algorithm '{}'",algorithm);      throw new SAML2Exception(SAML2SDKUtils.bundle.getString("unsupportedKeyAlg"));    }    if (keyStrength != 0) {      keygen.init(keyStrength);    }  } catch (  NoSuchAlgorithmException ne) {    SAML2SDKUtils.debug.error("generateSecretKey : can't find algorithm '{}'",algorithm);    throw new SAML2Exception(ne);  }  return (keygen != null) ? keygen.generateKey() : null;}  }
class C{  public ProviderDoesNotExistException(String message,Throwable cause){  super(message,cause);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int context=getArg0AsNode(xctxt);  if (DTM.NULL == context)   return XString.EMPTYSTRING;  DTM dtm=xctxt.getDTM(context);  String s=(context != DTM.NULL) ? dtm.getLocalName(context) : "";  if (s.startsWith("#") || s.equals("xmlns"))   return XString.EMPTYSTRING;  return new XString(s);}  }
class C{  public boolean clearApplicationLoginInfo(ModelApplication modelApp){  if (isClosed) {    throw new IllegalStateException(TAG + " is closed.");  }  return registeredAppDbAdapter.update(modelApp.getDatabaseId(),null,null,null,null,"","");}  }
class C{  private void writerRegionCell(final FacesContext context,final UIAbstractRegion region) throws IOException {  final ResponseWriter writer=context.getResponseWriter();  writer.startElement("td",null);  region.getWrapper().writeAttribute("valign","top");  if (region.isFullSpan()) {    writer.writeAttribute("colspan",this.colspan,null);  }  if (region.isStretchWidth() && region.getWidth() == null) {    writer.writeAttribute("width","100%",null);  } else   if (region.isRespectWidth()) {    writer.writeAttribute("width",region.getWidth(),null);  }  if (region.isStretchHeight() && region.getHeight() == null) {    writer.writeAttribute("height","100%",null);  } else   if (region.isRespectHight()) {    writer.writeAttribute("height",region.getHeight(),null);  }  region.encodeAll(context);  writer.endElement("td");}  }
class C{  public void testDivideAndRemainderMathContextDOWN(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=45;  String b="134432345432345748766876876723342238476237823787879183470";  int bScale=20;  int precision=15;  RoundingMode rm=RoundingMode.DOWN;  MathContext mc=new MathContext(precision,rm);  String res="0E-25";  int resScale=25;  String rem="3736186567876.876578956958765675671119238118911893939591735";  int remScale=45;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result[]=aNumber.divideAndRemainder(bNumber,mc);  assertEquals("incorrect quotient value",res,result[0].toString());  assertEquals("incorrect quotient scale",resScale,result[0].scale());  assertEquals("incorrect remainder value",rem,result[1].toString());  assertEquals("incorrect remainder scale",remScale,result[1].scale());}  }
class C{  public boolean handleNameRegistration(HttpServletRequest request,HttpServletResponse response,Object ssoToken,HashMap valMap){  regisSource=IFSConstants.REGIS_SSO;  FSUtils.debug.message("Entered FSNameRegistrationHandler::handleNameRegistration");  this.request=request;  this.response=response;  this.ssoToken=ssoToken;  this.regisMap=valMap;  setRegistrationURL();  if (managerInst == null) {    FSUtils.debug.error("FSNameRegistrationHandler " + "Account Manager instance is null");    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameRegistrationHandler::handleNameRegistration" + "failed to get Account Manager instance");    }    returnLocallyAtSource(response,false);    return false;  }  try {    this.userID=SessionManager.getProvider().getPrincipalName(ssoToken);  } catch (  SessionException e) {    FSUtils.debug.error("FSNameRegistrationHandler Constructor::SessionException",e);    LogUtil.error(Level.INFO,"USER_NOT_FOUND",null,ssoToken);    return false;  }  boolean bRemoteStatus=doRemoteRegistration();  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("Returning cntrol to SIngle Sign On with status " + bRemoteStatus);  }  return bRemoteStatus;}  }
class C{  public void paintToggleButtonBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public boolean isCoalesce(){  return coalesce;}  }
class C{  private boolean hasWDSSOFailed(HttpServletRequest request){  return Boolean.valueOf((String)request.getAttribute("http-auth-failed"));}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private void mergeHi(int base1,int len1,int base2,int len2){  assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  Object[] a=this.a;  Object[] tmp=ensureCapacity(len2);  int tmpBase=this.tmpBase;  System.arraycopy(a,base2,tmp,tmpBase,len2);  int cursor1=base1 + len1 - 1;  int cursor2=tmpBase + len2 - 1;  int dest=base2 + len2 - 1;  a[dest--]=a[cursor1--];  if (--len1 == 0) {    System.arraycopy(tmp,tmpBase,a,dest - (len2 - 1),len2);    return;  }  if (len2 == 1) {    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];    return;  }  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      assert len1 > 0 && len2 > 1;      if (((Comparable)tmp[cursor2]).compareTo(a[cursor1]) < 0) {        a[dest--]=a[cursor1--];        count1++;        count2=0;        if (--len1 == 0)         break outer;      } else {        a[dest--]=tmp[cursor2--];        count2++;        count1=0;        if (--len2 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      assert len1 > 0 && len2 > 1;      count1=len1 - gallopRight((Comparable)tmp[cursor2],a,base1,len1,len1 - 1);      if (count1 != 0) {        dest-=count1;        cursor1-=count1;        len1-=count1;        System.arraycopy(a,cursor1 + 1,a,dest + 1,count1);        if (len1 == 0)         break outer;      }      a[dest--]=tmp[cursor2--];      if (--len2 == 1)       break outer;      count2=len2 - gallopLeft((Comparable)a[cursor1],tmp,tmpBase,len2,len2 - 1);      if (count2 != 0) {        dest-=count2;        cursor2-=count2;        len2-=count2;        System.arraycopy(tmp,cursor2 + 1,a,dest + 1,count2);        if (len2 <= 1)         break outer;      }      a[dest--]=a[cursor1--];      if (--len1 == 0)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len2 == 1) {    assert len1 > 0;    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];  } else   if (len2 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    assert len1 == 0;    assert len2 > 0;    System.arraycopy(tmp,tmpBase,a,dest - (len2 - 1),len2);  }}  }
class C{  public boolean isAuthOption(String opt){  return opt.equals(FederationManagerConstants.ARGUMENT_ADMIN_ID) || opt.equals(FederationManagerConstants.ARGUMENT_PASSWORD_FILE);}  }
class C{  public int read() throws IOException {  if (closed) {    throw new IOException("Attempted read from closed stream.");  }  if (pos >= contentLength) {    return -1;  }  pos++;  return this.in.read();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrprevioussiblingnull.class,args);}  }
class C{  boolean solveConflict(){  return solveConflictFlag;}  }
class C{  public String toLowerUnderscore(){  return toUnderscore(CaseFormat.LOWER_UNDERSCORE);}  }
class C{  private String buildCacheKey(String serviceName,String version,String orgName,String groupName,String serviceComponent){  StringBuilder sb=new StringBuilder(100);  sb.append(serviceComponent).append(CACHE_KEY_DELIMITER);  sb.append(groupName).append(CACHE_KEY_DELIMITER);  sb.append(version).append(CACHE_KEY_DELIMITER);  sb.append(serviceName).append(CACHE_KEY_DELIMITER);  sb.append(orgName);  return sb.toString().toLowerCase();}  }
class C{  public static List<ImageData> createGifFrames(byte[] bytes,int[] frameNumbers){  byte[] imageType=readImageType(bytes);  if (imageTypeIs(imageType,gif)) {    GifImageData image=new GifImageData(bytes);    Arrays.sort(frameNumbers);    GifImageHelper.processImage(image,frameNumbers[frameNumbers.length - 1] - 1);    List<ImageData> frames=new ArrayList<>();    for (    int frame : frameNumbers) {      frames.add(image.getFrames().get(frame - 1));    }    return frames;  }  throw new IllegalArgumentException("GIF image expected.");}  }
class C{  private void deleteCollection(HttpServletRequest req,String path,Hashtable<String,Integer> errorList){  if (debug > 1)   log("Delete:" + path);  if (isSpecialPath(path)) {    errorList.put(path,Integer.valueOf(WebdavStatus.SC_FORBIDDEN));    return;  }  String ifHeader=req.getHeader("If");  if (ifHeader == null)   ifHeader="";  String lockTokenHeader=req.getHeader("Lock-Token");  if (lockTokenHeader == null)   lockTokenHeader="";  String[] entries=resources.list(path);  for (  String entry : entries) {    String childName=path;    if (!childName.equals("/"))     childName+="/";    childName+=entry;    if (isLocked(childName,ifHeader + lockTokenHeader)) {      errorList.put(childName,Integer.valueOf(WebdavStatus.SC_LOCKED));    } else {      WebResource childResource=resources.getResource(childName);      if (childResource.isDirectory()) {        deleteCollection(req,childName,errorList);      }      if (!childResource.delete()) {        if (!childResource.isDirectory()) {          errorList.put(childName,Integer.valueOf(WebdavStatus.SC_INTERNAL_SERVER_ERROR));        }      }    }  }}  }
class C{  public final void lazySet(boolean newValue){  int v=newValue ? 1 : 0;  unsafe.putOrderedInt(this,valueOffset,v);}  }
class C{  public void testCase13(){  byte aBytes[]={15,48,-29,7,98,-1,39,-128};  int aSign=1;  byte rBytes[]={15,48,-29,7,98,-1,39,-128};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=BigInteger.ONE;  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public boolean isWindows(){  if (isLocal()) {    return OperatingSystem.isWindows();  }  SearchResultEntry sr=getSystemInformationMonitor();  if (sr == null) {    return false;  }  String os=firstValueAsString(sr,"operatingSystem");  return os != null && OperatingSystem.WINDOWS.equals(OperatingSystem.forName(os));}  }
class C{  Script(ClassLoader classLoader,Class<?> scriptClass,Method scriptMethod){  this.classLoader=classLoader;  this.scriptClass=scriptClass;  this.scriptMethod=scriptMethod;}  }
class C{  public byte[] decode(byte[] pArray){  return decodeBase64(pArray);}  }
class C{  public static FileDescriptor open(String path,int flags) throws FileNotFoundException {  FileDescriptor fd=null;  try {    int mode=((flags & O_ACCMODE) == O_RDONLY) ? 0 : 0600;    fd=Libcore.os.open(path,flags,mode);    if (fd.valid()) {      if (S_ISDIR(Libcore.os.fstat(fd).st_mode)) {        throw new ErrnoException("open",EISDIR);      }    }    return fd;  } catch (  ErrnoException errnoException) {    try {      if (fd != null) {        IoUtils.close(fd);      }    } catch (    IOException ignored) {    }    FileNotFoundException ex=new FileNotFoundException(path + ": " + errnoException.getMessage());    ex.initCause(errnoException);    throw ex;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  Element elementNode;  String name;  doc=(Document)load("staff",false);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("domestic");  elementNode=domesticAttr.getOwnerElement();  name=elementNode.getNodeName();  assertEquals("throw_Equals","address",name);}  }
class C{  public void testSameObject(){  String value1="12378246728727834290276457386374882976782849";  String value2="-5634562095872038262928728727834290276457386374882976782849";  BigInteger aNumber1=new BigInteger(value1);  BigInteger aNumber2=new BigInteger(value2);  int code1=aNumber1.hashCode();  aNumber1.add(aNumber2).shiftLeft(125);  aNumber1.subtract(aNumber2).shiftRight(125);  aNumber1.multiply(aNumber2).toByteArray();  aNumber1.divide(aNumber2).bitLength();  aNumber1.gcd(aNumber2).pow(7);  int code2=aNumber1.hashCode();  assertTrue("hash codes for the same object differ",code1 == code2);}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof RequestingUserName);}  }
class C{  public static String openSSLToJsse(String opensslCipherName){  if (!initialized) {    init();  }  List<Cipher> ciphers=aliases.get(opensslCipherName);  if (ciphers == null || ciphers.size() != 1) {    return null;  }  Cipher cipher=ciphers.get(0);  return cipher.getJsseNames().iterator().next();}  }
class C{  private int pop(){  if (outputStackTop > 0) {    return outputStack[--outputStackTop];  } else {    return STACK | -(--owner.inputStackTop);  }}  }
class C{  private static byte positionToByte(int position){  return (byte)(position % 0xff);}  }
class C{  public void validate() throws AMConsoleException {  if (isSelected()) {    if (isPersonalQuestion()) {      if ((question.length() == 0) || (answer.length() == 0)) {        throw new AMConsoleException("user.password.reset.missing.personal.question.answer.message");      }    } else {      if (answer.length() == 0) {        throw new AMConsoleException("user.password.reset.missing.answer.message");      }    }  }}  }
class C{  public void run() throws ClientException {  headerDisplayed=false;  runStartNowOrSchedule();  runCompletionNotification();  runErrorNotification();  runDependency();  if (!uData.getDependencyIds().isEmpty()) {    runFailedDependencyAction();  }}  }
class C{  protected void prepareForDragging(){  splitPaneUI.startDragging();}  }
class C{  @Override public int compareTo(Aci aci){  return this.aciString.compareTo(aci.toString());}  }
class C{  public StringContent(int initialLength){  if (initialLength < 1) {    initialLength=1;  }  data=new char[initialLength];  data[0]='\n';  count=1;}  }
class C{  private Writer initWriter(File file,Charset encoding,boolean append) throws IOException {  boolean fileExistedAlready=file.exists();  OutputStream stream=null;  Writer writer=null;  try {    stream=new FileOutputStream(file.getAbsolutePath(),append);    writer=new OutputStreamWriter(stream,Charsets.toCharset(encoding));  } catch (  IOException ex) {    IOUtils.closeQuietly(writer);    IOUtils.closeQuietly(stream);    FileUtils.deleteQuietly(lockFile);    if (fileExistedAlready == false) {      FileUtils.deleteQuietly(file);    }    throw ex;  }catch (  RuntimeException ex) {    IOUtils.closeQuietly(writer);    IOUtils.closeQuietly(stream);    FileUtils.deleteQuietly(lockFile);    if (fileExistedAlready == false) {      FileUtils.deleteQuietly(file);    }    throw ex;  }  return writer;}  }
class C{  public void send(JsonValue params) throws BadRequestException {  InternetAddress from=null;  InternetAddress[] to=null;  InternetAddress[] cc=null;  InternetAddress[] bcc=null;  String subject=params.get("subject").defaultTo(params.get("_subject")).defaultTo("<no subject>").asString();  try {    if (!params.get("from").isNull()) {      from=new InternetAddress(params.get("from").asString());    } else     if (!params.get("_from").isNull()) {      from=new InternetAddress(params.get("_from").asString());    } else     if (fromAddr != null) {      from=new InternetAddress(fromAddr);    } else {      throw new BadRequestException("From: email address is absent");    }  } catch (  AddressException ae) {    throw new BadRequestException("Bad From: email address");  }  try {    to=InternetAddress.parse(params.get("to").defaultTo(params.get("_to")).asString());  } catch (  AddressException ae) {    throw new BadRequestException("Bad To: email address");  }  try {    if (!params.get("cc").isNull()) {      cc=InternetAddress.parse(params.get("cc").asString());    } else     if (!params.get("cc").isNull()) {      cc=InternetAddress.parse(params.get("_cc").asString());    }  } catch (  AddressException ae) {    throw new BadRequestException("Bad Cc: email address");  }  try {    if (!params.get("bcc").isNull()) {      bcc=InternetAddress.parse(params.get("bcc").asString());    } else     if (!params.get("_bcc").isNull()) {      bcc=InternetAddress.parse(params.get("_bcc").asString());    }  } catch (  AddressException ae) {    throw new BadRequestException("Bad Bcc: email address");  }  try {    Message message=new MimeMessage(session);    message.setFrom(from);    message.setRecipients(Message.RecipientType.TO,to);    if (cc != null) {      message.setRecipients(Message.RecipientType.CC,cc);    }    if (bcc != null) {      message.setRecipients(Message.RecipientType.BCC,bcc);    }    message.setSubject(subject);    String type=params.get("type").defaultTo(params.get("_type")).defaultTo("text/plain").asString();    Object body=params.get("body").defaultTo(params.get("_body")).getObject();    if (type.equalsIgnoreCase("text/plain") || type.equalsIgnoreCase("text/html") || type.equalsIgnoreCase("text/xml")) {      if (body != null && body instanceof String) {        message.setContent(body,type);      } else {        message.setText("<empty message>");      }    } else {      throw new BadRequestException("Email type: " + type + " is not handled");    }    Transport transport=session.getTransport("smtp");    if (smtpAuth) {      transport.connect(username,password);    } else {      transport.connect();    }    message.saveChanges();    transport.sendMessage(message,message.getAllRecipients());    transport.close();  } catch (  MessagingException e) {    throw new BadRequestException(e);  }}  }
class C{  static Class lookUpFactoryClass(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  String factoryClassName=lookUpFactoryClassName(factoryId,propertiesFilename,fallbackClassName);  ClassLoader cl=findClassLoader();  if (factoryClassName == null) {    factoryClassName=fallbackClassName;  }  try {    Class providerClass=findProviderClass(factoryClassName,cl,true);    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return providerClass;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + factoryClassName + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + factoryClassName + " could not be instantiated: "+ x,x);  }}  }
class C{  public static Remote lookup(String name) throws NotBoundException, java.net.MalformedURLException, RemoteException {  ParsedNamingURL parsed=parseURL(name);  Registry registry=getRegistry(parsed);  if (parsed.name == null)   return registry;  return registry.lookup(parsed.name);}  }
class C{  public ProxyAuthorizationHeader createProxyAuthorizationHeader(String scheme) throws ParseException {  if (scheme == null)   throw new NullPointerException("bad scheme arg");  ProxyAuthorization p=new ProxyAuthorization();  p.setScheme(scheme);  return p;}  }
class C{  public String toString(boolean includeNS,boolean declareNS){  StringBuffer result=new StringBuffer(200);  String prefix="";  String uri="";  if (includeNS) {    prefix=SAMLConstants.ASSERTION_PREFIX;  }  if (declareNS) {    uri=SAMLConstants.assertionDeclareStr;  }  result.append("<").append(prefix).append("AttributeDesignator ").append(uri).append(" AttributeName=\"").append(_attributeName).append("\" AttributeNamespace=\"").append(_attributeNameSpace).append("\" />\n");  return ((String)result.toString());}  }
class C{  public HostNameParser(LexerCore lexer){  this.lexer=lexer;  lexer.selectLexer("charLexer");}  }
class C{  public void paintProgressBarForeground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintForeground(context,g,x,y,w,h,orientation);}  }
class C{  public FrameBodyTFLT(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeparentnode.class,args);}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (this == POINT_INFINITY)   return false;  if (obj instanceof ECPoint) {    return ((x.equals(((ECPoint)obj).x)) && (y.equals(((ECPoint)obj).y)));  }  return false;}  }
class C{  public EglCore(){  this(null,0);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String name=getStringOptionValue(DatastoreOptions.DATASTORE_NAME);  String type=getStringOptionValue(DatastoreOptions.DATASTORE_TYPE);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List listValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  if ((datafile == null) && (listValues == null)) {    throw new CLIException(getResourceString("datastore-create-datastore-missing-data"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());  }  validateRealm(realm);  Map attributeValues=AttributeValues.parse(getCommandManager(),datafile,listValues);  String[] params={realm,name,type};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_CREATE_DATASTORE",params);  try {    ServiceConfigManager svcCfgMgr=new ServiceConfigManager(IdConstants.REPO_SERVICE,adminSSOToken);    ServiceConfig cfg=svcCfgMgr.getOrganizationConfig(realm,null);    if (cfg == null) {      OrganizationConfigManager orgCfgMgr=new OrganizationConfigManager(adminSSOToken,realm);      Map attrValues=getDefaultAttributeValues(adminSSOToken);      cfg=orgCfgMgr.addServiceConfig(IdConstants.REPO_SERVICE,attrValues);    }    cfg.addSubConfig(name,type,0,attributeValues);    getOutputWriter().printlnMessage(getResourceString("datastore-create-datastore-succeeded"));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_CREATE_DATASTORE",params);  } catch (  SMSException e) {    debugError("CreateDataStore.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_DATASTORE",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    debugError("CreateDataStore.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_DATASTORE",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public SchemeRegistry(){  super();  registeredSchemes=new LinkedHashMap<String,Scheme>();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.SecureConversationTokenType createSecureConversationTokenType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.SecureConversationTokenTypeImpl();}  }
class C{  private void changeStateTo(State newState) throws SearchAbandonException {  State oldState=state;  state=newState;  try {    controller.invokeRefreshTaskDidProgress(this,oldState,newState);  } catch (  InterruptedException x) {    throwAbandonIfNeeded(x);  }}  }
class C{  public InflaterOutputStream(OutputStream out){  this(out,new Inflater());  usesDefaultInflater=true;}  }
class C{  public static Charset forName(String charsetName){  return forName(charsetName,null);}  }
class C{  public SQLFeatureNotSupportedException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public BandCombineOp(float[][] matrix,RenderingHints hints){  nrows=matrix.length;  ncols=matrix[0].length;  this.matrix=new float[nrows][];  for (int i=0; i < nrows; i++) {    if (ncols > matrix[i].length) {      throw new IndexOutOfBoundsException("row " + i + " too short");    }    this.matrix[i]=Arrays.copyOf(matrix[i],ncols);  }  this.hints=hints;}  }
class C{  public void transferablesFlavorsChanged(){  if (peer != null)   peer.transferablesFlavorsChanged();}  }
class C{  public void startRecord(){  if (recordStatus == RecordStatus.RUNNING) {    throw new IllegalStateException("Record '" + this + "' is already running.");  }  recordHistory.put(newDate(),RUNNING);  recordStatus=RecordStatus.RUNNING;}  }
class C{  public void fillPolygon(int xPoints[],int yPoints[],int nPoints){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Filling polygon: " + " nPoints: "+ nPoints+ " X's: "+ xPoints+ " Y's: "+ yPoints);  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.fillPolygon(xPoints,yPoints,nPoints);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.fillPolygon(xPoints,yPoints,nPoints);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.fillPolygon(xPoints,yPoints,nPoints);}  }
class C{  public AMModelBase(HttpServletRequest req,String rbName){  initialize(req,rbName);}  }
class C{  protected void addWarInfo(File warfile){  WarInfo info=currentStatus.get(warfile.getAbsolutePath());  if (info == null) {    info=new WarInfo(warfile);    info.setLastState(-1);    currentStatus.put(warfile.getAbsolutePath(),info);  }}  }
class C{  public static String removeInvalidXMLChars(String text){  if (text == null || text.isEmpty()) {    return text;  }  return text.replaceAll(INVALID_XML_CHARACTERS,"");}  }
class C{  public final void testVerifyPublicKeyString2() throws InvalidKeyException, CertificateException, NoSuchAlgorithmException, NoSuchProviderException, SignatureException {  cert.verify(cert.getPublicKey(),usefulProvider.getName());  try {    cert.verify(cert.getPublicKey(),"UnknownProvider");    fail();  } catch (  NoSuchProviderException expected) {  }}  }
class C{  public TreePath notifyEntryDeleted(BrowserNodeInfo nodeInfo){  BasicNode node=nodeInfo.getNode();  if (node == rootNode) {    throw new IllegalArgumentException("Root node cannot be removed");  }  final TreeNode parentNode=node.getParent();  if (parentNode != null) {    removeOneNode(node);    return new TreePath(treeModel.getPathToRoot(parentNode));  }  return null;}  }
class C{  public static List<Foo> toModels(FooSoap[] soapModels){  if (soapModels == null) {    return null;  }  List<Foo> models=new ArrayList<Foo>(soapModels.length);  for (  FooSoap soapModel : soapModels) {    models.add(toModel(soapModel));  }  return models;}  }
class C{  public void addLayer(MapBaseLayer layer){  if (layer != null) {    layers.add(layer);  }}  }
class C{  public void completeComputing(){  StringBuilder mds=new StringBuilder();  for (  Entry<Integer,ServerState> entry : ldapStates.entrySet()) {    clear(mds);    final Integer lsiServerId=entry.getKey();    final ServerState lsiState=entry.getValue();    long lsiMissingChanges=computeMissingChanges(mds,lsiServerId,lsiState);    if (logger.isTraceEnabled()) {      mds.append("=").append(lsiMissingChanges);    }    this.missingChanges.put(lsiServerId,lsiMissingChanges);    logger.trace("Complete monitor data : Missing changes    (%5d)=%s",lsiServerId,mds);  }  for (  Entry<Integer,ServerState> entry : rsStates.entrySet()) {    clear(mds);    final Integer lsiServerId=entry.getKey();    final ServerState lsiState=entry.getValue();    long lsiMissingChanges=computeMissingChanges(mds,null,lsiState);    if (logger.isTraceEnabled()) {      mds.append("=").append(lsiMissingChanges);    }    this.missingChangesRS.put(lsiServerId,lsiMissingChanges);    logger.trace("Complete monitor data : Missing changes RS (%5d)=%s",lsiServerId,mds);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(textsplittexttwo.class,args);}  }
class C{  @Override public boolean entryExists(SSOToken token,String dn){  if (debug.messageEnabled()) {    debug.message("SMSEmbeddedLdapObject.entryExists: checking if entry exists: " + dn);  }  dn=DN.valueOf(dn).toString().toLowerCase();  if (SMSNotificationManager.isCacheEnabled()) {    if (entriesPresent.contains(dn)) {      if (debug.messageEnabled()) {        debug.message("SMSEmbeddedLdapObject.entryExists: entry present in cache: " + dn);      }      return true;    } else     if (entriesNotPresent.contains(dn)) {      if (debug.messageEnabled()) {        debug.message("SMSEmbeddedLdapObject.entryExists: entry present in not-present-cache: " + dn);      }      return false;    }  }  try {    boolean entryExists=entryExists(dn);    if (SMSNotificationManager.isCacheEnabled()) {      initializeNotification();      Set<String> cacheToUpdate=entryExists ? entriesPresent : entriesNotPresent;      cacheToUpdate.add(dn);      if (cacheToUpdate.size() > entriesPresentCacheSize) {synchronized (cacheToUpdate) {          if (!cacheToUpdate.isEmpty()) {            cacheToUpdate.remove(cacheToUpdate.iterator().next());          }        }      }    }    return entryExists;  } catch (  SMSException smse) {    return false;  }}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.TextElement createTextElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.TextElementImpl();}  }
class C{  public ReplacesHeader createReplacesHeader(String callId,String toTag,String fromTag) throws ParseException {  Replaces replaces=new Replaces();  replaces.setCallId(callId);  replaces.setFromTag(fromTag);  replaces.setToTag(toTag);  return replaces;}  }
class C{  public boolean isAccessibleColumnSelected(int c){  return false;}  }
class C{  private Object writeReplace() throws ObjectStreamException {  if (primitiveArray) {    return convertFromPrimitiveToWrapperTypes();  } else {    return this;  }}  }
class C{  protected PoolEntry(){  super(SingleClientConnManager.this.connOperator,null);}  }
class C{  public static void main(String[] args){  int result=stopDS(args,System.out,System.err);  if (result != LDAPResultCode.SUCCESS) {    System.exit(filterExitCode(result));  }}  }
class C{  public ID3v1TagField(String fieldId,String fieldContent){  this.id=fieldId.toUpperCase();  this.content=fieldContent;  checkCommon();}  }
class C{  public ScriptCompiler shiftLeft(String sourceName,String source){  sources.put(sourceName,source);  return this;}  }
class C{  public synchronized void clear(){  int i;  int len=password.length;  for (i=0; i < len; i++) {    password[i]=0;  }  cleared=true;}  }
class C{  public synchronized void flush() throws IOException {  if (sink != null) {    if (sink.closedByReader || closed) {      throw new IOException("Pipe closed");    }synchronized (sink) {      sink.notifyAll();    }  }}  }
class C{  public int lowestLayer(){  int count=getComponentCount();  if (count > 0)   return getLayer(getComponent(count - 1));  return 0;}  }
class C{  public void addString(final String toAdd){  this.strings.add(toAdd);}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    camera.autoFocus(autoFocusCallback);  }}  }
class C{  public synchronized V remove(K k){  Reject.ifNull(k);  V remove=map.remove(k);  reverse.remove(remove);  return remove;}  }
class C{  protected Handler<AsyncResult<Void>> deleteResultHandler(RoutingContext context){  return null;}  }
class C{  public static void deregisterRotationPolicy(DN configEntryDN){  Reject.ifNull(configEntryDN);  directoryServer.rotationPolicies.remove(configEntryDN);}  }
class C{  public BufferIterator littleEndianIterator(){  return new NioBufferIterator(address,(int)size,ByteOrder.nativeOrder() != ByteOrder.LITTLE_ENDIAN);}  }
class C{  @Override public void flush() throws IOException {  super.flush();  this.branch.flush();}  }
class C{  public void paintDeterminate(Graphics g,JComponent c){  super.paintDeterminate(g,c);  if (!(g instanceof Graphics2D)) {    return;  }  if (progressBar.isBorderPainted()) {    Insets b=progressBar.getInsets();    int barRectWidth=progressBar.getWidth() - (b.left + b.right);    int barRectHeight=progressBar.getHeight() - (b.top + b.bottom);    int amountFull=getAmountFull(b,barRectWidth,barRectHeight);    boolean isLeftToRight=MetalUtils.isLeftToRight(c);    int startX, startY, endX, endY;    startX=b.left;    startY=b.top;    endX=b.left + barRectWidth - 1;    endY=b.top + barRectHeight - 1;    Graphics2D g2=(Graphics2D)g;    g2.setStroke(new BasicStroke(1.f));    if (progressBar.getOrientation() == JProgressBar.HORIZONTAL) {      g2.setColor(MetalLookAndFeel.getControlShadow());      g2.drawLine(startX,startY,endX,startY);      if (amountFull > 0) {        g2.setColor(MetalLookAndFeel.getPrimaryControlDarkShadow());        if (isLeftToRight) {          g2.drawLine(startX,startY,startX + amountFull - 1,startY);        } else {          g2.drawLine(endX,startY,endX - amountFull + 1,startY);          if (progressBar.getPercentComplete() != 1.f) {            g2.setColor(MetalLookAndFeel.getControlShadow());          }        }      }      g2.drawLine(startX,startY,startX,endY);    } else {      g2.setColor(MetalLookAndFeel.getControlShadow());      g2.drawLine(startX,startY,startX,endY);      if (amountFull > 0) {        g2.setColor(MetalLookAndFeel.getPrimaryControlDarkShadow());        g2.drawLine(startX,endY,startX,endY - amountFull + 1);      }      g2.setColor(MetalLookAndFeel.getControlShadow());      if (progressBar.getPercentComplete() == 1.f) {        g2.setColor(MetalLookAndFeel.getPrimaryControlDarkShadow());      }      g2.drawLine(startX,startY,endX,startY);    }  }}  }
class C{  public void testCase18(){  byte aBytes[]={120,34,78,-23,-111,45,127,23,45,-3};  byte bBytes[]={0};  byte rBytes[]={120,34,78,-23,-111,45,127,23,45,-3};  int aSign=1;  int bSign=0;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(1,result.signum());}  }
class C{  public void visitEnd(){}  }
class C{  public void leaveGroup(InetAddress groupAddr) throws IOException {  checkJoinOrLeave(groupAddr);  impl.leave(groupAddr);}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ssoToken=rc.getCLIRequest().getSSOToken();  if (ssoToken == null) {    adminID=getStringOptionValue(AccessManagerConstants.ARGUMENT_ADMIN_ID);    adminPassword=getPassword();  }}  }
class C{  private static String convertToQuotedString(String s){  if (s == null || s.isEmpty()) {    return null;  }  if (s.charAt(0) == '"' && s.charAt(s.length() - 1) == '"') {    return s;  }  return '\"' + s + '\"';}  }
class C{  public void clear(){  attrMap.clear();}  }
class C{  private static void parseArgs(String[] args){  if (args.length < 4 || args.length > 5) {    giveUp();  }  host=args[0];  port=Integer.parseInt(args[1]);  bindDN=args[2];  bindPassword=args[3];  if (args.length == 5) {    if ("use-starttls".equals(args[4].toLowerCase())) {      useStartTLS=true;      useSSL=false;    } else     if ("use-ssl".equals(args[4].toLowerCase())) {      useStartTLS=false;      useSSL=true;    } else {      giveUp();    }  }  keystore=System.getProperty("javax.net.ssl.trustStore");  storepass=System.getProperty("javax.net.ssl.trustStorePassword");  if (keystore == null) {    keystore=System.getProperty("java.home") + File.separator + "lib"+ File.separator+ "security"+ File.separator+ "cacerts";    storepass="changeit";  }}  }
class C{  public void refreshInstance(Map<String,Object> data){  if (data == null) {    return;  }  refreshInstance(WXJsonUtils.fromObjectToJSONString(data));}  }
class C{  protected void registerChildren(){  super.registerChildren();  registerChild(MH_COMMON,CCPrimaryMasthead.class);  registerChild(BREAD_CRUMB,CCBreadCrumbs.class);  registerChild(BREAD_CRUMB_HREF,HREF.class);}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  IDRepoModel model=(IDRepoModel)getModel();  String idRepoName=(String)propertySheetModel.getValue(IDRepoModel.TF_NAME);  idRepoName=idRepoName.trim();  String idRepoType=(String)propertySheetModel.getValue(ATTR_IDREPO_TYPE);  if (idRepoName.length() > 0) {    IDRepoAddViewBean vb=(IDRepoAddViewBean)getViewBean(IDRepoAddViewBean.class);    setPageSessionAttribute(IDRepoAddViewBean.IDREPO_NAME,idRepoName);    setPageSessionAttribute(IDRepoAddViewBean.IDREPO_TYPE,idRepoType);    unlockPageTrailForSwapping();    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } else {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error","idrepo.missing.idRepoName");    forwardTo();  }}  }
class C{  private static void checkKey(String key) throws MalformedObjectNameException {  if (key == null)   throw new NullPointerException("Invalid key (null)");  final int len=key.length();  if (len == 0)   throw new MalformedObjectNameException("Invalid key (empty)");  final char[] k=key.toCharArray();  final int endKey=parseKey(k,0);  if (endKey < len)   throw new MalformedObjectNameException("Invalid character in value: `" + k[endKey] + "'");}  }
class C{  public static String checkDoubleQuote(String cookie){  String double_quote="\"";  if ((cookie != null) && cookie.startsWith(double_quote) && cookie.endsWith(double_quote)) {    int last=cookie.length() - 1;    cookie=cookie.substring(1,last);  }  return cookie;}  }
class C{  public void deregisterChangeListener(SubentryChangeListener changeListener){  changeListeners.remove(changeListener);}  }
class C{  @Override public void addRuleInstances(Digester digester){  digester.addRule(fullPrefix,new SetPublicIdRule("setPublicId"));  digester.addRule(fullPrefix,new IgnoreAnnotationsRule());  digester.addRule(fullPrefix,new VersionRule());  digester.addRule(fullPrefix + "/absolute-ordering",absoluteOrdering);  digester.addRule(fullPrefix + "/ordering",relativeOrdering);  if (fragment) {    digester.addRule(fullPrefix + "/name",name);    digester.addCallMethod(fullPrefix + "/ordering/after/name","addAfterOrdering",0);    digester.addCallMethod(fullPrefix + "/ordering/after/others","addAfterOrderingOthers");    digester.addCallMethod(fullPrefix + "/ordering/before/name","addBeforeOrdering",0);    digester.addCallMethod(fullPrefix + "/ordering/before/others","addBeforeOrderingOthers");  } else {    digester.addCallMethod(fullPrefix + "/absolute-ordering/name","addAbsoluteOrdering",0);    digester.addCallMethod(fullPrefix + "/absolute-ordering/others","addAbsoluteOrderingOthers");    digester.addRule(fullPrefix + "/deny-uncovered-http-methods",new SetDenyUncoveredHttpMethodsRule());  }  digester.addCallMethod(fullPrefix + "/context-param","addContextParam",2);  digester.addCallParam(fullPrefix + "/context-param/param-name",0);  digester.addCallParam(fullPrefix + "/context-param/param-value",1);  digester.addCallMethod(fullPrefix + "/display-name","setDisplayName",0);  digester.addRule(fullPrefix + "/distributable",new SetDistributableRule());  configureNamingRules(digester);  digester.addObjectCreate(fullPrefix + "/error-page","org.apache.tomcat.util.descriptor.web.ErrorPage");  digester.addSetNext(fullPrefix + "/error-page","addErrorPage","org.apache.tomcat.util.descriptor.web.ErrorPage");  digester.addCallMethod(fullPrefix + "/error-page/error-code","setErrorCode",0);  digester.addCallMethod(fullPrefix + "/error-page/exception-type","setExceptionType",0);  digester.addCallMethod(fullPrefix + "/error-page/location","setLocation",0);  digester.addObjectCreate(fullPrefix + "/filter","org.apache.tomcat.util.descriptor.web.FilterDef");  digester.addSetNext(fullPrefix + "/filter","addFilter","org.apache.tomcat.util.descriptor.web.FilterDef");  digester.addCallMethod(fullPrefix + "/filter/description","setDescription",0);  digester.addCallMethod(fullPrefix + "/filter/display-name","setDisplayName",0);  digester.addCallMethod(fullPrefix + "/filter/filter-class","setFilterClass",0);  digester.addCallMethod(fullPrefix + "/filter/filter-name","setFilterName",0);  digester.addCallMethod(fullPrefix + "/filter/icon/large-icon","setLargeIcon",0);  digester.addCallMethod(fullPrefix + "/filter/icon/small-icon","setSmallIcon",0);  digester.addCallMethod(fullPrefix + "/filter/async-supported","setAsyncSupported",0);  digester.addCallMethod(fullPrefix + "/filter/init-param","addInitParameter",2);  digester.addCallParam(fullPrefix + "/filter/init-param/param-name",0);  digester.addCallParam(fullPrefix + "/filter/init-param/param-value",1);  digester.addObjectCreate(fullPrefix + "/filter-mapping","org.apache.tomcat.util.descriptor.web.FilterMap");  digester.addSetNext(fullPrefix + "/filter-mapping","addFilterMapping","org.apache.tomcat.util.descriptor.web.FilterMap");  digester.addCallMethod(fullPrefix + "/filter-mapping/filter-name","setFilterName",0);  digester.addCallMethod(fullPrefix + "/filter-mapping/servlet-name","addServletName",0);  digester.addCallMethod(fullPrefix + "/filter-mapping/url-pattern","addURLPattern",0);  digester.addCallMethod(fullPrefix + "/filter-mapping/dispatcher","setDispatcher",0);  digester.addCallMethod(fullPrefix + "/listener/listener-class","addListener",0);  digester.addRule(fullPrefix + "/jsp-config",jspConfig);  digester.addObjectCreate(fullPrefix + "/jsp-config/jsp-property-group","org.apache.tomcat.util.descriptor.web.JspPropertyGroup");  digester.addSetNext(fullPrefix + "/jsp-config/jsp-property-group","addJspPropertyGroup","org.apache.tomcat.util.descriptor.web.JspPropertyGroup");  digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/deferred-syntax-allowed-as-literal","setDeferredSyntax",0);  digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/el-ignored","setElIgnored",0);  digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/include-coda","addIncludeCoda",0);  digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/include-prelude","addIncludePrelude",0);  digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/is-xml","setIsXml",0);  digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/page-encoding","setPageEncoding",0);  digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/scripting-invalid","setScriptingInvalid",0);  digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/trim-directive-whitespaces","setTrimWhitespace",0);  digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/url-pattern","addUrlPattern",0);  digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/default-content-type","setDefaultContentType",0);  digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/buffer","setBuffer",0);  digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/error-on-undeclared-namespace","setErrorOnUndeclaredNamespace",0);  digester.addRule(fullPrefix + "/login-config",loginConfig);  digester.addObjectCreate(fullPrefix + "/login-config","org.apache.tomcat.util.descriptor.web.LoginConfig");  digester.addSetNext(fullPrefix + "/login-config","setLoginConfig","org.apache.tomcat.util.descriptor.web.LoginConfig");  digester.addCallMethod(fullPrefix + "/login-config/auth-method","setAuthMethod",0);  digester.addCallMethod(fullPrefix + "/login-config/realm-name","setRealmName",0);  digester.addCallMethod(fullPrefix + "/login-config/form-login-config/form-error-page","setErrorPage",0);  digester.addCallMethod(fullPrefix + "/login-config/form-login-config/form-login-page","setLoginPage",0);  digester.addCallMethod(fullPrefix + "/mime-mapping","addMimeMapping",2);  digester.addCallParam(fullPrefix + "/mime-mapping/extension",0);  digester.addCallParam(fullPrefix + "/mime-mapping/mime-type",1);  digester.addObjectCreate(fullPrefix + "/security-constraint","org.apache.tomcat.util.descriptor.web.SecurityConstraint");  digester.addSetNext(fullPrefix + "/security-constraint","addSecurityConstraint","org.apache.tomcat.util.descriptor.web.SecurityConstraint");  digester.addRule(fullPrefix + "/security-constraint/auth-constraint",new SetAuthConstraintRule());  digester.addCallMethod(fullPrefix + "/security-constraint/auth-constraint/role-name","addAuthRole",0);  digester.addCallMethod(fullPrefix + "/security-constraint/display-name","setDisplayName",0);  digester.addCallMethod(fullPrefix + "/security-constraint/user-data-constraint/transport-guarantee","setUserConstraint",0);  digester.addObjectCreate(fullPrefix + "/security-constraint/web-resource-collection","org.apache.tomcat.util.descriptor.web.SecurityCollection");  digester.addSetNext(fullPrefix + "/security-constraint/web-resource-collection","addCollection","org.apache.tomcat.util.descriptor.web.SecurityCollection");  digester.addCallMethod(fullPrefix + "/security-constraint/web-resource-collection/http-method","addMethod",0);  digester.addCallMethod(fullPrefix + "/security-constraint/web-resource-collection/http-method-omission","addOmittedMethod",0);  digester.addCallMethod(fullPrefix + "/security-constraint/web-resource-collection/url-pattern","addPattern",0);  digester.addCallMethod(fullPrefix + "/security-constraint/web-resource-collection/web-resource-name","setName",0);  digester.addCallMethod(fullPrefix + "/security-role/role-name","addSecurityRole",0);  digester.addRule(fullPrefix + "/servlet",new ServletDefCreateRule());  digester.addSetNext(fullPrefix + "/servlet","addServlet","org.apache.tomcat.util.descriptor.web.ServletDef");  digester.addCallMethod(fullPrefix + "/servlet/init-param","addInitParameter",2);  digester.addCallParam(fullPrefix + "/servlet/init-param/param-name",0);  digester.addCallParam(fullPrefix + "/servlet/init-param/param-value",1);  digester.addCallMethod(fullPrefix + "/servlet/jsp-file","setJspFile",0);  digester.addCallMethod(fullPrefix + "/servlet/load-on-startup","setLoadOnStartup",0);  digester.addCallMethod(fullPrefix + "/servlet/run-as/role-name","setRunAs",0);  digester.addObjectCreate(fullPrefix + "/servlet/security-role-ref","org.apache.tomcat.util.descriptor.web.SecurityRoleRef");  digester.addSetNext(fullPrefix + "/servlet/security-role-ref","addSecurityRoleRef","org.apache.tomcat.util.descriptor.web.SecurityRoleRef");  digester.addCallMethod(fullPrefix + "/servlet/security-role-ref/role-link","setLink",0);  digester.addCallMethod(fullPrefix + "/servlet/security-role-ref/role-name","setName",0);  digester.addCallMethod(fullPrefix + "/servlet/servlet-class","setServletClass",0);  digester.addCallMethod(fullPrefix + "/servlet/servlet-name","setServletName",0);  digester.addObjectCreate(fullPrefix + "/servlet/multipart-config","org.apache.tomcat.util.descriptor.web.MultipartDef");  digester.addSetNext(fullPrefix + "/servlet/multipart-config","setMultipartDef","org.apache.tomcat.util.descriptor.web.MultipartDef");  digester.addCallMethod(fullPrefix + "/servlet/multipart-config/location","setLocation",0);  digester.addCallMethod(fullPrefix + "/servlet/multipart-config/max-file-size","setMaxFileSize",0);  digester.addCallMethod(fullPrefix + "/servlet/multipart-config/max-request-size","setMaxRequestSize",0);  digester.addCallMethod(fullPrefix + "/servlet/multipart-config/file-size-threshold","setFileSizeThreshold",0);  digester.addCallMethod(fullPrefix + "/servlet/async-supported","setAsyncSupported",0);  digester.addCallMethod(fullPrefix + "/servlet/enabled","setEnabled",0);  digester.addRule(fullPrefix + "/servlet-mapping",new CallMethodMultiRule("addServletMapping",2,0));  digester.addCallParam(fullPrefix + "/servlet-mapping/servlet-name",1);  digester.addRule(fullPrefix + "/servlet-mapping/url-pattern",new CallParamMultiRule(0));  digester.addRule(fullPrefix + "/session-config",sessionConfig);  digester.addObjectCreate(fullPrefix + "/session-config","org.apache.tomcat.util.descriptor.web.SessionConfig");  digester.addSetNext(fullPrefix + "/session-config","setSessionConfig","org.apache.tomcat.util.descriptor.web.SessionConfig");  digester.addCallMethod(fullPrefix + "/session-config/session-timeout","setSessionTimeout",0);  digester.addCallMethod(fullPrefix + "/session-config/cookie-config/name","setCookieName",0);  digester.addCallMethod(fullPrefix + "/session-config/cookie-config/domain","setCookieDomain",0);  digester.addCallMethod(fullPrefix + "/session-config/cookie-config/path","setCookiePath",0);  digester.addCallMethod(fullPrefix + "/session-config/cookie-config/comment","setCookieComment",0);  digester.addCallMethod(fullPrefix + "/session-config/cookie-config/http-only","setCookieHttpOnly",0);  digester.addCallMethod(fullPrefix + "/session-config/cookie-config/secure","setCookieSecure",0);  digester.addCallMethod(fullPrefix + "/session-config/cookie-config/max-age","setCookieMaxAge",0);  digester.addCallMethod(fullPrefix + "/session-config/tracking-mode","addSessionTrackingMode",0);  digester.addRule(fullPrefix + "/taglib",new TaglibLocationRule(false));  digester.addCallMethod(fullPrefix + "/taglib","addTaglib",2);  digester.addCallParam(fullPrefix + "/taglib/taglib-location",1);  digester.addCallParam(fullPrefix + "/taglib/taglib-uri",0);  digester.addRule(fullPrefix + "/jsp-config/taglib",new TaglibLocationRule(true));  digester.addCallMethod(fullPrefix + "/jsp-config/taglib","addTaglib",2);  digester.addCallParam(fullPrefix + "/jsp-config/taglib/taglib-location",1);  digester.addCallParam(fullPrefix + "/jsp-config/taglib/taglib-uri",0);  digester.addCallMethod(fullPrefix + "/welcome-file-list/welcome-file","addWelcomeFile",0);  digester.addCallMethod(fullPrefix + "/locale-encoding-mapping-list/locale-encoding-mapping","addLocaleEncodingMapping",2);  digester.addCallParam(fullPrefix + "/locale-encoding-mapping-list/locale-encoding-mapping/locale",0);  digester.addCallParam(fullPrefix + "/locale-encoding-mapping-list/locale-encoding-mapping/encoding",1);  digester.addRule(fullPrefix + "/post-construct",new LifecycleCallbackRule("addPostConstructMethods",2,true));  digester.addCallParam(fullPrefix + "/post-construct/lifecycle-callback-class",0);  digester.addCallParam(fullPrefix + "/post-construct/lifecycle-callback-method",1);  digester.addRule(fullPrefix + "/pre-destroy",new LifecycleCallbackRule("addPreDestroyMethods",2,false));  digester.addCallParam(fullPrefix + "/pre-destroy/lifecycle-callback-class",0);  digester.addCallParam(fullPrefix + "/pre-destroy/lifecycle-callback-method",1);}  }
class C{  public static boolean checkCaller(){  return checkCaller;}  }
class C{  protected void refreshPolicy(){  try {    Policy policy=Policy.getPolicy();    policy.refresh();  } catch (  AccessControlException e) {  }}  }
class C{  public XSLTTransformParameterSpec(XMLStructure stylesheet){  if (stylesheet == null) {    throw new NullPointerException();  }  this.stylesheet=stylesheet;}  }
class C{  @Deactivate public void deactivate(ComponentContext context){  logger.debug("OpenIDM Config for Authentication {} is deactivated.",config.get(Constants.SERVICE_PID));  config=null;  authenticators.clear();  if (authFilterWrapper != null) {    try {      authFilterWrapper.reset();    } catch (    Exception ex) {      logger.warn("Failure reported during unregistering of authentication filter: {}",ex.getMessage(),ex);    }  }}  }
class C{  protected void copy(WebResource resource,ServletOutputStream ostream,Range range) throws IOException {  IOException exception=null;  InputStream resourceInputStream=resource.getInputStream();  InputStream istream=new BufferedInputStream(resourceInputStream,input);  exception=copyRange(istream,ostream,range.start,range.end);  istream.close();  if (exception != null)   throw exception;}  }
class C{  private void postTest() throws Exception {  debugInfo("Post test cleaning.");  stop(broker2,broker3);  broker2=broker3=null;  remove(replServer1,replServer2,replServer3);  replServer1=replServer2=replServer3=null;  super.cleanRealEntries();  replServerPort=TestCaseUtils.findFreePorts(3);  debugInfo("Clearing DJ backend");  TestCaseUtils.initializeTestBackend(false);}  }
class C{  public RMRealmOpViewBeanBase(String name){  super(name);}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  String clientType=(String)propertySheetModel.getValue("deviceUserAgent");  if (clientType.trim().length() == 0) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error","mapMissingDeviceUserAgent.message");    forwardTo();  } else {    MAPCreateDeviceTwoViewBean vb=(MAPCreateDeviceTwoViewBean)getViewBean(MAPCreateDeviceTwoViewBean.class);    vb.attrParentId=(String)propertySheetModel.getValue("radioStyle");    vb.attrClientType=clientType;    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  }}  }
class C{  @Override public void onFailure(Throwable t){  callback.onFailure(t);}  }
class C{  void addXMLElementAfterTokenIndex(int lastTokenIndex,XMLElement element,boolean addAfterNewLine) throws Exception {  addXMLElementAfterTokenIndex(lastTokenIndex,element,addAfterNewLine,true);}  }
class C{  public BadStringOperationException(String message){  this.op=message;}  }
class C{  public static PdfAction createGoToE(PdfFileSpec fileSpec,PdfDestination destination,boolean newWindow,PdfTargetDictionary targetDictionary){  PdfAction action=new PdfAction().put(PdfName.S,PdfName.GoToE).put(PdfName.NewWindow,new PdfBoolean(newWindow));  if (fileSpec != null) {    action.put(PdfName.F,fileSpec.getPdfObject());  }  if (destination != null) {    action.put(PdfName.D,destination.getPdfObject());  }  if (targetDictionary != null) {    action.put(PdfName.T,targetDictionary.getPdfObject());  }  return action;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNodeNS04.class,args);}  }
class C{  public void destroyModuleState(){  userPrincipal=null;  userTokenId=null;}  }
class C{  private boolean findAndRemove(Object e){  if (e != null) {    for (Node pred=null, p=head; p != null; ) {      Object item=p.item;      if (p.isData) {        if (item != null && item != p && e.equals(item) && p.tryMatchData()) {          unsplice(pred,p);          return true;        }      } else       if (item == null)       break;      pred=p;      if ((p=p.next) == pred) {        pred=null;        p=head;      }    }  }  return false;}  }
class C{  public void drawArc(int x,int y,int width,int height,int startAngle,int arcAngle){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Drawing arc: " + new Rectangle(x,y,width,height)+ " startAngle: "+ startAngle+ " arcAngle: "+ arcAngle);  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawArc(x,y,width,height,startAngle,arcAngle);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.drawArc(x,y,width,height,startAngle,arcAngle);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.drawArc(x,y,width,height,startAngle,arcAngle);}  }
class C{  public IllegalTransactionStateException(String message,Throwable cause,Reason reason){  super(message,cause);  this.reason=reason;}  }
class C{  public RedisSessionResponseWrapper(HttpServletResponse response,RedisSessionRequestWrapper request){  super(response);  response.setHeader(TOKEN_HEADER_NAME,request.getSession(true).getId());}  }
class C{  private NewSuffixOptions promptIfRequiredForImportData(final UserData uData) throws UserDataException {  boolean prompt=true;  if (!argParser.baseDNArg.isPresent()) {    println();    try {      prompt=confirmAction(INFO_INSTALLDS_PROVIDE_BASE_DN_PROMPT.get(),true);    } catch (    final ClientException ce) {      prompt=true;      logger.warn(LocalizableMessage.raw("Error reading input: " + ce,ce));    }  }  if (!prompt) {    return NewSuffixOptions.createEmpty(new LinkedList<String>());  }  uData.setBackendType(getOrPromptForBackendType());  final List<String> baseDNs=promptIfRequiredForDNs(argParser.baseDNArg,lastResetBaseDN,INFO_INSTALLDS_PROMPT_BASEDN.get(),true);  return promptIfRequiredForDataOptions(baseDNs);}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public void add(RoleUnresolved role) throws IllegalArgumentException {  if (role == null) {    String excMsg="Invalid parameter";    throw new IllegalArgumentException(excMsg);  }  super.add(role);}  }
class C{  public static boolean liveConnectionsExist(String userID,String metaAlias){  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("Entered liveConnectionsExist for user : " + userID);  }  FSSessionManager sessionMgr=FSSessionManager.getInstance(metaAlias);synchronized (sessionMgr) {    FSUtils.debug.message("About to call getSessionList");    List sessionList=sessionMgr.getSessionList(userID);    if (sessionList != null && !sessionList.isEmpty()) {      FSUtils.debug.message("List is not empty");      Iterator iSessionIter=sessionList.iterator();      FSSession sessionObj=null;      while (iSessionIter.hasNext()) {        sessionObj=(FSSession)iSessionIter.next();        if ((sessionObj.getSessionPartners()).isEmpty()) {          continue;        } else {          return true;        }      }      return false;    } else {      FSUtils.debug.message("List is  empty");      return false;    }  }}  }
class C{  public boolean visitPredicate(ExpressionOwner owner,Expression pred){  return true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodelistreturnlastitem.class,args);}  }
class C{  public boolean isVerbose(){  return this.verbose;}  }
class C{  @Deprecated public Potion(PotionType type,int level,boolean splash,boolean extended){  this(type,level,splash);  this.extended=extended;}  }
class C{  public void swap_pin(Point2D p_location){  if (board_is_read_only)   return;  if (!is_StateMenu())   return;  PlaPointFloat location=gdi_context.coordinate_transform.screen_to_board(p_location);  StateInteractive return_state=((StateMenu)interactive_state).swap_pin(location);  set_interactive_state(return_state);}  }
class C{  public CopyUtils(){}  }
class C{  public List concat(Object elem){  if (elem instanceof Collection)   return concat((Collection<?>)elem);  List newList=new List();  newList.addAll(this);  newList.add(elem);  return newList;}  }
class C{  protected void handleParseConversionException(Exception e) throws SAXException {  if (e instanceof RuntimeException)   throw (RuntimeException)e;  ParseConversionEvent pce=new ParseConversionEventImpl(ValidationEvent.ERROR,e.getMessage(),new ValidationEventLocatorImpl(context.getLocator()),e);  context.handleEvent(pce,true);}  }
class C{  public static void notifyBackupEnded(Backend<?> backend,BackupConfig config,boolean successful){  for (  BackupTaskListener listener : directoryServer.backupTaskListeners) {    try {      listener.processBackupEnd(backend,config,successful);    } catch (    Exception e) {      logger.traceException(e);    }  }}  }
class C{  public boolean combine(int recursion_depth){  if (!is_on_the_board())   return false;  if (recursion_depth <= 0) {    System.out.println(classname + "combine: recursion exausted trace " + this);    return false;  }  recursion_depth--;  boolean something_changed=false;  if (combine_at_start()) {    something_changed=true;    combine(recursion_depth);  } else   if (combine_at_end()) {    something_changed=true;    combine(recursion_depth);  }  if (something_changed) {    r_board.observers.notify_changed(this);    art_item_clear();  }  return something_changed;}  }
class C{  public ConfigurationException(String explanation){  super(explanation);}  }
class C{  protected synchronized void sendMessage(byte[] msg,boolean retry) throws IOException {  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {    logger.logDebug("sendMessage isClient  = " + retry);  }  Socket sock=null;  IOException problem=null;  try {    sock=this.sipStack.ioHandler.sendBytes(this.getMessageProcessor().getIpAddress(),this.peerAddress,this.peerPort,this.peerProtocol,msg,retry,this);  } catch (  IOException any) {    problem=any;    logger.logWarning("Failed to connect " + this.peerAddress + ":"+ this.peerPort+ " but trying the advertised port="+ this.peerPortAdvertisedInHeaders+ " if it's different than the port we just failed on");    logger.logError("Error is ",any);  }  if (sock == null) {    if (peerAddressAdvertisedInHeaders != null && peerPortAdvertisedInHeaders > 0) {      logger.logWarning("Couldn't connect to peerAddress = " + peerAddress + " peerPort = "+ peerPort+ " key = "+ key+ " retrying on peerPortAdvertisedInHeaders "+ peerPortAdvertisedInHeaders);      InetAddress address=InetAddress.getByName(peerAddressAdvertisedInHeaders);      sock=this.sipStack.ioHandler.sendBytes(this.messageProcessor.getIpAddress(),address,this.peerPortAdvertisedInHeaders,this.peerProtocol,msg,retry,this);      this.peerPort=this.peerPortAdvertisedInHeaders;      this.peerAddress=address;      this.key=MessageChannel.getKey(peerAddress,peerPort,"TLS");      logger.logWarning("retry suceeded to peerAddress = " + peerAddress + " peerPortAdvertisedInHeaders = "+ peerPortAdvertisedInHeaders+ " key = "+ key);    } else {      throw problem;    }  }  if (sock != mySock && sock != null) {    if (mySock != null) {      if (logger.isLoggingEnabled(LogWriter.TRACE_WARN)) {        logger.logWarning("Old socket different than new socket on channel " + key);        logger.logStackTrace();        logger.logWarning("Old socket local ip address " + mySock.getLocalSocketAddress());        logger.logWarning("Old socket remote ip address " + mySock.getRemoteSocketAddress());        logger.logWarning("New socket local ip address " + sock.getLocalSocketAddress());        logger.logWarning("New socket remote ip address " + sock.getRemoteSocketAddress());      }      close(false,false);    }    if (problem == null) {      if (mySock != null) {        if (logger.isLoggingEnabled(LogWriter.TRACE_WARN)) {          logger.logWarning("There was no exception for the retry mechanism so creating a new thread based on the new socket for incoming " + key);        }      }      mySock=sock;      this.myClientInputStream=mySock.getInputStream();      Thread thread=new Thread(this);      thread.setDaemon(true);      thread.setName("TCPMessageChannelThread");      thread.start();    } else {      if (logger.isLoggingEnabled(LogWriter.TRACE_WARN)) {        logger.logWarning("There was an exception for the retry mechanism so not creating a new thread based on the new socket for incoming " + key);      }      mySock=sock;    }  }}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {  s.defaultReadObject();  myMimeType=new MimeType((String)s.readObject());}  }
class C{  public boolean is_connectable(AwtreeObject p_obj){  for (int index=0; index < net_nos_arr.length; ++index) {    if (!p_obj.is_obstacle(net_nos_arr[index]))     return true;  }  return false;}  }
class C{  int populatePrepStatementColumns(PreparedStatement prepStatement,JsonValue objVal,List<JsonPointer> tokenPointers) throws IOException, SQLException {  int colPos=1;  for (  JsonPointer propPointer : tokenPointers) {    JsonValue rawValue=objVal.get(propPointer);    String propValue=null;    if (null == rawValue) {      propValue=null;    } else     if (rawValue.isString() || rawValue.isNull()) {      propValue=rawValue.asString();    } else {      if (logger.isTraceEnabled()) {        logger.trace("Value for col {} from {} is getting Stringified from type {} to store in a STRING column as value: {}",colPos,propPointer,rawValue.getClass(),rawValue);      }      propValue=mapper.writeValueAsString(rawValue.getObject());    }    prepStatement.setString(colPos,propValue);    colPos++;  }  return colPos;}  }
class C{  public void reset(){  node_list.clear();}  }
class C{  @Override protected void writeValue(ASN1Writer writer) throws IOException {  writer.writeStartSequence(ASN1.UNIVERSAL_OCTET_STRING_TYPE);  writer.writeStartSequence();  writer.writeInteger(PersistentSearchChangeType.changeTypesToInt(changeTypes));  writer.writeBoolean(changesOnly);  writer.writeBoolean(returnECs);  writer.writeEndSequence();  writer.writeEndSequence();}  }
class C{  public InvalidPluginException(){}  }
class C{  public static int mainCompare(String[] args){  return mainCompare(args,true,System.out,System.err);}  }
class C{  public Rectangle modelToView(JTextComponent a,int b) throws BadLocationException {  Rectangle returnValue=((TextUI)(uis.elementAt(0))).modelToView(a,b);  for (int i=1; i < uis.size(); i++) {    ((TextUI)(uis.elementAt(i))).modelToView(a,b);  }  return returnValue;}  }
class C{  private static Application newApplication(final String name,final ApplicationType type){  return new Application(name,type);}  }
class C{  public int next(){  final int node=_currentNode;  if (node != NULL) {    _currentNode=getNextAttributeIdentity(node);    return returnNode(makeNodeHandle(node));  }  return NULL;}  }
class C{  public List<String> lineWrapDoc(String str,int maxWidth,String firstLinePrefix){  return s_lineWrapDoc(str,maxWidth,firstLinePrefix);}  }
class C{  public ModSet(){  current=0;}  }
class C{  public void addCopyright(final String copyRight){  addField(createCopyrightField(copyRight));}  }
class C{  public void deletePeopleContainers(Set peopleContainerDNs) throws AMException, SSOException {  Iterator iter=peopleContainerDNs.iterator();  while (iter.hasNext()) {    String peopleContainerDN=(String)iter.next();    AMPeopleContainer peopleContainer=new AMPeopleContainerImpl(super.token,peopleContainerDN);    peopleContainer.delete();  }}  }
class C{  public Wildcard(String pattern,int regexpOptions){  this.regexpOptions=regexpOptions;  regexp=Pattern.compile(wildcardToRegex(pattern),regexpOptions);  shortcut=extractShortcut(pattern);}  }
class C{  public Object clone(){  LDAPRoles theClone=null;  try {    theClone=(LDAPRoles)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  if (selectedRoleDNs != null) {    theClone.selectedRoleDNs=new HashSet();    theClone.selectedRoleDNs.addAll(selectedRoleDNs);  }  if (selectedRFCRoleDNs != null) {    theClone.selectedRFCRoleDNs=new HashSet();    theClone.selectedRFCRoleDNs.addAll(selectedRFCRoleDNs);  }  return theClone;}  }
class C{  static void destroyMBean(Role role) throws Exception {  String mname=createManagedName(role);  ManagedBean managed=registry.findManagedBean(mname);  if (managed == null) {    return;  }  String domain=managed.getDomain();  if (domain == null)   domain=mserver.getDefaultDomain();  ObjectName oname=createObjectName(domain,role);  if (mserver.isRegistered(oname))   mserver.unregisterMBean(oname);}  }
class C{  @Override protected boolean checkParam(final String reqParam) throws ConnectorException {  if (reqParam == null || reqParam.equals("")) {    return true;  }  if (Pattern.compile(Constants.INVALID_PATH_REGEX).matcher(reqParam).find()) {    return false;  }  return true;}  }
class C{  public JMenuItem add(JMenuItem menuItem){  super.add(menuItem);  return menuItem;}  }
class C{  public AnnotationTypeMismatchException(Method element,String foundType){  super("Incorrectly typed data found for annotation element " + element + " (Found data of type "+ foundType+ ")");  this.element=element;  this.foundType=foundType;}  }
class C{  public StylesheetPIHandler(String baseID,String media,String title,String charset){  m_baseID=baseID;  m_media=media;  m_title=title;  m_charset=charset;}  }
class C{  public RoleUnresolvedList(int initialCapacity){  super(initialCapacity);}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return getService().deleteFoo(foo);}  }
class C{  private JsonValue retrieveUpdatedObject(String resourceID,JsonValue value) throws JsonValueException, ResourceException {  return retrieveObject(resourceID,value.get("_id").required().asString());}  }
class C{  public Object clone() throws CloneNotSupportedException {  Object newObj=super.clone();  if (mimeType != null) {    ((DataFlavor)newObj).mimeType=(MimeType)mimeType.clone();  }  return newObj;}  }
class C{  public static void cacheResult(Foo foo){  getPersistence().cacheResult(foo);}  }
class C{  public int update(ByteBuffer input,ByteBuffer output) throws ShortBufferException {  checkState();  Utils.checkArgument(input.isDirect() && output.isDirect(),"Direct buffers are required.");  int len=OpenSslNative.update(context,input,input.position(),input.remaining(),output,output.position(),output.remaining());  input.position(input.limit());  output.position(output.position() + len);  return len;}  }
class C{  public SnsPushResponseUpdater(SnsClientFactory clientFactory){  this.clientFactory=clientFactory;}  }
class C{  private int processError(String headerMessage,String debugMessage,Object... messageParameters) throws AuthLoginException {  if (null != debugMessage) {    DEBUG.error(debugMessage,messageParameters);  }  substituteHeader(STATE_ERROR,headerMessage);  return STATE_ERROR;}  }
class C{  public void invalidateWheel(boolean clearCaches){  if (clearCaches) {    recycle.clearAll();    if (itemsLayout != null) {      itemsLayout.removeAllViews();    }    scrollingOffset=0;  } else   if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange(),currentItem);  }  invalidate();}  }
class C{  private RegistrationResult registerNewUser() throws AuthLoginException {  if (debug.messageEnabled()) {    debug.message("trying to register(create) a new user: " + userID);  }  try {    if (userExists(userID)) {      if (debug.messageEnabled()) {        debug.message("unable to register, user " + userID + " already exists");      }      return RegistrationResult.USER_EXISTS_ERROR;    }    Set<String> vals=new HashSet<String>();    vals.add(serviceStatus);    userAttrs.put("inetuserstatus",vals);    createIdentity(userID,userAttrs,defaultRoles);  } catch (  SSOException ssoe) {    debug.error("profile exception occured: ",ssoe);    return RegistrationResult.PROFILE_ERROR;  }catch (  IdRepoException ire) {    getLoginState("Membership").logFailed(ire.getMessage(),"CREATE_USER_PROFILE_FAILED",false,null);    debug.error("profile exception occured: ",ire);    return RegistrationResult.PROFILE_ERROR;  }  validatedUserID=userID;  if (debug.messageEnabled()) {    debug.message("registration is completed, created user: " + validatedUserID);  }  return RegistrationResult.NO_ERROR;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document docAlt;  NamedNodeMap attributes;  NamedNodeMap attributesAlt;  NodeList elementList;  NodeList elementListAlt;  Element element;  Element elementAlt;  Attr attr;  Node newNode;  String nullNS=null;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("*","address");  element=(Element)elementList.item(1);  attributes=element.getAttributes();  docAlt=(Document)load("staffNS",true);  elementListAlt=docAlt.getElementsByTagNameNS("*","address");  elementAlt=(Element)elementListAlt.item(1);  attributesAlt=elementAlt.getAttributes();  attr=(Attr)attributesAlt.getNamedItemNS(nullNS,"street");  newNode=attributesAlt.removeNamedItemNS(nullNS,"street");{    boolean success=false;    try {      newNode=attributes.setNamedItemNS(attr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  @Override public long longValue(){  return value;}  }
class C{  private boolean checkOTP(String otp,AMIdentity id,OathDeviceSettings settings) throws AuthLoginException {  if (settings == null) {    debug.error("OATH.checkOTP() : Invalid stored settings.");    throw new AuthLoginException(amAuthOATH,"authFailed",null);  }  String secretKey=parseSecretKey(settings.getSharedSecret());  if (minSecretKeyLength <= 0) {    debug.error("OATH.checkOTP() : Min Secret Key Length is not a valid value");    throw new AuthLoginException(amAuthOATH,"authFailed",null);  }  if (secretKey == null || secretKey.isEmpty()) {    debug.error("OATH.checkOTP() : Secret key is not a valid value");    throw new AuthLoginException(amAuthOATH,"authFailed",null);  }  if (secretKey.length() < minSecretKeyLength) {    if (debug.errorEnabled()) {      debug.error("OATH.checkOTP() : Secret key of length " + secretKey.length() + " is less than the minimum secret key length");    }    throw new AuthLoginException(amAuthOATH,"authFailed",null);  }  byte[] secretKeyBytes=DatatypeConverter.parseHexBinary(secretKey);  if (passLen < 6) {    debug.error("OATH.checkOTP() : Password length is smaller than 6");    throw new AuthLoginException(amAuthOATH,"authFailed",null);  }  String otpGen;  try {    if (algorithm == HOTP) {      int counter=settings.getCounter();      for (int i=0; i <= windowSize; i++) {        otpGen=HOTPAlgorithm.generateOTP(secretKeyBytes,counter + i,passLen,checksum,truncationOffset);        if (isEqual(otpGen,otp)) {          setCounterAttr(id,counter + i + 1,settings);          return true;        }      }    } else     if (algorithm == TOTP) {      long lastLoginTimeStep=settings.getLastLogin() / totpTimeStep;      if (lastLoginTimeStep < 0) {        debug.error("OATH.checkOTP() : invalid login time value : ");        throw new AuthLoginException(amAuthOATH,"authFailed",null);      }      if (totpTimeStep <= 0) {        debug.error("OATH.checkOTP() : invalid TOTP time step interval : ");        throw new AuthLoginException(amAuthOATH,"authFailed",null);      }      if (totpStepsInWindow < 0) {        debug.error("OATH.checkOTP() : invalid TOTP steps in window value : ");        throw new AuthLoginException(amAuthOATH,"authFailed",null);      }      long localTime=(time / totpTimeStep) + (settings.getClockDriftSeconds() / totpTimeStep);      if (lastLoginTimeStep == localTime) {        debug.error("OATH.checkOTP(): Login failed attempting to use the same OTP in same Time Step: " + localTime);        return false;      }      boolean sameWindow=false;      if (lastLoginTimeStep >= (localTime - totpStepsInWindow) && lastLoginTimeStep <= (localTime + totpStepsInWindow)) {        if (debug.messageEnabled()) {          debug.message("OATH.checkOTP() : Logging in in the same TOTP window");        }        sameWindow=true;      }      String passLenStr=Integer.toString(passLen);      otpGen=TOTPAlgorithm.generateTOTP(secretKey,Long.toHexString(localTime),passLenStr);      if (isEqual(otpGen,otp)) {        return setLoginTime(id,localTime,settings);      }      for (int i=1; i <= totpStepsInWindow; i++) {        long time1=localTime + i;        long time2=localTime - i;        otpGen=TOTPAlgorithm.generateTOTP(secretKey,Long.toHexString(time1),passLenStr);        if (isEqual(otpGen,otp)) {          return setLoginTime(id,time1,settings);        }        otpGen=TOTPAlgorithm.generateTOTP(secretKey,Long.toHexString(time2),passLenStr);        if (isEqual(otpGen,otp) && sameWindow) {          debug.error("OATH.checkOTP() : Logging in in the same window with a OTP that is older " + "than the current times OTP");          return false;        } else         if (isEqual(otpGen,otp) && !sameWindow) {          return setLoginTime(id,time2,settings);        }      }    } else {      debug.error("OATH.checkOTP() : No OTP algorithm selected");      throw new AuthLoginException(amAuthOATH,"authFailed",null);    }  } catch (  AuthLoginException e) {    throw e;  }catch (  Exception e) {    debug.error("OATH.checkOTP() : checkOTP process failed : ",e);    throw new AuthLoginException(amAuthOATH,"authFailed",null);  }  return false;}  }
class C{  public StateInteractive pull_tight(ThreadStoppable p_thread){  boolean saved_board_read_only=i_brd.set_board_read_only(true);  String start_message=resources.getString("pull_tight") + " " + resources.getString("stop_message");  i_brd.screen_messages.set_status_message(start_message);  r_brd.changed_area_clear();  for (  BrdItem curr_item : items_list) {    if (is_stop_requested(p_thread))     break;    if (curr_item.net_count() != 1)     continue;    i_brd.userPrintln("pull_tight: item " + curr_item);    if (curr_item instanceof BrdTracep) {      BrdTracep curr_trace=(BrdTracep)curr_item;      boolean something_changed=curr_trace.pull_tight(!i_brd.itera_settings.push_enabled,i_brd.itera_settings.trace_pullt_min_move,p_thread);      if (!something_changed) {        curr_trace.smoothen_end_corners_fork(!i_brd.itera_settings.push_enabled,i_brd.itera_settings.trace_pullt_min_move,p_thread);      }    } else     if (curr_item instanceof BrdAbitVia) {      BrdAbitVia a_via=(BrdAbitVia)curr_item;      r_brd.optimize_via.optimize_location(a_via,null,i_brd.itera_settings.trace_pullt_min_move,10);    }  }  String curr_message;  if (!is_stop_requested(p_thread) && i_brd.itera_settings.push_enabled) {    i_brd.userPrintln("pull_tight: optimize_changed_area ");    TimeLimitStoppable t_limit=new TimeLimitStoppable(10,p_thread);    r_brd.changed_area_optimize(NetNosList.EMPTY,i_brd.itera_settings.trace_pullt_min_move,null,t_limit);  }  if (is_stop_requested(p_thread)) {    curr_message=resources.getString("interrupted");  } else {    curr_message=resources.getString("completed");  }  String end_message=resources.getString("pull_tight") + " " + curr_message;  i_brd.screen_messages.set_status_message(end_message);  i_brd.set_board_read_only(saved_board_read_only);  actlog_start_scope(LogfileScope.OPTIMIZE_SELECTED);  i_brd.update_ratsnest();  return return_state;}  }
class C{  public void runTest() throws Throwable {  Document doc;  ProcessingInstruction badPI;  doc=(Document)load("hc_staff",true);  if (("text/html".equals(getContentType()))) {{      boolean success=false;      try {        badPI=doc.createProcessingInstruction("foo","data");      } catch (      DOMException ex) {        success=(ex.code == DOMException.NOT_SUPPORTED_ERR);      }      assertTrue("throw_NOT_SUPPORTED_ERR",success);    }  } else {{      boolean success=false;      try {        badPI=doc.createProcessingInstruction("","data");      } catch (      DOMException ex) {        success=(ex.code == DOMException.INVALID_CHARACTER_ERR);      }      assertTrue("throw_INVALID_CHARACTER_ERR",success);    }  }}  }
class C{  public NameValuePair(String __id,org.omg.CORBA.Any __value){  id=__id;  value=__value;}  }
class C{  public boolean containsValue(Object value){  return contains(value);}  }
class C{  public void addServiceListener(ConfigurationListener l,Predicate<String> servicePredicate){  serviceListeners.add(Pair.of(l,servicePredicate));}  }
class C{  public Observable(){  obs=new Vector<>();}  }
class C{  public V put(K key,V value){  final Object k=maskNull(key);  retryAfterResize:   for (; ; ) {    final Object[] tab=table;    final int len=tab.length;    int i=hash(k,len);    for (Object item; (item=tab[i]) != null; i=nextKeyIndex(i,len)) {      if (item == k) {        @SuppressWarnings("unchecked") V oldValue=(V)tab[i + 1];        tab[i + 1]=value;        return oldValue;      }    }    final int s=size + 1;    if (s + (s << 1) > len && resize(len))     continue retryAfterResize;    modCount++;    tab[i]=k;    tab[i + 1]=value;    size=s;    return null;  }}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  protected Context wrap(final Context context){  return context;}  }
class C{  public URI(String p_scheme,String p_userinfo,String p_host,int p_port,String p_path,String p_queryString,String p_fragment) throws MalformedURIException {  if (p_scheme == null || p_scheme.trim().length() == 0) {    throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_SCHEME_REQUIRED,null));  }  if (p_host == null) {    if (p_userinfo != null) {      throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_NO_USERINFO_IF_NO_HOST,null));    }    if (p_port != -1) {      throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_NO_PORT_IF_NO_HOST,null));    }  }  if (p_path != null) {    if (p_path.indexOf('?') != -1 && p_queryString != null) {      throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_NO_QUERY_STRING_IN_PATH,null));    }    if (p_path.indexOf('#') != -1 && p_fragment != null) {      throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_NO_FRAGMENT_STRING_IN_PATH,null));    }  }  setScheme(p_scheme);  setHost(p_host);  setPort(p_port);  setUserinfo(p_userinfo);  setPath(p_path);  setQueryString(p_queryString);  setFragment(p_fragment);}  }
class C{  void refreshFinish(String instanceId){  if (!isDomThread()) {    throw new WXRuntimeException("RefreshFinish operation must be done in dom thread");  }  WXDomStatement statement=mDomRegistries.get(instanceId);  if (statement == null) {    return;  }  statement.refreshFinish();}  }
class C{  public String toString(boolean includeNS,boolean declareNS,boolean includeHeader){  if (signed && (xmlString != null)) {    return xmlString;  }  StringBuffer xml=new StringBuffer(300);  if (includeHeader) {    xml.append("<?xml version=\"1.0\" encoding=\"").append(SAMLConstants.DEFAULT_ENCODING).append("\" ?>\n");  }  String prefix="";  String uri="";  if (includeNS) {    prefix=SAMLConstants.PROTOCOL_PREFIX;  }  if (declareNS) {    uri=SAMLConstants.PROTOCOL_NAMESPACE_STRING;  }  String instantString=DateUtils.toUTCDateFormat(issueInstant);  xml.append("<").append(prefix).append("Response").append(uri).append(" ResponseID=\"").append(responseID).append("\"");  if (inResponseTo != null) {    xml.append(" InResponseTo=\"").append(inResponseTo).append("\"");  }  xml.append(" MajorVersion=\"").append(majorVersion).append("\"").append(" MinorVersion=\"").append(minorVersion).append("\"").append(" IssueInstant=\"").append(instantString).append("\"");  if (recipient != null) {    xml.append(" Recipient=\"").append(XMLUtils.escapeSpecialCharacters(recipient)).append("\"");  }  xml.append(">\n");  if (signed) {    if (signatureString != null) {      xml.append(signatureString);    } else     if (signature != null) {      signatureString=XMLUtils.print(signature);      xml.append(signatureString);    }  }  xml.append(status.toString(includeNS,false));  if ((assertions != null) && (assertions != Collections.EMPTY_LIST)) {    Iterator j=assertions.iterator();    while (j.hasNext()) {      xml.append(((Assertion)j.next()).toString(true,true));    }  }  xml.append("</").append(prefix).append("Response>\n");  return xml.toString();}  }
class C{  public boolean hasSubCommand(String name){  return subCommands.containsKey(name);}  }
class C{  public boolean contains(IntegerSyntax attribute){  return contains(attribute.getValue());}  }
class C{  public CipherParameters generateDerivedParameters(int keySize){  keySize=keySize / 8;  byte[] dKey=generateDerivedKey(keySize);  return new KeyParameter(dKey,0,keySize);}  }
class C{  public Matrix subtract(Matrix arg){  Matrix rslt=new Matrix();  float[] a=vals;  float[] b=arg.vals;  float[] c=rslt.vals;  c[I11]=a[I11] - b[I11];  c[I12]=a[I12] - b[I12];  c[I13]=a[I13] - b[I13];  c[I21]=a[I21] - b[I21];  c[I22]=a[I22] - b[I22];  c[I23]=a[I23] - b[I23];  c[I31]=a[I31] - b[I31];  c[I32]=a[I32] - b[I32];  c[I33]=a[I33] - b[I33];  return rslt;}  }
class C{  @Override protected void doOptions(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  StringBuilder allow=new StringBuilder();  allow.append("GET, HEAD");  allow.append(", POST");  allow.append(", PUT");  allow.append(", DELETE");  if (req instanceof RequestFacade && ((RequestFacade)req).getAllowTrace()) {    allow.append(", TRACE");  }  allow.append(", OPTIONS");  resp.setHeader("Allow",allow.toString());}  }
class C{  XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject,boolean has_required){  this.m_has_required=has_required;  build(namespace,name,nameAlias,elements,attributes,contentHandler,classObject);  if ((null != namespace) && (namespace.equals(Constants.S_XSLNAMESPACEURL) || namespace.equals(Constants.S_BUILTIN_EXTENSIONS_URL) || namespace.equals(Constants.S_BUILTIN_OLD_EXTENSIONS_URL))) {    schema.addAvailableElement(new QName(namespace,name));    if (null != nameAlias)     schema.addAvailableElement(new QName(namespace,nameAlias));  }}  }
class C{  public static boolean isCurrentUserInRole(String authority){  SecurityContext securityContext=SecurityContextHolder.getContext();  Authentication authentication=securityContext.getAuthentication();  if (authentication != null) {    if (authentication.getPrincipal() instanceof UserDetails) {      UserDetails springSecurityUser=(UserDetails)authentication.getPrincipal();      return springSecurityUser.getAuthorities().contains(new SimpleGrantedAuthority(authority));    }  }  return false;}  }
class C{  @SuppressWarnings("unchecked") private void expungeStaleEntries(){  Entry<K> e;  while ((e=(Entry<K>)queue.poll()) != null) {    int h=e.hash;    int i=indexFor(h,table.length);    Entry<K> prev=table[i];    Entry<K> p=prev;    while (p != null) {      Entry<K> next=p.next;      if (p == e) {        if (prev == e)         table[i]=next; else         prev.next=next;        e.next=null;        e.value=0;        size--;        break;      }      prev=p;      p=next;    }  }}  }
class C{  @DataProvider(name="testSafeReadOneRSComplexProvider") private Object[][] testSafeReadOneRSComplexProvider(){  List<List<Object>> objectArrayList=new ArrayList<>();  objectArrayList=addPossibleParameters(objectArrayList,DEFAULT_GID,OTHER_GID);  objectArrayList=addPossibleParameters(objectArrayList,DEFAULT_GENID,OTHER_GENID);  objectArrayList=addPossibleParameters(objectArrayList,REPLY_OK_DS_SCENARIO,TIMEOUT_DS_SCENARIO,REPLAY_ERROR_DS_SCENARIO);  objectArrayList=addPossibleParameters(objectArrayList,DEFAULT_GID,OTHER_GID);  objectArrayList=addPossibleParameters(objectArrayList,DEFAULT_GENID,OTHER_GENID);  objectArrayList=addPossibleParameters(objectArrayList,REPLY_OK_RS_SCENARIO,TIMEOUT_RS_SCENARIO,DS_TIMEOUT_RS_SCENARIO_SAFE_READ,DS_WRONG_STATUS_RS_SCENARIO_SAFE_READ,DS_REPLAY_ERROR_RS_SCENARIO_SAFE_READ);  return toDataProvider(objectArrayList);}  }
class C{  public java.lang.String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  public void addMember(PersistentObject member) throws UMSException {  member.modify(new Attr(MEMBER_ATTR_NAME,this.getDN()),ModificationType.ADD);  this.getDN();  Principal principal=getPrincipal();  if (principal == null) {    throw new IllegalArgumentException(i18n.getString(IUMSConstants.BAD_PRINCIPAL_HDL));  }  DataLayer.getInstance().addAttributeValue(principal,member.getGuid(),MEMBER_ATTR_NAME,this.getDN());  member.getAttrSet().remove(COMPUTED_MEMBER_ATTR_NAME);}  }
class C{  public GeneralNames(GeneralName name){  this.names=new GeneralName[]{name};}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  if (changeSupport != null) {    changeSupport.removePropertyChangeListener(listener);  }}  }
class C{  protected void onDropRouter(R router){}  }
class C{  public void shutdown(){}  }
class C{  public Dimension preferredLayoutSize(Container target){  Dimension size;synchronized (this) {    checkContainer(target);    checkRequests();    size=new Dimension(xTotal.preferred,yTotal.preferred);  }  Insets insets=target.getInsets();  size.width=(int)Math.min((long)size.width + (long)insets.left + (long)insets.right,Integer.MAX_VALUE);  size.height=(int)Math.min((long)size.height + (long)insets.top + (long)insets.bottom,Integer.MAX_VALUE);  return size;}  }
class C{  void checkForEnoughResources(Operation operation) throws DirectoryException {  StorageStatus status=storage.getStorageStatus();  if (status.isUnusable() || (status.isLockedDown() && hasBypassLockdownPrivileges(operation))) {    throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,status.getReason());  }}  }
class C{  public org.w3c.dom.Element signXML(org.w3c.dom.Document doc,java.lang.String certAlias,java.lang.String algorithm,java.lang.String id,java.lang.String xpath) throws XMLSignatureException {  return sp.signXML(doc,certAlias,algorithm,id,xpath);}  }
class C{  public boolean isDataFlavorSupported(DataFlavor df){  return getDropTargetContext().isDataFlavorSupported(df);}  }
class C{  public void testPosNegFirstShorter(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  int aSign=1;  int bSign=-1;  byte rBytes[]={-1,127,-10,-57,-101,-1,-1,-2,-2,-91,-2,31,-1,-11,125,-22,-83,30,95};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  private boolean isValidChar(String value){  if (inValidChars.contains(value)) {    return false;  } else {    return true;  }}  }
class C{  public void write(char chars[],int start,int length) throws java.io.IOException {  int n=length + start;  for (int i=start; i < n; i++) {    m_os.write(chars[i]);  }}  }
class C{  public void writeUint32(long n){  check(4);  buffer[write_pos++]=(byte)((n & 0x00ff000000) >> 24);  buffer[write_pos++]=(byte)((n & 0x00ff0000) >> 16);  buffer[write_pos++]=(byte)((n & 0x00ff00) >> 8);  buffer[write_pos++]=(byte)(n & 0x00ff);}  }
class C{  public String toXMLString() throws FSMsgException {  return this.toXMLString(true,false);}  }
class C{  public static void d(String tag,String msg,Object... args){  if (sLevel > LEVEL_DEBUG) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.d(tag,msg);}  }
class C{  @Inject public OpenIDConnectEndSession(final OpenIDConnectProvider openIDConnectProvider){  this.openIDConnectProvider=openIDConnectProvider;}  }
class C{  public void layout(FlowView fv){  super.layout(fv);}  }
class C{  public void auditLogout(SSOToken token){  String realm=getRealmFromToken(token);  if (eventPublisher.isAuditing(realm,AUTHENTICATION_TOPIC,AM_LOGOUT)) {    String principalName;    try {      Principal principal=token == null ? null : token.getPrincipal();      principalName=principal == null ? null : DNUtils.DNtoName(principal.getName());    } catch (    SSOException e) {      principalName=null;    }    AuthenticationAuditEntry entryDetail=new AuthenticationAuditEntry();    entryDetail.setModuleId(getSSOTokenProperty(token,AUTH_TYPE));    String host=getSSOTokenProperty(token,HOST);    if (isNotEmpty(host)) {      entryDetail.addInfo(IP_ADDRESS,host);    }    String trackingId=getTrackingIdFromSSOToken(token);    String userId=AMAuditEventBuilderUtils.getUserId(token);    AMAuthenticationAuditEventBuilder builder=eventFactory.authenticationEvent(realm).transactionId(getTransactionIdValue()).component(AUTHENTICATION).eventName(AM_LOGOUT).result(SUCCESSFUL).entry(entryDetail).trackingId(trackingId == null ? "" : trackingId).userId(userId == null ? "" : userId).principal(principalName);    eventPublisher.tryPublish(AUTHENTICATION_TOPIC,builder.toEvent());  }}  }
class C{  public void paintCheckBoxMenuItemBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  final long determinant(PlaDirection p_other){  return dir_x * p_other.dir_y - dir_y * p_other.dir_x;}  }
class C{  protected LayoutManager createLayout(){  return getHandler();}  }
class C{  public SAXException(String message){  super(message);  this.exception=null;}  }
class C{  @Override public MapboxDirections build() throws ServicesException {  validateAccessToken(accessToken);  if (coordinates == null || coordinates.size() < 2) {    throw new ServicesException("You should provide at least two coordinates (from/to).");  }  if (radiuses != null && radiuses.length != coordinates.size()) {    throw new ServicesException("There must be as many radiuses as there are coordinates.");  }  return new MapboxDirections(this);}  }
class C{  public boolean isFlying(){  return isFlying;}  }
class C{  public W3CEndpointReferenceBuilder(){  referenceParameters=new ArrayList<Element>();  metadata=new ArrayList<Element>();  attributes=new HashMap<QName,String>();  elements=new ArrayList<Element>();}  }
class C{  public RDN(Collection<AVA> avas){  Reject.ifNull(avas);  this.avas=validateAvas(avas.toArray(new AVA[avas.size()]));}  }
class C{  private static void updateEntry(final Connection connection,final String name,final String attributeDescription) throws LdapException {  ModifyRequest request=Requests.newModifyRequest(name).addModification(ModificationType.REPLACE,attributeDescription,"This is a String.");  connection.modify(request);}  }
class C{  public String toXML(){  StringBuilder xml=new StringBuilder();  if (parentNode == null) {    xml.append(XML_DIRECTIVES).append(XML_ROOT_START_TAG).append("\n");  }  Object[] dn={distinguishedName};  xml.append(MessageFormat.format(XML_NODE_START_TAG,dn)).append("\n");  for (Iterator i=children.iterator(); i.hasNext(); ) {    SMSFlatFileTreeNode c=(SMSFlatFileTreeNode)i.next();    xml.append(c.toXML());  }  xml.append(XML_NODE_END_TAG).append("\n");  if (parentNode == null) {    xml.append(XML_ROOT_END_TAG).append("\n");  }  return xml.toString();}  }
class C{  public void replaceResponseProvider(String responseProviderName,ResponseProvider responseProvider) throws NameNotFoundException {  if (!providers.containsKey(responseProviderName)) {    String[] objs={responseProviderName};    throw (new NameNotFoundException(ResBundleUtils.rbName,"name_not_present",objs,responseProviderName,PolicyException.RESPONSE_PROVIDER_COLLECTION));  }  providers.put(responseProviderName,responseProvider);}  }
class C{  public void finishedPaintingChildren(JSplitPane a,Graphics b){  for (int i=0; i < uis.size(); i++) {    ((SplitPaneUI)(uis.elementAt(i))).finishedPaintingChildren(a,b);  }}  }
class C{  public static DigestMD5SASLBindRequest newDigestMD5SASLBindRequest(final String authenticationID,final byte[] password){  return new DigestMD5SASLBindRequestImpl(authenticationID,password);}  }
class C{  @Override public void refreshSession(SSOToken token) throws SSOException {  refreshSession(token,true);}  }
class C{  public String toString(){  return ("UserPrincipal:  " + name);}  }
class C{  static public void assertEquals(String message,Object expected,Object actual){  if (expected == null && actual == null)   return;  if (expected != null && expected.equals(actual))   return;  failNotEquals(message,expected,actual);}  }
class C{  private void createExtendedObject(String realm,String fedId,String location,String role,Map keys) throws WSFederationMetaException, JAXBException, AMConsoleException {  try {    ObjectFactory objFactory=new ObjectFactory();    WSFederationMetaManager metaManager=getWSFederationMetaManager();    FederationElement edes=metaManager.getEntityDescriptor(realm,fedId);    if (edes == null) {      if (debug.warningEnabled()) {        debug.warning("WSFedPropertiesModelImpl.createExtendedObject: " + "No such entity: " + fedId);      }      String[] data={realm,fedId};      throw new WSFederationMetaException("fedId_invalid",data);    }    FederationConfigElement eConfig=metaManager.getEntityConfig(realm,fedId);    if (eConfig == null) {      BaseConfigType bctype=null;      FederationConfigElement ele=objFactory.createFederationConfigElement();      ele.setFederationID(fedId);      if (location.equals("remote")) {        ele.setHosted(false);      }      List ll=ele.getIDPSSOConfigOrSPSSOConfig();      if (isDualRole(edes)) {        BaseConfigType bctype_idp=null;        BaseConfigType bctype_sp=null;        bctype_idp=objFactory.createIDPSSOConfigElement();        bctype_idp=createAttributeElement(keys,bctype_idp);        bctype_sp=objFactory.createSPSSOConfigElement();        bctype_sp=createAttributeElement(keys,bctype_sp);        ll.add(bctype_idp);        ll.add(bctype_sp);      } else       if (role.equals(IDENTITY_PROVIDER)) {        bctype=objFactory.createIDPSSOConfigElement();        bctype=createAttributeElement(keys,bctype);        ll.add(bctype);      } else       if (role.equals(SERVICE_PROVIDER)) {        bctype=objFactory.createSPSSOConfigElement();        bctype=createAttributeElement(keys,bctype);        ll.add(bctype);      }      metaManager.setEntityConfig(realm,ele);    }  } catch (  JAXBException e) {    debug.warning("WSFedPropertiesModelImpl.createExtendedObject",e);    throw new AMConsoleException(getErrorString(e));  }catch (  WSFederationMetaException e) {    debug.warning("WSFedPropertiesModelImpl.createExtendedObject",e);    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  boolean hasActionListener(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ActionListener.class) {      return true;    }  }  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node oldChild;  Node newChild;  Node replacedNode;  String childName;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=((Element)employeeNode).getElementsByTagName("em");  oldChild=childList.item(0);  newChild=doc.createElement("br");  replacedNode=employeeNode.replaceChild(newChild,oldChild);  childName=replacedNode.getNodeName();  assertEqualsAutoCase("element","replacedNodeName","em",childName);}  }
class C{  private PlaSegmentFloat segment_projection(PlaSegmentFloat p_from_segment,PlaSegmentFloat p_to_segment){  PlaSegmentFloat check_segment=p_from_segment.adjust_direction(p_to_segment);  PlaSegmentFloat first_projection=p_to_segment.segment_projection(check_segment);  PlaSegmentFloat second_projection=p_to_segment.segment_projection_2(check_segment);  PlaSegmentFloat result;  if (first_projection != null && second_projection != null) {    PlaPointFloat result_a;    if (first_projection.point_a == p_to_segment.point_a || second_projection.point_a == p_to_segment.point_a) {      result_a=p_to_segment.point_a;    } else     if (first_projection.point_a.distance_square(p_to_segment.point_a) <= second_projection.point_a.distance_square(p_to_segment.point_a)) {      result_a=first_projection.point_a;    } else {      result_a=second_projection.point_a;    }    PlaPointFloat result_b;    if (first_projection.point_b == p_to_segment.point_b || second_projection.point_b == p_to_segment.point_b) {      result_b=p_to_segment.point_b;    } else     if (first_projection.point_b.distance_square(p_to_segment.point_b) <= second_projection.point_b.distance_square(p_to_segment.point_b)) {      result_b=first_projection.point_b;    } else {      result_b=second_projection.point_b;    }    result=new PlaSegmentFloat(result_a,result_b);  } else   if (first_projection != null) {    result=first_projection;  } else {    result=second_projection;  }  return result;}  }
class C{  public com.sun.identity.liberty.ws.authnsvc.jaxb.SASLResponseElement createSASLResponseElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.authnsvc.jaxb.impl.SASLResponseElementImpl();}  }
class C{  private static int bufferToValue(byte[] buffer){  return ((buffer[0] & 0xff) << 21) + ((buffer[1] & 0xff) << 14) + ((buffer[2] & 0xff) << 7)+ ((buffer[3]) & 0xff);}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    Request request=requestEvent.getRequest();    SipProvider sipProvider=(SipProvider)requestEvent.getSource();    ServerTransaction st=sipProvider.getNewServerTransaction(request);    if (transactionIDs.containsKey(st.getBranchId())) {      System.out.println("OOOPS -- seen this guy before!! This must be a late guy " + st.getBranchId() + " st = "+ transactionIDs.get(st.getBranchId()));      return;    } else {      transactionIDs.put(st.getBranchId(),st);    }    TTask ttask=new TTask(requestEvent,st);    int ttime;    if ((numInvite % 4) == 0)     ttime=5000; else     if ((numInvite % 4) == 1)     ttime=1000; else     ttime=300;    numInvite++;    new Timer().schedule(ttask,ttime);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public void displayProgress(ProgressDescriptor descriptor){  for (  WizardStep s : hmPanels.keySet()) {    getPanel(s).displayProgress(descriptor);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.utility.ReceivedElement createReceivedElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.utility.impl.ReceivedElementImpl();}  }
class C{  public void testSetBitNegativeInside5(){  String as="-18446744073709551615";  int number=0;  BigInteger aNumber=new BigInteger(as);  BigInteger result=aNumber.setBit(number);  assertEquals(as,result.toString());}  }
class C{  public ResourceRef(String resourceClass,String description,String scope,String auth,boolean singleton,String factory,String factoryLocation){  super(resourceClass,factory,factoryLocation);  StringRefAddr refAddr=null;  if (description != null) {    refAddr=new StringRefAddr(DESCRIPTION,description);    add(refAddr);  }  if (scope != null) {    refAddr=new StringRefAddr(SCOPE,scope);    add(refAddr);  }  if (auth != null) {    refAddr=new StringRefAddr(AUTH,auth);    add(refAddr);  }  refAddr=new StringRefAddr(SINGLETON,Boolean.toString(singleton));  add(refAddr);}  }
class C{  public EOFException(){  super();}  }
class C{  protected void createTabModel(){  if (tabModel == null) {    String realmName=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_PROFILE);    if (realmName != null) {      AMViewConfig amconfig=AMViewConfig.getInstance();      tabModel=amconfig.getTabsModel(realmName,getRequestContext().getRequest());      registerChild(TAB_COMMON,CCTabs.class);    }  }}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy,int duration){  mMode=SCROLL_MODE;  mScrollerX.startScroll(startX,dx,duration);  mScrollerY.startScroll(startY,dy,duration);}  }
class C{  public static double acos(double a){  return StrictMath.acos(a);}  }
class C{  public com.sun.identity.saml2.jaxb.entityconfig.AffiliationConfigElement createAffiliationConfigElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.entityconfig.impl.AffiliationConfigElementImpl();}  }
class C{  public StringBuilder encodeBody(StringBuilder buffer){  this.parameters.setSeparator(Separators.COMMA);  buffer=buffer.append(this.scheme).append(SP);  return parameters.encode(buffer);}  }
class C{  public BootstrapData(String basedir) throws IOException {  this.basedir=basedir;  String bootstrapFile=basedir + "/" + BOOTSTRAP;  if (new File(bootstrapFile).exists()) {    readFile(bootstrapFile);  } else {    readBootJson(basedir);  }}  }
class C{  protected void BuildIndexHeader(int Count,int Offsize,int First){  OutputList.addLast(new UInt16Item((char)Count));  OutputList.addLast(new UInt8Item((char)Offsize));switch (Offsize) {case 1:    OutputList.addLast(new UInt8Item((char)First));  break;case 2:OutputList.addLast(new UInt16Item((char)First));break;case 3:OutputList.addLast(new UInt24Item((char)First));break;case 4:OutputList.addLast(new UInt32Item((char)First));break;default :break;}}  }
class C{  @Override protected void makeFinished(){  byte[] verify_data;  if (serverHello.server_version[1] == 1) {    verify_data=new byte[12];    computerVerifyDataTLS("client finished",verify_data);  } else {    verify_data=new byte[36];    computerVerifyDataSSLv3(SSLv3Constants.client,verify_data);  }  clientFinished=new Finished(verify_data);  send(clientFinished);  if (isResuming) {    session.lastAccessedTime=System.currentTimeMillis();    status=FINISHED;  } else {    if (serverHello.server_version[1] == 1) {      computerReferenceVerifyDataTLS("server finished");    } else {      computerReferenceVerifyDataSSLv3(SSLv3Constants.server);    }    status=NEED_UNWRAP;  }}  }
class C{  public org.omg.CORBA.TypeCode _type(){  return ORB.init().get_primitive_tc(TCKind.tk_fixed);}  }
class C{  public static Date adddDaysToCurrentDate(int numberOfDays){  Date date=new Date();  Calendar instance=Calendar.getInstance();  instance.setTime(date);  instance.add(Calendar.DATE,numberOfDays);  return instance.getTime();}  }
class C{  public int length(){  return m_str.length();}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entityList;  Entity entityNode;  String entityName;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  entityList=docType.getEntities();  assertNotNull("entitiesNotNull",entityList);  entityNode=(Entity)entityList.getNamedItem("ent1");  entityName=entityNode.getNodeName();  assertEquals("entityGetEntityNameAssert","ent1",entityName);}  }
class C{  public static boolean isTeslaConsumer(ICapabilityProvider provider,EnumFacing side){  return provider.hasCapability(TeslaCapabilities.CAPABILITY_CONSUMER,side);}  }
class C{  public Modification elementAt(int index){  return modifications.get(index);}  }
class C{  public BackendConfigManager(ServerContext serverContext){  this.serverContext=serverContext;}  }
class C{  public static long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery,com.liferay.portal.kernel.dao.orm.Projection projection){  return getService().dynamicQueryCount(dynamicQuery,projection);}  }
class C{  public ExpandedDirectoryRemovalListener(File toDelete,String newDocBase){  this.toDelete=toDelete;  this.newDocBase=newDocBase;}  }
class C{  public boolean isMember(SSOToken token) throws SSOException, PolicyException {  String userLocalDN=token.getPrincipal().getName();  if (debug.messageEnabled()) {    debug.message("Organization.isMember(): user local DN is " + userLocalDN);  }  DN userDN=null;  boolean found=false;  if (selectedRFCOrgDNs.size() > 0) {    String tokenID=token.getTokenID().toString();    Iterator orgIter=selectedRFCOrgDNs.iterator();    while (orgIter.hasNext()) {      Boolean matchFound=null;      String valueDN=(String)orgIter.next();      if ((matchFound=SubjectEvaluationCache.isMember(tokenID,ldapServer,valueDN)) != null) {        if (debug.messageEnabled()) {          debug.message("Organization.isMember():Got membership " + "from cache of " + userLocalDN + " in org "+ valueDN+ " :"+ matchFound.booleanValue());        }        boolean result=matchFound.booleanValue();        if (result) {          return result;        } else {          continue;        }      }      if (debug.messageEnabled()) {        debug.message("Organization:isMember():entry for " + valueDN + " not in subject evaluation cache, fetching from "+ "directory server.");      }      if (userDN == null) {        userDN=getUserDN(token);        if (userDN == null) {          if (debug.messageEnabled()) {            debug.message("Organization.isMember(): User " + userLocalDN + " is not found in the directory");          }          return false;        }      }      if (!PolicyEvaluator.ssoListenerRegistry.containsKey(tokenID)) {        try {          token.addSSOTokenListener(PolicyEvaluator.ssoListener);          PolicyEvaluator.ssoListenerRegistry.put(tokenID,PolicyEvaluator.ssoListener);          if (debug.messageEnabled()) {            debug.message("Organization.isMember(): sso listener added .\n");          }        } catch (        SSOTokenListenersUnsupportedException ex) {          debug.message("Organization.isMember(): could not add sso listener: {}",ex.getMessage());        }      }      if (isMemberOfOrg(valueDN,userDN,tokenID)) {        if (debug.messageEnabled()) {          debug.message("Organization.isMember(): User " + userDN.toString() + " is a member of the "+ "Organization object");        }        found=true;        break;      }    }  }  if (debug.messageEnabled()) {    if (found) {      debug.message("Organization.isMember(): User " + userLocalDN + " is a member of this Organization object");    } else {      debug.message("Organization.isMember(): User " + userLocalDN + " is not a member of this Organization object");    }  }  return found;}  }
class C{  public AttributeStruct(String str){  StringTokenizer st=new StringTokenizer(str,"@");  if (st.countTokens() == 3) {    while (st.hasMoreTokens()) {      serviceName=st.nextToken().trim();      revisionNumber=Integer.parseInt(st.nextToken());      attributeName=st.nextToken().trim();    }  }}  }
class C{  public static Node selectSingleNode(Node contextNode,String str) throws TransformerException {  return selectSingleNode(contextNode,str,contextNode);}  }
class C{  public PluginResult.PostOperation invokePostOperationAddPlugins(PostOperationAddOperation addOperation){  PluginResult.PostOperation result=null;  PluginResult.PostOperation finalResult=null;  ArrayList<DirectoryServerPlugin> skippedPlugins=skippedPreOperationPlugins.remove(addOperation);  for (  DirectoryServerPlugin p : postOperationAddPlugins) {    if (isInternalOperation(addOperation,p) || isSkipped(skippedPlugins,p)) {      continue;    }    try {      result=p.doPostOperation(addOperation);    } catch (    Exception e) {      logException(addOperation,p,e,ERR_PLUGIN_POST_OPERATION_PLUGIN_EXCEPTION);    }    if (result == null) {      logNullResult(addOperation,p,ERR_PLUGIN_POST_OPERATION_PLUGIN_RETURNED_NULL);    } else     if (!result.continueProcessing()) {      finalResult=result;    }  }  if (result == null) {    finalResult=PluginResult.PostOperation.continueOperationProcessing();  } else   if (finalResult == null) {    finalResult=result;  }  return finalResult;}  }
class C{  public static long decodeGeneralizedTimeValue(ByteSequence value) throws DirectoryException {  int year=0;  int month=0;  int day=0;  int hour=0;  int minute=0;  int second=0;  String valueString=value.toString().toUpperCase();  int length=valueString.length();  if (length < 11) {    LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_TOO_SHORT.get(valueString);    throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);  }  for (int i=0; i < 4; i++) {switch (valueString.charAt(i)) {case '0':      year=(year * 10);    break;case '1':  year=(year * 10) + 1;break;case '2':year=(year * 10) + 2;break;case '3':year=(year * 10) + 3;break;case '4':year=(year * 10) + 4;break;case '5':year=(year * 10) + 5;break;case '6':year=(year * 10) + 6;break;case '7':year=(year * 10) + 7;break;case '8':year=(year * 10) + 8;break;case '9':year=(year * 10) + 9;break;default :LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_YEAR.get(valueString,valueString.charAt(i));throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}}char m1=valueString.charAt(4);char m2=valueString.charAt(5);switch (m1) {case '0':switch (m2) {case '1':month=Calendar.JANUARY;break;case '2':month=Calendar.FEBRUARY;break;case '3':month=Calendar.MARCH;break;case '4':month=Calendar.APRIL;break;case '5':month=Calendar.MAY;break;case '6':month=Calendar.JUNE;break;case '7':month=Calendar.JULY;break;case '8':month=Calendar.AUGUST;break;case '9':month=Calendar.SEPTEMBER;break;default :LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_MONTH.get(valueString,valueString.substring(4,6));throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}break;case '1':switch (m2) {case '0':month=Calendar.OCTOBER;break;case '1':month=Calendar.NOVEMBER;break;case '2':month=Calendar.DECEMBER;break;default :LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_MONTH.get(valueString,valueString.substring(4,6));throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}break;default :LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_MONTH.get(valueString,valueString.substring(4,6));throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}char d1=valueString.charAt(6);char d2=valueString.charAt(7);switch (d1) {case '0':switch (d2) {case '1':day=1;break;case '2':day=2;break;case '3':day=3;break;case '4':day=4;break;case '5':day=5;break;case '6':day=6;break;case '7':day=7;break;case '8':day=8;break;case '9':day=9;break;default :LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_DAY.get(valueString,valueString.substring(6,8));throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}break;case '1':switch (d2) {case '0':day=10;break;case '1':day=11;break;case '2':day=12;break;case '3':day=13;break;case '4':day=14;break;case '5':day=15;break;case '6':day=16;break;case '7':day=17;break;case '8':day=18;break;case '9':day=19;break;default :LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_DAY.get(valueString,valueString.substring(6,8));throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}break;case '2':switch (d2) {case '0':day=20;break;case '1':day=21;break;case '2':day=22;break;case '3':day=23;break;case '4':day=24;break;case '5':day=25;break;case '6':day=26;break;case '7':day=27;break;case '8':day=28;break;case '9':day=29;break;default :LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_DAY.get(valueString,valueString.substring(6,8));throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}break;case '3':switch (d2) {case '0':day=30;break;case '1':day=31;break;default :LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_DAY.get(valueString,valueString.substring(6,8));throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}break;default :LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_DAY.get(valueString,valueString.substring(6,8));throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}char h1=valueString.charAt(8);char h2=valueString.charAt(9);switch (h1) {case '0':switch (h2) {case '0':hour=0;break;case '1':hour=1;break;case '2':hour=2;break;case '3':hour=3;break;case '4':hour=4;break;case '5':hour=5;break;case '6':hour=6;break;case '7':hour=7;break;case '8':hour=8;break;case '9':hour=9;break;default :LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_HOUR.get(valueString,valueString.substring(8,10));throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}break;case '1':switch (h2) {case '0':hour=10;break;case '1':hour=11;break;case '2':hour=12;break;case '3':hour=13;break;case '4':hour=14;break;case '5':hour=15;break;case '6':hour=16;break;case '7':hour=17;break;case '8':hour=18;break;case '9':hour=19;break;default :LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_HOUR.get(valueString,valueString.substring(8,10));throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}break;case '2':switch (h2) {case '0':hour=20;break;case '1':hour=21;break;case '2':hour=22;break;case '3':hour=23;break;default :LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_HOUR.get(valueString,valueString.substring(8,10));throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}break;default :LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_HOUR.get(valueString,valueString.substring(8,10));throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}m1=valueString.charAt(10);switch (m1) {case '0':case '1':case '2':case '3':case '4':case '5':if (length < 13) {LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_CHAR.get(valueString,m1,10);throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}minute=10 * (m1 - '0');switch (valueString.charAt(11)) {case '0':break;case '1':minute+=1;break;case '2':minute+=2;break;case '3':minute+=3;break;case '4':minute+=4;break;case '5':minute+=5;break;case '6':minute+=6;break;case '7':minute+=7;break;case '8':minute+=8;break;case '9':minute+=9;break;default :LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_MINUTE.get(valueString,valueString.substring(10,12));throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}break;case 'Z':if (length == 11) {try {GregorianCalendar calendar=new GregorianCalendar();calendar.setLenient(false);calendar.setTimeZone(TIME_ZONE_UTC_OBJ);calendar.set(year,month,day,hour,minute,second);calendar.set(Calendar.MILLISECOND,0);return calendar.getTimeInMillis();} catch (Exception e) {logger.traceException(e);LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_ILLEGAL_TIME.get(valueString,e);throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message,e);}} else {LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_CHAR.get(valueString,m1,10);throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}case '+':case '-':if (length == 13 || length == 15) {try {GregorianCalendar calendar=new GregorianCalendar();calendar.setLenient(false);calendar.setTimeZone(getTimeZoneForOffset(valueString,10));calendar.set(year,month,day,hour,minute,second);calendar.set(Calendar.MILLISECOND,0);return calendar.getTimeInMillis();} catch (Exception e) {logger.traceException(e);LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_ILLEGAL_TIME.get(valueString,e);throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message,e);}} else {LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_CHAR.get(valueString,m1,10);throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}case '.':case ',':return finishDecodingFraction(valueString,11,year,month,day,hour,minute,second,3600000);default :LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_CHAR.get(valueString,m1,10);throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}char s1=valueString.charAt(12);switch (s1) {case '0':case '1':case '2':case '3':case '4':case '5':if (length < 15) {LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_CHAR.get(valueString,s1,12);throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}second=10 * (s1 - '0');switch (valueString.charAt(13)) {case '0':break;case '1':second+=1;break;case '2':second+=2;break;case '3':second+=3;break;case '4':second+=4;break;case '5':second+=5;break;case '6':second+=6;break;case '7':second+=7;break;case '8':second+=8;break;case '9':second+=9;break;default :LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_MINUTE.get(valueString,valueString.substring(12,14));throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}break;case '6':if (length < 15) {LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_CHAR.get(valueString,s1,12);throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}if (valueString.charAt(13) != '0') {LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_SECOND.get(valueString,valueString.substring(12,14));throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}second=60;break;case 'Z':if (length == 13) {try {GregorianCalendar calendar=new GregorianCalendar();calendar.setLenient(false);calendar.setTimeZone(TIME_ZONE_UTC_OBJ);calendar.set(year,month,day,hour,minute,second);calendar.set(Calendar.MILLISECOND,0);return calendar.getTimeInMillis();} catch (Exception e) {logger.traceException(e);LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_ILLEGAL_TIME.get(valueString,e);throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message,e);}} else {LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_CHAR.get(valueString,s1,12);throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}case '+':case '-':if (length == 15 || length == 17) {try {GregorianCalendar calendar=new GregorianCalendar();calendar.setLenient(false);calendar.setTimeZone(getTimeZoneForOffset(valueString,12));calendar.set(year,month,day,hour,minute,second);calendar.set(Calendar.MILLISECOND,0);return calendar.getTimeInMillis();} catch (Exception e) {logger.traceException(e);LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_ILLEGAL_TIME.get(valueString,e);throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message,e);}} else {LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_CHAR.get(valueString,s1,12);throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}case '.':case ',':return finishDecodingFraction(valueString,13,year,month,day,hour,minute,second,60000);default :LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_CHAR.get(valueString,s1,12);throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}switch (valueString.charAt(14)) {case '.':case ',':return finishDecodingFraction(valueString,15,year,month,day,hour,minute,second,1000);case 'Z':if (length == 15) {try {GregorianCalendar calendar=new GregorianCalendar();calendar.setLenient(false);calendar.setTimeZone(TIME_ZONE_UTC_OBJ);calendar.set(year,month,day,hour,minute,second);calendar.set(Calendar.MILLISECOND,0);return calendar.getTimeInMillis();} catch (Exception e) {logger.traceException(e);LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_ILLEGAL_TIME.get(valueString,e);throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message,e);}} else {LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_CHAR.get(valueString,valueString.charAt(14),14);throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}case '+':case '-':if (length == 17 || length == 19) {try {GregorianCalendar calendar=new GregorianCalendar();calendar.setLenient(false);calendar.setTimeZone(getTimeZoneForOffset(valueString,14));calendar.set(year,month,day,hour,minute,second);calendar.set(Calendar.MILLISECOND,0);return calendar.getTimeInMillis();} catch (Exception e) {logger.traceException(e);LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_ILLEGAL_TIME.get(valueString,e);throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message,e);}} else {LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_CHAR.get(valueString,valueString.charAt(14),14);throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}default :LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_INVALID_CHAR.get(valueString,valueString.charAt(14),14);throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append(this);}  }
class C{  void queueIsEmpty(){  for (Node p=head; p != null; p=p.next) {    Itr it=p.get();    if (it != null) {      p.clear();      it.shutdown();    }  }  head=null;  itrs=null;}  }
class C{  public Builder(AbstractManagedObjectDefinition<?,?> pd,String name,AbstractManagedObjectDefinition<C,S> cd){  super(pd,name,cd);}  }
class C{  private boolean validateProperties() throws PolicyException {  if ((properties == null) || (properties.keySet() == null)) {    throw new PolicyException(ResBundleUtils.rbName,"properties_can_not_be_null_or_empty",null,null);  }  if (DEBUG.messageEnabled()) {    DEBUG.message("AuthLevelCondition.setProperties()," + "properties=" + properties);  }  Set keySet=properties.keySet();  if (!keySet.contains(AUTH_LEVEL)) {    String args[]={AUTH_LEVEL};    throw new PolicyException(ResBundleUtils.rbName,"property_value_not_defined",args,null);  }  Iterator keys=keySet.iterator();  while (keys.hasNext()) {    String key=(String)keys.next();    if (!AUTH_LEVEL.equals(key)) {      String args[]={key};      throw new PolicyException(ResBundleUtils.rbName,"attempt_to_set_invalid_property ",args,null);    }  }  Set authLevelSet=(Set)properties.get(AUTH_LEVEL);  if (authLevelSet != null) {    validateAuthLevels(authLevelSet);  }  if (DEBUG.messageEnabled()) {    DEBUG.message("AuthLevelCondition.setProperties()," + "authLevel=" + authLevel + ",authRealm="+ authRealm+ ",authLevelInt="+ authLevelInt);  }  return true;}  }
class C{  private boolean addRowInDsIntTable(){  return false;}  }
class C{  public void updateReadRecordCountTime(long time){  if (time > 0 && time < readRecordTimeMin) {    readRecordTimeMin=time;  }  if (time > readRecordTimeMax) {    readRecordTimeMax=time;  }  readRecordCumulativeCount+=time;  readRecordTimeAverage=readRecordCumulativeCount / totalReadRecordCount;}  }
class C{  public BaseID createBaseID(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.BASEID);  if (obj == null) {    return new BaseIDImpl();  } else {    return (BaseID)obj;  }}  }
class C{  public static void ping(ConnectionWrapper connWrapper){  SearchRequest request=newSearchRequest("",BASE_OBJECT,"objectClass=*",NO_ATTRIBUTES).setSizeLimit(0).setTimeLimit(0).setDereferenceAliasesPolicy(NEVER);  connWrapper.getConnection().search(request).close();}  }
class C{  public Set createAssignableDynamicGroups(Set groupNames) throws AMException, SSOException {  Iterator iter=groupNames.iterator();  Set groups=new HashSet();  while (iter.hasNext()) {    String groupDN=AMNamingAttrManager.getNamingAttr(GROUP) + "=" + ((String)iter.next())+ ","+ super.entryDN;    AMAssignableDynamicGroupImpl groupImpl=new AMAssignableDynamicGroupImpl(super.token,groupDN);    groupImpl.create();    groups.add(groupImpl);  }  return groups;}  }
class C{  static void processPolicyNotification(PolicyNotification pn) throws PolicyEvaluationException {  if (pn != null) {    if (debug.messageEnabled()) {      debug.message("ResourceResultCache:processPolicyNotification():" + pn);    }    ResourceResultCache cache=ResourceResultCache.getInstance();    PolicyChangeNotification pcn=pn.getPolicyChangeNotification();    String serviceName=pcn.getServiceName();    if (serviceName != null) {      if (cache.remotePolicyListeners.contains(serviceName)) {        Set affectedResourceNames=pcn.getResourceNames();        if (debug.messageEnabled()) {          debug.message("ResourceResultCache:" + "processPolicyNotification():" + "serviceName=" + serviceName + ":affectedResourceNames="+ affectedResourceNames+ ":clearing cache for affected "+ "resource names");        }        clearCacheForResourceNames(serviceName,affectedResourceNames);      } else {        if (debug.messageEnabled()) {          debug.message("ResourceResultCache:" + "processPolicyNotification():" + "serviceName not registered"+ ":no resource names cleared from cache");        }      }    } else {      if (debug.messageEnabled()) {        debug.message("ResourceResultCache:" + "processPolicyNotification():" + "serviceName is null"+ ":no resource names cleared from cache");      }    }  } else {    debug.error("ResourceResultCache.processPolicyNotification()" + "PolicyNotification is null");  }}  }
class C{  public ObservableString(){  string="";}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  ObjectInputStream.GetField fields=stream.readFields();  this.symbols=(DecimalFormatSymbols)fields.get("symbols",null);  initNative("");  ndf.setPositivePrefix((String)fields.get("positivePrefix",""));  ndf.setPositiveSuffix((String)fields.get("positiveSuffix",""));  ndf.setNegativePrefix((String)fields.get("negativePrefix","-"));  ndf.setNegativeSuffix((String)fields.get("negativeSuffix",""));  ndf.setMultiplier(fields.get("multiplier",1));  ndf.setGroupingSize(fields.get("groupingSize",(byte)3));  ndf.setGroupingUsed(fields.get("groupingUsed",true));  ndf.setDecimalSeparatorAlwaysShown(fields.get("decimalSeparatorAlwaysShown",false));  setRoundingMode((RoundingMode)fields.get("roundingMode",RoundingMode.HALF_EVEN));  final int maximumIntegerDigits=fields.get("maximumIntegerDigits",309);  final int minimumIntegerDigits=fields.get("minimumIntegerDigits",309);  final int maximumFractionDigits=fields.get("maximumFractionDigits",340);  final int minimumFractionDigits=fields.get("minimumFractionDigits",340);  ndf.setMaximumIntegerDigits(maximumIntegerDigits);  super.setMaximumIntegerDigits(ndf.getMaximumIntegerDigits());  setMinimumIntegerDigits(minimumIntegerDigits);  setMinimumFractionDigits(minimumFractionDigits);  setMaximumFractionDigits(maximumFractionDigits);  setParseBigDecimal(fields.get("parseBigDecimal",false));  if (fields.get("serialVersionOnStream",0) < 3) {    setMaximumIntegerDigits(super.getMaximumIntegerDigits());    setMinimumIntegerDigits(super.getMinimumIntegerDigits());    setMaximumFractionDigits(super.getMaximumFractionDigits());    setMinimumFractionDigits(super.getMinimumFractionDigits());  }}  }
class C{  public void writeExtendedRequest(final int messageID,final ExtendedRequest<?> request) throws IOException {  logger.trace("ENCODE LDAP EXTENDED REQUEST(messageID=%d, request=%s)",messageID,request);  writeMessageHeader(messageID);{    writer.writeStartSequence(LDAP.OP_TYPE_EXTENDED_REQUEST);{      writer.writeOctetString(LDAP.TYPE_EXTENDED_REQUEST_OID,request.getOID());      final ByteString requestValue=request.getValue();      if (requestValue != null) {        writer.writeOctetString(LDAP.TYPE_EXTENDED_REQUEST_VALUE,requestValue);      }    }    writer.writeEndSequence();  }  writeMessageFooter(request.getControls());}  }
class C{  protected Logger(String name,String resourceBundleName){  super(name,resourceBundleName);}  }
class C{  public boolean isPolicyModified(){  return isModified;}  }
class C{  protected final void openSession(){  openSessionForRead(null,null);}  }
class C{  private void updateTexts(DocumentEvent e){  Document doc=e.getDocument();  if (doc == projectNameTextField.getDocument() || doc == projectLocationTextField.getDocument()) {    String projectName=projectNameTextField.getText();    String projectFolder=projectLocationTextField.getText();    createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);  }  panel.fireChangeEvent();}  }
class C{  public StringBuilder encodeBody(StringBuilder encoding){  encoding.append(dispositionType);  if (!this.parameters.isEmpty()) {    encoding.append(SEMICOLON).append(parameters.encode());  }  return encoding;}  }
class C{  public OrganizationAlreadyExistsException(String rbName,String errCode,Object[] args){  super(rbName,errCode,args);}  }
class C{  public void log(Level logLevel,String msg){  if (!internalIsLoggable(logLevel)) {    return;  }  dalvikLogHandler.publish(this,androidTag,logLevel,msg);}  }
class C{  void add(Thread t){synchronized (this) {    if (destroyed) {      throw new IllegalThreadStateException();    }    if (threads == null) {      threads=new Thread[4];    } else     if (nthreads == threads.length) {      threads=Arrays.copyOf(threads,nthreads * 2);    }    threads[nthreads]=t;    nthreads++;    nUnstartedThreads--;  }}  }
class C{  public DomainFakeCfg(DN baseDN,int serverId,SortedSet<String> replServers,AssuredType assuredType,int assuredSdLevel,int groupId,long assuredTimeout,SortedSet<String> refUrls){  this(baseDN,serverId,replServers,groupId);switch (assuredType) {case NOT_ASSURED:    break;case SAFE_DATA:case SAFE_READ:  this.assuredType=assuredType;break;}this.assuredSdLevel=assuredSdLevel;this.assuredTimeout=assuredTimeout;if (refUrls != null) {this.refUrls=refUrls;}}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  m_resultContentHandler.endElement(uri,localName,qName);}  }
class C{  synchronized boolean recoveryUntil(CSN recovered){  final CSN lastLocalChange=domain.getLastLocalChange();  if (recovered != null && recovered.isNewerThanOrEqualTo(lastLocalChange)) {    recoveringOldChanges=false;  }  return recoveringOldChanges;}  }
class C{  public void register(final NioChannel socket){  socket.setPoller(this);  NioSocketWrapper ka=new NioSocketWrapper(socket,NioEndpoint.this);  socket.setSocketWrapper(ka);  ka.setPoller(this);  ka.setReadTimeout(getSocketProperties().getSoTimeout());  ka.setWriteTimeout(getSocketProperties().getSoTimeout());  ka.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());  ka.setSecure(isSSLEnabled());  ka.setReadTimeout(getSoTimeout());  ka.setWriteTimeout(getSoTimeout());  PollerEvent r=eventCache.pop();  ka.interestOps(SelectionKey.OP_READ);  if (r == null)   r=new PollerEvent(socket,ka,OP_REGISTER); else   r.reset(socket,ka,OP_REGISTER);  addEvent(r);}  }
class C{  public void requestGraceLoginUseTimes(){  operations.add(PasswordPolicyStateOperationType.GET_GRACE_LOGIN_USE_TIMES);}  }
class C{  public Sapling(final Material type){  this(type,DEFAULT_SPECIES,false);}  }
class C{  private void doGetPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  FSUtils.debug.message("FSTerminationReturnServlet doGetPost...");  String providerAlias=FSServiceUtils.getMetaAlias(request);  if (providerAlias == null || providerAlias.length() < 1) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("Unable to retrieve alias, Hosted" + " Provider. Cannot process request");    }    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString("aliasNotFound"));    return;  }  StringBuffer terminationDone=new StringBuffer();  BaseConfigType hostedConfig=null;  try {    String hostedRole=metaManager.getProviderRoleByMetaAlias(providerAlias);    String hostedEntityId=metaManager.getEntityIDByMetaAlias(providerAlias);    String realm=IDFFMetaUtils.getRealmByMetaAlias(providerAlias);    if (hostedRole != null && hostedRole.equalsIgnoreCase(IFSConstants.IDP)) {      hostedConfig=metaManager.getIDPDescriptorConfig(realm,hostedEntityId);    } else     if (hostedRole != null && hostedRole.equalsIgnoreCase(IFSConstants.SP)) {      hostedConfig=metaManager.getSPDescriptorConfig(realm,hostedEntityId);    }    if (hostedRole == null || hostedConfig == null) {      throw new IDFFMetaException((String)null);    }  } catch (  IDFFMetaException e) {    FSUtils.debug.error("Failed to get Hosted Provider");    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString(IFSConstants.FAILED_HOSTED_DESCRIPTOR));    return;  }  terminationDone.append(FSServiceUtils.getTerminationDonePageURL(request,hostedConfig,providerAlias));  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("Final Done page URL at local end: " + terminationDone.toString());  }  response.sendRedirect(terminationDone.toString());  return;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  List names=(List)rc.getOption(DatastoreOptions.DATASTORE_NAMES);  validateRealm(realm);  String[] params={realm,names.toString()};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_DELETE_DATASTORES",params);  try {    ServiceConfigManager svcCfgMgr=new ServiceConfigManager(IdConstants.REPO_SERVICE,adminSSOToken);    ServiceConfig cfg=svcCfgMgr.getOrganizationConfig(realm,null);    if (cfg != null) {      for (Iterator i=names.iterator(); i.hasNext(); ) {        cfg.removeSubConfig((String)i.next());      }      if (names.size() > 1) {        getOutputWriter().printlnMessage(getResourceString("datastore-delete-datastores-succeeded"));      } else {        getOutputWriter().printlnMessage(getResourceString("datastore-delete-datastore-succeeded"));      }    } else {      getOutputWriter().printlnMessage(getResourceString("datastore-delete-datastore-not-found"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_DELETE_DATASTORES",params);  } catch (  SMSException e) {    debugError("DeleteDataStores.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_DELETE_DATASTORES",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    debugError("DeleteDataStores.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_DELETE_DATASTORES",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public Notification(String type,Object source,long sequenceNumber,String message){  super(source);  this.source=source;  this.type=type;  this.sequenceNumber=sequenceNumber;  this.timeStamp=(new java.util.Date()).getTime();  this.message=message;}  }
class C{  public SSOToken createSSOToken(String tokenId,boolean invokedByAuth,boolean possiblyResetIdleTime) throws SSOException, UnsupportedOperationException {  try {    SessionID sessionId=new SessionID(tokenId);    sessionId.setComingFromAuth(invokedByAuth);    Session session=sessionCache.getSession(sessionId,false,possiblyResetIdleTime);    SSOToken ssoToken=new SSOTokenImpl(session);    return ssoToken;  } catch (  Exception e) {    if (debug.messageEnabled()) {      debug.message("SSOProviderImpl.createSSOToken(tokenId, " + invokedByAuth + ", "+ possiblyResetIdleTime+ ") could not create SSOToken for token ID \""+ tokenId+ "\" ("+ e.getMessage()+ ")");    }    throw new SSOException(e);  }}  }
class C{  private static void fromThreadDumpJson(RecordProperties recordProperties,JsonValue jsonProperties){  JsonValue jsonThreadDump=jsonProperties.get(RecordConstants.THREAD_DUMP_LABEL).required();  recordProperties.threadDumpEnable=jsonThreadDump.get(RecordConstants.THREAD_DUMP_ENABLE_LABEL).required().asBoolean();  if (recordProperties.threadDumpEnable) {    JsonValue jsonThreadDumpDelay=jsonThreadDump.get(RecordConstants.THREAD_DUMP_DELAY_LABEL).required();    TimeUnit timeUnit=jsonThreadDumpDelay.get(RecordConstants.THREAD_DUMP_DELAY_TIME_UNIT_LABEL).required().as(enumConstant(TimeUnit.class));    Long timeValue=jsonThreadDumpDelay.get(RecordConstants.THREAD_DUMP_DELAY_VALUE_LABEL).required().asLong();    recordProperties.threadDumpDelayInSeconds=timeUnit.toSeconds(timeValue);    if (recordProperties.threadDumpDelayInSeconds < 1) {      debug.message("For performance reason, {} can't be under the second.",RecordConstants.THREAD_DUMP_DELAY_TIME_UNIT_LABEL);      throw new IllegalArgumentException("For performance reason, " + RecordConstants.THREAD_DUMP_DELAY_TIME_UNIT_LABEL + " can't be under the second.");    }  } else   if (jsonThreadDump.isDefined(RecordConstants.THREAD_DUMP_DELAY_LABEL)) {    debug.message("{} is disabled but {} is defined.",RecordConstants.THREAD_DUMP_ENABLE_LABEL,RecordConstants.THREAD_DUMP_DELAY_LABEL);    throw new IllegalArgumentException(RecordConstants.THREAD_DUMP_ENABLE_LABEL + " is disabled but " + RecordConstants.THREAD_DUMP_DELAY_LABEL+ " is defined.");  }}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  ElemTemplateElement templElem=(ElemTemplateElement)xctxt.getNamespaceContext();  StylesheetRoot ss=templElem.getStylesheetRoot();  java.text.DecimalFormat formatter=null;  java.text.DecimalFormatSymbols dfs=null;  double num=getArg0().execute(xctxt).num();  String patternStr=getArg1().execute(xctxt).str();  if (patternStr.indexOf(0x00A4) > 0)   ss.error(XSLTErrorResources.ER_CURRENCY_SIGN_ILLEGAL);  try {    Expression arg2Expr=getArg2();    if (null != arg2Expr) {      String dfName=arg2Expr.execute(xctxt).str();      QName qname=new QName(dfName,xctxt.getNamespaceContext());      dfs=ss.getDecimalFormatComposed(qname);      if (null == dfs) {        warn(xctxt,XSLTErrorResources.WG_NO_DECIMALFORMAT_DECLARATION,new Object[]{dfName});      } else {        formatter=new java.text.DecimalFormat();        formatter.setDecimalFormatSymbols(dfs);        formatter.applyLocalizedPattern(patternStr);      }    }    if (null == formatter) {      dfs=ss.getDecimalFormatComposed(new QName(""));      if (dfs != null) {        formatter=new java.text.DecimalFormat();        formatter.setDecimalFormatSymbols(dfs);        formatter.applyLocalizedPattern(patternStr);      } else {        dfs=new java.text.DecimalFormatSymbols(java.util.Locale.US);        dfs.setInfinity(Constants.ATTRVAL_INFINITY);        dfs.setNaN(Constants.ATTRVAL_NAN);        formatter=new java.text.DecimalFormat();        formatter.setDecimalFormatSymbols(dfs);        if (null != patternStr)         formatter.applyLocalizedPattern(patternStr);      }    }    return new XString(formatter.format(num));  } catch (  Exception iae) {    templElem.error(XSLTErrorResources.ER_MALFORMED_FORMAT_STRING,new Object[]{patternStr});    return XString.EMPTYSTRING;  }}  }
class C{  private String configure(Properties config){  String serverURL=config.getProperty(SERVER_URL);  String deploymentURI=config.getProperty(DEPLOYMENT_URI);  if (config.getProperty(ACCEPT_LICENSES) != null && !config.getProperty(ACCEPT_LICENSES).isEmpty()) {    acceptLicense=Boolean.parseBoolean(config.getProperty(ACCEPT_LICENSES));  }  if (serverURL == null) {    System.out.println(rb.getString("errorServerURL"));    System.exit(-1);  }  if (deploymentURI == null) {    System.out.println(rb.getString("errorDeploymentURI"));    System.exit(-1);  }  if (!deploymentURI.startsWith("/")) {    deploymentURI="/" + deploymentURI;  }  if (serverURL.endsWith("/")) {    serverURL=serverURL.substring(0,serverURL.length() - 1);  }  return serverURL + deploymentURI;}  }
class C{  public static boolean clear(){  failIfNotInitialized();  try {    mCache.clear();    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public KeyStoreBuilder withProvider(final String providerName){  Provider provider=Security.getProvider(providerName);  if (provider == null) {    throw new IllegalArgumentException("No such provider: " + providerName);  }  return withProvider(provider);}  }
class C{  public StringIndexOutOfBoundsException(int sourceLength,int index){  super("length=" + sourceLength + "; index="+ index);}  }
class C{  void sendPendingStatusMessages(){  final PendingStatusMessages savedState;synchronized (pendingStatusMessagesLock) {    savedState=pendingStatusMessages;    pendingStatusMessages=new PendingStatusMessages();  }  sendPendingChangeTimeHeartbeatMsgs(savedState);  sendPendingTopologyMsgs(savedState);  sendPendingMonitorMsgs(savedState);}  }
class C{  protected InternalDirectoryServerPlugin(DN componentDN,Set<PluginType> pluginTypes,boolean invokeForInternalOps){  initializeInternal(DirectoryServer.getInstance().getServerContext(),componentDN,pluginTypes,invokeForInternalOps);}  }
class C{  private void startOuterRDFDescription(XMPNode schemaNode,int level) throws IOException {  writeIndent(level + 1);  write(RDF_SCHEMA_START);  writeTreeName();  Set<String> usedPrefixes=new HashSet<>();  usedPrefixes.add("xml");  usedPrefixes.add("rdf");  declareUsedNamespaces(schemaNode,usedPrefixes,level + 3);  write('>');  writeNewline();}  }
class C{  public boolean equal_at_start(PlaPointInt p_point){  if (p_point == null)   return false;  PlaPoint first=corner_first();  return first.equals(p_point);}  }
class C{  public AccountException(String msg){  super(msg);}  }
class C{  public void handleTblSupportedCharsetsButtonAddRequest(RequestInvocationEvent event) throws ModelControlException {  try {    Map values=getValues();    onBeforeSaveProfile(values);    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);    G11NSupportedCharsetsAddViewBean vb=(G11NSupportedCharsetsAddViewBean)getViewBean(G11NSupportedCharsetsAddViewBean.class);    unlockPageTrail();    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  @Override public void storeData(StreamingQuote quote){  if (conn != null && quote instanceof StreamingQuoteModeFull) {    StreamingQuoteModeFull quoteModeFull=(StreamingQuoteModeFull)quote;    try {      String sql="INSERT INTO " + quoteTable + " "+ "(Time, InstrumentToken, LastTradedPrice, LastTradedQty, AvgTradedPrice, "+ "Volume, BuyQty, SellQty, OpenPrice, HighPrice, LowPrice, ClosePrice, "+ "MarketDepthBid1Qty, MarketDepthBid1Price, MarketDepthBid1Orders, "+ "MarketDepthBid2Qty, MarketDepthBid2Price, MarketDepthBid2Orders, "+ "MarketDepthBid3Qty, MarketDepthBid3Price, MarketDepthBid3Orders, "+ "MarketDepthBid4Qty, MarketDepthBid4Price, MarketDepthBid4Orders, "+ "MarketDepthBid5Qty, MarketDepthBid5Price, MarketDepthBid5Orders, "+ "MarketDepthOffer1Qty, MarketDepthOffer1Price, MarketDepthOffer1Orders, "+ "MarketDepthOffer2Qty, MarketDepthOffer2Price, MarketDepthOffer2Orders, "+ "MarketDepthOffer3Qty, MarketDepthOffer3Price, MarketDepthOffer3Orders, "+ "MarketDepthOffer4Qty, MarketDepthOffer4Price, MarketDepthOffer4Orders, "+ "MarketDepthOffer5Qty, MarketDepthOffer5Price, MarketDepthOffer5Orders) "+ "values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";      PreparedStatement prepStmt=conn.prepareStatement(sql);      prepStmt.setString(1,quoteModeFull.getTime());      prepStmt.setString(2,quoteModeFull.getInstrumentToken());      prepStmt.setBigDecimal(3,quoteModeFull.getLtp());      prepStmt.setLong(4,quoteModeFull.getLastTradedQty());      prepStmt.setBigDecimal(5,quoteModeFull.getAvgTradedPrice());      prepStmt.setLong(6,quoteModeFull.getVol());      prepStmt.setLong(7,quoteModeFull.getBuyQty());      prepStmt.setLong(8,quoteModeFull.getSellQty());      prepStmt.setBigDecimal(9,quoteModeFull.getOpenPrice());      prepStmt.setBigDecimal(10,quoteModeFull.getHighPrice());      prepStmt.setBigDecimal(11,quoteModeFull.getLowPrice());      prepStmt.setBigDecimal(12,quoteModeFull.getClosePrice());      prepStmt.setLong(13,quoteModeFull.getBidEntry1().getQty());      prepStmt.setBigDecimal(14,quoteModeFull.getBidEntry1().getPrice());      prepStmt.setInt(15,quoteModeFull.getBidEntry1().getOrders());      prepStmt.setLong(16,quoteModeFull.getBidEntry2().getQty());      prepStmt.setBigDecimal(17,quoteModeFull.getBidEntry2().getPrice());      prepStmt.setInt(18,quoteModeFull.getBidEntry2().getOrders());      prepStmt.setLong(19,quoteModeFull.getBidEntry3().getQty());      prepStmt.setBigDecimal(20,quoteModeFull.getBidEntry3().getPrice());      prepStmt.setInt(21,quoteModeFull.getBidEntry3().getOrders());      prepStmt.setLong(22,quoteModeFull.getBidEntry4().getQty());      prepStmt.setBigDecimal(23,quoteModeFull.getBidEntry4().getPrice());      prepStmt.setInt(24,quoteModeFull.getBidEntry4().getOrders());      prepStmt.setLong(25,quoteModeFull.getBidEntry5().getQty());      prepStmt.setBigDecimal(26,quoteModeFull.getBidEntry5().getPrice());      prepStmt.setInt(27,quoteModeFull.getBidEntry5().getOrders());      prepStmt.setLong(28,quoteModeFull.getOfferEntry1().getQty());      prepStmt.setBigDecimal(29,quoteModeFull.getOfferEntry1().getPrice());      prepStmt.setInt(30,quoteModeFull.getOfferEntry1().getOrders());      prepStmt.setLong(31,quoteModeFull.getOfferEntry2().getQty());      prepStmt.setBigDecimal(32,quoteModeFull.getOfferEntry2().getPrice());      prepStmt.setInt(33,quoteModeFull.getOfferEntry2().getOrders());      prepStmt.setLong(34,quoteModeFull.getOfferEntry3().getQty());      prepStmt.setBigDecimal(35,quoteModeFull.getOfferEntry3().getPrice());      prepStmt.setInt(36,quoteModeFull.getOfferEntry3().getOrders());      prepStmt.setLong(37,quoteModeFull.getOfferEntry4().getQty());      prepStmt.setBigDecimal(38,quoteModeFull.getOfferEntry4().getPrice());      prepStmt.setInt(39,quoteModeFull.getOfferEntry4().getOrders());      prepStmt.setLong(40,quoteModeFull.getOfferEntry5().getQty());      prepStmt.setBigDecimal(41,quoteModeFull.getOfferEntry5().getPrice());      prepStmt.setInt(42,quoteModeFull.getOfferEntry5().getOrders());      prepStmt.executeUpdate();      prepStmt.close();    } catch (    SQLException e) {      System.out.println("StreamingQuoteDAOModeFull.storeData(): ERROR: SQLException on Storing data to Table: " + quote);      System.out.println("StreamingQuoteDAOModeFull.storeData(): [SQLException Cause]: " + e.getMessage());    }  } else {    if (conn != null) {      System.out.println("StreamingQuoteDAOModeFull.storeData(): ERROR: DB conn is null !!!");    } else {      System.out.println("StreamingQuoteDAOModeFull.storeData(): ERROR: quote is not of type StreamingQuoteModeQuote !!!");    }  }}  }
class C{  protected Rectangle applyMargins(Rectangle rect,float[] margins,boolean reverse){  if (isPositioned())   return rect;  return rect.<Rectangle>applyMargins(margins[0],margins[1],margins[2],margins[3],reverse);}  }
class C{  public boolean isAllOpAttributes(){  return allOpAttributes;}  }
class C{  public ListBuffer(){  clear();}  }
class C{  void replace(DocumentFilter.FilterBypass fb,int offset,int length,String text,AttributeSet attrs) throws BadLocationException {  if (ignoreDocumentMutate) {    fb.replace(offset,length,text,attrs);    return;  }  super.replace(fb,offset,length,text,attrs);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodevalue02.class,args);}  }
class C{  public char read(){  if (pos >= length) {    throw new StringIndexOutOfBoundsException();  }  return source.charAt(pos++);}  }
class C{  public CLIPresenterClasspathLicenseLocator(ClassLoader classLoader,Charset charset){  super(classLoader,charset,LICENSES);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String attributeName=getStringOptionValue(IArgument.ATTRIBUTE_NAME);  IOutput outputWriter=getOutputWriter();  try {    String[] params={realm,serviceName,attributeName};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_REMOVE_REALM_ATTRIBUTE",params);    OrganizationConfigManager ocm=new OrganizationConfigManager(adminSSOToken,realm);    ocm.removeAttribute(serviceName,attributeName);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("remove-attribute-from-realm-succeed"),(Object[])params));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_REMOVE_REALM_ATTRIBUTE",params);  } catch (  SMSException e) {    String[] args={realm,serviceName,attributeName,e.getMessage()};    debugError("RealmRemoveAttribute.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_REALM_ATTRIBUTE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public Script compile(String name,String script) throws Exception {  return compile(name,new StringReader(script));}  }
class C{  public boolean isPropertyListPattern(){  return _property_list_pattern;}  }
class C{  public void printJobRequiresAttention(PrintJobEvent pje){}  }
class C{  public boolean isApplicable(AciTargetMatchContext matchCtx){  boolean ret=matchesFilter(matchCtx.getResourceEntry());  if (op.equals(EnumTargetOperator.NOT_EQUALITY)) {    return !ret;  }  return ret;}  }
class C{  public String toString(){  return "'" + val.replace("'","''") + "'";}  }
class C{  private Object readResolve(){  return object;}  }
class C{  public synchronized ContextHolder remove(String key){  return cache.remove(key);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.w3.org/XML/1998/namespaces";  String qualifiedName="xml:element1";  Document doc;  Element newElement;  doc=(Document)load("staffNS",false);{    boolean success=false;    try {      newElement=doc.createElementNS(namespaceURI,qualifiedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public static void removeAll(){  getPersistence().removeAll();}  }
class C{  private void finishClicked(){  final WizardStep cStep=getCurrentStep();  if (application.finishClicked(cStep,this)) {    updateUserData(cStep);  }}  }
class C{  @Override public boolean markSupported(){  return markSupported;}  }
class C{  public void removeAllOperations(){  if (operationHandlerThreadHandler != null) {    operationHandlerThreadHandler.removeCallbacksAndMessages(null);  }  operationQueue.clear();}  }
class C{  private void cancelClicked(){  isCanceled=true;  dispose();}  }
class C{  public boolean valueIsAcceptable(final ByteSequence value,final LocalizableMessageBuilder invalidReason){  return impl.valueIsAcceptable(schema,value,invalidReason);}  }
class C{  public GuicedRestlet(Context context,Class<? extends ServerResource> serverResource){  super(context);  this.serverResource=serverResource;}  }
class C{  public static void updateAuthenticatorsList(Set moduleName) throws UpgradeException {  addAttributeDefaultValues(AUTH_SERVICE_NAME,null,SCHEMA_TYPE_GLOBAL,AUTH_ATTR_NAME,moduleName);}  }
class C{  static public void assertEquals(float expected,float actual,float delta){  assertEquals(null,expected,actual,delta);}  }
class C{  public org.w3c.dom.Document encryptAndReplaceResourceID(org.w3c.dom.Document doc,org.w3c.dom.Element element,java.lang.String secretKeyAlg,int keySize,java.lang.String certAlias,java.lang.String providerID) throws EncryptionException {  return ep.encryptAndReplaceResourceID(doc,element,secretKeyAlg,keySize,certAlias,0,providerID);}  }
class C{  public static ComponentUI createUI(JComponent ta){  return new BasicTextAreaUI();}  }
class C{  public boolean addGpsDateTimeStampTag(long timestamp){  ExifTag t=buildTag(TAG_GPS_DATE_STAMP,mGPSDateStampFormat.format(timestamp));  if (t == null) {    return false;  }  setTag(t);  mGPSTimeStampCalendar.setTimeInMillis(timestamp);  t=buildTag(TAG_GPS_TIME_STAMP,new Rational[]{new Rational(mGPSTimeStampCalendar.get(Calendar.HOUR_OF_DAY),1),new Rational(mGPSTimeStampCalendar.get(Calendar.MINUTE),1),new Rational(mGPSTimeStampCalendar.get(Calendar.SECOND),1)});  if (t == null) {    return false;  }  setTag(t);  return true;}  }
class C{  public void testConstrStringExponentIntegerMin(){  String a=".238768e-2147483648";  try {    new BigDecimal(a);    fail("NumberFormatException expected");  } catch (  NumberFormatException e) {  }}  }
class C{  @Override public void recycle(){  input=null;}  }
class C{  private void checkForFragmentID(Attributes attributes){  if (!m_shouldProcess) {    if ((null != attributes) && (null != m_fragmentIDString)) {      int n=attributes.getLength();      for (int i=0; i < n; i++) {        String name=attributes.getQName(i);        if (name.equals(Constants.ATTRNAME_ID)) {          String val=attributes.getValue(i);          if (val.equalsIgnoreCase(m_fragmentIDString)) {            m_shouldProcess=true;            m_fragmentID=m_elementID;          }        }      }    }  }}  }
class C{  @Override @Test(expectedExceptions=IllegalBlockingModeException.class) public void testDecodeShortArrayAsNull() throws Exception {  super.testDecodeShortArrayAsNull();}  }
class C{  public DottedLine(float lineWidth,float gap){  this.lineWidth=lineWidth;  this.gap=gap;}  }
class C{  static boolean isSubclass(Class<?> a,Class<?> b){  if (a == b) {    return true;  }  if (a == null || b == null) {    return false;  }  for (Class<?> x=a; x != null; x=x.getSuperclass()) {    if (x == b) {      return true;    }    if (b.isInterface()) {      Class<?>[] interfaces=x.getInterfaces();      for (int i=0; i < interfaces.length; i++) {        if (isSubclass(interfaces[i],b)) {          return true;        }      }    }  }  return false;}  }
class C{  private void refreshButtonClicked(){  refresh(false,true);}  }
class C{  public LDAPException(int resultCode,LocalizableMessage message,Throwable cause){  super(message,cause);  this.resultCode=resultCode;  errorMessage=null;  matchedDN=null;}  }
class C{  public boolean seek(int index){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("seek",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    return $self.seek(index);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public Cursor fetchAll(Long ruleID,Long actionID){  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();  qb.setTables(DATABASE_TABLE);  qb.appendWhere("1=1");  if (ruleID != null) {    qb.appendWhere(" AND " + KEY_RULEID + " = "+ ruleID);  }  if (actionID != null) {    qb.appendWhere(" AND " + KEY_ACTIONID + " = "+ actionID);  }  return qb.query(database,KEYS,null,null,null,null,null);}  }
class C{  public void ancestorResized(HierarchyEvent e){  ((HierarchyBoundsListener)a).ancestorResized(e);  ((HierarchyBoundsListener)b).ancestorResized(e);}  }
class C{  public ByteStringBuilder appendBytes(final byte[] bytes,final int offset,final int length){  ByteString.checkArrayBounds(bytes,offset,length);  if (length != 0) {    ensureAdditionalCapacity(length);    System.arraycopy(bytes,offset,buffer,this.length,length);    this.length+=length;  }  return this;}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  Rectangle r=a.getBounds();  View v=getViewAtPosition(pos,r);  if ((v != null) && (!v.getElement().isLeaf())) {    return super.modelToView(pos,a,b);  }  r=a.getBounds();  int height=r.height;  int y=r.y;  Shape loc=super.modelToView(pos,a,b);  r=loc.getBounds();  r.height=height;  r.y=y;  return r;}  }
class C{  public void readSequence(ASN1Sequence sequence) throws IOException {  if (tag != ASN1Constants.TAG_C_SEQUENCE) {    throw expected("sequence");  }  int begOffset=offset;  int endOffset=begOffset + length;  ASN1Type[] type=sequence.type;  int i=0;  if (isVerify) {    for (; (offset < endOffset) && (i < type.length); i++) {      next();      while (!type[i].checkTag(tag)) {        if (!sequence.OPTIONAL[i] || (i == type.length - 1)) {          throw new ASN1Exception("ASN.1 Sequence: mandatory value is missing at [" + tagOffset + "]");        }        i++;      }      type[i].decode(this);    }    for (; i < type.length; i++) {      if (!sequence.OPTIONAL[i]) {        throw new ASN1Exception("ASN.1 Sequence: mandatory value is missing at [" + tagOffset + "]");      }    }  } else {    int seqTagOffset=tagOffset;    Object[] values=new Object[type.length];    for (; (offset < endOffset) && (i < type.length); i++) {      next();      while (!type[i].checkTag(tag)) {        if (!sequence.OPTIONAL[i] || (i == type.length - 1)) {          throw new ASN1Exception("ASN.1 Sequence: mandatory value is missing at [" + tagOffset + "]");        }        if (sequence.DEFAULT[i] != null) {          values[i]=sequence.DEFAULT[i];        }        i++;      }      values[i]=type[i].decode(this);    }    for (; i < type.length; i++) {      if (!sequence.OPTIONAL[i]) {        throw new ASN1Exception("ASN.1 Sequence: mandatory value is missing at [" + tagOffset + "]");      }      if (sequence.DEFAULT[i] != null) {        values[i]=sequence.DEFAULT[i];      }    }    content=values;    tagOffset=seqTagOffset;  }  if (offset != endOffset) {    throw new ASN1Exception("Wrong encoding at [" + begOffset + "]. Content's length and encoded length are not the same");  }}  }
class C{  private SearchResultEntry searchBaseEntry(){  final SearchRequest request=newSearchRequest(baseDN,SearchScope.BASE_OBJECT).addAttribute(REPLICATION_STATE);  final InternalSearchOperation search=getRootConnection().processSearch(request);  final ResultCode resultCode=search.getResultCode();  if (resultCode != ResultCode.SUCCESS && resultCode != ResultCode.NO_SUCH_OBJECT) {    logger.error(ERR_ERROR_SEARCHING_RUV,search.getResultCode().getName(),search,search.getErrorMessage(),baseDN);    return null;  }  return getFirstResult(search);}  }
class C{  public void goToNextColor(){  setColorIndex(getNextColorIndex());}  }
class C{  private void badIndex(int index) throws ArrayIndexOutOfBoundsException {  String msg="Attempt to modify attribute at illegal index: " + index;  throw new ArrayIndexOutOfBoundsException(msg);}  }
class C{  @Override public void handle(Object exchange){  getSpincastRequestScope().enter();  R requestContext=null;  IRoutingResult<R> routingResult=null;  try {    exchange=validateExchange(exchange);    requestContext=getRequestContextFactory().createRequestContext(exchange);    addDependenciesInCustomRequestScope(requestContext);    routingResult=findRouteMatch(requestContext);    if (routingResult == null) {      routingResult=prepareNotFoundRouting(exchange,requestContext);    }    try {      callRouteHandlers(requestContext,routingResult);    } catch (    NotFoundException notFoundException) {      if (notFoundException.isResetResponse()) {        resetResponse(requestContext);      }      routingResult=prepareNotFoundRouting(exchange,requestContext);      requestContext.variables().add(SpincastConstants.RequestScopedVariables.NOT_FOUND_PUBLIC_MESSAGE,notFoundException.getMessage());      callRouteHandlers(requestContext,routingResult);    }  } catch (  Throwable ex) {    try {      if (requestContext == null) {        throw ex;      }      requestContext.variables().add(SpincastConstants.RequestScopedVariables.IS_EXCEPTION_HANDLING,true);      requestContext.variables().add(SpincastConstants.RequestScopedVariables.IS_NOT_FOUND_ROUTE,false);      requestContext.variables().add(SpincastConstants.RequestScopedVariables.EXCEPTION,ex);      if (!(ex instanceof IResponseResetableException) || ((IResponseResetableException)ex).isResetResponse()) {        resetResponse(requestContext);      }      if (ex instanceof ICustomStatusCodeException) {        requestContext.response().setStatusCode(((ICustomStatusCodeException)ex).getStatusCode());      } else {        requestContext.response().setStatusCode(HttpStatus.SC_INTERNAL_SERVER_ERROR);      }      customExceptionHandling(ex,requestContext,routingResult);    } catch (    Throwable ex2) {      try {        defaultExceptionHandling(exchange,ex2);      } catch (      Throwable ex3) {        lastResortExceptionHandling(ex,ex3);      }    }  } finally {    try {      getSpincastRequestScope().exit();    } catch (    Throwable ex) {      try {        this.logger.error("Error while exiting custom Guice scope : " + SpincastStatics.getStackTrace(ex));      } catch (      Throwable ex2) {      }    }  }}  }
class C{  public static StringArgument configFileArgument() throws ArgumentException {  return StringArgument.builder("configFile").shortIdentifier('f').description(INFO_DESCRIPTION_CONFIG_FILE.get()).hidden().required().valuePlaceholder(INFO_CONFIGFILE_PLACEHOLDER.get()).buildArgument();}  }
class C{  @Override public ShapeTileOctagon enlarge(double p_offset){  return bounding_octagon().offset(p_offset);}  }
class C{  public TIMEOUT(String detailMessage){  this(detailMessage,0,CompletionStatus.COMPLETED_NO);}  }
class C{  final void runWorker(Worker w){  Thread wt=Thread.currentThread();  Runnable task=w.firstTask;  w.firstTask=null;  w.unlock();  boolean completedAbruptly=true;  try {    while (task != null || (task=getTask()) != null) {      w.lock();      if ((runStateAtLeast(ctl.get(),STOP) || (Thread.interrupted() && runStateAtLeast(ctl.get(),STOP))) && !wt.isInterrupted())       wt.interrupt();      try {        beforeExecute(wt,task);        Throwable thrown=null;        try {          task.run();        } catch (        RuntimeException x) {          thrown=x;          throw x;        }catch (        Error x) {          thrown=x;          throw x;        }catch (        Throwable x) {          thrown=x;          throw new Error(x);        } finally {          afterExecute(task,thrown);        }      }  finally {        task=null;        w.completedTasks++;        w.unlock();      }    }    completedAbruptly=false;  }  finally {    processWorkerExit(w,completedAbruptly);  }}  }
class C{  @Override public void addChild(Container child){  if (Globals.IS_SECURITY_ENABLED) {    PrivilegedAction<Void> dp=new PrivilegedAddChild(child);    AccessController.doPrivileged(dp);  } else {    addChildInternal(child);  }}  }
class C{  public ByteStringBuilder trimToSize(){  if (buffer.length > length) {    final byte[] newBuffer=new byte[length];    System.arraycopy(buffer,0,newBuffer,0,length);    buffer=newBuffer;  }  return this;}  }
class C{  public void prepend(NSString s){  prepend(s.getContent());}  }
class C{  public void initializeGlobalArguments(String hostName,int port,String adminUid,DN bindDn,String bindPwd,LinkedHashMap<String,String> pwdFile){  resetConnectionArguments();  if (hostName != null) {    secureArgsList.getHostNameArg().addValue(hostName);    secureArgsList.getHostNameArg().setPresent(true);  }  secureArgsList.getPortArg().clearValues();  if (port != -1) {    secureArgsList.getPortArg().addValue(String.valueOf(port));    secureArgsList.getPortArg().setPresent(true);  } else {    secureArgsList.getPortArg().addValue(secureArgsList.getPortArg().getDefaultValue());  }  secureArgsList.getUseSSLArg().setPresent(state.useSSL);  secureArgsList.getUseStartTLSArg().setPresent(state.useStartTLS);  if (adminUid != null) {    secureArgsList.getAdminUidArg().addValue(adminUid);    secureArgsList.getAdminUidArg().setPresent(true);  }  if (bindDn != null) {    secureArgsList.getBindDnArg().addValue(bindDn.toString());    secureArgsList.getBindDnArg().setPresent(true);  }  if (pwdFile != null) {    secureArgsList.getBindPasswordFileArg().getNameToValueMap().putAll(pwdFile);    for (    String value : pwdFile.keySet()) {      secureArgsList.getBindPasswordFileArg().addValue(value);    }    secureArgsList.getBindPasswordFileArg().setPresent(true);  } else   if (bindPwd != null) {    secureArgsList.getBindPasswordArg().addValue(bindPwd);    secureArgsList.getBindPasswordArg().setPresent(true);  }  state=new State(secureArgsList);}  }
class C{  public void addDateHeader(String name,long date){  if (this._getHttpServletResponse() != null) {    this._getHttpServletResponse().addDateHeader(name,date);  }  if (internalDateHeaders.containsKey(name)) {    Set<Long> existingSet=internalDateHeaders.get(name);    existingSet.add(date);    internalDateHeaders.put(name,existingSet);  } else {    Set<Long> dSet=new HashSet<>();    dSet.add(date);    internalDateHeaders.put(name,dSet);  }}  }
class C{  public boolean is_inner_layer_dependent(int p_i,int p_j){  if (layer_structure.size() <= 2) {    return false;  }  int compare_value=clearance_rows[p_j].column[p_i].layer[1];  for (int l=2; l < layer_structure.size() - 1; ++l) {    if (clearance_rows[p_j].column[p_i].layer[l] != compare_value) {      return true;    }  }  return false;}  }
class C{  public static double swapDouble(double value){  return Double.longBitsToDouble(swapLong(Double.doubleToLongBits(value)));}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo createFoo(long fooId){  return getService().createFoo(fooId);}  }
class C{  @DataProvider(name="testExcludeNightlyProvider") private Object[][] testExcludeNightlyProvider(){  return new Object[][]{{1,new String[]{"INETORGPERSON","DISPLAYNAME"}},{2,new String[]{"inetOrgPerson","2.16.840.1.113730.3.1.241"}},{3,new String[]{"2.16.840.1.113730.3.2.2","displayName"}},{4,new String[]{"2.16.840.1.113730.3.2.2","2.16.840.1.113730.3.1.241"}},{5,new String[]{"inetOrgPerson","displayName","carLicense"}},{6,new String[]{"organizationalPerson","title","postalCode"}},{7,new String[]{"2.5.6.7","title","postalCode"}},{8,new String[]{"2.5.6.7","TITLE","2.5.4.17"}},{9,new String[]{"2.5.6.7","2.5.4.12","2.5.4.17"}},{10,new String[]{"*","roomNumber"}},{11,new String[]{"*","0.9.2342.19200300.100.1.6"}},{12,new String[]{"*","postOfficeBox","0.9.2342.19200300.100.1.6"}},{13,new String[]{"*","2.5.4.18","0.9.2342.19200300.100.1.6"}}};}  }
class C{  protected SIPClientTransactionImpl(SIPTransactionStack newSIPStack,MessageChannel newChannelToUse){  super(newSIPStack,newChannelToUse);  setBranch(Utils.getInstance().generateBranchId());  this.setEncapsulatedChannel(newChannelToUse);  this.notifyOnRetransmit=false;  this.timeoutIfStillInCallingState=false;  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {    logger.logDebug("Creating clientTransaction " + this);    logger.logStackTrace();  }  this.sipDialogs=new CopyOnWriteArraySet<String>();}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    int offs=target.getCaretPosition();    boolean failed=false;    int oldOffs=offs;    Element curPara=Utilities.getParagraphElement(target,offs);    try {      offs=Utilities.getNextWord(target,offs);      if (offs >= curPara.getEndOffset() && oldOffs != curPara.getEndOffset() - 1) {        offs=curPara.getEndOffset() - 1;      }    } catch (    BadLocationException bl) {      int end=target.getDocument().getLength();      if (offs != end) {        if (oldOffs != curPara.getEndOffset() - 1) {          offs=curPara.getEndOffset() - 1;        } else {          offs=end;        }      } else {        failed=true;      }    }    if (!failed) {      if (select) {        target.moveCaretPosition(offs);      } else {        target.setCaretPosition(offs);      }    } else {      UIManager.getLookAndFeel().provideErrorFeedback(target);    }  }}  }
class C{  public static void deregisterBaseDN(DN baseDN) throws DirectoryException {  ifNull(baseDN);synchronized (directoryServer) {    List<LocalizableMessage> warnings=directoryServer.baseDnRegistry.deregisterBaseDN(baseDN);    for (    LocalizableMessage error : warnings) {      logger.error(error);    }    if (!baseDN.equals(DN.valueOf("cn=config"))) {      LocalBackendWorkflowElement.remove(baseDN);    }  }}  }
class C{  public void reverse(){  int[] newBits=new int[bits.length];  int len=((size - 1) / 32);  int oldBitsLen=len + 1;  for (int i=0; i < oldBitsLen; i++) {    long x=(long)bits[i];    x=((x >> 1) & 0x55555555L) | ((x & 0x55555555L) << 1);    x=((x >> 2) & 0x33333333L) | ((x & 0x33333333L) << 2);    x=((x >> 4) & 0x0f0f0f0fL) | ((x & 0x0f0f0f0fL) << 4);    x=((x >> 8) & 0x00ff00ffL) | ((x & 0x00ff00ffL) << 8);    x=((x >> 16) & 0x0000ffffL) | ((x & 0x0000ffffL) << 16);    newBits[len - i]=(int)x;  }  if (size != oldBitsLen * 32) {    int leftOffset=oldBitsLen * 32 - size;    int mask=1;    for (int i=0; i < 31 - leftOffset; i++) {      mask=(mask << 1) | 1;    }    int currentInt=(newBits[0] >> leftOffset) & mask;    for (int i=1; i < oldBitsLen; i++) {      int nextInt=newBits[i];      currentInt|=nextInt << (32 - leftOffset);      newBits[i - 1]=currentInt;      currentInt=(nextInt >> leftOffset) & mask;    }    newBits[oldBitsLen - 1]=currentInt;  }  bits=newBits;}  }
class C{  public InvalidAttributeNameException(String s){  super(s);}  }
class C{  public void restart(String className,LocalizableMessage reason){  DirectoryServer.restart(className,reason,DirectoryServer.getEnvironmentConfig());}  }
class C{  void policyConfigChanged(String orgName){  String pattern=CACHE_KEY_DELIMITER + orgName;  if (DEBUG.messageEnabled()) {    StringBuilder sb=new StringBuilder(255);    sb.append("at PolicyCache.policyConfigChanged():");    sb.append("updating policy config for orgname ");    sb.append(orgName);    DEBUG.message(sb.toString());  }  try {    PolicyManager pm=getPolicyManager(orgName);    Map policyConfig=pm.getPolicyConfig();    if ((policyConfig != null) && (!policyConfig.isEmpty())) {      Set cacheKeys=policies.keySet();      String[] clonedCacheKeys={};synchronized (policies) {        clonedCacheKeys=new String[cacheKeys.size()];        int i=0;        Iterator cacheIter=cacheKeys.iterator();        while (cacheIter.hasNext()) {          clonedCacheKeys[i]=(String)cacheIter.next();          i++;        }      }      int length=clonedCacheKeys.length;      for (int i=0; i < length; i++) {        String cacheKey=clonedCacheKeys[i];        if (cacheKey.endsWith(pattern)) {          Policy policy=(Policy)policyCache.getPolicy(cacheKey);          if (policy != null) {            policy.getSubjects().setPolicyConfig(policyConfig);          }        }      }    }  } catch (  NameNotFoundException nnfe) {    if (DEBUG.warningEnabled()) {      DEBUG.warning("Can not set policy config for orgname:" + orgName + ":"+ nnfe.getMessage());    }  }catch (  PolicyException pe) {    DEBUG.error("Can not set policy config for orgname:" + orgName,pe);  }catch (  SSOException se) {    DEBUG.error("Can not set policy config for orgname:" + orgName,se);  }}  }
class C{  public BufferedInputStream(InputStream in,int size){  super(in);  if (size <= 0) {    throw new IllegalArgumentException("Buffer size <= 0");  }  buf=new byte[size];}  }
class C{  public synchronized void releaseConnection(ConnectionWithControls conn){  String targetKey=null;  ConnectionRecord targetRecord=null;synchronized (this) {    for (    String key : connectionTable.keySet()) {      ConnectionRecord cr=connectionTable.get(key);      if (cr.conn == conn) {        targetKey=key;        targetRecord=cr;        if (targetKey != null) {          break;        }      }    }  }  if (targetRecord == null) {    throw new IllegalArgumentException("Invalid LDAP connection");  }synchronized (targetRecord) {    targetRecord.counter--;    if (targetRecord.counter == 0 && targetRecord.disconnectAfterUse) {      disconnectAndRemove(targetRecord);    }  }}  }
class C{  XSLTAttributeDef(String namespace,String name,boolean required,boolean supportsAVT,boolean prefixedQNameValAllowed,int errorType,String k1,int v1,String k2,int v2){  this.m_namespace=namespace;  this.m_name=name;  this.m_type=prefixedQNameValAllowed ? this.T_ENUM_OR_PQNAME : this.T_ENUM;  this.m_required=required;  this.m_supportsAVT=supportsAVT;  this.m_errorType=errorType;  m_enums=new StringToIntTable(2);  m_enums.put(k1,v1);  m_enums.put(k2,v2);}  }
class C{  @Override public void repaint(long tm,int x,int y,int width,int height){}  }
class C{  public int hashCode(){  return (int)time + (int)count;}  }
class C{  private static int byteCompaction(int mode,int[] codewords,Charset encoding,int codeIndex,StringBuilder result){  ByteArrayOutputStream decodedBytes=new ByteArrayOutputStream();  if (mode == BYTE_COMPACTION_MODE_LATCH) {    int count=0;    long value=0;    int[] byteCompactedCodewords=new int[6];    boolean end=false;    int nextCode=codewords[codeIndex++];    while ((codeIndex < codewords[0]) && !end) {      byteCompactedCodewords[count++]=nextCode;      value=900 * value + nextCode;      nextCode=codewords[codeIndex++];      if (nextCode == TEXT_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH || nextCode == NUMERIC_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH_6 || nextCode == BEGIN_MACRO_PDF417_CONTROL_BLOCK || nextCode == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || nextCode == MACRO_PDF417_TERMINATOR) {        codeIndex--;        end=true;      } else {        if ((count % 5 == 0) && (count > 0)) {          for (int j=0; j < 6; ++j) {            decodedBytes.write((byte)(value >> (8 * (5 - j))));          }          value=0;          count=0;        }      }    }    if (codeIndex == codewords[0] && nextCode < TEXT_COMPACTION_MODE_LATCH) {      byteCompactedCodewords[count++]=nextCode;    }    for (int i=0; i < count; i++) {      decodedBytes.write((byte)byteCompactedCodewords[i]);    }  } else   if (mode == BYTE_COMPACTION_MODE_LATCH_6) {    int count=0;    long value=0;    boolean end=false;    while (codeIndex < codewords[0] && !end) {      int code=codewords[codeIndex++];      if (code < TEXT_COMPACTION_MODE_LATCH) {        count++;        value=900 * value + code;      } else {        if (code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == NUMERIC_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR) {          codeIndex--;          end=true;        }      }      if ((count % 5 == 0) && (count > 0)) {        for (int j=0; j < 6; ++j) {          decodedBytes.write((byte)(value >> (8 * (5 - j))));        }        value=0;        count=0;      }    }  }  result.append(new String(decodedBytes.toByteArray(),encoding));  return codeIndex;}  }
class C{  public void testPlusMathContextPositive(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=41;  int precision=37;  RoundingMode rm=RoundingMode.FLOOR;  MathContext mc=new MathContext(precision,rm);  String c="929487820944884782312124789.8748298842";  int cScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal res=aNumber.plus(mc);  assertEquals("incorrect value",c,res.toString());  assertEquals("incorrect scale",cScale,res.scale());}  }
class C{  private Schema schema() throws Exception {  SchemaBuilder sb=new SchemaBuilder(getCoreSchema());  for (int i=1; i <= 9; i++) {    sb.buildAttributeType("1.2.3.4." + i).names("at" + i).addToSchema();  }  return sb.toSchema();}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public ParcelFileDescriptor executeForBlobFileDescriptor(String sql,Object[] bindArgs,int connectionFlags,CancellationSignal cancellationSignal){  if (sql == null) {    throw new IllegalArgumentException("sql must not be null.");  }  if (executeSpecial(sql,bindArgs,connectionFlags,cancellationSignal)) {    return null;  }  acquireConnection(sql,connectionFlags,cancellationSignal);  try {    return mConnection.executeForBlobFileDescriptor(sql,bindArgs,cancellationSignal);  }  finally {    releaseConnection();  }}  }
class C{  @Override public final void run(){  setResultCode(ResultCode.UNDEFINED);  setProcessingStartTime();  logModifyDNRequest(this);  boolean workflowExecuted=false;  try {    checkIfCanceled(false);    if (!processOperationResult(getPluginConfigManager().invokePreParseModifyDNPlugins(this))) {      return;    }    checkIfCanceled(false);    DN entryDN=getEntryDN();    if (entryDN == null) {      return;    }    workflowExecuted=execute(this,entryDN);  } catch (  CanceledOperationException coe) {    logger.traceException(coe);    setResultCode(ResultCode.CANCELLED);    cancelResult=new CancelResult(ResultCode.CANCELLED,null);    appendErrorMessage(coe.getCancelRequest().getCancelReason());  } finally {    setProcessingStopTime();    logModifyDNResponse(this);    if (cancelRequest == null || cancelResult == null || cancelResult.getResultCode() != ResultCode.CANCELLED || cancelRequest.notifyOriginalRequestor() || DirectoryServer.notifyAbandonedOperations()) {      clientConnection.sendResponse(this);    }    if (workflowExecuted) {      invokePostResponseCallbacks();    }    invokePostResponsePlugins(workflowExecuted);    if (cancelResult == null) {      cancelResult=new CancelResult(ResultCode.TOO_LATE,null);    }  }}  }
class C{  public SampleModel createSubsetSampleModel(int bands[]){  if (bands.length > bankIndices.length)   throw new RasterFormatException("There are only " + bankIndices.length + " bands");  int newBankIndices[]=new int[bands.length];  int newBandOffsets[]=new int[bands.length];  for (int i=0; i < bands.length; i++) {    newBankIndices[i]=bankIndices[bands[i]];    newBandOffsets[i]=bandOffsets[bands[i]];  }  return new BandedSampleModel(this.dataType,width,height,this.scanlineStride,newBankIndices,newBandOffsets);}  }
class C{  public AboutFrame(){  super("About the NIST SIP traces viewer");  initComponents();}  }
class C{  public long insert(String dataTypeName,String dataTypeClassName){  if (dataTypeName == null || dataTypeClassName == null) {    throw new IllegalArgumentException("insert parameter null.");  }  ContentValues initialValues=new ContentValues();  initialValues.put(KEY_DATATYPENAME,dataTypeName);  initialValues.put(KEY_DATATYPECLASSNAME,dataTypeClassName);  return database.insert(DATABASE_TABLE,null,initialValues);}  }
class C{  public void reportJSException(String instanceId,String function,String exception){  if (WXEnvironment.isApkDebugable()) {    WXLogUtils.e("reportJSException >>>> instanceId:" + instanceId + ", exception function:"+ function+ ", exception:"+ exception);  }  WXSDKInstance instance=WXSDKManager.getInstance().getSDKInstance(instanceId);  if (instance != null) {    instance.onJSException(null,function,exception);  }  WXErrorCode.WX_ERR_JS_EXECUTE.appendErrMsg(exception);  commitJSBridgeAlarmMonitor(instanceId,WXErrorCode.WX_ERR_JS_EXECUTE);}  }
class C{  public void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  super.callChildVisitors(visitor,callAttrs);}  }
class C{  public long time(){  return time;}  }
class C{  void removeResourcePrefixes(String serviceTypeName,Set resourcePrefixes) throws PolicyException {  ServiceConfig resources=getResourcesServiceConfig(false);  if (resources == null) {    return;  }  ServiceConfig leafConfig=null;  try {    leafConfig=resources.getSubConfig(serviceTypeName);  } catch (  SMSException e1) {    throw new PolicyException(e1);  }catch (  SSOException e) {    throw (new PolicyException(ResBundleUtils.rbName,"invalid_sso_token",null,null));  }  if (leafConfig == null) {    return;  }  Map existingAttrs=null;  existingAttrs=leafConfig.getAttributes();  if ((existingAttrs == null) || (!existingAttrs.containsKey(RESOURCE_PREFIXES))) {    return;  }  int n=existingAttrs.size();  Set existingSet=(Set)existingAttrs.get(RESOURCE_PREFIXES);  Map prefixMap=null;  if ((existingSet != null) && (!existingSet.isEmpty())) {    String prefixXml=(String)(existingSet.iterator().next());    prefixMap=xmlToResourcePrefixes(prefixXml);  } else {    prefixMap=new HashMap();  }  Map newAttrs=new HashMap();  prefixMap=removeResourcePrefixes(resourcePrefixes,prefixMap);  Set newSet=new HashSet(1);  newSet.add(resourcePrefixesToXml(prefixMap));  newAttrs.put(RESOURCE_PREFIXES,newSet);  try {    leafConfig.setAttributes(newAttrs);  } catch (  SMSException e5) {    throw new PolicyException(e5);  }catch (  SSOException e) {    throw (new PolicyException(ResBundleUtils.rbName,"invalid_sso_token",null,null));  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(prefix08.class,args);}  }
class C{  public static final boolean isWhiteSpace(CharSequence s){  for (int i=s.length() - 1; i >= 0; i--)   if (!isWhiteSpace(s.charAt(i)))   return false;  return true;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.secext.PasswordString createPasswordString() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.PasswordStringImpl();}  }
class C{  public DefaultFormatterFactory(JFormattedTextField.AbstractFormatter defaultFormat,JFormattedTextField.AbstractFormatter displayFormat,JFormattedTextField.AbstractFormatter editFormat){  this(defaultFormat,displayFormat,editFormat,null);}  }
class C{  public void startServer(boolean suppressOutput) throws ApplicationException {  startServer(true,suppressOutput);}  }
class C{  public boolean addAttributeAlways(String uri,String localName,String rawName,String type,String value,boolean XSLAttribute){  boolean was_added;  int index;  if (localName == null || uri == null || uri.length() == 0)   index=m_attributes.getIndex(rawName); else {    index=m_attributes.getIndex(uri,localName);  }  if (index >= 0) {    m_attributes.setValue(index,value);    was_added=false;  } else {    m_attributes.addAttribute(uri,localName,rawName,type,value);    was_added=true;  }  return was_added;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider(){  String[] alg={"","qwertyu","!@#$%^&*()"};  Provider pp=null;  try {    AlgorithmParameters ap=AlgorithmParameters.getInstance("ABC",p);    checkUnititialized(ap);    ap.init(new byte[6],"aaa");    checkAP(ap,p);  } catch (  Exception e) {    fail("Unexpected exception");  }  for (int i=0; i < alg.length; i++) {    try {      AlgorithmParameters ap=AlgorithmParameters.getInstance(alg[i],p);      fail("NoSuchAlgorithmException was not thrown for parameter " + alg[i]);    } catch (    NoSuchAlgorithmException nsae) {    }catch (    Exception e) {      fail("Incorrect exception " + e + " was thrown for "+ alg[i]);    }  }  try {    AlgorithmParameters ap=AlgorithmParameters.getInstance("ABC",pp);    fail("IllegalArgumentException was not thrown for NULL provider");  } catch (  IllegalArgumentException iae) {  }catch (  Exception e) {    fail("Incorrect exception " + e + " was thrown");  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddress;  String attrValue;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testAddress=(Element)elementList.item(2);  attrValue=testAddress.getAttribute("class");  assertEquals("attrValue","No",attrValue);}  }
class C{  private boolean resultsIdentical(String namedCurve,BigInteger badX,BigInteger badY,BigInteger secret,int iter) throws InvalidAlgorithmParameterException, NoSuchAlgorithmException, InvalidKeySpecException, InvalidKeyException {  for (int i=0; i < iter; i++) {    secret=secret.add(BigInteger.ONE);    BigInteger resultCustom=computeSecretWithCustomAlgorithm(namedCurve,badX,badY,secret);    BigInteger resultSun=computeSecretWithSunAlgorithm(namedCurve,badX,badY,secret);    if (resultSun != null && !resultSun.equals(resultCustom)) {      return false;    }  }  return true;}  }
class C{  private String badRegister(long s){  return "Attempt to register more than " + MAX_PARTIES + " parties for "+ stateToString(s);}  }
class C{  public PAOSRequest(String xmlString) throws PAOSException {  Document xmlDocument=XMLUtils.toDOMDocument(xmlString,PAOSUtils.debug);  if (xmlDocument == null) {    throw new PAOSException(PAOSUtils.bundle.getString("errorPAOSRequestElement"));  }  parseElement(xmlDocument.getDocumentElement());}  }
class C{  public void addApps(List<AppInfo> apps){  mApps.addApps(apps);}  }
class C{  public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){  if (cv != null) {    return cv.visitField(access,name,desc,signature,value);  }  return null;}  }
class C{  private UpgradeUtils(){  throw new AssertionError();}  }
class C{  public static String findPreferredIDP(String realm,HttpServletRequest request){  if (request == null) {    return null;  }  String succinctID=request.getParameter(IFSConstants.PROVIDER_ID_KEY);  if ((succinctID == null) || succinctID.length() == 0) {    debug.message("FSUtils.findPreferredIDP::Pref IDP not found.");    return null;  }  succinctID=succinctID.trim();  String preferredSuccinctId=null;  StringTokenizer st=new StringTokenizer(succinctID," ");  while (st.hasMoreTokens()) {    preferredSuccinctId=st.nextToken();    if ((preferredSuccinctId.length() < 28) && st.hasMoreTokens()) {      preferredSuccinctId=preferredSuccinctId + "+" + st.nextToken();    }  }  preferredSuccinctId=SAMLUtils.byteArrayToString(Base64.decode(preferredSuccinctId));  return getProviderIDFromSuccinctID(realm,preferredSuccinctId);}  }
class C{  public void destroy(){  finalize();}  }
class C{  public static void cleanEmbeddedCassandra(){  dropKeyspaces();}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  m_expr.fixupVariables(vars,globalsSize);}  }
class C{  protected void writeLeaf(Element elem) throws IOException {  indent();  if (elem.getName() == StyleConstants.IconElementName) {    writeImage(elem);  } else   if (elem.getName() == StyleConstants.ComponentElementName) {    writeComponent(elem);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.security.SessionContextElement createSessionContextElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.security.impl.SessionContextElementImpl();}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    buf=null;    in.close();  }}  }
class C{  public static List<String> findMainClasses(File rootDir) throws IOException {  List<String> ret=new ArrayList<>();  if (!rootDir.exists()) {    return ret;  }  if (!rootDir.isDirectory()) {    throw new IllegalArgumentException(String.format("Path %s is not a directory",rootDir.getPath()));  }  findClasses(ret,rootDir,rootDir.getAbsolutePath() + "/");  return ret;}  }
class C{  @Override public String toString(){  return "ZoneRules[currentStandardOffset=" + standardOffsets[standardOffsets.length - 1] + "]";}  }
class C{  SynchronizedObjectPool(final ObjectPool<T> pool) throws IllegalArgumentException {  if (pool == null) {    throw new IllegalArgumentException("pool must not be null.");  }  this.pool=pool;}  }
class C{  void addToSubroutine(final long id,final int nbSubroutines){  if ((status & VISITED) == 0) {    status|=VISITED;    srcAndRefPositions=new int[nbSubroutines / 32 + 1];  }  srcAndRefPositions[(int)(id >>> 32)]|=(int)id;}  }
class C{  public JCheckBox(String text,Icon icon){  this(text,icon,false);}  }
class C{  public MarshalException(String s){  super(s);}  }
class C{  private void addObjectClass(String definition,Schema currentSchema,SchemaBuilder schemaBuilder,Set<String> modifiedSchemaFiles) throws DirectoryException {  String oid=SchemaUtils.parseObjectClassOID(definition);  final String finalDefinition;  if (!currentSchema.hasObjectClass(oid)) {    finalDefinition=completeDefinitionWhenAddingSchemaElement(definition,modifiedSchemaFiles);  } else {    ObjectClass existingOC=currentSchema.getObjectClass(oid);    finalDefinition=completeDefinitionWhenReplacingSchemaElement(definition,existingOC,modifiedSchemaFiles);  }  schemaBuilder.addObjectClass(finalDefinition,true);}  }
class C{  public synchronized String toString(){  int max=size() - 1;  if (max == -1)   return "{}";  StringBuilder sb=new StringBuilder();  Iterator<Map.Entry<K,V>> it=entrySet().iterator();  sb.append('{');  for (int i=0; ; i++) {    Map.Entry<K,V> e=it.next();    K key=e.getKey();    V value=e.getValue();    sb.append(key == this ? "(this Map)" : key.toString());    sb.append('=');    sb.append(value == this ? "(this Map)" : value.toString());    if (i == max)     return sb.append('}').toString();    sb.append(", ");  }}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  for (int i=0; i < controls.length; i++) {    if (i != 0) {      buf.append(", ");      if ((i + 1) == controls.length) {        buf.append("and ");      }    }    buf.append(controls[i].getType());  }  return new String(getType() + " Control containing " + buf+ " Controls.");}  }
class C{  public static Short valueOf(String string,int radix) throws NumberFormatException {  return valueOf(parseShort(string,radix));}  }
class C{  static void runServer(int port,int sslPort){  start(port,sslPort,true);}  }
class C{  public static PrintJobAttributeSet unmodifiableView(PrintJobAttributeSet attributeSet){  if (attributeSet == null) {    throw new NullPointerException();  }  return new UnmodifiablePrintJobAttributeSet(attributeSet);}  }
class C{  public X500PrivateCredential(X509Certificate cert,PrivateKey key,String alias){  if (cert == null || key == null || alias == null)   throw new IllegalArgumentException();  this.cert=cert;  this.key=key;  this.alias=alias;}  }
class C{  public PlaPointFloat perpendicular_projection(PlaPointFloat p_point){  double dx=point_b.v_x - point_a.v_x;  double dy=point_b.v_y - point_a.v_y;  if (dx == 0 && dy == 0)   return new PlaPointFloat();  double dxdx=dx * dx;  double dydy=dy * dy;  double dxdy=dx * dy;  double denominator=dxdx + dydy;  if (denominator == 0)   return new PlaPointFloat();  double det=point_a.v_x * point_b.v_y - point_b.v_x * point_a.v_y;  double x=(p_point.v_x * dxdx + p_point.v_y * dxdy + det * dy) / denominator;  double y=(p_point.v_x * dxdy + p_point.v_y * dydy - det * dx) / denominator;  return new PlaPointFloat(x,y);}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.OrganizationElement createOrganizationElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.OrganizationElementImpl();}  }
class C{  protected MediaSizeName(int value){  super(value);}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.X509DataType.X509CRL createX509DataTypeX509CRL() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.X509DataTypeImpl.X509CRLImpl();}  }
class C{  public void signXML() throws SAMLException {  if (signed) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("Request.signXML: the request is " + "already signed.");    }    throw new SAMLException(SAMLUtils.bundle.getString("alreadySigned"));  }  String certAlias=SystemConfigurationUtil.getProperty("com.sun.identity.saml.xmlsig.certalias");  if (certAlias == null) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("Request.signXML: couldn't obtain " + "this site's cert Alias.");    }    throw new SAMLResponderException(SAMLUtils.bundle.getString("cannotFindCertAlias"));  }  XMLSignatureManager manager=XMLSignatureManager.getInstance();  if ((majorVersion == 1) && (minorVersion == 0)) {    SAMLUtils.debug.message("Request.signXML: sign with version 1.0");    signatureString=manager.signXML(this.toString(true,true),certAlias);    signature=XMLUtils.toDOMDocument(signatureString,SAMLUtils.debug).getDocumentElement();  } else {    Document doc=XMLUtils.toDOMDocument(this.toString(true,true),SAMLUtils.debug);    signature=manager.signXML(doc,certAlias,null,REQUEST_ID_ATTRIBUTE,getRequestID(),true,null);    signatureString=XMLUtils.print(signature);  }  signed=true;  xmlString=this.toString(true,true);}  }
class C{  @Override public void enqueueRequest(Operation operation) throws DirectoryException {  DirectoryServer.enqueueRequest(operation);}  }
class C{  public void migrateTo(DTMManager manager){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_entitiesremovenameditemns1.class,args);}  }
class C{  private void examineUnparsedOperation(CompareOperation compareOperation){  assertTrue(compareOperation.getProcessingStartTime() > 0);  assertTrue(compareOperation.getProcessingStopTime() > 0);  assertTrue(compareOperation.getProcessingTime() >= 0);  assertTrue(compareOperation.getErrorMessage().length() > 0);  ensurePostReponseHasRun();}  }
class C{  public static String toString(long[] a){  if (a == null)   return "null";  int iMax=a.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(a[i]);    if (i == iMax)     return b.append(']').toString();    b.append(", ");  }}  }
class C{  public void updateUI(){  setUI((TabbedPaneUI)UIManager.getUI(this));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createAttributeNS06.class,args);}  }
class C{  public CannotReadException(){  super();}  }
class C{  public void onPostCreate(Bundle savedInstanceState){}  }
class C{  public org.omg.CosNaming.NamingContext bind_new_context(org.omg.CosNaming.NameComponent[] n) throws org.omg.CosNaming.NamingContextPackage.NotFound, org.omg.CosNaming.NamingContextPackage.AlreadyBound, org.omg.CosNaming.NamingContextPackage.CannotProceed, org.omg.CosNaming.NamingContextPackage.InvalidName {  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("bind_new_context",true);    org.omg.CosNaming.NameHelper.write($out,n);    $in=_invoke($out);    org.omg.CosNaming.NamingContext $result=org.omg.CosNaming.NamingContextHelper.read($in);    return $result;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    if (_id.equals("IDL:omg.org/CosNaming/NamingContext/NotFound:1.0"))     throw org.omg.CosNaming.NamingContextPackage.NotFoundHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/AlreadyBound:1.0"))     throw org.omg.CosNaming.NamingContextPackage.AlreadyBoundHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0"))     throw org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0"))     throw org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.read($in); else     throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    return bind_new_context(n);  } finally {    _releaseReply($in);  }}  }
class C{  void dumpAssociationTables(){  Enumeration associations=m_patternTable.elements();  while (associations.hasMoreElements()) {    TemplateSubPatternAssociation head=(TemplateSubPatternAssociation)associations.nextElement();    while (null != head) {      System.out.print("(" + head.getTargetString() + ", "+ head.getPattern()+ ")");      head=head.getNext();    }    System.out.println("\n.....");  }  TemplateSubPatternAssociation head=m_wildCardPatterns;  System.out.print("wild card list: ");  while (null != head) {    System.out.print("(" + head.getTargetString() + ", "+ head.getPattern()+ ")");    head=head.getNext();  }  System.out.println("\n.....");}  }
class C{  public Object[] createTable(){  int n=keys.size();  Object[] tbl=new Object[2 * n];  for (int i=0; i < n; i++) {    int offs=2 * i;    tbl[offs]=keys.elementAt(i);    tbl[offs + 1]=data.elementAt(i);  }  return tbl;}  }
class C{  public boolean isValid(){  checkState();  return invalidUsers.isEmpty();}  }
class C{  public static Condition implies(Condition premise,Condition implication){  return or(not(premise),implication);}  }
class C{  public static void main(String[] args) throws UnknownHostException {  SpringApplication app=new SpringApplication(App2App.class);  DefaultProfileUtil.addDefaultProfile(app);  Environment env=app.run(args).getEnvironment();  log.info("\n----------------------------------------------------------\n\t" + "Application '{}' is running! Access URLs:\n\t" + "Local: \t\thttp://127.0.0.1:{}\n\t"+ "External: \thttp://{}:{}\n----------------------------------------------------------",env.getProperty("spring.application.name"),env.getProperty("server.port"),InetAddress.getLocalHost().getHostAddress(),env.getProperty("server.port"));  String configServerStatus=env.getProperty("configserver.status");  log.info("\n----------------------------------------------------------\n\t" + "Config Server: \t{}\n----------------------------------------------------------",configServerStatus == null ? "Not found or not setup for this application" : configServerStatus);}  }
class C{  private void updateRelationshipFields(Context context,String resourceId,Set<JsonPointer> relationshipFields,JsonValue oldObject,JsonValue newObject) throws ResourceException {  final Set<JsonPointer> systemRelationships=relationshipProviders.keySet();  if (!relationshipFields.containsAll(systemRelationships)) {    final JsonValue diff=JsonPatch.diff(oldObject,newObject);    for (    JsonValue diffElement : diff) {      Map<String,Object> diffOp=diffElement.asMap();      JsonPointer pathPointer=new JsonPointer((String)diffOp.get(JsonPatch.PATH_PTR.leaf()));      if (systemRelationships.contains(pathPointer) && !relationshipFields.contains(pathPointer)) {        relationshipFields.add(pathPointer);        logger.info("In updateRelationshipFields, adding onUpdate-script-modified relationship to " + "processed relationship set: {}",pathPointer);        if ("add".equals(diffOp.get(JsonPatch.OP_PTR.leaf()))) {          try {            final JsonValue relationships=fetchRelationshipFields(context,resourceId,Collections.singletonList(pathPointer));            oldObject.asMap().putAll(relationships.asMap());            logger.info("In updateRelationshipFields, adding relationships {} to managed object {}.",relationships.toString(),resourceId);          } catch (          ExecutionException|InterruptedException e) {            throw new InternalServerErrorException(e.getMessage(),e);          }        }      }    }  }}  }
class C{  @Override public void post(Runnable runnable){  if (runnable == null)   return;  TaskProxy.sHandler.post(runnable);}  }
class C{  private void initializeAuthenticationPolicyComponents() throws ConfigException, InitializationException {  storageSchemeConfigManager=new PasswordStorageSchemeConfigManager(serverContext);  storageSchemeConfigManager.initializePasswordStorageSchemes();  passwordValidatorConfigManager=new PasswordValidatorConfigManager(serverContext);  passwordValidatorConfigManager.initializePasswordValidators();  passwordGeneratorConfigManager=new PasswordGeneratorConfigManager(serverContext);  passwordGeneratorConfigManager.initializePasswordGenerators();  accountStatusNotificationHandlerConfigManager=new AccountStatusNotificationHandlerConfigManager(serverContext);  accountStatusNotificationHandlerConfigManager.initializeNotificationHandlers();  authenticationPolicyConfigManager=new PasswordPolicyConfigManager(serverContext);  authenticationPolicyConfigManager.initializeAuthenticationPolicies();}  }
class C{  private K highestKey(){  ConcurrentSkipListMap.Node<K,V> n=hiNode();  if (n != null) {    K last=n.key;    if (inBounds(last))     return last;  }  throw new NoSuchElementException();}  }
class C{  public RSInfo(int rsServerId,String rsServerURL,long generationId,byte groupId,int weight){  this.rsServerId=rsServerId;  this.rsServerURL=rsServerURL;  this.generationId=generationId;  this.groupId=groupId;  this.weight=weight;}  }
class C{  private void ItoOSP(int i,byte[] sp){  sp[0]=(byte)(i >>> 24);  sp[1]=(byte)(i >>> 16);  sp[2]=(byte)(i >>> 8);  sp[3]=(byte)(i >>> 0);}  }
class C{  @Override public boolean accept(Serializable msg,Member source){  table.dataModel.getValueAt(-1,-1);  return false;}  }
class C{  @TargetApi(19) public static boolean hasTranslucentNavigation(@Nullable final Activity activity){  if (null == activity) {    return false;  }  if (Build.VERSION.SDK_INT >= 19) {    return ((activity.getWindow().getAttributes().flags & LayoutParams.FLAG_TRANSLUCENT_NAVIGATION) == LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);  } else {    return false;  }}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    try {      int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));      destination[destOffset]=(byte)(outBuff >> 16);      destination[destOffset + 1]=(byte)(outBuff >> 8);      destination[destOffset + 2]=(byte)(outBuff);      return 3;    } catch (    Exception e) {      System.out.println("" + source[srcOffset] + ": "+ (DECODABET[source[srcOffset]]));      System.out.println("" + source[srcOffset + 1] + ": "+ (DECODABET[source[srcOffset + 1]]));      System.out.println("" + source[srcOffset + 2] + ": "+ (DECODABET[source[srcOffset + 2]]));      System.out.println("" + source[srcOffset + 3] + ": "+ (DECODABET[source[srcOffset + 3]]));      return -1;    }  }}  }
class C{  public ClientHello(HandshakeIODataStream in,int length) throws IOException {  client_version=new byte[2];  client_version[0]=(byte)in.readUint8();  client_version[1]=(byte)in.readUint8();  Streams.readFully(in,random);  int size=in.read();  session_id=new byte[size];  in.read(session_id,0,size);  int l=in.readUint16();  if ((l & 0x01) == 0x01) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect ClientHello");  }  size=l >> 1;  cipher_suites=new CipherSuite[size];  for (int i=0; i < size; i++) {    byte b0=(byte)in.read();    byte b1=(byte)in.read();    cipher_suites[i]=CipherSuite.getByCode(b0,b1);  }  size=in.read();  compression_methods=new byte[size];  in.read(compression_methods,0,size);  this.length=38 + session_id.length + (cipher_suites.length << 1)+ compression_methods.length;  if (this.length > length) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect ClientHello");  }  if (this.length < length) {    in.skip(length - this.length);    this.length=length;  }}  }
class C{  public DoNotCacheCondition(org.w3c.dom.Element doNotCacheConditionElement) throws SAMLException {  Element elt=(Element)doNotCacheConditionElement;  String eltName=elt.getLocalName();  if (eltName == null) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("DoNotCacheCondition: " + "null condition ");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  if (!(eltName.equals("DoNotCacheCondition"))) {    if (!(eltName.equals("Condition"))) {      if (SAMLUtilsCommon.debug.messageEnabled()) {        SAMLUtilsCommon.debug.message("DoNotCacheCondition: " + "unsupported condition ");      }      throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("unsupportedCondition"));    }  }  if (eltName.equals("Condition")) {    String type=elt.getAttribute("xsi:type");    if (!(type.equals("DoNotCacheCondition"))) {      if (SAMLUtilsCommon.debug.messageEnabled()) {        SAMLUtilsCommon.debug.message("DoNotCacheCondition: invalid condition");      }      throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("invalidElement"));    }  }}  }
class C{  private E dequeue(){  int n=size - 1;  if (n < 0)   return null; else {    Object[] array=queue;    E result=(E)array[0];    E x=(E)array[n];    array[n]=null;    Comparator<? super E> cmp=comparator;    if (cmp == null)     siftDownComparable(0,x,array,n); else     siftDownUsingComparator(0,x,array,n,cmp);    size=n;    return result;  }}  }
class C{  @Override public void persistSTSInstance(String stsInstanceId,String realm,T instance) throws STSPublishException {  try {    OrganizationConfigManager organizationConfigManager=new OrganizationConfigManager(getAdminToken(),realm);    Map<String,Set<String>> instanceConfigAttributes=instanceConfigMarshaller.toMap(instance);    if (!organizationConfigManager.getAssignedServices().contains(serviceName)) {      organizationConfigManager.assignService(serviceName,null);    }    ServiceConfig orgConfig=organizationConfigManager.getServiceConfig(serviceName);    if (orgConfig == null) {      orgConfig=organizationConfigManager.addServiceConfig(serviceName,null);    }    orgConfig.addSubConfig(stsInstanceId,ISAuthConstants.SERVER_SUBSCHEMA,PRIORITY_ZERO,instanceConfigAttributes);    if (logger.isDebugEnabled()) {      logger.debug("Persisted " + restOrSoap() + " sts instance with id "+ stsInstanceId+ " in realm "+ realm);    }  } catch (  SMSException e) {    throw new STSPublishException(ResourceException.INTERNAL_ERROR,"Exception caught persisting " + restOrSoap() + " instance "+ stsInstanceId+ "Exception: "+ e,e);  }catch (  SSOException e) {    throw new STSPublishException(ResourceException.INTERNAL_ERROR,"Exception caught persisting " + restOrSoap() + " instance"+ stsInstanceId+ "Exception: "+ e,e);  }}  }
class C{  public void reloadWorkspace(){  mModel.resetLoadedState(false,true);  mModel.startLoaderFromBackground();}  }
class C{  boolean configureReplicationDomain(){  return configureReplicationDomain;}  }
class C{  @Override public boolean onMenuItemClick(MenuItem item){  Log.d(TAG,"onMenuItemClick:" + item.getItemId());switch (item.getItemId()) {case R.id.fm_search:    if (!mIsActivityForeground) {      Log.w(TAG,"click searh menu in background, don't show search dialog");      return false;    }  mIsNeedShowSearchDlg=true;refreshImageButton(false);refreshActionMenuItem(false);refreshPopupMenuItem(false);refreshActionMenuPower(false);showSearchDialog();FmRadioStation.cleanSearchedStations(mContext);mService.startScanAsync();break;case R.id.fm_sound_mode:setSpeakerPhoneOn(!mService.isSpeakerUsed());break;case R.id.fm_record:changeRecordingMode(true);refreshRecordingStatus(FmRecorder.STATE_INVALID);break;default :Log.d(TAG,"invalid menu item");break;}return false;}  }
class C{  public void paint(Graphics g,Shape a){  Shape originalA=a;  a=adjustPaintRegion(a);  Rectangle alloc=(Rectangle)a;  tabBase=alloc.x;  JTextComponent host=(JTextComponent)getContainer();  Highlighter h=host.getHighlighter();  g.setFont(host.getFont());  sel0=host.getSelectionStart();  sel1=host.getSelectionEnd();  unselected=(host.isEnabled()) ? host.getForeground() : host.getDisabledTextColor();  Caret c=host.getCaret();  selected=c.isSelectionVisible() && h != null ? host.getSelectedTextColor() : unselected;  updateMetrics();  Rectangle clip=g.getClipBounds();  int fontHeight=metrics.getHeight();  int heightBelow=(alloc.y + alloc.height) - (clip.y + clip.height);  int heightAbove=clip.y - alloc.y;  int linesBelow, linesAbove, linesTotal;  if (fontHeight > 0) {    linesBelow=Math.max(0,heightBelow / fontHeight);    linesAbove=Math.max(0,heightAbove / fontHeight);    linesTotal=alloc.height / fontHeight;    if (alloc.height % fontHeight != 0) {      linesTotal++;    }  } else {    linesBelow=linesAbove=linesTotal=0;  }  Rectangle lineArea=lineToRect(a,linesAbove);  int y=lineArea.y + metrics.getAscent();  int x=lineArea.x;  Element map=getElement();  int lineCount=map.getElementCount();  int endLine=Math.min(lineCount,linesTotal - linesBelow);  lineCount--;  LayeredHighlighter dh=(h instanceof LayeredHighlighter) ? (LayeredHighlighter)h : null;  for (int line=linesAbove; line < endLine; line++) {    if (dh != null) {      Element lineElement=map.getElement(line);      if (line == lineCount) {        dh.paintLayeredHighlights(g,lineElement.getStartOffset(),lineElement.getEndOffset(),originalA,host,this);      } else {        dh.paintLayeredHighlights(g,lineElement.getStartOffset(),lineElement.getEndOffset() - 1,originalA,host,this);      }    }    drawLine(line,g,x,y);    y+=fontHeight;    if (line == 0) {      x-=firstLineOffset;    }  }}  }
class C{  static void update(SynthContext state,Graphics g){  paintRegion(state,g,null);}  }
class C{  public TraditionalWorkerThread(TraditionalWorkQueue workQueue,int threadID){  super("Worker Thread " + threadID);  this.workQueue=workQueue;  stoppedByReducedThreadNumber=false;  shutdownRequested=false;  waitingForWork=false;  operation=null;  workerThread=null;}  }
class C{  static Point convertScreenLocationToParent(Container parent,int x,int y){  for (Container p=parent; p != null; p=p.getParent()) {    if (p instanceof Window) {      Point point=new Point(x,y);      SwingUtilities.convertPointFromScreen(point,parent);      return point;    }  }  throw new Error("convertScreenLocationToParent: no window ancestor");}  }
class C{  public DirectColorModel(int bits,int rmask,int gmask,int bmask){  this(bits,rmask,gmask,bmask,0);}  }
class C{  synchronized void pushCommittedChanges(){  Entry<CSN,PendingChange> firstEntry=pendingChanges.firstEntry();  if (firstEntry == null) {    return;  }  PendingChange firstChange=firstEntry.getValue();  while (firstChange != null && firstChange.isCommitted()) {    final PluginOperation op=firstChange.getOp();    final UpdateMsg msg=firstChange.getMsg();    if (msg instanceof LDAPUpdateMsg && op != null && !op.isSynchronizationOperation()) {      if (!recoveringOldChanges) {        domain.publish(msg);      } else {        domain.getServerState().update(msg.getCSN());      }    } else     if (msg instanceof ReplicaOfflineMsg) {      domain.publish(msg);    }    pendingChanges.remove(firstEntry.getKey());    firstEntry=pendingChanges.firstEntry();    firstChange=firstEntry != null ? firstEntry.getValue() : null;  }}  }
class C{  private static void validateXmlView(PageData xmlView,Compiler compiler) throws JasperException {  StringBuilder errMsg=null;  ErrorDispatcher errDisp=compiler.getErrorDispatcher();  for (Iterator<TagLibraryInfo> iter=compiler.getPageInfo().getTaglibs().iterator(); iter.hasNext(); ) {    Object o=iter.next();    if (!(o instanceof TagLibraryInfoImpl))     continue;    TagLibraryInfoImpl tli=(TagLibraryInfoImpl)o;    ValidationMessage[] errors=tli.validate(xmlView);    if ((errors != null) && (errors.length != 0)) {      if (errMsg == null) {        errMsg=new StringBuilder();      }      errMsg.append("<h3>");      errMsg.append(Localizer.getMessage("jsp.error.tlv.invalid.page",tli.getShortName(),compiler.getPageInfo().getJspFile()));      errMsg.append("</h3>");      for (int i=0; i < errors.length; i++) {        if (errors[i] != null) {          errMsg.append("<p>");          errMsg.append(errors[i].getId());          errMsg.append(": ");          errMsg.append(errors[i].getMessage());          errMsg.append("</p>");        }      }    }  }  if (errMsg != null) {    errDisp.jspError(errMsg.toString());  }}  }
class C{  private StateSelectRegionItems(StateInteractive p_parent_state,IteraBoard p_board_handling,Actlog p_logfile){  super(p_parent_state,p_board_handling,p_logfile);  actlog_start_scope(LogfileScope.SELECT_REGION);}  }
class C{  public synchronized Enumeration keys(){  return new Enumerator(KEYS,false);}  }
class C{  protected void recordLocalNSDecl(Node node){  NamedNodeMap atts=((Element)node).getAttributes();  int length=atts.getLength();  for (int i=0; i < length; i++) {    Node attr=atts.item(i);    String localName=attr.getLocalName();    String attrPrefix=attr.getPrefix();    String attrValue=attr.getNodeValue();    String attrNS=attr.getNamespaceURI();    localName=localName == null || XMLNS_PREFIX.equals(localName) ? "" : localName;    attrPrefix=attrPrefix == null ? "" : attrPrefix;    attrValue=attrValue == null ? "" : attrValue;    attrNS=attrNS == null ? "" : attrNS;    if (XMLNS_URI.equals(attrNS)) {      if (XMLNS_URI.equals(attrValue)) {        String msg=Utils.messages.createMessage(MsgKey.ER_NS_PREFIX_CANNOT_BE_BOUND,new Object[]{attrPrefix,XMLNS_URI});        if (fErrorHandler != null) {          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_ERROR,msg,MsgKey.ER_NS_PREFIX_CANNOT_BE_BOUND,null,null,null));        }      } else {        if (XMLNS_PREFIX.equals(attrPrefix)) {          if (attrValue.length() != 0) {            fNSBinder.declarePrefix(localName,attrValue);          } else {          }        } else {          fNSBinder.declarePrefix("",attrValue);        }      }    }  }}  }
class C{  public ForgottenUsernameBuilder(){  subjectTranslations=new HashMap<>();  messageTranslations=new HashMap<>();  validQueryAttributes=new HashSet<>();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementretrieveattrvalue.class,args);}  }
class C{  public JobService jobRange(long from,long to,String order,Handler<AsyncResult<List<Job>>> handler){  delegate.jobRange(from,to,order,handler);  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataindexsizeerrsubstringoffsetgreater.class,args);}  }
class C{  public FilterRuleDaoImpl(Context context){  this.context=context;}  }
class C{  private final boolean compareAndSetTail(Node expect,Node update){  return unsafe.compareAndSwapObject(this,tailOffset,expect,update);}  }
class C{  public KeyBinding(KeyStroke key,String actionName){  this.key=key;  this.actionName=actionName;}  }
class C{  public static Foo fetchByUuid_Last(java.lang.String uuid,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByUuid_Last(uuid,orderByComparator);}  }
class C{  @Override public void onClick(DialogInterface dialog,int which){  ArrayList<Integer> values=new ArrayList<Integer>();  for (int i=0; i < mValues.length; i++) {    if (mCheckedItems[i]) {      values.add(mValues[i]);    }  }  if (values.size() < 2) {    return;  }  mPrefs.edit().putString(TimeoutTracker.KEY,TextUtils.join(",",values)).commit();}  }
class C{  public AuthorizationDecisionStatement(Subject subject,String resource,int decision,List action) throws SAMLException {  super(subject,resource,decision,action);}  }
class C{  public boolean hasAttributeNS(String name,String x){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return false;}  }
class C{  public void updateListLength(int listLength){  mListLength=listLength;  if (mListLength == 0) {    mIncrementsHSVValue=0;  } else {    mIncrementsHSVValue=mTotalHsvValue / mListLength;  }  generateStaticColorList();}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 90) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public void removeObserver(final FileAlterationObserver observer){  if (observer != null) {    while (observers.remove(observer)) {    }  }}  }
class C{  public void addBaseDNsToSearch(Collection<DN> dns){  baseDNs.addAll(dns);}  }
class C{  private ByteBuffer writeStringUTF16BEBOM(String next,int i,int noOfValues) throws CharacterCodingException {  CharsetEncoder encoder=Charset.forName(TextEncoding.CHARSET_UTF_16_BE_ENCODING_FORMAT).newEncoder();  encoder.onMalformedInput(CodingErrorAction.IGNORE);  encoder.onUnmappableCharacter(CodingErrorAction.IGNORE);  ByteBuffer bb=null;  if ((i + 1) == noOfValues) {    bb=encoder.encode(CharBuffer.wrap('\ufeff' + next));  } else {    bb=encoder.encode(CharBuffer.wrap('\ufeff' + next + '\0'));  }  bb.rewind();  return bb;}  }
class C{  public void remove(int index){  Component comp=getComponent(index);  if (comp == leftComponent) {    leftComponent=null;  } else   if (comp == rightComponent) {    rightComponent=null;  }  super.remove(index);  revalidate();  repaint();}  }
class C{  public PropertyXMLBuilder(ServiceSchema serviceSchema,AMModel model,ResourceBundle serviceBundle,Map<SchemaType,List<String>> sectionForType,String sectionOrderFileName) throws SMSException, SSOException {  this.model=model;  this.serviceName=serviceSchema.getServiceName();  this.serviceBundle=serviceBundle;  this.sectionForType=sectionForType;  loadSectionOrder(sectionOrderFileName);  if (serviceBundle != null) {    mapTypeToAttributeSchema=new HashMap();    mapTypeToAttributeSchema.put(serviceSchema.getServiceType(),serviceSchema.getAttributeSchemas());  }}  }
class C{  public static void fadeInView(View view,int duration){  view.setVisibility(View.VISIBLE);  view.setAlpha(0f);  ViewCompat.animate(view).alpha(1f).setDuration(duration).setListener(null);}  }
class C{  private static String doGetPath(String filename,int separatorAdd){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  int index=indexOfLastSeparator(filename);  int endIndex=index + separatorAdd;  if (prefix >= filename.length() || index < 0 || prefix >= endIndex) {    return "";  }  return filename.substring(prefix,endIndex);}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public static String escapeCommandLineValue(String value){  StringBuilder b=new StringBuilder();  if (isUnix()) {    for (int i=0; i < value.length(); i++) {      char c=value.charAt(i);      boolean charToEscapeFound=false;      for (int j=0; j < CHARS_TO_ESCAPE.length && !charToEscapeFound; j++) {        charToEscapeFound=c == CHARS_TO_ESCAPE[j];      }      if (charToEscapeFound) {        b.append('\\');      }      b.append(c);    }  } else {    b.append('"').append(value).append('"');  }  return b.toString();}  }
class C{  @Deprecated public int _inc(){  return _inc;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.QueryElement createQueryElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.QueryElementImpl();}  }
class C{  public void testMac10() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, IllegalStateException, InvalidKeyException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  byte[] b={(byte)0,(byte)0,(byte)0,(byte)0,(byte)0};  byte[] byteA=new byte[b.length];  SecretKeySpec sks=new SecretKeySpec(b,"SHA1");  for (int i=0; i < macs.length; i++) {    macs[i].init(sks);    try {      macs[i].doFinal(null,10);      fail("ShortBufferException must be thrown");    } catch (    ShortBufferException e) {    }    try {      macs[i].doFinal(byteA,-4);      fail("ShortBufferException must be thrown");    } catch (    ShortBufferException e) {    }    try {      macs[i].doFinal(byteA,10);      fail("ShortBufferException must be thrown");    } catch (    ShortBufferException e) {    }    try {      macs[i].doFinal(new byte[1],0);      fail("ShortBufferException must be thrown");    } catch (    ShortBufferException e) {    }    byte[] res=macs[i].doFinal();    try {      macs[i].doFinal(new byte[res.length - 1],0);      fail("ShortBufferException must be thrown");    } catch (    ShortBufferException e) {    }  }}  }
class C{  public void endTable(){}  }
class C{  public void addAll(Collection<PdfObject> c){  list.addAll(c);}  }
class C{  public void close(){  if (dialog != null) {    dialog.setVisible(false);    dialog.dispose();    dialog=null;    pane=null;    myBar=null;  }}  }
class C{  void replacePolicyInResourceTree(ServiceTypeManager svtm,SSOToken token,Policy oldPolicy,Policy newPolicy) throws PolicyException, SSOException {  removePolicyFromResourceTree(svtm,token,oldPolicy);  addPolicyToResourceTree(svtm,token,newPolicy);}  }
class C{  protected boolean doMatch(String path,boolean fullMatch,boolean isCaseSensitive){  if (path.startsWith(this.pathSeparator) != pattern.startsWith(this.pathSeparator)) {    return false;  }  String[] pathDirs=tokenizeToStringArray(path,this.pathSeparator);  int pattIdxStart=0;  int pattIdxEnd=pattDirs.length - 1;  int pathIdxStart=0;  int pathIdxEnd=pathDirs.length - 1;  while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {    String patDir=pattDirs[pattIdxStart];    if ("**".equals(patDir)) {      break;    }    if (!matchStrings(patDir,pathDirs[pathIdxStart],isCaseSensitive)) {      return false;    }    pattIdxStart++;    pathIdxStart++;  }  if (pathIdxStart > pathIdxEnd) {    if (pattIdxStart > pattIdxEnd) {      return pattern.endsWith(this.pathSeparator) ? path.endsWith(this.pathSeparator) : !path.endsWith(this.pathSeparator);    }    if (!fullMatch) {      return true;    }    if (pattIdxStart == pattIdxEnd && pattDirs[pattIdxStart].equals("*") && path.endsWith(this.pathSeparator)) {      return true;    }    for (int i=pattIdxStart; i <= pattIdxEnd; i++) {      if (!pattDirs[i].equals("**")) {        return false;      }    }    return true;  } else   if (pattIdxStart > pattIdxEnd) {    return false;  } else   if (!fullMatch && "**".equals(pattDirs[pattIdxStart])) {    return true;  }  while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {    String patDir=pattDirs[pattIdxEnd];    if (patDir.equals("**")) {      break;    }    if (!matchStrings(patDir,pathDirs[pathIdxEnd],isCaseSensitive)) {      return false;    }    pattIdxEnd--;    pathIdxEnd--;  }  if (pathIdxStart > pathIdxEnd) {    for (int i=pattIdxStart; i <= pattIdxEnd; i++) {      if (!pattDirs[i].equals("**")) {        return false;      }    }    return true;  }  while (pattIdxStart != pattIdxEnd && pathIdxStart <= pathIdxEnd) {    int patIdxTmp=-1;    for (int i=pattIdxStart + 1; i <= pattIdxEnd; i++) {      if (pattDirs[i].equals("**")) {        patIdxTmp=i;        break;      }    }    if (patIdxTmp == pattIdxStart + 1) {      pattIdxStart++;      continue;    }    int patLength=patIdxTmp - pattIdxStart - 1;    int strLength=pathIdxEnd - pathIdxStart + 1;    int foundIdx=-1;    strLoop:     for (int i=0; i <= strLength - patLength; i++) {      for (int j=0; j < patLength; j++) {        String subPat=pattDirs[pattIdxStart + j + 1];        String subStr=pathDirs[pathIdxStart + i + j];        if (!matchStrings(subPat,subStr,isCaseSensitive)) {          continue strLoop;        }      }      foundIdx=pathIdxStart + i;      break;    }    if (foundIdx == -1) {      return false;    }    pattIdxStart=patIdxTmp;    pathIdxStart=foundIdx + patLength;  }  for (int i=pattIdxStart; i <= pattIdxEnd; i++) {    if (!pattDirs[i].equals("**")) {      return false;    }  }  return true;}  }
class C{  public static int[] findFreePorts(int nb) throws IOException {  final ServerSocket[] sockets=new ServerSocket[nb];  try {    final int[] ports=new int[nb];    for (int i=0; i < nb; i++) {      final ServerSocket socket=bindFreePort();      sockets[i]=socket;      ports[i]=socket.getLocalPort();    }    return ports;  }  finally {    close(sockets);  }}  }
class C{  public NameID createNameID(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.NAMEID,xml);  if (obj == null) {    return new NameIDImpl(xml);  } else {    return (NameID)obj;  }}  }
class C{  public boolean isLeapYear(int year){  if ((year & 3) != 0) {    return false;  }  if (year > gregorianCutoverYear) {    return (year % 100 != 0) || (year % 400 == 0);  }  if (year < gregorianCutoverYearJulian) {    return true;  }  boolean gregorian;  if (gregorianCutoverYear == gregorianCutoverYearJulian) {    BaseCalendar.Date d=getCalendarDate(gregorianCutoverDate);    gregorian=d.getMonth() < BaseCalendar.MARCH;  } else {    gregorian=year == gregorianCutoverYear;  }  return gregorian ? (year % 100 != 0) || (year % 400 == 0) : true;}  }
class C{  public AuthorizationDeclinedException(){  super(403,"authorization_declined","The user has declined authorization");}  }
class C{  public SystemConfigurationException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  public void removeUpdate(DocumentEvent changes,Shape a,ViewFactory f){  super.removeUpdate(changes,adjustAllocation(a),f);  updateVisibilityModel();}  }
class C{  protected boolean down(TextView widget,Spannable buffer){  return false;}  }
class C{  static Object newInstance(ClassLoader classLoader,String className) throws ClassNotFoundException, IllegalAccessException, InstantiationException {  boolean internal=false;  if (System.getSecurityManager() != null) {    if (className != null && className.startsWith(DEFAULT_PACKAGE)) {      internal=true;    }  }  Class driverClass;  if (classLoader == null || internal) {    driverClass=Class.forName(className);  } else {    driverClass=classLoader.loadClass(className);  }  return driverClass.newInstance();}  }
class C{  public void insert_val(java.io.Serializable value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_val",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    $self.insert_val(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public AlertFrame(String text){  super("Alert");  showMessageDialog(this,text);}  }
class C{  private void noSubObjects(String id) throws ForbiddenException {  if (id != null && id.indexOf('/') >= 0) {    throw new ForbiddenException("Sub-objects are not supported");  }}  }
class C{  public java.lang.String signXML(java.lang.String xmlString,java.lang.String certAlias,java.lang.String algorithm,java.util.List ids) throws XMLSignatureException {  if (xmlString == null || xmlString.length() == 0) {    SAMLUtilsCommon.debug.error("signXML: xmlString is null.");    throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  if (certAlias == null || certAlias.length() == 0) {    SAMLUtilsCommon.debug.error("signXML: certAlias is null.");    throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  Element el=null;  try {    Document doc=XMLUtils.toDOMDocument(xmlString,SAMLUtilsCommon.debug);    el=signXML(doc,certAlias,algorithm,ids);  } catch (  Exception e) {    e.printStackTrace();    throw new XMLSignatureException(e.getMessage());  }  return XMLUtils.print(el);}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  backTrail();  ServerSiteViewBean vb=(ServerSiteViewBean)getViewBean(ServerSiteViewBean.class);  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public final void testPSSParameterSpec0204(){  try {    new PSSParameterSpec("SHA-1","MGF1",MGF1ParameterSpec.SHA1,-20,1);    fail("Expected IAE not thrown");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public DispatcherThreadPool(ExecutorService executorService){  this.executorService=executorService;}  }
class C{  public FrameBodyTRSO(){}  }
class C{  protected synchronized PreparedStatement roles(Connection dbConnection,String username) throws SQLException {  if (preparedRoles == null) {    StringBuilder sb=new StringBuilder("SELECT ");    sb.append(roleNameCol);    sb.append(" FROM ");    sb.append(userRoleTable);    sb.append(" WHERE ");    sb.append(userNameCol);    sb.append(" = ?");    preparedRoles=dbConnection.prepareStatement(sb.toString());  }  preparedRoles.setString(1,username);  return (preparedRoles);}  }
class C{  public static <C extends ConfigurationClient,S extends Configuration>Reference<C,S> parseName(ManagedObjectPath<?,?> p,InstantiableRelationDefinition<C,S> rd,String s){  AbstractManagedObjectDefinition<?,?> d=p.getManagedObjectDefinition();  RelationDefinition<?,?> tmp=d.getRelationDefinition(rd.getName());  if (tmp != rd) {    throw new IllegalArgumentException("The relation \"" + rd.getName() + "\" is not associated with the definition \""+ d.getName()+ "\"");  }  if (s.trim().length() == 0) {    throw new IllegalArgumentException("Empty names are not allowed");  }  return new Reference<>(p,rd,s);}  }
class C{  private FSFederationTerminationNotification createFederationTerminationRequest(FSAccountFedInfo acctInfo){  FSUtils.debug.message("FSFedTerminationHandler::createFederationTerminationRequest:");  FSFederationTerminationNotification reqName=new FSFederationTerminationNotification();  if (reqName != null) {    NameIdentifier nameIdentifier=acctInfo.getRemoteNameIdentifier();    if (nameIdentifier == null) {      nameIdentifier=acctInfo.getLocalNameIdentifier();    }    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("SP Provider Id : " + hostedEntityId);    }    reqName.setProviderId(hostedEntityId);    reqName.setNameIdentifier(nameIdentifier);    return reqName;  } else {    FSUtils.debug.message("failed to create termination request");    FSUtils.debug.error("FSFedTerminationHandler::createFederationTerminationRequest " + FSUtils.bundle.getString(IFSConstants.TERMINATION_REQUEST_CREATION));    return null;  }}  }
class C{  private void resetMenuOptionLayout(){  mFilterLayout.setVisibility(View.GONE);  mPriorityLevelRadioGroup.setVisibility(View.GONE);  mRecordsListView.setVisibility(View.GONE);  mMenuOptionLayout.setVisibility(View.GONE);}  }
class C{  private PluginResult.PreOperation doPreOperationInternal(PreOperationOperation operation) throws CanceledOperationException {  DelayRequestControl control;  try {    control=operation.getRequestControl(DelayRequestControl.DECODER);  } catch (  Exception e) {    return PluginResult.PreOperation.stopProcessing(ResultCode.PROTOCOL_ERROR,LocalizableMessage.raw("Unable to decode the delay request control:  " + e));  }  if (control != null) {    long delayDuration=control.getDelayDuration();    if (delayDuration <= 0) {      return PluginResult.PreOperation.continueOperationProcessing();    }    long stopSleepTime=System.currentTimeMillis() + delayDuration;    while (System.currentTimeMillis() < stopSleepTime) {      operation.checkIfCanceled(false);      try {        Thread.sleep(10);      } catch (      Exception e) {      }    }  }  return PluginResult.PreOperation.continueOperationProcessing();}  }
class C{  public NO_RESOURCES(){  this("");}  }
class C{  public void fireTableChanged(TableModelEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TableModelListener.class) {      ((TableModelListener)listeners[i + 1]).tableChanged(e);    }  }}  }
class C{  public boolean validateServiceAttributes(SSOToken token,String validatorClass,Set values) throws SMSException, SSOException {  try {    Object[] objs={token.getTokenID().toString(),validatorClass,values};    Boolean b=(Boolean)client.send(client.encodeMessage("validateServiceAttributes",objs),null,null);    return b.booleanValue();  } catch (  SSOException e) {    throw e;  }catch (  SMSException smse) {    throw smse;  }catch (  Exception re) {    debug.error("SMSJAXRPCObjectvalidateServiceAttributes",re);    throw new SMSException(re,"sms-JAXRPC-attribute-values-validation-failed");  }}  }
class C{  public boolean resourceNameTypesEnabled(){  return false;}  }
class C{  public void addField(Artwork artwork) throws FieldDataInvalidException {  this.addField(createField(artwork));}  }
class C{  static void loadActionMap(LazyActionMap map){  map.put(new Actions(Actions.POSITIVE_UNIT_INCREMENT));  map.put(new Actions(Actions.POSITIVE_BLOCK_INCREMENT));  map.put(new Actions(Actions.NEGATIVE_UNIT_INCREMENT));  map.put(new Actions(Actions.NEGATIVE_BLOCK_INCREMENT));  map.put(new Actions(Actions.MIN_SCROLL_INCREMENT));  map.put(new Actions(Actions.MAX_SCROLL_INCREMENT));}  }
class C{  public boolean passed(){  boolean passed=true;  for (Iterator i=tests.iterator(); i.hasNext() && passed; ) {    Test t=(Test)i.next();    passed=t.passed();  }  return passed;}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.ResourceIDType createResourceIDType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.ResourceIDTypeImpl();}  }
class C{  protected void writeContent(Element elem,boolean needsIndenting) throws IOException, BadLocationException {  AttributeSet attr=elem.getAttributes();  writeNonHTMLAttributes(attr);  if (needsIndenting) {    indent();  }  writeHTMLTags(attr);  text(elem);}  }
class C{  private void checkEncodeDecode(MatchedValuesFilter mvf) throws Exception {  ByteStringBuilder bsb=new ByteStringBuilder();  ASN1Writer writer=ASN1.getWriter(bsb);{    mvf.encode(writer);    MatchedValuesFilter newMvf=MatchedValuesFilter.decode(ASN1.getReader(bsb));    assertEquals(newMvf.toString(),mvf.toString());  }}  }
class C{  private void initialize(Thread t,int state,Object lockObj,Thread lockOwner,long blockedCount,long blockedTime,long waitedCount,long waitedTime,StackTraceElement[] stackTrace,MonitorInfo[] lockedMonitors,LockInfo[] lockedSynchronizers){  this.threadId=t.getId();  this.threadName=t.getName();  this.threadState=ManagementFactoryHelper.toThreadState(state);  this.suspended=ManagementFactoryHelper.isThreadSuspended(state);  this.inNative=ManagementFactoryHelper.isThreadRunningNative(state);  this.blockedCount=blockedCount;  this.blockedTime=blockedTime;  this.waitedCount=waitedCount;  this.waitedTime=waitedTime;  if (lockObj == null) {    this.lock=null;    this.lockName=null;  } else {    this.lock=new LockInfo(lockObj);    this.lockName=lock.getClassName() + '@' + Integer.toHexString(lock.getIdentityHashCode());  }  if (lockOwner == null) {    this.lockOwnerId=-1;    this.lockOwnerName=null;  } else {    this.lockOwnerId=lockOwner.getId();    this.lockOwnerName=lockOwner.getName();  }  if (stackTrace == null) {    this.stackTrace=NO_STACK_TRACE;  } else {    this.stackTrace=stackTrace;  }  this.lockedMonitors=lockedMonitors;  this.lockedSynchronizers=lockedSynchronizers;}  }
class C{  public void testSubstringSharesBackingArray() throws IllegalAccessException {  String abcdefghij="ABCDEFGHIJ";  String cdefg=abcdefghij.substring(2,7);  assertSame(getBackingArray(abcdefghij),getBackingArray(cdefg));}  }
class C{  public boolean equals(Object obj){  if (obj instanceof CommandEnvironment) {    CommandEnvironment env=(CommandEnvironment)obj;    return ((command == null ? env.command == null : command.equals(env.command)) && Arrays.equals(options,env.options));  } else {    return false;  }}  }
class C{  @Override public void globalConfigChanged(String serviceName,String version,String groupName,String serviceComponent,int type){}  }
class C{  public Set<String> searchReferral(Subject adminSubject,String realm,String filter,int numOfEntries,boolean sortResults,boolean ascendingOrder) throws EntitlementException {  return search(adminSubject,realm,filter,numOfEntries,sortResults,ascendingOrder,REFERRAL_STORE);}  }
class C{  public void testtestIsLast() throws SQLException {  assertFalse(target.isLast());  target.absolute(-1);  assertTrue(target.isLast());  assertFalse(emptyTarget.isLast());  assertFalse(emptyTarget.next());  assertFalse(emptyTarget.isLast());  try {    target.close();    target.isLast();    fail("Should get SQLException");  } catch (  SQLException e) {  }}  }
class C{  private void clearDbs(){  try {    domainDB.removeDomain(baseDN);  } catch (  ChangelogException e) {    logger.error(ERR_ERROR_CLEARING_DB,baseDN,e.getMessage(),e);  }}  }
class C{  public static AppEventsLogger newLogger(Context context,String applicationId,Session session){  return new AppEventsLogger(context,applicationId,session);}  }
class C{  @DataProvider(name="createChildRDNTestData") public Object[][] createChildRDNTestData(){  return new Object[][]{{"","dc=org","dc=org"},{"dc=org","dc=opendj","dc=opendj,dc=org"},{"dc=opendj,dc=org","dc=foo","dc=foo,dc=opendj,dc=org"}};}  }
class C{  public void writeModifyDNResult(final int messageID,final Result result) throws IOException {  logger.trace("ENCODE LDAP MODIFY DN RESULT(messageID=%d, result=%s)",messageID,result);  writeMessageHeader(messageID);{    writeResultHeader(LDAP.OP_TYPE_MODIFY_DN_RESPONSE,result);    writeResultFooter(writer);  }  writeMessageFooter(result.getControls());}  }
class C{  public void test_parkFor_3() throws Exception {  CyclicBarrier barrier=new CyclicBarrier(1);  Parker parker=new Parker(barrier,false,1000);  Thread parkerThread=new Thread(parker);  UNSAFE.unpark(parkerThread);  parkerThread.start();  parker.assertDurationIsInRange(0);  parkerThread.join();}  }
class C{  public AttributeFieldParser(String attributeField){  this.lexer=new Lexer("charLexer",attributeField);}  }
class C{  public void paintToolTipBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String idName=getStringOptionValue(ARGUMENT_ID_NAME);  String type=getStringOptionValue(ARGUMENT_ID_TYPE);  IdType idType=convert2IdType(type);  String[] params={realm,type,idName};  try {    DelegationManager mgr=new DelegationManager(adminSSOToken,realm);    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_IDREPO_GET_PRIVILEGES",params);    AMIdentity amid;    if (idType.equals(IdType.ROLE) && idName.equalsIgnoreCase(ALL_AUTHENTICATED_USERS)) {      amid=new AMIdentity(adminSSOToken,idName,idType,"/",null);    } else {      amid=new AMIdentity(adminSSOToken,idName,idType,realm,null);      if (!amid.isExists()) {        Object[] p={idName,type};        throw new CLIException(MessageFormat.format(getResourceString("identity-does-not-exist"),p),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);      }    }    Set results=mgr.getPrivileges(amid.getUniversalId());    if ((results != null) && !results.isEmpty()) {      String[] param={""};      String msg=getResourceString("privilege-result");      for (Iterator i=results.iterator(); i.hasNext(); ) {        DelegationPrivilege p=(DelegationPrivilege)i.next();        param[0]=p.getName();        outputWriter.printlnMessage(MessageFormat.format(msg,(Object[])param));      }    } else {      outputWriter.printlnMessage(getResourceString("no-privileges"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_IDREPO_GET_PRIVILEGES",params);  } catch (  DelegationException e) {    String[] args={realm,type,idName,e.getMessage()};    debugError("GetPrivileges.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_GET_PRIVILEGES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  IdRepoException e) {    String[] args={realm,type,idName,e.getMessage()};    debugError("GetPrivileges.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_GET_PRIVILEGES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,type,idName,e.getMessage()};    debugError("GetPrivileges.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_GET_PRIVILEGES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  private static final int lastSlash(CharChunk name){  char[] c=name.getBuffer();  int end=name.getEnd();  int start=name.getStart();  int pos=end;  while (pos > start) {    if (c[--pos] == '/') {      break;    }  }  return (pos);}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    BufferedInputStream fis=null;    try {      fis=new BufferedInputStream(new FileInputStream(file));      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  public void error(SourceLocator srcLctr,String msg) throws TransformerException {  error(srcLctr,null,null,msg,null);}  }
class C{  public boolean isSplitForcedByNewline(){  return splitForcedByNewline;}  }
class C{  public char first(){  pos=offset;  if (count != 0) {    return array[pos];  }  return DONE;}  }
class C{  public static JDialog createDialog(Component c,String title,boolean modal,JColorChooser chooserPane,ActionListener okListener,ActionListener cancelListener) throws HeadlessException {  Window window=JOptionPane.getWindowForComponent(c);  ColorChooserDialog dialog;  if (window instanceof Frame) {    dialog=new ColorChooserDialog((Frame)window,title,modal,c,chooserPane,okListener,cancelListener);  } else {    dialog=new ColorChooserDialog((Dialog)window,title,modal,c,chooserPane,okListener,cancelListener);  }  dialog.getAccessibleContext().setAccessibleDescription(title);  return dialog;}  }
class C{  public void testSetSSLSocketFactory() throws Throwable {  SSLContext ctx=getContext();  SSLServerSocket ss=(SSLServerSocket)ctx.getServerSocketFactory().createServerSocket(0);  TestHostnameVerifier hnv=new TestHostnameVerifier();  HttpsURLConnection.setDefaultHostnameVerifier(hnv);  URL url=new URL("https://localhost:" + ss.getLocalPort());  HttpsURLConnection connection=(HttpsURLConnection)url.openConnection();  SSLSocketFactory socketFactory=(SSLSocketFactory)ctx.getSocketFactory();  connection.setSSLSocketFactory(socketFactory);  TestHostnameVerifier hnv_late=new TestHostnameVerifier();  HttpsURLConnection.setDefaultHostnameVerifier(hnv_late);  SSLSocket peerSocket=(SSLSocket)doInteraction(connection,ss);  checkConnectionStateParameters(connection,peerSocket);  assertTrue("Hostname verification was not done",hnv.verified);  assertFalse("Hostname verification should not be done by this verifier",hnv_late.verified);  assertNotSame("Default SSLSocketFactory should not be used",HttpsURLConnection.getDefaultSSLSocketFactory(),connection.getSSLSocketFactory());  assertSame("Result differs from expected",socketFactory,connection.getSSLSocketFactory());  connection.connect();}  }
class C{  public boolean isMember(SSOToken token) throws SSOException {  boolean ismember=false;  int errCode=0;  if ((token != null) && (SSOTokenManager.getInstance().isValidToken(token))) {    try {      String userDN=null;      String userDNUnivId=null;      AMIdentity amId=IdUtils.getIdentity(token);      IdType idType=amId.getType();      userDN=amId.getName();      userDNUnivId=amId.getUniversalId();      if (debug.messageEnabled()) {        debug.message("AuthenticatedSharedAgents:isMember:" + "idType = " + idType + ", userDN = "+ userDN);      }      if ((userDN != null) && (idType.equals(IdType.AGENT) || idType.equals(IdType.AGENTONLY))) {        String rlmName=amId.getRealm();        if (isSharedAgent(token,userDN,userDNUnivId,rlmName)) {          errCode=1;          if (debug.messageEnabled()) {            debug.message("AuthenticatedSharedAgents:isMember:" + "YES");          }        } else {          if (debug.messageEnabled()) {            debug.message("AuthenticatedSharedAgents:isMember:" + "NO");          }        }      } else {        if (debug.messageEnabled()) {          debug.message("AuthenticatedSharedAgents.isMember():" + "userDN is null or invalid IdType " + userDN + "IdType :"+ idType);          debug.message("AuthenticatedSharedAgents.isMember():" + "returning false");        }        errCode=0;      }    } catch (    IdRepoException ire) {      debug.error("AuthenticatedSharedAgents:isMember:" + " IdRepoException:msg = " + ire.getMessage());      errCode=0;    }    if (errCode == 1) {      ismember=true;    }  }  return ismember;}  }
class C{  public boolean isAggregatedType(){  return false;}  }
class C{  private ZipExtractor(File zipFile,int minRatio,int maxRatio,int numberZipEntries,Application app) throws FileNotFoundException, IllegalArgumentException {  this(new FileInputStream(zipFile),minRatio,maxRatio,numberZipEntries,zipFile.getName(),app);  if (!zipFile.getName().endsWith(".zip")) {    throw new IllegalArgumentException("File must have extension .zip");  }}  }
class C{  public DATA_CONVERSION(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  DateTimeParseContext(DateTimeFormatter formatter){  super();  this.formatter=formatter;  parsed.add(new Parsed());}  }
class C{  public ContainerEvent(Container container,String type,Object data){  super(container);  this.type=type;  this.data=data;}  }
class C{  public void test_parkFor_2() throws Exception {  CyclicBarrier barrier=new CyclicBarrier(2);  Parker parker=new Parker(barrier,false,1000);  Thread parkerThread=new Thread(parker);  Thread waiterThread=new Thread(new WaitAndUnpark(barrier,300,parkerThread));  parkerThread.start();  waiterThread.start();  parker.assertDurationIsInRange(300);  waiterThread.join();  parkerThread.join();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.MustSupportRefEmbeddedTokenElement createMustSupportRefEmbeddedTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.MustSupportRefEmbeddedTokenElementImpl();}  }
class C{  public String generateName(final IntUnaryOperator randomInRange,final int length,final char startingSymbol){  if (length == 0) {    return "LENGTH_WAS_ZERO";  }  final StringBuilder sb=new StringBuilder();  sb.append(startingSymbol);  while (sb.length() < length) {    for (int i=0; i < sb.length(); i++) {      final char currentChar=sb.charAt(i);      final boolean isCurrentCharUpperCase=Character.isUpperCase(currentChar);      if (isCurrentCharUpperCase) {        final String substitution=chooseRandomRuleOption(randomInRange,currentChar);        if (substitution != null) {          String temp=sb.toString();          temp=temp.replace(String.valueOf(currentChar),substitution);          sb.setLength(0);          sb.append(temp);          i--;        }      }    }    if (sb.length() < length) {      sb.setLength(0);      sb.append(startingSymbol);    }  }  if (length >= 0) {    return sb.substring(0,length);  } else {    return sb.toString();  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  validateRealm(realm);  String[] params={realm};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_LIST_DATASTORES",params);  try {    ServiceConfigManager svcCfgMgr=new ServiceConfigManager(IdConstants.REPO_SERVICE,adminSSOToken);    ServiceConfig cfg=svcCfgMgr.getOrganizationConfig(realm,null);    Set names=(cfg != null) ? cfg.getSubConfigNames() : Collections.EMPTY_SET;    if ((names != null) && !names.isEmpty()) {      getOutputWriter().printlnMessage(getResourceString("datastore-list-datastores-succeeded"));      for (Iterator i=names.iterator(); i.hasNext(); ) {        String name=(String)i.next();        getOutputWriter().printlnMessage(name);      }    } else {      getOutputWriter().printlnMessage(getResourceString("datastore-list-datastores-no-entries"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_LIST_DATASTORES",params);  } catch (  SMSException e) {    debugError("ListDataStores.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_DATASTORES",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    debugError("ListDataStores.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_DATASTORES",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public RestAuthException(int responseStatus,Throwable throwable){  super(throwable);  statusCode=responseStatus;}  }
class C{  public Class<?> loadClass(String name,Map<String,byte[]> classBytes) throws ClassNotFoundException, IOException {  try (MemoryClassLoader classLoader=new MemoryClassLoader(classBytes)){    return classLoader.loadClass(name);  } }  }
class C{  public DirectoryException(ResultCode resultCode,LocalizableMessage errorMessage,DN matchedDN,List<String> referralURLs,Throwable cause){  super(errorMessage,cause);  this.resultCode=resultCode;  this.matchedDN=matchedDN;  this.referralURLs=referralURLs;}  }
class C{  public synchronized Iterator<NSObject> objectIterator(){  return set.iterator();}  }
class C{  private byte postDecryption(CipherState state,ByteBuffer inByteBuffer,long position,byte[] iv) throws IOException {  byte padding=0;  if (state.isReset()) {    resetCipher(state,position,iv);    padding=getPadding(position);    inByteBuffer.position(padding);  }  return padding;}  }
class C{  public int hashCode(){  int hash=0;  if (subject != null) {    hash=hash + this.subject.hashCode();  }  if (codesource != null) {    hash=hash + this.codesource.hashCode();  }  if (protectionDomain != null) {    hash=hash + this.protectionDomain.hashCode();  }  if (serviceName != null) {    hash=hash + this.serviceName.hashCode();  }  if (resourceName != null) {    hash=hash + this.resourceName.hashCode();  }  if (actions != null) {    Set actionSet=actionsInSet(actions);    hash=hash + actionSet.hashCode();  }  if (envParams != null) {    hash=hash + this.envParams.hashCode();  }  if (debug.messageEnabled()) {    debug.message("ISPermission::hashCode::" + hash);  }  return hash;}  }
class C{  public static void startupDelay(){  sleep(500);}  }
class C{  public void insert_wchar(char value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_wchar",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    $self.insert_wchar(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static String toUTCDateFormatWithMilliseconds(final Date date){  return dateToString(date,UTC_DATE_MILLISECONDS_Z_FORMAT,UTC_TIME_ZONE);}  }
class C{  public static PrintJobAttributeSet synchronizedView(PrintJobAttributeSet attributeSet){  if (attributeSet == null) {    throw new NullPointerException();  }  return new SynchronizedPrintJobAttributeSet(attributeSet);}  }
class C{  public SAML2ConfigBuilder signatureKeyAlias(String signatureKeyAlias){  this.signatureKeyAlias=signatureKeyAlias;  return this;}  }
class C{  public final void errPrintln(){  getErrStream().println();}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  TestCaseUtils.initializeTestBackend(true);  TestCaseUtils.clearBackend("userRoot","dc=example,dc=com");}  }
class C{  public boolean isInteractive(){  return !noPromptArg.isPresent();}  }
class C{  private static boolean isCharacterInC0orC1Range(char ch){  if (ch == 0x09 || ch == 0x0A || ch == 0x0D)   return false; else   return (ch >= 0x7F && ch <= 0x9F) || (ch >= 0x01 && ch <= 0x1F);}  }
class C{  @Override public void unparsedEntityDecl(String name,String publicId,String systemId,String notation){  if (saxLog.isDebugEnabled()) {    saxLog.debug("unparsedEntityDecl(" + name + ","+ publicId+ ","+ systemId+ ","+ notation+ ")");  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Node textNode;  int nodeType;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testAddr=(Element)elementList.item(0);  textNode=testAddr.getFirstChild();  nodeType=(int)textNode.getNodeType();  assertEquals("nodeTextNodeTypeAssert1",3,nodeType);}  }
class C{  public void logAddResponse(AddOperation addOperation){}  }
class C{  public void readSet(ASN1Set set) throws IOException {  if (tag != ASN1Constants.TAG_C_SET) {    throw expected("set");  }  throw new ASN1Exception("Decoding ASN.1 Set type is not supported");}  }
class C{  public DTMIterator cloneWithReset() throws CloneNotSupportedException {  NodeSequence seq=(NodeSequence)super.clone();  seq.m_next=0;  if (m_cache != null) {    m_cache.increaseUseCount();  }  return seq;}  }
class C{  public void start(){  if (getServer() == null) {    load();  }  if (getServer() == null) {    log.fatal("Cannot start server. Server instance is not configured.");    return;  }  long t1=System.nanoTime();  try {    getServer().start();  } catch (  LifecycleException e) {    log.fatal(sm.getString("catalina.serverStartFail"),e);    try {      getServer().destroy();    } catch (    LifecycleException e1) {      log.debug("destroy() failed for failed Server ",e1);    }    return;  }  long t2=System.nanoTime();  if (log.isInfoEnabled()) {    log.info("Server startup in " + ((t2 - t1) / 1000000) + " ms");  }  if (useShutdownHook) {    if (shutdownHook == null) {      shutdownHook=new CatalinaShutdownHook();    }    Runtime.getRuntime().addShutdownHook(shutdownHook);    LogManager logManager=LogManager.getLogManager();    if (logManager instanceof ClassLoaderLogManager) {      ((ClassLoaderLogManager)logManager).setUseShutdownHook(false);    }  }  if (await) {    await();    stop();  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.X509IssuerSerialType createX509IssuerSerialType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.X509IssuerSerialTypeImpl();}  }
class C{  public Element signWithWSSSAMLTokenProfile(Document doc,java.security.cert.Certificate cert,String assertionID,String algorithm,List ids,String wsfVersion) throws XMLSignatureException {  if (doc == null) {    SAMLUtilsCommon.debug.error("signXML: doc is null.");    throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  if (cert == null) {    SAMLUtilsCommon.debug.error("signWithWSSSAMLTokenProfile: " + "Certificate is null");    throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  if (assertionID == null) {    SAMLUtilsCommon.debug.error("signWithWSSSAMLTokenProfile: " + "AssertionID is null");    throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  this.wsfVersion=wsfVersion;  String wsseNS=SAMLConstants.NS_WSSE;  String wsuNS=SAMLConstants.NS_WSU;  if ((wsfVersion != null) && (wsfVersion.equals(SOAPBindingConstants.WSF_11_VERSION))) {    wsseNS=WSSEConstants.NS_WSSE_WSF11;    wsuNS=WSSEConstants.NS_WSU_WSF11;  }  Element root=(Element)doc.getDocumentElement().getElementsByTagNameNS(wsseNS,SAMLConstants.TAG_SECURITY).item(0);  XMLSignature signature=null;  try {    ElementProxy.setDefaultPrefix(Constants.SignatureSpecNS,SAMLConstants.PREFIX_DS);    Element wsucontext=org.apache.xml.security.utils.XMLUtils.createDSctx(doc,"wsu",wsuNS);    NodeList wsuNodes=(NodeList)XPathAPI.selectNodeList(doc,"//*[@wsu:Id]",wsucontext);    if (wsuNodes != null && wsuNodes.getLength() != 0) {      for (int i=0; i < wsuNodes.getLength(); i++) {        Element elem=(Element)wsuNodes.item(i);        String id=elem.getAttributeNS(wsuNS,"Id");        if (id != null && id.length() != 0) {          elem.setIdAttributeNS(wsuNS,"Id",true);        }      }    }    String certAlias=keystore.getCertificateAlias(cert);    PrivateKey privateKey=(PrivateKey)keystore.getPrivateKey(certAlias);    if (privateKey == null) {      SAMLUtilsCommon.debug.error("private key is null");      throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullprivatekey"));    }    if (algorithm == null || algorithm.length() == 0) {      algorithm=getKeyAlgorithm(privateKey);    }    if (!isValidAlgorithm(algorithm)) {      throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("invalidalgorithm"));    }    signature=new XMLSignature(doc,"",algorithm,Canonicalizer.ALGO_ID_C14N_EXCL_OMIT_COMMENTS);    root.appendChild(signature.getElement());    int size=ids.size();    for (int i=0; i < size; ++i) {      Transforms transforms=new Transforms(doc);      transforms.addTransform(Transforms.TRANSFORM_C14N_EXCL_OMIT_COMMENTS);      String id=(String)ids.get(i);      if (SAMLUtilsCommon.debug.messageEnabled()) {        SAMLUtilsCommon.debug.message("id = " + id);      }      signature.addDocument("#" + id,transforms,digestAlg);    }    KeyInfo keyInfo=signature.getKeyInfo();    Element securityTokenRef=doc.createElementNS(wsseNS,SAMLConstants.TAG_SECURITYTOKENREFERENCE);    keyInfo.addUnknownElement(securityTokenRef);    securityTokenRef.setAttributeNS(SAMLConstants.NS_XMLNS,SAMLConstants.TAG_XMLNS,wsseNS);    securityTokenRef.setAttributeNS(SAMLConstants.NS_XMLNS,SAMLConstants.TAG_XMLNS_SEC,SAMLConstants.NS_SEC);    securityTokenRef.setAttributeNS(null,SAMLConstants.TAG_USAGE,SAMLConstants.TAG_SEC_MESSAGEAUTHENTICATION);    Element reference=doc.createElementNS(wsseNS,SAMLConstants.TAG_REFERENCE);    reference.setAttributeNS(null,SAMLConstants.TAG_URI,"#" + assertionID);    securityTokenRef.appendChild(reference);    signature.sign(privateKey);  } catch (  Exception e) {    SAMLUtilsCommon.debug.error("signWithWSSX509TokenProfile " + "Exception: ",e);    throw new XMLSignatureException(e.getMessage());  }  if (SAMLUtilsCommon.debug.messageEnabled()) {    SAMLUtilsCommon.debug.message("SAML Signed doc = " + XMLUtils.print(doc.getDocumentElement()));  }  return signature.getElement();}  }
class C{  public static Application newApplication(String name,ApplicationType applicationType) throws EntitlementException {  Class clazz=applicationType.getApplicationClass();  Class[] parameterTypes={String.class,ApplicationType.class};  Constructor constructor;  try {    constructor=clazz.getConstructor(parameterTypes);    Object[] parameters={name,applicationType};    return (Application)constructor.newInstance(parameters);  } catch (  NoSuchMethodException|SecurityException|IllegalAccessException|InstantiationException|IllegalArgumentException|InvocationTargetException ex) {    throw new EntitlementException(INVALID_APPLICATION_CLASS,ex);  }}  }
class C{  public static boolean isDouble(String desc){  return desc.endsWith("D");}  }
class C{  public static void explainFallback(Activity activity){  explainFallback(activity,MESSAGE_FALLBACK);}  }
class C{  @PostConstruct public void initApplication(){  log.info("Running with Spring profile(s) : {}",Arrays.toString(env.getActiveProfiles()));  Collection<String> activeProfiles=Arrays.asList(env.getActiveProfiles());  if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_PRODUCTION)) {    log.error("You have misconfigured your application! It should not run " + "with both the 'dev' and 'prod' profiles at the same time.");  }  if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_CLOUD)) {    log.error("You have misconfigured your application! It should not" + "run with both the 'dev' and 'cloud' profiles at the same time.");  }}  }
class C{  public String toXMLString() throws SAML2Exception {  return this.toXMLString(true,false);}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entElement;  Node entElementContent;  Node entReference;  int nodeType;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entReference=genderNode.getFirstChild();  assertNotNull("entReferenceNotNull",entReference);  nodeType=(int)entReference.getNodeType();  if (equals(1,nodeType)) {    entReference=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entReference);  }  entElement=entReference.getFirstChild();  assertNotNull("entElementNotNull",entElement);  entElementContent=entElement.getFirstChild();  assertNotNull("entElementContentNotNull",entElementContent);{    boolean success=false;    try {      ((CharacterData)entElementContent).appendData("newString");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public List<List<AttributeTypeAndValue>> parse() throws IOException {  List<List<AttributeTypeAndValue>> list=new ArrayList<List<AttributeTypeAndValue>>();  String attType=nextAT();  if (attType == null) {    return list;  }  ObjectIdentifier oid=AttributeTypeAndValue.getObjectIdentifier(attType);  List<AttributeTypeAndValue> atav=new ArrayList<AttributeTypeAndValue>();  while (true) {    if (pos == chars.length) {      atav.add(new AttributeTypeAndValue(oid,new AttributeValue("",false,oid)));      list.add(0,atav);      return list;    }switch (chars[pos]) {case '"':      atav.add(new AttributeTypeAndValue(oid,new AttributeValue(quotedAV(),hasQE,oid)));    break;case '#':  atav.add(new AttributeTypeAndValue(oid,new AttributeValue(hexAV(),encoded)));break;case '+':case ',':case ';':atav.add(new AttributeTypeAndValue(oid,new AttributeValue("",false,oid)));break;default :atav.add(new AttributeTypeAndValue(oid,new AttributeValue(escapedAV(),hasQE,oid)));}if (pos >= chars.length) {list.add(0,atav);return list;}if (chars[pos] == ',' || chars[pos] == ';') {list.add(0,atav);atav=new ArrayList<AttributeTypeAndValue>();} else if (chars[pos] != '+') {throw new IOException("Invalid distinguished name string");}pos++;attType=nextAT();if (attType == null) {throw new IOException("Invalid distinguished name string");}oid=AttributeTypeAndValue.getObjectIdentifier(attType);}}  }
class C{  public boolean canTraverseOutsideSubtree(){  int n=getPredicateCount();  for (int i=0; i < n; i++) {    if (getPredicate(i).canTraverseOutsideSubtree())     return true;  }  return false;}  }
class C{  TemplateLine(final AttributeType attributeType,final int lineNumber,final List<TemplateTag> tags){  this(attributeType,lineNumber,tags,false,false);}  }
class C{  @Override public void nullifyUsedVars(){  authLevel=null;  amAuthOATH=null;}  }
class C{  public TRANSACTION_MODE(){  this("");}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.ReferenceToken11Element createReferenceToken11Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.ReferenceToken11ElementImpl();}  }
class C{  public void addAccessibleSelection(int i){  int j=getSelectionModel().getSelectedIndex();  if (i == j) {    return;  }  if (j >= 0 && j < getMenuCount()) {    JMenu menu=getMenu(j);    if (menu != null) {      MenuSelectionManager.defaultManager().setSelectedPath(null);    }  }  getSelectionModel().setSelectedIndex(i);  JMenu menu=getMenu(i);  if (menu != null) {    MenuElement me[]=new MenuElement[3];    me[0]=JMenuBar.this;    me[1]=menu;    me[2]=menu.getPopupMenu();    MenuSelectionManager.defaultManager().setSelectedPath(me);  }}  }
class C{  private void addEntries(String... dns) throws Exception {  for (  String dn : dns) {    addEntry(dn);  }}  }
class C{  String formatItemNum(int itemNum,char type){  String numStyle="1";  boolean uppercase=false;  String formattedNum;switch (type) {case '1':default :    formattedNum=String.valueOf(itemNum);  break;case 'A':uppercase=true;case 'a':formattedNum=formatAlphaNumerals(itemNum);break;case 'I':uppercase=true;case 'i':formattedNum=formatRomanNumerals(itemNum);}if (uppercase) {formattedNum=formattedNum.toUpperCase();}return formattedNum;}  }
class C{  public RhinoSandboxClassShutter(final SecurityManager securityManager,final List<Pattern> whiteList,final List<Pattern> blackList){  Reject.ifNull(whiteList,blackList);  this.securityManager=securityManager;  this.whiteList=new ArrayList<Pattern>(whiteList);  this.blackList=new ArrayList<Pattern>(blackList);}  }
class C{  private void createLocaleEntry(String val){  StringTokenizer tok1=new StringTokenizer(val,"|");  String localeValue=null;  LinkedList charsetList=null;  while (tok1.hasMoreElements()) {    String element=tok1.nextToken();    StringTokenizer pairTok=new StringTokenizer(element,"=");    if (pairTok.countTokens() == 2) {      String key=pairTok.nextToken();      key=key.trim();      String value=pairTok.nextToken();      if (key.equalsIgnoreCase("locale")) {        localeValue=value.toLowerCase();      }      int charsetCount=0;      if (key.equalsIgnoreCase("charset")) {        charsetList=new LinkedList();        StringTokenizer charsetTokenizer=new StringTokenizer(value,";");        while (charsetTokenizer.hasMoreElements()) {          String charsetVal=charsetTokenizer.nextToken();          charsetList.add(charsetVal);          charsetCount++;        }      }    }  }  if (charsetList != null && localeValue != null) {    localeCharset.put(localeValue,charsetList);    if (debug.messageEnabled()) {      debug.message("G11NSettings Locale = " + localeValue + "\tAllowed charset are "+ charsetList);    }  }}  }
class C{  public static ResultCode addEntryOperation(String... lines) throws Exception {  Entry entry=makeEntry(lines);  AddOperation addOperation=getRootConnection().processAdd(entry);  return addOperation.getResultCode();}  }
class C{  public boolean isSecure(){  return this.firstTransactionSecure;}  }
class C{  private InetSocketAddress nextInetSocketAddress() throws UnknownHostException {  InetSocketAddress result=new InetSocketAddress(socketAddresses[nextSocketAddressIndex++],socketPort);  if (nextSocketAddressIndex == socketAddresses.length) {    socketAddresses=null;    nextSocketAddressIndex=0;  }  return result;}  }
class C{  public void transformNode(int node,Result outputTarget) throws TransformerException {  SerializationHandler xoh=createSerializationHandler(outputTarget);  this.setSerializationHandler(xoh);  m_outputTarget=outputTarget;  transformNode(node);}  }
class C{  public com.sun.identity.liberty.ws.authnsvc.jaxb.PasswordTransformsType.TransformType createPasswordTransformsTypeTransformType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.authnsvc.jaxb.impl.PasswordTransformsTypeImpl.TransformTypeImpl();}  }
class C{  public Cursor fetch(Long ruleActionID){  if (ruleActionID == null) {    throw new IllegalArgumentException("primary key null.");  }  Cursor mCursor=database.query(true,DATABASE_TABLE,KEYS,KEY_RULEACTIONID + "=" + ruleActionID,null,null,null,null,null);  if (mCursor != null) {    mCursor.moveToFirst();  }  return mCursor;}  }
class C{  public int hashCode(){  return super.hashCode();}  }
class C{  public void commit(CSN csn){  pendingChangesWriteLock.lock();  try {    PendingChange curChange=pendingChanges.get(csn);    if (curChange == null) {      throw new NoSuchElementException();    }    curChange.setCommitted(true);    activeAndDependentChanges.remove(curChange);    final Iterator<PendingChange> it=pendingChanges.values().iterator();    while (it.hasNext()) {      PendingChange pendingChange=it.next();      if (!pendingChange.isCommitted()) {        break;      }      if (pendingChange.getMsg().contributesToDomainState()) {        state.update(pendingChange.getCSN());      }      it.remove();    }  }  finally {    pendingChangesWriteLock.unlock();  }}  }
class C{  public void debugError(String message){  debug.error(message);}  }
class C{  public PAOSRequest(Element element) throws PAOSException {  parseElement(element);}  }
class C{  protected boolean shouldPaintExpandControl(TreePath path,int row,boolean isExpanded,boolean hasBeenExpanded,boolean isLeaf){  if (isLeaf)   return false;  int depth=path.getPathCount() - 1;  if ((depth == 0 || (depth == 1 && !isRootVisible())) && !getShowsRootHandles())   return false;  return true;}  }
class C{  public final void testEqualsObject01(){  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  assertTrue(c1.equals(c1));}  }
class C{  public void testSocket_Block_ActionsAfterConnect() throws IOException {  assertFalse(this.channel1.isConnected());  this.channel1.connect(localAddr1);  DatagramSocket s=this.channel1.socket();  assertSocketActionAfterConnect(s);}  }
class C{  private void unregisterWithKeyboardManager(){  Hashtable<KeyStroke,KeyStroke> registered=(Hashtable<KeyStroke,KeyStroke>)getClientProperty(WHEN_IN_FOCUSED_WINDOW_BINDINGS);  if (registered != null && registered.size() > 0) {    Enumeration<KeyStroke> keys=registered.keys();    while (keys.hasMoreElements()) {      KeyStroke ks=keys.nextElement();      unregisterWithKeyboardManager(ks);    }  }  putClientProperty(WHEN_IN_FOCUSED_WINDOW_BINDINGS,null);}  }
class C{  public java.lang.String signXML(java.lang.String xmlString,java.lang.String certAlias,java.lang.String algorithm,java.lang.String id) throws XMLSignatureException {  return sp.signXML(xmlString,certAlias,algorithm,id);}  }
class C{  public long insert(Long failedActionID,String actionParameterName,String failedActionParameterData){  if (failedActionID == null || actionParameterName == null || failedActionParameterData == null) {    throw new IllegalArgumentException("insert parameter null.");  }  ContentValues initialValues=new ContentValues();  initialValues.put(KEY_FAILEDACTIONID,failedActionID);  initialValues.put(KEY_ACTIONPARAMETERNAME,actionParameterName);  initialValues.put(KEY_FAILEDACTIONPARAMETERDATA,failedActionParameterData);  return database.insert(DATABASE_TABLE,null,initialValues);}  }
class C{  protected static Vector<FieldContainer> findFields(AttributedCharacterIterator iterator){  Vector<FieldContainer> result=new Vector<FieldContainer>();  while (iterator.getIndex() != iterator.getEndIndex()) {    int start=iterator.getRunStart();    int end=iterator.getRunLimit();    Iterator<Attribute> it=iterator.getAttributes().keySet().iterator();    while (it.hasNext()) {      AttributedCharacterIterator.Attribute attribute=it.next();      Object value=iterator.getAttribute(attribute);      result.add(new FieldContainer(start,end,attribute,value));    }    iterator.setIndex(end);  }  return result;}  }
class C{  public static long parseLong(String string,int radix) throws NumberFormatException {  if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX) {    throw new NumberFormatException("Invalid radix: " + radix);  }  if (string == null) {    throw invalidLong(string);  }  int length=string.length(), i=0;  if (length == 0) {    throw invalidLong(string);  }  boolean negative=string.charAt(i) == '-';  if (negative && ++i == length) {    throw invalidLong(string);  }  return parse(string,i,radix,negative);}  }
class C{  public static List<String> matchDescriptionClasses(String desc){  String pattern="(?<=L).*?(?=[<;(])";  Pattern pat=Pattern.compile(pattern);  Matcher m=pat.matcher(desc);  List<String> matches=new ArrayList<String>();  while (m.find()) {    matches.add(m.group());  }  return matches;}  }
class C{  @Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  if (!(request instanceof HttpServletRequest) || !(response instanceof HttpServletResponse)) {    chain.doFilter(request,response);    return;  }  HttpServletRequest httpRequest=((HttpServletRequest)request);  HttpServletResponse httpResponse=((HttpServletResponse)response);  String ua=httpRequest.getHeader("User-Agent");  if (ua == null || ua.length() == 0 || !ua.startsWith(UA_MINIDIR_START)) {    chain.doFilter(request,response);  } else   if (ua.startsWith(UA_MINIDIR_5_1_2600)) {    httpResponse.sendRedirect(buildRedirect(httpRequest));  } else   if (ua.startsWith(UA_MINIDIR_5_2_3790)) {    if (!"".equals(httpRequest.getContextPath())) {      log(httpRequest,"XP-x64-SP2 clients only work with the root context");    }    log(httpRequest,"XP-x64-SP2 is known not to work with WebDAV Servlet");    chain.doFilter(request,response);  } else {    httpResponse.sendRedirect(buildRedirect(httpRequest));  }}  }
class C{  private int distance(Node v1,Node v2){  int g=0;  Node v=v1;  while (v.parent != null) {    g++;    v=v.parent;  }  int h=(int)(Math.sqrt((v1.x - v2.x) * (v1.x - v2.x) + (v1.y - v2.y) * (v1.y - v2.y)) / unit) + 1;  return g + h;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetelementbyid01.class,args);}  }
class C{  public org.omg.CORBA.TypeCode _type(){  return ORB.init().get_primitive_tc(TCKind.tk_longlong);}  }
class C{  protected void handleJvmRoute(Request request,String sessionId,String localJvmRoute){  String requestJvmRoute=null;  int index=sessionId.indexOf('.');  if (index > 0) {    requestJvmRoute=sessionId.substring(index + 1,sessionId.length());  }  if (requestJvmRoute != null && !requestJvmRoute.equals(localJvmRoute)) {    if (log.isDebugEnabled()) {      log.debug(sm.getString("jvmRoute.failover",requestJvmRoute,localJvmRoute,sessionId));    }    Session catalinaSession=null;    try {      catalinaSession=getManager(request).findSession(sessionId);    } catch (    IOException e) {    }    String id=sessionId.substring(0,index);    String newSessionID=id + "." + localJvmRoute;    if (catalinaSession != null) {      changeSessionID(request,sessionId,newSessionID,catalinaSession);      numberOfSessions++;    } else {      try {        catalinaSession=getManager(request).findSession(newSessionID);      } catch (      IOException e) {      }      if (catalinaSession != null) {        changeRequestSessionID(request,sessionId,newSessionID);      } else {        if (log.isDebugEnabled()) {          log.debug(sm.getString("jvmRoute.cannotFindSession",sessionId));        }      }    }  }}  }
class C{  public void addNotification(Notification notification){  notificationVector.addElement(notification);}  }
class C{  public boolean isPaused(){  return paused;}  }
class C{  private static int arrayIndex(int i){  return (i >> SHIFT_PER_WORD);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr streetAttr;  String attribute;  Attr removedAttr;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(2);  streetAttr=testEmployee.getAttributeNode("street");  removedAttr=testEmployee.removeAttributeNode(streetAttr);  attribute=testEmployee.getAttribute("street");  assertEquals("streetYes","Yes",attribute);}  }
class C{  public void cleanDomainMap(String canonOrgDN){synchronized (canonicalDomainMap) {    canonicalDomainMap.remove(canonOrgDN);  }synchronized (domainMap) {    domainMap.remove(canonOrgDN);  }}  }
class C{  private void parse_map() throws SyntaxException {  LineCol lineCol=current.getLineCol();  nextNode(false);  if (current instanceof Element) {    expecting("}",current.previous(),current,err);    parsedExps.push(new AST.MapExp(new LinkedHashMap<>(),lineCol));    nextNode(true);  } else {    expecting("}",current,current.next() == null ? null : current.next().next(),err);    parsedExps.push(parseExpMap((ElementStartNode)current));    nextNode(false);    nextNode(true);  }  parse_expression();}  }
class C{  public DataTruncation(int index,boolean parameter,boolean read,int dataSize,int transferSize,Throwable cause){  super("Data truncation",read == true ? "01004" : "22001",cause);  this.index=index;  this.parameter=parameter;  this.read=read;  this.dataSize=dataSize;  this.transferSize=transferSize;}  }
class C{  public OrSubject(){  super();}  }
class C{  public void endDocument() throws SAXException {  if (contentHandler != null) {    contentHandler.endDocument();  }}  }
class C{  @Override public void close() throws IOException {  close(GOAWAY_OK,SpdyStream.RST_CANCEL);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.WrittenConsentType createWrittenConsentType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.WrittenConsentTypeImpl();}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);  }  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiDecode=DECODABET[source[i] & 0xFF];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=source[i];        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (source[i] == EQUALS_SIGN) {            break;          }        }      }    } else {      throw new java.io.IOException(String.format("Bad Base64 input character decimal %d in array position %d",((int)source[i]) & 0xFF,i));    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  void reExecutePeriodic(RunnableScheduledFuture<?> task){  if (canRunInCurrentRunState(true)) {    super.getQueue().add(task);    if (!canRunInCurrentRunState(true) && remove(task))     task.cancel(false); else     ensurePrestart();  }}  }
class C{  private void updateRingColor(float interpolatedTime,Ring ring){  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));  }}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiScrollPaneUI();  return MultiLookAndFeel.createUIs(mui,((MultiScrollPaneUI)mui).uis,a);}  }
class C{  public XMLWriter(){  this(null);}  }
class C{  public void test_ConstructorILjava_lang_StringIIIIIIIII(){  SimpleTimeZone st=new SimpleTimeZone(1000,"TEST",Calendar.NOVEMBER,1,Calendar.SUNDAY,0,Calendar.NOVEMBER,-1,Calendar.SUNDAY,0,1000 * 60 * 60);  assertTrue("Incorrect TZ constructed",st.inDaylightTime(new GregorianCalendar(1998,Calendar.NOVEMBER,13).getTime()));  assertTrue("Incorrect TZ constructed",!(st.inDaylightTime(new GregorianCalendar(1998,Calendar.OCTOBER,13).getTime())));  assertEquals("Incorrect TZ constructed","TEST",st.getID());  assertEquals("Incorrect TZ constructed",1000,st.getRawOffset());  assertTrue("Incorrect TZ constructed",st.useDaylightTime());  assertTrue("Incorrect TZ constructed",st.getDSTSavings() == 1000 * 60 * 60);  try {    new SimpleTimeZone(1000,"TEST",12,1,Calendar.SUNDAY,0,Calendar.NOVEMBER,-1,Calendar.SUNDAY,0,1000 * 60 * 60);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new SimpleTimeZone(1000,"TEST",Calendar.NOVEMBER,10,Calendar.SUNDAY,0,Calendar.NOVEMBER,-1,Calendar.SUNDAY,0,1000 * 60 * 60);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new SimpleTimeZone(1000,"TEST",Calendar.NOVEMBER,1,10,0,Calendar.NOVEMBER,-1,Calendar.SUNDAY,0,1000 * 60 * 60);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new SimpleTimeZone(1000,"TEST",Calendar.DECEMBER,1,Calendar.SUNDAY,0,Calendar.NOVEMBER,-10,Calendar.SUNDAY,0,1000 * 60 * 60);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public void testConstrInt(){  int a=732546982;  String res="732546982";  int resScale=0;  BigDecimal result=new BigDecimal(a);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  protected Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public Polyline rotate_90_deg(int p_factor,PlaPointInt p_pole){  int alist_len=plaline_len();  PlaLineIntAlist new_arr=new PlaLineIntAlist(alist_len);  for (int index=0; index < alist_len; ++index) {    new_arr.add(plaline(index).rotate_90_deg(p_factor,p_pole));  }  return new Polyline(new_arr);}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  try {    System.out.println("shootme: got an ACK " + requestEvent.getRequest());    int ackCount=((ApplicationData)dialog.getApplicationData()).ackCount;    if (ackCount == 1) {      dialog=inviteTid.getDialog();      Request byeRequest=dialog.createRequest(Request.BYE);      ClientTransaction tr=sipProvider.getNewClientTransaction(byeRequest);      System.out.println("shootme: got an ACK -- sending bye! ");      dialog.sendRequest(tr);      System.out.println("Dialog State = " + dialog.getState());    } else     ((ApplicationData)dialog.getApplicationData()).ackCount++;  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  protected void checkResponse(Map<?,?> response) throws XmlRpcFault {  String status=(String)response.get("status");  if (status == null || status.equals("200 OK")) {    return;  }  try {    throw new XmlRpcFault(new Scanner(status).nextInt(),status);  } catch (  NoSuchElementException e) {    throw new XmlRpcException("Illegal status code: " + status);  }}  }
class C{  public PdfCanvas rectangle(double x,double y,double width,double height){  contentStream.getOutputStream().writeDouble(x).writeSpace().writeDouble(y).writeSpace().writeDouble(width).writeSpace().writeDouble(height).writeSpace().writeBytes(re);  return this;}  }
class C{  public boolean isDebugMode(){  return this.debug;}  }
class C{  private void updateServerDescriptor(ConfigReader reader,ServerDescriptor desc){  desc.setExceptions(reader.getExceptions());  desc.setAdministrativeUsers(reader.getAdministrativeUsers());  desc.setBackends(reader.getBackends());  desc.setConnectionHandlers(reader.getConnectionHandlers());  desc.setAdminConnector(reader.getAdminConnector());  desc.setSchema(reader.getSchema());  desc.setSchemaEnabled(reader.isSchemaEnabled());}  }
class C{  private static boolean verifyResponseIssuer(String realm,String pepEntityID,String pdpEntityID) throws SAML2Exception {  boolean isTrusted=false;  try {    isTrusted=saml2MetaManager.isTrustedXACMLProvider(realm,pepEntityID,pdpEntityID,SAML2Constants.PEP_ROLE);  } catch (  SAML2MetaException sme) {    debug.error("Error retreiving meta",sme);  }  return isTrusted;}  }
class C{  private static String which(Class clazz){  try {    String classnameAsResource=clazz.getName().replace('.','/') + ".class";    ClassLoader loader=clazz.getClassLoader();    URL it;    if (loader != null) {      it=loader.getResource(classnameAsResource);    } else {      it=ClassLoader.getSystemResource(classnameAsResource);    }    if (it != null) {      return it.toString();    }  } catch (  VirtualMachineError vme) {    throw vme;  }catch (  ThreadDeath td) {    throw td;  }catch (  Throwable t) {    if (debug) {      t.printStackTrace();    }  }  return "unknown location";}  }
class C{  public void preSendFailureResponse(HttpServletRequest request,HttpServletResponse response,String faultCode,String faultDetail) throws SAML2Exception {}  }
class C{  public Builder(){  localeBuilder=new InternalLocaleBuilder();}  }
class C{  public OAEPParameterSpec(String mdName,String mgfName,AlgorithmParameterSpec mgfSpec,PSource pSrc){  if (mdName == null) {    throw new NullPointerException("mdName == null");  } else   if (mgfName == null) {    throw new NullPointerException("mgfName == null");  } else   if (pSrc == null) {    throw new NullPointerException("pSrc == null");  }  this.mdName=mdName;  this.mgfName=mgfName;  this.mgfSpec=mgfSpec;  this.pSrc=pSrc;}  }
class C{  protected DirectoryWalker(){  this(null,-1);}  }
class C{  protected PDLOverrideSupported(int value){  super(value);}  }
class C{  public final boolean checkTag(int identifier){  return this.constrId == identifier;}  }
class C{  private void signalRemove(InternalSession session,SessionEventType event){  sessionEventBroker.onEvent(new InternalSessionEvent(session,event));  sessionLogging.logEvent(session.toSessionInfo(),event);  session.setState(SessionState.DESTROYED);  sendEvent(session,event);}  }
class C{  private static String applyQuotes(String item,char openQuote,char closeQuote,boolean allowCommas){  if (item == null) {    item="";  }  boolean prevSpace=false;  int charOffset;  int charKind;  int i;  for (i=0; i < item.length(); i++) {    char ch=item.charAt(i);    charKind=classifyCharacter(ch);    if (i == 0 && charKind == UCK_QUOTE) {      break;    }    if (charKind == UCK_SPACE) {      if (prevSpace) {        break;      }      prevSpace=true;    } else {      prevSpace=false;      if ((charKind == UCK_SEMICOLON || charKind == UCK_CONTROL) || (charKind == UCK_COMMA && !allowCommas)) {        break;      }    }  }  if (i < item.length()) {    StringBuffer newItem=new StringBuffer(item.length() + 2);    int splitPoint;    for (splitPoint=0; splitPoint <= i; splitPoint++) {      if (classifyCharacter(item.charAt(i)) == UCK_QUOTE) {        break;      }    }    newItem.append(openQuote).append(item.substring(0,splitPoint));    for (charOffset=splitPoint; charOffset < item.length(); charOffset++) {      newItem.append(item.charAt(charOffset));      if (classifyCharacter(item.charAt(charOffset)) == UCK_QUOTE && isSurroundingQuote(item.charAt(charOffset),openQuote,closeQuote)) {        newItem.append(item.charAt(charOffset));      }    }    newItem.append(closeQuote);    item=newItem.toString();  }  return item;}  }
class C{  @Override public boolean equals(Object other){  if (other == this) {    return true;  }  if (other instanceof ZoneOffsetTransition) {    ZoneOffsetTransition d=(ZoneOffsetTransition)other;    return transition.equals(d.transition) && offsetBefore.equals(d.offsetBefore) && offsetAfter.equals(d.offsetAfter);  }  return false;}  }
class C{  public BAD_TYPECODE(){  this("");}  }
class C{  public ShapelessRecipe removeIngredient(Material ingredient){  return removeIngredient(ingredient,0);}  }
class C{  public static void registerSASLMechanismHandler(String name,SASLMechanismHandler<?> handler){  DirectoryServer.registerSASLMechanismHandler(name,handler);}  }
class C{  private void completeBranchInitialization(final Map<String,Template> templates,boolean generateBranches) throws DecodeException {  subordinateTemplates=new ArrayList<>();  for (int i=0; i < subordinateTemplateNames.size(); i++) {    subordinateTemplates.add(templates.get(subordinateTemplateNames.get(i).toLowerCase()));    if (subordinateTemplates.get(i) == null) {      throw DecodeException.fatalError(ERR_ENTRY_GENERATOR_UNDEFINED_BRANCH_SUBORDINATE.get(branchDN.toString(),subordinateTemplateNames.get(i)));    }  }  nextEntry=buildBranchEntry(generateBranches);}  }
class C{  public static String encodeOffline(byte[] passwordBytes) throws DirectoryException {  byte[] saltBytes=new byte[NUM_SALT_BYTES];  new Random().nextBytes(saltBytes);  byte[] passwordPlusSalt=new byte[passwordBytes.length + NUM_SALT_BYTES];  System.arraycopy(passwordBytes,0,passwordPlusSalt,0,passwordBytes.length);  System.arraycopy(saltBytes,0,passwordPlusSalt,passwordBytes.length,NUM_SALT_BYTES);  MessageDigest messageDigest;  try {    messageDigest=MessageDigest.getInstance(MESSAGE_DIGEST_ALGORITHM_SHA_512);  } catch (  Exception e) {    LocalizableMessage message=ERR_PWSCHEME_CANNOT_INITIALIZE_MESSAGE_DIGEST.get(MESSAGE_DIGEST_ALGORITHM_SHA_512,e);    throw new DirectoryException(ResultCode.OTHER,message,e);  }  byte[] digestBytes=messageDigest.digest(passwordPlusSalt);  byte[] digestPlusSalt=new byte[digestBytes.length + NUM_SALT_BYTES];  System.arraycopy(digestBytes,0,digestPlusSalt,0,digestBytes.length);  System.arraycopy(saltBytes,0,digestPlusSalt,digestBytes.length,NUM_SALT_BYTES);  Arrays.fill(passwordPlusSalt,(byte)0);  return "{" + STORAGE_SCHEME_NAME_SALTED_SHA_512 + "}"+ Base64.encode(digestPlusSalt);}  }
class C{  protected MouseDragGestureRecognizer(DragSource ds,Component c){  this(ds,c,DnDConstants.ACTION_NONE);}  }
class C{  public Advice createAdvice(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ADVICE,xml);  if (obj == null) {    return new AdviceImpl(xml);  } else {    return (Advice)obj;  }}  }
class C{  public final float readFloat() throws IOException {  return Float.intBitsToFloat(readInt());}  }
class C{  private void importLDIF() throws Exception {  importConfig=new LDIFImportConfig(ldif.getAbsolutePath());  TestCaseUtils.initializeTestBackend(false);  backend=DirectoryServer.getBackend("test");  backend.importLDIF(importConfig,DirectoryServer.getInstance().getServerContext());}  }
class C{  private static LSException createLSException(short code,Throwable cause){  LSException lse=new LSException(code,cause != null ? cause.getMessage() : null);  if (cause != null && ThrowableMethods.fgThrowableMethodsAvailable) {    try {      ThrowableMethods.fgThrowableInitCauseMethod.invoke(lse,new Object[]{cause});    } catch (    Exception e) {    }  }  return lse;}  }
class C{  public CallPhoneAction(HashMap<String,String> parameters) throws OmnidroidException {  super(PHONE_CALL_INTENT,Action.BY_SERVICE);  phoneNumber=parameters.get(PARAM_PHONE_NO);  if (phoneNumber == null) {    throw new OmnidroidException(120002,ExceptionMessageMap.getMessage(new Integer(120002).toString()));  }}  }
class C{  public void login(Principal principal,char[] password) throws AuthLoginException {  if (principal == null)   throw new AuthLoginException(amAuthContextLocal,"invalid-username",null);  if (password == null)   throw new AuthLoginException(amAuthContextLocal,"invalid-password",null);  this.password=password;  login(null,null,principal,password,null);}  }
class C{  private void addStaticPerms(PermissionCollection perms,PermissionCollection statics){  if (statics != null) {synchronized (statics) {      Enumeration<Permission> e=statics.elements();      while (e.hasMoreElements()) {        perms.add(e.nextElement());      }    }  }}  }
class C{  protected static void init(){  rootSuffix=AMStoreConnection.getAMSdkBaseDN();  if (rootSuffix == null || rootSuffix.equals("")) {    debug.error("com.iplanet.am.rootsuffix property value " + "should not be null");    return;  }}  }
class C{  public FieldLock(PdfName action,PdfArray fields){  this.action=action;  this.fields=fields;}  }
class C{  public int next(){  int eType;  int node=_currentNode;  int nodeType=_nodeType;  if (nodeType >= DTM.NTYPES) {    while (node != DTM.NULL && _exptype(node) != nodeType) {      node=_nextsib(node);    }  } else {    while (node != DTM.NULL) {      eType=_exptype(node);      if (eType < DTM.NTYPES) {        if (eType == nodeType) {          break;        }      } else       if (m_expandedNameTable.getType(eType) == nodeType) {        break;      }      node=_nextsib(node);    }  }  if (node == DTM.NULL) {    _currentNode=DTM.NULL;    return DTM.NULL;  } else {    _currentNode=_nextsib(node);    return returnNode(makeNodeHandle(node));  }}  }
class C{  public TransformerException(String message,Throwable e){  super(((message == null) || (message.length() == 0)) ? e.toString() : message);  this.containedException=e;  this.locator=null;}  }
class C{  public boolean isSkipLastFooter(){  return skipLastFooter;}  }
class C{  public Iterator<NameValue> iterator(){  return this.getMap().values().iterator();}  }
class C{  public void write(int c){  buf.append((char)c);}  }
class C{  @Override public void removeLifecycleListener(LifecycleListener listener){}  }
class C{  @Override public final int hashCode(){  int hc=this.targetHost.hashCode();  if (this.localAddress != null)   hc^=localAddress.hashCode();  if (this.proxyChain != null) {    hc^=proxyChain.length;    for (    HttpHost aProxyChain : proxyChain)     hc^=aProxyChain.hashCode();  }  if (this.secure)   hc^=0x11111111;  hc^=this.tunnelled.hashCode();  hc^=this.layered.hashCode();  return hc;}  }
class C{  public NameFileComparator(){  this.caseSensitivity=IOCase.SENSITIVE;}  }
class C{  public GSERParser readStartSequence() throws GSERException {  next(GSER_SEQUENCE_START);  skip(GSER_SP);  return this;}  }
class C{  static void useAffinityControl(Connection connection) throws LdapException {  if (isSupported(AffinityControl.OID)) {    final String dn="uid=bjensen,ou=People,dc=example,dc=com";    final AffinityControl control=AffinityControl.newControl(true);    final ModifyRequest modification=Requests.newModifyRequest(dn).addControl(control).addModification(ModificationType.ADD,"description","Added with an Affinity control");    connection.modify(modification);    final SearchRequest read=Requests.newSearchRequest(dn,SearchScope.BASE_OBJECT,"(&)","description").addControl(control);    try (final ConnectionEntryReader reader=connection.search(read);final LDIFEntryWriter writer=new LDIFEntryWriter(System.out)){      while (reader.hasNext()) {        writer.writeEntry(reader.readEntry());      }    } catch (    final IOException e) {      System.err.println(e.getMessage());      System.exit(ResultCode.CLIENT_SIDE_LOCAL_ERROR.intValue());    }  } else {    System.err.println("AffinityControl not supported.");  }}  }
class C{  public CharConversionException(String s){  super(s);}  }
class C{  public boolean open_design(InputStream p_input_stream){  java.awt.Point viewport_position=null;  ObjectInputStream object_stream=null;  try {    object_stream=new ObjectInputStream(p_input_stream);    board_panel.itera_board.read_design(object_stream);  } catch (  Exception exc) {    stat.userPrintln(classname + "open_design: ",exc);    return false;  }  try {    viewport_position=(Point)object_stream.readObject();    Point frame_location=(Point)object_stream.readObject();    work_frame.setLocation(frame_location);    Rectangle frame_bounds=(Rectangle)object_stream.readObject();    work_frame.setBounds(frame_bounds);  } catch (  Exception e) {    return false;  }  allocate_permanent_subwindows();  for (  GuiSubWindowSavable cur_subwindow : permanent_subwindows) {    cur_subwindow.read(object_stream);  }  try {    p_input_stream.close();  } catch (  java.io.IOException e) {    return false;  }  Dimension panel_size=board_panel.itera_board.gdi_context.get_panel_size();  board_panel.setSize(panel_size);  board_panel.setPreferredSize(panel_size);  set_viewport_position(viewport_position);  board_panel.create_popup_menus();  board_panel.init_colors();  board_panel.itera_board.create_ratsnest();  hilight_selected_button();  work_frame.setVisible(true);  return true;}  }
class C{  public final void println(String message){  try {    Element rootElement=workDoc.getDefaultRootElement();    int deleteLines=rootElement.getElementCount() - linesMax;    for (int index=0; index < deleteLines; index++) {      Element elem=rootElement.getElement(0);      workDoc.remove(elem.getStartOffset(),elem.getEndOffset());    }    workDoc.insertString(workDoc.getLength(),message,null);    textArea.setCaretPosition(workDoc.getLength());    workDoc.insertString(workDoc.getLength(),"\n",null);  } catch (  Exception exc) {    exc.printStackTrace();  }}  }
class C{  public static boolean isLambda(Element elem) throws UnexpectedEndException {  if (elem.getContent().equals("(")) {    Node n=get_next_node(elem);    if (n instanceof ElementStartNode) {      n=get_next_node(n);    }    if (n instanceof Element) {      if (((Element)n).getContent().equals(")")) {        n=get_next_node(n);        if (n instanceof Element && ((Element)n).getContent().equals("->")) {          return true;        }      }    }  } else   if (elem.getTokenType() == TokenType.VALID_NAME) {    Node n=get_next_node(elem);    if (n instanceof Element) {      if (((Element)n).getContent().equals("->")) {        return true;      }    }  }  return false;}  }
class C{  public ListBuffer<A> prepend(final A x){  elements=elements.prepend(x);  count++;  return this;}  }
class C{  void registerInstanceKeyCertificate(ConnectionWrapper conn,Map<ServerProperty,Object> serverProperties,DN serverEntryDn) throws ADSContextException {  if (!serverProperties.containsKey(ServerProperty.INSTANCE_PUBLIC_KEY_CERTIFICATE)) {    return;  }  String keyID=(String)serverProperties.get(ServerProperty.INSTANCE_KEY_ID);  Filter filter=equality("objectclass","ds-cfg-instance-key");  if (null != keyID) {    filter=and(filter,equality(ServerProperty.INSTANCE_KEY_ID.getAttributeName(),keyID));  }  filter=and(filter,equality(ServerProperty.INSTANCE_PUBLIC_KEY_CERTIFICATE.getAttributeName() + ";binary",serverProperties.get(ServerProperty.INSTANCE_PUBLIC_KEY_CERTIFICATE)));  DN dn=ADSContext.getInstanceKeysContainerDN();  SearchRequest searchRequest=newSearchRequest(dn,WHOLE_SUBTREE,filter,"ds-cfg-key-id");  try (ConnectionEntryReader entryReader=conn.getConnection().search(searchRequest)){    boolean found=false;    while (entryReader.hasNext()) {      final Attribute keyIdAttr=entryReader.readEntry().getAttribute("ds-cfg-key-id");      if (null != keyIdAttr) {        keyID=keyIdAttr.firstValueAsString();      }      found=true;    }    if (!found) {      if (null == keyID) {        keyID=CryptoManagerImpl.getInstanceKeyID((byte[])serverProperties.get(ServerProperty.INSTANCE_PUBLIC_KEY_CERTIFICATE));      }      String keyDn=ServerProperty.INSTANCE_KEY_ID.getAttributeName() + "=" + Rdn.escapeValue(keyID)+ ","+ ADSContext.getInstanceKeysContainerDN();      AddRequest addRequest=newAddRequest(keyDn).addAttribute("objectclass","top","ds-cfg-instance-key");      if (null != keyID) {        addRequest.addAttribute(ServerProperty.INSTANCE_KEY_ID.getAttributeName(),keyID);      }      addRequest.addAttribute(ServerProperty.INSTANCE_PUBLIC_KEY_CERTIFICATE.getAttributeName() + ";binary",serverProperties.get(ServerProperty.INSTANCE_PUBLIC_KEY_CERTIFICATE)).addAttribute(ServerProperty.INSTANCE_KEY_ID.getAttributeName(),keyID);      throwIfNotSuccess(conn.getConnection().add(addRequest));    }    if (serverEntryDn != null) {      ModifyRequest request=newModifyRequest(serverEntryDn).addModification(REPLACE,ServerProperty.INSTANCE_KEY_ID.getAttributeName(),keyID);      throwIfNotSuccess(conn.getConnection().modify(request));    }  } catch (  IOException|CryptoManagerException ne) {    throw new ADSContextException(ErrorType.ERROR_UNEXPECTED,ne);  }}  }
class C{  private static SSOToken ldapLoginInternal(String bindUser,String bindPwd){  String classMethod="UpgradeUtils:ldapLoginInternal : ";  SSOToken ssoToken=null;  try {    com.sun.identity.authentication.internal.AuthContext ac=getLDAPAuthContext(bindUser,bindPwd);    if (ac.getLoginStatus() == AUTH_SUCCESS) {      ssoToken=ac.getSSOToken();    } else {      ssoToken=null;    }  } catch (  LoginException le) {    debug.error(classMethod + "Error creating SSOToken",le);  }catch (  InvalidAuthContextException iace) {    ssoToken=null;    debug.error(classMethod + "Error creating SSOToken",iace);  }  return ssoToken;}  }
class C{  private void checkActiveProductHome(String migrateFromProductHome,IStateAccess stateAccess) throws InstallException {  String productHomeInLocator=getServerLocatorHandler().getProductHome(stateAccess);  if (!productHomeInLocator.equals(migrateFromProductHome)) {    Debug.log("MultipleMigrateDriver.checkActiveProductHome() - " + "active product home:" + productHomeInLocator + " input product home:"+ migrateFromProductHome);    Object[] args=new Object[]{migrateFromProductHome};    throw new InstallException(LocalizedMessage.get(LOC_HR_MSG_MIGRATE_NOT_ACTIVE_PRODUCT,args));  }}  }
class C{  public synchronized Entry push(final T object){  Entry entry=new Entry(object);  if (size >= maxSize) {    entry.setReplaced(pop());  }  if (first == null) {    first=last=entry;  } else {    first.setPrevious(entry);    entry.setNext(first);    first=entry;  }  size++;  return entry;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.MgmtDataElement createMgmtDataElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.MgmtDataElementImpl();}  }
class C{  @Override public synchronized void reset() throws IOException {  try {    in.reset();  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public static void initCause(Throwable throwable,Throwable cause){  if (INIT_CAUSE_METHOD != null) {    try {      INIT_CAUSE_METHOD.invoke(throwable,new Object[]{cause});    } catch (    Exception e) {    }  }}  }
class C{  public AMException(String msg,String errorCode,UMSException ue){  this(msg,errorCode,null,ue);}  }
class C{  @Override public int compare(AbstractIndexDescriptor index1,AbstractIndexDescriptor index2){  int result;  VLVIndexDescriptor i1=(VLVIndexDescriptor)index1;  VLVIndexDescriptor i2=(VLVIndexDescriptor)index2;  int[] possibleResults={compareNames(i1,i2),compareBaseDNs(i1,i2),compareScopes(i1,i2),compareFilters(i1,i2),compareSortOrders(i1,i2),compareRebuildRequired(i1,i2)};  result=possibleResults[sortColumn];  if (result == 0) {    for (    int i : possibleResults) {      if (i != 0) {        result=i;        break;      }    }  }  if (!sortAscending) {    result=-result;  }  return result;}  }
class C{  public void processSubscribe(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("notifier:  " + request);    logger.info("notifier : dialog = " + requestEvent.getDialog());    if (handleSubscribe) {      EventHeader eventHeader=(EventHeader)request.getHeader(EventHeader.NAME);      if (eventHeader == null) {        logger.info("Cannot find event header.... dropping request.");        return;      }      Response response=null;      ServerTransaction st=requestEvent.getServerTransaction();      if (st == null) {        st=sipProvider.getNewServerTransaction(request);      }      response=messageFactory.createResponse(202,request);      ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);      if (((MessageExt)request).getToHeader().getTag() == null) {        toTag=Integer.toHexString((int)(Math.random() * Integer.MAX_VALUE));        toHeader.setTag(toTag);      }      Address address=addressFactory.createAddress("Notifier <sip:127.0.0.1>");      ((SipURI)address.getURI()).setPort(udpProvider.getListeningPoint("udp").getPort());      ContactHeader contactHeader=headerFactory.createContactHeader(address);      response.addHeader(contactHeader);      ExpiresHeader expires=(ExpiresHeader)request.getHeader(ExpiresHeader.NAME);      if (expires == null) {        expires=headerFactory.createExpiresHeader(30);      }      response.addHeader(expires);      Dialog dialog=sipProvider.getNewDialog(st);      Address toAddress=((ResponseExt)response).getFromHeader().getAddress();      String toTag=((ResponseExt)response).getFromHeader().getTag();      Address fromAddress=((ResponseExt)response).getToHeader().getAddress();      String fromTag=((ResponseExt)response).getToHeader().getTag();      FromHeader fromHeader=headerFactory.createFromHeader(fromAddress,fromTag);      toHeader=headerFactory.createToHeader(toAddress,toTag);      CSeqHeader cSeqHeader=headerFactory.createCSeqHeader(1L,Request.NOTIFY);      ArrayList viaHeaders=new ArrayList();      String transport="udp";      int port=sipProvider.getListeningPoint(transport).getPort();      ViaHeader viaHeader=headerFactory.createViaHeader("127.0.0.1",port,transport,null);      viaHeaders.add(viaHeader);      MaxForwardsHeader maxForwards=headerFactory.createMaxForwardsHeader(70);      SipURI requestURI=addressFactory.createSipURI(null,"127.0.0.1");      requestURI.setPort(5060);      CallIdHeader callIdHeader=((ResponseExt)response).getCallIdHeader();      Request notifyRequest=messageFactory.createRequest(requestURI,Request.NOTIFY,callIdHeader,cSeqHeader,fromHeader,toHeader,viaHeaders,maxForwards);      ((SipURI)contactHeader.getAddress().getURI()).setParameter("id","not");      SubscriptionStateHeader sstate=headerFactory.createSubscriptionStateHeader(SubscriptionStateHeader.PENDING);      if (expires.getExpires() == 0) {        sstate=headerFactory.createSubscriptionStateHeader(SubscriptionStateHeader.TERMINATED);      }      if (sstate.getState().equalsIgnoreCase(SubscriptionStateHeader.TERMINATED)) {        sstate.setReasonCode("deactivated");      }      notifyRequest.addHeader(sstate);      notifyRequest.setHeader(eventHeader);      notifyRequest.setHeader(contactHeader);      ClientTransaction ct=udpProvider.getNewClientTransaction(notifyRequest);      ct.sendRequest();      logger.info("NOTIFY Branch ID " + ((ViaHeader)request.getHeader(ViaHeader.NAME)).getParameter("branch"));      logger.info("notifier: got an Subscribe sending OK " + response);      Thread.sleep(1000);      st.sendResponse(response);    }  } catch (  Throwable ex) {    ex.printStackTrace();  }}  }
class C{  public static Cluster ensureMockCassandraRunningAndEstablished(String cassandraKeyspace) throws ConfigurationException, IOException, InterruptedException, TTransportException {  Cluster cluster;  long timeout=60000;  EmbeddedCassandraServerHelper.startEmbeddedCassandra(timeout);  cluster=Cluster.builder().addContactPoints("127.0.0.1").withPort(9142).build();  final Metadata metadata=cluster.getMetadata();  Session session=cluster.connect();  Utils.initDatabase(DB_CQL,session);  session=cluster.connect(cassandraKeyspace);  logger.info("Connected to cluster: " + metadata.getClusterName() + '\n');  return cluster;}  }
class C{  public Panel(LayoutManager layout){  setLayout(layout);}  }
class C{  public static StartTLSExtendedRequest copyOfStartTLSExtendedRequest(final StartTLSExtendedRequest request){  return new StartTLSExtendedRequestImpl(request);}  }
class C{  public void paintDirtyRegions(){synchronized (this) {    Map<Component,Rectangle> tmp=tmpDirtyComponents;    tmpDirtyComponents=dirtyComponents;    dirtyComponents=tmp;    dirtyComponents.clear();  }  paintDirtyRegions(tmpDirtyComponents);}  }
class C{  public void removeTemplateAttribute(String name){  removeAttribute(new Attr(name));}  }
class C{  @Override protected void writeValue(ASN1Writer writer) throws IOException {}  }
class C{  public ClientException(ReturnCode exitCode,LocalizableMessage message,Throwable cause){  super(message.toString(),cause);  this.returnCode=exitCode;  this.message=message;}  }
class C{  public void ifZCmp(final int mode,final Label label){  mv.visitJumpInsn(mode,label);}  }
class C{  public LDAPPreReadResponseControl(boolean isCritical,SearchResultEntry searchEntry){  super(OID_LDAP_READENTRY_PREREAD,isCritical);  this.searchEntry=searchEntry;}  }
